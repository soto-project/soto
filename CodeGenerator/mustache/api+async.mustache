{{%CONTENT_TYPE:TEXT}}
{{>header}}

#if compiler(>=5.5) && $AsyncAwait

import SotoCore

@available(macOS 9999, iOS 9999, watchOS 9999, tvOS 9999, *)
extension {{ name }} {

    // MARK: Async API Calls
{{#operations}}

{{#comment}}
    /// {{.}}
{{/comment}}
{{#deprecated}}
    @available(*, deprecated, message:"{{.}}")
{{/deprecated}}
    public func {{funcName}}({{#inputShape}}_ input: {{.}}, {{/inputShape}}logger: {{logger}} = AWSClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws{{#outputShape}} -> {{.}}{{/outputShape}} {
        return try await self.client.execute(operation: "{{name}}", path: "{{path}}", httpMethod: .{{httpMethod}}, serviceConfig: self.config{{#inputShape}}, input: input{{/inputShape}}, logger: logger, on: eventLoop)
    }
{{/operations}}
{{#first(streamingOperations)}}

    // MARK: Streaming Async API Calls
{{#streamingOperations}}

{{#comment}}
    /// {{.}}
{{/comment}}
{{#deprecated}}
    @available(*, deprecated, message:"{{.}}")
{{/deprecated}}
    public func {{funcName}}Streaming({{#inputShape}}_ input: {{.}}, {{/inputShape}}logger: {{logger}} = AWSClient.loggingDisabled, on eventLoop: EventLoop? = nil, _ stream: @escaping ({{streaming}}, EventLoop) -> EventLoopFuture<Void>) async throws{{#outputShape}} -> {{.}}{{/outputShape}} {
        return try await self.client.execute(operation: "{{name}}", path: "{{path}}", httpMethod: .{{httpMethod}}, serviceConfig: self.config{{#inputShape}}, input: input{{/inputShape}}, logger: logger, on: eventLoop, stream: stream)
    }
{{/streamingOperations}}
{{/first(streamingOperations)}}
}

#endif // compiler(>=5.5) && $AsyncAwait
