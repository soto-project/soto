//===----------------------------------------------------------------------===//
//
// This source file is part of the Soto for AWS open source project
//
// Copyright (c) 2017-2023 the Soto project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
// See CONTRIBUTORS.txt for the list of Soto project authors
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by https://github.com/soto-project/soto-codegenerator.
// DO NOT EDIT.

@_exported import SotoCore

/// Service object for interacting with AWS CleanRoomsML service.
///
/// Welcome to the Amazon Web Services Clean Rooms ML API Reference. Amazon Web Services Clean Rooms ML provides a privacy-enhancing method for two parties to identify similar users in their data without the need to share their data with each other. The first party brings the training data to Clean Rooms so that they can create and configure an audience model (lookalike model) and associate it with a collaboration. The second party then brings their seed data to Clean Rooms  and generates an audience (lookalike segment) that resembles the training data. To learn more about Amazon Web Services Clean Rooms ML concepts, procedures, and best practices, see the Clean Rooms User Guide. To learn more about SQL commands, functions, and conditions supported in Clean Rooms, see the Clean Rooms SQL Reference.
public struct CleanRoomsML: AWSService {
    // MARK: Member variables

    /// Client used for communication with AWS
    public let client: AWSClient
    /// Service configuration
    public let config: AWSServiceConfig

    // MARK: Initialization

    /// Initialize the CleanRoomsML client
    /// - parameters:
    ///     - client: AWSClient used to process requests
    ///     - region: Region of server you want to communicate with. This will override the partition parameter.
    ///     - partition: AWS partition where service resides, standard (.aws), china (.awscn), government (.awsusgov).
    ///     - endpoint: Custom endpoint URL to use instead of standard AWS servers
    ///     - middleware: Middleware chain used to edit requests before they are sent and responses before they are decoded 
    ///     - timeout: Timeout value for HTTP requests
    ///     - byteBufferAllocator: Allocator for ByteBuffers
    ///     - options: Service options
    public init(
        client: AWSClient,
        region: SotoCore.Region? = nil,
        partition: AWSPartition = .aws,
        endpoint: String? = nil,
        middleware: AWSMiddlewareProtocol? = nil,
        timeout: TimeAmount? = nil,
        byteBufferAllocator: ByteBufferAllocator = ByteBufferAllocator(),
        options: AWSServiceConfig.Options = []
    ) {
        self.client = client
        self.config = AWSServiceConfig(
            region: region,
            partition: region?.partition ?? partition,
            serviceName: "CleanRoomsML",
            serviceIdentifier: "cleanrooms-ml",
            serviceProtocol: .restjson,
            apiVersion: "2023-09-06",
            endpoint: endpoint,
            errorType: CleanRoomsMLErrorType.self,
            middleware: middleware,
            timeout: timeout,
            byteBufferAllocator: byteBufferAllocator,
            options: options
        )
    }





    // MARK: API Calls

    /// Defines the information necessary to create an audience model. An audience model is a machine learning model that Clean Rooms ML trains to measure similarity between users. Clean Rooms ML manages training and storing the audience model. The audience model can be used in multiple calls to the StartAudienceGenerationJob API.
    @Sendable
    public func createAudienceModel(_ input: CreateAudienceModelRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> CreateAudienceModelResponse {
        return try await self.client.execute(
            operation: "CreateAudienceModel", 
            path: "/audience-model", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Defines the information necessary to create a configured audience model.
    @Sendable
    public func createConfiguredAudienceModel(_ input: CreateConfiguredAudienceModelRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> CreateConfiguredAudienceModelResponse {
        return try await self.client.execute(
            operation: "CreateConfiguredAudienceModel", 
            path: "/configured-audience-model", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Defines the information necessary to create a training dataset. In Clean Rooms ML, the TrainingDataset is metadata that points to a Glue table, which is read only during AudienceModel creation.
    @Sendable
    public func createTrainingDataset(_ input: CreateTrainingDatasetRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> CreateTrainingDatasetResponse {
        return try await self.client.execute(
            operation: "CreateTrainingDataset", 
            path: "/training-dataset", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Deletes the specified audience generation job, and removes all data associated with the job.
    @Sendable
    public func deleteAudienceGenerationJob(_ input: DeleteAudienceGenerationJobRequest, logger: Logger = AWSClient.loggingDisabled) async throws {
        return try await self.client.execute(
            operation: "DeleteAudienceGenerationJob", 
            path: "/audience-generation-job/{audienceGenerationJobArn}", 
            httpMethod: .DELETE, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Specifies an audience model that you want to delete. You can't delete an audience model if there are any configured audience models that depend on the audience model.
    @Sendable
    public func deleteAudienceModel(_ input: DeleteAudienceModelRequest, logger: Logger = AWSClient.loggingDisabled) async throws {
        return try await self.client.execute(
            operation: "DeleteAudienceModel", 
            path: "/audience-model/{audienceModelArn}", 
            httpMethod: .DELETE, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Deletes the specified configured audience model. You can't delete a configured audience model if there are any lookalike models that use the configured audience model. If you delete a configured audience model, it will be removed from any collaborations that it is associated to.
    @Sendable
    public func deleteConfiguredAudienceModel(_ input: DeleteConfiguredAudienceModelRequest, logger: Logger = AWSClient.loggingDisabled) async throws {
        return try await self.client.execute(
            operation: "DeleteConfiguredAudienceModel", 
            path: "/configured-audience-model/{configuredAudienceModelArn}", 
            httpMethod: .DELETE, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Deletes the specified configured audience model policy.
    @Sendable
    public func deleteConfiguredAudienceModelPolicy(_ input: DeleteConfiguredAudienceModelPolicyRequest, logger: Logger = AWSClient.loggingDisabled) async throws {
        return try await self.client.execute(
            operation: "DeleteConfiguredAudienceModelPolicy", 
            path: "/configured-audience-model/{configuredAudienceModelArn}/policy", 
            httpMethod: .DELETE, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Specifies a training dataset that you want to delete. You can't delete a training dataset if there are any audience models that depend on the training dataset. In Clean Rooms ML, the TrainingDataset is metadata that points to a Glue table, which is read only during AudienceModel creation. This action deletes the metadata.
    @Sendable
    public func deleteTrainingDataset(_ input: DeleteTrainingDatasetRequest, logger: Logger = AWSClient.loggingDisabled) async throws {
        return try await self.client.execute(
            operation: "DeleteTrainingDataset", 
            path: "/training-dataset/{trainingDatasetArn}", 
            httpMethod: .DELETE, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Returns information about an audience generation job.
    @Sendable
    public func getAudienceGenerationJob(_ input: GetAudienceGenerationJobRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> GetAudienceGenerationJobResponse {
        return try await self.client.execute(
            operation: "GetAudienceGenerationJob", 
            path: "/audience-generation-job/{audienceGenerationJobArn}", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Returns information about an audience model
    @Sendable
    public func getAudienceModel(_ input: GetAudienceModelRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> GetAudienceModelResponse {
        return try await self.client.execute(
            operation: "GetAudienceModel", 
            path: "/audience-model/{audienceModelArn}", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Returns information about a specified configured audience model.
    @Sendable
    public func getConfiguredAudienceModel(_ input: GetConfiguredAudienceModelRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> GetConfiguredAudienceModelResponse {
        return try await self.client.execute(
            operation: "GetConfiguredAudienceModel", 
            path: "/configured-audience-model/{configuredAudienceModelArn}", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Returns information about a configured audience model policy.
    @Sendable
    public func getConfiguredAudienceModelPolicy(_ input: GetConfiguredAudienceModelPolicyRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> GetConfiguredAudienceModelPolicyResponse {
        return try await self.client.execute(
            operation: "GetConfiguredAudienceModelPolicy", 
            path: "/configured-audience-model/{configuredAudienceModelArn}/policy", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Returns information about a training dataset.
    @Sendable
    public func getTrainingDataset(_ input: GetTrainingDatasetRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> GetTrainingDatasetResponse {
        return try await self.client.execute(
            operation: "GetTrainingDataset", 
            path: "/training-dataset/{trainingDatasetArn}", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Returns a list of the audience export jobs.
    @Sendable
    public func listAudienceExportJobs(_ input: ListAudienceExportJobsRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> ListAudienceExportJobsResponse {
        return try await self.client.execute(
            operation: "ListAudienceExportJobs", 
            path: "/audience-export-job", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Returns a list of audience generation jobs.
    @Sendable
    public func listAudienceGenerationJobs(_ input: ListAudienceGenerationJobsRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> ListAudienceGenerationJobsResponse {
        return try await self.client.execute(
            operation: "ListAudienceGenerationJobs", 
            path: "/audience-generation-job", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Returns a list of audience models.
    @Sendable
    public func listAudienceModels(_ input: ListAudienceModelsRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> ListAudienceModelsResponse {
        return try await self.client.execute(
            operation: "ListAudienceModels", 
            path: "/audience-model", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Returns a list of the configured audience models.
    @Sendable
    public func listConfiguredAudienceModels(_ input: ListConfiguredAudienceModelsRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> ListConfiguredAudienceModelsResponse {
        return try await self.client.execute(
            operation: "ListConfiguredAudienceModels", 
            path: "/configured-audience-model", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Returns a list of tags for a provided resource.
    @Sendable
    public func listTagsForResource(_ input: ListTagsForResourceRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> ListTagsForResourceResponse {
        return try await self.client.execute(
            operation: "ListTagsForResource", 
            path: "/tags/{resourceArn}", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Returns a list of training datasets.
    @Sendable
    public func listTrainingDatasets(_ input: ListTrainingDatasetsRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> ListTrainingDatasetsResponse {
        return try await self.client.execute(
            operation: "ListTrainingDatasets", 
            path: "/training-dataset", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Create or update the resource policy for a configured audience model.
    @Sendable
    public func putConfiguredAudienceModelPolicy(_ input: PutConfiguredAudienceModelPolicyRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> PutConfiguredAudienceModelPolicyResponse {
        return try await self.client.execute(
            operation: "PutConfiguredAudienceModelPolicy", 
            path: "/configured-audience-model/{configuredAudienceModelArn}/policy", 
            httpMethod: .PUT, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Export an audience of a specified size after you have generated an audience.
    @Sendable
    public func startAudienceExportJob(_ input: StartAudienceExportJobRequest, logger: Logger = AWSClient.loggingDisabled) async throws {
        return try await self.client.execute(
            operation: "StartAudienceExportJob", 
            path: "/audience-export-job", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Information necessary to start the audience generation job.
    @Sendable
    public func startAudienceGenerationJob(_ input: StartAudienceGenerationJobRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> StartAudienceGenerationJobResponse {
        return try await self.client.execute(
            operation: "StartAudienceGenerationJob", 
            path: "/audience-generation-job", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Adds metadata tags to a specified resource.
    @Sendable
    public func tagResource(_ input: TagResourceRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> TagResourceResponse {
        return try await self.client.execute(
            operation: "TagResource", 
            path: "/tags/{resourceArn}", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Removes metadata tags from a specified resource.
    @Sendable
    public func untagResource(_ input: UntagResourceRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> UntagResourceResponse {
        return try await self.client.execute(
            operation: "UntagResource", 
            path: "/tags/{resourceArn}", 
            httpMethod: .DELETE, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Provides the information necessary to update a configured audience model. Updates that impact audience generation jobs take effect when a new job starts, but do not impact currently running jobs.
    @Sendable
    public func updateConfiguredAudienceModel(_ input: UpdateConfiguredAudienceModelRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> UpdateConfiguredAudienceModelResponse {
        return try await self.client.execute(
            operation: "UpdateConfiguredAudienceModel", 
            path: "/configured-audience-model/{configuredAudienceModelArn}", 
            httpMethod: .PATCH, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
}

extension CleanRoomsML {
    /// Initializer required by `AWSService.with(middlewares:timeout:byteBufferAllocator:options)`. You are not able to use this initializer directly as there are not public
    /// initializers for `AWSServiceConfig.Patch`. Please use `AWSService.with(middlewares:timeout:byteBufferAllocator:options)` instead.
    public init(from: CleanRoomsML, patch: AWSServiceConfig.Patch) {
        self.client = from.client
        self.config = from.config.with(patch: patch)
    }
}

// MARK: Paginators

@available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
extension CleanRoomsML {
    /// Returns a list of the audience export jobs.
    /// Return PaginatorSequence for operation.
    ///
    /// - Parameters:
    ///   - input: Input for request
    ///   - logger: Logger used flot logging
    public func listAudienceExportJobsPaginator(
        _ input: ListAudienceExportJobsRequest,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<ListAudienceExportJobsRequest, ListAudienceExportJobsResponse> {
        return .init(
            input: input,
            command: self.listAudienceExportJobs,
            inputKey: \ListAudienceExportJobsRequest.nextToken,
            outputKey: \ListAudienceExportJobsResponse.nextToken,
            logger: logger
        )
    }

    /// Returns a list of audience generation jobs.
    /// Return PaginatorSequence for operation.
    ///
    /// - Parameters:
    ///   - input: Input for request
    ///   - logger: Logger used flot logging
    public func listAudienceGenerationJobsPaginator(
        _ input: ListAudienceGenerationJobsRequest,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<ListAudienceGenerationJobsRequest, ListAudienceGenerationJobsResponse> {
        return .init(
            input: input,
            command: self.listAudienceGenerationJobs,
            inputKey: \ListAudienceGenerationJobsRequest.nextToken,
            outputKey: \ListAudienceGenerationJobsResponse.nextToken,
            logger: logger
        )
    }

    /// Returns a list of audience models.
    /// Return PaginatorSequence for operation.
    ///
    /// - Parameters:
    ///   - input: Input for request
    ///   - logger: Logger used flot logging
    public func listAudienceModelsPaginator(
        _ input: ListAudienceModelsRequest,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<ListAudienceModelsRequest, ListAudienceModelsResponse> {
        return .init(
            input: input,
            command: self.listAudienceModels,
            inputKey: \ListAudienceModelsRequest.nextToken,
            outputKey: \ListAudienceModelsResponse.nextToken,
            logger: logger
        )
    }

    /// Returns a list of the configured audience models.
    /// Return PaginatorSequence for operation.
    ///
    /// - Parameters:
    ///   - input: Input for request
    ///   - logger: Logger used flot logging
    public func listConfiguredAudienceModelsPaginator(
        _ input: ListConfiguredAudienceModelsRequest,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<ListConfiguredAudienceModelsRequest, ListConfiguredAudienceModelsResponse> {
        return .init(
            input: input,
            command: self.listConfiguredAudienceModels,
            inputKey: \ListConfiguredAudienceModelsRequest.nextToken,
            outputKey: \ListConfiguredAudienceModelsResponse.nextToken,
            logger: logger
        )
    }

    /// Returns a list of training datasets.
    /// Return PaginatorSequence for operation.
    ///
    /// - Parameters:
    ///   - input: Input for request
    ///   - logger: Logger used flot logging
    public func listTrainingDatasetsPaginator(
        _ input: ListTrainingDatasetsRequest,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<ListTrainingDatasetsRequest, ListTrainingDatasetsResponse> {
        return .init(
            input: input,
            command: self.listTrainingDatasets,
            inputKey: \ListTrainingDatasetsRequest.nextToken,
            outputKey: \ListTrainingDatasetsResponse.nextToken,
            logger: logger
        )
    }
}

extension CleanRoomsML.ListAudienceExportJobsRequest: AWSPaginateToken {
    public func usingPaginationToken(_ token: String) -> CleanRoomsML.ListAudienceExportJobsRequest {
        return .init(
            audienceGenerationJobArn: self.audienceGenerationJobArn,
            maxResults: self.maxResults,
            nextToken: token
        )
    }
}

extension CleanRoomsML.ListAudienceGenerationJobsRequest: AWSPaginateToken {
    public func usingPaginationToken(_ token: String) -> CleanRoomsML.ListAudienceGenerationJobsRequest {
        return .init(
            collaborationId: self.collaborationId,
            configuredAudienceModelArn: self.configuredAudienceModelArn,
            maxResults: self.maxResults,
            nextToken: token
        )
    }
}

extension CleanRoomsML.ListAudienceModelsRequest: AWSPaginateToken {
    public func usingPaginationToken(_ token: String) -> CleanRoomsML.ListAudienceModelsRequest {
        return .init(
            maxResults: self.maxResults,
            nextToken: token
        )
    }
}

extension CleanRoomsML.ListConfiguredAudienceModelsRequest: AWSPaginateToken {
    public func usingPaginationToken(_ token: String) -> CleanRoomsML.ListConfiguredAudienceModelsRequest {
        return .init(
            maxResults: self.maxResults,
            nextToken: token
        )
    }
}

extension CleanRoomsML.ListTrainingDatasetsRequest: AWSPaginateToken {
    public func usingPaginationToken(_ token: String) -> CleanRoomsML.ListTrainingDatasetsRequest {
        return .init(
            maxResults: self.maxResults,
            nextToken: token
        )
    }
}
