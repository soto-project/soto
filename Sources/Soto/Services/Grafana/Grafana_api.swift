//===----------------------------------------------------------------------===//
//
// This source file is part of the Soto for AWS open source project
//
// Copyright (c) 2017-2024 the Soto project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
// See CONTRIBUTORS.txt for the list of Soto project authors
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by https://github.com/soto-project/soto-codegenerator.
// DO NOT EDIT.

@_exported import SotoCore

/// Service object for interacting with AWS Grafana service.
///
/// Amazon Managed Grafana is a fully managed and secure data visualization service that you can use to instantly query, correlate, and visualize operational metrics, logs, and traces from multiple sources. Amazon Managed Grafana makes it easy to deploy, operate, and scale Grafana, a widely deployed data visualization tool that is popular for its extensible data support. With Amazon Managed Grafana, you create logically isolated Grafana servers called workspaces. In a workspace, you can create Grafana dashboards and visualizations to analyze your metrics, logs, and traces without having to build, package, or deploy any hardware to run Grafana servers.
public struct Grafana: AWSService {
    // MARK: Member variables

    /// Client used for communication with AWS
    public let client: AWSClient
    /// Service configuration
    public let config: AWSServiceConfig

    // MARK: Initialization

    /// Initialize the Grafana client
    /// - parameters:
    ///     - client: AWSClient used to process requests
    ///     - region: Region of server you want to communicate with. This will override the partition parameter.
    ///     - partition: AWS partition where service resides, standard (.aws), china (.awscn), government (.awsusgov).
    ///     - endpoint: Custom endpoint URL to use instead of standard AWS servers
    ///     - middleware: Middleware chain used to edit requests before they are sent and responses before they are decoded 
    ///     - timeout: Timeout value for HTTP requests
    ///     - byteBufferAllocator: Allocator for ByteBuffers
    ///     - options: Service options
    public init(
        client: AWSClient,
        region: SotoCore.Region? = nil,
        partition: AWSPartition = .aws,
        endpoint: String? = nil,
        middleware: AWSMiddlewareProtocol? = nil,
        timeout: TimeAmount? = nil,
        byteBufferAllocator: ByteBufferAllocator = ByteBufferAllocator(),
        options: AWSServiceConfig.Options = []
    ) {
        self.client = client
        self.config = AWSServiceConfig(
            region: region,
            partition: region?.partition ?? partition,
            serviceName: "Grafana",
            serviceIdentifier: "grafana",
            serviceProtocol: .restjson,
            apiVersion: "2020-08-18",
            endpoint: endpoint,
            serviceEndpoints: Self.serviceEndpoints,
            errorType: GrafanaErrorType.self,
            middleware: middleware,
            timeout: timeout,
            byteBufferAllocator: byteBufferAllocator,
            options: options
        )
    }


    /// custom endpoints for regions
    static var serviceEndpoints: [String: String] {[
        "ap-northeast-1": "grafana.ap-northeast-1.amazonaws.com",
        "ap-northeast-2": "grafana.ap-northeast-2.amazonaws.com",
        "ap-southeast-1": "grafana.ap-southeast-1.amazonaws.com",
        "ap-southeast-2": "grafana.ap-southeast-2.amazonaws.com",
        "eu-central-1": "grafana.eu-central-1.amazonaws.com",
        "eu-west-1": "grafana.eu-west-1.amazonaws.com",
        "eu-west-2": "grafana.eu-west-2.amazonaws.com",
        "us-east-1": "grafana.us-east-1.amazonaws.com",
        "us-east-2": "grafana.us-east-2.amazonaws.com",
        "us-west-2": "grafana.us-west-2.amazonaws.com"
    ]}



    // MARK: API Calls

    /// Assigns a Grafana Enterprise license to a workspace. To upgrade, you must use ENTERPRISE for the licenseType, and pass in a valid Grafana Labs token for the grafanaToken. Upgrading to Grafana Enterprise incurs additional fees. For more information, see Upgrade a workspace to Grafana Enterprise.
    @Sendable
    public func associateLicense(_ input: AssociateLicenseRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> AssociateLicenseResponse {
        return try await self.client.execute(
            operation: "AssociateLicense", 
            path: "/workspaces/{workspaceId}/licenses/{licenseType}", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Creates a workspace. In a workspace, you can create Grafana dashboards and visualizations to analyze your metrics, logs, and traces. You don't have to build, package, or deploy any hardware to run the Grafana server. Don't use CreateWorkspace to modify an existing workspace. Instead, use UpdateWorkspace.
    @Sendable
    public func createWorkspace(_ input: CreateWorkspaceRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> CreateWorkspaceResponse {
        return try await self.client.execute(
            operation: "CreateWorkspace", 
            path: "/workspaces", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Creates a Grafana API key for the workspace. This key can be used to authenticate requests sent to the workspace's HTTP API. See https://docs.aws.amazon.com/grafana/latest/userguide/Using-Grafana-APIs.html for available APIs and example requests.  In workspaces compatible with Grafana version 9 or above, use workspace service  accounts instead of API keys. API keys will be removed in a future release.
    @Sendable
    public func createWorkspaceApiKey(_ input: CreateWorkspaceApiKeyRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> CreateWorkspaceApiKeyResponse {
        return try await self.client.execute(
            operation: "CreateWorkspaceApiKey", 
            path: "/workspaces/{workspaceId}/apikeys", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Creates a service account for the workspace. A service account can be used to call  Grafana HTTP APIs, and run automated workloads. After creating the service account with the correct GrafanaRole for your use case, use  CreateWorkspaceServiceAccountToken to create a token that can be used to authenticate and authorize Grafana HTTP API calls. You can only create service accounts for workspaces that are compatible with Grafana version 9 and above.  For more information about service accounts, see Service accounts in  the Amazon Managed Grafana User Guide. For more information about the Grafana HTTP APIs, see Using Grafana HTTP  APIs in the Amazon Managed Grafana User Guide.
    @Sendable
    public func createWorkspaceServiceAccount(_ input: CreateWorkspaceServiceAccountRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> CreateWorkspaceServiceAccountResponse {
        return try await self.client.execute(
            operation: "CreateWorkspaceServiceAccount", 
            path: "/workspaces/{workspaceId}/serviceaccounts", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Creates a token that can be used to authenticate and authorize Grafana HTTP API operations for the given workspace service  account. The service account acts as a user for the API operations, and defines the permissions that are used by the API.  When you create the service account token, you will receive a key that is used when calling Grafana APIs. Do not lose this key, as it will not be retrievable again. If you do lose the key, you can delete the token and recreate it to receive a  new key. This will disable the initial key.  Service accounts are only available for workspaces that are compatible with Grafana version 9 and above.
    @Sendable
    public func createWorkspaceServiceAccountToken(_ input: CreateWorkspaceServiceAccountTokenRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> CreateWorkspaceServiceAccountTokenResponse {
        return try await self.client.execute(
            operation: "CreateWorkspaceServiceAccountToken", 
            path: "/workspaces/{workspaceId}/serviceaccounts/{serviceAccountId}/tokens", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Deletes an Amazon Managed Grafana workspace.
    @Sendable
    public func deleteWorkspace(_ input: DeleteWorkspaceRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DeleteWorkspaceResponse {
        return try await self.client.execute(
            operation: "DeleteWorkspace", 
            path: "/workspaces/{workspaceId}", 
            httpMethod: .DELETE, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Deletes a Grafana API key for the workspace.  In workspaces compatible with Grafana version 9 or above, use workspace service  accounts instead of API keys. API keys will be removed in a future release.
    @Sendable
    public func deleteWorkspaceApiKey(_ input: DeleteWorkspaceApiKeyRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DeleteWorkspaceApiKeyResponse {
        return try await self.client.execute(
            operation: "DeleteWorkspaceApiKey", 
            path: "/workspaces/{workspaceId}/apikeys/{keyName}", 
            httpMethod: .DELETE, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Deletes a workspace service account from the workspace. This will delete any tokens created for the service account, as well. If the tokens are currently in use, the will fail to authenticate / authorize after they are  deleted. Service accounts are only available for workspaces that are compatible with Grafana version 9 and above.
    @Sendable
    public func deleteWorkspaceServiceAccount(_ input: DeleteWorkspaceServiceAccountRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DeleteWorkspaceServiceAccountResponse {
        return try await self.client.execute(
            operation: "DeleteWorkspaceServiceAccount", 
            path: "/workspaces/{workspaceId}/serviceaccounts/{serviceAccountId}", 
            httpMethod: .DELETE, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Deletes a token for the workspace service account. This will disable the key associated with the token. If any automation is currently  using the key, it will no longer be authenticated or authorized to perform actions with  the Grafana HTTP APIs. Service accounts are only available for workspaces that are compatible with Grafana version 9 and above.
    @Sendable
    public func deleteWorkspaceServiceAccountToken(_ input: DeleteWorkspaceServiceAccountTokenRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DeleteWorkspaceServiceAccountTokenResponse {
        return try await self.client.execute(
            operation: "DeleteWorkspaceServiceAccountToken", 
            path: "/workspaces/{workspaceId}/serviceaccounts/{serviceAccountId}/tokens/{tokenId}", 
            httpMethod: .DELETE, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Displays information about one Amazon Managed Grafana workspace.
    @Sendable
    public func describeWorkspace(_ input: DescribeWorkspaceRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DescribeWorkspaceResponse {
        return try await self.client.execute(
            operation: "DescribeWorkspace", 
            path: "/workspaces/{workspaceId}", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Displays information about the authentication methods used in one Amazon Managed Grafana workspace.
    @Sendable
    public func describeWorkspaceAuthentication(_ input: DescribeWorkspaceAuthenticationRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DescribeWorkspaceAuthenticationResponse {
        return try await self.client.execute(
            operation: "DescribeWorkspaceAuthentication", 
            path: "/workspaces/{workspaceId}/authentication", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Gets the current configuration string for the given workspace.
    @Sendable
    public func describeWorkspaceConfiguration(_ input: DescribeWorkspaceConfigurationRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DescribeWorkspaceConfigurationResponse {
        return try await self.client.execute(
            operation: "DescribeWorkspaceConfiguration", 
            path: "/workspaces/{workspaceId}/configuration", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Removes the Grafana Enterprise license from a workspace.
    @Sendable
    public func disassociateLicense(_ input: DisassociateLicenseRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DisassociateLicenseResponse {
        return try await self.client.execute(
            operation: "DisassociateLicense", 
            path: "/workspaces/{workspaceId}/licenses/{licenseType}", 
            httpMethod: .DELETE, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Lists the users and groups who have the Grafana Admin and Editor roles in this workspace. If you use this operation without specifying userId or groupId, the operation returns the roles of all users and groups. If you specify a userId or a groupId, only the roles for that user or group are returned. If you do this, you can specify only one userId or one groupId.
    @Sendable
    public func listPermissions(_ input: ListPermissionsRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> ListPermissionsResponse {
        return try await self.client.execute(
            operation: "ListPermissions", 
            path: "/workspaces/{workspaceId}/permissions", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// The ListTagsForResource operation returns the tags that are associated with the Amazon Managed Service for Grafana resource specified by the resourceArn. Currently, the only resource that can be tagged is a workspace.
    @Sendable
    public func listTagsForResource(_ input: ListTagsForResourceRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> ListTagsForResourceResponse {
        return try await self.client.execute(
            operation: "ListTagsForResource", 
            path: "/tags/{resourceArn}", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Lists available versions of Grafana. These are available when calling  CreateWorkspace. Optionally, include a workspace to list the versions  to which it can be upgraded.
    @Sendable
    public func listVersions(_ input: ListVersionsRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> ListVersionsResponse {
        return try await self.client.execute(
            operation: "ListVersions", 
            path: "/versions", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Returns a list of tokens for a workspace service account.  This does not return the key for each token. You cannot access keys after they are created. To create a new key, delete the token and recreate it.  Service accounts are only available for workspaces that are compatible with Grafana version 9 and above.
    @Sendable
    public func listWorkspaceServiceAccountTokens(_ input: ListWorkspaceServiceAccountTokensRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> ListWorkspaceServiceAccountTokensResponse {
        return try await self.client.execute(
            operation: "ListWorkspaceServiceAccountTokens", 
            path: "/workspaces/{workspaceId}/serviceaccounts/{serviceAccountId}/tokens", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Returns a list of service accounts for a workspace. Service accounts are only available for workspaces that are compatible with Grafana version 9 and above.
    @Sendable
    public func listWorkspaceServiceAccounts(_ input: ListWorkspaceServiceAccountsRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> ListWorkspaceServiceAccountsResponse {
        return try await self.client.execute(
            operation: "ListWorkspaceServiceAccounts", 
            path: "/workspaces/{workspaceId}/serviceaccounts", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Returns a list of Amazon Managed Grafana workspaces in the account, with some information about each workspace. For more complete information about one workspace, use DescribeWorkspace.
    @Sendable
    public func listWorkspaces(_ input: ListWorkspacesRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> ListWorkspacesResponse {
        return try await self.client.execute(
            operation: "ListWorkspaces", 
            path: "/workspaces", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// The TagResource operation associates tags with an Amazon Managed Grafana resource. Currently, the only resource that can be tagged is workspaces.  If you specify a new tag key for the resource, this tag is appended to the list of tags associated with the resource. If you specify a tag key that is already associated with the resource, the new tag value that you specify replaces the previous value for that tag.
    @Sendable
    public func tagResource(_ input: TagResourceRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> TagResourceResponse {
        return try await self.client.execute(
            operation: "TagResource", 
            path: "/tags/{resourceArn}", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// The UntagResource operation removes the association of the tag with the Amazon Managed Grafana resource.
    @Sendable
    public func untagResource(_ input: UntagResourceRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> UntagResourceResponse {
        return try await self.client.execute(
            operation: "UntagResource", 
            path: "/tags/{resourceArn}", 
            httpMethod: .DELETE, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Updates which users in a workspace have the Grafana Admin or Editor roles.
    @Sendable
    public func updatePermissions(_ input: UpdatePermissionsRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> UpdatePermissionsResponse {
        return try await self.client.execute(
            operation: "UpdatePermissions", 
            path: "/workspaces/{workspaceId}/permissions", 
            httpMethod: .PATCH, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Modifies an existing Amazon Managed Grafana workspace. If you use this operation and omit any optional parameters, the existing values of those parameters are not changed. To modify the user authentication methods that the workspace uses, such as SAML or IAM Identity Center, use UpdateWorkspaceAuthentication. To modify which users in the workspace have the Admin and Editor Grafana roles, use UpdatePermissions.
    @Sendable
    public func updateWorkspace(_ input: UpdateWorkspaceRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> UpdateWorkspaceResponse {
        return try await self.client.execute(
            operation: "UpdateWorkspace", 
            path: "/workspaces/{workspaceId}", 
            httpMethod: .PUT, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Use this operation to define the identity provider (IdP) that this workspace authenticates users from, using SAML. You can also map SAML assertion attributes to workspace user information and define which groups in the assertion attribute are to have the Admin and Editor roles in the workspace.  Changes to the authentication method for a workspace may take a few minutes to take effect.
    @Sendable
    public func updateWorkspaceAuthentication(_ input: UpdateWorkspaceAuthenticationRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> UpdateWorkspaceAuthenticationResponse {
        return try await self.client.execute(
            operation: "UpdateWorkspaceAuthentication", 
            path: "/workspaces/{workspaceId}/authentication", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Updates the configuration string for the given workspace
    @Sendable
    public func updateWorkspaceConfiguration(_ input: UpdateWorkspaceConfigurationRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> UpdateWorkspaceConfigurationResponse {
        return try await self.client.execute(
            operation: "UpdateWorkspaceConfiguration", 
            path: "/workspaces/{workspaceId}/configuration", 
            httpMethod: .PUT, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
}

extension Grafana {
    /// Initializer required by `AWSService.with(middlewares:timeout:byteBufferAllocator:options)`. You are not able to use this initializer directly as there are not public
    /// initializers for `AWSServiceConfig.Patch`. Please use `AWSService.with(middlewares:timeout:byteBufferAllocator:options)` instead.
    public init(from: Grafana, patch: AWSServiceConfig.Patch) {
        self.client = from.client
        self.config = from.config.with(patch: patch)
    }
}

// MARK: Paginators

@available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
extension Grafana {
    /// Lists the users and groups who have the Grafana Admin and Editor roles in this workspace. If you use this operation without specifying userId or groupId, the operation returns the roles of all users and groups. If you specify a userId or a groupId, only the roles for that user or group are returned. If you do this, you can specify only one userId or one groupId.
    /// Return PaginatorSequence for operation.
    ///
    /// - Parameters:
    ///   - input: Input for request
    ///   - logger: Logger used flot logging
    public func listPermissionsPaginator(
        _ input: ListPermissionsRequest,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<ListPermissionsRequest, ListPermissionsResponse> {
        return .init(
            input: input,
            command: self.listPermissions,
            inputKey: \ListPermissionsRequest.nextToken,
            outputKey: \ListPermissionsResponse.nextToken,
            logger: logger
        )
    }

    /// Lists available versions of Grafana. These are available when calling  CreateWorkspace. Optionally, include a workspace to list the versions  to which it can be upgraded.
    /// Return PaginatorSequence for operation.
    ///
    /// - Parameters:
    ///   - input: Input for request
    ///   - logger: Logger used flot logging
    public func listVersionsPaginator(
        _ input: ListVersionsRequest,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<ListVersionsRequest, ListVersionsResponse> {
        return .init(
            input: input,
            command: self.listVersions,
            inputKey: \ListVersionsRequest.nextToken,
            outputKey: \ListVersionsResponse.nextToken,
            logger: logger
        )
    }

    /// Returns a list of tokens for a workspace service account.  This does not return the key for each token. You cannot access keys after they are created. To create a new key, delete the token and recreate it.  Service accounts are only available for workspaces that are compatible with Grafana version 9 and above.
    /// Return PaginatorSequence for operation.
    ///
    /// - Parameters:
    ///   - input: Input for request
    ///   - logger: Logger used flot logging
    public func listWorkspaceServiceAccountTokensPaginator(
        _ input: ListWorkspaceServiceAccountTokensRequest,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<ListWorkspaceServiceAccountTokensRequest, ListWorkspaceServiceAccountTokensResponse> {
        return .init(
            input: input,
            command: self.listWorkspaceServiceAccountTokens,
            inputKey: \ListWorkspaceServiceAccountTokensRequest.nextToken,
            outputKey: \ListWorkspaceServiceAccountTokensResponse.nextToken,
            logger: logger
        )
    }

    /// Returns a list of service accounts for a workspace. Service accounts are only available for workspaces that are compatible with Grafana version 9 and above.
    /// Return PaginatorSequence for operation.
    ///
    /// - Parameters:
    ///   - input: Input for request
    ///   - logger: Logger used flot logging
    public func listWorkspaceServiceAccountsPaginator(
        _ input: ListWorkspaceServiceAccountsRequest,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<ListWorkspaceServiceAccountsRequest, ListWorkspaceServiceAccountsResponse> {
        return .init(
            input: input,
            command: self.listWorkspaceServiceAccounts,
            inputKey: \ListWorkspaceServiceAccountsRequest.nextToken,
            outputKey: \ListWorkspaceServiceAccountsResponse.nextToken,
            logger: logger
        )
    }

    /// Returns a list of Amazon Managed Grafana workspaces in the account, with some information about each workspace. For more complete information about one workspace, use DescribeWorkspace.
    /// Return PaginatorSequence for operation.
    ///
    /// - Parameters:
    ///   - input: Input for request
    ///   - logger: Logger used flot logging
    public func listWorkspacesPaginator(
        _ input: ListWorkspacesRequest,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<ListWorkspacesRequest, ListWorkspacesResponse> {
        return .init(
            input: input,
            command: self.listWorkspaces,
            inputKey: \ListWorkspacesRequest.nextToken,
            outputKey: \ListWorkspacesResponse.nextToken,
            logger: logger
        )
    }
}

extension Grafana.ListPermissionsRequest: AWSPaginateToken {
    public func usingPaginationToken(_ token: String) -> Grafana.ListPermissionsRequest {
        return .init(
            groupId: self.groupId,
            maxResults: self.maxResults,
            nextToken: token,
            userId: self.userId,
            userType: self.userType,
            workspaceId: self.workspaceId
        )
    }
}

extension Grafana.ListVersionsRequest: AWSPaginateToken {
    public func usingPaginationToken(_ token: String) -> Grafana.ListVersionsRequest {
        return .init(
            maxResults: self.maxResults,
            nextToken: token,
            workspaceId: self.workspaceId
        )
    }
}

extension Grafana.ListWorkspaceServiceAccountTokensRequest: AWSPaginateToken {
    public func usingPaginationToken(_ token: String) -> Grafana.ListWorkspaceServiceAccountTokensRequest {
        return .init(
            maxResults: self.maxResults,
            nextToken: token,
            serviceAccountId: self.serviceAccountId,
            workspaceId: self.workspaceId
        )
    }
}

extension Grafana.ListWorkspaceServiceAccountsRequest: AWSPaginateToken {
    public func usingPaginationToken(_ token: String) -> Grafana.ListWorkspaceServiceAccountsRequest {
        return .init(
            maxResults: self.maxResults,
            nextToken: token,
            workspaceId: self.workspaceId
        )
    }
}

extension Grafana.ListWorkspacesRequest: AWSPaginateToken {
    public func usingPaginationToken(_ token: String) -> Grafana.ListWorkspacesRequest {
        return .init(
            maxResults: self.maxResults,
            nextToken: token
        )
    }
}
