//===----------------------------------------------------------------------===//
//
// This source file is part of the Soto for AWS open source project
//
// Copyright (c) 2017-2024 the Soto project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
// See CONTRIBUTORS.txt for the list of Soto project authors
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by https://github.com/soto-project/soto-codegenerator.
// DO NOT EDIT.

#if os(Linux) && compiler(<5.10)
// swift-corelibs-foundation hasn't been updated with Sendable conformances
@preconcurrency import Foundation
#else
import Foundation
#endif
@_exported import SotoCore

/// Service object for interacting with AWS Textract service.
///
/// Amazon Textract detects and analyzes text in documents and converts it into machine-readable text. This is the API reference documentation for Amazon Textract.
public struct Textract: AWSService {
    // MARK: Member variables

    /// Client used for communication with AWS
    public let client: AWSClient
    /// Service configuration
    public let config: AWSServiceConfig

    // MARK: Initialization

    /// Initialize the Textract client
    /// - parameters:
    ///     - client: AWSClient used to process requests
    ///     - region: Region of server you want to communicate with. This will override the partition parameter.
    ///     - partition: AWS partition where service resides, standard (.aws), china (.awscn), government (.awsusgov).
    ///     - endpoint: Custom endpoint URL to use instead of standard AWS servers
    ///     - middleware: Middleware chain used to edit requests before they are sent and responses before they are decoded 
    ///     - timeout: Timeout value for HTTP requests
    ///     - byteBufferAllocator: Allocator for ByteBuffers
    ///     - options: Service options
    public init(
        client: AWSClient,
        region: SotoCore.Region? = nil,
        partition: AWSPartition = .aws,
        endpoint: String? = nil,
        middleware: AWSMiddlewareProtocol? = nil,
        timeout: TimeAmount? = nil,
        byteBufferAllocator: ByteBufferAllocator = ByteBufferAllocator(),
        options: AWSServiceConfig.Options = []
    ) {
        self.client = client
        self.config = AWSServiceConfig(
            region: region,
            partition: region?.partition ?? partition,
            amzTarget: "Textract",
            serviceName: "Textract",
            serviceIdentifier: "textract",
            serviceProtocol: .json(version: "1.1"),
            apiVersion: "2018-06-27",
            endpoint: endpoint,
            variantEndpoints: Self.variantEndpoints,
            errorType: TextractErrorType.self,
            middleware: middleware,
            timeout: timeout,
            byteBufferAllocator: byteBufferAllocator,
            options: options
        )
    }




    /// FIPS and dualstack endpoints
    static var variantEndpoints: [EndpointVariantType: AWSServiceConfig.EndpointVariant] {[
        [.dualstack]: .init(endpoints: [
            "ap-northeast-2": "textract.ap-northeast-2.api.aws",
            "ap-south-1": "textract.ap-south-1.api.aws",
            "ap-southeast-1": "textract.ap-southeast-1.api.aws",
            "ap-southeast-2": "textract.ap-southeast-2.api.aws",
            "ca-central-1": "textract.ca-central-1.api.aws",
            "eu-central-1": "textract.eu-central-1.api.aws",
            "eu-south-2": "textract.eu-south-2.api.aws",
            "eu-west-1": "textract.eu-west-1.api.aws",
            "eu-west-2": "textract.eu-west-2.api.aws",
            "eu-west-3": "textract.eu-west-3.api.aws",
            "us-east-1": "textract.us-east-1.api.aws",
            "us-east-2": "textract.us-east-2.api.aws",
            "us-gov-east-1": "textract.us-gov-east-1.api.aws",
            "us-gov-west-1": "textract.us-gov-west-1.api.aws",
            "us-west-1": "textract.us-west-1.api.aws",
            "us-west-2": "textract.us-west-2.api.aws"
        ]),
        [.dualstack, .fips]: .init(endpoints: [
            "ca-central-1": "textract-fips.ca-central-1.api.aws",
            "us-east-1": "textract-fips.us-east-1.api.aws",
            "us-east-2": "textract-fips.us-east-2.api.aws",
            "us-gov-east-1": "textract-fips.us-gov-east-1.api.aws",
            "us-gov-west-1": "textract-fips.us-gov-west-1.api.aws",
            "us-west-1": "textract-fips.us-west-1.api.aws",
            "us-west-2": "textract-fips.us-west-2.api.aws"
        ]),
        [.fips]: .init(endpoints: [
            "ca-central-1": "textract-fips.ca-central-1.amazonaws.com",
            "us-east-1": "textract-fips.us-east-1.amazonaws.com",
            "us-east-2": "textract-fips.us-east-2.amazonaws.com",
            "us-gov-east-1": "textract-fips.us-gov-east-1.amazonaws.com",
            "us-gov-west-1": "textract-fips.us-gov-west-1.amazonaws.com",
            "us-west-1": "textract-fips.us-west-1.amazonaws.com",
            "us-west-2": "textract-fips.us-west-2.amazonaws.com"
        ])
    ]}

    // MARK: API Calls

    /// Analyzes an input document for relationships between detected items.  The types of information returned are as follows:    Form data (key-value pairs). The related information is returned in two Block objects, each of type KEY_VALUE_SET: a KEY Block object and a VALUE Block object. For example, Name: Ana Silva Carolina contains a key and value. Name: is the key. Ana Silva Carolina is the value.   Table and table cell data. A TABLE Block object contains information about a detected table. A CELL Block object is returned for each cell in a table.   Lines and words of text. A LINE Block object contains one or more WORD Block objects. All lines and words that are detected in the document are returned (including text that doesn't have a relationship with the value of FeatureTypes).    Signatures. A SIGNATURE Block object contains the location information of a signature in a document. If used in conjunction with forms or tables, a signature can be given a Key-Value pairing or be detected in the cell of a table.   Query. A QUERY Block object contains the query text, alias and link to the associated Query results block object.   Query Result. A QUERY_RESULT Block object contains the answer to the query and an ID that connects it to the query asked. This Block also contains a confidence score.   Selection elements such as check boxes and option buttons (radio buttons) can be detected in form data and in tables. A SELECTION_ELEMENT Block object contains information about a selection element, including the selection status. You can choose which type of analysis to perform by specifying the FeatureTypes list.  The output is returned in a list of Block objects.  AnalyzeDocument is a synchronous operation. To analyze documents asynchronously, use StartDocumentAnalysis. For more information, see Document Text Analysis.
    @Sendable
    @inlinable
    public func analyzeDocument(_ input: AnalyzeDocumentRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> AnalyzeDocumentResponse {
        try await self.client.execute(
            operation: "AnalyzeDocument", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Analyzes an input document for relationships between detected items.  The types of information returned are as follows:    Form data (key-value pairs). The related information is returned in two Block objects, each of type KEY_VALUE_SET: a KEY Block object and a VALUE Block object. For example, Name: Ana Silva Carolina contains a key and value. Name: is the key. Ana Silva Carolina is the value.   Table and table cell data. A TABLE Block object contains information about a detected table. A CELL Block object is returned for each cell in a table.   Lines and words of text. A LINE Block object contains one or more WORD Block objects. All lines and words that are detected in the document are returned (including text that doesn't have a relationship with the value of FeatureTypes).    Signatures. A SIGNATURE Block object contains the location information of a signature in a document. If used in conjunction with forms or tables, a signature can be given a Key-Value pairing or be detected in the cell of a table.   Query. A QUERY Block object contains the query text, alias and link to the associated Query results block object.   Query Result. A QUERY_RESULT Block object contains the answer to the query and an ID that connects it to the query asked. This Block also contains a confidence score.   Selection elements such as check boxes and option buttons (radio buttons) can be detected in form data and in tables. A SELECTION_ELEMENT Block object contains information about a selection element, including the selection status. You can choose which type of analysis to perform by specifying the FeatureTypes list.  The output is returned in a list of Block objects.  AnalyzeDocument is a synchronous operation. To analyze documents asynchronously, use StartDocumentAnalysis. For more information, see Document Text Analysis.
    ///
    /// Parameters:
    ///   - adaptersConfig: Specifies the adapter to be used when analyzing a document.
    ///   - document: The input document as base64-encoded bytes or an Amazon S3 object. If you use the AWS CLI to call Amazon Textract operations, you can't pass image bytes. The document must be an image in JPEG, PNG, PDF, or TIFF format. If you're using an AWS SDK to call Amazon Textract, you might not need to base64-encode image bytes that are passed using the Bytes field.
    ///   - featureTypes: A list of the types of analysis to perform. Add TABLES to the list to return information about the tables that are detected in the input document. Add FORMS to return detected form data. Add SIGNATURES to return the locations of detected signatures. Add LAYOUT to the list to return information about the layout of the document.  All lines and words detected in the document are included in the response (including text that isn't related to the value of FeatureTypes).
    ///   - humanLoopConfig: Sets the configuration for the human in the loop workflow for analyzing documents.
    ///   - queriesConfig: Contains Queries and the alias for those Queries, as determined by the input.
    ///   - logger: Logger use during operation
    @inlinable
    public func analyzeDocument(
        adaptersConfig: AdaptersConfig? = nil,
        document: Document,
        featureTypes: [FeatureType],
        humanLoopConfig: HumanLoopConfig? = nil,
        queriesConfig: QueriesConfig? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> AnalyzeDocumentResponse {
        let input = AnalyzeDocumentRequest(
            adaptersConfig: adaptersConfig, 
            document: document, 
            featureTypes: featureTypes, 
            humanLoopConfig: humanLoopConfig, 
            queriesConfig: queriesConfig
        )
        return try await self.analyzeDocument(input, logger: logger)
    }

    ///  AnalyzeExpense synchronously analyzes an input document for financially related relationships between text. Information is returned as ExpenseDocuments and seperated as follows:    LineItemGroups- A data set containing LineItems which store information about the lines of text, such as an item purchased and its price on a receipt.    SummaryFields- Contains all other information a receipt, such as header information or the vendors name.
    @Sendable
    @inlinable
    public func analyzeExpense(_ input: AnalyzeExpenseRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> AnalyzeExpenseResponse {
        try await self.client.execute(
            operation: "AnalyzeExpense", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    ///  AnalyzeExpense synchronously analyzes an input document for financially related relationships between text. Information is returned as ExpenseDocuments and seperated as follows:    LineItemGroups- A data set containing LineItems which store information about the lines of text, such as an item purchased and its price on a receipt.    SummaryFields- Contains all other information a receipt, such as header information or the vendors name.
    ///
    /// Parameters:
    ///   - document: 
    ///   - logger: Logger use during operation
    @inlinable
    public func analyzeExpense(
        document: Document,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> AnalyzeExpenseResponse {
        let input = AnalyzeExpenseRequest(
            document: document
        )
        return try await self.analyzeExpense(input, logger: logger)
    }

    /// Analyzes identity documents for relevant information. This information is extracted and returned as IdentityDocumentFields, which records both the normalized field and value of the extracted text. Unlike other Amazon Textract operations, AnalyzeID doesn't return any Geometry data.
    @Sendable
    @inlinable
    public func analyzeID(_ input: AnalyzeIDRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> AnalyzeIDResponse {
        try await self.client.execute(
            operation: "AnalyzeID", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Analyzes identity documents for relevant information. This information is extracted and returned as IdentityDocumentFields, which records both the normalized field and value of the extracted text. Unlike other Amazon Textract operations, AnalyzeID doesn't return any Geometry data.
    ///
    /// Parameters:
    ///   - documentPages: The document being passed to AnalyzeID.
    ///   - logger: Logger use during operation
    @inlinable
    public func analyzeID(
        documentPages: [Document],
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> AnalyzeIDResponse {
        let input = AnalyzeIDRequest(
            documentPages: documentPages
        )
        return try await self.analyzeID(input, logger: logger)
    }

    /// Creates an adapter, which can be fine-tuned for enhanced performance on user provided documents. Takes an AdapterName and FeatureType. Currently the only supported feature type is QUERIES. You can also provide a Description, Tags, and a ClientRequestToken. You can choose whether or not the adapter should be AutoUpdated with the AutoUpdate argument. By default, AutoUpdate is set to DISABLED.
    @Sendable
    @inlinable
    public func createAdapter(_ input: CreateAdapterRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> CreateAdapterResponse {
        try await self.client.execute(
            operation: "CreateAdapter", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Creates an adapter, which can be fine-tuned for enhanced performance on user provided documents. Takes an AdapterName and FeatureType. Currently the only supported feature type is QUERIES. You can also provide a Description, Tags, and a ClientRequestToken. You can choose whether or not the adapter should be AutoUpdated with the AutoUpdate argument. By default, AutoUpdate is set to DISABLED.
    ///
    /// Parameters:
    ///   - adapterName: The name to be assigned to the adapter being created.
    ///   - autoUpdate: Controls whether or not the adapter should automatically update.
    ///   - clientRequestToken: Idempotent token is used to recognize the request. If the same token is used with multiple  CreateAdapter requests, the same session is returned.  This token is employed to avoid unintentionally creating the same session multiple times.
    ///   - description: The description to be assigned to the adapter being created.
    ///   - featureTypes: The type of feature that the adapter is being trained on. Currrenly, supported feature types are: QUERIES
    ///   - tags: A list of tags to be added to the adapter.
    ///   - logger: Logger use during operation
    @inlinable
    public func createAdapter(
        adapterName: String,
        autoUpdate: AutoUpdate? = nil,
        clientRequestToken: String? = CreateAdapterRequest.idempotencyToken(),
        description: String? = nil,
        featureTypes: [FeatureType],
        tags: [String: String]? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> CreateAdapterResponse {
        let input = CreateAdapterRequest(
            adapterName: adapterName, 
            autoUpdate: autoUpdate, 
            clientRequestToken: clientRequestToken, 
            description: description, 
            featureTypes: featureTypes, 
            tags: tags
        )
        return try await self.createAdapter(input, logger: logger)
    }

    /// Creates  a new version of an adapter. Operates on a provided AdapterId and a specified  dataset provided via the DatasetConfig argument. Requires that you  specify an Amazon S3 bucket with the OutputConfig argument. You can provide an optional KMSKeyId,  an optional ClientRequestToken, and optional tags.
    @Sendable
    @inlinable
    public func createAdapterVersion(_ input: CreateAdapterVersionRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> CreateAdapterVersionResponse {
        try await self.client.execute(
            operation: "CreateAdapterVersion", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Creates  a new version of an adapter. Operates on a provided AdapterId and a specified  dataset provided via the DatasetConfig argument. Requires that you  specify an Amazon S3 bucket with the OutputConfig argument. You can provide an optional KMSKeyId,  an optional ClientRequestToken, and optional tags.
    ///
    /// Parameters:
    ///   - adapterId: A string containing a unique ID for the adapter that will receive a new version.
    ///   - clientRequestToken: Idempotent token is used to recognize the request. If the same token is used with multiple  CreateAdapterVersion requests, the same session is returned.  This token is employed to avoid unintentionally creating the same session multiple times.
    ///   - datasetConfig: Specifies a dataset used to train a new adapter version. Takes a ManifestS3Object as the value.
    ///   - kmsKeyId: The identifier for your AWS Key Management Service key (AWS KMS key). Used to encrypt your documents.
    ///   - outputConfig: 
    ///   - tags: A set of tags (key-value pairs) that you want to attach to the adapter version.
    ///   - logger: Logger use during operation
    @inlinable
    public func createAdapterVersion(
        adapterId: String,
        clientRequestToken: String? = CreateAdapterVersionRequest.idempotencyToken(),
        datasetConfig: AdapterVersionDatasetConfig,
        kmsKeyId: String? = nil,
        outputConfig: OutputConfig,
        tags: [String: String]? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> CreateAdapterVersionResponse {
        let input = CreateAdapterVersionRequest(
            adapterId: adapterId, 
            clientRequestToken: clientRequestToken, 
            datasetConfig: datasetConfig, 
            kmsKeyId: kmsKeyId, 
            outputConfig: outputConfig, 
            tags: tags
        )
        return try await self.createAdapterVersion(input, logger: logger)
    }

    /// Deletes an Amazon Textract adapter. Takes an AdapterId and deletes the adapter specified by the ID.
    @Sendable
    @inlinable
    public func deleteAdapter(_ input: DeleteAdapterRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DeleteAdapterResponse {
        try await self.client.execute(
            operation: "DeleteAdapter", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Deletes an Amazon Textract adapter. Takes an AdapterId and deletes the adapter specified by the ID.
    ///
    /// Parameters:
    ///   - adapterId: A string containing a unique ID for the adapter to be deleted.
    ///   - logger: Logger use during operation
    @inlinable
    public func deleteAdapter(
        adapterId: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> DeleteAdapterResponse {
        let input = DeleteAdapterRequest(
            adapterId: adapterId
        )
        return try await self.deleteAdapter(input, logger: logger)
    }

    /// Deletes an Amazon Textract adapter version. Requires that you specify both an AdapterId and a  AdapterVersion. Deletes the adapter version specified by the AdapterId and the AdapterVersion.
    @Sendable
    @inlinable
    public func deleteAdapterVersion(_ input: DeleteAdapterVersionRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DeleteAdapterVersionResponse {
        try await self.client.execute(
            operation: "DeleteAdapterVersion", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Deletes an Amazon Textract adapter version. Requires that you specify both an AdapterId and a  AdapterVersion. Deletes the adapter version specified by the AdapterId and the AdapterVersion.
    ///
    /// Parameters:
    ///   - adapterId: A string containing a unique ID for the adapter version that will be deleted.
    ///   - adapterVersion: Specifies the adapter version to be deleted.
    ///   - logger: Logger use during operation
    @inlinable
    public func deleteAdapterVersion(
        adapterId: String,
        adapterVersion: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> DeleteAdapterVersionResponse {
        let input = DeleteAdapterVersionRequest(
            adapterId: adapterId, 
            adapterVersion: adapterVersion
        )
        return try await self.deleteAdapterVersion(input, logger: logger)
    }

    /// Detects text in the input document. Amazon Textract can detect lines of text and the words that make up a line of text. The input document must be in one of the following image formats:  JPEG, PNG, PDF, or TIFF. DetectDocumentText returns the detected text in an array of Block objects.  Each document page has as an associated Block of type PAGE. Each PAGE Block object is the parent of LINE Block objects that represent the lines of detected text on a page. A LINE Block object is a parent for each word that makes up the line. Words are represented by Block objects of type WORD.  DetectDocumentText is a synchronous operation. To analyze documents  asynchronously, use StartDocumentTextDetection. For more information, see Document Text Detection.
    @Sendable
    @inlinable
    public func detectDocumentText(_ input: DetectDocumentTextRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DetectDocumentTextResponse {
        try await self.client.execute(
            operation: "DetectDocumentText", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Detects text in the input document. Amazon Textract can detect lines of text and the words that make up a line of text. The input document must be in one of the following image formats:  JPEG, PNG, PDF, or TIFF. DetectDocumentText returns the detected text in an array of Block objects.  Each document page has as an associated Block of type PAGE. Each PAGE Block object is the parent of LINE Block objects that represent the lines of detected text on a page. A LINE Block object is a parent for each word that makes up the line. Words are represented by Block objects of type WORD.  DetectDocumentText is a synchronous operation. To analyze documents  asynchronously, use StartDocumentTextDetection. For more information, see Document Text Detection.
    ///
    /// Parameters:
    ///   - document: The input document as base64-encoded bytes or an Amazon S3 object. If you use the AWS CLI to call Amazon Textract operations, you can't pass image bytes. The document must be an image  in JPEG or PNG format. If you're using an AWS SDK to call Amazon Textract, you might not need to base64-encode image bytes that are passed using the Bytes field.
    ///   - logger: Logger use during operation
    @inlinable
    public func detectDocumentText(
        document: Document,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> DetectDocumentTextResponse {
        let input = DetectDocumentTextRequest(
            document: document
        )
        return try await self.detectDocumentText(input, logger: logger)
    }

    /// Gets configuration information for an adapter specified by an AdapterId, returning information on AdapterName, Description, CreationTime, AutoUpdate status, and FeatureTypes.
    @Sendable
    @inlinable
    public func getAdapter(_ input: GetAdapterRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> GetAdapterResponse {
        try await self.client.execute(
            operation: "GetAdapter", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Gets configuration information for an adapter specified by an AdapterId, returning information on AdapterName, Description, CreationTime, AutoUpdate status, and FeatureTypes.
    ///
    /// Parameters:
    ///   - adapterId: A string containing a unique ID for the adapter.
    ///   - logger: Logger use during operation
    @inlinable
    public func getAdapter(
        adapterId: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> GetAdapterResponse {
        let input = GetAdapterRequest(
            adapterId: adapterId
        )
        return try await self.getAdapter(input, logger: logger)
    }

    /// Gets configuration information for the specified adapter version, including:  AdapterId, AdapterVersion, FeatureTypes, Status, StatusMessage, DatasetConfig,  KMSKeyId, OutputConfig, Tags and EvaluationMetrics.
    @Sendable
    @inlinable
    public func getAdapterVersion(_ input: GetAdapterVersionRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> GetAdapterVersionResponse {
        try await self.client.execute(
            operation: "GetAdapterVersion", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Gets configuration information for the specified adapter version, including:  AdapterId, AdapterVersion, FeatureTypes, Status, StatusMessage, DatasetConfig,  KMSKeyId, OutputConfig, Tags and EvaluationMetrics.
    ///
    /// Parameters:
    ///   - adapterId: A string specifying a unique ID for the adapter version you want to retrieve information for.
    ///   - adapterVersion: A string specifying the adapter version you want to retrieve information for.
    ///   - logger: Logger use during operation
    @inlinable
    public func getAdapterVersion(
        adapterId: String,
        adapterVersion: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> GetAdapterVersionResponse {
        let input = GetAdapterVersionRequest(
            adapterId: adapterId, 
            adapterVersion: adapterVersion
        )
        return try await self.getAdapterVersion(input, logger: logger)
    }

    /// Gets the results for an Amazon Textract asynchronous operation that analyzes text in a document. You start asynchronous text analysis by calling StartDocumentAnalysis, which returns a job identifier (JobId). When the text analysis operation finishes, Amazon Textract publishes a completion status to the Amazon Simple Notification Service (Amazon SNS) topic that's registered in the initial call to StartDocumentAnalysis. To get the results of the text-detection operation, first check that the status value published to the Amazon SNS topic is SUCCEEDED. If so, call GetDocumentAnalysis, and pass the job identifier (JobId) from the initial call to StartDocumentAnalysis.  GetDocumentAnalysis returns an array of Block objects. The following types of information are returned:    Form data (key-value pairs). The related information is returned in two Block objects, each of type KEY_VALUE_SET: a KEY Block object and a VALUE Block object. For example, Name: Ana Silva Carolina contains a key and value. Name: is the key. Ana Silva Carolina is the value.   Table and table cell data. A TABLE Block object contains information about a detected table. A CELL Block object is returned for each cell in a table.   Lines and words of text. A LINE Block object contains one or more WORD Block objects. All lines and words that are detected in the document are returned (including text that doesn't have a relationship with the value of the StartDocumentAnalysis FeatureTypes input parameter).    Query. A QUERY Block object contains the query text, alias and link to the associated Query results block object.   Query Results. A QUERY_RESULT Block object contains the answer to the query and an ID that connects it to the query asked. This Block also contains a confidence score.    While processing a document with queries, look out for INVALID_REQUEST_PARAMETERS output. This indicates that either the per page query limit has been exceeded or that the operation is trying to query a page in the document which doesn’t exist.   Selection elements such as check boxes and option buttons (radio buttons) can be detected in form data and in tables. A SELECTION_ELEMENT Block object contains information about a selection element, including the selection status. Use the MaxResults parameter to limit the number of blocks that are returned. If there are more results than specified in MaxResults, the value of NextToken in the operation response contains a pagination token for getting the next set of results. To get the next page of results, call GetDocumentAnalysis, and populate the NextToken request parameter with the token value that's returned from the previous call to GetDocumentAnalysis. For more information, see Document Text Analysis.
    @Sendable
    @inlinable
    public func getDocumentAnalysis(_ input: GetDocumentAnalysisRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> GetDocumentAnalysisResponse {
        try await self.client.execute(
            operation: "GetDocumentAnalysis", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Gets the results for an Amazon Textract asynchronous operation that analyzes text in a document. You start asynchronous text analysis by calling StartDocumentAnalysis, which returns a job identifier (JobId). When the text analysis operation finishes, Amazon Textract publishes a completion status to the Amazon Simple Notification Service (Amazon SNS) topic that's registered in the initial call to StartDocumentAnalysis. To get the results of the text-detection operation, first check that the status value published to the Amazon SNS topic is SUCCEEDED. If so, call GetDocumentAnalysis, and pass the job identifier (JobId) from the initial call to StartDocumentAnalysis.  GetDocumentAnalysis returns an array of Block objects. The following types of information are returned:    Form data (key-value pairs). The related information is returned in two Block objects, each of type KEY_VALUE_SET: a KEY Block object and a VALUE Block object. For example, Name: Ana Silva Carolina contains a key and value. Name: is the key. Ana Silva Carolina is the value.   Table and table cell data. A TABLE Block object contains information about a detected table. A CELL Block object is returned for each cell in a table.   Lines and words of text. A LINE Block object contains one or more WORD Block objects. All lines and words that are detected in the document are returned (including text that doesn't have a relationship with the value of the StartDocumentAnalysis FeatureTypes input parameter).    Query. A QUERY Block object contains the query text, alias and link to the associated Query results block object.   Query Results. A QUERY_RESULT Block object contains the answer to the query and an ID that connects it to the query asked. This Block also contains a confidence score.    While processing a document with queries, look out for INVALID_REQUEST_PARAMETERS output. This indicates that either the per page query limit has been exceeded or that the operation is trying to query a page in the document which doesn’t exist.   Selection elements such as check boxes and option buttons (radio buttons) can be detected in form data and in tables. A SELECTION_ELEMENT Block object contains information about a selection element, including the selection status. Use the MaxResults parameter to limit the number of blocks that are returned. If there are more results than specified in MaxResults, the value of NextToken in the operation response contains a pagination token for getting the next set of results. To get the next page of results, call GetDocumentAnalysis, and populate the NextToken request parameter with the token value that's returned from the previous call to GetDocumentAnalysis. For more information, see Document Text Analysis.
    ///
    /// Parameters:
    ///   - jobId: A unique identifier for the text-detection job. The JobId is returned from StartDocumentAnalysis. A JobId value is only valid for 7 days.
    ///   - maxResults: The maximum number of results to return per paginated call. The largest value that you can specify is 1,000. If you specify a value greater than 1,000, a maximum of 1,000 results is returned. The default value is 1,000.
    ///   - nextToken: If the previous response was incomplete (because there are more blocks to retrieve), Amazon Textract returns a pagination token in the response. You can use this pagination token to retrieve the next set of blocks.
    ///   - logger: Logger use during operation
    @inlinable
    public func getDocumentAnalysis(
        jobId: String,
        maxResults: Int? = nil,
        nextToken: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> GetDocumentAnalysisResponse {
        let input = GetDocumentAnalysisRequest(
            jobId: jobId, 
            maxResults: maxResults, 
            nextToken: nextToken
        )
        return try await self.getDocumentAnalysis(input, logger: logger)
    }

    /// Gets the results for an Amazon Textract asynchronous operation that detects text in a document.  Amazon Textract can detect lines of text and the words that make up a line of text. You start asynchronous text detection by calling StartDocumentTextDetection, which returns a job identifier (JobId). When the text detection operation finishes, Amazon Textract publishes a completion status to the Amazon Simple Notification Service (Amazon SNS) topic that's registered in the initial call to StartDocumentTextDetection. To get the results of the text-detection operation, first check that the status value published to the Amazon SNS topic is SUCCEEDED. If so, call GetDocumentTextDetection, and pass the job identifier (JobId) from the initial call to StartDocumentTextDetection.  GetDocumentTextDetection returns an array of Block objects.  Each document page has as an associated Block of type PAGE. Each PAGE Block object is the parent of LINE Block objects that represent the lines of detected text on a page. A LINE Block object is a parent for each word that makes up the line. Words are represented by Block objects of type WORD. Use the MaxResults parameter to limit the number of blocks that are returned. If there are more results than specified in MaxResults, the value of NextToken in the operation response contains a pagination token for getting the next set of results. To get the next page of results, call GetDocumentTextDetection, and populate the NextToken request parameter with the token value that's returned from the previous call to GetDocumentTextDetection. For more information, see Document Text Detection.
    @Sendable
    @inlinable
    public func getDocumentTextDetection(_ input: GetDocumentTextDetectionRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> GetDocumentTextDetectionResponse {
        try await self.client.execute(
            operation: "GetDocumentTextDetection", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Gets the results for an Amazon Textract asynchronous operation that detects text in a document.  Amazon Textract can detect lines of text and the words that make up a line of text. You start asynchronous text detection by calling StartDocumentTextDetection, which returns a job identifier (JobId). When the text detection operation finishes, Amazon Textract publishes a completion status to the Amazon Simple Notification Service (Amazon SNS) topic that's registered in the initial call to StartDocumentTextDetection. To get the results of the text-detection operation, first check that the status value published to the Amazon SNS topic is SUCCEEDED. If so, call GetDocumentTextDetection, and pass the job identifier (JobId) from the initial call to StartDocumentTextDetection.  GetDocumentTextDetection returns an array of Block objects.  Each document page has as an associated Block of type PAGE. Each PAGE Block object is the parent of LINE Block objects that represent the lines of detected text on a page. A LINE Block object is a parent for each word that makes up the line. Words are represented by Block objects of type WORD. Use the MaxResults parameter to limit the number of blocks that are returned. If there are more results than specified in MaxResults, the value of NextToken in the operation response contains a pagination token for getting the next set of results. To get the next page of results, call GetDocumentTextDetection, and populate the NextToken request parameter with the token value that's returned from the previous call to GetDocumentTextDetection. For more information, see Document Text Detection.
    ///
    /// Parameters:
    ///   - jobId: A unique identifier for the text detection job. The JobId is returned from StartDocumentTextDetection. A JobId value is only valid for 7 days.
    ///   - maxResults: The maximum number of results to return per paginated call. The largest value you can specify is 1,000. If you specify a value greater than 1,000, a maximum of 1,000 results is returned. The default value is 1,000.
    ///   - nextToken: If the previous response was incomplete (because there are more blocks to retrieve), Amazon Textract returns a pagination token in the response. You can use this pagination token to retrieve the next set of blocks.
    ///   - logger: Logger use during operation
    @inlinable
    public func getDocumentTextDetection(
        jobId: String,
        maxResults: Int? = nil,
        nextToken: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> GetDocumentTextDetectionResponse {
        let input = GetDocumentTextDetectionRequest(
            jobId: jobId, 
            maxResults: maxResults, 
            nextToken: nextToken
        )
        return try await self.getDocumentTextDetection(input, logger: logger)
    }

    /// Gets the results for an Amazon Textract asynchronous operation that analyzes invoices and receipts. Amazon Textract finds contact information, items purchased, and vendor name, from input invoices and receipts. You start asynchronous invoice/receipt analysis by calling StartExpenseAnalysis, which returns a job identifier (JobId). Upon completion of the invoice/receipt analysis, Amazon Textract publishes the completion status to the Amazon Simple Notification Service (Amazon SNS) topic. This topic must be registered in the initial call to StartExpenseAnalysis. To get the results of the invoice/receipt analysis operation, first ensure that the status value published to the Amazon SNS topic is SUCCEEDED. If so, call GetExpenseAnalysis, and pass the job identifier (JobId) from the initial call to StartExpenseAnalysis. Use the MaxResults parameter to limit the number of blocks that are returned. If there are more results than specified in MaxResults, the value of NextToken in the operation response contains a pagination token for getting the next set of results. To get the next page of results, call GetExpenseAnalysis, and populate the NextToken request parameter with the token value that's returned from the previous call to GetExpenseAnalysis. For more information, see Analyzing Invoices and Receipts.
    @Sendable
    @inlinable
    public func getExpenseAnalysis(_ input: GetExpenseAnalysisRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> GetExpenseAnalysisResponse {
        try await self.client.execute(
            operation: "GetExpenseAnalysis", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Gets the results for an Amazon Textract asynchronous operation that analyzes invoices and receipts. Amazon Textract finds contact information, items purchased, and vendor name, from input invoices and receipts. You start asynchronous invoice/receipt analysis by calling StartExpenseAnalysis, which returns a job identifier (JobId). Upon completion of the invoice/receipt analysis, Amazon Textract publishes the completion status to the Amazon Simple Notification Service (Amazon SNS) topic. This topic must be registered in the initial call to StartExpenseAnalysis. To get the results of the invoice/receipt analysis operation, first ensure that the status value published to the Amazon SNS topic is SUCCEEDED. If so, call GetExpenseAnalysis, and pass the job identifier (JobId) from the initial call to StartExpenseAnalysis. Use the MaxResults parameter to limit the number of blocks that are returned. If there are more results than specified in MaxResults, the value of NextToken in the operation response contains a pagination token for getting the next set of results. To get the next page of results, call GetExpenseAnalysis, and populate the NextToken request parameter with the token value that's returned from the previous call to GetExpenseAnalysis. For more information, see Analyzing Invoices and Receipts.
    ///
    /// Parameters:
    ///   - jobId: A unique identifier for the text detection job. The JobId is returned from StartExpenseAnalysis. A JobId value is only valid for 7 days.
    ///   - maxResults: The maximum number of results to return per paginated call. The largest value you can specify is 20. If you specify a value greater than 20, a maximum of 20 results is returned. The default value is 20.
    ///   - nextToken: If the previous response was incomplete (because there are more blocks to retrieve), Amazon Textract returns a pagination token in the response. You can use this pagination token to retrieve the next set of blocks.
    ///   - logger: Logger use during operation
    @inlinable
    public func getExpenseAnalysis(
        jobId: String,
        maxResults: Int? = nil,
        nextToken: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> GetExpenseAnalysisResponse {
        let input = GetExpenseAnalysisRequest(
            jobId: jobId, 
            maxResults: maxResults, 
            nextToken: nextToken
        )
        return try await self.getExpenseAnalysis(input, logger: logger)
    }

    /// Gets the results for an Amazon Textract asynchronous operation that analyzes text in a lending document.  You start asynchronous text analysis by calling StartLendingAnalysis, which returns a job identifier (JobId). When the text analysis operation finishes, Amazon Textract publishes a completion status to the Amazon Simple Notification Service (Amazon SNS) topic that's registered in the initial call to StartLendingAnalysis.  To get the results of the text analysis operation, first check that the status value published to the Amazon SNS topic is SUCCEEDED. If so, call GetLendingAnalysis, and pass the job identifier (JobId) from the initial call to StartLendingAnalysis.
    @Sendable
    @inlinable
    public func getLendingAnalysis(_ input: GetLendingAnalysisRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> GetLendingAnalysisResponse {
        try await self.client.execute(
            operation: "GetLendingAnalysis", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Gets the results for an Amazon Textract asynchronous operation that analyzes text in a lending document.  You start asynchronous text analysis by calling StartLendingAnalysis, which returns a job identifier (JobId). When the text analysis operation finishes, Amazon Textract publishes a completion status to the Amazon Simple Notification Service (Amazon SNS) topic that's registered in the initial call to StartLendingAnalysis.  To get the results of the text analysis operation, first check that the status value published to the Amazon SNS topic is SUCCEEDED. If so, call GetLendingAnalysis, and pass the job identifier (JobId) from the initial call to StartLendingAnalysis.
    ///
    /// Parameters:
    ///   - jobId: A unique identifier for the lending or text-detection job. The JobId is returned from StartLendingAnalysis. A JobId value is only valid for 7 days.
    ///   - maxResults: The maximum number of results to return per paginated call. The largest value that you can specify is 30. If you specify a value greater than 30, a maximum of 30 results is returned. The default value is 30.
    ///   - nextToken: If the previous response was incomplete, Amazon Textract returns a pagination token in the response. You can use this pagination token to retrieve the next set of lending results.
    ///   - logger: Logger use during operation
    @inlinable
    public func getLendingAnalysis(
        jobId: String,
        maxResults: Int? = nil,
        nextToken: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> GetLendingAnalysisResponse {
        let input = GetLendingAnalysisRequest(
            jobId: jobId, 
            maxResults: maxResults, 
            nextToken: nextToken
        )
        return try await self.getLendingAnalysis(input, logger: logger)
    }

    /// Gets summarized results for the StartLendingAnalysis operation, which analyzes text in a lending document. The returned summary consists of information about documents grouped together by a common document type. Information like detected signatures, page numbers, and split documents is returned with respect to the type of grouped document.  You start asynchronous text analysis by calling StartLendingAnalysis, which returns a job identifier (JobId). When the text analysis operation finishes, Amazon Textract publishes a completion status to the Amazon Simple Notification Service (Amazon SNS) topic that's registered in the initial call to StartLendingAnalysis.  To get the results of the text analysis operation, first check that the status value published to the Amazon SNS topic is SUCCEEDED. If so, call GetLendingAnalysisSummary, and pass the job identifier (JobId) from the initial call to StartLendingAnalysis.
    @Sendable
    @inlinable
    public func getLendingAnalysisSummary(_ input: GetLendingAnalysisSummaryRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> GetLendingAnalysisSummaryResponse {
        try await self.client.execute(
            operation: "GetLendingAnalysisSummary", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Gets summarized results for the StartLendingAnalysis operation, which analyzes text in a lending document. The returned summary consists of information about documents grouped together by a common document type. Information like detected signatures, page numbers, and split documents is returned with respect to the type of grouped document.  You start asynchronous text analysis by calling StartLendingAnalysis, which returns a job identifier (JobId). When the text analysis operation finishes, Amazon Textract publishes a completion status to the Amazon Simple Notification Service (Amazon SNS) topic that's registered in the initial call to StartLendingAnalysis.  To get the results of the text analysis operation, first check that the status value published to the Amazon SNS topic is SUCCEEDED. If so, call GetLendingAnalysisSummary, and pass the job identifier (JobId) from the initial call to StartLendingAnalysis.
    ///
    /// Parameters:
    ///   - jobId:  A unique identifier for the lending or text-detection job. The JobId is returned from StartLendingAnalysis. A JobId value is only valid for 7 days.
    ///   - logger: Logger use during operation
    @inlinable
    public func getLendingAnalysisSummary(
        jobId: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> GetLendingAnalysisSummaryResponse {
        let input = GetLendingAnalysisSummaryRequest(
            jobId: jobId
        )
        return try await self.getLendingAnalysisSummary(input, logger: logger)
    }

    /// List all version of an adapter that meet the specified filtration criteria.
    @Sendable
    @inlinable
    public func listAdapterVersions(_ input: ListAdapterVersionsRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> ListAdapterVersionsResponse {
        try await self.client.execute(
            operation: "ListAdapterVersions", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// List all version of an adapter that meet the specified filtration criteria.
    ///
    /// Parameters:
    ///   - adapterId: A string containing a unique ID for the adapter to match for when listing adapter versions.
    ///   - afterCreationTime: Specifies the lower bound for the ListAdapterVersions operation.  Ensures ListAdapterVersions returns only adapter versions created after the specified creation time.
    ///   - beforeCreationTime: Specifies the upper bound for the ListAdapterVersions operation.  Ensures ListAdapterVersions returns only adapter versions created after the specified creation time.
    ///   - maxResults: The maximum number of results to return when listing adapter versions.
    ///   - nextToken: Identifies the next page of results to return when listing adapter versions.
    ///   - logger: Logger use during operation
    @inlinable
    public func listAdapterVersions(
        adapterId: String? = nil,
        afterCreationTime: Date? = nil,
        beforeCreationTime: Date? = nil,
        maxResults: Int? = nil,
        nextToken: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> ListAdapterVersionsResponse {
        let input = ListAdapterVersionsRequest(
            adapterId: adapterId, 
            afterCreationTime: afterCreationTime, 
            beforeCreationTime: beforeCreationTime, 
            maxResults: maxResults, 
            nextToken: nextToken
        )
        return try await self.listAdapterVersions(input, logger: logger)
    }

    /// Lists all adapters that match the specified filtration criteria.
    @Sendable
    @inlinable
    public func listAdapters(_ input: ListAdaptersRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> ListAdaptersResponse {
        try await self.client.execute(
            operation: "ListAdapters", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Lists all adapters that match the specified filtration criteria.
    ///
    /// Parameters:
    ///   - afterCreationTime: Specifies the lower bound for the ListAdapters operation.  Ensures ListAdapters returns only adapters created after the specified creation time.
    ///   - beforeCreationTime: Specifies the upper bound for the ListAdapters operation.  Ensures ListAdapters returns only adapters created before the specified creation time.
    ///   - maxResults: The maximum number of results to return when listing adapters.
    ///   - nextToken: Identifies the next page of results to return when listing adapters.
    ///   - logger: Logger use during operation
    @inlinable
    public func listAdapters(
        afterCreationTime: Date? = nil,
        beforeCreationTime: Date? = nil,
        maxResults: Int? = nil,
        nextToken: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> ListAdaptersResponse {
        let input = ListAdaptersRequest(
            afterCreationTime: afterCreationTime, 
            beforeCreationTime: beforeCreationTime, 
            maxResults: maxResults, 
            nextToken: nextToken
        )
        return try await self.listAdapters(input, logger: logger)
    }

    /// Lists all tags for an Amazon Textract resource.
    @Sendable
    @inlinable
    public func listTagsForResource(_ input: ListTagsForResourceRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> ListTagsForResourceResponse {
        try await self.client.execute(
            operation: "ListTagsForResource", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Lists all tags for an Amazon Textract resource.
    ///
    /// Parameters:
    ///   - resourceARN: The Amazon Resource Name (ARN) that specifies the resource to list tags for.
    ///   - logger: Logger use during operation
    @inlinable
    public func listTagsForResource(
        resourceARN: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> ListTagsForResourceResponse {
        let input = ListTagsForResourceRequest(
            resourceARN: resourceARN
        )
        return try await self.listTagsForResource(input, logger: logger)
    }

    /// Starts the asynchronous analysis of an input document for relationships between detected items such as key-value pairs, tables, and selection elements.  StartDocumentAnalysis can analyze text in documents that are in JPEG, PNG, TIFF, and PDF format. The documents are stored in an Amazon S3 bucket. Use DocumentLocation to specify the bucket name and file name of the document.   StartDocumentAnalysis returns a job identifier (JobId) that you use to get the results of the operation. When text analysis is finished, Amazon Textract publishes a completion status to the Amazon Simple Notification Service (Amazon SNS) topic that you specify in NotificationChannel. To get the results of the text analysis operation, first check that the status value published to the Amazon SNS topic is SUCCEEDED. If so, call GetDocumentAnalysis, and pass the job identifier (JobId) from the initial call to StartDocumentAnalysis. For more information, see Document Text Analysis.
    @Sendable
    @inlinable
    public func startDocumentAnalysis(_ input: StartDocumentAnalysisRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> StartDocumentAnalysisResponse {
        try await self.client.execute(
            operation: "StartDocumentAnalysis", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Starts the asynchronous analysis of an input document for relationships between detected items such as key-value pairs, tables, and selection elements.  StartDocumentAnalysis can analyze text in documents that are in JPEG, PNG, TIFF, and PDF format. The documents are stored in an Amazon S3 bucket. Use DocumentLocation to specify the bucket name and file name of the document.   StartDocumentAnalysis returns a job identifier (JobId) that you use to get the results of the operation. When text analysis is finished, Amazon Textract publishes a completion status to the Amazon Simple Notification Service (Amazon SNS) topic that you specify in NotificationChannel. To get the results of the text analysis operation, first check that the status value published to the Amazon SNS topic is SUCCEEDED. If so, call GetDocumentAnalysis, and pass the job identifier (JobId) from the initial call to StartDocumentAnalysis. For more information, see Document Text Analysis.
    ///
    /// Parameters:
    ///   - adaptersConfig: Specifies the adapter to be used when analyzing a document.
    ///   - clientRequestToken: The idempotent token that you use to identify the start request. If you use the same token with multiple StartDocumentAnalysis requests, the same JobId is returned. Use ClientRequestToken to prevent the same job from being accidentally started more than once. For more information, see Calling Amazon Textract Asynchronous Operations.
    ///   - documentLocation: The location of the document to be processed.
    ///   - featureTypes: A list of the types of analysis to perform. Add TABLES to the list to return information about the tables that are detected in the input document. Add FORMS to return detected form data. To perform both types of analysis, add TABLES and FORMS to FeatureTypes. All lines and words detected in the document are included in the response (including text that isn't related to the value of FeatureTypes).
    ///   - jobTag: An identifier that you specify that's included in the completion notification published to the Amazon SNS topic. For example, you can use JobTag to identify the type of document that the completion notification corresponds to (such as a tax form or a receipt).
    ///   - kmsKeyId: The KMS key used to encrypt the inference results. This can be  in either Key ID or Key Alias format. When a KMS key is provided, the  KMS key will be used for server-side encryption of the objects in the  customer bucket. When this parameter is not enabled, the result will  be encrypted server side,using SSE-S3.
    ///   - notificationChannel: The Amazon SNS topic ARN that you want Amazon Textract to publish the completion status of the operation to.
    ///   - outputConfig: Sets if the output will go to a customer defined bucket. By default, Amazon Textract will save the results internally to be accessed by the GetDocumentAnalysis operation.
    ///   - queriesConfig: 
    ///   - logger: Logger use during operation
    @inlinable
    public func startDocumentAnalysis(
        adaptersConfig: AdaptersConfig? = nil,
        clientRequestToken: String? = nil,
        documentLocation: DocumentLocation,
        featureTypes: [FeatureType],
        jobTag: String? = nil,
        kmsKeyId: String? = nil,
        notificationChannel: NotificationChannel? = nil,
        outputConfig: OutputConfig? = nil,
        queriesConfig: QueriesConfig? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> StartDocumentAnalysisResponse {
        let input = StartDocumentAnalysisRequest(
            adaptersConfig: adaptersConfig, 
            clientRequestToken: clientRequestToken, 
            documentLocation: documentLocation, 
            featureTypes: featureTypes, 
            jobTag: jobTag, 
            kmsKeyId: kmsKeyId, 
            notificationChannel: notificationChannel, 
            outputConfig: outputConfig, 
            queriesConfig: queriesConfig
        )
        return try await self.startDocumentAnalysis(input, logger: logger)
    }

    /// Starts the asynchronous detection of text in a document. Amazon Textract can detect lines of text and the words that make up a line of text.  StartDocumentTextDetection can analyze text in documents that are in JPEG, PNG, TIFF, and PDF format. The documents are stored in an Amazon S3 bucket. Use DocumentLocation to specify the bucket name and file name of the document.   StartTextDetection returns a job identifier (JobId) that you use to get the results of the operation. When text detection is finished, Amazon Textract publishes a completion status to the Amazon Simple Notification Service (Amazon SNS) topic that you specify in NotificationChannel. To get the results of the text detection operation, first check that the status value published to the Amazon SNS topic is SUCCEEDED. If so, call GetDocumentTextDetection, and pass the job identifier (JobId) from the initial call to StartDocumentTextDetection. For more information, see Document Text Detection.
    @Sendable
    @inlinable
    public func startDocumentTextDetection(_ input: StartDocumentTextDetectionRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> StartDocumentTextDetectionResponse {
        try await self.client.execute(
            operation: "StartDocumentTextDetection", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Starts the asynchronous detection of text in a document. Amazon Textract can detect lines of text and the words that make up a line of text.  StartDocumentTextDetection can analyze text in documents that are in JPEG, PNG, TIFF, and PDF format. The documents are stored in an Amazon S3 bucket. Use DocumentLocation to specify the bucket name and file name of the document.   StartTextDetection returns a job identifier (JobId) that you use to get the results of the operation. When text detection is finished, Amazon Textract publishes a completion status to the Amazon Simple Notification Service (Amazon SNS) topic that you specify in NotificationChannel. To get the results of the text detection operation, first check that the status value published to the Amazon SNS topic is SUCCEEDED. If so, call GetDocumentTextDetection, and pass the job identifier (JobId) from the initial call to StartDocumentTextDetection. For more information, see Document Text Detection.
    ///
    /// Parameters:
    ///   - clientRequestToken: The idempotent token that's used to identify the start request. If you use the same token with multiple StartDocumentTextDetection requests, the same JobId is returned. Use ClientRequestToken to prevent the same job from being accidentally started more than once. For more information, see Calling Amazon Textract Asynchronous Operations.
    ///   - documentLocation: The location of the document to be processed.
    ///   - jobTag: An identifier that you specify that's included in the completion notification published to the Amazon SNS topic. For example, you can use JobTag to identify the type of document that the completion notification corresponds to (such as a tax form or a receipt).
    ///   - kmsKeyId: The KMS key used to encrypt the inference results. This can be  in either Key ID or Key Alias format. When a KMS key is provided, the  KMS key will be used for server-side encryption of the objects in the  customer bucket. When this parameter is not enabled, the result will  be encrypted server side,using SSE-S3.
    ///   - notificationChannel: The Amazon SNS topic ARN that you want Amazon Textract to publish the completion status of the operation to.
    ///   - outputConfig: Sets if the output will go to a customer defined bucket. By default Amazon Textract will save the results internally to be accessed with the GetDocumentTextDetection operation.
    ///   - logger: Logger use during operation
    @inlinable
    public func startDocumentTextDetection(
        clientRequestToken: String? = nil,
        documentLocation: DocumentLocation,
        jobTag: String? = nil,
        kmsKeyId: String? = nil,
        notificationChannel: NotificationChannel? = nil,
        outputConfig: OutputConfig? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> StartDocumentTextDetectionResponse {
        let input = StartDocumentTextDetectionRequest(
            clientRequestToken: clientRequestToken, 
            documentLocation: documentLocation, 
            jobTag: jobTag, 
            kmsKeyId: kmsKeyId, 
            notificationChannel: notificationChannel, 
            outputConfig: outputConfig
        )
        return try await self.startDocumentTextDetection(input, logger: logger)
    }

    /// Starts the asynchronous analysis of invoices or receipts for data like contact information, items purchased, and vendor names.  StartExpenseAnalysis can analyze text in documents that are in JPEG, PNG, and PDF format. The documents must be stored in an Amazon S3 bucket. Use the DocumentLocation parameter to specify the name of your S3 bucket and the name of the document in that bucket.   StartExpenseAnalysis returns a job identifier (JobId) that you will provide to GetExpenseAnalysis to retrieve the results of the operation. When the analysis of the input invoices/receipts is finished, Amazon Textract publishes a completion status to the Amazon Simple Notification Service (Amazon SNS) topic that you provide to the NotificationChannel. To obtain the results of the invoice and receipt analysis operation, ensure that the status value published to the Amazon SNS topic is SUCCEEDED. If so, call GetExpenseAnalysis, and pass the job identifier (JobId) that was returned by your call to StartExpenseAnalysis. For more information, see Analyzing Invoices and Receipts.
    @Sendable
    @inlinable
    public func startExpenseAnalysis(_ input: StartExpenseAnalysisRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> StartExpenseAnalysisResponse {
        try await self.client.execute(
            operation: "StartExpenseAnalysis", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Starts the asynchronous analysis of invoices or receipts for data like contact information, items purchased, and vendor names.  StartExpenseAnalysis can analyze text in documents that are in JPEG, PNG, and PDF format. The documents must be stored in an Amazon S3 bucket. Use the DocumentLocation parameter to specify the name of your S3 bucket and the name of the document in that bucket.   StartExpenseAnalysis returns a job identifier (JobId) that you will provide to GetExpenseAnalysis to retrieve the results of the operation. When the analysis of the input invoices/receipts is finished, Amazon Textract publishes a completion status to the Amazon Simple Notification Service (Amazon SNS) topic that you provide to the NotificationChannel. To obtain the results of the invoice and receipt analysis operation, ensure that the status value published to the Amazon SNS topic is SUCCEEDED. If so, call GetExpenseAnalysis, and pass the job identifier (JobId) that was returned by your call to StartExpenseAnalysis. For more information, see Analyzing Invoices and Receipts.
    ///
    /// Parameters:
    ///   - clientRequestToken: The idempotent token that's used to identify the start request. If you use the same token with multiple StartDocumentTextDetection requests, the same JobId is returned.  Use ClientRequestToken to prevent the same job from being accidentally started more than once.  For more information, see Calling Amazon Textract Asynchronous Operations
    ///   - documentLocation: The location of the document to be processed.
    ///   - jobTag: An identifier you specify that's included in the completion notification published to the Amazon SNS topic. For example, you can use JobTag to identify the type of document that the completion notification corresponds to (such as a tax form or a receipt).
    ///   - kmsKeyId: The KMS key used to encrypt the inference results. This can be  in either Key ID or Key Alias format. When a KMS key is provided, the  KMS key will be used for server-side encryption of the objects in the  customer bucket. When this parameter is not enabled, the result will  be encrypted server side,using SSE-S3.
    ///   - notificationChannel: The Amazon SNS topic ARN that you want Amazon Textract to publish the completion status of the operation to.
    ///   - outputConfig: Sets if the output will go to a customer defined bucket. By default, Amazon Textract will save the results internally to be accessed by the GetExpenseAnalysis operation.
    ///   - logger: Logger use during operation
    @inlinable
    public func startExpenseAnalysis(
        clientRequestToken: String? = nil,
        documentLocation: DocumentLocation,
        jobTag: String? = nil,
        kmsKeyId: String? = nil,
        notificationChannel: NotificationChannel? = nil,
        outputConfig: OutputConfig? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> StartExpenseAnalysisResponse {
        let input = StartExpenseAnalysisRequest(
            clientRequestToken: clientRequestToken, 
            documentLocation: documentLocation, 
            jobTag: jobTag, 
            kmsKeyId: kmsKeyId, 
            notificationChannel: notificationChannel, 
            outputConfig: outputConfig
        )
        return try await self.startExpenseAnalysis(input, logger: logger)
    }

    /// Starts the classification and analysis of an input document. StartLendingAnalysis initiates the classification and analysis of a packet of lending documents. StartLendingAnalysis operates on a document file located in an Amazon S3 bucket.  StartLendingAnalysis can analyze text in documents that are in one of the following formats: JPEG, PNG, TIFF, PDF. Use DocumentLocation to specify the bucket name and the file name of the document.   StartLendingAnalysis returns a job identifier (JobId) that you use to get the results of the operation. When the text analysis is finished, Amazon Textract publishes a completion status to the Amazon Simple Notification Service (Amazon SNS) topic that you specify in NotificationChannel. To get the results of the text analysis operation, first check that the status value published to the Amazon SNS topic is SUCCEEDED. If the status is SUCCEEDED you can call either GetLendingAnalysis or GetLendingAnalysisSummary and provide the JobId to obtain the results of the analysis. If using OutputConfig to specify an Amazon S3 bucket, the output will be contained within the specified prefix in a directory labeled with the job-id. In the directory there are 3 sub-directories:    detailedResponse (contains the GetLendingAnalysis response)   summaryResponse (for the GetLendingAnalysisSummary response)   splitDocuments (documents split across logical boundaries)
    @Sendable
    @inlinable
    public func startLendingAnalysis(_ input: StartLendingAnalysisRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> StartLendingAnalysisResponse {
        try await self.client.execute(
            operation: "StartLendingAnalysis", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Starts the classification and analysis of an input document. StartLendingAnalysis initiates the classification and analysis of a packet of lending documents. StartLendingAnalysis operates on a document file located in an Amazon S3 bucket.  StartLendingAnalysis can analyze text in documents that are in one of the following formats: JPEG, PNG, TIFF, PDF. Use DocumentLocation to specify the bucket name and the file name of the document.   StartLendingAnalysis returns a job identifier (JobId) that you use to get the results of the operation. When the text analysis is finished, Amazon Textract publishes a completion status to the Amazon Simple Notification Service (Amazon SNS) topic that you specify in NotificationChannel. To get the results of the text analysis operation, first check that the status value published to the Amazon SNS topic is SUCCEEDED. If the status is SUCCEEDED you can call either GetLendingAnalysis or GetLendingAnalysisSummary and provide the JobId to obtain the results of the analysis. If using OutputConfig to specify an Amazon S3 bucket, the output will be contained within the specified prefix in a directory labeled with the job-id. In the directory there are 3 sub-directories:    detailedResponse (contains the GetLendingAnalysis response)   summaryResponse (for the GetLendingAnalysisSummary response)   splitDocuments (documents split across logical boundaries)
    ///
    /// Parameters:
    ///   - clientRequestToken: The idempotent token that you use to identify the start request. If you use the same token with multiple StartLendingAnalysis requests, the same JobId is returned. Use ClientRequestToken to prevent the same job from being accidentally started more than once. For more information, see Calling Amazon Textract Asynchronous Operations.
    ///   - documentLocation: 
    ///   - jobTag: An identifier that you specify to be included in the completion notification published to the Amazon SNS topic. For example, you can use JobTag to identify the type of document that the completion notification corresponds to (such as a tax form or a receipt).
    ///   - kmsKeyId: The KMS key used to encrypt the inference results. This can be in either Key ID or Key Alias format. When a KMS key is provided, the KMS key will be used for server-side encryption of the objects in the customer bucket. When this parameter is not enabled, the result will be encrypted server side, using SSE-S3.
    ///   - notificationChannel: 
    ///   - outputConfig: 
    ///   - logger: Logger use during operation
    @inlinable
    public func startLendingAnalysis(
        clientRequestToken: String? = nil,
        documentLocation: DocumentLocation,
        jobTag: String? = nil,
        kmsKeyId: String? = nil,
        notificationChannel: NotificationChannel? = nil,
        outputConfig: OutputConfig? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> StartLendingAnalysisResponse {
        let input = StartLendingAnalysisRequest(
            clientRequestToken: clientRequestToken, 
            documentLocation: documentLocation, 
            jobTag: jobTag, 
            kmsKeyId: kmsKeyId, 
            notificationChannel: notificationChannel, 
            outputConfig: outputConfig
        )
        return try await self.startLendingAnalysis(input, logger: logger)
    }

    /// Adds one or more tags to the specified resource.
    @Sendable
    @inlinable
    public func tagResource(_ input: TagResourceRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> TagResourceResponse {
        try await self.client.execute(
            operation: "TagResource", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Adds one or more tags to the specified resource.
    ///
    /// Parameters:
    ///   - resourceARN: The Amazon Resource Name (ARN) that specifies the resource to be tagged.
    ///   - tags: A set of tags (key-value pairs) that you want to assign to the resource.
    ///   - logger: Logger use during operation
    @inlinable
    public func tagResource(
        resourceARN: String,
        tags: [String: String],
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> TagResourceResponse {
        let input = TagResourceRequest(
            resourceARN: resourceARN, 
            tags: tags
        )
        return try await self.tagResource(input, logger: logger)
    }

    /// Removes any tags with the specified keys from the specified resource.
    @Sendable
    @inlinable
    public func untagResource(_ input: UntagResourceRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> UntagResourceResponse {
        try await self.client.execute(
            operation: "UntagResource", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Removes any tags with the specified keys from the specified resource.
    ///
    /// Parameters:
    ///   - resourceARN: The Amazon Resource Name (ARN) that specifies the resource to be untagged.
    ///   - tagKeys: Specifies the tags to be removed from the resource specified by the ResourceARN.
    ///   - logger: Logger use during operation
    @inlinable
    public func untagResource(
        resourceARN: String,
        tagKeys: [String],
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> UntagResourceResponse {
        let input = UntagResourceRequest(
            resourceARN: resourceARN, 
            tagKeys: tagKeys
        )
        return try await self.untagResource(input, logger: logger)
    }

    /// Update the configuration for an adapter. FeatureTypes configurations cannot be updated. At least one new parameter must be specified as an argument.
    @Sendable
    @inlinable
    public func updateAdapter(_ input: UpdateAdapterRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> UpdateAdapterResponse {
        try await self.client.execute(
            operation: "UpdateAdapter", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Update the configuration for an adapter. FeatureTypes configurations cannot be updated. At least one new parameter must be specified as an argument.
    ///
    /// Parameters:
    ///   - adapterId: A string containing a unique ID for the adapter that will be updated.
    ///   - adapterName: The new name to be applied to the adapter.
    ///   - autoUpdate: The new auto-update status to be applied to the adapter.
    ///   - description: The new description to be applied to the adapter.
    ///   - logger: Logger use during operation
    @inlinable
    public func updateAdapter(
        adapterId: String,
        adapterName: String? = nil,
        autoUpdate: AutoUpdate? = nil,
        description: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> UpdateAdapterResponse {
        let input = UpdateAdapterRequest(
            adapterId: adapterId, 
            adapterName: adapterName, 
            autoUpdate: autoUpdate, 
            description: description
        )
        return try await self.updateAdapter(input, logger: logger)
    }
}

extension Textract {
    /// Initializer required by `AWSService.with(middlewares:timeout:byteBufferAllocator:options)`. You are not able to use this initializer directly as there are not public
    /// initializers for `AWSServiceConfig.Patch`. Please use `AWSService.with(middlewares:timeout:byteBufferAllocator:options)` instead.
    public init(from: Textract, patch: AWSServiceConfig.Patch) {
        self.client = from.client
        self.config = from.config.with(patch: patch)
    }
}

// MARK: Paginators

@available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
extension Textract {
    /// Return PaginatorSequence for operation ``listAdapterVersions(_:logger:)``.
    ///
    /// - Parameters:
    ///   - input: Input for operation
    ///   - logger: Logger used for logging
    @inlinable
    public func listAdapterVersionsPaginator(
        _ input: ListAdapterVersionsRequest,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<ListAdapterVersionsRequest, ListAdapterVersionsResponse> {
        return .init(
            input: input,
            command: self.listAdapterVersions,
            inputKey: \ListAdapterVersionsRequest.nextToken,
            outputKey: \ListAdapterVersionsResponse.nextToken,
            logger: logger
        )
    }
    /// Return PaginatorSequence for operation ``listAdapterVersions(_:logger:)``.
    ///
    /// - Parameters:
    ///   - adapterId: A string containing a unique ID for the adapter to match for when listing adapter versions.
    ///   - afterCreationTime: Specifies the lower bound for the ListAdapterVersions operation.  Ensures ListAdapterVersions returns only adapter versions created after the specified creation time.
    ///   - beforeCreationTime: Specifies the upper bound for the ListAdapterVersions operation.  Ensures ListAdapterVersions returns only adapter versions created after the specified creation time.
    ///   - maxResults: The maximum number of results to return when listing adapter versions.
    ///   - logger: Logger used for logging
    @inlinable
    public func listAdapterVersionsPaginator(
        adapterId: String? = nil,
        afterCreationTime: Date? = nil,
        beforeCreationTime: Date? = nil,
        maxResults: Int? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) -> AWSClient.PaginatorSequence<ListAdapterVersionsRequest, ListAdapterVersionsResponse> {
        let input = ListAdapterVersionsRequest(
            adapterId: adapterId, 
            afterCreationTime: afterCreationTime, 
            beforeCreationTime: beforeCreationTime, 
            maxResults: maxResults
        )
        return self.listAdapterVersionsPaginator(input, logger: logger)
    }

    /// Return PaginatorSequence for operation ``listAdapters(_:logger:)``.
    ///
    /// - Parameters:
    ///   - input: Input for operation
    ///   - logger: Logger used for logging
    @inlinable
    public func listAdaptersPaginator(
        _ input: ListAdaptersRequest,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<ListAdaptersRequest, ListAdaptersResponse> {
        return .init(
            input: input,
            command: self.listAdapters,
            inputKey: \ListAdaptersRequest.nextToken,
            outputKey: \ListAdaptersResponse.nextToken,
            logger: logger
        )
    }
    /// Return PaginatorSequence for operation ``listAdapters(_:logger:)``.
    ///
    /// - Parameters:
    ///   - afterCreationTime: Specifies the lower bound for the ListAdapters operation.  Ensures ListAdapters returns only adapters created after the specified creation time.
    ///   - beforeCreationTime: Specifies the upper bound for the ListAdapters operation.  Ensures ListAdapters returns only adapters created before the specified creation time.
    ///   - maxResults: The maximum number of results to return when listing adapters.
    ///   - logger: Logger used for logging
    @inlinable
    public func listAdaptersPaginator(
        afterCreationTime: Date? = nil,
        beforeCreationTime: Date? = nil,
        maxResults: Int? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) -> AWSClient.PaginatorSequence<ListAdaptersRequest, ListAdaptersResponse> {
        let input = ListAdaptersRequest(
            afterCreationTime: afterCreationTime, 
            beforeCreationTime: beforeCreationTime, 
            maxResults: maxResults
        )
        return self.listAdaptersPaginator(input, logger: logger)
    }
}

extension Textract.ListAdapterVersionsRequest: AWSPaginateToken {
    @inlinable
    public func usingPaginationToken(_ token: String) -> Textract.ListAdapterVersionsRequest {
        return .init(
            adapterId: self.adapterId,
            afterCreationTime: self.afterCreationTime,
            beforeCreationTime: self.beforeCreationTime,
            maxResults: self.maxResults,
            nextToken: token
        )
    }
}

extension Textract.ListAdaptersRequest: AWSPaginateToken {
    @inlinable
    public func usingPaginationToken(_ token: String) -> Textract.ListAdaptersRequest {
        return .init(
            afterCreationTime: self.afterCreationTime,
            beforeCreationTime: self.beforeCreationTime,
            maxResults: self.maxResults,
            nextToken: token
        )
    }
}
