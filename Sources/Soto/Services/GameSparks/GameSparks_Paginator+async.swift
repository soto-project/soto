//===----------------------------------------------------------------------===//
//
// This source file is part of the Soto for AWS open source project
//
// Copyright (c) 2017-2021 the Soto project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
// See CONTRIBUTORS.txt for the list of Soto project authors
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by https://github.com/soto-project/soto-codegenerator.
// DO NOT EDIT.

#if compiler(>=5.5.2) && canImport(_Concurrency)

import SotoCore

// MARK: Paginators

@available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
extension GameSparks {
    ///  Gets a paginated list of available versions for the extension.  Each time an API change is made to an extension, the version is incremented. The list retrieved by this operation shows the versions that are currently available.
    /// Return PaginatorSequence for operation.
    ///
    /// - Parameters:
    ///   - input: Input for request
    ///   - logger: Logger used flot logging
    ///   - eventLoop: EventLoop to run this process on
    public func listExtensionVersionsPaginator(
        _ input: ListExtensionVersionsRequest,
        logger: Logger = AWSClient.loggingDisabled,
        on eventLoop: EventLoop? = nil
    ) -> AWSClient.PaginatorSequence<ListExtensionVersionsRequest, ListExtensionVersionsResult> {
        return .init(
            input: input,
            command: listExtensionVersions,
            inputKey: \ListExtensionVersionsRequest.nextToken,
            outputKey: \ListExtensionVersionsResult.nextToken,
            logger: logger,
            on: eventLoop
        )
    }

    ///  Gets a paginated list of available extensions.  Extensions provide features that games can use from scripts.
    /// Return PaginatorSequence for operation.
    ///
    /// - Parameters:
    ///   - input: Input for request
    ///   - logger: Logger used flot logging
    ///   - eventLoop: EventLoop to run this process on
    public func listExtensionsPaginator(
        _ input: ListExtensionsRequest,
        logger: Logger = AWSClient.loggingDisabled,
        on eventLoop: EventLoop? = nil
    ) -> AWSClient.PaginatorSequence<ListExtensionsRequest, ListExtensionsResult> {
        return .init(
            input: input,
            command: listExtensions,
            inputKey: \ListExtensionsRequest.nextToken,
            outputKey: \ListExtensionsResult.nextToken,
            logger: logger,
            on: eventLoop
        )
    }

    ///  Gets a paginated list of games.
    /// Return PaginatorSequence for operation.
    ///
    /// - Parameters:
    ///   - input: Input for request
    ///   - logger: Logger used flot logging
    ///   - eventLoop: EventLoop to run this process on
    public func listGamesPaginator(
        _ input: ListGamesRequest,
        logger: Logger = AWSClient.loggingDisabled,
        on eventLoop: EventLoop? = nil
    ) -> AWSClient.PaginatorSequence<ListGamesRequest, ListGamesResult> {
        return .init(
            input: input,
            command: listGames,
            inputKey: \ListGamesRequest.nextToken,
            outputKey: \ListGamesResult.nextToken,
            logger: logger,
            on: eventLoop
        )
    }

    ///  Gets a paginated list of code generation jobs for a snapshot.
    /// Return PaginatorSequence for operation.
    ///
    /// - Parameters:
    ///   - input: Input for request
    ///   - logger: Logger used flot logging
    ///   - eventLoop: EventLoop to run this process on
    public func listGeneratedCodeJobsPaginator(
        _ input: ListGeneratedCodeJobsRequest,
        logger: Logger = AWSClient.loggingDisabled,
        on eventLoop: EventLoop? = nil
    ) -> AWSClient.PaginatorSequence<ListGeneratedCodeJobsRequest, ListGeneratedCodeJobsResult> {
        return .init(
            input: input,
            command: listGeneratedCodeJobs,
            inputKey: \ListGeneratedCodeJobsRequest.nextToken,
            outputKey: \ListGeneratedCodeJobsResult.nextToken,
            logger: logger,
            on: eventLoop
        )
    }

    ///  Gets a paginated list of snapshot summaries from the game.
    /// Return PaginatorSequence for operation.
    ///
    /// - Parameters:
    ///   - input: Input for request
    ///   - logger: Logger used flot logging
    ///   - eventLoop: EventLoop to run this process on
    public func listSnapshotsPaginator(
        _ input: ListSnapshotsRequest,
        logger: Logger = AWSClient.loggingDisabled,
        on eventLoop: EventLoop? = nil
    ) -> AWSClient.PaginatorSequence<ListSnapshotsRequest, ListSnapshotsResult> {
        return .init(
            input: input,
            command: listSnapshots,
            inputKey: \ListSnapshotsRequest.nextToken,
            outputKey: \ListSnapshotsResult.nextToken,
            logger: logger,
            on: eventLoop
        )
    }

    ///  Gets a paginated list of stage deployment summaries from the game.
    /// Return PaginatorSequence for operation.
    ///
    /// - Parameters:
    ///   - input: Input for request
    ///   - logger: Logger used flot logging
    ///   - eventLoop: EventLoop to run this process on
    public func listStageDeploymentsPaginator(
        _ input: ListStageDeploymentsRequest,
        logger: Logger = AWSClient.loggingDisabled,
        on eventLoop: EventLoop? = nil
    ) -> AWSClient.PaginatorSequence<ListStageDeploymentsRequest, ListStageDeploymentsResult> {
        return .init(
            input: input,
            command: listStageDeployments,
            inputKey: \ListStageDeploymentsRequest.nextToken,
            outputKey: \ListStageDeploymentsResult.nextToken,
            logger: logger,
            on: eventLoop
        )
    }

    ///  Gets a paginated list of stage summaries from the game.
    /// Return PaginatorSequence for operation.
    ///
    /// - Parameters:
    ///   - input: Input for request
    ///   - logger: Logger used flot logging
    ///   - eventLoop: EventLoop to run this process on
    public func listStagesPaginator(
        _ input: ListStagesRequest,
        logger: Logger = AWSClient.loggingDisabled,
        on eventLoop: EventLoop? = nil
    ) -> AWSClient.PaginatorSequence<ListStagesRequest, ListStagesResult> {
        return .init(
            input: input,
            command: listStages,
            inputKey: \ListStagesRequest.nextToken,
            outputKey: \ListStagesResult.nextToken,
            logger: logger,
            on: eventLoop
        )
    }
}

#endif // compiler(>=5.5.2) && canImport(_Concurrency)
