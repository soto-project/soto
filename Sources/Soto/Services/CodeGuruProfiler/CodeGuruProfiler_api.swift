//===----------------------------------------------------------------------===//
//
// This source file is part of the Soto for AWS open source project
//
// Copyright (c) 2017-2023 the Soto project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
// See CONTRIBUTORS.txt for the list of Soto project authors
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by https://github.com/soto-project/soto-codegenerator.
// DO NOT EDIT.

@_exported import SotoCore

/// Service object for interacting with AWS CodeGuruProfiler service.
///
///  This section provides documentation for the Amazon CodeGuru Profiler API operations.   Amazon CodeGuru Profiler collects runtime performance data from your live applications, and provides recommendations that can help you fine-tune your application performance. Using machine learning algorithms, CodeGuru Profiler can help you find your most expensive lines of code and suggest ways you can improve efficiency and remove CPU bottlenecks.   Amazon CodeGuru Profiler provides different visualizations of profiling data to help you identify what code is running on the CPU, see how much time is consumed, and suggest ways to reduce CPU utilization.   Amazon CodeGuru Profiler currently supports applications written in all Java virtual machine (JVM) languages and Python. While CodeGuru Profiler supports both visualizations and recommendations for applications written in Java, it can also generate visualizations and a subset of recommendations for applications written in other JVM languages and Python.   For more information, see What is Amazon CodeGuru Profiler in  the Amazon CodeGuru Profiler User Guide.
public struct CodeGuruProfiler: AWSService {
    // MARK: Member variables

    /// Client used for communication with AWS
    public let client: AWSClient
    /// Service configuration
    public let config: AWSServiceConfig

    // MARK: Initialization

    /// Initialize the CodeGuruProfiler client
    /// - parameters:
    ///     - client: AWSClient used to process requests
    ///     - region: Region of server you want to communicate with. This will override the partition parameter.
    ///     - partition: AWS partition where service resides, standard (.aws), china (.awscn), government (.awsusgov).
    ///     - endpoint: Custom endpoint URL to use instead of standard AWS servers
    ///     - middleware: Middleware chain used to edit requests before they are sent and responses before they are decoded 
    ///     - timeout: Timeout value for HTTP requests
    ///     - byteBufferAllocator: Allocator for ByteBuffers
    ///     - options: Service options
    public init(
        client: AWSClient,
        region: SotoCore.Region? = nil,
        partition: AWSPartition = .aws,
        endpoint: String? = nil,
        middleware: AWSMiddlewareProtocol? = nil,
        timeout: TimeAmount? = nil,
        byteBufferAllocator: ByteBufferAllocator = ByteBufferAllocator(),
        options: AWSServiceConfig.Options = []
    ) {
        self.client = client
        self.config = AWSServiceConfig(
            region: region,
            partition: region?.partition ?? partition,
            serviceName: "CodeGuruProfiler",
            serviceIdentifier: "codeguru-profiler",
            serviceProtocol: .restjson,
            apiVersion: "2019-07-18",
            endpoint: endpoint,
            errorType: CodeGuruProfilerErrorType.self,
            middleware: middleware,
            timeout: timeout,
            byteBufferAllocator: byteBufferAllocator,
            options: options
        )
    }





    // MARK: API Calls

    /// Add up to 2 anomaly notifications channels for a profiling group.
    @Sendable
    public func addNotificationChannels(_ input: AddNotificationChannelsRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> AddNotificationChannelsResponse {
        return try await self.client.execute(
            operation: "AddNotificationChannels", 
            path: "/profilingGroups/{profilingGroupName}/notificationConfiguration", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    ///  Returns the time series of values for a requested list  of frame metrics from a time period.
    @Sendable
    public func batchGetFrameMetricData(_ input: BatchGetFrameMetricDataRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> BatchGetFrameMetricDataResponse {
        return try await self.client.execute(
            operation: "BatchGetFrameMetricData", 
            path: "/profilingGroups/{profilingGroupName}/frames/-/metrics", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    ///  Used by profiler agents to report their current state and to receive remote  configuration updates. For example, ConfigureAgent can be used  to tell an agent whether to profile or not and for how long to return profiling data.
    @Sendable
    public func configureAgent(_ input: ConfigureAgentRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> ConfigureAgentResponse {
        return try await self.client.execute(
            operation: "ConfigureAgent", 
            path: "/profilingGroups/{profilingGroupName}/configureAgent", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Creates a profiling group.
    @Sendable
    public func createProfilingGroup(_ input: CreateProfilingGroupRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> CreateProfilingGroupResponse {
        return try await self.client.execute(
            operation: "CreateProfilingGroup", 
            path: "/profilingGroups", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Deletes a profiling group.
    @Sendable
    public func deleteProfilingGroup(_ input: DeleteProfilingGroupRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DeleteProfilingGroupResponse {
        return try await self.client.execute(
            operation: "DeleteProfilingGroup", 
            path: "/profilingGroups/{profilingGroupName}", 
            httpMethod: .DELETE, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    ///  Returns a  ProfilingGroupDescription  object that contains information about the requested profiling group.
    @Sendable
    public func describeProfilingGroup(_ input: DescribeProfilingGroupRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DescribeProfilingGroupResponse {
        return try await self.client.execute(
            operation: "DescribeProfilingGroup", 
            path: "/profilingGroups/{profilingGroupName}", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    ///  Returns a list of   FindingsReportSummary  objects that contain analysis results for all profiling groups in your AWS account.
    @Sendable
    public func getFindingsReportAccountSummary(_ input: GetFindingsReportAccountSummaryRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> GetFindingsReportAccountSummaryResponse {
        return try await self.client.execute(
            operation: "GetFindingsReportAccountSummary", 
            path: "/internal/findingsReports", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Get the current configuration for anomaly notifications for a profiling group.
    @Sendable
    public func getNotificationConfiguration(_ input: GetNotificationConfigurationRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> GetNotificationConfigurationResponse {
        return try await self.client.execute(
            operation: "GetNotificationConfiguration", 
            path: "/profilingGroups/{profilingGroupName}/notificationConfiguration", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    ///  Returns the JSON-formatted resource-based policy on a profiling group.
    @Sendable
    public func getPolicy(_ input: GetPolicyRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> GetPolicyResponse {
        return try await self.client.execute(
            operation: "GetPolicy", 
            path: "/profilingGroups/{profilingGroupName}/policy", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    ///  Gets the aggregated profile of a profiling group for a specified time range.  Amazon CodeGuru Profiler collects posted agent profiles for a profiling group  into aggregated profiles.       Because aggregated profiles expire over time GetProfile is not idempotent.     Specify the time range for the requested aggregated profile using 1 or 2 of the following parameters: startTime,  endTime, period. The maximum time range allowed is 7 days. If you specify all 3 parameters,  an exception is thrown. If you specify only period, the latest aggregated profile is returned.     Aggregated profiles are available with aggregation periods of 5 minutes, 1 hour, and 1 day, aligned to  UTC. The aggregation period of an aggregated profile determines how long it is retained. For more  information, see  AggregatedProfileTime . The aggregated profile's aggregation period determines how long   it is retained by CodeGuru Profiler.      If the aggregation period is 5 minutes, the aggregated profile is retained for 15 days.     If the aggregation period is 1 hour, the aggregated profile is retained for 60 days.     If the aggregation period is 1 day, the aggregated profile is retained for 3 years.     There are two use cases for calling GetProfile.    If you want to return an aggregated profile that already exists, use   ListProfileTimes to  view the time ranges of existing aggregated profiles. Use them in a GetProfile request to return a specific,  existing aggregated profile.     If you want to return an aggregated profile for a time range that doesn't align with an existing aggregated profile,  then CodeGuru Profiler makes a best effort to combine existing aggregated profiles from the requested time  range and return them as one aggregated profile.    If aggregated profiles do not exist for the full time range requested, then aggregated profiles for a smaller time range are returned. For example, if the requested time range is from 00:00 to 00:20, and the existing aggregated profiles are from 00:15 and 00:25, then the aggregated profiles from 00:15 to 00:20 are returned.
    @Sendable
    public func getProfile(_ input: GetProfileRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> GetProfileResponse {
        return try await self.client.execute(
            operation: "GetProfile", 
            path: "/profilingGroups/{profilingGroupName}/profile", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    ///  Returns a list of   Recommendation  objects that contain recommendations for a profiling group for a given time period. A list of   Anomaly  objects that contains details about anomalies detected in the profiling group for the same time period is also  returned.
    @Sendable
    public func getRecommendations(_ input: GetRecommendationsRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> GetRecommendationsResponse {
        return try await self.client.execute(
            operation: "GetRecommendations", 
            path: "/internal/profilingGroups/{profilingGroupName}/recommendations", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// List the available reports for a given profiling group and time range.
    @Sendable
    public func listFindingsReports(_ input: ListFindingsReportsRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> ListFindingsReportsResponse {
        return try await self.client.execute(
            operation: "ListFindingsReports", 
            path: "/internal/profilingGroups/{profilingGroupName}/findingsReports", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Lists the start times of the available aggregated profiles of a profiling group  for an aggregation period within the specified time range.
    @Sendable
    public func listProfileTimes(_ input: ListProfileTimesRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> ListProfileTimesResponse {
        return try await self.client.execute(
            operation: "ListProfileTimes", 
            path: "/profilingGroups/{profilingGroupName}/profileTimes", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    ///  Returns a list of profiling groups. The profiling groups are returned as   ProfilingGroupDescription  objects.
    @Sendable
    public func listProfilingGroups(_ input: ListProfilingGroupsRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> ListProfilingGroupsResponse {
        return try await self.client.execute(
            operation: "ListProfilingGroups", 
            path: "/profilingGroups", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    ///  Returns a list of the tags that are assigned to a specified resource.
    @Sendable
    public func listTagsForResource(_ input: ListTagsForResourceRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> ListTagsForResourceResponse {
        return try await self.client.execute(
            operation: "ListTagsForResource", 
            path: "/tags/{resourceArn}", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    ///  Submits profiling data to an aggregated profile of a profiling group. To get an   aggregated profile that is created with this profiling data, use   GetProfile .
    @Sendable
    public func postAgentProfile(_ input: PostAgentProfileRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> PostAgentProfileResponse {
        return try await self.client.execute(
            operation: "PostAgentProfile", 
            path: "/profilingGroups/{profilingGroupName}/agentProfile", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    ///  Adds permissions to a profiling group's resource-based policy  that are provided using an action group. If a profiling group doesn't have  a resource-based policy, one is created for it using the permissions in the action group and  the roles and users in the principals parameter.   The one supported action group that can be added is agentPermission which grants ConfigureAgent and PostAgent permissions. For more information, see Resource-based policies in CodeGuru Profiler in the Amazon CodeGuru Profiler User Guide,  ConfigureAgent , and  PostAgentProfile .    The first time you call PutPermission on a profiling group, do not specify a revisionId because  it doesn't have a resource-based policy. Subsequent calls must provide a revisionId to specify  which revision of the resource-based policy to add the permissions to.    The response contains the profiling group's JSON-formatted resource policy.
    @Sendable
    public func putPermission(_ input: PutPermissionRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> PutPermissionResponse {
        return try await self.client.execute(
            operation: "PutPermission", 
            path: "/profilingGroups/{profilingGroupName}/policy/{actionGroup}", 
            httpMethod: .PUT, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Remove one anomaly notifications channel for a profiling group.
    @Sendable
    public func removeNotificationChannel(_ input: RemoveNotificationChannelRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> RemoveNotificationChannelResponse {
        return try await self.client.execute(
            operation: "RemoveNotificationChannel", 
            path: "/profilingGroups/{profilingGroupName}/notificationConfiguration/{channelId}", 
            httpMethod: .DELETE, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    ///  Removes permissions from a profiling group's resource-based policy that are provided using an action group. The one supported action group that can be removed is agentPermission which grants ConfigureAgent and PostAgent permissions. For more information, see Resource-based policies in CodeGuru Profiler in the Amazon CodeGuru Profiler User Guide,  ConfigureAgent , and  PostAgentProfile .
    @Sendable
    public func removePermission(_ input: RemovePermissionRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> RemovePermissionResponse {
        return try await self.client.execute(
            operation: "RemovePermission", 
            path: "/profilingGroups/{profilingGroupName}/policy/{actionGroup}", 
            httpMethod: .DELETE, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Sends feedback to CodeGuru Profiler about whether the anomaly detected by the analysis is  useful or not.
    @Sendable
    public func submitFeedback(_ input: SubmitFeedbackRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> SubmitFeedbackResponse {
        return try await self.client.execute(
            operation: "SubmitFeedback", 
            path: "/internal/profilingGroups/{profilingGroupName}/anomalies/{anomalyInstanceId}/feedback", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    ///  Use to assign one or more tags to a resource.
    @Sendable
    public func tagResource(_ input: TagResourceRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> TagResourceResponse {
        return try await self.client.execute(
            operation: "TagResource", 
            path: "/tags/{resourceArn}", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    ///  Use to remove one or more tags from a resource.
    @Sendable
    public func untagResource(_ input: UntagResourceRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> UntagResourceResponse {
        return try await self.client.execute(
            operation: "UntagResource", 
            path: "/tags/{resourceArn}", 
            httpMethod: .DELETE, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Updates a profiling group.
    @Sendable
    public func updateProfilingGroup(_ input: UpdateProfilingGroupRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> UpdateProfilingGroupResponse {
        return try await self.client.execute(
            operation: "UpdateProfilingGroup", 
            path: "/profilingGroups/{profilingGroupName}", 
            httpMethod: .PUT, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
}

extension CodeGuruProfiler {
    /// Initializer required by `AWSService.with(middlewares:timeout:byteBufferAllocator:options)`. You are not able to use this initializer directly as there are not public
    /// initializers for `AWSServiceConfig.Patch`. Please use `AWSService.with(middlewares:timeout:byteBufferAllocator:options)` instead.
    public init(from: CodeGuruProfiler, patch: AWSServiceConfig.Patch) {
        self.client = from.client
        self.config = from.config.with(patch: patch)
    }
}

// MARK: Paginators

@available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
extension CodeGuruProfiler {
    ///  Returns a list of   FindingsReportSummary  objects that contain analysis results for all profiling groups in your AWS account.
    /// Return PaginatorSequence for operation.
    ///
    /// - Parameters:
    ///   - input: Input for request
    ///   - logger: Logger used flot logging
    public func getFindingsReportAccountSummaryPaginator(
        _ input: GetFindingsReportAccountSummaryRequest,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<GetFindingsReportAccountSummaryRequest, GetFindingsReportAccountSummaryResponse> {
        return .init(
            input: input,
            command: self.getFindingsReportAccountSummary,
            inputKey: \GetFindingsReportAccountSummaryRequest.nextToken,
            outputKey: \GetFindingsReportAccountSummaryResponse.nextToken,
            logger: logger
        )
    }

    /// List the available reports for a given profiling group and time range.
    /// Return PaginatorSequence for operation.
    ///
    /// - Parameters:
    ///   - input: Input for request
    ///   - logger: Logger used flot logging
    public func listFindingsReportsPaginator(
        _ input: ListFindingsReportsRequest,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<ListFindingsReportsRequest, ListFindingsReportsResponse> {
        return .init(
            input: input,
            command: self.listFindingsReports,
            inputKey: \ListFindingsReportsRequest.nextToken,
            outputKey: \ListFindingsReportsResponse.nextToken,
            logger: logger
        )
    }

    /// Lists the start times of the available aggregated profiles of a profiling group  for an aggregation period within the specified time range.
    /// Return PaginatorSequence for operation.
    ///
    /// - Parameters:
    ///   - input: Input for request
    ///   - logger: Logger used flot logging
    public func listProfileTimesPaginator(
        _ input: ListProfileTimesRequest,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<ListProfileTimesRequest, ListProfileTimesResponse> {
        return .init(
            input: input,
            command: self.listProfileTimes,
            inputKey: \ListProfileTimesRequest.nextToken,
            outputKey: \ListProfileTimesResponse.nextToken,
            logger: logger
        )
    }

    ///  Returns a list of profiling groups. The profiling groups are returned as   ProfilingGroupDescription  objects.
    /// Return PaginatorSequence for operation.
    ///
    /// - Parameters:
    ///   - input: Input for request
    ///   - logger: Logger used flot logging
    public func listProfilingGroupsPaginator(
        _ input: ListProfilingGroupsRequest,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<ListProfilingGroupsRequest, ListProfilingGroupsResponse> {
        return .init(
            input: input,
            command: self.listProfilingGroups,
            inputKey: \ListProfilingGroupsRequest.nextToken,
            outputKey: \ListProfilingGroupsResponse.nextToken,
            logger: logger
        )
    }
}

extension CodeGuruProfiler.GetFindingsReportAccountSummaryRequest: AWSPaginateToken {
    public func usingPaginationToken(_ token: String) -> CodeGuruProfiler.GetFindingsReportAccountSummaryRequest {
        return .init(
            dailyReportsOnly: self.dailyReportsOnly,
            maxResults: self.maxResults,
            nextToken: token
        )
    }
}

extension CodeGuruProfiler.ListFindingsReportsRequest: AWSPaginateToken {
    public func usingPaginationToken(_ token: String) -> CodeGuruProfiler.ListFindingsReportsRequest {
        return .init(
            dailyReportsOnly: self.dailyReportsOnly,
            endTime: self.endTime,
            maxResults: self.maxResults,
            nextToken: token,
            profilingGroupName: self.profilingGroupName,
            startTime: self.startTime
        )
    }
}

extension CodeGuruProfiler.ListProfileTimesRequest: AWSPaginateToken {
    public func usingPaginationToken(_ token: String) -> CodeGuruProfiler.ListProfileTimesRequest {
        return .init(
            endTime: self.endTime,
            maxResults: self.maxResults,
            nextToken: token,
            orderBy: self.orderBy,
            period: self.period,
            profilingGroupName: self.profilingGroupName,
            startTime: self.startTime
        )
    }
}

extension CodeGuruProfiler.ListProfilingGroupsRequest: AWSPaginateToken {
    public func usingPaginationToken(_ token: String) -> CodeGuruProfiler.ListProfilingGroupsRequest {
        return .init(
            includeDescription: self.includeDescription,
            maxResults: self.maxResults,
            nextToken: token
        )
    }
}
