//===----------------------------------------------------------------------===//
//
// This source file is part of the Soto for AWS open source project
//
// Copyright (c) 2017-2021 the Soto project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
// See CONTRIBUTORS.txt for the list of Soto project authors
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by https://github.com/soto-project/soto/tree/main/CodeGenerator. DO NOT EDIT.

import SotoCore

/// Error enum for Route53RecoveryControlConfig
public struct Route53RecoveryControlConfigErrorType: AWSErrorType {
    enum Code: String {
        case accessDeniedException = "AccessDeniedException"
        case conflictException = "ConflictException"
        case internalServerException = "InternalServerException"
        case resourceNotFoundException = "ResourceNotFoundException"
        case serviceQuotaExceededException = "ServiceQuotaExceededException"
        case throttlingException = "ThrottlingException"
        case validationException = "ValidationException"
    }

    private let error: Code
    public let context: AWSErrorContext?

    /// initialize Route53RecoveryControlConfig
    public init?(errorCode: String, context: AWSErrorContext) {
        guard let error = Code(rawValue: errorCode) else { return nil }
        self.error = error
        self.context = context
    }

    internal init(_ error: Code) {
        self.error = error
        self.context = nil
    }

    /// return error code string
    public var errorCode: String { self.error.rawValue }

    /// 403 response - AccessDeniedException. You do not have sufficient access to perform this action.
    public static var accessDeniedException: Self { .init(.accessDeniedException) }
    /// 409 response - ConflictException.
    public static var conflictException: Self { .init(.conflictException) }
    /// 500 response - InternalServiceError. Temporary service error. Retry the request.
    public static var internalServerException: Self { .init(.internalServerException) }
    /// 404 response - The query string contains a syntax error or resource not found.
    public static var resourceNotFoundException: Self { .init(.resourceNotFoundException) }
    /// 402 response
    public static var serviceQuotaExceededException: Self { .init(.serviceQuotaExceededException) }
    /// 429 response - ThrottlingException.
    public static var throttlingException: Self { .init(.throttlingException) }
    /// 400 response - Multiple causes. For example, you might have a malformed query string and input parameter might be out of range, or you used parameters together incorrectly.
    public static var validationException: Self { .init(.validationException) }
}

extension Route53RecoveryControlConfigErrorType: Equatable {
    public static func == (lhs: Route53RecoveryControlConfigErrorType, rhs: Route53RecoveryControlConfigErrorType) -> Bool {
        lhs.error == rhs.error
    }
}

extension Route53RecoveryControlConfigErrorType: CustomStringConvertible {
    public var description: String {
        return "\(self.error.rawValue): \(self.message ?? "")"
    }
}
