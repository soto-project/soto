//===----------------------------------------------------------------------===//
//
// This source file is part of the Soto for AWS open source project
//
// Copyright (c) 2017-2024 the Soto project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
// See CONTRIBUTORS.txt for the list of Soto project authors
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by https://github.com/soto-project/soto-codegenerator.
// DO NOT EDIT.

#if os(Linux) && compiler(<5.10)
// swift-corelibs-foundation hasn't been updated with Sendable conformances
@preconcurrency import Foundation
#else
import Foundation
#endif
@_exported import SotoCore

/// Service object for interacting with AWS MediaStoreData service.
///
/// An AWS Elemental MediaStore asset is an object, similar to an object in the Amazon S3 service. Objects are the fundamental entities that are stored in AWS Elemental MediaStore.
public struct MediaStoreData: AWSService {
    // MARK: Member variables

    /// Client used for communication with AWS
    public let client: AWSClient
    /// Service configuration
    public let config: AWSServiceConfig

    // MARK: Initialization

    /// Initialize the MediaStoreData client
    /// - parameters:
    ///     - client: AWSClient used to process requests
    ///     - region: Region of server you want to communicate with. This will override the partition parameter.
    ///     - partition: AWS partition where service resides, standard (.aws), china (.awscn), government (.awsusgov).
    ///     - endpoint: Custom endpoint URL to use instead of standard AWS servers
    ///     - middleware: Middleware chain used to edit requests before they are sent and responses before they are decoded 
    ///     - timeout: Timeout value for HTTP requests
    ///     - byteBufferAllocator: Allocator for ByteBuffers
    ///     - options: Service options
    public init(
        client: AWSClient,
        region: SotoCore.Region? = nil,
        partition: AWSPartition = .aws,
        endpoint: String? = nil,
        middleware: AWSMiddlewareProtocol? = nil,
        timeout: TimeAmount? = nil,
        byteBufferAllocator: ByteBufferAllocator = ByteBufferAllocator(),
        options: AWSServiceConfig.Options = []
    ) {
        self.client = client
        self.config = AWSServiceConfig(
            region: region,
            partition: region?.partition ?? partition,
            serviceName: "MediaStoreData",
            serviceIdentifier: "data.mediastore",
            signingName: "mediastore",
            serviceProtocol: .restjson,
            apiVersion: "2017-09-01",
            endpoint: endpoint,
            errorType: MediaStoreDataErrorType.self,
            xmlNamespace: "https://object.mediastore.amazonaws.com/doc/2017-09-01",
            middleware: middleware,
            timeout: timeout,
            byteBufferAllocator: byteBufferAllocator,
            options: options
        )
    }





    // MARK: API Calls

    /// Deletes an object at the specified path.
    @Sendable
    @inlinable
    public func deleteObject(_ input: DeleteObjectRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DeleteObjectResponse {
        try await self.client.execute(
            operation: "DeleteObject", 
            path: "/{Path+}", 
            httpMethod: .DELETE, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Deletes an object at the specified path.
    ///
    /// Parameters:
    ///   - path: The path (including the file name) where the object is stored in the container. Format: //
    ///   - logger: Logger use during operation
    @inlinable
    public func deleteObject(
        path: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> DeleteObjectResponse {
        let input = DeleteObjectRequest(
            path: path
        )
        return try await self.deleteObject(input, logger: logger)
    }

    /// Gets the headers for an object at the specified path.
    @Sendable
    @inlinable
    public func describeObject(_ input: DescribeObjectRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DescribeObjectResponse {
        try await self.client.execute(
            operation: "DescribeObject", 
            path: "/{Path+}", 
            httpMethod: .HEAD, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Gets the headers for an object at the specified path.
    ///
    /// Parameters:
    ///   - path: The path (including the file name) where the object is stored in the container. Format: //
    ///   - logger: Logger use during operation
    @inlinable
    public func describeObject(
        path: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> DescribeObjectResponse {
        let input = DescribeObjectRequest(
            path: path
        )
        return try await self.describeObject(input, logger: logger)
    }

    /// Downloads the object at the specified path. If the object’s upload availability is set to streaming, AWS Elemental MediaStore downloads the object even if it’s still uploading the object.
    @Sendable
    @inlinable
    public func getObject(_ input: GetObjectRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> GetObjectResponse {
        try await self.client.execute(
            operation: "GetObject", 
            path: "/{Path+}", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Downloads the object at the specified path. If the object’s upload availability is set to streaming, AWS Elemental MediaStore downloads the object even if it’s still uploading the object.
    ///
    /// Parameters:
    ///   - path: The path (including the file name) where the object is stored in the container. Format: // For example, to upload the file mlaw.avi to the folder path premium\canada in the container movies, enter the path premium/canada/mlaw.avi. Do not include the container name in this path. If the path includes any folders that don't exist yet, the service creates them. For example, suppose you have an existing premium/usa subfolder. If you specify premium/canada, the service creates a canada subfolder in the premium folder. You then have two subfolders, usa and canada, in the premium folder.  There is no correlation between the path to the source and the path (folders) in the container in AWS Elemental MediaStore. For more information about folders and how they exist in a container, see the AWS Elemental MediaStore User Guide. The file name is the name that is assigned to the file that you upload. The file can have the same name inside and outside of AWS Elemental MediaStore, or it can have the same name. The file name can include or omit an extension.
    ///   - range: The range bytes of an object to retrieve. For more information about the Range header, see http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.35. AWS Elemental MediaStore ignores this header for partially uploaded objects that have streaming upload availability.
    ///   - logger: Logger use during operation
    @inlinable
    public func getObject(
        path: String,
        range: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> GetObjectResponse {
        let input = GetObjectRequest(
            path: path, 
            range: range
        )
        return try await self.getObject(input, logger: logger)
    }

    /// Provides a list of metadata entries about folders and objects in the specified folder.
    @Sendable
    @inlinable
    public func listItems(_ input: ListItemsRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> ListItemsResponse {
        try await self.client.execute(
            operation: "ListItems", 
            path: "/", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Provides a list of metadata entries about folders and objects in the specified folder.
    ///
    /// Parameters:
    ///   - maxResults: The maximum number of results to return per API request. For example, you submit a ListItems request with MaxResults set at 500. Although 2,000 items match your request, the service returns no more than the first 500 items. (The service also returns a NextToken value that you can use to fetch the next batch of results.) The service might return fewer results than the MaxResults value. If MaxResults is not included in the request, the service defaults to pagination with a maximum of 1,000 results per page.
    ///   - nextToken: The token that identifies which batch of results that you want to see. For example, you submit a ListItems request with MaxResults set at 500. The service returns the first batch of results (up to 500) and a NextToken value. To see the next batch of results, you can submit the ListItems request a second time and specify the NextToken value. Tokens expire after 15 minutes.
    ///   - path: The path in the container from which to retrieve items. Format: //
    ///   - logger: Logger use during operation
    @inlinable
    public func listItems(
        maxResults: Int? = nil,
        nextToken: String? = nil,
        path: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> ListItemsResponse {
        let input = ListItemsRequest(
            maxResults: maxResults, 
            nextToken: nextToken, 
            path: path
        )
        return try await self.listItems(input, logger: logger)
    }

    /// Uploads an object to the specified path. Object sizes are limited to 25 MB for standard upload availability and 10 MB for streaming upload availability.
    @Sendable
    @inlinable
    public func putObject(_ input: PutObjectRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> PutObjectResponse {
        try await self.client.execute(
            operation: "PutObject", 
            path: "/{Path+}", 
            httpMethod: .PUT, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Uploads an object to the specified path. Object sizes are limited to 25 MB for standard upload availability and 10 MB for streaming upload availability.
    ///
    /// Parameters:
    ///   - body: The bytes to be stored.
    ///   - cacheControl: An optional CacheControl header that allows the caller to control the object's cache behavior. Headers can be passed in as specified in the HTTP at https://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.9. Headers with a custom user-defined value are also accepted.
    ///   - contentType: The content type of the object.
    ///   - path: The path (including the file name) where the object is stored in the container. Format: // For example, to upload the file mlaw.avi to the folder path premium\canada in the container movies, enter the path premium/canada/mlaw.avi. Do not include the container name in this path. If the path includes any folders that don't exist yet, the service creates them. For example, suppose you have an existing premium/usa subfolder. If you specify premium/canada, the service creates a canada subfolder in the premium folder. You then have two subfolders, usa and canada, in the premium folder.  There is no correlation between the path to the source and the path (folders) in the container in AWS Elemental MediaStore. For more information about folders and how they exist in a container, see the AWS Elemental MediaStore User Guide. The file name is the name that is assigned to the file that you upload. The file can have the same name inside and outside of AWS Elemental MediaStore, or it can have the same name. The file name can include or omit an extension.
    ///   - storageClass: Indicates the storage class of a Put request. Defaults to high-performance temporal storage class, and objects are persisted into durable storage shortly after being received.
    ///   - uploadAvailability: Indicates the availability of an object while it is still uploading. If the value is set to streaming, the object is available for downloading after some initial buffering but before the object is uploaded completely. If the value is set to standard, the object is available for downloading only when it is uploaded completely. The default value for this header is standard. To use this header, you must also set the HTTP Transfer-Encoding header to chunked.
    ///   - logger: Logger use during operation
    @inlinable
    public func putObject(
        body: AWSHTTPBody,
        cacheControl: String? = nil,
        contentType: String? = nil,
        path: String,
        storageClass: StorageClass? = nil,
        uploadAvailability: UploadAvailability? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> PutObjectResponse {
        let input = PutObjectRequest(
            body: body, 
            cacheControl: cacheControl, 
            contentType: contentType, 
            path: path, 
            storageClass: storageClass, 
            uploadAvailability: uploadAvailability
        )
        return try await self.putObject(input, logger: logger)
    }
}

extension MediaStoreData {
    /// Initializer required by `AWSService.with(middlewares:timeout:byteBufferAllocator:options)`. You are not able to use this initializer directly as there are not public
    /// initializers for `AWSServiceConfig.Patch`. Please use `AWSService.with(middlewares:timeout:byteBufferAllocator:options)` instead.
    public init(from: MediaStoreData, patch: AWSServiceConfig.Patch) {
        self.client = from.client
        self.config = from.config.with(patch: patch)
    }
}

// MARK: Paginators

@available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
extension MediaStoreData {
    /// Return PaginatorSequence for operation ``listItems(_:logger:)``.
    ///
    /// - Parameters:
    ///   - input: Input for operation
    ///   - logger: Logger used for logging
    @inlinable
    public func listItemsPaginator(
        _ input: ListItemsRequest,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<ListItemsRequest, ListItemsResponse> {
        return .init(
            input: input,
            command: self.listItems,
            inputKey: \ListItemsRequest.nextToken,
            outputKey: \ListItemsResponse.nextToken,
            logger: logger
        )
    }
    /// Return PaginatorSequence for operation ``listItems(_:logger:)``.
    ///
    /// - Parameters:
    ///   - maxResults: The maximum number of results to return per API request. For example, you submit a ListItems request with MaxResults set at 500. Although 2,000 items match your request, the service returns no more than the first 500 items. (The service also returns a NextToken value that you can use to fetch the next batch of results.) The service might return fewer results than the MaxResults value. If MaxResults is not included in the request, the service defaults to pagination with a maximum of 1,000 results per page.
    ///   - path: The path in the container from which to retrieve items. Format: //
    ///   - logger: Logger used for logging
    @inlinable
    public func listItemsPaginator(
        maxResults: Int? = nil,
        path: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) -> AWSClient.PaginatorSequence<ListItemsRequest, ListItemsResponse> {
        let input = ListItemsRequest(
            maxResults: maxResults, 
            path: path
        )
        return self.listItemsPaginator(input, logger: logger)
    }
}

extension MediaStoreData.ListItemsRequest: AWSPaginateToken {
    @inlinable
    public func usingPaginationToken(_ token: String) -> MediaStoreData.ListItemsRequest {
        return .init(
            maxResults: self.maxResults,
            nextToken: token,
            path: self.path
        )
    }
}
