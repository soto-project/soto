//===----------------------------------------------------------------------===//
//
// This source file is part of the Soto for AWS open source project
//
// Copyright (c) 2017-2022 the Soto project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
// See CONTRIBUTORS.txt for the list of Soto project authors
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by https://github.com/soto-project/soto-codegenerator.
// DO NOT EDIT.

import SotoCore

/// Error enum for KinesisVideo
public struct KinesisVideoErrorType: AWSErrorType {
    enum Code: String {
        case accessDeniedException = "AccessDeniedException"
        case accountChannelLimitExceededException = "AccountChannelLimitExceededException"
        case accountStreamLimitExceededException = "AccountStreamLimitExceededException"
        case clientLimitExceededException = "ClientLimitExceededException"
        case deviceStreamLimitExceededException = "DeviceStreamLimitExceededException"
        case invalidArgumentException = "InvalidArgumentException"
        case invalidDeviceException = "InvalidDeviceException"
        case invalidResourceFormatException = "InvalidResourceFormatException"
        case noDataRetentionException = "NoDataRetentionException"
        case notAuthorizedException = "NotAuthorizedException"
        case resourceInUseException = "ResourceInUseException"
        case resourceNotFoundException = "ResourceNotFoundException"
        case tagsPerResourceExceededLimitException = "TagsPerResourceExceededLimitException"
        case versionMismatchException = "VersionMismatchException"
    }

    private let error: Code
    public let context: AWSErrorContext?

    /// initialize KinesisVideo
    public init?(errorCode: String, context: AWSErrorContext) {
        guard let error = Code(rawValue: errorCode) else { return nil }
        self.error = error
        self.context = context
    }

    internal init(_ error: Code) {
        self.error = error
        self.context = nil
    }

    /// return error code string
    public var errorCode: String { self.error.rawValue }

    /// You do not have required permissions to perform this operation.
    public static var accessDeniedException: Self { .init(.accessDeniedException) }
    /// You have reached the maximum limit of active signaling channels for this Amazon Web Services account in this region.
    public static var accountChannelLimitExceededException: Self { .init(.accountChannelLimitExceededException) }
    /// The number of streams created for the account is too high.
    public static var accountStreamLimitExceededException: Self { .init(.accountStreamLimitExceededException) }
    /// Kinesis Video Streams has throttled the request because you have exceeded the limit of allowed client calls. Try making the call later.
    public static var clientLimitExceededException: Self { .init(.clientLimitExceededException) }
    /// Not implemented.
    public static var deviceStreamLimitExceededException: Self { .init(.deviceStreamLimitExceededException) }
    /// The value for this input parameter is invalid.
    public static var invalidArgumentException: Self { .init(.invalidArgumentException) }
    /// Not implemented.
    public static var invalidDeviceException: Self { .init(.invalidDeviceException) }
    /// The format of the StreamARN is invalid.
    public static var invalidResourceFormatException: Self { .init(.invalidResourceFormatException) }
    /// The Stream data retention in hours is equal to zero.
    public static var noDataRetentionException: Self { .init(.noDataRetentionException) }
    /// The caller is not authorized to perform this operation.
    public static var notAuthorizedException: Self { .init(.notAuthorizedException) }
    /// The resource is currently not available for this operation. New resources cannot be created with the same name as existing resources. Also, resources cannot be updated or deleted unless they are in an ACTIVE state. If this exception is returned, do not use it to determine whether the requested resource already exists. Instead, it is recommended you use the resource-specific describe API, for example, DescribeStream for video streams.
    public static var resourceInUseException: Self { .init(.resourceInUseException) }
    /// Amazon Kinesis Video Streams can't find the stream that you specified.
    public static var resourceNotFoundException: Self { .init(.resourceNotFoundException) }
    /// You have exceeded the limit of tags that you can associate with the resource. A Kinesis video stream can support up to 50 tags.
    public static var tagsPerResourceExceededLimitException: Self { .init(.tagsPerResourceExceededLimitException) }
    /// The stream version that you specified is not the latest version. To get the latest version, use the DescribeStream API.
    public static var versionMismatchException: Self { .init(.versionMismatchException) }
}

extension KinesisVideoErrorType: Equatable {
    public static func == (lhs: KinesisVideoErrorType, rhs: KinesisVideoErrorType) -> Bool {
        lhs.error == rhs.error
    }
}

extension KinesisVideoErrorType: CustomStringConvertible {
    public var description: String {
        return "\(self.error.rawValue): \(self.message ?? "")"
    }
}
