//===----------------------------------------------------------------------===//
//
// This source file is part of the Soto for AWS open source project
//
// Copyright (c) 2017-2021 the Soto project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
// See CONTRIBUTORS.txt for the list of Soto project authors
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by https://github.com/soto-project/soto-codegenerator.
// DO NOT EDIT.

import Foundation
import SotoCore

extension AutoScalingPlans {
    // MARK: Enums

    public enum ForecastDataType: String, CustomStringConvertible, Codable {
        case capacityforecast = "CapacityForecast"
        case loadforecast = "LoadForecast"
        case scheduledactionmaxcapacity = "ScheduledActionMaxCapacity"
        case scheduledactionmincapacity = "ScheduledActionMinCapacity"
        public var description: String { return self.rawValue }
    }

    public enum LoadMetricType: String, CustomStringConvertible, Codable {
        case albtargetgrouprequestcount = "ALBTargetGroupRequestCount"
        case asgtotalcpuutilization = "ASGTotalCPUUtilization"
        case asgtotalnetworkin = "ASGTotalNetworkIn"
        case asgtotalnetworkout = "ASGTotalNetworkOut"
        public var description: String { return self.rawValue }
    }

    public enum MetricStatistic: String, CustomStringConvertible, Codable {
        case average = "Average"
        case maximum = "Maximum"
        case minimum = "Minimum"
        case samplecount = "SampleCount"
        case sum = "Sum"
        public var description: String { return self.rawValue }
    }

    public enum PolicyType: String, CustomStringConvertible, Codable {
        case targettrackingscaling = "TargetTrackingScaling"
        public var description: String { return self.rawValue }
    }

    public enum PredictiveScalingMaxCapacityBehavior: String, CustomStringConvertible, Codable {
        case setforecastcapacitytomaxcapacity = "SetForecastCapacityToMaxCapacity"
        case setmaxcapacityaboveforecastcapacity = "SetMaxCapacityAboveForecastCapacity"
        case setmaxcapacitytoforecastcapacity = "SetMaxCapacityToForecastCapacity"
        public var description: String { return self.rawValue }
    }

    public enum PredictiveScalingMode: String, CustomStringConvertible, Codable {
        case forecastandscale = "ForecastAndScale"
        case forecastonly = "ForecastOnly"
        public var description: String { return self.rawValue }
    }

    public enum ScalableDimension: String, CustomStringConvertible, Codable {
        case autoscalingAutoscalinggroupDesiredcapacity = "autoscaling:autoScalingGroup:DesiredCapacity"
        case dynamodbIndexReadcapacityunits = "dynamodb:index:ReadCapacityUnits"
        case dynamodbIndexWritecapacityunits = "dynamodb:index:WriteCapacityUnits"
        case dynamodbTableReadcapacityunits = "dynamodb:table:ReadCapacityUnits"
        case dynamodbTableWritecapacityunits = "dynamodb:table:WriteCapacityUnits"
        case ec2SpotFleetRequestTargetcapacity = "ec2:spot-fleet-request:TargetCapacity"
        case ecsServiceDesiredcount = "ecs:service:DesiredCount"
        case rdsClusterReadreplicacount = "rds:cluster:ReadReplicaCount"
        public var description: String { return self.rawValue }
    }

    public enum ScalingMetricType: String, CustomStringConvertible, Codable {
        case albrequestcountpertarget = "ALBRequestCountPerTarget"
        case asgaveragecpuutilization = "ASGAverageCPUUtilization"
        case asgaveragenetworkin = "ASGAverageNetworkIn"
        case asgaveragenetworkout = "ASGAverageNetworkOut"
        case dynamodbreadcapacityutilization = "DynamoDBReadCapacityUtilization"
        case dynamodbwritecapacityutilization = "DynamoDBWriteCapacityUtilization"
        case ec2spotfleetrequestaveragecpuutilization = "EC2SpotFleetRequestAverageCPUUtilization"
        case ec2spotfleetrequestaveragenetworkin = "EC2SpotFleetRequestAverageNetworkIn"
        case ec2spotfleetrequestaveragenetworkout = "EC2SpotFleetRequestAverageNetworkOut"
        case ecsserviceaveragecpuutilization = "ECSServiceAverageCPUUtilization"
        case ecsserviceaveragememoryutilization = "ECSServiceAverageMemoryUtilization"
        case rdsreaderaveragecpuutilization = "RDSReaderAverageCPUUtilization"
        case rdsreaderaveragedatabaseconnections = "RDSReaderAverageDatabaseConnections"
        public var description: String { return self.rawValue }
    }

    public enum ScalingPlanStatusCode: String, CustomStringConvertible, Codable {
        case active = "Active"
        case activewithproblems = "ActiveWithProblems"
        case creationfailed = "CreationFailed"
        case creationinprogress = "CreationInProgress"
        case deletionfailed = "DeletionFailed"
        case deletioninprogress = "DeletionInProgress"
        case updatefailed = "UpdateFailed"
        case updateinprogress = "UpdateInProgress"
        public var description: String { return self.rawValue }
    }

    public enum ScalingPolicyUpdateBehavior: String, CustomStringConvertible, Codable {
        case keepexternalpolicies = "KeepExternalPolicies"
        case replaceexternalpolicies = "ReplaceExternalPolicies"
        public var description: String { return self.rawValue }
    }

    public enum ScalingStatusCode: String, CustomStringConvertible, Codable {
        case active = "Active"
        case inactive = "Inactive"
        case partiallyactive = "PartiallyActive"
        public var description: String { return self.rawValue }
    }

    public enum ServiceNamespace: String, CustomStringConvertible, Codable {
        case autoscaling
        case dynamodb
        case ec2
        case ecs
        case rds
        public var description: String { return self.rawValue }
    }

    // MARK: Shapes

    public struct ApplicationSource: AWSEncodableShape & AWSDecodableShape {
        /// The Amazon Resource Name (ARN) of a AWS CloudFormation stack.
        public let cloudFormationStackARN: String?
        /// A set of tags (up to 50).
        public let tagFilters: [TagFilter]?

        public init(cloudFormationStackARN: String? = nil, tagFilters: [TagFilter]? = nil) {
            self.cloudFormationStackARN = cloudFormationStackARN
            self.tagFilters = tagFilters
        }

        public func validate(name: String) throws {
            try self.validate(self.cloudFormationStackARN, name: "cloudFormationStackARN", parent: name, pattern: "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\r\\n\\t]*")
            try self.tagFilters?.forEach {
                try $0.validate(name: "\(name).tagFilters[]")
            }
        }

        private enum CodingKeys: String, CodingKey {
            case cloudFormationStackARN = "CloudFormationStackARN"
            case tagFilters = "TagFilters"
        }
    }

    public struct CreateScalingPlanRequest: AWSEncodableShape {
        /// A CloudFormation stack or set of tags. You can create one scaling plan per application source. For more information, see ApplicationSource in the AWS Auto Scaling API Reference.
        public let applicationSource: ApplicationSource
        /// The scaling instructions. For more information, see ScalingInstruction in the AWS Auto Scaling API Reference.
        public let scalingInstructions: [ScalingInstruction]
        /// The name of the scaling plan. Names cannot contain vertical bars, colons, or forward slashes.
        public let scalingPlanName: String

        public init(applicationSource: ApplicationSource, scalingInstructions: [ScalingInstruction], scalingPlanName: String) {
            self.applicationSource = applicationSource
            self.scalingInstructions = scalingInstructions
            self.scalingPlanName = scalingPlanName
        }

        public func validate(name: String) throws {
            try self.applicationSource.validate(name: "\(name).applicationSource")
            try self.scalingInstructions.forEach {
                try $0.validate(name: "\(name).scalingInstructions[]")
            }
            try self.validate(self.scalingPlanName, name: "scalingPlanName", parent: name, max: 128)
            try self.validate(self.scalingPlanName, name: "scalingPlanName", parent: name, min: 1)
            try self.validate(self.scalingPlanName, name: "scalingPlanName", parent: name, pattern: "[\\p{Print}&&[^|:/]]+")
        }

        private enum CodingKeys: String, CodingKey {
            case applicationSource = "ApplicationSource"
            case scalingInstructions = "ScalingInstructions"
            case scalingPlanName = "ScalingPlanName"
        }
    }

    public struct CreateScalingPlanResponse: AWSDecodableShape {
        /// The version number of the scaling plan. This value is always 1. Currently, you cannot have multiple scaling plan versions.
        public let scalingPlanVersion: Int64

        public init(scalingPlanVersion: Int64) {
            self.scalingPlanVersion = scalingPlanVersion
        }

        private enum CodingKeys: String, CodingKey {
            case scalingPlanVersion = "ScalingPlanVersion"
        }
    }

    public struct CustomizedLoadMetricSpecification: AWSEncodableShape & AWSDecodableShape {
        /// The dimensions of the metric. Conditional: If you published your metric with dimensions, you must specify the same dimensions in your customized load metric specification.
        public let dimensions: [MetricDimension]?
        /// The name of the metric.
        public let metricName: String
        /// The namespace of the metric.
        public let namespace: String
        /// The statistic of the metric. The only valid value is Sum.
        public let statistic: MetricStatistic
        /// The unit of the metric.
        public let unit: String?

        public init(dimensions: [MetricDimension]? = nil, metricName: String, namespace: String, statistic: MetricStatistic, unit: String? = nil) {
            self.dimensions = dimensions
            self.metricName = metricName
            self.namespace = namespace
            self.statistic = statistic
            self.unit = unit
        }

        private enum CodingKeys: String, CodingKey {
            case dimensions = "Dimensions"
            case metricName = "MetricName"
            case namespace = "Namespace"
            case statistic = "Statistic"
            case unit = "Unit"
        }
    }

    public struct CustomizedScalingMetricSpecification: AWSEncodableShape & AWSDecodableShape {
        /// The dimensions of the metric. Conditional: If you published your metric with dimensions, you must specify the same dimensions in your customized scaling metric specification.
        public let dimensions: [MetricDimension]?
        /// The name of the metric.
        public let metricName: String
        /// The namespace of the metric.
        public let namespace: String
        /// The statistic of the metric.
        public let statistic: MetricStatistic
        /// The unit of the metric.
        public let unit: String?

        public init(dimensions: [MetricDimension]? = nil, metricName: String, namespace: String, statistic: MetricStatistic, unit: String? = nil) {
            self.dimensions = dimensions
            self.metricName = metricName
            self.namespace = namespace
            self.statistic = statistic
            self.unit = unit
        }

        private enum CodingKeys: String, CodingKey {
            case dimensions = "Dimensions"
            case metricName = "MetricName"
            case namespace = "Namespace"
            case statistic = "Statistic"
            case unit = "Unit"
        }
    }

    public struct Datapoint: AWSDecodableShape {
        /// The time stamp for the data point in UTC format.
        public let timestamp: Date?
        /// The value of the data point.
        public let value: Double?

        public init(timestamp: Date? = nil, value: Double? = nil) {
            self.timestamp = timestamp
            self.value = value
        }

        private enum CodingKeys: String, CodingKey {
            case timestamp = "Timestamp"
            case value = "Value"
        }
    }

    public struct DeleteScalingPlanRequest: AWSEncodableShape {
        /// The name of the scaling plan.
        public let scalingPlanName: String
        /// The version number of the scaling plan. Currently, the only valid value is 1.
        public let scalingPlanVersion: Int64

        public init(scalingPlanName: String, scalingPlanVersion: Int64) {
            self.scalingPlanName = scalingPlanName
            self.scalingPlanVersion = scalingPlanVersion
        }

        public func validate(name: String) throws {
            try self.validate(self.scalingPlanName, name: "scalingPlanName", parent: name, max: 128)
            try self.validate(self.scalingPlanName, name: "scalingPlanName", parent: name, min: 1)
            try self.validate(self.scalingPlanName, name: "scalingPlanName", parent: name, pattern: "[\\p{Print}&&[^|:/]]+")
        }

        private enum CodingKeys: String, CodingKey {
            case scalingPlanName = "ScalingPlanName"
            case scalingPlanVersion = "ScalingPlanVersion"
        }
    }

    public struct DeleteScalingPlanResponse: AWSDecodableShape {
        public init() {}
    }

    public struct DescribeScalingPlanResourcesRequest: AWSEncodableShape {
        /// The maximum number of scalable resources to return. The value must be between 1 and 50. The default value is 50.
        public let maxResults: Int?
        /// The token for the next set of results.
        public let nextToken: String?
        /// The name of the scaling plan.
        public let scalingPlanName: String
        /// The version number of the scaling plan. Currently, the only valid value is 1.
        public let scalingPlanVersion: Int64

        public init(maxResults: Int? = nil, nextToken: String? = nil, scalingPlanName: String, scalingPlanVersion: Int64) {
            self.maxResults = maxResults
            self.nextToken = nextToken
            self.scalingPlanName = scalingPlanName
            self.scalingPlanVersion = scalingPlanVersion
        }

        public func validate(name: String) throws {
            try self.validate(self.scalingPlanName, name: "scalingPlanName", parent: name, max: 128)
            try self.validate(self.scalingPlanName, name: "scalingPlanName", parent: name, min: 1)
            try self.validate(self.scalingPlanName, name: "scalingPlanName", parent: name, pattern: "[\\p{Print}&&[^|:/]]+")
        }

        private enum CodingKeys: String, CodingKey {
            case maxResults = "MaxResults"
            case nextToken = "NextToken"
            case scalingPlanName = "ScalingPlanName"
            case scalingPlanVersion = "ScalingPlanVersion"
        }
    }

    public struct DescribeScalingPlanResourcesResponse: AWSDecodableShape {
        /// The token required to get the next set of results. This value is null if there are no more results to return.
        public let nextToken: String?
        /// Information about the scalable resources.
        public let scalingPlanResources: [ScalingPlanResource]?

        public init(nextToken: String? = nil, scalingPlanResources: [ScalingPlanResource]? = nil) {
            self.nextToken = nextToken
            self.scalingPlanResources = scalingPlanResources
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "NextToken"
            case scalingPlanResources = "ScalingPlanResources"
        }
    }

    public struct DescribeScalingPlansRequest: AWSEncodableShape {
        /// The sources for the applications (up to 10). If you specify scaling plan names, you cannot specify application sources.
        public let applicationSources: [ApplicationSource]?
        /// The maximum number of scalable resources to return. This value can be between 1 and 50. The default value is 50.
        public let maxResults: Int?
        /// The token for the next set of results.
        public let nextToken: String?
        /// The names of the scaling plans (up to 10). If you specify application sources, you cannot specify scaling plan names.
        public let scalingPlanNames: [String]?
        /// The version number of the scaling plan. Currently, the only valid value is 1.  If you specify a scaling plan version, you must also specify a scaling plan name.
        public let scalingPlanVersion: Int64?

        public init(applicationSources: [ApplicationSource]? = nil, maxResults: Int? = nil, nextToken: String? = nil, scalingPlanNames: [String]? = nil, scalingPlanVersion: Int64? = nil) {
            self.applicationSources = applicationSources
            self.maxResults = maxResults
            self.nextToken = nextToken
            self.scalingPlanNames = scalingPlanNames
            self.scalingPlanVersion = scalingPlanVersion
        }

        public func validate(name: String) throws {
            try self.applicationSources?.forEach {
                try $0.validate(name: "\(name).applicationSources[]")
            }
            try self.scalingPlanNames?.forEach {
                try validate($0, name: "scalingPlanNames[]", parent: name, max: 128)
                try validate($0, name: "scalingPlanNames[]", parent: name, min: 1)
                try validate($0, name: "scalingPlanNames[]", parent: name, pattern: "[\\p{Print}&&[^|:/]]+")
            }
        }

        private enum CodingKeys: String, CodingKey {
            case applicationSources = "ApplicationSources"
            case maxResults = "MaxResults"
            case nextToken = "NextToken"
            case scalingPlanNames = "ScalingPlanNames"
            case scalingPlanVersion = "ScalingPlanVersion"
        }
    }

    public struct DescribeScalingPlansResponse: AWSDecodableShape {
        /// The token required to get the next set of results. This value is null if there are no more results to return.
        public let nextToken: String?
        /// Information about the scaling plans.
        public let scalingPlans: [ScalingPlan]?

        public init(nextToken: String? = nil, scalingPlans: [ScalingPlan]? = nil) {
            self.nextToken = nextToken
            self.scalingPlans = scalingPlans
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "NextToken"
            case scalingPlans = "ScalingPlans"
        }
    }

    public struct GetScalingPlanResourceForecastDataRequest: AWSEncodableShape {
        /// The exclusive end time of the time range for the forecast data to get. The maximum time duration between the start and end time is seven days.  Although this parameter can accept a date and time that is more than two days in the future, the availability of forecast data has limits. AWS Auto Scaling only issues forecasts for periods of two days in advance.
        public let endTime: Date
        /// The type of forecast data to get.    LoadForecast: The load metric forecast.     CapacityForecast: The capacity forecast.     ScheduledActionMinCapacity: The minimum capacity for each scheduled scaling action. This data is calculated as the larger of two values: the capacity forecast or the minimum capacity in the scaling instruction.    ScheduledActionMaxCapacity: The maximum capacity for each scheduled scaling action. The calculation used is determined by the predictive scaling maximum capacity behavior setting in the scaling instruction.
        public let forecastDataType: ForecastDataType
        /// The ID of the resource. This string consists of a prefix (autoScalingGroup) followed by the name of a specified Auto Scaling group (my-asg). Example: autoScalingGroup/my-asg.
        public let resourceId: String
        /// The scalable dimension for the resource. The only valid value is autoscaling:autoScalingGroup:DesiredCapacity.
        public let scalableDimension: ScalableDimension
        /// The name of the scaling plan.
        public let scalingPlanName: String
        /// The version number of the scaling plan. Currently, the only valid value is 1.
        public let scalingPlanVersion: Int64
        /// The namespace of the AWS service. The only valid value is autoscaling.
        public let serviceNamespace: ServiceNamespace
        /// The inclusive start time of the time range for the forecast data to get. The date and time can be at most 56 days before the current date and time.
        public let startTime: Date

        public init(endTime: Date, forecastDataType: ForecastDataType, resourceId: String, scalableDimension: ScalableDimension, scalingPlanName: String, scalingPlanVersion: Int64, serviceNamespace: ServiceNamespace, startTime: Date) {
            self.endTime = endTime
            self.forecastDataType = forecastDataType
            self.resourceId = resourceId
            self.scalableDimension = scalableDimension
            self.scalingPlanName = scalingPlanName
            self.scalingPlanVersion = scalingPlanVersion
            self.serviceNamespace = serviceNamespace
            self.startTime = startTime
        }

        public func validate(name: String) throws {
            try self.validate(self.resourceId, name: "resourceId", parent: name, pattern: "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\r\\n\\t]*")
            try self.validate(self.scalingPlanName, name: "scalingPlanName", parent: name, max: 128)
            try self.validate(self.scalingPlanName, name: "scalingPlanName", parent: name, min: 1)
            try self.validate(self.scalingPlanName, name: "scalingPlanName", parent: name, pattern: "[\\p{Print}&&[^|:/]]+")
        }

        private enum CodingKeys: String, CodingKey {
            case endTime = "EndTime"
            case forecastDataType = "ForecastDataType"
            case resourceId = "ResourceId"
            case scalableDimension = "ScalableDimension"
            case scalingPlanName = "ScalingPlanName"
            case scalingPlanVersion = "ScalingPlanVersion"
            case serviceNamespace = "ServiceNamespace"
            case startTime = "StartTime"
        }
    }

    public struct GetScalingPlanResourceForecastDataResponse: AWSDecodableShape {
        /// The data points to return.
        public let datapoints: [Datapoint]

        public init(datapoints: [Datapoint]) {
            self.datapoints = datapoints
        }

        private enum CodingKeys: String, CodingKey {
            case datapoints = "Datapoints"
        }
    }

    public struct MetricDimension: AWSEncodableShape & AWSDecodableShape {
        /// The name of the dimension.
        public let name: String
        /// The value of the dimension.
        public let value: String

        public init(name: String, value: String) {
            self.name = name
            self.value = value
        }

        private enum CodingKeys: String, CodingKey {
            case name = "Name"
            case value = "Value"
        }
    }

    public struct PredefinedLoadMetricSpecification: AWSEncodableShape & AWSDecodableShape {
        /// The metric type.
        public let predefinedLoadMetricType: LoadMetricType
        /// Identifies the resource associated with the metric type. You can't specify a resource label unless the metric type is ALBTargetGroupRequestCount and there is a target group for an Application Load Balancer attached to the Auto Scaling group. You create the resource label by appending the final portion of the load balancer ARN and the final portion of the target group ARN into a single value, separated by a forward slash (/). The format is app///targetgroup//, where:   app// is the final portion of the load balancer ARN   targetgroup// is the final portion of the target group ARN.   This is an example: app/EC2Co-EcsEl-1TKLTMITMM0EO/f37c06a68c1748aa/targetgroup/EC2Co-Defau-LDNM7Q3ZH1ZN/6d4ea56ca2d6a18d. To find the ARN for an Application Load Balancer, use the DescribeLoadBalancers API operation. To find the ARN for the target group, use the DescribeTargetGroups API operation.
        public let resourceLabel: String?

        public init(predefinedLoadMetricType: LoadMetricType, resourceLabel: String? = nil) {
            self.predefinedLoadMetricType = predefinedLoadMetricType
            self.resourceLabel = resourceLabel
        }

        public func validate(name: String) throws {
            try self.validate(self.resourceLabel, name: "resourceLabel", parent: name, max: 1023)
            try self.validate(self.resourceLabel, name: "resourceLabel", parent: name, min: 1)
        }

        private enum CodingKeys: String, CodingKey {
            case predefinedLoadMetricType = "PredefinedLoadMetricType"
            case resourceLabel = "ResourceLabel"
        }
    }

    public struct PredefinedScalingMetricSpecification: AWSEncodableShape & AWSDecodableShape {
        /// The metric type. The ALBRequestCountPerTarget metric type applies only to Auto Scaling groups, Spot Fleet requests, and ECS services.
        public let predefinedScalingMetricType: ScalingMetricType
        /// Identifies the resource associated with the metric type. You can't specify a resource label unless the metric type is ALBRequestCountPerTarget and there is a target group for an Application Load Balancer attached to the Auto Scaling group, Spot Fleet request, or ECS service. You create the resource label by appending the final portion of the load balancer ARN and the final portion of the target group ARN into a single value, separated by a forward slash (/). The format is app///targetgroup//, where:   app// is the final portion of the load balancer ARN   targetgroup// is the final portion of the target group ARN.   This is an example: app/EC2Co-EcsEl-1TKLTMITMM0EO/f37c06a68c1748aa/targetgroup/EC2Co-Defau-LDNM7Q3ZH1ZN/6d4ea56ca2d6a18d. To find the ARN for an Application Load Balancer, use the DescribeLoadBalancers API operation. To find the ARN for the target group, use the DescribeTargetGroups API operation.
        public let resourceLabel: String?

        public init(predefinedScalingMetricType: ScalingMetricType, resourceLabel: String? = nil) {
            self.predefinedScalingMetricType = predefinedScalingMetricType
            self.resourceLabel = resourceLabel
        }

        public func validate(name: String) throws {
            try self.validate(self.resourceLabel, name: "resourceLabel", parent: name, max: 1023)
            try self.validate(self.resourceLabel, name: "resourceLabel", parent: name, min: 1)
        }

        private enum CodingKeys: String, CodingKey {
            case predefinedScalingMetricType = "PredefinedScalingMetricType"
            case resourceLabel = "ResourceLabel"
        }
    }

    public struct ScalingInstruction: AWSEncodableShape & AWSDecodableShape {
        /// The customized load metric to use for predictive scaling. This parameter or a PredefinedLoadMetricSpecification is required when configuring predictive scaling, and cannot be used otherwise.
        public let customizedLoadMetricSpecification: CustomizedLoadMetricSpecification?
        /// Controls whether dynamic scaling by AWS Auto Scaling is disabled. When dynamic scaling is enabled, AWS Auto Scaling creates target tracking scaling policies based on the specified target tracking configurations.  The default is enabled (false).
        public let disableDynamicScaling: Bool?
        /// The maximum capacity of the resource. The exception to this upper limit is if you specify a non-default setting for PredictiveScalingMaxCapacityBehavior.
        public let maxCapacity: Int
        /// The minimum capacity of the resource.
        public let minCapacity: Int
        /// The predefined load metric to use for predictive scaling. This parameter or a CustomizedLoadMetricSpecification is required when configuring predictive scaling, and cannot be used otherwise.
        public let predefinedLoadMetricSpecification: PredefinedLoadMetricSpecification?
        /// Defines the behavior that should be applied if the forecast capacity approaches or exceeds the maximum capacity specified for the resource. The default value is SetForecastCapacityToMaxCapacity. The following are possible values:    SetForecastCapacityToMaxCapacity - AWS Auto Scaling cannot scale resource capacity higher than the maximum capacity. The maximum capacity is enforced as a hard limit.     SetMaxCapacityToForecastCapacity - AWS Auto Scaling may scale resource capacity higher than the maximum capacity to equal but not exceed forecast capacity.    SetMaxCapacityAboveForecastCapacity - AWS Auto Scaling may scale resource capacity higher than the maximum capacity by a specified buffer value. The intention is to give the target tracking scaling policy extra capacity if unexpected traffic occurs.    Only valid when configuring predictive scaling.
        public let predictiveScalingMaxCapacityBehavior: PredictiveScalingMaxCapacityBehavior?
        /// The size of the capacity buffer to use when the forecast capacity is close to or exceeds the maximum capacity. The value is specified as a percentage relative to the forecast capacity. For example, if the buffer is 10, this means a 10 percent buffer, such that if the forecast capacity is 50, and the maximum capacity is 40, then the effective maximum capacity is 55. Only valid when configuring predictive scaling. Required if the PredictiveScalingMaxCapacityBehavior is set to SetMaxCapacityAboveForecastCapacity, and cannot be used otherwise. The range is 1-100.
        public let predictiveScalingMaxCapacityBuffer: Int?
        /// The predictive scaling mode. The default value is ForecastAndScale. Otherwise, AWS Auto Scaling forecasts capacity but does not create any scheduled scaling actions based on the capacity forecast.
        public let predictiveScalingMode: PredictiveScalingMode?
        /// The ID of the resource. This string consists of the resource type and unique identifier.    Auto Scaling group - The resource type is autoScalingGroup and the unique identifier is the name of the Auto Scaling group. Example: autoScalingGroup/my-asg.   ECS service - The resource type is service and the unique identifier is the cluster name   and service name. Example: service/default/sample-webapp.   Spot Fleet request - The resource type is spot-fleet-request and the unique identifier is the  Spot Fleet request ID. Example: spot-fleet-request/sfr-73fbd2ce-aa30-494c-8788-1cee4EXAMPLE.   DynamoDB table - The resource type is table and the unique identifier is the resource ID.  Example: table/my-table.   DynamoDB global secondary index - The resource type is index and the unique identifier is the resource ID.  Example: table/my-table/index/my-table-index.   Aurora DB cluster - The resource type is cluster and the unique identifier is the cluster name. Example: cluster:my-db-cluster.
        public let resourceId: String
        /// The scalable dimension associated with the resource.     autoscaling:autoScalingGroup:DesiredCapacity - The desired capacity of an Auto Scaling group.    ecs:service:DesiredCount - The desired task count of an ECS service.    ec2:spot-fleet-request:TargetCapacity - The target capacity of a Spot Fleet request.    dynamodb:table:ReadCapacityUnits - The provisioned read capacity for a DynamoDB table.    dynamodb:table:WriteCapacityUnits - The provisioned write capacity for a DynamoDB table.    dynamodb:index:ReadCapacityUnits - The provisioned read capacity for a DynamoDB global secondary index.    dynamodb:index:WriteCapacityUnits - The provisioned write capacity for a DynamoDB global secondary index.    rds:cluster:ReadReplicaCount - The count of Aurora Replicas in an Aurora DB cluster. Available for Aurora MySQL-compatible edition and Aurora PostgreSQL-compatible edition.
        public let scalableDimension: ScalableDimension
        /// Controls whether a resource's externally created scaling policies are kept or replaced.  The default value is KeepExternalPolicies. If the parameter is set to ReplaceExternalPolicies, any scaling policies that are external to AWS Auto Scaling are deleted and new target tracking scaling policies created.  Only valid when configuring dynamic scaling.  Condition: The number of existing policies to be replaced must be less than or equal to 50. If there are more than 50 policies to be replaced, AWS Auto Scaling keeps all existing policies and does not create new ones.
        public let scalingPolicyUpdateBehavior: ScalingPolicyUpdateBehavior?
        /// The amount of time, in seconds, to buffer the run time of scheduled scaling actions when scaling out. For example, if the forecast says to add capacity at 10:00 AM, and the buffer time is 5 minutes, then the run time of the corresponding scheduled scaling action will be 9:55 AM. The intention is to give resources time to be provisioned. For example, it can take a few minutes to launch an EC2 instance. The actual amount of time required depends on several factors, such as the size of the instance and whether there are startup scripts to complete.  The value must be less than the forecast interval duration of 3600 seconds (60 minutes). The default is 300 seconds.  Only valid when configuring predictive scaling.
        public let scheduledActionBufferTime: Int?
        /// The namespace of the AWS service.
        public let serviceNamespace: ServiceNamespace
        /// The target tracking configurations (up to 10). Each of these structures must specify a unique scaling metric and a target value for the metric.
        public let targetTrackingConfigurations: [TargetTrackingConfiguration]

        public init(customizedLoadMetricSpecification: CustomizedLoadMetricSpecification? = nil, disableDynamicScaling: Bool? = nil, maxCapacity: Int, minCapacity: Int, predefinedLoadMetricSpecification: PredefinedLoadMetricSpecification? = nil, predictiveScalingMaxCapacityBehavior: PredictiveScalingMaxCapacityBehavior? = nil, predictiveScalingMaxCapacityBuffer: Int? = nil, predictiveScalingMode: PredictiveScalingMode? = nil, resourceId: String, scalableDimension: ScalableDimension, scalingPolicyUpdateBehavior: ScalingPolicyUpdateBehavior? = nil, scheduledActionBufferTime: Int? = nil, serviceNamespace: ServiceNamespace, targetTrackingConfigurations: [TargetTrackingConfiguration]) {
            self.customizedLoadMetricSpecification = customizedLoadMetricSpecification
            self.disableDynamicScaling = disableDynamicScaling
            self.maxCapacity = maxCapacity
            self.minCapacity = minCapacity
            self.predefinedLoadMetricSpecification = predefinedLoadMetricSpecification
            self.predictiveScalingMaxCapacityBehavior = predictiveScalingMaxCapacityBehavior
            self.predictiveScalingMaxCapacityBuffer = predictiveScalingMaxCapacityBuffer
            self.predictiveScalingMode = predictiveScalingMode
            self.resourceId = resourceId
            self.scalableDimension = scalableDimension
            self.scalingPolicyUpdateBehavior = scalingPolicyUpdateBehavior
            self.scheduledActionBufferTime = scheduledActionBufferTime
            self.serviceNamespace = serviceNamespace
            self.targetTrackingConfigurations = targetTrackingConfigurations
        }

        public func validate(name: String) throws {
            try self.predefinedLoadMetricSpecification?.validate(name: "\(name).predefinedLoadMetricSpecification")
            try self.validate(self.resourceId, name: "resourceId", parent: name, max: 1600)
            try self.validate(self.resourceId, name: "resourceId", parent: name, min: 1)
            try self.validate(self.resourceId, name: "resourceId", parent: name, pattern: "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\r\\n\\t]*")
            try self.validate(self.scheduledActionBufferTime, name: "scheduledActionBufferTime", parent: name, min: 0)
            try self.targetTrackingConfigurations.forEach {
                try $0.validate(name: "\(name).targetTrackingConfigurations[]")
            }
        }

        private enum CodingKeys: String, CodingKey {
            case customizedLoadMetricSpecification = "CustomizedLoadMetricSpecification"
            case disableDynamicScaling = "DisableDynamicScaling"
            case maxCapacity = "MaxCapacity"
            case minCapacity = "MinCapacity"
            case predefinedLoadMetricSpecification = "PredefinedLoadMetricSpecification"
            case predictiveScalingMaxCapacityBehavior = "PredictiveScalingMaxCapacityBehavior"
            case predictiveScalingMaxCapacityBuffer = "PredictiveScalingMaxCapacityBuffer"
            case predictiveScalingMode = "PredictiveScalingMode"
            case resourceId = "ResourceId"
            case scalableDimension = "ScalableDimension"
            case scalingPolicyUpdateBehavior = "ScalingPolicyUpdateBehavior"
            case scheduledActionBufferTime = "ScheduledActionBufferTime"
            case serviceNamespace = "ServiceNamespace"
            case targetTrackingConfigurations = "TargetTrackingConfigurations"
        }
    }

    public struct ScalingPlan: AWSDecodableShape {
        /// A CloudFormation stack or a set of tags. You can create one scaling plan per application source.
        public let applicationSource: ApplicationSource
        /// The Unix time stamp when the scaling plan was created.
        public let creationTime: Date?
        /// The scaling instructions.
        public let scalingInstructions: [ScalingInstruction]
        /// The name of the scaling plan.
        public let scalingPlanName: String
        /// The version number of the scaling plan.
        public let scalingPlanVersion: Int64
        /// The status of the scaling plan.    Active - The scaling plan is active.    ActiveWithProblems - The scaling plan is active, but the scaling configuration for one or more resources could not be applied.    CreationInProgress - The scaling plan is being created.    CreationFailed - The scaling plan could not be created.    DeletionInProgress - The scaling plan is being deleted.    DeletionFailed - The scaling plan could not be deleted.    UpdateInProgress - The scaling plan is being updated.    UpdateFailed - The scaling plan could not be updated.
        public let statusCode: ScalingPlanStatusCode
        /// A simple message about the current status of the scaling plan.
        public let statusMessage: String?
        /// The Unix time stamp when the scaling plan entered the current status.
        public let statusStartTime: Date?

        public init(applicationSource: ApplicationSource, creationTime: Date? = nil, scalingInstructions: [ScalingInstruction], scalingPlanName: String, scalingPlanVersion: Int64, statusCode: ScalingPlanStatusCode, statusMessage: String? = nil, statusStartTime: Date? = nil) {
            self.applicationSource = applicationSource
            self.creationTime = creationTime
            self.scalingInstructions = scalingInstructions
            self.scalingPlanName = scalingPlanName
            self.scalingPlanVersion = scalingPlanVersion
            self.statusCode = statusCode
            self.statusMessage = statusMessage
            self.statusStartTime = statusStartTime
        }

        private enum CodingKeys: String, CodingKey {
            case applicationSource = "ApplicationSource"
            case creationTime = "CreationTime"
            case scalingInstructions = "ScalingInstructions"
            case scalingPlanName = "ScalingPlanName"
            case scalingPlanVersion = "ScalingPlanVersion"
            case statusCode = "StatusCode"
            case statusMessage = "StatusMessage"
            case statusStartTime = "StatusStartTime"
        }
    }

    public struct ScalingPlanResource: AWSDecodableShape {
        /// The ID of the resource. This string consists of the resource type and unique identifier.    Auto Scaling group - The resource type is autoScalingGroup and the unique identifier is the name of the Auto Scaling group. Example: autoScalingGroup/my-asg.   ECS service - The resource type is service and the unique identifier is the cluster name   and service name. Example: service/default/sample-webapp.   Spot Fleet request - The resource type is spot-fleet-request and the unique identifier is the  Spot Fleet request ID. Example: spot-fleet-request/sfr-73fbd2ce-aa30-494c-8788-1cee4EXAMPLE.   DynamoDB table - The resource type is table and the unique identifier is the resource ID.  Example: table/my-table.   DynamoDB global secondary index - The resource type is index and the unique identifier is the resource ID.  Example: table/my-table/index/my-table-index.   Aurora DB cluster - The resource type is cluster and the unique identifier is the cluster name. Example: cluster:my-db-cluster.
        public let resourceId: String
        /// The scalable dimension for the resource.     autoscaling:autoScalingGroup:DesiredCapacity - The desired capacity of an Auto Scaling group.    ecs:service:DesiredCount - The desired task count of an ECS service.    ec2:spot-fleet-request:TargetCapacity - The target capacity of a Spot Fleet request.    dynamodb:table:ReadCapacityUnits - The provisioned read capacity for a DynamoDB table.    dynamodb:table:WriteCapacityUnits - The provisioned write capacity for a DynamoDB table.    dynamodb:index:ReadCapacityUnits - The provisioned read capacity for a DynamoDB global secondary index.    dynamodb:index:WriteCapacityUnits - The provisioned write capacity for a DynamoDB global secondary index.    rds:cluster:ReadReplicaCount - The count of Aurora Replicas in an Aurora DB cluster. Available for Aurora MySQL-compatible edition and Aurora PostgreSQL-compatible edition.
        public let scalableDimension: ScalableDimension
        /// The name of the scaling plan.
        public let scalingPlanName: String
        /// The version number of the scaling plan.
        public let scalingPlanVersion: Int64
        /// The scaling policies.
        public let scalingPolicies: [ScalingPolicy]?
        /// The scaling status of the resource.    Active - The scaling configuration is active.    Inactive - The scaling configuration is not active because the scaling plan is being created or the scaling configuration could not be applied. Check the status message for more information.    PartiallyActive - The scaling configuration is partially active because the scaling plan is being created or deleted or the scaling configuration could not be fully applied. Check the status message for more information.
        public let scalingStatusCode: ScalingStatusCode
        /// A simple message about the current scaling status of the resource.
        public let scalingStatusMessage: String?
        /// The namespace of the AWS service.
        public let serviceNamespace: ServiceNamespace

        public init(resourceId: String, scalableDimension: ScalableDimension, scalingPlanName: String, scalingPlanVersion: Int64, scalingPolicies: [ScalingPolicy]? = nil, scalingStatusCode: ScalingStatusCode, scalingStatusMessage: String? = nil, serviceNamespace: ServiceNamespace) {
            self.resourceId = resourceId
            self.scalableDimension = scalableDimension
            self.scalingPlanName = scalingPlanName
            self.scalingPlanVersion = scalingPlanVersion
            self.scalingPolicies = scalingPolicies
            self.scalingStatusCode = scalingStatusCode
            self.scalingStatusMessage = scalingStatusMessage
            self.serviceNamespace = serviceNamespace
        }

        private enum CodingKeys: String, CodingKey {
            case resourceId = "ResourceId"
            case scalableDimension = "ScalableDimension"
            case scalingPlanName = "ScalingPlanName"
            case scalingPlanVersion = "ScalingPlanVersion"
            case scalingPolicies = "ScalingPolicies"
            case scalingStatusCode = "ScalingStatusCode"
            case scalingStatusMessage = "ScalingStatusMessage"
            case serviceNamespace = "ServiceNamespace"
        }
    }

    public struct ScalingPolicy: AWSDecodableShape {
        /// The name of the scaling policy.
        public let policyName: String
        /// The type of scaling policy.
        public let policyType: PolicyType
        /// The target tracking scaling policy. Includes support for predefined or customized metrics.
        public let targetTrackingConfiguration: TargetTrackingConfiguration?

        public init(policyName: String, policyType: PolicyType, targetTrackingConfiguration: TargetTrackingConfiguration? = nil) {
            self.policyName = policyName
            self.policyType = policyType
            self.targetTrackingConfiguration = targetTrackingConfiguration
        }

        private enum CodingKeys: String, CodingKey {
            case policyName = "PolicyName"
            case policyType = "PolicyType"
            case targetTrackingConfiguration = "TargetTrackingConfiguration"
        }
    }

    public struct TagFilter: AWSEncodableShape & AWSDecodableShape {
        /// The tag key.
        public let key: String?
        /// The tag values (0 to 20).
        public let values: [String]?

        public init(key: String? = nil, values: [String]? = nil) {
            self.key = key
            self.values = values
        }

        public func validate(name: String) throws {
            try self.validate(self.key, name: "key", parent: name, max: 128)
            try self.validate(self.key, name: "key", parent: name, min: 1)
            try self.validate(self.key, name: "key", parent: name, pattern: "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\r\\n\\t]*")
            try self.values?.forEach {
                try validate($0, name: "values[]", parent: name, max: 256)
                try validate($0, name: "values[]", parent: name, min: 1)
                try validate($0, name: "values[]", parent: name, pattern: "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\r\\n\\t]*")
            }
        }

        private enum CodingKeys: String, CodingKey {
            case key = "Key"
            case values = "Values"
        }
    }

    public struct TargetTrackingConfiguration: AWSEncodableShape & AWSDecodableShape {
        /// A customized metric. You can specify either a predefined metric or a customized metric.
        public let customizedScalingMetricSpecification: CustomizedScalingMetricSpecification?
        /// Indicates whether scale in by the target tracking scaling policy is disabled. If the value is true, scale in is disabled and the target tracking scaling policy doesn't remove capacity from the scalable resource. Otherwise, scale in is enabled and the target tracking scaling policy can remove capacity from the scalable resource.  The default value is false.
        public let disableScaleIn: Bool?
        /// The estimated time, in seconds, until a newly launched instance can contribute to the CloudWatch metrics. This value is used only if the resource is an Auto Scaling group.
        public let estimatedInstanceWarmup: Int?
        /// A predefined metric. You can specify either a predefined metric or a customized metric.
        public let predefinedScalingMetricSpecification: PredefinedScalingMetricSpecification?
        /// The amount of time, in seconds, after a scale-in activity completes before another scale-in activity can start. This property is not used if the scalable resource is an Auto Scaling group. With the scale-in cooldown period, the intention is to scale in conservatively to protect your application’s availability, so scale-in activities are blocked until the cooldown period has expired. However, if another alarm triggers a scale-out activity during the scale-in cooldown period, Auto Scaling scales out the target immediately. In this case, the scale-in cooldown period stops and doesn't complete.
        public let scaleInCooldown: Int?
        /// The amount of time, in seconds, to wait for a previous scale-out activity to take effect. This property is not used if the scalable resource is an Auto Scaling group. With the scale-out cooldown period, the intention is to continuously (but not excessively) scale out. After Auto Scaling successfully scales out using a target tracking scaling policy, it starts to calculate the cooldown time. The scaling policy won't increase the desired capacity again unless either a larger scale out is triggered or the cooldown period ends.
        public let scaleOutCooldown: Int?
        /// The target value for the metric. Although this property accepts numbers of type Double, it won't accept values that are either too small or too large. Values must be in the range of -2^360 to 2^360.
        public let targetValue: Double

        public init(customizedScalingMetricSpecification: CustomizedScalingMetricSpecification? = nil, disableScaleIn: Bool? = nil, estimatedInstanceWarmup: Int? = nil, predefinedScalingMetricSpecification: PredefinedScalingMetricSpecification? = nil, scaleInCooldown: Int? = nil, scaleOutCooldown: Int? = nil, targetValue: Double) {
            self.customizedScalingMetricSpecification = customizedScalingMetricSpecification
            self.disableScaleIn = disableScaleIn
            self.estimatedInstanceWarmup = estimatedInstanceWarmup
            self.predefinedScalingMetricSpecification = predefinedScalingMetricSpecification
            self.scaleInCooldown = scaleInCooldown
            self.scaleOutCooldown = scaleOutCooldown
            self.targetValue = targetValue
        }

        public func validate(name: String) throws {
            try self.predefinedScalingMetricSpecification?.validate(name: "\(name).predefinedScalingMetricSpecification")
        }

        private enum CodingKeys: String, CodingKey {
            case customizedScalingMetricSpecification = "CustomizedScalingMetricSpecification"
            case disableScaleIn = "DisableScaleIn"
            case estimatedInstanceWarmup = "EstimatedInstanceWarmup"
            case predefinedScalingMetricSpecification = "PredefinedScalingMetricSpecification"
            case scaleInCooldown = "ScaleInCooldown"
            case scaleOutCooldown = "ScaleOutCooldown"
            case targetValue = "TargetValue"
        }
    }

    public struct UpdateScalingPlanRequest: AWSEncodableShape {
        /// A CloudFormation stack or set of tags. For more information, see ApplicationSource in the AWS Auto Scaling API Reference.
        public let applicationSource: ApplicationSource?
        /// The scaling instructions. For more information, see ScalingInstruction in the AWS Auto Scaling API Reference.
        public let scalingInstructions: [ScalingInstruction]?
        /// The name of the scaling plan.
        public let scalingPlanName: String
        /// The version number of the scaling plan. The only valid value is 1. Currently, you cannot have multiple scaling plan versions.
        public let scalingPlanVersion: Int64

        public init(applicationSource: ApplicationSource? = nil, scalingInstructions: [ScalingInstruction]? = nil, scalingPlanName: String, scalingPlanVersion: Int64) {
            self.applicationSource = applicationSource
            self.scalingInstructions = scalingInstructions
            self.scalingPlanName = scalingPlanName
            self.scalingPlanVersion = scalingPlanVersion
        }

        public func validate(name: String) throws {
            try self.applicationSource?.validate(name: "\(name).applicationSource")
            try self.scalingInstructions?.forEach {
                try $0.validate(name: "\(name).scalingInstructions[]")
            }
            try self.validate(self.scalingPlanName, name: "scalingPlanName", parent: name, max: 128)
            try self.validate(self.scalingPlanName, name: "scalingPlanName", parent: name, min: 1)
            try self.validate(self.scalingPlanName, name: "scalingPlanName", parent: name, pattern: "[\\p{Print}&&[^|:/]]+")
        }

        private enum CodingKeys: String, CodingKey {
            case applicationSource = "ApplicationSource"
            case scalingInstructions = "ScalingInstructions"
            case scalingPlanName = "ScalingPlanName"
            case scalingPlanVersion = "ScalingPlanVersion"
        }
    }

    public struct UpdateScalingPlanResponse: AWSDecodableShape {
        public init() {}
    }
}
