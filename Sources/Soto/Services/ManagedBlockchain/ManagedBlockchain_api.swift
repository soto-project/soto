//===----------------------------------------------------------------------===//
//
// This source file is part of the Soto for AWS open source project
//
// Copyright (c) 2017-2024 the Soto project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
// See CONTRIBUTORS.txt for the list of Soto project authors
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by https://github.com/soto-project/soto-codegenerator.
// DO NOT EDIT.

#if canImport(FoundationEssentials)
import FoundationEssentials
#else
import Foundation
#endif
@_exported import SotoCore

/// Service object for interacting with AWS ManagedBlockchain service.
///
///  Amazon Managed Blockchain is a fully managed service for creating and managing blockchain networks using open-source frameworks. Blockchain allows you to build applications where multiple parties can securely and transparently run transactions and share data without the need for a trusted, central authority. Managed Blockchain supports the Hyperledger Fabric and Ethereum open-source frameworks. Because of fundamental differences between the frameworks, some API actions or data types may only apply in the context of one framework and not the other. For example, actions related to Hyperledger Fabric network members such as CreateMember and DeleteMember don't apply to Ethereum. The description for each action indicates the framework or frameworks to which it applies. Data types and properties that apply only in the context of a particular framework are similarly indicated.
public struct ManagedBlockchain: AWSService {
    // MARK: Member variables

    /// Client used for communication with AWS
    public let client: AWSClient
    /// Service configuration
    public let config: AWSServiceConfig

    // MARK: Initialization

    /// Initialize the ManagedBlockchain client
    /// - parameters:
    ///     - client: AWSClient used to process requests
    ///     - region: Region of server you want to communicate with. This will override the partition parameter.
    ///     - partition: AWS partition where service resides, standard (.aws), china (.awscn), government (.awsusgov).
    ///     - endpoint: Custom endpoint URL to use instead of standard AWS servers
    ///     - middleware: Middleware chain used to edit requests before they are sent and responses before they are decoded 
    ///     - timeout: Timeout value for HTTP requests
    ///     - byteBufferAllocator: Allocator for ByteBuffers
    ///     - options: Service options
    public init(
        client: AWSClient,
        region: SotoCore.Region? = nil,
        partition: AWSPartition = .aws,
        endpoint: String? = nil,
        middleware: AWSMiddlewareProtocol? = nil,
        timeout: TimeAmount? = nil,
        byteBufferAllocator: ByteBufferAllocator = ByteBufferAllocator(),
        options: AWSServiceConfig.Options = []
    ) {
        self.client = client
        self.config = AWSServiceConfig(
            region: region,
            partition: region?.partition ?? partition,
            serviceName: "ManagedBlockchain",
            serviceIdentifier: "managedblockchain",
            serviceProtocol: .restjson,
            apiVersion: "2018-09-24",
            endpoint: endpoint,
            errorType: ManagedBlockchainErrorType.self,
            middleware: middleware,
            timeout: timeout,
            byteBufferAllocator: byteBufferAllocator,
            options: options
        )
    }





    // MARK: API Calls

    /// Creates a new accessor for use with Amazon Managed Blockchain service that supports token based access.  The accessor contains information required for token based access.
    @Sendable
    @inlinable
    public func createAccessor(_ input: CreateAccessorInput, logger: Logger = AWSClient.loggingDisabled) async throws -> CreateAccessorOutput {
        try await self.client.execute(
            operation: "CreateAccessor", 
            path: "/accessors", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Creates a new accessor for use with Amazon Managed Blockchain service that supports token based access.  The accessor contains information required for token based access.
    ///
    /// Parameters:
    ///   - accessorType: The type of accessor.  Currently, accessor type is restricted to BILLING_TOKEN.
    ///   - clientRequestToken: This is a unique, case-sensitive identifier that you provide to ensure the idempotency of  the operation. An idempotent operation completes no more than once. This  identifier is required only if you make a service request directly using  an HTTP client. It is generated automatically if you use an Amazon Web Services SDK or the  Amazon Web Services CLI.
    ///   - networkType: The blockchain network that the Accessor token is created for.    Use the actual networkType value for the blockchain network that you are creating  the Accessor token for.   With the shut down of the Ethereum Goerli and Polygon Mumbai  Testnet networks the following networkType values are no longer available  for selection and use.    ETHEREUM_MAINNET_AND_GOERLI     ETHEREUM_GOERLI     POLYGON_MUMBAI    However, your existing Accessor tokens with these networkType  values will remain unchanged.
    ///   - tags: Tags to assign to the Accessor. Each tag consists of a key and an optional value. You can specify  multiple key-value pairs in a single request with an overall maximum of 50 tags  allowed per resource. For more information about tags, see Tagging Resources in the Amazon Managed Blockchain Ethereum Developer Guide, or Tagging Resources in the Amazon Managed Blockchain Hyperledger Fabric Developer Guide.
    ///   - logger: Logger use during operation
    @inlinable
    public func createAccessor(
        accessorType: AccessorType,
        clientRequestToken: String = CreateAccessorInput.idempotencyToken(),
        networkType: AccessorNetworkType? = nil,
        tags: [String: String]? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> CreateAccessorOutput {
        let input = CreateAccessorInput(
            accessorType: accessorType, 
            clientRequestToken: clientRequestToken, 
            networkType: networkType, 
            tags: tags
        )
        return try await self.createAccessor(input, logger: logger)
    }

    /// Creates a member within a Managed Blockchain network. Applies only to Hyperledger Fabric.
    @Sendable
    @inlinable
    public func createMember(_ input: CreateMemberInput, logger: Logger = AWSClient.loggingDisabled) async throws -> CreateMemberOutput {
        try await self.client.execute(
            operation: "CreateMember", 
            path: "/networks/{NetworkId}/members", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Creates a member within a Managed Blockchain network. Applies only to Hyperledger Fabric.
    ///
    /// Parameters:
    ///   - clientRequestToken: A unique, case-sensitive identifier that you provide to ensure the idempotency of the operation. An idempotent operation completes no more than one time. This identifier is required only if you make a service request directly using an HTTP client. It is generated automatically if you use an Amazon Web Services SDK or the CLI.
    ///   - invitationId: The unique identifier of the invitation that is sent to the member to join the network.
    ///   - memberConfiguration: Member configuration parameters.
    ///   - networkId: The unique identifier of the network in which the member is created.
    ///   - logger: Logger use during operation
    @inlinable
    public func createMember(
        clientRequestToken: String = CreateMemberInput.idempotencyToken(),
        invitationId: String,
        memberConfiguration: MemberConfiguration,
        networkId: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> CreateMemberOutput {
        let input = CreateMemberInput(
            clientRequestToken: clientRequestToken, 
            invitationId: invitationId, 
            memberConfiguration: memberConfiguration, 
            networkId: networkId
        )
        return try await self.createMember(input, logger: logger)
    }

    /// Creates a new blockchain network using Amazon Managed Blockchain. Applies only to Hyperledger Fabric.
    @Sendable
    @inlinable
    public func createNetwork(_ input: CreateNetworkInput, logger: Logger = AWSClient.loggingDisabled) async throws -> CreateNetworkOutput {
        try await self.client.execute(
            operation: "CreateNetwork", 
            path: "/networks", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Creates a new blockchain network using Amazon Managed Blockchain. Applies only to Hyperledger Fabric.
    ///
    /// Parameters:
    ///   - clientRequestToken: This is a unique, case-sensitive identifier that you provide to ensure the idempotency of the operation. An idempotent operation completes no more than once. This identifier is required only  if you make a service request directly using an HTTP client. It is generated automatically if you  use an Amazon Web Services SDK or the Amazon Web Services CLI.
    ///   - description: An optional description for the network.
    ///   - framework: The blockchain framework that the network uses.
    ///   - frameworkConfiguration:  Configuration properties of the blockchain framework relevant to the network configuration.
    ///   - frameworkVersion: The version of the blockchain framework that the network uses.
    ///   - memberConfiguration: Configuration properties for the first member within the network.
    ///   - name: The name of the network.
    ///   - tags: Tags to assign to the network. Each tag consists of a key and an optional value. You can specify  multiple key-value pairs in a single request with an overall maximum of 50 tags  allowed per resource. For more information about tags, see Tagging Resources in the Amazon Managed Blockchain Ethereum Developer Guide, or Tagging Resources in the Amazon Managed Blockchain Hyperledger Fabric Developer Guide.
    ///   - votingPolicy:  The voting rules used by the network to determine if a proposal is approved.
    ///   - logger: Logger use during operation
    @inlinable
    public func createNetwork(
        clientRequestToken: String = CreateNetworkInput.idempotencyToken(),
        description: String? = nil,
        framework: Framework,
        frameworkConfiguration: NetworkFrameworkConfiguration? = nil,
        frameworkVersion: String,
        memberConfiguration: MemberConfiguration,
        name: String,
        tags: [String: String]? = nil,
        votingPolicy: VotingPolicy,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> CreateNetworkOutput {
        let input = CreateNetworkInput(
            clientRequestToken: clientRequestToken, 
            description: description, 
            framework: framework, 
            frameworkConfiguration: frameworkConfiguration, 
            frameworkVersion: frameworkVersion, 
            memberConfiguration: memberConfiguration, 
            name: name, 
            tags: tags, 
            votingPolicy: votingPolicy
        )
        return try await self.createNetwork(input, logger: logger)
    }

    /// Creates a node on the specified blockchain network. Applies to Hyperledger Fabric and Ethereum.
    @Sendable
    @inlinable
    public func createNode(_ input: CreateNodeInput, logger: Logger = AWSClient.loggingDisabled) async throws -> CreateNodeOutput {
        try await self.client.execute(
            operation: "CreateNode", 
            path: "/networks/{NetworkId}/nodes", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Creates a node on the specified blockchain network. Applies to Hyperledger Fabric and Ethereum.
    ///
    /// Parameters:
    ///   - clientRequestToken: A unique, case-sensitive identifier that you provide to ensure the idempotency of the operation. An idempotent operation completes no more than one time. This identifier is required only if you make a service request directly using an HTTP client. It is generated automatically if you use an Amazon Web Services SDK or the CLI.
    ///   - memberId: The unique identifier of the member that owns this node. Applies only to Hyperledger Fabric.
    ///   - networkId: The unique identifier of the network for the node. Ethereum public networks have the following NetworkIds:    n-ethereum-mainnet
    ///   - nodeConfiguration: The properties of a node configuration.
    ///   - tags: Tags to assign to the node. Each tag consists of a key and an optional value. You can specify  multiple key-value pairs in a single request with an overall maximum of 50 tags  allowed per resource. For more information about tags, see Tagging Resources in the Amazon Managed Blockchain Ethereum Developer Guide, or Tagging Resources in the Amazon Managed Blockchain Hyperledger Fabric Developer Guide.
    ///   - logger: Logger use during operation
    @inlinable
    public func createNode(
        clientRequestToken: String = CreateNodeInput.idempotencyToken(),
        memberId: String? = nil,
        networkId: String,
        nodeConfiguration: NodeConfiguration,
        tags: [String: String]? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> CreateNodeOutput {
        let input = CreateNodeInput(
            clientRequestToken: clientRequestToken, 
            memberId: memberId, 
            networkId: networkId, 
            nodeConfiguration: nodeConfiguration, 
            tags: tags
        )
        return try await self.createNode(input, logger: logger)
    }

    /// Creates a proposal for a change to the network that other members of the network can vote on, for example, a proposal to add a new member to the network. Any member can create a proposal. Applies only to Hyperledger Fabric.
    @Sendable
    @inlinable
    public func createProposal(_ input: CreateProposalInput, logger: Logger = AWSClient.loggingDisabled) async throws -> CreateProposalOutput {
        try await self.client.execute(
            operation: "CreateProposal", 
            path: "/networks/{NetworkId}/proposals", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Creates a proposal for a change to the network that other members of the network can vote on, for example, a proposal to add a new member to the network. Any member can create a proposal. Applies only to Hyperledger Fabric.
    ///
    /// Parameters:
    ///   - actions: The type of actions proposed, such as inviting a member or removing a member. The types of Actions in a proposal are mutually exclusive. For example, a proposal with Invitations actions cannot also contain Removals actions.
    ///   - clientRequestToken: A unique, case-sensitive identifier that you provide to ensure the idempotency of the operation. An idempotent operation completes no more than one time. This identifier is required only if you make a service request directly using an HTTP client. It is generated automatically if you use an Amazon Web Services SDK or the CLI.
    ///   - description: A description for the proposal that is visible to voting members, for example, "Proposal to add Example Corp. as member."
    ///   - memberId: The unique identifier of the member that is creating the proposal. This  identifier is especially useful for identifying the member making the proposal  when multiple members exist in a single Amazon Web Services account.
    ///   - networkId:  The unique identifier of the network for which the proposal is made.
    ///   - tags: Tags to assign to the proposal. Each tag consists of a key and an optional value. You can specify  multiple key-value pairs in a single request with an overall maximum of 50 tags  allowed per resource. For more information about tags, see Tagging Resources in the Amazon Managed Blockchain Ethereum Developer Guide, or Tagging Resources in the Amazon Managed Blockchain Hyperledger Fabric Developer Guide.
    ///   - logger: Logger use during operation
    @inlinable
    public func createProposal(
        actions: ProposalActions,
        clientRequestToken: String = CreateProposalInput.idempotencyToken(),
        description: String? = nil,
        memberId: String,
        networkId: String,
        tags: [String: String]? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> CreateProposalOutput {
        let input = CreateProposalInput(
            actions: actions, 
            clientRequestToken: clientRequestToken, 
            description: description, 
            memberId: memberId, 
            networkId: networkId, 
            tags: tags
        )
        return try await self.createProposal(input, logger: logger)
    }

    /// Deletes an accessor that your Amazon Web Services account owns. An accessor object is a container that has the  information required for token based access to your Ethereum nodes including, the  BILLING_TOKEN. After an accessor is deleted, the status of the accessor changes  from AVAILABLE to PENDING_DELETION. An accessor in the  PENDING_DELETION state can’t be used for new WebSocket requests or  HTTP requests. However, WebSocket connections that were initiated while the accessor was in the  AVAILABLE state remain open until they expire (up to 2 hours).
    @Sendable
    @inlinable
    public func deleteAccessor(_ input: DeleteAccessorInput, logger: Logger = AWSClient.loggingDisabled) async throws -> DeleteAccessorOutput {
        try await self.client.execute(
            operation: "DeleteAccessor", 
            path: "/accessors/{AccessorId}", 
            httpMethod: .DELETE, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Deletes an accessor that your Amazon Web Services account owns. An accessor object is a container that has the  information required for token based access to your Ethereum nodes including, the  BILLING_TOKEN. After an accessor is deleted, the status of the accessor changes  from AVAILABLE to PENDING_DELETION. An accessor in the  PENDING_DELETION state can’t be used for new WebSocket requests or  HTTP requests. However, WebSocket connections that were initiated while the accessor was in the  AVAILABLE state remain open until they expire (up to 2 hours).
    ///
    /// Parameters:
    ///   - accessorId: The unique identifier of the accessor.
    ///   - logger: Logger use during operation
    @inlinable
    public func deleteAccessor(
        accessorId: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> DeleteAccessorOutput {
        let input = DeleteAccessorInput(
            accessorId: accessorId
        )
        return try await self.deleteAccessor(input, logger: logger)
    }

    /// Deletes a member. Deleting a member removes the member and all associated resources from the network. DeleteMember can only be called for a specified MemberId if the principal performing the action is associated with the Amazon Web Services account that owns the member. In all other cases, the DeleteMember action is carried out as the result of an approved proposal to remove a member. If MemberId is the last member in a network specified by the last Amazon Web Services account, the network is deleted also. Applies only to Hyperledger Fabric.
    @Sendable
    @inlinable
    public func deleteMember(_ input: DeleteMemberInput, logger: Logger = AWSClient.loggingDisabled) async throws -> DeleteMemberOutput {
        try await self.client.execute(
            operation: "DeleteMember", 
            path: "/networks/{NetworkId}/members/{MemberId}", 
            httpMethod: .DELETE, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Deletes a member. Deleting a member removes the member and all associated resources from the network. DeleteMember can only be called for a specified MemberId if the principal performing the action is associated with the Amazon Web Services account that owns the member. In all other cases, the DeleteMember action is carried out as the result of an approved proposal to remove a member. If MemberId is the last member in a network specified by the last Amazon Web Services account, the network is deleted also. Applies only to Hyperledger Fabric.
    ///
    /// Parameters:
    ///   - memberId: The unique identifier of the member to remove.
    ///   - networkId: The unique identifier of the network from which the member is removed.
    ///   - logger: Logger use during operation
    @inlinable
    public func deleteMember(
        memberId: String,
        networkId: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> DeleteMemberOutput {
        let input = DeleteMemberInput(
            memberId: memberId, 
            networkId: networkId
        )
        return try await self.deleteMember(input, logger: logger)
    }

    /// Deletes a node that your Amazon Web Services account owns. All data on the node is lost and cannot be recovered. Applies to Hyperledger Fabric and Ethereum.
    @Sendable
    @inlinable
    public func deleteNode(_ input: DeleteNodeInput, logger: Logger = AWSClient.loggingDisabled) async throws -> DeleteNodeOutput {
        try await self.client.execute(
            operation: "DeleteNode", 
            path: "/networks/{NetworkId}/nodes/{NodeId}", 
            httpMethod: .DELETE, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Deletes a node that your Amazon Web Services account owns. All data on the node is lost and cannot be recovered. Applies to Hyperledger Fabric and Ethereum.
    ///
    /// Parameters:
    ///   - memberId: The unique identifier of the member that owns this node. Applies only to Hyperledger Fabric and is required for Hyperledger Fabric.
    ///   - networkId: The unique identifier of the network that the node is on. Ethereum public networks have the following NetworkIds:    n-ethereum-mainnet
    ///   - nodeId: The unique identifier of the node.
    ///   - logger: Logger use during operation
    @inlinable
    public func deleteNode(
        memberId: String? = nil,
        networkId: String,
        nodeId: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> DeleteNodeOutput {
        let input = DeleteNodeInput(
            memberId: memberId, 
            networkId: networkId, 
            nodeId: nodeId
        )
        return try await self.deleteNode(input, logger: logger)
    }

    /// Returns detailed information about an accessor. An accessor object is a container that has the  information required for token based access to your Ethereum nodes.
    @Sendable
    @inlinable
    public func getAccessor(_ input: GetAccessorInput, logger: Logger = AWSClient.loggingDisabled) async throws -> GetAccessorOutput {
        try await self.client.execute(
            operation: "GetAccessor", 
            path: "/accessors/{AccessorId}", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Returns detailed information about an accessor. An accessor object is a container that has the  information required for token based access to your Ethereum nodes.
    ///
    /// Parameters:
    ///   - accessorId: The unique identifier of the accessor.
    ///   - logger: Logger use during operation
    @inlinable
    public func getAccessor(
        accessorId: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> GetAccessorOutput {
        let input = GetAccessorInput(
            accessorId: accessorId
        )
        return try await self.getAccessor(input, logger: logger)
    }

    /// Returns detailed information about a member. Applies only to Hyperledger Fabric.
    @Sendable
    @inlinable
    public func getMember(_ input: GetMemberInput, logger: Logger = AWSClient.loggingDisabled) async throws -> GetMemberOutput {
        try await self.client.execute(
            operation: "GetMember", 
            path: "/networks/{NetworkId}/members/{MemberId}", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Returns detailed information about a member. Applies only to Hyperledger Fabric.
    ///
    /// Parameters:
    ///   - memberId: The unique identifier of the member.
    ///   - networkId: The unique identifier of the network to which the member belongs.
    ///   - logger: Logger use during operation
    @inlinable
    public func getMember(
        memberId: String,
        networkId: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> GetMemberOutput {
        let input = GetMemberInput(
            memberId: memberId, 
            networkId: networkId
        )
        return try await self.getMember(input, logger: logger)
    }

    /// Returns detailed information about a network. Applies to Hyperledger Fabric and Ethereum.
    @Sendable
    @inlinable
    public func getNetwork(_ input: GetNetworkInput, logger: Logger = AWSClient.loggingDisabled) async throws -> GetNetworkOutput {
        try await self.client.execute(
            operation: "GetNetwork", 
            path: "/networks/{NetworkId}", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Returns detailed information about a network. Applies to Hyperledger Fabric and Ethereum.
    ///
    /// Parameters:
    ///   - networkId: The unique identifier of the network to get information about.
    ///   - logger: Logger use during operation
    @inlinable
    public func getNetwork(
        networkId: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> GetNetworkOutput {
        let input = GetNetworkInput(
            networkId: networkId
        )
        return try await self.getNetwork(input, logger: logger)
    }

    /// Returns detailed information about a node. Applies to Hyperledger Fabric and Ethereum.
    @Sendable
    @inlinable
    public func getNode(_ input: GetNodeInput, logger: Logger = AWSClient.loggingDisabled) async throws -> GetNodeOutput {
        try await self.client.execute(
            operation: "GetNode", 
            path: "/networks/{NetworkId}/nodes/{NodeId}", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Returns detailed information about a node. Applies to Hyperledger Fabric and Ethereum.
    ///
    /// Parameters:
    ///   - memberId: The unique identifier of the member that owns the node. Applies only to Hyperledger Fabric and is required for Hyperledger Fabric.
    ///   - networkId: The unique identifier of the network that the node is on.
    ///   - nodeId: The unique identifier of the node.
    ///   - logger: Logger use during operation
    @inlinable
    public func getNode(
        memberId: String? = nil,
        networkId: String,
        nodeId: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> GetNodeOutput {
        let input = GetNodeInput(
            memberId: memberId, 
            networkId: networkId, 
            nodeId: nodeId
        )
        return try await self.getNode(input, logger: logger)
    }

    /// Returns detailed information about a proposal. Applies only to Hyperledger Fabric.
    @Sendable
    @inlinable
    public func getProposal(_ input: GetProposalInput, logger: Logger = AWSClient.loggingDisabled) async throws -> GetProposalOutput {
        try await self.client.execute(
            operation: "GetProposal", 
            path: "/networks/{NetworkId}/proposals/{ProposalId}", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Returns detailed information about a proposal. Applies only to Hyperledger Fabric.
    ///
    /// Parameters:
    ///   - networkId: The unique identifier of the network for which the proposal is made.
    ///   - proposalId: The unique identifier of the proposal.
    ///   - logger: Logger use during operation
    @inlinable
    public func getProposal(
        networkId: String,
        proposalId: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> GetProposalOutput {
        let input = GetProposalInput(
            networkId: networkId, 
            proposalId: proposalId
        )
        return try await self.getProposal(input, logger: logger)
    }

    /// Returns a list of the accessors and their properties. Accessor objects are containers that have the  information required for token based access to your Ethereum nodes.
    @Sendable
    @inlinable
    public func listAccessors(_ input: ListAccessorsInput, logger: Logger = AWSClient.loggingDisabled) async throws -> ListAccessorsOutput {
        try await self.client.execute(
            operation: "ListAccessors", 
            path: "/accessors", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Returns a list of the accessors and their properties. Accessor objects are containers that have the  information required for token based access to your Ethereum nodes.
    ///
    /// Parameters:
    ///   - maxResults:  The maximum number of accessors to list.
    ///   - networkType: The blockchain network that the Accessor token is created for.  Use the value ETHEREUM_MAINNET_AND_GOERLI for all  existing Accessors tokens that were created before the networkType  property was introduced.
    ///   - nextToken:  The pagination token that indicates the next set of results to retrieve.
    ///   - logger: Logger use during operation
    @inlinable
    public func listAccessors(
        maxResults: Int? = nil,
        networkType: AccessorNetworkType? = nil,
        nextToken: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> ListAccessorsOutput {
        let input = ListAccessorsInput(
            maxResults: maxResults, 
            networkType: networkType, 
            nextToken: nextToken
        )
        return try await self.listAccessors(input, logger: logger)
    }

    /// Returns a list of all invitations for the current Amazon Web Services account. Applies only to Hyperledger Fabric.
    @Sendable
    @inlinable
    public func listInvitations(_ input: ListInvitationsInput, logger: Logger = AWSClient.loggingDisabled) async throws -> ListInvitationsOutput {
        try await self.client.execute(
            operation: "ListInvitations", 
            path: "/invitations", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Returns a list of all invitations for the current Amazon Web Services account. Applies only to Hyperledger Fabric.
    ///
    /// Parameters:
    ///   - maxResults: The maximum number of invitations to return.
    ///   - nextToken: The pagination token that indicates the next set of results to retrieve.
    ///   - logger: Logger use during operation
    @inlinable
    public func listInvitations(
        maxResults: Int? = nil,
        nextToken: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> ListInvitationsOutput {
        let input = ListInvitationsInput(
            maxResults: maxResults, 
            nextToken: nextToken
        )
        return try await self.listInvitations(input, logger: logger)
    }

    /// Returns a list of the members in a network and properties of their configurations. Applies only to Hyperledger Fabric.
    @Sendable
    @inlinable
    public func listMembers(_ input: ListMembersInput, logger: Logger = AWSClient.loggingDisabled) async throws -> ListMembersOutput {
        try await self.client.execute(
            operation: "ListMembers", 
            path: "/networks/{NetworkId}/members", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Returns a list of the members in a network and properties of their configurations. Applies only to Hyperledger Fabric.
    ///
    /// Parameters:
    ///   - isOwned: An optional Boolean value. If provided, the request is limited either to members that the current Amazon Web Services account owns (true) or that other Amazon Web Services accountsn own (false). If omitted, all members are listed.
    ///   - maxResults: The maximum number of members to return in the request.
    ///   - name: The optional name of the member to list.
    ///   - networkId: The unique identifier of the network for which to list members.
    ///   - nextToken: The pagination token that indicates the next set of results to retrieve.
    ///   - status: An optional status specifier. If provided, only members currently in this status are listed.
    ///   - logger: Logger use during operation
    @inlinable
    public func listMembers(
        isOwned: Bool? = nil,
        maxResults: Int? = nil,
        name: String? = nil,
        networkId: String,
        nextToken: String? = nil,
        status: MemberStatus? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> ListMembersOutput {
        let input = ListMembersInput(
            isOwned: isOwned, 
            maxResults: maxResults, 
            name: name, 
            networkId: networkId, 
            nextToken: nextToken, 
            status: status
        )
        return try await self.listMembers(input, logger: logger)
    }

    /// Returns information about the networks in which the current Amazon Web Services account participates. Applies to Hyperledger Fabric and Ethereum.
    @Sendable
    @inlinable
    public func listNetworks(_ input: ListNetworksInput, logger: Logger = AWSClient.loggingDisabled) async throws -> ListNetworksOutput {
        try await self.client.execute(
            operation: "ListNetworks", 
            path: "/networks", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Returns information about the networks in which the current Amazon Web Services account participates. Applies to Hyperledger Fabric and Ethereum.
    ///
    /// Parameters:
    ///   - framework: An optional framework specifier. If provided, only networks of this framework type are listed.
    ///   - maxResults: The maximum number of networks to list.
    ///   - name: The name of the network.
    ///   - nextToken: The pagination token that indicates the next set of results to retrieve.
    ///   - status: An optional status specifier. If provided, only networks currently in this status are listed. Applies only to Hyperledger Fabric.
    ///   - logger: Logger use during operation
    @inlinable
    public func listNetworks(
        framework: Framework? = nil,
        maxResults: Int? = nil,
        name: String? = nil,
        nextToken: String? = nil,
        status: NetworkStatus? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> ListNetworksOutput {
        let input = ListNetworksInput(
            framework: framework, 
            maxResults: maxResults, 
            name: name, 
            nextToken: nextToken, 
            status: status
        )
        return try await self.listNetworks(input, logger: logger)
    }

    /// Returns information about the nodes within a network. Applies to Hyperledger Fabric and Ethereum.
    @Sendable
    @inlinable
    public func listNodes(_ input: ListNodesInput, logger: Logger = AWSClient.loggingDisabled) async throws -> ListNodesOutput {
        try await self.client.execute(
            operation: "ListNodes", 
            path: "/networks/{NetworkId}/nodes", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Returns information about the nodes within a network. Applies to Hyperledger Fabric and Ethereum.
    ///
    /// Parameters:
    ///   - maxResults: The maximum number of nodes to list.
    ///   - memberId: The unique identifier of the member who owns the nodes to list. Applies only to Hyperledger Fabric and is required for Hyperledger Fabric.
    ///   - networkId: The unique identifier of the network for which to list nodes.
    ///   - nextToken: The pagination token that indicates the next set of results to retrieve.
    ///   - status: An optional status specifier. If provided, only nodes currently in this status are listed.
    ///   - logger: Logger use during operation
    @inlinable
    public func listNodes(
        maxResults: Int? = nil,
        memberId: String? = nil,
        networkId: String,
        nextToken: String? = nil,
        status: NodeStatus? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> ListNodesOutput {
        let input = ListNodesInput(
            maxResults: maxResults, 
            memberId: memberId, 
            networkId: networkId, 
            nextToken: nextToken, 
            status: status
        )
        return try await self.listNodes(input, logger: logger)
    }

    /// Returns the list of votes for a specified proposal, including the value of each vote and the unique identifier of the member that cast the vote. Applies only to Hyperledger Fabric.
    @Sendable
    @inlinable
    public func listProposalVotes(_ input: ListProposalVotesInput, logger: Logger = AWSClient.loggingDisabled) async throws -> ListProposalVotesOutput {
        try await self.client.execute(
            operation: "ListProposalVotes", 
            path: "/networks/{NetworkId}/proposals/{ProposalId}/votes", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Returns the list of votes for a specified proposal, including the value of each vote and the unique identifier of the member that cast the vote. Applies only to Hyperledger Fabric.
    ///
    /// Parameters:
    ///   - maxResults:  The maximum number of votes to return.
    ///   - networkId:  The unique identifier of the network.
    ///   - nextToken:  The pagination token that indicates the next set of results to retrieve.
    ///   - proposalId:  The unique identifier of the proposal.
    ///   - logger: Logger use during operation
    @inlinable
    public func listProposalVotes(
        maxResults: Int? = nil,
        networkId: String,
        nextToken: String? = nil,
        proposalId: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> ListProposalVotesOutput {
        let input = ListProposalVotesInput(
            maxResults: maxResults, 
            networkId: networkId, 
            nextToken: nextToken, 
            proposalId: proposalId
        )
        return try await self.listProposalVotes(input, logger: logger)
    }

    /// Returns a list of proposals for the network. Applies only to Hyperledger Fabric.
    @Sendable
    @inlinable
    public func listProposals(_ input: ListProposalsInput, logger: Logger = AWSClient.loggingDisabled) async throws -> ListProposalsOutput {
        try await self.client.execute(
            operation: "ListProposals", 
            path: "/networks/{NetworkId}/proposals", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Returns a list of proposals for the network. Applies only to Hyperledger Fabric.
    ///
    /// Parameters:
    ///   - maxResults:  The maximum number of proposals to return.
    ///   - networkId:  The unique identifier of the network.
    ///   - nextToken:  The pagination token that indicates the next set of results to retrieve.
    ///   - logger: Logger use during operation
    @inlinable
    public func listProposals(
        maxResults: Int? = nil,
        networkId: String,
        nextToken: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> ListProposalsOutput {
        let input = ListProposalsInput(
            maxResults: maxResults, 
            networkId: networkId, 
            nextToken: nextToken
        )
        return try await self.listProposals(input, logger: logger)
    }

    /// Returns a list of tags for the specified resource. Each tag consists of a key and optional value. For more information about tags, see Tagging Resources in the Amazon Managed Blockchain Ethereum Developer Guide, or Tagging Resources in the Amazon Managed Blockchain Hyperledger Fabric Developer Guide.
    @Sendable
    @inlinable
    public func listTagsForResource(_ input: ListTagsForResourceRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> ListTagsForResourceResponse {
        try await self.client.execute(
            operation: "ListTagsForResource", 
            path: "/tags/{ResourceArn}", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Returns a list of tags for the specified resource. Each tag consists of a key and optional value. For more information about tags, see Tagging Resources in the Amazon Managed Blockchain Ethereum Developer Guide, or Tagging Resources in the Amazon Managed Blockchain Hyperledger Fabric Developer Guide.
    ///
    /// Parameters:
    ///   - resourceArn: The Amazon Resource Name (ARN) of the resource. For more information about ARNs and their format, see Amazon Resource Names (ARNs) in the Amazon Web Services General Reference.
    ///   - logger: Logger use during operation
    @inlinable
    public func listTagsForResource(
        resourceArn: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> ListTagsForResourceResponse {
        let input = ListTagsForResourceRequest(
            resourceArn: resourceArn
        )
        return try await self.listTagsForResource(input, logger: logger)
    }

    /// Rejects an invitation to join a network. This action can be called by a principal in an Amazon Web Services account that has received an invitation to create a member and join a network. Applies only to Hyperledger Fabric.
    @Sendable
    @inlinable
    public func rejectInvitation(_ input: RejectInvitationInput, logger: Logger = AWSClient.loggingDisabled) async throws -> RejectInvitationOutput {
        try await self.client.execute(
            operation: "RejectInvitation", 
            path: "/invitations/{InvitationId}", 
            httpMethod: .DELETE, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Rejects an invitation to join a network. This action can be called by a principal in an Amazon Web Services account that has received an invitation to create a member and join a network. Applies only to Hyperledger Fabric.
    ///
    /// Parameters:
    ///   - invitationId: The unique identifier of the invitation to reject.
    ///   - logger: Logger use during operation
    @inlinable
    public func rejectInvitation(
        invitationId: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> RejectInvitationOutput {
        let input = RejectInvitationInput(
            invitationId: invitationId
        )
        return try await self.rejectInvitation(input, logger: logger)
    }

    /// Adds or overwrites the specified tags for the specified Amazon Managed Blockchain resource. Each tag consists of a key and optional value. When you specify a tag key that already exists, the tag value is overwritten with the new value. Use UntagResource to remove tag keys. A resource can have up to 50 tags. If you try to create more than 50 tags for a resource, your request fails and returns an error. For more information about tags, see Tagging Resources in the Amazon Managed Blockchain Ethereum Developer Guide, or Tagging Resources in the Amazon Managed Blockchain Hyperledger Fabric Developer Guide.
    @Sendable
    @inlinable
    public func tagResource(_ input: TagResourceRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> TagResourceResponse {
        try await self.client.execute(
            operation: "TagResource", 
            path: "/tags/{ResourceArn}", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Adds or overwrites the specified tags for the specified Amazon Managed Blockchain resource. Each tag consists of a key and optional value. When you specify a tag key that already exists, the tag value is overwritten with the new value. Use UntagResource to remove tag keys. A resource can have up to 50 tags. If you try to create more than 50 tags for a resource, your request fails and returns an error. For more information about tags, see Tagging Resources in the Amazon Managed Blockchain Ethereum Developer Guide, or Tagging Resources in the Amazon Managed Blockchain Hyperledger Fabric Developer Guide.
    ///
    /// Parameters:
    ///   - resourceArn: The Amazon Resource Name (ARN) of the resource. For more information about ARNs and their format, see Amazon Resource Names (ARNs) in the Amazon Web Services General Reference.
    ///   - tags: The tags to assign to the specified resource. Tag values can be empty, for example, "MyTagKey" : "". You can specify multiple key-value pairs in a single request, with an overall maximum of 50 tags added to each resource.
    ///   - logger: Logger use during operation
    @inlinable
    public func tagResource(
        resourceArn: String,
        tags: [String: String],
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> TagResourceResponse {
        let input = TagResourceRequest(
            resourceArn: resourceArn, 
            tags: tags
        )
        return try await self.tagResource(input, logger: logger)
    }

    /// Removes the specified tags from the Amazon Managed Blockchain resource. For more information about tags, see Tagging Resources in the Amazon Managed Blockchain Ethereum Developer Guide, or Tagging Resources in the Amazon Managed Blockchain Hyperledger Fabric Developer Guide.
    @Sendable
    @inlinable
    public func untagResource(_ input: UntagResourceRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> UntagResourceResponse {
        try await self.client.execute(
            operation: "UntagResource", 
            path: "/tags/{ResourceArn}", 
            httpMethod: .DELETE, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Removes the specified tags from the Amazon Managed Blockchain resource. For more information about tags, see Tagging Resources in the Amazon Managed Blockchain Ethereum Developer Guide, or Tagging Resources in the Amazon Managed Blockchain Hyperledger Fabric Developer Guide.
    ///
    /// Parameters:
    ///   - resourceArn: The Amazon Resource Name (ARN) of the resource. For more information about ARNs and their format, see Amazon Resource Names (ARNs) in the Amazon Web Services General Reference.
    ///   - tagKeys: The tag keys.
    ///   - logger: Logger use during operation
    @inlinable
    public func untagResource(
        resourceArn: String,
        tagKeys: [String],
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> UntagResourceResponse {
        let input = UntagResourceRequest(
            resourceArn: resourceArn, 
            tagKeys: tagKeys
        )
        return try await self.untagResource(input, logger: logger)
    }

    /// Updates a member configuration with new parameters. Applies only to Hyperledger Fabric.
    @Sendable
    @inlinable
    public func updateMember(_ input: UpdateMemberInput, logger: Logger = AWSClient.loggingDisabled) async throws -> UpdateMemberOutput {
        try await self.client.execute(
            operation: "UpdateMember", 
            path: "/networks/{NetworkId}/members/{MemberId}", 
            httpMethod: .PATCH, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Updates a member configuration with new parameters. Applies only to Hyperledger Fabric.
    ///
    /// Parameters:
    ///   - logPublishingConfiguration: Configuration properties for publishing to Amazon CloudWatch Logs.
    ///   - memberId: The unique identifier of the member.
    ///   - networkId: The unique identifier of the Managed Blockchain network to which the member belongs.
    ///   - logger: Logger use during operation
    @inlinable
    public func updateMember(
        logPublishingConfiguration: MemberLogPublishingConfiguration? = nil,
        memberId: String,
        networkId: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> UpdateMemberOutput {
        let input = UpdateMemberInput(
            logPublishingConfiguration: logPublishingConfiguration, 
            memberId: memberId, 
            networkId: networkId
        )
        return try await self.updateMember(input, logger: logger)
    }

    /// Updates a node configuration with new parameters. Applies only to Hyperledger Fabric.
    @Sendable
    @inlinable
    public func updateNode(_ input: UpdateNodeInput, logger: Logger = AWSClient.loggingDisabled) async throws -> UpdateNodeOutput {
        try await self.client.execute(
            operation: "UpdateNode", 
            path: "/networks/{NetworkId}/nodes/{NodeId}", 
            httpMethod: .PATCH, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Updates a node configuration with new parameters. Applies only to Hyperledger Fabric.
    ///
    /// Parameters:
    ///   - logPublishingConfiguration: Configuration properties for publishing to Amazon CloudWatch Logs.
    ///   - memberId: The unique identifier of the member that owns the node. Applies only to Hyperledger Fabric.
    ///   - networkId: The unique identifier of the network that the node is on.
    ///   - nodeId: The unique identifier of the node.
    ///   - logger: Logger use during operation
    @inlinable
    public func updateNode(
        logPublishingConfiguration: NodeLogPublishingConfiguration? = nil,
        memberId: String? = nil,
        networkId: String,
        nodeId: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> UpdateNodeOutput {
        let input = UpdateNodeInput(
            logPublishingConfiguration: logPublishingConfiguration, 
            memberId: memberId, 
            networkId: networkId, 
            nodeId: nodeId
        )
        return try await self.updateNode(input, logger: logger)
    }

    /// Casts a vote for a specified ProposalId on behalf of a member. The member to vote as, specified by VoterMemberId, must be in the same Amazon Web Services account as the principal that calls the action. Applies only to Hyperledger Fabric.
    @Sendable
    @inlinable
    public func voteOnProposal(_ input: VoteOnProposalInput, logger: Logger = AWSClient.loggingDisabled) async throws -> VoteOnProposalOutput {
        try await self.client.execute(
            operation: "VoteOnProposal", 
            path: "/networks/{NetworkId}/proposals/{ProposalId}/votes", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Casts a vote for a specified ProposalId on behalf of a member. The member to vote as, specified by VoterMemberId, must be in the same Amazon Web Services account as the principal that calls the action. Applies only to Hyperledger Fabric.
    ///
    /// Parameters:
    ///   - networkId:  The unique identifier of the network.
    ///   - proposalId:  The unique identifier of the proposal.
    ///   - vote:  The value of the vote.
    ///   - voterMemberId: The unique identifier of the member casting the vote.
    ///   - logger: Logger use during operation
    @inlinable
    public func voteOnProposal(
        networkId: String,
        proposalId: String,
        vote: VoteValue,
        voterMemberId: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> VoteOnProposalOutput {
        let input = VoteOnProposalInput(
            networkId: networkId, 
            proposalId: proposalId, 
            vote: vote, 
            voterMemberId: voterMemberId
        )
        return try await self.voteOnProposal(input, logger: logger)
    }
}

extension ManagedBlockchain {
    /// Initializer required by `AWSService.with(middlewares:timeout:byteBufferAllocator:options)`. You are not able to use this initializer directly as there are not public
    /// initializers for `AWSServiceConfig.Patch`. Please use `AWSService.with(middlewares:timeout:byteBufferAllocator:options)` instead.
    public init(from: ManagedBlockchain, patch: AWSServiceConfig.Patch) {
        self.client = from.client
        self.config = from.config.with(patch: patch)
    }
}

// MARK: Paginators

@available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
extension ManagedBlockchain {
    /// Return PaginatorSequence for operation ``listAccessors(_:logger:)``.
    ///
    /// - Parameters:
    ///   - input: Input for operation
    ///   - logger: Logger used for logging
    @inlinable
    public func listAccessorsPaginator(
        _ input: ListAccessorsInput,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<ListAccessorsInput, ListAccessorsOutput> {
        return .init(
            input: input,
            command: self.listAccessors,
            inputKey: \ListAccessorsInput.nextToken,
            outputKey: \ListAccessorsOutput.nextToken,
            logger: logger
        )
    }
    /// Return PaginatorSequence for operation ``listAccessors(_:logger:)``.
    ///
    /// - Parameters:
    ///   - maxResults:  The maximum number of accessors to list.
    ///   - networkType: The blockchain network that the Accessor token is created for.  Use the value ETHEREUM_MAINNET_AND_GOERLI for all  existing Accessors tokens that were created before the networkType  property was introduced.
    ///   - logger: Logger used for logging
    @inlinable
    public func listAccessorsPaginator(
        maxResults: Int? = nil,
        networkType: AccessorNetworkType? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) -> AWSClient.PaginatorSequence<ListAccessorsInput, ListAccessorsOutput> {
        let input = ListAccessorsInput(
            maxResults: maxResults, 
            networkType: networkType
        )
        return self.listAccessorsPaginator(input, logger: logger)
    }

    /// Return PaginatorSequence for operation ``listInvitations(_:logger:)``.
    ///
    /// - Parameters:
    ///   - input: Input for operation
    ///   - logger: Logger used for logging
    @inlinable
    public func listInvitationsPaginator(
        _ input: ListInvitationsInput,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<ListInvitationsInput, ListInvitationsOutput> {
        return .init(
            input: input,
            command: self.listInvitations,
            inputKey: \ListInvitationsInput.nextToken,
            outputKey: \ListInvitationsOutput.nextToken,
            logger: logger
        )
    }
    /// Return PaginatorSequence for operation ``listInvitations(_:logger:)``.
    ///
    /// - Parameters:
    ///   - maxResults: The maximum number of invitations to return.
    ///   - logger: Logger used for logging
    @inlinable
    public func listInvitationsPaginator(
        maxResults: Int? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) -> AWSClient.PaginatorSequence<ListInvitationsInput, ListInvitationsOutput> {
        let input = ListInvitationsInput(
            maxResults: maxResults
        )
        return self.listInvitationsPaginator(input, logger: logger)
    }

    /// Return PaginatorSequence for operation ``listMembers(_:logger:)``.
    ///
    /// - Parameters:
    ///   - input: Input for operation
    ///   - logger: Logger used for logging
    @inlinable
    public func listMembersPaginator(
        _ input: ListMembersInput,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<ListMembersInput, ListMembersOutput> {
        return .init(
            input: input,
            command: self.listMembers,
            inputKey: \ListMembersInput.nextToken,
            outputKey: \ListMembersOutput.nextToken,
            logger: logger
        )
    }
    /// Return PaginatorSequence for operation ``listMembers(_:logger:)``.
    ///
    /// - Parameters:
    ///   - isOwned: An optional Boolean value. If provided, the request is limited either to members that the current Amazon Web Services account owns (true) or that other Amazon Web Services accountsn own (false). If omitted, all members are listed.
    ///   - maxResults: The maximum number of members to return in the request.
    ///   - name: The optional name of the member to list.
    ///   - networkId: The unique identifier of the network for which to list members.
    ///   - status: An optional status specifier. If provided, only members currently in this status are listed.
    ///   - logger: Logger used for logging
    @inlinable
    public func listMembersPaginator(
        isOwned: Bool? = nil,
        maxResults: Int? = nil,
        name: String? = nil,
        networkId: String,
        status: MemberStatus? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) -> AWSClient.PaginatorSequence<ListMembersInput, ListMembersOutput> {
        let input = ListMembersInput(
            isOwned: isOwned, 
            maxResults: maxResults, 
            name: name, 
            networkId: networkId, 
            status: status
        )
        return self.listMembersPaginator(input, logger: logger)
    }

    /// Return PaginatorSequence for operation ``listNetworks(_:logger:)``.
    ///
    /// - Parameters:
    ///   - input: Input for operation
    ///   - logger: Logger used for logging
    @inlinable
    public func listNetworksPaginator(
        _ input: ListNetworksInput,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<ListNetworksInput, ListNetworksOutput> {
        return .init(
            input: input,
            command: self.listNetworks,
            inputKey: \ListNetworksInput.nextToken,
            outputKey: \ListNetworksOutput.nextToken,
            logger: logger
        )
    }
    /// Return PaginatorSequence for operation ``listNetworks(_:logger:)``.
    ///
    /// - Parameters:
    ///   - framework: An optional framework specifier. If provided, only networks of this framework type are listed.
    ///   - maxResults: The maximum number of networks to list.
    ///   - name: The name of the network.
    ///   - status: An optional status specifier. If provided, only networks currently in this status are listed. Applies only to Hyperledger Fabric.
    ///   - logger: Logger used for logging
    @inlinable
    public func listNetworksPaginator(
        framework: Framework? = nil,
        maxResults: Int? = nil,
        name: String? = nil,
        status: NetworkStatus? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) -> AWSClient.PaginatorSequence<ListNetworksInput, ListNetworksOutput> {
        let input = ListNetworksInput(
            framework: framework, 
            maxResults: maxResults, 
            name: name, 
            status: status
        )
        return self.listNetworksPaginator(input, logger: logger)
    }

    /// Return PaginatorSequence for operation ``listNodes(_:logger:)``.
    ///
    /// - Parameters:
    ///   - input: Input for operation
    ///   - logger: Logger used for logging
    @inlinable
    public func listNodesPaginator(
        _ input: ListNodesInput,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<ListNodesInput, ListNodesOutput> {
        return .init(
            input: input,
            command: self.listNodes,
            inputKey: \ListNodesInput.nextToken,
            outputKey: \ListNodesOutput.nextToken,
            logger: logger
        )
    }
    /// Return PaginatorSequence for operation ``listNodes(_:logger:)``.
    ///
    /// - Parameters:
    ///   - maxResults: The maximum number of nodes to list.
    ///   - memberId: The unique identifier of the member who owns the nodes to list. Applies only to Hyperledger Fabric and is required for Hyperledger Fabric.
    ///   - networkId: The unique identifier of the network for which to list nodes.
    ///   - status: An optional status specifier. If provided, only nodes currently in this status are listed.
    ///   - logger: Logger used for logging
    @inlinable
    public func listNodesPaginator(
        maxResults: Int? = nil,
        memberId: String? = nil,
        networkId: String,
        status: NodeStatus? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) -> AWSClient.PaginatorSequence<ListNodesInput, ListNodesOutput> {
        let input = ListNodesInput(
            maxResults: maxResults, 
            memberId: memberId, 
            networkId: networkId, 
            status: status
        )
        return self.listNodesPaginator(input, logger: logger)
    }

    /// Return PaginatorSequence for operation ``listProposalVotes(_:logger:)``.
    ///
    /// - Parameters:
    ///   - input: Input for operation
    ///   - logger: Logger used for logging
    @inlinable
    public func listProposalVotesPaginator(
        _ input: ListProposalVotesInput,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<ListProposalVotesInput, ListProposalVotesOutput> {
        return .init(
            input: input,
            command: self.listProposalVotes,
            inputKey: \ListProposalVotesInput.nextToken,
            outputKey: \ListProposalVotesOutput.nextToken,
            logger: logger
        )
    }
    /// Return PaginatorSequence for operation ``listProposalVotes(_:logger:)``.
    ///
    /// - Parameters:
    ///   - maxResults:  The maximum number of votes to return.
    ///   - networkId:  The unique identifier of the network.
    ///   - proposalId:  The unique identifier of the proposal.
    ///   - logger: Logger used for logging
    @inlinable
    public func listProposalVotesPaginator(
        maxResults: Int? = nil,
        networkId: String,
        proposalId: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) -> AWSClient.PaginatorSequence<ListProposalVotesInput, ListProposalVotesOutput> {
        let input = ListProposalVotesInput(
            maxResults: maxResults, 
            networkId: networkId, 
            proposalId: proposalId
        )
        return self.listProposalVotesPaginator(input, logger: logger)
    }

    /// Return PaginatorSequence for operation ``listProposals(_:logger:)``.
    ///
    /// - Parameters:
    ///   - input: Input for operation
    ///   - logger: Logger used for logging
    @inlinable
    public func listProposalsPaginator(
        _ input: ListProposalsInput,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<ListProposalsInput, ListProposalsOutput> {
        return .init(
            input: input,
            command: self.listProposals,
            inputKey: \ListProposalsInput.nextToken,
            outputKey: \ListProposalsOutput.nextToken,
            logger: logger
        )
    }
    /// Return PaginatorSequence for operation ``listProposals(_:logger:)``.
    ///
    /// - Parameters:
    ///   - maxResults:  The maximum number of proposals to return.
    ///   - networkId:  The unique identifier of the network.
    ///   - logger: Logger used for logging
    @inlinable
    public func listProposalsPaginator(
        maxResults: Int? = nil,
        networkId: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) -> AWSClient.PaginatorSequence<ListProposalsInput, ListProposalsOutput> {
        let input = ListProposalsInput(
            maxResults: maxResults, 
            networkId: networkId
        )
        return self.listProposalsPaginator(input, logger: logger)
    }
}

extension ManagedBlockchain.ListAccessorsInput: AWSPaginateToken {
    @inlinable
    public func usingPaginationToken(_ token: String) -> ManagedBlockchain.ListAccessorsInput {
        return .init(
            maxResults: self.maxResults,
            networkType: self.networkType,
            nextToken: token
        )
    }
}

extension ManagedBlockchain.ListInvitationsInput: AWSPaginateToken {
    @inlinable
    public func usingPaginationToken(_ token: String) -> ManagedBlockchain.ListInvitationsInput {
        return .init(
            maxResults: self.maxResults,
            nextToken: token
        )
    }
}

extension ManagedBlockchain.ListMembersInput: AWSPaginateToken {
    @inlinable
    public func usingPaginationToken(_ token: String) -> ManagedBlockchain.ListMembersInput {
        return .init(
            isOwned: self.isOwned,
            maxResults: self.maxResults,
            name: self.name,
            networkId: self.networkId,
            nextToken: token,
            status: self.status
        )
    }
}

extension ManagedBlockchain.ListNetworksInput: AWSPaginateToken {
    @inlinable
    public func usingPaginationToken(_ token: String) -> ManagedBlockchain.ListNetworksInput {
        return .init(
            framework: self.framework,
            maxResults: self.maxResults,
            name: self.name,
            nextToken: token,
            status: self.status
        )
    }
}

extension ManagedBlockchain.ListNodesInput: AWSPaginateToken {
    @inlinable
    public func usingPaginationToken(_ token: String) -> ManagedBlockchain.ListNodesInput {
        return .init(
            maxResults: self.maxResults,
            memberId: self.memberId,
            networkId: self.networkId,
            nextToken: token,
            status: self.status
        )
    }
}

extension ManagedBlockchain.ListProposalVotesInput: AWSPaginateToken {
    @inlinable
    public func usingPaginationToken(_ token: String) -> ManagedBlockchain.ListProposalVotesInput {
        return .init(
            maxResults: self.maxResults,
            networkId: self.networkId,
            nextToken: token,
            proposalId: self.proposalId
        )
    }
}

extension ManagedBlockchain.ListProposalsInput: AWSPaginateToken {
    @inlinable
    public func usingPaginationToken(_ token: String) -> ManagedBlockchain.ListProposalsInput {
        return .init(
            maxResults: self.maxResults,
            networkId: self.networkId,
            nextToken: token
        )
    }
}
