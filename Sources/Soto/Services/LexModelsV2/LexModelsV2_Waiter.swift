//===----------------------------------------------------------------------===//
//
// This source file is part of the Soto for AWS open source project
//
// Copyright (c) 2017-2021 the Soto project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
// See CONTRIBUTORS.txt for the list of Soto project authors
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by https://github.com/soto-project/soto/tree/main/CodeGenerator. DO NOT EDIT.

@_exported import SotoCore

import SotoCore

// MARK: Waiters

extension LexModelsV2 {
    /// Poll resource until it reaches a desired state
    ///
    /// Parameters:
    ///   - input: Input for request
    ///   - maxWaitTime: Maximum amount of time to wait for waiter to be successful
    ///   - logger: Logger for logging output
    ///   - eventLoop: EventLoop to run waiter code on
    public func waitUntilBotAliasAvailable(
        _ input: DescribeBotAliasRequest,
        maxWaitTime: TimeAmount? = nil,
        logger: Logger = AWSClient.loggingDisabled,
        on eventLoop: EventLoop? = nil
    ) -> EventLoopFuture<Void> {
        let waiter = AWSClient.Waiter(
            acceptors: [
                .init(state: .success, matcher: try! JMESPathMatcher("botAliasStatus", expected: "Available")),
                .init(state: .failure, matcher: try! JMESPathMatcher("botAliasStatus", expected: "Failed")),
                .init(state: .failure, matcher: try! JMESPathMatcher("botAliasStatus", expected: "Deleting")),
            ],
            minDelayTime: .seconds(10),
            command: describeBotAlias
        )
        return self.client.waitUntil(input, waiter: waiter, maxWaitTime: maxWaitTime, logger: logger, on: eventLoop)
    }

    /// Poll resource until it reaches a desired state
    ///
    /// Parameters:
    ///   - input: Input for request
    ///   - maxWaitTime: Maximum amount of time to wait for waiter to be successful
    ///   - logger: Logger for logging output
    ///   - eventLoop: EventLoop to run waiter code on
    public func waitUntilBotAvailable(
        _ input: DescribeBotRequest,
        maxWaitTime: TimeAmount? = nil,
        logger: Logger = AWSClient.loggingDisabled,
        on eventLoop: EventLoop? = nil
    ) -> EventLoopFuture<Void> {
        let waiter = AWSClient.Waiter(
            acceptors: [
                .init(state: .success, matcher: try! JMESPathMatcher("botStatus", expected: "Available")),
                .init(state: .failure, matcher: try! JMESPathMatcher("botStatus", expected: "Deleting")),
                .init(state: .failure, matcher: try! JMESPathMatcher("botStatus", expected: "Failed")),
                .init(state: .failure, matcher: try! JMESPathMatcher("botStatus", expected: "Inactive")),
            ],
            minDelayTime: .seconds(10),
            command: describeBot
        )
        return self.client.waitUntil(input, waiter: waiter, maxWaitTime: maxWaitTime, logger: logger, on: eventLoop)
    }

    /// Poll resource until it reaches a desired state
    ///
    /// Parameters:
    ///   - input: Input for request
    ///   - maxWaitTime: Maximum amount of time to wait for waiter to be successful
    ///   - logger: Logger for logging output
    ///   - eventLoop: EventLoop to run waiter code on
    public func waitUntilBotExportCompleted(
        _ input: DescribeExportRequest,
        maxWaitTime: TimeAmount? = nil,
        logger: Logger = AWSClient.loggingDisabled,
        on eventLoop: EventLoop? = nil
    ) -> EventLoopFuture<Void> {
        let waiter = AWSClient.Waiter(
            acceptors: [
                .init(state: .success, matcher: try! JMESPathMatcher("exportStatus", expected: "Completed")),
                .init(state: .failure, matcher: try! JMESPathMatcher("exportStatus", expected: "Deleting")),
                .init(state: .failure, matcher: try! JMESPathMatcher("exportStatus", expected: "Failed")),
            ],
            minDelayTime: .seconds(10),
            command: describeExport
        )
        return self.client.waitUntil(input, waiter: waiter, maxWaitTime: maxWaitTime, logger: logger, on: eventLoop)
    }

    /// Poll resource until it reaches a desired state
    ///
    /// Parameters:
    ///   - input: Input for request
    ///   - maxWaitTime: Maximum amount of time to wait for waiter to be successful
    ///   - logger: Logger for logging output
    ///   - eventLoop: EventLoop to run waiter code on
    public func waitUntilBotImportCompleted(
        _ input: DescribeImportRequest,
        maxWaitTime: TimeAmount? = nil,
        logger: Logger = AWSClient.loggingDisabled,
        on eventLoop: EventLoop? = nil
    ) -> EventLoopFuture<Void> {
        let waiter = AWSClient.Waiter(
            acceptors: [
                .init(state: .success, matcher: try! JMESPathMatcher("importStatus", expected: "Completed")),
                .init(state: .failure, matcher: try! JMESPathMatcher("importStatus", expected: "Deleting")),
                .init(state: .failure, matcher: try! JMESPathMatcher("importStatus", expected: "Failed")),
            ],
            minDelayTime: .seconds(10),
            command: describeImport
        )
        return self.client.waitUntil(input, waiter: waiter, maxWaitTime: maxWaitTime, logger: logger, on: eventLoop)
    }

    /// Poll resource until it reaches a desired state
    ///
    /// Parameters:
    ///   - input: Input for request
    ///   - maxWaitTime: Maximum amount of time to wait for waiter to be successful
    ///   - logger: Logger for logging output
    ///   - eventLoop: EventLoop to run waiter code on
    public func waitUntilBotLocaleBuilt(
        _ input: DescribeBotLocaleRequest,
        maxWaitTime: TimeAmount? = nil,
        logger: Logger = AWSClient.loggingDisabled,
        on eventLoop: EventLoop? = nil
    ) -> EventLoopFuture<Void> {
        let waiter = AWSClient.Waiter(
            acceptors: [
                .init(state: .success, matcher: try! JMESPathMatcher("botLocaleStatus", expected: "Built")),
                .init(state: .failure, matcher: try! JMESPathMatcher("botLocaleStatus", expected: "Deleting")),
                .init(state: .failure, matcher: try! JMESPathMatcher("botLocaleStatus", expected: "Failed")),
                .init(state: .failure, matcher: try! JMESPathMatcher("botLocaleStatus", expected: "NotBuilt")),
            ],
            minDelayTime: .seconds(10),
            command: describeBotLocale
        )
        return self.client.waitUntil(input, waiter: waiter, maxWaitTime: maxWaitTime, logger: logger, on: eventLoop)
    }

    /// Poll resource until it reaches a desired state
    ///
    /// Parameters:
    ///   - input: Input for request
    ///   - maxWaitTime: Maximum amount of time to wait for waiter to be successful
    ///   - logger: Logger for logging output
    ///   - eventLoop: EventLoop to run waiter code on
    public func waitUntilBotLocaleCreated(
        _ input: DescribeBotLocaleRequest,
        maxWaitTime: TimeAmount? = nil,
        logger: Logger = AWSClient.loggingDisabled,
        on eventLoop: EventLoop? = nil
    ) -> EventLoopFuture<Void> {
        let waiter = AWSClient.Waiter(
            acceptors: [
                .init(state: .success, matcher: try! JMESPathMatcher("botLocaleStatus", expected: "Built")),
                .init(state: .success, matcher: try! JMESPathMatcher("botLocaleStatus", expected: "ReadyExpressTesting")),
                .init(state: .success, matcher: try! JMESPathMatcher("botLocaleStatus", expected: "NotBuilt")),
                .init(state: .failure, matcher: try! JMESPathMatcher("botLocaleStatus", expected: "Deleting")),
                .init(state: .failure, matcher: try! JMESPathMatcher("botLocaleStatus", expected: "Failed")),
            ],
            minDelayTime: .seconds(10),
            command: describeBotLocale
        )
        return self.client.waitUntil(input, waiter: waiter, maxWaitTime: maxWaitTime, logger: logger, on: eventLoop)
    }

    /// Poll resource until it reaches a desired state
    ///
    /// Parameters:
    ///   - input: Input for request
    ///   - maxWaitTime: Maximum amount of time to wait for waiter to be successful
    ///   - logger: Logger for logging output
    ///   - eventLoop: EventLoop to run waiter code on
    public func waitUntilBotLocaleExpressTestingAvailable(
        _ input: DescribeBotLocaleRequest,
        maxWaitTime: TimeAmount? = nil,
        logger: Logger = AWSClient.loggingDisabled,
        on eventLoop: EventLoop? = nil
    ) -> EventLoopFuture<Void> {
        let waiter = AWSClient.Waiter(
            acceptors: [
                .init(state: .success, matcher: try! JMESPathMatcher("botLocaleStatus", expected: "Built")),
                .init(state: .success, matcher: try! JMESPathMatcher("botLocaleStatus", expected: "ReadyExpressTesting")),
                .init(state: .failure, matcher: try! JMESPathMatcher("botLocaleStatus", expected: "Deleting")),
                .init(state: .failure, matcher: try! JMESPathMatcher("botLocaleStatus", expected: "Failed")),
                .init(state: .failure, matcher: try! JMESPathMatcher("botLocaleStatus", expected: "NotBuilt")),
            ],
            minDelayTime: .seconds(10),
            command: describeBotLocale
        )
        return self.client.waitUntil(input, waiter: waiter, maxWaitTime: maxWaitTime, logger: logger, on: eventLoop)
    }

    /// Poll resource until it reaches a desired state
    ///
    /// Parameters:
    ///   - input: Input for request
    ///   - maxWaitTime: Maximum amount of time to wait for waiter to be successful
    ///   - logger: Logger for logging output
    ///   - eventLoop: EventLoop to run waiter code on
    public func waitUntilBotVersionAvailable(
        _ input: DescribeBotVersionRequest,
        maxWaitTime: TimeAmount? = nil,
        logger: Logger = AWSClient.loggingDisabled,
        on eventLoop: EventLoop? = nil
    ) -> EventLoopFuture<Void> {
        let waiter = AWSClient.Waiter(
            acceptors: [
                .init(state: .success, matcher: try! JMESPathMatcher("botStatus", expected: "Available")),
                .init(state: .failure, matcher: try! JMESPathMatcher("botStatus", expected: "Deleting")),
                .init(state: .failure, matcher: try! JMESPathMatcher("botStatus", expected: "Failed")),
                .init(state: .retry, matcher: AWSErrorStatusMatcher(404)),
            ],
            minDelayTime: .seconds(10),
            command: describeBotVersion
        )
        return self.client.waitUntil(input, waiter: waiter, maxWaitTime: maxWaitTime, logger: logger, on: eventLoop)
    }
}
