//===----------------------------------------------------------------------===//
//
// This source file is part of the Soto for AWS open source project
//
// Copyright (c) 2017-2023 the Soto project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
// See CONTRIBUTORS.txt for the list of Soto project authors
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by https://github.com/soto-project/soto-codegenerator.
// DO NOT EDIT.

@_exported import SotoCore

/// Service object for interacting with AWS WellArchitected service.
///
/// Well-Architected Tool This is the Well-Architected Tool API Reference. The WA Tool API provides programmatic access to the  Well-Architected Tool in the  Amazon Web Services Management Console. For information  about the Well-Architected Tool, see the  Well-Architected Tool User Guide.
public struct WellArchitected: AWSService {
    // MARK: Member variables

    /// Client used for communication with AWS
    public let client: AWSClient
    /// Service configuration
    public let config: AWSServiceConfig

    // MARK: Initialization

    /// Initialize the WellArchitected client
    /// - parameters:
    ///     - client: AWSClient used to process requests
    ///     - region: Region of server you want to communicate with. This will override the partition parameter.
    ///     - partition: AWS partition where service resides, standard (.aws), china (.awscn), government (.awsusgov).
    ///     - endpoint: Custom endpoint URL to use instead of standard AWS servers
    ///     - middleware: Middleware chain used to edit requests before they are sent and responses before they are decoded 
    ///     - timeout: Timeout value for HTTP requests
    ///     - byteBufferAllocator: Allocator for ByteBuffers
    ///     - options: Service options
    public init(
        client: AWSClient,
        region: SotoCore.Region? = nil,
        partition: AWSPartition = .aws,
        endpoint: String? = nil,
        middleware: AWSMiddlewareProtocol? = nil,
        timeout: TimeAmount? = nil,
        byteBufferAllocator: ByteBufferAllocator = ByteBufferAllocator(),
        options: AWSServiceConfig.Options = []
    ) {
        self.client = client
        self.config = AWSServiceConfig(
            region: region,
            partition: region?.partition ?? partition,
            serviceName: "WellArchitected",
            serviceIdentifier: "wellarchitected",
            serviceProtocol: .restjson,
            apiVersion: "2020-03-31",
            endpoint: endpoint,
            errorType: WellArchitectedErrorType.self,
            middleware: middleware,
            timeout: timeout,
            byteBufferAllocator: byteBufferAllocator,
            options: options
        )
    }





    // MARK: API Calls

    /// Associate a lens to a workload. Up to 10 lenses can be associated with a workload in a single API operation. A  maximum of 20 lenses can be associated with a workload.   Disclaimer  By accessing and/or applying custom lenses created by another Amazon Web Services user or account,  you acknowledge that custom lenses created by other users and shared with you are  Third Party Content as defined in the Amazon Web Services Customer Agreement.
    @Sendable
    public func associateLenses(_ input: AssociateLensesInput, logger: Logger = AWSClient.loggingDisabled) async throws {
        return try await self.client.execute(
            operation: "AssociateLenses", 
            path: "/workloads/{WorkloadId}/associateLenses", 
            httpMethod: .PATCH, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Create a lens share. The owner of a lens can share it with other Amazon Web Services accounts, users, an organization, and organizational units (OUs) in the same Amazon Web Services Region. Lenses provided by Amazon Web Services (Amazon Web Services Official Content) cannot be shared.  Shared access to a lens is not removed until the lens invitation is deleted. If you share a lens with an organization or OU, all accounts in the organization or OU are granted access to the lens. For more information, see Sharing a custom lens in the Well-Architected Tool User Guide.   Disclaimer  By sharing your custom lenses with other Amazon Web Services accounts,  you acknowledge that Amazon Web Services will make your custom lenses available to those  other accounts. Those other accounts may continue to access and use your  shared custom lenses even if you delete the custom lenses  from your own Amazon Web Services account or terminate  your Amazon Web Services account.
    @Sendable
    public func createLensShare(_ input: CreateLensShareInput, logger: Logger = AWSClient.loggingDisabled) async throws -> CreateLensShareOutput {
        return try await self.client.execute(
            operation: "CreateLensShare", 
            path: "/lenses/{LensAlias}/shares", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Create a new lens version. A lens can have up to 100 versions. Use this operation to publish a new lens version after you have imported a lens. The LensAlias  is used to identify the lens to be published.  The owner of a lens can share the lens with other  Amazon Web Services accounts and users in the same Amazon Web Services Region. Only the owner of a lens can delete it.
    @Sendable
    public func createLensVersion(_ input: CreateLensVersionInput, logger: Logger = AWSClient.loggingDisabled) async throws -> CreateLensVersionOutput {
        return try await self.client.execute(
            operation: "CreateLensVersion", 
            path: "/lenses/{LensAlias}/versions", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Create a milestone for an existing workload.
    @Sendable
    public func createMilestone(_ input: CreateMilestoneInput, logger: Logger = AWSClient.loggingDisabled) async throws -> CreateMilestoneOutput {
        return try await self.client.execute(
            operation: "CreateMilestone", 
            path: "/workloads/{WorkloadId}/milestones", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Create a new workload. The owner of a workload can share the workload with other Amazon Web Services accounts, users, an organization, and organizational units (OUs)  in the same Amazon Web Services Region. Only the owner of a workload can delete it. For more information, see Defining a Workload in the Well-Architected Tool User Guide.  Either AwsRegions, NonAwsRegions, or both must be specified when creating a workload. You also must specify ReviewOwner, even though the parameter is listed as not being required in the following section.
    @Sendable
    public func createWorkload(_ input: CreateWorkloadInput, logger: Logger = AWSClient.loggingDisabled) async throws -> CreateWorkloadOutput {
        return try await self.client.execute(
            operation: "CreateWorkload", 
            path: "/workloads", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Create a workload share. The owner of a workload can share it with other Amazon Web Services accounts and users in the same Amazon Web Services Region. Shared access to a workload is not removed until the workload invitation is deleted. If you share a workload with an organization or OU, all accounts in the organization or OU are granted access to the workload. For more information, see Sharing a workload in the Well-Architected Tool User Guide.
    @Sendable
    public func createWorkloadShare(_ input: CreateWorkloadShareInput, logger: Logger = AWSClient.loggingDisabled) async throws -> CreateWorkloadShareOutput {
        return try await self.client.execute(
            operation: "CreateWorkloadShare", 
            path: "/workloads/{WorkloadId}/shares", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Delete an existing lens. Only the owner of a lens can delete it.  After the lens is deleted,  Amazon Web Services accounts and users  that you shared the lens with can continue to use it, but they will no longer be able to apply it to new workloads.    Disclaimer  By sharing your custom lenses with other Amazon Web Services accounts,  you acknowledge that Amazon Web Services will make your custom lenses available to those  other accounts. Those other accounts may continue to access and use your  shared custom lenses even if you delete the custom lenses  from your own Amazon Web Services account or terminate  your Amazon Web Services account.
    @Sendable
    public func deleteLens(_ input: DeleteLensInput, logger: Logger = AWSClient.loggingDisabled) async throws {
        return try await self.client.execute(
            operation: "DeleteLens", 
            path: "/lenses/{LensAlias}", 
            httpMethod: .DELETE, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Delete a lens share. After the lens share is deleted,  Amazon Web Services accounts, users, organizations, and organizational units (OUs)  that you shared the lens with can continue to use it, but they will no longer be able to apply it to new workloads.   Disclaimer  By sharing your custom lenses with other Amazon Web Services accounts,  you acknowledge that Amazon Web Services will make your custom lenses available to those  other accounts. Those other accounts may continue to access and use your  shared custom lenses even if you delete the custom lenses  from your own Amazon Web Services account or terminate  your Amazon Web Services account.
    @Sendable
    public func deleteLensShare(_ input: DeleteLensShareInput, logger: Logger = AWSClient.loggingDisabled) async throws {
        return try await self.client.execute(
            operation: "DeleteLensShare", 
            path: "/lenses/{LensAlias}/shares/{ShareId}", 
            httpMethod: .DELETE, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Delete an existing workload.
    @Sendable
    public func deleteWorkload(_ input: DeleteWorkloadInput, logger: Logger = AWSClient.loggingDisabled) async throws {
        return try await self.client.execute(
            operation: "DeleteWorkload", 
            path: "/workloads/{WorkloadId}", 
            httpMethod: .DELETE, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Delete a workload share.
    @Sendable
    public func deleteWorkloadShare(_ input: DeleteWorkloadShareInput, logger: Logger = AWSClient.loggingDisabled) async throws {
        return try await self.client.execute(
            operation: "DeleteWorkloadShare", 
            path: "/workloads/{WorkloadId}/shares/{ShareId}", 
            httpMethod: .DELETE, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Disassociate a lens from a workload. Up to 10 lenses can be disassociated from a workload in a single API operation.  The Amazon Web Services Well-Architected Framework lens (wellarchitected) cannot be removed from a workload.
    @Sendable
    public func disassociateLenses(_ input: DisassociateLensesInput, logger: Logger = AWSClient.loggingDisabled) async throws {
        return try await self.client.execute(
            operation: "DisassociateLenses", 
            path: "/workloads/{WorkloadId}/disassociateLenses", 
            httpMethod: .PATCH, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Export an existing lens. Only the owner of a lens can export it. Lenses provided by Amazon Web Services (Amazon Web Services Official Content)  cannot be exported. Lenses are defined in JSON. For more information, see JSON format specification  in the Well-Architected Tool User Guide.   Disclaimer  Do not include or gather personal identifiable information (PII) of end users or  other identifiable individuals in or via your custom lenses. If your custom  lens or those shared with you and used in your account do include or collect  PII you are responsible for: ensuring that the included PII is processed in accordance  with applicable law, providing adequate privacy notices, and obtaining necessary  consents for processing such data.
    @Sendable
    public func exportLens(_ input: ExportLensInput, logger: Logger = AWSClient.loggingDisabled) async throws -> ExportLensOutput {
        return try await self.client.execute(
            operation: "ExportLens", 
            path: "/lenses/{LensAlias}/export", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Get the answer to a specific question in a workload review.
    @Sendable
    public func getAnswer(_ input: GetAnswerInput, logger: Logger = AWSClient.loggingDisabled) async throws -> GetAnswerOutput {
        return try await self.client.execute(
            operation: "GetAnswer", 
            path: "/workloads/{WorkloadId}/lensReviews/{LensAlias}/answers/{QuestionId}", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Get a consolidated report of your workloads. You can optionally choose to include workloads that have been shared with you.
    @Sendable
    public func getConsolidatedReport(_ input: GetConsolidatedReportInput, logger: Logger = AWSClient.loggingDisabled) async throws -> GetConsolidatedReportOutput {
        return try await self.client.execute(
            operation: "GetConsolidatedReport", 
            path: "/consolidatedReport", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Get an existing lens.
    @Sendable
    public func getLens(_ input: GetLensInput, logger: Logger = AWSClient.loggingDisabled) async throws -> GetLensOutput {
        return try await self.client.execute(
            operation: "GetLens", 
            path: "/lenses/{LensAlias}", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Get lens review.
    @Sendable
    public func getLensReview(_ input: GetLensReviewInput, logger: Logger = AWSClient.loggingDisabled) async throws -> GetLensReviewOutput {
        return try await self.client.execute(
            operation: "GetLensReview", 
            path: "/workloads/{WorkloadId}/lensReviews/{LensAlias}", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Get lens review report.
    @Sendable
    public func getLensReviewReport(_ input: GetLensReviewReportInput, logger: Logger = AWSClient.loggingDisabled) async throws -> GetLensReviewReportOutput {
        return try await self.client.execute(
            operation: "GetLensReviewReport", 
            path: "/workloads/{WorkloadId}/lensReviews/{LensAlias}/report", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Get lens version differences.
    @Sendable
    public func getLensVersionDifference(_ input: GetLensVersionDifferenceInput, logger: Logger = AWSClient.loggingDisabled) async throws -> GetLensVersionDifferenceOutput {
        return try await self.client.execute(
            operation: "GetLensVersionDifference", 
            path: "/lenses/{LensAlias}/versionDifference", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Get a milestone for an existing workload.
    @Sendable
    public func getMilestone(_ input: GetMilestoneInput, logger: Logger = AWSClient.loggingDisabled) async throws -> GetMilestoneOutput {
        return try await self.client.execute(
            operation: "GetMilestone", 
            path: "/workloads/{WorkloadId}/milestones/{MilestoneNumber}", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Get an existing workload.
    @Sendable
    public func getWorkload(_ input: GetWorkloadInput, logger: Logger = AWSClient.loggingDisabled) async throws -> GetWorkloadOutput {
        return try await self.client.execute(
            operation: "GetWorkload", 
            path: "/workloads/{WorkloadId}", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Import a new custom lens or update an existing custom lens. To update an existing custom lens, specify its ARN as the  LensAlias. If no ARN is specified, a new custom lens is created. The new or updated lens will have a status of DRAFT. The lens cannot be applied to workloads or shared with other Amazon Web Services accounts until it's published with CreateLensVersion. Lenses are defined in JSON. For more information, see JSON format specification  in the Well-Architected Tool User Guide. A custom lens cannot exceed 500 KB in size.   Disclaimer  Do not include or gather personal identifiable information (PII) of end users or  other identifiable individuals in or via your custom lenses. If your custom  lens or those shared with you and used in your account do include or collect  PII you are responsible for: ensuring that the included PII is processed in accordance  with applicable law, providing adequate privacy notices, and obtaining necessary  consents for processing such data.
    @Sendable
    public func importLens(_ input: ImportLensInput, logger: Logger = AWSClient.loggingDisabled) async throws -> ImportLensOutput {
        return try await self.client.execute(
            operation: "ImportLens", 
            path: "/importLens", 
            httpMethod: .PUT, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// List of answers for a particular workload and lens.
    @Sendable
    public func listAnswers(_ input: ListAnswersInput, logger: Logger = AWSClient.loggingDisabled) async throws -> ListAnswersOutput {
        return try await self.client.execute(
            operation: "ListAnswers", 
            path: "/workloads/{WorkloadId}/lensReviews/{LensAlias}/answers", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// List of Trusted Advisor check details by account related to the workload.
    @Sendable
    public func listCheckDetails(_ input: ListCheckDetailsInput, logger: Logger = AWSClient.loggingDisabled) async throws -> ListCheckDetailsOutput {
        return try await self.client.execute(
            operation: "ListCheckDetails", 
            path: "/workloads/{WorkloadId}/checks", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// List of Trusted Advisor checks summarized for all accounts related to the workload.
    @Sendable
    public func listCheckSummaries(_ input: ListCheckSummariesInput, logger: Logger = AWSClient.loggingDisabled) async throws -> ListCheckSummariesOutput {
        return try await self.client.execute(
            operation: "ListCheckSummaries", 
            path: "/workloads/{WorkloadId}/checkSummaries", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// List lens review improvements.
    @Sendable
    public func listLensReviewImprovements(_ input: ListLensReviewImprovementsInput, logger: Logger = AWSClient.loggingDisabled) async throws -> ListLensReviewImprovementsOutput {
        return try await self.client.execute(
            operation: "ListLensReviewImprovements", 
            path: "/workloads/{WorkloadId}/lensReviews/{LensAlias}/improvements", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// List lens reviews for a particular workload.
    @Sendable
    public func listLensReviews(_ input: ListLensReviewsInput, logger: Logger = AWSClient.loggingDisabled) async throws -> ListLensReviewsOutput {
        return try await self.client.execute(
            operation: "ListLensReviews", 
            path: "/workloads/{WorkloadId}/lensReviews", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// List the lens shares associated with the lens.
    @Sendable
    public func listLensShares(_ input: ListLensSharesInput, logger: Logger = AWSClient.loggingDisabled) async throws -> ListLensSharesOutput {
        return try await self.client.execute(
            operation: "ListLensShares", 
            path: "/lenses/{LensAlias}/shares", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// List the available lenses.
    @Sendable
    public func listLenses(_ input: ListLensesInput, logger: Logger = AWSClient.loggingDisabled) async throws -> ListLensesOutput {
        return try await self.client.execute(
            operation: "ListLenses", 
            path: "/lenses", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// List all milestones for an existing workload.
    @Sendable
    public func listMilestones(_ input: ListMilestonesInput, logger: Logger = AWSClient.loggingDisabled) async throws -> ListMilestonesOutput {
        return try await self.client.execute(
            operation: "ListMilestones", 
            path: "/workloads/{WorkloadId}/milestonesSummaries", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// List lens notifications.
    @Sendable
    public func listNotifications(_ input: ListNotificationsInput, logger: Logger = AWSClient.loggingDisabled) async throws -> ListNotificationsOutput {
        return try await self.client.execute(
            operation: "ListNotifications", 
            path: "/notifications", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// List  the workload invitations.
    @Sendable
    public func listShareInvitations(_ input: ListShareInvitationsInput, logger: Logger = AWSClient.loggingDisabled) async throws -> ListShareInvitationsOutput {
        return try await self.client.execute(
            operation: "ListShareInvitations", 
            path: "/shareInvitations", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// List the tags for a resource.  The WorkloadArn parameter can be either a workload ARN or a custom lens ARN.
    @Sendable
    public func listTagsForResource(_ input: ListTagsForResourceInput, logger: Logger = AWSClient.loggingDisabled) async throws -> ListTagsForResourceOutput {
        return try await self.client.execute(
            operation: "ListTagsForResource", 
            path: "/tags/{WorkloadArn}", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// List the workload shares associated with the workload.
    @Sendable
    public func listWorkloadShares(_ input: ListWorkloadSharesInput, logger: Logger = AWSClient.loggingDisabled) async throws -> ListWorkloadSharesOutput {
        return try await self.client.execute(
            operation: "ListWorkloadShares", 
            path: "/workloads/{WorkloadId}/shares", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Paginated list of workloads.
    @Sendable
    public func listWorkloads(_ input: ListWorkloadsInput, logger: Logger = AWSClient.loggingDisabled) async throws -> ListWorkloadsOutput {
        return try await self.client.execute(
            operation: "ListWorkloads", 
            path: "/workloadsSummaries", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Adds one or more tags to the specified resource.  The WorkloadArn parameter can be either a workload ARN or a custom lens ARN.
    @Sendable
    public func tagResource(_ input: TagResourceInput, logger: Logger = AWSClient.loggingDisabled) async throws -> TagResourceOutput {
        return try await self.client.execute(
            operation: "TagResource", 
            path: "/tags/{WorkloadArn}", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Deletes specified tags from a resource.  The WorkloadArn parameter can be either a workload ARN or a custom lens ARN.  To specify multiple tags, use separate tagKeys parameters, for example:  DELETE /tags/WorkloadArn?tagKeys=key1&tagKeys=key2
    @Sendable
    public func untagResource(_ input: UntagResourceInput, logger: Logger = AWSClient.loggingDisabled) async throws -> UntagResourceOutput {
        return try await self.client.execute(
            operation: "UntagResource", 
            path: "/tags/{WorkloadArn}", 
            httpMethod: .DELETE, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Update the answer to a specific question in a workload review.
    @Sendable
    public func updateAnswer(_ input: UpdateAnswerInput, logger: Logger = AWSClient.loggingDisabled) async throws -> UpdateAnswerOutput {
        return try await self.client.execute(
            operation: "UpdateAnswer", 
            path: "/workloads/{WorkloadId}/lensReviews/{LensAlias}/answers/{QuestionId}", 
            httpMethod: .PATCH, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Updates whether the Amazon Web Services account is opted into organization sharing and discovery integration features.
    @Sendable
    public func updateGlobalSettings(_ input: UpdateGlobalSettingsInput, logger: Logger = AWSClient.loggingDisabled) async throws {
        return try await self.client.execute(
            operation: "UpdateGlobalSettings", 
            path: "/global-settings", 
            httpMethod: .PATCH, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Update lens review for a particular workload.
    @Sendable
    public func updateLensReview(_ input: UpdateLensReviewInput, logger: Logger = AWSClient.loggingDisabled) async throws -> UpdateLensReviewOutput {
        return try await self.client.execute(
            operation: "UpdateLensReview", 
            path: "/workloads/{WorkloadId}/lensReviews/{LensAlias}", 
            httpMethod: .PATCH, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Update a workload or custom lens share invitation.  This API operation can be called independently of any resource. Previous documentation implied that a workload ARN must be specified.
    @Sendable
    public func updateShareInvitation(_ input: UpdateShareInvitationInput, logger: Logger = AWSClient.loggingDisabled) async throws -> UpdateShareInvitationOutput {
        return try await self.client.execute(
            operation: "UpdateShareInvitation", 
            path: "/shareInvitations/{ShareInvitationId}", 
            httpMethod: .PATCH, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Update an existing workload.
    @Sendable
    public func updateWorkload(_ input: UpdateWorkloadInput, logger: Logger = AWSClient.loggingDisabled) async throws -> UpdateWorkloadOutput {
        return try await self.client.execute(
            operation: "UpdateWorkload", 
            path: "/workloads/{WorkloadId}", 
            httpMethod: .PATCH, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Update a workload share.
    @Sendable
    public func updateWorkloadShare(_ input: UpdateWorkloadShareInput, logger: Logger = AWSClient.loggingDisabled) async throws -> UpdateWorkloadShareOutput {
        return try await self.client.execute(
            operation: "UpdateWorkloadShare", 
            path: "/workloads/{WorkloadId}/shares/{ShareId}", 
            httpMethod: .PATCH, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Upgrade lens review for a particular workload.
    @Sendable
    public func upgradeLensReview(_ input: UpgradeLensReviewInput, logger: Logger = AWSClient.loggingDisabled) async throws {
        return try await self.client.execute(
            operation: "UpgradeLensReview", 
            path: "/workloads/{WorkloadId}/lensReviews/{LensAlias}/upgrade", 
            httpMethod: .PUT, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
}

extension WellArchitected {
    /// Initializer required by `AWSService.with(middlewares:timeout:byteBufferAllocator:options)`. You are not able to use this initializer directly as there are not public
    /// initializers for `AWSServiceConfig.Patch`. Please use `AWSService.with(middlewares:timeout:byteBufferAllocator:options)` instead.
    public init(from: WellArchitected, patch: AWSServiceConfig.Patch) {
        self.client = from.client
        self.config = from.config.with(patch: patch)
    }
}

// MARK: Paginators

@available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
extension WellArchitected {
    /// Get a consolidated report of your workloads. You can optionally choose to include workloads that have been shared with you.
    /// Return PaginatorSequence for operation.
    ///
    /// - Parameters:
    ///   - input: Input for request
    ///   - logger: Logger used flot logging
    public func getConsolidatedReportPaginator(
        _ input: GetConsolidatedReportInput,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<GetConsolidatedReportInput, GetConsolidatedReportOutput> {
        return .init(
            input: input,
            command: self.getConsolidatedReport,
            inputKey: \GetConsolidatedReportInput.nextToken,
            outputKey: \GetConsolidatedReportOutput.nextToken,
            logger: logger
        )
    }

    /// List of answers for a particular workload and lens.
    /// Return PaginatorSequence for operation.
    ///
    /// - Parameters:
    ///   - input: Input for request
    ///   - logger: Logger used flot logging
    public func listAnswersPaginator(
        _ input: ListAnswersInput,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<ListAnswersInput, ListAnswersOutput> {
        return .init(
            input: input,
            command: self.listAnswers,
            inputKey: \ListAnswersInput.nextToken,
            outputKey: \ListAnswersOutput.nextToken,
            logger: logger
        )
    }

    /// List of Trusted Advisor check details by account related to the workload.
    /// Return PaginatorSequence for operation.
    ///
    /// - Parameters:
    ///   - input: Input for request
    ///   - logger: Logger used flot logging
    public func listCheckDetailsPaginator(
        _ input: ListCheckDetailsInput,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<ListCheckDetailsInput, ListCheckDetailsOutput> {
        return .init(
            input: input,
            command: self.listCheckDetails,
            inputKey: \ListCheckDetailsInput.nextToken,
            outputKey: \ListCheckDetailsOutput.nextToken,
            logger: logger
        )
    }

    /// List of Trusted Advisor checks summarized for all accounts related to the workload.
    /// Return PaginatorSequence for operation.
    ///
    /// - Parameters:
    ///   - input: Input for request
    ///   - logger: Logger used flot logging
    public func listCheckSummariesPaginator(
        _ input: ListCheckSummariesInput,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<ListCheckSummariesInput, ListCheckSummariesOutput> {
        return .init(
            input: input,
            command: self.listCheckSummaries,
            inputKey: \ListCheckSummariesInput.nextToken,
            outputKey: \ListCheckSummariesOutput.nextToken,
            logger: logger
        )
    }

    /// List lens review improvements.
    /// Return PaginatorSequence for operation.
    ///
    /// - Parameters:
    ///   - input: Input for request
    ///   - logger: Logger used flot logging
    public func listLensReviewImprovementsPaginator(
        _ input: ListLensReviewImprovementsInput,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<ListLensReviewImprovementsInput, ListLensReviewImprovementsOutput> {
        return .init(
            input: input,
            command: self.listLensReviewImprovements,
            inputKey: \ListLensReviewImprovementsInput.nextToken,
            outputKey: \ListLensReviewImprovementsOutput.nextToken,
            logger: logger
        )
    }

    /// List lens reviews for a particular workload.
    /// Return PaginatorSequence for operation.
    ///
    /// - Parameters:
    ///   - input: Input for request
    ///   - logger: Logger used flot logging
    public func listLensReviewsPaginator(
        _ input: ListLensReviewsInput,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<ListLensReviewsInput, ListLensReviewsOutput> {
        return .init(
            input: input,
            command: self.listLensReviews,
            inputKey: \ListLensReviewsInput.nextToken,
            outputKey: \ListLensReviewsOutput.nextToken,
            logger: logger
        )
    }

    /// List the lens shares associated with the lens.
    /// Return PaginatorSequence for operation.
    ///
    /// - Parameters:
    ///   - input: Input for request
    ///   - logger: Logger used flot logging
    public func listLensSharesPaginator(
        _ input: ListLensSharesInput,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<ListLensSharesInput, ListLensSharesOutput> {
        return .init(
            input: input,
            command: self.listLensShares,
            inputKey: \ListLensSharesInput.nextToken,
            outputKey: \ListLensSharesOutput.nextToken,
            logger: logger
        )
    }

    /// List the available lenses.
    /// Return PaginatorSequence for operation.
    ///
    /// - Parameters:
    ///   - input: Input for request
    ///   - logger: Logger used flot logging
    public func listLensesPaginator(
        _ input: ListLensesInput,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<ListLensesInput, ListLensesOutput> {
        return .init(
            input: input,
            command: self.listLenses,
            inputKey: \ListLensesInput.nextToken,
            outputKey: \ListLensesOutput.nextToken,
            logger: logger
        )
    }

    /// List all milestones for an existing workload.
    /// Return PaginatorSequence for operation.
    ///
    /// - Parameters:
    ///   - input: Input for request
    ///   - logger: Logger used flot logging
    public func listMilestonesPaginator(
        _ input: ListMilestonesInput,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<ListMilestonesInput, ListMilestonesOutput> {
        return .init(
            input: input,
            command: self.listMilestones,
            inputKey: \ListMilestonesInput.nextToken,
            outputKey: \ListMilestonesOutput.nextToken,
            logger: logger
        )
    }

    /// List lens notifications.
    /// Return PaginatorSequence for operation.
    ///
    /// - Parameters:
    ///   - input: Input for request
    ///   - logger: Logger used flot logging
    public func listNotificationsPaginator(
        _ input: ListNotificationsInput,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<ListNotificationsInput, ListNotificationsOutput> {
        return .init(
            input: input,
            command: self.listNotifications,
            inputKey: \ListNotificationsInput.nextToken,
            outputKey: \ListNotificationsOutput.nextToken,
            logger: logger
        )
    }

    /// List  the workload invitations.
    /// Return PaginatorSequence for operation.
    ///
    /// - Parameters:
    ///   - input: Input for request
    ///   - logger: Logger used flot logging
    public func listShareInvitationsPaginator(
        _ input: ListShareInvitationsInput,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<ListShareInvitationsInput, ListShareInvitationsOutput> {
        return .init(
            input: input,
            command: self.listShareInvitations,
            inputKey: \ListShareInvitationsInput.nextToken,
            outputKey: \ListShareInvitationsOutput.nextToken,
            logger: logger
        )
    }

    /// List the workload shares associated with the workload.
    /// Return PaginatorSequence for operation.
    ///
    /// - Parameters:
    ///   - input: Input for request
    ///   - logger: Logger used flot logging
    public func listWorkloadSharesPaginator(
        _ input: ListWorkloadSharesInput,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<ListWorkloadSharesInput, ListWorkloadSharesOutput> {
        return .init(
            input: input,
            command: self.listWorkloadShares,
            inputKey: \ListWorkloadSharesInput.nextToken,
            outputKey: \ListWorkloadSharesOutput.nextToken,
            logger: logger
        )
    }

    /// Paginated list of workloads.
    /// Return PaginatorSequence for operation.
    ///
    /// - Parameters:
    ///   - input: Input for request
    ///   - logger: Logger used flot logging
    public func listWorkloadsPaginator(
        _ input: ListWorkloadsInput,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<ListWorkloadsInput, ListWorkloadsOutput> {
        return .init(
            input: input,
            command: self.listWorkloads,
            inputKey: \ListWorkloadsInput.nextToken,
            outputKey: \ListWorkloadsOutput.nextToken,
            logger: logger
        )
    }
}

extension WellArchitected.GetConsolidatedReportInput: AWSPaginateToken {
    public func usingPaginationToken(_ token: String) -> WellArchitected.GetConsolidatedReportInput {
        return .init(
            format: self.format,
            includeSharedResources: self.includeSharedResources,
            maxResults: self.maxResults,
            nextToken: token
        )
    }
}

extension WellArchitected.ListAnswersInput: AWSPaginateToken {
    public func usingPaginationToken(_ token: String) -> WellArchitected.ListAnswersInput {
        return .init(
            lensAlias: self.lensAlias,
            maxResults: self.maxResults,
            milestoneNumber: self.milestoneNumber,
            nextToken: token,
            pillarId: self.pillarId,
            workloadId: self.workloadId
        )
    }
}

extension WellArchitected.ListCheckDetailsInput: AWSPaginateToken {
    public func usingPaginationToken(_ token: String) -> WellArchitected.ListCheckDetailsInput {
        return .init(
            choiceId: self.choiceId,
            lensArn: self.lensArn,
            maxResults: self.maxResults,
            nextToken: token,
            pillarId: self.pillarId,
            questionId: self.questionId,
            workloadId: self.workloadId
        )
    }
}

extension WellArchitected.ListCheckSummariesInput: AWSPaginateToken {
    public func usingPaginationToken(_ token: String) -> WellArchitected.ListCheckSummariesInput {
        return .init(
            choiceId: self.choiceId,
            lensArn: self.lensArn,
            maxResults: self.maxResults,
            nextToken: token,
            pillarId: self.pillarId,
            questionId: self.questionId,
            workloadId: self.workloadId
        )
    }
}

extension WellArchitected.ListLensReviewImprovementsInput: AWSPaginateToken {
    public func usingPaginationToken(_ token: String) -> WellArchitected.ListLensReviewImprovementsInput {
        return .init(
            lensAlias: self.lensAlias,
            maxResults: self.maxResults,
            milestoneNumber: self.milestoneNumber,
            nextToken: token,
            pillarId: self.pillarId,
            workloadId: self.workloadId
        )
    }
}

extension WellArchitected.ListLensReviewsInput: AWSPaginateToken {
    public func usingPaginationToken(_ token: String) -> WellArchitected.ListLensReviewsInput {
        return .init(
            maxResults: self.maxResults,
            milestoneNumber: self.milestoneNumber,
            nextToken: token,
            workloadId: self.workloadId
        )
    }
}

extension WellArchitected.ListLensSharesInput: AWSPaginateToken {
    public func usingPaginationToken(_ token: String) -> WellArchitected.ListLensSharesInput {
        return .init(
            lensAlias: self.lensAlias,
            maxResults: self.maxResults,
            nextToken: token,
            sharedWithPrefix: self.sharedWithPrefix,
            status: self.status
        )
    }
}

extension WellArchitected.ListLensesInput: AWSPaginateToken {
    public func usingPaginationToken(_ token: String) -> WellArchitected.ListLensesInput {
        return .init(
            lensName: self.lensName,
            lensStatus: self.lensStatus,
            lensType: self.lensType,
            maxResults: self.maxResults,
            nextToken: token
        )
    }
}

extension WellArchitected.ListMilestonesInput: AWSPaginateToken {
    public func usingPaginationToken(_ token: String) -> WellArchitected.ListMilestonesInput {
        return .init(
            maxResults: self.maxResults,
            nextToken: token,
            workloadId: self.workloadId
        )
    }
}

extension WellArchitected.ListNotificationsInput: AWSPaginateToken {
    public func usingPaginationToken(_ token: String) -> WellArchitected.ListNotificationsInput {
        return .init(
            maxResults: self.maxResults,
            nextToken: token,
            workloadId: self.workloadId
        )
    }
}

extension WellArchitected.ListShareInvitationsInput: AWSPaginateToken {
    public func usingPaginationToken(_ token: String) -> WellArchitected.ListShareInvitationsInput {
        return .init(
            lensNamePrefix: self.lensNamePrefix,
            maxResults: self.maxResults,
            nextToken: token,
            shareResourceType: self.shareResourceType,
            workloadNamePrefix: self.workloadNamePrefix
        )
    }
}

extension WellArchitected.ListWorkloadSharesInput: AWSPaginateToken {
    public func usingPaginationToken(_ token: String) -> WellArchitected.ListWorkloadSharesInput {
        return .init(
            maxResults: self.maxResults,
            nextToken: token,
            sharedWithPrefix: self.sharedWithPrefix,
            status: self.status,
            workloadId: self.workloadId
        )
    }
}

extension WellArchitected.ListWorkloadsInput: AWSPaginateToken {
    public func usingPaginationToken(_ token: String) -> WellArchitected.ListWorkloadsInput {
        return .init(
            maxResults: self.maxResults,
            nextToken: token,
            workloadNamePrefix: self.workloadNamePrefix
        )
    }
}
