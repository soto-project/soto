//===----------------------------------------------------------------------===//
//
// This source file is part of the Soto for AWS open source project
//
// Copyright (c) 2017-2021 the Soto project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
// See CONTRIBUTORS.txt for the list of Soto project authors
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by https://github.com/soto-project/soto-codegenerator.
// DO NOT EDIT.

import Foundation
import SotoCore

extension ComputeOptimizer {
    // MARK: Enums

    public enum CpuVendorArchitecture: String, CustomStringConvertible, Codable {
        case awsArm64 = "AWS_ARM64"
        case current = "CURRENT"
        public var description: String { return self.rawValue }
    }

    public enum Currency: String, CustomStringConvertible, Codable {
        case cny = "CNY"
        case usd = "USD"
        public var description: String { return self.rawValue }
    }

    public enum CurrentPerformanceRisk: String, CustomStringConvertible, Codable {
        case high = "High"
        case low = "Low"
        case medium = "Medium"
        case veryLow = "VeryLow"
        public var description: String { return self.rawValue }
    }

    public enum EBSFilterName: String, CustomStringConvertible, Codable {
        case finding = "Finding"
        public var description: String { return self.rawValue }
    }

    public enum EBSFinding: String, CustomStringConvertible, Codable {
        case notOptimized = "NotOptimized"
        case optimized = "Optimized"
        public var description: String { return self.rawValue }
    }

    public enum EBSMetricName: String, CustomStringConvertible, Codable {
        case volumeReadBytesPerSecond = "VolumeReadBytesPerSecond"
        case volumeReadOpsPerSecond = "VolumeReadOpsPerSecond"
        case volumeWriteBytesPerSecond = "VolumeWriteBytesPerSecond"
        case volumeWriteOpsPerSecond = "VolumeWriteOpsPerSecond"
        public var description: String { return self.rawValue }
    }

    public enum EnhancedInfrastructureMetrics: String, CustomStringConvertible, Codable {
        case active = "Active"
        case inactive = "Inactive"
        public var description: String { return self.rawValue }
    }

    public enum EnrollmentFilterName: String, CustomStringConvertible, Codable {
        case status = "Status"
        public var description: String { return self.rawValue }
    }

    public enum ExportableAutoScalingGroupField: String, CustomStringConvertible, Codable {
        case accountId = "AccountId"
        case autoScalingGroupArn = "AutoScalingGroupArn"
        case autoScalingGroupName = "AutoScalingGroupName"
        case currentConfigurationDesiredCapacity = "CurrentConfigurationDesiredCapacity"
        case currentConfigurationInstanceType = "CurrentConfigurationInstanceType"
        case currentConfigurationMaxSize = "CurrentConfigurationMaxSize"
        case currentConfigurationMinSize = "CurrentConfigurationMinSize"
        case currentMemory = "CurrentMemory"
        case currentNetwork = "CurrentNetwork"
        case currentOnDemandPrice = "CurrentOnDemandPrice"
        case currentPerformanceRisk = "CurrentPerformanceRisk"
        case currentStandardOneYearNoUpfrontReservedPrice = "CurrentStandardOneYearNoUpfrontReservedPrice"
        case currentStandardThreeYearNoUpfrontReservedPrice = "CurrentStandardThreeYearNoUpfrontReservedPrice"
        case currentStorage = "CurrentStorage"
        case currentVCpus = "CurrentVCpus"
        case effectiveRecommendationPreferencesCpuVendorArchitectures = "EffectiveRecommendationPreferencesCpuVendorArchitectures"
        case effectiveRecommendationPreferencesEnhancedInfrastructureMetrics = "EffectiveRecommendationPreferencesEnhancedInfrastructureMetrics"
        case finding = "Finding"
        case lastRefreshTimestamp = "LastRefreshTimestamp"
        case lookbackPeriodInDays = "LookbackPeriodInDays"
        case recommendationOptionsConfigurationDesiredCapacity = "RecommendationOptionsConfigurationDesiredCapacity"
        case recommendationOptionsConfigurationInstanceType = "RecommendationOptionsConfigurationInstanceType"
        case recommendationOptionsConfigurationMaxSize = "RecommendationOptionsConfigurationMaxSize"
        case recommendationOptionsConfigurationMinSize = "RecommendationOptionsConfigurationMinSize"
        case recommendationOptionsEstimatedMonthlySavingsCurrency = "RecommendationOptionsEstimatedMonthlySavingsCurrency"
        case recommendationOptionsEstimatedMonthlySavingsValue = "RecommendationOptionsEstimatedMonthlySavingsValue"
        case recommendationOptionsMemory = "RecommendationOptionsMemory"
        case recommendationOptionsNetwork = "RecommendationOptionsNetwork"
        case recommendationOptionsOnDemandPrice = "RecommendationOptionsOnDemandPrice"
        case recommendationOptionsPerformanceRisk = "RecommendationOptionsPerformanceRisk"
        case recommendationOptionsProjectedUtilizationMetricsCpuMaximum = "RecommendationOptionsProjectedUtilizationMetricsCpuMaximum"
        case recommendationOptionsProjectedUtilizationMetricsMemoryMaximum = "RecommendationOptionsProjectedUtilizationMetricsMemoryMaximum"
        case recommendationOptionsSavingsOpportunityPercentage = "RecommendationOptionsSavingsOpportunityPercentage"
        case recommendationOptionsStandardOneYearNoUpfrontReservedPrice = "RecommendationOptionsStandardOneYearNoUpfrontReservedPrice"
        case recommendationOptionsStandardThreeYearNoUpfrontReservedPrice = "RecommendationOptionsStandardThreeYearNoUpfrontReservedPrice"
        case recommendationOptionsStorage = "RecommendationOptionsStorage"
        case recommendationOptionsVcpus = "RecommendationOptionsVcpus"
        case utilizationMetricsCpuMaximum = "UtilizationMetricsCpuMaximum"
        case utilizationMetricsDiskReadBytesPerSecondMaximum = "UtilizationMetricsDiskReadBytesPerSecondMaximum"
        case utilizationMetricsDiskReadOpsPerSecondMaximum = "UtilizationMetricsDiskReadOpsPerSecondMaximum"
        case utilizationMetricsDiskWriteBytesPerSecondMaximum = "UtilizationMetricsDiskWriteBytesPerSecondMaximum"
        case utilizationMetricsDiskWriteOpsPerSecondMaximum = "UtilizationMetricsDiskWriteOpsPerSecondMaximum"
        case utilizationMetricsEbsReadBytesPerSecondMaximum = "UtilizationMetricsEbsReadBytesPerSecondMaximum"
        case utilizationMetricsEbsReadOpsPerSecondMaximum = "UtilizationMetricsEbsReadOpsPerSecondMaximum"
        case utilizationMetricsEbsWriteBytesPerSecondMaximum = "UtilizationMetricsEbsWriteBytesPerSecondMaximum"
        case utilizationMetricsEbsWriteOpsPerSecondMaximum = "UtilizationMetricsEbsWriteOpsPerSecondMaximum"
        case utilizationMetricsMemoryMaximum = "UtilizationMetricsMemoryMaximum"
        case utilizationMetricsNetworkInBytesPerSecondMaximum = "UtilizationMetricsNetworkInBytesPerSecondMaximum"
        case utilizationMetricsNetworkOutBytesPerSecondMaximum = "UtilizationMetricsNetworkOutBytesPerSecondMaximum"
        case utilizationMetricsNetworkPacketsInPerSecondMaximum = "UtilizationMetricsNetworkPacketsInPerSecondMaximum"
        case utilizationMetricsNetworkPacketsOutPerSecondMaximum = "UtilizationMetricsNetworkPacketsOutPerSecondMaximum"
        public var description: String { return self.rawValue }
    }

    public enum ExportableInstanceField: String, CustomStringConvertible, Codable {
        case accountId = "AccountId"
        case currentInstanceType = "CurrentInstanceType"
        case currentMemory = "CurrentMemory"
        case currentNetwork = "CurrentNetwork"
        case currentOnDemandPrice = "CurrentOnDemandPrice"
        case currentPerformanceRisk = "CurrentPerformanceRisk"
        case currentStandardOneYearNoUpfrontReservedPrice = "CurrentStandardOneYearNoUpfrontReservedPrice"
        case currentStandardThreeYearNoUpfrontReservedPrice = "CurrentStandardThreeYearNoUpfrontReservedPrice"
        case currentStorage = "CurrentStorage"
        case currentVCpus = "CurrentVCpus"
        case effectiveRecommendationPreferencesCpuVendorArchitectures = "EffectiveRecommendationPreferencesCpuVendorArchitectures"
        case effectiveRecommendationPreferencesEnhancedInfrastructureMetrics = "EffectiveRecommendationPreferencesEnhancedInfrastructureMetrics"
        case finding = "Finding"
        case findingReasonCodes = "FindingReasonCodes"
        case instanceArn = "InstanceArn"
        case instanceName = "InstanceName"
        case lastRefreshTimestamp = "LastRefreshTimestamp"
        case lookbackPeriodInDays = "LookbackPeriodInDays"
        case recommendationOptionsEstimatedMonthlySavingsCurrency = "RecommendationOptionsEstimatedMonthlySavingsCurrency"
        case recommendationOptionsEstimatedMonthlySavingsValue = "RecommendationOptionsEstimatedMonthlySavingsValue"
        case recommendationOptionsInstanceType = "RecommendationOptionsInstanceType"
        case recommendationOptionsMemory = "RecommendationOptionsMemory"
        case recommendationOptionsNetwork = "RecommendationOptionsNetwork"
        case recommendationOptionsOnDemandPrice = "RecommendationOptionsOnDemandPrice"
        case recommendationOptionsPerformanceRisk = "RecommendationOptionsPerformanceRisk"
        case recommendationOptionsPlatformDifferences = "RecommendationOptionsPlatformDifferences"
        case recommendationOptionsProjectedUtilizationMetricsCpuMaximum = "RecommendationOptionsProjectedUtilizationMetricsCpuMaximum"
        case recommendationOptionsProjectedUtilizationMetricsMemoryMaximum = "RecommendationOptionsProjectedUtilizationMetricsMemoryMaximum"
        case recommendationOptionsSavingsOpportunityPercentage = "RecommendationOptionsSavingsOpportunityPercentage"
        case recommendationOptionsStandardOneYearNoUpfrontReservedPrice = "RecommendationOptionsStandardOneYearNoUpfrontReservedPrice"
        case recommendationOptionsStandardThreeYearNoUpfrontReservedPrice = "RecommendationOptionsStandardThreeYearNoUpfrontReservedPrice"
        case recommendationOptionsStorage = "RecommendationOptionsStorage"
        case recommendationOptionsVcpus = "RecommendationOptionsVcpus"
        case recommendationsSourcesRecommendationSourceArn = "RecommendationsSourcesRecommendationSourceArn"
        case recommendationsSourcesRecommendationSourceType = "RecommendationsSourcesRecommendationSourceType"
        case utilizationMetricsCpuMaximum = "UtilizationMetricsCpuMaximum"
        case utilizationMetricsDiskReadBytesPerSecondMaximum = "UtilizationMetricsDiskReadBytesPerSecondMaximum"
        case utilizationMetricsDiskReadOpsPerSecondMaximum = "UtilizationMetricsDiskReadOpsPerSecondMaximum"
        case utilizationMetricsDiskWriteBytesPerSecondMaximum = "UtilizationMetricsDiskWriteBytesPerSecondMaximum"
        case utilizationMetricsDiskWriteOpsPerSecondMaximum = "UtilizationMetricsDiskWriteOpsPerSecondMaximum"
        case utilizationMetricsEbsReadBytesPerSecondMaximum = "UtilizationMetricsEbsReadBytesPerSecondMaximum"
        case utilizationMetricsEbsReadOpsPerSecondMaximum = "UtilizationMetricsEbsReadOpsPerSecondMaximum"
        case utilizationMetricsEbsWriteBytesPerSecondMaximum = "UtilizationMetricsEbsWriteBytesPerSecondMaximum"
        case utilizationMetricsEbsWriteOpsPerSecondMaximum = "UtilizationMetricsEbsWriteOpsPerSecondMaximum"
        case utilizationMetricsMemoryMaximum = "UtilizationMetricsMemoryMaximum"
        case utilizationMetricsNetworkInBytesPerSecondMaximum = "UtilizationMetricsNetworkInBytesPerSecondMaximum"
        case utilizationMetricsNetworkOutBytesPerSecondMaximum = "UtilizationMetricsNetworkOutBytesPerSecondMaximum"
        case utilizationMetricsNetworkPacketsInPerSecondMaximum = "UtilizationMetricsNetworkPacketsInPerSecondMaximum"
        case utilizationMetricsNetworkPacketsOutPerSecondMaximum = "UtilizationMetricsNetworkPacketsOutPerSecondMaximum"
        public var description: String { return self.rawValue }
    }

    public enum ExportableLambdaFunctionField: String, CustomStringConvertible, Codable {
        case accountId = "AccountId"
        case currentConfigurationMemorySize = "CurrentConfigurationMemorySize"
        case currentConfigurationTimeout = "CurrentConfigurationTimeout"
        case currentCostAverage = "CurrentCostAverage"
        case currentCostTotal = "CurrentCostTotal"
        case currentPerformanceRisk = "CurrentPerformanceRisk"
        case finding = "Finding"
        case findingReasonCodes = "FindingReasonCodes"
        case functionArn = "FunctionArn"
        case functionVersion = "FunctionVersion"
        case lastRefreshTimestamp = "LastRefreshTimestamp"
        case lookbackPeriodInDays = "LookbackPeriodInDays"
        case numberOfInvocations = "NumberOfInvocations"
        case recommendationOptionsConfigurationMemorySize = "RecommendationOptionsConfigurationMemorySize"
        case recommendationOptionsCostHigh = "RecommendationOptionsCostHigh"
        case recommendationOptionsCostLow = "RecommendationOptionsCostLow"
        case recommendationOptionsEstimatedMonthlySavingsCurrency = "RecommendationOptionsEstimatedMonthlySavingsCurrency"
        case recommendationOptionsEstimatedMonthlySavingsValue = "RecommendationOptionsEstimatedMonthlySavingsValue"
        case recommendationOptionsProjectedUtilizationMetricsDurationExpected = "RecommendationOptionsProjectedUtilizationMetricsDurationExpected"
        case recommendationOptionsProjectedUtilizationMetricsDurationLowerBound = "RecommendationOptionsProjectedUtilizationMetricsDurationLowerBound"
        case recommendationOptionsProjectedUtilizationMetricsDurationUpperBound = "RecommendationOptionsProjectedUtilizationMetricsDurationUpperBound"
        case recommendationOptionsSavingsOpportunityPercentage = "RecommendationOptionsSavingsOpportunityPercentage"
        case utilizationMetricsDurationAverage = "UtilizationMetricsDurationAverage"
        case utilizationMetricsDurationMaximum = "UtilizationMetricsDurationMaximum"
        case utilizationMetricsMemoryAverage = "UtilizationMetricsMemoryAverage"
        case utilizationMetricsMemoryMaximum = "UtilizationMetricsMemoryMaximum"
        public var description: String { return self.rawValue }
    }

    public enum ExportableVolumeField: String, CustomStringConvertible, Codable {
        case accountId = "AccountId"
        case currentConfigurationVolumeBaselineIOPS = "CurrentConfigurationVolumeBaselineIOPS"
        case currentConfigurationVolumeBaselineThroughput = "CurrentConfigurationVolumeBaselineThroughput"
        case currentConfigurationVolumeBurstIOPS = "CurrentConfigurationVolumeBurstIOPS"
        case currentConfigurationVolumeBurstThroughput = "CurrentConfigurationVolumeBurstThroughput"
        case currentConfigurationVolumeSize = "CurrentConfigurationVolumeSize"
        case currentConfigurationVolumeType = "CurrentConfigurationVolumeType"
        case currentMonthlyPrice = "CurrentMonthlyPrice"
        case currentPerformanceRisk = "CurrentPerformanceRisk"
        case finding = "Finding"
        case lastRefreshTimestamp = "LastRefreshTimestamp"
        case lookbackPeriodInDays = "LookbackPeriodInDays"
        case recommendationOptionsConfigurationVolumeBaselineIOPS = "RecommendationOptionsConfigurationVolumeBaselineIOPS"
        case recommendationOptionsConfigurationVolumeBaselineThroughput = "RecommendationOptionsConfigurationVolumeBaselineThroughput"
        case recommendationOptionsConfigurationVolumeBurstIOPS = "RecommendationOptionsConfigurationVolumeBurstIOPS"
        case recommendationOptionsConfigurationVolumeBurstThroughput = "RecommendationOptionsConfigurationVolumeBurstThroughput"
        case recommendationOptionsConfigurationVolumeSize = "RecommendationOptionsConfigurationVolumeSize"
        case recommendationOptionsConfigurationVolumeType = "RecommendationOptionsConfigurationVolumeType"
        case recommendationOptionsEstimatedMonthlySavingsCurrency = "RecommendationOptionsEstimatedMonthlySavingsCurrency"
        case recommendationOptionsEstimatedMonthlySavingsValue = "RecommendationOptionsEstimatedMonthlySavingsValue"
        case recommendationOptionsMonthlyPrice = "RecommendationOptionsMonthlyPrice"
        case recommendationOptionsPerformanceRisk = "RecommendationOptionsPerformanceRisk"
        case recommendationOptionsSavingsOpportunityPercentage = "RecommendationOptionsSavingsOpportunityPercentage"
        case utilizationMetricsVolumeReadBytesPerSecondMaximum = "UtilizationMetricsVolumeReadBytesPerSecondMaximum"
        case utilizationMetricsVolumeReadOpsPerSecondMaximum = "UtilizationMetricsVolumeReadOpsPerSecondMaximum"
        case utilizationMetricsVolumeWriteBytesPerSecondMaximum = "UtilizationMetricsVolumeWriteBytesPerSecondMaximum"
        case utilizationMetricsVolumeWriteOpsPerSecondMaximum = "UtilizationMetricsVolumeWriteOpsPerSecondMaximum"
        case volumeArn = "VolumeArn"
        public var description: String { return self.rawValue }
    }

    public enum FileFormat: String, CustomStringConvertible, Codable {
        case csv = "Csv"
        public var description: String { return self.rawValue }
    }

    public enum FilterName: String, CustomStringConvertible, Codable {
        case finding = "Finding"
        case findingReasonCodes = "FindingReasonCodes"
        case recommendationSourceType = "RecommendationSourceType"
        public var description: String { return self.rawValue }
    }

    public enum Finding: String, CustomStringConvertible, Codable {
        case notOptimized = "NotOptimized"
        case optimized = "Optimized"
        case overprovisioned = "Overprovisioned"
        case underprovisioned = "Underprovisioned"
        public var description: String { return self.rawValue }
    }

    public enum FindingReasonCode: String, CustomStringConvertible, Codable {
        case memoryOverprovisioned = "MemoryOverprovisioned"
        case memoryUnderprovisioned = "MemoryUnderprovisioned"
        public var description: String { return self.rawValue }
    }

    public enum InstanceRecommendationFindingReasonCode: String, CustomStringConvertible, Codable {
        case cpuOverprovisioned = "CPUOverprovisioned"
        case cpuUnderprovisioned = "CPUUnderprovisioned"
        case diskIOPSOverprovisioned = "DiskIOPSOverprovisioned"
        case diskIOPSUnderprovisioned = "DiskIOPSUnderprovisioned"
        case diskThroughputOverprovisioned = "DiskThroughputOverprovisioned"
        case diskThroughputUnderprovisioned = "DiskThroughputUnderprovisioned"
        case ebsiopsOverprovisioned = "EBSIOPSOverprovisioned"
        case ebsiopsUnderprovisioned = "EBSIOPSUnderprovisioned"
        case ebsThroughputOverprovisioned = "EBSThroughputOverprovisioned"
        case ebsThroughputUnderprovisioned = "EBSThroughputUnderprovisioned"
        case memoryOverprovisioned = "MemoryOverprovisioned"
        case memoryUnderprovisioned = "MemoryUnderprovisioned"
        case networkBandwidthOverprovisioned = "NetworkBandwidthOverprovisioned"
        case networkBandwidthUnderprovisioned = "NetworkBandwidthUnderprovisioned"
        case networkPPSOverprovisioned = "NetworkPPSOverprovisioned"
        case networkPPSUnderprovisioned = "NetworkPPSUnderprovisioned"
        public var description: String { return self.rawValue }
    }

    public enum JobFilterName: String, CustomStringConvertible, Codable {
        case jobStatus = "JobStatus"
        case resourceType = "ResourceType"
        public var description: String { return self.rawValue }
    }

    public enum JobStatus: String, CustomStringConvertible, Codable {
        case complete = "Complete"
        case failed = "Failed"
        case inProgress = "InProgress"
        case queued = "Queued"
        public var description: String { return self.rawValue }
    }

    public enum LambdaFunctionMemoryMetricName: String, CustomStringConvertible, Codable {
        case duration = "Duration"
        public var description: String { return self.rawValue }
    }

    public enum LambdaFunctionMemoryMetricStatistic: String, CustomStringConvertible, Codable {
        case expected = "Expected"
        case lowerBound = "LowerBound"
        case upperBound = "UpperBound"
        public var description: String { return self.rawValue }
    }

    public enum LambdaFunctionMetricName: String, CustomStringConvertible, Codable {
        case duration = "Duration"
        case memory = "Memory"
        public var description: String { return self.rawValue }
    }

    public enum LambdaFunctionMetricStatistic: String, CustomStringConvertible, Codable {
        case average = "Average"
        case maximum = "Maximum"
        public var description: String { return self.rawValue }
    }

    public enum LambdaFunctionRecommendationFilterName: String, CustomStringConvertible, Codable {
        case finding = "Finding"
        case findingReasonCode = "FindingReasonCode"
        public var description: String { return self.rawValue }
    }

    public enum LambdaFunctionRecommendationFinding: String, CustomStringConvertible, Codable {
        case notOptimized = "NotOptimized"
        case optimized = "Optimized"
        case unavailable = "Unavailable"
        public var description: String { return self.rawValue }
    }

    public enum LambdaFunctionRecommendationFindingReasonCode: String, CustomStringConvertible, Codable {
        case inconclusive = "Inconclusive"
        case insufficientData = "InsufficientData"
        case memoryOverprovisioned = "MemoryOverprovisioned"
        case memoryUnderprovisioned = "MemoryUnderprovisioned"
        public var description: String { return self.rawValue }
    }

    public enum MetricName: String, CustomStringConvertible, Codable {
        case cpu = "Cpu"
        case diskReadBytesPerSecond = "DISK_READ_BYTES_PER_SECOND"
        case diskReadOpsPerSecond = "DISK_READ_OPS_PER_SECOND"
        case diskWriteBytesPerSecond = "DISK_WRITE_BYTES_PER_SECOND"
        case diskWriteOpsPerSecond = "DISK_WRITE_OPS_PER_SECOND"
        case ebsReadBytesPerSecond = "EBS_READ_BYTES_PER_SECOND"
        case ebsReadOpsPerSecond = "EBS_READ_OPS_PER_SECOND"
        case ebsWriteBytesPerSecond = "EBS_WRITE_BYTES_PER_SECOND"
        case ebsWriteOpsPerSecond = "EBS_WRITE_OPS_PER_SECOND"
        case memory = "Memory"
        case networkInBytesPerSecond = "NETWORK_IN_BYTES_PER_SECOND"
        case networkOutBytesPerSecond = "NETWORK_OUT_BYTES_PER_SECOND"
        case networkPacketsInPerSecond = "NETWORK_PACKETS_IN_PER_SECOND"
        case networkPacketsOutPerSecond = "NETWORK_PACKETS_OUT_PER_SECOND"
        public var description: String { return self.rawValue }
    }

    public enum MetricStatistic: String, CustomStringConvertible, Codable {
        case average = "Average"
        case maximum = "Maximum"
        public var description: String { return self.rawValue }
    }

    public enum PlatformDifference: String, CustomStringConvertible, Codable {
        case architecture = "Architecture"
        case hypervisor = "Hypervisor"
        case instanceStoreAvailability = "InstanceStoreAvailability"
        case networkInterface = "NetworkInterface"
        case storageInterface = "StorageInterface"
        case virtualizationType = "VirtualizationType"
        public var description: String { return self.rawValue }
    }

    public enum RecommendationPreferenceName: String, CustomStringConvertible, Codable {
        case enhancedInfrastructureMetrics = "EnhancedInfrastructureMetrics"
        public var description: String { return self.rawValue }
    }

    public enum RecommendationSourceType: String, CustomStringConvertible, Codable {
        case autoScalingGroup = "AutoScalingGroup"
        case ebsVolume = "EbsVolume"
        case ec2Instance = "Ec2Instance"
        case lambdaFunction = "LambdaFunction"
        public var description: String { return self.rawValue }
    }

    public enum ResourceType: String, CustomStringConvertible, Codable {
        case autoScalingGroup = "AutoScalingGroup"
        case ebsVolume = "EbsVolume"
        case ec2Instance = "Ec2Instance"
        case lambdaFunction = "LambdaFunction"
        public var description: String { return self.rawValue }
    }

    public enum ScopeName: String, CustomStringConvertible, Codable {
        case accountId = "AccountId"
        case organization = "Organization"
        case resourceArn = "ResourceArn"
        public var description: String { return self.rawValue }
    }

    public enum Status: String, CustomStringConvertible, Codable {
        case active = "Active"
        case failed = "Failed"
        case inactive = "Inactive"
        case pending = "Pending"
        public var description: String { return self.rawValue }
    }

    // MARK: Shapes

    public struct AccountEnrollmentStatus: AWSDecodableShape {
        /// The Amazon Web Services account ID.
        public let accountId: String?
        /// The Unix epoch timestamp, in seconds, of when the account enrollment status was last updated.
        public let lastUpdatedTimestamp: Date?
        /// The account enrollment status.
        public let status: Status?
        /// The reason for the account enrollment status. For example, an account might show a status of Pending because member accounts of an organization require more time to be enrolled in the service.
        public let statusReason: String?

        public init(accountId: String? = nil, lastUpdatedTimestamp: Date? = nil, status: Status? = nil, statusReason: String? = nil) {
            self.accountId = accountId
            self.lastUpdatedTimestamp = lastUpdatedTimestamp
            self.status = status
            self.statusReason = statusReason
        }

        private enum CodingKeys: String, CodingKey {
            case accountId
            case lastUpdatedTimestamp
            case status
            case statusReason
        }
    }

    public struct AutoScalingGroupConfiguration: AWSDecodableShape {
        /// The desired capacity, or number of instances, for the Auto Scaling group.
        public let desiredCapacity: Int?
        /// The instance type for the Auto Scaling group.
        public let instanceType: String?
        /// The maximum size, or maximum number of instances, for the Auto Scaling group.
        public let maxSize: Int?
        /// The minimum size, or minimum number of instances, for the Auto Scaling group.
        public let minSize: Int?

        public init(desiredCapacity: Int? = nil, instanceType: String? = nil, maxSize: Int? = nil, minSize: Int? = nil) {
            self.desiredCapacity = desiredCapacity
            self.instanceType = instanceType
            self.maxSize = maxSize
            self.minSize = minSize
        }

        private enum CodingKeys: String, CodingKey {
            case desiredCapacity
            case instanceType
            case maxSize
            case minSize
        }
    }

    public struct AutoScalingGroupRecommendation: AWSDecodableShape {
        /// The Amazon Web Services account ID of the Auto Scaling group.
        public let accountId: String?
        /// The Amazon Resource Name (ARN) of the Auto Scaling group.
        public let autoScalingGroupArn: String?
        /// The name of the Auto Scaling group.
        public let autoScalingGroupName: String?
        /// An array of objects that describe the current configuration of the Auto Scaling group.
        public let currentConfiguration: AutoScalingGroupConfiguration?
        /// The risk of the current Auto Scaling group not meeting the performance needs of its workloads. The higher the risk, the more likely the current Auto Scaling group configuration has insufficient capacity and cannot meet workload requirements.
        public let currentPerformanceRisk: CurrentPerformanceRisk?
        /// An object that describes the effective recommendation preferences for the Auto Scaling group.
        public let effectiveRecommendationPreferences: EffectiveRecommendationPreferences?
        /// The finding classification of the Auto Scaling group. Findings for Auto Scaling groups include:     NotOptimized —An Auto Scaling group is considered not optimized when Compute Optimizer identifies a recommendation that can provide better performance for your workload.     Optimized —An Auto Scaling group is considered optimized when Compute Optimizer determines that the group is correctly provisioned to run your workload based on the chosen instance type. For optimized resources, Compute Optimizer might recommend a new generation instance type.
        public let finding: Finding?
        /// The timestamp of when the Auto Scaling group recommendation was last generated.
        public let lastRefreshTimestamp: Date?
        /// The number of days for which utilization metrics were analyzed for the Auto Scaling group.
        public let lookBackPeriodInDays: Double?
        /// An array of objects that describe the recommendation options for the Auto Scaling group.
        public let recommendationOptions: [AutoScalingGroupRecommendationOption]?
        /// An array of objects that describe the utilization metrics of the Auto Scaling group.
        public let utilizationMetrics: [UtilizationMetric]?

        public init(accountId: String? = nil, autoScalingGroupArn: String? = nil, autoScalingGroupName: String? = nil, currentConfiguration: AutoScalingGroupConfiguration? = nil, currentPerformanceRisk: CurrentPerformanceRisk? = nil, effectiveRecommendationPreferences: EffectiveRecommendationPreferences? = nil, finding: Finding? = nil, lastRefreshTimestamp: Date? = nil, lookBackPeriodInDays: Double? = nil, recommendationOptions: [AutoScalingGroupRecommendationOption]? = nil, utilizationMetrics: [UtilizationMetric]? = nil) {
            self.accountId = accountId
            self.autoScalingGroupArn = autoScalingGroupArn
            self.autoScalingGroupName = autoScalingGroupName
            self.currentConfiguration = currentConfiguration
            self.currentPerformanceRisk = currentPerformanceRisk
            self.effectiveRecommendationPreferences = effectiveRecommendationPreferences
            self.finding = finding
            self.lastRefreshTimestamp = lastRefreshTimestamp
            self.lookBackPeriodInDays = lookBackPeriodInDays
            self.recommendationOptions = recommendationOptions
            self.utilizationMetrics = utilizationMetrics
        }

        private enum CodingKeys: String, CodingKey {
            case accountId
            case autoScalingGroupArn
            case autoScalingGroupName
            case currentConfiguration
            case currentPerformanceRisk
            case effectiveRecommendationPreferences
            case finding
            case lastRefreshTimestamp
            case lookBackPeriodInDays
            case recommendationOptions
            case utilizationMetrics
        }
    }

    public struct AutoScalingGroupRecommendationOption: AWSDecodableShape {
        /// An array of objects that describe an Auto Scaling group configuration.
        public let configuration: AutoScalingGroupConfiguration?
        /// The performance risk of the Auto Scaling group configuration recommendation. Performance risk indicates the likelihood of the recommended instance type not meeting the resource needs of your workload. Compute Optimizer calculates an individual performance risk score for each specification of the recommended instance, including CPU, memory, EBS throughput, EBS IOPS, disk throughput, disk IOPS, network throughput, and network PPS. The performance risk of the recommended instance is calculated as the maximum performance risk score across the analyzed resource specifications. The value ranges from 0 - 4, with 0 meaning that the recommended resource is predicted to always provide enough hardware capability. The higher the performance risk is, the more likely you should validate whether the recommendation will meet the performance requirements of your workload before migrating your resource.
        public let performanceRisk: Double?
        /// An array of objects that describe the projected utilization metrics of the Auto Scaling group recommendation option.  The Cpu and Memory metrics are the only projected utilization metrics returned. Additionally, the Memory metric is returned only for resources that have the unified CloudWatch agent installed on them. For more information, see Enabling Memory Utilization with the CloudWatch Agent.
        public let projectedUtilizationMetrics: [UtilizationMetric]?
        /// The rank of the Auto Scaling group recommendation option. The top recommendation option is ranked as 1.
        public let rank: Int?
        /// An object that describes the savings opportunity for the Auto Scaling group recommendation option. Savings opportunity includes the estimated monthly savings amount and percentage.
        public let savingsOpportunity: SavingsOpportunity?

        public init(configuration: AutoScalingGroupConfiguration? = nil, performanceRisk: Double? = nil, projectedUtilizationMetrics: [UtilizationMetric]? = nil, rank: Int? = nil, savingsOpportunity: SavingsOpportunity? = nil) {
            self.configuration = configuration
            self.performanceRisk = performanceRisk
            self.projectedUtilizationMetrics = projectedUtilizationMetrics
            self.rank = rank
            self.savingsOpportunity = savingsOpportunity
        }

        private enum CodingKeys: String, CodingKey {
            case configuration
            case performanceRisk
            case projectedUtilizationMetrics
            case rank
            case savingsOpportunity
        }
    }

    public struct CurrentPerformanceRiskRatings: AWSDecodableShape {
        /// A count of the applicable resource types with a high performance risk rating.
        public let high: Int64?
        /// A count of the applicable resource types with a low performance risk rating.
        public let low: Int64?
        /// A count of the applicable resource types with a medium performance risk rating.
        public let medium: Int64?
        /// A count of the applicable resource types with a very low performance risk rating.
        public let veryLow: Int64?

        public init(high: Int64? = nil, low: Int64? = nil, medium: Int64? = nil, veryLow: Int64? = nil) {
            self.high = high
            self.low = low
            self.medium = medium
            self.veryLow = veryLow
        }

        private enum CodingKeys: String, CodingKey {
            case high
            case low
            case medium
            case veryLow
        }
    }

    public struct DeleteRecommendationPreferencesRequest: AWSEncodableShape {
        /// The name of the recommendation preference to delete. Enhanced infrastructure metrics (EnhancedInfrastructureMetrics) is the only feature that can be activated through preferences. Therefore, it is also the only recommendation preference that can be deleted.
        public let recommendationPreferenceNames: [RecommendationPreferenceName]
        /// The target resource type of the recommendation preference to delete. The Ec2Instance option encompasses standalone instances and instances that are part of Auto Scaling groups. The AutoScalingGroup option encompasses only instances that are part of an Auto Scaling group.
        public let resourceType: ResourceType
        /// An object that describes the scope of the recommendation preference to delete. You can delete recommendation preferences that are created at the organization level (for management accounts of an organization only), account level, and resource level. For more information, see Activating enhanced infrastructure metrics in the Compute Optimizer User Guide.
        public let scope: Scope?

        public init(recommendationPreferenceNames: [RecommendationPreferenceName], resourceType: ResourceType, scope: Scope? = nil) {
            self.recommendationPreferenceNames = recommendationPreferenceNames
            self.resourceType = resourceType
            self.scope = scope
        }

        private enum CodingKeys: String, CodingKey {
            case recommendationPreferenceNames
            case resourceType
            case scope
        }
    }

    public struct DeleteRecommendationPreferencesResponse: AWSDecodableShape {
        public init() {}
    }

    public struct DescribeRecommendationExportJobsRequest: AWSEncodableShape {
        /// An array of objects to specify a filter that returns a more specific list of export jobs.
        public let filters: [JobFilter]?
        /// The identification numbers of the export jobs to return. An export job ID is returned when you create an export using the ExportAutoScalingGroupRecommendations or ExportEC2InstanceRecommendations actions. All export jobs created in the last seven days are returned if this parameter is omitted.
        public let jobIds: [String]?
        /// The maximum number of export jobs to return with a single request. To retrieve the remaining results, make another request with the returned nextToken value.
        public let maxResults: Int?
        /// The token to advance to the next page of export jobs.
        public let nextToken: String?

        public init(filters: [JobFilter]? = nil, jobIds: [String]? = nil, maxResults: Int? = nil, nextToken: String? = nil) {
            self.filters = filters
            self.jobIds = jobIds
            self.maxResults = maxResults
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case filters
            case jobIds
            case maxResults
            case nextToken
        }
    }

    public struct DescribeRecommendationExportJobsResponse: AWSDecodableShape {
        /// The token to use to advance to the next page of export jobs. This value is null when there are no more pages of export jobs to return.
        public let nextToken: String?
        /// An array of objects that describe recommendation export jobs.
        public let recommendationExportJobs: [RecommendationExportJob]?

        public init(nextToken: String? = nil, recommendationExportJobs: [RecommendationExportJob]? = nil) {
            self.nextToken = nextToken
            self.recommendationExportJobs = recommendationExportJobs
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken
            case recommendationExportJobs
        }
    }

    public struct EBSFilter: AWSEncodableShape {
        /// The name of the filter. Specify Finding to return recommendations with a specific finding classification (for example, NotOptimized).
        public let name: EBSFilterName?
        /// The value of the filter. The valid values are Optimized, or NotOptimized.
        public let values: [String]?

        public init(name: EBSFilterName? = nil, values: [String]? = nil) {
            self.name = name
            self.values = values
        }

        private enum CodingKeys: String, CodingKey {
            case name
            case values
        }
    }

    public struct EBSUtilizationMetric: AWSDecodableShape {
        /// The name of the utilization metric. The following utilization metrics are available:    VolumeReadOpsPerSecond - The completed read operations per second from the volume in a specified period of time. Unit: Count    VolumeWriteOpsPerSecond - The completed write operations per second to the volume in a specified period of time. Unit: Count    VolumeReadBytesPerSecond - The bytes read per second from the volume in a specified period of time. Unit: Bytes    VolumeWriteBytesPerSecond - The bytes written to the volume in a specified period of time. Unit: Bytes
        public let name: EBSMetricName?
        /// The statistic of the utilization metric. The Compute Optimizer API, Command Line Interface (CLI), and SDKs return utilization metrics using only the Maximum statistic, which is the highest value observed during the specified period. The Compute Optimizer console displays graphs for some utilization metrics using the Average statistic, which is the value of Sum / SampleCount during the specified period. For more information, see Viewing resource recommendations in the Compute Optimizer User Guide. You can also get averaged utilization metric data for your resources using Amazon CloudWatch. For more information, see the Amazon CloudWatch User Guide.
        public let statistic: MetricStatistic?
        /// The value of the utilization metric.
        public let value: Double?

        public init(name: EBSMetricName? = nil, statistic: MetricStatistic? = nil, value: Double? = nil) {
            self.name = name
            self.statistic = statistic
            self.value = value
        }

        private enum CodingKeys: String, CodingKey {
            case name
            case statistic
            case value
        }
    }

    public struct EffectiveRecommendationPreferences: AWSDecodableShape {
        /// Describes the CPU vendor and architecture for an instance or Auto Scaling group recommendations. For example, when you specify AWS_ARM64 with:   A GetEC2InstanceRecommendations or GetAutoScalingGroupRecommendations request, Compute Optimizer returns recommendations that consist of Graviton2 instance types only.   A GetEC2RecommendationProjectedMetrics request, Compute Optimizer returns projected utilization metrics for Graviton2 instance type recommendations only.   A ExportEC2InstanceRecommendations or ExportAutoScalingGroupRecommendations request, Compute Optimizer exports recommendations that consist of Graviton2 instance types only.
        public let cpuVendorArchitectures: [CpuVendorArchitecture]?
        /// Describes the activation status of the enhanced infrastructure metrics preference. A status of Active confirms that the preference is applied in the latest recommendation refresh, and a status of Inactive confirms that it's not yet applied.
        public let enhancedInfrastructureMetrics: EnhancedInfrastructureMetrics?

        public init(cpuVendorArchitectures: [CpuVendorArchitecture]? = nil, enhancedInfrastructureMetrics: EnhancedInfrastructureMetrics? = nil) {
            self.cpuVendorArchitectures = cpuVendorArchitectures
            self.enhancedInfrastructureMetrics = enhancedInfrastructureMetrics
        }

        private enum CodingKeys: String, CodingKey {
            case cpuVendorArchitectures
            case enhancedInfrastructureMetrics
        }
    }

    public struct EnrollmentFilter: AWSEncodableShape {
        /// The name of the filter. Specify Status to return accounts with a specific enrollment status (for example, Active).
        public let name: EnrollmentFilterName?
        /// The value of the filter. The valid values are Active, Inactive, Pending, and Failed.
        public let values: [String]?

        public init(name: EnrollmentFilterName? = nil, values: [String]? = nil) {
            self.name = name
            self.values = values
        }

        private enum CodingKeys: String, CodingKey {
            case name
            case values
        }
    }

    public struct EstimatedMonthlySavings: AWSDecodableShape {
        /// The currency of the estimated monthly savings.
        public let currency: Currency?
        /// The value of the estimated monthly savings.
        public let value: Double?

        public init(currency: Currency? = nil, value: Double? = nil) {
            self.currency = currency
            self.value = value
        }

        private enum CodingKeys: String, CodingKey {
            case currency
            case value
        }
    }

    public struct ExportAutoScalingGroupRecommendationsRequest: AWSEncodableShape {
        /// The IDs of the Amazon Web Services accounts for which to export Auto Scaling group recommendations. If your account is the management account of an organization, use this parameter to specify the member account for which you want to export recommendations. This parameter cannot be specified together with the include member accounts parameter. The parameters are mutually exclusive. Recommendations for member accounts are not included in the export if this parameter, or the include member accounts parameter, is omitted. You can specify multiple account IDs per request.
        public let accountIds: [String]?
        /// The recommendations data to include in the export file. For more information about the fields that can be exported, see Exported files in the Compute Optimizer User Guide.
        public let fieldsToExport: [ExportableAutoScalingGroupField]?
        /// The format of the export file. The only export file format currently supported is Csv.
        public let fileFormat: FileFormat?
        /// An array of objects to specify a filter that exports a more specific set of Auto Scaling group recommendations.
        public let filters: [Filter]?
        /// Indicates whether to include recommendations for resources in all member accounts of the organization if your account is the management account of an organization. The member accounts must also be opted in to Compute Optimizer, and trusted access for Compute Optimizer must be enabled in the organization account. For more information, see Compute Optimizer and Amazon Web Services Organizations trusted access in the Compute Optimizer User Guide. Recommendations for member accounts of the organization are not included in the export file if this parameter is omitted. This parameter cannot be specified together with the account IDs parameter. The parameters are mutually exclusive. Recommendations for member accounts are not included in the export if this parameter, or the account IDs parameter, is omitted.
        public let includeMemberAccounts: Bool?
        /// An object to specify the preferences for the Auto Scaling group recommendations to export.
        public let recommendationPreferences: RecommendationPreferences?
        /// An object to specify the destination Amazon Simple Storage Service (Amazon S3) bucket name and key prefix for the export job. You must create the destination Amazon S3 bucket for your recommendations export before you create the export job. Compute Optimizer does not create the S3 bucket for you. After you create the S3 bucket, ensure that it has the required permissions policy to allow Compute Optimizer to write the export file to it. If you plan to specify an object prefix when you create the export job, you must include the object prefix in the policy that you add to the S3 bucket. For more information, see Amazon S3 Bucket Policy for Compute Optimizer in the Compute Optimizer User Guide.
        public let s3DestinationConfig: S3DestinationConfig

        public init(accountIds: [String]? = nil, fieldsToExport: [ExportableAutoScalingGroupField]? = nil, fileFormat: FileFormat? = nil, filters: [Filter]? = nil, includeMemberAccounts: Bool? = nil, recommendationPreferences: RecommendationPreferences? = nil, s3DestinationConfig: S3DestinationConfig) {
            self.accountIds = accountIds
            self.fieldsToExport = fieldsToExport
            self.fileFormat = fileFormat
            self.filters = filters
            self.includeMemberAccounts = includeMemberAccounts
            self.recommendationPreferences = recommendationPreferences
            self.s3DestinationConfig = s3DestinationConfig
        }

        private enum CodingKeys: String, CodingKey {
            case accountIds
            case fieldsToExport
            case fileFormat
            case filters
            case includeMemberAccounts
            case recommendationPreferences
            case s3DestinationConfig
        }
    }

    public struct ExportAutoScalingGroupRecommendationsResponse: AWSDecodableShape {
        /// The identification number of the export job. Use the DescribeRecommendationExportJobs action, and specify the job ID to view the status of an export job.
        public let jobId: String?
        /// An object that describes the destination Amazon S3 bucket of a recommendations export file.
        public let s3Destination: S3Destination?

        public init(jobId: String? = nil, s3Destination: S3Destination? = nil) {
            self.jobId = jobId
            self.s3Destination = s3Destination
        }

        private enum CodingKeys: String, CodingKey {
            case jobId
            case s3Destination
        }
    }

    public struct ExportDestination: AWSDecodableShape {
        /// An object that describes the destination Amazon Simple Storage Service (Amazon S3) bucket name and object keys of a recommendations export file, and its associated metadata file.
        public let s3: S3Destination?

        public init(s3: S3Destination? = nil) {
            self.s3 = s3
        }

        private enum CodingKeys: String, CodingKey {
            case s3
        }
    }

    public struct ExportEBSVolumeRecommendationsRequest: AWSEncodableShape {
        /// The IDs of the Amazon Web Services accounts for which to export Amazon EBS volume recommendations. If your account is the management account of an organization, use this parameter to specify the member account for which you want to export recommendations. This parameter cannot be specified together with the include member accounts parameter. The parameters are mutually exclusive. Recommendations for member accounts are not included in the export if this parameter, or the include member accounts parameter, is omitted. You can specify multiple account IDs per request.
        public let accountIds: [String]?
        /// The recommendations data to include in the export file. For more information about the fields that can be exported, see Exported files in the Compute Optimizer User Guide.
        public let fieldsToExport: [ExportableVolumeField]?
        /// The format of the export file. The only export file format currently supported is Csv.
        public let fileFormat: FileFormat?
        /// An array of objects to specify a filter that exports a more specific set of Amazon EBS volume recommendations.
        public let filters: [EBSFilter]?
        /// Indicates whether to include recommendations for resources in all member accounts of the organization if your account is the management account of an organization. The member accounts must also be opted in to Compute Optimizer, and trusted access for Compute Optimizer must be enabled in the organization account. For more information, see Compute Optimizer and Amazon Web Services Organizations trusted access in the Compute Optimizer User Guide. Recommendations for member accounts of the organization are not included in the export file if this parameter is omitted. This parameter cannot be specified together with the account IDs parameter. The parameters are mutually exclusive. Recommendations for member accounts are not included in the export if this parameter, or the account IDs parameter, is omitted.
        public let includeMemberAccounts: Bool?
        public let s3DestinationConfig: S3DestinationConfig

        public init(accountIds: [String]? = nil, fieldsToExport: [ExportableVolumeField]? = nil, fileFormat: FileFormat? = nil, filters: [EBSFilter]? = nil, includeMemberAccounts: Bool? = nil, s3DestinationConfig: S3DestinationConfig) {
            self.accountIds = accountIds
            self.fieldsToExport = fieldsToExport
            self.fileFormat = fileFormat
            self.filters = filters
            self.includeMemberAccounts = includeMemberAccounts
            self.s3DestinationConfig = s3DestinationConfig
        }

        private enum CodingKeys: String, CodingKey {
            case accountIds
            case fieldsToExport
            case fileFormat
            case filters
            case includeMemberAccounts
            case s3DestinationConfig
        }
    }

    public struct ExportEBSVolumeRecommendationsResponse: AWSDecodableShape {
        /// The identification number of the export job. Use the DescribeRecommendationExportJobs action, and specify the job ID to view the status of an export job.
        public let jobId: String?
        public let s3Destination: S3Destination?

        public init(jobId: String? = nil, s3Destination: S3Destination? = nil) {
            self.jobId = jobId
            self.s3Destination = s3Destination
        }

        private enum CodingKeys: String, CodingKey {
            case jobId
            case s3Destination
        }
    }

    public struct ExportEC2InstanceRecommendationsRequest: AWSEncodableShape {
        /// The IDs of the Amazon Web Services accounts for which to export instance recommendations. If your account is the management account of an organization, use this parameter to specify the member account for which you want to export recommendations. This parameter cannot be specified together with the include member accounts parameter. The parameters are mutually exclusive. Recommendations for member accounts are not included in the export if this parameter, or the include member accounts parameter, is omitted. You can specify multiple account IDs per request.
        public let accountIds: [String]?
        /// The recommendations data to include in the export file. For more information about the fields that can be exported, see Exported files in the Compute Optimizer User Guide.
        public let fieldsToExport: [ExportableInstanceField]?
        /// The format of the export file. The only export file format currently supported is Csv.
        public let fileFormat: FileFormat?
        /// An array of objects to specify a filter that exports a more specific set of instance recommendations.
        public let filters: [Filter]?
        /// Indicates whether to include recommendations for resources in all member accounts of the organization if your account is the management account of an organization. The member accounts must also be opted in to Compute Optimizer, and trusted access for Compute Optimizer must be enabled in the organization account. For more information, see Compute Optimizer and Amazon Web Services Organizations trusted access in the Compute Optimizer User Guide. Recommendations for member accounts of the organization are not included in the export file if this parameter is omitted. Recommendations for member accounts are not included in the export if this parameter, or the account IDs parameter, is omitted.
        public let includeMemberAccounts: Bool?
        /// An object to specify the preferences for the Amazon EC2 instance recommendations to export.
        public let recommendationPreferences: RecommendationPreferences?
        /// An object to specify the destination Amazon Simple Storage Service (Amazon S3) bucket name and key prefix for the export job. You must create the destination Amazon S3 bucket for your recommendations export before you create the export job. Compute Optimizer does not create the S3 bucket for you. After you create the S3 bucket, ensure that it has the required permissions policy to allow Compute Optimizer to write the export file to it. If you plan to specify an object prefix when you create the export job, you must include the object prefix in the policy that you add to the S3 bucket. For more information, see Amazon S3 Bucket Policy for Compute Optimizer in the Compute Optimizer User Guide.
        public let s3DestinationConfig: S3DestinationConfig

        public init(accountIds: [String]? = nil, fieldsToExport: [ExportableInstanceField]? = nil, fileFormat: FileFormat? = nil, filters: [Filter]? = nil, includeMemberAccounts: Bool? = nil, recommendationPreferences: RecommendationPreferences? = nil, s3DestinationConfig: S3DestinationConfig) {
            self.accountIds = accountIds
            self.fieldsToExport = fieldsToExport
            self.fileFormat = fileFormat
            self.filters = filters
            self.includeMemberAccounts = includeMemberAccounts
            self.recommendationPreferences = recommendationPreferences
            self.s3DestinationConfig = s3DestinationConfig
        }

        private enum CodingKeys: String, CodingKey {
            case accountIds
            case fieldsToExport
            case fileFormat
            case filters
            case includeMemberAccounts
            case recommendationPreferences
            case s3DestinationConfig
        }
    }

    public struct ExportEC2InstanceRecommendationsResponse: AWSDecodableShape {
        /// The identification number of the export job. Use the DescribeRecommendationExportJobs action, and specify the job ID to view the status of an export job.
        public let jobId: String?
        /// An object that describes the destination Amazon S3 bucket of a recommendations export file.
        public let s3Destination: S3Destination?

        public init(jobId: String? = nil, s3Destination: S3Destination? = nil) {
            self.jobId = jobId
            self.s3Destination = s3Destination
        }

        private enum CodingKeys: String, CodingKey {
            case jobId
            case s3Destination
        }
    }

    public struct ExportLambdaFunctionRecommendationsRequest: AWSEncodableShape {
        /// The IDs of the Amazon Web Services accounts for which to export Lambda function recommendations. If your account is the management account of an organization, use this parameter to specify the member account for which you want to export recommendations. This parameter cannot be specified together with the include member accounts parameter. The parameters are mutually exclusive. Recommendations for member accounts are not included in the export if this parameter, or the include member accounts parameter, is omitted. You can specify multiple account IDs per request.
        public let accountIds: [String]?
        /// The recommendations data to include in the export file. For more information about the fields that can be exported, see Exported files in the Compute Optimizer User Guide.
        public let fieldsToExport: [ExportableLambdaFunctionField]?
        /// The format of the export file. The only export file format currently supported is Csv.
        public let fileFormat: FileFormat?
        /// An array of objects to specify a filter that exports a more specific set of Lambda function recommendations.
        public let filters: [LambdaFunctionRecommendationFilter]?
        /// Indicates whether to include recommendations for resources in all member accounts of the organization if your account is the management account of an organization. The member accounts must also be opted in to Compute Optimizer, and trusted access for Compute Optimizer must be enabled in the organization account. For more information, see Compute Optimizer and Amazon Web Services Organizations trusted access in the Compute Optimizer User Guide. Recommendations for member accounts of the organization are not included in the export file if this parameter is omitted. This parameter cannot be specified together with the account IDs parameter. The parameters are mutually exclusive. Recommendations for member accounts are not included in the export if this parameter, or the account IDs parameter, is omitted.
        public let includeMemberAccounts: Bool?
        public let s3DestinationConfig: S3DestinationConfig

        public init(accountIds: [String]? = nil, fieldsToExport: [ExportableLambdaFunctionField]? = nil, fileFormat: FileFormat? = nil, filters: [LambdaFunctionRecommendationFilter]? = nil, includeMemberAccounts: Bool? = nil, s3DestinationConfig: S3DestinationConfig) {
            self.accountIds = accountIds
            self.fieldsToExport = fieldsToExport
            self.fileFormat = fileFormat
            self.filters = filters
            self.includeMemberAccounts = includeMemberAccounts
            self.s3DestinationConfig = s3DestinationConfig
        }

        private enum CodingKeys: String, CodingKey {
            case accountIds
            case fieldsToExport
            case fileFormat
            case filters
            case includeMemberAccounts
            case s3DestinationConfig
        }
    }

    public struct ExportLambdaFunctionRecommendationsResponse: AWSDecodableShape {
        /// The identification number of the export job. Use the DescribeRecommendationExportJobs action, and specify the job ID to view the status of an export job.
        public let jobId: String?
        public let s3Destination: S3Destination?

        public init(jobId: String? = nil, s3Destination: S3Destination? = nil) {
            self.jobId = jobId
            self.s3Destination = s3Destination
        }

        private enum CodingKeys: String, CodingKey {
            case jobId
            case s3Destination
        }
    }

    public struct Filter: AWSEncodableShape {
        /// The name of the filter. Specify Finding to return recommendations with a specific finding classification (for example, Underprovisioned). Specify RecommendationSourceType to return recommendations of a specific resource type (for example, Ec2Instance). Specify FindingReasonCodes to return recommendations with a specific finding reason code (for example, CPUUnderprovisioned).
        public let name: FilterName?
        /// The value of the filter. The valid values for this parameter are as follows, depending on what you specify for the name parameter and the resource type that you wish to filter results for:   Specify Optimized or NotOptimized if you specify the name parameter as Finding and you want to filter results for Auto Scaling groups.   Specify Underprovisioned, Overprovisioned, or Optimized if you specify the name parameter as Finding and you want to filter results for EC2 instances.   Specify Ec2Instance or AutoScalingGroup if you specify the name parameter as RecommendationSourceType.   Specify one of the following options if you specify the name parameter as FindingReasonCodes:     CPUOverprovisioned — The instance’s CPU configuration can be sized down while still meeting the performance requirements of your workload.     CPUUnderprovisioned — The instance’s CPU configuration doesn't meet the performance requirements of your workload and there is an alternative instance type that provides better CPU performance.     MemoryOverprovisioned — The instance’s memory configuration can be sized down while still meeting the performance requirements of your workload.     MemoryUnderprovisioned — The instance’s memory configuration doesn't meet the performance requirements of your workload and there is an alternative instance type that provides better memory performance.     EBSThroughputOverprovisioned — The instance’s EBS throughput configuration can be sized down while still meeting the performance requirements of your workload.     EBSThroughputUnderprovisioned — The instance’s EBS throughput configuration doesn't meet the performance requirements of your workload and there is an alternative instance type that provides better EBS throughput performance.     EBSIOPSOverprovisioned — The instance’s EBS IOPS configuration can be sized down while still meeting the performance requirements of your workload.     EBSIOPSUnderprovisioned  — The instance’s EBS IOPS configuration doesn't meet the performance requirements of your workload and there is an alternative instance type that provides better EBS IOPS performance.     NetworkBandwidthOverprovisioned — The instance’s network bandwidth configuration can be sized down while still meeting the performance requirements of your workload.     NetworkBandwidthUnderprovisioned — The instance’s network bandwidth configuration doesn't meet the performance requirements of your workload and there is an alternative instance type that provides better network bandwidth performance. This finding reason happens when the NetworkIn or NetworkOut performance of an instance is impacted.     NetworkPPSOverprovisioned — The instance’s network PPS (packets per second) configuration can be sized down while still meeting the performance requirements of your workload.     NetworkPPSUnderprovisioned — The instance’s network PPS (packets per second) configuration doesn't meet the performance requirements of your workload and there is an alternative instance type that provides better network PPS performance.     DiskIOPSOverprovisioned  — The instance’s disk IOPS configuration can be sized down while still meeting the performance requirements of your workload.     DiskIOPSUnderprovisioned  — The instance’s disk IOPS configuration doesn't meet the performance requirements of your workload and there is an alternative instance type that provides better disk IOPS performance.     DiskThroughputOverprovisioned — The instance’s disk throughput configuration can be sized down while still meeting the performance requirements of your workload.     DiskThroughputUnderprovisioned — The instance’s disk throughput configuration doesn't meet the performance requirements of your workload and there is an alternative instance type that provides better disk throughput performance.
        public let values: [String]?

        public init(name: FilterName? = nil, values: [String]? = nil) {
            self.name = name
            self.values = values
        }

        private enum CodingKeys: String, CodingKey {
            case name
            case values
        }
    }

    public struct GetAutoScalingGroupRecommendationsRequest: AWSEncodableShape {
        /// The ID of the Amazon Web Services account for which to return Auto Scaling group recommendations. If your account is the management account of an organization, use this parameter to specify the member account for which you want to return Auto Scaling group recommendations. Only one account ID can be specified per request.
        public let accountIds: [String]?
        /// The Amazon Resource Name (ARN) of the Auto Scaling groups for which to return recommendations.
        public let autoScalingGroupArns: [String]?
        /// An array of objects to specify a filter that returns a more specific list of Auto Scaling group recommendations.
        public let filters: [Filter]?
        /// The maximum number of Auto Scaling group recommendations to return with a single request. To retrieve the remaining results, make another request with the returned nextToken value.
        public let maxResults: Int?
        /// The token to advance to the next page of Auto Scaling group recommendations.
        public let nextToken: String?
        /// An object to specify the preferences for the Auto Scaling group recommendations to return in the response.
        public let recommendationPreferences: RecommendationPreferences?

        public init(accountIds: [String]? = nil, autoScalingGroupArns: [String]? = nil, filters: [Filter]? = nil, maxResults: Int? = nil, nextToken: String? = nil, recommendationPreferences: RecommendationPreferences? = nil) {
            self.accountIds = accountIds
            self.autoScalingGroupArns = autoScalingGroupArns
            self.filters = filters
            self.maxResults = maxResults
            self.nextToken = nextToken
            self.recommendationPreferences = recommendationPreferences
        }

        private enum CodingKeys: String, CodingKey {
            case accountIds
            case autoScalingGroupArns
            case filters
            case maxResults
            case nextToken
            case recommendationPreferences
        }
    }

    public struct GetAutoScalingGroupRecommendationsResponse: AWSDecodableShape {
        /// An array of objects that describe Auto Scaling group recommendations.
        public let autoScalingGroupRecommendations: [AutoScalingGroupRecommendation]?
        /// An array of objects that describe errors of the request. For example, an error is returned if you request recommendations for an unsupported Auto Scaling group.
        public let errors: [GetRecommendationError]?
        /// The token to use to advance to the next page of Auto Scaling group recommendations. This value is null when there are no more pages of Auto Scaling group recommendations to return.
        public let nextToken: String?

        public init(autoScalingGroupRecommendations: [AutoScalingGroupRecommendation]? = nil, errors: [GetRecommendationError]? = nil, nextToken: String? = nil) {
            self.autoScalingGroupRecommendations = autoScalingGroupRecommendations
            self.errors = errors
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case autoScalingGroupRecommendations
            case errors
            case nextToken
        }
    }

    public struct GetEBSVolumeRecommendationsRequest: AWSEncodableShape {
        /// The ID of the Amazon Web Services account for which to return volume recommendations. If your account is the management account of an organization, use this parameter to specify the member account for which you want to return volume recommendations. Only one account ID can be specified per request.
        public let accountIds: [String]?
        /// An array of objects to specify a filter that returns a more specific list of volume recommendations.
        public let filters: [EBSFilter]?
        /// The maximum number of volume recommendations to return with a single request. To retrieve the remaining results, make another request with the returned nextToken value.
        public let maxResults: Int?
        /// The token to advance to the next page of volume recommendations.
        public let nextToken: String?
        /// The Amazon Resource Name (ARN) of the volumes for which to return recommendations.
        public let volumeArns: [String]?

        public init(accountIds: [String]? = nil, filters: [EBSFilter]? = nil, maxResults: Int? = nil, nextToken: String? = nil, volumeArns: [String]? = nil) {
            self.accountIds = accountIds
            self.filters = filters
            self.maxResults = maxResults
            self.nextToken = nextToken
            self.volumeArns = volumeArns
        }

        private enum CodingKeys: String, CodingKey {
            case accountIds
            case filters
            case maxResults
            case nextToken
            case volumeArns
        }
    }

    public struct GetEBSVolumeRecommendationsResponse: AWSDecodableShape {
        /// An array of objects that describe errors of the request. For example, an error is returned if you request recommendations for an unsupported volume.
        public let errors: [GetRecommendationError]?
        /// The token to use to advance to the next page of volume recommendations. This value is null when there are no more pages of volume recommendations to return.
        public let nextToken: String?
        /// An array of objects that describe volume recommendations.
        public let volumeRecommendations: [VolumeRecommendation]?

        public init(errors: [GetRecommendationError]? = nil, nextToken: String? = nil, volumeRecommendations: [VolumeRecommendation]? = nil) {
            self.errors = errors
            self.nextToken = nextToken
            self.volumeRecommendations = volumeRecommendations
        }

        private enum CodingKeys: String, CodingKey {
            case errors
            case nextToken
            case volumeRecommendations
        }
    }

    public struct GetEC2InstanceRecommendationsRequest: AWSEncodableShape {
        /// The ID of the Amazon Web Services account for which to return instance recommendations. If your account is the management account of an organization, use this parameter to specify the member account for which you want to return instance recommendations. Only one account ID can be specified per request.
        public let accountIds: [String]?
        /// An array of objects to specify a filter that returns a more specific list of instance recommendations.
        public let filters: [Filter]?
        /// The Amazon Resource Name (ARN) of the instances for which to return recommendations.
        public let instanceArns: [String]?
        /// The maximum number of instance recommendations to return with a single request. To retrieve the remaining results, make another request with the returned nextToken value.
        public let maxResults: Int?
        /// The token to advance to the next page of instance recommendations.
        public let nextToken: String?
        /// An object to specify the preferences for the Amazon EC2 instance recommendations to return in the response.
        public let recommendationPreferences: RecommendationPreferences?

        public init(accountIds: [String]? = nil, filters: [Filter]? = nil, instanceArns: [String]? = nil, maxResults: Int? = nil, nextToken: String? = nil, recommendationPreferences: RecommendationPreferences? = nil) {
            self.accountIds = accountIds
            self.filters = filters
            self.instanceArns = instanceArns
            self.maxResults = maxResults
            self.nextToken = nextToken
            self.recommendationPreferences = recommendationPreferences
        }

        private enum CodingKeys: String, CodingKey {
            case accountIds
            case filters
            case instanceArns
            case maxResults
            case nextToken
            case recommendationPreferences
        }
    }

    public struct GetEC2InstanceRecommendationsResponse: AWSDecodableShape {
        /// An array of objects that describe errors of the request. For example, an error is returned if you request recommendations for an instance of an unsupported instance family.
        public let errors: [GetRecommendationError]?
        /// An array of objects that describe instance recommendations.
        public let instanceRecommendations: [InstanceRecommendation]?
        /// The token to use to advance to the next page of instance recommendations. This value is null when there are no more pages of instance recommendations to return.
        public let nextToken: String?

        public init(errors: [GetRecommendationError]? = nil, instanceRecommendations: [InstanceRecommendation]? = nil, nextToken: String? = nil) {
            self.errors = errors
            self.instanceRecommendations = instanceRecommendations
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case errors
            case instanceRecommendations
            case nextToken
        }
    }

    public struct GetEC2RecommendationProjectedMetricsRequest: AWSEncodableShape {
        /// The timestamp of the last projected metrics data point to return.
        public let endTime: Date
        /// The Amazon Resource Name (ARN) of the instances for which to return recommendation projected metrics.
        public let instanceArn: String
        /// The granularity, in seconds, of the projected metrics data points.
        public let period: Int
        /// An object to specify the preferences for the Amazon EC2 recommendation projected metrics to return in the response.
        public let recommendationPreferences: RecommendationPreferences?
        /// The timestamp of the first projected metrics data point to return.
        public let startTime: Date
        /// The statistic of the projected metrics.
        public let stat: MetricStatistic

        public init(endTime: Date, instanceArn: String, period: Int, recommendationPreferences: RecommendationPreferences? = nil, startTime: Date, stat: MetricStatistic) {
            self.endTime = endTime
            self.instanceArn = instanceArn
            self.period = period
            self.recommendationPreferences = recommendationPreferences
            self.startTime = startTime
            self.stat = stat
        }

        private enum CodingKeys: String, CodingKey {
            case endTime
            case instanceArn
            case period
            case recommendationPreferences
            case startTime
            case stat
        }
    }

    public struct GetEC2RecommendationProjectedMetricsResponse: AWSDecodableShape {
        /// An array of objects that describes projected metrics.
        public let recommendedOptionProjectedMetrics: [RecommendedOptionProjectedMetric]?

        public init(recommendedOptionProjectedMetrics: [RecommendedOptionProjectedMetric]? = nil) {
            self.recommendedOptionProjectedMetrics = recommendedOptionProjectedMetrics
        }

        private enum CodingKeys: String, CodingKey {
            case recommendedOptionProjectedMetrics
        }
    }

    public struct GetEffectiveRecommendationPreferencesRequest: AWSEncodableShape {
        /// The Amazon Resource Name (ARN) of the resource for which to confirm effective recommendation preferences. Only EC2 instance and Auto Scaling group ARNs are currently supported.
        public let resourceArn: String

        public init(resourceArn: String) {
            self.resourceArn = resourceArn
        }

        private enum CodingKeys: String, CodingKey {
            case resourceArn
        }
    }

    public struct GetEffectiveRecommendationPreferencesResponse: AWSDecodableShape {
        /// The status of the enhanced infrastructure metrics recommendation preference. Considers all applicable preferences that you might have set at the resource, account, and organization level. A status of Active confirms that the preference is applied in the latest recommendation refresh, and a status of Inactive confirms that it's not yet applied. To validate whether the preference is applied to your last generated set of recommendations, review the effectiveRecommendationPreferences value in the response of the GetAutoScalingGroupRecommendations and GetEC2InstanceRecommendations actions.
        public let enhancedInfrastructureMetrics: EnhancedInfrastructureMetrics?

        public init(enhancedInfrastructureMetrics: EnhancedInfrastructureMetrics? = nil) {
            self.enhancedInfrastructureMetrics = enhancedInfrastructureMetrics
        }

        private enum CodingKeys: String, CodingKey {
            case enhancedInfrastructureMetrics
        }
    }

    public struct GetEnrollmentStatusRequest: AWSEncodableShape {
        public init() {}
    }

    public struct GetEnrollmentStatusResponse: AWSDecodableShape {
        /// The Unix epoch timestamp, in seconds, of when the account enrollment status was last updated.
        public let lastUpdatedTimestamp: Date?
        /// Confirms the enrollment status of member accounts of the organization, if the account is a management account of an organization.
        public let memberAccountsEnrolled: Bool?
        /// The count of organization member accounts that are opted in to the service, if your account is an organization management account.
        public let numberOfMemberAccountsOptedIn: Int?
        /// The enrollment status of the account.
        public let status: Status?
        /// The reason for the enrollment status of the account. For example, an account might show a status of Pending because member accounts of an organization require more time to be enrolled in the service.
        public let statusReason: String?

        public init(lastUpdatedTimestamp: Date? = nil, memberAccountsEnrolled: Bool? = nil, numberOfMemberAccountsOptedIn: Int? = nil, status: Status? = nil, statusReason: String? = nil) {
            self.lastUpdatedTimestamp = lastUpdatedTimestamp
            self.memberAccountsEnrolled = memberAccountsEnrolled
            self.numberOfMemberAccountsOptedIn = numberOfMemberAccountsOptedIn
            self.status = status
            self.statusReason = statusReason
        }

        private enum CodingKeys: String, CodingKey {
            case lastUpdatedTimestamp
            case memberAccountsEnrolled
            case numberOfMemberAccountsOptedIn
            case status
            case statusReason
        }
    }

    public struct GetEnrollmentStatusesForOrganizationRequest: AWSEncodableShape {
        /// An array of objects to specify a filter that returns a more specific list of account enrollment statuses.
        public let filters: [EnrollmentFilter]?
        /// The maximum number of account enrollment statuses to return with a single request. You can specify up to 100 statuses to return with each request. To retrieve the remaining results, make another request with the returned nextToken value.
        public let maxResults: Int?
        /// The token to advance to the next page of account enrollment statuses.
        public let nextToken: String?

        public init(filters: [EnrollmentFilter]? = nil, maxResults: Int? = nil, nextToken: String? = nil) {
            self.filters = filters
            self.maxResults = maxResults
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case filters
            case maxResults
            case nextToken
        }
    }

    public struct GetEnrollmentStatusesForOrganizationResponse: AWSDecodableShape {
        /// An array of objects that describe the enrollment statuses of organization member accounts.
        public let accountEnrollmentStatuses: [AccountEnrollmentStatus]?
        /// The token to use to advance to the next page of account enrollment statuses. This value is null when there are no more pages of account enrollment statuses to return.
        public let nextToken: String?

        public init(accountEnrollmentStatuses: [AccountEnrollmentStatus]? = nil, nextToken: String? = nil) {
            self.accountEnrollmentStatuses = accountEnrollmentStatuses
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case accountEnrollmentStatuses
            case nextToken
        }
    }

    public struct GetLambdaFunctionRecommendationsRequest: AWSEncodableShape {
        /// The ID of the Amazon Web Services account for which to return function recommendations. If your account is the management account of an organization, use this parameter to specify the member account for which you want to return function recommendations. Only one account ID can be specified per request.
        public let accountIds: [String]?
        /// An array of objects to specify a filter that returns a more specific list of function recommendations.
        public let filters: [LambdaFunctionRecommendationFilter]?
        /// The Amazon Resource Name (ARN) of the functions for which to return recommendations. You can specify a qualified or unqualified ARN. If you specify an unqualified ARN without a function version suffix, Compute Optimizer will return recommendations for the latest ($LATEST) version of the function. If you specify a qualified ARN with a version suffix, Compute Optimizer will return recommendations for the specified function version. For more information about using function versions, see Using versions in the Lambda Developer Guide.
        public let functionArns: [String]?
        /// The maximum number of function recommendations to return with a single request. To retrieve the remaining results, make another request with the returned nextToken value.
        public let maxResults: Int?
        /// The token to advance to the next page of function recommendations.
        public let nextToken: String?

        public init(accountIds: [String]? = nil, filters: [LambdaFunctionRecommendationFilter]? = nil, functionArns: [String]? = nil, maxResults: Int? = nil, nextToken: String? = nil) {
            self.accountIds = accountIds
            self.filters = filters
            self.functionArns = functionArns
            self.maxResults = maxResults
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case accountIds
            case filters
            case functionArns
            case maxResults
            case nextToken
        }
    }

    public struct GetLambdaFunctionRecommendationsResponse: AWSDecodableShape {
        /// An array of objects that describe function recommendations.
        public let lambdaFunctionRecommendations: [LambdaFunctionRecommendation]?
        /// The token to use to advance to the next page of function recommendations. This value is null when there are no more pages of function recommendations to return.
        public let nextToken: String?

        public init(lambdaFunctionRecommendations: [LambdaFunctionRecommendation]? = nil, nextToken: String? = nil) {
            self.lambdaFunctionRecommendations = lambdaFunctionRecommendations
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case lambdaFunctionRecommendations
            case nextToken
        }
    }

    public struct GetRecommendationError: AWSDecodableShape {
        /// The error code.
        public let code: String?
        /// The ID of the error.
        public let identifier: String?
        /// The message, or reason, for the error.
        public let message: String?

        public init(code: String? = nil, identifier: String? = nil, message: String? = nil) {
            self.code = code
            self.identifier = identifier
            self.message = message
        }

        private enum CodingKeys: String, CodingKey {
            case code
            case identifier
            case message
        }
    }

    public struct GetRecommendationPreferencesRequest: AWSEncodableShape {
        /// The maximum number of recommendation preferences to return with a single request. To retrieve the remaining results, make another request with the returned nextToken value.
        public let maxResults: Int?
        /// The token to advance to the next page of recommendation preferences.
        public let nextToken: String?
        /// The target resource type of the recommendation preference for which to return preferences. The Ec2Instance option encompasses standalone instances and instances that are part of Auto Scaling groups. The AutoScalingGroup option encompasses only instances that are part of an Auto Scaling group.
        public let resourceType: ResourceType
        /// An object that describes the scope of the recommendation preference to return. You can return recommendation preferences that are created at the organization level (for management accounts of an organization only), account level, and resource level. For more information, see Activating enhanced infrastructure metrics in the Compute Optimizer User Guide.
        public let scope: Scope?

        public init(maxResults: Int? = nil, nextToken: String? = nil, resourceType: ResourceType, scope: Scope? = nil) {
            self.maxResults = maxResults
            self.nextToken = nextToken
            self.resourceType = resourceType
            self.scope = scope
        }

        private enum CodingKeys: String, CodingKey {
            case maxResults
            case nextToken
            case resourceType
            case scope
        }
    }

    public struct GetRecommendationPreferencesResponse: AWSDecodableShape {
        /// The token to use to advance to the next page of recommendation preferences. This value is null when there are no more pages of recommendation preferences to return.
        public let nextToken: String?
        /// An array of objects that describe recommendation preferences.
        public let recommendationPreferencesDetails: [RecommendationPreferencesDetail]?

        public init(nextToken: String? = nil, recommendationPreferencesDetails: [RecommendationPreferencesDetail]? = nil) {
            self.nextToken = nextToken
            self.recommendationPreferencesDetails = recommendationPreferencesDetails
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken
            case recommendationPreferencesDetails
        }
    }

    public struct GetRecommendationSummariesRequest: AWSEncodableShape {
        /// The ID of the Amazon Web Services account for which to return recommendation summaries. If your account is the management account of an organization, use this parameter to specify the member account for which you want to return recommendation summaries. Only one account ID can be specified per request.
        public let accountIds: [String]?
        /// The maximum number of recommendation summaries to return with a single request. To retrieve the remaining results, make another request with the returned nextToken value.
        public let maxResults: Int?
        /// The token to advance to the next page of recommendation summaries.
        public let nextToken: String?

        public init(accountIds: [String]? = nil, maxResults: Int? = nil, nextToken: String? = nil) {
            self.accountIds = accountIds
            self.maxResults = maxResults
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case accountIds
            case maxResults
            case nextToken
        }
    }

    public struct GetRecommendationSummariesResponse: AWSDecodableShape {
        /// The token to use to advance to the next page of recommendation summaries. This value is null when there are no more pages of recommendation summaries to return.
        public let nextToken: String?
        /// An array of objects that summarize a recommendation.
        public let recommendationSummaries: [RecommendationSummary]?

        public init(nextToken: String? = nil, recommendationSummaries: [RecommendationSummary]? = nil) {
            self.nextToken = nextToken
            self.recommendationSummaries = recommendationSummaries
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken
            case recommendationSummaries
        }
    }

    public struct InstanceRecommendation: AWSDecodableShape {
        /// The Amazon Web Services account ID of the instance.
        public let accountId: String?
        /// The instance type of the current instance.
        public let currentInstanceType: String?
        /// The risk of the current instance not meeting the performance needs of its workloads. The higher the risk, the more likely the current Lambda function requires more memory.
        public let currentPerformanceRisk: CurrentPerformanceRisk?
        /// An object that describes the effective recommendation preferences for the instance.
        public let effectiveRecommendationPreferences: EffectiveRecommendationPreferences?
        /// The finding classification of the instance. Findings for instances include:     Underprovisioned —An instance is considered under-provisioned when at least one specification of your instance, such as CPU, memory, or network, does not meet the performance requirements of your workload. Under-provisioned instances may lead to poor application performance.     Overprovisioned —An instance is considered over-provisioned when at least one specification of your instance, such as CPU, memory, or network, can be sized down while still meeting the performance requirements of your workload, and no specification is under-provisioned. Over-provisioned instances may lead to unnecessary infrastructure cost.     Optimized —An instance is considered optimized when all specifications of your instance, such as CPU, memory, and network, meet the performance requirements of your workload and is not over provisioned. For optimized resources, Compute Optimizer might recommend a new generation instance type.
        public let finding: Finding?
        /// The reason for the finding classification of the instance. Finding reason codes for instances include:     CPUOverprovisioned — The instance’s CPU configuration can be sized down while still meeting the performance requirements of your workload. This is identified by analyzing the CPUUtilization metric of the current instance during the look-back period.     CPUUnderprovisioned — The instance’s CPU configuration doesn't meet the performance requirements of your workload and there is an alternative instance type that provides better CPU performance. This is identified by analyzing the CPUUtilization metric of the current instance during the look-back period.     MemoryOverprovisioned — The instance’s memory configuration can be sized down while still meeting the performance requirements of your workload. This is identified by analyzing the memory utilization metric of the current instance during the look-back period.     MemoryUnderprovisioned — The instance’s memory configuration doesn't meet the performance requirements of your workload and there is an alternative instance type that provides better memory performance. This is identified by analyzing the memory utilization metric of the current instance during the look-back period.  Memory utilization is analyzed only for resources that have the unified CloudWatch agent installed on them. For more information, see Enabling memory utilization with the Amazon CloudWatch Agent in the Compute Optimizer User Guide. On Linux instances, Compute Optimizer analyses the mem_used_percent metric in the CWAgent namespace, or the legacy MemoryUtilization metric in the System/Linux namespace. On Windows instances, Compute Optimizer analyses the Memory % Committed Bytes In Use metric in the CWAgent namespace.      EBSThroughputOverprovisioned — The instance’s EBS throughput configuration can be sized down while still meeting the performance requirements of your workload. This is identified by analyzing the VolumeReadOps and VolumeWriteOps metrics of EBS volumes attached to the current instance during the look-back period.     EBSThroughputUnderprovisioned — The instance’s EBS throughput configuration doesn't meet the performance requirements of your workload and there is an alternative instance type that provides better EBS throughput performance. This is identified by analyzing the VolumeReadOps and VolumeWriteOps metrics of EBS volumes attached to the current instance during the look-back period.     EBSIOPSOverprovisioned — The instance’s EBS IOPS configuration can be sized down while still meeting the performance requirements of your workload. This is identified by analyzing the VolumeReadBytes and VolumeWriteBytes metric of EBS volumes attached to the current instance during the look-back period.     EBSIOPSUnderprovisioned — The instance’s EBS IOPS configuration doesn't meet the performance requirements of your workload and there is an alternative instance type that provides better EBS IOPS performance. This is identified by analyzing the VolumeReadBytes and VolumeWriteBytes metric of EBS volumes attached to the current instance during the look-back period.     NetworkBandwidthOverprovisioned  — The instance’s network bandwidth configuration can be sized down while still meeting the performance requirements of your workload. This is identified by analyzing the NetworkIn and NetworkOut metrics of the current instance during the look-back period.     NetworkBandwidthUnderprovisioned  — The instance’s network bandwidth configuration doesn't meet the performance requirements of your workload and there is an alternative instance type that provides better network bandwidth performance. This is identified by analyzing the NetworkIn and NetworkOut metrics of the current instance during the look-back period. This finding reason happens when the NetworkIn or NetworkOut performance of an instance is impacted.     NetworkPPSOverprovisioned — The instance’s network PPS (packets per second) configuration can be sized down while still meeting the performance requirements of your workload. This is identified by analyzing the NetworkPacketsIn and NetworkPacketsIn metrics of the current instance during the look-back period.     NetworkPPSUnderprovisioned — The instance’s network PPS (packets per second) configuration doesn't meet the performance requirements of your workload and there is an alternative instance type that provides better network PPS performance. This is identified by analyzing the NetworkPacketsIn and NetworkPacketsIn metrics of the current instance during the look-back period.     DiskIOPSOverprovisioned — The instance’s disk IOPS configuration can be sized down while still meeting the performance requirements of your workload. This is identified by analyzing the DiskReadOps and DiskWriteOps metrics of the current instance during the look-back period.     DiskIOPSUnderprovisioned — The instance’s disk IOPS configuration doesn't meet the performance requirements of your workload and there is an alternative instance type that provides better disk IOPS performance. This is identified by analyzing the DiskReadOps and DiskWriteOps metrics of the current instance during the look-back period.     DiskThroughputOverprovisioned — The instance’s disk throughput configuration can be sized down while still meeting the performance requirements of your workload. This is identified by analyzing the DiskReadBytes and DiskWriteBytes metrics of the current instance during the look-back period.     DiskThroughputUnderprovisioned — The instance’s disk throughput configuration doesn't meet the performance requirements of your workload and there is an alternative instance type that provides better disk throughput performance. This is identified by analyzing the DiskReadBytes and DiskWriteBytes metrics of the current instance during the look-back period.    For more information about instance metrics, see List the available CloudWatch metrics for your instances in the Amazon Elastic Compute Cloud User Guide. For more information about EBS volume metrics, see Amazon CloudWatch metrics for Amazon EBS in the Amazon Elastic Compute Cloud User Guide.
        public let findingReasonCodes: [InstanceRecommendationFindingReasonCode]?
        /// The Amazon Resource Name (ARN) of the current instance.
        public let instanceArn: String?
        /// The name of the current instance.
        public let instanceName: String?
        /// The timestamp of when the instance recommendation was last generated.
        public let lastRefreshTimestamp: Date?
        /// The number of days for which utilization metrics were analyzed for the instance.
        public let lookBackPeriodInDays: Double?
        /// An array of objects that describe the recommendation options for the instance.
        public let recommendationOptions: [InstanceRecommendationOption]?
        /// An array of objects that describe the source resource of the recommendation.
        public let recommendationSources: [RecommendationSource]?
        /// An array of objects that describe the utilization metrics of the instance.
        public let utilizationMetrics: [UtilizationMetric]?

        public init(accountId: String? = nil, currentInstanceType: String? = nil, currentPerformanceRisk: CurrentPerformanceRisk? = nil, effectiveRecommendationPreferences: EffectiveRecommendationPreferences? = nil, finding: Finding? = nil, findingReasonCodes: [InstanceRecommendationFindingReasonCode]? = nil, instanceArn: String? = nil, instanceName: String? = nil, lastRefreshTimestamp: Date? = nil, lookBackPeriodInDays: Double? = nil, recommendationOptions: [InstanceRecommendationOption]? = nil, recommendationSources: [RecommendationSource]? = nil, utilizationMetrics: [UtilizationMetric]? = nil) {
            self.accountId = accountId
            self.currentInstanceType = currentInstanceType
            self.currentPerformanceRisk = currentPerformanceRisk
            self.effectiveRecommendationPreferences = effectiveRecommendationPreferences
            self.finding = finding
            self.findingReasonCodes = findingReasonCodes
            self.instanceArn = instanceArn
            self.instanceName = instanceName
            self.lastRefreshTimestamp = lastRefreshTimestamp
            self.lookBackPeriodInDays = lookBackPeriodInDays
            self.recommendationOptions = recommendationOptions
            self.recommendationSources = recommendationSources
            self.utilizationMetrics = utilizationMetrics
        }

        private enum CodingKeys: String, CodingKey {
            case accountId
            case currentInstanceType
            case currentPerformanceRisk
            case effectiveRecommendationPreferences
            case finding
            case findingReasonCodes
            case instanceArn
            case instanceName
            case lastRefreshTimestamp
            case lookBackPeriodInDays
            case recommendationOptions
            case recommendationSources
            case utilizationMetrics
        }
    }

    public struct InstanceRecommendationOption: AWSDecodableShape {
        /// The instance type of the instance recommendation.
        public let instanceType: String?
        /// The performance risk of the instance recommendation option. Performance risk indicates the likelihood of the recommended instance type not meeting the resource needs of your workload. Compute Optimizer calculates an individual performance risk score for each specification of the recommended instance, including CPU, memory, EBS throughput, EBS IOPS, disk throughput, disk IOPS, network throughput, and network PPS. The performance risk of the recommended instance is calculated as the maximum performance risk score across the analyzed resource specifications. The value ranges from 0 - 4, with 0 meaning that the recommended resource is predicted to always provide enough hardware capability. The higher the performance risk is, the more likely you should validate whether the recommendation will meet the performance requirements of your workload before migrating your resource.
        public let performanceRisk: Double?
        /// Describes the configuration differences between the current instance and the recommended instance type. You should consider the configuration differences before migrating your workloads from the current instance to the recommended instance type. The Change the instance type guide for Linux and Change the instance type guide for Windows provide general guidance for getting started with an instance migration. Platform differences include:     Hypervisor — The hypervisor of the recommended instance type is different than that of the current instance. For example, the recommended instance type uses a Nitro hypervisor and the current instance uses a Xen hypervisor. The differences that you should consider between these hypervisors are covered in the Nitro Hypervisor section of the Amazon EC2 frequently asked questions. For more information, see Instances built on the Nitro System in the Amazon EC2 User Guide for Linux, or Instances built on the Nitro System in the Amazon EC2 User Guide for Windows.     NetworkInterface — The network interface of the recommended instance type is different than that of the current instance. For example, the recommended instance type supports enhanced networking and the current instance might not. To enable enhanced networking for the recommended instance type, you must install the Elastic Network Adapter (ENA) driver or the Intel 82599 Virtual Function driver. For more information, see Networking and storage features and Enhanced networking on Linux in the Amazon EC2 User Guide for Linux, or Networking and storage features and Enhanced networking on Windows in the Amazon EC2 User Guide for Windows.     StorageInterface — The storage interface of the recommended instance type is different than that of the current instance. For example, the recommended instance type uses an NVMe storage interface and the current instance does not. To access NVMe volumes for the recommended instance type, you will need to install or upgrade the NVMe driver. For more information, see Networking and storage features and Amazon EBS and NVMe on Linux instances in the Amazon EC2 User Guide for Linux, or Networking and storage features and Amazon EBS and NVMe on Windows instances in the Amazon EC2 User Guide for Windows.     InstanceStoreAvailability — The recommended instance type does not support instance store volumes and the current instance does. Before migrating, you might need to back up the data on your instance store volumes if you want to preserve them. For more information, see How do I back up an instance store volume on my Amazon EC2 instance to Amazon EBS? in the Amazon Web Services Premium Support Knowledge Base. For more information, see Networking and storage features and Amazon EC2 instance store in the Amazon EC2 User Guide for Linux, or see Networking and storage features and Amazon EC2 instance store in the Amazon EC2 User Guide for Windows.     VirtualizationType — The recommended instance type uses the hardware virtual machine (HVM) virtualization type and the current instance uses the paravirtual (PV) virtualization type. For more information about the differences between these virtualization types, see Linux AMI virtualization types in the Amazon EC2 User Guide for Linux, or Windows AMI virtualization types in the Amazon EC2 User Guide for Windows.     Architecture — The CPU architecture between the recommended instance type and the current instance is different. For example, the recommended instance type might use an Arm CPU architecture and the current instance type might use a different one, such as x86. Before migrating, you should consider recompiling the software on your instance for the new architecture. Alternatively, you might switch to an Amazon Machine Image (AMI) that supports the new architecture. For more information about the CPU architecture for each instance type, see Amazon EC2 Instance Types.
        public let platformDifferences: [PlatformDifference]?
        /// An array of objects that describe the projected utilization metrics of the instance recommendation option.  The Cpu and Memory metrics are the only projected utilization metrics returned. Additionally, the Memory metric is returned only for resources that have the unified CloudWatch agent installed on them. For more information, see Enabling Memory Utilization with the CloudWatch Agent.
        public let projectedUtilizationMetrics: [UtilizationMetric]?
        /// The rank of the instance recommendation option. The top recommendation option is ranked as 1.
        public let rank: Int?
        /// An object that describes the savings opportunity for the instance recommendation option. Savings opportunity includes the estimated monthly savings amount and percentage.
        public let savingsOpportunity: SavingsOpportunity?

        public init(instanceType: String? = nil, performanceRisk: Double? = nil, platformDifferences: [PlatformDifference]? = nil, projectedUtilizationMetrics: [UtilizationMetric]? = nil, rank: Int? = nil, savingsOpportunity: SavingsOpportunity? = nil) {
            self.instanceType = instanceType
            self.performanceRisk = performanceRisk
            self.platformDifferences = platformDifferences
            self.projectedUtilizationMetrics = projectedUtilizationMetrics
            self.rank = rank
            self.savingsOpportunity = savingsOpportunity
        }

        private enum CodingKeys: String, CodingKey {
            case instanceType
            case performanceRisk
            case platformDifferences
            case projectedUtilizationMetrics
            case rank
            case savingsOpportunity
        }
    }

    public struct JobFilter: AWSEncodableShape {
        /// The name of the filter. Specify ResourceType to return export jobs of a specific resource type (for example, Ec2Instance). Specify JobStatus to return export jobs with a specific status (e.g, Complete).
        public let name: JobFilterName?
        /// The value of the filter. The valid values for this parameter are as follows, depending on what you specify for the name parameter:   Specify Ec2Instance or AutoScalingGroup if you specify the name parameter as ResourceType. There is no filter for EBS volumes because volume recommendations cannot be exported at this time.   Specify Queued, InProgress, Complete, or Failed if you specify the name parameter as JobStatus.
        public let values: [String]?

        public init(name: JobFilterName? = nil, values: [String]? = nil) {
            self.name = name
            self.values = values
        }

        private enum CodingKeys: String, CodingKey {
            case name
            case values
        }
    }

    public struct LambdaFunctionMemoryProjectedMetric: AWSDecodableShape {
        /// The name of the projected utilization metric.
        public let name: LambdaFunctionMemoryMetricName?
        /// The statistic of the projected utilization metric.
        public let statistic: LambdaFunctionMemoryMetricStatistic?
        /// The values of the projected utilization metrics.
        public let value: Double?

        public init(name: LambdaFunctionMemoryMetricName? = nil, statistic: LambdaFunctionMemoryMetricStatistic? = nil, value: Double? = nil) {
            self.name = name
            self.statistic = statistic
            self.value = value
        }

        private enum CodingKeys: String, CodingKey {
            case name
            case statistic
            case value
        }
    }

    public struct LambdaFunctionMemoryRecommendationOption: AWSDecodableShape {
        /// The memory size, in MB, of the function recommendation option.
        public let memorySize: Int?
        /// An array of objects that describe the projected utilization metrics of the function recommendation option.
        public let projectedUtilizationMetrics: [LambdaFunctionMemoryProjectedMetric]?
        /// The rank of the function recommendation option. The top recommendation option is ranked as 1.
        public let rank: Int?
        /// An object that describes the savings opportunity for the Lambda function recommendation option. Savings opportunity includes the estimated monthly savings amount and percentage.
        public let savingsOpportunity: SavingsOpportunity?

        public init(memorySize: Int? = nil, projectedUtilizationMetrics: [LambdaFunctionMemoryProjectedMetric]? = nil, rank: Int? = nil, savingsOpportunity: SavingsOpportunity? = nil) {
            self.memorySize = memorySize
            self.projectedUtilizationMetrics = projectedUtilizationMetrics
            self.rank = rank
            self.savingsOpportunity = savingsOpportunity
        }

        private enum CodingKeys: String, CodingKey {
            case memorySize
            case projectedUtilizationMetrics
            case rank
            case savingsOpportunity
        }
    }

    public struct LambdaFunctionRecommendation: AWSDecodableShape {
        /// The Amazon Web Services account ID of the function.
        public let accountId: String?
        /// The amount of memory, in MB, that's allocated to the current function.
        public let currentMemorySize: Int?
        /// The risk of the current Lambda function not meeting the performance needs of its workloads. The higher the risk, the more likely the current Lambda function configuration is underperforming in its workload.
        public let currentPerformanceRisk: CurrentPerformanceRisk?
        /// The finding classification of the function. Findings for functions include:     Optimized — The function is correctly provisioned to run your workload based on its current configuration and its utilization history. This finding classification does not include finding reason codes.     NotOptimized — The function is performing at a higher level (over-provisioned) or at a lower level (under-provisioned) than required for your workload because its current configuration is not optimal. Over-provisioned resources might lead to unnecessary infrastructure cost, and under-provisioned resources might lead to poor application performance. This finding classification can include the MemoryUnderprovisioned and MemoryUnderprovisioned finding reason codes.     Unavailable — Compute Optimizer was unable to generate a recommendation for the function. This could be because the function has not accumulated sufficient metric data, or the function does not qualify for a recommendation. This finding classification can include the InsufficientData and Inconclusive finding reason codes.  Functions with a finding of unavailable are not returned unless you specify the filter parameter with a value of Unavailable in your GetLambdaFunctionRecommendations request.
        public let finding: LambdaFunctionRecommendationFinding?
        /// The reason for the finding classification of the function.  Functions that have a finding classification of Optimized don't have a finding reason code.  Finding reason codes for functions include:     MemoryOverprovisioned — The function is over-provisioned when its memory configuration can be sized down while still meeting the performance requirements of your workload. An over-provisioned function might lead to unnecessary infrastructure cost. This finding reason code is part of the NotOptimized finding classification.     MemoryUnderprovisioned — The function is under-provisioned when its memory configuration doesn't meet the performance requirements of the workload. An under-provisioned function might lead to poor application performance. This finding reason code is part of the NotOptimized finding classification.     InsufficientData — The function does not have sufficient metric data for Compute Optimizer to generate a recommendation. For more information, see the Supported resources and requirements in the Compute Optimizer User Guide. This finding reason code is part of the Unavailable finding classification.     Inconclusive — The function does not qualify for a recommendation because Compute Optimizer cannot generate a recommendation with a high degree of confidence. This finding reason code is part of the Unavailable finding classification.
        public let findingReasonCodes: [LambdaFunctionRecommendationFindingReasonCode]?
        /// The Amazon Resource Name (ARN) of the current function.
        public let functionArn: String?
        /// The version number of the current function.
        public let functionVersion: String?
        /// The timestamp of when the function recommendation was last generated.
        public let lastRefreshTimestamp: Date?
        /// The number of days for which utilization metrics were analyzed for the function.
        public let lookbackPeriodInDays: Double?
        /// An array of objects that describe the memory configuration recommendation options for the function.
        public let memorySizeRecommendationOptions: [LambdaFunctionMemoryRecommendationOption]?
        /// The number of times your function code was applied during the look-back period.
        public let numberOfInvocations: Int64?
        /// An array of objects that describe the utilization metrics of the function.
        public let utilizationMetrics: [LambdaFunctionUtilizationMetric]?

        public init(accountId: String? = nil, currentMemorySize: Int? = nil, currentPerformanceRisk: CurrentPerformanceRisk? = nil, finding: LambdaFunctionRecommendationFinding? = nil, findingReasonCodes: [LambdaFunctionRecommendationFindingReasonCode]? = nil, functionArn: String? = nil, functionVersion: String? = nil, lastRefreshTimestamp: Date? = nil, lookbackPeriodInDays: Double? = nil, memorySizeRecommendationOptions: [LambdaFunctionMemoryRecommendationOption]? = nil, numberOfInvocations: Int64? = nil, utilizationMetrics: [LambdaFunctionUtilizationMetric]? = nil) {
            self.accountId = accountId
            self.currentMemorySize = currentMemorySize
            self.currentPerformanceRisk = currentPerformanceRisk
            self.finding = finding
            self.findingReasonCodes = findingReasonCodes
            self.functionArn = functionArn
            self.functionVersion = functionVersion
            self.lastRefreshTimestamp = lastRefreshTimestamp
            self.lookbackPeriodInDays = lookbackPeriodInDays
            self.memorySizeRecommendationOptions = memorySizeRecommendationOptions
            self.numberOfInvocations = numberOfInvocations
            self.utilizationMetrics = utilizationMetrics
        }

        private enum CodingKeys: String, CodingKey {
            case accountId
            case currentMemorySize
            case currentPerformanceRisk
            case finding
            case findingReasonCodes
            case functionArn
            case functionVersion
            case lastRefreshTimestamp
            case lookbackPeriodInDays
            case memorySizeRecommendationOptions
            case numberOfInvocations
            case utilizationMetrics
        }
    }

    public struct LambdaFunctionRecommendationFilter: AWSEncodableShape {
        /// The name of the filter. Specify Finding to return recommendations with a specific finding classification (for example, NotOptimized). Specify FindingReasonCode to return recommendations with a specific finding reason code (for example, MemoryUnderprovisioned).
        public let name: LambdaFunctionRecommendationFilterName?
        /// The value of the filter. The valid values for this parameter are as follows, depending on what you specify for the name parameter:   Specify Optimized, NotOptimized, or Unavailable if you specify the name parameter as Finding.   Specify MemoryOverprovisioned, MemoryUnderprovisioned, InsufficientData, or Inconclusive if you specify the name parameter as FindingReasonCode.
        public let values: [String]?

        public init(name: LambdaFunctionRecommendationFilterName? = nil, values: [String]? = nil) {
            self.name = name
            self.values = values
        }

        private enum CodingKeys: String, CodingKey {
            case name
            case values
        }
    }

    public struct LambdaFunctionUtilizationMetric: AWSDecodableShape {
        /// The name of the utilization metric. The following utilization metrics are available:    Duration - The amount of time that your function code spends processing an event.    Memory - The amount of memory used per invocation.
        public let name: LambdaFunctionMetricName?
        /// The statistic of the utilization metric. The Compute Optimizer API, Command Line Interface (CLI), and SDKs return utilization metrics using only the Maximum statistic, which is the highest value observed during the specified period. The Compute Optimizer console displays graphs for some utilization metrics using the Average statistic, which is the value of Sum / SampleCount during the specified period. For more information, see Viewing resource recommendations in the Compute Optimizer User Guide. You can also get averaged utilization metric data for your resources using Amazon CloudWatch. For more information, see the Amazon CloudWatch User Guide.
        public let statistic: LambdaFunctionMetricStatistic?
        /// The value of the utilization metric.
        public let value: Double?

        public init(name: LambdaFunctionMetricName? = nil, statistic: LambdaFunctionMetricStatistic? = nil, value: Double? = nil) {
            self.name = name
            self.statistic = statistic
            self.value = value
        }

        private enum CodingKeys: String, CodingKey {
            case name
            case statistic
            case value
        }
    }

    public struct ProjectedMetric: AWSDecodableShape {
        /// The name of the projected utilization metric. The following projected utilization metrics are returned:    Cpu - The projected percentage of allocated EC2 compute units that would be in use on the recommendation option had you used that resource during the analyzed period. This metric identifies the processing power required to run an application on the recommendation option. Depending on the instance type, tools in your operating system can show a lower percentage than CloudWatch when the instance is not allocated a full processor core. Units: Percent    Memory - The percentage of memory that would be in use on the recommendation option had you used that resource during the analyzed period. This metric identifies the amount of memory required to run an application on the recommendation option. Units: Percent  The Memory metric is returned only for resources that have the unified CloudWatch agent installed on them. For more information, see Enabling Memory Utilization with the CloudWatch Agent.
        public let name: MetricName?
        /// The timestamps of the projected utilization metric.
        public let timestamps: [Date]?
        /// The values of the projected utilization metrics.
        public let values: [Double]?

        public init(name: MetricName? = nil, timestamps: [Date]? = nil, values: [Double]? = nil) {
            self.name = name
            self.timestamps = timestamps
            self.values = values
        }

        private enum CodingKeys: String, CodingKey {
            case name
            case timestamps
            case values
        }
    }

    public struct PutRecommendationPreferencesRequest: AWSEncodableShape {
        /// The status of the enhanced infrastructure metrics recommendation preference to create or update. A status of Active confirms that the preference is applied in the latest recommendation refresh, and a status of Inactive confirms that it's not yet applied.
        public let enhancedInfrastructureMetrics: EnhancedInfrastructureMetrics?
        /// The target resource type of the recommendation preference to create. The Ec2Instance option encompasses standalone instances and instances that are part of Auto Scaling groups. The AutoScalingGroup option encompasses only instances that are part of an Auto Scaling group.
        public let resourceType: ResourceType
        /// An object that describes the scope of the recommendation preference to create. You can create recommendation preferences at the organization level (for management accounts of an organization only), account level, and resource level. For more information, see Activating enhanced infrastructure metrics in the Compute Optimizer User Guide.  You cannot create recommendation preferences for Auto Scaling groups at the organization and account levels. You can create recommendation preferences for Auto Scaling groups only at the resource level by specifying a scope name of ResourceArn and a scope value of the Auto Scaling group Amazon Resource Name (ARN). This will configure the preference for all instances that are part of the specified the Auto Scaling group.
        public let scope: Scope?

        public init(enhancedInfrastructureMetrics: EnhancedInfrastructureMetrics? = nil, resourceType: ResourceType, scope: Scope? = nil) {
            self.enhancedInfrastructureMetrics = enhancedInfrastructureMetrics
            self.resourceType = resourceType
            self.scope = scope
        }

        private enum CodingKeys: String, CodingKey {
            case enhancedInfrastructureMetrics
            case resourceType
            case scope
        }
    }

    public struct PutRecommendationPreferencesResponse: AWSDecodableShape {
        public init() {}
    }

    public struct ReasonCodeSummary: AWSDecodableShape {
        /// The name of the finding reason code.
        public let name: FindingReasonCode?
        /// The value of the finding reason code summary.
        public let value: Double?

        public init(name: FindingReasonCode? = nil, value: Double? = nil) {
            self.name = name
            self.value = value
        }

        private enum CodingKeys: String, CodingKey {
            case name
            case value
        }
    }

    public struct RecommendationExportJob: AWSDecodableShape {
        /// The timestamp of when the export job was created.
        public let creationTimestamp: Date?
        /// An object that describes the destination of the export file.
        public let destination: ExportDestination?
        /// The reason for an export job failure.
        public let failureReason: String?
        /// The identification number of the export job.
        public let jobId: String?
        /// The timestamp of when the export job was last updated.
        public let lastUpdatedTimestamp: Date?
        /// The resource type of the exported recommendations.
        public let resourceType: ResourceType?
        /// The status of the export job.
        public let status: JobStatus?

        public init(creationTimestamp: Date? = nil, destination: ExportDestination? = nil, failureReason: String? = nil, jobId: String? = nil, lastUpdatedTimestamp: Date? = nil, resourceType: ResourceType? = nil, status: JobStatus? = nil) {
            self.creationTimestamp = creationTimestamp
            self.destination = destination
            self.failureReason = failureReason
            self.jobId = jobId
            self.lastUpdatedTimestamp = lastUpdatedTimestamp
            self.resourceType = resourceType
            self.status = status
        }

        private enum CodingKeys: String, CodingKey {
            case creationTimestamp
            case destination
            case failureReason
            case jobId
            case lastUpdatedTimestamp
            case resourceType
            case status
        }
    }

    public struct RecommendationPreferences: AWSEncodableShape {
        /// Specifies the CPU vendor and architecture for Amazon EC2 instance and Auto Scaling group recommendations. For example, when you specify AWS_ARM64 with:   A GetEC2InstanceRecommendations or GetAutoScalingGroupRecommendations request, Compute Optimizer returns recommendations that consist of Graviton2 instance types only.   A GetEC2RecommendationProjectedMetrics request, Compute Optimizer returns projected utilization metrics for Graviton2 instance type recommendations only.   A ExportEC2InstanceRecommendations or ExportAutoScalingGroupRecommendations request, Compute Optimizer exports recommendations that consist of Graviton2 instance types only.
        public let cpuVendorArchitectures: [CpuVendorArchitecture]?

        public init(cpuVendorArchitectures: [CpuVendorArchitecture]? = nil) {
            self.cpuVendorArchitectures = cpuVendorArchitectures
        }

        private enum CodingKeys: String, CodingKey {
            case cpuVendorArchitectures
        }
    }

    public struct RecommendationPreferencesDetail: AWSDecodableShape {
        /// The status of the enhanced infrastructure metrics recommendation preference. A status of Active confirms that the preference is applied in the latest recommendation refresh, and a status of Inactive confirms that it's not yet applied.
        public let enhancedInfrastructureMetrics: EnhancedInfrastructureMetrics?
        /// The target resource type of the recommendation preference to create. The Ec2Instance option encompasses standalone instances and instances that are part of Auto Scaling groups. The AutoScalingGroup option encompasses only instances that are part of an Auto Scaling group.
        public let resourceType: ResourceType?
        /// An object that describes the scope of the recommendation preference. Recommendation preferences can be created at the organization level (for management accounts of an organization only), account level, and resource level. For more information, see Activating enhanced infrastructure metrics in the Compute Optimizer User Guide.
        public let scope: Scope?

        public init(enhancedInfrastructureMetrics: EnhancedInfrastructureMetrics? = nil, resourceType: ResourceType? = nil, scope: Scope? = nil) {
            self.enhancedInfrastructureMetrics = enhancedInfrastructureMetrics
            self.resourceType = resourceType
            self.scope = scope
        }

        private enum CodingKeys: String, CodingKey {
            case enhancedInfrastructureMetrics
            case resourceType
            case scope
        }
    }

    public struct RecommendationSource: AWSDecodableShape {
        /// The Amazon Resource Name (ARN) of the recommendation source.
        public let recommendationSourceArn: String?
        /// The resource type of the recommendation source.
        public let recommendationSourceType: RecommendationSourceType?

        public init(recommendationSourceArn: String? = nil, recommendationSourceType: RecommendationSourceType? = nil) {
            self.recommendationSourceArn = recommendationSourceArn
            self.recommendationSourceType = recommendationSourceType
        }

        private enum CodingKeys: String, CodingKey {
            case recommendationSourceArn
            case recommendationSourceType
        }
    }

    public struct RecommendationSummary: AWSDecodableShape {
        /// The Amazon Web Services account ID of the recommendation summary.
        public let accountId: String?
        /// An object that describes the performance risk ratings for a given resource type.
        public let currentPerformanceRiskRatings: CurrentPerformanceRiskRatings?
        /// The resource type that the recommendation summary applies to.
        public let recommendationResourceType: RecommendationSourceType?
        /// An object that describes the savings opportunity for a given resource type. Savings opportunity includes the estimated monthly savings amount and percentage.
        public let savingsOpportunity: SavingsOpportunity?
        /// An array of objects that describe a recommendation summary.
        public let summaries: [Summary]?

        public init(accountId: String? = nil, currentPerformanceRiskRatings: CurrentPerformanceRiskRatings? = nil, recommendationResourceType: RecommendationSourceType? = nil, savingsOpportunity: SavingsOpportunity? = nil, summaries: [Summary]? = nil) {
            self.accountId = accountId
            self.currentPerformanceRiskRatings = currentPerformanceRiskRatings
            self.recommendationResourceType = recommendationResourceType
            self.savingsOpportunity = savingsOpportunity
            self.summaries = summaries
        }

        private enum CodingKeys: String, CodingKey {
            case accountId
            case currentPerformanceRiskRatings
            case recommendationResourceType
            case savingsOpportunity
            case summaries
        }
    }

    public struct RecommendedOptionProjectedMetric: AWSDecodableShape {
        /// An array of objects that describe a projected utilization metric.
        public let projectedMetrics: [ProjectedMetric]?
        /// The rank of the recommendation option projected metric. The top recommendation option is ranked as 1. The projected metric rank correlates to the recommendation option rank. For example, the projected metric ranked as 1 is related to the recommendation option that is also ranked as 1 in the same response.
        public let rank: Int?
        /// The recommended instance type.
        public let recommendedInstanceType: String?

        public init(projectedMetrics: [ProjectedMetric]? = nil, rank: Int? = nil, recommendedInstanceType: String? = nil) {
            self.projectedMetrics = projectedMetrics
            self.rank = rank
            self.recommendedInstanceType = recommendedInstanceType
        }

        private enum CodingKeys: String, CodingKey {
            case projectedMetrics
            case rank
            case recommendedInstanceType
        }
    }

    public struct S3Destination: AWSDecodableShape {
        /// The name of the Amazon S3 bucket used as the destination of an export file.
        public let bucket: String?
        /// The Amazon S3 bucket key of an export file. The key uniquely identifies the object, or export file, in the S3 bucket.
        public let key: String?
        /// The Amazon S3 bucket key of a metadata file. The key uniquely identifies the object, or metadata file, in the S3 bucket.
        public let metadataKey: String?

        public init(bucket: String? = nil, key: String? = nil, metadataKey: String? = nil) {
            self.bucket = bucket
            self.key = key
            self.metadataKey = metadataKey
        }

        private enum CodingKeys: String, CodingKey {
            case bucket
            case key
            case metadataKey
        }
    }

    public struct S3DestinationConfig: AWSEncodableShape {
        /// The name of the Amazon S3 bucket to use as the destination for an export job.
        public let bucket: String?
        /// The Amazon S3 bucket prefix for an export job.
        public let keyPrefix: String?

        public init(bucket: String? = nil, keyPrefix: String? = nil) {
            self.bucket = bucket
            self.keyPrefix = keyPrefix
        }

        private enum CodingKeys: String, CodingKey {
            case bucket
            case keyPrefix
        }
    }

    public struct SavingsOpportunity: AWSDecodableShape {
        /// An object that describes the estimated monthly savings amount possible based on On-Demand instance pricing.
        public let estimatedMonthlySavings: EstimatedMonthlySavings?
        /// The estimated monthly savings possible as a percentage of monthly cost.
        public let savingsOpportunityPercentage: Double?

        public init(estimatedMonthlySavings: EstimatedMonthlySavings? = nil, savingsOpportunityPercentage: Double? = nil) {
            self.estimatedMonthlySavings = estimatedMonthlySavings
            self.savingsOpportunityPercentage = savingsOpportunityPercentage
        }

        private enum CodingKeys: String, CodingKey {
            case estimatedMonthlySavings
            case savingsOpportunityPercentage
        }
    }

    public struct Scope: AWSEncodableShape & AWSDecodableShape {
        /// The name of the scope. The following scopes are possible:    Organization - Specifies that the recommendation preference applies at the organization level, for all member accounts of an organization.    AccountId - Specifies that the recommendation preference applies at the account level, for all resources of a given resource type in an account.    ResourceArn - Specifies that the recommendation preference applies at the individual resource level.
        public let name: ScopeName?
        /// The value of the scope. If you specified the name of the scope as:    Organization - The value must be ALL_ACCOUNTS.    AccountId - The value must be a 12-digit Amazon Web Services account ID.    ResourceArn - The value must be the Amazon Resource Name (ARN) of an EC2 instance or an Auto Scaling group.   Only EC2 instance and Auto Scaling group ARNs are currently supported.
        public let value: String?

        public init(name: ScopeName? = nil, value: String? = nil) {
            self.name = name
            self.value = value
        }

        private enum CodingKeys: String, CodingKey {
            case name
            case value
        }
    }

    public struct Summary: AWSDecodableShape {
        /// The finding classification of the recommendation.
        public let name: Finding?
        /// An array of objects that summarize a finding reason code.
        public let reasonCodeSummaries: [ReasonCodeSummary]?
        /// The value of the recommendation summary.
        public let value: Double?

        public init(name: Finding? = nil, reasonCodeSummaries: [ReasonCodeSummary]? = nil, value: Double? = nil) {
            self.name = name
            self.reasonCodeSummaries = reasonCodeSummaries
            self.value = value
        }

        private enum CodingKeys: String, CodingKey {
            case name
            case reasonCodeSummaries
            case value
        }
    }

    public struct UpdateEnrollmentStatusRequest: AWSEncodableShape {
        /// Indicates whether to enroll member accounts of the organization if the account is the management account of an organization.
        public let includeMemberAccounts: Bool?
        /// The new enrollment status of the account. The following status options are available:    Active - Opts in your account to the Compute Optimizer service. Compute Optimizer begins analyzing the configuration and utilization metrics of your Amazon Web Services resources after you opt in. For more information, see Metrics analyzed by Compute Optimizer in the Compute Optimizer User Guide.    Inactive - Opts out your account from the Compute Optimizer service. Your account's recommendations and related metrics data will be deleted from Compute Optimizer after you opt out.    The Pending and Failed options cannot be used to update the enrollment status of an account. They are returned in the response of a request to update the enrollment status of an account.
        public let status: Status

        public init(includeMemberAccounts: Bool? = nil, status: Status) {
            self.includeMemberAccounts = includeMemberAccounts
            self.status = status
        }

        private enum CodingKeys: String, CodingKey {
            case includeMemberAccounts
            case status
        }
    }

    public struct UpdateEnrollmentStatusResponse: AWSDecodableShape {
        /// The enrollment status of the account.
        public let status: Status?
        /// The reason for the enrollment status of the account. For example, an account might show a status of Pending because member accounts of an organization require more time to be enrolled in the service.
        public let statusReason: String?

        public init(status: Status? = nil, statusReason: String? = nil) {
            self.status = status
            self.statusReason = statusReason
        }

        private enum CodingKeys: String, CodingKey {
            case status
            case statusReason
        }
    }

    public struct UtilizationMetric: AWSDecodableShape {
        /// The name of the utilization metric. The following utilization metrics are available:    Cpu - The percentage of allocated EC2 compute units that are currently in use on the instance. This metric identifies the processing power required to run an application on the instance. Depending on the instance type, tools in your operating system can show a lower percentage than CloudWatch when the instance is not allocated a full processor core. Units: Percent    Memory - The percentage of memory that is currently in use on the instance. This metric identifies the amount of memory required to run an application on the instance. Units: Percent  The Memory metric is returned only for resources that have the unified CloudWatch agent installed on them. For more information, see Enabling Memory Utilization with the CloudWatch Agent.     EBS_READ_OPS_PER_SECOND - The completed read operations from all EBS volumes attached to the instance in a specified period of time. Unit: Count    EBS_WRITE_OPS_PER_SECOND - The completed write operations to all EBS volumes attached to the instance in a specified period of time. Unit: Count    EBS_READ_BYTES_PER_SECOND - The bytes read from all EBS volumes attached to the instance in a specified period of time. Unit: Bytes    EBS_WRITE_BYTES_PER_SECOND - The bytes written to all EBS volumes attached to the instance in a specified period of time. Unit: Bytes    DISK_READ_OPS_PER_SECOND - The completed read operations from all instance store volumes available to the instance in a specified period of time. If there are no instance store volumes, either the value is 0 or the metric is not reported.    DISK_WRITE_OPS_PER_SECOND - The completed write operations from all instance store volumes available to the instance in a specified period of time. If there are no instance store volumes, either the value is 0 or the metric is not reported.    DISK_READ_BYTES_PER_SECOND - The bytes read from all instance store volumes available to the instance. This metric is used to determine the volume of the data the application reads from the disk of the instance. This can be used to determine the speed of the application. If there are no instance store volumes, either the value is 0 or the metric is not reported.    DISK_WRITE_BYTES_PER_SECOND - The bytes written to all instance store volumes available to the instance. This metric is used to determine the volume of the data the application writes onto the disk of the instance. This can be used to determine the speed of the application. If there are no instance store volumes, either the value is 0 or the metric is not reported.    NETWORK_IN_BYTES_PER_SECOND - The number of bytes received by the instance on all network interfaces. This metric identifies the volume of incoming network traffic to a single instance.    NETWORK_OUT_BYTES_PER_SECOND - The number of bytes sent out by the instance on all network interfaces. This metric identifies the volume of outgoing network traffic from a single instance.    NETWORK_PACKETS_IN_PER_SECOND - The number of packets received by the instance on all network interfaces. This metric identifies the volume of incoming traffic in terms of the number of packets on a single instance.    NETWORK_PACKETS_OUT_PER_SECOND - The number of packets sent out by the instance on all network interfaces. This metric identifies the volume of outgoing traffic in terms of the number of packets on a single instance.
        public let name: MetricName?
        /// The statistic of the utilization metric. The Compute Optimizer API, Command Line Interface (CLI), and SDKs return utilization metrics using only the Maximum statistic, which is the highest value observed during the specified period. The Compute Optimizer console displays graphs for some utilization metrics using the Average statistic, which is the value of Sum / SampleCount during the specified period. For more information, see Viewing resource recommendations in the Compute Optimizer User Guide. You can also get averaged utilization metric data for your resources using Amazon CloudWatch. For more information, see the Amazon CloudWatch User Guide.
        public let statistic: MetricStatistic?
        /// The value of the utilization metric.
        public let value: Double?

        public init(name: MetricName? = nil, statistic: MetricStatistic? = nil, value: Double? = nil) {
            self.name = name
            self.statistic = statistic
            self.value = value
        }

        private enum CodingKeys: String, CodingKey {
            case name
            case statistic
            case value
        }
    }

    public struct VolumeConfiguration: AWSDecodableShape {
        /// The baseline IOPS of the volume.
        public let volumeBaselineIOPS: Int?
        /// The baseline throughput of the volume.
        public let volumeBaselineThroughput: Int?
        /// The burst IOPS of the volume.
        public let volumeBurstIOPS: Int?
        /// The burst throughput of the volume.
        public let volumeBurstThroughput: Int?
        /// The size of the volume, in GiB.
        public let volumeSize: Int?
        /// The volume type. This can be gp2 for General Purpose SSD, io1 or io2 for Provisioned IOPS SSD, st1 for Throughput Optimized HDD, sc1 for Cold HDD, or standard for Magnetic volumes.
        public let volumeType: String?

        public init(volumeBaselineIOPS: Int? = nil, volumeBaselineThroughput: Int? = nil, volumeBurstIOPS: Int? = nil, volumeBurstThroughput: Int? = nil, volumeSize: Int? = nil, volumeType: String? = nil) {
            self.volumeBaselineIOPS = volumeBaselineIOPS
            self.volumeBaselineThroughput = volumeBaselineThroughput
            self.volumeBurstIOPS = volumeBurstIOPS
            self.volumeBurstThroughput = volumeBurstThroughput
            self.volumeSize = volumeSize
            self.volumeType = volumeType
        }

        private enum CodingKeys: String, CodingKey {
            case volumeBaselineIOPS
            case volumeBaselineThroughput
            case volumeBurstIOPS
            case volumeBurstThroughput
            case volumeSize
            case volumeType
        }
    }

    public struct VolumeRecommendation: AWSDecodableShape {
        /// The Amazon Web Services account ID of the volume.
        public let accountId: String?
        /// An array of objects that describe the current configuration of the volume.
        public let currentConfiguration: VolumeConfiguration?
        /// The risk of the current EBS volume not meeting the performance needs of its workloads. The higher the risk, the more likely the current EBS volume doesn't have sufficient capacity.
        public let currentPerformanceRisk: CurrentPerformanceRisk?
        /// The finding classification of the volume. Findings for volumes include:     NotOptimized —A volume is considered not optimized when Compute Optimizer identifies a recommendation that can provide better performance for your workload.      Optimized —An volume is considered optimized when Compute Optimizer determines that the volume is correctly provisioned to run your workload based on the chosen volume type. For optimized resources, Compute Optimizer might recommend a new generation volume type.
        public let finding: EBSFinding?
        /// The timestamp of when the volume recommendation was last generated.
        public let lastRefreshTimestamp: Date?
        /// The number of days for which utilization metrics were analyzed for the volume.
        public let lookBackPeriodInDays: Double?
        /// An array of objects that describe the utilization metrics of the volume.
        public let utilizationMetrics: [EBSUtilizationMetric]?
        /// The Amazon Resource Name (ARN) of the current volume.
        public let volumeArn: String?
        /// An array of objects that describe the recommendation options for the volume.
        public let volumeRecommendationOptions: [VolumeRecommendationOption]?

        public init(accountId: String? = nil, currentConfiguration: VolumeConfiguration? = nil, currentPerformanceRisk: CurrentPerformanceRisk? = nil, finding: EBSFinding? = nil, lastRefreshTimestamp: Date? = nil, lookBackPeriodInDays: Double? = nil, utilizationMetrics: [EBSUtilizationMetric]? = nil, volumeArn: String? = nil, volumeRecommendationOptions: [VolumeRecommendationOption]? = nil) {
            self.accountId = accountId
            self.currentConfiguration = currentConfiguration
            self.currentPerformanceRisk = currentPerformanceRisk
            self.finding = finding
            self.lastRefreshTimestamp = lastRefreshTimestamp
            self.lookBackPeriodInDays = lookBackPeriodInDays
            self.utilizationMetrics = utilizationMetrics
            self.volumeArn = volumeArn
            self.volumeRecommendationOptions = volumeRecommendationOptions
        }

        private enum CodingKeys: String, CodingKey {
            case accountId
            case currentConfiguration
            case currentPerformanceRisk
            case finding
            case lastRefreshTimestamp
            case lookBackPeriodInDays
            case utilizationMetrics
            case volumeArn
            case volumeRecommendationOptions
        }
    }

    public struct VolumeRecommendationOption: AWSDecodableShape {
        /// An array of objects that describe a volume configuration.
        public let configuration: VolumeConfiguration?
        /// The performance risk of the volume recommendation option. Performance risk is the likelihood of the recommended volume type meeting the performance requirement of your workload. The value ranges from 0 - 4, with 0 meaning that the recommended resource is predicted to always provide enough hardware capability. The higher the performance risk is, the more likely you should validate whether the recommendation will meet the performance requirements of your workload before migrating your resource.
        public let performanceRisk: Double?
        /// The rank of the volume recommendation option. The top recommendation option is ranked as 1.
        public let rank: Int?
        /// An object that describes the savings opportunity for the EBS volume recommendation option. Savings opportunity includes the estimated monthly savings amount and percentage.
        public let savingsOpportunity: SavingsOpportunity?

        public init(configuration: VolumeConfiguration? = nil, performanceRisk: Double? = nil, rank: Int? = nil, savingsOpportunity: SavingsOpportunity? = nil) {
            self.configuration = configuration
            self.performanceRisk = performanceRisk
            self.rank = rank
            self.savingsOpportunity = savingsOpportunity
        }

        private enum CodingKeys: String, CodingKey {
            case configuration
            case performanceRisk
            case rank
            case savingsOpportunity
        }
    }
}
