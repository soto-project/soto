//===----------------------------------------------------------------------===//
//
// This source file is part of the Soto for AWS open source project
//
// Copyright (c) 2017-2023 the Soto project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
// See CONTRIBUTORS.txt for the list of Soto project authors
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by https://github.com/soto-project/soto-codegenerator.
// DO NOT EDIT.

@_exported import SotoCore

/// Service object for interacting with AWS CostExplorer service.
///
/// You can use the Cost Explorer API to programmatically query your cost and usage data. You can query for aggregated data such as total monthly costs or total daily usage. You can also query for granular data. This might include the number of daily write operations for Amazon DynamoDB database tables in your production environment.  Service Endpoint The Cost Explorer API provides the following endpoint:    https://ce.us-east-1.amazonaws.com    For information about the costs that are associated with the Cost Explorer API, see Amazon Web Services Cost Management Pricing.
public struct CostExplorer: AWSService {
    // MARK: Member variables

    /// Client used for communication with AWS
    public let client: AWSClient
    /// Service configuration
    public let config: AWSServiceConfig

    // MARK: Initialization

    /// Initialize the CostExplorer client
    /// - parameters:
    ///     - client: AWSClient used to process requests
    ///     - partition: AWS partition where service resides, standard (.aws), china (.awscn), government (.awsusgov).
    ///     - endpoint: Custom endpoint URL to use instead of standard AWS servers
    ///     - middleware: Middleware chain used to edit requests before they are sent and responses before they are decoded 
    ///     - timeout: Timeout value for HTTP requests
    ///     - byteBufferAllocator: Allocator for ByteBuffers
    ///     - options: Service options
    public init(
        client: AWSClient,
        partition: AWSPartition = .aws,
        endpoint: String? = nil,
        middleware: AWSMiddlewareProtocol? = nil,
        timeout: TimeAmount? = nil,
        byteBufferAllocator: ByteBufferAllocator = ByteBufferAllocator(),
        options: AWSServiceConfig.Options = []
    ) {
        self.client = client
        self.config = AWSServiceConfig(
            region: nil,
            partition: partition,
            amzTarget: "AWSInsightsIndexService",
            serviceName: "CostExplorer",
            serviceIdentifier: "ce",
            serviceProtocol: .json(version: "1.1"),
            apiVersion: "2017-10-25",
            endpoint: endpoint,
            serviceEndpoints: Self.serviceEndpoints,
            partitionEndpoints: Self.partitionEndpoints,
            errorType: CostExplorerErrorType.self,
            middleware: middleware,
            timeout: timeout,
            byteBufferAllocator: byteBufferAllocator,
            options: options
        )
    }


    /// custom endpoints for regions
    static var serviceEndpoints: [String: String] {[
        "aws-cn-global": "ce.cn-northwest-1.amazonaws.com.cn",
        "aws-global": "ce.us-east-1.amazonaws.com"
    ]}

    /// Default endpoint and region to use for each partition
    static var partitionEndpoints: [AWSPartition: (endpoint: String, region: SotoCore.Region)] {[
        .aws: (endpoint: "aws-global", region: .useast1),
        .awscn: (endpoint: "aws-cn-global", region: .cnnorthwest1)
    ]}


    // MARK: API Calls

    /// Creates a new cost anomaly detection monitor with the requested type and monitor specification.
    @Sendable
    public func createAnomalyMonitor(_ input: CreateAnomalyMonitorRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> CreateAnomalyMonitorResponse {
        return try await self.client.execute(
            operation: "CreateAnomalyMonitor", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Adds an alert subscription to a cost anomaly detection monitor. You can use each subscription to define subscribers with email or SNS notifications. Email subscribers can set an absolute or percentage threshold and a time frequency for receiving notifications.
    @Sendable
    public func createAnomalySubscription(_ input: CreateAnomalySubscriptionRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> CreateAnomalySubscriptionResponse {
        return try await self.client.execute(
            operation: "CreateAnomalySubscription", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Creates a new Cost Category with the requested name and rules.
    @Sendable
    public func createCostCategoryDefinition(_ input: CreateCostCategoryDefinitionRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> CreateCostCategoryDefinitionResponse {
        return try await self.client.execute(
            operation: "CreateCostCategoryDefinition", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Deletes a cost anomaly monitor.
    @Sendable
    public func deleteAnomalyMonitor(_ input: DeleteAnomalyMonitorRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DeleteAnomalyMonitorResponse {
        return try await self.client.execute(
            operation: "DeleteAnomalyMonitor", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Deletes a cost anomaly subscription.
    @Sendable
    public func deleteAnomalySubscription(_ input: DeleteAnomalySubscriptionRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DeleteAnomalySubscriptionResponse {
        return try await self.client.execute(
            operation: "DeleteAnomalySubscription", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Deletes a Cost Category. Expenses from this month going forward will no longer be categorized with this Cost Category.
    @Sendable
    public func deleteCostCategoryDefinition(_ input: DeleteCostCategoryDefinitionRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DeleteCostCategoryDefinitionResponse {
        return try await self.client.execute(
            operation: "DeleteCostCategoryDefinition", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Returns the name, Amazon Resource Name (ARN), rules, definition, and effective dates of a Cost Category that's defined in the account. You have the option to use EffectiveOn to return a Cost Category that's active on a specific date. If there's no EffectiveOn specified, you see a Cost Category that's effective on the current date. If Cost Category is still effective, EffectiveEnd is omitted in the response.
    @Sendable
    public func describeCostCategoryDefinition(_ input: DescribeCostCategoryDefinitionRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DescribeCostCategoryDefinitionResponse {
        return try await self.client.execute(
            operation: "DescribeCostCategoryDefinition", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Retrieves all of the cost anomalies detected on your account during the time period that's specified by the DateInterval object. Anomalies are available for up to 90 days.
    @Sendable
    public func getAnomalies(_ input: GetAnomaliesRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> GetAnomaliesResponse {
        return try await self.client.execute(
            operation: "GetAnomalies", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Retrieves the cost anomaly monitor definitions for your account. You can filter using a list of cost anomaly monitor Amazon Resource Names (ARNs).
    @Sendable
    public func getAnomalyMonitors(_ input: GetAnomalyMonitorsRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> GetAnomalyMonitorsResponse {
        return try await self.client.execute(
            operation: "GetAnomalyMonitors", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Retrieves the cost anomaly subscription objects for your account. You can filter using a list of cost anomaly monitor Amazon Resource Names (ARNs).
    @Sendable
    public func getAnomalySubscriptions(_ input: GetAnomalySubscriptionsRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> GetAnomalySubscriptionsResponse {
        return try await self.client.execute(
            operation: "GetAnomalySubscriptions", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Retrieves estimated usage records for hourly granularity or resource-level data at daily granularity.
    @Sendable
    public func getApproximateUsageRecords(_ input: GetApproximateUsageRecordsRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> GetApproximateUsageRecordsResponse {
        return try await self.client.execute(
            operation: "GetApproximateUsageRecords", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Retrieves cost and usage metrics for your account. You can specify which cost and usage-related metric that you want the request to return. For example, you can specify BlendedCosts or UsageQuantity. You can also filter and group your data by various dimensions, such as SERVICE or AZ, in a specific time range. For a complete list of valid dimensions, see the GetDimensionValues operation. Management account in an organization in Organizations have access to all member accounts. For information about filter limitations, see Quotas and restrictions in the Billing and Cost Management User Guide.
    @Sendable
    public func getCostAndUsage(_ input: GetCostAndUsageRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> GetCostAndUsageResponse {
        return try await self.client.execute(
            operation: "GetCostAndUsage", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Retrieves cost and usage metrics with resources for your account. You can specify which cost and usage-related metric, such as BlendedCosts or UsageQuantity, that you want the request to return. You can also filter and group your data by various dimensions, such as SERVICE or AZ, in a specific time range. For a complete list of valid dimensions, see the GetDimensionValues operation. Management account in an organization in Organizations have access to all member accounts. This API is currently available for the Amazon Elastic Compute Cloud – Compute service only.  This is an opt-in only feature. You can enable this feature from the Cost Explorer Settings page. For information about how to access the Settings page, see Controlling Access for Cost Explorer in the Billing and Cost Management User Guide.
    @Sendable
    public func getCostAndUsageWithResources(_ input: GetCostAndUsageWithResourcesRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> GetCostAndUsageWithResourcesResponse {
        return try await self.client.execute(
            operation: "GetCostAndUsageWithResources", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Retrieves an array of Cost Category names and values incurred cost.  If some Cost Category names and values are not associated with any cost, they will not be returned by this API.
    @Sendable
    public func getCostCategories(_ input: GetCostCategoriesRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> GetCostCategoriesResponse {
        return try await self.client.execute(
            operation: "GetCostCategories", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Retrieves a forecast for how much Amazon Web Services predicts that you will spend over the forecast time period that you select, based on your past costs.
    @Sendable
    public func getCostForecast(_ input: GetCostForecastRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> GetCostForecastResponse {
        return try await self.client.execute(
            operation: "GetCostForecast", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Retrieves all available filter values for a specified filter over a period of time. You can search the dimension values for an arbitrary string.
    @Sendable
    public func getDimensionValues(_ input: GetDimensionValuesRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> GetDimensionValuesResponse {
        return try await self.client.execute(
            operation: "GetDimensionValues", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Retrieves the reservation coverage for your account, which you can use to see how much of your Amazon Elastic Compute Cloud, Amazon ElastiCache, Amazon Relational Database Service, or Amazon Redshift usage is covered by a reservation. An organization's management account can see the coverage of the associated member accounts. This supports dimensions, Cost Categories, and nested expressions. For any time period, you can filter data about reservation usage by the following dimensions:   AZ   CACHE_ENGINE   DATABASE_ENGINE   DEPLOYMENT_OPTION   INSTANCE_TYPE   LINKED_ACCOUNT   OPERATING_SYSTEM   PLATFORM   REGION   SERVICE   TAG   TENANCY   To determine valid values for a dimension, use the GetDimensionValues operation.
    @Sendable
    public func getReservationCoverage(_ input: GetReservationCoverageRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> GetReservationCoverageResponse {
        return try await self.client.execute(
            operation: "GetReservationCoverage", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Gets recommendations for reservation purchases. These recommendations might help you to reduce your costs. Reservations provide a discounted hourly rate (up to 75%) compared to On-Demand pricing. Amazon Web Services generates your recommendations by identifying your On-Demand usage during a specific time period and collecting your usage into categories that are eligible for a reservation. After Amazon Web Services has these categories, it simulates every combination of reservations in each category of usage to identify the best number of each type of Reserved Instance (RI) to purchase to maximize your estimated savings.  For example, Amazon Web Services automatically aggregates your Amazon EC2 Linux, shared tenancy, and c4 family usage in the US West (Oregon) Region and recommends that you buy size-flexible regional reservations to apply to the c4 family usage. Amazon Web Services recommends the smallest size instance in an instance family. This makes it easier to purchase a size-flexible Reserved Instance (RI). Amazon Web Services also shows the equal number of normalized units. This way, you can purchase any instance size that you want. For this example, your RI recommendation is for c4.large because that is the smallest size instance in the c4 instance family.
    @Sendable
    public func getReservationPurchaseRecommendation(_ input: GetReservationPurchaseRecommendationRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> GetReservationPurchaseRecommendationResponse {
        return try await self.client.execute(
            operation: "GetReservationPurchaseRecommendation", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Retrieves the reservation utilization for your account. Management account in an organization have access to member accounts. You can filter data by dimensions in a time period. You can use GetDimensionValues to determine the possible dimension values. Currently, you can group only by SUBSCRIPTION_ID.
    @Sendable
    public func getReservationUtilization(_ input: GetReservationUtilizationRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> GetReservationUtilizationResponse {
        return try await self.client.execute(
            operation: "GetReservationUtilization", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Creates recommendations that help you save cost by identifying idle and underutilized Amazon EC2 instances. Recommendations are generated to either downsize or terminate instances, along with providing savings detail and metrics. For more information about calculation and function, see Optimizing Your Cost with Rightsizing Recommendations in the Billing and Cost Management User Guide.
    @Sendable
    public func getRightsizingRecommendation(_ input: GetRightsizingRecommendationRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> GetRightsizingRecommendationResponse {
        return try await self.client.execute(
            operation: "GetRightsizingRecommendation", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Retrieves the details for a Savings Plan recommendation. These details include the hourly data-points that construct the cost, coverage, and utilization charts.
    @Sendable
    public func getSavingsPlanPurchaseRecommendationDetails(_ input: GetSavingsPlanPurchaseRecommendationDetailsRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> GetSavingsPlanPurchaseRecommendationDetailsResponse {
        return try await self.client.execute(
            operation: "GetSavingsPlanPurchaseRecommendationDetails", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Retrieves the Savings Plans covered for your account. This enables you to see how much of your cost is covered by a Savings Plan. An organization’s management account can see the coverage of the associated member accounts. This supports dimensions, Cost Categories, and nested expressions. For any time period, you can filter data for Savings Plans usage with the following dimensions:    LINKED_ACCOUNT     REGION     SERVICE     INSTANCE_FAMILY    To determine valid values for a dimension, use the GetDimensionValues operation.
    @Sendable
    public func getSavingsPlansCoverage(_ input: GetSavingsPlansCoverageRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> GetSavingsPlansCoverageResponse {
        return try await self.client.execute(
            operation: "GetSavingsPlansCoverage", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Retrieves the Savings Plans recommendations for your account. First use StartSavingsPlansPurchaseRecommendationGeneration to generate a new set of recommendations, and then use GetSavingsPlansPurchaseRecommendation to retrieve them.
    @Sendable
    public func getSavingsPlansPurchaseRecommendation(_ input: GetSavingsPlansPurchaseRecommendationRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> GetSavingsPlansPurchaseRecommendationResponse {
        return try await self.client.execute(
            operation: "GetSavingsPlansPurchaseRecommendation", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Retrieves the Savings Plans utilization for your account across date ranges with daily or monthly granularity. Management account in an organization have access to member accounts. You can use GetDimensionValues in SAVINGS_PLANS to determine the possible dimension values.  You can't group by any dimension values for GetSavingsPlansUtilization.
    @Sendable
    public func getSavingsPlansUtilization(_ input: GetSavingsPlansUtilizationRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> GetSavingsPlansUtilizationResponse {
        return try await self.client.execute(
            operation: "GetSavingsPlansUtilization", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Retrieves attribute data along with aggregate utilization and savings data for a given time period. This doesn't support granular or grouped data (daily/monthly) in response. You can't retrieve data by dates in a single response similar to GetSavingsPlanUtilization, but you have the option to make multiple calls to GetSavingsPlanUtilizationDetails by providing individual dates. You can use GetDimensionValues in SAVINGS_PLANS to determine the possible dimension values.   GetSavingsPlanUtilizationDetails internally groups data by SavingsPlansArn.
    @Sendable
    public func getSavingsPlansUtilizationDetails(_ input: GetSavingsPlansUtilizationDetailsRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> GetSavingsPlansUtilizationDetailsResponse {
        return try await self.client.execute(
            operation: "GetSavingsPlansUtilizationDetails", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Queries for available tag keys and tag values for a specified period. You can search the tag values for an arbitrary string.
    @Sendable
    public func getTags(_ input: GetTagsRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> GetTagsResponse {
        return try await self.client.execute(
            operation: "GetTags", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Retrieves a forecast for how much Amazon Web Services predicts that you will use over the forecast time period that you select, based on your past usage.
    @Sendable
    public func getUsageForecast(_ input: GetUsageForecastRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> GetUsageForecastResponse {
        return try await self.client.execute(
            operation: "GetUsageForecast", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    ///  Retrieves a list of your historical cost allocation tag backfill requests.
    @Sendable
    public func listCostAllocationTagBackfillHistory(_ input: ListCostAllocationTagBackfillHistoryRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> ListCostAllocationTagBackfillHistoryResponse {
        return try await self.client.execute(
            operation: "ListCostAllocationTagBackfillHistory", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Get a list of cost allocation tags. All inputs in the API are optional and serve as filters. By default, all cost allocation tags are returned.
    @Sendable
    public func listCostAllocationTags(_ input: ListCostAllocationTagsRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> ListCostAllocationTagsResponse {
        return try await self.client.execute(
            operation: "ListCostAllocationTags", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Returns the name, Amazon Resource Name (ARN), NumberOfRules and effective dates of all Cost Categories defined in the account. You have the option to use EffectiveOn to return a list of Cost Categories that were active on a specific date. If there is no EffectiveOn specified, you’ll see Cost Categories that are effective on the current date. If Cost Category is still effective, EffectiveEnd is omitted in the response. ListCostCategoryDefinitions supports pagination. The request can have a MaxResults range up to 100.
    @Sendable
    public func listCostCategoryDefinitions(_ input: ListCostCategoryDefinitionsRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> ListCostCategoryDefinitionsResponse {
        return try await self.client.execute(
            operation: "ListCostCategoryDefinitions", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Retrieves a list of your historical recommendation generations within the past 30 days.
    @Sendable
    public func listSavingsPlansPurchaseRecommendationGeneration(_ input: ListSavingsPlansPurchaseRecommendationGenerationRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> ListSavingsPlansPurchaseRecommendationGenerationResponse {
        return try await self.client.execute(
            operation: "ListSavingsPlansPurchaseRecommendationGeneration", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Returns a list of resource tags associated with the resource specified by the Amazon Resource Name (ARN).
    @Sendable
    public func listTagsForResource(_ input: ListTagsForResourceRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> ListTagsForResourceResponse {
        return try await self.client.execute(
            operation: "ListTagsForResource", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Modifies the feedback property of a given cost anomaly.
    @Sendable
    public func provideAnomalyFeedback(_ input: ProvideAnomalyFeedbackRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> ProvideAnomalyFeedbackResponse {
        return try await self.client.execute(
            operation: "ProvideAnomalyFeedback", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    ///  Request a cost allocation tag backfill. This will backfill the activation status (either active or inactive) for all tag keys from para:BackfillFrom up to the when this request is made. You can request a backfill once every 24 hours.
    @Sendable
    public func startCostAllocationTagBackfill(_ input: StartCostAllocationTagBackfillRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> StartCostAllocationTagBackfillResponse {
        return try await self.client.execute(
            operation: "StartCostAllocationTagBackfill", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Requests a Savings Plans recommendation generation. This enables you to calculate a fresh set of Savings Plans recommendations that takes your latest usage data and current Savings Plans inventory into account. You can refresh Savings Plans recommendations up to three times daily for a consolidated billing family.   StartSavingsPlansPurchaseRecommendationGeneration has no request syntax because no input parameters are needed to support this operation.
    @Sendable
    public func startSavingsPlansPurchaseRecommendationGeneration(_ input: StartSavingsPlansPurchaseRecommendationGenerationRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> StartSavingsPlansPurchaseRecommendationGenerationResponse {
        return try await self.client.execute(
            operation: "StartSavingsPlansPurchaseRecommendationGeneration", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// An API operation for adding one or more tags (key-value pairs) to a resource. You can use the TagResource operation with a resource that already has tags. If you specify a new tag key for the resource, this tag is appended to the list of tags associated with the resource. If you specify a tag key that is already associated with the resource, the new tag value you specify replaces the previous value for that tag. Although the maximum number of array members is 200, user-tag maximum is 50. The remaining are reserved for Amazon Web Services use.
    @Sendable
    public func tagResource(_ input: TagResourceRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> TagResourceResponse {
        return try await self.client.execute(
            operation: "TagResource", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Removes one or more tags from a resource. Specify only tag keys in your request. Don't specify the value.
    @Sendable
    public func untagResource(_ input: UntagResourceRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> UntagResourceResponse {
        return try await self.client.execute(
            operation: "UntagResource", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Updates an existing cost anomaly monitor. The changes made are applied going forward, and doesn't change anomalies detected in the past.
    @Sendable
    public func updateAnomalyMonitor(_ input: UpdateAnomalyMonitorRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> UpdateAnomalyMonitorResponse {
        return try await self.client.execute(
            operation: "UpdateAnomalyMonitor", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Updates an existing cost anomaly subscription. Specify the fields that you want to update. Omitted fields are unchanged.  The JSON below describes the generic construct for each type. See Request Parameters for possible values as they apply to AnomalySubscription.
    @Sendable
    public func updateAnomalySubscription(_ input: UpdateAnomalySubscriptionRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> UpdateAnomalySubscriptionResponse {
        return try await self.client.execute(
            operation: "UpdateAnomalySubscription", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Updates status for cost allocation tags in bulk, with maximum batch size of 20. If the tag status that's updated is the same as the existing tag status, the request doesn't fail. Instead, it doesn't have any effect on the tag status (for example, activating the active tag).
    @Sendable
    public func updateCostAllocationTagsStatus(_ input: UpdateCostAllocationTagsStatusRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> UpdateCostAllocationTagsStatusResponse {
        return try await self.client.execute(
            operation: "UpdateCostAllocationTagsStatus", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Updates an existing Cost Category. Changes made to the Cost Category rules will be used to categorize the current month’s expenses and future expenses. This won’t change categorization for the previous months.
    @Sendable
    public func updateCostCategoryDefinition(_ input: UpdateCostCategoryDefinitionRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> UpdateCostCategoryDefinitionResponse {
        return try await self.client.execute(
            operation: "UpdateCostCategoryDefinition", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
}

extension CostExplorer {
    /// Initializer required by `AWSService.with(middlewares:timeout:byteBufferAllocator:options)`. You are not able to use this initializer directly as there are not public
    /// initializers for `AWSServiceConfig.Patch`. Please use `AWSService.with(middlewares:timeout:byteBufferAllocator:options)` instead.
    public init(from: CostExplorer, patch: AWSServiceConfig.Patch) {
        self.client = from.client
        self.config = from.config.with(patch: patch)
    }
}

// MARK: Paginators

@available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
extension CostExplorer {
    /// Retrieves the Savings Plans covered for your account. This enables you to see how much of your cost is covered by a Savings Plan. An organization’s management account can see the coverage of the associated member accounts. This supports dimensions, Cost Categories, and nested expressions. For any time period, you can filter data for Savings Plans usage with the following dimensions:    LINKED_ACCOUNT     REGION     SERVICE     INSTANCE_FAMILY    To determine valid values for a dimension, use the GetDimensionValues operation.
    /// Return PaginatorSequence for operation.
    ///
    /// - Parameters:
    ///   - input: Input for request
    ///   - logger: Logger used flot logging
    public func getSavingsPlansCoveragePaginator(
        _ input: GetSavingsPlansCoverageRequest,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<GetSavingsPlansCoverageRequest, GetSavingsPlansCoverageResponse> {
        return .init(
            input: input,
            command: self.getSavingsPlansCoverage,
            inputKey: \GetSavingsPlansCoverageRequest.nextToken,
            outputKey: \GetSavingsPlansCoverageResponse.nextToken,
            logger: logger
        )
    }

    /// Retrieves attribute data along with aggregate utilization and savings data for a given time period. This doesn't support granular or grouped data (daily/monthly) in response. You can't retrieve data by dates in a single response similar to GetSavingsPlanUtilization, but you have the option to make multiple calls to GetSavingsPlanUtilizationDetails by providing individual dates. You can use GetDimensionValues in SAVINGS_PLANS to determine the possible dimension values.   GetSavingsPlanUtilizationDetails internally groups data by SavingsPlansArn.
    /// Return PaginatorSequence for operation.
    ///
    /// - Parameters:
    ///   - input: Input for request
    ///   - logger: Logger used flot logging
    public func getSavingsPlansUtilizationDetailsPaginator(
        _ input: GetSavingsPlansUtilizationDetailsRequest,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<GetSavingsPlansUtilizationDetailsRequest, GetSavingsPlansUtilizationDetailsResponse> {
        return .init(
            input: input,
            command: self.getSavingsPlansUtilizationDetails,
            inputKey: \GetSavingsPlansUtilizationDetailsRequest.nextToken,
            outputKey: \GetSavingsPlansUtilizationDetailsResponse.nextToken,
            logger: logger
        )
    }

    ///  Retrieves a list of your historical cost allocation tag backfill requests.
    /// Return PaginatorSequence for operation.
    ///
    /// - Parameters:
    ///   - input: Input for request
    ///   - logger: Logger used flot logging
    public func listCostAllocationTagBackfillHistoryPaginator(
        _ input: ListCostAllocationTagBackfillHistoryRequest,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<ListCostAllocationTagBackfillHistoryRequest, ListCostAllocationTagBackfillHistoryResponse> {
        return .init(
            input: input,
            command: self.listCostAllocationTagBackfillHistory,
            inputKey: \ListCostAllocationTagBackfillHistoryRequest.nextToken,
            outputKey: \ListCostAllocationTagBackfillHistoryResponse.nextToken,
            logger: logger
        )
    }

    /// Get a list of cost allocation tags. All inputs in the API are optional and serve as filters. By default, all cost allocation tags are returned.
    /// Return PaginatorSequence for operation.
    ///
    /// - Parameters:
    ///   - input: Input for request
    ///   - logger: Logger used flot logging
    public func listCostAllocationTagsPaginator(
        _ input: ListCostAllocationTagsRequest,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<ListCostAllocationTagsRequest, ListCostAllocationTagsResponse> {
        return .init(
            input: input,
            command: self.listCostAllocationTags,
            inputKey: \ListCostAllocationTagsRequest.nextToken,
            outputKey: \ListCostAllocationTagsResponse.nextToken,
            logger: logger
        )
    }

    /// Returns the name, Amazon Resource Name (ARN), NumberOfRules and effective dates of all Cost Categories defined in the account. You have the option to use EffectiveOn to return a list of Cost Categories that were active on a specific date. If there is no EffectiveOn specified, you’ll see Cost Categories that are effective on the current date. If Cost Category is still effective, EffectiveEnd is omitted in the response. ListCostCategoryDefinitions supports pagination. The request can have a MaxResults range up to 100.
    /// Return PaginatorSequence for operation.
    ///
    /// - Parameters:
    ///   - input: Input for request
    ///   - logger: Logger used flot logging
    public func listCostCategoryDefinitionsPaginator(
        _ input: ListCostCategoryDefinitionsRequest,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<ListCostCategoryDefinitionsRequest, ListCostCategoryDefinitionsResponse> {
        return .init(
            input: input,
            command: self.listCostCategoryDefinitions,
            inputKey: \ListCostCategoryDefinitionsRequest.nextToken,
            outputKey: \ListCostCategoryDefinitionsResponse.nextToken,
            logger: logger
        )
    }
}

extension CostExplorer.GetSavingsPlansCoverageRequest: AWSPaginateToken {
    public func usingPaginationToken(_ token: String) -> CostExplorer.GetSavingsPlansCoverageRequest {
        return .init(
            filter: self.filter,
            granularity: self.granularity,
            groupBy: self.groupBy,
            maxResults: self.maxResults,
            metrics: self.metrics,
            nextToken: token,
            sortBy: self.sortBy,
            timePeriod: self.timePeriod
        )
    }
}

extension CostExplorer.GetSavingsPlansUtilizationDetailsRequest: AWSPaginateToken {
    public func usingPaginationToken(_ token: String) -> CostExplorer.GetSavingsPlansUtilizationDetailsRequest {
        return .init(
            dataType: self.dataType,
            filter: self.filter,
            maxResults: self.maxResults,
            nextToken: token,
            sortBy: self.sortBy,
            timePeriod: self.timePeriod
        )
    }
}

extension CostExplorer.ListCostAllocationTagBackfillHistoryRequest: AWSPaginateToken {
    public func usingPaginationToken(_ token: String) -> CostExplorer.ListCostAllocationTagBackfillHistoryRequest {
        return .init(
            maxResults: self.maxResults,
            nextToken: token
        )
    }
}

extension CostExplorer.ListCostAllocationTagsRequest: AWSPaginateToken {
    public func usingPaginationToken(_ token: String) -> CostExplorer.ListCostAllocationTagsRequest {
        return .init(
            maxResults: self.maxResults,
            nextToken: token,
            status: self.status,
            tagKeys: self.tagKeys,
            type: self.type
        )
    }
}

extension CostExplorer.ListCostCategoryDefinitionsRequest: AWSPaginateToken {
    public func usingPaginationToken(_ token: String) -> CostExplorer.ListCostCategoryDefinitionsRequest {
        return .init(
            effectiveOn: self.effectiveOn,
            maxResults: self.maxResults,
            nextToken: token
        )
    }
}
