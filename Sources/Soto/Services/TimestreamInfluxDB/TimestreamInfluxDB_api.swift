//===----------------------------------------------------------------------===//
//
// This source file is part of the Soto for AWS open source project
//
// Copyright (c) 2017-2023 the Soto project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
// See CONTRIBUTORS.txt for the list of Soto project authors
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by https://github.com/soto-project/soto-codegenerator.
// DO NOT EDIT.

@_exported import SotoCore

/// Service object for interacting with AWS TimestreamInfluxDB service.
///
/// Amazon Timestream for InfluxDB is a managed time-series database engine that makes it easy for application developers and DevOps teams to run InfluxDB databases on AWS for near real-time time-series applications using open-source APIs. With Amazon Timestream for InfluxDB, it is easy to set up, operate, and scale time-series workloads that can answer queries with single-digit millisecond query response time.
public struct TimestreamInfluxDB: AWSService {
    // MARK: Member variables

    /// Client used for communication with AWS
    public let client: AWSClient
    /// Service configuration
    public let config: AWSServiceConfig

    // MARK: Initialization

    /// Initialize the TimestreamInfluxDB client
    /// - parameters:
    ///     - client: AWSClient used to process requests
    ///     - region: Region of server you want to communicate with. This will override the partition parameter.
    ///     - partition: AWS partition where service resides, standard (.aws), china (.awscn), government (.awsusgov).
    ///     - endpoint: Custom endpoint URL to use instead of standard AWS servers
    ///     - middleware: Middleware chain used to edit requests before they are sent and responses before they are decoded 
    ///     - timeout: Timeout value for HTTP requests
    ///     - byteBufferAllocator: Allocator for ByteBuffers
    ///     - options: Service options
    public init(
        client: AWSClient,
        region: SotoCore.Region? = nil,
        partition: AWSPartition = .aws,
        endpoint: String? = nil,
        middleware: AWSMiddlewareProtocol? = nil,
        timeout: TimeAmount? = nil,
        byteBufferAllocator: ByteBufferAllocator = ByteBufferAllocator(),
        options: AWSServiceConfig.Options = []
    ) {
        self.client = client
        self.config = AWSServiceConfig(
            region: region,
            partition: region?.partition ?? partition,
            amzTarget: "AmazonTimestreamInfluxDB",
            serviceName: "TimestreamInfluxDB",
            serviceIdentifier: "timestream-influxdb",
            serviceProtocol: .json(version: "1.0"),
            apiVersion: "2023-01-27",
            endpoint: endpoint,
            errorType: TimestreamInfluxDBErrorType.self,
            middleware: middleware,
            timeout: timeout,
            byteBufferAllocator: byteBufferAllocator,
            options: options
        )
    }





    // MARK: API Calls

    /// Creates a new Timestream for InfluxDB DB instance.
    @Sendable
    public func createDbInstance(_ input: CreateDbInstanceInput, logger: Logger = AWSClient.loggingDisabled) async throws -> CreateDbInstanceOutput {
        return try await self.client.execute(
            operation: "CreateDbInstance", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Creates a new Timestream for InfluxDB DB parameter group to associate with DB instances.
    @Sendable
    public func createDbParameterGroup(_ input: CreateDbParameterGroupInput, logger: Logger = AWSClient.loggingDisabled) async throws -> CreateDbParameterGroupOutput {
        return try await self.client.execute(
            operation: "CreateDbParameterGroup", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Deletes a Timestream for InfluxDB DB instance.
    @Sendable
    public func deleteDbInstance(_ input: DeleteDbInstanceInput, logger: Logger = AWSClient.loggingDisabled) async throws -> DeleteDbInstanceOutput {
        return try await self.client.execute(
            operation: "DeleteDbInstance", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Returns a Timestream for InfluxDB DB instance.
    @Sendable
    public func getDbInstance(_ input: GetDbInstanceInput, logger: Logger = AWSClient.loggingDisabled) async throws -> GetDbInstanceOutput {
        return try await self.client.execute(
            operation: "GetDbInstance", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Returns a Timestream for InfluxDB DB parameter group.
    @Sendable
    public func getDbParameterGroup(_ input: GetDbParameterGroupInput, logger: Logger = AWSClient.loggingDisabled) async throws -> GetDbParameterGroupOutput {
        return try await self.client.execute(
            operation: "GetDbParameterGroup", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Returns a list of Timestream for InfluxDB DB instances.
    @Sendable
    public func listDbInstances(_ input: ListDbInstancesInput, logger: Logger = AWSClient.loggingDisabled) async throws -> ListDbInstancesOutput {
        return try await self.client.execute(
            operation: "ListDbInstances", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Returns a list of Timestream for InfluxDB DB parameter groups.
    @Sendable
    public func listDbParameterGroups(_ input: ListDbParameterGroupsInput, logger: Logger = AWSClient.loggingDisabled) async throws -> ListDbParameterGroupsOutput {
        return try await self.client.execute(
            operation: "ListDbParameterGroups", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// A list of tags applied to the resource.
    @Sendable
    public func listTagsForResource(_ input: ListTagsForResourceRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> ListTagsForResourceResponse {
        return try await self.client.execute(
            operation: "ListTagsForResource", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Tags are composed of a Key/Value pairs. You can use tags to categorize and track your Timestream for InfluxDB resources.
    @Sendable
    public func tagResource(_ input: TagResourceRequest, logger: Logger = AWSClient.loggingDisabled) async throws {
        return try await self.client.execute(
            operation: "TagResource", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Removes the tag from the specified resource.
    @Sendable
    public func untagResource(_ input: UntagResourceRequest, logger: Logger = AWSClient.loggingDisabled) async throws {
        return try await self.client.execute(
            operation: "UntagResource", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Updates a Timestream for InfluxDB DB instance.
    @Sendable
    public func updateDbInstance(_ input: UpdateDbInstanceInput, logger: Logger = AWSClient.loggingDisabled) async throws -> UpdateDbInstanceOutput {
        return try await self.client.execute(
            operation: "UpdateDbInstance", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
}

extension TimestreamInfluxDB {
    /// Initializer required by `AWSService.with(middlewares:timeout:byteBufferAllocator:options)`. You are not able to use this initializer directly as there are not public
    /// initializers for `AWSServiceConfig.Patch`. Please use `AWSService.with(middlewares:timeout:byteBufferAllocator:options)` instead.
    public init(from: TimestreamInfluxDB, patch: AWSServiceConfig.Patch) {
        self.client = from.client
        self.config = from.config.with(patch: patch)
    }
}

// MARK: Paginators

@available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
extension TimestreamInfluxDB {
    /// Returns a list of Timestream for InfluxDB DB instances.
    /// Return PaginatorSequence for operation.
    ///
    /// - Parameters:
    ///   - input: Input for request
    ///   - logger: Logger used flot logging
    public func listDbInstancesPaginator(
        _ input: ListDbInstancesInput,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<ListDbInstancesInput, ListDbInstancesOutput> {
        return .init(
            input: input,
            command: self.listDbInstances,
            inputKey: \ListDbInstancesInput.nextToken,
            outputKey: \ListDbInstancesOutput.nextToken,
            logger: logger
        )
    }

    /// Returns a list of Timestream for InfluxDB DB parameter groups.
    /// Return PaginatorSequence for operation.
    ///
    /// - Parameters:
    ///   - input: Input for request
    ///   - logger: Logger used flot logging
    public func listDbParameterGroupsPaginator(
        _ input: ListDbParameterGroupsInput,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<ListDbParameterGroupsInput, ListDbParameterGroupsOutput> {
        return .init(
            input: input,
            command: self.listDbParameterGroups,
            inputKey: \ListDbParameterGroupsInput.nextToken,
            outputKey: \ListDbParameterGroupsOutput.nextToken,
            logger: logger
        )
    }
}

extension TimestreamInfluxDB.ListDbInstancesInput: AWSPaginateToken {
    public func usingPaginationToken(_ token: String) -> TimestreamInfluxDB.ListDbInstancesInput {
        return .init(
            maxResults: self.maxResults,
            nextToken: token
        )
    }
}

extension TimestreamInfluxDB.ListDbParameterGroupsInput: AWSPaginateToken {
    public func usingPaginationToken(_ token: String) -> TimestreamInfluxDB.ListDbParameterGroupsInput {
        return .init(
            maxResults: self.maxResults,
            nextToken: token
        )
    }
}
