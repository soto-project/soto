//===----------------------------------------------------------------------===//
//
// This source file is part of the Soto for AWS open source project
//
// Copyright (c) 2017-2023 the Soto project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
// See CONTRIBUTORS.txt for the list of Soto project authors
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by https://github.com/soto-project/soto-codegenerator.
// DO NOT EDIT.

@_exported import SotoCore

/// Service object for interacting with AWS Kendra service.
///
/// Amazon Kendra is a service for indexing large document sets.
public struct Kendra: AWSService {
    // MARK: Member variables

    /// Client used for communication with AWS
    public let client: AWSClient
    /// Service configuration
    public let config: AWSServiceConfig

    // MARK: Initialization

    /// Initialize the Kendra client
    /// - parameters:
    ///     - client: AWSClient used to process requests
    ///     - region: Region of server you want to communicate with. This will override the partition parameter.
    ///     - partition: AWS partition where service resides, standard (.aws), china (.awscn), government (.awsusgov).
    ///     - endpoint: Custom endpoint URL to use instead of standard AWS servers
    ///     - middleware: Middleware chain used to edit requests before they are sent and responses before they are decoded 
    ///     - timeout: Timeout value for HTTP requests
    ///     - byteBufferAllocator: Allocator for ByteBuffers
    ///     - options: Service options
    public init(
        client: AWSClient,
        region: SotoCore.Region? = nil,
        partition: AWSPartition = .aws,
        endpoint: String? = nil,
        middleware: AWSMiddlewareProtocol? = nil,
        timeout: TimeAmount? = nil,
        byteBufferAllocator: ByteBufferAllocator = ByteBufferAllocator(),
        options: AWSServiceConfig.Options = []
    ) {
        self.client = client
        self.config = AWSServiceConfig(
            region: region,
            partition: region?.partition ?? partition,
            amzTarget: "AWSKendraFrontendService",
            serviceName: "Kendra",
            serviceIdentifier: "kendra",
            serviceProtocol: .json(version: "1.1"),
            apiVersion: "2019-02-03",
            endpoint: endpoint,
            variantEndpoints: Self.variantEndpoints,
            errorType: KendraErrorType.self,
            middleware: middleware,
            timeout: timeout,
            byteBufferAllocator: byteBufferAllocator,
            options: options
        )
    }




    /// FIPS and dualstack endpoints
    static var variantEndpoints: [EndpointVariantType: AWSServiceConfig.EndpointVariant] {[
        [.fips]: .init(endpoints: [
            "us-east-1": "kendra-fips.us-east-1.amazonaws.com",
            "us-east-2": "kendra-fips.us-east-2.amazonaws.com",
            "us-gov-west-1": "kendra-fips.us-gov-west-1.amazonaws.com",
            "us-west-2": "kendra-fips.us-west-2.amazonaws.com"
        ])
    ]}

    // MARK: API Calls

    /// Grants users or groups in your IAM Identity Center identity source access  to your Amazon Kendra experience. You can create an Amazon Kendra experience such as a  search application. For more information on creating a search application  experience, see Building  a search experience with no code.
    @Sendable
    public func associateEntitiesToExperience(_ input: AssociateEntitiesToExperienceRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> AssociateEntitiesToExperienceResponse {
        return try await self.client.execute(
            operation: "AssociateEntitiesToExperience", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Defines the specific permissions of users or groups in your IAM Identity Center identity source with access to your Amazon Kendra experience. You can create an Amazon Kendra  experience such as a search application. For more information on creating a  search application experience, see Building  a search experience with no code.
    @Sendable
    public func associatePersonasToEntities(_ input: AssociatePersonasToEntitiesRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> AssociatePersonasToEntitiesResponse {
        return try await self.client.execute(
            operation: "AssociatePersonasToEntities", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Removes one or more documents from an index. The documents must have been added with the BatchPutDocument API. The documents are deleted asynchronously. You can see the progress of the deletion by using Amazon Web Services CloudWatch. Any error messages related to the processing of the batch are sent to your Amazon Web Services CloudWatch log. You can also use the BatchGetDocumentStatus API to monitor the progress of deleting your documents. Deleting documents from an index using BatchDeleteDocument could take up to an hour or more, depending on the number of documents you want to delete.
    @Sendable
    public func batchDeleteDocument(_ input: BatchDeleteDocumentRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> BatchDeleteDocumentResponse {
        return try await self.client.execute(
            operation: "BatchDeleteDocument", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Removes one or more sets of featured results. Features results are placed above all other results for certain queries. If there's an exact match of a  query, then one or more specific documents are featured in the search results.
    @Sendable
    public func batchDeleteFeaturedResultsSet(_ input: BatchDeleteFeaturedResultsSetRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> BatchDeleteFeaturedResultsSetResponse {
        return try await self.client.execute(
            operation: "BatchDeleteFeaturedResultsSet", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Returns the indexing status for one or more documents submitted with the  BatchPutDocument API. When you use the BatchPutDocument API, documents are indexed asynchronously. You can use the BatchGetDocumentStatus API to get the current status of a list of documents so that you can determine if they have been successfully indexed. You can also use the BatchGetDocumentStatus API to check the status of the  BatchDeleteDocument API. When a document is deleted from the index, Amazon Kendra returns NOT_FOUND as the status.
    @Sendable
    public func batchGetDocumentStatus(_ input: BatchGetDocumentStatusRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> BatchGetDocumentStatusResponse {
        return try await self.client.execute(
            operation: "BatchGetDocumentStatus", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Adds one or more documents to an index. The BatchPutDocument API enables you to ingest inline documents or a set of documents stored in an Amazon S3 bucket. Use this API to ingest your text and unstructured text into an index, add custom attributes to the documents, and to attach an access control list to the documents added to the index. The documents are indexed asynchronously. You can see the progress of the batch using Amazon Web Services CloudWatch. Any error messages related to processing the batch are sent to your Amazon Web Services CloudWatch log. You can also use the BatchGetDocumentStatus API to monitor the progress of indexing your documents. For an example of ingesting inline documents using Python and Java SDKs, see Adding files directly to an index.
    @Sendable
    public func batchPutDocument(_ input: BatchPutDocumentRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> BatchPutDocumentResponse {
        return try await self.client.execute(
            operation: "BatchPutDocument", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Clears existing query suggestions from an index. This deletes existing suggestions only, not the queries  in the query log. After you clear suggestions, Amazon Kendra learns  new suggestions based on new queries added to the query log  from the time you cleared suggestions. If you do not see any  new suggestions, then please allow Amazon Kendra to collect  enough queries to learn new suggestions.  ClearQuerySuggestions is currently not supported in the  Amazon Web Services GovCloud (US-West) region.
    @Sendable
    public func clearQuerySuggestions(_ input: ClearQuerySuggestionsRequest, logger: Logger = AWSClient.loggingDisabled) async throws {
        return try await self.client.execute(
            operation: "ClearQuerySuggestions", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Creates an access configuration for your documents. This includes user and group access information for your documents. This is useful for user context filtering, where search results are filtered based on the user or their group access to documents. You can use this to re-configure your existing document level access control without indexing all of your documents again. For example, your index contains top-secret company documents that only certain employees or users should access. One of these users leaves the company or switches to a team that should be blocked from accessing top-secret documents. The user still has access to top-secret documents because the user had access when your documents were previously indexed. You can create a specific access control configuration for the user with deny access. You can later update the access control configuration to allow access if the user returns to the company and re-joins the 'top-secret' team. You can re-configure access control for your documents as circumstances change. To apply your access control configuration to certain documents, you call the BatchPutDocument API with the AccessControlConfigurationId included in the Document object. If you use an S3 bucket as a data source, you update the .metadata.json with the AccessControlConfigurationId and synchronize your data source. Amazon Kendra currently only supports access control configuration for S3 data sources and documents indexed using the BatchPutDocument API.
    @Sendable
    public func createAccessControlConfiguration(_ input: CreateAccessControlConfigurationRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> CreateAccessControlConfigurationResponse {
        return try await self.client.execute(
            operation: "CreateAccessControlConfiguration", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Creates a data source connector that you want to use with an Amazon Kendra index. You specify a name, data source connector type and description for your data source. You also specify configuration information for the data source connector.  CreateDataSource is a synchronous operation. The operation returns 200 if the data source was successfully created. Otherwise, an exception is raised. For an example of creating an index and data source using the Python SDK, see Getting started with Python SDK. For an example of creating an index and data source using the Java SDK, see Getting started with Java SDK.
    @Sendable
    public func createDataSource(_ input: CreateDataSourceRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> CreateDataSourceResponse {
        return try await self.client.execute(
            operation: "CreateDataSource", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Creates an Amazon Kendra experience such as a search application. For more information  on creating a search application experience, including using the Python and Java SDKs,  see Building a  search experience with no code.
    @Sendable
    public func createExperience(_ input: CreateExperienceRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> CreateExperienceResponse {
        return try await self.client.execute(
            operation: "CreateExperience", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Creates a set of frequently ask questions (FAQs) using a specified FAQ file stored  in an Amazon S3 bucket. Adding FAQs to an index is an asynchronous operation. For an example of adding an FAQ to an index using Python and Java SDKs, see Using your FAQ file.
    @Sendable
    public func createFaq(_ input: CreateFaqRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> CreateFaqResponse {
        return try await self.client.execute(
            operation: "CreateFaq", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Creates a set of featured results to display at the top of the search results page. Featured results are placed above all other results for certain queries. You map  specific queries to specific documents for featuring in the results. If a query  contains an exact match, then one or more specific documents are featured in the  search results. You can create up to 50 sets of featured results per index. You can request to  increase this limit by contacting Support.
    @Sendable
    public func createFeaturedResultsSet(_ input: CreateFeaturedResultsSetRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> CreateFeaturedResultsSetResponse {
        return try await self.client.execute(
            operation: "CreateFeaturedResultsSet", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Creates an Amazon Kendra index. Index creation is an asynchronous API. To determine if index creation has completed, check the Status field returned from a call to DescribeIndex. The Status field is set to ACTIVE when the index is ready to use. Once the index is active, you can index your documents using the BatchPutDocument API or using one of the supported data sources. For an example of creating an index and data source using the Python SDK, see Getting started with Python SDK. For an example of creating an index and data source using the Java SDK, see Getting started with Java SDK.
    @Sendable
    public func createIndex(_ input: CreateIndexRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> CreateIndexResponse {
        return try await self.client.execute(
            operation: "CreateIndex", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Creates a block list to exlcude certain queries from suggestions. Any query that contains words or phrases specified in the block  list is blocked or filtered out from being shown as a suggestion. You need to provide the file location of your block list text file  in your S3 bucket. In your text file, enter each block word or phrase  on a separate line. For information on the current quota limits for block lists, see  Quotas  for Amazon Kendra.  CreateQuerySuggestionsBlockList is currently not supported in the  Amazon Web Services GovCloud (US-West) region. For an example of creating a block list for query suggestions using the  Python SDK, see Query  suggestions block list.
    @Sendable
    public func createQuerySuggestionsBlockList(_ input: CreateQuerySuggestionsBlockListRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> CreateQuerySuggestionsBlockListResponse {
        return try await self.client.execute(
            operation: "CreateQuerySuggestionsBlockList", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Creates a thesaurus for an index. The thesaurus contains a list of synonyms in Solr format. For an example of adding a thesaurus file to an index, see  Adding  custom synonyms to an index.
    @Sendable
    public func createThesaurus(_ input: CreateThesaurusRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> CreateThesaurusResponse {
        return try await self.client.execute(
            operation: "CreateThesaurus", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Deletes an access control configuration that you created for your documents in an index. This includes user and group access information for your documents. This is useful for user context filtering, where search results are filtered based on the user or their group access to documents.
    @Sendable
    public func deleteAccessControlConfiguration(_ input: DeleteAccessControlConfigurationRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DeleteAccessControlConfigurationResponse {
        return try await self.client.execute(
            operation: "DeleteAccessControlConfiguration", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Deletes an Amazon Kendra data source connector. An exception is not thrown if the data source is already being deleted. While the data source is being deleted, the Status field returned by a call to the DescribeDataSource API is set to DELETING. For more information, see Deleting Data Sources. Deleting an entire data source or re-syncing your index after deleting specific documents  from a data source could take up to an hour or more, depending on the number of documents you  want to delete.
    @Sendable
    public func deleteDataSource(_ input: DeleteDataSourceRequest, logger: Logger = AWSClient.loggingDisabled) async throws {
        return try await self.client.execute(
            operation: "DeleteDataSource", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Deletes your Amazon Kendra experience such as a search application. For more information on creating a search application experience, see Building a search experience with no code.
    @Sendable
    public func deleteExperience(_ input: DeleteExperienceRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DeleteExperienceResponse {
        return try await self.client.execute(
            operation: "DeleteExperience", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Removes an FAQ from an index.
    @Sendable
    public func deleteFaq(_ input: DeleteFaqRequest, logger: Logger = AWSClient.loggingDisabled) async throws {
        return try await self.client.execute(
            operation: "DeleteFaq", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Deletes an Amazon Kendra index. An exception is not thrown if the index is already being deleted. While the index is being deleted, the Status field returned by a call to the DescribeIndex API is set to DELETING.
    @Sendable
    public func deleteIndex(_ input: DeleteIndexRequest, logger: Logger = AWSClient.loggingDisabled) async throws {
        return try await self.client.execute(
            operation: "DeleteIndex", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Deletes a group so that all users and sub groups that belong to the group can no longer access documents only available to that group. For example, after deleting the group "Summer Interns", all interns who belonged to that group no longer see intern-only documents in their search results. If you want to delete or replace users or sub groups of a group, you need to use the PutPrincipalMapping operation. For example, if a user in the group "Engineering" leaves the engineering team and another user takes their place, you provide an updated list of users or sub groups that belong to the "Engineering" group when calling PutPrincipalMapping. You can update your internal list of users or sub groups and input this list when calling PutPrincipalMapping.  DeletePrincipalMapping is currently not supported in the Amazon Web Services GovCloud (US-West) region.
    @Sendable
    public func deletePrincipalMapping(_ input: DeletePrincipalMappingRequest, logger: Logger = AWSClient.loggingDisabled) async throws {
        return try await self.client.execute(
            operation: "DeletePrincipalMapping", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Deletes a block list used for query suggestions for an index. A deleted block list might not take effect right away. Amazon Kendra  needs to refresh the entire suggestions list to add back the  queries that were previously blocked.  DeleteQuerySuggestionsBlockList is currently not supported in the  Amazon Web Services GovCloud (US-West) region.
    @Sendable
    public func deleteQuerySuggestionsBlockList(_ input: DeleteQuerySuggestionsBlockListRequest, logger: Logger = AWSClient.loggingDisabled) async throws {
        return try await self.client.execute(
            operation: "DeleteQuerySuggestionsBlockList", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Deletes an Amazon Kendra thesaurus.
    @Sendable
    public func deleteThesaurus(_ input: DeleteThesaurusRequest, logger: Logger = AWSClient.loggingDisabled) async throws {
        return try await self.client.execute(
            operation: "DeleteThesaurus", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Gets information about an access control configuration that you created for your documents in an index. This includes user and group access information for your documents. This is useful for user context filtering, where search results are filtered based on the user or their group access to documents.
    @Sendable
    public func describeAccessControlConfiguration(_ input: DescribeAccessControlConfigurationRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DescribeAccessControlConfigurationResponse {
        return try await self.client.execute(
            operation: "DescribeAccessControlConfiguration", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Gets information about an Amazon Kendra data source connector.
    @Sendable
    public func describeDataSource(_ input: DescribeDataSourceRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DescribeDataSourceResponse {
        return try await self.client.execute(
            operation: "DescribeDataSource", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Gets information about your Amazon Kendra experience such as a search application.  For more information on creating a search application experience,  see Building  a search experience with no code.
    @Sendable
    public func describeExperience(_ input: DescribeExperienceRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DescribeExperienceResponse {
        return try await self.client.execute(
            operation: "DescribeExperience", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Gets information about an FAQ list.
    @Sendable
    public func describeFaq(_ input: DescribeFaqRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DescribeFaqResponse {
        return try await self.client.execute(
            operation: "DescribeFaq", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Gets information about a set of featured results. Features results are placed above all other results for certain queries. If there's an exact match of a query,  then one or more specific documents are featured in the search results.
    @Sendable
    public func describeFeaturedResultsSet(_ input: DescribeFeaturedResultsSetRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DescribeFeaturedResultsSetResponse {
        return try await self.client.execute(
            operation: "DescribeFeaturedResultsSet", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Gets information about an Amazon Kendra index.
    @Sendable
    public func describeIndex(_ input: DescribeIndexRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DescribeIndexResponse {
        return try await self.client.execute(
            operation: "DescribeIndex", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Describes the processing of PUT and DELETE actions for mapping users to their groups. This includes information on the status of actions currently processing or yet to be processed, when actions were last updated, when actions were received by Amazon Kendra, the latest action that should process and apply after other actions, and useful error messages if an action could not be processed.  DescribePrincipalMapping is currently not supported in the Amazon Web Services GovCloud (US-West) region.
    @Sendable
    public func describePrincipalMapping(_ input: DescribePrincipalMappingRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DescribePrincipalMappingResponse {
        return try await self.client.execute(
            operation: "DescribePrincipalMapping", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Gets information about a block list used for query suggestions for  an index. This is used to check the current settings that are applied to a  block list.  DescribeQuerySuggestionsBlockList is currently not supported in the  Amazon Web Services GovCloud (US-West) region.
    @Sendable
    public func describeQuerySuggestionsBlockList(_ input: DescribeQuerySuggestionsBlockListRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DescribeQuerySuggestionsBlockListResponse {
        return try await self.client.execute(
            operation: "DescribeQuerySuggestionsBlockList", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Gets information on the settings of query suggestions for an index. This is used to check the current settings applied  to query suggestions.  DescribeQuerySuggestionsConfig is currently not supported in the  Amazon Web Services GovCloud (US-West) region.
    @Sendable
    public func describeQuerySuggestionsConfig(_ input: DescribeQuerySuggestionsConfigRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DescribeQuerySuggestionsConfigResponse {
        return try await self.client.execute(
            operation: "DescribeQuerySuggestionsConfig", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Gets information about an Amazon Kendra thesaurus.
    @Sendable
    public func describeThesaurus(_ input: DescribeThesaurusRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DescribeThesaurusResponse {
        return try await self.client.execute(
            operation: "DescribeThesaurus", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Prevents users or groups in your IAM Identity Center identity source from accessing your Amazon Kendra experience. You can create an Amazon Kendra experience  such as a search application. For more information on creating a search  application experience, see Building  a search experience with no code.
    @Sendable
    public func disassociateEntitiesFromExperience(_ input: DisassociateEntitiesFromExperienceRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DisassociateEntitiesFromExperienceResponse {
        return try await self.client.execute(
            operation: "DisassociateEntitiesFromExperience", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Removes the specific permissions of users or groups in your IAM Identity Center  identity source with access to your Amazon Kendra experience. You can create an Amazon Kendra  experience such as a search application. For more information on creating a  search application experience, see Building a  search experience with no code.
    @Sendable
    public func disassociatePersonasFromEntities(_ input: DisassociatePersonasFromEntitiesRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DisassociatePersonasFromEntitiesResponse {
        return try await self.client.execute(
            operation: "DisassociatePersonasFromEntities", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Fetches the queries that are suggested to your users.  GetQuerySuggestions is currently not supported in the  Amazon Web Services GovCloud (US-West) region.
    @Sendable
    public func getQuerySuggestions(_ input: GetQuerySuggestionsRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> GetQuerySuggestionsResponse {
        return try await self.client.execute(
            operation: "GetQuerySuggestions", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Retrieves search metrics data. The data provides a snapshot of how your users interact with your search application and how effective the application is.
    @Sendable
    public func getSnapshots(_ input: GetSnapshotsRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> GetSnapshotsResponse {
        return try await self.client.execute(
            operation: "GetSnapshots", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Lists one or more access control configurations for an index. This includes user and group access information for your documents. This is useful for user context filtering, where search results are filtered based on the user or their group access to documents.
    @Sendable
    public func listAccessControlConfigurations(_ input: ListAccessControlConfigurationsRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> ListAccessControlConfigurationsResponse {
        return try await self.client.execute(
            operation: "ListAccessControlConfigurations", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Gets statistics about synchronizing a data source connector.
    @Sendable
    public func listDataSourceSyncJobs(_ input: ListDataSourceSyncJobsRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> ListDataSourceSyncJobsResponse {
        return try await self.client.execute(
            operation: "ListDataSourceSyncJobs", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Lists the data source connectors that you have created.
    @Sendable
    public func listDataSources(_ input: ListDataSourcesRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> ListDataSourcesResponse {
        return try await self.client.execute(
            operation: "ListDataSources", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Lists specific permissions of users and groups with access to your  Amazon Kendra experience.
    @Sendable
    public func listEntityPersonas(_ input: ListEntityPersonasRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> ListEntityPersonasResponse {
        return try await self.client.execute(
            operation: "ListEntityPersonas", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Lists users or groups in your IAM Identity Center identity source that are  granted access to your Amazon Kendra experience. You can create an Amazon Kendra experience  such as a search application. For more information on creating a search  application experience, see Building  a search experience with no code.
    @Sendable
    public func listExperienceEntities(_ input: ListExperienceEntitiesRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> ListExperienceEntitiesResponse {
        return try await self.client.execute(
            operation: "ListExperienceEntities", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Lists one or more Amazon Kendra experiences. You can create an Amazon Kendra experience such  as a search application. For more information on creating a search application  experience, see Building a  search experience with no code.
    @Sendable
    public func listExperiences(_ input: ListExperiencesRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> ListExperiencesResponse {
        return try await self.client.execute(
            operation: "ListExperiences", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Gets a list of FAQ lists associated with an index.
    @Sendable
    public func listFaqs(_ input: ListFaqsRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> ListFaqsResponse {
        return try await self.client.execute(
            operation: "ListFaqs", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Lists all your sets of featured results for a given index. Features results  are placed above all other results for certain queries. If there's an exact match  of a query, then one or more specific documents are featured in the search results.
    @Sendable
    public func listFeaturedResultsSets(_ input: ListFeaturedResultsSetsRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> ListFeaturedResultsSetsResponse {
        return try await self.client.execute(
            operation: "ListFeaturedResultsSets", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Provides a list of groups that are mapped to users before a given ordering or timestamp identifier.  ListGroupsOlderThanOrderingId is currently not supported in the Amazon Web Services GovCloud (US-West) region.
    @Sendable
    public func listGroupsOlderThanOrderingId(_ input: ListGroupsOlderThanOrderingIdRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> ListGroupsOlderThanOrderingIdResponse {
        return try await self.client.execute(
            operation: "ListGroupsOlderThanOrderingId", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Lists the Amazon Kendra indexes that you created.
    @Sendable
    public func listIndices(_ input: ListIndicesRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> ListIndicesResponse {
        return try await self.client.execute(
            operation: "ListIndices", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Lists the block lists used for query suggestions for an index. For information on the current quota limits for block lists, see  Quotas  for Amazon Kendra.  ListQuerySuggestionsBlockLists is currently not supported in the  Amazon Web Services GovCloud (US-West) region.
    @Sendable
    public func listQuerySuggestionsBlockLists(_ input: ListQuerySuggestionsBlockListsRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> ListQuerySuggestionsBlockListsResponse {
        return try await self.client.execute(
            operation: "ListQuerySuggestionsBlockLists", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Gets a list of tags associated with a specified resource. Indexes, FAQs, and data sources can have tags associated with them.
    @Sendable
    public func listTagsForResource(_ input: ListTagsForResourceRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> ListTagsForResourceResponse {
        return try await self.client.execute(
            operation: "ListTagsForResource", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Lists the thesauri for an index.
    @Sendable
    public func listThesauri(_ input: ListThesauriRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> ListThesauriResponse {
        return try await self.client.execute(
            operation: "ListThesauri", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Maps users to their groups so that you only need to provide the user ID when you issue the query. You can also map sub groups to groups. For example, the group "Company Intellectual Property Teams" includes sub groups "Research" and "Engineering". These sub groups include their own list of users or people who work in these teams. Only users who work in research and engineering, and therefore belong in the intellectual property group, can see top-secret company documents in their search results. This is useful for user context filtering, where search results are filtered based on the user or their group access to documents. For more information, see Filtering on user context. If more than five PUT actions for a group are currently processing, a validation exception is thrown.
    @Sendable
    public func putPrincipalMapping(_ input: PutPrincipalMappingRequest, logger: Logger = AWSClient.loggingDisabled) async throws {
        return try await self.client.execute(
            operation: "PutPrincipalMapping", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Searches an index given an input query.  If you are working with large language models (LLMs) or implementing retrieval augmented generation (RAG) systems, you can use Amazon Kendra's Retrieve API, which can return longer semantically relevant passages. We recommend using the Retrieve API instead of filing a service limit increase to increase the Query API document excerpt length.  You can configure boosting or relevance tuning at the query level to override boosting at the index level, filter based on document fields/attributes and faceted search, and filter based on the user or their group access to documents. You can also include certain fields in the response that might provide useful additional information. A query response contains three types of results.   Relevant suggested answers. The answers can be either a text excerpt or table excerpt. The answer can be highlighted in the excerpt.   Matching FAQs or questions-answer from your FAQ file.   Relevant documents. This result type includes an excerpt of the document with the document title. The searched terms can be highlighted in the excerpt.   You can specify that the query return only one type of result using the QueryResultTypeFilter parameter. Each query returns the 100 most relevant results. If you filter result type to only question-answers, a maximum of four results are returned. If you filter result type to only answers, a maximum of three results are returned.
    @Sendable
    public func query(_ input: QueryRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> QueryResult {
        return try await self.client.execute(
            operation: "Query", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Retrieves relevant passages or text excerpts given an input query. This API is similar to the Query API. However, by default, the Query API only returns excerpt passages of up to 100 token words. With the Retrieve API, you can retrieve longer passages of up to 200 token words and up to 100 semantically relevant passages. This doesn't include question-answer or FAQ type responses from your index. The passages are text excerpts that can be semantically extracted from multiple documents and multiple parts of the same document. If in extreme cases your documents produce zero passages using the Retrieve API, you can alternatively use the Query API and its types of responses. You can also do the following:   Override boosting at the index level   Filter based on document fields or attributes   Filter based on the user or their group access to documents   View the confidence score bucket for a retrieved passage result. The confidence bucket provides a relative ranking that indicates how confident Amazon Kendra is that the response is relevant to the query.  Confidence score buckets are currently available only for English.    You can also include certain fields in the response that might provide useful additional information. The Retrieve API shares the number of query capacity units that you set for your index. For more information on what's included in a single capacity unit and the default base capacity for an index, see Adjusting capacity.
    @Sendable
    public func retrieve(_ input: RetrieveRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> RetrieveResult {
        return try await self.client.execute(
            operation: "Retrieve", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Starts a synchronization job for a data source connector. If a synchronization job is already in progress, Amazon Kendra returns a ResourceInUseException exception. Re-syncing your data source with your index after modifying, adding, or deleting  documents from your data source respository could take up to an hour or more, depending on  the number of documents to sync.
    @Sendable
    public func startDataSourceSyncJob(_ input: StartDataSourceSyncJobRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> StartDataSourceSyncJobResponse {
        return try await self.client.execute(
            operation: "StartDataSourceSyncJob", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Stops a synchronization job that is currently running. You can't stop a scheduled synchronization job.
    @Sendable
    public func stopDataSourceSyncJob(_ input: StopDataSourceSyncJobRequest, logger: Logger = AWSClient.loggingDisabled) async throws {
        return try await self.client.execute(
            operation: "StopDataSourceSyncJob", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Enables you to provide feedback to Amazon Kendra to improve the performance of your index.  SubmitFeedback is currently not supported in the  Amazon Web Services GovCloud (US-West) region.
    @Sendable
    public func submitFeedback(_ input: SubmitFeedbackRequest, logger: Logger = AWSClient.loggingDisabled) async throws {
        return try await self.client.execute(
            operation: "SubmitFeedback", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Adds the specified tag to the specified index, FAQ, or data source resource. If the tag already exists, the existing value is replaced with the new value.
    @Sendable
    public func tagResource(_ input: TagResourceRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> TagResourceResponse {
        return try await self.client.execute(
            operation: "TagResource", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Removes a tag from an index, FAQ, or a data source.
    @Sendable
    public func untagResource(_ input: UntagResourceRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> UntagResourceResponse {
        return try await self.client.execute(
            operation: "UntagResource", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Updates an access control configuration for your documents in an index. This includes user and group access information for your documents. This is useful for user context filtering, where search results are filtered based on the user or their group access to documents. You can update an access control configuration you created without indexing all of your documents again. For example, your index contains top-secret company documents that only certain employees or users should access. You created an 'allow' access control configuration for one user who recently joined the 'top-secret' team, switching from a team with 'deny' access to top-secret documents. However, the user suddenly returns to their previous team and should no longer have access to top secret documents. You can update the access control configuration to re-configure access control for your documents as circumstances change. You call the BatchPutDocument API to apply the updated access control configuration, with the AccessControlConfigurationId included in the Document object. If you use an S3 bucket as a data source, you synchronize your data source to apply the AccessControlConfigurationId in the .metadata.json file. Amazon Kendra currently only supports access control configuration for S3 data sources and documents indexed using the BatchPutDocument API.
    @Sendable
    public func updateAccessControlConfiguration(_ input: UpdateAccessControlConfigurationRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> UpdateAccessControlConfigurationResponse {
        return try await self.client.execute(
            operation: "UpdateAccessControlConfiguration", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Updates an Amazon Kendra data source connector.
    @Sendable
    public func updateDataSource(_ input: UpdateDataSourceRequest, logger: Logger = AWSClient.loggingDisabled) async throws {
        return try await self.client.execute(
            operation: "UpdateDataSource", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Updates your Amazon Kendra experience such as a search application. For more information on creating a search application experience, see Building a  search experience with no code.
    @Sendable
    public func updateExperience(_ input: UpdateExperienceRequest, logger: Logger = AWSClient.loggingDisabled) async throws {
        return try await self.client.execute(
            operation: "UpdateExperience", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Updates a set of featured results. Features results are placed above  all other results for certain queries. You map specific queries to specific documents for featuring in the results. If a query contains an exact match of a query, then one  or more specific documents are featured in the search results.
    @Sendable
    public func updateFeaturedResultsSet(_ input: UpdateFeaturedResultsSetRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> UpdateFeaturedResultsSetResponse {
        return try await self.client.execute(
            operation: "UpdateFeaturedResultsSet", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Updates an Amazon Kendra index.
    @Sendable
    public func updateIndex(_ input: UpdateIndexRequest, logger: Logger = AWSClient.loggingDisabled) async throws {
        return try await self.client.execute(
            operation: "UpdateIndex", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Updates a block list used for query suggestions for an index. Updates to a block list might not take effect right away. Amazon Kendra  needs to refresh the entire suggestions list to apply any updates to the  block list. Other changes not related to the block list apply immediately. If a block list is updating, then you need to wait for the first update to  finish before submitting another update. Amazon Kendra supports partial updates, so you only need to provide the fields  you want to update.  UpdateQuerySuggestionsBlockList is currently not supported in the  Amazon Web Services GovCloud (US-West) region.
    @Sendable
    public func updateQuerySuggestionsBlockList(_ input: UpdateQuerySuggestionsBlockListRequest, logger: Logger = AWSClient.loggingDisabled) async throws {
        return try await self.client.execute(
            operation: "UpdateQuerySuggestionsBlockList", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Updates the settings of query suggestions for an index. Amazon Kendra supports partial updates, so you only need to provide  the fields you want to update. If an update is currently processing, you  need to wait for the update to finish before making another update. Updates to query suggestions settings might not take effect right away.  The time for your updated settings to take effect depends on the updates  made and the number of search queries in your index. You can still enable/disable query suggestions at any time.  UpdateQuerySuggestionsConfig is currently not supported in the  Amazon Web Services GovCloud (US-West) region.
    @Sendable
    public func updateQuerySuggestionsConfig(_ input: UpdateQuerySuggestionsConfigRequest, logger: Logger = AWSClient.loggingDisabled) async throws {
        return try await self.client.execute(
            operation: "UpdateQuerySuggestionsConfig", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Updates a thesaurus for an index.
    @Sendable
    public func updateThesaurus(_ input: UpdateThesaurusRequest, logger: Logger = AWSClient.loggingDisabled) async throws {
        return try await self.client.execute(
            operation: "UpdateThesaurus", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
}

extension Kendra {
    /// Initializer required by `AWSService.with(middlewares:timeout:byteBufferAllocator:options)`. You are not able to use this initializer directly as there are not public
    /// initializers for `AWSServiceConfig.Patch`. Please use `AWSService.with(middlewares:timeout:byteBufferAllocator:options)` instead.
    public init(from: Kendra, patch: AWSServiceConfig.Patch) {
        self.client = from.client
        self.config = from.config.with(patch: patch)
    }
}

// MARK: Paginators

@available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
extension Kendra {
    /// Retrieves search metrics data. The data provides a snapshot of how your users interact with your search application and how effective the application is.
    /// Return PaginatorSequence for operation.
    ///
    /// - Parameters:
    ///   - input: Input for request
    ///   - logger: Logger used flot logging
    public func getSnapshotsPaginator(
        _ input: GetSnapshotsRequest,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<GetSnapshotsRequest, GetSnapshotsResponse> {
        return .init(
            input: input,
            command: self.getSnapshots,
            inputKey: \GetSnapshotsRequest.nextToken,
            outputKey: \GetSnapshotsResponse.nextToken,
            logger: logger
        )
    }

    /// Lists one or more access control configurations for an index. This includes user and group access information for your documents. This is useful for user context filtering, where search results are filtered based on the user or their group access to documents.
    /// Return PaginatorSequence for operation.
    ///
    /// - Parameters:
    ///   - input: Input for request
    ///   - logger: Logger used flot logging
    public func listAccessControlConfigurationsPaginator(
        _ input: ListAccessControlConfigurationsRequest,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<ListAccessControlConfigurationsRequest, ListAccessControlConfigurationsResponse> {
        return .init(
            input: input,
            command: self.listAccessControlConfigurations,
            inputKey: \ListAccessControlConfigurationsRequest.nextToken,
            outputKey: \ListAccessControlConfigurationsResponse.nextToken,
            logger: logger
        )
    }

    /// Gets statistics about synchronizing a data source connector.
    /// Return PaginatorSequence for operation.
    ///
    /// - Parameters:
    ///   - input: Input for request
    ///   - logger: Logger used flot logging
    public func listDataSourceSyncJobsPaginator(
        _ input: ListDataSourceSyncJobsRequest,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<ListDataSourceSyncJobsRequest, ListDataSourceSyncJobsResponse> {
        return .init(
            input: input,
            command: self.listDataSourceSyncJobs,
            inputKey: \ListDataSourceSyncJobsRequest.nextToken,
            outputKey: \ListDataSourceSyncJobsResponse.nextToken,
            logger: logger
        )
    }

    /// Lists the data source connectors that you have created.
    /// Return PaginatorSequence for operation.
    ///
    /// - Parameters:
    ///   - input: Input for request
    ///   - logger: Logger used flot logging
    public func listDataSourcesPaginator(
        _ input: ListDataSourcesRequest,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<ListDataSourcesRequest, ListDataSourcesResponse> {
        return .init(
            input: input,
            command: self.listDataSources,
            inputKey: \ListDataSourcesRequest.nextToken,
            outputKey: \ListDataSourcesResponse.nextToken,
            logger: logger
        )
    }

    /// Lists specific permissions of users and groups with access to your  Amazon Kendra experience.
    /// Return PaginatorSequence for operation.
    ///
    /// - Parameters:
    ///   - input: Input for request
    ///   - logger: Logger used flot logging
    public func listEntityPersonasPaginator(
        _ input: ListEntityPersonasRequest,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<ListEntityPersonasRequest, ListEntityPersonasResponse> {
        return .init(
            input: input,
            command: self.listEntityPersonas,
            inputKey: \ListEntityPersonasRequest.nextToken,
            outputKey: \ListEntityPersonasResponse.nextToken,
            logger: logger
        )
    }

    /// Lists users or groups in your IAM Identity Center identity source that are  granted access to your Amazon Kendra experience. You can create an Amazon Kendra experience  such as a search application. For more information on creating a search  application experience, see Building  a search experience with no code.
    /// Return PaginatorSequence for operation.
    ///
    /// - Parameters:
    ///   - input: Input for request
    ///   - logger: Logger used flot logging
    public func listExperienceEntitiesPaginator(
        _ input: ListExperienceEntitiesRequest,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<ListExperienceEntitiesRequest, ListExperienceEntitiesResponse> {
        return .init(
            input: input,
            command: self.listExperienceEntities,
            inputKey: \ListExperienceEntitiesRequest.nextToken,
            outputKey: \ListExperienceEntitiesResponse.nextToken,
            logger: logger
        )
    }

    /// Lists one or more Amazon Kendra experiences. You can create an Amazon Kendra experience such  as a search application. For more information on creating a search application  experience, see Building a  search experience with no code.
    /// Return PaginatorSequence for operation.
    ///
    /// - Parameters:
    ///   - input: Input for request
    ///   - logger: Logger used flot logging
    public func listExperiencesPaginator(
        _ input: ListExperiencesRequest,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<ListExperiencesRequest, ListExperiencesResponse> {
        return .init(
            input: input,
            command: self.listExperiences,
            inputKey: \ListExperiencesRequest.nextToken,
            outputKey: \ListExperiencesResponse.nextToken,
            logger: logger
        )
    }

    /// Gets a list of FAQ lists associated with an index.
    /// Return PaginatorSequence for operation.
    ///
    /// - Parameters:
    ///   - input: Input for request
    ///   - logger: Logger used flot logging
    public func listFaqsPaginator(
        _ input: ListFaqsRequest,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<ListFaqsRequest, ListFaqsResponse> {
        return .init(
            input: input,
            command: self.listFaqs,
            inputKey: \ListFaqsRequest.nextToken,
            outputKey: \ListFaqsResponse.nextToken,
            logger: logger
        )
    }

    /// Provides a list of groups that are mapped to users before a given ordering or timestamp identifier.  ListGroupsOlderThanOrderingId is currently not supported in the Amazon Web Services GovCloud (US-West) region.
    /// Return PaginatorSequence for operation.
    ///
    /// - Parameters:
    ///   - input: Input for request
    ///   - logger: Logger used flot logging
    public func listGroupsOlderThanOrderingIdPaginator(
        _ input: ListGroupsOlderThanOrderingIdRequest,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<ListGroupsOlderThanOrderingIdRequest, ListGroupsOlderThanOrderingIdResponse> {
        return .init(
            input: input,
            command: self.listGroupsOlderThanOrderingId,
            inputKey: \ListGroupsOlderThanOrderingIdRequest.nextToken,
            outputKey: \ListGroupsOlderThanOrderingIdResponse.nextToken,
            logger: logger
        )
    }

    /// Lists the Amazon Kendra indexes that you created.
    /// Return PaginatorSequence for operation.
    ///
    /// - Parameters:
    ///   - input: Input for request
    ///   - logger: Logger used flot logging
    public func listIndicesPaginator(
        _ input: ListIndicesRequest,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<ListIndicesRequest, ListIndicesResponse> {
        return .init(
            input: input,
            command: self.listIndices,
            inputKey: \ListIndicesRequest.nextToken,
            outputKey: \ListIndicesResponse.nextToken,
            logger: logger
        )
    }

    /// Lists the block lists used for query suggestions for an index. For information on the current quota limits for block lists, see  Quotas  for Amazon Kendra.  ListQuerySuggestionsBlockLists is currently not supported in the  Amazon Web Services GovCloud (US-West) region.
    /// Return PaginatorSequence for operation.
    ///
    /// - Parameters:
    ///   - input: Input for request
    ///   - logger: Logger used flot logging
    public func listQuerySuggestionsBlockListsPaginator(
        _ input: ListQuerySuggestionsBlockListsRequest,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<ListQuerySuggestionsBlockListsRequest, ListQuerySuggestionsBlockListsResponse> {
        return .init(
            input: input,
            command: self.listQuerySuggestionsBlockLists,
            inputKey: \ListQuerySuggestionsBlockListsRequest.nextToken,
            outputKey: \ListQuerySuggestionsBlockListsResponse.nextToken,
            logger: logger
        )
    }

    /// Lists the thesauri for an index.
    /// Return PaginatorSequence for operation.
    ///
    /// - Parameters:
    ///   - input: Input for request
    ///   - logger: Logger used flot logging
    public func listThesauriPaginator(
        _ input: ListThesauriRequest,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<ListThesauriRequest, ListThesauriResponse> {
        return .init(
            input: input,
            command: self.listThesauri,
            inputKey: \ListThesauriRequest.nextToken,
            outputKey: \ListThesauriResponse.nextToken,
            logger: logger
        )
    }
}

extension Kendra.GetSnapshotsRequest: AWSPaginateToken {
    public func usingPaginationToken(_ token: String) -> Kendra.GetSnapshotsRequest {
        return .init(
            indexId: self.indexId,
            interval: self.interval,
            maxResults: self.maxResults,
            metricType: self.metricType,
            nextToken: token
        )
    }
}

extension Kendra.ListAccessControlConfigurationsRequest: AWSPaginateToken {
    public func usingPaginationToken(_ token: String) -> Kendra.ListAccessControlConfigurationsRequest {
        return .init(
            indexId: self.indexId,
            maxResults: self.maxResults,
            nextToken: token
        )
    }
}

extension Kendra.ListDataSourceSyncJobsRequest: AWSPaginateToken {
    public func usingPaginationToken(_ token: String) -> Kendra.ListDataSourceSyncJobsRequest {
        return .init(
            id: self.id,
            indexId: self.indexId,
            maxResults: self.maxResults,
            nextToken: token,
            startTimeFilter: self.startTimeFilter,
            statusFilter: self.statusFilter
        )
    }
}

extension Kendra.ListDataSourcesRequest: AWSPaginateToken {
    public func usingPaginationToken(_ token: String) -> Kendra.ListDataSourcesRequest {
        return .init(
            indexId: self.indexId,
            maxResults: self.maxResults,
            nextToken: token
        )
    }
}

extension Kendra.ListEntityPersonasRequest: AWSPaginateToken {
    public func usingPaginationToken(_ token: String) -> Kendra.ListEntityPersonasRequest {
        return .init(
            id: self.id,
            indexId: self.indexId,
            maxResults: self.maxResults,
            nextToken: token
        )
    }
}

extension Kendra.ListExperienceEntitiesRequest: AWSPaginateToken {
    public func usingPaginationToken(_ token: String) -> Kendra.ListExperienceEntitiesRequest {
        return .init(
            id: self.id,
            indexId: self.indexId,
            nextToken: token
        )
    }
}

extension Kendra.ListExperiencesRequest: AWSPaginateToken {
    public func usingPaginationToken(_ token: String) -> Kendra.ListExperiencesRequest {
        return .init(
            indexId: self.indexId,
            maxResults: self.maxResults,
            nextToken: token
        )
    }
}

extension Kendra.ListFaqsRequest: AWSPaginateToken {
    public func usingPaginationToken(_ token: String) -> Kendra.ListFaqsRequest {
        return .init(
            indexId: self.indexId,
            maxResults: self.maxResults,
            nextToken: token
        )
    }
}

extension Kendra.ListGroupsOlderThanOrderingIdRequest: AWSPaginateToken {
    public func usingPaginationToken(_ token: String) -> Kendra.ListGroupsOlderThanOrderingIdRequest {
        return .init(
            dataSourceId: self.dataSourceId,
            indexId: self.indexId,
            maxResults: self.maxResults,
            nextToken: token,
            orderingId: self.orderingId
        )
    }
}

extension Kendra.ListIndicesRequest: AWSPaginateToken {
    public func usingPaginationToken(_ token: String) -> Kendra.ListIndicesRequest {
        return .init(
            maxResults: self.maxResults,
            nextToken: token
        )
    }
}

extension Kendra.ListQuerySuggestionsBlockListsRequest: AWSPaginateToken {
    public func usingPaginationToken(_ token: String) -> Kendra.ListQuerySuggestionsBlockListsRequest {
        return .init(
            indexId: self.indexId,
            maxResults: self.maxResults,
            nextToken: token
        )
    }
}

extension Kendra.ListThesauriRequest: AWSPaginateToken {
    public func usingPaginationToken(_ token: String) -> Kendra.ListThesauriRequest {
        return .init(
            indexId: self.indexId,
            maxResults: self.maxResults,
            nextToken: token
        )
    }
}
