//===----------------------------------------------------------------------===//
//
// This source file is part of the Soto for AWS open source project
//
// Copyright (c) 2017-2023 the Soto project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
// See CONTRIBUTORS.txt for the list of Soto project authors
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by https://github.com/soto-project/soto-codegenerator.
// DO NOT EDIT.

@_exported import SotoCore

/// Service object for interacting with AWS Scheduler service.
///
///  Amazon EventBridge Scheduler is a serverless scheduler that allows you to create, run, and manage tasks from one central, managed service. EventBridge Scheduler delivers your tasks reliably, with built-in mechanisms that adjust your schedules based on the availability of downstream targets. The following reference lists the available API actions, and data types for EventBridge Scheduler.
public struct Scheduler: AWSService {
    // MARK: Member variables

    /// Client used for communication with AWS
    public let client: AWSClient
    /// Service configuration
    public let config: AWSServiceConfig

    // MARK: Initialization

    /// Initialize the Scheduler client
    /// - parameters:
    ///     - client: AWSClient used to process requests
    ///     - region: Region of server you want to communicate with. This will override the partition parameter.
    ///     - partition: AWS partition where service resides, standard (.aws), china (.awscn), government (.awsusgov).
    ///     - endpoint: Custom endpoint URL to use instead of standard AWS servers
    ///     - middleware: Middleware chain used to edit requests before they are sent and responses before they are decoded 
    ///     - timeout: Timeout value for HTTP requests
    ///     - byteBufferAllocator: Allocator for ByteBuffers
    ///     - options: Service options
    public init(
        client: AWSClient,
        region: SotoCore.Region? = nil,
        partition: AWSPartition = .aws,
        endpoint: String? = nil,
        middleware: AWSMiddlewareProtocol? = nil,
        timeout: TimeAmount? = nil,
        byteBufferAllocator: ByteBufferAllocator = ByteBufferAllocator(),
        options: AWSServiceConfig.Options = []
    ) {
        self.client = client
        self.config = AWSServiceConfig(
            region: region,
            partition: region?.partition ?? partition,
            serviceName: "Scheduler",
            serviceIdentifier: "scheduler",
            serviceProtocol: .restjson,
            apiVersion: "2021-06-30",
            endpoint: endpoint,
            errorType: SchedulerErrorType.self,
            middleware: middleware,
            timeout: timeout,
            byteBufferAllocator: byteBufferAllocator,
            options: options
        )
    }





    // MARK: API Calls

    /// Creates the specified schedule.
    @Sendable
    public func createSchedule(_ input: CreateScheduleInput, logger: Logger = AWSClient.loggingDisabled) async throws -> CreateScheduleOutput {
        return try await self.client.execute(
            operation: "CreateSchedule", 
            path: "/schedules/{Name}", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Creates the specified schedule group.
    @Sendable
    public func createScheduleGroup(_ input: CreateScheduleGroupInput, logger: Logger = AWSClient.loggingDisabled) async throws -> CreateScheduleGroupOutput {
        return try await self.client.execute(
            operation: "CreateScheduleGroup", 
            path: "/schedule-groups/{Name}", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Deletes the specified schedule.
    @Sendable
    public func deleteSchedule(_ input: DeleteScheduleInput, logger: Logger = AWSClient.loggingDisabled) async throws -> DeleteScheduleOutput {
        return try await self.client.execute(
            operation: "DeleteSchedule", 
            path: "/schedules/{Name}", 
            httpMethod: .DELETE, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Deletes the specified schedule group. Deleting a schedule group results in EventBridge Scheduler deleting all schedules associated with the group. When you delete a group, it remains in a DELETING state until all of its associated schedules are deleted. Schedules associated with the group that are set to run while the schedule group is in the process of being deleted might continue to invoke their targets until the schedule group and its associated schedules are deleted.   This operation is eventually consistent.
    @Sendable
    public func deleteScheduleGroup(_ input: DeleteScheduleGroupInput, logger: Logger = AWSClient.loggingDisabled) async throws -> DeleteScheduleGroupOutput {
        return try await self.client.execute(
            operation: "DeleteScheduleGroup", 
            path: "/schedule-groups/{Name}", 
            httpMethod: .DELETE, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Retrieves the specified schedule.
    @Sendable
    public func getSchedule(_ input: GetScheduleInput, logger: Logger = AWSClient.loggingDisabled) async throws -> GetScheduleOutput {
        return try await self.client.execute(
            operation: "GetSchedule", 
            path: "/schedules/{Name}", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Retrieves the specified schedule group.
    @Sendable
    public func getScheduleGroup(_ input: GetScheduleGroupInput, logger: Logger = AWSClient.loggingDisabled) async throws -> GetScheduleGroupOutput {
        return try await self.client.execute(
            operation: "GetScheduleGroup", 
            path: "/schedule-groups/{Name}", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Returns a paginated list of your schedule groups.
    @Sendable
    public func listScheduleGroups(_ input: ListScheduleGroupsInput, logger: Logger = AWSClient.loggingDisabled) async throws -> ListScheduleGroupsOutput {
        return try await self.client.execute(
            operation: "ListScheduleGroups", 
            path: "/schedule-groups", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Returns a paginated list of your EventBridge Scheduler schedules.
    @Sendable
    public func listSchedules(_ input: ListSchedulesInput, logger: Logger = AWSClient.loggingDisabled) async throws -> ListSchedulesOutput {
        return try await self.client.execute(
            operation: "ListSchedules", 
            path: "/schedules", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Lists the tags associated with the Scheduler resource.
    @Sendable
    public func listTagsForResource(_ input: ListTagsForResourceInput, logger: Logger = AWSClient.loggingDisabled) async throws -> ListTagsForResourceOutput {
        return try await self.client.execute(
            operation: "ListTagsForResource", 
            path: "/tags/{ResourceArn}", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Assigns one or more tags (key-value pairs) to the specified EventBridge Scheduler resource. You can only assign tags to schedule groups.
    @Sendable
    public func tagResource(_ input: TagResourceInput, logger: Logger = AWSClient.loggingDisabled) async throws -> TagResourceOutput {
        return try await self.client.execute(
            operation: "TagResource", 
            path: "/tags/{ResourceArn}", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Removes one or more tags from the specified EventBridge Scheduler schedule group.
    @Sendable
    public func untagResource(_ input: UntagResourceInput, logger: Logger = AWSClient.loggingDisabled) async throws -> UntagResourceOutput {
        return try await self.client.execute(
            operation: "UntagResource", 
            path: "/tags/{ResourceArn}", 
            httpMethod: .DELETE, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    ///  Updates the specified schedule. When you call UpdateSchedule, EventBridge Scheduler uses all values, including empty values, specified in the request and overrides the existing schedule. This is by design. This means that if you do not set an optional field in your request, that field will be set to its system-default value after the update.   Before calling this operation, we recommend that you call the GetSchedule API operation and make a note of all optional parameters for your UpdateSchedule call.
    @Sendable
    public func updateSchedule(_ input: UpdateScheduleInput, logger: Logger = AWSClient.loggingDisabled) async throws -> UpdateScheduleOutput {
        return try await self.client.execute(
            operation: "UpdateSchedule", 
            path: "/schedules/{Name}", 
            httpMethod: .PUT, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
}

extension Scheduler {
    /// Initializer required by `AWSService.with(middlewares:timeout:byteBufferAllocator:options)`. You are not able to use this initializer directly as there are not public
    /// initializers for `AWSServiceConfig.Patch`. Please use `AWSService.with(middlewares:timeout:byteBufferAllocator:options)` instead.
    public init(from: Scheduler, patch: AWSServiceConfig.Patch) {
        self.client = from.client
        self.config = from.config.with(patch: patch)
    }
}

// MARK: Paginators

@available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
extension Scheduler {
    /// Returns a paginated list of your schedule groups.
    /// Return PaginatorSequence for operation.
    ///
    /// - Parameters:
    ///   - input: Input for request
    ///   - logger: Logger used flot logging
    public func listScheduleGroupsPaginator(
        _ input: ListScheduleGroupsInput,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<ListScheduleGroupsInput, ListScheduleGroupsOutput> {
        return .init(
            input: input,
            command: self.listScheduleGroups,
            inputKey: \ListScheduleGroupsInput.nextToken,
            outputKey: \ListScheduleGroupsOutput.nextToken,
            logger: logger
        )
    }

    /// Returns a paginated list of your EventBridge Scheduler schedules.
    /// Return PaginatorSequence for operation.
    ///
    /// - Parameters:
    ///   - input: Input for request
    ///   - logger: Logger used flot logging
    public func listSchedulesPaginator(
        _ input: ListSchedulesInput,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<ListSchedulesInput, ListSchedulesOutput> {
        return .init(
            input: input,
            command: self.listSchedules,
            inputKey: \ListSchedulesInput.nextToken,
            outputKey: \ListSchedulesOutput.nextToken,
            logger: logger
        )
    }
}

extension Scheduler.ListScheduleGroupsInput: AWSPaginateToken {
    public func usingPaginationToken(_ token: String) -> Scheduler.ListScheduleGroupsInput {
        return .init(
            maxResults: self.maxResults,
            namePrefix: self.namePrefix,
            nextToken: token
        )
    }
}

extension Scheduler.ListSchedulesInput: AWSPaginateToken {
    public func usingPaginationToken(_ token: String) -> Scheduler.ListSchedulesInput {
        return .init(
            groupName: self.groupName,
            maxResults: self.maxResults,
            namePrefix: self.namePrefix,
            nextToken: token,
            state: self.state
        )
    }
}
