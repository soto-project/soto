//===----------------------------------------------------------------------===//
//
// This source file is part of the Soto for AWS open source project
//
// Copyright (c) 2017-2024 the Soto project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
// See CONTRIBUTORS.txt for the list of Soto project authors
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by https://github.com/soto-project/soto-codegenerator.
// DO NOT EDIT.

#if os(Linux) && compiler(<5.10)
// swift-corelibs-foundation hasn't been updated with Sendable conformances
@preconcurrency import Foundation
#else
import Foundation
#endif
@_exported import SotoCore

/// Service object for interacting with AWS LicenseManagerUserSubscriptions service.
///
/// With License Manager, you can create user-based subscriptions to utilize licensed software with a per user subscription fee on Amazon EC2 instances.
public struct LicenseManagerUserSubscriptions: AWSService {
    // MARK: Member variables

    /// Client used for communication with AWS
    public let client: AWSClient
    /// Service configuration
    public let config: AWSServiceConfig

    // MARK: Initialization

    /// Initialize the LicenseManagerUserSubscriptions client
    /// - parameters:
    ///     - client: AWSClient used to process requests
    ///     - region: Region of server you want to communicate with. This will override the partition parameter.
    ///     - partition: AWS partition where service resides, standard (.aws), china (.awscn), government (.awsusgov).
    ///     - endpoint: Custom endpoint URL to use instead of standard AWS servers
    ///     - middleware: Middleware chain used to edit requests before they are sent and responses before they are decoded 
    ///     - timeout: Timeout value for HTTP requests
    ///     - byteBufferAllocator: Allocator for ByteBuffers
    ///     - options: Service options
    public init(
        client: AWSClient,
        region: SotoCore.Region? = nil,
        partition: AWSPartition = .aws,
        endpoint: String? = nil,
        middleware: AWSMiddlewareProtocol? = nil,
        timeout: TimeAmount? = nil,
        byteBufferAllocator: ByteBufferAllocator = ByteBufferAllocator(),
        options: AWSServiceConfig.Options = []
    ) {
        self.client = client
        self.config = AWSServiceConfig(
            region: region,
            partition: region?.partition ?? partition,
            serviceName: "LicenseManagerUserSubscriptions",
            serviceIdentifier: "license-manager-user-subscriptions",
            serviceProtocol: .restjson,
            apiVersion: "2018-05-10",
            endpoint: endpoint,
            variantEndpoints: Self.variantEndpoints,
            errorType: LicenseManagerUserSubscriptionsErrorType.self,
            middleware: middleware,
            timeout: timeout,
            byteBufferAllocator: byteBufferAllocator,
            options: options
        )
    }




    /// FIPS and dualstack endpoints
    static var variantEndpoints: [EndpointVariantType: AWSServiceConfig.EndpointVariant] {[
        [.fips]: .init(endpoints: [
            "us-east-1": "license-manager-user-subscriptions-fips.us-east-1.amazonaws.com",
            "us-east-2": "license-manager-user-subscriptions-fips.us-east-2.amazonaws.com",
            "us-west-1": "license-manager-user-subscriptions-fips.us-west-1.amazonaws.com",
            "us-west-2": "license-manager-user-subscriptions-fips.us-west-2.amazonaws.com"
        ])
    ]}

    // MARK: API Calls

    /// Associates the user to an EC2 instance to utilize user-based subscriptions.  Your estimated bill for charges on the number of users and related costs will take 48 hours to appear for billing periods that haven't closed (marked as Pending billing status) in Amazon Web Services Billing. For more information, see Viewing your monthly charges in the Amazon Web Services Billing User Guide.
    @Sendable
    @inlinable
    public func associateUser(_ input: AssociateUserRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> AssociateUserResponse {
        try await self.client.execute(
            operation: "AssociateUser", 
            path: "/user/AssociateUser", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Associates the user to an EC2 instance to utilize user-based subscriptions.  Your estimated bill for charges on the number of users and related costs will take 48 hours to appear for billing periods that haven't closed (marked as Pending billing status) in Amazon Web Services Billing. For more information, see Viewing your monthly charges in the Amazon Web Services Billing User Guide.
    ///
    /// Parameters:
    ///   - domain: The domain name of the user.
    ///   - identityProvider: The identity provider of the user.
    ///   - instanceId: The ID of the EC2 instance, which provides user-based subscriptions.
    ///   - username: The user name from the identity provider for the user.
    ///   - logger: Logger use during operation
    @inlinable
    public func associateUser(
        domain: String? = nil,
        identityProvider: IdentityProvider,
        instanceId: String,
        username: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> AssociateUserResponse {
        let input = AssociateUserRequest(
            domain: domain, 
            identityProvider: identityProvider, 
            instanceId: instanceId, 
            username: username
        )
        return try await self.associateUser(input, logger: logger)
    }

    /// Deregisters the identity provider from providing user-based subscriptions.
    @Sendable
    @inlinable
    public func deregisterIdentityProvider(_ input: DeregisterIdentityProviderRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DeregisterIdentityProviderResponse {
        try await self.client.execute(
            operation: "DeregisterIdentityProvider", 
            path: "/identity-provider/DeregisterIdentityProvider", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Deregisters the identity provider from providing user-based subscriptions.
    ///
    /// Parameters:
    ///   - identityProvider: An object that specifies details for the identity provider.
    ///   - product: The name of the user-based subscription product.
    ///   - logger: Logger use during operation
    @inlinable
    public func deregisterIdentityProvider(
        identityProvider: IdentityProvider,
        product: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> DeregisterIdentityProviderResponse {
        let input = DeregisterIdentityProviderRequest(
            identityProvider: identityProvider, 
            product: product
        )
        return try await self.deregisterIdentityProvider(input, logger: logger)
    }

    /// Disassociates the user from an EC2 instance providing user-based subscriptions.
    @Sendable
    @inlinable
    public func disassociateUser(_ input: DisassociateUserRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DisassociateUserResponse {
        try await self.client.execute(
            operation: "DisassociateUser", 
            path: "/user/DisassociateUser", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Disassociates the user from an EC2 instance providing user-based subscriptions.
    ///
    /// Parameters:
    ///   - domain: The domain name of the user.
    ///   - identityProvider: An object that specifies details for the identity provider.
    ///   - instanceId: The ID of the EC2 instance, which provides user-based subscriptions.
    ///   - username: The user name from the identity provider for the user.
    ///   - logger: Logger use during operation
    @inlinable
    public func disassociateUser(
        domain: String? = nil,
        identityProvider: IdentityProvider,
        instanceId: String,
        username: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> DisassociateUserResponse {
        let input = DisassociateUserRequest(
            domain: domain, 
            identityProvider: identityProvider, 
            instanceId: instanceId, 
            username: username
        )
        return try await self.disassociateUser(input, logger: logger)
    }

    /// Lists the identity providers for user-based subscriptions.
    @Sendable
    @inlinable
    public func listIdentityProviders(_ input: ListIdentityProvidersRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> ListIdentityProvidersResponse {
        try await self.client.execute(
            operation: "ListIdentityProviders", 
            path: "/identity-provider/ListIdentityProviders", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Lists the identity providers for user-based subscriptions.
    ///
    /// Parameters:
    ///   - maxResults: Maximum number of results to return in a single call.
    ///   - nextToken: Token for the next set of results.
    ///   - logger: Logger use during operation
    @inlinable
    public func listIdentityProviders(
        maxResults: Int? = nil,
        nextToken: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> ListIdentityProvidersResponse {
        let input = ListIdentityProvidersRequest(
            maxResults: maxResults, 
            nextToken: nextToken
        )
        return try await self.listIdentityProviders(input, logger: logger)
    }

    /// Lists the EC2 instances providing user-based subscriptions.
    @Sendable
    @inlinable
    public func listInstances(_ input: ListInstancesRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> ListInstancesResponse {
        try await self.client.execute(
            operation: "ListInstances", 
            path: "/instance/ListInstances", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Lists the EC2 instances providing user-based subscriptions.
    ///
    /// Parameters:
    ///   - filters: An array of structures that you can use to filter the results to those that match one or more sets of key-value pairs that you specify.
    ///   - maxResults: Maximum number of results to return in a single call.
    ///   - nextToken: Token for the next set of results.
    ///   - logger: Logger use during operation
    @inlinable
    public func listInstances(
        filters: [Filter]? = nil,
        maxResults: Int? = nil,
        nextToken: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> ListInstancesResponse {
        let input = ListInstancesRequest(
            filters: filters, 
            maxResults: maxResults, 
            nextToken: nextToken
        )
        return try await self.listInstances(input, logger: logger)
    }

    /// Lists the user-based subscription products available from an identity provider.
    @Sendable
    @inlinable
    public func listProductSubscriptions(_ input: ListProductSubscriptionsRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> ListProductSubscriptionsResponse {
        try await self.client.execute(
            operation: "ListProductSubscriptions", 
            path: "/user/ListProductSubscriptions", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Lists the user-based subscription products available from an identity provider.
    ///
    /// Parameters:
    ///   - filters: An array of structures that you can use to filter the results to those that match one or more sets of key-value pairs that you specify.
    ///   - identityProvider: An object that specifies details for the identity provider.
    ///   - maxResults: Maximum number of results to return in a single call.
    ///   - nextToken: Token for the next set of results.
    ///   - product: The name of the user-based subscription product.
    ///   - logger: Logger use during operation
    @inlinable
    public func listProductSubscriptions(
        filters: [Filter]? = nil,
        identityProvider: IdentityProvider,
        maxResults: Int? = nil,
        nextToken: String? = nil,
        product: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> ListProductSubscriptionsResponse {
        let input = ListProductSubscriptionsRequest(
            filters: filters, 
            identityProvider: identityProvider, 
            maxResults: maxResults, 
            nextToken: nextToken, 
            product: product
        )
        return try await self.listProductSubscriptions(input, logger: logger)
    }

    /// Lists user associations for an identity provider.
    @Sendable
    @inlinable
    public func listUserAssociations(_ input: ListUserAssociationsRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> ListUserAssociationsResponse {
        try await self.client.execute(
            operation: "ListUserAssociations", 
            path: "/user/ListUserAssociations", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Lists user associations for an identity provider.
    ///
    /// Parameters:
    ///   - filters: An array of structures that you can use to filter the results to those that match one or more sets of key-value pairs that you specify.
    ///   - identityProvider: An object that specifies details for the identity provider.
    ///   - instanceId: The ID of the EC2 instance, which provides user-based subscriptions.
    ///   - maxResults: Maximum number of results to return in a single call.
    ///   - nextToken: Token for the next set of results.
    ///   - logger: Logger use during operation
    @inlinable
    public func listUserAssociations(
        filters: [Filter]? = nil,
        identityProvider: IdentityProvider,
        instanceId: String,
        maxResults: Int? = nil,
        nextToken: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> ListUserAssociationsResponse {
        let input = ListUserAssociationsRequest(
            filters: filters, 
            identityProvider: identityProvider, 
            instanceId: instanceId, 
            maxResults: maxResults, 
            nextToken: nextToken
        )
        return try await self.listUserAssociations(input, logger: logger)
    }

    /// Registers an identity provider for user-based subscriptions.
    @Sendable
    @inlinable
    public func registerIdentityProvider(_ input: RegisterIdentityProviderRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> RegisterIdentityProviderResponse {
        try await self.client.execute(
            operation: "RegisterIdentityProvider", 
            path: "/identity-provider/RegisterIdentityProvider", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Registers an identity provider for user-based subscriptions.
    ///
    /// Parameters:
    ///   - identityProvider: An object that specifies details for the identity provider.
    ///   - product: The name of the user-based subscription product.
    ///   - settings: The registered identity provider’s product related configuration settings such as the subnets to provision VPC endpoints.
    ///   - logger: Logger use during operation
    @inlinable
    public func registerIdentityProvider(
        identityProvider: IdentityProvider,
        product: String,
        settings: Settings? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> RegisterIdentityProviderResponse {
        let input = RegisterIdentityProviderRequest(
            identityProvider: identityProvider, 
            product: product, 
            settings: settings
        )
        return try await self.registerIdentityProvider(input, logger: logger)
    }

    /// Starts a product subscription for a user with the specified identity provider.  Your estimated bill for charges on the number of users and related costs will take 48 hours to appear for billing periods that haven't closed (marked as Pending billing status) in Amazon Web Services Billing. For more information, see Viewing your monthly charges in the Amazon Web Services Billing User Guide.
    @Sendable
    @inlinable
    public func startProductSubscription(_ input: StartProductSubscriptionRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> StartProductSubscriptionResponse {
        try await self.client.execute(
            operation: "StartProductSubscription", 
            path: "/user/StartProductSubscription", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Starts a product subscription for a user with the specified identity provider.  Your estimated bill for charges on the number of users and related costs will take 48 hours to appear for billing periods that haven't closed (marked as Pending billing status) in Amazon Web Services Billing. For more information, see Viewing your monthly charges in the Amazon Web Services Billing User Guide.
    ///
    /// Parameters:
    ///   - domain: The domain name of the user.
    ///   - identityProvider: An object that specifies details for the identity provider.
    ///   - product: The name of the user-based subscription product.
    ///   - username: The user name from the identity provider of the user.
    ///   - logger: Logger use during operation
    @inlinable
    public func startProductSubscription(
        domain: String? = nil,
        identityProvider: IdentityProvider,
        product: String,
        username: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> StartProductSubscriptionResponse {
        let input = StartProductSubscriptionRequest(
            domain: domain, 
            identityProvider: identityProvider, 
            product: product, 
            username: username
        )
        return try await self.startProductSubscription(input, logger: logger)
    }

    /// Stops a product subscription for a user with the specified identity provider.
    @Sendable
    @inlinable
    public func stopProductSubscription(_ input: StopProductSubscriptionRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> StopProductSubscriptionResponse {
        try await self.client.execute(
            operation: "StopProductSubscription", 
            path: "/user/StopProductSubscription", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Stops a product subscription for a user with the specified identity provider.
    ///
    /// Parameters:
    ///   - domain: The domain name of the user.
    ///   - identityProvider: An object that specifies details for the identity provider.
    ///   - product: The name of the user-based subscription product.
    ///   - username: The user name from the identity provider for the user.
    ///   - logger: Logger use during operation
    @inlinable
    public func stopProductSubscription(
        domain: String? = nil,
        identityProvider: IdentityProvider,
        product: String,
        username: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> StopProductSubscriptionResponse {
        let input = StopProductSubscriptionRequest(
            domain: domain, 
            identityProvider: identityProvider, 
            product: product, 
            username: username
        )
        return try await self.stopProductSubscription(input, logger: logger)
    }

    /// Updates additional product configuration settings for the registered identity provider.
    @Sendable
    @inlinable
    public func updateIdentityProviderSettings(_ input: UpdateIdentityProviderSettingsRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> UpdateIdentityProviderSettingsResponse {
        try await self.client.execute(
            operation: "UpdateIdentityProviderSettings", 
            path: "/identity-provider/UpdateIdentityProviderSettings", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Updates additional product configuration settings for the registered identity provider.
    ///
    /// Parameters:
    ///   - identityProvider: 
    ///   - product: The name of the user-based subscription product.
    ///   - updateSettings: Updates the registered identity provider’s product related configuration settings. You can update any combination of settings in a single operation such as the:   Subnets which you want to add to provision VPC endpoints.   Subnets which you want to remove the VPC endpoints from.   Security group ID which permits traffic to the VPC endpoints.
    ///   - logger: Logger use during operation
    @inlinable
    public func updateIdentityProviderSettings(
        identityProvider: IdentityProvider,
        product: String,
        updateSettings: UpdateSettings,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> UpdateIdentityProviderSettingsResponse {
        let input = UpdateIdentityProviderSettingsRequest(
            identityProvider: identityProvider, 
            product: product, 
            updateSettings: updateSettings
        )
        return try await self.updateIdentityProviderSettings(input, logger: logger)
    }
}

extension LicenseManagerUserSubscriptions {
    /// Initializer required by `AWSService.with(middlewares:timeout:byteBufferAllocator:options)`. You are not able to use this initializer directly as there are not public
    /// initializers for `AWSServiceConfig.Patch`. Please use `AWSService.with(middlewares:timeout:byteBufferAllocator:options)` instead.
    public init(from: LicenseManagerUserSubscriptions, patch: AWSServiceConfig.Patch) {
        self.client = from.client
        self.config = from.config.with(patch: patch)
    }
}

// MARK: Paginators

@available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
extension LicenseManagerUserSubscriptions {
    /// Return PaginatorSequence for operation ``listIdentityProviders(_:logger:)``.
    ///
    /// - Parameters:
    ///   - input: Input for operation
    ///   - logger: Logger used for logging
    @inlinable
    public func listIdentityProvidersPaginator(
        _ input: ListIdentityProvidersRequest,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<ListIdentityProvidersRequest, ListIdentityProvidersResponse> {
        return .init(
            input: input,
            command: self.listIdentityProviders,
            inputKey: \ListIdentityProvidersRequest.nextToken,
            outputKey: \ListIdentityProvidersResponse.nextToken,
            logger: logger
        )
    }
    /// Return PaginatorSequence for operation ``listIdentityProviders(_:logger:)``.
    ///
    /// - Parameters:
    ///   - maxResults: Maximum number of results to return in a single call.
    ///   - logger: Logger used for logging
    @inlinable
    public func listIdentityProvidersPaginator(
        maxResults: Int? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) -> AWSClient.PaginatorSequence<ListIdentityProvidersRequest, ListIdentityProvidersResponse> {
        let input = ListIdentityProvidersRequest(
            maxResults: maxResults
        )
        return self.listIdentityProvidersPaginator(input, logger: logger)
    }

    /// Return PaginatorSequence for operation ``listInstances(_:logger:)``.
    ///
    /// - Parameters:
    ///   - input: Input for operation
    ///   - logger: Logger used for logging
    @inlinable
    public func listInstancesPaginator(
        _ input: ListInstancesRequest,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<ListInstancesRequest, ListInstancesResponse> {
        return .init(
            input: input,
            command: self.listInstances,
            inputKey: \ListInstancesRequest.nextToken,
            outputKey: \ListInstancesResponse.nextToken,
            logger: logger
        )
    }
    /// Return PaginatorSequence for operation ``listInstances(_:logger:)``.
    ///
    /// - Parameters:
    ///   - filters: An array of structures that you can use to filter the results to those that match one or more sets of key-value pairs that you specify.
    ///   - maxResults: Maximum number of results to return in a single call.
    ///   - logger: Logger used for logging
    @inlinable
    public func listInstancesPaginator(
        filters: [Filter]? = nil,
        maxResults: Int? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) -> AWSClient.PaginatorSequence<ListInstancesRequest, ListInstancesResponse> {
        let input = ListInstancesRequest(
            filters: filters, 
            maxResults: maxResults
        )
        return self.listInstancesPaginator(input, logger: logger)
    }

    /// Return PaginatorSequence for operation ``listProductSubscriptions(_:logger:)``.
    ///
    /// - Parameters:
    ///   - input: Input for operation
    ///   - logger: Logger used for logging
    @inlinable
    public func listProductSubscriptionsPaginator(
        _ input: ListProductSubscriptionsRequest,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<ListProductSubscriptionsRequest, ListProductSubscriptionsResponse> {
        return .init(
            input: input,
            command: self.listProductSubscriptions,
            inputKey: \ListProductSubscriptionsRequest.nextToken,
            outputKey: \ListProductSubscriptionsResponse.nextToken,
            logger: logger
        )
    }
    /// Return PaginatorSequence for operation ``listProductSubscriptions(_:logger:)``.
    ///
    /// - Parameters:
    ///   - filters: An array of structures that you can use to filter the results to those that match one or more sets of key-value pairs that you specify.
    ///   - identityProvider: An object that specifies details for the identity provider.
    ///   - maxResults: Maximum number of results to return in a single call.
    ///   - product: The name of the user-based subscription product.
    ///   - logger: Logger used for logging
    @inlinable
    public func listProductSubscriptionsPaginator(
        filters: [Filter]? = nil,
        identityProvider: IdentityProvider,
        maxResults: Int? = nil,
        product: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) -> AWSClient.PaginatorSequence<ListProductSubscriptionsRequest, ListProductSubscriptionsResponse> {
        let input = ListProductSubscriptionsRequest(
            filters: filters, 
            identityProvider: identityProvider, 
            maxResults: maxResults, 
            product: product
        )
        return self.listProductSubscriptionsPaginator(input, logger: logger)
    }

    /// Return PaginatorSequence for operation ``listUserAssociations(_:logger:)``.
    ///
    /// - Parameters:
    ///   - input: Input for operation
    ///   - logger: Logger used for logging
    @inlinable
    public func listUserAssociationsPaginator(
        _ input: ListUserAssociationsRequest,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<ListUserAssociationsRequest, ListUserAssociationsResponse> {
        return .init(
            input: input,
            command: self.listUserAssociations,
            inputKey: \ListUserAssociationsRequest.nextToken,
            outputKey: \ListUserAssociationsResponse.nextToken,
            logger: logger
        )
    }
    /// Return PaginatorSequence for operation ``listUserAssociations(_:logger:)``.
    ///
    /// - Parameters:
    ///   - filters: An array of structures that you can use to filter the results to those that match one or more sets of key-value pairs that you specify.
    ///   - identityProvider: An object that specifies details for the identity provider.
    ///   - instanceId: The ID of the EC2 instance, which provides user-based subscriptions.
    ///   - maxResults: Maximum number of results to return in a single call.
    ///   - logger: Logger used for logging
    @inlinable
    public func listUserAssociationsPaginator(
        filters: [Filter]? = nil,
        identityProvider: IdentityProvider,
        instanceId: String,
        maxResults: Int? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) -> AWSClient.PaginatorSequence<ListUserAssociationsRequest, ListUserAssociationsResponse> {
        let input = ListUserAssociationsRequest(
            filters: filters, 
            identityProvider: identityProvider, 
            instanceId: instanceId, 
            maxResults: maxResults
        )
        return self.listUserAssociationsPaginator(input, logger: logger)
    }
}

extension LicenseManagerUserSubscriptions.ListIdentityProvidersRequest: AWSPaginateToken {
    @inlinable
    public func usingPaginationToken(_ token: String) -> LicenseManagerUserSubscriptions.ListIdentityProvidersRequest {
        return .init(
            maxResults: self.maxResults,
            nextToken: token
        )
    }
}

extension LicenseManagerUserSubscriptions.ListInstancesRequest: AWSPaginateToken {
    @inlinable
    public func usingPaginationToken(_ token: String) -> LicenseManagerUserSubscriptions.ListInstancesRequest {
        return .init(
            filters: self.filters,
            maxResults: self.maxResults,
            nextToken: token
        )
    }
}

extension LicenseManagerUserSubscriptions.ListProductSubscriptionsRequest: AWSPaginateToken {
    @inlinable
    public func usingPaginationToken(_ token: String) -> LicenseManagerUserSubscriptions.ListProductSubscriptionsRequest {
        return .init(
            filters: self.filters,
            identityProvider: self.identityProvider,
            maxResults: self.maxResults,
            nextToken: token,
            product: self.product
        )
    }
}

extension LicenseManagerUserSubscriptions.ListUserAssociationsRequest: AWSPaginateToken {
    @inlinable
    public func usingPaginationToken(_ token: String) -> LicenseManagerUserSubscriptions.ListUserAssociationsRequest {
        return .init(
            filters: self.filters,
            identityProvider: self.identityProvider,
            instanceId: self.instanceId,
            maxResults: self.maxResults,
            nextToken: token
        )
    }
}
