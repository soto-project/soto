//===----------------------------------------------------------------------===//
//
// This source file is part of the Soto for AWS open source project
//
// Copyright (c) 2017-2024 the Soto project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
// See CONTRIBUTORS.txt for the list of Soto project authors
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by https://github.com/soto-project/soto-codegenerator.
// DO NOT EDIT.

#if canImport(FoundationEssentials)
import FoundationEssentials
#else
import Foundation
#endif
@_exported import SotoCore

/// Service object for interacting with AWS FreeTier service.
///
/// You can use the Amazon Web Services Free Tier API to query programmatically your Free Tier usage data. Free Tier tracks your monthly usage data for all free tier offers that are associated with your Amazon Web Services account. You can use the Free Tier API to filter and show only the data that you want. Service endpoint The Free Tier API provides the following endpoint:   https://freetier.us-east-1.api.aws   For more information, see Using the Amazon Web Services Free Tier in the Billing User Guide.
public struct FreeTier: AWSService {
    // MARK: Member variables

    /// Client used for communication with AWS
    public let client: AWSClient
    /// Service configuration
    public let config: AWSServiceConfig

    // MARK: Initialization

    /// Initialize the FreeTier client
    /// - parameters:
    ///     - client: AWSClient used to process requests
    ///     - region: Region of server you want to communicate with. This will override the partition parameter.
    ///     - partition: AWS partition where service resides, standard (.aws), china (.awscn), government (.awsusgov).
    ///     - endpoint: Custom endpoint URL to use instead of standard AWS servers
    ///     - middleware: Middleware chain used to edit requests before they are sent and responses before they are decoded 
    ///     - timeout: Timeout value for HTTP requests
    ///     - byteBufferAllocator: Allocator for ByteBuffers
    ///     - options: Service options
    public init(
        client: AWSClient,
        region: SotoCore.Region? = nil,
        partition: AWSPartition = .aws,
        endpoint: String? = nil,
        middleware: AWSMiddlewareProtocol? = nil,
        timeout: TimeAmount? = nil,
        byteBufferAllocator: ByteBufferAllocator = ByteBufferAllocator(),
        options: AWSServiceConfig.Options = []
    ) {
        self.client = client
        self.config = AWSServiceConfig(
            region: region,
            partition: region?.partition ?? partition,
            amzTarget: "AWSFreeTierService",
            serviceName: "FreeTier",
            serviceIdentifier: "freetier",
            serviceProtocol: .json(version: "1.0"),
            apiVersion: "2023-09-07",
            endpoint: endpoint,
            errorType: FreeTierErrorType.self,
            middleware: middleware,
            timeout: timeout,
            byteBufferAllocator: byteBufferAllocator,
            options: options
        )
    }





    // MARK: API Calls

    /// Returns a list of all Free Tier usage objects that match your filters.
    @Sendable
    @inlinable
    public func getFreeTierUsage(_ input: GetFreeTierUsageRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> GetFreeTierUsageResponse {
        try await self.client.execute(
            operation: "GetFreeTierUsage", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Returns a list of all Free Tier usage objects that match your filters.
    ///
    /// Parameters:
    ///   - filter: An expression that specifies the conditions that you want each FreeTierUsage object to meet.
    ///   - maxResults: The maximum number of results to return in the response. MaxResults means that there can be up to the specified number of values, but there might be fewer results based on your filters.
    ///   - nextToken: The pagination token that indicates the next set of results to retrieve.
    ///   - logger: Logger use during operation
    @inlinable
    public func getFreeTierUsage(
        filter: Expression? = nil,
        maxResults: Int? = nil,
        nextToken: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> GetFreeTierUsageResponse {
        let input = GetFreeTierUsageRequest(
            filter: filter, 
            maxResults: maxResults, 
            nextToken: nextToken
        )
        return try await self.getFreeTierUsage(input, logger: logger)
    }
}

extension FreeTier {
    /// Initializer required by `AWSService.with(middlewares:timeout:byteBufferAllocator:options)`. You are not able to use this initializer directly as there are not public
    /// initializers for `AWSServiceConfig.Patch`. Please use `AWSService.with(middlewares:timeout:byteBufferAllocator:options)` instead.
    public init(from: FreeTier, patch: AWSServiceConfig.Patch) {
        self.client = from.client
        self.config = from.config.with(patch: patch)
    }
}

// MARK: Paginators

@available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
extension FreeTier {
    /// Return PaginatorSequence for operation ``getFreeTierUsage(_:logger:)``.
    ///
    /// - Parameters:
    ///   - input: Input for operation
    ///   - logger: Logger used for logging
    @inlinable
    public func getFreeTierUsagePaginator(
        _ input: GetFreeTierUsageRequest,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<GetFreeTierUsageRequest, GetFreeTierUsageResponse> {
        return .init(
            input: input,
            command: self.getFreeTierUsage,
            inputKey: \GetFreeTierUsageRequest.nextToken,
            outputKey: \GetFreeTierUsageResponse.nextToken,
            logger: logger
        )
    }
    /// Return PaginatorSequence for operation ``getFreeTierUsage(_:logger:)``.
    ///
    /// - Parameters:
    ///   - filter: An expression that specifies the conditions that you want each FreeTierUsage object to meet.
    ///   - maxResults: The maximum number of results to return in the response. MaxResults means that there can be up to the specified number of values, but there might be fewer results based on your filters.
    ///   - logger: Logger used for logging
    @inlinable
    public func getFreeTierUsagePaginator(
        filter: Expression? = nil,
        maxResults: Int? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) -> AWSClient.PaginatorSequence<GetFreeTierUsageRequest, GetFreeTierUsageResponse> {
        let input = GetFreeTierUsageRequest(
            filter: filter, 
            maxResults: maxResults
        )
        return self.getFreeTierUsagePaginator(input, logger: logger)
    }
}

extension FreeTier.GetFreeTierUsageRequest: AWSPaginateToken {
    @inlinable
    public func usingPaginationToken(_ token: String) -> FreeTier.GetFreeTierUsageRequest {
        return .init(
            filter: self.filter,
            maxResults: self.maxResults,
            nextToken: token
        )
    }
}
