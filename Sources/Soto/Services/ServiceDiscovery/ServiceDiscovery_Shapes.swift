//===----------------------------------------------------------------------===//
//
// This source file is part of the Soto for AWS open source project
//
// Copyright (c) 2017-2021 the Soto project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
// See CONTRIBUTORS.txt for the list of Soto project authors
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by https://github.com/soto-project/soto-codegenerator.
// DO NOT EDIT.

import Foundation
import SotoCore

extension ServiceDiscovery {
    // MARK: Enums

    public enum CustomHealthStatus: String, CustomStringConvertible, Codable {
        case healthy = "HEALTHY"
        case unhealthy = "UNHEALTHY"
        public var description: String { return self.rawValue }
    }

    public enum FilterCondition: String, CustomStringConvertible, Codable {
        case between = "BETWEEN"
        case eq = "EQ"
        case `in` = "IN"
        public var description: String { return self.rawValue }
    }

    public enum HealthCheckType: String, CustomStringConvertible, Codable {
        case http = "HTTP"
        case https = "HTTPS"
        case tcp = "TCP"
        public var description: String { return self.rawValue }
    }

    public enum HealthStatus: String, CustomStringConvertible, Codable {
        case healthy = "HEALTHY"
        case unhealthy = "UNHEALTHY"
        case unknown = "UNKNOWN"
        public var description: String { return self.rawValue }
    }

    public enum HealthStatusFilter: String, CustomStringConvertible, Codable {
        case all = "ALL"
        case healthy = "HEALTHY"
        case healthyOrElseAll = "HEALTHY_OR_ELSE_ALL"
        case unhealthy = "UNHEALTHY"
        public var description: String { return self.rawValue }
    }

    public enum NamespaceFilterName: String, CustomStringConvertible, Codable {
        case type = "TYPE"
        public var description: String { return self.rawValue }
    }

    public enum NamespaceType: String, CustomStringConvertible, Codable {
        case dnsPrivate = "DNS_PRIVATE"
        case dnsPublic = "DNS_PUBLIC"
        case http = "HTTP"
        public var description: String { return self.rawValue }
    }

    public enum OperationFilterName: String, CustomStringConvertible, Codable {
        case namespaceId = "NAMESPACE_ID"
        case serviceId = "SERVICE_ID"
        case status = "STATUS"
        case type = "TYPE"
        case updateDate = "UPDATE_DATE"
        public var description: String { return self.rawValue }
    }

    public enum OperationStatus: String, CustomStringConvertible, Codable {
        case fail = "FAIL"
        case pending = "PENDING"
        case submitted = "SUBMITTED"
        case success = "SUCCESS"
        public var description: String { return self.rawValue }
    }

    public enum OperationTargetType: String, CustomStringConvertible, Codable {
        case instance = "INSTANCE"
        case namespace = "NAMESPACE"
        case service = "SERVICE"
        public var description: String { return self.rawValue }
    }

    public enum OperationType: String, CustomStringConvertible, Codable {
        case createNamespace = "CREATE_NAMESPACE"
        case deleteNamespace = "DELETE_NAMESPACE"
        case deregisterInstance = "DEREGISTER_INSTANCE"
        case registerInstance = "REGISTER_INSTANCE"
        case updateNamespace = "UPDATE_NAMESPACE"
        case updateService = "UPDATE_SERVICE"
        public var description: String { return self.rawValue }
    }

    public enum RecordType: String, CustomStringConvertible, Codable {
        case a = "A"
        case aaaa = "AAAA"
        case cname = "CNAME"
        case srv = "SRV"
        public var description: String { return self.rawValue }
    }

    public enum RoutingPolicy: String, CustomStringConvertible, Codable {
        case multivalue = "MULTIVALUE"
        case weighted = "WEIGHTED"
        public var description: String { return self.rawValue }
    }

    public enum ServiceFilterName: String, CustomStringConvertible, Codable {
        case namespaceId = "NAMESPACE_ID"
        public var description: String { return self.rawValue }
    }

    public enum ServiceType: String, CustomStringConvertible, Codable {
        case dns = "DNS"
        case dnsHttp = "DNS_HTTP"
        case http = "HTTP"
        public var description: String { return self.rawValue }
    }

    public enum ServiceTypeOption: String, CustomStringConvertible, Codable {
        case http = "HTTP"
        public var description: String { return self.rawValue }
    }

    // MARK: Shapes

    public struct CreateHttpNamespaceRequest: AWSEncodableShape {
        /// A unique string that identifies the request and that allows failed CreateHttpNamespace requests to be retried without the risk of running the operation twice. CreatorRequestId can be any unique string (for example, a date/time stamp).
        public let creatorRequestId: String?
        /// A description for the namespace.
        public let description: String?
        /// The name that you want to assign to this namespace.
        public let name: String
        /// The tags to add to the namespace. Each tag consists of a key and an optional value that you define. Tags keys can be up to 128 characters in length, and tag values can be up to 256 characters in length.
        public let tags: [Tag]?

        public init(creatorRequestId: String? = CreateHttpNamespaceRequest.idempotencyToken(), description: String? = nil, name: String, tags: [Tag]? = nil) {
            self.creatorRequestId = creatorRequestId
            self.description = description
            self.name = name
            self.tags = tags
        }

        public func validate(name: String) throws {
            try self.validate(self.creatorRequestId, name: "creatorRequestId", parent: name, max: 64)
            try self.validate(self.description, name: "description", parent: name, max: 1024)
            try self.validate(self.name, name: "name", parent: name, max: 1024)
            try self.validate(self.name, name: "name", parent: name, pattern: "^[!-~]{1,1024}$")
            try self.tags?.forEach {
                try $0.validate(name: "\(name).tags[]")
            }
            try self.validate(self.tags, name: "tags", parent: name, max: 200)
        }

        private enum CodingKeys: String, CodingKey {
            case creatorRequestId = "CreatorRequestId"
            case description = "Description"
            case name = "Name"
            case tags = "Tags"
        }
    }

    public struct CreateHttpNamespaceResponse: AWSDecodableShape {
        /// A value that you can use to determine whether the request completed successfully. To get the status of the operation, see GetOperation.
        public let operationId: String?

        public init(operationId: String? = nil) {
            self.operationId = operationId
        }

        private enum CodingKeys: String, CodingKey {
            case operationId = "OperationId"
        }
    }

    public struct CreatePrivateDnsNamespaceRequest: AWSEncodableShape {
        /// A unique string that identifies the request and that allows failed CreatePrivateDnsNamespace requests to be retried without the risk of running the operation twice. CreatorRequestId can be any unique string (for example, a date/timestamp).
        public let creatorRequestId: String?
        /// A description for the namespace.
        public let description: String?
        /// The name that you want to assign to this namespace. When you create a private DNS namespace, Cloud Map automatically creates an Amazon Route 53 private hosted zone that has the same name as the namespace.
        public let name: String
        /// Properties for the private DNS namespace.
        public let properties: PrivateDnsNamespaceProperties?
        /// The tags to add to the namespace. Each tag consists of a key and an optional value that you define. Tags keys can be up to 128 characters in length, and tag values can be up to 256 characters in length.
        public let tags: [Tag]?
        /// The ID of the Amazon VPC that you want to associate the namespace with.
        public let vpc: String

        public init(creatorRequestId: String? = CreatePrivateDnsNamespaceRequest.idempotencyToken(), description: String? = nil, name: String, properties: PrivateDnsNamespaceProperties? = nil, tags: [Tag]? = nil, vpc: String) {
            self.creatorRequestId = creatorRequestId
            self.description = description
            self.name = name
            self.properties = properties
            self.tags = tags
            self.vpc = vpc
        }

        public func validate(name: String) throws {
            try self.validate(self.creatorRequestId, name: "creatorRequestId", parent: name, max: 64)
            try self.validate(self.description, name: "description", parent: name, max: 1024)
            try self.validate(self.name, name: "name", parent: name, max: 1024)
            try self.validate(self.name, name: "name", parent: name, pattern: "^[!-~]{1,1024}$")
            try self.properties?.validate(name: "\(name).properties")
            try self.tags?.forEach {
                try $0.validate(name: "\(name).tags[]")
            }
            try self.validate(self.tags, name: "tags", parent: name, max: 200)
            try self.validate(self.vpc, name: "vpc", parent: name, max: 64)
        }

        private enum CodingKeys: String, CodingKey {
            case creatorRequestId = "CreatorRequestId"
            case description = "Description"
            case name = "Name"
            case properties = "Properties"
            case tags = "Tags"
            case vpc = "Vpc"
        }
    }

    public struct CreatePrivateDnsNamespaceResponse: AWSDecodableShape {
        /// A value that you can use to determine whether the request completed successfully. To get the status of the operation, see GetOperation.
        public let operationId: String?

        public init(operationId: String? = nil) {
            self.operationId = operationId
        }

        private enum CodingKeys: String, CodingKey {
            case operationId = "OperationId"
        }
    }

    public struct CreatePublicDnsNamespaceRequest: AWSEncodableShape {
        /// A unique string that identifies the request and that allows failed CreatePublicDnsNamespace requests to be retried without the risk of running the operation twice. CreatorRequestId can be any unique string (for example, a date/timestamp).
        public let creatorRequestId: String?
        /// A description for the namespace.
        public let description: String?
        /// The name that you want to assign to this namespace.
        public let name: String
        /// Properties for the public DNS namespace.
        public let properties: PublicDnsNamespaceProperties?
        /// The tags to add to the namespace. Each tag consists of a key and an optional value that you define. Tags keys can be up to 128 characters in length, and tag values can be up to 256 characters in length.
        public let tags: [Tag]?

        public init(creatorRequestId: String? = CreatePublicDnsNamespaceRequest.idempotencyToken(), description: String? = nil, name: String, properties: PublicDnsNamespaceProperties? = nil, tags: [Tag]? = nil) {
            self.creatorRequestId = creatorRequestId
            self.description = description
            self.name = name
            self.properties = properties
            self.tags = tags
        }

        public func validate(name: String) throws {
            try self.validate(self.creatorRequestId, name: "creatorRequestId", parent: name, max: 64)
            try self.validate(self.description, name: "description", parent: name, max: 1024)
            try self.validate(self.name, name: "name", parent: name, max: 1024)
            try self.validate(self.name, name: "name", parent: name, pattern: "^([a-zA-Z0-9]([a-zA-Z0-9\\-]{0,61}[a-zA-Z0-9])?\\.)+[a-zA-Z0-9]([a-zA-Z0-9\\-]{0,61}[a-zA-Z0-9])?$")
            try self.properties?.validate(name: "\(name).properties")
            try self.tags?.forEach {
                try $0.validate(name: "\(name).tags[]")
            }
            try self.validate(self.tags, name: "tags", parent: name, max: 200)
        }

        private enum CodingKeys: String, CodingKey {
            case creatorRequestId = "CreatorRequestId"
            case description = "Description"
            case name = "Name"
            case properties = "Properties"
            case tags = "Tags"
        }
    }

    public struct CreatePublicDnsNamespaceResponse: AWSDecodableShape {
        /// A value that you can use to determine whether the request completed successfully. To get the status of the operation, see GetOperation.
        public let operationId: String?

        public init(operationId: String? = nil) {
            self.operationId = operationId
        }

        private enum CodingKeys: String, CodingKey {
            case operationId = "OperationId"
        }
    }

    public struct CreateServiceRequest: AWSEncodableShape {
        /// A unique string that identifies the request and that allows failed CreateService requests to be retried without the risk of running the operation twice. CreatorRequestId can be any unique string (for example, a date/timestamp).
        public let creatorRequestId: String?
        /// A description for the service.
        public let description: String?
        /// A complex type that contains information about the Amazon Route 53 records that you want Cloud Map to create when you register an instance.
        public let dnsConfig: DnsConfig?
        ///  Public DNS and HTTP namespaces only. A complex type that contains settings for an optional Route 53 health check. If you specify settings for a health check, Cloud Map associates the health check with all the Route 53 DNS records that you specify in DnsConfig.  If you specify a health check configuration, you can specify either HealthCheckCustomConfig or HealthCheckConfig but not both.  For information about the charges for health checks, see Cloud Map Pricing.
        public let healthCheckConfig: HealthCheckConfig?
        /// A complex type that contains information about an optional custom health check.  If you specify a health check configuration, you can specify either HealthCheckCustomConfig or HealthCheckConfig but not both.  You can't add, update, or delete a HealthCheckCustomConfig configuration from an existing service.
        public let healthCheckCustomConfig: HealthCheckCustomConfig?
        /// The name that you want to assign to the service. If you want Cloud Map to create an SRV record when you register an instance and you're using a system that requires a specific SRV format, such as HAProxy, specify the following for Name:   Start the name with an underscore (_), such as _exampleservice.   End the name with ._protocol, such as ._tcp.   When you register an instance, Cloud Map creates an SRV record and assigns a name to the record by concatenating the service name and the namespace name (for example,  _exampleservice._tcp.example.com).  For services that are accessible by DNS queries, you can't create multiple services with names that differ only by case (such as EXAMPLE and example). Otherwise, these services have the same DNS name and can't be distinguished. However, if you use a namespace that's only accessible by API calls, then you can create services that with names that differ only by case.
        public let name: String
        /// The ID of the namespace that you want to use to create the service. The namespace ID must be specified, but it can be specified either here or in the DnsConfig object.
        public let namespaceId: String?
        /// The tags to add to the service. Each tag consists of a key and an optional value that you define. Tags keys can be up to 128 characters in length, and tag values can be up to 256 characters in length.
        public let tags: [Tag]?
        /// If present, specifies that the service instances are only discoverable using the DiscoverInstances API operation. No DNS records is registered for the service instances. The only valid value is HTTP.
        public let type: ServiceTypeOption?

        public init(creatorRequestId: String? = CreateServiceRequest.idempotencyToken(), description: String? = nil, dnsConfig: DnsConfig? = nil, healthCheckConfig: HealthCheckConfig? = nil, healthCheckCustomConfig: HealthCheckCustomConfig? = nil, name: String, namespaceId: String? = nil, tags: [Tag]? = nil, type: ServiceTypeOption? = nil) {
            self.creatorRequestId = creatorRequestId
            self.description = description
            self.dnsConfig = dnsConfig
            self.healthCheckConfig = healthCheckConfig
            self.healthCheckCustomConfig = healthCheckCustomConfig
            self.name = name
            self.namespaceId = namespaceId
            self.tags = tags
            self.type = type
        }

        public func validate(name: String) throws {
            try self.validate(self.creatorRequestId, name: "creatorRequestId", parent: name, max: 64)
            try self.validate(self.description, name: "description", parent: name, max: 1024)
            try self.dnsConfig?.validate(name: "\(name).dnsConfig")
            try self.healthCheckConfig?.validate(name: "\(name).healthCheckConfig")
            try self.healthCheckCustomConfig?.validate(name: "\(name).healthCheckCustomConfig")
            try self.validate(self.name, name: "name", parent: name, pattern: "^((?=^.{1,127}$)^([a-zA-Z0-9_][a-zA-Z0-9-_]{0,61}[a-zA-Z0-9_]|[a-zA-Z0-9])(\\.([a-zA-Z0-9_][a-zA-Z0-9-_]{0,61}[a-zA-Z0-9_]|[a-zA-Z0-9]))*$)|(^\\.$)$")
            try self.validate(self.namespaceId, name: "namespaceId", parent: name, max: 64)
            try self.tags?.forEach {
                try $0.validate(name: "\(name).tags[]")
            }
            try self.validate(self.tags, name: "tags", parent: name, max: 200)
        }

        private enum CodingKeys: String, CodingKey {
            case creatorRequestId = "CreatorRequestId"
            case description = "Description"
            case dnsConfig = "DnsConfig"
            case healthCheckConfig = "HealthCheckConfig"
            case healthCheckCustomConfig = "HealthCheckCustomConfig"
            case name = "Name"
            case namespaceId = "NamespaceId"
            case tags = "Tags"
            case type = "Type"
        }
    }

    public struct CreateServiceResponse: AWSDecodableShape {
        /// A complex type that contains information about the new service.
        public let service: Service?

        public init(service: Service? = nil) {
            self.service = service
        }

        private enum CodingKeys: String, CodingKey {
            case service = "Service"
        }
    }

    public struct DeleteNamespaceRequest: AWSEncodableShape {
        /// The ID of the namespace that you want to delete.
        public let id: String

        public init(id: String) {
            self.id = id
        }

        public func validate(name: String) throws {
            try self.validate(self.id, name: "id", parent: name, max: 64)
        }

        private enum CodingKeys: String, CodingKey {
            case id = "Id"
        }
    }

    public struct DeleteNamespaceResponse: AWSDecodableShape {
        /// A value that you can use to determine whether the request completed successfully. To get the status of the operation, see GetOperation.
        public let operationId: String?

        public init(operationId: String? = nil) {
            self.operationId = operationId
        }

        private enum CodingKeys: String, CodingKey {
            case operationId = "OperationId"
        }
    }

    public struct DeleteServiceRequest: AWSEncodableShape {
        /// The ID of the service that you want to delete.
        public let id: String

        public init(id: String) {
            self.id = id
        }

        public func validate(name: String) throws {
            try self.validate(self.id, name: "id", parent: name, max: 64)
        }

        private enum CodingKeys: String, CodingKey {
            case id = "Id"
        }
    }

    public struct DeleteServiceResponse: AWSDecodableShape {
        public init() {}
    }

    public struct DeregisterInstanceRequest: AWSEncodableShape {
        /// The value that you specified for Id in the RegisterInstance request.
        public let instanceId: String
        /// The ID of the service that the instance is associated with.
        public let serviceId: String

        public init(instanceId: String, serviceId: String) {
            self.instanceId = instanceId
            self.serviceId = serviceId
        }

        public func validate(name: String) throws {
            try self.validate(self.instanceId, name: "instanceId", parent: name, max: 64)
            try self.validate(self.serviceId, name: "serviceId", parent: name, max: 64)
        }

        private enum CodingKeys: String, CodingKey {
            case instanceId = "InstanceId"
            case serviceId = "ServiceId"
        }
    }

    public struct DeregisterInstanceResponse: AWSDecodableShape {
        /// A value that you can use to determine whether the request completed successfully. To get the status of the operation, see GetOperation.
        public let operationId: String?

        public init(operationId: String? = nil) {
            self.operationId = operationId
        }

        private enum CodingKeys: String, CodingKey {
            case operationId = "OperationId"
        }
    }

    public struct DiscoverInstancesRequest: AWSEncodableShape {
        /// The health status of the instances that you want to discover. This parameter is ignored for services that don't have a health check configured, and all instances are returned.  HEALTHY  Returns healthy instances.  UNHEALTHY  Returns unhealthy instances.  ALL  Returns all instances.  HEALTHY_OR_ELSE_ALL  Returns healthy instances, unless none are reporting a healthy state. In that case, return all instances. This is also called failing open.
        public let healthStatus: HealthStatusFilter?
        /// The maximum number of instances that you want Cloud Map to return in the response to a DiscoverInstances request. If you don't specify a value for MaxResults, Cloud Map returns up to 100 instances.
        public let maxResults: Int?
        /// The HttpName name of the namespace. It's found in the HttpProperties member of the Properties member of the namespace.
        public let namespaceName: String
        /// Opportunistic filters to scope the results based on custom attributes. If there are instances that match both the filters specified in both the QueryParameters parameter and this parameter, all of these instances are returned. Otherwise, the filters are ignored, and only instances that match the filters that are specified in the QueryParameters parameter are returned.
        public let optionalParameters: [String: String]?
        /// Filters to scope the results based on custom attributes for the instance (for example, {version=v1, az=1a}). Only instances that match all the specified key-value pairs are returned.
        public let queryParameters: [String: String]?
        /// The name of the service that you specified when you registered the instance.
        public let serviceName: String

        public init(healthStatus: HealthStatusFilter? = nil, maxResults: Int? = nil, namespaceName: String, optionalParameters: [String: String]? = nil, queryParameters: [String: String]? = nil, serviceName: String) {
            self.healthStatus = healthStatus
            self.maxResults = maxResults
            self.namespaceName = namespaceName
            self.optionalParameters = optionalParameters
            self.queryParameters = queryParameters
            self.serviceName = serviceName
        }

        public func validate(name: String) throws {
            try self.validate(self.maxResults, name: "maxResults", parent: name, max: 1000)
            try self.validate(self.maxResults, name: "maxResults", parent: name, min: 1)
            try self.validate(self.namespaceName, name: "namespaceName", parent: name, max: 1024)
            try self.optionalParameters?.forEach {
                try validate($0.key, name: "optionalParameters.key", parent: name, max: 255)
                try validate($0.key, name: "optionalParameters.key", parent: name, pattern: "^[a-zA-Z0-9!-~]+$")
                try validate($0.value, name: "optionalParameters[\"\($0.key)\"]", parent: name, max: 1024)
                try validate($0.value, name: "optionalParameters[\"\($0.key)\"]", parent: name, pattern: "^([a-zA-Z0-9!-~][ \\ta-zA-Z0-9!-~]*){0,1}[a-zA-Z0-9!-~]{0,1}$")
            }
            try self.queryParameters?.forEach {
                try validate($0.key, name: "queryParameters.key", parent: name, max: 255)
                try validate($0.key, name: "queryParameters.key", parent: name, pattern: "^[a-zA-Z0-9!-~]+$")
                try validate($0.value, name: "queryParameters[\"\($0.key)\"]", parent: name, max: 1024)
                try validate($0.value, name: "queryParameters[\"\($0.key)\"]", parent: name, pattern: "^([a-zA-Z0-9!-~][ \\ta-zA-Z0-9!-~]*){0,1}[a-zA-Z0-9!-~]{0,1}$")
            }
            try self.validate(self.serviceName, name: "serviceName", parent: name, pattern: "^((?=^.{1,127}$)^([a-zA-Z0-9_][a-zA-Z0-9-_]{0,61}[a-zA-Z0-9_]|[a-zA-Z0-9])(\\.([a-zA-Z0-9_][a-zA-Z0-9-_]{0,61}[a-zA-Z0-9_]|[a-zA-Z0-9]))*$)|(^\\.$)$")
        }

        private enum CodingKeys: String, CodingKey {
            case healthStatus = "HealthStatus"
            case maxResults = "MaxResults"
            case namespaceName = "NamespaceName"
            case optionalParameters = "OptionalParameters"
            case queryParameters = "QueryParameters"
            case serviceName = "ServiceName"
        }
    }

    public struct DiscoverInstancesResponse: AWSDecodableShape {
        /// A complex type that contains one HttpInstanceSummary for each registered instance.
        public let instances: [HttpInstanceSummary]?

        public init(instances: [HttpInstanceSummary]? = nil) {
            self.instances = instances
        }

        private enum CodingKeys: String, CodingKey {
            case instances = "Instances"
        }
    }

    public struct DnsConfig: AWSEncodableShape & AWSDecodableShape {
        /// An array that contains one DnsRecord object for each Route 53 DNS record that you want Cloud Map to create when you register an instance.
        public let dnsRecords: [DnsRecord]
        /// The ID of the namespace to use for DNS configuration.
        public let namespaceId: String?
        /// The routing policy that you want to apply to all Route 53 DNS records that Cloud Map creates when you register an instance and specify this service.  If you want to use this service to register instances that create alias records, specify WEIGHTED for the routing policy.  You can specify the following values:  MULTIVALUE  If you define a health check for the service and the health check is healthy, Route 53 returns the applicable value for up to eight instances. For example, suppose that the service includes configurations for one A record and a health check. You use the service to register 10 instances. Route 53 responds to DNS queries with IP addresses for up to eight healthy instances. If fewer than eight instances are healthy, Route 53 responds to every DNS query with the IP addresses for all of the healthy instances. If you don't define a health check for the service, Route 53 assumes that all instances are healthy and returns the values for up to eight instances. For more information about the multivalue routing policy, see Multivalue Answer Routing in the Route 53 Developer Guide.  WEIGHTED  Route 53 returns the applicable value from one randomly selected instance from among the instances that you registered using the same service. Currently, all records have the same weight, so you can't route more or less traffic to any instances. For example, suppose that the service includes configurations for one A record and a health check. You use the service to register 10 instances. Route 53 responds to DNS queries with the IP address for one randomly selected instance from among the healthy instances. If no instances are healthy, Route 53 responds to DNS queries as if all of the instances were healthy. If you don't define a health check for the service, Route 53 assumes that all instances are healthy and returns the applicable value for one randomly selected instance. For more information about the weighted routing policy, see Weighted Routing in the Route 53 Developer Guide.
        public let routingPolicy: RoutingPolicy?

        public init(dnsRecords: [DnsRecord], namespaceId: String? = nil, routingPolicy: RoutingPolicy? = nil) {
            self.dnsRecords = dnsRecords
            self.namespaceId = namespaceId
            self.routingPolicy = routingPolicy
        }

        public func validate(name: String) throws {
            try self.dnsRecords.forEach {
                try $0.validate(name: "\(name).dnsRecords[]")
            }
            try self.validate(self.namespaceId, name: "namespaceId", parent: name, max: 64)
        }

        private enum CodingKeys: String, CodingKey {
            case dnsRecords = "DnsRecords"
            case namespaceId = "NamespaceId"
            case routingPolicy = "RoutingPolicy"
        }
    }

    public struct DnsConfigChange: AWSEncodableShape {
        /// An array that contains one DnsRecord object for each Route 53 record that you want Cloud Map to create when you register an instance.
        public let dnsRecords: [DnsRecord]

        public init(dnsRecords: [DnsRecord]) {
            self.dnsRecords = dnsRecords
        }

        public func validate(name: String) throws {
            try self.dnsRecords.forEach {
                try $0.validate(name: "\(name).dnsRecords[]")
            }
        }

        private enum CodingKeys: String, CodingKey {
            case dnsRecords = "DnsRecords"
        }
    }

    public struct DnsProperties: AWSDecodableShape {
        /// The ID for the Route 53 hosted zone that Cloud Map creates when you create a namespace.
        public let hostedZoneId: String?
        /// Start of Authority (SOA) record for the hosted zone.
        public let soa: SOA?

        public init(hostedZoneId: String? = nil, soa: SOA? = nil) {
            self.hostedZoneId = hostedZoneId
            self.soa = soa
        }

        private enum CodingKeys: String, CodingKey {
            case hostedZoneId = "HostedZoneId"
            case soa = "SOA"
        }
    }

    public struct DnsRecord: AWSEncodableShape & AWSDecodableShape {
        /// The amount of time, in seconds, that you want DNS resolvers to cache the settings for this record.  Alias records don't include a TTL because Route 53 uses the TTL for the Amazon Web Services resource that an alias record routes traffic to. If you include the AWS_ALIAS_DNS_NAME attribute when you submit a RegisterInstance request, the TTL value is ignored. Always specify a TTL for the service; you can use a service to register instances that create either alias or non-alias records.
        public let ttl: Int64
        /// The type of the resource, which indicates the type of value that Route 53 returns in response to DNS queries. You can specify values for Type in the following combinations:     A       AAAA       A and  AAAA       SRV       CNAME     If you want Cloud Map to create a Route 53 alias record when you register an instance, specify A or AAAA for Type. You specify other settings, such as the IP address for A and AAAA records, when you register an instance. For more information, see RegisterInstance. The following values are supported:  A  Route 53 returns the IP address of the resource in IPv4 format, such as 192.0.2.44.  AAAA  Route 53 returns the IP address of the resource in IPv6 format, such as 2001:0db8:85a3:0000:0000:abcd:0001:2345.  CNAME  Route 53 returns the domain name of the resource, such as www.example.com. Note the following:   You specify the domain name that you want to route traffic to when you register an instance. For more information, see Attributes in the topic RegisterInstance.   You must specify WEIGHTED for the value of RoutingPolicy.   You can't specify both CNAME for Type and settings for HealthCheckConfig. If you do, the request will fail with an InvalidInput error.    SRV  Route 53 returns the value for an SRV record. The value for an SRV record uses the following values:  priority weight port service-hostname  Note the following about the values:   The values of priority and weight are both set to 1 and can't be changed.    The value of port comes from the value that you specify for the AWS_INSTANCE_PORT attribute when you submit a RegisterInstance request.   The value of service-hostname is a concatenation of the following values:   The value that you specify for InstanceId when you register an instance.   The name of the service.   The name of the namespace.    For example, if the value of InstanceId is test, the name of the service is backend, and the name of the namespace is example.com, the value of service-hostname is the following:  test.backend.example.com    If you specify settings for an SRV record, note the following:   If you specify values for AWS_INSTANCE_IPV4, AWS_INSTANCE_IPV6, or both in the RegisterInstance request, Cloud Map automatically creates A and/or AAAA records that have the same name as the value of service-hostname in the SRV record. You can ignore these records.   If you're using a system that requires a specific SRV format, such as HAProxy, see the Name element in the documentation about CreateService for information about how to specify the correct name format.
        public let type: RecordType

        public init(ttl: Int64, type: RecordType) {
            self.ttl = ttl
            self.type = type
        }

        public func validate(name: String) throws {
            try self.validate(self.ttl, name: "ttl", parent: name, max: 2_147_483_647)
            try self.validate(self.ttl, name: "ttl", parent: name, min: 0)
        }

        private enum CodingKeys: String, CodingKey {
            case ttl = "TTL"
            case type = "Type"
        }
    }

    public struct GetInstanceRequest: AWSEncodableShape {
        /// The ID of the instance that you want to get information about.
        public let instanceId: String
        /// The ID of the service that the instance is associated with.
        public let serviceId: String

        public init(instanceId: String, serviceId: String) {
            self.instanceId = instanceId
            self.serviceId = serviceId
        }

        public func validate(name: String) throws {
            try self.validate(self.instanceId, name: "instanceId", parent: name, max: 64)
            try self.validate(self.serviceId, name: "serviceId", parent: name, max: 64)
        }

        private enum CodingKeys: String, CodingKey {
            case instanceId = "InstanceId"
            case serviceId = "ServiceId"
        }
    }

    public struct GetInstanceResponse: AWSDecodableShape {
        /// A complex type that contains information about a specified instance.
        public let instance: Instance?

        public init(instance: Instance? = nil) {
            self.instance = instance
        }

        private enum CodingKeys: String, CodingKey {
            case instance = "Instance"
        }
    }

    public struct GetInstancesHealthStatusRequest: AWSEncodableShape {
        /// An array that contains the IDs of all the instances that you want to get the health status for. If you omit Instances, Cloud Map returns the health status for all the instances that are associated with the specified service.  To get the IDs for the instances that you've registered by using a specified service, submit a ListInstances request.
        public let instances: [String]?
        /// The maximum number of instances that you want Cloud Map to return in the response to a GetInstancesHealthStatus request. If you don't specify a value for MaxResults, Cloud Map returns up to 100 instances.
        public let maxResults: Int?
        /// For the first GetInstancesHealthStatus request, omit this value. If more than MaxResults instances match the specified criteria, you can submit another GetInstancesHealthStatus request to get the next group of results. Specify the value of NextToken from the previous response in the next request.
        public let nextToken: String?
        /// The ID of the service that the instance is associated with.
        public let serviceId: String

        public init(instances: [String]? = nil, maxResults: Int? = nil, nextToken: String? = nil, serviceId: String) {
            self.instances = instances
            self.maxResults = maxResults
            self.nextToken = nextToken
            self.serviceId = serviceId
        }

        public func validate(name: String) throws {
            try self.instances?.forEach {
                try validate($0, name: "instances[]", parent: name, max: 64)
            }
            try self.validate(self.instances, name: "instances", parent: name, min: 1)
            try self.validate(self.maxResults, name: "maxResults", parent: name, max: 100)
            try self.validate(self.maxResults, name: "maxResults", parent: name, min: 1)
            try self.validate(self.nextToken, name: "nextToken", parent: name, max: 4096)
            try self.validate(self.serviceId, name: "serviceId", parent: name, max: 64)
        }

        private enum CodingKeys: String, CodingKey {
            case instances = "Instances"
            case maxResults = "MaxResults"
            case nextToken = "NextToken"
            case serviceId = "ServiceId"
        }
    }

    public struct GetInstancesHealthStatusResponse: AWSDecodableShape {
        /// If more than MaxResults instances match the specified criteria, you can submit another GetInstancesHealthStatus request to get the next group of results. Specify the value of NextToken from the previous response in the next request.
        public let nextToken: String?
        /// A complex type that contains the IDs and the health status of the instances that you specified in the GetInstancesHealthStatus request.
        public let status: [String: HealthStatus]?

        public init(nextToken: String? = nil, status: [String: HealthStatus]? = nil) {
            self.nextToken = nextToken
            self.status = status
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "NextToken"
            case status = "Status"
        }
    }

    public struct GetNamespaceRequest: AWSEncodableShape {
        /// The ID of the namespace that you want to get information about.
        public let id: String

        public init(id: String) {
            self.id = id
        }

        public func validate(name: String) throws {
            try self.validate(self.id, name: "id", parent: name, max: 64)
        }

        private enum CodingKeys: String, CodingKey {
            case id = "Id"
        }
    }

    public struct GetNamespaceResponse: AWSDecodableShape {
        /// A complex type that contains information about the specified namespace.
        public let namespace: Namespace?

        public init(namespace: Namespace? = nil) {
            self.namespace = namespace
        }

        private enum CodingKeys: String, CodingKey {
            case namespace = "Namespace"
        }
    }

    public struct GetOperationRequest: AWSEncodableShape {
        /// The ID of the operation that you want to get more information about.
        public let operationId: String

        public init(operationId: String) {
            self.operationId = operationId
        }

        public func validate(name: String) throws {
            try self.validate(self.operationId, name: "operationId", parent: name, max: 64)
        }

        private enum CodingKeys: String, CodingKey {
            case operationId = "OperationId"
        }
    }

    public struct GetOperationResponse: AWSDecodableShape {
        /// A complex type that contains information about the operation.
        public let operation: Operation?

        public init(operation: Operation? = nil) {
            self.operation = operation
        }

        private enum CodingKeys: String, CodingKey {
            case operation = "Operation"
        }
    }

    public struct GetServiceRequest: AWSEncodableShape {
        /// The ID of the service that you want to get settings for.
        public let id: String

        public init(id: String) {
            self.id = id
        }

        public func validate(name: String) throws {
            try self.validate(self.id, name: "id", parent: name, max: 64)
        }

        private enum CodingKeys: String, CodingKey {
            case id = "Id"
        }
    }

    public struct GetServiceResponse: AWSDecodableShape {
        /// A complex type that contains information about the service.
        public let service: Service?

        public init(service: Service? = nil) {
            self.service = service
        }

        private enum CodingKeys: String, CodingKey {
            case service = "Service"
        }
    }

    public struct HealthCheckConfig: AWSEncodableShape & AWSDecodableShape {
        /// The number of consecutive health checks that an endpoint must pass or fail for Route 53 to change the current status of the endpoint from unhealthy to healthy or the other way around. For more information, see How Route 53 Determines Whether an Endpoint Is Healthy in the Route 53 Developer Guide.
        public let failureThreshold: Int?
        /// The path that you want Route 53 to request when performing health checks. The path can be any value that your endpoint returns an HTTP status code of a 2xx or 3xx format for when the endpoint is healthy. An example file is /docs/route53-health-check.html. Route 53 automatically adds the DNS name for the service. If you don't specify a value for ResourcePath, the default value is /. If you specify TCP for Type, you must not specify a value for ResourcePath.
        public let resourcePath: String?
        /// The type of health check that you want to create, which indicates how Route 53 determines whether an endpoint is healthy.  You can't change the value of Type after you create a health check.  You can create the following types of health checks:    HTTP: Route 53 tries to establish a TCP connection. If successful, Route 53 submits an HTTP request and waits for an HTTP status code of 200 or greater and less than 400.    HTTPS: Route 53 tries to establish a TCP connection. If successful, Route 53 submits an HTTPS request and waits for an HTTP status code of 200 or greater and less than 400.  If you specify HTTPS for the value of Type, the endpoint must support TLS v1.0 or later.     TCP: Route 53 tries to establish a TCP connection. If you specify TCP for Type, don't specify a value for ResourcePath.   For more information, see How Route 53 Determines Whether an Endpoint Is Healthy in the Route 53 Developer Guide.
        public let type: HealthCheckType

        public init(failureThreshold: Int? = nil, resourcePath: String? = nil, type: HealthCheckType) {
            self.failureThreshold = failureThreshold
            self.resourcePath = resourcePath
            self.type = type
        }

        public func validate(name: String) throws {
            try self.validate(self.failureThreshold, name: "failureThreshold", parent: name, max: 10)
            try self.validate(self.failureThreshold, name: "failureThreshold", parent: name, min: 1)
            try self.validate(self.resourcePath, name: "resourcePath", parent: name, max: 255)
        }

        private enum CodingKeys: String, CodingKey {
            case failureThreshold = "FailureThreshold"
            case resourcePath = "ResourcePath"
            case type = "Type"
        }
    }

    public struct HealthCheckCustomConfig: AWSEncodableShape & AWSDecodableShape {
        ///  This parameter is no longer supported and is always set to 1. Cloud Map waits for approximately 30 seconds after receiving an UpdateInstanceCustomHealthStatus request before changing the status of the service instance.  The number of 30-second intervals that you want Cloud Map to wait after receiving an UpdateInstanceCustomHealthStatus request before it changes the health status of a service instance. Sending a second or subsequent UpdateInstanceCustomHealthStatus request with the same value before 30 seconds has passed doesn't accelerate the change. Cloud Map still waits 30 seconds after the first request to make the change.
        public let failureThreshold: Int?

        public init(failureThreshold: Int? = nil) {
            self.failureThreshold = failureThreshold
        }

        public func validate(name: String) throws {
            try self.validate(self.failureThreshold, name: "failureThreshold", parent: name, max: 10)
            try self.validate(self.failureThreshold, name: "failureThreshold", parent: name, min: 1)
        }

        private enum CodingKeys: String, CodingKey {
            case failureThreshold = "FailureThreshold"
        }
    }

    public struct HttpInstanceSummary: AWSDecodableShape {
        /// If you included any attributes when you registered the instance, the values of those attributes.
        public let attributes: [String: String]?
        /// If you configured health checking in the service, the current health status of the service instance.
        public let healthStatus: HealthStatus?
        /// The ID of an instance that matches the values that you specified in the request.
        public let instanceId: String?
        ///      The HttpName name of the namespace. It's found in the HttpProperties member of the Properties member of the namespace.
        public let namespaceName: String?
        /// The name of the service that you specified when you registered the instance.
        public let serviceName: String?

        public init(attributes: [String: String]? = nil, healthStatus: HealthStatus? = nil, instanceId: String? = nil, namespaceName: String? = nil, serviceName: String? = nil) {
            self.attributes = attributes
            self.healthStatus = healthStatus
            self.instanceId = instanceId
            self.namespaceName = namespaceName
            self.serviceName = serviceName
        }

        private enum CodingKeys: String, CodingKey {
            case attributes = "Attributes"
            case healthStatus = "HealthStatus"
            case instanceId = "InstanceId"
            case namespaceName = "NamespaceName"
            case serviceName = "ServiceName"
        }
    }

    public struct HttpNamespaceChange: AWSEncodableShape {
        /// An updated description for the HTTP namespace.
        public let description: String

        public init(description: String) {
            self.description = description
        }

        public func validate(name: String) throws {
            try self.validate(self.description, name: "description", parent: name, max: 1024)
        }

        private enum CodingKeys: String, CodingKey {
            case description = "Description"
        }
    }

    public struct HttpProperties: AWSDecodableShape {
        /// The name of an HTTP namespace.
        public let httpName: String?

        public init(httpName: String? = nil) {
            self.httpName = httpName
        }

        private enum CodingKeys: String, CodingKey {
            case httpName = "HttpName"
        }
    }

    public struct Instance: AWSDecodableShape {
        /// A string map that contains the following information for the service that you specify in ServiceId:   The attributes that apply to the records that are defined in the service.    For each attribute, the applicable value.   Supported attribute keys include the following:  AWS_ALIAS_DNS_NAME  If you want Cloud Map to create a Route 53 alias record that routes traffic to an Elastic Load Balancing load balancer, specify the DNS name that's associated with the load balancer. For information about how to get the DNS name, see AliasTarget->DNSName in the Route 53 API Reference. Note the following:   The configuration for the service that's specified by ServiceId must include settings for an A record, an AAAA record, or both.   In the service that's specified by ServiceId, the value of RoutingPolicy must be WEIGHTED.   If the service that's specified by ServiceId includes HealthCheckConfig settings, Cloud Map creates the health check, but it won't associate the health check with the alias record.   Auto naming currently doesn't support creating alias records that route traffic to Amazon Web Services resources other than ELB load balancers.   If you specify a value for AWS_ALIAS_DNS_NAME, don't specify values for any of the AWS_INSTANCE attributes.    AWS_EC2_INSTANCE_ID   HTTP namespaces only. The Amazon EC2 instance ID for the instance. The AWS_INSTANCE_IPV4 attribute contains the primary private IPv4 address.  AWS_INIT_HEALTH_STATUS  If the service configuration includes HealthCheckCustomConfig, you can optionally use AWS_INIT_HEALTH_STATUS to specify the initial status of the custom health check, HEALTHY or UNHEALTHY. If you don't specify a value for AWS_INIT_HEALTH_STATUS, the initial status is HEALTHY.  AWS_INSTANCE_CNAME  If the service configuration includes a CNAME record, the domain name that you want Route 53 to return in response to DNS queries (for example, example.com). This value is required if the service specified by ServiceId includes settings for an CNAME record.  AWS_INSTANCE_IPV4  If the service configuration includes an A record, the IPv4 address that you want Route 53 to return in response to DNS queries (for example, 192.0.2.44). This value is required if the service specified by ServiceId includes settings for an A record. If the service includes settings for an SRV record, you must specify a value for AWS_INSTANCE_IPV4, AWS_INSTANCE_IPV6, or both.  AWS_INSTANCE_IPV6  If the service configuration includes an AAAA record, the IPv6 address that you want Route 53 to return in response to DNS queries (for example, 2001:0db8:85a3:0000:0000:abcd:0001:2345). This value is required if the service specified by ServiceId includes settings for an AAAA record. If the service includes settings for an SRV record, you must specify a value for AWS_INSTANCE_IPV4, AWS_INSTANCE_IPV6, or both.  AWS_INSTANCE_PORT  If the service includes an SRV record, the value that you want Route 53 to return for the port. If the service includes HealthCheckConfig, the port on the endpoint that you want Route 53 to send requests to.  This value is required if you specified settings for an SRV record or a Route 53 health check when you created the service.
        public let attributes: [String: String]?
        /// A unique string that identifies the request and that allows failed RegisterInstance requests to be retried without the risk of executing the operation twice. You must use a unique CreatorRequestId string every time you submit a RegisterInstance request if you're registering additional instances for the same namespace and service. CreatorRequestId can be any unique string (for example, a date/time stamp).
        public let creatorRequestId: String?
        /// An identifier that you want to associate with the instance. Note the following:   If the service that's specified by ServiceId includes settings for an SRV record, the value of InstanceId is automatically included as part of the value for the SRV record. For more information, see DnsRecord > Type.   You can use this value to update an existing instance.   To register a new instance, you must specify a value that's unique among instances that you register by using the same service.    If you specify an existing InstanceId and ServiceId, Cloud Map updates the existing DNS records. If there's also an existing health check, Cloud Map deletes the old health check and creates a new one.   The health check isn't deleted immediately, so it will still appear for a while if you submit a ListHealthChecks request, for example.
        public let id: String

        public init(attributes: [String: String]? = nil, creatorRequestId: String? = nil, id: String) {
            self.attributes = attributes
            self.creatorRequestId = creatorRequestId
            self.id = id
        }

        private enum CodingKeys: String, CodingKey {
            case attributes = "Attributes"
            case creatorRequestId = "CreatorRequestId"
            case id = "Id"
        }
    }

    public struct InstanceSummary: AWSDecodableShape {
        /// A string map that contains the following information:   The attributes that are associated with the instance.    For each attribute, the applicable value.   Supported attribute keys include the following:  AWS_ALIAS_DNS_NAME  For an alias record that routes traffic to an Elastic Load Balancing load balancer, the DNS name that's associated with the load balancer.   AWS_EC2_INSTANCE_ID (HTTP namespaces only)  The Amazon EC2 instance ID for the instance. When the AWS_EC2_INSTANCE_ID attribute is specified, then the AWS_INSTANCE_IPV4 attribute contains the primary private IPv4 address.  AWS_INIT_HEALTH_STATUS  If the service configuration includes HealthCheckCustomConfig, you can optionally use AWS_INIT_HEALTH_STATUS to specify the initial status of the custom health check, HEALTHY or UNHEALTHY. If you don't specify a value for AWS_INIT_HEALTH_STATUS, the initial status is HEALTHY.  AWS_INSTANCE_CNAME  For a CNAME record, the domain name that Route 53 returns in response to DNS queries (for example, example.com).  AWS_INSTANCE_IPV4  For an A record, the IPv4 address that Route 53 returns in response to DNS queries (for example, 192.0.2.44).  AWS_INSTANCE_IPV6  For an AAAA record, the IPv6 address that Route 53 returns in response to DNS queries (for example, 2001:0db8:85a3:0000:0000:abcd:0001:2345).  AWS_INSTANCE_PORT  For an SRV record, the value that Route 53 returns for the port. In addition, if the service includes HealthCheckConfig, the port on the endpoint that Route 53 sends requests to.
        public let attributes: [String: String]?
        /// The ID for an instance that you created by using a specified service.
        public let id: String?

        public init(attributes: [String: String]? = nil, id: String? = nil) {
            self.attributes = attributes
            self.id = id
        }

        private enum CodingKeys: String, CodingKey {
            case attributes = "Attributes"
            case id = "Id"
        }
    }

    public struct ListInstancesRequest: AWSEncodableShape {
        /// The maximum number of instances that you want Cloud Map to return in the response to a ListInstances request. If you don't specify a value for MaxResults, Cloud Map returns up to 100 instances.
        public let maxResults: Int?
        /// For the first ListInstances request, omit this value. If more than MaxResults instances match the specified criteria, you can submit another ListInstances request to get the next group of results. Specify the value of NextToken from the previous response in the next request.
        public let nextToken: String?
        /// The ID of the service that you want to list instances for.
        public let serviceId: String

        public init(maxResults: Int? = nil, nextToken: String? = nil, serviceId: String) {
            self.maxResults = maxResults
            self.nextToken = nextToken
            self.serviceId = serviceId
        }

        public func validate(name: String) throws {
            try self.validate(self.maxResults, name: "maxResults", parent: name, max: 100)
            try self.validate(self.maxResults, name: "maxResults", parent: name, min: 1)
            try self.validate(self.nextToken, name: "nextToken", parent: name, max: 4096)
            try self.validate(self.serviceId, name: "serviceId", parent: name, max: 64)
        }

        private enum CodingKeys: String, CodingKey {
            case maxResults = "MaxResults"
            case nextToken = "NextToken"
            case serviceId = "ServiceId"
        }
    }

    public struct ListInstancesResponse: AWSDecodableShape {
        /// Summary information about the instances that are associated with the specified service.
        public let instances: [InstanceSummary]?
        /// If more than MaxResults instances match the specified criteria, you can submit another ListInstances request to get the next group of results. Specify the value of NextToken from the previous response in the next request.
        public let nextToken: String?

        public init(instances: [InstanceSummary]? = nil, nextToken: String? = nil) {
            self.instances = instances
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case instances = "Instances"
            case nextToken = "NextToken"
        }
    }

    public struct ListNamespacesRequest: AWSEncodableShape {
        /// A complex type that contains specifications for the namespaces that you want to list. If you specify more than one filter, a namespace must match all filters to be returned by ListNamespaces.
        public let filters: [NamespaceFilter]?
        /// The maximum number of namespaces that you want Cloud Map to return in the response to a ListNamespaces request. If you don't specify a value for MaxResults, Cloud Map returns up to 100 namespaces.
        public let maxResults: Int?
        /// For the first ListNamespaces request, omit this value. If the response contains NextToken, submit another ListNamespaces request to get the next group of results. Specify the value of NextToken from the previous response in the next request.  Cloud Map gets MaxResults namespaces and then filters them based on the specified criteria. It's possible that no namespaces in the first MaxResults namespaces matched the specified criteria but that subsequent groups of MaxResults namespaces do contain namespaces that match the criteria.
        public let nextToken: String?

        public init(filters: [NamespaceFilter]? = nil, maxResults: Int? = nil, nextToken: String? = nil) {
            self.filters = filters
            self.maxResults = maxResults
            self.nextToken = nextToken
        }

        public func validate(name: String) throws {
            try self.filters?.forEach {
                try $0.validate(name: "\(name).filters[]")
            }
            try self.validate(self.maxResults, name: "maxResults", parent: name, max: 100)
            try self.validate(self.maxResults, name: "maxResults", parent: name, min: 1)
            try self.validate(self.nextToken, name: "nextToken", parent: name, max: 4096)
        }

        private enum CodingKeys: String, CodingKey {
            case filters = "Filters"
            case maxResults = "MaxResults"
            case nextToken = "NextToken"
        }
    }

    public struct ListNamespacesResponse: AWSDecodableShape {
        /// An array that contains one NamespaceSummary object for each namespace that matches the specified filter criteria.
        public let namespaces: [NamespaceSummary]?
        /// If the response contains NextToken, submit another ListNamespaces request to get the next group of results. Specify the value of NextToken from the previous response in the next request.  Cloud Map gets MaxResults namespaces and then filters them based on the specified criteria. It's possible that no namespaces in the first MaxResults namespaces matched the specified criteria but that subsequent groups of MaxResults namespaces do contain namespaces that match the criteria.
        public let nextToken: String?

        public init(namespaces: [NamespaceSummary]? = nil, nextToken: String? = nil) {
            self.namespaces = namespaces
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case namespaces = "Namespaces"
            case nextToken = "NextToken"
        }
    }

    public struct ListOperationsRequest: AWSEncodableShape {
        /// A complex type that contains specifications for the operations that you want to list, for example, operations that you started between a specified start date and end date. If you specify more than one filter, an operation must match all filters to be returned by ListOperations.
        public let filters: [OperationFilter]?
        /// The maximum number of items that you want Cloud Map to return in the response to a ListOperations request. If you don't specify a value for MaxResults, Cloud Map returns up to 100 operations.
        public let maxResults: Int?
        /// For the first ListOperations request, omit this value. If the response contains NextToken, submit another ListOperations request to get the next group of results. Specify the value of NextToken from the previous response in the next request.  Cloud Map gets MaxResults operations and then filters them based on the specified criteria. It's possible that no operations in the first MaxResults operations matched the specified criteria but that subsequent groups of MaxResults operations do contain operations that match the criteria.
        public let nextToken: String?

        public init(filters: [OperationFilter]? = nil, maxResults: Int? = nil, nextToken: String? = nil) {
            self.filters = filters
            self.maxResults = maxResults
            self.nextToken = nextToken
        }

        public func validate(name: String) throws {
            try self.filters?.forEach {
                try $0.validate(name: "\(name).filters[]")
            }
            try self.validate(self.maxResults, name: "maxResults", parent: name, max: 100)
            try self.validate(self.maxResults, name: "maxResults", parent: name, min: 1)
            try self.validate(self.nextToken, name: "nextToken", parent: name, max: 4096)
        }

        private enum CodingKeys: String, CodingKey {
            case filters = "Filters"
            case maxResults = "MaxResults"
            case nextToken = "NextToken"
        }
    }

    public struct ListOperationsResponse: AWSDecodableShape {
        /// If the response contains NextToken, submit another ListOperations request to get the next group of results. Specify the value of NextToken from the previous response in the next request.  Cloud Map gets MaxResults operations and then filters them based on the specified criteria. It's possible that no operations in the first MaxResults operations matched the specified criteria but that subsequent groups of MaxResults operations do contain operations that match the criteria.
        public let nextToken: String?
        /// Summary information about the operations that match the specified criteria.
        public let operations: [OperationSummary]?

        public init(nextToken: String? = nil, operations: [OperationSummary]? = nil) {
            self.nextToken = nextToken
            self.operations = operations
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "NextToken"
            case operations = "Operations"
        }
    }

    public struct ListServicesRequest: AWSEncodableShape {
        /// A complex type that contains specifications for the namespaces that you want to list services for.  If you specify more than one filter, an operation must match all filters to be returned by ListServices.
        public let filters: [ServiceFilter]?
        /// The maximum number of services that you want Cloud Map to return in the response to a ListServices request. If you don't specify a value for MaxResults, Cloud Map returns up to 100 services.
        public let maxResults: Int?
        /// For the first ListServices request, omit this value. If the response contains NextToken, submit another ListServices request to get the next group of results. Specify the value of NextToken from the previous response in the next request.  Cloud Map gets MaxResults services and then filters them based on the specified criteria. It's possible that no services in the first MaxResults services matched the specified criteria but that subsequent groups of MaxResults services do contain services that match the criteria.
        public let nextToken: String?

        public init(filters: [ServiceFilter]? = nil, maxResults: Int? = nil, nextToken: String? = nil) {
            self.filters = filters
            self.maxResults = maxResults
            self.nextToken = nextToken
        }

        public func validate(name: String) throws {
            try self.filters?.forEach {
                try $0.validate(name: "\(name).filters[]")
            }
            try self.validate(self.maxResults, name: "maxResults", parent: name, max: 100)
            try self.validate(self.maxResults, name: "maxResults", parent: name, min: 1)
            try self.validate(self.nextToken, name: "nextToken", parent: name, max: 4096)
        }

        private enum CodingKeys: String, CodingKey {
            case filters = "Filters"
            case maxResults = "MaxResults"
            case nextToken = "NextToken"
        }
    }

    public struct ListServicesResponse: AWSDecodableShape {
        /// If the response contains NextToken, submit another ListServices request to get the next group of results. Specify the value of NextToken from the previous response in the next request.  Cloud Map gets MaxResults services and then filters them based on the specified criteria. It's possible that no services in the first MaxResults services matched the specified criteria but that subsequent groups of MaxResults services do contain services that match the criteria.
        public let nextToken: String?
        /// An array that contains one ServiceSummary object for each service that matches the specified filter criteria.
        public let services: [ServiceSummary]?

        public init(nextToken: String? = nil, services: [ServiceSummary]? = nil) {
            self.nextToken = nextToken
            self.services = services
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "NextToken"
            case services = "Services"
        }
    }

    public struct ListTagsForResourceRequest: AWSEncodableShape {
        /// The Amazon Resource Name (ARN) of the resource that you want to retrieve tags for.
        public let resourceARN: String

        public init(resourceARN: String) {
            self.resourceARN = resourceARN
        }

        public func validate(name: String) throws {
            try self.validate(self.resourceARN, name: "resourceARN", parent: name, max: 1011)
            try self.validate(self.resourceARN, name: "resourceARN", parent: name, min: 1)
        }

        private enum CodingKeys: String, CodingKey {
            case resourceARN = "ResourceARN"
        }
    }

    public struct ListTagsForResourceResponse: AWSDecodableShape {
        /// The tags that are assigned to the resource.
        public let tags: [Tag]?

        public init(tags: [Tag]? = nil) {
            self.tags = tags
        }

        private enum CodingKeys: String, CodingKey {
            case tags = "Tags"
        }
    }

    public struct Namespace: AWSDecodableShape {
        /// The Amazon Resource Name (ARN) that Cloud Map assigns to the namespace when you create it.
        public let arn: String?
        /// The date that the namespace was created, in Unix date/time format and Coordinated Universal Time (UTC). The value of CreateDate is accurate to milliseconds. For example, the value 1516925490.087 represents Friday, January 26, 2018 12:11:30.087 AM.
        public let createDate: Date?
        /// A unique string that identifies the request and that allows failed requests to be retried without the risk of running an operation twice.
        public let creatorRequestId: String?
        /// The description that you specify for the namespace when you create it.
        public let description: String?
        /// The ID of a namespace.
        public let id: String?
        /// The name of the namespace, such as example.com.
        public let name: String?
        /// A complex type that contains information that's specific to the type of the namespace.
        public let properties: NamespaceProperties?
        /// The number of services that are associated with the namespace.
        public let serviceCount: Int?
        /// The type of the namespace. The methods for discovering instances depends on the value that you specify:  HTTP  Instances can be discovered only programmatically, using the Cloud Map DiscoverInstances API.  DNS_PUBLIC  Instances can be discovered using public DNS queries and using the DiscoverInstances API.  DNS_PRIVATE  Instances can be discovered using DNS queries in VPCs and using the DiscoverInstances API.
        public let type: NamespaceType?

        public init(arn: String? = nil, createDate: Date? = nil, creatorRequestId: String? = nil, description: String? = nil, id: String? = nil, name: String? = nil, properties: NamespaceProperties? = nil, serviceCount: Int? = nil, type: NamespaceType? = nil) {
            self.arn = arn
            self.createDate = createDate
            self.creatorRequestId = creatorRequestId
            self.description = description
            self.id = id
            self.name = name
            self.properties = properties
            self.serviceCount = serviceCount
            self.type = type
        }

        private enum CodingKeys: String, CodingKey {
            case arn = "Arn"
            case createDate = "CreateDate"
            case creatorRequestId = "CreatorRequestId"
            case description = "Description"
            case id = "Id"
            case name = "Name"
            case properties = "Properties"
            case serviceCount = "ServiceCount"
            case type = "Type"
        }
    }

    public struct NamespaceFilter: AWSEncodableShape {
        /// The operator that you want to use to determine whether ListNamespaces returns a namespace. Valid values for condition include:  EQ  When you specify EQ for the condition, you can choose to list only public namespaces or private namespaces, but not both. EQ is the default condition and can be omitted.  IN  When you specify IN for the condition, you can choose to list public namespaces, private namespaces, or both.   BETWEEN  Not applicable
        public let condition: FilterCondition?
        /// Specify TYPE.
        public let name: NamespaceFilterName
        /// If you specify EQ for Condition, specify either DNS_PUBLIC or DNS_PRIVATE. If you specify IN for Condition, you can specify DNS_PUBLIC, DNS_PRIVATE, or both.
        public let values: [String]

        public init(condition: FilterCondition? = nil, name: NamespaceFilterName, values: [String]) {
            self.condition = condition
            self.name = name
            self.values = values
        }

        public func validate(name: String) throws {
            try self.values.forEach {
                try validate($0, name: "values[]", parent: name, max: 255)
                try validate($0, name: "values[]", parent: name, min: 1)
            }
        }

        private enum CodingKeys: String, CodingKey {
            case condition = "Condition"
            case name = "Name"
            case values = "Values"
        }
    }

    public struct NamespaceProperties: AWSDecodableShape {
        /// A complex type that contains the ID for the Route 53 hosted zone that Cloud Map creates when you create a namespace.
        public let dnsProperties: DnsProperties?
        /// A complex type that contains the name of an HTTP namespace.
        public let httpProperties: HttpProperties?

        public init(dnsProperties: DnsProperties? = nil, httpProperties: HttpProperties? = nil) {
            self.dnsProperties = dnsProperties
            self.httpProperties = httpProperties
        }

        private enum CodingKeys: String, CodingKey {
            case dnsProperties = "DnsProperties"
            case httpProperties = "HttpProperties"
        }
    }

    public struct NamespaceSummary: AWSDecodableShape {
        /// The Amazon Resource Name (ARN) that Cloud Map assigns to the namespace when you create it.
        public let arn: String?
        /// The date and time that the namespace was created.
        public let createDate: Date?
        /// A description for the namespace.
        public let description: String?
        /// The ID of the namespace.
        public let id: String?
        /// The name of the namespace. When you create a namespace, Cloud Map automatically creates a Route 53 hosted zone that has the same name as the namespace.
        public let name: String?
        /// The properties of the namespace.
        public let properties: NamespaceProperties?
        /// The number of services that were created using the namespace.
        public let serviceCount: Int?
        /// The type of the namespace, either public or private.
        public let type: NamespaceType?

        public init(arn: String? = nil, createDate: Date? = nil, description: String? = nil, id: String? = nil, name: String? = nil, properties: NamespaceProperties? = nil, serviceCount: Int? = nil, type: NamespaceType? = nil) {
            self.arn = arn
            self.createDate = createDate
            self.description = description
            self.id = id
            self.name = name
            self.properties = properties
            self.serviceCount = serviceCount
            self.type = type
        }

        private enum CodingKeys: String, CodingKey {
            case arn = "Arn"
            case createDate = "CreateDate"
            case description = "Description"
            case id = "Id"
            case name = "Name"
            case properties = "Properties"
            case serviceCount = "ServiceCount"
            case type = "Type"
        }
    }

    public struct Operation: AWSDecodableShape {
        /// The date and time that the request was submitted, in Unix date/time format and Coordinated Universal Time (UTC). The value of CreateDate is accurate to milliseconds. For example, the value 1516925490.087 represents Friday, January 26, 2018 12:11:30.087 AM.
        public let createDate: Date?
        /// The code associated with ErrorMessage. Values for ErrorCode include the following:    ACCESS_DENIED     CANNOT_CREATE_HOSTED_ZONE     EXPIRED_TOKEN     HOSTED_ZONE_NOT_FOUND     INTERNAL_FAILURE     INVALID_CHANGE_BATCH     THROTTLED_REQUEST
        public let errorCode: String?
        /// If the value of Status is FAIL, the reason that the operation failed.
        public let errorMessage: String?
        /// The ID of the operation that you want to get information about.
        public let id: String?
        /// The status of the operation. Values include the following:  SUBMITTED  This is the initial state that occurs immediately after you submit a request.  PENDING  Cloud Map is performing the operation.  SUCCESS  The operation succeeded.  FAIL  The operation failed. For the failure reason, see ErrorMessage.
        public let status: OperationStatus?
        /// The name of the target entity that's associated with the operation:  NAMESPACE  The namespace ID is returned in the ResourceId property.  SERVICE  The service ID is returned in the ResourceId property.  INSTANCE  The instance ID is returned in the ResourceId property.
        public let targets: [OperationTargetType: String]?
        /// The name of the operation that's associated with the specified ID.
        public let type: OperationType?
        /// The date and time that the value of Status changed to the current value, in Unix date/time format and Coordinated Universal Time (UTC). The value of UpdateDate is accurate to milliseconds. For example, the value 1516925490.087 represents Friday, January 26, 2018 12:11:30.087 AM.
        public let updateDate: Date?

        public init(createDate: Date? = nil, errorCode: String? = nil, errorMessage: String? = nil, id: String? = nil, status: OperationStatus? = nil, targets: [OperationTargetType: String]? = nil, type: OperationType? = nil, updateDate: Date? = nil) {
            self.createDate = createDate
            self.errorCode = errorCode
            self.errorMessage = errorMessage
            self.id = id
            self.status = status
            self.targets = targets
            self.type = type
            self.updateDate = updateDate
        }

        private enum CodingKeys: String, CodingKey {
            case createDate = "CreateDate"
            case errorCode = "ErrorCode"
            case errorMessage = "ErrorMessage"
            case id = "Id"
            case status = "Status"
            case targets = "Targets"
            case type = "Type"
            case updateDate = "UpdateDate"
        }
    }

    public struct OperationFilter: AWSEncodableShape {
        /// The operator that you want to use to determine whether an operation matches the specified value. Valid values for condition include:    EQ: When you specify EQ for the condition, you can specify only one value. EQ is supported for NAMESPACE_ID, SERVICE_ID, STATUS, and TYPE. EQ is the default condition and can be omitted.    IN: When you specify IN for the condition, you can specify a list of one or more values. IN is supported for STATUS and TYPE. An operation must match one of the specified values to be returned in the response.    BETWEEN: Specify a start date and an end date in Unix date/time format and Coordinated Universal Time (UTC). The start date must be the first value. BETWEEN is supported for UPDATE_DATE.
        public let condition: FilterCondition?
        /// Specify the operations that you want to get:    NAMESPACE_ID: Gets operations related to specified namespaces.    SERVICE_ID: Gets operations related to specified services.    STATUS: Gets operations based on the status of the operations: SUBMITTED, PENDING, SUCCEED, or FAIL.    TYPE: Gets specified types of operation.    UPDATE_DATE: Gets operations that changed status during a specified date/time range.
        public let name: OperationFilterName
        /// Specify values that are applicable to the value that you specify for Name:     NAMESPACE_ID: Specify one namespace ID.    SERVICE_ID: Specify one service ID.    STATUS: Specify one or more statuses: SUBMITTED, PENDING, SUCCEED, or FAIL.    TYPE: Specify one or more of the following types: CREATE_NAMESPACE, DELETE_NAMESPACE, UPDATE_SERVICE, REGISTER_INSTANCE, or DEREGISTER_INSTANCE.    UPDATE_DATE: Specify a start date and an end date in Unix date/time format and Coordinated Universal Time (UTC). The start date must be the first value.
        public let values: [String]

        public init(condition: FilterCondition? = nil, name: OperationFilterName, values: [String]) {
            self.condition = condition
            self.name = name
            self.values = values
        }

        public func validate(name: String) throws {
            try self.values.forEach {
                try validate($0, name: "values[]", parent: name, max: 255)
                try validate($0, name: "values[]", parent: name, min: 1)
            }
        }

        private enum CodingKeys: String, CodingKey {
            case condition = "Condition"
            case name = "Name"
            case values = "Values"
        }
    }

    public struct OperationSummary: AWSDecodableShape {
        /// The ID for an operation.
        public let id: String?
        /// The status of the operation. Values include the following:    SUBMITTED: This is the initial state immediately after you submit a request.    PENDING: Cloud Map is performing the operation.    SUCCESS: The operation succeeded.    FAIL: The operation failed. For the failure reason, see ErrorMessage.
        public let status: OperationStatus?

        public init(id: String? = nil, status: OperationStatus? = nil) {
            self.id = id
            self.status = status
        }

        private enum CodingKeys: String, CodingKey {
            case id = "Id"
            case status = "Status"
        }
    }

    public struct PrivateDnsNamespaceChange: AWSEncodableShape {
        /// An updated description for the private DNS namespace.
        public let description: String?
        /// Properties to be updated in the private DNS namespace.
        public let properties: PrivateDnsNamespacePropertiesChange?

        public init(description: String? = nil, properties: PrivateDnsNamespacePropertiesChange? = nil) {
            self.description = description
            self.properties = properties
        }

        public func validate(name: String) throws {
            try self.validate(self.description, name: "description", parent: name, max: 1024)
            try self.properties?.validate(name: "\(name).properties")
        }

        private enum CodingKeys: String, CodingKey {
            case description = "Description"
            case properties = "Properties"
        }
    }

    public struct PrivateDnsNamespaceProperties: AWSEncodableShape {
        /// DNS properties for the private DNS namespace.
        public let dnsProperties: PrivateDnsPropertiesMutable

        public init(dnsProperties: PrivateDnsPropertiesMutable) {
            self.dnsProperties = dnsProperties
        }

        public func validate(name: String) throws {
            try self.dnsProperties.validate(name: "\(name).dnsProperties")
        }

        private enum CodingKeys: String, CodingKey {
            case dnsProperties = "DnsProperties"
        }
    }

    public struct PrivateDnsNamespacePropertiesChange: AWSEncodableShape {
        /// Updated DNS properties for the private DNS namespace.
        public let dnsProperties: PrivateDnsPropertiesMutableChange

        public init(dnsProperties: PrivateDnsPropertiesMutableChange) {
            self.dnsProperties = dnsProperties
        }

        public func validate(name: String) throws {
            try self.dnsProperties.validate(name: "\(name).dnsProperties")
        }

        private enum CodingKeys: String, CodingKey {
            case dnsProperties = "DnsProperties"
        }
    }

    public struct PrivateDnsPropertiesMutable: AWSEncodableShape {
        /// Fields for the Start of Authority (SOA) record for the hosted zone for the private DNS namespace.
        public let soa: SOA

        public init(soa: SOA) {
            self.soa = soa
        }

        public func validate(name: String) throws {
            try self.soa.validate(name: "\(name).soa")
        }

        private enum CodingKeys: String, CodingKey {
            case soa = "SOA"
        }
    }

    public struct PrivateDnsPropertiesMutableChange: AWSEncodableShape {
        /// Updated fields for the Start of Authority (SOA) record for the hosted zone for the private DNS namespace.
        public let soa: SOAChange

        public init(soa: SOAChange) {
            self.soa = soa
        }

        public func validate(name: String) throws {
            try self.soa.validate(name: "\(name).soa")
        }

        private enum CodingKeys: String, CodingKey {
            case soa = "SOA"
        }
    }

    public struct PublicDnsNamespaceChange: AWSEncodableShape {
        /// An updated description for the public DNS namespace.
        public let description: String?
        /// Properties to be updated in the public DNS namespace.
        public let properties: PublicDnsNamespacePropertiesChange?

        public init(description: String? = nil, properties: PublicDnsNamespacePropertiesChange? = nil) {
            self.description = description
            self.properties = properties
        }

        public func validate(name: String) throws {
            try self.validate(self.description, name: "description", parent: name, max: 1024)
            try self.properties?.validate(name: "\(name).properties")
        }

        private enum CodingKeys: String, CodingKey {
            case description = "Description"
            case properties = "Properties"
        }
    }

    public struct PublicDnsNamespaceProperties: AWSEncodableShape {
        /// DNS properties for the public DNS namespace.
        public let dnsProperties: PublicDnsPropertiesMutable

        public init(dnsProperties: PublicDnsPropertiesMutable) {
            self.dnsProperties = dnsProperties
        }

        public func validate(name: String) throws {
            try self.dnsProperties.validate(name: "\(name).dnsProperties")
        }

        private enum CodingKeys: String, CodingKey {
            case dnsProperties = "DnsProperties"
        }
    }

    public struct PublicDnsNamespacePropertiesChange: AWSEncodableShape {
        /// Updated DNS properties for the hosted zone for the public DNS namespace.
        public let dnsProperties: PublicDnsPropertiesMutableChange

        public init(dnsProperties: PublicDnsPropertiesMutableChange) {
            self.dnsProperties = dnsProperties
        }

        public func validate(name: String) throws {
            try self.dnsProperties.validate(name: "\(name).dnsProperties")
        }

        private enum CodingKeys: String, CodingKey {
            case dnsProperties = "DnsProperties"
        }
    }

    public struct PublicDnsPropertiesMutable: AWSEncodableShape {
        /// Start of Authority (SOA) record for the hosted zone for the public DNS namespace.
        public let soa: SOA

        public init(soa: SOA) {
            self.soa = soa
        }

        public func validate(name: String) throws {
            try self.soa.validate(name: "\(name).soa")
        }

        private enum CodingKeys: String, CodingKey {
            case soa = "SOA"
        }
    }

    public struct PublicDnsPropertiesMutableChange: AWSEncodableShape {
        /// Updated fields for the Start of Authority (SOA) record for the hosted zone for the public DNS namespace.
        public let soa: SOAChange

        public init(soa: SOAChange) {
            self.soa = soa
        }

        public func validate(name: String) throws {
            try self.soa.validate(name: "\(name).soa")
        }

        private enum CodingKeys: String, CodingKey {
            case soa = "SOA"
        }
    }

    public struct RegisterInstanceRequest: AWSEncodableShape {
        /// A string map that contains the following information for the service that you specify in ServiceId:   The attributes that apply to the records that are defined in the service.    For each attribute, the applicable value.   Supported attribute keys include the following:  AWS_ALIAS_DNS_NAME  If you want Cloud Map to create an Amazon Route 53 alias record that routes traffic to an Elastic Load Balancing load balancer, specify the DNS name that's associated with the load balancer. For information about how to get the DNS name, see "DNSName" in the topic AliasTarget in the Route 53 API Reference. Note the following:   The configuration for the service that's specified by ServiceId must include settings for an A record, an AAAA record, or both.   In the service that's specified by ServiceId, the value of RoutingPolicy must be WEIGHTED.   If the service that's specified by ServiceId includes HealthCheckConfig settings, Cloud Map will create the Route 53 health check, but it doesn't associate the health check with the alias record.   Auto naming currently doesn't support creating alias records that route traffic to Amazon Web Services resources other than Elastic Load Balancing load balancers.   If you specify a value for AWS_ALIAS_DNS_NAME, don't specify values for any of the AWS_INSTANCE attributes.    AWS_EC2_INSTANCE_ID   HTTP namespaces only. The Amazon EC2 instance ID for the instance. If the AWS_EC2_INSTANCE_ID attribute is specified, then the only other attribute that can be specified is AWS_INIT_HEALTH_STATUS. When the AWS_EC2_INSTANCE_ID attribute is specified, then the AWS_INSTANCE_IPV4 attribute will be filled out with the primary private IPv4 address.  AWS_INIT_HEALTH_STATUS  If the service configuration includes HealthCheckCustomConfig, you can optionally use AWS_INIT_HEALTH_STATUS to specify the initial status of the custom health check, HEALTHY or UNHEALTHY. If you don't specify a value for AWS_INIT_HEALTH_STATUS, the initial status is HEALTHY.  AWS_INSTANCE_CNAME  If the service configuration includes a CNAME record, the domain name that you want Route 53 to return in response to DNS queries (for example, example.com). This value is required if the service specified by ServiceId includes settings for an CNAME record.  AWS_INSTANCE_IPV4  If the service configuration includes an A record, the IPv4 address that you want Route 53 to return in response to DNS queries (for example, 192.0.2.44). This value is required if the service specified by ServiceId includes settings for an A record. If the service includes settings for an SRV record, you must specify a value for AWS_INSTANCE_IPV4, AWS_INSTANCE_IPV6, or both.  AWS_INSTANCE_IPV6  If the service configuration includes an AAAA record, the IPv6 address that you want Route 53 to return in response to DNS queries (for example, 2001:0db8:85a3:0000:0000:abcd:0001:2345). This value is required if the service specified by ServiceId includes settings for an AAAA record. If the service includes settings for an SRV record, you must specify a value for AWS_INSTANCE_IPV4, AWS_INSTANCE_IPV6, or both.  AWS_INSTANCE_PORT  If the service includes an SRV record, the value that you want Route 53 to return for the port. If the service includes HealthCheckConfig, the port on the endpoint that you want Route 53 to send requests to.  This value is required if you specified settings for an SRV record or a Route 53 health check when you created the service.  Custom attributes  You can add up to 30 custom attributes. For each key-value pair, the maximum length of the attribute name is 255 characters, and the maximum length of the attribute value is 1,024 characters. The total size of all provided attributes (sum of all keys and values) must not exceed 5,000 characters.
        public let attributes: [String: String]
        /// A unique string that identifies the request and that allows failed RegisterInstance requests to be retried without the risk of executing the operation twice. You must use a unique CreatorRequestId string every time you submit a RegisterInstance request if you're registering additional instances for the same namespace and service. CreatorRequestId can be any unique string (for example, a date/time stamp).
        public let creatorRequestId: String?
        /// An identifier that you want to associate with the instance. Note the following:   If the service that's specified by ServiceId includes settings for an SRV record, the value of InstanceId is automatically included as part of the value for the SRV record. For more information, see DnsRecord > Type.   You can use this value to update an existing instance.   To register a new instance, you must specify a value that's unique among instances that you register by using the same service.    If you specify an existing InstanceId and ServiceId, Cloud Map updates the existing DNS records, if any. If there's also an existing health check, Cloud Map deletes the old health check and creates a new one.   The health check isn't deleted immediately, so it will still appear for a while if you submit a ListHealthChecks request, for example.
        public let instanceId: String
        /// The ID of the service that you want to use for settings for the instance.
        public let serviceId: String

        public init(attributes: [String: String], creatorRequestId: String? = RegisterInstanceRequest.idempotencyToken(), instanceId: String, serviceId: String) {
            self.attributes = attributes
            self.creatorRequestId = creatorRequestId
            self.instanceId = instanceId
            self.serviceId = serviceId
        }

        public func validate(name: String) throws {
            try self.attributes.forEach {
                try validate($0.key, name: "attributes.key", parent: name, max: 255)
                try validate($0.key, name: "attributes.key", parent: name, pattern: "^[a-zA-Z0-9!-~]+$")
                try validate($0.value, name: "attributes[\"\($0.key)\"]", parent: name, max: 1024)
                try validate($0.value, name: "attributes[\"\($0.key)\"]", parent: name, pattern: "^([a-zA-Z0-9!-~][ \\ta-zA-Z0-9!-~]*){0,1}[a-zA-Z0-9!-~]{0,1}$")
            }
            try self.validate(self.creatorRequestId, name: "creatorRequestId", parent: name, max: 64)
            try self.validate(self.instanceId, name: "instanceId", parent: name, max: 64)
            try self.validate(self.instanceId, name: "instanceId", parent: name, pattern: "^[0-9a-zA-Z_/:.@-]+$")
            try self.validate(self.serviceId, name: "serviceId", parent: name, max: 64)
        }

        private enum CodingKeys: String, CodingKey {
            case attributes = "Attributes"
            case creatorRequestId = "CreatorRequestId"
            case instanceId = "InstanceId"
            case serviceId = "ServiceId"
        }
    }

    public struct RegisterInstanceResponse: AWSDecodableShape {
        /// A value that you can use to determine whether the request completed successfully. To get the status of the operation, see GetOperation.
        public let operationId: String?

        public init(operationId: String? = nil) {
            self.operationId = operationId
        }

        private enum CodingKeys: String, CodingKey {
            case operationId = "OperationId"
        }
    }

    public struct SOA: AWSEncodableShape & AWSDecodableShape {
        /// The time to live (TTL) for purposes of negative caching.
        public let ttl: Int64

        public init(ttl: Int64) {
            self.ttl = ttl
        }

        public func validate(name: String) throws {
            try self.validate(self.ttl, name: "ttl", parent: name, max: 2_147_483_647)
            try self.validate(self.ttl, name: "ttl", parent: name, min: 0)
        }

        private enum CodingKeys: String, CodingKey {
            case ttl = "TTL"
        }
    }

    public struct SOAChange: AWSEncodableShape {
        /// The updated time to live (TTL) for purposes of negative caching.
        public let ttl: Int64

        public init(ttl: Int64) {
            self.ttl = ttl
        }

        public func validate(name: String) throws {
            try self.validate(self.ttl, name: "ttl", parent: name, max: 2_147_483_647)
            try self.validate(self.ttl, name: "ttl", parent: name, min: 0)
        }

        private enum CodingKeys: String, CodingKey {
            case ttl = "TTL"
        }
    }

    public struct Service: AWSDecodableShape {
        /// The Amazon Resource Name (ARN) that Cloud Map assigns to the service when you create it.
        public let arn: String?
        /// The date and time that the service was created, in Unix format and Coordinated Universal Time (UTC). The value of CreateDate is accurate to milliseconds. For example, the value 1516925490.087 represents Friday, January 26, 2018 12:11:30.087 AM.
        public let createDate: Date?
        /// A unique string that identifies the request and that allows failed requests to be retried without the risk of running the operation twice. CreatorRequestId can be any unique string (for example, a date/timestamp).
        public let creatorRequestId: String?
        /// The description of the service.
        public let description: String?
        /// A complex type that contains information about the Route 53 DNS records that you want Cloud Map to create when you register an instance.
        public let dnsConfig: DnsConfig?
        ///  Public DNS and HTTP namespaces only. A complex type that contains settings for an optional health check. If you specify settings for a health check, Cloud Map associates the health check with the records that you specify in DnsConfig. For information about the charges for health checks, see Amazon Route 53 Pricing.
        public let healthCheckConfig: HealthCheckConfig?
        /// A complex type that contains information about an optional custom health check.  If you specify a health check configuration, you can specify either HealthCheckCustomConfig or HealthCheckConfig but not both.
        public let healthCheckCustomConfig: HealthCheckCustomConfig?
        /// The ID that Cloud Map assigned to the service when you created it.
        public let id: String?
        /// The number of instances that are currently associated with the service. Instances that were previously associated with the service but that are deleted aren't included in the count. The count might not reflect pending registrations and deregistrations.
        public let instanceCount: Int?
        /// The name of the service.
        public let name: String?
        /// The ID of the namespace that was used to create the service.
        public let namespaceId: String?
        /// Describes the systems that can be used to discover the service instances.  DNS_HTTP  The service instances can be discovered using either DNS queries or the DiscoverInstances API operation.  HTTP  The service instances can only be discovered using the DiscoverInstances API operation.  DNS  Reserved.
        public let type: ServiceType?

        public init(arn: String? = nil, createDate: Date? = nil, creatorRequestId: String? = nil, description: String? = nil, dnsConfig: DnsConfig? = nil, healthCheckConfig: HealthCheckConfig? = nil, healthCheckCustomConfig: HealthCheckCustomConfig? = nil, id: String? = nil, instanceCount: Int? = nil, name: String? = nil, namespaceId: String? = nil, type: ServiceType? = nil) {
            self.arn = arn
            self.createDate = createDate
            self.creatorRequestId = creatorRequestId
            self.description = description
            self.dnsConfig = dnsConfig
            self.healthCheckConfig = healthCheckConfig
            self.healthCheckCustomConfig = healthCheckCustomConfig
            self.id = id
            self.instanceCount = instanceCount
            self.name = name
            self.namespaceId = namespaceId
            self.type = type
        }

        private enum CodingKeys: String, CodingKey {
            case arn = "Arn"
            case createDate = "CreateDate"
            case creatorRequestId = "CreatorRequestId"
            case description = "Description"
            case dnsConfig = "DnsConfig"
            case healthCheckConfig = "HealthCheckConfig"
            case healthCheckCustomConfig = "HealthCheckCustomConfig"
            case id = "Id"
            case instanceCount = "InstanceCount"
            case name = "Name"
            case namespaceId = "NamespaceId"
            case type = "Type"
        }
    }

    public struct ServiceChange: AWSEncodableShape {
        /// A description for the service.
        public let description: String?
        /// Information about the Route 53 DNS records that you want Cloud Map to create when you register an instance.
        public let dnsConfig: DnsConfigChange?
        ///  Public DNS and HTTP namespaces only. Settings for an optional health check. If you specify settings for a health check, Cloud Map associates the health check with the records that you specify in DnsConfig.
        public let healthCheckConfig: HealthCheckConfig?

        public init(description: String? = nil, dnsConfig: DnsConfigChange? = nil, healthCheckConfig: HealthCheckConfig? = nil) {
            self.description = description
            self.dnsConfig = dnsConfig
            self.healthCheckConfig = healthCheckConfig
        }

        public func validate(name: String) throws {
            try self.validate(self.description, name: "description", parent: name, max: 1024)
            try self.dnsConfig?.validate(name: "\(name).dnsConfig")
            try self.healthCheckConfig?.validate(name: "\(name).healthCheckConfig")
        }

        private enum CodingKeys: String, CodingKey {
            case description = "Description"
            case dnsConfig = "DnsConfig"
            case healthCheckConfig = "HealthCheckConfig"
        }
    }

    public struct ServiceFilter: AWSEncodableShape {
        /// The operator that you want to use to determine whether a service is returned by ListServices. Valid values for Condition include the following:    EQ: When you specify EQ, specify one namespace ID for Values. EQ is the default condition and can be omitted.    IN: When you specify IN, specify a list of the IDs for the namespaces that you want ListServices to return a list of services for.    BETWEEN: Not applicable.
        public let condition: FilterCondition?
        /// Specify NAMESPACE_ID.
        public let name: ServiceFilterName
        /// The values that are applicable to the value that you specify for Condition to filter the list of services.
        public let values: [String]

        public init(condition: FilterCondition? = nil, name: ServiceFilterName, values: [String]) {
            self.condition = condition
            self.name = name
            self.values = values
        }

        public func validate(name: String) throws {
            try self.values.forEach {
                try validate($0, name: "values[]", parent: name, max: 255)
                try validate($0, name: "values[]", parent: name, min: 1)
            }
        }

        private enum CodingKeys: String, CodingKey {
            case condition = "Condition"
            case name = "Name"
            case values = "Values"
        }
    }

    public struct ServiceSummary: AWSDecodableShape {
        /// The Amazon Resource Name (ARN) that Cloud Map assigns to the service when you create it.
        public let arn: String?
        /// The date and time that the service was created.
        public let createDate: Date?
        /// The description that you specify when you create the service.
        public let description: String?
        /// Information about the Route 53 DNS records that you want Cloud Map to create when you register an instance.
        public let dnsConfig: DnsConfig?
        ///  Public DNS and HTTP namespaces only. Settings for an optional health check. If you specify settings for a health check, Cloud Map associates the health check with the records that you specify in DnsConfig.
        public let healthCheckConfig: HealthCheckConfig?
        /// Information about an optional custom health check. A custom health check, which requires that you use a third-party health checker to evaluate the health of your resources, is useful in the following circumstances:   You can't use a health check that's defined by HealthCheckConfig because the resource isn't available over the internet. For example, you can use a custom health check when the instance is in an Amazon VPC. (To check the health of resources in a VPC, the health checker must also be in the VPC.)   You want to use a third-party health checker regardless of where your resources are located.    If you specify a health check configuration, you can specify either HealthCheckCustomConfig or HealthCheckConfig but not both.
        public let healthCheckCustomConfig: HealthCheckCustomConfig?
        /// The ID that Cloud Map assigned to the service when you created it.
        public let id: String?
        /// The number of instances that are currently associated with the service. Instances that were previously associated with the service but that are deleted aren't included in the count. The count might not reflect pending registrations and deregistrations.
        public let instanceCount: Int?
        /// The name of the service.
        public let name: String?
        /// Describes the systems that can be used to discover the service instances.  DNS_HTTP  The service instances can be discovered using either DNS queries or the DiscoverInstances API operation.  HTTP  The service instances can only be discovered using the DiscoverInstances API operation.  DNS  Reserved.
        public let type: ServiceType?

        public init(arn: String? = nil, createDate: Date? = nil, description: String? = nil, dnsConfig: DnsConfig? = nil, healthCheckConfig: HealthCheckConfig? = nil, healthCheckCustomConfig: HealthCheckCustomConfig? = nil, id: String? = nil, instanceCount: Int? = nil, name: String? = nil, type: ServiceType? = nil) {
            self.arn = arn
            self.createDate = createDate
            self.description = description
            self.dnsConfig = dnsConfig
            self.healthCheckConfig = healthCheckConfig
            self.healthCheckCustomConfig = healthCheckCustomConfig
            self.id = id
            self.instanceCount = instanceCount
            self.name = name
            self.type = type
        }

        private enum CodingKeys: String, CodingKey {
            case arn = "Arn"
            case createDate = "CreateDate"
            case description = "Description"
            case dnsConfig = "DnsConfig"
            case healthCheckConfig = "HealthCheckConfig"
            case healthCheckCustomConfig = "HealthCheckCustomConfig"
            case id = "Id"
            case instanceCount = "InstanceCount"
            case name = "Name"
            case type = "Type"
        }
    }

    public struct Tag: AWSEncodableShape & AWSDecodableShape {
        /// The key identifier, or name, of the tag.
        public let key: String
        /// The string value that's associated with the key of the tag. You can set the value of a tag to an empty string, but you can't set the value of a tag to null.
        public let value: String

        public init(key: String, value: String) {
            self.key = key
            self.value = value
        }

        public func validate(name: String) throws {
            try self.validate(self.key, name: "key", parent: name, max: 128)
            try self.validate(self.key, name: "key", parent: name, min: 1)
            try self.validate(self.value, name: "value", parent: name, max: 256)
        }

        private enum CodingKeys: String, CodingKey {
            case key = "Key"
            case value = "Value"
        }
    }

    public struct TagResourceRequest: AWSEncodableShape {
        /// The Amazon Resource Name (ARN) of the resource that you want to retrieve tags for.
        public let resourceARN: String
        /// The tags to add to the specified resource. Specifying the tag key is required. You can set the value of a tag to an empty string, but you can't set the value of a tag to null.
        public let tags: [Tag]

        public init(resourceARN: String, tags: [Tag]) {
            self.resourceARN = resourceARN
            self.tags = tags
        }

        public func validate(name: String) throws {
            try self.validate(self.resourceARN, name: "resourceARN", parent: name, max: 1011)
            try self.validate(self.resourceARN, name: "resourceARN", parent: name, min: 1)
            try self.tags.forEach {
                try $0.validate(name: "\(name).tags[]")
            }
            try self.validate(self.tags, name: "tags", parent: name, max: 200)
        }

        private enum CodingKeys: String, CodingKey {
            case resourceARN = "ResourceARN"
            case tags = "Tags"
        }
    }

    public struct TagResourceResponse: AWSDecodableShape {
        public init() {}
    }

    public struct UntagResourceRequest: AWSEncodableShape {
        /// The Amazon Resource Name (ARN) of the resource that you want to retrieve tags for.
        public let resourceARN: String
        /// The tag keys to remove from the specified resource.
        public let tagKeys: [String]

        public init(resourceARN: String, tagKeys: [String]) {
            self.resourceARN = resourceARN
            self.tagKeys = tagKeys
        }

        public func validate(name: String) throws {
            try self.validate(self.resourceARN, name: "resourceARN", parent: name, max: 1011)
            try self.validate(self.resourceARN, name: "resourceARN", parent: name, min: 1)
            try self.tagKeys.forEach {
                try validate($0, name: "tagKeys[]", parent: name, max: 128)
                try validate($0, name: "tagKeys[]", parent: name, min: 1)
            }
            try self.validate(self.tagKeys, name: "tagKeys", parent: name, max: 200)
        }

        private enum CodingKeys: String, CodingKey {
            case resourceARN = "ResourceARN"
            case tagKeys = "TagKeys"
        }
    }

    public struct UntagResourceResponse: AWSDecodableShape {
        public init() {}
    }

    public struct UpdateHttpNamespaceRequest: AWSEncodableShape {
        /// The ID of the namespace that you want to update.
        public let id: String
        /// Updated properties for the the HTTP namespace.
        public let namespace: HttpNamespaceChange
        /// A unique string that identifies the request and that allows failed UpdateHttpNamespace requests to be retried without the risk of running the operation twice. UpdaterRequestId can be any unique string (for example, a date/timestamp).
        public let updaterRequestId: String?

        public init(id: String, namespace: HttpNamespaceChange, updaterRequestId: String? = UpdateHttpNamespaceRequest.idempotencyToken()) {
            self.id = id
            self.namespace = namespace
            self.updaterRequestId = updaterRequestId
        }

        public func validate(name: String) throws {
            try self.validate(self.id, name: "id", parent: name, max: 64)
            try self.namespace.validate(name: "\(name).namespace")
            try self.validate(self.updaterRequestId, name: "updaterRequestId", parent: name, max: 64)
        }

        private enum CodingKeys: String, CodingKey {
            case id = "Id"
            case namespace = "Namespace"
            case updaterRequestId = "UpdaterRequestId"
        }
    }

    public struct UpdateHttpNamespaceResponse: AWSDecodableShape {
        /// A value that you can use to determine whether the request completed successfully. To get the status of the operation, see GetOperation.
        public let operationId: String?

        public init(operationId: String? = nil) {
            self.operationId = operationId
        }

        private enum CodingKeys: String, CodingKey {
            case operationId = "OperationId"
        }
    }

    public struct UpdateInstanceCustomHealthStatusRequest: AWSEncodableShape {
        /// The ID of the instance that you want to change the health status for.
        public let instanceId: String
        /// The ID of the service that includes the configuration for the custom health check that you want to change the status for.
        public let serviceId: String
        /// The new status of the instance, HEALTHY or UNHEALTHY.
        public let status: CustomHealthStatus

        public init(instanceId: String, serviceId: String, status: CustomHealthStatus) {
            self.instanceId = instanceId
            self.serviceId = serviceId
            self.status = status
        }

        public func validate(name: String) throws {
            try self.validate(self.instanceId, name: "instanceId", parent: name, max: 64)
            try self.validate(self.serviceId, name: "serviceId", parent: name, max: 64)
        }

        private enum CodingKeys: String, CodingKey {
            case instanceId = "InstanceId"
            case serviceId = "ServiceId"
            case status = "Status"
        }
    }

    public struct UpdatePrivateDnsNamespaceRequest: AWSEncodableShape {
        /// The ID of the namespace that you want to update.
        public let id: String
        /// Updated properties for the private DNS namespace.
        public let namespace: PrivateDnsNamespaceChange
        /// A unique string that identifies the request and that allows failed UpdatePrivateDnsNamespace requests to be retried without the risk of running the operation twice. UpdaterRequestId can be any unique string (for example, a date/timestamp).
        public let updaterRequestId: String?

        public init(id: String, namespace: PrivateDnsNamespaceChange, updaterRequestId: String? = UpdatePrivateDnsNamespaceRequest.idempotencyToken()) {
            self.id = id
            self.namespace = namespace
            self.updaterRequestId = updaterRequestId
        }

        public func validate(name: String) throws {
            try self.validate(self.id, name: "id", parent: name, max: 64)
            try self.namespace.validate(name: "\(name).namespace")
            try self.validate(self.updaterRequestId, name: "updaterRequestId", parent: name, max: 64)
        }

        private enum CodingKeys: String, CodingKey {
            case id = "Id"
            case namespace = "Namespace"
            case updaterRequestId = "UpdaterRequestId"
        }
    }

    public struct UpdatePrivateDnsNamespaceResponse: AWSDecodableShape {
        /// A value that you can use to determine whether the request completed successfully. To get the status of the operation, see GetOperation.
        public let operationId: String?

        public init(operationId: String? = nil) {
            self.operationId = operationId
        }

        private enum CodingKeys: String, CodingKey {
            case operationId = "OperationId"
        }
    }

    public struct UpdatePublicDnsNamespaceRequest: AWSEncodableShape {
        /// The ID of the namespace being updated.
        public let id: String
        /// Updated properties for the public DNS namespace.
        public let namespace: PublicDnsNamespaceChange
        /// A unique string that identifies the request and that allows failed UpdatePublicDnsNamespace requests to be retried without the risk of running the operation twice. UpdaterRequestId can be any unique string (for example, a date/timestamp).
        public let updaterRequestId: String?

        public init(id: String, namespace: PublicDnsNamespaceChange, updaterRequestId: String? = UpdatePublicDnsNamespaceRequest.idempotencyToken()) {
            self.id = id
            self.namespace = namespace
            self.updaterRequestId = updaterRequestId
        }

        public func validate(name: String) throws {
            try self.validate(self.id, name: "id", parent: name, max: 64)
            try self.namespace.validate(name: "\(name).namespace")
            try self.validate(self.updaterRequestId, name: "updaterRequestId", parent: name, max: 64)
        }

        private enum CodingKeys: String, CodingKey {
            case id = "Id"
            case namespace = "Namespace"
            case updaterRequestId = "UpdaterRequestId"
        }
    }

    public struct UpdatePublicDnsNamespaceResponse: AWSDecodableShape {
        /// A value that you can use to determine whether the request completed successfully. To get the status of the operation, see GetOperation.
        public let operationId: String?

        public init(operationId: String? = nil) {
            self.operationId = operationId
        }

        private enum CodingKeys: String, CodingKey {
            case operationId = "OperationId"
        }
    }

    public struct UpdateServiceRequest: AWSEncodableShape {
        /// The ID of the service that you want to update.
        public let id: String
        /// A complex type that contains the new settings for the service.
        public let service: ServiceChange

        public init(id: String, service: ServiceChange) {
            self.id = id
            self.service = service
        }

        public func validate(name: String) throws {
            try self.validate(self.id, name: "id", parent: name, max: 64)
            try self.service.validate(name: "\(name).service")
        }

        private enum CodingKeys: String, CodingKey {
            case id = "Id"
            case service = "Service"
        }
    }

    public struct UpdateServiceResponse: AWSDecodableShape {
        /// A value that you can use to determine whether the request completed successfully. To get the status of the operation, see GetOperation.
        public let operationId: String?

        public init(operationId: String? = nil) {
            self.operationId = operationId
        }

        private enum CodingKeys: String, CodingKey {
            case operationId = "OperationId"
        }
    }
}
