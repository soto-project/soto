//===----------------------------------------------------------------------===//
//
// This source file is part of the Soto for AWS open source project
//
// Copyright (c) 2017-2021 the Soto project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
// See CONTRIBUTORS.txt for the list of Soto project authors
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by https://github.com/soto-project/soto-codegenerator.
// DO NOT EDIT.

import Foundation
import SotoCore

extension PinpointEmail {
    // MARK: Enums

    public enum BehaviorOnMxFailure: String, CustomStringConvertible, Codable {
        case rejectMessage = "REJECT_MESSAGE"
        case useDefaultValue = "USE_DEFAULT_VALUE"
        public var description: String { return self.rawValue }
    }

    public enum DeliverabilityDashboardAccountStatus: String, CustomStringConvertible, Codable {
        case active = "ACTIVE"
        case disabled = "DISABLED"
        case pendingExpiration = "PENDING_EXPIRATION"
        public var description: String { return self.rawValue }
    }

    public enum DeliverabilityTestStatus: String, CustomStringConvertible, Codable {
        case completed = "COMPLETED"
        case inProgress = "IN_PROGRESS"
        public var description: String { return self.rawValue }
    }

    public enum DimensionValueSource: String, CustomStringConvertible, Codable {
        case emailHeader = "EMAIL_HEADER"
        case linkTag = "LINK_TAG"
        case messageTag = "MESSAGE_TAG"
        public var description: String { return self.rawValue }
    }

    public enum DkimStatus: String, CustomStringConvertible, Codable {
        case failed = "FAILED"
        case notStarted = "NOT_STARTED"
        case pending = "PENDING"
        case success = "SUCCESS"
        case temporaryFailure = "TEMPORARY_FAILURE"
        public var description: String { return self.rawValue }
    }

    public enum EventType: String, CustomStringConvertible, Codable {
        case bounce = "BOUNCE"
        case click = "CLICK"
        case complaint = "COMPLAINT"
        case delivery = "DELIVERY"
        case open = "OPEN"
        case reject = "REJECT"
        case renderingFailure = "RENDERING_FAILURE"
        case send = "SEND"
        public var description: String { return self.rawValue }
    }

    public enum IdentityType: String, CustomStringConvertible, Codable {
        case domain = "DOMAIN"
        case emailAddress = "EMAIL_ADDRESS"
        case managedDomain = "MANAGED_DOMAIN"
        public var description: String { return self.rawValue }
    }

    public enum MailFromDomainStatus: String, CustomStringConvertible, Codable {
        case failed = "FAILED"
        case pending = "PENDING"
        case success = "SUCCESS"
        case temporaryFailure = "TEMPORARY_FAILURE"
        public var description: String { return self.rawValue }
    }

    public enum TlsPolicy: String, CustomStringConvertible, Codable {
        case optional = "OPTIONAL"
        case require = "REQUIRE"
        public var description: String { return self.rawValue }
    }

    public enum WarmupStatus: String, CustomStringConvertible, Codable {
        case done = "DONE"
        case inProgress = "IN_PROGRESS"
        public var description: String { return self.rawValue }
    }

    // MARK: Shapes

    public struct BlacklistEntry: AWSDecodableShape {
        /// Additional information about the blacklisting event, as provided by the blacklist maintainer.
        public let description: String?
        /// The time when the blacklisting event occurred, shown in Unix time format.
        public let listingTime: Date?
        /// The name of the blacklist that the IP address appears on.
        public let rblName: String?

        public init(description: String? = nil, listingTime: Date? = nil, rblName: String? = nil) {
            self.description = description
            self.listingTime = listingTime
            self.rblName = rblName
        }

        private enum CodingKeys: String, CodingKey {
            case description = "Description"
            case listingTime = "ListingTime"
            case rblName = "RblName"
        }
    }

    public struct Body: AWSEncodableShape {
        /// An object that represents the version of the message that is displayed in email clients that support HTML. HTML messages can include formatted text, hyperlinks, images, and more.
        public let html: Content?
        /// An object that represents the version of the message that is displayed in email clients that don't support HTML, or clients where the recipient has disabled HTML rendering.
        public let text: Content?

        public init(html: Content? = nil, text: Content? = nil) {
            self.html = html
            self.text = text
        }

        private enum CodingKeys: String, CodingKey {
            case html = "Html"
            case text = "Text"
        }
    }

    public struct CloudWatchDestination: AWSEncodableShape & AWSDecodableShape {
        /// An array of objects that define the dimensions to use when you send email events to Amazon CloudWatch.
        public let dimensionConfigurations: [CloudWatchDimensionConfiguration]

        public init(dimensionConfigurations: [CloudWatchDimensionConfiguration]) {
            self.dimensionConfigurations = dimensionConfigurations
        }

        private enum CodingKeys: String, CodingKey {
            case dimensionConfigurations = "DimensionConfigurations"
        }
    }

    public struct CloudWatchDimensionConfiguration: AWSEncodableShape & AWSDecodableShape {
        /// The default value of the dimension that is published to Amazon CloudWatch if you don't provide the value of the dimension when you send an email. This value has to meet the following criteria:   It can only contain ASCII letters (a-z, A-Z), numbers (0-9), underscores (_), or dashes (-).   It can contain no more than 256 characters.
        public let defaultDimensionValue: String
        /// The name of an Amazon CloudWatch dimension associated with an email sending metric. The name has to meet the following criteria:   It can only contain ASCII letters (a-z, A-Z), numbers (0-9), underscores (_), or dashes (-).   It can contain no more than 256 characters.
        public let dimensionName: String
        /// The location where Amazon Pinpoint finds the value of a dimension to publish to Amazon CloudWatch. If you want Amazon Pinpoint to use the message tags that you specify using an X-SES-MESSAGE-TAGS header or a parameter to the SendEmail/SendRawEmail API, choose messageTag. If you want Amazon Pinpoint to use your own email headers, choose emailHeader. If you want Amazon Pinpoint to use link tags, choose linkTags.
        public let dimensionValueSource: DimensionValueSource

        public init(defaultDimensionValue: String, dimensionName: String, dimensionValueSource: DimensionValueSource) {
            self.defaultDimensionValue = defaultDimensionValue
            self.dimensionName = dimensionName
            self.dimensionValueSource = dimensionValueSource
        }

        private enum CodingKeys: String, CodingKey {
            case defaultDimensionValue = "DefaultDimensionValue"
            case dimensionName = "DimensionName"
            case dimensionValueSource = "DimensionValueSource"
        }
    }

    public struct Content: AWSEncodableShape {
        /// The character set for the content. Because of the constraints of the SMTP protocol, Amazon Pinpoint uses 7-bit ASCII by default. If the text includes characters outside of the ASCII range, you have to specify a character set. For example, you could specify UTF-8, ISO-8859-1, or Shift_JIS.
        public let charset: String?
        /// The content of the message itself.
        public let data: String

        public init(charset: String? = nil, data: String) {
            self.charset = charset
            self.data = data
        }

        private enum CodingKeys: String, CodingKey {
            case charset = "Charset"
            case data = "Data"
        }
    }

    public struct CreateConfigurationSetEventDestinationRequest: AWSEncodableShape {
        public static var _encoding = [
            AWSMemberEncoding(label: "configurationSetName", location: .uri(locationName: "ConfigurationSetName"))
        ]

        /// The name of the configuration set that you want to add an event destination to.
        public let configurationSetName: String
        /// An object that defines the event destination.
        public let eventDestination: EventDestinationDefinition
        /// A name that identifies the event destination within the configuration set.
        public let eventDestinationName: String

        public init(configurationSetName: String, eventDestination: EventDestinationDefinition, eventDestinationName: String) {
            self.configurationSetName = configurationSetName
            self.eventDestination = eventDestination
            self.eventDestinationName = eventDestinationName
        }

        private enum CodingKeys: String, CodingKey {
            case eventDestination = "EventDestination"
            case eventDestinationName = "EventDestinationName"
        }
    }

    public struct CreateConfigurationSetEventDestinationResponse: AWSDecodableShape {
        public init() {}
    }

    public struct CreateConfigurationSetRequest: AWSEncodableShape {
        /// The name of the configuration set.
        public let configurationSetName: String
        /// An object that defines the dedicated IP pool that is used to send emails that you send using the configuration set.
        public let deliveryOptions: DeliveryOptions?
        /// An object that defines whether or not Amazon Pinpoint collects reputation metrics for the emails that you send that use the configuration set.
        public let reputationOptions: ReputationOptions?
        /// An object that defines whether or not Amazon Pinpoint can send email that you send using the configuration set.
        public let sendingOptions: SendingOptions?
        /// An array of objects that define the tags (keys and values) that you want to associate with the configuration set.
        public let tags: [Tag]?
        /// An object that defines the open and click tracking options for emails that you send using the configuration set.
        public let trackingOptions: TrackingOptions?

        public init(configurationSetName: String, deliveryOptions: DeliveryOptions? = nil, reputationOptions: ReputationOptions? = nil, sendingOptions: SendingOptions? = nil, tags: [Tag]? = nil, trackingOptions: TrackingOptions? = nil) {
            self.configurationSetName = configurationSetName
            self.deliveryOptions = deliveryOptions
            self.reputationOptions = reputationOptions
            self.sendingOptions = sendingOptions
            self.tags = tags
            self.trackingOptions = trackingOptions
        }

        private enum CodingKeys: String, CodingKey {
            case configurationSetName = "ConfigurationSetName"
            case deliveryOptions = "DeliveryOptions"
            case reputationOptions = "ReputationOptions"
            case sendingOptions = "SendingOptions"
            case tags = "Tags"
            case trackingOptions = "TrackingOptions"
        }
    }

    public struct CreateConfigurationSetResponse: AWSDecodableShape {
        public init() {}
    }

    public struct CreateDedicatedIpPoolRequest: AWSEncodableShape {
        /// The name of the dedicated IP pool.
        public let poolName: String
        /// An object that defines the tags (keys and values) that you want to associate with the pool.
        public let tags: [Tag]?

        public init(poolName: String, tags: [Tag]? = nil) {
            self.poolName = poolName
            self.tags = tags
        }

        private enum CodingKeys: String, CodingKey {
            case poolName = "PoolName"
            case tags = "Tags"
        }
    }

    public struct CreateDedicatedIpPoolResponse: AWSDecodableShape {
        public init() {}
    }

    public struct CreateDeliverabilityTestReportRequest: AWSEncodableShape {
        /// The HTML body of the message that you sent when you performed the predictive inbox placement test.
        public let content: EmailContent
        /// The email address that the predictive inbox placement test email was sent from.
        public let fromEmailAddress: String
        /// A unique name that helps you to identify the predictive inbox placement test when you retrieve the results.
        public let reportName: String?
        /// An array of objects that define the tags (keys and values) that you want to associate with the predictive inbox placement test.
        public let tags: [Tag]?

        public init(content: EmailContent, fromEmailAddress: String, reportName: String? = nil, tags: [Tag]? = nil) {
            self.content = content
            self.fromEmailAddress = fromEmailAddress
            self.reportName = reportName
            self.tags = tags
        }

        public func validate(name: String) throws {
            try self.content.validate(name: "\(name).content")
        }

        private enum CodingKeys: String, CodingKey {
            case content = "Content"
            case fromEmailAddress = "FromEmailAddress"
            case reportName = "ReportName"
            case tags = "Tags"
        }
    }

    public struct CreateDeliverabilityTestReportResponse: AWSDecodableShape {
        /// The status of the predictive inbox placement test. If the status is IN_PROGRESS, then the predictive inbox placement test is currently running. Predictive inbox placement tests are usually complete within 24 hours of creating the test. If the status is COMPLETE, then the test is finished, and you can use the GetDeliverabilityTestReport to view the results of the test.
        public let deliverabilityTestStatus: DeliverabilityTestStatus
        /// A unique string that identifies the predictive inbox placement test.
        public let reportId: String

        public init(deliverabilityTestStatus: DeliverabilityTestStatus, reportId: String) {
            self.deliverabilityTestStatus = deliverabilityTestStatus
            self.reportId = reportId
        }

        private enum CodingKeys: String, CodingKey {
            case deliverabilityTestStatus = "DeliverabilityTestStatus"
            case reportId = "ReportId"
        }
    }

    public struct CreateEmailIdentityRequest: AWSEncodableShape {
        /// The email address or domain that you want to verify.
        public let emailIdentity: String
        /// An array of objects that define the tags (keys and values) that you want to associate with the email identity.
        public let tags: [Tag]?

        public init(emailIdentity: String, tags: [Tag]? = nil) {
            self.emailIdentity = emailIdentity
            self.tags = tags
        }

        private enum CodingKeys: String, CodingKey {
            case emailIdentity = "EmailIdentity"
            case tags = "Tags"
        }
    }

    public struct CreateEmailIdentityResponse: AWSDecodableShape {
        /// An object that contains information about the DKIM attributes for the identity. This object includes the tokens that you use to create the CNAME records that are required to complete the DKIM verification process.
        public let dkimAttributes: DkimAttributes?
        /// The email identity type.
        public let identityType: IdentityType?
        /// Specifies whether or not the identity is verified. In Amazon Pinpoint, you can only send email from verified email addresses or domains. For more information about verifying identities, see the Amazon Pinpoint User Guide.
        public let verifiedForSendingStatus: Bool?

        public init(dkimAttributes: DkimAttributes? = nil, identityType: IdentityType? = nil, verifiedForSendingStatus: Bool? = nil) {
            self.dkimAttributes = dkimAttributes
            self.identityType = identityType
            self.verifiedForSendingStatus = verifiedForSendingStatus
        }

        private enum CodingKeys: String, CodingKey {
            case dkimAttributes = "DkimAttributes"
            case identityType = "IdentityType"
            case verifiedForSendingStatus = "VerifiedForSendingStatus"
        }
    }

    public struct DailyVolume: AWSDecodableShape {
        /// An object that contains inbox placement metrics for a specified day in the analysis period, broken out by the recipient's email provider.
        public let domainIspPlacements: [DomainIspPlacement]?
        /// The date that the DailyVolume metrics apply to, in Unix time.
        public let startDate: Date?
        /// An object that contains inbox placement metrics for a specific day in the analysis period.
        public let volumeStatistics: VolumeStatistics?

        public init(domainIspPlacements: [DomainIspPlacement]? = nil, startDate: Date? = nil, volumeStatistics: VolumeStatistics? = nil) {
            self.domainIspPlacements = domainIspPlacements
            self.startDate = startDate
            self.volumeStatistics = volumeStatistics
        }

        private enum CodingKeys: String, CodingKey {
            case domainIspPlacements = "DomainIspPlacements"
            case startDate = "StartDate"
            case volumeStatistics = "VolumeStatistics"
        }
    }

    public struct DedicatedIp: AWSDecodableShape {
        /// An IP address that is reserved for use by your Amazon Pinpoint account.
        public let ip: String
        /// The name of the dedicated IP pool that the IP address is associated with.
        public let poolName: String?
        /// Indicates how complete the dedicated IP warm-up process is. When this value equals 1, the address has completed the warm-up process and is ready for use.
        public let warmupPercentage: Int
        /// The warm-up status of a dedicated IP address. The status can have one of the following values:    IN_PROGRESS – The IP address isn't ready to use because the dedicated IP warm-up process is ongoing.    DONE – The dedicated IP warm-up process is complete, and the IP address is ready to use.
        public let warmupStatus: WarmupStatus

        public init(ip: String, poolName: String? = nil, warmupPercentage: Int, warmupStatus: WarmupStatus) {
            self.ip = ip
            self.poolName = poolName
            self.warmupPercentage = warmupPercentage
            self.warmupStatus = warmupStatus
        }

        private enum CodingKeys: String, CodingKey {
            case ip = "Ip"
            case poolName = "PoolName"
            case warmupPercentage = "WarmupPercentage"
            case warmupStatus = "WarmupStatus"
        }
    }

    public struct DeleteConfigurationSetEventDestinationRequest: AWSEncodableShape {
        public static var _encoding = [
            AWSMemberEncoding(label: "configurationSetName", location: .uri(locationName: "ConfigurationSetName")),
            AWSMemberEncoding(label: "eventDestinationName", location: .uri(locationName: "EventDestinationName"))
        ]

        /// The name of the configuration set that contains the event destination that you want to delete.
        public let configurationSetName: String
        /// The name of the event destination that you want to delete.
        public let eventDestinationName: String

        public init(configurationSetName: String, eventDestinationName: String) {
            self.configurationSetName = configurationSetName
            self.eventDestinationName = eventDestinationName
        }

        private enum CodingKeys: CodingKey {}
    }

    public struct DeleteConfigurationSetEventDestinationResponse: AWSDecodableShape {
        public init() {}
    }

    public struct DeleteConfigurationSetRequest: AWSEncodableShape {
        public static var _encoding = [
            AWSMemberEncoding(label: "configurationSetName", location: .uri(locationName: "ConfigurationSetName"))
        ]

        /// The name of the configuration set that you want to delete.
        public let configurationSetName: String

        public init(configurationSetName: String) {
            self.configurationSetName = configurationSetName
        }

        private enum CodingKeys: CodingKey {}
    }

    public struct DeleteConfigurationSetResponse: AWSDecodableShape {
        public init() {}
    }

    public struct DeleteDedicatedIpPoolRequest: AWSEncodableShape {
        public static var _encoding = [
            AWSMemberEncoding(label: "poolName", location: .uri(locationName: "PoolName"))
        ]

        /// The name of the dedicated IP pool that you want to delete.
        public let poolName: String

        public init(poolName: String) {
            self.poolName = poolName
        }

        private enum CodingKeys: CodingKey {}
    }

    public struct DeleteDedicatedIpPoolResponse: AWSDecodableShape {
        public init() {}
    }

    public struct DeleteEmailIdentityRequest: AWSEncodableShape {
        public static var _encoding = [
            AWSMemberEncoding(label: "emailIdentity", location: .uri(locationName: "EmailIdentity"))
        ]

        /// The identity (that is, the email address or domain) that you want to delete from your Amazon Pinpoint account.
        public let emailIdentity: String

        public init(emailIdentity: String) {
            self.emailIdentity = emailIdentity
        }

        private enum CodingKeys: CodingKey {}
    }

    public struct DeleteEmailIdentityResponse: AWSDecodableShape {
        public init() {}
    }

    public struct DeliverabilityTestReport: AWSDecodableShape {
        /// The date and time when the predictive inbox placement test was created, in Unix time format.
        public let createDate: Date?
        /// The status of the predictive inbox placement test. If the status is IN_PROGRESS, then the predictive inbox placement test is currently running. Predictive inbox placement tests are usually complete within 24 hours of creating the test. If the status is COMPLETE, then the test is finished, and you can use the GetDeliverabilityTestReport to view the results of the test.
        public let deliverabilityTestStatus: DeliverabilityTestStatus?
        /// The sender address that you specified for the predictive inbox placement test.
        public let fromEmailAddress: String?
        /// A unique string that identifies the predictive inbox placement test.
        public let reportId: String?
        /// A name that helps you identify a predictive inbox placement test report.
        public let reportName: String?
        /// The subject line for an email that you submitted in a predictive inbox placement test.
        public let subject: String?

        public init(createDate: Date? = nil, deliverabilityTestStatus: DeliverabilityTestStatus? = nil, fromEmailAddress: String? = nil, reportId: String? = nil, reportName: String? = nil, subject: String? = nil) {
            self.createDate = createDate
            self.deliverabilityTestStatus = deliverabilityTestStatus
            self.fromEmailAddress = fromEmailAddress
            self.reportId = reportId
            self.reportName = reportName
            self.subject = subject
        }

        private enum CodingKeys: String, CodingKey {
            case createDate = "CreateDate"
            case deliverabilityTestStatus = "DeliverabilityTestStatus"
            case fromEmailAddress = "FromEmailAddress"
            case reportId = "ReportId"
            case reportName = "ReportName"
            case subject = "Subject"
        }
    }

    public struct DeliveryOptions: AWSEncodableShape & AWSDecodableShape {
        /// The name of the dedicated IP pool that you want to associate with the configuration set.
        public let sendingPoolName: String?
        /// Specifies whether messages that use the configuration set are required to use Transport Layer Security (TLS). If the value is Require, messages are only delivered if a TLS connection can be established. If the value is Optional, messages can be delivered in plain text if a TLS connection can't be established.
        public let tlsPolicy: TlsPolicy?

        public init(sendingPoolName: String? = nil, tlsPolicy: TlsPolicy? = nil) {
            self.sendingPoolName = sendingPoolName
            self.tlsPolicy = tlsPolicy
        }

        private enum CodingKeys: String, CodingKey {
            case sendingPoolName = "SendingPoolName"
            case tlsPolicy = "TlsPolicy"
        }
    }

    public struct Destination: AWSEncodableShape {
        /// An array that contains the email addresses of the "BCC" (blind carbon copy) recipients for the email.
        public let bccAddresses: [String]?
        /// An array that contains the email addresses of the "CC" (carbon copy) recipients for the email.
        public let ccAddresses: [String]?
        /// An array that contains the email addresses of the "To" recipients for the email.
        public let toAddresses: [String]?

        public init(bccAddresses: [String]? = nil, ccAddresses: [String]? = nil, toAddresses: [String]? = nil) {
            self.bccAddresses = bccAddresses
            self.ccAddresses = ccAddresses
            self.toAddresses = toAddresses
        }

        private enum CodingKeys: String, CodingKey {
            case bccAddresses = "BccAddresses"
            case ccAddresses = "CcAddresses"
            case toAddresses = "ToAddresses"
        }
    }

    public struct DkimAttributes: AWSDecodableShape {
        /// If the value is true, then the messages that Amazon Pinpoint sends from the identity are DKIM-signed. If the value is false, then the messages that Amazon Pinpoint sends from the identity aren't DKIM-signed.
        public let signingEnabled: Bool?
        /// Describes whether or not Amazon Pinpoint has successfully located the DKIM records in the DNS records for the domain. The status can be one of the following:    PENDING – Amazon Pinpoint hasn't yet located the DKIM records in the DNS configuration for the domain, but will continue to attempt to locate them.    SUCCESS – Amazon Pinpoint located the DKIM records in the DNS configuration for the domain and determined that they're correct. Amazon Pinpoint can now send DKIM-signed email from the identity.    FAILED – Amazon Pinpoint was unable to locate the DKIM records in the DNS settings for the domain, and won't continue to search for them.    TEMPORARY_FAILURE – A temporary issue occurred, which prevented Amazon Pinpoint from determining the DKIM status for the domain.    NOT_STARTED – Amazon Pinpoint hasn't yet started searching for the DKIM records in the DKIM records for the domain.
        public let status: DkimStatus?
        /// A set of unique strings that you use to create a set of CNAME records that you add to the DNS configuration for your domain. When Amazon Pinpoint detects these records in the DNS configuration for your domain, the DKIM authentication process is complete. Amazon Pinpoint usually detects these records within about 72 hours of adding them to the DNS configuration for your domain.
        public let tokens: [String]?

        public init(signingEnabled: Bool? = nil, status: DkimStatus? = nil, tokens: [String]? = nil) {
            self.signingEnabled = signingEnabled
            self.status = status
            self.tokens = tokens
        }

        private enum CodingKeys: String, CodingKey {
            case signingEnabled = "SigningEnabled"
            case status = "Status"
            case tokens = "Tokens"
        }
    }

    public struct DomainDeliverabilityCampaign: AWSDecodableShape {
        /// The unique identifier for the campaign. Amazon Pinpoint automatically generates and assigns this identifier to a campaign. This value is not the same as the campaign identifier that Amazon Pinpoint assigns to campaigns that you create and manage by using the Amazon Pinpoint API or the Amazon Pinpoint console.
        public let campaignId: String?
        /// The percentage of email messages that were deleted by recipients, without being opened first. Due to technical limitations, this value only includes recipients who opened the message by using an email client that supports images.
        public let deleteRate: Double?
        /// The major email providers who handled the email message.
        public let esps: [String]?
        /// The first time, in Unix time format, when the email message was delivered to any recipient's inbox. This value can help you determine how long it took for a campaign to deliver an email message.
        public let firstSeenDateTime: Date?
        /// The verified email address that the email message was sent from.
        public let fromAddress: String?
        /// The URL of an image that contains a snapshot of the email message that was sent.
        public let imageUrl: String?
        /// The number of email messages that were delivered to recipients’ inboxes.
        public let inboxCount: Int64?
        /// The last time, in Unix time format, when the email message was delivered to any recipient's inbox. This value can help you determine how long it took for a campaign to deliver an email message.
        public let lastSeenDateTime: Date?
        /// The projected number of recipients that the email message was sent to.
        public let projectedVolume: Int64?
        /// The percentage of email messages that were opened and then deleted by recipients. Due to technical limitations, this value only includes recipients who opened the message by using an email client that supports images.
        public let readDeleteRate: Double?
        /// The percentage of email messages that were opened by recipients. Due to technical limitations, this value only includes recipients who opened the message by using an email client that supports images.
        public let readRate: Double?
        /// The IP addresses that were used to send the email message.
        public let sendingIps: [String]?
        /// The number of email messages that were delivered to recipients' spam or junk mail folders.
        public let spamCount: Int64?
        /// The subject line, or title, of the email message.
        public let subject: String?

        public init(campaignId: String? = nil, deleteRate: Double? = nil, esps: [String]? = nil, firstSeenDateTime: Date? = nil, fromAddress: String? = nil, imageUrl: String? = nil, inboxCount: Int64? = nil, lastSeenDateTime: Date? = nil, projectedVolume: Int64? = nil, readDeleteRate: Double? = nil, readRate: Double? = nil, sendingIps: [String]? = nil, spamCount: Int64? = nil, subject: String? = nil) {
            self.campaignId = campaignId
            self.deleteRate = deleteRate
            self.esps = esps
            self.firstSeenDateTime = firstSeenDateTime
            self.fromAddress = fromAddress
            self.imageUrl = imageUrl
            self.inboxCount = inboxCount
            self.lastSeenDateTime = lastSeenDateTime
            self.projectedVolume = projectedVolume
            self.readDeleteRate = readDeleteRate
            self.readRate = readRate
            self.sendingIps = sendingIps
            self.spamCount = spamCount
            self.subject = subject
        }

        private enum CodingKeys: String, CodingKey {
            case campaignId = "CampaignId"
            case deleteRate = "DeleteRate"
            case esps = "Esps"
            case firstSeenDateTime = "FirstSeenDateTime"
            case fromAddress = "FromAddress"
            case imageUrl = "ImageUrl"
            case inboxCount = "InboxCount"
            case lastSeenDateTime = "LastSeenDateTime"
            case projectedVolume = "ProjectedVolume"
            case readDeleteRate = "ReadDeleteRate"
            case readRate = "ReadRate"
            case sendingIps = "SendingIps"
            case spamCount = "SpamCount"
            case subject = "Subject"
        }
    }

    public struct DomainDeliverabilityTrackingOption: AWSEncodableShape & AWSDecodableShape {
        /// A verified domain that’s associated with your AWS account and currently has an active Deliverability dashboard subscription.
        public let domain: String?
        /// An object that contains information about the inbox placement data settings for the domain.
        public let inboxPlacementTrackingOption: InboxPlacementTrackingOption?
        /// The date, in Unix time format, when you enabled the Deliverability dashboard for the domain.
        public let subscriptionStartDate: Date?

        public init(domain: String? = nil, inboxPlacementTrackingOption: InboxPlacementTrackingOption? = nil, subscriptionStartDate: Date? = nil) {
            self.domain = domain
            self.inboxPlacementTrackingOption = inboxPlacementTrackingOption
            self.subscriptionStartDate = subscriptionStartDate
        }

        private enum CodingKeys: String, CodingKey {
            case domain = "Domain"
            case inboxPlacementTrackingOption = "InboxPlacementTrackingOption"
            case subscriptionStartDate = "SubscriptionStartDate"
        }
    }

    public struct DomainIspPlacement: AWSDecodableShape {
        /// The percentage of messages that were sent from the selected domain to the specified email provider that arrived in recipients' inboxes.
        public let inboxPercentage: Double?
        /// The total number of messages that were sent from the selected domain to the specified email provider that arrived in recipients' inboxes.
        public let inboxRawCount: Int64?
        /// The name of the email provider that the inbox placement data applies to.
        public let ispName: String?
        /// The percentage of messages that were sent from the selected domain to the specified email provider that arrived in recipients' spam or junk mail folders.
        public let spamPercentage: Double?
        /// The total number of messages that were sent from the selected domain to the specified email provider that arrived in recipients' spam or junk mail folders.
        public let spamRawCount: Int64?

        public init(inboxPercentage: Double? = nil, inboxRawCount: Int64? = nil, ispName: String? = nil, spamPercentage: Double? = nil, spamRawCount: Int64? = nil) {
            self.inboxPercentage = inboxPercentage
            self.inboxRawCount = inboxRawCount
            self.ispName = ispName
            self.spamPercentage = spamPercentage
            self.spamRawCount = spamRawCount
        }

        private enum CodingKeys: String, CodingKey {
            case inboxPercentage = "InboxPercentage"
            case inboxRawCount = "InboxRawCount"
            case ispName = "IspName"
            case spamPercentage = "SpamPercentage"
            case spamRawCount = "SpamRawCount"
        }
    }

    public struct EmailContent: AWSEncodableShape {
        /// The raw email message. The message has to meet the following criteria:   The message has to contain a header and a body, separated by one blank line.   All of the required header fields must be present in the message.   Each part of a multipart MIME message must be formatted properly.   If you include attachments, they must be in a file format that Amazon Pinpoint supports.    The entire message must be Base64 encoded.   If any of the MIME parts in your message contain content that is outside of the 7-bit ASCII character range, you should encode that content to ensure that recipients' email clients render the message properly.   The length of any single line of text in the message can't exceed 1,000 characters. This restriction is defined in RFC 5321.
        public let raw: RawMessage?
        /// The simple email message. The message consists of a subject and a message body.
        public let simple: Message?
        /// The template to use for the email message.
        public let template: Template?

        public init(raw: RawMessage? = nil, simple: Message? = nil, template: Template? = nil) {
            self.raw = raw
            self.simple = simple
            self.template = template
        }

        public func validate(name: String) throws {
            try self.template?.validate(name: "\(name).template")
        }

        private enum CodingKeys: String, CodingKey {
            case raw = "Raw"
            case simple = "Simple"
            case template = "Template"
        }
    }

    public struct EventDestination: AWSDecodableShape {
        /// An object that defines an Amazon CloudWatch destination for email events. You can use Amazon CloudWatch to monitor and gain insights on your email sending metrics.
        public let cloudWatchDestination: CloudWatchDestination?
        /// If true, the event destination is enabled. When the event destination is enabled, the specified event types are sent to the destinations in this EventDestinationDefinition. If false, the event destination is disabled. When the event destination is disabled, events aren't sent to the specified destinations.
        public let enabled: Bool?
        /// An object that defines an Amazon Kinesis Data Firehose destination for email events. You can use Amazon Kinesis Data Firehose to stream data to other services, such as Amazon S3 and Amazon Redshift.
        public let kinesisFirehoseDestination: KinesisFirehoseDestination?
        /// The types of events that Amazon Pinpoint sends to the specified event destinations.
        public let matchingEventTypes: [EventType]
        /// A name that identifies the event destination.
        public let name: String
        /// An object that defines a Amazon Pinpoint destination for email events. You can use Amazon Pinpoint events to create attributes in Amazon Pinpoint projects. You can use these attributes to create segments for your campaigns.
        public let pinpointDestination: PinpointDestination?
        /// An object that defines an Amazon SNS destination for email events. You can use Amazon SNS to send notification when certain email events occur.
        public let snsDestination: SnsDestination?

        public init(cloudWatchDestination: CloudWatchDestination? = nil, enabled: Bool? = nil, kinesisFirehoseDestination: KinesisFirehoseDestination? = nil, matchingEventTypes: [EventType], name: String, pinpointDestination: PinpointDestination? = nil, snsDestination: SnsDestination? = nil) {
            self.cloudWatchDestination = cloudWatchDestination
            self.enabled = enabled
            self.kinesisFirehoseDestination = kinesisFirehoseDestination
            self.matchingEventTypes = matchingEventTypes
            self.name = name
            self.pinpointDestination = pinpointDestination
            self.snsDestination = snsDestination
        }

        private enum CodingKeys: String, CodingKey {
            case cloudWatchDestination = "CloudWatchDestination"
            case enabled = "Enabled"
            case kinesisFirehoseDestination = "KinesisFirehoseDestination"
            case matchingEventTypes = "MatchingEventTypes"
            case name = "Name"
            case pinpointDestination = "PinpointDestination"
            case snsDestination = "SnsDestination"
        }
    }

    public struct EventDestinationDefinition: AWSEncodableShape {
        /// An object that defines an Amazon CloudWatch destination for email events. You can use Amazon CloudWatch to monitor and gain insights on your email sending metrics.
        public let cloudWatchDestination: CloudWatchDestination?
        /// If true, the event destination is enabled. When the event destination is enabled, the specified event types are sent to the destinations in this EventDestinationDefinition. If false, the event destination is disabled. When the event destination is disabled, events aren't sent to the specified destinations.
        public let enabled: Bool?
        /// An object that defines an Amazon Kinesis Data Firehose destination for email events. You can use Amazon Kinesis Data Firehose to stream data to other services, such as Amazon S3 and Amazon Redshift.
        public let kinesisFirehoseDestination: KinesisFirehoseDestination?
        /// An array that specifies which events Amazon Pinpoint should send to the destinations in this EventDestinationDefinition.
        public let matchingEventTypes: [EventType]?
        /// An object that defines a Amazon Pinpoint destination for email events. You can use Amazon Pinpoint events to create attributes in Amazon Pinpoint projects. You can use these attributes to create segments for your campaigns.
        public let pinpointDestination: PinpointDestination?
        /// An object that defines an Amazon SNS destination for email events. You can use Amazon SNS to send notification when certain email events occur.
        public let snsDestination: SnsDestination?

        public init(cloudWatchDestination: CloudWatchDestination? = nil, enabled: Bool? = nil, kinesisFirehoseDestination: KinesisFirehoseDestination? = nil, matchingEventTypes: [EventType]? = nil, pinpointDestination: PinpointDestination? = nil, snsDestination: SnsDestination? = nil) {
            self.cloudWatchDestination = cloudWatchDestination
            self.enabled = enabled
            self.kinesisFirehoseDestination = kinesisFirehoseDestination
            self.matchingEventTypes = matchingEventTypes
            self.pinpointDestination = pinpointDestination
            self.snsDestination = snsDestination
        }

        private enum CodingKeys: String, CodingKey {
            case cloudWatchDestination = "CloudWatchDestination"
            case enabled = "Enabled"
            case kinesisFirehoseDestination = "KinesisFirehoseDestination"
            case matchingEventTypes = "MatchingEventTypes"
            case pinpointDestination = "PinpointDestination"
            case snsDestination = "SnsDestination"
        }
    }

    public struct GetAccountRequest: AWSEncodableShape {
        public init() {}
    }

    public struct GetAccountResponse: AWSDecodableShape {
        /// Indicates whether or not the automatic warm-up feature is enabled for dedicated IP addresses that are associated with your account.
        public let dedicatedIpAutoWarmupEnabled: Bool?
        /// The reputation status of your Amazon Pinpoint account. The status can be one of the following:    HEALTHY – There are no reputation-related issues that currently impact your account.    PROBATION – We've identified some issues with your Amazon Pinpoint account. We're placing your account under review while you work on correcting these issues.    SHUTDOWN – Your account's ability to send email is currently paused because of an issue with the email sent from your account. When you correct the issue, you can contact us and request that your account's ability to send email is resumed.
        public let enforcementStatus: String?
        /// Indicates whether or not your account has production access in the current AWS Region. If the value is false, then your account is in the sandbox. When your account is in the sandbox, you can only send email to verified identities. Additionally, the maximum number of emails you can send in a 24-hour period (your sending quota) is 200, and the maximum number of emails you can send per second (your maximum sending rate) is 1. If the value is true, then your account has production access. When your account has production access, you can send email to any address. The sending quota and maximum sending rate for your account vary based on your specific use case.
        public let productionAccessEnabled: Bool?
        /// Indicates whether or not email sending is enabled for your Amazon Pinpoint account in the current AWS Region.
        public let sendingEnabled: Bool?
        /// An object that contains information about the per-day and per-second sending limits for your Amazon Pinpoint account in the current AWS Region.
        public let sendQuota: SendQuota?

        public init(dedicatedIpAutoWarmupEnabled: Bool? = nil, enforcementStatus: String? = nil, productionAccessEnabled: Bool? = nil, sendingEnabled: Bool? = nil, sendQuota: SendQuota? = nil) {
            self.dedicatedIpAutoWarmupEnabled = dedicatedIpAutoWarmupEnabled
            self.enforcementStatus = enforcementStatus
            self.productionAccessEnabled = productionAccessEnabled
            self.sendingEnabled = sendingEnabled
            self.sendQuota = sendQuota
        }

        private enum CodingKeys: String, CodingKey {
            case dedicatedIpAutoWarmupEnabled = "DedicatedIpAutoWarmupEnabled"
            case enforcementStatus = "EnforcementStatus"
            case productionAccessEnabled = "ProductionAccessEnabled"
            case sendingEnabled = "SendingEnabled"
            case sendQuota = "SendQuota"
        }
    }

    public struct GetBlacklistReportsRequest: AWSEncodableShape {
        public static var _encoding = [
            AWSMemberEncoding(label: "blacklistItemNames", location: .querystring(locationName: "BlacklistItemNames"))
        ]

        /// A list of IP addresses that you want to retrieve blacklist information about. You can only specify the dedicated IP addresses that you use to send email using Amazon Pinpoint or Amazon SES.
        public let blacklistItemNames: [String]

        public init(blacklistItemNames: [String]) {
            self.blacklistItemNames = blacklistItemNames
        }

        private enum CodingKeys: CodingKey {}
    }

    public struct GetBlacklistReportsResponse: AWSDecodableShape {
        /// An object that contains information about a blacklist that one of your dedicated IP addresses appears on.
        public let blacklistReport: [String: [BlacklistEntry]]

        public init(blacklistReport: [String: [BlacklistEntry]]) {
            self.blacklistReport = blacklistReport
        }

        private enum CodingKeys: String, CodingKey {
            case blacklistReport = "BlacklistReport"
        }
    }

    public struct GetConfigurationSetEventDestinationsRequest: AWSEncodableShape {
        public static var _encoding = [
            AWSMemberEncoding(label: "configurationSetName", location: .uri(locationName: "ConfigurationSetName"))
        ]

        /// The name of the configuration set that contains the event destination.
        public let configurationSetName: String

        public init(configurationSetName: String) {
            self.configurationSetName = configurationSetName
        }

        private enum CodingKeys: CodingKey {}
    }

    public struct GetConfigurationSetEventDestinationsResponse: AWSDecodableShape {
        /// An array that includes all of the events destinations that have been configured for the configuration set.
        public let eventDestinations: [EventDestination]?

        public init(eventDestinations: [EventDestination]? = nil) {
            self.eventDestinations = eventDestinations
        }

        private enum CodingKeys: String, CodingKey {
            case eventDestinations = "EventDestinations"
        }
    }

    public struct GetConfigurationSetRequest: AWSEncodableShape {
        public static var _encoding = [
            AWSMemberEncoding(label: "configurationSetName", location: .uri(locationName: "ConfigurationSetName"))
        ]

        /// The name of the configuration set that you want to obtain more information about.
        public let configurationSetName: String

        public init(configurationSetName: String) {
            self.configurationSetName = configurationSetName
        }

        private enum CodingKeys: CodingKey {}
    }

    public struct GetConfigurationSetResponse: AWSDecodableShape {
        /// The name of the configuration set.
        public let configurationSetName: String?
        /// An object that defines the dedicated IP pool that is used to send emails that you send using the configuration set.
        public let deliveryOptions: DeliveryOptions?
        /// An object that defines whether or not Amazon Pinpoint collects reputation metrics for the emails that you send that use the configuration set.
        public let reputationOptions: ReputationOptions?
        /// An object that defines whether or not Amazon Pinpoint can send email that you send using the configuration set.
        public let sendingOptions: SendingOptions?
        /// An array of objects that define the tags (keys and values) that are associated with the configuration set.
        public let tags: [Tag]?
        /// An object that defines the open and click tracking options for emails that you send using the configuration set.
        public let trackingOptions: TrackingOptions?

        public init(configurationSetName: String? = nil, deliveryOptions: DeliveryOptions? = nil, reputationOptions: ReputationOptions? = nil, sendingOptions: SendingOptions? = nil, tags: [Tag]? = nil, trackingOptions: TrackingOptions? = nil) {
            self.configurationSetName = configurationSetName
            self.deliveryOptions = deliveryOptions
            self.reputationOptions = reputationOptions
            self.sendingOptions = sendingOptions
            self.tags = tags
            self.trackingOptions = trackingOptions
        }

        private enum CodingKeys: String, CodingKey {
            case configurationSetName = "ConfigurationSetName"
            case deliveryOptions = "DeliveryOptions"
            case reputationOptions = "ReputationOptions"
            case sendingOptions = "SendingOptions"
            case tags = "Tags"
            case trackingOptions = "TrackingOptions"
        }
    }

    public struct GetDedicatedIpRequest: AWSEncodableShape {
        public static var _encoding = [
            AWSMemberEncoding(label: "ip", location: .uri(locationName: "Ip"))
        ]

        /// The IP address that you want to obtain more information about. The value you specify has to be a dedicated IP address that's assocaited with your Amazon Pinpoint account.
        public let ip: String

        public init(ip: String) {
            self.ip = ip
        }

        private enum CodingKeys: CodingKey {}
    }

    public struct GetDedicatedIpResponse: AWSDecodableShape {
        /// An object that contains information about a dedicated IP address.
        public let dedicatedIp: DedicatedIp?

        public init(dedicatedIp: DedicatedIp? = nil) {
            self.dedicatedIp = dedicatedIp
        }

        private enum CodingKeys: String, CodingKey {
            case dedicatedIp = "DedicatedIp"
        }
    }

    public struct GetDedicatedIpsRequest: AWSEncodableShape {
        public static var _encoding = [
            AWSMemberEncoding(label: "nextToken", location: .querystring(locationName: "NextToken")),
            AWSMemberEncoding(label: "pageSize", location: .querystring(locationName: "PageSize")),
            AWSMemberEncoding(label: "poolName", location: .querystring(locationName: "PoolName"))
        ]

        /// A token returned from a previous call to GetDedicatedIps to indicate the position of the dedicated IP pool in the list of IP pools.
        public let nextToken: String?
        /// The number of results to show in a single call to GetDedicatedIpsRequest. If the number of results is larger than the number you specified in this parameter, then the response includes a NextToken element, which you can use to obtain additional results.
        public let pageSize: Int?
        /// The name of the IP pool that the dedicated IP address is associated with.
        public let poolName: String?

        public init(nextToken: String? = nil, pageSize: Int? = nil, poolName: String? = nil) {
            self.nextToken = nextToken
            self.pageSize = pageSize
            self.poolName = poolName
        }

        private enum CodingKeys: CodingKey {}
    }

    public struct GetDedicatedIpsResponse: AWSDecodableShape {
        /// A list of dedicated IP addresses that are reserved for use by your Amazon Pinpoint account.
        public let dedicatedIps: [DedicatedIp]?
        /// A token that indicates that there are additional dedicated IP addresses to list. To view additional addresses, issue another request to GetDedicatedIps, passing this token in the NextToken parameter.
        public let nextToken: String?

        public init(dedicatedIps: [DedicatedIp]? = nil, nextToken: String? = nil) {
            self.dedicatedIps = dedicatedIps
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case dedicatedIps = "DedicatedIps"
            case nextToken = "NextToken"
        }
    }

    public struct GetDeliverabilityDashboardOptionsRequest: AWSEncodableShape {
        public init() {}
    }

    public struct GetDeliverabilityDashboardOptionsResponse: AWSDecodableShape {
        /// The current status of your Deliverability dashboard subscription. If this value is PENDING_EXPIRATION, your subscription is scheduled to expire at the end of the current calendar month.
        public let accountStatus: DeliverabilityDashboardAccountStatus?
        /// An array of objects, one for each verified domain that you use to send email and currently has an active Deliverability dashboard subscription that isn’t scheduled to expire at the end of the current calendar month.
        public let activeSubscribedDomains: [DomainDeliverabilityTrackingOption]?
        /// Specifies whether the Deliverability dashboard is enabled for your Amazon Pinpoint account. If this value is true, the dashboard is enabled.
        public let dashboardEnabled: Bool
        /// An array of objects, one for each verified domain that you use to send email and currently has an active Deliverability dashboard subscription that's scheduled to expire at the end of the current calendar month.
        public let pendingExpirationSubscribedDomains: [DomainDeliverabilityTrackingOption]?
        /// The date, in Unix time format, when your current subscription to the Deliverability dashboard is scheduled to expire, if your subscription is scheduled to expire at the end of the current calendar month. This value is null if you have an active subscription that isn’t due to expire at the end of the month.
        public let subscriptionExpiryDate: Date?

        public init(accountStatus: DeliverabilityDashboardAccountStatus? = nil, activeSubscribedDomains: [DomainDeliverabilityTrackingOption]? = nil, dashboardEnabled: Bool, pendingExpirationSubscribedDomains: [DomainDeliverabilityTrackingOption]? = nil, subscriptionExpiryDate: Date? = nil) {
            self.accountStatus = accountStatus
            self.activeSubscribedDomains = activeSubscribedDomains
            self.dashboardEnabled = dashboardEnabled
            self.pendingExpirationSubscribedDomains = pendingExpirationSubscribedDomains
            self.subscriptionExpiryDate = subscriptionExpiryDate
        }

        private enum CodingKeys: String, CodingKey {
            case accountStatus = "AccountStatus"
            case activeSubscribedDomains = "ActiveSubscribedDomains"
            case dashboardEnabled = "DashboardEnabled"
            case pendingExpirationSubscribedDomains = "PendingExpirationSubscribedDomains"
            case subscriptionExpiryDate = "SubscriptionExpiryDate"
        }
    }

    public struct GetDeliverabilityTestReportRequest: AWSEncodableShape {
        public static var _encoding = [
            AWSMemberEncoding(label: "reportId", location: .uri(locationName: "ReportId"))
        ]

        /// A unique string that identifies the predictive inbox placement test.
        public let reportId: String

        public init(reportId: String) {
            self.reportId = reportId
        }

        private enum CodingKeys: CodingKey {}
    }

    public struct GetDeliverabilityTestReportResponse: AWSDecodableShape {
        /// An object that contains the results of the predictive inbox placement test.
        public let deliverabilityTestReport: DeliverabilityTestReport
        /// An object that describes how the test email was handled by several email providers, including Gmail, Hotmail, Yahoo, AOL, and others.
        public let ispPlacements: [IspPlacement]
        /// An object that contains the message that you sent when you performed this predictive inbox placement test.
        public let message: String?
        /// An object that specifies how many test messages that were sent during the predictive inbox placement test were delivered to recipients' inboxes, how many were sent to recipients' spam folders, and how many weren't delivered.
        public let overallPlacement: PlacementStatistics
        /// An array of objects that define the tags (keys and values) that are associated with the predictive inbox placement test.
        public let tags: [Tag]?

        public init(deliverabilityTestReport: DeliverabilityTestReport, ispPlacements: [IspPlacement], message: String? = nil, overallPlacement: PlacementStatistics, tags: [Tag]? = nil) {
            self.deliverabilityTestReport = deliverabilityTestReport
            self.ispPlacements = ispPlacements
            self.message = message
            self.overallPlacement = overallPlacement
            self.tags = tags
        }

        private enum CodingKeys: String, CodingKey {
            case deliverabilityTestReport = "DeliverabilityTestReport"
            case ispPlacements = "IspPlacements"
            case message = "Message"
            case overallPlacement = "OverallPlacement"
            case tags = "Tags"
        }
    }

    public struct GetDomainDeliverabilityCampaignRequest: AWSEncodableShape {
        public static var _encoding = [
            AWSMemberEncoding(label: "campaignId", location: .uri(locationName: "CampaignId"))
        ]

        /// The unique identifier for the campaign. Amazon Pinpoint automatically generates and assigns this identifier to a campaign. This value is not the same as the campaign identifier that Amazon Pinpoint assigns to campaigns that you create and manage by using the Amazon Pinpoint API or the Amazon Pinpoint console.
        public let campaignId: String

        public init(campaignId: String) {
            self.campaignId = campaignId
        }

        private enum CodingKeys: CodingKey {}
    }

    public struct GetDomainDeliverabilityCampaignResponse: AWSDecodableShape {
        /// An object that contains the deliverability data for the campaign.
        public let domainDeliverabilityCampaign: DomainDeliverabilityCampaign

        public init(domainDeliverabilityCampaign: DomainDeliverabilityCampaign) {
            self.domainDeliverabilityCampaign = domainDeliverabilityCampaign
        }

        private enum CodingKeys: String, CodingKey {
            case domainDeliverabilityCampaign = "DomainDeliverabilityCampaign"
        }
    }

    public struct GetDomainStatisticsReportRequest: AWSEncodableShape {
        public static var _encoding = [
            AWSMemberEncoding(label: "domain", location: .uri(locationName: "Domain")),
            AWSMemberEncoding(label: "endDate", location: .querystring(locationName: "EndDate")),
            AWSMemberEncoding(label: "startDate", location: .querystring(locationName: "StartDate"))
        ]

        /// The domain that you want to obtain deliverability metrics for.
        public let domain: String
        /// The last day (in Unix time) that you want to obtain domain deliverability metrics for. The EndDate that you specify has to be less than or equal to 30 days after the StartDate.
        public let endDate: Date
        /// The first day (in Unix time) that you want to obtain domain deliverability metrics for.
        public let startDate: Date

        public init(domain: String, endDate: Date, startDate: Date) {
            self.domain = domain
            self.endDate = endDate
            self.startDate = startDate
        }

        private enum CodingKeys: CodingKey {}
    }

    public struct GetDomainStatisticsReportResponse: AWSDecodableShape {
        /// An object that contains deliverability metrics for the domain that you specified. This object contains data for each day, starting on the StartDate and ending on the EndDate.
        public let dailyVolumes: [DailyVolume]
        /// An object that contains deliverability metrics for the domain that you specified. The data in this object is a summary of all of the data that was collected from the StartDate to the EndDate.
        public let overallVolume: OverallVolume

        public init(dailyVolumes: [DailyVolume], overallVolume: OverallVolume) {
            self.dailyVolumes = dailyVolumes
            self.overallVolume = overallVolume
        }

        private enum CodingKeys: String, CodingKey {
            case dailyVolumes = "DailyVolumes"
            case overallVolume = "OverallVolume"
        }
    }

    public struct GetEmailIdentityRequest: AWSEncodableShape {
        public static var _encoding = [
            AWSMemberEncoding(label: "emailIdentity", location: .uri(locationName: "EmailIdentity"))
        ]

        /// The email identity that you want to retrieve details for.
        public let emailIdentity: String

        public init(emailIdentity: String) {
            self.emailIdentity = emailIdentity
        }

        private enum CodingKeys: CodingKey {}
    }

    public struct GetEmailIdentityResponse: AWSDecodableShape {
        /// An object that contains information about the DKIM attributes for the identity. This object includes the tokens that you use to create the CNAME records that are required to complete the DKIM verification process.
        public let dkimAttributes: DkimAttributes?
        /// The feedback forwarding configuration for the identity. If the value is true, Amazon Pinpoint sends you email notifications when bounce or complaint events occur. Amazon Pinpoint sends this notification to the address that you specified in the Return-Path header of the original email. When you set this value to false, Amazon Pinpoint sends notifications through other mechanisms, such as by notifying an Amazon SNS topic or another event destination. You're required to have a method of tracking bounces and complaints. If you haven't set up another mechanism for receiving bounce or complaint notifications, Amazon Pinpoint sends an email notification when these events occur (even if this setting is disabled).
        public let feedbackForwardingStatus: Bool?
        /// The email identity type.
        public let identityType: IdentityType?
        /// An object that contains information about the Mail-From attributes for the email identity.
        public let mailFromAttributes: MailFromAttributes?
        /// An array of objects that define the tags (keys and values) that are associated with the email identity.
        public let tags: [Tag]?
        /// Specifies whether or not the identity is verified. In Amazon Pinpoint, you can only send email from verified email addresses or domains. For more information about verifying identities, see the Amazon Pinpoint User Guide.
        public let verifiedForSendingStatus: Bool?

        public init(dkimAttributes: DkimAttributes? = nil, feedbackForwardingStatus: Bool? = nil, identityType: IdentityType? = nil, mailFromAttributes: MailFromAttributes? = nil, tags: [Tag]? = nil, verifiedForSendingStatus: Bool? = nil) {
            self.dkimAttributes = dkimAttributes
            self.feedbackForwardingStatus = feedbackForwardingStatus
            self.identityType = identityType
            self.mailFromAttributes = mailFromAttributes
            self.tags = tags
            self.verifiedForSendingStatus = verifiedForSendingStatus
        }

        private enum CodingKeys: String, CodingKey {
            case dkimAttributes = "DkimAttributes"
            case feedbackForwardingStatus = "FeedbackForwardingStatus"
            case identityType = "IdentityType"
            case mailFromAttributes = "MailFromAttributes"
            case tags = "Tags"
            case verifiedForSendingStatus = "VerifiedForSendingStatus"
        }
    }

    public struct IdentityInfo: AWSDecodableShape {
        /// The address or domain of the identity.
        public let identityName: String?
        /// The email identity type. The identity type can be one of the following:    EMAIL_ADDRESS – The identity is an email address.    DOMAIN – The identity is a domain.    MANAGED_DOMAIN – The identity is a domain that is managed by AWS.
        public let identityType: IdentityType?
        /// Indicates whether or not you can send email from the identity. In Amazon Pinpoint, an identity is an email address or domain that you send email from. Before you can send email from an identity, you have to demostrate that you own the identity, and that you authorize Amazon Pinpoint to send email from that identity.
        public let sendingEnabled: Bool?

        public init(identityName: String? = nil, identityType: IdentityType? = nil, sendingEnabled: Bool? = nil) {
            self.identityName = identityName
            self.identityType = identityType
            self.sendingEnabled = sendingEnabled
        }

        private enum CodingKeys: String, CodingKey {
            case identityName = "IdentityName"
            case identityType = "IdentityType"
            case sendingEnabled = "SendingEnabled"
        }
    }

    public struct InboxPlacementTrackingOption: AWSEncodableShape & AWSDecodableShape {
        /// Specifies whether inbox placement data is being tracked for the domain.
        public let global: Bool?
        /// An array of strings, one for each major email provider that the inbox placement data applies to.
        public let trackedIsps: [String]?

        public init(global: Bool? = nil, trackedIsps: [String]? = nil) {
            self.global = global
            self.trackedIsps = trackedIsps
        }

        private enum CodingKeys: String, CodingKey {
            case global = "Global"
            case trackedIsps = "TrackedIsps"
        }
    }

    public struct IspPlacement: AWSDecodableShape {
        /// The name of the email provider that the inbox placement data applies to.
        public let ispName: String?
        /// An object that contains inbox placement metrics for a specific email provider.
        public let placementStatistics: PlacementStatistics?

        public init(ispName: String? = nil, placementStatistics: PlacementStatistics? = nil) {
            self.ispName = ispName
            self.placementStatistics = placementStatistics
        }

        private enum CodingKeys: String, CodingKey {
            case ispName = "IspName"
            case placementStatistics = "PlacementStatistics"
        }
    }

    public struct KinesisFirehoseDestination: AWSEncodableShape & AWSDecodableShape {
        /// The Amazon Resource Name (ARN) of the Amazon Kinesis Data Firehose stream that Amazon Pinpoint sends email events to.
        public let deliveryStreamArn: String
        /// The Amazon Resource Name (ARN) of the IAM role that Amazon Pinpoint uses when sending email events to the Amazon Kinesis Data Firehose stream.
        public let iamRoleArn: String

        public init(deliveryStreamArn: String, iamRoleArn: String) {
            self.deliveryStreamArn = deliveryStreamArn
            self.iamRoleArn = iamRoleArn
        }

        private enum CodingKeys: String, CodingKey {
            case deliveryStreamArn = "DeliveryStreamArn"
            case iamRoleArn = "IamRoleArn"
        }
    }

    public struct ListConfigurationSetsRequest: AWSEncodableShape {
        public static var _encoding = [
            AWSMemberEncoding(label: "nextToken", location: .querystring(locationName: "NextToken")),
            AWSMemberEncoding(label: "pageSize", location: .querystring(locationName: "PageSize"))
        ]

        /// A token returned from a previous call to ListConfigurationSets to indicate the position in the list of configuration sets.
        public let nextToken: String?
        /// The number of results to show in a single call to ListConfigurationSets. If the number of results is larger than the number you specified in this parameter, then the response includes a NextToken element, which you can use to obtain additional results.
        public let pageSize: Int?

        public init(nextToken: String? = nil, pageSize: Int? = nil) {
            self.nextToken = nextToken
            self.pageSize = pageSize
        }

        private enum CodingKeys: CodingKey {}
    }

    public struct ListConfigurationSetsResponse: AWSDecodableShape {
        /// An array that contains all of the configuration sets in your Amazon Pinpoint account in the current AWS Region.
        public let configurationSets: [String]?
        /// A token that indicates that there are additional configuration sets to list. To view additional configuration sets, issue another request to ListConfigurationSets, and pass this token in the NextToken parameter.
        public let nextToken: String?

        public init(configurationSets: [String]? = nil, nextToken: String? = nil) {
            self.configurationSets = configurationSets
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case configurationSets = "ConfigurationSets"
            case nextToken = "NextToken"
        }
    }

    public struct ListDedicatedIpPoolsRequest: AWSEncodableShape {
        public static var _encoding = [
            AWSMemberEncoding(label: "nextToken", location: .querystring(locationName: "NextToken")),
            AWSMemberEncoding(label: "pageSize", location: .querystring(locationName: "PageSize"))
        ]

        /// A token returned from a previous call to ListDedicatedIpPools to indicate the position in the list of dedicated IP pools.
        public let nextToken: String?
        /// The number of results to show in a single call to ListDedicatedIpPools. If the number of results is larger than the number you specified in this parameter, then the response includes a NextToken element, which you can use to obtain additional results.
        public let pageSize: Int?

        public init(nextToken: String? = nil, pageSize: Int? = nil) {
            self.nextToken = nextToken
            self.pageSize = pageSize
        }

        private enum CodingKeys: CodingKey {}
    }

    public struct ListDedicatedIpPoolsResponse: AWSDecodableShape {
        /// A list of all of the dedicated IP pools that are associated with your Amazon Pinpoint account.
        public let dedicatedIpPools: [String]?
        /// A token that indicates that there are additional IP pools to list. To view additional IP pools, issue another request to ListDedicatedIpPools, passing this token in the NextToken parameter.
        public let nextToken: String?

        public init(dedicatedIpPools: [String]? = nil, nextToken: String? = nil) {
            self.dedicatedIpPools = dedicatedIpPools
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case dedicatedIpPools = "DedicatedIpPools"
            case nextToken = "NextToken"
        }
    }

    public struct ListDeliverabilityTestReportsRequest: AWSEncodableShape {
        public static var _encoding = [
            AWSMemberEncoding(label: "nextToken", location: .querystring(locationName: "NextToken")),
            AWSMemberEncoding(label: "pageSize", location: .querystring(locationName: "PageSize"))
        ]

        /// A token returned from a previous call to ListDeliverabilityTestReports to indicate the position in the list of predictive inbox placement tests.
        public let nextToken: String?
        /// The number of results to show in a single call to ListDeliverabilityTestReports. If the number of results is larger than the number you specified in this parameter, then the response includes a NextToken element, which you can use to obtain additional results. The value you specify has to be at least 0, and can be no more than 1000.
        public let pageSize: Int?

        public init(nextToken: String? = nil, pageSize: Int? = nil) {
            self.nextToken = nextToken
            self.pageSize = pageSize
        }

        private enum CodingKeys: CodingKey {}
    }

    public struct ListDeliverabilityTestReportsResponse: AWSDecodableShape {
        /// An object that contains a lists of predictive inbox placement tests that you've performed.
        public let deliverabilityTestReports: [DeliverabilityTestReport]
        /// A token that indicates that there are additional predictive inbox placement tests to list. To view additional predictive inbox placement tests, issue another request to ListDeliverabilityTestReports, and pass this token in the NextToken parameter.
        public let nextToken: String?

        public init(deliverabilityTestReports: [DeliverabilityTestReport], nextToken: String? = nil) {
            self.deliverabilityTestReports = deliverabilityTestReports
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case deliverabilityTestReports = "DeliverabilityTestReports"
            case nextToken = "NextToken"
        }
    }

    public struct ListDomainDeliverabilityCampaignsRequest: AWSEncodableShape {
        public static var _encoding = [
            AWSMemberEncoding(label: "endDate", location: .querystring(locationName: "EndDate")),
            AWSMemberEncoding(label: "nextToken", location: .querystring(locationName: "NextToken")),
            AWSMemberEncoding(label: "pageSize", location: .querystring(locationName: "PageSize")),
            AWSMemberEncoding(label: "startDate", location: .querystring(locationName: "StartDate")),
            AWSMemberEncoding(label: "subscribedDomain", location: .uri(locationName: "SubscribedDomain"))
        ]

        /// The last day, in Unix time format, that you want to obtain deliverability data for. This value has to be less than or equal to 30 days after the value of the StartDate parameter.
        public let endDate: Date
        /// A token that’s returned from a previous call to the ListDomainDeliverabilityCampaigns operation. This token indicates the position of a campaign in the list of campaigns.
        public let nextToken: String?
        /// The maximum number of results to include in response to a single call to the ListDomainDeliverabilityCampaigns operation. If the number of results is larger than the number that you specify in this parameter, the response includes a NextToken element, which you can use to obtain additional results.
        public let pageSize: Int?
        /// The first day, in Unix time format, that you want to obtain deliverability data for.
        public let startDate: Date
        /// The domain to obtain deliverability data for.
        public let subscribedDomain: String

        public init(endDate: Date, nextToken: String? = nil, pageSize: Int? = nil, startDate: Date, subscribedDomain: String) {
            self.endDate = endDate
            self.nextToken = nextToken
            self.pageSize = pageSize
            self.startDate = startDate
            self.subscribedDomain = subscribedDomain
        }

        private enum CodingKeys: CodingKey {}
    }

    public struct ListDomainDeliverabilityCampaignsResponse: AWSDecodableShape {
        /// An array of responses, one for each campaign that used the domain to send email during the specified time range.
        public let domainDeliverabilityCampaigns: [DomainDeliverabilityCampaign]
        /// A token that’s returned from a previous call to the ListDomainDeliverabilityCampaigns operation. This token indicates the position of the campaign in the list of campaigns.
        public let nextToken: String?

        public init(domainDeliverabilityCampaigns: [DomainDeliverabilityCampaign], nextToken: String? = nil) {
            self.domainDeliverabilityCampaigns = domainDeliverabilityCampaigns
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case domainDeliverabilityCampaigns = "DomainDeliverabilityCampaigns"
            case nextToken = "NextToken"
        }
    }

    public struct ListEmailIdentitiesRequest: AWSEncodableShape {
        public static var _encoding = [
            AWSMemberEncoding(label: "nextToken", location: .querystring(locationName: "NextToken")),
            AWSMemberEncoding(label: "pageSize", location: .querystring(locationName: "PageSize"))
        ]

        /// A token returned from a previous call to ListEmailIdentities to indicate the position in the list of identities.
        public let nextToken: String?
        /// The number of results to show in a single call to ListEmailIdentities. If the number of results is larger than the number you specified in this parameter, then the response includes a NextToken element, which you can use to obtain additional results. The value you specify has to be at least 0, and can be no more than 1000.
        public let pageSize: Int?

        public init(nextToken: String? = nil, pageSize: Int? = nil) {
            self.nextToken = nextToken
            self.pageSize = pageSize
        }

        private enum CodingKeys: CodingKey {}
    }

    public struct ListEmailIdentitiesResponse: AWSDecodableShape {
        /// An array that includes all of the identities associated with your Amazon Pinpoint account.
        public let emailIdentities: [IdentityInfo]?
        /// A token that indicates that there are additional configuration sets to list. To view additional configuration sets, issue another request to ListEmailIdentities, and pass this token in the NextToken parameter.
        public let nextToken: String?

        public init(emailIdentities: [IdentityInfo]? = nil, nextToken: String? = nil) {
            self.emailIdentities = emailIdentities
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case emailIdentities = "EmailIdentities"
            case nextToken = "NextToken"
        }
    }

    public struct ListTagsForResourceRequest: AWSEncodableShape {
        public static var _encoding = [
            AWSMemberEncoding(label: "resourceArn", location: .querystring(locationName: "ResourceArn"))
        ]

        /// The Amazon Resource Name (ARN) of the resource that you want to retrieve tag information for.
        public let resourceArn: String

        public init(resourceArn: String) {
            self.resourceArn = resourceArn
        }

        private enum CodingKeys: CodingKey {}
    }

    public struct ListTagsForResourceResponse: AWSDecodableShape {
        /// An array that lists all the tags that are associated with the resource. Each tag consists of a required tag key (Key) and an associated tag value (Value)
        public let tags: [Tag]

        public init(tags: [Tag]) {
            self.tags = tags
        }

        private enum CodingKeys: String, CodingKey {
            case tags = "Tags"
        }
    }

    public struct MailFromAttributes: AWSDecodableShape {
        /// The action that Amazon Pinpoint to takes if it can't read the required MX record for a custom MAIL FROM domain. When you set this value to UseDefaultValue, Amazon Pinpoint uses amazonses.com as the MAIL FROM domain. When you set this value to RejectMessage, Amazon Pinpoint returns a MailFromDomainNotVerified error, and doesn't attempt to deliver the email. These behaviors are taken when the custom MAIL FROM domain configuration is in the Pending, Failed, and TemporaryFailure states.
        public let behaviorOnMxFailure: BehaviorOnMxFailure
        /// The name of a domain that an email identity uses as a custom MAIL FROM domain.
        public let mailFromDomain: String
        /// The status of the MAIL FROM domain. This status can have the following values:    PENDING – Amazon Pinpoint hasn't started searching for the MX record yet.    SUCCESS – Amazon Pinpoint detected the required MX record for the MAIL FROM domain.    FAILED – Amazon Pinpoint can't find the required MX record, or the record no longer exists.    TEMPORARY_FAILURE – A temporary issue occurred, which prevented Amazon Pinpoint from determining the status of the MAIL FROM domain.
        public let mailFromDomainStatus: MailFromDomainStatus

        public init(behaviorOnMxFailure: BehaviorOnMxFailure, mailFromDomain: String, mailFromDomainStatus: MailFromDomainStatus) {
            self.behaviorOnMxFailure = behaviorOnMxFailure
            self.mailFromDomain = mailFromDomain
            self.mailFromDomainStatus = mailFromDomainStatus
        }

        private enum CodingKeys: String, CodingKey {
            case behaviorOnMxFailure = "BehaviorOnMxFailure"
            case mailFromDomain = "MailFromDomain"
            case mailFromDomainStatus = "MailFromDomainStatus"
        }
    }

    public struct Message: AWSEncodableShape {
        /// The body of the message. You can specify an HTML version of the message, a text-only version of the message, or both.
        public let body: Body
        /// The subject line of the email. The subject line can only contain 7-bit ASCII characters. However, you can specify non-ASCII characters in the subject line by using encoded-word syntax, as described in RFC 2047.
        public let subject: Content

        public init(body: Body, subject: Content) {
            self.body = body
            self.subject = subject
        }

        private enum CodingKeys: String, CodingKey {
            case body = "Body"
            case subject = "Subject"
        }
    }

    public struct MessageTag: AWSEncodableShape {
        /// The name of the message tag. The message tag name has to meet the following criteria:   It can only contain ASCII letters (a–z, A–Z), numbers (0–9), underscores (_), or dashes (-).   It can contain no more than 256 characters.
        public let name: String
        /// The value of the message tag. The message tag value has to meet the following criteria:   It can only contain ASCII letters (a–z, A–Z), numbers (0–9), underscores (_), or dashes (-).   It can contain no more than 256 characters.
        public let value: String

        public init(name: String, value: String) {
            self.name = name
            self.value = value
        }

        private enum CodingKeys: String, CodingKey {
            case name = "Name"
            case value = "Value"
        }
    }

    public struct OverallVolume: AWSDecodableShape {
        /// An object that contains inbox and junk mail placement metrics for individual email providers.
        public let domainIspPlacements: [DomainIspPlacement]?
        /// The percentage of emails that were sent from the domain that were read by their recipients.
        public let readRatePercent: Double?
        /// An object that contains information about the numbers of messages that arrived in recipients' inboxes and junk mail folders.
        public let volumeStatistics: VolumeStatistics?

        public init(domainIspPlacements: [DomainIspPlacement]? = nil, readRatePercent: Double? = nil, volumeStatistics: VolumeStatistics? = nil) {
            self.domainIspPlacements = domainIspPlacements
            self.readRatePercent = readRatePercent
            self.volumeStatistics = volumeStatistics
        }

        private enum CodingKeys: String, CodingKey {
            case domainIspPlacements = "DomainIspPlacements"
            case readRatePercent = "ReadRatePercent"
            case volumeStatistics = "VolumeStatistics"
        }
    }

    public struct PinpointDestination: AWSEncodableShape & AWSDecodableShape {
        /// The Amazon Resource Name (ARN) of the Amazon Pinpoint project that you want to send email events to.
        public let applicationArn: String?

        public init(applicationArn: String? = nil) {
            self.applicationArn = applicationArn
        }

        private enum CodingKeys: String, CodingKey {
            case applicationArn = "ApplicationArn"
        }
    }

    public struct PlacementStatistics: AWSDecodableShape {
        /// The percentage of emails that were authenticated by using DomainKeys Identified Mail (DKIM) during the predictive inbox placement test.
        public let dkimPercentage: Double?
        /// The percentage of emails that arrived in recipients' inboxes during the predictive inbox placement test.
        public let inboxPercentage: Double?
        /// The percentage of emails that didn't arrive in recipients' inboxes at all during the predictive inbox placement test.
        public let missingPercentage: Double?
        /// The percentage of emails that arrived in recipients' spam or junk mail folders during the predictive inbox placement test.
        public let spamPercentage: Double?
        /// The percentage of emails that were authenticated by using Sender Policy Framework (SPF) during the predictive inbox placement test.
        public let spfPercentage: Double?

        public init(dkimPercentage: Double? = nil, inboxPercentage: Double? = nil, missingPercentage: Double? = nil, spamPercentage: Double? = nil, spfPercentage: Double? = nil) {
            self.dkimPercentage = dkimPercentage
            self.inboxPercentage = inboxPercentage
            self.missingPercentage = missingPercentage
            self.spamPercentage = spamPercentage
            self.spfPercentage = spfPercentage
        }

        private enum CodingKeys: String, CodingKey {
            case dkimPercentage = "DkimPercentage"
            case inboxPercentage = "InboxPercentage"
            case missingPercentage = "MissingPercentage"
            case spamPercentage = "SpamPercentage"
            case spfPercentage = "SpfPercentage"
        }
    }

    public struct PutAccountDedicatedIpWarmupAttributesRequest: AWSEncodableShape {
        /// Enables or disables the automatic warm-up feature for dedicated IP addresses that are associated with your Amazon Pinpoint account in the current AWS Region. Set to true to enable the automatic warm-up feature, or set to false to disable it.
        public let autoWarmupEnabled: Bool?

        public init(autoWarmupEnabled: Bool? = nil) {
            self.autoWarmupEnabled = autoWarmupEnabled
        }

        private enum CodingKeys: String, CodingKey {
            case autoWarmupEnabled = "AutoWarmupEnabled"
        }
    }

    public struct PutAccountDedicatedIpWarmupAttributesResponse: AWSDecodableShape {
        public init() {}
    }

    public struct PutAccountSendingAttributesRequest: AWSEncodableShape {
        /// Enables or disables your account's ability to send email. Set to true to enable email sending, or set to false to disable email sending.  If AWS paused your account's ability to send email, you can't use this operation to resume your account's ability to send email.
        public let sendingEnabled: Bool?

        public init(sendingEnabled: Bool? = nil) {
            self.sendingEnabled = sendingEnabled
        }

        private enum CodingKeys: String, CodingKey {
            case sendingEnabled = "SendingEnabled"
        }
    }

    public struct PutAccountSendingAttributesResponse: AWSDecodableShape {
        public init() {}
    }

    public struct PutConfigurationSetDeliveryOptionsRequest: AWSEncodableShape {
        public static var _encoding = [
            AWSMemberEncoding(label: "configurationSetName", location: .uri(locationName: "ConfigurationSetName"))
        ]

        /// The name of the configuration set that you want to associate with a dedicated IP pool.
        public let configurationSetName: String
        /// The name of the dedicated IP pool that you want to associate with the configuration set.
        public let sendingPoolName: String?
        /// Specifies whether messages that use the configuration set are required to use Transport Layer Security (TLS). If the value is Require, messages are only delivered if a TLS connection can be established. If the value is Optional, messages can be delivered in plain text if a TLS connection can't be established.
        public let tlsPolicy: TlsPolicy?

        public init(configurationSetName: String, sendingPoolName: String? = nil, tlsPolicy: TlsPolicy? = nil) {
            self.configurationSetName = configurationSetName
            self.sendingPoolName = sendingPoolName
            self.tlsPolicy = tlsPolicy
        }

        private enum CodingKeys: String, CodingKey {
            case sendingPoolName = "SendingPoolName"
            case tlsPolicy = "TlsPolicy"
        }
    }

    public struct PutConfigurationSetDeliveryOptionsResponse: AWSDecodableShape {
        public init() {}
    }

    public struct PutConfigurationSetReputationOptionsRequest: AWSEncodableShape {
        public static var _encoding = [
            AWSMemberEncoding(label: "configurationSetName", location: .uri(locationName: "ConfigurationSetName"))
        ]

        /// The name of the configuration set that you want to enable or disable reputation metric tracking for.
        public let configurationSetName: String
        /// If true, tracking of reputation metrics is enabled for the configuration set. If false, tracking of reputation metrics is disabled for the configuration set.
        public let reputationMetricsEnabled: Bool?

        public init(configurationSetName: String, reputationMetricsEnabled: Bool? = nil) {
            self.configurationSetName = configurationSetName
            self.reputationMetricsEnabled = reputationMetricsEnabled
        }

        private enum CodingKeys: String, CodingKey {
            case reputationMetricsEnabled = "ReputationMetricsEnabled"
        }
    }

    public struct PutConfigurationSetReputationOptionsResponse: AWSDecodableShape {
        public init() {}
    }

    public struct PutConfigurationSetSendingOptionsRequest: AWSEncodableShape {
        public static var _encoding = [
            AWSMemberEncoding(label: "configurationSetName", location: .uri(locationName: "ConfigurationSetName"))
        ]

        /// The name of the configuration set that you want to enable or disable email sending for.
        public let configurationSetName: String
        /// If true, email sending is enabled for the configuration set. If false, email sending is disabled for the configuration set.
        public let sendingEnabled: Bool?

        public init(configurationSetName: String, sendingEnabled: Bool? = nil) {
            self.configurationSetName = configurationSetName
            self.sendingEnabled = sendingEnabled
        }

        private enum CodingKeys: String, CodingKey {
            case sendingEnabled = "SendingEnabled"
        }
    }

    public struct PutConfigurationSetSendingOptionsResponse: AWSDecodableShape {
        public init() {}
    }

    public struct PutConfigurationSetTrackingOptionsRequest: AWSEncodableShape {
        public static var _encoding = [
            AWSMemberEncoding(label: "configurationSetName", location: .uri(locationName: "ConfigurationSetName"))
        ]

        /// The name of the configuration set that you want to add a custom tracking domain to.
        public let configurationSetName: String
        /// The domain that you want to use to track open and click events.
        public let customRedirectDomain: String?

        public init(configurationSetName: String, customRedirectDomain: String? = nil) {
            self.configurationSetName = configurationSetName
            self.customRedirectDomain = customRedirectDomain
        }

        private enum CodingKeys: String, CodingKey {
            case customRedirectDomain = "CustomRedirectDomain"
        }
    }

    public struct PutConfigurationSetTrackingOptionsResponse: AWSDecodableShape {
        public init() {}
    }

    public struct PutDedicatedIpInPoolRequest: AWSEncodableShape {
        public static var _encoding = [
            AWSMemberEncoding(label: "ip", location: .uri(locationName: "Ip"))
        ]

        /// The name of the IP pool that you want to add the dedicated IP address to. You have to specify an IP pool that already exists.
        public let destinationPoolName: String
        /// The IP address that you want to move to the dedicated IP pool. The value you specify has to be a dedicated IP address that's associated with your Amazon Pinpoint account.
        public let ip: String

        public init(destinationPoolName: String, ip: String) {
            self.destinationPoolName = destinationPoolName
            self.ip = ip
        }

        private enum CodingKeys: String, CodingKey {
            case destinationPoolName = "DestinationPoolName"
        }
    }

    public struct PutDedicatedIpInPoolResponse: AWSDecodableShape {
        public init() {}
    }

    public struct PutDedicatedIpWarmupAttributesRequest: AWSEncodableShape {
        public static var _encoding = [
            AWSMemberEncoding(label: "ip", location: .uri(locationName: "Ip"))
        ]

        /// The dedicated IP address that you want to update the warm-up attributes for.
        public let ip: String
        /// The warm-up percentage that you want to associate with the dedicated IP address.
        public let warmupPercentage: Int

        public init(ip: String, warmupPercentage: Int) {
            self.ip = ip
            self.warmupPercentage = warmupPercentage
        }

        private enum CodingKeys: String, CodingKey {
            case warmupPercentage = "WarmupPercentage"
        }
    }

    public struct PutDedicatedIpWarmupAttributesResponse: AWSDecodableShape {
        public init() {}
    }

    public struct PutDeliverabilityDashboardOptionRequest: AWSEncodableShape {
        /// Specifies whether to enable the Deliverability dashboard for your Amazon Pinpoint account. To enable the dashboard, set this value to true.
        public let dashboardEnabled: Bool
        /// An array of objects, one for each verified domain that you use to send email and enabled the Deliverability dashboard for.
        public let subscribedDomains: [DomainDeliverabilityTrackingOption]?

        public init(dashboardEnabled: Bool, subscribedDomains: [DomainDeliverabilityTrackingOption]? = nil) {
            self.dashboardEnabled = dashboardEnabled
            self.subscribedDomains = subscribedDomains
        }

        private enum CodingKeys: String, CodingKey {
            case dashboardEnabled = "DashboardEnabled"
            case subscribedDomains = "SubscribedDomains"
        }
    }

    public struct PutDeliverabilityDashboardOptionResponse: AWSDecodableShape {
        public init() {}
    }

    public struct PutEmailIdentityDkimAttributesRequest: AWSEncodableShape {
        public static var _encoding = [
            AWSMemberEncoding(label: "emailIdentity", location: .uri(locationName: "EmailIdentity"))
        ]

        /// The email identity that you want to change the DKIM settings for.
        public let emailIdentity: String
        /// Sets the DKIM signing configuration for the identity. When you set this value true, then the messages that Amazon Pinpoint sends from the identity are DKIM-signed. When you set this value to false, then the messages that Amazon Pinpoint sends from the identity aren't DKIM-signed.
        public let signingEnabled: Bool?

        public init(emailIdentity: String, signingEnabled: Bool? = nil) {
            self.emailIdentity = emailIdentity
            self.signingEnabled = signingEnabled
        }

        private enum CodingKeys: String, CodingKey {
            case signingEnabled = "SigningEnabled"
        }
    }

    public struct PutEmailIdentityDkimAttributesResponse: AWSDecodableShape {
        public init() {}
    }

    public struct PutEmailIdentityFeedbackAttributesRequest: AWSEncodableShape {
        public static var _encoding = [
            AWSMemberEncoding(label: "emailIdentity", location: .uri(locationName: "EmailIdentity"))
        ]

        /// Sets the feedback forwarding configuration for the identity. If the value is true, Amazon Pinpoint sends you email notifications when bounce or complaint events occur. Amazon Pinpoint sends this notification to the address that you specified in the Return-Path header of the original email. When you set this value to false, Amazon Pinpoint sends notifications through other mechanisms, such as by notifying an Amazon SNS topic or another event destination. You're required to have a method of tracking bounces and complaints. If you haven't set up another mechanism for receiving bounce or complaint notifications, Amazon Pinpoint sends an email notification when these events occur (even if this setting is disabled).
        public let emailForwardingEnabled: Bool?
        /// The email identity that you want to configure bounce and complaint feedback forwarding for.
        public let emailIdentity: String

        public init(emailForwardingEnabled: Bool? = nil, emailIdentity: String) {
            self.emailForwardingEnabled = emailForwardingEnabled
            self.emailIdentity = emailIdentity
        }

        private enum CodingKeys: String, CodingKey {
            case emailForwardingEnabled = "EmailForwardingEnabled"
        }
    }

    public struct PutEmailIdentityFeedbackAttributesResponse: AWSDecodableShape {
        public init() {}
    }

    public struct PutEmailIdentityMailFromAttributesRequest: AWSEncodableShape {
        public static var _encoding = [
            AWSMemberEncoding(label: "emailIdentity", location: .uri(locationName: "EmailIdentity"))
        ]

        /// The action that you want Amazon Pinpoint to take if it can't read the required MX record when you send an email. When you set this value to UseDefaultValue, Amazon Pinpoint uses amazonses.com as the MAIL FROM domain. When you set this value to RejectMessage, Amazon Pinpoint returns a MailFromDomainNotVerified error, and doesn't attempt to deliver the email. These behaviors are taken when the custom MAIL FROM domain configuration is in the Pending, Failed, and TemporaryFailure states.
        public let behaviorOnMxFailure: BehaviorOnMxFailure?
        /// The verified email identity that you want to set up the custom MAIL FROM domain for.
        public let emailIdentity: String
        ///  The custom MAIL FROM domain that you want the verified identity to use. The MAIL FROM domain must meet the following criteria:   It has to be a subdomain of the verified identity.   It can't be used to receive email.   It can't be used in a "From" address if the MAIL FROM domain is a destination for feedback forwarding emails.
        public let mailFromDomain: String?

        public init(behaviorOnMxFailure: BehaviorOnMxFailure? = nil, emailIdentity: String, mailFromDomain: String? = nil) {
            self.behaviorOnMxFailure = behaviorOnMxFailure
            self.emailIdentity = emailIdentity
            self.mailFromDomain = mailFromDomain
        }

        private enum CodingKeys: String, CodingKey {
            case behaviorOnMxFailure = "BehaviorOnMxFailure"
            case mailFromDomain = "MailFromDomain"
        }
    }

    public struct PutEmailIdentityMailFromAttributesResponse: AWSDecodableShape {
        public init() {}
    }

    public struct RawMessage: AWSEncodableShape {
        /// The raw email message. The message has to meet the following criteria:   The message has to contain a header and a body, separated by one blank line.   All of the required header fields must be present in the message.   Each part of a multipart MIME message must be formatted properly.   Attachments must be in a file format that Amazon Pinpoint supports.    The entire message must be Base64 encoded.   If any of the MIME parts in your message contain content that is outside of the 7-bit ASCII character range, you should encode that content to ensure that recipients' email clients render the message properly.   The length of any single line of text in the message can't exceed 1,000 characters. This restriction is defined in RFC 5321.
        public let data: Data

        public init(data: Data) {
            self.data = data
        }

        private enum CodingKeys: String, CodingKey {
            case data = "Data"
        }
    }

    public struct ReputationOptions: AWSEncodableShape & AWSDecodableShape {
        /// The date and time (in Unix time) when the reputation metrics were last given a fresh start. When your account is given a fresh start, your reputation metrics are calculated starting from the date of the fresh start.
        public let lastFreshStart: Date?
        /// If true, tracking of reputation metrics is enabled for the configuration set. If false, tracking of reputation metrics is disabled for the configuration set.
        public let reputationMetricsEnabled: Bool?

        public init(lastFreshStart: Date? = nil, reputationMetricsEnabled: Bool? = nil) {
            self.lastFreshStart = lastFreshStart
            self.reputationMetricsEnabled = reputationMetricsEnabled
        }

        private enum CodingKeys: String, CodingKey {
            case lastFreshStart = "LastFreshStart"
            case reputationMetricsEnabled = "ReputationMetricsEnabled"
        }
    }

    public struct SendEmailRequest: AWSEncodableShape {
        /// The name of the configuration set that you want to use when sending the email.
        public let configurationSetName: String?
        /// An object that contains the body of the message. You can send either a Simple message or a Raw message.
        public let content: EmailContent
        /// An object that contains the recipients of the email message.
        public let destination: Destination
        /// A list of tags, in the form of name/value pairs, to apply to an email that you send using the SendEmail operation. Tags correspond to characteristics of the email that you define, so that you can publish email sending events.
        public let emailTags: [MessageTag]?
        /// The address that Amazon Pinpoint should send bounce and complaint notifications to.
        public let feedbackForwardingEmailAddress: String?
        /// The email address that you want to use as the "From" address for the email. The address that you specify has to be verified.
        public let fromEmailAddress: String?
        /// The "Reply-to" email addresses for the message. When the recipient replies to the message, each Reply-to address receives the reply.
        public let replyToAddresses: [String]?

        public init(configurationSetName: String? = nil, content: EmailContent, destination: Destination, emailTags: [MessageTag]? = nil, feedbackForwardingEmailAddress: String? = nil, fromEmailAddress: String? = nil, replyToAddresses: [String]? = nil) {
            self.configurationSetName = configurationSetName
            self.content = content
            self.destination = destination
            self.emailTags = emailTags
            self.feedbackForwardingEmailAddress = feedbackForwardingEmailAddress
            self.fromEmailAddress = fromEmailAddress
            self.replyToAddresses = replyToAddresses
        }

        public func validate(name: String) throws {
            try self.content.validate(name: "\(name).content")
        }

        private enum CodingKeys: String, CodingKey {
            case configurationSetName = "ConfigurationSetName"
            case content = "Content"
            case destination = "Destination"
            case emailTags = "EmailTags"
            case feedbackForwardingEmailAddress = "FeedbackForwardingEmailAddress"
            case fromEmailAddress = "FromEmailAddress"
            case replyToAddresses = "ReplyToAddresses"
        }
    }

    public struct SendEmailResponse: AWSDecodableShape {
        /// A unique identifier for the message that is generated when Amazon Pinpoint accepts the message.  It is possible for Amazon Pinpoint to accept a message without sending it. This can happen when the message you're trying to send has an attachment doesn't pass a virus check, or when you send a templated email that contains invalid personalization content, for example.
        public let messageId: String?

        public init(messageId: String? = nil) {
            self.messageId = messageId
        }

        private enum CodingKeys: String, CodingKey {
            case messageId = "MessageId"
        }
    }

    public struct SendQuota: AWSDecodableShape {
        /// The maximum number of emails that you can send in the current AWS Region over a 24-hour period. This value is also called your sending quota.
        public let max24HourSend: Double?
        /// The maximum number of emails that you can send per second in the current AWS Region. This value is also called your maximum sending rate or your maximum TPS (transactions per second) rate.
        public let maxSendRate: Double?
        /// The number of emails sent from your Amazon Pinpoint account in the current AWS Region over the past 24 hours.
        public let sentLast24Hours: Double?

        public init(max24HourSend: Double? = nil, maxSendRate: Double? = nil, sentLast24Hours: Double? = nil) {
            self.max24HourSend = max24HourSend
            self.maxSendRate = maxSendRate
            self.sentLast24Hours = sentLast24Hours
        }

        private enum CodingKeys: String, CodingKey {
            case max24HourSend = "Max24HourSend"
            case maxSendRate = "MaxSendRate"
            case sentLast24Hours = "SentLast24Hours"
        }
    }

    public struct SendingOptions: AWSEncodableShape & AWSDecodableShape {
        /// If true, email sending is enabled for the configuration set. If false, email sending is disabled for the configuration set.
        public let sendingEnabled: Bool?

        public init(sendingEnabled: Bool? = nil) {
            self.sendingEnabled = sendingEnabled
        }

        private enum CodingKeys: String, CodingKey {
            case sendingEnabled = "SendingEnabled"
        }
    }

    public struct SnsDestination: AWSEncodableShape & AWSDecodableShape {
        /// The Amazon Resource Name (ARN) of the Amazon SNS topic that you want to publish email events to. For more information about Amazon SNS topics, see the Amazon SNS Developer Guide.
        public let topicArn: String

        public init(topicArn: String) {
            self.topicArn = topicArn
        }

        private enum CodingKeys: String, CodingKey {
            case topicArn = "TopicArn"
        }
    }

    public struct Tag: AWSEncodableShape & AWSDecodableShape {
        /// One part of a key-value pair that defines a tag. The maximum length of a tag key is 128 characters. The minimum length is 1 character.
        public let key: String
        /// The optional part of a key-value pair that defines a tag. The maximum length of a tag value is 256 characters. The minimum length is 0 characters. If you don’t want a resource to have a specific tag value, don’t specify a value for this parameter. Amazon Pinpoint will set the value to an empty string.
        public let value: String

        public init(key: String, value: String) {
            self.key = key
            self.value = value
        }

        private enum CodingKeys: String, CodingKey {
            case key = "Key"
            case value = "Value"
        }
    }

    public struct TagResourceRequest: AWSEncodableShape {
        /// The Amazon Resource Name (ARN) of the resource that you want to add one or more tags to.
        public let resourceArn: String
        /// A list of the tags that you want to add to the resource. A tag consists of a required tag key (Key) and an associated tag value (Value). The maximum length of a tag key is 128 characters. The maximum length of a tag value is 256 characters.
        public let tags: [Tag]

        public init(resourceArn: String, tags: [Tag]) {
            self.resourceArn = resourceArn
            self.tags = tags
        }

        private enum CodingKeys: String, CodingKey {
            case resourceArn = "ResourceArn"
            case tags = "Tags"
        }
    }

    public struct TagResourceResponse: AWSDecodableShape {
        public init() {}
    }

    public struct Template: AWSEncodableShape {
        /// The Amazon Resource Name (ARN) of the template.
        public let templateArn: String?
        /// An object that defines the values to use for message variables in the template. This object is a set of key-value pairs. Each key defines a message variable in the template. The corresponding value defines the value to use for that variable.
        public let templateData: String?

        public init(templateArn: String? = nil, templateData: String? = nil) {
            self.templateArn = templateArn
            self.templateData = templateData
        }

        public func validate(name: String) throws {
            try self.validate(self.templateData, name: "templateData", parent: name, max: 262_144)
        }

        private enum CodingKeys: String, CodingKey {
            case templateArn = "TemplateArn"
            case templateData = "TemplateData"
        }
    }

    public struct TrackingOptions: AWSEncodableShape & AWSDecodableShape {
        /// The domain that you want to use for tracking open and click events.
        public let customRedirectDomain: String

        public init(customRedirectDomain: String) {
            self.customRedirectDomain = customRedirectDomain
        }

        private enum CodingKeys: String, CodingKey {
            case customRedirectDomain = "CustomRedirectDomain"
        }
    }

    public struct UntagResourceRequest: AWSEncodableShape {
        public static var _encoding = [
            AWSMemberEncoding(label: "resourceArn", location: .querystring(locationName: "ResourceArn")),
            AWSMemberEncoding(label: "tagKeys", location: .querystring(locationName: "TagKeys"))
        ]

        /// The Amazon Resource Name (ARN) of the resource that you want to remove one or more tags from.
        public let resourceArn: String
        /// The tags (tag keys) that you want to remove from the resource. When you specify a tag key, the action removes both that key and its associated tag value. To remove more than one tag from the resource, append the TagKeys parameter and argument for each additional tag to remove, separated by an ampersand. For example: /v1/email/tags?ResourceArn=ResourceArn&TagKeys=Key1&TagKeys=Key2
        public let tagKeys: [String]

        public init(resourceArn: String, tagKeys: [String]) {
            self.resourceArn = resourceArn
            self.tagKeys = tagKeys
        }

        private enum CodingKeys: CodingKey {}
    }

    public struct UntagResourceResponse: AWSDecodableShape {
        public init() {}
    }

    public struct UpdateConfigurationSetEventDestinationRequest: AWSEncodableShape {
        public static var _encoding = [
            AWSMemberEncoding(label: "configurationSetName", location: .uri(locationName: "ConfigurationSetName")),
            AWSMemberEncoding(label: "eventDestinationName", location: .uri(locationName: "EventDestinationName"))
        ]

        /// The name of the configuration set that contains the event destination that you want to modify.
        public let configurationSetName: String
        /// An object that defines the event destination.
        public let eventDestination: EventDestinationDefinition
        /// The name of the event destination that you want to modify.
        public let eventDestinationName: String

        public init(configurationSetName: String, eventDestination: EventDestinationDefinition, eventDestinationName: String) {
            self.configurationSetName = configurationSetName
            self.eventDestination = eventDestination
            self.eventDestinationName = eventDestinationName
        }

        private enum CodingKeys: String, CodingKey {
            case eventDestination = "EventDestination"
        }
    }

    public struct UpdateConfigurationSetEventDestinationResponse: AWSDecodableShape {
        public init() {}
    }

    public struct VolumeStatistics: AWSDecodableShape {
        /// The total number of emails that arrived in recipients' inboxes.
        public let inboxRawCount: Int64?
        /// An estimate of the percentage of emails sent from the current domain that will arrive in recipients' inboxes.
        public let projectedInbox: Int64?
        /// An estimate of the percentage of emails sent from the current domain that will arrive in recipients' spam or junk mail folders.
        public let projectedSpam: Int64?
        /// The total number of emails that arrived in recipients' spam or junk mail folders.
        public let spamRawCount: Int64?

        public init(inboxRawCount: Int64? = nil, projectedInbox: Int64? = nil, projectedSpam: Int64? = nil, spamRawCount: Int64? = nil) {
            self.inboxRawCount = inboxRawCount
            self.projectedInbox = projectedInbox
            self.projectedSpam = projectedSpam
            self.spamRawCount = spamRawCount
        }

        private enum CodingKeys: String, CodingKey {
            case inboxRawCount = "InboxRawCount"
            case projectedInbox = "ProjectedInbox"
            case projectedSpam = "ProjectedSpam"
            case spamRawCount = "SpamRawCount"
        }
    }
}
