//===----------------------------------------------------------------------===//
//
// This source file is part of the Soto for AWS open source project
//
// Copyright (c) 2017-2023 the Soto project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
// See CONTRIBUTORS.txt for the list of Soto project authors
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by https://github.com/soto-project/soto-codegenerator.
// DO NOT EDIT.

@_exported import SotoCore

/// Service object for interacting with AWS WorkDocs service.
///
/// The Amazon WorkDocs API is designed for the following use cases:   File Migration: File migration applications are supported for users who want to migrate their files from an on-premises or off-premises file system or service. Users can insert files into a user directory structure, as well as allow for basic metadata changes, such as modifications to the permissions of files.   Security: Support security applications are supported for users who have additional security needs, such as antivirus or data loss prevention. The API actions, along with CloudTrail, allow these applications to detect when changes occur in Amazon WorkDocs. Then, the application can take the necessary actions and replace the target file. If the target file violates the policy, the application can also choose to email the user.   eDiscovery/Analytics: General administrative applications are supported, such as eDiscovery and analytics. These applications can choose to mimic or record the actions in an Amazon WorkDocs site, along with CloudTrail, to replicate data for eDiscovery, backup, or analytical applications.   All Amazon WorkDocs API actions are Amazon authenticated and certificate-signed. They not only require the use of the Amazon Web Services SDK, but also allow for the exclusive use of IAM users and roles to help facilitate access, trust, and permission policies. By creating a role and allowing an IAM user to access the Amazon WorkDocs site, the IAM user gains full administrative visibility into the entire Amazon WorkDocs site (or as set in the IAM policy). This includes, but is not limited to, the ability to modify file permissions and upload any file to any user. This allows developers to perform the three use cases above, as well as give users the ability to grant access on a selective basis using the IAM model.  The pricing for Amazon WorkDocs APIs varies depending on the API call type for these actions:    READ  (Get*)     WRITE (Activate*, Add*, Create*, Deactivate*, Initiate*, Update*)     LIST (Describe*)     DELETE*, CANCEL    For information about Amazon WorkDocs API pricing, see Amazon WorkDocs Pricing.
public struct WorkDocs: AWSService {
    // MARK: Member variables

    /// Client used for communication with AWS
    public let client: AWSClient
    /// Service configuration
    public let config: AWSServiceConfig

    // MARK: Initialization

    /// Initialize the WorkDocs client
    /// - parameters:
    ///     - client: AWSClient used to process requests
    ///     - region: Region of server you want to communicate with. This will override the partition parameter.
    ///     - partition: AWS partition where service resides, standard (.aws), china (.awscn), government (.awsusgov).
    ///     - endpoint: Custom endpoint URL to use instead of standard AWS servers
    ///     - middleware: Middleware chain used to edit requests before they are sent and responses before they are decoded 
    ///     - timeout: Timeout value for HTTP requests
    ///     - byteBufferAllocator: Allocator for ByteBuffers
    ///     - options: Service options
    public init(
        client: AWSClient,
        region: SotoCore.Region? = nil,
        partition: AWSPartition = .aws,
        endpoint: String? = nil,
        middleware: AWSMiddlewareProtocol? = nil,
        timeout: TimeAmount? = nil,
        byteBufferAllocator: ByteBufferAllocator = ByteBufferAllocator(),
        options: AWSServiceConfig.Options = []
    ) {
        self.client = client
        self.config = AWSServiceConfig(
            region: region,
            partition: region?.partition ?? partition,
            serviceName: "WorkDocs",
            serviceIdentifier: "workdocs",
            serviceProtocol: .restjson,
            apiVersion: "2016-05-01",
            endpoint: endpoint,
            variantEndpoints: Self.variantEndpoints,
            errorType: WorkDocsErrorType.self,
            xmlNamespace: "https://aws.amazon.com/api/v1/",
            middleware: middleware,
            timeout: timeout,
            byteBufferAllocator: byteBufferAllocator,
            options: options
        )
    }




    /// FIPS and dualstack endpoints
    static var variantEndpoints: [EndpointVariantType: AWSServiceConfig.EndpointVariant] {[
        [.fips]: .init(endpoints: [
            "us-east-1": "workdocs-fips.us-east-1.amazonaws.com",
            "us-west-2": "workdocs-fips.us-west-2.amazonaws.com"
        ])
    ]}

    // MARK: API Calls

    /// Aborts the upload of the specified document version that was previously initiated by InitiateDocumentVersionUpload. The client should make this call only when it no longer intends to upload the document version, or fails to do so.
    @Sendable
    public func abortDocumentVersionUpload(_ input: AbortDocumentVersionUploadRequest, logger: Logger = AWSClient.loggingDisabled) async throws {
        return try await self.client.execute(
            operation: "AbortDocumentVersionUpload", 
            path: "/api/v1/documents/{DocumentId}/versions/{VersionId}", 
            httpMethod: .DELETE, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Activates the specified user. Only active users can access Amazon WorkDocs.
    @Sendable
    public func activateUser(_ input: ActivateUserRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> ActivateUserResponse {
        return try await self.client.execute(
            operation: "ActivateUser", 
            path: "/api/v1/users/{UserId}/activation", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Creates a set of permissions for the specified folder or document. The resource permissions are overwritten if the principals already have different permissions.
    @Sendable
    public func addResourcePermissions(_ input: AddResourcePermissionsRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> AddResourcePermissionsResponse {
        return try await self.client.execute(
            operation: "AddResourcePermissions", 
            path: "/api/v1/resources/{ResourceId}/permissions", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Adds a new comment to the specified document version.
    @Sendable
    public func createComment(_ input: CreateCommentRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> CreateCommentResponse {
        return try await self.client.execute(
            operation: "CreateComment", 
            path: "/api/v1/documents/{DocumentId}/versions/{VersionId}/comment", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Adds one or more custom properties to the specified resource (a folder, document, or version).
    @Sendable
    public func createCustomMetadata(_ input: CreateCustomMetadataRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> CreateCustomMetadataResponse {
        return try await self.client.execute(
            operation: "CreateCustomMetadata", 
            path: "/api/v1/resources/{ResourceId}/customMetadata", 
            httpMethod: .PUT, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Creates a folder with the specified name and parent folder.
    @Sendable
    public func createFolder(_ input: CreateFolderRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> CreateFolderResponse {
        return try await self.client.execute(
            operation: "CreateFolder", 
            path: "/api/v1/folders", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Adds the specified list of labels to the given resource (a document or folder)
    @Sendable
    public func createLabels(_ input: CreateLabelsRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> CreateLabelsResponse {
        return try await self.client.execute(
            operation: "CreateLabels", 
            path: "/api/v1/resources/{ResourceId}/labels", 
            httpMethod: .PUT, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Configure Amazon WorkDocs to use Amazon SNS notifications. The endpoint receives a confirmation message, and must confirm the subscription. For more information, see Setting up notifications for an IAM user or role in the Amazon WorkDocs Developer Guide.
    @Sendable
    public func createNotificationSubscription(_ input: CreateNotificationSubscriptionRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> CreateNotificationSubscriptionResponse {
        return try await self.client.execute(
            operation: "CreateNotificationSubscription", 
            path: "/api/v1/organizations/{OrganizationId}/subscriptions", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Creates a user in a Simple AD or Microsoft AD directory. The status of a newly created user is "ACTIVE". New users can access Amazon WorkDocs.
    @Sendable
    public func createUser(_ input: CreateUserRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> CreateUserResponse {
        return try await self.client.execute(
            operation: "CreateUser", 
            path: "/api/v1/users", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Deactivates the specified user, which revokes the user's access to Amazon WorkDocs.
    @Sendable
    public func deactivateUser(_ input: DeactivateUserRequest, logger: Logger = AWSClient.loggingDisabled) async throws {
        return try await self.client.execute(
            operation: "DeactivateUser", 
            path: "/api/v1/users/{UserId}/activation", 
            httpMethod: .DELETE, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Deletes the specified comment from the document version.
    @Sendable
    public func deleteComment(_ input: DeleteCommentRequest, logger: Logger = AWSClient.loggingDisabled) async throws {
        return try await self.client.execute(
            operation: "DeleteComment", 
            path: "/api/v1/documents/{DocumentId}/versions/{VersionId}/comment/{CommentId}", 
            httpMethod: .DELETE, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Deletes custom metadata from the specified resource.
    @Sendable
    public func deleteCustomMetadata(_ input: DeleteCustomMetadataRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DeleteCustomMetadataResponse {
        return try await self.client.execute(
            operation: "DeleteCustomMetadata", 
            path: "/api/v1/resources/{ResourceId}/customMetadata", 
            httpMethod: .DELETE, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Permanently deletes the specified document and its associated metadata.
    @Sendable
    public func deleteDocument(_ input: DeleteDocumentRequest, logger: Logger = AWSClient.loggingDisabled) async throws {
        return try await self.client.execute(
            operation: "DeleteDocument", 
            path: "/api/v1/documents/{DocumentId}", 
            httpMethod: .DELETE, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Deletes a specific version of a document.
    @Sendable
    public func deleteDocumentVersion(_ input: DeleteDocumentVersionRequest, logger: Logger = AWSClient.loggingDisabled) async throws {
        return try await self.client.execute(
            operation: "DeleteDocumentVersion", 
            path: "/api/v1/documentVersions/{DocumentId}/versions/{VersionId}", 
            httpMethod: .DELETE, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Permanently deletes the specified folder and its contents.
    @Sendable
    public func deleteFolder(_ input: DeleteFolderRequest, logger: Logger = AWSClient.loggingDisabled) async throws {
        return try await self.client.execute(
            operation: "DeleteFolder", 
            path: "/api/v1/folders/{FolderId}", 
            httpMethod: .DELETE, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Deletes the contents of the specified folder.
    @Sendable
    public func deleteFolderContents(_ input: DeleteFolderContentsRequest, logger: Logger = AWSClient.loggingDisabled) async throws {
        return try await self.client.execute(
            operation: "DeleteFolderContents", 
            path: "/api/v1/folders/{FolderId}/contents", 
            httpMethod: .DELETE, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Deletes the specified list of labels from a resource.
    @Sendable
    public func deleteLabels(_ input: DeleteLabelsRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DeleteLabelsResponse {
        return try await self.client.execute(
            operation: "DeleteLabels", 
            path: "/api/v1/resources/{ResourceId}/labels", 
            httpMethod: .DELETE, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Deletes the specified subscription from the specified organization.
    @Sendable
    public func deleteNotificationSubscription(_ input: DeleteNotificationSubscriptionRequest, logger: Logger = AWSClient.loggingDisabled) async throws {
        return try await self.client.execute(
            operation: "DeleteNotificationSubscription", 
            path: "/api/v1/organizations/{OrganizationId}/subscriptions/{SubscriptionId}", 
            httpMethod: .DELETE, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Deletes the specified user from a Simple AD or Microsoft AD directory.  Deleting a user immediately and permanently deletes all content in that user's folder structure. Site retention policies do NOT apply to this type of deletion.
    @Sendable
    public func deleteUser(_ input: DeleteUserRequest, logger: Logger = AWSClient.loggingDisabled) async throws {
        return try await self.client.execute(
            operation: "DeleteUser", 
            path: "/api/v1/users/{UserId}", 
            httpMethod: .DELETE, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Describes the user activities in a specified time period.
    @Sendable
    public func describeActivities(_ input: DescribeActivitiesRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DescribeActivitiesResponse {
        return try await self.client.execute(
            operation: "DescribeActivities", 
            path: "/api/v1/activities", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// List all the comments for the specified document version.
    @Sendable
    public func describeComments(_ input: DescribeCommentsRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DescribeCommentsResponse {
        return try await self.client.execute(
            operation: "DescribeComments", 
            path: "/api/v1/documents/{DocumentId}/versions/{VersionId}/comments", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Retrieves the document versions for the specified document. By default, only active versions are returned.
    @Sendable
    public func describeDocumentVersions(_ input: DescribeDocumentVersionsRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DescribeDocumentVersionsResponse {
        return try await self.client.execute(
            operation: "DescribeDocumentVersions", 
            path: "/api/v1/documents/{DocumentId}/versions", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Describes the contents of the specified folder, including its documents and subfolders. By default, Amazon WorkDocs returns the first 100 active document and folder metadata items. If there are more results, the response includes a marker that you can use to request the next set of results. You can also request initialized documents.
    @Sendable
    public func describeFolderContents(_ input: DescribeFolderContentsRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DescribeFolderContentsResponse {
        return try await self.client.execute(
            operation: "DescribeFolderContents", 
            path: "/api/v1/folders/{FolderId}/contents", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Describes the groups specified by the query. Groups are defined by the underlying Active Directory.
    @Sendable
    public func describeGroups(_ input: DescribeGroupsRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DescribeGroupsResponse {
        return try await self.client.execute(
            operation: "DescribeGroups", 
            path: "/api/v1/groups", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Lists the specified notification subscriptions.
    @Sendable
    public func describeNotificationSubscriptions(_ input: DescribeNotificationSubscriptionsRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DescribeNotificationSubscriptionsResponse {
        return try await self.client.execute(
            operation: "DescribeNotificationSubscriptions", 
            path: "/api/v1/organizations/{OrganizationId}/subscriptions", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Describes the permissions of a specified resource.
    @Sendable
    public func describeResourcePermissions(_ input: DescribeResourcePermissionsRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DescribeResourcePermissionsResponse {
        return try await self.client.execute(
            operation: "DescribeResourcePermissions", 
            path: "/api/v1/resources/{ResourceId}/permissions", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Describes the current user's special folders; the RootFolder and the RecycleBin. RootFolder is the root of user's files and folders and RecycleBin is the root of recycled items. This is not a valid action for SigV4 (administrative API) clients. This action requires an authentication token. To get an authentication token, register an application with Amazon WorkDocs. For more information, see Authentication and Access Control for User Applications in the Amazon WorkDocs Developer Guide.
    @Sendable
    public func describeRootFolders(_ input: DescribeRootFoldersRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DescribeRootFoldersResponse {
        return try await self.client.execute(
            operation: "DescribeRootFolders", 
            path: "/api/v1/me/root", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Describes the specified users. You can describe all users or filter the results (for example, by status or organization). By default, Amazon WorkDocs returns the first 24 active or pending users. If there are more results, the response includes a marker that you can use to request the next set of results.
    @Sendable
    public func describeUsers(_ input: DescribeUsersRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DescribeUsersResponse {
        return try await self.client.execute(
            operation: "DescribeUsers", 
            path: "/api/v1/users", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Retrieves details of the current user for whom the authentication token was generated. This is not a valid action for SigV4 (administrative API) clients. This action requires an authentication token. To get an authentication token, register an application with Amazon WorkDocs. For more information, see Authentication and Access Control for User Applications in the Amazon WorkDocs Developer Guide.
    @Sendable
    public func getCurrentUser(_ input: GetCurrentUserRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> GetCurrentUserResponse {
        return try await self.client.execute(
            operation: "GetCurrentUser", 
            path: "/api/v1/me", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Retrieves details of a document.
    @Sendable
    public func getDocument(_ input: GetDocumentRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> GetDocumentResponse {
        return try await self.client.execute(
            operation: "GetDocument", 
            path: "/api/v1/documents/{DocumentId}", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Retrieves the path information (the hierarchy from the root folder) for the requested document. By default, Amazon WorkDocs returns a maximum of 100 levels upwards from the requested document and only includes the IDs of the parent folders in the path. You can limit the maximum number of levels. You can also request the names of the parent folders.
    @Sendable
    public func getDocumentPath(_ input: GetDocumentPathRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> GetDocumentPathResponse {
        return try await self.client.execute(
            operation: "GetDocumentPath", 
            path: "/api/v1/documents/{DocumentId}/path", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Retrieves version metadata for the specified document.
    @Sendable
    public func getDocumentVersion(_ input: GetDocumentVersionRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> GetDocumentVersionResponse {
        return try await self.client.execute(
            operation: "GetDocumentVersion", 
            path: "/api/v1/documents/{DocumentId}/versions/{VersionId}", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Retrieves the metadata of the specified folder.
    @Sendable
    public func getFolder(_ input: GetFolderRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> GetFolderResponse {
        return try await self.client.execute(
            operation: "GetFolder", 
            path: "/api/v1/folders/{FolderId}", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Retrieves the path information (the hierarchy from the root folder) for the specified folder. By default, Amazon WorkDocs returns a maximum of 100 levels upwards from the requested folder and only includes the IDs of the parent folders in the path. You can limit the maximum number of levels. You can also request the parent folder names.
    @Sendable
    public func getFolderPath(_ input: GetFolderPathRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> GetFolderPathResponse {
        return try await self.client.execute(
            operation: "GetFolderPath", 
            path: "/api/v1/folders/{FolderId}/path", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Retrieves a collection of resources, including folders and documents. The only CollectionType supported is SHARED_WITH_ME.
    @Sendable
    public func getResources(_ input: GetResourcesRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> GetResourcesResponse {
        return try await self.client.execute(
            operation: "GetResources", 
            path: "/api/v1/resources", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Creates a new document object and version object. The client specifies the parent folder ID and name of the document to upload. The ID is optionally specified when creating a new version of an existing document. This is the first step to upload a document. Next, upload the document to the URL returned from the call, and then call UpdateDocumentVersion. To cancel the document upload, call AbortDocumentVersionUpload.
    @Sendable
    public func initiateDocumentVersionUpload(_ input: InitiateDocumentVersionUploadRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> InitiateDocumentVersionUploadResponse {
        return try await self.client.execute(
            operation: "InitiateDocumentVersionUpload", 
            path: "/api/v1/documents", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Removes all the permissions from the specified resource.
    @Sendable
    public func removeAllResourcePermissions(_ input: RemoveAllResourcePermissionsRequest, logger: Logger = AWSClient.loggingDisabled) async throws {
        return try await self.client.execute(
            operation: "RemoveAllResourcePermissions", 
            path: "/api/v1/resources/{ResourceId}/permissions", 
            httpMethod: .DELETE, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Removes the permission for the specified principal from the specified resource.
    @Sendable
    public func removeResourcePermission(_ input: RemoveResourcePermissionRequest, logger: Logger = AWSClient.loggingDisabled) async throws {
        return try await self.client.execute(
            operation: "RemoveResourcePermission", 
            path: "/api/v1/resources/{ResourceId}/permissions/{PrincipalId}", 
            httpMethod: .DELETE, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Recovers a deleted version of an Amazon WorkDocs document.
    @Sendable
    public func restoreDocumentVersions(_ input: RestoreDocumentVersionsRequest, logger: Logger = AWSClient.loggingDisabled) async throws {
        return try await self.client.execute(
            operation: "RestoreDocumentVersions", 
            path: "/api/v1/documentVersions/restore/{DocumentId}", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Searches metadata and the content of folders, documents, document versions, and comments.
    @Sendable
    public func searchResources(_ input: SearchResourcesRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> SearchResourcesResponse {
        return try await self.client.execute(
            operation: "SearchResources", 
            path: "/api/v1/search", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Updates the specified attributes of a document. The user must have access to both the document and its parent folder, if applicable.
    @Sendable
    public func updateDocument(_ input: UpdateDocumentRequest, logger: Logger = AWSClient.loggingDisabled) async throws {
        return try await self.client.execute(
            operation: "UpdateDocument", 
            path: "/api/v1/documents/{DocumentId}", 
            httpMethod: .PATCH, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Changes the status of the document version to ACTIVE.  Amazon WorkDocs also sets its document container to ACTIVE. This is the last step in a document upload, after the client uploads the document to an S3-presigned URL returned by InitiateDocumentVersionUpload.
    @Sendable
    public func updateDocumentVersion(_ input: UpdateDocumentVersionRequest, logger: Logger = AWSClient.loggingDisabled) async throws {
        return try await self.client.execute(
            operation: "UpdateDocumentVersion", 
            path: "/api/v1/documents/{DocumentId}/versions/{VersionId}", 
            httpMethod: .PATCH, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Updates the specified attributes of the specified folder. The user must have access to both the folder and its parent folder, if applicable.
    @Sendable
    public func updateFolder(_ input: UpdateFolderRequest, logger: Logger = AWSClient.loggingDisabled) async throws {
        return try await self.client.execute(
            operation: "UpdateFolder", 
            path: "/api/v1/folders/{FolderId}", 
            httpMethod: .PATCH, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Updates the specified attributes of the specified user, and grants or revokes administrative privileges to the Amazon WorkDocs site.
    @Sendable
    public func updateUser(_ input: UpdateUserRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> UpdateUserResponse {
        return try await self.client.execute(
            operation: "UpdateUser", 
            path: "/api/v1/users/{UserId}", 
            httpMethod: .PATCH, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
}

extension WorkDocs {
    /// Initializer required by `AWSService.with(middlewares:timeout:byteBufferAllocator:options)`. You are not able to use this initializer directly as there are not public
    /// initializers for `AWSServiceConfig.Patch`. Please use `AWSService.with(middlewares:timeout:byteBufferAllocator:options)` instead.
    public init(from: WorkDocs, patch: AWSServiceConfig.Patch) {
        self.client = from.client
        self.config = from.config.with(patch: patch)
    }
}

// MARK: Paginators

@available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
extension WorkDocs {
    /// Describes the user activities in a specified time period.
    /// Return PaginatorSequence for operation.
    ///
    /// - Parameters:
    ///   - input: Input for request
    ///   - logger: Logger used flot logging
    public func describeActivitiesPaginator(
        _ input: DescribeActivitiesRequest,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<DescribeActivitiesRequest, DescribeActivitiesResponse> {
        return .init(
            input: input,
            command: self.describeActivities,
            inputKey: \DescribeActivitiesRequest.marker,
            outputKey: \DescribeActivitiesResponse.marker,
            logger: logger
        )
    }

    /// List all the comments for the specified document version.
    /// Return PaginatorSequence for operation.
    ///
    /// - Parameters:
    ///   - input: Input for request
    ///   - logger: Logger used flot logging
    public func describeCommentsPaginator(
        _ input: DescribeCommentsRequest,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<DescribeCommentsRequest, DescribeCommentsResponse> {
        return .init(
            input: input,
            command: self.describeComments,
            inputKey: \DescribeCommentsRequest.marker,
            outputKey: \DescribeCommentsResponse.marker,
            logger: logger
        )
    }

    /// Retrieves the document versions for the specified document. By default, only active versions are returned.
    /// Return PaginatorSequence for operation.
    ///
    /// - Parameters:
    ///   - input: Input for request
    ///   - logger: Logger used flot logging
    public func describeDocumentVersionsPaginator(
        _ input: DescribeDocumentVersionsRequest,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<DescribeDocumentVersionsRequest, DescribeDocumentVersionsResponse> {
        return .init(
            input: input,
            command: self.describeDocumentVersions,
            inputKey: \DescribeDocumentVersionsRequest.marker,
            outputKey: \DescribeDocumentVersionsResponse.marker,
            logger: logger
        )
    }

    /// Describes the contents of the specified folder, including its documents and subfolders. By default, Amazon WorkDocs returns the first 100 active document and folder metadata items. If there are more results, the response includes a marker that you can use to request the next set of results. You can also request initialized documents.
    /// Return PaginatorSequence for operation.
    ///
    /// - Parameters:
    ///   - input: Input for request
    ///   - logger: Logger used flot logging
    public func describeFolderContentsPaginator(
        _ input: DescribeFolderContentsRequest,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<DescribeFolderContentsRequest, DescribeFolderContentsResponse> {
        return .init(
            input: input,
            command: self.describeFolderContents,
            inputKey: \DescribeFolderContentsRequest.marker,
            outputKey: \DescribeFolderContentsResponse.marker,
            logger: logger
        )
    }

    /// Describes the groups specified by the query. Groups are defined by the underlying Active Directory.
    /// Return PaginatorSequence for operation.
    ///
    /// - Parameters:
    ///   - input: Input for request
    ///   - logger: Logger used flot logging
    public func describeGroupsPaginator(
        _ input: DescribeGroupsRequest,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<DescribeGroupsRequest, DescribeGroupsResponse> {
        return .init(
            input: input,
            command: self.describeGroups,
            inputKey: \DescribeGroupsRequest.marker,
            outputKey: \DescribeGroupsResponse.marker,
            logger: logger
        )
    }

    /// Lists the specified notification subscriptions.
    /// Return PaginatorSequence for operation.
    ///
    /// - Parameters:
    ///   - input: Input for request
    ///   - logger: Logger used flot logging
    public func describeNotificationSubscriptionsPaginator(
        _ input: DescribeNotificationSubscriptionsRequest,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<DescribeNotificationSubscriptionsRequest, DescribeNotificationSubscriptionsResponse> {
        return .init(
            input: input,
            command: self.describeNotificationSubscriptions,
            inputKey: \DescribeNotificationSubscriptionsRequest.marker,
            outputKey: \DescribeNotificationSubscriptionsResponse.marker,
            logger: logger
        )
    }

    /// Describes the permissions of a specified resource.
    /// Return PaginatorSequence for operation.
    ///
    /// - Parameters:
    ///   - input: Input for request
    ///   - logger: Logger used flot logging
    public func describeResourcePermissionsPaginator(
        _ input: DescribeResourcePermissionsRequest,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<DescribeResourcePermissionsRequest, DescribeResourcePermissionsResponse> {
        return .init(
            input: input,
            command: self.describeResourcePermissions,
            inputKey: \DescribeResourcePermissionsRequest.marker,
            outputKey: \DescribeResourcePermissionsResponse.marker,
            logger: logger
        )
    }

    /// Describes the current user's special folders; the RootFolder and the RecycleBin. RootFolder is the root of user's files and folders and RecycleBin is the root of recycled items. This is not a valid action for SigV4 (administrative API) clients. This action requires an authentication token. To get an authentication token, register an application with Amazon WorkDocs. For more information, see Authentication and Access Control for User Applications in the Amazon WorkDocs Developer Guide.
    /// Return PaginatorSequence for operation.
    ///
    /// - Parameters:
    ///   - input: Input for request
    ///   - logger: Logger used flot logging
    public func describeRootFoldersPaginator(
        _ input: DescribeRootFoldersRequest,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<DescribeRootFoldersRequest, DescribeRootFoldersResponse> {
        return .init(
            input: input,
            command: self.describeRootFolders,
            inputKey: \DescribeRootFoldersRequest.marker,
            outputKey: \DescribeRootFoldersResponse.marker,
            logger: logger
        )
    }

    /// Describes the specified users. You can describe all users or filter the results (for example, by status or organization). By default, Amazon WorkDocs returns the first 24 active or pending users. If there are more results, the response includes a marker that you can use to request the next set of results.
    /// Return PaginatorSequence for operation.
    ///
    /// - Parameters:
    ///   - input: Input for request
    ///   - logger: Logger used flot logging
    public func describeUsersPaginator(
        _ input: DescribeUsersRequest,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<DescribeUsersRequest, DescribeUsersResponse> {
        return .init(
            input: input,
            command: self.describeUsers,
            inputKey: \DescribeUsersRequest.marker,
            outputKey: \DescribeUsersResponse.marker,
            logger: logger
        )
    }

    /// Searches metadata and the content of folders, documents, document versions, and comments.
    /// Return PaginatorSequence for operation.
    ///
    /// - Parameters:
    ///   - input: Input for request
    ///   - logger: Logger used flot logging
    public func searchResourcesPaginator(
        _ input: SearchResourcesRequest,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<SearchResourcesRequest, SearchResourcesResponse> {
        return .init(
            input: input,
            command: self.searchResources,
            inputKey: \SearchResourcesRequest.marker,
            outputKey: \SearchResourcesResponse.marker,
            logger: logger
        )
    }
}

extension WorkDocs.DescribeActivitiesRequest: AWSPaginateToken {
    public func usingPaginationToken(_ token: String) -> WorkDocs.DescribeActivitiesRequest {
        return .init(
            activityTypes: self.activityTypes,
            authenticationToken: self.authenticationToken,
            endTime: self.endTime,
            includeIndirectActivities: self.includeIndirectActivities,
            limit: self.limit,
            marker: token,
            organizationId: self.organizationId,
            resourceId: self.resourceId,
            startTime: self.startTime,
            userId: self.userId
        )
    }
}

extension WorkDocs.DescribeCommentsRequest: AWSPaginateToken {
    public func usingPaginationToken(_ token: String) -> WorkDocs.DescribeCommentsRequest {
        return .init(
            authenticationToken: self.authenticationToken,
            documentId: self.documentId,
            limit: self.limit,
            marker: token,
            versionId: self.versionId
        )
    }
}

extension WorkDocs.DescribeDocumentVersionsRequest: AWSPaginateToken {
    public func usingPaginationToken(_ token: String) -> WorkDocs.DescribeDocumentVersionsRequest {
        return .init(
            authenticationToken: self.authenticationToken,
            documentId: self.documentId,
            fields: self.fields,
            include: self.include,
            limit: self.limit,
            marker: token
        )
    }
}

extension WorkDocs.DescribeFolderContentsRequest: AWSPaginateToken {
    public func usingPaginationToken(_ token: String) -> WorkDocs.DescribeFolderContentsRequest {
        return .init(
            authenticationToken: self.authenticationToken,
            folderId: self.folderId,
            include: self.include,
            limit: self.limit,
            marker: token,
            order: self.order,
            sort: self.sort,
            type: self.type
        )
    }
}

extension WorkDocs.DescribeGroupsRequest: AWSPaginateToken {
    public func usingPaginationToken(_ token: String) -> WorkDocs.DescribeGroupsRequest {
        return .init(
            authenticationToken: self.authenticationToken,
            limit: self.limit,
            marker: token,
            organizationId: self.organizationId,
            searchQuery: self.searchQuery
        )
    }
}

extension WorkDocs.DescribeNotificationSubscriptionsRequest: AWSPaginateToken {
    public func usingPaginationToken(_ token: String) -> WorkDocs.DescribeNotificationSubscriptionsRequest {
        return .init(
            limit: self.limit,
            marker: token,
            organizationId: self.organizationId
        )
    }
}

extension WorkDocs.DescribeResourcePermissionsRequest: AWSPaginateToken {
    public func usingPaginationToken(_ token: String) -> WorkDocs.DescribeResourcePermissionsRequest {
        return .init(
            authenticationToken: self.authenticationToken,
            limit: self.limit,
            marker: token,
            principalId: self.principalId,
            resourceId: self.resourceId
        )
    }
}

extension WorkDocs.DescribeRootFoldersRequest: AWSPaginateToken {
    public func usingPaginationToken(_ token: String) -> WorkDocs.DescribeRootFoldersRequest {
        return .init(
            authenticationToken: self.authenticationToken,
            limit: self.limit,
            marker: token
        )
    }
}

extension WorkDocs.DescribeUsersRequest: AWSPaginateToken {
    public func usingPaginationToken(_ token: String) -> WorkDocs.DescribeUsersRequest {
        return .init(
            authenticationToken: self.authenticationToken,
            fields: self.fields,
            include: self.include,
            limit: self.limit,
            marker: token,
            order: self.order,
            organizationId: self.organizationId,
            query: self.query,
            sort: self.sort,
            userIds: self.userIds
        )
    }
}

extension WorkDocs.SearchResourcesRequest: AWSPaginateToken {
    public func usingPaginationToken(_ token: String) -> WorkDocs.SearchResourcesRequest {
        return .init(
            additionalResponseFields: self.additionalResponseFields,
            authenticationToken: self.authenticationToken,
            filters: self.filters,
            limit: self.limit,
            marker: token,
            orderBy: self.orderBy,
            organizationId: self.organizationId,
            queryScopes: self.queryScopes,
            queryText: self.queryText
        )
    }
}
