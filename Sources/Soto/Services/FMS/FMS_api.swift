//===----------------------------------------------------------------------===//
//
// This source file is part of the Soto for AWS open source project
//
// Copyright (c) 2017-2023 the Soto project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
// See CONTRIBUTORS.txt for the list of Soto project authors
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by https://github.com/soto-project/soto-codegenerator.
// DO NOT EDIT.

@_exported import SotoCore

/// Service object for interacting with AWS FMS service.
///
/// This is the Firewall Manager API Reference. This guide is for developers who need detailed information about the Firewall Manager API actions, data types, and errors. For detailed information about Firewall Manager features, see the Firewall Manager Developer Guide. Some API actions require explicit resource permissions. For information, see the developer guide topic Service roles for Firewall Manager.
public struct FMS: AWSService {
    // MARK: Member variables

    /// Client used for communication with AWS
    public let client: AWSClient
    /// Service configuration
    public let config: AWSServiceConfig

    // MARK: Initialization

    /// Initialize the FMS client
    /// - parameters:
    ///     - client: AWSClient used to process requests
    ///     - region: Region of server you want to communicate with. This will override the partition parameter.
    ///     - partition: AWS partition where service resides, standard (.aws), china (.awscn), government (.awsusgov).
    ///     - endpoint: Custom endpoint URL to use instead of standard AWS servers
    ///     - middleware: Middleware chain used to edit requests before they are sent and responses before they are decoded 
    ///     - timeout: Timeout value for HTTP requests
    ///     - byteBufferAllocator: Allocator for ByteBuffers
    ///     - options: Service options
    public init(
        client: AWSClient,
        region: SotoCore.Region? = nil,
        partition: AWSPartition = .aws,
        endpoint: String? = nil,
        middleware: AWSMiddlewareProtocol? = nil,
        timeout: TimeAmount? = nil,
        byteBufferAllocator: ByteBufferAllocator = ByteBufferAllocator(),
        options: AWSServiceConfig.Options = []
    ) {
        self.client = client
        self.config = AWSServiceConfig(
            region: region,
            partition: region?.partition ?? partition,
            amzTarget: "AWSFMS_20180101",
            serviceName: "FMS",
            serviceIdentifier: "fms",
            serviceProtocol: .json(version: "1.1"),
            apiVersion: "2018-01-01",
            endpoint: endpoint,
            variantEndpoints: Self.variantEndpoints,
            errorType: FMSErrorType.self,
            middleware: middleware,
            timeout: timeout,
            byteBufferAllocator: byteBufferAllocator,
            options: options
        )
    }




    /// FIPS and dualstack endpoints
    static var variantEndpoints: [EndpointVariantType: AWSServiceConfig.EndpointVariant] {[
        [.fips]: .init(endpoints: [
            "af-south-1": "fms-fips.af-south-1.amazonaws.com",
            "ap-east-1": "fms-fips.ap-east-1.amazonaws.com",
            "ap-northeast-1": "fms-fips.ap-northeast-1.amazonaws.com",
            "ap-northeast-2": "fms-fips.ap-northeast-2.amazonaws.com",
            "ap-south-1": "fms-fips.ap-south-1.amazonaws.com",
            "ap-southeast-1": "fms-fips.ap-southeast-1.amazonaws.com",
            "ap-southeast-2": "fms-fips.ap-southeast-2.amazonaws.com",
            "ca-central-1": "fms-fips.ca-central-1.amazonaws.com",
            "eu-central-1": "fms-fips.eu-central-1.amazonaws.com",
            "eu-south-1": "fms-fips.eu-south-1.amazonaws.com",
            "eu-west-1": "fms-fips.eu-west-1.amazonaws.com",
            "eu-west-2": "fms-fips.eu-west-2.amazonaws.com",
            "eu-west-3": "fms-fips.eu-west-3.amazonaws.com",
            "me-south-1": "fms-fips.me-south-1.amazonaws.com",
            "sa-east-1": "fms-fips.sa-east-1.amazonaws.com",
            "us-east-1": "fms-fips.us-east-1.amazonaws.com",
            "us-east-2": "fms-fips.us-east-2.amazonaws.com",
            "us-gov-east-1": "fms-fips.us-gov-east-1.amazonaws.com",
            "us-gov-west-1": "fms-fips.us-gov-west-1.amazonaws.com",
            "us-west-1": "fms-fips.us-west-1.amazonaws.com",
            "us-west-2": "fms-fips.us-west-2.amazonaws.com"
        ])
    ]}

    // MARK: API Calls

    /// Sets a Firewall Manager default administrator account. The Firewall Manager default administrator account can manage third-party firewalls and has full administrative scope that allows administration of all policy types, accounts, organizational units, and Regions. This account must be a member account of the organization in Organizations whose resources you want to protect. For information about working with Firewall Manager administrator accounts, see Managing Firewall Manager administrators in the Firewall Manager Developer Guide.
    @Sendable
    public func associateAdminAccount(_ input: AssociateAdminAccountRequest, logger: Logger = AWSClient.loggingDisabled) async throws {
        return try await self.client.execute(
            operation: "AssociateAdminAccount", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Sets the Firewall Manager policy administrator as a tenant administrator of a third-party firewall service. A tenant is an instance of the third-party firewall service that's associated with your Amazon Web Services customer account.
    @Sendable
    public func associateThirdPartyFirewall(_ input: AssociateThirdPartyFirewallRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> AssociateThirdPartyFirewallResponse {
        return try await self.client.execute(
            operation: "AssociateThirdPartyFirewall", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Associate resources to a Firewall Manager resource set.
    @Sendable
    public func batchAssociateResource(_ input: BatchAssociateResourceRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> BatchAssociateResourceResponse {
        return try await self.client.execute(
            operation: "BatchAssociateResource", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Disassociates resources from a Firewall Manager resource set.
    @Sendable
    public func batchDisassociateResource(_ input: BatchDisassociateResourceRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> BatchDisassociateResourceResponse {
        return try await self.client.execute(
            operation: "BatchDisassociateResource", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Permanently deletes an Firewall Manager applications list.
    @Sendable
    public func deleteAppsList(_ input: DeleteAppsListRequest, logger: Logger = AWSClient.loggingDisabled) async throws {
        return try await self.client.execute(
            operation: "DeleteAppsList", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Deletes an Firewall Manager association with the IAM role and the Amazon Simple Notification Service (SNS) topic that is used to record Firewall Manager SNS logs.
    @Sendable
    public func deleteNotificationChannel(_ input: DeleteNotificationChannelRequest, logger: Logger = AWSClient.loggingDisabled) async throws {
        return try await self.client.execute(
            operation: "DeleteNotificationChannel", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Permanently deletes an Firewall Manager policy.
    @Sendable
    public func deletePolicy(_ input: DeletePolicyRequest, logger: Logger = AWSClient.loggingDisabled) async throws {
        return try await self.client.execute(
            operation: "DeletePolicy", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Permanently deletes an Firewall Manager protocols list.
    @Sendable
    public func deleteProtocolsList(_ input: DeleteProtocolsListRequest, logger: Logger = AWSClient.loggingDisabled) async throws {
        return try await self.client.execute(
            operation: "DeleteProtocolsList", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Deletes the specified ResourceSet.
    @Sendable
    public func deleteResourceSet(_ input: DeleteResourceSetRequest, logger: Logger = AWSClient.loggingDisabled) async throws {
        return try await self.client.execute(
            operation: "DeleteResourceSet", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Disassociates an Firewall Manager administrator account. To set a different account as an Firewall Manager administrator, submit a PutAdminAccount request. To set an account as a default administrator account, you must submit an AssociateAdminAccount request. Disassociation of the default administrator account follows the first in, last out principle. If you are the default administrator, all Firewall Manager administrators within the organization must first disassociate their accounts before you can disassociate your account.
    @Sendable
    public func disassociateAdminAccount(_ input: DisassociateAdminAccountRequest, logger: Logger = AWSClient.loggingDisabled) async throws {
        return try await self.client.execute(
            operation: "DisassociateAdminAccount", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Disassociates a Firewall Manager policy administrator from a third-party firewall tenant. When you call DisassociateThirdPartyFirewall, the third-party firewall vendor deletes all of the firewalls that are associated with the account.
    @Sendable
    public func disassociateThirdPartyFirewall(_ input: DisassociateThirdPartyFirewallRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DisassociateThirdPartyFirewallResponse {
        return try await self.client.execute(
            operation: "DisassociateThirdPartyFirewall", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Returns the Organizations account that is associated with Firewall Manager as the Firewall Manager default administrator.
    @Sendable
    public func getAdminAccount(_ input: GetAdminAccountRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> GetAdminAccountResponse {
        return try await self.client.execute(
            operation: "GetAdminAccount", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Returns information about the specified account's administrative scope. The admistrative scope defines the resources that an Firewall Manager administrator can manage.
    @Sendable
    public func getAdminScope(_ input: GetAdminScopeRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> GetAdminScopeResponse {
        return try await self.client.execute(
            operation: "GetAdminScope", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Returns information about the specified Firewall Manager applications list.
    @Sendable
    public func getAppsList(_ input: GetAppsListRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> GetAppsListResponse {
        return try await self.client.execute(
            operation: "GetAppsList", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Returns detailed compliance information about the specified member account. Details include resources that are in and out of compliance with the specified policy.    Resources are considered noncompliant for WAF and Shield Advanced policies if the specified policy has not been applied to them.   Resources are considered noncompliant for security group policies if they are in scope of the policy, they violate one or more of the policy rules, and remediation is disabled or not possible.   Resources are considered noncompliant for Network Firewall policies if a firewall is missing in the VPC, if the firewall endpoint isn't set up in an expected Availability Zone and subnet, if a subnet created by the Firewall Manager doesn't have the expected route table, and for modifications to a firewall policy that violate the Firewall Manager policy's rules.   Resources are considered noncompliant for DNS Firewall policies if a DNS Firewall rule group is missing from the rule group associations for the VPC.
    @Sendable
    public func getComplianceDetail(_ input: GetComplianceDetailRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> GetComplianceDetailResponse {
        return try await self.client.execute(
            operation: "GetComplianceDetail", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Information about the Amazon Simple Notification Service (SNS) topic that is used to record Firewall Manager SNS logs.
    @Sendable
    public func getNotificationChannel(_ input: GetNotificationChannelRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> GetNotificationChannelResponse {
        return try await self.client.execute(
            operation: "GetNotificationChannel", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Returns information about the specified Firewall Manager policy.
    @Sendable
    public func getPolicy(_ input: GetPolicyRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> GetPolicyResponse {
        return try await self.client.execute(
            operation: "GetPolicy", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// If you created a Shield Advanced policy, returns policy-level attack summary information in the event of a potential DDoS attack. Other policy types are currently unsupported.
    @Sendable
    public func getProtectionStatus(_ input: GetProtectionStatusRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> GetProtectionStatusResponse {
        return try await self.client.execute(
            operation: "GetProtectionStatus", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Returns information about the specified Firewall Manager protocols list.
    @Sendable
    public func getProtocolsList(_ input: GetProtocolsListRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> GetProtocolsListResponse {
        return try await self.client.execute(
            operation: "GetProtocolsList", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Gets information about a specific resource set.
    @Sendable
    public func getResourceSet(_ input: GetResourceSetRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> GetResourceSetResponse {
        return try await self.client.execute(
            operation: "GetResourceSet", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// The onboarding status of a Firewall Manager admin account to third-party firewall vendor tenant.
    @Sendable
    public func getThirdPartyFirewallAssociationStatus(_ input: GetThirdPartyFirewallAssociationStatusRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> GetThirdPartyFirewallAssociationStatusResponse {
        return try await self.client.execute(
            operation: "GetThirdPartyFirewallAssociationStatus", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Retrieves violations for a resource based on the specified Firewall Manager policy and Amazon Web Services account.
    @Sendable
    public func getViolationDetails(_ input: GetViolationDetailsRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> GetViolationDetailsResponse {
        return try await self.client.execute(
            operation: "GetViolationDetails", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Returns a AdminAccounts object that lists the Firewall Manager administrators within the organization that are onboarded to Firewall Manager by AssociateAdminAccount. This operation can be called only from the organization's management account.
    @Sendable
    public func listAdminAccountsForOrganization(_ input: ListAdminAccountsForOrganizationRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> ListAdminAccountsForOrganizationResponse {
        return try await self.client.execute(
            operation: "ListAdminAccountsForOrganization", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Lists the accounts that are managing the specified Organizations member account. This is useful for any member account so that they can view the accounts who are managing their account. This operation only returns the managing administrators that have the requested account within their AdminScope.
    @Sendable
    public func listAdminsManagingAccount(_ input: ListAdminsManagingAccountRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> ListAdminsManagingAccountResponse {
        return try await self.client.execute(
            operation: "ListAdminsManagingAccount", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Returns an array of AppsListDataSummary objects.
    @Sendable
    public func listAppsLists(_ input: ListAppsListsRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> ListAppsListsResponse {
        return try await self.client.execute(
            operation: "ListAppsLists", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Returns an array of PolicyComplianceStatus objects. Use PolicyComplianceStatus to get a summary of which member accounts are protected by the specified policy.
    @Sendable
    public func listComplianceStatus(_ input: ListComplianceStatusRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> ListComplianceStatusResponse {
        return try await self.client.execute(
            operation: "ListComplianceStatus", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Returns an array of resources in the organization's accounts that are available to be associated with a resource set.
    @Sendable
    public func listDiscoveredResources(_ input: ListDiscoveredResourcesRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> ListDiscoveredResourcesResponse {
        return try await self.client.execute(
            operation: "ListDiscoveredResources", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Returns a MemberAccounts object that lists the member accounts in the administrator's Amazon Web Services organization. Either an Firewall Manager administrator or the organization's management account can make this request.
    @Sendable
    public func listMemberAccounts(_ input: ListMemberAccountsRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> ListMemberAccountsResponse {
        return try await self.client.execute(
            operation: "ListMemberAccounts", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Returns an array of PolicySummary objects.
    @Sendable
    public func listPolicies(_ input: ListPoliciesRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> ListPoliciesResponse {
        return try await self.client.execute(
            operation: "ListPolicies", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Returns an array of ProtocolsListDataSummary objects.
    @Sendable
    public func listProtocolsLists(_ input: ListProtocolsListsRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> ListProtocolsListsResponse {
        return try await self.client.execute(
            operation: "ListProtocolsLists", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Returns an array of resources that are currently associated to a resource set.
    @Sendable
    public func listResourceSetResources(_ input: ListResourceSetResourcesRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> ListResourceSetResourcesResponse {
        return try await self.client.execute(
            operation: "ListResourceSetResources", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Returns an array of ResourceSetSummary objects.
    @Sendable
    public func listResourceSets(_ input: ListResourceSetsRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> ListResourceSetsResponse {
        return try await self.client.execute(
            operation: "ListResourceSets", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Retrieves the list of tags for the specified Amazon Web Services resource.
    @Sendable
    public func listTagsForResource(_ input: ListTagsForResourceRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> ListTagsForResourceResponse {
        return try await self.client.execute(
            operation: "ListTagsForResource", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Retrieves a list of all of the third-party firewall policies that are associated with the third-party firewall administrator's account.
    @Sendable
    public func listThirdPartyFirewallFirewallPolicies(_ input: ListThirdPartyFirewallFirewallPoliciesRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> ListThirdPartyFirewallFirewallPoliciesResponse {
        return try await self.client.execute(
            operation: "ListThirdPartyFirewallFirewallPolicies", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Creates or updates an Firewall Manager administrator account. The account must be a member of the organization that was onboarded to Firewall Manager by AssociateAdminAccount. Only the organization's management account can create an Firewall Manager administrator account. When you create an Firewall Manager administrator account, the service checks to see if the account is already a delegated administrator within Organizations. If the account isn't a delegated administrator, Firewall Manager calls Organizations to delegate the account within Organizations. For more information about administrator accounts within Organizations, see Managing the Amazon Web Services Accounts in Your Organization.
    @Sendable
    public func putAdminAccount(_ input: PutAdminAccountRequest, logger: Logger = AWSClient.loggingDisabled) async throws {
        return try await self.client.execute(
            operation: "PutAdminAccount", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Creates an Firewall Manager applications list.
    @Sendable
    public func putAppsList(_ input: PutAppsListRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> PutAppsListResponse {
        return try await self.client.execute(
            operation: "PutAppsList", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Designates the IAM role and Amazon Simple Notification Service (SNS) topic that Firewall Manager uses to record SNS logs. To perform this action outside of the console, you must first configure the SNS topic's access policy to allow the SnsRoleName to publish SNS logs. If the SnsRoleName provided is a role other than the AWSServiceRoleForFMS service-linked role, this role must have a trust relationship configured to allow the Firewall Manager service principal fms.amazonaws.com to assume this role. For information about configuring an SNS access policy, see Service roles for Firewall Manager in the Firewall Manager Developer Guide.
    @Sendable
    public func putNotificationChannel(_ input: PutNotificationChannelRequest, logger: Logger = AWSClient.loggingDisabled) async throws {
        return try await self.client.execute(
            operation: "PutNotificationChannel", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Creates an Firewall Manager policy. Firewall Manager provides the following types of policies:    An WAF policy (type WAFV2), which defines rule groups to run first in the corresponding WAF web ACL and rule groups to run last in the web ACL.   An WAF Classic policy (type WAF), which defines a rule group.    A Shield Advanced policy, which applies Shield Advanced protection to specified accounts and resources.   A security group policy, which manages VPC security groups across your Amazon Web Services organization.    An Network Firewall policy, which provides firewall rules to filter network traffic in specified Amazon VPCs.   A DNS Firewall policy, which provides Route 53 Resolver DNS Firewall rules to filter DNS queries for specified VPCs.   Each policy is specific to one of the types. If you want to enforce more than one policy type across accounts, create multiple policies. You can create multiple policies for each type. You must be subscribed to Shield Advanced to create a Shield Advanced policy. For more information about subscribing to Shield Advanced, see CreateSubscription.
    @Sendable
    public func putPolicy(_ input: PutPolicyRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> PutPolicyResponse {
        return try await self.client.execute(
            operation: "PutPolicy", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Creates an Firewall Manager protocols list.
    @Sendable
    public func putProtocolsList(_ input: PutProtocolsListRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> PutProtocolsListResponse {
        return try await self.client.execute(
            operation: "PutProtocolsList", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Creates the resource set. An Firewall Manager resource set defines the resources to import into an Firewall Manager policy from another Amazon Web Services service.
    @Sendable
    public func putResourceSet(_ input: PutResourceSetRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> PutResourceSetResponse {
        return try await self.client.execute(
            operation: "PutResourceSet", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Adds one or more tags to an Amazon Web Services resource.
    @Sendable
    public func tagResource(_ input: TagResourceRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> TagResourceResponse {
        return try await self.client.execute(
            operation: "TagResource", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Removes one or more tags from an Amazon Web Services resource.
    @Sendable
    public func untagResource(_ input: UntagResourceRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> UntagResourceResponse {
        return try await self.client.execute(
            operation: "UntagResource", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
}

extension FMS {
    /// Initializer required by `AWSService.with(middlewares:timeout:byteBufferAllocator:options)`. You are not able to use this initializer directly as there are not public
    /// initializers for `AWSServiceConfig.Patch`. Please use `AWSService.with(middlewares:timeout:byteBufferAllocator:options)` instead.
    public init(from: FMS, patch: AWSServiceConfig.Patch) {
        self.client = from.client
        self.config = from.config.with(patch: patch)
    }
}

// MARK: Paginators

@available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
extension FMS {
    /// Returns a AdminAccounts object that lists the Firewall Manager administrators within the organization that are onboarded to Firewall Manager by AssociateAdminAccount. This operation can be called only from the organization's management account.
    /// Return PaginatorSequence for operation.
    ///
    /// - Parameters:
    ///   - input: Input for request
    ///   - logger: Logger used flot logging
    public func listAdminAccountsForOrganizationPaginator(
        _ input: ListAdminAccountsForOrganizationRequest,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<ListAdminAccountsForOrganizationRequest, ListAdminAccountsForOrganizationResponse> {
        return .init(
            input: input,
            command: self.listAdminAccountsForOrganization,
            inputKey: \ListAdminAccountsForOrganizationRequest.nextToken,
            outputKey: \ListAdminAccountsForOrganizationResponse.nextToken,
            logger: logger
        )
    }

    /// Lists the accounts that are managing the specified Organizations member account. This is useful for any member account so that they can view the accounts who are managing their account. This operation only returns the managing administrators that have the requested account within their AdminScope.
    /// Return PaginatorSequence for operation.
    ///
    /// - Parameters:
    ///   - input: Input for request
    ///   - logger: Logger used flot logging
    public func listAdminsManagingAccountPaginator(
        _ input: ListAdminsManagingAccountRequest,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<ListAdminsManagingAccountRequest, ListAdminsManagingAccountResponse> {
        return .init(
            input: input,
            command: self.listAdminsManagingAccount,
            inputKey: \ListAdminsManagingAccountRequest.nextToken,
            outputKey: \ListAdminsManagingAccountResponse.nextToken,
            logger: logger
        )
    }

    /// Returns an array of AppsListDataSummary objects.
    /// Return PaginatorSequence for operation.
    ///
    /// - Parameters:
    ///   - input: Input for request
    ///   - logger: Logger used flot logging
    public func listAppsListsPaginator(
        _ input: ListAppsListsRequest,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<ListAppsListsRequest, ListAppsListsResponse> {
        return .init(
            input: input,
            command: self.listAppsLists,
            inputKey: \ListAppsListsRequest.nextToken,
            outputKey: \ListAppsListsResponse.nextToken,
            logger: logger
        )
    }

    /// Returns an array of PolicyComplianceStatus objects. Use PolicyComplianceStatus to get a summary of which member accounts are protected by the specified policy.
    /// Return PaginatorSequence for operation.
    ///
    /// - Parameters:
    ///   - input: Input for request
    ///   - logger: Logger used flot logging
    public func listComplianceStatusPaginator(
        _ input: ListComplianceStatusRequest,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<ListComplianceStatusRequest, ListComplianceStatusResponse> {
        return .init(
            input: input,
            command: self.listComplianceStatus,
            inputKey: \ListComplianceStatusRequest.nextToken,
            outputKey: \ListComplianceStatusResponse.nextToken,
            logger: logger
        )
    }

    /// Returns a MemberAccounts object that lists the member accounts in the administrator's Amazon Web Services organization. Either an Firewall Manager administrator or the organization's management account can make this request.
    /// Return PaginatorSequence for operation.
    ///
    /// - Parameters:
    ///   - input: Input for request
    ///   - logger: Logger used flot logging
    public func listMemberAccountsPaginator(
        _ input: ListMemberAccountsRequest,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<ListMemberAccountsRequest, ListMemberAccountsResponse> {
        return .init(
            input: input,
            command: self.listMemberAccounts,
            inputKey: \ListMemberAccountsRequest.nextToken,
            outputKey: \ListMemberAccountsResponse.nextToken,
            logger: logger
        )
    }

    /// Returns an array of PolicySummary objects.
    /// Return PaginatorSequence for operation.
    ///
    /// - Parameters:
    ///   - input: Input for request
    ///   - logger: Logger used flot logging
    public func listPoliciesPaginator(
        _ input: ListPoliciesRequest,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<ListPoliciesRequest, ListPoliciesResponse> {
        return .init(
            input: input,
            command: self.listPolicies,
            inputKey: \ListPoliciesRequest.nextToken,
            outputKey: \ListPoliciesResponse.nextToken,
            logger: logger
        )
    }

    /// Returns an array of ProtocolsListDataSummary objects.
    /// Return PaginatorSequence for operation.
    ///
    /// - Parameters:
    ///   - input: Input for request
    ///   - logger: Logger used flot logging
    public func listProtocolsListsPaginator(
        _ input: ListProtocolsListsRequest,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<ListProtocolsListsRequest, ListProtocolsListsResponse> {
        return .init(
            input: input,
            command: self.listProtocolsLists,
            inputKey: \ListProtocolsListsRequest.nextToken,
            outputKey: \ListProtocolsListsResponse.nextToken,
            logger: logger
        )
    }

    /// Retrieves a list of all of the third-party firewall policies that are associated with the third-party firewall administrator's account.
    /// Return PaginatorSequence for operation.
    ///
    /// - Parameters:
    ///   - input: Input for request
    ///   - logger: Logger used flot logging
    public func listThirdPartyFirewallFirewallPoliciesPaginator(
        _ input: ListThirdPartyFirewallFirewallPoliciesRequest,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<ListThirdPartyFirewallFirewallPoliciesRequest, ListThirdPartyFirewallFirewallPoliciesResponse> {
        return .init(
            input: input,
            command: self.listThirdPartyFirewallFirewallPolicies,
            inputKey: \ListThirdPartyFirewallFirewallPoliciesRequest.nextToken,
            outputKey: \ListThirdPartyFirewallFirewallPoliciesResponse.nextToken,
            logger: logger
        )
    }
}

extension FMS.ListAdminAccountsForOrganizationRequest: AWSPaginateToken {
    public func usingPaginationToken(_ token: String) -> FMS.ListAdminAccountsForOrganizationRequest {
        return .init(
            maxResults: self.maxResults,
            nextToken: token
        )
    }
}

extension FMS.ListAdminsManagingAccountRequest: AWSPaginateToken {
    public func usingPaginationToken(_ token: String) -> FMS.ListAdminsManagingAccountRequest {
        return .init(
            maxResults: self.maxResults,
            nextToken: token
        )
    }
}

extension FMS.ListAppsListsRequest: AWSPaginateToken {
    public func usingPaginationToken(_ token: String) -> FMS.ListAppsListsRequest {
        return .init(
            defaultLists: self.defaultLists,
            maxResults: self.maxResults,
            nextToken: token
        )
    }
}

extension FMS.ListComplianceStatusRequest: AWSPaginateToken {
    public func usingPaginationToken(_ token: String) -> FMS.ListComplianceStatusRequest {
        return .init(
            maxResults: self.maxResults,
            nextToken: token,
            policyId: self.policyId
        )
    }
}

extension FMS.ListMemberAccountsRequest: AWSPaginateToken {
    public func usingPaginationToken(_ token: String) -> FMS.ListMemberAccountsRequest {
        return .init(
            maxResults: self.maxResults,
            nextToken: token
        )
    }
}

extension FMS.ListPoliciesRequest: AWSPaginateToken {
    public func usingPaginationToken(_ token: String) -> FMS.ListPoliciesRequest {
        return .init(
            maxResults: self.maxResults,
            nextToken: token
        )
    }
}

extension FMS.ListProtocolsListsRequest: AWSPaginateToken {
    public func usingPaginationToken(_ token: String) -> FMS.ListProtocolsListsRequest {
        return .init(
            defaultLists: self.defaultLists,
            maxResults: self.maxResults,
            nextToken: token
        )
    }
}

extension FMS.ListThirdPartyFirewallFirewallPoliciesRequest: AWSPaginateToken {
    public func usingPaginationToken(_ token: String) -> FMS.ListThirdPartyFirewallFirewallPoliciesRequest {
        return .init(
            maxResults: self.maxResults,
            nextToken: token,
            thirdPartyFirewall: self.thirdPartyFirewall
        )
    }
}
