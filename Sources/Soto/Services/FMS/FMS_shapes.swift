//===----------------------------------------------------------------------===//
//
// This source file is part of the Soto for AWS open source project
//
// Copyright (c) 2017-2023 the Soto project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
// See CONTRIBUTORS.txt for the list of Soto project authors
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by https://github.com/soto-project/soto-codegenerator.
// DO NOT EDIT.

#if os(Linux) && compiler(<5.10)
// swift-corelibs-foundation hasn't been updated with Sendable conformances
@preconcurrency import Foundation
#else
import Foundation
#endif
@_spi(SotoInternal) import SotoCore

extension FMS {
    // MARK: Enums

    public enum AccountRoleStatus: String, CustomStringConvertible, Codable, Sendable, CodingKeyRepresentable {
        case creating = "CREATING"
        case deleted = "DELETED"
        case deleting = "DELETING"
        case pendingDeletion = "PENDING_DELETION"
        case ready = "READY"
        public var description: String { return self.rawValue }
    }

    public enum CustomerPolicyScopeIdType: String, CustomStringConvertible, Codable, Sendable, CodingKeyRepresentable {
        case account = "ACCOUNT"
        case orgUnit = "ORG_UNIT"
        public var description: String { return self.rawValue }
    }

    public enum CustomerPolicyStatus: String, CustomStringConvertible, Codable, Sendable, CodingKeyRepresentable {
        case active = "ACTIVE"
        case outOfAdminScope = "OUT_OF_ADMIN_SCOPE"
        public var description: String { return self.rawValue }
    }

    public enum DependentServiceName: String, CustomStringConvertible, Codable, Sendable, CodingKeyRepresentable {
        case awsConfig = "AWSCONFIG"
        case awsShieldAdvanced = "AWSSHIELD_ADVANCED"
        case awsVirtualPrivateCloud = "AWSVPC"
        case awswaf = "AWSWAF"
        public var description: String { return self.rawValue }
    }

    public enum DestinationType: String, CustomStringConvertible, Codable, Sendable, CodingKeyRepresentable {
        case ipv4 = "IPV4"
        case ipv6 = "IPV6"
        case prefixList = "PREFIX_LIST"
        public var description: String { return self.rawValue }
    }

    public enum FailedItemReason: String, CustomStringConvertible, Codable, Sendable, CodingKeyRepresentable {
        case notValidAccountId = "NOT_VALID_ACCOUNT_ID"
        case notValidArn = "NOT_VALID_ARN"
        case notValidPartition = "NOT_VALID_PARTITION"
        case notValidRegion = "NOT_VALID_REGION"
        case notValidResourceType = "NOT_VALID_RESOURCE_TYPE"
        case notValidService = "NOT_VALID_SERVICE"
        public var description: String { return self.rawValue }
    }

    public enum FirewallDeploymentModel: String, CustomStringConvertible, Codable, Sendable, CodingKeyRepresentable {
        case centralized = "CENTRALIZED"
        case distributed = "DISTRIBUTED"
        public var description: String { return self.rawValue }
    }

    public enum MarketplaceSubscriptionOnboardingStatus: String, CustomStringConvertible, Codable, Sendable, CodingKeyRepresentable {
        case complete = "COMPLETE"
        case noSubscription = "NO_SUBSCRIPTION"
        case notComplete = "NOT_COMPLETE"
        public var description: String { return self.rawValue }
    }

    public enum NetworkFirewallOverrideAction: String, CustomStringConvertible, Codable, Sendable, CodingKeyRepresentable {
        case dropToAlert = "DROP_TO_ALERT"
        public var description: String { return self.rawValue }
    }

    public enum OrganizationStatus: String, CustomStringConvertible, Codable, Sendable, CodingKeyRepresentable {
        case offboarding = "OFFBOARDING"
        case offboardingComplete = "OFFBOARDING_COMPLETE"
        case onboarding = "ONBOARDING"
        case onboardingComplete = "ONBOARDING_COMPLETE"
        public var description: String { return self.rawValue }
    }

    public enum PolicyComplianceStatusType: String, CustomStringConvertible, Codable, Sendable, CodingKeyRepresentable {
        case compliant = "COMPLIANT"
        case nonCompliant = "NON_COMPLIANT"
        public var description: String { return self.rawValue }
    }

    public enum RemediationActionType: String, CustomStringConvertible, Codable, Sendable, CodingKeyRepresentable {
        case modify = "MODIFY"
        case remove = "REMOVE"
        public var description: String { return self.rawValue }
    }

    public enum ResourceSetStatus: String, CustomStringConvertible, Codable, Sendable, CodingKeyRepresentable {
        case active = "ACTIVE"
        case outOfAdminScope = "OUT_OF_ADMIN_SCOPE"
        public var description: String { return self.rawValue }
    }

    public enum RuleOrder: String, CustomStringConvertible, Codable, Sendable, CodingKeyRepresentable {
        case defaultActionOrder = "DEFAULT_ACTION_ORDER"
        case strictOrder = "STRICT_ORDER"
        public var description: String { return self.rawValue }
    }

    public enum SecurityServiceType: String, CustomStringConvertible, Codable, Sendable, CodingKeyRepresentable {
        case dnsFirewall = "DNS_FIREWALL"
        case importNetworkFirewall = "IMPORT_NETWORK_FIREWALL"
        case networkFirewall = "NETWORK_FIREWALL"
        case securityGroupsCommon = "SECURITY_GROUPS_COMMON"
        case securityGroupsContentAudit = "SECURITY_GROUPS_CONTENT_AUDIT"
        case securityGroupsUsageAudit = "SECURITY_GROUPS_USAGE_AUDIT"
        case shieldAdvanced = "SHIELD_ADVANCED"
        case thirdPartyFirewall = "THIRD_PARTY_FIREWALL"
        case waf = "WAF"
        case wafv2 = "WAFV2"
        public var description: String { return self.rawValue }
    }

    public enum TargetType: String, CustomStringConvertible, Codable, Sendable, CodingKeyRepresentable {
        case carrierGateway = "CARRIER_GATEWAY"
        case egressOnlyInternetGateway = "EGRESS_ONLY_INTERNET_GATEWAY"
        case gateway = "GATEWAY"
        case instance = "INSTANCE"
        case localGateway = "LOCAL_GATEWAY"
        case natGateway = "NAT_GATEWAY"
        case networkInterface = "NETWORK_INTERFACE"
        case transitGateway = "TRANSIT_GATEWAY"
        case vpcEndpoint = "VPC_ENDPOINT"
        case vpcPeeringConnection = "VPC_PEERING_CONNECTION"
        public var description: String { return self.rawValue }
    }

    public enum ThirdPartyFirewall: String, CustomStringConvertible, Codable, Sendable, CodingKeyRepresentable {
        case fortigateCloudNativeFirewall = "FORTIGATE_CLOUD_NATIVE_FIREWALL"
        case paloAltoNetworksCloudNgfw = "PALO_ALTO_NETWORKS_CLOUD_NGFW"
        public var description: String { return self.rawValue }
    }

    public enum ThirdPartyFirewallAssociationStatus: String, CustomStringConvertible, Codable, Sendable, CodingKeyRepresentable {
        case notExist = "NOT_EXIST"
        case offboardComplete = "OFFBOARD_COMPLETE"
        case offboarding = "OFFBOARDING"
        case onboardComplete = "ONBOARD_COMPLETE"
        case onboarding = "ONBOARDING"
        public var description: String { return self.rawValue }
    }

    public enum ViolationReason: String, CustomStringConvertible, Codable, Sendable, CodingKeyRepresentable {
        case blackHoleRouteDetected = "BLACK_HOLE_ROUTE_DETECTED"
        case blackHoleRouteDetectedInFirewallSubnet = "BLACK_HOLE_ROUTE_DETECTED_IN_FIREWALL_SUBNET"
        case firewallSubnetIsOutOfScope = "FIREWALL_SUBNET_IS_OUT_OF_SCOPE"
        case firewallSubnetMissingExpectedRoute = "FIREWALL_SUBNET_MISSING_EXPECTED_ROUTE"
        case firewallSubnetMissingVPCEndpoint = "FIREWALL_SUBNET_MISSING_VPCE_ENDPOINT"
        case fmsCreatedSecurityGroupEdited = "FMS_CREATED_SECURITY_GROUP_EDITED"
        case internetGatewayMissingExpectedRoute = "INTERNET_GATEWAY_MISSING_EXPECTED_ROUTE"
        case internetTrafficNotInspected = "INTERNET_TRAFFIC_NOT_INSPECTED"
        case invalidRouteConfiguration = "INVALID_ROUTE_CONFIGURATION"
        case missingExpectedRouteTable = "MISSING_EXPECTED_ROUTE_TABLE"
        case missingFirewall = "MISSING_FIREWALL"
        case missingFirewallSubnetInAZ = "MISSING_FIREWALL_SUBNET_IN_AZ"
        case missingTargetGateway = "MISSING_TARGET_GATEWAY"
        case networkFirewallPolicyModified = "NETWORK_FIREWALL_POLICY_MODIFIED"
        case resourceIncorrectWebAcl = "RESOURCE_INCORRECT_WEB_ACL"
        case resourceMissingDnsFirewall = "RESOURCE_MISSING_DNS_FIREWALL"
        case resourceMissingSecurityGroup = "RESOURCE_MISSING_SECURITY_GROUP"
        case resourceMissingShieldProtection = "RESOURCE_MISSING_SHIELD_PROTECTION"
        case resourceMissingWebAcl = "RESOURCE_MISSING_WEB_ACL"
        case resourceMissingWebaclOrShieldProtection = "RESOURCE_MISSING_WEB_ACL_OR_SHIELD_PROTECTION"
        case resourceViolatesAuditSecurityGroup = "RESOURCE_VIOLATES_AUDIT_SECURITY_GROUP"
        case routeHasOutOfScopeEndpoint = "ROUTE_HAS_OUT_OF_SCOPE_ENDPOINT"
        case securityGroupRedundant = "SECURITY_GROUP_REDUNDANT"
        case securityGroupUnused = "SECURITY_GROUP_UNUSED"
        case trafficInspectionCrossesAZBoundary = "TRAFFIC_INSPECTION_CROSSES_AZ_BOUNDARY"
        case unexpectedFirewallRoutes = "UNEXPECTED_FIREWALL_ROUTES"
        case unexpectedTargetGatewayRoutes = "UNEXPECTED_TARGET_GATEWAY_ROUTES"
        case webAclMissingRuleGroup = "WEB_ACL_MISSING_RULE_GROUP"
        public var description: String { return self.rawValue }
    }

    // MARK: Shapes

    public struct AccountScope: AWSEncodableShape & AWSDecodableShape {
        /// The list of accounts within the organization that the specified Firewall Manager administrator either can or cannot apply policies to, based on the value of ExcludeSpecifiedAccounts. If ExcludeSpecifiedAccounts is set to true, then the Firewall Manager administrator can apply policies to all members of the organization except for the accounts in this list. If ExcludeSpecifiedAccounts is set to false, then the Firewall Manager administrator can only apply policies to the accounts in this list.
        public let accounts: [String]?
        /// A boolean value that indicates if the administrator can apply policies to all accounts within an organization. If true, the administrator can apply policies to all accounts within the organization. You can either enable management of all accounts through this operation, or you can specify a list of accounts to manage in AccountScope$Accounts. You cannot specify both.
        public let allAccountsEnabled: Bool?
        /// A boolean value that excludes the accounts in AccountScope$Accounts from the administrator's scope. If true, the Firewall Manager administrator can apply policies to all members of the organization except for the accounts listed in AccountScope$Accounts. You can either specify a list of accounts to exclude by AccountScope$Accounts, or you can enable management of all accounts by AccountScope$AllAccountsEnabled. You cannot specify both.
        public let excludeSpecifiedAccounts: Bool?

        public init(accounts: [String]? = nil, allAccountsEnabled: Bool? = nil, excludeSpecifiedAccounts: Bool? = nil) {
            self.accounts = accounts
            self.allAccountsEnabled = allAccountsEnabled
            self.excludeSpecifiedAccounts = excludeSpecifiedAccounts
        }

        public func validate(name: String) throws {
            try self.accounts?.forEach {
                try validate($0, name: "accounts[]", parent: name, max: 1024)
                try validate($0, name: "accounts[]", parent: name, min: 1)
                try validate($0, name: "accounts[]", parent: name, pattern: "^[0-9]+$")
            }
        }

        private enum CodingKeys: String, CodingKey {
            case accounts = "Accounts"
            case allAccountsEnabled = "AllAccountsEnabled"
            case excludeSpecifiedAccounts = "ExcludeSpecifiedAccounts"
        }
    }

    public struct ActionTarget: AWSDecodableShape {
        /// A description of the remediation action target.
        public let description: String?
        /// The ID of the remediation target.
        public let resourceId: String?

        public init(description: String? = nil, resourceId: String? = nil) {
            self.description = description
            self.resourceId = resourceId
        }

        private enum CodingKeys: String, CodingKey {
            case description = "Description"
            case resourceId = "ResourceId"
        }
    }

    public struct AdminAccountSummary: AWSDecodableShape {
        /// The Amazon Web Services account ID of the Firewall Manager administrator's account.
        public let adminAccount: String?
        /// A boolean value that indicates if the administrator is the default administrator. If true, then this is the default administrator account. The default administrator can manage third-party firewalls and has full administrative scope. There is only one default administrator account per organization. For information about Firewall Manager default administrator accounts, see Managing Firewall Manager administrators in the Firewall Manager Developer Guide.
        public let defaultAdmin: Bool?
        /// The current status of the request to onboard a member account as an Firewall Manager administator.    ONBOARDING - The account is onboarding to Firewall Manager as an administrator.    ONBOARDING_COMPLETE - Firewall Manager The account is onboarded to Firewall Manager as an administrator, and can perform actions on the resources defined in their AdminScope.    OFFBOARDING - The account is being removed as an Firewall Manager administrator.    OFFBOARDING_COMPLETE - The account has been removed as an Firewall Manager administrator.
        public let status: OrganizationStatus?

        public init(adminAccount: String? = nil, defaultAdmin: Bool? = nil, status: OrganizationStatus? = nil) {
            self.adminAccount = adminAccount
            self.defaultAdmin = defaultAdmin
            self.status = status
        }

        private enum CodingKeys: String, CodingKey {
            case adminAccount = "AdminAccount"
            case defaultAdmin = "DefaultAdmin"
            case status = "Status"
        }
    }

    public struct AdminScope: AWSEncodableShape & AWSDecodableShape {
        /// Defines the accounts that the specified Firewall Manager administrator can apply policies to.
        public let accountScope: AccountScope?
        /// Defines the Organizations organizational units that the specified Firewall Manager administrator can apply policies to. For more information about OUs in Organizations, see Managing organizational units (OUs) in the Organizations User Guide.
        public let organizationalUnitScope: OrganizationalUnitScope?
        /// Defines the Firewall Manager policy types that the specified Firewall Manager administrator can create and manage.
        public let policyTypeScope: PolicyTypeScope?
        /// Defines the Amazon Web Services Regions that the specified Firewall Manager administrator can perform actions in.
        public let regionScope: RegionScope?

        public init(accountScope: AccountScope? = nil, organizationalUnitScope: OrganizationalUnitScope? = nil, policyTypeScope: PolicyTypeScope? = nil, regionScope: RegionScope? = nil) {
            self.accountScope = accountScope
            self.organizationalUnitScope = organizationalUnitScope
            self.policyTypeScope = policyTypeScope
            self.regionScope = regionScope
        }

        public func validate(name: String) throws {
            try self.accountScope?.validate(name: "\(name).accountScope")
            try self.organizationalUnitScope?.validate(name: "\(name).organizationalUnitScope")
            try self.policyTypeScope?.validate(name: "\(name).policyTypeScope")
            try self.regionScope?.validate(name: "\(name).regionScope")
        }

        private enum CodingKeys: String, CodingKey {
            case accountScope = "AccountScope"
            case organizationalUnitScope = "OrganizationalUnitScope"
            case policyTypeScope = "PolicyTypeScope"
            case regionScope = "RegionScope"
        }
    }

    public struct App: AWSEncodableShape & AWSDecodableShape {
        /// The application's name.
        public let appName: String
        /// The application's port number, for example 80.
        public let port: Int64
        /// The IP protocol name or number. The name can be one of tcp, udp, or icmp. For information on possible numbers, see Protocol Numbers.
        public let `protocol`: String

        public init(appName: String, port: Int64, protocol: String) {
            self.appName = appName
            self.port = port
            self.`protocol` = `protocol`
        }

        public func validate(name: String) throws {
            try self.validate(self.appName, name: "appName", parent: name, max: 128)
            try self.validate(self.appName, name: "appName", parent: name, min: 1)
            try self.validate(self.appName, name: "appName", parent: name, pattern: "^([\\p{L}\\p{Z}\\p{N}_.:/=+\\-@]*)$")
            try self.validate(self.port, name: "port", parent: name, max: 65535)
            try self.validate(self.port, name: "port", parent: name, min: 0)
            try self.validate(self.`protocol`, name: "`protocol`", parent: name, max: 20)
            try self.validate(self.`protocol`, name: "`protocol`", parent: name, min: 1)
            try self.validate(self.`protocol`, name: "`protocol`", parent: name, pattern: "^([\\p{L}\\p{Z}\\p{N}_.:/=+\\-@]*)$")
        }

        private enum CodingKeys: String, CodingKey {
            case appName = "AppName"
            case port = "Port"
            case `protocol` = "Protocol"
        }
    }

    public struct AppsListData: AWSEncodableShape & AWSDecodableShape {
        /// An array of applications in the Firewall Manager applications list.
        public let appsList: [App]
        /// The time that the Firewall Manager applications list was created.
        public let createTime: Date?
        /// The time that the Firewall Manager applications list was last updated.
        public let lastUpdateTime: Date?
        /// The ID of the Firewall Manager applications list.
        public let listId: String?
        /// The name of the Firewall Manager applications list.
        public let listName: String
        /// A unique identifier for each update to the list. When you update the list, the update token must match the token of the current version of the application list. You can retrieve the update token by getting the list.
        public let listUpdateToken: String?
        /// A map of previous version numbers to their corresponding App object arrays.
        public let previousAppsList: [String: [App]]?

        public init(appsList: [App], createTime: Date? = nil, lastUpdateTime: Date? = nil, listId: String? = nil, listName: String, listUpdateToken: String? = nil, previousAppsList: [String: [App]]? = nil) {
            self.appsList = appsList
            self.createTime = createTime
            self.lastUpdateTime = lastUpdateTime
            self.listId = listId
            self.listName = listName
            self.listUpdateToken = listUpdateToken
            self.previousAppsList = previousAppsList
        }

        public func validate(name: String) throws {
            try self.appsList.forEach {
                try $0.validate(name: "\(name).appsList[]")
            }
            try self.validate(self.listId, name: "listId", parent: name, max: 36)
            try self.validate(self.listId, name: "listId", parent: name, min: 36)
            try self.validate(self.listId, name: "listId", parent: name, pattern: "^[a-z0-9A-Z-]{36}$")
            try self.validate(self.listName, name: "listName", parent: name, max: 128)
            try self.validate(self.listName, name: "listName", parent: name, min: 1)
            try self.validate(self.listName, name: "listName", parent: name, pattern: "^([\\p{L}\\p{Z}\\p{N}_.:/=+\\-@]*)$")
            try self.validate(self.listUpdateToken, name: "listUpdateToken", parent: name, max: 1024)
            try self.validate(self.listUpdateToken, name: "listUpdateToken", parent: name, min: 1)
            try self.validate(self.listUpdateToken, name: "listUpdateToken", parent: name, pattern: "^([\\p{L}\\p{Z}\\p{N}_.:/=+\\-@]*)$")
            try self.previousAppsList?.forEach {
                try validate($0.key, name: "previousAppsList.key", parent: name, max: 2)
                try validate($0.key, name: "previousAppsList.key", parent: name, min: 1)
                try validate($0.key, name: "previousAppsList.key", parent: name, pattern: "^\\d{1,2}$")
            }
        }

        private enum CodingKeys: String, CodingKey {
            case appsList = "AppsList"
            case createTime = "CreateTime"
            case lastUpdateTime = "LastUpdateTime"
            case listId = "ListId"
            case listName = "ListName"
            case listUpdateToken = "ListUpdateToken"
            case previousAppsList = "PreviousAppsList"
        }
    }

    public struct AppsListDataSummary: AWSDecodableShape {
        /// An array of App objects in the Firewall Manager applications list.
        public let appsList: [App]?
        /// The Amazon Resource Name (ARN) of the applications list.
        public let listArn: String?
        /// The ID of the applications list.
        public let listId: String?
        /// The name of the applications list.
        public let listName: String?

        public init(appsList: [App]? = nil, listArn: String? = nil, listId: String? = nil, listName: String? = nil) {
            self.appsList = appsList
            self.listArn = listArn
            self.listId = listId
            self.listName = listName
        }

        private enum CodingKeys: String, CodingKey {
            case appsList = "AppsList"
            case listArn = "ListArn"
            case listId = "ListId"
            case listName = "ListName"
        }
    }

    public struct AssociateAdminAccountRequest: AWSEncodableShape {
        /// The Amazon Web Services account ID to associate with Firewall Manager as the Firewall Manager default administrator account. This account must be a member account of the organization in Organizations whose resources you want to protect. For more information about Organizations, see Managing the Amazon Web Services Accounts in Your Organization.
        public let adminAccount: String

        public init(adminAccount: String) {
            self.adminAccount = adminAccount
        }

        public func validate(name: String) throws {
            try self.validate(self.adminAccount, name: "adminAccount", parent: name, max: 1024)
            try self.validate(self.adminAccount, name: "adminAccount", parent: name, min: 1)
            try self.validate(self.adminAccount, name: "adminAccount", parent: name, pattern: "^[0-9]+$")
        }

        private enum CodingKeys: String, CodingKey {
            case adminAccount = "AdminAccount"
        }
    }

    public struct AssociateThirdPartyFirewallRequest: AWSEncodableShape {
        /// The name of the third-party firewall vendor.
        public let thirdPartyFirewall: ThirdPartyFirewall

        public init(thirdPartyFirewall: ThirdPartyFirewall) {
            self.thirdPartyFirewall = thirdPartyFirewall
        }

        private enum CodingKeys: String, CodingKey {
            case thirdPartyFirewall = "ThirdPartyFirewall"
        }
    }

    public struct AssociateThirdPartyFirewallResponse: AWSDecodableShape {
        /// The current status for setting a Firewall Manager policy administrator's account as an administrator of the third-party firewall tenant.    ONBOARDING - The Firewall Manager policy administrator is being designated as a tenant administrator.    ONBOARD_COMPLETE - The Firewall Manager policy administrator is designated as a tenant administrator.    OFFBOARDING - The Firewall Manager policy administrator is being removed as a tenant administrator.    OFFBOARD_COMPLETE - The Firewall Manager policy administrator has been removed as a tenant administrator.    NOT_EXIST - The Firewall Manager policy administrator doesn't exist as a tenant administrator.
        public let thirdPartyFirewallStatus: ThirdPartyFirewallAssociationStatus?

        public init(thirdPartyFirewallStatus: ThirdPartyFirewallAssociationStatus? = nil) {
            self.thirdPartyFirewallStatus = thirdPartyFirewallStatus
        }

        private enum CodingKeys: String, CodingKey {
            case thirdPartyFirewallStatus = "ThirdPartyFirewallStatus"
        }
    }

    public struct AwsEc2InstanceViolation: AWSDecodableShape {
        /// Violation detail for network interfaces associated with the EC2 instance.
        public let awsEc2NetworkInterfaceViolations: [AwsEc2NetworkInterfaceViolation]?
        /// The resource ID of the EC2 instance.
        public let violationTarget: String?

        public init(awsEc2NetworkInterfaceViolations: [AwsEc2NetworkInterfaceViolation]? = nil, violationTarget: String? = nil) {
            self.awsEc2NetworkInterfaceViolations = awsEc2NetworkInterfaceViolations
            self.violationTarget = violationTarget
        }

        private enum CodingKeys: String, CodingKey {
            case awsEc2NetworkInterfaceViolations = "AwsEc2NetworkInterfaceViolations"
            case violationTarget = "ViolationTarget"
        }
    }

    public struct AwsEc2NetworkInterfaceViolation: AWSDecodableShape {
        /// List of security groups that violate the rules specified in the primary security group of the Firewall Manager policy.
        public let violatingSecurityGroups: [String]?
        /// The resource ID of the network interface.
        public let violationTarget: String?

        public init(violatingSecurityGroups: [String]? = nil, violationTarget: String? = nil) {
            self.violatingSecurityGroups = violatingSecurityGroups
            self.violationTarget = violationTarget
        }

        private enum CodingKeys: String, CodingKey {
            case violatingSecurityGroups = "ViolatingSecurityGroups"
            case violationTarget = "ViolationTarget"
        }
    }

    public struct AwsVPCSecurityGroupViolation: AWSDecodableShape {
        /// List of rules specified in the security group of the Firewall Manager policy that partially match the ViolationTarget rule.
        public let partialMatches: [PartialMatch]?
        /// Remediation options for the rule specified in the ViolationTarget.
        public let possibleSecurityGroupRemediationActions: [SecurityGroupRemediationAction]?
        /// The security group rule that is being evaluated.
        public let violationTarget: String?
        /// A description of the security group that violates the policy.
        public let violationTargetDescription: String?

        public init(partialMatches: [PartialMatch]? = nil, possibleSecurityGroupRemediationActions: [SecurityGroupRemediationAction]? = nil, violationTarget: String? = nil, violationTargetDescription: String? = nil) {
            self.partialMatches = partialMatches
            self.possibleSecurityGroupRemediationActions = possibleSecurityGroupRemediationActions
            self.violationTarget = violationTarget
            self.violationTargetDescription = violationTargetDescription
        }

        private enum CodingKeys: String, CodingKey {
            case partialMatches = "PartialMatches"
            case possibleSecurityGroupRemediationActions = "PossibleSecurityGroupRemediationActions"
            case violationTarget = "ViolationTarget"
            case violationTargetDescription = "ViolationTargetDescription"
        }
    }

    public struct BatchAssociateResourceRequest: AWSEncodableShape {
        /// The uniform resource identifiers (URIs) of resources that should be associated to the resource set. The URIs must be Amazon Resource Names (ARNs).
        public let items: [String]
        /// A unique identifier for the resource set, used in a request to refer to the resource set.
        public let resourceSetIdentifier: String

        public init(items: [String], resourceSetIdentifier: String) {
            self.items = items
            self.resourceSetIdentifier = resourceSetIdentifier
        }

        public func validate(name: String) throws {
            try self.items.forEach {
                try validate($0, name: "items[]", parent: name, max: 2048)
                try validate($0, name: "items[]", parent: name, min: 1)
                try validate($0, name: "items[]", parent: name, pattern: "^([\\p{L}\\p{Z}\\p{N}_.:/=+\\-@]*)$")
            }
            try self.validate(self.resourceSetIdentifier, name: "resourceSetIdentifier", parent: name, max: 2048)
            try self.validate(self.resourceSetIdentifier, name: "resourceSetIdentifier", parent: name, min: 1)
            try self.validate(self.resourceSetIdentifier, name: "resourceSetIdentifier", parent: name, pattern: "^([\\p{L}\\p{Z}\\p{N}_.:/=+\\-@]*)$")
        }

        private enum CodingKeys: String, CodingKey {
            case items = "Items"
            case resourceSetIdentifier = "ResourceSetIdentifier"
        }
    }

    public struct BatchAssociateResourceResponse: AWSDecodableShape {
        /// The resources that failed to associate to the resource set.
        public let failedItems: [FailedItem]
        /// A unique identifier for the resource set, used in a request to refer to the resource set.
        public let resourceSetIdentifier: String

        public init(failedItems: [FailedItem], resourceSetIdentifier: String) {
            self.failedItems = failedItems
            self.resourceSetIdentifier = resourceSetIdentifier
        }

        private enum CodingKeys: String, CodingKey {
            case failedItems = "FailedItems"
            case resourceSetIdentifier = "ResourceSetIdentifier"
        }
    }

    public struct BatchDisassociateResourceRequest: AWSEncodableShape {
        /// The uniform resource identifiers (URI) of resources that should be disassociated from the resource set. The URIs must be Amazon Resource Names (ARNs).
        public let items: [String]
        /// A unique identifier for the resource set, used in a request to refer to the resource set.
        public let resourceSetIdentifier: String

        public init(items: [String], resourceSetIdentifier: String) {
            self.items = items
            self.resourceSetIdentifier = resourceSetIdentifier
        }

        public func validate(name: String) throws {
            try self.items.forEach {
                try validate($0, name: "items[]", parent: name, max: 2048)
                try validate($0, name: "items[]", parent: name, min: 1)
                try validate($0, name: "items[]", parent: name, pattern: "^([\\p{L}\\p{Z}\\p{N}_.:/=+\\-@]*)$")
            }
            try self.validate(self.resourceSetIdentifier, name: "resourceSetIdentifier", parent: name, max: 2048)
            try self.validate(self.resourceSetIdentifier, name: "resourceSetIdentifier", parent: name, min: 1)
            try self.validate(self.resourceSetIdentifier, name: "resourceSetIdentifier", parent: name, pattern: "^([\\p{L}\\p{Z}\\p{N}_.:/=+\\-@]*)$")
        }

        private enum CodingKeys: String, CodingKey {
            case items = "Items"
            case resourceSetIdentifier = "ResourceSetIdentifier"
        }
    }

    public struct BatchDisassociateResourceResponse: AWSDecodableShape {
        /// The resources that failed to disassociate from the resource set.
        public let failedItems: [FailedItem]
        /// A unique identifier for the resource set, used in a request to refer to the resource set.
        public let resourceSetIdentifier: String

        public init(failedItems: [FailedItem], resourceSetIdentifier: String) {
            self.failedItems = failedItems
            self.resourceSetIdentifier = resourceSetIdentifier
        }

        private enum CodingKeys: String, CodingKey {
            case failedItems = "FailedItems"
            case resourceSetIdentifier = "ResourceSetIdentifier"
        }
    }

    public struct ComplianceViolator: AWSDecodableShape {
        /// Metadata about the resource that doesn't comply with the policy scope.
        public let metadata: [String: String]?
        /// The resource ID.
        public let resourceId: String?
        /// The resource type. This is in the format shown in the Amazon Web Services Resource Types Reference. For example: AWS::ElasticLoadBalancingV2::LoadBalancer, AWS::CloudFront::Distribution, or AWS::NetworkFirewall::FirewallPolicy.
        public let resourceType: String?
        /// The reason that the resource is not protected by the policy.
        public let violationReason: ViolationReason?

        public init(metadata: [String: String]? = nil, resourceId: String? = nil, resourceType: String? = nil, violationReason: ViolationReason? = nil) {
            self.metadata = metadata
            self.resourceId = resourceId
            self.resourceType = resourceType
            self.violationReason = violationReason
        }

        private enum CodingKeys: String, CodingKey {
            case metadata = "Metadata"
            case resourceId = "ResourceId"
            case resourceType = "ResourceType"
            case violationReason = "ViolationReason"
        }
    }

    public struct DeleteAppsListRequest: AWSEncodableShape {
        /// The ID of the applications list that you want to delete. You can retrieve this ID from PutAppsList, ListAppsLists, and GetAppsList.
        public let listId: String

        public init(listId: String) {
            self.listId = listId
        }

        public func validate(name: String) throws {
            try self.validate(self.listId, name: "listId", parent: name, max: 36)
            try self.validate(self.listId, name: "listId", parent: name, min: 36)
            try self.validate(self.listId, name: "listId", parent: name, pattern: "^[a-z0-9A-Z-]{36}$")
        }

        private enum CodingKeys: String, CodingKey {
            case listId = "ListId"
        }
    }

    public struct DeleteNotificationChannelRequest: AWSEncodableShape {
        public init() {}
    }

    public struct DeletePolicyRequest: AWSEncodableShape {
        /// If True, the request performs cleanup according to the policy type.  For WAF and Shield Advanced policies, the cleanup does the following:   Deletes rule groups created by Firewall Manager   Removes web ACLs from in-scope resources   Deletes web ACLs that contain no rules or rule groups   For security group policies, the cleanup does the following for each security group in the policy:   Disassociates the security group from in-scope resources    Deletes the security group if it was created through Firewall Manager and if it's no longer associated with any resources through another policy    For security group common policies, even if set to False, Firewall Manager deletes all security groups created by Firewall Manager that aren't associated with any other resources through another policy.  After the cleanup, in-scope resources are no longer protected by web ACLs in this policy. Protection of out-of-scope resources remains unchanged. Scope is determined by tags that you create and accounts that you associate with the policy. When creating the policy, if you specify that only resources in specific accounts or with specific tags are in scope of the policy, those accounts and resources are handled by the policy. All others are out of scope. If you don't specify tags or accounts, all resources are in scope.
        public let deleteAllPolicyResources: Bool?
        /// The ID of the policy that you want to delete. You can retrieve this ID from PutPolicy and ListPolicies.
        public let policyId: String

        public init(deleteAllPolicyResources: Bool? = nil, policyId: String) {
            self.deleteAllPolicyResources = deleteAllPolicyResources
            self.policyId = policyId
        }

        public func validate(name: String) throws {
            try self.validate(self.policyId, name: "policyId", parent: name, max: 36)
            try self.validate(self.policyId, name: "policyId", parent: name, min: 36)
            try self.validate(self.policyId, name: "policyId", parent: name, pattern: "^[a-z0-9A-Z-]{36}$")
        }

        private enum CodingKeys: String, CodingKey {
            case deleteAllPolicyResources = "DeleteAllPolicyResources"
            case policyId = "PolicyId"
        }
    }

    public struct DeleteProtocolsListRequest: AWSEncodableShape {
        /// The ID of the protocols list that you want to delete. You can retrieve this ID from PutProtocolsList, ListProtocolsLists, and GetProtocolsLost.
        public let listId: String

        public init(listId: String) {
            self.listId = listId
        }

        public func validate(name: String) throws {
            try self.validate(self.listId, name: "listId", parent: name, max: 36)
            try self.validate(self.listId, name: "listId", parent: name, min: 36)
            try self.validate(self.listId, name: "listId", parent: name, pattern: "^[a-z0-9A-Z-]{36}$")
        }

        private enum CodingKeys: String, CodingKey {
            case listId = "ListId"
        }
    }

    public struct DeleteResourceSetRequest: AWSEncodableShape {
        /// A unique identifier for the resource set, used in a request to refer to the resource set.
        public let identifier: String

        public init(identifier: String) {
            self.identifier = identifier
        }

        public func validate(name: String) throws {
            try self.validate(self.identifier, name: "identifier", parent: name, max: 22)
            try self.validate(self.identifier, name: "identifier", parent: name, min: 22)
            try self.validate(self.identifier, name: "identifier", parent: name, pattern: "^[a-z0-9A-Z]{22}$")
        }

        private enum CodingKeys: String, CodingKey {
            case identifier = "Identifier"
        }
    }

    public struct DisassociateAdminAccountRequest: AWSEncodableShape {
        public init() {}
    }

    public struct DisassociateThirdPartyFirewallRequest: AWSEncodableShape {
        /// The name of the third-party firewall vendor.
        public let thirdPartyFirewall: ThirdPartyFirewall

        public init(thirdPartyFirewall: ThirdPartyFirewall) {
            self.thirdPartyFirewall = thirdPartyFirewall
        }

        private enum CodingKeys: String, CodingKey {
            case thirdPartyFirewall = "ThirdPartyFirewall"
        }
    }

    public struct DisassociateThirdPartyFirewallResponse: AWSDecodableShape {
        /// The current status for the disassociation of a Firewall Manager administrators account with a third-party firewall.
        public let thirdPartyFirewallStatus: ThirdPartyFirewallAssociationStatus?

        public init(thirdPartyFirewallStatus: ThirdPartyFirewallAssociationStatus? = nil) {
            self.thirdPartyFirewallStatus = thirdPartyFirewallStatus
        }

        private enum CodingKeys: String, CodingKey {
            case thirdPartyFirewallStatus = "ThirdPartyFirewallStatus"
        }
    }

    public struct DiscoveredResource: AWSDecodableShape {
        /// The Amazon Web Services account ID associated with the discovered resource.
        public let accountId: String?
        /// The name of the discovered resource.
        public let name: String?
        /// The type of the discovered resource.
        public let type: String?
        /// The universal resource identifier (URI) of the discovered resource.
        public let uri: String?

        public init(accountId: String? = nil, name: String? = nil, type: String? = nil, uri: String? = nil) {
            self.accountId = accountId
            self.name = name
            self.type = type
            self.uri = uri
        }

        private enum CodingKeys: String, CodingKey {
            case accountId = "AccountId"
            case name = "Name"
            case type = "Type"
            case uri = "URI"
        }
    }

    public struct DnsDuplicateRuleGroupViolation: AWSDecodableShape {
        /// Information about the VPC ID.
        public let violationTarget: String?
        /// A description of the violation that specifies the rule group and VPC.
        public let violationTargetDescription: String?

        public init(violationTarget: String? = nil, violationTargetDescription: String? = nil) {
            self.violationTarget = violationTarget
            self.violationTargetDescription = violationTargetDescription
        }

        private enum CodingKeys: String, CodingKey {
            case violationTarget = "ViolationTarget"
            case violationTargetDescription = "ViolationTargetDescription"
        }
    }

    public struct DnsRuleGroupLimitExceededViolation: AWSDecodableShape {
        /// The number of rule groups currently associated with the VPC.
        public let numberOfRuleGroupsAlreadyAssociated: Int?
        /// Information about the VPC ID.
        public let violationTarget: String?
        /// A description of the violation that specifies the rule group and VPC.
        public let violationTargetDescription: String?

        public init(numberOfRuleGroupsAlreadyAssociated: Int? = nil, violationTarget: String? = nil, violationTargetDescription: String? = nil) {
            self.numberOfRuleGroupsAlreadyAssociated = numberOfRuleGroupsAlreadyAssociated
            self.violationTarget = violationTarget
            self.violationTargetDescription = violationTargetDescription
        }

        private enum CodingKeys: String, CodingKey {
            case numberOfRuleGroupsAlreadyAssociated = "NumberOfRuleGroupsAlreadyAssociated"
            case violationTarget = "ViolationTarget"
            case violationTargetDescription = "ViolationTargetDescription"
        }
    }

    public struct DnsRuleGroupPriorityConflictViolation: AWSDecodableShape {
        /// The ID of the Firewall Manager DNS Firewall policy that was already applied to the VPC. This policy contains the rule group that's already associated with the VPC.
        public let conflictingPolicyId: String?
        /// The priority setting of the two conflicting rule groups.
        public let conflictingPriority: Int?
        /// The priorities of rule groups that are already associated with the VPC. To retry your operation, choose priority settings that aren't in this list for the rule groups in your new DNS Firewall policy.
        public let unavailablePriorities: [Int]?
        /// Information about the VPC ID.
        public let violationTarget: String?
        /// A description of the violation that specifies the VPC and the rule group that's already associated with it.
        public let violationTargetDescription: String?

        public init(conflictingPolicyId: String? = nil, conflictingPriority: Int? = nil, unavailablePriorities: [Int]? = nil, violationTarget: String? = nil, violationTargetDescription: String? = nil) {
            self.conflictingPolicyId = conflictingPolicyId
            self.conflictingPriority = conflictingPriority
            self.unavailablePriorities = unavailablePriorities
            self.violationTarget = violationTarget
            self.violationTargetDescription = violationTargetDescription
        }

        private enum CodingKeys: String, CodingKey {
            case conflictingPolicyId = "ConflictingPolicyId"
            case conflictingPriority = "ConflictingPriority"
            case unavailablePriorities = "UnavailablePriorities"
            case violationTarget = "ViolationTarget"
            case violationTargetDescription = "ViolationTargetDescription"
        }
    }

    public struct EC2AssociateRouteTableAction: AWSDecodableShape {
        /// A description of the EC2 route table that is associated with the remediation action.
        public let description: String?
        /// The ID of the gateway to be used with the EC2 route table that is associated with the remediation action.
        public let gatewayId: ActionTarget?
        /// The ID of the EC2 route table that is associated with the remediation action.
        public let routeTableId: ActionTarget
        /// The ID of the subnet for the EC2 route table that is associated with the remediation action.
        public let subnetId: ActionTarget?

        public init(description: String? = nil, gatewayId: ActionTarget? = nil, routeTableId: ActionTarget, subnetId: ActionTarget? = nil) {
            self.description = description
            self.gatewayId = gatewayId
            self.routeTableId = routeTableId
            self.subnetId = subnetId
        }

        private enum CodingKeys: String, CodingKey {
            case description = "Description"
            case gatewayId = "GatewayId"
            case routeTableId = "RouteTableId"
            case subnetId = "SubnetId"
        }
    }

    public struct EC2CopyRouteTableAction: AWSDecodableShape {
        /// A description of the copied EC2 route table that is associated with the remediation action.
        public let description: String?
        /// The ID of the copied EC2 route table that is associated with the remediation action.
        public let routeTableId: ActionTarget
        /// The VPC ID of the copied EC2 route table that is associated with the remediation action.
        public let vpcId: ActionTarget

        public init(description: String? = nil, routeTableId: ActionTarget, vpcId: ActionTarget) {
            self.description = description
            self.routeTableId = routeTableId
            self.vpcId = vpcId
        }

        private enum CodingKeys: String, CodingKey {
            case description = "Description"
            case routeTableId = "RouteTableId"
            case vpcId = "VpcId"
        }
    }

    public struct EC2CreateRouteAction: AWSDecodableShape {
        /// A description of CreateRoute action in Amazon EC2.
        public let description: String?
        /// Information about the IPv4 CIDR address block used for the destination match.
        public let destinationCidrBlock: String?
        /// Information about the IPv6 CIDR block destination.
        public let destinationIpv6CidrBlock: String?
        /// Information about the ID of a prefix list used for the destination match.
        public let destinationPrefixListId: String?
        /// Information about the ID of an internet gateway or virtual private gateway attached to your VPC.
        public let gatewayId: ActionTarget?
        /// Information about the ID of the route table for the route.
        public let routeTableId: ActionTarget
        /// Information about the ID of a VPC endpoint. Supported for Gateway Load Balancer endpoints only.
        public let vpcEndpointId: ActionTarget?

        public init(description: String? = nil, destinationCidrBlock: String? = nil, destinationIpv6CidrBlock: String? = nil, destinationPrefixListId: String? = nil, gatewayId: ActionTarget? = nil, routeTableId: ActionTarget, vpcEndpointId: ActionTarget? = nil) {
            self.description = description
            self.destinationCidrBlock = destinationCidrBlock
            self.destinationIpv6CidrBlock = destinationIpv6CidrBlock
            self.destinationPrefixListId = destinationPrefixListId
            self.gatewayId = gatewayId
            self.routeTableId = routeTableId
            self.vpcEndpointId = vpcEndpointId
        }

        private enum CodingKeys: String, CodingKey {
            case description = "Description"
            case destinationCidrBlock = "DestinationCidrBlock"
            case destinationIpv6CidrBlock = "DestinationIpv6CidrBlock"
            case destinationPrefixListId = "DestinationPrefixListId"
            case gatewayId = "GatewayId"
            case routeTableId = "RouteTableId"
            case vpcEndpointId = "VpcEndpointId"
        }
    }

    public struct EC2CreateRouteTableAction: AWSDecodableShape {
        /// A description of the CreateRouteTable action.
        public let description: String?
        /// Information about the ID of a VPC.
        public let vpcId: ActionTarget

        public init(description: String? = nil, vpcId: ActionTarget) {
            self.description = description
            self.vpcId = vpcId
        }

        private enum CodingKeys: String, CodingKey {
            case description = "Description"
            case vpcId = "VpcId"
        }
    }

    public struct EC2DeleteRouteAction: AWSDecodableShape {
        /// A description of the DeleteRoute action.
        public let description: String?
        /// Information about the IPv4 CIDR range for the route. The value you specify must match the CIDR for the route exactly.
        public let destinationCidrBlock: String?
        /// Information about the IPv6 CIDR range for the route. The value you specify must match the CIDR for the route exactly.
        public let destinationIpv6CidrBlock: String?
        /// Information about the ID of the prefix list for the route.
        public let destinationPrefixListId: String?
        /// Information about the ID of the route table.
        public let routeTableId: ActionTarget

        public init(description: String? = nil, destinationCidrBlock: String? = nil, destinationIpv6CidrBlock: String? = nil, destinationPrefixListId: String? = nil, routeTableId: ActionTarget) {
            self.description = description
            self.destinationCidrBlock = destinationCidrBlock
            self.destinationIpv6CidrBlock = destinationIpv6CidrBlock
            self.destinationPrefixListId = destinationPrefixListId
            self.routeTableId = routeTableId
        }

        private enum CodingKeys: String, CodingKey {
            case description = "Description"
            case destinationCidrBlock = "DestinationCidrBlock"
            case destinationIpv6CidrBlock = "DestinationIpv6CidrBlock"
            case destinationPrefixListId = "DestinationPrefixListId"
            case routeTableId = "RouteTableId"
        }
    }

    public struct EC2ReplaceRouteAction: AWSDecodableShape {
        /// A description of the ReplaceRoute action in Amazon EC2.
        public let description: String?
        /// Information about the IPv4 CIDR address block used for the destination match. The value that you provide must match the CIDR of an existing route in the table.
        public let destinationCidrBlock: String?
        /// Information about the IPv6 CIDR address block used for the destination match. The value that you provide must match the CIDR of an existing route in the table.
        public let destinationIpv6CidrBlock: String?
        /// Information about the ID of the prefix list for the route.
        public let destinationPrefixListId: String?
        /// Information about the ID of an internet gateway or virtual private gateway.
        public let gatewayId: ActionTarget?
        /// Information about the ID of the route table.
        public let routeTableId: ActionTarget

        public init(description: String? = nil, destinationCidrBlock: String? = nil, destinationIpv6CidrBlock: String? = nil, destinationPrefixListId: String? = nil, gatewayId: ActionTarget? = nil, routeTableId: ActionTarget) {
            self.description = description
            self.destinationCidrBlock = destinationCidrBlock
            self.destinationIpv6CidrBlock = destinationIpv6CidrBlock
            self.destinationPrefixListId = destinationPrefixListId
            self.gatewayId = gatewayId
            self.routeTableId = routeTableId
        }

        private enum CodingKeys: String, CodingKey {
            case description = "Description"
            case destinationCidrBlock = "DestinationCidrBlock"
            case destinationIpv6CidrBlock = "DestinationIpv6CidrBlock"
            case destinationPrefixListId = "DestinationPrefixListId"
            case gatewayId = "GatewayId"
            case routeTableId = "RouteTableId"
        }
    }

    public struct EC2ReplaceRouteTableAssociationAction: AWSDecodableShape {
        /// Information about the association ID.
        public let associationId: ActionTarget
        /// A description of the ReplaceRouteTableAssociation action in Amazon EC2.
        public let description: String?
        /// Information about the ID of the new route table to associate with the subnet.
        public let routeTableId: ActionTarget

        public init(associationId: ActionTarget, description: String? = nil, routeTableId: ActionTarget) {
            self.associationId = associationId
            self.description = description
            self.routeTableId = routeTableId
        }

        private enum CodingKeys: String, CodingKey {
            case associationId = "AssociationId"
            case description = "Description"
            case routeTableId = "RouteTableId"
        }
    }

    public struct EvaluationResult: AWSDecodableShape {
        /// Describes an Amazon Web Services account's compliance with the Firewall Manager policy.
        public let complianceStatus: PolicyComplianceStatusType?
        /// Indicates that over 100 resources are noncompliant with the Firewall Manager policy.
        public let evaluationLimitExceeded: Bool?
        /// The number of resources that are noncompliant with the specified policy. For WAF and Shield Advanced policies, a resource is considered noncompliant if it is not associated with the policy. For security group policies, a resource is considered noncompliant if it doesn't comply with the rules of the policy and remediation is disabled or not possible.
        public let violatorCount: Int64?

        public init(complianceStatus: PolicyComplianceStatusType? = nil, evaluationLimitExceeded: Bool? = nil, violatorCount: Int64? = nil) {
            self.complianceStatus = complianceStatus
            self.evaluationLimitExceeded = evaluationLimitExceeded
            self.violatorCount = violatorCount
        }

        private enum CodingKeys: String, CodingKey {
            case complianceStatus = "ComplianceStatus"
            case evaluationLimitExceeded = "EvaluationLimitExceeded"
            case violatorCount = "ViolatorCount"
        }
    }

    public struct ExpectedRoute: AWSDecodableShape {
        /// Information about the allowed targets.
        public let allowedTargets: [String]?
        /// Information about the contributing subnets.
        public let contributingSubnets: [String]?
        /// Information about the IPv4 CIDR block.
        public let ipV4Cidr: String?
        /// Information about the IPv6 CIDR block.
        public let ipV6Cidr: String?
        /// Information about the ID of the prefix list for the route.
        public let prefixListId: String?
        /// Information about the route table ID.
        public let routeTableId: String?

        public init(allowedTargets: [String]? = nil, contributingSubnets: [String]? = nil, ipV4Cidr: String? = nil, ipV6Cidr: String? = nil, prefixListId: String? = nil, routeTableId: String? = nil) {
            self.allowedTargets = allowedTargets
            self.contributingSubnets = contributingSubnets
            self.ipV4Cidr = ipV4Cidr
            self.ipV6Cidr = ipV6Cidr
            self.prefixListId = prefixListId
            self.routeTableId = routeTableId
        }

        private enum CodingKeys: String, CodingKey {
            case allowedTargets = "AllowedTargets"
            case contributingSubnets = "ContributingSubnets"
            case ipV4Cidr = "IpV4Cidr"
            case ipV6Cidr = "IpV6Cidr"
            case prefixListId = "PrefixListId"
            case routeTableId = "RouteTableId"
        }
    }

    public struct FMSPolicyUpdateFirewallCreationConfigAction: AWSDecodableShape {
        /// Describes the remedial action.
        public let description: String?
        /// A FirewallCreationConfig that you can copy into your current policy's SecurityServiceData in order to remedy scope violations.
        public let firewallCreationConfig: String?

        public init(description: String? = nil, firewallCreationConfig: String? = nil) {
            self.description = description
            self.firewallCreationConfig = firewallCreationConfig
        }

        private enum CodingKeys: String, CodingKey {
            case description = "Description"
            case firewallCreationConfig = "FirewallCreationConfig"
        }
    }

    public struct FailedItem: AWSDecodableShape {
        /// The reason the resource's association could not be updated.
        public let reason: FailedItemReason?
        /// The univeral resource indicator (URI) of the resource that failed.
        public let uri: String?

        public init(reason: FailedItemReason? = nil, uri: String? = nil) {
            self.reason = reason
            self.uri = uri
        }

        private enum CodingKeys: String, CodingKey {
            case reason = "Reason"
            case uri = "URI"
        }
    }

    public struct FirewallSubnetIsOutOfScopeViolation: AWSDecodableShape {
        /// The ID of the firewall subnet that violates the policy scope.
        public let firewallSubnetId: String?
        /// The Availability Zone of the firewall subnet that violates the policy scope.
        public let subnetAvailabilityZone: String?
        /// The Availability Zone ID of the firewall subnet that violates the policy scope.
        public let subnetAvailabilityZoneId: String?
        /// The VPC endpoint ID of the firewall subnet that violates the policy scope.
        public let vpcEndpointId: String?
        /// The VPC ID of the firewall subnet that violates the policy scope.
        public let vpcId: String?

        public init(firewallSubnetId: String? = nil, subnetAvailabilityZone: String? = nil, subnetAvailabilityZoneId: String? = nil, vpcEndpointId: String? = nil, vpcId: String? = nil) {
            self.firewallSubnetId = firewallSubnetId
            self.subnetAvailabilityZone = subnetAvailabilityZone
            self.subnetAvailabilityZoneId = subnetAvailabilityZoneId
            self.vpcEndpointId = vpcEndpointId
            self.vpcId = vpcId
        }

        private enum CodingKeys: String, CodingKey {
            case firewallSubnetId = "FirewallSubnetId"
            case subnetAvailabilityZone = "SubnetAvailabilityZone"
            case subnetAvailabilityZoneId = "SubnetAvailabilityZoneId"
            case vpcEndpointId = "VpcEndpointId"
            case vpcId = "VpcId"
        }
    }

    public struct FirewallSubnetMissingVPCEndpointViolation: AWSDecodableShape {
        /// The ID of the firewall that this VPC endpoint is associated with.
        public let firewallSubnetId: String?
        /// The name of the Availability Zone of the deleted VPC subnet.
        public let subnetAvailabilityZone: String?
        /// The ID of the Availability Zone of the deleted VPC subnet.
        public let subnetAvailabilityZoneId: String?
        /// The resource ID of the VPC associated with the deleted VPC subnet.
        public let vpcId: String?

        public init(firewallSubnetId: String? = nil, subnetAvailabilityZone: String? = nil, subnetAvailabilityZoneId: String? = nil, vpcId: String? = nil) {
            self.firewallSubnetId = firewallSubnetId
            self.subnetAvailabilityZone = subnetAvailabilityZone
            self.subnetAvailabilityZoneId = subnetAvailabilityZoneId
            self.vpcId = vpcId
        }

        private enum CodingKeys: String, CodingKey {
            case firewallSubnetId = "FirewallSubnetId"
            case subnetAvailabilityZone = "SubnetAvailabilityZone"
            case subnetAvailabilityZoneId = "SubnetAvailabilityZoneId"
            case vpcId = "VpcId"
        }
    }

    public struct GetAdminAccountRequest: AWSEncodableShape {
        public init() {}
    }

    public struct GetAdminAccountResponse: AWSDecodableShape {
        /// The account that is set as the Firewall Manager default administrator.
        public let adminAccount: String?
        /// The status of the account that you set as the Firewall Manager default administrator.
        public let roleStatus: AccountRoleStatus?

        public init(adminAccount: String? = nil, roleStatus: AccountRoleStatus? = nil) {
            self.adminAccount = adminAccount
            self.roleStatus = roleStatus
        }

        private enum CodingKeys: String, CodingKey {
            case adminAccount = "AdminAccount"
            case roleStatus = "RoleStatus"
        }
    }

    public struct GetAdminScopeRequest: AWSEncodableShape {
        /// The administator account that you want to get the details for.
        public let adminAccount: String

        public init(adminAccount: String) {
            self.adminAccount = adminAccount
        }

        public func validate(name: String) throws {
            try self.validate(self.adminAccount, name: "adminAccount", parent: name, max: 1024)
            try self.validate(self.adminAccount, name: "adminAccount", parent: name, min: 1)
            try self.validate(self.adminAccount, name: "adminAccount", parent: name, pattern: "^[0-9]+$")
        }

        private enum CodingKeys: String, CodingKey {
            case adminAccount = "AdminAccount"
        }
    }

    public struct GetAdminScopeResponse: AWSDecodableShape {
        /// Contains details about the administrative scope of the requested account.
        public let adminScope: AdminScope?
        /// The current status of the request to onboard a member account as an Firewall Manager administator.    ONBOARDING - The account is onboarding to Firewall Manager as an administrator.    ONBOARDING_COMPLETE - Firewall Manager The account is onboarded to Firewall Manager as an administrator, and can perform actions on the resources defined in their AdminScope.    OFFBOARDING - The account is being removed as an Firewall Manager administrator.    OFFBOARDING_COMPLETE - The account has been removed as an Firewall Manager administrator.
        public let status: OrganizationStatus?

        public init(adminScope: AdminScope? = nil, status: OrganizationStatus? = nil) {
            self.adminScope = adminScope
            self.status = status
        }

        private enum CodingKeys: String, CodingKey {
            case adminScope = "AdminScope"
            case status = "Status"
        }
    }

    public struct GetAppsListRequest: AWSEncodableShape {
        /// Specifies whether the list to retrieve is a default list owned by Firewall Manager.
        public let defaultList: Bool?
        /// The ID of the Firewall Manager applications list that you want the details for.
        public let listId: String

        public init(defaultList: Bool? = nil, listId: String) {
            self.defaultList = defaultList
            self.listId = listId
        }

        public func validate(name: String) throws {
            try self.validate(self.listId, name: "listId", parent: name, max: 36)
            try self.validate(self.listId, name: "listId", parent: name, min: 36)
            try self.validate(self.listId, name: "listId", parent: name, pattern: "^[a-z0-9A-Z-]{36}$")
        }

        private enum CodingKeys: String, CodingKey {
            case defaultList = "DefaultList"
            case listId = "ListId"
        }
    }

    public struct GetAppsListResponse: AWSDecodableShape {
        /// Information about the specified Firewall Manager applications list.
        public let appsList: AppsListData?
        /// The Amazon Resource Name (ARN) of the applications list.
        public let appsListArn: String?

        public init(appsList: AppsListData? = nil, appsListArn: String? = nil) {
            self.appsList = appsList
            self.appsListArn = appsListArn
        }

        private enum CodingKeys: String, CodingKey {
            case appsList = "AppsList"
            case appsListArn = "AppsListArn"
        }
    }

    public struct GetComplianceDetailRequest: AWSEncodableShape {
        /// The Amazon Web Services account that owns the resources that you want to get the details for.
        public let memberAccount: String
        /// The ID of the policy that you want to get the details for. PolicyId is returned by PutPolicy and by ListPolicies.
        public let policyId: String

        public init(memberAccount: String, policyId: String) {
            self.memberAccount = memberAccount
            self.policyId = policyId
        }

        public func validate(name: String) throws {
            try self.validate(self.memberAccount, name: "memberAccount", parent: name, max: 1024)
            try self.validate(self.memberAccount, name: "memberAccount", parent: name, min: 1)
            try self.validate(self.memberAccount, name: "memberAccount", parent: name, pattern: "^[0-9]+$")
            try self.validate(self.policyId, name: "policyId", parent: name, max: 36)
            try self.validate(self.policyId, name: "policyId", parent: name, min: 36)
            try self.validate(self.policyId, name: "policyId", parent: name, pattern: "^[a-z0-9A-Z-]{36}$")
        }

        private enum CodingKeys: String, CodingKey {
            case memberAccount = "MemberAccount"
            case policyId = "PolicyId"
        }
    }

    public struct GetComplianceDetailResponse: AWSDecodableShape {
        /// Information about the resources and the policy that you specified in the GetComplianceDetail request.
        public let policyComplianceDetail: PolicyComplianceDetail?

        public init(policyComplianceDetail: PolicyComplianceDetail? = nil) {
            self.policyComplianceDetail = policyComplianceDetail
        }

        private enum CodingKeys: String, CodingKey {
            case policyComplianceDetail = "PolicyComplianceDetail"
        }
    }

    public struct GetNotificationChannelRequest: AWSEncodableShape {
        public init() {}
    }

    public struct GetNotificationChannelResponse: AWSDecodableShape {
        /// The IAM role that is used by Firewall Manager to record activity to SNS.
        public let snsRoleName: String?
        /// The SNS topic that records Firewall Manager activity.
        public let snsTopicArn: String?

        public init(snsRoleName: String? = nil, snsTopicArn: String? = nil) {
            self.snsRoleName = snsRoleName
            self.snsTopicArn = snsTopicArn
        }

        private enum CodingKeys: String, CodingKey {
            case snsRoleName = "SnsRoleName"
            case snsTopicArn = "SnsTopicArn"
        }
    }

    public struct GetPolicyRequest: AWSEncodableShape {
        /// The ID of the Firewall Manager policy that you want the details for.
        public let policyId: String

        public init(policyId: String) {
            self.policyId = policyId
        }

        public func validate(name: String) throws {
            try self.validate(self.policyId, name: "policyId", parent: name, max: 36)
            try self.validate(self.policyId, name: "policyId", parent: name, min: 36)
            try self.validate(self.policyId, name: "policyId", parent: name, pattern: "^[a-z0-9A-Z-]{36}$")
        }

        private enum CodingKeys: String, CodingKey {
            case policyId = "PolicyId"
        }
    }

    public struct GetPolicyResponse: AWSDecodableShape {
        /// Information about the specified Firewall Manager policy.
        public let policy: Policy?
        /// The Amazon Resource Name (ARN) of the specified policy.
        public let policyArn: String?

        public init(policy: Policy? = nil, policyArn: String? = nil) {
            self.policy = policy
            self.policyArn = policyArn
        }

        private enum CodingKeys: String, CodingKey {
            case policy = "Policy"
            case policyArn = "PolicyArn"
        }
    }

    public struct GetProtectionStatusRequest: AWSEncodableShape {
        /// The end of the time period to query for the attacks. This is a timestamp type. The request syntax listing indicates a number type because the default used by Firewall Manager is Unix time in seconds. However, any valid timestamp format is allowed.
        public let endTime: Date?
        /// Specifies the number of objects that you want Firewall Manager to return for this request. If you have more objects than the number that you specify for MaxResults, the response includes a NextToken value that you can use to get another batch of objects.
        public let maxResults: Int?
        /// The Amazon Web Services account that is in scope of the policy that you want to get the details for.
        public let memberAccountId: String?
        /// If you specify a value for MaxResults and you have more objects than the number that you specify for MaxResults, Firewall Manager returns a NextToken value in the response, which you can use to retrieve another group of objects. For the second and subsequent GetProtectionStatus requests, specify the value of NextToken from the previous response to get information about another batch of objects.
        public let nextToken: String?
        /// The ID of the policy for which you want to get the attack information.
        public let policyId: String
        /// The start of the time period to query for the attacks. This is a timestamp type. The request syntax listing indicates a number type because the default used by Firewall Manager is Unix time in seconds. However, any valid timestamp format is allowed.
        public let startTime: Date?

        public init(endTime: Date? = nil, maxResults: Int? = nil, memberAccountId: String? = nil, nextToken: String? = nil, policyId: String, startTime: Date? = nil) {
            self.endTime = endTime
            self.maxResults = maxResults
            self.memberAccountId = memberAccountId
            self.nextToken = nextToken
            self.policyId = policyId
            self.startTime = startTime
        }

        public func validate(name: String) throws {
            try self.validate(self.maxResults, name: "maxResults", parent: name, max: 100)
            try self.validate(self.maxResults, name: "maxResults", parent: name, min: 1)
            try self.validate(self.memberAccountId, name: "memberAccountId", parent: name, max: 1024)
            try self.validate(self.memberAccountId, name: "memberAccountId", parent: name, min: 1)
            try self.validate(self.memberAccountId, name: "memberAccountId", parent: name, pattern: "^[0-9]+$")
            try self.validate(self.nextToken, name: "nextToken", parent: name, max: 4096)
            try self.validate(self.nextToken, name: "nextToken", parent: name, min: 1)
            try self.validate(self.nextToken, name: "nextToken", parent: name, pattern: "^([\\p{L}\\p{Z}\\p{N}_.:/=+\\-@]*)$")
            try self.validate(self.policyId, name: "policyId", parent: name, max: 36)
            try self.validate(self.policyId, name: "policyId", parent: name, min: 36)
            try self.validate(self.policyId, name: "policyId", parent: name, pattern: "^[a-z0-9A-Z-]{36}$")
        }

        private enum CodingKeys: String, CodingKey {
            case endTime = "EndTime"
            case maxResults = "MaxResults"
            case memberAccountId = "MemberAccountId"
            case nextToken = "NextToken"
            case policyId = "PolicyId"
            case startTime = "StartTime"
        }
    }

    public struct GetProtectionStatusResponse: AWSDecodableShape {
        /// The ID of the Firewall Manager administrator account for this policy.
        public let adminAccountId: String?
        /// Details about the attack, including the following:   Attack type   Account ID   ARN of the resource attacked   Start time of the attack   End time of the attack (ongoing attacks will not have an end time)   The details are in JSON format.
        public let data: String?
        /// If you have more objects than the number that you specified for MaxResults in the request, the response includes a NextToken value. To list more objects, submit another GetProtectionStatus request, and specify the NextToken value from the response in the NextToken value in the next request. Amazon Web Services SDKs provide auto-pagination that identify NextToken in a response and make subsequent request calls automatically on your behalf. However, this feature is not supported by GetProtectionStatus. You must submit subsequent requests with NextToken using your own processes.
        public let nextToken: String?
        /// The service type that is protected by the policy. Currently, this is always SHIELD_ADVANCED.
        public let serviceType: SecurityServiceType?

        public init(adminAccountId: String? = nil, data: String? = nil, nextToken: String? = nil, serviceType: SecurityServiceType? = nil) {
            self.adminAccountId = adminAccountId
            self.data = data
            self.nextToken = nextToken
            self.serviceType = serviceType
        }

        private enum CodingKeys: String, CodingKey {
            case adminAccountId = "AdminAccountId"
            case data = "Data"
            case nextToken = "NextToken"
            case serviceType = "ServiceType"
        }
    }

    public struct GetProtocolsListRequest: AWSEncodableShape {
        /// Specifies whether the list to retrieve is a default list owned by Firewall Manager.
        public let defaultList: Bool?
        /// The ID of the Firewall Manager protocols list that you want the details for.
        public let listId: String

        public init(defaultList: Bool? = nil, listId: String) {
            self.defaultList = defaultList
            self.listId = listId
        }

        public func validate(name: String) throws {
            try self.validate(self.listId, name: "listId", parent: name, max: 36)
            try self.validate(self.listId, name: "listId", parent: name, min: 36)
            try self.validate(self.listId, name: "listId", parent: name, pattern: "^[a-z0-9A-Z-]{36}$")
        }

        private enum CodingKeys: String, CodingKey {
            case defaultList = "DefaultList"
            case listId = "ListId"
        }
    }

    public struct GetProtocolsListResponse: AWSDecodableShape {
        /// Information about the specified Firewall Manager protocols list.
        public let protocolsList: ProtocolsListData?
        /// The Amazon Resource Name (ARN) of the specified protocols list.
        public let protocolsListArn: String?

        public init(protocolsList: ProtocolsListData? = nil, protocolsListArn: String? = nil) {
            self.protocolsList = protocolsList
            self.protocolsListArn = protocolsListArn
        }

        private enum CodingKeys: String, CodingKey {
            case protocolsList = "ProtocolsList"
            case protocolsListArn = "ProtocolsListArn"
        }
    }

    public struct GetResourceSetRequest: AWSEncodableShape {
        /// A unique identifier for the resource set, used in a request to refer to the resource set.
        public let identifier: String

        public init(identifier: String) {
            self.identifier = identifier
        }

        public func validate(name: String) throws {
            try self.validate(self.identifier, name: "identifier", parent: name, max: 22)
            try self.validate(self.identifier, name: "identifier", parent: name, min: 22)
            try self.validate(self.identifier, name: "identifier", parent: name, pattern: "^[a-z0-9A-Z]{22}$")
        }

        private enum CodingKeys: String, CodingKey {
            case identifier = "Identifier"
        }
    }

    public struct GetResourceSetResponse: AWSDecodableShape {
        /// Information about the specified resource set.
        public let resourceSet: ResourceSet
        /// The Amazon Resource Name (ARN) of the resource set.
        public let resourceSetArn: String

        public init(resourceSet: ResourceSet, resourceSetArn: String) {
            self.resourceSet = resourceSet
            self.resourceSetArn = resourceSetArn
        }

        private enum CodingKeys: String, CodingKey {
            case resourceSet = "ResourceSet"
            case resourceSetArn = "ResourceSetArn"
        }
    }

    public struct GetThirdPartyFirewallAssociationStatusRequest: AWSEncodableShape {
        /// The name of the third-party firewall vendor.
        public let thirdPartyFirewall: ThirdPartyFirewall

        public init(thirdPartyFirewall: ThirdPartyFirewall) {
            self.thirdPartyFirewall = thirdPartyFirewall
        }

        private enum CodingKeys: String, CodingKey {
            case thirdPartyFirewall = "ThirdPartyFirewall"
        }
    }

    public struct GetThirdPartyFirewallAssociationStatusResponse: AWSDecodableShape {
        /// The status for subscribing to the third-party firewall vendor in the Amazon Web Services Marketplace.    NO_SUBSCRIPTION - The Firewall Manager policy administrator isn't subscribed to the third-party firewall service in the Amazon Web Services Marketplace.    NOT_COMPLETE - The Firewall Manager policy administrator is in the process of subscribing to the third-party firewall service in the Amazon Web Services Marketplace, but doesn't yet have an active subscription.    COMPLETE - The Firewall Manager policy administrator has an active subscription to the third-party firewall service in the Amazon Web Services Marketplace.
        public let marketplaceOnboardingStatus: MarketplaceSubscriptionOnboardingStatus?
        /// The current status for setting a Firewall Manager policy administrators account as an administrator of the third-party firewall tenant.    ONBOARDING - The Firewall Manager policy administrator is being designated as a tenant administrator.    ONBOARD_COMPLETE - The Firewall Manager policy administrator is designated as a tenant administrator.    OFFBOARDING - The Firewall Manager policy administrator is being removed as a tenant administrator.    OFFBOARD_COMPLETE - The Firewall Manager policy administrator has been removed as a tenant administrator.    NOT_EXIST - The Firewall Manager policy administrator doesn't exist as a tenant administrator.
        public let thirdPartyFirewallStatus: ThirdPartyFirewallAssociationStatus?

        public init(marketplaceOnboardingStatus: MarketplaceSubscriptionOnboardingStatus? = nil, thirdPartyFirewallStatus: ThirdPartyFirewallAssociationStatus? = nil) {
            self.marketplaceOnboardingStatus = marketplaceOnboardingStatus
            self.thirdPartyFirewallStatus = thirdPartyFirewallStatus
        }

        private enum CodingKeys: String, CodingKey {
            case marketplaceOnboardingStatus = "MarketplaceOnboardingStatus"
            case thirdPartyFirewallStatus = "ThirdPartyFirewallStatus"
        }
    }

    public struct GetViolationDetailsRequest: AWSEncodableShape {
        /// The Amazon Web Services account ID that you want the details for.
        public let memberAccount: String
        /// The ID of the Firewall Manager policy that you want the details for. You can get violation details for the following policy types:   DNS Firewall   Imported Network Firewall   Network Firewall   Security group content audit   Third-party firewall
        public let policyId: String
        /// The ID of the resource that has violations.
        public let resourceId: String
        /// The resource type. This is in the format shown in the Amazon Web Services Resource Types Reference. Supported resource types are: AWS::EC2::Instance, AWS::EC2::NetworkInterface, AWS::EC2::SecurityGroup, AWS::NetworkFirewall::FirewallPolicy, and AWS::EC2::Subnet.
        public let resourceType: String

        public init(memberAccount: String, policyId: String, resourceId: String, resourceType: String) {
            self.memberAccount = memberAccount
            self.policyId = policyId
            self.resourceId = resourceId
            self.resourceType = resourceType
        }

        public func validate(name: String) throws {
            try self.validate(self.memberAccount, name: "memberAccount", parent: name, max: 1024)
            try self.validate(self.memberAccount, name: "memberAccount", parent: name, min: 1)
            try self.validate(self.memberAccount, name: "memberAccount", parent: name, pattern: "^[0-9]+$")
            try self.validate(self.policyId, name: "policyId", parent: name, max: 36)
            try self.validate(self.policyId, name: "policyId", parent: name, min: 36)
            try self.validate(self.policyId, name: "policyId", parent: name, pattern: "^[a-z0-9A-Z-]{36}$")
            try self.validate(self.resourceId, name: "resourceId", parent: name, max: 1024)
            try self.validate(self.resourceId, name: "resourceId", parent: name, min: 1)
            try self.validate(self.resourceId, name: "resourceId", parent: name, pattern: "^([\\p{L}\\p{Z}\\p{N}_.:/=+\\-@]*)$")
            try self.validate(self.resourceType, name: "resourceType", parent: name, max: 128)
            try self.validate(self.resourceType, name: "resourceType", parent: name, min: 1)
            try self.validate(self.resourceType, name: "resourceType", parent: name, pattern: "^([\\p{L}\\p{Z}\\p{N}_.:/=+\\-@]*)$")
        }

        private enum CodingKeys: String, CodingKey {
            case memberAccount = "MemberAccount"
            case policyId = "PolicyId"
            case resourceId = "ResourceId"
            case resourceType = "ResourceType"
        }
    }

    public struct GetViolationDetailsResponse: AWSDecodableShape {
        /// Violation detail for a resource.
        public let violationDetail: ViolationDetail?

        public init(violationDetail: ViolationDetail? = nil) {
            self.violationDetail = violationDetail
        }

        private enum CodingKeys: String, CodingKey {
            case violationDetail = "ViolationDetail"
        }
    }

    public struct ListAdminAccountsForOrganizationRequest: AWSEncodableShape {
        /// The maximum number of objects that you want Firewall Manager to return for this request. If more objects are available, in the response, Firewall Manager provides a NextToken value that you can use in a subsequent call to get the next batch of objects.
        public let maxResults: Int?
        /// When you request a list of objects with a MaxResults setting, if the number of objects that are still available for retrieval exceeds the maximum you requested, Firewall Manager returns a NextToken value in the response. To retrieve the next batch of objects, use the token returned from the prior request in your next request.
        public let nextToken: String?

        public init(maxResults: Int? = nil, nextToken: String? = nil) {
            self.maxResults = maxResults
            self.nextToken = nextToken
        }

        public func validate(name: String) throws {
            try self.validate(self.maxResults, name: "maxResults", parent: name, max: 100)
            try self.validate(self.maxResults, name: "maxResults", parent: name, min: 1)
            try self.validate(self.nextToken, name: "nextToken", parent: name, max: 4096)
            try self.validate(self.nextToken, name: "nextToken", parent: name, min: 1)
            try self.validate(self.nextToken, name: "nextToken", parent: name, pattern: "^([\\p{L}\\p{Z}\\p{N}_.:/=+\\-@]*)$")
        }

        private enum CodingKeys: String, CodingKey {
            case maxResults = "MaxResults"
            case nextToken = "NextToken"
        }
    }

    public struct ListAdminAccountsForOrganizationResponse: AWSDecodableShape {
        /// A list of Firewall Manager administrator accounts within the organization that were onboarded as administrators by AssociateAdminAccount or PutAdminAccount.
        public let adminAccounts: [AdminAccountSummary]?
        /// When you request a list of objects with a MaxResults setting, if the number of objects that are still available for retrieval exceeds the maximum you requested, Firewall Manager returns a NextToken value in the response. To retrieve the next batch of objects, use the token returned from the prior request in your next request.
        public let nextToken: String?

        public init(adminAccounts: [AdminAccountSummary]? = nil, nextToken: String? = nil) {
            self.adminAccounts = adminAccounts
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case adminAccounts = "AdminAccounts"
            case nextToken = "NextToken"
        }
    }

    public struct ListAdminsManagingAccountRequest: AWSEncodableShape {
        /// The maximum number of objects that you want Firewall Manager to return for this request. If more objects are available, in the response, Firewall Manager provides a NextToken value that you can use in a subsequent call to get the next batch of objects.
        public let maxResults: Int?
        /// When you request a list of objects with a MaxResults setting, if the number of objects that are still available for retrieval exceeds the maximum you requested, Firewall Manager returns a NextToken value in the response. To retrieve the next batch of objects, use the token returned from the prior request in your next request.
        public let nextToken: String?

        public init(maxResults: Int? = nil, nextToken: String? = nil) {
            self.maxResults = maxResults
            self.nextToken = nextToken
        }

        public func validate(name: String) throws {
            try self.validate(self.maxResults, name: "maxResults", parent: name, max: 100)
            try self.validate(self.maxResults, name: "maxResults", parent: name, min: 1)
            try self.validate(self.nextToken, name: "nextToken", parent: name, max: 4096)
            try self.validate(self.nextToken, name: "nextToken", parent: name, min: 1)
            try self.validate(self.nextToken, name: "nextToken", parent: name, pattern: "^([\\p{L}\\p{Z}\\p{N}_.:/=+\\-@]*)$")
        }

        private enum CodingKeys: String, CodingKey {
            case maxResults = "MaxResults"
            case nextToken = "NextToken"
        }
    }

    public struct ListAdminsManagingAccountResponse: AWSDecodableShape {
        /// The list of accounts who manage member accounts within their AdminScope.
        public let adminAccounts: [String]?
        /// When you request a list of objects with a MaxResults setting, if the number of objects that are still available for retrieval exceeds the maximum you requested, Firewall Manager returns a NextToken value in the response. To retrieve the next batch of objects, use the token returned from the prior request in your next request.
        public let nextToken: String?

        public init(adminAccounts: [String]? = nil, nextToken: String? = nil) {
            self.adminAccounts = adminAccounts
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case adminAccounts = "AdminAccounts"
            case nextToken = "NextToken"
        }
    }

    public struct ListAppsListsRequest: AWSEncodableShape {
        /// Specifies whether the lists to retrieve are default lists owned by Firewall Manager.
        public let defaultLists: Bool?
        /// The maximum number of objects that you want Firewall Manager to return for this request. If more objects are available, in the response, Firewall Manager provides a NextToken value that you can use in a subsequent call to get the next batch of objects. If you don't specify this, Firewall Manager returns all available objects.
        public let maxResults: Int
        /// If you specify a value for MaxResults in your list request, and you have more objects than the maximum, Firewall Manager returns this token in the response. For all but the first request, you provide the token returned by the prior request in the request parameters, to retrieve the next batch of objects.
        public let nextToken: String?

        public init(defaultLists: Bool? = nil, maxResults: Int, nextToken: String? = nil) {
            self.defaultLists = defaultLists
            self.maxResults = maxResults
            self.nextToken = nextToken
        }

        public func validate(name: String) throws {
            try self.validate(self.maxResults, name: "maxResults", parent: name, max: 100)
            try self.validate(self.maxResults, name: "maxResults", parent: name, min: 1)
            try self.validate(self.nextToken, name: "nextToken", parent: name, max: 4096)
            try self.validate(self.nextToken, name: "nextToken", parent: name, min: 1)
            try self.validate(self.nextToken, name: "nextToken", parent: name, pattern: "^([\\p{L}\\p{Z}\\p{N}_.:/=+\\-@]*)$")
        }

        private enum CodingKeys: String, CodingKey {
            case defaultLists = "DefaultLists"
            case maxResults = "MaxResults"
            case nextToken = "NextToken"
        }
    }

    public struct ListAppsListsResponse: AWSDecodableShape {
        /// An array of AppsListDataSummary objects.
        public let appsLists: [AppsListDataSummary]?
        /// If you specify a value for MaxResults in your list request, and you have more objects than the maximum, Firewall Manager returns this token in the response. You can use this token in subsequent requests to retrieve the next batch of objects.
        public let nextToken: String?

        public init(appsLists: [AppsListDataSummary]? = nil, nextToken: String? = nil) {
            self.appsLists = appsLists
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case appsLists = "AppsLists"
            case nextToken = "NextToken"
        }
    }

    public struct ListComplianceStatusRequest: AWSEncodableShape {
        /// Specifies the number of PolicyComplianceStatus objects that you want Firewall Manager to return for this request. If you have more PolicyComplianceStatus objects than the number that you specify for MaxResults, the response includes a NextToken value that you can use to get another batch of PolicyComplianceStatus objects.
        public let maxResults: Int?
        /// If you specify a value for MaxResults and you have more PolicyComplianceStatus objects than the number that you specify for MaxResults, Firewall Manager returns a NextToken value in the response that allows you to list another group of PolicyComplianceStatus objects. For the second and subsequent ListComplianceStatus requests, specify the value of NextToken from the previous response to get information about another batch of PolicyComplianceStatus objects.
        public let nextToken: String?
        /// The ID of the Firewall Manager policy that you want the details for.
        public let policyId: String

        public init(maxResults: Int? = nil, nextToken: String? = nil, policyId: String) {
            self.maxResults = maxResults
            self.nextToken = nextToken
            self.policyId = policyId
        }

        public func validate(name: String) throws {
            try self.validate(self.maxResults, name: "maxResults", parent: name, max: 100)
            try self.validate(self.maxResults, name: "maxResults", parent: name, min: 1)
            try self.validate(self.nextToken, name: "nextToken", parent: name, max: 4096)
            try self.validate(self.nextToken, name: "nextToken", parent: name, min: 1)
            try self.validate(self.nextToken, name: "nextToken", parent: name, pattern: "^([\\p{L}\\p{Z}\\p{N}_.:/=+\\-@]*)$")
            try self.validate(self.policyId, name: "policyId", parent: name, max: 36)
            try self.validate(self.policyId, name: "policyId", parent: name, min: 36)
            try self.validate(self.policyId, name: "policyId", parent: name, pattern: "^[a-z0-9A-Z-]{36}$")
        }

        private enum CodingKeys: String, CodingKey {
            case maxResults = "MaxResults"
            case nextToken = "NextToken"
            case policyId = "PolicyId"
        }
    }

    public struct ListComplianceStatusResponse: AWSDecodableShape {
        /// If you have more PolicyComplianceStatus objects than the number that you specified for MaxResults in the request, the response includes a NextToken value. To list more PolicyComplianceStatus objects, submit another ListComplianceStatus request, and specify the NextToken value from the response in the NextToken value in the next request.
        public let nextToken: String?
        /// An array of PolicyComplianceStatus objects.
        public let policyComplianceStatusList: [PolicyComplianceStatus]?

        public init(nextToken: String? = nil, policyComplianceStatusList: [PolicyComplianceStatus]? = nil) {
            self.nextToken = nextToken
            self.policyComplianceStatusList = policyComplianceStatusList
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "NextToken"
            case policyComplianceStatusList = "PolicyComplianceStatusList"
        }
    }

    public struct ListDiscoveredResourcesRequest: AWSEncodableShape {
        /// The maximum number of objects that you want Firewall Manager to return for this request. If more objects are available, in the response, Firewall Manager provides a NextToken value that you can use in a subsequent call to get the next batch of objects.
        public let maxResults: Int?
        /// The Amazon Web Services account IDs to discover resources in. Only one account is supported per request. The account must be a member of your organization.
        public let memberAccountIds: [String]
        /// When you request a list of objects with a MaxResults setting, if the number of objects that are still available for retrieval exceeds the maximum you requested, Firewall Manager returns a NextToken value in the response. To retrieve the next batch of objects, use the token returned from the prior request in your next request.
        public let nextToken: String?
        /// The type of resources to discover.
        public let resourceType: String

        public init(maxResults: Int? = nil, memberAccountIds: [String], nextToken: String? = nil, resourceType: String) {
            self.maxResults = maxResults
            self.memberAccountIds = memberAccountIds
            self.nextToken = nextToken
            self.resourceType = resourceType
        }

        public func validate(name: String) throws {
            try self.validate(self.maxResults, name: "maxResults", parent: name, max: 100)
            try self.validate(self.maxResults, name: "maxResults", parent: name, min: 1)
            try self.memberAccountIds.forEach {
                try validate($0, name: "memberAccountIds[]", parent: name, max: 1024)
                try validate($0, name: "memberAccountIds[]", parent: name, min: 1)
                try validate($0, name: "memberAccountIds[]", parent: name, pattern: "^[0-9]+$")
            }
            try self.validate(self.nextToken, name: "nextToken", parent: name, max: 4096)
            try self.validate(self.nextToken, name: "nextToken", parent: name, min: 1)
            try self.validate(self.nextToken, name: "nextToken", parent: name, pattern: "^([\\p{L}\\p{Z}\\p{N}_.:/=+\\-@]*)$")
            try self.validate(self.resourceType, name: "resourceType", parent: name, max: 128)
            try self.validate(self.resourceType, name: "resourceType", parent: name, min: 1)
            try self.validate(self.resourceType, name: "resourceType", parent: name, pattern: "^([\\p{L}\\p{Z}\\p{N}_.:/=+\\-@]*)$")
        }

        private enum CodingKeys: String, CodingKey {
            case maxResults = "MaxResults"
            case memberAccountIds = "MemberAccountIds"
            case nextToken = "NextToken"
            case resourceType = "ResourceType"
        }
    }

    public struct ListDiscoveredResourcesResponse: AWSDecodableShape {
        /// Details of the resources that were discovered.
        public let items: [DiscoveredResource]?
        /// When you request a list of objects with a MaxResults setting, if the number of objects that are still available for retrieval exceeds the maximum you requested, Firewall Manager returns a NextToken value in the response. To retrieve the next batch of objects, use the token returned from the prior request in your next request.
        public let nextToken: String?

        public init(items: [DiscoveredResource]? = nil, nextToken: String? = nil) {
            self.items = items
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case items = "Items"
            case nextToken = "NextToken"
        }
    }

    public struct ListMemberAccountsRequest: AWSEncodableShape {
        /// Specifies the number of member account IDs that you want Firewall Manager to return for this request. If you have more IDs than the number that you specify for MaxResults, the response includes a NextToken value that you can use to get another batch of member account IDs.
        public let maxResults: Int?
        /// If you specify a value for MaxResults and you have more account IDs than the number that you specify for MaxResults, Firewall Manager returns a NextToken value in the response that allows you to list another group of IDs. For the second and subsequent ListMemberAccountsRequest requests, specify the value of NextToken from the previous response to get information about another batch of member account IDs.
        public let nextToken: String?

        public init(maxResults: Int? = nil, nextToken: String? = nil) {
            self.maxResults = maxResults
            self.nextToken = nextToken
        }

        public func validate(name: String) throws {
            try self.validate(self.maxResults, name: "maxResults", parent: name, max: 100)
            try self.validate(self.maxResults, name: "maxResults", parent: name, min: 1)
            try self.validate(self.nextToken, name: "nextToken", parent: name, max: 4096)
            try self.validate(self.nextToken, name: "nextToken", parent: name, min: 1)
            try self.validate(self.nextToken, name: "nextToken", parent: name, pattern: "^([\\p{L}\\p{Z}\\p{N}_.:/=+\\-@]*)$")
        }

        private enum CodingKeys: String, CodingKey {
            case maxResults = "MaxResults"
            case nextToken = "NextToken"
        }
    }

    public struct ListMemberAccountsResponse: AWSDecodableShape {
        /// An array of account IDs.
        public let memberAccounts: [String]?
        /// If you have more member account IDs than the number that you specified for MaxResults in the request, the response includes a NextToken value. To list more IDs, submit another ListMemberAccounts request, and specify the NextToken value from the response in the NextToken value in the next request.
        public let nextToken: String?

        public init(memberAccounts: [String]? = nil, nextToken: String? = nil) {
            self.memberAccounts = memberAccounts
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case memberAccounts = "MemberAccounts"
            case nextToken = "NextToken"
        }
    }

    public struct ListPoliciesRequest: AWSEncodableShape {
        /// Specifies the number of PolicySummary objects that you want Firewall Manager to return for this request. If you have more PolicySummary objects than the number that you specify for MaxResults, the response includes a NextToken value that you can use to get another batch of PolicySummary objects.
        public let maxResults: Int?
        /// If you specify a value for MaxResults and you have more PolicySummary objects than the number that you specify for MaxResults, Firewall Manager returns a NextToken value in the response that allows you to list another group of PolicySummary objects. For the second and subsequent ListPolicies requests, specify the value of NextToken from the previous response to get information about another batch of PolicySummary objects.
        public let nextToken: String?

        public init(maxResults: Int? = nil, nextToken: String? = nil) {
            self.maxResults = maxResults
            self.nextToken = nextToken
        }

        public func validate(name: String) throws {
            try self.validate(self.maxResults, name: "maxResults", parent: name, max: 100)
            try self.validate(self.maxResults, name: "maxResults", parent: name, min: 1)
            try self.validate(self.nextToken, name: "nextToken", parent: name, max: 4096)
            try self.validate(self.nextToken, name: "nextToken", parent: name, min: 1)
            try self.validate(self.nextToken, name: "nextToken", parent: name, pattern: "^([\\p{L}\\p{Z}\\p{N}_.:/=+\\-@]*)$")
        }

        private enum CodingKeys: String, CodingKey {
            case maxResults = "MaxResults"
            case nextToken = "NextToken"
        }
    }

    public struct ListPoliciesResponse: AWSDecodableShape {
        /// If you have more PolicySummary objects than the number that you specified for MaxResults in the request, the response includes a NextToken value. To list more PolicySummary objects, submit another ListPolicies request, and specify the NextToken value from the response in the NextToken value in the next request.
        public let nextToken: String?
        /// An array of PolicySummary objects.
        public let policyList: [PolicySummary]?

        public init(nextToken: String? = nil, policyList: [PolicySummary]? = nil) {
            self.nextToken = nextToken
            self.policyList = policyList
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "NextToken"
            case policyList = "PolicyList"
        }
    }

    public struct ListProtocolsListsRequest: AWSEncodableShape {
        /// Specifies whether the lists to retrieve are default lists owned by Firewall Manager.
        public let defaultLists: Bool?
        /// The maximum number of objects that you want Firewall Manager to return for this request. If more objects are available, in the response, Firewall Manager provides a NextToken value that you can use in a subsequent call to get the next batch of objects. If you don't specify this, Firewall Manager returns all available objects.
        public let maxResults: Int
        /// If you specify a value for MaxResults in your list request, and you have more objects than the maximum, Firewall Manager returns this token in the response. For all but the first request, you provide the token returned by the prior request in the request parameters, to retrieve the next batch of objects.
        public let nextToken: String?

        public init(defaultLists: Bool? = nil, maxResults: Int, nextToken: String? = nil) {
            self.defaultLists = defaultLists
            self.maxResults = maxResults
            self.nextToken = nextToken
        }

        public func validate(name: String) throws {
            try self.validate(self.maxResults, name: "maxResults", parent: name, max: 100)
            try self.validate(self.maxResults, name: "maxResults", parent: name, min: 1)
            try self.validate(self.nextToken, name: "nextToken", parent: name, max: 4096)
            try self.validate(self.nextToken, name: "nextToken", parent: name, min: 1)
            try self.validate(self.nextToken, name: "nextToken", parent: name, pattern: "^([\\p{L}\\p{Z}\\p{N}_.:/=+\\-@]*)$")
        }

        private enum CodingKeys: String, CodingKey {
            case defaultLists = "DefaultLists"
            case maxResults = "MaxResults"
            case nextToken = "NextToken"
        }
    }

    public struct ListProtocolsListsResponse: AWSDecodableShape {
        /// If you specify a value for MaxResults in your list request, and you have more objects than the maximum, Firewall Manager returns this token in the response. You can use this token in subsequent requests to retrieve the next batch of objects.
        public let nextToken: String?
        /// An array of ProtocolsListDataSummary objects.
        public let protocolsLists: [ProtocolsListDataSummary]?

        public init(nextToken: String? = nil, protocolsLists: [ProtocolsListDataSummary]? = nil) {
            self.nextToken = nextToken
            self.protocolsLists = protocolsLists
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "NextToken"
            case protocolsLists = "ProtocolsLists"
        }
    }

    public struct ListResourceSetResourcesRequest: AWSEncodableShape {
        /// A unique identifier for the resource set, used in a request to refer to the resource set.
        public let identifier: String
        /// The maximum number of objects that you want Firewall Manager to return for this request. If more objects are available, in the response, Firewall Manager provides a NextToken value that you can use in a subsequent call to get the next batch of objects.
        public let maxResults: Int?
        /// When you request a list of objects with a MaxResults setting, if the number of objects that are still available for retrieval exceeds the maximum you requested, Firewall Manager returns a NextToken value in the response. To retrieve the next batch of objects, use the token returned from the prior request in your next request.
        public let nextToken: String?

        public init(identifier: String, maxResults: Int? = nil, nextToken: String? = nil) {
            self.identifier = identifier
            self.maxResults = maxResults
            self.nextToken = nextToken
        }

        public func validate(name: String) throws {
            try self.validate(self.identifier, name: "identifier", parent: name, max: 1024)
            try self.validate(self.identifier, name: "identifier", parent: name, min: 1)
            try self.validate(self.identifier, name: "identifier", parent: name, pattern: "^([\\p{L}\\p{Z}\\p{N}_.:/=+\\-@]*)$")
            try self.validate(self.maxResults, name: "maxResults", parent: name, max: 100)
            try self.validate(self.maxResults, name: "maxResults", parent: name, min: 1)
            try self.validate(self.nextToken, name: "nextToken", parent: name, max: 4096)
            try self.validate(self.nextToken, name: "nextToken", parent: name, min: 1)
            try self.validate(self.nextToken, name: "nextToken", parent: name, pattern: "^([\\p{L}\\p{Z}\\p{N}_.:/=+\\-@]*)$")
        }

        private enum CodingKeys: String, CodingKey {
            case identifier = "Identifier"
            case maxResults = "MaxResults"
            case nextToken = "NextToken"
        }
    }

    public struct ListResourceSetResourcesResponse: AWSDecodableShape {
        /// An array of the associated resources' uniform resource identifiers (URI).
        public let items: [Resource]
        /// When you request a list of objects with a MaxResults setting, if the number of objects that are still available for retrieval exceeds the maximum you requested, Firewall Manager returns a NextToken value in the response. To retrieve the next batch of objects, use the token returned from the prior request in your next request.
        public let nextToken: String?

        public init(items: [Resource], nextToken: String? = nil) {
            self.items = items
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case items = "Items"
            case nextToken = "NextToken"
        }
    }

    public struct ListResourceSetsRequest: AWSEncodableShape {
        /// The maximum number of objects that you want Firewall Manager to return for this request. If more objects are available, in the response, Firewall Manager provides a NextToken value that you can use in a subsequent call to get the next batch of objects.
        public let maxResults: Int?
        /// When you request a list of objects with a MaxResults setting, if the number of objects that are still available for retrieval exceeds the maximum you requested, Firewall Manager returns a NextToken value in the response. To retrieve the next batch of objects, use the token returned from the prior request in your next request.
        public let nextToken: String?

        public init(maxResults: Int? = nil, nextToken: String? = nil) {
            self.maxResults = maxResults
            self.nextToken = nextToken
        }

        public func validate(name: String) throws {
            try self.validate(self.maxResults, name: "maxResults", parent: name, max: 100)
            try self.validate(self.maxResults, name: "maxResults", parent: name, min: 1)
            try self.validate(self.nextToken, name: "nextToken", parent: name, max: 4096)
            try self.validate(self.nextToken, name: "nextToken", parent: name, min: 1)
            try self.validate(self.nextToken, name: "nextToken", parent: name, pattern: "^([\\p{L}\\p{Z}\\p{N}_.:/=+\\-@]*)$")
        }

        private enum CodingKeys: String, CodingKey {
            case maxResults = "MaxResults"
            case nextToken = "NextToken"
        }
    }

    public struct ListResourceSetsResponse: AWSDecodableShape {
        /// When you request a list of objects with a MaxResults setting, if the number of objects that are still available for retrieval exceeds the maximum you requested, Firewall Manager returns a NextToken value in the response. To retrieve the next batch of objects, use the token returned from the prior request in your next request.
        public let nextToken: String?
        /// An array of ResourceSetSummary objects.
        public let resourceSets: [ResourceSetSummary]?

        public init(nextToken: String? = nil, resourceSets: [ResourceSetSummary]? = nil) {
            self.nextToken = nextToken
            self.resourceSets = resourceSets
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "NextToken"
            case resourceSets = "ResourceSets"
        }
    }

    public struct ListTagsForResourceRequest: AWSEncodableShape {
        /// The Amazon Resource Name (ARN) of the resource to return tags for. The Firewall Manager resources that support tagging are policies, applications lists, and protocols lists.
        public let resourceArn: String

        public init(resourceArn: String) {
            self.resourceArn = resourceArn
        }

        public func validate(name: String) throws {
            try self.validate(self.resourceArn, name: "resourceArn", parent: name, max: 1024)
            try self.validate(self.resourceArn, name: "resourceArn", parent: name, min: 1)
            try self.validate(self.resourceArn, name: "resourceArn", parent: name, pattern: "^([\\p{L}\\p{Z}\\p{N}_.:/=+\\-@]*)$")
        }

        private enum CodingKeys: String, CodingKey {
            case resourceArn = "ResourceArn"
        }
    }

    public struct ListTagsForResourceResponse: AWSDecodableShape {
        /// The tags associated with the resource.
        public let tagList: [Tag]?

        public init(tagList: [Tag]? = nil) {
            self.tagList = tagList
        }

        private enum CodingKeys: String, CodingKey {
            case tagList = "TagList"
        }
    }

    public struct ListThirdPartyFirewallFirewallPoliciesRequest: AWSEncodableShape {
        /// The maximum number of third-party firewall policies that you want Firewall Manager to return. If
        /// the specified third-party firewall vendor is associated with more than MaxResults firewall policies, the response includes a
        /// NextToken element. NextToken contains an encrypted token that identifies the first third-party firewall policies
        /// that Firewall Manager will return if you submit another request.
        public let maxResults: Int
        /// If the previous response included a NextToken element, the specified third-party firewall vendor is associated with more
        /// third-party firewall policies. To get more third-party firewall policies, submit another ListThirdPartyFirewallFirewallPoliciesRequest request.  For the value of NextToken, specify the value of NextToken from the previous response. If the previous response didn't include a NextToken element, there are no more third-party firewall policies to get.
        public let nextToken: String?
        /// The name of the third-party firewall vendor.
        public let thirdPartyFirewall: ThirdPartyFirewall

        public init(maxResults: Int, nextToken: String? = nil, thirdPartyFirewall: ThirdPartyFirewall) {
            self.maxResults = maxResults
            self.nextToken = nextToken
            self.thirdPartyFirewall = thirdPartyFirewall
        }

        public func validate(name: String) throws {
            try self.validate(self.maxResults, name: "maxResults", parent: name, max: 100)
            try self.validate(self.maxResults, name: "maxResults", parent: name, min: 1)
            try self.validate(self.nextToken, name: "nextToken", parent: name, max: 4096)
            try self.validate(self.nextToken, name: "nextToken", parent: name, min: 1)
            try self.validate(self.nextToken, name: "nextToken", parent: name, pattern: "^([\\p{L}\\p{Z}\\p{N}_.:/=+\\-@]*)$")
        }

        private enum CodingKeys: String, CodingKey {
            case maxResults = "MaxResults"
            case nextToken = "NextToken"
            case thirdPartyFirewall = "ThirdPartyFirewall"
        }
    }

    public struct ListThirdPartyFirewallFirewallPoliciesResponse: AWSDecodableShape {
        /// The value that you will use for NextToken in the next ListThirdPartyFirewallFirewallPolicies request.
        public let nextToken: String?
        /// A list that contains one ThirdPartyFirewallFirewallPolicies element for each third-party firewall policies that the specified
        /// third-party firewall vendor is associated with. Each ThirdPartyFirewallFirewallPolicies element contains the firewall policy name and ID.
        public let thirdPartyFirewallFirewallPolicies: [ThirdPartyFirewallFirewallPolicy]?

        public init(nextToken: String? = nil, thirdPartyFirewallFirewallPolicies: [ThirdPartyFirewallFirewallPolicy]? = nil) {
            self.nextToken = nextToken
            self.thirdPartyFirewallFirewallPolicies = thirdPartyFirewallFirewallPolicies
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "NextToken"
            case thirdPartyFirewallFirewallPolicies = "ThirdPartyFirewallFirewallPolicies"
        }
    }

    public struct NetworkFirewallBlackHoleRouteDetectedViolation: AWSDecodableShape {
        /// Information about the route table ID.
        public let routeTableId: String?
        /// Information about the route or routes that are in violation.
        public let violatingRoutes: [Route]?
        /// The subnet that has an inactive state.
        public let violationTarget: String?
        /// Information about the VPC ID.
        public let vpcId: String?

        public init(routeTableId: String? = nil, violatingRoutes: [Route]? = nil, violationTarget: String? = nil, vpcId: String? = nil) {
            self.routeTableId = routeTableId
            self.violatingRoutes = violatingRoutes
            self.violationTarget = violationTarget
            self.vpcId = vpcId
        }

        private enum CodingKeys: String, CodingKey {
            case routeTableId = "RouteTableId"
            case violatingRoutes = "ViolatingRoutes"
            case violationTarget = "ViolationTarget"
            case vpcId = "VpcId"
        }
    }

    public struct NetworkFirewallInternetTrafficNotInspectedViolation: AWSDecodableShape {
        /// The actual firewall subnet routes.
        public let actualFirewallSubnetRoutes: [Route]?
        /// The actual internet gateway routes.
        public let actualInternetGatewayRoutes: [Route]?
        /// Information about the subnet route table for the current firewall.
        public let currentFirewallSubnetRouteTable: String?
        /// The current route table for the internet gateway.
        public let currentInternetGatewayRouteTable: String?
        /// The expected endpoint for the current firewall.
        public let expectedFirewallEndpoint: String?
        /// The firewall subnet routes that are expected.
        public let expectedFirewallSubnetRoutes: [ExpectedRoute]?
        /// The internet gateway routes that are expected.
        public let expectedInternetGatewayRoutes: [ExpectedRoute]?
        /// The firewall subnet ID.
        public let firewallSubnetId: String?
        /// The internet gateway ID.
        public let internetGatewayId: String?
        /// Information about whether the route table is used in another Availability Zone.
        public let isRouteTableUsedInDifferentAZ: Bool?
        /// Information about the route table ID.
        public let routeTableId: String?
        /// The subnet Availability Zone.
        public let subnetAvailabilityZone: String?
        /// The subnet ID.
        public let subnetId: String?
        /// The route or routes that are in violation.
        public let violatingRoutes: [Route]?
        /// Information about the VPC ID.
        public let vpcId: String?

        public init(actualFirewallSubnetRoutes: [Route]? = nil, actualInternetGatewayRoutes: [Route]? = nil, currentFirewallSubnetRouteTable: String? = nil, currentInternetGatewayRouteTable: String? = nil, expectedFirewallEndpoint: String? = nil, expectedFirewallSubnetRoutes: [ExpectedRoute]? = nil, expectedInternetGatewayRoutes: [ExpectedRoute]? = nil, firewallSubnetId: String? = nil, internetGatewayId: String? = nil, isRouteTableUsedInDifferentAZ: Bool? = nil, routeTableId: String? = nil, subnetAvailabilityZone: String? = nil, subnetId: String? = nil, violatingRoutes: [Route]? = nil, vpcId: String? = nil) {
            self.actualFirewallSubnetRoutes = actualFirewallSubnetRoutes
            self.actualInternetGatewayRoutes = actualInternetGatewayRoutes
            self.currentFirewallSubnetRouteTable = currentFirewallSubnetRouteTable
            self.currentInternetGatewayRouteTable = currentInternetGatewayRouteTable
            self.expectedFirewallEndpoint = expectedFirewallEndpoint
            self.expectedFirewallSubnetRoutes = expectedFirewallSubnetRoutes
            self.expectedInternetGatewayRoutes = expectedInternetGatewayRoutes
            self.firewallSubnetId = firewallSubnetId
            self.internetGatewayId = internetGatewayId
            self.isRouteTableUsedInDifferentAZ = isRouteTableUsedInDifferentAZ
            self.routeTableId = routeTableId
            self.subnetAvailabilityZone = subnetAvailabilityZone
            self.subnetId = subnetId
            self.violatingRoutes = violatingRoutes
            self.vpcId = vpcId
        }

        private enum CodingKeys: String, CodingKey {
            case actualFirewallSubnetRoutes = "ActualFirewallSubnetRoutes"
            case actualInternetGatewayRoutes = "ActualInternetGatewayRoutes"
            case currentFirewallSubnetRouteTable = "CurrentFirewallSubnetRouteTable"
            case currentInternetGatewayRouteTable = "CurrentInternetGatewayRouteTable"
            case expectedFirewallEndpoint = "ExpectedFirewallEndpoint"
            case expectedFirewallSubnetRoutes = "ExpectedFirewallSubnetRoutes"
            case expectedInternetGatewayRoutes = "ExpectedInternetGatewayRoutes"
            case firewallSubnetId = "FirewallSubnetId"
            case internetGatewayId = "InternetGatewayId"
            case isRouteTableUsedInDifferentAZ = "IsRouteTableUsedInDifferentAZ"
            case routeTableId = "RouteTableId"
            case subnetAvailabilityZone = "SubnetAvailabilityZone"
            case subnetId = "SubnetId"
            case violatingRoutes = "ViolatingRoutes"
            case vpcId = "VpcId"
        }
    }

    public struct NetworkFirewallInvalidRouteConfigurationViolation: AWSDecodableShape {
        /// The actual firewall endpoint.
        public let actualFirewallEndpoint: String?
        /// The actual subnet ID for the firewall.
        public let actualFirewallSubnetId: String?
        /// The actual firewall subnet routes that are expected.
        public let actualFirewallSubnetRoutes: [Route]?
        /// The actual internet gateway routes.
        public let actualInternetGatewayRoutes: [Route]?
        /// The subnets that are affected.
        public let affectedSubnets: [String]?
        /// The subnet route table for the current firewall.
        public let currentFirewallSubnetRouteTable: String?
        /// The route table for the current internet gateway.
        public let currentInternetGatewayRouteTable: String?
        /// The firewall endpoint that's expected.
        public let expectedFirewallEndpoint: String?
        /// The expected subnet ID for the firewall.
        public let expectedFirewallSubnetId: String?
        /// The firewall subnet routes that are expected.
        public let expectedFirewallSubnetRoutes: [ExpectedRoute]?
        /// The expected routes for the internet gateway.
        public let expectedInternetGatewayRoutes: [ExpectedRoute]?
        /// The internet gateway ID.
        public let internetGatewayId: String?
        /// Information about whether the route table is used in another Availability Zone.
        public let isRouteTableUsedInDifferentAZ: Bool?
        /// The route table ID.
        public let routeTableId: String?
        /// The route that's in violation.
        public let violatingRoute: Route?
        /// Information about the VPC ID.
        public let vpcId: String?

        public init(actualFirewallEndpoint: String? = nil, actualFirewallSubnetId: String? = nil, actualFirewallSubnetRoutes: [Route]? = nil, actualInternetGatewayRoutes: [Route]? = nil, affectedSubnets: [String]? = nil, currentFirewallSubnetRouteTable: String? = nil, currentInternetGatewayRouteTable: String? = nil, expectedFirewallEndpoint: String? = nil, expectedFirewallSubnetId: String? = nil, expectedFirewallSubnetRoutes: [ExpectedRoute]? = nil, expectedInternetGatewayRoutes: [ExpectedRoute]? = nil, internetGatewayId: String? = nil, isRouteTableUsedInDifferentAZ: Bool? = nil, routeTableId: String? = nil, violatingRoute: Route? = nil, vpcId: String? = nil) {
            self.actualFirewallEndpoint = actualFirewallEndpoint
            self.actualFirewallSubnetId = actualFirewallSubnetId
            self.actualFirewallSubnetRoutes = actualFirewallSubnetRoutes
            self.actualInternetGatewayRoutes = actualInternetGatewayRoutes
            self.affectedSubnets = affectedSubnets
            self.currentFirewallSubnetRouteTable = currentFirewallSubnetRouteTable
            self.currentInternetGatewayRouteTable = currentInternetGatewayRouteTable
            self.expectedFirewallEndpoint = expectedFirewallEndpoint
            self.expectedFirewallSubnetId = expectedFirewallSubnetId
            self.expectedFirewallSubnetRoutes = expectedFirewallSubnetRoutes
            self.expectedInternetGatewayRoutes = expectedInternetGatewayRoutes
            self.internetGatewayId = internetGatewayId
            self.isRouteTableUsedInDifferentAZ = isRouteTableUsedInDifferentAZ
            self.routeTableId = routeTableId
            self.violatingRoute = violatingRoute
            self.vpcId = vpcId
        }

        private enum CodingKeys: String, CodingKey {
            case actualFirewallEndpoint = "ActualFirewallEndpoint"
            case actualFirewallSubnetId = "ActualFirewallSubnetId"
            case actualFirewallSubnetRoutes = "ActualFirewallSubnetRoutes"
            case actualInternetGatewayRoutes = "ActualInternetGatewayRoutes"
            case affectedSubnets = "AffectedSubnets"
            case currentFirewallSubnetRouteTable = "CurrentFirewallSubnetRouteTable"
            case currentInternetGatewayRouteTable = "CurrentInternetGatewayRouteTable"
            case expectedFirewallEndpoint = "ExpectedFirewallEndpoint"
            case expectedFirewallSubnetId = "ExpectedFirewallSubnetId"
            case expectedFirewallSubnetRoutes = "ExpectedFirewallSubnetRoutes"
            case expectedInternetGatewayRoutes = "ExpectedInternetGatewayRoutes"
            case internetGatewayId = "InternetGatewayId"
            case isRouteTableUsedInDifferentAZ = "IsRouteTableUsedInDifferentAZ"
            case routeTableId = "RouteTableId"
            case violatingRoute = "ViolatingRoute"
            case vpcId = "VpcId"
        }
    }

    public struct NetworkFirewallMissingExpectedRTViolation: AWSDecodableShape {
        /// The Availability Zone of a violating subnet.
        public let availabilityZone: String?
        /// The resource ID of the current route table that's associated with the subnet, if one is available.
        public let currentRouteTable: String?
        /// The resource ID of the route table that should be associated with the subnet.
        public let expectedRouteTable: String?
        /// The ID of the Network Firewall or VPC resource that's in violation.
        public let violationTarget: String?
        /// The resource ID of the VPC associated with a violating subnet.
        public let vpc: String?

        public init(availabilityZone: String? = nil, currentRouteTable: String? = nil, expectedRouteTable: String? = nil, violationTarget: String? = nil, vpc: String? = nil) {
            self.availabilityZone = availabilityZone
            self.currentRouteTable = currentRouteTable
            self.expectedRouteTable = expectedRouteTable
            self.violationTarget = violationTarget
            self.vpc = vpc
        }

        private enum CodingKeys: String, CodingKey {
            case availabilityZone = "AvailabilityZone"
            case currentRouteTable = "CurrentRouteTable"
            case expectedRouteTable = "ExpectedRouteTable"
            case violationTarget = "ViolationTarget"
            case vpc = "VPC"
        }
    }

    public struct NetworkFirewallMissingExpectedRoutesViolation: AWSDecodableShape {
        /// The expected routes.
        public let expectedRoutes: [ExpectedRoute]?
        /// The target of the violation.
        public let violationTarget: String?
        /// Information about the VPC ID.
        public let vpcId: String?

        public init(expectedRoutes: [ExpectedRoute]? = nil, violationTarget: String? = nil, vpcId: String? = nil) {
            self.expectedRoutes = expectedRoutes
            self.violationTarget = violationTarget
            self.vpcId = vpcId
        }

        private enum CodingKeys: String, CodingKey {
            case expectedRoutes = "ExpectedRoutes"
            case violationTarget = "ViolationTarget"
            case vpcId = "VpcId"
        }
    }

    public struct NetworkFirewallMissingFirewallViolation: AWSDecodableShape {
        /// The Availability Zone of a violating subnet.
        public let availabilityZone: String?
        /// The reason the resource has this violation, if one is available.
        public let targetViolationReason: String?
        /// The ID of the Network Firewall or VPC resource that's in violation.
        public let violationTarget: String?
        /// The resource ID of the VPC associated with a violating subnet.
        public let vpc: String?

        public init(availabilityZone: String? = nil, targetViolationReason: String? = nil, violationTarget: String? = nil, vpc: String? = nil) {
            self.availabilityZone = availabilityZone
            self.targetViolationReason = targetViolationReason
            self.violationTarget = violationTarget
            self.vpc = vpc
        }

        private enum CodingKeys: String, CodingKey {
            case availabilityZone = "AvailabilityZone"
            case targetViolationReason = "TargetViolationReason"
            case violationTarget = "ViolationTarget"
            case vpc = "VPC"
        }
    }

    public struct NetworkFirewallMissingSubnetViolation: AWSDecodableShape {
        /// The Availability Zone of a violating subnet.
        public let availabilityZone: String?
        /// The reason the resource has this violation, if one is available.
        public let targetViolationReason: String?
        /// The ID of the Network Firewall or VPC resource that's in violation.
        public let violationTarget: String?
        /// The resource ID of the VPC associated with a violating subnet.
        public let vpc: String?

        public init(availabilityZone: String? = nil, targetViolationReason: String? = nil, violationTarget: String? = nil, vpc: String? = nil) {
            self.availabilityZone = availabilityZone
            self.targetViolationReason = targetViolationReason
            self.violationTarget = violationTarget
            self.vpc = vpc
        }

        private enum CodingKeys: String, CodingKey {
            case availabilityZone = "AvailabilityZone"
            case targetViolationReason = "TargetViolationReason"
            case violationTarget = "ViolationTarget"
            case vpc = "VPC"
        }
    }

    public struct NetworkFirewallPolicy: AWSEncodableShape & AWSDecodableShape {
        /// Defines the deployment model to use for the firewall policy. To use a distributed model, set PolicyOption to NULL.
        public let firewallDeploymentModel: FirewallDeploymentModel?

        public init(firewallDeploymentModel: FirewallDeploymentModel? = nil) {
            self.firewallDeploymentModel = firewallDeploymentModel
        }

        private enum CodingKeys: String, CodingKey {
            case firewallDeploymentModel = "FirewallDeploymentModel"
        }
    }

    public struct NetworkFirewallPolicyDescription: AWSDecodableShape {
        /// The default actions to take on a packet that doesn't match any stateful rules. The stateful default
        /// action is optional, and is only valid when using the strict rule order.  Valid values of the stateful default action:
        ///    aws:drop_strict   aws:drop_established   aws:alert_strict   aws:alert_established
        public let statefulDefaultActions: [String]?
        /// Additional options governing how Network Firewall handles stateful rules. The stateful rule groups
        /// that you use in your policy must have stateful rule options settings that are compatible with these
        /// settings.
        public let statefulEngineOptions: StatefulEngineOptions?
        /// The stateful rule groups that are used in the Network Firewall firewall policy.
        public let statefulRuleGroups: [StatefulRuleGroup]?
        /// Names of custom actions that are available for use in the stateless default actions settings.
        public let statelessCustomActions: [String]?
        /// The actions to take on packets that don't match any of the stateless rule groups.
        public let statelessDefaultActions: [String]?
        /// The actions to take on packet fragments that don't match any of the stateless rule groups.
        public let statelessFragmentDefaultActions: [String]?
        /// The stateless rule groups that are used in the Network Firewall firewall policy.
        public let statelessRuleGroups: [StatelessRuleGroup]?

        public init(statefulDefaultActions: [String]? = nil, statefulEngineOptions: StatefulEngineOptions? = nil, statefulRuleGroups: [StatefulRuleGroup]? = nil, statelessCustomActions: [String]? = nil, statelessDefaultActions: [String]? = nil, statelessFragmentDefaultActions: [String]? = nil, statelessRuleGroups: [StatelessRuleGroup]? = nil) {
            self.statefulDefaultActions = statefulDefaultActions
            self.statefulEngineOptions = statefulEngineOptions
            self.statefulRuleGroups = statefulRuleGroups
            self.statelessCustomActions = statelessCustomActions
            self.statelessDefaultActions = statelessDefaultActions
            self.statelessFragmentDefaultActions = statelessFragmentDefaultActions
            self.statelessRuleGroups = statelessRuleGroups
        }

        private enum CodingKeys: String, CodingKey {
            case statefulDefaultActions = "StatefulDefaultActions"
            case statefulEngineOptions = "StatefulEngineOptions"
            case statefulRuleGroups = "StatefulRuleGroups"
            case statelessCustomActions = "StatelessCustomActions"
            case statelessDefaultActions = "StatelessDefaultActions"
            case statelessFragmentDefaultActions = "StatelessFragmentDefaultActions"
            case statelessRuleGroups = "StatelessRuleGroups"
        }
    }

    public struct NetworkFirewallPolicyModifiedViolation: AWSDecodableShape {
        /// The policy that's currently in use in the individual account.
        public let currentPolicyDescription: NetworkFirewallPolicyDescription?
        /// The policy that should be in use in the individual account in order to be compliant.
        public let expectedPolicyDescription: NetworkFirewallPolicyDescription?
        /// The ID of the Network Firewall or VPC resource that's in violation.
        public let violationTarget: String?

        public init(currentPolicyDescription: NetworkFirewallPolicyDescription? = nil, expectedPolicyDescription: NetworkFirewallPolicyDescription? = nil, violationTarget: String? = nil) {
            self.currentPolicyDescription = currentPolicyDescription
            self.expectedPolicyDescription = expectedPolicyDescription
            self.violationTarget = violationTarget
        }

        private enum CodingKeys: String, CodingKey {
            case currentPolicyDescription = "CurrentPolicyDescription"
            case expectedPolicyDescription = "ExpectedPolicyDescription"
            case violationTarget = "ViolationTarget"
        }
    }

    public struct NetworkFirewallStatefulRuleGroupOverride: AWSDecodableShape {
        /// The action that changes the rule group from DROP to ALERT. This only applies to managed rule groups.
        public let action: NetworkFirewallOverrideAction?

        public init(action: NetworkFirewallOverrideAction? = nil) {
            self.action = action
        }

        private enum CodingKeys: String, CodingKey {
            case action = "Action"
        }
    }

    public struct NetworkFirewallUnexpectedFirewallRoutesViolation: AWSDecodableShape {
        /// The endpoint of the firewall.
        public let firewallEndpoint: String?
        /// The subnet ID for the firewall.
        public let firewallSubnetId: String?
        /// The ID of the route table.
        public let routeTableId: String?
        /// The routes that are in violation.
        public let violatingRoutes: [Route]?
        /// Information about the VPC ID.
        public let vpcId: String?

        public init(firewallEndpoint: String? = nil, firewallSubnetId: String? = nil, routeTableId: String? = nil, violatingRoutes: [Route]? = nil, vpcId: String? = nil) {
            self.firewallEndpoint = firewallEndpoint
            self.firewallSubnetId = firewallSubnetId
            self.routeTableId = routeTableId
            self.violatingRoutes = violatingRoutes
            self.vpcId = vpcId
        }

        private enum CodingKeys: String, CodingKey {
            case firewallEndpoint = "FirewallEndpoint"
            case firewallSubnetId = "FirewallSubnetId"
            case routeTableId = "RouteTableId"
            case violatingRoutes = "ViolatingRoutes"
            case vpcId = "VpcId"
        }
    }

    public struct NetworkFirewallUnexpectedGatewayRoutesViolation: AWSDecodableShape {
        /// Information about the gateway ID.
        public let gatewayId: String?
        /// Information about the  route table.
        public let routeTableId: String?
        /// The routes that are in violation.
        public let violatingRoutes: [Route]?
        /// Information about the VPC ID.
        public let vpcId: String?

        public init(gatewayId: String? = nil, routeTableId: String? = nil, violatingRoutes: [Route]? = nil, vpcId: String? = nil) {
            self.gatewayId = gatewayId
            self.routeTableId = routeTableId
            self.violatingRoutes = violatingRoutes
            self.vpcId = vpcId
        }

        private enum CodingKeys: String, CodingKey {
            case gatewayId = "GatewayId"
            case routeTableId = "RouteTableId"
            case violatingRoutes = "ViolatingRoutes"
            case vpcId = "VpcId"
        }
    }

    public struct OrganizationalUnitScope: AWSEncodableShape & AWSDecodableShape {
        /// A boolean value that indicates if the administrator can apply policies to all OUs within an organization. If true, the administrator can manage all OUs within the organization. You can either enable management of all OUs through this operation, or you can specify OUs to manage in OrganizationalUnitScope$OrganizationalUnits. You cannot specify both.
        public let allOrganizationalUnitsEnabled: Bool?
        /// A boolean value that excludes the OUs in OrganizationalUnitScope$OrganizationalUnits from the administrator's scope. If true, the Firewall Manager administrator can apply policies to all OUs in the organization except for the OUs listed in OrganizationalUnitScope$OrganizationalUnits. You can either specify a list of OUs to exclude by OrganizationalUnitScope$OrganizationalUnits, or you can enable management of all OUs by OrganizationalUnitScope$AllOrganizationalUnitsEnabled. You cannot specify both.
        public let excludeSpecifiedOrganizationalUnits: Bool?
        /// The list of OUs within the organization that the specified Firewall Manager administrator either can or cannot apply policies to, based on the value of OrganizationalUnitScope$ExcludeSpecifiedOrganizationalUnits. If OrganizationalUnitScope$ExcludeSpecifiedOrganizationalUnits is set to true, then the Firewall Manager administrator can apply policies to all OUs in the organization except for the OUs in this list. If OrganizationalUnitScope$ExcludeSpecifiedOrganizationalUnits is set to false, then the Firewall Manager administrator can only apply policies to the OUs in this list.
        public let organizationalUnits: [String]?

        public init(allOrganizationalUnitsEnabled: Bool? = nil, excludeSpecifiedOrganizationalUnits: Bool? = nil, organizationalUnits: [String]? = nil) {
            self.allOrganizationalUnitsEnabled = allOrganizationalUnitsEnabled
            self.excludeSpecifiedOrganizationalUnits = excludeSpecifiedOrganizationalUnits
            self.organizationalUnits = organizationalUnits
        }

        public func validate(name: String) throws {
            try self.organizationalUnits?.forEach {
                try validate($0, name: "organizationalUnits[]", parent: name, max: 68)
                try validate($0, name: "organizationalUnits[]", parent: name, min: 16)
                try validate($0, name: "organizationalUnits[]", parent: name, pattern: "^ou-[0-9a-z]{4,32}-[a-z0-9]{8,32}$")
            }
        }

        private enum CodingKeys: String, CodingKey {
            case allOrganizationalUnitsEnabled = "AllOrganizationalUnitsEnabled"
            case excludeSpecifiedOrganizationalUnits = "ExcludeSpecifiedOrganizationalUnits"
            case organizationalUnits = "OrganizationalUnits"
        }
    }

    public struct PartialMatch: AWSDecodableShape {
        /// The reference rule from the primary security group of the Firewall Manager policy.
        public let reference: String?
        /// The violation reason.
        public let targetViolationReasons: [String]?

        public init(reference: String? = nil, targetViolationReasons: [String]? = nil) {
            self.reference = reference
            self.targetViolationReasons = targetViolationReasons
        }

        private enum CodingKeys: String, CodingKey {
            case reference = "Reference"
            case targetViolationReasons = "TargetViolationReasons"
        }
    }

    public struct Policy: AWSEncodableShape & AWSDecodableShape {
        /// Indicates whether Firewall Manager should automatically remove protections from resources that leave the policy scope and clean up resources that Firewall Manager is managing for accounts when those accounts leave policy scope. For example, Firewall Manager will disassociate a Firewall Manager managed web ACL from a protected customer resource when the customer resource leaves policy scope.  By default, Firewall Manager doesn't remove protections or delete Firewall Manager managed resources.  This option is not available for Shield Advanced or WAF Classic policies.
        public let deleteUnusedFMManagedResources: Bool?
        /// Specifies the Amazon Web Services account IDs and Organizations organizational units (OUs) to exclude from the policy. Specifying an OU is the equivalent of specifying all accounts in the OU and in any of its child OUs, including any child OUs and accounts that are added at a later time. You can specify inclusions or exclusions, but not both. If you specify an IncludeMap, Firewall Manager applies the policy to all accounts specified by the IncludeMap, and does not evaluate any ExcludeMap specifications. If you do not specify an IncludeMap, then Firewall Manager applies the policy to all accounts except for those specified by the ExcludeMap. You can specify account IDs, OUs, or a combination:    Specify account IDs by setting the key to ACCOUNT. For example, the following is a valid map: {“ACCOUNT” : [“accountID1”, “accountID2”]}.   Specify OUs by setting the key to ORG_UNIT. For example, the following is a valid map: {“ORG_UNIT” : [“ouid111”, “ouid112”]}.   Specify accounts and OUs together in a single map, separated with a comma. For example, the following is a valid map: {“ACCOUNT” : [“accountID1”, “accountID2”], “ORG_UNIT” : [“ouid111”, “ouid112”]}.
        public let excludeMap: [CustomerPolicyScopeIdType: [String]]?
        /// If set to True, resources with the tags that are specified in the ResourceTag array are not in scope of the policy. If set to False, and the ResourceTag array is not null, only resources with the specified tags are in scope of the policy.
        public let excludeResourceTags: Bool
        /// Specifies the Amazon Web Services account IDs and Organizations organizational units (OUs) to include in the policy. Specifying an OU is the equivalent of specifying all accounts in the OU and in any of its child OUs, including any child OUs and accounts that are added at a later time. You can specify inclusions or exclusions, but not both. If you specify an IncludeMap, Firewall Manager applies the policy to all accounts specified by the IncludeMap, and does not evaluate any ExcludeMap specifications. If you do not specify an IncludeMap, then Firewall Manager applies the policy to all accounts except for those specified by the ExcludeMap. You can specify account IDs, OUs, or a combination:    Specify account IDs by setting the key to ACCOUNT. For example, the following is a valid map: {“ACCOUNT” : [“accountID1”, “accountID2”]}.   Specify OUs by setting the key to ORG_UNIT. For example, the following is a valid map: {“ORG_UNIT” : [“ouid111”, “ouid112”]}.   Specify accounts and OUs together in a single map, separated with a comma. For example, the following is a valid map: {“ACCOUNT” : [“accountID1”, “accountID2”], “ORG_UNIT” : [“ouid111”, “ouid112”]}.
        public let includeMap: [CustomerPolicyScopeIdType: [String]]?
        /// The definition of the Network Firewall firewall policy.
        public let policyDescription: String?
        /// The ID of the Firewall Manager policy.
        public let policyId: String?
        /// The name of the Firewall Manager policy.
        public let policyName: String
        /// Indicates whether the policy is in or out of an admin's policy or Region scope.    ACTIVE - The administrator can manage and delete the policy.    OUT_OF_ADMIN_SCOPE - The administrator can view the policy, but they can't edit or delete the policy. Existing policy protections stay in place. Any new resources that come into scope of the policy won't be protected.
        public let policyStatus: CustomerPolicyStatus?
        /// A unique identifier for each update to the policy. When issuing a PutPolicy request, the PolicyUpdateToken in the request must match the PolicyUpdateToken of the current policy version. To get the PolicyUpdateToken of the current policy version, use a GetPolicy request.
        public let policyUpdateToken: String?
        /// Indicates if the policy should be automatically applied to new resources.
        public let remediationEnabled: Bool
        /// The unique identifiers of the resource sets used by the policy.
        public let resourceSetIds: [String]?
        /// An array of ResourceTag objects.
        public let resourceTags: [ResourceTag]?
        /// The type of resource protected by or in scope of the policy. This is in the format shown in the Amazon Web Services Resource Types Reference. To apply this policy to multiple resource types, specify a resource type of ResourceTypeList and then specify the resource types in a ResourceTypeList. The following are valid resource types for each Firewall Manager policy type:   Amazon Web Services WAF Classic - AWS::ApiGateway::Stage, AWS::CloudFront::Distribution, and AWS::ElasticLoadBalancingV2::LoadBalancer.   WAF - AWS::ApiGateway::Stage, AWS::ElasticLoadBalancingV2::LoadBalancer, and AWS::CloudFront::Distribution.   DNS Firewall, Network Firewall, and third-party firewall - AWS::EC2::VPC.   Shield Advanced - AWS::ElasticLoadBalancingV2::LoadBalancer, AWS::ElasticLoadBalancing::LoadBalancer, AWS::EC2::EIP, and AWS::CloudFront::Distribution.   Security group content audit - AWS::EC2::SecurityGroup, AWS::EC2::NetworkInterface, and AWS::EC2::Instance.   Security group usage audit - AWS::EC2::SecurityGroup.
        public let resourceType: String
        /// An array of ResourceType objects. Use this only to specify multiple resource types. To specify a single resource type, use ResourceType.
        public let resourceTypeList: [String]?
        /// Details about the security service that is being used to protect the resources.
        public let securityServicePolicyData: SecurityServicePolicyData

        public init(deleteUnusedFMManagedResources: Bool? = nil, excludeMap: [CustomerPolicyScopeIdType: [String]]? = nil, excludeResourceTags: Bool, includeMap: [CustomerPolicyScopeIdType: [String]]? = nil, policyDescription: String? = nil, policyId: String? = nil, policyName: String, policyStatus: CustomerPolicyStatus? = nil, policyUpdateToken: String? = nil, remediationEnabled: Bool, resourceSetIds: [String]? = nil, resourceTags: [ResourceTag]? = nil, resourceType: String, resourceTypeList: [String]? = nil, securityServicePolicyData: SecurityServicePolicyData) {
            self.deleteUnusedFMManagedResources = deleteUnusedFMManagedResources
            self.excludeMap = excludeMap
            self.excludeResourceTags = excludeResourceTags
            self.includeMap = includeMap
            self.policyDescription = policyDescription
            self.policyId = policyId
            self.policyName = policyName
            self.policyStatus = policyStatus
            self.policyUpdateToken = policyUpdateToken
            self.remediationEnabled = remediationEnabled
            self.resourceSetIds = resourceSetIds
            self.resourceTags = resourceTags
            self.resourceType = resourceType
            self.resourceTypeList = resourceTypeList
            self.securityServicePolicyData = securityServicePolicyData
        }

        public func validate(name: String) throws {
            try self.validate(self.policyDescription, name: "policyDescription", parent: name, max: 256)
            try self.validate(self.policyDescription, name: "policyDescription", parent: name, pattern: "^([\\p{L}\\p{Z}\\p{N}_.:/=+\\-@]*)$")
            try self.validate(self.policyId, name: "policyId", parent: name, max: 36)
            try self.validate(self.policyId, name: "policyId", parent: name, min: 36)
            try self.validate(self.policyId, name: "policyId", parent: name, pattern: "^[a-z0-9A-Z-]{36}$")
            try self.validate(self.policyName, name: "policyName", parent: name, max: 128)
            try self.validate(self.policyName, name: "policyName", parent: name, min: 1)
            try self.validate(self.policyName, name: "policyName", parent: name, pattern: "^([\\p{L}\\p{Z}\\p{N}_.:/=+\\-@]*)$")
            try self.validate(self.policyUpdateToken, name: "policyUpdateToken", parent: name, max: 1024)
            try self.validate(self.policyUpdateToken, name: "policyUpdateToken", parent: name, min: 1)
            try self.validate(self.policyUpdateToken, name: "policyUpdateToken", parent: name, pattern: "^([\\p{L}\\p{Z}\\p{N}_.:/=+\\-@]*)$")
            try self.resourceSetIds?.forEach {
                try validate($0, name: "resourceSetIds[]", parent: name, max: 22)
                try validate($0, name: "resourceSetIds[]", parent: name, min: 22)
                try validate($0, name: "resourceSetIds[]", parent: name, pattern: "^[a-z0-9A-Z]{22}$")
            }
            try self.resourceTags?.forEach {
                try $0.validate(name: "\(name).resourceTags[]")
            }
            try self.validate(self.resourceTags, name: "resourceTags", parent: name, max: 8)
            try self.validate(self.resourceType, name: "resourceType", parent: name, max: 128)
            try self.validate(self.resourceType, name: "resourceType", parent: name, min: 1)
            try self.validate(self.resourceType, name: "resourceType", parent: name, pattern: "^([\\p{L}\\p{Z}\\p{N}_.:/=+\\-@]*)$")
            try self.resourceTypeList?.forEach {
                try validate($0, name: "resourceTypeList[]", parent: name, max: 128)
                try validate($0, name: "resourceTypeList[]", parent: name, min: 1)
                try validate($0, name: "resourceTypeList[]", parent: name, pattern: "^([\\p{L}\\p{Z}\\p{N}_.:/=+\\-@]*)$")
            }
            try self.securityServicePolicyData.validate(name: "\(name).securityServicePolicyData")
        }

        private enum CodingKeys: String, CodingKey {
            case deleteUnusedFMManagedResources = "DeleteUnusedFMManagedResources"
            case excludeMap = "ExcludeMap"
            case excludeResourceTags = "ExcludeResourceTags"
            case includeMap = "IncludeMap"
            case policyDescription = "PolicyDescription"
            case policyId = "PolicyId"
            case policyName = "PolicyName"
            case policyStatus = "PolicyStatus"
            case policyUpdateToken = "PolicyUpdateToken"
            case remediationEnabled = "RemediationEnabled"
            case resourceSetIds = "ResourceSetIds"
            case resourceTags = "ResourceTags"
            case resourceType = "ResourceType"
            case resourceTypeList = "ResourceTypeList"
            case securityServicePolicyData = "SecurityServicePolicyData"
        }
    }

    public struct PolicyComplianceDetail: AWSDecodableShape {
        /// Indicates if over 100 resources are noncompliant with the Firewall Manager policy.
        public let evaluationLimitExceeded: Bool?
        /// A timestamp that indicates when the returned information should be considered out of date.
        public let expiredAt: Date?
        /// Details about problems with dependent services, such as WAF or Config, and the error message received that indicates the problem with the service.
        public let issueInfoMap: [DependentServiceName: String]?
        /// The Amazon Web Services account ID.
        public let memberAccount: String?
        /// The ID of the Firewall Manager policy.
        public let policyId: String?
        /// The Amazon Web Services account that created the Firewall Manager policy.
        public let policyOwner: String?
        /// An array of resources that aren't protected by the WAF or Shield Advanced policy or that aren't in compliance with the security group policy.
        public let violators: [ComplianceViolator]?

        public init(evaluationLimitExceeded: Bool? = nil, expiredAt: Date? = nil, issueInfoMap: [DependentServiceName: String]? = nil, memberAccount: String? = nil, policyId: String? = nil, policyOwner: String? = nil, violators: [ComplianceViolator]? = nil) {
            self.evaluationLimitExceeded = evaluationLimitExceeded
            self.expiredAt = expiredAt
            self.issueInfoMap = issueInfoMap
            self.memberAccount = memberAccount
            self.policyId = policyId
            self.policyOwner = policyOwner
            self.violators = violators
        }

        private enum CodingKeys: String, CodingKey {
            case evaluationLimitExceeded = "EvaluationLimitExceeded"
            case expiredAt = "ExpiredAt"
            case issueInfoMap = "IssueInfoMap"
            case memberAccount = "MemberAccount"
            case policyId = "PolicyId"
            case policyOwner = "PolicyOwner"
            case violators = "Violators"
        }
    }

    public struct PolicyComplianceStatus: AWSDecodableShape {
        /// An array of EvaluationResult objects.
        public let evaluationResults: [EvaluationResult]?
        /// Details about problems with dependent services, such as WAF or Config, and the error message received that indicates the problem with the service.
        public let issueInfoMap: [DependentServiceName: String]?
        /// Timestamp of the last update to the EvaluationResult objects.
        public let lastUpdated: Date?
        /// The member account ID.
        public let memberAccount: String?
        /// The ID of the Firewall Manager policy.
        public let policyId: String?
        /// The name of the Firewall Manager policy.
        public let policyName: String?
        /// The Amazon Web Services account that created the Firewall Manager policy.
        public let policyOwner: String?

        public init(evaluationResults: [EvaluationResult]? = nil, issueInfoMap: [DependentServiceName: String]? = nil, lastUpdated: Date? = nil, memberAccount: String? = nil, policyId: String? = nil, policyName: String? = nil, policyOwner: String? = nil) {
            self.evaluationResults = evaluationResults
            self.issueInfoMap = issueInfoMap
            self.lastUpdated = lastUpdated
            self.memberAccount = memberAccount
            self.policyId = policyId
            self.policyName = policyName
            self.policyOwner = policyOwner
        }

        private enum CodingKeys: String, CodingKey {
            case evaluationResults = "EvaluationResults"
            case issueInfoMap = "IssueInfoMap"
            case lastUpdated = "LastUpdated"
            case memberAccount = "MemberAccount"
            case policyId = "PolicyId"
            case policyName = "PolicyName"
            case policyOwner = "PolicyOwner"
        }
    }

    public struct PolicyOption: AWSEncodableShape & AWSDecodableShape {
        /// Defines the deployment model to use for the firewall policy.
        public let networkFirewallPolicy: NetworkFirewallPolicy?
        /// Defines the policy options for a third-party firewall policy.
        public let thirdPartyFirewallPolicy: ThirdPartyFirewallPolicy?

        public init(networkFirewallPolicy: NetworkFirewallPolicy? = nil, thirdPartyFirewallPolicy: ThirdPartyFirewallPolicy? = nil) {
            self.networkFirewallPolicy = networkFirewallPolicy
            self.thirdPartyFirewallPolicy = thirdPartyFirewallPolicy
        }

        private enum CodingKeys: String, CodingKey {
            case networkFirewallPolicy = "NetworkFirewallPolicy"
            case thirdPartyFirewallPolicy = "ThirdPartyFirewallPolicy"
        }
    }

    public struct PolicySummary: AWSDecodableShape {
        /// Indicates whether Firewall Manager should automatically remove protections from resources that leave the policy scope and clean up resources that Firewall Manager is managing for accounts when those accounts leave policy scope. For example, Firewall Manager will disassociate a Firewall Manager managed web ACL from a protected customer resource when the customer resource leaves policy scope.  By default, Firewall Manager doesn't remove protections or delete Firewall Manager managed resources.  This option is not available for Shield Advanced or WAF Classic policies.
        public let deleteUnusedFMManagedResources: Bool?
        /// The Amazon Resource Name (ARN) of the specified policy.
        public let policyArn: String?
        /// The ID of the specified policy.
        public let policyId: String?
        /// The name of the specified policy.
        public let policyName: String?
        /// Indicates whether the policy is in or out of an admin's policy or Region scope.    ACTIVE - The administrator can manage and delete the policy.    OUT_OF_ADMIN_SCOPE - The administrator can view the policy, but they can't edit or delete the policy. Existing policy protections stay in place. Any new resources that come into scope of the policy won't be protected.
        public let policyStatus: CustomerPolicyStatus?
        /// Indicates if the policy should be automatically applied to new resources.
        public let remediationEnabled: Bool?
        /// The type of resource protected by or in scope of the policy. This is in the format shown in the Amazon Web Services Resource Types Reference. For WAF and Shield Advanced, examples include AWS::ElasticLoadBalancingV2::LoadBalancer and AWS::CloudFront::Distribution. For a security group common policy, valid values are AWS::EC2::NetworkInterface and AWS::EC2::Instance. For a security group content audit policy, valid values are AWS::EC2::SecurityGroup, AWS::EC2::NetworkInterface, and AWS::EC2::Instance. For a security group usage audit policy, the value is AWS::EC2::SecurityGroup. For an Network Firewall policy or DNS Firewall policy, the value is AWS::EC2::VPC.
        public let resourceType: String?
        /// The service that the policy is using to protect the resources. This specifies the type of policy that is created, either an WAF policy, a Shield Advanced policy, or a security group policy.
        public let securityServiceType: SecurityServiceType?

        public init(deleteUnusedFMManagedResources: Bool? = nil, policyArn: String? = nil, policyId: String? = nil, policyName: String? = nil, policyStatus: CustomerPolicyStatus? = nil, remediationEnabled: Bool? = nil, resourceType: String? = nil, securityServiceType: SecurityServiceType? = nil) {
            self.deleteUnusedFMManagedResources = deleteUnusedFMManagedResources
            self.policyArn = policyArn
            self.policyId = policyId
            self.policyName = policyName
            self.policyStatus = policyStatus
            self.remediationEnabled = remediationEnabled
            self.resourceType = resourceType
            self.securityServiceType = securityServiceType
        }

        private enum CodingKeys: String, CodingKey {
            case deleteUnusedFMManagedResources = "DeleteUnusedFMManagedResources"
            case policyArn = "PolicyArn"
            case policyId = "PolicyId"
            case policyName = "PolicyName"
            case policyStatus = "PolicyStatus"
            case remediationEnabled = "RemediationEnabled"
            case resourceType = "ResourceType"
            case securityServiceType = "SecurityServiceType"
        }
    }

    public struct PolicyTypeScope: AWSEncodableShape & AWSDecodableShape {
        /// Allows the specified Firewall Manager administrator to manage all Firewall Manager policy types, except for third-party policy types. Third-party policy types can only be managed by the Firewall Manager default administrator.
        public let allPolicyTypesEnabled: Bool?
        /// The list of policy types that the specified Firewall Manager administrator can manage.
        public let policyTypes: [SecurityServiceType]?

        public init(allPolicyTypesEnabled: Bool? = nil, policyTypes: [SecurityServiceType]? = nil) {
            self.allPolicyTypesEnabled = allPolicyTypesEnabled
            self.policyTypes = policyTypes
        }

        public func validate(name: String) throws {
            try self.validate(self.policyTypes, name: "policyTypes", parent: name, max: 32)
        }

        private enum CodingKeys: String, CodingKey {
            case allPolicyTypesEnabled = "AllPolicyTypesEnabled"
            case policyTypes = "PolicyTypes"
        }
    }

    public struct PossibleRemediationAction: AWSDecodableShape {
        /// A description of the list of remediation actions.
        public let description: String?
        /// Information about whether an action is taken by default.
        public let isDefaultAction: Bool?
        /// The ordered list of remediation actions.
        public let orderedRemediationActions: [RemediationActionWithOrder]

        public init(description: String? = nil, isDefaultAction: Bool? = nil, orderedRemediationActions: [RemediationActionWithOrder]) {
            self.description = description
            self.isDefaultAction = isDefaultAction
            self.orderedRemediationActions = orderedRemediationActions
        }

        private enum CodingKeys: String, CodingKey {
            case description = "Description"
            case isDefaultAction = "IsDefaultAction"
            case orderedRemediationActions = "OrderedRemediationActions"
        }
    }

    public struct PossibleRemediationActions: AWSDecodableShape {
        /// Information about the actions.
        public let actions: [PossibleRemediationAction]?
        /// A description of the possible remediation actions list.
        public let description: String?

        public init(actions: [PossibleRemediationAction]? = nil, description: String? = nil) {
            self.actions = actions
            self.description = description
        }

        private enum CodingKeys: String, CodingKey {
            case actions = "Actions"
            case description = "Description"
        }
    }

    public struct ProtocolsListData: AWSEncodableShape & AWSDecodableShape {
        /// The time that the Firewall Manager protocols list was created.
        public let createTime: Date?
        /// The time that the Firewall Manager protocols list was last updated.
        public let lastUpdateTime: Date?
        /// The ID of the Firewall Manager protocols list.
        public let listId: String?
        /// The name of the Firewall Manager protocols list.
        public let listName: String
        /// A unique identifier for each update to the list. When you update the list, the update token must match the token of the current version of the application list. You can retrieve the update token by getting the list.
        public let listUpdateToken: String?
        /// A map of previous version numbers to their corresponding protocol arrays.
        public let previousProtocolsList: [String: [String]]?
        /// An array of protocols in the Firewall Manager protocols list.
        public let protocolsList: [String]

        public init(createTime: Date? = nil, lastUpdateTime: Date? = nil, listId: String? = nil, listName: String, listUpdateToken: String? = nil, previousProtocolsList: [String: [String]]? = nil, protocolsList: [String]) {
            self.createTime = createTime
            self.lastUpdateTime = lastUpdateTime
            self.listId = listId
            self.listName = listName
            self.listUpdateToken = listUpdateToken
            self.previousProtocolsList = previousProtocolsList
            self.protocolsList = protocolsList
        }

        public func validate(name: String) throws {
            try self.validate(self.listId, name: "listId", parent: name, max: 36)
            try self.validate(self.listId, name: "listId", parent: name, min: 36)
            try self.validate(self.listId, name: "listId", parent: name, pattern: "^[a-z0-9A-Z-]{36}$")
            try self.validate(self.listName, name: "listName", parent: name, max: 128)
            try self.validate(self.listName, name: "listName", parent: name, min: 1)
            try self.validate(self.listName, name: "listName", parent: name, pattern: "^([\\p{L}\\p{Z}\\p{N}_.:/=+\\-@]*)$")
            try self.validate(self.listUpdateToken, name: "listUpdateToken", parent: name, max: 1024)
            try self.validate(self.listUpdateToken, name: "listUpdateToken", parent: name, min: 1)
            try self.validate(self.listUpdateToken, name: "listUpdateToken", parent: name, pattern: "^([\\p{L}\\p{Z}\\p{N}_.:/=+\\-@]*)$")
            try self.previousProtocolsList?.forEach {
                try validate($0.key, name: "previousProtocolsList.key", parent: name, max: 2)
                try validate($0.key, name: "previousProtocolsList.key", parent: name, min: 1)
                try validate($0.key, name: "previousProtocolsList.key", parent: name, pattern: "^\\d{1,2}$")
            }
            try self.protocolsList.forEach {
                try validate($0, name: "protocolsList[]", parent: name, max: 20)
                try validate($0, name: "protocolsList[]", parent: name, min: 1)
                try validate($0, name: "protocolsList[]", parent: name, pattern: "^([\\p{L}\\p{Z}\\p{N}_.:/=+\\-@]*)$")
            }
        }

        private enum CodingKeys: String, CodingKey {
            case createTime = "CreateTime"
            case lastUpdateTime = "LastUpdateTime"
            case listId = "ListId"
            case listName = "ListName"
            case listUpdateToken = "ListUpdateToken"
            case previousProtocolsList = "PreviousProtocolsList"
            case protocolsList = "ProtocolsList"
        }
    }

    public struct ProtocolsListDataSummary: AWSDecodableShape {
        /// The Amazon Resource Name (ARN) of the specified protocols list.
        public let listArn: String?
        /// The ID of the specified protocols list.
        public let listId: String?
        /// The name of the specified protocols list.
        public let listName: String?
        /// An array of protocols in the Firewall Manager protocols list.
        public let protocolsList: [String]?

        public init(listArn: String? = nil, listId: String? = nil, listName: String? = nil, protocolsList: [String]? = nil) {
            self.listArn = listArn
            self.listId = listId
            self.listName = listName
            self.protocolsList = protocolsList
        }

        private enum CodingKeys: String, CodingKey {
            case listArn = "ListArn"
            case listId = "ListId"
            case listName = "ListName"
            case protocolsList = "ProtocolsList"
        }
    }

    public struct PutAdminAccountRequest: AWSEncodableShape {
        /// The Amazon Web Services account ID to add as an Firewall Manager administrator account. The account must be a member of the organization that was onboarded to Firewall Manager by AssociateAdminAccount. For more information about Organizations, see Managing the Amazon Web Services Accounts in Your Organization.
        public let adminAccount: String
        /// Configures the resources that the specified Firewall Manager administrator can manage. As a best practice, set the administrative scope according to the principles of least privilege. Only grant the administrator the specific resources or permissions that they need to perform the duties of their role.
        public let adminScope: AdminScope?

        public init(adminAccount: String, adminScope: AdminScope? = nil) {
            self.adminAccount = adminAccount
            self.adminScope = adminScope
        }

        public func validate(name: String) throws {
            try self.validate(self.adminAccount, name: "adminAccount", parent: name, max: 1024)
            try self.validate(self.adminAccount, name: "adminAccount", parent: name, min: 1)
            try self.validate(self.adminAccount, name: "adminAccount", parent: name, pattern: "^[0-9]+$")
            try self.adminScope?.validate(name: "\(name).adminScope")
        }

        private enum CodingKeys: String, CodingKey {
            case adminAccount = "AdminAccount"
            case adminScope = "AdminScope"
        }
    }

    public struct PutAppsListRequest: AWSEncodableShape {
        /// The details of the Firewall Manager applications list to be created.
        public let appsList: AppsListData
        /// The tags associated with the resource.
        public let tagList: [Tag]?

        public init(appsList: AppsListData, tagList: [Tag]? = nil) {
            self.appsList = appsList
            self.tagList = tagList
        }

        public func validate(name: String) throws {
            try self.appsList.validate(name: "\(name).appsList")
            try self.tagList?.forEach {
                try $0.validate(name: "\(name).tagList[]")
            }
            try self.validate(self.tagList, name: "tagList", parent: name, max: 200)
        }

        private enum CodingKeys: String, CodingKey {
            case appsList = "AppsList"
            case tagList = "TagList"
        }
    }

    public struct PutAppsListResponse: AWSDecodableShape {
        /// The details of the Firewall Manager applications list.
        public let appsList: AppsListData?
        /// The Amazon Resource Name (ARN) of the applications list.
        public let appsListArn: String?

        public init(appsList: AppsListData? = nil, appsListArn: String? = nil) {
            self.appsList = appsList
            self.appsListArn = appsListArn
        }

        private enum CodingKeys: String, CodingKey {
            case appsList = "AppsList"
            case appsListArn = "AppsListArn"
        }
    }

    public struct PutNotificationChannelRequest: AWSEncodableShape {
        /// The Amazon Resource Name (ARN) of the IAM role that allows Amazon SNS to record Firewall Manager activity.
        public let snsRoleName: String
        /// The Amazon Resource Name (ARN) of the SNS topic that collects notifications from Firewall Manager.
        public let snsTopicArn: String

        public init(snsRoleName: String, snsTopicArn: String) {
            self.snsRoleName = snsRoleName
            self.snsTopicArn = snsTopicArn
        }

        public func validate(name: String) throws {
            try self.validate(self.snsRoleName, name: "snsRoleName", parent: name, max: 1024)
            try self.validate(self.snsRoleName, name: "snsRoleName", parent: name, min: 1)
            try self.validate(self.snsRoleName, name: "snsRoleName", parent: name, pattern: "^([\\p{L}\\p{Z}\\p{N}_.:/=+\\-@]*)$")
            try self.validate(self.snsTopicArn, name: "snsTopicArn", parent: name, max: 1024)
            try self.validate(self.snsTopicArn, name: "snsTopicArn", parent: name, min: 1)
            try self.validate(self.snsTopicArn, name: "snsTopicArn", parent: name, pattern: "^([\\p{L}\\p{Z}\\p{N}_.:/=+\\-@]*)$")
        }

        private enum CodingKeys: String, CodingKey {
            case snsRoleName = "SnsRoleName"
            case snsTopicArn = "SnsTopicArn"
        }
    }

    public struct PutPolicyRequest: AWSEncodableShape {
        /// The details of the Firewall Manager policy to be created.
        public let policy: Policy
        /// The tags to add to the Amazon Web Services resource.
        public let tagList: [Tag]?

        public init(policy: Policy, tagList: [Tag]? = nil) {
            self.policy = policy
            self.tagList = tagList
        }

        public func validate(name: String) throws {
            try self.policy.validate(name: "\(name).policy")
            try self.tagList?.forEach {
                try $0.validate(name: "\(name).tagList[]")
            }
            try self.validate(self.tagList, name: "tagList", parent: name, max: 200)
        }

        private enum CodingKeys: String, CodingKey {
            case policy = "Policy"
            case tagList = "TagList"
        }
    }

    public struct PutPolicyResponse: AWSDecodableShape {
        /// The details of the Firewall Manager policy.
        public let policy: Policy?
        /// The Amazon Resource Name (ARN) of the policy.
        public let policyArn: String?

        public init(policy: Policy? = nil, policyArn: String? = nil) {
            self.policy = policy
            self.policyArn = policyArn
        }

        private enum CodingKeys: String, CodingKey {
            case policy = "Policy"
            case policyArn = "PolicyArn"
        }
    }

    public struct PutProtocolsListRequest: AWSEncodableShape {
        /// The details of the Firewall Manager protocols list to be created.
        public let protocolsList: ProtocolsListData
        /// The tags associated with the resource.
        public let tagList: [Tag]?

        public init(protocolsList: ProtocolsListData, tagList: [Tag]? = nil) {
            self.protocolsList = protocolsList
            self.tagList = tagList
        }

        public func validate(name: String) throws {
            try self.protocolsList.validate(name: "\(name).protocolsList")
            try self.tagList?.forEach {
                try $0.validate(name: "\(name).tagList[]")
            }
            try self.validate(self.tagList, name: "tagList", parent: name, max: 200)
        }

        private enum CodingKeys: String, CodingKey {
            case protocolsList = "ProtocolsList"
            case tagList = "TagList"
        }
    }

    public struct PutProtocolsListResponse: AWSDecodableShape {
        /// The details of the Firewall Manager protocols list.
        public let protocolsList: ProtocolsListData?
        /// The Amazon Resource Name (ARN) of the protocols list.
        public let protocolsListArn: String?

        public init(protocolsList: ProtocolsListData? = nil, protocolsListArn: String? = nil) {
            self.protocolsList = protocolsList
            self.protocolsListArn = protocolsListArn
        }

        private enum CodingKeys: String, CodingKey {
            case protocolsList = "ProtocolsList"
            case protocolsListArn = "ProtocolsListArn"
        }
    }

    public struct PutResourceSetRequest: AWSEncodableShape {
        /// Details about the resource set to be created or updated.>
        public let resourceSet: ResourceSet
        /// Retrieves the tags associated with the specified resource set. Tags are key:value pairs that you can use to categorize and manage your resources, for purposes like billing. For example, you might set the tag key to "customer" and the value to the customer name or ID. You can specify one or more tags to add to each Amazon Web Services resource, up to 50 tags for a resource.
        public let tagList: [Tag]?

        public init(resourceSet: ResourceSet, tagList: [Tag]? = nil) {
            self.resourceSet = resourceSet
            self.tagList = tagList
        }

        public func validate(name: String) throws {
            try self.resourceSet.validate(name: "\(name).resourceSet")
            try self.tagList?.forEach {
                try $0.validate(name: "\(name).tagList[]")
            }
            try self.validate(self.tagList, name: "tagList", parent: name, max: 200)
        }

        private enum CodingKeys: String, CodingKey {
            case resourceSet = "ResourceSet"
            case tagList = "TagList"
        }
    }

    public struct PutResourceSetResponse: AWSDecodableShape {
        /// Details about the resource set.
        public let resourceSet: ResourceSet
        /// The Amazon Resource Name (ARN) of the resource set.
        public let resourceSetArn: String

        public init(resourceSet: ResourceSet, resourceSetArn: String) {
            self.resourceSet = resourceSet
            self.resourceSetArn = resourceSetArn
        }

        private enum CodingKeys: String, CodingKey {
            case resourceSet = "ResourceSet"
            case resourceSetArn = "ResourceSetArn"
        }
    }

    public struct RegionScope: AWSEncodableShape & AWSDecodableShape {
        /// Allows the specified Firewall Manager administrator to manage all Amazon Web Services Regions.
        public let allRegionsEnabled: Bool?
        /// The Amazon Web Services Regions that the specified Firewall Manager administrator can perform actions in.
        public let regions: [String]?

        public init(allRegionsEnabled: Bool? = nil, regions: [String]? = nil) {
            self.allRegionsEnabled = allRegionsEnabled
            self.regions = regions
        }

        public func validate(name: String) throws {
            try self.regions?.forEach {
                try validate($0, name: "regions[]", parent: name, max: 32)
                try validate($0, name: "regions[]", parent: name, min: 6)
                try validate($0, name: "regions[]", parent: name, pattern: "^(af|ap|ca|eu|il|me|mx|sa|us|cn|us-gov)-\\w+-\\d+$")
            }
            try self.validate(self.regions, name: "regions", parent: name, max: 64)
        }

        private enum CodingKeys: String, CodingKey {
            case allRegionsEnabled = "AllRegionsEnabled"
            case regions = "Regions"
        }
    }

    public struct RemediationAction: AWSDecodableShape {
        /// A description of a remediation action.
        public let description: String?
        /// Information about the AssociateRouteTable action in the Amazon EC2 API.
        public let ec2AssociateRouteTableAction: EC2AssociateRouteTableAction?
        /// Information about the CopyRouteTable action in the Amazon EC2 API.
        public let ec2CopyRouteTableAction: EC2CopyRouteTableAction?
        /// Information about the CreateRoute action in the Amazon EC2 API.
        public let ec2CreateRouteAction: EC2CreateRouteAction?
        /// Information about the CreateRouteTable action in the Amazon EC2 API.
        public let ec2CreateRouteTableAction: EC2CreateRouteTableAction?
        /// Information about the DeleteRoute action in the Amazon EC2 API.
        public let ec2DeleteRouteAction: EC2DeleteRouteAction?
        /// Information about the ReplaceRoute action in the Amazon EC2 API.
        public let ec2ReplaceRouteAction: EC2ReplaceRouteAction?
        /// Information about the ReplaceRouteTableAssociation action in the Amazon EC2 API.
        public let ec2ReplaceRouteTableAssociationAction: EC2ReplaceRouteTableAssociationAction?
        /// The remedial action to take when updating a firewall configuration.
        public let fmsPolicyUpdateFirewallCreationConfigAction: FMSPolicyUpdateFirewallCreationConfigAction?

        public init(description: String? = nil, ec2AssociateRouteTableAction: EC2AssociateRouteTableAction? = nil, ec2CopyRouteTableAction: EC2CopyRouteTableAction? = nil, ec2CreateRouteAction: EC2CreateRouteAction? = nil, ec2CreateRouteTableAction: EC2CreateRouteTableAction? = nil, ec2DeleteRouteAction: EC2DeleteRouteAction? = nil, ec2ReplaceRouteAction: EC2ReplaceRouteAction? = nil, ec2ReplaceRouteTableAssociationAction: EC2ReplaceRouteTableAssociationAction? = nil, fmsPolicyUpdateFirewallCreationConfigAction: FMSPolicyUpdateFirewallCreationConfigAction? = nil) {
            self.description = description
            self.ec2AssociateRouteTableAction = ec2AssociateRouteTableAction
            self.ec2CopyRouteTableAction = ec2CopyRouteTableAction
            self.ec2CreateRouteAction = ec2CreateRouteAction
            self.ec2CreateRouteTableAction = ec2CreateRouteTableAction
            self.ec2DeleteRouteAction = ec2DeleteRouteAction
            self.ec2ReplaceRouteAction = ec2ReplaceRouteAction
            self.ec2ReplaceRouteTableAssociationAction = ec2ReplaceRouteTableAssociationAction
            self.fmsPolicyUpdateFirewallCreationConfigAction = fmsPolicyUpdateFirewallCreationConfigAction
        }

        private enum CodingKeys: String, CodingKey {
            case description = "Description"
            case ec2AssociateRouteTableAction = "EC2AssociateRouteTableAction"
            case ec2CopyRouteTableAction = "EC2CopyRouteTableAction"
            case ec2CreateRouteAction = "EC2CreateRouteAction"
            case ec2CreateRouteTableAction = "EC2CreateRouteTableAction"
            case ec2DeleteRouteAction = "EC2DeleteRouteAction"
            case ec2ReplaceRouteAction = "EC2ReplaceRouteAction"
            case ec2ReplaceRouteTableAssociationAction = "EC2ReplaceRouteTableAssociationAction"
            case fmsPolicyUpdateFirewallCreationConfigAction = "FMSPolicyUpdateFirewallCreationConfigAction"
        }
    }

    public struct RemediationActionWithOrder: AWSDecodableShape {
        /// The order of the remediation actions in the list.
        public let order: Int?
        /// Information about an action you can take to remediate a violation.
        public let remediationAction: RemediationAction?

        public init(order: Int? = nil, remediationAction: RemediationAction? = nil) {
            self.order = order
            self.remediationAction = remediationAction
        }

        private enum CodingKeys: String, CodingKey {
            case order = "Order"
            case remediationAction = "RemediationAction"
        }
    }

    public struct Resource: AWSDecodableShape {
        /// The Amazon Web Services account ID that the associated resource belongs to.
        public let accountId: String?
        /// The resource's universal resource indicator (URI).
        public let uri: String

        public init(accountId: String? = nil, uri: String) {
            self.accountId = accountId
            self.uri = uri
        }

        private enum CodingKeys: String, CodingKey {
            case accountId = "AccountId"
            case uri = "URI"
        }
    }

    public struct ResourceSet: AWSEncodableShape & AWSDecodableShape {
        /// A description of the resource set.
        public let description: String?
        /// A unique identifier for the resource set. This ID is returned in the responses to create and list commands. You provide it to operations like update and delete.
        public let id: String?
        /// The last time that the resource set was changed.
        public let lastUpdateTime: Date?
        /// The descriptive name of the resource set. You can't change the name of a resource set after you create it.
        public let name: String
        /// Indicates whether the resource set is in or out of an admin's Region scope.    ACTIVE - The administrator can manage and delete the resource set.    OUT_OF_ADMIN_SCOPE - The administrator can view the resource set, but they can't edit or delete the resource set. Existing protections stay in place. Any new resource that come into scope of the resource set won't be protected.
        public let resourceSetStatus: ResourceSetStatus?
        /// Determines the resources that can be associated to the resource set. Depending on your setting for max results and the number of resource sets, a single call might not return the full list.
        public let resourceTypeList: [String]
        /// An optional token that you can use for optimistic locking. Firewall Manager returns a token to your requests that access the resource set. The token marks the state of the resource set resource at the time of the request. Update tokens are not allowed when creating a resource set. After creation, each subsequent update call to the resource set requires the update token.
        ///  To make an unconditional change to the resource set, omit the token in your update request. Without the token, Firewall Manager performs your updates regardless of whether the resource set has changed since you last retrieved it. To make a conditional change to the resource set, provide the token in your update request. Firewall Manager uses the token to ensure that the resource set hasn't changed since you last retrieved it. If it has changed, the operation fails with an InvalidTokenException. If this happens, retrieve the resource set again to get a current copy of it with a new token. Reapply your changes as needed, then try the operation again using the new token.
        public let updateToken: String?

        public init(description: String? = nil, id: String? = nil, lastUpdateTime: Date? = nil, name: String, resourceSetStatus: ResourceSetStatus? = nil, resourceTypeList: [String], updateToken: String? = nil) {
            self.description = description
            self.id = id
            self.lastUpdateTime = lastUpdateTime
            self.name = name
            self.resourceSetStatus = resourceSetStatus
            self.resourceTypeList = resourceTypeList
            self.updateToken = updateToken
        }

        public func validate(name: String) throws {
            try self.validate(self.description, name: "description", parent: name, max: 256)
            try self.validate(self.description, name: "description", parent: name, pattern: "^([\\p{L}\\p{Z}\\p{N}_.:/=+\\-@]*)$")
            try self.validate(self.id, name: "id", parent: name, max: 22)
            try self.validate(self.id, name: "id", parent: name, min: 22)
            try self.validate(self.id, name: "id", parent: name, pattern: "^[a-z0-9A-Z]{22}$")
            try self.validate(self.name, name: "name", parent: name, max: 128)
            try self.validate(self.name, name: "name", parent: name, min: 1)
            try self.validate(self.name, name: "name", parent: name, pattern: "^([\\p{L}\\p{Z}\\p{N}_.:/=+\\-@]*)$")
            try self.resourceTypeList.forEach {
                try validate($0, name: "resourceTypeList[]", parent: name, max: 128)
                try validate($0, name: "resourceTypeList[]", parent: name, min: 1)
                try validate($0, name: "resourceTypeList[]", parent: name, pattern: "^([\\p{L}\\p{Z}\\p{N}_.:/=+\\-@]*)$")
            }
            try self.validate(self.updateToken, name: "updateToken", parent: name, max: 1024)
            try self.validate(self.updateToken, name: "updateToken", parent: name, min: 1)
            try self.validate(self.updateToken, name: "updateToken", parent: name, pattern: "^([\\p{L}\\p{Z}\\p{N}_.:/=+\\-@]*)$")
        }

        private enum CodingKeys: String, CodingKey {
            case description = "Description"
            case id = "Id"
            case lastUpdateTime = "LastUpdateTime"
            case name = "Name"
            case resourceSetStatus = "ResourceSetStatus"
            case resourceTypeList = "ResourceTypeList"
            case updateToken = "UpdateToken"
        }
    }

    public struct ResourceSetSummary: AWSDecodableShape {
        /// A description of the resource set.
        public let description: String?
        /// A unique identifier for the resource set. This ID is returned in the responses to create and list commands. You provide it to operations like update and delete.
        public let id: String?
        /// The last time that the resource set was changed.
        public let lastUpdateTime: Date?
        /// The descriptive name of the resource set. You can't change the name of a resource set after you create it.
        public let name: String?
        /// Indicates whether the resource set is in or out of an admin's Region scope.    ACTIVE - The administrator can manage and delete the resource set.    OUT_OF_ADMIN_SCOPE - The administrator can view the resource set, but they can't edit or delete the resource set. Existing protections stay in place. Any new resource that come into scope of the resource set won't be protected.
        public let resourceSetStatus: ResourceSetStatus?

        public init(description: String? = nil, id: String? = nil, lastUpdateTime: Date? = nil, name: String? = nil, resourceSetStatus: ResourceSetStatus? = nil) {
            self.description = description
            self.id = id
            self.lastUpdateTime = lastUpdateTime
            self.name = name
            self.resourceSetStatus = resourceSetStatus
        }

        private enum CodingKeys: String, CodingKey {
            case description = "Description"
            case id = "Id"
            case lastUpdateTime = "LastUpdateTime"
            case name = "Name"
            case resourceSetStatus = "ResourceSetStatus"
        }
    }

    public struct ResourceTag: AWSEncodableShape & AWSDecodableShape {
        /// The resource tag key.
        public let key: String
        /// The resource tag value.
        public let value: String?

        public init(key: String, value: String? = nil) {
            self.key = key
            self.value = value
        }

        public func validate(name: String) throws {
            try self.validate(self.key, name: "key", parent: name, max: 128)
            try self.validate(self.key, name: "key", parent: name, min: 1)
            try self.validate(self.key, name: "key", parent: name, pattern: "^([\\p{L}\\p{Z}\\p{N}_.:/=+\\-@]*)$")
            try self.validate(self.value, name: "value", parent: name, max: 256)
            try self.validate(self.value, name: "value", parent: name, pattern: "^([\\p{L}\\p{Z}\\p{N}_.:/=+\\-@]*)$")
        }

        private enum CodingKeys: String, CodingKey {
            case key = "Key"
            case value = "Value"
        }
    }

    public struct ResourceViolation: AWSDecodableShape {
        /// Violation detail for an EC2 instance.
        public let awsEc2InstanceViolation: AwsEc2InstanceViolation?
        /// Violation detail for a network interface.
        public let awsEc2NetworkInterfaceViolation: AwsEc2NetworkInterfaceViolation?
        /// Violation detail for security groups.
        public let awsVPCSecurityGroupViolation: AwsVPCSecurityGroupViolation?
        /// Violation detail for a DNS Firewall policy that indicates that a rule group that Firewall Manager tried to associate with a VPC is already associated with the VPC and can't be associated again.
        public let dnsDuplicateRuleGroupViolation: DnsDuplicateRuleGroupViolation?
        /// Violation detail for a DNS Firewall policy that indicates that the VPC reached the limit for associated DNS Firewall rule groups. Firewall Manager tried to associate another rule group with the VPC and failed.
        public let dnsRuleGroupLimitExceededViolation: DnsRuleGroupLimitExceededViolation?
        /// Violation detail for a DNS Firewall policy that indicates that a rule group that Firewall Manager tried to associate with a VPC has the same priority as a rule group that's already associated.
        public let dnsRuleGroupPriorityConflictViolation: DnsRuleGroupPriorityConflictViolation?
        /// Contains details about the firewall subnet that violates the policy scope.
        public let firewallSubnetIsOutOfScopeViolation: FirewallSubnetIsOutOfScopeViolation?
        /// The violation details for a third-party firewall's VPC endpoint subnet that was deleted.
        public let firewallSubnetMissingVPCEndpointViolation: FirewallSubnetMissingVPCEndpointViolation?
        public let networkFirewallBlackHoleRouteDetectedViolation: NetworkFirewallBlackHoleRouteDetectedViolation?
        /// Violation detail for the subnet for which internet traffic hasn't been inspected.
        public let networkFirewallInternetTrafficNotInspectedViolation: NetworkFirewallInternetTrafficNotInspectedViolation?
        /// The route configuration is invalid.
        public let networkFirewallInvalidRouteConfigurationViolation: NetworkFirewallInvalidRouteConfigurationViolation?
        /// Expected routes are missing from Network Firewall.
        public let networkFirewallMissingExpectedRoutesViolation: NetworkFirewallMissingExpectedRoutesViolation?
        /// Violation detail for an Network Firewall policy that indicates that a subnet is not associated with the expected Firewall Manager managed route table.
        public let networkFirewallMissingExpectedRTViolation: NetworkFirewallMissingExpectedRTViolation?
        /// Violation detail for an Network Firewall policy that indicates that a subnet has no Firewall Manager managed firewall in its VPC.
        public let networkFirewallMissingFirewallViolation: NetworkFirewallMissingFirewallViolation?
        /// Violation detail for an Network Firewall policy that indicates that an Availability Zone is missing the expected Firewall Manager managed subnet.
        public let networkFirewallMissingSubnetViolation: NetworkFirewallMissingSubnetViolation?
        /// Violation detail for an Network Firewall policy that indicates that a firewall policy in an individual account has been modified in a way that makes it noncompliant. For example, the individual account owner might have deleted a rule group, changed the priority of a stateless rule group, or changed a policy default action.
        public let networkFirewallPolicyModifiedViolation: NetworkFirewallPolicyModifiedViolation?
        /// There's an unexpected firewall route.
        public let networkFirewallUnexpectedFirewallRoutesViolation: NetworkFirewallUnexpectedFirewallRoutesViolation?
        /// There's an unexpected gateway route.
        public let networkFirewallUnexpectedGatewayRoutesViolation: NetworkFirewallUnexpectedGatewayRoutesViolation?
        /// A list of possible remediation action lists. Each individual possible remediation action is a list of individual remediation actions.
        public let possibleRemediationActions: PossibleRemediationActions?
        /// Contains details about the route endpoint that violates the policy scope.
        public let routeHasOutOfScopeEndpointViolation: RouteHasOutOfScopeEndpointViolation?
        /// The violation details for a third-party firewall that has the Firewall Manager managed route table that was associated with the third-party firewall has been deleted.
        public let thirdPartyFirewallMissingExpectedRouteTableViolation: ThirdPartyFirewallMissingExpectedRouteTableViolation?
        /// The violation details for a third-party firewall that's been deleted.
        public let thirdPartyFirewallMissingFirewallViolation: ThirdPartyFirewallMissingFirewallViolation?
        /// The violation details for a third-party firewall's subnet that's been deleted.
        public let thirdPartyFirewallMissingSubnetViolation: ThirdPartyFirewallMissingSubnetViolation?

        public init(awsEc2InstanceViolation: AwsEc2InstanceViolation? = nil, awsEc2NetworkInterfaceViolation: AwsEc2NetworkInterfaceViolation? = nil, awsVPCSecurityGroupViolation: AwsVPCSecurityGroupViolation? = nil, dnsDuplicateRuleGroupViolation: DnsDuplicateRuleGroupViolation? = nil, dnsRuleGroupLimitExceededViolation: DnsRuleGroupLimitExceededViolation? = nil, dnsRuleGroupPriorityConflictViolation: DnsRuleGroupPriorityConflictViolation? = nil, firewallSubnetIsOutOfScopeViolation: FirewallSubnetIsOutOfScopeViolation? = nil, firewallSubnetMissingVPCEndpointViolation: FirewallSubnetMissingVPCEndpointViolation? = nil, networkFirewallBlackHoleRouteDetectedViolation: NetworkFirewallBlackHoleRouteDetectedViolation? = nil, networkFirewallInternetTrafficNotInspectedViolation: NetworkFirewallInternetTrafficNotInspectedViolation? = nil, networkFirewallInvalidRouteConfigurationViolation: NetworkFirewallInvalidRouteConfigurationViolation? = nil, networkFirewallMissingExpectedRoutesViolation: NetworkFirewallMissingExpectedRoutesViolation? = nil, networkFirewallMissingExpectedRTViolation: NetworkFirewallMissingExpectedRTViolation? = nil, networkFirewallMissingFirewallViolation: NetworkFirewallMissingFirewallViolation? = nil, networkFirewallMissingSubnetViolation: NetworkFirewallMissingSubnetViolation? = nil, networkFirewallPolicyModifiedViolation: NetworkFirewallPolicyModifiedViolation? = nil, networkFirewallUnexpectedFirewallRoutesViolation: NetworkFirewallUnexpectedFirewallRoutesViolation? = nil, networkFirewallUnexpectedGatewayRoutesViolation: NetworkFirewallUnexpectedGatewayRoutesViolation? = nil, possibleRemediationActions: PossibleRemediationActions? = nil, routeHasOutOfScopeEndpointViolation: RouteHasOutOfScopeEndpointViolation? = nil, thirdPartyFirewallMissingExpectedRouteTableViolation: ThirdPartyFirewallMissingExpectedRouteTableViolation? = nil, thirdPartyFirewallMissingFirewallViolation: ThirdPartyFirewallMissingFirewallViolation? = nil, thirdPartyFirewallMissingSubnetViolation: ThirdPartyFirewallMissingSubnetViolation? = nil) {
            self.awsEc2InstanceViolation = awsEc2InstanceViolation
            self.awsEc2NetworkInterfaceViolation = awsEc2NetworkInterfaceViolation
            self.awsVPCSecurityGroupViolation = awsVPCSecurityGroupViolation
            self.dnsDuplicateRuleGroupViolation = dnsDuplicateRuleGroupViolation
            self.dnsRuleGroupLimitExceededViolation = dnsRuleGroupLimitExceededViolation
            self.dnsRuleGroupPriorityConflictViolation = dnsRuleGroupPriorityConflictViolation
            self.firewallSubnetIsOutOfScopeViolation = firewallSubnetIsOutOfScopeViolation
            self.firewallSubnetMissingVPCEndpointViolation = firewallSubnetMissingVPCEndpointViolation
            self.networkFirewallBlackHoleRouteDetectedViolation = networkFirewallBlackHoleRouteDetectedViolation
            self.networkFirewallInternetTrafficNotInspectedViolation = networkFirewallInternetTrafficNotInspectedViolation
            self.networkFirewallInvalidRouteConfigurationViolation = networkFirewallInvalidRouteConfigurationViolation
            self.networkFirewallMissingExpectedRoutesViolation = networkFirewallMissingExpectedRoutesViolation
            self.networkFirewallMissingExpectedRTViolation = networkFirewallMissingExpectedRTViolation
            self.networkFirewallMissingFirewallViolation = networkFirewallMissingFirewallViolation
            self.networkFirewallMissingSubnetViolation = networkFirewallMissingSubnetViolation
            self.networkFirewallPolicyModifiedViolation = networkFirewallPolicyModifiedViolation
            self.networkFirewallUnexpectedFirewallRoutesViolation = networkFirewallUnexpectedFirewallRoutesViolation
            self.networkFirewallUnexpectedGatewayRoutesViolation = networkFirewallUnexpectedGatewayRoutesViolation
            self.possibleRemediationActions = possibleRemediationActions
            self.routeHasOutOfScopeEndpointViolation = routeHasOutOfScopeEndpointViolation
            self.thirdPartyFirewallMissingExpectedRouteTableViolation = thirdPartyFirewallMissingExpectedRouteTableViolation
            self.thirdPartyFirewallMissingFirewallViolation = thirdPartyFirewallMissingFirewallViolation
            self.thirdPartyFirewallMissingSubnetViolation = thirdPartyFirewallMissingSubnetViolation
        }

        private enum CodingKeys: String, CodingKey {
            case awsEc2InstanceViolation = "AwsEc2InstanceViolation"
            case awsEc2NetworkInterfaceViolation = "AwsEc2NetworkInterfaceViolation"
            case awsVPCSecurityGroupViolation = "AwsVPCSecurityGroupViolation"
            case dnsDuplicateRuleGroupViolation = "DnsDuplicateRuleGroupViolation"
            case dnsRuleGroupLimitExceededViolation = "DnsRuleGroupLimitExceededViolation"
            case dnsRuleGroupPriorityConflictViolation = "DnsRuleGroupPriorityConflictViolation"
            case firewallSubnetIsOutOfScopeViolation = "FirewallSubnetIsOutOfScopeViolation"
            case firewallSubnetMissingVPCEndpointViolation = "FirewallSubnetMissingVPCEndpointViolation"
            case networkFirewallBlackHoleRouteDetectedViolation = "NetworkFirewallBlackHoleRouteDetectedViolation"
            case networkFirewallInternetTrafficNotInspectedViolation = "NetworkFirewallInternetTrafficNotInspectedViolation"
            case networkFirewallInvalidRouteConfigurationViolation = "NetworkFirewallInvalidRouteConfigurationViolation"
            case networkFirewallMissingExpectedRoutesViolation = "NetworkFirewallMissingExpectedRoutesViolation"
            case networkFirewallMissingExpectedRTViolation = "NetworkFirewallMissingExpectedRTViolation"
            case networkFirewallMissingFirewallViolation = "NetworkFirewallMissingFirewallViolation"
            case networkFirewallMissingSubnetViolation = "NetworkFirewallMissingSubnetViolation"
            case networkFirewallPolicyModifiedViolation = "NetworkFirewallPolicyModifiedViolation"
            case networkFirewallUnexpectedFirewallRoutesViolation = "NetworkFirewallUnexpectedFirewallRoutesViolation"
            case networkFirewallUnexpectedGatewayRoutesViolation = "NetworkFirewallUnexpectedGatewayRoutesViolation"
            case possibleRemediationActions = "PossibleRemediationActions"
            case routeHasOutOfScopeEndpointViolation = "RouteHasOutOfScopeEndpointViolation"
            case thirdPartyFirewallMissingExpectedRouteTableViolation = "ThirdPartyFirewallMissingExpectedRouteTableViolation"
            case thirdPartyFirewallMissingFirewallViolation = "ThirdPartyFirewallMissingFirewallViolation"
            case thirdPartyFirewallMissingSubnetViolation = "ThirdPartyFirewallMissingSubnetViolation"
        }
    }

    public struct Route: AWSDecodableShape {
        /// The destination of the route.
        public let destination: String?
        /// The type of destination for the route.
        public let destinationType: DestinationType?
        /// The route's target.
        public let target: String?
        /// The type of target for the route.
        public let targetType: TargetType?

        public init(destination: String? = nil, destinationType: DestinationType? = nil, target: String? = nil, targetType: TargetType? = nil) {
            self.destination = destination
            self.destinationType = destinationType
            self.target = target
            self.targetType = targetType
        }

        private enum CodingKeys: String, CodingKey {
            case destination = "Destination"
            case destinationType = "DestinationType"
            case target = "Target"
            case targetType = "TargetType"
        }
    }

    public struct RouteHasOutOfScopeEndpointViolation: AWSDecodableShape {
        /// The route table associated with the current firewall subnet.
        public let currentFirewallSubnetRouteTable: String?
        /// The current route table associated with the Internet Gateway.
        public let currentInternetGatewayRouteTable: String?
        /// The ID of the firewall subnet.
        public let firewallSubnetId: String?
        /// The list of firewall subnet routes.
        public let firewallSubnetRoutes: [Route]?
        /// The ID of the Internet Gateway.
        public let internetGatewayId: String?
        /// The routes in the route table associated with the Internet Gateway.
        public let internetGatewayRoutes: [Route]?
        /// The ID of the route table.
        public let routeTableId: String?
        /// The subnet's Availability Zone.
        public let subnetAvailabilityZone: String?
        /// The ID of the subnet's Availability Zone.
        public let subnetAvailabilityZoneId: String?
        /// The ID of the subnet associated with the route that violates the policy scope.
        public let subnetId: String?
        /// The list of routes that violate the route table.
        public let violatingRoutes: [Route]?
        /// The VPC ID of the route that violates the policy scope.
        public let vpcId: String?

        public init(currentFirewallSubnetRouteTable: String? = nil, currentInternetGatewayRouteTable: String? = nil, firewallSubnetId: String? = nil, firewallSubnetRoutes: [Route]? = nil, internetGatewayId: String? = nil, internetGatewayRoutes: [Route]? = nil, routeTableId: String? = nil, subnetAvailabilityZone: String? = nil, subnetAvailabilityZoneId: String? = nil, subnetId: String? = nil, violatingRoutes: [Route]? = nil, vpcId: String? = nil) {
            self.currentFirewallSubnetRouteTable = currentFirewallSubnetRouteTable
            self.currentInternetGatewayRouteTable = currentInternetGatewayRouteTable
            self.firewallSubnetId = firewallSubnetId
            self.firewallSubnetRoutes = firewallSubnetRoutes
            self.internetGatewayId = internetGatewayId
            self.internetGatewayRoutes = internetGatewayRoutes
            self.routeTableId = routeTableId
            self.subnetAvailabilityZone = subnetAvailabilityZone
            self.subnetAvailabilityZoneId = subnetAvailabilityZoneId
            self.subnetId = subnetId
            self.violatingRoutes = violatingRoutes
            self.vpcId = vpcId
        }

        private enum CodingKeys: String, CodingKey {
            case currentFirewallSubnetRouteTable = "CurrentFirewallSubnetRouteTable"
            case currentInternetGatewayRouteTable = "CurrentInternetGatewayRouteTable"
            case firewallSubnetId = "FirewallSubnetId"
            case firewallSubnetRoutes = "FirewallSubnetRoutes"
            case internetGatewayId = "InternetGatewayId"
            case internetGatewayRoutes = "InternetGatewayRoutes"
            case routeTableId = "RouteTableId"
            case subnetAvailabilityZone = "SubnetAvailabilityZone"
            case subnetAvailabilityZoneId = "SubnetAvailabilityZoneId"
            case subnetId = "SubnetId"
            case violatingRoutes = "ViolatingRoutes"
            case vpcId = "VpcId"
        }
    }

    public struct SecurityGroupRemediationAction: AWSDecodableShape {
        /// Brief description of the action that will be performed.
        public let description: String?
        /// Indicates if the current action is the default action.
        public let isDefaultAction: Bool?
        /// The remediation action that will be performed.
        public let remediationActionType: RemediationActionType?
        /// The final state of the rule specified in the ViolationTarget after it is remediated.
        public let remediationResult: SecurityGroupRuleDescription?

        public init(description: String? = nil, isDefaultAction: Bool? = nil, remediationActionType: RemediationActionType? = nil, remediationResult: SecurityGroupRuleDescription? = nil) {
            self.description = description
            self.isDefaultAction = isDefaultAction
            self.remediationActionType = remediationActionType
            self.remediationResult = remediationResult
        }

        private enum CodingKeys: String, CodingKey {
            case description = "Description"
            case isDefaultAction = "IsDefaultAction"
            case remediationActionType = "RemediationActionType"
            case remediationResult = "RemediationResult"
        }
    }

    public struct SecurityGroupRuleDescription: AWSDecodableShape {
        /// The start of the port range for the TCP and UDP protocols, or an ICMP/ICMPv6 type number. A value of -1 indicates all ICMP/ICMPv6 types.
        public let fromPort: Int64?
        /// The IPv4 ranges for the security group rule.
        public let ipv4Range: String?
        /// The IPv6 ranges for the security group rule.
        public let ipv6Range: String?
        /// The ID of the prefix list for the security group rule.
        public let prefixListId: String?
        /// The IP protocol name (tcp, udp, icmp, icmpv6) or number.
        public let `protocol`: String?
        /// The end of the port range for the TCP and UDP protocols, or an ICMP/ICMPv6 code. A value of -1 indicates all ICMP/ICMPv6 codes.
        public let toPort: Int64?

        public init(fromPort: Int64? = nil, ipv4Range: String? = nil, ipv6Range: String? = nil, prefixListId: String? = nil, protocol: String? = nil, toPort: Int64? = nil) {
            self.fromPort = fromPort
            self.ipv4Range = ipv4Range
            self.ipv6Range = ipv6Range
            self.prefixListId = prefixListId
            self.`protocol` = `protocol`
            self.toPort = toPort
        }

        private enum CodingKeys: String, CodingKey {
            case fromPort = "FromPort"
            case ipv4Range = "IPV4Range"
            case ipv6Range = "IPV6Range"
            case prefixListId = "PrefixListId"
            case `protocol` = "Protocol"
            case toPort = "ToPort"
        }
    }

    public struct SecurityServicePolicyData: AWSEncodableShape & AWSDecodableShape {
        /// Details about the service that are specific to the service type, in JSON format.    Example: DNS_FIREWALL   "{\"type\":\"DNS_FIREWALL\",\"preProcessRuleGroups\":[{\"ruleGroupId\":\"rslvr-frg-1\",\"priority\":10}],\"postProcessRuleGroups\":[{\"ruleGroupId\":\"rslvr-frg-2\",\"priority\":9911}]}"   Valid values for preProcessRuleGroups are between 1 and 99. Valid values for postProcessRuleGroups are between 9901 and 10000.    Example: IMPORT_NETWORK_FIREWALL   "{\"type\":\"IMPORT_NETWORK_FIREWALL\",\"awsNetworkFirewallConfig\":{\"networkFirewallStatelessRuleGroupReferences\":[{\"resourceARN\":\"arn:aws:network-firewall:us-west-2:000000000000:stateless-rulegroup\/rg1\",\"priority\":1}],\"networkFirewallStatelessDefaultActions\":[\"aws:drop\"],\"networkFirewallStatelessFragmentDefaultActions\":[\"aws:pass\"],\"networkFirewallStatelessCustomActions\":[],\"networkFirewallStatefulRuleGroupReferences\":[{\"resourceARN\":\"arn:aws:network-firewall:us-west-2:aws-managed:stateful-rulegroup\/ThreatSignaturesEmergingEventsStrictOrder\",\"priority\":8}],\"networkFirewallStatefulEngineOptions\":{\"ruleOrder\":\"STRICT_ORDER\"},\"networkFirewallStatefulDefaultActions\":[\"aws:drop_strict\"]}}"   "{\"type\":\"DNS_FIREWALL\",\"preProcessRuleGroups\":[{\"ruleGroupId\":\"rslvr-frg-1\",\"priority\":10}],\"postProcessRuleGroups\":[{\"ruleGroupId\":\"rslvr-frg-2\",\"priority\":9911}]}"   Valid values for preProcessRuleGroups are between 1 and 99. Valid values for postProcessRuleGroups are between 9901 and 10000.    Example: NETWORK_FIREWALL - Centralized deployment model  "{\"type\":\"NETWORK_FIREWALL\",\"awsNetworkFirewallConfig\":{\"networkFirewallStatelessRuleGroupReferences\":[{\"resourceARN\":\"arn:aws:network-firewall:us-east-1:123456789011:stateless-rulegroup/test\",\"priority\":1}],\"networkFirewallStatelessDefaultActions\":[\"aws:forward_to_sfe\",\"customActionName\"],\"networkFirewallStatelessFragmentDefaultActions\":[\"aws:forward_to_sfe\",\"customActionName\"],\"networkFirewallStatelessCustomActions\":[{\"actionName\":\"customActionName\",\"actionDefinition\":{\"publishMetricAction\":{\"dimensions\":[{\"value\":\"metricdimensionvalue\"}]}}}],\"networkFirewallStatefulRuleGroupReferences\":[{\"resourceARN\":\"arn:aws:network-firewall:us-east-1:123456789011:stateful-rulegroup/test\"}],\"networkFirewallLoggingConfiguration\":{\"logDestinationConfigs\":[{\"logDestinationType\":\"S3\",\"logType\":\"ALERT\",\"logDestination\":{\"bucketName\":\"s3-bucket-name\"}},{\"logDestinationType\":\"S3\",\"logType\":\"FLOW\",\"logDestination\":{\"bucketName\":\"s3-bucket-name\"}}],\"overrideExistingConfig\":true}},\"firewallDeploymentModel\":{\"centralizedFirewallDeploymentModel\":{\"centralizedFirewallOrchestrationConfig\":{\"inspectionVpcIds\":[{\"resourceId\":\"vpc-1234\",\"accountId\":\"123456789011\"}],\"firewallCreationConfig\":{\"endpointLocation\":{\"availabilityZoneConfigList\":[{\"availabilityZoneId\":null,\"availabilityZoneName\":\"us-east-1a\",\"allowedIPV4CidrList\":[\"10.0.0.0/28\"]}]}},\"allowedIPV4CidrList\":[]}}}}"  To use the centralized deployment model, you must set PolicyOption to CENTRALIZED.    Example: NETWORK_FIREWALL - Distributed deployment model with automatic Availability Zone configuration   "{\"type\":\"NETWORK_FIREWALL\",\"networkFirewallStatelessRuleGroupReferences\":[{\"resourceARN\":\"arn:aws:network-firewall:us-east-1:123456789011:stateless-rulegroup/test\",\"priority\":1}],\"networkFirewallStatelessDefaultActions\":[\"aws:forward_to_sfe\",\"customActionName\"],\"networkFirewallStatelessFragmentDefaultActions\":[\"aws:forward_to_sfe\",\"customActionName\"],\"networkFirewallStatelessCustomActions\":[{\"actionName\":\"customActionName\",\"actionDefinition\":{\"publishMetricAction\":{\"dimensions\":[{\"value\":\"metricdimensionvalue\"}]}}}],\"networkFirewallStatefulRuleGroupReferences\":[{\"resourceARN\":\"arn:aws:network-firewall:us-east-1:123456789011:stateful-rulegroup/test\"}],\"networkFirewallOrchestrationConfig\":{\"singleFirewallEndpointPerVPC\":false,\"allowedIPV4CidrList\":[\"10.0.0.0/28\",\"192.168.0.0/28\"],\"routeManagementAction\":\"OFF\"},\"networkFirewallLoggingConfiguration\":{\"logDestinationConfigs\":[{\"logDestinationType\":\"S3\",\"logType\":\"ALERT\",\"logDestination\":{\"bucketName\":\"s3-bucket-name\"}},{\"logDestinationType\":\"S3\",\"logType\":\"FLOW\",\"logDestination\":{\"bucketName\":\"s3-bucket-name\"}}],\"overrideExistingConfig\":true}}"   With automatic Availbility Zone configuration, Firewall Manager chooses which Availability Zones to create the endpoints in. To use the distributed deployment model, you must set PolicyOption to NULL.    Example: NETWORK_FIREWALL - Distributed deployment model with automatic Availability Zone configuration and route management   "{\"type\":\"NETWORK_FIREWALL\",\"networkFirewallStatelessRuleGroupReferences\":[{\"resourceARN\":\"arn:aws:network-firewall:us-east-1:123456789011:stateless-rulegroup/test\",\"priority\":1}],\"networkFirewallStatelessDefaultActions\":[\"aws:forward_to_sfe\",\"customActionName\"],\"networkFirewallStatelessFragmentDefaultActions\":[\"aws:forward_to_sfe\",\"customActionName\"],\"networkFirewallStatelessCustomActions\":[{\"actionName\":\"customActionName\",\"actionDefinition\":{\"publishMetricAction\":{\"dimensions\":[{\"value\":\"metricdimensionvalue\"}]}}}],\"networkFirewallStatefulRuleGroupReferences\":[{\"resourceARN\":\"arn:aws:network-firewall:us-east-1:123456789011:stateful-rulegroup/test\"}],\"networkFirewallOrchestrationConfig\":{\"singleFirewallEndpointPerVPC\":false,\"allowedIPV4CidrList\":[\"10.0.0.0/28\",\"192.168.0.0/28\"],\"routeManagementAction\":\"MONITOR\",\"routeManagementTargetTypes\":[\"InternetGateway\"]},\"networkFirewallLoggingConfiguration\":{\"logDestinationConfigs\":[{\"logDestinationType\":\"S3\",\"logType\":\"ALERT\",\"logDestination\":{\"bucketName\":\"s3-bucket-name\"}},{\"logDestinationType\":\"S3\",\"logType\": \"FLOW\",\"logDestination\":{\"bucketName\":\"s3-bucket-name\"}}],\"overrideExistingConfig\":true}}"   To use the distributed deployment model, you must set PolicyOption to NULL.    Example: NETWORK_FIREWALL - Distributed deployment model with custom Availability Zone configuration  "{\"type\":\"NETWORK_FIREWALL\",\"networkFirewallStatelessRuleGroupReferences\":[{\"resourceARN\":\"arn:aws:network-firewall:us-east-1:123456789011:stateless-rulegroup/test\",\"priority\":1}],\"networkFirewallStatelessDefaultActions\":[\"aws:forward_to_sfe\",\"customActionName\"],\"networkFirewallStatelessFragmentDefaultActions\":[\"aws:forward_to_sfe\",\"fragmentcustomactionname\"],\"networkFirewallStatelessCustomActions\":[{\"actionName\":\"customActionName\", \"actionDefinition\":{\"publishMetricAction\":{\"dimensions\":[{\"value\":\"metricdimensionvalue\"}]}}},{\"actionName\":\"fragmentcustomactionname\",\"actionDefinition\":{\"publishMetricAction\":{\"dimensions\":[{\"value\":\"fragmentmetricdimensionvalue\"}]}}}],\"networkFirewallStatefulRuleGroupReferences\":[{\"resourceARN\":\"arn:aws:network-firewall:us-east-1:123456789011:stateful-rulegroup/test\"}],\"networkFirewallOrchestrationConfig\":{\"firewallCreationConfig\":{ \"endpointLocation\":{\"availabilityZoneConfigList\":[{\"availabilityZoneName\":\"us-east-1a\",\"allowedIPV4CidrList\":[\"10.0.0.0/28\"]},{\"availabilityZoneName\":\"us-east-1b\",\"allowedIPV4CidrList\":[ \"10.0.0.0/28\"]}]} },\"singleFirewallEndpointPerVPC\":false,\"allowedIPV4CidrList\":null,\"routeManagementAction\":\"OFF\",\"networkFirewallLoggingConfiguration\":{\"logDestinationConfigs\":[{\"logDestinationType\":\"S3\",\"logType\":\"ALERT\",\"logDestination\":{\"bucketName\":\"s3-bucket-name\"}},{\"logDestinationType\":\"S3\",\"logType\":\"FLOW\",\"logDestination\":{\"bucketName\":\"s3-bucket-name\"}}],\"overrideExistingConfig\":boolean}}"    With custom Availability Zone configuration, you define which specific Availability Zones to create endpoints in by configuring firewallCreationConfig. To configure the Availability Zones in firewallCreationConfig, specify either the availabilityZoneName or availabilityZoneId parameter, not both parameters.  To use the distributed deployment model, you must set PolicyOption to NULL.    Example: NETWORK_FIREWALL - Distributed deployment model with custom Availability Zone configuration and route management  "{\"type\":\"NETWORK_FIREWALL\",\"networkFirewallStatelessRuleGroupReferences\":[{\"resourceARN\":\"arn:aws:network-firewall:us-east-1:123456789011:stateless-rulegroup/test\",\"priority\":1}],\"networkFirewallStatelessDefaultActions\":[\"aws:forward_to_sfe\",\"customActionName\"],\"networkFirewallStatelessFragmentDefaultActions\":[\"aws:forward_to_sfe\",\"fragmentcustomactionname\"],\"networkFirewallStatelessCustomActions\":[{\"actionName\":\"customActionName\",\"actionDefinition\":{\"publishMetricAction\":{\"dimensions\":[{\"value\":\"metricdimensionvalue\"}]}}},{\"actionName\":\"fragmentcustomactionname\",\"actionDefinition\":{\"publishMetricAction\":{\"dimensions\":[{\"value\":\"fragmentmetricdimensionvalue\"}]}}}],\"networkFirewallStatefulRuleGroupReferences\":[{\"resourceARN\":\"arn:aws:network-firewall:us-east-1:123456789011:stateful-rulegroup/test\"}],\"networkFirewallOrchestrationConfig\":{\"firewallCreationConfig\":{\"endpointLocation\":{\"availabilityZoneConfigList\":[{\"availabilityZoneName\":\"us-east-1a\",\"allowedIPV4CidrList\":[\"10.0.0.0/28\"]},{\"availabilityZoneName\":\"us-east-1b\",\"allowedIPV4CidrList\":[\"10.0.0.0/28\"]}]}},\"singleFirewallEndpointPerVPC\":false,\"allowedIPV4CidrList\":null,\"routeManagementAction\":\"MONITOR\",\"routeManagementTargetTypes\":[\"InternetGateway\"],\"routeManagementConfig\":{\"allowCrossAZTrafficIfNoEndpoint\":true}},\"networkFirewallLoggingConfiguration\":{\"logDestinationConfigs\":[{\"logDestinationType\":\"S3\",\"logType\":\"ALERT\",\"logDestination\":{\"bucketName\":\"s3-bucket-name\"}},{\"logDestinationType\":\"S3\",\"logType\":\"FLOW\",\"logDestination\":{\"bucketName\":\"s3-bucket-name\"}}],\"overrideExistingConfig\":boolean}}"   To use the distributed deployment model, you must set PolicyOption to NULL.    Example: SECURITY_GROUPS_COMMON   "{\"type\":\"SECURITY_GROUPS_COMMON\",\"revertManualSecurityGroupChanges\":false,\"exclusiveResourceSecurityGroupManagement\":false, \"applyToAllEC2InstanceENIs\":false,\"securityGroups\":[{\"id\":\" sg-000e55995d61a06bd\"}]}"    Example: SECURITY_GROUPS_COMMON - Security group tag distribution   ""{\"type\":\"SECURITY_GROUPS_COMMON\",\"securityGroups\":[{\"id\":\"sg-000e55995d61a06bd\"}],\"revertManualSecurityGroupChanges\":true,\"exclusiveResourceSecurityGroupManagement\":false,\"applyToAllEC2InstanceENIs\":false,\"includeSharedVPC\":false,\"enableTagDistribution\":true}""   Firewall Manager automatically distributes tags from the primary group to the security groups created by this policy. To use security group tag distribution, you must also set revertManualSecurityGroupChanges to true, otherwise Firewall Manager won't be able to create the policy. When you enable revertManualSecurityGroupChanges, Firewall Manager identifies and reports when the security groups created by this policy become non-compliant.   Firewall Manager won't distrubute system tags added by Amazon Web Services services into the replica security groups. System tags begin with the aws: prefix.    Example: Shared VPCs. Apply the preceding policy to resources in shared VPCs as well as to those in VPCs that the account owns   "{\"type\":\"SECURITY_GROUPS_COMMON\",\"revertManualSecurityGroupChanges\":false,\"exclusiveResourceSecurityGroupManagement\":false, \"applyToAllEC2InstanceENIs\":false,\"includeSharedVPC\":true,\"securityGroups\":[{\"id\":\" sg-000e55995d61a06bd\"}]}"    Example: SECURITY_GROUPS_CONTENT_AUDIT   "{\"type\":\"SECURITY_GROUPS_CONTENT_AUDIT\",\"securityGroups\":[{\"id\":\"sg-000e55995d61a06bd\"}],\"securityGroupAction\":{\"type\":\"ALLOW\"}}"  The security group action for content audit can be ALLOW or DENY. For ALLOW, all in-scope security group rules must be within the allowed range of the policy's security group rules. For DENY, all in-scope security group rules must not contain a value or a range that matches a rule value or range in the policy security group.   Example: SECURITY_GROUPS_USAGE_AUDIT   "{\"type\":\"SECURITY_GROUPS_USAGE_AUDIT\",\"deleteUnusedSecurityGroups\":true,\"coalesceRedundantSecurityGroups\":true}"    Example: SHIELD_ADVANCED with web ACL management  "{\"type\":\"SHIELD_ADVANCED\",\"optimizeUnassociatedWebACL\":true}"  If you set optimizeUnassociatedWebACL to true, Firewall Manager creates web ACLs in accounts within the policy scope if the web ACLs will be used by at least one resource. Firewall Manager creates web ACLs in the accounts within policy scope only if the web ACLs will be used by at least one resource. If at any time an account comes into policy scope, Firewall Manager automatically creates a web ACL in the account if at least one resource will use the web ACL. Upon enablement, Firewall Manager performs a one-time cleanup of unused web ACLs in your account. The cleanup process can take several hours. If a resource leaves policy scope after Firewall Manager creates a web ACL, Firewall Manager doesn't disassociate the resource from the web ACL. If you want Firewall Manager to clean up the web ACL, you must first manually disassociate the resources from the web ACL, and then enable the manage unused web ACLs option in your policy. If you set optimizeUnassociatedWebACL to false, and Firewall Manager automatically creates an empty web ACL in each account that's within policy scope.   Specification for SHIELD_ADVANCED for Amazon CloudFront distributions   "{\"type\":\"SHIELD_ADVANCED\",\"automaticResponseConfiguration\": {\"automaticResponseStatus\":\"ENABLED|IGNORED|DISABLED\", \"automaticResponseAction\":\"BLOCK|COUNT\"}, \"overrideCustomerWebaclClassic\":true|false, \"optimizeUnassociatedWebACL\":true|false}"  For example: "{\"type\":\"SHIELD_ADVANCED\",\"automaticResponseConfiguration\": {\"automaticResponseStatus\":\"ENABLED\", \"automaticResponseAction\":\"COUNT\"}}"  The default value for automaticResponseStatus is IGNORED. The value for automaticResponseAction is only required when automaticResponseStatus is set to ENABLED. The default value for overrideCustomerWebaclClassic is false. For other resource types that you can protect with a Shield Advanced policy, this ManagedServiceData configuration is an empty string.   Example: THIRD_PARTY_FIREWALL  Replace THIRD_PARTY_FIREWALL_NAME with the name of the third-party firewall.  "{ "type":"THIRD_PARTY_FIREWALL", "thirdPartyFirewall":"THIRD_PARTY_FIREWALL_NAME", "thirdPartyFirewallConfig":{ "thirdPartyFirewallPolicyList":["global-1"] },
        /// 	          "firewallDeploymentModel":{ "distributedFirewallDeploymentModel":{ "distributedFirewallOrchestrationConfig":{ "firewallCreationConfig":{ "endpointLocation":{ "availabilityZoneConfigList":[ { "availabilityZoneName":"${AvailabilityZone}" } ] } }, "allowedIPV4CidrList":[ ] } } } }"    Example: WAFV2 - Account takeover prevention, Bot Control managed rule groups, optimize unassociated web ACL, and rule action override   "{\"type\":\"WAFV2\",\"preProcessRuleGroups\":[{\"ruleGroupArn\":null,\"overrideAction\":{\"type\":\"NONE\"},\"managedRuleGroupIdentifier\":{\"versionEnabled\":null,\"version\":null,\"vendorName\":\"AWS\",\"managedRuleGroupName\":\"AWSManagedRulesATPRuleSet\",\"managedRuleGroupConfigs\":[{\"awsmanagedRulesATPRuleSet\":{\"loginPath\":\"/loginpath\",\"requestInspection\":{\"payloadType\":\"FORM_ENCODED|JSON\",\"usernameField\":{\"identifier\":\"/form/username\"},\"passwordField\":{\"identifier\":\"/form/password\"}}}}]},\"ruleGroupType\":\"ManagedRuleGroup\",\"excludeRules\":[],\"sampledRequestsEnabled\":true},{\"ruleGroupArn\":null,\"overrideAction\":{\"type\":\"NONE\"},\"managedRuleGroupIdentifier\":{\"versionEnabled\":null,\"version\":null,\"vendorName\":\"AWS\",\"managedRuleGroupName\":\"AWSManagedRulesBotControlRuleSet\",\"managedRuleGroupConfigs\":[{\"awsmanagedRulesBotControlRuleSet\":{\"inspectionLevel\":\"TARGETED|COMMON\"}}]},\"ruleGroupType\":\"ManagedRuleGroup\",\"excludeRules\":[],\"sampledRequestsEnabled\":true,\"ruleActionOverrides\":[{\"name\":\"Rule1\",\"actionToUse\":{\"allow|block|count|captcha|challenge\":{}}},{\"name\":\"Rule2\",\"actionToUse\":{\"allow|block|count|captcha|challenge\":{}}}]}],\"postProcessRuleGroups\":[],\"defaultAction\":{\"type\":\"ALLOW\"},\"customRequestHandling\":null,\"customResponse\":null,\"overrideCustomerWebACLAssociation\":false,\"loggingConfiguration\":null,\"sampledRequestsEnabledForDefaultActions\":true,\"optimizeUnassociatedWebACL\":true}"    Bot Control - For information about AWSManagedRulesBotControlRuleSet managed rule groups, see AWSManagedRulesBotControlRuleSet in the WAF API Reference.   Fraud Control account takeover prevention (ATP) - For information about the properties available for AWSManagedRulesATPRuleSet managed rule groups, see AWSManagedRulesATPRuleSet in the WAF API Reference.   Optimize unassociated web ACL - If you set optimizeUnassociatedWebACL to true, Firewall Manager creates web ACLs in accounts within the policy scope if the web ACLs will be used by at least one resource. Firewall Manager creates web ACLs in the accounts within policy scope only if the web ACLs will be used by at least one resource. If at any time an account comes into policy scope, Firewall Manager automatically creates a web ACL in the account if at least one resource will use the web ACL. Upon enablement, Firewall Manager performs a one-time cleanup of unused web ACLs in your account. The cleanup process can take several hours. If a resource leaves policy scope after Firewall Manager creates a web ACL, Firewall Manager disassociates the resource from the web ACL, but won't clean up the unused web ACL. Firewall Manager only cleans up unused web ACLs when you first enable management of unused web ACLs in a policy. If you set optimizeUnassociatedWebACL to false Firewall Manager doesn't manage unused web ACLs, and Firewall Manager automatically creates an empty web ACL in each account that's within policy scope.   Rule action overrides - Firewall Manager supports rule action overrides only for managed rule groups. To configure a RuleActionOverrides add the Name of the rule to override, and ActionToUse, which is the new action to use for the rule. For information about using rule action override, see RuleActionOverride in the WAF API Reference.     Example: WAFV2 -  CAPTCHA and Challenge configs   "{\"type\":\"WAFV2\",\"preProcessRuleGroups\":[{\"ruleGroupArn\":null,\"overrideAction\":{\"type\":\"NONE\"},\"managedRuleGroupIdentifier\":{\"versionEnabled\":null,\"version\":null,\"vendorName\":\"AWS\",\"managedRuleGroupName\":\"AWSManagedRulesAdminProtectionRuleSet\"},\"ruleGroupType\":\"ManagedRuleGroup\",\"excludeRules\":[],\"sampledRequestsEnabled\":true}],\"postProcessRuleGroups\":[],\"defaultAction\":{\"type\":\"ALLOW\"},\"customRequestHandling\":null,\"customResponse\":null,\"overrideCustomerWebACLAssociation\":false,\"loggingConfiguration\":null,\"sampledRequestsEnabledForDefaultActions\":true,\"captchaConfig\":{\"immunityTimeProperty\":{\"immunityTime\":500}},\"challengeConfig\":{\"immunityTimeProperty\":{\"immunityTime\":800}},\"tokenDomains\":[\"google.com\",\"amazon.com\"],\"associationConfig\":{\"requestBody\":{\"CLOUDFRONT\":{\"defaultSizeInspectionLimit\":\"KB_16\"}}}}"     CAPTCHA and Challenge configs - If you update the policy's values for associationConfig, captchaConfig, challengeConfig, or tokenDomains, Firewall Manager will overwrite your local web ACLs to contain the new value(s). However, if you don't update the policy's associationConfig, captchaConfig, challengeConfig, or tokenDomains values, the values in your local web ACLs will remain unchanged. For information about association configs, see AssociationConfig. For information about CAPTCHA and Challenge configs, see CaptchaConfig and ChallengeConfig in the WAF API Reference.    defaultSizeInspectionLimit - Specifies the maximum size of the web request body component that an associated Amazon CloudFront distribution should send to WAF for inspection. For more information, see DefaultSizeInspectionLimit in the WAF API Reference.     Example: WAFV2 -  Firewall Manager support for WAF managed rule group versioning   "{\"type\":\"WAFV2\",\"preProcessRuleGroups\":[{\"ruleGroupArn\":null,\"overrideAction\":{\"type\":\"NONE\"},\"managedRuleGroupIdentifier\":{\"versionEnabled\":true,\"version\":\"Version_2.0\",\"vendorName\":\"AWS\",\"managedRuleGroupName\":\"AWSManagedRulesCommonRuleSet\"},\"ruleGroupType\":\"ManagedRuleGroup\",\"excludeRules\":[{\"name\":\"NoUserAgent_HEADER\"}]}],\"postProcessRuleGroups\":[],\"defaultAction\":{\"type\":\"ALLOW\"},\"overrideCustomerWebACLAssociation\":false,\"loggingConfiguration\":{\"logDestinationConfigs\":[\"arn:aws:firehose:us-west-2:12345678912:deliverystream/aws-waf-logs-fms-admin-destination\"],\"redactedFields\":[{\"redactedFieldType\":\"SingleHeader\",\"redactedFieldValue\":\"Cookies\"},{\"redactedFieldType\":\"Method\"}]}}"   To use a specific version of a WAF managed rule group in your Firewall Manager policy, you must set versionEnabled to true, and set version to the version you'd like to use. If you don't set versionEnabled to true, or if you omit versionEnabled, then Firewall Manager uses the default version of the WAF managed rule group.    Example: WAFV2 - Logging configurations   "{\"type\":\"WAFV2\",\"preProcessRuleGroups\":[{\"ruleGroupArn\":null, \"overrideAction\":{\"type\":\"NONE\"},\"managedRuleGroupIdentifier\": {\"versionEnabled\":null,\"version\":null,\"vendorName\":\"AWS\", \"managedRuleGroupName\":\"AWSManagedRulesAdminProtectionRuleSet\"} ,\"ruleGroupType\":\"ManagedRuleGroup\",\"excludeRules\":[], \"sampledRequestsEnabled\":true}],\"postProcessRuleGroups\":[], \"defaultAction\":{\"type\":\"ALLOW\"},\"customRequestHandling\" :null,\"customResponse\":null,\"overrideCustomerWebACLAssociation\" :false,\"loggingConfiguration\":{\"logDestinationConfigs\": [\"arn:aws:s3:::aws-waf-logs-example-bucket\"] ,\"redactedFields\":[],\"loggingFilterConfigs\":{\"defaultBehavior\":\"KEEP\", \"filters\":[{\"behavior\":\"KEEP\",\"requirement\":\"MEETS_ALL\", \"conditions\":[{\"actionCondition\":\"CAPTCHA\"},{\"actionCondition\": \"CHALLENGE\"}, {\"actionCondition\":\"EXCLUDED_AS_COUNT\"}]}]}},\"sampledRequestsEnabledForDefaultActions\":true}"  Firewall Manager supports Amazon Kinesis Data Firehose and Amazon S3 as the logDestinationConfigs in your loggingConfiguration. For information about WAF logging configurations, see LoggingConfiguration in the WAF API Reference  In the loggingConfiguration, you can specify one logDestinationConfigs. Optionally provide as many as 20 redactedFields. The RedactedFieldType must be one of URI, QUERY_STRING, HEADER, or METHOD.   Example: WAF Classic   "{\"type\": \"WAF\", \"ruleGroups\": [{\"id\":\"12345678-1bcd-9012-efga-0987654321ab\", \"overrideAction\" : {\"type\": \"COUNT\"}}], \"defaultAction\": {\"type\": \"BLOCK\"}}"
        public let managedServiceData: String?
        /// Contains the Network Firewall firewall policy options to configure a centralized deployment model.
        public let policyOption: PolicyOption?
        /// The service that the policy is using to protect the resources. This specifies the type of policy that is created, either an WAF policy, a Shield Advanced policy, or a security group policy. For security group policies, Firewall Manager supports one security group for each common policy and for each content audit policy. This is an adjustable limit that you can increase by contacting Amazon Web Services Support.
        public let type: SecurityServiceType

        public init(managedServiceData: String? = nil, policyOption: PolicyOption? = nil, type: SecurityServiceType) {
            self.managedServiceData = managedServiceData
            self.policyOption = policyOption
            self.type = type
        }

        public func validate(name: String) throws {
            try self.validate(self.managedServiceData, name: "managedServiceData", parent: name, max: 10000)
            try self.validate(self.managedServiceData, name: "managedServiceData", parent: name, min: 1)
            try self.validate(self.managedServiceData, name: "managedServiceData", parent: name, pattern: "^((?!\\\\[nr]).)+$")
        }

        private enum CodingKeys: String, CodingKey {
            case managedServiceData = "ManagedServiceData"
            case policyOption = "PolicyOption"
            case type = "Type"
        }
    }

    public struct StatefulEngineOptions: AWSDecodableShape {
        /// Indicates how to manage the order of stateful rule evaluation for the policy.
        /// DEFAULT_ACTION_ORDER is the default behavior. Stateful rules are provided to the rule engine
        /// as Suricata compatible strings, and Suricata evaluates them based on certain settings. For more
        /// information, see Evaluation order for stateful rules in the Network Firewall Developer Guide.
        public let ruleOrder: RuleOrder?

        public init(ruleOrder: RuleOrder? = nil) {
            self.ruleOrder = ruleOrder
        }

        private enum CodingKeys: String, CodingKey {
            case ruleOrder = "RuleOrder"
        }
    }

    public struct StatefulRuleGroup: AWSDecodableShape {
        /// The action that allows the policy owner to override the behavior of the rule group within a policy.
        public let override: NetworkFirewallStatefulRuleGroupOverride?
        /// An integer setting that indicates the order in which to run the stateful rule groups in a single
        /// Network Firewall firewall policy. This setting only applies to firewall policies that specify the STRICT_ORDER
        /// rule order in the stateful engine options settings.  Network Firewall evalutes each stateful rule group against a packet starting with the group that has
        /// the lowest priority setting. You must ensure that the priority settings are unique within each policy. For information about
        ///   You can change the priority settings of your rule groups at any time. To make it easier to insert rule
        /// groups later, number them so there's a wide range in between, for example use 100, 200, and so on.
        public let priority: Int?
        /// The resource ID of the rule group.
        public let resourceId: String?
        /// The name of the rule group.
        public let ruleGroupName: String?

        public init(override: NetworkFirewallStatefulRuleGroupOverride? = nil, priority: Int? = nil, resourceId: String? = nil, ruleGroupName: String? = nil) {
            self.override = override
            self.priority = priority
            self.resourceId = resourceId
            self.ruleGroupName = ruleGroupName
        }

        private enum CodingKeys: String, CodingKey {
            case override = "Override"
            case priority = "Priority"
            case resourceId = "ResourceId"
            case ruleGroupName = "RuleGroupName"
        }
    }

    public struct StatelessRuleGroup: AWSDecodableShape {
        /// The priority of the rule group. Network Firewall evaluates the stateless rule groups in a firewall policy starting from the lowest priority setting.
        public let priority: Int?
        /// The resource ID of the rule group.
        public let resourceId: String?
        /// The name of the rule group.
        public let ruleGroupName: String?

        public init(priority: Int? = nil, resourceId: String? = nil, ruleGroupName: String? = nil) {
            self.priority = priority
            self.resourceId = resourceId
            self.ruleGroupName = ruleGroupName
        }

        private enum CodingKeys: String, CodingKey {
            case priority = "Priority"
            case resourceId = "ResourceId"
            case ruleGroupName = "RuleGroupName"
        }
    }

    public struct Tag: AWSEncodableShape & AWSDecodableShape {
        /// Part of the key:value pair that defines a tag. You can use a tag key to describe a category of information, such as "customer." Tag keys are case-sensitive.
        public let key: String
        /// Part of the key:value pair that defines a tag. You can use a tag value to describe a specific value within a category, such as "companyA" or "companyB." Tag values are case-sensitive.
        public let value: String

        public init(key: String, value: String) {
            self.key = key
            self.value = value
        }

        public func validate(name: String) throws {
            try self.validate(self.key, name: "key", parent: name, max: 128)
            try self.validate(self.key, name: "key", parent: name, min: 1)
            try self.validate(self.key, name: "key", parent: name, pattern: "^([\\p{L}\\p{Z}\\p{N}_.:/=+\\-@]*)$")
            try self.validate(self.value, name: "value", parent: name, max: 256)
            try self.validate(self.value, name: "value", parent: name, pattern: "^([\\p{L}\\p{Z}\\p{N}_.:/=+\\-@]*)$")
        }

        private enum CodingKeys: String, CodingKey {
            case key = "Key"
            case value = "Value"
        }
    }

    public struct TagResourceRequest: AWSEncodableShape {
        /// The Amazon Resource Name (ARN) of the resource to return tags for. The Firewall Manager resources that support tagging are policies, applications lists, and protocols lists.
        public let resourceArn: String
        /// The tags to add to the resource.
        public let tagList: [Tag]

        public init(resourceArn: String, tagList: [Tag]) {
            self.resourceArn = resourceArn
            self.tagList = tagList
        }

        public func validate(name: String) throws {
            try self.validate(self.resourceArn, name: "resourceArn", parent: name, max: 1024)
            try self.validate(self.resourceArn, name: "resourceArn", parent: name, min: 1)
            try self.validate(self.resourceArn, name: "resourceArn", parent: name, pattern: "^([\\p{L}\\p{Z}\\p{N}_.:/=+\\-@]*)$")
            try self.tagList.forEach {
                try $0.validate(name: "\(name).tagList[]")
            }
            try self.validate(self.tagList, name: "tagList", parent: name, max: 200)
        }

        private enum CodingKeys: String, CodingKey {
            case resourceArn = "ResourceArn"
            case tagList = "TagList"
        }
    }

    public struct TagResourceResponse: AWSDecodableShape {
        public init() {}
    }

    public struct ThirdPartyFirewallFirewallPolicy: AWSDecodableShape {
        /// The ID of the specified firewall policy.
        public let firewallPolicyId: String?
        /// The name of the specified firewall policy.
        public let firewallPolicyName: String?

        public init(firewallPolicyId: String? = nil, firewallPolicyName: String? = nil) {
            self.firewallPolicyId = firewallPolicyId
            self.firewallPolicyName = firewallPolicyName
        }

        private enum CodingKeys: String, CodingKey {
            case firewallPolicyId = "FirewallPolicyId"
            case firewallPolicyName = "FirewallPolicyName"
        }
    }

    public struct ThirdPartyFirewallMissingExpectedRouteTableViolation: AWSDecodableShape {
        /// The Availability Zone of the firewall subnet that's causing the violation.
        public let availabilityZone: String?
        /// The resource ID of the current route table that's associated with the subnet, if one is available.
        public let currentRouteTable: String?
        /// The resource ID of the route table that should be associated with the subnet.
        public let expectedRouteTable: String?
        /// The ID of the third-party firewall or VPC resource that's causing the violation.
        public let violationTarget: String?
        /// The resource ID of the VPC associated with a fireawll subnet that's causing the violation.
        public let vpc: String?

        public init(availabilityZone: String? = nil, currentRouteTable: String? = nil, expectedRouteTable: String? = nil, violationTarget: String? = nil, vpc: String? = nil) {
            self.availabilityZone = availabilityZone
            self.currentRouteTable = currentRouteTable
            self.expectedRouteTable = expectedRouteTable
            self.violationTarget = violationTarget
            self.vpc = vpc
        }

        private enum CodingKeys: String, CodingKey {
            case availabilityZone = "AvailabilityZone"
            case currentRouteTable = "CurrentRouteTable"
            case expectedRouteTable = "ExpectedRouteTable"
            case violationTarget = "ViolationTarget"
            case vpc = "VPC"
        }
    }

    public struct ThirdPartyFirewallMissingFirewallViolation: AWSDecodableShape {
        /// The Availability Zone of the third-party firewall that's causing the violation.
        public let availabilityZone: String?
        /// The reason the resource is causing this violation, if a reason is available.
        public let targetViolationReason: String?
        /// The ID of the third-party firewall that's causing the violation.
        public let violationTarget: String?
        /// The resource ID of the VPC associated with a third-party firewall.
        public let vpc: String?

        public init(availabilityZone: String? = nil, targetViolationReason: String? = nil, violationTarget: String? = nil, vpc: String? = nil) {
            self.availabilityZone = availabilityZone
            self.targetViolationReason = targetViolationReason
            self.violationTarget = violationTarget
            self.vpc = vpc
        }

        private enum CodingKeys: String, CodingKey {
            case availabilityZone = "AvailabilityZone"
            case targetViolationReason = "TargetViolationReason"
            case violationTarget = "ViolationTarget"
            case vpc = "VPC"
        }
    }

    public struct ThirdPartyFirewallMissingSubnetViolation: AWSDecodableShape {
        /// The Availability Zone of a subnet that's causing the violation.
        public let availabilityZone: String?
        /// The reason the resource is causing the violation, if a reason is available.
        public let targetViolationReason: String?
        /// The ID of the third-party firewall or VPC resource that's causing the violation.
        public let violationTarget: String?
        /// The resource ID of the VPC associated with a subnet that's causing the violation.
        public let vpc: String?

        public init(availabilityZone: String? = nil, targetViolationReason: String? = nil, violationTarget: String? = nil, vpc: String? = nil) {
            self.availabilityZone = availabilityZone
            self.targetViolationReason = targetViolationReason
            self.violationTarget = violationTarget
            self.vpc = vpc
        }

        private enum CodingKeys: String, CodingKey {
            case availabilityZone = "AvailabilityZone"
            case targetViolationReason = "TargetViolationReason"
            case violationTarget = "ViolationTarget"
            case vpc = "VPC"
        }
    }

    public struct ThirdPartyFirewallPolicy: AWSEncodableShape & AWSDecodableShape {
        /// Defines the deployment model to use for the third-party firewall policy.
        public let firewallDeploymentModel: FirewallDeploymentModel?

        public init(firewallDeploymentModel: FirewallDeploymentModel? = nil) {
            self.firewallDeploymentModel = firewallDeploymentModel
        }

        private enum CodingKeys: String, CodingKey {
            case firewallDeploymentModel = "FirewallDeploymentModel"
        }
    }

    public struct UntagResourceRequest: AWSEncodableShape {
        /// The Amazon Resource Name (ARN) of the resource to return tags for. The Firewall Manager resources that support tagging are policies, applications lists, and protocols lists.
        public let resourceArn: String
        /// The keys of the tags to remove from the resource.
        public let tagKeys: [String]

        public init(resourceArn: String, tagKeys: [String]) {
            self.resourceArn = resourceArn
            self.tagKeys = tagKeys
        }

        public func validate(name: String) throws {
            try self.validate(self.resourceArn, name: "resourceArn", parent: name, max: 1024)
            try self.validate(self.resourceArn, name: "resourceArn", parent: name, min: 1)
            try self.validate(self.resourceArn, name: "resourceArn", parent: name, pattern: "^([\\p{L}\\p{Z}\\p{N}_.:/=+\\-@]*)$")
            try self.tagKeys.forEach {
                try validate($0, name: "tagKeys[]", parent: name, max: 128)
                try validate($0, name: "tagKeys[]", parent: name, min: 1)
                try validate($0, name: "tagKeys[]", parent: name, pattern: "^([\\p{L}\\p{Z}\\p{N}_.:/=+\\-@]*)$")
            }
            try self.validate(self.tagKeys, name: "tagKeys", parent: name, max: 200)
        }

        private enum CodingKeys: String, CodingKey {
            case resourceArn = "ResourceArn"
            case tagKeys = "TagKeys"
        }
    }

    public struct UntagResourceResponse: AWSDecodableShape {
        public init() {}
    }

    public struct ViolationDetail: AWSDecodableShape {
        /// The Amazon Web Services account that the violation details were requested for.
        public let memberAccount: String
        /// The ID of the Firewall Manager policy that the violation details were requested for.
        public let policyId: String
        /// Brief description for the requested resource.
        public let resourceDescription: String?
        /// The resource ID that the violation details were requested for.
        public let resourceId: String
        /// The ResourceTag objects associated with the resource.
        public let resourceTags: [Tag]?
        /// The resource type that the violation details were requested for.
        public let resourceType: String
        /// List of violations for the requested resource.
        public let resourceViolations: [ResourceViolation]

        public init(memberAccount: String, policyId: String, resourceDescription: String? = nil, resourceId: String, resourceTags: [Tag]? = nil, resourceType: String, resourceViolations: [ResourceViolation]) {
            self.memberAccount = memberAccount
            self.policyId = policyId
            self.resourceDescription = resourceDescription
            self.resourceId = resourceId
            self.resourceTags = resourceTags
            self.resourceType = resourceType
            self.resourceViolations = resourceViolations
        }

        private enum CodingKeys: String, CodingKey {
            case memberAccount = "MemberAccount"
            case policyId = "PolicyId"
            case resourceDescription = "ResourceDescription"
            case resourceId = "ResourceId"
            case resourceTags = "ResourceTags"
            case resourceType = "ResourceType"
            case resourceViolations = "ResourceViolations"
        }
    }
}

// MARK: - Errors

/// Error enum for FMS
public struct FMSErrorType: AWSErrorType {
    enum Code: String {
        case internalErrorException = "InternalErrorException"
        case invalidInputException = "InvalidInputException"
        case invalidOperationException = "InvalidOperationException"
        case invalidTypeException = "InvalidTypeException"
        case limitExceededException = "LimitExceededException"
        case resourceNotFoundException = "ResourceNotFoundException"
    }

    private let error: Code
    public let context: AWSErrorContext?

    /// initialize FMS
    public init?(errorCode: String, context: AWSErrorContext) {
        guard let error = Code(rawValue: errorCode) else { return nil }
        self.error = error
        self.context = context
    }

    internal init(_ error: Code) {
        self.error = error
        self.context = nil
    }

    /// return error code string
    public var errorCode: String { self.error.rawValue }

    /// The operation failed because of a system problem, even though the request was valid. Retry your request.
    public static var internalErrorException: Self { .init(.internalErrorException) }
    /// The parameters of the request were invalid.
    public static var invalidInputException: Self { .init(.invalidInputException) }
    /// The operation failed because there was nothing to do or the operation wasn't possible. For example, you might have submitted an AssociateAdminAccount request for an account ID that was already set as the Firewall Manager administrator. Or you might have tried to access a Region that's disabled by default, and that you need to enable for the Firewall Manager administrator account and for Organizations before you can access it.
    public static var invalidOperationException: Self { .init(.invalidOperationException) }
    /// The value of the Type parameter is invalid.
    public static var invalidTypeException: Self { .init(.invalidTypeException) }
    /// The operation exceeds a resource limit, for example, the maximum number of policy objects that you can create for an Amazon Web Services account. For more information, see Firewall Manager Limits in the WAF Developer Guide.
    public static var limitExceededException: Self { .init(.limitExceededException) }
    /// The specified resource was not found.
    public static var resourceNotFoundException: Self { .init(.resourceNotFoundException) }
}

extension FMSErrorType: Equatable {
    public static func == (lhs: FMSErrorType, rhs: FMSErrorType) -> Bool {
        lhs.error == rhs.error
    }
}

extension FMSErrorType: CustomStringConvertible {
    public var description: String {
        return "\(self.error.rawValue): \(self.message ?? "")"
    }
}
