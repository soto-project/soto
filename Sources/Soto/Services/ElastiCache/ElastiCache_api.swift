//===----------------------------------------------------------------------===//
//
// This source file is part of the Soto for AWS open source project
//
// Copyright (c) 2017-2024 the Soto project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
// See CONTRIBUTORS.txt for the list of Soto project authors
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by https://github.com/soto-project/soto-codegenerator.
// DO NOT EDIT.

#if os(Linux) && compiler(<5.10)
// swift-corelibs-foundation hasn't been updated with Sendable conformances
@preconcurrency import Foundation
#else
import Foundation
#endif
@_exported import SotoCore

/// Service object for interacting with AWS ElastiCache service.
///
/// Amazon ElastiCache Amazon ElastiCache is a web service that makes it easier to set up, operate, and scale a distributed cache in the cloud. With ElastiCache, customers get all of the benefits of a high-performance, in-memory cache with less of the administrative burden involved in launching and managing a distributed cache. The service makes setup, scaling, and cluster failure handling much simpler than in a self-managed cache deployment. In addition, through integration with Amazon CloudWatch, customers get enhanced visibility into the key performance statistics associated with their cache and can receive alarms if a part of their cache runs hot.
public struct ElastiCache: AWSService {
    // MARK: Member variables

    /// Client used for communication with AWS
    public let client: AWSClient
    /// Service configuration
    public let config: AWSServiceConfig

    // MARK: Initialization

    /// Initialize the ElastiCache client
    /// - parameters:
    ///     - client: AWSClient used to process requests
    ///     - region: Region of server you want to communicate with. This will override the partition parameter.
    ///     - partition: AWS partition where service resides, standard (.aws), china (.awscn), government (.awsusgov).
    ///     - endpoint: Custom endpoint URL to use instead of standard AWS servers
    ///     - middleware: Middleware chain used to edit requests before they are sent and responses before they are decoded 
    ///     - timeout: Timeout value for HTTP requests
    ///     - byteBufferAllocator: Allocator for ByteBuffers
    ///     - options: Service options
    public init(
        client: AWSClient,
        region: SotoCore.Region? = nil,
        partition: AWSPartition = .aws,
        endpoint: String? = nil,
        middleware: AWSMiddlewareProtocol? = nil,
        timeout: TimeAmount? = nil,
        byteBufferAllocator: ByteBufferAllocator = ByteBufferAllocator(),
        options: AWSServiceConfig.Options = []
    ) {
        self.client = client
        self.config = AWSServiceConfig(
            region: region,
            partition: region?.partition ?? partition,
            serviceName: "ElastiCache",
            serviceIdentifier: "elasticache",
            serviceProtocol: .query,
            apiVersion: "2015-02-02",
            endpoint: endpoint,
            variantEndpoints: Self.variantEndpoints,
            errorType: ElastiCacheErrorType.self,
            xmlNamespace: "http://elasticache.amazonaws.com/doc/2015-02-02/",
            middleware: middleware,
            timeout: timeout,
            byteBufferAllocator: byteBufferAllocator,
            options: options
        )
    }




    /// FIPS and dualstack endpoints
    static var variantEndpoints: [EndpointVariantType: AWSServiceConfig.EndpointVariant] {[
        [.fips]: .init(endpoints: [
            "us-east-1": "elasticache-fips.us-east-1.amazonaws.com",
            "us-east-2": "elasticache-fips.us-east-2.amazonaws.com",
            "us-gov-east-1": "elasticache.us-gov-east-1.amazonaws.com",
            "us-gov-west-1": "elasticache.us-gov-west-1.amazonaws.com",
            "us-west-1": "elasticache-fips.us-west-1.amazonaws.com",
            "us-west-2": "elasticache-fips.us-west-2.amazonaws.com"
        ])
    ]}

    // MARK: API Calls

    /// A tag is a key-value pair where the key and value are case-sensitive. You can use tags to categorize and track all your ElastiCache resources, with the exception of global replication group. When you add or remove tags on replication groups, those actions will be replicated to all nodes in the replication group. For more information, see Resource-level permissions. For example, you can use cost-allocation tags to your ElastiCache resources, Amazon generates a cost allocation report as a comma-separated value (CSV) file with your usage and costs aggregated by your tags. You can apply tags that represent business categories (such as cost centers, application names, or owners) to organize your costs across multiple services. For more information, see Using Cost Allocation Tags in Amazon ElastiCache in the ElastiCache User Guide.
    @Sendable
    @inlinable
    public func addTagsToResource(_ input: AddTagsToResourceMessage, logger: Logger = AWSClient.loggingDisabled) async throws -> TagListMessage {
        try await self.client.execute(
            operation: "AddTagsToResource", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// A tag is a key-value pair where the key and value are case-sensitive. You can use tags to categorize and track all your ElastiCache resources, with the exception of global replication group. When you add or remove tags on replication groups, those actions will be replicated to all nodes in the replication group. For more information, see Resource-level permissions. For example, you can use cost-allocation tags to your ElastiCache resources, Amazon generates a cost allocation report as a comma-separated value (CSV) file with your usage and costs aggregated by your tags. You can apply tags that represent business categories (such as cost centers, application names, or owners) to organize your costs across multiple services. For more information, see Using Cost Allocation Tags in Amazon ElastiCache in the ElastiCache User Guide.
    ///
    /// Parameters:
    ///   - resourceName: The Amazon Resource Name (ARN) of the resource to which the tags are to be added, for example arn:aws:elasticache:us-west-2:0123456789:cluster:myCluster or arn:aws:elasticache:us-west-2:0123456789:snapshot:mySnapshot. ElastiCache resources are cluster and snapshot. For more information about ARNs, see Amazon Resource Names (ARNs) and Amazon Service Namespaces.
    ///   - tags: A list of tags to be added to this resource. A tag is a key-value pair. A tag key must be accompanied by a tag value, although null is accepted.
    ///   - logger: Logger use during operation
    @inlinable
    public func addTagsToResource(
        resourceName: String? = nil,
        tags: [Tag]? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> TagListMessage {
        let input = AddTagsToResourceMessage(
            resourceName: resourceName, 
            tags: tags
        )
        return try await self.addTagsToResource(input, logger: logger)
    }

    /// Allows network ingress to a cache security group. Applications using ElastiCache must be running on Amazon EC2, and Amazon EC2 security groups are used as the authorization mechanism.  You cannot authorize ingress from an Amazon EC2 security group in one region to an ElastiCache cluster in another region.
    @Sendable
    @inlinable
    public func authorizeCacheSecurityGroupIngress(_ input: AuthorizeCacheSecurityGroupIngressMessage, logger: Logger = AWSClient.loggingDisabled) async throws -> AuthorizeCacheSecurityGroupIngressResult {
        try await self.client.execute(
            operation: "AuthorizeCacheSecurityGroupIngress", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Allows network ingress to a cache security group. Applications using ElastiCache must be running on Amazon EC2, and Amazon EC2 security groups are used as the authorization mechanism.  You cannot authorize ingress from an Amazon EC2 security group in one region to an ElastiCache cluster in another region.
    ///
    /// Parameters:
    ///   - cacheSecurityGroupName: The cache security group that allows network ingress.
    ///   - ec2SecurityGroupName: The Amazon EC2 security group to be authorized for ingress to the cache security group.
    ///   - ec2SecurityGroupOwnerId: The Amazon account number of the Amazon EC2 security group owner. Note that this is not the same thing as an Amazon access key ID - you must provide a valid Amazon account number for this parameter.
    ///   - logger: Logger use during operation
    @inlinable
    public func authorizeCacheSecurityGroupIngress(
        cacheSecurityGroupName: String? = nil,
        ec2SecurityGroupName: String? = nil,
        ec2SecurityGroupOwnerId: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> AuthorizeCacheSecurityGroupIngressResult {
        let input = AuthorizeCacheSecurityGroupIngressMessage(
            cacheSecurityGroupName: cacheSecurityGroupName, 
            ec2SecurityGroupName: ec2SecurityGroupName, 
            ec2SecurityGroupOwnerId: ec2SecurityGroupOwnerId
        )
        return try await self.authorizeCacheSecurityGroupIngress(input, logger: logger)
    }

    /// Apply the service update. For more information on service updates and applying them, see Applying Service Updates.
    @Sendable
    @inlinable
    public func batchApplyUpdateAction(_ input: BatchApplyUpdateActionMessage, logger: Logger = AWSClient.loggingDisabled) async throws -> UpdateActionResultsMessage {
        try await self.client.execute(
            operation: "BatchApplyUpdateAction", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Apply the service update. For more information on service updates and applying them, see Applying Service Updates.
    ///
    /// Parameters:
    ///   - cacheClusterIds: The cache cluster IDs
    ///   - replicationGroupIds: The replication group IDs
    ///   - serviceUpdateName: The unique ID of the service update
    ///   - logger: Logger use during operation
    @inlinable
    public func batchApplyUpdateAction(
        cacheClusterIds: [String]? = nil,
        replicationGroupIds: [String]? = nil,
        serviceUpdateName: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> UpdateActionResultsMessage {
        let input = BatchApplyUpdateActionMessage(
            cacheClusterIds: cacheClusterIds, 
            replicationGroupIds: replicationGroupIds, 
            serviceUpdateName: serviceUpdateName
        )
        return try await self.batchApplyUpdateAction(input, logger: logger)
    }

    /// Stop the service update. For more information on service updates and stopping them, see Stopping Service Updates.
    @Sendable
    @inlinable
    public func batchStopUpdateAction(_ input: BatchStopUpdateActionMessage, logger: Logger = AWSClient.loggingDisabled) async throws -> UpdateActionResultsMessage {
        try await self.client.execute(
            operation: "BatchStopUpdateAction", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Stop the service update. For more information on service updates and stopping them, see Stopping Service Updates.
    ///
    /// Parameters:
    ///   - cacheClusterIds: The cache cluster IDs
    ///   - replicationGroupIds: The replication group IDs
    ///   - serviceUpdateName: The unique ID of the service update
    ///   - logger: Logger use during operation
    @inlinable
    public func batchStopUpdateAction(
        cacheClusterIds: [String]? = nil,
        replicationGroupIds: [String]? = nil,
        serviceUpdateName: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> UpdateActionResultsMessage {
        let input = BatchStopUpdateActionMessage(
            cacheClusterIds: cacheClusterIds, 
            replicationGroupIds: replicationGroupIds, 
            serviceUpdateName: serviceUpdateName
        )
        return try await self.batchStopUpdateAction(input, logger: logger)
    }

    /// Complete the migration of data.
    @Sendable
    @inlinable
    public func completeMigration(_ input: CompleteMigrationMessage, logger: Logger = AWSClient.loggingDisabled) async throws -> CompleteMigrationResponse {
        try await self.client.execute(
            operation: "CompleteMigration", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Complete the migration of data.
    ///
    /// Parameters:
    ///   - force: Forces the migration to stop without ensuring that data is in sync. It is recommended to use this option only to abort the migration and not recommended when application wants to continue migration to ElastiCache.
    ///   - replicationGroupId: The ID of the replication group to which data is being migrated.
    ///   - logger: Logger use during operation
    @inlinable
    public func completeMigration(
        force: Bool? = nil,
        replicationGroupId: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> CompleteMigrationResponse {
        let input = CompleteMigrationMessage(
            force: force, 
            replicationGroupId: replicationGroupId
        )
        return try await self.completeMigration(input, logger: logger)
    }

    /// Creates a copy of an existing serverless cache’s snapshot. Available for Redis OSS and Serverless Memcached only.
    @Sendable
    @inlinable
    public func copyServerlessCacheSnapshot(_ input: CopyServerlessCacheSnapshotRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> CopyServerlessCacheSnapshotResponse {
        try await self.client.execute(
            operation: "CopyServerlessCacheSnapshot", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Creates a copy of an existing serverless cache’s snapshot. Available for Redis OSS and Serverless Memcached only.
    ///
    /// Parameters:
    ///   - kmsKeyId: The identifier of the KMS key used to encrypt the target snapshot. Available for Redis OSS and Serverless Memcached only.
    ///   - sourceServerlessCacheSnapshotName: The identifier of the existing serverless cache’s snapshot to be copied. Available for Redis OSS and Serverless Memcached only.
    ///   - tags: A list of tags to be added to the target snapshot resource. A tag is a key-value pair. Available for Redis OSS and Serverless Memcached only. Default: NULL
    ///   - targetServerlessCacheSnapshotName: The identifier for the snapshot to be created. Available for Redis OSS and Serverless Memcached only.
    ///   - logger: Logger use during operation
    @inlinable
    public func copyServerlessCacheSnapshot(
        kmsKeyId: String? = nil,
        sourceServerlessCacheSnapshotName: String? = nil,
        tags: [Tag]? = nil,
        targetServerlessCacheSnapshotName: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> CopyServerlessCacheSnapshotResponse {
        let input = CopyServerlessCacheSnapshotRequest(
            kmsKeyId: kmsKeyId, 
            sourceServerlessCacheSnapshotName: sourceServerlessCacheSnapshotName, 
            tags: tags, 
            targetServerlessCacheSnapshotName: targetServerlessCacheSnapshotName
        )
        return try await self.copyServerlessCacheSnapshot(input, logger: logger)
    }

    /// Makes a copy of an existing snapshot.  This operation is valid for Redis OSS only.   Users or groups that have permissions to use the CopySnapshot operation can create their own Amazon S3 buckets and copy snapshots to it. To control access to your snapshots, use an IAM policy to control who has the ability to use the CopySnapshot operation. For more information about using IAM to control the use of ElastiCache operations, see Exporting Snapshots and Authentication & Access Control.  You could receive the following error messages.  Error Messages     Error Message: The S3 bucket %s is outside of the region.  Solution: Create an Amazon S3 bucket in the same region as your snapshot. For more information, see Step 1: Create an Amazon S3 Bucket in the ElastiCache User Guide.    Error Message: The S3 bucket %s does not exist.  Solution: Create an Amazon S3 bucket in the same region as your snapshot. For more information, see Step 1: Create an Amazon S3 Bucket in the ElastiCache User Guide.    Error Message: The S3 bucket %s is not owned by the authenticated user.  Solution: Create an Amazon S3 bucket in the same region as your snapshot. For more information, see Step 1: Create an Amazon S3 Bucket in the ElastiCache User Guide.    Error Message: The authenticated user does not have sufficient permissions to perform the desired activity.  Solution: Contact your system administrator to get the needed permissions.    Error Message: The S3 bucket %s already contains an object with key %s.  Solution: Give the TargetSnapshotName a new and unique value. If exporting a snapshot, you could alternatively create a new Amazon S3 bucket and use this same value for TargetSnapshotName.    Error Message:  ElastiCache has not been granted READ permissions %s on the S3 Bucket.  Solution: Add List and Read permissions on the bucket. For more information, see Step 2: Grant ElastiCache Access to Your Amazon S3 Bucket in the ElastiCache User Guide.    Error Message:  ElastiCache has not been granted WRITE permissions %s on the S3 Bucket.  Solution: Add Upload/Delete permissions on the bucket. For more information, see Step 2: Grant ElastiCache Access to Your Amazon S3 Bucket in the ElastiCache User Guide.    Error Message:  ElastiCache has not been granted READ_ACP permissions %s on the S3 Bucket.  Solution: Add View Permissions on the bucket. For more information, see Step 2: Grant ElastiCache Access to Your Amazon S3 Bucket in the ElastiCache User Guide.
    @Sendable
    @inlinable
    public func copySnapshot(_ input: CopySnapshotMessage, logger: Logger = AWSClient.loggingDisabled) async throws -> CopySnapshotResult {
        try await self.client.execute(
            operation: "CopySnapshot", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Makes a copy of an existing snapshot.  This operation is valid for Redis OSS only.   Users or groups that have permissions to use the CopySnapshot operation can create their own Amazon S3 buckets and copy snapshots to it. To control access to your snapshots, use an IAM policy to control who has the ability to use the CopySnapshot operation. For more information about using IAM to control the use of ElastiCache operations, see Exporting Snapshots and Authentication & Access Control.  You could receive the following error messages.  Error Messages     Error Message: The S3 bucket %s is outside of the region.  Solution: Create an Amazon S3 bucket in the same region as your snapshot. For more information, see Step 1: Create an Amazon S3 Bucket in the ElastiCache User Guide.    Error Message: The S3 bucket %s does not exist.  Solution: Create an Amazon S3 bucket in the same region as your snapshot. For more information, see Step 1: Create an Amazon S3 Bucket in the ElastiCache User Guide.    Error Message: The S3 bucket %s is not owned by the authenticated user.  Solution: Create an Amazon S3 bucket in the same region as your snapshot. For more information, see Step 1: Create an Amazon S3 Bucket in the ElastiCache User Guide.    Error Message: The authenticated user does not have sufficient permissions to perform the desired activity.  Solution: Contact your system administrator to get the needed permissions.    Error Message: The S3 bucket %s already contains an object with key %s.  Solution: Give the TargetSnapshotName a new and unique value. If exporting a snapshot, you could alternatively create a new Amazon S3 bucket and use this same value for TargetSnapshotName.    Error Message:  ElastiCache has not been granted READ permissions %s on the S3 Bucket.  Solution: Add List and Read permissions on the bucket. For more information, see Step 2: Grant ElastiCache Access to Your Amazon S3 Bucket in the ElastiCache User Guide.    Error Message:  ElastiCache has not been granted WRITE permissions %s on the S3 Bucket.  Solution: Add Upload/Delete permissions on the bucket. For more information, see Step 2: Grant ElastiCache Access to Your Amazon S3 Bucket in the ElastiCache User Guide.    Error Message:  ElastiCache has not been granted READ_ACP permissions %s on the S3 Bucket.  Solution: Add View Permissions on the bucket. For more information, see Step 2: Grant ElastiCache Access to Your Amazon S3 Bucket in the ElastiCache User Guide.
    ///
    /// Parameters:
    ///   - kmsKeyId: The ID of the KMS key used to encrypt the target snapshot.
    ///   - sourceSnapshotName: The name of an existing snapshot from which to make a copy.
    ///   - tags: A list of tags to be added to this resource. A tag is a key-value pair. A tag key must be accompanied by a tag value, although null is accepted.
    ///   - targetBucket: The Amazon S3 bucket to which the snapshot is exported. This parameter is used only when exporting a snapshot for external access. When using this parameter to export a snapshot, be sure Amazon ElastiCache has the needed permissions to this S3 bucket. For more information, see Step 2: Grant ElastiCache Access to Your Amazon S3 Bucket in the Amazon ElastiCache User Guide. For more information, see Exporting a Snapshot in the Amazon ElastiCache User Guide.
    ///   - targetSnapshotName: A name for the snapshot copy. ElastiCache does not permit overwriting a snapshot, therefore this name must be unique within its context - ElastiCache or an Amazon S3 bucket if exporting.
    ///   - logger: Logger use during operation
    @inlinable
    public func copySnapshot(
        kmsKeyId: String? = nil,
        sourceSnapshotName: String? = nil,
        tags: [Tag]? = nil,
        targetBucket: String? = nil,
        targetSnapshotName: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> CopySnapshotResult {
        let input = CopySnapshotMessage(
            kmsKeyId: kmsKeyId, 
            sourceSnapshotName: sourceSnapshotName, 
            tags: tags, 
            targetBucket: targetBucket, 
            targetSnapshotName: targetSnapshotName
        )
        return try await self.copySnapshot(input, logger: logger)
    }

    /// Creates a cluster. All nodes in the cluster run the same protocol-compliant cache engine software, either Memcached or Redis OSS. This operation is not supported for Redis OSS (cluster mode enabled) clusters.
    @Sendable
    @inlinable
    public func createCacheCluster(_ input: CreateCacheClusterMessage, logger: Logger = AWSClient.loggingDisabled) async throws -> CreateCacheClusterResult {
        try await self.client.execute(
            operation: "CreateCacheCluster", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Creates a cluster. All nodes in the cluster run the same protocol-compliant cache engine software, either Memcached or Redis OSS. This operation is not supported for Redis OSS (cluster mode enabled) clusters.
    ///
    /// Parameters:
    ///   - authToken:  Reserved parameter. The password used to access a password protected server. Password constraints:   Must be only printable ASCII characters.   Must be at least 16 characters and no more than 128 characters in length.   The only permitted printable special characters are !, &, #, $, ^, , and -. Other printable special characters cannot be used in the AUTH token.   For more information, see AUTH password at http://redis.io/commands/AUTH.
    ///   - autoMinorVersionUpgrade:  If you are running Redis OSS engine version 6.0 or later, set this parameter to yes if you want to opt-in to the next auto minor version upgrade campaign. This parameter is disabled for previous versions.
    ///   - azMode: Specifies whether the nodes in this Memcached cluster are created in a single Availability Zone or created across multiple Availability Zones in the cluster's region. This parameter is only supported for Memcached clusters. If the AZMode and PreferredAvailabilityZones are not specified, ElastiCache assumes single-az mode.
    ///   - cacheClusterId: The node group (shard) identifier. This parameter is stored as a lowercase string.  Constraints:    A name must contain from 1 to 50 alphanumeric characters or hyphens.   The first character must be a letter.   A name cannot end with a hyphen or contain two consecutive hyphens.
    ///   - cacheNodeType: The compute and memory capacity of the nodes in the node group (shard). The following node types are supported by ElastiCache. Generally speaking, the current generation types provide more memory and computational power at lower cost when compared to their equivalent previous generation counterparts.   General purpose:   Current generation:   M7g node types: 					cache.m7g.large, 					cache.m7g.xlarge, 					cache.m7g.2xlarge, 					cache.m7g.4xlarge, 					cache.m7g.8xlarge, 					cache.m7g.12xlarge, 					cache.m7g.16xlarge   For region availability, see Supported Node Types    M6g node types (available only for Redis OSS engine version 5.0.6 onward and for Memcached engine version 1.5.16 onward):
    ///   - cacheParameterGroupName: The name of the parameter group to associate with this cluster. If this argument is omitted, the default parameter group for the specified engine is used. You cannot use any parameter group which has cluster-enabled='yes' when creating a cluster.
    ///   - cacheSecurityGroupNames: A list of security group names to associate with this cluster. Use this parameter only when you are creating a cluster outside of an Amazon Virtual Private Cloud (Amazon VPC).
    ///   - cacheSubnetGroupName: The name of the subnet group to be used for the cluster. Use this parameter only when you are creating a cluster in an Amazon Virtual Private Cloud (Amazon VPC).  If you're going to launch your cluster in an Amazon VPC, you need to create a subnet group before you start creating a cluster. For more information, see Subnets and Subnet Groups.
    ///   - engine: The name of the cache engine to be used for this cluster. Valid values for this parameter are: memcached | redis
    ///   - engineVersion: The version number of the cache engine to be used for this cluster. To view the supported cache engine versions, use the DescribeCacheEngineVersions operation.  Important: You can upgrade to a newer engine version (see Selecting a Cache Engine and Version), but you cannot downgrade to an earlier engine version. If you want to use an earlier engine version, you must delete the existing cluster or replication group and create it anew with the earlier engine version.
    ///   - ipDiscovery: The network type you choose when modifying a cluster, either ipv4 | ipv6. IPv6 is supported for workloads using Redis OSS engine version 6.2 onward or Memcached engine version 1.6.6 on all instances built on the Nitro system.
    ///   - logDeliveryConfigurations: Specifies the destination, format and type of the logs.
    ///   - networkType: Must be either ipv4 | ipv6 | dual_stack. IPv6 is supported for workloads using Redis OSS engine version 6.2 onward or Memcached engine version 1.6.6 on all instances built on the Nitro system.
    ///   - notificationTopicArn: The Amazon Resource Name (ARN) of the Amazon Simple Notification Service (SNS) topic to which notifications are sent.  The Amazon SNS topic owner must be the same as the cluster owner.
    ///   - numCacheNodes: The initial number of cache nodes that the cluster has. For clusters running Redis OSS, this value must be 1. For clusters running Memcached, this value must be between 1 and 40. If you need more than 40 nodes for your Memcached cluster, please fill out the ElastiCache Limit Increase Request form at http://aws.amazon.com/contact-us/elasticache-node-limit-request/.
    ///   - outpostMode: Specifies whether the nodes in the cluster are created in a single outpost or across multiple outposts.
    ///   - port: The port number on which each of the cache nodes accepts connections.
    ///   - preferredAvailabilityZone: The EC2 Availability Zone in which the cluster is created. All nodes belonging to this cluster are placed in the preferred Availability Zone. If you want to create your nodes across multiple Availability Zones, use PreferredAvailabilityZones. Default: System chosen Availability Zone.
    ///   - preferredAvailabilityZones: A list of the Availability Zones in which cache nodes are created. The order of the zones in the list is not important. This option is only supported on Memcached.  If you are creating your cluster in an Amazon VPC (recommended) you can only locate nodes in Availability Zones that are associated with the subnets in the selected subnet group. The number of Availability Zones listed must equal the value of NumCacheNodes.  If you want all the nodes in the same Availability Zone, use PreferredAvailabilityZone instead, or repeat the Availability Zone multiple times in the list. Default: System chosen Availability Zones.
    ///   - preferredMaintenanceWindow: Specifies the weekly time range during which maintenance on the cluster is performed. It is specified as a range in the format ddd:hh24:mi-ddd:hh24:mi (24H Clock UTC). The minimum maintenance window is a 60 minute period.
    ///   - preferredOutpostArn: The outpost ARN in which the cache cluster is created.
    ///   - preferredOutpostArns: The outpost ARNs in which the cache cluster is created.
    ///   - replicationGroupId: The ID of the replication group to which this cluster should belong. If this parameter is specified, the cluster is added to the specified replication group as a read replica; otherwise, the cluster is a standalone primary that is not part of any replication group. If the specified replication group is Multi-AZ enabled and the Availability Zone is not specified, the cluster is created in Availability Zones that provide the best spread of read replicas across Availability Zones.  This parameter is only valid if the Engine parameter is redis.
    ///   - securityGroupIds: One or more VPC security groups associated with the cluster. Use this parameter only when you are creating a cluster in an Amazon Virtual Private Cloud (Amazon VPC).
    ///   - snapshotArns: A single-element string list containing an Amazon Resource Name (ARN) that uniquely identifies a Redis OSS RDB snapshot file stored in Amazon S3. The snapshot file is used to populate the node group (shard). The Amazon S3 object name in the ARN cannot contain any commas.  This parameter is only valid if the Engine parameter is redis.  Example of an Amazon S3 ARN: arn:aws:s3:::my_bucket/snapshot1.rdb
    ///   - snapshotName: The name of a Redis OSS snapshot from which to restore data into the new node group (shard). The snapshot status changes to restoring while the new node group (shard) is being created.  This parameter is only valid if the Engine parameter is redis.
    ///   - snapshotRetentionLimit: The number of days for which ElastiCache retains automatic snapshots before deleting them. For example, if you set SnapshotRetentionLimit to 5, a snapshot taken today is retained for 5 days before being deleted.  This parameter is only valid if the Engine parameter is redis.  Default: 0 (i.e., automatic backups are disabled for this cache cluster).
    ///   - snapshotWindow: The daily time range (in UTC) during which ElastiCache begins taking a daily snapshot of your node group (shard). Example: 05:00-09:00  If you do not specify this parameter, ElastiCache automatically chooses an appropriate time range.  This parameter is only valid if the Engine parameter is redis.
    ///   - tags: A list of tags to be added to this resource.
    ///   - transitEncryptionEnabled: A flag that enables in-transit encryption when set to true.
    ///   - logger: Logger use during operation
    @inlinable
    public func createCacheCluster(
        authToken: String? = nil,
        autoMinorVersionUpgrade: Bool? = nil,
        azMode: AZMode? = nil,
        cacheClusterId: String? = nil,
        cacheNodeType: String? = nil,
        cacheParameterGroupName: String? = nil,
        cacheSecurityGroupNames: [String]? = nil,
        cacheSubnetGroupName: String? = nil,
        engine: String? = nil,
        engineVersion: String? = nil,
        ipDiscovery: IpDiscovery? = nil,
        logDeliveryConfigurations: [LogDeliveryConfigurationRequest]? = nil,
        networkType: NetworkType? = nil,
        notificationTopicArn: String? = nil,
        numCacheNodes: Int? = nil,
        outpostMode: OutpostMode? = nil,
        port: Int? = nil,
        preferredAvailabilityZone: String? = nil,
        preferredAvailabilityZones: [String]? = nil,
        preferredMaintenanceWindow: String? = nil,
        preferredOutpostArn: String? = nil,
        preferredOutpostArns: [String]? = nil,
        replicationGroupId: String? = nil,
        securityGroupIds: [String]? = nil,
        snapshotArns: [String]? = nil,
        snapshotName: String? = nil,
        snapshotRetentionLimit: Int? = nil,
        snapshotWindow: String? = nil,
        tags: [Tag]? = nil,
        transitEncryptionEnabled: Bool? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> CreateCacheClusterResult {
        let input = CreateCacheClusterMessage(
            authToken: authToken, 
            autoMinorVersionUpgrade: autoMinorVersionUpgrade, 
            azMode: azMode, 
            cacheClusterId: cacheClusterId, 
            cacheNodeType: cacheNodeType, 
            cacheParameterGroupName: cacheParameterGroupName, 
            cacheSecurityGroupNames: cacheSecurityGroupNames, 
            cacheSubnetGroupName: cacheSubnetGroupName, 
            engine: engine, 
            engineVersion: engineVersion, 
            ipDiscovery: ipDiscovery, 
            logDeliveryConfigurations: logDeliveryConfigurations, 
            networkType: networkType, 
            notificationTopicArn: notificationTopicArn, 
            numCacheNodes: numCacheNodes, 
            outpostMode: outpostMode, 
            port: port, 
            preferredAvailabilityZone: preferredAvailabilityZone, 
            preferredAvailabilityZones: preferredAvailabilityZones, 
            preferredMaintenanceWindow: preferredMaintenanceWindow, 
            preferredOutpostArn: preferredOutpostArn, 
            preferredOutpostArns: preferredOutpostArns, 
            replicationGroupId: replicationGroupId, 
            securityGroupIds: securityGroupIds, 
            snapshotArns: snapshotArns, 
            snapshotName: snapshotName, 
            snapshotRetentionLimit: snapshotRetentionLimit, 
            snapshotWindow: snapshotWindow, 
            tags: tags, 
            transitEncryptionEnabled: transitEncryptionEnabled
        )
        return try await self.createCacheCluster(input, logger: logger)
    }

    /// Creates a new Amazon ElastiCache cache parameter group. An ElastiCache cache parameter group is a collection of parameters and their values that are applied to all of the nodes in any cluster or replication group using the CacheParameterGroup. A newly created CacheParameterGroup is an exact duplicate of the default parameter group for the CacheParameterGroupFamily. To customize the newly created CacheParameterGroup you can change the values of specific parameters. For more information, see:    ModifyCacheParameterGroup in the ElastiCache API Reference.    Parameters and Parameter Groups in the ElastiCache User Guide.
    @Sendable
    @inlinable
    public func createCacheParameterGroup(_ input: CreateCacheParameterGroupMessage, logger: Logger = AWSClient.loggingDisabled) async throws -> CreateCacheParameterGroupResult {
        try await self.client.execute(
            operation: "CreateCacheParameterGroup", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Creates a new Amazon ElastiCache cache parameter group. An ElastiCache cache parameter group is a collection of parameters and their values that are applied to all of the nodes in any cluster or replication group using the CacheParameterGroup. A newly created CacheParameterGroup is an exact duplicate of the default parameter group for the CacheParameterGroupFamily. To customize the newly created CacheParameterGroup you can change the values of specific parameters. For more information, see:    ModifyCacheParameterGroup in the ElastiCache API Reference.    Parameters and Parameter Groups in the ElastiCache User Guide.
    ///
    /// Parameters:
    ///   - cacheParameterGroupFamily: The name of the cache parameter group family that the cache parameter group can be used with. Valid values are: memcached1.4 | memcached1.5 | memcached1.6 | redis2.6 | redis2.8 | redis3.2 | redis4.0 | redis5.0 | redis6.x | redis7
    ///   - cacheParameterGroupName: A user-specified name for the cache parameter group.
    ///   - description: A user-specified description for the cache parameter group.
    ///   - tags: A list of tags to be added to this resource. A tag is a key-value pair. A tag key must be accompanied by a tag value, although null is accepted.
    ///   - logger: Logger use during operation
    @inlinable
    public func createCacheParameterGroup(
        cacheParameterGroupFamily: String? = nil,
        cacheParameterGroupName: String? = nil,
        description: String? = nil,
        tags: [Tag]? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> CreateCacheParameterGroupResult {
        let input = CreateCacheParameterGroupMessage(
            cacheParameterGroupFamily: cacheParameterGroupFamily, 
            cacheParameterGroupName: cacheParameterGroupName, 
            description: description, 
            tags: tags
        )
        return try await self.createCacheParameterGroup(input, logger: logger)
    }

    /// Creates a new cache security group. Use a cache security group to control access to one or more clusters. Cache security groups are only used when you are creating a cluster outside of an Amazon Virtual Private Cloud (Amazon VPC). If you are creating a cluster inside of a VPC, use a cache subnet group instead. For more information, see CreateCacheSubnetGroup.
    @Sendable
    @inlinable
    public func createCacheSecurityGroup(_ input: CreateCacheSecurityGroupMessage, logger: Logger = AWSClient.loggingDisabled) async throws -> CreateCacheSecurityGroupResult {
        try await self.client.execute(
            operation: "CreateCacheSecurityGroup", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Creates a new cache security group. Use a cache security group to control access to one or more clusters. Cache security groups are only used when you are creating a cluster outside of an Amazon Virtual Private Cloud (Amazon VPC). If you are creating a cluster inside of a VPC, use a cache subnet group instead. For more information, see CreateCacheSubnetGroup.
    ///
    /// Parameters:
    ///   - cacheSecurityGroupName: A name for the cache security group. This value is stored as a lowercase string. Constraints: Must contain no more than 255 alphanumeric characters. Cannot be the word "Default". Example: mysecuritygroup
    ///   - description: A description for the cache security group.
    ///   - tags: A list of tags to be added to this resource. A tag is a key-value pair. A tag key must be accompanied by a tag value, although null is accepted.
    ///   - logger: Logger use during operation
    @inlinable
    public func createCacheSecurityGroup(
        cacheSecurityGroupName: String? = nil,
        description: String? = nil,
        tags: [Tag]? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> CreateCacheSecurityGroupResult {
        let input = CreateCacheSecurityGroupMessage(
            cacheSecurityGroupName: cacheSecurityGroupName, 
            description: description, 
            tags: tags
        )
        return try await self.createCacheSecurityGroup(input, logger: logger)
    }

    /// Creates a new cache subnet group. Use this parameter only when you are creating a cluster in an Amazon Virtual Private Cloud (Amazon VPC).
    @Sendable
    @inlinable
    public func createCacheSubnetGroup(_ input: CreateCacheSubnetGroupMessage, logger: Logger = AWSClient.loggingDisabled) async throws -> CreateCacheSubnetGroupResult {
        try await self.client.execute(
            operation: "CreateCacheSubnetGroup", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Creates a new cache subnet group. Use this parameter only when you are creating a cluster in an Amazon Virtual Private Cloud (Amazon VPC).
    ///
    /// Parameters:
    ///   - cacheSubnetGroupDescription: A description for the cache subnet group.
    ///   - cacheSubnetGroupName: A name for the cache subnet group. This value is stored as a lowercase string. Constraints: Must contain no more than 255 alphanumeric characters or hyphens. Example: mysubnetgroup
    ///   - subnetIds: A list of VPC subnet IDs for the cache subnet group.
    ///   - tags: A list of tags to be added to this resource. A tag is a key-value pair. A tag key must be accompanied by a tag value, although null is accepted.
    ///   - logger: Logger use during operation
    @inlinable
    public func createCacheSubnetGroup(
        cacheSubnetGroupDescription: String? = nil,
        cacheSubnetGroupName: String? = nil,
        subnetIds: [String]? = nil,
        tags: [Tag]? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> CreateCacheSubnetGroupResult {
        let input = CreateCacheSubnetGroupMessage(
            cacheSubnetGroupDescription: cacheSubnetGroupDescription, 
            cacheSubnetGroupName: cacheSubnetGroupName, 
            subnetIds: subnetIds, 
            tags: tags
        )
        return try await self.createCacheSubnetGroup(input, logger: logger)
    }

    /// Global Datastore for Redis OSS offers fully managed, fast, reliable and secure cross-region replication. Using Global Datastore for Redis OSS, you can create cross-region read replica clusters for ElastiCache (Redis OSS) to enable low-latency reads and disaster recovery across regions. For more information, see Replication Across Regions Using Global Datastore.    The GlobalReplicationGroupIdSuffix is the name of the Global datastore.   The PrimaryReplicationGroupId represents the name of the primary cluster that accepts writes and will replicate updates to the secondary cluster.
    @Sendable
    @inlinable
    public func createGlobalReplicationGroup(_ input: CreateGlobalReplicationGroupMessage, logger: Logger = AWSClient.loggingDisabled) async throws -> CreateGlobalReplicationGroupResult {
        try await self.client.execute(
            operation: "CreateGlobalReplicationGroup", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Global Datastore for Redis OSS offers fully managed, fast, reliable and secure cross-region replication. Using Global Datastore for Redis OSS, you can create cross-region read replica clusters for ElastiCache (Redis OSS) to enable low-latency reads and disaster recovery across regions. For more information, see Replication Across Regions Using Global Datastore.    The GlobalReplicationGroupIdSuffix is the name of the Global datastore.   The PrimaryReplicationGroupId represents the name of the primary cluster that accepts writes and will replicate updates to the secondary cluster.
    ///
    /// Parameters:
    ///   - globalReplicationGroupDescription: Provides details of the Global datastore
    ///   - globalReplicationGroupIdSuffix: The suffix name of a Global datastore. Amazon ElastiCache automatically applies a prefix to the Global datastore ID when it is created. Each Amazon Region has its own prefix. For instance, a Global datastore ID created in the US-West-1 region will begin with "dsdfu" along with the suffix name you provide. The suffix, combined with the auto-generated prefix, guarantees uniqueness of the Global datastore name across multiple regions.  For a full list of Amazon Regions and their respective Global datastore iD prefixes, see Using the Amazon CLI with Global datastores .
    ///   - primaryReplicationGroupId: The name of the primary cluster that accepts writes and will replicate updates to the secondary cluster.
    ///   - logger: Logger use during operation
    @inlinable
    public func createGlobalReplicationGroup(
        globalReplicationGroupDescription: String? = nil,
        globalReplicationGroupIdSuffix: String? = nil,
        primaryReplicationGroupId: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> CreateGlobalReplicationGroupResult {
        let input = CreateGlobalReplicationGroupMessage(
            globalReplicationGroupDescription: globalReplicationGroupDescription, 
            globalReplicationGroupIdSuffix: globalReplicationGroupIdSuffix, 
            primaryReplicationGroupId: primaryReplicationGroupId
        )
        return try await self.createGlobalReplicationGroup(input, logger: logger)
    }

    /// Creates a Redis OSS (cluster mode disabled) or a Redis OSS (cluster mode enabled) replication group. This API can be used to create a standalone regional replication group or a secondary replication group associated with a Global datastore. A Redis OSS (cluster mode disabled) replication group is a collection of nodes, where one of the nodes is a read/write primary and the others are read-only replicas. Writes to the primary are asynchronously propagated to the replicas. A Redis OSS cluster-mode enabled cluster is comprised of from 1 to 90 shards (API/CLI: node groups). Each shard has a primary node and up to 5 read-only replica nodes. The configuration can range from 90 shards and 0 replicas to 15 shards and 5 replicas, which is the maximum number or replicas allowed.  The node or shard limit can be increased to a maximum of 500 per cluster if the Redis OSS  engine version is 5.0.6 or higher. For example, you can choose to configure a 500 node cluster that ranges between 83 shards (one primary and 5 replicas per shard) and 500 shards (single primary and no replicas). Make sure there are enough available IP addresses to accommodate the increase. Common pitfalls include the subnets in the subnet group have too small a CIDR range or the subnets are shared and heavily used by other clusters. For more information, see Creating a Subnet Group. For versions below 5.0.6, the limit is 250 per cluster. To request a limit increase, see Amazon Service Limits and choose the limit type Nodes per cluster per instance type.  When a Redis OSS (cluster mode disabled) replication group has been successfully created, you can add one or more read replicas to it, up to a total of 5 read replicas. If you need to increase or decrease the number of node groups (console: shards), you can use ElastiCache (Redis OSS) scaling.  For more information, see Scaling ElastiCache (Redis OSS) Clusters in the ElastiCache User Guide.  This operation is valid for Redis OSS only.
    @Sendable
    @inlinable
    public func createReplicationGroup(_ input: CreateReplicationGroupMessage, logger: Logger = AWSClient.loggingDisabled) async throws -> CreateReplicationGroupResult {
        try await self.client.execute(
            operation: "CreateReplicationGroup", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Creates a Redis OSS (cluster mode disabled) or a Redis OSS (cluster mode enabled) replication group. This API can be used to create a standalone regional replication group or a secondary replication group associated with a Global datastore. A Redis OSS (cluster mode disabled) replication group is a collection of nodes, where one of the nodes is a read/write primary and the others are read-only replicas. Writes to the primary are asynchronously propagated to the replicas. A Redis OSS cluster-mode enabled cluster is comprised of from 1 to 90 shards (API/CLI: node groups). Each shard has a primary node and up to 5 read-only replica nodes. The configuration can range from 90 shards and 0 replicas to 15 shards and 5 replicas, which is the maximum number or replicas allowed.  The node or shard limit can be increased to a maximum of 500 per cluster if the Redis OSS  engine version is 5.0.6 or higher. For example, you can choose to configure a 500 node cluster that ranges between 83 shards (one primary and 5 replicas per shard) and 500 shards (single primary and no replicas). Make sure there are enough available IP addresses to accommodate the increase. Common pitfalls include the subnets in the subnet group have too small a CIDR range or the subnets are shared and heavily used by other clusters. For more information, see Creating a Subnet Group. For versions below 5.0.6, the limit is 250 per cluster. To request a limit increase, see Amazon Service Limits and choose the limit type Nodes per cluster per instance type.  When a Redis OSS (cluster mode disabled) replication group has been successfully created, you can add one or more read replicas to it, up to a total of 5 read replicas. If you need to increase or decrease the number of node groups (console: shards), you can use ElastiCache (Redis OSS) scaling.  For more information, see Scaling ElastiCache (Redis OSS) Clusters in the ElastiCache User Guide.  This operation is valid for Redis OSS only.
    ///
    /// Parameters:
    ///   - atRestEncryptionEnabled: A flag that enables encryption at rest when set to true. You cannot modify the value of AtRestEncryptionEnabled after the replication group is created. To enable encryption at rest on a replication group you must set AtRestEncryptionEnabled to true when you create the replication group.   Required: Only available when creating a replication group in an Amazon VPC using Redis OSS version 3.2.6, 4.x or later. Default: false
    ///   - authToken:  Reserved parameter. The password used to access a password protected server.  AuthToken can be specified only on replication groups where TransitEncryptionEnabled is true.  For HIPAA compliance, you must specify TransitEncryptionEnabled as true, an AuthToken, and a CacheSubnetGroup.  Password constraints:   Must be only printable ASCII characters.   Must be at least 16 characters and no more than 128 characters in length.   The only permitted printable special characters are !, &, #, $, ^, , and -. Other printable special characters cannot be used in the AUTH token.   For more information, see AUTH password at http://redis.io/commands/AUTH.
    ///   - automaticFailoverEnabled: Specifies whether a read-only replica is automatically promoted to read/write primary if the existing primary fails.  AutomaticFailoverEnabled must be enabled for Redis OSS (cluster mode enabled) replication groups. Default: false
    ///   - autoMinorVersionUpgrade:  If you are running Redis OSS engine version 6.0 or later, set this parameter to yes if you want to opt-in to the next auto minor version upgrade campaign. This parameter is disabled for previous versions.
    ///   - cacheNodeType: The compute and memory capacity of the nodes in the node group (shard). The following node types are supported by ElastiCache. Generally speaking, the current generation types provide more memory and computational power at lower cost when compared to their equivalent previous generation counterparts.   General purpose:   Current generation:   M7g node types: 					cache.m7g.large, 					cache.m7g.xlarge, 					cache.m7g.2xlarge, 					cache.m7g.4xlarge, 					cache.m7g.8xlarge, 					cache.m7g.12xlarge, 					cache.m7g.16xlarge   For region availability, see Supported Node Types    M6g node types (available only for Redis OSS engine version 5.0.6 onward and for Memcached engine version 1.5.16 onward):
    ///   - cacheParameterGroupName: The name of the parameter group to associate with this replication group. If this argument is omitted, the default cache parameter group for the specified engine is used. If you are running Redis OSS version 3.2.4 or later, only one node group (shard), and want to use a default parameter group, we recommend that you specify the parameter group by name.    To create a Redis OSS (cluster mode disabled) replication group, use CacheParameterGroupName=default.redis3.2.   To create a Redis OSS (cluster mode enabled) replication group, use CacheParameterGroupName=default.redis3.2.cluster.on.
    ///   - cacheSecurityGroupNames: A list of cache security group names to associate with this replication group.
    ///   - cacheSubnetGroupName: The name of the cache subnet group to be used for the replication group.  If you're going to launch your cluster in an Amazon VPC, you need to create a subnet group before you start creating a cluster. For more information, see Subnets and Subnet Groups.
    ///   - clusterMode: Enabled or Disabled. To modify cluster mode from Disabled to Enabled, you must first set the cluster mode to Compatible. Compatible mode allows your Redis OSS clients to connect using both cluster mode enabled and cluster mode disabled. After you migrate all Redis OSS  clients to use cluster mode enabled, you can then complete cluster mode configuration and set the cluster mode to Enabled.
    ///   - dataTieringEnabled: Enables data tiering. Data tiering is only supported for replication groups using the r6gd node type. This parameter must be set to true when using r6gd nodes. For more information, see Data tiering.
    ///   - engine: The name of the cache engine to be used for the clusters in this replication group. The value must be set to Redis.
    ///   - engineVersion: The version number of the cache engine to be used for the clusters in this replication group. To view the supported cache engine versions, use the DescribeCacheEngineVersions operation.  Important: You can upgrade to a newer engine version (see Selecting a Cache Engine and Version) in the ElastiCache User Guide, but you cannot downgrade to an earlier engine version. If you want to use an earlier engine version, you must delete the existing cluster or replication group and create it anew with the earlier engine version.
    ///   - globalReplicationGroupId: The name of the Global datastore
    ///   - ipDiscovery: The network type you choose when creating a replication group, either ipv4 | ipv6. IPv6 is supported for workloads using Redis OSS engine version 6.2 onward or Memcached engine version 1.6.6 on all instances built on the Nitro system.
    ///   - kmsKeyId: The ID of the KMS key used to encrypt the disk in the cluster.
    ///   - logDeliveryConfigurations: Specifies the destination, format and type of the logs.
    ///   - multiAZEnabled: A flag indicating if you have Multi-AZ enabled to enhance fault tolerance. For more information, see Minimizing Downtime: Multi-AZ.
    ///   - networkType: Must be either ipv4 | ipv6 | dual_stack. IPv6 is supported for workloads using Redis OSS engine version 6.2 onward or Memcached engine version 1.6.6 on all instances built on the Nitro system.
    ///   - nodeGroupConfiguration: A list of node group (shard) configuration options. Each node group (shard) configuration has the following members: PrimaryAvailabilityZone, ReplicaAvailabilityZones, ReplicaCount, and Slots. If you're creating a Redis OSS (cluster mode disabled) or a Redis OSS (cluster mode enabled) replication group, you can use this parameter to individually configure each node group (shard), or you can omit this parameter. However, it is required when seeding a Redis OSS (cluster mode enabled) cluster from a S3 rdb file. You must configure each node group (shard) using this parameter because you must specify the slots for each node group.
    ///   - notificationTopicArn: The Amazon Resource Name (ARN) of the Amazon Simple Notification Service (SNS) topic to which notifications are sent.  The Amazon SNS topic owner must be the same as the cluster owner.
    ///   - numCacheClusters: The number of clusters this replication group initially has. This parameter is not used if there is more than one node group (shard). You should use ReplicasPerNodeGroup instead. If AutomaticFailoverEnabled is true, the value of this parameter must be at least 2. If AutomaticFailoverEnabled is false you can omit this parameter (it will default to 1), or you can explicitly set it to a value between 2 and 6. The maximum permitted value for NumCacheClusters is 6 (1 primary plus 5 replicas).
    ///   - numNodeGroups: An optional parameter that specifies the number of node groups (shards) for this Redis OSS (cluster mode enabled) replication group. For Redis OSS (cluster mode disabled) either omit this parameter or set it to 1. Default: 1
    ///   - port: The port number on which each member of the replication group accepts connections.
    ///   - preferredCacheClusterAZs: A list of EC2 Availability Zones in which the replication group's clusters are created. The order of the Availability Zones in the list is the order in which clusters are allocated. The primary cluster is created in the first AZ in the list. This parameter is not used if there is more than one node group (shard). You should use NodeGroupConfiguration instead.  If you are creating your replication group in an Amazon VPC (recommended), you can only locate clusters in Availability Zones associated with the subnets in the selected subnet group. The number of Availability Zones listed must equal the value of NumCacheClusters.  Default: system chosen Availability Zones.
    ///   - preferredMaintenanceWindow: Specifies the weekly time range during which maintenance on the cluster is performed. It is specified as a range in the format ddd:hh24:mi-ddd:hh24:mi (24H Clock UTC). The minimum maintenance window is a 60 minute period. Valid values for ddd are:    sun     mon     tue     wed     thu     fri     sat    Example: sun:23:00-mon:01:30
    ///   - primaryClusterId: The identifier of the cluster that serves as the primary for this replication group. This cluster must already exist and have a status of available. This parameter is not required if NumCacheClusters, NumNodeGroups, or ReplicasPerNodeGroup is specified.
    ///   - replicasPerNodeGroup: An optional parameter that specifies the number of replica nodes in each node group (shard). Valid values are 0 to 5.
    ///   - replicationGroupDescription: A user-created description for the replication group.
    ///   - replicationGroupId: The replication group identifier. This parameter is stored as a lowercase string. Constraints:   A name must contain from 1 to 40 alphanumeric characters or hyphens.   The first character must be a letter.   A name cannot end with a hyphen or contain two consecutive hyphens.
    ///   - securityGroupIds: One or more Amazon VPC security groups associated with this replication group. Use this parameter only when you are creating a replication group in an Amazon Virtual Private Cloud (Amazon VPC).
    ///   - serverlessCacheSnapshotName: The name of the snapshot used to create a replication group. Available for Redis OSS only.
    ///   - snapshotArns: A list of Amazon Resource Names (ARN) that uniquely identify the Redis OSS RDB snapshot files stored in Amazon S3. The snapshot files are used to populate the new replication group. The Amazon S3 object name in the ARN cannot contain any commas. The new replication group will have the number of node groups (console: shards) specified by the parameter NumNodeGroups or the number of node groups configured by NodeGroupConfiguration regardless of the number of ARNs specified here. Example of an Amazon S3 ARN: arn:aws:s3:::my_bucket/snapshot1.rdb
    ///   - snapshotName: The name of a snapshot from which to restore data into the new replication group. The snapshot status changes to restoring while the new replication group is being created.
    ///   - snapshotRetentionLimit: The number of days for which ElastiCache retains automatic snapshots before deleting them. For example, if you set SnapshotRetentionLimit to 5, a snapshot that was taken today is retained for 5 days before being deleted. Default: 0 (i.e., automatic backups are disabled for this cluster).
    ///   - snapshotWindow: The daily time range (in UTC) during which ElastiCache begins taking a daily snapshot of your node group (shard). Example: 05:00-09:00  If you do not specify this parameter, ElastiCache automatically chooses an appropriate time range.
    ///   - tags: A list of tags to be added to this resource. Tags are comma-separated key,value pairs (e.g. Key=myKey, Value=myKeyValue. You can include multiple tags as shown following: Key=myKey, Value=myKeyValue Key=mySecondKey, Value=mySecondKeyValue. Tags on replication groups will be replicated to all nodes.
    ///   - transitEncryptionEnabled: A flag that enables in-transit encryption when set to true. This parameter is valid only if the Engine parameter is redis, the EngineVersion parameter is 3.2.6, 4.x or later, and the cluster is being created in an Amazon VPC. If you enable in-transit encryption, you must also specify a value for CacheSubnetGroup.  Required: Only available when creating a replication group in an Amazon VPC using Redis OSS version 3.2.6, 4.x or later. Default: false   For HIPAA compliance, you must specify TransitEncryptionEnabled as true, an AuthToken, and a CacheSubnetGroup.
    ///   - transitEncryptionMode: A setting that allows you to migrate your clients to use in-transit encryption, with no downtime. When setting TransitEncryptionEnabled to true, you can set your TransitEncryptionMode to preferred in the same request, to allow both encrypted and unencrypted connections at the same time. Once you migrate all your Redis OSS clients to use encrypted connections you can modify the value to required to allow encrypted connections only. Setting TransitEncryptionMode to required is a two-step process that requires you to first set the TransitEncryptionMode to preferred, after that you can set TransitEncryptionMode to required. This process will not trigger the replacement of the replication group.
    ///   - userGroupIds: The user group to associate with the replication group.
    ///   - logger: Logger use during operation
    @inlinable
    public func createReplicationGroup(
        atRestEncryptionEnabled: Bool? = nil,
        authToken: String? = nil,
        automaticFailoverEnabled: Bool? = nil,
        autoMinorVersionUpgrade: Bool? = nil,
        cacheNodeType: String? = nil,
        cacheParameterGroupName: String? = nil,
        cacheSecurityGroupNames: [String]? = nil,
        cacheSubnetGroupName: String? = nil,
        clusterMode: ClusterMode? = nil,
        dataTieringEnabled: Bool? = nil,
        engine: String? = nil,
        engineVersion: String? = nil,
        globalReplicationGroupId: String? = nil,
        ipDiscovery: IpDiscovery? = nil,
        kmsKeyId: String? = nil,
        logDeliveryConfigurations: [LogDeliveryConfigurationRequest]? = nil,
        multiAZEnabled: Bool? = nil,
        networkType: NetworkType? = nil,
        nodeGroupConfiguration: [NodeGroupConfiguration]? = nil,
        notificationTopicArn: String? = nil,
        numCacheClusters: Int? = nil,
        numNodeGroups: Int? = nil,
        port: Int? = nil,
        preferredCacheClusterAZs: [String]? = nil,
        preferredMaintenanceWindow: String? = nil,
        primaryClusterId: String? = nil,
        replicasPerNodeGroup: Int? = nil,
        replicationGroupDescription: String? = nil,
        replicationGroupId: String? = nil,
        securityGroupIds: [String]? = nil,
        serverlessCacheSnapshotName: String? = nil,
        snapshotArns: [String]? = nil,
        snapshotName: String? = nil,
        snapshotRetentionLimit: Int? = nil,
        snapshotWindow: String? = nil,
        tags: [Tag]? = nil,
        transitEncryptionEnabled: Bool? = nil,
        transitEncryptionMode: TransitEncryptionMode? = nil,
        userGroupIds: [String]? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> CreateReplicationGroupResult {
        let input = CreateReplicationGroupMessage(
            atRestEncryptionEnabled: atRestEncryptionEnabled, 
            authToken: authToken, 
            automaticFailoverEnabled: automaticFailoverEnabled, 
            autoMinorVersionUpgrade: autoMinorVersionUpgrade, 
            cacheNodeType: cacheNodeType, 
            cacheParameterGroupName: cacheParameterGroupName, 
            cacheSecurityGroupNames: cacheSecurityGroupNames, 
            cacheSubnetGroupName: cacheSubnetGroupName, 
            clusterMode: clusterMode, 
            dataTieringEnabled: dataTieringEnabled, 
            engine: engine, 
            engineVersion: engineVersion, 
            globalReplicationGroupId: globalReplicationGroupId, 
            ipDiscovery: ipDiscovery, 
            kmsKeyId: kmsKeyId, 
            logDeliveryConfigurations: logDeliveryConfigurations, 
            multiAZEnabled: multiAZEnabled, 
            networkType: networkType, 
            nodeGroupConfiguration: nodeGroupConfiguration, 
            notificationTopicArn: notificationTopicArn, 
            numCacheClusters: numCacheClusters, 
            numNodeGroups: numNodeGroups, 
            port: port, 
            preferredCacheClusterAZs: preferredCacheClusterAZs, 
            preferredMaintenanceWindow: preferredMaintenanceWindow, 
            primaryClusterId: primaryClusterId, 
            replicasPerNodeGroup: replicasPerNodeGroup, 
            replicationGroupDescription: replicationGroupDescription, 
            replicationGroupId: replicationGroupId, 
            securityGroupIds: securityGroupIds, 
            serverlessCacheSnapshotName: serverlessCacheSnapshotName, 
            snapshotArns: snapshotArns, 
            snapshotName: snapshotName, 
            snapshotRetentionLimit: snapshotRetentionLimit, 
            snapshotWindow: snapshotWindow, 
            tags: tags, 
            transitEncryptionEnabled: transitEncryptionEnabled, 
            transitEncryptionMode: transitEncryptionMode, 
            userGroupIds: userGroupIds
        )
        return try await self.createReplicationGroup(input, logger: logger)
    }

    /// Creates a serverless cache.
    @Sendable
    @inlinable
    public func createServerlessCache(_ input: CreateServerlessCacheRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> CreateServerlessCacheResponse {
        try await self.client.execute(
            operation: "CreateServerlessCache", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Creates a serverless cache.
    ///
    /// Parameters:
    ///   - cacheUsageLimits: Sets the cache usage limits for storage and ElastiCache Processing Units for the cache.
    ///   - dailySnapshotTime: The daily time that snapshots will be created from the new serverless cache. By default this number is populated with  0, i.e. no snapshots will be created on an automatic daily basis. Available for Redis OSS and Serverless Memcached only.
    ///   - description: User-provided description for the serverless cache.   The default is NULL, i.e. if no description is provided then an empty string will be returned.  The maximum length is 255 characters.
    ///   - engine: The name of the cache engine to be used for creating the serverless cache.
    ///   - kmsKeyId: ARN of the customer managed key for encrypting the data at rest. If no KMS key is provided, a default service key is used.
    ///   - majorEngineVersion: The version of the cache engine that will be used to create the serverless cache.
    ///   - securityGroupIds: A list of the one or more VPC security groups to be associated with the serverless cache.  The security group will authorize traffic access for the VPC end-point (private-link).  If no other information is given this will be the VPC’s Default Security Group that is associated with the cluster VPC  end-point.
    ///   - serverlessCacheName: User-provided identifier for the serverless cache. This parameter is stored as a lowercase string.
    ///   - snapshotArnsToRestore: The ARN(s) of the snapshot that the new serverless cache will be created from. Available for Redis OSS and Serverless Memcached only.
    ///   - snapshotRetentionLimit: The number of snapshots that will be retained for the serverless cache that is being created.  As new snapshots beyond this limit are added, the oldest snapshots will be deleted on a rolling basis. Available for Redis OSS and Serverless Memcached only.
    ///   - subnetIds: A list of the identifiers of the subnets where the VPC endpoint for the serverless cache will be deployed.  All the subnetIds must belong to the same VPC.
    ///   - tags: The list of tags (key, value) pairs to be added to the serverless cache resource. Default is NULL.
    ///   - userGroupId: The identifier of the UserGroup to be associated with the serverless cache.  Available for Redis OSS only. Default is NULL.
    ///   - logger: Logger use during operation
    @inlinable
    public func createServerlessCache(
        cacheUsageLimits: CacheUsageLimits? = nil,
        dailySnapshotTime: String? = nil,
        description: String? = nil,
        engine: String? = nil,
        kmsKeyId: String? = nil,
        majorEngineVersion: String? = nil,
        securityGroupIds: [String]? = nil,
        serverlessCacheName: String? = nil,
        snapshotArnsToRestore: [String]? = nil,
        snapshotRetentionLimit: Int? = nil,
        subnetIds: [String]? = nil,
        tags: [Tag]? = nil,
        userGroupId: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> CreateServerlessCacheResponse {
        let input = CreateServerlessCacheRequest(
            cacheUsageLimits: cacheUsageLimits, 
            dailySnapshotTime: dailySnapshotTime, 
            description: description, 
            engine: engine, 
            kmsKeyId: kmsKeyId, 
            majorEngineVersion: majorEngineVersion, 
            securityGroupIds: securityGroupIds, 
            serverlessCacheName: serverlessCacheName, 
            snapshotArnsToRestore: snapshotArnsToRestore, 
            snapshotRetentionLimit: snapshotRetentionLimit, 
            subnetIds: subnetIds, 
            tags: tags, 
            userGroupId: userGroupId
        )
        return try await self.createServerlessCache(input, logger: logger)
    }

    /// This API creates a copy of an entire ServerlessCache at a specific moment in time. Available for Redis OSS and Serverless Memcached only.
    @Sendable
    @inlinable
    public func createServerlessCacheSnapshot(_ input: CreateServerlessCacheSnapshotRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> CreateServerlessCacheSnapshotResponse {
        try await self.client.execute(
            operation: "CreateServerlessCacheSnapshot", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// This API creates a copy of an entire ServerlessCache at a specific moment in time. Available for Redis OSS and Serverless Memcached only.
    ///
    /// Parameters:
    ///   - kmsKeyId: The ID of the KMS key used to encrypt the snapshot.  Available for Redis OSS and Serverless Memcached only. Default: NULL
    ///   - serverlessCacheName: The name of an existing serverless cache. The snapshot is created from this cache. Available for Redis OSS and Serverless Memcached only.
    ///   - serverlessCacheSnapshotName: The name for the snapshot being created. Must be unique for the customer account. Available for Redis OSS and Serverless Memcached only. Must be between 1 and 255 characters.
    ///   - tags: A list of tags to be added to the snapshot resource. A tag is a key-value pair. Available for Redis OSS and Serverless Memcached only.
    ///   - logger: Logger use during operation
    @inlinable
    public func createServerlessCacheSnapshot(
        kmsKeyId: String? = nil,
        serverlessCacheName: String? = nil,
        serverlessCacheSnapshotName: String? = nil,
        tags: [Tag]? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> CreateServerlessCacheSnapshotResponse {
        let input = CreateServerlessCacheSnapshotRequest(
            kmsKeyId: kmsKeyId, 
            serverlessCacheName: serverlessCacheName, 
            serverlessCacheSnapshotName: serverlessCacheSnapshotName, 
            tags: tags
        )
        return try await self.createServerlessCacheSnapshot(input, logger: logger)
    }

    /// Creates a copy of an entire cluster or replication group at a specific moment in time.  This operation is valid for Redis OSS only.
    @Sendable
    @inlinable
    public func createSnapshot(_ input: CreateSnapshotMessage, logger: Logger = AWSClient.loggingDisabled) async throws -> CreateSnapshotResult {
        try await self.client.execute(
            operation: "CreateSnapshot", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Creates a copy of an entire cluster or replication group at a specific moment in time.  This operation is valid for Redis OSS only.
    ///
    /// Parameters:
    ///   - cacheClusterId: The identifier of an existing cluster. The snapshot is created from this cluster.
    ///   - kmsKeyId: The ID of the KMS key used to encrypt the snapshot.
    ///   - replicationGroupId: The identifier of an existing replication group. The snapshot is created from this replication group.
    ///   - snapshotName: A name for the snapshot being created.
    ///   - tags: A list of tags to be added to this resource. A tag is a key-value pair. A tag key must be accompanied by a tag value, although null is accepted.
    ///   - logger: Logger use during operation
    @inlinable
    public func createSnapshot(
        cacheClusterId: String? = nil,
        kmsKeyId: String? = nil,
        replicationGroupId: String? = nil,
        snapshotName: String? = nil,
        tags: [Tag]? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> CreateSnapshotResult {
        let input = CreateSnapshotMessage(
            cacheClusterId: cacheClusterId, 
            kmsKeyId: kmsKeyId, 
            replicationGroupId: replicationGroupId, 
            snapshotName: snapshotName, 
            tags: tags
        )
        return try await self.createSnapshot(input, logger: logger)
    }

    /// For Redis OSS engine version 6.0 onwards: Creates a Redis OSS user. For more information, see Using Role Based Access Control (RBAC).
    @Sendable
    @inlinable
    public func createUser(_ input: CreateUserMessage, logger: Logger = AWSClient.loggingDisabled) async throws -> User {
        try await self.client.execute(
            operation: "CreateUser", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// For Redis OSS engine version 6.0 onwards: Creates a Redis OSS user. For more information, see Using Role Based Access Control (RBAC).
    ///
    /// Parameters:
    ///   - accessString: Access permissions string used for this user.
    ///   - authenticationMode: Specifies how to authenticate the user.
    ///   - engine: The current supported value is Redis.
    ///   - noPasswordRequired: Indicates a password is not required for this user.
    ///   - passwords: Passwords used for this user. You can create up to two passwords for each user.
    ///   - tags: A list of tags to be added to this resource. A tag is a key-value pair. A tag key must be accompanied by a tag value, although null is accepted.
    ///   - userId: The ID of the user.
    ///   - userName: The username of the user.
    ///   - logger: Logger use during operation
    @inlinable
    public func createUser(
        accessString: String? = nil,
        authenticationMode: AuthenticationMode? = nil,
        engine: String? = nil,
        noPasswordRequired: Bool? = nil,
        passwords: [String]? = nil,
        tags: [Tag]? = nil,
        userId: String? = nil,
        userName: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> User {
        let input = CreateUserMessage(
            accessString: accessString, 
            authenticationMode: authenticationMode, 
            engine: engine, 
            noPasswordRequired: noPasswordRequired, 
            passwords: passwords, 
            tags: tags, 
            userId: userId, 
            userName: userName
        )
        return try await self.createUser(input, logger: logger)
    }

    /// For Redis OSS engine version 6.0 onwards: Creates a Redis OSS user group. For more information, see Using Role Based Access Control (RBAC)
    @Sendable
    @inlinable
    public func createUserGroup(_ input: CreateUserGroupMessage, logger: Logger = AWSClient.loggingDisabled) async throws -> UserGroup {
        try await self.client.execute(
            operation: "CreateUserGroup", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// For Redis OSS engine version 6.0 onwards: Creates a Redis OSS user group. For more information, see Using Role Based Access Control (RBAC)
    ///
    /// Parameters:
    ///   - engine: The current supported value is Redis user.
    ///   - tags: A list of tags to be added to this resource. A tag is a key-value pair. A tag key must be accompanied by a tag value, although null is accepted. Available for Redis OSS only.
    ///   - userGroupId: The ID of the user group.
    ///   - userIds: The list of user IDs that belong to the user group.
    ///   - logger: Logger use during operation
    @inlinable
    public func createUserGroup(
        engine: String? = nil,
        tags: [Tag]? = nil,
        userGroupId: String? = nil,
        userIds: [String]? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> UserGroup {
        let input = CreateUserGroupMessage(
            engine: engine, 
            tags: tags, 
            userGroupId: userGroupId, 
            userIds: userIds
        )
        return try await self.createUserGroup(input, logger: logger)
    }

    /// Decreases the number of node groups in a Global datastore
    @Sendable
    @inlinable
    public func decreaseNodeGroupsInGlobalReplicationGroup(_ input: DecreaseNodeGroupsInGlobalReplicationGroupMessage, logger: Logger = AWSClient.loggingDisabled) async throws -> DecreaseNodeGroupsInGlobalReplicationGroupResult {
        try await self.client.execute(
            operation: "DecreaseNodeGroupsInGlobalReplicationGroup", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Decreases the number of node groups in a Global datastore
    ///
    /// Parameters:
    ///   - applyImmediately: Indicates that the shard reconfiguration process begins immediately. At present, the only permitted value for this parameter is true.
    ///   - globalNodeGroupsToRemove: If the value of NodeGroupCount is less than the current number of node groups (shards), then either NodeGroupsToRemove or NodeGroupsToRetain is required. GlobalNodeGroupsToRemove is a list of NodeGroupIds to remove from the cluster. ElastiCache (Redis OSS) will attempt to remove all node groups listed by GlobalNodeGroupsToRemove from the cluster.
    ///   - globalNodeGroupsToRetain: If the value of NodeGroupCount is less than the current number of node groups (shards), then either NodeGroupsToRemove or NodeGroupsToRetain is required. GlobalNodeGroupsToRetain is a list of NodeGroupIds to retain from the cluster. ElastiCache (Redis OSS) will attempt to retain all node groups listed by GlobalNodeGroupsToRetain from the cluster.
    ///   - globalReplicationGroupId: The name of the Global datastore
    ///   - nodeGroupCount: The number of node groups (shards) that results from the modification of the shard configuration
    ///   - logger: Logger use during operation
    @inlinable
    public func decreaseNodeGroupsInGlobalReplicationGroup(
        applyImmediately: Bool? = nil,
        globalNodeGroupsToRemove: [String]? = nil,
        globalNodeGroupsToRetain: [String]? = nil,
        globalReplicationGroupId: String? = nil,
        nodeGroupCount: Int? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> DecreaseNodeGroupsInGlobalReplicationGroupResult {
        let input = DecreaseNodeGroupsInGlobalReplicationGroupMessage(
            applyImmediately: applyImmediately, 
            globalNodeGroupsToRemove: globalNodeGroupsToRemove, 
            globalNodeGroupsToRetain: globalNodeGroupsToRetain, 
            globalReplicationGroupId: globalReplicationGroupId, 
            nodeGroupCount: nodeGroupCount
        )
        return try await self.decreaseNodeGroupsInGlobalReplicationGroup(input, logger: logger)
    }

    /// Dynamically decreases the number of replicas in a Redis OSS (cluster mode disabled) replication group or the number of replica nodes in one or more node groups (shards) of a Redis OSS (cluster mode enabled) replication group. This operation is performed with no cluster down time.
    @Sendable
    @inlinable
    public func decreaseReplicaCount(_ input: DecreaseReplicaCountMessage, logger: Logger = AWSClient.loggingDisabled) async throws -> DecreaseReplicaCountResult {
        try await self.client.execute(
            operation: "DecreaseReplicaCount", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Dynamically decreases the number of replicas in a Redis OSS (cluster mode disabled) replication group or the number of replica nodes in one or more node groups (shards) of a Redis OSS (cluster mode enabled) replication group. This operation is performed with no cluster down time.
    ///
    /// Parameters:
    ///   - applyImmediately: If True, the number of replica nodes is decreased immediately. ApplyImmediately=False is not currently supported.
    ///   - newReplicaCount: The number of read replica nodes you want at the completion of this operation. For Redis OSS (cluster mode disabled) replication groups, this is the number of replica nodes in the replication group. For Redis OSS (cluster mode enabled) replication groups, this is the number of replica nodes in each of the replication group's node groups. The minimum number of replicas in a shard or replication group is:   Redis OSS (cluster mode disabled)   If Multi-AZ is enabled: 1   If Multi-AZ is not enabled: 0     Redis OSS (cluster mode enabled): 0 (though you will not be able to failover to a replica if your primary node fails)
    ///   - replicaConfiguration: A list of ConfigureShard objects that can be used to configure each shard in a Redis OSS (cluster mode enabled) replication group. The ConfigureShard has three members: NewReplicaCount, NodeGroupId, and PreferredAvailabilityZones.
    ///   - replicasToRemove: A list of the node ids to remove from the replication group or node group (shard).
    ///   - replicationGroupId: The id of the replication group from which you want to remove replica nodes.
    ///   - logger: Logger use during operation
    @inlinable
    public func decreaseReplicaCount(
        applyImmediately: Bool? = nil,
        newReplicaCount: Int? = nil,
        replicaConfiguration: [ConfigureShard]? = nil,
        replicasToRemove: [String]? = nil,
        replicationGroupId: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> DecreaseReplicaCountResult {
        let input = DecreaseReplicaCountMessage(
            applyImmediately: applyImmediately, 
            newReplicaCount: newReplicaCount, 
            replicaConfiguration: replicaConfiguration, 
            replicasToRemove: replicasToRemove, 
            replicationGroupId: replicationGroupId
        )
        return try await self.decreaseReplicaCount(input, logger: logger)
    }

    /// Deletes a previously provisioned cluster. DeleteCacheCluster deletes all associated cache nodes, node endpoints and the cluster itself. When you receive a successful response from this operation, Amazon ElastiCache immediately begins deleting the cluster; you cannot cancel or revert this operation. This operation is not valid for:   Redis OSS (cluster mode enabled) clusters   Redis OSS (cluster mode disabled) clusters   A cluster that is the last read replica of a replication group   A cluster that is the primary node of a replication group   A node group (shard) that has Multi-AZ mode enabled   A cluster from a Redis OSS (cluster mode enabled) replication group   A cluster that is not in the available state
    @Sendable
    @inlinable
    public func deleteCacheCluster(_ input: DeleteCacheClusterMessage, logger: Logger = AWSClient.loggingDisabled) async throws -> DeleteCacheClusterResult {
        try await self.client.execute(
            operation: "DeleteCacheCluster", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Deletes a previously provisioned cluster. DeleteCacheCluster deletes all associated cache nodes, node endpoints and the cluster itself. When you receive a successful response from this operation, Amazon ElastiCache immediately begins deleting the cluster; you cannot cancel or revert this operation. This operation is not valid for:   Redis OSS (cluster mode enabled) clusters   Redis OSS (cluster mode disabled) clusters   A cluster that is the last read replica of a replication group   A cluster that is the primary node of a replication group   A node group (shard) that has Multi-AZ mode enabled   A cluster from a Redis OSS (cluster mode enabled) replication group   A cluster that is not in the available state
    ///
    /// Parameters:
    ///   - cacheClusterId: The cluster identifier for the cluster to be deleted. This parameter is not case sensitive.
    ///   - finalSnapshotIdentifier: The user-supplied name of a final cluster snapshot. This is the unique name that identifies the snapshot. ElastiCache creates the snapshot, and then deletes the cluster immediately afterward.
    ///   - logger: Logger use during operation
    @inlinable
    public func deleteCacheCluster(
        cacheClusterId: String? = nil,
        finalSnapshotIdentifier: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> DeleteCacheClusterResult {
        let input = DeleteCacheClusterMessage(
            cacheClusterId: cacheClusterId, 
            finalSnapshotIdentifier: finalSnapshotIdentifier
        )
        return try await self.deleteCacheCluster(input, logger: logger)
    }

    /// Deletes the specified cache parameter group. You cannot delete a cache parameter group if it is associated with any cache clusters. You cannot delete the default cache parameter groups in your account.
    @Sendable
    @inlinable
    public func deleteCacheParameterGroup(_ input: DeleteCacheParameterGroupMessage, logger: Logger = AWSClient.loggingDisabled) async throws {
        try await self.client.execute(
            operation: "DeleteCacheParameterGroup", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Deletes the specified cache parameter group. You cannot delete a cache parameter group if it is associated with any cache clusters. You cannot delete the default cache parameter groups in your account.
    ///
    /// Parameters:
    ///   - cacheParameterGroupName: The name of the cache parameter group to delete.  The specified cache security group must not be associated with any clusters.
    ///   - logger: Logger use during operation
    @inlinable
    public func deleteCacheParameterGroup(
        cacheParameterGroupName: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws {
        let input = DeleteCacheParameterGroupMessage(
            cacheParameterGroupName: cacheParameterGroupName
        )
        return try await self.deleteCacheParameterGroup(input, logger: logger)
    }

    /// Deletes a cache security group.  You cannot delete a cache security group if it is associated with any clusters.
    @Sendable
    @inlinable
    public func deleteCacheSecurityGroup(_ input: DeleteCacheSecurityGroupMessage, logger: Logger = AWSClient.loggingDisabled) async throws {
        try await self.client.execute(
            operation: "DeleteCacheSecurityGroup", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Deletes a cache security group.  You cannot delete a cache security group if it is associated with any clusters.
    ///
    /// Parameters:
    ///   - cacheSecurityGroupName: The name of the cache security group to delete.  You cannot delete the default security group.
    ///   - logger: Logger use during operation
    @inlinable
    public func deleteCacheSecurityGroup(
        cacheSecurityGroupName: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws {
        let input = DeleteCacheSecurityGroupMessage(
            cacheSecurityGroupName: cacheSecurityGroupName
        )
        return try await self.deleteCacheSecurityGroup(input, logger: logger)
    }

    /// Deletes a cache subnet group.  You cannot delete a default cache subnet group or one that is associated with any clusters.
    @Sendable
    @inlinable
    public func deleteCacheSubnetGroup(_ input: DeleteCacheSubnetGroupMessage, logger: Logger = AWSClient.loggingDisabled) async throws {
        try await self.client.execute(
            operation: "DeleteCacheSubnetGroup", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Deletes a cache subnet group.  You cannot delete a default cache subnet group or one that is associated with any clusters.
    ///
    /// Parameters:
    ///   - cacheSubnetGroupName: The name of the cache subnet group to delete. Constraints: Must contain no more than 255 alphanumeric characters or hyphens.
    ///   - logger: Logger use during operation
    @inlinable
    public func deleteCacheSubnetGroup(
        cacheSubnetGroupName: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws {
        let input = DeleteCacheSubnetGroupMessage(
            cacheSubnetGroupName: cacheSubnetGroupName
        )
        return try await self.deleteCacheSubnetGroup(input, logger: logger)
    }

    /// Deleting a Global datastore is a two-step process:    First, you must DisassociateGlobalReplicationGroup to remove the secondary clusters in the Global datastore.   Once the Global datastore contains only the primary cluster, you can use the DeleteGlobalReplicationGroup API to delete the Global datastore while retainining the primary cluster using RetainPrimaryReplicationGroup=true.   Since the Global Datastore has only a primary cluster, you can delete the Global Datastore while retaining the primary by setting RetainPrimaryReplicationGroup=true. The primary cluster is never deleted when deleting a Global Datastore. It can only be deleted when it no longer is associated with any Global Datastore. When you receive a successful response from this operation, Amazon ElastiCache immediately begins deleting the selected resources; you cannot cancel or revert this operation.
    @Sendable
    @inlinable
    public func deleteGlobalReplicationGroup(_ input: DeleteGlobalReplicationGroupMessage, logger: Logger = AWSClient.loggingDisabled) async throws -> DeleteGlobalReplicationGroupResult {
        try await self.client.execute(
            operation: "DeleteGlobalReplicationGroup", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Deleting a Global datastore is a two-step process:    First, you must DisassociateGlobalReplicationGroup to remove the secondary clusters in the Global datastore.   Once the Global datastore contains only the primary cluster, you can use the DeleteGlobalReplicationGroup API to delete the Global datastore while retainining the primary cluster using RetainPrimaryReplicationGroup=true.   Since the Global Datastore has only a primary cluster, you can delete the Global Datastore while retaining the primary by setting RetainPrimaryReplicationGroup=true. The primary cluster is never deleted when deleting a Global Datastore. It can only be deleted when it no longer is associated with any Global Datastore. When you receive a successful response from this operation, Amazon ElastiCache immediately begins deleting the selected resources; you cannot cancel or revert this operation.
    ///
    /// Parameters:
    ///   - globalReplicationGroupId: The name of the Global datastore
    ///   - retainPrimaryReplicationGroup: The primary replication group is retained as a standalone replication group.
    ///   - logger: Logger use during operation
    @inlinable
    public func deleteGlobalReplicationGroup(
        globalReplicationGroupId: String? = nil,
        retainPrimaryReplicationGroup: Bool? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> DeleteGlobalReplicationGroupResult {
        let input = DeleteGlobalReplicationGroupMessage(
            globalReplicationGroupId: globalReplicationGroupId, 
            retainPrimaryReplicationGroup: retainPrimaryReplicationGroup
        )
        return try await self.deleteGlobalReplicationGroup(input, logger: logger)
    }

    /// Deletes an existing replication group. By default, this operation deletes the entire replication group, including the primary/primaries and all of the read replicas. If the replication group has only one primary, you can optionally delete only the read replicas, while retaining the primary by setting RetainPrimaryCluster=true. When you receive a successful response from this operation, Amazon ElastiCache immediately begins deleting the selected resources; you cannot cancel or revert this operation.     CreateSnapshot permission is required to create a final snapshot.  Without this permission, the API call will fail with an Access Denied exception.   This operation is valid for Redis OSS only.
    @Sendable
    @inlinable
    public func deleteReplicationGroup(_ input: DeleteReplicationGroupMessage, logger: Logger = AWSClient.loggingDisabled) async throws -> DeleteReplicationGroupResult {
        try await self.client.execute(
            operation: "DeleteReplicationGroup", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Deletes an existing replication group. By default, this operation deletes the entire replication group, including the primary/primaries and all of the read replicas. If the replication group has only one primary, you can optionally delete only the read replicas, while retaining the primary by setting RetainPrimaryCluster=true. When you receive a successful response from this operation, Amazon ElastiCache immediately begins deleting the selected resources; you cannot cancel or revert this operation.     CreateSnapshot permission is required to create a final snapshot.  Without this permission, the API call will fail with an Access Denied exception.   This operation is valid for Redis OSS only.
    ///
    /// Parameters:
    ///   - finalSnapshotIdentifier: The name of a final node group (shard) snapshot. ElastiCache creates the snapshot from the primary node in the cluster, rather than one of the replicas; this is to ensure that it captures the freshest data. After the final snapshot is taken, the replication group is immediately deleted.
    ///   - replicationGroupId: The identifier for the cluster to be deleted. This parameter is not case sensitive.
    ///   - retainPrimaryCluster: If set to true, all of the read replicas are deleted, but the primary node is retained.
    ///   - logger: Logger use during operation
    @inlinable
    public func deleteReplicationGroup(
        finalSnapshotIdentifier: String? = nil,
        replicationGroupId: String? = nil,
        retainPrimaryCluster: Bool? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> DeleteReplicationGroupResult {
        let input = DeleteReplicationGroupMessage(
            finalSnapshotIdentifier: finalSnapshotIdentifier, 
            replicationGroupId: replicationGroupId, 
            retainPrimaryCluster: retainPrimaryCluster
        )
        return try await self.deleteReplicationGroup(input, logger: logger)
    }

    /// Deletes a specified existing serverless cache.   CreateServerlessCacheSnapshot permission is required to create a final snapshot.  Without this permission, the API call will fail with an Access Denied exception.
    @Sendable
    @inlinable
    public func deleteServerlessCache(_ input: DeleteServerlessCacheRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DeleteServerlessCacheResponse {
        try await self.client.execute(
            operation: "DeleteServerlessCache", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Deletes a specified existing serverless cache.   CreateServerlessCacheSnapshot permission is required to create a final snapshot.  Without this permission, the API call will fail with an Access Denied exception.
    ///
    /// Parameters:
    ///   - finalSnapshotName: Name of the final snapshot to be taken before the serverless cache is deleted.  Available for Redis OSS and Serverless Memcached only. Default: NULL, i.e. a final snapshot is not taken.
    ///   - serverlessCacheName: The identifier of the serverless cache to be deleted.
    ///   - logger: Logger use during operation
    @inlinable
    public func deleteServerlessCache(
        finalSnapshotName: String? = nil,
        serverlessCacheName: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> DeleteServerlessCacheResponse {
        let input = DeleteServerlessCacheRequest(
            finalSnapshotName: finalSnapshotName, 
            serverlessCacheName: serverlessCacheName
        )
        return try await self.deleteServerlessCache(input, logger: logger)
    }

    /// Deletes an existing serverless cache snapshot. Available for Redis OSS and Serverless Memcached only.
    @Sendable
    @inlinable
    public func deleteServerlessCacheSnapshot(_ input: DeleteServerlessCacheSnapshotRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DeleteServerlessCacheSnapshotResponse {
        try await self.client.execute(
            operation: "DeleteServerlessCacheSnapshot", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Deletes an existing serverless cache snapshot. Available for Redis OSS and Serverless Memcached only.
    ///
    /// Parameters:
    ///   - serverlessCacheSnapshotName: Idenfitier of the snapshot to be deleted. Available for Redis OSS and Serverless Memcached only.
    ///   - logger: Logger use during operation
    @inlinable
    public func deleteServerlessCacheSnapshot(
        serverlessCacheSnapshotName: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> DeleteServerlessCacheSnapshotResponse {
        let input = DeleteServerlessCacheSnapshotRequest(
            serverlessCacheSnapshotName: serverlessCacheSnapshotName
        )
        return try await self.deleteServerlessCacheSnapshot(input, logger: logger)
    }

    /// Deletes an existing snapshot. When you receive a successful response from this operation, ElastiCache immediately begins deleting the snapshot; you cannot cancel or revert this operation.  This operation is valid for Redis OSS only.
    @Sendable
    @inlinable
    public func deleteSnapshot(_ input: DeleteSnapshotMessage, logger: Logger = AWSClient.loggingDisabled) async throws -> DeleteSnapshotResult {
        try await self.client.execute(
            operation: "DeleteSnapshot", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Deletes an existing snapshot. When you receive a successful response from this operation, ElastiCache immediately begins deleting the snapshot; you cannot cancel or revert this operation.  This operation is valid for Redis OSS only.
    ///
    /// Parameters:
    ///   - snapshotName: The name of the snapshot to be deleted.
    ///   - logger: Logger use during operation
    @inlinable
    public func deleteSnapshot(
        snapshotName: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> DeleteSnapshotResult {
        let input = DeleteSnapshotMessage(
            snapshotName: snapshotName
        )
        return try await self.deleteSnapshot(input, logger: logger)
    }

    /// For Redis OSS engine version 6.0 onwards: Deletes a user. The user will be removed from all user groups and in turn removed from all replication groups. For more information, see Using Role Based Access Control (RBAC).
    @Sendable
    @inlinable
    public func deleteUser(_ input: DeleteUserMessage, logger: Logger = AWSClient.loggingDisabled) async throws -> User {
        try await self.client.execute(
            operation: "DeleteUser", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// For Redis OSS engine version 6.0 onwards: Deletes a user. The user will be removed from all user groups and in turn removed from all replication groups. For more information, see Using Role Based Access Control (RBAC).
    ///
    /// Parameters:
    ///   - userId: The ID of the user.
    ///   - logger: Logger use during operation
    @inlinable
    public func deleteUser(
        userId: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> User {
        let input = DeleteUserMessage(
            userId: userId
        )
        return try await self.deleteUser(input, logger: logger)
    }

    /// For Redis OSS engine version 6.0 onwards: Deletes a user group. The user group must first be disassociated from the replication group before it can be deleted. For more information, see Using Role Based Access Control (RBAC).
    @Sendable
    @inlinable
    public func deleteUserGroup(_ input: DeleteUserGroupMessage, logger: Logger = AWSClient.loggingDisabled) async throws -> UserGroup {
        try await self.client.execute(
            operation: "DeleteUserGroup", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// For Redis OSS engine version 6.0 onwards: Deletes a user group. The user group must first be disassociated from the replication group before it can be deleted. For more information, see Using Role Based Access Control (RBAC).
    ///
    /// Parameters:
    ///   - userGroupId: The ID of the user group.
    ///   - logger: Logger use during operation
    @inlinable
    public func deleteUserGroup(
        userGroupId: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> UserGroup {
        let input = DeleteUserGroupMessage(
            userGroupId: userGroupId
        )
        return try await self.deleteUserGroup(input, logger: logger)
    }

    /// Returns information about all provisioned clusters if no cluster identifier is specified, or about a specific cache cluster if a cluster identifier is supplied. By default, abbreviated information about the clusters is returned. You can use the optional ShowCacheNodeInfo flag to retrieve detailed information about the cache nodes associated with the clusters. These details include the DNS address and port for the cache node endpoint. If the cluster is in the creating state, only cluster-level information is displayed until all of the nodes are successfully provisioned. If the cluster is in the deleting state, only cluster-level information is displayed. If cache nodes are currently being added to the cluster, node endpoint information and creation time for the additional nodes are not displayed until they are completely provisioned. When the cluster state is available, the cluster is ready for use. If cache nodes are currently being removed from the cluster, no endpoint information for the removed nodes is displayed.
    @Sendable
    @inlinable
    public func describeCacheClusters(_ input: DescribeCacheClustersMessage, logger: Logger = AWSClient.loggingDisabled) async throws -> CacheClusterMessage {
        try await self.client.execute(
            operation: "DescribeCacheClusters", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Returns information about all provisioned clusters if no cluster identifier is specified, or about a specific cache cluster if a cluster identifier is supplied. By default, abbreviated information about the clusters is returned. You can use the optional ShowCacheNodeInfo flag to retrieve detailed information about the cache nodes associated with the clusters. These details include the DNS address and port for the cache node endpoint. If the cluster is in the creating state, only cluster-level information is displayed until all of the nodes are successfully provisioned. If the cluster is in the deleting state, only cluster-level information is displayed. If cache nodes are currently being added to the cluster, node endpoint information and creation time for the additional nodes are not displayed until they are completely provisioned. When the cluster state is available, the cluster is ready for use. If cache nodes are currently being removed from the cluster, no endpoint information for the removed nodes is displayed.
    ///
    /// Parameters:
    ///   - cacheClusterId: The user-supplied cluster identifier. If this parameter is specified, only information about that specific cluster is returned. This parameter isn't case sensitive.
    ///   - marker: An optional marker returned from a prior request. Use this marker for pagination of results from this operation. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by MaxRecords.
    ///   - maxRecords: The maximum number of records to include in the response. If more records exist than the specified MaxRecords value, a marker is included in the response so that the remaining results can be retrieved. Default: 100 Constraints: minimum 20; maximum 100.
    ///   - showCacheClustersNotInReplicationGroups: An optional flag that can be included in the DescribeCacheCluster request to show only nodes (API/CLI: clusters) that are not members of a replication group. In practice, this mean Memcached and single node Redis OSS clusters.
    ///   - showCacheNodeInfo: An optional flag that can be included in the DescribeCacheCluster request to retrieve information about the individual cache nodes.
    ///   - logger: Logger use during operation
    @inlinable
    public func describeCacheClusters(
        cacheClusterId: String? = nil,
        marker: String? = nil,
        maxRecords: Int? = nil,
        showCacheClustersNotInReplicationGroups: Bool? = nil,
        showCacheNodeInfo: Bool? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> CacheClusterMessage {
        let input = DescribeCacheClustersMessage(
            cacheClusterId: cacheClusterId, 
            marker: marker, 
            maxRecords: maxRecords, 
            showCacheClustersNotInReplicationGroups: showCacheClustersNotInReplicationGroups, 
            showCacheNodeInfo: showCacheNodeInfo
        )
        return try await self.describeCacheClusters(input, logger: logger)
    }

    /// Returns a list of the available cache engines and their versions.
    @Sendable
    @inlinable
    public func describeCacheEngineVersions(_ input: DescribeCacheEngineVersionsMessage, logger: Logger = AWSClient.loggingDisabled) async throws -> CacheEngineVersionMessage {
        try await self.client.execute(
            operation: "DescribeCacheEngineVersions", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Returns a list of the available cache engines and their versions.
    ///
    /// Parameters:
    ///   - cacheParameterGroupFamily: The name of a specific cache parameter group family to return details for. Valid values are: memcached1.4 | memcached1.5 | memcached1.6 | redis2.6 | redis2.8 | redis3.2 | redis4.0 | redis5.0 | redis6.x | redis6.2 | redis7  Constraints:   Must be 1 to 255 alphanumeric characters   First character must be a letter   Cannot end with a hyphen or contain two consecutive hyphens
    ///   - defaultOnly: If true, specifies that only the default version of the specified engine or engine and major version combination is to be returned.
    ///   - engine: The cache engine to return. Valid values: memcached | redis
    ///   - engineVersion: The cache engine version to return. Example: 1.4.14
    ///   - marker: An optional marker returned from a prior request. Use this marker for pagination of results from this operation. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by MaxRecords.
    ///   - maxRecords: The maximum number of records to include in the response. If more records exist than the specified MaxRecords value, a marker is included in the response so that the remaining results can be retrieved. Default: 100 Constraints: minimum 20; maximum 100.
    ///   - logger: Logger use during operation
    @inlinable
    public func describeCacheEngineVersions(
        cacheParameterGroupFamily: String? = nil,
        defaultOnly: Bool? = nil,
        engine: String? = nil,
        engineVersion: String? = nil,
        marker: String? = nil,
        maxRecords: Int? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> CacheEngineVersionMessage {
        let input = DescribeCacheEngineVersionsMessage(
            cacheParameterGroupFamily: cacheParameterGroupFamily, 
            defaultOnly: defaultOnly, 
            engine: engine, 
            engineVersion: engineVersion, 
            marker: marker, 
            maxRecords: maxRecords
        )
        return try await self.describeCacheEngineVersions(input, logger: logger)
    }

    /// Returns a list of cache parameter group descriptions. If a cache parameter group name is specified, the list contains only the descriptions for that group.
    @Sendable
    @inlinable
    public func describeCacheParameterGroups(_ input: DescribeCacheParameterGroupsMessage, logger: Logger = AWSClient.loggingDisabled) async throws -> CacheParameterGroupsMessage {
        try await self.client.execute(
            operation: "DescribeCacheParameterGroups", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Returns a list of cache parameter group descriptions. If a cache parameter group name is specified, the list contains only the descriptions for that group.
    ///
    /// Parameters:
    ///   - cacheParameterGroupName: The name of a specific cache parameter group to return details for.
    ///   - marker: An optional marker returned from a prior request. Use this marker for pagination of results from this operation. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by MaxRecords.
    ///   - maxRecords: The maximum number of records to include in the response. If more records exist than the specified MaxRecords value, a marker is included in the response so that the remaining results can be retrieved. Default: 100 Constraints: minimum 20; maximum 100.
    ///   - logger: Logger use during operation
    @inlinable
    public func describeCacheParameterGroups(
        cacheParameterGroupName: String? = nil,
        marker: String? = nil,
        maxRecords: Int? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> CacheParameterGroupsMessage {
        let input = DescribeCacheParameterGroupsMessage(
            cacheParameterGroupName: cacheParameterGroupName, 
            marker: marker, 
            maxRecords: maxRecords
        )
        return try await self.describeCacheParameterGroups(input, logger: logger)
    }

    /// Returns the detailed parameter list for a particular cache parameter group.
    @Sendable
    @inlinable
    public func describeCacheParameters(_ input: DescribeCacheParametersMessage, logger: Logger = AWSClient.loggingDisabled) async throws -> CacheParameterGroupDetails {
        try await self.client.execute(
            operation: "DescribeCacheParameters", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Returns the detailed parameter list for a particular cache parameter group.
    ///
    /// Parameters:
    ///   - cacheParameterGroupName: The name of a specific cache parameter group to return details for.
    ///   - marker: An optional marker returned from a prior request. Use this marker for pagination of results from this operation. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by MaxRecords.
    ///   - maxRecords: The maximum number of records to include in the response. If more records exist than the specified MaxRecords value, a marker is included in the response so that the remaining results can be retrieved. Default: 100 Constraints: minimum 20; maximum 100.
    ///   - source: The parameter types to return. Valid values: user | system | engine-default
    ///   - logger: Logger use during operation
    @inlinable
    public func describeCacheParameters(
        cacheParameterGroupName: String? = nil,
        marker: String? = nil,
        maxRecords: Int? = nil,
        source: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> CacheParameterGroupDetails {
        let input = DescribeCacheParametersMessage(
            cacheParameterGroupName: cacheParameterGroupName, 
            marker: marker, 
            maxRecords: maxRecords, 
            source: source
        )
        return try await self.describeCacheParameters(input, logger: logger)
    }

    /// Returns a list of cache security group descriptions. If a cache security group name is specified, the list contains only the description of that group. This applicable only when you have ElastiCache in Classic setup
    @Sendable
    @inlinable
    public func describeCacheSecurityGroups(_ input: DescribeCacheSecurityGroupsMessage, logger: Logger = AWSClient.loggingDisabled) async throws -> CacheSecurityGroupMessage {
        try await self.client.execute(
            operation: "DescribeCacheSecurityGroups", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Returns a list of cache security group descriptions. If a cache security group name is specified, the list contains only the description of that group. This applicable only when you have ElastiCache in Classic setup
    ///
    /// Parameters:
    ///   - cacheSecurityGroupName: The name of the cache security group to return details for.
    ///   - marker: An optional marker returned from a prior request. Use this marker for pagination of results from this operation. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by MaxRecords.
    ///   - maxRecords: The maximum number of records to include in the response. If more records exist than the specified MaxRecords value, a marker is included in the response so that the remaining results can be retrieved. Default: 100 Constraints: minimum 20; maximum 100.
    ///   - logger: Logger use during operation
    @inlinable
    public func describeCacheSecurityGroups(
        cacheSecurityGroupName: String? = nil,
        marker: String? = nil,
        maxRecords: Int? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> CacheSecurityGroupMessage {
        let input = DescribeCacheSecurityGroupsMessage(
            cacheSecurityGroupName: cacheSecurityGroupName, 
            marker: marker, 
            maxRecords: maxRecords
        )
        return try await self.describeCacheSecurityGroups(input, logger: logger)
    }

    /// Returns a list of cache subnet group descriptions. If a subnet group name is specified, the list contains only the description of that group. This is applicable only when you have ElastiCache in VPC setup. All ElastiCache clusters now launch in VPC by default.
    @Sendable
    @inlinable
    public func describeCacheSubnetGroups(_ input: DescribeCacheSubnetGroupsMessage, logger: Logger = AWSClient.loggingDisabled) async throws -> CacheSubnetGroupMessage {
        try await self.client.execute(
            operation: "DescribeCacheSubnetGroups", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Returns a list of cache subnet group descriptions. If a subnet group name is specified, the list contains only the description of that group. This is applicable only when you have ElastiCache in VPC setup. All ElastiCache clusters now launch in VPC by default.
    ///
    /// Parameters:
    ///   - cacheSubnetGroupName: The name of the cache subnet group to return details for.
    ///   - marker: An optional marker returned from a prior request. Use this marker for pagination of results from this operation. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by MaxRecords.
    ///   - maxRecords: The maximum number of records to include in the response. If more records exist than the specified MaxRecords value, a marker is included in the response so that the remaining results can be retrieved. Default: 100 Constraints: minimum 20; maximum 100.
    ///   - logger: Logger use during operation
    @inlinable
    public func describeCacheSubnetGroups(
        cacheSubnetGroupName: String? = nil,
        marker: String? = nil,
        maxRecords: Int? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> CacheSubnetGroupMessage {
        let input = DescribeCacheSubnetGroupsMessage(
            cacheSubnetGroupName: cacheSubnetGroupName, 
            marker: marker, 
            maxRecords: maxRecords
        )
        return try await self.describeCacheSubnetGroups(input, logger: logger)
    }

    /// Returns the default engine and system parameter information for the specified cache engine.
    @Sendable
    @inlinable
    public func describeEngineDefaultParameters(_ input: DescribeEngineDefaultParametersMessage, logger: Logger = AWSClient.loggingDisabled) async throws -> DescribeEngineDefaultParametersResult {
        try await self.client.execute(
            operation: "DescribeEngineDefaultParameters", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Returns the default engine and system parameter information for the specified cache engine.
    ///
    /// Parameters:
    ///   - cacheParameterGroupFamily: The name of the cache parameter group family. Valid values are: memcached1.4 | memcached1.5 | memcached1.6 | redis2.6 | redis2.8 | redis3.2 | redis4.0 | redis5.0 | redis6.x | redis6.2 | redis7
    ///   - marker: An optional marker returned from a prior request. Use this marker for pagination of results from this operation. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by MaxRecords.
    ///   - maxRecords: The maximum number of records to include in the response. If more records exist than the specified MaxRecords value, a marker is included in the response so that the remaining results can be retrieved. Default: 100 Constraints: minimum 20; maximum 100.
    ///   - logger: Logger use during operation
    @inlinable
    public func describeEngineDefaultParameters(
        cacheParameterGroupFamily: String? = nil,
        marker: String? = nil,
        maxRecords: Int? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> DescribeEngineDefaultParametersResult {
        let input = DescribeEngineDefaultParametersMessage(
            cacheParameterGroupFamily: cacheParameterGroupFamily, 
            marker: marker, 
            maxRecords: maxRecords
        )
        return try await self.describeEngineDefaultParameters(input, logger: logger)
    }

    /// Returns events related to clusters, cache security groups, and cache parameter groups. You can obtain events specific to a particular cluster, cache security group, or cache parameter group by providing the name as a parameter. By default, only the events occurring within the last hour are returned; however, you can retrieve up to 14 days' worth of events if necessary.
    @Sendable
    @inlinable
    public func describeEvents(_ input: DescribeEventsMessage, logger: Logger = AWSClient.loggingDisabled) async throws -> EventsMessage {
        try await self.client.execute(
            operation: "DescribeEvents", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Returns events related to clusters, cache security groups, and cache parameter groups. You can obtain events specific to a particular cluster, cache security group, or cache parameter group by providing the name as a parameter. By default, only the events occurring within the last hour are returned; however, you can retrieve up to 14 days' worth of events if necessary.
    ///
    /// Parameters:
    ///   - duration: The number of minutes worth of events to retrieve.
    ///   - endTime: The end of the time interval for which to retrieve events, specified in ISO 8601 format.  Example: 2017-03-30T07:03:49.555Z
    ///   - marker: An optional marker returned from a prior request. Use this marker for pagination of results from this operation. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by MaxRecords.
    ///   - maxRecords: The maximum number of records to include in the response. If more records exist than the specified MaxRecords value, a marker is included in the response so that the remaining results can be retrieved. Default: 100 Constraints: minimum 20; maximum 100.
    ///   - sourceIdentifier: The identifier of the event source for which events are returned. If not specified, all sources are included in the response.
    ///   - sourceType: The event source to retrieve events for. If no value is specified, all events are returned.
    ///   - startTime: The beginning of the time interval to retrieve events for, specified in ISO 8601 format.  Example: 2017-03-30T07:03:49.555Z
    ///   - logger: Logger use during operation
    @inlinable
    public func describeEvents(
        duration: Int? = nil,
        endTime: Date? = nil,
        marker: String? = nil,
        maxRecords: Int? = nil,
        sourceIdentifier: String? = nil,
        sourceType: SourceType? = nil,
        startTime: Date? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> EventsMessage {
        let input = DescribeEventsMessage(
            duration: duration, 
            endTime: endTime, 
            marker: marker, 
            maxRecords: maxRecords, 
            sourceIdentifier: sourceIdentifier, 
            sourceType: sourceType, 
            startTime: startTime
        )
        return try await self.describeEvents(input, logger: logger)
    }

    /// Returns information about a particular global replication group. If no identifier is specified, returns information about all Global datastores.
    @Sendable
    @inlinable
    public func describeGlobalReplicationGroups(_ input: DescribeGlobalReplicationGroupsMessage, logger: Logger = AWSClient.loggingDisabled) async throws -> DescribeGlobalReplicationGroupsResult {
        try await self.client.execute(
            operation: "DescribeGlobalReplicationGroups", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Returns information about a particular global replication group. If no identifier is specified, returns information about all Global datastores.
    ///
    /// Parameters:
    ///   - globalReplicationGroupId: The name of the Global datastore
    ///   - marker: An optional marker returned from a prior request. Use this marker for pagination of results from this operation. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by MaxRecords.
    ///   - maxRecords: The maximum number of records to include in the response. If more records exist than the specified MaxRecords value, a marker is included in the response so that the remaining results can be retrieved.
    ///   - showMemberInfo: Returns the list of members that comprise the Global datastore.
    ///   - logger: Logger use during operation
    @inlinable
    public func describeGlobalReplicationGroups(
        globalReplicationGroupId: String? = nil,
        marker: String? = nil,
        maxRecords: Int? = nil,
        showMemberInfo: Bool? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> DescribeGlobalReplicationGroupsResult {
        let input = DescribeGlobalReplicationGroupsMessage(
            globalReplicationGroupId: globalReplicationGroupId, 
            marker: marker, 
            maxRecords: maxRecords, 
            showMemberInfo: showMemberInfo
        )
        return try await self.describeGlobalReplicationGroups(input, logger: logger)
    }

    /// Returns information about a particular replication group. If no identifier is specified, DescribeReplicationGroups returns information about all replication groups.  This operation is valid for Redis OSS only.
    @Sendable
    @inlinable
    public func describeReplicationGroups(_ input: DescribeReplicationGroupsMessage, logger: Logger = AWSClient.loggingDisabled) async throws -> ReplicationGroupMessage {
        try await self.client.execute(
            operation: "DescribeReplicationGroups", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Returns information about a particular replication group. If no identifier is specified, DescribeReplicationGroups returns information about all replication groups.  This operation is valid for Redis OSS only.
    ///
    /// Parameters:
    ///   - marker: An optional marker returned from a prior request. Use this marker for pagination of results from this operation. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by MaxRecords.
    ///   - maxRecords: The maximum number of records to include in the response. If more records exist than the specified MaxRecords value, a marker is included in the response so that the remaining results can be retrieved. Default: 100 Constraints: minimum 20; maximum 100.
    ///   - replicationGroupId: The identifier for the replication group to be described. This parameter is not case sensitive. If you do not specify this parameter, information about all replication groups is returned.
    ///   - logger: Logger use during operation
    @inlinable
    public func describeReplicationGroups(
        marker: String? = nil,
        maxRecords: Int? = nil,
        replicationGroupId: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> ReplicationGroupMessage {
        let input = DescribeReplicationGroupsMessage(
            marker: marker, 
            maxRecords: maxRecords, 
            replicationGroupId: replicationGroupId
        )
        return try await self.describeReplicationGroups(input, logger: logger)
    }

    /// Returns information about reserved cache nodes for this account, or about a specified reserved cache node.
    @Sendable
    @inlinable
    public func describeReservedCacheNodes(_ input: DescribeReservedCacheNodesMessage, logger: Logger = AWSClient.loggingDisabled) async throws -> ReservedCacheNodeMessage {
        try await self.client.execute(
            operation: "DescribeReservedCacheNodes", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Returns information about reserved cache nodes for this account, or about a specified reserved cache node.
    ///
    /// Parameters:
    ///   - cacheNodeType: The cache node type filter value. Use this parameter to show only those reservations matching the specified cache node type. The following node types are supported by ElastiCache. Generally speaking, the current generation types provide more memory and computational power at lower cost when compared to their equivalent previous generation counterparts.   General purpose:   Current generation:   M7g node types: 					cache.m7g.large, 					cache.m7g.xlarge, 					cache.m7g.2xlarge, 					cache.m7g.4xlarge, 					cache.m7g.8xlarge, 					cache.m7g.12xlarge, 					cache.m7g.16xlarge   For region availability, see Supported Node Types    M6g node types (available only for Redis OSS engine version 5.0.6 onward and for Memcached engine version 1.5.16 onward):
    ///   - duration: The duration filter value, specified in years or seconds. Use this parameter to show only reservations for this duration. Valid Values: 1 | 3 | 31536000 | 94608000
    ///   - marker: An optional marker returned from a prior request. Use this marker for pagination of results from this operation. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by MaxRecords.
    ///   - maxRecords: The maximum number of records to include in the response. If more records exist than the specified MaxRecords value, a marker is included in the response so that the remaining results can be retrieved. Default: 100 Constraints: minimum 20; maximum 100.
    ///   - offeringType: The offering type filter value. Use this parameter to show only the available offerings matching the specified offering type. Valid values: "Light Utilization"|"Medium Utilization"|"Heavy Utilization"|"All Upfront"|"Partial Upfront"| "No Upfront"
    ///   - productDescription: The product description filter value. Use this parameter to show only those reservations matching the specified product description.
    ///   - reservedCacheNodeId: The reserved cache node identifier filter value. Use this parameter to show only the reservation that matches the specified reservation ID.
    ///   - reservedCacheNodesOfferingId: The offering identifier filter value. Use this parameter to show only purchased reservations matching the specified offering identifier.
    ///   - logger: Logger use during operation
    @inlinable
    public func describeReservedCacheNodes(
        cacheNodeType: String? = nil,
        duration: String? = nil,
        marker: String? = nil,
        maxRecords: Int? = nil,
        offeringType: String? = nil,
        productDescription: String? = nil,
        reservedCacheNodeId: String? = nil,
        reservedCacheNodesOfferingId: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> ReservedCacheNodeMessage {
        let input = DescribeReservedCacheNodesMessage(
            cacheNodeType: cacheNodeType, 
            duration: duration, 
            marker: marker, 
            maxRecords: maxRecords, 
            offeringType: offeringType, 
            productDescription: productDescription, 
            reservedCacheNodeId: reservedCacheNodeId, 
            reservedCacheNodesOfferingId: reservedCacheNodesOfferingId
        )
        return try await self.describeReservedCacheNodes(input, logger: logger)
    }

    /// Lists available reserved cache node offerings.
    @Sendable
    @inlinable
    public func describeReservedCacheNodesOfferings(_ input: DescribeReservedCacheNodesOfferingsMessage, logger: Logger = AWSClient.loggingDisabled) async throws -> ReservedCacheNodesOfferingMessage {
        try await self.client.execute(
            operation: "DescribeReservedCacheNodesOfferings", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Lists available reserved cache node offerings.
    ///
    /// Parameters:
    ///   - cacheNodeType: The cache node type filter value. Use this parameter to show only the available offerings matching the specified cache node type. The following node types are supported by ElastiCache. Generally speaking, the current generation types provide more memory and computational power at lower cost when compared to their equivalent previous generation counterparts.   General purpose:   Current generation:   M7g node types: 					cache.m7g.large, 					cache.m7g.xlarge, 					cache.m7g.2xlarge, 					cache.m7g.4xlarge, 					cache.m7g.8xlarge, 					cache.m7g.12xlarge, 					cache.m7g.16xlarge   For region availability, see Supported Node Types    M6g node types (available only for Redis OSS engine version 5.0.6 onward and for Memcached engine version 1.5.16 onward):
    ///   - duration: Duration filter value, specified in years or seconds. Use this parameter to show only reservations for a given duration. Valid Values: 1 | 3 | 31536000 | 94608000
    ///   - marker: An optional marker returned from a prior request. Use this marker for pagination of results from this operation. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by MaxRecords.
    ///   - maxRecords: The maximum number of records to include in the response. If more records exist than the specified MaxRecords value, a marker is included in the response so that the remaining results can be retrieved. Default: 100 Constraints: minimum 20; maximum 100.
    ///   - offeringType: The offering type filter value. Use this parameter to show only the available offerings matching the specified offering type. Valid Values: "Light Utilization"|"Medium Utilization"|"Heavy Utilization" |"All Upfront"|"Partial Upfront"| "No Upfront"
    ///   - productDescription: The product description filter value. Use this parameter to show only the available offerings matching the specified product description.
    ///   - reservedCacheNodesOfferingId: The offering identifier filter value. Use this parameter to show only the available offering that matches the specified reservation identifier. Example: 438012d3-4052-4cc7-b2e3-8d3372e0e706
    ///   - logger: Logger use during operation
    @inlinable
    public func describeReservedCacheNodesOfferings(
        cacheNodeType: String? = nil,
        duration: String? = nil,
        marker: String? = nil,
        maxRecords: Int? = nil,
        offeringType: String? = nil,
        productDescription: String? = nil,
        reservedCacheNodesOfferingId: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> ReservedCacheNodesOfferingMessage {
        let input = DescribeReservedCacheNodesOfferingsMessage(
            cacheNodeType: cacheNodeType, 
            duration: duration, 
            marker: marker, 
            maxRecords: maxRecords, 
            offeringType: offeringType, 
            productDescription: productDescription, 
            reservedCacheNodesOfferingId: reservedCacheNodesOfferingId
        )
        return try await self.describeReservedCacheNodesOfferings(input, logger: logger)
    }

    /// Returns information about serverless cache snapshots.  By default, this API lists all of the customer’s serverless cache snapshots.  It can also describe a single serverless cache snapshot, or the snapshots associated with  a particular serverless cache. Available for Redis OSS and Serverless Memcached only.
    @Sendable
    @inlinable
    public func describeServerlessCacheSnapshots(_ input: DescribeServerlessCacheSnapshotsRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DescribeServerlessCacheSnapshotsResponse {
        try await self.client.execute(
            operation: "DescribeServerlessCacheSnapshots", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Returns information about serverless cache snapshots.  By default, this API lists all of the customer’s serverless cache snapshots.  It can also describe a single serverless cache snapshot, or the snapshots associated with  a particular serverless cache. Available for Redis OSS and Serverless Memcached only.
    ///
    /// Parameters:
    ///   - maxResults: The maximum number of records to include in the response. If more records exist than  the specified max-results value, a market is included in the response so that remaining results  can be retrieved. Available for Redis OSS and Serverless Memcached only.The default is 50. The Validation Constraints are a maximum of 50.
    ///   - nextToken: An optional marker returned from a prior request to support pagination of results from this operation.  If this parameter is specified, the response includes only records beyond the marker,  up to the value specified by max-results. Available for Redis OSS and Serverless Memcached only.
    ///   - serverlessCacheName: The identifier of serverless cache. If this parameter is specified,  only snapshots associated with that specific serverless cache are described. Available for Redis OSS and Serverless Memcached only.
    ///   - serverlessCacheSnapshotName: The identifier of the serverless cache’s snapshot. If this parameter is specified, only this snapshot is described. Available for Redis OSS and Serverless Memcached only.
    ///   - snapshotType: The type of snapshot that is being described. Available for Redis OSS and Serverless Memcached only.
    ///   - logger: Logger use during operation
    @inlinable
    public func describeServerlessCacheSnapshots(
        maxResults: Int? = nil,
        nextToken: String? = nil,
        serverlessCacheName: String? = nil,
        serverlessCacheSnapshotName: String? = nil,
        snapshotType: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> DescribeServerlessCacheSnapshotsResponse {
        let input = DescribeServerlessCacheSnapshotsRequest(
            maxResults: maxResults, 
            nextToken: nextToken, 
            serverlessCacheName: serverlessCacheName, 
            serverlessCacheSnapshotName: serverlessCacheSnapshotName, 
            snapshotType: snapshotType
        )
        return try await self.describeServerlessCacheSnapshots(input, logger: logger)
    }

    /// Returns information about a specific serverless cache.  If no identifier is specified, then the API returns information on all the serverless caches belonging to  this Amazon Web Services account.
    @Sendable
    @inlinable
    public func describeServerlessCaches(_ input: DescribeServerlessCachesRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DescribeServerlessCachesResponse {
        try await self.client.execute(
            operation: "DescribeServerlessCaches", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Returns information about a specific serverless cache.  If no identifier is specified, then the API returns information on all the serverless caches belonging to  this Amazon Web Services account.
    ///
    /// Parameters:
    ///   - maxResults: The maximum number of records in the response. If more records exist than the specified max-records value,  the next token is included in the response so that remaining results can be retrieved.  The default is 50.
    ///   - nextToken: An optional marker returned from a prior request to support pagination of results from this operation.  If this parameter is specified, the response includes only records beyond the marker,  up to the value specified by MaxResults.
    ///   - serverlessCacheName: The identifier for the serverless cache. If this parameter is specified,  only information about that specific serverless cache is returned. Default: NULL
    ///   - logger: Logger use during operation
    @inlinable
    public func describeServerlessCaches(
        maxResults: Int? = nil,
        nextToken: String? = nil,
        serverlessCacheName: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> DescribeServerlessCachesResponse {
        let input = DescribeServerlessCachesRequest(
            maxResults: maxResults, 
            nextToken: nextToken, 
            serverlessCacheName: serverlessCacheName
        )
        return try await self.describeServerlessCaches(input, logger: logger)
    }

    /// Returns details of the service updates
    @Sendable
    @inlinable
    public func describeServiceUpdates(_ input: DescribeServiceUpdatesMessage, logger: Logger = AWSClient.loggingDisabled) async throws -> ServiceUpdatesMessage {
        try await self.client.execute(
            operation: "DescribeServiceUpdates", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Returns details of the service updates
    ///
    /// Parameters:
    ///   - marker: An optional marker returned from a prior request. Use this marker for pagination of results from this operation. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by MaxRecords.
    ///   - maxRecords: The maximum number of records to include in the response
    ///   - serviceUpdateName: The unique ID of the service update
    ///   - serviceUpdateStatus: The status of the service update
    ///   - logger: Logger use during operation
    @inlinable
    public func describeServiceUpdates(
        marker: String? = nil,
        maxRecords: Int? = nil,
        serviceUpdateName: String? = nil,
        serviceUpdateStatus: [ServiceUpdateStatus]? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> ServiceUpdatesMessage {
        let input = DescribeServiceUpdatesMessage(
            marker: marker, 
            maxRecords: maxRecords, 
            serviceUpdateName: serviceUpdateName, 
            serviceUpdateStatus: serviceUpdateStatus
        )
        return try await self.describeServiceUpdates(input, logger: logger)
    }

    /// Returns information about cluster or replication group snapshots. By default, DescribeSnapshots lists all of your snapshots; it can optionally describe a single snapshot, or just the snapshots associated with a particular cache cluster.  This operation is valid for Redis OSS only.
    @Sendable
    @inlinable
    public func describeSnapshots(_ input: DescribeSnapshotsMessage, logger: Logger = AWSClient.loggingDisabled) async throws -> DescribeSnapshotsListMessage {
        try await self.client.execute(
            operation: "DescribeSnapshots", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Returns information about cluster or replication group snapshots. By default, DescribeSnapshots lists all of your snapshots; it can optionally describe a single snapshot, or just the snapshots associated with a particular cache cluster.  This operation is valid for Redis OSS only.
    ///
    /// Parameters:
    ///   - cacheClusterId: A user-supplied cluster identifier. If this parameter is specified, only snapshots associated with that specific cluster are described.
    ///   - marker: An optional marker returned from a prior request. Use this marker for pagination of results from this operation. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by MaxRecords.
    ///   - maxRecords: The maximum number of records to include in the response. If more records exist than the specified MaxRecords value, a marker is included in the response so that the remaining results can be retrieved. Default: 50 Constraints: minimum 20; maximum 50.
    ///   - replicationGroupId: A user-supplied replication group identifier. If this parameter is specified, only snapshots associated with that specific replication group are described.
    ///   - showNodeGroupConfig: A Boolean value which if true, the node group (shard) configuration is included in the snapshot description.
    ///   - snapshotName: A user-supplied name of the snapshot. If this parameter is specified, only this snapshot are described.
    ///   - snapshotSource: If set to system, the output shows snapshots that were automatically created by ElastiCache. If set to user the output shows snapshots that were manually created. If omitted, the output shows both automatically and manually created snapshots.
    ///   - logger: Logger use during operation
    @inlinable
    public func describeSnapshots(
        cacheClusterId: String? = nil,
        marker: String? = nil,
        maxRecords: Int? = nil,
        replicationGroupId: String? = nil,
        showNodeGroupConfig: Bool? = nil,
        snapshotName: String? = nil,
        snapshotSource: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> DescribeSnapshotsListMessage {
        let input = DescribeSnapshotsMessage(
            cacheClusterId: cacheClusterId, 
            marker: marker, 
            maxRecords: maxRecords, 
            replicationGroupId: replicationGroupId, 
            showNodeGroupConfig: showNodeGroupConfig, 
            snapshotName: snapshotName, 
            snapshotSource: snapshotSource
        )
        return try await self.describeSnapshots(input, logger: logger)
    }

    /// Returns details of the update actions
    @Sendable
    @inlinable
    public func describeUpdateActions(_ input: DescribeUpdateActionsMessage, logger: Logger = AWSClient.loggingDisabled) async throws -> UpdateActionsMessage {
        try await self.client.execute(
            operation: "DescribeUpdateActions", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Returns details of the update actions
    ///
    /// Parameters:
    ///   - cacheClusterIds: The cache cluster IDs
    ///   - engine: The Elasticache engine to which the update applies. Either Redis OSS or Memcached.
    ///   - marker: An optional marker returned from a prior request. Use this marker for pagination of results from this operation. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by MaxRecords.
    ///   - maxRecords: The maximum number of records to include in the response
    ///   - replicationGroupIds: The replication group IDs
    ///   - serviceUpdateName: The unique ID of the service update
    ///   - serviceUpdateStatus: The status of the service update
    ///   - serviceUpdateTimeRange: The range of time specified to search for service updates that are in available status
    ///   - showNodeLevelUpdateStatus: Dictates whether to include node level update status in the response
    ///   - updateActionStatus: The status of the update action.
    ///   - logger: Logger use during operation
    @inlinable
    public func describeUpdateActions(
        cacheClusterIds: [String]? = nil,
        engine: String? = nil,
        marker: String? = nil,
        maxRecords: Int? = nil,
        replicationGroupIds: [String]? = nil,
        serviceUpdateName: String? = nil,
        serviceUpdateStatus: [ServiceUpdateStatus]? = nil,
        serviceUpdateTimeRange: TimeRangeFilter? = nil,
        showNodeLevelUpdateStatus: Bool? = nil,
        updateActionStatus: [UpdateActionStatus]? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> UpdateActionsMessage {
        let input = DescribeUpdateActionsMessage(
            cacheClusterIds: cacheClusterIds, 
            engine: engine, 
            marker: marker, 
            maxRecords: maxRecords, 
            replicationGroupIds: replicationGroupIds, 
            serviceUpdateName: serviceUpdateName, 
            serviceUpdateStatus: serviceUpdateStatus, 
            serviceUpdateTimeRange: serviceUpdateTimeRange, 
            showNodeLevelUpdateStatus: showNodeLevelUpdateStatus, 
            updateActionStatus: updateActionStatus
        )
        return try await self.describeUpdateActions(input, logger: logger)
    }

    /// Returns a list of user groups.
    @Sendable
    @inlinable
    public func describeUserGroups(_ input: DescribeUserGroupsMessage, logger: Logger = AWSClient.loggingDisabled) async throws -> DescribeUserGroupsResult {
        try await self.client.execute(
            operation: "DescribeUserGroups", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Returns a list of user groups.
    ///
    /// Parameters:
    ///   - marker: An optional marker returned from a prior request. Use this marker for pagination of results from this operation. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by MaxRecords. >
    ///   - maxRecords: The maximum number of records to include in the response. If more records exist than the specified MaxRecords value, a marker is included in the response so that the remaining results can be retrieved.
    ///   - userGroupId: The ID of the user group.
    ///   - logger: Logger use during operation
    @inlinable
    public func describeUserGroups(
        marker: String? = nil,
        maxRecords: Int? = nil,
        userGroupId: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> DescribeUserGroupsResult {
        let input = DescribeUserGroupsMessage(
            marker: marker, 
            maxRecords: maxRecords, 
            userGroupId: userGroupId
        )
        return try await self.describeUserGroups(input, logger: logger)
    }

    /// Returns a list of users.
    @Sendable
    @inlinable
    public func describeUsers(_ input: DescribeUsersMessage, logger: Logger = AWSClient.loggingDisabled) async throws -> DescribeUsersResult {
        try await self.client.execute(
            operation: "DescribeUsers", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Returns a list of users.
    ///
    /// Parameters:
    ///   - engine: The Redis OSS engine.
    ///   - filters: Filter to determine the list of User IDs to return.
    ///   - marker: An optional marker returned from a prior request. Use this marker for pagination of results from this operation. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by MaxRecords. >
    ///   - maxRecords: The maximum number of records to include in the response. If more records exist than the specified MaxRecords value, a marker is included in the response so that the remaining results can be retrieved.
    ///   - userId: The ID of the user.
    ///   - logger: Logger use during operation
    @inlinable
    public func describeUsers(
        engine: String? = nil,
        filters: [Filter]? = nil,
        marker: String? = nil,
        maxRecords: Int? = nil,
        userId: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> DescribeUsersResult {
        let input = DescribeUsersMessage(
            engine: engine, 
            filters: filters, 
            marker: marker, 
            maxRecords: maxRecords, 
            userId: userId
        )
        return try await self.describeUsers(input, logger: logger)
    }

    /// Remove a secondary cluster from the Global datastore using the Global datastore name. The secondary cluster will no longer receive updates from the primary cluster, but will remain as a standalone cluster in that Amazon region.
    @Sendable
    @inlinable
    public func disassociateGlobalReplicationGroup(_ input: DisassociateGlobalReplicationGroupMessage, logger: Logger = AWSClient.loggingDisabled) async throws -> DisassociateGlobalReplicationGroupResult {
        try await self.client.execute(
            operation: "DisassociateGlobalReplicationGroup", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Remove a secondary cluster from the Global datastore using the Global datastore name. The secondary cluster will no longer receive updates from the primary cluster, but will remain as a standalone cluster in that Amazon region.
    ///
    /// Parameters:
    ///   - globalReplicationGroupId: The name of the Global datastore
    ///   - replicationGroupId: The name of the secondary cluster you wish to remove from the Global datastore
    ///   - replicationGroupRegion: The Amazon region of secondary cluster you wish to remove from the Global datastore
    ///   - logger: Logger use during operation
    @inlinable
    public func disassociateGlobalReplicationGroup(
        globalReplicationGroupId: String? = nil,
        replicationGroupId: String? = nil,
        replicationGroupRegion: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> DisassociateGlobalReplicationGroupResult {
        let input = DisassociateGlobalReplicationGroupMessage(
            globalReplicationGroupId: globalReplicationGroupId, 
            replicationGroupId: replicationGroupId, 
            replicationGroupRegion: replicationGroupRegion
        )
        return try await self.disassociateGlobalReplicationGroup(input, logger: logger)
    }

    /// Provides the functionality to export the serverless cache snapshot data to Amazon S3. Available for Redis OSS only.
    @Sendable
    @inlinable
    public func exportServerlessCacheSnapshot(_ input: ExportServerlessCacheSnapshotRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> ExportServerlessCacheSnapshotResponse {
        try await self.client.execute(
            operation: "ExportServerlessCacheSnapshot", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Provides the functionality to export the serverless cache snapshot data to Amazon S3. Available for Redis OSS only.
    ///
    /// Parameters:
    ///   - s3BucketName: Name of the Amazon S3 bucket to export the snapshot to. The Amazon S3 bucket must also be in same region  as the snapshot. Available for Redis OSS only.
    ///   - serverlessCacheSnapshotName: The identifier of the serverless cache snapshot to be exported to S3. Available for Redis OSS only.
    ///   - logger: Logger use during operation
    @inlinable
    public func exportServerlessCacheSnapshot(
        s3BucketName: String? = nil,
        serverlessCacheSnapshotName: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> ExportServerlessCacheSnapshotResponse {
        let input = ExportServerlessCacheSnapshotRequest(
            s3BucketName: s3BucketName, 
            serverlessCacheSnapshotName: serverlessCacheSnapshotName
        )
        return try await self.exportServerlessCacheSnapshot(input, logger: logger)
    }

    /// Used to failover the primary region to a secondary region. The secondary region will become primary, and all other clusters will become secondary.
    @Sendable
    @inlinable
    public func failoverGlobalReplicationGroup(_ input: FailoverGlobalReplicationGroupMessage, logger: Logger = AWSClient.loggingDisabled) async throws -> FailoverGlobalReplicationGroupResult {
        try await self.client.execute(
            operation: "FailoverGlobalReplicationGroup", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Used to failover the primary region to a secondary region. The secondary region will become primary, and all other clusters will become secondary.
    ///
    /// Parameters:
    ///   - globalReplicationGroupId: The name of the Global datastore
    ///   - primaryRegion: The Amazon region of the primary cluster of the Global datastore
    ///   - primaryReplicationGroupId: The name of the primary replication group
    ///   - logger: Logger use during operation
    @inlinable
    public func failoverGlobalReplicationGroup(
        globalReplicationGroupId: String? = nil,
        primaryRegion: String? = nil,
        primaryReplicationGroupId: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> FailoverGlobalReplicationGroupResult {
        let input = FailoverGlobalReplicationGroupMessage(
            globalReplicationGroupId: globalReplicationGroupId, 
            primaryRegion: primaryRegion, 
            primaryReplicationGroupId: primaryReplicationGroupId
        )
        return try await self.failoverGlobalReplicationGroup(input, logger: logger)
    }

    /// Increase the number of node groups in the Global datastore
    @Sendable
    @inlinable
    public func increaseNodeGroupsInGlobalReplicationGroup(_ input: IncreaseNodeGroupsInGlobalReplicationGroupMessage, logger: Logger = AWSClient.loggingDisabled) async throws -> IncreaseNodeGroupsInGlobalReplicationGroupResult {
        try await self.client.execute(
            operation: "IncreaseNodeGroupsInGlobalReplicationGroup", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Increase the number of node groups in the Global datastore
    ///
    /// Parameters:
    ///   - applyImmediately: Indicates that the process begins immediately. At present, the only permitted value for this parameter is true.
    ///   - globalReplicationGroupId: The name of the Global datastore
    ///   - nodeGroupCount: Total number of node groups you want
    ///   - regionalConfigurations: Describes the replication group IDs, the Amazon regions where they are stored and the shard configuration for each that comprise the Global datastore
    ///   - logger: Logger use during operation
    @inlinable
    public func increaseNodeGroupsInGlobalReplicationGroup(
        applyImmediately: Bool? = nil,
        globalReplicationGroupId: String? = nil,
        nodeGroupCount: Int? = nil,
        regionalConfigurations: [RegionalConfiguration]? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> IncreaseNodeGroupsInGlobalReplicationGroupResult {
        let input = IncreaseNodeGroupsInGlobalReplicationGroupMessage(
            applyImmediately: applyImmediately, 
            globalReplicationGroupId: globalReplicationGroupId, 
            nodeGroupCount: nodeGroupCount, 
            regionalConfigurations: regionalConfigurations
        )
        return try await self.increaseNodeGroupsInGlobalReplicationGroup(input, logger: logger)
    }

    /// Dynamically increases the number of replicas in a Redis OSS (cluster mode disabled) replication group or the number of replica nodes in one or more node groups (shards) of a Redis OSS (cluster mode enabled) replication group. This operation is performed with no cluster down time.
    @Sendable
    @inlinable
    public func increaseReplicaCount(_ input: IncreaseReplicaCountMessage, logger: Logger = AWSClient.loggingDisabled) async throws -> IncreaseReplicaCountResult {
        try await self.client.execute(
            operation: "IncreaseReplicaCount", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Dynamically increases the number of replicas in a Redis OSS (cluster mode disabled) replication group or the number of replica nodes in one or more node groups (shards) of a Redis OSS (cluster mode enabled) replication group. This operation is performed with no cluster down time.
    ///
    /// Parameters:
    ///   - applyImmediately: If True, the number of replica nodes is increased immediately. ApplyImmediately=False is not currently supported.
    ///   - newReplicaCount: The number of read replica nodes you want at the completion of this operation. For Redis OSS (cluster mode disabled) replication groups, this is the number of replica nodes in the replication group. For Redis OSS (cluster mode enabled) replication groups, this is the number of replica nodes in each of the replication group's node groups.
    ///   - replicaConfiguration: A list of ConfigureShard objects that can be used to configure each shard in a Redis OSS (cluster mode enabled) replication group. The ConfigureShard has three members: NewReplicaCount, NodeGroupId, and PreferredAvailabilityZones.
    ///   - replicationGroupId: The id of the replication group to which you want to add replica nodes.
    ///   - logger: Logger use during operation
    @inlinable
    public func increaseReplicaCount(
        applyImmediately: Bool? = nil,
        newReplicaCount: Int? = nil,
        replicaConfiguration: [ConfigureShard]? = nil,
        replicationGroupId: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> IncreaseReplicaCountResult {
        let input = IncreaseReplicaCountMessage(
            applyImmediately: applyImmediately, 
            newReplicaCount: newReplicaCount, 
            replicaConfiguration: replicaConfiguration, 
            replicationGroupId: replicationGroupId
        )
        return try await self.increaseReplicaCount(input, logger: logger)
    }

    /// Lists all available node types that you can scale your Redis OSS cluster's or replication group's current node type. When you use the ModifyCacheCluster or ModifyReplicationGroup operations to scale your cluster or replication group, the value of the CacheNodeType parameter must be one of the node types returned by this operation.
    @Sendable
    @inlinable
    public func listAllowedNodeTypeModifications(_ input: ListAllowedNodeTypeModificationsMessage, logger: Logger = AWSClient.loggingDisabled) async throws -> AllowedNodeTypeModificationsMessage {
        try await self.client.execute(
            operation: "ListAllowedNodeTypeModifications", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Lists all available node types that you can scale your Redis OSS cluster's or replication group's current node type. When you use the ModifyCacheCluster or ModifyReplicationGroup operations to scale your cluster or replication group, the value of the CacheNodeType parameter must be one of the node types returned by this operation.
    ///
    /// Parameters:
    ///   - cacheClusterId: The name of the cluster you want to scale up to a larger node instanced type. ElastiCache uses the cluster id to identify the current node type of this cluster and from that to create a list of node types you can scale up to.  You must provide a value for either the CacheClusterId or the ReplicationGroupId.
    ///   - replicationGroupId: The name of the replication group want to scale up to a larger node type. ElastiCache uses the replication group id to identify the current node type being used by this replication group, and from that to create a list of node types you can scale up to.  You must provide a value for either the CacheClusterId or the ReplicationGroupId.
    ///   - logger: Logger use during operation
    @inlinable
    public func listAllowedNodeTypeModifications(
        cacheClusterId: String? = nil,
        replicationGroupId: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> AllowedNodeTypeModificationsMessage {
        let input = ListAllowedNodeTypeModificationsMessage(
            cacheClusterId: cacheClusterId, 
            replicationGroupId: replicationGroupId
        )
        return try await self.listAllowedNodeTypeModifications(input, logger: logger)
    }

    /// Lists all tags currently on a named resource. A tag is a key-value pair where the key and value are case-sensitive. You can use tags to categorize and track all your ElastiCache resources, with the exception of global replication group. When you add or remove tags on replication groups, those actions will be replicated to all nodes in the replication group. For more information, see Resource-level permissions. If the cluster is not in the available state, ListTagsForResource returns an error.
    @Sendable
    @inlinable
    public func listTagsForResource(_ input: ListTagsForResourceMessage, logger: Logger = AWSClient.loggingDisabled) async throws -> TagListMessage {
        try await self.client.execute(
            operation: "ListTagsForResource", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Lists all tags currently on a named resource. A tag is a key-value pair where the key and value are case-sensitive. You can use tags to categorize and track all your ElastiCache resources, with the exception of global replication group. When you add or remove tags on replication groups, those actions will be replicated to all nodes in the replication group. For more information, see Resource-level permissions. If the cluster is not in the available state, ListTagsForResource returns an error.
    ///
    /// Parameters:
    ///   - resourceName: The Amazon Resource Name (ARN) of the resource for which you want the list of tags, for example arn:aws:elasticache:us-west-2:0123456789:cluster:myCluster or arn:aws:elasticache:us-west-2:0123456789:snapshot:mySnapshot. For more information about ARNs, see Amazon Resource Names (ARNs) and Amazon Web Services Service Namespaces.
    ///   - logger: Logger use during operation
    @inlinable
    public func listTagsForResource(
        resourceName: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> TagListMessage {
        let input = ListTagsForResourceMessage(
            resourceName: resourceName
        )
        return try await self.listTagsForResource(input, logger: logger)
    }

    /// Modifies the settings for a cluster. You can use this operation to change one or more cluster configuration parameters by specifying the parameters and the new values.
    @Sendable
    @inlinable
    public func modifyCacheCluster(_ input: ModifyCacheClusterMessage, logger: Logger = AWSClient.loggingDisabled) async throws -> ModifyCacheClusterResult {
        try await self.client.execute(
            operation: "ModifyCacheCluster", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Modifies the settings for a cluster. You can use this operation to change one or more cluster configuration parameters by specifying the parameters and the new values.
    ///
    /// Parameters:
    ///   - applyImmediately: If true, this parameter causes the modifications in this request and any pending modifications to be applied, asynchronously and as soon as possible, regardless of the PreferredMaintenanceWindow setting for the cluster. If false, changes to the cluster are applied on the next maintenance reboot, or the next failure reboot, whichever occurs first.  If you perform a ModifyCacheCluster before a pending modification is applied, the pending modification is replaced by the newer modification.  Valid values: true | false  Default: false
    ///   - authToken: Reserved parameter. The password used to access a password protected server. This parameter must be specified with the auth-token-update parameter. Password constraints:   Must be only printable ASCII characters   Must be at least 16 characters and no more than 128 characters in length   Cannot contain any of the following characters: '/', '"', or '@', '%'   For more information, see AUTH password at AUTH.
    ///   - authTokenUpdateStrategy: Specifies the strategy to use to update the AUTH token. This parameter must be specified with the auth-token parameter. Possible values:   ROTATE - default, if no update strategy is provided   SET - allowed only after ROTATE   DELETE - allowed only when transitioning to RBAC   For more information, see Authenticating Users with Redis OSS AUTH
    ///   - autoMinorVersionUpgrade:  If you are running Redis OSS engine version 6.0 or later, set this parameter to yes if you want to opt-in to the next auto minor version upgrade campaign. This parameter is disabled for previous versions.
    ///   - azMode: Specifies whether the new nodes in this Memcached cluster are all created in a single Availability Zone or created across multiple Availability Zones. Valid values: single-az | cross-az. This option is only supported for Memcached clusters.  You cannot specify single-az if the Memcached cluster already has cache nodes in different Availability Zones. If cross-az is specified, existing Memcached nodes remain in their current Availability Zone. Only newly created nodes are located in different Availability Zones.
    ///   - cacheClusterId: The cluster identifier. This value is stored as a lowercase string.
    ///   - cacheNodeIdsToRemove: A list of cache node IDs to be removed. A node ID is a numeric identifier (0001, 0002, etc.). This parameter is only valid when NumCacheNodes is less than the existing number of cache nodes. The number of cache node IDs supplied in this parameter must match the difference between the existing number of cache nodes in the cluster or pending cache nodes, whichever is greater, and the value of NumCacheNodes in the request. For example: If you have 3 active cache nodes, 7 pending cache nodes, and the number of cache nodes in this ModifyCacheCluster call is 5, you must list 2 (7 - 5) cache node IDs to remove.
    ///   - cacheNodeType: A valid cache node type that you want to scale this cluster up to.
    ///   - cacheParameterGroupName: The name of the cache parameter group to apply to this cluster. This change is asynchronously applied as soon as possible for parameters when the ApplyImmediately parameter is specified as true for this request.
    ///   - cacheSecurityGroupNames: A list of cache security group names to authorize on this cluster. This change is asynchronously applied as soon as possible. You can use this parameter only with clusters that are created outside of an Amazon Virtual Private Cloud (Amazon VPC). Constraints: Must contain no more than 255 alphanumeric characters. Must not be "Default".
    ///   - engineVersion: The upgraded version of the cache engine to be run on the cache nodes.  Important: You can upgrade to a newer engine version (see Selecting a Cache Engine and Version), but you cannot downgrade to an earlier engine version. If you want to use an earlier engine version, you must delete the existing cluster and create it anew with the earlier engine version.
    ///   - ipDiscovery: The network type you choose when modifying a cluster, either ipv4 | ipv6. IPv6 is supported for workloads using Redis OSS engine version 6.2 onward or Memcached engine version 1.6.6 on all instances built on the Nitro system.
    ///   - logDeliveryConfigurations: Specifies the destination, format and type of the logs.
    ///   - newAvailabilityZones:  This option is only supported on Memcached clusters.  The list of Availability Zones where the new Memcached cache nodes are created. This parameter is only valid when NumCacheNodes in the request is greater than the sum of the number of active cache nodes and the number of cache nodes pending creation (which may be zero). The number of Availability Zones supplied in this list must match the cache nodes being added in this request. Scenarios:    Scenario 1: You have 3 active nodes and wish to add 2 nodes. Specify NumCacheNodes=5 (3 + 2) and optionally specify two Availability Zones for the two new nodes.    Scenario 2: You have 3 active nodes and 2 nodes pending creation (from the scenario 1 call) and want to add 1 more node. Specify NumCacheNodes=6 ((3 + 2) + 1) and optionally specify an Availability Zone for the new node.    Scenario 3: You want to cancel all pending operations. Specify NumCacheNodes=3 to cancel all pending operations.   The Availability Zone placement of nodes pending creation cannot be modified. If you wish to cancel any nodes pending creation, add 0 nodes by setting NumCacheNodes to the number of current nodes. If cross-az is specified, existing Memcached nodes remain in their current Availability Zone. Only newly created nodes can be located in different Availability Zones. For guidance on how to move existing Memcached nodes to different Availability Zones, see the Availability Zone Considerations section of Cache Node Considerations for Memcached.  Impact of new add/remove requests upon pending requests    Scenario-1   Pending Action: Delete   New Request: Delete   Result: The new delete, pending or immediate, replaces the pending delete.     Scenario-2   Pending Action: Delete   New Request: Create   Result: The new create, pending or immediate, replaces the pending delete.     Scenario-3   Pending Action: Create   New Request: Delete   Result: The new delete, pending or immediate, replaces the pending create.     Scenario-4   Pending Action: Create   New Request: Create   Result: The new create is added to the pending create.   Important: If the new create request is Apply Immediately - Yes, all creates are performed immediately. If the new create request is Apply Immediately - No, all creates are pending.
    ///   - notificationTopicArn: The Amazon Resource Name (ARN) of the Amazon SNS topic to which notifications are sent.  The Amazon SNS topic owner must be same as the cluster owner.
    ///   - notificationTopicStatus: The status of the Amazon SNS notification topic. Notifications are sent only if the status is active. Valid values: active | inactive
    ///   - numCacheNodes: The number of cache nodes that the cluster should have. If the value for NumCacheNodes is greater than the sum of the number of current cache nodes and the number of cache nodes pending creation (which may be zero), more nodes are added. If the value is less than the number of existing cache nodes, nodes are removed. If the value is equal to the number of current cache nodes, any pending add or remove requests are canceled. If you are removing cache nodes, you must use the CacheNodeIdsToRemove parameter to provide the IDs of the specific cache nodes to remove. For clusters running Redis OSS, this value must be 1. For clusters running Memcached, this value must be between 1 and 40.  Adding or removing Memcached cache nodes can be applied immediately or as a pending operation (see ApplyImmediately). A pending operation to modify the number of cache nodes in a cluster during its maintenance window, whether by adding or removing nodes in accordance with the scale out architecture, is not queued. The customer's latest request to add or remove nodes to the cluster overrides any previous pending operations to modify the number of cache nodes in the cluster. For example, a request to remove 2 nodes would override a previous pending operation to remove 3 nodes. Similarly, a request to add 2 nodes would override a previous pending operation to remove 3 nodes and vice versa. As Memcached cache nodes may now be provisioned in different Availability Zones with flexible cache node placement, a request to add nodes does not automatically override a previous pending operation to add nodes. The customer can modify the previous pending operation to add more nodes or explicitly cancel the pending request and retry the new request. To cancel pending operations to modify the number of cache nodes in a cluster, use the ModifyCacheCluster request and set NumCacheNodes equal to the number of cache nodes currently in the cluster.
    ///   - preferredMaintenanceWindow: Specifies the weekly time range during which maintenance on the cluster is performed. It is specified as a range in the format ddd:hh24:mi-ddd:hh24:mi (24H Clock UTC). The minimum maintenance window is a 60 minute period. Valid values for ddd are:    sun     mon     tue     wed     thu     fri     sat    Example: sun:23:00-mon:01:30
    ///   - securityGroupIds: Specifies the VPC Security Groups associated with the cluster. This parameter can be used only with clusters that are created in an Amazon Virtual Private Cloud (Amazon VPC).
    ///   - snapshotRetentionLimit: The number of days for which ElastiCache retains automatic cluster snapshots before deleting them. For example, if you set SnapshotRetentionLimit to 5, a snapshot that was taken today is retained for 5 days before being deleted.  If the value of SnapshotRetentionLimit is set to zero (0), backups are turned off.
    ///   - snapshotWindow: The daily time range (in UTC) during which ElastiCache begins taking a daily snapshot of your cluster.
    ///   - logger: Logger use during operation
    @inlinable
    public func modifyCacheCluster(
        applyImmediately: Bool? = nil,
        authToken: String? = nil,
        authTokenUpdateStrategy: AuthTokenUpdateStrategyType? = nil,
        autoMinorVersionUpgrade: Bool? = nil,
        azMode: AZMode? = nil,
        cacheClusterId: String? = nil,
        cacheNodeIdsToRemove: [String]? = nil,
        cacheNodeType: String? = nil,
        cacheParameterGroupName: String? = nil,
        cacheSecurityGroupNames: [String]? = nil,
        engineVersion: String? = nil,
        ipDiscovery: IpDiscovery? = nil,
        logDeliveryConfigurations: [LogDeliveryConfigurationRequest]? = nil,
        newAvailabilityZones: [String]? = nil,
        notificationTopicArn: String? = nil,
        notificationTopicStatus: String? = nil,
        numCacheNodes: Int? = nil,
        preferredMaintenanceWindow: String? = nil,
        securityGroupIds: [String]? = nil,
        snapshotRetentionLimit: Int? = nil,
        snapshotWindow: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> ModifyCacheClusterResult {
        let input = ModifyCacheClusterMessage(
            applyImmediately: applyImmediately, 
            authToken: authToken, 
            authTokenUpdateStrategy: authTokenUpdateStrategy, 
            autoMinorVersionUpgrade: autoMinorVersionUpgrade, 
            azMode: azMode, 
            cacheClusterId: cacheClusterId, 
            cacheNodeIdsToRemove: cacheNodeIdsToRemove, 
            cacheNodeType: cacheNodeType, 
            cacheParameterGroupName: cacheParameterGroupName, 
            cacheSecurityGroupNames: cacheSecurityGroupNames, 
            engineVersion: engineVersion, 
            ipDiscovery: ipDiscovery, 
            logDeliveryConfigurations: logDeliveryConfigurations, 
            newAvailabilityZones: newAvailabilityZones, 
            notificationTopicArn: notificationTopicArn, 
            notificationTopicStatus: notificationTopicStatus, 
            numCacheNodes: numCacheNodes, 
            preferredMaintenanceWindow: preferredMaintenanceWindow, 
            securityGroupIds: securityGroupIds, 
            snapshotRetentionLimit: snapshotRetentionLimit, 
            snapshotWindow: snapshotWindow
        )
        return try await self.modifyCacheCluster(input, logger: logger)
    }

    /// Modifies the parameters of a cache parameter group. You can modify up to 20 parameters in a single request by submitting a list parameter name and value pairs.
    @Sendable
    @inlinable
    public func modifyCacheParameterGroup(_ input: ModifyCacheParameterGroupMessage, logger: Logger = AWSClient.loggingDisabled) async throws -> CacheParameterGroupNameMessage {
        try await self.client.execute(
            operation: "ModifyCacheParameterGroup", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Modifies the parameters of a cache parameter group. You can modify up to 20 parameters in a single request by submitting a list parameter name and value pairs.
    ///
    /// Parameters:
    ///   - cacheParameterGroupName: The name of the cache parameter group to modify.
    ///   - parameterNameValues: An array of parameter names and values for the parameter update. You must supply at least one parameter name and value; subsequent arguments are optional. A maximum of 20 parameters may be modified per request.
    ///   - logger: Logger use during operation
    @inlinable
    public func modifyCacheParameterGroup(
        cacheParameterGroupName: String? = nil,
        parameterNameValues: [ParameterNameValue]? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> CacheParameterGroupNameMessage {
        let input = ModifyCacheParameterGroupMessage(
            cacheParameterGroupName: cacheParameterGroupName, 
            parameterNameValues: parameterNameValues
        )
        return try await self.modifyCacheParameterGroup(input, logger: logger)
    }

    /// Modifies an existing cache subnet group.
    @Sendable
    @inlinable
    public func modifyCacheSubnetGroup(_ input: ModifyCacheSubnetGroupMessage, logger: Logger = AWSClient.loggingDisabled) async throws -> ModifyCacheSubnetGroupResult {
        try await self.client.execute(
            operation: "ModifyCacheSubnetGroup", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Modifies an existing cache subnet group.
    ///
    /// Parameters:
    ///   - cacheSubnetGroupDescription: A description of the cache subnet group.
    ///   - cacheSubnetGroupName: The name for the cache subnet group. This value is stored as a lowercase string. Constraints: Must contain no more than 255 alphanumeric characters or hyphens. Example: mysubnetgroup
    ///   - subnetIds: The EC2 subnet IDs for the cache subnet group.
    ///   - logger: Logger use during operation
    @inlinable
    public func modifyCacheSubnetGroup(
        cacheSubnetGroupDescription: String? = nil,
        cacheSubnetGroupName: String? = nil,
        subnetIds: [String]? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> ModifyCacheSubnetGroupResult {
        let input = ModifyCacheSubnetGroupMessage(
            cacheSubnetGroupDescription: cacheSubnetGroupDescription, 
            cacheSubnetGroupName: cacheSubnetGroupName, 
            subnetIds: subnetIds
        )
        return try await self.modifyCacheSubnetGroup(input, logger: logger)
    }

    /// Modifies the settings for a Global datastore.
    @Sendable
    @inlinable
    public func modifyGlobalReplicationGroup(_ input: ModifyGlobalReplicationGroupMessage, logger: Logger = AWSClient.loggingDisabled) async throws -> ModifyGlobalReplicationGroupResult {
        try await self.client.execute(
            operation: "ModifyGlobalReplicationGroup", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Modifies the settings for a Global datastore.
    ///
    /// Parameters:
    ///   - applyImmediately: This parameter causes the modifications in this request and any pending modifications to be applied, asynchronously and as soon as possible. Modifications to Global Replication Groups cannot be requested to be applied in PreferredMaintenceWindow.
    ///   - automaticFailoverEnabled: Determines whether a read replica is automatically promoted to read/write primary if the existing primary encounters a failure.
    ///   - cacheNodeType: A valid cache node type that you want to scale this Global datastore to.
    ///   - cacheParameterGroupName: The name of the cache parameter group to use with the Global datastore. It must be compatible with the major engine version used by the Global datastore.
    ///   - engineVersion: The upgraded version of the cache engine to be run on the clusters in the Global datastore.
    ///   - globalReplicationGroupDescription: A description of the Global datastore
    ///   - globalReplicationGroupId: The name of the Global datastore
    ///   - logger: Logger use during operation
    @inlinable
    public func modifyGlobalReplicationGroup(
        applyImmediately: Bool? = nil,
        automaticFailoverEnabled: Bool? = nil,
        cacheNodeType: String? = nil,
        cacheParameterGroupName: String? = nil,
        engineVersion: String? = nil,
        globalReplicationGroupDescription: String? = nil,
        globalReplicationGroupId: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> ModifyGlobalReplicationGroupResult {
        let input = ModifyGlobalReplicationGroupMessage(
            applyImmediately: applyImmediately, 
            automaticFailoverEnabled: automaticFailoverEnabled, 
            cacheNodeType: cacheNodeType, 
            cacheParameterGroupName: cacheParameterGroupName, 
            engineVersion: engineVersion, 
            globalReplicationGroupDescription: globalReplicationGroupDescription, 
            globalReplicationGroupId: globalReplicationGroupId
        )
        return try await self.modifyGlobalReplicationGroup(input, logger: logger)
    }

    /// Modifies the settings for a replication group. This is limited to Redis OSS 7 and newer.    Scaling for Amazon ElastiCache (Redis OSS) (cluster mode enabled) in the ElastiCache User Guide    ModifyReplicationGroupShardConfiguration in the ElastiCache API Reference    This operation is valid for Redis OSS only.
    @Sendable
    @inlinable
    public func modifyReplicationGroup(_ input: ModifyReplicationGroupMessage, logger: Logger = AWSClient.loggingDisabled) async throws -> ModifyReplicationGroupResult {
        try await self.client.execute(
            operation: "ModifyReplicationGroup", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Modifies the settings for a replication group. This is limited to Redis OSS 7 and newer.    Scaling for Amazon ElastiCache (Redis OSS) (cluster mode enabled) in the ElastiCache User Guide    ModifyReplicationGroupShardConfiguration in the ElastiCache API Reference    This operation is valid for Redis OSS only.
    ///
    /// Parameters:
    ///   - applyImmediately: If true, this parameter causes the modifications in this request and any pending modifications to be applied, asynchronously and as soon as possible, regardless of the PreferredMaintenanceWindow setting for the replication group. If false, changes to the nodes in the replication group are applied on the next maintenance reboot, or the next failure reboot, whichever occurs first. Valid values: true | false  Default: false
    ///   - authToken: Reserved parameter. The password used to access a password protected server. This parameter must be specified with the auth-token-update-strategy  parameter. Password constraints:   Must be only printable ASCII characters   Must be at least 16 characters and no more than 128 characters in length   Cannot contain any of the following characters: '/', '"', or '@', '%'   For more information, see AUTH password at AUTH.
    ///   - authTokenUpdateStrategy: Specifies the strategy to use to update the AUTH token. This parameter must be specified with the auth-token parameter. Possible values:   ROTATE - default, if no update strategy is provided   SET - allowed only after ROTATE   DELETE - allowed only when transitioning to RBAC   For more information, see Authenticating Users with Redis OSS AUTH
    ///   - automaticFailoverEnabled: Determines whether a read replica is automatically promoted to read/write primary if the existing primary encounters a failure. Valid values: true | false
    ///   - autoMinorVersionUpgrade:  If you are running Redis OSS engine version 6.0 or later, set this parameter to yes if you want to opt-in to the next auto minor version upgrade campaign. This parameter is disabled for previous versions.
    ///   - cacheNodeType: A valid cache node type that you want to scale this replication group to.
    ///   - cacheParameterGroupName: The name of the cache parameter group to apply to all of the clusters in this replication group. This change is asynchronously applied as soon as possible for parameters when the ApplyImmediately parameter is specified as true for this request.
    ///   - cacheSecurityGroupNames: A list of cache security group names to authorize for the clusters in this replication group. This change is asynchronously applied as soon as possible. This parameter can be used only with replication group containing clusters running outside of an Amazon Virtual Private Cloud (Amazon VPC). Constraints: Must contain no more than 255 alphanumeric characters. Must not be Default.
    ///   - clusterMode: Enabled or Disabled. To modify cluster mode from Disabled to Enabled, you must first set the cluster mode to Compatible. Compatible mode allows your Redis OSS clients to connect using both cluster mode enabled and cluster mode disabled. After you migrate all Redis OSS clients to use cluster mode enabled, you can then complete cluster mode configuration and set the cluster mode to Enabled.
    ///   - engineVersion: The upgraded version of the cache engine to be run on the clusters in the replication group.  Important: You can upgrade to a newer engine version (see Selecting a Cache Engine and Version), but you cannot downgrade to an earlier engine version. If you want to use an earlier engine version, you must delete the existing replication group and create it anew with the earlier engine version.
    ///   - ipDiscovery: The network type you choose when modifying a cluster, either ipv4 | ipv6. IPv6 is supported for workloads using Redis OSS engine version 6.2 onward or Memcached engine version 1.6.6 on all instances built on the Nitro system.
    ///   - logDeliveryConfigurations: Specifies the destination, format and type of the logs.
    ///   - multiAZEnabled: A flag to indicate MultiAZ is enabled.
    ///   - notificationTopicArn: The Amazon Resource Name (ARN) of the Amazon SNS topic to which notifications are sent.  The Amazon SNS topic owner must be same as the replication group owner.
    ///   - notificationTopicStatus: The status of the Amazon SNS notification topic for the replication group. Notifications are sent only if the status is active. Valid values: active | inactive
    ///   - preferredMaintenanceWindow: Specifies the weekly time range during which maintenance on the cluster is performed. It is specified as a range in the format ddd:hh24:mi-ddd:hh24:mi (24H Clock UTC). The minimum maintenance window is a 60 minute period. Valid values for ddd are:    sun     mon     tue     wed     thu     fri     sat    Example: sun:23:00-mon:01:30
    ///   - primaryClusterId: For replication groups with a single primary, if this parameter is specified, ElastiCache promotes the specified cluster in the specified replication group to the primary role. The nodes of all other clusters in the replication group are read replicas.
    ///   - removeUserGroups: Removes the user group associated with this replication group.
    ///   - replicationGroupDescription: A description for the replication group. Maximum length is 255 characters.
    ///   - replicationGroupId: The identifier of the replication group to modify.
    ///   - securityGroupIds: Specifies the VPC Security Groups associated with the clusters in the replication group. This parameter can be used only with replication group containing clusters running in an Amazon Virtual Private Cloud (Amazon VPC).
    ///   - snapshotRetentionLimit: The number of days for which ElastiCache retains automatic node group (shard) snapshots before deleting them. For example, if you set SnapshotRetentionLimit to 5, a snapshot that was taken today is retained for 5 days before being deleted.  Important If the value of SnapshotRetentionLimit is set to zero (0), backups are turned off.
    ///   - snapshottingClusterId: The cluster ID that is used as the daily snapshot source for the replication group. This parameter cannot be set for Redis OSS (cluster mode enabled) replication groups.
    ///   - snapshotWindow: The daily time range (in UTC) during which ElastiCache begins taking a daily snapshot of the node group (shard) specified by SnapshottingClusterId. Example: 05:00-09:00  If you do not specify this parameter, ElastiCache automatically chooses an appropriate time range.
    ///   - transitEncryptionEnabled: A flag that enables in-transit encryption when set to true. If you are enabling in-transit encryption for an existing cluster, you must also set TransitEncryptionMode to preferred.
    ///   - transitEncryptionMode: A setting that allows you to migrate your clients to use in-transit encryption, with no downtime. You must set TransitEncryptionEnabled to true, for your existing cluster, and set TransitEncryptionMode to preferred in the same request to allow both encrypted and unencrypted connections at the same time. Once you migrate all your Redis OSS clients to use encrypted connections you can set the value to required to allow encrypted connections only. Setting TransitEncryptionMode to required is a two-step process that requires you to first set the TransitEncryptionMode to preferred, after that you can set TransitEncryptionMode to required.
    ///   - userGroupIdsToAdd: The ID of the user group you are associating with the replication group.
    ///   - userGroupIdsToRemove: The ID of the user group to disassociate from the replication group, meaning the users in the group no longer can access the replication group.
    ///   - logger: Logger use during operation
    @inlinable
    public func modifyReplicationGroup(
        applyImmediately: Bool? = nil,
        authToken: String? = nil,
        authTokenUpdateStrategy: AuthTokenUpdateStrategyType? = nil,
        automaticFailoverEnabled: Bool? = nil,
        autoMinorVersionUpgrade: Bool? = nil,
        cacheNodeType: String? = nil,
        cacheParameterGroupName: String? = nil,
        cacheSecurityGroupNames: [String]? = nil,
        clusterMode: ClusterMode? = nil,
        engineVersion: String? = nil,
        ipDiscovery: IpDiscovery? = nil,
        logDeliveryConfigurations: [LogDeliveryConfigurationRequest]? = nil,
        multiAZEnabled: Bool? = nil,
        notificationTopicArn: String? = nil,
        notificationTopicStatus: String? = nil,
        preferredMaintenanceWindow: String? = nil,
        primaryClusterId: String? = nil,
        removeUserGroups: Bool? = nil,
        replicationGroupDescription: String? = nil,
        replicationGroupId: String? = nil,
        securityGroupIds: [String]? = nil,
        snapshotRetentionLimit: Int? = nil,
        snapshottingClusterId: String? = nil,
        snapshotWindow: String? = nil,
        transitEncryptionEnabled: Bool? = nil,
        transitEncryptionMode: TransitEncryptionMode? = nil,
        userGroupIdsToAdd: [String]? = nil,
        userGroupIdsToRemove: [String]? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> ModifyReplicationGroupResult {
        let input = ModifyReplicationGroupMessage(
            applyImmediately: applyImmediately, 
            authToken: authToken, 
            authTokenUpdateStrategy: authTokenUpdateStrategy, 
            automaticFailoverEnabled: automaticFailoverEnabled, 
            autoMinorVersionUpgrade: autoMinorVersionUpgrade, 
            cacheNodeType: cacheNodeType, 
            cacheParameterGroupName: cacheParameterGroupName, 
            cacheSecurityGroupNames: cacheSecurityGroupNames, 
            clusterMode: clusterMode, 
            engineVersion: engineVersion, 
            ipDiscovery: ipDiscovery, 
            logDeliveryConfigurations: logDeliveryConfigurations, 
            multiAZEnabled: multiAZEnabled, 
            notificationTopicArn: notificationTopicArn, 
            notificationTopicStatus: notificationTopicStatus, 
            preferredMaintenanceWindow: preferredMaintenanceWindow, 
            primaryClusterId: primaryClusterId, 
            removeUserGroups: removeUserGroups, 
            replicationGroupDescription: replicationGroupDescription, 
            replicationGroupId: replicationGroupId, 
            securityGroupIds: securityGroupIds, 
            snapshotRetentionLimit: snapshotRetentionLimit, 
            snapshottingClusterId: snapshottingClusterId, 
            snapshotWindow: snapshotWindow, 
            transitEncryptionEnabled: transitEncryptionEnabled, 
            transitEncryptionMode: transitEncryptionMode, 
            userGroupIdsToAdd: userGroupIdsToAdd, 
            userGroupIdsToRemove: userGroupIdsToRemove
        )
        return try await self.modifyReplicationGroup(input, logger: logger)
    }

    /// Modifies a replication group's shards (node groups) by allowing you to add shards, remove shards, or rebalance the keyspaces among existing shards.
    @Sendable
    @inlinable
    public func modifyReplicationGroupShardConfiguration(_ input: ModifyReplicationGroupShardConfigurationMessage, logger: Logger = AWSClient.loggingDisabled) async throws -> ModifyReplicationGroupShardConfigurationResult {
        try await self.client.execute(
            operation: "ModifyReplicationGroupShardConfiguration", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Modifies a replication group's shards (node groups) by allowing you to add shards, remove shards, or rebalance the keyspaces among existing shards.
    ///
    /// Parameters:
    ///   - applyImmediately: Indicates that the shard reconfiguration process begins immediately. At present, the only permitted value for this parameter is true. Value: true
    ///   - nodeGroupCount: The number of node groups (shards) that results from the modification of the shard configuration.
    ///   - nodeGroupsToRemove: If the value of NodeGroupCount is less than the current number of node groups (shards), then either NodeGroupsToRemove or NodeGroupsToRetain is required. NodeGroupsToRemove is a list of NodeGroupIds to remove from the cluster. ElastiCache (Redis OSS) will attempt to remove all node groups listed by NodeGroupsToRemove from the cluster.
    ///   - nodeGroupsToRetain: If the value of NodeGroupCount is less than the current number of node groups (shards), then either NodeGroupsToRemove or NodeGroupsToRetain is required. NodeGroupsToRetain is a list of NodeGroupIds to retain in the cluster. ElastiCache (Redis OSS) will attempt to remove all node groups except those listed by NodeGroupsToRetain from the cluster.
    ///   - replicationGroupId: The name of the Redis OSS (cluster mode enabled) cluster (replication group) on which the shards are to be configured.
    ///   - reshardingConfiguration: Specifies the preferred availability zones for each node group in the cluster. If the value of NodeGroupCount is greater than the current number of node groups (shards), you can use this parameter to specify the preferred availability zones of the cluster's shards. If you omit this parameter ElastiCache selects availability zones for you. You can specify this parameter only if the value of NodeGroupCount is greater than the current number of node groups (shards).
    ///   - logger: Logger use during operation
    @inlinable
    public func modifyReplicationGroupShardConfiguration(
        applyImmediately: Bool? = nil,
        nodeGroupCount: Int? = nil,
        nodeGroupsToRemove: [String]? = nil,
        nodeGroupsToRetain: [String]? = nil,
        replicationGroupId: String? = nil,
        reshardingConfiguration: [ReshardingConfiguration]? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> ModifyReplicationGroupShardConfigurationResult {
        let input = ModifyReplicationGroupShardConfigurationMessage(
            applyImmediately: applyImmediately, 
            nodeGroupCount: nodeGroupCount, 
            nodeGroupsToRemove: nodeGroupsToRemove, 
            nodeGroupsToRetain: nodeGroupsToRetain, 
            replicationGroupId: replicationGroupId, 
            reshardingConfiguration: reshardingConfiguration
        )
        return try await self.modifyReplicationGroupShardConfiguration(input, logger: logger)
    }

    /// This API modifies the attributes of a serverless cache.
    @Sendable
    @inlinable
    public func modifyServerlessCache(_ input: ModifyServerlessCacheRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> ModifyServerlessCacheResponse {
        try await self.client.execute(
            operation: "ModifyServerlessCache", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// This API modifies the attributes of a serverless cache.
    ///
    /// Parameters:
    ///   - cacheUsageLimits: Modify the cache usage limit for the serverless cache.
    ///   - dailySnapshotTime: The daily time during which Elasticache begins taking a daily snapshot of the serverless cache.  Available for Redis OSS and Serverless Memcached only. The default is NULL, i.e. the existing snapshot time configured for the cluster is not removed.
    ///   - description: User provided description for the serverless cache.  Default = NULL, i.e. the existing description is not removed/modified.  The description has a maximum length of 255 characters.
    ///   - removeUserGroup: The identifier of the UserGroup to be removed from association with the Redis OSS serverless cache.  Available for Redis OSS only. Default is NULL.
    ///   - securityGroupIds: The new list of VPC security groups to be associated with the serverless cache.  Populating this list means the current VPC security groups will be removed.  This security group is used to authorize traffic access for the VPC end-point (private-link).  Default = NULL -  the existing list of VPC security groups is not removed.
    ///   - serverlessCacheName: User-provided identifier for the serverless cache to be modified.
    ///   - snapshotRetentionLimit: The number of days for which Elasticache retains automatic snapshots before deleting them.  Available for Redis OSS and Serverless Memcached only. Default = NULL, i.e. the existing snapshot-retention-limit will not be removed or modified.  The maximum value allowed is 35 days.
    ///   - userGroupId: The identifier of the UserGroup to be associated with the serverless cache. Available for Redis OSS only.  Default is NULL -  the existing UserGroup is not removed.
    ///   - logger: Logger use during operation
    @inlinable
    public func modifyServerlessCache(
        cacheUsageLimits: CacheUsageLimits? = nil,
        dailySnapshotTime: String? = nil,
        description: String? = nil,
        removeUserGroup: Bool? = nil,
        securityGroupIds: [String]? = nil,
        serverlessCacheName: String? = nil,
        snapshotRetentionLimit: Int? = nil,
        userGroupId: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> ModifyServerlessCacheResponse {
        let input = ModifyServerlessCacheRequest(
            cacheUsageLimits: cacheUsageLimits, 
            dailySnapshotTime: dailySnapshotTime, 
            description: description, 
            removeUserGroup: removeUserGroup, 
            securityGroupIds: securityGroupIds, 
            serverlessCacheName: serverlessCacheName, 
            snapshotRetentionLimit: snapshotRetentionLimit, 
            userGroupId: userGroupId
        )
        return try await self.modifyServerlessCache(input, logger: logger)
    }

    /// Changes user password(s) and/or access string.
    @Sendable
    @inlinable
    public func modifyUser(_ input: ModifyUserMessage, logger: Logger = AWSClient.loggingDisabled) async throws -> User {
        try await self.client.execute(
            operation: "ModifyUser", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Changes user password(s) and/or access string.
    ///
    /// Parameters:
    ///   - accessString: Access permissions string used for this user.
    ///   - appendAccessString: Adds additional user permissions to the access string.
    ///   - authenticationMode: Specifies how to authenticate the user.
    ///   - noPasswordRequired: Indicates no password is required for the user.
    ///   - passwords: The passwords belonging to the user. You are allowed up to two.
    ///   - userId: The ID of the user.
    ///   - logger: Logger use during operation
    @inlinable
    public func modifyUser(
        accessString: String? = nil,
        appendAccessString: String? = nil,
        authenticationMode: AuthenticationMode? = nil,
        noPasswordRequired: Bool? = nil,
        passwords: [String]? = nil,
        userId: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> User {
        let input = ModifyUserMessage(
            accessString: accessString, 
            appendAccessString: appendAccessString, 
            authenticationMode: authenticationMode, 
            noPasswordRequired: noPasswordRequired, 
            passwords: passwords, 
            userId: userId
        )
        return try await self.modifyUser(input, logger: logger)
    }

    /// Changes the list of users that belong to the user group.
    @Sendable
    @inlinable
    public func modifyUserGroup(_ input: ModifyUserGroupMessage, logger: Logger = AWSClient.loggingDisabled) async throws -> UserGroup {
        try await self.client.execute(
            operation: "ModifyUserGroup", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Changes the list of users that belong to the user group.
    ///
    /// Parameters:
    ///   - userGroupId: The ID of the user group.
    ///   - userIdsToAdd: The list of user IDs to add to the user group.
    ///   - userIdsToRemove: The list of user IDs to remove from the user group.
    ///   - logger: Logger use during operation
    @inlinable
    public func modifyUserGroup(
        userGroupId: String? = nil,
        userIdsToAdd: [String]? = nil,
        userIdsToRemove: [String]? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> UserGroup {
        let input = ModifyUserGroupMessage(
            userGroupId: userGroupId, 
            userIdsToAdd: userIdsToAdd, 
            userIdsToRemove: userIdsToRemove
        )
        return try await self.modifyUserGroup(input, logger: logger)
    }

    /// Allows you to purchase a reserved cache node offering. Reserved nodes are not eligible for cancellation and are non-refundable. For more information, see Managing Costs with Reserved Nodes for Redis OSS or Managing Costs with Reserved Nodes for Memcached.
    @Sendable
    @inlinable
    public func purchaseReservedCacheNodesOffering(_ input: PurchaseReservedCacheNodesOfferingMessage, logger: Logger = AWSClient.loggingDisabled) async throws -> PurchaseReservedCacheNodesOfferingResult {
        try await self.client.execute(
            operation: "PurchaseReservedCacheNodesOffering", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Allows you to purchase a reserved cache node offering. Reserved nodes are not eligible for cancellation and are non-refundable. For more information, see Managing Costs with Reserved Nodes for Redis OSS or Managing Costs with Reserved Nodes for Memcached.
    ///
    /// Parameters:
    ///   - cacheNodeCount: The number of cache node instances to reserve. Default: 1
    ///   - reservedCacheNodeId: A customer-specified identifier to track this reservation.  The Reserved Cache Node ID is an unique customer-specified identifier to track this reservation. If this parameter is not specified, ElastiCache automatically generates an identifier for the reservation.  Example: myreservationID
    ///   - reservedCacheNodesOfferingId: The ID of the reserved cache node offering to purchase. Example: 438012d3-4052-4cc7-b2e3-8d3372e0e706
    ///   - tags: A list of tags to be added to this resource. A tag is a key-value pair. A tag key must be accompanied by a tag value, although null is accepted.
    ///   - logger: Logger use during operation
    @inlinable
    public func purchaseReservedCacheNodesOffering(
        cacheNodeCount: Int? = nil,
        reservedCacheNodeId: String? = nil,
        reservedCacheNodesOfferingId: String? = nil,
        tags: [Tag]? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> PurchaseReservedCacheNodesOfferingResult {
        let input = PurchaseReservedCacheNodesOfferingMessage(
            cacheNodeCount: cacheNodeCount, 
            reservedCacheNodeId: reservedCacheNodeId, 
            reservedCacheNodesOfferingId: reservedCacheNodesOfferingId, 
            tags: tags
        )
        return try await self.purchaseReservedCacheNodesOffering(input, logger: logger)
    }

    /// Redistribute slots to ensure uniform distribution across existing shards in the cluster.
    @Sendable
    @inlinable
    public func rebalanceSlotsInGlobalReplicationGroup(_ input: RebalanceSlotsInGlobalReplicationGroupMessage, logger: Logger = AWSClient.loggingDisabled) async throws -> RebalanceSlotsInGlobalReplicationGroupResult {
        try await self.client.execute(
            operation: "RebalanceSlotsInGlobalReplicationGroup", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Redistribute slots to ensure uniform distribution across existing shards in the cluster.
    ///
    /// Parameters:
    ///   - applyImmediately: If True, redistribution is applied immediately.
    ///   - globalReplicationGroupId: The name of the Global datastore
    ///   - logger: Logger use during operation
    @inlinable
    public func rebalanceSlotsInGlobalReplicationGroup(
        applyImmediately: Bool? = nil,
        globalReplicationGroupId: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> RebalanceSlotsInGlobalReplicationGroupResult {
        let input = RebalanceSlotsInGlobalReplicationGroupMessage(
            applyImmediately: applyImmediately, 
            globalReplicationGroupId: globalReplicationGroupId
        )
        return try await self.rebalanceSlotsInGlobalReplicationGroup(input, logger: logger)
    }

    /// Reboots some, or all, of the cache nodes within a provisioned cluster. This operation applies any modified cache parameter groups to the cluster. The reboot operation takes place as soon as possible, and results in a momentary outage to the cluster. During the reboot, the cluster status is set to REBOOTING. The reboot causes the contents of the cache (for each cache node being rebooted) to be lost. When the reboot is complete, a cluster event is created. Rebooting a cluster is currently supported on Memcached and Redis OSS (cluster mode disabled) clusters. Rebooting is not supported on Redis OSS (cluster mode enabled) clusters. If you make changes to parameters that require a Redis OSS (cluster mode enabled) cluster reboot for the changes to be applied, see Rebooting a Cluster for an alternate process.
    @Sendable
    @inlinable
    public func rebootCacheCluster(_ input: RebootCacheClusterMessage, logger: Logger = AWSClient.loggingDisabled) async throws -> RebootCacheClusterResult {
        try await self.client.execute(
            operation: "RebootCacheCluster", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Reboots some, or all, of the cache nodes within a provisioned cluster. This operation applies any modified cache parameter groups to the cluster. The reboot operation takes place as soon as possible, and results in a momentary outage to the cluster. During the reboot, the cluster status is set to REBOOTING. The reboot causes the contents of the cache (for each cache node being rebooted) to be lost. When the reboot is complete, a cluster event is created. Rebooting a cluster is currently supported on Memcached and Redis OSS (cluster mode disabled) clusters. Rebooting is not supported on Redis OSS (cluster mode enabled) clusters. If you make changes to parameters that require a Redis OSS (cluster mode enabled) cluster reboot for the changes to be applied, see Rebooting a Cluster for an alternate process.
    ///
    /// Parameters:
    ///   - cacheClusterId: The cluster identifier. This parameter is stored as a lowercase string.
    ///   - cacheNodeIdsToReboot: A list of cache node IDs to reboot. A node ID is a numeric identifier (0001, 0002, etc.). To reboot an entire cluster, specify all of the cache node IDs.
    ///   - logger: Logger use during operation
    @inlinable
    public func rebootCacheCluster(
        cacheClusterId: String? = nil,
        cacheNodeIdsToReboot: [String]? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> RebootCacheClusterResult {
        let input = RebootCacheClusterMessage(
            cacheClusterId: cacheClusterId, 
            cacheNodeIdsToReboot: cacheNodeIdsToReboot
        )
        return try await self.rebootCacheCluster(input, logger: logger)
    }

    /// Removes the tags identified by the TagKeys list from the named resource. A tag is a key-value pair where the key and value are case-sensitive. You can use tags to categorize and track all your ElastiCache resources, with the exception of global replication group. When you add or remove tags on replication groups, those actions will be replicated to all nodes in the replication group. For more information, see Resource-level permissions.
    @Sendable
    @inlinable
    public func removeTagsFromResource(_ input: RemoveTagsFromResourceMessage, logger: Logger = AWSClient.loggingDisabled) async throws -> TagListMessage {
        try await self.client.execute(
            operation: "RemoveTagsFromResource", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Removes the tags identified by the TagKeys list from the named resource. A tag is a key-value pair where the key and value are case-sensitive. You can use tags to categorize and track all your ElastiCache resources, with the exception of global replication group. When you add or remove tags on replication groups, those actions will be replicated to all nodes in the replication group. For more information, see Resource-level permissions.
    ///
    /// Parameters:
    ///   - resourceName: The Amazon Resource Name (ARN) of the resource from which you want the tags removed, for example arn:aws:elasticache:us-west-2:0123456789:cluster:myCluster or arn:aws:elasticache:us-west-2:0123456789:snapshot:mySnapshot. For more information about ARNs, see Amazon Resource Names (ARNs) and Amazon Service Namespaces.
    ///   - tagKeys: A list of TagKeys identifying the tags you want removed from the named resource.
    ///   - logger: Logger use during operation
    @inlinable
    public func removeTagsFromResource(
        resourceName: String? = nil,
        tagKeys: [String]? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> TagListMessage {
        let input = RemoveTagsFromResourceMessage(
            resourceName: resourceName, 
            tagKeys: tagKeys
        )
        return try await self.removeTagsFromResource(input, logger: logger)
    }

    /// Modifies the parameters of a cache parameter group to the engine or system default value. You can reset specific parameters by submitting a list of parameter names. To reset the entire cache parameter group, specify the ResetAllParameters and CacheParameterGroupName parameters.
    @Sendable
    @inlinable
    public func resetCacheParameterGroup(_ input: ResetCacheParameterGroupMessage, logger: Logger = AWSClient.loggingDisabled) async throws -> CacheParameterGroupNameMessage {
        try await self.client.execute(
            operation: "ResetCacheParameterGroup", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Modifies the parameters of a cache parameter group to the engine or system default value. You can reset specific parameters by submitting a list of parameter names. To reset the entire cache parameter group, specify the ResetAllParameters and CacheParameterGroupName parameters.
    ///
    /// Parameters:
    ///   - cacheParameterGroupName: The name of the cache parameter group to reset.
    ///   - parameterNameValues: An array of parameter names to reset to their default values. If ResetAllParameters is true, do not use ParameterNameValues. If ResetAllParameters is false, you must specify the name of at least one parameter to reset.
    ///   - resetAllParameters: If true, all parameters in the cache parameter group are reset to their default values. If false, only the parameters listed by ParameterNameValues are reset to their default values. Valid values: true | false
    ///   - logger: Logger use during operation
    @inlinable
    public func resetCacheParameterGroup(
        cacheParameterGroupName: String? = nil,
        parameterNameValues: [ParameterNameValue]? = nil,
        resetAllParameters: Bool? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> CacheParameterGroupNameMessage {
        let input = ResetCacheParameterGroupMessage(
            cacheParameterGroupName: cacheParameterGroupName, 
            parameterNameValues: parameterNameValues, 
            resetAllParameters: resetAllParameters
        )
        return try await self.resetCacheParameterGroup(input, logger: logger)
    }

    /// Revokes ingress from a cache security group. Use this operation to disallow access from an Amazon EC2 security group that had been previously authorized.
    @Sendable
    @inlinable
    public func revokeCacheSecurityGroupIngress(_ input: RevokeCacheSecurityGroupIngressMessage, logger: Logger = AWSClient.loggingDisabled) async throws -> RevokeCacheSecurityGroupIngressResult {
        try await self.client.execute(
            operation: "RevokeCacheSecurityGroupIngress", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Revokes ingress from a cache security group. Use this operation to disallow access from an Amazon EC2 security group that had been previously authorized.
    ///
    /// Parameters:
    ///   - cacheSecurityGroupName: The name of the cache security group to revoke ingress from.
    ///   - ec2SecurityGroupName: The name of the Amazon EC2 security group to revoke access from.
    ///   - ec2SecurityGroupOwnerId: The Amazon account number of the Amazon EC2 security group owner. Note that this is not the same thing as an Amazon access key ID - you must provide a valid Amazon account number for this parameter.
    ///   - logger: Logger use during operation
    @inlinable
    public func revokeCacheSecurityGroupIngress(
        cacheSecurityGroupName: String? = nil,
        ec2SecurityGroupName: String? = nil,
        ec2SecurityGroupOwnerId: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> RevokeCacheSecurityGroupIngressResult {
        let input = RevokeCacheSecurityGroupIngressMessage(
            cacheSecurityGroupName: cacheSecurityGroupName, 
            ec2SecurityGroupName: ec2SecurityGroupName, 
            ec2SecurityGroupOwnerId: ec2SecurityGroupOwnerId
        )
        return try await self.revokeCacheSecurityGroupIngress(input, logger: logger)
    }

    /// Start the migration of data.
    @Sendable
    @inlinable
    public func startMigration(_ input: StartMigrationMessage, logger: Logger = AWSClient.loggingDisabled) async throws -> StartMigrationResponse {
        try await self.client.execute(
            operation: "StartMigration", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Start the migration of data.
    ///
    /// Parameters:
    ///   - customerNodeEndpointList: List of endpoints from which data should be migrated. For Redis OSS (cluster mode disabled), list should have only one element.
    ///   - replicationGroupId: The ID of the replication group to which data should be migrated.
    ///   - logger: Logger use during operation
    @inlinable
    public func startMigration(
        customerNodeEndpointList: [CustomerNodeEndpoint]? = nil,
        replicationGroupId: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> StartMigrationResponse {
        let input = StartMigrationMessage(
            customerNodeEndpointList: customerNodeEndpointList, 
            replicationGroupId: replicationGroupId
        )
        return try await self.startMigration(input, logger: logger)
    }

    /// Represents the input of a TestFailover operation which tests automatic failover on a specified node group (called shard in the console) in a replication group (called cluster in the console). This API is designed for testing the behavior of your application in case of ElastiCache failover. It is not designed to be an operational tool for initiating a failover to overcome a problem you may have with the cluster. Moreover, in certain conditions such as large-scale operational events, Amazon may block this API.   Note the following    A customer can use this operation to test automatic failover on up to 15 shards (called node groups in the ElastiCache API and Amazon CLI) in any rolling 24-hour period.   If calling this operation on shards in different clusters (called replication groups in the API and CLI), the calls can be made concurrently.    If calling this operation multiple times on different shards in the same Redis OSS (cluster mode enabled) replication group, the first node replacement must complete before a subsequent call can be made.   To determine whether the node replacement is complete you can check Events using the Amazon ElastiCache console, the Amazon CLI, or the ElastiCache API. Look for the following automatic failover related events, listed here in order of occurrance:   Replication group message: Test Failover API called for node group     Cache cluster message: Failover from primary node to replica node  completed    Replication group message: Failover from primary node to replica node  completed    Cache cluster message: Recovering cache nodes     Cache cluster message: Finished recovery for cache nodes     For more information see:    Viewing ElastiCache Events in the ElastiCache User Guide     DescribeEvents in the ElastiCache API Reference     Also see, Testing Multi-AZ  in the ElastiCache User Guide.
    @Sendable
    @inlinable
    public func testFailover(_ input: TestFailoverMessage, logger: Logger = AWSClient.loggingDisabled) async throws -> TestFailoverResult {
        try await self.client.execute(
            operation: "TestFailover", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Represents the input of a TestFailover operation which tests automatic failover on a specified node group (called shard in the console) in a replication group (called cluster in the console). This API is designed for testing the behavior of your application in case of ElastiCache failover. It is not designed to be an operational tool for initiating a failover to overcome a problem you may have with the cluster. Moreover, in certain conditions such as large-scale operational events, Amazon may block this API.   Note the following    A customer can use this operation to test automatic failover on up to 15 shards (called node groups in the ElastiCache API and Amazon CLI) in any rolling 24-hour period.   If calling this operation on shards in different clusters (called replication groups in the API and CLI), the calls can be made concurrently.    If calling this operation multiple times on different shards in the same Redis OSS (cluster mode enabled) replication group, the first node replacement must complete before a subsequent call can be made.   To determine whether the node replacement is complete you can check Events using the Amazon ElastiCache console, the Amazon CLI, or the ElastiCache API. Look for the following automatic failover related events, listed here in order of occurrance:   Replication group message: Test Failover API called for node group     Cache cluster message: Failover from primary node to replica node  completed    Replication group message: Failover from primary node to replica node  completed    Cache cluster message: Recovering cache nodes     Cache cluster message: Finished recovery for cache nodes     For more information see:    Viewing ElastiCache Events in the ElastiCache User Guide     DescribeEvents in the ElastiCache API Reference     Also see, Testing Multi-AZ  in the ElastiCache User Guide.
    ///
    /// Parameters:
    ///   - nodeGroupId: The name of the node group (called shard in the console) in this replication group on which automatic failover is to be tested. You may test automatic failover on up to 15 node groups in any rolling 24-hour period.
    ///   - replicationGroupId: The name of the replication group (console: cluster) whose automatic failover is being tested by this operation.
    ///   - logger: Logger use during operation
    @inlinable
    public func testFailover(
        nodeGroupId: String? = nil,
        replicationGroupId: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> TestFailoverResult {
        let input = TestFailoverMessage(
            nodeGroupId: nodeGroupId, 
            replicationGroupId: replicationGroupId
        )
        return try await self.testFailover(input, logger: logger)
    }

    ///  Async API to test connection between source and target replication group.
    @Sendable
    @inlinable
    public func testMigration(_ input: TestMigrationMessage, logger: Logger = AWSClient.loggingDisabled) async throws -> TestMigrationResponse {
        try await self.client.execute(
            operation: "TestMigration", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    ///  Async API to test connection between source and target replication group.
    ///
    /// Parameters:
    ///   - customerNodeEndpointList:  List of endpoints from which data should be migrated. List should have only one element.
    ///   - replicationGroupId:  The ID of the replication group to which data is to be migrated.
    ///   - logger: Logger use during operation
    @inlinable
    public func testMigration(
        customerNodeEndpointList: [CustomerNodeEndpoint]? = nil,
        replicationGroupId: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> TestMigrationResponse {
        let input = TestMigrationMessage(
            customerNodeEndpointList: customerNodeEndpointList, 
            replicationGroupId: replicationGroupId
        )
        return try await self.testMigration(input, logger: logger)
    }
}

extension ElastiCache {
    /// Initializer required by `AWSService.with(middlewares:timeout:byteBufferAllocator:options)`. You are not able to use this initializer directly as there are not public
    /// initializers for `AWSServiceConfig.Patch`. Please use `AWSService.with(middlewares:timeout:byteBufferAllocator:options)` instead.
    public init(from: ElastiCache, patch: AWSServiceConfig.Patch) {
        self.client = from.client
        self.config = from.config.with(patch: patch)
    }
}

// MARK: Paginators

@available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
extension ElastiCache {
    /// Return PaginatorSequence for operation ``describeCacheClusters(_:logger:)``.
    ///
    /// - Parameters:
    ///   - input: Input for operation
    ///   - logger: Logger used for logging
    @inlinable
    public func describeCacheClustersPaginator(
        _ input: DescribeCacheClustersMessage,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<DescribeCacheClustersMessage, CacheClusterMessage> {
        return .init(
            input: input,
            command: self.describeCacheClusters,
            inputKey: \DescribeCacheClustersMessage.marker,
            outputKey: \CacheClusterMessage.marker,
            logger: logger
        )
    }
    /// Return PaginatorSequence for operation ``describeCacheClusters(_:logger:)``.
    ///
    /// - Parameters:
    ///   - cacheClusterId: The user-supplied cluster identifier. If this parameter is specified, only information about that specific cluster is returned. This parameter isn't case sensitive.
    ///   - maxRecords: The maximum number of records to include in the response. If more records exist than the specified MaxRecords value, a marker is included in the response so that the remaining results can be retrieved. Default: 100 Constraints: minimum 20; maximum 100.
    ///   - showCacheClustersNotInReplicationGroups: An optional flag that can be included in the DescribeCacheCluster request to show only nodes (API/CLI: clusters) that are not members of a replication group. In practice, this mean Memcached and single node Redis OSS clusters.
    ///   - showCacheNodeInfo: An optional flag that can be included in the DescribeCacheCluster request to retrieve information about the individual cache nodes.
    ///   - logger: Logger used for logging
    @inlinable
    public func describeCacheClustersPaginator(
        cacheClusterId: String? = nil,
        maxRecords: Int? = nil,
        showCacheClustersNotInReplicationGroups: Bool? = nil,
        showCacheNodeInfo: Bool? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) -> AWSClient.PaginatorSequence<DescribeCacheClustersMessage, CacheClusterMessage> {
        let input = DescribeCacheClustersMessage(
            cacheClusterId: cacheClusterId, 
            maxRecords: maxRecords, 
            showCacheClustersNotInReplicationGroups: showCacheClustersNotInReplicationGroups, 
            showCacheNodeInfo: showCacheNodeInfo
        )
        return self.describeCacheClustersPaginator(input, logger: logger)
    }

    /// Return PaginatorSequence for operation ``describeCacheEngineVersions(_:logger:)``.
    ///
    /// - Parameters:
    ///   - input: Input for operation
    ///   - logger: Logger used for logging
    @inlinable
    public func describeCacheEngineVersionsPaginator(
        _ input: DescribeCacheEngineVersionsMessage,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<DescribeCacheEngineVersionsMessage, CacheEngineVersionMessage> {
        return .init(
            input: input,
            command: self.describeCacheEngineVersions,
            inputKey: \DescribeCacheEngineVersionsMessage.marker,
            outputKey: \CacheEngineVersionMessage.marker,
            logger: logger
        )
    }
    /// Return PaginatorSequence for operation ``describeCacheEngineVersions(_:logger:)``.
    ///
    /// - Parameters:
    ///   - cacheParameterGroupFamily: The name of a specific cache parameter group family to return details for. Valid values are: memcached1.4 | memcached1.5 | memcached1.6 | redis2.6 | redis2.8 | redis3.2 | redis4.0 | redis5.0 | redis6.x | redis6.2 | redis7  Constraints:   Must be 1 to 255 alphanumeric characters   First character must be a letter   Cannot end with a hyphen or contain two consecutive hyphens
    ///   - defaultOnly: If true, specifies that only the default version of the specified engine or engine and major version combination is to be returned.
    ///   - engine: The cache engine to return. Valid values: memcached | redis
    ///   - engineVersion: The cache engine version to return. Example: 1.4.14
    ///   - maxRecords: The maximum number of records to include in the response. If more records exist than the specified MaxRecords value, a marker is included in the response so that the remaining results can be retrieved. Default: 100 Constraints: minimum 20; maximum 100.
    ///   - logger: Logger used for logging
    @inlinable
    public func describeCacheEngineVersionsPaginator(
        cacheParameterGroupFamily: String? = nil,
        defaultOnly: Bool? = nil,
        engine: String? = nil,
        engineVersion: String? = nil,
        maxRecords: Int? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) -> AWSClient.PaginatorSequence<DescribeCacheEngineVersionsMessage, CacheEngineVersionMessage> {
        let input = DescribeCacheEngineVersionsMessage(
            cacheParameterGroupFamily: cacheParameterGroupFamily, 
            defaultOnly: defaultOnly, 
            engine: engine, 
            engineVersion: engineVersion, 
            maxRecords: maxRecords
        )
        return self.describeCacheEngineVersionsPaginator(input, logger: logger)
    }

    /// Return PaginatorSequence for operation ``describeCacheParameterGroups(_:logger:)``.
    ///
    /// - Parameters:
    ///   - input: Input for operation
    ///   - logger: Logger used for logging
    @inlinable
    public func describeCacheParameterGroupsPaginator(
        _ input: DescribeCacheParameterGroupsMessage,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<DescribeCacheParameterGroupsMessage, CacheParameterGroupsMessage> {
        return .init(
            input: input,
            command: self.describeCacheParameterGroups,
            inputKey: \DescribeCacheParameterGroupsMessage.marker,
            outputKey: \CacheParameterGroupsMessage.marker,
            logger: logger
        )
    }
    /// Return PaginatorSequence for operation ``describeCacheParameterGroups(_:logger:)``.
    ///
    /// - Parameters:
    ///   - cacheParameterGroupName: The name of a specific cache parameter group to return details for.
    ///   - maxRecords: The maximum number of records to include in the response. If more records exist than the specified MaxRecords value, a marker is included in the response so that the remaining results can be retrieved. Default: 100 Constraints: minimum 20; maximum 100.
    ///   - logger: Logger used for logging
    @inlinable
    public func describeCacheParameterGroupsPaginator(
        cacheParameterGroupName: String? = nil,
        maxRecords: Int? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) -> AWSClient.PaginatorSequence<DescribeCacheParameterGroupsMessage, CacheParameterGroupsMessage> {
        let input = DescribeCacheParameterGroupsMessage(
            cacheParameterGroupName: cacheParameterGroupName, 
            maxRecords: maxRecords
        )
        return self.describeCacheParameterGroupsPaginator(input, logger: logger)
    }

    /// Return PaginatorSequence for operation ``describeCacheParameters(_:logger:)``.
    ///
    /// - Parameters:
    ///   - input: Input for operation
    ///   - logger: Logger used for logging
    @inlinable
    public func describeCacheParametersPaginator(
        _ input: DescribeCacheParametersMessage,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<DescribeCacheParametersMessage, CacheParameterGroupDetails> {
        return .init(
            input: input,
            command: self.describeCacheParameters,
            inputKey: \DescribeCacheParametersMessage.marker,
            outputKey: \CacheParameterGroupDetails.marker,
            logger: logger
        )
    }
    /// Return PaginatorSequence for operation ``describeCacheParameters(_:logger:)``.
    ///
    /// - Parameters:
    ///   - cacheParameterGroupName: The name of a specific cache parameter group to return details for.
    ///   - maxRecords: The maximum number of records to include in the response. If more records exist than the specified MaxRecords value, a marker is included in the response so that the remaining results can be retrieved. Default: 100 Constraints: minimum 20; maximum 100.
    ///   - source: The parameter types to return. Valid values: user | system | engine-default
    ///   - logger: Logger used for logging
    @inlinable
    public func describeCacheParametersPaginator(
        cacheParameterGroupName: String? = nil,
        maxRecords: Int? = nil,
        source: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) -> AWSClient.PaginatorSequence<DescribeCacheParametersMessage, CacheParameterGroupDetails> {
        let input = DescribeCacheParametersMessage(
            cacheParameterGroupName: cacheParameterGroupName, 
            maxRecords: maxRecords, 
            source: source
        )
        return self.describeCacheParametersPaginator(input, logger: logger)
    }

    /// Return PaginatorSequence for operation ``describeCacheSecurityGroups(_:logger:)``.
    ///
    /// - Parameters:
    ///   - input: Input for operation
    ///   - logger: Logger used for logging
    @inlinable
    public func describeCacheSecurityGroupsPaginator(
        _ input: DescribeCacheSecurityGroupsMessage,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<DescribeCacheSecurityGroupsMessage, CacheSecurityGroupMessage> {
        return .init(
            input: input,
            command: self.describeCacheSecurityGroups,
            inputKey: \DescribeCacheSecurityGroupsMessage.marker,
            outputKey: \CacheSecurityGroupMessage.marker,
            logger: logger
        )
    }
    /// Return PaginatorSequence for operation ``describeCacheSecurityGroups(_:logger:)``.
    ///
    /// - Parameters:
    ///   - cacheSecurityGroupName: The name of the cache security group to return details for.
    ///   - maxRecords: The maximum number of records to include in the response. If more records exist than the specified MaxRecords value, a marker is included in the response so that the remaining results can be retrieved. Default: 100 Constraints: minimum 20; maximum 100.
    ///   - logger: Logger used for logging
    @inlinable
    public func describeCacheSecurityGroupsPaginator(
        cacheSecurityGroupName: String? = nil,
        maxRecords: Int? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) -> AWSClient.PaginatorSequence<DescribeCacheSecurityGroupsMessage, CacheSecurityGroupMessage> {
        let input = DescribeCacheSecurityGroupsMessage(
            cacheSecurityGroupName: cacheSecurityGroupName, 
            maxRecords: maxRecords
        )
        return self.describeCacheSecurityGroupsPaginator(input, logger: logger)
    }

    /// Return PaginatorSequence for operation ``describeCacheSubnetGroups(_:logger:)``.
    ///
    /// - Parameters:
    ///   - input: Input for operation
    ///   - logger: Logger used for logging
    @inlinable
    public func describeCacheSubnetGroupsPaginator(
        _ input: DescribeCacheSubnetGroupsMessage,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<DescribeCacheSubnetGroupsMessage, CacheSubnetGroupMessage> {
        return .init(
            input: input,
            command: self.describeCacheSubnetGroups,
            inputKey: \DescribeCacheSubnetGroupsMessage.marker,
            outputKey: \CacheSubnetGroupMessage.marker,
            logger: logger
        )
    }
    /// Return PaginatorSequence for operation ``describeCacheSubnetGroups(_:logger:)``.
    ///
    /// - Parameters:
    ///   - cacheSubnetGroupName: The name of the cache subnet group to return details for.
    ///   - maxRecords: The maximum number of records to include in the response. If more records exist than the specified MaxRecords value, a marker is included in the response so that the remaining results can be retrieved. Default: 100 Constraints: minimum 20; maximum 100.
    ///   - logger: Logger used for logging
    @inlinable
    public func describeCacheSubnetGroupsPaginator(
        cacheSubnetGroupName: String? = nil,
        maxRecords: Int? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) -> AWSClient.PaginatorSequence<DescribeCacheSubnetGroupsMessage, CacheSubnetGroupMessage> {
        let input = DescribeCacheSubnetGroupsMessage(
            cacheSubnetGroupName: cacheSubnetGroupName, 
            maxRecords: maxRecords
        )
        return self.describeCacheSubnetGroupsPaginator(input, logger: logger)
    }

    /// Return PaginatorSequence for operation ``describeEngineDefaultParameters(_:logger:)``.
    ///
    /// - Parameters:
    ///   - input: Input for operation
    ///   - logger: Logger used for logging
    @inlinable
    public func describeEngineDefaultParametersPaginator(
        _ input: DescribeEngineDefaultParametersMessage,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<DescribeEngineDefaultParametersMessage, DescribeEngineDefaultParametersResult> {
        return .init(
            input: input,
            command: self.describeEngineDefaultParameters,
            inputKey: \DescribeEngineDefaultParametersMessage.marker,
            outputKey: \DescribeEngineDefaultParametersResult.engineDefaults?.marker,
            logger: logger
        )
    }
    /// Return PaginatorSequence for operation ``describeEngineDefaultParameters(_:logger:)``.
    ///
    /// - Parameters:
    ///   - cacheParameterGroupFamily: The name of the cache parameter group family. Valid values are: memcached1.4 | memcached1.5 | memcached1.6 | redis2.6 | redis2.8 | redis3.2 | redis4.0 | redis5.0 | redis6.x | redis6.2 | redis7
    ///   - maxRecords: The maximum number of records to include in the response. If more records exist than the specified MaxRecords value, a marker is included in the response so that the remaining results can be retrieved. Default: 100 Constraints: minimum 20; maximum 100.
    ///   - logger: Logger used for logging
    @inlinable
    public func describeEngineDefaultParametersPaginator(
        cacheParameterGroupFamily: String? = nil,
        maxRecords: Int? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) -> AWSClient.PaginatorSequence<DescribeEngineDefaultParametersMessage, DescribeEngineDefaultParametersResult> {
        let input = DescribeEngineDefaultParametersMessage(
            cacheParameterGroupFamily: cacheParameterGroupFamily, 
            maxRecords: maxRecords
        )
        return self.describeEngineDefaultParametersPaginator(input, logger: logger)
    }

    /// Return PaginatorSequence for operation ``describeEvents(_:logger:)``.
    ///
    /// - Parameters:
    ///   - input: Input for operation
    ///   - logger: Logger used for logging
    @inlinable
    public func describeEventsPaginator(
        _ input: DescribeEventsMessage,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<DescribeEventsMessage, EventsMessage> {
        return .init(
            input: input,
            command: self.describeEvents,
            inputKey: \DescribeEventsMessage.marker,
            outputKey: \EventsMessage.marker,
            logger: logger
        )
    }
    /// Return PaginatorSequence for operation ``describeEvents(_:logger:)``.
    ///
    /// - Parameters:
    ///   - duration: The number of minutes worth of events to retrieve.
    ///   - endTime: The end of the time interval for which to retrieve events, specified in ISO 8601 format.  Example: 2017-03-30T07:03:49.555Z
    ///   - maxRecords: The maximum number of records to include in the response. If more records exist than the specified MaxRecords value, a marker is included in the response so that the remaining results can be retrieved. Default: 100 Constraints: minimum 20; maximum 100.
    ///   - sourceIdentifier: The identifier of the event source for which events are returned. If not specified, all sources are included in the response.
    ///   - sourceType: The event source to retrieve events for. If no value is specified, all events are returned.
    ///   - startTime: The beginning of the time interval to retrieve events for, specified in ISO 8601 format.  Example: 2017-03-30T07:03:49.555Z
    ///   - logger: Logger used for logging
    @inlinable
    public func describeEventsPaginator(
        duration: Int? = nil,
        endTime: Date? = nil,
        maxRecords: Int? = nil,
        sourceIdentifier: String? = nil,
        sourceType: SourceType? = nil,
        startTime: Date? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) -> AWSClient.PaginatorSequence<DescribeEventsMessage, EventsMessage> {
        let input = DescribeEventsMessage(
            duration: duration, 
            endTime: endTime, 
            maxRecords: maxRecords, 
            sourceIdentifier: sourceIdentifier, 
            sourceType: sourceType, 
            startTime: startTime
        )
        return self.describeEventsPaginator(input, logger: logger)
    }

    /// Return PaginatorSequence for operation ``describeGlobalReplicationGroups(_:logger:)``.
    ///
    /// - Parameters:
    ///   - input: Input for operation
    ///   - logger: Logger used for logging
    @inlinable
    public func describeGlobalReplicationGroupsPaginator(
        _ input: DescribeGlobalReplicationGroupsMessage,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<DescribeGlobalReplicationGroupsMessage, DescribeGlobalReplicationGroupsResult> {
        return .init(
            input: input,
            command: self.describeGlobalReplicationGroups,
            inputKey: \DescribeGlobalReplicationGroupsMessage.marker,
            outputKey: \DescribeGlobalReplicationGroupsResult.marker,
            logger: logger
        )
    }
    /// Return PaginatorSequence for operation ``describeGlobalReplicationGroups(_:logger:)``.
    ///
    /// - Parameters:
    ///   - globalReplicationGroupId: The name of the Global datastore
    ///   - maxRecords: The maximum number of records to include in the response. If more records exist than the specified MaxRecords value, a marker is included in the response so that the remaining results can be retrieved.
    ///   - showMemberInfo: Returns the list of members that comprise the Global datastore.
    ///   - logger: Logger used for logging
    @inlinable
    public func describeGlobalReplicationGroupsPaginator(
        globalReplicationGroupId: String? = nil,
        maxRecords: Int? = nil,
        showMemberInfo: Bool? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) -> AWSClient.PaginatorSequence<DescribeGlobalReplicationGroupsMessage, DescribeGlobalReplicationGroupsResult> {
        let input = DescribeGlobalReplicationGroupsMessage(
            globalReplicationGroupId: globalReplicationGroupId, 
            maxRecords: maxRecords, 
            showMemberInfo: showMemberInfo
        )
        return self.describeGlobalReplicationGroupsPaginator(input, logger: logger)
    }

    /// Return PaginatorSequence for operation ``describeReplicationGroups(_:logger:)``.
    ///
    /// - Parameters:
    ///   - input: Input for operation
    ///   - logger: Logger used for logging
    @inlinable
    public func describeReplicationGroupsPaginator(
        _ input: DescribeReplicationGroupsMessage,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<DescribeReplicationGroupsMessage, ReplicationGroupMessage> {
        return .init(
            input: input,
            command: self.describeReplicationGroups,
            inputKey: \DescribeReplicationGroupsMessage.marker,
            outputKey: \ReplicationGroupMessage.marker,
            logger: logger
        )
    }
    /// Return PaginatorSequence for operation ``describeReplicationGroups(_:logger:)``.
    ///
    /// - Parameters:
    ///   - maxRecords: The maximum number of records to include in the response. If more records exist than the specified MaxRecords value, a marker is included in the response so that the remaining results can be retrieved. Default: 100 Constraints: minimum 20; maximum 100.
    ///   - replicationGroupId: The identifier for the replication group to be described. This parameter is not case sensitive. If you do not specify this parameter, information about all replication groups is returned.
    ///   - logger: Logger used for logging
    @inlinable
    public func describeReplicationGroupsPaginator(
        maxRecords: Int? = nil,
        replicationGroupId: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) -> AWSClient.PaginatorSequence<DescribeReplicationGroupsMessage, ReplicationGroupMessage> {
        let input = DescribeReplicationGroupsMessage(
            maxRecords: maxRecords, 
            replicationGroupId: replicationGroupId
        )
        return self.describeReplicationGroupsPaginator(input, logger: logger)
    }

    /// Return PaginatorSequence for operation ``describeReservedCacheNodes(_:logger:)``.
    ///
    /// - Parameters:
    ///   - input: Input for operation
    ///   - logger: Logger used for logging
    @inlinable
    public func describeReservedCacheNodesPaginator(
        _ input: DescribeReservedCacheNodesMessage,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<DescribeReservedCacheNodesMessage, ReservedCacheNodeMessage> {
        return .init(
            input: input,
            command: self.describeReservedCacheNodes,
            inputKey: \DescribeReservedCacheNodesMessage.marker,
            outputKey: \ReservedCacheNodeMessage.marker,
            logger: logger
        )
    }
    /// Return PaginatorSequence for operation ``describeReservedCacheNodes(_:logger:)``.
    ///
    /// - Parameters:
    ///   - cacheNodeType: The cache node type filter value. Use this parameter to show only those reservations matching the specified cache node type. The following node types are supported by ElastiCache. Generally speaking, the current generation types provide more memory and computational power at lower cost when compared to their equivalent previous generation counterparts.   General purpose:   Current generation:   M7g node types: 					cache.m7g.large, 					cache.m7g.xlarge, 					cache.m7g.2xlarge, 					cache.m7g.4xlarge, 					cache.m7g.8xlarge, 					cache.m7g.12xlarge, 					cache.m7g.16xlarge   For region availability, see Supported Node Types    M6g node types (available only for Redis OSS engine version 5.0.6 onward and for Memcached engine version 1.5.16 onward):
    ///   - duration: The duration filter value, specified in years or seconds. Use this parameter to show only reservations for this duration. Valid Values: 1 | 3 | 31536000 | 94608000
    ///   - maxRecords: The maximum number of records to include in the response. If more records exist than the specified MaxRecords value, a marker is included in the response so that the remaining results can be retrieved. Default: 100 Constraints: minimum 20; maximum 100.
    ///   - offeringType: The offering type filter value. Use this parameter to show only the available offerings matching the specified offering type. Valid values: "Light Utilization"|"Medium Utilization"|"Heavy Utilization"|"All Upfront"|"Partial Upfront"| "No Upfront"
    ///   - productDescription: The product description filter value. Use this parameter to show only those reservations matching the specified product description.
    ///   - reservedCacheNodeId: The reserved cache node identifier filter value. Use this parameter to show only the reservation that matches the specified reservation ID.
    ///   - reservedCacheNodesOfferingId: The offering identifier filter value. Use this parameter to show only purchased reservations matching the specified offering identifier.
    ///   - logger: Logger used for logging
    @inlinable
    public func describeReservedCacheNodesPaginator(
        cacheNodeType: String? = nil,
        duration: String? = nil,
        maxRecords: Int? = nil,
        offeringType: String? = nil,
        productDescription: String? = nil,
        reservedCacheNodeId: String? = nil,
        reservedCacheNodesOfferingId: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) -> AWSClient.PaginatorSequence<DescribeReservedCacheNodesMessage, ReservedCacheNodeMessage> {
        let input = DescribeReservedCacheNodesMessage(
            cacheNodeType: cacheNodeType, 
            duration: duration, 
            maxRecords: maxRecords, 
            offeringType: offeringType, 
            productDescription: productDescription, 
            reservedCacheNodeId: reservedCacheNodeId, 
            reservedCacheNodesOfferingId: reservedCacheNodesOfferingId
        )
        return self.describeReservedCacheNodesPaginator(input, logger: logger)
    }

    /// Return PaginatorSequence for operation ``describeReservedCacheNodesOfferings(_:logger:)``.
    ///
    /// - Parameters:
    ///   - input: Input for operation
    ///   - logger: Logger used for logging
    @inlinable
    public func describeReservedCacheNodesOfferingsPaginator(
        _ input: DescribeReservedCacheNodesOfferingsMessage,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<DescribeReservedCacheNodesOfferingsMessage, ReservedCacheNodesOfferingMessage> {
        return .init(
            input: input,
            command: self.describeReservedCacheNodesOfferings,
            inputKey: \DescribeReservedCacheNodesOfferingsMessage.marker,
            outputKey: \ReservedCacheNodesOfferingMessage.marker,
            logger: logger
        )
    }
    /// Return PaginatorSequence for operation ``describeReservedCacheNodesOfferings(_:logger:)``.
    ///
    /// - Parameters:
    ///   - cacheNodeType: The cache node type filter value. Use this parameter to show only the available offerings matching the specified cache node type. The following node types are supported by ElastiCache. Generally speaking, the current generation types provide more memory and computational power at lower cost when compared to their equivalent previous generation counterparts.   General purpose:   Current generation:   M7g node types: 					cache.m7g.large, 					cache.m7g.xlarge, 					cache.m7g.2xlarge, 					cache.m7g.4xlarge, 					cache.m7g.8xlarge, 					cache.m7g.12xlarge, 					cache.m7g.16xlarge   For region availability, see Supported Node Types    M6g node types (available only for Redis OSS engine version 5.0.6 onward and for Memcached engine version 1.5.16 onward):
    ///   - duration: Duration filter value, specified in years or seconds. Use this parameter to show only reservations for a given duration. Valid Values: 1 | 3 | 31536000 | 94608000
    ///   - maxRecords: The maximum number of records to include in the response. If more records exist than the specified MaxRecords value, a marker is included in the response so that the remaining results can be retrieved. Default: 100 Constraints: minimum 20; maximum 100.
    ///   - offeringType: The offering type filter value. Use this parameter to show only the available offerings matching the specified offering type. Valid Values: "Light Utilization"|"Medium Utilization"|"Heavy Utilization" |"All Upfront"|"Partial Upfront"| "No Upfront"
    ///   - productDescription: The product description filter value. Use this parameter to show only the available offerings matching the specified product description.
    ///   - reservedCacheNodesOfferingId: The offering identifier filter value. Use this parameter to show only the available offering that matches the specified reservation identifier. Example: 438012d3-4052-4cc7-b2e3-8d3372e0e706
    ///   - logger: Logger used for logging
    @inlinable
    public func describeReservedCacheNodesOfferingsPaginator(
        cacheNodeType: String? = nil,
        duration: String? = nil,
        maxRecords: Int? = nil,
        offeringType: String? = nil,
        productDescription: String? = nil,
        reservedCacheNodesOfferingId: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) -> AWSClient.PaginatorSequence<DescribeReservedCacheNodesOfferingsMessage, ReservedCacheNodesOfferingMessage> {
        let input = DescribeReservedCacheNodesOfferingsMessage(
            cacheNodeType: cacheNodeType, 
            duration: duration, 
            maxRecords: maxRecords, 
            offeringType: offeringType, 
            productDescription: productDescription, 
            reservedCacheNodesOfferingId: reservedCacheNodesOfferingId
        )
        return self.describeReservedCacheNodesOfferingsPaginator(input, logger: logger)
    }

    /// Return PaginatorSequence for operation ``describeServerlessCacheSnapshots(_:logger:)``.
    ///
    /// - Parameters:
    ///   - input: Input for operation
    ///   - logger: Logger used for logging
    @inlinable
    public func describeServerlessCacheSnapshotsPaginator(
        _ input: DescribeServerlessCacheSnapshotsRequest,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<DescribeServerlessCacheSnapshotsRequest, DescribeServerlessCacheSnapshotsResponse> {
        return .init(
            input: input,
            command: self.describeServerlessCacheSnapshots,
            inputKey: \DescribeServerlessCacheSnapshotsRequest.nextToken,
            outputKey: \DescribeServerlessCacheSnapshotsResponse.nextToken,
            logger: logger
        )
    }
    /// Return PaginatorSequence for operation ``describeServerlessCacheSnapshots(_:logger:)``.
    ///
    /// - Parameters:
    ///   - maxResults: The maximum number of records to include in the response. If more records exist than  the specified max-results value, a market is included in the response so that remaining results  can be retrieved. Available for Redis OSS and Serverless Memcached only.The default is 50. The Validation Constraints are a maximum of 50.
    ///   - serverlessCacheName: The identifier of serverless cache. If this parameter is specified,  only snapshots associated with that specific serverless cache are described. Available for Redis OSS and Serverless Memcached only.
    ///   - serverlessCacheSnapshotName: The identifier of the serverless cache’s snapshot. If this parameter is specified, only this snapshot is described. Available for Redis OSS and Serverless Memcached only.
    ///   - snapshotType: The type of snapshot that is being described. Available for Redis OSS and Serverless Memcached only.
    ///   - logger: Logger used for logging
    @inlinable
    public func describeServerlessCacheSnapshotsPaginator(
        maxResults: Int? = nil,
        serverlessCacheName: String? = nil,
        serverlessCacheSnapshotName: String? = nil,
        snapshotType: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) -> AWSClient.PaginatorSequence<DescribeServerlessCacheSnapshotsRequest, DescribeServerlessCacheSnapshotsResponse> {
        let input = DescribeServerlessCacheSnapshotsRequest(
            maxResults: maxResults, 
            serverlessCacheName: serverlessCacheName, 
            serverlessCacheSnapshotName: serverlessCacheSnapshotName, 
            snapshotType: snapshotType
        )
        return self.describeServerlessCacheSnapshotsPaginator(input, logger: logger)
    }

    /// Return PaginatorSequence for operation ``describeServerlessCaches(_:logger:)``.
    ///
    /// - Parameters:
    ///   - input: Input for operation
    ///   - logger: Logger used for logging
    @inlinable
    public func describeServerlessCachesPaginator(
        _ input: DescribeServerlessCachesRequest,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<DescribeServerlessCachesRequest, DescribeServerlessCachesResponse> {
        return .init(
            input: input,
            command: self.describeServerlessCaches,
            inputKey: \DescribeServerlessCachesRequest.nextToken,
            outputKey: \DescribeServerlessCachesResponse.nextToken,
            logger: logger
        )
    }
    /// Return PaginatorSequence for operation ``describeServerlessCaches(_:logger:)``.
    ///
    /// - Parameters:
    ///   - maxResults: The maximum number of records in the response. If more records exist than the specified max-records value,  the next token is included in the response so that remaining results can be retrieved.  The default is 50.
    ///   - serverlessCacheName: The identifier for the serverless cache. If this parameter is specified,  only information about that specific serverless cache is returned. Default: NULL
    ///   - logger: Logger used for logging
    @inlinable
    public func describeServerlessCachesPaginator(
        maxResults: Int? = nil,
        serverlessCacheName: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) -> AWSClient.PaginatorSequence<DescribeServerlessCachesRequest, DescribeServerlessCachesResponse> {
        let input = DescribeServerlessCachesRequest(
            maxResults: maxResults, 
            serverlessCacheName: serverlessCacheName
        )
        return self.describeServerlessCachesPaginator(input, logger: logger)
    }

    /// Return PaginatorSequence for operation ``describeServiceUpdates(_:logger:)``.
    ///
    /// - Parameters:
    ///   - input: Input for operation
    ///   - logger: Logger used for logging
    @inlinable
    public func describeServiceUpdatesPaginator(
        _ input: DescribeServiceUpdatesMessage,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<DescribeServiceUpdatesMessage, ServiceUpdatesMessage> {
        return .init(
            input: input,
            command: self.describeServiceUpdates,
            inputKey: \DescribeServiceUpdatesMessage.marker,
            outputKey: \ServiceUpdatesMessage.marker,
            logger: logger
        )
    }
    /// Return PaginatorSequence for operation ``describeServiceUpdates(_:logger:)``.
    ///
    /// - Parameters:
    ///   - maxRecords: The maximum number of records to include in the response
    ///   - serviceUpdateName: The unique ID of the service update
    ///   - serviceUpdateStatus: The status of the service update
    ///   - logger: Logger used for logging
    @inlinable
    public func describeServiceUpdatesPaginator(
        maxRecords: Int? = nil,
        serviceUpdateName: String? = nil,
        serviceUpdateStatus: [ServiceUpdateStatus]? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) -> AWSClient.PaginatorSequence<DescribeServiceUpdatesMessage, ServiceUpdatesMessage> {
        let input = DescribeServiceUpdatesMessage(
            maxRecords: maxRecords, 
            serviceUpdateName: serviceUpdateName, 
            serviceUpdateStatus: serviceUpdateStatus
        )
        return self.describeServiceUpdatesPaginator(input, logger: logger)
    }

    /// Return PaginatorSequence for operation ``describeSnapshots(_:logger:)``.
    ///
    /// - Parameters:
    ///   - input: Input for operation
    ///   - logger: Logger used for logging
    @inlinable
    public func describeSnapshotsPaginator(
        _ input: DescribeSnapshotsMessage,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<DescribeSnapshotsMessage, DescribeSnapshotsListMessage> {
        return .init(
            input: input,
            command: self.describeSnapshots,
            inputKey: \DescribeSnapshotsMessage.marker,
            outputKey: \DescribeSnapshotsListMessage.marker,
            logger: logger
        )
    }
    /// Return PaginatorSequence for operation ``describeSnapshots(_:logger:)``.
    ///
    /// - Parameters:
    ///   - cacheClusterId: A user-supplied cluster identifier. If this parameter is specified, only snapshots associated with that specific cluster are described.
    ///   - maxRecords: The maximum number of records to include in the response. If more records exist than the specified MaxRecords value, a marker is included in the response so that the remaining results can be retrieved. Default: 50 Constraints: minimum 20; maximum 50.
    ///   - replicationGroupId: A user-supplied replication group identifier. If this parameter is specified, only snapshots associated with that specific replication group are described.
    ///   - showNodeGroupConfig: A Boolean value which if true, the node group (shard) configuration is included in the snapshot description.
    ///   - snapshotName: A user-supplied name of the snapshot. If this parameter is specified, only this snapshot are described.
    ///   - snapshotSource: If set to system, the output shows snapshots that were automatically created by ElastiCache. If set to user the output shows snapshots that were manually created. If omitted, the output shows both automatically and manually created snapshots.
    ///   - logger: Logger used for logging
    @inlinable
    public func describeSnapshotsPaginator(
        cacheClusterId: String? = nil,
        maxRecords: Int? = nil,
        replicationGroupId: String? = nil,
        showNodeGroupConfig: Bool? = nil,
        snapshotName: String? = nil,
        snapshotSource: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) -> AWSClient.PaginatorSequence<DescribeSnapshotsMessage, DescribeSnapshotsListMessage> {
        let input = DescribeSnapshotsMessage(
            cacheClusterId: cacheClusterId, 
            maxRecords: maxRecords, 
            replicationGroupId: replicationGroupId, 
            showNodeGroupConfig: showNodeGroupConfig, 
            snapshotName: snapshotName, 
            snapshotSource: snapshotSource
        )
        return self.describeSnapshotsPaginator(input, logger: logger)
    }

    /// Return PaginatorSequence for operation ``describeUpdateActions(_:logger:)``.
    ///
    /// - Parameters:
    ///   - input: Input for operation
    ///   - logger: Logger used for logging
    @inlinable
    public func describeUpdateActionsPaginator(
        _ input: DescribeUpdateActionsMessage,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<DescribeUpdateActionsMessage, UpdateActionsMessage> {
        return .init(
            input: input,
            command: self.describeUpdateActions,
            inputKey: \DescribeUpdateActionsMessage.marker,
            outputKey: \UpdateActionsMessage.marker,
            logger: logger
        )
    }
    /// Return PaginatorSequence for operation ``describeUpdateActions(_:logger:)``.
    ///
    /// - Parameters:
    ///   - cacheClusterIds: The cache cluster IDs
    ///   - engine: The Elasticache engine to which the update applies. Either Redis OSS or Memcached.
    ///   - maxRecords: The maximum number of records to include in the response
    ///   - replicationGroupIds: The replication group IDs
    ///   - serviceUpdateName: The unique ID of the service update
    ///   - serviceUpdateStatus: The status of the service update
    ///   - serviceUpdateTimeRange: The range of time specified to search for service updates that are in available status
    ///   - showNodeLevelUpdateStatus: Dictates whether to include node level update status in the response
    ///   - updateActionStatus: The status of the update action.
    ///   - logger: Logger used for logging
    @inlinable
    public func describeUpdateActionsPaginator(
        cacheClusterIds: [String]? = nil,
        engine: String? = nil,
        maxRecords: Int? = nil,
        replicationGroupIds: [String]? = nil,
        serviceUpdateName: String? = nil,
        serviceUpdateStatus: [ServiceUpdateStatus]? = nil,
        serviceUpdateTimeRange: TimeRangeFilter? = nil,
        showNodeLevelUpdateStatus: Bool? = nil,
        updateActionStatus: [UpdateActionStatus]? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) -> AWSClient.PaginatorSequence<DescribeUpdateActionsMessage, UpdateActionsMessage> {
        let input = DescribeUpdateActionsMessage(
            cacheClusterIds: cacheClusterIds, 
            engine: engine, 
            maxRecords: maxRecords, 
            replicationGroupIds: replicationGroupIds, 
            serviceUpdateName: serviceUpdateName, 
            serviceUpdateStatus: serviceUpdateStatus, 
            serviceUpdateTimeRange: serviceUpdateTimeRange, 
            showNodeLevelUpdateStatus: showNodeLevelUpdateStatus, 
            updateActionStatus: updateActionStatus
        )
        return self.describeUpdateActionsPaginator(input, logger: logger)
    }

    /// Return PaginatorSequence for operation ``describeUserGroups(_:logger:)``.
    ///
    /// - Parameters:
    ///   - input: Input for operation
    ///   - logger: Logger used for logging
    @inlinable
    public func describeUserGroupsPaginator(
        _ input: DescribeUserGroupsMessage,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<DescribeUserGroupsMessage, DescribeUserGroupsResult> {
        return .init(
            input: input,
            command: self.describeUserGroups,
            inputKey: \DescribeUserGroupsMessage.marker,
            outputKey: \DescribeUserGroupsResult.marker,
            logger: logger
        )
    }
    /// Return PaginatorSequence for operation ``describeUserGroups(_:logger:)``.
    ///
    /// - Parameters:
    ///   - maxRecords: The maximum number of records to include in the response. If more records exist than the specified MaxRecords value, a marker is included in the response so that the remaining results can be retrieved.
    ///   - userGroupId: The ID of the user group.
    ///   - logger: Logger used for logging
    @inlinable
    public func describeUserGroupsPaginator(
        maxRecords: Int? = nil,
        userGroupId: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) -> AWSClient.PaginatorSequence<DescribeUserGroupsMessage, DescribeUserGroupsResult> {
        let input = DescribeUserGroupsMessage(
            maxRecords: maxRecords, 
            userGroupId: userGroupId
        )
        return self.describeUserGroupsPaginator(input, logger: logger)
    }

    /// Return PaginatorSequence for operation ``describeUsers(_:logger:)``.
    ///
    /// - Parameters:
    ///   - input: Input for operation
    ///   - logger: Logger used for logging
    @inlinable
    public func describeUsersPaginator(
        _ input: DescribeUsersMessage,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<DescribeUsersMessage, DescribeUsersResult> {
        return .init(
            input: input,
            command: self.describeUsers,
            inputKey: \DescribeUsersMessage.marker,
            outputKey: \DescribeUsersResult.marker,
            logger: logger
        )
    }
    /// Return PaginatorSequence for operation ``describeUsers(_:logger:)``.
    ///
    /// - Parameters:
    ///   - engine: The Redis OSS engine.
    ///   - filters: Filter to determine the list of User IDs to return.
    ///   - maxRecords: The maximum number of records to include in the response. If more records exist than the specified MaxRecords value, a marker is included in the response so that the remaining results can be retrieved.
    ///   - userId: The ID of the user.
    ///   - logger: Logger used for logging
    @inlinable
    public func describeUsersPaginator(
        engine: String? = nil,
        filters: [Filter]? = nil,
        maxRecords: Int? = nil,
        userId: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) -> AWSClient.PaginatorSequence<DescribeUsersMessage, DescribeUsersResult> {
        let input = DescribeUsersMessage(
            engine: engine, 
            filters: filters, 
            maxRecords: maxRecords, 
            userId: userId
        )
        return self.describeUsersPaginator(input, logger: logger)
    }
}

extension ElastiCache.DescribeCacheClustersMessage: AWSPaginateToken {
    @inlinable
    public func usingPaginationToken(_ token: String) -> ElastiCache.DescribeCacheClustersMessage {
        return .init(
            cacheClusterId: self.cacheClusterId,
            marker: token,
            maxRecords: self.maxRecords,
            showCacheClustersNotInReplicationGroups: self.showCacheClustersNotInReplicationGroups,
            showCacheNodeInfo: self.showCacheNodeInfo
        )
    }
}

extension ElastiCache.DescribeCacheEngineVersionsMessage: AWSPaginateToken {
    @inlinable
    public func usingPaginationToken(_ token: String) -> ElastiCache.DescribeCacheEngineVersionsMessage {
        return .init(
            cacheParameterGroupFamily: self.cacheParameterGroupFamily,
            defaultOnly: self.defaultOnly,
            engine: self.engine,
            engineVersion: self.engineVersion,
            marker: token,
            maxRecords: self.maxRecords
        )
    }
}

extension ElastiCache.DescribeCacheParameterGroupsMessage: AWSPaginateToken {
    @inlinable
    public func usingPaginationToken(_ token: String) -> ElastiCache.DescribeCacheParameterGroupsMessage {
        return .init(
            cacheParameterGroupName: self.cacheParameterGroupName,
            marker: token,
            maxRecords: self.maxRecords
        )
    }
}

extension ElastiCache.DescribeCacheParametersMessage: AWSPaginateToken {
    @inlinable
    public func usingPaginationToken(_ token: String) -> ElastiCache.DescribeCacheParametersMessage {
        return .init(
            cacheParameterGroupName: self.cacheParameterGroupName,
            marker: token,
            maxRecords: self.maxRecords,
            source: self.source
        )
    }
}

extension ElastiCache.DescribeCacheSecurityGroupsMessage: AWSPaginateToken {
    @inlinable
    public func usingPaginationToken(_ token: String) -> ElastiCache.DescribeCacheSecurityGroupsMessage {
        return .init(
            cacheSecurityGroupName: self.cacheSecurityGroupName,
            marker: token,
            maxRecords: self.maxRecords
        )
    }
}

extension ElastiCache.DescribeCacheSubnetGroupsMessage: AWSPaginateToken {
    @inlinable
    public func usingPaginationToken(_ token: String) -> ElastiCache.DescribeCacheSubnetGroupsMessage {
        return .init(
            cacheSubnetGroupName: self.cacheSubnetGroupName,
            marker: token,
            maxRecords: self.maxRecords
        )
    }
}

extension ElastiCache.DescribeEngineDefaultParametersMessage: AWSPaginateToken {
    @inlinable
    public func usingPaginationToken(_ token: String) -> ElastiCache.DescribeEngineDefaultParametersMessage {
        return .init(
            cacheParameterGroupFamily: self.cacheParameterGroupFamily,
            marker: token,
            maxRecords: self.maxRecords
        )
    }
}

extension ElastiCache.DescribeEventsMessage: AWSPaginateToken {
    @inlinable
    public func usingPaginationToken(_ token: String) -> ElastiCache.DescribeEventsMessage {
        return .init(
            duration: self.duration,
            endTime: self.endTime,
            marker: token,
            maxRecords: self.maxRecords,
            sourceIdentifier: self.sourceIdentifier,
            sourceType: self.sourceType,
            startTime: self.startTime
        )
    }
}

extension ElastiCache.DescribeGlobalReplicationGroupsMessage: AWSPaginateToken {
    @inlinable
    public func usingPaginationToken(_ token: String) -> ElastiCache.DescribeGlobalReplicationGroupsMessage {
        return .init(
            globalReplicationGroupId: self.globalReplicationGroupId,
            marker: token,
            maxRecords: self.maxRecords,
            showMemberInfo: self.showMemberInfo
        )
    }
}

extension ElastiCache.DescribeReplicationGroupsMessage: AWSPaginateToken {
    @inlinable
    public func usingPaginationToken(_ token: String) -> ElastiCache.DescribeReplicationGroupsMessage {
        return .init(
            marker: token,
            maxRecords: self.maxRecords,
            replicationGroupId: self.replicationGroupId
        )
    }
}

extension ElastiCache.DescribeReservedCacheNodesMessage: AWSPaginateToken {
    @inlinable
    public func usingPaginationToken(_ token: String) -> ElastiCache.DescribeReservedCacheNodesMessage {
        return .init(
            cacheNodeType: self.cacheNodeType,
            duration: self.duration,
            marker: token,
            maxRecords: self.maxRecords,
            offeringType: self.offeringType,
            productDescription: self.productDescription,
            reservedCacheNodeId: self.reservedCacheNodeId,
            reservedCacheNodesOfferingId: self.reservedCacheNodesOfferingId
        )
    }
}

extension ElastiCache.DescribeReservedCacheNodesOfferingsMessage: AWSPaginateToken {
    @inlinable
    public func usingPaginationToken(_ token: String) -> ElastiCache.DescribeReservedCacheNodesOfferingsMessage {
        return .init(
            cacheNodeType: self.cacheNodeType,
            duration: self.duration,
            marker: token,
            maxRecords: self.maxRecords,
            offeringType: self.offeringType,
            productDescription: self.productDescription,
            reservedCacheNodesOfferingId: self.reservedCacheNodesOfferingId
        )
    }
}

extension ElastiCache.DescribeServerlessCacheSnapshotsRequest: AWSPaginateToken {
    @inlinable
    public func usingPaginationToken(_ token: String) -> ElastiCache.DescribeServerlessCacheSnapshotsRequest {
        return .init(
            maxResults: self.maxResults,
            nextToken: token,
            serverlessCacheName: self.serverlessCacheName,
            serverlessCacheSnapshotName: self.serverlessCacheSnapshotName,
            snapshotType: self.snapshotType
        )
    }
}

extension ElastiCache.DescribeServerlessCachesRequest: AWSPaginateToken {
    @inlinable
    public func usingPaginationToken(_ token: String) -> ElastiCache.DescribeServerlessCachesRequest {
        return .init(
            maxResults: self.maxResults,
            nextToken: token,
            serverlessCacheName: self.serverlessCacheName
        )
    }
}

extension ElastiCache.DescribeServiceUpdatesMessage: AWSPaginateToken {
    @inlinable
    public func usingPaginationToken(_ token: String) -> ElastiCache.DescribeServiceUpdatesMessage {
        return .init(
            marker: token,
            maxRecords: self.maxRecords,
            serviceUpdateName: self.serviceUpdateName,
            serviceUpdateStatus: self.serviceUpdateStatus
        )
    }
}

extension ElastiCache.DescribeSnapshotsMessage: AWSPaginateToken {
    @inlinable
    public func usingPaginationToken(_ token: String) -> ElastiCache.DescribeSnapshotsMessage {
        return .init(
            cacheClusterId: self.cacheClusterId,
            marker: token,
            maxRecords: self.maxRecords,
            replicationGroupId: self.replicationGroupId,
            showNodeGroupConfig: self.showNodeGroupConfig,
            snapshotName: self.snapshotName,
            snapshotSource: self.snapshotSource
        )
    }
}

extension ElastiCache.DescribeUpdateActionsMessage: AWSPaginateToken {
    @inlinable
    public func usingPaginationToken(_ token: String) -> ElastiCache.DescribeUpdateActionsMessage {
        return .init(
            cacheClusterIds: self.cacheClusterIds,
            engine: self.engine,
            marker: token,
            maxRecords: self.maxRecords,
            replicationGroupIds: self.replicationGroupIds,
            serviceUpdateName: self.serviceUpdateName,
            serviceUpdateStatus: self.serviceUpdateStatus,
            serviceUpdateTimeRange: self.serviceUpdateTimeRange,
            showNodeLevelUpdateStatus: self.showNodeLevelUpdateStatus,
            updateActionStatus: self.updateActionStatus
        )
    }
}

extension ElastiCache.DescribeUserGroupsMessage: AWSPaginateToken {
    @inlinable
    public func usingPaginationToken(_ token: String) -> ElastiCache.DescribeUserGroupsMessage {
        return .init(
            marker: token,
            maxRecords: self.maxRecords,
            userGroupId: self.userGroupId
        )
    }
}

extension ElastiCache.DescribeUsersMessage: AWSPaginateToken {
    @inlinable
    public func usingPaginationToken(_ token: String) -> ElastiCache.DescribeUsersMessage {
        return .init(
            engine: self.engine,
            filters: self.filters,
            marker: token,
            maxRecords: self.maxRecords,
            userId: self.userId
        )
    }
}

// MARK: Waiters

@available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
extension ElastiCache {
    /// Waiter for operation ``describeCacheClusters(_:logger:)``.
    ///
    /// - Parameters:
    ///   - input: Input for operation
    ///   - logger: Logger used for logging
    @inlinable
    public func waitUntilCacheClusterAvailable(
        _ input: DescribeCacheClustersMessage,
        maxWaitTime: TimeAmount? = nil,
        logger: Logger = AWSClient.loggingDisabled
    ) async throws {
        let waiter = AWSClient.Waiter<DescribeCacheClustersMessage, _>(
            acceptors: [
                .init(state: .success, matcher: try! JMESAllPathMatcher("cacheClusters[].cacheClusterStatus", expected: "available")),
                .init(state: .failure, matcher: try! JMESAnyPathMatcher("cacheClusters[].cacheClusterStatus", expected: "deleted")),
                .init(state: .failure, matcher: try! JMESAnyPathMatcher("cacheClusters[].cacheClusterStatus", expected: "deleting")),
                .init(state: .failure, matcher: try! JMESAnyPathMatcher("cacheClusters[].cacheClusterStatus", expected: "incompatible-network")),
                .init(state: .failure, matcher: try! JMESAnyPathMatcher("cacheClusters[].cacheClusterStatus", expected: "restore-failed")),
            ],
            minDelayTime: .seconds(15),
            command: self.describeCacheClusters
        )
        return try await self.client.waitUntil(input, waiter: waiter, maxWaitTime: maxWaitTime, logger: logger)
    }
    /// Waiter for operation ``describeCacheClusters(_:logger:)``.
    ///
    /// - Parameters:
    ///   - cacheClusterId: The user-supplied cluster identifier. If this parameter is specified, only information about that specific cluster is returned. This parameter isn't case sensitive.
    ///   - marker: An optional marker returned from a prior request. Use this marker for pagination of results from this operation. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by MaxRecords.
    ///   - maxRecords: The maximum number of records to include in the response. If more records exist than the specified MaxRecords value, a marker is included in the response so that the remaining results can be retrieved. Default: 100 Constraints: minimum 20; maximum 100.
    ///   - showCacheClustersNotInReplicationGroups: An optional flag that can be included in the DescribeCacheCluster request to show only nodes (API/CLI: clusters) that are not members of a replication group. In practice, this mean Memcached and single node Redis OSS clusters.
    ///   - showCacheNodeInfo: An optional flag that can be included in the DescribeCacheCluster request to retrieve information about the individual cache nodes.
    ///   - logger: Logger used for logging
    @inlinable
    public func waitUntilCacheClusterAvailable(
        cacheClusterId: String? = nil,
        marker: String? = nil,
        maxRecords: Int? = nil,
        showCacheClustersNotInReplicationGroups: Bool? = nil,
        showCacheNodeInfo: Bool? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws {
        let input = DescribeCacheClustersMessage(
            cacheClusterId: cacheClusterId, 
            marker: marker, 
            maxRecords: maxRecords, 
            showCacheClustersNotInReplicationGroups: showCacheClustersNotInReplicationGroups, 
            showCacheNodeInfo: showCacheNodeInfo
        )
        try await self.waitUntilCacheClusterAvailable(input, logger: logger)
    }

    /// Waiter for operation ``describeCacheClusters(_:logger:)``.
    ///
    /// - Parameters:
    ///   - input: Input for operation
    ///   - logger: Logger used for logging
    @inlinable
    public func waitUntilCacheClusterDeleted(
        _ input: DescribeCacheClustersMessage,
        maxWaitTime: TimeAmount? = nil,
        logger: Logger = AWSClient.loggingDisabled
    ) async throws {
        let waiter = AWSClient.Waiter<DescribeCacheClustersMessage, _>(
            acceptors: [
                .init(state: .success, matcher: try! JMESAllPathMatcher("cacheClusters[].cacheClusterStatus", expected: "deleted")),
                .init(state: .success, matcher: AWSErrorCodeMatcher("CacheClusterNotFound")),
                .init(state: .failure, matcher: try! JMESAnyPathMatcher("cacheClusters[].cacheClusterStatus", expected: "available")),
                .init(state: .failure, matcher: try! JMESAnyPathMatcher("cacheClusters[].cacheClusterStatus", expected: "creating")),
                .init(state: .failure, matcher: try! JMESAnyPathMatcher("cacheClusters[].cacheClusterStatus", expected: "incompatible-network")),
                .init(state: .failure, matcher: try! JMESAnyPathMatcher("cacheClusters[].cacheClusterStatus", expected: "modifying")),
                .init(state: .failure, matcher: try! JMESAnyPathMatcher("cacheClusters[].cacheClusterStatus", expected: "restore-failed")),
                .init(state: .failure, matcher: try! JMESAnyPathMatcher("cacheClusters[].cacheClusterStatus", expected: "snapshotting")),
            ],
            minDelayTime: .seconds(15),
            command: self.describeCacheClusters
        )
        return try await self.client.waitUntil(input, waiter: waiter, maxWaitTime: maxWaitTime, logger: logger)
    }
    /// Waiter for operation ``describeCacheClusters(_:logger:)``.
    ///
    /// - Parameters:
    ///   - cacheClusterId: The user-supplied cluster identifier. If this parameter is specified, only information about that specific cluster is returned. This parameter isn't case sensitive.
    ///   - marker: An optional marker returned from a prior request. Use this marker for pagination of results from this operation. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by MaxRecords.
    ///   - maxRecords: The maximum number of records to include in the response. If more records exist than the specified MaxRecords value, a marker is included in the response so that the remaining results can be retrieved. Default: 100 Constraints: minimum 20; maximum 100.
    ///   - showCacheClustersNotInReplicationGroups: An optional flag that can be included in the DescribeCacheCluster request to show only nodes (API/CLI: clusters) that are not members of a replication group. In practice, this mean Memcached and single node Redis OSS clusters.
    ///   - showCacheNodeInfo: An optional flag that can be included in the DescribeCacheCluster request to retrieve information about the individual cache nodes.
    ///   - logger: Logger used for logging
    @inlinable
    public func waitUntilCacheClusterDeleted(
        cacheClusterId: String? = nil,
        marker: String? = nil,
        maxRecords: Int? = nil,
        showCacheClustersNotInReplicationGroups: Bool? = nil,
        showCacheNodeInfo: Bool? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws {
        let input = DescribeCacheClustersMessage(
            cacheClusterId: cacheClusterId, 
            marker: marker, 
            maxRecords: maxRecords, 
            showCacheClustersNotInReplicationGroups: showCacheClustersNotInReplicationGroups, 
            showCacheNodeInfo: showCacheNodeInfo
        )
        try await self.waitUntilCacheClusterDeleted(input, logger: logger)
    }

    /// Waiter for operation ``describeReplicationGroups(_:logger:)``.
    ///
    /// - Parameters:
    ///   - input: Input for operation
    ///   - logger: Logger used for logging
    @inlinable
    public func waitUntilReplicationGroupAvailable(
        _ input: DescribeReplicationGroupsMessage,
        maxWaitTime: TimeAmount? = nil,
        logger: Logger = AWSClient.loggingDisabled
    ) async throws {
        let waiter = AWSClient.Waiter<DescribeReplicationGroupsMessage, _>(
            acceptors: [
                .init(state: .success, matcher: try! JMESAllPathMatcher("replicationGroups[].status", expected: "available")),
                .init(state: .failure, matcher: try! JMESAnyPathMatcher("replicationGroups[].status", expected: "deleted")),
            ],
            minDelayTime: .seconds(15),
            command: self.describeReplicationGroups
        )
        return try await self.client.waitUntil(input, waiter: waiter, maxWaitTime: maxWaitTime, logger: logger)
    }
    /// Waiter for operation ``describeReplicationGroups(_:logger:)``.
    ///
    /// - Parameters:
    ///   - marker: An optional marker returned from a prior request. Use this marker for pagination of results from this operation. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by MaxRecords.
    ///   - maxRecords: The maximum number of records to include in the response. If more records exist than the specified MaxRecords value, a marker is included in the response so that the remaining results can be retrieved. Default: 100 Constraints: minimum 20; maximum 100.
    ///   - replicationGroupId: The identifier for the replication group to be described. This parameter is not case sensitive. If you do not specify this parameter, information about all replication groups is returned.
    ///   - logger: Logger used for logging
    @inlinable
    public func waitUntilReplicationGroupAvailable(
        marker: String? = nil,
        maxRecords: Int? = nil,
        replicationGroupId: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws {
        let input = DescribeReplicationGroupsMessage(
            marker: marker, 
            maxRecords: maxRecords, 
            replicationGroupId: replicationGroupId
        )
        try await self.waitUntilReplicationGroupAvailable(input, logger: logger)
    }

    /// Waiter for operation ``describeReplicationGroups(_:logger:)``.
    ///
    /// - Parameters:
    ///   - input: Input for operation
    ///   - logger: Logger used for logging
    @inlinable
    public func waitUntilReplicationGroupDeleted(
        _ input: DescribeReplicationGroupsMessage,
        maxWaitTime: TimeAmount? = nil,
        logger: Logger = AWSClient.loggingDisabled
    ) async throws {
        let waiter = AWSClient.Waiter<DescribeReplicationGroupsMessage, _>(
            acceptors: [
                .init(state: .success, matcher: try! JMESAllPathMatcher("replicationGroups[].status", expected: "deleted")),
                .init(state: .failure, matcher: try! JMESAnyPathMatcher("replicationGroups[].status", expected: "available")),
                .init(state: .success, matcher: AWSErrorCodeMatcher("ReplicationGroupNotFoundFault")),
            ],
            minDelayTime: .seconds(15),
            command: self.describeReplicationGroups
        )
        return try await self.client.waitUntil(input, waiter: waiter, maxWaitTime: maxWaitTime, logger: logger)
    }
    /// Waiter for operation ``describeReplicationGroups(_:logger:)``.
    ///
    /// - Parameters:
    ///   - marker: An optional marker returned from a prior request. Use this marker for pagination of results from this operation. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by MaxRecords.
    ///   - maxRecords: The maximum number of records to include in the response. If more records exist than the specified MaxRecords value, a marker is included in the response so that the remaining results can be retrieved. Default: 100 Constraints: minimum 20; maximum 100.
    ///   - replicationGroupId: The identifier for the replication group to be described. This parameter is not case sensitive. If you do not specify this parameter, information about all replication groups is returned.
    ///   - logger: Logger used for logging
    @inlinable
    public func waitUntilReplicationGroupDeleted(
        marker: String? = nil,
        maxRecords: Int? = nil,
        replicationGroupId: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws {
        let input = DescribeReplicationGroupsMessage(
            marker: marker, 
            maxRecords: maxRecords, 
            replicationGroupId: replicationGroupId
        )
        try await self.waitUntilReplicationGroupDeleted(input, logger: logger)
    }
}
