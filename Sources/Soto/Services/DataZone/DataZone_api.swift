//===----------------------------------------------------------------------===//
//
// This source file is part of the Soto for AWS open source project
//
// Copyright (c) 2017-2023 the Soto project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
// See CONTRIBUTORS.txt for the list of Soto project authors
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by https://github.com/soto-project/soto-codegenerator.
// DO NOT EDIT.

@_exported import SotoCore

/// Service object for interacting with AWS DataZone service.
///
/// Amazon DataZone is a data management service that enables you to catalog, discover, govern, share, and analyze your data. With Amazon DataZone, you can share and access your data across accounts and supported regions. Amazon DataZone simplifies your experience across Amazon Web Services services, including, but not limited to, Amazon Redshift, Amazon Athena, Amazon Web Services Glue, and Amazon Web Services Lake Formation.
public struct DataZone: AWSService {
    // MARK: Member variables

    /// Client used for communication with AWS
    public let client: AWSClient
    /// Service configuration
    public let config: AWSServiceConfig

    // MARK: Initialization

    /// Initialize the DataZone client
    /// - parameters:
    ///     - client: AWSClient used to process requests
    ///     - region: Region of server you want to communicate with. This will override the partition parameter.
    ///     - partition: AWS partition where service resides, standard (.aws), china (.awscn), government (.awsusgov).
    ///     - endpoint: Custom endpoint URL to use instead of standard AWS servers
    ///     - middleware: Middleware chain used to edit requests before they are sent and responses before they are decoded 
    ///     - timeout: Timeout value for HTTP requests
    ///     - byteBufferAllocator: Allocator for ByteBuffers
    ///     - options: Service options
    public init(
        client: AWSClient,
        region: SotoCore.Region? = nil,
        partition: AWSPartition = .aws,
        endpoint: String? = nil,
        middleware: AWSMiddlewareProtocol? = nil,
        timeout: TimeAmount? = nil,
        byteBufferAllocator: ByteBufferAllocator = ByteBufferAllocator(),
        options: AWSServiceConfig.Options = []
    ) {
        self.client = client
        self.config = AWSServiceConfig(
            region: region,
            partition: region?.partition ?? partition,
            serviceName: "DataZone",
            serviceIdentifier: "datazone",
            serviceProtocol: .restjson,
            apiVersion: "2018-05-10",
            endpoint: endpoint,
            serviceEndpoints: Self.serviceEndpoints,
            variantEndpoints: Self.variantEndpoints,
            errorType: DataZoneErrorType.self,
            middleware: middleware,
            timeout: timeout,
            byteBufferAllocator: byteBufferAllocator,
            options: options
        )
    }


    /// custom endpoints for regions
    static var serviceEndpoints: [String: String] {[
        "af-south-1": "datazone.af-south-1.api.aws",
        "ap-east-1": "datazone.ap-east-1.api.aws",
        "ap-northeast-1": "datazone.ap-northeast-1.api.aws",
        "ap-northeast-2": "datazone.ap-northeast-2.api.aws",
        "ap-northeast-3": "datazone.ap-northeast-3.api.aws",
        "ap-south-1": "datazone.ap-south-1.api.aws",
        "ap-south-2": "datazone.ap-south-2.api.aws",
        "ap-southeast-1": "datazone.ap-southeast-1.api.aws",
        "ap-southeast-2": "datazone.ap-southeast-2.api.aws",
        "ap-southeast-3": "datazone.ap-southeast-3.api.aws",
        "ap-southeast-4": "datazone.ap-southeast-4.api.aws",
        "ca-central-1": "datazone.ca-central-1.api.aws",
        "ca-west-1": "datazone.ca-west-1.api.aws",
        "cn-north-1": "datazone.cn-north-1.api.amazonwebservices.com.cn",
        "cn-northwest-1": "datazone.cn-northwest-1.api.amazonwebservices.com.cn",
        "eu-central-1": "datazone.eu-central-1.api.aws",
        "eu-central-2": "datazone.eu-central-2.api.aws",
        "eu-north-1": "datazone.eu-north-1.api.aws",
        "eu-south-1": "datazone.eu-south-1.api.aws",
        "eu-south-2": "datazone.eu-south-2.api.aws",
        "eu-west-1": "datazone.eu-west-1.api.aws",
        "eu-west-2": "datazone.eu-west-2.api.aws",
        "eu-west-3": "datazone.eu-west-3.api.aws",
        "il-central-1": "datazone.il-central-1.api.aws",
        "me-central-1": "datazone.me-central-1.api.aws",
        "me-south-1": "datazone.me-south-1.api.aws",
        "sa-east-1": "datazone.sa-east-1.api.aws",
        "us-east-1": "datazone.us-east-1.api.aws",
        "us-east-2": "datazone.us-east-2.api.aws",
        "us-gov-east-1": "datazone.us-gov-east-1.api.aws",
        "us-gov-west-1": "datazone.us-gov-west-1.api.aws",
        "us-west-1": "datazone.us-west-1.api.aws",
        "us-west-2": "datazone.us-west-2.api.aws"
    ]}


    /// FIPS and dualstack endpoints
    static var variantEndpoints: [EndpointVariantType: AWSServiceConfig.EndpointVariant] {[
        [.fips]: .init(endpoints: [
            "af-south-1": "datazone-fips.af-south-1.api.aws",
            "ap-east-1": "datazone-fips.ap-east-1.api.aws",
            "ap-northeast-1": "datazone-fips.ap-northeast-1.api.aws",
            "ap-northeast-2": "datazone-fips.ap-northeast-2.api.aws",
            "ap-northeast-3": "datazone-fips.ap-northeast-3.api.aws",
            "ap-south-1": "datazone-fips.ap-south-1.api.aws",
            "ap-south-2": "datazone-fips.ap-south-2.api.aws",
            "ap-southeast-1": "datazone-fips.ap-southeast-1.api.aws",
            "ap-southeast-2": "datazone-fips.ap-southeast-2.api.aws",
            "ap-southeast-3": "datazone-fips.ap-southeast-3.api.aws",
            "ap-southeast-4": "datazone-fips.ap-southeast-4.api.aws",
            "ca-central-1": "datazone-fips.ca-central-1.amazonaws.com",
            "ca-west-1": "datazone-fips.ca-west-1.api.aws",
            "cn-north-1": "datazone-fips.cn-north-1.api.amazonwebservices.com.cn",
            "cn-northwest-1": "datazone-fips.cn-northwest-1.api.amazonwebservices.com.cn",
            "eu-central-1": "datazone-fips.eu-central-1.api.aws",
            "eu-central-2": "datazone-fips.eu-central-2.api.aws",
            "eu-north-1": "datazone-fips.eu-north-1.api.aws",
            "eu-south-1": "datazone-fips.eu-south-1.api.aws",
            "eu-south-2": "datazone-fips.eu-south-2.api.aws",
            "eu-west-1": "datazone-fips.eu-west-1.api.aws",
            "eu-west-2": "datazone-fips.eu-west-2.api.aws",
            "eu-west-3": "datazone-fips.eu-west-3.api.aws",
            "il-central-1": "datazone-fips.il-central-1.api.aws",
            "me-central-1": "datazone-fips.me-central-1.api.aws",
            "me-south-1": "datazone-fips.me-south-1.api.aws",
            "sa-east-1": "datazone-fips.sa-east-1.api.aws",
            "us-east-1": "datazone-fips.us-east-1.amazonaws.com",
            "us-east-2": "datazone-fips.us-east-2.amazonaws.com",
            "us-gov-east-1": "datazone-fips.us-gov-east-1.api.aws",
            "us-gov-west-1": "datazone-fips.us-gov-west-1.api.aws",
            "us-west-1": "datazone-fips.us-west-1.api.aws",
            "us-west-2": "datazone-fips.us-west-2.amazonaws.com"
        ])
    ]}

    // MARK: API Calls

    /// Accepts automatically generated business-friendly metadata for your Amazon DataZone assets.
    @Sendable
    public func acceptPredictions(_ input: AcceptPredictionsInput, logger: Logger = AWSClient.loggingDisabled) async throws -> AcceptPredictionsOutput {
        return try await self.client.execute(
            operation: "AcceptPredictions", 
            path: "/v2/domains/{domainIdentifier}/assets/{identifier}/accept-predictions", 
            httpMethod: .PUT, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Accepts a subscription request to a specific asset.
    @Sendable
    public func acceptSubscriptionRequest(_ input: AcceptSubscriptionRequestInput, logger: Logger = AWSClient.loggingDisabled) async throws -> AcceptSubscriptionRequestOutput {
        return try await self.client.execute(
            operation: "AcceptSubscriptionRequest", 
            path: "/v2/domains/{domainIdentifier}/subscription-requests/{identifier}/accept", 
            httpMethod: .PUT, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Cancels the metadata generation run.
    @Sendable
    public func cancelMetadataGenerationRun(_ input: CancelMetadataGenerationRunInput, logger: Logger = AWSClient.loggingDisabled) async throws -> CancelMetadataGenerationRunOutput {
        return try await self.client.execute(
            operation: "CancelMetadataGenerationRun", 
            path: "/v2/domains/{domainIdentifier}/metadata-generation-runs/{identifier}/cancel", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Cancels the subscription to the specified asset.
    @Sendable
    public func cancelSubscription(_ input: CancelSubscriptionInput, logger: Logger = AWSClient.loggingDisabled) async throws -> CancelSubscriptionOutput {
        return try await self.client.execute(
            operation: "CancelSubscription", 
            path: "/v2/domains/{domainIdentifier}/subscriptions/{identifier}/cancel", 
            httpMethod: .PUT, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Creates an asset in Amazon DataZone catalog.
    @Sendable
    public func createAsset(_ input: CreateAssetInput, logger: Logger = AWSClient.loggingDisabled) async throws -> CreateAssetOutput {
        return try await self.client.execute(
            operation: "CreateAsset", 
            path: "/v2/domains/{domainIdentifier}/assets", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Creates a revision of the asset.
    @Sendable
    public func createAssetRevision(_ input: CreateAssetRevisionInput, logger: Logger = AWSClient.loggingDisabled) async throws -> CreateAssetRevisionOutput {
        return try await self.client.execute(
            operation: "CreateAssetRevision", 
            path: "/v2/domains/{domainIdentifier}/assets/{identifier}/revisions", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Creates a custom asset type.
    @Sendable
    public func createAssetType(_ input: CreateAssetTypeInput, logger: Logger = AWSClient.loggingDisabled) async throws -> CreateAssetTypeOutput {
        return try await self.client.execute(
            operation: "CreateAssetType", 
            path: "/v2/domains/{domainIdentifier}/asset-types", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Creates an Amazon DataZone data source.
    @Sendable
    public func createDataSource(_ input: CreateDataSourceInput, logger: Logger = AWSClient.loggingDisabled) async throws -> CreateDataSourceOutput {
        return try await self.client.execute(
            operation: "CreateDataSource", 
            path: "/v2/domains/{domainIdentifier}/data-sources", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Creates an Amazon DataZone domain.
    @Sendable
    public func createDomain(_ input: CreateDomainInput, logger: Logger = AWSClient.loggingDisabled) async throws -> CreateDomainOutput {
        return try await self.client.execute(
            operation: "CreateDomain", 
            path: "/v2/domains", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Create an Amazon DataZone environment.
    @Sendable
    public func createEnvironment(_ input: CreateEnvironmentInput, logger: Logger = AWSClient.loggingDisabled) async throws -> CreateEnvironmentOutput {
        return try await self.client.execute(
            operation: "CreateEnvironment", 
            path: "/v2/domains/{domainIdentifier}/environments", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Creates an Amazon DataZone environment profile.
    @Sendable
    public func createEnvironmentProfile(_ input: CreateEnvironmentProfileInput, logger: Logger = AWSClient.loggingDisabled) async throws -> CreateEnvironmentProfileOutput {
        return try await self.client.execute(
            operation: "CreateEnvironmentProfile", 
            path: "/v2/domains/{domainIdentifier}/environment-profiles", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Creates a metadata form type.
    @Sendable
    public func createFormType(_ input: CreateFormTypeInput, logger: Logger = AWSClient.loggingDisabled) async throws -> CreateFormTypeOutput {
        return try await self.client.execute(
            operation: "CreateFormType", 
            path: "/v2/domains/{domainIdentifier}/form-types", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Creates an Amazon DataZone business glossary.
    @Sendable
    public func createGlossary(_ input: CreateGlossaryInput, logger: Logger = AWSClient.loggingDisabled) async throws -> CreateGlossaryOutput {
        return try await self.client.execute(
            operation: "CreateGlossary", 
            path: "/v2/domains/{domainIdentifier}/glossaries", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Creates a business glossary term.
    @Sendable
    public func createGlossaryTerm(_ input: CreateGlossaryTermInput, logger: Logger = AWSClient.loggingDisabled) async throws -> CreateGlossaryTermOutput {
        return try await self.client.execute(
            operation: "CreateGlossaryTerm", 
            path: "/v2/domains/{domainIdentifier}/glossary-terms", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Creates a group profile in Amazon DataZone.
    @Sendable
    public func createGroupProfile(_ input: CreateGroupProfileInput, logger: Logger = AWSClient.loggingDisabled) async throws -> CreateGroupProfileOutput {
        return try await self.client.execute(
            operation: "CreateGroupProfile", 
            path: "/v2/domains/{domainIdentifier}/group-profiles", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Publishes a listing (a record of an asset at a given time) or removes a listing from the catalog.
    @Sendable
    public func createListingChangeSet(_ input: CreateListingChangeSetInput, logger: Logger = AWSClient.loggingDisabled) async throws -> CreateListingChangeSetOutput {
        return try await self.client.execute(
            operation: "CreateListingChangeSet", 
            path: "/v2/domains/{domainIdentifier}/listings/change-set", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Creates an Amazon DataZone project.
    @Sendable
    public func createProject(_ input: CreateProjectInput, logger: Logger = AWSClient.loggingDisabled) async throws -> CreateProjectOutput {
        return try await self.client.execute(
            operation: "CreateProject", 
            path: "/v2/domains/{domainIdentifier}/projects", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Creates a project membership in Amazon DataZone.
    @Sendable
    public func createProjectMembership(_ input: CreateProjectMembershipInput, logger: Logger = AWSClient.loggingDisabled) async throws -> CreateProjectMembershipOutput {
        return try await self.client.execute(
            operation: "CreateProjectMembership", 
            path: "/v2/domains/{domainIdentifier}/projects/{projectIdentifier}/createMembership", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Creates a subsscription grant in Amazon DataZone.
    @Sendable
    public func createSubscriptionGrant(_ input: CreateSubscriptionGrantInput, logger: Logger = AWSClient.loggingDisabled) async throws -> CreateSubscriptionGrantOutput {
        return try await self.client.execute(
            operation: "CreateSubscriptionGrant", 
            path: "/v2/domains/{domainIdentifier}/subscription-grants", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Creates a subscription request in Amazon DataZone.
    @Sendable
    public func createSubscriptionRequest(_ input: CreateSubscriptionRequestInput, logger: Logger = AWSClient.loggingDisabled) async throws -> CreateSubscriptionRequestOutput {
        return try await self.client.execute(
            operation: "CreateSubscriptionRequest", 
            path: "/v2/domains/{domainIdentifier}/subscription-requests", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Creates a subscription target in Amazon DataZone.
    @Sendable
    public func createSubscriptionTarget(_ input: CreateSubscriptionTargetInput, logger: Logger = AWSClient.loggingDisabled) async throws -> CreateSubscriptionTargetOutput {
        return try await self.client.execute(
            operation: "CreateSubscriptionTarget", 
            path: "/v2/domains/{domainIdentifier}/environments/{environmentIdentifier}/subscription-targets", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Creates a user profile in Amazon DataZone.
    @Sendable
    public func createUserProfile(_ input: CreateUserProfileInput, logger: Logger = AWSClient.loggingDisabled) async throws -> CreateUserProfileOutput {
        return try await self.client.execute(
            operation: "CreateUserProfile", 
            path: "/v2/domains/{domainIdentifier}/user-profiles", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Delets an asset in Amazon DataZone.
    @Sendable
    public func deleteAsset(_ input: DeleteAssetInput, logger: Logger = AWSClient.loggingDisabled) async throws -> DeleteAssetOutput {
        return try await self.client.execute(
            operation: "DeleteAsset", 
            path: "/v2/domains/{domainIdentifier}/assets/{identifier}", 
            httpMethod: .DELETE, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Deletes an asset type in Amazon DataZone.
    @Sendable
    public func deleteAssetType(_ input: DeleteAssetTypeInput, logger: Logger = AWSClient.loggingDisabled) async throws -> DeleteAssetTypeOutput {
        return try await self.client.execute(
            operation: "DeleteAssetType", 
            path: "/v2/domains/{domainIdentifier}/asset-types/{identifier}", 
            httpMethod: .DELETE, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Deletes a data source in Amazon DataZone.
    @Sendable
    public func deleteDataSource(_ input: DeleteDataSourceInput, logger: Logger = AWSClient.loggingDisabled) async throws -> DeleteDataSourceOutput {
        return try await self.client.execute(
            operation: "DeleteDataSource", 
            path: "/v2/domains/{domainIdentifier}/data-sources/{identifier}", 
            httpMethod: .DELETE, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Deletes a Amazon DataZone domain.
    @Sendable
    public func deleteDomain(_ input: DeleteDomainInput, logger: Logger = AWSClient.loggingDisabled) async throws -> DeleteDomainOutput {
        return try await self.client.execute(
            operation: "DeleteDomain", 
            path: "/v2/domains/{identifier}", 
            httpMethod: .DELETE, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Deletes an environment in Amazon DataZone.
    @Sendable
    public func deleteEnvironment(_ input: DeleteEnvironmentInput, logger: Logger = AWSClient.loggingDisabled) async throws {
        return try await self.client.execute(
            operation: "DeleteEnvironment", 
            path: "/v2/domains/{domainIdentifier}/environments/{identifier}", 
            httpMethod: .DELETE, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Deletes the blueprint configuration in Amazon DataZone.
    @Sendable
    public func deleteEnvironmentBlueprintConfiguration(_ input: DeleteEnvironmentBlueprintConfigurationInput, logger: Logger = AWSClient.loggingDisabled) async throws -> DeleteEnvironmentBlueprintConfigurationOutput {
        return try await self.client.execute(
            operation: "DeleteEnvironmentBlueprintConfiguration", 
            path: "/v2/domains/{domainIdentifier}/environment-blueprint-configurations/{environmentBlueprintIdentifier}", 
            httpMethod: .DELETE, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Deletes an environment profile in Amazon DataZone.
    @Sendable
    public func deleteEnvironmentProfile(_ input: DeleteEnvironmentProfileInput, logger: Logger = AWSClient.loggingDisabled) async throws {
        return try await self.client.execute(
            operation: "DeleteEnvironmentProfile", 
            path: "/v2/domains/{domainIdentifier}/environment-profiles/{identifier}", 
            httpMethod: .DELETE, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Delets and metadata form type in Amazon DataZone.
    @Sendable
    public func deleteFormType(_ input: DeleteFormTypeInput, logger: Logger = AWSClient.loggingDisabled) async throws -> DeleteFormTypeOutput {
        return try await self.client.execute(
            operation: "DeleteFormType", 
            path: "/v2/domains/{domainIdentifier}/form-types/{formTypeIdentifier}", 
            httpMethod: .DELETE, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Deletes a business glossary in Amazon DataZone.
    @Sendable
    public func deleteGlossary(_ input: DeleteGlossaryInput, logger: Logger = AWSClient.loggingDisabled) async throws -> DeleteGlossaryOutput {
        return try await self.client.execute(
            operation: "DeleteGlossary", 
            path: "/v2/domains/{domainIdentifier}/glossaries/{identifier}", 
            httpMethod: .DELETE, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Deletes a business glossary term in Amazon DataZone.
    @Sendable
    public func deleteGlossaryTerm(_ input: DeleteGlossaryTermInput, logger: Logger = AWSClient.loggingDisabled) async throws -> DeleteGlossaryTermOutput {
        return try await self.client.execute(
            operation: "DeleteGlossaryTerm", 
            path: "/v2/domains/{domainIdentifier}/glossary-terms/{identifier}", 
            httpMethod: .DELETE, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Deletes a listing (a record of an asset at a given time).
    @Sendable
    public func deleteListing(_ input: DeleteListingInput, logger: Logger = AWSClient.loggingDisabled) async throws -> DeleteListingOutput {
        return try await self.client.execute(
            operation: "DeleteListing", 
            path: "/v2/domains/{domainIdentifier}/listings/{identifier}", 
            httpMethod: .DELETE, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Deletes a project in Amazon DataZone.
    @Sendable
    public func deleteProject(_ input: DeleteProjectInput, logger: Logger = AWSClient.loggingDisabled) async throws -> DeleteProjectOutput {
        return try await self.client.execute(
            operation: "DeleteProject", 
            path: "/v2/domains/{domainIdentifier}/projects/{identifier}", 
            httpMethod: .DELETE, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Deletes project membership in Amazon DataZone.
    @Sendable
    public func deleteProjectMembership(_ input: DeleteProjectMembershipInput, logger: Logger = AWSClient.loggingDisabled) async throws -> DeleteProjectMembershipOutput {
        return try await self.client.execute(
            operation: "DeleteProjectMembership", 
            path: "/v2/domains/{domainIdentifier}/projects/{projectIdentifier}/deleteMembership", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Deletes and subscription grant in Amazon DataZone.
    @Sendable
    public func deleteSubscriptionGrant(_ input: DeleteSubscriptionGrantInput, logger: Logger = AWSClient.loggingDisabled) async throws -> DeleteSubscriptionGrantOutput {
        return try await self.client.execute(
            operation: "DeleteSubscriptionGrant", 
            path: "/v2/domains/{domainIdentifier}/subscription-grants/{identifier}", 
            httpMethod: .DELETE, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Deletes a subscription request in Amazon DataZone.
    @Sendable
    public func deleteSubscriptionRequest(_ input: DeleteSubscriptionRequestInput, logger: Logger = AWSClient.loggingDisabled) async throws {
        return try await self.client.execute(
            operation: "DeleteSubscriptionRequest", 
            path: "/v2/domains/{domainIdentifier}/subscription-requests/{identifier}", 
            httpMethod: .DELETE, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Deletes a subscription target in Amazon DataZone.
    @Sendable
    public func deleteSubscriptionTarget(_ input: DeleteSubscriptionTargetInput, logger: Logger = AWSClient.loggingDisabled) async throws {
        return try await self.client.execute(
            operation: "DeleteSubscriptionTarget", 
            path: "/v2/domains/{domainIdentifier}/environments/{environmentIdentifier}/subscription-targets/{identifier}", 
            httpMethod: .DELETE, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Deletes the specified time series form for the specified asset.
    @Sendable
    public func deleteTimeSeriesDataPoints(_ input: DeleteTimeSeriesDataPointsInput, logger: Logger = AWSClient.loggingDisabled) async throws -> DeleteTimeSeriesDataPointsOutput {
        return try await self.client.execute(
            operation: "DeleteTimeSeriesDataPoints", 
            path: "/v2/domains/{domainIdentifier}/entities/{entityType}/{entityIdentifier}/time-series-data-points", 
            httpMethod: .DELETE, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Gets an Amazon DataZone asset.
    @Sendable
    public func getAsset(_ input: GetAssetInput, logger: Logger = AWSClient.loggingDisabled) async throws -> GetAssetOutput {
        return try await self.client.execute(
            operation: "GetAsset", 
            path: "/v2/domains/{domainIdentifier}/assets/{identifier}", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Gets an Amazon DataZone asset type.
    @Sendable
    public func getAssetType(_ input: GetAssetTypeInput, logger: Logger = AWSClient.loggingDisabled) async throws -> GetAssetTypeOutput {
        return try await self.client.execute(
            operation: "GetAssetType", 
            path: "/v2/domains/{domainIdentifier}/asset-types/{identifier}", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Gets an Amazon DataZone data source.
    @Sendable
    public func getDataSource(_ input: GetDataSourceInput, logger: Logger = AWSClient.loggingDisabled) async throws -> GetDataSourceOutput {
        return try await self.client.execute(
            operation: "GetDataSource", 
            path: "/v2/domains/{domainIdentifier}/data-sources/{identifier}", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Gets an Amazon DataZone data source run.
    @Sendable
    public func getDataSourceRun(_ input: GetDataSourceRunInput, logger: Logger = AWSClient.loggingDisabled) async throws -> GetDataSourceRunOutput {
        return try await self.client.execute(
            operation: "GetDataSourceRun", 
            path: "/v2/domains/{domainIdentifier}/data-source-runs/{identifier}", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Gets an Amazon DataZone domain.
    @Sendable
    public func getDomain(_ input: GetDomainInput, logger: Logger = AWSClient.loggingDisabled) async throws -> GetDomainOutput {
        return try await self.client.execute(
            operation: "GetDomain", 
            path: "/v2/domains/{identifier}", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Gets an Amazon DataZone environment.
    @Sendable
    public func getEnvironment(_ input: GetEnvironmentInput, logger: Logger = AWSClient.loggingDisabled) async throws -> GetEnvironmentOutput {
        return try await self.client.execute(
            operation: "GetEnvironment", 
            path: "/v2/domains/{domainIdentifier}/environments/{identifier}", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Gets an Amazon DataZone blueprint.
    @Sendable
    public func getEnvironmentBlueprint(_ input: GetEnvironmentBlueprintInput, logger: Logger = AWSClient.loggingDisabled) async throws -> GetEnvironmentBlueprintOutput {
        return try await self.client.execute(
            operation: "GetEnvironmentBlueprint", 
            path: "/v2/domains/{domainIdentifier}/environment-blueprints/{identifier}", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Gets the blueprint configuration in Amazon DataZone.
    @Sendable
    public func getEnvironmentBlueprintConfiguration(_ input: GetEnvironmentBlueprintConfigurationInput, logger: Logger = AWSClient.loggingDisabled) async throws -> GetEnvironmentBlueprintConfigurationOutput {
        return try await self.client.execute(
            operation: "GetEnvironmentBlueprintConfiguration", 
            path: "/v2/domains/{domainIdentifier}/environment-blueprint-configurations/{environmentBlueprintIdentifier}", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Gets an evinronment profile in Amazon DataZone.
    @Sendable
    public func getEnvironmentProfile(_ input: GetEnvironmentProfileInput, logger: Logger = AWSClient.loggingDisabled) async throws -> GetEnvironmentProfileOutput {
        return try await self.client.execute(
            operation: "GetEnvironmentProfile", 
            path: "/v2/domains/{domainIdentifier}/environment-profiles/{identifier}", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Gets a metadata form type in Amazon DataZone.
    @Sendable
    public func getFormType(_ input: GetFormTypeInput, logger: Logger = AWSClient.loggingDisabled) async throws -> GetFormTypeOutput {
        return try await self.client.execute(
            operation: "GetFormType", 
            path: "/v2/domains/{domainIdentifier}/form-types/{formTypeIdentifier}", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Gets a business glossary in Amazon DataZone.
    @Sendable
    public func getGlossary(_ input: GetGlossaryInput, logger: Logger = AWSClient.loggingDisabled) async throws -> GetGlossaryOutput {
        return try await self.client.execute(
            operation: "GetGlossary", 
            path: "/v2/domains/{domainIdentifier}/glossaries/{identifier}", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Gets a business glossary term in Amazon DataZone.
    @Sendable
    public func getGlossaryTerm(_ input: GetGlossaryTermInput, logger: Logger = AWSClient.loggingDisabled) async throws -> GetGlossaryTermOutput {
        return try await self.client.execute(
            operation: "GetGlossaryTerm", 
            path: "/v2/domains/{domainIdentifier}/glossary-terms/{identifier}", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Gets a group profile in Amazon DataZone.
    @Sendable
    public func getGroupProfile(_ input: GetGroupProfileInput, logger: Logger = AWSClient.loggingDisabled) async throws -> GetGroupProfileOutput {
        return try await self.client.execute(
            operation: "GetGroupProfile", 
            path: "/v2/domains/{domainIdentifier}/group-profiles/{groupIdentifier}", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Gets the data portal URL for the specified Amazon DataZone domain.
    @Sendable
    public func getIamPortalLoginUrl(_ input: GetIamPortalLoginUrlInput, logger: Logger = AWSClient.loggingDisabled) async throws -> GetIamPortalLoginUrlOutput {
        return try await self.client.execute(
            operation: "GetIamPortalLoginUrl", 
            path: "/v2/domains/{domainIdentifier}/get-portal-login-url", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Gets a listing (a record of an asset at a given time).
    @Sendable
    public func getListing(_ input: GetListingInput, logger: Logger = AWSClient.loggingDisabled) async throws -> GetListingOutput {
        return try await self.client.execute(
            operation: "GetListing", 
            path: "/v2/domains/{domainIdentifier}/listings/{identifier}", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Gets a metadata generation run in Amazon DataZone.
    @Sendable
    public func getMetadataGenerationRun(_ input: GetMetadataGenerationRunInput, logger: Logger = AWSClient.loggingDisabled) async throws -> GetMetadataGenerationRunOutput {
        return try await self.client.execute(
            operation: "GetMetadataGenerationRun", 
            path: "/v2/domains/{domainIdentifier}/metadata-generation-runs/{identifier}", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Gets a project in Amazon DataZone.
    @Sendable
    public func getProject(_ input: GetProjectInput, logger: Logger = AWSClient.loggingDisabled) async throws -> GetProjectOutput {
        return try await self.client.execute(
            operation: "GetProject", 
            path: "/v2/domains/{domainIdentifier}/projects/{identifier}", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Gets a subscription in Amazon DataZone.
    @Sendable
    public func getSubscription(_ input: GetSubscriptionInput, logger: Logger = AWSClient.loggingDisabled) async throws -> GetSubscriptionOutput {
        return try await self.client.execute(
            operation: "GetSubscription", 
            path: "/v2/domains/{domainIdentifier}/subscriptions/{identifier}", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Gets the subscription grant in Amazon DataZone.
    @Sendable
    public func getSubscriptionGrant(_ input: GetSubscriptionGrantInput, logger: Logger = AWSClient.loggingDisabled) async throws -> GetSubscriptionGrantOutput {
        return try await self.client.execute(
            operation: "GetSubscriptionGrant", 
            path: "/v2/domains/{domainIdentifier}/subscription-grants/{identifier}", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Gets the details of the specified subscription request.
    @Sendable
    public func getSubscriptionRequestDetails(_ input: GetSubscriptionRequestDetailsInput, logger: Logger = AWSClient.loggingDisabled) async throws -> GetSubscriptionRequestDetailsOutput {
        return try await self.client.execute(
            operation: "GetSubscriptionRequestDetails", 
            path: "/v2/domains/{domainIdentifier}/subscription-requests/{identifier}", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Gets the subscription target in Amazon DataZone.
    @Sendable
    public func getSubscriptionTarget(_ input: GetSubscriptionTargetInput, logger: Logger = AWSClient.loggingDisabled) async throws -> GetSubscriptionTargetOutput {
        return try await self.client.execute(
            operation: "GetSubscriptionTarget", 
            path: "/v2/domains/{domainIdentifier}/environments/{environmentIdentifier}/subscription-targets/{identifier}", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Gets the existing data point for the asset.
    @Sendable
    public func getTimeSeriesDataPoint(_ input: GetTimeSeriesDataPointInput, logger: Logger = AWSClient.loggingDisabled) async throws -> GetTimeSeriesDataPointOutput {
        return try await self.client.execute(
            operation: "GetTimeSeriesDataPoint", 
            path: "/v2/domains/{domainIdentifier}/entities/{entityType}/{entityIdentifier}/time-series-data-points/{identifier}", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Gets a user profile in Amazon DataZone.
    @Sendable
    public func getUserProfile(_ input: GetUserProfileInput, logger: Logger = AWSClient.loggingDisabled) async throws -> GetUserProfileOutput {
        return try await self.client.execute(
            operation: "GetUserProfile", 
            path: "/v2/domains/{domainIdentifier}/user-profiles/{userIdentifier}", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Lists the revisions for the asset.
    @Sendable
    public func listAssetRevisions(_ input: ListAssetRevisionsInput, logger: Logger = AWSClient.loggingDisabled) async throws -> ListAssetRevisionsOutput {
        return try await self.client.execute(
            operation: "ListAssetRevisions", 
            path: "/v2/domains/{domainIdentifier}/assets/{identifier}/revisions", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Lists data source run activities.
    @Sendable
    public func listDataSourceRunActivities(_ input: ListDataSourceRunActivitiesInput, logger: Logger = AWSClient.loggingDisabled) async throws -> ListDataSourceRunActivitiesOutput {
        return try await self.client.execute(
            operation: "ListDataSourceRunActivities", 
            path: "/v2/domains/{domainIdentifier}/data-source-runs/{identifier}/activities", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Lists data source runs in Amazon DataZone.
    @Sendable
    public func listDataSourceRuns(_ input: ListDataSourceRunsInput, logger: Logger = AWSClient.loggingDisabled) async throws -> ListDataSourceRunsOutput {
        return try await self.client.execute(
            operation: "ListDataSourceRuns", 
            path: "/v2/domains/{domainIdentifier}/data-sources/{dataSourceIdentifier}/runs", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Lists data sources in Amazon DataZone.
    @Sendable
    public func listDataSources(_ input: ListDataSourcesInput, logger: Logger = AWSClient.loggingDisabled) async throws -> ListDataSourcesOutput {
        return try await self.client.execute(
            operation: "ListDataSources", 
            path: "/v2/domains/{domainIdentifier}/data-sources", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Lists Amazon DataZone domains.
    @Sendable
    public func listDomains(_ input: ListDomainsInput, logger: Logger = AWSClient.loggingDisabled) async throws -> ListDomainsOutput {
        return try await self.client.execute(
            operation: "ListDomains", 
            path: "/v2/domains", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Lists blueprint configurations for a Amazon DataZone environment.
    @Sendable
    public func listEnvironmentBlueprintConfigurations(_ input: ListEnvironmentBlueprintConfigurationsInput, logger: Logger = AWSClient.loggingDisabled) async throws -> ListEnvironmentBlueprintConfigurationsOutput {
        return try await self.client.execute(
            operation: "ListEnvironmentBlueprintConfigurations", 
            path: "/v2/domains/{domainIdentifier}/environment-blueprint-configurations", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Lists blueprints in an Amazon DataZone environment.
    @Sendable
    public func listEnvironmentBlueprints(_ input: ListEnvironmentBlueprintsInput, logger: Logger = AWSClient.loggingDisabled) async throws -> ListEnvironmentBlueprintsOutput {
        return try await self.client.execute(
            operation: "ListEnvironmentBlueprints", 
            path: "/v2/domains/{domainIdentifier}/environment-blueprints", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Lists Amazon DataZone environment profiles.
    @Sendable
    public func listEnvironmentProfiles(_ input: ListEnvironmentProfilesInput, logger: Logger = AWSClient.loggingDisabled) async throws -> ListEnvironmentProfilesOutput {
        return try await self.client.execute(
            operation: "ListEnvironmentProfiles", 
            path: "/v2/domains/{domainIdentifier}/environment-profiles", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Lists Amazon DataZone environments.
    @Sendable
    public func listEnvironments(_ input: ListEnvironmentsInput, logger: Logger = AWSClient.loggingDisabled) async throws -> ListEnvironmentsOutput {
        return try await self.client.execute(
            operation: "ListEnvironments", 
            path: "/v2/domains/{domainIdentifier}/environments", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Lists all metadata generation runs.
    @Sendable
    public func listMetadataGenerationRuns(_ input: ListMetadataGenerationRunsInput, logger: Logger = AWSClient.loggingDisabled) async throws -> ListMetadataGenerationRunsOutput {
        return try await self.client.execute(
            operation: "ListMetadataGenerationRuns", 
            path: "/v2/domains/{domainIdentifier}/metadata-generation-runs", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Lists all Amazon DataZone notifications.
    @Sendable
    public func listNotifications(_ input: ListNotificationsInput, logger: Logger = AWSClient.loggingDisabled) async throws -> ListNotificationsOutput {
        return try await self.client.execute(
            operation: "ListNotifications", 
            path: "/v2/domains/{domainIdentifier}/notifications", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Lists all members of the specified project.
    @Sendable
    public func listProjectMemberships(_ input: ListProjectMembershipsInput, logger: Logger = AWSClient.loggingDisabled) async throws -> ListProjectMembershipsOutput {
        return try await self.client.execute(
            operation: "ListProjectMemberships", 
            path: "/v2/domains/{domainIdentifier}/projects/{projectIdentifier}/memberships", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Lists Amazon DataZone projects.
    @Sendable
    public func listProjects(_ input: ListProjectsInput, logger: Logger = AWSClient.loggingDisabled) async throws -> ListProjectsOutput {
        return try await self.client.execute(
            operation: "ListProjects", 
            path: "/v2/domains/{domainIdentifier}/projects", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Lists subscription grants.
    @Sendable
    public func listSubscriptionGrants(_ input: ListSubscriptionGrantsInput, logger: Logger = AWSClient.loggingDisabled) async throws -> ListSubscriptionGrantsOutput {
        return try await self.client.execute(
            operation: "ListSubscriptionGrants", 
            path: "/v2/domains/{domainIdentifier}/subscription-grants", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Lists Amazon DataZone subscription requests.
    @Sendable
    public func listSubscriptionRequests(_ input: ListSubscriptionRequestsInput, logger: Logger = AWSClient.loggingDisabled) async throws -> ListSubscriptionRequestsOutput {
        return try await self.client.execute(
            operation: "ListSubscriptionRequests", 
            path: "/v2/domains/{domainIdentifier}/subscription-requests", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Lists subscription targets in Amazon DataZone.
    @Sendable
    public func listSubscriptionTargets(_ input: ListSubscriptionTargetsInput, logger: Logger = AWSClient.loggingDisabled) async throws -> ListSubscriptionTargetsOutput {
        return try await self.client.execute(
            operation: "ListSubscriptionTargets", 
            path: "/v2/domains/{domainIdentifier}/environments/{environmentIdentifier}/subscription-targets", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Lists subscriptions in Amazon DataZone.
    @Sendable
    public func listSubscriptions(_ input: ListSubscriptionsInput, logger: Logger = AWSClient.loggingDisabled) async throws -> ListSubscriptionsOutput {
        return try await self.client.execute(
            operation: "ListSubscriptions", 
            path: "/v2/domains/{domainIdentifier}/subscriptions", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Lists tags for the specified resource in Amazon DataZone.
    @Sendable
    public func listTagsForResource(_ input: ListTagsForResourceRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> ListTagsForResourceResponse {
        return try await self.client.execute(
            operation: "ListTagsForResource", 
            path: "/tags/{resourceArn}", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Lists time series data points.
    @Sendable
    public func listTimeSeriesDataPoints(_ input: ListTimeSeriesDataPointsInput, logger: Logger = AWSClient.loggingDisabled) async throws -> ListTimeSeriesDataPointsOutput {
        return try await self.client.execute(
            operation: "ListTimeSeriesDataPoints", 
            path: "/v2/domains/{domainIdentifier}/entities/{entityType}/{entityIdentifier}/time-series-data-points", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Posts time series data points to Amazon DataZone for the specified asset.
    @Sendable
    public func postTimeSeriesDataPoints(_ input: PostTimeSeriesDataPointsInput, logger: Logger = AWSClient.loggingDisabled) async throws -> PostTimeSeriesDataPointsOutput {
        return try await self.client.execute(
            operation: "PostTimeSeriesDataPoints", 
            path: "/v2/domains/{domainIdentifier}/entities/{entityType}/{entityIdentifier}/time-series-data-points", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Writes the configuration for the specified environment blueprint in Amazon DataZone.
    @Sendable
    public func putEnvironmentBlueprintConfiguration(_ input: PutEnvironmentBlueprintConfigurationInput, logger: Logger = AWSClient.loggingDisabled) async throws -> PutEnvironmentBlueprintConfigurationOutput {
        return try await self.client.execute(
            operation: "PutEnvironmentBlueprintConfiguration", 
            path: "/v2/domains/{domainIdentifier}/environment-blueprint-configurations/{environmentBlueprintIdentifier}", 
            httpMethod: .PUT, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Rejects automatically generated business-friendly metadata for your Amazon DataZone assets.
    @Sendable
    public func rejectPredictions(_ input: RejectPredictionsInput, logger: Logger = AWSClient.loggingDisabled) async throws -> RejectPredictionsOutput {
        return try await self.client.execute(
            operation: "RejectPredictions", 
            path: "/v2/domains/{domainIdentifier}/assets/{identifier}/reject-predictions", 
            httpMethod: .PUT, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Rejects the specified subscription request.
    @Sendable
    public func rejectSubscriptionRequest(_ input: RejectSubscriptionRequestInput, logger: Logger = AWSClient.loggingDisabled) async throws -> RejectSubscriptionRequestOutput {
        return try await self.client.execute(
            operation: "RejectSubscriptionRequest", 
            path: "/v2/domains/{domainIdentifier}/subscription-requests/{identifier}/reject", 
            httpMethod: .PUT, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Revokes a specified subscription in Amazon DataZone.
    @Sendable
    public func revokeSubscription(_ input: RevokeSubscriptionInput, logger: Logger = AWSClient.loggingDisabled) async throws -> RevokeSubscriptionOutput {
        return try await self.client.execute(
            operation: "RevokeSubscription", 
            path: "/v2/domains/{domainIdentifier}/subscriptions/{identifier}/revoke", 
            httpMethod: .PUT, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Searches for assets in Amazon DataZone.
    @Sendable
    public func search(_ input: SearchInput, logger: Logger = AWSClient.loggingDisabled) async throws -> SearchOutput {
        return try await self.client.execute(
            operation: "Search", 
            path: "/v2/domains/{domainIdentifier}/search", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Searches group profiles in Amazon DataZone.
    @Sendable
    public func searchGroupProfiles(_ input: SearchGroupProfilesInput, logger: Logger = AWSClient.loggingDisabled) async throws -> SearchGroupProfilesOutput {
        return try await self.client.execute(
            operation: "SearchGroupProfiles", 
            path: "/v2/domains/{domainIdentifier}/search-group-profiles", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Searches listings (records of an asset at a given time) in Amazon DataZone.
    @Sendable
    public func searchListings(_ input: SearchListingsInput, logger: Logger = AWSClient.loggingDisabled) async throws -> SearchListingsOutput {
        return try await self.client.execute(
            operation: "SearchListings", 
            path: "/v2/domains/{domainIdentifier}/listings/search", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Searches for types in Amazon DataZone.
    @Sendable
    public func searchTypes(_ input: SearchTypesInput, logger: Logger = AWSClient.loggingDisabled) async throws -> SearchTypesOutput {
        return try await self.client.execute(
            operation: "SearchTypes", 
            path: "/v2/domains/{domainIdentifier}/types-search", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Searches user profiles in Amazon DataZone.
    @Sendable
    public func searchUserProfiles(_ input: SearchUserProfilesInput, logger: Logger = AWSClient.loggingDisabled) async throws -> SearchUserProfilesOutput {
        return try await self.client.execute(
            operation: "SearchUserProfiles", 
            path: "/v2/domains/{domainIdentifier}/search-user-profiles", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Start the run of the specified data source in Amazon DataZone.
    @Sendable
    public func startDataSourceRun(_ input: StartDataSourceRunInput, logger: Logger = AWSClient.loggingDisabled) async throws -> StartDataSourceRunOutput {
        return try await self.client.execute(
            operation: "StartDataSourceRun", 
            path: "/v2/domains/{domainIdentifier}/data-sources/{dataSourceIdentifier}/runs", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Starts the metadata generation run.
    @Sendable
    public func startMetadataGenerationRun(_ input: StartMetadataGenerationRunInput, logger: Logger = AWSClient.loggingDisabled) async throws -> StartMetadataGenerationRunOutput {
        return try await self.client.execute(
            operation: "StartMetadataGenerationRun", 
            path: "/v2/domains/{domainIdentifier}/metadata-generation-runs", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Tags a resource in Amazon DataZone.
    @Sendable
    public func tagResource(_ input: TagResourceRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> TagResourceResponse {
        return try await self.client.execute(
            operation: "TagResource", 
            path: "/tags/{resourceArn}", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Untags a resource in Amazon DataZone.
    @Sendable
    public func untagResource(_ input: UntagResourceRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> UntagResourceResponse {
        return try await self.client.execute(
            operation: "UntagResource", 
            path: "/tags/{resourceArn}", 
            httpMethod: .DELETE, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Updates the specified data source in Amazon DataZone.
    @Sendable
    public func updateDataSource(_ input: UpdateDataSourceInput, logger: Logger = AWSClient.loggingDisabled) async throws -> UpdateDataSourceOutput {
        return try await self.client.execute(
            operation: "UpdateDataSource", 
            path: "/v2/domains/{domainIdentifier}/data-sources/{identifier}", 
            httpMethod: .PATCH, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Updates a Amazon DataZone domain.
    @Sendable
    public func updateDomain(_ input: UpdateDomainInput, logger: Logger = AWSClient.loggingDisabled) async throws -> UpdateDomainOutput {
        return try await self.client.execute(
            operation: "UpdateDomain", 
            path: "/v2/domains/{identifier}", 
            httpMethod: .PUT, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Updates the specified environment in Amazon DataZone.
    @Sendable
    public func updateEnvironment(_ input: UpdateEnvironmentInput, logger: Logger = AWSClient.loggingDisabled) async throws -> UpdateEnvironmentOutput {
        return try await self.client.execute(
            operation: "UpdateEnvironment", 
            path: "/v2/domains/{domainIdentifier}/environments/{identifier}", 
            httpMethod: .PATCH, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Updates the specified environment profile in Amazon DataZone.
    @Sendable
    public func updateEnvironmentProfile(_ input: UpdateEnvironmentProfileInput, logger: Logger = AWSClient.loggingDisabled) async throws -> UpdateEnvironmentProfileOutput {
        return try await self.client.execute(
            operation: "UpdateEnvironmentProfile", 
            path: "/v2/domains/{domainIdentifier}/environment-profiles/{identifier}", 
            httpMethod: .PATCH, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Updates the business glossary in Amazon DataZone.
    @Sendable
    public func updateGlossary(_ input: UpdateGlossaryInput, logger: Logger = AWSClient.loggingDisabled) async throws -> UpdateGlossaryOutput {
        return try await self.client.execute(
            operation: "UpdateGlossary", 
            path: "/v2/domains/{domainIdentifier}/glossaries/{identifier}", 
            httpMethod: .PATCH, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Updates a business glossary term in Amazon DataZone.
    @Sendable
    public func updateGlossaryTerm(_ input: UpdateGlossaryTermInput, logger: Logger = AWSClient.loggingDisabled) async throws -> UpdateGlossaryTermOutput {
        return try await self.client.execute(
            operation: "UpdateGlossaryTerm", 
            path: "/v2/domains/{domainIdentifier}/glossary-terms/{identifier}", 
            httpMethod: .PATCH, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Updates the specified group profile in Amazon DataZone.
    @Sendable
    public func updateGroupProfile(_ input: UpdateGroupProfileInput, logger: Logger = AWSClient.loggingDisabled) async throws -> UpdateGroupProfileOutput {
        return try await self.client.execute(
            operation: "UpdateGroupProfile", 
            path: "/v2/domains/{domainIdentifier}/group-profiles/{groupIdentifier}", 
            httpMethod: .PUT, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Updates the specified project in Amazon DataZone.
    @Sendable
    public func updateProject(_ input: UpdateProjectInput, logger: Logger = AWSClient.loggingDisabled) async throws -> UpdateProjectOutput {
        return try await self.client.execute(
            operation: "UpdateProject", 
            path: "/v2/domains/{domainIdentifier}/projects/{identifier}", 
            httpMethod: .PATCH, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Updates the status of the specified subscription grant status in Amazon DataZone.
    @Sendable
    public func updateSubscriptionGrantStatus(_ input: UpdateSubscriptionGrantStatusInput, logger: Logger = AWSClient.loggingDisabled) async throws -> UpdateSubscriptionGrantStatusOutput {
        return try await self.client.execute(
            operation: "UpdateSubscriptionGrantStatus", 
            path: "/v2/domains/{domainIdentifier}/subscription-grants/{identifier}/status/{assetIdentifier}", 
            httpMethod: .PATCH, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Updates a specified subscription request in Amazon DataZone.
    @Sendable
    public func updateSubscriptionRequest(_ input: UpdateSubscriptionRequestInput, logger: Logger = AWSClient.loggingDisabled) async throws -> UpdateSubscriptionRequestOutput {
        return try await self.client.execute(
            operation: "UpdateSubscriptionRequest", 
            path: "/v2/domains/{domainIdentifier}/subscription-requests/{identifier}", 
            httpMethod: .PATCH, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Updates the specified subscription target in Amazon DataZone.
    @Sendable
    public func updateSubscriptionTarget(_ input: UpdateSubscriptionTargetInput, logger: Logger = AWSClient.loggingDisabled) async throws -> UpdateSubscriptionTargetOutput {
        return try await self.client.execute(
            operation: "UpdateSubscriptionTarget", 
            path: "/v2/domains/{domainIdentifier}/environments/{environmentIdentifier}/subscription-targets/{identifier}", 
            httpMethod: .PATCH, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Updates the specified user profile in Amazon DataZone.
    @Sendable
    public func updateUserProfile(_ input: UpdateUserProfileInput, logger: Logger = AWSClient.loggingDisabled) async throws -> UpdateUserProfileOutput {
        return try await self.client.execute(
            operation: "UpdateUserProfile", 
            path: "/v2/domains/{domainIdentifier}/user-profiles/{userIdentifier}", 
            httpMethod: .PUT, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
}

extension DataZone {
    /// Initializer required by `AWSService.with(middlewares:timeout:byteBufferAllocator:options)`. You are not able to use this initializer directly as there are not public
    /// initializers for `AWSServiceConfig.Patch`. Please use `AWSService.with(middlewares:timeout:byteBufferAllocator:options)` instead.
    public init(from: DataZone, patch: AWSServiceConfig.Patch) {
        self.client = from.client
        self.config = from.config.with(patch: patch)
    }
}

// MARK: Paginators

@available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
extension DataZone {
    /// Lists data source run activities.
    /// Return PaginatorSequence for operation.
    ///
    /// - Parameters:
    ///   - input: Input for request
    ///   - logger: Logger used flot logging
    public func listDataSourceRunActivitiesPaginator(
        _ input: ListDataSourceRunActivitiesInput,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<ListDataSourceRunActivitiesInput, ListDataSourceRunActivitiesOutput> {
        return .init(
            input: input,
            command: self.listDataSourceRunActivities,
            inputKey: \ListDataSourceRunActivitiesInput.nextToken,
            outputKey: \ListDataSourceRunActivitiesOutput.nextToken,
            logger: logger
        )
    }

    /// Lists data source runs in Amazon DataZone.
    /// Return PaginatorSequence for operation.
    ///
    /// - Parameters:
    ///   - input: Input for request
    ///   - logger: Logger used flot logging
    public func listDataSourceRunsPaginator(
        _ input: ListDataSourceRunsInput,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<ListDataSourceRunsInput, ListDataSourceRunsOutput> {
        return .init(
            input: input,
            command: self.listDataSourceRuns,
            inputKey: \ListDataSourceRunsInput.nextToken,
            outputKey: \ListDataSourceRunsOutput.nextToken,
            logger: logger
        )
    }

    /// Lists data sources in Amazon DataZone.
    /// Return PaginatorSequence for operation.
    ///
    /// - Parameters:
    ///   - input: Input for request
    ///   - logger: Logger used flot logging
    public func listDataSourcesPaginator(
        _ input: ListDataSourcesInput,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<ListDataSourcesInput, ListDataSourcesOutput> {
        return .init(
            input: input,
            command: self.listDataSources,
            inputKey: \ListDataSourcesInput.nextToken,
            outputKey: \ListDataSourcesOutput.nextToken,
            logger: logger
        )
    }

    /// Lists Amazon DataZone domains.
    /// Return PaginatorSequence for operation.
    ///
    /// - Parameters:
    ///   - input: Input for request
    ///   - logger: Logger used flot logging
    public func listDomainsPaginator(
        _ input: ListDomainsInput,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<ListDomainsInput, ListDomainsOutput> {
        return .init(
            input: input,
            command: self.listDomains,
            inputKey: \ListDomainsInput.nextToken,
            outputKey: \ListDomainsOutput.nextToken,
            logger: logger
        )
    }

    /// Lists blueprint configurations for a Amazon DataZone environment.
    /// Return PaginatorSequence for operation.
    ///
    /// - Parameters:
    ///   - input: Input for request
    ///   - logger: Logger used flot logging
    public func listEnvironmentBlueprintConfigurationsPaginator(
        _ input: ListEnvironmentBlueprintConfigurationsInput,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<ListEnvironmentBlueprintConfigurationsInput, ListEnvironmentBlueprintConfigurationsOutput> {
        return .init(
            input: input,
            command: self.listEnvironmentBlueprintConfigurations,
            inputKey: \ListEnvironmentBlueprintConfigurationsInput.nextToken,
            outputKey: \ListEnvironmentBlueprintConfigurationsOutput.nextToken,
            logger: logger
        )
    }

    /// Lists blueprints in an Amazon DataZone environment.
    /// Return PaginatorSequence for operation.
    ///
    /// - Parameters:
    ///   - input: Input for request
    ///   - logger: Logger used flot logging
    public func listEnvironmentBlueprintsPaginator(
        _ input: ListEnvironmentBlueprintsInput,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<ListEnvironmentBlueprintsInput, ListEnvironmentBlueprintsOutput> {
        return .init(
            input: input,
            command: self.listEnvironmentBlueprints,
            inputKey: \ListEnvironmentBlueprintsInput.nextToken,
            outputKey: \ListEnvironmentBlueprintsOutput.nextToken,
            logger: logger
        )
    }

    /// Lists Amazon DataZone environment profiles.
    /// Return PaginatorSequence for operation.
    ///
    /// - Parameters:
    ///   - input: Input for request
    ///   - logger: Logger used flot logging
    public func listEnvironmentProfilesPaginator(
        _ input: ListEnvironmentProfilesInput,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<ListEnvironmentProfilesInput, ListEnvironmentProfilesOutput> {
        return .init(
            input: input,
            command: self.listEnvironmentProfiles,
            inputKey: \ListEnvironmentProfilesInput.nextToken,
            outputKey: \ListEnvironmentProfilesOutput.nextToken,
            logger: logger
        )
    }

    /// Lists Amazon DataZone environments.
    /// Return PaginatorSequence for operation.
    ///
    /// - Parameters:
    ///   - input: Input for request
    ///   - logger: Logger used flot logging
    public func listEnvironmentsPaginator(
        _ input: ListEnvironmentsInput,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<ListEnvironmentsInput, ListEnvironmentsOutput> {
        return .init(
            input: input,
            command: self.listEnvironments,
            inputKey: \ListEnvironmentsInput.nextToken,
            outputKey: \ListEnvironmentsOutput.nextToken,
            logger: logger
        )
    }

    /// Lists all metadata generation runs.
    /// Return PaginatorSequence for operation.
    ///
    /// - Parameters:
    ///   - input: Input for request
    ///   - logger: Logger used flot logging
    public func listMetadataGenerationRunsPaginator(
        _ input: ListMetadataGenerationRunsInput,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<ListMetadataGenerationRunsInput, ListMetadataGenerationRunsOutput> {
        return .init(
            input: input,
            command: self.listMetadataGenerationRuns,
            inputKey: \ListMetadataGenerationRunsInput.nextToken,
            outputKey: \ListMetadataGenerationRunsOutput.nextToken,
            logger: logger
        )
    }

    /// Lists all Amazon DataZone notifications.
    /// Return PaginatorSequence for operation.
    ///
    /// - Parameters:
    ///   - input: Input for request
    ///   - logger: Logger used flot logging
    public func listNotificationsPaginator(
        _ input: ListNotificationsInput,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<ListNotificationsInput, ListNotificationsOutput> {
        return .init(
            input: input,
            command: self.listNotifications,
            inputKey: \ListNotificationsInput.nextToken,
            outputKey: \ListNotificationsOutput.nextToken,
            logger: logger
        )
    }

    /// Lists all members of the specified project.
    /// Return PaginatorSequence for operation.
    ///
    /// - Parameters:
    ///   - input: Input for request
    ///   - logger: Logger used flot logging
    public func listProjectMembershipsPaginator(
        _ input: ListProjectMembershipsInput,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<ListProjectMembershipsInput, ListProjectMembershipsOutput> {
        return .init(
            input: input,
            command: self.listProjectMemberships,
            inputKey: \ListProjectMembershipsInput.nextToken,
            outputKey: \ListProjectMembershipsOutput.nextToken,
            logger: logger
        )
    }

    /// Lists Amazon DataZone projects.
    /// Return PaginatorSequence for operation.
    ///
    /// - Parameters:
    ///   - input: Input for request
    ///   - logger: Logger used flot logging
    public func listProjectsPaginator(
        _ input: ListProjectsInput,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<ListProjectsInput, ListProjectsOutput> {
        return .init(
            input: input,
            command: self.listProjects,
            inputKey: \ListProjectsInput.nextToken,
            outputKey: \ListProjectsOutput.nextToken,
            logger: logger
        )
    }

    /// Lists subscription grants.
    /// Return PaginatorSequence for operation.
    ///
    /// - Parameters:
    ///   - input: Input for request
    ///   - logger: Logger used flot logging
    public func listSubscriptionGrantsPaginator(
        _ input: ListSubscriptionGrantsInput,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<ListSubscriptionGrantsInput, ListSubscriptionGrantsOutput> {
        return .init(
            input: input,
            command: self.listSubscriptionGrants,
            inputKey: \ListSubscriptionGrantsInput.nextToken,
            outputKey: \ListSubscriptionGrantsOutput.nextToken,
            logger: logger
        )
    }

    /// Lists Amazon DataZone subscription requests.
    /// Return PaginatorSequence for operation.
    ///
    /// - Parameters:
    ///   - input: Input for request
    ///   - logger: Logger used flot logging
    public func listSubscriptionRequestsPaginator(
        _ input: ListSubscriptionRequestsInput,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<ListSubscriptionRequestsInput, ListSubscriptionRequestsOutput> {
        return .init(
            input: input,
            command: self.listSubscriptionRequests,
            inputKey: \ListSubscriptionRequestsInput.nextToken,
            outputKey: \ListSubscriptionRequestsOutput.nextToken,
            logger: logger
        )
    }

    /// Lists subscription targets in Amazon DataZone.
    /// Return PaginatorSequence for operation.
    ///
    /// - Parameters:
    ///   - input: Input for request
    ///   - logger: Logger used flot logging
    public func listSubscriptionTargetsPaginator(
        _ input: ListSubscriptionTargetsInput,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<ListSubscriptionTargetsInput, ListSubscriptionTargetsOutput> {
        return .init(
            input: input,
            command: self.listSubscriptionTargets,
            inputKey: \ListSubscriptionTargetsInput.nextToken,
            outputKey: \ListSubscriptionTargetsOutput.nextToken,
            logger: logger
        )
    }

    /// Lists subscriptions in Amazon DataZone.
    /// Return PaginatorSequence for operation.
    ///
    /// - Parameters:
    ///   - input: Input for request
    ///   - logger: Logger used flot logging
    public func listSubscriptionsPaginator(
        _ input: ListSubscriptionsInput,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<ListSubscriptionsInput, ListSubscriptionsOutput> {
        return .init(
            input: input,
            command: self.listSubscriptions,
            inputKey: \ListSubscriptionsInput.nextToken,
            outputKey: \ListSubscriptionsOutput.nextToken,
            logger: logger
        )
    }

    /// Lists time series data points.
    /// Return PaginatorSequence for operation.
    ///
    /// - Parameters:
    ///   - input: Input for request
    ///   - logger: Logger used flot logging
    public func listTimeSeriesDataPointsPaginator(
        _ input: ListTimeSeriesDataPointsInput,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<ListTimeSeriesDataPointsInput, ListTimeSeriesDataPointsOutput> {
        return .init(
            input: input,
            command: self.listTimeSeriesDataPoints,
            inputKey: \ListTimeSeriesDataPointsInput.nextToken,
            outputKey: \ListTimeSeriesDataPointsOutput.nextToken,
            logger: logger
        )
    }

    /// Searches for assets in Amazon DataZone.
    /// Return PaginatorSequence for operation.
    ///
    /// - Parameters:
    ///   - input: Input for request
    ///   - logger: Logger used flot logging
    public func searchPaginator(
        _ input: SearchInput,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<SearchInput, SearchOutput> {
        return .init(
            input: input,
            command: self.search,
            inputKey: \SearchInput.nextToken,
            outputKey: \SearchOutput.nextToken,
            logger: logger
        )
    }

    /// Searches group profiles in Amazon DataZone.
    /// Return PaginatorSequence for operation.
    ///
    /// - Parameters:
    ///   - input: Input for request
    ///   - logger: Logger used flot logging
    public func searchGroupProfilesPaginator(
        _ input: SearchGroupProfilesInput,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<SearchGroupProfilesInput, SearchGroupProfilesOutput> {
        return .init(
            input: input,
            command: self.searchGroupProfiles,
            inputKey: \SearchGroupProfilesInput.nextToken,
            outputKey: \SearchGroupProfilesOutput.nextToken,
            logger: logger
        )
    }

    /// Searches listings (records of an asset at a given time) in Amazon DataZone.
    /// Return PaginatorSequence for operation.
    ///
    /// - Parameters:
    ///   - input: Input for request
    ///   - logger: Logger used flot logging
    public func searchListingsPaginator(
        _ input: SearchListingsInput,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<SearchListingsInput, SearchListingsOutput> {
        return .init(
            input: input,
            command: self.searchListings,
            inputKey: \SearchListingsInput.nextToken,
            outputKey: \SearchListingsOutput.nextToken,
            logger: logger
        )
    }

    /// Searches for types in Amazon DataZone.
    /// Return PaginatorSequence for operation.
    ///
    /// - Parameters:
    ///   - input: Input for request
    ///   - logger: Logger used flot logging
    public func searchTypesPaginator(
        _ input: SearchTypesInput,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<SearchTypesInput, SearchTypesOutput> {
        return .init(
            input: input,
            command: self.searchTypes,
            inputKey: \SearchTypesInput.nextToken,
            outputKey: \SearchTypesOutput.nextToken,
            logger: logger
        )
    }

    /// Searches user profiles in Amazon DataZone.
    /// Return PaginatorSequence for operation.
    ///
    /// - Parameters:
    ///   - input: Input for request
    ///   - logger: Logger used flot logging
    public func searchUserProfilesPaginator(
        _ input: SearchUserProfilesInput,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<SearchUserProfilesInput, SearchUserProfilesOutput> {
        return .init(
            input: input,
            command: self.searchUserProfiles,
            inputKey: \SearchUserProfilesInput.nextToken,
            outputKey: \SearchUserProfilesOutput.nextToken,
            logger: logger
        )
    }
}

extension DataZone.ListDataSourceRunActivitiesInput: AWSPaginateToken {
    public func usingPaginationToken(_ token: String) -> DataZone.ListDataSourceRunActivitiesInput {
        return .init(
            domainIdentifier: self.domainIdentifier,
            identifier: self.identifier,
            maxResults: self.maxResults,
            nextToken: token,
            status: self.status
        )
    }
}

extension DataZone.ListDataSourceRunsInput: AWSPaginateToken {
    public func usingPaginationToken(_ token: String) -> DataZone.ListDataSourceRunsInput {
        return .init(
            dataSourceIdentifier: self.dataSourceIdentifier,
            domainIdentifier: self.domainIdentifier,
            maxResults: self.maxResults,
            nextToken: token,
            status: self.status
        )
    }
}

extension DataZone.ListDataSourcesInput: AWSPaginateToken {
    public func usingPaginationToken(_ token: String) -> DataZone.ListDataSourcesInput {
        return .init(
            domainIdentifier: self.domainIdentifier,
            environmentIdentifier: self.environmentIdentifier,
            maxResults: self.maxResults,
            name: self.name,
            nextToken: token,
            projectIdentifier: self.projectIdentifier,
            status: self.status,
            type: self.type
        )
    }
}

extension DataZone.ListDomainsInput: AWSPaginateToken {
    public func usingPaginationToken(_ token: String) -> DataZone.ListDomainsInput {
        return .init(
            maxResults: self.maxResults,
            nextToken: token,
            status: self.status
        )
    }
}

extension DataZone.ListEnvironmentBlueprintConfigurationsInput: AWSPaginateToken {
    public func usingPaginationToken(_ token: String) -> DataZone.ListEnvironmentBlueprintConfigurationsInput {
        return .init(
            domainIdentifier: self.domainIdentifier,
            maxResults: self.maxResults,
            nextToken: token
        )
    }
}

extension DataZone.ListEnvironmentBlueprintsInput: AWSPaginateToken {
    public func usingPaginationToken(_ token: String) -> DataZone.ListEnvironmentBlueprintsInput {
        return .init(
            domainIdentifier: self.domainIdentifier,
            managed: self.managed,
            maxResults: self.maxResults,
            name: self.name,
            nextToken: token
        )
    }
}

extension DataZone.ListEnvironmentProfilesInput: AWSPaginateToken {
    public func usingPaginationToken(_ token: String) -> DataZone.ListEnvironmentProfilesInput {
        return .init(
            awsAccountId: self.awsAccountId,
            awsAccountRegion: self.awsAccountRegion,
            domainIdentifier: self.domainIdentifier,
            environmentBlueprintIdentifier: self.environmentBlueprintIdentifier,
            maxResults: self.maxResults,
            name: self.name,
            nextToken: token,
            projectIdentifier: self.projectIdentifier
        )
    }
}

extension DataZone.ListEnvironmentsInput: AWSPaginateToken {
    public func usingPaginationToken(_ token: String) -> DataZone.ListEnvironmentsInput {
        return .init(
            awsAccountId: self.awsAccountId,
            awsAccountRegion: self.awsAccountRegion,
            domainIdentifier: self.domainIdentifier,
            environmentBlueprintIdentifier: self.environmentBlueprintIdentifier,
            environmentProfileIdentifier: self.environmentProfileIdentifier,
            maxResults: self.maxResults,
            name: self.name,
            nextToken: token,
            projectIdentifier: self.projectIdentifier,
            provider: self.provider,
            status: self.status
        )
    }
}

extension DataZone.ListMetadataGenerationRunsInput: AWSPaginateToken {
    public func usingPaginationToken(_ token: String) -> DataZone.ListMetadataGenerationRunsInput {
        return .init(
            domainIdentifier: self.domainIdentifier,
            maxResults: self.maxResults,
            nextToken: token,
            status: self.status,
            type: self.type
        )
    }
}

extension DataZone.ListNotificationsInput: AWSPaginateToken {
    public func usingPaginationToken(_ token: String) -> DataZone.ListNotificationsInput {
        return .init(
            afterTimestamp: self.afterTimestamp,
            beforeTimestamp: self.beforeTimestamp,
            domainIdentifier: self.domainIdentifier,
            maxResults: self.maxResults,
            nextToken: token,
            subjects: self.subjects,
            taskStatus: self.taskStatus,
            type: self.type
        )
    }
}

extension DataZone.ListProjectMembershipsInput: AWSPaginateToken {
    public func usingPaginationToken(_ token: String) -> DataZone.ListProjectMembershipsInput {
        return .init(
            domainIdentifier: self.domainIdentifier,
            maxResults: self.maxResults,
            nextToken: token,
            projectIdentifier: self.projectIdentifier,
            sortBy: self.sortBy,
            sortOrder: self.sortOrder
        )
    }
}

extension DataZone.ListProjectsInput: AWSPaginateToken {
    public func usingPaginationToken(_ token: String) -> DataZone.ListProjectsInput {
        return .init(
            domainIdentifier: self.domainIdentifier,
            groupIdentifier: self.groupIdentifier,
            maxResults: self.maxResults,
            name: self.name,
            nextToken: token,
            userIdentifier: self.userIdentifier
        )
    }
}

extension DataZone.ListSubscriptionGrantsInput: AWSPaginateToken {
    public func usingPaginationToken(_ token: String) -> DataZone.ListSubscriptionGrantsInput {
        return .init(
            domainIdentifier: self.domainIdentifier,
            environmentId: self.environmentId,
            maxResults: self.maxResults,
            nextToken: token,
            sortBy: self.sortBy,
            sortOrder: self.sortOrder,
            subscribedListingId: self.subscribedListingId,
            subscriptionId: self.subscriptionId,
            subscriptionTargetId: self.subscriptionTargetId
        )
    }
}

extension DataZone.ListSubscriptionRequestsInput: AWSPaginateToken {
    public func usingPaginationToken(_ token: String) -> DataZone.ListSubscriptionRequestsInput {
        return .init(
            approverProjectId: self.approverProjectId,
            domainIdentifier: self.domainIdentifier,
            maxResults: self.maxResults,
            nextToken: token,
            owningProjectId: self.owningProjectId,
            sortBy: self.sortBy,
            sortOrder: self.sortOrder,
            status: self.status,
            subscribedListingId: self.subscribedListingId
        )
    }
}

extension DataZone.ListSubscriptionTargetsInput: AWSPaginateToken {
    public func usingPaginationToken(_ token: String) -> DataZone.ListSubscriptionTargetsInput {
        return .init(
            domainIdentifier: self.domainIdentifier,
            environmentIdentifier: self.environmentIdentifier,
            maxResults: self.maxResults,
            nextToken: token,
            sortBy: self.sortBy,
            sortOrder: self.sortOrder
        )
    }
}

extension DataZone.ListSubscriptionsInput: AWSPaginateToken {
    public func usingPaginationToken(_ token: String) -> DataZone.ListSubscriptionsInput {
        return .init(
            approverProjectId: self.approverProjectId,
            domainIdentifier: self.domainIdentifier,
            maxResults: self.maxResults,
            nextToken: token,
            owningProjectId: self.owningProjectId,
            sortBy: self.sortBy,
            sortOrder: self.sortOrder,
            status: self.status,
            subscribedListingId: self.subscribedListingId,
            subscriptionRequestIdentifier: self.subscriptionRequestIdentifier
        )
    }
}

extension DataZone.ListTimeSeriesDataPointsInput: AWSPaginateToken {
    public func usingPaginationToken(_ token: String) -> DataZone.ListTimeSeriesDataPointsInput {
        return .init(
            domainIdentifier: self.domainIdentifier,
            endedAt: self.endedAt,
            entityIdentifier: self.entityIdentifier,
            entityType: self.entityType,
            formName: self.formName,
            maxResults: self.maxResults,
            nextToken: token,
            startedAt: self.startedAt
        )
    }
}

extension DataZone.SearchGroupProfilesInput: AWSPaginateToken {
    public func usingPaginationToken(_ token: String) -> DataZone.SearchGroupProfilesInput {
        return .init(
            domainIdentifier: self.domainIdentifier,
            groupType: self.groupType,
            maxResults: self.maxResults,
            nextToken: token,
            searchText: self.searchText
        )
    }
}

extension DataZone.SearchInput: AWSPaginateToken {
    public func usingPaginationToken(_ token: String) -> DataZone.SearchInput {
        return .init(
            additionalAttributes: self.additionalAttributes,
            domainIdentifier: self.domainIdentifier,
            filters: self.filters,
            maxResults: self.maxResults,
            nextToken: token,
            owningProjectIdentifier: self.owningProjectIdentifier,
            searchIn: self.searchIn,
            searchScope: self.searchScope,
            searchText: self.searchText,
            sort: self.sort
        )
    }
}

extension DataZone.SearchListingsInput: AWSPaginateToken {
    public func usingPaginationToken(_ token: String) -> DataZone.SearchListingsInput {
        return .init(
            additionalAttributes: self.additionalAttributes,
            domainIdentifier: self.domainIdentifier,
            filters: self.filters,
            maxResults: self.maxResults,
            nextToken: token,
            searchIn: self.searchIn,
            searchText: self.searchText,
            sort: self.sort
        )
    }
}

extension DataZone.SearchTypesInput: AWSPaginateToken {
    public func usingPaginationToken(_ token: String) -> DataZone.SearchTypesInput {
        return .init(
            domainIdentifier: self.domainIdentifier,
            filters: self.filters,
            managed: self.managed,
            maxResults: self.maxResults,
            nextToken: token,
            searchIn: self.searchIn,
            searchScope: self.searchScope,
            searchText: self.searchText,
            sort: self.sort
        )
    }
}

extension DataZone.SearchUserProfilesInput: AWSPaginateToken {
    public func usingPaginationToken(_ token: String) -> DataZone.SearchUserProfilesInput {
        return .init(
            domainIdentifier: self.domainIdentifier,
            maxResults: self.maxResults,
            nextToken: token,
            searchText: self.searchText,
            userType: self.userType
        )
    }
}
