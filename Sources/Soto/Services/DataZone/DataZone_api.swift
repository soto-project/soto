//===----------------------------------------------------------------------===//
//
// This source file is part of the Soto for AWS open source project
//
// Copyright (c) 2017-2024 the Soto project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
// See CONTRIBUTORS.txt for the list of Soto project authors
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by https://github.com/soto-project/soto-codegenerator.
// DO NOT EDIT.

#if canImport(FoundationEssentials)
import FoundationEssentials
#else
import Foundation
#endif
@_exported import SotoCore

/// Service object for interacting with AWS DataZone service.
///
/// Amazon DataZone is a data management service that enables you to catalog, discover, govern, share, and analyze your data. With Amazon DataZone, you can share and access your data across accounts and supported regions. Amazon DataZone simplifies your experience across Amazon Web Services services, including, but not limited to, Amazon Redshift, Amazon Athena, Amazon Web Services Glue, and Amazon Web Services Lake Formation.
public struct DataZone: AWSService {
    // MARK: Member variables

    /// Client used for communication with AWS
    public let client: AWSClient
    /// Service configuration
    public let config: AWSServiceConfig

    // MARK: Initialization

    /// Initialize the DataZone client
    /// - parameters:
    ///     - client: AWSClient used to process requests
    ///     - region: Region of server you want to communicate with. This will override the partition parameter.
    ///     - partition: AWS partition where service resides, standard (.aws), china (.awscn), government (.awsusgov).
    ///     - endpoint: Custom endpoint URL to use instead of standard AWS servers
    ///     - middleware: Middleware chain used to edit requests before they are sent and responses before they are decoded 
    ///     - timeout: Timeout value for HTTP requests
    ///     - byteBufferAllocator: Allocator for ByteBuffers
    ///     - options: Service options
    public init(
        client: AWSClient,
        region: SotoCore.Region? = nil,
        partition: AWSPartition = .aws,
        endpoint: String? = nil,
        middleware: AWSMiddlewareProtocol? = nil,
        timeout: TimeAmount? = nil,
        byteBufferAllocator: ByteBufferAllocator = ByteBufferAllocator(),
        options: AWSServiceConfig.Options = []
    ) {
        self.client = client
        self.config = AWSServiceConfig(
            region: region,
            partition: region?.partition ?? partition,
            serviceName: "DataZone",
            serviceIdentifier: "datazone",
            serviceProtocol: .restjson,
            apiVersion: "2018-05-10",
            endpoint: endpoint,
            serviceEndpoints: Self.serviceEndpoints,
            variantEndpoints: Self.variantEndpoints,
            errorType: DataZoneErrorType.self,
            middleware: middleware,
            timeout: timeout,
            byteBufferAllocator: byteBufferAllocator,
            options: options
        )
    }


    /// custom endpoints for regions
    static var serviceEndpoints: [String: String] {[
        "ap-northeast-1": "datazone.ap-northeast-1.api.aws",
        "ap-northeast-2": "datazone.ap-northeast-2.api.aws",
        "ap-northeast-3": "datazone.ap-northeast-3.api.aws",
        "ap-south-2": "datazone.ap-south-2.api.aws",
        "ap-southeast-1": "datazone.ap-southeast-1.api.aws",
        "ap-southeast-2": "datazone.ap-southeast-2.api.aws",
        "ap-southeast-3": "datazone.ap-southeast-3.api.aws",
        "ap-southeast-4": "datazone.ap-southeast-4.api.aws",
        "ap-southeast-5": "datazone.ap-southeast-5.api.aws",
        "ap-southeast-7": "datazone.ap-southeast-7.api.aws",
        "ca-central-1": "datazone.ca-central-1.api.aws",
        "ca-west-1": "datazone.ca-west-1.api.aws",
        "cn-north-1": "datazone.cn-north-1.api.amazonwebservices.com.cn",
        "cn-northwest-1": "datazone.cn-northwest-1.api.amazonwebservices.com.cn",
        "eu-central-1": "datazone.eu-central-1.api.aws",
        "eu-north-1": "datazone.eu-north-1.api.aws",
        "eu-south-1": "datazone.eu-south-1.api.aws",
        "eu-west-1": "datazone.eu-west-1.api.aws",
        "eu-west-2": "datazone.eu-west-2.api.aws",
        "eu-west-3": "datazone.eu-west-3.api.aws",
        "il-central-1": "datazone.il-central-1.api.aws",
        "me-central-1": "datazone.me-central-1.api.aws",
        "me-south-1": "datazone.me-south-1.api.aws",
        "sa-east-1": "datazone.sa-east-1.api.aws",
        "us-east-1": "datazone.us-east-1.api.aws",
        "us-east-2": "datazone.us-east-2.api.aws",
        "us-gov-east-1": "datazone.us-gov-east-1.api.aws",
        "us-gov-west-1": "datazone.us-gov-west-1.api.aws",
        "us-west-1": "datazone.us-west-1.api.aws",
        "us-west-2": "datazone.us-west-2.api.aws"
    ]}


    /// FIPS and dualstack endpoints
    static var variantEndpoints: [EndpointVariantType: AWSServiceConfig.EndpointVariant] {[
        [.fips]: .init(endpoints: [
            "ap-northeast-1": "datazone-fips.ap-northeast-1.api.aws",
            "ap-northeast-2": "datazone-fips.ap-northeast-2.api.aws",
            "ap-northeast-3": "datazone-fips.ap-northeast-3.api.aws",
            "ap-south-2": "datazone-fips.ap-south-2.api.aws",
            "ap-southeast-1": "datazone-fips.ap-southeast-1.api.aws",
            "ap-southeast-2": "datazone-fips.ap-southeast-2.api.aws",
            "ap-southeast-3": "datazone-fips.ap-southeast-3.api.aws",
            "ap-southeast-4": "datazone-fips.ap-southeast-4.api.aws",
            "ap-southeast-5": "datazone-fips.ap-southeast-5.api.aws",
            "ap-southeast-7": "datazone-fips.ap-southeast-7.api.aws",
            "ca-central-1": "datazone-fips.ca-central-1.amazonaws.com",
            "ca-west-1": "datazone-fips.ca-west-1.api.aws",
            "cn-north-1": "datazone-fips.cn-north-1.api.amazonwebservices.com.cn",
            "cn-northwest-1": "datazone-fips.cn-northwest-1.api.amazonwebservices.com.cn",
            "eu-central-1": "datazone-fips.eu-central-1.api.aws",
            "eu-north-1": "datazone-fips.eu-north-1.api.aws",
            "eu-south-1": "datazone-fips.eu-south-1.api.aws",
            "eu-west-1": "datazone-fips.eu-west-1.api.aws",
            "eu-west-2": "datazone-fips.eu-west-2.api.aws",
            "eu-west-3": "datazone-fips.eu-west-3.api.aws",
            "il-central-1": "datazone-fips.il-central-1.api.aws",
            "me-central-1": "datazone-fips.me-central-1.api.aws",
            "me-south-1": "datazone-fips.me-south-1.api.aws",
            "sa-east-1": "datazone-fips.sa-east-1.api.aws",
            "us-east-1": "datazone-fips.us-east-1.amazonaws.com",
            "us-east-2": "datazone-fips.us-east-2.amazonaws.com",
            "us-gov-east-1": "datazone-fips.us-gov-east-1.api.aws",
            "us-gov-west-1": "datazone-fips.us-gov-west-1.api.aws",
            "us-west-1": "datazone-fips.us-west-1.api.aws",
            "us-west-2": "datazone-fips.us-west-2.amazonaws.com"
        ])
    ]}

    // MARK: API Calls

    /// Accepts automatically generated business-friendly metadata for your Amazon DataZone assets.
    @Sendable
    @inlinable
    public func acceptPredictions(_ input: AcceptPredictionsInput, logger: Logger = AWSClient.loggingDisabled) async throws -> AcceptPredictionsOutput {
        try await self.client.execute(
            operation: "AcceptPredictions", 
            path: "/v2/domains/{domainIdentifier}/assets/{identifier}/accept-predictions", 
            httpMethod: .PUT, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Accepts automatically generated business-friendly metadata for your Amazon DataZone assets.
    ///
    /// Parameters:
    ///   - acceptChoices: Specifies the prediction (aka, the automatically generated piece of metadata) and the target (for example, a column name) that can be accepted.
    ///   - acceptRule: Specifies the rule (or the conditions) under which a prediction can be accepted.
    ///   - clientToken: A unique, case-sensitive identifier to ensure idempotency of the request. This field is automatically populated if not provided.
    ///   - domainIdentifier: The identifier of the Amazon DataZone domain.
    ///   - identifier: The identifier of the asset.
    ///   - revision: The revision that is to be made to the asset.
    ///   - logger: Logger use during operation
    @inlinable
    public func acceptPredictions(
        acceptChoices: [AcceptChoice]? = nil,
        acceptRule: AcceptRule? = nil,
        clientToken: String? = AcceptPredictionsInput.idempotencyToken(),
        domainIdentifier: String,
        identifier: String,
        revision: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> AcceptPredictionsOutput {
        let input = AcceptPredictionsInput(
            acceptChoices: acceptChoices, 
            acceptRule: acceptRule, 
            clientToken: clientToken, 
            domainIdentifier: domainIdentifier, 
            identifier: identifier, 
            revision: revision
        )
        return try await self.acceptPredictions(input, logger: logger)
    }

    /// Accepts a subscription request to a specific asset.
    @Sendable
    @inlinable
    public func acceptSubscriptionRequest(_ input: AcceptSubscriptionRequestInput, logger: Logger = AWSClient.loggingDisabled) async throws -> AcceptSubscriptionRequestOutput {
        try await self.client.execute(
            operation: "AcceptSubscriptionRequest", 
            path: "/v2/domains/{domainIdentifier}/subscription-requests/{identifier}/accept", 
            httpMethod: .PUT, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Accepts a subscription request to a specific asset.
    ///
    /// Parameters:
    ///   - assetScopes: The asset scopes of the accept subscription request.
    ///   - decisionComment: A description that specifies the reason for accepting the specified subscription request.
    ///   - domainIdentifier: The Amazon DataZone domain where the specified subscription request is being accepted.
    ///   - identifier: The unique identifier of the subscription request that is to be accepted.
    ///   - logger: Logger use during operation
    @inlinable
    public func acceptSubscriptionRequest(
        assetScopes: [AcceptedAssetScope]? = nil,
        decisionComment: String? = nil,
        domainIdentifier: String,
        identifier: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> AcceptSubscriptionRequestOutput {
        let input = AcceptSubscriptionRequestInput(
            assetScopes: assetScopes, 
            decisionComment: decisionComment, 
            domainIdentifier: domainIdentifier, 
            identifier: identifier
        )
        return try await self.acceptSubscriptionRequest(input, logger: logger)
    }

    /// Adds the owner of an entity (a domain unit).
    @Sendable
    @inlinable
    public func addEntityOwner(_ input: AddEntityOwnerInput, logger: Logger = AWSClient.loggingDisabled) async throws -> AddEntityOwnerOutput {
        try await self.client.execute(
            operation: "AddEntityOwner", 
            path: "/v2/domains/{domainIdentifier}/entities/{entityType}/{entityIdentifier}/addOwner", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Adds the owner of an entity (a domain unit).
    ///
    /// Parameters:
    ///   - clientToken: A unique, case-sensitive identifier that is provided to ensure the idempotency of the request.
    ///   - domainIdentifier: The ID of the domain in which you want to add the entity owner.
    ///   - entityIdentifier: The ID of the entity to which you want to add an owner.
    ///   - entityType: The type of an entity.
    ///   - owner: The owner that you want to add to the entity.
    ///   - logger: Logger use during operation
    @inlinable
    public func addEntityOwner(
        clientToken: String? = AddEntityOwnerInput.idempotencyToken(),
        domainIdentifier: String,
        entityIdentifier: String,
        entityType: DataZoneEntityType,
        owner: OwnerProperties,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> AddEntityOwnerOutput {
        let input = AddEntityOwnerInput(
            clientToken: clientToken, 
            domainIdentifier: domainIdentifier, 
            entityIdentifier: entityIdentifier, 
            entityType: entityType, 
            owner: owner
        )
        return try await self.addEntityOwner(input, logger: logger)
    }

    /// Adds a policy grant (an authorization policy) to a specified entity, including domain units, environment blueprint configurations, or environment profiles.
    @Sendable
    @inlinable
    public func addPolicyGrant(_ input: AddPolicyGrantInput, logger: Logger = AWSClient.loggingDisabled) async throws -> AddPolicyGrantOutput {
        try await self.client.execute(
            operation: "AddPolicyGrant", 
            path: "/v2/domains/{domainIdentifier}/policies/managed/{entityType}/{entityIdentifier}/addGrant", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Adds a policy grant (an authorization policy) to a specified entity, including domain units, environment blueprint configurations, or environment profiles.
    ///
    /// Parameters:
    ///   - clientToken: A unique, case-sensitive identifier that is provided to ensure the idempotency of the request.
    ///   - detail: The details of the policy grant.
    ///   - domainIdentifier: The ID of the domain where you want to add a policy grant.
    ///   - entityIdentifier: The ID of the entity (resource) to which you want to add a policy grant.
    ///   - entityType: The type of entity (resource) to which the grant is added.
    ///   - policyType: The type of policy that you want to grant.
    ///   - principal: The principal to whom the permissions are granted.
    ///   - logger: Logger use during operation
    @inlinable
    public func addPolicyGrant(
        clientToken: String? = AddPolicyGrantInput.idempotencyToken(),
        detail: PolicyGrantDetail,
        domainIdentifier: String,
        entityIdentifier: String,
        entityType: TargetEntityType,
        policyType: ManagedPolicyType,
        principal: PolicyGrantPrincipal,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> AddPolicyGrantOutput {
        let input = AddPolicyGrantInput(
            clientToken: clientToken, 
            detail: detail, 
            domainIdentifier: domainIdentifier, 
            entityIdentifier: entityIdentifier, 
            entityType: entityType, 
            policyType: policyType, 
            principal: principal
        )
        return try await self.addPolicyGrant(input, logger: logger)
    }

    /// Associates the environment role in Amazon DataZone.
    @Sendable
    @inlinable
    public func associateEnvironmentRole(_ input: AssociateEnvironmentRoleInput, logger: Logger = AWSClient.loggingDisabled) async throws -> AssociateEnvironmentRoleOutput {
        try await self.client.execute(
            operation: "AssociateEnvironmentRole", 
            path: "/v2/domains/{domainIdentifier}/environments/{environmentIdentifier}/roles/{environmentRoleArn}", 
            httpMethod: .PUT, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Associates the environment role in Amazon DataZone.
    ///
    /// Parameters:
    ///   - domainIdentifier: The ID of the Amazon DataZone domain in which the environment role is associated.
    ///   - environmentIdentifier: The ID of the Amazon DataZone environment.
    ///   - environmentRoleArn: The ARN of the environment role.
    ///   - logger: Logger use during operation
    @inlinable
    public func associateEnvironmentRole(
        domainIdentifier: String,
        environmentIdentifier: String,
        environmentRoleArn: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> AssociateEnvironmentRoleOutput {
        let input = AssociateEnvironmentRoleInput(
            domainIdentifier: domainIdentifier, 
            environmentIdentifier: environmentIdentifier, 
            environmentRoleArn: environmentRoleArn
        )
        return try await self.associateEnvironmentRole(input, logger: logger)
    }

    /// Cancels the metadata generation run.
    @Sendable
    @inlinable
    public func cancelMetadataGenerationRun(_ input: CancelMetadataGenerationRunInput, logger: Logger = AWSClient.loggingDisabled) async throws -> CancelMetadataGenerationRunOutput {
        try await self.client.execute(
            operation: "CancelMetadataGenerationRun", 
            path: "/v2/domains/{domainIdentifier}/metadata-generation-runs/{identifier}/cancel", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Cancels the metadata generation run.
    ///
    /// Parameters:
    ///   - domainIdentifier: The ID of the Amazon DataZone domain in which the metadata generation run is to be cancelled.
    ///   - identifier: The ID of the metadata generation run.
    ///   - logger: Logger use during operation
    @inlinable
    public func cancelMetadataGenerationRun(
        domainIdentifier: String,
        identifier: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> CancelMetadataGenerationRunOutput {
        let input = CancelMetadataGenerationRunInput(
            domainIdentifier: domainIdentifier, 
            identifier: identifier
        )
        return try await self.cancelMetadataGenerationRun(input, logger: logger)
    }

    /// Cancels the subscription to the specified asset.
    @Sendable
    @inlinable
    public func cancelSubscription(_ input: CancelSubscriptionInput, logger: Logger = AWSClient.loggingDisabled) async throws -> CancelSubscriptionOutput {
        try await self.client.execute(
            operation: "CancelSubscription", 
            path: "/v2/domains/{domainIdentifier}/subscriptions/{identifier}/cancel", 
            httpMethod: .PUT, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Cancels the subscription to the specified asset.
    ///
    /// Parameters:
    ///   - domainIdentifier: The unique identifier of the Amazon DataZone domain where the subscription request is being cancelled.
    ///   - identifier: The unique identifier of the subscription that is being cancelled.
    ///   - logger: Logger use during operation
    @inlinable
    public func cancelSubscription(
        domainIdentifier: String,
        identifier: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> CancelSubscriptionOutput {
        let input = CancelSubscriptionInput(
            domainIdentifier: domainIdentifier, 
            identifier: identifier
        )
        return try await self.cancelSubscription(input, logger: logger)
    }

    /// Creates an asset in Amazon DataZone catalog.
    @Sendable
    @inlinable
    public func createAsset(_ input: CreateAssetInput, logger: Logger = AWSClient.loggingDisabled) async throws -> CreateAssetOutput {
        try await self.client.execute(
            operation: "CreateAsset", 
            path: "/v2/domains/{domainIdentifier}/assets", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Creates an asset in Amazon DataZone catalog.
    ///
    /// Parameters:
    ///   - clientToken: A unique, case-sensitive identifier that is provided to ensure the idempotency of the request.
    ///   - description: Asset description.
    ///   - domainIdentifier: Amazon DataZone domain where the asset is created.
    ///   - externalIdentifier: The external identifier of the asset.
    ///   - formsInput: Metadata forms attached to the asset.
    ///   - glossaryTerms: Glossary terms attached to the asset.
    ///   - name: Asset name.
    ///   - owningProjectIdentifier: The unique identifier of the project that owns this asset.
    ///   - predictionConfiguration: The configuration of the automatically generated business-friendly metadata for the asset.
    ///   - typeIdentifier: The unique identifier of this asset's type.
    ///   - typeRevision: The revision of this asset's type.
    ///   - logger: Logger use during operation
    @inlinable
    public func createAsset(
        clientToken: String? = CreateAssetInput.idempotencyToken(),
        description: String? = nil,
        domainIdentifier: String,
        externalIdentifier: String? = nil,
        formsInput: [FormInput]? = nil,
        glossaryTerms: [String]? = nil,
        name: String,
        owningProjectIdentifier: String,
        predictionConfiguration: PredictionConfiguration? = nil,
        typeIdentifier: String,
        typeRevision: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> CreateAssetOutput {
        let input = CreateAssetInput(
            clientToken: clientToken, 
            description: description, 
            domainIdentifier: domainIdentifier, 
            externalIdentifier: externalIdentifier, 
            formsInput: formsInput, 
            glossaryTerms: glossaryTerms, 
            name: name, 
            owningProjectIdentifier: owningProjectIdentifier, 
            predictionConfiguration: predictionConfiguration, 
            typeIdentifier: typeIdentifier, 
            typeRevision: typeRevision
        )
        return try await self.createAsset(input, logger: logger)
    }

    /// Creates a data asset filter.
    @Sendable
    @inlinable
    public func createAssetFilter(_ input: CreateAssetFilterInput, logger: Logger = AWSClient.loggingDisabled) async throws -> CreateAssetFilterOutput {
        try await self.client.execute(
            operation: "CreateAssetFilter", 
            path: "/v2/domains/{domainIdentifier}/assets/{assetIdentifier}/filters", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Creates a data asset filter.
    ///
    /// Parameters:
    ///   - assetIdentifier: The ID of the data asset.
    ///   - clientToken: A unique, case-sensitive identifier that is provided to ensure the idempotency of the request.
    ///   - configuration: The configuration of the asset filter.
    ///   - description: The description of the asset filter.
    ///   - domainIdentifier: The ID of the domain in which you want to create an asset filter.
    ///   - name: The name of the asset filter.
    ///   - logger: Logger use during operation
    @inlinable
    public func createAssetFilter(
        assetIdentifier: String,
        clientToken: String? = CreateAssetFilterInput.idempotencyToken(),
        configuration: AssetFilterConfiguration,
        description: String? = nil,
        domainIdentifier: String,
        name: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> CreateAssetFilterOutput {
        let input = CreateAssetFilterInput(
            assetIdentifier: assetIdentifier, 
            clientToken: clientToken, 
            configuration: configuration, 
            description: description, 
            domainIdentifier: domainIdentifier, 
            name: name
        )
        return try await self.createAssetFilter(input, logger: logger)
    }

    /// Creates a revision of the asset.
    @Sendable
    @inlinable
    public func createAssetRevision(_ input: CreateAssetRevisionInput, logger: Logger = AWSClient.loggingDisabled) async throws -> CreateAssetRevisionOutput {
        try await self.client.execute(
            operation: "CreateAssetRevision", 
            path: "/v2/domains/{domainIdentifier}/assets/{identifier}/revisions", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Creates a revision of the asset.
    ///
    /// Parameters:
    ///   - clientToken: A unique, case-sensitive identifier that is provided to ensure the idempotency of the request.
    ///   - description: The revised description of the asset.
    ///   - domainIdentifier: The unique identifier of the domain where the asset is being revised.
    ///   - formsInput: The metadata forms to be attached to the asset as part of asset revision.
    ///   - glossaryTerms: The glossary terms to be attached to the asset as part of asset revision.
    ///   - identifier: The identifier of the asset.
    ///   - name: Te revised name of the asset.
    ///   - predictionConfiguration: The configuration of the automatically generated business-friendly metadata for the asset.
    ///   - typeRevision: The revision type of the asset.
    ///   - logger: Logger use during operation
    @inlinable
    public func createAssetRevision(
        clientToken: String? = CreateAssetRevisionInput.idempotencyToken(),
        description: String? = nil,
        domainIdentifier: String,
        formsInput: [FormInput]? = nil,
        glossaryTerms: [String]? = nil,
        identifier: String,
        name: String,
        predictionConfiguration: PredictionConfiguration? = nil,
        typeRevision: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> CreateAssetRevisionOutput {
        let input = CreateAssetRevisionInput(
            clientToken: clientToken, 
            description: description, 
            domainIdentifier: domainIdentifier, 
            formsInput: formsInput, 
            glossaryTerms: glossaryTerms, 
            identifier: identifier, 
            name: name, 
            predictionConfiguration: predictionConfiguration, 
            typeRevision: typeRevision
        )
        return try await self.createAssetRevision(input, logger: logger)
    }

    /// Creates a custom asset type.
    @Sendable
    @inlinable
    public func createAssetType(_ input: CreateAssetTypeInput, logger: Logger = AWSClient.loggingDisabled) async throws -> CreateAssetTypeOutput {
        try await self.client.execute(
            operation: "CreateAssetType", 
            path: "/v2/domains/{domainIdentifier}/asset-types", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Creates a custom asset type.
    ///
    /// Parameters:
    ///   - description: The descripton of the custom asset type.
    ///   - domainIdentifier: The unique identifier of the Amazon DataZone domain where the custom asset type is being created.
    ///   - formsInput: The metadata forms that are to be attached to the custom asset type.
    ///   - name: The name of the custom asset type.
    ///   - owningProjectIdentifier: The identifier of the Amazon DataZone project that is to own the custom asset type.
    ///   - logger: Logger use during operation
    @inlinable
    public func createAssetType(
        description: String? = nil,
        domainIdentifier: String,
        formsInput: [String: FormEntryInput],
        name: String,
        owningProjectIdentifier: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> CreateAssetTypeOutput {
        let input = CreateAssetTypeInput(
            description: description, 
            domainIdentifier: domainIdentifier, 
            formsInput: formsInput, 
            name: name, 
            owningProjectIdentifier: owningProjectIdentifier
        )
        return try await self.createAssetType(input, logger: logger)
    }

    /// Creates a new connection. In Amazon DataZone, a connection enables you to connect your resources (domains, projects, and environments) to external resources and services.
    @Sendable
    @inlinable
    public func createConnection(_ input: CreateConnectionInput, logger: Logger = AWSClient.loggingDisabled) async throws -> CreateConnectionOutput {
        try await self.client.execute(
            operation: "CreateConnection", 
            path: "/v2/domains/{domainIdentifier}/connections", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Creates a new connection. In Amazon DataZone, a connection enables you to connect your resources (domains, projects, and environments) to external resources and services.
    ///
    /// Parameters:
    ///   - awsLocation: The location where the connection is created.
    ///   - clientToken: A unique, case-sensitive identifier that is provided to ensure the idempotency of the request.
    ///   - description: A connection description.
    ///   - domainIdentifier: The ID of the domain where the connection is created.
    ///   - environmentIdentifier: The ID of the environment where the connection is created.
    ///   - name: The connection name.
    ///   - props: The connection props.
    ///   - logger: Logger use during operation
    @inlinable
    public func createConnection(
        awsLocation: AwsLocation? = nil,
        clientToken: String? = CreateConnectionInput.idempotencyToken(),
        description: String? = nil,
        domainIdentifier: String,
        environmentIdentifier: String,
        name: String,
        props: ConnectionPropertiesInput? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> CreateConnectionOutput {
        let input = CreateConnectionInput(
            awsLocation: awsLocation, 
            clientToken: clientToken, 
            description: description, 
            domainIdentifier: domainIdentifier, 
            environmentIdentifier: environmentIdentifier, 
            name: name, 
            props: props
        )
        return try await self.createConnection(input, logger: logger)
    }

    /// Creates a data product.
    @Sendable
    @inlinable
    public func createDataProduct(_ input: CreateDataProductInput, logger: Logger = AWSClient.loggingDisabled) async throws -> CreateDataProductOutput {
        try await self.client.execute(
            operation: "CreateDataProduct", 
            path: "/v2/domains/{domainIdentifier}/data-products", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Creates a data product.
    ///
    /// Parameters:
    ///   - clientToken: A unique, case-sensitive identifier that is provided to ensure the idempotency of the request.
    ///   - description: The description of the data product.
    ///   - domainIdentifier: The ID of the domain where the data product is created.
    ///   - formsInput: The metadata forms of the data product.
    ///   - glossaryTerms: The glossary terms of the data product.
    ///   - items: The data assets of the data product.
    ///   - name: The name of the data product.
    ///   - owningProjectIdentifier: The ID of the owning project of the data product.
    ///   - logger: Logger use during operation
    @inlinable
    public func createDataProduct(
        clientToken: String? = CreateDataProductInput.idempotencyToken(),
        description: String? = nil,
        domainIdentifier: String,
        formsInput: [FormInput]? = nil,
        glossaryTerms: [String]? = nil,
        items: [DataProductItem]? = nil,
        name: String,
        owningProjectIdentifier: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> CreateDataProductOutput {
        let input = CreateDataProductInput(
            clientToken: clientToken, 
            description: description, 
            domainIdentifier: domainIdentifier, 
            formsInput: formsInput, 
            glossaryTerms: glossaryTerms, 
            items: items, 
            name: name, 
            owningProjectIdentifier: owningProjectIdentifier
        )
        return try await self.createDataProduct(input, logger: logger)
    }

    /// Creates a data product revision.
    @Sendable
    @inlinable
    public func createDataProductRevision(_ input: CreateDataProductRevisionInput, logger: Logger = AWSClient.loggingDisabled) async throws -> CreateDataProductRevisionOutput {
        try await self.client.execute(
            operation: "CreateDataProductRevision", 
            path: "/v2/domains/{domainIdentifier}/data-products/{identifier}/revisions", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Creates a data product revision.
    ///
    /// Parameters:
    ///   - clientToken: A unique, case-sensitive identifier that is provided to ensure the idempotency of the request.
    ///   - description: The description of the data product revision.
    ///   - domainIdentifier: The ID of the domain where the data product revision is created.
    ///   - formsInput: The metadata forms of the data product revision.
    ///   - glossaryTerms: The glossary terms of the data product revision.
    ///   - identifier: The ID of the data product revision.
    ///   - items: The data assets of the data product revision.
    ///   - name: The name of the data product revision.
    ///   - logger: Logger use during operation
    @inlinable
    public func createDataProductRevision(
        clientToken: String? = CreateDataProductRevisionInput.idempotencyToken(),
        description: String? = nil,
        domainIdentifier: String,
        formsInput: [FormInput]? = nil,
        glossaryTerms: [String]? = nil,
        identifier: String,
        items: [DataProductItem]? = nil,
        name: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> CreateDataProductRevisionOutput {
        let input = CreateDataProductRevisionInput(
            clientToken: clientToken, 
            description: description, 
            domainIdentifier: domainIdentifier, 
            formsInput: formsInput, 
            glossaryTerms: glossaryTerms, 
            identifier: identifier, 
            items: items, 
            name: name
        )
        return try await self.createDataProductRevision(input, logger: logger)
    }

    /// Creates an Amazon DataZone data source.
    @Sendable
    @inlinable
    public func createDataSource(_ input: CreateDataSourceInput, logger: Logger = AWSClient.loggingDisabled) async throws -> CreateDataSourceOutput {
        try await self.client.execute(
            operation: "CreateDataSource", 
            path: "/v2/domains/{domainIdentifier}/data-sources", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Creates an Amazon DataZone data source.
    ///
    /// Parameters:
    ///   - assetFormsInput: The metadata forms that are to be attached to the assets that this data source works with.
    ///   - clientToken: A unique, case-sensitive identifier that is provided to ensure the idempotency of the request.
    ///   - configuration: Specifies the configuration of the data source. It can be set to either glueRunConfiguration or redshiftRunConfiguration.
    ///   - connectionIdentifier: The ID of the connection.
    ///   - description: The description of the data source.
    ///   - domainIdentifier: The ID of the Amazon DataZone domain where the data source is created.
    ///   - enableSetting: Specifies whether the data source is enabled.
    ///   - environmentIdentifier: The unique identifier of the Amazon DataZone environment to which the data source publishes assets.
    ///   - name: The name of the data source.
    ///   - projectIdentifier: The identifier of the Amazon DataZone project in which you want to add this data source.
    ///   - publishOnImport: Specifies whether the assets that this data source creates in the inventory are to be also automatically published to the catalog.
    ///   - recommendation: Specifies whether the business name generation is to be enabled for this data source.
    ///   - schedule: The schedule of the data source runs.
    ///   - type: The type of the data source. In Amazon DataZone, you can use data sources to import technical metadata of assets (data) from the source databases or data warehouses into Amazon DataZone. In the current release of Amazon DataZone, you can create and run data sources for Amazon Web Services Glue and Amazon Redshift.
    ///   - logger: Logger use during operation
    @inlinable
    public func createDataSource(
        assetFormsInput: [FormInput]? = nil,
        clientToken: String? = CreateDataSourceInput.idempotencyToken(),
        configuration: DataSourceConfigurationInput? = nil,
        connectionIdentifier: String? = nil,
        description: String? = nil,
        domainIdentifier: String,
        enableSetting: EnableSetting? = nil,
        environmentIdentifier: String? = nil,
        name: String,
        projectIdentifier: String,
        publishOnImport: Bool? = nil,
        recommendation: RecommendationConfiguration? = nil,
        schedule: ScheduleConfiguration? = nil,
        type: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> CreateDataSourceOutput {
        let input = CreateDataSourceInput(
            assetFormsInput: assetFormsInput, 
            clientToken: clientToken, 
            configuration: configuration, 
            connectionIdentifier: connectionIdentifier, 
            description: description, 
            domainIdentifier: domainIdentifier, 
            enableSetting: enableSetting, 
            environmentIdentifier: environmentIdentifier, 
            name: name, 
            projectIdentifier: projectIdentifier, 
            publishOnImport: publishOnImport, 
            recommendation: recommendation, 
            schedule: schedule, 
            type: type
        )
        return try await self.createDataSource(input, logger: logger)
    }

    /// Creates an Amazon DataZone domain.
    @Sendable
    @inlinable
    public func createDomain(_ input: CreateDomainInput, logger: Logger = AWSClient.loggingDisabled) async throws -> CreateDomainOutput {
        try await self.client.execute(
            operation: "CreateDomain", 
            path: "/v2/domains", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Creates an Amazon DataZone domain.
    ///
    /// Parameters:
    ///   - clientToken: A unique, case-sensitive identifier that is provided to ensure the idempotency of the request.
    ///   - description: The description of the Amazon DataZone domain.
    ///   - domainExecutionRole: The domain execution role that is created when an Amazon DataZone domain is created. The domain execution role is created in the Amazon Web Services account that houses the Amazon DataZone domain.
    ///   - domainVersion: The version of the domain that is created.
    ///   - kmsKeyIdentifier: The identifier of the Amazon Web Services Key Management Service (KMS) key that is used to encrypt the Amazon DataZone domain, metadata, and reporting data.
    ///   - name: The name of the Amazon DataZone domain.
    ///   - serviceRole: The service role of the domain that is created.
    ///   - singleSignOn: The single-sign on configuration of the Amazon DataZone domain.
    ///   - tags: The tags specified for the Amazon DataZone domain.
    ///   - logger: Logger use during operation
    @inlinable
    public func createDomain(
        clientToken: String? = CreateDomainInput.idempotencyToken(),
        description: String? = nil,
        domainExecutionRole: String,
        domainVersion: DomainVersion? = nil,
        kmsKeyIdentifier: String? = nil,
        name: String,
        serviceRole: String? = nil,
        singleSignOn: SingleSignOn? = nil,
        tags: [String: String]? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> CreateDomainOutput {
        let input = CreateDomainInput(
            clientToken: clientToken, 
            description: description, 
            domainExecutionRole: domainExecutionRole, 
            domainVersion: domainVersion, 
            kmsKeyIdentifier: kmsKeyIdentifier, 
            name: name, 
            serviceRole: serviceRole, 
            singleSignOn: singleSignOn, 
            tags: tags
        )
        return try await self.createDomain(input, logger: logger)
    }

    /// Creates a domain unit in Amazon DataZone.
    @Sendable
    @inlinable
    public func createDomainUnit(_ input: CreateDomainUnitInput, logger: Logger = AWSClient.loggingDisabled) async throws -> CreateDomainUnitOutput {
        try await self.client.execute(
            operation: "CreateDomainUnit", 
            path: "/v2/domains/{domainIdentifier}/domain-units", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Creates a domain unit in Amazon DataZone.
    ///
    /// Parameters:
    ///   - clientToken: A unique, case-sensitive identifier that is provided to ensure the idempotency of the request.
    ///   - description: The description of the domain unit.
    ///   - domainIdentifier: The ID of the domain where you want to crate a domain unit.
    ///   - name: The name of the domain unit.
    ///   - parentDomainUnitIdentifier: The ID of the parent domain unit.
    ///   - logger: Logger use during operation
    @inlinable
    public func createDomainUnit(
        clientToken: String? = CreateDomainUnitInput.idempotencyToken(),
        description: String? = nil,
        domainIdentifier: String,
        name: String,
        parentDomainUnitIdentifier: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> CreateDomainUnitOutput {
        let input = CreateDomainUnitInput(
            clientToken: clientToken, 
            description: description, 
            domainIdentifier: domainIdentifier, 
            name: name, 
            parentDomainUnitIdentifier: parentDomainUnitIdentifier
        )
        return try await self.createDomainUnit(input, logger: logger)
    }

    /// Create an Amazon DataZone environment.
    @Sendable
    @inlinable
    public func createEnvironment(_ input: CreateEnvironmentInput, logger: Logger = AWSClient.loggingDisabled) async throws -> CreateEnvironmentOutput {
        try await self.client.execute(
            operation: "CreateEnvironment", 
            path: "/v2/domains/{domainIdentifier}/environments", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Create an Amazon DataZone environment.
    ///
    /// Parameters:
    ///   - deploymentOrder: The deployment order of the environment.
    ///   - description: The description of the Amazon DataZone environment.
    ///   - domainIdentifier: The identifier of the Amazon DataZone domain in which the environment is created.
    ///   - environmentAccountIdentifier: The ID of the account in which the environment is being created.
    ///   - environmentAccountRegion: The region of the account in which the environment is being created.
    ///   - environmentBlueprintIdentifier: The ID of the blueprint with which the environment is being created.
    ///   - environmentConfigurationId: The configuration ID of the environment.
    ///   - environmentProfileIdentifier: The identifier of the environment profile that is used to create this Amazon DataZone environment.
    ///   - glossaryTerms: The glossary terms that can be used in this Amazon DataZone environment.
    ///   - name: The name of the Amazon DataZone environment.
    ///   - projectIdentifier: The identifier of the Amazon DataZone project in which this environment is created.
    ///   - userParameters: The user parameters of this Amazon DataZone environment.
    ///   - logger: Logger use during operation
    @inlinable
    public func createEnvironment(
        deploymentOrder: Int? = nil,
        description: String? = nil,
        domainIdentifier: String,
        environmentAccountIdentifier: String? = nil,
        environmentAccountRegion: String? = nil,
        environmentBlueprintIdentifier: String? = nil,
        environmentConfigurationId: String? = nil,
        environmentProfileIdentifier: String,
        glossaryTerms: [String]? = nil,
        name: String,
        projectIdentifier: String,
        userParameters: [EnvironmentParameter]? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> CreateEnvironmentOutput {
        let input = CreateEnvironmentInput(
            deploymentOrder: deploymentOrder, 
            description: description, 
            domainIdentifier: domainIdentifier, 
            environmentAccountIdentifier: environmentAccountIdentifier, 
            environmentAccountRegion: environmentAccountRegion, 
            environmentBlueprintIdentifier: environmentBlueprintIdentifier, 
            environmentConfigurationId: environmentConfigurationId, 
            environmentProfileIdentifier: environmentProfileIdentifier, 
            glossaryTerms: glossaryTerms, 
            name: name, 
            projectIdentifier: projectIdentifier, 
            userParameters: userParameters
        )
        return try await self.createEnvironment(input, logger: logger)
    }

    /// Creates an action for the environment, for example, creates a console link for an analytics tool that is available in this environment.
    @Sendable
    @inlinable
    public func createEnvironmentAction(_ input: CreateEnvironmentActionInput, logger: Logger = AWSClient.loggingDisabled) async throws -> CreateEnvironmentActionOutput {
        try await self.client.execute(
            operation: "CreateEnvironmentAction", 
            path: "/v2/domains/{domainIdentifier}/environments/{environmentIdentifier}/actions", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Creates an action for the environment, for example, creates a console link for an analytics tool that is available in this environment.
    ///
    /// Parameters:
    ///   - description: The description of the environment action that is being created in the environment.
    ///   - domainIdentifier: The ID of the Amazon DataZone domain in which the environment action is created.
    ///   - environmentIdentifier: The ID of the environment in which the environment action is created.
    ///   - name: The name of the environment action.
    ///   - parameters: The parameters of the environment action.
    ///   - logger: Logger use during operation
    @inlinable
    public func createEnvironmentAction(
        description: String? = nil,
        domainIdentifier: String,
        environmentIdentifier: String,
        name: String,
        parameters: ActionParameters,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> CreateEnvironmentActionOutput {
        let input = CreateEnvironmentActionInput(
            description: description, 
            domainIdentifier: domainIdentifier, 
            environmentIdentifier: environmentIdentifier, 
            name: name, 
            parameters: parameters
        )
        return try await self.createEnvironmentAction(input, logger: logger)
    }

    /// Creates an Amazon DataZone environment profile.
    @Sendable
    @inlinable
    public func createEnvironmentProfile(_ input: CreateEnvironmentProfileInput, logger: Logger = AWSClient.loggingDisabled) async throws -> CreateEnvironmentProfileOutput {
        try await self.client.execute(
            operation: "CreateEnvironmentProfile", 
            path: "/v2/domains/{domainIdentifier}/environment-profiles", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Creates an Amazon DataZone environment profile.
    ///
    /// Parameters:
    ///   - awsAccountId: The Amazon Web Services account in which the Amazon DataZone environment is created.
    ///   - awsAccountRegion: The Amazon Web Services region in which this environment profile is created.
    ///   - description: The description of this Amazon DataZone environment profile.
    ///   - domainIdentifier: The ID of the Amazon DataZone domain in which this environment profile is created.
    ///   - environmentBlueprintIdentifier: The ID of the blueprint with which this environment profile is created.
    ///   - name: The name of this Amazon DataZone environment profile.
    ///   - projectIdentifier: The identifier of the project in which to create the environment profile.
    ///   - userParameters: The user parameters of this Amazon DataZone environment profile.
    ///   - logger: Logger use during operation
    @inlinable
    public func createEnvironmentProfile(
        awsAccountId: String? = nil,
        awsAccountRegion: String? = nil,
        description: String? = nil,
        domainIdentifier: String,
        environmentBlueprintIdentifier: String,
        name: String,
        projectIdentifier: String,
        userParameters: [EnvironmentParameter]? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> CreateEnvironmentProfileOutput {
        let input = CreateEnvironmentProfileInput(
            awsAccountId: awsAccountId, 
            awsAccountRegion: awsAccountRegion, 
            description: description, 
            domainIdentifier: domainIdentifier, 
            environmentBlueprintIdentifier: environmentBlueprintIdentifier, 
            name: name, 
            projectIdentifier: projectIdentifier, 
            userParameters: userParameters
        )
        return try await self.createEnvironmentProfile(input, logger: logger)
    }

    /// Creates a metadata form type.
    @Sendable
    @inlinable
    public func createFormType(_ input: CreateFormTypeInput, logger: Logger = AWSClient.loggingDisabled) async throws -> CreateFormTypeOutput {
        try await self.client.execute(
            operation: "CreateFormType", 
            path: "/v2/domains/{domainIdentifier}/form-types", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Creates a metadata form type.
    ///
    /// Parameters:
    ///   - description: The description of this Amazon DataZone metadata form type.
    ///   - domainIdentifier: The ID of the Amazon DataZone domain in which this metadata form type is created.
    ///   - model: The model of this Amazon DataZone metadata form type.
    ///   - name: The name of this Amazon DataZone metadata form type.
    ///   - owningProjectIdentifier: The ID of the Amazon DataZone project that owns this metadata form type.
    ///   - status: The status of this Amazon DataZone metadata form type.
    ///   - logger: Logger use during operation
    @inlinable
    public func createFormType(
        description: String? = nil,
        domainIdentifier: String,
        model: Model,
        name: String,
        owningProjectIdentifier: String,
        status: FormTypeStatus? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> CreateFormTypeOutput {
        let input = CreateFormTypeInput(
            description: description, 
            domainIdentifier: domainIdentifier, 
            model: model, 
            name: name, 
            owningProjectIdentifier: owningProjectIdentifier, 
            status: status
        )
        return try await self.createFormType(input, logger: logger)
    }

    /// Creates an Amazon DataZone business glossary.
    @Sendable
    @inlinable
    public func createGlossary(_ input: CreateGlossaryInput, logger: Logger = AWSClient.loggingDisabled) async throws -> CreateGlossaryOutput {
        try await self.client.execute(
            operation: "CreateGlossary", 
            path: "/v2/domains/{domainIdentifier}/glossaries", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Creates an Amazon DataZone business glossary.
    ///
    /// Parameters:
    ///   - clientToken: A unique, case-sensitive identifier that is provided to ensure the idempotency of the request.
    ///   - description: The description of this business glossary.
    ///   - domainIdentifier: The ID of the Amazon DataZone domain in which this business glossary is created.
    ///   - name: The name of this business glossary.
    ///   - owningProjectIdentifier: The ID of the project that currently owns business glossary.
    ///   - status: The status of this business glossary.
    ///   - logger: Logger use during operation
    @inlinable
    public func createGlossary(
        clientToken: String? = CreateGlossaryInput.idempotencyToken(),
        description: String? = nil,
        domainIdentifier: String,
        name: String,
        owningProjectIdentifier: String,
        status: GlossaryStatus? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> CreateGlossaryOutput {
        let input = CreateGlossaryInput(
            clientToken: clientToken, 
            description: description, 
            domainIdentifier: domainIdentifier, 
            name: name, 
            owningProjectIdentifier: owningProjectIdentifier, 
            status: status
        )
        return try await self.createGlossary(input, logger: logger)
    }

    /// Creates a business glossary term.
    @Sendable
    @inlinable
    public func createGlossaryTerm(_ input: CreateGlossaryTermInput, logger: Logger = AWSClient.loggingDisabled) async throws -> CreateGlossaryTermOutput {
        try await self.client.execute(
            operation: "CreateGlossaryTerm", 
            path: "/v2/domains/{domainIdentifier}/glossary-terms", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Creates a business glossary term.
    ///
    /// Parameters:
    ///   - clientToken: A unique, case-sensitive identifier that is provided to ensure the idempotency of the request.
    ///   - domainIdentifier: The ID of the Amazon DataZone domain in which this business glossary term is created.
    ///   - glossaryIdentifier: The ID of the business glossary in which this term is created.
    ///   - longDescription: The long description of this business glossary term.
    ///   - name: The name of this business glossary term.
    ///   - shortDescription: The short description of this business glossary term.
    ///   - status: The status of this business glossary term.
    ///   - termRelations: The term relations of this business glossary term.
    ///   - logger: Logger use during operation
    @inlinable
    public func createGlossaryTerm(
        clientToken: String? = CreateGlossaryTermInput.idempotencyToken(),
        domainIdentifier: String,
        glossaryIdentifier: String,
        longDescription: String? = nil,
        name: String,
        shortDescription: String? = nil,
        status: GlossaryTermStatus? = nil,
        termRelations: TermRelations? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> CreateGlossaryTermOutput {
        let input = CreateGlossaryTermInput(
            clientToken: clientToken, 
            domainIdentifier: domainIdentifier, 
            glossaryIdentifier: glossaryIdentifier, 
            longDescription: longDescription, 
            name: name, 
            shortDescription: shortDescription, 
            status: status, 
            termRelations: termRelations
        )
        return try await self.createGlossaryTerm(input, logger: logger)
    }

    /// Creates a group profile in Amazon DataZone.
    @Sendable
    @inlinable
    public func createGroupProfile(_ input: CreateGroupProfileInput, logger: Logger = AWSClient.loggingDisabled) async throws -> CreateGroupProfileOutput {
        try await self.client.execute(
            operation: "CreateGroupProfile", 
            path: "/v2/domains/{domainIdentifier}/group-profiles", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Creates a group profile in Amazon DataZone.
    ///
    /// Parameters:
    ///   - clientToken:  A unique, case-sensitive identifier that is provided to ensure the idempotency of the request.
    ///   - domainIdentifier: The identifier of the Amazon DataZone domain in which the group profile is created.
    ///   - groupIdentifier: The identifier of the group for which the group profile is created.
    ///   - logger: Logger use during operation
    @inlinable
    public func createGroupProfile(
        clientToken: String? = CreateGroupProfileInput.idempotencyToken(),
        domainIdentifier: String,
        groupIdentifier: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> CreateGroupProfileOutput {
        let input = CreateGroupProfileInput(
            clientToken: clientToken, 
            domainIdentifier: domainIdentifier, 
            groupIdentifier: groupIdentifier
        )
        return try await self.createGroupProfile(input, logger: logger)
    }

    /// Publishes a listing (a record of an asset at a given time) or removes a listing from the catalog.
    @Sendable
    @inlinable
    public func createListingChangeSet(_ input: CreateListingChangeSetInput, logger: Logger = AWSClient.loggingDisabled) async throws -> CreateListingChangeSetOutput {
        try await self.client.execute(
            operation: "CreateListingChangeSet", 
            path: "/v2/domains/{domainIdentifier}/listings/change-set", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Publishes a listing (a record of an asset at a given time) or removes a listing from the catalog.
    ///
    /// Parameters:
    ///   - action: Specifies whether to publish or unpublish a listing.
    ///   - clientToken: A unique, case-sensitive identifier that is provided to ensure the idempotency of the request.
    ///   - domainIdentifier: The ID of the Amazon DataZone domain.
    ///   - entityIdentifier: The ID of the asset.
    ///   - entityRevision: The revision of an asset.
    ///   - entityType: The type of an entity.
    ///   - logger: Logger use during operation
    @inlinable
    public func createListingChangeSet(
        action: ChangeAction,
        clientToken: String? = CreateListingChangeSetInput.idempotencyToken(),
        domainIdentifier: String,
        entityIdentifier: String,
        entityRevision: String? = nil,
        entityType: EntityType,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> CreateListingChangeSetOutput {
        let input = CreateListingChangeSetInput(
            action: action, 
            clientToken: clientToken, 
            domainIdentifier: domainIdentifier, 
            entityIdentifier: entityIdentifier, 
            entityRevision: entityRevision, 
            entityType: entityType
        )
        return try await self.createListingChangeSet(input, logger: logger)
    }

    /// Creates an Amazon DataZone project.
    @Sendable
    @inlinable
    public func createProject(_ input: CreateProjectInput, logger: Logger = AWSClient.loggingDisabled) async throws -> CreateProjectOutput {
        try await self.client.execute(
            operation: "CreateProject", 
            path: "/v2/domains/{domainIdentifier}/projects", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Creates an Amazon DataZone project.
    ///
    /// Parameters:
    ///   - description: The description of the Amazon DataZone project.
    ///   - domainIdentifier: The ID of the Amazon DataZone domain in which this project is created.
    ///   - domainUnitId: The ID of the domain unit. This parameter is not required and if it is not specified, then the project is created at the root domain unit level.
    ///   - glossaryTerms: The glossary terms that can be used in this Amazon DataZone project.
    ///   - name: The name of the Amazon DataZone project.
    ///   - projectProfileId: The ID of the project profile.
    ///   - userParameters: The user parameters of the project.
    ///   - logger: Logger use during operation
    @inlinable
    public func createProject(
        description: String? = nil,
        domainIdentifier: String,
        domainUnitId: String? = nil,
        glossaryTerms: [String]? = nil,
        name: String,
        projectProfileId: String? = nil,
        userParameters: [EnvironmentConfigurationUserParameter]? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> CreateProjectOutput {
        let input = CreateProjectInput(
            description: description, 
            domainIdentifier: domainIdentifier, 
            domainUnitId: domainUnitId, 
            glossaryTerms: glossaryTerms, 
            name: name, 
            projectProfileId: projectProfileId, 
            userParameters: userParameters
        )
        return try await self.createProject(input, logger: logger)
    }

    /// Creates a project membership in Amazon DataZone.
    @Sendable
    @inlinable
    public func createProjectMembership(_ input: CreateProjectMembershipInput, logger: Logger = AWSClient.loggingDisabled) async throws -> CreateProjectMembershipOutput {
        try await self.client.execute(
            operation: "CreateProjectMembership", 
            path: "/v2/domains/{domainIdentifier}/projects/{projectIdentifier}/createMembership", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Creates a project membership in Amazon DataZone.
    ///
    /// Parameters:
    ///   - designation: The designation of the project membership.
    ///   - domainIdentifier: The ID of the Amazon DataZone domain in which project membership is created.
    ///   - member: The project member whose project membership was created.
    ///   - projectIdentifier: The ID of the project for which this project membership was created.
    ///   - logger: Logger use during operation
    @inlinable
    public func createProjectMembership(
        designation: UserDesignation,
        domainIdentifier: String,
        member: Member,
        projectIdentifier: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> CreateProjectMembershipOutput {
        let input = CreateProjectMembershipInput(
            designation: designation, 
            domainIdentifier: domainIdentifier, 
            member: member, 
            projectIdentifier: projectIdentifier
        )
        return try await self.createProjectMembership(input, logger: logger)
    }

    /// Creates a project profile.
    @Sendable
    @inlinable
    public func createProjectProfile(_ input: CreateProjectProfileInput, logger: Logger = AWSClient.loggingDisabled) async throws -> CreateProjectProfileOutput {
        try await self.client.execute(
            operation: "CreateProjectProfile", 
            path: "/v2/domains/{domainIdentifier}/project-profiles", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Creates a project profile.
    ///
    /// Parameters:
    ///   - description: A description of a project profile.
    ///   - domainIdentifier: A domain ID of the project profile.
    ///   - domainUnitIdentifier: A domain unit ID of the project profile.
    ///   - environmentConfigurations: Environment configurations of the project profile.
    ///   - name: Project profile name.
    ///   - status: Project profile status.
    ///   - logger: Logger use during operation
    @inlinable
    public func createProjectProfile(
        description: String? = nil,
        domainIdentifier: String,
        domainUnitIdentifier: String? = nil,
        environmentConfigurations: [EnvironmentConfiguration]? = nil,
        name: String,
        status: Status? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> CreateProjectProfileOutput {
        let input = CreateProjectProfileInput(
            description: description, 
            domainIdentifier: domainIdentifier, 
            domainUnitIdentifier: domainUnitIdentifier, 
            environmentConfigurations: environmentConfigurations, 
            name: name, 
            status: status
        )
        return try await self.createProjectProfile(input, logger: logger)
    }

    /// Creates a rule in Amazon DataZone. A rule is a formal agreement that enforces specific requirements across user workflows (e.g., publishing assets to the catalog, requesting subscriptions, creating projects) within the Amazon DataZone data portal. These rules help maintain consistency, ensure compliance, and uphold governance standards in data management processes. For instance, a metadata enforcement rule can specify the required information for creating a subscription request or publishing a data asset to the catalog, ensuring alignment with organizational standards.
    @Sendable
    @inlinable
    public func createRule(_ input: CreateRuleInput, logger: Logger = AWSClient.loggingDisabled) async throws -> CreateRuleOutput {
        try await self.client.execute(
            operation: "CreateRule", 
            path: "/v2/domains/{domainIdentifier}/rules", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Creates a rule in Amazon DataZone. A rule is a formal agreement that enforces specific requirements across user workflows (e.g., publishing assets to the catalog, requesting subscriptions, creating projects) within the Amazon DataZone data portal. These rules help maintain consistency, ensure compliance, and uphold governance standards in data management processes. For instance, a metadata enforcement rule can specify the required information for creating a subscription request or publishing a data asset to the catalog, ensuring alignment with organizational standards.
    ///
    /// Parameters:
    ///   - action: The action of the rule.
    ///   - clientToken: A unique, case-sensitive identifier that is provided to ensure the idempotency of the request.
    ///   - description: The description of the rule.
    ///   - detail: The detail of the rule.
    ///   - domainIdentifier: The ID of the domain where the rule is created.
    ///   - name: The name of the rule.
    ///   - scope: The scope of the rule.
    ///   - target: The target of the rule.
    ///   - logger: Logger use during operation
    @inlinable
    public func createRule(
        action: RuleAction,
        clientToken: String? = CreateRuleInput.idempotencyToken(),
        description: String? = nil,
        detail: RuleDetail,
        domainIdentifier: String,
        name: String,
        scope: RuleScope,
        target: RuleTarget,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> CreateRuleOutput {
        let input = CreateRuleInput(
            action: action, 
            clientToken: clientToken, 
            description: description, 
            detail: detail, 
            domainIdentifier: domainIdentifier, 
            name: name, 
            scope: scope, 
            target: target
        )
        return try await self.createRule(input, logger: logger)
    }

    /// Creates a subsscription grant in Amazon DataZone.
    @Sendable
    @inlinable
    public func createSubscriptionGrant(_ input: CreateSubscriptionGrantInput, logger: Logger = AWSClient.loggingDisabled) async throws -> CreateSubscriptionGrantOutput {
        try await self.client.execute(
            operation: "CreateSubscriptionGrant", 
            path: "/v2/domains/{domainIdentifier}/subscription-grants", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Creates a subsscription grant in Amazon DataZone.
    ///
    /// Parameters:
    ///   - assetTargetNames: The names of the assets for which the subscription grant is created.
    ///   - clientToken: A unique, case-sensitive identifier that is provided to ensure the idempotency of the request.
    ///   - domainIdentifier: The ID of the Amazon DataZone domain in which the subscription grant is created.
    ///   - environmentIdentifier: The ID of the environment in which the subscription grant is created.
    ///   - grantedEntity: The entity to which the subscription is to be granted.
    ///   - subscriptionTargetIdentifier: The ID of the subscription target for which the subscription grant is created.
    ///   - logger: Logger use during operation
    @inlinable
    public func createSubscriptionGrant(
        assetTargetNames: [AssetTargetNameMap]? = nil,
        clientToken: String? = CreateSubscriptionGrantInput.idempotencyToken(),
        domainIdentifier: String,
        environmentIdentifier: String,
        grantedEntity: GrantedEntityInput,
        subscriptionTargetIdentifier: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> CreateSubscriptionGrantOutput {
        let input = CreateSubscriptionGrantInput(
            assetTargetNames: assetTargetNames, 
            clientToken: clientToken, 
            domainIdentifier: domainIdentifier, 
            environmentIdentifier: environmentIdentifier, 
            grantedEntity: grantedEntity, 
            subscriptionTargetIdentifier: subscriptionTargetIdentifier
        )
        return try await self.createSubscriptionGrant(input, logger: logger)
    }

    /// Creates a subscription request in Amazon DataZone.
    @Sendable
    @inlinable
    public func createSubscriptionRequest(_ input: CreateSubscriptionRequestInput, logger: Logger = AWSClient.loggingDisabled) async throws -> CreateSubscriptionRequestOutput {
        try await self.client.execute(
            operation: "CreateSubscriptionRequest", 
            path: "/v2/domains/{domainIdentifier}/subscription-requests", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Creates a subscription request in Amazon DataZone.
    ///
    /// Parameters:
    ///   - clientToken: A unique, case-sensitive identifier that is provided to ensure the idempotency of the request.
    ///   - domainIdentifier: The ID of the Amazon DataZone domain in which the subscription request is created.
    ///   - metadataForms: The metadata form included in the subscription request.
    ///   - requestReason: The reason for the subscription request.
    ///   - subscribedListings: The published asset for which the subscription grant is to be created.
    ///   - subscribedPrincipals: The Amazon DataZone principals for whom the subscription request is created.
    ///   - logger: Logger use during operation
    @inlinable
    public func createSubscriptionRequest(
        clientToken: String? = CreateSubscriptionRequestInput.idempotencyToken(),
        domainIdentifier: String,
        metadataForms: [FormInput]? = nil,
        requestReason: String,
        subscribedListings: [SubscribedListingInput],
        subscribedPrincipals: [SubscribedPrincipalInput],
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> CreateSubscriptionRequestOutput {
        let input = CreateSubscriptionRequestInput(
            clientToken: clientToken, 
            domainIdentifier: domainIdentifier, 
            metadataForms: metadataForms, 
            requestReason: requestReason, 
            subscribedListings: subscribedListings, 
            subscribedPrincipals: subscribedPrincipals
        )
        return try await self.createSubscriptionRequest(input, logger: logger)
    }

    /// Creates a subscription target in Amazon DataZone.
    @Sendable
    @inlinable
    public func createSubscriptionTarget(_ input: CreateSubscriptionTargetInput, logger: Logger = AWSClient.loggingDisabled) async throws -> CreateSubscriptionTargetOutput {
        try await self.client.execute(
            operation: "CreateSubscriptionTarget", 
            path: "/v2/domains/{domainIdentifier}/environments/{environmentIdentifier}/subscription-targets", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Creates a subscription target in Amazon DataZone.
    ///
    /// Parameters:
    ///   - applicableAssetTypes: The asset types that can be included in the subscription target.
    ///   - authorizedPrincipals: The authorized principals of the subscription target.
    ///   - clientToken: A unique, case-sensitive identifier that is provided to ensure the idempotency of the request.
    ///   - domainIdentifier: The ID of the Amazon DataZone domain in which subscription target is created.
    ///   - environmentIdentifier: The ID of the environment in which subscription target is created.
    ///   - manageAccessRole: The manage access role that is used to create the subscription target.
    ///   - name: The name of the subscription target.
    ///   - provider: The provider of the subscription target.
    ///   - subscriptionTargetConfig: The configuration of the subscription target.
    ///   - type: The type of the subscription target.
    ///   - logger: Logger use during operation
    @inlinable
    public func createSubscriptionTarget(
        applicableAssetTypes: [String],
        authorizedPrincipals: [String],
        clientToken: String? = CreateSubscriptionTargetInput.idempotencyToken(),
        domainIdentifier: String,
        environmentIdentifier: String,
        manageAccessRole: String,
        name: String,
        provider: String? = nil,
        subscriptionTargetConfig: [SubscriptionTargetForm],
        type: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> CreateSubscriptionTargetOutput {
        let input = CreateSubscriptionTargetInput(
            applicableAssetTypes: applicableAssetTypes, 
            authorizedPrincipals: authorizedPrincipals, 
            clientToken: clientToken, 
            domainIdentifier: domainIdentifier, 
            environmentIdentifier: environmentIdentifier, 
            manageAccessRole: manageAccessRole, 
            name: name, 
            provider: provider, 
            subscriptionTargetConfig: subscriptionTargetConfig, 
            type: type
        )
        return try await self.createSubscriptionTarget(input, logger: logger)
    }

    /// Creates a user profile in Amazon DataZone.
    @Sendable
    @inlinable
    public func createUserProfile(_ input: CreateUserProfileInput, logger: Logger = AWSClient.loggingDisabled) async throws -> CreateUserProfileOutput {
        try await self.client.execute(
            operation: "CreateUserProfile", 
            path: "/v2/domains/{domainIdentifier}/user-profiles", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Creates a user profile in Amazon DataZone.
    ///
    /// Parameters:
    ///   - clientToken: A unique, case-sensitive identifier that is provided to ensure the idempotency of the request.
    ///   - domainIdentifier: The identifier of the Amazon DataZone domain in which a user profile is created.
    ///   - userIdentifier: The identifier of the user for which the user profile is created.
    ///   - userType: The user type of the user for which the user profile is created.
    ///   - logger: Logger use during operation
    @inlinable
    public func createUserProfile(
        clientToken: String? = CreateUserProfileInput.idempotencyToken(),
        domainIdentifier: String,
        userIdentifier: String,
        userType: UserType? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> CreateUserProfileOutput {
        let input = CreateUserProfileInput(
            clientToken: clientToken, 
            domainIdentifier: domainIdentifier, 
            userIdentifier: userIdentifier, 
            userType: userType
        )
        return try await self.createUserProfile(input, logger: logger)
    }

    /// Deletes an asset in Amazon DataZone.
    @Sendable
    @inlinable
    public func deleteAsset(_ input: DeleteAssetInput, logger: Logger = AWSClient.loggingDisabled) async throws -> DeleteAssetOutput {
        try await self.client.execute(
            operation: "DeleteAsset", 
            path: "/v2/domains/{domainIdentifier}/assets/{identifier}", 
            httpMethod: .DELETE, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Deletes an asset in Amazon DataZone.
    ///
    /// Parameters:
    ///   - domainIdentifier: The ID of the Amazon DataZone domain in which the asset is deleted.
    ///   - identifier: The identifier of the asset that is deleted.
    ///   - logger: Logger use during operation
    @inlinable
    public func deleteAsset(
        domainIdentifier: String,
        identifier: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> DeleteAssetOutput {
        let input = DeleteAssetInput(
            domainIdentifier: domainIdentifier, 
            identifier: identifier
        )
        return try await self.deleteAsset(input, logger: logger)
    }

    /// Deletes an asset filter.
    @Sendable
    @inlinable
    public func deleteAssetFilter(_ input: DeleteAssetFilterInput, logger: Logger = AWSClient.loggingDisabled) async throws {
        try await self.client.execute(
            operation: "DeleteAssetFilter", 
            path: "/v2/domains/{domainIdentifier}/assets/{assetIdentifier}/filters/{identifier}", 
            httpMethod: .DELETE, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Deletes an asset filter.
    ///
    /// Parameters:
    ///   - assetIdentifier: The ID of the data asset.
    ///   - domainIdentifier: The ID of the domain where you want to delete an asset filter.
    ///   - identifier: The ID of the asset filter that you want to delete.
    ///   - logger: Logger use during operation
    @inlinable
    public func deleteAssetFilter(
        assetIdentifier: String,
        domainIdentifier: String,
        identifier: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws {
        let input = DeleteAssetFilterInput(
            assetIdentifier: assetIdentifier, 
            domainIdentifier: domainIdentifier, 
            identifier: identifier
        )
        return try await self.deleteAssetFilter(input, logger: logger)
    }

    /// Deletes an asset type in Amazon DataZone.
    @Sendable
    @inlinable
    public func deleteAssetType(_ input: DeleteAssetTypeInput, logger: Logger = AWSClient.loggingDisabled) async throws -> DeleteAssetTypeOutput {
        try await self.client.execute(
            operation: "DeleteAssetType", 
            path: "/v2/domains/{domainIdentifier}/asset-types/{identifier}", 
            httpMethod: .DELETE, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Deletes an asset type in Amazon DataZone.
    ///
    /// Parameters:
    ///   - domainIdentifier: The ID of the Amazon DataZone domain in which the asset type is deleted.
    ///   - identifier: The identifier of the asset type that is deleted.
    ///   - logger: Logger use during operation
    @inlinable
    public func deleteAssetType(
        domainIdentifier: String,
        identifier: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> DeleteAssetTypeOutput {
        let input = DeleteAssetTypeInput(
            domainIdentifier: domainIdentifier, 
            identifier: identifier
        )
        return try await self.deleteAssetType(input, logger: logger)
    }

    /// Deletes and connection. In Amazon DataZone, a connection enables you to connect your resources (domains, projects, and environments) to external resources and services.
    @Sendable
    @inlinable
    public func deleteConnection(_ input: DeleteConnectionInput, logger: Logger = AWSClient.loggingDisabled) async throws -> DeleteConnectionOutput {
        try await self.client.execute(
            operation: "DeleteConnection", 
            path: "/v2/domains/{domainIdentifier}/connections/{identifier}", 
            httpMethod: .DELETE, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Deletes and connection. In Amazon DataZone, a connection enables you to connect your resources (domains, projects, and environments) to external resources and services.
    ///
    /// Parameters:
    ///   - domainIdentifier: The ID of the domain where the connection is deleted.
    ///   - identifier: The ID of the connection that is deleted.
    ///   - logger: Logger use during operation
    @inlinable
    public func deleteConnection(
        domainIdentifier: String,
        identifier: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> DeleteConnectionOutput {
        let input = DeleteConnectionInput(
            domainIdentifier: domainIdentifier, 
            identifier: identifier
        )
        return try await self.deleteConnection(input, logger: logger)
    }

    /// Deletes a data product in Amazon DataZone.
    @Sendable
    @inlinable
    public func deleteDataProduct(_ input: DeleteDataProductInput, logger: Logger = AWSClient.loggingDisabled) async throws -> DeleteDataProductOutput {
        try await self.client.execute(
            operation: "DeleteDataProduct", 
            path: "/v2/domains/{domainIdentifier}/data-products/{identifier}", 
            httpMethod: .DELETE, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Deletes a data product in Amazon DataZone.
    ///
    /// Parameters:
    ///   - domainIdentifier: The ID of the Amazon DataZone domain in which the data product is deleted.
    ///   - identifier: The identifier of the data product that is deleted.
    ///   - logger: Logger use during operation
    @inlinable
    public func deleteDataProduct(
        domainIdentifier: String,
        identifier: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> DeleteDataProductOutput {
        let input = DeleteDataProductInput(
            domainIdentifier: domainIdentifier, 
            identifier: identifier
        )
        return try await self.deleteDataProduct(input, logger: logger)
    }

    /// Deletes a data source in Amazon DataZone.
    @Sendable
    @inlinable
    public func deleteDataSource(_ input: DeleteDataSourceInput, logger: Logger = AWSClient.loggingDisabled) async throws -> DeleteDataSourceOutput {
        try await self.client.execute(
            operation: "DeleteDataSource", 
            path: "/v2/domains/{domainIdentifier}/data-sources/{identifier}", 
            httpMethod: .DELETE, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Deletes a data source in Amazon DataZone.
    ///
    /// Parameters:
    ///   - domainIdentifier: The ID of the Amazon DataZone domain in which the data source is deleted.
    ///   - identifier: The identifier of the data source that is deleted.
    ///   - retainPermissionsOnRevokeFailure: Specifies that the granted permissions are retained in case of a self-subscribe functionality failure for a data source.
    ///   - logger: Logger use during operation
    @inlinable
    public func deleteDataSource(
        domainIdentifier: String,
        identifier: String,
        retainPermissionsOnRevokeFailure: Bool? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> DeleteDataSourceOutput {
        let input = DeleteDataSourceInput(
            domainIdentifier: domainIdentifier, 
            identifier: identifier, 
            retainPermissionsOnRevokeFailure: retainPermissionsOnRevokeFailure
        )
        return try await self.deleteDataSource(input, logger: logger)
    }

    /// Deletes a Amazon DataZone domain.
    @Sendable
    @inlinable
    public func deleteDomain(_ input: DeleteDomainInput, logger: Logger = AWSClient.loggingDisabled) async throws -> DeleteDomainOutput {
        try await self.client.execute(
            operation: "DeleteDomain", 
            path: "/v2/domains/{identifier}", 
            httpMethod: .DELETE, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Deletes a Amazon DataZone domain.
    ///
    /// Parameters:
    ///   - clientToken: A unique, case-sensitive identifier that is provided to ensure the idempotency of the request.
    ///   - identifier: The identifier of the Amazon Web Services domain that is to be deleted.
    ///   - skipDeletionCheck: Specifies the optional flag to delete all child entities within the domain.
    ///   - logger: Logger use during operation
    @inlinable
    public func deleteDomain(
        clientToken: String? = DeleteDomainInput.idempotencyToken(),
        identifier: String,
        skipDeletionCheck: Bool? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> DeleteDomainOutput {
        let input = DeleteDomainInput(
            clientToken: clientToken, 
            identifier: identifier, 
            skipDeletionCheck: skipDeletionCheck
        )
        return try await self.deleteDomain(input, logger: logger)
    }

    /// Deletes a domain unit.
    @Sendable
    @inlinable
    public func deleteDomainUnit(_ input: DeleteDomainUnitInput, logger: Logger = AWSClient.loggingDisabled) async throws -> DeleteDomainUnitOutput {
        try await self.client.execute(
            operation: "DeleteDomainUnit", 
            path: "/v2/domains/{domainIdentifier}/domain-units/{identifier}", 
            httpMethod: .DELETE, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Deletes a domain unit.
    ///
    /// Parameters:
    ///   - domainIdentifier: The ID of the domain where you want to delete a domain unit.
    ///   - identifier: The ID of the domain unit that you want to delete.
    ///   - logger: Logger use during operation
    @inlinable
    public func deleteDomainUnit(
        domainIdentifier: String,
        identifier: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> DeleteDomainUnitOutput {
        let input = DeleteDomainUnitInput(
            domainIdentifier: domainIdentifier, 
            identifier: identifier
        )
        return try await self.deleteDomainUnit(input, logger: logger)
    }

    /// Deletes an environment in Amazon DataZone.
    @Sendable
    @inlinable
    public func deleteEnvironment(_ input: DeleteEnvironmentInput, logger: Logger = AWSClient.loggingDisabled) async throws {
        try await self.client.execute(
            operation: "DeleteEnvironment", 
            path: "/v2/domains/{domainIdentifier}/environments/{identifier}", 
            httpMethod: .DELETE, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Deletes an environment in Amazon DataZone.
    ///
    /// Parameters:
    ///   - domainIdentifier: The ID of the Amazon DataZone domain in which the environment is deleted.
    ///   - identifier: The identifier of the environment that is to be deleted.
    ///   - logger: Logger use during operation
    @inlinable
    public func deleteEnvironment(
        domainIdentifier: String,
        identifier: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws {
        let input = DeleteEnvironmentInput(
            domainIdentifier: domainIdentifier, 
            identifier: identifier
        )
        return try await self.deleteEnvironment(input, logger: logger)
    }

    /// Deletes an action for the environment, for example, deletes a console link for an analytics tool that is available in this environment.
    @Sendable
    @inlinable
    public func deleteEnvironmentAction(_ input: DeleteEnvironmentActionInput, logger: Logger = AWSClient.loggingDisabled) async throws {
        try await self.client.execute(
            operation: "DeleteEnvironmentAction", 
            path: "/v2/domains/{domainIdentifier}/environments/{environmentIdentifier}/actions/{identifier}", 
            httpMethod: .DELETE, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Deletes an action for the environment, for example, deletes a console link for an analytics tool that is available in this environment.
    ///
    /// Parameters:
    ///   - domainIdentifier: The ID of the Amazon DataZone domain in which an environment action is deleted.
    ///   - environmentIdentifier: The ID of the environment where an environment action is deleted.
    ///   - identifier: The ID of the environment action that is deleted.
    ///   - logger: Logger use during operation
    @inlinable
    public func deleteEnvironmentAction(
        domainIdentifier: String,
        environmentIdentifier: String,
        identifier: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws {
        let input = DeleteEnvironmentActionInput(
            domainIdentifier: domainIdentifier, 
            environmentIdentifier: environmentIdentifier, 
            identifier: identifier
        )
        return try await self.deleteEnvironmentAction(input, logger: logger)
    }

    /// Deletes the blueprint configuration in Amazon DataZone.
    @Sendable
    @inlinable
    public func deleteEnvironmentBlueprintConfiguration(_ input: DeleteEnvironmentBlueprintConfigurationInput, logger: Logger = AWSClient.loggingDisabled) async throws -> DeleteEnvironmentBlueprintConfigurationOutput {
        try await self.client.execute(
            operation: "DeleteEnvironmentBlueprintConfiguration", 
            path: "/v2/domains/{domainIdentifier}/environment-blueprint-configurations/{environmentBlueprintIdentifier}", 
            httpMethod: .DELETE, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Deletes the blueprint configuration in Amazon DataZone.
    ///
    /// Parameters:
    ///   - domainIdentifier: The ID of the Amazon DataZone domain in which the blueprint configuration is deleted.
    ///   - environmentBlueprintIdentifier: The ID of the blueprint the configuration of which is deleted.
    ///   - logger: Logger use during operation
    @inlinable
    public func deleteEnvironmentBlueprintConfiguration(
        domainIdentifier: String,
        environmentBlueprintIdentifier: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> DeleteEnvironmentBlueprintConfigurationOutput {
        let input = DeleteEnvironmentBlueprintConfigurationInput(
            domainIdentifier: domainIdentifier, 
            environmentBlueprintIdentifier: environmentBlueprintIdentifier
        )
        return try await self.deleteEnvironmentBlueprintConfiguration(input, logger: logger)
    }

    /// Deletes an environment profile in Amazon DataZone.
    @Sendable
    @inlinable
    public func deleteEnvironmentProfile(_ input: DeleteEnvironmentProfileInput, logger: Logger = AWSClient.loggingDisabled) async throws {
        try await self.client.execute(
            operation: "DeleteEnvironmentProfile", 
            path: "/v2/domains/{domainIdentifier}/environment-profiles/{identifier}", 
            httpMethod: .DELETE, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Deletes an environment profile in Amazon DataZone.
    ///
    /// Parameters:
    ///   - domainIdentifier: The ID of the Amazon DataZone domain in which the environment profile is deleted.
    ///   - identifier: The ID of the environment profile that is deleted.
    ///   - logger: Logger use during operation
    @inlinable
    public func deleteEnvironmentProfile(
        domainIdentifier: String,
        identifier: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws {
        let input = DeleteEnvironmentProfileInput(
            domainIdentifier: domainIdentifier, 
            identifier: identifier
        )
        return try await self.deleteEnvironmentProfile(input, logger: logger)
    }

    /// Delets and metadata form type in Amazon DataZone.
    @Sendable
    @inlinable
    public func deleteFormType(_ input: DeleteFormTypeInput, logger: Logger = AWSClient.loggingDisabled) async throws -> DeleteFormTypeOutput {
        try await self.client.execute(
            operation: "DeleteFormType", 
            path: "/v2/domains/{domainIdentifier}/form-types/{formTypeIdentifier}", 
            httpMethod: .DELETE, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Delets and metadata form type in Amazon DataZone.
    ///
    /// Parameters:
    ///   - domainIdentifier: The ID of the Amazon DataZone domain in which the metadata form type is deleted.
    ///   - formTypeIdentifier: The ID of the metadata form type that is deleted.
    ///   - logger: Logger use during operation
    @inlinable
    public func deleteFormType(
        domainIdentifier: String,
        formTypeIdentifier: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> DeleteFormTypeOutput {
        let input = DeleteFormTypeInput(
            domainIdentifier: domainIdentifier, 
            formTypeIdentifier: formTypeIdentifier
        )
        return try await self.deleteFormType(input, logger: logger)
    }

    /// Deletes a business glossary in Amazon DataZone.
    @Sendable
    @inlinable
    public func deleteGlossary(_ input: DeleteGlossaryInput, logger: Logger = AWSClient.loggingDisabled) async throws -> DeleteGlossaryOutput {
        try await self.client.execute(
            operation: "DeleteGlossary", 
            path: "/v2/domains/{domainIdentifier}/glossaries/{identifier}", 
            httpMethod: .DELETE, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Deletes a business glossary in Amazon DataZone.
    ///
    /// Parameters:
    ///   - domainIdentifier: The ID of the Amazon DataZone domain in which the business glossary is deleted.
    ///   - identifier: The ID of the business glossary that is deleted.
    ///   - logger: Logger use during operation
    @inlinable
    public func deleteGlossary(
        domainIdentifier: String,
        identifier: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> DeleteGlossaryOutput {
        let input = DeleteGlossaryInput(
            domainIdentifier: domainIdentifier, 
            identifier: identifier
        )
        return try await self.deleteGlossary(input, logger: logger)
    }

    /// Deletes a business glossary term in Amazon DataZone.
    @Sendable
    @inlinable
    public func deleteGlossaryTerm(_ input: DeleteGlossaryTermInput, logger: Logger = AWSClient.loggingDisabled) async throws -> DeleteGlossaryTermOutput {
        try await self.client.execute(
            operation: "DeleteGlossaryTerm", 
            path: "/v2/domains/{domainIdentifier}/glossary-terms/{identifier}", 
            httpMethod: .DELETE, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Deletes a business glossary term in Amazon DataZone.
    ///
    /// Parameters:
    ///   - domainIdentifier: The ID of the Amazon DataZone domain in which the business glossary term is deleted.
    ///   - identifier: The ID of the business glossary term that is deleted.
    ///   - logger: Logger use during operation
    @inlinable
    public func deleteGlossaryTerm(
        domainIdentifier: String,
        identifier: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> DeleteGlossaryTermOutput {
        let input = DeleteGlossaryTermInput(
            domainIdentifier: domainIdentifier, 
            identifier: identifier
        )
        return try await self.deleteGlossaryTerm(input, logger: logger)
    }

    /// Deletes a listing (a record of an asset at a given time).
    @Sendable
    @inlinable
    public func deleteListing(_ input: DeleteListingInput, logger: Logger = AWSClient.loggingDisabled) async throws -> DeleteListingOutput {
        try await self.client.execute(
            operation: "DeleteListing", 
            path: "/v2/domains/{domainIdentifier}/listings/{identifier}", 
            httpMethod: .DELETE, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Deletes a listing (a record of an asset at a given time).
    ///
    /// Parameters:
    ///   - domainIdentifier: The ID of the Amazon DataZone domain.
    ///   - identifier: The ID of the listing to be deleted.
    ///   - logger: Logger use during operation
    @inlinable
    public func deleteListing(
        domainIdentifier: String,
        identifier: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> DeleteListingOutput {
        let input = DeleteListingInput(
            domainIdentifier: domainIdentifier, 
            identifier: identifier
        )
        return try await self.deleteListing(input, logger: logger)
    }

    /// Deletes a project in Amazon DataZone.
    @Sendable
    @inlinable
    public func deleteProject(_ input: DeleteProjectInput, logger: Logger = AWSClient.loggingDisabled) async throws -> DeleteProjectOutput {
        try await self.client.execute(
            operation: "DeleteProject", 
            path: "/v2/domains/{domainIdentifier}/projects/{identifier}", 
            httpMethod: .DELETE, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Deletes a project in Amazon DataZone.
    ///
    /// Parameters:
    ///   - domainIdentifier: The ID of the Amazon DataZone domain in which the project is deleted.
    ///   - identifier: The identifier of the project that is to be deleted.
    ///   - skipDeletionCheck: Specifies the optional flag to delete all child entities within the project.
    ///   - logger: Logger use during operation
    @inlinable
    public func deleteProject(
        domainIdentifier: String,
        identifier: String,
        skipDeletionCheck: Bool? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> DeleteProjectOutput {
        let input = DeleteProjectInput(
            domainIdentifier: domainIdentifier, 
            identifier: identifier, 
            skipDeletionCheck: skipDeletionCheck
        )
        return try await self.deleteProject(input, logger: logger)
    }

    /// Deletes project membership in Amazon DataZone.
    @Sendable
    @inlinable
    public func deleteProjectMembership(_ input: DeleteProjectMembershipInput, logger: Logger = AWSClient.loggingDisabled) async throws -> DeleteProjectMembershipOutput {
        try await self.client.execute(
            operation: "DeleteProjectMembership", 
            path: "/v2/domains/{domainIdentifier}/projects/{projectIdentifier}/deleteMembership", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Deletes project membership in Amazon DataZone.
    ///
    /// Parameters:
    ///   - domainIdentifier: The ID of the Amazon DataZone domain where project membership is deleted.
    ///   - member: The project member whose project membership is deleted.
    ///   - projectIdentifier: The ID of the Amazon DataZone project the membership to which is deleted.
    ///   - logger: Logger use during operation
    @inlinable
    public func deleteProjectMembership(
        domainIdentifier: String,
        member: Member,
        projectIdentifier: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> DeleteProjectMembershipOutput {
        let input = DeleteProjectMembershipInput(
            domainIdentifier: domainIdentifier, 
            member: member, 
            projectIdentifier: projectIdentifier
        )
        return try await self.deleteProjectMembership(input, logger: logger)
    }

    /// Deletes a project profile.
    @Sendable
    @inlinable
    public func deleteProjectProfile(_ input: DeleteProjectProfileInput, logger: Logger = AWSClient.loggingDisabled) async throws -> DeleteProjectProfileOutput {
        try await self.client.execute(
            operation: "DeleteProjectProfile", 
            path: "/v2/domains/{domainIdentifier}/project-profiles/{identifier}", 
            httpMethod: .DELETE, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Deletes a project profile.
    ///
    /// Parameters:
    ///   - domainIdentifier: The ID of the domain where a project profile is deleted.
    ///   - identifier: The ID of the project profile that is deleted.
    ///   - logger: Logger use during operation
    @inlinable
    public func deleteProjectProfile(
        domainIdentifier: String,
        identifier: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> DeleteProjectProfileOutput {
        let input = DeleteProjectProfileInput(
            domainIdentifier: domainIdentifier, 
            identifier: identifier
        )
        return try await self.deleteProjectProfile(input, logger: logger)
    }

    /// Deletes a rule in Amazon DataZone. A rule is a formal agreement that enforces specific requirements across user workflows (e.g., publishing assets to the catalog, requesting subscriptions, creating projects) within the Amazon DataZone data portal. These rules help maintain consistency, ensure compliance, and uphold governance standards in data management processes. For instance, a metadata enforcement rule can specify the required information for creating a subscription request or publishing a data asset to the catalog, ensuring alignment with organizational standards.
    @Sendable
    @inlinable
    public func deleteRule(_ input: DeleteRuleInput, logger: Logger = AWSClient.loggingDisabled) async throws -> DeleteRuleOutput {
        try await self.client.execute(
            operation: "DeleteRule", 
            path: "/v2/domains/{domainIdentifier}/rules/{identifier}", 
            httpMethod: .DELETE, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Deletes a rule in Amazon DataZone. A rule is a formal agreement that enforces specific requirements across user workflows (e.g., publishing assets to the catalog, requesting subscriptions, creating projects) within the Amazon DataZone data portal. These rules help maintain consistency, ensure compliance, and uphold governance standards in data management processes. For instance, a metadata enforcement rule can specify the required information for creating a subscription request or publishing a data asset to the catalog, ensuring alignment with organizational standards.
    ///
    /// Parameters:
    ///   - domainIdentifier: The ID of the domain that where the rule is to be deleted.
    ///   - identifier: The ID of the rule that is to be deleted.
    ///   - logger: Logger use during operation
    @inlinable
    public func deleteRule(
        domainIdentifier: String,
        identifier: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> DeleteRuleOutput {
        let input = DeleteRuleInput(
            domainIdentifier: domainIdentifier, 
            identifier: identifier
        )
        return try await self.deleteRule(input, logger: logger)
    }

    /// Deletes and subscription grant in Amazon DataZone.
    @Sendable
    @inlinable
    public func deleteSubscriptionGrant(_ input: DeleteSubscriptionGrantInput, logger: Logger = AWSClient.loggingDisabled) async throws -> DeleteSubscriptionGrantOutput {
        try await self.client.execute(
            operation: "DeleteSubscriptionGrant", 
            path: "/v2/domains/{domainIdentifier}/subscription-grants/{identifier}", 
            httpMethod: .DELETE, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Deletes and subscription grant in Amazon DataZone.
    ///
    /// Parameters:
    ///   - domainIdentifier: The ID of the Amazon DataZone domain where the subscription grant is deleted.
    ///   - identifier: The ID of the subscription grant that is deleted.
    ///   - logger: Logger use during operation
    @inlinable
    public func deleteSubscriptionGrant(
        domainIdentifier: String,
        identifier: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> DeleteSubscriptionGrantOutput {
        let input = DeleteSubscriptionGrantInput(
            domainIdentifier: domainIdentifier, 
            identifier: identifier
        )
        return try await self.deleteSubscriptionGrant(input, logger: logger)
    }

    /// Deletes a subscription request in Amazon DataZone.
    @Sendable
    @inlinable
    public func deleteSubscriptionRequest(_ input: DeleteSubscriptionRequestInput, logger: Logger = AWSClient.loggingDisabled) async throws {
        try await self.client.execute(
            operation: "DeleteSubscriptionRequest", 
            path: "/v2/domains/{domainIdentifier}/subscription-requests/{identifier}", 
            httpMethod: .DELETE, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Deletes a subscription request in Amazon DataZone.
    ///
    /// Parameters:
    ///   - domainIdentifier: The ID of the Amazon DataZone domain in which the subscription request is deleted.
    ///   - identifier: The ID of the subscription request that is deleted.
    ///   - logger: Logger use during operation
    @inlinable
    public func deleteSubscriptionRequest(
        domainIdentifier: String,
        identifier: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws {
        let input = DeleteSubscriptionRequestInput(
            domainIdentifier: domainIdentifier, 
            identifier: identifier
        )
        return try await self.deleteSubscriptionRequest(input, logger: logger)
    }

    /// Deletes a subscription target in Amazon DataZone.
    @Sendable
    @inlinable
    public func deleteSubscriptionTarget(_ input: DeleteSubscriptionTargetInput, logger: Logger = AWSClient.loggingDisabled) async throws {
        try await self.client.execute(
            operation: "DeleteSubscriptionTarget", 
            path: "/v2/domains/{domainIdentifier}/environments/{environmentIdentifier}/subscription-targets/{identifier}", 
            httpMethod: .DELETE, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Deletes a subscription target in Amazon DataZone.
    ///
    /// Parameters:
    ///   - domainIdentifier: The ID of the Amazon DataZone domain in which the subscription target is deleted.
    ///   - environmentIdentifier: The ID of the Amazon DataZone environment in which the subscription target is deleted.
    ///   - identifier: The ID of the subscription target that is deleted.
    ///   - logger: Logger use during operation
    @inlinable
    public func deleteSubscriptionTarget(
        domainIdentifier: String,
        environmentIdentifier: String,
        identifier: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws {
        let input = DeleteSubscriptionTargetInput(
            domainIdentifier: domainIdentifier, 
            environmentIdentifier: environmentIdentifier, 
            identifier: identifier
        )
        return try await self.deleteSubscriptionTarget(input, logger: logger)
    }

    /// Deletes the specified time series form for the specified asset.
    @Sendable
    @inlinable
    public func deleteTimeSeriesDataPoints(_ input: DeleteTimeSeriesDataPointsInput, logger: Logger = AWSClient.loggingDisabled) async throws -> DeleteTimeSeriesDataPointsOutput {
        try await self.client.execute(
            operation: "DeleteTimeSeriesDataPoints", 
            path: "/v2/domains/{domainIdentifier}/entities/{entityType}/{entityIdentifier}/time-series-data-points", 
            httpMethod: .DELETE, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Deletes the specified time series form for the specified asset.
    ///
    /// Parameters:
    ///   - clientToken: A unique, case-sensitive identifier to ensure idempotency of the request. This field is automatically populated if not provided.
    ///   - domainIdentifier: The ID of the Amazon DataZone domain that houses the asset for which you want to delete a time series form.
    ///   - entityIdentifier: The ID of the asset for which you want to delete a time series form.
    ///   - entityType: The type of the asset for which you want to delete a time series form.
    ///   - formName: The name of the time series form that you want to delete.
    ///   - logger: Logger use during operation
    @inlinable
    public func deleteTimeSeriesDataPoints(
        clientToken: String? = DeleteTimeSeriesDataPointsInput.idempotencyToken(),
        domainIdentifier: String,
        entityIdentifier: String,
        entityType: TimeSeriesEntityType,
        formName: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> DeleteTimeSeriesDataPointsOutput {
        let input = DeleteTimeSeriesDataPointsInput(
            clientToken: clientToken, 
            domainIdentifier: domainIdentifier, 
            entityIdentifier: entityIdentifier, 
            entityType: entityType, 
            formName: formName
        )
        return try await self.deleteTimeSeriesDataPoints(input, logger: logger)
    }

    /// Disassociates the environment role in Amazon DataZone.
    @Sendable
    @inlinable
    public func disassociateEnvironmentRole(_ input: DisassociateEnvironmentRoleInput, logger: Logger = AWSClient.loggingDisabled) async throws -> DisassociateEnvironmentRoleOutput {
        try await self.client.execute(
            operation: "DisassociateEnvironmentRole", 
            path: "/v2/domains/{domainIdentifier}/environments/{environmentIdentifier}/roles/{environmentRoleArn}", 
            httpMethod: .DELETE, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Disassociates the environment role in Amazon DataZone.
    ///
    /// Parameters:
    ///   - domainIdentifier: The ID of the Amazon DataZone domain in which an environment role is disassociated.
    ///   - environmentIdentifier: The ID of the environment.
    ///   - environmentRoleArn: The ARN of the environment role.
    ///   - logger: Logger use during operation
    @inlinable
    public func disassociateEnvironmentRole(
        domainIdentifier: String,
        environmentIdentifier: String,
        environmentRoleArn: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> DisassociateEnvironmentRoleOutput {
        let input = DisassociateEnvironmentRoleInput(
            domainIdentifier: domainIdentifier, 
            environmentIdentifier: environmentIdentifier, 
            environmentRoleArn: environmentRoleArn
        )
        return try await self.disassociateEnvironmentRole(input, logger: logger)
    }

    /// Gets an Amazon DataZone asset.
    @Sendable
    @inlinable
    public func getAsset(_ input: GetAssetInput, logger: Logger = AWSClient.loggingDisabled) async throws -> GetAssetOutput {
        try await self.client.execute(
            operation: "GetAsset", 
            path: "/v2/domains/{domainIdentifier}/assets/{identifier}", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Gets an Amazon DataZone asset.
    ///
    /// Parameters:
    ///   - domainIdentifier: The ID of the Amazon DataZone domain to which the asset belongs.
    ///   - identifier: The ID of the Amazon DataZone asset.
    ///   - revision: The revision of the Amazon DataZone asset.
    ///   - logger: Logger use during operation
    @inlinable
    public func getAsset(
        domainIdentifier: String,
        identifier: String,
        revision: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> GetAssetOutput {
        let input = GetAssetInput(
            domainIdentifier: domainIdentifier, 
            identifier: identifier, 
            revision: revision
        )
        return try await self.getAsset(input, logger: logger)
    }

    /// Gets an asset filter.
    @Sendable
    @inlinable
    public func getAssetFilter(_ input: GetAssetFilterInput, logger: Logger = AWSClient.loggingDisabled) async throws -> GetAssetFilterOutput {
        try await self.client.execute(
            operation: "GetAssetFilter", 
            path: "/v2/domains/{domainIdentifier}/assets/{assetIdentifier}/filters/{identifier}", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Gets an asset filter.
    ///
    /// Parameters:
    ///   - assetIdentifier: The ID of the data asset.
    ///   - domainIdentifier: The ID of the domain where you want to get an asset filter.
    ///   - identifier: The ID of the asset filter.
    ///   - logger: Logger use during operation
    @inlinable
    public func getAssetFilter(
        assetIdentifier: String,
        domainIdentifier: String,
        identifier: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> GetAssetFilterOutput {
        let input = GetAssetFilterInput(
            assetIdentifier: assetIdentifier, 
            domainIdentifier: domainIdentifier, 
            identifier: identifier
        )
        return try await self.getAssetFilter(input, logger: logger)
    }

    /// Gets an Amazon DataZone asset type.
    @Sendable
    @inlinable
    public func getAssetType(_ input: GetAssetTypeInput, logger: Logger = AWSClient.loggingDisabled) async throws -> GetAssetTypeOutput {
        try await self.client.execute(
            operation: "GetAssetType", 
            path: "/v2/domains/{domainIdentifier}/asset-types/{identifier}", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Gets an Amazon DataZone asset type.
    ///
    /// Parameters:
    ///   - domainIdentifier: The ID of the Amazon DataZone domain in which the asset type exists.
    ///   - identifier: The ID of the asset type.
    ///   - revision: The revision of the asset type.
    ///   - logger: Logger use during operation
    @inlinable
    public func getAssetType(
        domainIdentifier: String,
        identifier: String,
        revision: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> GetAssetTypeOutput {
        let input = GetAssetTypeInput(
            domainIdentifier: domainIdentifier, 
            identifier: identifier, 
            revision: revision
        )
        return try await self.getAssetType(input, logger: logger)
    }

    /// Gets a connection. In Amazon DataZone, a connection enables you to connect your resources (domains, projects, and environments) to external resources and services.
    @Sendable
    @inlinable
    public func getConnection(_ input: GetConnectionInput, logger: Logger = AWSClient.loggingDisabled) async throws -> GetConnectionOutput {
        try await self.client.execute(
            operation: "GetConnection", 
            path: "/v2/domains/{domainIdentifier}/connections/{identifier}", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Gets a connection. In Amazon DataZone, a connection enables you to connect your resources (domains, projects, and environments) to external resources and services.
    ///
    /// Parameters:
    ///   - domainIdentifier: The ID of the domain where we get the connection.
    ///   - identifier: The connection ID.
    ///   - withSecret: Specifies whether a connection has a secret.
    ///   - logger: Logger use during operation
    @inlinable
    public func getConnection(
        domainIdentifier: String,
        identifier: String,
        withSecret: Bool? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> GetConnectionOutput {
        let input = GetConnectionInput(
            domainIdentifier: domainIdentifier, 
            identifier: identifier, 
            withSecret: withSecret
        )
        return try await self.getConnection(input, logger: logger)
    }

    /// Gets the data product.
    @Sendable
    @inlinable
    public func getDataProduct(_ input: GetDataProductInput, logger: Logger = AWSClient.loggingDisabled) async throws -> GetDataProductOutput {
        try await self.client.execute(
            operation: "GetDataProduct", 
            path: "/v2/domains/{domainIdentifier}/data-products/{identifier}", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Gets the data product.
    ///
    /// Parameters:
    ///   - domainIdentifier: The ID of the domain where the data product lives.
    ///   - identifier: The ID of the data product.
    ///   - revision: The revision of the data product.
    ///   - logger: Logger use during operation
    @inlinable
    public func getDataProduct(
        domainIdentifier: String,
        identifier: String,
        revision: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> GetDataProductOutput {
        let input = GetDataProductInput(
            domainIdentifier: domainIdentifier, 
            identifier: identifier, 
            revision: revision
        )
        return try await self.getDataProduct(input, logger: logger)
    }

    /// Gets an Amazon DataZone data source.
    @Sendable
    @inlinable
    public func getDataSource(_ input: GetDataSourceInput, logger: Logger = AWSClient.loggingDisabled) async throws -> GetDataSourceOutput {
        try await self.client.execute(
            operation: "GetDataSource", 
            path: "/v2/domains/{domainIdentifier}/data-sources/{identifier}", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Gets an Amazon DataZone data source.
    ///
    /// Parameters:
    ///   - domainIdentifier: The ID of the Amazon DataZone domain in which the data source exists.
    ///   - identifier: The ID of the Amazon DataZone data source.
    ///   - logger: Logger use during operation
    @inlinable
    public func getDataSource(
        domainIdentifier: String,
        identifier: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> GetDataSourceOutput {
        let input = GetDataSourceInput(
            domainIdentifier: domainIdentifier, 
            identifier: identifier
        )
        return try await self.getDataSource(input, logger: logger)
    }

    /// Gets an Amazon DataZone data source run.
    @Sendable
    @inlinable
    public func getDataSourceRun(_ input: GetDataSourceRunInput, logger: Logger = AWSClient.loggingDisabled) async throws -> GetDataSourceRunOutput {
        try await self.client.execute(
            operation: "GetDataSourceRun", 
            path: "/v2/domains/{domainIdentifier}/data-source-runs/{identifier}", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Gets an Amazon DataZone data source run.
    ///
    /// Parameters:
    ///   - domainIdentifier: The ID of the domain in which this data source run was performed.
    ///   - identifier: The ID of the data source run.
    ///   - logger: Logger use during operation
    @inlinable
    public func getDataSourceRun(
        domainIdentifier: String,
        identifier: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> GetDataSourceRunOutput {
        let input = GetDataSourceRunInput(
            domainIdentifier: domainIdentifier, 
            identifier: identifier
        )
        return try await self.getDataSourceRun(input, logger: logger)
    }

    /// Gets an Amazon DataZone domain.
    @Sendable
    @inlinable
    public func getDomain(_ input: GetDomainInput, logger: Logger = AWSClient.loggingDisabled) async throws -> GetDomainOutput {
        try await self.client.execute(
            operation: "GetDomain", 
            path: "/v2/domains/{identifier}", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Gets an Amazon DataZone domain.
    ///
    /// Parameters:
    ///   - identifier: The identifier of the specified Amazon DataZone domain.
    ///   - logger: Logger use during operation
    @inlinable
    public func getDomain(
        identifier: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> GetDomainOutput {
        let input = GetDomainInput(
            identifier: identifier
        )
        return try await self.getDomain(input, logger: logger)
    }

    /// Gets the details of the specified domain unit.
    @Sendable
    @inlinable
    public func getDomainUnit(_ input: GetDomainUnitInput, logger: Logger = AWSClient.loggingDisabled) async throws -> GetDomainUnitOutput {
        try await self.client.execute(
            operation: "GetDomainUnit", 
            path: "/v2/domains/{domainIdentifier}/domain-units/{identifier}", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Gets the details of the specified domain unit.
    ///
    /// Parameters:
    ///   - domainIdentifier: The ID of the domain where you want to get a domain unit.
    ///   - identifier: The identifier of the domain unit that you want to get.
    ///   - logger: Logger use during operation
    @inlinable
    public func getDomainUnit(
        domainIdentifier: String,
        identifier: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> GetDomainUnitOutput {
        let input = GetDomainUnitInput(
            domainIdentifier: domainIdentifier, 
            identifier: identifier
        )
        return try await self.getDomainUnit(input, logger: logger)
    }

    /// Gets an Amazon DataZone environment.
    @Sendable
    @inlinable
    public func getEnvironment(_ input: GetEnvironmentInput, logger: Logger = AWSClient.loggingDisabled) async throws -> GetEnvironmentOutput {
        try await self.client.execute(
            operation: "GetEnvironment", 
            path: "/v2/domains/{domainIdentifier}/environments/{identifier}", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Gets an Amazon DataZone environment.
    ///
    /// Parameters:
    ///   - domainIdentifier: The ID of the Amazon DataZone domain where the environment exists.
    ///   - identifier: The ID of the Amazon DataZone environment.
    ///   - logger: Logger use during operation
    @inlinable
    public func getEnvironment(
        domainIdentifier: String,
        identifier: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> GetEnvironmentOutput {
        let input = GetEnvironmentInput(
            domainIdentifier: domainIdentifier, 
            identifier: identifier
        )
        return try await self.getEnvironment(input, logger: logger)
    }

    /// Gets the specified environment action.
    @Sendable
    @inlinable
    public func getEnvironmentAction(_ input: GetEnvironmentActionInput, logger: Logger = AWSClient.loggingDisabled) async throws -> GetEnvironmentActionOutput {
        try await self.client.execute(
            operation: "GetEnvironmentAction", 
            path: "/v2/domains/{domainIdentifier}/environments/{environmentIdentifier}/actions/{identifier}", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Gets the specified environment action.
    ///
    /// Parameters:
    ///   - domainIdentifier: The ID of the Amazon DataZone domain in which the GetEnvironmentAction API is invoked.
    ///   - environmentIdentifier: The environment ID of the environment action.
    ///   - identifier: The ID of the environment action
    ///   - logger: Logger use during operation
    @inlinable
    public func getEnvironmentAction(
        domainIdentifier: String,
        environmentIdentifier: String,
        identifier: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> GetEnvironmentActionOutput {
        let input = GetEnvironmentActionInput(
            domainIdentifier: domainIdentifier, 
            environmentIdentifier: environmentIdentifier, 
            identifier: identifier
        )
        return try await self.getEnvironmentAction(input, logger: logger)
    }

    /// Gets an Amazon DataZone blueprint.
    @Sendable
    @inlinable
    public func getEnvironmentBlueprint(_ input: GetEnvironmentBlueprintInput, logger: Logger = AWSClient.loggingDisabled) async throws -> GetEnvironmentBlueprintOutput {
        try await self.client.execute(
            operation: "GetEnvironmentBlueprint", 
            path: "/v2/domains/{domainIdentifier}/environment-blueprints/{identifier}", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Gets an Amazon DataZone blueprint.
    ///
    /// Parameters:
    ///   - domainIdentifier: The identifier of the domain in which this blueprint exists.
    ///   - identifier: The ID of this Amazon DataZone blueprint.
    ///   - logger: Logger use during operation
    @inlinable
    public func getEnvironmentBlueprint(
        domainIdentifier: String,
        identifier: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> GetEnvironmentBlueprintOutput {
        let input = GetEnvironmentBlueprintInput(
            domainIdentifier: domainIdentifier, 
            identifier: identifier
        )
        return try await self.getEnvironmentBlueprint(input, logger: logger)
    }

    /// Gets the blueprint configuration in Amazon DataZone.
    @Sendable
    @inlinable
    public func getEnvironmentBlueprintConfiguration(_ input: GetEnvironmentBlueprintConfigurationInput, logger: Logger = AWSClient.loggingDisabled) async throws -> GetEnvironmentBlueprintConfigurationOutput {
        try await self.client.execute(
            operation: "GetEnvironmentBlueprintConfiguration", 
            path: "/v2/domains/{domainIdentifier}/environment-blueprint-configurations/{environmentBlueprintIdentifier}", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Gets the blueprint configuration in Amazon DataZone.
    ///
    /// Parameters:
    ///   - domainIdentifier: The ID of the Amazon DataZone domain where this blueprint exists.
    ///   - environmentBlueprintIdentifier: He ID of the blueprint.
    ///   - logger: Logger use during operation
    @inlinable
    public func getEnvironmentBlueprintConfiguration(
        domainIdentifier: String,
        environmentBlueprintIdentifier: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> GetEnvironmentBlueprintConfigurationOutput {
        let input = GetEnvironmentBlueprintConfigurationInput(
            domainIdentifier: domainIdentifier, 
            environmentBlueprintIdentifier: environmentBlueprintIdentifier
        )
        return try await self.getEnvironmentBlueprintConfiguration(input, logger: logger)
    }

    /// Gets the credentials of an environment in Amazon DataZone.
    @Sendable
    @inlinable
    public func getEnvironmentCredentials(_ input: GetEnvironmentCredentialsInput, logger: Logger = AWSClient.loggingDisabled) async throws -> GetEnvironmentCredentialsOutput {
        try await self.client.execute(
            operation: "GetEnvironmentCredentials", 
            path: "/v2/domains/{domainIdentifier}/environments/{environmentIdentifier}/credentials", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Gets the credentials of an environment in Amazon DataZone.
    ///
    /// Parameters:
    ///   - domainIdentifier: The ID of the Amazon DataZone domain in which this environment and its credentials exist.
    ///   - environmentIdentifier: The ID of the environment whose credentials this operation gets.
    ///   - logger: Logger use during operation
    @inlinable
    public func getEnvironmentCredentials(
        domainIdentifier: String,
        environmentIdentifier: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> GetEnvironmentCredentialsOutput {
        let input = GetEnvironmentCredentialsInput(
            domainIdentifier: domainIdentifier, 
            environmentIdentifier: environmentIdentifier
        )
        return try await self.getEnvironmentCredentials(input, logger: logger)
    }

    /// Gets an evinronment profile in Amazon DataZone.
    @Sendable
    @inlinable
    public func getEnvironmentProfile(_ input: GetEnvironmentProfileInput, logger: Logger = AWSClient.loggingDisabled) async throws -> GetEnvironmentProfileOutput {
        try await self.client.execute(
            operation: "GetEnvironmentProfile", 
            path: "/v2/domains/{domainIdentifier}/environment-profiles/{identifier}", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Gets an evinronment profile in Amazon DataZone.
    ///
    /// Parameters:
    ///   - domainIdentifier: The ID of the Amazon DataZone domain in which this environment profile exists.
    ///   - identifier: The ID of the environment profile.
    ///   - logger: Logger use during operation
    @inlinable
    public func getEnvironmentProfile(
        domainIdentifier: String,
        identifier: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> GetEnvironmentProfileOutput {
        let input = GetEnvironmentProfileInput(
            domainIdentifier: domainIdentifier, 
            identifier: identifier
        )
        return try await self.getEnvironmentProfile(input, logger: logger)
    }

    /// Gets a metadata form type in Amazon DataZone.
    @Sendable
    @inlinable
    public func getFormType(_ input: GetFormTypeInput, logger: Logger = AWSClient.loggingDisabled) async throws -> GetFormTypeOutput {
        try await self.client.execute(
            operation: "GetFormType", 
            path: "/v2/domains/{domainIdentifier}/form-types/{formTypeIdentifier}", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Gets a metadata form type in Amazon DataZone.
    ///
    /// Parameters:
    ///   - domainIdentifier: The ID of the Amazon DataZone domain in which this metadata form type exists.
    ///   - formTypeIdentifier: The ID of the metadata form type.
    ///   - revision: The revision of this metadata form type.
    ///   - logger: Logger use during operation
    @inlinable
    public func getFormType(
        domainIdentifier: String,
        formTypeIdentifier: String,
        revision: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> GetFormTypeOutput {
        let input = GetFormTypeInput(
            domainIdentifier: domainIdentifier, 
            formTypeIdentifier: formTypeIdentifier, 
            revision: revision
        )
        return try await self.getFormType(input, logger: logger)
    }

    /// Gets a business glossary in Amazon DataZone.
    @Sendable
    @inlinable
    public func getGlossary(_ input: GetGlossaryInput, logger: Logger = AWSClient.loggingDisabled) async throws -> GetGlossaryOutput {
        try await self.client.execute(
            operation: "GetGlossary", 
            path: "/v2/domains/{domainIdentifier}/glossaries/{identifier}", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Gets a business glossary in Amazon DataZone.
    ///
    /// Parameters:
    ///   - domainIdentifier: The ID of the Amazon DataZone domain in which this business glossary exists.
    ///   - identifier: The ID of the business glossary.
    ///   - logger: Logger use during operation
    @inlinable
    public func getGlossary(
        domainIdentifier: String,
        identifier: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> GetGlossaryOutput {
        let input = GetGlossaryInput(
            domainIdentifier: domainIdentifier, 
            identifier: identifier
        )
        return try await self.getGlossary(input, logger: logger)
    }

    /// Gets a business glossary term in Amazon DataZone.
    @Sendable
    @inlinable
    public func getGlossaryTerm(_ input: GetGlossaryTermInput, logger: Logger = AWSClient.loggingDisabled) async throws -> GetGlossaryTermOutput {
        try await self.client.execute(
            operation: "GetGlossaryTerm", 
            path: "/v2/domains/{domainIdentifier}/glossary-terms/{identifier}", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Gets a business glossary term in Amazon DataZone.
    ///
    /// Parameters:
    ///   - domainIdentifier: The ID of the Amazon DataZone domain in which this business glossary term exists.
    ///   - identifier: The ID of the business glossary term.
    ///   - logger: Logger use during operation
    @inlinable
    public func getGlossaryTerm(
        domainIdentifier: String,
        identifier: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> GetGlossaryTermOutput {
        let input = GetGlossaryTermInput(
            domainIdentifier: domainIdentifier, 
            identifier: identifier
        )
        return try await self.getGlossaryTerm(input, logger: logger)
    }

    /// Gets a group profile in Amazon DataZone.
    @Sendable
    @inlinable
    public func getGroupProfile(_ input: GetGroupProfileInput, logger: Logger = AWSClient.loggingDisabled) async throws -> GetGroupProfileOutput {
        try await self.client.execute(
            operation: "GetGroupProfile", 
            path: "/v2/domains/{domainIdentifier}/group-profiles/{groupIdentifier}", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Gets a group profile in Amazon DataZone.
    ///
    /// Parameters:
    ///   - domainIdentifier: The identifier of the Amazon DataZone domain in which the group profile exists.
    ///   - groupIdentifier: The identifier of the group profile.
    ///   - logger: Logger use during operation
    @inlinable
    public func getGroupProfile(
        domainIdentifier: String,
        groupIdentifier: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> GetGroupProfileOutput {
        let input = GetGroupProfileInput(
            domainIdentifier: domainIdentifier, 
            groupIdentifier: groupIdentifier
        )
        return try await self.getGroupProfile(input, logger: logger)
    }

    /// Gets the data portal URL for the specified Amazon DataZone domain.
    @Sendable
    @inlinable
    public func getIamPortalLoginUrl(_ input: GetIamPortalLoginUrlInput, logger: Logger = AWSClient.loggingDisabled) async throws -> GetIamPortalLoginUrlOutput {
        try await self.client.execute(
            operation: "GetIamPortalLoginUrl", 
            path: "/v2/domains/{domainIdentifier}/get-portal-login-url", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Gets the data portal URL for the specified Amazon DataZone domain.
    ///
    /// Parameters:
    ///   - domainIdentifier: the ID of the Amazon DataZone domain the data portal of which you want to get.
    ///   - logger: Logger use during operation
    @inlinable
    public func getIamPortalLoginUrl(
        domainIdentifier: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> GetIamPortalLoginUrlOutput {
        let input = GetIamPortalLoginUrlInput(
            domainIdentifier: domainIdentifier
        )
        return try await self.getIamPortalLoginUrl(input, logger: logger)
    }

    /// The details of the job run.
    @Sendable
    @inlinable
    public func getJobRun(_ input: GetJobRunInput, logger: Logger = AWSClient.loggingDisabled) async throws -> GetJobRunOutput {
        try await self.client.execute(
            operation: "GetJobRun", 
            path: "/v2/domains/{domainIdentifier}/jobRuns/{identifier}", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// The details of the job run.
    ///
    /// Parameters:
    ///   - domainIdentifier: The ID of the domain.
    ///   - identifier: The ID of the job run.
    ///   - logger: Logger use during operation
    @inlinable
    public func getJobRun(
        domainIdentifier: String,
        identifier: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> GetJobRunOutput {
        let input = GetJobRunInput(
            domainIdentifier: domainIdentifier, 
            identifier: identifier
        )
        return try await self.getJobRun(input, logger: logger)
    }

    /// Describes the lineage event.
    @Sendable
    @inlinable
    public func getLineageEvent(_ input: GetLineageEventInput, logger: Logger = AWSClient.loggingDisabled) async throws -> GetLineageEventOutput {
        try await self.client.execute(
            operation: "GetLineageEvent", 
            path: "/v2/domains/{domainIdentifier}/lineage/events/{identifier}", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Describes the lineage event.
    ///
    /// Parameters:
    ///   - domainIdentifier: The ID of the domain.
    ///   - identifier: The ID of the lineage event.
    ///   - logger: Logger use during operation
    @inlinable
    public func getLineageEvent(
        domainIdentifier: String,
        identifier: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> GetLineageEventOutput {
        let input = GetLineageEventInput(
            domainIdentifier: domainIdentifier, 
            identifier: identifier
        )
        return try await self.getLineageEvent(input, logger: logger)
    }

    /// Gets the data lineage node.
    @Sendable
    @inlinable
    public func getLineageNode(_ input: GetLineageNodeInput, logger: Logger = AWSClient.loggingDisabled) async throws -> GetLineageNodeOutput {
        try await self.client.execute(
            operation: "GetLineageNode", 
            path: "/v2/domains/{domainIdentifier}/lineage/nodes/{identifier}", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Gets the data lineage node.
    ///
    /// Parameters:
    ///   - domainIdentifier: The ID of the domain in which you want to get the data lineage node.
    ///   - eventTimestamp: The event time stamp for which you want to get the data lineage node.
    ///   - identifier: The ID of the data lineage node that you want to get. Both, a lineage node identifier generated by Amazon DataZone and a sourceIdentifier of the lineage node are supported. If sourceIdentifier is greater than 1800 characters, you can use lineage node identifier generated by Amazon DataZone to get the node details.
    ///   - logger: Logger use during operation
    @inlinable
    public func getLineageNode(
        domainIdentifier: String,
        eventTimestamp: Date? = nil,
        identifier: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> GetLineageNodeOutput {
        let input = GetLineageNodeInput(
            domainIdentifier: domainIdentifier, 
            eventTimestamp: eventTimestamp, 
            identifier: identifier
        )
        return try await self.getLineageNode(input, logger: logger)
    }

    /// Gets a listing (a record of an asset at a given time). If you specify a listing version, only details that are specific to that version are returned.
    @Sendable
    @inlinable
    public func getListing(_ input: GetListingInput, logger: Logger = AWSClient.loggingDisabled) async throws -> GetListingOutput {
        try await self.client.execute(
            operation: "GetListing", 
            path: "/v2/domains/{domainIdentifier}/listings/{identifier}", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Gets a listing (a record of an asset at a given time). If you specify a listing version, only details that are specific to that version are returned.
    ///
    /// Parameters:
    ///   - domainIdentifier: The ID of the Amazon DataZone domain.
    ///   - identifier: The ID of the listing.
    ///   - listingRevision: The revision of the listing.
    ///   - logger: Logger use during operation
    @inlinable
    public func getListing(
        domainIdentifier: String,
        identifier: String,
        listingRevision: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> GetListingOutput {
        let input = GetListingInput(
            domainIdentifier: domainIdentifier, 
            identifier: identifier, 
            listingRevision: listingRevision
        )
        return try await self.getListing(input, logger: logger)
    }

    /// Gets a metadata generation run in Amazon DataZone.
    @Sendable
    @inlinable
    public func getMetadataGenerationRun(_ input: GetMetadataGenerationRunInput, logger: Logger = AWSClient.loggingDisabled) async throws -> GetMetadataGenerationRunOutput {
        try await self.client.execute(
            operation: "GetMetadataGenerationRun", 
            path: "/v2/domains/{domainIdentifier}/metadata-generation-runs/{identifier}", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Gets a metadata generation run in Amazon DataZone.
    ///
    /// Parameters:
    ///   - domainIdentifier: The ID of the Amazon DataZone domain the metadata generation run of which you want to get.
    ///   - identifier: The identifier of the metadata generation run.
    ///   - logger: Logger use during operation
    @inlinable
    public func getMetadataGenerationRun(
        domainIdentifier: String,
        identifier: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> GetMetadataGenerationRunOutput {
        let input = GetMetadataGenerationRunInput(
            domainIdentifier: domainIdentifier, 
            identifier: identifier
        )
        return try await self.getMetadataGenerationRun(input, logger: logger)
    }

    /// Gets a project in Amazon DataZone.
    @Sendable
    @inlinable
    public func getProject(_ input: GetProjectInput, logger: Logger = AWSClient.loggingDisabled) async throws -> GetProjectOutput {
        try await self.client.execute(
            operation: "GetProject", 
            path: "/v2/domains/{domainIdentifier}/projects/{identifier}", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Gets a project in Amazon DataZone.
    ///
    /// Parameters:
    ///   - domainIdentifier: The ID of the Amazon DataZone domain in which the project exists.
    ///   - identifier: The ID of the project.
    ///   - logger: Logger use during operation
    @inlinable
    public func getProject(
        domainIdentifier: String,
        identifier: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> GetProjectOutput {
        let input = GetProjectInput(
            domainIdentifier: domainIdentifier, 
            identifier: identifier
        )
        return try await self.getProject(input, logger: logger)
    }

    /// The details of the project profile.
    @Sendable
    @inlinable
    public func getProjectProfile(_ input: GetProjectProfileInput, logger: Logger = AWSClient.loggingDisabled) async throws -> GetProjectProfileOutput {
        try await self.client.execute(
            operation: "GetProjectProfile", 
            path: "/v2/domains/{domainIdentifier}/project-profiles/{identifier}", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// The details of the project profile.
    ///
    /// Parameters:
    ///   - domainIdentifier: The ID of the domain.
    ///   - identifier: The ID of the project profile.
    ///   - logger: Logger use during operation
    @inlinable
    public func getProjectProfile(
        domainIdentifier: String,
        identifier: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> GetProjectProfileOutput {
        let input = GetProjectProfileInput(
            domainIdentifier: domainIdentifier, 
            identifier: identifier
        )
        return try await self.getProjectProfile(input, logger: logger)
    }

    /// Gets the details of a rule in Amazon DataZone. A rule is a formal agreement that enforces specific requirements across user workflows (e.g., publishing assets to the catalog, requesting subscriptions, creating projects) within the Amazon DataZone data portal. These rules help maintain consistency, ensure compliance, and uphold governance standards in data management processes. For instance, a metadata enforcement rule can specify the required information for creating a subscription request or publishing a data asset to the catalog, ensuring alignment with organizational standards.
    @Sendable
    @inlinable
    public func getRule(_ input: GetRuleInput, logger: Logger = AWSClient.loggingDisabled) async throws -> GetRuleOutput {
        try await self.client.execute(
            operation: "GetRule", 
            path: "/v2/domains/{domainIdentifier}/rules/{identifier}", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Gets the details of a rule in Amazon DataZone. A rule is a formal agreement that enforces specific requirements across user workflows (e.g., publishing assets to the catalog, requesting subscriptions, creating projects) within the Amazon DataZone data portal. These rules help maintain consistency, ensure compliance, and uphold governance standards in data management processes. For instance, a metadata enforcement rule can specify the required information for creating a subscription request or publishing a data asset to the catalog, ensuring alignment with organizational standards.
    ///
    /// Parameters:
    ///   - domainIdentifier: The ID of the domain where the GetRule action is to be invoked.
    ///   - identifier: The ID of the rule.
    ///   - revision: The revision of the rule.
    ///   - logger: Logger use during operation
    @inlinable
    public func getRule(
        domainIdentifier: String,
        identifier: String,
        revision: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> GetRuleOutput {
        let input = GetRuleInput(
            domainIdentifier: domainIdentifier, 
            identifier: identifier, 
            revision: revision
        )
        return try await self.getRule(input, logger: logger)
    }

    /// Gets a subscription in Amazon DataZone.
    @Sendable
    @inlinable
    public func getSubscription(_ input: GetSubscriptionInput, logger: Logger = AWSClient.loggingDisabled) async throws -> GetSubscriptionOutput {
        try await self.client.execute(
            operation: "GetSubscription", 
            path: "/v2/domains/{domainIdentifier}/subscriptions/{identifier}", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Gets a subscription in Amazon DataZone.
    ///
    /// Parameters:
    ///   - domainIdentifier: The ID of the Amazon DataZone domain in which the subscription exists.
    ///   - identifier: The ID of the subscription.
    ///   - logger: Logger use during operation
    @inlinable
    public func getSubscription(
        domainIdentifier: String,
        identifier: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> GetSubscriptionOutput {
        let input = GetSubscriptionInput(
            domainIdentifier: domainIdentifier, 
            identifier: identifier
        )
        return try await self.getSubscription(input, logger: logger)
    }

    /// Gets the subscription grant in Amazon DataZone.
    @Sendable
    @inlinable
    public func getSubscriptionGrant(_ input: GetSubscriptionGrantInput, logger: Logger = AWSClient.loggingDisabled) async throws -> GetSubscriptionGrantOutput {
        try await self.client.execute(
            operation: "GetSubscriptionGrant", 
            path: "/v2/domains/{domainIdentifier}/subscription-grants/{identifier}", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Gets the subscription grant in Amazon DataZone.
    ///
    /// Parameters:
    ///   - domainIdentifier: The ID of the Amazon DataZone domain in which the subscription grant exists.
    ///   - identifier: The ID of the subscription grant.
    ///   - logger: Logger use during operation
    @inlinable
    public func getSubscriptionGrant(
        domainIdentifier: String,
        identifier: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> GetSubscriptionGrantOutput {
        let input = GetSubscriptionGrantInput(
            domainIdentifier: domainIdentifier, 
            identifier: identifier
        )
        return try await self.getSubscriptionGrant(input, logger: logger)
    }

    /// Gets the details of the specified subscription request.
    @Sendable
    @inlinable
    public func getSubscriptionRequestDetails(_ input: GetSubscriptionRequestDetailsInput, logger: Logger = AWSClient.loggingDisabled) async throws -> GetSubscriptionRequestDetailsOutput {
        try await self.client.execute(
            operation: "GetSubscriptionRequestDetails", 
            path: "/v2/domains/{domainIdentifier}/subscription-requests/{identifier}", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Gets the details of the specified subscription request.
    ///
    /// Parameters:
    ///   - domainIdentifier: The identifier of the Amazon DataZone domain in which to get the subscription request details.
    ///   - identifier: The identifier of the subscription request the details of which to get.
    ///   - logger: Logger use during operation
    @inlinable
    public func getSubscriptionRequestDetails(
        domainIdentifier: String,
        identifier: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> GetSubscriptionRequestDetailsOutput {
        let input = GetSubscriptionRequestDetailsInput(
            domainIdentifier: domainIdentifier, 
            identifier: identifier
        )
        return try await self.getSubscriptionRequestDetails(input, logger: logger)
    }

    /// Gets the subscription target in Amazon DataZone.
    @Sendable
    @inlinable
    public func getSubscriptionTarget(_ input: GetSubscriptionTargetInput, logger: Logger = AWSClient.loggingDisabled) async throws -> GetSubscriptionTargetOutput {
        try await self.client.execute(
            operation: "GetSubscriptionTarget", 
            path: "/v2/domains/{domainIdentifier}/environments/{environmentIdentifier}/subscription-targets/{identifier}", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Gets the subscription target in Amazon DataZone.
    ///
    /// Parameters:
    ///   - domainIdentifier: The ID of the Amazon DataZone domain in which the subscription target exists.
    ///   - environmentIdentifier: The ID of the environment associated with the subscription target.
    ///   - identifier: The ID of the subscription target.
    ///   - logger: Logger use during operation
    @inlinable
    public func getSubscriptionTarget(
        domainIdentifier: String,
        environmentIdentifier: String,
        identifier: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> GetSubscriptionTargetOutput {
        let input = GetSubscriptionTargetInput(
            domainIdentifier: domainIdentifier, 
            environmentIdentifier: environmentIdentifier, 
            identifier: identifier
        )
        return try await self.getSubscriptionTarget(input, logger: logger)
    }

    /// Gets the existing data point for the asset.
    @Sendable
    @inlinable
    public func getTimeSeriesDataPoint(_ input: GetTimeSeriesDataPointInput, logger: Logger = AWSClient.loggingDisabled) async throws -> GetTimeSeriesDataPointOutput {
        try await self.client.execute(
            operation: "GetTimeSeriesDataPoint", 
            path: "/v2/domains/{domainIdentifier}/entities/{entityType}/{entityIdentifier}/time-series-data-points/{identifier}", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Gets the existing data point for the asset.
    ///
    /// Parameters:
    ///   - domainIdentifier: The ID of the Amazon DataZone domain that houses the asset for which you want to get the data point.
    ///   - entityIdentifier: The ID of the asset for which you want to get the data point.
    ///   - entityType: The type of the asset for which you want to get the data point.
    ///   - formName: The name of the time series form that houses the data point that you want to get.
    ///   - identifier: The ID of the data point that you want to get.
    ///   - logger: Logger use during operation
    @inlinable
    public func getTimeSeriesDataPoint(
        domainIdentifier: String,
        entityIdentifier: String,
        entityType: TimeSeriesEntityType,
        formName: String,
        identifier: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> GetTimeSeriesDataPointOutput {
        let input = GetTimeSeriesDataPointInput(
            domainIdentifier: domainIdentifier, 
            entityIdentifier: entityIdentifier, 
            entityType: entityType, 
            formName: formName, 
            identifier: identifier
        )
        return try await self.getTimeSeriesDataPoint(input, logger: logger)
    }

    /// Gets a user profile in Amazon DataZone.
    @Sendable
    @inlinable
    public func getUserProfile(_ input: GetUserProfileInput, logger: Logger = AWSClient.loggingDisabled) async throws -> GetUserProfileOutput {
        try await self.client.execute(
            operation: "GetUserProfile", 
            path: "/v2/domains/{domainIdentifier}/user-profiles/{userIdentifier}", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Gets a user profile in Amazon DataZone.
    ///
    /// Parameters:
    ///   - domainIdentifier: the ID of the Amazon DataZone domain the data portal of which you want to get.
    ///   - type: The type of the user profile.
    ///   - userIdentifier: The identifier of the user for which you want to get the user profile.
    ///   - logger: Logger use during operation
    @inlinable
    public func getUserProfile(
        domainIdentifier: String,
        type: UserProfileType? = nil,
        userIdentifier: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> GetUserProfileOutput {
        let input = GetUserProfileInput(
            domainIdentifier: domainIdentifier, 
            type: type, 
            userIdentifier: userIdentifier
        )
        return try await self.getUserProfile(input, logger: logger)
    }

    /// Lists asset filters.
    @Sendable
    @inlinable
    public func listAssetFilters(_ input: ListAssetFiltersInput, logger: Logger = AWSClient.loggingDisabled) async throws -> ListAssetFiltersOutput {
        try await self.client.execute(
            operation: "ListAssetFilters", 
            path: "/v2/domains/{domainIdentifier}/assets/{assetIdentifier}/filters", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Lists asset filters.
    ///
    /// Parameters:
    ///   - assetIdentifier: The ID of the data asset.
    ///   - domainIdentifier: The ID of the domain where you want to list asset filters.
    ///   - maxResults: The maximum number of asset filters to return in a single call to ListAssetFilters. When the number of asset filters to be listed is greater than the value of MaxResults, the response contains a NextToken value that you can use in a subsequent call to ListAssetFilters to list the next set of asset filters.
    ///   - nextToken: When the number of asset filters is greater than the default value for the MaxResults parameter, or if you explicitly specify a value for MaxResults that is less than the number of asset filters, the response includes a pagination token named NextToken. You can specify this NextToken value in a subsequent call to ListAssetFilters to list the next set of asset filters.
    ///   - status: The status of the asset filter.
    ///   - logger: Logger use during operation
    @inlinable
    public func listAssetFilters(
        assetIdentifier: String,
        domainIdentifier: String,
        maxResults: Int? = nil,
        nextToken: String? = nil,
        status: FilterStatus? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> ListAssetFiltersOutput {
        let input = ListAssetFiltersInput(
            assetIdentifier: assetIdentifier, 
            domainIdentifier: domainIdentifier, 
            maxResults: maxResults, 
            nextToken: nextToken, 
            status: status
        )
        return try await self.listAssetFilters(input, logger: logger)
    }

    /// Lists the revisions for the asset.
    @Sendable
    @inlinable
    public func listAssetRevisions(_ input: ListAssetRevisionsInput, logger: Logger = AWSClient.loggingDisabled) async throws -> ListAssetRevisionsOutput {
        try await self.client.execute(
            operation: "ListAssetRevisions", 
            path: "/v2/domains/{domainIdentifier}/assets/{identifier}/revisions", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Lists the revisions for the asset.
    ///
    /// Parameters:
    ///   - domainIdentifier: The identifier of the domain.
    ///   - identifier: The identifier of the asset.
    ///   - maxResults: The maximum number of revisions to return in a single call to ListAssetRevisions. When the number of revisions to be listed is greater than the value of MaxResults, the response contains a NextToken value that you can use in a subsequent call to ListAssetRevisions to list the next set of revisions.
    ///   - nextToken: When the number of revisions is greater than the default value for the MaxResults parameter, or if you explicitly specify a value for MaxResults that is less than the number of revisions, the response includes a pagination token named NextToken. You can specify this NextToken value in a subsequent call to ListAssetRevisions to list the next set of revisions.
    ///   - logger: Logger use during operation
    @inlinable
    public func listAssetRevisions(
        domainIdentifier: String,
        identifier: String,
        maxResults: Int? = nil,
        nextToken: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> ListAssetRevisionsOutput {
        let input = ListAssetRevisionsInput(
            domainIdentifier: domainIdentifier, 
            identifier: identifier, 
            maxResults: maxResults, 
            nextToken: nextToken
        )
        return try await self.listAssetRevisions(input, logger: logger)
    }

    /// Lists connections. In Amazon DataZone, a connection enables you to connect your resources (domains, projects, and environments) to external resources and services.
    @Sendable
    @inlinable
    public func listConnections(_ input: ListConnectionsInput, logger: Logger = AWSClient.loggingDisabled) async throws -> ListConnectionsOutput {
        try await self.client.execute(
            operation: "ListConnections", 
            path: "/v2/domains/{domainIdentifier}/connections", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Lists connections. In Amazon DataZone, a connection enables you to connect your resources (domains, projects, and environments) to external resources and services.
    ///
    /// Parameters:
    ///   - domainIdentifier: The ID of the domain where you want to list connections.
    ///   - environmentIdentifier: The ID of the environment where you want to list connections.
    ///   - maxResults: The maximum number of connections to return in a single call to ListConnections. When the number of connections to be listed is greater than the value of MaxResults, the response contains a NextToken value that you can use in a subsequent call to ListConnections to list the next set of connections.
    ///   - name: The name of the connection.
    ///   - nextToken: When the number of connections is greater than the default value for the MaxResults parameter, or if you explicitly specify a value for MaxResults that is less than the number of connections, the response includes a pagination token named NextToken. You can specify this NextToken value in a subsequent call to ListConnections to list the next set of connections.
    ///   - projectIdentifier: The ID of the project where you want to list connections.
    ///   - sortBy: Specifies how you want to sort the listed connections.
    ///   - sortOrder: Specifies the sort order for the listed connections.
    ///   - type: The type of connection.
    ///   - logger: Logger use during operation
    @inlinable
    public func listConnections(
        domainIdentifier: String,
        environmentIdentifier: String? = nil,
        maxResults: Int? = nil,
        name: String? = nil,
        nextToken: String? = nil,
        projectIdentifier: String,
        sortBy: SortFieldConnection? = nil,
        sortOrder: SortOrder? = nil,
        type: ConnectionType? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> ListConnectionsOutput {
        let input = ListConnectionsInput(
            domainIdentifier: domainIdentifier, 
            environmentIdentifier: environmentIdentifier, 
            maxResults: maxResults, 
            name: name, 
            nextToken: nextToken, 
            projectIdentifier: projectIdentifier, 
            sortBy: sortBy, 
            sortOrder: sortOrder, 
            type: type
        )
        return try await self.listConnections(input, logger: logger)
    }

    /// Lists data product revisions.
    @Sendable
    @inlinable
    public func listDataProductRevisions(_ input: ListDataProductRevisionsInput, logger: Logger = AWSClient.loggingDisabled) async throws -> ListDataProductRevisionsOutput {
        try await self.client.execute(
            operation: "ListDataProductRevisions", 
            path: "/v2/domains/{domainIdentifier}/data-products/{identifier}/revisions", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Lists data product revisions.
    ///
    /// Parameters:
    ///   - domainIdentifier: The ID of the domain of the data product revisions that you want to list.
    ///   - identifier: The ID of the data product revision.
    ///   - maxResults: The maximum number of asset filters to return in a single call to ListDataProductRevisions. When the number of data product revisions to be listed is greater than the value of MaxResults, the response contains a NextToken value that you can use in a subsequent call to ListDataProductRevisions to list the next set of data product revisions.
    ///   - nextToken: When the number of data product revisions is greater than the default value for the MaxResults parameter, or if you explicitly specify a value for MaxResults that is less than the number of data product revisions, the response includes a pagination token named NextToken. You can specify this NextToken value in a subsequent call to ListDataProductRevisions to list the next set of data product revisions.
    ///   - logger: Logger use during operation
    @inlinable
    public func listDataProductRevisions(
        domainIdentifier: String,
        identifier: String,
        maxResults: Int? = nil,
        nextToken: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> ListDataProductRevisionsOutput {
        let input = ListDataProductRevisionsInput(
            domainIdentifier: domainIdentifier, 
            identifier: identifier, 
            maxResults: maxResults, 
            nextToken: nextToken
        )
        return try await self.listDataProductRevisions(input, logger: logger)
    }

    /// Lists data source run activities.
    @Sendable
    @inlinable
    public func listDataSourceRunActivities(_ input: ListDataSourceRunActivitiesInput, logger: Logger = AWSClient.loggingDisabled) async throws -> ListDataSourceRunActivitiesOutput {
        try await self.client.execute(
            operation: "ListDataSourceRunActivities", 
            path: "/v2/domains/{domainIdentifier}/data-source-runs/{identifier}/activities", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Lists data source run activities.
    ///
    /// Parameters:
    ///   - domainIdentifier: The identifier of the Amazon DataZone domain in which to list data source run activities.
    ///   - identifier: The identifier of the data source run.
    ///   - maxResults: The maximum number of activities to return in a single call to ListDataSourceRunActivities. When the number of activities to be listed is greater than the value of MaxResults, the response contains a NextToken value that you can use in a subsequent call to ListDataSourceRunActivities to list the next set of activities.
    ///   - nextToken: When the number of activities is greater than the default value for the MaxResults parameter, or if you explicitly specify a value for MaxResults that is less than the number of activities, the response includes a pagination token named NextToken. You can specify this NextToken value in a subsequent call to ListDataSourceRunActivities to list the next set of activities.
    ///   - status: The status of the data source run.
    ///   - logger: Logger use during operation
    @inlinable
    public func listDataSourceRunActivities(
        domainIdentifier: String,
        identifier: String,
        maxResults: Int? = nil,
        nextToken: String? = nil,
        status: DataAssetActivityStatus? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> ListDataSourceRunActivitiesOutput {
        let input = ListDataSourceRunActivitiesInput(
            domainIdentifier: domainIdentifier, 
            identifier: identifier, 
            maxResults: maxResults, 
            nextToken: nextToken, 
            status: status
        )
        return try await self.listDataSourceRunActivities(input, logger: logger)
    }

    /// Lists data source runs in Amazon DataZone.
    @Sendable
    @inlinable
    public func listDataSourceRuns(_ input: ListDataSourceRunsInput, logger: Logger = AWSClient.loggingDisabled) async throws -> ListDataSourceRunsOutput {
        try await self.client.execute(
            operation: "ListDataSourceRuns", 
            path: "/v2/domains/{domainIdentifier}/data-sources/{dataSourceIdentifier}/runs", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Lists data source runs in Amazon DataZone.
    ///
    /// Parameters:
    ///   - dataSourceIdentifier: The identifier of the data source.
    ///   - domainIdentifier: The identifier of the Amazon DataZone domain in which to invoke the ListDataSourceRuns action.
    ///   - maxResults: The maximum number of runs to return in a single call to ListDataSourceRuns. When the number of runs to be listed is greater than the value of MaxResults, the response contains a NextToken value that you can use in a subsequent call to ListDataSourceRuns to list the next set of runs.
    ///   - nextToken: When the number of runs is greater than the default value for the MaxResults parameter, or if you explicitly specify a value for MaxResults that is less than the number of runs, the response includes a pagination token named NextToken. You can specify this NextToken value in a subsequent call to ListDataSourceRuns to list the next set of runs.
    ///   - status: The status of the data source.
    ///   - logger: Logger use during operation
    @inlinable
    public func listDataSourceRuns(
        dataSourceIdentifier: String,
        domainIdentifier: String,
        maxResults: Int? = nil,
        nextToken: String? = nil,
        status: DataSourceRunStatus? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> ListDataSourceRunsOutput {
        let input = ListDataSourceRunsInput(
            dataSourceIdentifier: dataSourceIdentifier, 
            domainIdentifier: domainIdentifier, 
            maxResults: maxResults, 
            nextToken: nextToken, 
            status: status
        )
        return try await self.listDataSourceRuns(input, logger: logger)
    }

    /// Lists data sources in Amazon DataZone.
    @Sendable
    @inlinable
    public func listDataSources(_ input: ListDataSourcesInput, logger: Logger = AWSClient.loggingDisabled) async throws -> ListDataSourcesOutput {
        try await self.client.execute(
            operation: "ListDataSources", 
            path: "/v2/domains/{domainIdentifier}/data-sources", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Lists data sources in Amazon DataZone.
    ///
    /// Parameters:
    ///   - connectionIdentifier: The ID of the connection.
    ///   - domainIdentifier: The identifier of the Amazon DataZone domain in which to list the data sources.
    ///   - environmentIdentifier: The identifier of the environment in which to list the data sources.
    ///   - maxResults: The maximum number of data sources to return in a single call to ListDataSources. When the number of data sources to be listed is greater than the value of MaxResults, the response contains a NextToken value that you can use in a subsequent call to ListDataSources to list the next set of data sources.
    ///   - name: The name of the data source.
    ///   - nextToken: When the number of data sources is greater than the default value for the MaxResults parameter, or if you explicitly specify a value for MaxResults that is less than the number of data sources, the response includes a pagination token named NextToken. You can specify this NextToken value in a subsequent call to ListDataSources to list the next set of data sources.
    ///   - projectIdentifier: The identifier of the project in which to list data sources.
    ///   - status: The status of the data source.
    ///   - type: The type of the data source.
    ///   - logger: Logger use during operation
    @inlinable
    public func listDataSources(
        connectionIdentifier: String? = nil,
        domainIdentifier: String,
        environmentIdentifier: String? = nil,
        maxResults: Int? = nil,
        name: String? = nil,
        nextToken: String? = nil,
        projectIdentifier: String,
        status: DataSourceStatus? = nil,
        type: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> ListDataSourcesOutput {
        let input = ListDataSourcesInput(
            connectionIdentifier: connectionIdentifier, 
            domainIdentifier: domainIdentifier, 
            environmentIdentifier: environmentIdentifier, 
            maxResults: maxResults, 
            name: name, 
            nextToken: nextToken, 
            projectIdentifier: projectIdentifier, 
            status: status, 
            type: type
        )
        return try await self.listDataSources(input, logger: logger)
    }

    /// Lists child domain units for the specified parent domain unit.
    @Sendable
    @inlinable
    public func listDomainUnitsForParent(_ input: ListDomainUnitsForParentInput, logger: Logger = AWSClient.loggingDisabled) async throws -> ListDomainUnitsForParentOutput {
        try await self.client.execute(
            operation: "ListDomainUnitsForParent", 
            path: "/v2/domains/{domainIdentifier}/domain-units", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Lists child domain units for the specified parent domain unit.
    ///
    /// Parameters:
    ///   - domainIdentifier: The ID of the domain in which you want to list domain units for a parent domain unit.
    ///   - maxResults: The maximum number of domain units to return in a single call to ListDomainUnitsForParent. When the number of domain units to be listed is greater than the value of MaxResults, the response contains a NextToken value that you can use in a subsequent call to ListDomainUnitsForParent to list the next set of domain units.
    ///   - nextToken: When the number of domain units is greater than the default value for the MaxResults parameter, or if you explicitly specify a value for MaxResults that is less than the number of domain units, the response includes a pagination token named NextToken. You can specify this NextToken value in a subsequent call to ListDomainUnitsForParent to list the next set of domain units.
    ///   - parentDomainUnitIdentifier: The ID of the parent domain unit.
    ///   - logger: Logger use during operation
    @inlinable
    public func listDomainUnitsForParent(
        domainIdentifier: String,
        maxResults: Int? = nil,
        nextToken: String? = nil,
        parentDomainUnitIdentifier: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> ListDomainUnitsForParentOutput {
        let input = ListDomainUnitsForParentInput(
            domainIdentifier: domainIdentifier, 
            maxResults: maxResults, 
            nextToken: nextToken, 
            parentDomainUnitIdentifier: parentDomainUnitIdentifier
        )
        return try await self.listDomainUnitsForParent(input, logger: logger)
    }

    /// Lists Amazon DataZone domains.
    @Sendable
    @inlinable
    public func listDomains(_ input: ListDomainsInput, logger: Logger = AWSClient.loggingDisabled) async throws -> ListDomainsOutput {
        try await self.client.execute(
            operation: "ListDomains", 
            path: "/v2/domains", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Lists Amazon DataZone domains.
    ///
    /// Parameters:
    ///   - maxResults: The maximum number of domains to return in a single call to ListDomains. When the number of domains to be listed is greater than the value of MaxResults, the response contains a NextToken value that you can use in a subsequent call to ListDomains to list the next set of domains.
    ///   - nextToken: When the number of domains is greater than the default value for the MaxResults parameter, or if you explicitly specify a value for MaxResults that is less than the number of domains, the response includes a pagination token named NextToken. You can specify this NextToken value in a subsequent call to ListDomains to list the next set of domains.
    ///   - status: The status of the data source.
    ///   - logger: Logger use during operation
    @inlinable
    public func listDomains(
        maxResults: Int? = nil,
        nextToken: String? = nil,
        status: DomainStatus? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> ListDomainsOutput {
        let input = ListDomainsInput(
            maxResults: maxResults, 
            nextToken: nextToken, 
            status: status
        )
        return try await self.listDomains(input, logger: logger)
    }

    /// Lists the entity (domain units) owners.
    @Sendable
    @inlinable
    public func listEntityOwners(_ input: ListEntityOwnersInput, logger: Logger = AWSClient.loggingDisabled) async throws -> ListEntityOwnersOutput {
        try await self.client.execute(
            operation: "ListEntityOwners", 
            path: "/v2/domains/{domainIdentifier}/entities/{entityType}/{entityIdentifier}/owners", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Lists the entity (domain units) owners.
    ///
    /// Parameters:
    ///   - domainIdentifier: The ID of the domain where you want to list entity owners.
    ///   - entityIdentifier: The ID of the entity that you want to list.
    ///   - entityType: The type of the entity that you want to list.
    ///   - maxResults: The maximum number of entities to return in a single call to ListEntityOwners. When the number of entities to be listed is greater than the value of MaxResults, the response contains a NextToken value that you can use in a subsequent call to ListEntityOwners to list the next set of entities.
    ///   - nextToken: When the number of entities is greater than the default value for the MaxResults parameter, or if you explicitly specify a value for MaxResults that is less than the number of entities, the response includes a pagination token named NextToken. You can specify this NextToken value in a subsequent call to ListEntityOwners to list the next set of entities.
    ///   - logger: Logger use during operation
    @inlinable
    public func listEntityOwners(
        domainIdentifier: String,
        entityIdentifier: String,
        entityType: DataZoneEntityType,
        maxResults: Int? = nil,
        nextToken: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> ListEntityOwnersOutput {
        let input = ListEntityOwnersInput(
            domainIdentifier: domainIdentifier, 
            entityIdentifier: entityIdentifier, 
            entityType: entityType, 
            maxResults: maxResults, 
            nextToken: nextToken
        )
        return try await self.listEntityOwners(input, logger: logger)
    }

    /// Lists existing environment actions.
    @Sendable
    @inlinable
    public func listEnvironmentActions(_ input: ListEnvironmentActionsInput, logger: Logger = AWSClient.loggingDisabled) async throws -> ListEnvironmentActionsOutput {
        try await self.client.execute(
            operation: "ListEnvironmentActions", 
            path: "/v2/domains/{domainIdentifier}/environments/{environmentIdentifier}/actions", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Lists existing environment actions.
    ///
    /// Parameters:
    ///   - domainIdentifier: The ID of the Amazon DataZone domain in which the environment actions are listed.
    ///   - environmentIdentifier: The ID of the envrironment whose environment actions are listed.
    ///   - maxResults: The maximum number of environment actions to return in a single call to ListEnvironmentActions. When the number of environment actions to be listed is greater than the value of MaxResults, the response contains a NextToken value that you can use in a subsequent call to ListEnvironmentActions to list the next set of environment actions.
    ///   - nextToken: When the number of environment actions is greater than the default value for the MaxResults parameter, or if you explicitly specify a value for MaxResults that is less than the number of environment actions, the response includes a pagination token named NextToken. You can specify this NextToken value in a subsequent call to ListEnvironmentActions to list the next set of environment actions.
    ///   - logger: Logger use during operation
    @inlinable
    public func listEnvironmentActions(
        domainIdentifier: String,
        environmentIdentifier: String,
        maxResults: Int? = nil,
        nextToken: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> ListEnvironmentActionsOutput {
        let input = ListEnvironmentActionsInput(
            domainIdentifier: domainIdentifier, 
            environmentIdentifier: environmentIdentifier, 
            maxResults: maxResults, 
            nextToken: nextToken
        )
        return try await self.listEnvironmentActions(input, logger: logger)
    }

    /// Lists blueprint configurations for a Amazon DataZone environment.
    @Sendable
    @inlinable
    public func listEnvironmentBlueprintConfigurations(_ input: ListEnvironmentBlueprintConfigurationsInput, logger: Logger = AWSClient.loggingDisabled) async throws -> ListEnvironmentBlueprintConfigurationsOutput {
        try await self.client.execute(
            operation: "ListEnvironmentBlueprintConfigurations", 
            path: "/v2/domains/{domainIdentifier}/environment-blueprint-configurations", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Lists blueprint configurations for a Amazon DataZone environment.
    ///
    /// Parameters:
    ///   - domainIdentifier: The identifier of the Amazon DataZone domain.
    ///   - maxResults: The maximum number of blueprint configurations to return in a single call to ListEnvironmentBlueprintConfigurations. When the number of configurations to be listed is greater than the value of MaxResults, the response contains a NextToken value that you can use in a subsequent call to ListEnvironmentBlueprintConfigurations to list the next set of configurations.
    ///   - nextToken: When the number of blueprint configurations is greater than the default value for the MaxResults parameter, or if you explicitly specify a value for MaxResults that is less than the number of configurations, the response includes a pagination token named NextToken. You can specify this NextToken value in a subsequent call to ListEnvironmentBlueprintConfigurations to list the next set of configurations.
    ///   - logger: Logger use during operation
    @inlinable
    public func listEnvironmentBlueprintConfigurations(
        domainIdentifier: String,
        maxResults: Int? = nil,
        nextToken: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> ListEnvironmentBlueprintConfigurationsOutput {
        let input = ListEnvironmentBlueprintConfigurationsInput(
            domainIdentifier: domainIdentifier, 
            maxResults: maxResults, 
            nextToken: nextToken
        )
        return try await self.listEnvironmentBlueprintConfigurations(input, logger: logger)
    }

    /// Lists blueprints in an Amazon DataZone environment.
    @Sendable
    @inlinable
    public func listEnvironmentBlueprints(_ input: ListEnvironmentBlueprintsInput, logger: Logger = AWSClient.loggingDisabled) async throws -> ListEnvironmentBlueprintsOutput {
        try await self.client.execute(
            operation: "ListEnvironmentBlueprints", 
            path: "/v2/domains/{domainIdentifier}/environment-blueprints", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Lists blueprints in an Amazon DataZone environment.
    ///
    /// Parameters:
    ///   - domainIdentifier: The identifier of the Amazon DataZone domain.
    ///   - managed: Specifies whether the environment blueprint is managed by Amazon DataZone.
    ///   - maxResults: The maximum number of blueprints to return in a single call to ListEnvironmentBlueprints. When the number of blueprints to be listed is greater than the value of MaxResults, the response contains a NextToken value that you can use in a subsequent call to ListEnvironmentBlueprints to list the next set of blueprints.
    ///   - name: The name of the Amazon DataZone environment.
    ///   - nextToken: When the number of blueprints in the environment is greater than the default value for the MaxResults parameter, or if you explicitly specify a value for MaxResults that is less than the number of blueprints in the environment, the response includes a pagination token named NextToken. You can specify this NextToken value in a subsequent call to ListEnvironmentBlueprintsto list the next set of blueprints.
    ///   - logger: Logger use during operation
    @inlinable
    public func listEnvironmentBlueprints(
        domainIdentifier: String,
        managed: Bool? = nil,
        maxResults: Int? = nil,
        name: String? = nil,
        nextToken: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> ListEnvironmentBlueprintsOutput {
        let input = ListEnvironmentBlueprintsInput(
            domainIdentifier: domainIdentifier, 
            managed: managed, 
            maxResults: maxResults, 
            name: name, 
            nextToken: nextToken
        )
        return try await self.listEnvironmentBlueprints(input, logger: logger)
    }

    /// Lists Amazon DataZone environment profiles.
    @Sendable
    @inlinable
    public func listEnvironmentProfiles(_ input: ListEnvironmentProfilesInput, logger: Logger = AWSClient.loggingDisabled) async throws -> ListEnvironmentProfilesOutput {
        try await self.client.execute(
            operation: "ListEnvironmentProfiles", 
            path: "/v2/domains/{domainIdentifier}/environment-profiles", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Lists Amazon DataZone environment profiles.
    ///
    /// Parameters:
    ///   - awsAccountId: The identifier of the Amazon Web Services account where you want to list environment profiles.
    ///   - awsAccountRegion: The Amazon Web Services region where you want to list environment profiles.
    ///   - domainIdentifier: The identifier of the Amazon DataZone domain.
    ///   - environmentBlueprintIdentifier: The identifier of the blueprint that was used to create the environment profiles that you want to list.
    ///   - maxResults: The maximum number of environment profiles to return in a single call to ListEnvironmentProfiles. When the number of environment profiles to be listed is greater than the value of MaxResults, the response contains a NextToken value that you can use in a subsequent call to ListEnvironmentProfiles to list the next set of environment profiles.
    ///   - name: 
    ///   - nextToken: When the number of environment profiles is greater than the default value for the MaxResults parameter, or if you explicitly specify a value for MaxResults that is less than the number of environment profiles, the response includes a pagination token named NextToken. You can specify this NextToken value in a subsequent call to ListEnvironmentProfiles to list the next set of environment profiles.
    ///   - projectIdentifier: The identifier of the Amazon DataZone project.
    ///   - logger: Logger use during operation
    @inlinable
    public func listEnvironmentProfiles(
        awsAccountId: String? = nil,
        awsAccountRegion: String? = nil,
        domainIdentifier: String,
        environmentBlueprintIdentifier: String? = nil,
        maxResults: Int? = nil,
        name: String? = nil,
        nextToken: String? = nil,
        projectIdentifier: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> ListEnvironmentProfilesOutput {
        let input = ListEnvironmentProfilesInput(
            awsAccountId: awsAccountId, 
            awsAccountRegion: awsAccountRegion, 
            domainIdentifier: domainIdentifier, 
            environmentBlueprintIdentifier: environmentBlueprintIdentifier, 
            maxResults: maxResults, 
            name: name, 
            nextToken: nextToken, 
            projectIdentifier: projectIdentifier
        )
        return try await self.listEnvironmentProfiles(input, logger: logger)
    }

    /// Lists Amazon DataZone environments.
    @Sendable
    @inlinable
    public func listEnvironments(_ input: ListEnvironmentsInput, logger: Logger = AWSClient.loggingDisabled) async throws -> ListEnvironmentsOutput {
        try await self.client.execute(
            operation: "ListEnvironments", 
            path: "/v2/domains/{domainIdentifier}/environments", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Lists Amazon DataZone environments.
    ///
    /// Parameters:
    ///   - awsAccountId: The identifier of the Amazon Web Services account where you want to list environments.
    ///   - awsAccountRegion: The Amazon Web Services region where you want to list environments.
    ///   - domainIdentifier: The identifier of the Amazon DataZone domain.
    ///   - environmentBlueprintIdentifier: The identifier of the Amazon DataZone blueprint.
    ///   - environmentProfileIdentifier: The identifier of the environment profile.
    ///   - maxResults: The maximum number of environments to return in a single call to ListEnvironments. When the number of environments to be listed is greater than the value of MaxResults, the response contains a NextToken value that you can use in a subsequent call to ListEnvironments to list the next set of environments.
    ///   - name: The name of the environment.
    ///   - nextToken: When the number of environments is greater than the default value for the MaxResults parameter, or if you explicitly specify a value for MaxResults that is less than the number of environments, the response includes a pagination token named NextToken. You can specify this NextToken value in a subsequent call to ListEnvironments to list the next set of environments.
    ///   - projectIdentifier: The identifier of the Amazon DataZone project.
    ///   - provider: The provider of the environment.
    ///   - status: The status of the environments that you want to list.
    ///   - logger: Logger use during operation
    @inlinable
    public func listEnvironments(
        awsAccountId: String? = nil,
        awsAccountRegion: String? = nil,
        domainIdentifier: String,
        environmentBlueprintIdentifier: String? = nil,
        environmentProfileIdentifier: String? = nil,
        maxResults: Int? = nil,
        name: String? = nil,
        nextToken: String? = nil,
        projectIdentifier: String,
        provider: String? = nil,
        status: EnvironmentStatus? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> ListEnvironmentsOutput {
        let input = ListEnvironmentsInput(
            awsAccountId: awsAccountId, 
            awsAccountRegion: awsAccountRegion, 
            domainIdentifier: domainIdentifier, 
            environmentBlueprintIdentifier: environmentBlueprintIdentifier, 
            environmentProfileIdentifier: environmentProfileIdentifier, 
            maxResults: maxResults, 
            name: name, 
            nextToken: nextToken, 
            projectIdentifier: projectIdentifier, 
            provider: provider, 
            status: status
        )
        return try await self.listEnvironments(input, logger: logger)
    }

    /// Lists job runs.
    @Sendable
    @inlinable
    public func listJobRuns(_ input: ListJobRunsInput, logger: Logger = AWSClient.loggingDisabled) async throws -> ListJobRunsOutput {
        try await self.client.execute(
            operation: "ListJobRuns", 
            path: "/v2/domains/{domainIdentifier}/jobs/{jobIdentifier}/runs", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Lists job runs.
    ///
    /// Parameters:
    ///   - domainIdentifier: The ID of the domain where you want to list job runs.
    ///   - jobIdentifier: The ID of the job run.
    ///   - maxResults: The maximum number of job runs to return in a single call to ListJobRuns. When the number of job runs to be listed is greater than the value of MaxResults, the response contains a NextToken value that you can use in a subsequent call to ListJobRuns to list the next set of job runs.
    ///   - nextToken: When the number of job runs is greater than the default value for the MaxResults parameter, or if you explicitly specify a value for MaxResults that is less than the number of job runs, the response includes a pagination token named NextToken. You can specify this NextToken value in a subsequent call to ListJobRuns to list the next set of job runs.
    ///   - sortOrder: Specifies the order in which job runs are to be sorted.
    ///   - status: The status of a job run.
    ///   - logger: Logger use during operation
    @inlinable
    public func listJobRuns(
        domainIdentifier: String,
        jobIdentifier: String,
        maxResults: Int? = nil,
        nextToken: String? = nil,
        sortOrder: SortOrder? = nil,
        status: JobRunStatus? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> ListJobRunsOutput {
        let input = ListJobRunsInput(
            domainIdentifier: domainIdentifier, 
            jobIdentifier: jobIdentifier, 
            maxResults: maxResults, 
            nextToken: nextToken, 
            sortOrder: sortOrder, 
            status: status
        )
        return try await self.listJobRuns(input, logger: logger)
    }

    /// Lists lineage events.
    @Sendable
    @inlinable
    public func listLineageEvents(_ input: ListLineageEventsInput, logger: Logger = AWSClient.loggingDisabled) async throws -> ListLineageEventsOutput {
        try await self.client.execute(
            operation: "ListLineageEvents", 
            path: "/v2/domains/{domainIdentifier}/lineage/events", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Lists lineage events.
    ///
    /// Parameters:
    ///   - domainIdentifier: The ID of the domain where you want to list lineage events.
    ///   - maxResults: The maximum number of lineage events to return in a single call to ListLineageEvents. When the number of lineage events to be listed is greater than the value of MaxResults, the response contains a NextToken value that you can use in a subsequent call to ListLineageEvents to list the next set of lineage events.
    ///   - nextToken: When the number of lineage events is greater than the default value for the MaxResults parameter, or if you explicitly specify a value for MaxResults that is less than the number of lineage events, the response includes a pagination token named NextToken. You can specify this NextToken value in a subsequent call to ListLineageEvents to list the next set of lineage events.
    ///   - processingStatus: The processing status of a lineage event.
    ///   - sortOrder: The sort order of the lineage events.
    ///   - timestampAfter: The after timestamp of a lineage event.
    ///   - timestampBefore: The before timestamp of a lineage event.
    ///   - logger: Logger use during operation
    @inlinable
    public func listLineageEvents(
        domainIdentifier: String,
        maxResults: Int? = nil,
        nextToken: String? = nil,
        processingStatus: LineageEventProcessingStatus? = nil,
        sortOrder: SortOrder? = nil,
        timestampAfter: Date? = nil,
        timestampBefore: Date? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> ListLineageEventsOutput {
        let input = ListLineageEventsInput(
            domainIdentifier: domainIdentifier, 
            maxResults: maxResults, 
            nextToken: nextToken, 
            processingStatus: processingStatus, 
            sortOrder: sortOrder, 
            timestampAfter: timestampAfter, 
            timestampBefore: timestampBefore
        )
        return try await self.listLineageEvents(input, logger: logger)
    }

    /// Lists the history of the specified data lineage node.
    @Sendable
    @inlinable
    public func listLineageNodeHistory(_ input: ListLineageNodeHistoryInput, logger: Logger = AWSClient.loggingDisabled) async throws -> ListLineageNodeHistoryOutput {
        try await self.client.execute(
            operation: "ListLineageNodeHistory", 
            path: "/v2/domains/{domainIdentifier}/lineage/nodes/{identifier}/history", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Lists the history of the specified data lineage node.
    ///
    /// Parameters:
    ///   - direction: The direction of the data lineage node refers to the lineage node having neighbors in that direction. For example, if direction is UPSTREAM, the ListLineageNodeHistory API responds with historical versions with upstream neighbors only.
    ///   - domainIdentifier: The ID of the domain where you want to list the history of the specified data lineage node.
    ///   - eventTimestampGTE: Specifies whether the action is to return data lineage node history from the time after the event timestamp.
    ///   - eventTimestampLTE: Specifies whether the action is to return data lineage node history from the time prior of the event timestamp.
    ///   - identifier: The ID of the data lineage node whose history you want to list.
    ///   - maxResults: The maximum number of history items to return in a single call to ListLineageNodeHistory. When the number of memberships to be listed is greater than the value of MaxResults, the response contains a NextToken value that you can use in a subsequent call to ListLineageNodeHistory to list the next set of items.
    ///   - nextToken: When the number of history items is greater than the default value for the MaxResults parameter, or if you explicitly specify a value for MaxResults that is less than the number of items, the response includes a pagination token named NextToken. You can specify this NextToken value in a subsequent call to ListLineageNodeHistory to list the next set of items.
    ///   - sortOrder: The order by which you want data lineage node history to be sorted.
    ///   - logger: Logger use during operation
    @inlinable
    public func listLineageNodeHistory(
        direction: EdgeDirection? = nil,
        domainIdentifier: String,
        eventTimestampGTE: Date? = nil,
        eventTimestampLTE: Date? = nil,
        identifier: String,
        maxResults: Int? = nil,
        nextToken: String? = nil,
        sortOrder: SortOrder? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> ListLineageNodeHistoryOutput {
        let input = ListLineageNodeHistoryInput(
            direction: direction, 
            domainIdentifier: domainIdentifier, 
            eventTimestampGTE: eventTimestampGTE, 
            eventTimestampLTE: eventTimestampLTE, 
            identifier: identifier, 
            maxResults: maxResults, 
            nextToken: nextToken, 
            sortOrder: sortOrder
        )
        return try await self.listLineageNodeHistory(input, logger: logger)
    }

    /// Lists all metadata generation runs.
    @Sendable
    @inlinable
    public func listMetadataGenerationRuns(_ input: ListMetadataGenerationRunsInput, logger: Logger = AWSClient.loggingDisabled) async throws -> ListMetadataGenerationRunsOutput {
        try await self.client.execute(
            operation: "ListMetadataGenerationRuns", 
            path: "/v2/domains/{domainIdentifier}/metadata-generation-runs", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Lists all metadata generation runs.
    ///
    /// Parameters:
    ///   - domainIdentifier: The ID of the Amazon DataZone domain where you want to list metadata generation runs.
    ///   - maxResults: The maximum number of metadata generation runs to return in a single call to ListMetadataGenerationRuns. When the number of metadata generation runs to be listed is greater than the value of MaxResults, the response contains a NextToken value that you can use in a subsequent call to ListMetadataGenerationRuns to list the next set of revisions.
    ///   - nextToken: When the number of metadata generation runs is greater than the default value for the MaxResults parameter, or if you explicitly specify a value for MaxResults that is less than the number of metadata generation runs, the response includes a pagination token named NextToken. You can specify this NextToken value in a subsequent call to ListMetadataGenerationRuns to list the next set of revisions.
    ///   - status: The status of the metadata generation runs.
    ///   - type: The type of the metadata generation runs.
    ///   - logger: Logger use during operation
    @inlinable
    public func listMetadataGenerationRuns(
        domainIdentifier: String,
        maxResults: Int? = nil,
        nextToken: String? = nil,
        status: MetadataGenerationRunStatus? = nil,
        type: MetadataGenerationRunType? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> ListMetadataGenerationRunsOutput {
        let input = ListMetadataGenerationRunsInput(
            domainIdentifier: domainIdentifier, 
            maxResults: maxResults, 
            nextToken: nextToken, 
            status: status, 
            type: type
        )
        return try await self.listMetadataGenerationRuns(input, logger: logger)
    }

    /// Lists all Amazon DataZone notifications.
    @Sendable
    @inlinable
    public func listNotifications(_ input: ListNotificationsInput, logger: Logger = AWSClient.loggingDisabled) async throws -> ListNotificationsOutput {
        try await self.client.execute(
            operation: "ListNotifications", 
            path: "/v2/domains/{domainIdentifier}/notifications", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Lists all Amazon DataZone notifications.
    ///
    /// Parameters:
    ///   - afterTimestamp: The time after which you want to list notifications.
    ///   - beforeTimestamp: The time before which you want to list notifications.
    ///   - domainIdentifier: The identifier of the Amazon DataZone domain.
    ///   - maxResults: The maximum number of notifications to return in a single call to ListNotifications. When the number of notifications to be listed is greater than the value of MaxResults, the response contains a NextToken value that you can use in a subsequent call to ListNotifications to list the next set of notifications.
    ///   - nextToken: When the number of notifications is greater than the default value for the MaxResults parameter, or if you explicitly specify a value for MaxResults that is less than the number of notifications, the response includes a pagination token named NextToken. You can specify this NextToken value in a subsequent call to ListNotifications to list the next set of notifications.
    ///   - subjects: The subjects of notifications.
    ///   - taskStatus: The task status of notifications.
    ///   - type: The type of notifications.
    ///   - logger: Logger use during operation
    @inlinable
    public func listNotifications(
        afterTimestamp: Date? = nil,
        beforeTimestamp: Date? = nil,
        domainIdentifier: String,
        maxResults: Int? = nil,
        nextToken: String? = nil,
        subjects: [String]? = nil,
        taskStatus: TaskStatus? = nil,
        type: NotificationType,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> ListNotificationsOutput {
        let input = ListNotificationsInput(
            afterTimestamp: afterTimestamp, 
            beforeTimestamp: beforeTimestamp, 
            domainIdentifier: domainIdentifier, 
            maxResults: maxResults, 
            nextToken: nextToken, 
            subjects: subjects, 
            taskStatus: taskStatus, 
            type: type
        )
        return try await self.listNotifications(input, logger: logger)
    }

    /// Lists policy grants.
    @Sendable
    @inlinable
    public func listPolicyGrants(_ input: ListPolicyGrantsInput, logger: Logger = AWSClient.loggingDisabled) async throws -> ListPolicyGrantsOutput {
        try await self.client.execute(
            operation: "ListPolicyGrants", 
            path: "/v2/domains/{domainIdentifier}/policies/managed/{entityType}/{entityIdentifier}/grants", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Lists policy grants.
    ///
    /// Parameters:
    ///   - domainIdentifier: The ID of the domain where you want to list policy grants.
    ///   - entityIdentifier: The ID of the entity for which you want to list policy grants.
    ///   - entityType: The type of entity for which you want to list policy grants.
    ///   - maxResults: The maximum number of grants to return in a single call to ListPolicyGrants. When the number of grants to be listed is greater than the value of MaxResults, the response contains a NextToken value that you can use in a subsequent call to ListPolicyGrants to list the next set of grants.
    ///   - nextToken: When the number of grants is greater than the default value for the MaxResults parameter, or if you explicitly specify a value for MaxResults that is less than the number of grants, the response includes a pagination token named NextToken. You can specify this NextToken value in a subsequent call to ListPolicyGrants to list the next set of grants.
    ///   - policyType: The type of policy that you want to list.
    ///   - logger: Logger use during operation
    @inlinable
    public func listPolicyGrants(
        domainIdentifier: String,
        entityIdentifier: String,
        entityType: TargetEntityType,
        maxResults: Int? = nil,
        nextToken: String? = nil,
        policyType: ManagedPolicyType,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> ListPolicyGrantsOutput {
        let input = ListPolicyGrantsInput(
            domainIdentifier: domainIdentifier, 
            entityIdentifier: entityIdentifier, 
            entityType: entityType, 
            maxResults: maxResults, 
            nextToken: nextToken, 
            policyType: policyType
        )
        return try await self.listPolicyGrants(input, logger: logger)
    }

    /// Lists all members of the specified project.
    @Sendable
    @inlinable
    public func listProjectMemberships(_ input: ListProjectMembershipsInput, logger: Logger = AWSClient.loggingDisabled) async throws -> ListProjectMembershipsOutput {
        try await self.client.execute(
            operation: "ListProjectMemberships", 
            path: "/v2/domains/{domainIdentifier}/projects/{projectIdentifier}/memberships", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Lists all members of the specified project.
    ///
    /// Parameters:
    ///   - domainIdentifier: The identifier of the Amazon DataZone domain in which you want to list project memberships.
    ///   - maxResults: The maximum number of memberships to return in a single call to ListProjectMemberships. When the number of memberships to be listed is greater than the value of MaxResults, the response contains a NextToken value that you can use in a subsequent call to ListProjectMemberships to list the next set of memberships.
    ///   - nextToken: When the number of memberships is greater than the default value for the MaxResults parameter, or if you explicitly specify a value for MaxResults that is less than the number of memberships, the response includes a pagination token named NextToken. You can specify this NextToken value in a subsequent call to ListProjectMemberships to list the next set of memberships.
    ///   - projectIdentifier: The identifier of the project whose memberships you want to list.
    ///   - sortBy: The method by which you want to sort the project memberships.
    ///   - sortOrder: The sort order of the project memberships.
    ///   - logger: Logger use during operation
    @inlinable
    public func listProjectMemberships(
        domainIdentifier: String,
        maxResults: Int? = nil,
        nextToken: String? = nil,
        projectIdentifier: String,
        sortBy: SortFieldProject? = nil,
        sortOrder: SortOrder? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> ListProjectMembershipsOutput {
        let input = ListProjectMembershipsInput(
            domainIdentifier: domainIdentifier, 
            maxResults: maxResults, 
            nextToken: nextToken, 
            projectIdentifier: projectIdentifier, 
            sortBy: sortBy, 
            sortOrder: sortOrder
        )
        return try await self.listProjectMemberships(input, logger: logger)
    }

    /// Lists project profiles.
    @Sendable
    @inlinable
    public func listProjectProfiles(_ input: ListProjectProfilesInput, logger: Logger = AWSClient.loggingDisabled) async throws -> ListProjectProfilesOutput {
        try await self.client.execute(
            operation: "ListProjectProfiles", 
            path: "/v2/domains/{domainIdentifier}/project-profiles", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Lists project profiles.
    ///
    /// Parameters:
    ///   - domainIdentifier: The ID of the domain where you want to list project profiles.
    ///   - maxResults: The maximum number of project profiles to return in a single call to ListProjectProfiles. When the number of project profiles to be listed is greater than the value of MaxResults, the response contains a NextToken value that you can use in a subsequent call to ListProjectProfiles to list the next set of project profiles.
    ///   - name: The name of a project profile.
    ///   - nextToken: When the number of project profiles is greater than the default value for the MaxResults parameter, or if you explicitly specify a value for MaxResults that is less than the number of project profiles, the response includes a pagination token named NextToken. You can specify this NextToken value in a subsequent call to ListProjectProfiles to list the next set of project profiles.
    ///   - sortBy: Specifies by what to sort project profiles.
    ///   - sortOrder: Specifies the sort order of the project profiles.
    ///   - logger: Logger use during operation
    @inlinable
    public func listProjectProfiles(
        domainIdentifier: String,
        maxResults: Int? = nil,
        name: String? = nil,
        nextToken: String? = nil,
        sortBy: SortFieldProject? = nil,
        sortOrder: SortOrder? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> ListProjectProfilesOutput {
        let input = ListProjectProfilesInput(
            domainIdentifier: domainIdentifier, 
            maxResults: maxResults, 
            name: name, 
            nextToken: nextToken, 
            sortBy: sortBy, 
            sortOrder: sortOrder
        )
        return try await self.listProjectProfiles(input, logger: logger)
    }

    /// Lists Amazon DataZone projects.
    @Sendable
    @inlinable
    public func listProjects(_ input: ListProjectsInput, logger: Logger = AWSClient.loggingDisabled) async throws -> ListProjectsOutput {
        try await self.client.execute(
            operation: "ListProjects", 
            path: "/v2/domains/{domainIdentifier}/projects", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Lists Amazon DataZone projects.
    ///
    /// Parameters:
    ///   - domainIdentifier: The identifier of the Amazon DataZone domain.
    ///   - groupIdentifier: The identifier of a group.
    ///   - maxResults: The maximum number of projects to return in a single call to ListProjects. When the number of projects to be listed is greater than the value of MaxResults, the response contains a NextToken value that you can use in a subsequent call to ListProjects to list the next set of projects.
    ///   - name: The name of the project.
    ///   - nextToken: When the number of projects is greater than the default value for the MaxResults parameter, or if you explicitly specify a value for MaxResults that is less than the number of projects, the response includes a pagination token named NextToken. You can specify this NextToken value in a subsequent call to ListProjects to list the next set of projects.
    ///   - userIdentifier: The identifier of the Amazon DataZone user.
    ///   - logger: Logger use during operation
    @inlinable
    public func listProjects(
        domainIdentifier: String,
        groupIdentifier: String? = nil,
        maxResults: Int? = nil,
        name: String? = nil,
        nextToken: String? = nil,
        userIdentifier: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> ListProjectsOutput {
        let input = ListProjectsInput(
            domainIdentifier: domainIdentifier, 
            groupIdentifier: groupIdentifier, 
            maxResults: maxResults, 
            name: name, 
            nextToken: nextToken, 
            userIdentifier: userIdentifier
        )
        return try await self.listProjects(input, logger: logger)
    }

    /// Lists existing rules. In Amazon DataZone, a rule is a formal agreement that enforces specific requirements across user workflows (e.g., publishing assets to the catalog, requesting subscriptions, creating projects) within the Amazon DataZone data portal. These rules help maintain consistency, ensure compliance, and uphold governance standards in data management processes. For instance, a metadata enforcement rule can specify the required information for creating a subscription request or publishing a data asset to the catalog, ensuring alignment with organizational standards.
    @Sendable
    @inlinable
    public func listRules(_ input: ListRulesInput, logger: Logger = AWSClient.loggingDisabled) async throws -> ListRulesOutput {
        try await self.client.execute(
            operation: "ListRules", 
            path: "/v2/domains/{domainIdentifier}/list-rules/{targetType}/{targetIdentifier}", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Lists existing rules. In Amazon DataZone, a rule is a formal agreement that enforces specific requirements across user workflows (e.g., publishing assets to the catalog, requesting subscriptions, creating projects) within the Amazon DataZone data portal. These rules help maintain consistency, ensure compliance, and uphold governance standards in data management processes. For instance, a metadata enforcement rule can specify the required information for creating a subscription request or publishing a data asset to the catalog, ensuring alignment with organizational standards.
    ///
    /// Parameters:
    ///   - action: The action of the rule.
    ///   - assetTypes: The asset types of the rule.
    ///   - dataProduct: The data product of the rule.
    ///   - domainIdentifier: The ID of the domain in which the rules are to be listed.
    ///   - includeCascaded: Specifies whether to include cascading rules in the results.
    ///   - maxResults: The maximum number of rules to return in a single call to ListRules. When the number of rules to be listed is greater than the value of MaxResults, the response contains a NextToken value that you can use in a subsequent call to ListRules to list the next set of rules.
    ///   - nextToken: When the number of rules is greater than the default value for the MaxResults parameter, or if you explicitly specify a value for MaxResults that is less than the number of rules, the response includes a pagination token named NextToken. You can specify this NextToken value in a subsequent call to ListRules to list the next set of rules.
    ///   - projectIds: The IDs of projects in which rules are to be listed.
    ///   - ruleType: The type of the rule.
    ///   - targetIdentifier: The target ID of the rule.
    ///   - targetType: The target type of the rule.
    ///   - logger: Logger use during operation
    @inlinable
    public func listRules(
        action: RuleAction? = nil,
        assetTypes: [String]? = nil,
        dataProduct: Bool? = nil,
        domainIdentifier: String,
        includeCascaded: Bool? = nil,
        maxResults: Int? = nil,
        nextToken: String? = nil,
        projectIds: [String]? = nil,
        ruleType: RuleType? = nil,
        targetIdentifier: String,
        targetType: RuleTargetType,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> ListRulesOutput {
        let input = ListRulesInput(
            action: action, 
            assetTypes: assetTypes, 
            dataProduct: dataProduct, 
            domainIdentifier: domainIdentifier, 
            includeCascaded: includeCascaded, 
            maxResults: maxResults, 
            nextToken: nextToken, 
            projectIds: projectIds, 
            ruleType: ruleType, 
            targetIdentifier: targetIdentifier, 
            targetType: targetType
        )
        return try await self.listRules(input, logger: logger)
    }

    /// Lists subscription grants.
    @Sendable
    @inlinable
    public func listSubscriptionGrants(_ input: ListSubscriptionGrantsInput, logger: Logger = AWSClient.loggingDisabled) async throws -> ListSubscriptionGrantsOutput {
        try await self.client.execute(
            operation: "ListSubscriptionGrants", 
            path: "/v2/domains/{domainIdentifier}/subscription-grants", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Lists subscription grants.
    ///
    /// Parameters:
    ///   - domainIdentifier: The identifier of the Amazon DataZone domain.
    ///   - environmentId: The identifier of the Amazon DataZone environment.
    ///   - maxResults: The maximum number of subscription grants to return in a single call to ListSubscriptionGrants. When the number of subscription grants to be listed is greater than the value of MaxResults, the response contains a NextToken value that you can use in a subsequent call to ListSubscriptionGrants to list the next set of subscription grants.
    ///   - nextToken: When the number of subscription grants is greater than the default value for the MaxResults parameter, or if you explicitly specify a value for MaxResults that is less than the number of subscription grants, the response includes a pagination token named NextToken. You can specify this NextToken value in a subsequent call to ListSubscriptionGrants to list the next set of subscription grants.
    ///   - owningProjectId: The ID of the owning project of the subscription grants.
    ///   - sortBy: Specifies the way of sorting the results of this action.
    ///   - sortOrder: Specifies the sort order of this action.
    ///   - subscribedListingId: The identifier of the subscribed listing.
    ///   - subscriptionId: The identifier of the subscription.
    ///   - subscriptionTargetId: The identifier of the subscription target.
    ///   - logger: Logger use during operation
    @inlinable
    public func listSubscriptionGrants(
        domainIdentifier: String,
        environmentId: String? = nil,
        maxResults: Int? = nil,
        nextToken: String? = nil,
        owningProjectId: String? = nil,
        sortBy: SortKey? = nil,
        sortOrder: SortOrder? = nil,
        subscribedListingId: String? = nil,
        subscriptionId: String? = nil,
        subscriptionTargetId: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> ListSubscriptionGrantsOutput {
        let input = ListSubscriptionGrantsInput(
            domainIdentifier: domainIdentifier, 
            environmentId: environmentId, 
            maxResults: maxResults, 
            nextToken: nextToken, 
            owningProjectId: owningProjectId, 
            sortBy: sortBy, 
            sortOrder: sortOrder, 
            subscribedListingId: subscribedListingId, 
            subscriptionId: subscriptionId, 
            subscriptionTargetId: subscriptionTargetId
        )
        return try await self.listSubscriptionGrants(input, logger: logger)
    }

    /// Lists Amazon DataZone subscription requests.
    @Sendable
    @inlinable
    public func listSubscriptionRequests(_ input: ListSubscriptionRequestsInput, logger: Logger = AWSClient.loggingDisabled) async throws -> ListSubscriptionRequestsOutput {
        try await self.client.execute(
            operation: "ListSubscriptionRequests", 
            path: "/v2/domains/{domainIdentifier}/subscription-requests", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Lists Amazon DataZone subscription requests.
    ///
    /// Parameters:
    ///   - approverProjectId: The identifier of the subscription request approver's project.
    ///   - domainIdentifier: The identifier of the Amazon DataZone domain.
    ///   - maxResults: The maximum number of subscription requests to return in a single call to ListSubscriptionRequests. When the number of subscription requests to be listed is greater than the value of MaxResults, the response contains a NextToken value that you can use in a subsequent call to ListSubscriptionRequests to list the next set of subscription requests.
    ///   - nextToken: When the number of subscription requests is greater than the default value for the MaxResults parameter, or if you explicitly specify a value for MaxResults that is less than the number of subscription requests, the response includes a pagination token named NextToken. You can specify this NextToken value in a subsequent call to ListSubscriptionRequests to list the next set of subscription requests.
    ///   - owningProjectId: The identifier of the project for the subscription requests.
    ///   - sortBy: Specifies the way to sort the results of this action.
    ///   - sortOrder: Specifies the sort order for the results of this action.
    ///   - status: Specifies the status of the subscription requests.  This is not a required parameter, but if not specified, by default, Amazon DataZone returns only PENDING subscription requests.
    ///   - subscribedListingId: The identifier of the subscribed listing.
    ///   - logger: Logger use during operation
    @inlinable
    public func listSubscriptionRequests(
        approverProjectId: String? = nil,
        domainIdentifier: String,
        maxResults: Int? = nil,
        nextToken: String? = nil,
        owningProjectId: String? = nil,
        sortBy: SortKey? = nil,
        sortOrder: SortOrder? = nil,
        status: SubscriptionRequestStatus? = nil,
        subscribedListingId: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> ListSubscriptionRequestsOutput {
        let input = ListSubscriptionRequestsInput(
            approverProjectId: approverProjectId, 
            domainIdentifier: domainIdentifier, 
            maxResults: maxResults, 
            nextToken: nextToken, 
            owningProjectId: owningProjectId, 
            sortBy: sortBy, 
            sortOrder: sortOrder, 
            status: status, 
            subscribedListingId: subscribedListingId
        )
        return try await self.listSubscriptionRequests(input, logger: logger)
    }

    /// Lists subscription targets in Amazon DataZone.
    @Sendable
    @inlinable
    public func listSubscriptionTargets(_ input: ListSubscriptionTargetsInput, logger: Logger = AWSClient.loggingDisabled) async throws -> ListSubscriptionTargetsOutput {
        try await self.client.execute(
            operation: "ListSubscriptionTargets", 
            path: "/v2/domains/{domainIdentifier}/environments/{environmentIdentifier}/subscription-targets", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Lists subscription targets in Amazon DataZone.
    ///
    /// Parameters:
    ///   - domainIdentifier: The identifier of the Amazon DataZone domain where you want to list subscription targets.
    ///   - environmentIdentifier: The identifier of the environment where you want to list subscription targets.
    ///   - maxResults: The maximum number of subscription targets to return in a single call to ListSubscriptionTargets. When the number of subscription targets to be listed is greater than the value of MaxResults, the response contains a NextToken value that you can use in a subsequent call to ListSubscriptionTargets to list the next set of subscription targets.
    ///   - nextToken: When the number of subscription targets is greater than the default value for the MaxResults parameter, or if you explicitly specify a value for MaxResults that is less than the number of subscription targets, the response includes a pagination token named NextToken. You can specify this NextToken value in a subsequent call to ListSubscriptionTargets to list the next set of subscription targets.
    ///   - sortBy: Specifies the way in which the results of this action are to be sorted.
    ///   - sortOrder: Specifies the sort order for the results of this action.
    ///   - logger: Logger use during operation
    @inlinable
    public func listSubscriptionTargets(
        domainIdentifier: String,
        environmentIdentifier: String,
        maxResults: Int? = nil,
        nextToken: String? = nil,
        sortBy: SortKey? = nil,
        sortOrder: SortOrder? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> ListSubscriptionTargetsOutput {
        let input = ListSubscriptionTargetsInput(
            domainIdentifier: domainIdentifier, 
            environmentIdentifier: environmentIdentifier, 
            maxResults: maxResults, 
            nextToken: nextToken, 
            sortBy: sortBy, 
            sortOrder: sortOrder
        )
        return try await self.listSubscriptionTargets(input, logger: logger)
    }

    /// Lists subscriptions in Amazon DataZone.
    @Sendable
    @inlinable
    public func listSubscriptions(_ input: ListSubscriptionsInput, logger: Logger = AWSClient.loggingDisabled) async throws -> ListSubscriptionsOutput {
        try await self.client.execute(
            operation: "ListSubscriptions", 
            path: "/v2/domains/{domainIdentifier}/subscriptions", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Lists subscriptions in Amazon DataZone.
    ///
    /// Parameters:
    ///   - approverProjectId: The identifier of the project for the subscription's approver.
    ///   - domainIdentifier: The identifier of the Amazon DataZone domain.
    ///   - maxResults: The maximum number of subscriptions to return in a single call to ListSubscriptions. When the number of subscriptions to be listed is greater than the value of MaxResults, the response contains a NextToken value that you can use in a subsequent call to ListSubscriptions to list the next set of Subscriptions.
    ///   - nextToken: When the number of subscriptions is greater than the default value for the MaxResults parameter, or if you explicitly specify a value for MaxResults that is less than the number of subscriptions, the response includes a pagination token named NextToken. You can specify this NextToken value in a subsequent call to ListSubscriptions to list the next set of subscriptions.
    ///   - owningProjectId: The identifier of the owning project.
    ///   - sortBy: Specifies the way in which the results of this action are to be sorted.
    ///   - sortOrder: Specifies the sort order for the results of this action.
    ///   - status: The status of the subscriptions that you want to list.  This is not a required parameter, but if not provided, by default, Amazon DataZone returns only APPROVED subscriptions.
    ///   - subscribedListingId: The identifier of the subscribed listing for the subscriptions that you want to list.
    ///   - subscriptionRequestIdentifier: The identifier of the subscription request for the subscriptions that you want to list.
    ///   - logger: Logger use during operation
    @inlinable
    public func listSubscriptions(
        approverProjectId: String? = nil,
        domainIdentifier: String,
        maxResults: Int? = nil,
        nextToken: String? = nil,
        owningProjectId: String? = nil,
        sortBy: SortKey? = nil,
        sortOrder: SortOrder? = nil,
        status: SubscriptionStatus? = nil,
        subscribedListingId: String? = nil,
        subscriptionRequestIdentifier: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> ListSubscriptionsOutput {
        let input = ListSubscriptionsInput(
            approverProjectId: approverProjectId, 
            domainIdentifier: domainIdentifier, 
            maxResults: maxResults, 
            nextToken: nextToken, 
            owningProjectId: owningProjectId, 
            sortBy: sortBy, 
            sortOrder: sortOrder, 
            status: status, 
            subscribedListingId: subscribedListingId, 
            subscriptionRequestIdentifier: subscriptionRequestIdentifier
        )
        return try await self.listSubscriptions(input, logger: logger)
    }

    /// Lists tags for the specified resource in Amazon DataZone.
    @Sendable
    @inlinable
    public func listTagsForResource(_ input: ListTagsForResourceRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> ListTagsForResourceResponse {
        try await self.client.execute(
            operation: "ListTagsForResource", 
            path: "/tags/{resourceArn}", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Lists tags for the specified resource in Amazon DataZone.
    ///
    /// Parameters:
    ///   - resourceArn: The ARN of the resource whose tags you want to list.
    ///   - logger: Logger use during operation
    @inlinable
    public func listTagsForResource(
        resourceArn: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> ListTagsForResourceResponse {
        let input = ListTagsForResourceRequest(
            resourceArn: resourceArn
        )
        return try await self.listTagsForResource(input, logger: logger)
    }

    /// Lists time series data points.
    @Sendable
    @inlinable
    public func listTimeSeriesDataPoints(_ input: ListTimeSeriesDataPointsInput, logger: Logger = AWSClient.loggingDisabled) async throws -> ListTimeSeriesDataPointsOutput {
        try await self.client.execute(
            operation: "ListTimeSeriesDataPoints", 
            path: "/v2/domains/{domainIdentifier}/entities/{entityType}/{entityIdentifier}/time-series-data-points", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Lists time series data points.
    ///
    /// Parameters:
    ///   - domainIdentifier: The ID of the Amazon DataZone domain that houses the assets for which you want to list time series data points.
    ///   - endedAt: The timestamp at which the data points that you wanted to list ended.
    ///   - entityIdentifier: The ID of the asset for which you want to list data points.
    ///   - entityType: The type of the asset for which you want to list data points.
    ///   - formName: The name of the time series data points form.
    ///   - maxResults: The maximum number of data points to return in a single call to ListTimeSeriesDataPoints. When the number of data points to be listed is greater than the value of MaxResults, the response contains a NextToken value that you can use in a subsequent call to ListTimeSeriesDataPoints to list the next set of data points.
    ///   - nextToken: When the number of data points is greater than the default value for the MaxResults parameter, or if you explicitly specify a value for MaxResults that is less than the number of data points, the response includes a pagination token named NextToken. You can specify this NextToken value in a subsequent call to ListTimeSeriesDataPoints to list the next set of data points.
    ///   - startedAt: The timestamp at which the data points that you want to list started.
    ///   - logger: Logger use during operation
    @inlinable
    public func listTimeSeriesDataPoints(
        domainIdentifier: String,
        endedAt: Date? = nil,
        entityIdentifier: String,
        entityType: TimeSeriesEntityType,
        formName: String,
        maxResults: Int? = nil,
        nextToken: String? = nil,
        startedAt: Date? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> ListTimeSeriesDataPointsOutput {
        let input = ListTimeSeriesDataPointsInput(
            domainIdentifier: domainIdentifier, 
            endedAt: endedAt, 
            entityIdentifier: entityIdentifier, 
            entityType: entityType, 
            formName: formName, 
            maxResults: maxResults, 
            nextToken: nextToken, 
            startedAt: startedAt
        )
        return try await self.listTimeSeriesDataPoints(input, logger: logger)
    }

    /// Posts a data lineage event.
    @Sendable
    @inlinable
    public func postLineageEvent(_ input: PostLineageEventInput, logger: Logger = AWSClient.loggingDisabled) async throws -> PostLineageEventOutput {
        try await self.client.execute(
            operation: "PostLineageEvent", 
            path: "/v2/domains/{domainIdentifier}/lineage/events", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Posts a data lineage event.
    ///
    /// Parameters:
    ///   - clientToken: A unique, case-sensitive identifier that is provided to ensure the idempotency of the request.
    ///   - domainIdentifier: The ID of the domain where you want to post a data lineage event.
    ///   - event: The data lineage event that you want to post. Only open-lineage run event are supported as events.
    ///   - logger: Logger use during operation
    @inlinable
    public func postLineageEvent(
        clientToken: String? = PostLineageEventInput.idempotencyToken(),
        domainIdentifier: String,
        event: AWSHTTPBody,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> PostLineageEventOutput {
        let input = PostLineageEventInput(
            clientToken: clientToken, 
            domainIdentifier: domainIdentifier, 
            event: event
        )
        return try await self.postLineageEvent(input, logger: logger)
    }

    /// Posts time series data points to Amazon DataZone for the specified asset.
    @Sendable
    @inlinable
    public func postTimeSeriesDataPoints(_ input: PostTimeSeriesDataPointsInput, logger: Logger = AWSClient.loggingDisabled) async throws -> PostTimeSeriesDataPointsOutput {
        try await self.client.execute(
            operation: "PostTimeSeriesDataPoints", 
            path: "/v2/domains/{domainIdentifier}/entities/{entityType}/{entityIdentifier}/time-series-data-points", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Posts time series data points to Amazon DataZone for the specified asset.
    ///
    /// Parameters:
    ///   - clientToken: A unique, case-sensitive identifier that is provided to ensure the idempotency of the request.
    ///   - domainIdentifier: The ID of the Amazon DataZone domain in which you want to post time series data points.
    ///   - entityIdentifier: The ID of the asset for which you want to post time series data points.
    ///   - entityType: The type of the asset for which you want to post data points.
    ///   - forms: The forms that contain the data points that you want to post.
    ///   - logger: Logger use during operation
    @inlinable
    public func postTimeSeriesDataPoints(
        clientToken: String? = PostTimeSeriesDataPointsInput.idempotencyToken(),
        domainIdentifier: String,
        entityIdentifier: String,
        entityType: TimeSeriesEntityType,
        forms: [TimeSeriesDataPointFormInput],
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> PostTimeSeriesDataPointsOutput {
        let input = PostTimeSeriesDataPointsInput(
            clientToken: clientToken, 
            domainIdentifier: domainIdentifier, 
            entityIdentifier: entityIdentifier, 
            entityType: entityType, 
            forms: forms
        )
        return try await self.postTimeSeriesDataPoints(input, logger: logger)
    }

    /// Writes the configuration for the specified environment blueprint in Amazon DataZone.
    @Sendable
    @inlinable
    public func putEnvironmentBlueprintConfiguration(_ input: PutEnvironmentBlueprintConfigurationInput, logger: Logger = AWSClient.loggingDisabled) async throws -> PutEnvironmentBlueprintConfigurationOutput {
        try await self.client.execute(
            operation: "PutEnvironmentBlueprintConfiguration", 
            path: "/v2/domains/{domainIdentifier}/environment-blueprint-configurations/{environmentBlueprintIdentifier}", 
            httpMethod: .PUT, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Writes the configuration for the specified environment blueprint in Amazon DataZone.
    ///
    /// Parameters:
    ///   - domainIdentifier: The identifier of the Amazon DataZone domain.
    ///   - enabledRegions: Specifies the enabled Amazon Web Services Regions.
    ///   - environmentBlueprintIdentifier: The identifier of the environment blueprint.
    ///   - environmentRolePermissionBoundary: The environment role permissions boundary.
    ///   - manageAccessRoleArn: The ARN of the manage access role.
    ///   - provisioningConfigurations: The provisioning configuration of a blueprint.
    ///   - provisioningRoleArn: The ARN of the provisioning role.
    ///   - regionalParameters: The regional parameters in the environment blueprint.
    ///   - logger: Logger use during operation
    @inlinable
    public func putEnvironmentBlueprintConfiguration(
        domainIdentifier: String,
        enabledRegions: [String],
        environmentBlueprintIdentifier: String,
        environmentRolePermissionBoundary: String? = nil,
        manageAccessRoleArn: String? = nil,
        provisioningConfigurations: [ProvisioningConfiguration]? = nil,
        provisioningRoleArn: String? = nil,
        regionalParameters: [String: [String: String]]? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> PutEnvironmentBlueprintConfigurationOutput {
        let input = PutEnvironmentBlueprintConfigurationInput(
            domainIdentifier: domainIdentifier, 
            enabledRegions: enabledRegions, 
            environmentBlueprintIdentifier: environmentBlueprintIdentifier, 
            environmentRolePermissionBoundary: environmentRolePermissionBoundary, 
            manageAccessRoleArn: manageAccessRoleArn, 
            provisioningConfigurations: provisioningConfigurations, 
            provisioningRoleArn: provisioningRoleArn, 
            regionalParameters: regionalParameters
        )
        return try await self.putEnvironmentBlueprintConfiguration(input, logger: logger)
    }

    /// Rejects automatically generated business-friendly metadata for your Amazon DataZone assets.
    @Sendable
    @inlinable
    public func rejectPredictions(_ input: RejectPredictionsInput, logger: Logger = AWSClient.loggingDisabled) async throws -> RejectPredictionsOutput {
        try await self.client.execute(
            operation: "RejectPredictions", 
            path: "/v2/domains/{domainIdentifier}/assets/{identifier}/reject-predictions", 
            httpMethod: .PUT, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Rejects automatically generated business-friendly metadata for your Amazon DataZone assets.
    ///
    /// Parameters:
    ///   - clientToken: A unique, case-sensitive identifier that is provided to ensure the idempotency of the request.
    ///   - domainIdentifier: The identifier of the Amazon DataZone domain.
    ///   - identifier: The identifier of the prediction.
    ///   - rejectChoices: Specifies the prediction (aka, the automatically generated piece of metadata) and the target (for example, a column name) that can be rejected.
    ///   - rejectRule: Specifies the rule (or the conditions) under which a prediction can be rejected.
    ///   - revision: The revision that is to be made to the asset.
    ///   - logger: Logger use during operation
    @inlinable
    public func rejectPredictions(
        clientToken: String? = RejectPredictionsInput.idempotencyToken(),
        domainIdentifier: String,
        identifier: String,
        rejectChoices: [RejectChoice]? = nil,
        rejectRule: RejectRule? = nil,
        revision: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> RejectPredictionsOutput {
        let input = RejectPredictionsInput(
            clientToken: clientToken, 
            domainIdentifier: domainIdentifier, 
            identifier: identifier, 
            rejectChoices: rejectChoices, 
            rejectRule: rejectRule, 
            revision: revision
        )
        return try await self.rejectPredictions(input, logger: logger)
    }

    /// Rejects the specified subscription request.
    @Sendable
    @inlinable
    public func rejectSubscriptionRequest(_ input: RejectSubscriptionRequestInput, logger: Logger = AWSClient.loggingDisabled) async throws -> RejectSubscriptionRequestOutput {
        try await self.client.execute(
            operation: "RejectSubscriptionRequest", 
            path: "/v2/domains/{domainIdentifier}/subscription-requests/{identifier}/reject", 
            httpMethod: .PUT, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Rejects the specified subscription request.
    ///
    /// Parameters:
    ///   - decisionComment: The decision comment of the rejected subscription request.
    ///   - domainIdentifier: The identifier of the Amazon DataZone domain in which the subscription request was rejected.
    ///   - identifier: The identifier of the subscription request that was rejected.
    ///   - logger: Logger use during operation
    @inlinable
    public func rejectSubscriptionRequest(
        decisionComment: String? = nil,
        domainIdentifier: String,
        identifier: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> RejectSubscriptionRequestOutput {
        let input = RejectSubscriptionRequestInput(
            decisionComment: decisionComment, 
            domainIdentifier: domainIdentifier, 
            identifier: identifier
        )
        return try await self.rejectSubscriptionRequest(input, logger: logger)
    }

    /// Removes an owner from an entity.
    @Sendable
    @inlinable
    public func removeEntityOwner(_ input: RemoveEntityOwnerInput, logger: Logger = AWSClient.loggingDisabled) async throws -> RemoveEntityOwnerOutput {
        try await self.client.execute(
            operation: "RemoveEntityOwner", 
            path: "/v2/domains/{domainIdentifier}/entities/{entityType}/{entityIdentifier}/removeOwner", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Removes an owner from an entity.
    ///
    /// Parameters:
    ///   - clientToken: A unique, case-sensitive identifier that is provided to ensure the idempotency of the request.
    ///   - domainIdentifier: The ID of the domain where you want to remove an owner from an entity.
    ///   - entityIdentifier: The ID of the entity from which you want to remove an owner.
    ///   - entityType: The type of the entity from which you want to remove an owner.
    ///   - owner: The owner that you want to remove from an entity.
    ///   - logger: Logger use during operation
    @inlinable
    public func removeEntityOwner(
        clientToken: String? = RemoveEntityOwnerInput.idempotencyToken(),
        domainIdentifier: String,
        entityIdentifier: String,
        entityType: DataZoneEntityType,
        owner: OwnerProperties,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> RemoveEntityOwnerOutput {
        let input = RemoveEntityOwnerInput(
            clientToken: clientToken, 
            domainIdentifier: domainIdentifier, 
            entityIdentifier: entityIdentifier, 
            entityType: entityType, 
            owner: owner
        )
        return try await self.removeEntityOwner(input, logger: logger)
    }

    /// Removes a policy grant.
    @Sendable
    @inlinable
    public func removePolicyGrant(_ input: RemovePolicyGrantInput, logger: Logger = AWSClient.loggingDisabled) async throws -> RemovePolicyGrantOutput {
        try await self.client.execute(
            operation: "RemovePolicyGrant", 
            path: "/v2/domains/{domainIdentifier}/policies/managed/{entityType}/{entityIdentifier}/removeGrant", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Removes a policy grant.
    ///
    /// Parameters:
    ///   - clientToken: A unique, case-sensitive identifier that is provided to ensure the idempotency of the request.
    ///   - domainIdentifier: The ID of the domain where you want to remove a policy grant.
    ///   - entityIdentifier: The ID of the entity from which you want to remove a policy grant.
    ///   - entityType: The type of the entity from which you want to remove a policy grant.
    ///   - policyType: The type of the policy that you want to remove.
    ///   - principal: The principal from which you want to remove a policy grant.
    ///   - logger: Logger use during operation
    @inlinable
    public func removePolicyGrant(
        clientToken: String? = RemovePolicyGrantInput.idempotencyToken(),
        domainIdentifier: String,
        entityIdentifier: String,
        entityType: TargetEntityType,
        policyType: ManagedPolicyType,
        principal: PolicyGrantPrincipal,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> RemovePolicyGrantOutput {
        let input = RemovePolicyGrantInput(
            clientToken: clientToken, 
            domainIdentifier: domainIdentifier, 
            entityIdentifier: entityIdentifier, 
            entityType: entityType, 
            policyType: policyType, 
            principal: principal
        )
        return try await self.removePolicyGrant(input, logger: logger)
    }

    /// Revokes a specified subscription in Amazon DataZone.
    @Sendable
    @inlinable
    public func revokeSubscription(_ input: RevokeSubscriptionInput, logger: Logger = AWSClient.loggingDisabled) async throws -> RevokeSubscriptionOutput {
        try await self.client.execute(
            operation: "RevokeSubscription", 
            path: "/v2/domains/{domainIdentifier}/subscriptions/{identifier}/revoke", 
            httpMethod: .PUT, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Revokes a specified subscription in Amazon DataZone.
    ///
    /// Parameters:
    ///   - domainIdentifier: The identifier of the Amazon DataZone domain where you want to revoke a subscription.
    ///   - identifier: The identifier of the revoked subscription.
    ///   - retainPermissions: Specifies whether permissions are retained when the subscription is revoked.
    ///   - logger: Logger use during operation
    @inlinable
    public func revokeSubscription(
        domainIdentifier: String,
        identifier: String,
        retainPermissions: Bool? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> RevokeSubscriptionOutput {
        let input = RevokeSubscriptionInput(
            domainIdentifier: domainIdentifier, 
            identifier: identifier, 
            retainPermissions: retainPermissions
        )
        return try await self.revokeSubscription(input, logger: logger)
    }

    /// Searches for assets in Amazon DataZone.
    @Sendable
    @inlinable
    public func search(_ input: SearchInput, logger: Logger = AWSClient.loggingDisabled) async throws -> SearchOutput {
        try await self.client.execute(
            operation: "Search", 
            path: "/v2/domains/{domainIdentifier}/search", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Searches for assets in Amazon DataZone.
    ///
    /// Parameters:
    ///   - additionalAttributes: Specifies additional attributes for the Search action.
    ///   - domainIdentifier: The identifier of the Amazon DataZone domain.
    ///   - filters: Specifies the search filters.
    ///   - maxResults: The maximum number of results to return in a single call to Search. When the number of results to be listed is greater than the value of MaxResults, the response contains a NextToken value that you can use in a subsequent call to Search to list the next set of results.
    ///   - nextToken: When the number of results is greater than the default value for the MaxResults parameter, or if you explicitly specify a value for MaxResults that is less than the number of results, the response includes a pagination token named NextToken. You can specify this NextToken value in a subsequent call to Search to list the next set of results.
    ///   - owningProjectIdentifier: The identifier of the owning project specified for the search.
    ///   - searchIn: The details of the search.
    ///   - searchScope: The scope of the search.
    ///   - searchText: Specifies the text for which to search.
    ///   - sort: Specifies the way in which the search results are to be sorted.
    ///   - logger: Logger use during operation
    @inlinable
    public func search(
        additionalAttributes: [SearchOutputAdditionalAttribute]? = nil,
        domainIdentifier: String,
        filters: FilterClause? = nil,
        maxResults: Int? = nil,
        nextToken: String? = nil,
        owningProjectIdentifier: String? = nil,
        searchIn: [SearchInItem]? = nil,
        searchScope: InventorySearchScope,
        searchText: String? = nil,
        sort: SearchSort? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> SearchOutput {
        let input = SearchInput(
            additionalAttributes: additionalAttributes, 
            domainIdentifier: domainIdentifier, 
            filters: filters, 
            maxResults: maxResults, 
            nextToken: nextToken, 
            owningProjectIdentifier: owningProjectIdentifier, 
            searchIn: searchIn, 
            searchScope: searchScope, 
            searchText: searchText, 
            sort: sort
        )
        return try await self.search(input, logger: logger)
    }

    /// Searches group profiles in Amazon DataZone.
    @Sendable
    @inlinable
    public func searchGroupProfiles(_ input: SearchGroupProfilesInput, logger: Logger = AWSClient.loggingDisabled) async throws -> SearchGroupProfilesOutput {
        try await self.client.execute(
            operation: "SearchGroupProfiles", 
            path: "/v2/domains/{domainIdentifier}/search-group-profiles", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Searches group profiles in Amazon DataZone.
    ///
    /// Parameters:
    ///   - domainIdentifier: The identifier of the Amazon DataZone domain in which you want to search group profiles.
    ///   - groupType: The group type for which to search.
    ///   - maxResults: The maximum number of results to return in a single call to SearchGroupProfiles. When the number of results to be listed is greater than the value of MaxResults, the response contains a NextToken value that you can use in a subsequent call to SearchGroupProfiles to list the next set of results.
    ///   - nextToken: When the number of results is greater than the default value for the MaxResults parameter, or if you explicitly specify a value for MaxResults that is less than the number of results, the response includes a pagination token named NextToken. You can specify this NextToken value in a subsequent call to SearchGroupProfiles to list the next set of results.
    ///   - searchText: Specifies the text for which to search.
    ///   - logger: Logger use during operation
    @inlinable
    public func searchGroupProfiles(
        domainIdentifier: String,
        groupType: GroupSearchType,
        maxResults: Int? = nil,
        nextToken: String? = nil,
        searchText: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> SearchGroupProfilesOutput {
        let input = SearchGroupProfilesInput(
            domainIdentifier: domainIdentifier, 
            groupType: groupType, 
            maxResults: maxResults, 
            nextToken: nextToken, 
            searchText: searchText
        )
        return try await self.searchGroupProfiles(input, logger: logger)
    }

    /// Searches listings (records of an asset at a given time) in Amazon DataZone.
    @Sendable
    @inlinable
    public func searchListings(_ input: SearchListingsInput, logger: Logger = AWSClient.loggingDisabled) async throws -> SearchListingsOutput {
        try await self.client.execute(
            operation: "SearchListings", 
            path: "/v2/domains/{domainIdentifier}/listings/search", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Searches listings (records of an asset at a given time) in Amazon DataZone.
    ///
    /// Parameters:
    ///   - additionalAttributes: Specifies additional attributes for the search.
    ///   - domainIdentifier: The identifier of the domain in which to search listings.
    ///   - filters: Specifies the filters for the search of listings.
    ///   - maxResults: The maximum number of results to return in a single call to SearchListings. When the number of results to be listed is greater than the value of MaxResults, the response contains a NextToken value that you can use in a subsequent call to SearchListings to list the next set of results.
    ///   - nextToken: When the number of results is greater than the default value for the MaxResults parameter, or if you explicitly specify a value for MaxResults that is less than the number of results, the response includes a pagination token named NextToken. You can specify this NextToken value in a subsequent call to SearchListings to list the next set of results.
    ///   - searchIn: The details of the search.
    ///   - searchText: Specifies the text for which to search.
    ///   - sort: Specifies the way for sorting the search results.
    ///   - logger: Logger use during operation
    @inlinable
    public func searchListings(
        additionalAttributes: [SearchOutputAdditionalAttribute]? = nil,
        domainIdentifier: String,
        filters: FilterClause? = nil,
        maxResults: Int? = nil,
        nextToken: String? = nil,
        searchIn: [SearchInItem]? = nil,
        searchText: String? = nil,
        sort: SearchSort? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> SearchListingsOutput {
        let input = SearchListingsInput(
            additionalAttributes: additionalAttributes, 
            domainIdentifier: domainIdentifier, 
            filters: filters, 
            maxResults: maxResults, 
            nextToken: nextToken, 
            searchIn: searchIn, 
            searchText: searchText, 
            sort: sort
        )
        return try await self.searchListings(input, logger: logger)
    }

    /// Searches for types in Amazon DataZone.
    @Sendable
    @inlinable
    public func searchTypes(_ input: SearchTypesInput, logger: Logger = AWSClient.loggingDisabled) async throws -> SearchTypesOutput {
        try await self.client.execute(
            operation: "SearchTypes", 
            path: "/v2/domains/{domainIdentifier}/types-search", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Searches for types in Amazon DataZone.
    ///
    /// Parameters:
    ///   - domainIdentifier: The identifier of the Amazon DataZone domain in which to invoke the SearchTypes action.
    ///   - filters: The filters for the SearchTypes action.
    ///   - managed: Specifies whether the search is managed.
    ///   - maxResults: The maximum number of results to return in a single call to SearchTypes. When the number of results to be listed is greater than the value of MaxResults, the response contains a NextToken value that you can use in a subsequent call to SearchTypes to list the next set of results.
    ///   - nextToken: When the number of results is greater than the default value for the MaxResults parameter, or if you explicitly specify a value for MaxResults that is less than the number of results, the response includes a pagination token named NextToken. You can specify this NextToken value in a subsequent call to SearchTypes to list the next set of results.
    ///   - searchIn: The details of the search.
    ///   - searchScope: Specifies the scope of the search for types.
    ///   - searchText: Specifies the text for which to search.
    ///   - sort: The specifies the way to sort the SearchTypes results.
    ///   - logger: Logger use during operation
    @inlinable
    public func searchTypes(
        domainIdentifier: String,
        filters: FilterClause? = nil,
        managed: Bool,
        maxResults: Int? = nil,
        nextToken: String? = nil,
        searchIn: [SearchInItem]? = nil,
        searchScope: TypesSearchScope,
        searchText: String? = nil,
        sort: SearchSort? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> SearchTypesOutput {
        let input = SearchTypesInput(
            domainIdentifier: domainIdentifier, 
            filters: filters, 
            managed: managed, 
            maxResults: maxResults, 
            nextToken: nextToken, 
            searchIn: searchIn, 
            searchScope: searchScope, 
            searchText: searchText, 
            sort: sort
        )
        return try await self.searchTypes(input, logger: logger)
    }

    /// Searches user profiles in Amazon DataZone.
    @Sendable
    @inlinable
    public func searchUserProfiles(_ input: SearchUserProfilesInput, logger: Logger = AWSClient.loggingDisabled) async throws -> SearchUserProfilesOutput {
        try await self.client.execute(
            operation: "SearchUserProfiles", 
            path: "/v2/domains/{domainIdentifier}/search-user-profiles", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Searches user profiles in Amazon DataZone.
    ///
    /// Parameters:
    ///   - domainIdentifier: The identifier of the Amazon DataZone domain in which you want to search user profiles.
    ///   - maxResults: The maximum number of results to return in a single call to SearchUserProfiles. When the number of results to be listed is greater than the value of MaxResults, the response contains a NextToken value that you can use in a subsequent call to SearchUserProfiles to list the next set of results.
    ///   - nextToken: When the number of results is greater than the default value for the MaxResults parameter, or if you explicitly specify a value for MaxResults that is less than the number of results, the response includes a pagination token named NextToken. You can specify this NextToken value in a subsequent call to SearchUserProfiles to list the next set of results.
    ///   - searchText: Specifies the text for which to search.
    ///   - userType: Specifies the user type for the SearchUserProfiles action.
    ///   - logger: Logger use during operation
    @inlinable
    public func searchUserProfiles(
        domainIdentifier: String,
        maxResults: Int? = nil,
        nextToken: String? = nil,
        searchText: String? = nil,
        userType: UserSearchType,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> SearchUserProfilesOutput {
        let input = SearchUserProfilesInput(
            domainIdentifier: domainIdentifier, 
            maxResults: maxResults, 
            nextToken: nextToken, 
            searchText: searchText, 
            userType: userType
        )
        return try await self.searchUserProfiles(input, logger: logger)
    }

    /// Start the run of the specified data source in Amazon DataZone.
    @Sendable
    @inlinable
    public func startDataSourceRun(_ input: StartDataSourceRunInput, logger: Logger = AWSClient.loggingDisabled) async throws -> StartDataSourceRunOutput {
        try await self.client.execute(
            operation: "StartDataSourceRun", 
            path: "/v2/domains/{domainIdentifier}/data-sources/{dataSourceIdentifier}/runs", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Start the run of the specified data source in Amazon DataZone.
    ///
    /// Parameters:
    ///   - clientToken: A unique, case-sensitive identifier that is provided to ensure the idempotency of the request.
    ///   - dataSourceIdentifier: The identifier of the data source.
    ///   - domainIdentifier: The identifier of the Amazon DataZone domain in which to start a data source run.
    ///   - logger: Logger use during operation
    @inlinable
    public func startDataSourceRun(
        clientToken: String? = StartDataSourceRunInput.idempotencyToken(),
        dataSourceIdentifier: String,
        domainIdentifier: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> StartDataSourceRunOutput {
        let input = StartDataSourceRunInput(
            clientToken: clientToken, 
            dataSourceIdentifier: dataSourceIdentifier, 
            domainIdentifier: domainIdentifier
        )
        return try await self.startDataSourceRun(input, logger: logger)
    }

    /// Starts the metadata generation run.
    @Sendable
    @inlinable
    public func startMetadataGenerationRun(_ input: StartMetadataGenerationRunInput, logger: Logger = AWSClient.loggingDisabled) async throws -> StartMetadataGenerationRunOutput {
        try await self.client.execute(
            operation: "StartMetadataGenerationRun", 
            path: "/v2/domains/{domainIdentifier}/metadata-generation-runs", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Starts the metadata generation run.
    ///
    /// Parameters:
    ///   - clientToken: A unique, case-sensitive identifier to ensure idempotency of the request. This field is automatically populated if not provided.
    ///   - domainIdentifier: The ID of the Amazon DataZone domain where you want to start a metadata generation run.
    ///   - owningProjectIdentifier: The ID of the project that owns the asset for which you want to start a metadata generation run.
    ///   - target: The asset for which you want to start a metadata generation run.
    ///   - type: The type of the metadata generation run.
    ///   - logger: Logger use during operation
    @inlinable
    public func startMetadataGenerationRun(
        clientToken: String? = StartMetadataGenerationRunInput.idempotencyToken(),
        domainIdentifier: String,
        owningProjectIdentifier: String,
        target: MetadataGenerationRunTarget,
        type: MetadataGenerationRunType,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> StartMetadataGenerationRunOutput {
        let input = StartMetadataGenerationRunInput(
            clientToken: clientToken, 
            domainIdentifier: domainIdentifier, 
            owningProjectIdentifier: owningProjectIdentifier, 
            target: target, 
            type: type
        )
        return try await self.startMetadataGenerationRun(input, logger: logger)
    }

    /// Tags a resource in Amazon DataZone.
    @Sendable
    @inlinable
    public func tagResource(_ input: TagResourceRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> TagResourceResponse {
        try await self.client.execute(
            operation: "TagResource", 
            path: "/tags/{resourceArn}", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Tags a resource in Amazon DataZone.
    ///
    /// Parameters:
    ///   - resourceArn: The ARN of the resource to be tagged in Amazon DataZone.
    ///   - tags: Specifies the tags for the TagResource action.
    ///   - logger: Logger use during operation
    @inlinable
    public func tagResource(
        resourceArn: String,
        tags: [String: String],
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> TagResourceResponse {
        let input = TagResourceRequest(
            resourceArn: resourceArn, 
            tags: tags
        )
        return try await self.tagResource(input, logger: logger)
    }

    /// Untags a resource in Amazon DataZone.
    @Sendable
    @inlinable
    public func untagResource(_ input: UntagResourceRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> UntagResourceResponse {
        try await self.client.execute(
            operation: "UntagResource", 
            path: "/tags/{resourceArn}", 
            httpMethod: .DELETE, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Untags a resource in Amazon DataZone.
    ///
    /// Parameters:
    ///   - resourceArn: The ARN of the resource to be untagged in Amazon DataZone.
    ///   - tagKeys: Specifies the tag keys for the UntagResource action.
    ///   - logger: Logger use during operation
    @inlinable
    public func untagResource(
        resourceArn: String,
        tagKeys: [String],
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> UntagResourceResponse {
        let input = UntagResourceRequest(
            resourceArn: resourceArn, 
            tagKeys: tagKeys
        )
        return try await self.untagResource(input, logger: logger)
    }

    /// Updates an asset filter.
    @Sendable
    @inlinable
    public func updateAssetFilter(_ input: UpdateAssetFilterInput, logger: Logger = AWSClient.loggingDisabled) async throws -> UpdateAssetFilterOutput {
        try await self.client.execute(
            operation: "UpdateAssetFilter", 
            path: "/v2/domains/{domainIdentifier}/assets/{assetIdentifier}/filters/{identifier}", 
            httpMethod: .PATCH, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Updates an asset filter.
    ///
    /// Parameters:
    ///   - assetIdentifier: The ID of the data asset.
    ///   - configuration: The configuration of the asset filter.
    ///   - description: The description of the asset filter.
    ///   - domainIdentifier: The ID of the domain where you want to update an asset filter.
    ///   - identifier: The ID of the asset filter.
    ///   - name: The name of the asset filter.
    ///   - logger: Logger use during operation
    @inlinable
    public func updateAssetFilter(
        assetIdentifier: String,
        configuration: AssetFilterConfiguration? = nil,
        description: String? = nil,
        domainIdentifier: String,
        identifier: String,
        name: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> UpdateAssetFilterOutput {
        let input = UpdateAssetFilterInput(
            assetIdentifier: assetIdentifier, 
            configuration: configuration, 
            description: description, 
            domainIdentifier: domainIdentifier, 
            identifier: identifier, 
            name: name
        )
        return try await self.updateAssetFilter(input, logger: logger)
    }

    /// Updates a connection. In Amazon DataZone, a connection enables you to connect your resources (domains, projects, and environments) to external resources and services.
    @Sendable
    @inlinable
    public func updateConnection(_ input: UpdateConnectionInput, logger: Logger = AWSClient.loggingDisabled) async throws -> UpdateConnectionOutput {
        try await self.client.execute(
            operation: "UpdateConnection", 
            path: "/v2/domains/{domainIdentifier}/connections/{identifier}", 
            httpMethod: .PATCH, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Updates a connection. In Amazon DataZone, a connection enables you to connect your resources (domains, projects, and environments) to external resources and services.
    ///
    /// Parameters:
    ///   - awsLocation: The location where a connection is to be updated.
    ///   - description: The description of a connection.
    ///   - domainIdentifier: The ID of the domain where a connection is to be updated.
    ///   - identifier: The ID of the connection to be updated.
    ///   - props: The connection props.
    ///   - logger: Logger use during operation
    @inlinable
    public func updateConnection(
        awsLocation: AwsLocation? = nil,
        description: String? = nil,
        domainIdentifier: String,
        identifier: String,
        props: ConnectionPropertiesPatch? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> UpdateConnectionOutput {
        let input = UpdateConnectionInput(
            awsLocation: awsLocation, 
            description: description, 
            domainIdentifier: domainIdentifier, 
            identifier: identifier, 
            props: props
        )
        return try await self.updateConnection(input, logger: logger)
    }

    /// Updates the specified data source in Amazon DataZone.
    @Sendable
    @inlinable
    public func updateDataSource(_ input: UpdateDataSourceInput, logger: Logger = AWSClient.loggingDisabled) async throws -> UpdateDataSourceOutput {
        try await self.client.execute(
            operation: "UpdateDataSource", 
            path: "/v2/domains/{domainIdentifier}/data-sources/{identifier}", 
            httpMethod: .PATCH, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Updates the specified data source in Amazon DataZone.
    ///
    /// Parameters:
    ///   - assetFormsInput: The asset forms to be updated as part of the UpdateDataSource action.
    ///   - configuration: The configuration to be updated as part of the UpdateDataSource action.
    ///   - description: The description to be updated as part of the UpdateDataSource action.
    ///   - domainIdentifier: The identifier of the domain in which to update a data source.
    ///   - enableSetting: The enable setting to be updated as part of the UpdateDataSource action.
    ///   - identifier: The identifier of the data source to be updated.
    ///   - name: The name to be updated as part of the UpdateDataSource action.
    ///   - publishOnImport: The publish on import setting to be updated as part of the UpdateDataSource action.
    ///   - recommendation: The recommendation to be updated as part of the UpdateDataSource action.
    ///   - retainPermissionsOnRevokeFailure: Specifies that the granted permissions are retained in case of a self-subscribe functionality failure for a data source.
    ///   - schedule: The schedule to be updated as part of the UpdateDataSource action.
    ///   - logger: Logger use during operation
    @inlinable
    public func updateDataSource(
        assetFormsInput: [FormInput]? = nil,
        configuration: DataSourceConfigurationInput? = nil,
        description: String? = nil,
        domainIdentifier: String,
        enableSetting: EnableSetting? = nil,
        identifier: String,
        name: String? = nil,
        publishOnImport: Bool? = nil,
        recommendation: RecommendationConfiguration? = nil,
        retainPermissionsOnRevokeFailure: Bool? = nil,
        schedule: ScheduleConfiguration? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> UpdateDataSourceOutput {
        let input = UpdateDataSourceInput(
            assetFormsInput: assetFormsInput, 
            configuration: configuration, 
            description: description, 
            domainIdentifier: domainIdentifier, 
            enableSetting: enableSetting, 
            identifier: identifier, 
            name: name, 
            publishOnImport: publishOnImport, 
            recommendation: recommendation, 
            retainPermissionsOnRevokeFailure: retainPermissionsOnRevokeFailure, 
            schedule: schedule
        )
        return try await self.updateDataSource(input, logger: logger)
    }

    /// Updates a Amazon DataZone domain.
    @Sendable
    @inlinable
    public func updateDomain(_ input: UpdateDomainInput, logger: Logger = AWSClient.loggingDisabled) async throws -> UpdateDomainOutput {
        try await self.client.execute(
            operation: "UpdateDomain", 
            path: "/v2/domains/{identifier}", 
            httpMethod: .PUT, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Updates a Amazon DataZone domain.
    ///
    /// Parameters:
    ///   - clientToken: A unique, case-sensitive identifier that is provided to ensure the idempotency of the request.
    ///   - description: The description to be updated as part of the UpdateDomain action.
    ///   - domainExecutionRole: The domain execution role to be updated as part of the UpdateDomain action.
    ///   - identifier: The ID of the Amazon Web Services domain that is to be updated.
    ///   - name: The name to be updated as part of the UpdateDomain action.
    ///   - serviceRole: The service role of the domain.
    ///   - singleSignOn: The single sign-on option to be updated as part of the UpdateDomain action.
    ///   - logger: Logger use during operation
    @inlinable
    public func updateDomain(
        clientToken: String? = UpdateDomainInput.idempotencyToken(),
        description: String? = nil,
        domainExecutionRole: String? = nil,
        identifier: String,
        name: String? = nil,
        serviceRole: String? = nil,
        singleSignOn: SingleSignOn? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> UpdateDomainOutput {
        let input = UpdateDomainInput(
            clientToken: clientToken, 
            description: description, 
            domainExecutionRole: domainExecutionRole, 
            identifier: identifier, 
            name: name, 
            serviceRole: serviceRole, 
            singleSignOn: singleSignOn
        )
        return try await self.updateDomain(input, logger: logger)
    }

    /// Updates the domain unit.
    @Sendable
    @inlinable
    public func updateDomainUnit(_ input: UpdateDomainUnitInput, logger: Logger = AWSClient.loggingDisabled) async throws -> UpdateDomainUnitOutput {
        try await self.client.execute(
            operation: "UpdateDomainUnit", 
            path: "/v2/domains/{domainIdentifier}/domain-units/{identifier}", 
            httpMethod: .PUT, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Updates the domain unit.
    ///
    /// Parameters:
    ///   - description: The description of the domain unit that you want to update.
    ///   - domainIdentifier: The ID of the domain where you want to update a domain unit.
    ///   - identifier: The ID of the domain unit that you want to update.
    ///   - name: The name of the domain unit that you want to update.
    ///   - logger: Logger use during operation
    @inlinable
    public func updateDomainUnit(
        description: String? = nil,
        domainIdentifier: String,
        identifier: String,
        name: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> UpdateDomainUnitOutput {
        let input = UpdateDomainUnitInput(
            description: description, 
            domainIdentifier: domainIdentifier, 
            identifier: identifier, 
            name: name
        )
        return try await self.updateDomainUnit(input, logger: logger)
    }

    /// Updates the specified environment in Amazon DataZone.
    @Sendable
    @inlinable
    public func updateEnvironment(_ input: UpdateEnvironmentInput, logger: Logger = AWSClient.loggingDisabled) async throws -> UpdateEnvironmentOutput {
        try await self.client.execute(
            operation: "UpdateEnvironment", 
            path: "/v2/domains/{domainIdentifier}/environments/{identifier}", 
            httpMethod: .PATCH, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Updates the specified environment in Amazon DataZone.
    ///
    /// Parameters:
    ///   - blueprintVersion: The blueprint version to which the environment should be updated. You can only specify the following string for this parameter: latest.
    ///   - description: The description to be updated as part of the UpdateEnvironment action.
    ///   - domainIdentifier: The identifier of the domain in which the environment is to be updated.
    ///   - glossaryTerms: The glossary terms to be updated as part of the UpdateEnvironment action.
    ///   - identifier: The identifier of the environment that is to be updated.
    ///   - name: The name to be updated as part of the UpdateEnvironment action.
    ///   - userParameters: The user parameters of the environment.
    ///   - logger: Logger use during operation
    @inlinable
    public func updateEnvironment(
        blueprintVersion: String? = nil,
        description: String? = nil,
        domainIdentifier: String,
        glossaryTerms: [String]? = nil,
        identifier: String,
        name: String? = nil,
        userParameters: [EnvironmentParameter]? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> UpdateEnvironmentOutput {
        let input = UpdateEnvironmentInput(
            blueprintVersion: blueprintVersion, 
            description: description, 
            domainIdentifier: domainIdentifier, 
            glossaryTerms: glossaryTerms, 
            identifier: identifier, 
            name: name, 
            userParameters: userParameters
        )
        return try await self.updateEnvironment(input, logger: logger)
    }

    /// Updates an environment action.
    @Sendable
    @inlinable
    public func updateEnvironmentAction(_ input: UpdateEnvironmentActionInput, logger: Logger = AWSClient.loggingDisabled) async throws -> UpdateEnvironmentActionOutput {
        try await self.client.execute(
            operation: "UpdateEnvironmentAction", 
            path: "/v2/domains/{domainIdentifier}/environments/{environmentIdentifier}/actions/{identifier}", 
            httpMethod: .PATCH, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Updates an environment action.
    ///
    /// Parameters:
    ///   - description: The description of the environment action.
    ///   - domainIdentifier: The domain ID of the environment action.
    ///   - environmentIdentifier: The environment ID of the environment action.
    ///   - identifier: The ID of the environment action.
    ///   - name: The name of the environment action.
    ///   - parameters: The parameters of the environment action.
    ///   - logger: Logger use during operation
    @inlinable
    public func updateEnvironmentAction(
        description: String? = nil,
        domainIdentifier: String,
        environmentIdentifier: String,
        identifier: String,
        name: String? = nil,
        parameters: ActionParameters? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> UpdateEnvironmentActionOutput {
        let input = UpdateEnvironmentActionInput(
            description: description, 
            domainIdentifier: domainIdentifier, 
            environmentIdentifier: environmentIdentifier, 
            identifier: identifier, 
            name: name, 
            parameters: parameters
        )
        return try await self.updateEnvironmentAction(input, logger: logger)
    }

    /// Updates the specified environment profile in Amazon DataZone.
    @Sendable
    @inlinable
    public func updateEnvironmentProfile(_ input: UpdateEnvironmentProfileInput, logger: Logger = AWSClient.loggingDisabled) async throws -> UpdateEnvironmentProfileOutput {
        try await self.client.execute(
            operation: "UpdateEnvironmentProfile", 
            path: "/v2/domains/{domainIdentifier}/environment-profiles/{identifier}", 
            httpMethod: .PATCH, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Updates the specified environment profile in Amazon DataZone.
    ///
    /// Parameters:
    ///   - awsAccountId: The Amazon Web Services account in which a specified environment profile is to be udpated.
    ///   - awsAccountRegion: The Amazon Web Services Region in which a specified environment profile is to be updated.
    ///   - description: The description to be updated as part of the UpdateEnvironmentProfile action.
    ///   - domainIdentifier: The identifier of the Amazon DataZone domain in which an environment profile is to be updated.
    ///   - identifier: The identifier of the environment profile that is to be updated.
    ///   - name: The name to be updated as part of the UpdateEnvironmentProfile action.
    ///   - userParameters: The user parameters to be updated as part of the UpdateEnvironmentProfile action.
    ///   - logger: Logger use during operation
    @inlinable
    public func updateEnvironmentProfile(
        awsAccountId: String? = nil,
        awsAccountRegion: String? = nil,
        description: String? = nil,
        domainIdentifier: String,
        identifier: String,
        name: String? = nil,
        userParameters: [EnvironmentParameter]? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> UpdateEnvironmentProfileOutput {
        let input = UpdateEnvironmentProfileInput(
            awsAccountId: awsAccountId, 
            awsAccountRegion: awsAccountRegion, 
            description: description, 
            domainIdentifier: domainIdentifier, 
            identifier: identifier, 
            name: name, 
            userParameters: userParameters
        )
        return try await self.updateEnvironmentProfile(input, logger: logger)
    }

    /// Updates the business glossary in Amazon DataZone.
    @Sendable
    @inlinable
    public func updateGlossary(_ input: UpdateGlossaryInput, logger: Logger = AWSClient.loggingDisabled) async throws -> UpdateGlossaryOutput {
        try await self.client.execute(
            operation: "UpdateGlossary", 
            path: "/v2/domains/{domainIdentifier}/glossaries/{identifier}", 
            httpMethod: .PATCH, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Updates the business glossary in Amazon DataZone.
    ///
    /// Parameters:
    ///   - clientToken: A unique, case-sensitive identifier that is provided to ensure the idempotency of the request.
    ///   - description: The description to be updated as part of the UpdateGlossary action.
    ///   - domainIdentifier: The identifier of the Amazon DataZone domain in which a business glossary is to be updated.
    ///   - identifier: The identifier of the business glossary to be updated.
    ///   - name: The name to be updated as part of the UpdateGlossary action.
    ///   - status: The status to be updated as part of the UpdateGlossary action.
    ///   - logger: Logger use during operation
    @inlinable
    public func updateGlossary(
        clientToken: String? = UpdateGlossaryInput.idempotencyToken(),
        description: String? = nil,
        domainIdentifier: String,
        identifier: String,
        name: String? = nil,
        status: GlossaryStatus? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> UpdateGlossaryOutput {
        let input = UpdateGlossaryInput(
            clientToken: clientToken, 
            description: description, 
            domainIdentifier: domainIdentifier, 
            identifier: identifier, 
            name: name, 
            status: status
        )
        return try await self.updateGlossary(input, logger: logger)
    }

    /// Updates a business glossary term in Amazon DataZone.
    @Sendable
    @inlinable
    public func updateGlossaryTerm(_ input: UpdateGlossaryTermInput, logger: Logger = AWSClient.loggingDisabled) async throws -> UpdateGlossaryTermOutput {
        try await self.client.execute(
            operation: "UpdateGlossaryTerm", 
            path: "/v2/domains/{domainIdentifier}/glossary-terms/{identifier}", 
            httpMethod: .PATCH, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Updates a business glossary term in Amazon DataZone.
    ///
    /// Parameters:
    ///   - domainIdentifier: The identifier of the Amazon DataZone domain in which a business glossary term is to be updated.
    ///   - glossaryIdentifier: The identifier of the business glossary in which a term is to be updated.
    ///   - identifier: The identifier of the business glossary term that is to be updated.
    ///   - longDescription: The long description to be updated as part of the UpdateGlossaryTerm action.
    ///   - name: The name to be updated as part of the UpdateGlossaryTerm action.
    ///   - shortDescription: The short description to be updated as part of the UpdateGlossaryTerm action.
    ///   - status: The status to be updated as part of the UpdateGlossaryTerm action.
    ///   - termRelations: The term relations to be updated as part of the UpdateGlossaryTerm action.
    ///   - logger: Logger use during operation
    @inlinable
    public func updateGlossaryTerm(
        domainIdentifier: String,
        glossaryIdentifier: String? = nil,
        identifier: String,
        longDescription: String? = nil,
        name: String? = nil,
        shortDescription: String? = nil,
        status: GlossaryTermStatus? = nil,
        termRelations: TermRelations? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> UpdateGlossaryTermOutput {
        let input = UpdateGlossaryTermInput(
            domainIdentifier: domainIdentifier, 
            glossaryIdentifier: glossaryIdentifier, 
            identifier: identifier, 
            longDescription: longDescription, 
            name: name, 
            shortDescription: shortDescription, 
            status: status, 
            termRelations: termRelations
        )
        return try await self.updateGlossaryTerm(input, logger: logger)
    }

    /// Updates the specified group profile in Amazon DataZone.
    @Sendable
    @inlinable
    public func updateGroupProfile(_ input: UpdateGroupProfileInput, logger: Logger = AWSClient.loggingDisabled) async throws -> UpdateGroupProfileOutput {
        try await self.client.execute(
            operation: "UpdateGroupProfile", 
            path: "/v2/domains/{domainIdentifier}/group-profiles/{groupIdentifier}", 
            httpMethod: .PUT, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Updates the specified group profile in Amazon DataZone.
    ///
    /// Parameters:
    ///   - domainIdentifier: The identifier of the Amazon DataZone domain in which a group profile is updated.
    ///   - groupIdentifier: The identifier of the group profile that is updated.
    ///   - status: The status of the group profile that is updated.
    ///   - logger: Logger use during operation
    @inlinable
    public func updateGroupProfile(
        domainIdentifier: String,
        groupIdentifier: String,
        status: GroupProfileStatus,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> UpdateGroupProfileOutput {
        let input = UpdateGroupProfileInput(
            domainIdentifier: domainIdentifier, 
            groupIdentifier: groupIdentifier, 
            status: status
        )
        return try await self.updateGroupProfile(input, logger: logger)
    }

    /// Updates the specified project in Amazon DataZone.
    @Sendable
    @inlinable
    public func updateProject(_ input: UpdateProjectInput, logger: Logger = AWSClient.loggingDisabled) async throws -> UpdateProjectOutput {
        try await self.client.execute(
            operation: "UpdateProject", 
            path: "/v2/domains/{domainIdentifier}/projects/{identifier}", 
            httpMethod: .PATCH, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Updates the specified project in Amazon DataZone.
    ///
    /// Parameters:
    ///   - description: The description to be updated as part of the UpdateProject action.
    ///   - domainIdentifier: The ID of the Amazon DataZone domain where a project is being updated.
    ///   - environmentDeploymentDetails: The environment deployment details of the project.
    ///   - glossaryTerms: The glossary terms to be updated as part of the UpdateProject action.
    ///   - identifier: The identifier of the project that is to be updated.
    ///   - name: The name to be updated as part of the UpdateProject action.
    ///   - projectProfileVersion: The project profile version to which the project should be updated. You can only specify the following string for this parameter: latest.
    ///   - userParameters: The user parameters of the project.
    ///   - logger: Logger use during operation
    @inlinable
    public func updateProject(
        description: String? = nil,
        domainIdentifier: String,
        environmentDeploymentDetails: EnvironmentDeploymentDetails? = nil,
        glossaryTerms: [String]? = nil,
        identifier: String,
        name: String? = nil,
        projectProfileVersion: String? = nil,
        userParameters: [EnvironmentConfigurationUserParameter]? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> UpdateProjectOutput {
        let input = UpdateProjectInput(
            description: description, 
            domainIdentifier: domainIdentifier, 
            environmentDeploymentDetails: environmentDeploymentDetails, 
            glossaryTerms: glossaryTerms, 
            identifier: identifier, 
            name: name, 
            projectProfileVersion: projectProfileVersion, 
            userParameters: userParameters
        )
        return try await self.updateProject(input, logger: logger)
    }

    /// Updates a project profile.
    @Sendable
    @inlinable
    public func updateProjectProfile(_ input: UpdateProjectProfileInput, logger: Logger = AWSClient.loggingDisabled) async throws -> UpdateProjectProfileOutput {
        try await self.client.execute(
            operation: "UpdateProjectProfile", 
            path: "/v2/domains/{domainIdentifier}/project-profiles/{identifier}", 
            httpMethod: .PATCH, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Updates a project profile.
    ///
    /// Parameters:
    ///   - description: The description of a project profile.
    ///   - domainIdentifier: The ID of the domain where a project profile is to be updated.
    ///   - domainUnitIdentifier: The ID of the domain unit where a project profile is to be updated.
    ///   - environmentConfigurations: The environment configurations of a project profile.
    ///   - identifier: The ID of a project profile that is to be updated.
    ///   - name: The name of a project profile.
    ///   - status: The status of a project profile.
    ///   - logger: Logger use during operation
    @inlinable
    public func updateProjectProfile(
        description: String? = nil,
        domainIdentifier: String,
        domainUnitIdentifier: String? = nil,
        environmentConfigurations: [EnvironmentConfiguration]? = nil,
        identifier: String,
        name: String? = nil,
        status: Status? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> UpdateProjectProfileOutput {
        let input = UpdateProjectProfileInput(
            description: description, 
            domainIdentifier: domainIdentifier, 
            domainUnitIdentifier: domainUnitIdentifier, 
            environmentConfigurations: environmentConfigurations, 
            identifier: identifier, 
            name: name, 
            status: status
        )
        return try await self.updateProjectProfile(input, logger: logger)
    }

    /// Updates a rule. In Amazon DataZone, a rule is a formal agreement that enforces specific requirements across user workflows (e.g., publishing assets to the catalog, requesting subscriptions, creating projects) within the Amazon DataZone data portal. These rules help maintain consistency, ensure compliance, and uphold governance standards in data management processes. For instance, a metadata enforcement rule can specify the required information for creating a subscription request or publishing a data asset to the catalog, ensuring alignment with organizational standards.
    @Sendable
    @inlinable
    public func updateRule(_ input: UpdateRuleInput, logger: Logger = AWSClient.loggingDisabled) async throws -> UpdateRuleOutput {
        try await self.client.execute(
            operation: "UpdateRule", 
            path: "/v2/domains/{domainIdentifier}/rules/{identifier}", 
            httpMethod: .PATCH, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Updates a rule. In Amazon DataZone, a rule is a formal agreement that enforces specific requirements across user workflows (e.g., publishing assets to the catalog, requesting subscriptions, creating projects) within the Amazon DataZone data portal. These rules help maintain consistency, ensure compliance, and uphold governance standards in data management processes. For instance, a metadata enforcement rule can specify the required information for creating a subscription request or publishing a data asset to the catalog, ensuring alignment with organizational standards.
    ///
    /// Parameters:
    ///   - description: The description of the rule.
    ///   - detail: The detail of the rule.
    ///   - domainIdentifier: The ID of the domain in which a rule is to be updated.
    ///   - identifier: The ID of the rule that is to be updated
    ///   - includeChildDomainUnits: Specifies whether to update this rule in the child domain units.
    ///   - name: The name of the rule.
    ///   - scope: The scrope of the rule.
    ///   - logger: Logger use during operation
    @inlinable
    public func updateRule(
        description: String? = nil,
        detail: RuleDetail? = nil,
        domainIdentifier: String,
        identifier: String,
        includeChildDomainUnits: Bool? = nil,
        name: String? = nil,
        scope: RuleScope? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> UpdateRuleOutput {
        let input = UpdateRuleInput(
            description: description, 
            detail: detail, 
            domainIdentifier: domainIdentifier, 
            identifier: identifier, 
            includeChildDomainUnits: includeChildDomainUnits, 
            name: name, 
            scope: scope
        )
        return try await self.updateRule(input, logger: logger)
    }

    /// Updates the status of the specified subscription grant status in Amazon DataZone.
    @Sendable
    @inlinable
    public func updateSubscriptionGrantStatus(_ input: UpdateSubscriptionGrantStatusInput, logger: Logger = AWSClient.loggingDisabled) async throws -> UpdateSubscriptionGrantStatusOutput {
        try await self.client.execute(
            operation: "UpdateSubscriptionGrantStatus", 
            path: "/v2/domains/{domainIdentifier}/subscription-grants/{identifier}/status/{assetIdentifier}", 
            httpMethod: .PATCH, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Updates the status of the specified subscription grant status in Amazon DataZone.
    ///
    /// Parameters:
    ///   - assetIdentifier: The identifier of the asset the subscription grant status of which is to be updated.
    ///   - domainIdentifier: The identifier of the Amazon DataZone domain in which a subscription grant status is to be updated.
    ///   - failureCause: Specifies the error message that is returned if the operation cannot be successfully completed.
    ///   - identifier: The identifier of the subscription grant the status of which is to be updated.
    ///   - status: The status to be updated as part of the UpdateSubscriptionGrantStatus action.
    ///   - targetName: The target name to be updated as part of the UpdateSubscriptionGrantStatus action.
    ///   - logger: Logger use during operation
    @inlinable
    public func updateSubscriptionGrantStatus(
        assetIdentifier: String,
        domainIdentifier: String,
        failureCause: FailureCause? = nil,
        identifier: String,
        status: SubscriptionGrantStatus,
        targetName: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> UpdateSubscriptionGrantStatusOutput {
        let input = UpdateSubscriptionGrantStatusInput(
            assetIdentifier: assetIdentifier, 
            domainIdentifier: domainIdentifier, 
            failureCause: failureCause, 
            identifier: identifier, 
            status: status, 
            targetName: targetName
        )
        return try await self.updateSubscriptionGrantStatus(input, logger: logger)
    }

    /// Updates a specified subscription request in Amazon DataZone.
    @Sendable
    @inlinable
    public func updateSubscriptionRequest(_ input: UpdateSubscriptionRequestInput, logger: Logger = AWSClient.loggingDisabled) async throws -> UpdateSubscriptionRequestOutput {
        try await self.client.execute(
            operation: "UpdateSubscriptionRequest", 
            path: "/v2/domains/{domainIdentifier}/subscription-requests/{identifier}", 
            httpMethod: .PATCH, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Updates a specified subscription request in Amazon DataZone.
    ///
    /// Parameters:
    ///   - domainIdentifier: The identifier of the Amazon DataZone domain in which a subscription request is to be updated.
    ///   - identifier: The identifier of the subscription request that is to be updated.
    ///   - requestReason: The reason for the UpdateSubscriptionRequest action.
    ///   - logger: Logger use during operation
    @inlinable
    public func updateSubscriptionRequest(
        domainIdentifier: String,
        identifier: String,
        requestReason: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> UpdateSubscriptionRequestOutput {
        let input = UpdateSubscriptionRequestInput(
            domainIdentifier: domainIdentifier, 
            identifier: identifier, 
            requestReason: requestReason
        )
        return try await self.updateSubscriptionRequest(input, logger: logger)
    }

    /// Updates the specified subscription target in Amazon DataZone.
    @Sendable
    @inlinable
    public func updateSubscriptionTarget(_ input: UpdateSubscriptionTargetInput, logger: Logger = AWSClient.loggingDisabled) async throws -> UpdateSubscriptionTargetOutput {
        try await self.client.execute(
            operation: "UpdateSubscriptionTarget", 
            path: "/v2/domains/{domainIdentifier}/environments/{environmentIdentifier}/subscription-targets/{identifier}", 
            httpMethod: .PATCH, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Updates the specified subscription target in Amazon DataZone.
    ///
    /// Parameters:
    ///   - applicableAssetTypes: The applicable asset types to be updated as part of the UpdateSubscriptionTarget action.
    ///   - authorizedPrincipals: The authorized principals to be updated as part of the UpdateSubscriptionTarget action.
    ///   - domainIdentifier: The identifier of the Amazon DataZone domain in which a subscription target is to be updated.
    ///   - environmentIdentifier: The identifier of the environment in which a subscription target is to be updated.
    ///   - identifier: Identifier of the subscription target that is to be updated.
    ///   - manageAccessRole: The manage access role to be updated as part of the UpdateSubscriptionTarget action.
    ///   - name: The name to be updated as part of the UpdateSubscriptionTarget action.
    ///   - provider: The provider to be updated as part of the UpdateSubscriptionTarget action.
    ///   - subscriptionTargetConfig: The configuration to be updated as part of the UpdateSubscriptionTarget action.
    ///   - logger: Logger use during operation
    @inlinable
    public func updateSubscriptionTarget(
        applicableAssetTypes: [String]? = nil,
        authorizedPrincipals: [String]? = nil,
        domainIdentifier: String,
        environmentIdentifier: String,
        identifier: String,
        manageAccessRole: String? = nil,
        name: String? = nil,
        provider: String? = nil,
        subscriptionTargetConfig: [SubscriptionTargetForm]? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> UpdateSubscriptionTargetOutput {
        let input = UpdateSubscriptionTargetInput(
            applicableAssetTypes: applicableAssetTypes, 
            authorizedPrincipals: authorizedPrincipals, 
            domainIdentifier: domainIdentifier, 
            environmentIdentifier: environmentIdentifier, 
            identifier: identifier, 
            manageAccessRole: manageAccessRole, 
            name: name, 
            provider: provider, 
            subscriptionTargetConfig: subscriptionTargetConfig
        )
        return try await self.updateSubscriptionTarget(input, logger: logger)
    }

    /// Updates the specified user profile in Amazon DataZone.
    @Sendable
    @inlinable
    public func updateUserProfile(_ input: UpdateUserProfileInput, logger: Logger = AWSClient.loggingDisabled) async throws -> UpdateUserProfileOutput {
        try await self.client.execute(
            operation: "UpdateUserProfile", 
            path: "/v2/domains/{domainIdentifier}/user-profiles/{userIdentifier}", 
            httpMethod: .PUT, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Updates the specified user profile in Amazon DataZone.
    ///
    /// Parameters:
    ///   - domainIdentifier: The identifier of the Amazon DataZone domain in which a user profile is updated.
    ///   - status: The status of the user profile that are to be updated.
    ///   - type: The type of the user profile that are to be updated.
    ///   - userIdentifier: The identifier of the user whose user profile is to be updated.
    ///   - logger: Logger use during operation
    @inlinable
    public func updateUserProfile(
        domainIdentifier: String,
        status: UserProfileStatus,
        type: UserProfileType? = nil,
        userIdentifier: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> UpdateUserProfileOutput {
        let input = UpdateUserProfileInput(
            domainIdentifier: domainIdentifier, 
            status: status, 
            type: type, 
            userIdentifier: userIdentifier
        )
        return try await self.updateUserProfile(input, logger: logger)
    }
}

extension DataZone {
    /// Initializer required by `AWSService.with(middlewares:timeout:byteBufferAllocator:options)`. You are not able to use this initializer directly as there are not public
    /// initializers for `AWSServiceConfig.Patch`. Please use `AWSService.with(middlewares:timeout:byteBufferAllocator:options)` instead.
    public init(from: DataZone, patch: AWSServiceConfig.Patch) {
        self.client = from.client
        self.config = from.config.with(patch: patch)
    }
}

// MARK: Paginators

@available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
extension DataZone {
    /// Return PaginatorSequence for operation ``listAssetFilters(_:logger:)``.
    ///
    /// - Parameters:
    ///   - input: Input for operation
    ///   - logger: Logger used for logging
    @inlinable
    public func listAssetFiltersPaginator(
        _ input: ListAssetFiltersInput,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<ListAssetFiltersInput, ListAssetFiltersOutput> {
        return .init(
            input: input,
            command: self.listAssetFilters,
            inputKey: \ListAssetFiltersInput.nextToken,
            outputKey: \ListAssetFiltersOutput.nextToken,
            logger: logger
        )
    }
    /// Return PaginatorSequence for operation ``listAssetFilters(_:logger:)``.
    ///
    /// - Parameters:
    ///   - assetIdentifier: The ID of the data asset.
    ///   - domainIdentifier: The ID of the domain where you want to list asset filters.
    ///   - maxResults: The maximum number of asset filters to return in a single call to ListAssetFilters. When the number of asset filters to be listed is greater than the value of MaxResults, the response contains a NextToken value that you can use in a subsequent call to ListAssetFilters to list the next set of asset filters.
    ///   - status: The status of the asset filter.
    ///   - logger: Logger used for logging
    @inlinable
    public func listAssetFiltersPaginator(
        assetIdentifier: String,
        domainIdentifier: String,
        maxResults: Int? = nil,
        status: FilterStatus? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) -> AWSClient.PaginatorSequence<ListAssetFiltersInput, ListAssetFiltersOutput> {
        let input = ListAssetFiltersInput(
            assetIdentifier: assetIdentifier, 
            domainIdentifier: domainIdentifier, 
            maxResults: maxResults, 
            status: status
        )
        return self.listAssetFiltersPaginator(input, logger: logger)
    }

    /// Return PaginatorSequence for operation ``listConnections(_:logger:)``.
    ///
    /// - Parameters:
    ///   - input: Input for operation
    ///   - logger: Logger used for logging
    @inlinable
    public func listConnectionsPaginator(
        _ input: ListConnectionsInput,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<ListConnectionsInput, ListConnectionsOutput> {
        return .init(
            input: input,
            command: self.listConnections,
            inputKey: \ListConnectionsInput.nextToken,
            outputKey: \ListConnectionsOutput.nextToken,
            logger: logger
        )
    }
    /// Return PaginatorSequence for operation ``listConnections(_:logger:)``.
    ///
    /// - Parameters:
    ///   - domainIdentifier: The ID of the domain where you want to list connections.
    ///   - environmentIdentifier: The ID of the environment where you want to list connections.
    ///   - maxResults: The maximum number of connections to return in a single call to ListConnections. When the number of connections to be listed is greater than the value of MaxResults, the response contains a NextToken value that you can use in a subsequent call to ListConnections to list the next set of connections.
    ///   - name: The name of the connection.
    ///   - projectIdentifier: The ID of the project where you want to list connections.
    ///   - sortBy: Specifies how you want to sort the listed connections.
    ///   - sortOrder: Specifies the sort order for the listed connections.
    ///   - type: The type of connection.
    ///   - logger: Logger used for logging
    @inlinable
    public func listConnectionsPaginator(
        domainIdentifier: String,
        environmentIdentifier: String? = nil,
        maxResults: Int? = nil,
        name: String? = nil,
        projectIdentifier: String,
        sortBy: SortFieldConnection? = nil,
        sortOrder: SortOrder? = nil,
        type: ConnectionType? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) -> AWSClient.PaginatorSequence<ListConnectionsInput, ListConnectionsOutput> {
        let input = ListConnectionsInput(
            domainIdentifier: domainIdentifier, 
            environmentIdentifier: environmentIdentifier, 
            maxResults: maxResults, 
            name: name, 
            projectIdentifier: projectIdentifier, 
            sortBy: sortBy, 
            sortOrder: sortOrder, 
            type: type
        )
        return self.listConnectionsPaginator(input, logger: logger)
    }

    /// Return PaginatorSequence for operation ``listDataProductRevisions(_:logger:)``.
    ///
    /// - Parameters:
    ///   - input: Input for operation
    ///   - logger: Logger used for logging
    @inlinable
    public func listDataProductRevisionsPaginator(
        _ input: ListDataProductRevisionsInput,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<ListDataProductRevisionsInput, ListDataProductRevisionsOutput> {
        return .init(
            input: input,
            command: self.listDataProductRevisions,
            inputKey: \ListDataProductRevisionsInput.nextToken,
            outputKey: \ListDataProductRevisionsOutput.nextToken,
            logger: logger
        )
    }
    /// Return PaginatorSequence for operation ``listDataProductRevisions(_:logger:)``.
    ///
    /// - Parameters:
    ///   - domainIdentifier: The ID of the domain of the data product revisions that you want to list.
    ///   - identifier: The ID of the data product revision.
    ///   - maxResults: The maximum number of asset filters to return in a single call to ListDataProductRevisions. When the number of data product revisions to be listed is greater than the value of MaxResults, the response contains a NextToken value that you can use in a subsequent call to ListDataProductRevisions to list the next set of data product revisions.
    ///   - logger: Logger used for logging
    @inlinable
    public func listDataProductRevisionsPaginator(
        domainIdentifier: String,
        identifier: String,
        maxResults: Int? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) -> AWSClient.PaginatorSequence<ListDataProductRevisionsInput, ListDataProductRevisionsOutput> {
        let input = ListDataProductRevisionsInput(
            domainIdentifier: domainIdentifier, 
            identifier: identifier, 
            maxResults: maxResults
        )
        return self.listDataProductRevisionsPaginator(input, logger: logger)
    }

    /// Return PaginatorSequence for operation ``listDataSourceRunActivities(_:logger:)``.
    ///
    /// - Parameters:
    ///   - input: Input for operation
    ///   - logger: Logger used for logging
    @inlinable
    public func listDataSourceRunActivitiesPaginator(
        _ input: ListDataSourceRunActivitiesInput,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<ListDataSourceRunActivitiesInput, ListDataSourceRunActivitiesOutput> {
        return .init(
            input: input,
            command: self.listDataSourceRunActivities,
            inputKey: \ListDataSourceRunActivitiesInput.nextToken,
            outputKey: \ListDataSourceRunActivitiesOutput.nextToken,
            logger: logger
        )
    }
    /// Return PaginatorSequence for operation ``listDataSourceRunActivities(_:logger:)``.
    ///
    /// - Parameters:
    ///   - domainIdentifier: The identifier of the Amazon DataZone domain in which to list data source run activities.
    ///   - identifier: The identifier of the data source run.
    ///   - maxResults: The maximum number of activities to return in a single call to ListDataSourceRunActivities. When the number of activities to be listed is greater than the value of MaxResults, the response contains a NextToken value that you can use in a subsequent call to ListDataSourceRunActivities to list the next set of activities.
    ///   - status: The status of the data source run.
    ///   - logger: Logger used for logging
    @inlinable
    public func listDataSourceRunActivitiesPaginator(
        domainIdentifier: String,
        identifier: String,
        maxResults: Int? = nil,
        status: DataAssetActivityStatus? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) -> AWSClient.PaginatorSequence<ListDataSourceRunActivitiesInput, ListDataSourceRunActivitiesOutput> {
        let input = ListDataSourceRunActivitiesInput(
            domainIdentifier: domainIdentifier, 
            identifier: identifier, 
            maxResults: maxResults, 
            status: status
        )
        return self.listDataSourceRunActivitiesPaginator(input, logger: logger)
    }

    /// Return PaginatorSequence for operation ``listDataSourceRuns(_:logger:)``.
    ///
    /// - Parameters:
    ///   - input: Input for operation
    ///   - logger: Logger used for logging
    @inlinable
    public func listDataSourceRunsPaginator(
        _ input: ListDataSourceRunsInput,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<ListDataSourceRunsInput, ListDataSourceRunsOutput> {
        return .init(
            input: input,
            command: self.listDataSourceRuns,
            inputKey: \ListDataSourceRunsInput.nextToken,
            outputKey: \ListDataSourceRunsOutput.nextToken,
            logger: logger
        )
    }
    /// Return PaginatorSequence for operation ``listDataSourceRuns(_:logger:)``.
    ///
    /// - Parameters:
    ///   - dataSourceIdentifier: The identifier of the data source.
    ///   - domainIdentifier: The identifier of the Amazon DataZone domain in which to invoke the ListDataSourceRuns action.
    ///   - maxResults: The maximum number of runs to return in a single call to ListDataSourceRuns. When the number of runs to be listed is greater than the value of MaxResults, the response contains a NextToken value that you can use in a subsequent call to ListDataSourceRuns to list the next set of runs.
    ///   - status: The status of the data source.
    ///   - logger: Logger used for logging
    @inlinable
    public func listDataSourceRunsPaginator(
        dataSourceIdentifier: String,
        domainIdentifier: String,
        maxResults: Int? = nil,
        status: DataSourceRunStatus? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) -> AWSClient.PaginatorSequence<ListDataSourceRunsInput, ListDataSourceRunsOutput> {
        let input = ListDataSourceRunsInput(
            dataSourceIdentifier: dataSourceIdentifier, 
            domainIdentifier: domainIdentifier, 
            maxResults: maxResults, 
            status: status
        )
        return self.listDataSourceRunsPaginator(input, logger: logger)
    }

    /// Return PaginatorSequence for operation ``listDataSources(_:logger:)``.
    ///
    /// - Parameters:
    ///   - input: Input for operation
    ///   - logger: Logger used for logging
    @inlinable
    public func listDataSourcesPaginator(
        _ input: ListDataSourcesInput,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<ListDataSourcesInput, ListDataSourcesOutput> {
        return .init(
            input: input,
            command: self.listDataSources,
            inputKey: \ListDataSourcesInput.nextToken,
            outputKey: \ListDataSourcesOutput.nextToken,
            logger: logger
        )
    }
    /// Return PaginatorSequence for operation ``listDataSources(_:logger:)``.
    ///
    /// - Parameters:
    ///   - connectionIdentifier: The ID of the connection.
    ///   - domainIdentifier: The identifier of the Amazon DataZone domain in which to list the data sources.
    ///   - environmentIdentifier: The identifier of the environment in which to list the data sources.
    ///   - maxResults: The maximum number of data sources to return in a single call to ListDataSources. When the number of data sources to be listed is greater than the value of MaxResults, the response contains a NextToken value that you can use in a subsequent call to ListDataSources to list the next set of data sources.
    ///   - name: The name of the data source.
    ///   - projectIdentifier: The identifier of the project in which to list data sources.
    ///   - status: The status of the data source.
    ///   - type: The type of the data source.
    ///   - logger: Logger used for logging
    @inlinable
    public func listDataSourcesPaginator(
        connectionIdentifier: String? = nil,
        domainIdentifier: String,
        environmentIdentifier: String? = nil,
        maxResults: Int? = nil,
        name: String? = nil,
        projectIdentifier: String,
        status: DataSourceStatus? = nil,
        type: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) -> AWSClient.PaginatorSequence<ListDataSourcesInput, ListDataSourcesOutput> {
        let input = ListDataSourcesInput(
            connectionIdentifier: connectionIdentifier, 
            domainIdentifier: domainIdentifier, 
            environmentIdentifier: environmentIdentifier, 
            maxResults: maxResults, 
            name: name, 
            projectIdentifier: projectIdentifier, 
            status: status, 
            type: type
        )
        return self.listDataSourcesPaginator(input, logger: logger)
    }

    /// Return PaginatorSequence for operation ``listDomainUnitsForParent(_:logger:)``.
    ///
    /// - Parameters:
    ///   - input: Input for operation
    ///   - logger: Logger used for logging
    @inlinable
    public func listDomainUnitsForParentPaginator(
        _ input: ListDomainUnitsForParentInput,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<ListDomainUnitsForParentInput, ListDomainUnitsForParentOutput> {
        return .init(
            input: input,
            command: self.listDomainUnitsForParent,
            inputKey: \ListDomainUnitsForParentInput.nextToken,
            outputKey: \ListDomainUnitsForParentOutput.nextToken,
            logger: logger
        )
    }
    /// Return PaginatorSequence for operation ``listDomainUnitsForParent(_:logger:)``.
    ///
    /// - Parameters:
    ///   - domainIdentifier: The ID of the domain in which you want to list domain units for a parent domain unit.
    ///   - maxResults: The maximum number of domain units to return in a single call to ListDomainUnitsForParent. When the number of domain units to be listed is greater than the value of MaxResults, the response contains a NextToken value that you can use in a subsequent call to ListDomainUnitsForParent to list the next set of domain units.
    ///   - parentDomainUnitIdentifier: The ID of the parent domain unit.
    ///   - logger: Logger used for logging
    @inlinable
    public func listDomainUnitsForParentPaginator(
        domainIdentifier: String,
        maxResults: Int? = nil,
        parentDomainUnitIdentifier: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) -> AWSClient.PaginatorSequence<ListDomainUnitsForParentInput, ListDomainUnitsForParentOutput> {
        let input = ListDomainUnitsForParentInput(
            domainIdentifier: domainIdentifier, 
            maxResults: maxResults, 
            parentDomainUnitIdentifier: parentDomainUnitIdentifier
        )
        return self.listDomainUnitsForParentPaginator(input, logger: logger)
    }

    /// Return PaginatorSequence for operation ``listDomains(_:logger:)``.
    ///
    /// - Parameters:
    ///   - input: Input for operation
    ///   - logger: Logger used for logging
    @inlinable
    public func listDomainsPaginator(
        _ input: ListDomainsInput,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<ListDomainsInput, ListDomainsOutput> {
        return .init(
            input: input,
            command: self.listDomains,
            inputKey: \ListDomainsInput.nextToken,
            outputKey: \ListDomainsOutput.nextToken,
            logger: logger
        )
    }
    /// Return PaginatorSequence for operation ``listDomains(_:logger:)``.
    ///
    /// - Parameters:
    ///   - maxResults: The maximum number of domains to return in a single call to ListDomains. When the number of domains to be listed is greater than the value of MaxResults, the response contains a NextToken value that you can use in a subsequent call to ListDomains to list the next set of domains.
    ///   - status: The status of the data source.
    ///   - logger: Logger used for logging
    @inlinable
    public func listDomainsPaginator(
        maxResults: Int? = nil,
        status: DomainStatus? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) -> AWSClient.PaginatorSequence<ListDomainsInput, ListDomainsOutput> {
        let input = ListDomainsInput(
            maxResults: maxResults, 
            status: status
        )
        return self.listDomainsPaginator(input, logger: logger)
    }

    /// Return PaginatorSequence for operation ``listEntityOwners(_:logger:)``.
    ///
    /// - Parameters:
    ///   - input: Input for operation
    ///   - logger: Logger used for logging
    @inlinable
    public func listEntityOwnersPaginator(
        _ input: ListEntityOwnersInput,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<ListEntityOwnersInput, ListEntityOwnersOutput> {
        return .init(
            input: input,
            command: self.listEntityOwners,
            inputKey: \ListEntityOwnersInput.nextToken,
            outputKey: \ListEntityOwnersOutput.nextToken,
            logger: logger
        )
    }
    /// Return PaginatorSequence for operation ``listEntityOwners(_:logger:)``.
    ///
    /// - Parameters:
    ///   - domainIdentifier: The ID of the domain where you want to list entity owners.
    ///   - entityIdentifier: The ID of the entity that you want to list.
    ///   - entityType: The type of the entity that you want to list.
    ///   - maxResults: The maximum number of entities to return in a single call to ListEntityOwners. When the number of entities to be listed is greater than the value of MaxResults, the response contains a NextToken value that you can use in a subsequent call to ListEntityOwners to list the next set of entities.
    ///   - logger: Logger used for logging
    @inlinable
    public func listEntityOwnersPaginator(
        domainIdentifier: String,
        entityIdentifier: String,
        entityType: DataZoneEntityType,
        maxResults: Int? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) -> AWSClient.PaginatorSequence<ListEntityOwnersInput, ListEntityOwnersOutput> {
        let input = ListEntityOwnersInput(
            domainIdentifier: domainIdentifier, 
            entityIdentifier: entityIdentifier, 
            entityType: entityType, 
            maxResults: maxResults
        )
        return self.listEntityOwnersPaginator(input, logger: logger)
    }

    /// Return PaginatorSequence for operation ``listEnvironmentActions(_:logger:)``.
    ///
    /// - Parameters:
    ///   - input: Input for operation
    ///   - logger: Logger used for logging
    @inlinable
    public func listEnvironmentActionsPaginator(
        _ input: ListEnvironmentActionsInput,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<ListEnvironmentActionsInput, ListEnvironmentActionsOutput> {
        return .init(
            input: input,
            command: self.listEnvironmentActions,
            inputKey: \ListEnvironmentActionsInput.nextToken,
            outputKey: \ListEnvironmentActionsOutput.nextToken,
            logger: logger
        )
    }
    /// Return PaginatorSequence for operation ``listEnvironmentActions(_:logger:)``.
    ///
    /// - Parameters:
    ///   - domainIdentifier: The ID of the Amazon DataZone domain in which the environment actions are listed.
    ///   - environmentIdentifier: The ID of the envrironment whose environment actions are listed.
    ///   - maxResults: The maximum number of environment actions to return in a single call to ListEnvironmentActions. When the number of environment actions to be listed is greater than the value of MaxResults, the response contains a NextToken value that you can use in a subsequent call to ListEnvironmentActions to list the next set of environment actions.
    ///   - logger: Logger used for logging
    @inlinable
    public func listEnvironmentActionsPaginator(
        domainIdentifier: String,
        environmentIdentifier: String,
        maxResults: Int? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) -> AWSClient.PaginatorSequence<ListEnvironmentActionsInput, ListEnvironmentActionsOutput> {
        let input = ListEnvironmentActionsInput(
            domainIdentifier: domainIdentifier, 
            environmentIdentifier: environmentIdentifier, 
            maxResults: maxResults
        )
        return self.listEnvironmentActionsPaginator(input, logger: logger)
    }

    /// Return PaginatorSequence for operation ``listEnvironmentBlueprintConfigurations(_:logger:)``.
    ///
    /// - Parameters:
    ///   - input: Input for operation
    ///   - logger: Logger used for logging
    @inlinable
    public func listEnvironmentBlueprintConfigurationsPaginator(
        _ input: ListEnvironmentBlueprintConfigurationsInput,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<ListEnvironmentBlueprintConfigurationsInput, ListEnvironmentBlueprintConfigurationsOutput> {
        return .init(
            input: input,
            command: self.listEnvironmentBlueprintConfigurations,
            inputKey: \ListEnvironmentBlueprintConfigurationsInput.nextToken,
            outputKey: \ListEnvironmentBlueprintConfigurationsOutput.nextToken,
            logger: logger
        )
    }
    /// Return PaginatorSequence for operation ``listEnvironmentBlueprintConfigurations(_:logger:)``.
    ///
    /// - Parameters:
    ///   - domainIdentifier: The identifier of the Amazon DataZone domain.
    ///   - maxResults: The maximum number of blueprint configurations to return in a single call to ListEnvironmentBlueprintConfigurations. When the number of configurations to be listed is greater than the value of MaxResults, the response contains a NextToken value that you can use in a subsequent call to ListEnvironmentBlueprintConfigurations to list the next set of configurations.
    ///   - logger: Logger used for logging
    @inlinable
    public func listEnvironmentBlueprintConfigurationsPaginator(
        domainIdentifier: String,
        maxResults: Int? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) -> AWSClient.PaginatorSequence<ListEnvironmentBlueprintConfigurationsInput, ListEnvironmentBlueprintConfigurationsOutput> {
        let input = ListEnvironmentBlueprintConfigurationsInput(
            domainIdentifier: domainIdentifier, 
            maxResults: maxResults
        )
        return self.listEnvironmentBlueprintConfigurationsPaginator(input, logger: logger)
    }

    /// Return PaginatorSequence for operation ``listEnvironmentBlueprints(_:logger:)``.
    ///
    /// - Parameters:
    ///   - input: Input for operation
    ///   - logger: Logger used for logging
    @inlinable
    public func listEnvironmentBlueprintsPaginator(
        _ input: ListEnvironmentBlueprintsInput,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<ListEnvironmentBlueprintsInput, ListEnvironmentBlueprintsOutput> {
        return .init(
            input: input,
            command: self.listEnvironmentBlueprints,
            inputKey: \ListEnvironmentBlueprintsInput.nextToken,
            outputKey: \ListEnvironmentBlueprintsOutput.nextToken,
            logger: logger
        )
    }
    /// Return PaginatorSequence for operation ``listEnvironmentBlueprints(_:logger:)``.
    ///
    /// - Parameters:
    ///   - domainIdentifier: The identifier of the Amazon DataZone domain.
    ///   - managed: Specifies whether the environment blueprint is managed by Amazon DataZone.
    ///   - maxResults: The maximum number of blueprints to return in a single call to ListEnvironmentBlueprints. When the number of blueprints to be listed is greater than the value of MaxResults, the response contains a NextToken value that you can use in a subsequent call to ListEnvironmentBlueprints to list the next set of blueprints.
    ///   - name: The name of the Amazon DataZone environment.
    ///   - logger: Logger used for logging
    @inlinable
    public func listEnvironmentBlueprintsPaginator(
        domainIdentifier: String,
        managed: Bool? = nil,
        maxResults: Int? = nil,
        name: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) -> AWSClient.PaginatorSequence<ListEnvironmentBlueprintsInput, ListEnvironmentBlueprintsOutput> {
        let input = ListEnvironmentBlueprintsInput(
            domainIdentifier: domainIdentifier, 
            managed: managed, 
            maxResults: maxResults, 
            name: name
        )
        return self.listEnvironmentBlueprintsPaginator(input, logger: logger)
    }

    /// Return PaginatorSequence for operation ``listEnvironmentProfiles(_:logger:)``.
    ///
    /// - Parameters:
    ///   - input: Input for operation
    ///   - logger: Logger used for logging
    @inlinable
    public func listEnvironmentProfilesPaginator(
        _ input: ListEnvironmentProfilesInput,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<ListEnvironmentProfilesInput, ListEnvironmentProfilesOutput> {
        return .init(
            input: input,
            command: self.listEnvironmentProfiles,
            inputKey: \ListEnvironmentProfilesInput.nextToken,
            outputKey: \ListEnvironmentProfilesOutput.nextToken,
            logger: logger
        )
    }
    /// Return PaginatorSequence for operation ``listEnvironmentProfiles(_:logger:)``.
    ///
    /// - Parameters:
    ///   - awsAccountId: The identifier of the Amazon Web Services account where you want to list environment profiles.
    ///   - awsAccountRegion: The Amazon Web Services region where you want to list environment profiles.
    ///   - domainIdentifier: The identifier of the Amazon DataZone domain.
    ///   - environmentBlueprintIdentifier: The identifier of the blueprint that was used to create the environment profiles that you want to list.
    ///   - maxResults: The maximum number of environment profiles to return in a single call to ListEnvironmentProfiles. When the number of environment profiles to be listed is greater than the value of MaxResults, the response contains a NextToken value that you can use in a subsequent call to ListEnvironmentProfiles to list the next set of environment profiles.
    ///   - name: 
    ///   - projectIdentifier: The identifier of the Amazon DataZone project.
    ///   - logger: Logger used for logging
    @inlinable
    public func listEnvironmentProfilesPaginator(
        awsAccountId: String? = nil,
        awsAccountRegion: String? = nil,
        domainIdentifier: String,
        environmentBlueprintIdentifier: String? = nil,
        maxResults: Int? = nil,
        name: String? = nil,
        projectIdentifier: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) -> AWSClient.PaginatorSequence<ListEnvironmentProfilesInput, ListEnvironmentProfilesOutput> {
        let input = ListEnvironmentProfilesInput(
            awsAccountId: awsAccountId, 
            awsAccountRegion: awsAccountRegion, 
            domainIdentifier: domainIdentifier, 
            environmentBlueprintIdentifier: environmentBlueprintIdentifier, 
            maxResults: maxResults, 
            name: name, 
            projectIdentifier: projectIdentifier
        )
        return self.listEnvironmentProfilesPaginator(input, logger: logger)
    }

    /// Return PaginatorSequence for operation ``listEnvironments(_:logger:)``.
    ///
    /// - Parameters:
    ///   - input: Input for operation
    ///   - logger: Logger used for logging
    @inlinable
    public func listEnvironmentsPaginator(
        _ input: ListEnvironmentsInput,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<ListEnvironmentsInput, ListEnvironmentsOutput> {
        return .init(
            input: input,
            command: self.listEnvironments,
            inputKey: \ListEnvironmentsInput.nextToken,
            outputKey: \ListEnvironmentsOutput.nextToken,
            logger: logger
        )
    }
    /// Return PaginatorSequence for operation ``listEnvironments(_:logger:)``.
    ///
    /// - Parameters:
    ///   - awsAccountId: The identifier of the Amazon Web Services account where you want to list environments.
    ///   - awsAccountRegion: The Amazon Web Services region where you want to list environments.
    ///   - domainIdentifier: The identifier of the Amazon DataZone domain.
    ///   - environmentBlueprintIdentifier: The identifier of the Amazon DataZone blueprint.
    ///   - environmentProfileIdentifier: The identifier of the environment profile.
    ///   - maxResults: The maximum number of environments to return in a single call to ListEnvironments. When the number of environments to be listed is greater than the value of MaxResults, the response contains a NextToken value that you can use in a subsequent call to ListEnvironments to list the next set of environments.
    ///   - name: The name of the environment.
    ///   - projectIdentifier: The identifier of the Amazon DataZone project.
    ///   - provider: The provider of the environment.
    ///   - status: The status of the environments that you want to list.
    ///   - logger: Logger used for logging
    @inlinable
    public func listEnvironmentsPaginator(
        awsAccountId: String? = nil,
        awsAccountRegion: String? = nil,
        domainIdentifier: String,
        environmentBlueprintIdentifier: String? = nil,
        environmentProfileIdentifier: String? = nil,
        maxResults: Int? = nil,
        name: String? = nil,
        projectIdentifier: String,
        provider: String? = nil,
        status: EnvironmentStatus? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) -> AWSClient.PaginatorSequence<ListEnvironmentsInput, ListEnvironmentsOutput> {
        let input = ListEnvironmentsInput(
            awsAccountId: awsAccountId, 
            awsAccountRegion: awsAccountRegion, 
            domainIdentifier: domainIdentifier, 
            environmentBlueprintIdentifier: environmentBlueprintIdentifier, 
            environmentProfileIdentifier: environmentProfileIdentifier, 
            maxResults: maxResults, 
            name: name, 
            projectIdentifier: projectIdentifier, 
            provider: provider, 
            status: status
        )
        return self.listEnvironmentsPaginator(input, logger: logger)
    }

    /// Return PaginatorSequence for operation ``listJobRuns(_:logger:)``.
    ///
    /// - Parameters:
    ///   - input: Input for operation
    ///   - logger: Logger used for logging
    @inlinable
    public func listJobRunsPaginator(
        _ input: ListJobRunsInput,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<ListJobRunsInput, ListJobRunsOutput> {
        return .init(
            input: input,
            command: self.listJobRuns,
            inputKey: \ListJobRunsInput.nextToken,
            outputKey: \ListJobRunsOutput.nextToken,
            logger: logger
        )
    }
    /// Return PaginatorSequence for operation ``listJobRuns(_:logger:)``.
    ///
    /// - Parameters:
    ///   - domainIdentifier: The ID of the domain where you want to list job runs.
    ///   - jobIdentifier: The ID of the job run.
    ///   - maxResults: The maximum number of job runs to return in a single call to ListJobRuns. When the number of job runs to be listed is greater than the value of MaxResults, the response contains a NextToken value that you can use in a subsequent call to ListJobRuns to list the next set of job runs.
    ///   - sortOrder: Specifies the order in which job runs are to be sorted.
    ///   - status: The status of a job run.
    ///   - logger: Logger used for logging
    @inlinable
    public func listJobRunsPaginator(
        domainIdentifier: String,
        jobIdentifier: String,
        maxResults: Int? = nil,
        sortOrder: SortOrder? = nil,
        status: JobRunStatus? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) -> AWSClient.PaginatorSequence<ListJobRunsInput, ListJobRunsOutput> {
        let input = ListJobRunsInput(
            domainIdentifier: domainIdentifier, 
            jobIdentifier: jobIdentifier, 
            maxResults: maxResults, 
            sortOrder: sortOrder, 
            status: status
        )
        return self.listJobRunsPaginator(input, logger: logger)
    }

    /// Return PaginatorSequence for operation ``listLineageEvents(_:logger:)``.
    ///
    /// - Parameters:
    ///   - input: Input for operation
    ///   - logger: Logger used for logging
    @inlinable
    public func listLineageEventsPaginator(
        _ input: ListLineageEventsInput,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<ListLineageEventsInput, ListLineageEventsOutput> {
        return .init(
            input: input,
            command: self.listLineageEvents,
            inputKey: \ListLineageEventsInput.nextToken,
            outputKey: \ListLineageEventsOutput.nextToken,
            logger: logger
        )
    }
    /// Return PaginatorSequence for operation ``listLineageEvents(_:logger:)``.
    ///
    /// - Parameters:
    ///   - domainIdentifier: The ID of the domain where you want to list lineage events.
    ///   - maxResults: The maximum number of lineage events to return in a single call to ListLineageEvents. When the number of lineage events to be listed is greater than the value of MaxResults, the response contains a NextToken value that you can use in a subsequent call to ListLineageEvents to list the next set of lineage events.
    ///   - processingStatus: The processing status of a lineage event.
    ///   - sortOrder: The sort order of the lineage events.
    ///   - timestampAfter: The after timestamp of a lineage event.
    ///   - timestampBefore: The before timestamp of a lineage event.
    ///   - logger: Logger used for logging
    @inlinable
    public func listLineageEventsPaginator(
        domainIdentifier: String,
        maxResults: Int? = nil,
        processingStatus: LineageEventProcessingStatus? = nil,
        sortOrder: SortOrder? = nil,
        timestampAfter: Date? = nil,
        timestampBefore: Date? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) -> AWSClient.PaginatorSequence<ListLineageEventsInput, ListLineageEventsOutput> {
        let input = ListLineageEventsInput(
            domainIdentifier: domainIdentifier, 
            maxResults: maxResults, 
            processingStatus: processingStatus, 
            sortOrder: sortOrder, 
            timestampAfter: timestampAfter, 
            timestampBefore: timestampBefore
        )
        return self.listLineageEventsPaginator(input, logger: logger)
    }

    /// Return PaginatorSequence for operation ``listLineageNodeHistory(_:logger:)``.
    ///
    /// - Parameters:
    ///   - input: Input for operation
    ///   - logger: Logger used for logging
    @inlinable
    public func listLineageNodeHistoryPaginator(
        _ input: ListLineageNodeHistoryInput,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<ListLineageNodeHistoryInput, ListLineageNodeHistoryOutput> {
        return .init(
            input: input,
            command: self.listLineageNodeHistory,
            inputKey: \ListLineageNodeHistoryInput.nextToken,
            outputKey: \ListLineageNodeHistoryOutput.nextToken,
            logger: logger
        )
    }
    /// Return PaginatorSequence for operation ``listLineageNodeHistory(_:logger:)``.
    ///
    /// - Parameters:
    ///   - direction: The direction of the data lineage node refers to the lineage node having neighbors in that direction. For example, if direction is UPSTREAM, the ListLineageNodeHistory API responds with historical versions with upstream neighbors only.
    ///   - domainIdentifier: The ID of the domain where you want to list the history of the specified data lineage node.
    ///   - eventTimestampGTE: Specifies whether the action is to return data lineage node history from the time after the event timestamp.
    ///   - eventTimestampLTE: Specifies whether the action is to return data lineage node history from the time prior of the event timestamp.
    ///   - identifier: The ID of the data lineage node whose history you want to list.
    ///   - maxResults: The maximum number of history items to return in a single call to ListLineageNodeHistory. When the number of memberships to be listed is greater than the value of MaxResults, the response contains a NextToken value that you can use in a subsequent call to ListLineageNodeHistory to list the next set of items.
    ///   - sortOrder: The order by which you want data lineage node history to be sorted.
    ///   - logger: Logger used for logging
    @inlinable
    public func listLineageNodeHistoryPaginator(
        direction: EdgeDirection? = nil,
        domainIdentifier: String,
        eventTimestampGTE: Date? = nil,
        eventTimestampLTE: Date? = nil,
        identifier: String,
        maxResults: Int? = nil,
        sortOrder: SortOrder? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) -> AWSClient.PaginatorSequence<ListLineageNodeHistoryInput, ListLineageNodeHistoryOutput> {
        let input = ListLineageNodeHistoryInput(
            direction: direction, 
            domainIdentifier: domainIdentifier, 
            eventTimestampGTE: eventTimestampGTE, 
            eventTimestampLTE: eventTimestampLTE, 
            identifier: identifier, 
            maxResults: maxResults, 
            sortOrder: sortOrder
        )
        return self.listLineageNodeHistoryPaginator(input, logger: logger)
    }

    /// Return PaginatorSequence for operation ``listMetadataGenerationRuns(_:logger:)``.
    ///
    /// - Parameters:
    ///   - input: Input for operation
    ///   - logger: Logger used for logging
    @inlinable
    public func listMetadataGenerationRunsPaginator(
        _ input: ListMetadataGenerationRunsInput,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<ListMetadataGenerationRunsInput, ListMetadataGenerationRunsOutput> {
        return .init(
            input: input,
            command: self.listMetadataGenerationRuns,
            inputKey: \ListMetadataGenerationRunsInput.nextToken,
            outputKey: \ListMetadataGenerationRunsOutput.nextToken,
            logger: logger
        )
    }
    /// Return PaginatorSequence for operation ``listMetadataGenerationRuns(_:logger:)``.
    ///
    /// - Parameters:
    ///   - domainIdentifier: The ID of the Amazon DataZone domain where you want to list metadata generation runs.
    ///   - maxResults: The maximum number of metadata generation runs to return in a single call to ListMetadataGenerationRuns. When the number of metadata generation runs to be listed is greater than the value of MaxResults, the response contains a NextToken value that you can use in a subsequent call to ListMetadataGenerationRuns to list the next set of revisions.
    ///   - status: The status of the metadata generation runs.
    ///   - type: The type of the metadata generation runs.
    ///   - logger: Logger used for logging
    @inlinable
    public func listMetadataGenerationRunsPaginator(
        domainIdentifier: String,
        maxResults: Int? = nil,
        status: MetadataGenerationRunStatus? = nil,
        type: MetadataGenerationRunType? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) -> AWSClient.PaginatorSequence<ListMetadataGenerationRunsInput, ListMetadataGenerationRunsOutput> {
        let input = ListMetadataGenerationRunsInput(
            domainIdentifier: domainIdentifier, 
            maxResults: maxResults, 
            status: status, 
            type: type
        )
        return self.listMetadataGenerationRunsPaginator(input, logger: logger)
    }

    /// Return PaginatorSequence for operation ``listNotifications(_:logger:)``.
    ///
    /// - Parameters:
    ///   - input: Input for operation
    ///   - logger: Logger used for logging
    @inlinable
    public func listNotificationsPaginator(
        _ input: ListNotificationsInput,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<ListNotificationsInput, ListNotificationsOutput> {
        return .init(
            input: input,
            command: self.listNotifications,
            inputKey: \ListNotificationsInput.nextToken,
            outputKey: \ListNotificationsOutput.nextToken,
            logger: logger
        )
    }
    /// Return PaginatorSequence for operation ``listNotifications(_:logger:)``.
    ///
    /// - Parameters:
    ///   - afterTimestamp: The time after which you want to list notifications.
    ///   - beforeTimestamp: The time before which you want to list notifications.
    ///   - domainIdentifier: The identifier of the Amazon DataZone domain.
    ///   - maxResults: The maximum number of notifications to return in a single call to ListNotifications. When the number of notifications to be listed is greater than the value of MaxResults, the response contains a NextToken value that you can use in a subsequent call to ListNotifications to list the next set of notifications.
    ///   - subjects: The subjects of notifications.
    ///   - taskStatus: The task status of notifications.
    ///   - type: The type of notifications.
    ///   - logger: Logger used for logging
    @inlinable
    public func listNotificationsPaginator(
        afterTimestamp: Date? = nil,
        beforeTimestamp: Date? = nil,
        domainIdentifier: String,
        maxResults: Int? = nil,
        subjects: [String]? = nil,
        taskStatus: TaskStatus? = nil,
        type: NotificationType,
        logger: Logger = AWSClient.loggingDisabled        
    ) -> AWSClient.PaginatorSequence<ListNotificationsInput, ListNotificationsOutput> {
        let input = ListNotificationsInput(
            afterTimestamp: afterTimestamp, 
            beforeTimestamp: beforeTimestamp, 
            domainIdentifier: domainIdentifier, 
            maxResults: maxResults, 
            subjects: subjects, 
            taskStatus: taskStatus, 
            type: type
        )
        return self.listNotificationsPaginator(input, logger: logger)
    }

    /// Return PaginatorSequence for operation ``listPolicyGrants(_:logger:)``.
    ///
    /// - Parameters:
    ///   - input: Input for operation
    ///   - logger: Logger used for logging
    @inlinable
    public func listPolicyGrantsPaginator(
        _ input: ListPolicyGrantsInput,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<ListPolicyGrantsInput, ListPolicyGrantsOutput> {
        return .init(
            input: input,
            command: self.listPolicyGrants,
            inputKey: \ListPolicyGrantsInput.nextToken,
            outputKey: \ListPolicyGrantsOutput.nextToken,
            logger: logger
        )
    }
    /// Return PaginatorSequence for operation ``listPolicyGrants(_:logger:)``.
    ///
    /// - Parameters:
    ///   - domainIdentifier: The ID of the domain where you want to list policy grants.
    ///   - entityIdentifier: The ID of the entity for which you want to list policy grants.
    ///   - entityType: The type of entity for which you want to list policy grants.
    ///   - maxResults: The maximum number of grants to return in a single call to ListPolicyGrants. When the number of grants to be listed is greater than the value of MaxResults, the response contains a NextToken value that you can use in a subsequent call to ListPolicyGrants to list the next set of grants.
    ///   - policyType: The type of policy that you want to list.
    ///   - logger: Logger used for logging
    @inlinable
    public func listPolicyGrantsPaginator(
        domainIdentifier: String,
        entityIdentifier: String,
        entityType: TargetEntityType,
        maxResults: Int? = nil,
        policyType: ManagedPolicyType,
        logger: Logger = AWSClient.loggingDisabled        
    ) -> AWSClient.PaginatorSequence<ListPolicyGrantsInput, ListPolicyGrantsOutput> {
        let input = ListPolicyGrantsInput(
            domainIdentifier: domainIdentifier, 
            entityIdentifier: entityIdentifier, 
            entityType: entityType, 
            maxResults: maxResults, 
            policyType: policyType
        )
        return self.listPolicyGrantsPaginator(input, logger: logger)
    }

    /// Return PaginatorSequence for operation ``listProjectMemberships(_:logger:)``.
    ///
    /// - Parameters:
    ///   - input: Input for operation
    ///   - logger: Logger used for logging
    @inlinable
    public func listProjectMembershipsPaginator(
        _ input: ListProjectMembershipsInput,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<ListProjectMembershipsInput, ListProjectMembershipsOutput> {
        return .init(
            input: input,
            command: self.listProjectMemberships,
            inputKey: \ListProjectMembershipsInput.nextToken,
            outputKey: \ListProjectMembershipsOutput.nextToken,
            logger: logger
        )
    }
    /// Return PaginatorSequence for operation ``listProjectMemberships(_:logger:)``.
    ///
    /// - Parameters:
    ///   - domainIdentifier: The identifier of the Amazon DataZone domain in which you want to list project memberships.
    ///   - maxResults: The maximum number of memberships to return in a single call to ListProjectMemberships. When the number of memberships to be listed is greater than the value of MaxResults, the response contains a NextToken value that you can use in a subsequent call to ListProjectMemberships to list the next set of memberships.
    ///   - projectIdentifier: The identifier of the project whose memberships you want to list.
    ///   - sortBy: The method by which you want to sort the project memberships.
    ///   - sortOrder: The sort order of the project memberships.
    ///   - logger: Logger used for logging
    @inlinable
    public func listProjectMembershipsPaginator(
        domainIdentifier: String,
        maxResults: Int? = nil,
        projectIdentifier: String,
        sortBy: SortFieldProject? = nil,
        sortOrder: SortOrder? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) -> AWSClient.PaginatorSequence<ListProjectMembershipsInput, ListProjectMembershipsOutput> {
        let input = ListProjectMembershipsInput(
            domainIdentifier: domainIdentifier, 
            maxResults: maxResults, 
            projectIdentifier: projectIdentifier, 
            sortBy: sortBy, 
            sortOrder: sortOrder
        )
        return self.listProjectMembershipsPaginator(input, logger: logger)
    }

    /// Return PaginatorSequence for operation ``listProjectProfiles(_:logger:)``.
    ///
    /// - Parameters:
    ///   - input: Input for operation
    ///   - logger: Logger used for logging
    @inlinable
    public func listProjectProfilesPaginator(
        _ input: ListProjectProfilesInput,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<ListProjectProfilesInput, ListProjectProfilesOutput> {
        return .init(
            input: input,
            command: self.listProjectProfiles,
            inputKey: \ListProjectProfilesInput.nextToken,
            outputKey: \ListProjectProfilesOutput.nextToken,
            logger: logger
        )
    }
    /// Return PaginatorSequence for operation ``listProjectProfiles(_:logger:)``.
    ///
    /// - Parameters:
    ///   - domainIdentifier: The ID of the domain where you want to list project profiles.
    ///   - maxResults: The maximum number of project profiles to return in a single call to ListProjectProfiles. When the number of project profiles to be listed is greater than the value of MaxResults, the response contains a NextToken value that you can use in a subsequent call to ListProjectProfiles to list the next set of project profiles.
    ///   - name: The name of a project profile.
    ///   - sortBy: Specifies by what to sort project profiles.
    ///   - sortOrder: Specifies the sort order of the project profiles.
    ///   - logger: Logger used for logging
    @inlinable
    public func listProjectProfilesPaginator(
        domainIdentifier: String,
        maxResults: Int? = nil,
        name: String? = nil,
        sortBy: SortFieldProject? = nil,
        sortOrder: SortOrder? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) -> AWSClient.PaginatorSequence<ListProjectProfilesInput, ListProjectProfilesOutput> {
        let input = ListProjectProfilesInput(
            domainIdentifier: domainIdentifier, 
            maxResults: maxResults, 
            name: name, 
            sortBy: sortBy, 
            sortOrder: sortOrder
        )
        return self.listProjectProfilesPaginator(input, logger: logger)
    }

    /// Return PaginatorSequence for operation ``listProjects(_:logger:)``.
    ///
    /// - Parameters:
    ///   - input: Input for operation
    ///   - logger: Logger used for logging
    @inlinable
    public func listProjectsPaginator(
        _ input: ListProjectsInput,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<ListProjectsInput, ListProjectsOutput> {
        return .init(
            input: input,
            command: self.listProjects,
            inputKey: \ListProjectsInput.nextToken,
            outputKey: \ListProjectsOutput.nextToken,
            logger: logger
        )
    }
    /// Return PaginatorSequence for operation ``listProjects(_:logger:)``.
    ///
    /// - Parameters:
    ///   - domainIdentifier: The identifier of the Amazon DataZone domain.
    ///   - groupIdentifier: The identifier of a group.
    ///   - maxResults: The maximum number of projects to return in a single call to ListProjects. When the number of projects to be listed is greater than the value of MaxResults, the response contains a NextToken value that you can use in a subsequent call to ListProjects to list the next set of projects.
    ///   - name: The name of the project.
    ///   - userIdentifier: The identifier of the Amazon DataZone user.
    ///   - logger: Logger used for logging
    @inlinable
    public func listProjectsPaginator(
        domainIdentifier: String,
        groupIdentifier: String? = nil,
        maxResults: Int? = nil,
        name: String? = nil,
        userIdentifier: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) -> AWSClient.PaginatorSequence<ListProjectsInput, ListProjectsOutput> {
        let input = ListProjectsInput(
            domainIdentifier: domainIdentifier, 
            groupIdentifier: groupIdentifier, 
            maxResults: maxResults, 
            name: name, 
            userIdentifier: userIdentifier
        )
        return self.listProjectsPaginator(input, logger: logger)
    }

    /// Return PaginatorSequence for operation ``listRules(_:logger:)``.
    ///
    /// - Parameters:
    ///   - input: Input for operation
    ///   - logger: Logger used for logging
    @inlinable
    public func listRulesPaginator(
        _ input: ListRulesInput,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<ListRulesInput, ListRulesOutput> {
        return .init(
            input: input,
            command: self.listRules,
            inputKey: \ListRulesInput.nextToken,
            outputKey: \ListRulesOutput.nextToken,
            logger: logger
        )
    }
    /// Return PaginatorSequence for operation ``listRules(_:logger:)``.
    ///
    /// - Parameters:
    ///   - action: The action of the rule.
    ///   - assetTypes: The asset types of the rule.
    ///   - dataProduct: The data product of the rule.
    ///   - domainIdentifier: The ID of the domain in which the rules are to be listed.
    ///   - includeCascaded: Specifies whether to include cascading rules in the results.
    ///   - maxResults: The maximum number of rules to return in a single call to ListRules. When the number of rules to be listed is greater than the value of MaxResults, the response contains a NextToken value that you can use in a subsequent call to ListRules to list the next set of rules.
    ///   - projectIds: The IDs of projects in which rules are to be listed.
    ///   - ruleType: The type of the rule.
    ///   - targetIdentifier: The target ID of the rule.
    ///   - targetType: The target type of the rule.
    ///   - logger: Logger used for logging
    @inlinable
    public func listRulesPaginator(
        action: RuleAction? = nil,
        assetTypes: [String]? = nil,
        dataProduct: Bool? = nil,
        domainIdentifier: String,
        includeCascaded: Bool? = nil,
        maxResults: Int? = nil,
        projectIds: [String]? = nil,
        ruleType: RuleType? = nil,
        targetIdentifier: String,
        targetType: RuleTargetType,
        logger: Logger = AWSClient.loggingDisabled        
    ) -> AWSClient.PaginatorSequence<ListRulesInput, ListRulesOutput> {
        let input = ListRulesInput(
            action: action, 
            assetTypes: assetTypes, 
            dataProduct: dataProduct, 
            domainIdentifier: domainIdentifier, 
            includeCascaded: includeCascaded, 
            maxResults: maxResults, 
            projectIds: projectIds, 
            ruleType: ruleType, 
            targetIdentifier: targetIdentifier, 
            targetType: targetType
        )
        return self.listRulesPaginator(input, logger: logger)
    }

    /// Return PaginatorSequence for operation ``listSubscriptionGrants(_:logger:)``.
    ///
    /// - Parameters:
    ///   - input: Input for operation
    ///   - logger: Logger used for logging
    @inlinable
    public func listSubscriptionGrantsPaginator(
        _ input: ListSubscriptionGrantsInput,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<ListSubscriptionGrantsInput, ListSubscriptionGrantsOutput> {
        return .init(
            input: input,
            command: self.listSubscriptionGrants,
            inputKey: \ListSubscriptionGrantsInput.nextToken,
            outputKey: \ListSubscriptionGrantsOutput.nextToken,
            logger: logger
        )
    }
    /// Return PaginatorSequence for operation ``listSubscriptionGrants(_:logger:)``.
    ///
    /// - Parameters:
    ///   - domainIdentifier: The identifier of the Amazon DataZone domain.
    ///   - environmentId: The identifier of the Amazon DataZone environment.
    ///   - maxResults: The maximum number of subscription grants to return in a single call to ListSubscriptionGrants. When the number of subscription grants to be listed is greater than the value of MaxResults, the response contains a NextToken value that you can use in a subsequent call to ListSubscriptionGrants to list the next set of subscription grants.
    ///   - owningProjectId: The ID of the owning project of the subscription grants.
    ///   - sortBy: Specifies the way of sorting the results of this action.
    ///   - sortOrder: Specifies the sort order of this action.
    ///   - subscribedListingId: The identifier of the subscribed listing.
    ///   - subscriptionId: The identifier of the subscription.
    ///   - subscriptionTargetId: The identifier of the subscription target.
    ///   - logger: Logger used for logging
    @inlinable
    public func listSubscriptionGrantsPaginator(
        domainIdentifier: String,
        environmentId: String? = nil,
        maxResults: Int? = nil,
        owningProjectId: String? = nil,
        sortBy: SortKey? = nil,
        sortOrder: SortOrder? = nil,
        subscribedListingId: String? = nil,
        subscriptionId: String? = nil,
        subscriptionTargetId: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) -> AWSClient.PaginatorSequence<ListSubscriptionGrantsInput, ListSubscriptionGrantsOutput> {
        let input = ListSubscriptionGrantsInput(
            domainIdentifier: domainIdentifier, 
            environmentId: environmentId, 
            maxResults: maxResults, 
            owningProjectId: owningProjectId, 
            sortBy: sortBy, 
            sortOrder: sortOrder, 
            subscribedListingId: subscribedListingId, 
            subscriptionId: subscriptionId, 
            subscriptionTargetId: subscriptionTargetId
        )
        return self.listSubscriptionGrantsPaginator(input, logger: logger)
    }

    /// Return PaginatorSequence for operation ``listSubscriptionRequests(_:logger:)``.
    ///
    /// - Parameters:
    ///   - input: Input for operation
    ///   - logger: Logger used for logging
    @inlinable
    public func listSubscriptionRequestsPaginator(
        _ input: ListSubscriptionRequestsInput,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<ListSubscriptionRequestsInput, ListSubscriptionRequestsOutput> {
        return .init(
            input: input,
            command: self.listSubscriptionRequests,
            inputKey: \ListSubscriptionRequestsInput.nextToken,
            outputKey: \ListSubscriptionRequestsOutput.nextToken,
            logger: logger
        )
    }
    /// Return PaginatorSequence for operation ``listSubscriptionRequests(_:logger:)``.
    ///
    /// - Parameters:
    ///   - approverProjectId: The identifier of the subscription request approver's project.
    ///   - domainIdentifier: The identifier of the Amazon DataZone domain.
    ///   - maxResults: The maximum number of subscription requests to return in a single call to ListSubscriptionRequests. When the number of subscription requests to be listed is greater than the value of MaxResults, the response contains a NextToken value that you can use in a subsequent call to ListSubscriptionRequests to list the next set of subscription requests.
    ///   - owningProjectId: The identifier of the project for the subscription requests.
    ///   - sortBy: Specifies the way to sort the results of this action.
    ///   - sortOrder: Specifies the sort order for the results of this action.
    ///   - status: Specifies the status of the subscription requests.  This is not a required parameter, but if not specified, by default, Amazon DataZone returns only PENDING subscription requests.
    ///   - subscribedListingId: The identifier of the subscribed listing.
    ///   - logger: Logger used for logging
    @inlinable
    public func listSubscriptionRequestsPaginator(
        approverProjectId: String? = nil,
        domainIdentifier: String,
        maxResults: Int? = nil,
        owningProjectId: String? = nil,
        sortBy: SortKey? = nil,
        sortOrder: SortOrder? = nil,
        status: SubscriptionRequestStatus? = nil,
        subscribedListingId: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) -> AWSClient.PaginatorSequence<ListSubscriptionRequestsInput, ListSubscriptionRequestsOutput> {
        let input = ListSubscriptionRequestsInput(
            approverProjectId: approverProjectId, 
            domainIdentifier: domainIdentifier, 
            maxResults: maxResults, 
            owningProjectId: owningProjectId, 
            sortBy: sortBy, 
            sortOrder: sortOrder, 
            status: status, 
            subscribedListingId: subscribedListingId
        )
        return self.listSubscriptionRequestsPaginator(input, logger: logger)
    }

    /// Return PaginatorSequence for operation ``listSubscriptionTargets(_:logger:)``.
    ///
    /// - Parameters:
    ///   - input: Input for operation
    ///   - logger: Logger used for logging
    @inlinable
    public func listSubscriptionTargetsPaginator(
        _ input: ListSubscriptionTargetsInput,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<ListSubscriptionTargetsInput, ListSubscriptionTargetsOutput> {
        return .init(
            input: input,
            command: self.listSubscriptionTargets,
            inputKey: \ListSubscriptionTargetsInput.nextToken,
            outputKey: \ListSubscriptionTargetsOutput.nextToken,
            logger: logger
        )
    }
    /// Return PaginatorSequence for operation ``listSubscriptionTargets(_:logger:)``.
    ///
    /// - Parameters:
    ///   - domainIdentifier: The identifier of the Amazon DataZone domain where you want to list subscription targets.
    ///   - environmentIdentifier: The identifier of the environment where you want to list subscription targets.
    ///   - maxResults: The maximum number of subscription targets to return in a single call to ListSubscriptionTargets. When the number of subscription targets to be listed is greater than the value of MaxResults, the response contains a NextToken value that you can use in a subsequent call to ListSubscriptionTargets to list the next set of subscription targets.
    ///   - sortBy: Specifies the way in which the results of this action are to be sorted.
    ///   - sortOrder: Specifies the sort order for the results of this action.
    ///   - logger: Logger used for logging
    @inlinable
    public func listSubscriptionTargetsPaginator(
        domainIdentifier: String,
        environmentIdentifier: String,
        maxResults: Int? = nil,
        sortBy: SortKey? = nil,
        sortOrder: SortOrder? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) -> AWSClient.PaginatorSequence<ListSubscriptionTargetsInput, ListSubscriptionTargetsOutput> {
        let input = ListSubscriptionTargetsInput(
            domainIdentifier: domainIdentifier, 
            environmentIdentifier: environmentIdentifier, 
            maxResults: maxResults, 
            sortBy: sortBy, 
            sortOrder: sortOrder
        )
        return self.listSubscriptionTargetsPaginator(input, logger: logger)
    }

    /// Return PaginatorSequence for operation ``listSubscriptions(_:logger:)``.
    ///
    /// - Parameters:
    ///   - input: Input for operation
    ///   - logger: Logger used for logging
    @inlinable
    public func listSubscriptionsPaginator(
        _ input: ListSubscriptionsInput,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<ListSubscriptionsInput, ListSubscriptionsOutput> {
        return .init(
            input: input,
            command: self.listSubscriptions,
            inputKey: \ListSubscriptionsInput.nextToken,
            outputKey: \ListSubscriptionsOutput.nextToken,
            logger: logger
        )
    }
    /// Return PaginatorSequence for operation ``listSubscriptions(_:logger:)``.
    ///
    /// - Parameters:
    ///   - approverProjectId: The identifier of the project for the subscription's approver.
    ///   - domainIdentifier: The identifier of the Amazon DataZone domain.
    ///   - maxResults: The maximum number of subscriptions to return in a single call to ListSubscriptions. When the number of subscriptions to be listed is greater than the value of MaxResults, the response contains a NextToken value that you can use in a subsequent call to ListSubscriptions to list the next set of Subscriptions.
    ///   - owningProjectId: The identifier of the owning project.
    ///   - sortBy: Specifies the way in which the results of this action are to be sorted.
    ///   - sortOrder: Specifies the sort order for the results of this action.
    ///   - status: The status of the subscriptions that you want to list.  This is not a required parameter, but if not provided, by default, Amazon DataZone returns only APPROVED subscriptions.
    ///   - subscribedListingId: The identifier of the subscribed listing for the subscriptions that you want to list.
    ///   - subscriptionRequestIdentifier: The identifier of the subscription request for the subscriptions that you want to list.
    ///   - logger: Logger used for logging
    @inlinable
    public func listSubscriptionsPaginator(
        approverProjectId: String? = nil,
        domainIdentifier: String,
        maxResults: Int? = nil,
        owningProjectId: String? = nil,
        sortBy: SortKey? = nil,
        sortOrder: SortOrder? = nil,
        status: SubscriptionStatus? = nil,
        subscribedListingId: String? = nil,
        subscriptionRequestIdentifier: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) -> AWSClient.PaginatorSequence<ListSubscriptionsInput, ListSubscriptionsOutput> {
        let input = ListSubscriptionsInput(
            approverProjectId: approverProjectId, 
            domainIdentifier: domainIdentifier, 
            maxResults: maxResults, 
            owningProjectId: owningProjectId, 
            sortBy: sortBy, 
            sortOrder: sortOrder, 
            status: status, 
            subscribedListingId: subscribedListingId, 
            subscriptionRequestIdentifier: subscriptionRequestIdentifier
        )
        return self.listSubscriptionsPaginator(input, logger: logger)
    }

    /// Return PaginatorSequence for operation ``listTimeSeriesDataPoints(_:logger:)``.
    ///
    /// - Parameters:
    ///   - input: Input for operation
    ///   - logger: Logger used for logging
    @inlinable
    public func listTimeSeriesDataPointsPaginator(
        _ input: ListTimeSeriesDataPointsInput,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<ListTimeSeriesDataPointsInput, ListTimeSeriesDataPointsOutput> {
        return .init(
            input: input,
            command: self.listTimeSeriesDataPoints,
            inputKey: \ListTimeSeriesDataPointsInput.nextToken,
            outputKey: \ListTimeSeriesDataPointsOutput.nextToken,
            logger: logger
        )
    }
    /// Return PaginatorSequence for operation ``listTimeSeriesDataPoints(_:logger:)``.
    ///
    /// - Parameters:
    ///   - domainIdentifier: The ID of the Amazon DataZone domain that houses the assets for which you want to list time series data points.
    ///   - endedAt: The timestamp at which the data points that you wanted to list ended.
    ///   - entityIdentifier: The ID of the asset for which you want to list data points.
    ///   - entityType: The type of the asset for which you want to list data points.
    ///   - formName: The name of the time series data points form.
    ///   - maxResults: The maximum number of data points to return in a single call to ListTimeSeriesDataPoints. When the number of data points to be listed is greater than the value of MaxResults, the response contains a NextToken value that you can use in a subsequent call to ListTimeSeriesDataPoints to list the next set of data points.
    ///   - startedAt: The timestamp at which the data points that you want to list started.
    ///   - logger: Logger used for logging
    @inlinable
    public func listTimeSeriesDataPointsPaginator(
        domainIdentifier: String,
        endedAt: Date? = nil,
        entityIdentifier: String,
        entityType: TimeSeriesEntityType,
        formName: String,
        maxResults: Int? = nil,
        startedAt: Date? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) -> AWSClient.PaginatorSequence<ListTimeSeriesDataPointsInput, ListTimeSeriesDataPointsOutput> {
        let input = ListTimeSeriesDataPointsInput(
            domainIdentifier: domainIdentifier, 
            endedAt: endedAt, 
            entityIdentifier: entityIdentifier, 
            entityType: entityType, 
            formName: formName, 
            maxResults: maxResults, 
            startedAt: startedAt
        )
        return self.listTimeSeriesDataPointsPaginator(input, logger: logger)
    }

    /// Return PaginatorSequence for operation ``search(_:logger:)``.
    ///
    /// - Parameters:
    ///   - input: Input for operation
    ///   - logger: Logger used for logging
    @inlinable
    public func searchPaginator(
        _ input: SearchInput,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<SearchInput, SearchOutput> {
        return .init(
            input: input,
            command: self.search,
            inputKey: \SearchInput.nextToken,
            outputKey: \SearchOutput.nextToken,
            logger: logger
        )
    }
    /// Return PaginatorSequence for operation ``search(_:logger:)``.
    ///
    /// - Parameters:
    ///   - additionalAttributes: Specifies additional attributes for the Search action.
    ///   - domainIdentifier: The identifier of the Amazon DataZone domain.
    ///   - filters: Specifies the search filters.
    ///   - maxResults: The maximum number of results to return in a single call to Search. When the number of results to be listed is greater than the value of MaxResults, the response contains a NextToken value that you can use in a subsequent call to Search to list the next set of results.
    ///   - owningProjectIdentifier: The identifier of the owning project specified for the search.
    ///   - searchIn: The details of the search.
    ///   - searchScope: The scope of the search.
    ///   - searchText: Specifies the text for which to search.
    ///   - sort: Specifies the way in which the search results are to be sorted.
    ///   - logger: Logger used for logging
    @inlinable
    public func searchPaginator(
        additionalAttributes: [SearchOutputAdditionalAttribute]? = nil,
        domainIdentifier: String,
        filters: FilterClause? = nil,
        maxResults: Int? = nil,
        owningProjectIdentifier: String? = nil,
        searchIn: [SearchInItem]? = nil,
        searchScope: InventorySearchScope,
        searchText: String? = nil,
        sort: SearchSort? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) -> AWSClient.PaginatorSequence<SearchInput, SearchOutput> {
        let input = SearchInput(
            additionalAttributes: additionalAttributes, 
            domainIdentifier: domainIdentifier, 
            filters: filters, 
            maxResults: maxResults, 
            owningProjectIdentifier: owningProjectIdentifier, 
            searchIn: searchIn, 
            searchScope: searchScope, 
            searchText: searchText, 
            sort: sort
        )
        return self.searchPaginator(input, logger: logger)
    }

    /// Return PaginatorSequence for operation ``searchGroupProfiles(_:logger:)``.
    ///
    /// - Parameters:
    ///   - input: Input for operation
    ///   - logger: Logger used for logging
    @inlinable
    public func searchGroupProfilesPaginator(
        _ input: SearchGroupProfilesInput,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<SearchGroupProfilesInput, SearchGroupProfilesOutput> {
        return .init(
            input: input,
            command: self.searchGroupProfiles,
            inputKey: \SearchGroupProfilesInput.nextToken,
            outputKey: \SearchGroupProfilesOutput.nextToken,
            logger: logger
        )
    }
    /// Return PaginatorSequence for operation ``searchGroupProfiles(_:logger:)``.
    ///
    /// - Parameters:
    ///   - domainIdentifier: The identifier of the Amazon DataZone domain in which you want to search group profiles.
    ///   - groupType: The group type for which to search.
    ///   - maxResults: The maximum number of results to return in a single call to SearchGroupProfiles. When the number of results to be listed is greater than the value of MaxResults, the response contains a NextToken value that you can use in a subsequent call to SearchGroupProfiles to list the next set of results.
    ///   - searchText: Specifies the text for which to search.
    ///   - logger: Logger used for logging
    @inlinable
    public func searchGroupProfilesPaginator(
        domainIdentifier: String,
        groupType: GroupSearchType,
        maxResults: Int? = nil,
        searchText: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) -> AWSClient.PaginatorSequence<SearchGroupProfilesInput, SearchGroupProfilesOutput> {
        let input = SearchGroupProfilesInput(
            domainIdentifier: domainIdentifier, 
            groupType: groupType, 
            maxResults: maxResults, 
            searchText: searchText
        )
        return self.searchGroupProfilesPaginator(input, logger: logger)
    }

    /// Return PaginatorSequence for operation ``searchListings(_:logger:)``.
    ///
    /// - Parameters:
    ///   - input: Input for operation
    ///   - logger: Logger used for logging
    @inlinable
    public func searchListingsPaginator(
        _ input: SearchListingsInput,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<SearchListingsInput, SearchListingsOutput> {
        return .init(
            input: input,
            command: self.searchListings,
            inputKey: \SearchListingsInput.nextToken,
            outputKey: \SearchListingsOutput.nextToken,
            logger: logger
        )
    }
    /// Return PaginatorSequence for operation ``searchListings(_:logger:)``.
    ///
    /// - Parameters:
    ///   - additionalAttributes: Specifies additional attributes for the search.
    ///   - domainIdentifier: The identifier of the domain in which to search listings.
    ///   - filters: Specifies the filters for the search of listings.
    ///   - maxResults: The maximum number of results to return in a single call to SearchListings. When the number of results to be listed is greater than the value of MaxResults, the response contains a NextToken value that you can use in a subsequent call to SearchListings to list the next set of results.
    ///   - searchIn: The details of the search.
    ///   - searchText: Specifies the text for which to search.
    ///   - sort: Specifies the way for sorting the search results.
    ///   - logger: Logger used for logging
    @inlinable
    public func searchListingsPaginator(
        additionalAttributes: [SearchOutputAdditionalAttribute]? = nil,
        domainIdentifier: String,
        filters: FilterClause? = nil,
        maxResults: Int? = nil,
        searchIn: [SearchInItem]? = nil,
        searchText: String? = nil,
        sort: SearchSort? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) -> AWSClient.PaginatorSequence<SearchListingsInput, SearchListingsOutput> {
        let input = SearchListingsInput(
            additionalAttributes: additionalAttributes, 
            domainIdentifier: domainIdentifier, 
            filters: filters, 
            maxResults: maxResults, 
            searchIn: searchIn, 
            searchText: searchText, 
            sort: sort
        )
        return self.searchListingsPaginator(input, logger: logger)
    }

    /// Return PaginatorSequence for operation ``searchTypes(_:logger:)``.
    ///
    /// - Parameters:
    ///   - input: Input for operation
    ///   - logger: Logger used for logging
    @inlinable
    public func searchTypesPaginator(
        _ input: SearchTypesInput,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<SearchTypesInput, SearchTypesOutput> {
        return .init(
            input: input,
            command: self.searchTypes,
            inputKey: \SearchTypesInput.nextToken,
            outputKey: \SearchTypesOutput.nextToken,
            logger: logger
        )
    }
    /// Return PaginatorSequence for operation ``searchTypes(_:logger:)``.
    ///
    /// - Parameters:
    ///   - domainIdentifier: The identifier of the Amazon DataZone domain in which to invoke the SearchTypes action.
    ///   - filters: The filters for the SearchTypes action.
    ///   - managed: Specifies whether the search is managed.
    ///   - maxResults: The maximum number of results to return in a single call to SearchTypes. When the number of results to be listed is greater than the value of MaxResults, the response contains a NextToken value that you can use in a subsequent call to SearchTypes to list the next set of results.
    ///   - searchIn: The details of the search.
    ///   - searchScope: Specifies the scope of the search for types.
    ///   - searchText: Specifies the text for which to search.
    ///   - sort: The specifies the way to sort the SearchTypes results.
    ///   - logger: Logger used for logging
    @inlinable
    public func searchTypesPaginator(
        domainIdentifier: String,
        filters: FilterClause? = nil,
        managed: Bool,
        maxResults: Int? = nil,
        searchIn: [SearchInItem]? = nil,
        searchScope: TypesSearchScope,
        searchText: String? = nil,
        sort: SearchSort? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) -> AWSClient.PaginatorSequence<SearchTypesInput, SearchTypesOutput> {
        let input = SearchTypesInput(
            domainIdentifier: domainIdentifier, 
            filters: filters, 
            managed: managed, 
            maxResults: maxResults, 
            searchIn: searchIn, 
            searchScope: searchScope, 
            searchText: searchText, 
            sort: sort
        )
        return self.searchTypesPaginator(input, logger: logger)
    }

    /// Return PaginatorSequence for operation ``searchUserProfiles(_:logger:)``.
    ///
    /// - Parameters:
    ///   - input: Input for operation
    ///   - logger: Logger used for logging
    @inlinable
    public func searchUserProfilesPaginator(
        _ input: SearchUserProfilesInput,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<SearchUserProfilesInput, SearchUserProfilesOutput> {
        return .init(
            input: input,
            command: self.searchUserProfiles,
            inputKey: \SearchUserProfilesInput.nextToken,
            outputKey: \SearchUserProfilesOutput.nextToken,
            logger: logger
        )
    }
    /// Return PaginatorSequence for operation ``searchUserProfiles(_:logger:)``.
    ///
    /// - Parameters:
    ///   - domainIdentifier: The identifier of the Amazon DataZone domain in which you want to search user profiles.
    ///   - maxResults: The maximum number of results to return in a single call to SearchUserProfiles. When the number of results to be listed is greater than the value of MaxResults, the response contains a NextToken value that you can use in a subsequent call to SearchUserProfiles to list the next set of results.
    ///   - searchText: Specifies the text for which to search.
    ///   - userType: Specifies the user type for the SearchUserProfiles action.
    ///   - logger: Logger used for logging
    @inlinable
    public func searchUserProfilesPaginator(
        domainIdentifier: String,
        maxResults: Int? = nil,
        searchText: String? = nil,
        userType: UserSearchType,
        logger: Logger = AWSClient.loggingDisabled        
    ) -> AWSClient.PaginatorSequence<SearchUserProfilesInput, SearchUserProfilesOutput> {
        let input = SearchUserProfilesInput(
            domainIdentifier: domainIdentifier, 
            maxResults: maxResults, 
            searchText: searchText, 
            userType: userType
        )
        return self.searchUserProfilesPaginator(input, logger: logger)
    }
}

extension DataZone.ListAssetFiltersInput: AWSPaginateToken {
    @inlinable
    public func usingPaginationToken(_ token: String) -> DataZone.ListAssetFiltersInput {
        return .init(
            assetIdentifier: self.assetIdentifier,
            domainIdentifier: self.domainIdentifier,
            maxResults: self.maxResults,
            nextToken: token,
            status: self.status
        )
    }
}

extension DataZone.ListConnectionsInput: AWSPaginateToken {
    @inlinable
    public func usingPaginationToken(_ token: String) -> DataZone.ListConnectionsInput {
        return .init(
            domainIdentifier: self.domainIdentifier,
            environmentIdentifier: self.environmentIdentifier,
            maxResults: self.maxResults,
            name: self.name,
            nextToken: token,
            projectIdentifier: self.projectIdentifier,
            sortBy: self.sortBy,
            sortOrder: self.sortOrder,
            type: self.type
        )
    }
}

extension DataZone.ListDataProductRevisionsInput: AWSPaginateToken {
    @inlinable
    public func usingPaginationToken(_ token: String) -> DataZone.ListDataProductRevisionsInput {
        return .init(
            domainIdentifier: self.domainIdentifier,
            identifier: self.identifier,
            maxResults: self.maxResults,
            nextToken: token
        )
    }
}

extension DataZone.ListDataSourceRunActivitiesInput: AWSPaginateToken {
    @inlinable
    public func usingPaginationToken(_ token: String) -> DataZone.ListDataSourceRunActivitiesInput {
        return .init(
            domainIdentifier: self.domainIdentifier,
            identifier: self.identifier,
            maxResults: self.maxResults,
            nextToken: token,
            status: self.status
        )
    }
}

extension DataZone.ListDataSourceRunsInput: AWSPaginateToken {
    @inlinable
    public func usingPaginationToken(_ token: String) -> DataZone.ListDataSourceRunsInput {
        return .init(
            dataSourceIdentifier: self.dataSourceIdentifier,
            domainIdentifier: self.domainIdentifier,
            maxResults: self.maxResults,
            nextToken: token,
            status: self.status
        )
    }
}

extension DataZone.ListDataSourcesInput: AWSPaginateToken {
    @inlinable
    public func usingPaginationToken(_ token: String) -> DataZone.ListDataSourcesInput {
        return .init(
            connectionIdentifier: self.connectionIdentifier,
            domainIdentifier: self.domainIdentifier,
            environmentIdentifier: self.environmentIdentifier,
            maxResults: self.maxResults,
            name: self.name,
            nextToken: token,
            projectIdentifier: self.projectIdentifier,
            status: self.status,
            type: self.type
        )
    }
}

extension DataZone.ListDomainUnitsForParentInput: AWSPaginateToken {
    @inlinable
    public func usingPaginationToken(_ token: String) -> DataZone.ListDomainUnitsForParentInput {
        return .init(
            domainIdentifier: self.domainIdentifier,
            maxResults: self.maxResults,
            nextToken: token,
            parentDomainUnitIdentifier: self.parentDomainUnitIdentifier
        )
    }
}

extension DataZone.ListDomainsInput: AWSPaginateToken {
    @inlinable
    public func usingPaginationToken(_ token: String) -> DataZone.ListDomainsInput {
        return .init(
            maxResults: self.maxResults,
            nextToken: token,
            status: self.status
        )
    }
}

extension DataZone.ListEntityOwnersInput: AWSPaginateToken {
    @inlinable
    public func usingPaginationToken(_ token: String) -> DataZone.ListEntityOwnersInput {
        return .init(
            domainIdentifier: self.domainIdentifier,
            entityIdentifier: self.entityIdentifier,
            entityType: self.entityType,
            maxResults: self.maxResults,
            nextToken: token
        )
    }
}

extension DataZone.ListEnvironmentActionsInput: AWSPaginateToken {
    @inlinable
    public func usingPaginationToken(_ token: String) -> DataZone.ListEnvironmentActionsInput {
        return .init(
            domainIdentifier: self.domainIdentifier,
            environmentIdentifier: self.environmentIdentifier,
            maxResults: self.maxResults,
            nextToken: token
        )
    }
}

extension DataZone.ListEnvironmentBlueprintConfigurationsInput: AWSPaginateToken {
    @inlinable
    public func usingPaginationToken(_ token: String) -> DataZone.ListEnvironmentBlueprintConfigurationsInput {
        return .init(
            domainIdentifier: self.domainIdentifier,
            maxResults: self.maxResults,
            nextToken: token
        )
    }
}

extension DataZone.ListEnvironmentBlueprintsInput: AWSPaginateToken {
    @inlinable
    public func usingPaginationToken(_ token: String) -> DataZone.ListEnvironmentBlueprintsInput {
        return .init(
            domainIdentifier: self.domainIdentifier,
            managed: self.managed,
            maxResults: self.maxResults,
            name: self.name,
            nextToken: token
        )
    }
}

extension DataZone.ListEnvironmentProfilesInput: AWSPaginateToken {
    @inlinable
    public func usingPaginationToken(_ token: String) -> DataZone.ListEnvironmentProfilesInput {
        return .init(
            awsAccountId: self.awsAccountId,
            awsAccountRegion: self.awsAccountRegion,
            domainIdentifier: self.domainIdentifier,
            environmentBlueprintIdentifier: self.environmentBlueprintIdentifier,
            maxResults: self.maxResults,
            name: self.name,
            nextToken: token,
            projectIdentifier: self.projectIdentifier
        )
    }
}

extension DataZone.ListEnvironmentsInput: AWSPaginateToken {
    @inlinable
    public func usingPaginationToken(_ token: String) -> DataZone.ListEnvironmentsInput {
        return .init(
            awsAccountId: self.awsAccountId,
            awsAccountRegion: self.awsAccountRegion,
            domainIdentifier: self.domainIdentifier,
            environmentBlueprintIdentifier: self.environmentBlueprintIdentifier,
            environmentProfileIdentifier: self.environmentProfileIdentifier,
            maxResults: self.maxResults,
            name: self.name,
            nextToken: token,
            projectIdentifier: self.projectIdentifier,
            provider: self.provider,
            status: self.status
        )
    }
}

extension DataZone.ListJobRunsInput: AWSPaginateToken {
    @inlinable
    public func usingPaginationToken(_ token: String) -> DataZone.ListJobRunsInput {
        return .init(
            domainIdentifier: self.domainIdentifier,
            jobIdentifier: self.jobIdentifier,
            maxResults: self.maxResults,
            nextToken: token,
            sortOrder: self.sortOrder,
            status: self.status
        )
    }
}

extension DataZone.ListLineageEventsInput: AWSPaginateToken {
    @inlinable
    public func usingPaginationToken(_ token: String) -> DataZone.ListLineageEventsInput {
        return .init(
            domainIdentifier: self.domainIdentifier,
            maxResults: self.maxResults,
            nextToken: token,
            processingStatus: self.processingStatus,
            sortOrder: self.sortOrder,
            timestampAfter: self.timestampAfter,
            timestampBefore: self.timestampBefore
        )
    }
}

extension DataZone.ListLineageNodeHistoryInput: AWSPaginateToken {
    @inlinable
    public func usingPaginationToken(_ token: String) -> DataZone.ListLineageNodeHistoryInput {
        return .init(
            direction: self.direction,
            domainIdentifier: self.domainIdentifier,
            eventTimestampGTE: self.eventTimestampGTE,
            eventTimestampLTE: self.eventTimestampLTE,
            identifier: self.identifier,
            maxResults: self.maxResults,
            nextToken: token,
            sortOrder: self.sortOrder
        )
    }
}

extension DataZone.ListMetadataGenerationRunsInput: AWSPaginateToken {
    @inlinable
    public func usingPaginationToken(_ token: String) -> DataZone.ListMetadataGenerationRunsInput {
        return .init(
            domainIdentifier: self.domainIdentifier,
            maxResults: self.maxResults,
            nextToken: token,
            status: self.status,
            type: self.type
        )
    }
}

extension DataZone.ListNotificationsInput: AWSPaginateToken {
    @inlinable
    public func usingPaginationToken(_ token: String) -> DataZone.ListNotificationsInput {
        return .init(
            afterTimestamp: self.afterTimestamp,
            beforeTimestamp: self.beforeTimestamp,
            domainIdentifier: self.domainIdentifier,
            maxResults: self.maxResults,
            nextToken: token,
            subjects: self.subjects,
            taskStatus: self.taskStatus,
            type: self.type
        )
    }
}

extension DataZone.ListPolicyGrantsInput: AWSPaginateToken {
    @inlinable
    public func usingPaginationToken(_ token: String) -> DataZone.ListPolicyGrantsInput {
        return .init(
            domainIdentifier: self.domainIdentifier,
            entityIdentifier: self.entityIdentifier,
            entityType: self.entityType,
            maxResults: self.maxResults,
            nextToken: token,
            policyType: self.policyType
        )
    }
}

extension DataZone.ListProjectMembershipsInput: AWSPaginateToken {
    @inlinable
    public func usingPaginationToken(_ token: String) -> DataZone.ListProjectMembershipsInput {
        return .init(
            domainIdentifier: self.domainIdentifier,
            maxResults: self.maxResults,
            nextToken: token,
            projectIdentifier: self.projectIdentifier,
            sortBy: self.sortBy,
            sortOrder: self.sortOrder
        )
    }
}

extension DataZone.ListProjectProfilesInput: AWSPaginateToken {
    @inlinable
    public func usingPaginationToken(_ token: String) -> DataZone.ListProjectProfilesInput {
        return .init(
            domainIdentifier: self.domainIdentifier,
            maxResults: self.maxResults,
            name: self.name,
            nextToken: token,
            sortBy: self.sortBy,
            sortOrder: self.sortOrder
        )
    }
}

extension DataZone.ListProjectsInput: AWSPaginateToken {
    @inlinable
    public func usingPaginationToken(_ token: String) -> DataZone.ListProjectsInput {
        return .init(
            domainIdentifier: self.domainIdentifier,
            groupIdentifier: self.groupIdentifier,
            maxResults: self.maxResults,
            name: self.name,
            nextToken: token,
            userIdentifier: self.userIdentifier
        )
    }
}

extension DataZone.ListRulesInput: AWSPaginateToken {
    @inlinable
    public func usingPaginationToken(_ token: String) -> DataZone.ListRulesInput {
        return .init(
            action: self.action,
            assetTypes: self.assetTypes,
            dataProduct: self.dataProduct,
            domainIdentifier: self.domainIdentifier,
            includeCascaded: self.includeCascaded,
            maxResults: self.maxResults,
            nextToken: token,
            projectIds: self.projectIds,
            ruleType: self.ruleType,
            targetIdentifier: self.targetIdentifier,
            targetType: self.targetType
        )
    }
}

extension DataZone.ListSubscriptionGrantsInput: AWSPaginateToken {
    @inlinable
    public func usingPaginationToken(_ token: String) -> DataZone.ListSubscriptionGrantsInput {
        return .init(
            domainIdentifier: self.domainIdentifier,
            environmentId: self.environmentId,
            maxResults: self.maxResults,
            nextToken: token,
            owningProjectId: self.owningProjectId,
            sortBy: self.sortBy,
            sortOrder: self.sortOrder,
            subscribedListingId: self.subscribedListingId,
            subscriptionId: self.subscriptionId,
            subscriptionTargetId: self.subscriptionTargetId
        )
    }
}

extension DataZone.ListSubscriptionRequestsInput: AWSPaginateToken {
    @inlinable
    public func usingPaginationToken(_ token: String) -> DataZone.ListSubscriptionRequestsInput {
        return .init(
            approverProjectId: self.approverProjectId,
            domainIdentifier: self.domainIdentifier,
            maxResults: self.maxResults,
            nextToken: token,
            owningProjectId: self.owningProjectId,
            sortBy: self.sortBy,
            sortOrder: self.sortOrder,
            status: self.status,
            subscribedListingId: self.subscribedListingId
        )
    }
}

extension DataZone.ListSubscriptionTargetsInput: AWSPaginateToken {
    @inlinable
    public func usingPaginationToken(_ token: String) -> DataZone.ListSubscriptionTargetsInput {
        return .init(
            domainIdentifier: self.domainIdentifier,
            environmentIdentifier: self.environmentIdentifier,
            maxResults: self.maxResults,
            nextToken: token,
            sortBy: self.sortBy,
            sortOrder: self.sortOrder
        )
    }
}

extension DataZone.ListSubscriptionsInput: AWSPaginateToken {
    @inlinable
    public func usingPaginationToken(_ token: String) -> DataZone.ListSubscriptionsInput {
        return .init(
            approverProjectId: self.approverProjectId,
            domainIdentifier: self.domainIdentifier,
            maxResults: self.maxResults,
            nextToken: token,
            owningProjectId: self.owningProjectId,
            sortBy: self.sortBy,
            sortOrder: self.sortOrder,
            status: self.status,
            subscribedListingId: self.subscribedListingId,
            subscriptionRequestIdentifier: self.subscriptionRequestIdentifier
        )
    }
}

extension DataZone.ListTimeSeriesDataPointsInput: AWSPaginateToken {
    @inlinable
    public func usingPaginationToken(_ token: String) -> DataZone.ListTimeSeriesDataPointsInput {
        return .init(
            domainIdentifier: self.domainIdentifier,
            endedAt: self.endedAt,
            entityIdentifier: self.entityIdentifier,
            entityType: self.entityType,
            formName: self.formName,
            maxResults: self.maxResults,
            nextToken: token,
            startedAt: self.startedAt
        )
    }
}

extension DataZone.SearchGroupProfilesInput: AWSPaginateToken {
    @inlinable
    public func usingPaginationToken(_ token: String) -> DataZone.SearchGroupProfilesInput {
        return .init(
            domainIdentifier: self.domainIdentifier,
            groupType: self.groupType,
            maxResults: self.maxResults,
            nextToken: token,
            searchText: self.searchText
        )
    }
}

extension DataZone.SearchInput: AWSPaginateToken {
    @inlinable
    public func usingPaginationToken(_ token: String) -> DataZone.SearchInput {
        return .init(
            additionalAttributes: self.additionalAttributes,
            domainIdentifier: self.domainIdentifier,
            filters: self.filters,
            maxResults: self.maxResults,
            nextToken: token,
            owningProjectIdentifier: self.owningProjectIdentifier,
            searchIn: self.searchIn,
            searchScope: self.searchScope,
            searchText: self.searchText,
            sort: self.sort
        )
    }
}

extension DataZone.SearchListingsInput: AWSPaginateToken {
    @inlinable
    public func usingPaginationToken(_ token: String) -> DataZone.SearchListingsInput {
        return .init(
            additionalAttributes: self.additionalAttributes,
            domainIdentifier: self.domainIdentifier,
            filters: self.filters,
            maxResults: self.maxResults,
            nextToken: token,
            searchIn: self.searchIn,
            searchText: self.searchText,
            sort: self.sort
        )
    }
}

extension DataZone.SearchTypesInput: AWSPaginateToken {
    @inlinable
    public func usingPaginationToken(_ token: String) -> DataZone.SearchTypesInput {
        return .init(
            domainIdentifier: self.domainIdentifier,
            filters: self.filters,
            managed: self.managed,
            maxResults: self.maxResults,
            nextToken: token,
            searchIn: self.searchIn,
            searchScope: self.searchScope,
            searchText: self.searchText,
            sort: self.sort
        )
    }
}

extension DataZone.SearchUserProfilesInput: AWSPaginateToken {
    @inlinable
    public func usingPaginationToken(_ token: String) -> DataZone.SearchUserProfilesInput {
        return .init(
            domainIdentifier: self.domainIdentifier,
            maxResults: self.maxResults,
            nextToken: token,
            searchText: self.searchText,
            userType: self.userType
        )
    }
}
