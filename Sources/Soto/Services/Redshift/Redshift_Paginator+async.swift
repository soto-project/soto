//===----------------------------------------------------------------------===//
//
// This source file is part of the Soto for AWS open source project
//
// Copyright (c) 2017-2021 the Soto project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
// See CONTRIBUTORS.txt for the list of Soto project authors
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by https://github.com/soto-project/soto-codegenerator.
// DO NOT EDIT.

#if compiler(>=5.5) && canImport(_Concurrency)

import SotoCore

// MARK: Paginators

@available(macOS 12.0, iOS 15.0, watchOS 8.0, tvOS 15.0, *)
extension Redshift {
    ///  Returns an array of ClusterDbRevision objects.
    /// Return PaginatorSequence for operation.
    ///
    /// - Parameters:
    ///   - input: Input for request
    ///   - logger: Logger used flot logging
    ///   - eventLoop: EventLoop to run this process on
    public func describeClusterDbRevisionsPaginator(
        _ input: DescribeClusterDbRevisionsMessage,
        logger: Logger = AWSClient.loggingDisabled,
        on eventLoop: EventLoop? = nil
    ) -> AWSClient.PaginatorSequence<DescribeClusterDbRevisionsMessage, ClusterDbRevisionsMessage> {
        return .init(
            input: input,
            command: describeClusterDbRevisions,
            inputKey: \DescribeClusterDbRevisionsMessage.marker,
            outputKey: \ClusterDbRevisionsMessage.marker,
            logger: logger,
            on: eventLoop
        )
    }

    ///  Returns a list of Amazon Redshift parameter groups, including parameter groups you created and the default parameter group. For each parameter group, the response includes the parameter group name, description, and parameter group family name. You can optionally specify a name to retrieve the description of a specific parameter group.
    ///  For more information about parameters and parameter groups, go to
    ///  Amazon Redshift Parameter Groups
    ///  in the Amazon Redshift Cluster Management Guide. If you specify both tag keys and tag values in the same request, Amazon Redshift returns all parameter groups that match any combination of the specified keys and values. For example, if you have owner and environment for tag keys, and admin and test for tag values, all parameter groups that have any combination of those values are returned. If both tag keys and values are omitted from the request, parameter groups are returned regardless of whether they have tag keys or values associated with them.
    /// Return PaginatorSequence for operation.
    ///
    /// - Parameters:
    ///   - input: Input for request
    ///   - logger: Logger used flot logging
    ///   - eventLoop: EventLoop to run this process on
    public func describeClusterParameterGroupsPaginator(
        _ input: DescribeClusterParameterGroupsMessage,
        logger: Logger = AWSClient.loggingDisabled,
        on eventLoop: EventLoop? = nil
    ) -> AWSClient.PaginatorSequence<DescribeClusterParameterGroupsMessage, ClusterParameterGroupsMessage> {
        return .init(
            input: input,
            command: describeClusterParameterGroups,
            inputKey: \DescribeClusterParameterGroupsMessage.marker,
            outputKey: \ClusterParameterGroupsMessage.marker,
            logger: logger,
            on: eventLoop
        )
    }

    ///  Returns a detailed list of parameters contained within the specified Amazon Redshift parameter group. For each parameter the response includes information such as parameter name, description, data type, value, whether the parameter value is modifiable, and so on. You can specify source filter to retrieve parameters of only specific type. For example, to retrieve parameters that were modified by a user action such as from ModifyClusterParameterGroup, you can specify source equal to user.
    ///  For more information about parameters and parameter groups, go to
    ///  Amazon Redshift Parameter Groups
    ///  in the Amazon Redshift Cluster Management Guide.
    /// Return PaginatorSequence for operation.
    ///
    /// - Parameters:
    ///   - input: Input for request
    ///   - logger: Logger used flot logging
    ///   - eventLoop: EventLoop to run this process on
    public func describeClusterParametersPaginator(
        _ input: DescribeClusterParametersMessage,
        logger: Logger = AWSClient.loggingDisabled,
        on eventLoop: EventLoop? = nil
    ) -> AWSClient.PaginatorSequence<DescribeClusterParametersMessage, ClusterParameterGroupDetails> {
        return .init(
            input: input,
            command: describeClusterParameters,
            inputKey: \DescribeClusterParametersMessage.marker,
            outputKey: \ClusterParameterGroupDetails.marker,
            logger: logger,
            on: eventLoop
        )
    }

    ///  Returns information about Amazon Redshift security groups. If the name of a security group is specified, the response will contain only information about only that security group.
    ///  For information about managing security groups, go to
    ///  Amazon Redshift Cluster Security Groups in the
    ///  Amazon Redshift Cluster Management Guide. If you specify both tag keys and tag values in the same request, Amazon Redshift returns all security groups that match any combination of the specified keys and values. For example, if you have owner and environment for tag keys, and admin and test for tag values, all security groups that have any combination of those values are returned. If both tag keys and values are omitted from the request, security groups are returned regardless of whether they have tag keys or values associated with them.
    /// Return PaginatorSequence for operation.
    ///
    /// - Parameters:
    ///   - input: Input for request
    ///   - logger: Logger used flot logging
    ///   - eventLoop: EventLoop to run this process on
    public func describeClusterSecurityGroupsPaginator(
        _ input: DescribeClusterSecurityGroupsMessage,
        logger: Logger = AWSClient.loggingDisabled,
        on eventLoop: EventLoop? = nil
    ) -> AWSClient.PaginatorSequence<DescribeClusterSecurityGroupsMessage, ClusterSecurityGroupMessage> {
        return .init(
            input: input,
            command: describeClusterSecurityGroups,
            inputKey: \DescribeClusterSecurityGroupsMessage.marker,
            outputKey: \ClusterSecurityGroupMessage.marker,
            logger: logger,
            on: eventLoop
        )
    }

    ///  Returns one or more snapshot objects, which contain metadata about your cluster snapshots. By default, this operation returns information about all snapshots of all clusters that are owned by your Amazon Web Services account. No information is returned for snapshots owned by inactive Amazon Web Services accounts. If you specify both tag keys and tag values in the same request, Amazon Redshift returns all snapshots that match any combination of the specified keys and values. For example, if you have owner and environment for tag keys, and admin and test for tag values, all snapshots that have any combination of those values are returned. Only snapshots that you own are returned in the response; shared snapshots are not returned with the tag key and tag value request parameters. If both tag keys and values are omitted from the request, snapshots are returned regardless of whether they have tag keys or values associated with them.
    /// Return PaginatorSequence for operation.
    ///
    /// - Parameters:
    ///   - input: Input for request
    ///   - logger: Logger used flot logging
    ///   - eventLoop: EventLoop to run this process on
    public func describeClusterSnapshotsPaginator(
        _ input: DescribeClusterSnapshotsMessage,
        logger: Logger = AWSClient.loggingDisabled,
        on eventLoop: EventLoop? = nil
    ) -> AWSClient.PaginatorSequence<DescribeClusterSnapshotsMessage, SnapshotMessage> {
        return .init(
            input: input,
            command: describeClusterSnapshots,
            inputKey: \DescribeClusterSnapshotsMessage.marker,
            outputKey: \SnapshotMessage.marker,
            logger: logger,
            on: eventLoop
        )
    }

    ///  Returns one or more cluster subnet group objects, which contain metadata about your cluster subnet groups. By default, this operation returns information about all cluster subnet groups that are defined in your Amazon Web Services account. If you specify both tag keys and tag values in the same request, Amazon Redshift returns all subnet groups that match any combination of the specified keys and values. For example, if you have owner and environment for tag keys, and admin and test for tag values, all subnet groups that have any combination of those values are returned. If both tag keys and values are omitted from the request, subnet groups are returned regardless of whether they have tag keys or values associated with them.
    /// Return PaginatorSequence for operation.
    ///
    /// - Parameters:
    ///   - input: Input for request
    ///   - logger: Logger used flot logging
    ///   - eventLoop: EventLoop to run this process on
    public func describeClusterSubnetGroupsPaginator(
        _ input: DescribeClusterSubnetGroupsMessage,
        logger: Logger = AWSClient.loggingDisabled,
        on eventLoop: EventLoop? = nil
    ) -> AWSClient.PaginatorSequence<DescribeClusterSubnetGroupsMessage, ClusterSubnetGroupMessage> {
        return .init(
            input: input,
            command: describeClusterSubnetGroups,
            inputKey: \DescribeClusterSubnetGroupsMessage.marker,
            outputKey: \ClusterSubnetGroupMessage.marker,
            logger: logger,
            on: eventLoop
        )
    }

    ///  Returns a list of all the available maintenance tracks.
    /// Return PaginatorSequence for operation.
    ///
    /// - Parameters:
    ///   - input: Input for request
    ///   - logger: Logger used flot logging
    ///   - eventLoop: EventLoop to run this process on
    public func describeClusterTracksPaginator(
        _ input: DescribeClusterTracksMessage,
        logger: Logger = AWSClient.loggingDisabled,
        on eventLoop: EventLoop? = nil
    ) -> AWSClient.PaginatorSequence<DescribeClusterTracksMessage, TrackListMessage> {
        return .init(
            input: input,
            command: describeClusterTracks,
            inputKey: \DescribeClusterTracksMessage.marker,
            outputKey: \TrackListMessage.marker,
            logger: logger,
            on: eventLoop
        )
    }

    ///  Returns descriptions of the available Amazon Redshift cluster versions. You can call this operation even before creating any clusters to learn more about the Amazon Redshift versions.
    ///  For more information about managing clusters, go to
    ///  Amazon Redshift Clusters
    ///  in the Amazon Redshift Cluster Management Guide.
    /// Return PaginatorSequence for operation.
    ///
    /// - Parameters:
    ///   - input: Input for request
    ///   - logger: Logger used flot logging
    ///   - eventLoop: EventLoop to run this process on
    public func describeClusterVersionsPaginator(
        _ input: DescribeClusterVersionsMessage,
        logger: Logger = AWSClient.loggingDisabled,
        on eventLoop: EventLoop? = nil
    ) -> AWSClient.PaginatorSequence<DescribeClusterVersionsMessage, ClusterVersionsMessage> {
        return .init(
            input: input,
            command: describeClusterVersions,
            inputKey: \DescribeClusterVersionsMessage.marker,
            outputKey: \ClusterVersionsMessage.marker,
            logger: logger,
            on: eventLoop
        )
    }

    ///  Returns properties of provisioned clusters including general cluster properties, cluster database properties, maintenance and backup properties, and security and access properties. This operation supports pagination.
    ///  For more information about managing clusters, go to
    ///  Amazon Redshift Clusters
    ///  in the Amazon Redshift Cluster Management Guide. If you specify both tag keys and tag values in the same request, Amazon Redshift returns all clusters that match any combination of the specified keys and values. For example, if you have owner and environment for tag keys, and admin and test for tag values, all clusters that have any combination of those values are returned. If both tag keys and values are omitted from the request, clusters are returned regardless of whether they have tag keys or values associated with them.
    /// Return PaginatorSequence for operation.
    ///
    /// - Parameters:
    ///   - input: Input for request
    ///   - logger: Logger used flot logging
    ///   - eventLoop: EventLoop to run this process on
    public func describeClustersPaginator(
        _ input: DescribeClustersMessage,
        logger: Logger = AWSClient.loggingDisabled,
        on eventLoop: EventLoop? = nil
    ) -> AWSClient.PaginatorSequence<DescribeClustersMessage, ClustersMessage> {
        return .init(
            input: input,
            command: describeClusters,
            inputKey: \DescribeClustersMessage.marker,
            outputKey: \ClustersMessage.marker,
            logger: logger,
            on: eventLoop
        )
    }

    ///  Returns a list of parameter settings for the specified parameter group family.
    ///  For more information about parameters and parameter groups, go to
    ///  Amazon Redshift Parameter Groups
    ///  in the Amazon Redshift Cluster Management Guide.
    /// Return PaginatorSequence for operation.
    ///
    /// - Parameters:
    ///   - input: Input for request
    ///   - logger: Logger used flot logging
    ///   - eventLoop: EventLoop to run this process on
    public func describeDefaultClusterParametersPaginator(
        _ input: DescribeDefaultClusterParametersMessage,
        logger: Logger = AWSClient.loggingDisabled,
        on eventLoop: EventLoop? = nil
    ) -> AWSClient.PaginatorSequence<DescribeDefaultClusterParametersMessage, DescribeDefaultClusterParametersResult> {
        return .init(
            input: input,
            command: describeDefaultClusterParameters,
            inputKey: \DescribeDefaultClusterParametersMessage.marker,
            outputKey: \DescribeDefaultClusterParametersResult.defaultClusterParameters?.marker,
            logger: logger,
            on: eventLoop
        )
    }

    ///  Describes a Redshift-managed VPC endpoint.
    /// Return PaginatorSequence for operation.
    ///
    /// - Parameters:
    ///   - input: Input for request
    ///   - logger: Logger used flot logging
    ///   - eventLoop: EventLoop to run this process on
    public func describeEndpointAccessPaginator(
        _ input: DescribeEndpointAccessMessage,
        logger: Logger = AWSClient.loggingDisabled,
        on eventLoop: EventLoop? = nil
    ) -> AWSClient.PaginatorSequence<DescribeEndpointAccessMessage, EndpointAccessList> {
        return .init(
            input: input,
            command: describeEndpointAccess,
            inputKey: \DescribeEndpointAccessMessage.marker,
            outputKey: \EndpointAccessList.marker,
            logger: logger,
            on: eventLoop
        )
    }

    ///  Describes an endpoint authorization.
    /// Return PaginatorSequence for operation.
    ///
    /// - Parameters:
    ///   - input: Input for request
    ///   - logger: Logger used flot logging
    ///   - eventLoop: EventLoop to run this process on
    public func describeEndpointAuthorizationPaginator(
        _ input: DescribeEndpointAuthorizationMessage,
        logger: Logger = AWSClient.loggingDisabled,
        on eventLoop: EventLoop? = nil
    ) -> AWSClient.PaginatorSequence<DescribeEndpointAuthorizationMessage, EndpointAuthorizationList> {
        return .init(
            input: input,
            command: describeEndpointAuthorization,
            inputKey: \DescribeEndpointAuthorizationMessage.marker,
            outputKey: \EndpointAuthorizationList.marker,
            logger: logger,
            on: eventLoop
        )
    }

    ///  Lists descriptions of all the Amazon Redshift event notification subscriptions for a customer account. If you specify a subscription name, lists the description for that subscription. If you specify both tag keys and tag values in the same request, Amazon Redshift returns all event notification subscriptions that match any combination of the specified keys and values. For example, if you have owner and environment for tag keys, and admin and test for tag values, all subscriptions that have any combination of those values are returned. If both tag keys and values are omitted from the request, subscriptions are returned regardless of whether they have tag keys or values associated with them.
    /// Return PaginatorSequence for operation.
    ///
    /// - Parameters:
    ///   - input: Input for request
    ///   - logger: Logger used flot logging
    ///   - eventLoop: EventLoop to run this process on
    public func describeEventSubscriptionsPaginator(
        _ input: DescribeEventSubscriptionsMessage,
        logger: Logger = AWSClient.loggingDisabled,
        on eventLoop: EventLoop? = nil
    ) -> AWSClient.PaginatorSequence<DescribeEventSubscriptionsMessage, EventSubscriptionsMessage> {
        return .init(
            input: input,
            command: describeEventSubscriptions,
            inputKey: \DescribeEventSubscriptionsMessage.marker,
            outputKey: \EventSubscriptionsMessage.marker,
            logger: logger,
            on: eventLoop
        )
    }

    ///  Returns events related to clusters, security groups, snapshots, and parameter groups for the past 14 days. Events specific to a particular cluster, security group, snapshot or parameter group can be obtained by providing the name as a parameter. By default, the past hour of events are returned.
    /// Return PaginatorSequence for operation.
    ///
    /// - Parameters:
    ///   - input: Input for request
    ///   - logger: Logger used flot logging
    ///   - eventLoop: EventLoop to run this process on
    public func describeEventsPaginator(
        _ input: DescribeEventsMessage,
        logger: Logger = AWSClient.loggingDisabled,
        on eventLoop: EventLoop? = nil
    ) -> AWSClient.PaginatorSequence<DescribeEventsMessage, EventsMessage> {
        return .init(
            input: input,
            command: describeEvents,
            inputKey: \DescribeEventsMessage.marker,
            outputKey: \EventsMessage.marker,
            logger: logger,
            on: eventLoop
        )
    }

    ///  Returns information about the specified HSM client certificate. If no certificate ID is specified, returns information about all the HSM certificates owned by your Amazon Web Services account. If you specify both tag keys and tag values in the same request, Amazon Redshift returns all HSM client certificates that match any combination of the specified keys and values. For example, if you have owner and environment for tag keys, and admin and test for tag values, all HSM client certificates that have any combination of those values are returned. If both tag keys and values are omitted from the request, HSM client certificates are returned regardless of whether they have tag keys or values associated with them.
    /// Return PaginatorSequence for operation.
    ///
    /// - Parameters:
    ///   - input: Input for request
    ///   - logger: Logger used flot logging
    ///   - eventLoop: EventLoop to run this process on
    public func describeHsmClientCertificatesPaginator(
        _ input: DescribeHsmClientCertificatesMessage,
        logger: Logger = AWSClient.loggingDisabled,
        on eventLoop: EventLoop? = nil
    ) -> AWSClient.PaginatorSequence<DescribeHsmClientCertificatesMessage, HsmClientCertificateMessage> {
        return .init(
            input: input,
            command: describeHsmClientCertificates,
            inputKey: \DescribeHsmClientCertificatesMessage.marker,
            outputKey: \HsmClientCertificateMessage.marker,
            logger: logger,
            on: eventLoop
        )
    }

    ///  Returns information about the specified Amazon Redshift HSM configuration. If no configuration ID is specified, returns information about all the HSM configurations owned by your Amazon Web Services account. If you specify both tag keys and tag values in the same request, Amazon Redshift returns all HSM connections that match any combination of the specified keys and values. For example, if you have owner and environment for tag keys, and admin and test for tag values, all HSM connections that have any combination of those values are returned. If both tag keys and values are omitted from the request, HSM connections are returned regardless of whether they have tag keys or values associated with them.
    /// Return PaginatorSequence for operation.
    ///
    /// - Parameters:
    ///   - input: Input for request
    ///   - logger: Logger used flot logging
    ///   - eventLoop: EventLoop to run this process on
    public func describeHsmConfigurationsPaginator(
        _ input: DescribeHsmConfigurationsMessage,
        logger: Logger = AWSClient.loggingDisabled,
        on eventLoop: EventLoop? = nil
    ) -> AWSClient.PaginatorSequence<DescribeHsmConfigurationsMessage, HsmConfigurationMessage> {
        return .init(
            input: input,
            command: describeHsmConfigurations,
            inputKey: \DescribeHsmConfigurationsMessage.marker,
            outputKey: \HsmConfigurationMessage.marker,
            logger: logger,
            on: eventLoop
        )
    }

    ///  Returns properties of possible node configurations such as node type, number of nodes, and  disk usage for the specified action type.
    /// Return PaginatorSequence for operation.
    ///
    /// - Parameters:
    ///   - input: Input for request
    ///   - logger: Logger used flot logging
    ///   - eventLoop: EventLoop to run this process on
    public func describeNodeConfigurationOptionsPaginator(
        _ input: DescribeNodeConfigurationOptionsMessage,
        logger: Logger = AWSClient.loggingDisabled,
        on eventLoop: EventLoop? = nil
    ) -> AWSClient.PaginatorSequence<DescribeNodeConfigurationOptionsMessage, NodeConfigurationOptionsMessage> {
        return .init(
            input: input,
            command: describeNodeConfigurationOptions,
            inputKey: \DescribeNodeConfigurationOptionsMessage.marker,
            outputKey: \NodeConfigurationOptionsMessage.marker,
            logger: logger,
            on: eventLoop
        )
    }

    ///  Returns a list of orderable cluster options. Before you create a new cluster you can use this operation to find what options are available, such as the EC2 Availability Zones (AZ) in the specific Amazon Web Services Region that you can specify, and the node types you can request. The node types differ by available storage, memory, CPU and price. With the cost involved you might want to obtain a list of cluster options in the specific region and specify values when creating a cluster.
    ///  For more information about managing clusters, go to
    ///  Amazon Redshift Clusters
    ///  in the Amazon Redshift Cluster Management Guide.
    /// Return PaginatorSequence for operation.
    ///
    /// - Parameters:
    ///   - input: Input for request
    ///   - logger: Logger used flot logging
    ///   - eventLoop: EventLoop to run this process on
    public func describeOrderableClusterOptionsPaginator(
        _ input: DescribeOrderableClusterOptionsMessage,
        logger: Logger = AWSClient.loggingDisabled,
        on eventLoop: EventLoop? = nil
    ) -> AWSClient.PaginatorSequence<DescribeOrderableClusterOptionsMessage, OrderableClusterOptionsMessage> {
        return .init(
            input: input,
            command: describeOrderableClusterOptions,
            inputKey: \DescribeOrderableClusterOptionsMessage.marker,
            outputKey: \OrderableClusterOptionsMessage.marker,
            logger: logger,
            on: eventLoop
        )
    }

    ///  Returns a list of the available reserved node offerings by Amazon Redshift with their descriptions including the node type, the fixed and recurring costs of reserving the node and duration the node will be reserved for you. These descriptions help you determine which reserve node offering you want to purchase. You then use the unique offering ID in you call to PurchaseReservedNodeOffering to reserve one or more nodes for your Amazon Redshift cluster.
    ///  For more information about reserved node offerings, go to
    ///  Purchasing Reserved Nodes
    ///  in the Amazon Redshift Cluster Management Guide.
    /// Return PaginatorSequence for operation.
    ///
    /// - Parameters:
    ///   - input: Input for request
    ///   - logger: Logger used flot logging
    ///   - eventLoop: EventLoop to run this process on
    public func describeReservedNodeOfferingsPaginator(
        _ input: DescribeReservedNodeOfferingsMessage,
        logger: Logger = AWSClient.loggingDisabled,
        on eventLoop: EventLoop? = nil
    ) -> AWSClient.PaginatorSequence<DescribeReservedNodeOfferingsMessage, ReservedNodeOfferingsMessage> {
        return .init(
            input: input,
            command: describeReservedNodeOfferings,
            inputKey: \DescribeReservedNodeOfferingsMessage.marker,
            outputKey: \ReservedNodeOfferingsMessage.marker,
            logger: logger,
            on: eventLoop
        )
    }

    ///  Returns the descriptions of the reserved nodes.
    /// Return PaginatorSequence for operation.
    ///
    /// - Parameters:
    ///   - input: Input for request
    ///   - logger: Logger used flot logging
    ///   - eventLoop: EventLoop to run this process on
    public func describeReservedNodesPaginator(
        _ input: DescribeReservedNodesMessage,
        logger: Logger = AWSClient.loggingDisabled,
        on eventLoop: EventLoop? = nil
    ) -> AWSClient.PaginatorSequence<DescribeReservedNodesMessage, ReservedNodesMessage> {
        return .init(
            input: input,
            command: describeReservedNodes,
            inputKey: \DescribeReservedNodesMessage.marker,
            outputKey: \ReservedNodesMessage.marker,
            logger: logger,
            on: eventLoop
        )
    }

    ///  Describes properties of scheduled actions.
    /// Return PaginatorSequence for operation.
    ///
    /// - Parameters:
    ///   - input: Input for request
    ///   - logger: Logger used flot logging
    ///   - eventLoop: EventLoop to run this process on
    public func describeScheduledActionsPaginator(
        _ input: DescribeScheduledActionsMessage,
        logger: Logger = AWSClient.loggingDisabled,
        on eventLoop: EventLoop? = nil
    ) -> AWSClient.PaginatorSequence<DescribeScheduledActionsMessage, ScheduledActionsMessage> {
        return .init(
            input: input,
            command: describeScheduledActions,
            inputKey: \DescribeScheduledActionsMessage.marker,
            outputKey: \ScheduledActionsMessage.marker,
            logger: logger,
            on: eventLoop
        )
    }

    ///  Returns a list of snapshot copy grants owned by the Amazon Web Services account in the destination region.
    ///  For more information about managing snapshot copy grants, go to
    ///  Amazon Redshift Database Encryption
    ///  in the Amazon Redshift Cluster Management Guide.
    /// Return PaginatorSequence for operation.
    ///
    /// - Parameters:
    ///   - input: Input for request
    ///   - logger: Logger used flot logging
    ///   - eventLoop: EventLoop to run this process on
    public func describeSnapshotCopyGrantsPaginator(
        _ input: DescribeSnapshotCopyGrantsMessage,
        logger: Logger = AWSClient.loggingDisabled,
        on eventLoop: EventLoop? = nil
    ) -> AWSClient.PaginatorSequence<DescribeSnapshotCopyGrantsMessage, SnapshotCopyGrantMessage> {
        return .init(
            input: input,
            command: describeSnapshotCopyGrants,
            inputKey: \DescribeSnapshotCopyGrantsMessage.marker,
            outputKey: \SnapshotCopyGrantMessage.marker,
            logger: logger,
            on: eventLoop
        )
    }

    ///  Returns a list of snapshot schedules.
    /// Return PaginatorSequence for operation.
    ///
    /// - Parameters:
    ///   - input: Input for request
    ///   - logger: Logger used flot logging
    ///   - eventLoop: EventLoop to run this process on
    public func describeSnapshotSchedulesPaginator(
        _ input: DescribeSnapshotSchedulesMessage,
        logger: Logger = AWSClient.loggingDisabled,
        on eventLoop: EventLoop? = nil
    ) -> AWSClient.PaginatorSequence<DescribeSnapshotSchedulesMessage, DescribeSnapshotSchedulesOutputMessage> {
        return .init(
            input: input,
            command: describeSnapshotSchedules,
            inputKey: \DescribeSnapshotSchedulesMessage.marker,
            outputKey: \DescribeSnapshotSchedulesOutputMessage.marker,
            logger: logger,
            on: eventLoop
        )
    }

    ///  Lists the status of one or more table restore requests made using the RestoreTableFromClusterSnapshot API action. If you don't specify a value for the TableRestoreRequestId parameter, then DescribeTableRestoreStatus returns the status of all table restore requests ordered by the date and time of the request in ascending order. Otherwise DescribeTableRestoreStatus returns the status of the table specified by TableRestoreRequestId.
    /// Return PaginatorSequence for operation.
    ///
    /// - Parameters:
    ///   - input: Input for request
    ///   - logger: Logger used flot logging
    ///   - eventLoop: EventLoop to run this process on
    public func describeTableRestoreStatusPaginator(
        _ input: DescribeTableRestoreStatusMessage,
        logger: Logger = AWSClient.loggingDisabled,
        on eventLoop: EventLoop? = nil
    ) -> AWSClient.PaginatorSequence<DescribeTableRestoreStatusMessage, TableRestoreStatusMessage> {
        return .init(
            input: input,
            command: describeTableRestoreStatus,
            inputKey: \DescribeTableRestoreStatusMessage.marker,
            outputKey: \TableRestoreStatusMessage.marker,
            logger: logger,
            on: eventLoop
        )
    }

    ///  Returns a list of tags. You can return tags from a specific resource by specifying an ARN, or you can return all tags for a given type of resource, such as clusters, snapshots, and so on. The following are limitations for DescribeTags:    You cannot specify an ARN and a resource-type value together in the same request.   You cannot use the MaxRecords and Marker parameters together with the ARN parameter.   The MaxRecords parameter can be a range from 10 to 50 results to return in a request.   If you specify both tag keys and tag values in the same request, Amazon Redshift returns all resources that match any combination of the specified keys and values. For example, if you have owner and environment for tag keys, and admin and test for tag values, all resources that have any combination of those values are returned. If both tag keys and values are omitted from the request, resources are returned regardless of whether they have tag keys or values associated with them.
    /// Return PaginatorSequence for operation.
    ///
    /// - Parameters:
    ///   - input: Input for request
    ///   - logger: Logger used flot logging
    ///   - eventLoop: EventLoop to run this process on
    public func describeTagsPaginator(
        _ input: DescribeTagsMessage,
        logger: Logger = AWSClient.loggingDisabled,
        on eventLoop: EventLoop? = nil
    ) -> AWSClient.PaginatorSequence<DescribeTagsMessage, TaggedResourceListMessage> {
        return .init(
            input: input,
            command: describeTags,
            inputKey: \DescribeTagsMessage.marker,
            outputKey: \TaggedResourceListMessage.marker,
            logger: logger,
            on: eventLoop
        )
    }

    ///  Shows usage limits on a cluster. Results are filtered based on the combination of input usage limit identifier, cluster identifier, and feature type parameters:   If usage limit identifier, cluster identifier, and feature type are not provided,  then all usage limit objects for the current account in the current region are returned.   If usage limit identifier is provided,  then the corresponding usage limit object is returned.   If cluster identifier is provided,  then all usage limit objects for the specified cluster are returned.   If cluster identifier and feature type are provided,  then all usage limit objects for the combination of cluster and feature are returned.
    /// Return PaginatorSequence for operation.
    ///
    /// - Parameters:
    ///   - input: Input for request
    ///   - logger: Logger used flot logging
    ///   - eventLoop: EventLoop to run this process on
    public func describeUsageLimitsPaginator(
        _ input: DescribeUsageLimitsMessage,
        logger: Logger = AWSClient.loggingDisabled,
        on eventLoop: EventLoop? = nil
    ) -> AWSClient.PaginatorSequence<DescribeUsageLimitsMessage, UsageLimitList> {
        return .init(
            input: input,
            command: describeUsageLimits,
            inputKey: \DescribeUsageLimitsMessage.marker,
            outputKey: \UsageLimitList.marker,
            logger: logger,
            on: eventLoop
        )
    }

    ///  Returns an array of DC2 ReservedNodeOfferings that matches the payment type, term, and usage price of the given DC1 reserved node.
    /// Return PaginatorSequence for operation.
    ///
    /// - Parameters:
    ///   - input: Input for request
    ///   - logger: Logger used flot logging
    ///   - eventLoop: EventLoop to run this process on
    public func getReservedNodeExchangeOfferingsPaginator(
        _ input: GetReservedNodeExchangeOfferingsInputMessage,
        logger: Logger = AWSClient.loggingDisabled,
        on eventLoop: EventLoop? = nil
    ) -> AWSClient.PaginatorSequence<GetReservedNodeExchangeOfferingsInputMessage, GetReservedNodeExchangeOfferingsOutputMessage> {
        return .init(
            input: input,
            command: getReservedNodeExchangeOfferings,
            inputKey: \GetReservedNodeExchangeOfferingsInputMessage.marker,
            outputKey: \GetReservedNodeExchangeOfferingsOutputMessage.marker,
            logger: logger,
            on: eventLoop
        )
    }
}

#endif // compiler(>=5.5) && canImport(_Concurrency)
