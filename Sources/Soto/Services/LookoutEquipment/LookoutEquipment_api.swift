//===----------------------------------------------------------------------===//
//
// This source file is part of the Soto for AWS open source project
//
// Copyright (c) 2017-2024 the Soto project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
// See CONTRIBUTORS.txt for the list of Soto project authors
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by https://github.com/soto-project/soto-codegenerator.
// DO NOT EDIT.

@_exported import SotoCore

/// Service object for interacting with AWS LookoutEquipment service.
///
/// Amazon Lookout for Equipment is a machine learning service that uses advanced analytics to identify anomalies in machines from sensor data for use in predictive maintenance.
public struct LookoutEquipment: AWSService {
    // MARK: Member variables

    /// Client used for communication with AWS
    public let client: AWSClient
    /// Service configuration
    public let config: AWSServiceConfig

    // MARK: Initialization

    /// Initialize the LookoutEquipment client
    /// - parameters:
    ///     - client: AWSClient used to process requests
    ///     - region: Region of server you want to communicate with. This will override the partition parameter.
    ///     - partition: AWS partition where service resides, standard (.aws), china (.awscn), government (.awsusgov).
    ///     - endpoint: Custom endpoint URL to use instead of standard AWS servers
    ///     - middleware: Middleware chain used to edit requests before they are sent and responses before they are decoded 
    ///     - timeout: Timeout value for HTTP requests
    ///     - byteBufferAllocator: Allocator for ByteBuffers
    ///     - options: Service options
    public init(
        client: AWSClient,
        region: SotoCore.Region? = nil,
        partition: AWSPartition = .aws,
        endpoint: String? = nil,
        middleware: AWSMiddlewareProtocol? = nil,
        timeout: TimeAmount? = nil,
        byteBufferAllocator: ByteBufferAllocator = ByteBufferAllocator(),
        options: AWSServiceConfig.Options = []
    ) {
        self.client = client
        self.config = AWSServiceConfig(
            region: region,
            partition: region?.partition ?? partition,
            amzTarget: "AWSLookoutEquipmentFrontendService",
            serviceName: "LookoutEquipment",
            serviceIdentifier: "lookoutequipment",
            serviceProtocol: .json(version: "1.0"),
            apiVersion: "2020-12-15",
            endpoint: endpoint,
            errorType: LookoutEquipmentErrorType.self,
            middleware: middleware,
            timeout: timeout,
            byteBufferAllocator: byteBufferAllocator,
            options: options
        )
    }





    // MARK: API Calls

    /// Creates a container for a collection of data being ingested for analysis. The dataset contains the metadata describing where the data is and what the data actually looks like. For example, it contains the location of the data source, the data schema, and other information. A dataset also contains any tags associated with the ingested data.
    @Sendable
    public func createDataset(_ input: CreateDatasetRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> CreateDatasetResponse {
        return try await self.client.execute(
            operation: "CreateDataset", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    ///  Creates a scheduled inference. Scheduling an inference is setting up a continuous real-time inference plan to analyze new measurement data. When setting up the schedule, you provide an S3 bucket location for the input data, assign it a delimiter between separate entries in the data, set an offset delay if desired, and set the frequency of inferencing. You must also provide an S3 bucket location for the output data.
    @Sendable
    public func createInferenceScheduler(_ input: CreateInferenceSchedulerRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> CreateInferenceSchedulerResponse {
        return try await self.client.execute(
            operation: "CreateInferenceScheduler", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    ///  Creates a label for an event.
    @Sendable
    public func createLabel(_ input: CreateLabelRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> CreateLabelResponse {
        return try await self.client.execute(
            operation: "CreateLabel", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    ///  Creates a group of labels.
    @Sendable
    public func createLabelGroup(_ input: CreateLabelGroupRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> CreateLabelGroupResponse {
        return try await self.client.execute(
            operation: "CreateLabelGroup", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Creates a machine learning model for data inference.  A machine-learning (ML) model is a mathematical model that finds patterns in your data. In Amazon Lookout for Equipment, the model learns the patterns of normal behavior and detects abnormal behavior that could be potential equipment failure (or maintenance events). The models are made by analyzing normal data and abnormalities in machine behavior that have already occurred. Your model is trained using a portion of the data from your dataset and uses that data to learn patterns of normal behavior and abnormal patterns that lead to equipment failure. Another portion of the data is used to evaluate the model's accuracy.
    @Sendable
    public func createModel(_ input: CreateModelRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> CreateModelResponse {
        return try await self.client.execute(
            operation: "CreateModel", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Creates a retraining scheduler on the specified model.
    @Sendable
    public func createRetrainingScheduler(_ input: CreateRetrainingSchedulerRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> CreateRetrainingSchedulerResponse {
        return try await self.client.execute(
            operation: "CreateRetrainingScheduler", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    ///  Deletes a dataset and associated artifacts. The operation will check to see if any inference scheduler or data ingestion job is currently using the dataset, and if there isn't, the dataset, its metadata, and any associated data stored in S3 will be deleted. This does not affect any models that used this dataset for training and evaluation, but does prevent it from being used in the future.
    @Sendable
    public func deleteDataset(_ input: DeleteDatasetRequest, logger: Logger = AWSClient.loggingDisabled) async throws {
        return try await self.client.execute(
            operation: "DeleteDataset", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Deletes an inference scheduler that has been set up. Prior inference results will not be deleted.
    @Sendable
    public func deleteInferenceScheduler(_ input: DeleteInferenceSchedulerRequest, logger: Logger = AWSClient.loggingDisabled) async throws {
        return try await self.client.execute(
            operation: "DeleteInferenceScheduler", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    ///  Deletes a label.
    @Sendable
    public func deleteLabel(_ input: DeleteLabelRequest, logger: Logger = AWSClient.loggingDisabled) async throws {
        return try await self.client.execute(
            operation: "DeleteLabel", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    ///  Deletes a group of labels.
    @Sendable
    public func deleteLabelGroup(_ input: DeleteLabelGroupRequest, logger: Logger = AWSClient.loggingDisabled) async throws {
        return try await self.client.execute(
            operation: "DeleteLabelGroup", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Deletes a machine learning model currently available for Amazon Lookout for Equipment. This will prevent it from being used with an inference scheduler, even one that is already set up.
    @Sendable
    public func deleteModel(_ input: DeleteModelRequest, logger: Logger = AWSClient.loggingDisabled) async throws {
        return try await self.client.execute(
            operation: "DeleteModel", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Deletes the resource policy attached to the resource.
    @Sendable
    public func deleteResourcePolicy(_ input: DeleteResourcePolicyRequest, logger: Logger = AWSClient.loggingDisabled) async throws {
        return try await self.client.execute(
            operation: "DeleteResourcePolicy", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Deletes a retraining scheduler from a model. The retraining scheduler must be in the STOPPED status.
    @Sendable
    public func deleteRetrainingScheduler(_ input: DeleteRetrainingSchedulerRequest, logger: Logger = AWSClient.loggingDisabled) async throws {
        return try await self.client.execute(
            operation: "DeleteRetrainingScheduler", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Provides information on a specific data ingestion job such as creation time, dataset ARN, and status.
    @Sendable
    public func describeDataIngestionJob(_ input: DescribeDataIngestionJobRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DescribeDataIngestionJobResponse {
        return try await self.client.execute(
            operation: "DescribeDataIngestionJob", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Provides a JSON description of the data in each time series dataset, including names, column names, and data types.
    @Sendable
    public func describeDataset(_ input: DescribeDatasetRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DescribeDatasetResponse {
        return try await self.client.execute(
            operation: "DescribeDataset", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    ///  Specifies information about the inference scheduler being used, including name, model, status, and associated metadata
    @Sendable
    public func describeInferenceScheduler(_ input: DescribeInferenceSchedulerRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DescribeInferenceSchedulerResponse {
        return try await self.client.execute(
            operation: "DescribeInferenceScheduler", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    ///  Returns the name of the label.
    @Sendable
    public func describeLabel(_ input: DescribeLabelRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DescribeLabelResponse {
        return try await self.client.execute(
            operation: "DescribeLabel", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    ///  Returns information about the label group.
    @Sendable
    public func describeLabelGroup(_ input: DescribeLabelGroupRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DescribeLabelGroupResponse {
        return try await self.client.execute(
            operation: "DescribeLabelGroup", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Provides a JSON containing the overall information about a specific machine learning model, including model name and ARN, dataset, training and evaluation information, status, and so on.
    @Sendable
    public func describeModel(_ input: DescribeModelRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DescribeModelResponse {
        return try await self.client.execute(
            operation: "DescribeModel", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Retrieves information about a specific machine learning model version.
    @Sendable
    public func describeModelVersion(_ input: DescribeModelVersionRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DescribeModelVersionResponse {
        return try await self.client.execute(
            operation: "DescribeModelVersion", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Provides the details of a resource policy attached to a resource.
    @Sendable
    public func describeResourcePolicy(_ input: DescribeResourcePolicyRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DescribeResourcePolicyResponse {
        return try await self.client.execute(
            operation: "DescribeResourcePolicy", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Provides a description of the retraining scheduler, including information such as the model name and retraining parameters.
    @Sendable
    public func describeRetrainingScheduler(_ input: DescribeRetrainingSchedulerRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DescribeRetrainingSchedulerResponse {
        return try await self.client.execute(
            operation: "DescribeRetrainingScheduler", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Imports a dataset.
    @Sendable
    public func importDataset(_ input: ImportDatasetRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> ImportDatasetResponse {
        return try await self.client.execute(
            operation: "ImportDataset", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Imports a model that has been trained successfully.
    @Sendable
    public func importModelVersion(_ input: ImportModelVersionRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> ImportModelVersionResponse {
        return try await self.client.execute(
            operation: "ImportModelVersion", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Provides a list of all data ingestion jobs, including dataset name and ARN, S3 location of the input data, status, and so on.
    @Sendable
    public func listDataIngestionJobs(_ input: ListDataIngestionJobsRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> ListDataIngestionJobsResponse {
        return try await self.client.execute(
            operation: "ListDataIngestionJobs", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Lists all datasets currently available in your account, filtering on the dataset name.
    @Sendable
    public func listDatasets(_ input: ListDatasetsRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> ListDatasetsResponse {
        return try await self.client.execute(
            operation: "ListDatasets", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    ///  Lists all inference events that have been found for the specified inference scheduler.
    @Sendable
    public func listInferenceEvents(_ input: ListInferenceEventsRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> ListInferenceEventsResponse {
        return try await self.client.execute(
            operation: "ListInferenceEvents", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    ///  Lists all inference executions that have been performed by the specified inference scheduler.
    @Sendable
    public func listInferenceExecutions(_ input: ListInferenceExecutionsRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> ListInferenceExecutionsResponse {
        return try await self.client.execute(
            operation: "ListInferenceExecutions", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Retrieves a list of all inference schedulers currently available for your account.
    @Sendable
    public func listInferenceSchedulers(_ input: ListInferenceSchedulersRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> ListInferenceSchedulersResponse {
        return try await self.client.execute(
            operation: "ListInferenceSchedulers", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    ///  Returns a list of the label groups.
    @Sendable
    public func listLabelGroups(_ input: ListLabelGroupsRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> ListLabelGroupsResponse {
        return try await self.client.execute(
            operation: "ListLabelGroups", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    ///  Provides a list of labels.
    @Sendable
    public func listLabels(_ input: ListLabelsRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> ListLabelsResponse {
        return try await self.client.execute(
            operation: "ListLabels", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Generates a list of all model versions for a given model, including the model version, model version ARN, and status. To list a subset of versions, use the MaxModelVersion and MinModelVersion fields.
    @Sendable
    public func listModelVersions(_ input: ListModelVersionsRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> ListModelVersionsResponse {
        return try await self.client.execute(
            operation: "ListModelVersions", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Generates a list of all models in the account, including model name and ARN, dataset, and status.
    @Sendable
    public func listModels(_ input: ListModelsRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> ListModelsResponse {
        return try await self.client.execute(
            operation: "ListModels", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Lists all retraining schedulers in your account, filtering by model name prefix and status.
    @Sendable
    public func listRetrainingSchedulers(_ input: ListRetrainingSchedulersRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> ListRetrainingSchedulersResponse {
        return try await self.client.execute(
            operation: "ListRetrainingSchedulers", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    ///  Lists statistics about the data collected for each of the sensors that have been successfully ingested in the particular dataset. Can also be used to retreive Sensor Statistics for a previous ingestion job.
    @Sendable
    public func listSensorStatistics(_ input: ListSensorStatisticsRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> ListSensorStatisticsResponse {
        return try await self.client.execute(
            operation: "ListSensorStatistics", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Lists all the tags for a specified resource, including key and value.
    @Sendable
    public func listTagsForResource(_ input: ListTagsForResourceRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> ListTagsForResourceResponse {
        return try await self.client.execute(
            operation: "ListTagsForResource", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Creates a resource control policy for a given resource.
    @Sendable
    public func putResourcePolicy(_ input: PutResourcePolicyRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> PutResourcePolicyResponse {
        return try await self.client.execute(
            operation: "PutResourcePolicy", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Starts a data ingestion job. Amazon Lookout for Equipment returns the job status.
    @Sendable
    public func startDataIngestionJob(_ input: StartDataIngestionJobRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> StartDataIngestionJobResponse {
        return try await self.client.execute(
            operation: "StartDataIngestionJob", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Starts an inference scheduler.
    @Sendable
    public func startInferenceScheduler(_ input: StartInferenceSchedulerRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> StartInferenceSchedulerResponse {
        return try await self.client.execute(
            operation: "StartInferenceScheduler", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Starts a retraining scheduler.
    @Sendable
    public func startRetrainingScheduler(_ input: StartRetrainingSchedulerRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> StartRetrainingSchedulerResponse {
        return try await self.client.execute(
            operation: "StartRetrainingScheduler", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Stops an inference scheduler.
    @Sendable
    public func stopInferenceScheduler(_ input: StopInferenceSchedulerRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> StopInferenceSchedulerResponse {
        return try await self.client.execute(
            operation: "StopInferenceScheduler", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Stops a retraining scheduler.
    @Sendable
    public func stopRetrainingScheduler(_ input: StopRetrainingSchedulerRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> StopRetrainingSchedulerResponse {
        return try await self.client.execute(
            operation: "StopRetrainingScheduler", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Associates a given tag to a resource in your account. A tag is a key-value pair which can be added to an Amazon Lookout for Equipment resource as metadata. Tags can be used for organizing your resources as well as helping you to search and filter by tag. Multiple tags can be added to a resource, either when you create it, or later. Up to 50 tags can be associated with each resource.
    @Sendable
    public func tagResource(_ input: TagResourceRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> TagResourceResponse {
        return try await self.client.execute(
            operation: "TagResource", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Removes a specific tag from a given resource. The tag is specified by its key.
    @Sendable
    public func untagResource(_ input: UntagResourceRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> UntagResourceResponse {
        return try await self.client.execute(
            operation: "UntagResource", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Sets the active model version for a given machine learning model.
    @Sendable
    public func updateActiveModelVersion(_ input: UpdateActiveModelVersionRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> UpdateActiveModelVersionResponse {
        return try await self.client.execute(
            operation: "UpdateActiveModelVersion", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Updates an inference scheduler.
    @Sendable
    public func updateInferenceScheduler(_ input: UpdateInferenceSchedulerRequest, logger: Logger = AWSClient.loggingDisabled) async throws {
        return try await self.client.execute(
            operation: "UpdateInferenceScheduler", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    ///  Updates the label group.
    @Sendable
    public func updateLabelGroup(_ input: UpdateLabelGroupRequest, logger: Logger = AWSClient.loggingDisabled) async throws {
        return try await self.client.execute(
            operation: "UpdateLabelGroup", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Updates a model in the account.
    @Sendable
    public func updateModel(_ input: UpdateModelRequest, logger: Logger = AWSClient.loggingDisabled) async throws {
        return try await self.client.execute(
            operation: "UpdateModel", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Updates a retraining scheduler.
    @Sendable
    public func updateRetrainingScheduler(_ input: UpdateRetrainingSchedulerRequest, logger: Logger = AWSClient.loggingDisabled) async throws {
        return try await self.client.execute(
            operation: "UpdateRetrainingScheduler", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
}

extension LookoutEquipment {
    /// Initializer required by `AWSService.with(middlewares:timeout:byteBufferAllocator:options)`. You are not able to use this initializer directly as there are not public
    /// initializers for `AWSServiceConfig.Patch`. Please use `AWSService.with(middlewares:timeout:byteBufferAllocator:options)` instead.
    public init(from: LookoutEquipment, patch: AWSServiceConfig.Patch) {
        self.client = from.client
        self.config = from.config.with(patch: patch)
    }
}

// MARK: Paginators

@available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
extension LookoutEquipment {
    /// Provides a list of all data ingestion jobs, including dataset name and ARN, S3 location of the input data, status, and so on.
    /// Return PaginatorSequence for operation.
    ///
    /// - Parameters:
    ///   - input: Input for request
    ///   - logger: Logger used flot logging
    public func listDataIngestionJobsPaginator(
        _ input: ListDataIngestionJobsRequest,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<ListDataIngestionJobsRequest, ListDataIngestionJobsResponse> {
        return .init(
            input: input,
            command: self.listDataIngestionJobs,
            inputKey: \ListDataIngestionJobsRequest.nextToken,
            outputKey: \ListDataIngestionJobsResponse.nextToken,
            logger: logger
        )
    }

    /// Lists all datasets currently available in your account, filtering on the dataset name.
    /// Return PaginatorSequence for operation.
    ///
    /// - Parameters:
    ///   - input: Input for request
    ///   - logger: Logger used flot logging
    public func listDatasetsPaginator(
        _ input: ListDatasetsRequest,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<ListDatasetsRequest, ListDatasetsResponse> {
        return .init(
            input: input,
            command: self.listDatasets,
            inputKey: \ListDatasetsRequest.nextToken,
            outputKey: \ListDatasetsResponse.nextToken,
            logger: logger
        )
    }

    ///  Lists all inference events that have been found for the specified inference scheduler.
    /// Return PaginatorSequence for operation.
    ///
    /// - Parameters:
    ///   - input: Input for request
    ///   - logger: Logger used flot logging
    public func listInferenceEventsPaginator(
        _ input: ListInferenceEventsRequest,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<ListInferenceEventsRequest, ListInferenceEventsResponse> {
        return .init(
            input: input,
            command: self.listInferenceEvents,
            inputKey: \ListInferenceEventsRequest.nextToken,
            outputKey: \ListInferenceEventsResponse.nextToken,
            logger: logger
        )
    }

    ///  Lists all inference executions that have been performed by the specified inference scheduler.
    /// Return PaginatorSequence for operation.
    ///
    /// - Parameters:
    ///   - input: Input for request
    ///   - logger: Logger used flot logging
    public func listInferenceExecutionsPaginator(
        _ input: ListInferenceExecutionsRequest,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<ListInferenceExecutionsRequest, ListInferenceExecutionsResponse> {
        return .init(
            input: input,
            command: self.listInferenceExecutions,
            inputKey: \ListInferenceExecutionsRequest.nextToken,
            outputKey: \ListInferenceExecutionsResponse.nextToken,
            logger: logger
        )
    }

    /// Retrieves a list of all inference schedulers currently available for your account.
    /// Return PaginatorSequence for operation.
    ///
    /// - Parameters:
    ///   - input: Input for request
    ///   - logger: Logger used flot logging
    public func listInferenceSchedulersPaginator(
        _ input: ListInferenceSchedulersRequest,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<ListInferenceSchedulersRequest, ListInferenceSchedulersResponse> {
        return .init(
            input: input,
            command: self.listInferenceSchedulers,
            inputKey: \ListInferenceSchedulersRequest.nextToken,
            outputKey: \ListInferenceSchedulersResponse.nextToken,
            logger: logger
        )
    }

    ///  Returns a list of the label groups.
    /// Return PaginatorSequence for operation.
    ///
    /// - Parameters:
    ///   - input: Input for request
    ///   - logger: Logger used flot logging
    public func listLabelGroupsPaginator(
        _ input: ListLabelGroupsRequest,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<ListLabelGroupsRequest, ListLabelGroupsResponse> {
        return .init(
            input: input,
            command: self.listLabelGroups,
            inputKey: \ListLabelGroupsRequest.nextToken,
            outputKey: \ListLabelGroupsResponse.nextToken,
            logger: logger
        )
    }

    ///  Provides a list of labels.
    /// Return PaginatorSequence for operation.
    ///
    /// - Parameters:
    ///   - input: Input for request
    ///   - logger: Logger used flot logging
    public func listLabelsPaginator(
        _ input: ListLabelsRequest,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<ListLabelsRequest, ListLabelsResponse> {
        return .init(
            input: input,
            command: self.listLabels,
            inputKey: \ListLabelsRequest.nextToken,
            outputKey: \ListLabelsResponse.nextToken,
            logger: logger
        )
    }

    /// Generates a list of all model versions for a given model, including the model version, model version ARN, and status. To list a subset of versions, use the MaxModelVersion and MinModelVersion fields.
    /// Return PaginatorSequence for operation.
    ///
    /// - Parameters:
    ///   - input: Input for request
    ///   - logger: Logger used flot logging
    public func listModelVersionsPaginator(
        _ input: ListModelVersionsRequest,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<ListModelVersionsRequest, ListModelVersionsResponse> {
        return .init(
            input: input,
            command: self.listModelVersions,
            inputKey: \ListModelVersionsRequest.nextToken,
            outputKey: \ListModelVersionsResponse.nextToken,
            logger: logger
        )
    }

    /// Generates a list of all models in the account, including model name and ARN, dataset, and status.
    /// Return PaginatorSequence for operation.
    ///
    /// - Parameters:
    ///   - input: Input for request
    ///   - logger: Logger used flot logging
    public func listModelsPaginator(
        _ input: ListModelsRequest,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<ListModelsRequest, ListModelsResponse> {
        return .init(
            input: input,
            command: self.listModels,
            inputKey: \ListModelsRequest.nextToken,
            outputKey: \ListModelsResponse.nextToken,
            logger: logger
        )
    }

    /// Lists all retraining schedulers in your account, filtering by model name prefix and status.
    /// Return PaginatorSequence for operation.
    ///
    /// - Parameters:
    ///   - input: Input for request
    ///   - logger: Logger used flot logging
    public func listRetrainingSchedulersPaginator(
        _ input: ListRetrainingSchedulersRequest,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<ListRetrainingSchedulersRequest, ListRetrainingSchedulersResponse> {
        return .init(
            input: input,
            command: self.listRetrainingSchedulers,
            inputKey: \ListRetrainingSchedulersRequest.nextToken,
            outputKey: \ListRetrainingSchedulersResponse.nextToken,
            logger: logger
        )
    }

    ///  Lists statistics about the data collected for each of the sensors that have been successfully ingested in the particular dataset. Can also be used to retreive Sensor Statistics for a previous ingestion job.
    /// Return PaginatorSequence for operation.
    ///
    /// - Parameters:
    ///   - input: Input for request
    ///   - logger: Logger used flot logging
    public func listSensorStatisticsPaginator(
        _ input: ListSensorStatisticsRequest,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<ListSensorStatisticsRequest, ListSensorStatisticsResponse> {
        return .init(
            input: input,
            command: self.listSensorStatistics,
            inputKey: \ListSensorStatisticsRequest.nextToken,
            outputKey: \ListSensorStatisticsResponse.nextToken,
            logger: logger
        )
    }
}

extension LookoutEquipment.ListDataIngestionJobsRequest: AWSPaginateToken {
    public func usingPaginationToken(_ token: String) -> LookoutEquipment.ListDataIngestionJobsRequest {
        return .init(
            datasetName: self.datasetName,
            maxResults: self.maxResults,
            nextToken: token,
            status: self.status
        )
    }
}

extension LookoutEquipment.ListDatasetsRequest: AWSPaginateToken {
    public func usingPaginationToken(_ token: String) -> LookoutEquipment.ListDatasetsRequest {
        return .init(
            datasetNameBeginsWith: self.datasetNameBeginsWith,
            maxResults: self.maxResults,
            nextToken: token
        )
    }
}

extension LookoutEquipment.ListInferenceEventsRequest: AWSPaginateToken {
    public func usingPaginationToken(_ token: String) -> LookoutEquipment.ListInferenceEventsRequest {
        return .init(
            inferenceSchedulerName: self.inferenceSchedulerName,
            intervalEndTime: self.intervalEndTime,
            intervalStartTime: self.intervalStartTime,
            maxResults: self.maxResults,
            nextToken: token
        )
    }
}

extension LookoutEquipment.ListInferenceExecutionsRequest: AWSPaginateToken {
    public func usingPaginationToken(_ token: String) -> LookoutEquipment.ListInferenceExecutionsRequest {
        return .init(
            dataEndTimeBefore: self.dataEndTimeBefore,
            dataStartTimeAfter: self.dataStartTimeAfter,
            inferenceSchedulerName: self.inferenceSchedulerName,
            maxResults: self.maxResults,
            nextToken: token,
            status: self.status
        )
    }
}

extension LookoutEquipment.ListInferenceSchedulersRequest: AWSPaginateToken {
    public func usingPaginationToken(_ token: String) -> LookoutEquipment.ListInferenceSchedulersRequest {
        return .init(
            inferenceSchedulerNameBeginsWith: self.inferenceSchedulerNameBeginsWith,
            maxResults: self.maxResults,
            modelName: self.modelName,
            nextToken: token,
            status: self.status
        )
    }
}

extension LookoutEquipment.ListLabelGroupsRequest: AWSPaginateToken {
    public func usingPaginationToken(_ token: String) -> LookoutEquipment.ListLabelGroupsRequest {
        return .init(
            labelGroupNameBeginsWith: self.labelGroupNameBeginsWith,
            maxResults: self.maxResults,
            nextToken: token
        )
    }
}

extension LookoutEquipment.ListLabelsRequest: AWSPaginateToken {
    public func usingPaginationToken(_ token: String) -> LookoutEquipment.ListLabelsRequest {
        return .init(
            equipment: self.equipment,
            faultCode: self.faultCode,
            intervalEndTime: self.intervalEndTime,
            intervalStartTime: self.intervalStartTime,
            labelGroupName: self.labelGroupName,
            maxResults: self.maxResults,
            nextToken: token
        )
    }
}

extension LookoutEquipment.ListModelVersionsRequest: AWSPaginateToken {
    public func usingPaginationToken(_ token: String) -> LookoutEquipment.ListModelVersionsRequest {
        return .init(
            createdAtEndTime: self.createdAtEndTime,
            createdAtStartTime: self.createdAtStartTime,
            maxModelVersion: self.maxModelVersion,
            maxResults: self.maxResults,
            minModelVersion: self.minModelVersion,
            modelName: self.modelName,
            nextToken: token,
            sourceType: self.sourceType,
            status: self.status
        )
    }
}

extension LookoutEquipment.ListModelsRequest: AWSPaginateToken {
    public func usingPaginationToken(_ token: String) -> LookoutEquipment.ListModelsRequest {
        return .init(
            datasetNameBeginsWith: self.datasetNameBeginsWith,
            maxResults: self.maxResults,
            modelNameBeginsWith: self.modelNameBeginsWith,
            nextToken: token,
            status: self.status
        )
    }
}

extension LookoutEquipment.ListRetrainingSchedulersRequest: AWSPaginateToken {
    public func usingPaginationToken(_ token: String) -> LookoutEquipment.ListRetrainingSchedulersRequest {
        return .init(
            maxResults: self.maxResults,
            modelNameBeginsWith: self.modelNameBeginsWith,
            nextToken: token,
            status: self.status
        )
    }
}

extension LookoutEquipment.ListSensorStatisticsRequest: AWSPaginateToken {
    public func usingPaginationToken(_ token: String) -> LookoutEquipment.ListSensorStatisticsRequest {
        return .init(
            datasetName: self.datasetName,
            ingestionJobId: self.ingestionJobId,
            maxResults: self.maxResults,
            nextToken: token
        )
    }
}
