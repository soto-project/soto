//===----------------------------------------------------------------------===//
//
// This source file is part of the Soto for AWS open source project
//
// Copyright (c) 2017-2024 the Soto project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
// See CONTRIBUTORS.txt for the list of Soto project authors
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by https://github.com/soto-project/soto-codegenerator.
// DO NOT EDIT.

@_exported import SotoCore

/// Service object for interacting with AWS SSMQuickSetup service.
///
/// Quick Setup helps you quickly configure frequently used services and features with recommended best practices. Quick Setup simplifies setting up services, including Systems Manager, by automating common or recommended tasks.
public struct SSMQuickSetup: AWSService {
    // MARK: Member variables

    /// Client used for communication with AWS
    public let client: AWSClient
    /// Service configuration
    public let config: AWSServiceConfig

    // MARK: Initialization

    /// Initialize the SSMQuickSetup client
    /// - parameters:
    ///     - client: AWSClient used to process requests
    ///     - region: Region of server you want to communicate with. This will override the partition parameter.
    ///     - partition: AWS partition where service resides, standard (.aws), china (.awscn), government (.awsusgov).
    ///     - endpoint: Custom endpoint URL to use instead of standard AWS servers
    ///     - middleware: Middleware chain used to edit requests before they are sent and responses before they are decoded 
    ///     - timeout: Timeout value for HTTP requests
    ///     - byteBufferAllocator: Allocator for ByteBuffers
    ///     - options: Service options
    public init(
        client: AWSClient,
        region: SotoCore.Region? = nil,
        partition: AWSPartition = .aws,
        endpoint: String? = nil,
        middleware: AWSMiddlewareProtocol? = nil,
        timeout: TimeAmount? = nil,
        byteBufferAllocator: ByteBufferAllocator = ByteBufferAllocator(),
        options: AWSServiceConfig.Options = []
    ) {
        self.client = client
        self.config = AWSServiceConfig(
            region: region,
            partition: region?.partition ?? partition,
            serviceName: "SSMQuickSetup",
            serviceIdentifier: "ssm-quicksetup",
            serviceProtocol: .restjson,
            apiVersion: "2018-05-10",
            endpoint: endpoint,
            errorType: SSMQuickSetupErrorType.self,
            middleware: middleware,
            timeout: timeout,
            byteBufferAllocator: byteBufferAllocator,
            options: options
        )
    }





    // MARK: API Calls

    /// Creates a Quick Setup configuration manager resource. This object is a collection of desired state configurations for multiple configuration definitions and summaries describing the deployments of those definitions.
    @Sendable
    public func createConfigurationManager(_ input: CreateConfigurationManagerInput, logger: Logger = AWSClient.loggingDisabled) async throws -> CreateConfigurationManagerOutput {
        return try await self.client.execute(
            operation: "CreateConfigurationManager", 
            path: "/configurationManager", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Deletes a configuration manager.
    @Sendable
    public func deleteConfigurationManager(_ input: DeleteConfigurationManagerInput, logger: Logger = AWSClient.loggingDisabled) async throws {
        return try await self.client.execute(
            operation: "DeleteConfigurationManager", 
            path: "/configurationManager/{ManagerArn}", 
            httpMethod: .DELETE, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Returns a configuration manager.
    @Sendable
    public func getConfigurationManager(_ input: GetConfigurationManagerInput, logger: Logger = AWSClient.loggingDisabled) async throws -> GetConfigurationManagerOutput {
        return try await self.client.execute(
            operation: "GetConfigurationManager", 
            path: "/configurationManager/{ManagerArn}", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Returns settings configured for Quick Setup in the requesting Amazon Web Services account and Amazon Web Services Region.
    @Sendable
    public func getServiceSettings(logger: Logger = AWSClient.loggingDisabled) async throws -> GetServiceSettingsOutput {
        return try await self.client.execute(
            operation: "GetServiceSettings", 
            path: "/serviceSettings", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            logger: logger
        )
    }

    /// Returns Quick Setup configuration managers.
    @Sendable
    public func listConfigurationManagers(_ input: ListConfigurationManagersInput, logger: Logger = AWSClient.loggingDisabled) async throws -> ListConfigurationManagersOutput {
        return try await self.client.execute(
            operation: "ListConfigurationManagers", 
            path: "/listConfigurationManagers", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Returns the available Quick Setup types.
    @Sendable
    public func listQuickSetupTypes(logger: Logger = AWSClient.loggingDisabled) async throws -> ListQuickSetupTypesOutput {
        return try await self.client.execute(
            operation: "ListQuickSetupTypes", 
            path: "/listQuickSetupTypes", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            logger: logger
        )
    }

    /// Returns tags assigned to the resource.
    @Sendable
    public func listTagsForResource(_ input: ListTagsForResourceRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> ListTagsForResourceResponse {
        return try await self.client.execute(
            operation: "ListTagsForResource", 
            path: "/tags/{ResourceArn}", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Assigns key-value pairs of metadata to Amazon Web Services resources.
    @Sendable
    public func tagResource(_ input: TagResourceInput, logger: Logger = AWSClient.loggingDisabled) async throws {
        return try await self.client.execute(
            operation: "TagResource", 
            path: "/tags/{ResourceArn}", 
            httpMethod: .PUT, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Removes tags from the specified resource.
    @Sendable
    public func untagResource(_ input: UntagResourceInput, logger: Logger = AWSClient.loggingDisabled) async throws {
        return try await self.client.execute(
            operation: "UntagResource", 
            path: "/tags/{ResourceArn}", 
            httpMethod: .DELETE, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Updates a Quick Setup configuration definition.
    @Sendable
    public func updateConfigurationDefinition(_ input: UpdateConfigurationDefinitionInput, logger: Logger = AWSClient.loggingDisabled) async throws {
        return try await self.client.execute(
            operation: "UpdateConfigurationDefinition", 
            path: "/configurationDefinition/{ManagerArn}/{Id}", 
            httpMethod: .PUT, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Updates a Quick Setup configuration manager.
    @Sendable
    public func updateConfigurationManager(_ input: UpdateConfigurationManagerInput, logger: Logger = AWSClient.loggingDisabled) async throws {
        return try await self.client.execute(
            operation: "UpdateConfigurationManager", 
            path: "/configurationManager/{ManagerArn}", 
            httpMethod: .PUT, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Updates settings configured for Quick Setup.
    @Sendable
    public func updateServiceSettings(_ input: UpdateServiceSettingsInput, logger: Logger = AWSClient.loggingDisabled) async throws {
        return try await self.client.execute(
            operation: "UpdateServiceSettings", 
            path: "/serviceSettings", 
            httpMethod: .PUT, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
}

extension SSMQuickSetup {
    /// Initializer required by `AWSService.with(middlewares:timeout:byteBufferAllocator:options)`. You are not able to use this initializer directly as there are not public
    /// initializers for `AWSServiceConfig.Patch`. Please use `AWSService.with(middlewares:timeout:byteBufferAllocator:options)` instead.
    public init(from: SSMQuickSetup, patch: AWSServiceConfig.Patch) {
        self.client = from.client
        self.config = from.config.with(patch: patch)
    }
}

// MARK: Paginators

@available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
extension SSMQuickSetup {
    /// Returns Quick Setup configuration managers.
    /// Return PaginatorSequence for operation.
    ///
    /// - Parameters:
    ///   - input: Input for request
    ///   - logger: Logger used flot logging
    public func listConfigurationManagersPaginator(
        _ input: ListConfigurationManagersInput,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<ListConfigurationManagersInput, ListConfigurationManagersOutput> {
        return .init(
            input: input,
            command: self.listConfigurationManagers,
            inputKey: \ListConfigurationManagersInput.startingToken,
            outputKey: \ListConfigurationManagersOutput.nextToken,
            logger: logger
        )
    }
}

extension SSMQuickSetup.ListConfigurationManagersInput: AWSPaginateToken {
    public func usingPaginationToken(_ token: String) -> SSMQuickSetup.ListConfigurationManagersInput {
        return .init(
            filters: self.filters,
            maxItems: self.maxItems,
            startingToken: token
        )
    }
}
