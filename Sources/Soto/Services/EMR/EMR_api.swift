//===----------------------------------------------------------------------===//
//
// This source file is part of the Soto for AWS open source project
//
// Copyright (c) 2017-2024 the Soto project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
// See CONTRIBUTORS.txt for the list of Soto project authors
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by https://github.com/soto-project/soto-codegenerator.
// DO NOT EDIT.

#if canImport(FoundationEssentials)
import FoundationEssentials
#else
import Foundation
#endif
@_exported import SotoCore

/// Service object for interacting with AWS EMR service.
///
/// Amazon EMR is a web service that makes it easier to process large amounts of data efficiently. Amazon EMR uses Hadoop processing combined with several Amazon Web Services services to do tasks such as web indexing, data mining, log file analysis, machine learning, scientific simulation, and data warehouse management.
public struct EMR: AWSService {
    // MARK: Member variables

    /// Client used for communication with AWS
    public let client: AWSClient
    /// Service configuration
    public let config: AWSServiceConfig

    // MARK: Initialization

    /// Initialize the EMR client
    /// - parameters:
    ///     - client: AWSClient used to process requests
    ///     - region: Region of server you want to communicate with. This will override the partition parameter.
    ///     - partition: AWS partition where service resides, standard (.aws), china (.awscn), government (.awsusgov).
    ///     - endpoint: Custom endpoint URL to use instead of standard AWS servers
    ///     - middleware: Middleware chain used to edit requests before they are sent and responses before they are decoded 
    ///     - timeout: Timeout value for HTTP requests
    ///     - byteBufferAllocator: Allocator for ByteBuffers
    ///     - options: Service options
    public init(
        client: AWSClient,
        region: SotoCore.Region? = nil,
        partition: AWSPartition = .aws,
        endpoint: String? = nil,
        middleware: AWSMiddlewareProtocol? = nil,
        timeout: TimeAmount? = nil,
        byteBufferAllocator: ByteBufferAllocator = ByteBufferAllocator(),
        options: AWSServiceConfig.Options = []
    ) {
        self.client = client
        self.config = AWSServiceConfig(
            region: region,
            partition: region?.partition ?? partition,
            amzTarget: "ElasticMapReduce",
            serviceName: "EMR",
            serviceIdentifier: "elasticmapreduce",
            serviceProtocol: .json(version: "1.1"),
            apiVersion: "2009-03-31",
            endpoint: endpoint,
            variantEndpoints: Self.variantEndpoints,
            errorType: EMRErrorType.self,
            xmlNamespace: "http://elasticmapreduce.amazonaws.com/doc/2009-03-31",
            middleware: middleware,
            timeout: timeout,
            byteBufferAllocator: byteBufferAllocator,
            options: options
        )
    }




    /// FIPS and dualstack endpoints
    static var variantEndpoints: [EndpointVariantType: AWSServiceConfig.EndpointVariant] {[
        [.dualstack]: .init(endpoints: [
            "cn-north-1": "elasticmapreduce.cn-north-1.api.amazonwebservices.com.cn",
            "cn-northwest-1": "elasticmapreduce.cn-northwest-1.api.amazonwebservices.com.cn",
            "us-east-2": "elasticmapreduce.us-east-2.api.aws",
            "us-gov-east-1": "elasticmapreduce.us-gov-east-1.api.aws",
            "us-gov-west-1": "elasticmapreduce.us-gov-west-1.api.aws"
        ]),
        [.fips]: .init(endpoints: [
            "ca-central-1": "elasticmapreduce-fips.ca-central-1.amazonaws.com",
            "ca-west-1": "elasticmapreduce-fips.ca-west-1.amazonaws.com",
            "us-east-1": "elasticmapreduce-fips.us-east-1.amazonaws.com",
            "us-east-2": "elasticmapreduce-fips.us-east-2.amazonaws.com",
            "us-gov-east-1": "elasticmapreduce.us-gov-east-1.amazonaws.com",
            "us-gov-west-1": "elasticmapreduce.us-gov-west-1.amazonaws.com",
            "us-iso-east-1": "elasticmapreduce.us-iso-east-1.c2s.ic.gov",
            "us-iso-west-1": "elasticmapreduce.us-iso-west-1.c2s.ic.gov",
            "us-isob-east-1": "elasticmapreduce.us-isob-east-1.sc2s.sgov.gov",
            "us-west-1": "elasticmapreduce-fips.us-west-1.amazonaws.com",
            "us-west-2": "elasticmapreduce-fips.us-west-2.amazonaws.com"
        ])
    ]}

    // MARK: API Calls

    /// Adds an instance fleet to a running cluster.  The instance fleet configuration is available only in Amazon EMR releases 4.8.0 and later, excluding 5.0.x.
    @Sendable
    @inlinable
    public func addInstanceFleet(_ input: AddInstanceFleetInput, logger: Logger = AWSClient.loggingDisabled) async throws -> AddInstanceFleetOutput {
        try await self.client.execute(
            operation: "AddInstanceFleet", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Adds an instance fleet to a running cluster.  The instance fleet configuration is available only in Amazon EMR releases 4.8.0 and later, excluding 5.0.x.
    ///
    /// Parameters:
    ///   - clusterId: The unique identifier of the cluster.
    ///   - instanceFleet: Specifies the configuration of the instance fleet.
    ///   - logger: Logger use during operation
    @inlinable
    public func addInstanceFleet(
        clusterId: String? = nil,
        instanceFleet: InstanceFleetConfig? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> AddInstanceFleetOutput {
        let input = AddInstanceFleetInput(
            clusterId: clusterId, 
            instanceFleet: instanceFleet
        )
        return try await self.addInstanceFleet(input, logger: logger)
    }

    /// Adds one or more instance groups to a running cluster.
    @Sendable
    @inlinable
    public func addInstanceGroups(_ input: AddInstanceGroupsInput, logger: Logger = AWSClient.loggingDisabled) async throws -> AddInstanceGroupsOutput {
        try await self.client.execute(
            operation: "AddInstanceGroups", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Adds one or more instance groups to a running cluster.
    ///
    /// Parameters:
    ///   - instanceGroups: Instance groups to add.
    ///   - jobFlowId: Job flow in which to add the instance groups.
    ///   - logger: Logger use during operation
    @inlinable
    public func addInstanceGroups(
        instanceGroups: [InstanceGroupConfig]? = nil,
        jobFlowId: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> AddInstanceGroupsOutput {
        let input = AddInstanceGroupsInput(
            instanceGroups: instanceGroups, 
            jobFlowId: jobFlowId
        )
        return try await self.addInstanceGroups(input, logger: logger)
    }

    /// AddJobFlowSteps adds new steps to a running cluster. A maximum of 256 steps are allowed in each job flow. If your cluster is long-running (such as a Hive data warehouse) or complex, you may require more than 256 steps to process your data. You can bypass the 256-step limitation in various ways, including using SSH to connect to the master node and submitting queries directly to the software running on the master node, such as Hive and Hadoop. A step specifies the location of a JAR file stored either on the master node of the cluster or in Amazon S3. Each step is performed by the main function of the main class of the JAR file. The main class can be specified either in the manifest of the JAR or by using the MainFunction parameter of the step. Amazon EMR executes each step in the order listed. For a step to be considered complete, the main function must exit with a zero exit code and all Hadoop jobs started while the step was running must have completed and run successfully. You can only add steps to a cluster that is in one of the following states: STARTING, BOOTSTRAPPING, RUNNING, or WAITING.  The string values passed into HadoopJarStep object cannot exceed a total of 10240 characters.
    @Sendable
    @inlinable
    public func addJobFlowSteps(_ input: AddJobFlowStepsInput, logger: Logger = AWSClient.loggingDisabled) async throws -> AddJobFlowStepsOutput {
        try await self.client.execute(
            operation: "AddJobFlowSteps", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// AddJobFlowSteps adds new steps to a running cluster. A maximum of 256 steps are allowed in each job flow. If your cluster is long-running (such as a Hive data warehouse) or complex, you may require more than 256 steps to process your data. You can bypass the 256-step limitation in various ways, including using SSH to connect to the master node and submitting queries directly to the software running on the master node, such as Hive and Hadoop. A step specifies the location of a JAR file stored either on the master node of the cluster or in Amazon S3. Each step is performed by the main function of the main class of the JAR file. The main class can be specified either in the manifest of the JAR or by using the MainFunction parameter of the step. Amazon EMR executes each step in the order listed. For a step to be considered complete, the main function must exit with a zero exit code and all Hadoop jobs started while the step was running must have completed and run successfully. You can only add steps to a cluster that is in one of the following states: STARTING, BOOTSTRAPPING, RUNNING, or WAITING.  The string values passed into HadoopJarStep object cannot exceed a total of 10240 characters.
    ///
    /// Parameters:
    ///   - executionRoleArn: The Amazon Resource Name (ARN) of the runtime role for a step on the cluster. The runtime role can be a cross-account IAM role. The runtime role ARN is a combination of account ID, role name, and role type using the following format: arn:partition:service:region:account:resource.  For example, arn:aws:IAM::1234567890:role/ReadOnly is a correctly formatted runtime role ARN.
    ///   - jobFlowId: A string that uniquely identifies the job flow. This identifier is returned by RunJobFlow and can also be obtained from ListClusters.
    ///   - steps:  A list of StepConfig to be executed by the job flow.
    ///   - logger: Logger use during operation
    @inlinable
    public func addJobFlowSteps(
        executionRoleArn: String? = nil,
        jobFlowId: String? = nil,
        steps: [StepConfig]? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> AddJobFlowStepsOutput {
        let input = AddJobFlowStepsInput(
            executionRoleArn: executionRoleArn, 
            jobFlowId: jobFlowId, 
            steps: steps
        )
        return try await self.addJobFlowSteps(input, logger: logger)
    }

    /// Adds tags to an Amazon EMR resource, such as a cluster or an Amazon EMR Studio. Tags make it easier to associate resources in various ways, such as grouping clusters to track your Amazon EMR resource allocation costs. For more information, see Tag Clusters.
    @Sendable
    @inlinable
    public func addTags(_ input: AddTagsInput, logger: Logger = AWSClient.loggingDisabled) async throws -> AddTagsOutput {
        try await self.client.execute(
            operation: "AddTags", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Adds tags to an Amazon EMR resource, such as a cluster or an Amazon EMR Studio. Tags make it easier to associate resources in various ways, such as grouping clusters to track your Amazon EMR resource allocation costs. For more information, see Tag Clusters.
    ///
    /// Parameters:
    ///   - resourceId: The Amazon EMR resource identifier to which tags will be added. For example, a cluster identifier or an Amazon EMR Studio ID.
    ///   - tags: A list of tags to associate with a resource. Tags are user-defined key-value pairs that consist of a required key string with a maximum of 128 characters, and an optional value string with a maximum of 256 characters.
    ///   - logger: Logger use during operation
    @inlinable
    public func addTags(
        resourceId: String? = nil,
        tags: [Tag]? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> AddTagsOutput {
        let input = AddTagsInput(
            resourceId: resourceId, 
            tags: tags
        )
        return try await self.addTags(input, logger: logger)
    }

    /// Cancels a pending step or steps in a running cluster. Available only in Amazon EMR versions 4.8.0 and later, excluding version 5.0.0. A maximum of 256 steps are allowed in each CancelSteps request. CancelSteps is idempotent but asynchronous; it does not guarantee that a step will be canceled, even if the request is successfully submitted. When you use Amazon EMR releases 5.28.0 and later, you can cancel steps that are in a PENDING or RUNNING state. In earlier versions of Amazon EMR, you can only cancel steps that are in a PENDING state.
    @Sendable
    @inlinable
    public func cancelSteps(_ input: CancelStepsInput, logger: Logger = AWSClient.loggingDisabled) async throws -> CancelStepsOutput {
        try await self.client.execute(
            operation: "CancelSteps", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Cancels a pending step or steps in a running cluster. Available only in Amazon EMR versions 4.8.0 and later, excluding version 5.0.0. A maximum of 256 steps are allowed in each CancelSteps request. CancelSteps is idempotent but asynchronous; it does not guarantee that a step will be canceled, even if the request is successfully submitted. When you use Amazon EMR releases 5.28.0 and later, you can cancel steps that are in a PENDING or RUNNING state. In earlier versions of Amazon EMR, you can only cancel steps that are in a PENDING state.
    ///
    /// Parameters:
    ///   - clusterId: The ClusterID for the specified steps that will be canceled. Use RunJobFlow and ListClusters to get ClusterIDs.
    ///   - stepCancellationOption: The option to choose to cancel RUNNING steps. By default, the value is SEND_INTERRUPT.
    ///   - stepIds: The list of StepIDs to cancel. Use ListSteps to get steps and their states for the specified cluster.
    ///   - logger: Logger use during operation
    @inlinable
    public func cancelSteps(
        clusterId: String? = nil,
        stepCancellationOption: StepCancellationOption? = nil,
        stepIds: [String]? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> CancelStepsOutput {
        let input = CancelStepsInput(
            clusterId: clusterId, 
            stepCancellationOption: stepCancellationOption, 
            stepIds: stepIds
        )
        return try await self.cancelSteps(input, logger: logger)
    }

    /// Creates a security configuration, which is stored in the service and can be specified when a cluster is created.
    @Sendable
    @inlinable
    public func createSecurityConfiguration(_ input: CreateSecurityConfigurationInput, logger: Logger = AWSClient.loggingDisabled) async throws -> CreateSecurityConfigurationOutput {
        try await self.client.execute(
            operation: "CreateSecurityConfiguration", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Creates a security configuration, which is stored in the service and can be specified when a cluster is created.
    ///
    /// Parameters:
    ///   - name: The name of the security configuration.
    ///   - securityConfiguration: The security configuration details in JSON format. For JSON parameters and examples, see Use Security Configurations to Set Up Cluster Security in the Amazon EMR Management Guide.
    ///   - logger: Logger use during operation
    @inlinable
    public func createSecurityConfiguration(
        name: String? = nil,
        securityConfiguration: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> CreateSecurityConfigurationOutput {
        let input = CreateSecurityConfigurationInput(
            name: name, 
            securityConfiguration: securityConfiguration
        )
        return try await self.createSecurityConfiguration(input, logger: logger)
    }

    /// Creates a new Amazon EMR Studio.
    @Sendable
    @inlinable
    public func createStudio(_ input: CreateStudioInput, logger: Logger = AWSClient.loggingDisabled) async throws -> CreateStudioOutput {
        try await self.client.execute(
            operation: "CreateStudio", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Creates a new Amazon EMR Studio.
    ///
    /// Parameters:
    ///   - authMode: Specifies whether the Studio authenticates users using IAM or IAM Identity Center.
    ///   - defaultS3Location: The Amazon S3 location to back up Amazon EMR Studio Workspaces and notebook files.
    ///   - description: A detailed description of the Amazon EMR Studio.
    ///   - encryptionKeyArn: The KMS key identifier (ARN) used to encrypt Amazon EMR Studio workspace and notebook files when backed up to Amazon S3.
    ///   - engineSecurityGroupId: The ID of the Amazon EMR Studio Engine security group. The Engine security group allows inbound network traffic from the Workspace security group, and it must be in the same VPC specified by VpcId.
    ///   - idcInstanceArn:  The ARN of the IAM Identity Center instance to create the Studio application.
    ///   - idcUserAssignment:  Specifies whether IAM Identity Center user assignment is REQUIRED or OPTIONAL. If the value is set to REQUIRED, users must be explicitly assigned to the Studio application to access the Studio.
    ///   - idpAuthUrl: The authentication endpoint of your identity provider (IdP). Specify this value when you use IAM authentication and want to let federated users log in to a Studio with the Studio URL and credentials from your IdP. Amazon EMR Studio redirects users to this endpoint to enter credentials.
    ///   - idpRelayStateParameterName: The name that your identity provider (IdP) uses for its RelayState parameter. For example, RelayState or TargetSource. Specify this value when you use IAM authentication and want to let federated users log in to a Studio using the Studio URL. The RelayState parameter differs by IdP.
    ///   - name: A descriptive name for the Amazon EMR Studio.
    ///   - serviceRole: The IAM role that the Amazon EMR Studio assumes. The service role provides a way for Amazon EMR Studio to interoperate with other Amazon Web Services services.
    ///   - subnetIds: A list of subnet IDs to associate with the Amazon EMR Studio. A Studio can have a maximum of 5 subnets. The subnets must belong to the VPC specified by VpcId. Studio users can create a Workspace in any of the specified subnets.
    ///   - tags: A list of tags to associate with the Amazon EMR Studio. Tags are user-defined key-value pairs that consist of a required key string with a maximum of 128 characters, and an optional value string with a maximum of 256 characters.
    ///   - trustedIdentityPropagationEnabled:  A Boolean indicating whether to enable Trusted identity propagation for the Studio. The default value is false.
    ///   - userRole: The IAM user role that users and groups assume when logged in to an Amazon EMR Studio. Only specify a UserRole when you use IAM Identity Center authentication. The permissions attached to the UserRole can be scoped down for each user or group using session policies.
    ///   - vpcId: The ID of the Amazon Virtual Private Cloud (Amazon VPC) to associate with the Studio.
    ///   - workspaceSecurityGroupId: The ID of the Amazon EMR Studio Workspace security group. The Workspace security group allows outbound network traffic to resources in the Engine security group, and it must be in the same VPC specified by VpcId.
    ///   - logger: Logger use during operation
    @inlinable
    public func createStudio(
        authMode: AuthMode? = nil,
        defaultS3Location: String? = nil,
        description: String? = nil,
        encryptionKeyArn: String? = nil,
        engineSecurityGroupId: String? = nil,
        idcInstanceArn: String? = nil,
        idcUserAssignment: IdcUserAssignment? = nil,
        idpAuthUrl: String? = nil,
        idpRelayStateParameterName: String? = nil,
        name: String? = nil,
        serviceRole: String? = nil,
        subnetIds: [String]? = nil,
        tags: [Tag]? = nil,
        trustedIdentityPropagationEnabled: Bool? = nil,
        userRole: String? = nil,
        vpcId: String? = nil,
        workspaceSecurityGroupId: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> CreateStudioOutput {
        let input = CreateStudioInput(
            authMode: authMode, 
            defaultS3Location: defaultS3Location, 
            description: description, 
            encryptionKeyArn: encryptionKeyArn, 
            engineSecurityGroupId: engineSecurityGroupId, 
            idcInstanceArn: idcInstanceArn, 
            idcUserAssignment: idcUserAssignment, 
            idpAuthUrl: idpAuthUrl, 
            idpRelayStateParameterName: idpRelayStateParameterName, 
            name: name, 
            serviceRole: serviceRole, 
            subnetIds: subnetIds, 
            tags: tags, 
            trustedIdentityPropagationEnabled: trustedIdentityPropagationEnabled, 
            userRole: userRole, 
            vpcId: vpcId, 
            workspaceSecurityGroupId: workspaceSecurityGroupId
        )
        return try await self.createStudio(input, logger: logger)
    }

    /// Maps a user or group to the Amazon EMR Studio specified by StudioId, and applies a session policy to refine Studio permissions for that user or group. Use CreateStudioSessionMapping to assign users to a Studio when you use IAM Identity Center authentication. For instructions on how to assign users to a Studio when you use IAM authentication, see Assign a user or group to your EMR Studio.
    @Sendable
    @inlinable
    public func createStudioSessionMapping(_ input: CreateStudioSessionMappingInput, logger: Logger = AWSClient.loggingDisabled) async throws {
        try await self.client.execute(
            operation: "CreateStudioSessionMapping", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Maps a user or group to the Amazon EMR Studio specified by StudioId, and applies a session policy to refine Studio permissions for that user or group. Use CreateStudioSessionMapping to assign users to a Studio when you use IAM Identity Center authentication. For instructions on how to assign users to a Studio when you use IAM authentication, see Assign a user or group to your EMR Studio.
    ///
    /// Parameters:
    ///   - identityId: The globally unique identifier (GUID) of the user or group from the IAM Identity Center Identity Store. For more information, see UserId and GroupId in the IAM Identity Center Identity Store API Reference. Either IdentityName or IdentityId must be specified, but not both.
    ///   - identityName: The name of the user or group. For more information, see UserName and DisplayName in the IAM Identity Center Identity Store API Reference. Either IdentityName or IdentityId must be specified, but not both.
    ///   - identityType: Specifies whether the identity to map to the Amazon EMR Studio is a user or a group.
    ///   - sessionPolicyArn: The Amazon Resource Name (ARN) for the session policy that will be applied to the user or group. You should specify the ARN for the session policy that you want to apply, not the ARN of your user role. For more information, see Create an Amazon EMR Studio User Role with Session Policies.
    ///   - studioId: The ID of the Amazon EMR Studio to which the user or group will be mapped.
    ///   - logger: Logger use during operation
    @inlinable
    public func createStudioSessionMapping(
        identityId: String? = nil,
        identityName: String? = nil,
        identityType: IdentityType? = nil,
        sessionPolicyArn: String? = nil,
        studioId: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws {
        let input = CreateStudioSessionMappingInput(
            identityId: identityId, 
            identityName: identityName, 
            identityType: identityType, 
            sessionPolicyArn: sessionPolicyArn, 
            studioId: studioId
        )
        return try await self.createStudioSessionMapping(input, logger: logger)
    }

    /// Deletes a security configuration.
    @Sendable
    @inlinable
    public func deleteSecurityConfiguration(_ input: DeleteSecurityConfigurationInput, logger: Logger = AWSClient.loggingDisabled) async throws -> DeleteSecurityConfigurationOutput {
        try await self.client.execute(
            operation: "DeleteSecurityConfiguration", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Deletes a security configuration.
    ///
    /// Parameters:
    ///   - name: The name of the security configuration.
    ///   - logger: Logger use during operation
    @inlinable
    public func deleteSecurityConfiguration(
        name: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> DeleteSecurityConfigurationOutput {
        let input = DeleteSecurityConfigurationInput(
            name: name
        )
        return try await self.deleteSecurityConfiguration(input, logger: logger)
    }

    /// Removes an Amazon EMR Studio from the Studio metadata store.
    @Sendable
    @inlinable
    public func deleteStudio(_ input: DeleteStudioInput, logger: Logger = AWSClient.loggingDisabled) async throws {
        try await self.client.execute(
            operation: "DeleteStudio", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Removes an Amazon EMR Studio from the Studio metadata store.
    ///
    /// Parameters:
    ///   - studioId: The ID of the Amazon EMR Studio.
    ///   - logger: Logger use during operation
    @inlinable
    public func deleteStudio(
        studioId: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws {
        let input = DeleteStudioInput(
            studioId: studioId
        )
        return try await self.deleteStudio(input, logger: logger)
    }

    /// Removes a user or group from an Amazon EMR Studio.
    @Sendable
    @inlinable
    public func deleteStudioSessionMapping(_ input: DeleteStudioSessionMappingInput, logger: Logger = AWSClient.loggingDisabled) async throws {
        try await self.client.execute(
            operation: "DeleteStudioSessionMapping", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Removes a user or group from an Amazon EMR Studio.
    ///
    /// Parameters:
    ///   - identityId: The globally unique identifier (GUID) of the user or group to remove from the Amazon EMR Studio. For more information, see UserId and GroupId in the IAM Identity Center Identity Store API Reference. Either IdentityName or IdentityId must be specified.
    ///   - identityName: The name of the user name or group to remove from the Amazon EMR Studio. For more information, see UserName and DisplayName in the IAM Identity Center Store API Reference. Either IdentityName or IdentityId must be specified.
    ///   - identityType: Specifies whether the identity to delete from the Amazon EMR Studio is a user or a group.
    ///   - studioId: The ID of the Amazon EMR Studio.
    ///   - logger: Logger use during operation
    @inlinable
    public func deleteStudioSessionMapping(
        identityId: String? = nil,
        identityName: String? = nil,
        identityType: IdentityType? = nil,
        studioId: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws {
        let input = DeleteStudioSessionMappingInput(
            identityId: identityId, 
            identityName: identityName, 
            identityType: identityType, 
            studioId: studioId
        )
        return try await self.deleteStudioSessionMapping(input, logger: logger)
    }

    /// Provides cluster-level details including status, hardware and software configuration, VPC settings, and so on.
    @Sendable
    @inlinable
    public func describeCluster(_ input: DescribeClusterInput, logger: Logger = AWSClient.loggingDisabled) async throws -> DescribeClusterOutput {
        try await self.client.execute(
            operation: "DescribeCluster", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Provides cluster-level details including status, hardware and software configuration, VPC settings, and so on.
    ///
    /// Parameters:
    ///   - clusterId: The identifier of the cluster to describe.
    ///   - logger: Logger use during operation
    @inlinable
    public func describeCluster(
        clusterId: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> DescribeClusterOutput {
        let input = DescribeClusterInput(
            clusterId: clusterId
        )
        return try await self.describeCluster(input, logger: logger)
    }

    /// This API is no longer supported and will eventually be removed. We recommend you use ListClusters, DescribeCluster, ListSteps, ListInstanceGroups and ListBootstrapActions instead. DescribeJobFlows returns a list of job flows that match all of the supplied parameters. The parameters can include a list of job flow IDs, job flow states, and restrictions on job flow creation date and time. Regardless of supplied parameters, only job flows created within the last two months are returned. If no parameters are supplied, then job flows matching either of the following criteria are returned:   Job flows created and completed in the last two weeks   Job flows created within the last two months that are in one of the following states: RUNNING, WAITING, SHUTTING_DOWN, STARTING    Amazon EMR can return a maximum of 512 job flow descriptions.
    @Sendable
    @inlinable
    public func describeJobFlows(_ input: DescribeJobFlowsInput, logger: Logger = AWSClient.loggingDisabled) async throws -> DescribeJobFlowsOutput {
        try await self.client.execute(
            operation: "DescribeJobFlows", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// This API is no longer supported and will eventually be removed. We recommend you use ListClusters, DescribeCluster, ListSteps, ListInstanceGroups and ListBootstrapActions instead. DescribeJobFlows returns a list of job flows that match all of the supplied parameters. The parameters can include a list of job flow IDs, job flow states, and restrictions on job flow creation date and time. Regardless of supplied parameters, only job flows created within the last two months are returned. If no parameters are supplied, then job flows matching either of the following criteria are returned:   Job flows created and completed in the last two weeks   Job flows created within the last two months that are in one of the following states: RUNNING, WAITING, SHUTTING_DOWN, STARTING    Amazon EMR can return a maximum of 512 job flow descriptions.
    ///
    /// Parameters:
    ///   - createdAfter: Return only job flows created after this date and time.
    ///   - createdBefore: Return only job flows created before this date and time.
    ///   - jobFlowIds: Return only job flows whose job flow ID is contained in this list.
    ///   - jobFlowStates: Return only job flows whose state is contained in this list.
    ///   - logger: Logger use during operation
    @inlinable
    public func describeJobFlows(
        createdAfter: Date? = nil,
        createdBefore: Date? = nil,
        jobFlowIds: [String]? = nil,
        jobFlowStates: [JobFlowExecutionState]? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> DescribeJobFlowsOutput {
        let input = DescribeJobFlowsInput(
            createdAfter: createdAfter, 
            createdBefore: createdBefore, 
            jobFlowIds: jobFlowIds, 
            jobFlowStates: jobFlowStates
        )
        return try await self.describeJobFlows(input, logger: logger)
    }

    /// Provides details of a notebook execution.
    @Sendable
    @inlinable
    public func describeNotebookExecution(_ input: DescribeNotebookExecutionInput, logger: Logger = AWSClient.loggingDisabled) async throws -> DescribeNotebookExecutionOutput {
        try await self.client.execute(
            operation: "DescribeNotebookExecution", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Provides details of a notebook execution.
    ///
    /// Parameters:
    ///   - notebookExecutionId: The unique identifier of the notebook execution.
    ///   - logger: Logger use during operation
    @inlinable
    public func describeNotebookExecution(
        notebookExecutionId: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> DescribeNotebookExecutionOutput {
        let input = DescribeNotebookExecutionInput(
            notebookExecutionId: notebookExecutionId
        )
        return try await self.describeNotebookExecution(input, logger: logger)
    }

    /// Provides Amazon EMR release label details, such as the releases available the Region where the API request is run, and the available applications for a specific Amazon EMR release label. Can also list Amazon EMR releases that support a specified version of Spark.
    @Sendable
    @inlinable
    public func describeReleaseLabel(_ input: DescribeReleaseLabelInput, logger: Logger = AWSClient.loggingDisabled) async throws -> DescribeReleaseLabelOutput {
        try await self.client.execute(
            operation: "DescribeReleaseLabel", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Provides Amazon EMR release label details, such as the releases available the Region where the API request is run, and the available applications for a specific Amazon EMR release label. Can also list Amazon EMR releases that support a specified version of Spark.
    ///
    /// Parameters:
    ///   - maxResults: Reserved for future use. Currently set to null.
    ///   - nextToken: The pagination token. Reserved for future use. Currently set to null.
    ///   - releaseLabel: The target release label to be described.
    ///   - logger: Logger use during operation
    @inlinable
    public func describeReleaseLabel(
        maxResults: Int? = nil,
        nextToken: String? = nil,
        releaseLabel: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> DescribeReleaseLabelOutput {
        let input = DescribeReleaseLabelInput(
            maxResults: maxResults, 
            nextToken: nextToken, 
            releaseLabel: releaseLabel
        )
        return try await self.describeReleaseLabel(input, logger: logger)
    }

    /// Provides the details of a security configuration by returning the configuration JSON.
    @Sendable
    @inlinable
    public func describeSecurityConfiguration(_ input: DescribeSecurityConfigurationInput, logger: Logger = AWSClient.loggingDisabled) async throws -> DescribeSecurityConfigurationOutput {
        try await self.client.execute(
            operation: "DescribeSecurityConfiguration", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Provides the details of a security configuration by returning the configuration JSON.
    ///
    /// Parameters:
    ///   - name: The name of the security configuration.
    ///   - logger: Logger use during operation
    @inlinable
    public func describeSecurityConfiguration(
        name: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> DescribeSecurityConfigurationOutput {
        let input = DescribeSecurityConfigurationInput(
            name: name
        )
        return try await self.describeSecurityConfiguration(input, logger: logger)
    }

    /// Provides more detail about the cluster step.
    @Sendable
    @inlinable
    public func describeStep(_ input: DescribeStepInput, logger: Logger = AWSClient.loggingDisabled) async throws -> DescribeStepOutput {
        try await self.client.execute(
            operation: "DescribeStep", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Provides more detail about the cluster step.
    ///
    /// Parameters:
    ///   - clusterId: The identifier of the cluster with steps to describe.
    ///   - stepId: The identifier of the step to describe.
    ///   - logger: Logger use during operation
    @inlinable
    public func describeStep(
        clusterId: String? = nil,
        stepId: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> DescribeStepOutput {
        let input = DescribeStepInput(
            clusterId: clusterId, 
            stepId: stepId
        )
        return try await self.describeStep(input, logger: logger)
    }

    /// Returns details for the specified Amazon EMR Studio including ID, Name, VPC, Studio access URL, and so on.
    @Sendable
    @inlinable
    public func describeStudio(_ input: DescribeStudioInput, logger: Logger = AWSClient.loggingDisabled) async throws -> DescribeStudioOutput {
        try await self.client.execute(
            operation: "DescribeStudio", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Returns details for the specified Amazon EMR Studio including ID, Name, VPC, Studio access URL, and so on.
    ///
    /// Parameters:
    ///   - studioId: The Amazon EMR Studio ID.
    ///   - logger: Logger use during operation
    @inlinable
    public func describeStudio(
        studioId: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> DescribeStudioOutput {
        let input = DescribeStudioInput(
            studioId: studioId
        )
        return try await self.describeStudio(input, logger: logger)
    }

    /// Returns the auto-termination policy for an Amazon EMR cluster.
    @Sendable
    @inlinable
    public func getAutoTerminationPolicy(_ input: GetAutoTerminationPolicyInput, logger: Logger = AWSClient.loggingDisabled) async throws -> GetAutoTerminationPolicyOutput {
        try await self.client.execute(
            operation: "GetAutoTerminationPolicy", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Returns the auto-termination policy for an Amazon EMR cluster.
    ///
    /// Parameters:
    ///   - clusterId: Specifies the ID of the Amazon EMR cluster for which the auto-termination policy will be fetched.
    ///   - logger: Logger use during operation
    @inlinable
    public func getAutoTerminationPolicy(
        clusterId: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> GetAutoTerminationPolicyOutput {
        let input = GetAutoTerminationPolicyInput(
            clusterId: clusterId
        )
        return try await self.getAutoTerminationPolicy(input, logger: logger)
    }

    /// Returns the Amazon EMR block public access configuration for your Amazon Web Services account in the current Region. For more information see Configure Block Public Access for Amazon EMR in the Amazon EMR Management Guide.
    @Sendable
    @inlinable
    public func getBlockPublicAccessConfiguration(_ input: GetBlockPublicAccessConfigurationInput, logger: Logger = AWSClient.loggingDisabled) async throws -> GetBlockPublicAccessConfigurationOutput {
        try await self.client.execute(
            operation: "GetBlockPublicAccessConfiguration", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Returns the Amazon EMR block public access configuration for your Amazon Web Services account in the current Region. For more information see Configure Block Public Access for Amazon EMR in the Amazon EMR Management Guide.
    ///
    /// Parameters:
    ///   - logger: Logger use during operation
    @inlinable
    public func getBlockPublicAccessConfiguration(
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> GetBlockPublicAccessConfigurationOutput {
        let input = GetBlockPublicAccessConfigurationInput(
        )
        return try await self.getBlockPublicAccessConfiguration(input, logger: logger)
    }

    /// Provides temporary, HTTP basic credentials that are associated with a given runtime IAM role and used by a cluster with fine-grained access control activated. You can use these credentials to connect to cluster endpoints that support username and password authentication.
    @Sendable
    @inlinable
    public func getClusterSessionCredentials(_ input: GetClusterSessionCredentialsInput, logger: Logger = AWSClient.loggingDisabled) async throws -> GetClusterSessionCredentialsOutput {
        try await self.client.execute(
            operation: "GetClusterSessionCredentials", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Provides temporary, HTTP basic credentials that are associated with a given runtime IAM role and used by a cluster with fine-grained access control activated. You can use these credentials to connect to cluster endpoints that support username and password authentication.
    ///
    /// Parameters:
    ///   - clusterId: The unique identifier of the cluster.
    ///   - executionRoleArn: The Amazon Resource Name (ARN) of the runtime role for interactive workload submission on the cluster. The runtime role can be a cross-account IAM role. The runtime role ARN is a combination of account ID, role name, and role type using the following format: arn:partition:service:region:account:resource.
    ///   - logger: Logger use during operation
    @inlinable
    public func getClusterSessionCredentials(
        clusterId: String? = nil,
        executionRoleArn: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> GetClusterSessionCredentialsOutput {
        let input = GetClusterSessionCredentialsInput(
            clusterId: clusterId, 
            executionRoleArn: executionRoleArn
        )
        return try await self.getClusterSessionCredentials(input, logger: logger)
    }

    /// Fetches the attached managed scaling policy for an Amazon EMR cluster.
    @Sendable
    @inlinable
    public func getManagedScalingPolicy(_ input: GetManagedScalingPolicyInput, logger: Logger = AWSClient.loggingDisabled) async throws -> GetManagedScalingPolicyOutput {
        try await self.client.execute(
            operation: "GetManagedScalingPolicy", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Fetches the attached managed scaling policy for an Amazon EMR cluster.
    ///
    /// Parameters:
    ///   - clusterId: Specifies the ID of the cluster for which the managed scaling policy will be fetched.
    ///   - logger: Logger use during operation
    @inlinable
    public func getManagedScalingPolicy(
        clusterId: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> GetManagedScalingPolicyOutput {
        let input = GetManagedScalingPolicyInput(
            clusterId: clusterId
        )
        return try await self.getManagedScalingPolicy(input, logger: logger)
    }

    /// Fetches mapping details for the specified Amazon EMR Studio and identity (user or group).
    @Sendable
    @inlinable
    public func getStudioSessionMapping(_ input: GetStudioSessionMappingInput, logger: Logger = AWSClient.loggingDisabled) async throws -> GetStudioSessionMappingOutput {
        try await self.client.execute(
            operation: "GetStudioSessionMapping", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Fetches mapping details for the specified Amazon EMR Studio and identity (user or group).
    ///
    /// Parameters:
    ///   - identityId: The globally unique identifier (GUID) of the user or group. For more information, see UserId and GroupId in the IAM Identity Center Identity Store API Reference. Either IdentityName or IdentityId must be specified.
    ///   - identityName: The name of the user or group to fetch. For more information, see UserName and DisplayName in the IAM Identity Center Identity Store API Reference. Either IdentityName or IdentityId must be specified.
    ///   - identityType: Specifies whether the identity to fetch is a user or a group.
    ///   - studioId: The ID of the Amazon EMR Studio.
    ///   - logger: Logger use during operation
    @inlinable
    public func getStudioSessionMapping(
        identityId: String? = nil,
        identityName: String? = nil,
        identityType: IdentityType? = nil,
        studioId: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> GetStudioSessionMappingOutput {
        let input = GetStudioSessionMappingInput(
            identityId: identityId, 
            identityName: identityName, 
            identityType: identityType, 
            studioId: studioId
        )
        return try await self.getStudioSessionMapping(input, logger: logger)
    }

    /// Provides information about the bootstrap actions associated with a cluster.
    @Sendable
    @inlinable
    public func listBootstrapActions(_ input: ListBootstrapActionsInput, logger: Logger = AWSClient.loggingDisabled) async throws -> ListBootstrapActionsOutput {
        try await self.client.execute(
            operation: "ListBootstrapActions", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Provides information about the bootstrap actions associated with a cluster.
    ///
    /// Parameters:
    ///   - clusterId: The cluster identifier for the bootstrap actions to list.
    ///   - marker: The pagination token that indicates the next set of results to retrieve.
    ///   - logger: Logger use during operation
    @inlinable
    public func listBootstrapActions(
        clusterId: String? = nil,
        marker: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> ListBootstrapActionsOutput {
        let input = ListBootstrapActionsInput(
            clusterId: clusterId, 
            marker: marker
        )
        return try await self.listBootstrapActions(input, logger: logger)
    }

    /// Provides the status of all clusters visible to this Amazon Web Services account. Allows you to filter the list of clusters based on certain criteria; for example, filtering by cluster creation date and time or by status. This call returns a maximum of 50 clusters in unsorted order per call, but returns a marker to track the paging of the cluster list across multiple ListClusters calls.
    @Sendable
    @inlinable
    public func listClusters(_ input: ListClustersInput, logger: Logger = AWSClient.loggingDisabled) async throws -> ListClustersOutput {
        try await self.client.execute(
            operation: "ListClusters", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Provides the status of all clusters visible to this Amazon Web Services account. Allows you to filter the list of clusters based on certain criteria; for example, filtering by cluster creation date and time or by status. This call returns a maximum of 50 clusters in unsorted order per call, but returns a marker to track the paging of the cluster list across multiple ListClusters calls.
    ///
    /// Parameters:
    ///   - clusterStates: The cluster state filters to apply when listing clusters. Clusters that change state while this action runs may be not be returned as expected in the list of clusters.
    ///   - createdAfter: The creation date and time beginning value filter for listing clusters.
    ///   - createdBefore: The creation date and time end value filter for listing clusters.
    ///   - marker: The pagination token that indicates the next set of results to retrieve.
    ///   - logger: Logger use during operation
    @inlinable
    public func listClusters(
        clusterStates: [ClusterState]? = nil,
        createdAfter: Date? = nil,
        createdBefore: Date? = nil,
        marker: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> ListClustersOutput {
        let input = ListClustersInput(
            clusterStates: clusterStates, 
            createdAfter: createdAfter, 
            createdBefore: createdBefore, 
            marker: marker
        )
        return try await self.listClusters(input, logger: logger)
    }

    /// Lists all available details about the instance fleets in a cluster.  The instance fleet configuration is available only in Amazon EMR releases 4.8.0 and later, excluding 5.0.x versions.
    @Sendable
    @inlinable
    public func listInstanceFleets(_ input: ListInstanceFleetsInput, logger: Logger = AWSClient.loggingDisabled) async throws -> ListInstanceFleetsOutput {
        try await self.client.execute(
            operation: "ListInstanceFleets", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Lists all available details about the instance fleets in a cluster.  The instance fleet configuration is available only in Amazon EMR releases 4.8.0 and later, excluding 5.0.x versions.
    ///
    /// Parameters:
    ///   - clusterId: The unique identifier of the cluster.
    ///   - marker: The pagination token that indicates the next set of results to retrieve.
    ///   - logger: Logger use during operation
    @inlinable
    public func listInstanceFleets(
        clusterId: String? = nil,
        marker: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> ListInstanceFleetsOutput {
        let input = ListInstanceFleetsInput(
            clusterId: clusterId, 
            marker: marker
        )
        return try await self.listInstanceFleets(input, logger: logger)
    }

    /// Provides all available details about the instance groups in a cluster.
    @Sendable
    @inlinable
    public func listInstanceGroups(_ input: ListInstanceGroupsInput, logger: Logger = AWSClient.loggingDisabled) async throws -> ListInstanceGroupsOutput {
        try await self.client.execute(
            operation: "ListInstanceGroups", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Provides all available details about the instance groups in a cluster.
    ///
    /// Parameters:
    ///   - clusterId: The identifier of the cluster for which to list the instance groups.
    ///   - marker: The pagination token that indicates the next set of results to retrieve.
    ///   - logger: Logger use during operation
    @inlinable
    public func listInstanceGroups(
        clusterId: String? = nil,
        marker: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> ListInstanceGroupsOutput {
        let input = ListInstanceGroupsInput(
            clusterId: clusterId, 
            marker: marker
        )
        return try await self.listInstanceGroups(input, logger: logger)
    }

    /// Provides information for all active Amazon EC2 instances and Amazon EC2 instances terminated in the last 30 days, up to a maximum of 2,000. Amazon EC2 instances in any of the following states are considered active: AWAITING_FULFILLMENT, PROVISIONING, BOOTSTRAPPING, RUNNING.
    @Sendable
    @inlinable
    public func listInstances(_ input: ListInstancesInput, logger: Logger = AWSClient.loggingDisabled) async throws -> ListInstancesOutput {
        try await self.client.execute(
            operation: "ListInstances", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Provides information for all active Amazon EC2 instances and Amazon EC2 instances terminated in the last 30 days, up to a maximum of 2,000. Amazon EC2 instances in any of the following states are considered active: AWAITING_FULFILLMENT, PROVISIONING, BOOTSTRAPPING, RUNNING.
    ///
    /// Parameters:
    ///   - clusterId: The identifier of the cluster for which to list the instances.
    ///   - instanceFleetId: The unique identifier of the instance fleet.
    ///   - instanceFleetType: The node type of the instance fleet. For example MASTER, CORE, or TASK.
    ///   - instanceGroupId: The identifier of the instance group for which to list the instances.
    ///   - instanceGroupTypes: The type of instance group for which to list the instances.
    ///   - instanceStates: A list of instance states that will filter the instances returned with this request.
    ///   - marker: The pagination token that indicates the next set of results to retrieve.
    ///   - logger: Logger use during operation
    @inlinable
    public func listInstances(
        clusterId: String? = nil,
        instanceFleetId: String? = nil,
        instanceFleetType: InstanceFleetType? = nil,
        instanceGroupId: String? = nil,
        instanceGroupTypes: [InstanceGroupType]? = nil,
        instanceStates: [InstanceState]? = nil,
        marker: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> ListInstancesOutput {
        let input = ListInstancesInput(
            clusterId: clusterId, 
            instanceFleetId: instanceFleetId, 
            instanceFleetType: instanceFleetType, 
            instanceGroupId: instanceGroupId, 
            instanceGroupTypes: instanceGroupTypes, 
            instanceStates: instanceStates, 
            marker: marker
        )
        return try await self.listInstances(input, logger: logger)
    }

    /// Provides summaries of all notebook executions. You can filter the list based on multiple criteria such as status, time range, and editor id. Returns a maximum of 50 notebook executions and a marker to track the paging of a longer notebook execution list across multiple ListNotebookExecutions calls.
    @Sendable
    @inlinable
    public func listNotebookExecutions(_ input: ListNotebookExecutionsInput, logger: Logger = AWSClient.loggingDisabled) async throws -> ListNotebookExecutionsOutput {
        try await self.client.execute(
            operation: "ListNotebookExecutions", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Provides summaries of all notebook executions. You can filter the list based on multiple criteria such as status, time range, and editor id. Returns a maximum of 50 notebook executions and a marker to track the paging of a longer notebook execution list across multiple ListNotebookExecutions calls.
    ///
    /// Parameters:
    ///   - editorId: The unique ID of the editor associated with the notebook execution.
    ///   - executionEngineId: The unique ID of the execution engine.
    ///   - from: The beginning of time range filter for listing notebook executions. The default is the timestamp of 30 days ago.
    ///   - marker: The pagination token, returned by a previous ListNotebookExecutions call, that indicates the start of the list for this ListNotebookExecutions call.
    ///   - status: The status filter for listing notebook executions.    START_PENDING indicates that the cluster has received the execution request but execution has not begun.    STARTING indicates that the execution is starting on the cluster.    RUNNING indicates that the execution is being processed by the cluster.    FINISHING indicates that execution processing is in the final stages.    FINISHED indicates that the execution has completed without error.    FAILING indicates that the execution is failing and will not finish successfully.    FAILED indicates that the execution failed.    STOP_PENDING indicates that the cluster has received a StopNotebookExecution request and the stop is pending.    STOPPING indicates that the cluster is in the process of stopping the execution as a result of a StopNotebookExecution request.    STOPPED indicates that the execution stopped because of a StopNotebookExecution request.
    ///   - to: The end of time range filter for listing notebook executions. The default is the current timestamp.
    ///   - logger: Logger use during operation
    @inlinable
    public func listNotebookExecutions(
        editorId: String? = nil,
        executionEngineId: String? = nil,
        from: Date? = nil,
        marker: String? = nil,
        status: NotebookExecutionStatus? = nil,
        to: Date? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> ListNotebookExecutionsOutput {
        let input = ListNotebookExecutionsInput(
            editorId: editorId, 
            executionEngineId: executionEngineId, 
            from: from, 
            marker: marker, 
            status: status, 
            to: to
        )
        return try await self.listNotebookExecutions(input, logger: logger)
    }

    /// Retrieves release labels of Amazon EMR services in the Region where the API is called.
    @Sendable
    @inlinable
    public func listReleaseLabels(_ input: ListReleaseLabelsInput, logger: Logger = AWSClient.loggingDisabled) async throws -> ListReleaseLabelsOutput {
        try await self.client.execute(
            operation: "ListReleaseLabels", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Retrieves release labels of Amazon EMR services in the Region where the API is called.
    ///
    /// Parameters:
    ///   - filters: Filters the results of the request. Prefix specifies the prefix of release labels to return. Application specifies the application (with/without version) of release labels to return.
    ///   - maxResults: Defines the maximum number of release labels to return in a single response. The default is 100.
    ///   - nextToken: Specifies the next page of results. If NextToken is not specified, which is usually the case for the first request of ListReleaseLabels, the first page of results are determined by other filtering parameters or by the latest version. The ListReleaseLabels request fails if the identity (Amazon Web Services account ID) and all filtering parameters are different from the original request, or if the NextToken is expired or tampered with.
    ///   - logger: Logger use during operation
    @inlinable
    public func listReleaseLabels(
        filters: ReleaseLabelFilter? = nil,
        maxResults: Int? = nil,
        nextToken: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> ListReleaseLabelsOutput {
        let input = ListReleaseLabelsInput(
            filters: filters, 
            maxResults: maxResults, 
            nextToken: nextToken
        )
        return try await self.listReleaseLabels(input, logger: logger)
    }

    /// Lists all the security configurations visible to this account, providing their creation dates and times, and their names. This call returns a maximum of 50 clusters per call, but returns a marker to track the paging of the cluster list across multiple ListSecurityConfigurations calls.
    @Sendable
    @inlinable
    public func listSecurityConfigurations(_ input: ListSecurityConfigurationsInput, logger: Logger = AWSClient.loggingDisabled) async throws -> ListSecurityConfigurationsOutput {
        try await self.client.execute(
            operation: "ListSecurityConfigurations", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Lists all the security configurations visible to this account, providing their creation dates and times, and their names. This call returns a maximum of 50 clusters per call, but returns a marker to track the paging of the cluster list across multiple ListSecurityConfigurations calls.
    ///
    /// Parameters:
    ///   - marker: The pagination token that indicates the set of results to retrieve.
    ///   - logger: Logger use during operation
    @inlinable
    public func listSecurityConfigurations(
        marker: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> ListSecurityConfigurationsOutput {
        let input = ListSecurityConfigurationsInput(
            marker: marker
        )
        return try await self.listSecurityConfigurations(input, logger: logger)
    }

    /// Provides a list of steps for the cluster in reverse order unless you specify stepIds with the request or filter by StepStates. You can specify a maximum of 10 stepIDs. The CLI automatically paginates results to return a list greater than 50 steps. To return more than 50 steps using the CLI, specify a Marker, which is a pagination token that indicates the next set of steps to retrieve.
    @Sendable
    @inlinable
    public func listSteps(_ input: ListStepsInput, logger: Logger = AWSClient.loggingDisabled) async throws -> ListStepsOutput {
        try await self.client.execute(
            operation: "ListSteps", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Provides a list of steps for the cluster in reverse order unless you specify stepIds with the request or filter by StepStates. You can specify a maximum of 10 stepIDs. The CLI automatically paginates results to return a list greater than 50 steps. To return more than 50 steps using the CLI, specify a Marker, which is a pagination token that indicates the next set of steps to retrieve.
    ///
    /// Parameters:
    ///   - clusterId: The identifier of the cluster for which to list the steps.
    ///   - marker: The maximum number of steps that a single ListSteps action returns is 50. To return a longer list of steps, use multiple ListSteps actions along with the Marker parameter, which is a pagination token that indicates the next set of results to retrieve.
    ///   - stepIds: The filter to limit the step list based on the identifier of the steps. You can specify a maximum of ten Step IDs. The character constraint applies to the overall length of the array.
    ///   - stepStates: The filter to limit the step list based on certain states.
    ///   - logger: Logger use during operation
    @inlinable
    public func listSteps(
        clusterId: String? = nil,
        marker: String? = nil,
        stepIds: [String]? = nil,
        stepStates: [StepState]? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> ListStepsOutput {
        let input = ListStepsInput(
            clusterId: clusterId, 
            marker: marker, 
            stepIds: stepIds, 
            stepStates: stepStates
        )
        return try await self.listSteps(input, logger: logger)
    }

    /// Returns a list of all user or group session mappings for the Amazon EMR Studio specified by StudioId.
    @Sendable
    @inlinable
    public func listStudioSessionMappings(_ input: ListStudioSessionMappingsInput, logger: Logger = AWSClient.loggingDisabled) async throws -> ListStudioSessionMappingsOutput {
        try await self.client.execute(
            operation: "ListStudioSessionMappings", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Returns a list of all user or group session mappings for the Amazon EMR Studio specified by StudioId.
    ///
    /// Parameters:
    ///   - identityType: Specifies whether to return session mappings for users or groups. If not specified, the results include session mapping details for both users and groups.
    ///   - marker: The pagination token that indicates the set of results to retrieve.
    ///   - studioId: The ID of the Amazon EMR Studio.
    ///   - logger: Logger use during operation
    @inlinable
    public func listStudioSessionMappings(
        identityType: IdentityType? = nil,
        marker: String? = nil,
        studioId: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> ListStudioSessionMappingsOutput {
        let input = ListStudioSessionMappingsInput(
            identityType: identityType, 
            marker: marker, 
            studioId: studioId
        )
        return try await self.listStudioSessionMappings(input, logger: logger)
    }

    /// Returns a list of all Amazon EMR Studios associated with the Amazon Web Services account. The list includes details such as ID, Studio Access URL, and creation time for each Studio.
    @Sendable
    @inlinable
    public func listStudios(_ input: ListStudiosInput, logger: Logger = AWSClient.loggingDisabled) async throws -> ListStudiosOutput {
        try await self.client.execute(
            operation: "ListStudios", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Returns a list of all Amazon EMR Studios associated with the Amazon Web Services account. The list includes details such as ID, Studio Access URL, and creation time for each Studio.
    ///
    /// Parameters:
    ///   - marker: The pagination token that indicates the set of results to retrieve.
    ///   - logger: Logger use during operation
    @inlinable
    public func listStudios(
        marker: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> ListStudiosOutput {
        let input = ListStudiosInput(
            marker: marker
        )
        return try await self.listStudios(input, logger: logger)
    }

    /// A list of the instance types that Amazon EMR supports. You can filter the list by Amazon Web Services Region and Amazon EMR release.
    @Sendable
    @inlinable
    public func listSupportedInstanceTypes(_ input: ListSupportedInstanceTypesInput, logger: Logger = AWSClient.loggingDisabled) async throws -> ListSupportedInstanceTypesOutput {
        try await self.client.execute(
            operation: "ListSupportedInstanceTypes", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// A list of the instance types that Amazon EMR supports. You can filter the list by Amazon Web Services Region and Amazon EMR release.
    ///
    /// Parameters:
    ///   - marker: The pagination token that marks the next set of results to retrieve.
    ///   - releaseLabel: The Amazon EMR release label determines the versions of open-source application packages that Amazon EMR has installed on the cluster. Release labels are in the format emr-x.x.x, where x.x.x is an Amazon EMR release number such as emr-6.10.0. For more information about Amazon EMR releases and their included application versions and features, see the  Amazon EMR Release Guide .
    ///   - logger: Logger use during operation
    @inlinable
    public func listSupportedInstanceTypes(
        marker: String? = nil,
        releaseLabel: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> ListSupportedInstanceTypesOutput {
        let input = ListSupportedInstanceTypesInput(
            marker: marker, 
            releaseLabel: releaseLabel
        )
        return try await self.listSupportedInstanceTypes(input, logger: logger)
    }

    /// Modifies the number of steps that can be executed concurrently for the cluster specified using ClusterID.
    @Sendable
    @inlinable
    public func modifyCluster(_ input: ModifyClusterInput, logger: Logger = AWSClient.loggingDisabled) async throws -> ModifyClusterOutput {
        try await self.client.execute(
            operation: "ModifyCluster", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Modifies the number of steps that can be executed concurrently for the cluster specified using ClusterID.
    ///
    /// Parameters:
    ///   - clusterId: The unique identifier of the cluster.
    ///   - stepConcurrencyLevel: The number of steps that can be executed concurrently. You can specify a minimum of 1 step and a maximum of 256 steps. We recommend that you do not change this parameter while steps are running or the ActionOnFailure setting may not behave as expected. For more information see Step$ActionOnFailure.
    ///   - logger: Logger use during operation
    @inlinable
    public func modifyCluster(
        clusterId: String? = nil,
        stepConcurrencyLevel: Int? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> ModifyClusterOutput {
        let input = ModifyClusterInput(
            clusterId: clusterId, 
            stepConcurrencyLevel: stepConcurrencyLevel
        )
        return try await self.modifyCluster(input, logger: logger)
    }

    /// Modifies the target On-Demand and target Spot capacities for the instance fleet with the specified InstanceFleetID within the cluster specified using ClusterID. The call either succeeds or fails atomically.  The instance fleet configuration is available only in Amazon EMR releases 4.8.0 and later, excluding 5.0.x versions.
    @Sendable
    @inlinable
    public func modifyInstanceFleet(_ input: ModifyInstanceFleetInput, logger: Logger = AWSClient.loggingDisabled) async throws {
        try await self.client.execute(
            operation: "ModifyInstanceFleet", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Modifies the target On-Demand and target Spot capacities for the instance fleet with the specified InstanceFleetID within the cluster specified using ClusterID. The call either succeeds or fails atomically.  The instance fleet configuration is available only in Amazon EMR releases 4.8.0 and later, excluding 5.0.x versions.
    ///
    /// Parameters:
    ///   - clusterId: The unique identifier of the cluster.
    ///   - instanceFleet: The configuration parameters of the instance fleet.
    ///   - logger: Logger use during operation
    @inlinable
    public func modifyInstanceFleet(
        clusterId: String? = nil,
        instanceFleet: InstanceFleetModifyConfig? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws {
        let input = ModifyInstanceFleetInput(
            clusterId: clusterId, 
            instanceFleet: instanceFleet
        )
        return try await self.modifyInstanceFleet(input, logger: logger)
    }

    /// ModifyInstanceGroups modifies the number of nodes and configuration settings of an instance group. The input parameters include the new target instance count for the group and the instance group ID. The call will either succeed or fail atomically.
    @Sendable
    @inlinable
    public func modifyInstanceGroups(_ input: ModifyInstanceGroupsInput, logger: Logger = AWSClient.loggingDisabled) async throws {
        try await self.client.execute(
            operation: "ModifyInstanceGroups", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// ModifyInstanceGroups modifies the number of nodes and configuration settings of an instance group. The input parameters include the new target instance count for the group and the instance group ID. The call will either succeed or fail atomically.
    ///
    /// Parameters:
    ///   - clusterId: The ID of the cluster to which the instance group belongs.
    ///   - instanceGroups: Instance groups to change.
    ///   - logger: Logger use during operation
    @inlinable
    public func modifyInstanceGroups(
        clusterId: String? = nil,
        instanceGroups: [InstanceGroupModifyConfig]? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws {
        let input = ModifyInstanceGroupsInput(
            clusterId: clusterId, 
            instanceGroups: instanceGroups
        )
        return try await self.modifyInstanceGroups(input, logger: logger)
    }

    /// Creates or updates an automatic scaling policy for a core instance group or task instance group in an Amazon EMR cluster. The automatic scaling policy defines how an instance group dynamically adds and terminates Amazon EC2 instances in response to the value of a CloudWatch metric.
    @Sendable
    @inlinable
    public func putAutoScalingPolicy(_ input: PutAutoScalingPolicyInput, logger: Logger = AWSClient.loggingDisabled) async throws -> PutAutoScalingPolicyOutput {
        try await self.client.execute(
            operation: "PutAutoScalingPolicy", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Creates or updates an automatic scaling policy for a core instance group or task instance group in an Amazon EMR cluster. The automatic scaling policy defines how an instance group dynamically adds and terminates Amazon EC2 instances in response to the value of a CloudWatch metric.
    ///
    /// Parameters:
    ///   - autoScalingPolicy: Specifies the definition of the automatic scaling policy.
    ///   - clusterId: Specifies the ID of a cluster. The instance group to which the automatic scaling policy is applied is within this cluster.
    ///   - instanceGroupId: Specifies the ID of the instance group to which the automatic scaling policy is applied.
    ///   - logger: Logger use during operation
    @inlinable
    public func putAutoScalingPolicy(
        autoScalingPolicy: AutoScalingPolicy? = nil,
        clusterId: String? = nil,
        instanceGroupId: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> PutAutoScalingPolicyOutput {
        let input = PutAutoScalingPolicyInput(
            autoScalingPolicy: autoScalingPolicy, 
            clusterId: clusterId, 
            instanceGroupId: instanceGroupId
        )
        return try await self.putAutoScalingPolicy(input, logger: logger)
    }

    ///  Auto-termination is supported in Amazon EMR releases 5.30.0 and 6.1.0 and later. For more information, see Using an auto-termination policy.  Creates or updates an auto-termination policy for an Amazon EMR cluster. An auto-termination policy defines the amount of idle time in seconds after which a cluster automatically terminates. For alternative cluster termination options, see Control cluster termination.
    @Sendable
    @inlinable
    public func putAutoTerminationPolicy(_ input: PutAutoTerminationPolicyInput, logger: Logger = AWSClient.loggingDisabled) async throws -> PutAutoTerminationPolicyOutput {
        try await self.client.execute(
            operation: "PutAutoTerminationPolicy", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    ///  Auto-termination is supported in Amazon EMR releases 5.30.0 and 6.1.0 and later. For more information, see Using an auto-termination policy.  Creates or updates an auto-termination policy for an Amazon EMR cluster. An auto-termination policy defines the amount of idle time in seconds after which a cluster automatically terminates. For alternative cluster termination options, see Control cluster termination.
    ///
    /// Parameters:
    ///   - autoTerminationPolicy: Specifies the auto-termination policy to attach to the cluster.
    ///   - clusterId: Specifies the ID of the Amazon EMR cluster to which the auto-termination policy will be attached.
    ///   - logger: Logger use during operation
    @inlinable
    public func putAutoTerminationPolicy(
        autoTerminationPolicy: AutoTerminationPolicy? = nil,
        clusterId: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> PutAutoTerminationPolicyOutput {
        let input = PutAutoTerminationPolicyInput(
            autoTerminationPolicy: autoTerminationPolicy, 
            clusterId: clusterId
        )
        return try await self.putAutoTerminationPolicy(input, logger: logger)
    }

    /// Creates or updates an Amazon EMR block public access configuration for your Amazon Web Services account in the current Region. For more information see Configure Block Public Access for Amazon EMR in the Amazon EMR Management Guide.
    @Sendable
    @inlinable
    public func putBlockPublicAccessConfiguration(_ input: PutBlockPublicAccessConfigurationInput, logger: Logger = AWSClient.loggingDisabled) async throws -> PutBlockPublicAccessConfigurationOutput {
        try await self.client.execute(
            operation: "PutBlockPublicAccessConfiguration", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Creates or updates an Amazon EMR block public access configuration for your Amazon Web Services account in the current Region. For more information see Configure Block Public Access for Amazon EMR in the Amazon EMR Management Guide.
    ///
    /// Parameters:
    ///   - blockPublicAccessConfiguration: A configuration for Amazon EMR block public access. The configuration applies to all clusters created in your account for the current Region. The configuration specifies whether block public access is enabled. If block public access is enabled, security groups associated with the cluster cannot have rules that allow inbound traffic from 0.0.0.0/0 or ::/0 on a port, unless the port is specified as an exception using PermittedPublicSecurityGroupRuleRanges in the BlockPublicAccessConfiguration. By default, Port 22 (SSH) is an exception, and public access is allowed on this port. You can change this by updating BlockPublicSecurityGroupRules to remove the exception.  For accounts that created clusters in a Region before November 25, 2019, block public access is disabled by default in that Region. To use this feature, you must manually enable and configure it. For accounts that did not create an Amazon EMR cluster in a Region before this date, block public access is enabled by default in that Region.
    ///   - logger: Logger use during operation
    @inlinable
    public func putBlockPublicAccessConfiguration(
        blockPublicAccessConfiguration: BlockPublicAccessConfiguration? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> PutBlockPublicAccessConfigurationOutput {
        let input = PutBlockPublicAccessConfigurationInput(
            blockPublicAccessConfiguration: blockPublicAccessConfiguration
        )
        return try await self.putBlockPublicAccessConfiguration(input, logger: logger)
    }

    /// Creates or updates a managed scaling policy for an Amazon EMR cluster. The managed scaling policy defines the limits for resources, such as Amazon EC2 instances that can be added or terminated from a cluster. The policy only applies to the core and task nodes. The master node cannot be scaled after initial configuration.
    @Sendable
    @inlinable
    public func putManagedScalingPolicy(_ input: PutManagedScalingPolicyInput, logger: Logger = AWSClient.loggingDisabled) async throws -> PutManagedScalingPolicyOutput {
        try await self.client.execute(
            operation: "PutManagedScalingPolicy", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Creates or updates a managed scaling policy for an Amazon EMR cluster. The managed scaling policy defines the limits for resources, such as Amazon EC2 instances that can be added or terminated from a cluster. The policy only applies to the core and task nodes. The master node cannot be scaled after initial configuration.
    ///
    /// Parameters:
    ///   - clusterId: Specifies the ID of an Amazon EMR cluster where the managed scaling policy is attached.
    ///   - managedScalingPolicy: Specifies the constraints for the managed scaling policy.
    ///   - logger: Logger use during operation
    @inlinable
    public func putManagedScalingPolicy(
        clusterId: String? = nil,
        managedScalingPolicy: ManagedScalingPolicy? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> PutManagedScalingPolicyOutput {
        let input = PutManagedScalingPolicyInput(
            clusterId: clusterId, 
            managedScalingPolicy: managedScalingPolicy
        )
        return try await self.putManagedScalingPolicy(input, logger: logger)
    }

    /// Removes an automatic scaling policy from a specified instance group within an Amazon EMR cluster.
    @Sendable
    @inlinable
    public func removeAutoScalingPolicy(_ input: RemoveAutoScalingPolicyInput, logger: Logger = AWSClient.loggingDisabled) async throws -> RemoveAutoScalingPolicyOutput {
        try await self.client.execute(
            operation: "RemoveAutoScalingPolicy", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Removes an automatic scaling policy from a specified instance group within an Amazon EMR cluster.
    ///
    /// Parameters:
    ///   - clusterId: Specifies the ID of a cluster. The instance group to which the automatic scaling policy is applied is within this cluster.
    ///   - instanceGroupId: Specifies the ID of the instance group to which the scaling policy is applied.
    ///   - logger: Logger use during operation
    @inlinable
    public func removeAutoScalingPolicy(
        clusterId: String? = nil,
        instanceGroupId: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> RemoveAutoScalingPolicyOutput {
        let input = RemoveAutoScalingPolicyInput(
            clusterId: clusterId, 
            instanceGroupId: instanceGroupId
        )
        return try await self.removeAutoScalingPolicy(input, logger: logger)
    }

    /// Removes an auto-termination policy from an Amazon EMR cluster.
    @Sendable
    @inlinable
    public func removeAutoTerminationPolicy(_ input: RemoveAutoTerminationPolicyInput, logger: Logger = AWSClient.loggingDisabled) async throws -> RemoveAutoTerminationPolicyOutput {
        try await self.client.execute(
            operation: "RemoveAutoTerminationPolicy", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Removes an auto-termination policy from an Amazon EMR cluster.
    ///
    /// Parameters:
    ///   - clusterId: Specifies the ID of the Amazon EMR cluster from which the auto-termination policy will be removed.
    ///   - logger: Logger use during operation
    @inlinable
    public func removeAutoTerminationPolicy(
        clusterId: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> RemoveAutoTerminationPolicyOutput {
        let input = RemoveAutoTerminationPolicyInput(
            clusterId: clusterId
        )
        return try await self.removeAutoTerminationPolicy(input, logger: logger)
    }

    ///  Removes a managed scaling policy from a specified Amazon EMR cluster.
    @Sendable
    @inlinable
    public func removeManagedScalingPolicy(_ input: RemoveManagedScalingPolicyInput, logger: Logger = AWSClient.loggingDisabled) async throws -> RemoveManagedScalingPolicyOutput {
        try await self.client.execute(
            operation: "RemoveManagedScalingPolicy", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    ///  Removes a managed scaling policy from a specified Amazon EMR cluster.
    ///
    /// Parameters:
    ///   - clusterId:  Specifies the ID of the cluster from which the managed scaling policy will be removed.
    ///   - logger: Logger use during operation
    @inlinable
    public func removeManagedScalingPolicy(
        clusterId: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> RemoveManagedScalingPolicyOutput {
        let input = RemoveManagedScalingPolicyInput(
            clusterId: clusterId
        )
        return try await self.removeManagedScalingPolicy(input, logger: logger)
    }

    /// Removes tags from an Amazon EMR resource, such as a cluster or Amazon EMR Studio. Tags make it easier to associate resources in various ways, such as grouping clusters to track your Amazon EMR resource allocation costs. For more information, see Tag Clusters.  The following example removes the stack tag with value Prod from a cluster:
    @Sendable
    @inlinable
    public func removeTags(_ input: RemoveTagsInput, logger: Logger = AWSClient.loggingDisabled) async throws -> RemoveTagsOutput {
        try await self.client.execute(
            operation: "RemoveTags", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Removes tags from an Amazon EMR resource, such as a cluster or Amazon EMR Studio. Tags make it easier to associate resources in various ways, such as grouping clusters to track your Amazon EMR resource allocation costs. For more information, see Tag Clusters.  The following example removes the stack tag with value Prod from a cluster:
    ///
    /// Parameters:
    ///   - resourceId: The Amazon EMR resource identifier from which tags will be removed. For example, a cluster identifier or an Amazon EMR Studio ID.
    ///   - tagKeys: A list of tag keys to remove from the resource.
    ///   - logger: Logger use during operation
    @inlinable
    public func removeTags(
        resourceId: String? = nil,
        tagKeys: [String]? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> RemoveTagsOutput {
        let input = RemoveTagsInput(
            resourceId: resourceId, 
            tagKeys: tagKeys
        )
        return try await self.removeTags(input, logger: logger)
    }

    /// RunJobFlow creates and starts running a new cluster (job flow). The cluster runs the steps specified. After the steps complete, the cluster stops and the HDFS partition is lost. To prevent loss of data, configure the last step of the job flow to store results in Amazon S3. If the JobFlowInstancesConfig KeepJobFlowAliveWhenNoSteps parameter is set to TRUE, the cluster transitions to the WAITING state rather than shutting down after the steps have completed.  For additional protection, you can set the JobFlowInstancesConfig TerminationProtected parameter to TRUE to lock the cluster and prevent it from being terminated by API call, user intervention, or in the event of a job flow error. A maximum of 256 steps are allowed in each job flow. If your cluster is long-running (such as a Hive data warehouse) or complex, you may require more than 256 steps to process your data. You can bypass the 256-step limitation in various ways, including using the SSH shell to connect to the master node and submitting queries directly to the software running on the master node, such as Hive and Hadoop. For long-running clusters, we recommend that you periodically store your results.  The instance fleets configuration is available only in Amazon EMR releases 4.8.0 and later, excluding 5.0.x versions. The RunJobFlow request can contain InstanceFleets parameters or InstanceGroups parameters, but not both.
    @Sendable
    @inlinable
    public func runJobFlow(_ input: RunJobFlowInput, logger: Logger = AWSClient.loggingDisabled) async throws -> RunJobFlowOutput {
        try await self.client.execute(
            operation: "RunJobFlow", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// RunJobFlow creates and starts running a new cluster (job flow). The cluster runs the steps specified. After the steps complete, the cluster stops and the HDFS partition is lost. To prevent loss of data, configure the last step of the job flow to store results in Amazon S3. If the JobFlowInstancesConfig KeepJobFlowAliveWhenNoSteps parameter is set to TRUE, the cluster transitions to the WAITING state rather than shutting down after the steps have completed.  For additional protection, you can set the JobFlowInstancesConfig TerminationProtected parameter to TRUE to lock the cluster and prevent it from being terminated by API call, user intervention, or in the event of a job flow error. A maximum of 256 steps are allowed in each job flow. If your cluster is long-running (such as a Hive data warehouse) or complex, you may require more than 256 steps to process your data. You can bypass the 256-step limitation in various ways, including using the SSH shell to connect to the master node and submitting queries directly to the software running on the master node, such as Hive and Hadoop. For long-running clusters, we recommend that you periodically store your results.  The instance fleets configuration is available only in Amazon EMR releases 4.8.0 and later, excluding 5.0.x versions. The RunJobFlow request can contain InstanceFleets parameters or InstanceGroups parameters, but not both.
    ///
    /// Parameters:
    ///   - additionalInfo: A JSON string for selecting additional features.
    ///   - amiVersion: Applies only to Amazon EMR AMI versions 3.x and 2.x. For Amazon EMR releases 4.0 and later, ReleaseLabel is used. To specify a custom AMI, use CustomAmiID.
    ///   - applications: Applies to Amazon EMR releases 4.0 and later. A case-insensitive list of applications for Amazon EMR to install and configure when launching the cluster. For a list of applications available for each Amazon EMR release version, see the Amazon EMRRelease Guide.
    ///   - autoScalingRole: An IAM role for automatic scaling policies. The default role is EMR_AutoScaling_DefaultRole. The IAM role provides permissions that the automatic scaling feature requires to launch and terminate Amazon EC2 instances in an instance group.
    ///   - autoTerminationPolicy: 
    ///   - bootstrapActions: A list of bootstrap actions to run before Hadoop starts on the cluster nodes.
    ///   - configurations: For Amazon EMR releases 4.0 and later. The list of configurations supplied for the Amazon EMR cluster that you are creating.
    ///   - customAmiId: Available only in Amazon EMR releases 5.7.0 and later. The ID of a custom Amazon EBS-backed Linux AMI. If specified, Amazon EMR uses this AMI when it launches cluster Amazon EC2 instances. For more information about custom AMIs in Amazon EMR, see Using a Custom AMI in the Amazon EMR Management Guide. If omitted, the cluster uses the base Linux AMI for the ReleaseLabel specified. For Amazon EMR releases 2.x and 3.x, use AmiVersion instead. For information about creating a custom AMI, see Creating an Amazon EBS-Backed Linux AMI in the Amazon Elastic Compute Cloud User Guide for Linux Instances. For information about finding an AMI ID, see Finding a Linux AMI.
    ///   - ebsRootVolumeIops: The IOPS, of the Amazon EBS root device volume of the Linux AMI that is used for each Amazon EC2 instance. Available in Amazon EMR releases 6.15.0 and later.
    ///   - ebsRootVolumeSize: The size, in GiB, of the Amazon EBS root device volume of the Linux AMI that is used for each Amazon EC2 instance. Available in Amazon EMR releases 4.x and later.
    ///   - ebsRootVolumeThroughput: The throughput, in MiB/s, of the Amazon EBS root device volume of the Linux AMI that is used for each Amazon EC2 instance. Available in Amazon EMR releases 6.15.0 and later.
    ///   - instances: A specification of the number and type of Amazon EC2 instances.
    ///   - jobFlowRole: Also called instance profile and Amazon EC2 role. An IAM role for an Amazon EMR cluster. The Amazon EC2 instances of the cluster assume this role. The default role is EMR_EC2_DefaultRole. In order to use the default role, you must have already created it using the CLI or console.
    ///   - kerberosAttributes: Attributes for Kerberos configuration when Kerberos authentication is enabled using a security configuration. For more information see Use Kerberos Authentication in the Amazon EMR Management Guide.
    ///   - logEncryptionKmsKeyId: The KMS key used for encrypting log files. If a value is not provided, the logs remain encrypted by AES-256. This attribute is only available with Amazon EMR releases 5.30.0 and later, excluding Amazon EMR 6.0.0.
    ///   - logUri: The location in Amazon S3 to write the log files of the job flow. If a value is not provided, logs are not created.
    ///   - managedScalingPolicy:  The specified managed scaling policy for an Amazon EMR cluster.
    ///   - name: The name of the job flow.
    ///   - newSupportedProducts:  For Amazon EMR releases 3.x and 2.x. For Amazon EMR releases 4.x and later, use Applications.  A list of strings that indicates third-party software to use with the job flow that accepts a user argument list. Amazon EMR accepts and forwards the argument list to the corresponding installation script as bootstrap action arguments. For more information, see "Launch a Job Flow on the MapR Distribution for Hadoop" in the Amazon EMR Developer Guide. Supported values are:   "mapr-m3" - launch the cluster using MapR M3 Edition.   "mapr-m5" - launch the cluster using MapR M5 Edition.   "mapr" with the user arguments specifying "--edition,m3" or "--edition,m5" - launch the job flow using MapR M3 or M5 Edition respectively.   "mapr-m7" - launch the cluster using MapR M7 Edition.   "hunk" - launch the cluster with the Hunk Big Data Analytics Platform.   "hue"- launch the cluster with Hue installed.   "spark" - launch the cluster with Apache Spark installed.   "ganglia" - launch the cluster with the Ganglia Monitoring System installed.
    ///   - osReleaseLabel: Specifies a particular Amazon Linux release for all nodes in a cluster launch RunJobFlow request. If a release is not specified, Amazon EMR uses the latest validated Amazon Linux release for cluster launch.
    ///   - placementGroupConfigs: The specified placement group configuration for an Amazon EMR cluster.
    ///   - releaseLabel: The Amazon EMR release label, which determines the version of open-source application packages installed on the cluster. Release labels are in the form emr-x.x.x, where x.x.x is an Amazon EMR release version such as emr-5.14.0. For more information about Amazon EMR release versions and included application versions and features, see https://docs.aws.amazon.com/emr/latest/ReleaseGuide/. The release label applies only to Amazon EMR releases version 4.0 and later. Earlier versions use AmiVersion.
    ///   - repoUpgradeOnBoot: Applies only when CustomAmiID is used. Specifies which updates from the Amazon Linux AMI package repositories to apply automatically when the instance boots using the AMI. If omitted, the default is SECURITY, which indicates that only security updates are applied. If NONE is specified, no updates are applied, and all updates must be applied manually.
    ///   - scaleDownBehavior: Specifies the way that individual Amazon EC2 instances terminate when an automatic scale-in activity occurs or an instance group is resized. TERMINATE_AT_INSTANCE_HOUR indicates that Amazon EMR terminates nodes at the instance-hour boundary, regardless of when the request to terminate the instance was submitted. This option is only available with Amazon EMR 5.1.0 and later and is the default for clusters created using that version. TERMINATE_AT_TASK_COMPLETION indicates that Amazon EMR adds nodes to a deny list and drains tasks from nodes before terminating the Amazon EC2 instances, regardless of the instance-hour boundary. With either behavior, Amazon EMR removes the least active nodes first and blocks instance termination if it could lead to HDFS corruption. TERMINATE_AT_TASK_COMPLETION available only in Amazon EMR releases 4.1.0 and later, and is the default for releases of Amazon EMR earlier than 5.1.0.
    ///   - securityConfiguration: The name of a security configuration to apply to the cluster.
    ///   - serviceRole: The IAM role that Amazon EMR assumes in order to access Amazon Web Services resources on your behalf. If you've created a custom service role path, you must specify it for the service role when you launch your cluster.
    ///   - stepConcurrencyLevel: Specifies the number of steps that can be executed concurrently. The default value is 1. The maximum value is 256.
    ///   - steps: A list of steps to run.
    ///   - supportedProducts:  For Amazon EMR releases 3.x and 2.x. For Amazon EMR releases 4.x and later, use Applications.  A list of strings that indicates third-party software to use. For more information, see the Amazon EMR Developer Guide. Currently supported values are:   "mapr-m3" - launch the job flow using MapR M3 Edition.   "mapr-m5" - launch the job flow using MapR M5 Edition.
    ///   - tags: A list of tags to associate with a cluster and propagate to Amazon EC2 instances.
    ///   - visibleToAllUsers:  The VisibleToAllUsers parameter is no longer supported. By default, the value is set to true. Setting it to false now has no effect.  Set this value to true so that IAM principals in the Amazon Web Services account associated with the cluster can perform Amazon EMR actions on the cluster that their IAM policies allow. This value defaults to true for clusters created using the Amazon EMR API or the CLI create-cluster command. When set to false, only the IAM principal that created the cluster and the Amazon Web Services account root user can perform Amazon EMR actions for the cluster, regardless of the IAM permissions policies attached to other IAM principals. For more information, see Understanding the Amazon EMR cluster VisibleToAllUsers setting in the Amazon EMR Management Guide.
    ///   - logger: Logger use during operation
    @inlinable
    public func runJobFlow(
        additionalInfo: String? = nil,
        amiVersion: String? = nil,
        applications: [Application]? = nil,
        autoScalingRole: String? = nil,
        autoTerminationPolicy: AutoTerminationPolicy? = nil,
        bootstrapActions: [BootstrapActionConfig]? = nil,
        configurations: [Configuration]? = nil,
        customAmiId: String? = nil,
        ebsRootVolumeIops: Int? = nil,
        ebsRootVolumeSize: Int? = nil,
        ebsRootVolumeThroughput: Int? = nil,
        instances: JobFlowInstancesConfig? = nil,
        jobFlowRole: String? = nil,
        kerberosAttributes: KerberosAttributes? = nil,
        logEncryptionKmsKeyId: String? = nil,
        logUri: String? = nil,
        managedScalingPolicy: ManagedScalingPolicy? = nil,
        name: String? = nil,
        newSupportedProducts: [SupportedProductConfig]? = nil,
        osReleaseLabel: String? = nil,
        placementGroupConfigs: [PlacementGroupConfig]? = nil,
        releaseLabel: String? = nil,
        repoUpgradeOnBoot: RepoUpgradeOnBoot? = nil,
        scaleDownBehavior: ScaleDownBehavior? = nil,
        securityConfiguration: String? = nil,
        serviceRole: String? = nil,
        stepConcurrencyLevel: Int? = nil,
        steps: [StepConfig]? = nil,
        supportedProducts: [String]? = nil,
        tags: [Tag]? = nil,
        visibleToAllUsers: Bool? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> RunJobFlowOutput {
        let input = RunJobFlowInput(
            additionalInfo: additionalInfo, 
            amiVersion: amiVersion, 
            applications: applications, 
            autoScalingRole: autoScalingRole, 
            autoTerminationPolicy: autoTerminationPolicy, 
            bootstrapActions: bootstrapActions, 
            configurations: configurations, 
            customAmiId: customAmiId, 
            ebsRootVolumeIops: ebsRootVolumeIops, 
            ebsRootVolumeSize: ebsRootVolumeSize, 
            ebsRootVolumeThroughput: ebsRootVolumeThroughput, 
            instances: instances, 
            jobFlowRole: jobFlowRole, 
            kerberosAttributes: kerberosAttributes, 
            logEncryptionKmsKeyId: logEncryptionKmsKeyId, 
            logUri: logUri, 
            managedScalingPolicy: managedScalingPolicy, 
            name: name, 
            newSupportedProducts: newSupportedProducts, 
            osReleaseLabel: osReleaseLabel, 
            placementGroupConfigs: placementGroupConfigs, 
            releaseLabel: releaseLabel, 
            repoUpgradeOnBoot: repoUpgradeOnBoot, 
            scaleDownBehavior: scaleDownBehavior, 
            securityConfiguration: securityConfiguration, 
            serviceRole: serviceRole, 
            stepConcurrencyLevel: stepConcurrencyLevel, 
            steps: steps, 
            supportedProducts: supportedProducts, 
            tags: tags, 
            visibleToAllUsers: visibleToAllUsers
        )
        return try await self.runJobFlow(input, logger: logger)
    }

    /// You can use the SetKeepJobFlowAliveWhenNoSteps to configure a cluster (job flow) to terminate after the step execution, i.e., all your  steps are executed. If you want a transient cluster that shuts down after the last of the current executing steps are completed,  you can configure SetKeepJobFlowAliveWhenNoSteps to false. If you want a long running cluster, configure SetKeepJobFlowAliveWhenNoSteps to true. For more information, see Managing Cluster Termination in the Amazon EMR Management Guide.
    @Sendable
    @inlinable
    public func setKeepJobFlowAliveWhenNoSteps(_ input: SetKeepJobFlowAliveWhenNoStepsInput, logger: Logger = AWSClient.loggingDisabled) async throws {
        try await self.client.execute(
            operation: "SetKeepJobFlowAliveWhenNoSteps", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// You can use the SetKeepJobFlowAliveWhenNoSteps to configure a cluster (job flow) to terminate after the step execution, i.e., all your  steps are executed. If you want a transient cluster that shuts down after the last of the current executing steps are completed,  you can configure SetKeepJobFlowAliveWhenNoSteps to false. If you want a long running cluster, configure SetKeepJobFlowAliveWhenNoSteps to true. For more information, see Managing Cluster Termination in the Amazon EMR Management Guide.
    ///
    /// Parameters:
    ///   - jobFlowIds: A list of strings that uniquely identify the clusters to protect. This identifier is returned by  RunJobFlow and can also  be obtained from DescribeJobFlows.
    ///   - keepJobFlowAliveWhenNoSteps: A Boolean that indicates whether to terminate the cluster after all steps are executed.
    ///   - logger: Logger use during operation
    @inlinable
    public func setKeepJobFlowAliveWhenNoSteps(
        jobFlowIds: [String]? = nil,
        keepJobFlowAliveWhenNoSteps: Bool? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws {
        let input = SetKeepJobFlowAliveWhenNoStepsInput(
            jobFlowIds: jobFlowIds, 
            keepJobFlowAliveWhenNoSteps: keepJobFlowAliveWhenNoSteps
        )
        return try await self.setKeepJobFlowAliveWhenNoSteps(input, logger: logger)
    }

    /// SetTerminationProtection locks a cluster (job flow) so the Amazon EC2 instances in the cluster cannot be terminated by user intervention, an API call, or in the event of a job-flow error. The cluster still terminates upon successful completion of the job flow. Calling SetTerminationProtection on a cluster is similar to calling the Amazon EC2 DisableAPITermination API on all Amazon EC2 instances in a cluster.  SetTerminationProtection is used to prevent accidental termination of a cluster and to ensure that in the event of an error, the instances persist so that you can recover any data stored in their ephemeral instance storage. To terminate a cluster that has been locked by setting SetTerminationProtection to true, you must first unlock the job flow by a subsequent call to SetTerminationProtection in which you set the value to false.  For more information, see Managing Cluster Termination in the Amazon EMR Management Guide.
    @Sendable
    @inlinable
    public func setTerminationProtection(_ input: SetTerminationProtectionInput, logger: Logger = AWSClient.loggingDisabled) async throws {
        try await self.client.execute(
            operation: "SetTerminationProtection", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// SetTerminationProtection locks a cluster (job flow) so the Amazon EC2 instances in the cluster cannot be terminated by user intervention, an API call, or in the event of a job-flow error. The cluster still terminates upon successful completion of the job flow. Calling SetTerminationProtection on a cluster is similar to calling the Amazon EC2 DisableAPITermination API on all Amazon EC2 instances in a cluster.  SetTerminationProtection is used to prevent accidental termination of a cluster and to ensure that in the event of an error, the instances persist so that you can recover any data stored in their ephemeral instance storage. To terminate a cluster that has been locked by setting SetTerminationProtection to true, you must first unlock the job flow by a subsequent call to SetTerminationProtection in which you set the value to false.  For more information, see Managing Cluster Termination in the Amazon EMR Management Guide.
    ///
    /// Parameters:
    ///   - jobFlowIds:  A list of strings that uniquely identify the clusters to protect. This identifier is returned by RunJobFlow and can also be obtained from DescribeJobFlows .
    ///   - terminationProtected: A Boolean that indicates whether to protect the cluster and prevent the Amazon EC2 instances in the cluster from shutting down due to API calls, user intervention, or job-flow error.
    ///   - logger: Logger use during operation
    @inlinable
    public func setTerminationProtection(
        jobFlowIds: [String]? = nil,
        terminationProtected: Bool? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws {
        let input = SetTerminationProtectionInput(
            jobFlowIds: jobFlowIds, 
            terminationProtected: terminationProtected
        )
        return try await self.setTerminationProtection(input, logger: logger)
    }

    /// Specify whether to enable unhealthy node replacement, which lets Amazon EMR gracefully  replace core nodes on a cluster if any nodes become unhealthy. For example, a node becomes  unhealthy if disk usage is above 90%. If unhealthy node replacement is on and TerminationProtected are off,  Amazon EMR immediately terminates the unhealthy core nodes. To use unhealthy node replacement  and retain unhealthy core nodes, use  to turn on termination protection. In such cases, Amazon EMR adds  the unhealthy nodes to a denylist, reducing job interruptions and failures. If unhealthy node replacement is on, Amazon EMR  notifies YARN and other applications on the cluster to stop scheduling tasks  with these nodes, moves the data, and then terminates the nodes. For more information, see graceful  node replacement in the Amazon EMR Management Guide.
    @Sendable
    @inlinable
    public func setUnhealthyNodeReplacement(_ input: SetUnhealthyNodeReplacementInput, logger: Logger = AWSClient.loggingDisabled) async throws {
        try await self.client.execute(
            operation: "SetUnhealthyNodeReplacement", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Specify whether to enable unhealthy node replacement, which lets Amazon EMR gracefully  replace core nodes on a cluster if any nodes become unhealthy. For example, a node becomes  unhealthy if disk usage is above 90%. If unhealthy node replacement is on and TerminationProtected are off,  Amazon EMR immediately terminates the unhealthy core nodes. To use unhealthy node replacement  and retain unhealthy core nodes, use  to turn on termination protection. In such cases, Amazon EMR adds  the unhealthy nodes to a denylist, reducing job interruptions and failures. If unhealthy node replacement is on, Amazon EMR  notifies YARN and other applications on the cluster to stop scheduling tasks  with these nodes, moves the data, and then terminates the nodes. For more information, see graceful  node replacement in the Amazon EMR Management Guide.
    ///
    /// Parameters:
    ///   - jobFlowIds: The list of strings that uniquely identify the clusters for which to turn on  unhealthy node replacement. You can get these identifiers by running the  RunJobFlow or the DescribeJobFlows operations.
    ///   - unhealthyNodeReplacement: Indicates whether to turn on or turn off graceful unhealthy node replacement.
    ///   - logger: Logger use during operation
    @inlinable
    public func setUnhealthyNodeReplacement(
        jobFlowIds: [String]? = nil,
        unhealthyNodeReplacement: Bool? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws {
        let input = SetUnhealthyNodeReplacementInput(
            jobFlowIds: jobFlowIds, 
            unhealthyNodeReplacement: unhealthyNodeReplacement
        )
        return try await self.setUnhealthyNodeReplacement(input, logger: logger)
    }

    ///  The SetVisibleToAllUsers parameter is no longer supported. Your cluster may be visible to all users in your account. To restrict cluster access using an IAM policy, see Identity and Access Management for Amazon EMR.   Sets the Cluster$VisibleToAllUsers value for an Amazon EMR cluster. When true, IAM principals in the Amazon Web Services account can perform Amazon EMR cluster actions that their IAM policies allow. When false, only the IAM principal that created the cluster and the Amazon Web Services account root user can perform Amazon EMR actions on the cluster, regardless of IAM permissions policies attached to other IAM principals. This action works on running clusters. When you create a cluster, use the RunJobFlowInput$VisibleToAllUsers parameter. For more information, see Understanding the Amazon EMR Cluster VisibleToAllUsers Setting in the Amazon EMR Management Guide.
    @Sendable
    @inlinable
    public func setVisibleToAllUsers(_ input: SetVisibleToAllUsersInput, logger: Logger = AWSClient.loggingDisabled) async throws {
        try await self.client.execute(
            operation: "SetVisibleToAllUsers", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    ///  The SetVisibleToAllUsers parameter is no longer supported. Your cluster may be visible to all users in your account. To restrict cluster access using an IAM policy, see Identity and Access Management for Amazon EMR.   Sets the Cluster$VisibleToAllUsers value for an Amazon EMR cluster. When true, IAM principals in the Amazon Web Services account can perform Amazon EMR cluster actions that their IAM policies allow. When false, only the IAM principal that created the cluster and the Amazon Web Services account root user can perform Amazon EMR actions on the cluster, regardless of IAM permissions policies attached to other IAM principals. This action works on running clusters. When you create a cluster, use the RunJobFlowInput$VisibleToAllUsers parameter. For more information, see Understanding the Amazon EMR Cluster VisibleToAllUsers Setting in the Amazon EMR Management Guide.
    ///
    /// Parameters:
    ///   - jobFlowIds: The unique identifier of the job flow (cluster).
    ///   - visibleToAllUsers: A value of true indicates that an IAM principal in the Amazon Web Services account can perform Amazon EMR actions on the cluster that the IAM policies attached to the principal allow. A value of false indicates that only the IAM principal that created the cluster and the Amazon Web Services root user can perform Amazon EMR actions on the cluster.
    ///   - logger: Logger use during operation
    @inlinable
    public func setVisibleToAllUsers(
        jobFlowIds: [String]? = nil,
        visibleToAllUsers: Bool? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws {
        let input = SetVisibleToAllUsersInput(
            jobFlowIds: jobFlowIds, 
            visibleToAllUsers: visibleToAllUsers
        )
        return try await self.setVisibleToAllUsers(input, logger: logger)
    }

    /// Starts a notebook execution.
    @Sendable
    @inlinable
    public func startNotebookExecution(_ input: StartNotebookExecutionInput, logger: Logger = AWSClient.loggingDisabled) async throws -> StartNotebookExecutionOutput {
        try await self.client.execute(
            operation: "StartNotebookExecution", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Starts a notebook execution.
    ///
    /// Parameters:
    ///   - editorId: The unique identifier of the Amazon EMR Notebook to use for notebook execution.
    ///   - environmentVariables: The environment variables associated with the notebook execution.
    ///   - executionEngine: Specifies the execution engine (cluster) that runs the notebook execution.
    ///   - notebookExecutionName: An optional name for the notebook execution.
    ///   - notebookInstanceSecurityGroupId: The unique identifier of the Amazon EC2 security group to associate with the Amazon EMR Notebook for this notebook execution.
    ///   - notebookParams: Input parameters in JSON format passed to the Amazon EMR Notebook at runtime for execution.
    ///   - notebookS3Location: The Amazon S3 location for the notebook execution input.
    ///   - outputNotebookFormat: The output format for the notebook execution.
    ///   - outputNotebookS3Location: The Amazon S3 location for the notebook execution output.
    ///   - relativePath: The path and file name of the notebook file for this execution, relative to the path specified for the Amazon EMR Notebook. For example, if you specify a path of s3://MyBucket/MyNotebooks when you create an Amazon EMR Notebook for a notebook with an ID of e-ABCDEFGHIJK1234567890ABCD (the EditorID of this request), and you specify a RelativePath of my_notebook_executions/notebook_execution.ipynb, the location of the file for the notebook execution is s3://MyBucket/MyNotebooks/e-ABCDEFGHIJK1234567890ABCD/my_notebook_executions/notebook_execution.ipynb.
    ///   - serviceRole: The name or ARN of the IAM role that is used as the service role for Amazon EMR (the Amazon EMR role) for the notebook execution.
    ///   - tags: A list of tags associated with a notebook execution. Tags are user-defined key-value pairs that consist of a required key string with a maximum of 128 characters and an optional value string with a maximum of 256 characters.
    ///   - logger: Logger use during operation
    @inlinable
    public func startNotebookExecution(
        editorId: String? = nil,
        environmentVariables: [String: String]? = nil,
        executionEngine: ExecutionEngineConfig? = nil,
        notebookExecutionName: String? = nil,
        notebookInstanceSecurityGroupId: String? = nil,
        notebookParams: String? = nil,
        notebookS3Location: NotebookS3LocationFromInput? = nil,
        outputNotebookFormat: OutputNotebookFormat? = nil,
        outputNotebookS3Location: OutputNotebookS3LocationFromInput? = nil,
        relativePath: String? = nil,
        serviceRole: String? = nil,
        tags: [Tag]? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> StartNotebookExecutionOutput {
        let input = StartNotebookExecutionInput(
            editorId: editorId, 
            environmentVariables: environmentVariables, 
            executionEngine: executionEngine, 
            notebookExecutionName: notebookExecutionName, 
            notebookInstanceSecurityGroupId: notebookInstanceSecurityGroupId, 
            notebookParams: notebookParams, 
            notebookS3Location: notebookS3Location, 
            outputNotebookFormat: outputNotebookFormat, 
            outputNotebookS3Location: outputNotebookS3Location, 
            relativePath: relativePath, 
            serviceRole: serviceRole, 
            tags: tags
        )
        return try await self.startNotebookExecution(input, logger: logger)
    }

    /// Stops a notebook execution.
    @Sendable
    @inlinable
    public func stopNotebookExecution(_ input: StopNotebookExecutionInput, logger: Logger = AWSClient.loggingDisabled) async throws {
        try await self.client.execute(
            operation: "StopNotebookExecution", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Stops a notebook execution.
    ///
    /// Parameters:
    ///   - notebookExecutionId: The unique identifier of the notebook execution.
    ///   - logger: Logger use during operation
    @inlinable
    public func stopNotebookExecution(
        notebookExecutionId: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws {
        let input = StopNotebookExecutionInput(
            notebookExecutionId: notebookExecutionId
        )
        return try await self.stopNotebookExecution(input, logger: logger)
    }

    /// TerminateJobFlows shuts a list of clusters (job flows) down. When a job flow is shut down, any step not yet completed is canceled and the Amazon EC2 instances on which the cluster is running are stopped. Any log files not already saved are uploaded to Amazon S3 if a LogUri was specified when the cluster was created. The maximum number of clusters allowed is 10. The call to TerminateJobFlows is asynchronous. Depending on the configuration of the cluster, it may take up to 1-5 minutes for the cluster to completely terminate and release allocated resources, such as Amazon EC2 instances.
    @Sendable
    @inlinable
    public func terminateJobFlows(_ input: TerminateJobFlowsInput, logger: Logger = AWSClient.loggingDisabled) async throws {
        try await self.client.execute(
            operation: "TerminateJobFlows", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// TerminateJobFlows shuts a list of clusters (job flows) down. When a job flow is shut down, any step not yet completed is canceled and the Amazon EC2 instances on which the cluster is running are stopped. Any log files not already saved are uploaded to Amazon S3 if a LogUri was specified when the cluster was created. The maximum number of clusters allowed is 10. The call to TerminateJobFlows is asynchronous. Depending on the configuration of the cluster, it may take up to 1-5 minutes for the cluster to completely terminate and release allocated resources, such as Amazon EC2 instances.
    ///
    /// Parameters:
    ///   - jobFlowIds: A list of job flows to be shut down.
    ///   - logger: Logger use during operation
    @inlinable
    public func terminateJobFlows(
        jobFlowIds: [String]? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws {
        let input = TerminateJobFlowsInput(
            jobFlowIds: jobFlowIds
        )
        return try await self.terminateJobFlows(input, logger: logger)
    }

    /// Updates an Amazon EMR Studio configuration, including attributes such as name, description, and subnets.
    @Sendable
    @inlinable
    public func updateStudio(_ input: UpdateStudioInput, logger: Logger = AWSClient.loggingDisabled) async throws {
        try await self.client.execute(
            operation: "UpdateStudio", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Updates an Amazon EMR Studio configuration, including attributes such as name, description, and subnets.
    ///
    /// Parameters:
    ///   - defaultS3Location: The Amazon S3 location to back up Workspaces and notebook files for the Amazon EMR Studio.
    ///   - description: A detailed description to assign to the Amazon EMR Studio.
    ///   - encryptionKeyArn: The KMS key identifier (ARN) used to encrypt Amazon EMR Studio workspace and notebook files when backed up to Amazon S3.
    ///   - name: A descriptive name for the Amazon EMR Studio.
    ///   - studioId: The ID of the Amazon EMR Studio to update.
    ///   - subnetIds: A list of subnet IDs to associate with the Amazon EMR Studio. The list can include new subnet IDs, but must also include all of the subnet IDs previously associated with the Studio. The list order does not matter. A Studio can have a maximum of 5 subnets. The subnets must belong to the same VPC as the Studio.
    ///   - logger: Logger use during operation
    @inlinable
    public func updateStudio(
        defaultS3Location: String? = nil,
        description: String? = nil,
        encryptionKeyArn: String? = nil,
        name: String? = nil,
        studioId: String? = nil,
        subnetIds: [String]? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws {
        let input = UpdateStudioInput(
            defaultS3Location: defaultS3Location, 
            description: description, 
            encryptionKeyArn: encryptionKeyArn, 
            name: name, 
            studioId: studioId, 
            subnetIds: subnetIds
        )
        return try await self.updateStudio(input, logger: logger)
    }

    /// Updates the session policy attached to the user or group for the specified Amazon EMR Studio.
    @Sendable
    @inlinable
    public func updateStudioSessionMapping(_ input: UpdateStudioSessionMappingInput, logger: Logger = AWSClient.loggingDisabled) async throws {
        try await self.client.execute(
            operation: "UpdateStudioSessionMapping", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Updates the session policy attached to the user or group for the specified Amazon EMR Studio.
    ///
    /// Parameters:
    ///   - identityId: The globally unique identifier (GUID) of the user or group. For more information, see UserId and GroupId in the IAM Identity Center Identity Store API Reference. Either IdentityName or IdentityId must be specified.
    ///   - identityName: The name of the user or group to update. For more information, see UserName and DisplayName in the IAM Identity Center Identity Store API Reference. Either IdentityName or IdentityId must be specified.
    ///   - identityType: Specifies whether the identity to update is a user or a group.
    ///   - sessionPolicyArn: The Amazon Resource Name (ARN) of the session policy to associate with the specified user or group.
    ///   - studioId: The ID of the Amazon EMR Studio.
    ///   - logger: Logger use during operation
    @inlinable
    public func updateStudioSessionMapping(
        identityId: String? = nil,
        identityName: String? = nil,
        identityType: IdentityType? = nil,
        sessionPolicyArn: String? = nil,
        studioId: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws {
        let input = UpdateStudioSessionMappingInput(
            identityId: identityId, 
            identityName: identityName, 
            identityType: identityType, 
            sessionPolicyArn: sessionPolicyArn, 
            studioId: studioId
        )
        return try await self.updateStudioSessionMapping(input, logger: logger)
    }
}

extension EMR {
    /// Initializer required by `AWSService.with(middlewares:timeout:byteBufferAllocator:options)`. You are not able to use this initializer directly as there are not public
    /// initializers for `AWSServiceConfig.Patch`. Please use `AWSService.with(middlewares:timeout:byteBufferAllocator:options)` instead.
    public init(from: EMR, patch: AWSServiceConfig.Patch) {
        self.client = from.client
        self.config = from.config.with(patch: patch)
    }
}

// MARK: Paginators

@available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
extension EMR {
    /// Return PaginatorSequence for operation ``listBootstrapActions(_:logger:)``.
    ///
    /// - Parameters:
    ///   - input: Input for operation
    ///   - logger: Logger used for logging
    @inlinable
    public func listBootstrapActionsPaginator(
        _ input: ListBootstrapActionsInput,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<ListBootstrapActionsInput, ListBootstrapActionsOutput> {
        return .init(
            input: input,
            command: self.listBootstrapActions,
            inputKey: \ListBootstrapActionsInput.marker,
            outputKey: \ListBootstrapActionsOutput.marker,
            logger: logger
        )
    }
    /// Return PaginatorSequence for operation ``listBootstrapActions(_:logger:)``.
    ///
    /// - Parameters:
    ///   - clusterId: The cluster identifier for the bootstrap actions to list.
    ///   - logger: Logger used for logging
    @inlinable
    public func listBootstrapActionsPaginator(
        clusterId: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) -> AWSClient.PaginatorSequence<ListBootstrapActionsInput, ListBootstrapActionsOutput> {
        let input = ListBootstrapActionsInput(
            clusterId: clusterId
        )
        return self.listBootstrapActionsPaginator(input, logger: logger)
    }

    /// Return PaginatorSequence for operation ``listClusters(_:logger:)``.
    ///
    /// - Parameters:
    ///   - input: Input for operation
    ///   - logger: Logger used for logging
    @inlinable
    public func listClustersPaginator(
        _ input: ListClustersInput,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<ListClustersInput, ListClustersOutput> {
        return .init(
            input: input,
            command: self.listClusters,
            inputKey: \ListClustersInput.marker,
            outputKey: \ListClustersOutput.marker,
            logger: logger
        )
    }
    /// Return PaginatorSequence for operation ``listClusters(_:logger:)``.
    ///
    /// - Parameters:
    ///   - clusterStates: The cluster state filters to apply when listing clusters. Clusters that change state while this action runs may be not be returned as expected in the list of clusters.
    ///   - createdAfter: The creation date and time beginning value filter for listing clusters.
    ///   - createdBefore: The creation date and time end value filter for listing clusters.
    ///   - logger: Logger used for logging
    @inlinable
    public func listClustersPaginator(
        clusterStates: [ClusterState]? = nil,
        createdAfter: Date? = nil,
        createdBefore: Date? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) -> AWSClient.PaginatorSequence<ListClustersInput, ListClustersOutput> {
        let input = ListClustersInput(
            clusterStates: clusterStates, 
            createdAfter: createdAfter, 
            createdBefore: createdBefore
        )
        return self.listClustersPaginator(input, logger: logger)
    }

    /// Return PaginatorSequence for operation ``listInstanceFleets(_:logger:)``.
    ///
    /// - Parameters:
    ///   - input: Input for operation
    ///   - logger: Logger used for logging
    @inlinable
    public func listInstanceFleetsPaginator(
        _ input: ListInstanceFleetsInput,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<ListInstanceFleetsInput, ListInstanceFleetsOutput> {
        return .init(
            input: input,
            command: self.listInstanceFleets,
            inputKey: \ListInstanceFleetsInput.marker,
            outputKey: \ListInstanceFleetsOutput.marker,
            logger: logger
        )
    }
    /// Return PaginatorSequence for operation ``listInstanceFleets(_:logger:)``.
    ///
    /// - Parameters:
    ///   - clusterId: The unique identifier of the cluster.
    ///   - logger: Logger used for logging
    @inlinable
    public func listInstanceFleetsPaginator(
        clusterId: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) -> AWSClient.PaginatorSequence<ListInstanceFleetsInput, ListInstanceFleetsOutput> {
        let input = ListInstanceFleetsInput(
            clusterId: clusterId
        )
        return self.listInstanceFleetsPaginator(input, logger: logger)
    }

    /// Return PaginatorSequence for operation ``listInstanceGroups(_:logger:)``.
    ///
    /// - Parameters:
    ///   - input: Input for operation
    ///   - logger: Logger used for logging
    @inlinable
    public func listInstanceGroupsPaginator(
        _ input: ListInstanceGroupsInput,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<ListInstanceGroupsInput, ListInstanceGroupsOutput> {
        return .init(
            input: input,
            command: self.listInstanceGroups,
            inputKey: \ListInstanceGroupsInput.marker,
            outputKey: \ListInstanceGroupsOutput.marker,
            logger: logger
        )
    }
    /// Return PaginatorSequence for operation ``listInstanceGroups(_:logger:)``.
    ///
    /// - Parameters:
    ///   - clusterId: The identifier of the cluster for which to list the instance groups.
    ///   - logger: Logger used for logging
    @inlinable
    public func listInstanceGroupsPaginator(
        clusterId: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) -> AWSClient.PaginatorSequence<ListInstanceGroupsInput, ListInstanceGroupsOutput> {
        let input = ListInstanceGroupsInput(
            clusterId: clusterId
        )
        return self.listInstanceGroupsPaginator(input, logger: logger)
    }

    /// Return PaginatorSequence for operation ``listInstances(_:logger:)``.
    ///
    /// - Parameters:
    ///   - input: Input for operation
    ///   - logger: Logger used for logging
    @inlinable
    public func listInstancesPaginator(
        _ input: ListInstancesInput,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<ListInstancesInput, ListInstancesOutput> {
        return .init(
            input: input,
            command: self.listInstances,
            inputKey: \ListInstancesInput.marker,
            outputKey: \ListInstancesOutput.marker,
            logger: logger
        )
    }
    /// Return PaginatorSequence for operation ``listInstances(_:logger:)``.
    ///
    /// - Parameters:
    ///   - clusterId: The identifier of the cluster for which to list the instances.
    ///   - instanceFleetId: The unique identifier of the instance fleet.
    ///   - instanceFleetType: The node type of the instance fleet. For example MASTER, CORE, or TASK.
    ///   - instanceGroupId: The identifier of the instance group for which to list the instances.
    ///   - instanceGroupTypes: The type of instance group for which to list the instances.
    ///   - instanceStates: A list of instance states that will filter the instances returned with this request.
    ///   - logger: Logger used for logging
    @inlinable
    public func listInstancesPaginator(
        clusterId: String? = nil,
        instanceFleetId: String? = nil,
        instanceFleetType: InstanceFleetType? = nil,
        instanceGroupId: String? = nil,
        instanceGroupTypes: [InstanceGroupType]? = nil,
        instanceStates: [InstanceState]? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) -> AWSClient.PaginatorSequence<ListInstancesInput, ListInstancesOutput> {
        let input = ListInstancesInput(
            clusterId: clusterId, 
            instanceFleetId: instanceFleetId, 
            instanceFleetType: instanceFleetType, 
            instanceGroupId: instanceGroupId, 
            instanceGroupTypes: instanceGroupTypes, 
            instanceStates: instanceStates
        )
        return self.listInstancesPaginator(input, logger: logger)
    }

    /// Return PaginatorSequence for operation ``listNotebookExecutions(_:logger:)``.
    ///
    /// - Parameters:
    ///   - input: Input for operation
    ///   - logger: Logger used for logging
    @inlinable
    public func listNotebookExecutionsPaginator(
        _ input: ListNotebookExecutionsInput,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<ListNotebookExecutionsInput, ListNotebookExecutionsOutput> {
        return .init(
            input: input,
            command: self.listNotebookExecutions,
            inputKey: \ListNotebookExecutionsInput.marker,
            outputKey: \ListNotebookExecutionsOutput.marker,
            logger: logger
        )
    }
    /// Return PaginatorSequence for operation ``listNotebookExecutions(_:logger:)``.
    ///
    /// - Parameters:
    ///   - editorId: The unique ID of the editor associated with the notebook execution.
    ///   - executionEngineId: The unique ID of the execution engine.
    ///   - from: The beginning of time range filter for listing notebook executions. The default is the timestamp of 30 days ago.
    ///   - status: The status filter for listing notebook executions.    START_PENDING indicates that the cluster has received the execution request but execution has not begun.    STARTING indicates that the execution is starting on the cluster.    RUNNING indicates that the execution is being processed by the cluster.    FINISHING indicates that execution processing is in the final stages.    FINISHED indicates that the execution has completed without error.    FAILING indicates that the execution is failing and will not finish successfully.    FAILED indicates that the execution failed.    STOP_PENDING indicates that the cluster has received a StopNotebookExecution request and the stop is pending.    STOPPING indicates that the cluster is in the process of stopping the execution as a result of a StopNotebookExecution request.    STOPPED indicates that the execution stopped because of a StopNotebookExecution request.
    ///   - to: The end of time range filter for listing notebook executions. The default is the current timestamp.
    ///   - logger: Logger used for logging
    @inlinable
    public func listNotebookExecutionsPaginator(
        editorId: String? = nil,
        executionEngineId: String? = nil,
        from: Date? = nil,
        status: NotebookExecutionStatus? = nil,
        to: Date? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) -> AWSClient.PaginatorSequence<ListNotebookExecutionsInput, ListNotebookExecutionsOutput> {
        let input = ListNotebookExecutionsInput(
            editorId: editorId, 
            executionEngineId: executionEngineId, 
            from: from, 
            status: status, 
            to: to
        )
        return self.listNotebookExecutionsPaginator(input, logger: logger)
    }

    /// Return PaginatorSequence for operation ``listReleaseLabels(_:logger:)``.
    ///
    /// - Parameters:
    ///   - input: Input for operation
    ///   - logger: Logger used for logging
    @inlinable
    public func listReleaseLabelsPaginator(
        _ input: ListReleaseLabelsInput,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<ListReleaseLabelsInput, ListReleaseLabelsOutput> {
        return .init(
            input: input,
            command: self.listReleaseLabels,
            inputKey: \ListReleaseLabelsInput.nextToken,
            outputKey: \ListReleaseLabelsOutput.nextToken,
            logger: logger
        )
    }
    /// Return PaginatorSequence for operation ``listReleaseLabels(_:logger:)``.
    ///
    /// - Parameters:
    ///   - filters: Filters the results of the request. Prefix specifies the prefix of release labels to return. Application specifies the application (with/without version) of release labels to return.
    ///   - maxResults: Defines the maximum number of release labels to return in a single response. The default is 100.
    ///   - logger: Logger used for logging
    @inlinable
    public func listReleaseLabelsPaginator(
        filters: ReleaseLabelFilter? = nil,
        maxResults: Int? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) -> AWSClient.PaginatorSequence<ListReleaseLabelsInput, ListReleaseLabelsOutput> {
        let input = ListReleaseLabelsInput(
            filters: filters, 
            maxResults: maxResults
        )
        return self.listReleaseLabelsPaginator(input, logger: logger)
    }

    /// Return PaginatorSequence for operation ``listSecurityConfigurations(_:logger:)``.
    ///
    /// - Parameters:
    ///   - input: Input for operation
    ///   - logger: Logger used for logging
    @inlinable
    public func listSecurityConfigurationsPaginator(
        _ input: ListSecurityConfigurationsInput,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<ListSecurityConfigurationsInput, ListSecurityConfigurationsOutput> {
        return .init(
            input: input,
            command: self.listSecurityConfigurations,
            inputKey: \ListSecurityConfigurationsInput.marker,
            outputKey: \ListSecurityConfigurationsOutput.marker,
            logger: logger
        )
    }
    /// Return PaginatorSequence for operation ``listSecurityConfigurations(_:logger:)``.
    ///
    /// - Parameters:
    ///   - logger: Logger used for logging
    @inlinable
    public func listSecurityConfigurationsPaginator(
        logger: Logger = AWSClient.loggingDisabled        
    ) -> AWSClient.PaginatorSequence<ListSecurityConfigurationsInput, ListSecurityConfigurationsOutput> {
        let input = ListSecurityConfigurationsInput(
        )
        return self.listSecurityConfigurationsPaginator(input, logger: logger)
    }

    /// Return PaginatorSequence for operation ``listSteps(_:logger:)``.
    ///
    /// - Parameters:
    ///   - input: Input for operation
    ///   - logger: Logger used for logging
    @inlinable
    public func listStepsPaginator(
        _ input: ListStepsInput,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<ListStepsInput, ListStepsOutput> {
        return .init(
            input: input,
            command: self.listSteps,
            inputKey: \ListStepsInput.marker,
            outputKey: \ListStepsOutput.marker,
            logger: logger
        )
    }
    /// Return PaginatorSequence for operation ``listSteps(_:logger:)``.
    ///
    /// - Parameters:
    ///   - clusterId: The identifier of the cluster for which to list the steps.
    ///   - stepIds: The filter to limit the step list based on the identifier of the steps. You can specify a maximum of ten Step IDs. The character constraint applies to the overall length of the array.
    ///   - stepStates: The filter to limit the step list based on certain states.
    ///   - logger: Logger used for logging
    @inlinable
    public func listStepsPaginator(
        clusterId: String? = nil,
        stepIds: [String]? = nil,
        stepStates: [StepState]? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) -> AWSClient.PaginatorSequence<ListStepsInput, ListStepsOutput> {
        let input = ListStepsInput(
            clusterId: clusterId, 
            stepIds: stepIds, 
            stepStates: stepStates
        )
        return self.listStepsPaginator(input, logger: logger)
    }

    /// Return PaginatorSequence for operation ``listStudioSessionMappings(_:logger:)``.
    ///
    /// - Parameters:
    ///   - input: Input for operation
    ///   - logger: Logger used for logging
    @inlinable
    public func listStudioSessionMappingsPaginator(
        _ input: ListStudioSessionMappingsInput,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<ListStudioSessionMappingsInput, ListStudioSessionMappingsOutput> {
        return .init(
            input: input,
            command: self.listStudioSessionMappings,
            inputKey: \ListStudioSessionMappingsInput.marker,
            outputKey: \ListStudioSessionMappingsOutput.marker,
            logger: logger
        )
    }
    /// Return PaginatorSequence for operation ``listStudioSessionMappings(_:logger:)``.
    ///
    /// - Parameters:
    ///   - identityType: Specifies whether to return session mappings for users or groups. If not specified, the results include session mapping details for both users and groups.
    ///   - studioId: The ID of the Amazon EMR Studio.
    ///   - logger: Logger used for logging
    @inlinable
    public func listStudioSessionMappingsPaginator(
        identityType: IdentityType? = nil,
        studioId: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) -> AWSClient.PaginatorSequence<ListStudioSessionMappingsInput, ListStudioSessionMappingsOutput> {
        let input = ListStudioSessionMappingsInput(
            identityType: identityType, 
            studioId: studioId
        )
        return self.listStudioSessionMappingsPaginator(input, logger: logger)
    }

    /// Return PaginatorSequence for operation ``listStudios(_:logger:)``.
    ///
    /// - Parameters:
    ///   - input: Input for operation
    ///   - logger: Logger used for logging
    @inlinable
    public func listStudiosPaginator(
        _ input: ListStudiosInput,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<ListStudiosInput, ListStudiosOutput> {
        return .init(
            input: input,
            command: self.listStudios,
            inputKey: \ListStudiosInput.marker,
            outputKey: \ListStudiosOutput.marker,
            logger: logger
        )
    }
    /// Return PaginatorSequence for operation ``listStudios(_:logger:)``.
    ///
    /// - Parameters:
    ///   - logger: Logger used for logging
    @inlinable
    public func listStudiosPaginator(
        logger: Logger = AWSClient.loggingDisabled        
    ) -> AWSClient.PaginatorSequence<ListStudiosInput, ListStudiosOutput> {
        let input = ListStudiosInput(
        )
        return self.listStudiosPaginator(input, logger: logger)
    }

    /// Return PaginatorSequence for operation ``listSupportedInstanceTypes(_:logger:)``.
    ///
    /// - Parameters:
    ///   - input: Input for operation
    ///   - logger: Logger used for logging
    @inlinable
    public func listSupportedInstanceTypesPaginator(
        _ input: ListSupportedInstanceTypesInput,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<ListSupportedInstanceTypesInput, ListSupportedInstanceTypesOutput> {
        return .init(
            input: input,
            command: self.listSupportedInstanceTypes,
            inputKey: \ListSupportedInstanceTypesInput.marker,
            outputKey: \ListSupportedInstanceTypesOutput.marker,
            logger: logger
        )
    }
    /// Return PaginatorSequence for operation ``listSupportedInstanceTypes(_:logger:)``.
    ///
    /// - Parameters:
    ///   - releaseLabel: The Amazon EMR release label determines the versions of open-source application packages that Amazon EMR has installed on the cluster. Release labels are in the format emr-x.x.x, where x.x.x is an Amazon EMR release number such as emr-6.10.0. For more information about Amazon EMR releases and their included application versions and features, see the  Amazon EMR Release Guide .
    ///   - logger: Logger used for logging
    @inlinable
    public func listSupportedInstanceTypesPaginator(
        releaseLabel: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) -> AWSClient.PaginatorSequence<ListSupportedInstanceTypesInput, ListSupportedInstanceTypesOutput> {
        let input = ListSupportedInstanceTypesInput(
            releaseLabel: releaseLabel
        )
        return self.listSupportedInstanceTypesPaginator(input, logger: logger)
    }
}

extension EMR.ListBootstrapActionsInput: AWSPaginateToken {
    @inlinable
    public func usingPaginationToken(_ token: String) -> EMR.ListBootstrapActionsInput {
        return .init(
            clusterId: self.clusterId,
            marker: token
        )
    }
}

extension EMR.ListClustersInput: AWSPaginateToken {
    @inlinable
    public func usingPaginationToken(_ token: String) -> EMR.ListClustersInput {
        return .init(
            clusterStates: self.clusterStates,
            createdAfter: self.createdAfter,
            createdBefore: self.createdBefore,
            marker: token
        )
    }
}

extension EMR.ListInstanceFleetsInput: AWSPaginateToken {
    @inlinable
    public func usingPaginationToken(_ token: String) -> EMR.ListInstanceFleetsInput {
        return .init(
            clusterId: self.clusterId,
            marker: token
        )
    }
}

extension EMR.ListInstanceGroupsInput: AWSPaginateToken {
    @inlinable
    public func usingPaginationToken(_ token: String) -> EMR.ListInstanceGroupsInput {
        return .init(
            clusterId: self.clusterId,
            marker: token
        )
    }
}

extension EMR.ListInstancesInput: AWSPaginateToken {
    @inlinable
    public func usingPaginationToken(_ token: String) -> EMR.ListInstancesInput {
        return .init(
            clusterId: self.clusterId,
            instanceFleetId: self.instanceFleetId,
            instanceFleetType: self.instanceFleetType,
            instanceGroupId: self.instanceGroupId,
            instanceGroupTypes: self.instanceGroupTypes,
            instanceStates: self.instanceStates,
            marker: token
        )
    }
}

extension EMR.ListNotebookExecutionsInput: AWSPaginateToken {
    @inlinable
    public func usingPaginationToken(_ token: String) -> EMR.ListNotebookExecutionsInput {
        return .init(
            editorId: self.editorId,
            executionEngineId: self.executionEngineId,
            from: self.from,
            marker: token,
            status: self.status,
            to: self.to
        )
    }
}

extension EMR.ListReleaseLabelsInput: AWSPaginateToken {
    @inlinable
    public func usingPaginationToken(_ token: String) -> EMR.ListReleaseLabelsInput {
        return .init(
            filters: self.filters,
            maxResults: self.maxResults,
            nextToken: token
        )
    }
}

extension EMR.ListSecurityConfigurationsInput: AWSPaginateToken {
    @inlinable
    public func usingPaginationToken(_ token: String) -> EMR.ListSecurityConfigurationsInput {
        return .init(
            marker: token
        )
    }
}

extension EMR.ListStepsInput: AWSPaginateToken {
    @inlinable
    public func usingPaginationToken(_ token: String) -> EMR.ListStepsInput {
        return .init(
            clusterId: self.clusterId,
            marker: token,
            stepIds: self.stepIds,
            stepStates: self.stepStates
        )
    }
}

extension EMR.ListStudioSessionMappingsInput: AWSPaginateToken {
    @inlinable
    public func usingPaginationToken(_ token: String) -> EMR.ListStudioSessionMappingsInput {
        return .init(
            identityType: self.identityType,
            marker: token,
            studioId: self.studioId
        )
    }
}

extension EMR.ListStudiosInput: AWSPaginateToken {
    @inlinable
    public func usingPaginationToken(_ token: String) -> EMR.ListStudiosInput {
        return .init(
            marker: token
        )
    }
}

extension EMR.ListSupportedInstanceTypesInput: AWSPaginateToken {
    @inlinable
    public func usingPaginationToken(_ token: String) -> EMR.ListSupportedInstanceTypesInput {
        return .init(
            marker: token,
            releaseLabel: self.releaseLabel
        )
    }
}

// MARK: Waiters

@available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
extension EMR {
    /// Waiter for operation ``describeCluster(_:logger:)``.
    ///
    /// - Parameters:
    ///   - input: Input for operation
    ///   - logger: Logger used for logging
    @inlinable
    public func waitUntilClusterRunning(
        _ input: DescribeClusterInput,
        maxWaitTime: TimeAmount? = nil,
        logger: Logger = AWSClient.loggingDisabled
    ) async throws {
        let waiter = AWSClient.Waiter<DescribeClusterInput, _>(
            acceptors: [
                .init(state: .success, matcher: try! JMESPathMatcher("cluster.status.state", expected: "RUNNING")),
                .init(state: .success, matcher: try! JMESPathMatcher("cluster.status.state", expected: "WAITING")),
                .init(state: .failure, matcher: try! JMESPathMatcher("cluster.status.state", expected: "TERMINATING")),
                .init(state: .failure, matcher: try! JMESPathMatcher("cluster.status.state", expected: "TERMINATED")),
                .init(state: .failure, matcher: try! JMESPathMatcher("cluster.status.state", expected: "TERMINATED_WITH_ERRORS")),
            ],
            minDelayTime: .seconds(30),
            command: self.describeCluster
        )
        return try await self.client.waitUntil(input, waiter: waiter, maxWaitTime: maxWaitTime, logger: logger)
    }
    /// Waiter for operation ``describeCluster(_:logger:)``.
    ///
    /// - Parameters:
    ///   - clusterId: The identifier of the cluster to describe.
    ///   - logger: Logger used for logging
    @inlinable
    public func waitUntilClusterRunning(
        clusterId: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws {
        let input = DescribeClusterInput(
            clusterId: clusterId
        )
        try await self.waitUntilClusterRunning(input, logger: logger)
    }

    /// Waiter for operation ``describeCluster(_:logger:)``.
    ///
    /// - Parameters:
    ///   - input: Input for operation
    ///   - logger: Logger used for logging
    @inlinable
    public func waitUntilClusterTerminated(
        _ input: DescribeClusterInput,
        maxWaitTime: TimeAmount? = nil,
        logger: Logger = AWSClient.loggingDisabled
    ) async throws {
        let waiter = AWSClient.Waiter<DescribeClusterInput, _>(
            acceptors: [
                .init(state: .success, matcher: try! JMESPathMatcher("cluster.status.state", expected: "TERMINATED")),
                .init(state: .failure, matcher: try! JMESPathMatcher("cluster.status.state", expected: "TERMINATED_WITH_ERRORS")),
            ],
            minDelayTime: .seconds(30),
            command: self.describeCluster
        )
        return try await self.client.waitUntil(input, waiter: waiter, maxWaitTime: maxWaitTime, logger: logger)
    }
    /// Waiter for operation ``describeCluster(_:logger:)``.
    ///
    /// - Parameters:
    ///   - clusterId: The identifier of the cluster to describe.
    ///   - logger: Logger used for logging
    @inlinable
    public func waitUntilClusterTerminated(
        clusterId: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws {
        let input = DescribeClusterInput(
            clusterId: clusterId
        )
        try await self.waitUntilClusterTerminated(input, logger: logger)
    }

    /// Waiter for operation ``describeStep(_:logger:)``.
    ///
    /// - Parameters:
    ///   - input: Input for operation
    ///   - logger: Logger used for logging
    @inlinable
    public func waitUntilStepComplete(
        _ input: DescribeStepInput,
        maxWaitTime: TimeAmount? = nil,
        logger: Logger = AWSClient.loggingDisabled
    ) async throws {
        let waiter = AWSClient.Waiter<DescribeStepInput, _>(
            acceptors: [
                .init(state: .success, matcher: try! JMESPathMatcher("step.status.state", expected: "COMPLETED")),
                .init(state: .failure, matcher: try! JMESPathMatcher("step.status.state", expected: "FAILED")),
                .init(state: .failure, matcher: try! JMESPathMatcher("step.status.state", expected: "CANCELLED")),
            ],
            minDelayTime: .seconds(30),
            command: self.describeStep
        )
        return try await self.client.waitUntil(input, waiter: waiter, maxWaitTime: maxWaitTime, logger: logger)
    }
    /// Waiter for operation ``describeStep(_:logger:)``.
    ///
    /// - Parameters:
    ///   - clusterId: The identifier of the cluster with steps to describe.
    ///   - stepId: The identifier of the step to describe.
    ///   - logger: Logger used for logging
    @inlinable
    public func waitUntilStepComplete(
        clusterId: String? = nil,
        stepId: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws {
        let input = DescribeStepInput(
            clusterId: clusterId, 
            stepId: stepId
        )
        try await self.waitUntilStepComplete(input, logger: logger)
    }
}
