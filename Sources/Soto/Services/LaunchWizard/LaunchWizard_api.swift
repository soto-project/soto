//===----------------------------------------------------------------------===//
//
// This source file is part of the Soto for AWS open source project
//
// Copyright (c) 2017-2024 the Soto project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
// See CONTRIBUTORS.txt for the list of Soto project authors
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by https://github.com/soto-project/soto-codegenerator.
// DO NOT EDIT.

@_exported import SotoCore

/// Service object for interacting with AWS LaunchWizard service.
///
/// Launch Wizard offers a guided way of sizing, configuring, and deploying Amazon Web Services resources for third party applications, such as Microsoft SQL Server Always On and HANA based SAP systems, without the need to manually identify and provision individual Amazon Web Services resources.
public struct LaunchWizard: AWSService {
    // MARK: Member variables

    /// Client used for communication with AWS
    public let client: AWSClient
    /// Service configuration
    public let config: AWSServiceConfig

    // MARK: Initialization

    /// Initialize the LaunchWizard client
    /// - parameters:
    ///     - client: AWSClient used to process requests
    ///     - region: Region of server you want to communicate with. This will override the partition parameter.
    ///     - partition: AWS partition where service resides, standard (.aws), china (.awscn), government (.awsusgov).
    ///     - endpoint: Custom endpoint URL to use instead of standard AWS servers
    ///     - middleware: Middleware chain used to edit requests before they are sent and responses before they are decoded 
    ///     - timeout: Timeout value for HTTP requests
    ///     - byteBufferAllocator: Allocator for ByteBuffers
    ///     - options: Service options
    public init(
        client: AWSClient,
        region: SotoCore.Region? = nil,
        partition: AWSPartition = .aws,
        endpoint: String? = nil,
        middleware: AWSMiddlewareProtocol? = nil,
        timeout: TimeAmount? = nil,
        byteBufferAllocator: ByteBufferAllocator = ByteBufferAllocator(),
        options: AWSServiceConfig.Options = []
    ) {
        self.client = client
        self.config = AWSServiceConfig(
            region: region,
            partition: region?.partition ?? partition,
            serviceName: "LaunchWizard",
            serviceIdentifier: "launchwizard",
            serviceProtocol: .restjson,
            apiVersion: "2018-05-10",
            endpoint: endpoint,
            errorType: LaunchWizardErrorType.self,
            middleware: middleware,
            timeout: timeout,
            byteBufferAllocator: byteBufferAllocator,
            options: options
        )
    }





    // MARK: API Calls

    /// Creates a deployment for the given workload. Deployments created by this operation are not available in the Launch Wizard console to use the Clone deployment action on.
    @Sendable
    public func createDeployment(_ input: CreateDeploymentInput, logger: Logger = AWSClient.loggingDisabled) async throws -> CreateDeploymentOutput {
        return try await self.client.execute(
            operation: "CreateDeployment", 
            path: "/createDeployment", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Deletes a deployment.
    @Sendable
    public func deleteDeployment(_ input: DeleteDeploymentInput, logger: Logger = AWSClient.loggingDisabled) async throws -> DeleteDeploymentOutput {
        return try await self.client.execute(
            operation: "DeleteDeployment", 
            path: "/deleteDeployment", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Returns information about the deployment.
    @Sendable
    public func getDeployment(_ input: GetDeploymentInput, logger: Logger = AWSClient.loggingDisabled) async throws -> GetDeploymentOutput {
        return try await self.client.execute(
            operation: "GetDeployment", 
            path: "/getDeployment", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Returns information about a workload.
    @Sendable
    public func getWorkload(_ input: GetWorkloadInput, logger: Logger = AWSClient.loggingDisabled) async throws -> GetWorkloadOutput {
        return try await self.client.execute(
            operation: "GetWorkload", 
            path: "/getWorkload", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Returns details for a given workload and deployment pattern, including the available specifications. You can use the ListWorkloads operation to discover the available workload names and the ListWorkloadDeploymentPatterns operation to discover the available deployment pattern names of a given workload.
    @Sendable
    public func getWorkloadDeploymentPattern(_ input: GetWorkloadDeploymentPatternInput, logger: Logger = AWSClient.loggingDisabled) async throws -> GetWorkloadDeploymentPatternOutput {
        return try await self.client.execute(
            operation: "GetWorkloadDeploymentPattern", 
            path: "/getWorkloadDeploymentPattern", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Lists the events of a deployment.
    @Sendable
    public func listDeploymentEvents(_ input: ListDeploymentEventsInput, logger: Logger = AWSClient.loggingDisabled) async throws -> ListDeploymentEventsOutput {
        return try await self.client.execute(
            operation: "ListDeploymentEvents", 
            path: "/listDeploymentEvents", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Lists the deployments that have been created.
    @Sendable
    public func listDeployments(_ input: ListDeploymentsInput, logger: Logger = AWSClient.loggingDisabled) async throws -> ListDeploymentsOutput {
        return try await self.client.execute(
            operation: "ListDeployments", 
            path: "/listDeployments", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Lists the tags associated with a specified resource.
    @Sendable
    public func listTagsForResource(_ input: ListTagsForResourceInput, logger: Logger = AWSClient.loggingDisabled) async throws -> ListTagsForResourceOutput {
        return try await self.client.execute(
            operation: "ListTagsForResource", 
            path: "/tags/{resourceArn}", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Lists the workload deployment patterns for a given workload name. You can use the ListWorkloads operation to discover the available workload names.
    @Sendable
    public func listWorkloadDeploymentPatterns(_ input: ListWorkloadDeploymentPatternsInput, logger: Logger = AWSClient.loggingDisabled) async throws -> ListWorkloadDeploymentPatternsOutput {
        return try await self.client.execute(
            operation: "ListWorkloadDeploymentPatterns", 
            path: "/listWorkloadDeploymentPatterns", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Lists the available workload names. You can use the ListWorkloadDeploymentPatterns operation to discover the available deployment patterns for a given workload.
    @Sendable
    public func listWorkloads(_ input: ListWorkloadsInput, logger: Logger = AWSClient.loggingDisabled) async throws -> ListWorkloadsOutput {
        return try await self.client.execute(
            operation: "ListWorkloads", 
            path: "/listWorkloads", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Adds the specified tags to the given resource.
    @Sendable
    public func tagResource(_ input: TagResourceInput, logger: Logger = AWSClient.loggingDisabled) async throws -> TagResourceOutput {
        return try await self.client.execute(
            operation: "TagResource", 
            path: "/tags/{resourceArn}", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Removes the specified tags from the given resource.
    @Sendable
    public func untagResource(_ input: UntagResourceInput, logger: Logger = AWSClient.loggingDisabled) async throws -> UntagResourceOutput {
        return try await self.client.execute(
            operation: "UntagResource", 
            path: "/tags/{resourceArn}", 
            httpMethod: .DELETE, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
}

extension LaunchWizard {
    /// Initializer required by `AWSService.with(middlewares:timeout:byteBufferAllocator:options)`. You are not able to use this initializer directly as there are not public
    /// initializers for `AWSServiceConfig.Patch`. Please use `AWSService.with(middlewares:timeout:byteBufferAllocator:options)` instead.
    public init(from: LaunchWizard, patch: AWSServiceConfig.Patch) {
        self.client = from.client
        self.config = from.config.with(patch: patch)
    }
}

// MARK: Paginators

@available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
extension LaunchWizard {
    /// Lists the events of a deployment.
    /// Return PaginatorSequence for operation.
    ///
    /// - Parameters:
    ///   - input: Input for request
    ///   - logger: Logger used flot logging
    public func listDeploymentEventsPaginator(
        _ input: ListDeploymentEventsInput,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<ListDeploymentEventsInput, ListDeploymentEventsOutput> {
        return .init(
            input: input,
            command: self.listDeploymentEvents,
            inputKey: \ListDeploymentEventsInput.nextToken,
            outputKey: \ListDeploymentEventsOutput.nextToken,
            logger: logger
        )
    }

    /// Lists the deployments that have been created.
    /// Return PaginatorSequence for operation.
    ///
    /// - Parameters:
    ///   - input: Input for request
    ///   - logger: Logger used flot logging
    public func listDeploymentsPaginator(
        _ input: ListDeploymentsInput,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<ListDeploymentsInput, ListDeploymentsOutput> {
        return .init(
            input: input,
            command: self.listDeployments,
            inputKey: \ListDeploymentsInput.nextToken,
            outputKey: \ListDeploymentsOutput.nextToken,
            logger: logger
        )
    }

    /// Lists the workload deployment patterns for a given workload name. You can use the ListWorkloads operation to discover the available workload names.
    /// Return PaginatorSequence for operation.
    ///
    /// - Parameters:
    ///   - input: Input for request
    ///   - logger: Logger used flot logging
    public func listWorkloadDeploymentPatternsPaginator(
        _ input: ListWorkloadDeploymentPatternsInput,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<ListWorkloadDeploymentPatternsInput, ListWorkloadDeploymentPatternsOutput> {
        return .init(
            input: input,
            command: self.listWorkloadDeploymentPatterns,
            inputKey: \ListWorkloadDeploymentPatternsInput.nextToken,
            outputKey: \ListWorkloadDeploymentPatternsOutput.nextToken,
            logger: logger
        )
    }

    /// Lists the available workload names. You can use the ListWorkloadDeploymentPatterns operation to discover the available deployment patterns for a given workload.
    /// Return PaginatorSequence for operation.
    ///
    /// - Parameters:
    ///   - input: Input for request
    ///   - logger: Logger used flot logging
    public func listWorkloadsPaginator(
        _ input: ListWorkloadsInput,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<ListWorkloadsInput, ListWorkloadsOutput> {
        return .init(
            input: input,
            command: self.listWorkloads,
            inputKey: \ListWorkloadsInput.nextToken,
            outputKey: \ListWorkloadsOutput.nextToken,
            logger: logger
        )
    }
}

extension LaunchWizard.ListDeploymentEventsInput: AWSPaginateToken {
    public func usingPaginationToken(_ token: String) -> LaunchWizard.ListDeploymentEventsInput {
        return .init(
            deploymentId: self.deploymentId,
            maxResults: self.maxResults,
            nextToken: token
        )
    }
}

extension LaunchWizard.ListDeploymentsInput: AWSPaginateToken {
    public func usingPaginationToken(_ token: String) -> LaunchWizard.ListDeploymentsInput {
        return .init(
            filters: self.filters,
            maxResults: self.maxResults,
            nextToken: token
        )
    }
}

extension LaunchWizard.ListWorkloadDeploymentPatternsInput: AWSPaginateToken {
    public func usingPaginationToken(_ token: String) -> LaunchWizard.ListWorkloadDeploymentPatternsInput {
        return .init(
            maxResults: self.maxResults,
            nextToken: token,
            workloadName: self.workloadName
        )
    }
}

extension LaunchWizard.ListWorkloadsInput: AWSPaginateToken {
    public func usingPaginationToken(_ token: String) -> LaunchWizard.ListWorkloadsInput {
        return .init(
            maxResults: self.maxResults,
            nextToken: token
        )
    }
}
