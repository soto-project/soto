//===----------------------------------------------------------------------===//
//
// This source file is part of the Soto for AWS open source project
//
// Copyright (c) 2017-2021 the Soto project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
// See CONTRIBUTORS.txt for the list of Soto project authors
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by https://github.com/soto-project/soto-codegenerator.
// DO NOT EDIT.

import Foundation
import SotoCore

extension DynamoDB {
    // MARK: Enums

    public enum AttributeAction: String, CustomStringConvertible, Codable {
        case add = "ADD"
        case delete = "DELETE"
        case put = "PUT"
        public var description: String { return self.rawValue }
    }

    public enum BackupStatus: String, CustomStringConvertible, Codable {
        case available = "AVAILABLE"
        case creating = "CREATING"
        case deleted = "DELETED"
        public var description: String { return self.rawValue }
    }

    public enum BackupType: String, CustomStringConvertible, Codable {
        case awsBackup = "AWS_BACKUP"
        case system = "SYSTEM"
        case user = "USER"
        public var description: String { return self.rawValue }
    }

    public enum BackupTypeFilter: String, CustomStringConvertible, Codable {
        case all = "ALL"
        case awsBackup = "AWS_BACKUP"
        case system = "SYSTEM"
        case user = "USER"
        public var description: String { return self.rawValue }
    }

    public enum BatchStatementErrorCodeEnum: String, CustomStringConvertible, Codable {
        case accessdenied = "AccessDenied"
        case conditionalcheckfailed = "ConditionalCheckFailed"
        case duplicateitem = "DuplicateItem"
        case internalservererror = "InternalServerError"
        case itemcollectionsizelimitexceeded = "ItemCollectionSizeLimitExceeded"
        case provisionedthroughputexceeded = "ProvisionedThroughputExceeded"
        case requestlimitexceeded = "RequestLimitExceeded"
        case resourcenotfound = "ResourceNotFound"
        case throttlingerror = "ThrottlingError"
        case transactionconflict = "TransactionConflict"
        case validationerror = "ValidationError"
        public var description: String { return self.rawValue }
    }

    public enum BillingMode: String, CustomStringConvertible, Codable {
        case payPerRequest = "PAY_PER_REQUEST"
        case provisioned = "PROVISIONED"
        public var description: String { return self.rawValue }
    }

    public enum ComparisonOperator: String, CustomStringConvertible, Codable {
        case beginsWith = "BEGINS_WITH"
        case between = "BETWEEN"
        case contains = "CONTAINS"
        case eq = "EQ"
        case ge = "GE"
        case gt = "GT"
        case `in` = "IN"
        case le = "LE"
        case lt = "LT"
        case ne = "NE"
        case notContains = "NOT_CONTAINS"
        case notNull = "NOT_NULL"
        case null = "NULL"
        public var description: String { return self.rawValue }
    }

    public enum ConditionalOperator: String, CustomStringConvertible, Codable {
        case and = "AND"
        case or = "OR"
        public var description: String { return self.rawValue }
    }

    public enum ContinuousBackupsStatus: String, CustomStringConvertible, Codable {
        case disabled = "DISABLED"
        case enabled = "ENABLED"
        public var description: String { return self.rawValue }
    }

    public enum ContributorInsightsAction: String, CustomStringConvertible, Codable {
        case disable = "DISABLE"
        case enable = "ENABLE"
        public var description: String { return self.rawValue }
    }

    public enum ContributorInsightsStatus: String, CustomStringConvertible, Codable {
        case disabled = "DISABLED"
        case disabling = "DISABLING"
        case enabled = "ENABLED"
        case enabling = "ENABLING"
        case failed = "FAILED"
        public var description: String { return self.rawValue }
    }

    public enum DestinationStatus: String, CustomStringConvertible, Codable {
        case active = "ACTIVE"
        case disabled = "DISABLED"
        case disabling = "DISABLING"
        case enableFailed = "ENABLE_FAILED"
        case enabling = "ENABLING"
        public var description: String { return self.rawValue }
    }

    public enum ExportFormat: String, CustomStringConvertible, Codable {
        case dynamodbJson = "DYNAMODB_JSON"
        case ion = "ION"
        public var description: String { return self.rawValue }
    }

    public enum ExportStatus: String, CustomStringConvertible, Codable {
        case completed = "COMPLETED"
        case failed = "FAILED"
        case inProgress = "IN_PROGRESS"
        public var description: String { return self.rawValue }
    }

    public enum GlobalTableStatus: String, CustomStringConvertible, Codable {
        case active = "ACTIVE"
        case creating = "CREATING"
        case deleting = "DELETING"
        case updating = "UPDATING"
        public var description: String { return self.rawValue }
    }

    public enum IndexStatus: String, CustomStringConvertible, Codable {
        case active = "ACTIVE"
        case creating = "CREATING"
        case deleting = "DELETING"
        case updating = "UPDATING"
        public var description: String { return self.rawValue }
    }

    public enum KeyType: String, CustomStringConvertible, Codable {
        case hash = "HASH"
        case range = "RANGE"
        public var description: String { return self.rawValue }
    }

    public enum PointInTimeRecoveryStatus: String, CustomStringConvertible, Codable {
        case disabled = "DISABLED"
        case enabled = "ENABLED"
        public var description: String { return self.rawValue }
    }

    public enum ProjectionType: String, CustomStringConvertible, Codable {
        case all = "ALL"
        case include = "INCLUDE"
        case keysOnly = "KEYS_ONLY"
        public var description: String { return self.rawValue }
    }

    public enum ReplicaStatus: String, CustomStringConvertible, Codable {
        case active = "ACTIVE"
        case creating = "CREATING"
        case creationFailed = "CREATION_FAILED"
        case deleting = "DELETING"
        case inaccessibleEncryptionCredentials = "INACCESSIBLE_ENCRYPTION_CREDENTIALS"
        case regionDisabled = "REGION_DISABLED"
        case updating = "UPDATING"
        public var description: String { return self.rawValue }
    }

    public enum ReturnConsumedCapacity: String, CustomStringConvertible, Codable {
        case indexes = "INDEXES"
        case none = "NONE"
        case total = "TOTAL"
        public var description: String { return self.rawValue }
    }

    public enum ReturnItemCollectionMetrics: String, CustomStringConvertible, Codable {
        case none = "NONE"
        case size = "SIZE"
        public var description: String { return self.rawValue }
    }

    public enum ReturnValue: String, CustomStringConvertible, Codable {
        case allNew = "ALL_NEW"
        case allOld = "ALL_OLD"
        case none = "NONE"
        case updatedNew = "UPDATED_NEW"
        case updatedOld = "UPDATED_OLD"
        public var description: String { return self.rawValue }
    }

    public enum ReturnValuesOnConditionCheckFailure: String, CustomStringConvertible, Codable {
        case allOld = "ALL_OLD"
        case none = "NONE"
        public var description: String { return self.rawValue }
    }

    public enum S3SseAlgorithm: String, CustomStringConvertible, Codable {
        case aes256 = "AES256"
        case kms = "KMS"
        public var description: String { return self.rawValue }
    }

    public enum SSEStatus: String, CustomStringConvertible, Codable {
        case disabled = "DISABLED"
        case disabling = "DISABLING"
        case enabled = "ENABLED"
        case enabling = "ENABLING"
        case updating = "UPDATING"
        public var description: String { return self.rawValue }
    }

    public enum SSEType: String, CustomStringConvertible, Codable {
        case aes256 = "AES256"
        case kms = "KMS"
        public var description: String { return self.rawValue }
    }

    public enum ScalarAttributeType: String, CustomStringConvertible, Codable {
        case b = "B"
        case n = "N"
        case s = "S"
        public var description: String { return self.rawValue }
    }

    public enum Select: String, CustomStringConvertible, Codable {
        case allAttributes = "ALL_ATTRIBUTES"
        case allProjectedAttributes = "ALL_PROJECTED_ATTRIBUTES"
        case count = "COUNT"
        case specificAttributes = "SPECIFIC_ATTRIBUTES"
        public var description: String { return self.rawValue }
    }

    public enum StreamViewType: String, CustomStringConvertible, Codable {
        case keysOnly = "KEYS_ONLY"
        case newAndOldImages = "NEW_AND_OLD_IMAGES"
        case newImage = "NEW_IMAGE"
        case oldImage = "OLD_IMAGE"
        public var description: String { return self.rawValue }
    }

    public enum TableStatus: String, CustomStringConvertible, Codable {
        case active = "ACTIVE"
        case archived = "ARCHIVED"
        case archiving = "ARCHIVING"
        case creating = "CREATING"
        case deleting = "DELETING"
        case inaccessibleEncryptionCredentials = "INACCESSIBLE_ENCRYPTION_CREDENTIALS"
        case updating = "UPDATING"
        public var description: String { return self.rawValue }
    }

    public enum TimeToLiveStatus: String, CustomStringConvertible, Codable {
        case disabled = "DISABLED"
        case disabling = "DISABLING"
        case enabled = "ENABLED"
        case enabling = "ENABLING"
        public var description: String { return self.rawValue }
    }

    public enum AttributeValue: AWSEncodableShape & AWSDecodableShape {
        /// An attribute of type Binary.  For example:  "B": "dGhpcyB0ZXh0IGlzIGJhc2U2NC1lbmNvZGVk"
        case b(Data)
        /// An attribute of type Boolean.  For example:  "BOOL": true
        case bool(Bool)
        /// An attribute of type Binary Set.  For example:  "BS": ["U3Vubnk=", "UmFpbnk=", "U25vd3k="]
        case bs([Data])
        /// An attribute of type List.  For example:  "L": [ {"S": "Cookies"} , {"S": "Coffee"}, {"N", "3.14159"}]
        case l([AttributeValue])
        /// An attribute of type Map.  For example:  "M": {"Name": {"S": "Joe"}, "Age": {"N": "35"}}
        case m([String: AttributeValue])
        /// An attribute of type Number.  For example:  "N": "123.45"  Numbers are sent across the network to DynamoDB as strings, to maximize compatibility across languages and libraries. However, DynamoDB treats them as number type attributes for mathematical operations.
        case n(String)
        /// An attribute of type Number Set.  For example:  "NS": ["42.2", "-19", "7.5", "3.14"]  Numbers are sent across the network to DynamoDB as strings, to maximize compatibility across languages and libraries. However, DynamoDB treats them as number type attributes for mathematical operations.
        case ns([String])
        /// An attribute of type Null.  For example:  "NULL": true
        case null(Bool)
        /// An attribute of type  String. For example:  "S": "Hello"
        case s(String)
        /// An attribute of type String Set.  For example:  "SS": ["Giraffe", "Hippo" ,"Zebra"]
        case ss([String])

        public init(from decoder: Decoder) throws {
            let container = try decoder.container(keyedBy: CodingKeys.self)
            guard container.allKeys.count == 1, let key = container.allKeys.first else {
                let context = DecodingError.Context(
                    codingPath: container.codingPath,
                    debugDescription: "Expected exactly one key, but got \(container.allKeys.count)"
                )
                throw DecodingError.dataCorrupted(context)
            }
            switch key {
            case .b:
                let value = try container.decode(Data.self, forKey: .b)
                self = .b(value)
            case .bool:
                let value = try container.decode(Bool.self, forKey: .bool)
                self = .bool(value)
            case .bs:
                let value = try container.decode([Data].self, forKey: .bs)
                self = .bs(value)
            case .l:
                let value = try container.decode([AttributeValue].self, forKey: .l)
                self = .l(value)
            case .m:
                let value = try container.decode([String: AttributeValue].self, forKey: .m)
                self = .m(value)
            case .n:
                let value = try container.decode(String.self, forKey: .n)
                self = .n(value)
            case .ns:
                let value = try container.decode([String].self, forKey: .ns)
                self = .ns(value)
            case .null:
                let value = try container.decode(Bool.self, forKey: .null)
                self = .null(value)
            case .s:
                let value = try container.decode(String.self, forKey: .s)
                self = .s(value)
            case .ss:
                let value = try container.decode([String].self, forKey: .ss)
                self = .ss(value)
            }
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.container(keyedBy: CodingKeys.self)
            switch self {
            case .b(let value):
                try container.encode(value, forKey: .b)
            case .bool(let value):
                try container.encode(value, forKey: .bool)
            case .bs(let value):
                try container.encode(value, forKey: .bs)
            case .l(let value):
                try container.encode(value, forKey: .l)
            case .m(let value):
                try container.encode(value, forKey: .m)
            case .n(let value):
                try container.encode(value, forKey: .n)
            case .ns(let value):
                try container.encode(value, forKey: .ns)
            case .null(let value):
                try container.encode(value, forKey: .null)
            case .s(let value):
                try container.encode(value, forKey: .s)
            case .ss(let value):
                try container.encode(value, forKey: .ss)
            }
        }

        public func validate(name: String) throws {
            switch self {
            case .l(let value):
                try value.forEach {
                    try $0.validate(name: "\(name).l[]")
                }
            case .m(let value):
                try value.forEach {
                    try validate($0.key, name: "m.key", parent: name, max: 65535)
                    try $0.value.validate(name: "\(name).m[\"\($0.key)\"]")
                }
            default:
                break
            }
        }

        private enum CodingKeys: String, CodingKey {
            case b = "B"
            case bool = "BOOL"
            case bs = "BS"
            case l = "L"
            case m = "M"
            case n = "N"
            case ns = "NS"
            case null = "NULL"
            case s = "S"
            case ss = "SS"
        }
    }

    public enum TransactWriteItem: AWSEncodableShape {
        /// A request to perform a check item operation.
        case conditionCheck(ConditionCheck)
        /// A request to perform a DeleteItem operation.
        case delete(Delete)
        /// A request to perform a PutItem operation.
        case put(Put)
        /// A request to perform an UpdateItem operation.
        case update(Update)

        public func encode(to encoder: Encoder) throws {
            var container = encoder.container(keyedBy: CodingKeys.self)
            switch self {
            case .conditionCheck(let value):
                try container.encode(value, forKey: .conditionCheck)
            case .delete(let value):
                try container.encode(value, forKey: .delete)
            case .put(let value):
                try container.encode(value, forKey: .put)
            case .update(let value):
                try container.encode(value, forKey: .update)
            }
        }

        public func validate(name: String) throws {
            switch self {
            case .conditionCheck(let value):
                try value.validate(name: "\(name).conditionCheck")
            case .delete(let value):
                try value.validate(name: "\(name).delete")
            case .put(let value):
                try value.validate(name: "\(name).put")
            case .update(let value):
                try value.validate(name: "\(name).update")
            }
        }

        private enum CodingKeys: String, CodingKey {
            case conditionCheck = "ConditionCheck"
            case delete = "Delete"
            case put = "Put"
            case update = "Update"
        }
    }

    // MARK: Shapes

    public struct ArchivalSummary: AWSDecodableShape {
        /// The Amazon Resource Name (ARN) of the backup the table was archived to, when applicable in the archival reason. If you wish to restore this backup to the same table name, you will need to delete the original table.
        public let archivalBackupArn: String?
        /// The date and time when table archival was initiated by DynamoDB, in UNIX epoch time format.
        public let archivalDateTime: Date?
        /// The reason DynamoDB archived the table. Currently, the only possible value is:
        ///     INACCESSIBLE_ENCRYPTION_CREDENTIALS - The table was archived due to the table's AWS KMS key being inaccessible for more than seven days. An On-Demand backup was created at the archival time.
        public let archivalReason: String?

        public init(archivalBackupArn: String? = nil, archivalDateTime: Date? = nil, archivalReason: String? = nil) {
            self.archivalBackupArn = archivalBackupArn
            self.archivalDateTime = archivalDateTime
            self.archivalReason = archivalReason
        }

        private enum CodingKeys: String, CodingKey {
            case archivalBackupArn = "ArchivalBackupArn"
            case archivalDateTime = "ArchivalDateTime"
            case archivalReason = "ArchivalReason"
        }
    }

    public struct AttributeDefinition: AWSEncodableShape & AWSDecodableShape {
        /// A name for the attribute.
        public let attributeName: String
        /// The data type for the attribute, where:    S - the attribute is of type String    N - the attribute is of type Number    B - the attribute is of type Binary
        public let attributeType: ScalarAttributeType

        public init(attributeName: String, attributeType: ScalarAttributeType) {
            self.attributeName = attributeName
            self.attributeType = attributeType
        }

        public func validate(name: String) throws {
            try self.validate(self.attributeName, name: "attributeName", parent: name, max: 255)
            try self.validate(self.attributeName, name: "attributeName", parent: name, min: 1)
        }

        private enum CodingKeys: String, CodingKey {
            case attributeName = "AttributeName"
            case attributeType = "AttributeType"
        }
    }

    public struct AttributeValueUpdate: AWSEncodableShape {
        /// Specifies how to perform the update. Valid values are PUT (default), DELETE, and ADD. The behavior depends on whether the specified primary key already exists in the table.
        ///   If an item with the specified Key is found in the table:
        ///     PUT - Adds the specified attribute to the item. If the attribute already exists, it is replaced by the new value.     DELETE - If no value is specified, the attribute and its value are removed from the item. The data type of the specified value must match the existing value's data type. If a set of values is specified, then those values are subtracted from the old set. For example, if the attribute value was the set [a,b,c] and the DELETE action specified [a,c], then the final attribute value would be [b]. Specifying an empty set is an error.    ADD - If the attribute does not already exist, then the attribute and its values are added to the item. If the attribute does exist, then the behavior of ADD depends on the data type of the attribute:   If the existing attribute is a number, and if Value is also a number, then the Value is mathematically added to the existing attribute. If Value is a negative number, then it is subtracted from the existing attribute.  If you use ADD to increment or decrement a number value for an item that doesn't exist before the update, DynamoDB uses 0 as the initial value. In addition, if you use ADD to update an existing item, and intend to increment or decrement an attribute value which does not yet exist, DynamoDB uses 0 as the initial value. For example, suppose that the item you want to update does not yet have an attribute named itemcount, but you decide to ADD the number 3 to this attribute anyway, even though it currently does not exist. DynamoDB will create the itemcount attribute, set its initial value to 0, and finally add 3 to it. The result will be a new itemcount attribute in the item, with a value of 3.    If the existing data type is a set, and if the Value is also a set, then the Value is added to the existing set. (This is a set operation, not mathematical addition.) For example, if the attribute value was the set [1,2], and the ADD action specified [3], then the final attribute value would be [1,2,3]. An error occurs if an Add action is specified for a set attribute and the attribute type specified does not match the existing set type.  Both sets must have the same primitive data type. For example, if the existing data type is a set of strings, the Value must also be a set of strings. The same holds true for number sets and binary sets.   This action is only valid for an existing attribute whose data type is number or is a set. Do not use ADD for any other data types.
        ///   If no item with the specified Key is found:
        ///     PUT - DynamoDB creates a new item with the specified primary key, and then adds the attribute.     DELETE - Nothing happens; there is no attribute to delete.    ADD - DynamoDB creates an item with the supplied primary key and number (or set of numbers) for the attribute value. The only data types allowed are number and number set; no other data types can be specified.
        public let action: AttributeAction?
        /// Represents the data for an attribute. Each attribute value is described as a name-value pair. The name is the data type, and the value is the data itself. For more information, see Data Types in the Amazon DynamoDB Developer Guide.
        public let value: AttributeValue?

        public init(action: AttributeAction? = nil, value: AttributeValue? = nil) {
            self.action = action
            self.value = value
        }

        public func validate(name: String) throws {
            try self.value?.validate(name: "\(name).value")
        }

        private enum CodingKeys: String, CodingKey {
            case action = "Action"
            case value = "Value"
        }
    }

    public struct AutoScalingPolicyDescription: AWSDecodableShape {
        /// The name of the scaling policy.
        public let policyName: String?
        /// Represents a target tracking scaling policy configuration.
        public let targetTrackingScalingPolicyConfiguration: AutoScalingTargetTrackingScalingPolicyConfigurationDescription?

        public init(policyName: String? = nil, targetTrackingScalingPolicyConfiguration: AutoScalingTargetTrackingScalingPolicyConfigurationDescription? = nil) {
            self.policyName = policyName
            self.targetTrackingScalingPolicyConfiguration = targetTrackingScalingPolicyConfiguration
        }

        private enum CodingKeys: String, CodingKey {
            case policyName = "PolicyName"
            case targetTrackingScalingPolicyConfiguration = "TargetTrackingScalingPolicyConfiguration"
        }
    }

    public struct AutoScalingPolicyUpdate: AWSEncodableShape {
        /// The name of the scaling policy.
        public let policyName: String?
        /// Represents a target tracking scaling policy configuration.
        public let targetTrackingScalingPolicyConfiguration: AutoScalingTargetTrackingScalingPolicyConfigurationUpdate

        public init(policyName: String? = nil, targetTrackingScalingPolicyConfiguration: AutoScalingTargetTrackingScalingPolicyConfigurationUpdate) {
            self.policyName = policyName
            self.targetTrackingScalingPolicyConfiguration = targetTrackingScalingPolicyConfiguration
        }

        public func validate(name: String) throws {
            try self.validate(self.policyName, name: "policyName", parent: name, max: 256)
            try self.validate(self.policyName, name: "policyName", parent: name, min: 1)
            try self.validate(self.policyName, name: "policyName", parent: name, pattern: "^\\p{Print}+$")
        }

        private enum CodingKeys: String, CodingKey {
            case policyName = "PolicyName"
            case targetTrackingScalingPolicyConfiguration = "TargetTrackingScalingPolicyConfiguration"
        }
    }

    public struct AutoScalingSettingsDescription: AWSDecodableShape {
        /// Disabled auto scaling for this global table or global secondary index.
        public let autoScalingDisabled: Bool?
        /// Role ARN used for configuring the auto scaling policy.
        public let autoScalingRoleArn: String?
        /// The maximum capacity units that a global table or global secondary index should be scaled up to.
        public let maximumUnits: Int64?
        /// The minimum capacity units that a global table or global secondary index should be scaled down to.
        public let minimumUnits: Int64?
        /// Information about the scaling policies.
        public let scalingPolicies: [AutoScalingPolicyDescription]?

        public init(autoScalingDisabled: Bool? = nil, autoScalingRoleArn: String? = nil, maximumUnits: Int64? = nil, minimumUnits: Int64? = nil, scalingPolicies: [AutoScalingPolicyDescription]? = nil) {
            self.autoScalingDisabled = autoScalingDisabled
            self.autoScalingRoleArn = autoScalingRoleArn
            self.maximumUnits = maximumUnits
            self.minimumUnits = minimumUnits
            self.scalingPolicies = scalingPolicies
        }

        private enum CodingKeys: String, CodingKey {
            case autoScalingDisabled = "AutoScalingDisabled"
            case autoScalingRoleArn = "AutoScalingRoleArn"
            case maximumUnits = "MaximumUnits"
            case minimumUnits = "MinimumUnits"
            case scalingPolicies = "ScalingPolicies"
        }
    }

    public struct AutoScalingSettingsUpdate: AWSEncodableShape {
        /// Disabled auto scaling for this global table or global secondary index.
        public let autoScalingDisabled: Bool?
        /// Role ARN used for configuring auto scaling policy.
        public let autoScalingRoleArn: String?
        /// The maximum capacity units that a global table or global secondary index should be scaled up to.
        public let maximumUnits: Int64?
        /// The minimum capacity units that a global table or global secondary index should be scaled down to.
        public let minimumUnits: Int64?
        /// The scaling policy to apply for scaling target global table or global secondary index capacity units.
        public let scalingPolicyUpdate: AutoScalingPolicyUpdate?

        public init(autoScalingDisabled: Bool? = nil, autoScalingRoleArn: String? = nil, maximumUnits: Int64? = nil, minimumUnits: Int64? = nil, scalingPolicyUpdate: AutoScalingPolicyUpdate? = nil) {
            self.autoScalingDisabled = autoScalingDisabled
            self.autoScalingRoleArn = autoScalingRoleArn
            self.maximumUnits = maximumUnits
            self.minimumUnits = minimumUnits
            self.scalingPolicyUpdate = scalingPolicyUpdate
        }

        public func validate(name: String) throws {
            try self.validate(self.autoScalingRoleArn, name: "autoScalingRoleArn", parent: name, max: 1600)
            try self.validate(self.autoScalingRoleArn, name: "autoScalingRoleArn", parent: name, min: 1)
            try self.validate(self.autoScalingRoleArn, name: "autoScalingRoleArn", parent: name, pattern: "^[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\r\\n\\t]*$")
            try self.validate(self.maximumUnits, name: "maximumUnits", parent: name, min: 1)
            try self.validate(self.minimumUnits, name: "minimumUnits", parent: name, min: 1)
            try self.scalingPolicyUpdate?.validate(name: "\(name).scalingPolicyUpdate")
        }

        private enum CodingKeys: String, CodingKey {
            case autoScalingDisabled = "AutoScalingDisabled"
            case autoScalingRoleArn = "AutoScalingRoleArn"
            case maximumUnits = "MaximumUnits"
            case minimumUnits = "MinimumUnits"
            case scalingPolicyUpdate = "ScalingPolicyUpdate"
        }
    }

    public struct AutoScalingTargetTrackingScalingPolicyConfigurationDescription: AWSDecodableShape {
        /// Indicates whether scale in by the target tracking policy is disabled. If the value is true, scale in is disabled and the target tracking policy won't remove capacity from the scalable resource. Otherwise, scale in is enabled and the target tracking policy can remove capacity from the scalable resource. The default value is false.
        public let disableScaleIn: Bool?
        /// The amount of time, in seconds, after a scale in activity completes before another scale in activity can start. The cooldown period is used to block subsequent scale in requests until it has expired. You should scale in conservatively to protect your application's availability. However, if another alarm triggers a scale out policy during the cooldown period after a scale-in, application auto scaling scales out your scalable target immediately.
        public let scaleInCooldown: Int?
        /// The amount of time, in seconds, after a scale out activity completes before another scale out activity can start. While the cooldown period is in effect, the capacity that has been added by the previous scale out event that initiated the cooldown is calculated as part of the desired capacity for the next scale out. You should continuously (but not excessively) scale out.
        public let scaleOutCooldown: Int?
        /// The target value for the metric. The range is 8.515920e-109 to 1.174271e+108 (Base 10) or 2e-360 to 2e360 (Base 2).
        public let targetValue: Double

        public init(disableScaleIn: Bool? = nil, scaleInCooldown: Int? = nil, scaleOutCooldown: Int? = nil, targetValue: Double) {
            self.disableScaleIn = disableScaleIn
            self.scaleInCooldown = scaleInCooldown
            self.scaleOutCooldown = scaleOutCooldown
            self.targetValue = targetValue
        }

        private enum CodingKeys: String, CodingKey {
            case disableScaleIn = "DisableScaleIn"
            case scaleInCooldown = "ScaleInCooldown"
            case scaleOutCooldown = "ScaleOutCooldown"
            case targetValue = "TargetValue"
        }
    }

    public struct AutoScalingTargetTrackingScalingPolicyConfigurationUpdate: AWSEncodableShape {
        /// Indicates whether scale in by the target tracking policy is disabled. If the value is true, scale in is disabled and the target tracking policy won't remove capacity from the scalable resource. Otherwise, scale in is enabled and the target tracking policy can remove capacity from the scalable resource. The default value is false.
        public let disableScaleIn: Bool?
        /// The amount of time, in seconds, after a scale in activity completes before another scale in activity can start. The cooldown period is used to block subsequent scale in requests until it has expired. You should scale in conservatively to protect your application's availability. However, if another alarm triggers a scale out policy during the cooldown period after a scale-in, application auto scaling scales out your scalable target immediately.
        public let scaleInCooldown: Int?
        /// The amount of time, in seconds, after a scale out activity completes before another scale out activity can start. While the cooldown period is in effect, the capacity that has been added by the previous scale out event that initiated the cooldown is calculated as part of the desired capacity for the next scale out. You should continuously (but not excessively) scale out.
        public let scaleOutCooldown: Int?
        /// The target value for the metric. The range is 8.515920e-109 to 1.174271e+108 (Base 10) or 2e-360 to 2e360 (Base 2).
        public let targetValue: Double

        public init(disableScaleIn: Bool? = nil, scaleInCooldown: Int? = nil, scaleOutCooldown: Int? = nil, targetValue: Double) {
            self.disableScaleIn = disableScaleIn
            self.scaleInCooldown = scaleInCooldown
            self.scaleOutCooldown = scaleOutCooldown
            self.targetValue = targetValue
        }

        private enum CodingKeys: String, CodingKey {
            case disableScaleIn = "DisableScaleIn"
            case scaleInCooldown = "ScaleInCooldown"
            case scaleOutCooldown = "ScaleOutCooldown"
            case targetValue = "TargetValue"
        }
    }

    public struct BackupDescription: AWSDecodableShape {
        /// Contains the details of the backup created for the table.
        public let backupDetails: BackupDetails?
        /// Contains the details of the table when the backup was created.
        public let sourceTableDetails: SourceTableDetails?
        /// Contains the details of the features enabled on the table when the backup was created. For example, LSIs, GSIs, streams, TTL.
        public let sourceTableFeatureDetails: SourceTableFeatureDetails?

        public init(backupDetails: BackupDetails? = nil, sourceTableDetails: SourceTableDetails? = nil, sourceTableFeatureDetails: SourceTableFeatureDetails? = nil) {
            self.backupDetails = backupDetails
            self.sourceTableDetails = sourceTableDetails
            self.sourceTableFeatureDetails = sourceTableFeatureDetails
        }

        private enum CodingKeys: String, CodingKey {
            case backupDetails = "BackupDetails"
            case sourceTableDetails = "SourceTableDetails"
            case sourceTableFeatureDetails = "SourceTableFeatureDetails"
        }
    }

    public struct BackupDetails: AWSDecodableShape {
        /// ARN associated with the backup.
        public let backupArn: String
        /// Time at which the backup was created. This is the request time of the backup.
        public let backupCreationDateTime: Date
        /// Time at which the automatic on-demand backup created by DynamoDB will expire. This SYSTEM on-demand backup expires automatically 35 days after its creation.
        public let backupExpiryDateTime: Date?
        /// Name of the requested backup.
        public let backupName: String
        /// Size of the backup in bytes.
        public let backupSizeBytes: Int64?
        /// Backup can be in one of the following states: CREATING, ACTIVE, DELETED.
        public let backupStatus: BackupStatus
        /// BackupType:    USER - You create and manage these using the on-demand backup feature.    SYSTEM - If you delete a table with point-in-time recovery enabled, a SYSTEM backup is automatically created and is retained for 35 days (at no additional cost). System backups allow you to restore the deleted
        /// 		table to the state it was in just before the point of deletion.
        /// 		    AWS_BACKUP - On-demand backup created by you from AWS Backup service.
        public let backupType: BackupType

        public init(backupArn: String, backupCreationDateTime: Date, backupExpiryDateTime: Date? = nil, backupName: String, backupSizeBytes: Int64? = nil, backupStatus: BackupStatus, backupType: BackupType) {
            self.backupArn = backupArn
            self.backupCreationDateTime = backupCreationDateTime
            self.backupExpiryDateTime = backupExpiryDateTime
            self.backupName = backupName
            self.backupSizeBytes = backupSizeBytes
            self.backupStatus = backupStatus
            self.backupType = backupType
        }

        private enum CodingKeys: String, CodingKey {
            case backupArn = "BackupArn"
            case backupCreationDateTime = "BackupCreationDateTime"
            case backupExpiryDateTime = "BackupExpiryDateTime"
            case backupName = "BackupName"
            case backupSizeBytes = "BackupSizeBytes"
            case backupStatus = "BackupStatus"
            case backupType = "BackupType"
        }
    }

    public struct BackupSummary: AWSDecodableShape {
        /// ARN associated with the backup.
        public let backupArn: String?
        /// Time at which the backup was created.
        public let backupCreationDateTime: Date?
        /// Time at which the automatic on-demand backup created by DynamoDB will expire. This SYSTEM on-demand backup expires automatically 35 days after its creation.
        public let backupExpiryDateTime: Date?
        /// Name of the specified backup.
        public let backupName: String?
        /// Size of the backup in bytes.
        public let backupSizeBytes: Int64?
        /// Backup can be in one of the following states: CREATING, ACTIVE, DELETED.
        public let backupStatus: BackupStatus?
        /// BackupType:    USER - You create and manage these using the on-demand backup feature.    SYSTEM - If you delete a table with point-in-time recovery enabled, a SYSTEM backup is automatically created and is retained for 35 days (at no additional cost). System backups allow you to restore the deleted
        /// 		table to the state it was in just before the point of deletion.
        /// 		    AWS_BACKUP - On-demand backup created by you from AWS Backup service.
        public let backupType: BackupType?
        /// ARN associated with the table.
        public let tableArn: String?
        /// Unique identifier for the table.
        public let tableId: String?
        /// Name of the table.
        public let tableName: String?

        public init(backupArn: String? = nil, backupCreationDateTime: Date? = nil, backupExpiryDateTime: Date? = nil, backupName: String? = nil, backupSizeBytes: Int64? = nil, backupStatus: BackupStatus? = nil, backupType: BackupType? = nil, tableArn: String? = nil, tableId: String? = nil, tableName: String? = nil) {
            self.backupArn = backupArn
            self.backupCreationDateTime = backupCreationDateTime
            self.backupExpiryDateTime = backupExpiryDateTime
            self.backupName = backupName
            self.backupSizeBytes = backupSizeBytes
            self.backupStatus = backupStatus
            self.backupType = backupType
            self.tableArn = tableArn
            self.tableId = tableId
            self.tableName = tableName
        }

        private enum CodingKeys: String, CodingKey {
            case backupArn = "BackupArn"
            case backupCreationDateTime = "BackupCreationDateTime"
            case backupExpiryDateTime = "BackupExpiryDateTime"
            case backupName = "BackupName"
            case backupSizeBytes = "BackupSizeBytes"
            case backupStatus = "BackupStatus"
            case backupType = "BackupType"
            case tableArn = "TableArn"
            case tableId = "TableId"
            case tableName = "TableName"
        }
    }

    public struct BatchExecuteStatementInput: AWSEncodableShape {
        /// The list of PartiQL statements representing the batch to run.
        public let statements: [BatchStatementRequest]

        public init(statements: [BatchStatementRequest]) {
            self.statements = statements
        }

        public func validate(name: String) throws {
            try self.statements.forEach {
                try $0.validate(name: "\(name).statements[]")
            }
            try self.validate(self.statements, name: "statements", parent: name, max: 25)
            try self.validate(self.statements, name: "statements", parent: name, min: 1)
        }

        private enum CodingKeys: String, CodingKey {
            case statements = "Statements"
        }
    }

    public struct BatchExecuteStatementOutput: AWSDecodableShape {
        /// The response to each PartiQL statement in the batch.
        public let responses: [BatchStatementResponse]?

        public init(responses: [BatchStatementResponse]? = nil) {
            self.responses = responses
        }

        private enum CodingKeys: String, CodingKey {
            case responses = "Responses"
        }
    }

    public struct BatchGetItemInput: AWSEncodableShape {
        /// A map of one or more table names and, for each table, a map that describes one or more items to retrieve from that table. Each table name can be used only once per BatchGetItem request. Each element in the map of items to retrieve consists of the following:    ConsistentRead - If true, a strongly consistent read is used; if false (the default), an eventually consistent read is used.    ExpressionAttributeNames - One or more substitution tokens for attribute names in the ProjectionExpression parameter. The following are some use cases for using ExpressionAttributeNames:   To access an attribute whose name conflicts with a DynamoDB reserved word.   To create a placeholder for repeating occurrences of an attribute name in an expression.   To prevent special characters in an attribute name from being misinterpreted in an expression.   Use the # character in an expression to dereference an attribute name. For example, consider the following attribute name:    Percentile    The name of this attribute conflicts with a reserved word, so it cannot be used directly in an expression. (For the complete list of reserved words, see Reserved Words in the Amazon DynamoDB Developer Guide). To work around this, you could specify the following for ExpressionAttributeNames:    {"#P":"Percentile"}    You could then use this substitution in an expression, as in this example:    #P = :val     Tokens that begin with the : character are expression attribute values, which are placeholders for the actual value at runtime.  For more information about expression attribute names, see Accessing Item Attributes in the Amazon DynamoDB Developer Guide.    Keys - An array of primary key attribute values that define specific items in the table. For each primary key, you must provide all of the key attributes. For example, with a simple primary key, you only need to provide the partition key value. For a composite key, you must provide both the partition key value and the sort key value.    ProjectionExpression - A string that identifies one or more attributes to retrieve from the table. These attributes can include scalars, sets, or elements of a JSON document. The attributes in the expression must be separated by commas. If no attribute names are specified, then all attributes are returned. If any of the requested attributes are not found, they do not appear in the result. For more information, see Accessing Item Attributes in the Amazon DynamoDB Developer Guide.    AttributesToGet - This is a legacy parameter.  Use ProjectionExpression instead.  For more information, see AttributesToGet in the Amazon DynamoDB Developer Guide.
        ///
        ///
        public let requestItems: [String: KeysAndAttributes]
        public let returnConsumedCapacity: ReturnConsumedCapacity?

        public init(requestItems: [String: KeysAndAttributes], returnConsumedCapacity: ReturnConsumedCapacity? = nil) {
            self.requestItems = requestItems
            self.returnConsumedCapacity = returnConsumedCapacity
        }

        public func validate(name: String) throws {
            try self.requestItems.forEach {
                try validate($0.key, name: "requestItems.key", parent: name, max: 255)
                try validate($0.key, name: "requestItems.key", parent: name, min: 3)
                try validate($0.key, name: "requestItems.key", parent: name, pattern: "^[a-zA-Z0-9_.-]+$")
                try $0.value.validate(name: "\(name).requestItems[\"\($0.key)\"]")
            }
            try self.validate(self.requestItems, name: "requestItems", parent: name, max: 100)
            try self.validate(self.requestItems, name: "requestItems", parent: name, min: 1)
        }

        private enum CodingKeys: String, CodingKey {
            case requestItems = "RequestItems"
            case returnConsumedCapacity = "ReturnConsumedCapacity"
        }
    }

    public struct BatchGetItemOutput: AWSDecodableShape {
        /// The read capacity units consumed by the entire BatchGetItem operation. Each element consists of:    TableName - The table that consumed the provisioned throughput.    CapacityUnits - The total number of capacity units consumed.
        public let consumedCapacity: [ConsumedCapacity]?
        /// A map of table name to a list of items. Each object in Responses consists of a table name, along with a map of attribute data consisting of the data type and attribute value.
        public let responses: [String: [[String: AttributeValue]]]?
        /// A map of tables and their respective keys that were not processed with the current response. The UnprocessedKeys value is in the same form as RequestItems, so the value can be provided directly to a subsequent BatchGetItem operation. For more information, see RequestItems in the Request Parameters section. Each element consists of:    Keys - An array of primary key attribute values that define specific items in the table.    ProjectionExpression - One or more attributes to be retrieved from the table or index. By default, all attributes are returned. If a requested attribute is not found, it does not appear in the result.    ConsistentRead - The consistency of a read operation. If set to true, then a strongly consistent read is used; otherwise, an eventually consistent read is used.   If there are no unprocessed keys remaining, the response contains an empty UnprocessedKeys map.
        public let unprocessedKeys: [String: KeysAndAttributes]?

        public init(consumedCapacity: [ConsumedCapacity]? = nil, responses: [String: [[String: AttributeValue]]]? = nil, unprocessedKeys: [String: KeysAndAttributes]? = nil) {
            self.consumedCapacity = consumedCapacity
            self.responses = responses
            self.unprocessedKeys = unprocessedKeys
        }

        private enum CodingKeys: String, CodingKey {
            case consumedCapacity = "ConsumedCapacity"
            case responses = "Responses"
            case unprocessedKeys = "UnprocessedKeys"
        }
    }

    public struct BatchStatementError: AWSDecodableShape {
        /// The error code associated with the failed PartiQL batch statement.
        public let code: BatchStatementErrorCodeEnum?
        /// The error message associated with the PartiQL batch resposne.
        public let message: String?

        public init(code: BatchStatementErrorCodeEnum? = nil, message: String? = nil) {
            self.code = code
            self.message = message
        }

        private enum CodingKeys: String, CodingKey {
            case code = "Code"
            case message = "Message"
        }
    }

    public struct BatchStatementRequest: AWSEncodableShape {
        /// The read consistency of the PartiQL batch request.
        public let consistentRead: Bool?
        /// The parameters associated with a PartiQL statement in the batch request.
        public let parameters: [AttributeValue]?
        /// A valid PartiQL statement.
        public let statement: String

        public init(consistentRead: Bool? = nil, parameters: [AttributeValue]? = nil, statement: String) {
            self.consistentRead = consistentRead
            self.parameters = parameters
            self.statement = statement
        }

        public func validate(name: String) throws {
            try self.parameters?.forEach {
                try $0.validate(name: "\(name).parameters[]")
            }
            try self.validate(self.parameters, name: "parameters", parent: name, min: 1)
            try self.validate(self.statement, name: "statement", parent: name, max: 8192)
            try self.validate(self.statement, name: "statement", parent: name, min: 1)
        }

        private enum CodingKeys: String, CodingKey {
            case consistentRead = "ConsistentRead"
            case parameters = "Parameters"
            case statement = "Statement"
        }
    }

    public struct BatchStatementResponse: AWSDecodableShape {
        /// The error associated with a failed PartiQL batch statement.
        public let error: BatchStatementError?
        /// A DynamoDB item associated with a BatchStatementResponse
        public let item: [String: AttributeValue]?
        /// The table name associated with a failed PartiQL batch statement.
        public let tableName: String?

        public init(error: BatchStatementError? = nil, item: [String: AttributeValue]? = nil, tableName: String? = nil) {
            self.error = error
            self.item = item
            self.tableName = tableName
        }

        private enum CodingKeys: String, CodingKey {
            case error = "Error"
            case item = "Item"
            case tableName = "TableName"
        }
    }

    public struct BatchWriteItemInput: AWSEncodableShape {
        /// A map of one or more table names and, for each table, a list of operations to be performed (DeleteRequest or PutRequest). Each element in the map consists of the following:    DeleteRequest - Perform a DeleteItem operation on the specified item. The item to be deleted is identified by a Key subelement:    Key - A map of primary key attribute values that uniquely identify the item. Each entry in this map consists of an attribute name and an attribute value. For each primary key, you must provide all of the key attributes. For example, with a simple primary key, you only need to provide a value for the partition key. For a composite primary key, you must provide values for both the partition key and the sort key.      PutRequest - Perform a PutItem operation on the specified item. The item to be put is identified by an Item subelement:    Item - A map of attributes and their values. Each entry in this map consists of an attribute name and an attribute value. Attribute values must not be null; string and binary type attributes must have lengths greater than zero; and set type attributes must not be empty. Requests that contain empty values are rejected with a ValidationException exception. If you specify any attributes that are part of an index key, then the data types for those attributes must match those of the schema in the table's attribute definition.
        public let requestItems: [String: [WriteRequest]]
        public let returnConsumedCapacity: ReturnConsumedCapacity?
        /// Determines whether item collection metrics are returned.  If set to SIZE, the response includes statistics about item collections, if any, that were modified during the operation are returned in the response. If set to NONE (the default), no statistics are returned.
        public let returnItemCollectionMetrics: ReturnItemCollectionMetrics?

        public init(requestItems: [String: [WriteRequest]], returnConsumedCapacity: ReturnConsumedCapacity? = nil, returnItemCollectionMetrics: ReturnItemCollectionMetrics? = nil) {
            self.requestItems = requestItems
            self.returnConsumedCapacity = returnConsumedCapacity
            self.returnItemCollectionMetrics = returnItemCollectionMetrics
        }

        public func validate(name: String) throws {
            try self.requestItems.forEach {
                try validate($0.key, name: "requestItems.key", parent: name, max: 255)
                try validate($0.key, name: "requestItems.key", parent: name, min: 3)
                try validate($0.key, name: "requestItems.key", parent: name, pattern: "^[a-zA-Z0-9_.-]+$")
                try validate($0.value, name: "requestItems[\"\($0.key)\"]", parent: name, max: 25)
                try validate($0.value, name: "requestItems[\"\($0.key)\"]", parent: name, min: 1)
            }
            try self.validate(self.requestItems, name: "requestItems", parent: name, max: 25)
            try self.validate(self.requestItems, name: "requestItems", parent: name, min: 1)
        }

        private enum CodingKeys: String, CodingKey {
            case requestItems = "RequestItems"
            case returnConsumedCapacity = "ReturnConsumedCapacity"
            case returnItemCollectionMetrics = "ReturnItemCollectionMetrics"
        }
    }

    public struct BatchWriteItemOutput: AWSDecodableShape {
        /// The capacity units consumed by the entire BatchWriteItem operation. Each element consists of:    TableName - The table that consumed the provisioned throughput.    CapacityUnits - The total number of capacity units consumed.
        public let consumedCapacity: [ConsumedCapacity]?
        /// A list of tables that were processed by BatchWriteItem and, for each table, information about any item collections that were affected by individual DeleteItem or PutItem operations. Each entry consists of the following subelements:    ItemCollectionKey - The partition key value of the item collection. This is the same as the partition key value of the item.    SizeEstimateRangeGB - An estimate of item collection size, expressed in GB. This is a two-element array containing a lower bound and an upper bound for the estimate. The estimate includes the size of all the items in the table, plus the size of all attributes projected into all of the local secondary indexes on the table. Use this estimate to measure whether a local secondary index is approaching its size limit. The estimate is subject to change over time; therefore, do not rely on the precision or accuracy of the estimate.
        public let itemCollectionMetrics: [String: [ItemCollectionMetrics]]?
        /// A map of tables and requests against those tables that were not processed. The UnprocessedItems value is in the same form as RequestItems, so you can provide this value directly to a subsequent BatchGetItem operation. For more information, see RequestItems in the Request Parameters section. Each UnprocessedItems entry consists of a table name and, for that table, a list of operations to perform (DeleteRequest or PutRequest).    DeleteRequest - Perform a DeleteItem operation on the specified item. The item to be deleted is identified by a Key subelement:    Key - A map of primary key attribute values that uniquely identify the item. Each entry in this map consists of an attribute name and an attribute value.      PutRequest - Perform a PutItem operation on the specified item. The item to be put is identified by an Item subelement:    Item - A map of attributes and their values. Each entry in this map consists of an attribute name and an attribute value. Attribute values must not be null; string and binary type attributes must have lengths greater than zero; and set type attributes must not be empty. Requests that contain empty values will be rejected with a ValidationException exception. If you specify any attributes that are part of an index key, then the data types for those attributes must match those of the schema in the table's attribute definition.     If there are no unprocessed items remaining, the response contains an empty UnprocessedItems map.
        public let unprocessedItems: [String: [WriteRequest]]?

        public init(consumedCapacity: [ConsumedCapacity]? = nil, itemCollectionMetrics: [String: [ItemCollectionMetrics]]? = nil, unprocessedItems: [String: [WriteRequest]]? = nil) {
            self.consumedCapacity = consumedCapacity
            self.itemCollectionMetrics = itemCollectionMetrics
            self.unprocessedItems = unprocessedItems
        }

        private enum CodingKeys: String, CodingKey {
            case consumedCapacity = "ConsumedCapacity"
            case itemCollectionMetrics = "ItemCollectionMetrics"
            case unprocessedItems = "UnprocessedItems"
        }
    }

    public struct BillingModeSummary: AWSDecodableShape {
        /// Controls how you are charged for read and write throughput and how you manage capacity. This setting can be changed later.    PROVISIONED - Sets the read/write capacity mode to PROVISIONED. We recommend using PROVISIONED for predictable workloads.    PAY_PER_REQUEST - Sets the read/write capacity mode to PAY_PER_REQUEST. We recommend using PAY_PER_REQUEST for unpredictable workloads.
        public let billingMode: BillingMode?
        /// Represents the time when PAY_PER_REQUEST was last set as the read/write capacity mode.
        public let lastUpdateToPayPerRequestDateTime: Date?

        public init(billingMode: BillingMode? = nil, lastUpdateToPayPerRequestDateTime: Date? = nil) {
            self.billingMode = billingMode
            self.lastUpdateToPayPerRequestDateTime = lastUpdateToPayPerRequestDateTime
        }

        private enum CodingKeys: String, CodingKey {
            case billingMode = "BillingMode"
            case lastUpdateToPayPerRequestDateTime = "LastUpdateToPayPerRequestDateTime"
        }
    }

    public struct Capacity: AWSDecodableShape {
        /// The total number of capacity units consumed on a table or an index.
        public let capacityUnits: Double?
        /// The total number of read capacity units consumed on a table or an index.
        public let readCapacityUnits: Double?
        /// The total number of write capacity units consumed on a table or an index.
        public let writeCapacityUnits: Double?

        public init(capacityUnits: Double? = nil, readCapacityUnits: Double? = nil, writeCapacityUnits: Double? = nil) {
            self.capacityUnits = capacityUnits
            self.readCapacityUnits = readCapacityUnits
            self.writeCapacityUnits = writeCapacityUnits
        }

        private enum CodingKeys: String, CodingKey {
            case capacityUnits = "CapacityUnits"
            case readCapacityUnits = "ReadCapacityUnits"
            case writeCapacityUnits = "WriteCapacityUnits"
        }
    }

    public struct Condition: AWSEncodableShape {
        /// One or more values to evaluate against the supplied attribute. The number of values in the list depends on the ComparisonOperator being used. For type Number, value comparisons are numeric. String value comparisons for greater than, equals, or less than are based on ASCII character code values. For example, a is greater than A, and a is greater than B. For a list of code values, see http://en.wikipedia.org/wiki/ASCII#ASCII_printable_characters. For Binary, DynamoDB treats each byte of the binary data as unsigned when it compares binary values.
        public let attributeValueList: [AttributeValue]?
        /// A comparator for evaluating attributes. For example, equals, greater than, less than, etc. The following comparison operators are available:  EQ | NE | LE | LT | GE | GT | NOT_NULL | NULL | CONTAINS | NOT_CONTAINS | BEGINS_WITH | IN | BETWEEN  The following are descriptions of each comparison operator.    EQ : Equal. EQ is supported for all data types, including lists and maps.  AttributeValueList can contain only one AttributeValue element of type String, Number, Binary, String Set, Number Set, or Binary Set. If an item contains an AttributeValue element of a different type than the one provided in the request, the value does not match. For example, {"S":"6"} does not equal {"N":"6"}. Also, {"N":"6"} does not equal {"NS":["6", "2", "1"]}.     NE : Not equal. NE is supported for all data types, including lists and maps.  AttributeValueList can contain only one AttributeValue of type String, Number, Binary, String Set, Number Set, or Binary Set. If an item contains an AttributeValue of a different type than the one provided in the request, the value does not match. For example, {"S":"6"} does not equal {"N":"6"}. Also, {"N":"6"} does not equal {"NS":["6", "2", "1"]}.     LE : Less than or equal.   AttributeValueList can contain only one AttributeValue element of type String, Number, or Binary (not a set type). If an item contains an AttributeValue element of a different type than the one provided in the request, the value does not match. For example, {"S":"6"} does not equal {"N":"6"}. Also, {"N":"6"} does not compare to {"NS":["6", "2", "1"]}.     LT : Less than.   AttributeValueList can contain only one AttributeValue of type String, Number, or Binary (not a set type). If an item contains an AttributeValue element of a different type than the one provided in the request, the value does not match. For example, {"S":"6"} does not equal {"N":"6"}. Also, {"N":"6"} does not compare to {"NS":["6", "2", "1"]}.     GE : Greater than or equal.   AttributeValueList can contain only one AttributeValue element of type String, Number, or Binary (not a set type). If an item contains an AttributeValue element of a different type than the one provided in the request, the value does not match. For example, {"S":"6"} does not equal {"N":"6"}. Also, {"N":"6"} does not compare to {"NS":["6", "2", "1"]}.     GT : Greater than.   AttributeValueList can contain only one AttributeValue element of type String, Number, or Binary (not a set type). If an item contains an AttributeValue element of a different type than the one provided in the request, the value does not match. For example, {"S":"6"} does not equal {"N":"6"}. Also, {"N":"6"} does not compare to {"NS":["6", "2", "1"]}.     NOT_NULL : The attribute exists. NOT_NULL is supported for all data types, including lists and maps.  This operator tests for the existence of an attribute, not its data type.  If the data type of attribute "a" is null, and you evaluate it using NOT_NULL, the result is a Boolean true. This result is because the attribute "a" exists; its data type is not relevant to the NOT_NULL comparison operator.     NULL : The attribute does not exist. NULL is supported for all data types, including lists and maps.  This operator tests for the nonexistence of an attribute, not its data type.  If the data type of attribute "a" is null, and you evaluate it using NULL, the result is a Boolean false. This is because the attribute "a" exists; its data type is not relevant to the NULL comparison operator.     CONTAINS : Checks for a subsequence, or value in a set.  AttributeValueList can contain only one AttributeValue element of type String, Number, or Binary (not a set type). If the target attribute of the comparison is of type String, then the operator checks for a substring match. If the target attribute of the comparison is of type Binary, then the operator looks for a subsequence of the target that matches the input. If the target attribute of the comparison is a set ("SS", "NS", or "BS"), then the operator evaluates to true if it finds an exact match with any member of the set. CONTAINS is supported for lists: When evaluating "a CONTAINS b", "a" can be a list; however, "b" cannot be a set, a map, or a list.    NOT_CONTAINS : Checks for absence of a subsequence, or absence of a value in a set.  AttributeValueList can contain only one AttributeValue element of type String, Number, or Binary (not a set type). If the target attribute of the comparison is a String, then the operator checks for the absence of a substring match. If the target attribute of the comparison is Binary, then the operator checks for the absence of a subsequence of the target that matches the input. If the target attribute of the comparison is a set ("SS", "NS", or "BS"), then the operator evaluates to true if it does not find an exact match with any member of the set. NOT_CONTAINS is supported for lists: When evaluating "a NOT CONTAINS b", "a" can be a list; however, "b" cannot be a set, a map, or a list.    BEGINS_WITH : Checks for a prefix.   AttributeValueList can contain only one AttributeValue of type String or Binary (not a Number or a set type). The target attribute of the comparison must be of type String or Binary (not a Number or a set type).     IN : Checks for matching elements in a list.  AttributeValueList can contain one or more AttributeValue elements of type String, Number, or Binary. These attributes are compared against an existing attribute of an item. If any elements of the input are equal to the item attribute, the expression evaluates to true.    BETWEEN : Greater than or equal to the first value, and less than or equal to the second value.   AttributeValueList must contain two AttributeValue elements of the same type, either String, Number, or Binary (not a set type). A target attribute matches if the target value is greater than, or equal to, the first element and less than, or equal to, the second element. If an item contains an AttributeValue element of a different type than the one provided in the request, the value does not match. For example, {"S":"6"} does not compare to {"N":"6"}. Also, {"N":"6"} does not compare to {"NS":["6", "2", "1"]}    For usage examples of AttributeValueList and ComparisonOperator, see Legacy Conditional Parameters in the Amazon DynamoDB Developer Guide.
        public let comparisonOperator: ComparisonOperator

        public init(attributeValueList: [AttributeValue]? = nil, comparisonOperator: ComparisonOperator) {
            self.attributeValueList = attributeValueList
            self.comparisonOperator = comparisonOperator
        }

        public func validate(name: String) throws {
            try self.attributeValueList?.forEach {
                try $0.validate(name: "\(name).attributeValueList[]")
            }
        }

        private enum CodingKeys: String, CodingKey {
            case attributeValueList = "AttributeValueList"
            case comparisonOperator = "ComparisonOperator"
        }
    }

    public struct ConditionCheck: AWSEncodableShape {
        /// A condition that must be satisfied in order for a conditional update to succeed.
        public let conditionExpression: String
        /// One or more substitution tokens for attribute names in an expression.
        public let expressionAttributeNames: [String: String]?
        /// One or more values that can be substituted in an expression.
        public let expressionAttributeValues: [String: AttributeValue]?
        /// The primary key of the item to be checked. Each element consists of an attribute name and a value for that attribute.
        public let key: [String: AttributeValue]
        /// Use ReturnValuesOnConditionCheckFailure to get the item attributes if the ConditionCheck condition fails. For ReturnValuesOnConditionCheckFailure, the valid values are: NONE and ALL_OLD.
        public let returnValuesOnConditionCheckFailure: ReturnValuesOnConditionCheckFailure?
        /// Name of the table for the check item request.
        public let tableName: String

        public init(conditionExpression: String, expressionAttributeNames: [String: String]? = nil, expressionAttributeValues: [String: AttributeValue]? = nil, key: [String: AttributeValue], returnValuesOnConditionCheckFailure: ReturnValuesOnConditionCheckFailure? = nil, tableName: String) {
            self.conditionExpression = conditionExpression
            self.expressionAttributeNames = expressionAttributeNames
            self.expressionAttributeValues = expressionAttributeValues
            self.key = key
            self.returnValuesOnConditionCheckFailure = returnValuesOnConditionCheckFailure
            self.tableName = tableName
        }

        public func validate(name: String) throws {
            try self.expressionAttributeNames?.forEach {
                try validate($0.value, name: "expressionAttributeNames[\"\($0.key)\"]", parent: name, max: 65535)
            }
            try self.expressionAttributeValues?.forEach {
                try $0.value.validate(name: "\(name).expressionAttributeValues[\"\($0.key)\"]")
            }
            try self.key.forEach {
                try validate($0.key, name: "key.key", parent: name, max: 65535)
                try $0.value.validate(name: "\(name).key[\"\($0.key)\"]")
            }
            try self.validate(self.tableName, name: "tableName", parent: name, max: 255)
            try self.validate(self.tableName, name: "tableName", parent: name, min: 3)
            try self.validate(self.tableName, name: "tableName", parent: name, pattern: "^[a-zA-Z0-9_.-]+$")
        }

        private enum CodingKeys: String, CodingKey {
            case conditionExpression = "ConditionExpression"
            case expressionAttributeNames = "ExpressionAttributeNames"
            case expressionAttributeValues = "ExpressionAttributeValues"
            case key = "Key"
            case returnValuesOnConditionCheckFailure = "ReturnValuesOnConditionCheckFailure"
            case tableName = "TableName"
        }
    }

    public struct ConsumedCapacity: AWSDecodableShape {
        /// The total number of capacity units consumed by the operation.
        public let capacityUnits: Double?
        /// The amount of throughput consumed on each global index affected by the operation.
        public let globalSecondaryIndexes: [String: Capacity]?
        /// The amount of throughput consumed on each local index affected by the operation.
        public let localSecondaryIndexes: [String: Capacity]?
        /// The total number of read capacity units consumed by the operation.
        public let readCapacityUnits: Double?
        /// The amount of throughput consumed on the table affected by the operation.
        public let table: Capacity?
        /// The name of the table that was affected by the operation.
        public let tableName: String?
        /// The total number of write capacity units consumed by the operation.
        public let writeCapacityUnits: Double?

        public init(capacityUnits: Double? = nil, globalSecondaryIndexes: [String: Capacity]? = nil, localSecondaryIndexes: [String: Capacity]? = nil, readCapacityUnits: Double? = nil, table: Capacity? = nil, tableName: String? = nil, writeCapacityUnits: Double? = nil) {
            self.capacityUnits = capacityUnits
            self.globalSecondaryIndexes = globalSecondaryIndexes
            self.localSecondaryIndexes = localSecondaryIndexes
            self.readCapacityUnits = readCapacityUnits
            self.table = table
            self.tableName = tableName
            self.writeCapacityUnits = writeCapacityUnits
        }

        private enum CodingKeys: String, CodingKey {
            case capacityUnits = "CapacityUnits"
            case globalSecondaryIndexes = "GlobalSecondaryIndexes"
            case localSecondaryIndexes = "LocalSecondaryIndexes"
            case readCapacityUnits = "ReadCapacityUnits"
            case table = "Table"
            case tableName = "TableName"
            case writeCapacityUnits = "WriteCapacityUnits"
        }
    }

    public struct ContinuousBackupsDescription: AWSDecodableShape {
        ///  ContinuousBackupsStatus can be one of the following states: ENABLED, DISABLED
        public let continuousBackupsStatus: ContinuousBackupsStatus
        /// The description of the point in time recovery settings applied to the table.
        public let pointInTimeRecoveryDescription: PointInTimeRecoveryDescription?

        public init(continuousBackupsStatus: ContinuousBackupsStatus, pointInTimeRecoveryDescription: PointInTimeRecoveryDescription? = nil) {
            self.continuousBackupsStatus = continuousBackupsStatus
            self.pointInTimeRecoveryDescription = pointInTimeRecoveryDescription
        }

        private enum CodingKeys: String, CodingKey {
            case continuousBackupsStatus = "ContinuousBackupsStatus"
            case pointInTimeRecoveryDescription = "PointInTimeRecoveryDescription"
        }
    }

    public struct ContributorInsightsSummary: AWSDecodableShape {
        /// Describes the current status for contributor insights for the given table and index, if applicable.
        public let contributorInsightsStatus: ContributorInsightsStatus?
        /// Name of the index associated with the summary, if any.
        public let indexName: String?
        /// Name of the table associated with the summary.
        public let tableName: String?

        public init(contributorInsightsStatus: ContributorInsightsStatus? = nil, indexName: String? = nil, tableName: String? = nil) {
            self.contributorInsightsStatus = contributorInsightsStatus
            self.indexName = indexName
            self.tableName = tableName
        }

        private enum CodingKeys: String, CodingKey {
            case contributorInsightsStatus = "ContributorInsightsStatus"
            case indexName = "IndexName"
            case tableName = "TableName"
        }
    }

    public struct CreateBackupInput: AWSEncodableShape {
        /// Specified name for the backup.
        public let backupName: String
        /// The name of the table.
        public let tableName: String

        public init(backupName: String, tableName: String) {
            self.backupName = backupName
            self.tableName = tableName
        }

        public func validate(name: String) throws {
            try self.validate(self.backupName, name: "backupName", parent: name, max: 255)
            try self.validate(self.backupName, name: "backupName", parent: name, min: 3)
            try self.validate(self.backupName, name: "backupName", parent: name, pattern: "^[a-zA-Z0-9_.-]+$")
            try self.validate(self.tableName, name: "tableName", parent: name, max: 255)
            try self.validate(self.tableName, name: "tableName", parent: name, min: 3)
            try self.validate(self.tableName, name: "tableName", parent: name, pattern: "^[a-zA-Z0-9_.-]+$")
        }

        private enum CodingKeys: String, CodingKey {
            case backupName = "BackupName"
            case tableName = "TableName"
        }
    }

    public struct CreateBackupOutput: AWSDecodableShape {
        /// Contains the details of the backup created for the table.
        public let backupDetails: BackupDetails?

        public init(backupDetails: BackupDetails? = nil) {
            self.backupDetails = backupDetails
        }

        private enum CodingKeys: String, CodingKey {
            case backupDetails = "BackupDetails"
        }
    }

    public struct CreateGlobalSecondaryIndexAction: AWSEncodableShape {
        /// The name of the global secondary index to be created.
        public let indexName: String
        /// The key schema for the global secondary index.
        public let keySchema: [KeySchemaElement]
        /// Represents attributes that are copied (projected) from the table into an index. These are in addition to the primary key attributes and index key attributes, which are automatically projected.
        public let projection: Projection
        /// Represents the provisioned throughput settings for the specified global secondary index. For current minimum and maximum provisioned throughput values, see Service, Account, and Table Quotas in the Amazon DynamoDB Developer Guide.
        public let provisionedThroughput: ProvisionedThroughput?

        public init(indexName: String, keySchema: [KeySchemaElement], projection: Projection, provisionedThroughput: ProvisionedThroughput? = nil) {
            self.indexName = indexName
            self.keySchema = keySchema
            self.projection = projection
            self.provisionedThroughput = provisionedThroughput
        }

        public func validate(name: String) throws {
            try self.validate(self.indexName, name: "indexName", parent: name, max: 255)
            try self.validate(self.indexName, name: "indexName", parent: name, min: 3)
            try self.validate(self.indexName, name: "indexName", parent: name, pattern: "^[a-zA-Z0-9_.-]+$")
            try self.keySchema.forEach {
                try $0.validate(name: "\(name).keySchema[]")
            }
            try self.validate(self.keySchema, name: "keySchema", parent: name, max: 2)
            try self.validate(self.keySchema, name: "keySchema", parent: name, min: 1)
            try self.projection.validate(name: "\(name).projection")
            try self.provisionedThroughput?.validate(name: "\(name).provisionedThroughput")
        }

        private enum CodingKeys: String, CodingKey {
            case indexName = "IndexName"
            case keySchema = "KeySchema"
            case projection = "Projection"
            case provisionedThroughput = "ProvisionedThroughput"
        }
    }

    public struct CreateGlobalTableInput: AWSEncodableShape {
        /// The global table name.
        public let globalTableName: String
        /// The Regions where the global table needs to be created.
        public let replicationGroup: [Replica]

        public init(globalTableName: String, replicationGroup: [Replica]) {
            self.globalTableName = globalTableName
            self.replicationGroup = replicationGroup
        }

        public func validate(name: String) throws {
            try self.validate(self.globalTableName, name: "globalTableName", parent: name, max: 255)
            try self.validate(self.globalTableName, name: "globalTableName", parent: name, min: 3)
            try self.validate(self.globalTableName, name: "globalTableName", parent: name, pattern: "^[a-zA-Z0-9_.-]+$")
        }

        private enum CodingKeys: String, CodingKey {
            case globalTableName = "GlobalTableName"
            case replicationGroup = "ReplicationGroup"
        }
    }

    public struct CreateGlobalTableOutput: AWSDecodableShape {
        /// Contains the details of the global table.
        public let globalTableDescription: GlobalTableDescription?

        public init(globalTableDescription: GlobalTableDescription? = nil) {
            self.globalTableDescription = globalTableDescription
        }

        private enum CodingKeys: String, CodingKey {
            case globalTableDescription = "GlobalTableDescription"
        }
    }

    public struct CreateReplicaAction: AWSEncodableShape {
        /// The Region of the replica to be added.
        public let regionName: String

        public init(regionName: String) {
            self.regionName = regionName
        }

        private enum CodingKeys: String, CodingKey {
            case regionName = "RegionName"
        }
    }

    public struct CreateReplicationGroupMemberAction: AWSEncodableShape {
        /// Replica-specific global secondary index settings.
        public let globalSecondaryIndexes: [ReplicaGlobalSecondaryIndex]?
        /// The AWS KMS customer master key (CMK) that should be used for AWS KMS encryption in the new replica. To specify a CMK, use its key ID, Amazon Resource Name (ARN), alias name, or alias ARN. Note that you should only provide this parameter if the key is different from the default DynamoDB KMS master key alias/aws/dynamodb.
        public let kMSMasterKeyId: String?
        /// Replica-specific provisioned throughput. If not specified, uses the source table's provisioned throughput settings.
        public let provisionedThroughputOverride: ProvisionedThroughputOverride?
        /// The Region where the new replica will be created.
        public let regionName: String

        public init(globalSecondaryIndexes: [ReplicaGlobalSecondaryIndex]? = nil, kMSMasterKeyId: String? = nil, provisionedThroughputOverride: ProvisionedThroughputOverride? = nil, regionName: String) {
            self.globalSecondaryIndexes = globalSecondaryIndexes
            self.kMSMasterKeyId = kMSMasterKeyId
            self.provisionedThroughputOverride = provisionedThroughputOverride
            self.regionName = regionName
        }

        public func validate(name: String) throws {
            try self.globalSecondaryIndexes?.forEach {
                try $0.validate(name: "\(name).globalSecondaryIndexes[]")
            }
            try self.validate(self.globalSecondaryIndexes, name: "globalSecondaryIndexes", parent: name, min: 1)
            try self.provisionedThroughputOverride?.validate(name: "\(name).provisionedThroughputOverride")
        }

        private enum CodingKeys: String, CodingKey {
            case globalSecondaryIndexes = "GlobalSecondaryIndexes"
            case kMSMasterKeyId = "KMSMasterKeyId"
            case provisionedThroughputOverride = "ProvisionedThroughputOverride"
            case regionName = "RegionName"
        }
    }

    public struct CreateTableInput: AWSEncodableShape {
        /// An array of attributes that describe the key schema for the table and indexes.
        public let attributeDefinitions: [AttributeDefinition]
        /// Controls how you are charged for read and write throughput and how you manage capacity. This setting can be changed later.    PROVISIONED - We recommend using PROVISIONED for predictable workloads. PROVISIONED sets the billing mode to Provisioned Mode.    PAY_PER_REQUEST - We recommend using PAY_PER_REQUEST for unpredictable workloads. PAY_PER_REQUEST sets the billing mode to On-Demand Mode.
        public let billingMode: BillingMode?
        /// One or more global secondary indexes (the maximum is 20) to be created on the table. Each global secondary index in the array includes the following:    IndexName - The name of the global secondary index. Must be unique only for this table.     KeySchema - Specifies the key schema for the global secondary index.    Projection - Specifies attributes that are copied (projected) from the table into the index. These are in addition to the primary key attributes and index key attributes, which are automatically projected. Each attribute specification is composed of:    ProjectionType - One of the following:    KEYS_ONLY - Only the index and primary keys are projected into the index.    INCLUDE - Only the specified table attributes are projected into the index. The list of projected attributes is in NonKeyAttributes.    ALL - All of the table attributes are projected into the index.      NonKeyAttributes - A list of one or more non-key attribute names that are projected into the secondary index. The total count of attributes provided in NonKeyAttributes, summed across all of the secondary indexes, must not exceed 100. If you project the same attribute into two different indexes, this counts as two distinct attributes when determining the total.      ProvisionedThroughput - The provisioned throughput settings for the global secondary index, consisting of read and write capacity units.
        public let globalSecondaryIndexes: [GlobalSecondaryIndex]?
        /// Specifies the attributes that make up the primary key for a table or an index. The attributes in KeySchema must also be defined in the AttributeDefinitions array. For more information, see Data Model in the Amazon DynamoDB Developer Guide. Each KeySchemaElement in the array is composed of:    AttributeName - The name of this key attribute.    KeyType - The role that the key attribute will assume:    HASH - partition key    RANGE - sort key      The partition key of an item is also known as its hash attribute. The term "hash attribute" derives from the DynamoDB usage of an internal hash function to evenly distribute data items across partitions, based on their partition key values. The sort key of an item is also known as its range attribute. The term "range attribute" derives from the way DynamoDB stores items with the same partition key physically close together, in sorted order by the sort key value.
        ///  For a simple primary key (partition key), you must provide exactly one element with a KeyType of HASH. For a composite primary key (partition key and sort key), you must provide exactly two elements, in this order: The first element must have a KeyType of HASH, and the second element must have a KeyType of RANGE. For more information, see Working with Tables in the Amazon DynamoDB Developer Guide.
        public let keySchema: [KeySchemaElement]
        /// One or more local secondary indexes (the maximum is 5) to be created on the table. Each index is scoped to a given partition key value. There is a 10 GB size limit per partition key value; otherwise, the size of a local secondary index is unconstrained. Each local secondary index in the array includes the following:    IndexName - The name of the local secondary index. Must be unique only for this table.     KeySchema - Specifies the key schema for the local secondary index. The key schema must begin with the same partition key as the table.    Projection - Specifies attributes that are copied (projected) from the table into the index. These are in addition to the primary key attributes and index key attributes, which are automatically projected. Each attribute specification is composed of:    ProjectionType - One of the following:    KEYS_ONLY - Only the index and primary keys are projected into the index.    INCLUDE - Only the specified table attributes are projected into the index. The list of projected attributes is in NonKeyAttributes.    ALL - All of the table attributes are projected into the index.      NonKeyAttributes - A list of one or more non-key attribute names that are projected into the secondary index. The total count of attributes provided in NonKeyAttributes, summed across all of the secondary indexes, must not exceed 100. If you project the same attribute into two different indexes, this counts as two distinct attributes when determining the total.
        public let localSecondaryIndexes: [LocalSecondaryIndex]?
        /// Represents the provisioned throughput settings for a specified table or index. The settings can be modified using the UpdateTable operation.
        /// 		        If you set BillingMode as PROVISIONED, you must specify this property. If you set BillingMode as PAY_PER_REQUEST, you cannot specify this property. For current minimum and maximum provisioned throughput values, see Service, Account, and Table Quotas in the Amazon DynamoDB Developer Guide.
        public let provisionedThroughput: ProvisionedThroughput?
        /// Represents the settings used to enable server-side encryption.
        public let sSESpecification: SSESpecification?
        /// The settings for DynamoDB Streams on the table. These settings consist of:    StreamEnabled - Indicates whether DynamoDB Streams is to be enabled (true) or disabled (false).    StreamViewType - When an item in the table is modified, StreamViewType determines what information is written to the table's stream. Valid values for StreamViewType are:    KEYS_ONLY - Only the key attributes of the modified item are written to the stream.    NEW_IMAGE - The entire item, as it appears after it was modified, is written to the stream.    OLD_IMAGE - The entire item, as it appeared before it was modified, is written to the stream.    NEW_AND_OLD_IMAGES - Both the new and the old item images of the item are written to the stream.
        public let streamSpecification: StreamSpecification?
        /// The name of the table to create.
        public let tableName: String
        /// A list of key-value pairs to label the table. For more information, see Tagging for DynamoDB.
        public let tags: [Tag]?

        public init(attributeDefinitions: [AttributeDefinition], billingMode: BillingMode? = nil, globalSecondaryIndexes: [GlobalSecondaryIndex]? = nil, keySchema: [KeySchemaElement], localSecondaryIndexes: [LocalSecondaryIndex]? = nil, provisionedThroughput: ProvisionedThroughput? = nil, sSESpecification: SSESpecification? = nil, streamSpecification: StreamSpecification? = nil, tableName: String, tags: [Tag]? = nil) {
            self.attributeDefinitions = attributeDefinitions
            self.billingMode = billingMode
            self.globalSecondaryIndexes = globalSecondaryIndexes
            self.keySchema = keySchema
            self.localSecondaryIndexes = localSecondaryIndexes
            self.provisionedThroughput = provisionedThroughput
            self.sSESpecification = sSESpecification
            self.streamSpecification = streamSpecification
            self.tableName = tableName
            self.tags = tags
        }

        public func validate(name: String) throws {
            try self.attributeDefinitions.forEach {
                try $0.validate(name: "\(name).attributeDefinitions[]")
            }
            try self.globalSecondaryIndexes?.forEach {
                try $0.validate(name: "\(name).globalSecondaryIndexes[]")
            }
            try self.keySchema.forEach {
                try $0.validate(name: "\(name).keySchema[]")
            }
            try self.validate(self.keySchema, name: "keySchema", parent: name, max: 2)
            try self.validate(self.keySchema, name: "keySchema", parent: name, min: 1)
            try self.localSecondaryIndexes?.forEach {
                try $0.validate(name: "\(name).localSecondaryIndexes[]")
            }
            try self.provisionedThroughput?.validate(name: "\(name).provisionedThroughput")
            try self.validate(self.tableName, name: "tableName", parent: name, max: 255)
            try self.validate(self.tableName, name: "tableName", parent: name, min: 3)
            try self.validate(self.tableName, name: "tableName", parent: name, pattern: "^[a-zA-Z0-9_.-]+$")
            try self.tags?.forEach {
                try $0.validate(name: "\(name).tags[]")
            }
        }

        private enum CodingKeys: String, CodingKey {
            case attributeDefinitions = "AttributeDefinitions"
            case billingMode = "BillingMode"
            case globalSecondaryIndexes = "GlobalSecondaryIndexes"
            case keySchema = "KeySchema"
            case localSecondaryIndexes = "LocalSecondaryIndexes"
            case provisionedThroughput = "ProvisionedThroughput"
            case sSESpecification = "SSESpecification"
            case streamSpecification = "StreamSpecification"
            case tableName = "TableName"
            case tags = "Tags"
        }
    }

    public struct CreateTableOutput: AWSDecodableShape {
        /// Represents the properties of the table.
        public let tableDescription: TableDescription?

        public init(tableDescription: TableDescription? = nil) {
            self.tableDescription = tableDescription
        }

        private enum CodingKeys: String, CodingKey {
            case tableDescription = "TableDescription"
        }
    }

    public struct Delete: AWSEncodableShape {
        /// A condition that must be satisfied in order for a conditional delete to succeed.
        public let conditionExpression: String?
        /// One or more substitution tokens for attribute names in an expression.
        public let expressionAttributeNames: [String: String]?
        /// One or more values that can be substituted in an expression.
        public let expressionAttributeValues: [String: AttributeValue]?
        /// The primary key of the item to be deleted. Each element consists of an attribute name and a value for that attribute.
        public let key: [String: AttributeValue]
        /// Use ReturnValuesOnConditionCheckFailure to get the item attributes if the Delete condition fails. For ReturnValuesOnConditionCheckFailure, the valid values are: NONE and ALL_OLD.
        public let returnValuesOnConditionCheckFailure: ReturnValuesOnConditionCheckFailure?
        /// Name of the table in which the item to be deleted resides.
        public let tableName: String

        public init(conditionExpression: String? = nil, expressionAttributeNames: [String: String]? = nil, expressionAttributeValues: [String: AttributeValue]? = nil, key: [String: AttributeValue], returnValuesOnConditionCheckFailure: ReturnValuesOnConditionCheckFailure? = nil, tableName: String) {
            self.conditionExpression = conditionExpression
            self.expressionAttributeNames = expressionAttributeNames
            self.expressionAttributeValues = expressionAttributeValues
            self.key = key
            self.returnValuesOnConditionCheckFailure = returnValuesOnConditionCheckFailure
            self.tableName = tableName
        }

        public func validate(name: String) throws {
            try self.expressionAttributeNames?.forEach {
                try validate($0.value, name: "expressionAttributeNames[\"\($0.key)\"]", parent: name, max: 65535)
            }
            try self.expressionAttributeValues?.forEach {
                try $0.value.validate(name: "\(name).expressionAttributeValues[\"\($0.key)\"]")
            }
            try self.key.forEach {
                try validate($0.key, name: "key.key", parent: name, max: 65535)
                try $0.value.validate(name: "\(name).key[\"\($0.key)\"]")
            }
            try self.validate(self.tableName, name: "tableName", parent: name, max: 255)
            try self.validate(self.tableName, name: "tableName", parent: name, min: 3)
            try self.validate(self.tableName, name: "tableName", parent: name, pattern: "^[a-zA-Z0-9_.-]+$")
        }

        private enum CodingKeys: String, CodingKey {
            case conditionExpression = "ConditionExpression"
            case expressionAttributeNames = "ExpressionAttributeNames"
            case expressionAttributeValues = "ExpressionAttributeValues"
            case key = "Key"
            case returnValuesOnConditionCheckFailure = "ReturnValuesOnConditionCheckFailure"
            case tableName = "TableName"
        }
    }

    public struct DeleteBackupInput: AWSEncodableShape {
        /// The ARN associated with the backup.
        public let backupArn: String

        public init(backupArn: String) {
            self.backupArn = backupArn
        }

        public func validate(name: String) throws {
            try self.validate(self.backupArn, name: "backupArn", parent: name, max: 1024)
            try self.validate(self.backupArn, name: "backupArn", parent: name, min: 37)
        }

        private enum CodingKeys: String, CodingKey {
            case backupArn = "BackupArn"
        }
    }

    public struct DeleteBackupOutput: AWSDecodableShape {
        /// Contains the description of the backup created for the table.
        public let backupDescription: BackupDescription?

        public init(backupDescription: BackupDescription? = nil) {
            self.backupDescription = backupDescription
        }

        private enum CodingKeys: String, CodingKey {
            case backupDescription = "BackupDescription"
        }
    }

    public struct DeleteGlobalSecondaryIndexAction: AWSEncodableShape {
        /// The name of the global secondary index to be deleted.
        public let indexName: String

        public init(indexName: String) {
            self.indexName = indexName
        }

        public func validate(name: String) throws {
            try self.validate(self.indexName, name: "indexName", parent: name, max: 255)
            try self.validate(self.indexName, name: "indexName", parent: name, min: 3)
            try self.validate(self.indexName, name: "indexName", parent: name, pattern: "^[a-zA-Z0-9_.-]+$")
        }

        private enum CodingKeys: String, CodingKey {
            case indexName = "IndexName"
        }
    }

    public struct DeleteItemInput: AWSEncodableShape {
        /// This is a legacy parameter.  Use ConditionExpression instead.  For more information, see ConditionalOperator in the Amazon DynamoDB Developer Guide.
        public let conditionalOperator: ConditionalOperator?
        /// A condition that must be satisfied in order for a conditional DeleteItem to succeed. An expression can contain any of the following:   Functions: attribute_exists | attribute_not_exists | attribute_type | contains | begins_with | size  These function names are case-sensitive.   Comparison operators: = | <> | | = | BETWEEN | IN     Logical operators: AND | OR | NOT    For more information about condition expressions, see Condition Expressions in the Amazon DynamoDB Developer Guide.
        public let conditionExpression: String?
        /// This is a legacy parameter.  Use ConditionExpression instead.  For more information, see Expected in the Amazon DynamoDB Developer Guide.
        public let expected: [String: ExpectedAttributeValue]?
        /// One or more substitution tokens for attribute names in an expression. The following are some use cases for using ExpressionAttributeNames:   To access an attribute whose name conflicts with a DynamoDB reserved word.   To create a placeholder for repeating occurrences of an attribute name in an expression.   To prevent special characters in an attribute name from being misinterpreted in an expression.   Use the # character in an expression to dereference an attribute name. For example, consider the following attribute name:    Percentile    The name of this attribute conflicts with a reserved word, so it cannot be used directly in an expression. (For the complete list of reserved words, see Reserved Words in the Amazon DynamoDB Developer Guide). To work around this, you could specify the following for ExpressionAttributeNames:    {"#P":"Percentile"}    You could then use this substitution in an expression, as in this example:    #P = :val     Tokens that begin with the : character are expression attribute values, which are placeholders for the actual value at runtime.  For more information on expression attribute names, see Specifying Item Attributes in the Amazon DynamoDB Developer Guide.
        public let expressionAttributeNames: [String: String]?
        /// One or more values that can be substituted in an expression. Use the : (colon) character in an expression to dereference an attribute value. For example, suppose that you wanted to check whether the value of the ProductStatus attribute was one of the following:   Available | Backordered | Discontinued  You would first need to specify ExpressionAttributeValues as follows:  { ":avail":{"S":"Available"}, ":back":{"S":"Backordered"}, ":disc":{"S":"Discontinued"} }  You could then use these values in an expression, such as this:  ProductStatus IN (:avail, :back, :disc)  For more information on expression attribute values, see Condition Expressions in the Amazon DynamoDB Developer Guide.
        public let expressionAttributeValues: [String: AttributeValue]?
        /// A map of attribute names to AttributeValue objects, representing the primary key of the item to delete. For the primary key, you must provide all of the attributes. For example, with a simple primary key, you only need to provide a value for the partition key. For a composite primary key, you must provide values for both the partition key and the sort key.
        public let key: [String: AttributeValue]
        public let returnConsumedCapacity: ReturnConsumedCapacity?
        /// Determines whether item collection metrics are returned.  If set to SIZE, the response includes statistics about item collections, if any, that were modified during the operation are returned in the response. If set to NONE (the default), no statistics are returned.
        public let returnItemCollectionMetrics: ReturnItemCollectionMetrics?
        /// Use ReturnValues if you want to get the item attributes as they appeared before they were deleted. For DeleteItem, the valid values are:    NONE - If ReturnValues is not specified, or if its value is NONE, then nothing is returned. (This setting is the default for ReturnValues.)    ALL_OLD - The content of the old item is returned.    The ReturnValues parameter is used by several DynamoDB operations; however, DeleteItem does not recognize any values other than NONE or ALL_OLD.
        public let returnValues: ReturnValue?
        /// The name of the table from which to delete the item.
        public let tableName: String

        public init(conditionalOperator: ConditionalOperator? = nil, conditionExpression: String? = nil, expected: [String: ExpectedAttributeValue]? = nil, expressionAttributeNames: [String: String]? = nil, expressionAttributeValues: [String: AttributeValue]? = nil, key: [String: AttributeValue], returnConsumedCapacity: ReturnConsumedCapacity? = nil, returnItemCollectionMetrics: ReturnItemCollectionMetrics? = nil, returnValues: ReturnValue? = nil, tableName: String) {
            self.conditionalOperator = conditionalOperator
            self.conditionExpression = conditionExpression
            self.expected = expected
            self.expressionAttributeNames = expressionAttributeNames
            self.expressionAttributeValues = expressionAttributeValues
            self.key = key
            self.returnConsumedCapacity = returnConsumedCapacity
            self.returnItemCollectionMetrics = returnItemCollectionMetrics
            self.returnValues = returnValues
            self.tableName = tableName
        }

        public func validate(name: String) throws {
            try self.expected?.forEach {
                try validate($0.key, name: "expected.key", parent: name, max: 65535)
                try $0.value.validate(name: "\(name).expected[\"\($0.key)\"]")
            }
            try self.expressionAttributeNames?.forEach {
                try validate($0.value, name: "expressionAttributeNames[\"\($0.key)\"]", parent: name, max: 65535)
            }
            try self.expressionAttributeValues?.forEach {
                try $0.value.validate(name: "\(name).expressionAttributeValues[\"\($0.key)\"]")
            }
            try self.key.forEach {
                try validate($0.key, name: "key.key", parent: name, max: 65535)
                try $0.value.validate(name: "\(name).key[\"\($0.key)\"]")
            }
            try self.validate(self.tableName, name: "tableName", parent: name, max: 255)
            try self.validate(self.tableName, name: "tableName", parent: name, min: 3)
            try self.validate(self.tableName, name: "tableName", parent: name, pattern: "^[a-zA-Z0-9_.-]+$")
        }

        private enum CodingKeys: String, CodingKey {
            case conditionalOperator = "ConditionalOperator"
            case conditionExpression = "ConditionExpression"
            case expected = "Expected"
            case expressionAttributeNames = "ExpressionAttributeNames"
            case expressionAttributeValues = "ExpressionAttributeValues"
            case key = "Key"
            case returnConsumedCapacity = "ReturnConsumedCapacity"
            case returnItemCollectionMetrics = "ReturnItemCollectionMetrics"
            case returnValues = "ReturnValues"
            case tableName = "TableName"
        }
    }

    public struct DeleteItemOutput: AWSDecodableShape {
        /// A map of attribute names to AttributeValue objects, representing the item as it appeared before the DeleteItem operation. This map appears in the response only if ReturnValues was specified as ALL_OLD in the request.
        public let attributes: [String: AttributeValue]?
        /// The capacity units consumed by the DeleteItem operation. The data returned includes the total provisioned throughput consumed, along with statistics for the table and any indexes involved in the operation. ConsumedCapacity is only returned if the ReturnConsumedCapacity parameter was specified. For more information, see Provisioned Mode in the Amazon DynamoDB Developer Guide.
        public let consumedCapacity: ConsumedCapacity?
        /// Information about item collections, if any, that were affected by the DeleteItem operation. ItemCollectionMetrics is only returned if the ReturnItemCollectionMetrics parameter was specified. If the table does not have any local secondary indexes, this information is not returned in the response. Each ItemCollectionMetrics element consists of:    ItemCollectionKey - The partition key value of the item collection. This is the same as the partition key value of the item itself.    SizeEstimateRangeGB - An estimate of item collection size, in gigabytes. This value is a two-element array containing a lower bound and an upper bound for the estimate. The estimate includes the size of all the items in the table, plus the size of all attributes projected into all of the local secondary indexes on that table. Use this estimate to measure whether a local secondary index is approaching its size limit. The estimate is subject to change over time; therefore, do not rely on the precision or accuracy of the estimate.
        public let itemCollectionMetrics: ItemCollectionMetrics?

        public init(attributes: [String: AttributeValue]? = nil, consumedCapacity: ConsumedCapacity? = nil, itemCollectionMetrics: ItemCollectionMetrics? = nil) {
            self.attributes = attributes
            self.consumedCapacity = consumedCapacity
            self.itemCollectionMetrics = itemCollectionMetrics
        }

        private enum CodingKeys: String, CodingKey {
            case attributes = "Attributes"
            case consumedCapacity = "ConsumedCapacity"
            case itemCollectionMetrics = "ItemCollectionMetrics"
        }
    }

    public struct DeleteReplicaAction: AWSEncodableShape {
        /// The Region of the replica to be removed.
        public let regionName: String

        public init(regionName: String) {
            self.regionName = regionName
        }

        private enum CodingKeys: String, CodingKey {
            case regionName = "RegionName"
        }
    }

    public struct DeleteReplicationGroupMemberAction: AWSEncodableShape {
        /// The Region where the replica exists.
        public let regionName: String

        public init(regionName: String) {
            self.regionName = regionName
        }

        private enum CodingKeys: String, CodingKey {
            case regionName = "RegionName"
        }
    }

    public struct DeleteRequest: AWSEncodableShape & AWSDecodableShape {
        /// A map of attribute name to attribute values, representing the primary key of the item to delete. All of the table's primary key attributes must be specified, and their data types must match those of the table's key schema.
        public let key: [String: AttributeValue]

        public init(key: [String: AttributeValue]) {
            self.key = key
        }

        public func validate(name: String) throws {
            try self.key.forEach {
                try validate($0.key, name: "key.key", parent: name, max: 65535)
                try $0.value.validate(name: "\(name).key[\"\($0.key)\"]")
            }
        }

        private enum CodingKeys: String, CodingKey {
            case key = "Key"
        }
    }

    public struct DeleteTableInput: AWSEncodableShape {
        /// The name of the table to delete.
        public let tableName: String

        public init(tableName: String) {
            self.tableName = tableName
        }

        public func validate(name: String) throws {
            try self.validate(self.tableName, name: "tableName", parent: name, max: 255)
            try self.validate(self.tableName, name: "tableName", parent: name, min: 3)
            try self.validate(self.tableName, name: "tableName", parent: name, pattern: "^[a-zA-Z0-9_.-]+$")
        }

        private enum CodingKeys: String, CodingKey {
            case tableName = "TableName"
        }
    }

    public struct DeleteTableOutput: AWSDecodableShape {
        /// Represents the properties of a table.
        public let tableDescription: TableDescription?

        public init(tableDescription: TableDescription? = nil) {
            self.tableDescription = tableDescription
        }

        private enum CodingKeys: String, CodingKey {
            case tableDescription = "TableDescription"
        }
    }

    public struct DescribeBackupInput: AWSEncodableShape {
        /// The Amazon Resource Name (ARN) associated with the backup.
        public let backupArn: String

        public init(backupArn: String) {
            self.backupArn = backupArn
        }

        public func validate(name: String) throws {
            try self.validate(self.backupArn, name: "backupArn", parent: name, max: 1024)
            try self.validate(self.backupArn, name: "backupArn", parent: name, min: 37)
        }

        private enum CodingKeys: String, CodingKey {
            case backupArn = "BackupArn"
        }
    }

    public struct DescribeBackupOutput: AWSDecodableShape {
        /// Contains the description of the backup created for the table.
        public let backupDescription: BackupDescription?

        public init(backupDescription: BackupDescription? = nil) {
            self.backupDescription = backupDescription
        }

        private enum CodingKeys: String, CodingKey {
            case backupDescription = "BackupDescription"
        }
    }

    public struct DescribeContinuousBackupsInput: AWSEncodableShape {
        /// Name of the table for which the customer wants to check the continuous backups and point in time recovery settings.
        public let tableName: String

        public init(tableName: String) {
            self.tableName = tableName
        }

        public func validate(name: String) throws {
            try self.validate(self.tableName, name: "tableName", parent: name, max: 255)
            try self.validate(self.tableName, name: "tableName", parent: name, min: 3)
            try self.validate(self.tableName, name: "tableName", parent: name, pattern: "^[a-zA-Z0-9_.-]+$")
        }

        private enum CodingKeys: String, CodingKey {
            case tableName = "TableName"
        }
    }

    public struct DescribeContinuousBackupsOutput: AWSDecodableShape {
        /// Represents the continuous backups and point in time recovery settings on the table.
        public let continuousBackupsDescription: ContinuousBackupsDescription?

        public init(continuousBackupsDescription: ContinuousBackupsDescription? = nil) {
            self.continuousBackupsDescription = continuousBackupsDescription
        }

        private enum CodingKeys: String, CodingKey {
            case continuousBackupsDescription = "ContinuousBackupsDescription"
        }
    }

    public struct DescribeContributorInsightsInput: AWSEncodableShape {
        /// The name of the global secondary index to describe, if applicable.
        public let indexName: String?
        /// The name of the table to describe.
        public let tableName: String

        public init(indexName: String? = nil, tableName: String) {
            self.indexName = indexName
            self.tableName = tableName
        }

        public func validate(name: String) throws {
            try self.validate(self.indexName, name: "indexName", parent: name, max: 255)
            try self.validate(self.indexName, name: "indexName", parent: name, min: 3)
            try self.validate(self.indexName, name: "indexName", parent: name, pattern: "^[a-zA-Z0-9_.-]+$")
            try self.validate(self.tableName, name: "tableName", parent: name, max: 255)
            try self.validate(self.tableName, name: "tableName", parent: name, min: 3)
            try self.validate(self.tableName, name: "tableName", parent: name, pattern: "^[a-zA-Z0-9_.-]+$")
        }

        private enum CodingKeys: String, CodingKey {
            case indexName = "IndexName"
            case tableName = "TableName"
        }
    }

    public struct DescribeContributorInsightsOutput: AWSDecodableShape {
        /// List of names of the associated Alpine rules.
        public let contributorInsightsRuleList: [String]?
        /// Current Status contributor insights.
        public let contributorInsightsStatus: ContributorInsightsStatus?
        /// Returns information about the last failure that encountered. The most common exceptions for a FAILED status are:   LimitExceededException - 	Per-account Amazon CloudWatch Contributor Insights rule limit reached. Please disable Contributor Insights for other tables/indexes OR disable Contributor Insights rules before retrying.   AccessDeniedException - Amazon CloudWatch Contributor Insights rules cannot be modified due to insufficient permissions.   AccessDeniedException - Failed to create service-linked role for Contributor Insights due to insufficient permissions.   InternalServerError - Failed to create Amazon CloudWatch Contributor Insights rules. Please retry request.
        public let failureException: FailureException?
        /// The name of the global secondary index being described.
        public let indexName: String?
        /// Timestamp of the last time the status was changed.
        public let lastUpdateDateTime: Date?
        /// The name of the table being described.
        public let tableName: String?

        public init(contributorInsightsRuleList: [String]? = nil, contributorInsightsStatus: ContributorInsightsStatus? = nil, failureException: FailureException? = nil, indexName: String? = nil, lastUpdateDateTime: Date? = nil, tableName: String? = nil) {
            self.contributorInsightsRuleList = contributorInsightsRuleList
            self.contributorInsightsStatus = contributorInsightsStatus
            self.failureException = failureException
            self.indexName = indexName
            self.lastUpdateDateTime = lastUpdateDateTime
            self.tableName = tableName
        }

        private enum CodingKeys: String, CodingKey {
            case contributorInsightsRuleList = "ContributorInsightsRuleList"
            case contributorInsightsStatus = "ContributorInsightsStatus"
            case failureException = "FailureException"
            case indexName = "IndexName"
            case lastUpdateDateTime = "LastUpdateDateTime"
            case tableName = "TableName"
        }
    }

    public struct DescribeEndpointsRequest: AWSEncodableShape {
        public init() {}
    }

    public struct DescribeEndpointsResponse: AWSDecodableShape {
        /// List of endpoints.
        public let endpoints: [Endpoint]

        public init(endpoints: [Endpoint]) {
            self.endpoints = endpoints
        }

        private enum CodingKeys: String, CodingKey {
            case endpoints = "Endpoints"
        }
    }

    public struct DescribeExportInput: AWSEncodableShape {
        /// The Amazon Resource Name (ARN) associated with the export.
        public let exportArn: String

        public init(exportArn: String) {
            self.exportArn = exportArn
        }

        public func validate(name: String) throws {
            try self.validate(self.exportArn, name: "exportArn", parent: name, max: 1024)
            try self.validate(self.exportArn, name: "exportArn", parent: name, min: 37)
        }

        private enum CodingKeys: String, CodingKey {
            case exportArn = "ExportArn"
        }
    }

    public struct DescribeExportOutput: AWSDecodableShape {
        /// Represents the properties of the export.
        public let exportDescription: ExportDescription?

        public init(exportDescription: ExportDescription? = nil) {
            self.exportDescription = exportDescription
        }

        private enum CodingKeys: String, CodingKey {
            case exportDescription = "ExportDescription"
        }
    }

    public struct DescribeGlobalTableInput: AWSEncodableShape {
        /// The name of the global table.
        public let globalTableName: String

        public init(globalTableName: String) {
            self.globalTableName = globalTableName
        }

        public func validate(name: String) throws {
            try self.validate(self.globalTableName, name: "globalTableName", parent: name, max: 255)
            try self.validate(self.globalTableName, name: "globalTableName", parent: name, min: 3)
            try self.validate(self.globalTableName, name: "globalTableName", parent: name, pattern: "^[a-zA-Z0-9_.-]+$")
        }

        private enum CodingKeys: String, CodingKey {
            case globalTableName = "GlobalTableName"
        }
    }

    public struct DescribeGlobalTableOutput: AWSDecodableShape {
        /// Contains the details of the global table.
        public let globalTableDescription: GlobalTableDescription?

        public init(globalTableDescription: GlobalTableDescription? = nil) {
            self.globalTableDescription = globalTableDescription
        }

        private enum CodingKeys: String, CodingKey {
            case globalTableDescription = "GlobalTableDescription"
        }
    }

    public struct DescribeGlobalTableSettingsInput: AWSEncodableShape {
        /// The name of the global table to describe.
        public let globalTableName: String

        public init(globalTableName: String) {
            self.globalTableName = globalTableName
        }

        public func validate(name: String) throws {
            try self.validate(self.globalTableName, name: "globalTableName", parent: name, max: 255)
            try self.validate(self.globalTableName, name: "globalTableName", parent: name, min: 3)
            try self.validate(self.globalTableName, name: "globalTableName", parent: name, pattern: "^[a-zA-Z0-9_.-]+$")
        }

        private enum CodingKeys: String, CodingKey {
            case globalTableName = "GlobalTableName"
        }
    }

    public struct DescribeGlobalTableSettingsOutput: AWSDecodableShape {
        /// The name of the global table.
        public let globalTableName: String?
        /// The Region-specific settings for the global table.
        public let replicaSettings: [ReplicaSettingsDescription]?

        public init(globalTableName: String? = nil, replicaSettings: [ReplicaSettingsDescription]? = nil) {
            self.globalTableName = globalTableName
            self.replicaSettings = replicaSettings
        }

        private enum CodingKeys: String, CodingKey {
            case globalTableName = "GlobalTableName"
            case replicaSettings = "ReplicaSettings"
        }
    }

    public struct DescribeKinesisStreamingDestinationInput: AWSEncodableShape {
        /// The name of the table being described.
        public let tableName: String

        public init(tableName: String) {
            self.tableName = tableName
        }

        public func validate(name: String) throws {
            try self.validate(self.tableName, name: "tableName", parent: name, max: 255)
            try self.validate(self.tableName, name: "tableName", parent: name, min: 3)
            try self.validate(self.tableName, name: "tableName", parent: name, pattern: "^[a-zA-Z0-9_.-]+$")
        }

        private enum CodingKeys: String, CodingKey {
            case tableName = "TableName"
        }
    }

    public struct DescribeKinesisStreamingDestinationOutput: AWSDecodableShape {
        /// The list of replica structures for the table being described.
        public let kinesisDataStreamDestinations: [KinesisDataStreamDestination]?
        /// The name of the table being described.
        public let tableName: String?

        public init(kinesisDataStreamDestinations: [KinesisDataStreamDestination]? = nil, tableName: String? = nil) {
            self.kinesisDataStreamDestinations = kinesisDataStreamDestinations
            self.tableName = tableName
        }

        private enum CodingKeys: String, CodingKey {
            case kinesisDataStreamDestinations = "KinesisDataStreamDestinations"
            case tableName = "TableName"
        }
    }

    public struct DescribeLimitsInput: AWSEncodableShape {
        public init() {}
    }

    public struct DescribeLimitsOutput: AWSDecodableShape {
        /// The maximum total read capacity units that your account allows you to provision across all of your tables in this Region.
        public let accountMaxReadCapacityUnits: Int64?
        /// The maximum total write capacity units that your account allows you to provision across all of your tables in this Region.
        public let accountMaxWriteCapacityUnits: Int64?
        /// The maximum read capacity units that your account allows you to provision for a new table that you are creating in this Region, including the read capacity units provisioned for its global secondary indexes (GSIs).
        public let tableMaxReadCapacityUnits: Int64?
        /// The maximum write capacity units that your account allows you to provision for a new table that you are creating in this Region, including the write capacity units provisioned for its global secondary indexes (GSIs).
        public let tableMaxWriteCapacityUnits: Int64?

        public init(accountMaxReadCapacityUnits: Int64? = nil, accountMaxWriteCapacityUnits: Int64? = nil, tableMaxReadCapacityUnits: Int64? = nil, tableMaxWriteCapacityUnits: Int64? = nil) {
            self.accountMaxReadCapacityUnits = accountMaxReadCapacityUnits
            self.accountMaxWriteCapacityUnits = accountMaxWriteCapacityUnits
            self.tableMaxReadCapacityUnits = tableMaxReadCapacityUnits
            self.tableMaxWriteCapacityUnits = tableMaxWriteCapacityUnits
        }

        private enum CodingKeys: String, CodingKey {
            case accountMaxReadCapacityUnits = "AccountMaxReadCapacityUnits"
            case accountMaxWriteCapacityUnits = "AccountMaxWriteCapacityUnits"
            case tableMaxReadCapacityUnits = "TableMaxReadCapacityUnits"
            case tableMaxWriteCapacityUnits = "TableMaxWriteCapacityUnits"
        }
    }

    public struct DescribeTableInput: AWSEncodableShape {
        /// The name of the table to describe.
        public let tableName: String

        public init(tableName: String) {
            self.tableName = tableName
        }

        public func validate(name: String) throws {
            try self.validate(self.tableName, name: "tableName", parent: name, max: 255)
            try self.validate(self.tableName, name: "tableName", parent: name, min: 3)
            try self.validate(self.tableName, name: "tableName", parent: name, pattern: "^[a-zA-Z0-9_.-]+$")
        }

        private enum CodingKeys: String, CodingKey {
            case tableName = "TableName"
        }
    }

    public struct DescribeTableOutput: AWSDecodableShape {
        /// The properties of the table.
        public let table: TableDescription?

        public init(table: TableDescription? = nil) {
            self.table = table
        }

        private enum CodingKeys: String, CodingKey {
            case table = "Table"
        }
    }

    public struct DescribeTableReplicaAutoScalingInput: AWSEncodableShape {
        /// The name of the table.
        public let tableName: String

        public init(tableName: String) {
            self.tableName = tableName
        }

        public func validate(name: String) throws {
            try self.validate(self.tableName, name: "tableName", parent: name, max: 255)
            try self.validate(self.tableName, name: "tableName", parent: name, min: 3)
            try self.validate(self.tableName, name: "tableName", parent: name, pattern: "^[a-zA-Z0-9_.-]+$")
        }

        private enum CodingKeys: String, CodingKey {
            case tableName = "TableName"
        }
    }

    public struct DescribeTableReplicaAutoScalingOutput: AWSDecodableShape {
        /// Represents the auto scaling properties of the table.
        public let tableAutoScalingDescription: TableAutoScalingDescription?

        public init(tableAutoScalingDescription: TableAutoScalingDescription? = nil) {
            self.tableAutoScalingDescription = tableAutoScalingDescription
        }

        private enum CodingKeys: String, CodingKey {
            case tableAutoScalingDescription = "TableAutoScalingDescription"
        }
    }

    public struct DescribeTimeToLiveInput: AWSEncodableShape {
        /// The name of the table to be described.
        public let tableName: String

        public init(tableName: String) {
            self.tableName = tableName
        }

        public func validate(name: String) throws {
            try self.validate(self.tableName, name: "tableName", parent: name, max: 255)
            try self.validate(self.tableName, name: "tableName", parent: name, min: 3)
            try self.validate(self.tableName, name: "tableName", parent: name, pattern: "^[a-zA-Z0-9_.-]+$")
        }

        private enum CodingKeys: String, CodingKey {
            case tableName = "TableName"
        }
    }

    public struct DescribeTimeToLiveOutput: AWSDecodableShape {
        public let timeToLiveDescription: TimeToLiveDescription?

        public init(timeToLiveDescription: TimeToLiveDescription? = nil) {
            self.timeToLiveDescription = timeToLiveDescription
        }

        private enum CodingKeys: String, CodingKey {
            case timeToLiveDescription = "TimeToLiveDescription"
        }
    }

    public struct Endpoint: AWSDecodableShape {
        /// IP address of the endpoint.
        public let address: String
        /// Endpoint cache time to live (TTL) value.
        public let cachePeriodInMinutes: Int64

        public init(address: String, cachePeriodInMinutes: Int64) {
            self.address = address
            self.cachePeriodInMinutes = cachePeriodInMinutes
        }

        private enum CodingKeys: String, CodingKey {
            case address = "Address"
            case cachePeriodInMinutes = "CachePeriodInMinutes"
        }
    }

    public struct ExecuteStatementInput: AWSEncodableShape {
        /// The consistency of a read operation. If set to true, then a strongly consistent read is used; otherwise, an eventually consistent read is used.
        public let consistentRead: Bool?
        /// Set this value to get remaining results, if NextToken was returned in the statement response.
        public let nextToken: String?
        /// The parameters for the PartiQL statement, if any.
        public let parameters: [AttributeValue]?
        /// The PartiQL statement representing the operation to run.
        public let statement: String

        public init(consistentRead: Bool? = nil, nextToken: String? = nil, parameters: [AttributeValue]? = nil, statement: String) {
            self.consistentRead = consistentRead
            self.nextToken = nextToken
            self.parameters = parameters
            self.statement = statement
        }

        public func validate(name: String) throws {
            try self.validate(self.nextToken, name: "nextToken", parent: name, max: 32768)
            try self.validate(self.nextToken, name: "nextToken", parent: name, min: 1)
            try self.parameters?.forEach {
                try $0.validate(name: "\(name).parameters[]")
            }
            try self.validate(self.parameters, name: "parameters", parent: name, min: 1)
            try self.validate(self.statement, name: "statement", parent: name, max: 8192)
            try self.validate(self.statement, name: "statement", parent: name, min: 1)
        }

        private enum CodingKeys: String, CodingKey {
            case consistentRead = "ConsistentRead"
            case nextToken = "NextToken"
            case parameters = "Parameters"
            case statement = "Statement"
        }
    }

    public struct ExecuteStatementOutput: AWSDecodableShape {
        /// If a read operation was used, this property will contain the result of the reade operation; a map of attribute names and their values. For the write operations this value will be empty.
        public let items: [[String: AttributeValue]]?
        /// If the response of a read request exceeds the response payload limit DynamoDB will set this value in the response. If set, you can use that this value in the subsequent request to get the remaining results.
        public let nextToken: String?

        public init(items: [[String: AttributeValue]]? = nil, nextToken: String? = nil) {
            self.items = items
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case items = "Items"
            case nextToken = "NextToken"
        }
    }

    public struct ExecuteTransactionInput: AWSEncodableShape {
        /// Set this value to get remaining results, if NextToken was returned in the statement response.
        public let clientRequestToken: String?
        /// The list of PartiQL statements representing the transaction to run.
        public let transactStatements: [ParameterizedStatement]

        public init(clientRequestToken: String? = ExecuteTransactionInput.idempotencyToken(), transactStatements: [ParameterizedStatement]) {
            self.clientRequestToken = clientRequestToken
            self.transactStatements = transactStatements
        }

        public func validate(name: String) throws {
            try self.validate(self.clientRequestToken, name: "clientRequestToken", parent: name, max: 36)
            try self.validate(self.clientRequestToken, name: "clientRequestToken", parent: name, min: 1)
            try self.transactStatements.forEach {
                try $0.validate(name: "\(name).transactStatements[]")
            }
            try self.validate(self.transactStatements, name: "transactStatements", parent: name, max: 25)
            try self.validate(self.transactStatements, name: "transactStatements", parent: name, min: 1)
        }

        private enum CodingKeys: String, CodingKey {
            case clientRequestToken = "ClientRequestToken"
            case transactStatements = "TransactStatements"
        }
    }

    public struct ExecuteTransactionOutput: AWSDecodableShape {
        /// The response to a PartiQL transaction.
        public let responses: [ItemResponse]?

        public init(responses: [ItemResponse]? = nil) {
            self.responses = responses
        }

        private enum CodingKeys: String, CodingKey {
            case responses = "Responses"
        }
    }

    public struct ExpectedAttributeValue: AWSEncodableShape {
        /// One or more values to evaluate against the supplied attribute. The number of values in the list depends on the ComparisonOperator being used. For type Number, value comparisons are numeric. String value comparisons for greater than, equals, or less than are based on ASCII character code values. For example, a is greater than A, and a is greater than B. For a list of code values, see http://en.wikipedia.org/wiki/ASCII#ASCII_printable_characters. For Binary, DynamoDB treats each byte of the binary data as unsigned when it compares binary values. For information on specifying data types in JSON, see JSON Data Format in the Amazon DynamoDB Developer Guide.
        public let attributeValueList: [AttributeValue]?
        /// A comparator for evaluating attributes in the AttributeValueList. For example, equals, greater than, less than, etc. The following comparison operators are available:  EQ | NE | LE | LT | GE | GT | NOT_NULL | NULL | CONTAINS | NOT_CONTAINS | BEGINS_WITH | IN | BETWEEN  The following are descriptions of each comparison operator.    EQ : Equal. EQ is supported for all data types, including lists and maps.  AttributeValueList can contain only one AttributeValue element of type String, Number, Binary, String Set, Number Set, or Binary Set. If an item contains an AttributeValue element of a different type than the one provided in the request, the value does not match. For example, {"S":"6"} does not equal {"N":"6"}. Also, {"N":"6"} does not equal {"NS":["6", "2", "1"]}.     NE : Not equal. NE is supported for all data types, including lists and maps.  AttributeValueList can contain only one AttributeValue of type String, Number, Binary, String Set, Number Set, or Binary Set. If an item contains an AttributeValue of a different type than the one provided in the request, the value does not match. For example, {"S":"6"} does not equal {"N":"6"}. Also, {"N":"6"} does not equal {"NS":["6", "2", "1"]}.     LE : Less than or equal.   AttributeValueList can contain only one AttributeValue element of type String, Number, or Binary (not a set type). If an item contains an AttributeValue element of a different type than the one provided in the request, the value does not match. For example, {"S":"6"} does not equal {"N":"6"}. Also, {"N":"6"} does not compare to {"NS":["6", "2", "1"]}.     LT : Less than.   AttributeValueList can contain only one AttributeValue of type String, Number, or Binary (not a set type). If an item contains an AttributeValue element of a different type than the one provided in the request, the value does not match. For example, {"S":"6"} does not equal {"N":"6"}. Also, {"N":"6"} does not compare to {"NS":["6", "2", "1"]}.     GE : Greater than or equal.   AttributeValueList can contain only one AttributeValue element of type String, Number, or Binary (not a set type). If an item contains an AttributeValue element of a different type than the one provided in the request, the value does not match. For example, {"S":"6"} does not equal {"N":"6"}. Also, {"N":"6"} does not compare to {"NS":["6", "2", "1"]}.     GT : Greater than.   AttributeValueList can contain only one AttributeValue element of type String, Number, or Binary (not a set type). If an item contains an AttributeValue element of a different type than the one provided in the request, the value does not match. For example, {"S":"6"} does not equal {"N":"6"}. Also, {"N":"6"} does not compare to {"NS":["6", "2", "1"]}.     NOT_NULL : The attribute exists. NOT_NULL is supported for all data types, including lists and maps.  This operator tests for the existence of an attribute, not its data type.  If the data type of attribute "a" is null, and you evaluate it using NOT_NULL, the result is a Boolean true. This result is because the attribute "a" exists; its data type is not relevant to the NOT_NULL comparison operator.     NULL : The attribute does not exist. NULL is supported for all data types, including lists and maps.  This operator tests for the nonexistence of an attribute, not its data type.  If the data type of attribute "a" is null, and you evaluate it using NULL, the result is a Boolean false. This is because the attribute "a" exists; its data type is not relevant to the NULL comparison operator.     CONTAINS : Checks for a subsequence, or value in a set.  AttributeValueList can contain only one AttributeValue element of type String, Number, or Binary (not a set type). If the target attribute of the comparison is of type String, then the operator checks for a substring match. If the target attribute of the comparison is of type Binary, then the operator looks for a subsequence of the target that matches the input. If the target attribute of the comparison is a set ("SS", "NS", or "BS"), then the operator evaluates to true if it finds an exact match with any member of the set. CONTAINS is supported for lists: When evaluating "a CONTAINS b", "a" can be a list; however, "b" cannot be a set, a map, or a list.    NOT_CONTAINS : Checks for absence of a subsequence, or absence of a value in a set.  AttributeValueList can contain only one AttributeValue element of type String, Number, or Binary (not a set type). If the target attribute of the comparison is a String, then the operator checks for the absence of a substring match. If the target attribute of the comparison is Binary, then the operator checks for the absence of a subsequence of the target that matches the input. If the target attribute of the comparison is a set ("SS", "NS", or "BS"), then the operator evaluates to true if it does not find an exact match with any member of the set. NOT_CONTAINS is supported for lists: When evaluating "a NOT CONTAINS b", "a" can be a list; however, "b" cannot be a set, a map, or a list.    BEGINS_WITH : Checks for a prefix.   AttributeValueList can contain only one AttributeValue of type String or Binary (not a Number or a set type). The target attribute of the comparison must be of type String or Binary (not a Number or a set type).     IN : Checks for matching elements in a list.  AttributeValueList can contain one or more AttributeValue elements of type String, Number, or Binary. These attributes are compared against an existing attribute of an item. If any elements of the input are equal to the item attribute, the expression evaluates to true.    BETWEEN : Greater than or equal to the first value, and less than or equal to the second value.   AttributeValueList must contain two AttributeValue elements of the same type, either String, Number, or Binary (not a set type). A target attribute matches if the target value is greater than, or equal to, the first element and less than, or equal to, the second element. If an item contains an AttributeValue element of a different type than the one provided in the request, the value does not match. For example, {"S":"6"} does not compare to {"N":"6"}. Also, {"N":"6"} does not compare to {"NS":["6", "2", "1"]}
        public let comparisonOperator: ComparisonOperator?
        /// Causes DynamoDB to evaluate the value before attempting a conditional operation:   If Exists is true, DynamoDB will check to see if that attribute value already exists in the table. If it is found, then the operation succeeds. If it is not found, the operation fails with a ConditionCheckFailedException.   If Exists is false, DynamoDB assumes that the attribute value does not exist in the table. If in fact the value does not exist, then the assumption is valid and the operation succeeds. If the value is found, despite the assumption that it does not exist, the operation fails with a ConditionCheckFailedException.   The default setting for Exists is true. If you supply a Value all by itself, DynamoDB assumes the attribute exists: You don't have to set Exists to true, because it is implied. DynamoDB returns a ValidationException if:    Exists is true but there is no Value to check. (You expect a value to exist, but don't specify what that value is.)    Exists is false but you also provide a Value. (You cannot expect an attribute to have a value, while also expecting it not to exist.)
        public let exists: Bool?
        /// Represents the data for the expected attribute. Each attribute value is described as a name-value pair.  The name is the data type, and the value is the data itself. For more information, see Data Types in the Amazon DynamoDB Developer Guide.
        public let value: AttributeValue?

        public init(attributeValueList: [AttributeValue]? = nil, comparisonOperator: ComparisonOperator? = nil, exists: Bool? = nil, value: AttributeValue? = nil) {
            self.attributeValueList = attributeValueList
            self.comparisonOperator = comparisonOperator
            self.exists = exists
            self.value = value
        }

        public func validate(name: String) throws {
            try self.attributeValueList?.forEach {
                try $0.validate(name: "\(name).attributeValueList[]")
            }
            try self.value?.validate(name: "\(name).value")
        }

        private enum CodingKeys: String, CodingKey {
            case attributeValueList = "AttributeValueList"
            case comparisonOperator = "ComparisonOperator"
            case exists = "Exists"
            case value = "Value"
        }
    }

    public struct ExportDescription: AWSDecodableShape {
        /// The billable size of the table export.
        public let billedSizeBytes: Int64?
        /// The client token that was provided for the export task. A client token makes calls to ExportTableToPointInTimeInput idempotent, meaning that multiple identical calls have the same effect as one single call.
        public let clientToken: String?
        /// The time at which the export task completed.
        public let endTime: Date?
        /// The Amazon Resource Name (ARN) of the table export.
        public let exportArn: String?
        /// The format of the exported data. Valid values for ExportFormat are DYNAMODB_JSON or ION.
        public let exportFormat: ExportFormat?
        /// The name of the manifest file for the export task.
        public let exportManifest: String?
        /// Export can be in one of the following states: IN_PROGRESS, COMPLETED, or FAILED.
        public let exportStatus: ExportStatus?
        /// Point in time from which table data was exported.
        public let exportTime: Date?
        /// Status code for the result of the failed export.
        public let failureCode: String?
        /// Export failure reason description.
        public let failureMessage: String?
        /// The number of items exported.
        public let itemCount: Int64?
        /// The name of the Amazon S3 bucket containing the export.
        public let s3Bucket: String?
        /// The ID of the AWS account that owns the bucket containing the export.
        public let s3BucketOwner: String?
        /// The Amazon S3 bucket prefix used as the file name and path of the exported snapshot.
        public let s3Prefix: String?
        /// Type of encryption used on the bucket where export data is stored. Valid values for S3SseAlgorithm are:    AES256 - server-side encryption with Amazon S3 managed keys    KMS - server-side encryption with AWS KMS managed keys
        public let s3SseAlgorithm: S3SseAlgorithm?
        /// The ID of the AWS KMS managed key used to encrypt the S3 bucket where export data is stored (if applicable).
        public let s3SseKmsKeyId: String?
        /// The time at which the export task began.
        public let startTime: Date?
        /// The Amazon Resource Name (ARN) of the table that was exported.
        public let tableArn: String?
        /// Unique ID of the table that was exported.
        public let tableId: String?

        public init(billedSizeBytes: Int64? = nil, clientToken: String? = nil, endTime: Date? = nil, exportArn: String? = nil, exportFormat: ExportFormat? = nil, exportManifest: String? = nil, exportStatus: ExportStatus? = nil, exportTime: Date? = nil, failureCode: String? = nil, failureMessage: String? = nil, itemCount: Int64? = nil, s3Bucket: String? = nil, s3BucketOwner: String? = nil, s3Prefix: String? = nil, s3SseAlgorithm: S3SseAlgorithm? = nil, s3SseKmsKeyId: String? = nil, startTime: Date? = nil, tableArn: String? = nil, tableId: String? = nil) {
            self.billedSizeBytes = billedSizeBytes
            self.clientToken = clientToken
            self.endTime = endTime
            self.exportArn = exportArn
            self.exportFormat = exportFormat
            self.exportManifest = exportManifest
            self.exportStatus = exportStatus
            self.exportTime = exportTime
            self.failureCode = failureCode
            self.failureMessage = failureMessage
            self.itemCount = itemCount
            self.s3Bucket = s3Bucket
            self.s3BucketOwner = s3BucketOwner
            self.s3Prefix = s3Prefix
            self.s3SseAlgorithm = s3SseAlgorithm
            self.s3SseKmsKeyId = s3SseKmsKeyId
            self.startTime = startTime
            self.tableArn = tableArn
            self.tableId = tableId
        }

        private enum CodingKeys: String, CodingKey {
            case billedSizeBytes = "BilledSizeBytes"
            case clientToken = "ClientToken"
            case endTime = "EndTime"
            case exportArn = "ExportArn"
            case exportFormat = "ExportFormat"
            case exportManifest = "ExportManifest"
            case exportStatus = "ExportStatus"
            case exportTime = "ExportTime"
            case failureCode = "FailureCode"
            case failureMessage = "FailureMessage"
            case itemCount = "ItemCount"
            case s3Bucket = "S3Bucket"
            case s3BucketOwner = "S3BucketOwner"
            case s3Prefix = "S3Prefix"
            case s3SseAlgorithm = "S3SseAlgorithm"
            case s3SseKmsKeyId = "S3SseKmsKeyId"
            case startTime = "StartTime"
            case tableArn = "TableArn"
            case tableId = "TableId"
        }
    }

    public struct ExportSummary: AWSDecodableShape {
        /// The Amazon Resource Name (ARN) of the export.
        public let exportArn: String?
        /// Export can be in one of the following states: IN_PROGRESS, COMPLETED, or FAILED.
        public let exportStatus: ExportStatus?

        public init(exportArn: String? = nil, exportStatus: ExportStatus? = nil) {
            self.exportArn = exportArn
            self.exportStatus = exportStatus
        }

        private enum CodingKeys: String, CodingKey {
            case exportArn = "ExportArn"
            case exportStatus = "ExportStatus"
        }
    }

    public struct ExportTableToPointInTimeInput: AWSEncodableShape {
        /// Providing a ClientToken makes the call to ExportTableToPointInTimeInput idempotent, meaning that multiple identical calls have the same effect as one single call. A client token is valid for 8 hours after the first request that uses it is completed. After 8 hours, any request with the same client token is treated as a new request. Do not resubmit the same request with the same client token for more than 8 hours, or the result might not be idempotent. If you submit a request with the same client token but a change in other parameters within the 8-hour idempotency window, DynamoDB returns an IdempotentParameterMismatch exception.
        public let clientToken: String?
        /// The format for the exported data. Valid values for ExportFormat are DYNAMODB_JSON or ION.
        public let exportFormat: ExportFormat?
        /// Time in the past from which to export table data. The table export will be a snapshot of the table's state at this point in time.
        public let exportTime: Date?
        /// The name of the Amazon S3 bucket to export the snapshot to.
        public let s3Bucket: String
        /// The ID of the AWS account that owns the bucket the export will be stored in.
        public let s3BucketOwner: String?
        /// The Amazon S3 bucket prefix to use as the file name and path of the exported snapshot.
        public let s3Prefix: String?
        /// Type of encryption used on the bucket where export data will be stored. Valid values for S3SseAlgorithm are:    AES256 - server-side encryption with Amazon S3 managed keys    KMS - server-side encryption with AWS KMS managed keys
        public let s3SseAlgorithm: S3SseAlgorithm?
        /// The ID of the AWS KMS managed key used to encrypt the S3 bucket where export data will be stored (if applicable).
        public let s3SseKmsKeyId: String?
        /// The Amazon Resource Name (ARN) associated with the table to export.
        public let tableArn: String

        public init(clientToken: String? = ExportTableToPointInTimeInput.idempotencyToken(), exportFormat: ExportFormat? = nil, exportTime: Date? = nil, s3Bucket: String, s3BucketOwner: String? = nil, s3Prefix: String? = nil, s3SseAlgorithm: S3SseAlgorithm? = nil, s3SseKmsKeyId: String? = nil, tableArn: String) {
            self.clientToken = clientToken
            self.exportFormat = exportFormat
            self.exportTime = exportTime
            self.s3Bucket = s3Bucket
            self.s3BucketOwner = s3BucketOwner
            self.s3Prefix = s3Prefix
            self.s3SseAlgorithm = s3SseAlgorithm
            self.s3SseKmsKeyId = s3SseKmsKeyId
            self.tableArn = tableArn
        }

        public func validate(name: String) throws {
            try self.validate(self.s3SseKmsKeyId, name: "s3SseKmsKeyId", parent: name, max: 2048)
            try self.validate(self.s3SseKmsKeyId, name: "s3SseKmsKeyId", parent: name, min: 1)
        }

        private enum CodingKeys: String, CodingKey {
            case clientToken = "ClientToken"
            case exportFormat = "ExportFormat"
            case exportTime = "ExportTime"
            case s3Bucket = "S3Bucket"
            case s3BucketOwner = "S3BucketOwner"
            case s3Prefix = "S3Prefix"
            case s3SseAlgorithm = "S3SseAlgorithm"
            case s3SseKmsKeyId = "S3SseKmsKeyId"
            case tableArn = "TableArn"
        }
    }

    public struct ExportTableToPointInTimeOutput: AWSDecodableShape {
        /// Contains a description of the table export.
        public let exportDescription: ExportDescription?

        public init(exportDescription: ExportDescription? = nil) {
            self.exportDescription = exportDescription
        }

        private enum CodingKeys: String, CodingKey {
            case exportDescription = "ExportDescription"
        }
    }

    public struct FailureException: AWSDecodableShape {
        /// Description of the failure.
        public let exceptionDescription: String?
        /// Exception name.
        public let exceptionName: String?

        public init(exceptionDescription: String? = nil, exceptionName: String? = nil) {
            self.exceptionDescription = exceptionDescription
            self.exceptionName = exceptionName
        }

        private enum CodingKeys: String, CodingKey {
            case exceptionDescription = "ExceptionDescription"
            case exceptionName = "ExceptionName"
        }
    }

    public struct Get: AWSEncodableShape {
        /// One or more substitution tokens for attribute names in the ProjectionExpression parameter.
        public let expressionAttributeNames: [String: String]?
        /// A map of attribute names to AttributeValue objects that specifies the primary key of the item to retrieve.
        public let key: [String: AttributeValue]
        /// A string that identifies one or more attributes of the specified item to retrieve from the table.  The attributes in the expression must be separated by commas. If no attribute names are specified, then all attributes of the specified item are returned. If any of the requested attributes are not found, they do not appear in the result.
        public let projectionExpression: String?
        /// The name of the table from which to retrieve the specified item.
        public let tableName: String

        public init(expressionAttributeNames: [String: String]? = nil, key: [String: AttributeValue], projectionExpression: String? = nil, tableName: String) {
            self.expressionAttributeNames = expressionAttributeNames
            self.key = key
            self.projectionExpression = projectionExpression
            self.tableName = tableName
        }

        public func validate(name: String) throws {
            try self.expressionAttributeNames?.forEach {
                try validate($0.value, name: "expressionAttributeNames[\"\($0.key)\"]", parent: name, max: 65535)
            }
            try self.key.forEach {
                try validate($0.key, name: "key.key", parent: name, max: 65535)
                try $0.value.validate(name: "\(name).key[\"\($0.key)\"]")
            }
            try self.validate(self.tableName, name: "tableName", parent: name, max: 255)
            try self.validate(self.tableName, name: "tableName", parent: name, min: 3)
            try self.validate(self.tableName, name: "tableName", parent: name, pattern: "^[a-zA-Z0-9_.-]+$")
        }

        private enum CodingKeys: String, CodingKey {
            case expressionAttributeNames = "ExpressionAttributeNames"
            case key = "Key"
            case projectionExpression = "ProjectionExpression"
            case tableName = "TableName"
        }
    }

    public struct GetItemInput: AWSEncodableShape {
        /// This is a legacy parameter.  Use ProjectionExpression instead.  For more information, see AttributesToGet in the Amazon DynamoDB Developer Guide.
        public let attributesToGet: [String]?
        /// Determines the read consistency model:  If set to true, then the operation uses strongly consistent reads; otherwise, the operation uses eventually consistent reads.
        public let consistentRead: Bool?
        /// One or more substitution tokens for attribute names in an expression. The following are some use cases for using ExpressionAttributeNames:   To access an attribute whose name conflicts with a DynamoDB reserved word.   To create a placeholder for repeating occurrences of an attribute name in an expression.   To prevent special characters in an attribute name from being misinterpreted in an expression.   Use the # character in an expression to dereference an attribute name. For example, consider the following attribute name:    Percentile    The name of this attribute conflicts with a reserved word, so it cannot be used directly in an expression. (For the complete list of reserved words, see Reserved Words in the Amazon DynamoDB Developer Guide). To work around this, you could specify the following for ExpressionAttributeNames:    {"#P":"Percentile"}    You could then use this substitution in an expression, as in this example:    #P = :val     Tokens that begin with the : character are expression attribute values, which are placeholders for the actual value at runtime.  For more information on expression attribute names, see Specifying Item Attributes in the Amazon DynamoDB Developer Guide.
        public let expressionAttributeNames: [String: String]?
        /// A map of attribute names to AttributeValue objects, representing the primary key of the item to retrieve. For the primary key, you must provide all of the attributes. For example, with a simple primary key, you only need to provide a value for the partition key. For a composite primary key, you must provide values for both the partition key and the sort key.
        public let key: [String: AttributeValue]
        /// A string that identifies one or more attributes to retrieve from the table. These attributes can include scalars, sets, or elements of a JSON document. The attributes in the expression must be separated by commas. If no attribute names are specified, then all attributes are returned. If any of the requested attributes are not found, they do not appear in the result. For more information, see Specifying Item Attributes in the Amazon DynamoDB Developer Guide.
        public let projectionExpression: String?
        public let returnConsumedCapacity: ReturnConsumedCapacity?
        /// The name of the table containing the requested item.
        public let tableName: String

        public init(attributesToGet: [String]? = nil, consistentRead: Bool? = nil, expressionAttributeNames: [String: String]? = nil, key: [String: AttributeValue], projectionExpression: String? = nil, returnConsumedCapacity: ReturnConsumedCapacity? = nil, tableName: String) {
            self.attributesToGet = attributesToGet
            self.consistentRead = consistentRead
            self.expressionAttributeNames = expressionAttributeNames
            self.key = key
            self.projectionExpression = projectionExpression
            self.returnConsumedCapacity = returnConsumedCapacity
            self.tableName = tableName
        }

        public func validate(name: String) throws {
            try self.attributesToGet?.forEach {
                try validate($0, name: "attributesToGet[]", parent: name, max: 65535)
            }
            try self.validate(self.attributesToGet, name: "attributesToGet", parent: name, min: 1)
            try self.expressionAttributeNames?.forEach {
                try validate($0.value, name: "expressionAttributeNames[\"\($0.key)\"]", parent: name, max: 65535)
            }
            try self.key.forEach {
                try validate($0.key, name: "key.key", parent: name, max: 65535)
                try $0.value.validate(name: "\(name).key[\"\($0.key)\"]")
            }
            try self.validate(self.tableName, name: "tableName", parent: name, max: 255)
            try self.validate(self.tableName, name: "tableName", parent: name, min: 3)
            try self.validate(self.tableName, name: "tableName", parent: name, pattern: "^[a-zA-Z0-9_.-]+$")
        }

        private enum CodingKeys: String, CodingKey {
            case attributesToGet = "AttributesToGet"
            case consistentRead = "ConsistentRead"
            case expressionAttributeNames = "ExpressionAttributeNames"
            case key = "Key"
            case projectionExpression = "ProjectionExpression"
            case returnConsumedCapacity = "ReturnConsumedCapacity"
            case tableName = "TableName"
        }
    }

    public struct GetItemOutput: AWSDecodableShape {
        /// The capacity units consumed by the GetItem operation. The data returned includes the total provisioned throughput consumed, along with statistics for the table and any indexes involved in the operation. ConsumedCapacity is only returned if the ReturnConsumedCapacity parameter was specified. For more information, see Read/Write Capacity Mode in the Amazon DynamoDB Developer Guide.
        public let consumedCapacity: ConsumedCapacity?
        /// A map of attribute names to AttributeValue objects, as specified by ProjectionExpression.
        public let item: [String: AttributeValue]?

        public init(consumedCapacity: ConsumedCapacity? = nil, item: [String: AttributeValue]? = nil) {
            self.consumedCapacity = consumedCapacity
            self.item = item
        }

        private enum CodingKeys: String, CodingKey {
            case consumedCapacity = "ConsumedCapacity"
            case item = "Item"
        }
    }

    public struct GlobalSecondaryIndex: AWSEncodableShape {
        /// The name of the global secondary index. The name must be unique among all other indexes on this table.
        public let indexName: String
        /// The complete key schema for a global secondary index, which consists of one or more pairs of attribute names and key types:    HASH - partition key    RANGE - sort key    The partition key of an item is also known as its hash attribute.  The term "hash attribute" derives from DynamoDB's usage of an internal hash function to evenly distribute data items across partitions, based on their partition key values. The sort key of an item is also known as its range attribute. The term "range attribute" derives from the way DynamoDB stores items with the same partition key physically close together, in sorted order by the sort key value.
        public let keySchema: [KeySchemaElement]
        /// Represents attributes that are copied (projected) from the table into the global secondary index. These are in addition to the primary key attributes and index key attributes, which are automatically projected.
        public let projection: Projection
        /// Represents the provisioned throughput settings for the specified global secondary index. For current minimum and maximum provisioned throughput values, see Service, Account, and Table Quotas in the Amazon DynamoDB Developer Guide.
        public let provisionedThroughput: ProvisionedThroughput?

        public init(indexName: String, keySchema: [KeySchemaElement], projection: Projection, provisionedThroughput: ProvisionedThroughput? = nil) {
            self.indexName = indexName
            self.keySchema = keySchema
            self.projection = projection
            self.provisionedThroughput = provisionedThroughput
        }

        public func validate(name: String) throws {
            try self.validate(self.indexName, name: "indexName", parent: name, max: 255)
            try self.validate(self.indexName, name: "indexName", parent: name, min: 3)
            try self.validate(self.indexName, name: "indexName", parent: name, pattern: "^[a-zA-Z0-9_.-]+$")
            try self.keySchema.forEach {
                try $0.validate(name: "\(name).keySchema[]")
            }
            try self.validate(self.keySchema, name: "keySchema", parent: name, max: 2)
            try self.validate(self.keySchema, name: "keySchema", parent: name, min: 1)
            try self.projection.validate(name: "\(name).projection")
            try self.provisionedThroughput?.validate(name: "\(name).provisionedThroughput")
        }

        private enum CodingKeys: String, CodingKey {
            case indexName = "IndexName"
            case keySchema = "KeySchema"
            case projection = "Projection"
            case provisionedThroughput = "ProvisionedThroughput"
        }
    }

    public struct GlobalSecondaryIndexAutoScalingUpdate: AWSEncodableShape {
        /// The name of the global secondary index.
        public let indexName: String?
        public let provisionedWriteCapacityAutoScalingUpdate: AutoScalingSettingsUpdate?

        public init(indexName: String? = nil, provisionedWriteCapacityAutoScalingUpdate: AutoScalingSettingsUpdate? = nil) {
            self.indexName = indexName
            self.provisionedWriteCapacityAutoScalingUpdate = provisionedWriteCapacityAutoScalingUpdate
        }

        public func validate(name: String) throws {
            try self.validate(self.indexName, name: "indexName", parent: name, max: 255)
            try self.validate(self.indexName, name: "indexName", parent: name, min: 3)
            try self.validate(self.indexName, name: "indexName", parent: name, pattern: "^[a-zA-Z0-9_.-]+$")
            try self.provisionedWriteCapacityAutoScalingUpdate?.validate(name: "\(name).provisionedWriteCapacityAutoScalingUpdate")
        }

        private enum CodingKeys: String, CodingKey {
            case indexName = "IndexName"
            case provisionedWriteCapacityAutoScalingUpdate = "ProvisionedWriteCapacityAutoScalingUpdate"
        }
    }

    public struct GlobalSecondaryIndexDescription: AWSDecodableShape {
        /// Indicates whether the index is currently backfilling. Backfilling is the process of reading items from  the table and determining whether they can be added to the index. (Not all items will qualify:  For example, a partition key  cannot have any duplicate values.) If an item can be added to the index, DynamoDB will do so. After all items have been processed,  the backfilling operation is complete and Backfilling is false. You can delete an index that is being created during the Backfilling phase when IndexStatus is set to CREATING and Backfilling is true. You can't delete the index that is being created when IndexStatus is set to CREATING and Backfilling is false.   For indexes that were created during a CreateTable operation, the Backfilling attribute does not appear in the DescribeTable output.
        public let backfilling: Bool?
        /// The Amazon Resource Name (ARN) that uniquely identifies the index.
        public let indexArn: String?
        /// The name of the global secondary index.
        public let indexName: String?
        /// The total size of the specified index, in bytes. DynamoDB updates this value approximately every six hours. Recent changes might not be reflected in this value.
        public let indexSizeBytes: Int64?
        /// The current state of the global secondary index:    CREATING - The index is being created.    UPDATING - The index is being updated.    DELETING - The index is being deleted.    ACTIVE - The index is ready for use.
        public let indexStatus: IndexStatus?
        /// The number of items in the specified index. DynamoDB updates this value approximately every six hours. Recent changes might not be reflected in this value.
        public let itemCount: Int64?
        /// The complete key schema for a global secondary index, which consists of one or more pairs of attribute names and key types:    HASH - partition key    RANGE - sort key    The partition key of an item is also known as its hash attribute.  The term "hash attribute" derives from DynamoDB's usage of an internal hash function to evenly distribute data items across partitions, based on their partition key values. The sort key of an item is also known as its range attribute. The term "range attribute" derives from the way DynamoDB stores items with the same partition key physically close together, in sorted order by the sort key value.
        public let keySchema: [KeySchemaElement]?
        /// Represents attributes that are copied (projected) from the table into the global secondary index. These are in addition to the primary key attributes and index key attributes, which are automatically projected.
        public let projection: Projection?
        /// Represents the provisioned throughput settings for the specified global secondary index. For current minimum and maximum provisioned throughput values, see Service, Account, and Table Quotas in the Amazon DynamoDB Developer Guide.
        public let provisionedThroughput: ProvisionedThroughputDescription?

        public init(backfilling: Bool? = nil, indexArn: String? = nil, indexName: String? = nil, indexSizeBytes: Int64? = nil, indexStatus: IndexStatus? = nil, itemCount: Int64? = nil, keySchema: [KeySchemaElement]? = nil, projection: Projection? = nil, provisionedThroughput: ProvisionedThroughputDescription? = nil) {
            self.backfilling = backfilling
            self.indexArn = indexArn
            self.indexName = indexName
            self.indexSizeBytes = indexSizeBytes
            self.indexStatus = indexStatus
            self.itemCount = itemCount
            self.keySchema = keySchema
            self.projection = projection
            self.provisionedThroughput = provisionedThroughput
        }

        private enum CodingKeys: String, CodingKey {
            case backfilling = "Backfilling"
            case indexArn = "IndexArn"
            case indexName = "IndexName"
            case indexSizeBytes = "IndexSizeBytes"
            case indexStatus = "IndexStatus"
            case itemCount = "ItemCount"
            case keySchema = "KeySchema"
            case projection = "Projection"
            case provisionedThroughput = "ProvisionedThroughput"
        }
    }

    public struct GlobalSecondaryIndexInfo: AWSDecodableShape {
        /// The name of the global secondary index.
        public let indexName: String?
        /// The complete key schema for a global secondary index, which consists of one or more pairs of attribute names and key types:    HASH - partition key    RANGE - sort key    The partition key of an item is also known as its hash attribute.  The term "hash attribute" derives from DynamoDB's usage of an internal hash function to evenly distribute data items across partitions, based on their partition key values. The sort key of an item is also known as its range attribute. The term "range attribute" derives from the way DynamoDB stores items with the same partition key physically close together, in sorted order by the sort key value.
        public let keySchema: [KeySchemaElement]?
        /// Represents attributes that are copied (projected) from the table into the global secondary index. These are in addition to the primary key attributes and index key attributes, which are automatically projected.
        public let projection: Projection?
        /// Represents the provisioned throughput settings for the specified global secondary index.
        public let provisionedThroughput: ProvisionedThroughput?

        public init(indexName: String? = nil, keySchema: [KeySchemaElement]? = nil, projection: Projection? = nil, provisionedThroughput: ProvisionedThroughput? = nil) {
            self.indexName = indexName
            self.keySchema = keySchema
            self.projection = projection
            self.provisionedThroughput = provisionedThroughput
        }

        private enum CodingKeys: String, CodingKey {
            case indexName = "IndexName"
            case keySchema = "KeySchema"
            case projection = "Projection"
            case provisionedThroughput = "ProvisionedThroughput"
        }
    }

    public struct GlobalSecondaryIndexUpdate: AWSEncodableShape {
        /// The parameters required for creating a global secondary index on an existing table:    IndexName      KeySchema      AttributeDefinitions      Projection      ProvisionedThroughput
        public let create: CreateGlobalSecondaryIndexAction?
        /// The name of an existing global secondary index to be removed.
        public let delete: DeleteGlobalSecondaryIndexAction?
        /// The name of an existing global secondary index, along with new provisioned throughput settings to be applied to that index.
        public let update: UpdateGlobalSecondaryIndexAction?

        public init(create: CreateGlobalSecondaryIndexAction? = nil, delete: DeleteGlobalSecondaryIndexAction? = nil, update: UpdateGlobalSecondaryIndexAction? = nil) {
            self.create = create
            self.delete = delete
            self.update = update
        }

        public func validate(name: String) throws {
            try self.create?.validate(name: "\(name).create")
            try self.delete?.validate(name: "\(name).delete")
            try self.update?.validate(name: "\(name).update")
        }

        private enum CodingKeys: String, CodingKey {
            case create = "Create"
            case delete = "Delete"
            case update = "Update"
        }
    }

    public struct GlobalTable: AWSDecodableShape {
        /// The global table name.
        public let globalTableName: String?
        /// The Regions where the global table has replicas.
        public let replicationGroup: [Replica]?

        public init(globalTableName: String? = nil, replicationGroup: [Replica]? = nil) {
            self.globalTableName = globalTableName
            self.replicationGroup = replicationGroup
        }

        private enum CodingKeys: String, CodingKey {
            case globalTableName = "GlobalTableName"
            case replicationGroup = "ReplicationGroup"
        }
    }

    public struct GlobalTableDescription: AWSDecodableShape {
        /// The creation time of the global table.
        public let creationDateTime: Date?
        /// The unique identifier of the global table.
        public let globalTableArn: String?
        /// The global table name.
        public let globalTableName: String?
        /// The current state of the global table:    CREATING - The global table is being created.    UPDATING - The global table is being updated.    DELETING - The global table is being deleted.    ACTIVE - The global table is ready for use.
        public let globalTableStatus: GlobalTableStatus?
        /// The Regions where the global table has replicas.
        public let replicationGroup: [ReplicaDescription]?

        public init(creationDateTime: Date? = nil, globalTableArn: String? = nil, globalTableName: String? = nil, globalTableStatus: GlobalTableStatus? = nil, replicationGroup: [ReplicaDescription]? = nil) {
            self.creationDateTime = creationDateTime
            self.globalTableArn = globalTableArn
            self.globalTableName = globalTableName
            self.globalTableStatus = globalTableStatus
            self.replicationGroup = replicationGroup
        }

        private enum CodingKeys: String, CodingKey {
            case creationDateTime = "CreationDateTime"
            case globalTableArn = "GlobalTableArn"
            case globalTableName = "GlobalTableName"
            case globalTableStatus = "GlobalTableStatus"
            case replicationGroup = "ReplicationGroup"
        }
    }

    public struct GlobalTableGlobalSecondaryIndexSettingsUpdate: AWSEncodableShape {
        /// The name of the global secondary index. The name must be unique among all other indexes on this table.
        public let indexName: String
        /// Auto scaling settings for managing a global secondary index's write capacity units.
        public let provisionedWriteCapacityAutoScalingSettingsUpdate: AutoScalingSettingsUpdate?
        /// The maximum number of writes consumed per second before DynamoDB returns a ThrottlingException.
        public let provisionedWriteCapacityUnits: Int64?

        public init(indexName: String, provisionedWriteCapacityAutoScalingSettingsUpdate: AutoScalingSettingsUpdate? = nil, provisionedWriteCapacityUnits: Int64? = nil) {
            self.indexName = indexName
            self.provisionedWriteCapacityAutoScalingSettingsUpdate = provisionedWriteCapacityAutoScalingSettingsUpdate
            self.provisionedWriteCapacityUnits = provisionedWriteCapacityUnits
        }

        public func validate(name: String) throws {
            try self.validate(self.indexName, name: "indexName", parent: name, max: 255)
            try self.validate(self.indexName, name: "indexName", parent: name, min: 3)
            try self.validate(self.indexName, name: "indexName", parent: name, pattern: "^[a-zA-Z0-9_.-]+$")
            try self.provisionedWriteCapacityAutoScalingSettingsUpdate?.validate(name: "\(name).provisionedWriteCapacityAutoScalingSettingsUpdate")
            try self.validate(self.provisionedWriteCapacityUnits, name: "provisionedWriteCapacityUnits", parent: name, min: 1)
        }

        private enum CodingKeys: String, CodingKey {
            case indexName = "IndexName"
            case provisionedWriteCapacityAutoScalingSettingsUpdate = "ProvisionedWriteCapacityAutoScalingSettingsUpdate"
            case provisionedWriteCapacityUnits = "ProvisionedWriteCapacityUnits"
        }
    }

    public struct ItemCollectionMetrics: AWSDecodableShape {
        /// The partition key value of the item collection. This value is the same as the partition key value of the item.
        public let itemCollectionKey: [String: AttributeValue]?
        /// An estimate of item collection size, in gigabytes. This value is a two-element array containing a lower bound and an upper bound for the estimate. The estimate includes the size of all the items in the table, plus the size of all attributes projected into all of the local secondary indexes on that table. Use this estimate to measure whether a local secondary index is approaching its size limit. The estimate is subject to change over time; therefore, do not rely on the precision or accuracy of the estimate.
        public let sizeEstimateRangeGB: [Double]?

        public init(itemCollectionKey: [String: AttributeValue]? = nil, sizeEstimateRangeGB: [Double]? = nil) {
            self.itemCollectionKey = itemCollectionKey
            self.sizeEstimateRangeGB = sizeEstimateRangeGB
        }

        private enum CodingKeys: String, CodingKey {
            case itemCollectionKey = "ItemCollectionKey"
            case sizeEstimateRangeGB = "SizeEstimateRangeGB"
        }
    }

    public struct ItemResponse: AWSDecodableShape {
        /// Map of attribute data consisting of the data type and attribute value.
        public let item: [String: AttributeValue]?

        public init(item: [String: AttributeValue]? = nil) {
            self.item = item
        }

        private enum CodingKeys: String, CodingKey {
            case item = "Item"
        }
    }

    public struct KeySchemaElement: AWSEncodableShape & AWSDecodableShape {
        /// The name of a key attribute.
        public let attributeName: String
        /// The role that this key attribute will assume:    HASH - partition key    RANGE - sort key    The partition key of an item is also known as its hash attribute.  The term "hash attribute" derives from DynamoDB's usage of an internal hash function to evenly distribute data items across partitions, based on their partition key values. The sort key of an item is also known as its range attribute. The term "range attribute" derives from the way DynamoDB stores items with the same partition key physically close together, in sorted order by the sort key value.
        public let keyType: KeyType

        public init(attributeName: String, keyType: KeyType) {
            self.attributeName = attributeName
            self.keyType = keyType
        }

        public func validate(name: String) throws {
            try self.validate(self.attributeName, name: "attributeName", parent: name, max: 255)
            try self.validate(self.attributeName, name: "attributeName", parent: name, min: 1)
        }

        private enum CodingKeys: String, CodingKey {
            case attributeName = "AttributeName"
            case keyType = "KeyType"
        }
    }

    public struct KeysAndAttributes: AWSEncodableShape & AWSDecodableShape {
        /// This is a legacy parameter.  Use ProjectionExpression instead.  For more information, see Legacy Conditional Parameters in the Amazon DynamoDB Developer Guide.
        public let attributesToGet: [String]?
        /// The consistency of a read operation. If set to true, then a strongly consistent read is used; otherwise, an eventually consistent read is used.
        public let consistentRead: Bool?
        /// One or more substitution tokens for attribute names in an expression. The following are some use cases for using ExpressionAttributeNames:   To access an attribute whose name conflicts with a DynamoDB reserved word.   To create a placeholder for repeating occurrences of an attribute name in an expression.   To prevent special characters in an attribute name from being misinterpreted in an expression.   Use the # character in an expression to dereference an attribute name. For example, consider the following attribute name:    Percentile    The name of this attribute conflicts with a reserved word, so it cannot be used directly in an expression. (For the complete list of reserved words, see Reserved Words in the Amazon DynamoDB Developer Guide). To work around this, you could specify the following for ExpressionAttributeNames:    {"#P":"Percentile"}    You could then use this substitution in an expression, as in this example:    #P = :val     Tokens that begin with the : character are expression attribute values, which are placeholders for the actual value at runtime.  For more information on expression attribute names, see Accessing Item Attributes in the Amazon DynamoDB Developer Guide.
        public let expressionAttributeNames: [String: String]?
        /// The primary key attribute values that define the items and the attributes associated with the items.
        public let keys: [[String: AttributeValue]]
        /// A string that identifies one or more attributes to retrieve from the table. These attributes can include scalars, sets, or elements of a JSON document. The attributes in the ProjectionExpression must be separated by commas. If no attribute names are specified, then all attributes will be returned. If any of the requested attributes are not found, they will not appear in the result. For more information, see Accessing Item Attributes in the Amazon DynamoDB Developer Guide.
        public let projectionExpression: String?

        public init(attributesToGet: [String]? = nil, consistentRead: Bool? = nil, expressionAttributeNames: [String: String]? = nil, keys: [[String: AttributeValue]], projectionExpression: String? = nil) {
            self.attributesToGet = attributesToGet
            self.consistentRead = consistentRead
            self.expressionAttributeNames = expressionAttributeNames
            self.keys = keys
            self.projectionExpression = projectionExpression
        }

        public func validate(name: String) throws {
            try self.attributesToGet?.forEach {
                try validate($0, name: "attributesToGet[]", parent: name, max: 65535)
            }
            try self.validate(self.attributesToGet, name: "attributesToGet", parent: name, min: 1)
            try self.expressionAttributeNames?.forEach {
                try validate($0.value, name: "expressionAttributeNames[\"\($0.key)\"]", parent: name, max: 65535)
            }
            try self.validate(self.keys, name: "keys", parent: name, max: 100)
            try self.validate(self.keys, name: "keys", parent: name, min: 1)
        }

        private enum CodingKeys: String, CodingKey {
            case attributesToGet = "AttributesToGet"
            case consistentRead = "ConsistentRead"
            case expressionAttributeNames = "ExpressionAttributeNames"
            case keys = "Keys"
            case projectionExpression = "ProjectionExpression"
        }
    }

    public struct KinesisDataStreamDestination: AWSDecodableShape {
        /// The current status of replication.
        public let destinationStatus: DestinationStatus?
        /// The human-readable string that corresponds to the replica status.
        public let destinationStatusDescription: String?
        /// The ARN for a specific Kinesis data stream.
        public let streamArn: String?

        public init(destinationStatus: DestinationStatus? = nil, destinationStatusDescription: String? = nil, streamArn: String? = nil) {
            self.destinationStatus = destinationStatus
            self.destinationStatusDescription = destinationStatusDescription
            self.streamArn = streamArn
        }

        private enum CodingKeys: String, CodingKey {
            case destinationStatus = "DestinationStatus"
            case destinationStatusDescription = "DestinationStatusDescription"
            case streamArn = "StreamArn"
        }
    }

    public struct KinesisStreamingDestinationInput: AWSEncodableShape {
        /// The ARN for a Kinesis data stream.
        public let streamArn: String
        /// The name of the DynamoDB table.
        public let tableName: String

        public init(streamArn: String, tableName: String) {
            self.streamArn = streamArn
            self.tableName = tableName
        }

        public func validate(name: String) throws {
            try self.validate(self.streamArn, name: "streamArn", parent: name, max: 1024)
            try self.validate(self.streamArn, name: "streamArn", parent: name, min: 37)
            try self.validate(self.tableName, name: "tableName", parent: name, max: 255)
            try self.validate(self.tableName, name: "tableName", parent: name, min: 3)
            try self.validate(self.tableName, name: "tableName", parent: name, pattern: "^[a-zA-Z0-9_.-]+$")
        }

        private enum CodingKeys: String, CodingKey {
            case streamArn = "StreamArn"
            case tableName = "TableName"
        }
    }

    public struct KinesisStreamingDestinationOutput: AWSDecodableShape {
        /// The current status of the replication.
        public let destinationStatus: DestinationStatus?
        /// The ARN for the specific Kinesis data stream.
        public let streamArn: String?
        /// The name of the table being modified.
        public let tableName: String?

        public init(destinationStatus: DestinationStatus? = nil, streamArn: String? = nil, tableName: String? = nil) {
            self.destinationStatus = destinationStatus
            self.streamArn = streamArn
            self.tableName = tableName
        }

        private enum CodingKeys: String, CodingKey {
            case destinationStatus = "DestinationStatus"
            case streamArn = "StreamArn"
            case tableName = "TableName"
        }
    }

    public struct ListBackupsInput: AWSEncodableShape {
        /// The backups from the table specified by BackupType are listed. Where BackupType can be:    USER - On-demand backup created by you.    SYSTEM - On-demand backup automatically created by DynamoDB.    ALL - All types of on-demand backups (USER and SYSTEM).
        public let backupType: BackupTypeFilter?
        ///  LastEvaluatedBackupArn is the Amazon Resource Name (ARN) of the backup last evaluated when the current page of results was returned, inclusive of the current page of results. This value may be specified as the ExclusiveStartBackupArn of a new ListBackups operation in order to fetch the next page of results.
        public let exclusiveStartBackupArn: String?
        /// Maximum number of backups to return at once.
        public let limit: Int?
        /// The backups from the table specified by TableName are listed.
        public let tableName: String?
        /// Only backups created after this time are listed. TimeRangeLowerBound is inclusive.
        public let timeRangeLowerBound: Date?
        /// Only backups created before this time are listed. TimeRangeUpperBound is exclusive.
        public let timeRangeUpperBound: Date?

        public init(backupType: BackupTypeFilter? = nil, exclusiveStartBackupArn: String? = nil, limit: Int? = nil, tableName: String? = nil, timeRangeLowerBound: Date? = nil, timeRangeUpperBound: Date? = nil) {
            self.backupType = backupType
            self.exclusiveStartBackupArn = exclusiveStartBackupArn
            self.limit = limit
            self.tableName = tableName
            self.timeRangeLowerBound = timeRangeLowerBound
            self.timeRangeUpperBound = timeRangeUpperBound
        }

        public func validate(name: String) throws {
            try self.validate(self.exclusiveStartBackupArn, name: "exclusiveStartBackupArn", parent: name, max: 1024)
            try self.validate(self.exclusiveStartBackupArn, name: "exclusiveStartBackupArn", parent: name, min: 37)
            try self.validate(self.limit, name: "limit", parent: name, max: 100)
            try self.validate(self.limit, name: "limit", parent: name, min: 1)
            try self.validate(self.tableName, name: "tableName", parent: name, max: 255)
            try self.validate(self.tableName, name: "tableName", parent: name, min: 3)
            try self.validate(self.tableName, name: "tableName", parent: name, pattern: "^[a-zA-Z0-9_.-]+$")
        }

        private enum CodingKeys: String, CodingKey {
            case backupType = "BackupType"
            case exclusiveStartBackupArn = "ExclusiveStartBackupArn"
            case limit = "Limit"
            case tableName = "TableName"
            case timeRangeLowerBound = "TimeRangeLowerBound"
            case timeRangeUpperBound = "TimeRangeUpperBound"
        }
    }

    public struct ListBackupsOutput: AWSDecodableShape {
        /// List of BackupSummary objects.
        public let backupSummaries: [BackupSummary]?
        ///  The ARN of the backup last evaluated when the current page of results was returned, inclusive of the current page of results. This value may be specified as the ExclusiveStartBackupArn of a new ListBackups operation in order to fetch the next page of results.   If LastEvaluatedBackupArn is empty, then the last page of results has been processed and there are no more results to be retrieved.  If LastEvaluatedBackupArn is not empty, this may or may not indicate that there is more data to be returned. All results are guaranteed to have been returned if and only if no value for LastEvaluatedBackupArn is returned.
        public let lastEvaluatedBackupArn: String?

        public init(backupSummaries: [BackupSummary]? = nil, lastEvaluatedBackupArn: String? = nil) {
            self.backupSummaries = backupSummaries
            self.lastEvaluatedBackupArn = lastEvaluatedBackupArn
        }

        private enum CodingKeys: String, CodingKey {
            case backupSummaries = "BackupSummaries"
            case lastEvaluatedBackupArn = "LastEvaluatedBackupArn"
        }
    }

    public struct ListContributorInsightsInput: AWSEncodableShape {
        /// Maximum number of results to return per page.
        public let maxResults: Int?
        /// A token to for the desired page, if there is one.
        public let nextToken: String?
        /// The name of the table.
        public let tableName: String?

        public init(maxResults: Int? = nil, nextToken: String? = nil, tableName: String? = nil) {
            self.maxResults = maxResults
            self.nextToken = nextToken
            self.tableName = tableName
        }

        public func validate(name: String) throws {
            try self.validate(self.maxResults, name: "maxResults", parent: name, max: 100)
            try self.validate(self.tableName, name: "tableName", parent: name, max: 255)
            try self.validate(self.tableName, name: "tableName", parent: name, min: 3)
            try self.validate(self.tableName, name: "tableName", parent: name, pattern: "^[a-zA-Z0-9_.-]+$")
        }

        private enum CodingKeys: String, CodingKey {
            case maxResults = "MaxResults"
            case nextToken = "NextToken"
            case tableName = "TableName"
        }
    }

    public struct ListContributorInsightsOutput: AWSDecodableShape {
        /// A list of ContributorInsightsSummary.
        public let contributorInsightsSummaries: [ContributorInsightsSummary]?
        /// A token to go to the next page if there is one.
        public let nextToken: String?

        public init(contributorInsightsSummaries: [ContributorInsightsSummary]? = nil, nextToken: String? = nil) {
            self.contributorInsightsSummaries = contributorInsightsSummaries
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case contributorInsightsSummaries = "ContributorInsightsSummaries"
            case nextToken = "NextToken"
        }
    }

    public struct ListExportsInput: AWSEncodableShape {
        /// Maximum number of results to return per page.
        public let maxResults: Int?
        /// An optional string that, if supplied, must be copied from the output of a previous call to ListExports. When provided in this manner, the API fetches the next page of results.
        public let nextToken: String?
        /// The Amazon Resource Name (ARN) associated with the exported table.
        public let tableArn: String?

        public init(maxResults: Int? = nil, nextToken: String? = nil, tableArn: String? = nil) {
            self.maxResults = maxResults
            self.nextToken = nextToken
            self.tableArn = tableArn
        }

        public func validate(name: String) throws {
            try self.validate(self.maxResults, name: "maxResults", parent: name, max: 25)
            try self.validate(self.maxResults, name: "maxResults", parent: name, min: 1)
        }

        private enum CodingKeys: String, CodingKey {
            case maxResults = "MaxResults"
            case nextToken = "NextToken"
            case tableArn = "TableArn"
        }
    }

    public struct ListExportsOutput: AWSDecodableShape {
        /// A list of ExportSummary objects.
        public let exportSummaries: [ExportSummary]?
        /// If this value is returned, there are additional results to be displayed. To retrieve them, call ListExports again, with NextToken set to this value.
        public let nextToken: String?

        public init(exportSummaries: [ExportSummary]? = nil, nextToken: String? = nil) {
            self.exportSummaries = exportSummaries
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case exportSummaries = "ExportSummaries"
            case nextToken = "NextToken"
        }
    }

    public struct ListGlobalTablesInput: AWSEncodableShape {
        /// The first global table name that this operation will evaluate.
        public let exclusiveStartGlobalTableName: String?
        /// The maximum number of table names to return, if the parameter is not specified DynamoDB defaults to 100. If the number of global tables DynamoDB finds reaches this limit, it stops the operation and returns the table names collected up to that point, with a table name in the LastEvaluatedGlobalTableName to apply in a subsequent operation to the ExclusiveStartGlobalTableName parameter.
        public let limit: Int?
        /// Lists the global tables in a specific Region.
        public let regionName: String?

        public init(exclusiveStartGlobalTableName: String? = nil, limit: Int? = nil, regionName: String? = nil) {
            self.exclusiveStartGlobalTableName = exclusiveStartGlobalTableName
            self.limit = limit
            self.regionName = regionName
        }

        public func validate(name: String) throws {
            try self.validate(self.exclusiveStartGlobalTableName, name: "exclusiveStartGlobalTableName", parent: name, max: 255)
            try self.validate(self.exclusiveStartGlobalTableName, name: "exclusiveStartGlobalTableName", parent: name, min: 3)
            try self.validate(self.exclusiveStartGlobalTableName, name: "exclusiveStartGlobalTableName", parent: name, pattern: "^[a-zA-Z0-9_.-]+$")
            try self.validate(self.limit, name: "limit", parent: name, min: 1)
        }

        private enum CodingKeys: String, CodingKey {
            case exclusiveStartGlobalTableName = "ExclusiveStartGlobalTableName"
            case limit = "Limit"
            case regionName = "RegionName"
        }
    }

    public struct ListGlobalTablesOutput: AWSDecodableShape {
        /// List of global table names.
        public let globalTables: [GlobalTable]?
        /// Last evaluated global table name.
        public let lastEvaluatedGlobalTableName: String?

        public init(globalTables: [GlobalTable]? = nil, lastEvaluatedGlobalTableName: String? = nil) {
            self.globalTables = globalTables
            self.lastEvaluatedGlobalTableName = lastEvaluatedGlobalTableName
        }

        private enum CodingKeys: String, CodingKey {
            case globalTables = "GlobalTables"
            case lastEvaluatedGlobalTableName = "LastEvaluatedGlobalTableName"
        }
    }

    public struct ListTablesInput: AWSEncodableShape {
        /// The first table name that this operation will evaluate. Use the value that was returned for LastEvaluatedTableName in a previous operation, so that you can obtain the next page of results.
        public let exclusiveStartTableName: String?
        /// A maximum number of table names to return. If this parameter is not specified, the limit is 100.
        public let limit: Int?

        public init(exclusiveStartTableName: String? = nil, limit: Int? = nil) {
            self.exclusiveStartTableName = exclusiveStartTableName
            self.limit = limit
        }

        public func validate(name: String) throws {
            try self.validate(self.exclusiveStartTableName, name: "exclusiveStartTableName", parent: name, max: 255)
            try self.validate(self.exclusiveStartTableName, name: "exclusiveStartTableName", parent: name, min: 3)
            try self.validate(self.exclusiveStartTableName, name: "exclusiveStartTableName", parent: name, pattern: "^[a-zA-Z0-9_.-]+$")
            try self.validate(self.limit, name: "limit", parent: name, max: 100)
            try self.validate(self.limit, name: "limit", parent: name, min: 1)
        }

        private enum CodingKeys: String, CodingKey {
            case exclusiveStartTableName = "ExclusiveStartTableName"
            case limit = "Limit"
        }
    }

    public struct ListTablesOutput: AWSDecodableShape {
        /// The name of the last table in the current page of results. Use this value as the ExclusiveStartTableName in a new request to obtain the next page of results, until all the table names are returned. If you do not receive a LastEvaluatedTableName value in the response, this means that there are no more table names to be retrieved.
        public let lastEvaluatedTableName: String?
        /// The names of the tables associated with the current account at the current endpoint. The maximum size of this array is 100. If LastEvaluatedTableName also appears in the output, you can use this value as the ExclusiveStartTableName parameter in a subsequent ListTables request and obtain the next page of results.
        public let tableNames: [String]?

        public init(lastEvaluatedTableName: String? = nil, tableNames: [String]? = nil) {
            self.lastEvaluatedTableName = lastEvaluatedTableName
            self.tableNames = tableNames
        }

        private enum CodingKeys: String, CodingKey {
            case lastEvaluatedTableName = "LastEvaluatedTableName"
            case tableNames = "TableNames"
        }
    }

    public struct ListTagsOfResourceInput: AWSEncodableShape {
        /// An optional string that, if supplied, must be copied from the output of a previous call to ListTagOfResource. When provided in this manner, this API fetches the next page of results.
        public let nextToken: String?
        /// The Amazon DynamoDB resource with tags to be listed. This value is an Amazon Resource Name (ARN).
        public let resourceArn: String

        public init(nextToken: String? = nil, resourceArn: String) {
            self.nextToken = nextToken
            self.resourceArn = resourceArn
        }

        public func validate(name: String) throws {
            try self.validate(self.resourceArn, name: "resourceArn", parent: name, max: 1283)
            try self.validate(self.resourceArn, name: "resourceArn", parent: name, min: 1)
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "NextToken"
            case resourceArn = "ResourceArn"
        }
    }

    public struct ListTagsOfResourceOutput: AWSDecodableShape {
        /// If this value is returned, there are additional results to be displayed. To retrieve them, call ListTagsOfResource again, with NextToken set to this value.
        public let nextToken: String?
        /// The tags currently associated with the Amazon DynamoDB resource.
        public let tags: [Tag]?

        public init(nextToken: String? = nil, tags: [Tag]? = nil) {
            self.nextToken = nextToken
            self.tags = tags
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "NextToken"
            case tags = "Tags"
        }
    }

    public struct LocalSecondaryIndex: AWSEncodableShape {
        /// The name of the local secondary index. The name must be unique among all other indexes on this table.
        public let indexName: String
        /// The complete key schema for the local secondary index, consisting of one or more pairs of attribute names and key types:    HASH - partition key    RANGE - sort key    The partition key of an item is also known as its hash attribute.  The term "hash attribute" derives from DynamoDB's usage of an internal hash function to evenly distribute data items across partitions, based on their partition key values. The sort key of an item is also known as its range attribute. The term "range attribute" derives from the way DynamoDB stores items with the same partition key physically close together, in sorted order by the sort key value.
        public let keySchema: [KeySchemaElement]
        /// Represents attributes that are copied (projected) from the table into the local secondary index. These are in addition to the primary key attributes and index key attributes, which are automatically projected.
        public let projection: Projection

        public init(indexName: String, keySchema: [KeySchemaElement], projection: Projection) {
            self.indexName = indexName
            self.keySchema = keySchema
            self.projection = projection
        }

        public func validate(name: String) throws {
            try self.validate(self.indexName, name: "indexName", parent: name, max: 255)
            try self.validate(self.indexName, name: "indexName", parent: name, min: 3)
            try self.validate(self.indexName, name: "indexName", parent: name, pattern: "^[a-zA-Z0-9_.-]+$")
            try self.keySchema.forEach {
                try $0.validate(name: "\(name).keySchema[]")
            }
            try self.validate(self.keySchema, name: "keySchema", parent: name, max: 2)
            try self.validate(self.keySchema, name: "keySchema", parent: name, min: 1)
            try self.projection.validate(name: "\(name).projection")
        }

        private enum CodingKeys: String, CodingKey {
            case indexName = "IndexName"
            case keySchema = "KeySchema"
            case projection = "Projection"
        }
    }

    public struct LocalSecondaryIndexDescription: AWSDecodableShape {
        /// The Amazon Resource Name (ARN) that uniquely identifies the index.
        public let indexArn: String?
        /// Represents the name of the local secondary index.
        public let indexName: String?
        /// The total size of the specified index, in bytes. DynamoDB updates this value approximately every six hours. Recent changes might not be reflected in this value.
        public let indexSizeBytes: Int64?
        /// The number of items in the specified index. DynamoDB updates this value approximately every six hours. Recent changes might not be reflected in this value.
        public let itemCount: Int64?
        /// The complete key schema for the local secondary index, consisting of one or more pairs of attribute names and key types:    HASH - partition key    RANGE - sort key    The partition key of an item is also known as its hash attribute.  The term "hash attribute" derives from DynamoDB's usage of an internal hash function to evenly distribute data items across partitions, based on their partition key values. The sort key of an item is also known as its range attribute. The term "range attribute" derives from the way DynamoDB stores items with the same partition key physically close together, in sorted order by the sort key value.
        public let keySchema: [KeySchemaElement]?
        /// Represents attributes that are copied (projected) from the table into the global secondary index. These are in addition to the primary key attributes and index key attributes, which are automatically projected.
        public let projection: Projection?

        public init(indexArn: String? = nil, indexName: String? = nil, indexSizeBytes: Int64? = nil, itemCount: Int64? = nil, keySchema: [KeySchemaElement]? = nil, projection: Projection? = nil) {
            self.indexArn = indexArn
            self.indexName = indexName
            self.indexSizeBytes = indexSizeBytes
            self.itemCount = itemCount
            self.keySchema = keySchema
            self.projection = projection
        }

        private enum CodingKeys: String, CodingKey {
            case indexArn = "IndexArn"
            case indexName = "IndexName"
            case indexSizeBytes = "IndexSizeBytes"
            case itemCount = "ItemCount"
            case keySchema = "KeySchema"
            case projection = "Projection"
        }
    }

    public struct LocalSecondaryIndexInfo: AWSDecodableShape {
        /// Represents the name of the local secondary index.
        public let indexName: String?
        /// The complete key schema for a local secondary index, which consists of one or more pairs of attribute names and key types:    HASH - partition key    RANGE - sort key    The partition key of an item is also known as its hash attribute.  The term "hash attribute" derives from DynamoDB's usage of an internal hash function to evenly distribute data items across partitions, based on their partition key values. The sort key of an item is also known as its range attribute. The term "range attribute" derives from the way DynamoDB stores items with the same partition key physically close together, in sorted order by the sort key value.
        public let keySchema: [KeySchemaElement]?
        /// Represents attributes that are copied (projected) from the table into the global secondary index. These are in addition to the primary key attributes and index key attributes, which are automatically projected.
        public let projection: Projection?

        public init(indexName: String? = nil, keySchema: [KeySchemaElement]? = nil, projection: Projection? = nil) {
            self.indexName = indexName
            self.keySchema = keySchema
            self.projection = projection
        }

        private enum CodingKeys: String, CodingKey {
            case indexName = "IndexName"
            case keySchema = "KeySchema"
            case projection = "Projection"
        }
    }

    public struct ParameterizedStatement: AWSEncodableShape {
        /// The parameter values.
        public let parameters: [AttributeValue]?
        /// A PartiQL statment that uses parameters.
        public let statement: String

        public init(parameters: [AttributeValue]? = nil, statement: String) {
            self.parameters = parameters
            self.statement = statement
        }

        public func validate(name: String) throws {
            try self.parameters?.forEach {
                try $0.validate(name: "\(name).parameters[]")
            }
            try self.validate(self.parameters, name: "parameters", parent: name, min: 1)
            try self.validate(self.statement, name: "statement", parent: name, max: 8192)
            try self.validate(self.statement, name: "statement", parent: name, min: 1)
        }

        private enum CodingKeys: String, CodingKey {
            case parameters = "Parameters"
            case statement = "Statement"
        }
    }

    public struct PointInTimeRecoveryDescription: AWSDecodableShape {
        /// Specifies the earliest point in time you can restore your table to. You can restore your table to any point in time during the last 35 days.
        public let earliestRestorableDateTime: Date?
        ///  LatestRestorableDateTime is typically 5 minutes before the current time.
        public let latestRestorableDateTime: Date?
        /// The current state of point in time recovery:    ENABLING - Point in time recovery is being enabled.    ENABLED - Point in time recovery is enabled.    DISABLED - Point in time recovery is disabled.
        public let pointInTimeRecoveryStatus: PointInTimeRecoveryStatus?

        public init(earliestRestorableDateTime: Date? = nil, latestRestorableDateTime: Date? = nil, pointInTimeRecoveryStatus: PointInTimeRecoveryStatus? = nil) {
            self.earliestRestorableDateTime = earliestRestorableDateTime
            self.latestRestorableDateTime = latestRestorableDateTime
            self.pointInTimeRecoveryStatus = pointInTimeRecoveryStatus
        }

        private enum CodingKeys: String, CodingKey {
            case earliestRestorableDateTime = "EarliestRestorableDateTime"
            case latestRestorableDateTime = "LatestRestorableDateTime"
            case pointInTimeRecoveryStatus = "PointInTimeRecoveryStatus"
        }
    }

    public struct PointInTimeRecoverySpecification: AWSEncodableShape {
        /// Indicates whether point in time recovery is enabled (true) or disabled (false) on the table.
        public let pointInTimeRecoveryEnabled: Bool

        public init(pointInTimeRecoveryEnabled: Bool) {
            self.pointInTimeRecoveryEnabled = pointInTimeRecoveryEnabled
        }

        private enum CodingKeys: String, CodingKey {
            case pointInTimeRecoveryEnabled = "PointInTimeRecoveryEnabled"
        }
    }

    public struct Projection: AWSEncodableShape & AWSDecodableShape {
        /// Represents the non-key attribute names which will be projected into the index. For local secondary indexes, the total count of NonKeyAttributes summed across all of the local secondary indexes, must not exceed 20. If you project the same attribute into two different indexes, this counts as two distinct attributes when determining the total.
        public let nonKeyAttributes: [String]?
        /// The set of attributes that are projected into the index:    KEYS_ONLY - Only the index and primary keys are projected into the index.    INCLUDE - In addition to the attributes described in KEYS_ONLY, the secondary index will include other non-key attributes that you specify.    ALL - All of the table attributes are projected into the index.
        public let projectionType: ProjectionType?

        public init(nonKeyAttributes: [String]? = nil, projectionType: ProjectionType? = nil) {
            self.nonKeyAttributes = nonKeyAttributes
            self.projectionType = projectionType
        }

        public func validate(name: String) throws {
            try self.nonKeyAttributes?.forEach {
                try validate($0, name: "nonKeyAttributes[]", parent: name, max: 255)
                try validate($0, name: "nonKeyAttributes[]", parent: name, min: 1)
            }
            try self.validate(self.nonKeyAttributes, name: "nonKeyAttributes", parent: name, max: 20)
            try self.validate(self.nonKeyAttributes, name: "nonKeyAttributes", parent: name, min: 1)
        }

        private enum CodingKeys: String, CodingKey {
            case nonKeyAttributes = "NonKeyAttributes"
            case projectionType = "ProjectionType"
        }
    }

    public struct ProvisionedThroughput: AWSEncodableShape & AWSDecodableShape {
        /// The maximum number of strongly consistent reads consumed per second before DynamoDB returns a ThrottlingException. For more information, see Specifying Read and Write Requirements in the Amazon DynamoDB Developer Guide. If read/write capacity mode is PAY_PER_REQUEST the value is set to 0.
        public let readCapacityUnits: Int64
        /// The maximum number of writes consumed per second before DynamoDB returns a ThrottlingException. For more information, see Specifying Read and Write Requirements in the Amazon DynamoDB Developer Guide. If read/write capacity mode is PAY_PER_REQUEST the value is set to 0.
        public let writeCapacityUnits: Int64

        public init(readCapacityUnits: Int64, writeCapacityUnits: Int64) {
            self.readCapacityUnits = readCapacityUnits
            self.writeCapacityUnits = writeCapacityUnits
        }

        public func validate(name: String) throws {
            try self.validate(self.readCapacityUnits, name: "readCapacityUnits", parent: name, min: 1)
            try self.validate(self.writeCapacityUnits, name: "writeCapacityUnits", parent: name, min: 1)
        }

        private enum CodingKeys: String, CodingKey {
            case readCapacityUnits = "ReadCapacityUnits"
            case writeCapacityUnits = "WriteCapacityUnits"
        }
    }

    public struct ProvisionedThroughputDescription: AWSDecodableShape {
        /// The date and time of the last provisioned throughput decrease for this table.
        public let lastDecreaseDateTime: Date?
        /// The date and time of the last provisioned throughput increase for this table.
        public let lastIncreaseDateTime: Date?
        /// The number of provisioned throughput decreases for this table during this UTC calendar day. For current maximums on provisioned throughput decreases, see Service, Account, and Table Quotas in the Amazon DynamoDB Developer Guide.
        public let numberOfDecreasesToday: Int64?
        /// The maximum number of strongly consistent reads consumed per second before DynamoDB returns a ThrottlingException. Eventually consistent reads require less effort than strongly consistent reads, so a setting of 50 ReadCapacityUnits per second provides 100 eventually consistent ReadCapacityUnits per second.
        public let readCapacityUnits: Int64?
        /// The maximum number of writes consumed per second before DynamoDB returns a ThrottlingException.
        public let writeCapacityUnits: Int64?

        public init(lastDecreaseDateTime: Date? = nil, lastIncreaseDateTime: Date? = nil, numberOfDecreasesToday: Int64? = nil, readCapacityUnits: Int64? = nil, writeCapacityUnits: Int64? = nil) {
            self.lastDecreaseDateTime = lastDecreaseDateTime
            self.lastIncreaseDateTime = lastIncreaseDateTime
            self.numberOfDecreasesToday = numberOfDecreasesToday
            self.readCapacityUnits = readCapacityUnits
            self.writeCapacityUnits = writeCapacityUnits
        }

        private enum CodingKeys: String, CodingKey {
            case lastDecreaseDateTime = "LastDecreaseDateTime"
            case lastIncreaseDateTime = "LastIncreaseDateTime"
            case numberOfDecreasesToday = "NumberOfDecreasesToday"
            case readCapacityUnits = "ReadCapacityUnits"
            case writeCapacityUnits = "WriteCapacityUnits"
        }
    }

    public struct ProvisionedThroughputOverride: AWSEncodableShape & AWSDecodableShape {
        /// Replica-specific read capacity units. If not specified, uses the source table's read capacity settings.
        public let readCapacityUnits: Int64?

        public init(readCapacityUnits: Int64? = nil) {
            self.readCapacityUnits = readCapacityUnits
        }

        public func validate(name: String) throws {
            try self.validate(self.readCapacityUnits, name: "readCapacityUnits", parent: name, min: 1)
        }

        private enum CodingKeys: String, CodingKey {
            case readCapacityUnits = "ReadCapacityUnits"
        }
    }

    public struct Put: AWSEncodableShape {
        /// A condition that must be satisfied in order for a conditional update to succeed.
        public let conditionExpression: String?
        /// One or more substitution tokens for attribute names in an expression.
        public let expressionAttributeNames: [String: String]?
        /// One or more values that can be substituted in an expression.
        public let expressionAttributeValues: [String: AttributeValue]?
        /// A map of attribute name to attribute values, representing the primary key of the item to be written by PutItem. All of the table's primary key attributes must be specified, and their data types must match those of the table's key schema. If any attributes are present in the item that are part of an index key schema for the table, their types must match the index key schema.
        public let item: [String: AttributeValue]
        /// Use ReturnValuesOnConditionCheckFailure to get the item attributes if the Put condition fails. For ReturnValuesOnConditionCheckFailure, the valid values are: NONE and ALL_OLD.
        public let returnValuesOnConditionCheckFailure: ReturnValuesOnConditionCheckFailure?
        /// Name of the table in which to write the item.
        public let tableName: String

        public init(conditionExpression: String? = nil, expressionAttributeNames: [String: String]? = nil, expressionAttributeValues: [String: AttributeValue]? = nil, item: [String: AttributeValue], returnValuesOnConditionCheckFailure: ReturnValuesOnConditionCheckFailure? = nil, tableName: String) {
            self.conditionExpression = conditionExpression
            self.expressionAttributeNames = expressionAttributeNames
            self.expressionAttributeValues = expressionAttributeValues
            self.item = item
            self.returnValuesOnConditionCheckFailure = returnValuesOnConditionCheckFailure
            self.tableName = tableName
        }

        public func validate(name: String) throws {
            try self.expressionAttributeNames?.forEach {
                try validate($0.value, name: "expressionAttributeNames[\"\($0.key)\"]", parent: name, max: 65535)
            }
            try self.expressionAttributeValues?.forEach {
                try $0.value.validate(name: "\(name).expressionAttributeValues[\"\($0.key)\"]")
            }
            try self.item.forEach {
                try validate($0.key, name: "item.key", parent: name, max: 65535)
                try $0.value.validate(name: "\(name).item[\"\($0.key)\"]")
            }
            try self.validate(self.tableName, name: "tableName", parent: name, max: 255)
            try self.validate(self.tableName, name: "tableName", parent: name, min: 3)
            try self.validate(self.tableName, name: "tableName", parent: name, pattern: "^[a-zA-Z0-9_.-]+$")
        }

        private enum CodingKeys: String, CodingKey {
            case conditionExpression = "ConditionExpression"
            case expressionAttributeNames = "ExpressionAttributeNames"
            case expressionAttributeValues = "ExpressionAttributeValues"
            case item = "Item"
            case returnValuesOnConditionCheckFailure = "ReturnValuesOnConditionCheckFailure"
            case tableName = "TableName"
        }
    }

    public struct PutItemInput: AWSEncodableShape {
        /// This is a legacy parameter.  Use ConditionExpression instead.  For more information, see ConditionalOperator in the Amazon DynamoDB Developer Guide.
        public let conditionalOperator: ConditionalOperator?
        /// A condition that must be satisfied in order for a conditional PutItem operation to succeed. An expression can contain any of the following:   Functions: attribute_exists | attribute_not_exists | attribute_type | contains | begins_with | size  These function names are case-sensitive.   Comparison operators: = | <> | | = | BETWEEN | IN     Logical operators: AND | OR | NOT    For more information on condition expressions, see Condition Expressions in the Amazon DynamoDB Developer Guide.
        public let conditionExpression: String?
        /// This is a legacy parameter.  Use ConditionExpression instead.  For more information, see Expected in the Amazon DynamoDB Developer Guide.
        public let expected: [String: ExpectedAttributeValue]?
        /// One or more substitution tokens for attribute names in an expression. The following are some use cases for using ExpressionAttributeNames:   To access an attribute whose name conflicts with a DynamoDB reserved word.   To create a placeholder for repeating occurrences of an attribute name in an expression.   To prevent special characters in an attribute name from being misinterpreted in an expression.   Use the # character in an expression to dereference an attribute name. For example, consider the following attribute name:    Percentile    The name of this attribute conflicts with a reserved word, so it cannot be used directly in an expression. (For the complete list of reserved words, see Reserved Words in the Amazon DynamoDB Developer Guide). To work around this, you could specify the following for ExpressionAttributeNames:    {"#P":"Percentile"}    You could then use this substitution in an expression, as in this example:    #P = :val     Tokens that begin with the : character are expression attribute values, which are placeholders for the actual value at runtime.  For more information on expression attribute names, see Specifying Item Attributes in the Amazon DynamoDB Developer Guide.
        public let expressionAttributeNames: [String: String]?
        /// One or more values that can be substituted in an expression. Use the : (colon) character in an expression to dereference an attribute value. For example, suppose that you wanted to check whether the value of the ProductStatus attribute was one of the following:   Available | Backordered | Discontinued  You would first need to specify ExpressionAttributeValues as follows:  { ":avail":{"S":"Available"}, ":back":{"S":"Backordered"}, ":disc":{"S":"Discontinued"} }  You could then use these values in an expression, such as this:  ProductStatus IN (:avail, :back, :disc)  For more information on expression attribute values, see Condition Expressions in the Amazon DynamoDB Developer Guide.
        public let expressionAttributeValues: [String: AttributeValue]?
        /// A map of attribute name/value pairs, one for each attribute. Only the primary key attributes are required; you can optionally provide other attribute name-value pairs for the item. You must provide all of the attributes for the primary key. For example, with a simple primary key, you only need to provide a value for the partition key. For a composite primary key, you must provide both values for both the partition key and the sort key. If you specify any attributes that are part of an index key, then the data types for those attributes must match those of the schema in the table's attribute definition. Empty String and Binary attribute values are allowed. Attribute values of type String and Binary must have a length greater than zero if the attribute is used as a key attribute for a table or index.  For more information about primary keys, see Primary Key in the Amazon DynamoDB Developer Guide. Each element in the Item map is an AttributeValue object.
        public let item: [String: AttributeValue]
        public let returnConsumedCapacity: ReturnConsumedCapacity?
        /// Determines whether item collection metrics are returned.  If set to SIZE, the response includes statistics about item collections, if any, that were modified during the operation are returned in the response. If set to NONE (the default), no statistics are returned.
        public let returnItemCollectionMetrics: ReturnItemCollectionMetrics?
        /// Use ReturnValues if you want to get the item attributes as they appeared before they were updated with the PutItem request. For PutItem, the valid values are:    NONE - If ReturnValues is not specified, or if its value is NONE, then nothing is returned. (This setting is the default for ReturnValues.)    ALL_OLD - If PutItem overwrote an attribute name-value pair, then the content of the old item is returned.    The ReturnValues parameter is used by several DynamoDB operations; however, PutItem does not recognize any values other than NONE or ALL_OLD.
        public let returnValues: ReturnValue?
        /// The name of the table to contain the item.
        public let tableName: String

        public init(conditionalOperator: ConditionalOperator? = nil, conditionExpression: String? = nil, expected: [String: ExpectedAttributeValue]? = nil, expressionAttributeNames: [String: String]? = nil, expressionAttributeValues: [String: AttributeValue]? = nil, item: [String: AttributeValue], returnConsumedCapacity: ReturnConsumedCapacity? = nil, returnItemCollectionMetrics: ReturnItemCollectionMetrics? = nil, returnValues: ReturnValue? = nil, tableName: String) {
            self.conditionalOperator = conditionalOperator
            self.conditionExpression = conditionExpression
            self.expected = expected
            self.expressionAttributeNames = expressionAttributeNames
            self.expressionAttributeValues = expressionAttributeValues
            self.item = item
            self.returnConsumedCapacity = returnConsumedCapacity
            self.returnItemCollectionMetrics = returnItemCollectionMetrics
            self.returnValues = returnValues
            self.tableName = tableName
        }

        public func validate(name: String) throws {
            try self.expected?.forEach {
                try validate($0.key, name: "expected.key", parent: name, max: 65535)
                try $0.value.validate(name: "\(name).expected[\"\($0.key)\"]")
            }
            try self.expressionAttributeNames?.forEach {
                try validate($0.value, name: "expressionAttributeNames[\"\($0.key)\"]", parent: name, max: 65535)
            }
            try self.expressionAttributeValues?.forEach {
                try $0.value.validate(name: "\(name).expressionAttributeValues[\"\($0.key)\"]")
            }
            try self.item.forEach {
                try validate($0.key, name: "item.key", parent: name, max: 65535)
                try $0.value.validate(name: "\(name).item[\"\($0.key)\"]")
            }
            try self.validate(self.tableName, name: "tableName", parent: name, max: 255)
            try self.validate(self.tableName, name: "tableName", parent: name, min: 3)
            try self.validate(self.tableName, name: "tableName", parent: name, pattern: "^[a-zA-Z0-9_.-]+$")
        }

        private enum CodingKeys: String, CodingKey {
            case conditionalOperator = "ConditionalOperator"
            case conditionExpression = "ConditionExpression"
            case expected = "Expected"
            case expressionAttributeNames = "ExpressionAttributeNames"
            case expressionAttributeValues = "ExpressionAttributeValues"
            case item = "Item"
            case returnConsumedCapacity = "ReturnConsumedCapacity"
            case returnItemCollectionMetrics = "ReturnItemCollectionMetrics"
            case returnValues = "ReturnValues"
            case tableName = "TableName"
        }
    }

    public struct PutItemOutput: AWSDecodableShape {
        /// The attribute values as they appeared before the PutItem operation, but only if ReturnValues is specified as ALL_OLD in the request. Each element consists of an attribute name and an attribute value.
        public let attributes: [String: AttributeValue]?
        /// The capacity units consumed by the PutItem operation. The data returned includes the total provisioned throughput consumed, along with statistics for the table and any indexes involved in the operation. ConsumedCapacity is only returned if the ReturnConsumedCapacity parameter was specified. For more information, see Read/Write Capacity Mode in the Amazon DynamoDB Developer Guide.
        public let consumedCapacity: ConsumedCapacity?
        /// Information about item collections, if any, that were affected by the PutItem operation. ItemCollectionMetrics is only returned if the ReturnItemCollectionMetrics parameter was specified. If the table does not have any local secondary indexes, this information is not returned in the response. Each ItemCollectionMetrics element consists of:    ItemCollectionKey - The partition key value of the item collection. This is the same as the partition key value of the item itself.    SizeEstimateRangeGB - An estimate of item collection size, in gigabytes. This value is a two-element array containing a lower bound and an upper bound for the estimate. The estimate includes the size of all the items in the table, plus the size of all attributes projected into all of the local secondary indexes on that table. Use this estimate to measure whether a local secondary index is approaching its size limit. The estimate is subject to change over time; therefore, do not rely on the precision or accuracy of the estimate.
        public let itemCollectionMetrics: ItemCollectionMetrics?

        public init(attributes: [String: AttributeValue]? = nil, consumedCapacity: ConsumedCapacity? = nil, itemCollectionMetrics: ItemCollectionMetrics? = nil) {
            self.attributes = attributes
            self.consumedCapacity = consumedCapacity
            self.itemCollectionMetrics = itemCollectionMetrics
        }

        private enum CodingKeys: String, CodingKey {
            case attributes = "Attributes"
            case consumedCapacity = "ConsumedCapacity"
            case itemCollectionMetrics = "ItemCollectionMetrics"
        }
    }

    public struct PutRequest: AWSEncodableShape & AWSDecodableShape {
        /// A map of attribute name to attribute values, representing the primary key of an item to be processed by PutItem. All of the table's primary key attributes must be specified, and their data types must match those of the table's key schema. If any attributes are present in the item that are part of an index key schema for the table, their types must match the index key schema.
        public let item: [String: AttributeValue]

        public init(item: [String: AttributeValue]) {
            self.item = item
        }

        public func validate(name: String) throws {
            try self.item.forEach {
                try validate($0.key, name: "item.key", parent: name, max: 65535)
                try $0.value.validate(name: "\(name).item[\"\($0.key)\"]")
            }
        }

        private enum CodingKeys: String, CodingKey {
            case item = "Item"
        }
    }

    public struct QueryInput: AWSEncodableShape {
        /// This is a legacy parameter.  Use ProjectionExpression instead.  For more information, see AttributesToGet in the Amazon DynamoDB Developer Guide.
        public let attributesToGet: [String]?
        /// This is a legacy parameter.  Use FilterExpression instead.  For more information, see ConditionalOperator in the Amazon DynamoDB Developer Guide.
        public let conditionalOperator: ConditionalOperator?
        /// Determines the read consistency model:  If set to true, then the operation uses strongly consistent reads; otherwise, the operation uses eventually consistent reads. Strongly consistent reads are not supported on global secondary indexes. If you query a global secondary index with ConsistentRead set to true, you will receive a ValidationException.
        public let consistentRead: Bool?
        /// The primary key of the first item that this operation will evaluate. Use the value that was returned for LastEvaluatedKey in the previous operation. The data type for ExclusiveStartKey must be String, Number, or Binary. No set data types are allowed.
        public let exclusiveStartKey: [String: AttributeValue]?
        /// One or more substitution tokens for attribute names in an expression. The following are some use cases for using ExpressionAttributeNames:   To access an attribute whose name conflicts with a DynamoDB reserved word.   To create a placeholder for repeating occurrences of an attribute name in an expression.   To prevent special characters in an attribute name from being misinterpreted in an expression.   Use the # character in an expression to dereference an attribute name. For example, consider the following attribute name:    Percentile    The name of this attribute conflicts with a reserved word, so it cannot be used directly in an expression. (For the complete list of reserved words, see Reserved Words in the Amazon DynamoDB Developer Guide). To work around this, you could specify the following for ExpressionAttributeNames:    {"#P":"Percentile"}    You could then use this substitution in an expression, as in this example:    #P = :val     Tokens that begin with the : character are expression attribute values, which are placeholders for the actual value at runtime.  For more information on expression attribute names, see Specifying Item Attributes in the Amazon DynamoDB Developer Guide.
        public let expressionAttributeNames: [String: String]?
        /// One or more values that can be substituted in an expression. Use the : (colon) character in an expression to dereference an attribute value. For example, suppose that you wanted to check whether the value of the ProductStatus attribute was one of the following:   Available | Backordered | Discontinued  You would first need to specify ExpressionAttributeValues as follows:  { ":avail":{"S":"Available"}, ":back":{"S":"Backordered"}, ":disc":{"S":"Discontinued"} }  You could then use these values in an expression, such as this:  ProductStatus IN (:avail, :back, :disc)  For more information on expression attribute values, see Specifying Conditions in the Amazon DynamoDB Developer Guide.
        public let expressionAttributeValues: [String: AttributeValue]?
        /// A string that contains conditions that DynamoDB applies after the Query operation, but before the data is returned to you. Items that do not satisfy the FilterExpression criteria are not returned. A FilterExpression does not allow key attributes.  You cannot define a filter expression based on a partition key or a sort key.  A FilterExpression is applied after the items have already been read; the process of filtering does not consume any additional read capacity units.  For more information, see Filter Expressions in the Amazon DynamoDB Developer Guide.
        public let filterExpression: String?
        /// The name of an index to query. This index can be any local secondary index or global secondary index on the table. Note that if you use the IndexName parameter, you must also provide TableName.
        public let indexName: String?
        /// The condition that specifies the key values for items to be retrieved by the Query action.
        ///  The condition must perform an equality test on a single partition key value. The condition can optionally perform one of several comparison tests on a single sort key value. This allows Query to retrieve one item with a given partition key value and sort key value, or several items that have the same partition key value but different sort key values.
        ///  The partition key equality test is required, and must be specified in the following format:
        ///   partitionKeyName = :partitionkeyval
        ///  If you also want to provide a condition for the sort key, it must be combined using AND with the condition for the sort key. Following is an example, using the = comparison operator for the sort key:
        ///   partitionKeyName = :partitionkeyval AND sortKeyName = :sortkeyval  Valid comparisons for the sort key condition are as follows:    sortKeyName = :sortkeyval - true if the sort key value is equal to :sortkeyval.    sortKeyName  :sortkeyval - true if the sort key value is less than :sortkeyval.    sortKeyName  :sortkeyval - true if the sort key value is less than or equal to :sortkeyval.    sortKeyName > :sortkeyval - true if the sort key value is greater than :sortkeyval.    sortKeyName >=  :sortkeyval - true if the sort key value is greater than or equal to :sortkeyval.    sortKeyName BETWEEN :sortkeyval1 AND :sortkeyval2 - true if the sort key value is greater than or equal to :sortkeyval1, and less than or equal to :sortkeyval2.    begins_with ( sortKeyName, :sortkeyval ) - true if the sort key value begins with a particular operand. (You cannot use this function with a sort key that is of type Number.)  Note that the function name begins_with is case-sensitive.
        ///
        ///  Use the ExpressionAttributeValues parameter to replace tokens such as :partitionval and :sortval with actual values at runtime.
        ///  You can optionally use the ExpressionAttributeNames parameter to replace the names of the partition key and sort key with placeholder tokens. This option might be necessary if an attribute name conflicts with a DynamoDB reserved word. For example, the following KeyConditionExpression parameter causes an error because Size is a reserved word:    Size = :myval    To work around this, define a placeholder (such a #S) to represent the attribute name Size. KeyConditionExpression then is as follows:    #S = :myval    For a list of reserved words, see Reserved Words in the Amazon DynamoDB Developer Guide.
        ///  For more information on ExpressionAttributeNames and ExpressionAttributeValues, see Using Placeholders for Attribute Names and Values in the Amazon DynamoDB Developer Guide.
        public let keyConditionExpression: String?
        /// This is a legacy parameter.  Use KeyConditionExpression instead.   For more information, see KeyConditions in the Amazon DynamoDB Developer Guide.
        public let keyConditions: [String: Condition]?
        /// The maximum number of items to evaluate (not necessarily the number of matching items). If DynamoDB processes the number of items up to the limit while processing the results, it stops the operation and returns the matching values up to that point, and a key in LastEvaluatedKey to apply in a subsequent operation, so that you can pick up where you left off. Also, if the processed dataset size exceeds 1 MB before DynamoDB reaches this limit, it stops the operation and returns the matching values up to the limit, and a key in LastEvaluatedKey to apply in a subsequent operation to continue the operation. For more information, see Query and Scan in the Amazon DynamoDB Developer Guide.
        public let limit: Int?
        /// A string that identifies one or more attributes to retrieve from the table. These attributes can include scalars, sets, or elements of a JSON document. The attributes in the expression must be separated by commas. If no attribute names are specified, then all attributes will be returned. If any of the requested attributes are not found, they will not appear in the result. For more information, see Accessing Item Attributes in the Amazon DynamoDB Developer Guide.
        public let projectionExpression: String?
        /// This is a legacy parameter.  Use FilterExpression instead.   For more information, see QueryFilter in the Amazon DynamoDB Developer Guide.
        public let queryFilter: [String: Condition]?
        public let returnConsumedCapacity: ReturnConsumedCapacity?
        /// Specifies the order for index traversal: If true (default), the traversal is performed in ascending order; if false, the traversal is performed in descending order.  Items with the same partition key value are stored in sorted order by sort key. If the sort key data type is Number, the results are stored in numeric order. For type String, the results are stored in order of UTF-8 bytes. For type Binary, DynamoDB treats each byte of the binary data as unsigned. If ScanIndexForward is true, DynamoDB returns the results in the order in which they are stored (by sort key value). This is the default behavior. If ScanIndexForward is false, DynamoDB reads the results in reverse order by sort key value, and then returns the results to the client.
        public let scanIndexForward: Bool?
        /// The attributes to be returned in the result. You can retrieve all item attributes, specific item attributes, the count of matching items, or in the case of an index, some or all of the attributes projected into the index.    ALL_ATTRIBUTES - Returns all of the item attributes from the specified table or index. If you query a local secondary index, then for each matching item in the index, DynamoDB fetches the entire item from the parent table. If the index is configured to project all item attributes, then all of the data can be obtained from the local secondary index, and no fetching is required.    ALL_PROJECTED_ATTRIBUTES - Allowed only when querying an index. Retrieves all attributes that have been projected into the index. If the index is configured to project all attributes, this return value is equivalent to specifying ALL_ATTRIBUTES.    COUNT - Returns the number of matching items, rather than the matching items themselves.    SPECIFIC_ATTRIBUTES - Returns only the attributes listed in AttributesToGet. This return value is equivalent to specifying AttributesToGet without specifying any value for Select. If you query or scan a local secondary index and request only attributes that are projected into that index, the operation will read only the index and not the table. If any of the requested attributes are not projected into the local secondary index, DynamoDB fetches each of these attributes from the parent table. This extra fetching incurs additional throughput cost and latency. If you query or scan a global secondary index, you can only request attributes that are projected into the index. Global secondary index queries cannot fetch attributes from the parent table.   If neither Select nor AttributesToGet are specified, DynamoDB defaults to ALL_ATTRIBUTES when accessing a table, and ALL_PROJECTED_ATTRIBUTES when accessing an index. You cannot use both Select and AttributesToGet together in a single request, unless the value for Select is SPECIFIC_ATTRIBUTES. (This usage is equivalent to specifying AttributesToGet without any value for Select.)  If you use the ProjectionExpression parameter, then the value for Select can only be SPECIFIC_ATTRIBUTES. Any other value for Select will return an error.
        public let select: Select?
        /// The name of the table containing the requested items.
        public let tableName: String

        public init(attributesToGet: [String]? = nil, conditionalOperator: ConditionalOperator? = nil, consistentRead: Bool? = nil, exclusiveStartKey: [String: AttributeValue]? = nil, expressionAttributeNames: [String: String]? = nil, expressionAttributeValues: [String: AttributeValue]? = nil, filterExpression: String? = nil, indexName: String? = nil, keyConditionExpression: String? = nil, keyConditions: [String: Condition]? = nil, limit: Int? = nil, projectionExpression: String? = nil, queryFilter: [String: Condition]? = nil, returnConsumedCapacity: ReturnConsumedCapacity? = nil, scanIndexForward: Bool? = nil, select: Select? = nil, tableName: String) {
            self.attributesToGet = attributesToGet
            self.conditionalOperator = conditionalOperator
            self.consistentRead = consistentRead
            self.exclusiveStartKey = exclusiveStartKey
            self.expressionAttributeNames = expressionAttributeNames
            self.expressionAttributeValues = expressionAttributeValues
            self.filterExpression = filterExpression
            self.indexName = indexName
            self.keyConditionExpression = keyConditionExpression
            self.keyConditions = keyConditions
            self.limit = limit
            self.projectionExpression = projectionExpression
            self.queryFilter = queryFilter
            self.returnConsumedCapacity = returnConsumedCapacity
            self.scanIndexForward = scanIndexForward
            self.select = select
            self.tableName = tableName
        }

        public func validate(name: String) throws {
            try self.attributesToGet?.forEach {
                try validate($0, name: "attributesToGet[]", parent: name, max: 65535)
            }
            try self.validate(self.attributesToGet, name: "attributesToGet", parent: name, min: 1)
            try self.exclusiveStartKey?.forEach {
                try validate($0.key, name: "exclusiveStartKey.key", parent: name, max: 65535)
                try $0.value.validate(name: "\(name).exclusiveStartKey[\"\($0.key)\"]")
            }
            try self.expressionAttributeNames?.forEach {
                try validate($0.value, name: "expressionAttributeNames[\"\($0.key)\"]", parent: name, max: 65535)
            }
            try self.expressionAttributeValues?.forEach {
                try $0.value.validate(name: "\(name).expressionAttributeValues[\"\($0.key)\"]")
            }
            try self.validate(self.indexName, name: "indexName", parent: name, max: 255)
            try self.validate(self.indexName, name: "indexName", parent: name, min: 3)
            try self.validate(self.indexName, name: "indexName", parent: name, pattern: "^[a-zA-Z0-9_.-]+$")
            try self.keyConditions?.forEach {
                try validate($0.key, name: "keyConditions.key", parent: name, max: 65535)
                try $0.value.validate(name: "\(name).keyConditions[\"\($0.key)\"]")
            }
            try self.validate(self.limit, name: "limit", parent: name, min: 1)
            try self.queryFilter?.forEach {
                try validate($0.key, name: "queryFilter.key", parent: name, max: 65535)
                try $0.value.validate(name: "\(name).queryFilter[\"\($0.key)\"]")
            }
            try self.validate(self.tableName, name: "tableName", parent: name, max: 255)
            try self.validate(self.tableName, name: "tableName", parent: name, min: 3)
            try self.validate(self.tableName, name: "tableName", parent: name, pattern: "^[a-zA-Z0-9_.-]+$")
        }

        private enum CodingKeys: String, CodingKey {
            case attributesToGet = "AttributesToGet"
            case conditionalOperator = "ConditionalOperator"
            case consistentRead = "ConsistentRead"
            case exclusiveStartKey = "ExclusiveStartKey"
            case expressionAttributeNames = "ExpressionAttributeNames"
            case expressionAttributeValues = "ExpressionAttributeValues"
            case filterExpression = "FilterExpression"
            case indexName = "IndexName"
            case keyConditionExpression = "KeyConditionExpression"
            case keyConditions = "KeyConditions"
            case limit = "Limit"
            case projectionExpression = "ProjectionExpression"
            case queryFilter = "QueryFilter"
            case returnConsumedCapacity = "ReturnConsumedCapacity"
            case scanIndexForward = "ScanIndexForward"
            case select = "Select"
            case tableName = "TableName"
        }
    }

    public struct QueryOutput: AWSDecodableShape {
        /// The capacity units consumed by the Query operation. The data returned includes the total provisioned throughput consumed, along with statistics for the table and any indexes involved in the operation. ConsumedCapacity is only returned if the ReturnConsumedCapacity parameter was specified. For more information, see Provisioned Throughput in the Amazon DynamoDB Developer Guide.
        public let consumedCapacity: ConsumedCapacity?
        /// The number of items in the response. If you used a QueryFilter in the request, then Count is the number of items returned after the filter was applied, and ScannedCount is the number of matching items before the filter was applied. If you did not use a filter in the request, then Count and ScannedCount are the same.
        public let count: Int?
        /// An array of item attributes that match the query criteria. Each element in this array consists of an attribute name and the value for that attribute.
        public let items: [[String: AttributeValue]]?
        /// The primary key of the item where the operation stopped, inclusive of the previous result set. Use this value to start a new operation, excluding this value in the new request. If LastEvaluatedKey is empty, then the "last page" of results has been processed and there is no more data to be retrieved. If LastEvaluatedKey is not empty, it does not necessarily mean that there is more data in the result set. The only way to know when you have reached the end of the result set is when LastEvaluatedKey is empty.
        public let lastEvaluatedKey: [String: AttributeValue]?
        /// The number of items evaluated, before any QueryFilter is applied. A high ScannedCount value with few, or no, Count results indicates an inefficient Query operation. For more information, see Count and ScannedCount in the Amazon DynamoDB Developer Guide. If you did not use a filter in the request, then ScannedCount is the same as Count.
        public let scannedCount: Int?

        public init(consumedCapacity: ConsumedCapacity? = nil, count: Int? = nil, items: [[String: AttributeValue]]? = nil, lastEvaluatedKey: [String: AttributeValue]? = nil, scannedCount: Int? = nil) {
            self.consumedCapacity = consumedCapacity
            self.count = count
            self.items = items
            self.lastEvaluatedKey = lastEvaluatedKey
            self.scannedCount = scannedCount
        }

        private enum CodingKeys: String, CodingKey {
            case consumedCapacity = "ConsumedCapacity"
            case count = "Count"
            case items = "Items"
            case lastEvaluatedKey = "LastEvaluatedKey"
            case scannedCount = "ScannedCount"
        }
    }

    public struct Replica: AWSEncodableShape & AWSDecodableShape {
        /// The Region where the replica needs to be created.
        public let regionName: String?

        public init(regionName: String? = nil) {
            self.regionName = regionName
        }

        private enum CodingKeys: String, CodingKey {
            case regionName = "RegionName"
        }
    }

    public struct ReplicaAutoScalingDescription: AWSDecodableShape {
        /// Replica-specific global secondary index auto scaling settings.
        public let globalSecondaryIndexes: [ReplicaGlobalSecondaryIndexAutoScalingDescription]?
        /// The Region where the replica exists.
        public let regionName: String?
        public let replicaProvisionedReadCapacityAutoScalingSettings: AutoScalingSettingsDescription?
        public let replicaProvisionedWriteCapacityAutoScalingSettings: AutoScalingSettingsDescription?
        /// The current state of the replica:    CREATING - The replica is being created.    UPDATING - The replica is being updated.    DELETING - The replica is being deleted.    ACTIVE - The replica is ready for use.
        public let replicaStatus: ReplicaStatus?

        public init(globalSecondaryIndexes: [ReplicaGlobalSecondaryIndexAutoScalingDescription]? = nil, regionName: String? = nil, replicaProvisionedReadCapacityAutoScalingSettings: AutoScalingSettingsDescription? = nil, replicaProvisionedWriteCapacityAutoScalingSettings: AutoScalingSettingsDescription? = nil, replicaStatus: ReplicaStatus? = nil) {
            self.globalSecondaryIndexes = globalSecondaryIndexes
            self.regionName = regionName
            self.replicaProvisionedReadCapacityAutoScalingSettings = replicaProvisionedReadCapacityAutoScalingSettings
            self.replicaProvisionedWriteCapacityAutoScalingSettings = replicaProvisionedWriteCapacityAutoScalingSettings
            self.replicaStatus = replicaStatus
        }

        private enum CodingKeys: String, CodingKey {
            case globalSecondaryIndexes = "GlobalSecondaryIndexes"
            case regionName = "RegionName"
            case replicaProvisionedReadCapacityAutoScalingSettings = "ReplicaProvisionedReadCapacityAutoScalingSettings"
            case replicaProvisionedWriteCapacityAutoScalingSettings = "ReplicaProvisionedWriteCapacityAutoScalingSettings"
            case replicaStatus = "ReplicaStatus"
        }
    }

    public struct ReplicaAutoScalingUpdate: AWSEncodableShape {
        /// The Region where the replica exists.
        public let regionName: String
        /// Represents the auto scaling settings of global secondary indexes that will be modified.
        public let replicaGlobalSecondaryIndexUpdates: [ReplicaGlobalSecondaryIndexAutoScalingUpdate]?
        public let replicaProvisionedReadCapacityAutoScalingUpdate: AutoScalingSettingsUpdate?

        public init(regionName: String, replicaGlobalSecondaryIndexUpdates: [ReplicaGlobalSecondaryIndexAutoScalingUpdate]? = nil, replicaProvisionedReadCapacityAutoScalingUpdate: AutoScalingSettingsUpdate? = nil) {
            self.regionName = regionName
            self.replicaGlobalSecondaryIndexUpdates = replicaGlobalSecondaryIndexUpdates
            self.replicaProvisionedReadCapacityAutoScalingUpdate = replicaProvisionedReadCapacityAutoScalingUpdate
        }

        public func validate(name: String) throws {
            try self.replicaGlobalSecondaryIndexUpdates?.forEach {
                try $0.validate(name: "\(name).replicaGlobalSecondaryIndexUpdates[]")
            }
            try self.replicaProvisionedReadCapacityAutoScalingUpdate?.validate(name: "\(name).replicaProvisionedReadCapacityAutoScalingUpdate")
        }

        private enum CodingKeys: String, CodingKey {
            case regionName = "RegionName"
            case replicaGlobalSecondaryIndexUpdates = "ReplicaGlobalSecondaryIndexUpdates"
            case replicaProvisionedReadCapacityAutoScalingUpdate = "ReplicaProvisionedReadCapacityAutoScalingUpdate"
        }
    }

    public struct ReplicaDescription: AWSDecodableShape {
        /// Replica-specific global secondary index settings.
        public let globalSecondaryIndexes: [ReplicaGlobalSecondaryIndexDescription]?
        /// The AWS KMS customer master key (CMK) of the replica that will be used for AWS KMS encryption.
        public let kMSMasterKeyId: String?
        /// Replica-specific provisioned throughput. If not described, uses the source table's provisioned throughput settings.
        public let provisionedThroughputOverride: ProvisionedThroughputOverride?
        /// The name of the Region.
        public let regionName: String?
        /// The time at which the replica was first detected as inaccessible. To determine cause of inaccessibility check the ReplicaStatus property.
        public let replicaInaccessibleDateTime: Date?
        /// The current state of the replica:    CREATING - The replica is being created.    UPDATING - The replica is being updated.    DELETING - The replica is being deleted.    ACTIVE - The replica is ready for use.    REGION_DISABLED - The replica is inaccessible because the AWS Region has been disabled.  If the AWS Region remains inaccessible for more than 20 hours, DynamoDB will remove this replica from the replication group. The replica will not be deleted and replication will stop from and to this region.     INACCESSIBLE_ENCRYPTION_CREDENTIALS  - The AWS KMS key used to encrypt the table is inaccessible.  If the AWS KMS key remains inaccessible for more than 20 hours, DynamoDB will remove this replica from the replication group. The replica will not be deleted and replication will stop from and to this region.
        public let replicaStatus: ReplicaStatus?
        /// Detailed information about the replica status.
        public let replicaStatusDescription: String?
        /// Specifies the progress of a Create, Update, or Delete action on the replica as a percentage.
        public let replicaStatusPercentProgress: String?

        public init(globalSecondaryIndexes: [ReplicaGlobalSecondaryIndexDescription]? = nil, kMSMasterKeyId: String? = nil, provisionedThroughputOverride: ProvisionedThroughputOverride? = nil, regionName: String? = nil, replicaInaccessibleDateTime: Date? = nil, replicaStatus: ReplicaStatus? = nil, replicaStatusDescription: String? = nil, replicaStatusPercentProgress: String? = nil) {
            self.globalSecondaryIndexes = globalSecondaryIndexes
            self.kMSMasterKeyId = kMSMasterKeyId
            self.provisionedThroughputOverride = provisionedThroughputOverride
            self.regionName = regionName
            self.replicaInaccessibleDateTime = replicaInaccessibleDateTime
            self.replicaStatus = replicaStatus
            self.replicaStatusDescription = replicaStatusDescription
            self.replicaStatusPercentProgress = replicaStatusPercentProgress
        }

        private enum CodingKeys: String, CodingKey {
            case globalSecondaryIndexes = "GlobalSecondaryIndexes"
            case kMSMasterKeyId = "KMSMasterKeyId"
            case provisionedThroughputOverride = "ProvisionedThroughputOverride"
            case regionName = "RegionName"
            case replicaInaccessibleDateTime = "ReplicaInaccessibleDateTime"
            case replicaStatus = "ReplicaStatus"
            case replicaStatusDescription = "ReplicaStatusDescription"
            case replicaStatusPercentProgress = "ReplicaStatusPercentProgress"
        }
    }

    public struct ReplicaGlobalSecondaryIndex: AWSEncodableShape {
        /// The name of the global secondary index.
        public let indexName: String
        /// Replica table GSI-specific provisioned throughput. If not specified, uses the source table GSI's read capacity settings.
        public let provisionedThroughputOverride: ProvisionedThroughputOverride?

        public init(indexName: String, provisionedThroughputOverride: ProvisionedThroughputOverride? = nil) {
            self.indexName = indexName
            self.provisionedThroughputOverride = provisionedThroughputOverride
        }

        public func validate(name: String) throws {
            try self.validate(self.indexName, name: "indexName", parent: name, max: 255)
            try self.validate(self.indexName, name: "indexName", parent: name, min: 3)
            try self.validate(self.indexName, name: "indexName", parent: name, pattern: "^[a-zA-Z0-9_.-]+$")
            try self.provisionedThroughputOverride?.validate(name: "\(name).provisionedThroughputOverride")
        }

        private enum CodingKeys: String, CodingKey {
            case indexName = "IndexName"
            case provisionedThroughputOverride = "ProvisionedThroughputOverride"
        }
    }

    public struct ReplicaGlobalSecondaryIndexAutoScalingDescription: AWSDecodableShape {
        /// The name of the global secondary index.
        public let indexName: String?
        /// The current state of the replica global secondary index:    CREATING - The index is being created.    UPDATING - The index is being updated.    DELETING - The index is being deleted.    ACTIVE - The index is ready for use.
        public let indexStatus: IndexStatus?
        public let provisionedReadCapacityAutoScalingSettings: AutoScalingSettingsDescription?
        public let provisionedWriteCapacityAutoScalingSettings: AutoScalingSettingsDescription?

        public init(indexName: String? = nil, indexStatus: IndexStatus? = nil, provisionedReadCapacityAutoScalingSettings: AutoScalingSettingsDescription? = nil, provisionedWriteCapacityAutoScalingSettings: AutoScalingSettingsDescription? = nil) {
            self.indexName = indexName
            self.indexStatus = indexStatus
            self.provisionedReadCapacityAutoScalingSettings = provisionedReadCapacityAutoScalingSettings
            self.provisionedWriteCapacityAutoScalingSettings = provisionedWriteCapacityAutoScalingSettings
        }

        private enum CodingKeys: String, CodingKey {
            case indexName = "IndexName"
            case indexStatus = "IndexStatus"
            case provisionedReadCapacityAutoScalingSettings = "ProvisionedReadCapacityAutoScalingSettings"
            case provisionedWriteCapacityAutoScalingSettings = "ProvisionedWriteCapacityAutoScalingSettings"
        }
    }

    public struct ReplicaGlobalSecondaryIndexAutoScalingUpdate: AWSEncodableShape {
        /// The name of the global secondary index.
        public let indexName: String?
        public let provisionedReadCapacityAutoScalingUpdate: AutoScalingSettingsUpdate?

        public init(indexName: String? = nil, provisionedReadCapacityAutoScalingUpdate: AutoScalingSettingsUpdate? = nil) {
            self.indexName = indexName
            self.provisionedReadCapacityAutoScalingUpdate = provisionedReadCapacityAutoScalingUpdate
        }

        public func validate(name: String) throws {
            try self.validate(self.indexName, name: "indexName", parent: name, max: 255)
            try self.validate(self.indexName, name: "indexName", parent: name, min: 3)
            try self.validate(self.indexName, name: "indexName", parent: name, pattern: "^[a-zA-Z0-9_.-]+$")
            try self.provisionedReadCapacityAutoScalingUpdate?.validate(name: "\(name).provisionedReadCapacityAutoScalingUpdate")
        }

        private enum CodingKeys: String, CodingKey {
            case indexName = "IndexName"
            case provisionedReadCapacityAutoScalingUpdate = "ProvisionedReadCapacityAutoScalingUpdate"
        }
    }

    public struct ReplicaGlobalSecondaryIndexDescription: AWSDecodableShape {
        /// The name of the global secondary index.
        public let indexName: String?
        /// If not described, uses the source table GSI's read capacity settings.
        public let provisionedThroughputOverride: ProvisionedThroughputOverride?

        public init(indexName: String? = nil, provisionedThroughputOverride: ProvisionedThroughputOverride? = nil) {
            self.indexName = indexName
            self.provisionedThroughputOverride = provisionedThroughputOverride
        }

        private enum CodingKeys: String, CodingKey {
            case indexName = "IndexName"
            case provisionedThroughputOverride = "ProvisionedThroughputOverride"
        }
    }

    public struct ReplicaGlobalSecondaryIndexSettingsDescription: AWSDecodableShape {
        /// The name of the global secondary index. The name must be unique among all other indexes on this table.
        public let indexName: String
        ///  The current status of the global secondary index:    CREATING - The global secondary index is being created.    UPDATING - The global secondary index is being updated.    DELETING - The global secondary index is being deleted.    ACTIVE - The global secondary index is ready for use.
        public let indexStatus: IndexStatus?
        /// Auto scaling settings for a global secondary index replica's read capacity units.
        public let provisionedReadCapacityAutoScalingSettings: AutoScalingSettingsDescription?
        /// The maximum number of strongly consistent reads consumed per second before DynamoDB returns a ThrottlingException.
        public let provisionedReadCapacityUnits: Int64?
        /// Auto scaling settings for a global secondary index replica's write capacity units.
        public let provisionedWriteCapacityAutoScalingSettings: AutoScalingSettingsDescription?
        /// The maximum number of writes consumed per second before DynamoDB returns a ThrottlingException.
        public let provisionedWriteCapacityUnits: Int64?

        public init(indexName: String, indexStatus: IndexStatus? = nil, provisionedReadCapacityAutoScalingSettings: AutoScalingSettingsDescription? = nil, provisionedReadCapacityUnits: Int64? = nil, provisionedWriteCapacityAutoScalingSettings: AutoScalingSettingsDescription? = nil, provisionedWriteCapacityUnits: Int64? = nil) {
            self.indexName = indexName
            self.indexStatus = indexStatus
            self.provisionedReadCapacityAutoScalingSettings = provisionedReadCapacityAutoScalingSettings
            self.provisionedReadCapacityUnits = provisionedReadCapacityUnits
            self.provisionedWriteCapacityAutoScalingSettings = provisionedWriteCapacityAutoScalingSettings
            self.provisionedWriteCapacityUnits = provisionedWriteCapacityUnits
        }

        private enum CodingKeys: String, CodingKey {
            case indexName = "IndexName"
            case indexStatus = "IndexStatus"
            case provisionedReadCapacityAutoScalingSettings = "ProvisionedReadCapacityAutoScalingSettings"
            case provisionedReadCapacityUnits = "ProvisionedReadCapacityUnits"
            case provisionedWriteCapacityAutoScalingSettings = "ProvisionedWriteCapacityAutoScalingSettings"
            case provisionedWriteCapacityUnits = "ProvisionedWriteCapacityUnits"
        }
    }

    public struct ReplicaGlobalSecondaryIndexSettingsUpdate: AWSEncodableShape {
        /// The name of the global secondary index. The name must be unique among all other indexes on this table.
        public let indexName: String
        /// Auto scaling settings for managing a global secondary index replica's read capacity units.
        public let provisionedReadCapacityAutoScalingSettingsUpdate: AutoScalingSettingsUpdate?
        /// The maximum number of strongly consistent reads consumed per second before DynamoDB returns a ThrottlingException.
        public let provisionedReadCapacityUnits: Int64?

        public init(indexName: String, provisionedReadCapacityAutoScalingSettingsUpdate: AutoScalingSettingsUpdate? = nil, provisionedReadCapacityUnits: Int64? = nil) {
            self.indexName = indexName
            self.provisionedReadCapacityAutoScalingSettingsUpdate = provisionedReadCapacityAutoScalingSettingsUpdate
            self.provisionedReadCapacityUnits = provisionedReadCapacityUnits
        }

        public func validate(name: String) throws {
            try self.validate(self.indexName, name: "indexName", parent: name, max: 255)
            try self.validate(self.indexName, name: "indexName", parent: name, min: 3)
            try self.validate(self.indexName, name: "indexName", parent: name, pattern: "^[a-zA-Z0-9_.-]+$")
            try self.provisionedReadCapacityAutoScalingSettingsUpdate?.validate(name: "\(name).provisionedReadCapacityAutoScalingSettingsUpdate")
            try self.validate(self.provisionedReadCapacityUnits, name: "provisionedReadCapacityUnits", parent: name, min: 1)
        }

        private enum CodingKeys: String, CodingKey {
            case indexName = "IndexName"
            case provisionedReadCapacityAutoScalingSettingsUpdate = "ProvisionedReadCapacityAutoScalingSettingsUpdate"
            case provisionedReadCapacityUnits = "ProvisionedReadCapacityUnits"
        }
    }

    public struct ReplicaSettingsDescription: AWSDecodableShape {
        /// The Region name of the replica.
        public let regionName: String
        /// The read/write capacity mode of the replica.
        public let replicaBillingModeSummary: BillingModeSummary?
        /// Replica global secondary index settings for the global table.
        public let replicaGlobalSecondaryIndexSettings: [ReplicaGlobalSecondaryIndexSettingsDescription]?
        /// Auto scaling settings for a global table replica's read capacity units.
        public let replicaProvisionedReadCapacityAutoScalingSettings: AutoScalingSettingsDescription?
        /// The maximum number of strongly consistent reads consumed per second before DynamoDB returns a ThrottlingException. For more information, see Specifying Read and Write Requirements in the Amazon DynamoDB Developer Guide.
        public let replicaProvisionedReadCapacityUnits: Int64?
        /// Auto scaling settings for a global table replica's write capacity units.
        public let replicaProvisionedWriteCapacityAutoScalingSettings: AutoScalingSettingsDescription?
        /// The maximum number of writes consumed per second before DynamoDB returns a ThrottlingException. For more information, see Specifying Read and Write Requirements in the Amazon DynamoDB Developer Guide.
        public let replicaProvisionedWriteCapacityUnits: Int64?
        /// The current state of the Region:    CREATING - The Region is being created.    UPDATING - The Region is being updated.    DELETING - The Region is being deleted.    ACTIVE - The Region is ready for use.
        public let replicaStatus: ReplicaStatus?

        public init(regionName: String, replicaBillingModeSummary: BillingModeSummary? = nil, replicaGlobalSecondaryIndexSettings: [ReplicaGlobalSecondaryIndexSettingsDescription]? = nil, replicaProvisionedReadCapacityAutoScalingSettings: AutoScalingSettingsDescription? = nil, replicaProvisionedReadCapacityUnits: Int64? = nil, replicaProvisionedWriteCapacityAutoScalingSettings: AutoScalingSettingsDescription? = nil, replicaProvisionedWriteCapacityUnits: Int64? = nil, replicaStatus: ReplicaStatus? = nil) {
            self.regionName = regionName
            self.replicaBillingModeSummary = replicaBillingModeSummary
            self.replicaGlobalSecondaryIndexSettings = replicaGlobalSecondaryIndexSettings
            self.replicaProvisionedReadCapacityAutoScalingSettings = replicaProvisionedReadCapacityAutoScalingSettings
            self.replicaProvisionedReadCapacityUnits = replicaProvisionedReadCapacityUnits
            self.replicaProvisionedWriteCapacityAutoScalingSettings = replicaProvisionedWriteCapacityAutoScalingSettings
            self.replicaProvisionedWriteCapacityUnits = replicaProvisionedWriteCapacityUnits
            self.replicaStatus = replicaStatus
        }

        private enum CodingKeys: String, CodingKey {
            case regionName = "RegionName"
            case replicaBillingModeSummary = "ReplicaBillingModeSummary"
            case replicaGlobalSecondaryIndexSettings = "ReplicaGlobalSecondaryIndexSettings"
            case replicaProvisionedReadCapacityAutoScalingSettings = "ReplicaProvisionedReadCapacityAutoScalingSettings"
            case replicaProvisionedReadCapacityUnits = "ReplicaProvisionedReadCapacityUnits"
            case replicaProvisionedWriteCapacityAutoScalingSettings = "ReplicaProvisionedWriteCapacityAutoScalingSettings"
            case replicaProvisionedWriteCapacityUnits = "ReplicaProvisionedWriteCapacityUnits"
            case replicaStatus = "ReplicaStatus"
        }
    }

    public struct ReplicaSettingsUpdate: AWSEncodableShape {
        /// The Region of the replica to be added.
        public let regionName: String
        /// Represents the settings of a global secondary index for a global table that will be modified.
        public let replicaGlobalSecondaryIndexSettingsUpdate: [ReplicaGlobalSecondaryIndexSettingsUpdate]?
        /// Auto scaling settings for managing a global table replica's read capacity units.
        public let replicaProvisionedReadCapacityAutoScalingSettingsUpdate: AutoScalingSettingsUpdate?
        /// The maximum number of strongly consistent reads consumed per second before DynamoDB returns a ThrottlingException. For more information, see Specifying Read and Write Requirements in the Amazon DynamoDB Developer Guide.
        public let replicaProvisionedReadCapacityUnits: Int64?

        public init(regionName: String, replicaGlobalSecondaryIndexSettingsUpdate: [ReplicaGlobalSecondaryIndexSettingsUpdate]? = nil, replicaProvisionedReadCapacityAutoScalingSettingsUpdate: AutoScalingSettingsUpdate? = nil, replicaProvisionedReadCapacityUnits: Int64? = nil) {
            self.regionName = regionName
            self.replicaGlobalSecondaryIndexSettingsUpdate = replicaGlobalSecondaryIndexSettingsUpdate
            self.replicaProvisionedReadCapacityAutoScalingSettingsUpdate = replicaProvisionedReadCapacityAutoScalingSettingsUpdate
            self.replicaProvisionedReadCapacityUnits = replicaProvisionedReadCapacityUnits
        }

        public func validate(name: String) throws {
            try self.replicaGlobalSecondaryIndexSettingsUpdate?.forEach {
                try $0.validate(name: "\(name).replicaGlobalSecondaryIndexSettingsUpdate[]")
            }
            try self.validate(self.replicaGlobalSecondaryIndexSettingsUpdate, name: "replicaGlobalSecondaryIndexSettingsUpdate", parent: name, max: 20)
            try self.validate(self.replicaGlobalSecondaryIndexSettingsUpdate, name: "replicaGlobalSecondaryIndexSettingsUpdate", parent: name, min: 1)
            try self.replicaProvisionedReadCapacityAutoScalingSettingsUpdate?.validate(name: "\(name).replicaProvisionedReadCapacityAutoScalingSettingsUpdate")
            try self.validate(self.replicaProvisionedReadCapacityUnits, name: "replicaProvisionedReadCapacityUnits", parent: name, min: 1)
        }

        private enum CodingKeys: String, CodingKey {
            case regionName = "RegionName"
            case replicaGlobalSecondaryIndexSettingsUpdate = "ReplicaGlobalSecondaryIndexSettingsUpdate"
            case replicaProvisionedReadCapacityAutoScalingSettingsUpdate = "ReplicaProvisionedReadCapacityAutoScalingSettingsUpdate"
            case replicaProvisionedReadCapacityUnits = "ReplicaProvisionedReadCapacityUnits"
        }
    }

    public struct ReplicaUpdate: AWSEncodableShape {
        /// The parameters required for creating a replica on an existing global table.
        public let create: CreateReplicaAction?
        /// The name of the existing replica to be removed.
        public let delete: DeleteReplicaAction?

        public init(create: CreateReplicaAction? = nil, delete: DeleteReplicaAction? = nil) {
            self.create = create
            self.delete = delete
        }

        private enum CodingKeys: String, CodingKey {
            case create = "Create"
            case delete = "Delete"
        }
    }

    public struct ReplicationGroupUpdate: AWSEncodableShape {
        /// The parameters required for creating a replica for the table.
        public let create: CreateReplicationGroupMemberAction?
        /// The parameters required for deleting a replica for the table.
        public let delete: DeleteReplicationGroupMemberAction?
        /// The parameters required for updating a replica for the table.
        public let update: UpdateReplicationGroupMemberAction?

        public init(create: CreateReplicationGroupMemberAction? = nil, delete: DeleteReplicationGroupMemberAction? = nil, update: UpdateReplicationGroupMemberAction? = nil) {
            self.create = create
            self.delete = delete
            self.update = update
        }

        public func validate(name: String) throws {
            try self.create?.validate(name: "\(name).create")
            try self.update?.validate(name: "\(name).update")
        }

        private enum CodingKeys: String, CodingKey {
            case create = "Create"
            case delete = "Delete"
            case update = "Update"
        }
    }

    public struct RestoreSummary: AWSDecodableShape {
        /// Point in time or source backup time.
        public let restoreDateTime: Date
        /// Indicates if a restore is in progress or not.
        public let restoreInProgress: Bool
        /// The Amazon Resource Name (ARN) of the backup from which the table was restored.
        public let sourceBackupArn: String?
        /// The ARN of the source table of the backup that is being restored.
        public let sourceTableArn: String?

        public init(restoreDateTime: Date, restoreInProgress: Bool, sourceBackupArn: String? = nil, sourceTableArn: String? = nil) {
            self.restoreDateTime = restoreDateTime
            self.restoreInProgress = restoreInProgress
            self.sourceBackupArn = sourceBackupArn
            self.sourceTableArn = sourceTableArn
        }

        private enum CodingKeys: String, CodingKey {
            case restoreDateTime = "RestoreDateTime"
            case restoreInProgress = "RestoreInProgress"
            case sourceBackupArn = "SourceBackupArn"
            case sourceTableArn = "SourceTableArn"
        }
    }

    public struct RestoreTableFromBackupInput: AWSEncodableShape {
        /// The Amazon Resource Name (ARN) associated with the backup.
        public let backupArn: String
        /// The billing mode of the restored table.
        public let billingModeOverride: BillingMode?
        /// List of global secondary indexes for the restored table. The indexes provided should match existing secondary indexes. You can choose to exclude some or all of the indexes at the time of restore.
        public let globalSecondaryIndexOverride: [GlobalSecondaryIndex]?
        /// List of local secondary indexes for the restored table. The indexes provided should match existing secondary indexes. You can choose to exclude some or all of the indexes at the time of restore.
        public let localSecondaryIndexOverride: [LocalSecondaryIndex]?
        /// Provisioned throughput settings for the restored table.
        public let provisionedThroughputOverride: ProvisionedThroughput?
        /// The new server-side encryption settings for the restored table.
        public let sSESpecificationOverride: SSESpecification?
        /// The name of the new table to which the backup must be restored.
        public let targetTableName: String

        public init(backupArn: String, billingModeOverride: BillingMode? = nil, globalSecondaryIndexOverride: [GlobalSecondaryIndex]? = nil, localSecondaryIndexOverride: [LocalSecondaryIndex]? = nil, provisionedThroughputOverride: ProvisionedThroughput? = nil, sSESpecificationOverride: SSESpecification? = nil, targetTableName: String) {
            self.backupArn = backupArn
            self.billingModeOverride = billingModeOverride
            self.globalSecondaryIndexOverride = globalSecondaryIndexOverride
            self.localSecondaryIndexOverride = localSecondaryIndexOverride
            self.provisionedThroughputOverride = provisionedThroughputOverride
            self.sSESpecificationOverride = sSESpecificationOverride
            self.targetTableName = targetTableName
        }

        public func validate(name: String) throws {
            try self.validate(self.backupArn, name: "backupArn", parent: name, max: 1024)
            try self.validate(self.backupArn, name: "backupArn", parent: name, min: 37)
            try self.globalSecondaryIndexOverride?.forEach {
                try $0.validate(name: "\(name).globalSecondaryIndexOverride[]")
            }
            try self.localSecondaryIndexOverride?.forEach {
                try $0.validate(name: "\(name).localSecondaryIndexOverride[]")
            }
            try self.provisionedThroughputOverride?.validate(name: "\(name).provisionedThroughputOverride")
            try self.validate(self.targetTableName, name: "targetTableName", parent: name, max: 255)
            try self.validate(self.targetTableName, name: "targetTableName", parent: name, min: 3)
            try self.validate(self.targetTableName, name: "targetTableName", parent: name, pattern: "^[a-zA-Z0-9_.-]+$")
        }

        private enum CodingKeys: String, CodingKey {
            case backupArn = "BackupArn"
            case billingModeOverride = "BillingModeOverride"
            case globalSecondaryIndexOverride = "GlobalSecondaryIndexOverride"
            case localSecondaryIndexOverride = "LocalSecondaryIndexOverride"
            case provisionedThroughputOverride = "ProvisionedThroughputOverride"
            case sSESpecificationOverride = "SSESpecificationOverride"
            case targetTableName = "TargetTableName"
        }
    }

    public struct RestoreTableFromBackupOutput: AWSDecodableShape {
        /// The description of the table created from an existing backup.
        public let tableDescription: TableDescription?

        public init(tableDescription: TableDescription? = nil) {
            self.tableDescription = tableDescription
        }

        private enum CodingKeys: String, CodingKey {
            case tableDescription = "TableDescription"
        }
    }

    public struct RestoreTableToPointInTimeInput: AWSEncodableShape {
        /// The billing mode of the restored table.
        public let billingModeOverride: BillingMode?
        /// List of global secondary indexes for the restored table. The indexes provided should match existing secondary indexes. You can choose to exclude some or all of the indexes at the time of restore.
        public let globalSecondaryIndexOverride: [GlobalSecondaryIndex]?
        /// List of local secondary indexes for the restored table. The indexes provided should match existing secondary indexes. You can choose to exclude some or all of the indexes at the time of restore.
        public let localSecondaryIndexOverride: [LocalSecondaryIndex]?
        /// Provisioned throughput settings for the restored table.
        public let provisionedThroughputOverride: ProvisionedThroughput?
        /// Time in the past to restore the table to.
        public let restoreDateTime: Date?
        /// The DynamoDB table that will be restored. This value is an Amazon Resource Name (ARN).
        public let sourceTableArn: String?
        /// Name of the source table that is being restored.
        public let sourceTableName: String?
        /// The new server-side encryption settings for the restored table.
        public let sSESpecificationOverride: SSESpecification?
        /// The name of the new table to which it must be restored to.
        public let targetTableName: String
        /// Restore the table to the latest possible time. LatestRestorableDateTime is typically 5 minutes before the current time.
        public let useLatestRestorableTime: Bool?

        public init(billingModeOverride: BillingMode? = nil, globalSecondaryIndexOverride: [GlobalSecondaryIndex]? = nil, localSecondaryIndexOverride: [LocalSecondaryIndex]? = nil, provisionedThroughputOverride: ProvisionedThroughput? = nil, restoreDateTime: Date? = nil, sourceTableArn: String? = nil, sourceTableName: String? = nil, sSESpecificationOverride: SSESpecification? = nil, targetTableName: String, useLatestRestorableTime: Bool? = nil) {
            self.billingModeOverride = billingModeOverride
            self.globalSecondaryIndexOverride = globalSecondaryIndexOverride
            self.localSecondaryIndexOverride = localSecondaryIndexOverride
            self.provisionedThroughputOverride = provisionedThroughputOverride
            self.restoreDateTime = restoreDateTime
            self.sourceTableArn = sourceTableArn
            self.sourceTableName = sourceTableName
            self.sSESpecificationOverride = sSESpecificationOverride
            self.targetTableName = targetTableName
            self.useLatestRestorableTime = useLatestRestorableTime
        }

        public func validate(name: String) throws {
            try self.globalSecondaryIndexOverride?.forEach {
                try $0.validate(name: "\(name).globalSecondaryIndexOverride[]")
            }
            try self.localSecondaryIndexOverride?.forEach {
                try $0.validate(name: "\(name).localSecondaryIndexOverride[]")
            }
            try self.provisionedThroughputOverride?.validate(name: "\(name).provisionedThroughputOverride")
            try self.validate(self.sourceTableName, name: "sourceTableName", parent: name, max: 255)
            try self.validate(self.sourceTableName, name: "sourceTableName", parent: name, min: 3)
            try self.validate(self.sourceTableName, name: "sourceTableName", parent: name, pattern: "^[a-zA-Z0-9_.-]+$")
            try self.validate(self.targetTableName, name: "targetTableName", parent: name, max: 255)
            try self.validate(self.targetTableName, name: "targetTableName", parent: name, min: 3)
            try self.validate(self.targetTableName, name: "targetTableName", parent: name, pattern: "^[a-zA-Z0-9_.-]+$")
        }

        private enum CodingKeys: String, CodingKey {
            case billingModeOverride = "BillingModeOverride"
            case globalSecondaryIndexOverride = "GlobalSecondaryIndexOverride"
            case localSecondaryIndexOverride = "LocalSecondaryIndexOverride"
            case provisionedThroughputOverride = "ProvisionedThroughputOverride"
            case restoreDateTime = "RestoreDateTime"
            case sourceTableArn = "SourceTableArn"
            case sourceTableName = "SourceTableName"
            case sSESpecificationOverride = "SSESpecificationOverride"
            case targetTableName = "TargetTableName"
            case useLatestRestorableTime = "UseLatestRestorableTime"
        }
    }

    public struct RestoreTableToPointInTimeOutput: AWSDecodableShape {
        /// Represents the properties of a table.
        public let tableDescription: TableDescription?

        public init(tableDescription: TableDescription? = nil) {
            self.tableDescription = tableDescription
        }

        private enum CodingKeys: String, CodingKey {
            case tableDescription = "TableDescription"
        }
    }

    public struct SSEDescription: AWSDecodableShape {
        /// Indicates the time, in UNIX epoch date format, when DynamoDB detected that the table's AWS KMS key was inaccessible. This attribute will automatically be cleared when DynamoDB detects that the table's AWS KMS key is accessible again. DynamoDB will initiate the table archival process when table's AWS KMS key remains inaccessible for more than seven days from this date.
        public let inaccessibleEncryptionDateTime: Date?
        /// The AWS KMS customer master key (CMK) ARN used for the AWS KMS encryption.
        public let kMSMasterKeyArn: String?
        /// Server-side encryption type. The only supported value is:    KMS - Server-side encryption that uses AWS Key Management Service. The key is stored in your account and is managed by AWS KMS (AWS KMS charges apply).
        public let sSEType: SSEType?
        /// Represents the current state of server-side encryption. The only supported values are:    ENABLED - Server-side encryption is enabled.    UPDATING - Server-side encryption is being updated.
        public let status: SSEStatus?

        public init(inaccessibleEncryptionDateTime: Date? = nil, kMSMasterKeyArn: String? = nil, sSEType: SSEType? = nil, status: SSEStatus? = nil) {
            self.inaccessibleEncryptionDateTime = inaccessibleEncryptionDateTime
            self.kMSMasterKeyArn = kMSMasterKeyArn
            self.sSEType = sSEType
            self.status = status
        }

        private enum CodingKeys: String, CodingKey {
            case inaccessibleEncryptionDateTime = "InaccessibleEncryptionDateTime"
            case kMSMasterKeyArn = "KMSMasterKeyArn"
            case sSEType = "SSEType"
            case status = "Status"
        }
    }

    public struct SSESpecification: AWSEncodableShape {
        /// Indicates whether server-side encryption is done using an AWS managed CMK or an AWS owned CMK. If enabled (true), server-side encryption type is set to KMS and an AWS managed CMK is used (AWS KMS charges apply). If disabled (false) or not specified, server-side
        /// encryption is set to AWS owned CMK.
        public let enabled: Bool?
        /// The AWS KMS customer master key (CMK) that should be used for the AWS KMS encryption. To specify a CMK, use its key ID, Amazon Resource Name (ARN), alias name, or alias ARN. Note that you should only provide this parameter if the key is different from the default DynamoDB customer master key alias/aws/dynamodb.
        public let kMSMasterKeyId: String?
        /// Server-side encryption type. The only supported value is:    KMS - Server-side encryption that uses AWS Key Management Service. The key is stored in your account and is managed by AWS KMS (AWS KMS charges apply).
        public let sSEType: SSEType?

        public init(enabled: Bool? = nil, kMSMasterKeyId: String? = nil, sSEType: SSEType? = nil) {
            self.enabled = enabled
            self.kMSMasterKeyId = kMSMasterKeyId
            self.sSEType = sSEType
        }

        private enum CodingKeys: String, CodingKey {
            case enabled = "Enabled"
            case kMSMasterKeyId = "KMSMasterKeyId"
            case sSEType = "SSEType"
        }
    }

    public struct ScanInput: AWSEncodableShape {
        /// This is a legacy parameter.  Use ProjectionExpression instead.  For more information, see AttributesToGet in the Amazon DynamoDB Developer Guide.
        public let attributesToGet: [String]?
        /// This is a legacy parameter.  Use FilterExpression instead.   For more information, see ConditionalOperator in the Amazon DynamoDB Developer Guide.
        public let conditionalOperator: ConditionalOperator?
        /// A Boolean value that determines the read consistency model during the scan:   If ConsistentRead is false, then the data returned from Scan might not contain the results from other recently completed write operations (PutItem, UpdateItem, or DeleteItem).   If ConsistentRead is true, then all of the write operations that completed before the Scan began are guaranteed to be contained in the Scan response.   The default setting for ConsistentRead is false. The ConsistentRead parameter is not supported on global secondary indexes. If you scan a global secondary index with ConsistentRead set to true, you will receive a ValidationException.
        public let consistentRead: Bool?
        /// The primary key of the first item that this operation will evaluate. Use the value that was returned for LastEvaluatedKey in the previous operation. The data type for ExclusiveStartKey must be String, Number or Binary. No set data types are allowed. In a parallel scan, a Scan request that includes ExclusiveStartKey must specify the same segment whose previous Scan returned the corresponding value of LastEvaluatedKey.
        public let exclusiveStartKey: [String: AttributeValue]?
        /// One or more substitution tokens for attribute names in an expression. The following are some use cases for using ExpressionAttributeNames:   To access an attribute whose name conflicts with a DynamoDB reserved word.   To create a placeholder for repeating occurrences of an attribute name in an expression.   To prevent special characters in an attribute name from being misinterpreted in an expression.   Use the # character in an expression to dereference an attribute name. For example, consider the following attribute name:    Percentile    The name of this attribute conflicts with a reserved word, so it cannot be used directly in an expression. (For the complete list of reserved words, see Reserved Words in the Amazon DynamoDB Developer Guide). To work around this, you could specify the following for ExpressionAttributeNames:    {"#P":"Percentile"}    You could then use this substitution in an expression, as in this example:    #P = :val     Tokens that begin with the : character are expression attribute values, which are placeholders for the actual value at runtime.  For more information on expression attribute names, see Specifying Item Attributes in the Amazon DynamoDB Developer Guide.
        public let expressionAttributeNames: [String: String]?
        /// One or more values that can be substituted in an expression. Use the : (colon) character in an expression to dereference an attribute value. For example, suppose that you wanted to check whether the value of the ProductStatus attribute was one of the following:   Available | Backordered | Discontinued  You would first need to specify ExpressionAttributeValues as follows:  { ":avail":{"S":"Available"}, ":back":{"S":"Backordered"}, ":disc":{"S":"Discontinued"} }  You could then use these values in an expression, such as this:  ProductStatus IN (:avail, :back, :disc)  For more information on expression attribute values, see Condition Expressions in the Amazon DynamoDB Developer Guide.
        public let expressionAttributeValues: [String: AttributeValue]?
        /// A string that contains conditions that DynamoDB applies after the Scan operation, but before the data is returned to you. Items that do not satisfy the FilterExpression criteria are not returned.  A FilterExpression is applied after the items have already been read; the process of filtering does not consume any additional read capacity units.  For more information, see Filter Expressions in the Amazon DynamoDB Developer Guide.
        public let filterExpression: String?
        /// The name of a secondary index to scan. This index can be any local secondary index or global secondary index.  Note that if you use the IndexName parameter, you must also provide TableName.
        public let indexName: String?
        /// The maximum number of items to evaluate (not necessarily the number of matching items). If DynamoDB processes the number of items up to the limit while processing the results, it stops the operation and returns the matching values up to that point, and a key in LastEvaluatedKey to apply in a subsequent operation, so that you can pick up where you left off. Also, if the processed dataset size exceeds 1 MB before DynamoDB reaches this limit, it stops the operation and returns the matching values up to the limit, and a key in LastEvaluatedKey to apply in a subsequent operation to continue the operation. For more information, see Working with Queries in the Amazon DynamoDB Developer Guide.
        public let limit: Int?
        /// A string that identifies one or more attributes to retrieve from the specified table or index. These attributes can include scalars, sets, or elements of a JSON document. The attributes in the expression must be separated by commas. If no attribute names are specified, then all attributes will be returned. If any of the requested attributes are not found, they will not appear in the result. For more information, see Specifying Item Attributes in the Amazon DynamoDB Developer Guide.
        public let projectionExpression: String?
        public let returnConsumedCapacity: ReturnConsumedCapacity?
        /// This is a legacy parameter.  Use FilterExpression instead.   For more information, see ScanFilter in the Amazon DynamoDB Developer Guide.
        public let scanFilter: [String: Condition]?
        /// For a parallel Scan request, Segment identifies an individual segment to be scanned by an application worker. Segment IDs are zero-based, so the first segment is always 0. For example, if you want to use four application threads to scan a table or an index, then the first thread specifies a Segment value of 0, the second thread specifies 1, and so on. The value of LastEvaluatedKey returned from a parallel Scan request must be used as ExclusiveStartKey with the same segment ID in a subsequent Scan operation. The value for Segment must be greater than or equal to 0, and less than the value provided for TotalSegments. If you provide Segment, you must also provide TotalSegments.
        public let segment: Int?
        /// The attributes to be returned in the result. You can retrieve all item attributes, specific item attributes, the count of matching items, or in the case of an index, some or all of the attributes projected into the index.    ALL_ATTRIBUTES - Returns all of the item attributes from the specified table or index. If you query a local secondary index, then for each matching item in the index, DynamoDB fetches the entire item from the parent table. If the index is configured to project all item attributes, then all of the data can be obtained from the local secondary index, and no fetching is required.    ALL_PROJECTED_ATTRIBUTES - Allowed only when querying an index. Retrieves all attributes that have been projected into the index. If the index is configured to project all attributes, this return value is equivalent to specifying ALL_ATTRIBUTES.    COUNT - Returns the number of matching items, rather than the matching items themselves.    SPECIFIC_ATTRIBUTES - Returns only the attributes listed in AttributesToGet. This return value is equivalent to specifying AttributesToGet without specifying any value for Select. If you query or scan a local secondary index and request only attributes that are projected into that index, the operation reads only the index and not the table. If any of the requested attributes are not projected into the local secondary index, DynamoDB fetches each of these attributes from the parent table. This extra fetching incurs additional throughput cost and latency. If you query or scan a global secondary index, you can only request attributes that are projected into the index. Global secondary index queries cannot fetch attributes from the parent table.   If neither Select nor AttributesToGet are specified, DynamoDB defaults to ALL_ATTRIBUTES when accessing a table, and ALL_PROJECTED_ATTRIBUTES when accessing an index. You cannot use both Select and AttributesToGet together in a single request, unless the value for Select is SPECIFIC_ATTRIBUTES. (This usage is equivalent to specifying AttributesToGet without any value for Select.)  If you use the ProjectionExpression parameter, then the value for Select can only be SPECIFIC_ATTRIBUTES. Any other value for Select will return an error.
        public let select: Select?
        /// The name of the table containing the requested items; or, if you provide IndexName, the name of the table to which that index belongs.
        public let tableName: String
        /// For a parallel Scan request, TotalSegments represents the total number of segments into which the Scan operation will be divided. The value of TotalSegments corresponds to the number of application workers that will perform the parallel scan. For example, if you want to use four application threads to scan a table or an index, specify a TotalSegments value of 4. The value for TotalSegments must be greater than or equal to 1, and less than or equal to 1000000. If you specify a TotalSegments value of 1, the Scan operation will be sequential rather than parallel. If you specify TotalSegments, you must also specify Segment.
        public let totalSegments: Int?

        public init(attributesToGet: [String]? = nil, conditionalOperator: ConditionalOperator? = nil, consistentRead: Bool? = nil, exclusiveStartKey: [String: AttributeValue]? = nil, expressionAttributeNames: [String: String]? = nil, expressionAttributeValues: [String: AttributeValue]? = nil, filterExpression: String? = nil, indexName: String? = nil, limit: Int? = nil, projectionExpression: String? = nil, returnConsumedCapacity: ReturnConsumedCapacity? = nil, scanFilter: [String: Condition]? = nil, segment: Int? = nil, select: Select? = nil, tableName: String, totalSegments: Int? = nil) {
            self.attributesToGet = attributesToGet
            self.conditionalOperator = conditionalOperator
            self.consistentRead = consistentRead
            self.exclusiveStartKey = exclusiveStartKey
            self.expressionAttributeNames = expressionAttributeNames
            self.expressionAttributeValues = expressionAttributeValues
            self.filterExpression = filterExpression
            self.indexName = indexName
            self.limit = limit
            self.projectionExpression = projectionExpression
            self.returnConsumedCapacity = returnConsumedCapacity
            self.scanFilter = scanFilter
            self.segment = segment
            self.select = select
            self.tableName = tableName
            self.totalSegments = totalSegments
        }

        public func validate(name: String) throws {
            try self.attributesToGet?.forEach {
                try validate($0, name: "attributesToGet[]", parent: name, max: 65535)
            }
            try self.validate(self.attributesToGet, name: "attributesToGet", parent: name, min: 1)
            try self.exclusiveStartKey?.forEach {
                try validate($0.key, name: "exclusiveStartKey.key", parent: name, max: 65535)
                try $0.value.validate(name: "\(name).exclusiveStartKey[\"\($0.key)\"]")
            }
            try self.expressionAttributeNames?.forEach {
                try validate($0.value, name: "expressionAttributeNames[\"\($0.key)\"]", parent: name, max: 65535)
            }
            try self.expressionAttributeValues?.forEach {
                try $0.value.validate(name: "\(name).expressionAttributeValues[\"\($0.key)\"]")
            }
            try self.validate(self.indexName, name: "indexName", parent: name, max: 255)
            try self.validate(self.indexName, name: "indexName", parent: name, min: 3)
            try self.validate(self.indexName, name: "indexName", parent: name, pattern: "^[a-zA-Z0-9_.-]+$")
            try self.validate(self.limit, name: "limit", parent: name, min: 1)
            try self.scanFilter?.forEach {
                try validate($0.key, name: "scanFilter.key", parent: name, max: 65535)
                try $0.value.validate(name: "\(name).scanFilter[\"\($0.key)\"]")
            }
            try self.validate(self.segment, name: "segment", parent: name, max: 999_999)
            try self.validate(self.segment, name: "segment", parent: name, min: 0)
            try self.validate(self.tableName, name: "tableName", parent: name, max: 255)
            try self.validate(self.tableName, name: "tableName", parent: name, min: 3)
            try self.validate(self.tableName, name: "tableName", parent: name, pattern: "^[a-zA-Z0-9_.-]+$")
            try self.validate(self.totalSegments, name: "totalSegments", parent: name, max: 1_000_000)
            try self.validate(self.totalSegments, name: "totalSegments", parent: name, min: 1)
        }

        private enum CodingKeys: String, CodingKey {
            case attributesToGet = "AttributesToGet"
            case conditionalOperator = "ConditionalOperator"
            case consistentRead = "ConsistentRead"
            case exclusiveStartKey = "ExclusiveStartKey"
            case expressionAttributeNames = "ExpressionAttributeNames"
            case expressionAttributeValues = "ExpressionAttributeValues"
            case filterExpression = "FilterExpression"
            case indexName = "IndexName"
            case limit = "Limit"
            case projectionExpression = "ProjectionExpression"
            case returnConsumedCapacity = "ReturnConsumedCapacity"
            case scanFilter = "ScanFilter"
            case segment = "Segment"
            case select = "Select"
            case tableName = "TableName"
            case totalSegments = "TotalSegments"
        }
    }

    public struct ScanOutput: AWSDecodableShape {
        /// The capacity units consumed by the Scan operation. The data returned includes the total provisioned throughput consumed, along with statistics for the table and any indexes involved in the operation. ConsumedCapacity is only returned if the ReturnConsumedCapacity parameter was specified. For more information, see Provisioned Throughput in the Amazon DynamoDB Developer Guide.
        public let consumedCapacity: ConsumedCapacity?
        /// The number of items in the response. If you set ScanFilter in the request, then Count is the number of items returned after the filter was applied, and ScannedCount is the number of matching items before the filter was applied. If you did not use a filter in the request, then Count is the same as ScannedCount.
        public let count: Int?
        /// An array of item attributes that match the scan criteria. Each element in this array consists of an attribute name and the value for that attribute.
        public let items: [[String: AttributeValue]]?
        /// The primary key of the item where the operation stopped, inclusive of the previous result set. Use this value to start a new operation, excluding this value in the new request. If LastEvaluatedKey is empty, then the "last page" of results has been processed and there is no more data to be retrieved. If LastEvaluatedKey is not empty, it does not necessarily mean that there is more data in the result set. The only way to know when you have reached the end of the result set is when LastEvaluatedKey is empty.
        public let lastEvaluatedKey: [String: AttributeValue]?
        /// The number of items evaluated, before any ScanFilter is applied. A high ScannedCount value with few, or no, Count results indicates an inefficient Scan operation. For more information, see Count and ScannedCount in the Amazon DynamoDB Developer Guide. If you did not use a filter in the request, then ScannedCount is the same as Count.
        public let scannedCount: Int?

        public init(consumedCapacity: ConsumedCapacity? = nil, count: Int? = nil, items: [[String: AttributeValue]]? = nil, lastEvaluatedKey: [String: AttributeValue]? = nil, scannedCount: Int? = nil) {
            self.consumedCapacity = consumedCapacity
            self.count = count
            self.items = items
            self.lastEvaluatedKey = lastEvaluatedKey
            self.scannedCount = scannedCount
        }

        private enum CodingKeys: String, CodingKey {
            case consumedCapacity = "ConsumedCapacity"
            case count = "Count"
            case items = "Items"
            case lastEvaluatedKey = "LastEvaluatedKey"
            case scannedCount = "ScannedCount"
        }
    }

    public struct SourceTableDetails: AWSDecodableShape {
        /// Controls how you are charged for read and write throughput and how you manage capacity. This setting can be changed later.    PROVISIONED - Sets the read/write capacity mode to PROVISIONED. We recommend using PROVISIONED for predictable workloads.    PAY_PER_REQUEST - Sets the read/write capacity mode to PAY_PER_REQUEST. We recommend using PAY_PER_REQUEST for unpredictable workloads.
        public let billingMode: BillingMode?
        /// Number of items in the table. Note that this is an approximate value.
        public let itemCount: Int64?
        /// Schema of the table.
        public let keySchema: [KeySchemaElement]
        /// Read IOPs and Write IOPS on the table when the backup was created.
        public let provisionedThroughput: ProvisionedThroughput
        /// ARN of the table for which backup was created.
        public let tableArn: String?
        /// Time when the source table was created.
        public let tableCreationDateTime: Date
        /// Unique identifier for the table for which the backup was created.
        public let tableId: String
        /// The name of the table for which the backup was created.
        public let tableName: String
        /// Size of the table in bytes. Note that this is an approximate value.
        public let tableSizeBytes: Int64?

        public init(billingMode: BillingMode? = nil, itemCount: Int64? = nil, keySchema: [KeySchemaElement], provisionedThroughput: ProvisionedThroughput, tableArn: String? = nil, tableCreationDateTime: Date, tableId: String, tableName: String, tableSizeBytes: Int64? = nil) {
            self.billingMode = billingMode
            self.itemCount = itemCount
            self.keySchema = keySchema
            self.provisionedThroughput = provisionedThroughput
            self.tableArn = tableArn
            self.tableCreationDateTime = tableCreationDateTime
            self.tableId = tableId
            self.tableName = tableName
            self.tableSizeBytes = tableSizeBytes
        }

        private enum CodingKeys: String, CodingKey {
            case billingMode = "BillingMode"
            case itemCount = "ItemCount"
            case keySchema = "KeySchema"
            case provisionedThroughput = "ProvisionedThroughput"
            case tableArn = "TableArn"
            case tableCreationDateTime = "TableCreationDateTime"
            case tableId = "TableId"
            case tableName = "TableName"
            case tableSizeBytes = "TableSizeBytes"
        }
    }

    public struct SourceTableFeatureDetails: AWSDecodableShape {
        /// Represents the GSI properties for the table when the backup was created. It includes the IndexName, KeySchema, Projection, and ProvisionedThroughput for the GSIs on the table at the time of backup.
        public let globalSecondaryIndexes: [GlobalSecondaryIndexInfo]?
        /// Represents the LSI properties for the table when the backup was created. It includes the IndexName, KeySchema and Projection for the LSIs on the table at the time of backup.
        public let localSecondaryIndexes: [LocalSecondaryIndexInfo]?
        /// The description of the server-side encryption status on the table when the backup was created.
        public let sSEDescription: SSEDescription?
        /// Stream settings on the table when the backup was created.
        public let streamDescription: StreamSpecification?
        /// Time to Live settings on the table when the backup was created.
        public let timeToLiveDescription: TimeToLiveDescription?

        public init(globalSecondaryIndexes: [GlobalSecondaryIndexInfo]? = nil, localSecondaryIndexes: [LocalSecondaryIndexInfo]? = nil, sSEDescription: SSEDescription? = nil, streamDescription: StreamSpecification? = nil, timeToLiveDescription: TimeToLiveDescription? = nil) {
            self.globalSecondaryIndexes = globalSecondaryIndexes
            self.localSecondaryIndexes = localSecondaryIndexes
            self.sSEDescription = sSEDescription
            self.streamDescription = streamDescription
            self.timeToLiveDescription = timeToLiveDescription
        }

        private enum CodingKeys: String, CodingKey {
            case globalSecondaryIndexes = "GlobalSecondaryIndexes"
            case localSecondaryIndexes = "LocalSecondaryIndexes"
            case sSEDescription = "SSEDescription"
            case streamDescription = "StreamDescription"
            case timeToLiveDescription = "TimeToLiveDescription"
        }
    }

    public struct StreamSpecification: AWSEncodableShape & AWSDecodableShape {
        /// Indicates whether DynamoDB Streams is enabled (true) or disabled (false) on the table.
        public let streamEnabled: Bool
        ///  When an item in the table is modified, StreamViewType determines what information is written to the stream for this table. Valid values for StreamViewType are:    KEYS_ONLY - Only the key attributes of the modified item are written to the stream.    NEW_IMAGE - The entire item, as it appears after it was modified, is written to the stream.    OLD_IMAGE - The entire item, as it appeared before it was modified, is written to the stream.    NEW_AND_OLD_IMAGES - Both the new and the old item images of the item are written to the stream.
        public let streamViewType: StreamViewType?

        public init(streamEnabled: Bool, streamViewType: StreamViewType? = nil) {
            self.streamEnabled = streamEnabled
            self.streamViewType = streamViewType
        }

        private enum CodingKeys: String, CodingKey {
            case streamEnabled = "StreamEnabled"
            case streamViewType = "StreamViewType"
        }
    }

    public struct TableAutoScalingDescription: AWSDecodableShape {
        /// Represents replicas of the global table.
        public let replicas: [ReplicaAutoScalingDescription]?
        /// The name of the table.
        public let tableName: String?
        /// The current state of the table:    CREATING - The table is being created.    UPDATING - The table is being updated.    DELETING - The table is being deleted.    ACTIVE - The table is ready for use.
        public let tableStatus: TableStatus?

        public init(replicas: [ReplicaAutoScalingDescription]? = nil, tableName: String? = nil, tableStatus: TableStatus? = nil) {
            self.replicas = replicas
            self.tableName = tableName
            self.tableStatus = tableStatus
        }

        private enum CodingKeys: String, CodingKey {
            case replicas = "Replicas"
            case tableName = "TableName"
            case tableStatus = "TableStatus"
        }
    }

    public struct TableDescription: AWSDecodableShape {
        /// Contains information about the table archive.
        public let archivalSummary: ArchivalSummary?
        /// An array of AttributeDefinition objects. Each of these objects describes one attribute in the table and index key schema. Each AttributeDefinition object in this array is composed of:    AttributeName - The name of the attribute.    AttributeType - The data type for the attribute.
        public let attributeDefinitions: [AttributeDefinition]?
        /// Contains the details for the read/write capacity mode.
        public let billingModeSummary: BillingModeSummary?
        /// The date and time when the table was created, in UNIX epoch time format.
        public let creationDateTime: Date?
        /// The global secondary indexes, if any, on the table. Each index is scoped to a given partition key value. Each element is composed of:    Backfilling - If true, then the index is currently in the backfilling phase. Backfilling occurs only when a new global secondary index is added to the table. It is the process by which DynamoDB populates the new index with data from the table. (This attribute does not appear for indexes that were created during a CreateTable operation.)  You can delete an index that is being created during the Backfilling phase when IndexStatus is set to CREATING and Backfilling is true. You can't delete the index that is being created when IndexStatus is set to CREATING and Backfilling is false. (This attribute does not appear for indexes that were created during a CreateTable operation.)    IndexName - The name of the global secondary index.    IndexSizeBytes - The total size of the global secondary index, in bytes. DynamoDB updates this value approximately every six hours. Recent changes might not be reflected in this value.     IndexStatus - The current status of the global secondary index:    CREATING - The index is being created.    UPDATING - The index is being updated.    DELETING - The index is being deleted.    ACTIVE - The index is ready for use.      ItemCount - The number of items in the global secondary index. DynamoDB updates this value approximately every six hours. Recent changes might not be reflected in this value.     KeySchema - Specifies the complete index key schema. The attribute names in the key schema must be between 1 and 255 characters (inclusive). The key schema must begin with the same partition key as the table.    Projection - Specifies attributes that are copied (projected) from the table into the index. These are in addition to the primary key attributes and index key attributes, which are automatically projected. Each attribute specification is composed of:    ProjectionType - One of the following:    KEYS_ONLY - Only the index and primary keys are projected into the index.    INCLUDE - In addition to the attributes described in KEYS_ONLY, the secondary index will include other non-key attributes that you specify.    ALL - All of the table attributes are projected into the index.      NonKeyAttributes - A list of one or more non-key attribute names that are projected into the secondary index. The total count of attributes provided in NonKeyAttributes, summed across all of the secondary indexes, must not exceed 20. If you project the same attribute into two different indexes, this counts as two distinct attributes when determining the total.      ProvisionedThroughput - The provisioned throughput settings for the global secondary index, consisting of read and write capacity units, along with data about increases and decreases.    If the table is in the DELETING state, no information about indexes will be returned.
        public let globalSecondaryIndexes: [GlobalSecondaryIndexDescription]?
        /// Represents the version of global tables in use, if the table is replicated across AWS Regions.
        public let globalTableVersion: String?
        /// The number of items in the specified table. DynamoDB updates this value approximately every six hours. Recent changes might not be reflected in this value.
        public let itemCount: Int64?
        /// The primary key structure for the table. Each KeySchemaElement consists of:    AttributeName - The name of the attribute.    KeyType - The role of the attribute:    HASH -  partition key    RANGE - sort key    The partition key of an item is also known as its hash attribute.  The term "hash attribute" derives from DynamoDB's usage of an internal hash function to evenly distribute data items across partitions, based on their partition key values. The sort key of an item is also known as its range attribute. The term "range attribute" derives from the way DynamoDB stores items with the same partition key physically close together, in sorted order by the sort key value.
        ///    For more information about primary keys, see Primary Key in the Amazon DynamoDB Developer Guide.
        public let keySchema: [KeySchemaElement]?
        /// The Amazon Resource Name (ARN) that uniquely identifies the latest stream for this table.
        public let latestStreamArn: String?
        /// A timestamp, in ISO 8601 format, for this stream.
        ///  Note that LatestStreamLabel is not a unique identifier for the stream, because it is possible that a stream from another table might have the same timestamp. However, the combination of the following three elements is guaranteed to be unique:   AWS customer ID   Table name    StreamLabel
        public let latestStreamLabel: String?
        /// Represents one or more local secondary indexes on the table. Each index is scoped to a given partition key value. Tables with one or more local secondary indexes are subject to an item collection size limit, where the amount of data within a given item collection cannot exceed 10 GB. Each element is composed of:    IndexName - The name of the local secondary index.    KeySchema - Specifies the complete index key schema. The attribute names in the key schema must be between 1 and 255 characters (inclusive). The key schema must begin with the same partition key as the table.    Projection - Specifies attributes that are copied (projected) from the table into the index. These are in addition to the primary key attributes and index key attributes, which are automatically projected. Each attribute specification is composed of:    ProjectionType - One of the following:    KEYS_ONLY - Only the index and primary keys are projected into the index.    INCLUDE - Only the specified table attributes are projected into the index. The list of projected attributes is in NonKeyAttributes.    ALL - All of the table attributes are projected into the index.      NonKeyAttributes - A list of one or more non-key attribute names that are projected into the secondary index. The total count of attributes provided in NonKeyAttributes, summed across all of the secondary indexes, must not exceed 20. If you project the same attribute into two different indexes, this counts as two distinct attributes when determining the total.      IndexSizeBytes - Represents the total size of the index, in bytes. DynamoDB updates this value approximately every six hours. Recent changes might not be reflected in this value.    ItemCount - Represents the number of items in the index. DynamoDB updates this value approximately every six hours. Recent changes might not be reflected in this value.   If the table is in the DELETING state, no information about indexes will be returned.
        public let localSecondaryIndexes: [LocalSecondaryIndexDescription]?
        /// The provisioned throughput settings for the table, consisting of read and write capacity units, along with data about increases and decreases.
        public let provisionedThroughput: ProvisionedThroughputDescription?
        /// Represents replicas of the table.
        public let replicas: [ReplicaDescription]?
        /// Contains details for the restore.
        public let restoreSummary: RestoreSummary?
        /// The description of the server-side encryption status on the specified table.
        public let sSEDescription: SSEDescription?
        /// The current DynamoDB Streams configuration for the table.
        public let streamSpecification: StreamSpecification?
        /// The Amazon Resource Name (ARN) that uniquely identifies the table.
        public let tableArn: String?
        /// Unique identifier for the table for which the backup was created.
        public let tableId: String?
        /// The name of the table.
        public let tableName: String?
        /// The total size of the specified table, in bytes. DynamoDB updates this value approximately every six hours. Recent changes might not be reflected in this value.
        public let tableSizeBytes: Int64?
        /// The current state of the table:    CREATING - The table is being created.    UPDATING - The table is being updated.    DELETING - The table is being deleted.    ACTIVE - The table is ready for use.    INACCESSIBLE_ENCRYPTION_CREDENTIALS - The AWS KMS key used to encrypt the table in inaccessible. Table operations may fail due to failure to use the AWS KMS key. DynamoDB will initiate the table archival process when a table's AWS KMS key remains inaccessible for more than seven days.     ARCHIVING - The table is being archived. Operations are not allowed until archival is complete.     ARCHIVED - The table has been archived. See the ArchivalReason for more information.
        public let tableStatus: TableStatus?

        public init(archivalSummary: ArchivalSummary? = nil, attributeDefinitions: [AttributeDefinition]? = nil, billingModeSummary: BillingModeSummary? = nil, creationDateTime: Date? = nil, globalSecondaryIndexes: [GlobalSecondaryIndexDescription]? = nil, globalTableVersion: String? = nil, itemCount: Int64? = nil, keySchema: [KeySchemaElement]? = nil, latestStreamArn: String? = nil, latestStreamLabel: String? = nil, localSecondaryIndexes: [LocalSecondaryIndexDescription]? = nil, provisionedThroughput: ProvisionedThroughputDescription? = nil, replicas: [ReplicaDescription]? = nil, restoreSummary: RestoreSummary? = nil, sSEDescription: SSEDescription? = nil, streamSpecification: StreamSpecification? = nil, tableArn: String? = nil, tableId: String? = nil, tableName: String? = nil, tableSizeBytes: Int64? = nil, tableStatus: TableStatus? = nil) {
            self.archivalSummary = archivalSummary
            self.attributeDefinitions = attributeDefinitions
            self.billingModeSummary = billingModeSummary
            self.creationDateTime = creationDateTime
            self.globalSecondaryIndexes = globalSecondaryIndexes
            self.globalTableVersion = globalTableVersion
            self.itemCount = itemCount
            self.keySchema = keySchema
            self.latestStreamArn = latestStreamArn
            self.latestStreamLabel = latestStreamLabel
            self.localSecondaryIndexes = localSecondaryIndexes
            self.provisionedThroughput = provisionedThroughput
            self.replicas = replicas
            self.restoreSummary = restoreSummary
            self.sSEDescription = sSEDescription
            self.streamSpecification = streamSpecification
            self.tableArn = tableArn
            self.tableId = tableId
            self.tableName = tableName
            self.tableSizeBytes = tableSizeBytes
            self.tableStatus = tableStatus
        }

        private enum CodingKeys: String, CodingKey {
            case archivalSummary = "ArchivalSummary"
            case attributeDefinitions = "AttributeDefinitions"
            case billingModeSummary = "BillingModeSummary"
            case creationDateTime = "CreationDateTime"
            case globalSecondaryIndexes = "GlobalSecondaryIndexes"
            case globalTableVersion = "GlobalTableVersion"
            case itemCount = "ItemCount"
            case keySchema = "KeySchema"
            case latestStreamArn = "LatestStreamArn"
            case latestStreamLabel = "LatestStreamLabel"
            case localSecondaryIndexes = "LocalSecondaryIndexes"
            case provisionedThroughput = "ProvisionedThroughput"
            case replicas = "Replicas"
            case restoreSummary = "RestoreSummary"
            case sSEDescription = "SSEDescription"
            case streamSpecification = "StreamSpecification"
            case tableArn = "TableArn"
            case tableId = "TableId"
            case tableName = "TableName"
            case tableSizeBytes = "TableSizeBytes"
            case tableStatus = "TableStatus"
        }
    }

    public struct Tag: AWSEncodableShape & AWSDecodableShape {
        /// The key of the tag. Tag keys are case sensitive. Each DynamoDB table can only have up to one tag with the same key. If you try to add an existing tag (same key), the existing tag value will be updated to the new value.
        public let key: String
        /// The value of the tag. Tag values are case-sensitive and can be null.
        public let value: String

        public init(key: String, value: String) {
            self.key = key
            self.value = value
        }

        public func validate(name: String) throws {
            try self.validate(self.key, name: "key", parent: name, max: 128)
            try self.validate(self.key, name: "key", parent: name, min: 1)
            try self.validate(self.value, name: "value", parent: name, max: 256)
        }

        private enum CodingKeys: String, CodingKey {
            case key = "Key"
            case value = "Value"
        }
    }

    public struct TagResourceInput: AWSEncodableShape {
        /// Identifies the Amazon DynamoDB resource to which tags should be added. This value is an Amazon Resource Name (ARN).
        public let resourceArn: String
        /// The tags to be assigned to the Amazon DynamoDB resource.
        public let tags: [Tag]

        public init(resourceArn: String, tags: [Tag]) {
            self.resourceArn = resourceArn
            self.tags = tags
        }

        public func validate(name: String) throws {
            try self.validate(self.resourceArn, name: "resourceArn", parent: name, max: 1283)
            try self.validate(self.resourceArn, name: "resourceArn", parent: name, min: 1)
            try self.tags.forEach {
                try $0.validate(name: "\(name).tags[]")
            }
        }

        private enum CodingKeys: String, CodingKey {
            case resourceArn = "ResourceArn"
            case tags = "Tags"
        }
    }

    public struct TimeToLiveDescription: AWSDecodableShape {
        ///  The name of the TTL attribute for items in the table.
        public let attributeName: String?
        ///  The TTL status for the table.
        public let timeToLiveStatus: TimeToLiveStatus?

        public init(attributeName: String? = nil, timeToLiveStatus: TimeToLiveStatus? = nil) {
            self.attributeName = attributeName
            self.timeToLiveStatus = timeToLiveStatus
        }

        private enum CodingKeys: String, CodingKey {
            case attributeName = "AttributeName"
            case timeToLiveStatus = "TimeToLiveStatus"
        }
    }

    public struct TimeToLiveSpecification: AWSEncodableShape & AWSDecodableShape {
        /// The name of the TTL attribute used to store the expiration time for items in the table.
        public let attributeName: String
        /// Indicates whether TTL is to be enabled (true) or disabled (false) on the table.
        public let enabled: Bool

        public init(attributeName: String, enabled: Bool) {
            self.attributeName = attributeName
            self.enabled = enabled
        }

        public func validate(name: String) throws {
            try self.validate(self.attributeName, name: "attributeName", parent: name, max: 255)
            try self.validate(self.attributeName, name: "attributeName", parent: name, min: 1)
        }

        private enum CodingKeys: String, CodingKey {
            case attributeName = "AttributeName"
            case enabled = "Enabled"
        }
    }

    public struct TransactGetItem: AWSEncodableShape {
        /// Contains the primary key that identifies the item to get, together with the name of the table that contains the item, and optionally the specific attributes of the item to retrieve.
        public let get: Get

        public init(get: Get) {
            self.get = get
        }

        public func validate(name: String) throws {
            try self.get.validate(name: "\(name).get")
        }

        private enum CodingKeys: String, CodingKey {
            case get = "Get"
        }
    }

    public struct TransactGetItemsInput: AWSEncodableShape {
        /// A value of TOTAL causes consumed capacity information to be returned, and a value of NONE prevents that information from being returned. No other value is valid.
        public let returnConsumedCapacity: ReturnConsumedCapacity?
        /// An ordered array of up to 25 TransactGetItem objects, each of which contains a Get structure.
        public let transactItems: [TransactGetItem]

        public init(returnConsumedCapacity: ReturnConsumedCapacity? = nil, transactItems: [TransactGetItem]) {
            self.returnConsumedCapacity = returnConsumedCapacity
            self.transactItems = transactItems
        }

        public func validate(name: String) throws {
            try self.transactItems.forEach {
                try $0.validate(name: "\(name).transactItems[]")
            }
            try self.validate(self.transactItems, name: "transactItems", parent: name, max: 25)
            try self.validate(self.transactItems, name: "transactItems", parent: name, min: 1)
        }

        private enum CodingKeys: String, CodingKey {
            case returnConsumedCapacity = "ReturnConsumedCapacity"
            case transactItems = "TransactItems"
        }
    }

    public struct TransactGetItemsOutput: AWSDecodableShape {
        /// If the ReturnConsumedCapacity value was TOTAL, this is an array of ConsumedCapacity objects, one for each table addressed by TransactGetItem objects in the TransactItems parameter. These ConsumedCapacity objects report the read-capacity units consumed by the TransactGetItems call in that table.
        public let consumedCapacity: [ConsumedCapacity]?
        /// An ordered array of up to 25 ItemResponse objects, each of which corresponds to the TransactGetItem object in the same position in the TransactItems array. Each ItemResponse object contains a Map of the name-value pairs that are the projected attributes of the requested item. If a requested item could not be retrieved, the corresponding ItemResponse object is Null, or if the requested item has no projected attributes, the corresponding ItemResponse object is an empty Map.
        public let responses: [ItemResponse]?

        public init(consumedCapacity: [ConsumedCapacity]? = nil, responses: [ItemResponse]? = nil) {
            self.consumedCapacity = consumedCapacity
            self.responses = responses
        }

        private enum CodingKeys: String, CodingKey {
            case consumedCapacity = "ConsumedCapacity"
            case responses = "Responses"
        }
    }

    public struct TransactWriteItemsInput: AWSEncodableShape {
        /// Providing a ClientRequestToken makes the call to TransactWriteItems idempotent, meaning that multiple identical calls have the same effect as one single call. Although multiple identical calls using the same client request token produce the same result on the server (no side effects), the responses to the calls might not be the same. If the ReturnConsumedCapacity> parameter is set, then the initial TransactWriteItems call returns the amount of write capacity units consumed in making the changes. Subsequent TransactWriteItems calls with the same client token return the number of read capacity units consumed in reading the item. A client request token is valid for 10 minutes after the first request that uses it is completed. After 10 minutes, any request with the same client token is treated as a new request. Do not resubmit the same request with the same client token for more than 10 minutes, or the result might not be idempotent. If you submit a request with the same client token but a change in other parameters within the 10-minute idempotency window, DynamoDB returns an IdempotentParameterMismatch exception.
        public let clientRequestToken: String?
        public let returnConsumedCapacity: ReturnConsumedCapacity?
        /// Determines whether item collection metrics are returned. If set to SIZE, the response includes statistics about item collections (if any), that were modified during the operation and are returned in the response. If set to NONE (the default), no statistics are returned.
        public let returnItemCollectionMetrics: ReturnItemCollectionMetrics?
        /// An ordered array of up to 25 TransactWriteItem objects, each of which contains a ConditionCheck, Put, Update, or Delete object. These can operate on items in different tables, but the tables must reside in the same AWS account and Region, and no two of them can operate on the same item.
        public let transactItems: [TransactWriteItem]

        public init(clientRequestToken: String? = TransactWriteItemsInput.idempotencyToken(), returnConsumedCapacity: ReturnConsumedCapacity? = nil, returnItemCollectionMetrics: ReturnItemCollectionMetrics? = nil, transactItems: [TransactWriteItem]) {
            self.clientRequestToken = clientRequestToken
            self.returnConsumedCapacity = returnConsumedCapacity
            self.returnItemCollectionMetrics = returnItemCollectionMetrics
            self.transactItems = transactItems
        }

        public func validate(name: String) throws {
            try self.validate(self.clientRequestToken, name: "clientRequestToken", parent: name, max: 36)
            try self.validate(self.clientRequestToken, name: "clientRequestToken", parent: name, min: 1)
            try self.transactItems.forEach {
                try $0.validate(name: "\(name).transactItems[]")
            }
            try self.validate(self.transactItems, name: "transactItems", parent: name, max: 25)
            try self.validate(self.transactItems, name: "transactItems", parent: name, min: 1)
        }

        private enum CodingKeys: String, CodingKey {
            case clientRequestToken = "ClientRequestToken"
            case returnConsumedCapacity = "ReturnConsumedCapacity"
            case returnItemCollectionMetrics = "ReturnItemCollectionMetrics"
            case transactItems = "TransactItems"
        }
    }

    public struct TransactWriteItemsOutput: AWSDecodableShape {
        /// The capacity units consumed by the entire TransactWriteItems operation. The values of the list are ordered according to the ordering of the TransactItems request parameter.
        public let consumedCapacity: [ConsumedCapacity]?
        /// A list of tables that were processed by TransactWriteItems and, for each table, information about any item collections that were affected by individual UpdateItem, PutItem, or DeleteItem operations.
        public let itemCollectionMetrics: [String: [ItemCollectionMetrics]]?

        public init(consumedCapacity: [ConsumedCapacity]? = nil, itemCollectionMetrics: [String: [ItemCollectionMetrics]]? = nil) {
            self.consumedCapacity = consumedCapacity
            self.itemCollectionMetrics = itemCollectionMetrics
        }

        private enum CodingKeys: String, CodingKey {
            case consumedCapacity = "ConsumedCapacity"
            case itemCollectionMetrics = "ItemCollectionMetrics"
        }
    }

    public struct UntagResourceInput: AWSEncodableShape {
        /// The DynamoDB resource that the tags will be removed from. This value is an Amazon Resource Name (ARN).
        public let resourceArn: String
        /// A list of tag keys. Existing tags of the resource whose keys are members of this list will be removed from the DynamoDB resource.
        public let tagKeys: [String]

        public init(resourceArn: String, tagKeys: [String]) {
            self.resourceArn = resourceArn
            self.tagKeys = tagKeys
        }

        public func validate(name: String) throws {
            try self.validate(self.resourceArn, name: "resourceArn", parent: name, max: 1283)
            try self.validate(self.resourceArn, name: "resourceArn", parent: name, min: 1)
            try self.tagKeys.forEach {
                try validate($0, name: "tagKeys[]", parent: name, max: 128)
                try validate($0, name: "tagKeys[]", parent: name, min: 1)
            }
        }

        private enum CodingKeys: String, CodingKey {
            case resourceArn = "ResourceArn"
            case tagKeys = "TagKeys"
        }
    }

    public struct Update: AWSEncodableShape {
        /// A condition that must be satisfied in order for a conditional update to succeed.
        public let conditionExpression: String?
        /// One or more substitution tokens for attribute names in an expression.
        public let expressionAttributeNames: [String: String]?
        /// One or more values that can be substituted in an expression.
        public let expressionAttributeValues: [String: AttributeValue]?
        /// The primary key of the item to be updated. Each element consists of an attribute name and a value for that attribute.
        public let key: [String: AttributeValue]
        /// Use ReturnValuesOnConditionCheckFailure to get the item attributes if the Update condition fails. For ReturnValuesOnConditionCheckFailure, the valid values are: NONE, ALL_OLD, UPDATED_OLD, ALL_NEW, UPDATED_NEW.
        public let returnValuesOnConditionCheckFailure: ReturnValuesOnConditionCheckFailure?
        /// Name of the table for the UpdateItem request.
        public let tableName: String
        /// An expression that defines one or more attributes to be updated, the action to be performed on them, and new value(s) for them.
        public let updateExpression: String

        public init(conditionExpression: String? = nil, expressionAttributeNames: [String: String]? = nil, expressionAttributeValues: [String: AttributeValue]? = nil, key: [String: AttributeValue], returnValuesOnConditionCheckFailure: ReturnValuesOnConditionCheckFailure? = nil, tableName: String, updateExpression: String) {
            self.conditionExpression = conditionExpression
            self.expressionAttributeNames = expressionAttributeNames
            self.expressionAttributeValues = expressionAttributeValues
            self.key = key
            self.returnValuesOnConditionCheckFailure = returnValuesOnConditionCheckFailure
            self.tableName = tableName
            self.updateExpression = updateExpression
        }

        public func validate(name: String) throws {
            try self.expressionAttributeNames?.forEach {
                try validate($0.value, name: "expressionAttributeNames[\"\($0.key)\"]", parent: name, max: 65535)
            }
            try self.expressionAttributeValues?.forEach {
                try $0.value.validate(name: "\(name).expressionAttributeValues[\"\($0.key)\"]")
            }
            try self.key.forEach {
                try validate($0.key, name: "key.key", parent: name, max: 65535)
                try $0.value.validate(name: "\(name).key[\"\($0.key)\"]")
            }
            try self.validate(self.tableName, name: "tableName", parent: name, max: 255)
            try self.validate(self.tableName, name: "tableName", parent: name, min: 3)
            try self.validate(self.tableName, name: "tableName", parent: name, pattern: "^[a-zA-Z0-9_.-]+$")
        }

        private enum CodingKeys: String, CodingKey {
            case conditionExpression = "ConditionExpression"
            case expressionAttributeNames = "ExpressionAttributeNames"
            case expressionAttributeValues = "ExpressionAttributeValues"
            case key = "Key"
            case returnValuesOnConditionCheckFailure = "ReturnValuesOnConditionCheckFailure"
            case tableName = "TableName"
            case updateExpression = "UpdateExpression"
        }
    }

    public struct UpdateContinuousBackupsInput: AWSEncodableShape {
        /// Represents the settings used to enable point in time recovery.
        public let pointInTimeRecoverySpecification: PointInTimeRecoverySpecification
        /// The name of the table.
        public let tableName: String

        public init(pointInTimeRecoverySpecification: PointInTimeRecoverySpecification, tableName: String) {
            self.pointInTimeRecoverySpecification = pointInTimeRecoverySpecification
            self.tableName = tableName
        }

        public func validate(name: String) throws {
            try self.validate(self.tableName, name: "tableName", parent: name, max: 255)
            try self.validate(self.tableName, name: "tableName", parent: name, min: 3)
            try self.validate(self.tableName, name: "tableName", parent: name, pattern: "^[a-zA-Z0-9_.-]+$")
        }

        private enum CodingKeys: String, CodingKey {
            case pointInTimeRecoverySpecification = "PointInTimeRecoverySpecification"
            case tableName = "TableName"
        }
    }

    public struct UpdateContinuousBackupsOutput: AWSDecodableShape {
        /// Represents the continuous backups and point in time recovery settings on the table.
        public let continuousBackupsDescription: ContinuousBackupsDescription?

        public init(continuousBackupsDescription: ContinuousBackupsDescription? = nil) {
            self.continuousBackupsDescription = continuousBackupsDescription
        }

        private enum CodingKeys: String, CodingKey {
            case continuousBackupsDescription = "ContinuousBackupsDescription"
        }
    }

    public struct UpdateContributorInsightsInput: AWSEncodableShape {
        /// Represents the contributor insights action.
        public let contributorInsightsAction: ContributorInsightsAction
        /// The global secondary index name, if applicable.
        public let indexName: String?
        /// The name of the table.
        public let tableName: String

        public init(contributorInsightsAction: ContributorInsightsAction, indexName: String? = nil, tableName: String) {
            self.contributorInsightsAction = contributorInsightsAction
            self.indexName = indexName
            self.tableName = tableName
        }

        public func validate(name: String) throws {
            try self.validate(self.indexName, name: "indexName", parent: name, max: 255)
            try self.validate(self.indexName, name: "indexName", parent: name, min: 3)
            try self.validate(self.indexName, name: "indexName", parent: name, pattern: "^[a-zA-Z0-9_.-]+$")
            try self.validate(self.tableName, name: "tableName", parent: name, max: 255)
            try self.validate(self.tableName, name: "tableName", parent: name, min: 3)
            try self.validate(self.tableName, name: "tableName", parent: name, pattern: "^[a-zA-Z0-9_.-]+$")
        }

        private enum CodingKeys: String, CodingKey {
            case contributorInsightsAction = "ContributorInsightsAction"
            case indexName = "IndexName"
            case tableName = "TableName"
        }
    }

    public struct UpdateContributorInsightsOutput: AWSDecodableShape {
        /// The status of contributor insights
        public let contributorInsightsStatus: ContributorInsightsStatus?
        /// The name of the global secondary index, if applicable.
        public let indexName: String?
        /// The name of the table.
        public let tableName: String?

        public init(contributorInsightsStatus: ContributorInsightsStatus? = nil, indexName: String? = nil, tableName: String? = nil) {
            self.contributorInsightsStatus = contributorInsightsStatus
            self.indexName = indexName
            self.tableName = tableName
        }

        private enum CodingKeys: String, CodingKey {
            case contributorInsightsStatus = "ContributorInsightsStatus"
            case indexName = "IndexName"
            case tableName = "TableName"
        }
    }

    public struct UpdateGlobalSecondaryIndexAction: AWSEncodableShape {
        /// The name of the global secondary index to be updated.
        public let indexName: String
        /// Represents the provisioned throughput settings for the specified global secondary index. For current minimum and maximum provisioned throughput values, see Service, Account, and Table Quotas in the Amazon DynamoDB Developer Guide.
        public let provisionedThroughput: ProvisionedThroughput

        public init(indexName: String, provisionedThroughput: ProvisionedThroughput) {
            self.indexName = indexName
            self.provisionedThroughput = provisionedThroughput
        }

        public func validate(name: String) throws {
            try self.validate(self.indexName, name: "indexName", parent: name, max: 255)
            try self.validate(self.indexName, name: "indexName", parent: name, min: 3)
            try self.validate(self.indexName, name: "indexName", parent: name, pattern: "^[a-zA-Z0-9_.-]+$")
            try self.provisionedThroughput.validate(name: "\(name).provisionedThroughput")
        }

        private enum CodingKeys: String, CodingKey {
            case indexName = "IndexName"
            case provisionedThroughput = "ProvisionedThroughput"
        }
    }

    public struct UpdateGlobalTableInput: AWSEncodableShape {
        /// The global table name.
        public let globalTableName: String
        /// A list of Regions that should be added or removed from the global table.
        public let replicaUpdates: [ReplicaUpdate]

        public init(globalTableName: String, replicaUpdates: [ReplicaUpdate]) {
            self.globalTableName = globalTableName
            self.replicaUpdates = replicaUpdates
        }

        public func validate(name: String) throws {
            try self.validate(self.globalTableName, name: "globalTableName", parent: name, max: 255)
            try self.validate(self.globalTableName, name: "globalTableName", parent: name, min: 3)
            try self.validate(self.globalTableName, name: "globalTableName", parent: name, pattern: "^[a-zA-Z0-9_.-]+$")
        }

        private enum CodingKeys: String, CodingKey {
            case globalTableName = "GlobalTableName"
            case replicaUpdates = "ReplicaUpdates"
        }
    }

    public struct UpdateGlobalTableOutput: AWSDecodableShape {
        /// Contains the details of the global table.
        public let globalTableDescription: GlobalTableDescription?

        public init(globalTableDescription: GlobalTableDescription? = nil) {
            self.globalTableDescription = globalTableDescription
        }

        private enum CodingKeys: String, CodingKey {
            case globalTableDescription = "GlobalTableDescription"
        }
    }

    public struct UpdateGlobalTableSettingsInput: AWSEncodableShape {
        /// The billing mode of the global table. If GlobalTableBillingMode is not specified, the global table defaults to PROVISIONED capacity billing mode.    PROVISIONED - We recommend using PROVISIONED for predictable workloads. PROVISIONED sets the billing mode to Provisioned Mode.    PAY_PER_REQUEST - We recommend using PAY_PER_REQUEST for unpredictable workloads. PAY_PER_REQUEST sets the billing mode to On-Demand Mode.
        public let globalTableBillingMode: BillingMode?
        /// Represents the settings of a global secondary index for a global table that will be modified.
        public let globalTableGlobalSecondaryIndexSettingsUpdate: [GlobalTableGlobalSecondaryIndexSettingsUpdate]?
        /// The name of the global table
        public let globalTableName: String
        /// Auto scaling settings for managing provisioned write capacity for the global table.
        public let globalTableProvisionedWriteCapacityAutoScalingSettingsUpdate: AutoScalingSettingsUpdate?
        /// The maximum number of writes consumed per second before DynamoDB returns a ThrottlingException.
        public let globalTableProvisionedWriteCapacityUnits: Int64?
        /// Represents the settings for a global table in a Region that will be modified.
        public let replicaSettingsUpdate: [ReplicaSettingsUpdate]?

        public init(globalTableBillingMode: BillingMode? = nil, globalTableGlobalSecondaryIndexSettingsUpdate: [GlobalTableGlobalSecondaryIndexSettingsUpdate]? = nil, globalTableName: String, globalTableProvisionedWriteCapacityAutoScalingSettingsUpdate: AutoScalingSettingsUpdate? = nil, globalTableProvisionedWriteCapacityUnits: Int64? = nil, replicaSettingsUpdate: [ReplicaSettingsUpdate]? = nil) {
            self.globalTableBillingMode = globalTableBillingMode
            self.globalTableGlobalSecondaryIndexSettingsUpdate = globalTableGlobalSecondaryIndexSettingsUpdate
            self.globalTableName = globalTableName
            self.globalTableProvisionedWriteCapacityAutoScalingSettingsUpdate = globalTableProvisionedWriteCapacityAutoScalingSettingsUpdate
            self.globalTableProvisionedWriteCapacityUnits = globalTableProvisionedWriteCapacityUnits
            self.replicaSettingsUpdate = replicaSettingsUpdate
        }

        public func validate(name: String) throws {
            try self.globalTableGlobalSecondaryIndexSettingsUpdate?.forEach {
                try $0.validate(name: "\(name).globalTableGlobalSecondaryIndexSettingsUpdate[]")
            }
            try self.validate(self.globalTableGlobalSecondaryIndexSettingsUpdate, name: "globalTableGlobalSecondaryIndexSettingsUpdate", parent: name, max: 20)
            try self.validate(self.globalTableGlobalSecondaryIndexSettingsUpdate, name: "globalTableGlobalSecondaryIndexSettingsUpdate", parent: name, min: 1)
            try self.validate(self.globalTableName, name: "globalTableName", parent: name, max: 255)
            try self.validate(self.globalTableName, name: "globalTableName", parent: name, min: 3)
            try self.validate(self.globalTableName, name: "globalTableName", parent: name, pattern: "^[a-zA-Z0-9_.-]+$")
            try self.globalTableProvisionedWriteCapacityAutoScalingSettingsUpdate?.validate(name: "\(name).globalTableProvisionedWriteCapacityAutoScalingSettingsUpdate")
            try self.validate(self.globalTableProvisionedWriteCapacityUnits, name: "globalTableProvisionedWriteCapacityUnits", parent: name, min: 1)
            try self.replicaSettingsUpdate?.forEach {
                try $0.validate(name: "\(name).replicaSettingsUpdate[]")
            }
            try self.validate(self.replicaSettingsUpdate, name: "replicaSettingsUpdate", parent: name, max: 50)
            try self.validate(self.replicaSettingsUpdate, name: "replicaSettingsUpdate", parent: name, min: 1)
        }

        private enum CodingKeys: String, CodingKey {
            case globalTableBillingMode = "GlobalTableBillingMode"
            case globalTableGlobalSecondaryIndexSettingsUpdate = "GlobalTableGlobalSecondaryIndexSettingsUpdate"
            case globalTableName = "GlobalTableName"
            case globalTableProvisionedWriteCapacityAutoScalingSettingsUpdate = "GlobalTableProvisionedWriteCapacityAutoScalingSettingsUpdate"
            case globalTableProvisionedWriteCapacityUnits = "GlobalTableProvisionedWriteCapacityUnits"
            case replicaSettingsUpdate = "ReplicaSettingsUpdate"
        }
    }

    public struct UpdateGlobalTableSettingsOutput: AWSDecodableShape {
        /// The name of the global table.
        public let globalTableName: String?
        /// The Region-specific settings for the global table.
        public let replicaSettings: [ReplicaSettingsDescription]?

        public init(globalTableName: String? = nil, replicaSettings: [ReplicaSettingsDescription]? = nil) {
            self.globalTableName = globalTableName
            self.replicaSettings = replicaSettings
        }

        private enum CodingKeys: String, CodingKey {
            case globalTableName = "GlobalTableName"
            case replicaSettings = "ReplicaSettings"
        }
    }

    public struct UpdateItemInput: AWSEncodableShape {
        /// This is a legacy parameter.  Use UpdateExpression instead.   For more information, see AttributeUpdates in the Amazon DynamoDB Developer Guide.
        public let attributeUpdates: [String: AttributeValueUpdate]?
        /// This is a legacy parameter.  Use ConditionExpression instead.   For more information, see ConditionalOperator in the Amazon DynamoDB Developer Guide.
        public let conditionalOperator: ConditionalOperator?
        /// A condition that must be satisfied in order for a conditional update to succeed. An expression can contain any of the following:   Functions: attribute_exists | attribute_not_exists | attribute_type | contains | begins_with | size  These function names are case-sensitive.   Comparison operators: = | <> | | = | BETWEEN | IN     Logical operators: AND | OR | NOT    For more information about condition expressions, see Specifying Conditions in the Amazon DynamoDB Developer Guide.
        public let conditionExpression: String?
        /// This is a legacy parameter.  Use ConditionExpression instead.   For more information, see Expected in the Amazon DynamoDB Developer Guide.
        public let expected: [String: ExpectedAttributeValue]?
        /// One or more substitution tokens for attribute names in an expression. The following are some use cases for using ExpressionAttributeNames:   To access an attribute whose name conflicts with a DynamoDB reserved word.   To create a placeholder for repeating occurrences of an attribute name in an expression.   To prevent special characters in an attribute name from being misinterpreted in an expression.   Use the # character in an expression to dereference an attribute name. For example, consider the following attribute name:    Percentile    The name of this attribute conflicts with a reserved word, so it cannot be used directly in an expression. (For the complete list of reserved words, see Reserved Words in the Amazon DynamoDB Developer Guide.) To work around this, you could specify the following for ExpressionAttributeNames:    {"#P":"Percentile"}    You could then use this substitution in an expression, as in this example:    #P = :val     Tokens that begin with the : character are expression attribute values, which are placeholders for the actual value at runtime.  For more information about expression attribute names, see Specifying Item Attributes in the Amazon DynamoDB Developer Guide.
        public let expressionAttributeNames: [String: String]?
        /// One or more values that can be substituted in an expression. Use the : (colon) character in an expression to dereference an attribute value. For example, suppose that you wanted to check whether the value of the ProductStatus attribute was one of the following:   Available | Backordered | Discontinued  You would first need to specify ExpressionAttributeValues as follows:  { ":avail":{"S":"Available"}, ":back":{"S":"Backordered"}, ":disc":{"S":"Discontinued"} }  You could then use these values in an expression, such as this:  ProductStatus IN (:avail, :back, :disc)  For more information on expression attribute values, see Condition Expressions in the Amazon DynamoDB Developer Guide.
        public let expressionAttributeValues: [String: AttributeValue]?
        /// The primary key of the item to be updated. Each element consists of an attribute name and a value for that attribute. For the primary key, you must provide all of the attributes. For example, with a simple primary key, you only need to provide a value for the partition key. For a composite primary key, you must provide values for both the partition key and the sort key.
        public let key: [String: AttributeValue]
        public let returnConsumedCapacity: ReturnConsumedCapacity?
        /// Determines whether item collection metrics are returned.  If set to SIZE, the response includes statistics about item collections, if any, that were modified during the operation are returned in the response. If set to NONE (the default), no statistics are returned.
        public let returnItemCollectionMetrics: ReturnItemCollectionMetrics?
        /// Use ReturnValues if you want to get the item attributes as they appear before or after they are updated. For UpdateItem, the valid values are:    NONE - If ReturnValues is not specified, or if its value is NONE, then nothing is returned. (This setting is the default for ReturnValues.)    ALL_OLD - Returns all of the attributes of the item, as they appeared before the UpdateItem operation.    UPDATED_OLD - Returns only the updated attributes, as they appeared before the UpdateItem operation.    ALL_NEW - Returns all of the attributes of the item, as they appear after the UpdateItem operation.    UPDATED_NEW - Returns only the updated attributes, as they appear after the UpdateItem operation.   There is no additional cost associated with requesting a return value aside from the small network and processing overhead of receiving a larger response. No read capacity units are consumed. The values returned are strongly consistent.
        public let returnValues: ReturnValue?
        /// The name of the table containing the item to update.
        public let tableName: String
        /// An expression that defines one or more attributes to be updated, the action to be performed on them, and new values for them. The following action values are available for UpdateExpression.    SET - Adds one or more attributes and values to an item. If any of these attributes already exist, they are replaced by the new values. You can also use SET to add or subtract from an attribute that is of type Number. For example: SET myNum = myNum + :val   SET supports the following functions:    if_not_exists (path, operand) - if the item does not contain an attribute at the specified path, then if_not_exists evaluates to operand; otherwise, it evaluates to path. You can use this function to avoid overwriting an attribute that may already be present in the item.    list_append (operand, operand) - evaluates to a list with a new element added to it. You can append the new element to the start or the end of the list by reversing the order of the operands.   These function names are case-sensitive.    REMOVE - Removes one or more attributes from an item.    ADD - Adds the specified value to the item, if the attribute does not already exist. If the attribute does exist, then the behavior of ADD depends on the data type of the attribute:   If the existing attribute is a number, and if Value is also a number, then Value is mathematically added to the existing attribute. If Value is a negative number, then it is subtracted from the existing attribute.  If you use ADD to increment or decrement a number value for an item that doesn't exist before the update, DynamoDB uses 0 as the initial value. Similarly, if you use ADD for an existing item to increment or decrement an attribute value that doesn't exist before the update, DynamoDB uses 0 as the initial value. For example, suppose that the item you want to update doesn't have an attribute named itemcount, but you decide to ADD the number 3 to this attribute anyway. DynamoDB will create the itemcount attribute, set its initial value to 0, and finally add 3 to it. The result will be a new itemcount attribute in the item, with a value of 3.    If the existing data type is a set and if Value is also a set, then Value is added to the existing set. For example, if the attribute value is the set [1,2], and the ADD action specified [3], then the final attribute value is [1,2,3]. An error occurs if an ADD action is specified for a set attribute and the attribute type specified does not match the existing set type.  Both sets must have the same primitive data type. For example, if the existing data type is a set of strings, the Value must also be a set of strings.    The ADD action only supports Number and set data types. In addition, ADD can only be used on top-level attributes, not nested attributes.     DELETE - Deletes an element from a set. If a set of values is specified, then those values are subtracted from the old set. For example, if the attribute value was the set [a,b,c] and the DELETE action specifies [a,c], then the final attribute value is [b]. Specifying an empty set is an error.  The DELETE action only supports set data types. In addition, DELETE can only be used on top-level attributes, not nested attributes.
        ///    You can have many actions in a single expression, such as the following: SET a=:value1, b=:value2 DELETE :value3, :value4, :value5  For more information on update expressions, see Modifying Items and Attributes in the Amazon DynamoDB Developer Guide.
        public let updateExpression: String?

        public init(attributeUpdates: [String: AttributeValueUpdate]? = nil, conditionalOperator: ConditionalOperator? = nil, conditionExpression: String? = nil, expected: [String: ExpectedAttributeValue]? = nil, expressionAttributeNames: [String: String]? = nil, expressionAttributeValues: [String: AttributeValue]? = nil, key: [String: AttributeValue], returnConsumedCapacity: ReturnConsumedCapacity? = nil, returnItemCollectionMetrics: ReturnItemCollectionMetrics? = nil, returnValues: ReturnValue? = nil, tableName: String, updateExpression: String? = nil) {
            self.attributeUpdates = attributeUpdates
            self.conditionalOperator = conditionalOperator
            self.conditionExpression = conditionExpression
            self.expected = expected
            self.expressionAttributeNames = expressionAttributeNames
            self.expressionAttributeValues = expressionAttributeValues
            self.key = key
            self.returnConsumedCapacity = returnConsumedCapacity
            self.returnItemCollectionMetrics = returnItemCollectionMetrics
            self.returnValues = returnValues
            self.tableName = tableName
            self.updateExpression = updateExpression
        }

        public func validate(name: String) throws {
            try self.attributeUpdates?.forEach {
                try validate($0.key, name: "attributeUpdates.key", parent: name, max: 65535)
                try $0.value.validate(name: "\(name).attributeUpdates[\"\($0.key)\"]")
            }
            try self.expected?.forEach {
                try validate($0.key, name: "expected.key", parent: name, max: 65535)
                try $0.value.validate(name: "\(name).expected[\"\($0.key)\"]")
            }
            try self.expressionAttributeNames?.forEach {
                try validate($0.value, name: "expressionAttributeNames[\"\($0.key)\"]", parent: name, max: 65535)
            }
            try self.expressionAttributeValues?.forEach {
                try $0.value.validate(name: "\(name).expressionAttributeValues[\"\($0.key)\"]")
            }
            try self.key.forEach {
                try validate($0.key, name: "key.key", parent: name, max: 65535)
                try $0.value.validate(name: "\(name).key[\"\($0.key)\"]")
            }
            try self.validate(self.tableName, name: "tableName", parent: name, max: 255)
            try self.validate(self.tableName, name: "tableName", parent: name, min: 3)
            try self.validate(self.tableName, name: "tableName", parent: name, pattern: "^[a-zA-Z0-9_.-]+$")
        }

        private enum CodingKeys: String, CodingKey {
            case attributeUpdates = "AttributeUpdates"
            case conditionalOperator = "ConditionalOperator"
            case conditionExpression = "ConditionExpression"
            case expected = "Expected"
            case expressionAttributeNames = "ExpressionAttributeNames"
            case expressionAttributeValues = "ExpressionAttributeValues"
            case key = "Key"
            case returnConsumedCapacity = "ReturnConsumedCapacity"
            case returnItemCollectionMetrics = "ReturnItemCollectionMetrics"
            case returnValues = "ReturnValues"
            case tableName = "TableName"
            case updateExpression = "UpdateExpression"
        }
    }

    public struct UpdateItemOutput: AWSDecodableShape {
        /// A map of attribute values as they appear before or after the UpdateItem operation, as determined by the ReturnValues parameter. The Attributes map is only present if ReturnValues was specified as something other than NONE in the request. Each element represents one attribute.
        public let attributes: [String: AttributeValue]?
        /// The capacity units consumed by the UpdateItem operation. The data returned includes the total provisioned throughput consumed, along with statistics for the table and any indexes involved in the operation. ConsumedCapacity is only returned if the ReturnConsumedCapacity parameter was specified. For more information, see Provisioned Throughput in the Amazon DynamoDB Developer Guide.
        public let consumedCapacity: ConsumedCapacity?
        /// Information about item collections, if any, that were affected by the UpdateItem operation. ItemCollectionMetrics is only returned if the ReturnItemCollectionMetrics parameter was specified. If the table does not have any local secondary indexes, this information is not returned in the response. Each ItemCollectionMetrics element consists of:    ItemCollectionKey - The partition key value of the item collection. This is the same as the partition key value of the item itself.    SizeEstimateRangeGB - An estimate of item collection size, in gigabytes. This value is a two-element array containing a lower bound and an upper bound for the estimate. The estimate includes the size of all the items in the table, plus the size of all attributes projected into all of the local secondary indexes on that table. Use this estimate to measure whether a local secondary index is approaching its size limit. The estimate is subject to change over time; therefore, do not rely on the precision or accuracy of the estimate.
        public let itemCollectionMetrics: ItemCollectionMetrics?

        public init(attributes: [String: AttributeValue]? = nil, consumedCapacity: ConsumedCapacity? = nil, itemCollectionMetrics: ItemCollectionMetrics? = nil) {
            self.attributes = attributes
            self.consumedCapacity = consumedCapacity
            self.itemCollectionMetrics = itemCollectionMetrics
        }

        private enum CodingKeys: String, CodingKey {
            case attributes = "Attributes"
            case consumedCapacity = "ConsumedCapacity"
            case itemCollectionMetrics = "ItemCollectionMetrics"
        }
    }

    public struct UpdateReplicationGroupMemberAction: AWSEncodableShape {
        /// Replica-specific global secondary index settings.
        public let globalSecondaryIndexes: [ReplicaGlobalSecondaryIndex]?
        /// The AWS KMS customer master key (CMK) of the replica that should be used for AWS KMS encryption. To specify a CMK, use its key ID, Amazon Resource Name (ARN), alias name, or alias ARN. Note that you should only provide this parameter if the key is different from the default DynamoDB KMS master key alias/aws/dynamodb.
        public let kMSMasterKeyId: String?
        /// Replica-specific provisioned throughput. If not specified, uses the source table's provisioned throughput settings.
        public let provisionedThroughputOverride: ProvisionedThroughputOverride?
        /// The Region where the replica exists.
        public let regionName: String

        public init(globalSecondaryIndexes: [ReplicaGlobalSecondaryIndex]? = nil, kMSMasterKeyId: String? = nil, provisionedThroughputOverride: ProvisionedThroughputOverride? = nil, regionName: String) {
            self.globalSecondaryIndexes = globalSecondaryIndexes
            self.kMSMasterKeyId = kMSMasterKeyId
            self.provisionedThroughputOverride = provisionedThroughputOverride
            self.regionName = regionName
        }

        public func validate(name: String) throws {
            try self.globalSecondaryIndexes?.forEach {
                try $0.validate(name: "\(name).globalSecondaryIndexes[]")
            }
            try self.validate(self.globalSecondaryIndexes, name: "globalSecondaryIndexes", parent: name, min: 1)
            try self.provisionedThroughputOverride?.validate(name: "\(name).provisionedThroughputOverride")
        }

        private enum CodingKeys: String, CodingKey {
            case globalSecondaryIndexes = "GlobalSecondaryIndexes"
            case kMSMasterKeyId = "KMSMasterKeyId"
            case provisionedThroughputOverride = "ProvisionedThroughputOverride"
            case regionName = "RegionName"
        }
    }

    public struct UpdateTableInput: AWSEncodableShape {
        /// An array of attributes that describe the key schema for the table and indexes. If you are adding a new global secondary index to the table, AttributeDefinitions must include the key element(s) of the new index.
        public let attributeDefinitions: [AttributeDefinition]?
        /// Controls how you are charged for read and write throughput and how you manage capacity.  When switching from pay-per-request to provisioned capacity, initial provisioned capacity values must be set. The initial provisioned capacity values are estimated based on the consumed read and write capacity of your table and global secondary indexes  over the past 30 minutes.    PROVISIONED - We recommend using PROVISIONED for predictable workloads. PROVISIONED sets the billing mode to Provisioned Mode.    PAY_PER_REQUEST - We recommend using PAY_PER_REQUEST for unpredictable workloads. PAY_PER_REQUEST sets the billing mode to On-Demand Mode.
        public let billingMode: BillingMode?
        /// An array of one or more global secondary indexes for the table. For each index in the array, you can request one action:    Create - add a new global secondary index to the table.    Update - modify the provisioned throughput settings of an existing global secondary index.    Delete - remove a global secondary index from the table.   You can create or delete only one global secondary index per UpdateTable operation. For more information, see Managing Global Secondary Indexes in the Amazon DynamoDB Developer Guide.
        public let globalSecondaryIndexUpdates: [GlobalSecondaryIndexUpdate]?
        /// The new provisioned throughput settings for the specified table or index.
        public let provisionedThroughput: ProvisionedThroughput?
        /// A list of replica update actions (create, delete, or update) for the table.  This property only applies to Version 2019.11.21 of global tables.
        public let replicaUpdates: [ReplicationGroupUpdate]?
        /// The new server-side encryption settings for the specified table.
        public let sSESpecification: SSESpecification?
        /// Represents the DynamoDB Streams configuration for the table.  You receive a ResourceInUseException if you try to enable a stream on a table that already has a stream, or if you try to disable a stream on a table that doesn't have a stream.
        public let streamSpecification: StreamSpecification?
        /// The name of the table to be updated.
        public let tableName: String

        public init(attributeDefinitions: [AttributeDefinition]? = nil, billingMode: BillingMode? = nil, globalSecondaryIndexUpdates: [GlobalSecondaryIndexUpdate]? = nil, provisionedThroughput: ProvisionedThroughput? = nil, replicaUpdates: [ReplicationGroupUpdate]? = nil, sSESpecification: SSESpecification? = nil, streamSpecification: StreamSpecification? = nil, tableName: String) {
            self.attributeDefinitions = attributeDefinitions
            self.billingMode = billingMode
            self.globalSecondaryIndexUpdates = globalSecondaryIndexUpdates
            self.provisionedThroughput = provisionedThroughput
            self.replicaUpdates = replicaUpdates
            self.sSESpecification = sSESpecification
            self.streamSpecification = streamSpecification
            self.tableName = tableName
        }

        public func validate(name: String) throws {
            try self.attributeDefinitions?.forEach {
                try $0.validate(name: "\(name).attributeDefinitions[]")
            }
            try self.globalSecondaryIndexUpdates?.forEach {
                try $0.validate(name: "\(name).globalSecondaryIndexUpdates[]")
            }
            try self.provisionedThroughput?.validate(name: "\(name).provisionedThroughput")
            try self.replicaUpdates?.forEach {
                try $0.validate(name: "\(name).replicaUpdates[]")
            }
            try self.validate(self.replicaUpdates, name: "replicaUpdates", parent: name, min: 1)
            try self.validate(self.tableName, name: "tableName", parent: name, max: 255)
            try self.validate(self.tableName, name: "tableName", parent: name, min: 3)
            try self.validate(self.tableName, name: "tableName", parent: name, pattern: "^[a-zA-Z0-9_.-]+$")
        }

        private enum CodingKeys: String, CodingKey {
            case attributeDefinitions = "AttributeDefinitions"
            case billingMode = "BillingMode"
            case globalSecondaryIndexUpdates = "GlobalSecondaryIndexUpdates"
            case provisionedThroughput = "ProvisionedThroughput"
            case replicaUpdates = "ReplicaUpdates"
            case sSESpecification = "SSESpecification"
            case streamSpecification = "StreamSpecification"
            case tableName = "TableName"
        }
    }

    public struct UpdateTableOutput: AWSDecodableShape {
        /// Represents the properties of the table.
        public let tableDescription: TableDescription?

        public init(tableDescription: TableDescription? = nil) {
            self.tableDescription = tableDescription
        }

        private enum CodingKeys: String, CodingKey {
            case tableDescription = "TableDescription"
        }
    }

    public struct UpdateTableReplicaAutoScalingInput: AWSEncodableShape {
        /// Represents the auto scaling settings of the global secondary indexes of the replica to be updated.
        public let globalSecondaryIndexUpdates: [GlobalSecondaryIndexAutoScalingUpdate]?
        public let provisionedWriteCapacityAutoScalingUpdate: AutoScalingSettingsUpdate?
        /// Represents the auto scaling settings of replicas of the table that will be modified.
        public let replicaUpdates: [ReplicaAutoScalingUpdate]?
        /// The name of the global table to be updated.
        public let tableName: String

        public init(globalSecondaryIndexUpdates: [GlobalSecondaryIndexAutoScalingUpdate]? = nil, provisionedWriteCapacityAutoScalingUpdate: AutoScalingSettingsUpdate? = nil, replicaUpdates: [ReplicaAutoScalingUpdate]? = nil, tableName: String) {
            self.globalSecondaryIndexUpdates = globalSecondaryIndexUpdates
            self.provisionedWriteCapacityAutoScalingUpdate = provisionedWriteCapacityAutoScalingUpdate
            self.replicaUpdates = replicaUpdates
            self.tableName = tableName
        }

        public func validate(name: String) throws {
            try self.globalSecondaryIndexUpdates?.forEach {
                try $0.validate(name: "\(name).globalSecondaryIndexUpdates[]")
            }
            try self.validate(self.globalSecondaryIndexUpdates, name: "globalSecondaryIndexUpdates", parent: name, min: 1)
            try self.provisionedWriteCapacityAutoScalingUpdate?.validate(name: "\(name).provisionedWriteCapacityAutoScalingUpdate")
            try self.replicaUpdates?.forEach {
                try $0.validate(name: "\(name).replicaUpdates[]")
            }
            try self.validate(self.replicaUpdates, name: "replicaUpdates", parent: name, min: 1)
            try self.validate(self.tableName, name: "tableName", parent: name, max: 255)
            try self.validate(self.tableName, name: "tableName", parent: name, min: 3)
            try self.validate(self.tableName, name: "tableName", parent: name, pattern: "^[a-zA-Z0-9_.-]+$")
        }

        private enum CodingKeys: String, CodingKey {
            case globalSecondaryIndexUpdates = "GlobalSecondaryIndexUpdates"
            case provisionedWriteCapacityAutoScalingUpdate = "ProvisionedWriteCapacityAutoScalingUpdate"
            case replicaUpdates = "ReplicaUpdates"
            case tableName = "TableName"
        }
    }

    public struct UpdateTableReplicaAutoScalingOutput: AWSDecodableShape {
        /// Returns information about the auto scaling settings of a table with replicas.
        public let tableAutoScalingDescription: TableAutoScalingDescription?

        public init(tableAutoScalingDescription: TableAutoScalingDescription? = nil) {
            self.tableAutoScalingDescription = tableAutoScalingDescription
        }

        private enum CodingKeys: String, CodingKey {
            case tableAutoScalingDescription = "TableAutoScalingDescription"
        }
    }

    public struct UpdateTimeToLiveInput: AWSEncodableShape {
        /// The name of the table to be configured.
        public let tableName: String
        /// Represents the settings used to enable or disable Time to Live for the specified table.
        public let timeToLiveSpecification: TimeToLiveSpecification

        public init(tableName: String, timeToLiveSpecification: TimeToLiveSpecification) {
            self.tableName = tableName
            self.timeToLiveSpecification = timeToLiveSpecification
        }

        public func validate(name: String) throws {
            try self.validate(self.tableName, name: "tableName", parent: name, max: 255)
            try self.validate(self.tableName, name: "tableName", parent: name, min: 3)
            try self.validate(self.tableName, name: "tableName", parent: name, pattern: "^[a-zA-Z0-9_.-]+$")
            try self.timeToLiveSpecification.validate(name: "\(name).timeToLiveSpecification")
        }

        private enum CodingKeys: String, CodingKey {
            case tableName = "TableName"
            case timeToLiveSpecification = "TimeToLiveSpecification"
        }
    }

    public struct UpdateTimeToLiveOutput: AWSDecodableShape {
        /// Represents the output of an UpdateTimeToLive operation.
        public let timeToLiveSpecification: TimeToLiveSpecification?

        public init(timeToLiveSpecification: TimeToLiveSpecification? = nil) {
            self.timeToLiveSpecification = timeToLiveSpecification
        }

        private enum CodingKeys: String, CodingKey {
            case timeToLiveSpecification = "TimeToLiveSpecification"
        }
    }

    public struct WriteRequest: AWSEncodableShape & AWSDecodableShape {
        /// A request to perform a DeleteItem operation.
        public let deleteRequest: DeleteRequest?
        /// A request to perform a PutItem operation.
        public let putRequest: PutRequest?

        public init(deleteRequest: DeleteRequest? = nil, putRequest: PutRequest? = nil) {
            self.deleteRequest = deleteRequest
            self.putRequest = putRequest
        }

        public func validate(name: String) throws {
            try self.deleteRequest?.validate(name: "\(name).deleteRequest")
            try self.putRequest?.validate(name: "\(name).putRequest")
        }

        private enum CodingKeys: String, CodingKey {
            case deleteRequest = "DeleteRequest"
            case putRequest = "PutRequest"
        }
    }
}
