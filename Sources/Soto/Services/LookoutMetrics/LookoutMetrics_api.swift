//===----------------------------------------------------------------------===//
//
// This source file is part of the Soto for AWS open source project
//
// Copyright (c) 2017-2023 the Soto project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
// See CONTRIBUTORS.txt for the list of Soto project authors
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by https://github.com/soto-project/soto-codegenerator.
// DO NOT EDIT.

@_exported import SotoCore

/// Service object for interacting with AWS LookoutMetrics service.
///
/// This is the Amazon Lookout for Metrics API Reference. For an introduction to the service with tutorials for getting started, visit Amazon Lookout for Metrics Developer Guide.
public struct LookoutMetrics: AWSService {
    // MARK: Member variables

    /// Client used for communication with AWS
    public let client: AWSClient
    /// Service configuration
    public let config: AWSServiceConfig

    // MARK: Initialization

    /// Initialize the LookoutMetrics client
    /// - parameters:
    ///     - client: AWSClient used to process requests
    ///     - region: Region of server you want to communicate with. This will override the partition parameter.
    ///     - partition: AWS partition where service resides, standard (.aws), china (.awscn), government (.awsusgov).
    ///     - endpoint: Custom endpoint URL to use instead of standard AWS servers
    ///     - middleware: Middleware chain used to edit requests before they are sent and responses before they are decoded 
    ///     - timeout: Timeout value for HTTP requests
    ///     - byteBufferAllocator: Allocator for ByteBuffers
    ///     - options: Service options
    public init(
        client: AWSClient,
        region: SotoCore.Region? = nil,
        partition: AWSPartition = .aws,
        endpoint: String? = nil,
        middleware: AWSMiddlewareProtocol? = nil,
        timeout: TimeAmount? = nil,
        byteBufferAllocator: ByteBufferAllocator = ByteBufferAllocator(),
        options: AWSServiceConfig.Options = []
    ) {
        self.client = client
        self.config = AWSServiceConfig(
            region: region,
            partition: region?.partition ?? partition,
            serviceName: "LookoutMetrics",
            serviceIdentifier: "lookoutmetrics",
            serviceProtocol: .restjson,
            apiVersion: "2017-07-25",
            endpoint: endpoint,
            errorType: LookoutMetricsErrorType.self,
            middleware: middleware,
            timeout: timeout,
            byteBufferAllocator: byteBufferAllocator,
            options: options
        )
    }





    // MARK: API Calls

    /// Activates an anomaly detector.
    @Sendable
    public func activateAnomalyDetector(_ input: ActivateAnomalyDetectorRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> ActivateAnomalyDetectorResponse {
        return try await self.client.execute(
            operation: "ActivateAnomalyDetector", 
            path: "/ActivateAnomalyDetector", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Runs a backtest for anomaly detection for the specified resource.
    @Sendable
    public func backTestAnomalyDetector(_ input: BackTestAnomalyDetectorRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> BackTestAnomalyDetectorResponse {
        return try await self.client.execute(
            operation: "BackTestAnomalyDetector", 
            path: "/BackTestAnomalyDetector", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Creates an alert for an anomaly detector.
    @Sendable
    public func createAlert(_ input: CreateAlertRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> CreateAlertResponse {
        return try await self.client.execute(
            operation: "CreateAlert", 
            path: "/CreateAlert", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Creates an anomaly detector.
    @Sendable
    public func createAnomalyDetector(_ input: CreateAnomalyDetectorRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> CreateAnomalyDetectorResponse {
        return try await self.client.execute(
            operation: "CreateAnomalyDetector", 
            path: "/CreateAnomalyDetector", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Creates a dataset.
    @Sendable
    public func createMetricSet(_ input: CreateMetricSetRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> CreateMetricSetResponse {
        return try await self.client.execute(
            operation: "CreateMetricSet", 
            path: "/CreateMetricSet", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Deactivates an anomaly detector.
    @Sendable
    public func deactivateAnomalyDetector(_ input: DeactivateAnomalyDetectorRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DeactivateAnomalyDetectorResponse {
        return try await self.client.execute(
            operation: "DeactivateAnomalyDetector", 
            path: "/DeactivateAnomalyDetector", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Deletes an alert.
    @Sendable
    public func deleteAlert(_ input: DeleteAlertRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DeleteAlertResponse {
        return try await self.client.execute(
            operation: "DeleteAlert", 
            path: "/DeleteAlert", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Deletes a detector. Deleting an anomaly detector will delete all of its corresponding resources including any configured datasets and alerts.
    @Sendable
    public func deleteAnomalyDetector(_ input: DeleteAnomalyDetectorRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DeleteAnomalyDetectorResponse {
        return try await self.client.execute(
            operation: "DeleteAnomalyDetector", 
            path: "/DeleteAnomalyDetector", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Describes an alert. Amazon Lookout for Metrics API actions are eventually consistent. If you do a read operation on a resource immediately after creating or modifying it, use retries to allow time for the write operation to complete.
    @Sendable
    public func describeAlert(_ input: DescribeAlertRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DescribeAlertResponse {
        return try await self.client.execute(
            operation: "DescribeAlert", 
            path: "/DescribeAlert", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Returns information about the status of the specified anomaly detection jobs.
    @Sendable
    public func describeAnomalyDetectionExecutions(_ input: DescribeAnomalyDetectionExecutionsRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DescribeAnomalyDetectionExecutionsResponse {
        return try await self.client.execute(
            operation: "DescribeAnomalyDetectionExecutions", 
            path: "/DescribeAnomalyDetectionExecutions", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Describes a detector. Amazon Lookout for Metrics API actions are eventually consistent. If you do a read operation on a resource immediately after creating or modifying it, use retries to allow time for the write operation to complete.
    @Sendable
    public func describeAnomalyDetector(_ input: DescribeAnomalyDetectorRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DescribeAnomalyDetectorResponse {
        return try await self.client.execute(
            operation: "DescribeAnomalyDetector", 
            path: "/DescribeAnomalyDetector", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Describes a dataset. Amazon Lookout for Metrics API actions are eventually consistent. If you do a read operation on a resource immediately after creating or modifying it, use retries to allow time for the write operation to complete.
    @Sendable
    public func describeMetricSet(_ input: DescribeMetricSetRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DescribeMetricSetResponse {
        return try await self.client.execute(
            operation: "DescribeMetricSet", 
            path: "/DescribeMetricSet", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Detects an Amazon S3 dataset's file format, interval, and offset.
    @Sendable
    public func detectMetricSetConfig(_ input: DetectMetricSetConfigRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DetectMetricSetConfigResponse {
        return try await self.client.execute(
            operation: "DetectMetricSetConfig", 
            path: "/DetectMetricSetConfig", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Returns details about a group of anomalous metrics.
    @Sendable
    public func getAnomalyGroup(_ input: GetAnomalyGroupRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> GetAnomalyGroupResponse {
        return try await self.client.execute(
            operation: "GetAnomalyGroup", 
            path: "/GetAnomalyGroup", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Returns details about the requested data quality metrics.
    @Sendable
    public func getDataQualityMetrics(_ input: GetDataQualityMetricsRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> GetDataQualityMetricsResponse {
        return try await self.client.execute(
            operation: "GetDataQualityMetrics", 
            path: "/GetDataQualityMetrics", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Get feedback for an anomaly group.
    @Sendable
    public func getFeedback(_ input: GetFeedbackRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> GetFeedbackResponse {
        return try await self.client.execute(
            operation: "GetFeedback", 
            path: "/GetFeedback", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Returns a selection of sample records from an Amazon S3 datasource.
    @Sendable
    public func getSampleData(_ input: GetSampleDataRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> GetSampleDataResponse {
        return try await self.client.execute(
            operation: "GetSampleData", 
            path: "/GetSampleData", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Lists the alerts attached to a detector. Amazon Lookout for Metrics API actions are eventually consistent. If you do a read operation on a resource immediately after creating or modifying it, use retries to allow time for the write operation to complete.
    @Sendable
    public func listAlerts(_ input: ListAlertsRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> ListAlertsResponse {
        return try await self.client.execute(
            operation: "ListAlerts", 
            path: "/ListAlerts", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Lists the detectors in the current AWS Region. Amazon Lookout for Metrics API actions are eventually consistent. If you do a read operation on a resource immediately after creating or modifying it, use retries to allow time for the write operation to complete.
    @Sendable
    public func listAnomalyDetectors(_ input: ListAnomalyDetectorsRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> ListAnomalyDetectorsResponse {
        return try await self.client.execute(
            operation: "ListAnomalyDetectors", 
            path: "/ListAnomalyDetectors", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Returns a list of measures that are potential causes or effects of an anomaly group.
    @Sendable
    public func listAnomalyGroupRelatedMetrics(_ input: ListAnomalyGroupRelatedMetricsRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> ListAnomalyGroupRelatedMetricsResponse {
        return try await self.client.execute(
            operation: "ListAnomalyGroupRelatedMetrics", 
            path: "/ListAnomalyGroupRelatedMetrics", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Returns a list of anomaly groups.
    @Sendable
    public func listAnomalyGroupSummaries(_ input: ListAnomalyGroupSummariesRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> ListAnomalyGroupSummariesResponse {
        return try await self.client.execute(
            operation: "ListAnomalyGroupSummaries", 
            path: "/ListAnomalyGroupSummaries", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Gets a list of anomalous metrics for a measure in an anomaly group.
    @Sendable
    public func listAnomalyGroupTimeSeries(_ input: ListAnomalyGroupTimeSeriesRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> ListAnomalyGroupTimeSeriesResponse {
        return try await self.client.execute(
            operation: "ListAnomalyGroupTimeSeries", 
            path: "/ListAnomalyGroupTimeSeries", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Lists the datasets in the current AWS Region. Amazon Lookout for Metrics API actions are eventually consistent. If you do a read operation on a resource immediately after creating or modifying it, use retries to allow time for the write operation to complete.
    @Sendable
    public func listMetricSets(_ input: ListMetricSetsRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> ListMetricSetsResponse {
        return try await self.client.execute(
            operation: "ListMetricSets", 
            path: "/ListMetricSets", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Gets a list of tags for a detector, dataset, or alert.
    @Sendable
    public func listTagsForResource(_ input: ListTagsForResourceRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> ListTagsForResourceResponse {
        return try await self.client.execute(
            operation: "ListTagsForResource", 
            path: "/tags/{ResourceArn}", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Add feedback for an anomalous metric.
    @Sendable
    public func putFeedback(_ input: PutFeedbackRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> PutFeedbackResponse {
        return try await self.client.execute(
            operation: "PutFeedback", 
            path: "/PutFeedback", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Adds tags to a detector, dataset, or alert.
    @Sendable
    public func tagResource(_ input: TagResourceRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> TagResourceResponse {
        return try await self.client.execute(
            operation: "TagResource", 
            path: "/tags/{ResourceArn}", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Removes tags from a detector, dataset, or alert.
    @Sendable
    public func untagResource(_ input: UntagResourceRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> UntagResourceResponse {
        return try await self.client.execute(
            operation: "UntagResource", 
            path: "/tags/{ResourceArn}", 
            httpMethod: .DELETE, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Make changes to an existing alert.
    @Sendable
    public func updateAlert(_ input: UpdateAlertRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> UpdateAlertResponse {
        return try await self.client.execute(
            operation: "UpdateAlert", 
            path: "/UpdateAlert", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Updates a detector. After activation, you can only change a detector's ingestion delay and description.
    @Sendable
    public func updateAnomalyDetector(_ input: UpdateAnomalyDetectorRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> UpdateAnomalyDetectorResponse {
        return try await self.client.execute(
            operation: "UpdateAnomalyDetector", 
            path: "/UpdateAnomalyDetector", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Updates a dataset.
    @Sendable
    public func updateMetricSet(_ input: UpdateMetricSetRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> UpdateMetricSetResponse {
        return try await self.client.execute(
            operation: "UpdateMetricSet", 
            path: "/UpdateMetricSet", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
}

extension LookoutMetrics {
    /// Initializer required by `AWSService.with(middlewares:timeout:byteBufferAllocator:options)`. You are not able to use this initializer directly as there are not public
    /// initializers for `AWSServiceConfig.Patch`. Please use `AWSService.with(middlewares:timeout:byteBufferAllocator:options)` instead.
    public init(from: LookoutMetrics, patch: AWSServiceConfig.Patch) {
        self.client = from.client
        self.config = from.config.with(patch: patch)
    }
}

// MARK: Paginators

@available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
extension LookoutMetrics {
    /// Returns information about the status of the specified anomaly detection jobs.
    /// Return PaginatorSequence for operation.
    ///
    /// - Parameters:
    ///   - input: Input for request
    ///   - logger: Logger used flot logging
    public func describeAnomalyDetectionExecutionsPaginator(
        _ input: DescribeAnomalyDetectionExecutionsRequest,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<DescribeAnomalyDetectionExecutionsRequest, DescribeAnomalyDetectionExecutionsResponse> {
        return .init(
            input: input,
            command: self.describeAnomalyDetectionExecutions,
            inputKey: \DescribeAnomalyDetectionExecutionsRequest.nextToken,
            outputKey: \DescribeAnomalyDetectionExecutionsResponse.nextToken,
            logger: logger
        )
    }

    /// Get feedback for an anomaly group.
    /// Return PaginatorSequence for operation.
    ///
    /// - Parameters:
    ///   - input: Input for request
    ///   - logger: Logger used flot logging
    public func getFeedbackPaginator(
        _ input: GetFeedbackRequest,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<GetFeedbackRequest, GetFeedbackResponse> {
        return .init(
            input: input,
            command: self.getFeedback,
            inputKey: \GetFeedbackRequest.nextToken,
            outputKey: \GetFeedbackResponse.nextToken,
            logger: logger
        )
    }

    /// Lists the alerts attached to a detector. Amazon Lookout for Metrics API actions are eventually consistent. If you do a read operation on a resource immediately after creating or modifying it, use retries to allow time for the write operation to complete.
    /// Return PaginatorSequence for operation.
    ///
    /// - Parameters:
    ///   - input: Input for request
    ///   - logger: Logger used flot logging
    public func listAlertsPaginator(
        _ input: ListAlertsRequest,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<ListAlertsRequest, ListAlertsResponse> {
        return .init(
            input: input,
            command: self.listAlerts,
            inputKey: \ListAlertsRequest.nextToken,
            outputKey: \ListAlertsResponse.nextToken,
            logger: logger
        )
    }

    /// Lists the detectors in the current AWS Region. Amazon Lookout for Metrics API actions are eventually consistent. If you do a read operation on a resource immediately after creating or modifying it, use retries to allow time for the write operation to complete.
    /// Return PaginatorSequence for operation.
    ///
    /// - Parameters:
    ///   - input: Input for request
    ///   - logger: Logger used flot logging
    public func listAnomalyDetectorsPaginator(
        _ input: ListAnomalyDetectorsRequest,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<ListAnomalyDetectorsRequest, ListAnomalyDetectorsResponse> {
        return .init(
            input: input,
            command: self.listAnomalyDetectors,
            inputKey: \ListAnomalyDetectorsRequest.nextToken,
            outputKey: \ListAnomalyDetectorsResponse.nextToken,
            logger: logger
        )
    }

    /// Returns a list of measures that are potential causes or effects of an anomaly group.
    /// Return PaginatorSequence for operation.
    ///
    /// - Parameters:
    ///   - input: Input for request
    ///   - logger: Logger used flot logging
    public func listAnomalyGroupRelatedMetricsPaginator(
        _ input: ListAnomalyGroupRelatedMetricsRequest,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<ListAnomalyGroupRelatedMetricsRequest, ListAnomalyGroupRelatedMetricsResponse> {
        return .init(
            input: input,
            command: self.listAnomalyGroupRelatedMetrics,
            inputKey: \ListAnomalyGroupRelatedMetricsRequest.nextToken,
            outputKey: \ListAnomalyGroupRelatedMetricsResponse.nextToken,
            logger: logger
        )
    }

    /// Returns a list of anomaly groups.
    /// Return PaginatorSequence for operation.
    ///
    /// - Parameters:
    ///   - input: Input for request
    ///   - logger: Logger used flot logging
    public func listAnomalyGroupSummariesPaginator(
        _ input: ListAnomalyGroupSummariesRequest,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<ListAnomalyGroupSummariesRequest, ListAnomalyGroupSummariesResponse> {
        return .init(
            input: input,
            command: self.listAnomalyGroupSummaries,
            inputKey: \ListAnomalyGroupSummariesRequest.nextToken,
            outputKey: \ListAnomalyGroupSummariesResponse.nextToken,
            logger: logger
        )
    }

    /// Gets a list of anomalous metrics for a measure in an anomaly group.
    /// Return PaginatorSequence for operation.
    ///
    /// - Parameters:
    ///   - input: Input for request
    ///   - logger: Logger used flot logging
    public func listAnomalyGroupTimeSeriesPaginator(
        _ input: ListAnomalyGroupTimeSeriesRequest,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<ListAnomalyGroupTimeSeriesRequest, ListAnomalyGroupTimeSeriesResponse> {
        return .init(
            input: input,
            command: self.listAnomalyGroupTimeSeries,
            inputKey: \ListAnomalyGroupTimeSeriesRequest.nextToken,
            outputKey: \ListAnomalyGroupTimeSeriesResponse.nextToken,
            logger: logger
        )
    }

    /// Lists the datasets in the current AWS Region. Amazon Lookout for Metrics API actions are eventually consistent. If you do a read operation on a resource immediately after creating or modifying it, use retries to allow time for the write operation to complete.
    /// Return PaginatorSequence for operation.
    ///
    /// - Parameters:
    ///   - input: Input for request
    ///   - logger: Logger used flot logging
    public func listMetricSetsPaginator(
        _ input: ListMetricSetsRequest,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<ListMetricSetsRequest, ListMetricSetsResponse> {
        return .init(
            input: input,
            command: self.listMetricSets,
            inputKey: \ListMetricSetsRequest.nextToken,
            outputKey: \ListMetricSetsResponse.nextToken,
            logger: logger
        )
    }
}

extension LookoutMetrics.DescribeAnomalyDetectionExecutionsRequest: AWSPaginateToken {
    public func usingPaginationToken(_ token: String) -> LookoutMetrics.DescribeAnomalyDetectionExecutionsRequest {
        return .init(
            anomalyDetectorArn: self.anomalyDetectorArn,
            maxResults: self.maxResults,
            nextToken: token,
            timestamp: self.timestamp
        )
    }
}

extension LookoutMetrics.GetFeedbackRequest: AWSPaginateToken {
    public func usingPaginationToken(_ token: String) -> LookoutMetrics.GetFeedbackRequest {
        return .init(
            anomalyDetectorArn: self.anomalyDetectorArn,
            anomalyGroupTimeSeriesFeedback: self.anomalyGroupTimeSeriesFeedback,
            maxResults: self.maxResults,
            nextToken: token
        )
    }
}

extension LookoutMetrics.ListAlertsRequest: AWSPaginateToken {
    public func usingPaginationToken(_ token: String) -> LookoutMetrics.ListAlertsRequest {
        return .init(
            anomalyDetectorArn: self.anomalyDetectorArn,
            maxResults: self.maxResults,
            nextToken: token
        )
    }
}

extension LookoutMetrics.ListAnomalyDetectorsRequest: AWSPaginateToken {
    public func usingPaginationToken(_ token: String) -> LookoutMetrics.ListAnomalyDetectorsRequest {
        return .init(
            maxResults: self.maxResults,
            nextToken: token
        )
    }
}

extension LookoutMetrics.ListAnomalyGroupRelatedMetricsRequest: AWSPaginateToken {
    public func usingPaginationToken(_ token: String) -> LookoutMetrics.ListAnomalyGroupRelatedMetricsRequest {
        return .init(
            anomalyDetectorArn: self.anomalyDetectorArn,
            anomalyGroupId: self.anomalyGroupId,
            maxResults: self.maxResults,
            nextToken: token,
            relationshipTypeFilter: self.relationshipTypeFilter
        )
    }
}

extension LookoutMetrics.ListAnomalyGroupSummariesRequest: AWSPaginateToken {
    public func usingPaginationToken(_ token: String) -> LookoutMetrics.ListAnomalyGroupSummariesRequest {
        return .init(
            anomalyDetectorArn: self.anomalyDetectorArn,
            maxResults: self.maxResults,
            nextToken: token,
            sensitivityThreshold: self.sensitivityThreshold
        )
    }
}

extension LookoutMetrics.ListAnomalyGroupTimeSeriesRequest: AWSPaginateToken {
    public func usingPaginationToken(_ token: String) -> LookoutMetrics.ListAnomalyGroupTimeSeriesRequest {
        return .init(
            anomalyDetectorArn: self.anomalyDetectorArn,
            anomalyGroupId: self.anomalyGroupId,
            maxResults: self.maxResults,
            metricName: self.metricName,
            nextToken: token
        )
    }
}

extension LookoutMetrics.ListMetricSetsRequest: AWSPaginateToken {
    public func usingPaginationToken(_ token: String) -> LookoutMetrics.ListMetricSetsRequest {
        return .init(
            anomalyDetectorArn: self.anomalyDetectorArn,
            maxResults: self.maxResults,
            nextToken: token
        )
    }
}
