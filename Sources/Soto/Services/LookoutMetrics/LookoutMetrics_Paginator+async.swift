//===----------------------------------------------------------------------===//
//
// This source file is part of the Soto for AWS open source project
//
// Copyright (c) 2017-2021 the Soto project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
// See CONTRIBUTORS.txt for the list of Soto project authors
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by https://github.com/soto-project/soto/tree/main/CodeGenerator. DO NOT EDIT.

#if compiler(>=5.5)

import SotoCore

// MARK: Paginators

@available(macOS 12.0, iOS 15.0, watchOS 8.0, tvOS 15.0, *)
extension LookoutMetrics {
    ///  Returns information about the status of the specified anomaly detection jobs.
    /// Return PaginatorSequence for operation.
    ///
    /// - Parameters:
    ///   - input: Input for request
    ///   - logger: Logger used flot logging
    ///   - eventLoop: EventLoop to run this process on
    public func describeAnomalyDetectionExecutionsPaginator(
        _ input: DescribeAnomalyDetectionExecutionsRequest,
        logger: Logger = AWSClient.loggingDisabled,
        on eventLoop: EventLoop? = nil
    ) -> AWSClient.PaginatorSequence<DescribeAnomalyDetectionExecutionsRequest, DescribeAnomalyDetectionExecutionsResponse> {
        return .init(
            input: input,
            command: describeAnomalyDetectionExecutions,
            inputKey: \DescribeAnomalyDetectionExecutionsRequest.nextToken,
            outputKey: \DescribeAnomalyDetectionExecutionsResponse.nextToken,
            logger: logger,
            on: eventLoop
        )
    }

    ///  Get feedback for an anomaly group.
    /// Return PaginatorSequence for operation.
    ///
    /// - Parameters:
    ///   - input: Input for request
    ///   - logger: Logger used flot logging
    ///   - eventLoop: EventLoop to run this process on
    public func getFeedbackPaginator(
        _ input: GetFeedbackRequest,
        logger: Logger = AWSClient.loggingDisabled,
        on eventLoop: EventLoop? = nil
    ) -> AWSClient.PaginatorSequence<GetFeedbackRequest, GetFeedbackResponse> {
        return .init(
            input: input,
            command: getFeedback,
            inputKey: \GetFeedbackRequest.nextToken,
            outputKey: \GetFeedbackResponse.nextToken,
            logger: logger,
            on: eventLoop
        )
    }

    ///  Lists the alerts attached to a detector. Amazon Lookout for Metrics API actions are eventually consistent. If you do a read operation on a resource immediately after creating or modifying it, use retries to allow time for the write operation to complete.
    /// Return PaginatorSequence for operation.
    ///
    /// - Parameters:
    ///   - input: Input for request
    ///   - logger: Logger used flot logging
    ///   - eventLoop: EventLoop to run this process on
    public func listAlertsPaginator(
        _ input: ListAlertsRequest,
        logger: Logger = AWSClient.loggingDisabled,
        on eventLoop: EventLoop? = nil
    ) -> AWSClient.PaginatorSequence<ListAlertsRequest, ListAlertsResponse> {
        return .init(
            input: input,
            command: listAlerts,
            inputKey: \ListAlertsRequest.nextToken,
            outputKey: \ListAlertsResponse.nextToken,
            logger: logger,
            on: eventLoop
        )
    }

    ///  Lists the detectors in the current AWS Region. Amazon Lookout for Metrics API actions are eventually consistent. If you do a read operation on a resource immediately after creating or modifying it, use retries to allow time for the write operation to complete.
    /// Return PaginatorSequence for operation.
    ///
    /// - Parameters:
    ///   - input: Input for request
    ///   - logger: Logger used flot logging
    ///   - eventLoop: EventLoop to run this process on
    public func listAnomalyDetectorsPaginator(
        _ input: ListAnomalyDetectorsRequest,
        logger: Logger = AWSClient.loggingDisabled,
        on eventLoop: EventLoop? = nil
    ) -> AWSClient.PaginatorSequence<ListAnomalyDetectorsRequest, ListAnomalyDetectorsResponse> {
        return .init(
            input: input,
            command: listAnomalyDetectors,
            inputKey: \ListAnomalyDetectorsRequest.nextToken,
            outputKey: \ListAnomalyDetectorsResponse.nextToken,
            logger: logger,
            on: eventLoop
        )
    }

    ///  Returns a list of anomaly groups.
    /// Return PaginatorSequence for operation.
    ///
    /// - Parameters:
    ///   - input: Input for request
    ///   - logger: Logger used flot logging
    ///   - eventLoop: EventLoop to run this process on
    public func listAnomalyGroupSummariesPaginator(
        _ input: ListAnomalyGroupSummariesRequest,
        logger: Logger = AWSClient.loggingDisabled,
        on eventLoop: EventLoop? = nil
    ) -> AWSClient.PaginatorSequence<ListAnomalyGroupSummariesRequest, ListAnomalyGroupSummariesResponse> {
        return .init(
            input: input,
            command: listAnomalyGroupSummaries,
            inputKey: \ListAnomalyGroupSummariesRequest.nextToken,
            outputKey: \ListAnomalyGroupSummariesResponse.nextToken,
            logger: logger,
            on: eventLoop
        )
    }

    ///  Gets a list of anomalous metrics for a measure in an anomaly group.
    /// Return PaginatorSequence for operation.
    ///
    /// - Parameters:
    ///   - input: Input for request
    ///   - logger: Logger used flot logging
    ///   - eventLoop: EventLoop to run this process on
    public func listAnomalyGroupTimeSeriesPaginator(
        _ input: ListAnomalyGroupTimeSeriesRequest,
        logger: Logger = AWSClient.loggingDisabled,
        on eventLoop: EventLoop? = nil
    ) -> AWSClient.PaginatorSequence<ListAnomalyGroupTimeSeriesRequest, ListAnomalyGroupTimeSeriesResponse> {
        return .init(
            input: input,
            command: listAnomalyGroupTimeSeries,
            inputKey: \ListAnomalyGroupTimeSeriesRequest.nextToken,
            outputKey: \ListAnomalyGroupTimeSeriesResponse.nextToken,
            logger: logger,
            on: eventLoop
        )
    }

    ///  Lists the datasets in the current AWS Region. Amazon Lookout for Metrics API actions are eventually consistent. If you do a read operation on a resource immediately after creating or modifying it, use retries to allow time for the write operation to complete.
    /// Return PaginatorSequence for operation.
    ///
    /// - Parameters:
    ///   - input: Input for request
    ///   - logger: Logger used flot logging
    ///   - eventLoop: EventLoop to run this process on
    public func listMetricSetsPaginator(
        _ input: ListMetricSetsRequest,
        logger: Logger = AWSClient.loggingDisabled,
        on eventLoop: EventLoop? = nil
    ) -> AWSClient.PaginatorSequence<ListMetricSetsRequest, ListMetricSetsResponse> {
        return .init(
            input: input,
            command: listMetricSets,
            inputKey: \ListMetricSetsRequest.nextToken,
            outputKey: \ListMetricSetsResponse.nextToken,
            logger: logger,
            on: eventLoop
        )
    }
}

#endif // compiler(>=5.5)
