//===----------------------------------------------------------------------===//
//
// This source file is part of the Soto for AWS open source project
//
// Copyright (c) 2017-2024 the Soto project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
// See CONTRIBUTORS.txt for the list of Soto project authors
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by https://github.com/soto-project/soto-codegenerator.
// DO NOT EDIT.

#if canImport(FoundationEssentials)
import FoundationEssentials
#else
import Foundation
#endif
@_exported import SotoCore

/// Service object for interacting with AWS AppStream service.
///
/// Amazon AppStream 2.0 This is the Amazon AppStream 2.0 API Reference. This documentation provides descriptions and syntax for each of the actions and data types in AppStream 2.0. AppStream 2.0 is a fully managed, secure application streaming service that lets you stream desktop applications to users without rewriting applications. AppStream 2.0 manages the AWS resources that are required to host and run your applications, scales automatically, and provides access to your users on demand.   You can call the AppStream 2.0 API operations by using an interface VPC endpoint (interface endpoint). For more information, see Access AppStream 2.0 API Operations and CLI Commands Through an Interface VPC Endpoint in the Amazon AppStream 2.0 Administration Guide.  To learn more about AppStream 2.0, see the following resources:    Amazon AppStream 2.0 product page     Amazon AppStream 2.0 documentation
public struct AppStream: AWSService {
    // MARK: Member variables

    /// Client used for communication with AWS
    public let client: AWSClient
    /// Service configuration
    public let config: AWSServiceConfig

    // MARK: Initialization

    /// Initialize the AppStream client
    /// - parameters:
    ///     - client: AWSClient used to process requests
    ///     - region: Region of server you want to communicate with. This will override the partition parameter.
    ///     - partition: AWS partition where service resides, standard (.aws), china (.awscn), government (.awsusgov).
    ///     - endpoint: Custom endpoint URL to use instead of standard AWS servers
    ///     - middleware: Middleware chain used to edit requests before they are sent and responses before they are decoded 
    ///     - timeout: Timeout value for HTTP requests
    ///     - byteBufferAllocator: Allocator for ByteBuffers
    ///     - options: Service options
    public init(
        client: AWSClient,
        region: SotoCore.Region? = nil,
        partition: AWSPartition = .aws,
        endpoint: String? = nil,
        middleware: AWSMiddlewareProtocol? = nil,
        timeout: TimeAmount? = nil,
        byteBufferAllocator: ByteBufferAllocator = ByteBufferAllocator(),
        options: AWSServiceConfig.Options = []
    ) {
        self.client = client
        self.config = AWSServiceConfig(
            region: region,
            partition: region?.partition ?? partition,
            amzTarget: "PhotonAdminProxyService",
            serviceName: "AppStream",
            serviceIdentifier: "appstream2",
            signingName: "appstream",
            serviceProtocol: .json(version: "1.1"),
            apiVersion: "2016-12-01",
            endpoint: endpoint,
            variantEndpoints: Self.variantEndpoints,
            errorType: AppStreamErrorType.self,
            middleware: middleware,
            timeout: timeout,
            byteBufferAllocator: byteBufferAllocator,
            options: options
        )
    }




    /// FIPS and dualstack endpoints
    static var variantEndpoints: [EndpointVariantType: AWSServiceConfig.EndpointVariant] {[
        [.fips]: .init(endpoints: [
            "us-east-1": "appstream2-fips.us-east-1.amazonaws.com",
            "us-gov-east-1": "appstream2-fips.us-gov-east-1.amazonaws.com",
            "us-gov-west-1": "appstream2-fips.us-gov-west-1.amazonaws.com",
            "us-west-2": "appstream2-fips.us-west-2.amazonaws.com"
        ])
    ]}

    // MARK: API Calls

    /// Associates the specified app block builder with the specified app block.
    @Sendable
    @inlinable
    public func associateAppBlockBuilderAppBlock(_ input: AssociateAppBlockBuilderAppBlockRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> AssociateAppBlockBuilderAppBlockResult {
        try await self.client.execute(
            operation: "AssociateAppBlockBuilderAppBlock", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Associates the specified app block builder with the specified app block.
    ///
    /// Parameters:
    ///   - appBlockArn: The ARN of the app block.
    ///   - appBlockBuilderName: The name of the app block builder.
    ///   - logger: Logger use during operation
    @inlinable
    public func associateAppBlockBuilderAppBlock(
        appBlockArn: String? = nil,
        appBlockBuilderName: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> AssociateAppBlockBuilderAppBlockResult {
        let input = AssociateAppBlockBuilderAppBlockRequest(
            appBlockArn: appBlockArn, 
            appBlockBuilderName: appBlockBuilderName
        )
        return try await self.associateAppBlockBuilderAppBlock(input, logger: logger)
    }

    /// Associates the specified application with the specified fleet. This is only supported for Elastic fleets.
    @Sendable
    @inlinable
    public func associateApplicationFleet(_ input: AssociateApplicationFleetRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> AssociateApplicationFleetResult {
        try await self.client.execute(
            operation: "AssociateApplicationFleet", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Associates the specified application with the specified fleet. This is only supported for Elastic fleets.
    ///
    /// Parameters:
    ///   - applicationArn: The ARN of the application.
    ///   - fleetName: The name of the fleet.
    ///   - logger: Logger use during operation
    @inlinable
    public func associateApplicationFleet(
        applicationArn: String? = nil,
        fleetName: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> AssociateApplicationFleetResult {
        let input = AssociateApplicationFleetRequest(
            applicationArn: applicationArn, 
            fleetName: fleetName
        )
        return try await self.associateApplicationFleet(input, logger: logger)
    }

    /// Associates an application to entitle.
    @Sendable
    @inlinable
    public func associateApplicationToEntitlement(_ input: AssociateApplicationToEntitlementRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> AssociateApplicationToEntitlementResult {
        try await self.client.execute(
            operation: "AssociateApplicationToEntitlement", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Associates an application to entitle.
    ///
    /// Parameters:
    ///   - applicationIdentifier: The identifier of the application.
    ///   - entitlementName: The name of the entitlement.
    ///   - stackName: The name of the stack.
    ///   - logger: Logger use during operation
    @inlinable
    public func associateApplicationToEntitlement(
        applicationIdentifier: String? = nil,
        entitlementName: String? = nil,
        stackName: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> AssociateApplicationToEntitlementResult {
        let input = AssociateApplicationToEntitlementRequest(
            applicationIdentifier: applicationIdentifier, 
            entitlementName: entitlementName, 
            stackName: stackName
        )
        return try await self.associateApplicationToEntitlement(input, logger: logger)
    }

    /// Associates the specified fleet with the specified stack.
    @Sendable
    @inlinable
    public func associateFleet(_ input: AssociateFleetRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> AssociateFleetResult {
        try await self.client.execute(
            operation: "AssociateFleet", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Associates the specified fleet with the specified stack.
    ///
    /// Parameters:
    ///   - fleetName: The name of the fleet.
    ///   - stackName: The name of the stack.
    ///   - logger: Logger use during operation
    @inlinable
    public func associateFleet(
        fleetName: String? = nil,
        stackName: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> AssociateFleetResult {
        let input = AssociateFleetRequest(
            fleetName: fleetName, 
            stackName: stackName
        )
        return try await self.associateFleet(input, logger: logger)
    }

    /// Associates the specified users with the specified stacks. Users in a user pool cannot be assigned to stacks with fleets that are joined to an Active Directory domain.
    @Sendable
    @inlinable
    public func batchAssociateUserStack(_ input: BatchAssociateUserStackRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> BatchAssociateUserStackResult {
        try await self.client.execute(
            operation: "BatchAssociateUserStack", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Associates the specified users with the specified stacks. Users in a user pool cannot be assigned to stacks with fleets that are joined to an Active Directory domain.
    ///
    /// Parameters:
    ///   - userStackAssociations: The list of UserStackAssociation objects.
    ///   - logger: Logger use during operation
    @inlinable
    public func batchAssociateUserStack(
        userStackAssociations: [UserStackAssociation]? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> BatchAssociateUserStackResult {
        let input = BatchAssociateUserStackRequest(
            userStackAssociations: userStackAssociations
        )
        return try await self.batchAssociateUserStack(input, logger: logger)
    }

    /// Disassociates the specified users from the specified stacks.
    @Sendable
    @inlinable
    public func batchDisassociateUserStack(_ input: BatchDisassociateUserStackRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> BatchDisassociateUserStackResult {
        try await self.client.execute(
            operation: "BatchDisassociateUserStack", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Disassociates the specified users from the specified stacks.
    ///
    /// Parameters:
    ///   - userStackAssociations: The list of UserStackAssociation objects.
    ///   - logger: Logger use during operation
    @inlinable
    public func batchDisassociateUserStack(
        userStackAssociations: [UserStackAssociation]? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> BatchDisassociateUserStackResult {
        let input = BatchDisassociateUserStackRequest(
            userStackAssociations: userStackAssociations
        )
        return try await self.batchDisassociateUserStack(input, logger: logger)
    }

    /// Copies the image within the same region or to a new region within the same AWS account. Note that any tags you added to the image will not be copied.
    @Sendable
    @inlinable
    public func copyImage(_ input: CopyImageRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> CopyImageResponse {
        try await self.client.execute(
            operation: "CopyImage", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Copies the image within the same region or to a new region within the same AWS account. Note that any tags you added to the image will not be copied.
    ///
    /// Parameters:
    ///   - destinationImageDescription: The description that the image will have when it is copied to the destination.
    ///   - destinationImageName: The name that the image will have when it is copied to the destination.
    ///   - destinationRegion: The destination region to which the image will be copied. This parameter is required, even if you are copying an image within the same region.
    ///   - sourceImageName: The name of the image to copy.
    ///   - logger: Logger use during operation
    @inlinable
    public func copyImage(
        destinationImageDescription: String? = nil,
        destinationImageName: String? = nil,
        destinationRegion: String? = nil,
        sourceImageName: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> CopyImageResponse {
        let input = CopyImageRequest(
            destinationImageDescription: destinationImageDescription, 
            destinationImageName: destinationImageName, 
            destinationRegion: destinationRegion, 
            sourceImageName: sourceImageName
        )
        return try await self.copyImage(input, logger: logger)
    }

    /// Creates an app block. App blocks are an Amazon AppStream 2.0 resource that stores the details about the virtual hard disk in an S3 bucket. It also stores the setup script with details about how to mount the virtual hard disk. The virtual hard disk includes the application binaries and other files necessary to launch your applications. Multiple applications can be assigned to a single app block. This is only supported for Elastic fleets.
    @Sendable
    @inlinable
    public func createAppBlock(_ input: CreateAppBlockRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> CreateAppBlockResult {
        try await self.client.execute(
            operation: "CreateAppBlock", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Creates an app block. App blocks are an Amazon AppStream 2.0 resource that stores the details about the virtual hard disk in an S3 bucket. It also stores the setup script with details about how to mount the virtual hard disk. The virtual hard disk includes the application binaries and other files necessary to launch your applications. Multiple applications can be assigned to a single app block. This is only supported for Elastic fleets.
    ///
    /// Parameters:
    ///   - description: The description of the app block.
    ///   - displayName: The display name of the app block. This is not displayed to the user.
    ///   - name: The name of the app block.
    ///   - packagingType: The packaging type of the app block.
    ///   - postSetupScriptDetails: The post setup script details of the app block. This can only be provided for the APPSTREAM2 PackagingType.
    ///   - setupScriptDetails: The setup script details of the app block. This must be provided for the CUSTOM PackagingType.
    ///   - sourceS3Location: The source S3 location of the app block.
    ///   - tags: The tags assigned to the app block.
    ///   - logger: Logger use during operation
    @inlinable
    public func createAppBlock(
        description: String? = nil,
        displayName: String? = nil,
        name: String? = nil,
        packagingType: PackagingType? = nil,
        postSetupScriptDetails: ScriptDetails? = nil,
        setupScriptDetails: ScriptDetails? = nil,
        sourceS3Location: S3Location? = nil,
        tags: [String: String]? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> CreateAppBlockResult {
        let input = CreateAppBlockRequest(
            description: description, 
            displayName: displayName, 
            name: name, 
            packagingType: packagingType, 
            postSetupScriptDetails: postSetupScriptDetails, 
            setupScriptDetails: setupScriptDetails, 
            sourceS3Location: sourceS3Location, 
            tags: tags
        )
        return try await self.createAppBlock(input, logger: logger)
    }

    /// Creates an app block builder.
    @Sendable
    @inlinable
    public func createAppBlockBuilder(_ input: CreateAppBlockBuilderRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> CreateAppBlockBuilderResult {
        try await self.client.execute(
            operation: "CreateAppBlockBuilder", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Creates an app block builder.
    ///
    /// Parameters:
    ///   - accessEndpoints: The list of interface VPC endpoint (interface endpoint) objects. Administrators can connect to the app block builder only through the specified endpoints.
    ///   - description: The description of the app block builder.
    ///   - displayName: The display name of the app block builder.
    ///   - enableDefaultInternetAccess: Enables or disables default internet access for the app block builder.
    ///   - iamRoleArn: The Amazon Resource Name (ARN) of the IAM role to apply to the app block builder. To assume a role, the app block builder calls the AWS Security Token Service (STS) AssumeRole API operation and passes the ARN of the role to use. The operation creates a new session with temporary credentials. AppStream 2.0 retrieves the temporary credentials and creates the appstream_machine_role credential profile on the instance. For more information, see Using an IAM Role to Grant Permissions to Applications and Scripts Running on AppStream 2.0 Streaming Instances in the Amazon AppStream 2.0 Administration Guide.
    ///   - instanceType: The instance type to use when launching the app block builder. The following instance types are available:   stream.standard.small   stream.standard.medium   stream.standard.large   stream.standard.xlarge   stream.standard.2xlarge
    ///   - name: The unique name for the app block builder.
    ///   - platform: The platform of the app block builder.  WINDOWS_SERVER_2019 is the only valid value.
    ///   - tags: The tags to associate with the app block builder. A tag is a key-value pair, and the value is optional. For example, Environment=Test. If you do not specify a value, Environment=.  If you do not specify a value, the value is set to an empty string. Generally allowed characters are: letters, numbers, and spaces representable in UTF-8, and the following special characters:  _ . : / = + \ - @ For more information, see Tagging Your Resources in the Amazon AppStream 2.0 Administration Guide.
    ///   - vpcConfig: The VPC configuration for the app block builder. App block builders require that you specify at least two subnets in different availability zones.
    ///   - logger: Logger use during operation
    @inlinable
    public func createAppBlockBuilder(
        accessEndpoints: [AccessEndpoint]? = nil,
        description: String? = nil,
        displayName: String? = nil,
        enableDefaultInternetAccess: Bool? = nil,
        iamRoleArn: String? = nil,
        instanceType: String? = nil,
        name: String? = nil,
        platform: AppBlockBuilderPlatformType? = nil,
        tags: [String: String]? = nil,
        vpcConfig: VpcConfig? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> CreateAppBlockBuilderResult {
        let input = CreateAppBlockBuilderRequest(
            accessEndpoints: accessEndpoints, 
            description: description, 
            displayName: displayName, 
            enableDefaultInternetAccess: enableDefaultInternetAccess, 
            iamRoleArn: iamRoleArn, 
            instanceType: instanceType, 
            name: name, 
            platform: platform, 
            tags: tags, 
            vpcConfig: vpcConfig
        )
        return try await self.createAppBlockBuilder(input, logger: logger)
    }

    /// Creates a URL to start a create app block builder streaming session.
    @Sendable
    @inlinable
    public func createAppBlockBuilderStreamingURL(_ input: CreateAppBlockBuilderStreamingURLRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> CreateAppBlockBuilderStreamingURLResult {
        try await self.client.execute(
            operation: "CreateAppBlockBuilderStreamingURL", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Creates a URL to start a create app block builder streaming session.
    ///
    /// Parameters:
    ///   - appBlockBuilderName: The name of the app block builder.
    ///   - validity: The time that the streaming URL will be valid, in seconds.  Specify a value between 1 and 604800 seconds. The default is 3600 seconds.
    ///   - logger: Logger use during operation
    @inlinable
    public func createAppBlockBuilderStreamingURL(
        appBlockBuilderName: String? = nil,
        validity: Int64? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> CreateAppBlockBuilderStreamingURLResult {
        let input = CreateAppBlockBuilderStreamingURLRequest(
            appBlockBuilderName: appBlockBuilderName, 
            validity: validity
        )
        return try await self.createAppBlockBuilderStreamingURL(input, logger: logger)
    }

    /// Creates an application. Applications are an Amazon AppStream 2.0 resource that stores the details about how to launch applications on Elastic fleet streaming instances. An application consists of the launch details, icon, and display name. Applications are associated with an app block that contains the application binaries and other files. The applications assigned to an Elastic fleet are the applications users can launch.  This is only supported for Elastic fleets.
    @Sendable
    @inlinable
    public func createApplication(_ input: CreateApplicationRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> CreateApplicationResult {
        try await self.client.execute(
            operation: "CreateApplication", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Creates an application. Applications are an Amazon AppStream 2.0 resource that stores the details about how to launch applications on Elastic fleet streaming instances. An application consists of the launch details, icon, and display name. Applications are associated with an app block that contains the application binaries and other files. The applications assigned to an Elastic fleet are the applications users can launch.  This is only supported for Elastic fleets.
    ///
    /// Parameters:
    ///   - appBlockArn: The app block ARN to which the application should be associated
    ///   - description: The description of the application.
    ///   - displayName: The display name of the application. This name is visible to users in the application catalog.
    ///   - iconS3Location: The location in S3 of the application icon.
    ///   - instanceFamilies: The instance families the application supports. Valid values are GENERAL_PURPOSE and GRAPHICS_G4.
    ///   - launchParameters: The launch parameters of the application.
    ///   - launchPath: The launch path of the application.
    ///   - name: The name of the application. This name is visible to users when display name is not specified.
    ///   - platforms: The platforms the application supports. WINDOWS_SERVER_2019 and AMAZON_LINUX2 are supported for Elastic fleets.
    ///   - tags: The tags assigned to the application.
    ///   - workingDirectory: The working directory of the application.
    ///   - logger: Logger use during operation
    @inlinable
    public func createApplication(
        appBlockArn: String? = nil,
        description: String? = nil,
        displayName: String? = nil,
        iconS3Location: S3Location? = nil,
        instanceFamilies: [String]? = nil,
        launchParameters: String? = nil,
        launchPath: String? = nil,
        name: String? = nil,
        platforms: [PlatformType]? = nil,
        tags: [String: String]? = nil,
        workingDirectory: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> CreateApplicationResult {
        let input = CreateApplicationRequest(
            appBlockArn: appBlockArn, 
            description: description, 
            displayName: displayName, 
            iconS3Location: iconS3Location, 
            instanceFamilies: instanceFamilies, 
            launchParameters: launchParameters, 
            launchPath: launchPath, 
            name: name, 
            platforms: platforms, 
            tags: tags, 
            workingDirectory: workingDirectory
        )
        return try await self.createApplication(input, logger: logger)
    }

    /// Creates a Directory Config object in AppStream 2.0. This object includes the configuration information required to join fleets and image builders to Microsoft Active Directory domains.
    @Sendable
    @inlinable
    public func createDirectoryConfig(_ input: CreateDirectoryConfigRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> CreateDirectoryConfigResult {
        try await self.client.execute(
            operation: "CreateDirectoryConfig", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Creates a Directory Config object in AppStream 2.0. This object includes the configuration information required to join fleets and image builders to Microsoft Active Directory domains.
    ///
    /// Parameters:
    ///   - certificateBasedAuthProperties: The certificate-based authentication properties used to authenticate SAML 2.0 Identity Provider (IdP) user identities to Active Directory domain-joined streaming instances. Fallback is turned on by default when certificate-based authentication is Enabled . Fallback allows users to log in using their AD domain password if certificate-based authentication is unsuccessful, or to unlock a desktop lock screen. Enabled_no_directory_login_fallback enables certificate-based authentication, but does not allow users to log in using their AD domain password. Users will be disconnected to re-authenticate using certificates.
    ///   - directoryName: The fully qualified name of the directory (for example, corp.example.com).
    ///   - organizationalUnitDistinguishedNames: The distinguished names of the organizational units for computer accounts.
    ///   - serviceAccountCredentials: The credentials for the service account used by the fleet or image builder to connect to the directory.
    ///   - logger: Logger use during operation
    @inlinable
    public func createDirectoryConfig(
        certificateBasedAuthProperties: CertificateBasedAuthProperties? = nil,
        directoryName: String? = nil,
        organizationalUnitDistinguishedNames: [String]? = nil,
        serviceAccountCredentials: ServiceAccountCredentials? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> CreateDirectoryConfigResult {
        let input = CreateDirectoryConfigRequest(
            certificateBasedAuthProperties: certificateBasedAuthProperties, 
            directoryName: directoryName, 
            organizationalUnitDistinguishedNames: organizationalUnitDistinguishedNames, 
            serviceAccountCredentials: serviceAccountCredentials
        )
        return try await self.createDirectoryConfig(input, logger: logger)
    }

    /// Creates a new entitlement. Entitlements control access to specific applications within a stack, based on user attributes. Entitlements apply to SAML 2.0 federated user identities. Amazon AppStream 2.0 user pool and streaming URL users are entitled to all applications in a stack. Entitlements don't apply to the desktop stream view application, or to applications managed by a dynamic app provider using the Dynamic Application Framework.
    @Sendable
    @inlinable
    public func createEntitlement(_ input: CreateEntitlementRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> CreateEntitlementResult {
        try await self.client.execute(
            operation: "CreateEntitlement", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Creates a new entitlement. Entitlements control access to specific applications within a stack, based on user attributes. Entitlements apply to SAML 2.0 federated user identities. Amazon AppStream 2.0 user pool and streaming URL users are entitled to all applications in a stack. Entitlements don't apply to the desktop stream view application, or to applications managed by a dynamic app provider using the Dynamic Application Framework.
    ///
    /// Parameters:
    ///   - appVisibility: Specifies whether all or selected apps are entitled.
    ///   - attributes: The attributes of the entitlement.
    ///   - description: The description of the entitlement.
    ///   - name: The name of the entitlement.
    ///   - stackName: The name of the stack with which the entitlement is associated.
    ///   - logger: Logger use during operation
    @inlinable
    public func createEntitlement(
        appVisibility: AppVisibility? = nil,
        attributes: [EntitlementAttribute]? = nil,
        description: String? = nil,
        name: String? = nil,
        stackName: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> CreateEntitlementResult {
        let input = CreateEntitlementRequest(
            appVisibility: appVisibility, 
            attributes: attributes, 
            description: description, 
            name: name, 
            stackName: stackName
        )
        return try await self.createEntitlement(input, logger: logger)
    }

    /// Creates a fleet. A fleet consists of streaming instances that your users access for their applications and desktops.
    @Sendable
    @inlinable
    public func createFleet(_ input: CreateFleetRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> CreateFleetResult {
        try await self.client.execute(
            operation: "CreateFleet", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Creates a fleet. A fleet consists of streaming instances that your users access for their applications and desktops.
    ///
    /// Parameters:
    ///   - computeCapacity: The desired capacity for the fleet. This is not allowed for Elastic fleets. For Elastic fleets, specify MaxConcurrentSessions instead.
    ///   - description: The description to display.
    ///   - disconnectTimeoutInSeconds: The amount of time that a streaming session remains active after users disconnect. If users try to reconnect to the streaming session after a disconnection or network interruption within this time interval, they are connected to their previous session. Otherwise, they are connected to a new session with a new streaming instance.  Specify a value between 60 and 36000.
    ///   - displayName: The fleet name to display.
    ///   - domainJoinInfo: The name of the directory and organizational unit (OU) to use to join the fleet to a Microsoft Active Directory domain. This is not allowed for Elastic fleets.
    ///   - enableDefaultInternetAccess: Enables or disables default internet access for the fleet.
    ///   - fleetType: The fleet type.  ALWAYS_ON  Provides users with instant-on access to their apps. You are charged for all running instances in your fleet, even if no users are streaming apps.  ON_DEMAND  Provide users with access to applications after they connect, which takes one to two minutes. You are charged for instance streaming when users are connected and a small hourly fee for instances that are not streaming apps.
    ///   - iamRoleArn: The Amazon Resource Name (ARN) of the IAM role to apply to the fleet. To assume a role, a fleet instance calls the AWS Security Token Service (STS) AssumeRole API operation and passes the ARN of the role to use. The operation creates a new session with temporary credentials. AppStream 2.0 retrieves the temporary credentials and creates the appstream_machine_role credential profile on the instance. For more information, see Using an IAM Role to Grant Permissions to Applications and Scripts Running on AppStream 2.0 Streaming Instances in the Amazon AppStream 2.0 Administration Guide.
    ///   - idleDisconnectTimeoutInSeconds: The amount of time that users can be idle (inactive) before they are disconnected from their streaming session and the DisconnectTimeoutInSeconds time interval begins. Users are notified before they are disconnected due to inactivity. If they try to reconnect to the streaming session before the time interval specified in DisconnectTimeoutInSeconds elapses, they are connected to their previous session. Users are considered idle when they stop providing keyboard or mouse input during their streaming session. File uploads and downloads, audio in, audio out, and pixels changing do not qualify as user activity. If users continue to be idle after the time interval in IdleDisconnectTimeoutInSeconds elapses, they are disconnected. To prevent users from being disconnected due to inactivity, specify a value of 0. Otherwise, specify a value between 60 and 36000. The default value is 0.  If you enable this feature, we recommend that you specify a value that corresponds exactly to a whole number of minutes (for example, 60, 120, and 180). If you don't do this, the value is rounded to the nearest minute. For example, if you specify a value of 70, users are disconnected after 1 minute of inactivity. If you specify a value that is at the midpoint between two different minutes, the value is rounded up. For example, if you specify a value of 90, users are disconnected after 2 minutes of inactivity.
    ///   - imageArn: The ARN of the public, private, or shared image to use.
    ///   - imageName: The name of the image used to create the fleet.
    ///   - instanceType: The instance type to use when launching fleet instances. The following instance types are available:   stream.standard.small   stream.standard.medium   stream.standard.large   stream.standard.xlarge   stream.standard.2xlarge   stream.compute.large   stream.compute.xlarge   stream.compute.2xlarge   stream.compute.4xlarge   stream.compute.8xlarge   stream.memory.large   stream.memory.xlarge   stream.memory.2xlarge   stream.memory.4xlarge   stream.memory.8xlarge   stream.memory.z1d.large   stream.memory.z1d.xlarge   stream.memory.z1d.2xlarge   stream.memory.z1d.3xlarge   stream.memory.z1d.6xlarge   stream.memory.z1d.12xlarge   stream.graphics-design.large   stream.graphics-design.xlarge   stream.graphics-design.2xlarge   stream.graphics-design.4xlarge   stream.graphics-desktop.2xlarge   stream.graphics.g4dn.xlarge   stream.graphics.g4dn.2xlarge   stream.graphics.g4dn.4xlarge   stream.graphics.g4dn.8xlarge   stream.graphics.g4dn.12xlarge   stream.graphics.g4dn.16xlarge   stream.graphics.g5.xlarge   stream.graphics.g5.2xlarge   stream.graphics.g5.4xlarge   stream.graphics.g5.8xlarge   stream.graphics.g5.12xlarge   stream.graphics.g5.16xlarge   stream.graphics.g5.24xlarge   stream.graphics-pro.4xlarge   stream.graphics-pro.8xlarge   stream.graphics-pro.16xlarge   The following instance types are available for Elastic fleets:   stream.standard.small   stream.standard.medium   stream.standard.large   stream.standard.xlarge   stream.standard.2xlarge
    ///   - maxConcurrentSessions: The maximum concurrent sessions of the Elastic fleet. This is required for Elastic fleets, and not allowed for other fleet types.
    ///   - maxSessionsPerInstance: The maximum number of user sessions on an instance. This only applies to multi-session fleets.
    ///   - maxUserDurationInSeconds: The maximum amount of time that a streaming session can remain active, in seconds. If users are still connected to a streaming instance five minutes before this limit is reached, they are prompted to save any open documents before being disconnected. After this time elapses, the instance is terminated and replaced by a new instance. Specify a value between 600 and 432000.
    ///   - name: A unique name for the fleet.
    ///   - platform: The fleet platform. WINDOWS_SERVER_2019 and AMAZON_LINUX2 are supported for Elastic fleets.
    ///   - sessionScriptS3Location: The S3 location of the session scripts configuration zip file. This only applies to Elastic fleets.
    ///   - streamView: The AppStream 2.0 view that is displayed to your users when they stream from the fleet. When APP is specified, only the windows of applications opened by users display. When DESKTOP is specified, the standard desktop that is provided by the operating system displays. The default value is APP.
    ///   - tags: The tags to associate with the fleet. A tag is a key-value pair, and the value is optional. For example, Environment=Test. If you do not specify a value, Environment=.  If you do not specify a value, the value is set to an empty string. Generally allowed characters are: letters, numbers, and spaces representable in UTF-8, and the following special characters:  _ . : / = + \ - @ For more information, see Tagging Your Resources in the Amazon AppStream 2.0 Administration Guide.
    ///   - usbDeviceFilterStrings: The USB device filter strings that specify which USB devices a user can redirect to the fleet streaming session, when using the Windows native client. This is allowed but not required for Elastic fleets.
    ///   - vpcConfig: The VPC configuration for the fleet. This is required for Elastic fleets, but not required for other fleet types. Elastic fleets require that you specify at least two subnets in different availability zones.
    ///   - logger: Logger use during operation
    @inlinable
    public func createFleet(
        computeCapacity: ComputeCapacity? = nil,
        description: String? = nil,
        disconnectTimeoutInSeconds: Int? = nil,
        displayName: String? = nil,
        domainJoinInfo: DomainJoinInfo? = nil,
        enableDefaultInternetAccess: Bool? = nil,
        fleetType: FleetType? = nil,
        iamRoleArn: String? = nil,
        idleDisconnectTimeoutInSeconds: Int? = nil,
        imageArn: String? = nil,
        imageName: String? = nil,
        instanceType: String? = nil,
        maxConcurrentSessions: Int? = nil,
        maxSessionsPerInstance: Int? = nil,
        maxUserDurationInSeconds: Int? = nil,
        name: String? = nil,
        platform: PlatformType? = nil,
        sessionScriptS3Location: S3Location? = nil,
        streamView: StreamView? = nil,
        tags: [String: String]? = nil,
        usbDeviceFilterStrings: [String]? = nil,
        vpcConfig: VpcConfig? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> CreateFleetResult {
        let input = CreateFleetRequest(
            computeCapacity: computeCapacity, 
            description: description, 
            disconnectTimeoutInSeconds: disconnectTimeoutInSeconds, 
            displayName: displayName, 
            domainJoinInfo: domainJoinInfo, 
            enableDefaultInternetAccess: enableDefaultInternetAccess, 
            fleetType: fleetType, 
            iamRoleArn: iamRoleArn, 
            idleDisconnectTimeoutInSeconds: idleDisconnectTimeoutInSeconds, 
            imageArn: imageArn, 
            imageName: imageName, 
            instanceType: instanceType, 
            maxConcurrentSessions: maxConcurrentSessions, 
            maxSessionsPerInstance: maxSessionsPerInstance, 
            maxUserDurationInSeconds: maxUserDurationInSeconds, 
            name: name, 
            platform: platform, 
            sessionScriptS3Location: sessionScriptS3Location, 
            streamView: streamView, 
            tags: tags, 
            usbDeviceFilterStrings: usbDeviceFilterStrings, 
            vpcConfig: vpcConfig
        )
        return try await self.createFleet(input, logger: logger)
    }

    /// Creates an image builder. An image builder is a virtual machine that is used to create an image. The initial state of the builder is PENDING. When it is ready, the state is RUNNING.
    @Sendable
    @inlinable
    public func createImageBuilder(_ input: CreateImageBuilderRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> CreateImageBuilderResult {
        try await self.client.execute(
            operation: "CreateImageBuilder", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Creates an image builder. An image builder is a virtual machine that is used to create an image. The initial state of the builder is PENDING. When it is ready, the state is RUNNING.
    ///
    /// Parameters:
    ///   - accessEndpoints: The list of interface VPC endpoint (interface endpoint) objects. Administrators can connect to the image builder only through the specified endpoints.
    ///   - appstreamAgentVersion: The version of the AppStream 2.0 agent to use for this image builder. To use the latest version of the AppStream 2.0 agent, specify [LATEST].
    ///   - description: The description to display.
    ///   - displayName: The image builder name to display.
    ///   - domainJoinInfo: The name of the directory and organizational unit (OU) to use to join the image builder to a Microsoft Active Directory domain.
    ///   - enableDefaultInternetAccess: Enables or disables default internet access for the image builder.
    ///   - iamRoleArn: The Amazon Resource Name (ARN) of the IAM role to apply to the image builder. To assume a role, the image builder calls the AWS Security Token Service (STS) AssumeRole API operation and passes the ARN of the role to use. The operation creates a new session with temporary credentials. AppStream 2.0 retrieves the temporary credentials and creates the appstream_machine_role credential profile on the instance. For more information, see Using an IAM Role to Grant Permissions to Applications and Scripts Running on AppStream 2.0 Streaming Instances in the Amazon AppStream 2.0 Administration Guide.
    ///   - imageArn: The ARN of the public, private, or shared image to use.
    ///   - imageName: The name of the image used to create the image builder.
    ///   - instanceType: The instance type to use when launching the image builder. The following instance types are available:   stream.standard.small   stream.standard.medium   stream.standard.large   stream.compute.large   stream.compute.xlarge   stream.compute.2xlarge   stream.compute.4xlarge   stream.compute.8xlarge   stream.memory.large   stream.memory.xlarge   stream.memory.2xlarge   stream.memory.4xlarge   stream.memory.8xlarge   stream.memory.z1d.large   stream.memory.z1d.xlarge   stream.memory.z1d.2xlarge   stream.memory.z1d.3xlarge   stream.memory.z1d.6xlarge   stream.memory.z1d.12xlarge   stream.graphics-design.large   stream.graphics-design.xlarge   stream.graphics-design.2xlarge   stream.graphics-design.4xlarge   stream.graphics-desktop.2xlarge   stream.graphics.g4dn.xlarge   stream.graphics.g4dn.2xlarge   stream.graphics.g4dn.4xlarge   stream.graphics.g4dn.8xlarge   stream.graphics.g4dn.12xlarge   stream.graphics.g4dn.16xlarge   stream.graphics-pro.4xlarge   stream.graphics-pro.8xlarge   stream.graphics-pro.16xlarge
    ///   - name: A unique name for the image builder.
    ///   - tags: The tags to associate with the image builder. A tag is a key-value pair, and the value is optional. For example, Environment=Test. If you do not specify a value, Environment=.  Generally allowed characters are: letters, numbers, and spaces representable in UTF-8, and the following special characters:  _ . : / = + \ - @ If you do not specify a value, the value is set to an empty string. For more information about tags, see Tagging Your Resources in the Amazon AppStream 2.0 Administration Guide.
    ///   - vpcConfig: The VPC configuration for the image builder. You can specify only one subnet.
    ///   - logger: Logger use during operation
    @inlinable
    public func createImageBuilder(
        accessEndpoints: [AccessEndpoint]? = nil,
        appstreamAgentVersion: String? = nil,
        description: String? = nil,
        displayName: String? = nil,
        domainJoinInfo: DomainJoinInfo? = nil,
        enableDefaultInternetAccess: Bool? = nil,
        iamRoleArn: String? = nil,
        imageArn: String? = nil,
        imageName: String? = nil,
        instanceType: String? = nil,
        name: String? = nil,
        tags: [String: String]? = nil,
        vpcConfig: VpcConfig? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> CreateImageBuilderResult {
        let input = CreateImageBuilderRequest(
            accessEndpoints: accessEndpoints, 
            appstreamAgentVersion: appstreamAgentVersion, 
            description: description, 
            displayName: displayName, 
            domainJoinInfo: domainJoinInfo, 
            enableDefaultInternetAccess: enableDefaultInternetAccess, 
            iamRoleArn: iamRoleArn, 
            imageArn: imageArn, 
            imageName: imageName, 
            instanceType: instanceType, 
            name: name, 
            tags: tags, 
            vpcConfig: vpcConfig
        )
        return try await self.createImageBuilder(input, logger: logger)
    }

    /// Creates a URL to start an image builder streaming session.
    @Sendable
    @inlinable
    public func createImageBuilderStreamingURL(_ input: CreateImageBuilderStreamingURLRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> CreateImageBuilderStreamingURLResult {
        try await self.client.execute(
            operation: "CreateImageBuilderStreamingURL", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Creates a URL to start an image builder streaming session.
    ///
    /// Parameters:
    ///   - name: The name of the image builder.
    ///   - validity: The time that the streaming URL will be valid, in seconds.  Specify a value between 1 and 604800 seconds. The default is 3600 seconds.
    ///   - logger: Logger use during operation
    @inlinable
    public func createImageBuilderStreamingURL(
        name: String? = nil,
        validity: Int64? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> CreateImageBuilderStreamingURLResult {
        let input = CreateImageBuilderStreamingURLRequest(
            name: name, 
            validity: validity
        )
        return try await self.createImageBuilderStreamingURL(input, logger: logger)
    }

    /// Creates a stack to start streaming applications to users. A stack consists of an associated fleet, user access policies, and storage configurations.
    @Sendable
    @inlinable
    public func createStack(_ input: CreateStackRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> CreateStackResult {
        try await self.client.execute(
            operation: "CreateStack", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Creates a stack to start streaming applications to users. A stack consists of an associated fleet, user access policies, and storage configurations.
    ///
    /// Parameters:
    ///   - accessEndpoints: The list of interface VPC endpoint (interface endpoint) objects. Users of the stack can connect to AppStream 2.0 only through the specified endpoints.
    ///   - applicationSettings: The persistent application settings for users of a stack. When these settings are enabled, changes that users make to applications and Windows settings are automatically saved after each session and applied to the next session.
    ///   - description: The description to display.
    ///   - displayName: The stack name to display.
    ///   - embedHostDomains: The domains where AppStream 2.0 streaming sessions can be embedded in an iframe. You must approve the domains that you want to host embedded AppStream 2.0 streaming sessions.
    ///   - feedbackURL: The URL that users are redirected to after they click the Send Feedback link. If no URL is specified, no Send Feedback link is displayed.
    ///   - name: The name of the stack.
    ///   - redirectURL: The URL that users are redirected to after their streaming session ends.
    ///   - storageConnectors: The storage connectors to enable.
    ///   - streamingExperienceSettings: The streaming protocol you want your stack to prefer. This can be UDP or TCP. Currently, UDP is only supported in the Windows native client.
    ///   - tags: The tags to associate with the stack. A tag is a key-value pair, and the value is optional. For example, Environment=Test. If you do not specify a value, Environment=.  If you do not specify a value, the value is set to an empty string. Generally allowed characters are: letters, numbers, and spaces representable in UTF-8, and the following special characters:  _ . : / = + \ - @ For more information about tags, see Tagging Your Resources in the Amazon AppStream 2.0 Administration Guide.
    ///   - userSettings: The actions that are enabled or disabled for users during their streaming sessions. By default, these actions are enabled.
    ///   - logger: Logger use during operation
    @inlinable
    public func createStack(
        accessEndpoints: [AccessEndpoint]? = nil,
        applicationSettings: ApplicationSettings? = nil,
        description: String? = nil,
        displayName: String? = nil,
        embedHostDomains: [String]? = nil,
        feedbackURL: String? = nil,
        name: String? = nil,
        redirectURL: String? = nil,
        storageConnectors: [StorageConnector]? = nil,
        streamingExperienceSettings: StreamingExperienceSettings? = nil,
        tags: [String: String]? = nil,
        userSettings: [UserSetting]? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> CreateStackResult {
        let input = CreateStackRequest(
            accessEndpoints: accessEndpoints, 
            applicationSettings: applicationSettings, 
            description: description, 
            displayName: displayName, 
            embedHostDomains: embedHostDomains, 
            feedbackURL: feedbackURL, 
            name: name, 
            redirectURL: redirectURL, 
            storageConnectors: storageConnectors, 
            streamingExperienceSettings: streamingExperienceSettings, 
            tags: tags, 
            userSettings: userSettings
        )
        return try await self.createStack(input, logger: logger)
    }

    /// Creates a temporary URL to start an AppStream 2.0 streaming session for the specified user. A streaming URL enables application streaming to be tested without user setup.
    @Sendable
    @inlinable
    public func createStreamingURL(_ input: CreateStreamingURLRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> CreateStreamingURLResult {
        try await self.client.execute(
            operation: "CreateStreamingURL", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Creates a temporary URL to start an AppStream 2.0 streaming session for the specified user. A streaming URL enables application streaming to be tested without user setup.
    ///
    /// Parameters:
    ///   - applicationId: The name of the application to launch after the session starts. This is the name that you specified as Name in the Image Assistant. If your fleet is enabled for the Desktop stream view, you can also choose to launch directly to the operating system desktop. To do so, specify Desktop.
    ///   - fleetName: The name of the fleet.
    ///   - sessionContext: The session context. For more information, see Session Context in the Amazon AppStream 2.0 Administration Guide.
    ///   - stackName: The name of the stack.
    ///   - userId: The identifier of the user.
    ///   - validity: The time that the streaming URL will be valid, in seconds. Specify a value between 1 and 604800 seconds. The default is 60 seconds.
    ///   - logger: Logger use during operation
    @inlinable
    public func createStreamingURL(
        applicationId: String? = nil,
        fleetName: String? = nil,
        sessionContext: String? = nil,
        stackName: String? = nil,
        userId: String? = nil,
        validity: Int64? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> CreateStreamingURLResult {
        let input = CreateStreamingURLRequest(
            applicationId: applicationId, 
            fleetName: fleetName, 
            sessionContext: sessionContext, 
            stackName: stackName, 
            userId: userId, 
            validity: validity
        )
        return try await self.createStreamingURL(input, logger: logger)
    }

    /// Creates custom branding that customizes the appearance of the streaming application catalog page.
    @Sendable
    @inlinable
    public func createThemeForStack(_ input: CreateThemeForStackRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> CreateThemeForStackResult {
        try await self.client.execute(
            operation: "CreateThemeForStack", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Creates custom branding that customizes the appearance of the streaming application catalog page.
    ///
    /// Parameters:
    ///   - faviconS3Location: The S3 location of the favicon. The favicon enables users to recognize their application streaming site in a browser full of tabs or bookmarks. It is displayed at the top of the browser tab for the application streaming site during users' streaming sessions.
    ///   - footerLinks: The links that are displayed in the footer of the streaming application catalog page. These links are helpful resources for users, such as the organization's IT support and product marketing sites.
    ///   - organizationLogoS3Location: The organization logo that appears on the streaming application catalog page.
    ///   - stackName: The name of the stack for the theme.
    ///   - themeStyling: The color theme that is applied to website links, text, and buttons. These colors are also applied as accents in the background for the streaming application catalog page.
    ///   - titleText: The title that is displayed at the top of the browser tab during users' application streaming sessions.
    ///   - logger: Logger use during operation
    @inlinable
    public func createThemeForStack(
        faviconS3Location: S3Location? = nil,
        footerLinks: [ThemeFooterLink]? = nil,
        organizationLogoS3Location: S3Location? = nil,
        stackName: String? = nil,
        themeStyling: ThemeStyling? = nil,
        titleText: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> CreateThemeForStackResult {
        let input = CreateThemeForStackRequest(
            faviconS3Location: faviconS3Location, 
            footerLinks: footerLinks, 
            organizationLogoS3Location: organizationLogoS3Location, 
            stackName: stackName, 
            themeStyling: themeStyling, 
            titleText: titleText
        )
        return try await self.createThemeForStack(input, logger: logger)
    }

    /// Creates a new image with the latest Windows operating system updates, driver updates, and AppStream 2.0 agent software. For more information, see the "Update an Image by Using Managed AppStream 2.0 Image Updates" section in Administer Your AppStream 2.0 Images, in the Amazon AppStream 2.0 Administration Guide.
    @Sendable
    @inlinable
    public func createUpdatedImage(_ input: CreateUpdatedImageRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> CreateUpdatedImageResult {
        try await self.client.execute(
            operation: "CreateUpdatedImage", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Creates a new image with the latest Windows operating system updates, driver updates, and AppStream 2.0 agent software. For more information, see the "Update an Image by Using Managed AppStream 2.0 Image Updates" section in Administer Your AppStream 2.0 Images, in the Amazon AppStream 2.0 Administration Guide.
    ///
    /// Parameters:
    ///   - dryRun: Indicates whether to display the status of image update availability before AppStream 2.0 initiates the process of creating a new updated image. If this value is set to true, AppStream 2.0 displays whether image updates are available. If this value is set to false, AppStream 2.0 initiates the process of creating a new updated image without displaying whether image updates are available.
    ///   - existingImageName: The name of the image to update.
    ///   - newImageDescription: The description to display for the new image.
    ///   - newImageDisplayName: The name to display for the new image.
    ///   - newImageName: The name of the new image. The name must be unique within the AWS account and Region.
    ///   - newImageTags: The tags to associate with the new image. A tag is a key-value pair, and the value is optional. For example, Environment=Test. If you do not specify a value, Environment=.  Generally allowed characters are: letters, numbers, and spaces representable in UTF-8, and the following special characters:  _ . : / = + \ - @ If you do not specify a value, the value is set to an empty string. For more information about tags, see Tagging Your Resources in the Amazon AppStream 2.0 Administration Guide.
    ///   - logger: Logger use during operation
    @inlinable
    public func createUpdatedImage(
        dryRun: Bool? = nil,
        existingImageName: String? = nil,
        newImageDescription: String? = nil,
        newImageDisplayName: String? = nil,
        newImageName: String? = nil,
        newImageTags: [String: String]? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> CreateUpdatedImageResult {
        let input = CreateUpdatedImageRequest(
            dryRun: dryRun, 
            existingImageName: existingImageName, 
            newImageDescription: newImageDescription, 
            newImageDisplayName: newImageDisplayName, 
            newImageName: newImageName, 
            newImageTags: newImageTags
        )
        return try await self.createUpdatedImage(input, logger: logger)
    }

    /// Creates a usage report subscription. Usage reports are generated daily.
    @Sendable
    @inlinable
    public func createUsageReportSubscription(_ input: CreateUsageReportSubscriptionRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> CreateUsageReportSubscriptionResult {
        try await self.client.execute(
            operation: "CreateUsageReportSubscription", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Creates a usage report subscription. Usage reports are generated daily.
    ///
    /// Parameters:
    ///   - logger: Logger use during operation
    @inlinable
    public func createUsageReportSubscription(
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> CreateUsageReportSubscriptionResult {
        let input = CreateUsageReportSubscriptionRequest(
        )
        return try await self.createUsageReportSubscription(input, logger: logger)
    }

    /// Creates a new user in the user pool.
    @Sendable
    @inlinable
    public func createUser(_ input: CreateUserRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> CreateUserResult {
        try await self.client.execute(
            operation: "CreateUser", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Creates a new user in the user pool.
    ///
    /// Parameters:
    ///   - authenticationType: The authentication type for the user. You must specify USERPOOL.
    ///   - firstName: The first name, or given name, of the user.
    ///   - lastName: The last name, or surname, of the user.
    ///   - messageAction: The action to take for the welcome email that is sent to a user after the user is created in the user pool. If you specify SUPPRESS, no email is sent. If you specify RESEND, do not specify the first name or last name of the user. If the value is null, the email is sent.   The temporary password in the welcome email is valid for only 7 days. If users don’t set their passwords within 7 days, you must send them a new welcome email.
    ///   - userName: The email address of the user.  Users' email addresses are case-sensitive. During login, if they specify an email address that doesn't use the same capitalization as the email address specified when their user pool account was created, a "user does not exist" error message displays.
    ///   - logger: Logger use during operation
    @inlinable
    public func createUser(
        authenticationType: AuthenticationType? = nil,
        firstName: String? = nil,
        lastName: String? = nil,
        messageAction: MessageAction? = nil,
        userName: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> CreateUserResult {
        let input = CreateUserRequest(
            authenticationType: authenticationType, 
            firstName: firstName, 
            lastName: lastName, 
            messageAction: messageAction, 
            userName: userName
        )
        return try await self.createUser(input, logger: logger)
    }

    /// Deletes an app block.
    @Sendable
    @inlinable
    public func deleteAppBlock(_ input: DeleteAppBlockRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DeleteAppBlockResult {
        try await self.client.execute(
            operation: "DeleteAppBlock", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Deletes an app block.
    ///
    /// Parameters:
    ///   - name: The name of the app block.
    ///   - logger: Logger use during operation
    @inlinable
    public func deleteAppBlock(
        name: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> DeleteAppBlockResult {
        let input = DeleteAppBlockRequest(
            name: name
        )
        return try await self.deleteAppBlock(input, logger: logger)
    }

    /// Deletes an app block builder. An app block builder can only be deleted when it has no association with an app block.
    @Sendable
    @inlinable
    public func deleteAppBlockBuilder(_ input: DeleteAppBlockBuilderRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DeleteAppBlockBuilderResult {
        try await self.client.execute(
            operation: "DeleteAppBlockBuilder", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Deletes an app block builder. An app block builder can only be deleted when it has no association with an app block.
    ///
    /// Parameters:
    ///   - name: The name of the app block builder.
    ///   - logger: Logger use during operation
    @inlinable
    public func deleteAppBlockBuilder(
        name: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> DeleteAppBlockBuilderResult {
        let input = DeleteAppBlockBuilderRequest(
            name: name
        )
        return try await self.deleteAppBlockBuilder(input, logger: logger)
    }

    /// Deletes an application.
    @Sendable
    @inlinable
    public func deleteApplication(_ input: DeleteApplicationRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DeleteApplicationResult {
        try await self.client.execute(
            operation: "DeleteApplication", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Deletes an application.
    ///
    /// Parameters:
    ///   - name: The name of the application.
    ///   - logger: Logger use during operation
    @inlinable
    public func deleteApplication(
        name: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> DeleteApplicationResult {
        let input = DeleteApplicationRequest(
            name: name
        )
        return try await self.deleteApplication(input, logger: logger)
    }

    /// Deletes the specified Directory Config object from AppStream 2.0. This object includes the information required to join streaming instances to an Active Directory domain.
    @Sendable
    @inlinable
    public func deleteDirectoryConfig(_ input: DeleteDirectoryConfigRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DeleteDirectoryConfigResult {
        try await self.client.execute(
            operation: "DeleteDirectoryConfig", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Deletes the specified Directory Config object from AppStream 2.0. This object includes the information required to join streaming instances to an Active Directory domain.
    ///
    /// Parameters:
    ///   - directoryName: The name of the directory configuration.
    ///   - logger: Logger use during operation
    @inlinable
    public func deleteDirectoryConfig(
        directoryName: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> DeleteDirectoryConfigResult {
        let input = DeleteDirectoryConfigRequest(
            directoryName: directoryName
        )
        return try await self.deleteDirectoryConfig(input, logger: logger)
    }

    /// Deletes the specified entitlement.
    @Sendable
    @inlinable
    public func deleteEntitlement(_ input: DeleteEntitlementRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DeleteEntitlementResult {
        try await self.client.execute(
            operation: "DeleteEntitlement", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Deletes the specified entitlement.
    ///
    /// Parameters:
    ///   - name: The name of the entitlement.
    ///   - stackName: The name of the stack with which the entitlement is associated.
    ///   - logger: Logger use during operation
    @inlinable
    public func deleteEntitlement(
        name: String? = nil,
        stackName: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> DeleteEntitlementResult {
        let input = DeleteEntitlementRequest(
            name: name, 
            stackName: stackName
        )
        return try await self.deleteEntitlement(input, logger: logger)
    }

    /// Deletes the specified fleet.
    @Sendable
    @inlinable
    public func deleteFleet(_ input: DeleteFleetRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DeleteFleetResult {
        try await self.client.execute(
            operation: "DeleteFleet", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Deletes the specified fleet.
    ///
    /// Parameters:
    ///   - name: The name of the fleet.
    ///   - logger: Logger use during operation
    @inlinable
    public func deleteFleet(
        name: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> DeleteFleetResult {
        let input = DeleteFleetRequest(
            name: name
        )
        return try await self.deleteFleet(input, logger: logger)
    }

    /// Deletes the specified image. You cannot delete an image when it is in use.   After you delete an image, you cannot provision new capacity using the image.
    @Sendable
    @inlinable
    public func deleteImage(_ input: DeleteImageRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DeleteImageResult {
        try await self.client.execute(
            operation: "DeleteImage", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Deletes the specified image. You cannot delete an image when it is in use.   After you delete an image, you cannot provision new capacity using the image.
    ///
    /// Parameters:
    ///   - name: The name of the image.
    ///   - logger: Logger use during operation
    @inlinable
    public func deleteImage(
        name: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> DeleteImageResult {
        let input = DeleteImageRequest(
            name: name
        )
        return try await self.deleteImage(input, logger: logger)
    }

    /// Deletes the specified image builder and releases the capacity.
    @Sendable
    @inlinable
    public func deleteImageBuilder(_ input: DeleteImageBuilderRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DeleteImageBuilderResult {
        try await self.client.execute(
            operation: "DeleteImageBuilder", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Deletes the specified image builder and releases the capacity.
    ///
    /// Parameters:
    ///   - name: The name of the image builder.
    ///   - logger: Logger use during operation
    @inlinable
    public func deleteImageBuilder(
        name: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> DeleteImageBuilderResult {
        let input = DeleteImageBuilderRequest(
            name: name
        )
        return try await self.deleteImageBuilder(input, logger: logger)
    }

    /// Deletes permissions for the specified private image. After you delete permissions for an image, AWS accounts to which you previously granted these permissions can no longer use the image.
    @Sendable
    @inlinable
    public func deleteImagePermissions(_ input: DeleteImagePermissionsRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DeleteImagePermissionsResult {
        try await self.client.execute(
            operation: "DeleteImagePermissions", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Deletes permissions for the specified private image. After you delete permissions for an image, AWS accounts to which you previously granted these permissions can no longer use the image.
    ///
    /// Parameters:
    ///   - name: The name of the private image.
    ///   - sharedAccountId: The 12-digit identifier of the AWS account for which to delete image permissions.
    ///   - logger: Logger use during operation
    @inlinable
    public func deleteImagePermissions(
        name: String? = nil,
        sharedAccountId: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> DeleteImagePermissionsResult {
        let input = DeleteImagePermissionsRequest(
            name: name, 
            sharedAccountId: sharedAccountId
        )
        return try await self.deleteImagePermissions(input, logger: logger)
    }

    /// Deletes the specified stack. After the stack is deleted, the application streaming environment provided by the stack is no longer available to users. Also, any reservations made for application streaming sessions for the stack are released.
    @Sendable
    @inlinable
    public func deleteStack(_ input: DeleteStackRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DeleteStackResult {
        try await self.client.execute(
            operation: "DeleteStack", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Deletes the specified stack. After the stack is deleted, the application streaming environment provided by the stack is no longer available to users. Also, any reservations made for application streaming sessions for the stack are released.
    ///
    /// Parameters:
    ///   - name: The name of the stack.
    ///   - logger: Logger use during operation
    @inlinable
    public func deleteStack(
        name: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> DeleteStackResult {
        let input = DeleteStackRequest(
            name: name
        )
        return try await self.deleteStack(input, logger: logger)
    }

    /// Deletes custom branding that customizes the appearance of the streaming application catalog page.
    @Sendable
    @inlinable
    public func deleteThemeForStack(_ input: DeleteThemeForStackRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DeleteThemeForStackResult {
        try await self.client.execute(
            operation: "DeleteThemeForStack", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Deletes custom branding that customizes the appearance of the streaming application catalog page.
    ///
    /// Parameters:
    ///   - stackName: The name of the stack for the theme.
    ///   - logger: Logger use during operation
    @inlinable
    public func deleteThemeForStack(
        stackName: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> DeleteThemeForStackResult {
        let input = DeleteThemeForStackRequest(
            stackName: stackName
        )
        return try await self.deleteThemeForStack(input, logger: logger)
    }

    /// Disables usage report generation.
    @Sendable
    @inlinable
    public func deleteUsageReportSubscription(_ input: DeleteUsageReportSubscriptionRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DeleteUsageReportSubscriptionResult {
        try await self.client.execute(
            operation: "DeleteUsageReportSubscription", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Disables usage report generation.
    ///
    /// Parameters:
    ///   - logger: Logger use during operation
    @inlinable
    public func deleteUsageReportSubscription(
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> DeleteUsageReportSubscriptionResult {
        let input = DeleteUsageReportSubscriptionRequest(
        )
        return try await self.deleteUsageReportSubscription(input, logger: logger)
    }

    /// Deletes a user from the user pool.
    @Sendable
    @inlinable
    public func deleteUser(_ input: DeleteUserRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DeleteUserResult {
        try await self.client.execute(
            operation: "DeleteUser", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Deletes a user from the user pool.
    ///
    /// Parameters:
    ///   - authenticationType: The authentication type for the user. You must specify USERPOOL.
    ///   - userName: The email address of the user.  Users' email addresses are case-sensitive.
    ///   - logger: Logger use during operation
    @inlinable
    public func deleteUser(
        authenticationType: AuthenticationType? = nil,
        userName: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> DeleteUserResult {
        let input = DeleteUserRequest(
            authenticationType: authenticationType, 
            userName: userName
        )
        return try await self.deleteUser(input, logger: logger)
    }

    /// Retrieves a list that describes one or more app block builder associations.
    @Sendable
    @inlinable
    public func describeAppBlockBuilderAppBlockAssociations(_ input: DescribeAppBlockBuilderAppBlockAssociationsRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DescribeAppBlockBuilderAppBlockAssociationsResult {
        try await self.client.execute(
            operation: "DescribeAppBlockBuilderAppBlockAssociations", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Retrieves a list that describes one or more app block builder associations.
    ///
    /// Parameters:
    ///   - appBlockArn: The ARN of the app block.
    ///   - appBlockBuilderName: The name of the app block builder.
    ///   - maxResults: The maximum size of each page of results.
    ///   - nextToken: The pagination token used to retrieve the next page of results for this operation.
    ///   - logger: Logger use during operation
    @inlinable
    public func describeAppBlockBuilderAppBlockAssociations(
        appBlockArn: String? = nil,
        appBlockBuilderName: String? = nil,
        maxResults: Int? = nil,
        nextToken: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> DescribeAppBlockBuilderAppBlockAssociationsResult {
        let input = DescribeAppBlockBuilderAppBlockAssociationsRequest(
            appBlockArn: appBlockArn, 
            appBlockBuilderName: appBlockBuilderName, 
            maxResults: maxResults, 
            nextToken: nextToken
        )
        return try await self.describeAppBlockBuilderAppBlockAssociations(input, logger: logger)
    }

    /// Retrieves a list that describes one or more app block builders.
    @Sendable
    @inlinable
    public func describeAppBlockBuilders(_ input: DescribeAppBlockBuildersRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DescribeAppBlockBuildersResult {
        try await self.client.execute(
            operation: "DescribeAppBlockBuilders", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Retrieves a list that describes one or more app block builders.
    ///
    /// Parameters:
    ///   - maxResults: The maximum size of each page of results. The maximum value is 25.
    ///   - names: The names of the app block builders.
    ///   - nextToken: The pagination token used to retrieve the next page of results for this operation.
    ///   - logger: Logger use during operation
    @inlinable
    public func describeAppBlockBuilders(
        maxResults: Int? = nil,
        names: [String]? = nil,
        nextToken: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> DescribeAppBlockBuildersResult {
        let input = DescribeAppBlockBuildersRequest(
            maxResults: maxResults, 
            names: names, 
            nextToken: nextToken
        )
        return try await self.describeAppBlockBuilders(input, logger: logger)
    }

    /// Retrieves a list that describes one or more app blocks.
    @Sendable
    @inlinable
    public func describeAppBlocks(_ input: DescribeAppBlocksRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DescribeAppBlocksResult {
        try await self.client.execute(
            operation: "DescribeAppBlocks", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Retrieves a list that describes one or more app blocks.
    ///
    /// Parameters:
    ///   - arns: The ARNs of the app blocks.
    ///   - maxResults: The maximum size of each page of results.
    ///   - nextToken: The pagination token used to retrieve the next page of results for this operation.
    ///   - logger: Logger use during operation
    @inlinable
    public func describeAppBlocks(
        arns: [String]? = nil,
        maxResults: Int? = nil,
        nextToken: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> DescribeAppBlocksResult {
        let input = DescribeAppBlocksRequest(
            arns: arns, 
            maxResults: maxResults, 
            nextToken: nextToken
        )
        return try await self.describeAppBlocks(input, logger: logger)
    }

    /// Retrieves a list that describes one or more application fleet associations. Either ApplicationArn or FleetName must be specified.
    @Sendable
    @inlinable
    public func describeApplicationFleetAssociations(_ input: DescribeApplicationFleetAssociationsRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DescribeApplicationFleetAssociationsResult {
        try await self.client.execute(
            operation: "DescribeApplicationFleetAssociations", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Retrieves a list that describes one or more application fleet associations. Either ApplicationArn or FleetName must be specified.
    ///
    /// Parameters:
    ///   - applicationArn: The ARN of the application.
    ///   - fleetName: The name of the fleet.
    ///   - maxResults: The maximum size of each page of results.
    ///   - nextToken: The pagination token used to retrieve the next page of results for this operation.
    ///   - logger: Logger use during operation
    @inlinable
    public func describeApplicationFleetAssociations(
        applicationArn: String? = nil,
        fleetName: String? = nil,
        maxResults: Int? = nil,
        nextToken: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> DescribeApplicationFleetAssociationsResult {
        let input = DescribeApplicationFleetAssociationsRequest(
            applicationArn: applicationArn, 
            fleetName: fleetName, 
            maxResults: maxResults, 
            nextToken: nextToken
        )
        return try await self.describeApplicationFleetAssociations(input, logger: logger)
    }

    /// Retrieves a list that describes one or more applications.
    @Sendable
    @inlinable
    public func describeApplications(_ input: DescribeApplicationsRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DescribeApplicationsResult {
        try await self.client.execute(
            operation: "DescribeApplications", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Retrieves a list that describes one or more applications.
    ///
    /// Parameters:
    ///   - arns: The ARNs for the applications.
    ///   - maxResults: The maximum size of each page of results.
    ///   - nextToken: The pagination token used to retrieve the next page of results for this operation.
    ///   - logger: Logger use during operation
    @inlinable
    public func describeApplications(
        arns: [String]? = nil,
        maxResults: Int? = nil,
        nextToken: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> DescribeApplicationsResult {
        let input = DescribeApplicationsRequest(
            arns: arns, 
            maxResults: maxResults, 
            nextToken: nextToken
        )
        return try await self.describeApplications(input, logger: logger)
    }

    /// Retrieves a list that describes one or more specified Directory Config objects for AppStream 2.0, if the names for these objects are provided. Otherwise, all Directory Config objects in the account are described. These objects include the configuration information required to join fleets and image builders to Microsoft Active Directory domains.   Although the response syntax in this topic includes the account password, this password is not returned in the actual response.
    @Sendable
    @inlinable
    public func describeDirectoryConfigs(_ input: DescribeDirectoryConfigsRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DescribeDirectoryConfigsResult {
        try await self.client.execute(
            operation: "DescribeDirectoryConfigs", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Retrieves a list that describes one or more specified Directory Config objects for AppStream 2.0, if the names for these objects are provided. Otherwise, all Directory Config objects in the account are described. These objects include the configuration information required to join fleets and image builders to Microsoft Active Directory domains.   Although the response syntax in this topic includes the account password, this password is not returned in the actual response.
    ///
    /// Parameters:
    ///   - directoryNames: The directory names.
    ///   - maxResults: The maximum size of each page of results.
    ///   - nextToken: The pagination token to use to retrieve the next page of results for this operation. If this value is null, it retrieves the first page.
    ///   - logger: Logger use during operation
    @inlinable
    public func describeDirectoryConfigs(
        directoryNames: [String]? = nil,
        maxResults: Int? = nil,
        nextToken: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> DescribeDirectoryConfigsResult {
        let input = DescribeDirectoryConfigsRequest(
            directoryNames: directoryNames, 
            maxResults: maxResults, 
            nextToken: nextToken
        )
        return try await self.describeDirectoryConfigs(input, logger: logger)
    }

    /// Retrieves a list that describes one of more entitlements.
    @Sendable
    @inlinable
    public func describeEntitlements(_ input: DescribeEntitlementsRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DescribeEntitlementsResult {
        try await self.client.execute(
            operation: "DescribeEntitlements", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Retrieves a list that describes one of more entitlements.
    ///
    /// Parameters:
    ///   - maxResults: The maximum size of each page of results.
    ///   - name: The name of the entitlement.
    ///   - nextToken: The pagination token used to retrieve the next page of results for this operation.
    ///   - stackName: The name of the stack with which the entitlement is associated.
    ///   - logger: Logger use during operation
    @inlinable
    public func describeEntitlements(
        maxResults: Int? = nil,
        name: String? = nil,
        nextToken: String? = nil,
        stackName: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> DescribeEntitlementsResult {
        let input = DescribeEntitlementsRequest(
            maxResults: maxResults, 
            name: name, 
            nextToken: nextToken, 
            stackName: stackName
        )
        return try await self.describeEntitlements(input, logger: logger)
    }

    /// Retrieves a list that describes one or more specified fleets, if the fleet names are provided. Otherwise, all fleets in the account are described.
    @Sendable
    @inlinable
    public func describeFleets(_ input: DescribeFleetsRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DescribeFleetsResult {
        try await self.client.execute(
            operation: "DescribeFleets", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Retrieves a list that describes one or more specified fleets, if the fleet names are provided. Otherwise, all fleets in the account are described.
    ///
    /// Parameters:
    ///   - names: The names of the fleets to describe.
    ///   - nextToken: The pagination token to use to retrieve the next page of results for this operation. If this value is null, it retrieves the first page.
    ///   - logger: Logger use during operation
    @inlinable
    public func describeFleets(
        names: [String]? = nil,
        nextToken: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> DescribeFleetsResult {
        let input = DescribeFleetsRequest(
            names: names, 
            nextToken: nextToken
        )
        return try await self.describeFleets(input, logger: logger)
    }

    /// Retrieves a list that describes one or more specified image builders, if the image builder names are provided. Otherwise, all image builders in the account are described.
    @Sendable
    @inlinable
    public func describeImageBuilders(_ input: DescribeImageBuildersRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DescribeImageBuildersResult {
        try await self.client.execute(
            operation: "DescribeImageBuilders", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Retrieves a list that describes one or more specified image builders, if the image builder names are provided. Otherwise, all image builders in the account are described.
    ///
    /// Parameters:
    ///   - maxResults: The maximum size of each page of results.
    ///   - names: The names of the image builders to describe.
    ///   - nextToken: The pagination token to use to retrieve the next page of results for this operation. If this value is null, it retrieves the first page.
    ///   - logger: Logger use during operation
    @inlinable
    public func describeImageBuilders(
        maxResults: Int? = nil,
        names: [String]? = nil,
        nextToken: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> DescribeImageBuildersResult {
        let input = DescribeImageBuildersRequest(
            maxResults: maxResults, 
            names: names, 
            nextToken: nextToken
        )
        return try await self.describeImageBuilders(input, logger: logger)
    }

    /// Retrieves a list that describes the permissions for shared AWS account IDs on a private image that you own.
    @Sendable
    @inlinable
    public func describeImagePermissions(_ input: DescribeImagePermissionsRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DescribeImagePermissionsResult {
        try await self.client.execute(
            operation: "DescribeImagePermissions", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Retrieves a list that describes the permissions for shared AWS account IDs on a private image that you own.
    ///
    /// Parameters:
    ///   - maxResults: The maximum size of each page of results.
    ///   - name: The name of the private image for which to describe permissions. The image must be one that you own.
    ///   - nextToken: The pagination token to use to retrieve the next page of results for this operation. If this value is null, it retrieves the first page.
    ///   - sharedAwsAccountIds: The 12-digit identifier of one or more AWS accounts with which the image is shared.
    ///   - logger: Logger use during operation
    @inlinable
    public func describeImagePermissions(
        maxResults: Int? = nil,
        name: String? = nil,
        nextToken: String? = nil,
        sharedAwsAccountIds: [String]? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> DescribeImagePermissionsResult {
        let input = DescribeImagePermissionsRequest(
            maxResults: maxResults, 
            name: name, 
            nextToken: nextToken, 
            sharedAwsAccountIds: sharedAwsAccountIds
        )
        return try await self.describeImagePermissions(input, logger: logger)
    }

    /// Retrieves a list that describes one or more specified images, if the image names or image ARNs are provided. Otherwise, all images in the account are described.
    @Sendable
    @inlinable
    public func describeImages(_ input: DescribeImagesRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DescribeImagesResult {
        try await self.client.execute(
            operation: "DescribeImages", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Retrieves a list that describes one or more specified images, if the image names or image ARNs are provided. Otherwise, all images in the account are described.
    ///
    /// Parameters:
    ///   - arns: The ARNs of the public, private, and shared images to describe.
    ///   - maxResults: The maximum size of each page of results.
    ///   - names: The names of the public or private images to describe.
    ///   - nextToken: The pagination token to use to retrieve the next page of results for this operation. If this value is null, it retrieves the first page.
    ///   - type: The type of image (public, private, or shared) to describe.
    ///   - logger: Logger use during operation
    @inlinable
    public func describeImages(
        arns: [String]? = nil,
        maxResults: Int? = nil,
        names: [String]? = nil,
        nextToken: String? = nil,
        type: VisibilityType? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> DescribeImagesResult {
        let input = DescribeImagesRequest(
            arns: arns, 
            maxResults: maxResults, 
            names: names, 
            nextToken: nextToken, 
            type: type
        )
        return try await self.describeImages(input, logger: logger)
    }

    /// Retrieves a list that describes the streaming sessions for a specified stack and fleet. If a UserId is provided for the stack and fleet, only streaming sessions for that user are described. If an authentication type is not provided,  the default is to authenticate users using a streaming URL.
    @Sendable
    @inlinable
    public func describeSessions(_ input: DescribeSessionsRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DescribeSessionsResult {
        try await self.client.execute(
            operation: "DescribeSessions", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Retrieves a list that describes the streaming sessions for a specified stack and fleet. If a UserId is provided for the stack and fleet, only streaming sessions for that user are described. If an authentication type is not provided,  the default is to authenticate users using a streaming URL.
    ///
    /// Parameters:
    ///   - authenticationType: The authentication method. Specify API for a user authenticated using a streaming URL or SAML for a SAML federated user.  The default is to authenticate users using a streaming URL.
    ///   - fleetName: The name of the fleet. This value is case-sensitive.
    ///   - instanceId: The identifier for the instance hosting the session.
    ///   - limit: The size of each page of results. The default value is 20 and the maximum value is 50.
    ///   - nextToken: The pagination token to use to retrieve the next page of results for this operation. If this value is null, it retrieves the first page.
    ///   - stackName: The name of the stack. This value is case-sensitive.
    ///   - userId: The user identifier (ID). If you specify a user ID, you must also specify the authentication type.
    ///   - logger: Logger use during operation
    @inlinable
    public func describeSessions(
        authenticationType: AuthenticationType? = nil,
        fleetName: String? = nil,
        instanceId: String? = nil,
        limit: Int? = nil,
        nextToken: String? = nil,
        stackName: String? = nil,
        userId: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> DescribeSessionsResult {
        let input = DescribeSessionsRequest(
            authenticationType: authenticationType, 
            fleetName: fleetName, 
            instanceId: instanceId, 
            limit: limit, 
            nextToken: nextToken, 
            stackName: stackName, 
            userId: userId
        )
        return try await self.describeSessions(input, logger: logger)
    }

    /// Retrieves a list that describes one or more specified stacks, if the stack names are provided. Otherwise, all stacks in the account are described.
    @Sendable
    @inlinable
    public func describeStacks(_ input: DescribeStacksRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DescribeStacksResult {
        try await self.client.execute(
            operation: "DescribeStacks", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Retrieves a list that describes one or more specified stacks, if the stack names are provided. Otherwise, all stacks in the account are described.
    ///
    /// Parameters:
    ///   - names: The names of the stacks to describe.
    ///   - nextToken: The pagination token to use to retrieve the next page of results for this operation. If this value is null, it retrieves the first page.
    ///   - logger: Logger use during operation
    @inlinable
    public func describeStacks(
        names: [String]? = nil,
        nextToken: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> DescribeStacksResult {
        let input = DescribeStacksRequest(
            names: names, 
            nextToken: nextToken
        )
        return try await self.describeStacks(input, logger: logger)
    }

    /// Retrieves a list that describes the theme for a specified stack. A theme is custom branding that customizes the appearance of the streaming application catalog page.
    @Sendable
    @inlinable
    public func describeThemeForStack(_ input: DescribeThemeForStackRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DescribeThemeForStackResult {
        try await self.client.execute(
            operation: "DescribeThemeForStack", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Retrieves a list that describes the theme for a specified stack. A theme is custom branding that customizes the appearance of the streaming application catalog page.
    ///
    /// Parameters:
    ///   - stackName: The name of the stack for the theme.
    ///   - logger: Logger use during operation
    @inlinable
    public func describeThemeForStack(
        stackName: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> DescribeThemeForStackResult {
        let input = DescribeThemeForStackRequest(
            stackName: stackName
        )
        return try await self.describeThemeForStack(input, logger: logger)
    }

    /// Retrieves a list that describes one or more usage report subscriptions.
    @Sendable
    @inlinable
    public func describeUsageReportSubscriptions(_ input: DescribeUsageReportSubscriptionsRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DescribeUsageReportSubscriptionsResult {
        try await self.client.execute(
            operation: "DescribeUsageReportSubscriptions", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Retrieves a list that describes one or more usage report subscriptions.
    ///
    /// Parameters:
    ///   - maxResults: The maximum size of each page of results.
    ///   - nextToken: The pagination token to use to retrieve the next page of results for this operation. If this value is null, it retrieves the first page.
    ///   - logger: Logger use during operation
    @inlinable
    public func describeUsageReportSubscriptions(
        maxResults: Int? = nil,
        nextToken: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> DescribeUsageReportSubscriptionsResult {
        let input = DescribeUsageReportSubscriptionsRequest(
            maxResults: maxResults, 
            nextToken: nextToken
        )
        return try await self.describeUsageReportSubscriptions(input, logger: logger)
    }

    /// Retrieves a list that describes the UserStackAssociation objects. You must specify either or both of the following:   The stack name   The user name (email address of the user associated with the stack) and the authentication type for the user
    @Sendable
    @inlinable
    public func describeUserStackAssociations(_ input: DescribeUserStackAssociationsRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DescribeUserStackAssociationsResult {
        try await self.client.execute(
            operation: "DescribeUserStackAssociations", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Retrieves a list that describes the UserStackAssociation objects. You must specify either or both of the following:   The stack name   The user name (email address of the user associated with the stack) and the authentication type for the user
    ///
    /// Parameters:
    ///   - authenticationType: The authentication type for the user who is associated with the stack. You must specify USERPOOL.
    ///   - maxResults: The maximum size of each page of results.
    ///   - nextToken: The pagination token to use to retrieve the next page of results for this operation. If this value is null, it retrieves the first page.
    ///   - stackName: The name of the stack that is associated with the user.
    ///   - userName: The email address of the user who is associated with the stack.  Users' email addresses are case-sensitive.
    ///   - logger: Logger use during operation
    @inlinable
    public func describeUserStackAssociations(
        authenticationType: AuthenticationType? = nil,
        maxResults: Int? = nil,
        nextToken: String? = nil,
        stackName: String? = nil,
        userName: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> DescribeUserStackAssociationsResult {
        let input = DescribeUserStackAssociationsRequest(
            authenticationType: authenticationType, 
            maxResults: maxResults, 
            nextToken: nextToken, 
            stackName: stackName, 
            userName: userName
        )
        return try await self.describeUserStackAssociations(input, logger: logger)
    }

    /// Retrieves a list that describes one or more specified users in the user pool.
    @Sendable
    @inlinable
    public func describeUsers(_ input: DescribeUsersRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DescribeUsersResult {
        try await self.client.execute(
            operation: "DescribeUsers", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Retrieves a list that describes one or more specified users in the user pool.
    ///
    /// Parameters:
    ///   - authenticationType: The authentication type for the users in the user pool to describe. You must specify USERPOOL.
    ///   - maxResults: The maximum size of each page of results.
    ///   - nextToken: The pagination token to use to retrieve the next page of results for this operation. If this value is null, it retrieves the first page.
    ///   - logger: Logger use during operation
    @inlinable
    public func describeUsers(
        authenticationType: AuthenticationType? = nil,
        maxResults: Int? = nil,
        nextToken: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> DescribeUsersResult {
        let input = DescribeUsersRequest(
            authenticationType: authenticationType, 
            maxResults: maxResults, 
            nextToken: nextToken
        )
        return try await self.describeUsers(input, logger: logger)
    }

    /// Disables the specified user in the user pool. Users can't sign in to AppStream 2.0 until they are re-enabled. This action does not delete the user.
    @Sendable
    @inlinable
    public func disableUser(_ input: DisableUserRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DisableUserResult {
        try await self.client.execute(
            operation: "DisableUser", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Disables the specified user in the user pool. Users can't sign in to AppStream 2.0 until they are re-enabled. This action does not delete the user.
    ///
    /// Parameters:
    ///   - authenticationType: The authentication type for the user. You must specify USERPOOL.
    ///   - userName: The email address of the user.  Users' email addresses are case-sensitive.
    ///   - logger: Logger use during operation
    @inlinable
    public func disableUser(
        authenticationType: AuthenticationType? = nil,
        userName: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> DisableUserResult {
        let input = DisableUserRequest(
            authenticationType: authenticationType, 
            userName: userName
        )
        return try await self.disableUser(input, logger: logger)
    }

    /// Disassociates a specified app block builder from a specified app block.
    @Sendable
    @inlinable
    public func disassociateAppBlockBuilderAppBlock(_ input: DisassociateAppBlockBuilderAppBlockRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DisassociateAppBlockBuilderAppBlockResult {
        try await self.client.execute(
            operation: "DisassociateAppBlockBuilderAppBlock", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Disassociates a specified app block builder from a specified app block.
    ///
    /// Parameters:
    ///   - appBlockArn: The ARN of the app block.
    ///   - appBlockBuilderName: The name of the app block builder.
    ///   - logger: Logger use during operation
    @inlinable
    public func disassociateAppBlockBuilderAppBlock(
        appBlockArn: String? = nil,
        appBlockBuilderName: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> DisassociateAppBlockBuilderAppBlockResult {
        let input = DisassociateAppBlockBuilderAppBlockRequest(
            appBlockArn: appBlockArn, 
            appBlockBuilderName: appBlockBuilderName
        )
        return try await self.disassociateAppBlockBuilderAppBlock(input, logger: logger)
    }

    /// Disassociates the specified application from the fleet.
    @Sendable
    @inlinable
    public func disassociateApplicationFleet(_ input: DisassociateApplicationFleetRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DisassociateApplicationFleetResult {
        try await self.client.execute(
            operation: "DisassociateApplicationFleet", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Disassociates the specified application from the fleet.
    ///
    /// Parameters:
    ///   - applicationArn: The ARN of the application.
    ///   - fleetName: The name of the fleet.
    ///   - logger: Logger use during operation
    @inlinable
    public func disassociateApplicationFleet(
        applicationArn: String? = nil,
        fleetName: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> DisassociateApplicationFleetResult {
        let input = DisassociateApplicationFleetRequest(
            applicationArn: applicationArn, 
            fleetName: fleetName
        )
        return try await self.disassociateApplicationFleet(input, logger: logger)
    }

    /// Deletes the specified application from the specified entitlement.
    @Sendable
    @inlinable
    public func disassociateApplicationFromEntitlement(_ input: DisassociateApplicationFromEntitlementRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DisassociateApplicationFromEntitlementResult {
        try await self.client.execute(
            operation: "DisassociateApplicationFromEntitlement", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Deletes the specified application from the specified entitlement.
    ///
    /// Parameters:
    ///   - applicationIdentifier: The identifier of the application to remove from the entitlement.
    ///   - entitlementName: The name of the entitlement.
    ///   - stackName: The name of the stack with which the entitlement is associated.
    ///   - logger: Logger use during operation
    @inlinable
    public func disassociateApplicationFromEntitlement(
        applicationIdentifier: String? = nil,
        entitlementName: String? = nil,
        stackName: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> DisassociateApplicationFromEntitlementResult {
        let input = DisassociateApplicationFromEntitlementRequest(
            applicationIdentifier: applicationIdentifier, 
            entitlementName: entitlementName, 
            stackName: stackName
        )
        return try await self.disassociateApplicationFromEntitlement(input, logger: logger)
    }

    /// Disassociates the specified fleet from the specified stack.
    @Sendable
    @inlinable
    public func disassociateFleet(_ input: DisassociateFleetRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DisassociateFleetResult {
        try await self.client.execute(
            operation: "DisassociateFleet", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Disassociates the specified fleet from the specified stack.
    ///
    /// Parameters:
    ///   - fleetName: The name of the fleet.
    ///   - stackName: The name of the stack.
    ///   - logger: Logger use during operation
    @inlinable
    public func disassociateFleet(
        fleetName: String? = nil,
        stackName: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> DisassociateFleetResult {
        let input = DisassociateFleetRequest(
            fleetName: fleetName, 
            stackName: stackName
        )
        return try await self.disassociateFleet(input, logger: logger)
    }

    /// Enables a user in the user pool. After being enabled, users can sign in to AppStream 2.0 and open applications from the stacks to which they are assigned.
    @Sendable
    @inlinable
    public func enableUser(_ input: EnableUserRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> EnableUserResult {
        try await self.client.execute(
            operation: "EnableUser", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Enables a user in the user pool. After being enabled, users can sign in to AppStream 2.0 and open applications from the stacks to which they are assigned.
    ///
    /// Parameters:
    ///   - authenticationType: The authentication type for the user. You must specify USERPOOL.
    ///   - userName: The email address of the user.  Users' email addresses are case-sensitive. During login, if they specify an email address that doesn't use the same capitalization as the email address specified when their user pool account was created, a "user does not exist" error message displays.
    ///   - logger: Logger use during operation
    @inlinable
    public func enableUser(
        authenticationType: AuthenticationType? = nil,
        userName: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> EnableUserResult {
        let input = EnableUserRequest(
            authenticationType: authenticationType, 
            userName: userName
        )
        return try await self.enableUser(input, logger: logger)
    }

    /// Immediately stops the specified streaming session.
    @Sendable
    @inlinable
    public func expireSession(_ input: ExpireSessionRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> ExpireSessionResult {
        try await self.client.execute(
            operation: "ExpireSession", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Immediately stops the specified streaming session.
    ///
    /// Parameters:
    ///   - sessionId: The identifier of the streaming session.
    ///   - logger: Logger use during operation
    @inlinable
    public func expireSession(
        sessionId: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> ExpireSessionResult {
        let input = ExpireSessionRequest(
            sessionId: sessionId
        )
        return try await self.expireSession(input, logger: logger)
    }

    /// Retrieves the name of the fleet that is associated with the specified stack.
    @Sendable
    @inlinable
    public func listAssociatedFleets(_ input: ListAssociatedFleetsRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> ListAssociatedFleetsResult {
        try await self.client.execute(
            operation: "ListAssociatedFleets", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Retrieves the name of the fleet that is associated with the specified stack.
    ///
    /// Parameters:
    ///   - nextToken: The pagination token to use to retrieve the next page of results for this operation. If this value is null, it retrieves the first page.
    ///   - stackName: The name of the stack.
    ///   - logger: Logger use during operation
    @inlinable
    public func listAssociatedFleets(
        nextToken: String? = nil,
        stackName: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> ListAssociatedFleetsResult {
        let input = ListAssociatedFleetsRequest(
            nextToken: nextToken, 
            stackName: stackName
        )
        return try await self.listAssociatedFleets(input, logger: logger)
    }

    /// Retrieves the name of the stack with which the specified fleet is associated.
    @Sendable
    @inlinable
    public func listAssociatedStacks(_ input: ListAssociatedStacksRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> ListAssociatedStacksResult {
        try await self.client.execute(
            operation: "ListAssociatedStacks", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Retrieves the name of the stack with which the specified fleet is associated.
    ///
    /// Parameters:
    ///   - fleetName: The name of the fleet.
    ///   - nextToken: The pagination token to use to retrieve the next page of results for this operation. If this value is null, it retrieves the first page.
    ///   - logger: Logger use during operation
    @inlinable
    public func listAssociatedStacks(
        fleetName: String? = nil,
        nextToken: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> ListAssociatedStacksResult {
        let input = ListAssociatedStacksRequest(
            fleetName: fleetName, 
            nextToken: nextToken
        )
        return try await self.listAssociatedStacks(input, logger: logger)
    }

    /// Retrieves a list of entitled applications.
    @Sendable
    @inlinable
    public func listEntitledApplications(_ input: ListEntitledApplicationsRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> ListEntitledApplicationsResult {
        try await self.client.execute(
            operation: "ListEntitledApplications", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Retrieves a list of entitled applications.
    ///
    /// Parameters:
    ///   - entitlementName: The name of the entitlement.
    ///   - maxResults: The maximum size of each page of results.
    ///   - nextToken: The pagination token used to retrieve the next page of results for this operation.
    ///   - stackName: The name of the stack with which the entitlement is associated.
    ///   - logger: Logger use during operation
    @inlinable
    public func listEntitledApplications(
        entitlementName: String? = nil,
        maxResults: Int? = nil,
        nextToken: String? = nil,
        stackName: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> ListEntitledApplicationsResult {
        let input = ListEntitledApplicationsRequest(
            entitlementName: entitlementName, 
            maxResults: maxResults, 
            nextToken: nextToken, 
            stackName: stackName
        )
        return try await self.listEntitledApplications(input, logger: logger)
    }

    /// Retrieves a list of all tags for the specified AppStream 2.0 resource. You can tag AppStream 2.0 image builders, images, fleets, and stacks. For more information about tags, see Tagging Your Resources in the Amazon AppStream 2.0 Administration Guide.
    @Sendable
    @inlinable
    public func listTagsForResource(_ input: ListTagsForResourceRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> ListTagsForResourceResponse {
        try await self.client.execute(
            operation: "ListTagsForResource", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Retrieves a list of all tags for the specified AppStream 2.0 resource. You can tag AppStream 2.0 image builders, images, fleets, and stacks. For more information about tags, see Tagging Your Resources in the Amazon AppStream 2.0 Administration Guide.
    ///
    /// Parameters:
    ///   - resourceArn: The Amazon Resource Name (ARN) of the resource.
    ///   - logger: Logger use during operation
    @inlinable
    public func listTagsForResource(
        resourceArn: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> ListTagsForResourceResponse {
        let input = ListTagsForResourceRequest(
            resourceArn: resourceArn
        )
        return try await self.listTagsForResource(input, logger: logger)
    }

    /// Starts an app block builder. An app block builder can only be started when it's associated with an app block. Starting an app block builder starts a new instance, which is equivalent to an elastic fleet instance with application builder assistance functionality.
    @Sendable
    @inlinable
    public func startAppBlockBuilder(_ input: StartAppBlockBuilderRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> StartAppBlockBuilderResult {
        try await self.client.execute(
            operation: "StartAppBlockBuilder", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Starts an app block builder. An app block builder can only be started when it's associated with an app block. Starting an app block builder starts a new instance, which is equivalent to an elastic fleet instance with application builder assistance functionality.
    ///
    /// Parameters:
    ///   - name: The name of the app block builder.
    ///   - logger: Logger use during operation
    @inlinable
    public func startAppBlockBuilder(
        name: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> StartAppBlockBuilderResult {
        let input = StartAppBlockBuilderRequest(
            name: name
        )
        return try await self.startAppBlockBuilder(input, logger: logger)
    }

    /// Starts the specified fleet.
    @Sendable
    @inlinable
    public func startFleet(_ input: StartFleetRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> StartFleetResult {
        try await self.client.execute(
            operation: "StartFleet", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Starts the specified fleet.
    ///
    /// Parameters:
    ///   - name: The name of the fleet.
    ///   - logger: Logger use during operation
    @inlinable
    public func startFleet(
        name: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> StartFleetResult {
        let input = StartFleetRequest(
            name: name
        )
        return try await self.startFleet(input, logger: logger)
    }

    /// Starts the specified image builder.
    @Sendable
    @inlinable
    public func startImageBuilder(_ input: StartImageBuilderRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> StartImageBuilderResult {
        try await self.client.execute(
            operation: "StartImageBuilder", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Starts the specified image builder.
    ///
    /// Parameters:
    ///   - appstreamAgentVersion: The version of the AppStream 2.0 agent to use for this image builder. To use the latest version of the AppStream 2.0 agent, specify [LATEST].
    ///   - name: The name of the image builder.
    ///   - logger: Logger use during operation
    @inlinable
    public func startImageBuilder(
        appstreamAgentVersion: String? = nil,
        name: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> StartImageBuilderResult {
        let input = StartImageBuilderRequest(
            appstreamAgentVersion: appstreamAgentVersion, 
            name: name
        )
        return try await self.startImageBuilder(input, logger: logger)
    }

    /// Stops an app block builder. Stopping an app block builder terminates the instance, and the instance state is not persisted.
    @Sendable
    @inlinable
    public func stopAppBlockBuilder(_ input: StopAppBlockBuilderRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> StopAppBlockBuilderResult {
        try await self.client.execute(
            operation: "StopAppBlockBuilder", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Stops an app block builder. Stopping an app block builder terminates the instance, and the instance state is not persisted.
    ///
    /// Parameters:
    ///   - name: The name of the app block builder.
    ///   - logger: Logger use during operation
    @inlinable
    public func stopAppBlockBuilder(
        name: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> StopAppBlockBuilderResult {
        let input = StopAppBlockBuilderRequest(
            name: name
        )
        return try await self.stopAppBlockBuilder(input, logger: logger)
    }

    /// Stops the specified fleet.
    @Sendable
    @inlinable
    public func stopFleet(_ input: StopFleetRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> StopFleetResult {
        try await self.client.execute(
            operation: "StopFleet", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Stops the specified fleet.
    ///
    /// Parameters:
    ///   - name: The name of the fleet.
    ///   - logger: Logger use during operation
    @inlinable
    public func stopFleet(
        name: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> StopFleetResult {
        let input = StopFleetRequest(
            name: name
        )
        return try await self.stopFleet(input, logger: logger)
    }

    /// Stops the specified image builder.
    @Sendable
    @inlinable
    public func stopImageBuilder(_ input: StopImageBuilderRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> StopImageBuilderResult {
        try await self.client.execute(
            operation: "StopImageBuilder", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Stops the specified image builder.
    ///
    /// Parameters:
    ///   - name: The name of the image builder.
    ///   - logger: Logger use during operation
    @inlinable
    public func stopImageBuilder(
        name: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> StopImageBuilderResult {
        let input = StopImageBuilderRequest(
            name: name
        )
        return try await self.stopImageBuilder(input, logger: logger)
    }

    /// Adds or overwrites one or more tags for the specified AppStream 2.0 resource. You can tag AppStream 2.0 image builders, images, fleets, and stacks. Each tag consists of a key and an optional value. If a resource already has a tag with the same key,  this operation updates its value. To list the current tags for your resources, use ListTagsForResource. To disassociate tags from your resources, use UntagResource. For more information about tags, see Tagging Your Resources in the Amazon AppStream 2.0 Administration Guide.
    @Sendable
    @inlinable
    public func tagResource(_ input: TagResourceRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> TagResourceResponse {
        try await self.client.execute(
            operation: "TagResource", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Adds or overwrites one or more tags for the specified AppStream 2.0 resource. You can tag AppStream 2.0 image builders, images, fleets, and stacks. Each tag consists of a key and an optional value. If a resource already has a tag with the same key,  this operation updates its value. To list the current tags for your resources, use ListTagsForResource. To disassociate tags from your resources, use UntagResource. For more information about tags, see Tagging Your Resources in the Amazon AppStream 2.0 Administration Guide.
    ///
    /// Parameters:
    ///   - resourceArn: The Amazon Resource Name (ARN) of the resource.
    ///   - tags: The tags to associate. A tag is a key-value pair, and the value is optional. For example, Environment=Test. If you do not specify a value, Environment=.  If you do not specify a value, the value is set to an empty string. Generally allowed characters are: letters, numbers, and spaces representable in UTF-8, and the following special characters:  _ . : / = + \ - @
    ///   - logger: Logger use during operation
    @inlinable
    public func tagResource(
        resourceArn: String? = nil,
        tags: [String: String]? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> TagResourceResponse {
        let input = TagResourceRequest(
            resourceArn: resourceArn, 
            tags: tags
        )
        return try await self.tagResource(input, logger: logger)
    }

    /// Disassociates one or more specified tags from the specified AppStream 2.0 resource. To list the current tags for your resources, use ListTagsForResource. For more information about tags, see Tagging Your Resources in the Amazon AppStream 2.0 Administration Guide.
    @Sendable
    @inlinable
    public func untagResource(_ input: UntagResourceRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> UntagResourceResponse {
        try await self.client.execute(
            operation: "UntagResource", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Disassociates one or more specified tags from the specified AppStream 2.0 resource. To list the current tags for your resources, use ListTagsForResource. For more information about tags, see Tagging Your Resources in the Amazon AppStream 2.0 Administration Guide.
    ///
    /// Parameters:
    ///   - resourceArn: The Amazon Resource Name (ARN) of the resource.
    ///   - tagKeys: The tag keys for the tags to disassociate.
    ///   - logger: Logger use during operation
    @inlinable
    public func untagResource(
        resourceArn: String? = nil,
        tagKeys: [String]? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> UntagResourceResponse {
        let input = UntagResourceRequest(
            resourceArn: resourceArn, 
            tagKeys: tagKeys
        )
        return try await self.untagResource(input, logger: logger)
    }

    /// Updates an app block builder. If the app block builder is in the STARTING or STOPPING state, you can't update it. If the app block builder is in the RUNNING state, you can only update the DisplayName and Description. If the app block builder is in the STOPPED state, you can update any attribute except the Name.
    @Sendable
    @inlinable
    public func updateAppBlockBuilder(_ input: UpdateAppBlockBuilderRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> UpdateAppBlockBuilderResult {
        try await self.client.execute(
            operation: "UpdateAppBlockBuilder", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Updates an app block builder. If the app block builder is in the STARTING or STOPPING state, you can't update it. If the app block builder is in the RUNNING state, you can only update the DisplayName and Description. If the app block builder is in the STOPPED state, you can update any attribute except the Name.
    ///
    /// Parameters:
    ///   - accessEndpoints: The list of interface VPC endpoint (interface endpoint) objects. Administrators can connect to the app block builder only through the specified endpoints.
    ///   - attributesToDelete: The attributes to delete from the app block builder.
    ///   - description: The description of the app block builder.
    ///   - displayName: The display name of the app block builder.
    ///   - enableDefaultInternetAccess: Enables or disables default internet access for the app block builder.
    ///   - iamRoleArn: The Amazon Resource Name (ARN) of the IAM role to apply to the app block builder. To assume a role, the app block builder calls the AWS Security Token Service (STS) AssumeRole API operation and passes the ARN of the role to use. The operation creates a new session with temporary credentials. AppStream 2.0 retrieves the temporary credentials and creates the appstream_machine_role credential profile on the instance. For more information, see Using an IAM Role to Grant Permissions to Applications and Scripts Running on AppStream 2.0 Streaming Instances in the Amazon AppStream 2.0 Administration Guide.
    ///   - instanceType: The instance type to use when launching the app block builder. The following instance types are available:   stream.standard.small   stream.standard.medium   stream.standard.large   stream.standard.xlarge   stream.standard.2xlarge
    ///   - name: The unique name for the app block builder.
    ///   - platform: The platform of the app block builder.  WINDOWS_SERVER_2019 is the only valid value.
    ///   - vpcConfig: The VPC configuration for the app block builder. App block builders require that you specify at least two subnets in different availability zones.
    ///   - logger: Logger use during operation
    @inlinable
    public func updateAppBlockBuilder(
        accessEndpoints: [AccessEndpoint]? = nil,
        attributesToDelete: [AppBlockBuilderAttribute]? = nil,
        description: String? = nil,
        displayName: String? = nil,
        enableDefaultInternetAccess: Bool? = nil,
        iamRoleArn: String? = nil,
        instanceType: String? = nil,
        name: String? = nil,
        platform: PlatformType? = nil,
        vpcConfig: VpcConfig? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> UpdateAppBlockBuilderResult {
        let input = UpdateAppBlockBuilderRequest(
            accessEndpoints: accessEndpoints, 
            attributesToDelete: attributesToDelete, 
            description: description, 
            displayName: displayName, 
            enableDefaultInternetAccess: enableDefaultInternetAccess, 
            iamRoleArn: iamRoleArn, 
            instanceType: instanceType, 
            name: name, 
            platform: platform, 
            vpcConfig: vpcConfig
        )
        return try await self.updateAppBlockBuilder(input, logger: logger)
    }

    /// Updates the specified application.
    @Sendable
    @inlinable
    public func updateApplication(_ input: UpdateApplicationRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> UpdateApplicationResult {
        try await self.client.execute(
            operation: "UpdateApplication", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Updates the specified application.
    ///
    /// Parameters:
    ///   - appBlockArn: The ARN of the app block.
    ///   - attributesToDelete: The attributes to delete for an application.
    ///   - description: The description of the application.
    ///   - displayName: The display name of the application. This name is visible to users in the application catalog.
    ///   - iconS3Location: The icon S3 location of the application.
    ///   - launchParameters: The launch parameters of the application.
    ///   - launchPath: The launch path of the application.
    ///   - name: The name of the application. This name is visible to users when display name is not specified.
    ///   - workingDirectory: The working directory of the application.
    ///   - logger: Logger use during operation
    @inlinable
    public func updateApplication(
        appBlockArn: String? = nil,
        attributesToDelete: [ApplicationAttribute]? = nil,
        description: String? = nil,
        displayName: String? = nil,
        iconS3Location: S3Location? = nil,
        launchParameters: String? = nil,
        launchPath: String? = nil,
        name: String? = nil,
        workingDirectory: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> UpdateApplicationResult {
        let input = UpdateApplicationRequest(
            appBlockArn: appBlockArn, 
            attributesToDelete: attributesToDelete, 
            description: description, 
            displayName: displayName, 
            iconS3Location: iconS3Location, 
            launchParameters: launchParameters, 
            launchPath: launchPath, 
            name: name, 
            workingDirectory: workingDirectory
        )
        return try await self.updateApplication(input, logger: logger)
    }

    /// Updates the specified Directory Config object in AppStream 2.0. This object includes the configuration information required to join fleets and image builders to Microsoft Active Directory domains.
    @Sendable
    @inlinable
    public func updateDirectoryConfig(_ input: UpdateDirectoryConfigRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> UpdateDirectoryConfigResult {
        try await self.client.execute(
            operation: "UpdateDirectoryConfig", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Updates the specified Directory Config object in AppStream 2.0. This object includes the configuration information required to join fleets and image builders to Microsoft Active Directory domains.
    ///
    /// Parameters:
    ///   - certificateBasedAuthProperties: The certificate-based authentication properties used to authenticate SAML 2.0 Identity Provider (IdP) user identities to Active Directory domain-joined streaming instances. Fallback is turned on by default when certificate-based authentication is Enabled . Fallback allows users to log in using their AD domain password if certificate-based authentication is unsuccessful, or to unlock a desktop lock screen. Enabled_no_directory_login_fallback enables certificate-based authentication, but does not allow users to log in using their AD domain password. Users will be disconnected to re-authenticate using certificates.
    ///   - directoryName: The name of the Directory Config object.
    ///   - organizationalUnitDistinguishedNames: The distinguished names of the organizational units for computer accounts.
    ///   - serviceAccountCredentials: The credentials for the service account used by the fleet or image builder to connect to the directory.
    ///   - logger: Logger use during operation
    @inlinable
    public func updateDirectoryConfig(
        certificateBasedAuthProperties: CertificateBasedAuthProperties? = nil,
        directoryName: String? = nil,
        organizationalUnitDistinguishedNames: [String]? = nil,
        serviceAccountCredentials: ServiceAccountCredentials? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> UpdateDirectoryConfigResult {
        let input = UpdateDirectoryConfigRequest(
            certificateBasedAuthProperties: certificateBasedAuthProperties, 
            directoryName: directoryName, 
            organizationalUnitDistinguishedNames: organizationalUnitDistinguishedNames, 
            serviceAccountCredentials: serviceAccountCredentials
        )
        return try await self.updateDirectoryConfig(input, logger: logger)
    }

    /// Updates the specified entitlement.
    @Sendable
    @inlinable
    public func updateEntitlement(_ input: UpdateEntitlementRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> UpdateEntitlementResult {
        try await self.client.execute(
            operation: "UpdateEntitlement", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Updates the specified entitlement.
    ///
    /// Parameters:
    ///   - appVisibility: Specifies whether all or only selected apps are entitled.
    ///   - attributes: The attributes of the entitlement.
    ///   - description: The description of the entitlement.
    ///   - name: The name of the entitlement.
    ///   - stackName: The name of the stack with which the entitlement is associated.
    ///   - logger: Logger use during operation
    @inlinable
    public func updateEntitlement(
        appVisibility: AppVisibility? = nil,
        attributes: [EntitlementAttribute]? = nil,
        description: String? = nil,
        name: String? = nil,
        stackName: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> UpdateEntitlementResult {
        let input = UpdateEntitlementRequest(
            appVisibility: appVisibility, 
            attributes: attributes, 
            description: description, 
            name: name, 
            stackName: stackName
        )
        return try await self.updateEntitlement(input, logger: logger)
    }

    /// Updates the specified fleet. If the fleet is in the STOPPED state, you can update any attribute except the fleet name. If the fleet is in the RUNNING state, you can update the following based on the fleet type:   Always-On and On-Demand fleet types You can update the  DisplayName, ComputeCapacity, ImageARN, ImageName, IdleDisconnectTimeoutInSeconds, and DisconnectTimeoutInSeconds attributes.   Elastic fleet type You can update the  DisplayName, IdleDisconnectTimeoutInSeconds, DisconnectTimeoutInSeconds, MaxConcurrentSessions, SessionScriptS3Location and UsbDeviceFilterStrings attributes.   If the fleet is in the STARTING or STOPPED state, you can't update it.
    @Sendable
    @inlinable
    public func updateFleet(_ input: UpdateFleetRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> UpdateFleetResult {
        try await self.client.execute(
            operation: "UpdateFleet", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Updates the specified fleet. If the fleet is in the STOPPED state, you can update any attribute except the fleet name. If the fleet is in the RUNNING state, you can update the following based on the fleet type:   Always-On and On-Demand fleet types You can update the  DisplayName, ComputeCapacity, ImageARN, ImageName, IdleDisconnectTimeoutInSeconds, and DisconnectTimeoutInSeconds attributes.   Elastic fleet type You can update the  DisplayName, IdleDisconnectTimeoutInSeconds, DisconnectTimeoutInSeconds, MaxConcurrentSessions, SessionScriptS3Location and UsbDeviceFilterStrings attributes.   If the fleet is in the STARTING or STOPPED state, you can't update it.
    ///
    /// Parameters:
    ///   - attributesToDelete: The fleet attributes to delete.
    ///   - computeCapacity: The desired capacity for the fleet. This is not allowed for Elastic fleets.
    ///   - description: The description to display.
    ///   - disconnectTimeoutInSeconds: The amount of time that a streaming session remains active after users disconnect. If users try to reconnect to the streaming session after a disconnection or network interruption within this time interval, they are connected to their previous session. Otherwise, they are connected to a new session with a new streaming instance.  Specify a value between 60 and 36000.
    ///   - displayName: The fleet name to display.
    ///   - domainJoinInfo: The name of the directory and organizational unit (OU) to use to join the fleet to a Microsoft Active Directory domain.
    ///   - enableDefaultInternetAccess: Enables or disables default internet access for the fleet.
    ///   - iamRoleArn: The Amazon Resource Name (ARN) of the IAM role to apply to the fleet. To assume a role, a fleet instance calls the AWS Security Token Service (STS) AssumeRole API operation and passes the ARN of the role to use. The operation creates a new session with temporary credentials. AppStream 2.0 retrieves the temporary credentials and creates the appstream_machine_role credential profile on the instance. For more information, see Using an IAM Role to Grant Permissions to Applications and Scripts Running on AppStream 2.0 Streaming Instances in the Amazon AppStream 2.0 Administration Guide.
    ///   - idleDisconnectTimeoutInSeconds: The amount of time that users can be idle (inactive) before they are disconnected from their streaming session and the DisconnectTimeoutInSeconds time interval begins. Users are notified before they are disconnected due to inactivity. If users try to reconnect to the streaming session before the time interval specified in DisconnectTimeoutInSeconds elapses, they are connected to their previous session. Users are considered idle when they stop providing keyboard or mouse input during their streaming session. File uploads and downloads, audio in, audio out, and pixels changing do not qualify as user activity. If users continue to be idle after the time interval in IdleDisconnectTimeoutInSeconds elapses, they are disconnected.  To prevent users from being disconnected due to inactivity, specify a value of 0. Otherwise, specify a value between 60 and 36000. The default value is 0.  If you enable this feature, we recommend that you specify a value that corresponds exactly to a whole number of minutes (for example, 60, 120, and 180). If you don't do this, the value is rounded to the nearest minute. For example, if you specify a value of 70, users are disconnected after 1 minute of inactivity. If you specify a value that is at the midpoint between two different minutes, the value is rounded up. For example, if you specify a value of 90, users are disconnected after 2 minutes of inactivity.
    ///   - imageArn: The ARN of the public, private, or shared image to use.
    ///   - imageName: The name of the image used to create the fleet.
    ///   - instanceType: The instance type to use when launching fleet instances. The following instance types are available:   stream.standard.small   stream.standard.medium   stream.standard.large   stream.standard.xlarge   stream.standard.2xlarge   stream.compute.large   stream.compute.xlarge   stream.compute.2xlarge   stream.compute.4xlarge   stream.compute.8xlarge   stream.memory.large   stream.memory.xlarge   stream.memory.2xlarge   stream.memory.4xlarge   stream.memory.8xlarge   stream.memory.z1d.large   stream.memory.z1d.xlarge   stream.memory.z1d.2xlarge   stream.memory.z1d.3xlarge   stream.memory.z1d.6xlarge   stream.memory.z1d.12xlarge   stream.graphics-design.large   stream.graphics-design.xlarge   stream.graphics-design.2xlarge   stream.graphics-design.4xlarge   stream.graphics-desktop.2xlarge   stream.graphics.g4dn.xlarge   stream.graphics.g4dn.2xlarge   stream.graphics.g4dn.4xlarge   stream.graphics.g4dn.8xlarge   stream.graphics.g4dn.12xlarge   stream.graphics.g4dn.16xlarge   stream.graphics-pro.4xlarge   stream.graphics-pro.8xlarge   stream.graphics-pro.16xlarge   The following instance types are available for Elastic fleets:   stream.standard.small   stream.standard.medium   stream.standard.large   stream.standard.xlarge   stream.standard.2xlarge
    ///   - maxConcurrentSessions: The maximum number of concurrent sessions for a fleet.
    ///   - maxSessionsPerInstance: The maximum number of user sessions on an instance. This only applies to multi-session fleets.
    ///   - maxUserDurationInSeconds: The maximum amount of time that a streaming session can remain active, in seconds. If users are still connected to a streaming instance five minutes before this limit is reached, they are prompted to save any open documents before being disconnected. After this time elapses, the instance is terminated and replaced by a new instance. Specify a value between 600 and 432000.
    ///   - name: A unique name for the fleet.
    ///   - platform: The platform of the fleet. WINDOWS_SERVER_2019 and AMAZON_LINUX2 are supported for Elastic fleets.
    ///   - sessionScriptS3Location: The S3 location of the session scripts configuration zip file. This only applies to Elastic fleets.
    ///   - streamView: The AppStream 2.0 view that is displayed to your users when they stream from the fleet. When APP is specified, only the windows of applications opened by users display. When DESKTOP is specified, the standard desktop that is provided by the operating system displays. The default value is APP.
    ///   - usbDeviceFilterStrings: The USB device filter strings that specify which USB devices a user can redirect to the fleet streaming session, when using the Windows native client. This is allowed but not required for Elastic fleets.
    ///   - vpcConfig: The VPC configuration for the fleet. This is required for Elastic fleets, but not required for other fleet types. Elastic fleets require that you specify at least two subnets in different availability zones.
    ///   - logger: Logger use during operation
    @inlinable
    public func updateFleet(
        attributesToDelete: [FleetAttribute]? = nil,
        computeCapacity: ComputeCapacity? = nil,
        description: String? = nil,
        disconnectTimeoutInSeconds: Int? = nil,
        displayName: String? = nil,
        domainJoinInfo: DomainJoinInfo? = nil,
        enableDefaultInternetAccess: Bool? = nil,
        iamRoleArn: String? = nil,
        idleDisconnectTimeoutInSeconds: Int? = nil,
        imageArn: String? = nil,
        imageName: String? = nil,
        instanceType: String? = nil,
        maxConcurrentSessions: Int? = nil,
        maxSessionsPerInstance: Int? = nil,
        maxUserDurationInSeconds: Int? = nil,
        name: String? = nil,
        platform: PlatformType? = nil,
        sessionScriptS3Location: S3Location? = nil,
        streamView: StreamView? = nil,
        usbDeviceFilterStrings: [String]? = nil,
        vpcConfig: VpcConfig? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> UpdateFleetResult {
        let input = UpdateFleetRequest(
            attributesToDelete: attributesToDelete, 
            computeCapacity: computeCapacity, 
            description: description, 
            disconnectTimeoutInSeconds: disconnectTimeoutInSeconds, 
            displayName: displayName, 
            domainJoinInfo: domainJoinInfo, 
            enableDefaultInternetAccess: enableDefaultInternetAccess, 
            iamRoleArn: iamRoleArn, 
            idleDisconnectTimeoutInSeconds: idleDisconnectTimeoutInSeconds, 
            imageArn: imageArn, 
            imageName: imageName, 
            instanceType: instanceType, 
            maxConcurrentSessions: maxConcurrentSessions, 
            maxSessionsPerInstance: maxSessionsPerInstance, 
            maxUserDurationInSeconds: maxUserDurationInSeconds, 
            name: name, 
            platform: platform, 
            sessionScriptS3Location: sessionScriptS3Location, 
            streamView: streamView, 
            usbDeviceFilterStrings: usbDeviceFilterStrings, 
            vpcConfig: vpcConfig
        )
        return try await self.updateFleet(input, logger: logger)
    }

    /// Adds or updates permissions for the specified private image.
    @Sendable
    @inlinable
    public func updateImagePermissions(_ input: UpdateImagePermissionsRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> UpdateImagePermissionsResult {
        try await self.client.execute(
            operation: "UpdateImagePermissions", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Adds or updates permissions for the specified private image.
    ///
    /// Parameters:
    ///   - imagePermissions: The permissions for the image.
    ///   - name: The name of the private image.
    ///   - sharedAccountId: The 12-digit identifier of the AWS account for which you want add or update image permissions.
    ///   - logger: Logger use during operation
    @inlinable
    public func updateImagePermissions(
        imagePermissions: ImagePermissions? = nil,
        name: String? = nil,
        sharedAccountId: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> UpdateImagePermissionsResult {
        let input = UpdateImagePermissionsRequest(
            imagePermissions: imagePermissions, 
            name: name, 
            sharedAccountId: sharedAccountId
        )
        return try await self.updateImagePermissions(input, logger: logger)
    }

    /// Updates the specified fields for the specified stack.
    @Sendable
    @inlinable
    public func updateStack(_ input: UpdateStackRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> UpdateStackResult {
        try await self.client.execute(
            operation: "UpdateStack", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Updates the specified fields for the specified stack.
    ///
    /// Parameters:
    ///   - accessEndpoints: The list of interface VPC endpoint (interface endpoint) objects. Users of the stack can connect to AppStream 2.0 only through the specified endpoints.
    ///   - applicationSettings: The persistent application settings for users of a stack. When these settings are enabled, changes that users make to applications and Windows settings are automatically saved after each session and applied to the next session.
    ///   - attributesToDelete: The stack attributes to delete.
    ///   - description: The description to display.
    ///   - displayName: The stack name to display.
    ///   - embedHostDomains: The domains where AppStream 2.0 streaming sessions can be embedded in an iframe. You must approve the domains that you want to host embedded AppStream 2.0 streaming sessions.
    ///   - feedbackURL: The URL that users are redirected to after they choose the Send Feedback link. If no URL is specified, no Send Feedback link is displayed.
    ///   - name: The name of the stack.
    ///   - redirectURL: The URL that users are redirected to after their streaming session ends.
    ///   - storageConnectors: The storage connectors to enable.
    ///   - streamingExperienceSettings: The streaming protocol you want your stack to prefer. This can be UDP or TCP. Currently, UDP is only supported in the Windows native client.
    ///   - userSettings: The actions that are enabled or disabled for users during their streaming sessions. By default, these actions are enabled.
    ///   - logger: Logger use during operation
    @inlinable
    public func updateStack(
        accessEndpoints: [AccessEndpoint]? = nil,
        applicationSettings: ApplicationSettings? = nil,
        attributesToDelete: [StackAttribute]? = nil,
        description: String? = nil,
        displayName: String? = nil,
        embedHostDomains: [String]? = nil,
        feedbackURL: String? = nil,
        name: String? = nil,
        redirectURL: String? = nil,
        storageConnectors: [StorageConnector]? = nil,
        streamingExperienceSettings: StreamingExperienceSettings? = nil,
        userSettings: [UserSetting]? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> UpdateStackResult {
        let input = UpdateStackRequest(
            accessEndpoints: accessEndpoints, 
            applicationSettings: applicationSettings, 
            attributesToDelete: attributesToDelete, 
            description: description, 
            displayName: displayName, 
            embedHostDomains: embedHostDomains, 
            feedbackURL: feedbackURL, 
            name: name, 
            redirectURL: redirectURL, 
            storageConnectors: storageConnectors, 
            streamingExperienceSettings: streamingExperienceSettings, 
            userSettings: userSettings
        )
        return try await self.updateStack(input, logger: logger)
    }

    /// Updates custom branding that customizes the appearance of the streaming application catalog page.
    @Sendable
    @inlinable
    public func updateThemeForStack(_ input: UpdateThemeForStackRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> UpdateThemeForStackResult {
        try await self.client.execute(
            operation: "UpdateThemeForStack", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Updates custom branding that customizes the appearance of the streaming application catalog page.
    ///
    /// Parameters:
    ///   - attributesToDelete: The attributes to delete.
    ///   - faviconS3Location: The S3 location of the favicon. The favicon enables users to recognize their application streaming site in a browser full of tabs or bookmarks. It is displayed at the top of the browser tab for the application streaming site during users' streaming sessions.
    ///   - footerLinks: The links that are displayed in the footer of the streaming application catalog page. These links are helpful resources for users, such as the organization's IT support and product marketing sites.
    ///   - organizationLogoS3Location: The organization logo that appears on the streaming application catalog page.
    ///   - stackName: The name of the stack for the theme.
    ///   - state: Specifies whether custom branding should be applied to catalog page or not.
    ///   - themeStyling: The color theme that is applied to website links, text, and buttons. These colors are also applied as accents in the background for the streaming application catalog page.
    ///   - titleText: The title that is displayed at the top of the browser tab during users' application streaming sessions.
    ///   - logger: Logger use during operation
    @inlinable
    public func updateThemeForStack(
        attributesToDelete: [ThemeAttribute]? = nil,
        faviconS3Location: S3Location? = nil,
        footerLinks: [ThemeFooterLink]? = nil,
        organizationLogoS3Location: S3Location? = nil,
        stackName: String? = nil,
        state: ThemeState? = nil,
        themeStyling: ThemeStyling? = nil,
        titleText: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> UpdateThemeForStackResult {
        let input = UpdateThemeForStackRequest(
            attributesToDelete: attributesToDelete, 
            faviconS3Location: faviconS3Location, 
            footerLinks: footerLinks, 
            organizationLogoS3Location: organizationLogoS3Location, 
            stackName: stackName, 
            state: state, 
            themeStyling: themeStyling, 
            titleText: titleText
        )
        return try await self.updateThemeForStack(input, logger: logger)
    }
}

extension AppStream {
    /// Initializer required by `AWSService.with(middlewares:timeout:byteBufferAllocator:options)`. You are not able to use this initializer directly as there are not public
    /// initializers for `AWSServiceConfig.Patch`. Please use `AWSService.with(middlewares:timeout:byteBufferAllocator:options)` instead.
    public init(from: AppStream, patch: AWSServiceConfig.Patch) {
        self.client = from.client
        self.config = from.config.with(patch: patch)
    }
}

// MARK: Paginators

@available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
extension AppStream {
    /// Return PaginatorSequence for operation ``describeAppBlockBuilderAppBlockAssociations(_:logger:)``.
    ///
    /// - Parameters:
    ///   - input: Input for operation
    ///   - logger: Logger used for logging
    @inlinable
    public func describeAppBlockBuilderAppBlockAssociationsPaginator(
        _ input: DescribeAppBlockBuilderAppBlockAssociationsRequest,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<DescribeAppBlockBuilderAppBlockAssociationsRequest, DescribeAppBlockBuilderAppBlockAssociationsResult> {
        return .init(
            input: input,
            command: self.describeAppBlockBuilderAppBlockAssociations,
            inputKey: \DescribeAppBlockBuilderAppBlockAssociationsRequest.nextToken,
            outputKey: \DescribeAppBlockBuilderAppBlockAssociationsResult.nextToken,
            logger: logger
        )
    }
    /// Return PaginatorSequence for operation ``describeAppBlockBuilderAppBlockAssociations(_:logger:)``.
    ///
    /// - Parameters:
    ///   - appBlockArn: The ARN of the app block.
    ///   - appBlockBuilderName: The name of the app block builder.
    ///   - maxResults: The maximum size of each page of results.
    ///   - logger: Logger used for logging
    @inlinable
    public func describeAppBlockBuilderAppBlockAssociationsPaginator(
        appBlockArn: String? = nil,
        appBlockBuilderName: String? = nil,
        maxResults: Int? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) -> AWSClient.PaginatorSequence<DescribeAppBlockBuilderAppBlockAssociationsRequest, DescribeAppBlockBuilderAppBlockAssociationsResult> {
        let input = DescribeAppBlockBuilderAppBlockAssociationsRequest(
            appBlockArn: appBlockArn, 
            appBlockBuilderName: appBlockBuilderName, 
            maxResults: maxResults
        )
        return self.describeAppBlockBuilderAppBlockAssociationsPaginator(input, logger: logger)
    }

    /// Return PaginatorSequence for operation ``describeAppBlockBuilders(_:logger:)``.
    ///
    /// - Parameters:
    ///   - input: Input for operation
    ///   - logger: Logger used for logging
    @inlinable
    public func describeAppBlockBuildersPaginator(
        _ input: DescribeAppBlockBuildersRequest,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<DescribeAppBlockBuildersRequest, DescribeAppBlockBuildersResult> {
        return .init(
            input: input,
            command: self.describeAppBlockBuilders,
            inputKey: \DescribeAppBlockBuildersRequest.nextToken,
            outputKey: \DescribeAppBlockBuildersResult.nextToken,
            logger: logger
        )
    }
    /// Return PaginatorSequence for operation ``describeAppBlockBuilders(_:logger:)``.
    ///
    /// - Parameters:
    ///   - maxResults: The maximum size of each page of results. The maximum value is 25.
    ///   - names: The names of the app block builders.
    ///   - logger: Logger used for logging
    @inlinable
    public func describeAppBlockBuildersPaginator(
        maxResults: Int? = nil,
        names: [String]? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) -> AWSClient.PaginatorSequence<DescribeAppBlockBuildersRequest, DescribeAppBlockBuildersResult> {
        let input = DescribeAppBlockBuildersRequest(
            maxResults: maxResults, 
            names: names
        )
        return self.describeAppBlockBuildersPaginator(input, logger: logger)
    }

    /// Return PaginatorSequence for operation ``describeImagePermissions(_:logger:)``.
    ///
    /// - Parameters:
    ///   - input: Input for operation
    ///   - logger: Logger used for logging
    @inlinable
    public func describeImagePermissionsPaginator(
        _ input: DescribeImagePermissionsRequest,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<DescribeImagePermissionsRequest, DescribeImagePermissionsResult> {
        return .init(
            input: input,
            command: self.describeImagePermissions,
            inputKey: \DescribeImagePermissionsRequest.nextToken,
            outputKey: \DescribeImagePermissionsResult.nextToken,
            logger: logger
        )
    }
    /// Return PaginatorSequence for operation ``describeImagePermissions(_:logger:)``.
    ///
    /// - Parameters:
    ///   - maxResults: The maximum size of each page of results.
    ///   - name: The name of the private image for which to describe permissions. The image must be one that you own.
    ///   - sharedAwsAccountIds: The 12-digit identifier of one or more AWS accounts with which the image is shared.
    ///   - logger: Logger used for logging
    @inlinable
    public func describeImagePermissionsPaginator(
        maxResults: Int? = nil,
        name: String? = nil,
        sharedAwsAccountIds: [String]? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) -> AWSClient.PaginatorSequence<DescribeImagePermissionsRequest, DescribeImagePermissionsResult> {
        let input = DescribeImagePermissionsRequest(
            maxResults: maxResults, 
            name: name, 
            sharedAwsAccountIds: sharedAwsAccountIds
        )
        return self.describeImagePermissionsPaginator(input, logger: logger)
    }

    /// Return PaginatorSequence for operation ``describeImages(_:logger:)``.
    ///
    /// - Parameters:
    ///   - input: Input for operation
    ///   - logger: Logger used for logging
    @inlinable
    public func describeImagesPaginator(
        _ input: DescribeImagesRequest,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<DescribeImagesRequest, DescribeImagesResult> {
        return .init(
            input: input,
            command: self.describeImages,
            inputKey: \DescribeImagesRequest.nextToken,
            outputKey: \DescribeImagesResult.nextToken,
            logger: logger
        )
    }
    /// Return PaginatorSequence for operation ``describeImages(_:logger:)``.
    ///
    /// - Parameters:
    ///   - arns: The ARNs of the public, private, and shared images to describe.
    ///   - maxResults: The maximum size of each page of results.
    ///   - names: The names of the public or private images to describe.
    ///   - type: The type of image (public, private, or shared) to describe.
    ///   - logger: Logger used for logging
    @inlinable
    public func describeImagesPaginator(
        arns: [String]? = nil,
        maxResults: Int? = nil,
        names: [String]? = nil,
        type: VisibilityType? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) -> AWSClient.PaginatorSequence<DescribeImagesRequest, DescribeImagesResult> {
        let input = DescribeImagesRequest(
            arns: arns, 
            maxResults: maxResults, 
            names: names, 
            type: type
        )
        return self.describeImagesPaginator(input, logger: logger)
    }
}

extension AppStream.DescribeAppBlockBuilderAppBlockAssociationsRequest: AWSPaginateToken {
    @inlinable
    public func usingPaginationToken(_ token: String) -> AppStream.DescribeAppBlockBuilderAppBlockAssociationsRequest {
        return .init(
            appBlockArn: self.appBlockArn,
            appBlockBuilderName: self.appBlockBuilderName,
            maxResults: self.maxResults,
            nextToken: token
        )
    }
}

extension AppStream.DescribeAppBlockBuildersRequest: AWSPaginateToken {
    @inlinable
    public func usingPaginationToken(_ token: String) -> AppStream.DescribeAppBlockBuildersRequest {
        return .init(
            maxResults: self.maxResults,
            names: self.names,
            nextToken: token
        )
    }
}

extension AppStream.DescribeImagePermissionsRequest: AWSPaginateToken {
    @inlinable
    public func usingPaginationToken(_ token: String) -> AppStream.DescribeImagePermissionsRequest {
        return .init(
            maxResults: self.maxResults,
            name: self.name,
            nextToken: token,
            sharedAwsAccountIds: self.sharedAwsAccountIds
        )
    }
}

extension AppStream.DescribeImagesRequest: AWSPaginateToken {
    @inlinable
    public func usingPaginationToken(_ token: String) -> AppStream.DescribeImagesRequest {
        return .init(
            arns: self.arns,
            maxResults: self.maxResults,
            names: self.names,
            nextToken: token,
            type: self.type
        )
    }
}

// MARK: Waiters

@available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
extension AppStream {
    /// Waiter for operation ``describeFleets(_:logger:)``.
    ///
    /// - Parameters:
    ///   - input: Input for operation
    ///   - logger: Logger used for logging
    @inlinable
    public func waitUntilFleetStarted(
        _ input: DescribeFleetsRequest,
        maxWaitTime: TimeAmount? = nil,
        logger: Logger = AWSClient.loggingDisabled
    ) async throws {
        let waiter = AWSClient.Waiter<DescribeFleetsRequest, _>(
            acceptors: [
                .init(state: .success, matcher: try! JMESAllPathMatcher("fleets[].state", expected: "RUNNING")),
                .init(state: .failure, matcher: try! JMESAnyPathMatcher("fleets[].state", expected: "STOPPING")),
                .init(state: .failure, matcher: try! JMESAnyPathMatcher("fleets[].state", expected: "STOPPED")),
            ],
            minDelayTime: .seconds(30),
            command: self.describeFleets
        )
        return try await self.client.waitUntil(input, waiter: waiter, maxWaitTime: maxWaitTime, logger: logger)
    }
    /// Waiter for operation ``describeFleets(_:logger:)``.
    ///
    /// - Parameters:
    ///   - names: The names of the fleets to describe.
    ///   - nextToken: The pagination token to use to retrieve the next page of results for this operation. If this value is null, it retrieves the first page.
    ///   - logger: Logger used for logging
    @inlinable
    public func waitUntilFleetStarted(
        names: [String]? = nil,
        nextToken: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws {
        let input = DescribeFleetsRequest(
            names: names, 
            nextToken: nextToken
        )
        try await self.waitUntilFleetStarted(input, logger: logger)
    }

    /// Waiter for operation ``describeFleets(_:logger:)``.
    ///
    /// - Parameters:
    ///   - input: Input for operation
    ///   - logger: Logger used for logging
    @inlinable
    public func waitUntilFleetStopped(
        _ input: DescribeFleetsRequest,
        maxWaitTime: TimeAmount? = nil,
        logger: Logger = AWSClient.loggingDisabled
    ) async throws {
        let waiter = AWSClient.Waiter<DescribeFleetsRequest, _>(
            acceptors: [
                .init(state: .success, matcher: try! JMESAllPathMatcher("fleets[].state", expected: "STOPPED")),
                .init(state: .failure, matcher: try! JMESAnyPathMatcher("fleets[].state", expected: "STARTING")),
                .init(state: .failure, matcher: try! JMESAnyPathMatcher("fleets[].state", expected: "RUNNING")),
            ],
            minDelayTime: .seconds(30),
            command: self.describeFleets
        )
        return try await self.client.waitUntil(input, waiter: waiter, maxWaitTime: maxWaitTime, logger: logger)
    }
    /// Waiter for operation ``describeFleets(_:logger:)``.
    ///
    /// - Parameters:
    ///   - names: The names of the fleets to describe.
    ///   - nextToken: The pagination token to use to retrieve the next page of results for this operation. If this value is null, it retrieves the first page.
    ///   - logger: Logger used for logging
    @inlinable
    public func waitUntilFleetStopped(
        names: [String]? = nil,
        nextToken: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws {
        let input = DescribeFleetsRequest(
            names: names, 
            nextToken: nextToken
        )
        try await self.waitUntilFleetStopped(input, logger: logger)
    }
}
