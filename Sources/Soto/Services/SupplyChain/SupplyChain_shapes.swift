//===----------------------------------------------------------------------===//
//
// This source file is part of the Soto for AWS open source project
//
// Copyright (c) 2017-2023 the Soto project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
// See CONTRIBUTORS.txt for the list of Soto project authors
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by https://github.com/soto-project/soto-codegenerator.
// DO NOT EDIT.

#if os(Linux) && compiler(<5.10)
// swift-corelibs-foundation hasn't been updated with Sendable conformances
@preconcurrency import Foundation
#else
import Foundation
#endif
@_spi(SotoInternal) import SotoCore

extension SupplyChain {
    // MARK: Enums

    public enum ConfigurationJobStatus: String, CustomStringConvertible, Codable, Sendable, CodingKeyRepresentable {
        case failed = "FAILED"
        case inProgress = "IN_PROGRESS"
        case new = "NEW"
        case queued = "QUEUED"
        case success = "SUCCESS"
        public var description: String { return self.rawValue }
    }

    // MARK: Shapes

    public struct BillOfMaterialsImportJob: AWSDecodableShape {
        /// The BillOfMaterialsImportJob instanceId.
        public let instanceId: String
        /// The BillOfMaterialsImportJob jobId.
        public let jobId: String
        /// When the BillOfMaterialsImportJob has reached a terminal state, there will be a message.
        public let message: String?
        /// The S3 URI from which the CSV is read.
        public let s3uri: String
        /// The BillOfMaterialsImportJob ConfigurationJobStatus.
        public let status: ConfigurationJobStatus

        public init(instanceId: String, jobId: String, message: String? = nil, s3uri: String, status: ConfigurationJobStatus) {
            self.instanceId = instanceId
            self.jobId = jobId
            self.message = message
            self.s3uri = s3uri
            self.status = status
        }

        private enum CodingKeys: String, CodingKey {
            case instanceId = "instanceId"
            case jobId = "jobId"
            case message = "message"
            case s3uri = "s3uri"
            case status = "status"
        }
    }

    public struct CreateBillOfMaterialsImportJobRequest: AWSEncodableShape {
        /// An idempotency token.
        public let clientToken: String?
        /// The AWS Supply Chain instance identifier.
        public let instanceId: String
        /// The S3 URI of the CSV file to be imported. The bucket must grant permissions for AWS Supply Chain to read the file.
        public let s3uri: String

        public init(clientToken: String? = CreateBillOfMaterialsImportJobRequest.idempotencyToken(), instanceId: String, s3uri: String) {
            self.clientToken = clientToken
            self.instanceId = instanceId
            self.s3uri = s3uri
        }

        public func encode(to encoder: Encoder) throws {
            let request = encoder.userInfo[.awsRequest]! as! RequestEncodingContainer
            var container = encoder.container(keyedBy: CodingKeys.self)
            try container.encodeIfPresent(self.clientToken, forKey: .clientToken)
            request.encodePath(self.instanceId, key: "instanceId")
            try container.encode(self.s3uri, forKey: .s3uri)
        }

        public func validate(name: String) throws {
            try self.validate(self.clientToken, name: "clientToken", parent: name, max: 126)
            try self.validate(self.clientToken, name: "clientToken", parent: name, min: 33)
            try self.validate(self.instanceId, name: "instanceId", parent: name, max: 36)
            try self.validate(self.instanceId, name: "instanceId", parent: name, min: 36)
            try self.validate(self.instanceId, name: "instanceId", parent: name, pattern: "^[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}$")
            try self.validate(self.s3uri, name: "s3uri", parent: name, min: 10)
            try self.validate(self.s3uri, name: "s3uri", parent: name, pattern: "^[sS]3://[a-z0-9][a-z0-9.-]{1,61}[a-z0-9]/.+$")
        }

        private enum CodingKeys: String, CodingKey {
            case clientToken = "clientToken"
            case s3uri = "s3uri"
        }
    }

    public struct CreateBillOfMaterialsImportJobResponse: AWSDecodableShape {
        /// The new BillOfMaterialsImportJob identifier.
        public let jobId: String

        public init(jobId: String) {
            self.jobId = jobId
        }

        private enum CodingKeys: String, CodingKey {
            case jobId = "jobId"
        }
    }

    public struct GetBillOfMaterialsImportJobRequest: AWSEncodableShape {
        /// The AWS Supply Chain instance identifier.
        public let instanceId: String
        /// The BillOfMaterialsImportJob identifier.
        public let jobId: String

        public init(instanceId: String, jobId: String) {
            self.instanceId = instanceId
            self.jobId = jobId
        }

        public func encode(to encoder: Encoder) throws {
            let request = encoder.userInfo[.awsRequest]! as! RequestEncodingContainer
            _ = encoder.container(keyedBy: CodingKeys.self)
            request.encodePath(self.instanceId, key: "instanceId")
            request.encodePath(self.jobId, key: "jobId")
        }

        public func validate(name: String) throws {
            try self.validate(self.instanceId, name: "instanceId", parent: name, max: 36)
            try self.validate(self.instanceId, name: "instanceId", parent: name, min: 36)
            try self.validate(self.instanceId, name: "instanceId", parent: name, pattern: "^[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}$")
            try self.validate(self.jobId, name: "jobId", parent: name, max: 36)
            try self.validate(self.jobId, name: "jobId", parent: name, min: 36)
            try self.validate(self.jobId, name: "jobId", parent: name, pattern: "^[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}$")
        }

        private enum CodingKeys: CodingKey {}
    }

    public struct GetBillOfMaterialsImportJobResponse: AWSDecodableShape {
        /// The BillOfMaterialsImportJob.
        public let job: BillOfMaterialsImportJob

        public init(job: BillOfMaterialsImportJob) {
            self.job = job
        }

        private enum CodingKeys: String, CodingKey {
            case job = "job"
        }
    }
}

// MARK: - Errors

/// Error enum for SupplyChain
public struct SupplyChainErrorType: AWSErrorType {
    enum Code: String {
        case accessDeniedException = "AccessDeniedException"
        case conflictException = "ConflictException"
        case internalServerException = "InternalServerException"
        case resourceNotFoundException = "ResourceNotFoundException"
        case serviceQuotaExceededException = "ServiceQuotaExceededException"
        case throttlingException = "ThrottlingException"
        case validationException = "ValidationException"
    }

    private let error: Code
    public let context: AWSErrorContext?

    /// initialize SupplyChain
    public init?(errorCode: String, context: AWSErrorContext) {
        guard let error = Code(rawValue: errorCode) else { return nil }
        self.error = error
        self.context = context
    }

    internal init(_ error: Code) {
        self.error = error
        self.context = nil
    }

    /// return error code string
    public var errorCode: String { self.error.rawValue }

    /// You do not have the required privileges to perform this action.
    public static var accessDeniedException: Self { .init(.accessDeniedException) }
    /// Updating or deleting a resource can cause an inconsistent state.
    public static var conflictException: Self { .init(.conflictException) }
    /// Unexpected error during processing of request.
    public static var internalServerException: Self { .init(.internalServerException) }
    /// Request references a resource which does not exist.
    public static var resourceNotFoundException: Self { .init(.resourceNotFoundException) }
    /// Request would cause a service quota to be exceeded.
    public static var serviceQuotaExceededException: Self { .init(.serviceQuotaExceededException) }
    /// Request was denied due to request throttling.
    public static var throttlingException: Self { .init(.throttlingException) }
    /// The input does not satisfy the constraints specified by an AWS service.
    public static var validationException: Self { .init(.validationException) }
}

extension SupplyChainErrorType: Equatable {
    public static func == (lhs: SupplyChainErrorType, rhs: SupplyChainErrorType) -> Bool {
        lhs.error == rhs.error
    }
}

extension SupplyChainErrorType: CustomStringConvertible {
    public var description: String {
        return "\(self.error.rawValue): \(self.message ?? "")"
    }
}
