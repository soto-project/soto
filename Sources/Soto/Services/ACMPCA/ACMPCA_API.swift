//===----------------------------------------------------------------------===//
//
// This source file is part of the Soto for AWS open source project
//
// Copyright (c) 2017-2021 the Soto project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
// See CONTRIBUTORS.txt for the list of Soto project authors
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by https://github.com/soto-project/soto-codegenerator.
// DO NOT EDIT.

@_exported import SotoCore

/// Service object for interacting with AWS ACMPCA service.
///
/// This is the ACM Private CA API Reference. It provides descriptions,
/// 			syntax, and usage examples for each of the actions and data types involved in creating
/// 			and managing private certificate authorities (CA) for your organization.
/// 		       The documentation for each action shows the Query API request parameters and the XML
/// 			response. Alternatively, you can use one of the AWS SDKs to access an API that's
/// 			tailored to the programming language or platform that you're using. For more
/// 			information, see AWS
/// 			SDKs.
/// 		       Each ACM Private CA API operation has a quota that determines the number of times the operation
/// 			can be called per second. ACM Private CA throttles API requests at different rates depending
/// 			on the operation. Throttling means that ACM Private CA rejects an otherwise valid request
/// 			because the request exceeds the operation's quota for the number of requests per second.
/// 			When a request is throttled, ACM Private CA returns a ThrottlingException error. ACM Private CA does not guarantee a minimum request
/// 			rate for APIs.
/// 		       To see an up-to-date list of your ACM Private CA quotas, or to request a quota increase,
/// 			log into your AWS account and visit the Service Quotas
/// 			console.
public struct ACMPCA: AWSService {
    // MARK: Member variables

    /// Client used for communication with AWS
    public let client: AWSClient
    /// Service configuration
    public let config: AWSServiceConfig

    // MARK: Initialization

    /// Initialize the ACMPCA client
    /// - parameters:
    ///     - client: AWSClient used to process requests
    ///     - region: Region of server you want to communicate with. This will override the partition parameter.
    ///     - partition: AWS partition where service resides, standard (.aws), china (.awscn), government (.awsusgov).
    ///     - endpoint: Custom endpoint URL to use instead of standard AWS servers
    ///     - timeout: Timeout value for HTTP requests
    public init(
        client: AWSClient,
        region: SotoCore.Region? = nil,
        partition: AWSPartition = .aws,
        endpoint: String? = nil,
        timeout: TimeAmount? = nil,
        byteBufferAllocator: ByteBufferAllocator = ByteBufferAllocator(),
        options: AWSServiceConfig.Options = []
    ) {
        self.client = client
        self.config = AWSServiceConfig(
            region: region,
            partition: region?.partition ?? partition,
            amzTarget: "ACMPrivateCA",
            service: "acm-pca",
            serviceProtocol: .json(version: "1.1"),
            apiVersion: "2017-08-22",
            endpoint: endpoint,
            errorType: ACMPCAErrorType.self,
            timeout: timeout,
            byteBufferAllocator: byteBufferAllocator,
            options: options
        )
    }

    // MARK: API Calls

    /// Creates a root or subordinate private certificate authority (CA). You must specify the
    /// 			CA configuration, an optional configuration for Online Certificate Status Protocol (OCSP)
    /// 			and/or a certificate revocation list (CRL), the CA type, and
    /// 			an optional idempotency token to avoid accidental creation of multiple CAs. The CA
    /// 			configuration specifies the name of the algorithm and key size to be used to create the
    /// 			CA private key, the type of signing algorithm that the CA uses, and X.500 subject
    /// 			information. The OCSP configuration can optionally specify a custom URL for the OCSP responder.
    /// 			The CRL configuration specifies the CRL expiration period in days (the
    /// 			validity period of the CRL), the Amazon S3 bucket that will contain the CRL, and a CNAME
    /// 			alias for the S3 bucket that is included in certificates issued by the CA. If
    /// 			successful, this action returns the Amazon Resource Name (ARN) of the CA.
    /// 		       ACM Private CA assets that are stored in Amazon S3 can be protected with encryption.  For more information, see Encrypting Your
    /// 			CRLs.   Both PCA and the IAM principal must have permission to write to the S3 bucket that you specify. If the IAM principal making the call does not have permission to write to the bucket, then an exception is thrown. For more information, see Configure Access to ACM Private CA.
    public func createCertificateAuthority(_ input: CreateCertificateAuthorityRequest, logger: Logger = AWSClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<CreateCertificateAuthorityResponse> {
        return self.client.execute(operation: "CreateCertificateAuthority", path: "/", httpMethod: .POST, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// Creates an audit report that lists every time that your CA private key is used. The
    /// 			report is saved in the Amazon S3 bucket that you specify on input.
    ///
    /// 			The IssueCertificate and RevokeCertificate actions use
    /// 			the private key.    Both PCA and the IAM principal must have permission to write to the S3 bucket that you specify. If the IAM principal making the call does not have permission to write to the bucket, then an exception is thrown. For more information, see Configure Access to ACM Private CA.
    ///
    /// 		       ACM Private CA assets that are stored in Amazon S3 can be protected with encryption.  For more information, see Encrypting Your Audit
    /// 				Reports.
    public func createCertificateAuthorityAuditReport(_ input: CreateCertificateAuthorityAuditReportRequest, logger: Logger = AWSClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<CreateCertificateAuthorityAuditReportResponse> {
        return self.client.execute(operation: "CreateCertificateAuthorityAuditReport", path: "/", httpMethod: .POST, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// Grants one or more permissions on a private CA to the AWS Certificate Manager (ACM) service
    /// 			principal (acm.amazonaws.com). These permissions allow ACM to issue and
    /// 			renew ACM certificates that reside in the same AWS account as the CA.
    /// 		       You can list current permissions with the ListPermissions action and
    /// 			revoke them with the DeletePermission action.
    /// 		        About Permissions
    /// 			            If the private CA and the certificates it issues reside in the same
    /// 			account, you can use CreatePermission to grant permissions for ACM to
    /// 			carry out automatic certificate renewals.
    ///
    /// 			            For automatic certificate renewal to succeed, the ACM service principal
    /// 			needs permissions to create, retrieve, and list certificates.
    ///
    /// 			            If the private CA and the ACM certificates reside in different accounts,
    /// 			then permissions cannot be used to enable automatic renewals. Instead,
    /// 			the ACM certificate owner must set up a resource-based policy to enable
    /// 			cross-account issuance and renewals. For more information, see
    /// 			Using a Resource
    /// 			Based Policy with ACM Private CA.
    ///
    @discardableResult public func createPermission(_ input: CreatePermissionRequest, logger: Logger = AWSClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<Void> {
        return self.client.execute(operation: "CreatePermission", path: "/", httpMethod: .POST, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// Deletes a private certificate authority (CA). You must provide the Amazon Resource
    /// 			Name (ARN) of the private CA that you want to delete. You can find the ARN by calling
    /// 			the ListCertificateAuthorities action.
    ///
    /// 			         Deleting a CA will invalidate other CAs and certificates below it in your CA
    /// 				hierarchy.
    ///
    /// 		       Before you can delete a CA that you have created and activated, you must disable it.
    /// 			To do this, call the UpdateCertificateAuthority action and set the CertificateAuthorityStatus parameter to DISABLED.
    /// 		       Additionally, you can delete a CA if you are waiting for it to be created (that is,
    /// 			the status of the CA is CREATING). You can also delete it if the CA has
    /// 			been created but you haven't yet imported the signed certificate into ACM Private CA (that is,
    /// 			the status of the CA is PENDING_CERTIFICATE).
    /// 		       When you successfully call DeleteCertificateAuthority, the CA's status changes to
    /// 			DELETED. However, the CA won't be permanently deleted until the restoration
    /// 			period has passed. By default, if you do not set the
    /// 				PermanentDeletionTimeInDays parameter, the CA remains restorable for 30
    /// 			days. You can set the parameter from 7 to 30 days. The DescribeCertificateAuthority action returns the time remaining in the
    /// 			restoration window of a private CA in the DELETED state. To restore an
    /// 			eligible CA, call the RestoreCertificateAuthority action.
    @discardableResult public func deleteCertificateAuthority(_ input: DeleteCertificateAuthorityRequest, logger: Logger = AWSClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<Void> {
        return self.client.execute(operation: "DeleteCertificateAuthority", path: "/", httpMethod: .POST, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// Revokes permissions on a private CA granted to the AWS Certificate Manager (ACM) service principal
    /// 			(acm.amazonaws.com).
    /// 		       These permissions allow ACM to issue and renew ACM certificates that reside in the
    /// 			same AWS account as the CA. If you revoke these permissions, ACM will no longer
    /// 			renew the affected certificates automatically.
    /// 		       Permissions can be granted with the CreatePermission action and
    /// 			listed with the ListPermissions action.    About Permissions
    /// 			            If the private CA and the certificates it issues reside in the same
    /// 			account, you can use CreatePermission to grant permissions for ACM to
    /// 			carry out automatic certificate renewals.
    ///
    /// 			            For automatic certificate renewal to succeed, the ACM service principal
    /// 			needs permissions to create, retrieve, and list certificates.
    ///
    /// 			            If the private CA and the ACM certificates reside in different accounts,
    /// 			then permissions cannot be used to enable automatic renewals. Instead,
    /// 			the ACM certificate owner must set up a resource-based policy to enable
    /// 			cross-account issuance and renewals. For more information, see
    /// 			Using a Resource
    /// 			Based Policy with ACM Private CA.
    ///
    @discardableResult public func deletePermission(_ input: DeletePermissionRequest, logger: Logger = AWSClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<Void> {
        return self.client.execute(operation: "DeletePermission", path: "/", httpMethod: .POST, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// Deletes the resource-based policy attached to a private CA. Deletion will remove any
    /// 			access that the policy has granted. If there is no policy attached to the private CA,
    /// 			this action will return successful.
    /// 		       If you delete a policy that was applied through AWS Resource Access Manager (RAM), the
    /// 			CA will be removed from all shares in which it was included.
    /// 		       The AWS Certificate Manager Service Linked Role that the policy supports is not affected when you
    /// 			delete the policy.
    /// 		       The current policy can be shown with GetPolicy and updated with PutPolicy.
    /// 		        About Policies
    /// 			            A policy grants access on a private CA to an AWS customer account, to AWS Organizations, or to
    /// 			an AWS Organizations unit. Policies are under the control of a CA administrator. For more information,
    /// 			see Using a Resource Based Policy with ACM Private CA.
    ///
    /// 			            A policy permits a user of AWS Certificate Manager (ACM) to issue ACM certificates
    /// 			signed by a CA in another account.
    ///
    /// 			            For ACM to manage automatic renewal of these certificates,
    /// 			the ACM user must configure a Service Linked Role (SLR). The SLR allows
    /// 			the ACM service to assume the identity of the user, subject to confirmation against the
    /// 			ACM Private CA policy. For more information, see
    /// 			Using a Service Linked Role with ACM.
    ///
    /// 			            Updates made in AWS Resource Manager (RAM) are reflected in policies. For more information,
    /// 			see Attach a Policy for Cross-Account
    /// 			Access.
    ///
    @discardableResult public func deletePolicy(_ input: DeletePolicyRequest, logger: Logger = AWSClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<Void> {
        return self.client.execute(operation: "DeletePolicy", path: "/", httpMethod: .POST, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// Lists information about your private certificate authority (CA) or one that has been
    /// 			shared with you. You specify the private CA on input by its ARN (Amazon Resource Name).
    /// 			The output contains the status of your CA. This can be any of the following:
    ///
    /// 				            CREATING - ACM Private CA is creating your private certificate
    /// 					authority.
    ///
    /// 				            PENDING_CERTIFICATE - The certificate is pending. You must use
    /// 					your ACM Private CA-hosted or on-premises root or subordinate CA to sign your private CA
    /// 					CSR and then import it into PCA.
    ///
    /// 				            ACTIVE - Your private CA is active.
    ///
    /// 				            DISABLED - Your private CA has been disabled.
    ///
    /// 				            EXPIRED - Your private CA certificate has expired.
    ///
    /// 				            FAILED - Your private CA has failed. Your CA can fail because of
    /// 					problems such a network outage or back-end AWS failure or other errors. A
    /// 					failed CA can never return to the pending state. You must create a new CA.
    ///
    ///
    /// 				            DELETED - Your private CA is within the restoration period, after
    /// 					which it is permanently deleted. The length of time remaining in the CA's
    /// 					restoration period is also included in this action's output.
    ///
    public func describeCertificateAuthority(_ input: DescribeCertificateAuthorityRequest, logger: Logger = AWSClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeCertificateAuthorityResponse> {
        return self.client.execute(operation: "DescribeCertificateAuthority", path: "/", httpMethod: .POST, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// Lists information about a specific audit report created by calling the CreateCertificateAuthorityAuditReport action. Audit information is created
    /// 			every time the certificate authority (CA) private key is used. The private key is used
    /// 			when you call the IssueCertificate action or the
    /// 				RevokeCertificate action.
    public func describeCertificateAuthorityAuditReport(_ input: DescribeCertificateAuthorityAuditReportRequest, logger: Logger = AWSClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeCertificateAuthorityAuditReportResponse> {
        return self.client.execute(operation: "DescribeCertificateAuthorityAuditReport", path: "/", httpMethod: .POST, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// Retrieves a certificate from your private CA or one that has been shared with you. The
    /// 			ARN of the certificate is returned when you call the IssueCertificate action. You
    /// 			must specify both the ARN of your private CA and the ARN of the issued certificate when
    /// 			calling the GetCertificate action. You can retrieve the
    /// 			certificate if it is in the ISSUED state. You can call
    /// 			the CreateCertificateAuthorityAuditReport action to create a report that
    /// 			contains information about all of the certificates issued and revoked by your private
    /// 			CA.
    public func getCertificate(_ input: GetCertificateRequest, logger: Logger = AWSClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<GetCertificateResponse> {
        return self.client.execute(operation: "GetCertificate", path: "/", httpMethod: .POST, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// Retrieves the certificate and certificate chain for your private certificate authority
    /// 			(CA) or one that has been shared with you. Both the certificate and the chain are base64
    /// 			PEM-encoded. The chain does not include the CA certificate. Each certificate in the
    /// 			chain signs the one before it.
    public func getCertificateAuthorityCertificate(_ input: GetCertificateAuthorityCertificateRequest, logger: Logger = AWSClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<GetCertificateAuthorityCertificateResponse> {
        return self.client.execute(operation: "GetCertificateAuthorityCertificate", path: "/", httpMethod: .POST, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// Retrieves the certificate signing request (CSR) for your private certificate authority
    /// 			(CA). The CSR is created when you call the CreateCertificateAuthority action. Sign the CSR with your ACM Private CA-hosted or
    /// 			on-premises root or subordinate CA. Then import the signed certificate back into ACM Private CA
    /// 			by calling the ImportCertificateAuthorityCertificate action. The CSR is returned as a
    /// 			base64 PEM-encoded string.
    public func getCertificateAuthorityCsr(_ input: GetCertificateAuthorityCsrRequest, logger: Logger = AWSClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<GetCertificateAuthorityCsrResponse> {
        return self.client.execute(operation: "GetCertificateAuthorityCsr", path: "/", httpMethod: .POST, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// Retrieves the resource-based policy attached to a private CA. If either the private CA
    /// 			resource or the policy cannot be found, this action returns a
    /// 				ResourceNotFoundException.
    /// 		       The policy can be attached or updated with PutPolicy and removed with DeletePolicy.   About Policies
    /// 			            A policy grants access on a private CA to an AWS customer account, to AWS Organizations, or to
    /// 			an AWS Organizations unit. Policies are under the control of a CA administrator. For more information,
    /// 			see Using a Resource Based Policy with ACM Private CA.
    ///
    /// 			            A policy permits a user of AWS Certificate Manager (ACM) to issue ACM certificates
    /// 			signed by a CA in another account.
    ///
    /// 			            For ACM to manage automatic renewal of these certificates,
    /// 			the ACM user must configure a Service Linked Role (SLR). The SLR allows
    /// 			the ACM service to assume the identity of the user, subject to confirmation against the
    /// 			ACM Private CA policy. For more information, see
    /// 			Using a Service Linked Role with ACM.
    ///
    /// 			            Updates made in AWS Resource Manager (RAM) are reflected in policies. For more information,
    /// 			see Attach a Policy for Cross-Account
    /// 			Access.
    ///
    public func getPolicy(_ input: GetPolicyRequest, logger: Logger = AWSClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<GetPolicyResponse> {
        return self.client.execute(operation: "GetPolicy", path: "/", httpMethod: .POST, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// Imports a signed private CA certificate into ACM Private CA. This action is used when you are
    /// 			using a chain of trust whose root is located outside ACM Private CA. Before you can call this
    /// 			action, the following preparations must in place:
    ///
    /// 				           In ACM Private CA, call the CreateCertificateAuthority action to create the private CA that you
    /// 					plan to back with the imported certificate.
    ///
    /// 				           Call the GetCertificateAuthorityCsr action to generate a certificate signing
    /// 					request (CSR).
    ///
    /// 				           Sign the CSR using a root or intermediate CA hosted by either an on-premises
    /// 					PKI hierarchy or by a commercial CA.
    ///
    /// 				           Create a certificate chain and copy the signed certificate and the certificate
    /// 					chain to your working directory.
    ///
    /// 		       ACM Private CA supports three scenarios for installing a CA certificate:
    ///
    /// 				           Installing a certificate for a root CA hosted by ACM Private CA.
    ///
    /// 				           Installing a subordinate CA certificate whose parent authority is hosted by
    /// 					ACM Private CA.
    ///
    /// 				           Installing a subordinate CA certificate whose parent authority is externally
    /// 					hosted.
    ///
    /// 		       The following additional requirements apply when you import a CA certificate.
    ///
    /// 				           Only a self-signed certificate can be imported as a root CA.
    ///
    /// 				           A self-signed certificate cannot be imported as a subordinate CA.
    ///
    /// 				           Your certificate chain must not include the private CA certificate that you
    /// 					are importing.
    ///
    /// 				           Your root CA must be the last certificate in your chain. The subordinate
    /// 					certificate, if any, that your root CA signed must be next to last. The
    /// 					subordinate certificate signed by the preceding subordinate CA must come next,
    /// 					and so on until your chain is built.
    ///
    /// 				           The chain must be PEM-encoded.
    ///
    /// 				           The maximum allowed size of a certificate is 32 KB.
    ///
    /// 				           The maximum allowed size of a certificate chain is 2 MB.
    ///
    /// 		        Enforcement of Critical Constraints
    /// 		       ACM Private CA allows the following extensions to be marked critical in the imported CA
    /// 			certificate or chain.
    ///
    /// 				           Basic constraints (must be marked critical)
    ///
    /// 				           Subject alternative names
    ///
    /// 				           Key usage
    ///
    /// 				           Extended key usage
    ///
    /// 				           Authority key identifier
    ///
    /// 				           Subject key identifier
    ///
    /// 				           Issuer alternative name
    ///
    /// 				           Subject directory attributes
    ///
    /// 				           Subject information access
    ///
    /// 				           Certificate policies
    ///
    /// 				           Policy mappings
    ///
    /// 				           Inhibit anyPolicy
    ///
    /// 		       ACM Private CA rejects the following extensions when they are marked critical in an imported CA
    /// 			certificate or chain.
    ///
    /// 				           Name constraints
    ///
    /// 				           Policy constraints
    ///
    /// 				           CRL distribution points
    ///
    /// 				           Authority information access
    ///
    /// 				           Freshest CRL
    ///
    /// 				           Any other extension
    ///
    @discardableResult public func importCertificateAuthorityCertificate(_ input: ImportCertificateAuthorityCertificateRequest, logger: Logger = AWSClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<Void> {
        return self.client.execute(operation: "ImportCertificateAuthorityCertificate", path: "/", httpMethod: .POST, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// Uses your private certificate authority (CA), or one that has been shared with you, to
    /// 			issue a client certificate. This action returns the Amazon Resource Name (ARN) of the
    /// 			certificate. You can retrieve the certificate by calling the GetCertificate action and
    /// 			specifying the ARN.
    ///
    /// 			         You cannot use the ACM ListCertificateAuthorities action to retrieve the ARNs of the
    /// 				certificates that you issue by using ACM Private CA.
    ///
    public func issueCertificate(_ input: IssueCertificateRequest, logger: Logger = AWSClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<IssueCertificateResponse> {
        return self.client.execute(operation: "IssueCertificate", path: "/", httpMethod: .POST, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// Lists the private certificate authorities that you created by using the CreateCertificateAuthority action.
    public func listCertificateAuthorities(_ input: ListCertificateAuthoritiesRequest, logger: Logger = AWSClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<ListCertificateAuthoritiesResponse> {
        return self.client.execute(operation: "ListCertificateAuthorities", path: "/", httpMethod: .POST, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// List all permissions on a private CA, if any, granted to the AWS Certificate Manager (ACM) service
    /// 			principal (acm.amazonaws.com).
    /// 		       These permissions allow ACM to issue and renew ACM certificates that reside in the
    /// 			same AWS account as the CA.
    /// 		       Permissions can be granted with the CreatePermission action and
    /// 			revoked with the DeletePermission action.
    /// 		        About Permissions
    /// 			            If the private CA and the certificates it issues reside in the same
    /// 			account, you can use CreatePermission to grant permissions for ACM to
    /// 			carry out automatic certificate renewals.
    ///
    /// 			            For automatic certificate renewal to succeed, the ACM service principal
    /// 			needs permissions to create, retrieve, and list certificates.
    ///
    /// 			            If the private CA and the ACM certificates reside in different accounts,
    /// 			then permissions cannot be used to enable automatic renewals. Instead,
    /// 			the ACM certificate owner must set up a resource-based policy to enable
    /// 			cross-account issuance and renewals. For more information, see
    /// 			Using a Resource
    /// 			Based Policy with ACM Private CA.
    ///
    public func listPermissions(_ input: ListPermissionsRequest, logger: Logger = AWSClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<ListPermissionsResponse> {
        return self.client.execute(operation: "ListPermissions", path: "/", httpMethod: .POST, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// Lists the tags, if any, that are associated with your private CA or one that has been
    /// 			shared with you. Tags are labels that you can use to identify and organize your CAs.
    /// 			Each tag consists of a key and an optional value. Call the TagCertificateAuthority
    /// 			action to add one or more tags to your CA. Call the UntagCertificateAuthority action to remove tags.
    public func listTags(_ input: ListTagsRequest, logger: Logger = AWSClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<ListTagsResponse> {
        return self.client.execute(operation: "ListTags", path: "/", httpMethod: .POST, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// Attaches a resource-based policy to a private CA.
    /// 		       A policy can also be applied by sharing a private CA through AWS Resource Access
    /// 			Manager (RAM). For more information, see Attach a Policy for Cross-Account
    /// 			Access.
    /// 		       The policy can be displayed with GetPolicy and removed with DeletePolicy.   About Policies
    /// 			            A policy grants access on a private CA to an AWS customer account, to AWS Organizations, or to
    /// 			an AWS Organizations unit. Policies are under the control of a CA administrator. For more information,
    /// 			see Using a Resource Based Policy with ACM Private CA.
    ///
    /// 			            A policy permits a user of AWS Certificate Manager (ACM) to issue ACM certificates
    /// 			signed by a CA in another account.
    ///
    /// 			            For ACM to manage automatic renewal of these certificates,
    /// 			the ACM user must configure a Service Linked Role (SLR). The SLR allows
    /// 			the ACM service to assume the identity of the user, subject to confirmation against the
    /// 			ACM Private CA policy. For more information, see
    /// 			Using a Service Linked Role with ACM.
    ///
    /// 			            Updates made in AWS Resource Manager (RAM) are reflected in policies. For more information,
    /// 			see Attach a Policy for Cross-Account
    /// 			Access.
    ///
    @discardableResult public func putPolicy(_ input: PutPolicyRequest, logger: Logger = AWSClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<Void> {
        return self.client.execute(operation: "PutPolicy", path: "/", httpMethod: .POST, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// Restores a certificate authority (CA) that is in the DELETED state. You
    /// 			can restore a CA during the period that you defined in the PermanentDeletionTimeInDays parameter of the DeleteCertificateAuthority action. Currently, you can specify 7 to 30 days.
    /// 			If you did not specify a PermanentDeletionTimeInDays
    /// 			value, by default you can restore the CA at any time in a 30 day period. You can check
    /// 			the time remaining in the restoration period of a private CA in the DELETED
    /// 			state by calling the DescribeCertificateAuthority or ListCertificateAuthorities actions. The status of a restored CA is set to
    /// 			its pre-deletion status when the RestoreCertificateAuthority action returns. To change its status to
    /// 				ACTIVE, call the UpdateCertificateAuthority action. If the private CA was in the
    /// 				PENDING_CERTIFICATE state at deletion, you must use the ImportCertificateAuthorityCertificate action to import a certificate
    /// 			authority into the private CA before it can be activated. You cannot restore a CA after
    /// 			the restoration period has ended.
    @discardableResult public func restoreCertificateAuthority(_ input: RestoreCertificateAuthorityRequest, logger: Logger = AWSClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<Void> {
        return self.client.execute(operation: "RestoreCertificateAuthority", path: "/", httpMethod: .POST, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// Revokes a certificate that was issued inside ACM Private CA. If you enable a certificate
    /// 			revocation list (CRL) when you create or update your private CA, information about the
    /// 			revoked certificates will be included in the CRL. ACM Private CA writes the CRL to an S3 bucket
    /// 			that you specify. A CRL is typically updated approximately 30 minutes after a
    /// 			certificate is revoked. If for any reason the CRL update fails, ACM Private CA attempts makes
    /// 			further attempts every 15 minutes. With Amazon CloudWatch, you can create alarms for the
    /// 			metrics CRLGenerated and MisconfiguredCRLBucket. For more
    /// 			information, see Supported CloudWatch Metrics.   Both PCA and the IAM principal must have permission to write to the S3 bucket that you specify. If the IAM principal making the call does not have permission to write to the bucket, then an exception is thrown. For more information, see Configure Access to ACM Private CA.  ACM Private CA also writes
    /// 			revocation information to the audit report. For more information, see CreateCertificateAuthorityAuditReport.
    ///
    /// 			         You cannot revoke a root CA self-signed certificate.
    ///
    @discardableResult public func revokeCertificate(_ input: RevokeCertificateRequest, logger: Logger = AWSClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<Void> {
        return self.client.execute(operation: "RevokeCertificate", path: "/", httpMethod: .POST, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// Adds one or more tags to your private CA. Tags are labels that you can use to identify
    /// 			and organize your AWS resources. Each tag consists of a key and an optional value. You
    /// 			specify the private CA on input by its Amazon Resource Name (ARN). You specify the tag
    /// 			by using a key-value pair. You can apply a tag to just one private CA if you want to
    /// 			identify a specific characteristic of that CA, or you can apply the same tag to multiple
    /// 			private CAs if you want to filter for a common relationship among those CAs. To remove
    /// 			one or more tags, use the UntagCertificateAuthority action. Call the ListTags action to see what tags are
    /// 			associated with your CA.
    @discardableResult public func tagCertificateAuthority(_ input: TagCertificateAuthorityRequest, logger: Logger = AWSClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<Void> {
        return self.client.execute(operation: "TagCertificateAuthority", path: "/", httpMethod: .POST, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// Remove one or more tags from your private CA. A tag consists of a key-value pair. If
    /// 			you do not specify the value portion of the tag when calling this action, the tag will
    /// 			be removed regardless of value. If you specify a value, the tag is removed only if it is
    /// 			associated with the specified value. To add tags to a private CA, use the TagCertificateAuthority. Call the ListTags action to see what tags are
    /// 			associated with your CA.
    @discardableResult public func untagCertificateAuthority(_ input: UntagCertificateAuthorityRequest, logger: Logger = AWSClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<Void> {
        return self.client.execute(operation: "UntagCertificateAuthority", path: "/", httpMethod: .POST, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// Updates the status or configuration of a private certificate authority (CA). Your
    /// 			private CA must be in the ACTIVE or DISABLED state before you
    /// 			can update it. You can disable a private CA that is in the ACTIVE state or
    /// 			make a CA that is in the DISABLED state active again.   Both PCA and the IAM principal must have permission to write to the S3 bucket that you specify. If the IAM principal making the call does not have permission to write to the bucket, then an exception is thrown. For more information, see Configure Access to ACM Private CA.
    @discardableResult public func updateCertificateAuthority(_ input: UpdateCertificateAuthorityRequest, logger: Logger = AWSClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<Void> {
        return self.client.execute(operation: "UpdateCertificateAuthority", path: "/", httpMethod: .POST, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }
}

extension ACMPCA {
    /// Initializer required by `AWSService.with(middlewares:timeout:byteBufferAllocator:options)`. You are not able to use this initializer directly as there are no public
    /// initializers for `AWSServiceConfig.Patch`. Please use `AWSService.with(middlewares:timeout:byteBufferAllocator:options)` instead.
    public init(from: ACMPCA, patch: AWSServiceConfig.Patch) {
        self.client = from.client
        self.config = from.config.with(patch: patch)
    }
}
