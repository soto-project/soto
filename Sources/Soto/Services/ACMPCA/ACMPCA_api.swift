//===----------------------------------------------------------------------===//
//
// This source file is part of the Soto for AWS open source project
//
// Copyright (c) 2017-2024 the Soto project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
// See CONTRIBUTORS.txt for the list of Soto project authors
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by https://github.com/soto-project/soto-codegenerator.
// DO NOT EDIT.

#if os(Linux) && compiler(<5.10)
// swift-corelibs-foundation hasn't been updated with Sendable conformances
@preconcurrency import Foundation
#else
import Foundation
#endif
@_exported import SotoCore

/// Service object for interacting with AWS ACMPCA service.
///
/// This is the Amazon Web Services Private Certificate Authority API Reference. It provides descriptions,
/// 			syntax, and usage examples for each of the actions and data types involved in creating
/// 			and managing a private certificate authority (CA) for your organization. The documentation for each action shows the API request parameters and the JSON
/// 			response. Alternatively, you can use one of the Amazon Web Services SDKs to access an API that is
/// 			tailored to the programming language or platform that you prefer. For more information,
/// 			see Amazon Web Services SDKs. Each Amazon Web Services Private CA API operation has a quota that determines the number of times the
/// 			operation can be called per second. Amazon Web Services Private CA throttles API requests at different rates
/// 			depending on the operation. Throttling means that Amazon Web Services Private CA rejects an otherwise valid
/// 			request because the request exceeds the operation's quota for the number of requests per
/// 			second. When a request is throttled, Amazon Web Services Private CA returns a ThrottlingException error. Amazon Web Services Private CA does not guarantee a minimum request
/// 			rate for APIs.  To see an up-to-date list of your Amazon Web Services Private CA quotas, or to request a quota increase,
/// 			log into your Amazon Web Services account and visit the Service Quotas
/// 			console.
public struct ACMPCA: AWSService {
    // MARK: Member variables

    /// Client used for communication with AWS
    public let client: AWSClient
    /// Service configuration
    public let config: AWSServiceConfig

    // MARK: Initialization

    /// Initialize the ACMPCA client
    /// - parameters:
    ///     - client: AWSClient used to process requests
    ///     - region: Region of server you want to communicate with. This will override the partition parameter.
    ///     - partition: AWS partition where service resides, standard (.aws), china (.awscn), government (.awsusgov).
    ///     - endpoint: Custom endpoint URL to use instead of standard AWS servers
    ///     - middleware: Middleware chain used to edit requests before they are sent and responses before they are decoded 
    ///     - timeout: Timeout value for HTTP requests
    ///     - byteBufferAllocator: Allocator for ByteBuffers
    ///     - options: Service options
    public init(
        client: AWSClient,
        region: SotoCore.Region? = nil,
        partition: AWSPartition = .aws,
        endpoint: String? = nil,
        middleware: AWSMiddlewareProtocol? = nil,
        timeout: TimeAmount? = nil,
        byteBufferAllocator: ByteBufferAllocator = ByteBufferAllocator(),
        options: AWSServiceConfig.Options = []
    ) {
        self.client = client
        self.config = AWSServiceConfig(
            region: region,
            partition: region?.partition ?? partition,
            amzTarget: "ACMPrivateCA",
            serviceName: "ACMPCA",
            serviceIdentifier: "acm-pca",
            serviceProtocol: .json(version: "1.1"),
            apiVersion: "",
            endpoint: endpoint,
            variantEndpoints: Self.variantEndpoints,
            errorType: ACMPCAErrorType.self,
            middleware: middleware,
            timeout: timeout,
            byteBufferAllocator: byteBufferAllocator,
            options: options
        )
    }




    /// FIPS and dualstack endpoints
    static var variantEndpoints: [EndpointVariantType: AWSServiceConfig.EndpointVariant] {[
        [.fips]: .init(endpoints: [
            "ca-central-1": "acm-pca-fips.ca-central-1.amazonaws.com",
            "ca-west-1": "acm-pca-fips.ca-west-1.amazonaws.com",
            "us-east-1": "acm-pca-fips.us-east-1.amazonaws.com",
            "us-east-2": "acm-pca-fips.us-east-2.amazonaws.com",
            "us-gov-east-1": "acm-pca.us-gov-east-1.amazonaws.com",
            "us-gov-west-1": "acm-pca.us-gov-west-1.amazonaws.com",
            "us-west-1": "acm-pca-fips.us-west-1.amazonaws.com",
            "us-west-2": "acm-pca-fips.us-west-2.amazonaws.com"
        ])
    ]}

    // MARK: API Calls

    /// Creates a root or subordinate private certificate authority (CA). You must specify the
    /// 			CA configuration, an optional configuration for Online Certificate Status Protocol
    /// 			(OCSP) and/or a certificate revocation list (CRL), the CA type, and an optional
    /// 			idempotency token to avoid accidental creation of multiple CAs. The CA configuration
    /// 			specifies the name of the algorithm and key size to be used to create the CA private
    /// 			key, the type of signing algorithm that the CA uses, and X.500 subject information. The
    /// 			OCSP configuration can optionally specify a custom URL for the OCSP responder. The CRL
    /// 			configuration specifies the CRL expiration period in days (the validity period of the
    /// 			CRL), the Amazon S3 bucket that will contain the CRL, and a CNAME alias for the S3
    /// 			bucket that is included in certificates issued by the CA. If successful, this action
    /// 			returns the Amazon Resource Name (ARN) of the CA.  Both Amazon Web Services Private CA and the IAM principal must have permission to write to the S3 bucket that you specify. If the IAM principal making the call does not have permission to write to the bucket, then an exception is thrown. For more information, see Access
    /// 						policies for CRLs in Amazon S3.  Amazon Web Services Private CA assets that are stored in Amazon S3 can be protected with encryption.  For more information, see Encrypting Your
    /// 			CRLs.
    @Sendable
    @inlinable
    public func createCertificateAuthority(_ input: CreateCertificateAuthorityRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> CreateCertificateAuthorityResponse {
        try await self.client.execute(
            operation: "CreateCertificateAuthority", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Creates a root or subordinate private certificate authority (CA). You must specify the
    /// 			CA configuration, an optional configuration for Online Certificate Status Protocol
    /// 			(OCSP) and/or a certificate revocation list (CRL), the CA type, and an optional
    /// 			idempotency token to avoid accidental creation of multiple CAs. The CA configuration
    /// 			specifies the name of the algorithm and key size to be used to create the CA private
    /// 			key, the type of signing algorithm that the CA uses, and X.500 subject information. The
    /// 			OCSP configuration can optionally specify a custom URL for the OCSP responder. The CRL
    /// 			configuration specifies the CRL expiration period in days (the validity period of the
    /// 			CRL), the Amazon S3 bucket that will contain the CRL, and a CNAME alias for the S3
    /// 			bucket that is included in certificates issued by the CA. If successful, this action
    /// 			returns the Amazon Resource Name (ARN) of the CA.  Both Amazon Web Services Private CA and the IAM principal must have permission to write to the S3 bucket that you specify. If the IAM principal making the call does not have permission to write to the bucket, then an exception is thrown. For more information, see Access
    /// 						policies for CRLs in Amazon S3.  Amazon Web Services Private CA assets that are stored in Amazon S3 can be protected with encryption.  For more information, see Encrypting Your
    /// 			CRLs.
    ///
    /// Parameters:
    ///   - certificateAuthorityConfiguration: Name and bit size of the private key algorithm, the name of the signing algorithm, and
    ///   - certificateAuthorityType: The type of the certificate authority.
    ///   - idempotencyToken: Custom string that can be used to distinguish between calls to the CreateCertificateAuthority action. Idempotency tokens for
    ///   - keyStorageSecurityStandard: Specifies a cryptographic key management compliance standard used for handling CA
    ///   - revocationConfiguration: Contains information to enable Online Certificate Status Protocol (OCSP) support, to
    ///   - tags: Key-value pairs that will be attached to the new private CA. You can associate up to
    ///   - usageMode: Specifies whether the CA issues general-purpose certificates that typically require a
    ///   - logger: Logger use during operation
    @inlinable
    public func createCertificateAuthority(
        certificateAuthorityConfiguration: CertificateAuthorityConfiguration,
        certificateAuthorityType: CertificateAuthorityType,
        idempotencyToken: String? = nil,
        keyStorageSecurityStandard: KeyStorageSecurityStandard? = nil,
        revocationConfiguration: RevocationConfiguration? = nil,
        tags: [Tag]? = nil,
        usageMode: CertificateAuthorityUsageMode? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> CreateCertificateAuthorityResponse {
        let input = CreateCertificateAuthorityRequest(
            certificateAuthorityConfiguration: certificateAuthorityConfiguration, 
            certificateAuthorityType: certificateAuthorityType, 
            idempotencyToken: idempotencyToken, 
            keyStorageSecurityStandard: keyStorageSecurityStandard, 
            revocationConfiguration: revocationConfiguration, 
            tags: tags, 
            usageMode: usageMode
        )
        return try await self.createCertificateAuthority(input, logger: logger)
    }

    /// Creates an audit report that lists every time that your CA private key is used. The
    /// 			report is saved in the Amazon S3 bucket that you specify on input. The IssueCertificate and RevokeCertificate actions use
    /// 			the private key.   Both Amazon Web Services Private CA and the IAM principal must have permission to write to the S3 bucket that you specify. If the IAM principal making the call does not have permission to write to the bucket, then an exception is thrown. For more information, see Access
    /// 						policies for CRLs in Amazon S3.  Amazon Web Services Private CA assets that are stored in Amazon S3 can be protected with encryption.  For more information, see Encrypting Your Audit
    /// 				Reports.  You can generate a maximum of one report every 30 minutes.
    @Sendable
    @inlinable
    public func createCertificateAuthorityAuditReport(_ input: CreateCertificateAuthorityAuditReportRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> CreateCertificateAuthorityAuditReportResponse {
        try await self.client.execute(
            operation: "CreateCertificateAuthorityAuditReport", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Creates an audit report that lists every time that your CA private key is used. The
    /// 			report is saved in the Amazon S3 bucket that you specify on input. The IssueCertificate and RevokeCertificate actions use
    /// 			the private key.   Both Amazon Web Services Private CA and the IAM principal must have permission to write to the S3 bucket that you specify. If the IAM principal making the call does not have permission to write to the bucket, then an exception is thrown. For more information, see Access
    /// 						policies for CRLs in Amazon S3.  Amazon Web Services Private CA assets that are stored in Amazon S3 can be protected with encryption.  For more information, see Encrypting Your Audit
    /// 				Reports.  You can generate a maximum of one report every 30 minutes.
    ///
    /// Parameters:
    ///   - auditReportResponseFormat: The format in which to create the report. This can be either JSON or CSV.
    ///   - certificateAuthorityArn: The Amazon Resource Name (ARN) of the CA to be audited. This is of the form:  arn:aws:acm-pca:region:account:certificate-authority/12345678-1234-1234-1234-123456789012 .
    ///   - s3BucketName: The name of the S3 bucket that will contain the audit report.
    ///   - logger: Logger use during operation
    @inlinable
    public func createCertificateAuthorityAuditReport(
        auditReportResponseFormat: AuditReportResponseFormat,
        certificateAuthorityArn: String,
        s3BucketName: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> CreateCertificateAuthorityAuditReportResponse {
        let input = CreateCertificateAuthorityAuditReportRequest(
            auditReportResponseFormat: auditReportResponseFormat, 
            certificateAuthorityArn: certificateAuthorityArn, 
            s3BucketName: s3BucketName
        )
        return try await self.createCertificateAuthorityAuditReport(input, logger: logger)
    }

    /// Grants one or more permissions on a private CA to the Certificate Manager (ACM) service
    /// 			principal (acm.amazonaws.com). These permissions allow ACM to issue and
    /// 			renew ACM certificates that reside in the same Amazon Web Services account as the CA. You can list current permissions with the ListPermissions action and
    /// 			revoke them with the DeletePermission action.  About Permissions    If the private CA and the certificates it issues reside in the same
    /// 			account, you can use CreatePermission to grant permissions for ACM to
    /// 			carry out automatic certificate renewals.   For automatic certificate renewal to succeed, the ACM service principal
    /// 			needs permissions to create, retrieve, and list certificates.   If the private CA and the ACM certificates reside in different accounts,
    /// 			then permissions cannot be used to enable automatic renewals. Instead,
    /// 			the ACM certificate owner must set up a resource-based policy to enable
    /// 			cross-account issuance and renewals. For more information, see
    /// 			Using a Resource
    /// 			Based Policy with Amazon Web Services Private CA.
    @Sendable
    @inlinable
    public func createPermission(_ input: CreatePermissionRequest, logger: Logger = AWSClient.loggingDisabled) async throws {
        try await self.client.execute(
            operation: "CreatePermission", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Grants one or more permissions on a private CA to the Certificate Manager (ACM) service
    /// 			principal (acm.amazonaws.com). These permissions allow ACM to issue and
    /// 			renew ACM certificates that reside in the same Amazon Web Services account as the CA. You can list current permissions with the ListPermissions action and
    /// 			revoke them with the DeletePermission action.  About Permissions    If the private CA and the certificates it issues reside in the same
    /// 			account, you can use CreatePermission to grant permissions for ACM to
    /// 			carry out automatic certificate renewals.   For automatic certificate renewal to succeed, the ACM service principal
    /// 			needs permissions to create, retrieve, and list certificates.   If the private CA and the ACM certificates reside in different accounts,
    /// 			then permissions cannot be used to enable automatic renewals. Instead,
    /// 			the ACM certificate owner must set up a resource-based policy to enable
    /// 			cross-account issuance and renewals. For more information, see
    /// 			Using a Resource
    /// 			Based Policy with Amazon Web Services Private CA.
    ///
    /// Parameters:
    ///   - actions: The actions that the specified Amazon Web Services service principal can use. These include
    ///   - certificateAuthorityArn: The Amazon Resource Name (ARN) of the CA that grants the permissions. You can find the
    ///   - principal: The Amazon Web Services service or identity that receives the permission. At this time, the only
    ///   - sourceAccount: The ID of the calling account.
    ///   - logger: Logger use during operation
    @inlinable
    public func createPermission(
        actions: [ActionType],
        certificateAuthorityArn: String,
        principal: String,
        sourceAccount: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws {
        let input = CreatePermissionRequest(
            actions: actions, 
            certificateAuthorityArn: certificateAuthorityArn, 
            principal: principal, 
            sourceAccount: sourceAccount
        )
        return try await self.createPermission(input, logger: logger)
    }

    /// Deletes a private certificate authority (CA). You must provide the Amazon Resource
    /// 			Name (ARN) of the private CA that you want to delete. You can find the ARN by calling
    /// 			the ListCertificateAuthorities action.   Deleting a CA will invalidate other CAs and certificates below it in your CA
    /// 				hierarchy.  Before you can delete a CA that you have created and activated, you must disable it.
    /// 			To do this, call the UpdateCertificateAuthority action and set the CertificateAuthorityStatus parameter to DISABLED.  Additionally, you can delete a CA if you are waiting for it to be created (that is,
    /// 			the status of the CA is CREATING). You can also delete it if the CA has
    /// 			been created but you haven't yet imported the signed certificate into Amazon Web Services Private CA (that
    /// 			is, the status of the CA is PENDING_CERTIFICATE).  When you successfully call DeleteCertificateAuthority, the CA's status changes to
    /// 			DELETED. However, the CA won't be permanently deleted until the restoration
    /// 			period has passed. By default, if you do not set the
    /// 				PermanentDeletionTimeInDays parameter, the CA remains restorable for 30
    /// 			days. You can set the parameter from 7 to 30 days. The DescribeCertificateAuthority action returns the time remaining in the
    /// 			restoration window of a private CA in the DELETED state. To restore an
    /// 			eligible CA, call the RestoreCertificateAuthority action.
    @Sendable
    @inlinable
    public func deleteCertificateAuthority(_ input: DeleteCertificateAuthorityRequest, logger: Logger = AWSClient.loggingDisabled) async throws {
        try await self.client.execute(
            operation: "DeleteCertificateAuthority", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Deletes a private certificate authority (CA). You must provide the Amazon Resource
    /// 			Name (ARN) of the private CA that you want to delete. You can find the ARN by calling
    /// 			the ListCertificateAuthorities action.   Deleting a CA will invalidate other CAs and certificates below it in your CA
    /// 				hierarchy.  Before you can delete a CA that you have created and activated, you must disable it.
    /// 			To do this, call the UpdateCertificateAuthority action and set the CertificateAuthorityStatus parameter to DISABLED.  Additionally, you can delete a CA if you are waiting for it to be created (that is,
    /// 			the status of the CA is CREATING). You can also delete it if the CA has
    /// 			been created but you haven't yet imported the signed certificate into Amazon Web Services Private CA (that
    /// 			is, the status of the CA is PENDING_CERTIFICATE).  When you successfully call DeleteCertificateAuthority, the CA's status changes to
    /// 			DELETED. However, the CA won't be permanently deleted until the restoration
    /// 			period has passed. By default, if you do not set the
    /// 				PermanentDeletionTimeInDays parameter, the CA remains restorable for 30
    /// 			days. You can set the parameter from 7 to 30 days. The DescribeCertificateAuthority action returns the time remaining in the
    /// 			restoration window of a private CA in the DELETED state. To restore an
    /// 			eligible CA, call the RestoreCertificateAuthority action.
    ///
    /// Parameters:
    ///   - certificateAuthorityArn: The Amazon Resource Name (ARN) that was returned when you called CreateCertificateAuthority. This must have the following form:   arn:aws:acm-pca:region:account:certificate-authority/12345678-1234-1234-1234-123456789012 .
    ///   - permanentDeletionTimeInDays: The number of days to make a CA restorable after it has been deleted. This can be
    ///   - logger: Logger use during operation
    @inlinable
    public func deleteCertificateAuthority(
        certificateAuthorityArn: String,
        permanentDeletionTimeInDays: Int? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws {
        let input = DeleteCertificateAuthorityRequest(
            certificateAuthorityArn: certificateAuthorityArn, 
            permanentDeletionTimeInDays: permanentDeletionTimeInDays
        )
        return try await self.deleteCertificateAuthority(input, logger: logger)
    }

    /// Revokes permissions on a private CA granted to the Certificate Manager (ACM) service principal
    /// 			(acm.amazonaws.com).  These permissions allow ACM to issue and renew ACM certificates that reside in the
    /// 			same Amazon Web Services account as the CA. If you revoke these permissions, ACM will no longer
    /// 			renew the affected certificates automatically. Permissions can be granted with the CreatePermission action and
    /// 			listed with the ListPermissions action.   About Permissions    If the private CA and the certificates it issues reside in the same
    /// 			account, you can use CreatePermission to grant permissions for ACM to
    /// 			carry out automatic certificate renewals.   For automatic certificate renewal to succeed, the ACM service principal
    /// 			needs permissions to create, retrieve, and list certificates.   If the private CA and the ACM certificates reside in different accounts,
    /// 			then permissions cannot be used to enable automatic renewals. Instead,
    /// 			the ACM certificate owner must set up a resource-based policy to enable
    /// 			cross-account issuance and renewals. For more information, see
    /// 			Using a Resource
    /// 			Based Policy with Amazon Web Services Private CA.
    @Sendable
    @inlinable
    public func deletePermission(_ input: DeletePermissionRequest, logger: Logger = AWSClient.loggingDisabled) async throws {
        try await self.client.execute(
            operation: "DeletePermission", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Revokes permissions on a private CA granted to the Certificate Manager (ACM) service principal
    /// 			(acm.amazonaws.com).  These permissions allow ACM to issue and renew ACM certificates that reside in the
    /// 			same Amazon Web Services account as the CA. If you revoke these permissions, ACM will no longer
    /// 			renew the affected certificates automatically. Permissions can be granted with the CreatePermission action and
    /// 			listed with the ListPermissions action.   About Permissions    If the private CA and the certificates it issues reside in the same
    /// 			account, you can use CreatePermission to grant permissions for ACM to
    /// 			carry out automatic certificate renewals.   For automatic certificate renewal to succeed, the ACM service principal
    /// 			needs permissions to create, retrieve, and list certificates.   If the private CA and the ACM certificates reside in different accounts,
    /// 			then permissions cannot be used to enable automatic renewals. Instead,
    /// 			the ACM certificate owner must set up a resource-based policy to enable
    /// 			cross-account issuance and renewals. For more information, see
    /// 			Using a Resource
    /// 			Based Policy with Amazon Web Services Private CA.
    ///
    /// Parameters:
    ///   - certificateAuthorityArn: The Amazon Resource Number (ARN) of the private CA that issued the permissions. You
    ///   - principal: The Amazon Web Services service or identity that will have its CA permissions revoked. At this time,
    ///   - sourceAccount: The Amazon Web Services account that calls this action.
    ///   - logger: Logger use during operation
    @inlinable
    public func deletePermission(
        certificateAuthorityArn: String,
        principal: String,
        sourceAccount: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws {
        let input = DeletePermissionRequest(
            certificateAuthorityArn: certificateAuthorityArn, 
            principal: principal, 
            sourceAccount: sourceAccount
        )
        return try await self.deletePermission(input, logger: logger)
    }

    /// Deletes the resource-based policy attached to a private CA. Deletion will remove any
    /// 			access that the policy has granted. If there is no policy attached to the private CA,
    /// 			this action will return successful. If you delete a policy that was applied through Amazon Web Services Resource Access Manager (RAM),
    /// 			the CA will be removed from all shares in which it was included.  The Certificate Manager Service Linked Role that the policy supports is not affected when you
    /// 			delete the policy.  The current policy can be shown with GetPolicy and updated with PutPolicy.  About Policies    A policy grants access on a private CA to an Amazon Web Services customer account, to Amazon Web Services Organizations, or to
    /// 			an Amazon Web Services Organizations unit. Policies are under the control of a CA administrator. For more information,
    /// 			see Using a Resource Based Policy with Amazon Web Services Private CA.   A policy permits a user of Certificate Manager (ACM) to issue ACM certificates
    /// 			signed by a CA in another account.   For ACM to manage automatic renewal of these certificates,
    /// 			the ACM user must configure a Service Linked Role (SLR). The SLR allows
    /// 			the ACM service to assume the identity of the user, subject to confirmation against the
    /// 			Amazon Web Services Private CA policy. For more information, see
    /// 			Using a Service Linked Role with ACM.   Updates made in Amazon Web Services Resource Manager (RAM) are reflected in policies. For more information,
    /// 			see Attach a Policy for Cross-Account
    /// 			Access.
    @Sendable
    @inlinable
    public func deletePolicy(_ input: DeletePolicyRequest, logger: Logger = AWSClient.loggingDisabled) async throws {
        try await self.client.execute(
            operation: "DeletePolicy", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Deletes the resource-based policy attached to a private CA. Deletion will remove any
    /// 			access that the policy has granted. If there is no policy attached to the private CA,
    /// 			this action will return successful. If you delete a policy that was applied through Amazon Web Services Resource Access Manager (RAM),
    /// 			the CA will be removed from all shares in which it was included.  The Certificate Manager Service Linked Role that the policy supports is not affected when you
    /// 			delete the policy.  The current policy can be shown with GetPolicy and updated with PutPolicy.  About Policies    A policy grants access on a private CA to an Amazon Web Services customer account, to Amazon Web Services Organizations, or to
    /// 			an Amazon Web Services Organizations unit. Policies are under the control of a CA administrator. For more information,
    /// 			see Using a Resource Based Policy with Amazon Web Services Private CA.   A policy permits a user of Certificate Manager (ACM) to issue ACM certificates
    /// 			signed by a CA in another account.   For ACM to manage automatic renewal of these certificates,
    /// 			the ACM user must configure a Service Linked Role (SLR). The SLR allows
    /// 			the ACM service to assume the identity of the user, subject to confirmation against the
    /// 			Amazon Web Services Private CA policy. For more information, see
    /// 			Using a Service Linked Role with ACM.   Updates made in Amazon Web Services Resource Manager (RAM) are reflected in policies. For more information,
    /// 			see Attach a Policy for Cross-Account
    /// 			Access.
    ///
    /// Parameters:
    ///   - resourceArn: The Amazon Resource Number (ARN) of the private CA that will have its policy deleted.
    ///   - logger: Logger use during operation
    @inlinable
    public func deletePolicy(
        resourceArn: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws {
        let input = DeletePolicyRequest(
            resourceArn: resourceArn
        )
        return try await self.deletePolicy(input, logger: logger)
    }

    /// Lists information about your private certificate authority (CA) or one that has been
    /// 			shared with you. You specify the private CA on input by its ARN (Amazon Resource Name).
    /// 			The output contains the status of your CA. This can be any of the following:     CREATING - Amazon Web Services Private CA is creating your private certificate
    /// 					authority.    PENDING_CERTIFICATE - The certificate is pending. You must use
    /// 					your Amazon Web Services Private CA-hosted or on-premises root or subordinate CA to sign your
    /// 					private CA CSR and then import it into Amazon Web Services Private CA.     ACTIVE - Your private CA is active.    DISABLED - Your private CA has been disabled.    EXPIRED - Your private CA certificate has expired.    FAILED - Your private CA has failed. Your CA can fail because of
    /// 					problems such a network outage or back-end Amazon Web Services failure or other errors. A
    /// 					failed CA can never return to the pending state. You must create a new CA.
    /// 				    DELETED - Your private CA is within the restoration period, after
    /// 					which it is permanently deleted. The length of time remaining in the CA's
    /// 					restoration period is also included in this action's output.
    @Sendable
    @inlinable
    public func describeCertificateAuthority(_ input: DescribeCertificateAuthorityRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DescribeCertificateAuthorityResponse {
        try await self.client.execute(
            operation: "DescribeCertificateAuthority", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Lists information about your private certificate authority (CA) or one that has been
    /// 			shared with you. You specify the private CA on input by its ARN (Amazon Resource Name).
    /// 			The output contains the status of your CA. This can be any of the following:     CREATING - Amazon Web Services Private CA is creating your private certificate
    /// 					authority.    PENDING_CERTIFICATE - The certificate is pending. You must use
    /// 					your Amazon Web Services Private CA-hosted or on-premises root or subordinate CA to sign your
    /// 					private CA CSR and then import it into Amazon Web Services Private CA.     ACTIVE - Your private CA is active.    DISABLED - Your private CA has been disabled.    EXPIRED - Your private CA certificate has expired.    FAILED - Your private CA has failed. Your CA can fail because of
    /// 					problems such a network outage or back-end Amazon Web Services failure or other errors. A
    /// 					failed CA can never return to the pending state. You must create a new CA.
    /// 				    DELETED - Your private CA is within the restoration period, after
    /// 					which it is permanently deleted. The length of time remaining in the CA's
    /// 					restoration period is also included in this action's output.
    ///
    /// Parameters:
    ///   - certificateAuthorityArn: The Amazon Resource Name (ARN) that was returned when you called CreateCertificateAuthority. This must be of the form:   arn:aws:acm-pca:region:account:certificate-authority/12345678-1234-1234-1234-123456789012 .
    ///   - logger: Logger use during operation
    @inlinable
    public func describeCertificateAuthority(
        certificateAuthorityArn: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> DescribeCertificateAuthorityResponse {
        let input = DescribeCertificateAuthorityRequest(
            certificateAuthorityArn: certificateAuthorityArn
        )
        return try await self.describeCertificateAuthority(input, logger: logger)
    }

    /// Lists information about a specific audit report created by calling the CreateCertificateAuthorityAuditReport action. Audit information is created
    /// 			every time the certificate authority (CA) private key is used. The private key is used
    /// 			when you call the IssueCertificate action or the
    /// 				RevokeCertificate action.
    @Sendable
    @inlinable
    public func describeCertificateAuthorityAuditReport(_ input: DescribeCertificateAuthorityAuditReportRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DescribeCertificateAuthorityAuditReportResponse {
        try await self.client.execute(
            operation: "DescribeCertificateAuthorityAuditReport", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Lists information about a specific audit report created by calling the CreateCertificateAuthorityAuditReport action. Audit information is created
    /// 			every time the certificate authority (CA) private key is used. The private key is used
    /// 			when you call the IssueCertificate action or the
    /// 				RevokeCertificate action.
    ///
    /// Parameters:
    ///   - auditReportId: The report ID returned by calling the CreateCertificateAuthorityAuditReport action.
    ///   - certificateAuthorityArn: The Amazon Resource Name (ARN) of the private CA. This must be of the form:  arn:aws:acm-pca:region:account:certificate-authority/12345678-1234-1234-1234-123456789012 .
    ///   - logger: Logger use during operation
    @inlinable
    public func describeCertificateAuthorityAuditReport(
        auditReportId: String,
        certificateAuthorityArn: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> DescribeCertificateAuthorityAuditReportResponse {
        let input = DescribeCertificateAuthorityAuditReportRequest(
            auditReportId: auditReportId, 
            certificateAuthorityArn: certificateAuthorityArn
        )
        return try await self.describeCertificateAuthorityAuditReport(input, logger: logger)
    }

    /// Retrieves a certificate from your private CA or one that has been shared with you. The
    /// 			ARN of the certificate is returned when you call the IssueCertificate action. You
    /// 			must specify both the ARN of your private CA and the ARN of the issued certificate when
    /// 			calling the GetCertificate action. You can retrieve the
    /// 			certificate if it is in the ISSUED state. You can call
    /// 			the CreateCertificateAuthorityAuditReport action to create a report that
    /// 			contains information about all of the certificates issued and revoked by your private
    /// 			CA.
    @Sendable
    @inlinable
    public func getCertificate(_ input: GetCertificateRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> GetCertificateResponse {
        try await self.client.execute(
            operation: "GetCertificate", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Retrieves a certificate from your private CA or one that has been shared with you. The
    /// 			ARN of the certificate is returned when you call the IssueCertificate action. You
    /// 			must specify both the ARN of your private CA and the ARN of the issued certificate when
    /// 			calling the GetCertificate action. You can retrieve the
    /// 			certificate if it is in the ISSUED state. You can call
    /// 			the CreateCertificateAuthorityAuditReport action to create a report that
    /// 			contains information about all of the certificates issued and revoked by your private
    /// 			CA.
    ///
    /// Parameters:
    ///   - certificateArn: The ARN of the issued certificate. The ARN contains the certificate serial number and
    ///   - certificateAuthorityArn: The Amazon Resource Name (ARN) that was returned when you called CreateCertificateAuthority. This must be of the form:   arn:aws:acm-pca:region:account:certificate-authority/12345678-1234-1234-1234-123456789012 .
    ///   - logger: Logger use during operation
    @inlinable
    public func getCertificate(
        certificateArn: String,
        certificateAuthorityArn: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> GetCertificateResponse {
        let input = GetCertificateRequest(
            certificateArn: certificateArn, 
            certificateAuthorityArn: certificateAuthorityArn
        )
        return try await self.getCertificate(input, logger: logger)
    }

    /// Retrieves the certificate and certificate chain for your private certificate authority
    /// 			(CA) or one that has been shared with you. Both the certificate and the chain are base64
    /// 			PEM-encoded. The chain does not include the CA certificate. Each certificate in the
    /// 			chain signs the one before it.
    @Sendable
    @inlinable
    public func getCertificateAuthorityCertificate(_ input: GetCertificateAuthorityCertificateRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> GetCertificateAuthorityCertificateResponse {
        try await self.client.execute(
            operation: "GetCertificateAuthorityCertificate", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Retrieves the certificate and certificate chain for your private certificate authority
    /// 			(CA) or one that has been shared with you. Both the certificate and the chain are base64
    /// 			PEM-encoded. The chain does not include the CA certificate. Each certificate in the
    /// 			chain signs the one before it.
    ///
    /// Parameters:
    ///   - certificateAuthorityArn: The Amazon Resource Name (ARN) of your private CA. This is of the form:  arn:aws:acm-pca:region:account:certificate-authority/12345678-1234-1234-1234-123456789012 .
    ///   - logger: Logger use during operation
    @inlinable
    public func getCertificateAuthorityCertificate(
        certificateAuthorityArn: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> GetCertificateAuthorityCertificateResponse {
        let input = GetCertificateAuthorityCertificateRequest(
            certificateAuthorityArn: certificateAuthorityArn
        )
        return try await self.getCertificateAuthorityCertificate(input, logger: logger)
    }

    /// Retrieves the certificate signing request (CSR) for your private certificate authority
    /// 			(CA). The CSR is created when you call the CreateCertificateAuthority action. Sign the CSR with your Amazon Web Services Private CA-hosted
    /// 			or on-premises root or subordinate CA. Then import the signed certificate back into
    /// 			Amazon Web Services Private CA by calling the ImportCertificateAuthorityCertificate action. The CSR is returned as a
    /// 			base64 PEM-encoded string.
    @Sendable
    @inlinable
    public func getCertificateAuthorityCsr(_ input: GetCertificateAuthorityCsrRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> GetCertificateAuthorityCsrResponse {
        try await self.client.execute(
            operation: "GetCertificateAuthorityCsr", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Retrieves the certificate signing request (CSR) for your private certificate authority
    /// 			(CA). The CSR is created when you call the CreateCertificateAuthority action. Sign the CSR with your Amazon Web Services Private CA-hosted
    /// 			or on-premises root or subordinate CA. Then import the signed certificate back into
    /// 			Amazon Web Services Private CA by calling the ImportCertificateAuthorityCertificate action. The CSR is returned as a
    /// 			base64 PEM-encoded string.
    ///
    /// Parameters:
    ///   - certificateAuthorityArn: The Amazon Resource Name (ARN) that was returned when you called the CreateCertificateAuthority action. This must be of the form:   arn:aws:acm-pca:region:account:certificate-authority/12345678-1234-1234-1234-123456789012
    ///   - logger: Logger use during operation
    @inlinable
    public func getCertificateAuthorityCsr(
        certificateAuthorityArn: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> GetCertificateAuthorityCsrResponse {
        let input = GetCertificateAuthorityCsrRequest(
            certificateAuthorityArn: certificateAuthorityArn
        )
        return try await self.getCertificateAuthorityCsr(input, logger: logger)
    }

    /// Retrieves the resource-based policy attached to a private CA. If either the private CA
    /// 			resource or the policy cannot be found, this action returns a
    /// 				ResourceNotFoundException.  The policy can be attached or updated with PutPolicy and removed with DeletePolicy.  About Policies    A policy grants access on a private CA to an Amazon Web Services customer account, to Amazon Web Services Organizations, or to
    /// 			an Amazon Web Services Organizations unit. Policies are under the control of a CA administrator. For more information,
    /// 			see Using a Resource Based Policy with Amazon Web Services Private CA.   A policy permits a user of Certificate Manager (ACM) to issue ACM certificates
    /// 			signed by a CA in another account.   For ACM to manage automatic renewal of these certificates,
    /// 			the ACM user must configure a Service Linked Role (SLR). The SLR allows
    /// 			the ACM service to assume the identity of the user, subject to confirmation against the
    /// 			Amazon Web Services Private CA policy. For more information, see
    /// 			Using a Service Linked Role with ACM.   Updates made in Amazon Web Services Resource Manager (RAM) are reflected in policies. For more information,
    /// 			see Attach a Policy for Cross-Account
    /// 			Access.
    @Sendable
    @inlinable
    public func getPolicy(_ input: GetPolicyRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> GetPolicyResponse {
        try await self.client.execute(
            operation: "GetPolicy", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Retrieves the resource-based policy attached to a private CA. If either the private CA
    /// 			resource or the policy cannot be found, this action returns a
    /// 				ResourceNotFoundException.  The policy can be attached or updated with PutPolicy and removed with DeletePolicy.  About Policies    A policy grants access on a private CA to an Amazon Web Services customer account, to Amazon Web Services Organizations, or to
    /// 			an Amazon Web Services Organizations unit. Policies are under the control of a CA administrator. For more information,
    /// 			see Using a Resource Based Policy with Amazon Web Services Private CA.   A policy permits a user of Certificate Manager (ACM) to issue ACM certificates
    /// 			signed by a CA in another account.   For ACM to manage automatic renewal of these certificates,
    /// 			the ACM user must configure a Service Linked Role (SLR). The SLR allows
    /// 			the ACM service to assume the identity of the user, subject to confirmation against the
    /// 			Amazon Web Services Private CA policy. For more information, see
    /// 			Using a Service Linked Role with ACM.   Updates made in Amazon Web Services Resource Manager (RAM) are reflected in policies. For more information,
    /// 			see Attach a Policy for Cross-Account
    /// 			Access.
    ///
    /// Parameters:
    ///   - resourceArn: The Amazon Resource Number (ARN) of the private CA that will have its policy
    ///   - logger: Logger use during operation
    @inlinable
    public func getPolicy(
        resourceArn: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> GetPolicyResponse {
        let input = GetPolicyRequest(
            resourceArn: resourceArn
        )
        return try await self.getPolicy(input, logger: logger)
    }

    /// Imports a signed private CA certificate into Amazon Web Services Private CA. This action is used when you
    /// 			are using a chain of trust whose root is located outside Amazon Web Services Private CA. Before you can call
    /// 			this action, the following preparations must in place:   In Amazon Web Services Private CA, call the CreateCertificateAuthority action to create the private CA that you
    /// 					plan to back with the imported certificate.   Call the GetCertificateAuthorityCsr action to generate a certificate signing
    /// 					request (CSR).   Sign the CSR using a root or intermediate CA hosted by either an on-premises
    /// 					PKI hierarchy or by a commercial CA.   Create a certificate chain and copy the signed certificate and the certificate
    /// 					chain to your working directory.   Amazon Web Services Private CA supports three scenarios for installing a CA certificate:   Installing a certificate for a root CA hosted by Amazon Web Services Private CA.   Installing a subordinate CA certificate whose parent authority is hosted by
    /// 					Amazon Web Services Private CA.   Installing a subordinate CA certificate whose parent authority is externally
    /// 					hosted.   The following additional requirements apply when you import a CA certificate.   Only a self-signed certificate can be imported as a root CA.   A self-signed certificate cannot be imported as a subordinate CA.   Your certificate chain must not include the private CA certificate that you
    /// 					are importing.   Your root CA must be the last certificate in your chain. The subordinate
    /// 					certificate, if any, that your root CA signed must be next to last. The
    /// 					subordinate certificate signed by the preceding subordinate CA must come next,
    /// 					and so on until your chain is built.    The chain must be PEM-encoded.   The maximum allowed size of a certificate is 32 KB.   The maximum allowed size of a certificate chain is 2 MB.    Enforcement of Critical Constraints  Amazon Web Services Private CA allows the following extensions to be marked critical in the imported CA
    /// 			certificate or chain.   Basic constraints (must be marked critical)   Subject alternative names   Key usage   Extended key usage   Authority key identifier   Subject key identifier   Issuer alternative name   Subject directory attributes   Subject information access   Certificate policies   Policy mappings   Inhibit anyPolicy   Amazon Web Services Private CA rejects the following extensions when they are marked critical in an
    /// 			imported CA certificate or chain.   Name constraints   Policy constraints   CRL distribution points   Authority information access   Freshest CRL   Any other extension
    @Sendable
    @inlinable
    public func importCertificateAuthorityCertificate(_ input: ImportCertificateAuthorityCertificateRequest, logger: Logger = AWSClient.loggingDisabled) async throws {
        try await self.client.execute(
            operation: "ImportCertificateAuthorityCertificate", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Imports a signed private CA certificate into Amazon Web Services Private CA. This action is used when you
    /// 			are using a chain of trust whose root is located outside Amazon Web Services Private CA. Before you can call
    /// 			this action, the following preparations must in place:   In Amazon Web Services Private CA, call the CreateCertificateAuthority action to create the private CA that you
    /// 					plan to back with the imported certificate.   Call the GetCertificateAuthorityCsr action to generate a certificate signing
    /// 					request (CSR).   Sign the CSR using a root or intermediate CA hosted by either an on-premises
    /// 					PKI hierarchy or by a commercial CA.   Create a certificate chain and copy the signed certificate and the certificate
    /// 					chain to your working directory.   Amazon Web Services Private CA supports three scenarios for installing a CA certificate:   Installing a certificate for a root CA hosted by Amazon Web Services Private CA.   Installing a subordinate CA certificate whose parent authority is hosted by
    /// 					Amazon Web Services Private CA.   Installing a subordinate CA certificate whose parent authority is externally
    /// 					hosted.   The following additional requirements apply when you import a CA certificate.   Only a self-signed certificate can be imported as a root CA.   A self-signed certificate cannot be imported as a subordinate CA.   Your certificate chain must not include the private CA certificate that you
    /// 					are importing.   Your root CA must be the last certificate in your chain. The subordinate
    /// 					certificate, if any, that your root CA signed must be next to last. The
    /// 					subordinate certificate signed by the preceding subordinate CA must come next,
    /// 					and so on until your chain is built.    The chain must be PEM-encoded.   The maximum allowed size of a certificate is 32 KB.   The maximum allowed size of a certificate chain is 2 MB.    Enforcement of Critical Constraints  Amazon Web Services Private CA allows the following extensions to be marked critical in the imported CA
    /// 			certificate or chain.   Basic constraints (must be marked critical)   Subject alternative names   Key usage   Extended key usage   Authority key identifier   Subject key identifier   Issuer alternative name   Subject directory attributes   Subject information access   Certificate policies   Policy mappings   Inhibit anyPolicy   Amazon Web Services Private CA rejects the following extensions when they are marked critical in an
    /// 			imported CA certificate or chain.   Name constraints   Policy constraints   CRL distribution points   Authority information access   Freshest CRL   Any other extension
    ///
    /// Parameters:
    ///   - certificate: The PEM-encoded certificate for a private CA. This may be a self-signed certificate in
    ///   - certificateAuthorityArn: The Amazon Resource Name (ARN) that was returned when you called CreateCertificateAuthority. This must be of the form:   arn:aws:acm-pca:region:account:certificate-authority/12345678-1234-1234-1234-123456789012
    ///   - certificateChain: A PEM-encoded file that contains all of your certificates, other than the certificate
    ///   - logger: Logger use during operation
    @inlinable
    public func importCertificateAuthorityCertificate(
        certificate: AWSBase64Data,
        certificateAuthorityArn: String,
        certificateChain: AWSBase64Data? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws {
        let input = ImportCertificateAuthorityCertificateRequest(
            certificate: certificate, 
            certificateAuthorityArn: certificateAuthorityArn, 
            certificateChain: certificateChain
        )
        return try await self.importCertificateAuthorityCertificate(input, logger: logger)
    }

    /// Uses your private certificate authority (CA), or one that has been shared with you, to
    /// 			issue a client certificate. This action returns the Amazon Resource Name (ARN) of the
    /// 			certificate. You can retrieve the certificate by calling the GetCertificate action and
    /// 			specifying the ARN.   You cannot use the ACM ListCertificateAuthorities action to retrieve the ARNs of the
    /// 				certificates that you issue by using Amazon Web Services Private CA.
    @Sendable
    @inlinable
    public func issueCertificate(_ input: IssueCertificateRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> IssueCertificateResponse {
        try await self.client.execute(
            operation: "IssueCertificate", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Uses your private certificate authority (CA), or one that has been shared with you, to
    /// 			issue a client certificate. This action returns the Amazon Resource Name (ARN) of the
    /// 			certificate. You can retrieve the certificate by calling the GetCertificate action and
    /// 			specifying the ARN.   You cannot use the ACM ListCertificateAuthorities action to retrieve the ARNs of the
    /// 				certificates that you issue by using Amazon Web Services Private CA.
    ///
    /// Parameters:
    ///   - apiPassthrough: Specifies X.509 certificate information to be included in the issued certificate. An
    ///   - certificateAuthorityArn: The Amazon Resource Name (ARN) that was returned when you called CreateCertificateAuthority. This must be of the form:  arn:aws:acm-pca:region:account:certificate-authority/12345678-1234-1234-1234-123456789012
    ///   - csr: The certificate signing request (CSR) for the certificate you want to issue. As an
    ///   - idempotencyToken: Alphanumeric string that can be used to distinguish between calls to the IssueCertificate action. Idempotency tokens for IssueCertificate time out after five  minutes. Therefore, if
    ///   - signingAlgorithm: The name of the algorithm that will be used to sign the certificate to be issued.  This parameter should not be confused with the SigningAlgorithm parameter
    ///   - templateArn: Specifies a custom configuration template to use when issuing a certificate. If this
    ///   - validity: Information describing the end of the validity period of the certificate. This
    ///   - validityNotBefore: Information describing the start of the validity period of the certificate. This
    ///   - logger: Logger use during operation
    @inlinable
    public func issueCertificate(
        apiPassthrough: ApiPassthrough? = nil,
        certificateAuthorityArn: String,
        csr: AWSBase64Data,
        idempotencyToken: String? = nil,
        signingAlgorithm: SigningAlgorithm,
        templateArn: String? = nil,
        validity: Validity,
        validityNotBefore: Validity? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> IssueCertificateResponse {
        let input = IssueCertificateRequest(
            apiPassthrough: apiPassthrough, 
            certificateAuthorityArn: certificateAuthorityArn, 
            csr: csr, 
            idempotencyToken: idempotencyToken, 
            signingAlgorithm: signingAlgorithm, 
            templateArn: templateArn, 
            validity: validity, 
            validityNotBefore: validityNotBefore
        )
        return try await self.issueCertificate(input, logger: logger)
    }

    /// Lists the private certificate authorities that you created by using the CreateCertificateAuthority action.
    @Sendable
    @inlinable
    public func listCertificateAuthorities(_ input: ListCertificateAuthoritiesRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> ListCertificateAuthoritiesResponse {
        try await self.client.execute(
            operation: "ListCertificateAuthorities", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Lists the private certificate authorities that you created by using the CreateCertificateAuthority action.
    ///
    /// Parameters:
    ///   - maxResults: Use this parameter when paginating results to specify the maximum number of items to
    ///   - nextToken: Use this parameter when paginating results in a subsequent request after you receive a
    ///   - resourceOwner: Use this parameter to filter the returned set of certificate authorities based on
    ///   - logger: Logger use during operation
    @inlinable
    public func listCertificateAuthorities(
        maxResults: Int? = nil,
        nextToken: String? = nil,
        resourceOwner: ResourceOwner? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> ListCertificateAuthoritiesResponse {
        let input = ListCertificateAuthoritiesRequest(
            maxResults: maxResults, 
            nextToken: nextToken, 
            resourceOwner: resourceOwner
        )
        return try await self.listCertificateAuthorities(input, logger: logger)
    }

    /// List all permissions on a private CA, if any, granted to the Certificate Manager (ACM) service
    /// 			principal (acm.amazonaws.com).  These permissions allow ACM to issue and renew ACM certificates that reside in the
    /// 			same Amazon Web Services account as the CA.  Permissions can be granted with the CreatePermission action and
    /// 			revoked with the DeletePermission action.  About Permissions    If the private CA and the certificates it issues reside in the same
    /// 			account, you can use CreatePermission to grant permissions for ACM to
    /// 			carry out automatic certificate renewals.   For automatic certificate renewal to succeed, the ACM service principal
    /// 			needs permissions to create, retrieve, and list certificates.   If the private CA and the ACM certificates reside in different accounts,
    /// 			then permissions cannot be used to enable automatic renewals. Instead,
    /// 			the ACM certificate owner must set up a resource-based policy to enable
    /// 			cross-account issuance and renewals. For more information, see
    /// 			Using a Resource
    /// 			Based Policy with Amazon Web Services Private CA.
    @Sendable
    @inlinable
    public func listPermissions(_ input: ListPermissionsRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> ListPermissionsResponse {
        try await self.client.execute(
            operation: "ListPermissions", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// List all permissions on a private CA, if any, granted to the Certificate Manager (ACM) service
    /// 			principal (acm.amazonaws.com).  These permissions allow ACM to issue and renew ACM certificates that reside in the
    /// 			same Amazon Web Services account as the CA.  Permissions can be granted with the CreatePermission action and
    /// 			revoked with the DeletePermission action.  About Permissions    If the private CA and the certificates it issues reside in the same
    /// 			account, you can use CreatePermission to grant permissions for ACM to
    /// 			carry out automatic certificate renewals.   For automatic certificate renewal to succeed, the ACM service principal
    /// 			needs permissions to create, retrieve, and list certificates.   If the private CA and the ACM certificates reside in different accounts,
    /// 			then permissions cannot be used to enable automatic renewals. Instead,
    /// 			the ACM certificate owner must set up a resource-based policy to enable
    /// 			cross-account issuance and renewals. For more information, see
    /// 			Using a Resource
    /// 			Based Policy with Amazon Web Services Private CA.
    ///
    /// Parameters:
    ///   - certificateAuthorityArn: The Amazon Resource Number (ARN) of the private CA to inspect. You can find the ARN by
    ///   - maxResults: When paginating results, use this parameter to specify the maximum number of items to
    ///   - nextToken: When paginating results, use this parameter in a subsequent request after you receive
    ///   - logger: Logger use during operation
    @inlinable
    public func listPermissions(
        certificateAuthorityArn: String,
        maxResults: Int? = nil,
        nextToken: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> ListPermissionsResponse {
        let input = ListPermissionsRequest(
            certificateAuthorityArn: certificateAuthorityArn, 
            maxResults: maxResults, 
            nextToken: nextToken
        )
        return try await self.listPermissions(input, logger: logger)
    }

    /// Lists the tags, if any, that are associated with your private CA or one that has been
    /// 			shared with you. Tags are labels that you can use to identify and organize your CAs.
    /// 			Each tag consists of a key and an optional value. Call the TagCertificateAuthority
    /// 			action to add one or more tags to your CA. Call the UntagCertificateAuthority action to remove tags.
    @Sendable
    @inlinable
    public func listTags(_ input: ListTagsRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> ListTagsResponse {
        try await self.client.execute(
            operation: "ListTags", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Lists the tags, if any, that are associated with your private CA or one that has been
    /// 			shared with you. Tags are labels that you can use to identify and organize your CAs.
    /// 			Each tag consists of a key and an optional value. Call the TagCertificateAuthority
    /// 			action to add one or more tags to your CA. Call the UntagCertificateAuthority action to remove tags.
    ///
    /// Parameters:
    ///   - certificateAuthorityArn: The Amazon Resource Name (ARN) that was returned when you called the CreateCertificateAuthority action. This must be of the form:   arn:aws:acm-pca:region:account:certificate-authority/12345678-1234-1234-1234-123456789012
    ///   - maxResults: Use this parameter when paginating results to specify the maximum number of items to
    ///   - nextToken: Use this parameter when paginating results in a subsequent request after you receive a
    ///   - logger: Logger use during operation
    @inlinable
    public func listTags(
        certificateAuthorityArn: String,
        maxResults: Int? = nil,
        nextToken: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> ListTagsResponse {
        let input = ListTagsRequest(
            certificateAuthorityArn: certificateAuthorityArn, 
            maxResults: maxResults, 
            nextToken: nextToken
        )
        return try await self.listTags(input, logger: logger)
    }

    /// Attaches a resource-based policy to a private CA.  A policy can also be applied by sharing a private CA through Amazon Web Services Resource Access
    /// 			Manager (RAM). For more information, see Attach a Policy for Cross-Account
    /// 			Access. The policy can be displayed with GetPolicy and removed with DeletePolicy.  About Policies    A policy grants access on a private CA to an Amazon Web Services customer account, to Amazon Web Services Organizations, or to
    /// 			an Amazon Web Services Organizations unit. Policies are under the control of a CA administrator. For more information,
    /// 			see Using a Resource Based Policy with Amazon Web Services Private CA.   A policy permits a user of Certificate Manager (ACM) to issue ACM certificates
    /// 			signed by a CA in another account.   For ACM to manage automatic renewal of these certificates,
    /// 			the ACM user must configure a Service Linked Role (SLR). The SLR allows
    /// 			the ACM service to assume the identity of the user, subject to confirmation against the
    /// 			Amazon Web Services Private CA policy. For more information, see
    /// 			Using a Service Linked Role with ACM.   Updates made in Amazon Web Services Resource Manager (RAM) are reflected in policies. For more information,
    /// 			see Attach a Policy for Cross-Account
    /// 			Access.
    @Sendable
    @inlinable
    public func putPolicy(_ input: PutPolicyRequest, logger: Logger = AWSClient.loggingDisabled) async throws {
        try await self.client.execute(
            operation: "PutPolicy", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Attaches a resource-based policy to a private CA.  A policy can also be applied by sharing a private CA through Amazon Web Services Resource Access
    /// 			Manager (RAM). For more information, see Attach a Policy for Cross-Account
    /// 			Access. The policy can be displayed with GetPolicy and removed with DeletePolicy.  About Policies    A policy grants access on a private CA to an Amazon Web Services customer account, to Amazon Web Services Organizations, or to
    /// 			an Amazon Web Services Organizations unit. Policies are under the control of a CA administrator. For more information,
    /// 			see Using a Resource Based Policy with Amazon Web Services Private CA.   A policy permits a user of Certificate Manager (ACM) to issue ACM certificates
    /// 			signed by a CA in another account.   For ACM to manage automatic renewal of these certificates,
    /// 			the ACM user must configure a Service Linked Role (SLR). The SLR allows
    /// 			the ACM service to assume the identity of the user, subject to confirmation against the
    /// 			Amazon Web Services Private CA policy. For more information, see
    /// 			Using a Service Linked Role with ACM.   Updates made in Amazon Web Services Resource Manager (RAM) are reflected in policies. For more information,
    /// 			see Attach a Policy for Cross-Account
    /// 			Access.
    ///
    /// Parameters:
    ///   - policy: The path and file name of a JSON-formatted IAM policy to attach to the specified
    ///   - resourceArn: The Amazon Resource Number (ARN) of the private CA to associate with the policy. The
    ///   - logger: Logger use during operation
    @inlinable
    public func putPolicy(
        policy: String,
        resourceArn: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws {
        let input = PutPolicyRequest(
            policy: policy, 
            resourceArn: resourceArn
        )
        return try await self.putPolicy(input, logger: logger)
    }

    /// Restores a certificate authority (CA) that is in the DELETED state. You
    /// 			can restore a CA during the period that you defined in the PermanentDeletionTimeInDays parameter of the DeleteCertificateAuthority action. Currently, you can specify 7 to 30 days.
    /// 			If you did not specify a PermanentDeletionTimeInDays
    /// 			value, by default you can restore the CA at any time in a 30 day period. You can check
    /// 			the time remaining in the restoration period of a private CA in the DELETED
    /// 			state by calling the DescribeCertificateAuthority or ListCertificateAuthorities actions. The status of a restored CA is set to
    /// 			its pre-deletion status when the RestoreCertificateAuthority action returns. To change its status to
    /// 				ACTIVE, call the UpdateCertificateAuthority action. If the private CA was in the
    /// 				PENDING_CERTIFICATE state at deletion, you must use the ImportCertificateAuthorityCertificate action to import a certificate
    /// 			authority into the private CA before it can be activated. You cannot restore a CA after
    /// 			the restoration period has ended.
    @Sendable
    @inlinable
    public func restoreCertificateAuthority(_ input: RestoreCertificateAuthorityRequest, logger: Logger = AWSClient.loggingDisabled) async throws {
        try await self.client.execute(
            operation: "RestoreCertificateAuthority", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Restores a certificate authority (CA) that is in the DELETED state. You
    /// 			can restore a CA during the period that you defined in the PermanentDeletionTimeInDays parameter of the DeleteCertificateAuthority action. Currently, you can specify 7 to 30 days.
    /// 			If you did not specify a PermanentDeletionTimeInDays
    /// 			value, by default you can restore the CA at any time in a 30 day period. You can check
    /// 			the time remaining in the restoration period of a private CA in the DELETED
    /// 			state by calling the DescribeCertificateAuthority or ListCertificateAuthorities actions. The status of a restored CA is set to
    /// 			its pre-deletion status when the RestoreCertificateAuthority action returns. To change its status to
    /// 				ACTIVE, call the UpdateCertificateAuthority action. If the private CA was in the
    /// 				PENDING_CERTIFICATE state at deletion, you must use the ImportCertificateAuthorityCertificate action to import a certificate
    /// 			authority into the private CA before it can be activated. You cannot restore a CA after
    /// 			the restoration period has ended.
    ///
    /// Parameters:
    ///   - certificateAuthorityArn: The Amazon Resource Name (ARN) that was returned when you called the CreateCertificateAuthority action. This must be of the form:   arn:aws:acm-pca:region:account:certificate-authority/12345678-1234-1234-1234-123456789012
    ///   - logger: Logger use during operation
    @inlinable
    public func restoreCertificateAuthority(
        certificateAuthorityArn: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws {
        let input = RestoreCertificateAuthorityRequest(
            certificateAuthorityArn: certificateAuthorityArn
        )
        return try await self.restoreCertificateAuthority(input, logger: logger)
    }

    /// Revokes a certificate that was issued inside Amazon Web Services Private CA. If you enable a certificate
    /// 			revocation list (CRL) when you create or update your private CA, information about the
    /// 			revoked certificates will be included in the CRL. Amazon Web Services Private CA writes the CRL to an S3
    /// 			bucket that you specify. A CRL is typically updated approximately 30 minutes after a
    /// 			certificate is revoked. If for any reason the CRL update fails, Amazon Web Services Private CA attempts
    /// 			makes further attempts every 15 minutes. With Amazon CloudWatch, you can create alarms
    /// 			for the metrics CRLGenerated and MisconfiguredCRLBucket. For
    /// 			more information, see Supported CloudWatch Metrics.  Both Amazon Web Services Private CA and the IAM principal must have permission to write to the S3 bucket that you specify. If the IAM principal making the call does not have permission to write to the bucket, then an exception is thrown. For more information, see Access
    /// 						policies for CRLs in Amazon S3.  Amazon Web Services Private CA also writes revocation information to the audit report. For more
    /// 			information, see CreateCertificateAuthorityAuditReport.  You cannot revoke a root CA self-signed certificate.
    @Sendable
    @inlinable
    public func revokeCertificate(_ input: RevokeCertificateRequest, logger: Logger = AWSClient.loggingDisabled) async throws {
        try await self.client.execute(
            operation: "RevokeCertificate", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Revokes a certificate that was issued inside Amazon Web Services Private CA. If you enable a certificate
    /// 			revocation list (CRL) when you create or update your private CA, information about the
    /// 			revoked certificates will be included in the CRL. Amazon Web Services Private CA writes the CRL to an S3
    /// 			bucket that you specify. A CRL is typically updated approximately 30 minutes after a
    /// 			certificate is revoked. If for any reason the CRL update fails, Amazon Web Services Private CA attempts
    /// 			makes further attempts every 15 minutes. With Amazon CloudWatch, you can create alarms
    /// 			for the metrics CRLGenerated and MisconfiguredCRLBucket. For
    /// 			more information, see Supported CloudWatch Metrics.  Both Amazon Web Services Private CA and the IAM principal must have permission to write to the S3 bucket that you specify. If the IAM principal making the call does not have permission to write to the bucket, then an exception is thrown. For more information, see Access
    /// 						policies for CRLs in Amazon S3.  Amazon Web Services Private CA also writes revocation information to the audit report. For more
    /// 			information, see CreateCertificateAuthorityAuditReport.  You cannot revoke a root CA self-signed certificate.
    ///
    /// Parameters:
    ///   - certificateAuthorityArn: Amazon Resource Name (ARN) of the private CA that issued the certificate to be
    ///   - certificateSerial: Serial number of the certificate to be revoked. This must be in hexadecimal format.
    ///   - revocationReason: Specifies why you revoked the certificate.
    ///   - logger: Logger use during operation
    @inlinable
    public func revokeCertificate(
        certificateAuthorityArn: String,
        certificateSerial: String,
        revocationReason: RevocationReason,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws {
        let input = RevokeCertificateRequest(
            certificateAuthorityArn: certificateAuthorityArn, 
            certificateSerial: certificateSerial, 
            revocationReason: revocationReason
        )
        return try await self.revokeCertificate(input, logger: logger)
    }

    /// Adds one or more tags to your private CA. Tags are labels that you can use to identify
    /// 			and organize your Amazon Web Services resources. Each tag consists of a key and an optional value. You
    /// 			specify the private CA on input by its Amazon Resource Name (ARN). You specify the tag
    /// 			by using a key-value pair. You can apply a tag to just one private CA if you want to
    /// 			identify a specific characteristic of that CA, or you can apply the same tag to multiple
    /// 			private CAs if you want to filter for a common relationship among those CAs. To remove
    /// 			one or more tags, use the UntagCertificateAuthority action. Call the ListTags action to see what tags are
    /// 			associated with your CA.   To attach tags to a private CA during the creation procedure, a CA administrator
    /// 				must first associate an inline IAM policy with the
    /// 					CreateCertificateAuthority action and explicitly allow tagging. For
    /// 				more information, see Attaching tags to a CA
    /// 					at the time of creation.
    @Sendable
    @inlinable
    public func tagCertificateAuthority(_ input: TagCertificateAuthorityRequest, logger: Logger = AWSClient.loggingDisabled) async throws {
        try await self.client.execute(
            operation: "TagCertificateAuthority", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Adds one or more tags to your private CA. Tags are labels that you can use to identify
    /// 			and organize your Amazon Web Services resources. Each tag consists of a key and an optional value. You
    /// 			specify the private CA on input by its Amazon Resource Name (ARN). You specify the tag
    /// 			by using a key-value pair. You can apply a tag to just one private CA if you want to
    /// 			identify a specific characteristic of that CA, or you can apply the same tag to multiple
    /// 			private CAs if you want to filter for a common relationship among those CAs. To remove
    /// 			one or more tags, use the UntagCertificateAuthority action. Call the ListTags action to see what tags are
    /// 			associated with your CA.   To attach tags to a private CA during the creation procedure, a CA administrator
    /// 				must first associate an inline IAM policy with the
    /// 					CreateCertificateAuthority action and explicitly allow tagging. For
    /// 				more information, see Attaching tags to a CA
    /// 					at the time of creation.
    ///
    /// Parameters:
    ///   - certificateAuthorityArn: The Amazon Resource Name (ARN) that was returned when you called CreateCertificateAuthority. This must be of the form:   arn:aws:acm-pca:region:account:certificate-authority/12345678-1234-1234-1234-123456789012
    ///   - tags: List of tags to be associated with the CA.
    ///   - logger: Logger use during operation
    @inlinable
    public func tagCertificateAuthority(
        certificateAuthorityArn: String,
        tags: [Tag],
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws {
        let input = TagCertificateAuthorityRequest(
            certificateAuthorityArn: certificateAuthorityArn, 
            tags: tags
        )
        return try await self.tagCertificateAuthority(input, logger: logger)
    }

    /// Remove one or more tags from your private CA. A tag consists of a key-value pair. If
    /// 			you do not specify the value portion of the tag when calling this action, the tag will
    /// 			be removed regardless of value. If you specify a value, the tag is removed only if it is
    /// 			associated with the specified value. To add tags to a private CA, use the TagCertificateAuthority. Call the ListTags action to see what tags are
    /// 			associated with your CA.
    @Sendable
    @inlinable
    public func untagCertificateAuthority(_ input: UntagCertificateAuthorityRequest, logger: Logger = AWSClient.loggingDisabled) async throws {
        try await self.client.execute(
            operation: "UntagCertificateAuthority", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Remove one or more tags from your private CA. A tag consists of a key-value pair. If
    /// 			you do not specify the value portion of the tag when calling this action, the tag will
    /// 			be removed regardless of value. If you specify a value, the tag is removed only if it is
    /// 			associated with the specified value. To add tags to a private CA, use the TagCertificateAuthority. Call the ListTags action to see what tags are
    /// 			associated with your CA.
    ///
    /// Parameters:
    ///   - certificateAuthorityArn: The Amazon Resource Name (ARN) that was returned when you called CreateCertificateAuthority. This must be of the form:   arn:aws:acm-pca:region:account:certificate-authority/12345678-1234-1234-1234-123456789012
    ///   - tags: List of tags to be removed from the CA.
    ///   - logger: Logger use during operation
    @inlinable
    public func untagCertificateAuthority(
        certificateAuthorityArn: String,
        tags: [Tag],
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws {
        let input = UntagCertificateAuthorityRequest(
            certificateAuthorityArn: certificateAuthorityArn, 
            tags: tags
        )
        return try await self.untagCertificateAuthority(input, logger: logger)
    }

    /// Updates the status or configuration of a private certificate authority (CA). Your
    /// 			private CA must be in the ACTIVE or DISABLED state before you
    /// 			can update it. You can disable a private CA that is in the ACTIVE state or
    /// 			make a CA that is in the DISABLED state active again.  Both Amazon Web Services Private CA and the IAM principal must have permission to write to the S3 bucket that you specify. If the IAM principal making the call does not have permission to write to the bucket, then an exception is thrown. For more information, see Access
    /// 						policies for CRLs in Amazon S3.
    @Sendable
    @inlinable
    public func updateCertificateAuthority(_ input: UpdateCertificateAuthorityRequest, logger: Logger = AWSClient.loggingDisabled) async throws {
        try await self.client.execute(
            operation: "UpdateCertificateAuthority", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Updates the status or configuration of a private certificate authority (CA). Your
    /// 			private CA must be in the ACTIVE or DISABLED state before you
    /// 			can update it. You can disable a private CA that is in the ACTIVE state or
    /// 			make a CA that is in the DISABLED state active again.  Both Amazon Web Services Private CA and the IAM principal must have permission to write to the S3 bucket that you specify. If the IAM principal making the call does not have permission to write to the bucket, then an exception is thrown. For more information, see Access
    /// 						policies for CRLs in Amazon S3.
    ///
    /// Parameters:
    ///   - certificateAuthorityArn: Amazon Resource Name (ARN) of the private CA that issued the certificate to be
    ///   - revocationConfiguration: Contains information to enable Online Certificate Status Protocol (OCSP) support, to
    ///   - status: Status of your private CA.
    ///   - logger: Logger use during operation
    @inlinable
    public func updateCertificateAuthority(
        certificateAuthorityArn: String,
        revocationConfiguration: RevocationConfiguration? = nil,
        status: CertificateAuthorityStatus? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws {
        let input = UpdateCertificateAuthorityRequest(
            certificateAuthorityArn: certificateAuthorityArn, 
            revocationConfiguration: revocationConfiguration, 
            status: status
        )
        return try await self.updateCertificateAuthority(input, logger: logger)
    }
}

extension ACMPCA {
    /// Initializer required by `AWSService.with(middlewares:timeout:byteBufferAllocator:options)`. You are not able to use this initializer directly as there are not public
    /// initializers for `AWSServiceConfig.Patch`. Please use `AWSService.with(middlewares:timeout:byteBufferAllocator:options)` instead.
    public init(from: ACMPCA, patch: AWSServiceConfig.Patch) {
        self.client = from.client
        self.config = from.config.with(patch: patch)
    }
}

// MARK: Paginators

@available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
extension ACMPCA {
    /// Return PaginatorSequence for operation ``listCertificateAuthorities(_:logger:)``.
    ///
    /// - Parameters:
    ///   - input: Input for operation
    ///   - logger: Logger used for logging
    @inlinable
    public func listCertificateAuthoritiesPaginator(
        _ input: ListCertificateAuthoritiesRequest,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<ListCertificateAuthoritiesRequest, ListCertificateAuthoritiesResponse> {
        return .init(
            input: input,
            command: self.listCertificateAuthorities,
            inputKey: \ListCertificateAuthoritiesRequest.nextToken,
            outputKey: \ListCertificateAuthoritiesResponse.nextToken,
            logger: logger
        )
    }
    /// Return PaginatorSequence for operation ``listCertificateAuthorities(_:logger:)``.
    ///
    /// - Parameters:
    ///   - maxResults: Use this parameter when paginating results to specify the maximum number of items to
    ///   - resourceOwner: Use this parameter to filter the returned set of certificate authorities based on
    ///   - logger: Logger used for logging
    @inlinable
    public func listCertificateAuthoritiesPaginator(
        maxResults: Int? = nil,
        resourceOwner: ResourceOwner? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) -> AWSClient.PaginatorSequence<ListCertificateAuthoritiesRequest, ListCertificateAuthoritiesResponse> {
        let input = ListCertificateAuthoritiesRequest(
            maxResults: maxResults, 
            resourceOwner: resourceOwner
        )
        return self.listCertificateAuthoritiesPaginator(input, logger: logger)
    }

    /// Return PaginatorSequence for operation ``listPermissions(_:logger:)``.
    ///
    /// - Parameters:
    ///   - input: Input for operation
    ///   - logger: Logger used for logging
    @inlinable
    public func listPermissionsPaginator(
        _ input: ListPermissionsRequest,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<ListPermissionsRequest, ListPermissionsResponse> {
        return .init(
            input: input,
            command: self.listPermissions,
            inputKey: \ListPermissionsRequest.nextToken,
            outputKey: \ListPermissionsResponse.nextToken,
            logger: logger
        )
    }
    /// Return PaginatorSequence for operation ``listPermissions(_:logger:)``.
    ///
    /// - Parameters:
    ///   - certificateAuthorityArn: The Amazon Resource Number (ARN) of the private CA to inspect. You can find the ARN by
    ///   - maxResults: When paginating results, use this parameter to specify the maximum number of items to
    ///   - logger: Logger used for logging
    @inlinable
    public func listPermissionsPaginator(
        certificateAuthorityArn: String,
        maxResults: Int? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) -> AWSClient.PaginatorSequence<ListPermissionsRequest, ListPermissionsResponse> {
        let input = ListPermissionsRequest(
            certificateAuthorityArn: certificateAuthorityArn, 
            maxResults: maxResults
        )
        return self.listPermissionsPaginator(input, logger: logger)
    }

    /// Return PaginatorSequence for operation ``listTags(_:logger:)``.
    ///
    /// - Parameters:
    ///   - input: Input for operation
    ///   - logger: Logger used for logging
    @inlinable
    public func listTagsPaginator(
        _ input: ListTagsRequest,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<ListTagsRequest, ListTagsResponse> {
        return .init(
            input: input,
            command: self.listTags,
            inputKey: \ListTagsRequest.nextToken,
            outputKey: \ListTagsResponse.nextToken,
            logger: logger
        )
    }
    /// Return PaginatorSequence for operation ``listTags(_:logger:)``.
    ///
    /// - Parameters:
    ///   - certificateAuthorityArn: The Amazon Resource Name (ARN) that was returned when you called the CreateCertificateAuthority action. This must be of the form:   arn:aws:acm-pca:region:account:certificate-authority/12345678-1234-1234-1234-123456789012
    ///   - maxResults: Use this parameter when paginating results to specify the maximum number of items to
    ///   - logger: Logger used for logging
    @inlinable
    public func listTagsPaginator(
        certificateAuthorityArn: String,
        maxResults: Int? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) -> AWSClient.PaginatorSequence<ListTagsRequest, ListTagsResponse> {
        let input = ListTagsRequest(
            certificateAuthorityArn: certificateAuthorityArn, 
            maxResults: maxResults
        )
        return self.listTagsPaginator(input, logger: logger)
    }
}

extension ACMPCA.ListCertificateAuthoritiesRequest: AWSPaginateToken {
    @inlinable
    public func usingPaginationToken(_ token: String) -> ACMPCA.ListCertificateAuthoritiesRequest {
        return .init(
            maxResults: self.maxResults,
            nextToken: token,
            resourceOwner: self.resourceOwner
        )
    }
}

extension ACMPCA.ListPermissionsRequest: AWSPaginateToken {
    @inlinable
    public func usingPaginationToken(_ token: String) -> ACMPCA.ListPermissionsRequest {
        return .init(
            certificateAuthorityArn: self.certificateAuthorityArn,
            maxResults: self.maxResults,
            nextToken: token
        )
    }
}

extension ACMPCA.ListTagsRequest: AWSPaginateToken {
    @inlinable
    public func usingPaginationToken(_ token: String) -> ACMPCA.ListTagsRequest {
        return .init(
            certificateAuthorityArn: self.certificateAuthorityArn,
            maxResults: self.maxResults,
            nextToken: token
        )
    }
}

// MARK: Waiters

@available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
extension ACMPCA {
    /// Waiter for operation ``describeCertificateAuthorityAuditReport(_:logger:)``.
    ///
    /// - Parameters:
    ///   - input: Input for operation
    ///   - logger: Logger used for logging
    @inlinable
    public func waitUntilAuditReportCreated(
        _ input: DescribeCertificateAuthorityAuditReportRequest,
        maxWaitTime: TimeAmount? = nil,
        logger: Logger = AWSClient.loggingDisabled
    ) async throws {
        let waiter = AWSClient.Waiter<DescribeCertificateAuthorityAuditReportRequest, _>(
            acceptors: [
                .init(state: .success, matcher: try! JMESPathMatcher("auditReportStatus", expected: "SUCCESS")),
                .init(state: .failure, matcher: try! JMESPathMatcher("auditReportStatus", expected: "FAILED")),
                .init(state: .failure, matcher: AWSErrorCodeMatcher("AccessDeniedException")),
            ],
            minDelayTime: .seconds(3),
            maxDelayTime: .seconds(180),
            command: self.describeCertificateAuthorityAuditReport
        )
        return try await self.client.waitUntil(input, waiter: waiter, maxWaitTime: maxWaitTime, logger: logger)
    }
    /// Waiter for operation ``describeCertificateAuthorityAuditReport(_:logger:)``.
    ///
    /// - Parameters:
    ///   - auditReportId: The report ID returned by calling the CreateCertificateAuthorityAuditReport action.
    ///   - certificateAuthorityArn: The Amazon Resource Name (ARN) of the private CA. This must be of the form:  arn:aws:acm-pca:region:account:certificate-authority/12345678-1234-1234-1234-123456789012 .
    ///   - logger: Logger used for logging
    @inlinable
    public func waitUntilAuditReportCreated(
        auditReportId: String,
        certificateAuthorityArn: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws {
        let input = DescribeCertificateAuthorityAuditReportRequest(
            auditReportId: auditReportId, 
            certificateAuthorityArn: certificateAuthorityArn
        )
        try await self.waitUntilAuditReportCreated(input, logger: logger)
    }

    /// Waiter for operation ``getCertificateAuthorityCsr(_:logger:)``.
    ///
    /// - Parameters:
    ///   - input: Input for operation
    ///   - logger: Logger used for logging
    @inlinable
    public func waitUntilCertificateAuthorityCSRCreated(
        _ input: GetCertificateAuthorityCsrRequest,
        maxWaitTime: TimeAmount? = nil,
        logger: Logger = AWSClient.loggingDisabled
    ) async throws {
        let waiter = AWSClient.Waiter<GetCertificateAuthorityCsrRequest, _>(
            acceptors: [
                .init(state: .success, matcher: AWSSuccessMatcher()),
                .init(state: .retry, matcher: AWSErrorCodeMatcher("RequestInProgressException")),
                .init(state: .failure, matcher: AWSErrorCodeMatcher("AccessDeniedException")),
            ],
            minDelayTime: .seconds(3),
            maxDelayTime: .seconds(180),
            command: self.getCertificateAuthorityCsr
        )
        return try await self.client.waitUntil(input, waiter: waiter, maxWaitTime: maxWaitTime, logger: logger)
    }
    /// Waiter for operation ``getCertificateAuthorityCsr(_:logger:)``.
    ///
    /// - Parameters:
    ///   - certificateAuthorityArn: The Amazon Resource Name (ARN) that was returned when you called the CreateCertificateAuthority action. This must be of the form:   arn:aws:acm-pca:region:account:certificate-authority/12345678-1234-1234-1234-123456789012
    ///   - logger: Logger used for logging
    @inlinable
    public func waitUntilCertificateAuthorityCSRCreated(
        certificateAuthorityArn: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws {
        let input = GetCertificateAuthorityCsrRequest(
            certificateAuthorityArn: certificateAuthorityArn
        )
        try await self.waitUntilCertificateAuthorityCSRCreated(input, logger: logger)
    }

    /// Waiter for operation ``getCertificate(_:logger:)``.
    ///
    /// - Parameters:
    ///   - input: Input for operation
    ///   - logger: Logger used for logging
    @inlinable
    public func waitUntilCertificateIssued(
        _ input: GetCertificateRequest,
        maxWaitTime: TimeAmount? = nil,
        logger: Logger = AWSClient.loggingDisabled
    ) async throws {
        let waiter = AWSClient.Waiter<GetCertificateRequest, _>(
            acceptors: [
                .init(state: .success, matcher: AWSSuccessMatcher()),
                .init(state: .retry, matcher: AWSErrorCodeMatcher("RequestInProgressException")),
                .init(state: .failure, matcher: AWSErrorCodeMatcher("AccessDeniedException")),
            ],
            minDelayTime: .seconds(1),
            maxDelayTime: .seconds(60),
            command: self.getCertificate
        )
        return try await self.client.waitUntil(input, waiter: waiter, maxWaitTime: maxWaitTime, logger: logger)
    }
    /// Waiter for operation ``getCertificate(_:logger:)``.
    ///
    /// - Parameters:
    ///   - certificateArn: The ARN of the issued certificate. The ARN contains the certificate serial number and
    ///   - certificateAuthorityArn: The Amazon Resource Name (ARN) that was returned when you called CreateCertificateAuthority. This must be of the form:   arn:aws:acm-pca:region:account:certificate-authority/12345678-1234-1234-1234-123456789012 .
    ///   - logger: Logger used for logging
    @inlinable
    public func waitUntilCertificateIssued(
        certificateArn: String,
        certificateAuthorityArn: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws {
        let input = GetCertificateRequest(
            certificateArn: certificateArn, 
            certificateAuthorityArn: certificateAuthorityArn
        )
        try await self.waitUntilCertificateIssued(input, logger: logger)
    }
}
