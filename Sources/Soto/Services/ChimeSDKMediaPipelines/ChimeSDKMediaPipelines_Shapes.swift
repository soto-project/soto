//===----------------------------------------------------------------------===//
//
// This source file is part of the Soto for AWS open source project
//
// Copyright (c) 2017-2021 the Soto project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
// See CONTRIBUTORS.txt for the list of Soto project authors
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by https://github.com/soto-project/soto-codegenerator.
// DO NOT EDIT.

import Foundation
import SotoCore

extension ChimeSDKMediaPipelines {
    // MARK: Enums

    public enum ArtifactsState: String, CustomStringConvertible, Codable, _SotoSendable {
        case disabled = "Disabled"
        case enabled = "Enabled"
        public var description: String { return self.rawValue }
    }

    public enum AudioMuxType: String, CustomStringConvertible, Codable, _SotoSendable {
        case audioOnly = "AudioOnly"
        case audioWithActiveSpeakerVideo = "AudioWithActiveSpeakerVideo"
        public var description: String { return self.rawValue }
    }

    public enum ContentMuxType: String, CustomStringConvertible, Codable, _SotoSendable {
        case contentOnly = "ContentOnly"
        public var description: String { return self.rawValue }
    }

    public enum MediaPipelineSinkType: String, CustomStringConvertible, Codable, _SotoSendable {
        case s3Bucket = "S3Bucket"
        public var description: String { return self.rawValue }
    }

    public enum MediaPipelineSourceType: String, CustomStringConvertible, Codable, _SotoSendable {
        case chimeSdkMeeting = "ChimeSdkMeeting"
        public var description: String { return self.rawValue }
    }

    public enum MediaPipelineStatus: String, CustomStringConvertible, Codable, _SotoSendable {
        case failed = "Failed"
        case inProgress = "InProgress"
        case initializing = "Initializing"
        case stopped = "Stopped"
        case stopping = "Stopping"
        public var description: String { return self.rawValue }
    }

    public enum VideoMuxType: String, CustomStringConvertible, Codable, _SotoSendable {
        case videoOnly = "VideoOnly"
        public var description: String { return self.rawValue }
    }

    // MARK: Shapes

    public struct ArtifactsConfiguration: AWSEncodableShape & AWSDecodableShape {
        /// The configuration for the audio artifacts.
        public let audio: AudioArtifactsConfiguration
        /// The configuration for the content artifacts.
        public let content: ContentArtifactsConfiguration
        /// The configuration for the video artifacts.
        public let video: VideoArtifactsConfiguration

        public init(audio: AudioArtifactsConfiguration, content: ContentArtifactsConfiguration, video: VideoArtifactsConfiguration) {
            self.audio = audio
            self.content = content
            self.video = video
        }

        private enum CodingKeys: String, CodingKey {
            case audio = "Audio"
            case content = "Content"
            case video = "Video"
        }
    }

    public struct AudioArtifactsConfiguration: AWSEncodableShape & AWSDecodableShape {
        /// The MUX type of the audio artifact configuration object.
        public let muxType: AudioMuxType

        public init(muxType: AudioMuxType) {
            self.muxType = muxType
        }

        private enum CodingKeys: String, CodingKey {
            case muxType = "MuxType"
        }
    }

    public struct ChimeSdkMeetingConfiguration: AWSEncodableShape & AWSDecodableShape {
        /// The configuration for the artifacts in an Amazon Chime SDK meeting.
        public let artifactsConfiguration: ArtifactsConfiguration?
        /// The source configuration for a specified media capture pipline.
        public let sourceConfiguration: SourceConfiguration?

        public init(artifactsConfiguration: ArtifactsConfiguration? = nil, sourceConfiguration: SourceConfiguration? = nil) {
            self.artifactsConfiguration = artifactsConfiguration
            self.sourceConfiguration = sourceConfiguration
        }

        public func validate(name: String) throws {
            try self.sourceConfiguration?.validate(name: "\(name).sourceConfiguration")
        }

        private enum CodingKeys: String, CodingKey {
            case artifactsConfiguration = "ArtifactsConfiguration"
            case sourceConfiguration = "SourceConfiguration"
        }
    }

    public struct ContentArtifactsConfiguration: AWSEncodableShape & AWSDecodableShape {
        /// The MUX type of the artifact configuration.
        public let muxType: ContentMuxType?
        /// Indicates whether the content artifact is enabled or disabled.
        public let state: ArtifactsState

        public init(muxType: ContentMuxType? = nil, state: ArtifactsState) {
            self.muxType = muxType
            self.state = state
        }

        private enum CodingKeys: String, CodingKey {
            case muxType = "MuxType"
            case state = "State"
        }
    }

    public struct CreateMediaCapturePipelineRequest: AWSEncodableShape {
        /// The configuration for a specified media capture pipeline. SourceType must be ChimeSdkMeeting.
        public let chimeSdkMeetingConfiguration: ChimeSdkMeetingConfiguration?
        /// The token assigned to the client making the pipeline request.
        public let clientRequestToken: String?
        /// The ARN of the sink type.
        public let sinkArn: String
        /// Destination type to which the media artifacts are saved. You must use an S3 bucket.
        public let sinkType: MediaPipelineSinkType
        /// ARN of the source from which the media artifacts are captured.
        public let sourceArn: String
        /// Source type from which the media artifacts are captured. A Chime SDK Meeting  is the only supported source.
        public let sourceType: MediaPipelineSourceType
        /// The list of tags.
        public let tags: [Tag]?

        public init(chimeSdkMeetingConfiguration: ChimeSdkMeetingConfiguration? = nil, clientRequestToken: String? = CreateMediaCapturePipelineRequest.idempotencyToken(), sinkArn: String, sinkType: MediaPipelineSinkType, sourceArn: String, sourceType: MediaPipelineSourceType, tags: [Tag]? = nil) {
            self.chimeSdkMeetingConfiguration = chimeSdkMeetingConfiguration
            self.clientRequestToken = clientRequestToken
            self.sinkArn = sinkArn
            self.sinkType = sinkType
            self.sourceArn = sourceArn
            self.sourceType = sourceType
            self.tags = tags
        }

        public func validate(name: String) throws {
            try self.chimeSdkMeetingConfiguration?.validate(name: "\(name).chimeSdkMeetingConfiguration")
            try self.validate(self.clientRequestToken, name: "clientRequestToken", parent: name, max: 64)
            try self.validate(self.clientRequestToken, name: "clientRequestToken", parent: name, min: 2)
            try self.validate(self.clientRequestToken, name: "clientRequestToken", parent: name, pattern: "^[-_a-zA-Z0-9]*$")
            try self.validate(self.sinkArn, name: "sinkArn", parent: name, max: 1024)
            try self.validate(self.sinkArn, name: "sinkArn", parent: name, min: 1)
            try self.validate(self.sinkArn, name: "sinkArn", parent: name, pattern: "^arn[\\/\\:\\-\\_\\.a-zA-Z0-9]+$")
            try self.validate(self.sourceArn, name: "sourceArn", parent: name, max: 1024)
            try self.validate(self.sourceArn, name: "sourceArn", parent: name, min: 1)
            try self.validate(self.sourceArn, name: "sourceArn", parent: name, pattern: "^arn[\\/\\:\\-\\_\\.a-zA-Z0-9]+$")
            try self.tags?.forEach {
                try $0.validate(name: "\(name).tags[]")
            }
            try self.validate(self.tags, name: "tags", parent: name, max: 50)
            try self.validate(self.tags, name: "tags", parent: name, min: 1)
        }

        private enum CodingKeys: String, CodingKey {
            case chimeSdkMeetingConfiguration = "ChimeSdkMeetingConfiguration"
            case clientRequestToken = "ClientRequestToken"
            case sinkArn = "SinkArn"
            case sinkType = "SinkType"
            case sourceArn = "SourceArn"
            case sourceType = "SourceType"
            case tags = "Tags"
        }
    }

    public struct CreateMediaCapturePipelineResponse: AWSDecodableShape {
        /// A media capture pipeline object, the ID, source type, source ARN, sink type, and  sink ARN of a media capture pipeline object.
        public let mediaCapturePipeline: MediaCapturePipeline?

        public init(mediaCapturePipeline: MediaCapturePipeline? = nil) {
            self.mediaCapturePipeline = mediaCapturePipeline
        }

        private enum CodingKeys: String, CodingKey {
            case mediaCapturePipeline = "MediaCapturePipeline"
        }
    }

    public struct DeleteMediaCapturePipelineRequest: AWSEncodableShape {
        public static var _encoding = [
            AWSMemberEncoding(label: "mediaPipelineId", location: .uri("MediaPipelineId"))
        ]

        /// The ID of the media capture pipeline being deleted.
        public let mediaPipelineId: String

        public init(mediaPipelineId: String) {
            self.mediaPipelineId = mediaPipelineId
        }

        public func validate(name: String) throws {
            try self.validate(self.mediaPipelineId, name: "mediaPipelineId", parent: name, max: 36)
            try self.validate(self.mediaPipelineId, name: "mediaPipelineId", parent: name, min: 36)
            try self.validate(self.mediaPipelineId, name: "mediaPipelineId", parent: name, pattern: "^[a-fA-F0-9]{8}(?:-[a-fA-F0-9]{4}){3}-[a-fA-F0-9]{12}$")
        }

        private enum CodingKeys: CodingKey {}
    }

    public struct GetMediaCapturePipelineRequest: AWSEncodableShape {
        public static var _encoding = [
            AWSMemberEncoding(label: "mediaPipelineId", location: .uri("MediaPipelineId"))
        ]

        /// The ID of the pipeline that you want to get.
        public let mediaPipelineId: String

        public init(mediaPipelineId: String) {
            self.mediaPipelineId = mediaPipelineId
        }

        public func validate(name: String) throws {
            try self.validate(self.mediaPipelineId, name: "mediaPipelineId", parent: name, max: 36)
            try self.validate(self.mediaPipelineId, name: "mediaPipelineId", parent: name, min: 36)
            try self.validate(self.mediaPipelineId, name: "mediaPipelineId", parent: name, pattern: "^[a-fA-F0-9]{8}(?:-[a-fA-F0-9]{4}){3}-[a-fA-F0-9]{12}$")
        }

        private enum CodingKeys: CodingKey {}
    }

    public struct GetMediaCapturePipelineResponse: AWSDecodableShape {
        /// The media capture pipeline object.
        public let mediaCapturePipeline: MediaCapturePipeline?

        public init(mediaCapturePipeline: MediaCapturePipeline? = nil) {
            self.mediaCapturePipeline = mediaCapturePipeline
        }

        private enum CodingKeys: String, CodingKey {
            case mediaCapturePipeline = "MediaCapturePipeline"
        }
    }

    public struct ListMediaCapturePipelinesRequest: AWSEncodableShape {
        public static var _encoding = [
            AWSMemberEncoding(label: "maxResults", location: .querystring("max-results")),
            AWSMemberEncoding(label: "nextToken", location: .querystring("next-token"))
        ]

        /// The maximum number of results to return in a single call. Valid Range: 1 - 99.
        public let maxResults: Int?
        /// The token used to retrieve the next page of results.
        public let nextToken: String?

        public init(maxResults: Int? = nil, nextToken: String? = nil) {
            self.maxResults = maxResults
            self.nextToken = nextToken
        }

        public func validate(name: String) throws {
            try self.validate(self.maxResults, name: "maxResults", parent: name, max: 100)
            try self.validate(self.maxResults, name: "maxResults", parent: name, min: 1)
            try self.validate(self.nextToken, name: "nextToken", parent: name, max: 4096)
            try self.validate(self.nextToken, name: "nextToken", parent: name, pattern: ".*")
        }

        private enum CodingKeys: CodingKey {}
    }

    public struct ListMediaCapturePipelinesResponse: AWSDecodableShape {
        /// The media capture pipeline objects in the list.
        public let mediaCapturePipelines: [MediaCapturePipelineSummary]?
        /// The token used to retrieve the next page of results.
        public let nextToken: String?

        public init(mediaCapturePipelines: [MediaCapturePipelineSummary]? = nil, nextToken: String? = nil) {
            self.mediaCapturePipelines = mediaCapturePipelines
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case mediaCapturePipelines = "MediaCapturePipelines"
            case nextToken = "NextToken"
        }
    }

    public struct ListTagsForResourceRequest: AWSEncodableShape {
        public static var _encoding = [
            AWSMemberEncoding(label: "resourceARN", location: .querystring("arn"))
        ]

        /// The resource ARN.
        public let resourceARN: String

        public init(resourceARN: String) {
            self.resourceARN = resourceARN
        }

        public func validate(name: String) throws {
            try self.validate(self.resourceARN, name: "resourceARN", parent: name, max: 1011)
            try self.validate(self.resourceARN, name: "resourceARN", parent: name, min: 1)
            try self.validate(self.resourceARN, name: "resourceARN", parent: name, pattern: "^arn[\\/\\:\\-\\_\\.a-zA-Z0-9]+$")
        }

        private enum CodingKeys: CodingKey {}
    }

    public struct ListTagsForResourceResponse: AWSDecodableShape {
        /// The tag key-value pairs.
        public let tags: [Tag]?

        public init(tags: [Tag]? = nil) {
            self.tags = tags
        }

        private enum CodingKeys: String, CodingKey {
            case tags = "Tags"
        }
    }

    public struct MediaCapturePipeline: AWSDecodableShape {
        /// The configuration for a specified media capture pipeline. SourceType must be ChimeSdkMeeting.
        public let chimeSdkMeetingConfiguration: ChimeSdkMeetingConfiguration?
        /// The time at which the capture pipeline was created, in ISO 8601 format.
        @OptionalCustomCoding<ISO8601DateCoder>
        public var createdTimestamp: Date?
        /// The ARN of a media capture pipeline.
        public let mediaPipelineArn: String?
        /// The ID of a media capture pipeline.
        public let mediaPipelineId: String?
        /// ARN of the destination to which the media artifacts are saved.
        public let sinkArn: String?
        /// Destination type to which the media artifacts are saved. You must use an S3 Bucket.
        public let sinkType: MediaPipelineSinkType?
        /// ARN of the source from which the media artifacts are saved.
        public let sourceArn: String?
        /// Source type from which media artifacts are saved. You must use ChimeMeeting.
        public let sourceType: MediaPipelineSourceType?
        /// The status of the media capture pipeline.
        public let status: MediaPipelineStatus?
        /// The time at which the capture pipeline was updated, in ISO 8601 format.
        @OptionalCustomCoding<ISO8601DateCoder>
        public var updatedTimestamp: Date?

        public init(chimeSdkMeetingConfiguration: ChimeSdkMeetingConfiguration? = nil, createdTimestamp: Date? = nil, mediaPipelineArn: String? = nil, mediaPipelineId: String? = nil, sinkArn: String? = nil, sinkType: MediaPipelineSinkType? = nil, sourceArn: String? = nil, sourceType: MediaPipelineSourceType? = nil, status: MediaPipelineStatus? = nil, updatedTimestamp: Date? = nil) {
            self.chimeSdkMeetingConfiguration = chimeSdkMeetingConfiguration
            self.createdTimestamp = createdTimestamp
            self.mediaPipelineArn = mediaPipelineArn
            self.mediaPipelineId = mediaPipelineId
            self.sinkArn = sinkArn
            self.sinkType = sinkType
            self.sourceArn = sourceArn
            self.sourceType = sourceType
            self.status = status
            self.updatedTimestamp = updatedTimestamp
        }

        private enum CodingKeys: String, CodingKey {
            case chimeSdkMeetingConfiguration = "ChimeSdkMeetingConfiguration"
            case createdTimestamp = "CreatedTimestamp"
            case mediaPipelineArn = "MediaPipelineArn"
            case mediaPipelineId = "MediaPipelineId"
            case sinkArn = "SinkArn"
            case sinkType = "SinkType"
            case sourceArn = "SourceArn"
            case sourceType = "SourceType"
            case status = "Status"
            case updatedTimestamp = "UpdatedTimestamp"
        }
    }

    public struct MediaCapturePipelineSummary: AWSDecodableShape {
        /// The ARN of a media capture pipeline.
        public let mediaPipelineArn: String?
        /// The ID of a media capture pipeline.
        public let mediaPipelineId: String?

        public init(mediaPipelineArn: String? = nil, mediaPipelineId: String? = nil) {
            self.mediaPipelineArn = mediaPipelineArn
            self.mediaPipelineId = mediaPipelineId
        }

        private enum CodingKeys: String, CodingKey {
            case mediaPipelineArn = "MediaPipelineArn"
            case mediaPipelineId = "MediaPipelineId"
        }
    }

    public struct SelectedVideoStreams: AWSEncodableShape & AWSDecodableShape {
        /// The attendee IDs of the streams selected for a media capture pipeline.
        public let attendeeIds: [String]?
        /// The external user IDs of the streams selected for a media capture pipeline.
        public let externalUserIds: [String]?

        public init(attendeeIds: [String]? = nil, externalUserIds: [String]? = nil) {
            self.attendeeIds = attendeeIds
            self.externalUserIds = externalUserIds
        }

        public func validate(name: String) throws {
            try self.attendeeIds?.forEach {
                try validate($0, name: "attendeeIds[]", parent: name, max: 36)
                try validate($0, name: "attendeeIds[]", parent: name, min: 36)
                try validate($0, name: "attendeeIds[]", parent: name, pattern: "^[a-fA-F0-9]{8}(?:-[a-fA-F0-9]{4}){3}-[a-fA-F0-9]{12}$")
            }
            try self.validate(self.attendeeIds, name: "attendeeIds", parent: name, min: 1)
            try self.externalUserIds?.forEach {
                try validate($0, name: "externalUserIds[]", parent: name, max: 64)
                try validate($0, name: "externalUserIds[]", parent: name, min: 2)
            }
            try self.validate(self.externalUserIds, name: "externalUserIds", parent: name, min: 1)
        }

        private enum CodingKeys: String, CodingKey {
            case attendeeIds = "AttendeeIds"
            case externalUserIds = "ExternalUserIds"
        }
    }

    public struct SourceConfiguration: AWSEncodableShape & AWSDecodableShape {
        /// The selected video streams to capture for a specified media capture pipeline. The number of video streams can't exceed 25.
        public let selectedVideoStreams: SelectedVideoStreams?

        public init(selectedVideoStreams: SelectedVideoStreams? = nil) {
            self.selectedVideoStreams = selectedVideoStreams
        }

        public func validate(name: String) throws {
            try self.selectedVideoStreams?.validate(name: "\(name).selectedVideoStreams")
        }

        private enum CodingKeys: String, CodingKey {
            case selectedVideoStreams = "SelectedVideoStreams"
        }
    }

    public struct Tag: AWSEncodableShape & AWSDecodableShape {
        /// The key of the tag.
        public let key: String
        /// The value of the tag.
        public let value: String

        public init(key: String, value: String) {
            self.key = key
            self.value = value
        }

        public func validate(name: String) throws {
            try self.validate(self.key, name: "key", parent: name, max: 128)
            try self.validate(self.key, name: "key", parent: name, min: 1)
            try self.validate(self.value, name: "value", parent: name, max: 256)
        }

        private enum CodingKeys: String, CodingKey {
            case key = "Key"
            case value = "Value"
        }
    }

    public struct TagResourceRequest: AWSEncodableShape {
        /// The resource ARN.
        public let resourceARN: String
        /// The tag key-value pairs.
        public let tags: [Tag]

        public init(resourceARN: String, tags: [Tag]) {
            self.resourceARN = resourceARN
            self.tags = tags
        }

        public func validate(name: String) throws {
            try self.validate(self.resourceARN, name: "resourceARN", parent: name, max: 1011)
            try self.validate(self.resourceARN, name: "resourceARN", parent: name, min: 1)
            try self.validate(self.resourceARN, name: "resourceARN", parent: name, pattern: "^arn[\\/\\:\\-\\_\\.a-zA-Z0-9]+$")
            try self.tags.forEach {
                try $0.validate(name: "\(name).tags[]")
            }
            try self.validate(self.tags, name: "tags", parent: name, max: 50)
            try self.validate(self.tags, name: "tags", parent: name, min: 1)
        }

        private enum CodingKeys: String, CodingKey {
            case resourceARN = "ResourceARN"
            case tags = "Tags"
        }
    }

    public struct TagResourceResponse: AWSDecodableShape {
        public init() {}
    }

    public struct UntagResourceRequest: AWSEncodableShape {
        /// The resource ARN.
        public let resourceARN: String
        /// The tag keys.
        public let tagKeys: [String]

        public init(resourceARN: String, tagKeys: [String]) {
            self.resourceARN = resourceARN
            self.tagKeys = tagKeys
        }

        public func validate(name: String) throws {
            try self.validate(self.resourceARN, name: "resourceARN", parent: name, max: 1011)
            try self.validate(self.resourceARN, name: "resourceARN", parent: name, min: 1)
            try self.validate(self.resourceARN, name: "resourceARN", parent: name, pattern: "^arn[\\/\\:\\-\\_\\.a-zA-Z0-9]+$")
            try self.tagKeys.forEach {
                try validate($0, name: "tagKeys[]", parent: name, max: 128)
                try validate($0, name: "tagKeys[]", parent: name, min: 1)
            }
            try self.validate(self.tagKeys, name: "tagKeys", parent: name, max: 50)
            try self.validate(self.tagKeys, name: "tagKeys", parent: name, min: 1)
        }

        private enum CodingKeys: String, CodingKey {
            case resourceARN = "ResourceARN"
            case tagKeys = "TagKeys"
        }
    }

    public struct UntagResourceResponse: AWSDecodableShape {
        public init() {}
    }

    public struct VideoArtifactsConfiguration: AWSEncodableShape & AWSDecodableShape {
        /// The MUX type of the video artifact configuration object.
        public let muxType: VideoMuxType?
        /// Indicates whether the video artifact is enabled or disabled.
        public let state: ArtifactsState

        public init(muxType: VideoMuxType? = nil, state: ArtifactsState) {
            self.muxType = muxType
            self.state = state
        }

        private enum CodingKeys: String, CodingKey {
            case muxType = "MuxType"
            case state = "State"
        }
    }
}
