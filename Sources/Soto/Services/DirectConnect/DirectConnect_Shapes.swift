//===----------------------------------------------------------------------===//
//
// This source file is part of the Soto for AWS open source project
//
// Copyright (c) 2017-2021 the Soto project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
// See CONTRIBUTORS.txt for the list of Soto project authors
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by https://github.com/soto-project/soto/tree/main/CodeGenerator. DO NOT EDIT.

import Foundation
import SotoCore

extension DirectConnect {
    // MARK: Enums

    public enum AddressFamily: String, CustomStringConvertible, Codable {
        case ipv4
        case ipv6
        public var description: String { return self.rawValue }
    }

    public enum BGPPeerState: String, CustomStringConvertible, Codable {
        case available
        case deleted
        case deleting
        case pending
        case verifying
        public var description: String { return self.rawValue }
    }

    public enum BGPStatus: String, CustomStringConvertible, Codable {
        case down
        case unknown
        case up
        public var description: String { return self.rawValue }
    }

    public enum ConnectionState: String, CustomStringConvertible, Codable {
        case available
        case deleted
        case deleting
        case down
        case ordering
        case pending
        case rejected
        case requested
        case unknown
        public var description: String { return self.rawValue }
    }

    public enum DirectConnectGatewayAssociationProposalState: String, CustomStringConvertible, Codable {
        case accepted
        case deleted
        case requested
        public var description: String { return self.rawValue }
    }

    public enum DirectConnectGatewayAssociationState: String, CustomStringConvertible, Codable {
        case associated
        case associating
        case disassociated
        case disassociating
        case updating
        public var description: String { return self.rawValue }
    }

    public enum DirectConnectGatewayAttachmentState: String, CustomStringConvertible, Codable {
        case attached
        case attaching
        case detached
        case detaching
        public var description: String { return self.rawValue }
    }

    public enum DirectConnectGatewayAttachmentType: String, CustomStringConvertible, Codable {
        case privatevirtualinterface = "PrivateVirtualInterface"
        case transitvirtualinterface = "TransitVirtualInterface"
        public var description: String { return self.rawValue }
    }

    public enum DirectConnectGatewayState: String, CustomStringConvertible, Codable {
        case available
        case deleted
        case deleting
        case pending
        public var description: String { return self.rawValue }
    }

    public enum GatewayType: String, CustomStringConvertible, Codable {
        case transitgateway = "transitGateway"
        case virtualprivategateway = "virtualPrivateGateway"
        public var description: String { return self.rawValue }
    }

    public enum HasLogicalRedundancy: String, CustomStringConvertible, Codable {
        case no
        case unknown
        case yes
        public var description: String { return self.rawValue }
    }

    public enum InterconnectState: String, CustomStringConvertible, Codable {
        case available
        case deleted
        case deleting
        case down
        case pending
        case requested
        case unknown
        public var description: String { return self.rawValue }
    }

    public enum LagState: String, CustomStringConvertible, Codable {
        case available
        case deleted
        case deleting
        case down
        case pending
        case requested
        case unknown
        public var description: String { return self.rawValue }
    }

    public enum LoaContentType: String, CustomStringConvertible, Codable {
        case applicationPdf = "application/pdf"
        public var description: String { return self.rawValue }
    }

    public enum VirtualInterfaceState: String, CustomStringConvertible, Codable {
        case available
        case confirming
        case deleted
        case deleting
        case down
        case pending
        case rejected
        case unknown
        case verifying
        public var description: String { return self.rawValue }
    }

    // MARK: Shapes

    public struct AcceptDirectConnectGatewayAssociationProposalRequest: AWSEncodableShape {
        /// The ID of the account that owns the virtual private gateway or transit gateway.
        public let associatedGatewayOwnerAccount: String
        /// The ID of the Direct Connect gateway.
        public let directConnectGatewayId: String
        /// Overrides the Amazon VPC prefixes advertised to the Direct Connect gateway. For information about how to set the prefixes, see Allowed Prefixes in the Direct Connect User Guide.
        public let overrideAllowedPrefixesToDirectConnectGateway: [RouteFilterPrefix]?
        /// The ID of the request proposal.
        public let proposalId: String

        public init(associatedGatewayOwnerAccount: String, directConnectGatewayId: String, overrideAllowedPrefixesToDirectConnectGateway: [RouteFilterPrefix]? = nil, proposalId: String) {
            self.associatedGatewayOwnerAccount = associatedGatewayOwnerAccount
            self.directConnectGatewayId = directConnectGatewayId
            self.overrideAllowedPrefixesToDirectConnectGateway = overrideAllowedPrefixesToDirectConnectGateway
            self.proposalId = proposalId
        }

        private enum CodingKeys: String, CodingKey {
            case associatedGatewayOwnerAccount
            case directConnectGatewayId
            case overrideAllowedPrefixesToDirectConnectGateway
            case proposalId
        }
    }

    public struct AcceptDirectConnectGatewayAssociationProposalResult: AWSDecodableShape {
        public let directConnectGatewayAssociation: DirectConnectGatewayAssociation?

        public init(directConnectGatewayAssociation: DirectConnectGatewayAssociation? = nil) {
            self.directConnectGatewayAssociation = directConnectGatewayAssociation
        }

        private enum CodingKeys: String, CodingKey {
            case directConnectGatewayAssociation
        }
    }

    public struct AllocateConnectionOnInterconnectRequest: AWSEncodableShape {
        /// The bandwidth of the connection. The possible values are 50Mbps, 100Mbps, 200Mbps, 300Mbps, 400Mbps, 500Mbps, 1Gbps, 2Gbps, 5Gbps, and 10Gbps. Note that only those Direct Connect Partners who have met specific requirements are allowed to create a 1Gbps, 2Gbps, 5Gbps or 10Gbps hosted connection.
        public let bandwidth: String
        /// The name of the provisioned connection.
        public let connectionName: String
        /// The ID of the interconnect on which the connection will be provisioned.
        public let interconnectId: String
        /// The ID of the account of the customer for whom the connection will be provisioned.
        public let ownerAccount: String
        /// The dedicated VLAN provisioned to the connection.
        public let vlan: Int

        public init(bandwidth: String, connectionName: String, interconnectId: String, ownerAccount: String, vlan: Int) {
            self.bandwidth = bandwidth
            self.connectionName = connectionName
            self.interconnectId = interconnectId
            self.ownerAccount = ownerAccount
            self.vlan = vlan
        }

        private enum CodingKeys: String, CodingKey {
            case bandwidth
            case connectionName
            case interconnectId
            case ownerAccount
            case vlan
        }
    }

    public struct AllocateHostedConnectionRequest: AWSEncodableShape {
        /// The bandwidth of the connection. The possible values are 50Mbps, 100Mbps, 200Mbps, 300Mbps, 400Mbps, 500Mbps, 1Gbps, 2Gbps, 5Gbps, and 10Gbps. Note that only those Direct Connect Partners who have met specific requirements are allowed to create a 1Gbps, 2Gbps, 5Gbps or 10Gbps hosted connection.
        public let bandwidth: String
        /// The ID of the interconnect or LAG.
        public let connectionId: String
        /// The name of the hosted connection.
        public let connectionName: String
        /// The ID of the account ID of the customer for the connection.
        public let ownerAccount: String
        /// The tags associated with the connection.
        public let tags: [Tag]?
        /// The dedicated VLAN provisioned to the hosted connection.
        public let vlan: Int

        public init(bandwidth: String, connectionId: String, connectionName: String, ownerAccount: String, tags: [Tag]? = nil, vlan: Int) {
            self.bandwidth = bandwidth
            self.connectionId = connectionId
            self.connectionName = connectionName
            self.ownerAccount = ownerAccount
            self.tags = tags
            self.vlan = vlan
        }

        public func validate(name: String) throws {
            try self.tags?.forEach {
                try $0.validate(name: "\(name).tags[]")
            }
            try self.validate(self.tags, name: "tags", parent: name, min: 1)
        }

        private enum CodingKeys: String, CodingKey {
            case bandwidth
            case connectionId
            case connectionName
            case ownerAccount
            case tags
            case vlan
        }
    }

    public struct AllocatePrivateVirtualInterfaceRequest: AWSEncodableShape {
        /// The ID of the connection on which the private virtual interface is provisioned.
        public let connectionId: String
        /// Information about the private virtual interface.
        public let newPrivateVirtualInterfaceAllocation: NewPrivateVirtualInterfaceAllocation
        /// The ID of the account that owns the virtual private interface.
        public let ownerAccount: String

        public init(connectionId: String, newPrivateVirtualInterfaceAllocation: NewPrivateVirtualInterfaceAllocation, ownerAccount: String) {
            self.connectionId = connectionId
            self.newPrivateVirtualInterfaceAllocation = newPrivateVirtualInterfaceAllocation
            self.ownerAccount = ownerAccount
        }

        public func validate(name: String) throws {
            try self.newPrivateVirtualInterfaceAllocation.validate(name: "\(name).newPrivateVirtualInterfaceAllocation")
        }

        private enum CodingKeys: String, CodingKey {
            case connectionId
            case newPrivateVirtualInterfaceAllocation
            case ownerAccount
        }
    }

    public struct AllocatePublicVirtualInterfaceRequest: AWSEncodableShape {
        /// The ID of the connection on which the public virtual interface is provisioned.
        public let connectionId: String
        /// Information about the public virtual interface.
        public let newPublicVirtualInterfaceAllocation: NewPublicVirtualInterfaceAllocation
        /// The ID of the account that owns the public virtual interface.
        public let ownerAccount: String

        public init(connectionId: String, newPublicVirtualInterfaceAllocation: NewPublicVirtualInterfaceAllocation, ownerAccount: String) {
            self.connectionId = connectionId
            self.newPublicVirtualInterfaceAllocation = newPublicVirtualInterfaceAllocation
            self.ownerAccount = ownerAccount
        }

        public func validate(name: String) throws {
            try self.newPublicVirtualInterfaceAllocation.validate(name: "\(name).newPublicVirtualInterfaceAllocation")
        }

        private enum CodingKeys: String, CodingKey {
            case connectionId
            case newPublicVirtualInterfaceAllocation
            case ownerAccount
        }
    }

    public struct AllocateTransitVirtualInterfaceRequest: AWSEncodableShape {
        /// The ID of the connection on which the transit virtual interface is provisioned.
        public let connectionId: String
        /// Information about the transit virtual interface.
        public let newTransitVirtualInterfaceAllocation: NewTransitVirtualInterfaceAllocation
        /// The ID of the account that owns the transit virtual interface.
        public let ownerAccount: String

        public init(connectionId: String, newTransitVirtualInterfaceAllocation: NewTransitVirtualInterfaceAllocation, ownerAccount: String) {
            self.connectionId = connectionId
            self.newTransitVirtualInterfaceAllocation = newTransitVirtualInterfaceAllocation
            self.ownerAccount = ownerAccount
        }

        public func validate(name: String) throws {
            try self.newTransitVirtualInterfaceAllocation.validate(name: "\(name).newTransitVirtualInterfaceAllocation")
        }

        private enum CodingKeys: String, CodingKey {
            case connectionId
            case newTransitVirtualInterfaceAllocation
            case ownerAccount
        }
    }

    public struct AllocateTransitVirtualInterfaceResult: AWSDecodableShape {
        public let virtualInterface: VirtualInterface?

        public init(virtualInterface: VirtualInterface? = nil) {
            self.virtualInterface = virtualInterface
        }

        private enum CodingKeys: String, CodingKey {
            case virtualInterface
        }
    }

    public struct AssociateConnectionWithLagRequest: AWSEncodableShape {
        /// The ID of the connection.
        public let connectionId: String
        /// The ID of the LAG with which to associate the connection.
        public let lagId: String

        public init(connectionId: String, lagId: String) {
            self.connectionId = connectionId
            self.lagId = lagId
        }

        private enum CodingKeys: String, CodingKey {
            case connectionId
            case lagId
        }
    }

    public struct AssociateHostedConnectionRequest: AWSEncodableShape {
        /// The ID of the hosted connection.
        public let connectionId: String
        /// The ID of the interconnect or the LAG.
        public let parentConnectionId: String

        public init(connectionId: String, parentConnectionId: String) {
            self.connectionId = connectionId
            self.parentConnectionId = parentConnectionId
        }

        private enum CodingKeys: String, CodingKey {
            case connectionId
            case parentConnectionId
        }
    }

    public struct AssociateMacSecKeyRequest: AWSEncodableShape {
        /// The MAC Security (MACsec) CAK to associate with the dedicated connection. You can create the CKN/CAK pair using an industry standard tool.  The valid values are 64 hexadecimal characters (0-9, A-E). If you use this request parameter, you must use the ckn request parameter and not use the secretARN request parameter.
        public let cak: String?
        /// The MAC Security (MACsec) CKN to associate with the dedicated connection. You can create the CKN/CAK pair using an industry standard tool.  The valid values are 64 hexadecimal characters (0-9, A-E). If you use this request parameter, you must use the cak request parameter and not use the secretARN request parameter.
        public let ckn: String?
        /// The ID of the dedicated connection (dxcon-xxxx), or the ID of the LAG (dxlag-xxxx). You can use DescribeConnections or DescribeLags to retrieve connection ID.
        public let connectionId: String
        /// The Amazon Resource Name (ARN) of the MAC Security (MACsec) secret key to associate with the dedicated connection. You can use DescribeConnections or DescribeLags to retrieve the MAC Security (MACsec) secret key. If you use this request parameter, you do not use the ckn and cak request parameters.
        public let secretARN: String?

        public init(cak: String? = nil, ckn: String? = nil, connectionId: String, secretARN: String? = nil) {
            self.cak = cak
            self.ckn = ckn
            self.connectionId = connectionId
            self.secretARN = secretARN
        }

        private enum CodingKeys: String, CodingKey {
            case cak
            case ckn
            case connectionId
            case secretARN
        }
    }

    public struct AssociateMacSecKeyResponse: AWSDecodableShape {
        /// The ID of the dedicated connection (dxcon-xxxx), or the ID of the LAG (dxlag-xxxx).
        public let connectionId: String?
        /// The MAC Security (MACsec) security keys associated with the dedicated connection.
        public let macSecKeys: [MacSecKey]?

        public init(connectionId: String? = nil, macSecKeys: [MacSecKey]? = nil) {
            self.connectionId = connectionId
            self.macSecKeys = macSecKeys
        }

        private enum CodingKeys: String, CodingKey {
            case connectionId
            case macSecKeys
        }
    }

    public struct AssociateVirtualInterfaceRequest: AWSEncodableShape {
        /// The ID of the LAG or connection.
        public let connectionId: String
        /// The ID of the virtual interface.
        public let virtualInterfaceId: String

        public init(connectionId: String, virtualInterfaceId: String) {
            self.connectionId = connectionId
            self.virtualInterfaceId = virtualInterfaceId
        }

        private enum CodingKeys: String, CodingKey {
            case connectionId
            case virtualInterfaceId
        }
    }

    public struct AssociatedGateway: AWSDecodableShape {
        /// The ID of the associated gateway.
        public let id: String?
        /// The ID of the account that owns the associated virtual private gateway or transit gateway.
        public let ownerAccount: String?
        /// The Region where the associated gateway is located.
        public let region: String?
        /// The type of associated gateway.
        public let type: GatewayType?

        public init(id: String? = nil, ownerAccount: String? = nil, region: String? = nil, type: GatewayType? = nil) {
            self.id = id
            self.ownerAccount = ownerAccount
            self.region = region
            self.type = type
        }

        private enum CodingKeys: String, CodingKey {
            case id
            case ownerAccount
            case region
            case type
        }
    }

    public struct BGPPeer: AWSDecodableShape {
        /// The address family for the BGP peer.
        public let addressFamily: AddressFamily?
        /// The IP address assigned to the Amazon interface.
        public let amazonAddress: String?
        /// The autonomous system (AS) number for Border Gateway Protocol (BGP) configuration.
        public let asn: Int?
        /// The authentication key for BGP configuration. This string has a minimum length of 6 characters and and a maximun lenth of 80 characters.
        public let authKey: String?
        /// The Direct Connect endpoint on which the BGP peer terminates.
        public let awsDeviceV2: String?
        public let awsLogicalDeviceId: String?
        /// The ID of the BGP peer.
        public let bgpPeerId: String?
        /// The state of the BGP peer. The following are the possible values:    verifying: The BGP peering addresses or ASN require validation before the BGP peer can be created. This state applies only to public virtual interfaces.    pending: The BGP peer is created, and remains in this state until it is ready to be established.    available: The BGP peer is ready to be established.    deleting: The BGP peer is being deleted.    deleted: The BGP peer is deleted and cannot be established.
        public let bgpPeerState: BGPPeerState?
        /// The status of the BGP peer. The following are the possible values:    up: The BGP peer is established. This state does not indicate the state of the routing function. Ensure that you are receiving routes over the BGP session.    down: The BGP peer is down.    unknown: The BGP peer status is not available.
        public let bgpStatus: BGPStatus?
        /// The IP address assigned to the customer interface.
        public let customerAddress: String?

        public init(addressFamily: AddressFamily? = nil, amazonAddress: String? = nil, asn: Int? = nil, authKey: String? = nil, awsDeviceV2: String? = nil, awsLogicalDeviceId: String? = nil, bgpPeerId: String? = nil, bgpPeerState: BGPPeerState? = nil, bgpStatus: BGPStatus? = nil, customerAddress: String? = nil) {
            self.addressFamily = addressFamily
            self.amazonAddress = amazonAddress
            self.asn = asn
            self.authKey = authKey
            self.awsDeviceV2 = awsDeviceV2
            self.awsLogicalDeviceId = awsLogicalDeviceId
            self.bgpPeerId = bgpPeerId
            self.bgpPeerState = bgpPeerState
            self.bgpStatus = bgpStatus
            self.customerAddress = customerAddress
        }

        private enum CodingKeys: String, CodingKey {
            case addressFamily
            case amazonAddress
            case asn
            case authKey
            case awsDeviceV2
            case awsLogicalDeviceId
            case bgpPeerId
            case bgpPeerState
            case bgpStatus
            case customerAddress
        }
    }

    public struct ConfirmConnectionRequest: AWSEncodableShape {
        /// The ID of the hosted connection.
        public let connectionId: String

        public init(connectionId: String) {
            self.connectionId = connectionId
        }

        private enum CodingKeys: String, CodingKey {
            case connectionId
        }
    }

    public struct ConfirmConnectionResponse: AWSDecodableShape {
        /// The state of the connection. The following are the possible values:    ordering: The initial state of a hosted connection provisioned on an interconnect. The connection stays in the ordering state until the owner of the hosted connection confirms or declines the connection order.    requested: The initial state of a standard connection. The connection stays in the requested state until the Letter of Authorization (LOA) is sent to the customer.    pending: The connection has been approved and is being initialized.    available: The network link is up and the connection is ready for use.    down: The network link is down.    deleting: The connection is being deleted.    deleted: The connection has been deleted.    rejected: A hosted connection in the ordering state enters the rejected state if it is deleted by the customer.    unknown: The state of the connection is not available.
        public let connectionState: ConnectionState?

        public init(connectionState: ConnectionState? = nil) {
            self.connectionState = connectionState
        }

        private enum CodingKeys: String, CodingKey {
            case connectionState
        }
    }

    public struct ConfirmPrivateVirtualInterfaceRequest: AWSEncodableShape {
        /// The ID of the Direct Connect gateway.
        public let directConnectGatewayId: String?
        /// The ID of the virtual private gateway.
        public let virtualGatewayId: String?
        /// The ID of the virtual interface.
        public let virtualInterfaceId: String

        public init(directConnectGatewayId: String? = nil, virtualGatewayId: String? = nil, virtualInterfaceId: String) {
            self.directConnectGatewayId = directConnectGatewayId
            self.virtualGatewayId = virtualGatewayId
            self.virtualInterfaceId = virtualInterfaceId
        }

        private enum CodingKeys: String, CodingKey {
            case directConnectGatewayId
            case virtualGatewayId
            case virtualInterfaceId
        }
    }

    public struct ConfirmPrivateVirtualInterfaceResponse: AWSDecodableShape {
        /// The state of the virtual interface. The following are the possible values:    confirming: The creation of the virtual interface is pending confirmation from the virtual interface owner. If the owner of the virtual interface is different from the owner of the connection on which it is provisioned, then the virtual interface will remain in this state until it is confirmed by the virtual interface owner.    verifying: This state only applies to public virtual interfaces. Each public virtual interface needs validation before the virtual interface can be created.    pending: A virtual interface is in this state from the time that it is created until the virtual interface is ready to forward traffic.    available: A virtual interface that is able to forward traffic.    down: A virtual interface that is BGP down.    deleting: A virtual interface is in this state immediately after calling DeleteVirtualInterface until it can no longer forward traffic.    deleted: A virtual interface that cannot forward traffic.    rejected: The virtual interface owner has declined creation of the virtual interface. If a virtual interface in the Confirming state is deleted by the virtual interface owner, the virtual interface enters the Rejected state.    unknown: The state of the virtual interface is not available.
        public let virtualInterfaceState: VirtualInterfaceState?

        public init(virtualInterfaceState: VirtualInterfaceState? = nil) {
            self.virtualInterfaceState = virtualInterfaceState
        }

        private enum CodingKeys: String, CodingKey {
            case virtualInterfaceState
        }
    }

    public struct ConfirmPublicVirtualInterfaceRequest: AWSEncodableShape {
        /// The ID of the virtual interface.
        public let virtualInterfaceId: String

        public init(virtualInterfaceId: String) {
            self.virtualInterfaceId = virtualInterfaceId
        }

        private enum CodingKeys: String, CodingKey {
            case virtualInterfaceId
        }
    }

    public struct ConfirmPublicVirtualInterfaceResponse: AWSDecodableShape {
        /// The state of the virtual interface. The following are the possible values:    confirming: The creation of the virtual interface is pending confirmation from the virtual interface owner. If the owner of the virtual interface is different from the owner of the connection on which it is provisioned, then the virtual interface will remain in this state until it is confirmed by the virtual interface owner.    verifying: This state only applies to public virtual interfaces. Each public virtual interface needs validation before the virtual interface can be created.    pending: A virtual interface is in this state from the time that it is created until the virtual interface is ready to forward traffic.    available: A virtual interface that is able to forward traffic.    down: A virtual interface that is BGP down.    deleting: A virtual interface is in this state immediately after calling DeleteVirtualInterface until it can no longer forward traffic.    deleted: A virtual interface that cannot forward traffic.    rejected: The virtual interface owner has declined creation of the virtual interface. If a virtual interface in the Confirming state is deleted by the virtual interface owner, the virtual interface enters the Rejected state.    unknown: The state of the virtual interface is not available.
        public let virtualInterfaceState: VirtualInterfaceState?

        public init(virtualInterfaceState: VirtualInterfaceState? = nil) {
            self.virtualInterfaceState = virtualInterfaceState
        }

        private enum CodingKeys: String, CodingKey {
            case virtualInterfaceState
        }
    }

    public struct ConfirmTransitVirtualInterfaceRequest: AWSEncodableShape {
        /// The ID of the Direct Connect gateway.
        public let directConnectGatewayId: String
        /// The ID of the virtual interface.
        public let virtualInterfaceId: String

        public init(directConnectGatewayId: String, virtualInterfaceId: String) {
            self.directConnectGatewayId = directConnectGatewayId
            self.virtualInterfaceId = virtualInterfaceId
        }

        private enum CodingKeys: String, CodingKey {
            case directConnectGatewayId
            case virtualInterfaceId
        }
    }

    public struct ConfirmTransitVirtualInterfaceResponse: AWSDecodableShape {
        /// The state of the virtual interface. The following are the possible values:    confirming: The creation of the virtual interface is pending confirmation from the virtual interface owner. If the owner of the virtual interface is different from the owner of the connection on which it is provisioned, then the virtual interface will remain in this state until it is confirmed by the virtual interface owner.    verifying: This state only applies to public virtual interfaces. Each public virtual interface needs validation before the virtual interface can be created.    pending: A virtual interface is in this state from the time that it is created until the virtual interface is ready to forward traffic.    available: A virtual interface that is able to forward traffic.    down: A virtual interface that is BGP down.    deleting: A virtual interface is in this state immediately after calling DeleteVirtualInterface until it can no longer forward traffic.    deleted: A virtual interface that cannot forward traffic.    rejected: The virtual interface owner has declined creation of the virtual interface. If a virtual interface in the Confirming state is deleted by the virtual interface owner, the virtual interface enters the Rejected state.    unknown: The state of the virtual interface is not available.
        public let virtualInterfaceState: VirtualInterfaceState?

        public init(virtualInterfaceState: VirtualInterfaceState? = nil) {
            self.virtualInterfaceState = virtualInterfaceState
        }

        private enum CodingKeys: String, CodingKey {
            case virtualInterfaceState
        }
    }

    public struct Connection: AWSDecodableShape {
        /// The Direct Connect endpoint on which the physical connection terminates.
        public let awsDevice: String?
        /// The Direct Connect endpoint on which the physical connection terminates.
        public let awsDeviceV2: String?
        /// The Direct Connect endpoint that terminates a physical connection's BGP sessions.
        public let awsLogicalDeviceId: String?
        /// The bandwidth of the connection.
        public let bandwidth: String?
        /// The ID of the connection.
        public let connectionId: String?
        /// The name of the connection.
        public let connectionName: String?
        /// The state of the connection. The following are the possible values:    ordering: The initial state of a hosted connection provisioned on an interconnect. The connection stays in the ordering state until the owner of the hosted connection confirms or declines the connection order.    requested: The initial state of a standard connection. The connection stays in the requested state until the Letter of Authorization (LOA) is sent to the customer.    pending: The connection has been approved and is being initialized.    available: The network link is up and the connection is ready for use.    down: The network link is down.    deleting: The connection is being deleted.    deleted: The connection has been deleted.    rejected: A hosted connection in the ordering state enters the rejected state if it is deleted by the customer.    unknown: The state of the connection is not available.
        public let connectionState: ConnectionState?
        /// The MAC Security (MACsec) connection encryption mode. The valid values are no_encrypt, should_encrypt, and must_encrypt.
        public let encryptionMode: String?
        /// Indicates whether the connection supports a secondary BGP peer in the same address family (IPv4/IPv6).
        public let hasLogicalRedundancy: HasLogicalRedundancy?
        /// Indicates whether jumbo frames (9001 MTU) are supported.
        public let jumboFrameCapable: Bool?
        /// The ID of the LAG.
        public let lagId: String?
        /// The time of the most recent call to DescribeLoa for this connection.
        public let loaIssueTime: Date?
        /// The location of the connection.
        public let location: String?
        /// Indicates whether the connection supports MAC Security (MACsec).
        public let macSecCapable: Bool?
        /// The MAC Security (MACsec) security keys associated with the connection.
        public let macSecKeys: [MacSecKey]?
        /// The ID of the account that owns the connection.
        public let ownerAccount: String?
        /// The name of the Direct Connect service provider associated with the connection.
        public let partnerName: String?
        /// The MAC Security (MACsec) port link status of the connection. The valid values are Encryption Up, which means that there is an active Connection Key Name, or Encryption Down.
        public let portEncryptionStatus: String?
        /// The name of the service provider associated with the connection.
        public let providerName: String?
        /// The Region where the connection is located.
        public let region: String?
        /// The tags associated with the connection.
        public let tags: [Tag]?
        /// The ID of the VLAN.
        public let vlan: Int?

        public init(awsDevice: String? = nil, awsDeviceV2: String? = nil, awsLogicalDeviceId: String? = nil, bandwidth: String? = nil, connectionId: String? = nil, connectionName: String? = nil, connectionState: ConnectionState? = nil, encryptionMode: String? = nil, hasLogicalRedundancy: HasLogicalRedundancy? = nil, jumboFrameCapable: Bool? = nil, lagId: String? = nil, loaIssueTime: Date? = nil, location: String? = nil, macSecCapable: Bool? = nil, macSecKeys: [MacSecKey]? = nil, ownerAccount: String? = nil, partnerName: String? = nil, portEncryptionStatus: String? = nil, providerName: String? = nil, region: String? = nil, tags: [Tag]? = nil, vlan: Int? = nil) {
            self.awsDevice = awsDevice
            self.awsDeviceV2 = awsDeviceV2
            self.awsLogicalDeviceId = awsLogicalDeviceId
            self.bandwidth = bandwidth
            self.connectionId = connectionId
            self.connectionName = connectionName
            self.connectionState = connectionState
            self.encryptionMode = encryptionMode
            self.hasLogicalRedundancy = hasLogicalRedundancy
            self.jumboFrameCapable = jumboFrameCapable
            self.lagId = lagId
            self.loaIssueTime = loaIssueTime
            self.location = location
            self.macSecCapable = macSecCapable
            self.macSecKeys = macSecKeys
            self.ownerAccount = ownerAccount
            self.partnerName = partnerName
            self.portEncryptionStatus = portEncryptionStatus
            self.providerName = providerName
            self.region = region
            self.tags = tags
            self.vlan = vlan
        }

        private enum CodingKeys: String, CodingKey {
            case awsDevice
            case awsDeviceV2
            case awsLogicalDeviceId
            case bandwidth
            case connectionId
            case connectionName
            case connectionState
            case encryptionMode
            case hasLogicalRedundancy
            case jumboFrameCapable
            case lagId
            case loaIssueTime
            case location
            case macSecCapable
            case macSecKeys
            case ownerAccount
            case partnerName
            case portEncryptionStatus
            case providerName
            case region
            case tags
            case vlan
        }
    }

    public struct Connections: AWSDecodableShape {
        /// The connections.
        public let connections: [Connection]?

        public init(connections: [Connection]? = nil) {
            self.connections = connections
        }

        private enum CodingKeys: String, CodingKey {
            case connections
        }
    }

    public struct CreateBGPPeerRequest: AWSEncodableShape {
        /// Information about the BGP peer.
        public let newBGPPeer: NewBGPPeer?
        /// The ID of the virtual interface.
        public let virtualInterfaceId: String?

        public init(newBGPPeer: NewBGPPeer? = nil, virtualInterfaceId: String? = nil) {
            self.newBGPPeer = newBGPPeer
            self.virtualInterfaceId = virtualInterfaceId
        }

        private enum CodingKeys: String, CodingKey {
            case newBGPPeer
            case virtualInterfaceId
        }
    }

    public struct CreateBGPPeerResponse: AWSDecodableShape {
        /// The virtual interface.
        public let virtualInterface: VirtualInterface?

        public init(virtualInterface: VirtualInterface? = nil) {
            self.virtualInterface = virtualInterface
        }

        private enum CodingKeys: String, CodingKey {
            case virtualInterface
        }
    }

    public struct CreateConnectionRequest: AWSEncodableShape {
        /// The bandwidth of the connection.
        public let bandwidth: String
        /// The name of the connection.
        public let connectionName: String
        /// The ID of the LAG.
        public let lagId: String?
        /// The location of the connection.
        public let location: String
        /// The name of the service provider associated with the requested connection.
        public let providerName: String?
        /// Indicates whether you want the connection to support MAC Security (MACsec). MAC Security (MACsec) is only available on dedicated connections. For information about MAC Security (MACsec) prerequisties, see MACsec prerequisties in the Direct Connect User Guide.
        public let requestMACSec: Bool?
        /// The tags to associate with the lag.
        public let tags: [Tag]?

        public init(bandwidth: String, connectionName: String, lagId: String? = nil, location: String, providerName: String? = nil, requestMACSec: Bool? = nil, tags: [Tag]? = nil) {
            self.bandwidth = bandwidth
            self.connectionName = connectionName
            self.lagId = lagId
            self.location = location
            self.providerName = providerName
            self.requestMACSec = requestMACSec
            self.tags = tags
        }

        public func validate(name: String) throws {
            try self.tags?.forEach {
                try $0.validate(name: "\(name).tags[]")
            }
            try self.validate(self.tags, name: "tags", parent: name, min: 1)
        }

        private enum CodingKeys: String, CodingKey {
            case bandwidth
            case connectionName
            case lagId
            case location
            case providerName
            case requestMACSec
            case tags
        }
    }

    public struct CreateDirectConnectGatewayAssociationProposalRequest: AWSEncodableShape {
        /// The Amazon VPC prefixes to advertise to the Direct Connect gateway.
        public let addAllowedPrefixesToDirectConnectGateway: [RouteFilterPrefix]?
        /// The ID of the Direct Connect gateway.
        public let directConnectGatewayId: String
        /// The ID of the account that owns the Direct Connect gateway.
        public let directConnectGatewayOwnerAccount: String
        /// The ID of the virtual private gateway or transit gateway.
        public let gatewayId: String
        /// The Amazon VPC prefixes to no longer advertise to the Direct Connect gateway.
        public let removeAllowedPrefixesToDirectConnectGateway: [RouteFilterPrefix]?

        public init(addAllowedPrefixesToDirectConnectGateway: [RouteFilterPrefix]? = nil, directConnectGatewayId: String, directConnectGatewayOwnerAccount: String, gatewayId: String, removeAllowedPrefixesToDirectConnectGateway: [RouteFilterPrefix]? = nil) {
            self.addAllowedPrefixesToDirectConnectGateway = addAllowedPrefixesToDirectConnectGateway
            self.directConnectGatewayId = directConnectGatewayId
            self.directConnectGatewayOwnerAccount = directConnectGatewayOwnerAccount
            self.gatewayId = gatewayId
            self.removeAllowedPrefixesToDirectConnectGateway = removeAllowedPrefixesToDirectConnectGateway
        }

        private enum CodingKeys: String, CodingKey {
            case addAllowedPrefixesToDirectConnectGateway
            case directConnectGatewayId
            case directConnectGatewayOwnerAccount
            case gatewayId
            case removeAllowedPrefixesToDirectConnectGateway
        }
    }

    public struct CreateDirectConnectGatewayAssociationProposalResult: AWSDecodableShape {
        /// Information about the Direct Connect gateway proposal.
        public let directConnectGatewayAssociationProposal: DirectConnectGatewayAssociationProposal?

        public init(directConnectGatewayAssociationProposal: DirectConnectGatewayAssociationProposal? = nil) {
            self.directConnectGatewayAssociationProposal = directConnectGatewayAssociationProposal
        }

        private enum CodingKeys: String, CodingKey {
            case directConnectGatewayAssociationProposal
        }
    }

    public struct CreateDirectConnectGatewayAssociationRequest: AWSEncodableShape {
        /// The Amazon VPC prefixes to advertise to the Direct Connect gateway This parameter is required when you create an association to a transit gateway. For information about how to set the prefixes, see Allowed Prefixes in the Direct Connect User Guide.
        public let addAllowedPrefixesToDirectConnectGateway: [RouteFilterPrefix]?
        /// The ID of the Direct Connect gateway.
        public let directConnectGatewayId: String
        /// The ID of the virtual private gateway or transit gateway.
        public let gatewayId: String?
        /// The ID of the virtual private gateway.
        public let virtualGatewayId: String?

        public init(addAllowedPrefixesToDirectConnectGateway: [RouteFilterPrefix]? = nil, directConnectGatewayId: String, gatewayId: String? = nil, virtualGatewayId: String? = nil) {
            self.addAllowedPrefixesToDirectConnectGateway = addAllowedPrefixesToDirectConnectGateway
            self.directConnectGatewayId = directConnectGatewayId
            self.gatewayId = gatewayId
            self.virtualGatewayId = virtualGatewayId
        }

        private enum CodingKeys: String, CodingKey {
            case addAllowedPrefixesToDirectConnectGateway
            case directConnectGatewayId
            case gatewayId
            case virtualGatewayId
        }
    }

    public struct CreateDirectConnectGatewayAssociationResult: AWSDecodableShape {
        /// The association to be created.
        public let directConnectGatewayAssociation: DirectConnectGatewayAssociation?

        public init(directConnectGatewayAssociation: DirectConnectGatewayAssociation? = nil) {
            self.directConnectGatewayAssociation = directConnectGatewayAssociation
        }

        private enum CodingKeys: String, CodingKey {
            case directConnectGatewayAssociation
        }
    }

    public struct CreateDirectConnectGatewayRequest: AWSEncodableShape {
        /// The autonomous system number (ASN) for Border Gateway Protocol (BGP) to be configured on the Amazon side of the connection. The ASN must be in the private range of 64,512 to 65,534 or 4,200,000,000 to 4,294,967,294. The default is 64512.
        public let amazonSideAsn: Int64?
        /// The name of the Direct Connect gateway.
        public let directConnectGatewayName: String

        public init(amazonSideAsn: Int64? = nil, directConnectGatewayName: String) {
            self.amazonSideAsn = amazonSideAsn
            self.directConnectGatewayName = directConnectGatewayName
        }

        private enum CodingKeys: String, CodingKey {
            case amazonSideAsn
            case directConnectGatewayName
        }
    }

    public struct CreateDirectConnectGatewayResult: AWSDecodableShape {
        /// The Direct Connect gateway.
        public let directConnectGateway: DirectConnectGateway?

        public init(directConnectGateway: DirectConnectGateway? = nil) {
            self.directConnectGateway = directConnectGateway
        }

        private enum CodingKeys: String, CodingKey {
            case directConnectGateway
        }
    }

    public struct CreateInterconnectRequest: AWSEncodableShape {
        /// The port bandwidth, in Gbps. The possible values are 1 and 10.
        public let bandwidth: String
        /// The name of the interconnect.
        public let interconnectName: String
        /// The ID of the LAG.
        public let lagId: String?
        /// The location of the interconnect.
        public let location: String
        /// The name of the service provider associated with the interconnect.
        public let providerName: String?
        /// The tags to associate with the interconnect.
        public let tags: [Tag]?

        public init(bandwidth: String, interconnectName: String, lagId: String? = nil, location: String, providerName: String? = nil, tags: [Tag]? = nil) {
            self.bandwidth = bandwidth
            self.interconnectName = interconnectName
            self.lagId = lagId
            self.location = location
            self.providerName = providerName
            self.tags = tags
        }

        public func validate(name: String) throws {
            try self.tags?.forEach {
                try $0.validate(name: "\(name).tags[]")
            }
            try self.validate(self.tags, name: "tags", parent: name, min: 1)
        }

        private enum CodingKeys: String, CodingKey {
            case bandwidth
            case interconnectName
            case lagId
            case location
            case providerName
            case tags
        }
    }

    public struct CreateLagRequest: AWSEncodableShape {
        /// The tags to associate with the automtically created LAGs.
        public let childConnectionTags: [Tag]?
        /// The ID of an existing dedicated connection to migrate to the LAG.
        public let connectionId: String?
        /// The bandwidth of the individual physical dedicated connections bundled by the LAG. The possible values are 1Gbps and 10Gbps.
        public let connectionsBandwidth: String
        /// The name of the LAG.
        public let lagName: String
        /// The location for the LAG.
        public let location: String
        /// The number of physical dedicated connections initially provisioned and bundled by the LAG.
        public let numberOfConnections: Int
        /// The name of the service provider associated with the LAG.
        public let providerName: String?
        /// Indicates whether the connection will support MAC Security (MACsec).  All connections in the LAG must be capable of supporting MAC Security (MACsec). For information about MAC Security (MACsec) prerequisties, see MACsec prerequisties in the Direct Connect User Guide.
        public let requestMACSec: Bool?
        /// The tags to associate with the LAG.
        public let tags: [Tag]?

        public init(childConnectionTags: [Tag]? = nil, connectionId: String? = nil, connectionsBandwidth: String, lagName: String, location: String, numberOfConnections: Int, providerName: String? = nil, requestMACSec: Bool? = nil, tags: [Tag]? = nil) {
            self.childConnectionTags = childConnectionTags
            self.connectionId = connectionId
            self.connectionsBandwidth = connectionsBandwidth
            self.lagName = lagName
            self.location = location
            self.numberOfConnections = numberOfConnections
            self.providerName = providerName
            self.requestMACSec = requestMACSec
            self.tags = tags
        }

        public func validate(name: String) throws {
            try self.childConnectionTags?.forEach {
                try $0.validate(name: "\(name).childConnectionTags[]")
            }
            try self.validate(self.childConnectionTags, name: "childConnectionTags", parent: name, min: 1)
            try self.tags?.forEach {
                try $0.validate(name: "\(name).tags[]")
            }
            try self.validate(self.tags, name: "tags", parent: name, min: 1)
        }

        private enum CodingKeys: String, CodingKey {
            case childConnectionTags
            case connectionId
            case connectionsBandwidth
            case lagName
            case location
            case numberOfConnections
            case providerName
            case requestMACSec
            case tags
        }
    }

    public struct CreatePrivateVirtualInterfaceRequest: AWSEncodableShape {
        /// The ID of the connection.
        public let connectionId: String
        /// Information about the private virtual interface.
        public let newPrivateVirtualInterface: NewPrivateVirtualInterface

        public init(connectionId: String, newPrivateVirtualInterface: NewPrivateVirtualInterface) {
            self.connectionId = connectionId
            self.newPrivateVirtualInterface = newPrivateVirtualInterface
        }

        public func validate(name: String) throws {
            try self.newPrivateVirtualInterface.validate(name: "\(name).newPrivateVirtualInterface")
        }

        private enum CodingKeys: String, CodingKey {
            case connectionId
            case newPrivateVirtualInterface
        }
    }

    public struct CreatePublicVirtualInterfaceRequest: AWSEncodableShape {
        /// The ID of the connection.
        public let connectionId: String
        /// Information about the public virtual interface.
        public let newPublicVirtualInterface: NewPublicVirtualInterface

        public init(connectionId: String, newPublicVirtualInterface: NewPublicVirtualInterface) {
            self.connectionId = connectionId
            self.newPublicVirtualInterface = newPublicVirtualInterface
        }

        public func validate(name: String) throws {
            try self.newPublicVirtualInterface.validate(name: "\(name).newPublicVirtualInterface")
        }

        private enum CodingKeys: String, CodingKey {
            case connectionId
            case newPublicVirtualInterface
        }
    }

    public struct CreateTransitVirtualInterfaceRequest: AWSEncodableShape {
        /// The ID of the connection.
        public let connectionId: String
        /// Information about the transit virtual interface.
        public let newTransitVirtualInterface: NewTransitVirtualInterface

        public init(connectionId: String, newTransitVirtualInterface: NewTransitVirtualInterface) {
            self.connectionId = connectionId
            self.newTransitVirtualInterface = newTransitVirtualInterface
        }

        public func validate(name: String) throws {
            try self.newTransitVirtualInterface.validate(name: "\(name).newTransitVirtualInterface")
        }

        private enum CodingKeys: String, CodingKey {
            case connectionId
            case newTransitVirtualInterface
        }
    }

    public struct CreateTransitVirtualInterfaceResult: AWSDecodableShape {
        public let virtualInterface: VirtualInterface?

        public init(virtualInterface: VirtualInterface? = nil) {
            self.virtualInterface = virtualInterface
        }

        private enum CodingKeys: String, CodingKey {
            case virtualInterface
        }
    }

    public struct DeleteBGPPeerRequest: AWSEncodableShape {
        /// The autonomous system (AS) number for Border Gateway Protocol (BGP) configuration.
        public let asn: Int?
        /// The ID of the BGP peer.
        public let bgpPeerId: String?
        /// The IP address assigned to the customer interface.
        public let customerAddress: String?
        /// The ID of the virtual interface.
        public let virtualInterfaceId: String?

        public init(asn: Int? = nil, bgpPeerId: String? = nil, customerAddress: String? = nil, virtualInterfaceId: String? = nil) {
            self.asn = asn
            self.bgpPeerId = bgpPeerId
            self.customerAddress = customerAddress
            self.virtualInterfaceId = virtualInterfaceId
        }

        private enum CodingKeys: String, CodingKey {
            case asn
            case bgpPeerId
            case customerAddress
            case virtualInterfaceId
        }
    }

    public struct DeleteBGPPeerResponse: AWSDecodableShape {
        /// The virtual interface.
        public let virtualInterface: VirtualInterface?

        public init(virtualInterface: VirtualInterface? = nil) {
            self.virtualInterface = virtualInterface
        }

        private enum CodingKeys: String, CodingKey {
            case virtualInterface
        }
    }

    public struct DeleteConnectionRequest: AWSEncodableShape {
        /// The ID of the connection.
        public let connectionId: String

        public init(connectionId: String) {
            self.connectionId = connectionId
        }

        private enum CodingKeys: String, CodingKey {
            case connectionId
        }
    }

    public struct DeleteDirectConnectGatewayAssociationProposalRequest: AWSEncodableShape {
        /// The ID of the proposal.
        public let proposalId: String

        public init(proposalId: String) {
            self.proposalId = proposalId
        }

        private enum CodingKeys: String, CodingKey {
            case proposalId
        }
    }

    public struct DeleteDirectConnectGatewayAssociationProposalResult: AWSDecodableShape {
        /// The ID of the associated gateway.
        public let directConnectGatewayAssociationProposal: DirectConnectGatewayAssociationProposal?

        public init(directConnectGatewayAssociationProposal: DirectConnectGatewayAssociationProposal? = nil) {
            self.directConnectGatewayAssociationProposal = directConnectGatewayAssociationProposal
        }

        private enum CodingKeys: String, CodingKey {
            case directConnectGatewayAssociationProposal
        }
    }

    public struct DeleteDirectConnectGatewayAssociationRequest: AWSEncodableShape {
        /// The ID of the Direct Connect gateway association.
        public let associationId: String?
        /// The ID of the Direct Connect gateway.
        public let directConnectGatewayId: String?
        /// The ID of the virtual private gateway.
        public let virtualGatewayId: String?

        public init(associationId: String? = nil, directConnectGatewayId: String? = nil, virtualGatewayId: String? = nil) {
            self.associationId = associationId
            self.directConnectGatewayId = directConnectGatewayId
            self.virtualGatewayId = virtualGatewayId
        }

        private enum CodingKeys: String, CodingKey {
            case associationId
            case directConnectGatewayId
            case virtualGatewayId
        }
    }

    public struct DeleteDirectConnectGatewayAssociationResult: AWSDecodableShape {
        /// Information about the deleted association.
        public let directConnectGatewayAssociation: DirectConnectGatewayAssociation?

        public init(directConnectGatewayAssociation: DirectConnectGatewayAssociation? = nil) {
            self.directConnectGatewayAssociation = directConnectGatewayAssociation
        }

        private enum CodingKeys: String, CodingKey {
            case directConnectGatewayAssociation
        }
    }

    public struct DeleteDirectConnectGatewayRequest: AWSEncodableShape {
        /// The ID of the Direct Connect gateway.
        public let directConnectGatewayId: String

        public init(directConnectGatewayId: String) {
            self.directConnectGatewayId = directConnectGatewayId
        }

        private enum CodingKeys: String, CodingKey {
            case directConnectGatewayId
        }
    }

    public struct DeleteDirectConnectGatewayResult: AWSDecodableShape {
        /// The Direct Connect gateway.
        public let directConnectGateway: DirectConnectGateway?

        public init(directConnectGateway: DirectConnectGateway? = nil) {
            self.directConnectGateway = directConnectGateway
        }

        private enum CodingKeys: String, CodingKey {
            case directConnectGateway
        }
    }

    public struct DeleteInterconnectRequest: AWSEncodableShape {
        /// The ID of the interconnect.
        public let interconnectId: String

        public init(interconnectId: String) {
            self.interconnectId = interconnectId
        }

        private enum CodingKeys: String, CodingKey {
            case interconnectId
        }
    }

    public struct DeleteInterconnectResponse: AWSDecodableShape {
        /// The state of the interconnect. The following are the possible values:    requested: The initial state of an interconnect. The interconnect stays in the requested state until the Letter of Authorization (LOA) is sent to the customer.    pending: The interconnect is approved, and is being initialized.    available: The network link is up, and the interconnect is ready for use.    down: The network link is down.    deleting: The interconnect is being deleted.    deleted: The interconnect is deleted.    unknown: The state of the interconnect is not available.
        public let interconnectState: InterconnectState?

        public init(interconnectState: InterconnectState? = nil) {
            self.interconnectState = interconnectState
        }

        private enum CodingKeys: String, CodingKey {
            case interconnectState
        }
    }

    public struct DeleteLagRequest: AWSEncodableShape {
        /// The ID of the LAG.
        public let lagId: String

        public init(lagId: String) {
            self.lagId = lagId
        }

        private enum CodingKeys: String, CodingKey {
            case lagId
        }
    }

    public struct DeleteVirtualInterfaceRequest: AWSEncodableShape {
        /// The ID of the virtual interface.
        public let virtualInterfaceId: String

        public init(virtualInterfaceId: String) {
            self.virtualInterfaceId = virtualInterfaceId
        }

        private enum CodingKeys: String, CodingKey {
            case virtualInterfaceId
        }
    }

    public struct DeleteVirtualInterfaceResponse: AWSDecodableShape {
        /// The state of the virtual interface. The following are the possible values:    confirming: The creation of the virtual interface is pending confirmation from the virtual interface owner. If the owner of the virtual interface is different from the owner of the connection on which it is provisioned, then the virtual interface will remain in this state until it is confirmed by the virtual interface owner.    verifying: This state only applies to public virtual interfaces. Each public virtual interface needs validation before the virtual interface can be created.    pending: A virtual interface is in this state from the time that it is created until the virtual interface is ready to forward traffic.    available: A virtual interface that is able to forward traffic.    down: A virtual interface that is BGP down.    deleting: A virtual interface is in this state immediately after calling DeleteVirtualInterface until it can no longer forward traffic.    deleted: A virtual interface that cannot forward traffic.    rejected: The virtual interface owner has declined creation of the virtual interface. If a virtual interface in the Confirming state is deleted by the virtual interface owner, the virtual interface enters the Rejected state.    unknown: The state of the virtual interface is not available.
        public let virtualInterfaceState: VirtualInterfaceState?

        public init(virtualInterfaceState: VirtualInterfaceState? = nil) {
            self.virtualInterfaceState = virtualInterfaceState
        }

        private enum CodingKeys: String, CodingKey {
            case virtualInterfaceState
        }
    }

    public struct DescribeConnectionLoaRequest: AWSEncodableShape {
        /// The ID of the connection.
        public let connectionId: String
        /// The standard media type for the LOA-CFA document. The only supported value is application/pdf.
        public let loaContentType: LoaContentType?
        /// The name of the APN partner or service provider who establishes connectivity on your behalf. If you specify this parameter, the LOA-CFA lists the provider name alongside your company name as the requester of the cross connect.
        public let providerName: String?

        public init(connectionId: String, loaContentType: LoaContentType? = nil, providerName: String? = nil) {
            self.connectionId = connectionId
            self.loaContentType = loaContentType
            self.providerName = providerName
        }

        private enum CodingKeys: String, CodingKey {
            case connectionId
            case loaContentType
            case providerName
        }
    }

    public struct DescribeConnectionLoaResponse: AWSDecodableShape {
        /// The Letter of Authorization - Connecting Facility Assignment (LOA-CFA).
        public let loa: Loa?

        public init(loa: Loa? = nil) {
            self.loa = loa
        }

        private enum CodingKeys: String, CodingKey {
            case loa
        }
    }

    public struct DescribeConnectionsOnInterconnectRequest: AWSEncodableShape {
        /// The ID of the interconnect.
        public let interconnectId: String

        public init(interconnectId: String) {
            self.interconnectId = interconnectId
        }

        private enum CodingKeys: String, CodingKey {
            case interconnectId
        }
    }

    public struct DescribeConnectionsRequest: AWSEncodableShape {
        /// The ID of the connection.
        public let connectionId: String?

        public init(connectionId: String? = nil) {
            self.connectionId = connectionId
        }

        private enum CodingKeys: String, CodingKey {
            case connectionId
        }
    }

    public struct DescribeDirectConnectGatewayAssociationProposalsRequest: AWSEncodableShape {
        /// The ID of the associated gateway.
        public let associatedGatewayId: String?
        /// The ID of the Direct Connect gateway.
        public let directConnectGatewayId: String?
        /// The maximum number of results to return with a single call. To retrieve the remaining results, make another call with the returned nextToken value. If MaxResults is given a value larger than 100, only 100 results are returned.
        public let maxResults: Int?
        /// The token for the next page of results.
        public let nextToken: String?
        /// The ID of the proposal.
        public let proposalId: String?

        public init(associatedGatewayId: String? = nil, directConnectGatewayId: String? = nil, maxResults: Int? = nil, nextToken: String? = nil, proposalId: String? = nil) {
            self.associatedGatewayId = associatedGatewayId
            self.directConnectGatewayId = directConnectGatewayId
            self.maxResults = maxResults
            self.nextToken = nextToken
            self.proposalId = proposalId
        }

        private enum CodingKeys: String, CodingKey {
            case associatedGatewayId
            case directConnectGatewayId
            case maxResults
            case nextToken
            case proposalId
        }
    }

    public struct DescribeDirectConnectGatewayAssociationProposalsResult: AWSDecodableShape {
        /// Describes the Direct Connect gateway association proposals.
        public let directConnectGatewayAssociationProposals: [DirectConnectGatewayAssociationProposal]?
        /// The token to use to retrieve the next page of results. This value is null when there are no more results to return.
        public let nextToken: String?

        public init(directConnectGatewayAssociationProposals: [DirectConnectGatewayAssociationProposal]? = nil, nextToken: String? = nil) {
            self.directConnectGatewayAssociationProposals = directConnectGatewayAssociationProposals
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case directConnectGatewayAssociationProposals
            case nextToken
        }
    }

    public struct DescribeDirectConnectGatewayAssociationsRequest: AWSEncodableShape {
        /// The ID of the associated gateway.
        public let associatedGatewayId: String?
        /// The ID of the Direct Connect gateway association.
        public let associationId: String?
        /// The ID of the Direct Connect gateway.
        public let directConnectGatewayId: String?
        /// The maximum number of results to return with a single call. To retrieve the remaining results, make another call with the returned nextToken value. If MaxResults is given a value larger than 100, only 100 results are returned.
        public let maxResults: Int?
        /// The token provided in the previous call to retrieve the next page.
        public let nextToken: String?
        /// The ID of the virtual private gateway or transit gateway.
        public let virtualGatewayId: String?

        public init(associatedGatewayId: String? = nil, associationId: String? = nil, directConnectGatewayId: String? = nil, maxResults: Int? = nil, nextToken: String? = nil, virtualGatewayId: String? = nil) {
            self.associatedGatewayId = associatedGatewayId
            self.associationId = associationId
            self.directConnectGatewayId = directConnectGatewayId
            self.maxResults = maxResults
            self.nextToken = nextToken
            self.virtualGatewayId = virtualGatewayId
        }

        private enum CodingKeys: String, CodingKey {
            case associatedGatewayId
            case associationId
            case directConnectGatewayId
            case maxResults
            case nextToken
            case virtualGatewayId
        }
    }

    public struct DescribeDirectConnectGatewayAssociationsResult: AWSDecodableShape {
        /// Information about the associations.
        public let directConnectGatewayAssociations: [DirectConnectGatewayAssociation]?
        /// The token to retrieve the next page.
        public let nextToken: String?

        public init(directConnectGatewayAssociations: [DirectConnectGatewayAssociation]? = nil, nextToken: String? = nil) {
            self.directConnectGatewayAssociations = directConnectGatewayAssociations
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case directConnectGatewayAssociations
            case nextToken
        }
    }

    public struct DescribeDirectConnectGatewayAttachmentsRequest: AWSEncodableShape {
        /// The ID of the Direct Connect gateway.
        public let directConnectGatewayId: String?
        /// The maximum number of results to return with a single call. To retrieve the remaining results, make another call with the returned nextToken value. If MaxResults is given a value larger than 100, only 100 results are returned.
        public let maxResults: Int?
        /// The token provided in the previous call to retrieve the next page.
        public let nextToken: String?
        /// The ID of the virtual interface.
        public let virtualInterfaceId: String?

        public init(directConnectGatewayId: String? = nil, maxResults: Int? = nil, nextToken: String? = nil, virtualInterfaceId: String? = nil) {
            self.directConnectGatewayId = directConnectGatewayId
            self.maxResults = maxResults
            self.nextToken = nextToken
            self.virtualInterfaceId = virtualInterfaceId
        }

        private enum CodingKeys: String, CodingKey {
            case directConnectGatewayId
            case maxResults
            case nextToken
            case virtualInterfaceId
        }
    }

    public struct DescribeDirectConnectGatewayAttachmentsResult: AWSDecodableShape {
        /// The attachments.
        public let directConnectGatewayAttachments: [DirectConnectGatewayAttachment]?
        /// The token to retrieve the next page.
        public let nextToken: String?

        public init(directConnectGatewayAttachments: [DirectConnectGatewayAttachment]? = nil, nextToken: String? = nil) {
            self.directConnectGatewayAttachments = directConnectGatewayAttachments
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case directConnectGatewayAttachments
            case nextToken
        }
    }

    public struct DescribeDirectConnectGatewaysRequest: AWSEncodableShape {
        /// The ID of the Direct Connect gateway.
        public let directConnectGatewayId: String?
        /// The maximum number of results to return with a single call. To retrieve the remaining results, make another call with the returned nextToken value. If MaxResults is given a value larger than 100, only 100 results are returned.
        public let maxResults: Int?
        /// The token provided in the previous call to retrieve the next page.
        public let nextToken: String?

        public init(directConnectGatewayId: String? = nil, maxResults: Int? = nil, nextToken: String? = nil) {
            self.directConnectGatewayId = directConnectGatewayId
            self.maxResults = maxResults
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case directConnectGatewayId
            case maxResults
            case nextToken
        }
    }

    public struct DescribeDirectConnectGatewaysResult: AWSDecodableShape {
        /// The Direct Connect gateways.
        public let directConnectGateways: [DirectConnectGateway]?
        /// The token to retrieve the next page.
        public let nextToken: String?

        public init(directConnectGateways: [DirectConnectGateway]? = nil, nextToken: String? = nil) {
            self.directConnectGateways = directConnectGateways
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case directConnectGateways
            case nextToken
        }
    }

    public struct DescribeHostedConnectionsRequest: AWSEncodableShape {
        /// The ID of the interconnect or LAG.
        public let connectionId: String

        public init(connectionId: String) {
            self.connectionId = connectionId
        }

        private enum CodingKeys: String, CodingKey {
            case connectionId
        }
    }

    public struct DescribeInterconnectLoaRequest: AWSEncodableShape {
        /// The ID of the interconnect.
        public let interconnectId: String
        /// The standard media type for the LOA-CFA document. The only supported value is application/pdf.
        public let loaContentType: LoaContentType?
        /// The name of the service provider who establishes connectivity on your behalf. If you supply this parameter, the LOA-CFA lists the provider name alongside your company name as the requester of the cross connect.
        public let providerName: String?

        public init(interconnectId: String, loaContentType: LoaContentType? = nil, providerName: String? = nil) {
            self.interconnectId = interconnectId
            self.loaContentType = loaContentType
            self.providerName = providerName
        }

        private enum CodingKeys: String, CodingKey {
            case interconnectId
            case loaContentType
            case providerName
        }
    }

    public struct DescribeInterconnectLoaResponse: AWSDecodableShape {
        /// The Letter of Authorization - Connecting Facility Assignment (LOA-CFA).
        public let loa: Loa?

        public init(loa: Loa? = nil) {
            self.loa = loa
        }

        private enum CodingKeys: String, CodingKey {
            case loa
        }
    }

    public struct DescribeInterconnectsRequest: AWSEncodableShape {
        /// The ID of the interconnect.
        public let interconnectId: String?

        public init(interconnectId: String? = nil) {
            self.interconnectId = interconnectId
        }

        private enum CodingKeys: String, CodingKey {
            case interconnectId
        }
    }

    public struct DescribeLagsRequest: AWSEncodableShape {
        /// The ID of the LAG.
        public let lagId: String?

        public init(lagId: String? = nil) {
            self.lagId = lagId
        }

        private enum CodingKeys: String, CodingKey {
            case lagId
        }
    }

    public struct DescribeLoaRequest: AWSEncodableShape {
        /// The ID of a connection, LAG, or interconnect.
        public let connectionId: String
        /// The standard media type for the LOA-CFA document. The only supported value is application/pdf.
        public let loaContentType: LoaContentType?
        /// The name of the service provider who establishes connectivity on your behalf. If you specify this parameter, the LOA-CFA lists the provider name alongside your company name as the requester of the cross connect.
        public let providerName: String?

        public init(connectionId: String, loaContentType: LoaContentType? = nil, providerName: String? = nil) {
            self.connectionId = connectionId
            self.loaContentType = loaContentType
            self.providerName = providerName
        }

        private enum CodingKeys: String, CodingKey {
            case connectionId
            case loaContentType
            case providerName
        }
    }

    public struct DescribeTagsRequest: AWSEncodableShape {
        /// The Amazon Resource Names (ARNs) of the resources.
        public let resourceArns: [String]

        public init(resourceArns: [String]) {
            self.resourceArns = resourceArns
        }

        private enum CodingKeys: String, CodingKey {
            case resourceArns
        }
    }

    public struct DescribeTagsResponse: AWSDecodableShape {
        /// Information about the tags.
        public let resourceTags: [ResourceTag]?

        public init(resourceTags: [ResourceTag]? = nil) {
            self.resourceTags = resourceTags
        }

        private enum CodingKeys: String, CodingKey {
            case resourceTags
        }
    }

    public struct DescribeVirtualInterfacesRequest: AWSEncodableShape {
        /// The ID of the connection.
        public let connectionId: String?
        /// The ID of the virtual interface.
        public let virtualInterfaceId: String?

        public init(connectionId: String? = nil, virtualInterfaceId: String? = nil) {
            self.connectionId = connectionId
            self.virtualInterfaceId = virtualInterfaceId
        }

        private enum CodingKeys: String, CodingKey {
            case connectionId
            case virtualInterfaceId
        }
    }

    public struct DirectConnectGateway: AWSDecodableShape {
        /// The autonomous system number (ASN) for the Amazon side of the connection.
        public let amazonSideAsn: Int64?
        /// The ID of the Direct Connect gateway.
        public let directConnectGatewayId: String?
        /// The name of the Direct Connect gateway.
        public let directConnectGatewayName: String?
        /// The state of the Direct Connect gateway. The following are the possible values:    pending: The initial state after calling CreateDirectConnectGateway.    available: The Direct Connect gateway is ready for use.    deleting: The initial state after calling DeleteDirectConnectGateway.    deleted: The Direct Connect gateway is deleted and cannot pass traffic.
        public let directConnectGatewayState: DirectConnectGatewayState?
        /// The ID of the account that owns the Direct Connect gateway.
        public let ownerAccount: String?
        /// The error message if the state of an object failed to advance.
        public let stateChangeError: String?

        public init(amazonSideAsn: Int64? = nil, directConnectGatewayId: String? = nil, directConnectGatewayName: String? = nil, directConnectGatewayState: DirectConnectGatewayState? = nil, ownerAccount: String? = nil, stateChangeError: String? = nil) {
            self.amazonSideAsn = amazonSideAsn
            self.directConnectGatewayId = directConnectGatewayId
            self.directConnectGatewayName = directConnectGatewayName
            self.directConnectGatewayState = directConnectGatewayState
            self.ownerAccount = ownerAccount
            self.stateChangeError = stateChangeError
        }

        private enum CodingKeys: String, CodingKey {
            case amazonSideAsn
            case directConnectGatewayId
            case directConnectGatewayName
            case directConnectGatewayState
            case ownerAccount
            case stateChangeError
        }
    }

    public struct DirectConnectGatewayAssociation: AWSDecodableShape {
        /// The Amazon VPC prefixes to advertise to the Direct Connect gateway.
        public let allowedPrefixesToDirectConnectGateway: [RouteFilterPrefix]?
        /// Information about the associated gateway.
        public let associatedGateway: AssociatedGateway?
        /// The ID of the Direct Connect gateway association.
        public let associationId: String?
        /// The state of the association. The following are the possible values:    associating: The initial state after calling CreateDirectConnectGatewayAssociation.    associated: The Direct Connect gateway and virtual private gateway or transit gateway are successfully associated and ready to pass traffic.    disassociating: The initial state after calling DeleteDirectConnectGatewayAssociation.    disassociated: The virtual private gateway or transit gateway is disassociated from the Direct Connect gateway. Traffic flow between the Direct Connect gateway and virtual private gateway or transit gateway is stopped.
        public let associationState: DirectConnectGatewayAssociationState?
        /// The ID of the Direct Connect gateway.
        public let directConnectGatewayId: String?
        /// The ID of the account that owns the associated gateway.
        public let directConnectGatewayOwnerAccount: String?
        /// The error message if the state of an object failed to advance.
        public let stateChangeError: String?
        /// The ID of the virtual private gateway. Applies only to private virtual interfaces.
        public let virtualGatewayId: String?
        /// The ID of the account that owns the virtual private gateway.
        public let virtualGatewayOwnerAccount: String?
        /// The Region where the virtual private gateway is located.
        public let virtualGatewayRegion: String?

        public init(allowedPrefixesToDirectConnectGateway: [RouteFilterPrefix]? = nil, associatedGateway: AssociatedGateway? = nil, associationId: String? = nil, associationState: DirectConnectGatewayAssociationState? = nil, directConnectGatewayId: String? = nil, directConnectGatewayOwnerAccount: String? = nil, stateChangeError: String? = nil, virtualGatewayId: String? = nil, virtualGatewayOwnerAccount: String? = nil, virtualGatewayRegion: String? = nil) {
            self.allowedPrefixesToDirectConnectGateway = allowedPrefixesToDirectConnectGateway
            self.associatedGateway = associatedGateway
            self.associationId = associationId
            self.associationState = associationState
            self.directConnectGatewayId = directConnectGatewayId
            self.directConnectGatewayOwnerAccount = directConnectGatewayOwnerAccount
            self.stateChangeError = stateChangeError
            self.virtualGatewayId = virtualGatewayId
            self.virtualGatewayOwnerAccount = virtualGatewayOwnerAccount
            self.virtualGatewayRegion = virtualGatewayRegion
        }

        private enum CodingKeys: String, CodingKey {
            case allowedPrefixesToDirectConnectGateway
            case associatedGateway
            case associationId
            case associationState
            case directConnectGatewayId
            case directConnectGatewayOwnerAccount
            case stateChangeError
            case virtualGatewayId
            case virtualGatewayOwnerAccount
            case virtualGatewayRegion
        }
    }

    public struct DirectConnectGatewayAssociationProposal: AWSDecodableShape {
        /// Information about the associated gateway.
        public let associatedGateway: AssociatedGateway?
        /// The ID of the Direct Connect gateway.
        public let directConnectGatewayId: String?
        /// The ID of the account that owns the Direct Connect gateway.
        public let directConnectGatewayOwnerAccount: String?
        /// The existing Amazon VPC prefixes advertised to the Direct Connect gateway.
        public let existingAllowedPrefixesToDirectConnectGateway: [RouteFilterPrefix]?
        /// The ID of the association proposal.
        public let proposalId: String?
        /// The state of the proposal. The following are possible values:    accepted: The proposal has been accepted. The Direct Connect gateway association is available to use in this state.    deleted: The proposal has been deleted by the owner that made the proposal. The Direct Connect gateway association cannot be used in this state.    requested: The proposal has been requested. The Direct Connect gateway association cannot be used in this state.
        public let proposalState: DirectConnectGatewayAssociationProposalState?
        /// The Amazon VPC prefixes to advertise to the Direct Connect gateway.
        public let requestedAllowedPrefixesToDirectConnectGateway: [RouteFilterPrefix]?

        public init(associatedGateway: AssociatedGateway? = nil, directConnectGatewayId: String? = nil, directConnectGatewayOwnerAccount: String? = nil, existingAllowedPrefixesToDirectConnectGateway: [RouteFilterPrefix]? = nil, proposalId: String? = nil, proposalState: DirectConnectGatewayAssociationProposalState? = nil, requestedAllowedPrefixesToDirectConnectGateway: [RouteFilterPrefix]? = nil) {
            self.associatedGateway = associatedGateway
            self.directConnectGatewayId = directConnectGatewayId
            self.directConnectGatewayOwnerAccount = directConnectGatewayOwnerAccount
            self.existingAllowedPrefixesToDirectConnectGateway = existingAllowedPrefixesToDirectConnectGateway
            self.proposalId = proposalId
            self.proposalState = proposalState
            self.requestedAllowedPrefixesToDirectConnectGateway = requestedAllowedPrefixesToDirectConnectGateway
        }

        private enum CodingKeys: String, CodingKey {
            case associatedGateway
            case directConnectGatewayId
            case directConnectGatewayOwnerAccount
            case existingAllowedPrefixesToDirectConnectGateway
            case proposalId
            case proposalState
            case requestedAllowedPrefixesToDirectConnectGateway
        }
    }

    public struct DirectConnectGatewayAttachment: AWSDecodableShape {
        /// The state of the attachment. The following are the possible values:    attaching: The initial state after a virtual interface is created using the Direct Connect gateway.    attached: The Direct Connect gateway and virtual interface are attached and ready to pass traffic.    detaching: The initial state after calling DeleteVirtualInterface.    detached: The virtual interface is detached from the Direct Connect gateway. Traffic flow between the Direct Connect gateway and virtual interface is stopped.
        public let attachmentState: DirectConnectGatewayAttachmentState?
        /// The type of attachment.
        public let attachmentType: DirectConnectGatewayAttachmentType?
        /// The ID of the Direct Connect gateway.
        public let directConnectGatewayId: String?
        /// The error message if the state of an object failed to advance.
        public let stateChangeError: String?
        /// The ID of the virtual interface.
        public let virtualInterfaceId: String?
        /// The ID of the account that owns the virtual interface.
        public let virtualInterfaceOwnerAccount: String?
        /// The Region where the virtual interface is located.
        public let virtualInterfaceRegion: String?

        public init(attachmentState: DirectConnectGatewayAttachmentState? = nil, attachmentType: DirectConnectGatewayAttachmentType? = nil, directConnectGatewayId: String? = nil, stateChangeError: String? = nil, virtualInterfaceId: String? = nil, virtualInterfaceOwnerAccount: String? = nil, virtualInterfaceRegion: String? = nil) {
            self.attachmentState = attachmentState
            self.attachmentType = attachmentType
            self.directConnectGatewayId = directConnectGatewayId
            self.stateChangeError = stateChangeError
            self.virtualInterfaceId = virtualInterfaceId
            self.virtualInterfaceOwnerAccount = virtualInterfaceOwnerAccount
            self.virtualInterfaceRegion = virtualInterfaceRegion
        }

        private enum CodingKeys: String, CodingKey {
            case attachmentState
            case attachmentType
            case directConnectGatewayId
            case stateChangeError
            case virtualInterfaceId
            case virtualInterfaceOwnerAccount
            case virtualInterfaceRegion
        }
    }

    public struct DisassociateConnectionFromLagRequest: AWSEncodableShape {
        /// The ID of the connection.
        public let connectionId: String
        /// The ID of the LAG.
        public let lagId: String

        public init(connectionId: String, lagId: String) {
            self.connectionId = connectionId
            self.lagId = lagId
        }

        private enum CodingKeys: String, CodingKey {
            case connectionId
            case lagId
        }
    }

    public struct DisassociateMacSecKeyRequest: AWSEncodableShape {
        /// The ID of the dedicated connection (dxcon-xxxx), or the ID of the LAG (dxlag-xxxx). You can use DescribeConnections or DescribeLags to retrieve connection ID.
        public let connectionId: String
        /// The Amazon Resource Name (ARN) of the MAC Security (MACsec) secret key. You can use DescribeConnections to retrieve the ARN of the MAC Security (MACsec) secret key.
        public let secretARN: String

        public init(connectionId: String, secretARN: String) {
            self.connectionId = connectionId
            self.secretARN = secretARN
        }

        private enum CodingKeys: String, CodingKey {
            case connectionId
            case secretARN
        }
    }

    public struct DisassociateMacSecKeyResponse: AWSDecodableShape {
        /// The ID of the dedicated connection (dxcon-xxxx), or the ID of the LAG (dxlag-xxxx).
        public let connectionId: String?
        /// The MAC Security (MACsec) security keys no longer associated with the dedicated connection.
        public let macSecKeys: [MacSecKey]?

        public init(connectionId: String? = nil, macSecKeys: [MacSecKey]? = nil) {
            self.connectionId = connectionId
            self.macSecKeys = macSecKeys
        }

        private enum CodingKeys: String, CodingKey {
            case connectionId
            case macSecKeys
        }
    }

    public struct Interconnect: AWSDecodableShape {
        /// The Direct Connect endpoint on which the physical connection terminates.
        public let awsDevice: String?
        /// The Direct Connect endpoint on which the physical connection terminates.
        public let awsDeviceV2: String?
        /// The Direct Connect endpoint that terminates a physical connection's BGP sessions.
        public let awsLogicalDeviceId: String?
        /// The bandwidth of the connection.
        public let bandwidth: String?
        /// Indicates whether the interconnect supports a secondary BGP in the same address family (IPv4/IPv6).
        public let hasLogicalRedundancy: HasLogicalRedundancy?
        /// The ID of the interconnect.
        public let interconnectId: String?
        /// The name of the interconnect.
        public let interconnectName: String?
        /// The state of the interconnect. The following are the possible values:    requested: The initial state of an interconnect. The interconnect stays in the requested state until the Letter of Authorization (LOA) is sent to the customer.    pending: The interconnect is approved, and is being initialized.    available: The network link is up, and the interconnect is ready for use.    down: The network link is down.    deleting: The interconnect is being deleted.    deleted: The interconnect is deleted.    unknown: The state of the interconnect is not available.
        public let interconnectState: InterconnectState?
        /// Indicates whether jumbo frames (9001 MTU) are supported.
        public let jumboFrameCapable: Bool?
        /// The ID of the LAG.
        public let lagId: String?
        /// The time of the most recent call to DescribeLoa for this connection.
        public let loaIssueTime: Date?
        /// The location of the connection.
        public let location: String?
        /// The name of the service provider associated with the interconnect.
        public let providerName: String?
        /// The Region where the connection is located.
        public let region: String?
        /// The tags associated with the interconnect.
        public let tags: [Tag]?

        public init(awsDevice: String? = nil, awsDeviceV2: String? = nil, awsLogicalDeviceId: String? = nil, bandwidth: String? = nil, hasLogicalRedundancy: HasLogicalRedundancy? = nil, interconnectId: String? = nil, interconnectName: String? = nil, interconnectState: InterconnectState? = nil, jumboFrameCapable: Bool? = nil, lagId: String? = nil, loaIssueTime: Date? = nil, location: String? = nil, providerName: String? = nil, region: String? = nil, tags: [Tag]? = nil) {
            self.awsDevice = awsDevice
            self.awsDeviceV2 = awsDeviceV2
            self.awsLogicalDeviceId = awsLogicalDeviceId
            self.bandwidth = bandwidth
            self.hasLogicalRedundancy = hasLogicalRedundancy
            self.interconnectId = interconnectId
            self.interconnectName = interconnectName
            self.interconnectState = interconnectState
            self.jumboFrameCapable = jumboFrameCapable
            self.lagId = lagId
            self.loaIssueTime = loaIssueTime
            self.location = location
            self.providerName = providerName
            self.region = region
            self.tags = tags
        }

        private enum CodingKeys: String, CodingKey {
            case awsDevice
            case awsDeviceV2
            case awsLogicalDeviceId
            case bandwidth
            case hasLogicalRedundancy
            case interconnectId
            case interconnectName
            case interconnectState
            case jumboFrameCapable
            case lagId
            case loaIssueTime
            case location
            case providerName
            case region
            case tags
        }
    }

    public struct Interconnects: AWSDecodableShape {
        /// The interconnects.
        public let interconnects: [Interconnect]?

        public init(interconnects: [Interconnect]? = nil) {
            self.interconnects = interconnects
        }

        private enum CodingKeys: String, CodingKey {
            case interconnects
        }
    }

    public struct Lag: AWSDecodableShape {
        /// Indicates whether the LAG can host other connections.
        public let allowsHostedConnections: Bool?
        /// The Direct Connect endpoint that hosts the LAG.
        public let awsDevice: String?
        /// The Direct Connect endpoint that hosts the LAG.
        public let awsDeviceV2: String?
        /// The Direct Connect endpoint that terminates a physical connection's BGP sessions.
        public let awsLogicalDeviceId: String?
        /// The connections bundled by the LAG.
        public let connections: [Connection]?
        /// The individual bandwidth of the physical connections bundled by the LAG. The possible values are 1Gbps and 10Gbps.
        public let connectionsBandwidth: String?
        /// The LAG MAC Security (MACsec) encryption mode. The valid values are no_encrypt, should_encrypt, and must_encrypt.
        public let encryptionMode: String?
        /// Indicates whether the LAG supports a secondary BGP peer in the same address family (IPv4/IPv6).
        public let hasLogicalRedundancy: HasLogicalRedundancy?
        /// Indicates whether jumbo frames (9001 MTU) are supported.
        public let jumboFrameCapable: Bool?
        /// The ID of the LAG.
        public let lagId: String?
        /// The name of the LAG.
        public let lagName: String?
        /// The state of the LAG. The following are the possible values:    requested: The initial state of a LAG. The LAG stays in the requested state until the Letter of Authorization (LOA) is available.    pending: The LAG has been approved and is being initialized.    available: The network link is established and the LAG is ready for use.    down: The network link is down.    deleting: The LAG is being deleted.    deleted: The LAG is deleted.    unknown: The state of the LAG is not available.
        public let lagState: LagState?
        /// The location of the LAG.
        public let location: String?
        /// Indicates whether the LAG supports MAC Security (MACsec).
        public let macSecCapable: Bool?
        /// The MAC Security (MACsec) security keys associated with the LAG.
        public let macSecKeys: [MacSecKey]?
        /// The minimum number of physical dedicated connections that must be operational for the LAG itself to be operational.
        public let minimumLinks: Int?
        /// The number of physical dedicated connections bundled by the LAG, up to a maximum of 10.
        public let numberOfConnections: Int?
        /// The ID of the account that owns the LAG.
        public let ownerAccount: String?
        /// The name of the service provider associated with the LAG.
        public let providerName: String?
        /// The Region where the connection is located.
        public let region: String?
        /// The tags associated with the LAG.
        public let tags: [Tag]?

        public init(allowsHostedConnections: Bool? = nil, awsDevice: String? = nil, awsDeviceV2: String? = nil, awsLogicalDeviceId: String? = nil, connections: [Connection]? = nil, connectionsBandwidth: String? = nil, encryptionMode: String? = nil, hasLogicalRedundancy: HasLogicalRedundancy? = nil, jumboFrameCapable: Bool? = nil, lagId: String? = nil, lagName: String? = nil, lagState: LagState? = nil, location: String? = nil, macSecCapable: Bool? = nil, macSecKeys: [MacSecKey]? = nil, minimumLinks: Int? = nil, numberOfConnections: Int? = nil, ownerAccount: String? = nil, providerName: String? = nil, region: String? = nil, tags: [Tag]? = nil) {
            self.allowsHostedConnections = allowsHostedConnections
            self.awsDevice = awsDevice
            self.awsDeviceV2 = awsDeviceV2
            self.awsLogicalDeviceId = awsLogicalDeviceId
            self.connections = connections
            self.connectionsBandwidth = connectionsBandwidth
            self.encryptionMode = encryptionMode
            self.hasLogicalRedundancy = hasLogicalRedundancy
            self.jumboFrameCapable = jumboFrameCapable
            self.lagId = lagId
            self.lagName = lagName
            self.lagState = lagState
            self.location = location
            self.macSecCapable = macSecCapable
            self.macSecKeys = macSecKeys
            self.minimumLinks = minimumLinks
            self.numberOfConnections = numberOfConnections
            self.ownerAccount = ownerAccount
            self.providerName = providerName
            self.region = region
            self.tags = tags
        }

        private enum CodingKeys: String, CodingKey {
            case allowsHostedConnections
            case awsDevice
            case awsDeviceV2
            case awsLogicalDeviceId
            case connections
            case connectionsBandwidth
            case encryptionMode
            case hasLogicalRedundancy
            case jumboFrameCapable
            case lagId
            case lagName
            case lagState
            case location
            case macSecCapable
            case macSecKeys
            case minimumLinks
            case numberOfConnections
            case ownerAccount
            case providerName
            case region
            case tags
        }
    }

    public struct Lags: AWSDecodableShape {
        /// The LAGs.
        public let lags: [Lag]?

        public init(lags: [Lag]? = nil) {
            self.lags = lags
        }

        private enum CodingKeys: String, CodingKey {
            case lags
        }
    }

    public struct ListVirtualInterfaceTestHistoryRequest: AWSEncodableShape {
        /// The BGP peers that were placed in the DOWN state during the virtual interface failover test.
        public let bgpPeers: [String]?
        /// The maximum number of results to return with a single call. To retrieve the remaining results, make another call with the returned nextToken value. If MaxResults is given a value larger than 100, only 100 results are returned.
        public let maxResults: Int?
        /// The token for the next page of results.
        public let nextToken: String?
        /// The status of the virtual interface failover test.
        public let status: String?
        /// The ID of the virtual interface failover test.
        public let testId: String?
        /// The ID of the virtual interface that was tested.
        public let virtualInterfaceId: String?

        public init(bgpPeers: [String]? = nil, maxResults: Int? = nil, nextToken: String? = nil, status: String? = nil, testId: String? = nil, virtualInterfaceId: String? = nil) {
            self.bgpPeers = bgpPeers
            self.maxResults = maxResults
            self.nextToken = nextToken
            self.status = status
            self.testId = testId
            self.virtualInterfaceId = virtualInterfaceId
        }

        private enum CodingKeys: String, CodingKey {
            case bgpPeers
            case maxResults
            case nextToken
            case status
            case testId
            case virtualInterfaceId
        }
    }

    public struct ListVirtualInterfaceTestHistoryResponse: AWSDecodableShape {
        /// The token to use to retrieve the next page of results. This value is null when there are no more results to return.
        public let nextToken: String?
        /// The ID of the tested virtual interface.
        public let virtualInterfaceTestHistory: [VirtualInterfaceTestHistory]?

        public init(nextToken: String? = nil, virtualInterfaceTestHistory: [VirtualInterfaceTestHistory]? = nil) {
            self.nextToken = nextToken
            self.virtualInterfaceTestHistory = virtualInterfaceTestHistory
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken
            case virtualInterfaceTestHistory
        }
    }

    public struct Loa: AWSDecodableShape {
        /// The binary contents of the LOA-CFA document.
        public let loaContent: Data?
        /// The standard media type for the LOA-CFA document. The only supported value is application/pdf.
        public let loaContentType: LoaContentType?

        public init(loaContent: Data? = nil, loaContentType: LoaContentType? = nil) {
            self.loaContent = loaContent
            self.loaContentType = loaContentType
        }

        private enum CodingKeys: String, CodingKey {
            case loaContent
            case loaContentType
        }
    }

    public struct Location: AWSDecodableShape {
        /// The available MAC Security (MACsec) port speeds for the location.
        public let availableMacSecPortSpeeds: [String]?
        /// The available port speeds for the location.
        public let availablePortSpeeds: [String]?
        /// The name of the service provider for the location.
        public let availableProviders: [String]?
        /// The code for the location.
        public let locationCode: String?
        /// The name of the location. This includes the name of the colocation partner and the physical site of the building.
        public let locationName: String?
        /// The Region for the location.
        public let region: String?

        public init(availableMacSecPortSpeeds: [String]? = nil, availablePortSpeeds: [String]? = nil, availableProviders: [String]? = nil, locationCode: String? = nil, locationName: String? = nil, region: String? = nil) {
            self.availableMacSecPortSpeeds = availableMacSecPortSpeeds
            self.availablePortSpeeds = availablePortSpeeds
            self.availableProviders = availableProviders
            self.locationCode = locationCode
            self.locationName = locationName
            self.region = region
        }

        private enum CodingKeys: String, CodingKey {
            case availableMacSecPortSpeeds
            case availablePortSpeeds
            case availableProviders
            case locationCode
            case locationName
            case region
        }
    }

    public struct Locations: AWSDecodableShape {
        /// The locations.
        public let locations: [Location]?

        public init(locations: [Location]? = nil) {
            self.locations = locations
        }

        private enum CodingKeys: String, CodingKey {
            case locations
        }
    }

    public struct MacSecKey: AWSDecodableShape {
        /// The Connection Key Name (CKN) for the MAC Security secret key.
        public let ckn: String?
        /// The Amazon Resource Name (ARN) of the MAC Security (MACsec) secret key.
        public let secretARN: String?
        /// The date that the MAC Security (MACsec) secret key takes effect. The value is displayed in UTC format.
        public let startOn: String?
        /// The state of the MAC Security (MACsec) secret key. The possible values are:    associating: The MAC Security (MACsec) secret key is being validated and not yet associated with the connection or LAG.    associated: The MAC Security (MACsec) secret key is validated and associated with the connection or LAG.    disassociating: The MAC Security (MACsec) secret key is being disassociated from the connection or LAG    disassociated: The MAC Security (MACsec) secret key is no longer associated with the connection or LAG.
        public let state: String?

        public init(ckn: String? = nil, secretARN: String? = nil, startOn: String? = nil, state: String? = nil) {
            self.ckn = ckn
            self.secretARN = secretARN
            self.startOn = startOn
            self.state = state
        }

        private enum CodingKeys: String, CodingKey {
            case ckn
            case secretARN
            case startOn
            case state
        }
    }

    public struct NewBGPPeer: AWSEncodableShape {
        /// The address family for the BGP peer.
        public let addressFamily: AddressFamily?
        /// The IP address assigned to the Amazon interface.
        public let amazonAddress: String?
        /// The autonomous system (AS) number for Border Gateway Protocol (BGP) configuration.
        public let asn: Int?
        /// The authentication key for BGP configuration. This string has a minimum length of 6 characters and and a maximun lenth of 80 characters.
        public let authKey: String?
        /// The IP address assigned to the customer interface.
        public let customerAddress: String?

        public init(addressFamily: AddressFamily? = nil, amazonAddress: String? = nil, asn: Int? = nil, authKey: String? = nil, customerAddress: String? = nil) {
            self.addressFamily = addressFamily
            self.amazonAddress = amazonAddress
            self.asn = asn
            self.authKey = authKey
            self.customerAddress = customerAddress
        }

        private enum CodingKeys: String, CodingKey {
            case addressFamily
            case amazonAddress
            case asn
            case authKey
            case customerAddress
        }
    }

    public struct NewPrivateVirtualInterface: AWSEncodableShape {
        /// The address family for the BGP peer.
        public let addressFamily: AddressFamily?
        /// The IP address assigned to the Amazon interface.
        public let amazonAddress: String?
        /// The autonomous system (AS) number for Border Gateway Protocol (BGP) configuration. The valid values are 1-2147483647.
        public let asn: Int
        /// The authentication key for BGP configuration. This string has a minimum length of 6 characters and and a maximun lenth of 80 characters.
        public let authKey: String?
        /// The IP address assigned to the customer interface.
        public let customerAddress: String?
        /// The ID of the Direct Connect gateway.
        public let directConnectGatewayId: String?
        /// The maximum transmission unit (MTU), in bytes. The supported values are 1500 and 9001. The default value is 1500.
        public let mtu: Int?
        /// The tags associated with the private virtual interface.
        public let tags: [Tag]?
        /// The ID of the virtual private gateway.
        public let virtualGatewayId: String?
        /// The name of the virtual interface assigned by the customer network. The name has a maximum of 100 characters. The following are valid characters: a-z, 0-9 and a hyphen (-).
        public let virtualInterfaceName: String
        /// The ID of the VLAN.
        public let vlan: Int

        public init(addressFamily: AddressFamily? = nil, amazonAddress: String? = nil, asn: Int, authKey: String? = nil, customerAddress: String? = nil, directConnectGatewayId: String? = nil, mtu: Int? = nil, tags: [Tag]? = nil, virtualGatewayId: String? = nil, virtualInterfaceName: String, vlan: Int) {
            self.addressFamily = addressFamily
            self.amazonAddress = amazonAddress
            self.asn = asn
            self.authKey = authKey
            self.customerAddress = customerAddress
            self.directConnectGatewayId = directConnectGatewayId
            self.mtu = mtu
            self.tags = tags
            self.virtualGatewayId = virtualGatewayId
            self.virtualInterfaceName = virtualInterfaceName
            self.vlan = vlan
        }

        public func validate(name: String) throws {
            try self.tags?.forEach {
                try $0.validate(name: "\(name).tags[]")
            }
            try self.validate(self.tags, name: "tags", parent: name, min: 1)
        }

        private enum CodingKeys: String, CodingKey {
            case addressFamily
            case amazonAddress
            case asn
            case authKey
            case customerAddress
            case directConnectGatewayId
            case mtu
            case tags
            case virtualGatewayId
            case virtualInterfaceName
            case vlan
        }
    }

    public struct NewPrivateVirtualInterfaceAllocation: AWSEncodableShape {
        /// The address family for the BGP peer.
        public let addressFamily: AddressFamily?
        /// The IP address assigned to the Amazon interface.
        public let amazonAddress: String?
        /// The autonomous system (AS) number for Border Gateway Protocol (BGP) configuration. The valid values are 1-2147483647.
        public let asn: Int
        /// The authentication key for BGP configuration. This string has a minimum length of 6 characters and and a maximun lenth of 80 characters.
        public let authKey: String?
        /// The IP address assigned to the customer interface.
        public let customerAddress: String?
        /// The maximum transmission unit (MTU), in bytes. The supported values are 1500 and 9001. The default value is 1500.
        public let mtu: Int?
        /// The tags associated with the private virtual interface.
        public let tags: [Tag]?
        /// The name of the virtual interface assigned by the customer network. The name has a maximum of 100 characters. The following are valid characters: a-z, 0-9 and a hyphen (-).
        public let virtualInterfaceName: String
        /// The ID of the VLAN.
        public let vlan: Int

        public init(addressFamily: AddressFamily? = nil, amazonAddress: String? = nil, asn: Int, authKey: String? = nil, customerAddress: String? = nil, mtu: Int? = nil, tags: [Tag]? = nil, virtualInterfaceName: String, vlan: Int) {
            self.addressFamily = addressFamily
            self.amazonAddress = amazonAddress
            self.asn = asn
            self.authKey = authKey
            self.customerAddress = customerAddress
            self.mtu = mtu
            self.tags = tags
            self.virtualInterfaceName = virtualInterfaceName
            self.vlan = vlan
        }

        public func validate(name: String) throws {
            try self.tags?.forEach {
                try $0.validate(name: "\(name).tags[]")
            }
            try self.validate(self.tags, name: "tags", parent: name, min: 1)
        }

        private enum CodingKeys: String, CodingKey {
            case addressFamily
            case amazonAddress
            case asn
            case authKey
            case customerAddress
            case mtu
            case tags
            case virtualInterfaceName
            case vlan
        }
    }

    public struct NewPublicVirtualInterface: AWSEncodableShape {
        /// The address family for the BGP peer.
        public let addressFamily: AddressFamily?
        /// The IP address assigned to the Amazon interface.
        public let amazonAddress: String?
        /// The autonomous system (AS) number for Border Gateway Protocol (BGP) configuration. The valid values are 1-2147483647.
        public let asn: Int
        /// The authentication key for BGP configuration. This string has a minimum length of 6 characters and and a maximun lenth of 80 characters.
        public let authKey: String?
        /// The IP address assigned to the customer interface.
        public let customerAddress: String?
        /// The routes to be advertised to the Amazon Web Services network in this Region. Applies to public virtual interfaces.
        public let routeFilterPrefixes: [RouteFilterPrefix]?
        /// The tags associated with the public virtual interface.
        public let tags: [Tag]?
        /// The name of the virtual interface assigned by the customer network. The name has a maximum of 100 characters. The following are valid characters: a-z, 0-9 and a hyphen (-).
        public let virtualInterfaceName: String
        /// The ID of the VLAN.
        public let vlan: Int

        public init(addressFamily: AddressFamily? = nil, amazonAddress: String? = nil, asn: Int, authKey: String? = nil, customerAddress: String? = nil, routeFilterPrefixes: [RouteFilterPrefix]? = nil, tags: [Tag]? = nil, virtualInterfaceName: String, vlan: Int) {
            self.addressFamily = addressFamily
            self.amazonAddress = amazonAddress
            self.asn = asn
            self.authKey = authKey
            self.customerAddress = customerAddress
            self.routeFilterPrefixes = routeFilterPrefixes
            self.tags = tags
            self.virtualInterfaceName = virtualInterfaceName
            self.vlan = vlan
        }

        public func validate(name: String) throws {
            try self.tags?.forEach {
                try $0.validate(name: "\(name).tags[]")
            }
            try self.validate(self.tags, name: "tags", parent: name, min: 1)
        }

        private enum CodingKeys: String, CodingKey {
            case addressFamily
            case amazonAddress
            case asn
            case authKey
            case customerAddress
            case routeFilterPrefixes
            case tags
            case virtualInterfaceName
            case vlan
        }
    }

    public struct NewPublicVirtualInterfaceAllocation: AWSEncodableShape {
        /// The address family for the BGP peer.
        public let addressFamily: AddressFamily?
        /// The IP address assigned to the Amazon interface.
        public let amazonAddress: String?
        /// The autonomous system (AS) number for Border Gateway Protocol (BGP) configuration. The valid values are 1-2147483647.
        public let asn: Int
        /// The authentication key for BGP configuration. This string has a minimum length of 6 characters and and a maximun lenth of 80 characters.
        public let authKey: String?
        /// The IP address assigned to the customer interface.
        public let customerAddress: String?
        /// The routes to be advertised to the Amazon Web Services network in this Region. Applies to public virtual interfaces.
        public let routeFilterPrefixes: [RouteFilterPrefix]?
        /// The tags associated with the public virtual interface.
        public let tags: [Tag]?
        /// The name of the virtual interface assigned by the customer network. The name has a maximum of 100 characters. The following are valid characters: a-z, 0-9 and a hyphen (-).
        public let virtualInterfaceName: String
        /// The ID of the VLAN.
        public let vlan: Int

        public init(addressFamily: AddressFamily? = nil, amazonAddress: String? = nil, asn: Int, authKey: String? = nil, customerAddress: String? = nil, routeFilterPrefixes: [RouteFilterPrefix]? = nil, tags: [Tag]? = nil, virtualInterfaceName: String, vlan: Int) {
            self.addressFamily = addressFamily
            self.amazonAddress = amazonAddress
            self.asn = asn
            self.authKey = authKey
            self.customerAddress = customerAddress
            self.routeFilterPrefixes = routeFilterPrefixes
            self.tags = tags
            self.virtualInterfaceName = virtualInterfaceName
            self.vlan = vlan
        }

        public func validate(name: String) throws {
            try self.tags?.forEach {
                try $0.validate(name: "\(name).tags[]")
            }
            try self.validate(self.tags, name: "tags", parent: name, min: 1)
        }

        private enum CodingKeys: String, CodingKey {
            case addressFamily
            case amazonAddress
            case asn
            case authKey
            case customerAddress
            case routeFilterPrefixes
            case tags
            case virtualInterfaceName
            case vlan
        }
    }

    public struct NewTransitVirtualInterface: AWSEncodableShape {
        /// The address family for the BGP peer.
        public let addressFamily: AddressFamily?
        /// The IP address assigned to the Amazon interface.
        public let amazonAddress: String?
        /// The autonomous system (AS) number for Border Gateway Protocol (BGP) configuration. The valid values are 1-2147483647.
        public let asn: Int?
        /// The authentication key for BGP configuration. This string has a minimum length of 6 characters and and a maximun lenth of 80 characters.
        public let authKey: String?
        /// The IP address assigned to the customer interface.
        public let customerAddress: String?
        /// The ID of the Direct Connect gateway.
        public let directConnectGatewayId: String?
        /// The maximum transmission unit (MTU), in bytes. The supported values are 1500 and 9001. The default value is 1500.
        public let mtu: Int?
        /// The tags associated with the transitive virtual interface.
        public let tags: [Tag]?
        /// The name of the virtual interface assigned by the customer network. The name has a maximum of 100 characters. The following are valid characters: a-z, 0-9 and a hyphen (-).
        public let virtualInterfaceName: String?
        /// The ID of the VLAN.
        public let vlan: Int?

        public init(addressFamily: AddressFamily? = nil, amazonAddress: String? = nil, asn: Int? = nil, authKey: String? = nil, customerAddress: String? = nil, directConnectGatewayId: String? = nil, mtu: Int? = nil, tags: [Tag]? = nil, virtualInterfaceName: String? = nil, vlan: Int? = nil) {
            self.addressFamily = addressFamily
            self.amazonAddress = amazonAddress
            self.asn = asn
            self.authKey = authKey
            self.customerAddress = customerAddress
            self.directConnectGatewayId = directConnectGatewayId
            self.mtu = mtu
            self.tags = tags
            self.virtualInterfaceName = virtualInterfaceName
            self.vlan = vlan
        }

        public func validate(name: String) throws {
            try self.tags?.forEach {
                try $0.validate(name: "\(name).tags[]")
            }
            try self.validate(self.tags, name: "tags", parent: name, min: 1)
        }

        private enum CodingKeys: String, CodingKey {
            case addressFamily
            case amazonAddress
            case asn
            case authKey
            case customerAddress
            case directConnectGatewayId
            case mtu
            case tags
            case virtualInterfaceName
            case vlan
        }
    }

    public struct NewTransitVirtualInterfaceAllocation: AWSEncodableShape {
        /// The address family for the BGP peer.
        public let addressFamily: AddressFamily?
        /// The IP address assigned to the Amazon interface.
        public let amazonAddress: String?
        /// The autonomous system (AS) number for Border Gateway Protocol (BGP) configuration. The valid values are 1-2147483647.
        public let asn: Int?
        /// The authentication key for BGP configuration. This string has a minimum length of 6 characters and and a maximun lenth of 80 characters.
        public let authKey: String?
        /// The IP address assigned to the customer interface.
        public let customerAddress: String?
        /// The maximum transmission unit (MTU), in bytes. The supported values are 1500 and 9001. The default value is 1500.
        public let mtu: Int?
        /// The tags associated with the transitive virtual interface.
        public let tags: [Tag]?
        /// The name of the virtual interface assigned by the customer network. The name has a maximum of 100 characters. The following are valid characters: a-z, 0-9 and a hyphen (-).
        public let virtualInterfaceName: String?
        /// The ID of the VLAN.
        public let vlan: Int?

        public init(addressFamily: AddressFamily? = nil, amazonAddress: String? = nil, asn: Int? = nil, authKey: String? = nil, customerAddress: String? = nil, mtu: Int? = nil, tags: [Tag]? = nil, virtualInterfaceName: String? = nil, vlan: Int? = nil) {
            self.addressFamily = addressFamily
            self.amazonAddress = amazonAddress
            self.asn = asn
            self.authKey = authKey
            self.customerAddress = customerAddress
            self.mtu = mtu
            self.tags = tags
            self.virtualInterfaceName = virtualInterfaceName
            self.vlan = vlan
        }

        public func validate(name: String) throws {
            try self.tags?.forEach {
                try $0.validate(name: "\(name).tags[]")
            }
            try self.validate(self.tags, name: "tags", parent: name, min: 1)
        }

        private enum CodingKeys: String, CodingKey {
            case addressFamily
            case amazonAddress
            case asn
            case authKey
            case customerAddress
            case mtu
            case tags
            case virtualInterfaceName
            case vlan
        }
    }

    public struct ResourceTag: AWSDecodableShape {
        /// The Amazon Resource Name (ARN) of the resource.
        public let resourceArn: String?
        /// The tags.
        public let tags: [Tag]?

        public init(resourceArn: String? = nil, tags: [Tag]? = nil) {
            self.resourceArn = resourceArn
            self.tags = tags
        }

        private enum CodingKeys: String, CodingKey {
            case resourceArn
            case tags
        }
    }

    public struct RouteFilterPrefix: AWSEncodableShape & AWSDecodableShape {
        /// The CIDR block for the advertised route. Separate multiple routes using commas. An IPv6 CIDR must use /64 or shorter.
        public let cidr: String?

        public init(cidr: String? = nil) {
            self.cidr = cidr
        }

        private enum CodingKeys: String, CodingKey {
            case cidr
        }
    }

    public struct StartBgpFailoverTestRequest: AWSEncodableShape {
        /// The BGP peers to place in the DOWN state.
        public let bgpPeers: [String]?
        /// The time in minutes that the virtual interface failover test will last. Maximum value: 180 minutes (3 hours). Default: 180 minutes (3 hours).
        public let testDurationInMinutes: Int?
        /// The ID of the virtual interface you want to test.
        public let virtualInterfaceId: String

        public init(bgpPeers: [String]? = nil, testDurationInMinutes: Int? = nil, virtualInterfaceId: String) {
            self.bgpPeers = bgpPeers
            self.testDurationInMinutes = testDurationInMinutes
            self.virtualInterfaceId = virtualInterfaceId
        }

        private enum CodingKeys: String, CodingKey {
            case bgpPeers
            case testDurationInMinutes
            case virtualInterfaceId
        }
    }

    public struct StartBgpFailoverTestResponse: AWSDecodableShape {
        /// Information about the virtual interface failover test.
        public let virtualInterfaceTest: VirtualInterfaceTestHistory?

        public init(virtualInterfaceTest: VirtualInterfaceTestHistory? = nil) {
            self.virtualInterfaceTest = virtualInterfaceTest
        }

        private enum CodingKeys: String, CodingKey {
            case virtualInterfaceTest
        }
    }

    public struct StopBgpFailoverTestRequest: AWSEncodableShape {
        /// The ID of the virtual interface you no longer want to test.
        public let virtualInterfaceId: String

        public init(virtualInterfaceId: String) {
            self.virtualInterfaceId = virtualInterfaceId
        }

        private enum CodingKeys: String, CodingKey {
            case virtualInterfaceId
        }
    }

    public struct StopBgpFailoverTestResponse: AWSDecodableShape {
        /// Information about the virtual interface failover test.
        public let virtualInterfaceTest: VirtualInterfaceTestHistory?

        public init(virtualInterfaceTest: VirtualInterfaceTestHistory? = nil) {
            self.virtualInterfaceTest = virtualInterfaceTest
        }

        private enum CodingKeys: String, CodingKey {
            case virtualInterfaceTest
        }
    }

    public struct Tag: AWSEncodableShape & AWSDecodableShape {
        /// The key.
        public let key: String
        /// The value.
        public let value: String?

        public init(key: String, value: String? = nil) {
            self.key = key
            self.value = value
        }

        public func validate(name: String) throws {
            try self.validate(self.key, name: "key", parent: name, max: 128)
            try self.validate(self.key, name: "key", parent: name, min: 1)
            try self.validate(self.key, name: "key", parent: name, pattern: "^([\\p{L}\\p{Z}\\p{N}_.:/=+\\-@]*)$")
            try self.validate(self.value, name: "value", parent: name, max: 256)
            try self.validate(self.value, name: "value", parent: name, min: 0)
            try self.validate(self.value, name: "value", parent: name, pattern: "^([\\p{L}\\p{Z}\\p{N}_.:/=+\\-@]*)$")
        }

        private enum CodingKeys: String, CodingKey {
            case key
            case value
        }
    }

    public struct TagResourceRequest: AWSEncodableShape {
        /// The Amazon Resource Name (ARN) of the resource.
        public let resourceArn: String
        /// The tags to add.
        public let tags: [Tag]

        public init(resourceArn: String, tags: [Tag]) {
            self.resourceArn = resourceArn
            self.tags = tags
        }

        public func validate(name: String) throws {
            try self.tags.forEach {
                try $0.validate(name: "\(name).tags[]")
            }
            try self.validate(self.tags, name: "tags", parent: name, min: 1)
        }

        private enum CodingKeys: String, CodingKey {
            case resourceArn
            case tags
        }
    }

    public struct TagResourceResponse: AWSDecodableShape {
        public init() {}
    }

    public struct UntagResourceRequest: AWSEncodableShape {
        /// The Amazon Resource Name (ARN) of the resource.
        public let resourceArn: String
        /// The tag keys of the tags to remove.
        public let tagKeys: [String]

        public init(resourceArn: String, tagKeys: [String]) {
            self.resourceArn = resourceArn
            self.tagKeys = tagKeys
        }

        public func validate(name: String) throws {
            try self.tagKeys.forEach {
                try validate($0, name: "tagKeys[]", parent: name, max: 128)
                try validate($0, name: "tagKeys[]", parent: name, min: 1)
                try validate($0, name: "tagKeys[]", parent: name, pattern: "^([\\p{L}\\p{Z}\\p{N}_.:/=+\\-@]*)$")
            }
        }

        private enum CodingKeys: String, CodingKey {
            case resourceArn
            case tagKeys
        }
    }

    public struct UntagResourceResponse: AWSDecodableShape {
        public init() {}
    }

    public struct UpdateConnectionRequest: AWSEncodableShape {
        /// The ID of the dedicated connection. You can use DescribeConnections to retrieve the connection ID.
        public let connectionId: String
        /// The name of the connection.
        public let connectionName: String?
        /// The connection MAC Security (MACsec) encryption mode. The valid values are no_encrypt, should_encrypt, and must_encrypt.
        public let encryptionMode: String?

        public init(connectionId: String, connectionName: String? = nil, encryptionMode: String? = nil) {
            self.connectionId = connectionId
            self.connectionName = connectionName
            self.encryptionMode = encryptionMode
        }

        private enum CodingKeys: String, CodingKey {
            case connectionId
            case connectionName
            case encryptionMode
        }
    }

    public struct UpdateDirectConnectGatewayAssociationRequest: AWSEncodableShape {
        /// The Amazon VPC prefixes to advertise to the Direct Connect gateway.
        public let addAllowedPrefixesToDirectConnectGateway: [RouteFilterPrefix]?
        /// The ID of the Direct Connect gateway association.
        public let associationId: String?
        /// The Amazon VPC prefixes to no longer advertise to the Direct Connect gateway.
        public let removeAllowedPrefixesToDirectConnectGateway: [RouteFilterPrefix]?

        public init(addAllowedPrefixesToDirectConnectGateway: [RouteFilterPrefix]? = nil, associationId: String? = nil, removeAllowedPrefixesToDirectConnectGateway: [RouteFilterPrefix]? = nil) {
            self.addAllowedPrefixesToDirectConnectGateway = addAllowedPrefixesToDirectConnectGateway
            self.associationId = associationId
            self.removeAllowedPrefixesToDirectConnectGateway = removeAllowedPrefixesToDirectConnectGateway
        }

        private enum CodingKeys: String, CodingKey {
            case addAllowedPrefixesToDirectConnectGateway
            case associationId
            case removeAllowedPrefixesToDirectConnectGateway
        }
    }

    public struct UpdateDirectConnectGatewayAssociationResult: AWSDecodableShape {
        public let directConnectGatewayAssociation: DirectConnectGatewayAssociation?

        public init(directConnectGatewayAssociation: DirectConnectGatewayAssociation? = nil) {
            self.directConnectGatewayAssociation = directConnectGatewayAssociation
        }

        private enum CodingKeys: String, CodingKey {
            case directConnectGatewayAssociation
        }
    }

    public struct UpdateLagRequest: AWSEncodableShape {
        /// The LAG MAC Security (MACsec) encryption mode. Amazon Web Services applies the value to all connections which are part of the LAG.
        public let encryptionMode: String?
        /// The ID of the LAG.
        public let lagId: String
        /// The name of the LAG.
        public let lagName: String?
        /// The minimum number of physical connections that must be operational for the LAG itself to be operational.
        public let minimumLinks: Int?

        public init(encryptionMode: String? = nil, lagId: String, lagName: String? = nil, minimumLinks: Int? = nil) {
            self.encryptionMode = encryptionMode
            self.lagId = lagId
            self.lagName = lagName
            self.minimumLinks = minimumLinks
        }

        private enum CodingKeys: String, CodingKey {
            case encryptionMode
            case lagId
            case lagName
            case minimumLinks
        }
    }

    public struct UpdateVirtualInterfaceAttributesRequest: AWSEncodableShape {
        /// The maximum transmission unit (MTU), in bytes. The supported values are 1500 and 9001. The default value is 1500.
        public let mtu: Int?
        /// The ID of the virtual private interface.
        public let virtualInterfaceId: String

        public init(mtu: Int? = nil, virtualInterfaceId: String) {
            self.mtu = mtu
            self.virtualInterfaceId = virtualInterfaceId
        }

        private enum CodingKeys: String, CodingKey {
            case mtu
            case virtualInterfaceId
        }
    }

    public struct VirtualGateway: AWSDecodableShape {
        /// The ID of the virtual private gateway.
        public let virtualGatewayId: String?
        /// The state of the virtual private gateway. The following are the possible values:    pending: Initial state after creating the virtual private gateway.    available: Ready for use by a private virtual interface.    deleting: Initial state after deleting the virtual private gateway.    deleted: The virtual private gateway is deleted. The private virtual interface is unable to send traffic over this gateway.
        public let virtualGatewayState: String?

        public init(virtualGatewayId: String? = nil, virtualGatewayState: String? = nil) {
            self.virtualGatewayId = virtualGatewayId
            self.virtualGatewayState = virtualGatewayState
        }

        private enum CodingKeys: String, CodingKey {
            case virtualGatewayId
            case virtualGatewayState
        }
    }

    public struct VirtualGateways: AWSDecodableShape {
        /// The virtual private gateways.
        public let virtualGateways: [VirtualGateway]?

        public init(virtualGateways: [VirtualGateway]? = nil) {
            self.virtualGateways = virtualGateways
        }

        private enum CodingKeys: String, CodingKey {
            case virtualGateways
        }
    }

    public struct VirtualInterface: AWSDecodableShape {
        /// The address family for the BGP peer.
        public let addressFamily: AddressFamily?
        /// The IP address assigned to the Amazon interface.
        public let amazonAddress: String?
        /// The autonomous system number (ASN) for the Amazon side of the connection.
        public let amazonSideAsn: Int64?
        /// The autonomous system (AS) number for Border Gateway Protocol (BGP) configuration. The valid values are 1-2147483647.
        public let asn: Int?
        /// The authentication key for BGP configuration. This string has a minimum length of 6 characters and and a maximun lenth of 80 characters.
        public let authKey: String?
        /// The Direct Connect endpoint on which the virtual interface terminates.
        public let awsDeviceV2: String?
        /// The Direct Connect endpoint that terminates a physical connection's BGP sessions.
        public let awsLogicalDeviceId: String?
        /// The BGP peers configured on this virtual interface.
        public let bgpPeers: [BGPPeer]?
        /// The ID of the connection.
        public let connectionId: String?
        /// The IP address assigned to the customer interface.
        public let customerAddress: String?
        /// The customer router configuration.
        public let customerRouterConfig: String?
        /// The ID of the Direct Connect gateway.
        public let directConnectGatewayId: String?
        /// Indicates whether jumbo frames (9001 MTU) are supported.
        public let jumboFrameCapable: Bool?
        /// The location of the connection.
        public let location: String?
        /// The maximum transmission unit (MTU), in bytes. The supported values are 1500 and 9001. The default value is 1500.
        public let mtu: Int?
        /// The ID of the account that owns the virtual interface.
        public let ownerAccount: String?
        /// The Region where the virtual interface is located.
        public let region: String?
        /// The routes to be advertised to the Amazon Web Services network in this Region. Applies to public virtual interfaces.
        public let routeFilterPrefixes: [RouteFilterPrefix]?
        /// The tags associated with the virtual interface.
        public let tags: [Tag]?
        /// The ID of the virtual private gateway. Applies only to private virtual interfaces.
        public let virtualGatewayId: String?
        /// The ID of the virtual interface.
        public let virtualInterfaceId: String?
        /// The name of the virtual interface assigned by the customer network. The name has a maximum of 100 characters. The following are valid characters: a-z, 0-9 and a hyphen (-).
        public let virtualInterfaceName: String?
        /// The state of the virtual interface. The following are the possible values:    confirming: The creation of the virtual interface is pending confirmation from the virtual interface owner. If the owner of the virtual interface is different from the owner of the connection on which it is provisioned, then the virtual interface will remain in this state until it is confirmed by the virtual interface owner.    verifying: This state only applies to public virtual interfaces. Each public virtual interface needs validation before the virtual interface can be created.    pending: A virtual interface is in this state from the time that it is created until the virtual interface is ready to forward traffic.    available: A virtual interface that is able to forward traffic.    down: A virtual interface that is BGP down.    deleting: A virtual interface is in this state immediately after calling DeleteVirtualInterface until it can no longer forward traffic.    deleted: A virtual interface that cannot forward traffic.    rejected: The virtual interface owner has declined creation of the virtual interface. If a virtual interface in the Confirming state is deleted by the virtual interface owner, the virtual interface enters the Rejected state.    unknown: The state of the virtual interface is not available.
        public let virtualInterfaceState: VirtualInterfaceState?
        /// The type of virtual interface. The possible values are private and public.
        public let virtualInterfaceType: String?
        /// The ID of the VLAN.
        public let vlan: Int?

        public init(addressFamily: AddressFamily? = nil, amazonAddress: String? = nil, amazonSideAsn: Int64? = nil, asn: Int? = nil, authKey: String? = nil, awsDeviceV2: String? = nil, awsLogicalDeviceId: String? = nil, bgpPeers: [BGPPeer]? = nil, connectionId: String? = nil, customerAddress: String? = nil, customerRouterConfig: String? = nil, directConnectGatewayId: String? = nil, jumboFrameCapable: Bool? = nil, location: String? = nil, mtu: Int? = nil, ownerAccount: String? = nil, region: String? = nil, routeFilterPrefixes: [RouteFilterPrefix]? = nil, tags: [Tag]? = nil, virtualGatewayId: String? = nil, virtualInterfaceId: String? = nil, virtualInterfaceName: String? = nil, virtualInterfaceState: VirtualInterfaceState? = nil, virtualInterfaceType: String? = nil, vlan: Int? = nil) {
            self.addressFamily = addressFamily
            self.amazonAddress = amazonAddress
            self.amazonSideAsn = amazonSideAsn
            self.asn = asn
            self.authKey = authKey
            self.awsDeviceV2 = awsDeviceV2
            self.awsLogicalDeviceId = awsLogicalDeviceId
            self.bgpPeers = bgpPeers
            self.connectionId = connectionId
            self.customerAddress = customerAddress
            self.customerRouterConfig = customerRouterConfig
            self.directConnectGatewayId = directConnectGatewayId
            self.jumboFrameCapable = jumboFrameCapable
            self.location = location
            self.mtu = mtu
            self.ownerAccount = ownerAccount
            self.region = region
            self.routeFilterPrefixes = routeFilterPrefixes
            self.tags = tags
            self.virtualGatewayId = virtualGatewayId
            self.virtualInterfaceId = virtualInterfaceId
            self.virtualInterfaceName = virtualInterfaceName
            self.virtualInterfaceState = virtualInterfaceState
            self.virtualInterfaceType = virtualInterfaceType
            self.vlan = vlan
        }

        private enum CodingKeys: String, CodingKey {
            case addressFamily
            case amazonAddress
            case amazonSideAsn
            case asn
            case authKey
            case awsDeviceV2
            case awsLogicalDeviceId
            case bgpPeers
            case connectionId
            case customerAddress
            case customerRouterConfig
            case directConnectGatewayId
            case jumboFrameCapable
            case location
            case mtu
            case ownerAccount
            case region
            case routeFilterPrefixes
            case tags
            case virtualGatewayId
            case virtualInterfaceId
            case virtualInterfaceName
            case virtualInterfaceState
            case virtualInterfaceType
            case vlan
        }
    }

    public struct VirtualInterfaceTestHistory: AWSDecodableShape {
        /// The BGP peers that were put in the DOWN state as part of the virtual interface failover test.
        public let bgpPeers: [String]?
        /// The time that the virtual interface moves out of the DOWN state.
        public let endTime: Date?
        /// The owner ID of the tested virtual interface.
        public let ownerAccount: String?
        /// The time that the virtual interface moves to the DOWN state.
        public let startTime: Date?
        /// The status of the virtual interface failover test.
        public let status: String?
        /// The time that the virtual interface failover test ran in minutes.
        public let testDurationInMinutes: Int?
        /// The ID of the virtual interface failover test.
        public let testId: String?
        /// The ID of the tested virtual interface.
        public let virtualInterfaceId: String?

        public init(bgpPeers: [String]? = nil, endTime: Date? = nil, ownerAccount: String? = nil, startTime: Date? = nil, status: String? = nil, testDurationInMinutes: Int? = nil, testId: String? = nil, virtualInterfaceId: String? = nil) {
            self.bgpPeers = bgpPeers
            self.endTime = endTime
            self.ownerAccount = ownerAccount
            self.startTime = startTime
            self.status = status
            self.testDurationInMinutes = testDurationInMinutes
            self.testId = testId
            self.virtualInterfaceId = virtualInterfaceId
        }

        private enum CodingKeys: String, CodingKey {
            case bgpPeers
            case endTime
            case ownerAccount
            case startTime
            case status
            case testDurationInMinutes
            case testId
            case virtualInterfaceId
        }
    }

    public struct VirtualInterfaces: AWSDecodableShape {
        /// The virtual interfaces
        public let virtualInterfaces: [VirtualInterface]?

        public init(virtualInterfaces: [VirtualInterface]? = nil) {
            self.virtualInterfaces = virtualInterfaces
        }

        private enum CodingKeys: String, CodingKey {
            case virtualInterfaces
        }
    }
}
