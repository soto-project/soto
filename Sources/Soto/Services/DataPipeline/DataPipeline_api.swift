//===----------------------------------------------------------------------===//
//
// This source file is part of the Soto for AWS open source project
//
// Copyright (c) 2017-2023 the Soto project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
// See CONTRIBUTORS.txt for the list of Soto project authors
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by https://github.com/soto-project/soto-codegenerator.
// DO NOT EDIT.

@_exported import SotoCore

/// Service object for interacting with AWS DataPipeline service.
///
/// AWS Data Pipeline configures and manages a data-driven workflow called a pipeline. AWS Data Pipeline  handles the details of scheduling and ensuring that data dependencies are met so that your application  can focus on processing the data.
///  AWS Data Pipeline provides a JAR implementation of a task runner called AWS Data Pipeline Task Runner.  AWS Data Pipeline Task Runner provides logic for common data management scenarios, such as performing  database queries and running data analysis using Amazon Elastic MapReduce (Amazon EMR). You can use  AWS Data Pipeline Task Runner as your task runner, or you can write your own task runner to provide  custom data management.  AWS Data Pipeline implements two main sets of functionality. Use the first set to create a pipeline  and define data sources, schedules, dependencies, and the transforms to be performed on the data.  Use the second set in your task runner application to receive the next task ready for processing.  The logic for performing the task, such as querying the data, running data analysis, or converting  the data from one format to another, is contained within the task runner. The task runner performs  the task assigned to it by the web service, reporting progress to the web service as it does so.  When the task is done, the task runner reports the final success or failure of the task to the web service.
public struct DataPipeline: AWSService {
    // MARK: Member variables

    /// Client used for communication with AWS
    public let client: AWSClient
    /// Service configuration
    public let config: AWSServiceConfig

    // MARK: Initialization

    /// Initialize the DataPipeline client
    /// - parameters:
    ///     - client: AWSClient used to process requests
    ///     - region: Region of server you want to communicate with. This will override the partition parameter.
    ///     - partition: AWS partition where service resides, standard (.aws), china (.awscn), government (.awsusgov).
    ///     - endpoint: Custom endpoint URL to use instead of standard AWS servers
    ///     - middleware: Middleware chain used to edit requests before they are sent and responses before they are decoded 
    ///     - timeout: Timeout value for HTTP requests
    ///     - byteBufferAllocator: Allocator for ByteBuffers
    ///     - options: Service options
    public init(
        client: AWSClient,
        region: SotoCore.Region? = nil,
        partition: AWSPartition = .aws,
        endpoint: String? = nil,
        middleware: AWSMiddlewareProtocol? = nil,
        timeout: TimeAmount? = nil,
        byteBufferAllocator: ByteBufferAllocator = ByteBufferAllocator(),
        options: AWSServiceConfig.Options = []
    ) {
        self.client = client
        self.config = AWSServiceConfig(
            region: region,
            partition: region?.partition ?? partition,
            amzTarget: "DataPipeline",
            serviceName: "DataPipeline",
            serviceIdentifier: "datapipeline",
            serviceProtocol: .json(version: "1.1"),
            apiVersion: "2012-10-29",
            endpoint: endpoint,
            errorType: DataPipelineErrorType.self,
            xmlNamespace: "http://datapipeline.amazonaws.com/doc/2012-10-29/",
            middleware: middleware,
            timeout: timeout,
            byteBufferAllocator: byteBufferAllocator,
            options: options
        )
    }





    // MARK: API Calls

    /// Validates the specified pipeline and starts processing pipeline tasks. If the pipeline does not pass validation,  activation fails. If you need to pause the pipeline to investigate an issue with a component, such as a data source or script,  call DeactivatePipeline. To activate a finished pipeline, modify the end date for the pipeline and then activate it.
    /// POST / HTTP/1.1
    /// Content-Type: application/x-amz-json-1.1
    /// X-Amz-Target: DataPipeline.ActivatePipeline
    /// Content-Length: 39
    /// Host: datapipeline.us-east-1.amazonaws.com
    /// X-Amz-Date: Mon, 12 Nov 2012 17:49:52 GMT
    /// Authorization: AuthParams
    /// {"pipelineId": "df-06372391ZG65EXAMPLE"}
    ///
    /// HTTP/1.1 200
    /// x-amzn-RequestId: ee19d5bf-074e-11e2-af6f-6bc7a6be60d9
    /// Content-Type: application/x-amz-json-1.1
    /// Content-Length: 2
    /// Date: Mon, 12 Nov 2012 17:50:53 GMT
    /// {}
    @Sendable
    public func activatePipeline(_ input: ActivatePipelineInput, logger: Logger = AWSClient.loggingDisabled) async throws -> ActivatePipelineOutput {
        return try await self.client.execute(
            operation: "ActivatePipeline", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Adds or modifies tags for the specified pipeline.
    @Sendable
    public func addTags(_ input: AddTagsInput, logger: Logger = AWSClient.loggingDisabled) async throws -> AddTagsOutput {
        return try await self.client.execute(
            operation: "AddTags", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Creates a new, empty pipeline. Use PutPipelineDefinition to populate the pipeline.
    /// POST / HTTP/1.1
    /// Content-Type: application/x-amz-json-1.1
    /// X-Amz-Target: DataPipeline.CreatePipeline
    /// Content-Length: 91
    /// Host: datapipeline.us-east-1.amazonaws.com
    /// X-Amz-Date: Mon, 12 Nov 2012 17:49:52 GMT
    /// Authorization: AuthParams
    /// {"name": "myPipeline", "uniqueId": "123456789", "description": "This is my first pipeline"}
    /// HTTP/1.1 200
    /// x-amzn-RequestId: b16911ce-0774-11e2-af6f-6bc7a6be60d9
    /// Content-Type: application/x-amz-json-1.1
    /// Content-Length: 40
    /// Date: Mon, 12 Nov 2012 17:50:53 GMT
    /// {"pipelineId": "df-06372391ZG65EXAMPLE"}
    @Sendable
    public func createPipeline(_ input: CreatePipelineInput, logger: Logger = AWSClient.loggingDisabled) async throws -> CreatePipelineOutput {
        return try await self.client.execute(
            operation: "CreatePipeline", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Deactivates the specified running pipeline. The pipeline is set to the DEACTIVATING state until the deactivation process completes. To resume a deactivated pipeline, use ActivatePipeline. By default, the pipeline resumes from the last completed execution. Optionally, you can specify the date and time to resume the pipeline.
    @Sendable
    public func deactivatePipeline(_ input: DeactivatePipelineInput, logger: Logger = AWSClient.loggingDisabled) async throws -> DeactivatePipelineOutput {
        return try await self.client.execute(
            operation: "DeactivatePipeline", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Deletes a pipeline, its pipeline definition, and its run history.   AWS Data Pipeline attempts to cancel instances associated with the pipeline that are currently being processed by task runners. Deleting a pipeline cannot be undone. You cannot query or restore a deleted pipeline.  To temporarily pause a pipeline instead of deleting it, call SetStatus with the status set to PAUSE on individual components.  Components that are paused by SetStatus can be resumed.
    ///
    /// POST / HTTP/1.1
    /// Content-Type: application/x-amz-json-1.1
    /// X-Amz-Target: DataPipeline.DeletePipeline
    /// Content-Length: 50
    /// Host: datapipeline.us-east-1.amazonaws.com
    /// X-Amz-Date: Mon, 12 Nov 2012 17:49:52 GMT
    /// Authorization: AuthParams
    /// {"pipelineId": "df-06372391ZG65EXAMPLE"}
    ///
    /// x-amzn-RequestId: b7a88c81-0754-11e2-af6f-6bc7a6be60d9
    /// Content-Type: application/x-amz-json-1.1
    /// Content-Length: 0
    /// Date: Mon, 12 Nov 2012 17:50:53 GMT
    /// Unexpected response: 200, OK, undefined
    @Sendable
    public func deletePipeline(_ input: DeletePipelineInput, logger: Logger = AWSClient.loggingDisabled) async throws {
        return try await self.client.execute(
            operation: "DeletePipeline", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Gets the object definitions for a set of objects associated with the pipeline. Object definitions are composed of  a set of fields that define the properties of the object.
    /// POST / HTTP/1.1
    /// Content-Type: application/x-amz-json-1.1
    /// X-Amz-Target: DataPipeline.DescribeObjects
    /// Content-Length: 98
    /// Host: datapipeline.us-east-1.amazonaws.com
    /// X-Amz-Date: Mon, 12 Nov 2012 17:49:52 GMT
    /// Authorization: AuthParams
    /// {"pipelineId": "df-06372391ZG65EXAMPLE", "objectIds":  ["Schedule"], "evaluateExpressions": true}
    ///
    /// x-amzn-RequestId: 4c18ea5d-0777-11e2-8a14-21bb8a1f50ef
    /// Content-Type: application/x-amz-json-1.1
    /// Content-Length: 1488
    /// Date: Mon, 12 Nov 2012 17:50:53 GMT
    /// {"hasMoreResults": false,  "pipelineObjects":  [ {"fields":  [ {"key": "startDateTime",  "stringValue": "2012-12-12T00:00:00"},  {"key": "parent",  "refValue": "Default"},  {"key": "@sphere",  "stringValue": "COMPONENT"},  {"key": "type",  "stringValue": "Schedule"},  {"key": "period",  "stringValue": "1 hour"},  {"key": "endDateTime",  "stringValue": "2012-12-21T18:00:00"},  {"key": "@version",  "stringValue": "1"},  {"key": "@status",  "stringValue": "PENDING"},  {"key": "@pipelineId",  "stringValue": "df-06372391ZG65EXAMPLE"} ],  "id": "Schedule",  "name": "Schedule"} ]
    /// }
    @Sendable
    public func describeObjects(_ input: DescribeObjectsInput, logger: Logger = AWSClient.loggingDisabled) async throws -> DescribeObjectsOutput {
        return try await self.client.execute(
            operation: "DescribeObjects", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Retrieves metadata about one or more pipelines. The information retrieved includes the name of the pipeline, the pipeline identifier,  its current state, and the user account that owns the pipeline. Using account credentials, you can retrieve metadata about pipelines  that you or your IAM users have created. If you are using an IAM user account, you can retrieve metadata about only those pipelines  for which you have read permissions. To retrieve the full pipeline definition instead of metadata about the pipeline, call GetPipelineDefinition.
    ///
    /// POST / HTTP/1.1
    /// Content-Type: application/x-amz-json-1.1
    /// X-Amz-Target: DataPipeline.DescribePipelines
    /// Content-Length: 70
    /// Host: datapipeline.us-east-1.amazonaws.com
    /// X-Amz-Date: Mon, 12 Nov 2012 17:49:52 GMT
    /// Authorization: AuthParams
    /// {"pipelineIds":  ["df-08785951KAKJEXAMPLE"]
    /// }
    ///
    ///
    /// x-amzn-RequestId: 02870eb7-0736-11e2-af6f-6bc7a6be60d9
    /// Content-Type: application/x-amz-json-1.1
    /// Content-Length: 767
    /// Date: Mon, 12 Nov 2012 17:50:53 GMT
    /// {"pipelineDescriptionList":  [ {"description": "This is my first pipeline",  "fields":  [ {"key": "@pipelineState",  "stringValue": "SCHEDULED"},  {"key": "description",  "stringValue": "This is my first pipeline"},  {"key": "name",  "stringValue": "myPipeline"},  {"key": "@creationTime",  "stringValue": "2012-12-13T01:24:06"},  {"key": "@id",  "stringValue": "df-0937003356ZJEXAMPLE"},  {"key": "@sphere",  "stringValue": "PIPELINE"},  {"key": "@version",  "stringValue": "1"},  {"key": "@userId",  "stringValue": "924374875933"},  {"key": "@accountId",  "stringValue": "924374875933"},  {"key": "uniqueId",  "stringValue": "1234567890"} ],  "name": "myPipeline",  "pipelineId": "df-0937003356ZJEXAMPLE"} ]
    /// }
    ///
    @Sendable
    public func describePipelines(_ input: DescribePipelinesInput, logger: Logger = AWSClient.loggingDisabled) async throws -> DescribePipelinesOutput {
        return try await self.client.execute(
            operation: "DescribePipelines", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Task runners call EvaluateExpression to evaluate a string in the context of the specified object.  For example, a task runner can evaluate SQL queries stored in Amazon S3.
    /// POST / HTTP/1.1
    /// Content-Type: application/x-amz-json-1.1
    /// X-Amz-Target: DataPipeline.DescribePipelines
    /// Content-Length: 164
    /// Host: datapipeline.us-east-1.amazonaws.com
    /// X-Amz-Date: Mon, 12 Nov 2012 17:49:52 GMT
    /// Authorization: AuthParams
    /// {"pipelineId": "df-08785951KAKJEXAMPLE", "objectId": "Schedule", "expression": "Transform started at #{startDateTime} and finished at #{endDateTime}"}
    ///
    /// x-amzn-RequestId: 02870eb7-0736-11e2-af6f-6bc7a6be60d9
    /// Content-Type: application/x-amz-json-1.1
    /// Content-Length: 103
    /// Date: Mon, 12 Nov 2012 17:50:53 GMT
    /// {"evaluatedExpression": "Transform started at 2012-12-12T00:00:00 and finished at 2012-12-21T18:00:00"}
    ///
    @Sendable
    public func evaluateExpression(_ input: EvaluateExpressionInput, logger: Logger = AWSClient.loggingDisabled) async throws -> EvaluateExpressionOutput {
        return try await self.client.execute(
            operation: "EvaluateExpression", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Gets the definition of the specified pipeline. You can call GetPipelineDefinition to retrieve  the pipeline definition that you provided using PutPipelineDefinition.
    ///
    /// POST / HTTP/1.1
    /// Content-Type: application/x-amz-json-1.1
    /// X-Amz-Target: DataPipeline.GetPipelineDefinition
    /// Content-Length: 40
    /// Host: datapipeline.us-east-1.amazonaws.com
    /// X-Amz-Date: Mon, 12 Nov 2012 17:49:52 GMT
    /// Authorization: AuthParams
    /// {"pipelineId": "df-06372391ZG65EXAMPLE"}
    ///
    /// x-amzn-RequestId: e28309e5-0776-11e2-8a14-21bb8a1f50ef
    /// Content-Type: application/x-amz-json-1.1
    /// Content-Length: 890
    /// Date: Mon, 12 Nov 2012 17:50:53 GMT
    /// {"pipelineObjects":  [ {"fields":  [ {"key": "workerGroup",  "stringValue": "workerGroup"} ],  "id": "Default",  "name": "Default"},  {"fields":  [ {"key": "startDateTime",  "stringValue": "2012-09-25T17:00:00"},  {"key": "type",  "stringValue": "Schedule"},  {"key": "period",  "stringValue": "1 hour"},  {"key": "endDateTime",  "stringValue": "2012-09-25T18:00:00"} ],  "id": "Schedule",  "name": "Schedule"},  {"fields":  [ {"key": "schedule",  "refValue": "Schedule"},  {"key": "command",  "stringValue": "echo hello"},  {"key": "parent",  "refValue": "Default"},  {"key": "type",  "stringValue": "ShellCommandActivity"} ],  "id": "SayHello",  "name": "SayHello"} ]
    /// }
    ///
    @Sendable
    public func getPipelineDefinition(_ input: GetPipelineDefinitionInput, logger: Logger = AWSClient.loggingDisabled) async throws -> GetPipelineDefinitionOutput {
        return try await self.client.execute(
            operation: "GetPipelineDefinition", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Lists the pipeline identifiers for all active pipelines that you have permission to access.
    /// POST / HTTP/1.1
    /// Content-Type: application/x-amz-json-1.1
    /// X-Amz-Target: DataPipeline.ListPipelines
    /// Content-Length: 14
    /// Host: datapipeline.us-east-1.amazonaws.com
    /// X-Amz-Date: Mon, 12 Nov 2012 17:49:52 GMT
    /// Authorization: AuthParams
    /// {}
    /// Status:
    /// x-amzn-RequestId: b3104dc5-0734-11e2-af6f-6bc7a6be60d9
    /// Content-Type: application/x-amz-json-1.1
    /// Content-Length: 39
    /// Date: Mon, 12 Nov 2012 17:50:53 GMT
    /// {"PipelineIdList":  [ {"id": "df-08785951KAKJEXAMPLE", "name": "MyPipeline"},  {"id": "df-08662578ISYEXAMPLE",  "name": "MySecondPipeline"} ]
    /// }
    @Sendable
    public func listPipelines(_ input: ListPipelinesInput, logger: Logger = AWSClient.loggingDisabled) async throws -> ListPipelinesOutput {
        return try await self.client.execute(
            operation: "ListPipelines", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Task runners call PollForTask to receive a task to perform from AWS Data Pipeline. The task runner specifies which tasks it can perform  by setting a value for the workerGroup parameter. The task returned can come from any of the pipelines that  match the workerGroup value passed in by the task runner and that was launched using the IAM user credentials  specified by the task runner. If tasks are ready in the work queue, PollForTask returns a response immediately. If no tasks are available in the queue,  PollForTask uses long-polling and holds on to a poll connection for up to a 90 seconds, during which time the first newly  scheduled task is handed to the task runner. To accomodate this, set the socket timeout in your task runner to 90 seconds. The task  runner should not call PollForTask again on the same workerGroup until it receives a response, and this can take up to 90 seconds.
    ///
    /// POST / HTTP/1.1
    /// Content-Type: application/x-amz-json-1.1
    /// X-Amz-Target: DataPipeline.PollForTask
    /// Content-Length: 59
    /// Host: datapipeline.us-east-1.amazonaws.com
    /// X-Amz-Date: Mon, 12 Nov 2012 17:49:52 GMT
    /// Authorization: AuthParams
    /// {"workerGroup": "MyworkerGroup", "hostname": "example.com"}
    ///
    /// x-amzn-RequestId: 41c713d2-0775-11e2-af6f-6bc7a6be60d9
    /// Content-Type: application/x-amz-json-1.1
    /// Content-Length: 39
    /// Date: Mon, 12 Nov 2012 17:50:53 GMT
    /// {"taskObject":  {"attemptId": "@SayHello_2012-12-12T00:00:00_Attempt=1",  "objects":  {"@SayHello_2012-12-12T00:00:00_Attempt=1":  {"fields":  [ {"key": "@componentParent",  "refValue": "SayHello"},  {"key": "@scheduledStartTime",  "stringValue": "2012-12-12T00:00:00"},  {"key": "parent",  "refValue": "SayHello"},  {"key": "@sphere",  "stringValue": "ATTEMPT"},  {"key": "workerGroup",  "stringValue": "workerGroup"},  {"key": "@instanceParent",  "refValue": "@SayHello_2012-12-12T00:00:00"},  {"key": "type",  "stringValue": "ShellCommandActivity"},  {"key": "@status",  "stringValue": "WAITING_FOR_RUNNER"},  {"key": "@version",  "stringValue": "1"},  {"key": "schedule",  "refValue": "Schedule"},  {"key": "@actualStartTime",  "stringValue": "2012-12-13T01:40:50"},  {"key": "command",  "stringValue": "echo hello"},  {"key": "@scheduledEndTime",  "stringValue": "2012-12-12T01:00:00"},  {"key": "@activeInstances",  "refValue": "@SayHello_2012-12-12T00:00:00"},  {"key": "@pipelineId",  "stringValue": "df-0937003356ZJEXAMPLE"} ],  "id": "@SayHello_2012-12-12T00:00:00_Attempt=1",  "name": "@SayHello_2012-12-12T00:00:00_Attempt=1"} },  "pipelineId": "df-0937003356ZJEXAMPLE",  "taskId": "2xaM4wRs5zOsIH+g9U3oVHfAgAlbSqU6XduncB0HhZ3xMnmvfePZPn4dIbYXHyWyRK+cU15MqDHwdrvftx/4wv+sNS4w34vJfv7QA9aOoOazW28l1GYSb2ZRR0N0paiQp+d1MhSKo10hOTWOsVK5S5Lnx9Qm6omFgXHyIvZRIvTlrQMpr1xuUrflyGOfbFOGpOLpvPE172MYdqpZKnbSS4TcuqgQKSWV2833fEubI57DPOP7ghWa2TcYeSIv4pdLYG53fTuwfbnbdc98g2LNUQzSVhSnt7BoqyNwht2aQ6b/UHg9A80+KVpuXuqmz3m1MXwHFgxjdmuesXNOrrlGpeLCcRWD+aGo0RN1NqhQRzNAig8V4GlaPTQzMsRCljKqvrIyAoP3Tt2XEGsHkkQo12rEX8Z90957XX2qKRwhruwYzqGkSLWjINoLdAxUJdpRXRc5DJTrBd3D5mdzn7kY1l7NEh4kFHJDt3Cx4Z3Mk8MYCACyCk/CEyy9DwuPi66cLz0NBcgbCM5LKjTBOwo1m+am+pvM1kSposE9FPP1+RFGb8k6jQBTJx3TRz1yKilnGXQTZ5xvdOFpJrklIT0OXP1MG3+auM9FlJA+1dX90QoNJE5z7axmK//MOGXUdkqFe2kiDkorqjxwDvc0Js9pVKfKvAmW8YqUbmI9l0ERpWCXXnLVHNmPWz3jaPY+OBAmuJWDmxB/Z8p94aEDg4BVXQ7LvsKQ3DLYhaB7yJ390CJT+i0mm+EBqY60V6YikPSWDFrYQ/NPi2b1DgE19mX8zHqw8qprIl4yh1Ckx2Iige4En/N5ktOoIxnASxAw/TzcE2skxdw5KlHDF+UTj71m16CR/dIaKlXijlfNlNzUBo/bNSadCQn3G5NoO501wPKI:XO50TgDNyo8EXAMPLE/g==:1"}
    /// }
    @Sendable
    public func pollForTask(_ input: PollForTaskInput, logger: Logger = AWSClient.loggingDisabled) async throws -> PollForTaskOutput {
        return try await self.client.execute(
            operation: "PollForTask", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Adds tasks, schedules, and preconditions to the specified pipeline. You can use PutPipelineDefinition to populate a new pipeline.  PutPipelineDefinition also validates the configuration as it adds it to the pipeline. Changes to the pipeline are saved unless one  of the following three validation errors exists in the pipeline.   An object is missing a name or identifier field. A string or reference field is empty. The number of objects in the pipeline exceeds the maximum allowed objects. The pipeline is in a FINISHED state.   Pipeline object definitions are passed to the PutPipelineDefinition action and returned by the GetPipelineDefinition action.     Example 1  This example sets an valid pipeline configuration and returns success.
    /// POST / HTTP/1.1
    /// Content-Type: application/x-amz-json-1.1
    /// X-Amz-Target: DataPipeline.PutPipelineDefinition
    /// Content-Length: 914
    /// Host: datapipeline.us-east-1.amazonaws.com
    /// X-Amz-Date: Mon, 12 Nov 2012 17:49:52 GMT
    /// Authorization: AuthParams
    /// {"pipelineId": "df-0937003356ZJEXAMPLE", "pipelineObjects":  [ {"id": "Default", "name": "Default", "fields":  [ {"key": "workerGroup",  "stringValue": "workerGroup"} ] },  {"id": "Schedule", "name": "Schedule", "fields":  [ {"key": "startDateTime",  "stringValue": "2012-12-12T00:00:00"},  {"key": "type",  "stringValue": "Schedule"},  {"key": "period",  "stringValue": "1 hour"},  {"key": "endDateTime",  "stringValue": "2012-12-21T18:00:00"} ] }, {"id": "SayHello", "name": "SayHello", "fields":  [ {"key": "type",  "stringValue": "ShellCommandActivity"}, {"key": "command",  "stringValue": "echo hello"}, {"key": "parent",  "refValue": "Default"}, {"key": "schedule",  "refValue": "Schedule"} ] } ]
    /// }
    /// HTTP/1.1 200
    /// x-amzn-RequestId: f74afc14-0754-11e2-af6f-6bc7a6be60d9
    /// Content-Type: application/x-amz-json-1.1
    /// Content-Length: 18
    /// Date: Mon, 12 Nov 2012 17:50:53 GMT
    /// {"errored": false}
    ///      Example 2  This example sets an invalid pipeline configuration (the value for workerGroup is an empty string) and returns an error message.
    /// POST / HTTP/1.1
    /// Content-Type: application/x-amz-json-1.1
    /// X-Amz-Target: DataPipeline.PutPipelineDefinition
    /// Content-Length: 903
    /// Host: datapipeline.us-east-1.amazonaws.com
    /// X-Amz-Date: Mon, 12 Nov 2012 17:49:52 GMT
    /// Authorization: AuthParams
    /// {"pipelineId": "df-06372391ZG65EXAMPLE", "pipelineObjects":  [ {"id": "Default", "name": "Default", "fields":  [ {"key": "workerGroup",  "stringValue": ""} ] },  {"id": "Schedule", "name": "Schedule", "fields":  [ {"key": "startDateTime",  "stringValue": "2012-09-25T17:00:00"},  {"key": "type",  "stringValue": "Schedule"},  {"key": "period",  "stringValue": "1 hour"},  {"key": "endDateTime",  "stringValue": "2012-09-25T18:00:00"} ] }, {"id": "SayHello", "name": "SayHello", "fields":  [ {"key": "type",  "stringValue": "ShellCommandActivity"}, {"key": "command",  "stringValue": "echo hello"}, {"key": "parent",  "refValue": "Default"}, {"key": "schedule",  "refValue": "Schedule"}  ] } ]
    /// }
    /// HTTP/1.1 200
    /// x-amzn-RequestId: f74afc14-0754-11e2-af6f-6bc7a6be60d9
    /// Content-Type: application/x-amz-json-1.1
    /// Content-Length: 18
    /// Date: Mon, 12 Nov 2012 17:50:53 GMT
    /// {"__type": "com.amazon.setl.webservice#InvalidRequestException",  "message": "Pipeline definition has errors: Could not save the pipeline definition due to FATAL errors: [com.amazon.setl.webservice.ValidationError@108d7ea9] Please call Validate to validate your pipeline"}
    ///
    @Sendable
    public func putPipelineDefinition(_ input: PutPipelineDefinitionInput, logger: Logger = AWSClient.loggingDisabled) async throws -> PutPipelineDefinitionOutput {
        return try await self.client.execute(
            operation: "PutPipelineDefinition", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Queries the specified pipeline for the names of objects that match the specified set of conditions.
    /// POST / HTTP/1.1
    /// Content-Type: application/x-amz-json-1.1
    /// X-Amz-Target: DataPipeline.QueryObjects
    /// Content-Length: 123
    /// Host: datapipeline.us-east-1.amazonaws.com
    /// X-Amz-Date: Mon, 12 Nov 2012 17:49:52 GMT
    /// Authorization: AuthParams
    /// {"pipelineId": "df-06372391ZG65EXAMPLE", "query":  {"selectors":  [ ] }, "sphere": "INSTANCE", "marker": "", "limit": 10}
    ///
    /// x-amzn-RequestId: 14d704c1-0775-11e2-af6f-6bc7a6be60d9
    /// Content-Type: application/x-amz-json-1.1
    /// Content-Length: 72
    /// Date: Mon, 12 Nov 2012 17:50:53 GMT
    /// {"hasMoreResults": false,  "ids":  ["@SayHello_1_2012-09-25T17:00:00"]
    /// }
    @Sendable
    public func queryObjects(_ input: QueryObjectsInput, logger: Logger = AWSClient.loggingDisabled) async throws -> QueryObjectsOutput {
        return try await self.client.execute(
            operation: "QueryObjects", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Removes existing tags from the specified pipeline.
    @Sendable
    public func removeTags(_ input: RemoveTagsInput, logger: Logger = AWSClient.loggingDisabled) async throws -> RemoveTagsOutput {
        return try await self.client.execute(
            operation: "RemoveTags", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Task runners call ReportTaskProgress when assigned a task to acknowledge that it has the task. If the web service does not  receive this acknowledgement within 2 minutes, it assigns the task in a subsequent PollForTask call. After this initial acknowledgement,  the task runner only needs to report progress every 15 minutes to maintain its ownership of the task. You can change this reporting time  from 15 minutes by specifying a reportProgressTimeout field in your pipeline. If a task runner does not report its status after 5 minutes, AWS Data Pipeline assumes that the task runner is unable to process the task  and reassigns the task in a subsequent response to PollForTask. Task runners should call ReportTaskProgress every 60 seconds.
    /// POST / HTTP/1.1
    /// Content-Type: application/x-amz-json-1.1
    /// X-Amz-Target: DataPipeline.ReportTaskProgress
    /// Content-Length: 832
    /// Host: datapipeline.us-east-1.amazonaws.com
    /// X-Amz-Date: Mon, 12 Nov 2012 17:49:52 GMT
    /// Authorization: AuthParams
    /// {"taskId": "aaGgHT4LuH0T0Y0oLrJRjas5qH0d8cDPADxqq3tn+zCWGELkCdV2JprLreXm1oxeP5EFZHFLJ69kjSsLYE0iYHYBYVGBrB+E/pYq7ANEEeGJFnSBMRiXZVA+8UJ3OzcInvXeinqBmBaKwii7hnnKb/AXjXiNTXyxgydX1KAyg1AxkwBYG4cfPYMZbuEbQJFJvv5C/2+GVXz1w94nKYTeUeepwUOFOuRLS6JVtZoYwpF56E+Yfk1IcGpFOvCZ01B4Bkuu7x3J+MD/j6kJgZLAgbCJQtI3eiW3kdGmX0p0I2BdY1ZsX6b4UiSvM3OMj6NEHJCJL4E0ZfitnhCoe24Kvjo6C2hFbZq+ei/HPgSXBQMSagkr4vS9c0ChzxH2+LNYvec6bY4kymkaZI1dvOzmpa0FcnGf5AjSK4GpsViZ/ujz6zxFv81qBXzjF0/4M1775rjV1VUdyKaixiA/sJiACNezqZqETidp8d24BDPRhGsj6pBCrnelqGFrk/gXEXUsJ+xwMifRC8UVwiKekpAvHUywVk7Ku4jH/n3i2VoLRP6FXwpUbelu34iiZ9czpXyLtyPKwxa87dlrnRVURwkcVjOt2Mcrcaqe+cbWHvNRhyrPkkdfSF3ac8/wfgVbXvLEB2k9mKc67aD9rvdc1PKX09Tk8BKklsMTpZ3TRCd4NzQlJKigMe8Jat9+1tKj4Ole5ZzW6uyTu2s2iFjEV8KXu4MaiRJyNKCdKeGhhZWY37Qk4NBK4Ppgu+C6Y41dpfOh288SLDEVx0/UySlqOEdhba7c6BiPp5r3hKj3mk9lFy5OYp1aoGLeeFmjXveTnPdf2gkWqXXg7AUbJ7jEs1F0lKZQg4szep2gcKyAJXgvXLfJJHcha8Lfb/Ee7wYmyOcAaRpDBoFNSbtoVXar46teIrpho+ZDvynUXvU0grHWGOk=:wn3SgymHZM99bEXAMPLE", "fields":  [ {"key": "percentComplete", "stringValue": "50"} ]
    /// }
    ///
    /// x-amzn-RequestId: 640bd023-0775-11e2-af6f-6bc7a6be60d9
    /// Content-Type: application/x-amz-json-1.1
    /// Content-Length: 18
    /// Date: Mon, 12 Nov 2012 17:50:53 GMT
    /// {"canceled": false}
    ///
    @Sendable
    public func reportTaskProgress(_ input: ReportTaskProgressInput, logger: Logger = AWSClient.loggingDisabled) async throws -> ReportTaskProgressOutput {
        return try await self.client.execute(
            operation: "ReportTaskProgress", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Task runners call ReportTaskRunnerHeartbeat every 15 minutes to indicate that they are operational.  If the AWS Data Pipeline Task Runner is launched on a resource managed by AWS Data Pipeline, the web service can use  this call to detect when the task runner application has failed and restart a new instance.
    /// POST / HTTP/1.1
    /// Content-Type: application/x-amz-json-1.1
    /// X-Amz-Target: DataPipeline.ReportTaskRunnerHeartbeat
    /// Content-Length: 84
    /// Host: datapipeline.us-east-1.amazonaws.com
    /// X-Amz-Date: Mon, 12 Nov 2012 17:49:52 GMT
    /// Authorization: AuthParams
    /// {"taskrunnerId": "1234567890", "workerGroup": "wg-12345", "hostname": "example.com"}
    ///
    /// Status:
    /// x-amzn-RequestId: b3104dc5-0734-11e2-af6f-6bc7a6be60d9
    /// Content-Type: application/x-amz-json-1.1
    /// Content-Length: 20
    /// Date: Mon, 12 Nov 2012 17:50:53 GMT
    /// {"terminate": false}
    @Sendable
    public func reportTaskRunnerHeartbeat(_ input: ReportTaskRunnerHeartbeatInput, logger: Logger = AWSClient.loggingDisabled) async throws -> ReportTaskRunnerHeartbeatOutput {
        return try await self.client.execute(
            operation: "ReportTaskRunnerHeartbeat", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Requests that the status of the specified physical or logical pipeline objects be updated in the specified pipeline.  This update might not occur immediately, but is eventually consistent. The status that can be set depends on the type of object (for example, DataNode or Activity).  You cannot perform this operation on FINISHED pipelines and attempting to do so returns InvalidRequestException.
    /// POST / HTTP/1.1
    /// Content-Type: application/x-amz-json-1.1
    /// X-Amz-Target: DataPipeline.SetStatus
    /// Content-Length: 100
    /// Host: datapipeline.us-east-1.amazonaws.com
    /// X-Amz-Date: Mon, 12 Nov 2012 17:49:52 GMT
    /// Authorization: AuthParams
    /// {"pipelineId": "df-0634701J7KEXAMPLE",  "objectIds":  ["o-08600941GHJWMBR9E2"],  "status": "pause"}
    ///
    /// x-amzn-RequestId: e83b8ab7-076a-11e2-af6f-6bc7a6be60d9
    /// Content-Type: application/x-amz-json-1.1
    /// Content-Length: 0
    /// Date: Mon, 12 Nov 2012 17:50:53 GMT
    /// Unexpected response: 200, OK, undefined
    @Sendable
    public func setStatus(_ input: SetStatusInput, logger: Logger = AWSClient.loggingDisabled) async throws {
        return try await self.client.execute(
            operation: "SetStatus", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Task runners call SetTaskStatus to notify AWS Data Pipeline that a task is completed and provide information about the final status.  A task runner makes this call regardless of whether the task was sucessful. A task runner does not need to call SetTaskStatus for  tasks that are canceled by the web service during a call to ReportTaskProgress.
    /// POST / HTTP/1.1
    /// Content-Type: application/x-amz-json-1.1
    /// X-Amz-Target: DataPipeline.SetTaskStatus
    /// Content-Length: 847
    /// Host: datapipeline.us-east-1.amazonaws.com
    /// X-Amz-Date: Mon, 12 Nov 2012 17:49:52 GMT
    /// Authorization: AuthParams
    /// {"taskId": "aaGgHT4LuH0T0Y0oLrJRjas5qH0d8cDPADxqq3tn+zCWGELkCdV2JprLreXm1oxeP5EFZHFLJ69kjSsLYE0iYHYBYVGBrB+E/pYq7ANEEeGJFnSBMRiXZVA+8UJ3OzcInvXeinqBmBaKwii7hnnKb/AXjXiNTXyxgydX1KAyg1AxkwBYG4cfPYMZbuEbQJFJvv5C/2+GVXz1w94nKYTeUeepwUOFOuRLS6JVtZoYwpF56E+Yfk1IcGpFOvCZ01B4Bkuu7x3J+MD/j6kJgZLAgbCJQtI3eiW3kdGmX0p0I2BdY1ZsX6b4UiSvM3OMj6NEHJCJL4E0ZfitnhCoe24Kvjo6C2hFbZq+ei/HPgSXBQMSagkr4vS9c0ChzxH2+LNYvec6bY4kymkaZI1dvOzmpa0FcnGf5AjSK4GpsViZ/ujz6zxFv81qBXzjF0/4M1775rjV1VUdyKaixiA/sJiACNezqZqETidp8d24BDPRhGsj6pBCrnelqGFrk/gXEXUsJ+xwMifRC8UVwiKekpAvHUywVk7Ku4jH/n3i2VoLRP6FXwpUbelu34iiZ9czpXyLtyPKwxa87dlrnRVURwkcVjOt2Mcrcaqe+cbWHvNRhyrPkkdfSF3ac8/wfgVbXvLEB2k9mKc67aD9rvdc1PKX09Tk8BKklsMTpZ3TRCd4NzQlJKigMe8Jat9+1tKj4Ole5ZzW6uyTu2s2iFjEV8KXu4MaiRJyNKCdKeGhhZWY37Qk4NBK4Ppgu+C6Y41dpfOh288SLDEVx0/UySlqOEdhba7c6BiPp5r3hKj3mk9lFy5OYp1aoGLeeFmjXveTnPdf2gkWqXXg7AUbJ7jEs1F0lKZQg4szep2gcKyAJXgvXLfJJHcha8Lfb/Ee7wYmyOcAaRpDBoFNSbtoVXar46teIrpho+ZDvynUXvU0grHWGOk=:wn3SgymHZM99bEXAMPLE", "taskStatus": "FINISHED"}
    /// x-amzn-RequestId: 8c8deb53-0788-11e2-af9c-6bc7a6be6qr8
    /// Content-Type: application/x-amz-json-1.1
    /// Content-Length: 0
    /// Date: Mon, 12 Nov 2012 17:50:53 GMT
    /// {}
    @Sendable
    public func setTaskStatus(_ input: SetTaskStatusInput, logger: Logger = AWSClient.loggingDisabled) async throws -> SetTaskStatusOutput {
        return try await self.client.execute(
            operation: "SetTaskStatus", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Validates the specified pipeline definition to ensure that it is well formed and can be run without error.
    ///    Example 1  This example sets an valid pipeline configuration and returns success.
    /// POST / HTTP/1.1
    /// Content-Type: application/x-amz-json-1.1
    /// X-Amz-Target: DataPipeline.ValidatePipelineDefinition
    /// Content-Length: 936
    /// Host: datapipeline.us-east-1.amazonaws.com
    /// X-Amz-Date: Mon, 12 Nov 2012 17:49:52 GMT
    /// Authorization: AuthParams
    /// {"pipelineId": "df-06372391ZG65EXAMPLE", "pipelineObjects":  [ {"id": "Default", "name": "Default", "fields":  [ {"key": "workerGroup",  "stringValue": "MyworkerGroup"} ] },  {"id": "Schedule", "name": "Schedule", "fields":  [ {"key": "startDateTime",  "stringValue": "2012-09-25T17:00:00"},  {"key": "type",  "stringValue": "Schedule"},  {"key": "period",  "stringValue": "1 hour"},  {"key": "endDateTime",  "stringValue": "2012-09-25T18:00:00"} ] }, {"id": "SayHello", "name": "SayHello", "fields":  [ {"key": "type",  "stringValue": "ShellCommandActivity"}, {"key": "command",  "stringValue": "echo hello"}, {"key": "parent",  "refValue": "Default"}, {"key": "schedule",  "refValue": "Schedule"}  ] } ]
    /// }
    /// x-amzn-RequestId: 92c9f347-0776-11e2-8a14-21bb8a1f50ef
    /// Content-Type: application/x-amz-json-1.1
    /// Content-Length: 18
    /// Date: Mon, 12 Nov 2012 17:50:53 GMT
    /// {"errored": false}     Example 2  This example sets an invalid pipeline configuration and returns the associated set of validation errors.
    /// POST / HTTP/1.1
    /// Content-Type: application/x-amz-json-1.1
    /// X-Amz-Target: DataPipeline.ValidatePipelineDefinition
    /// Content-Length: 903
    /// Host: datapipeline.us-east-1.amazonaws.com
    /// X-Amz-Date: Mon, 12 Nov 2012 17:49:52 GMT
    /// Authorization: AuthParams
    /// {"pipelineId": "df-06372391ZG65EXAMPLE", "pipelineObjects":  [ {"id": "Default", "name": "Default", "fields":  [ {"key": "workerGroup",  "stringValue": "MyworkerGroup"} ] },  {"id": "Schedule", "name": "Schedule", "fields":  [ {"key": "startDateTime",  "stringValue": "bad-time"},  {"key": "type",  "stringValue": "Schedule"},  {"key": "period",  "stringValue": "1 hour"},  {"key": "endDateTime",  "stringValue": "2012-09-25T18:00:00"} ] }, {"id": "SayHello", "name": "SayHello", "fields":  [ {"key": "type",  "stringValue": "ShellCommandActivity"}, {"key": "command",  "stringValue": "echo hello"}, {"key": "parent",  "refValue": "Default"}, {"key": "schedule",  "refValue": "Schedule"}  ] } ]
    /// }
    /// x-amzn-RequestId: 496a1f5a-0e6a-11e2-a61c-bd6312c92ddd
    /// Content-Type: application/x-amz-json-1.1
    /// Content-Length: 278
    /// Date: Mon, 12 Nov 2012 17:50:53 GMT
    /// {"errored": true,  "validationErrors":  [ {"errors":  ["INVALID_FIELD_VALUE:  'startDateTime' value must be a literal datetime value."],  "id": "Schedule"} ]
    /// }
    @Sendable
    public func validatePipelineDefinition(_ input: ValidatePipelineDefinitionInput, logger: Logger = AWSClient.loggingDisabled) async throws -> ValidatePipelineDefinitionOutput {
        return try await self.client.execute(
            operation: "ValidatePipelineDefinition", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
}

extension DataPipeline {
    /// Initializer required by `AWSService.with(middlewares:timeout:byteBufferAllocator:options)`. You are not able to use this initializer directly as there are not public
    /// initializers for `AWSServiceConfig.Patch`. Please use `AWSService.with(middlewares:timeout:byteBufferAllocator:options)` instead.
    public init(from: DataPipeline, patch: AWSServiceConfig.Patch) {
        self.client = from.client
        self.config = from.config.with(patch: patch)
    }
}

// MARK: Paginators

@available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
extension DataPipeline {
    /// Gets the object definitions for a set of objects associated with the pipeline. Object definitions are composed of  a set of fields that define the properties of the object.
    /// POST / HTTP/1.1
    /// Content-Type: application/x-amz-json-1.1
    /// X-Amz-Target: DataPipeline.DescribeObjects
    /// Content-Length: 98
    /// Host: datapipeline.us-east-1.amazonaws.com
    /// X-Amz-Date: Mon, 12 Nov 2012 17:49:52 GMT
    /// Authorization: AuthParams
    /// {"pipelineId": "df-06372391ZG65EXAMPLE", "objectIds":  ["Schedule"], "evaluateExpressions": true}
    ///
    /// x-amzn-RequestId: 4c18ea5d-0777-11e2-8a14-21bb8a1f50ef
    /// Content-Type: application/x-amz-json-1.1
    /// Content-Length: 1488
    /// Date: Mon, 12 Nov 2012 17:50:53 GMT
    /// {"hasMoreResults": false,  "pipelineObjects":  [ {"fields":  [ {"key": "startDateTime",  "stringValue": "2012-12-12T00:00:00"},  {"key": "parent",  "refValue": "Default"},  {"key": "@sphere",  "stringValue": "COMPONENT"},  {"key": "type",  "stringValue": "Schedule"},  {"key": "period",  "stringValue": "1 hour"},  {"key": "endDateTime",  "stringValue": "2012-12-21T18:00:00"},  {"key": "@version",  "stringValue": "1"},  {"key": "@status",  "stringValue": "PENDING"},  {"key": "@pipelineId",  "stringValue": "df-06372391ZG65EXAMPLE"} ],  "id": "Schedule",  "name": "Schedule"} ]
    /// }
    /// Return PaginatorSequence for operation.
    ///
    /// - Parameters:
    ///   - input: Input for request
    ///   - logger: Logger used flot logging
    public func describeObjectsPaginator(
        _ input: DescribeObjectsInput,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<DescribeObjectsInput, DescribeObjectsOutput> {
        return .init(
            input: input,
            command: self.describeObjects,
            inputKey: \DescribeObjectsInput.marker,
            outputKey: \DescribeObjectsOutput.marker,
            logger: logger
        )
    }

    /// Lists the pipeline identifiers for all active pipelines that you have permission to access.
    /// POST / HTTP/1.1
    /// Content-Type: application/x-amz-json-1.1
    /// X-Amz-Target: DataPipeline.ListPipelines
    /// Content-Length: 14
    /// Host: datapipeline.us-east-1.amazonaws.com
    /// X-Amz-Date: Mon, 12 Nov 2012 17:49:52 GMT
    /// Authorization: AuthParams
    /// {}
    /// Status:
    /// x-amzn-RequestId: b3104dc5-0734-11e2-af6f-6bc7a6be60d9
    /// Content-Type: application/x-amz-json-1.1
    /// Content-Length: 39
    /// Date: Mon, 12 Nov 2012 17:50:53 GMT
    /// {"PipelineIdList":  [ {"id": "df-08785951KAKJEXAMPLE", "name": "MyPipeline"},  {"id": "df-08662578ISYEXAMPLE",  "name": "MySecondPipeline"} ]
    /// }
    /// Return PaginatorSequence for operation.
    ///
    /// - Parameters:
    ///   - input: Input for request
    ///   - logger: Logger used flot logging
    public func listPipelinesPaginator(
        _ input: ListPipelinesInput,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<ListPipelinesInput, ListPipelinesOutput> {
        return .init(
            input: input,
            command: self.listPipelines,
            inputKey: \ListPipelinesInput.marker,
            outputKey: \ListPipelinesOutput.marker,
            logger: logger
        )
    }

    /// Queries the specified pipeline for the names of objects that match the specified set of conditions.
    /// POST / HTTP/1.1
    /// Content-Type: application/x-amz-json-1.1
    /// X-Amz-Target: DataPipeline.QueryObjects
    /// Content-Length: 123
    /// Host: datapipeline.us-east-1.amazonaws.com
    /// X-Amz-Date: Mon, 12 Nov 2012 17:49:52 GMT
    /// Authorization: AuthParams
    /// {"pipelineId": "df-06372391ZG65EXAMPLE", "query":  {"selectors":  [ ] }, "sphere": "INSTANCE", "marker": "", "limit": 10}
    ///
    /// x-amzn-RequestId: 14d704c1-0775-11e2-af6f-6bc7a6be60d9
    /// Content-Type: application/x-amz-json-1.1
    /// Content-Length: 72
    /// Date: Mon, 12 Nov 2012 17:50:53 GMT
    /// {"hasMoreResults": false,  "ids":  ["@SayHello_1_2012-09-25T17:00:00"]
    /// }
    /// Return PaginatorSequence for operation.
    ///
    /// - Parameters:
    ///   - input: Input for request
    ///   - logger: Logger used flot logging
    public func queryObjectsPaginator(
        _ input: QueryObjectsInput,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<QueryObjectsInput, QueryObjectsOutput> {
        return .init(
            input: input,
            command: self.queryObjects,
            inputKey: \QueryObjectsInput.marker,
            outputKey: \QueryObjectsOutput.marker,
            logger: logger
        )
    }
}

extension DataPipeline.DescribeObjectsInput: AWSPaginateToken {
    public func usingPaginationToken(_ token: String) -> DataPipeline.DescribeObjectsInput {
        return .init(
            evaluateExpressions: self.evaluateExpressions,
            marker: token,
            objectIds: self.objectIds,
            pipelineId: self.pipelineId
        )
    }
}

extension DataPipeline.ListPipelinesInput: AWSPaginateToken {
    public func usingPaginationToken(_ token: String) -> DataPipeline.ListPipelinesInput {
        return .init(
            marker: token
        )
    }
}

extension DataPipeline.QueryObjectsInput: AWSPaginateToken {
    public func usingPaginationToken(_ token: String) -> DataPipeline.QueryObjectsInput {
        return .init(
            limit: self.limit,
            marker: token,
            pipelineId: self.pipelineId,
            query: self.query,
            sphere: self.sphere
        )
    }
}
