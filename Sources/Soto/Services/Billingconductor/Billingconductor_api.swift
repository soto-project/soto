//===----------------------------------------------------------------------===//
//
// This source file is part of the Soto for AWS open source project
//
// Copyright (c) 2017-2023 the Soto project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
// See CONTRIBUTORS.txt for the list of Soto project authors
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by https://github.com/soto-project/soto-codegenerator.
// DO NOT EDIT.

@_exported import SotoCore

/// Service object for interacting with AWS Billingconductor service.
///
/// Amazon Web Services Billing Conductor is a fully managed service that you can use to customize a proforma version of your billing data each month, to accurately show or chargeback your end customers. Amazon Web Services Billing Conductor doesn't change the way you're billed by Amazon Web Services each month by design. Instead, it provides you with a mechanism to configure, generate, and display rates to certain customers over a given billing period. You can also analyze the difference between the rates you apply to your accounting groupings relative to your actual rates from Amazon Web Services. As a result of your Amazon Web Services Billing Conductor configuration, the payer account can also see the custom rate applied on the billing details page of the Amazon Web Services Billing console, or configure a cost and usage report per billing group. This documentation shows how you can configure Amazon Web Services Billing Conductor using its API. For more information about using the Amazon Web Services Billing Conductor user interface, see the  Amazon Web Services Billing Conductor User Guide.
public struct Billingconductor: AWSService {
    // MARK: Member variables

    /// Client used for communication with AWS
    public let client: AWSClient
    /// Service configuration
    public let config: AWSServiceConfig

    // MARK: Initialization

    /// Initialize the Billingconductor client
    /// - parameters:
    ///     - client: AWSClient used to process requests
    ///     - partition: AWS partition where service resides, standard (.aws), china (.awscn), government (.awsusgov).
    ///     - endpoint: Custom endpoint URL to use instead of standard AWS servers
    ///     - middleware: Middleware chain used to edit requests before they are sent and responses before they are decoded 
    ///     - timeout: Timeout value for HTTP requests
    ///     - byteBufferAllocator: Allocator for ByteBuffers
    ///     - options: Service options
    public init(
        client: AWSClient,
        partition: AWSPartition = .aws,
        endpoint: String? = nil,
        middleware: AWSMiddlewareProtocol? = nil,
        timeout: TimeAmount? = nil,
        byteBufferAllocator: ByteBufferAllocator = ByteBufferAllocator(),
        options: AWSServiceConfig.Options = []
    ) {
        self.client = client
        self.config = AWSServiceConfig(
            region: nil,
            partition: partition,
            serviceName: "Billingconductor",
            serviceIdentifier: "billingconductor",
            serviceProtocol: .restjson,
            apiVersion: "2021-07-30",
            endpoint: endpoint,
            serviceEndpoints: Self.serviceEndpoints,
            partitionEndpoints: Self.partitionEndpoints,
            errorType: BillingconductorErrorType.self,
            middleware: middleware,
            timeout: timeout,
            byteBufferAllocator: byteBufferAllocator,
            options: options
        )
    }


    /// custom endpoints for regions
    static var serviceEndpoints: [String: String] {[
        "aws-global": "billingconductor.us-east-1.amazonaws.com"
    ]}

    /// Default endpoint and region to use for each partition
    static var partitionEndpoints: [AWSPartition: (endpoint: String, region: SotoCore.Region)] {[
        .aws: (endpoint: "aws-global", region: .useast1)
    ]}


    // MARK: API Calls

    /// Connects an array of account IDs in a consolidated billing family to a predefined billing group. The account IDs must be a part of the consolidated billing family during the current month, and not already associated with another billing group. The maximum number of accounts that can be associated in one call is 30.
    @Sendable
    public func associateAccounts(_ input: AssociateAccountsInput, logger: Logger = AWSClient.loggingDisabled) async throws -> AssociateAccountsOutput {
        return try await self.client.execute(
            operation: "AssociateAccounts", 
            path: "/associate-accounts", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Connects an array of PricingRuleArns to a defined PricingPlan. The maximum number PricingRuleArn that can be associated in one call is 30.
    @Sendable
    public func associatePricingRules(_ input: AssociatePricingRulesInput, logger: Logger = AWSClient.loggingDisabled) async throws -> AssociatePricingRulesOutput {
        return try await self.client.execute(
            operation: "AssociatePricingRules", 
            path: "/associate-pricing-rules", 
            httpMethod: .PUT, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    ///  Associates a batch of resources to a percentage custom line item.
    @Sendable
    public func batchAssociateResourcesToCustomLineItem(_ input: BatchAssociateResourcesToCustomLineItemInput, logger: Logger = AWSClient.loggingDisabled) async throws -> BatchAssociateResourcesToCustomLineItemOutput {
        return try await self.client.execute(
            operation: "BatchAssociateResourcesToCustomLineItem", 
            path: "/batch-associate-resources-to-custom-line-item", 
            httpMethod: .PUT, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    ///  Disassociates a batch of resources from a percentage custom line item.
    @Sendable
    public func batchDisassociateResourcesFromCustomLineItem(_ input: BatchDisassociateResourcesFromCustomLineItemInput, logger: Logger = AWSClient.loggingDisabled) async throws -> BatchDisassociateResourcesFromCustomLineItemOutput {
        return try await self.client.execute(
            operation: "BatchDisassociateResourcesFromCustomLineItem", 
            path: "/batch-disassociate-resources-from-custom-line-item", 
            httpMethod: .PUT, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    ///  Creates a billing group that resembles a consolidated billing family that Amazon Web Services charges, based off of the predefined pricing plan computation.
    @Sendable
    public func createBillingGroup(_ input: CreateBillingGroupInput, logger: Logger = AWSClient.loggingDisabled) async throws -> CreateBillingGroupOutput {
        return try await self.client.execute(
            operation: "CreateBillingGroup", 
            path: "/create-billing-group", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Creates a custom line item that can be used to create a one-time fixed charge that can be applied to a single billing group for the current or previous billing period. The one-time fixed charge is either a fee or discount.
    @Sendable
    public func createCustomLineItem(_ input: CreateCustomLineItemInput, logger: Logger = AWSClient.loggingDisabled) async throws -> CreateCustomLineItemOutput {
        return try await self.client.execute(
            operation: "CreateCustomLineItem", 
            path: "/create-custom-line-item", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Creates a pricing plan that is used for computing Amazon Web Services charges for billing groups.
    @Sendable
    public func createPricingPlan(_ input: CreatePricingPlanInput, logger: Logger = AWSClient.loggingDisabled) async throws -> CreatePricingPlanOutput {
        return try await self.client.execute(
            operation: "CreatePricingPlan", 
            path: "/create-pricing-plan", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    ///  Creates a pricing rule can be associated to a pricing plan, or a set of pricing plans.
    @Sendable
    public func createPricingRule(_ input: CreatePricingRuleInput, logger: Logger = AWSClient.loggingDisabled) async throws -> CreatePricingRuleOutput {
        return try await self.client.execute(
            operation: "CreatePricingRule", 
            path: "/create-pricing-rule", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    ///  Deletes a billing group.
    @Sendable
    public func deleteBillingGroup(_ input: DeleteBillingGroupInput, logger: Logger = AWSClient.loggingDisabled) async throws -> DeleteBillingGroupOutput {
        return try await self.client.execute(
            operation: "DeleteBillingGroup", 
            path: "/delete-billing-group", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    ///  Deletes the custom line item identified by the given ARN in the current, or previous billing period.
    @Sendable
    public func deleteCustomLineItem(_ input: DeleteCustomLineItemInput, logger: Logger = AWSClient.loggingDisabled) async throws -> DeleteCustomLineItemOutput {
        return try await self.client.execute(
            operation: "DeleteCustomLineItem", 
            path: "/delete-custom-line-item", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Deletes a pricing plan. The pricing plan must not be associated with any billing groups to delete successfully.
    @Sendable
    public func deletePricingPlan(_ input: DeletePricingPlanInput, logger: Logger = AWSClient.loggingDisabled) async throws -> DeletePricingPlanOutput {
        return try await self.client.execute(
            operation: "DeletePricingPlan", 
            path: "/delete-pricing-plan", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    ///  Deletes the pricing rule that's identified by the input Amazon Resource Name (ARN).
    @Sendable
    public func deletePricingRule(_ input: DeletePricingRuleInput, logger: Logger = AWSClient.loggingDisabled) async throws -> DeletePricingRuleOutput {
        return try await self.client.execute(
            operation: "DeletePricingRule", 
            path: "/delete-pricing-rule", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Removes the specified list of account IDs from the given billing group.
    @Sendable
    public func disassociateAccounts(_ input: DisassociateAccountsInput, logger: Logger = AWSClient.loggingDisabled) async throws -> DisassociateAccountsOutput {
        return try await self.client.execute(
            operation: "DisassociateAccounts", 
            path: "/disassociate-accounts", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    ///  Disassociates a list of pricing rules from a pricing plan.
    @Sendable
    public func disassociatePricingRules(_ input: DisassociatePricingRulesInput, logger: Logger = AWSClient.loggingDisabled) async throws -> DisassociatePricingRulesOutput {
        return try await self.client.execute(
            operation: "DisassociatePricingRules", 
            path: "/disassociate-pricing-rules", 
            httpMethod: .PUT, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Retrieves the margin summary report, which includes the Amazon Web Services cost and charged  amount (pro forma cost) by Amazon Web Service for a specific billing group.
    @Sendable
    public func getBillingGroupCostReport(_ input: GetBillingGroupCostReportInput, logger: Logger = AWSClient.loggingDisabled) async throws -> GetBillingGroupCostReportOutput {
        return try await self.client.execute(
            operation: "GetBillingGroupCostReport", 
            path: "/get-billing-group-cost-report", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    ///  This is a paginated call to list linked accounts that are linked to the payer account for the specified time period. If no information is provided, the current billing period is used. The response will optionally include the billing group that's associated with the linked account.
    @Sendable
    public func listAccountAssociations(_ input: ListAccountAssociationsInput, logger: Logger = AWSClient.loggingDisabled) async throws -> ListAccountAssociationsOutput {
        return try await self.client.execute(
            operation: "ListAccountAssociations", 
            path: "/list-account-associations", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// A paginated call to retrieve a summary report of actual Amazon Web Services charges and the calculated Amazon Web Services charges based on the associated pricing plan of a billing group.
    @Sendable
    public func listBillingGroupCostReports(_ input: ListBillingGroupCostReportsInput, logger: Logger = AWSClient.loggingDisabled) async throws -> ListBillingGroupCostReportsOutput {
        return try await self.client.execute(
            operation: "ListBillingGroupCostReports", 
            path: "/list-billing-group-cost-reports", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// A paginated call to retrieve a list of billing groups for the given billing period. If you don't provide a billing group, the current billing period is used.
    @Sendable
    public func listBillingGroups(_ input: ListBillingGroupsInput, logger: Logger = AWSClient.loggingDisabled) async throws -> ListBillingGroupsOutput {
        return try await self.client.execute(
            operation: "ListBillingGroups", 
            path: "/list-billing-groups", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// A paginated call to get a list of all custom line item versions.
    @Sendable
    public func listCustomLineItemVersions(_ input: ListCustomLineItemVersionsInput, logger: Logger = AWSClient.loggingDisabled) async throws -> ListCustomLineItemVersionsOutput {
        return try await self.client.execute(
            operation: "ListCustomLineItemVersions", 
            path: "/list-custom-line-item-versions", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    ///  A paginated call to get a list of all custom line items (FFLIs) for the given billing period. If you don't provide a billing period, the current billing period is used.
    @Sendable
    public func listCustomLineItems(_ input: ListCustomLineItemsInput, logger: Logger = AWSClient.loggingDisabled) async throws -> ListCustomLineItemsOutput {
        return try await self.client.execute(
            operation: "ListCustomLineItems", 
            path: "/list-custom-line-items", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// A paginated call to get pricing plans for the given billing period. If you don't provide a billing period, the current billing period is used.
    @Sendable
    public func listPricingPlans(_ input: ListPricingPlansInput, logger: Logger = AWSClient.loggingDisabled) async throws -> ListPricingPlansOutput {
        return try await self.client.execute(
            operation: "ListPricingPlans", 
            path: "/list-pricing-plans", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    ///  A list of the pricing plans that are associated with a pricing rule.
    @Sendable
    public func listPricingPlansAssociatedWithPricingRule(_ input: ListPricingPlansAssociatedWithPricingRuleInput, logger: Logger = AWSClient.loggingDisabled) async throws -> ListPricingPlansAssociatedWithPricingRuleOutput {
        return try await self.client.execute(
            operation: "ListPricingPlansAssociatedWithPricingRule", 
            path: "/list-pricing-plans-associated-with-pricing-rule", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    ///  Describes a pricing rule that can be associated to a pricing plan, or set of pricing plans.
    @Sendable
    public func listPricingRules(_ input: ListPricingRulesInput, logger: Logger = AWSClient.loggingDisabled) async throws -> ListPricingRulesOutput {
        return try await self.client.execute(
            operation: "ListPricingRules", 
            path: "/list-pricing-rules", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    ///  Lists the pricing rules that are associated with a pricing plan.
    @Sendable
    public func listPricingRulesAssociatedToPricingPlan(_ input: ListPricingRulesAssociatedToPricingPlanInput, logger: Logger = AWSClient.loggingDisabled) async throws -> ListPricingRulesAssociatedToPricingPlanOutput {
        return try await self.client.execute(
            operation: "ListPricingRulesAssociatedToPricingPlan", 
            path: "/list-pricing-rules-associated-to-pricing-plan", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    ///  List the resources that are associated to a custom line item.
    @Sendable
    public func listResourcesAssociatedToCustomLineItem(_ input: ListResourcesAssociatedToCustomLineItemInput, logger: Logger = AWSClient.loggingDisabled) async throws -> ListResourcesAssociatedToCustomLineItemOutput {
        return try await self.client.execute(
            operation: "ListResourcesAssociatedToCustomLineItem", 
            path: "/list-resources-associated-to-custom-line-item", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    ///  A list the tags for a resource.
    @Sendable
    public func listTagsForResource(_ input: ListTagsForResourceRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> ListTagsForResourceResponse {
        return try await self.client.execute(
            operation: "ListTagsForResource", 
            path: "/tags/{ResourceArn}", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    ///  Associates the specified tags to a resource with the specified resourceArn. If existing tags on a resource are not specified in the request parameters, they are not changed.
    @Sendable
    public func tagResource(_ input: TagResourceRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> TagResourceResponse {
        return try await self.client.execute(
            operation: "TagResource", 
            path: "/tags/{ResourceArn}", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    ///  Deletes specified tags from a resource.
    @Sendable
    public func untagResource(_ input: UntagResourceRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> UntagResourceResponse {
        return try await self.client.execute(
            operation: "UntagResource", 
            path: "/tags/{ResourceArn}", 
            httpMethod: .DELETE, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// This updates an existing billing group.
    @Sendable
    public func updateBillingGroup(_ input: UpdateBillingGroupInput, logger: Logger = AWSClient.loggingDisabled) async throws -> UpdateBillingGroupOutput {
        return try await self.client.execute(
            operation: "UpdateBillingGroup", 
            path: "/update-billing-group", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    ///  Update an existing custom line item in the current or previous billing period.
    @Sendable
    public func updateCustomLineItem(_ input: UpdateCustomLineItemInput, logger: Logger = AWSClient.loggingDisabled) async throws -> UpdateCustomLineItemOutput {
        return try await self.client.execute(
            operation: "UpdateCustomLineItem", 
            path: "/update-custom-line-item", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// This updates an existing pricing plan.
    @Sendable
    public func updatePricingPlan(_ input: UpdatePricingPlanInput, logger: Logger = AWSClient.loggingDisabled) async throws -> UpdatePricingPlanOutput {
        return try await self.client.execute(
            operation: "UpdatePricingPlan", 
            path: "/update-pricing-plan", 
            httpMethod: .PUT, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    ///  Updates an existing pricing rule.
    @Sendable
    public func updatePricingRule(_ input: UpdatePricingRuleInput, logger: Logger = AWSClient.loggingDisabled) async throws -> UpdatePricingRuleOutput {
        return try await self.client.execute(
            operation: "UpdatePricingRule", 
            path: "/update-pricing-rule", 
            httpMethod: .PUT, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
}

extension Billingconductor {
    /// Initializer required by `AWSService.with(middlewares:timeout:byteBufferAllocator:options)`. You are not able to use this initializer directly as there are not public
    /// initializers for `AWSServiceConfig.Patch`. Please use `AWSService.with(middlewares:timeout:byteBufferAllocator:options)` instead.
    public init(from: Billingconductor, patch: AWSServiceConfig.Patch) {
        self.client = from.client
        self.config = from.config.with(patch: patch)
    }
}

// MARK: Paginators

@available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
extension Billingconductor {
    /// Retrieves the margin summary report, which includes the Amazon Web Services cost and charged  amount (pro forma cost) by Amazon Web Service for a specific billing group.
    /// Return PaginatorSequence for operation.
    ///
    /// - Parameters:
    ///   - input: Input for request
    ///   - logger: Logger used flot logging
    public func getBillingGroupCostReportPaginator(
        _ input: GetBillingGroupCostReportInput,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<GetBillingGroupCostReportInput, GetBillingGroupCostReportOutput> {
        return .init(
            input: input,
            command: self.getBillingGroupCostReport,
            inputKey: \GetBillingGroupCostReportInput.nextToken,
            outputKey: \GetBillingGroupCostReportOutput.nextToken,
            logger: logger
        )
    }

    ///  This is a paginated call to list linked accounts that are linked to the payer account for the specified time period. If no information is provided, the current billing period is used. The response will optionally include the billing group that's associated with the linked account.
    /// Return PaginatorSequence for operation.
    ///
    /// - Parameters:
    ///   - input: Input for request
    ///   - logger: Logger used flot logging
    public func listAccountAssociationsPaginator(
        _ input: ListAccountAssociationsInput,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<ListAccountAssociationsInput, ListAccountAssociationsOutput> {
        return .init(
            input: input,
            command: self.listAccountAssociations,
            inputKey: \ListAccountAssociationsInput.nextToken,
            outputKey: \ListAccountAssociationsOutput.nextToken,
            logger: logger
        )
    }

    /// A paginated call to retrieve a summary report of actual Amazon Web Services charges and the calculated Amazon Web Services charges based on the associated pricing plan of a billing group.
    /// Return PaginatorSequence for operation.
    ///
    /// - Parameters:
    ///   - input: Input for request
    ///   - logger: Logger used flot logging
    public func listBillingGroupCostReportsPaginator(
        _ input: ListBillingGroupCostReportsInput,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<ListBillingGroupCostReportsInput, ListBillingGroupCostReportsOutput> {
        return .init(
            input: input,
            command: self.listBillingGroupCostReports,
            inputKey: \ListBillingGroupCostReportsInput.nextToken,
            outputKey: \ListBillingGroupCostReportsOutput.nextToken,
            logger: logger
        )
    }

    /// A paginated call to retrieve a list of billing groups for the given billing period. If you don't provide a billing group, the current billing period is used.
    /// Return PaginatorSequence for operation.
    ///
    /// - Parameters:
    ///   - input: Input for request
    ///   - logger: Logger used flot logging
    public func listBillingGroupsPaginator(
        _ input: ListBillingGroupsInput,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<ListBillingGroupsInput, ListBillingGroupsOutput> {
        return .init(
            input: input,
            command: self.listBillingGroups,
            inputKey: \ListBillingGroupsInput.nextToken,
            outputKey: \ListBillingGroupsOutput.nextToken,
            logger: logger
        )
    }

    /// A paginated call to get a list of all custom line item versions.
    /// Return PaginatorSequence for operation.
    ///
    /// - Parameters:
    ///   - input: Input for request
    ///   - logger: Logger used flot logging
    public func listCustomLineItemVersionsPaginator(
        _ input: ListCustomLineItemVersionsInput,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<ListCustomLineItemVersionsInput, ListCustomLineItemVersionsOutput> {
        return .init(
            input: input,
            command: self.listCustomLineItemVersions,
            inputKey: \ListCustomLineItemVersionsInput.nextToken,
            outputKey: \ListCustomLineItemVersionsOutput.nextToken,
            logger: logger
        )
    }

    ///  A paginated call to get a list of all custom line items (FFLIs) for the given billing period. If you don't provide a billing period, the current billing period is used.
    /// Return PaginatorSequence for operation.
    ///
    /// - Parameters:
    ///   - input: Input for request
    ///   - logger: Logger used flot logging
    public func listCustomLineItemsPaginator(
        _ input: ListCustomLineItemsInput,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<ListCustomLineItemsInput, ListCustomLineItemsOutput> {
        return .init(
            input: input,
            command: self.listCustomLineItems,
            inputKey: \ListCustomLineItemsInput.nextToken,
            outputKey: \ListCustomLineItemsOutput.nextToken,
            logger: logger
        )
    }

    /// A paginated call to get pricing plans for the given billing period. If you don't provide a billing period, the current billing period is used.
    /// Return PaginatorSequence for operation.
    ///
    /// - Parameters:
    ///   - input: Input for request
    ///   - logger: Logger used flot logging
    public func listPricingPlansPaginator(
        _ input: ListPricingPlansInput,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<ListPricingPlansInput, ListPricingPlansOutput> {
        return .init(
            input: input,
            command: self.listPricingPlans,
            inputKey: \ListPricingPlansInput.nextToken,
            outputKey: \ListPricingPlansOutput.nextToken,
            logger: logger
        )
    }

    ///  A list of the pricing plans that are associated with a pricing rule.
    /// Return PaginatorSequence for operation.
    ///
    /// - Parameters:
    ///   - input: Input for request
    ///   - logger: Logger used flot logging
    public func listPricingPlansAssociatedWithPricingRulePaginator(
        _ input: ListPricingPlansAssociatedWithPricingRuleInput,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<ListPricingPlansAssociatedWithPricingRuleInput, ListPricingPlansAssociatedWithPricingRuleOutput> {
        return .init(
            input: input,
            command: self.listPricingPlansAssociatedWithPricingRule,
            inputKey: \ListPricingPlansAssociatedWithPricingRuleInput.nextToken,
            outputKey: \ListPricingPlansAssociatedWithPricingRuleOutput.nextToken,
            logger: logger
        )
    }

    ///  Describes a pricing rule that can be associated to a pricing plan, or set of pricing plans.
    /// Return PaginatorSequence for operation.
    ///
    /// - Parameters:
    ///   - input: Input for request
    ///   - logger: Logger used flot logging
    public func listPricingRulesPaginator(
        _ input: ListPricingRulesInput,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<ListPricingRulesInput, ListPricingRulesOutput> {
        return .init(
            input: input,
            command: self.listPricingRules,
            inputKey: \ListPricingRulesInput.nextToken,
            outputKey: \ListPricingRulesOutput.nextToken,
            logger: logger
        )
    }

    ///  Lists the pricing rules that are associated with a pricing plan.
    /// Return PaginatorSequence for operation.
    ///
    /// - Parameters:
    ///   - input: Input for request
    ///   - logger: Logger used flot logging
    public func listPricingRulesAssociatedToPricingPlanPaginator(
        _ input: ListPricingRulesAssociatedToPricingPlanInput,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<ListPricingRulesAssociatedToPricingPlanInput, ListPricingRulesAssociatedToPricingPlanOutput> {
        return .init(
            input: input,
            command: self.listPricingRulesAssociatedToPricingPlan,
            inputKey: \ListPricingRulesAssociatedToPricingPlanInput.nextToken,
            outputKey: \ListPricingRulesAssociatedToPricingPlanOutput.nextToken,
            logger: logger
        )
    }

    ///  List the resources that are associated to a custom line item.
    /// Return PaginatorSequence for operation.
    ///
    /// - Parameters:
    ///   - input: Input for request
    ///   - logger: Logger used flot logging
    public func listResourcesAssociatedToCustomLineItemPaginator(
        _ input: ListResourcesAssociatedToCustomLineItemInput,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<ListResourcesAssociatedToCustomLineItemInput, ListResourcesAssociatedToCustomLineItemOutput> {
        return .init(
            input: input,
            command: self.listResourcesAssociatedToCustomLineItem,
            inputKey: \ListResourcesAssociatedToCustomLineItemInput.nextToken,
            outputKey: \ListResourcesAssociatedToCustomLineItemOutput.nextToken,
            logger: logger
        )
    }
}

extension Billingconductor.GetBillingGroupCostReportInput: AWSPaginateToken {
    public func usingPaginationToken(_ token: String) -> Billingconductor.GetBillingGroupCostReportInput {
        return .init(
            arn: self.arn,
            billingPeriodRange: self.billingPeriodRange,
            groupBy: self.groupBy,
            maxResults: self.maxResults,
            nextToken: token
        )
    }
}

extension Billingconductor.ListAccountAssociationsInput: AWSPaginateToken {
    public func usingPaginationToken(_ token: String) -> Billingconductor.ListAccountAssociationsInput {
        return .init(
            billingPeriod: self.billingPeriod,
            filters: self.filters,
            nextToken: token
        )
    }
}

extension Billingconductor.ListBillingGroupCostReportsInput: AWSPaginateToken {
    public func usingPaginationToken(_ token: String) -> Billingconductor.ListBillingGroupCostReportsInput {
        return .init(
            billingPeriod: self.billingPeriod,
            filters: self.filters,
            maxResults: self.maxResults,
            nextToken: token
        )
    }
}

extension Billingconductor.ListBillingGroupsInput: AWSPaginateToken {
    public func usingPaginationToken(_ token: String) -> Billingconductor.ListBillingGroupsInput {
        return .init(
            billingPeriod: self.billingPeriod,
            filters: self.filters,
            maxResults: self.maxResults,
            nextToken: token
        )
    }
}

extension Billingconductor.ListCustomLineItemVersionsInput: AWSPaginateToken {
    public func usingPaginationToken(_ token: String) -> Billingconductor.ListCustomLineItemVersionsInput {
        return .init(
            arn: self.arn,
            filters: self.filters,
            maxResults: self.maxResults,
            nextToken: token
        )
    }
}

extension Billingconductor.ListCustomLineItemsInput: AWSPaginateToken {
    public func usingPaginationToken(_ token: String) -> Billingconductor.ListCustomLineItemsInput {
        return .init(
            billingPeriod: self.billingPeriod,
            filters: self.filters,
            maxResults: self.maxResults,
            nextToken: token
        )
    }
}

extension Billingconductor.ListPricingPlansAssociatedWithPricingRuleInput: AWSPaginateToken {
    public func usingPaginationToken(_ token: String) -> Billingconductor.ListPricingPlansAssociatedWithPricingRuleInput {
        return .init(
            billingPeriod: self.billingPeriod,
            maxResults: self.maxResults,
            nextToken: token,
            pricingRuleArn: self.pricingRuleArn
        )
    }
}

extension Billingconductor.ListPricingPlansInput: AWSPaginateToken {
    public func usingPaginationToken(_ token: String) -> Billingconductor.ListPricingPlansInput {
        return .init(
            billingPeriod: self.billingPeriod,
            filters: self.filters,
            maxResults: self.maxResults,
            nextToken: token
        )
    }
}

extension Billingconductor.ListPricingRulesAssociatedToPricingPlanInput: AWSPaginateToken {
    public func usingPaginationToken(_ token: String) -> Billingconductor.ListPricingRulesAssociatedToPricingPlanInput {
        return .init(
            billingPeriod: self.billingPeriod,
            maxResults: self.maxResults,
            nextToken: token,
            pricingPlanArn: self.pricingPlanArn
        )
    }
}

extension Billingconductor.ListPricingRulesInput: AWSPaginateToken {
    public func usingPaginationToken(_ token: String) -> Billingconductor.ListPricingRulesInput {
        return .init(
            billingPeriod: self.billingPeriod,
            filters: self.filters,
            maxResults: self.maxResults,
            nextToken: token
        )
    }
}

extension Billingconductor.ListResourcesAssociatedToCustomLineItemInput: AWSPaginateToken {
    public func usingPaginationToken(_ token: String) -> Billingconductor.ListResourcesAssociatedToCustomLineItemInput {
        return .init(
            arn: self.arn,
            billingPeriod: self.billingPeriod,
            filters: self.filters,
            maxResults: self.maxResults,
            nextToken: token
        )
    }
}
