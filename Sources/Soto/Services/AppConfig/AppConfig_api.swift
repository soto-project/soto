//===----------------------------------------------------------------------===//
//
// This source file is part of the Soto for AWS open source project
//
// Copyright (c) 2017-2024 the Soto project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
// See CONTRIBUTORS.txt for the list of Soto project authors
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by https://github.com/soto-project/soto-codegenerator.
// DO NOT EDIT.

#if os(Linux) && compiler(<5.10)
// swift-corelibs-foundation hasn't been updated with Sendable conformances
@preconcurrency import Foundation
#else
import Foundation
#endif
@_exported import SotoCore

/// Service object for interacting with AWS AppConfig service.
///
/// AppConfig feature flags and dynamic configurations help software builders quickly and securely adjust application behavior in production environments without full code deployments. AppConfig speeds up software release frequency, improves application resiliency, and helps you address emergent issues more quickly. With feature flags, you can gradually release new capabilities to users and measure the impact of those changes before fully deploying the new capabilities to all users. With operational flags and dynamic configurations, you can update block lists, allow lists, throttling limits, logging verbosity, and perform other operational tuning to quickly respond to issues in production environments.  AppConfig is a capability of Amazon Web Services Systems Manager.  Despite the fact that application configuration content can vary greatly from application to application, AppConfig supports the following use cases, which cover a broad spectrum of customer needs:    Feature flags and toggles - Safely release new capabilities to your customers in a controlled environment. Instantly roll back changes if you experience a problem.    Application tuning - Carefully introduce application changes while testing the impact of those changes with users in production environments.    Allow list or block list - Control access to premium features or instantly block specific users without deploying new code.     Centralized configuration storage - Keep your configuration data organized and consistent across all of your workloads. You can use AppConfig to deploy configuration data stored in the AppConfig hosted configuration store, Secrets Manager, Systems Manager, Parameter Store, or Amazon S3.    How AppConfig works  This section provides a high-level description of how AppConfig works and how you get started.  1. Identify configuration values in code you want to manage in the cloud  Before you start creating AppConfig artifacts, we recommend you identify configuration data in your code that you want to dynamically manage using AppConfig. Good examples include feature flags or toggles, allow and block lists, logging verbosity, service limits, and throttling rules, to name a few. If your configuration data already exists in the cloud, you can take advantage of AppConfig validation, deployment, and extension features to further streamline configuration data management.  2. Create an application namespace  To create a namespace, you create an AppConfig artifact called an application. An application is simply an organizational construct like a folder.  3. Create environments  For each AppConfig application, you define one or more environments. An environment is a logical grouping of targets, such as applications in a Beta or Production environment, Lambda functions, or containers. You can also define environments for application subcomponents, such as the Web, Mobile, and Back-end. You can configure Amazon CloudWatch alarms for each environment. The system monitors alarms during a configuration deployment. If an alarm is triggered, the system rolls back the configuration.  4. Create a configuration profile  A configuration profile includes, among other things, a URI that enables AppConfig to locate your configuration data in its stored location and a profile type. AppConfig supports two configuration profile types: feature flags and freeform configurations. Feature flag configuration profiles store their data in the AppConfig hosted configuration store and the URI is simply hosted. For freeform configuration profiles, you can store your data in the AppConfig hosted configuration store or any Amazon Web Services service that integrates with AppConfig, as described in Creating a free form configuration profile in the the AppConfig User Guide. A configuration profile can also include optional validators to ensure your configuration data is syntactically and semantically correct. AppConfig performs a check using the validators when you start a deployment. If any errors are detected, the deployment rolls back to the previous configuration data.  5. Deploy configuration data  When you create a new deployment, you specify the following:   An application ID   A configuration profile ID   A configuration version   An environment ID where you want to deploy the configuration data   A deployment strategy ID that defines how fast you want the changes to take effect   When you call the StartDeployment API action, AppConfig performs the following tasks:   Retrieves the configuration data from the underlying data store by using the location URI in the configuration profile.   Verifies the configuration data is syntactically and semantically correct by using the validators you specified when you created your configuration profile.   Caches a copy of the data so it is ready to be retrieved by your application. This cached copy is called the deployed data.    6. Retrieve the configuration  You can configure AppConfig Agent as a local host and have the agent poll AppConfig for configuration updates. The agent calls the StartConfigurationSession and GetLatestConfiguration API actions and caches your configuration data locally. To retrieve the data, your application makes an HTTP call to the localhost server. AppConfig Agent supports several use cases, as described in Simplified retrieval methods in the the AppConfig User Guide. If AppConfig Agent isn't supported for your use case, you can configure your application to poll AppConfig for configuration updates by directly calling the StartConfigurationSession and GetLatestConfiguration API actions.    This reference is intended to be used with the AppConfig User Guide.
public struct AppConfig: AWSService {
    // MARK: Member variables

    /// Client used for communication with AWS
    public let client: AWSClient
    /// Service configuration
    public let config: AWSServiceConfig

    // MARK: Initialization

    /// Initialize the AppConfig client
    /// - parameters:
    ///     - client: AWSClient used to process requests
    ///     - region: Region of server you want to communicate with. This will override the partition parameter.
    ///     - partition: AWS partition where service resides, standard (.aws), china (.awscn), government (.awsusgov).
    ///     - endpoint: Custom endpoint URL to use instead of standard AWS servers
    ///     - middleware: Middleware chain used to edit requests before they are sent and responses before they are decoded 
    ///     - timeout: Timeout value for HTTP requests
    ///     - byteBufferAllocator: Allocator for ByteBuffers
    ///     - options: Service options
    public init(
        client: AWSClient,
        region: SotoCore.Region? = nil,
        partition: AWSPartition = .aws,
        endpoint: String? = nil,
        middleware: AWSMiddlewareProtocol? = nil,
        timeout: TimeAmount? = nil,
        byteBufferAllocator: ByteBufferAllocator = ByteBufferAllocator(),
        options: AWSServiceConfig.Options = []
    ) {
        self.client = client
        self.config = AWSServiceConfig(
            region: region,
            partition: region?.partition ?? partition,
            serviceName: "AppConfig",
            serviceIdentifier: "appconfig",
            serviceProtocol: .restjson,
            apiVersion: "2019-10-09",
            endpoint: endpoint,
            variantEndpoints: Self.variantEndpoints,
            errorType: AppConfigErrorType.self,
            middleware: middleware,
            timeout: timeout,
            byteBufferAllocator: byteBufferAllocator,
            options: options
        )
    }




    /// FIPS and dualstack endpoints
    static var variantEndpoints: [EndpointVariantType: AWSServiceConfig.EndpointVariant] {[
        [.fips]: .init(endpoints: [
            "us-gov-east-1": "appconfig.us-gov-east-1.amazonaws.com",
            "us-gov-west-1": "appconfig.us-gov-west-1.amazonaws.com"
        ])
    ]}

    // MARK: API Calls

    /// Creates an application. In AppConfig, an application is simply an organizational construct like a folder. This organizational construct has a relationship with some unit of executable code. For example, you could create an application called MyMobileApp to organize and manage configuration data for a mobile application installed by your users.
    @Sendable
    @inlinable
    public func createApplication(_ input: CreateApplicationRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> Application {
        try await self.client.execute(
            operation: "CreateApplication", 
            path: "/applications", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Creates an application. In AppConfig, an application is simply an organizational construct like a folder. This organizational construct has a relationship with some unit of executable code. For example, you could create an application called MyMobileApp to organize and manage configuration data for a mobile application installed by your users.
    ///
    /// Parameters:
    ///   - description: A description of the application.
    ///   - name: A name for the application.
    ///   - tags: Metadata to assign to the application. Tags help organize and categorize your AppConfig resources. Each tag consists of a key and an optional value, both of which you define.
    ///   - logger: Logger use during operation
    @inlinable
    public func createApplication(
        description: String? = nil,
        name: String,
        tags: [String: String]? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> Application {
        let input = CreateApplicationRequest(
            description: description, 
            name: name, 
            tags: tags
        )
        return try await self.createApplication(input, logger: logger)
    }

    /// Creates a configuration profile, which is information that enables AppConfig to access the configuration source. Valid configuration sources include the following:   Configuration data in YAML, JSON, and other formats stored in the AppConfig hosted configuration store   Configuration data stored as objects in an Amazon Simple Storage Service (Amazon S3) bucket   Pipelines stored in CodePipeline   Secrets stored in Secrets Manager   Standard and secure string parameters stored in Amazon Web Services Systems Manager Parameter Store   Configuration data in SSM documents stored in the Systems Manager document store   A configuration profile includes the following information:   The URI location of the configuration data.   The Identity and Access Management (IAM) role that provides access to the configuration data.   A validator for the configuration data. Available validators include either a JSON Schema or an Amazon Web Services Lambda function.   For more information, see Create a Configuration and a Configuration Profile in the AppConfig User Guide.
    @Sendable
    @inlinable
    public func createConfigurationProfile(_ input: CreateConfigurationProfileRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> ConfigurationProfile {
        try await self.client.execute(
            operation: "CreateConfigurationProfile", 
            path: "/applications/{ApplicationId}/configurationprofiles", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Creates a configuration profile, which is information that enables AppConfig to access the configuration source. Valid configuration sources include the following:   Configuration data in YAML, JSON, and other formats stored in the AppConfig hosted configuration store   Configuration data stored as objects in an Amazon Simple Storage Service (Amazon S3) bucket   Pipelines stored in CodePipeline   Secrets stored in Secrets Manager   Standard and secure string parameters stored in Amazon Web Services Systems Manager Parameter Store   Configuration data in SSM documents stored in the Systems Manager document store   A configuration profile includes the following information:   The URI location of the configuration data.   The Identity and Access Management (IAM) role that provides access to the configuration data.   A validator for the configuration data. Available validators include either a JSON Schema or an Amazon Web Services Lambda function.   For more information, see Create a Configuration and a Configuration Profile in the AppConfig User Guide.
    ///
    /// Parameters:
    ///   - applicationId: The application ID.
    ///   - description: A description of the configuration profile.
    ///   - kmsKeyIdentifier: The identifier for an Key Management Service key to encrypt new configuration data versions in the AppConfig hosted configuration store. This attribute is only used for hosted configuration types. The identifier can be an KMS key ID, alias, or the Amazon Resource Name (ARN) of the key ID or alias. To encrypt data managed in other configuration stores, see the documentation for how to specify an KMS key for that particular service.
    ///   - locationUri: A URI to locate the configuration. You can specify the following:   For the AppConfig hosted configuration store and for feature flags, specify hosted.   For an Amazon Web Services Systems Manager Parameter Store parameter, specify either the parameter name in the format ssm-parameter:// or the ARN.   For an Amazon Web Services CodePipeline pipeline, specify the URI in the following format: codepipeline://.   For an Secrets Manager secret, specify the URI in the following format: secretsmanager://.   For an Amazon S3 object, specify the URI in the following format: s3:/// . Here is an example: s3://my-bucket/my-app/us-east-1/my-config.json    For an SSM document, specify either the document name in the format ssm-document:// or the Amazon Resource Name (ARN).
    ///   - name: A name for the configuration profile.
    ///   - retrievalRoleArn: The ARN of an IAM role with permission to access the configuration at the specified LocationUri.  A retrieval role ARN is not required for configurations stored in the AppConfig hosted configuration store. It is required for all other sources that store your configuration.
    ///   - tags: Metadata to assign to the configuration profile. Tags help organize and categorize your AppConfig resources. Each tag consists of a key and an optional value, both of which you define.
    ///   - type: The type of configurations contained in the profile. AppConfig supports feature flags and freeform configurations. We recommend you create feature flag configurations to enable or disable new features and freeform configurations to distribute configurations to an application. When calling this API, enter one of the following values for Type:  AWS.AppConfig.FeatureFlags   AWS.Freeform
    ///   - validators: A list of methods for validating the configuration.
    ///   - logger: Logger use during operation
    @inlinable
    public func createConfigurationProfile(
        applicationId: String,
        description: String? = nil,
        kmsKeyIdentifier: String? = nil,
        locationUri: String,
        name: String,
        retrievalRoleArn: String? = nil,
        tags: [String: String]? = nil,
        type: String? = nil,
        validators: [Validator]? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> ConfigurationProfile {
        let input = CreateConfigurationProfileRequest(
            applicationId: applicationId, 
            description: description, 
            kmsKeyIdentifier: kmsKeyIdentifier, 
            locationUri: locationUri, 
            name: name, 
            retrievalRoleArn: retrievalRoleArn, 
            tags: tags, 
            type: type, 
            validators: validators
        )
        return try await self.createConfigurationProfile(input, logger: logger)
    }

    /// Creates a deployment strategy that defines important criteria for rolling out your configuration to the designated targets. A deployment strategy includes the overall duration required, a percentage of targets to receive the deployment during each interval, an algorithm that defines how percentage grows, and bake time.
    @Sendable
    @inlinable
    public func createDeploymentStrategy(_ input: CreateDeploymentStrategyRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DeploymentStrategy {
        try await self.client.execute(
            operation: "CreateDeploymentStrategy", 
            path: "/deploymentstrategies", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Creates a deployment strategy that defines important criteria for rolling out your configuration to the designated targets. A deployment strategy includes the overall duration required, a percentage of targets to receive the deployment during each interval, an algorithm that defines how percentage grows, and bake time.
    ///
    /// Parameters:
    ///   - deploymentDurationInMinutes: Total amount of time for a deployment to last.
    ///   - description: A description of the deployment strategy.
    ///   - finalBakeTimeInMinutes: Specifies the amount of time AppConfig monitors for Amazon CloudWatch alarms after the configuration has been deployed to 100% of its targets, before considering the deployment to be complete. If an alarm is triggered during this time, AppConfig rolls back the deployment. You must configure permissions for AppConfig to roll back based on CloudWatch alarms. For more information, see Configuring permissions for rollback based on Amazon CloudWatch alarms in the AppConfig User Guide.
    ///   - growthFactor: The percentage of targets to receive a deployed configuration during each interval.
    ///   - growthType: The algorithm used to define how percentage grows over time. AppConfig supports the following growth types:  Linear: For this type, AppConfig processes the deployment by dividing the total number of targets by the value specified for Step percentage. For example, a linear deployment that uses a Step percentage of 10 deploys the configuration to 10 percent of the hosts. After those deployments are complete, the system deploys the configuration to the next 10 percent. This continues until 100% of the targets have successfully received the configuration.  Exponential: For this type, AppConfig processes the deployment exponentially using the following formula: G*(2^N). In this formula, G is the growth factor specified by the user and N is the number of steps until the configuration is deployed to all targets. For example, if you specify a growth factor of 2, then the system rolls out the configuration as follows:  2*(2^0)   2*(2^1)   2*(2^2)  Expressed numerically, the deployment rolls out as follows: 2% of the targets, 4% of the targets, 8% of the targets, and continues until the configuration has been deployed to all targets.
    ///   - name: A name for the deployment strategy.
    ///   - replicateTo: Save the deployment strategy to a Systems Manager (SSM) document.
    ///   - tags: Metadata to assign to the deployment strategy. Tags help organize and categorize your AppConfig resources. Each tag consists of a key and an optional value, both of which you define.
    ///   - logger: Logger use during operation
    @inlinable
    public func createDeploymentStrategy(
        deploymentDurationInMinutes: Int,
        description: String? = nil,
        finalBakeTimeInMinutes: Int? = nil,
        growthFactor: Float,
        growthType: GrowthType? = nil,
        name: String,
        replicateTo: ReplicateTo? = nil,
        tags: [String: String]? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> DeploymentStrategy {
        let input = CreateDeploymentStrategyRequest(
            deploymentDurationInMinutes: deploymentDurationInMinutes, 
            description: description, 
            finalBakeTimeInMinutes: finalBakeTimeInMinutes, 
            growthFactor: growthFactor, 
            growthType: growthType, 
            name: name, 
            replicateTo: replicateTo, 
            tags: tags
        )
        return try await self.createDeploymentStrategy(input, logger: logger)
    }

    /// Creates an environment. For each application, you define one or more environments. An environment is a deployment group of AppConfig targets, such as applications in a Beta or Production environment. You can also define environments for application subcomponents such as the Web, Mobile and Back-end components for your application. You can configure Amazon CloudWatch alarms for each environment. The system monitors alarms during a configuration deployment. If an alarm is triggered, the system rolls back the configuration.
    @Sendable
    @inlinable
    public func createEnvironment(_ input: CreateEnvironmentRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> Environment {
        try await self.client.execute(
            operation: "CreateEnvironment", 
            path: "/applications/{ApplicationId}/environments", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Creates an environment. For each application, you define one or more environments. An environment is a deployment group of AppConfig targets, such as applications in a Beta or Production environment. You can also define environments for application subcomponents such as the Web, Mobile and Back-end components for your application. You can configure Amazon CloudWatch alarms for each environment. The system monitors alarms during a configuration deployment. If an alarm is triggered, the system rolls back the configuration.
    ///
    /// Parameters:
    ///   - applicationId: The application ID.
    ///   - description: A description of the environment.
    ///   - monitors: Amazon CloudWatch alarms to monitor during the deployment process.
    ///   - name: A name for the environment.
    ///   - tags: Metadata to assign to the environment. Tags help organize and categorize your AppConfig resources. Each tag consists of a key and an optional value, both of which you define.
    ///   - logger: Logger use during operation
    @inlinable
    public func createEnvironment(
        applicationId: String,
        description: String? = nil,
        monitors: [Monitor]? = nil,
        name: String,
        tags: [String: String]? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> Environment {
        let input = CreateEnvironmentRequest(
            applicationId: applicationId, 
            description: description, 
            monitors: monitors, 
            name: name, 
            tags: tags
        )
        return try await self.createEnvironment(input, logger: logger)
    }

    /// Creates an AppConfig extension. An extension augments your ability to inject logic or behavior at different points during the AppConfig workflow of creating or deploying a configuration. You can create your own extensions or use the Amazon Web Services authored extensions provided by AppConfig. For an AppConfig extension that uses Lambda, you must create a Lambda function to perform any computation and processing defined in the extension. If you plan to create custom versions of the Amazon Web Services authored notification extensions, you only need to specify an Amazon Resource Name (ARN) in the Uri field for the new extension version.   For a custom EventBridge notification extension, enter the ARN of the EventBridge default events in the Uri field.   For a custom Amazon SNS notification extension, enter the ARN of an Amazon SNS topic in the Uri field.   For a custom Amazon SQS notification extension, enter the ARN of an Amazon SQS message queue in the Uri field.    For more information about extensions, see Extending workflows in the AppConfig User Guide.
    @Sendable
    @inlinable
    public func createExtension(_ input: CreateExtensionRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> Extension {
        try await self.client.execute(
            operation: "CreateExtension", 
            path: "/extensions", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Creates an AppConfig extension. An extension augments your ability to inject logic or behavior at different points during the AppConfig workflow of creating or deploying a configuration. You can create your own extensions or use the Amazon Web Services authored extensions provided by AppConfig. For an AppConfig extension that uses Lambda, you must create a Lambda function to perform any computation and processing defined in the extension. If you plan to create custom versions of the Amazon Web Services authored notification extensions, you only need to specify an Amazon Resource Name (ARN) in the Uri field for the new extension version.   For a custom EventBridge notification extension, enter the ARN of the EventBridge default events in the Uri field.   For a custom Amazon SNS notification extension, enter the ARN of an Amazon SNS topic in the Uri field.   For a custom Amazon SQS notification extension, enter the ARN of an Amazon SQS message queue in the Uri field.    For more information about extensions, see Extending workflows in the AppConfig User Guide.
    ///
    /// Parameters:
    ///   - actions: The actions defined in the extension.
    ///   - description: Information about the extension.
    ///   - latestVersionNumber: You can omit this field when you create an extension. When you create a new version, specify the most recent current version number. For example, you create version 3, enter 2 for this field.
    ///   - name: A name for the extension. Each extension name in your account must be unique. Extension versions use the same name.
    ///   - parameters: The parameters accepted by the extension. You specify parameter values when you associate the extension to an AppConfig resource by using the CreateExtensionAssociation API action. For Lambda extension actions, these parameters are included in the Lambda request object.
    ///   - tags: Adds one or more tags for the specified extension. Tags are metadata that help you categorize resources in different ways, for example, by purpose, owner, or environment. Each tag consists of a key and an optional value, both of which you define.
    ///   - logger: Logger use during operation
    @inlinable
    public func createExtension(
        actions: [ActionPoint: [Action]],
        description: String? = nil,
        latestVersionNumber: Int? = nil,
        name: String,
        parameters: [String: Parameter]? = nil,
        tags: [String: String]? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> Extension {
        let input = CreateExtensionRequest(
            actions: actions, 
            description: description, 
            latestVersionNumber: latestVersionNumber, 
            name: name, 
            parameters: parameters, 
            tags: tags
        )
        return try await self.createExtension(input, logger: logger)
    }

    /// When you create an extension or configure an Amazon Web Services authored extension, you associate the extension with an AppConfig application, environment, or configuration profile. For example, you can choose to run the AppConfig deployment events to Amazon SNS Amazon Web Services authored extension and receive notifications on an Amazon SNS topic anytime a configuration deployment is started for a specific application. Defining which extension to associate with an AppConfig resource is called an extension association. An extension association is a specified relationship between an extension and an AppConfig resource, such as an application or a configuration profile. For more information about extensions and associations, see Extending workflows in the AppConfig User Guide.
    @Sendable
    @inlinable
    public func createExtensionAssociation(_ input: CreateExtensionAssociationRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> ExtensionAssociation {
        try await self.client.execute(
            operation: "CreateExtensionAssociation", 
            path: "/extensionassociations", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// When you create an extension or configure an Amazon Web Services authored extension, you associate the extension with an AppConfig application, environment, or configuration profile. For example, you can choose to run the AppConfig deployment events to Amazon SNS Amazon Web Services authored extension and receive notifications on an Amazon SNS topic anytime a configuration deployment is started for a specific application. Defining which extension to associate with an AppConfig resource is called an extension association. An extension association is a specified relationship between an extension and an AppConfig resource, such as an application or a configuration profile. For more information about extensions and associations, see Extending workflows in the AppConfig User Guide.
    ///
    /// Parameters:
    ///   - extensionIdentifier: The name, the ID, or the Amazon Resource Name (ARN) of the extension.
    ///   - extensionVersionNumber: The version number of the extension. If not specified, AppConfig uses the maximum version of the extension.
    ///   - parameters: The parameter names and values defined in the extensions. Extension parameters marked Required must be entered for this field.
    ///   - resourceIdentifier: The ARN of an application, configuration profile, or environment.
    ///   - tags: Adds one or more tags for the specified extension association. Tags are metadata that help you categorize resources in different ways, for example, by purpose, owner, or environment. Each tag consists of a key and an optional value, both of which you define.
    ///   - logger: Logger use during operation
    @inlinable
    public func createExtensionAssociation(
        extensionIdentifier: String,
        extensionVersionNumber: Int? = nil,
        parameters: [String: String]? = nil,
        resourceIdentifier: String,
        tags: [String: String]? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> ExtensionAssociation {
        let input = CreateExtensionAssociationRequest(
            extensionIdentifier: extensionIdentifier, 
            extensionVersionNumber: extensionVersionNumber, 
            parameters: parameters, 
            resourceIdentifier: resourceIdentifier, 
            tags: tags
        )
        return try await self.createExtensionAssociation(input, logger: logger)
    }

    /// Creates a new configuration in the AppConfig hosted configuration store. If you're creating a feature flag, we recommend you familiarize yourself with the JSON schema for feature flag data. For more information, see Type reference for AWS.AppConfig.FeatureFlags in the AppConfig User Guide.
    @Sendable
    @inlinable
    public func createHostedConfigurationVersion(_ input: CreateHostedConfigurationVersionRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> HostedConfigurationVersion {
        try await self.client.execute(
            operation: "CreateHostedConfigurationVersion", 
            path: "/applications/{ApplicationId}/configurationprofiles/{ConfigurationProfileId}/hostedconfigurationversions", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Creates a new configuration in the AppConfig hosted configuration store. If you're creating a feature flag, we recommend you familiarize yourself with the JSON schema for feature flag data. For more information, see Type reference for AWS.AppConfig.FeatureFlags in the AppConfig User Guide.
    ///
    /// Parameters:
    ///   - applicationId: The application ID.
    ///   - configurationProfileId: The configuration profile ID.
    ///   - content: The configuration data, as bytes.  AppConfig accepts any type of data, including text formats like JSON or TOML, or binary formats like protocol buffers or compressed data.
    ///   - contentType: A standard MIME type describing the format of the configuration content. For more information, see Content-Type.
    ///   - description: A description of the configuration.
    ///   - latestVersionNumber: An optional locking token used to prevent race conditions from overwriting configuration updates when creating a new version. To ensure your data is not overwritten when creating multiple hosted configuration versions in rapid succession, specify the version number of the latest hosted configuration version.
    ///   - versionLabel: An optional, user-defined label for the AppConfig hosted configuration version. This value must contain at least one non-numeric character. For example, "v2.2.0".
    ///   - logger: Logger use during operation
    @inlinable
    public func createHostedConfigurationVersion(
        applicationId: String,
        configurationProfileId: String,
        content: AWSHTTPBody,
        contentType: String,
        description: String? = nil,
        latestVersionNumber: Int? = nil,
        versionLabel: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> HostedConfigurationVersion {
        let input = CreateHostedConfigurationVersionRequest(
            applicationId: applicationId, 
            configurationProfileId: configurationProfileId, 
            content: content, 
            contentType: contentType, 
            description: description, 
            latestVersionNumber: latestVersionNumber, 
            versionLabel: versionLabel
        )
        return try await self.createHostedConfigurationVersion(input, logger: logger)
    }

    /// Deletes an application.
    @Sendable
    @inlinable
    public func deleteApplication(_ input: DeleteApplicationRequest, logger: Logger = AWSClient.loggingDisabled) async throws {
        try await self.client.execute(
            operation: "DeleteApplication", 
            path: "/applications/{ApplicationId}", 
            httpMethod: .DELETE, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Deletes an application.
    ///
    /// Parameters:
    ///   - applicationId: The ID of the application to delete.
    ///   - logger: Logger use during operation
    @inlinable
    public func deleteApplication(
        applicationId: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws {
        let input = DeleteApplicationRequest(
            applicationId: applicationId
        )
        return try await self.deleteApplication(input, logger: logger)
    }

    /// Deletes a configuration profile. To prevent users from unintentionally deleting actively-used configuration profiles, enable deletion protection.
    @Sendable
    @inlinable
    public func deleteConfigurationProfile(_ input: DeleteConfigurationProfileRequest, logger: Logger = AWSClient.loggingDisabled) async throws {
        try await self.client.execute(
            operation: "DeleteConfigurationProfile", 
            path: "/applications/{ApplicationId}/configurationprofiles/{ConfigurationProfileId}", 
            httpMethod: .DELETE, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Deletes a configuration profile. To prevent users from unintentionally deleting actively-used configuration profiles, enable deletion protection.
    ///
    /// Parameters:
    ///   - applicationId: The application ID that includes the configuration profile you want to delete.
    ///   - configurationProfileId: The ID of the configuration profile you want to delete.
    ///   - deletionProtectionCheck: A parameter to configure deletion protection. If enabled, deletion protection prevents a user from deleting a configuration profile if your application has called either GetLatestConfiguration or  for the configuration profile during the specified interval.  This parameter supports the following values:    BYPASS: Instructs AppConfig to bypass the deletion protection check and delete a configuration profile even if deletion protection would have otherwise prevented it.     APPLY: Instructs the deletion protection check to run, even if deletion protection is disabled at the account level. APPLY also forces the deletion protection check to run against resources created in the past hour, which are normally excluded from deletion protection checks.     ACCOUNT_DEFAULT: The default setting, which instructs AppConfig to implement the deletion protection value specified in the UpdateAccountSettings API.
    ///   - logger: Logger use during operation
    @inlinable
    public func deleteConfigurationProfile(
        applicationId: String,
        configurationProfileId: String,
        deletionProtectionCheck: DeletionProtectionCheck? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws {
        let input = DeleteConfigurationProfileRequest(
            applicationId: applicationId, 
            configurationProfileId: configurationProfileId, 
            deletionProtectionCheck: deletionProtectionCheck
        )
        return try await self.deleteConfigurationProfile(input, logger: logger)
    }

    /// Deletes a deployment strategy.
    @Sendable
    @inlinable
    public func deleteDeploymentStrategy(_ input: DeleteDeploymentStrategyRequest, logger: Logger = AWSClient.loggingDisabled) async throws {
        try await self.client.execute(
            operation: "DeleteDeploymentStrategy", 
            path: "/deployementstrategies/{DeploymentStrategyId}", 
            httpMethod: .DELETE, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Deletes a deployment strategy.
    ///
    /// Parameters:
    ///   - deploymentStrategyId: The ID of the deployment strategy you want to delete.
    ///   - logger: Logger use during operation
    @inlinable
    public func deleteDeploymentStrategy(
        deploymentStrategyId: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws {
        let input = DeleteDeploymentStrategyRequest(
            deploymentStrategyId: deploymentStrategyId
        )
        return try await self.deleteDeploymentStrategy(input, logger: logger)
    }

    /// Deletes an environment. To prevent users from unintentionally deleting actively-used environments, enable deletion protection.
    @Sendable
    @inlinable
    public func deleteEnvironment(_ input: DeleteEnvironmentRequest, logger: Logger = AWSClient.loggingDisabled) async throws {
        try await self.client.execute(
            operation: "DeleteEnvironment", 
            path: "/applications/{ApplicationId}/environments/{EnvironmentId}", 
            httpMethod: .DELETE, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Deletes an environment. To prevent users from unintentionally deleting actively-used environments, enable deletion protection.
    ///
    /// Parameters:
    ///   - applicationId: The application ID that includes the environment that you want to delete.
    ///   - deletionProtectionCheck: A parameter to configure deletion protection. If enabled, deletion protection prevents a user from deleting an environment if your application called either GetLatestConfiguration or  in the environment during the specified interval.  This parameter supports the following values:    BYPASS: Instructs AppConfig to bypass the deletion protection check and delete a configuration profile even if deletion protection would have otherwise prevented it.     APPLY: Instructs the deletion protection check to run, even if deletion protection is disabled at the account level. APPLY also forces the deletion protection check to run against resources created in the past hour, which are normally excluded from deletion protection checks.     ACCOUNT_DEFAULT: The default setting, which instructs AppConfig to implement the deletion protection value specified in the UpdateAccountSettings API.
    ///   - environmentId: The ID of the environment that you want to delete.
    ///   - logger: Logger use during operation
    @inlinable
    public func deleteEnvironment(
        applicationId: String,
        deletionProtectionCheck: DeletionProtectionCheck? = nil,
        environmentId: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws {
        let input = DeleteEnvironmentRequest(
            applicationId: applicationId, 
            deletionProtectionCheck: deletionProtectionCheck, 
            environmentId: environmentId
        )
        return try await self.deleteEnvironment(input, logger: logger)
    }

    /// Deletes an AppConfig extension. You must delete all associations to an extension before you delete the extension.
    @Sendable
    @inlinable
    public func deleteExtension(_ input: DeleteExtensionRequest, logger: Logger = AWSClient.loggingDisabled) async throws {
        try await self.client.execute(
            operation: "DeleteExtension", 
            path: "/extensions/{ExtensionIdentifier}", 
            httpMethod: .DELETE, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Deletes an AppConfig extension. You must delete all associations to an extension before you delete the extension.
    ///
    /// Parameters:
    ///   - extensionIdentifier: The name, ID, or Amazon Resource Name (ARN) of the extension you want to delete.
    ///   - versionNumber: A specific version of an extension to delete. If omitted, the highest version is deleted.
    ///   - logger: Logger use during operation
    @inlinable
    public func deleteExtension(
        extensionIdentifier: String,
        versionNumber: Int? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws {
        let input = DeleteExtensionRequest(
            extensionIdentifier: extensionIdentifier, 
            versionNumber: versionNumber
        )
        return try await self.deleteExtension(input, logger: logger)
    }

    /// Deletes an extension association. This action doesn't delete extensions defined in the association.
    @Sendable
    @inlinable
    public func deleteExtensionAssociation(_ input: DeleteExtensionAssociationRequest, logger: Logger = AWSClient.loggingDisabled) async throws {
        try await self.client.execute(
            operation: "DeleteExtensionAssociation", 
            path: "/extensionassociations/{ExtensionAssociationId}", 
            httpMethod: .DELETE, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Deletes an extension association. This action doesn't delete extensions defined in the association.
    ///
    /// Parameters:
    ///   - extensionAssociationId: The ID of the extension association to delete.
    ///   - logger: Logger use during operation
    @inlinable
    public func deleteExtensionAssociation(
        extensionAssociationId: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws {
        let input = DeleteExtensionAssociationRequest(
            extensionAssociationId: extensionAssociationId
        )
        return try await self.deleteExtensionAssociation(input, logger: logger)
    }

    /// Deletes a version of a configuration from the AppConfig hosted configuration store.
    @Sendable
    @inlinable
    public func deleteHostedConfigurationVersion(_ input: DeleteHostedConfigurationVersionRequest, logger: Logger = AWSClient.loggingDisabled) async throws {
        try await self.client.execute(
            operation: "DeleteHostedConfigurationVersion", 
            path: "/applications/{ApplicationId}/configurationprofiles/{ConfigurationProfileId}/hostedconfigurationversions/{VersionNumber}", 
            httpMethod: .DELETE, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Deletes a version of a configuration from the AppConfig hosted configuration store.
    ///
    /// Parameters:
    ///   - applicationId: The application ID.
    ///   - configurationProfileId: The configuration profile ID.
    ///   - versionNumber: The versions number to delete.
    ///   - logger: Logger use during operation
    @inlinable
    public func deleteHostedConfigurationVersion(
        applicationId: String,
        configurationProfileId: String,
        versionNumber: Int,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws {
        let input = DeleteHostedConfigurationVersionRequest(
            applicationId: applicationId, 
            configurationProfileId: configurationProfileId, 
            versionNumber: versionNumber
        )
        return try await self.deleteHostedConfigurationVersion(input, logger: logger)
    }

    /// Returns information about the status of the DeletionProtection parameter.
    @Sendable
    @inlinable
    public func getAccountSettings(logger: Logger = AWSClient.loggingDisabled) async throws -> AccountSettings {
        try await self.client.execute(
            operation: "GetAccountSettings", 
            path: "/settings", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            logger: logger
        )
    }

    /// Retrieves information about an application.
    @Sendable
    @inlinable
    public func getApplication(_ input: GetApplicationRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> Application {
        try await self.client.execute(
            operation: "GetApplication", 
            path: "/applications/{ApplicationId}", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Retrieves information about an application.
    ///
    /// Parameters:
    ///   - applicationId: The ID of the application you want to get.
    ///   - logger: Logger use during operation
    @inlinable
    public func getApplication(
        applicationId: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> Application {
        let input = GetApplicationRequest(
            applicationId: applicationId
        )
        return try await self.getApplication(input, logger: logger)
    }

    /// (Deprecated) Retrieves the latest deployed configuration.  Note the following important information.   This API action is deprecated. Calls to receive configuration data should use the StartConfigurationSession and GetLatestConfiguration APIs instead.     GetConfiguration is a priced call. For more information, see Pricing.
    @available(*, deprecated, message: "This API has been deprecated in favor of the GetLatestConfiguration API used in conjunction with StartConfigurationSession.")
    @Sendable
    @inlinable
    public func getConfiguration(_ input: GetConfigurationRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> Configuration {
        try await self.client.execute(
            operation: "GetConfiguration", 
            path: "/applications/{Application}/environments/{Environment}/configurations/{Configuration}", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// (Deprecated) Retrieves the latest deployed configuration.  Note the following important information.   This API action is deprecated. Calls to receive configuration data should use the StartConfigurationSession and GetLatestConfiguration APIs instead.     GetConfiguration is a priced call. For more information, see Pricing.
    ///
    /// Parameters:
    ///   - application: The application to get. Specify either the application name or the application ID.
    ///   - clientConfigurationVersion: The configuration version returned in the most recent GetConfiguration response.  AppConfig uses the value of the ClientConfigurationVersion parameter to identify the configuration version on your clients. If you don’t send ClientConfigurationVersion with each call to GetConfiguration, your clients receive the current configuration. You are charged each time your clients receive a configuration. To avoid excess charges, we recommend you use the StartConfigurationSession and GetLatestConfiguration APIs, which track the client configuration version on your behalf. If you choose to continue using GetConfiguration, we recommend that you include the ClientConfigurationVersion value with every call to GetConfiguration. The value to use for ClientConfigurationVersion comes from the ConfigurationVersion attribute returned by GetConfiguration when there is new or updated data, and should be saved for subsequent calls to GetConfiguration.  For more information about working with configurations, see Retrieving the Configuration in the AppConfig User Guide.
    ///   - clientId: The clientId parameter in the following command is a unique, user-specified ID to identify the client for the configuration. This ID enables AppConfig to deploy the configuration in intervals, as defined in the deployment strategy.
    ///   - configuration: The configuration to get. Specify either the configuration name or the configuration ID.
    ///   - environment: The environment to get. Specify either the environment name or the environment ID.
    ///   - logger: Logger use during operation
    @available(*, deprecated, message: "This API has been deprecated in favor of the GetLatestConfiguration API used in conjunction with StartConfigurationSession.")
    @inlinable
    public func getConfiguration(
        application: String,
        clientConfigurationVersion: String? = nil,
        clientId: String,
        configuration: String,
        environment: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> Configuration {
        let input = GetConfigurationRequest(
            application: application, 
            clientConfigurationVersion: clientConfigurationVersion, 
            clientId: clientId, 
            configuration: configuration, 
            environment: environment
        )
        return try await self.getConfiguration(input, logger: logger)
    }

    /// Retrieves information about a configuration profile.
    @Sendable
    @inlinable
    public func getConfigurationProfile(_ input: GetConfigurationProfileRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> ConfigurationProfile {
        try await self.client.execute(
            operation: "GetConfigurationProfile", 
            path: "/applications/{ApplicationId}/configurationprofiles/{ConfigurationProfileId}", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Retrieves information about a configuration profile.
    ///
    /// Parameters:
    ///   - applicationId: The ID of the application that includes the configuration profile you want to get.
    ///   - configurationProfileId: The ID of the configuration profile that you want to get.
    ///   - logger: Logger use during operation
    @inlinable
    public func getConfigurationProfile(
        applicationId: String,
        configurationProfileId: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> ConfigurationProfile {
        let input = GetConfigurationProfileRequest(
            applicationId: applicationId, 
            configurationProfileId: configurationProfileId
        )
        return try await self.getConfigurationProfile(input, logger: logger)
    }

    /// Retrieves information about a configuration deployment.
    @Sendable
    @inlinable
    public func getDeployment(_ input: GetDeploymentRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> Deployment {
        try await self.client.execute(
            operation: "GetDeployment", 
            path: "/applications/{ApplicationId}/environments/{EnvironmentId}/deployments/{DeploymentNumber}", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Retrieves information about a configuration deployment.
    ///
    /// Parameters:
    ///   - applicationId: The ID of the application that includes the deployment you want to get.
    ///   - deploymentNumber: The sequence number of the deployment.
    ///   - environmentId: The ID of the environment that includes the deployment you want to get.
    ///   - logger: Logger use during operation
    @inlinable
    public func getDeployment(
        applicationId: String,
        deploymentNumber: Int,
        environmentId: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> Deployment {
        let input = GetDeploymentRequest(
            applicationId: applicationId, 
            deploymentNumber: deploymentNumber, 
            environmentId: environmentId
        )
        return try await self.getDeployment(input, logger: logger)
    }

    /// Retrieves information about a deployment strategy. A deployment strategy defines important criteria for rolling out your configuration to the designated targets. A deployment strategy includes the overall duration required, a percentage of targets to receive the deployment during each interval, an algorithm that defines how percentage grows, and bake time.
    @Sendable
    @inlinable
    public func getDeploymentStrategy(_ input: GetDeploymentStrategyRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DeploymentStrategy {
        try await self.client.execute(
            operation: "GetDeploymentStrategy", 
            path: "/deploymentstrategies/{DeploymentStrategyId}", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Retrieves information about a deployment strategy. A deployment strategy defines important criteria for rolling out your configuration to the designated targets. A deployment strategy includes the overall duration required, a percentage of targets to receive the deployment during each interval, an algorithm that defines how percentage grows, and bake time.
    ///
    /// Parameters:
    ///   - deploymentStrategyId: The ID of the deployment strategy to get.
    ///   - logger: Logger use during operation
    @inlinable
    public func getDeploymentStrategy(
        deploymentStrategyId: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> DeploymentStrategy {
        let input = GetDeploymentStrategyRequest(
            deploymentStrategyId: deploymentStrategyId
        )
        return try await self.getDeploymentStrategy(input, logger: logger)
    }

    /// Retrieves information about an environment. An environment is a deployment group of AppConfig applications, such as applications in a Production environment or in an EU_Region environment. Each configuration deployment targets an environment. You can enable one or more Amazon CloudWatch alarms for an environment. If an alarm is triggered during a deployment, AppConfig roles back the configuration.
    @Sendable
    @inlinable
    public func getEnvironment(_ input: GetEnvironmentRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> Environment {
        try await self.client.execute(
            operation: "GetEnvironment", 
            path: "/applications/{ApplicationId}/environments/{EnvironmentId}", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Retrieves information about an environment. An environment is a deployment group of AppConfig applications, such as applications in a Production environment or in an EU_Region environment. Each configuration deployment targets an environment. You can enable one or more Amazon CloudWatch alarms for an environment. If an alarm is triggered during a deployment, AppConfig roles back the configuration.
    ///
    /// Parameters:
    ///   - applicationId: The ID of the application that includes the environment you want to get.
    ///   - environmentId: The ID of the environment that you want to get.
    ///   - logger: Logger use during operation
    @inlinable
    public func getEnvironment(
        applicationId: String,
        environmentId: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> Environment {
        let input = GetEnvironmentRequest(
            applicationId: applicationId, 
            environmentId: environmentId
        )
        return try await self.getEnvironment(input, logger: logger)
    }

    /// Returns information about an AppConfig extension.
    @Sendable
    @inlinable
    public func getExtension(_ input: GetExtensionRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> Extension {
        try await self.client.execute(
            operation: "GetExtension", 
            path: "/extensions/{ExtensionIdentifier}", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Returns information about an AppConfig extension.
    ///
    /// Parameters:
    ///   - extensionIdentifier: The name, the ID, or the Amazon Resource Name (ARN) of the extension.
    ///   - versionNumber: The extension version number. If no version number was defined, AppConfig uses the highest version.
    ///   - logger: Logger use during operation
    @inlinable
    public func getExtension(
        extensionIdentifier: String,
        versionNumber: Int? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> Extension {
        let input = GetExtensionRequest(
            extensionIdentifier: extensionIdentifier, 
            versionNumber: versionNumber
        )
        return try await self.getExtension(input, logger: logger)
    }

    /// Returns information about an AppConfig extension association. For more information about extensions and associations, see Extending workflows in the AppConfig User Guide.
    @Sendable
    @inlinable
    public func getExtensionAssociation(_ input: GetExtensionAssociationRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> ExtensionAssociation {
        try await self.client.execute(
            operation: "GetExtensionAssociation", 
            path: "/extensionassociations/{ExtensionAssociationId}", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Returns information about an AppConfig extension association. For more information about extensions and associations, see Extending workflows in the AppConfig User Guide.
    ///
    /// Parameters:
    ///   - extensionAssociationId: The extension association ID to get.
    ///   - logger: Logger use during operation
    @inlinable
    public func getExtensionAssociation(
        extensionAssociationId: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> ExtensionAssociation {
        let input = GetExtensionAssociationRequest(
            extensionAssociationId: extensionAssociationId
        )
        return try await self.getExtensionAssociation(input, logger: logger)
    }

    /// Retrieves information about a specific configuration version.
    @Sendable
    @inlinable
    public func getHostedConfigurationVersion(_ input: GetHostedConfigurationVersionRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> HostedConfigurationVersion {
        try await self.client.execute(
            operation: "GetHostedConfigurationVersion", 
            path: "/applications/{ApplicationId}/configurationprofiles/{ConfigurationProfileId}/hostedconfigurationversions/{VersionNumber}", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Retrieves information about a specific configuration version.
    ///
    /// Parameters:
    ///   - applicationId: The application ID.
    ///   - configurationProfileId: The configuration profile ID.
    ///   - versionNumber: The version.
    ///   - logger: Logger use during operation
    @inlinable
    public func getHostedConfigurationVersion(
        applicationId: String,
        configurationProfileId: String,
        versionNumber: Int,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> HostedConfigurationVersion {
        let input = GetHostedConfigurationVersionRequest(
            applicationId: applicationId, 
            configurationProfileId: configurationProfileId, 
            versionNumber: versionNumber
        )
        return try await self.getHostedConfigurationVersion(input, logger: logger)
    }

    /// Lists all applications in your Amazon Web Services account.
    @Sendable
    @inlinable
    public func listApplications(_ input: ListApplicationsRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> Applications {
        try await self.client.execute(
            operation: "ListApplications", 
            path: "/applications", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Lists all applications in your Amazon Web Services account.
    ///
    /// Parameters:
    ///   - maxResults: The maximum number of items to return for this call. The call also returns a token that you can specify in a subsequent call to get the next set of results.
    ///   - nextToken: A token to start the list. Next token is a pagination token generated by AppConfig to describe what page the previous List call ended on. For the first List request, the nextToken should not be set. On subsequent calls, the nextToken parameter should be set to the previous responses nextToken value. Use this token to get the next set of results.
    ///   - logger: Logger use during operation
    @inlinable
    public func listApplications(
        maxResults: Int? = nil,
        nextToken: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> Applications {
        let input = ListApplicationsRequest(
            maxResults: maxResults, 
            nextToken: nextToken
        )
        return try await self.listApplications(input, logger: logger)
    }

    /// Lists the configuration profiles for an application.
    @Sendable
    @inlinable
    public func listConfigurationProfiles(_ input: ListConfigurationProfilesRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> ConfigurationProfiles {
        try await self.client.execute(
            operation: "ListConfigurationProfiles", 
            path: "/applications/{ApplicationId}/configurationprofiles", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Lists the configuration profiles for an application.
    ///
    /// Parameters:
    ///   - applicationId: The application ID.
    ///   - maxResults: The maximum number of items to return for this call. The call also returns a token that you can specify in a subsequent call to get the next set of results.
    ///   - nextToken: A token to start the list. Use this token to get the next set of results.
    ///   - type: A filter based on the type of configurations that the configuration profile contains. A configuration can be a feature flag or a freeform configuration.
    ///   - logger: Logger use during operation
    @inlinable
    public func listConfigurationProfiles(
        applicationId: String,
        maxResults: Int? = nil,
        nextToken: String? = nil,
        type: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> ConfigurationProfiles {
        let input = ListConfigurationProfilesRequest(
            applicationId: applicationId, 
            maxResults: maxResults, 
            nextToken: nextToken, 
            type: type
        )
        return try await self.listConfigurationProfiles(input, logger: logger)
    }

    /// Lists deployment strategies.
    @Sendable
    @inlinable
    public func listDeploymentStrategies(_ input: ListDeploymentStrategiesRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DeploymentStrategies {
        try await self.client.execute(
            operation: "ListDeploymentStrategies", 
            path: "/deploymentstrategies", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Lists deployment strategies.
    ///
    /// Parameters:
    ///   - maxResults: The maximum number of items to return for this call. The call also returns a token that you can specify in a subsequent call to get the next set of results.
    ///   - nextToken: A token to start the list. Use this token to get the next set of results.
    ///   - logger: Logger use during operation
    @inlinable
    public func listDeploymentStrategies(
        maxResults: Int? = nil,
        nextToken: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> DeploymentStrategies {
        let input = ListDeploymentStrategiesRequest(
            maxResults: maxResults, 
            nextToken: nextToken
        )
        return try await self.listDeploymentStrategies(input, logger: logger)
    }

    /// Lists the deployments for an environment in descending deployment number order.
    @Sendable
    @inlinable
    public func listDeployments(_ input: ListDeploymentsRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> Deployments {
        try await self.client.execute(
            operation: "ListDeployments", 
            path: "/applications/{ApplicationId}/environments/{EnvironmentId}/deployments", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Lists the deployments for an environment in descending deployment number order.
    ///
    /// Parameters:
    ///   - applicationId: The application ID.
    ///   - environmentId: The environment ID.
    ///   - maxResults: The maximum number of items that may be returned for this call. If there are items that have not yet been returned, the response will include a non-null NextToken that you can provide in a subsequent call to get the next set of results.
    ///   - nextToken: The token returned by a prior call to this operation indicating the next set of results to be returned. If not specified, the operation will return the first set of results.
    ///   - logger: Logger use during operation
    @inlinable
    public func listDeployments(
        applicationId: String,
        environmentId: String,
        maxResults: Int? = nil,
        nextToken: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> Deployments {
        let input = ListDeploymentsRequest(
            applicationId: applicationId, 
            environmentId: environmentId, 
            maxResults: maxResults, 
            nextToken: nextToken
        )
        return try await self.listDeployments(input, logger: logger)
    }

    /// Lists the environments for an application.
    @Sendable
    @inlinable
    public func listEnvironments(_ input: ListEnvironmentsRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> Environments {
        try await self.client.execute(
            operation: "ListEnvironments", 
            path: "/applications/{ApplicationId}/environments", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Lists the environments for an application.
    ///
    /// Parameters:
    ///   - applicationId: The application ID.
    ///   - maxResults: The maximum number of items to return for this call. The call also returns a token that you can specify in a subsequent call to get the next set of results.
    ///   - nextToken: A token to start the list. Use this token to get the next set of results.
    ///   - logger: Logger use during operation
    @inlinable
    public func listEnvironments(
        applicationId: String,
        maxResults: Int? = nil,
        nextToken: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> Environments {
        let input = ListEnvironmentsRequest(
            applicationId: applicationId, 
            maxResults: maxResults, 
            nextToken: nextToken
        )
        return try await self.listEnvironments(input, logger: logger)
    }

    /// Lists all AppConfig extension associations in the account. For more information about extensions and associations, see Extending workflows in the AppConfig User Guide.
    @Sendable
    @inlinable
    public func listExtensionAssociations(_ input: ListExtensionAssociationsRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> ExtensionAssociations {
        try await self.client.execute(
            operation: "ListExtensionAssociations", 
            path: "/extensionassociations", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Lists all AppConfig extension associations in the account. For more information about extensions and associations, see Extending workflows in the AppConfig User Guide.
    ///
    /// Parameters:
    ///   - extensionIdentifier: The name, the ID, or the Amazon Resource Name (ARN) of the extension.
    ///   - extensionVersionNumber: The version number for the extension defined in the association.
    ///   - maxResults: The maximum number of items to return for this call. The call also returns a token that you can specify in a subsequent call to get the next set of results.
    ///   - nextToken: A token to start the list. Use this token to get the next set of results or pass null to get the first set of results.
    ///   - resourceIdentifier: The ARN of an application, configuration profile, or environment.
    ///   - logger: Logger use during operation
    @inlinable
    public func listExtensionAssociations(
        extensionIdentifier: String? = nil,
        extensionVersionNumber: Int? = nil,
        maxResults: Int? = nil,
        nextToken: String? = nil,
        resourceIdentifier: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> ExtensionAssociations {
        let input = ListExtensionAssociationsRequest(
            extensionIdentifier: extensionIdentifier, 
            extensionVersionNumber: extensionVersionNumber, 
            maxResults: maxResults, 
            nextToken: nextToken, 
            resourceIdentifier: resourceIdentifier
        )
        return try await self.listExtensionAssociations(input, logger: logger)
    }

    /// Lists all custom and Amazon Web Services authored AppConfig extensions in the account. For more information about extensions, see Extending workflows in the AppConfig User Guide.
    @Sendable
    @inlinable
    public func listExtensions(_ input: ListExtensionsRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> Extensions {
        try await self.client.execute(
            operation: "ListExtensions", 
            path: "/extensions", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Lists all custom and Amazon Web Services authored AppConfig extensions in the account. For more information about extensions, see Extending workflows in the AppConfig User Guide.
    ///
    /// Parameters:
    ///   - maxResults: The maximum number of items to return for this call. The call also returns a token that you can specify in a subsequent call to get the next set of results.
    ///   - name: The extension name.
    ///   - nextToken: A token to start the list. Use this token to get the next set of results.
    ///   - logger: Logger use during operation
    @inlinable
    public func listExtensions(
        maxResults: Int? = nil,
        name: String? = nil,
        nextToken: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> Extensions {
        let input = ListExtensionsRequest(
            maxResults: maxResults, 
            name: name, 
            nextToken: nextToken
        )
        return try await self.listExtensions(input, logger: logger)
    }

    /// Lists configurations stored in the AppConfig hosted configuration store by version.
    @Sendable
    @inlinable
    public func listHostedConfigurationVersions(_ input: ListHostedConfigurationVersionsRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> HostedConfigurationVersions {
        try await self.client.execute(
            operation: "ListHostedConfigurationVersions", 
            path: "/applications/{ApplicationId}/configurationprofiles/{ConfigurationProfileId}/hostedconfigurationversions", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Lists configurations stored in the AppConfig hosted configuration store by version.
    ///
    /// Parameters:
    ///   - applicationId: The application ID.
    ///   - configurationProfileId: The configuration profile ID.
    ///   - maxResults: The maximum number of items to return for this call. The call also returns a token that you can specify in a subsequent call to get the next set of results.
    ///   - nextToken: A token to start the list. Use this token to get the next set of results.
    ///   - versionLabel: An optional filter that can be used to specify the version label of an AppConfig hosted configuration version. This parameter supports filtering by prefix using a wildcard, for example "v2*". If you don't specify an asterisk at the end of the value, only an exact match is returned.
    ///   - logger: Logger use during operation
    @inlinable
    public func listHostedConfigurationVersions(
        applicationId: String,
        configurationProfileId: String,
        maxResults: Int? = nil,
        nextToken: String? = nil,
        versionLabel: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> HostedConfigurationVersions {
        let input = ListHostedConfigurationVersionsRequest(
            applicationId: applicationId, 
            configurationProfileId: configurationProfileId, 
            maxResults: maxResults, 
            nextToken: nextToken, 
            versionLabel: versionLabel
        )
        return try await self.listHostedConfigurationVersions(input, logger: logger)
    }

    /// Retrieves the list of key-value tags assigned to the resource.
    @Sendable
    @inlinable
    public func listTagsForResource(_ input: ListTagsForResourceRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> ResourceTags {
        try await self.client.execute(
            operation: "ListTagsForResource", 
            path: "/tags/{ResourceArn}", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Retrieves the list of key-value tags assigned to the resource.
    ///
    /// Parameters:
    ///   - resourceArn: The resource ARN.
    ///   - logger: Logger use during operation
    @inlinable
    public func listTagsForResource(
        resourceArn: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> ResourceTags {
        let input = ListTagsForResourceRequest(
            resourceArn: resourceArn
        )
        return try await self.listTagsForResource(input, logger: logger)
    }

    /// Starts a deployment.
    @Sendable
    @inlinable
    public func startDeployment(_ input: StartDeploymentRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> Deployment {
        try await self.client.execute(
            operation: "StartDeployment", 
            path: "/applications/{ApplicationId}/environments/{EnvironmentId}/deployments", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Starts a deployment.
    ///
    /// Parameters:
    ///   - applicationId: The application ID.
    ///   - configurationProfileId: The configuration profile ID.
    ///   - configurationVersion: The configuration version to deploy. If deploying an AppConfig hosted configuration version, you can specify either the version number or version label. For all other configurations, you must specify the version number.
    ///   - deploymentStrategyId: The deployment strategy ID.
    ///   - description: A description of the deployment.
    ///   - dynamicExtensionParameters: A map of dynamic extension parameter names to values to pass to associated extensions with PRE_START_DEPLOYMENT actions.
    ///   - environmentId: The environment ID.
    ///   - kmsKeyIdentifier: The KMS key identifier (key ID, key alias, or key ARN). AppConfig uses this ID to encrypt the configuration data using a customer managed key.
    ///   - tags: Metadata to assign to the deployment. Tags help organize and categorize your AppConfig resources. Each tag consists of a key and an optional value, both of which you define.
    ///   - logger: Logger use during operation
    @inlinable
    public func startDeployment(
        applicationId: String,
        configurationProfileId: String,
        configurationVersion: String,
        deploymentStrategyId: String,
        description: String? = nil,
        dynamicExtensionParameters: [String: String]? = nil,
        environmentId: String,
        kmsKeyIdentifier: String? = nil,
        tags: [String: String]? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> Deployment {
        let input = StartDeploymentRequest(
            applicationId: applicationId, 
            configurationProfileId: configurationProfileId, 
            configurationVersion: configurationVersion, 
            deploymentStrategyId: deploymentStrategyId, 
            description: description, 
            dynamicExtensionParameters: dynamicExtensionParameters, 
            environmentId: environmentId, 
            kmsKeyIdentifier: kmsKeyIdentifier, 
            tags: tags
        )
        return try await self.startDeployment(input, logger: logger)
    }

    /// Stops a deployment. This API action works only on deployments that have a status of DEPLOYING. This action moves the deployment to a status of ROLLED_BACK.
    @Sendable
    @inlinable
    public func stopDeployment(_ input: StopDeploymentRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> Deployment {
        try await self.client.execute(
            operation: "StopDeployment", 
            path: "/applications/{ApplicationId}/environments/{EnvironmentId}/deployments/{DeploymentNumber}", 
            httpMethod: .DELETE, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Stops a deployment. This API action works only on deployments that have a status of DEPLOYING. This action moves the deployment to a status of ROLLED_BACK.
    ///
    /// Parameters:
    ///   - applicationId: The application ID.
    ///   - deploymentNumber: The sequence number of the deployment.
    ///   - environmentId: The environment ID.
    ///   - logger: Logger use during operation
    @inlinable
    public func stopDeployment(
        applicationId: String,
        deploymentNumber: Int,
        environmentId: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> Deployment {
        let input = StopDeploymentRequest(
            applicationId: applicationId, 
            deploymentNumber: deploymentNumber, 
            environmentId: environmentId
        )
        return try await self.stopDeployment(input, logger: logger)
    }

    /// Assigns metadata to an AppConfig resource. Tags help organize and categorize your AppConfig resources. Each tag consists of a key and an optional value, both of which you define. You can specify a maximum of 50 tags for a resource.
    @Sendable
    @inlinable
    public func tagResource(_ input: TagResourceRequest, logger: Logger = AWSClient.loggingDisabled) async throws {
        try await self.client.execute(
            operation: "TagResource", 
            path: "/tags/{ResourceArn}", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Assigns metadata to an AppConfig resource. Tags help organize and categorize your AppConfig resources. Each tag consists of a key and an optional value, both of which you define. You can specify a maximum of 50 tags for a resource.
    ///
    /// Parameters:
    ///   - resourceArn: The ARN of the resource for which to retrieve tags.
    ///   - tags: The key-value string map. The valid character set is [a-zA-Z+-=._:/]. The tag key can be up to 128 characters and must not start with aws:. The tag value can be up to 256 characters.
    ///   - logger: Logger use during operation
    @inlinable
    public func tagResource(
        resourceArn: String,
        tags: [String: String],
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws {
        let input = TagResourceRequest(
            resourceArn: resourceArn, 
            tags: tags
        )
        return try await self.tagResource(input, logger: logger)
    }

    /// Deletes a tag key and value from an AppConfig resource.
    @Sendable
    @inlinable
    public func untagResource(_ input: UntagResourceRequest, logger: Logger = AWSClient.loggingDisabled) async throws {
        try await self.client.execute(
            operation: "UntagResource", 
            path: "/tags/{ResourceArn}", 
            httpMethod: .DELETE, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Deletes a tag key and value from an AppConfig resource.
    ///
    /// Parameters:
    ///   - resourceArn: The ARN of the resource for which to remove tags.
    ///   - tagKeys: The tag keys to delete.
    ///   - logger: Logger use during operation
    @inlinable
    public func untagResource(
        resourceArn: String,
        tagKeys: [String],
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws {
        let input = UntagResourceRequest(
            resourceArn: resourceArn, 
            tagKeys: tagKeys
        )
        return try await self.untagResource(input, logger: logger)
    }

    /// Updates the value of the DeletionProtection parameter.
    @Sendable
    @inlinable
    public func updateAccountSettings(_ input: UpdateAccountSettingsRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> AccountSettings {
        try await self.client.execute(
            operation: "UpdateAccountSettings", 
            path: "/settings", 
            httpMethod: .PATCH, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Updates the value of the DeletionProtection parameter.
    ///
    /// Parameters:
    ///   - deletionProtection: A parameter to configure deletion protection. If enabled, deletion protection prevents a user from deleting a configuration profile or an environment if AppConfig has called either GetLatestConfiguration or  for the configuration profile or from the environment during the specified interval. Deletion protection is disabled by default. The default interval for ProtectionPeriodInMinutes is 60.
    ///   - logger: Logger use during operation
    @inlinable
    public func updateAccountSettings(
        deletionProtection: DeletionProtectionSettings? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> AccountSettings {
        let input = UpdateAccountSettingsRequest(
            deletionProtection: deletionProtection
        )
        return try await self.updateAccountSettings(input, logger: logger)
    }

    /// Updates an application.
    @Sendable
    @inlinable
    public func updateApplication(_ input: UpdateApplicationRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> Application {
        try await self.client.execute(
            operation: "UpdateApplication", 
            path: "/applications/{ApplicationId}", 
            httpMethod: .PATCH, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Updates an application.
    ///
    /// Parameters:
    ///   - applicationId: The application ID.
    ///   - description: A description of the application.
    ///   - name: The name of the application.
    ///   - logger: Logger use during operation
    @inlinable
    public func updateApplication(
        applicationId: String,
        description: String? = nil,
        name: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> Application {
        let input = UpdateApplicationRequest(
            applicationId: applicationId, 
            description: description, 
            name: name
        )
        return try await self.updateApplication(input, logger: logger)
    }

    /// Updates a configuration profile.
    @Sendable
    @inlinable
    public func updateConfigurationProfile(_ input: UpdateConfigurationProfileRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> ConfigurationProfile {
        try await self.client.execute(
            operation: "UpdateConfigurationProfile", 
            path: "/applications/{ApplicationId}/configurationprofiles/{ConfigurationProfileId}", 
            httpMethod: .PATCH, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Updates a configuration profile.
    ///
    /// Parameters:
    ///   - applicationId: The application ID.
    ///   - configurationProfileId: The ID of the configuration profile.
    ///   - description: A description of the configuration profile.
    ///   - kmsKeyIdentifier: The identifier for a Key Management Service key to encrypt new configuration data versions in the AppConfig hosted configuration store. This attribute is only used for hosted configuration types. The identifier can be an KMS key ID, alias, or the Amazon Resource Name (ARN) of the key ID or alias. To encrypt data managed in other configuration stores, see the documentation for how to specify an KMS key for that particular service.
    ///   - name: The name of the configuration profile.
    ///   - retrievalRoleArn: The ARN of an IAM role with permission to access the configuration at the specified LocationUri.
    ///   - validators: A list of methods for validating the configuration.
    ///   - logger: Logger use during operation
    @inlinable
    public func updateConfigurationProfile(
        applicationId: String,
        configurationProfileId: String,
        description: String? = nil,
        kmsKeyIdentifier: String? = nil,
        name: String? = nil,
        retrievalRoleArn: String? = nil,
        validators: [Validator]? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> ConfigurationProfile {
        let input = UpdateConfigurationProfileRequest(
            applicationId: applicationId, 
            configurationProfileId: configurationProfileId, 
            description: description, 
            kmsKeyIdentifier: kmsKeyIdentifier, 
            name: name, 
            retrievalRoleArn: retrievalRoleArn, 
            validators: validators
        )
        return try await self.updateConfigurationProfile(input, logger: logger)
    }

    /// Updates a deployment strategy.
    @Sendable
    @inlinable
    public func updateDeploymentStrategy(_ input: UpdateDeploymentStrategyRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DeploymentStrategy {
        try await self.client.execute(
            operation: "UpdateDeploymentStrategy", 
            path: "/deploymentstrategies/{DeploymentStrategyId}", 
            httpMethod: .PATCH, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Updates a deployment strategy.
    ///
    /// Parameters:
    ///   - deploymentDurationInMinutes: Total amount of time for a deployment to last.
    ///   - deploymentStrategyId: The deployment strategy ID.
    ///   - description: A description of the deployment strategy.
    ///   - finalBakeTimeInMinutes: The amount of time that AppConfig monitors for alarms before considering the deployment to be complete and no longer eligible for automatic rollback.
    ///   - growthFactor: The percentage of targets to receive a deployed configuration during each interval.
    ///   - growthType: The algorithm used to define how percentage grows over time. AppConfig supports the following growth types:  Linear: For this type, AppConfig processes the deployment by increments of the growth factor evenly distributed over the deployment time. For example, a linear deployment that uses a growth factor of 20 initially makes the configuration available to 20 percent of the targets. After 1/5th of the deployment time has passed, the system updates the percentage to 40 percent. This continues until 100% of the targets are set to receive the deployed configuration.  Exponential: For this type, AppConfig processes the deployment exponentially using the following formula: G*(2^N). In this formula, G is the growth factor specified by the user and N is the number of steps until the configuration is deployed to all targets. For example, if you specify a growth factor of 2, then the system rolls out the configuration as follows:  2*(2^0)   2*(2^1)   2*(2^2)  Expressed numerically, the deployment rolls out as follows: 2% of the targets, 4% of the targets, 8% of the targets, and continues until the configuration has been deployed to all targets.
    ///   - logger: Logger use during operation
    @inlinable
    public func updateDeploymentStrategy(
        deploymentDurationInMinutes: Int? = nil,
        deploymentStrategyId: String,
        description: String? = nil,
        finalBakeTimeInMinutes: Int? = nil,
        growthFactor: Float? = nil,
        growthType: GrowthType? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> DeploymentStrategy {
        let input = UpdateDeploymentStrategyRequest(
            deploymentDurationInMinutes: deploymentDurationInMinutes, 
            deploymentStrategyId: deploymentStrategyId, 
            description: description, 
            finalBakeTimeInMinutes: finalBakeTimeInMinutes, 
            growthFactor: growthFactor, 
            growthType: growthType
        )
        return try await self.updateDeploymentStrategy(input, logger: logger)
    }

    /// Updates an environment.
    @Sendable
    @inlinable
    public func updateEnvironment(_ input: UpdateEnvironmentRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> Environment {
        try await self.client.execute(
            operation: "UpdateEnvironment", 
            path: "/applications/{ApplicationId}/environments/{EnvironmentId}", 
            httpMethod: .PATCH, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Updates an environment.
    ///
    /// Parameters:
    ///   - applicationId: The application ID.
    ///   - description: A description of the environment.
    ///   - environmentId: The environment ID.
    ///   - monitors: Amazon CloudWatch alarms to monitor during the deployment process.
    ///   - name: The name of the environment.
    ///   - logger: Logger use during operation
    @inlinable
    public func updateEnvironment(
        applicationId: String,
        description: String? = nil,
        environmentId: String,
        monitors: [Monitor]? = nil,
        name: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> Environment {
        let input = UpdateEnvironmentRequest(
            applicationId: applicationId, 
            description: description, 
            environmentId: environmentId, 
            monitors: monitors, 
            name: name
        )
        return try await self.updateEnvironment(input, logger: logger)
    }

    /// Updates an AppConfig extension. For more information about extensions, see Extending workflows in the AppConfig User Guide.
    @Sendable
    @inlinable
    public func updateExtension(_ input: UpdateExtensionRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> Extension {
        try await self.client.execute(
            operation: "UpdateExtension", 
            path: "/extensions/{ExtensionIdentifier}", 
            httpMethod: .PATCH, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Updates an AppConfig extension. For more information about extensions, see Extending workflows in the AppConfig User Guide.
    ///
    /// Parameters:
    ///   - actions: The actions defined in the extension.
    ///   - description: Information about the extension.
    ///   - extensionIdentifier: The name, the ID, or the Amazon Resource Name (ARN) of the extension.
    ///   - parameters: One or more parameters for the actions called by the extension.
    ///   - versionNumber: The extension version number.
    ///   - logger: Logger use during operation
    @inlinable
    public func updateExtension(
        actions: [ActionPoint: [Action]]? = nil,
        description: String? = nil,
        extensionIdentifier: String,
        parameters: [String: Parameter]? = nil,
        versionNumber: Int? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> Extension {
        let input = UpdateExtensionRequest(
            actions: actions, 
            description: description, 
            extensionIdentifier: extensionIdentifier, 
            parameters: parameters, 
            versionNumber: versionNumber
        )
        return try await self.updateExtension(input, logger: logger)
    }

    /// Updates an association. For more information about extensions and associations, see Extending workflows in the AppConfig User Guide.
    @Sendable
    @inlinable
    public func updateExtensionAssociation(_ input: UpdateExtensionAssociationRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> ExtensionAssociation {
        try await self.client.execute(
            operation: "UpdateExtensionAssociation", 
            path: "/extensionassociations/{ExtensionAssociationId}", 
            httpMethod: .PATCH, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Updates an association. For more information about extensions and associations, see Extending workflows in the AppConfig User Guide.
    ///
    /// Parameters:
    ///   - extensionAssociationId: The system-generated ID for the association.
    ///   - parameters: The parameter names and values defined in the extension.
    ///   - logger: Logger use during operation
    @inlinable
    public func updateExtensionAssociation(
        extensionAssociationId: String,
        parameters: [String: String]? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> ExtensionAssociation {
        let input = UpdateExtensionAssociationRequest(
            extensionAssociationId: extensionAssociationId, 
            parameters: parameters
        )
        return try await self.updateExtensionAssociation(input, logger: logger)
    }

    /// Uses the validators in a configuration profile to validate a configuration.
    @Sendable
    @inlinable
    public func validateConfiguration(_ input: ValidateConfigurationRequest, logger: Logger = AWSClient.loggingDisabled) async throws {
        try await self.client.execute(
            operation: "ValidateConfiguration", 
            path: "/applications/{ApplicationId}/configurationprofiles/{ConfigurationProfileId}/validators", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Uses the validators in a configuration profile to validate a configuration.
    ///
    /// Parameters:
    ///   - applicationId: The application ID.
    ///   - configurationProfileId: The configuration profile ID.
    ///   - configurationVersion: The version of the configuration to validate.
    ///   - logger: Logger use during operation
    @inlinable
    public func validateConfiguration(
        applicationId: String,
        configurationProfileId: String,
        configurationVersion: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws {
        let input = ValidateConfigurationRequest(
            applicationId: applicationId, 
            configurationProfileId: configurationProfileId, 
            configurationVersion: configurationVersion
        )
        return try await self.validateConfiguration(input, logger: logger)
    }
}

extension AppConfig {
    /// Initializer required by `AWSService.with(middlewares:timeout:byteBufferAllocator:options)`. You are not able to use this initializer directly as there are not public
    /// initializers for `AWSServiceConfig.Patch`. Please use `AWSService.with(middlewares:timeout:byteBufferAllocator:options)` instead.
    public init(from: AppConfig, patch: AWSServiceConfig.Patch) {
        self.client = from.client
        self.config = from.config.with(patch: patch)
    }
}

// MARK: Paginators

@available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
extension AppConfig {
    /// Return PaginatorSequence for operation ``listApplications(_:logger:)``.
    ///
    /// - Parameters:
    ///   - input: Input for operation
    ///   - logger: Logger used for logging
    @inlinable
    public func listApplicationsPaginator(
        _ input: ListApplicationsRequest,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<ListApplicationsRequest, Applications> {
        return .init(
            input: input,
            command: self.listApplications,
            inputKey: \ListApplicationsRequest.nextToken,
            outputKey: \Applications.nextToken,
            logger: logger
        )
    }
    /// Return PaginatorSequence for operation ``listApplications(_:logger:)``.
    ///
    /// - Parameters:
    ///   - maxResults: The maximum number of items to return for this call. The call also returns a token that you can specify in a subsequent call to get the next set of results.
    ///   - logger: Logger used for logging
    @inlinable
    public func listApplicationsPaginator(
        maxResults: Int? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) -> AWSClient.PaginatorSequence<ListApplicationsRequest, Applications> {
        let input = ListApplicationsRequest(
            maxResults: maxResults
        )
        return self.listApplicationsPaginator(input, logger: logger)
    }

    /// Return PaginatorSequence for operation ``listConfigurationProfiles(_:logger:)``.
    ///
    /// - Parameters:
    ///   - input: Input for operation
    ///   - logger: Logger used for logging
    @inlinable
    public func listConfigurationProfilesPaginator(
        _ input: ListConfigurationProfilesRequest,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<ListConfigurationProfilesRequest, ConfigurationProfiles> {
        return .init(
            input: input,
            command: self.listConfigurationProfiles,
            inputKey: \ListConfigurationProfilesRequest.nextToken,
            outputKey: \ConfigurationProfiles.nextToken,
            logger: logger
        )
    }
    /// Return PaginatorSequence for operation ``listConfigurationProfiles(_:logger:)``.
    ///
    /// - Parameters:
    ///   - applicationId: The application ID.
    ///   - maxResults: The maximum number of items to return for this call. The call also returns a token that you can specify in a subsequent call to get the next set of results.
    ///   - type: A filter based on the type of configurations that the configuration profile contains. A configuration can be a feature flag or a freeform configuration.
    ///   - logger: Logger used for logging
    @inlinable
    public func listConfigurationProfilesPaginator(
        applicationId: String,
        maxResults: Int? = nil,
        type: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) -> AWSClient.PaginatorSequence<ListConfigurationProfilesRequest, ConfigurationProfiles> {
        let input = ListConfigurationProfilesRequest(
            applicationId: applicationId, 
            maxResults: maxResults, 
            type: type
        )
        return self.listConfigurationProfilesPaginator(input, logger: logger)
    }

    /// Return PaginatorSequence for operation ``listDeploymentStrategies(_:logger:)``.
    ///
    /// - Parameters:
    ///   - input: Input for operation
    ///   - logger: Logger used for logging
    @inlinable
    public func listDeploymentStrategiesPaginator(
        _ input: ListDeploymentStrategiesRequest,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<ListDeploymentStrategiesRequest, DeploymentStrategies> {
        return .init(
            input: input,
            command: self.listDeploymentStrategies,
            inputKey: \ListDeploymentStrategiesRequest.nextToken,
            outputKey: \DeploymentStrategies.nextToken,
            logger: logger
        )
    }
    /// Return PaginatorSequence for operation ``listDeploymentStrategies(_:logger:)``.
    ///
    /// - Parameters:
    ///   - maxResults: The maximum number of items to return for this call. The call also returns a token that you can specify in a subsequent call to get the next set of results.
    ///   - logger: Logger used for logging
    @inlinable
    public func listDeploymentStrategiesPaginator(
        maxResults: Int? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) -> AWSClient.PaginatorSequence<ListDeploymentStrategiesRequest, DeploymentStrategies> {
        let input = ListDeploymentStrategiesRequest(
            maxResults: maxResults
        )
        return self.listDeploymentStrategiesPaginator(input, logger: logger)
    }

    /// Return PaginatorSequence for operation ``listDeployments(_:logger:)``.
    ///
    /// - Parameters:
    ///   - input: Input for operation
    ///   - logger: Logger used for logging
    @inlinable
    public func listDeploymentsPaginator(
        _ input: ListDeploymentsRequest,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<ListDeploymentsRequest, Deployments> {
        return .init(
            input: input,
            command: self.listDeployments,
            inputKey: \ListDeploymentsRequest.nextToken,
            outputKey: \Deployments.nextToken,
            logger: logger
        )
    }
    /// Return PaginatorSequence for operation ``listDeployments(_:logger:)``.
    ///
    /// - Parameters:
    ///   - applicationId: The application ID.
    ///   - environmentId: The environment ID.
    ///   - maxResults: The maximum number of items that may be returned for this call. If there are items that have not yet been returned, the response will include a non-null NextToken that you can provide in a subsequent call to get the next set of results.
    ///   - logger: Logger used for logging
    @inlinable
    public func listDeploymentsPaginator(
        applicationId: String,
        environmentId: String,
        maxResults: Int? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) -> AWSClient.PaginatorSequence<ListDeploymentsRequest, Deployments> {
        let input = ListDeploymentsRequest(
            applicationId: applicationId, 
            environmentId: environmentId, 
            maxResults: maxResults
        )
        return self.listDeploymentsPaginator(input, logger: logger)
    }

    /// Return PaginatorSequence for operation ``listEnvironments(_:logger:)``.
    ///
    /// - Parameters:
    ///   - input: Input for operation
    ///   - logger: Logger used for logging
    @inlinable
    public func listEnvironmentsPaginator(
        _ input: ListEnvironmentsRequest,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<ListEnvironmentsRequest, Environments> {
        return .init(
            input: input,
            command: self.listEnvironments,
            inputKey: \ListEnvironmentsRequest.nextToken,
            outputKey: \Environments.nextToken,
            logger: logger
        )
    }
    /// Return PaginatorSequence for operation ``listEnvironments(_:logger:)``.
    ///
    /// - Parameters:
    ///   - applicationId: The application ID.
    ///   - maxResults: The maximum number of items to return for this call. The call also returns a token that you can specify in a subsequent call to get the next set of results.
    ///   - logger: Logger used for logging
    @inlinable
    public func listEnvironmentsPaginator(
        applicationId: String,
        maxResults: Int? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) -> AWSClient.PaginatorSequence<ListEnvironmentsRequest, Environments> {
        let input = ListEnvironmentsRequest(
            applicationId: applicationId, 
            maxResults: maxResults
        )
        return self.listEnvironmentsPaginator(input, logger: logger)
    }

    /// Return PaginatorSequence for operation ``listExtensionAssociations(_:logger:)``.
    ///
    /// - Parameters:
    ///   - input: Input for operation
    ///   - logger: Logger used for logging
    @inlinable
    public func listExtensionAssociationsPaginator(
        _ input: ListExtensionAssociationsRequest,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<ListExtensionAssociationsRequest, ExtensionAssociations> {
        return .init(
            input: input,
            command: self.listExtensionAssociations,
            inputKey: \ListExtensionAssociationsRequest.nextToken,
            outputKey: \ExtensionAssociations.nextToken,
            logger: logger
        )
    }
    /// Return PaginatorSequence for operation ``listExtensionAssociations(_:logger:)``.
    ///
    /// - Parameters:
    ///   - extensionIdentifier: The name, the ID, or the Amazon Resource Name (ARN) of the extension.
    ///   - extensionVersionNumber: The version number for the extension defined in the association.
    ///   - maxResults: The maximum number of items to return for this call. The call also returns a token that you can specify in a subsequent call to get the next set of results.
    ///   - resourceIdentifier: The ARN of an application, configuration profile, or environment.
    ///   - logger: Logger used for logging
    @inlinable
    public func listExtensionAssociationsPaginator(
        extensionIdentifier: String? = nil,
        extensionVersionNumber: Int? = nil,
        maxResults: Int? = nil,
        resourceIdentifier: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) -> AWSClient.PaginatorSequence<ListExtensionAssociationsRequest, ExtensionAssociations> {
        let input = ListExtensionAssociationsRequest(
            extensionIdentifier: extensionIdentifier, 
            extensionVersionNumber: extensionVersionNumber, 
            maxResults: maxResults, 
            resourceIdentifier: resourceIdentifier
        )
        return self.listExtensionAssociationsPaginator(input, logger: logger)
    }

    /// Return PaginatorSequence for operation ``listExtensions(_:logger:)``.
    ///
    /// - Parameters:
    ///   - input: Input for operation
    ///   - logger: Logger used for logging
    @inlinable
    public func listExtensionsPaginator(
        _ input: ListExtensionsRequest,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<ListExtensionsRequest, Extensions> {
        return .init(
            input: input,
            command: self.listExtensions,
            inputKey: \ListExtensionsRequest.nextToken,
            outputKey: \Extensions.nextToken,
            logger: logger
        )
    }
    /// Return PaginatorSequence for operation ``listExtensions(_:logger:)``.
    ///
    /// - Parameters:
    ///   - maxResults: The maximum number of items to return for this call. The call also returns a token that you can specify in a subsequent call to get the next set of results.
    ///   - name: The extension name.
    ///   - logger: Logger used for logging
    @inlinable
    public func listExtensionsPaginator(
        maxResults: Int? = nil,
        name: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) -> AWSClient.PaginatorSequence<ListExtensionsRequest, Extensions> {
        let input = ListExtensionsRequest(
            maxResults: maxResults, 
            name: name
        )
        return self.listExtensionsPaginator(input, logger: logger)
    }

    /// Return PaginatorSequence for operation ``listHostedConfigurationVersions(_:logger:)``.
    ///
    /// - Parameters:
    ///   - input: Input for operation
    ///   - logger: Logger used for logging
    @inlinable
    public func listHostedConfigurationVersionsPaginator(
        _ input: ListHostedConfigurationVersionsRequest,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<ListHostedConfigurationVersionsRequest, HostedConfigurationVersions> {
        return .init(
            input: input,
            command: self.listHostedConfigurationVersions,
            inputKey: \ListHostedConfigurationVersionsRequest.nextToken,
            outputKey: \HostedConfigurationVersions.nextToken,
            logger: logger
        )
    }
    /// Return PaginatorSequence for operation ``listHostedConfigurationVersions(_:logger:)``.
    ///
    /// - Parameters:
    ///   - applicationId: The application ID.
    ///   - configurationProfileId: The configuration profile ID.
    ///   - maxResults: The maximum number of items to return for this call. The call also returns a token that you can specify in a subsequent call to get the next set of results.
    ///   - versionLabel: An optional filter that can be used to specify the version label of an AppConfig hosted configuration version. This parameter supports filtering by prefix using a wildcard, for example "v2*". If you don't specify an asterisk at the end of the value, only an exact match is returned.
    ///   - logger: Logger used for logging
    @inlinable
    public func listHostedConfigurationVersionsPaginator(
        applicationId: String,
        configurationProfileId: String,
        maxResults: Int? = nil,
        versionLabel: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) -> AWSClient.PaginatorSequence<ListHostedConfigurationVersionsRequest, HostedConfigurationVersions> {
        let input = ListHostedConfigurationVersionsRequest(
            applicationId: applicationId, 
            configurationProfileId: configurationProfileId, 
            maxResults: maxResults, 
            versionLabel: versionLabel
        )
        return self.listHostedConfigurationVersionsPaginator(input, logger: logger)
    }
}

extension AppConfig.ListApplicationsRequest: AWSPaginateToken {
    @inlinable
    public func usingPaginationToken(_ token: String) -> AppConfig.ListApplicationsRequest {
        return .init(
            maxResults: self.maxResults,
            nextToken: token
        )
    }
}

extension AppConfig.ListConfigurationProfilesRequest: AWSPaginateToken {
    @inlinable
    public func usingPaginationToken(_ token: String) -> AppConfig.ListConfigurationProfilesRequest {
        return .init(
            applicationId: self.applicationId,
            maxResults: self.maxResults,
            nextToken: token,
            type: self.type
        )
    }
}

extension AppConfig.ListDeploymentStrategiesRequest: AWSPaginateToken {
    @inlinable
    public func usingPaginationToken(_ token: String) -> AppConfig.ListDeploymentStrategiesRequest {
        return .init(
            maxResults: self.maxResults,
            nextToken: token
        )
    }
}

extension AppConfig.ListDeploymentsRequest: AWSPaginateToken {
    @inlinable
    public func usingPaginationToken(_ token: String) -> AppConfig.ListDeploymentsRequest {
        return .init(
            applicationId: self.applicationId,
            environmentId: self.environmentId,
            maxResults: self.maxResults,
            nextToken: token
        )
    }
}

extension AppConfig.ListEnvironmentsRequest: AWSPaginateToken {
    @inlinable
    public func usingPaginationToken(_ token: String) -> AppConfig.ListEnvironmentsRequest {
        return .init(
            applicationId: self.applicationId,
            maxResults: self.maxResults,
            nextToken: token
        )
    }
}

extension AppConfig.ListExtensionAssociationsRequest: AWSPaginateToken {
    @inlinable
    public func usingPaginationToken(_ token: String) -> AppConfig.ListExtensionAssociationsRequest {
        return .init(
            extensionIdentifier: self.extensionIdentifier,
            extensionVersionNumber: self.extensionVersionNumber,
            maxResults: self.maxResults,
            nextToken: token,
            resourceIdentifier: self.resourceIdentifier
        )
    }
}

extension AppConfig.ListExtensionsRequest: AWSPaginateToken {
    @inlinable
    public func usingPaginationToken(_ token: String) -> AppConfig.ListExtensionsRequest {
        return .init(
            maxResults: self.maxResults,
            name: self.name,
            nextToken: token
        )
    }
}

extension AppConfig.ListHostedConfigurationVersionsRequest: AWSPaginateToken {
    @inlinable
    public func usingPaginationToken(_ token: String) -> AppConfig.ListHostedConfigurationVersionsRequest {
        return .init(
            applicationId: self.applicationId,
            configurationProfileId: self.configurationProfileId,
            maxResults: self.maxResults,
            nextToken: token,
            versionLabel: self.versionLabel
        )
    }
}
