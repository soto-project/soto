//===----------------------------------------------------------------------===//
//
// This source file is part of the Soto for AWS open source project
//
// Copyright (c) 2017-2024 the Soto project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
// See CONTRIBUTORS.txt for the list of Soto project authors
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by https://github.com/soto-project/soto-codegenerator.
// DO NOT EDIT.

#if os(Linux) && compiler(<5.10)
// swift-corelibs-foundation hasn't been updated with Sendable conformances
@preconcurrency import Foundation
#else
import Foundation
#endif
@_exported import SotoCore

/// Service object for interacting with AWS ApiGatewayV2 service.
///
/// Amazon API Gateway V2
public struct ApiGatewayV2: AWSService {
    // MARK: Member variables

    /// Client used for communication with AWS
    public let client: AWSClient
    /// Service configuration
    public let config: AWSServiceConfig

    // MARK: Initialization

    /// Initialize the ApiGatewayV2 client
    /// - parameters:
    ///     - client: AWSClient used to process requests
    ///     - region: Region of server you want to communicate with. This will override the partition parameter.
    ///     - partition: AWS partition where service resides, standard (.aws), china (.awscn), government (.awsusgov).
    ///     - endpoint: Custom endpoint URL to use instead of standard AWS servers
    ///     - middleware: Middleware chain used to edit requests before they are sent and responses before they are decoded 
    ///     - timeout: Timeout value for HTTP requests
    ///     - byteBufferAllocator: Allocator for ByteBuffers
    ///     - options: Service options
    public init(
        client: AWSClient,
        region: SotoCore.Region? = nil,
        partition: AWSPartition = .aws,
        endpoint: String? = nil,
        middleware: AWSMiddlewareProtocol? = nil,
        timeout: TimeAmount? = nil,
        byteBufferAllocator: ByteBufferAllocator = ByteBufferAllocator(),
        options: AWSServiceConfig.Options = []
    ) {
        self.client = client
        self.config = AWSServiceConfig(
            region: region,
            partition: region?.partition ?? partition,
            serviceName: "ApiGatewayV2",
            serviceIdentifier: "apigateway",
            serviceProtocol: .restjson,
            apiVersion: "2018-11-29",
            endpoint: endpoint,
            variantEndpoints: Self.variantEndpoints,
            errorType: ApiGatewayV2ErrorType.self,
            middleware: middleware,
            timeout: timeout,
            byteBufferAllocator: byteBufferAllocator,
            options: options
        )
    }




    /// FIPS and dualstack endpoints
    static var variantEndpoints: [EndpointVariantType: AWSServiceConfig.EndpointVariant] {[
        [.fips]: .init(endpoints: [
            "ca-central-1": "apigateway-fips.ca-central-1.amazonaws.com",
            "ca-west-1": "apigateway-fips.ca-west-1.amazonaws.com",
            "us-east-1": "apigateway-fips.us-east-1.amazonaws.com",
            "us-east-2": "apigateway-fips.us-east-2.amazonaws.com",
            "us-west-1": "apigateway-fips.us-west-1.amazonaws.com",
            "us-west-2": "apigateway-fips.us-west-2.amazonaws.com"
        ])
    ]}

    // MARK: API Calls

    /// Creates an Api resource.
    @Sendable
    @inlinable
    public func createApi(_ input: CreateApiRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> CreateApiResponse {
        try await self.client.execute(
            operation: "CreateApi", 
            path: "/v2/apis", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Creates an Api resource.
    ///
    /// Parameters:
    ///   - apiKeySelectionExpression: An API key selection expression. Supported only for WebSocket APIs. See API Key Selection Expressions.
    ///   - corsConfiguration: A CORS configuration. Supported only for HTTP APIs. See Configuring CORS for more information.
    ///   - credentialsArn: This property is part of quick create. It specifies the credentials required for the integration, if any. For a Lambda integration, three options are available. To specify an IAM Role for API Gateway to assume, use the role's Amazon Resource Name (ARN). To require that the caller's identity be passed through from the request, specify arn:aws:iam::*:user/*. To use resource-based permissions on supported AWS services, specify null. Currently, this property is not used for HTTP integrations. Supported only for HTTP APIs.
    ///   - description: The description of the API.
    ///   - disableExecuteApiEndpoint: Specifies whether clients can invoke your API by using the default execute-api endpoint. By default, clients can invoke your API with the default https://{api_id}.execute-api.{region}.amazonaws.com endpoint. To require that clients use a custom domain name to invoke your API, disable the default endpoint.
    ///   - disableSchemaValidation: Avoid validating models when creating a deployment. Supported only for WebSocket APIs.
    ///   - name: The name of the API.
    ///   - protocolType: The API protocol.
    ///   - routeKey: This property is part of quick create. If you don't specify a routeKey, a default route of $default is created. The $default route acts as a catch-all for any request made to your API, for a particular stage. The $default route key can't be modified. You can add routes after creating the API, and you can update the route keys of additional routes. Supported only for HTTP APIs.
    ///   - routeSelectionExpression: The route selection expression for the API. For HTTP APIs, the routeSelectionExpression must be ${request.method} ${request.path}. If not provided, this will be the default for HTTP APIs. This property is required for WebSocket APIs.
    ///   - tags: The collection of tags. Each tag element is associated with a given resource.
    ///   - target: This property is part of quick create. Quick create produces an API with an integration, a default catch-all route, and a default stage which is configured to automatically deploy changes. For HTTP integrations, specify a fully qualified URL. For Lambda integrations, specify a function ARN. The type of the integration will be HTTP_PROXY or AWS_PROXY, respectively. Supported only for HTTP APIs.
    ///   - version: A version identifier for the API.
    ///   - logger: Logger use during operation
    @inlinable
    public func createApi(
        apiKeySelectionExpression: String? = nil,
        corsConfiguration: Cors? = nil,
        credentialsArn: String? = nil,
        description: String? = nil,
        disableExecuteApiEndpoint: Bool? = nil,
        disableSchemaValidation: Bool? = nil,
        name: String? = nil,
        protocolType: ProtocolType? = nil,
        routeKey: String? = nil,
        routeSelectionExpression: String? = nil,
        tags: [String: String]? = nil,
        target: String? = nil,
        version: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> CreateApiResponse {
        let input = CreateApiRequest(
            apiKeySelectionExpression: apiKeySelectionExpression, 
            corsConfiguration: corsConfiguration, 
            credentialsArn: credentialsArn, 
            description: description, 
            disableExecuteApiEndpoint: disableExecuteApiEndpoint, 
            disableSchemaValidation: disableSchemaValidation, 
            name: name, 
            protocolType: protocolType, 
            routeKey: routeKey, 
            routeSelectionExpression: routeSelectionExpression, 
            tags: tags, 
            target: target, 
            version: version
        )
        return try await self.createApi(input, logger: logger)
    }

    /// Creates an API mapping.
    @Sendable
    @inlinable
    public func createApiMapping(_ input: CreateApiMappingRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> CreateApiMappingResponse {
        try await self.client.execute(
            operation: "CreateApiMapping", 
            path: "/v2/domainnames/{DomainName}/apimappings", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Creates an API mapping.
    ///
    /// Parameters:
    ///   - apiId: The API identifier.
    ///   - apiMappingKey: The API mapping key.
    ///   - domainName: The domain name.
    ///   - stage: The API stage.
    ///   - logger: Logger use during operation
    @inlinable
    public func createApiMapping(
        apiId: String? = nil,
        apiMappingKey: String? = nil,
        domainName: String,
        stage: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> CreateApiMappingResponse {
        let input = CreateApiMappingRequest(
            apiId: apiId, 
            apiMappingKey: apiMappingKey, 
            domainName: domainName, 
            stage: stage
        )
        return try await self.createApiMapping(input, logger: logger)
    }

    /// Creates an Authorizer for an API.
    @Sendable
    @inlinable
    public func createAuthorizer(_ input: CreateAuthorizerRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> CreateAuthorizerResponse {
        try await self.client.execute(
            operation: "CreateAuthorizer", 
            path: "/v2/apis/{ApiId}/authorizers", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Creates an Authorizer for an API.
    ///
    /// Parameters:
    ///   - apiId: The API identifier.
    ///   - authorizerCredentialsArn: Specifies the required credentials as an IAM role for API Gateway to invoke the authorizer. To specify an IAM role for API Gateway to assume, use the role's Amazon Resource Name (ARN). To use resource-based permissions on the Lambda function, don't specify this parameter. Supported only for REQUEST authorizers.
    ///   - authorizerPayloadFormatVersion: Specifies the format of the payload sent to an HTTP API Lambda authorizer. Required for HTTP API Lambda authorizers. Supported values are 1.0 and 2.0. To learn more, see Working with AWS Lambda authorizers for HTTP APIs.
    ///   - authorizerResultTtlInSeconds: The time to live (TTL) for cached authorizer results, in seconds. If it equals 0, authorization caching is disabled. If it is greater than 0, API Gateway caches authorizer responses. The maximum value is 3600, or 1 hour. Supported only for HTTP API Lambda authorizers.
    ///   - authorizerType: The authorizer type. Specify REQUEST for a Lambda function using incoming request parameters. Specify JWT to use JSON Web Tokens (supported only for HTTP APIs).
    ///   - authorizerUri: The authorizer's Uniform Resource Identifier (URI). For REQUEST authorizers, this must be a well-formed Lambda function URI, for example, arn:aws:apigateway:us-west-2:lambda:path/2015-03-31/functions/arn:aws:lambda:us-west-2:{account_id}:function:{lambda_function_name}/invocations. In general, the URI has this form: arn:aws:apigateway:{region}:lambda:path/{service_api} , where {region} is the same as the region hosting the Lambda function, path indicates that the remaining substring in the URI should be treated as the path to the resource, including the initial /. For Lambda functions, this is usually of the form /2015-03-31/functions/[FunctionARN]/invocations. Supported only for REQUEST authorizers.
    ///   - enableSimpleResponses: Specifies whether a Lambda authorizer returns a response in a simple format. By default, a Lambda authorizer must return an IAM policy. If enabled, the Lambda authorizer can return a boolean value instead of an IAM policy. Supported only for HTTP APIs. To learn more, see Working with AWS Lambda authorizers for HTTP APIs
    ///   - identitySource: The identity source for which authorization is requested. For a REQUEST authorizer, this is optional. The value is a set of one or more mapping expressions of the specified request parameters. The identity source can be headers, query string parameters, stage variables, and context parameters. For example, if an Auth header and a Name query string parameter are defined as identity sources, this value is route.request.header.Auth, route.request.querystring.Name for WebSocket APIs. For HTTP APIs, use selection expressions prefixed with $, for example, $request.header.Auth, $request.querystring.Name. These parameters are used to perform runtime validation for Lambda-based authorizers by verifying all of the identity-related request parameters are present in the request, not null, and non-empty. Only when this is true does the authorizer invoke the authorizer Lambda function. Otherwise, it returns a 401 Unauthorized response without calling the Lambda function. For HTTP APIs, identity sources are also used as the cache key when caching is enabled. To learn more, see Working with AWS Lambda authorizers for HTTP APIs. For JWT, a single entry that specifies where to extract the JSON Web Token (JWT) from inbound requests. Currently only header-based and query parameter-based selections are supported, for example $request.header.Authorization.
    ///   - identityValidationExpression: This parameter is not used.
    ///   - jwtConfiguration: Represents the configuration of a JWT authorizer. Required for the JWT authorizer type. Supported only for HTTP APIs.
    ///   - name: The name of the authorizer.
    ///   - logger: Logger use during operation
    @inlinable
    public func createAuthorizer(
        apiId: String,
        authorizerCredentialsArn: String? = nil,
        authorizerPayloadFormatVersion: String? = nil,
        authorizerResultTtlInSeconds: Int? = nil,
        authorizerType: AuthorizerType? = nil,
        authorizerUri: String? = nil,
        enableSimpleResponses: Bool? = nil,
        identitySource: [String]? = nil,
        identityValidationExpression: String? = nil,
        jwtConfiguration: JWTConfiguration? = nil,
        name: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> CreateAuthorizerResponse {
        let input = CreateAuthorizerRequest(
            apiId: apiId, 
            authorizerCredentialsArn: authorizerCredentialsArn, 
            authorizerPayloadFormatVersion: authorizerPayloadFormatVersion, 
            authorizerResultTtlInSeconds: authorizerResultTtlInSeconds, 
            authorizerType: authorizerType, 
            authorizerUri: authorizerUri, 
            enableSimpleResponses: enableSimpleResponses, 
            identitySource: identitySource, 
            identityValidationExpression: identityValidationExpression, 
            jwtConfiguration: jwtConfiguration, 
            name: name
        )
        return try await self.createAuthorizer(input, logger: logger)
    }

    /// Creates a Deployment for an API.
    @Sendable
    @inlinable
    public func createDeployment(_ input: CreateDeploymentRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> CreateDeploymentResponse {
        try await self.client.execute(
            operation: "CreateDeployment", 
            path: "/v2/apis/{ApiId}/deployments", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Creates a Deployment for an API.
    ///
    /// Parameters:
    ///   - apiId: The API identifier.
    ///   - description: The description for the deployment resource.
    ///   - stageName: The name of the Stage resource for the Deployment resource to create.
    ///   - logger: Logger use during operation
    @inlinable
    public func createDeployment(
        apiId: String,
        description: String? = nil,
        stageName: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> CreateDeploymentResponse {
        let input = CreateDeploymentRequest(
            apiId: apiId, 
            description: description, 
            stageName: stageName
        )
        return try await self.createDeployment(input, logger: logger)
    }

    /// Creates a domain name.
    @Sendable
    @inlinable
    public func createDomainName(_ input: CreateDomainNameRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> CreateDomainNameResponse {
        try await self.client.execute(
            operation: "CreateDomainName", 
            path: "/v2/domainnames", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Creates a domain name.
    ///
    /// Parameters:
    ///   - domainName: The domain name.
    ///   - domainNameConfigurations: The domain name configurations.
    ///   - mutualTlsAuthentication: The mutual TLS authentication configuration for a custom domain name.
    ///   - tags: The collection of tags associated with a domain name.
    ///   - logger: Logger use during operation
    @inlinable
    public func createDomainName(
        domainName: String? = nil,
        domainNameConfigurations: [DomainNameConfiguration]? = nil,
        mutualTlsAuthentication: MutualTlsAuthenticationInput? = nil,
        tags: [String: String]? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> CreateDomainNameResponse {
        let input = CreateDomainNameRequest(
            domainName: domainName, 
            domainNameConfigurations: domainNameConfigurations, 
            mutualTlsAuthentication: mutualTlsAuthentication, 
            tags: tags
        )
        return try await self.createDomainName(input, logger: logger)
    }

    /// Creates an Integration.
    @Sendable
    @inlinable
    public func createIntegration(_ input: CreateIntegrationRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> CreateIntegrationResult {
        try await self.client.execute(
            operation: "CreateIntegration", 
            path: "/v2/apis/{ApiId}/integrations", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Creates an Integration.
    ///
    /// Parameters:
    ///   - apiId: The API identifier.
    ///   - connectionId: The ID of the VPC link for a private integration. Supported only for HTTP APIs.
    ///   - connectionType: The type of the network connection to the integration endpoint. Specify INTERNET for connections through the public routable internet or VPC_LINK for private connections between API Gateway and resources in a VPC. The default value is INTERNET.
    ///   - contentHandlingStrategy: Supported only for WebSocket APIs. Specifies how to handle response payload content type conversions. Supported values are CONVERT_TO_BINARY and CONVERT_TO_TEXT, with the following behaviors: CONVERT_TO_BINARY: Converts a response payload from a Base64-encoded string to the corresponding binary blob. CONVERT_TO_TEXT: Converts a response payload from a binary blob to a Base64-encoded string. If this property is not defined, the response payload will be passed through from the integration response to the route response or method response without modification.
    ///   - credentialsArn: Specifies the credentials required for the integration, if any. For AWS integrations, three options are available. To specify an IAM Role for API Gateway to assume, use the role's Amazon Resource Name (ARN). To require that the caller's identity be passed through from the request, specify the string arn:aws:iam::*:user/*. To use resource-based permissions on supported AWS services, specify null.
    ///   - description: The description of the integration.
    ///   - integrationMethod: Specifies the integration's HTTP method type.
    ///   - integrationSubtype: Supported only for HTTP API AWS_PROXY integrations. Specifies the AWS service action to invoke. To learn more, see Integration subtype reference.
    ///   - integrationType: The integration type of an integration. One of the following: AWS: for integrating the route or method request with an AWS service action, including the Lambda function-invoking action. With the Lambda function-invoking action, this is referred to as the Lambda custom integration. With any other AWS service action, this is known as AWS integration. Supported only for WebSocket APIs. AWS_PROXY: for integrating the route or method request with a Lambda function or other AWS service action. This integration is also referred to as a Lambda proxy integration. HTTP: for integrating the route or method request with an HTTP endpoint. This integration is also referred to as the HTTP custom integration. Supported only for WebSocket APIs. HTTP_PROXY: for integrating the route or method request with an HTTP endpoint, with the client request passed through as-is. This is also referred to as HTTP proxy integration. For HTTP API private integrations, use an HTTP_PROXY integration. MOCK: for integrating the route or method request with API Gateway as a "loopback" endpoint without invoking any backend. Supported only for WebSocket APIs.
    ///   - integrationUri: For a Lambda integration, specify the URI of a Lambda function. For an HTTP integration, specify a fully-qualified URL. For an HTTP API private integration, specify the ARN of an Application Load Balancer listener, Network Load Balancer listener, or AWS Cloud Map service. If you specify the ARN of an AWS Cloud Map service, API Gateway uses DiscoverInstances to identify resources. You can use query parameters to target specific resources. To learn more, see DiscoverInstances. For private integrations, all resources must be owned by the same AWS account.
    ///   - passthroughBehavior: Specifies the pass-through behavior for incoming requests based on the Content-Type header in the request, and the available mapping templates specified as the requestTemplates property on the Integration resource. There are three valid values: WHEN_NO_MATCH, WHEN_NO_TEMPLATES, and NEVER. Supported only for WebSocket APIs. WHEN_NO_MATCH passes the request body for unmapped content types through to the integration backend without transformation. NEVER rejects unmapped content types with an HTTP 415 Unsupported Media Type response. WHEN_NO_TEMPLATES allows pass-through when the integration has no content types mapped to templates. However, if there is at least one content type defined, unmapped content types will be rejected with the same HTTP 415 Unsupported Media Type response.
    ///   - payloadFormatVersion: Specifies the format of the payload sent to an integration. Required for HTTP APIs.
    ///   - requestParameters: For WebSocket APIs, a key-value map specifying request parameters that are passed from the method request to the backend. The key is an integration request parameter name and the associated value is a method request parameter value or static value that must be enclosed within single quotes and pre-encoded as required by the backend. The method request parameter value must match the pattern of method.request.{location}.{name} , where  {location} is querystring, path, or header; and  {name} must be a valid and unique method request parameter name. For HTTP API integrations with a specified integrationSubtype, request parameters are a key-value map specifying parameters that are passed to AWS_PROXY integrations. You can provide static values, or map request data, stage variables, or context variables that are evaluated at runtime. To learn more, see Working with AWS service integrations for HTTP APIs. For HTTP API integrations without a specified integrationSubtype request parameters are a key-value map specifying how to transform HTTP requests before sending them to the backend. The key should follow the pattern &lt;action&gt;:&lt;header|querystring|path&gt;.&lt;location&gt; where action can be append, overwrite or remove. For values, you can provide static values, or map request data, stage variables, or context variables that are evaluated at runtime. To learn more, see Transforming API requests and responses.
    ///   - requestTemplates: Represents a map of Velocity templates that are applied on the request payload based on the value of the Content-Type header sent by the client. The content type value is the key in this map, and the template (as a String) is the value. Supported only for WebSocket APIs.
    ///   - responseParameters: Supported only for HTTP APIs. You use response parameters to transform the HTTP response from a backend integration before returning the response to clients. Specify a key-value map from a selection key to response parameters. The selection key must be a valid HTTP status code within the range of 200-599. Response parameters are a key-value map. The key must match pattern &lt;action&gt;:&lt;header&gt;.&lt;location&gt; or overwrite.statuscode. The action can be append, overwrite or remove. The value can be a static value, or map to response data, stage variables, or context variables that are evaluated at runtime. To learn more, see Transforming API requests and responses.
    ///   - templateSelectionExpression: The template selection expression for the integration.
    ///   - timeoutInMillis: Custom timeout between 50 and 29,000 milliseconds for WebSocket APIs and between 50 and 30,000 milliseconds for HTTP APIs. The default timeout is 29 seconds for WebSocket APIs and 30 seconds for HTTP APIs.
    ///   - tlsConfig: The TLS configuration for a private integration. If you specify a TLS configuration, private integration traffic uses the HTTPS protocol. Supported only for HTTP APIs.
    ///   - logger: Logger use during operation
    @inlinable
    public func createIntegration(
        apiId: String,
        connectionId: String? = nil,
        connectionType: ConnectionType? = nil,
        contentHandlingStrategy: ContentHandlingStrategy? = nil,
        credentialsArn: String? = nil,
        description: String? = nil,
        integrationMethod: String? = nil,
        integrationSubtype: String? = nil,
        integrationType: IntegrationType? = nil,
        integrationUri: String? = nil,
        passthroughBehavior: PassthroughBehavior? = nil,
        payloadFormatVersion: String? = nil,
        requestParameters: [String: String]? = nil,
        requestTemplates: [String: String]? = nil,
        responseParameters: [String: [String: String]]? = nil,
        templateSelectionExpression: String? = nil,
        timeoutInMillis: Int? = nil,
        tlsConfig: TlsConfigInput? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> CreateIntegrationResult {
        let input = CreateIntegrationRequest(
            apiId: apiId, 
            connectionId: connectionId, 
            connectionType: connectionType, 
            contentHandlingStrategy: contentHandlingStrategy, 
            credentialsArn: credentialsArn, 
            description: description, 
            integrationMethod: integrationMethod, 
            integrationSubtype: integrationSubtype, 
            integrationType: integrationType, 
            integrationUri: integrationUri, 
            passthroughBehavior: passthroughBehavior, 
            payloadFormatVersion: payloadFormatVersion, 
            requestParameters: requestParameters, 
            requestTemplates: requestTemplates, 
            responseParameters: responseParameters, 
            templateSelectionExpression: templateSelectionExpression, 
            timeoutInMillis: timeoutInMillis, 
            tlsConfig: tlsConfig
        )
        return try await self.createIntegration(input, logger: logger)
    }

    /// Creates an IntegrationResponses.
    @Sendable
    @inlinable
    public func createIntegrationResponse(_ input: CreateIntegrationResponseRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> CreateIntegrationResponseResponse {
        try await self.client.execute(
            operation: "CreateIntegrationResponse", 
            path: "/v2/apis/{ApiId}/integrations/{IntegrationId}/integrationresponses", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Creates an IntegrationResponses.
    ///
    /// Parameters:
    ///   - apiId: The API identifier.
    ///   - contentHandlingStrategy: Specifies how to handle response payload content type conversions. Supported values are CONVERT_TO_BINARY and CONVERT_TO_TEXT, with the following behaviors: CONVERT_TO_BINARY: Converts a response payload from a Base64-encoded string to the corresponding binary blob. CONVERT_TO_TEXT: Converts a response payload from a binary blob to a Base64-encoded string. If this property is not defined, the response payload will be passed through from the integration response to the route response or method response without modification.
    ///   - integrationId: The integration ID.
    ///   - integrationResponseKey: The integration response key.
    ///   - responseParameters: A key-value map specifying response parameters that are passed to the method response from the backend. The key is a method response header parameter name and the mapped value is an integration response header value, a static value enclosed within a pair of single quotes, or a JSON expression from the integration response body. The mapping key must match the pattern of method.response.header.{name}, where {name} is a valid and unique header name. The mapped non-static value must match the pattern of integration.response.header.{name} or integration.response.body.{JSON-expression}, where {name} is a valid and unique response header name and {JSON-expression} is a valid JSON expression without the $ prefix.
    ///   - responseTemplates: The collection of response templates for the integration response as a string-to-string map of key-value pairs. Response templates are represented as a key/value map, with a content-type as the key and a template as the value.
    ///   - templateSelectionExpression: The template selection expression for the integration response. Supported only for WebSocket APIs.
    ///   - logger: Logger use during operation
    @inlinable
    public func createIntegrationResponse(
        apiId: String,
        contentHandlingStrategy: ContentHandlingStrategy? = nil,
        integrationId: String,
        integrationResponseKey: String? = nil,
        responseParameters: [String: String]? = nil,
        responseTemplates: [String: String]? = nil,
        templateSelectionExpression: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> CreateIntegrationResponseResponse {
        let input = CreateIntegrationResponseRequest(
            apiId: apiId, 
            contentHandlingStrategy: contentHandlingStrategy, 
            integrationId: integrationId, 
            integrationResponseKey: integrationResponseKey, 
            responseParameters: responseParameters, 
            responseTemplates: responseTemplates, 
            templateSelectionExpression: templateSelectionExpression
        )
        return try await self.createIntegrationResponse(input, logger: logger)
    }

    /// Creates a Model for an API.
    @Sendable
    @inlinable
    public func createModel(_ input: CreateModelRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> CreateModelResponse {
        try await self.client.execute(
            operation: "CreateModel", 
            path: "/v2/apis/{ApiId}/models", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Creates a Model for an API.
    ///
    /// Parameters:
    ///   - apiId: The API identifier.
    ///   - contentType: The content-type for the model, for example, "application/json".
    ///   - description: The description of the model.
    ///   - name: The name of the model. Must be alphanumeric.
    ///   - schema: The schema for the model. For application/json models, this should be JSON schema draft 4 model.
    ///   - logger: Logger use during operation
    @inlinable
    public func createModel(
        apiId: String,
        contentType: String? = nil,
        description: String? = nil,
        name: String? = nil,
        schema: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> CreateModelResponse {
        let input = CreateModelRequest(
            apiId: apiId, 
            contentType: contentType, 
            description: description, 
            name: name, 
            schema: schema
        )
        return try await self.createModel(input, logger: logger)
    }

    /// Creates a Route for an API.
    @Sendable
    @inlinable
    public func createRoute(_ input: CreateRouteRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> CreateRouteResult {
        try await self.client.execute(
            operation: "CreateRoute", 
            path: "/v2/apis/{ApiId}/routes", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Creates a Route for an API.
    ///
    /// Parameters:
    ///   - apiId: The API identifier.
    ///   - apiKeyRequired: Specifies whether an API key is required for the route. Supported only for WebSocket APIs.
    ///   - authorizationScopes: The authorization scopes supported by this route.
    ///   - authorizationType: The authorization type for the route. For WebSocket APIs, valid values are NONE for open access, AWS_IAM for using AWS IAM permissions, and CUSTOM for using a Lambda authorizer For HTTP APIs, valid values are NONE for open access, JWT for using JSON Web Tokens, AWS_IAM for using AWS IAM permissions, and CUSTOM for using a Lambda authorizer.
    ///   - authorizerId: The identifier of the Authorizer resource to be associated with this route. The authorizer identifier is generated by API Gateway when you created the authorizer.
    ///   - modelSelectionExpression: The model selection expression for the route. Supported only for WebSocket APIs.
    ///   - operationName: The operation name for the route.
    ///   - requestModels: The request models for the route. Supported only for WebSocket APIs.
    ///   - requestParameters: The request parameters for the route. Supported only for WebSocket APIs.
    ///   - routeKey: The route key for the route.
    ///   - routeResponseSelectionExpression: The route response selection expression for the route. Supported only for WebSocket APIs.
    ///   - target: The target for the route.
    ///   - logger: Logger use during operation
    @inlinable
    public func createRoute(
        apiId: String,
        apiKeyRequired: Bool? = nil,
        authorizationScopes: [String]? = nil,
        authorizationType: AuthorizationType? = nil,
        authorizerId: String? = nil,
        modelSelectionExpression: String? = nil,
        operationName: String? = nil,
        requestModels: [String: String]? = nil,
        requestParameters: [String: ParameterConstraints]? = nil,
        routeKey: String? = nil,
        routeResponseSelectionExpression: String? = nil,
        target: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> CreateRouteResult {
        let input = CreateRouteRequest(
            apiId: apiId, 
            apiKeyRequired: apiKeyRequired, 
            authorizationScopes: authorizationScopes, 
            authorizationType: authorizationType, 
            authorizerId: authorizerId, 
            modelSelectionExpression: modelSelectionExpression, 
            operationName: operationName, 
            requestModels: requestModels, 
            requestParameters: requestParameters, 
            routeKey: routeKey, 
            routeResponseSelectionExpression: routeResponseSelectionExpression, 
            target: target
        )
        return try await self.createRoute(input, logger: logger)
    }

    /// Creates a RouteResponse for a Route.
    @Sendable
    @inlinable
    public func createRouteResponse(_ input: CreateRouteResponseRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> CreateRouteResponseResponse {
        try await self.client.execute(
            operation: "CreateRouteResponse", 
            path: "/v2/apis/{ApiId}/routes/{RouteId}/routeresponses", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Creates a RouteResponse for a Route.
    ///
    /// Parameters:
    ///   - apiId: The API identifier.
    ///   - modelSelectionExpression: The model selection expression for the route response. Supported only for WebSocket APIs.
    ///   - responseModels: The response models for the route response.
    ///   - responseParameters: The route response parameters.
    ///   - routeId: The route ID.
    ///   - routeResponseKey: The route response key.
    ///   - logger: Logger use during operation
    @inlinable
    public func createRouteResponse(
        apiId: String,
        modelSelectionExpression: String? = nil,
        responseModels: [String: String]? = nil,
        responseParameters: [String: ParameterConstraints]? = nil,
        routeId: String,
        routeResponseKey: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> CreateRouteResponseResponse {
        let input = CreateRouteResponseRequest(
            apiId: apiId, 
            modelSelectionExpression: modelSelectionExpression, 
            responseModels: responseModels, 
            responseParameters: responseParameters, 
            routeId: routeId, 
            routeResponseKey: routeResponseKey
        )
        return try await self.createRouteResponse(input, logger: logger)
    }

    /// Creates a Stage for an API.
    @Sendable
    @inlinable
    public func createStage(_ input: CreateStageRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> CreateStageResponse {
        try await self.client.execute(
            operation: "CreateStage", 
            path: "/v2/apis/{ApiId}/stages", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Creates a Stage for an API.
    ///
    /// Parameters:
    ///   - accessLogSettings: Settings for logging access in this stage.
    ///   - apiId: The API identifier.
    ///   - autoDeploy: Specifies whether updates to an API automatically trigger a new deployment. The default value is false.
    ///   - clientCertificateId: The identifier of a client certificate for a Stage. Supported only for WebSocket APIs.
    ///   - defaultRouteSettings: The default route settings for the stage.
    ///   - deploymentId: The deployment identifier of the API stage.
    ///   - description: The description for the API stage.
    ///   - routeSettings: Route settings for the stage, by routeKey.
    ///   - stageName: The name of the stage.
    ///   - stageVariables: A map that defines the stage variables for a Stage. Variable names can have alphanumeric and underscore characters, and the values must match [A-Za-z0-9-._~:/?#&amp;=,]+.
    ///   - tags: The collection of tags. Each tag element is associated with a given resource.
    ///   - logger: Logger use during operation
    @inlinable
    public func createStage(
        accessLogSettings: AccessLogSettings? = nil,
        apiId: String,
        autoDeploy: Bool? = nil,
        clientCertificateId: String? = nil,
        defaultRouteSettings: RouteSettings? = nil,
        deploymentId: String? = nil,
        description: String? = nil,
        routeSettings: [String: RouteSettings]? = nil,
        stageName: String? = nil,
        stageVariables: [String: String]? = nil,
        tags: [String: String]? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> CreateStageResponse {
        let input = CreateStageRequest(
            accessLogSettings: accessLogSettings, 
            apiId: apiId, 
            autoDeploy: autoDeploy, 
            clientCertificateId: clientCertificateId, 
            defaultRouteSettings: defaultRouteSettings, 
            deploymentId: deploymentId, 
            description: description, 
            routeSettings: routeSettings, 
            stageName: stageName, 
            stageVariables: stageVariables, 
            tags: tags
        )
        return try await self.createStage(input, logger: logger)
    }

    /// Creates a VPC link.
    @Sendable
    @inlinable
    public func createVpcLink(_ input: CreateVpcLinkRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> CreateVpcLinkResponse {
        try await self.client.execute(
            operation: "CreateVpcLink", 
            path: "/v2/vpclinks", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Creates a VPC link.
    ///
    /// Parameters:
    ///   - name: The name of the VPC link.
    ///   - securityGroupIds: A list of security group IDs for the VPC link.
    ///   - subnetIds: A list of subnet IDs to include in the VPC link.
    ///   - tags: A list of tags.
    ///   - logger: Logger use during operation
    @inlinable
    public func createVpcLink(
        name: String? = nil,
        securityGroupIds: [String]? = nil,
        subnetIds: [String]? = nil,
        tags: [String: String]? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> CreateVpcLinkResponse {
        let input = CreateVpcLinkRequest(
            name: name, 
            securityGroupIds: securityGroupIds, 
            subnetIds: subnetIds, 
            tags: tags
        )
        return try await self.createVpcLink(input, logger: logger)
    }

    /// Deletes the AccessLogSettings for a Stage. To disable access logging for a Stage, delete its AccessLogSettings.
    @Sendable
    @inlinable
    public func deleteAccessLogSettings(_ input: DeleteAccessLogSettingsRequest, logger: Logger = AWSClient.loggingDisabled) async throws {
        try await self.client.execute(
            operation: "DeleteAccessLogSettings", 
            path: "/v2/apis/{ApiId}/stages/{StageName}/accesslogsettings", 
            httpMethod: .DELETE, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Deletes the AccessLogSettings for a Stage. To disable access logging for a Stage, delete its AccessLogSettings.
    ///
    /// Parameters:
    ///   - apiId: The API identifier.
    ///   - stageName: The stage name. Stage names can only contain alphanumeric characters, hyphens, and underscores. Maximum length is 128 characters.
    ///   - logger: Logger use during operation
    @inlinable
    public func deleteAccessLogSettings(
        apiId: String,
        stageName: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws {
        let input = DeleteAccessLogSettingsRequest(
            apiId: apiId, 
            stageName: stageName
        )
        return try await self.deleteAccessLogSettings(input, logger: logger)
    }

    /// Deletes an Api resource.
    @Sendable
    @inlinable
    public func deleteApi(_ input: DeleteApiRequest, logger: Logger = AWSClient.loggingDisabled) async throws {
        try await self.client.execute(
            operation: "DeleteApi", 
            path: "/v2/apis/{ApiId}", 
            httpMethod: .DELETE, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Deletes an Api resource.
    ///
    /// Parameters:
    ///   - apiId: The API identifier.
    ///   - logger: Logger use during operation
    @inlinable
    public func deleteApi(
        apiId: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws {
        let input = DeleteApiRequest(
            apiId: apiId
        )
        return try await self.deleteApi(input, logger: logger)
    }

    /// Deletes an API mapping.
    @Sendable
    @inlinable
    public func deleteApiMapping(_ input: DeleteApiMappingRequest, logger: Logger = AWSClient.loggingDisabled) async throws {
        try await self.client.execute(
            operation: "DeleteApiMapping", 
            path: "/v2/domainnames/{DomainName}/apimappings/{ApiMappingId}", 
            httpMethod: .DELETE, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Deletes an API mapping.
    ///
    /// Parameters:
    ///   - apiMappingId: The API mapping identifier.
    ///   - domainName: The domain name.
    ///   - logger: Logger use during operation
    @inlinable
    public func deleteApiMapping(
        apiMappingId: String,
        domainName: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws {
        let input = DeleteApiMappingRequest(
            apiMappingId: apiMappingId, 
            domainName: domainName
        )
        return try await self.deleteApiMapping(input, logger: logger)
    }

    /// Deletes an Authorizer.
    @Sendable
    @inlinable
    public func deleteAuthorizer(_ input: DeleteAuthorizerRequest, logger: Logger = AWSClient.loggingDisabled) async throws {
        try await self.client.execute(
            operation: "DeleteAuthorizer", 
            path: "/v2/apis/{ApiId}/authorizers/{AuthorizerId}", 
            httpMethod: .DELETE, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Deletes an Authorizer.
    ///
    /// Parameters:
    ///   - apiId: The API identifier.
    ///   - authorizerId: The authorizer identifier.
    ///   - logger: Logger use during operation
    @inlinable
    public func deleteAuthorizer(
        apiId: String,
        authorizerId: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws {
        let input = DeleteAuthorizerRequest(
            apiId: apiId, 
            authorizerId: authorizerId
        )
        return try await self.deleteAuthorizer(input, logger: logger)
    }

    /// Deletes a CORS configuration.
    @Sendable
    @inlinable
    public func deleteCorsConfiguration(_ input: DeleteCorsConfigurationRequest, logger: Logger = AWSClient.loggingDisabled) async throws {
        try await self.client.execute(
            operation: "DeleteCorsConfiguration", 
            path: "/v2/apis/{ApiId}/cors", 
            httpMethod: .DELETE, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Deletes a CORS configuration.
    ///
    /// Parameters:
    ///   - apiId: The API identifier.
    ///   - logger: Logger use during operation
    @inlinable
    public func deleteCorsConfiguration(
        apiId: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws {
        let input = DeleteCorsConfigurationRequest(
            apiId: apiId
        )
        return try await self.deleteCorsConfiguration(input, logger: logger)
    }

    /// Deletes a Deployment.
    @Sendable
    @inlinable
    public func deleteDeployment(_ input: DeleteDeploymentRequest, logger: Logger = AWSClient.loggingDisabled) async throws {
        try await self.client.execute(
            operation: "DeleteDeployment", 
            path: "/v2/apis/{ApiId}/deployments/{DeploymentId}", 
            httpMethod: .DELETE, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Deletes a Deployment.
    ///
    /// Parameters:
    ///   - apiId: The API identifier.
    ///   - deploymentId: The deployment ID.
    ///   - logger: Logger use during operation
    @inlinable
    public func deleteDeployment(
        apiId: String,
        deploymentId: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws {
        let input = DeleteDeploymentRequest(
            apiId: apiId, 
            deploymentId: deploymentId
        )
        return try await self.deleteDeployment(input, logger: logger)
    }

    /// Deletes a domain name.
    @Sendable
    @inlinable
    public func deleteDomainName(_ input: DeleteDomainNameRequest, logger: Logger = AWSClient.loggingDisabled) async throws {
        try await self.client.execute(
            operation: "DeleteDomainName", 
            path: "/v2/domainnames/{DomainName}", 
            httpMethod: .DELETE, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Deletes a domain name.
    ///
    /// Parameters:
    ///   - domainName: The domain name.
    ///   - logger: Logger use during operation
    @inlinable
    public func deleteDomainName(
        domainName: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws {
        let input = DeleteDomainNameRequest(
            domainName: domainName
        )
        return try await self.deleteDomainName(input, logger: logger)
    }

    /// Deletes an Integration.
    @Sendable
    @inlinable
    public func deleteIntegration(_ input: DeleteIntegrationRequest, logger: Logger = AWSClient.loggingDisabled) async throws {
        try await self.client.execute(
            operation: "DeleteIntegration", 
            path: "/v2/apis/{ApiId}/integrations/{IntegrationId}", 
            httpMethod: .DELETE, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Deletes an Integration.
    ///
    /// Parameters:
    ///   - apiId: The API identifier.
    ///   - integrationId: The integration ID.
    ///   - logger: Logger use during operation
    @inlinable
    public func deleteIntegration(
        apiId: String,
        integrationId: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws {
        let input = DeleteIntegrationRequest(
            apiId: apiId, 
            integrationId: integrationId
        )
        return try await self.deleteIntegration(input, logger: logger)
    }

    /// Deletes an IntegrationResponses.
    @Sendable
    @inlinable
    public func deleteIntegrationResponse(_ input: DeleteIntegrationResponseRequest, logger: Logger = AWSClient.loggingDisabled) async throws {
        try await self.client.execute(
            operation: "DeleteIntegrationResponse", 
            path: "/v2/apis/{ApiId}/integrations/{IntegrationId}/integrationresponses/{IntegrationResponseId}", 
            httpMethod: .DELETE, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Deletes an IntegrationResponses.
    ///
    /// Parameters:
    ///   - apiId: The API identifier.
    ///   - integrationId: The integration ID.
    ///   - integrationResponseId: The integration response ID.
    ///   - logger: Logger use during operation
    @inlinable
    public func deleteIntegrationResponse(
        apiId: String,
        integrationId: String,
        integrationResponseId: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws {
        let input = DeleteIntegrationResponseRequest(
            apiId: apiId, 
            integrationId: integrationId, 
            integrationResponseId: integrationResponseId
        )
        return try await self.deleteIntegrationResponse(input, logger: logger)
    }

    /// Deletes a Model.
    @Sendable
    @inlinable
    public func deleteModel(_ input: DeleteModelRequest, logger: Logger = AWSClient.loggingDisabled) async throws {
        try await self.client.execute(
            operation: "DeleteModel", 
            path: "/v2/apis/{ApiId}/models/{ModelId}", 
            httpMethod: .DELETE, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Deletes a Model.
    ///
    /// Parameters:
    ///   - apiId: The API identifier.
    ///   - modelId: The model ID.
    ///   - logger: Logger use during operation
    @inlinable
    public func deleteModel(
        apiId: String,
        modelId: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws {
        let input = DeleteModelRequest(
            apiId: apiId, 
            modelId: modelId
        )
        return try await self.deleteModel(input, logger: logger)
    }

    /// Deletes a Route.
    @Sendable
    @inlinable
    public func deleteRoute(_ input: DeleteRouteRequest, logger: Logger = AWSClient.loggingDisabled) async throws {
        try await self.client.execute(
            operation: "DeleteRoute", 
            path: "/v2/apis/{ApiId}/routes/{RouteId}", 
            httpMethod: .DELETE, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Deletes a Route.
    ///
    /// Parameters:
    ///   - apiId: The API identifier.
    ///   - routeId: The route ID.
    ///   - logger: Logger use during operation
    @inlinable
    public func deleteRoute(
        apiId: String,
        routeId: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws {
        let input = DeleteRouteRequest(
            apiId: apiId, 
            routeId: routeId
        )
        return try await self.deleteRoute(input, logger: logger)
    }

    /// Deletes a route request parameter. Supported only for WebSocket APIs.
    @Sendable
    @inlinable
    public func deleteRouteRequestParameter(_ input: DeleteRouteRequestParameterRequest, logger: Logger = AWSClient.loggingDisabled) async throws {
        try await self.client.execute(
            operation: "DeleteRouteRequestParameter", 
            path: "/v2/apis/{ApiId}/routes/{RouteId}/requestparameters/{RequestParameterKey}", 
            httpMethod: .DELETE, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Deletes a route request parameter. Supported only for WebSocket APIs.
    ///
    /// Parameters:
    ///   - apiId: The API identifier.
    ///   - requestParameterKey: The route request parameter key.
    ///   - routeId: The route ID.
    ///   - logger: Logger use during operation
    @inlinable
    public func deleteRouteRequestParameter(
        apiId: String,
        requestParameterKey: String,
        routeId: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws {
        let input = DeleteRouteRequestParameterRequest(
            apiId: apiId, 
            requestParameterKey: requestParameterKey, 
            routeId: routeId
        )
        return try await self.deleteRouteRequestParameter(input, logger: logger)
    }

    /// Deletes a RouteResponse.
    @Sendable
    @inlinable
    public func deleteRouteResponse(_ input: DeleteRouteResponseRequest, logger: Logger = AWSClient.loggingDisabled) async throws {
        try await self.client.execute(
            operation: "DeleteRouteResponse", 
            path: "/v2/apis/{ApiId}/routes/{RouteId}/routeresponses/{RouteResponseId}", 
            httpMethod: .DELETE, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Deletes a RouteResponse.
    ///
    /// Parameters:
    ///   - apiId: The API identifier.
    ///   - routeId: The route ID.
    ///   - routeResponseId: The route response ID.
    ///   - logger: Logger use during operation
    @inlinable
    public func deleteRouteResponse(
        apiId: String,
        routeId: String,
        routeResponseId: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws {
        let input = DeleteRouteResponseRequest(
            apiId: apiId, 
            routeId: routeId, 
            routeResponseId: routeResponseId
        )
        return try await self.deleteRouteResponse(input, logger: logger)
    }

    /// Deletes the RouteSettings for a stage.
    @Sendable
    @inlinable
    public func deleteRouteSettings(_ input: DeleteRouteSettingsRequest, logger: Logger = AWSClient.loggingDisabled) async throws {
        try await self.client.execute(
            operation: "DeleteRouteSettings", 
            path: "/v2/apis/{ApiId}/stages/{StageName}/routesettings/{RouteKey}", 
            httpMethod: .DELETE, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Deletes the RouteSettings for a stage.
    ///
    /// Parameters:
    ///   - apiId: The API identifier.
    ///   - routeKey: The route key.
    ///   - stageName: The stage name. Stage names can only contain alphanumeric characters, hyphens, and underscores. Maximum length is 128 characters.
    ///   - logger: Logger use during operation
    @inlinable
    public func deleteRouteSettings(
        apiId: String,
        routeKey: String,
        stageName: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws {
        let input = DeleteRouteSettingsRequest(
            apiId: apiId, 
            routeKey: routeKey, 
            stageName: stageName
        )
        return try await self.deleteRouteSettings(input, logger: logger)
    }

    /// Deletes a Stage.
    @Sendable
    @inlinable
    public func deleteStage(_ input: DeleteStageRequest, logger: Logger = AWSClient.loggingDisabled) async throws {
        try await self.client.execute(
            operation: "DeleteStage", 
            path: "/v2/apis/{ApiId}/stages/{StageName}", 
            httpMethod: .DELETE, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Deletes a Stage.
    ///
    /// Parameters:
    ///   - apiId: The API identifier.
    ///   - stageName: The stage name. Stage names can only contain alphanumeric characters, hyphens, and underscores. Maximum length is 128 characters.
    ///   - logger: Logger use during operation
    @inlinable
    public func deleteStage(
        apiId: String,
        stageName: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws {
        let input = DeleteStageRequest(
            apiId: apiId, 
            stageName: stageName
        )
        return try await self.deleteStage(input, logger: logger)
    }

    /// Deletes a VPC link.
    @Sendable
    @inlinable
    public func deleteVpcLink(_ input: DeleteVpcLinkRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DeleteVpcLinkResponse {
        try await self.client.execute(
            operation: "DeleteVpcLink", 
            path: "/v2/vpclinks/{VpcLinkId}", 
            httpMethod: .DELETE, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Deletes a VPC link.
    ///
    /// Parameters:
    ///   - vpcLinkId: The ID of the VPC link.
    ///   - logger: Logger use during operation
    @inlinable
    public func deleteVpcLink(
        vpcLinkId: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> DeleteVpcLinkResponse {
        let input = DeleteVpcLinkRequest(
            vpcLinkId: vpcLinkId
        )
        return try await self.deleteVpcLink(input, logger: logger)
    }

    @Sendable
    @inlinable
    public func exportApi(_ input: ExportApiRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> ExportApiResponse {
        try await self.client.execute(
            operation: "ExportApi", 
            path: "/v2/apis/{ApiId}/exports/{Specification}", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    ///
    /// Parameters:
    ///   - apiId: The API identifier.
    ///   - exportVersion: The version of the API Gateway export algorithm. API Gateway uses the latest version by default. Currently, the only supported version is 1.0.
    ///   - includeExtensions: Specifies whether to include API Gateway extensions in the exported API definition. API Gateway extensions are included by default.
    ///   - outputType: The output type of the exported definition file. Valid values are JSON and YAML.
    ///   - specification: The version of the API specification to use. OAS30, for OpenAPI 3.0, is the only supported value.
    ///   - stageName: The name of the API stage to export. If you don't specify this property, a representation of the latest API configuration is exported.
    ///   - logger: Logger use during operation
    @inlinable
    public func exportApi(
        apiId: String,
        exportVersion: String? = nil,
        includeExtensions: Bool? = nil,
        outputType: String? = nil,
        specification: String,
        stageName: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> ExportApiResponse {
        let input = ExportApiRequest(
            apiId: apiId, 
            exportVersion: exportVersion, 
            includeExtensions: includeExtensions, 
            outputType: outputType, 
            specification: specification, 
            stageName: stageName
        )
        return try await self.exportApi(input, logger: logger)
    }

    /// Gets an Api resource.
    @Sendable
    @inlinable
    public func getApi(_ input: GetApiRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> GetApiResponse {
        try await self.client.execute(
            operation: "GetApi", 
            path: "/v2/apis/{ApiId}", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Gets an Api resource.
    ///
    /// Parameters:
    ///   - apiId: The API identifier.
    ///   - logger: Logger use during operation
    @inlinable
    public func getApi(
        apiId: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> GetApiResponse {
        let input = GetApiRequest(
            apiId: apiId
        )
        return try await self.getApi(input, logger: logger)
    }

    /// Gets an API mapping.
    @Sendable
    @inlinable
    public func getApiMapping(_ input: GetApiMappingRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> GetApiMappingResponse {
        try await self.client.execute(
            operation: "GetApiMapping", 
            path: "/v2/domainnames/{DomainName}/apimappings/{ApiMappingId}", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Gets an API mapping.
    ///
    /// Parameters:
    ///   - apiMappingId: The API mapping identifier.
    ///   - domainName: The domain name.
    ///   - logger: Logger use during operation
    @inlinable
    public func getApiMapping(
        apiMappingId: String,
        domainName: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> GetApiMappingResponse {
        let input = GetApiMappingRequest(
            apiMappingId: apiMappingId, 
            domainName: domainName
        )
        return try await self.getApiMapping(input, logger: logger)
    }

    /// Gets API mappings.
    @Sendable
    @inlinable
    public func getApiMappings(_ input: GetApiMappingsRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> GetApiMappingsResponse {
        try await self.client.execute(
            operation: "GetApiMappings", 
            path: "/v2/domainnames/{DomainName}/apimappings", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Gets API mappings.
    ///
    /// Parameters:
    ///   - domainName: The domain name.
    ///   - maxResults: The maximum number of elements to be returned for this resource.
    ///   - nextToken: The next page of elements from this collection. Not valid for the last element of the collection.
    ///   - logger: Logger use during operation
    @inlinable
    public func getApiMappings(
        domainName: String,
        maxResults: String? = nil,
        nextToken: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> GetApiMappingsResponse {
        let input = GetApiMappingsRequest(
            domainName: domainName, 
            maxResults: maxResults, 
            nextToken: nextToken
        )
        return try await self.getApiMappings(input, logger: logger)
    }

    /// Gets a collection of Api resources.
    @Sendable
    @inlinable
    public func getApis(_ input: GetApisRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> GetApisResponse {
        try await self.client.execute(
            operation: "GetApis", 
            path: "/v2/apis", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Gets a collection of Api resources.
    ///
    /// Parameters:
    ///   - maxResults: The maximum number of elements to be returned for this resource.
    ///   - nextToken: The next page of elements from this collection. Not valid for the last element of the collection.
    ///   - logger: Logger use during operation
    @inlinable
    public func getApis(
        maxResults: String? = nil,
        nextToken: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> GetApisResponse {
        let input = GetApisRequest(
            maxResults: maxResults, 
            nextToken: nextToken
        )
        return try await self.getApis(input, logger: logger)
    }

    /// Gets an Authorizer.
    @Sendable
    @inlinable
    public func getAuthorizer(_ input: GetAuthorizerRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> GetAuthorizerResponse {
        try await self.client.execute(
            operation: "GetAuthorizer", 
            path: "/v2/apis/{ApiId}/authorizers/{AuthorizerId}", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Gets an Authorizer.
    ///
    /// Parameters:
    ///   - apiId: The API identifier.
    ///   - authorizerId: The authorizer identifier.
    ///   - logger: Logger use during operation
    @inlinable
    public func getAuthorizer(
        apiId: String,
        authorizerId: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> GetAuthorizerResponse {
        let input = GetAuthorizerRequest(
            apiId: apiId, 
            authorizerId: authorizerId
        )
        return try await self.getAuthorizer(input, logger: logger)
    }

    /// Gets the Authorizers for an API.
    @Sendable
    @inlinable
    public func getAuthorizers(_ input: GetAuthorizersRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> GetAuthorizersResponse {
        try await self.client.execute(
            operation: "GetAuthorizers", 
            path: "/v2/apis/{ApiId}/authorizers", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Gets the Authorizers for an API.
    ///
    /// Parameters:
    ///   - apiId: The API identifier.
    ///   - maxResults: The maximum number of elements to be returned for this resource.
    ///   - nextToken: The next page of elements from this collection. Not valid for the last element of the collection.
    ///   - logger: Logger use during operation
    @inlinable
    public func getAuthorizers(
        apiId: String,
        maxResults: String? = nil,
        nextToken: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> GetAuthorizersResponse {
        let input = GetAuthorizersRequest(
            apiId: apiId, 
            maxResults: maxResults, 
            nextToken: nextToken
        )
        return try await self.getAuthorizers(input, logger: logger)
    }

    /// Gets a Deployment.
    @Sendable
    @inlinable
    public func getDeployment(_ input: GetDeploymentRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> GetDeploymentResponse {
        try await self.client.execute(
            operation: "GetDeployment", 
            path: "/v2/apis/{ApiId}/deployments/{DeploymentId}", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Gets a Deployment.
    ///
    /// Parameters:
    ///   - apiId: The API identifier.
    ///   - deploymentId: The deployment ID.
    ///   - logger: Logger use during operation
    @inlinable
    public func getDeployment(
        apiId: String,
        deploymentId: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> GetDeploymentResponse {
        let input = GetDeploymentRequest(
            apiId: apiId, 
            deploymentId: deploymentId
        )
        return try await self.getDeployment(input, logger: logger)
    }

    /// Gets the Deployments for an API.
    @Sendable
    @inlinable
    public func getDeployments(_ input: GetDeploymentsRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> GetDeploymentsResponse {
        try await self.client.execute(
            operation: "GetDeployments", 
            path: "/v2/apis/{ApiId}/deployments", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Gets the Deployments for an API.
    ///
    /// Parameters:
    ///   - apiId: The API identifier.
    ///   - maxResults: The maximum number of elements to be returned for this resource.
    ///   - nextToken: The next page of elements from this collection. Not valid for the last element of the collection.
    ///   - logger: Logger use during operation
    @inlinable
    public func getDeployments(
        apiId: String,
        maxResults: String? = nil,
        nextToken: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> GetDeploymentsResponse {
        let input = GetDeploymentsRequest(
            apiId: apiId, 
            maxResults: maxResults, 
            nextToken: nextToken
        )
        return try await self.getDeployments(input, logger: logger)
    }

    /// Gets a domain name.
    @Sendable
    @inlinable
    public func getDomainName(_ input: GetDomainNameRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> GetDomainNameResponse {
        try await self.client.execute(
            operation: "GetDomainName", 
            path: "/v2/domainnames/{DomainName}", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Gets a domain name.
    ///
    /// Parameters:
    ///   - domainName: The domain name.
    ///   - logger: Logger use during operation
    @inlinable
    public func getDomainName(
        domainName: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> GetDomainNameResponse {
        let input = GetDomainNameRequest(
            domainName: domainName
        )
        return try await self.getDomainName(input, logger: logger)
    }

    /// Gets the domain names for an AWS account.
    @Sendable
    @inlinable
    public func getDomainNames(_ input: GetDomainNamesRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> GetDomainNamesResponse {
        try await self.client.execute(
            operation: "GetDomainNames", 
            path: "/v2/domainnames", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Gets the domain names for an AWS account.
    ///
    /// Parameters:
    ///   - maxResults: The maximum number of elements to be returned for this resource.
    ///   - nextToken: The next page of elements from this collection. Not valid for the last element of the collection.
    ///   - logger: Logger use during operation
    @inlinable
    public func getDomainNames(
        maxResults: String? = nil,
        nextToken: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> GetDomainNamesResponse {
        let input = GetDomainNamesRequest(
            maxResults: maxResults, 
            nextToken: nextToken
        )
        return try await self.getDomainNames(input, logger: logger)
    }

    /// Gets an Integration.
    @Sendable
    @inlinable
    public func getIntegration(_ input: GetIntegrationRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> GetIntegrationResult {
        try await self.client.execute(
            operation: "GetIntegration", 
            path: "/v2/apis/{ApiId}/integrations/{IntegrationId}", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Gets an Integration.
    ///
    /// Parameters:
    ///   - apiId: The API identifier.
    ///   - integrationId: The integration ID.
    ///   - logger: Logger use during operation
    @inlinable
    public func getIntegration(
        apiId: String,
        integrationId: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> GetIntegrationResult {
        let input = GetIntegrationRequest(
            apiId: apiId, 
            integrationId: integrationId
        )
        return try await self.getIntegration(input, logger: logger)
    }

    /// Gets an IntegrationResponses.
    @Sendable
    @inlinable
    public func getIntegrationResponse(_ input: GetIntegrationResponseRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> GetIntegrationResponseResponse {
        try await self.client.execute(
            operation: "GetIntegrationResponse", 
            path: "/v2/apis/{ApiId}/integrations/{IntegrationId}/integrationresponses/{IntegrationResponseId}", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Gets an IntegrationResponses.
    ///
    /// Parameters:
    ///   - apiId: The API identifier.
    ///   - integrationId: The integration ID.
    ///   - integrationResponseId: The integration response ID.
    ///   - logger: Logger use during operation
    @inlinable
    public func getIntegrationResponse(
        apiId: String,
        integrationId: String,
        integrationResponseId: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> GetIntegrationResponseResponse {
        let input = GetIntegrationResponseRequest(
            apiId: apiId, 
            integrationId: integrationId, 
            integrationResponseId: integrationResponseId
        )
        return try await self.getIntegrationResponse(input, logger: logger)
    }

    /// Gets the IntegrationResponses for an Integration.
    @Sendable
    @inlinable
    public func getIntegrationResponses(_ input: GetIntegrationResponsesRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> GetIntegrationResponsesResponse {
        try await self.client.execute(
            operation: "GetIntegrationResponses", 
            path: "/v2/apis/{ApiId}/integrations/{IntegrationId}/integrationresponses", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Gets the IntegrationResponses for an Integration.
    ///
    /// Parameters:
    ///   - apiId: The API identifier.
    ///   - integrationId: The integration ID.
    ///   - maxResults: The maximum number of elements to be returned for this resource.
    ///   - nextToken: The next page of elements from this collection. Not valid for the last element of the collection.
    ///   - logger: Logger use during operation
    @inlinable
    public func getIntegrationResponses(
        apiId: String,
        integrationId: String,
        maxResults: String? = nil,
        nextToken: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> GetIntegrationResponsesResponse {
        let input = GetIntegrationResponsesRequest(
            apiId: apiId, 
            integrationId: integrationId, 
            maxResults: maxResults, 
            nextToken: nextToken
        )
        return try await self.getIntegrationResponses(input, logger: logger)
    }

    /// Gets the Integrations for an API.
    @Sendable
    @inlinable
    public func getIntegrations(_ input: GetIntegrationsRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> GetIntegrationsResponse {
        try await self.client.execute(
            operation: "GetIntegrations", 
            path: "/v2/apis/{ApiId}/integrations", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Gets the Integrations for an API.
    ///
    /// Parameters:
    ///   - apiId: The API identifier.
    ///   - maxResults: The maximum number of elements to be returned for this resource.
    ///   - nextToken: The next page of elements from this collection. Not valid for the last element of the collection.
    ///   - logger: Logger use during operation
    @inlinable
    public func getIntegrations(
        apiId: String,
        maxResults: String? = nil,
        nextToken: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> GetIntegrationsResponse {
        let input = GetIntegrationsRequest(
            apiId: apiId, 
            maxResults: maxResults, 
            nextToken: nextToken
        )
        return try await self.getIntegrations(input, logger: logger)
    }

    /// Gets a Model.
    @Sendable
    @inlinable
    public func getModel(_ input: GetModelRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> GetModelResponse {
        try await self.client.execute(
            operation: "GetModel", 
            path: "/v2/apis/{ApiId}/models/{ModelId}", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Gets a Model.
    ///
    /// Parameters:
    ///   - apiId: The API identifier.
    ///   - modelId: The model ID.
    ///   - logger: Logger use during operation
    @inlinable
    public func getModel(
        apiId: String,
        modelId: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> GetModelResponse {
        let input = GetModelRequest(
            apiId: apiId, 
            modelId: modelId
        )
        return try await self.getModel(input, logger: logger)
    }

    /// Gets a model template.
    @Sendable
    @inlinable
    public func getModelTemplate(_ input: GetModelTemplateRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> GetModelTemplateResponse {
        try await self.client.execute(
            operation: "GetModelTemplate", 
            path: "/v2/apis/{ApiId}/models/{ModelId}/template", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Gets a model template.
    ///
    /// Parameters:
    ///   - apiId: The API identifier.
    ///   - modelId: The model ID.
    ///   - logger: Logger use during operation
    @inlinable
    public func getModelTemplate(
        apiId: String,
        modelId: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> GetModelTemplateResponse {
        let input = GetModelTemplateRequest(
            apiId: apiId, 
            modelId: modelId
        )
        return try await self.getModelTemplate(input, logger: logger)
    }

    /// Gets the Models for an API.
    @Sendable
    @inlinable
    public func getModels(_ input: GetModelsRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> GetModelsResponse {
        try await self.client.execute(
            operation: "GetModels", 
            path: "/v2/apis/{ApiId}/models", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Gets the Models for an API.
    ///
    /// Parameters:
    ///   - apiId: The API identifier.
    ///   - maxResults: The maximum number of elements to be returned for this resource.
    ///   - nextToken: The next page of elements from this collection. Not valid for the last element of the collection.
    ///   - logger: Logger use during operation
    @inlinable
    public func getModels(
        apiId: String,
        maxResults: String? = nil,
        nextToken: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> GetModelsResponse {
        let input = GetModelsRequest(
            apiId: apiId, 
            maxResults: maxResults, 
            nextToken: nextToken
        )
        return try await self.getModels(input, logger: logger)
    }

    /// Gets a Route.
    @Sendable
    @inlinable
    public func getRoute(_ input: GetRouteRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> GetRouteResult {
        try await self.client.execute(
            operation: "GetRoute", 
            path: "/v2/apis/{ApiId}/routes/{RouteId}", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Gets a Route.
    ///
    /// Parameters:
    ///   - apiId: The API identifier.
    ///   - routeId: The route ID.
    ///   - logger: Logger use during operation
    @inlinable
    public func getRoute(
        apiId: String,
        routeId: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> GetRouteResult {
        let input = GetRouteRequest(
            apiId: apiId, 
            routeId: routeId
        )
        return try await self.getRoute(input, logger: logger)
    }

    /// Gets a RouteResponse.
    @Sendable
    @inlinable
    public func getRouteResponse(_ input: GetRouteResponseRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> GetRouteResponseResponse {
        try await self.client.execute(
            operation: "GetRouteResponse", 
            path: "/v2/apis/{ApiId}/routes/{RouteId}/routeresponses/{RouteResponseId}", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Gets a RouteResponse.
    ///
    /// Parameters:
    ///   - apiId: The API identifier.
    ///   - routeId: The route ID.
    ///   - routeResponseId: The route response ID.
    ///   - logger: Logger use during operation
    @inlinable
    public func getRouteResponse(
        apiId: String,
        routeId: String,
        routeResponseId: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> GetRouteResponseResponse {
        let input = GetRouteResponseRequest(
            apiId: apiId, 
            routeId: routeId, 
            routeResponseId: routeResponseId
        )
        return try await self.getRouteResponse(input, logger: logger)
    }

    /// Gets the RouteResponses for a Route.
    @Sendable
    @inlinable
    public func getRouteResponses(_ input: GetRouteResponsesRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> GetRouteResponsesResponse {
        try await self.client.execute(
            operation: "GetRouteResponses", 
            path: "/v2/apis/{ApiId}/routes/{RouteId}/routeresponses", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Gets the RouteResponses for a Route.
    ///
    /// Parameters:
    ///   - apiId: The API identifier.
    ///   - maxResults: The maximum number of elements to be returned for this resource.
    ///   - nextToken: The next page of elements from this collection. Not valid for the last element of the collection.
    ///   - routeId: The route ID.
    ///   - logger: Logger use during operation
    @inlinable
    public func getRouteResponses(
        apiId: String,
        maxResults: String? = nil,
        nextToken: String? = nil,
        routeId: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> GetRouteResponsesResponse {
        let input = GetRouteResponsesRequest(
            apiId: apiId, 
            maxResults: maxResults, 
            nextToken: nextToken, 
            routeId: routeId
        )
        return try await self.getRouteResponses(input, logger: logger)
    }

    /// Gets the Routes for an API.
    @Sendable
    @inlinable
    public func getRoutes(_ input: GetRoutesRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> GetRoutesResponse {
        try await self.client.execute(
            operation: "GetRoutes", 
            path: "/v2/apis/{ApiId}/routes", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Gets the Routes for an API.
    ///
    /// Parameters:
    ///   - apiId: The API identifier.
    ///   - maxResults: The maximum number of elements to be returned for this resource.
    ///   - nextToken: The next page of elements from this collection. Not valid for the last element of the collection.
    ///   - logger: Logger use during operation
    @inlinable
    public func getRoutes(
        apiId: String,
        maxResults: String? = nil,
        nextToken: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> GetRoutesResponse {
        let input = GetRoutesRequest(
            apiId: apiId, 
            maxResults: maxResults, 
            nextToken: nextToken
        )
        return try await self.getRoutes(input, logger: logger)
    }

    /// Gets a Stage.
    @Sendable
    @inlinable
    public func getStage(_ input: GetStageRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> GetStageResponse {
        try await self.client.execute(
            operation: "GetStage", 
            path: "/v2/apis/{ApiId}/stages/{StageName}", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Gets a Stage.
    ///
    /// Parameters:
    ///   - apiId: The API identifier.
    ///   - stageName: The stage name. Stage names can only contain alphanumeric characters, hyphens, and underscores. Maximum length is 128 characters.
    ///   - logger: Logger use during operation
    @inlinable
    public func getStage(
        apiId: String,
        stageName: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> GetStageResponse {
        let input = GetStageRequest(
            apiId: apiId, 
            stageName: stageName
        )
        return try await self.getStage(input, logger: logger)
    }

    /// Gets the Stages for an API.
    @Sendable
    @inlinable
    public func getStages(_ input: GetStagesRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> GetStagesResponse {
        try await self.client.execute(
            operation: "GetStages", 
            path: "/v2/apis/{ApiId}/stages", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Gets the Stages for an API.
    ///
    /// Parameters:
    ///   - apiId: The API identifier.
    ///   - maxResults: The maximum number of elements to be returned for this resource.
    ///   - nextToken: The next page of elements from this collection. Not valid for the last element of the collection.
    ///   - logger: Logger use during operation
    @inlinable
    public func getStages(
        apiId: String,
        maxResults: String? = nil,
        nextToken: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> GetStagesResponse {
        let input = GetStagesRequest(
            apiId: apiId, 
            maxResults: maxResults, 
            nextToken: nextToken
        )
        return try await self.getStages(input, logger: logger)
    }

    /// Gets a collection of Tag resources.
    @Sendable
    @inlinable
    public func getTags(_ input: GetTagsRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> GetTagsResponse {
        try await self.client.execute(
            operation: "GetTags", 
            path: "/v2/tags/{ResourceArn}", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Gets a collection of Tag resources.
    ///
    /// Parameters:
    ///   - resourceArn: The resource ARN for the tag.
    ///   - logger: Logger use during operation
    @inlinable
    public func getTags(
        resourceArn: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> GetTagsResponse {
        let input = GetTagsRequest(
            resourceArn: resourceArn
        )
        return try await self.getTags(input, logger: logger)
    }

    /// Gets a VPC link.
    @Sendable
    @inlinable
    public func getVpcLink(_ input: GetVpcLinkRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> GetVpcLinkResponse {
        try await self.client.execute(
            operation: "GetVpcLink", 
            path: "/v2/vpclinks/{VpcLinkId}", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Gets a VPC link.
    ///
    /// Parameters:
    ///   - vpcLinkId: The ID of the VPC link.
    ///   - logger: Logger use during operation
    @inlinable
    public func getVpcLink(
        vpcLinkId: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> GetVpcLinkResponse {
        let input = GetVpcLinkRequest(
            vpcLinkId: vpcLinkId
        )
        return try await self.getVpcLink(input, logger: logger)
    }

    /// Gets a collection of VPC links.
    @Sendable
    @inlinable
    public func getVpcLinks(_ input: GetVpcLinksRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> GetVpcLinksResponse {
        try await self.client.execute(
            operation: "GetVpcLinks", 
            path: "/v2/vpclinks", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Gets a collection of VPC links.
    ///
    /// Parameters:
    ///   - maxResults: The maximum number of elements to be returned for this resource.
    ///   - nextToken: The next page of elements from this collection. Not valid for the last element of the collection.
    ///   - logger: Logger use during operation
    @inlinable
    public func getVpcLinks(
        maxResults: String? = nil,
        nextToken: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> GetVpcLinksResponse {
        let input = GetVpcLinksRequest(
            maxResults: maxResults, 
            nextToken: nextToken
        )
        return try await self.getVpcLinks(input, logger: logger)
    }

    /// Imports an API.
    @Sendable
    @inlinable
    public func importApi(_ input: ImportApiRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> ImportApiResponse {
        try await self.client.execute(
            operation: "ImportApi", 
            path: "/v2/apis", 
            httpMethod: .PUT, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Imports an API.
    ///
    /// Parameters:
    ///   - basepath: Specifies how to interpret the base path of the API during import. Valid values are ignore, prepend, and split. The default value is ignore. To learn more, see Set the OpenAPI basePath Property. Supported only for HTTP APIs.
    ///   - body: The OpenAPI definition. Supported only for HTTP APIs.
    ///   - failOnWarnings: Specifies whether to rollback the API creation when a warning is encountered. By default, API creation continues if a warning is encountered.
    ///   - logger: Logger use during operation
    @inlinable
    public func importApi(
        basepath: String? = nil,
        body: String? = nil,
        failOnWarnings: Bool? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> ImportApiResponse {
        let input = ImportApiRequest(
            basepath: basepath, 
            body: body, 
            failOnWarnings: failOnWarnings
        )
        return try await self.importApi(input, logger: logger)
    }

    /// Puts an Api resource.
    @Sendable
    @inlinable
    public func reimportApi(_ input: ReimportApiRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> ReimportApiResponse {
        try await self.client.execute(
            operation: "ReimportApi", 
            path: "/v2/apis/{ApiId}", 
            httpMethod: .PUT, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Puts an Api resource.
    ///
    /// Parameters:
    ///   - apiId: The API identifier.
    ///   - basepath: Specifies how to interpret the base path of the API during import. Valid values are ignore, prepend, and split. The default value is ignore. To learn more, see Set the OpenAPI basePath Property. Supported only for HTTP APIs.
    ///   - body: The OpenAPI definition. Supported only for HTTP APIs.
    ///   - failOnWarnings: Specifies whether to rollback the API creation when a warning is encountered. By default, API creation continues if a warning is encountered.
    ///   - logger: Logger use during operation
    @inlinable
    public func reimportApi(
        apiId: String,
        basepath: String? = nil,
        body: String? = nil,
        failOnWarnings: Bool? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> ReimportApiResponse {
        let input = ReimportApiRequest(
            apiId: apiId, 
            basepath: basepath, 
            body: body, 
            failOnWarnings: failOnWarnings
        )
        return try await self.reimportApi(input, logger: logger)
    }

    /// Resets all authorizer cache entries on a stage. Supported only for HTTP APIs.
    @Sendable
    @inlinable
    public func resetAuthorizersCache(_ input: ResetAuthorizersCacheRequest, logger: Logger = AWSClient.loggingDisabled) async throws {
        try await self.client.execute(
            operation: "ResetAuthorizersCache", 
            path: "/v2/apis/{ApiId}/stages/{StageName}/cache/authorizers", 
            httpMethod: .DELETE, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Resets all authorizer cache entries on a stage. Supported only for HTTP APIs.
    ///
    /// Parameters:
    ///   - apiId: The API identifier.
    ///   - stageName: The stage name. Stage names can contain only alphanumeric characters, hyphens, and underscores, or be $default. Maximum length is 128 characters.
    ///   - logger: Logger use during operation
    @inlinable
    public func resetAuthorizersCache(
        apiId: String,
        stageName: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws {
        let input = ResetAuthorizersCacheRequest(
            apiId: apiId, 
            stageName: stageName
        )
        return try await self.resetAuthorizersCache(input, logger: logger)
    }

    /// Creates a new Tag resource to represent a tag.
    @Sendable
    @inlinable
    public func tagResource(_ input: TagResourceRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> TagResourceResponse {
        try await self.client.execute(
            operation: "TagResource", 
            path: "/v2/tags/{ResourceArn}", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Creates a new Tag resource to represent a tag.
    ///
    /// Parameters:
    ///   - resourceArn: The resource ARN for the tag.
    ///   - tags: The collection of tags. Each tag element is associated with a given resource.
    ///   - logger: Logger use during operation
    @inlinable
    public func tagResource(
        resourceArn: String,
        tags: [String: String]? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> TagResourceResponse {
        let input = TagResourceRequest(
            resourceArn: resourceArn, 
            tags: tags
        )
        return try await self.tagResource(input, logger: logger)
    }

    /// Deletes a Tag.
    @Sendable
    @inlinable
    public func untagResource(_ input: UntagResourceRequest, logger: Logger = AWSClient.loggingDisabled) async throws {
        try await self.client.execute(
            operation: "UntagResource", 
            path: "/v2/tags/{ResourceArn}", 
            httpMethod: .DELETE, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Deletes a Tag.
    ///
    /// Parameters:
    ///   - resourceArn: The resource ARN for the tag.
    ///   - tagKeys: The Tag keys to delete
    ///   - logger: Logger use during operation
    @inlinable
    public func untagResource(
        resourceArn: String,
        tagKeys: [String]? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws {
        let input = UntagResourceRequest(
            resourceArn: resourceArn, 
            tagKeys: tagKeys
        )
        return try await self.untagResource(input, logger: logger)
    }

    /// Updates an Api resource.
    @Sendable
    @inlinable
    public func updateApi(_ input: UpdateApiRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> UpdateApiResponse {
        try await self.client.execute(
            operation: "UpdateApi", 
            path: "/v2/apis/{ApiId}", 
            httpMethod: .PATCH, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Updates an Api resource.
    ///
    /// Parameters:
    ///   - apiId: The API identifier.
    ///   - apiKeySelectionExpression: An API key selection expression. Supported only for WebSocket APIs. See API Key Selection Expressions.
    ///   - corsConfiguration: A CORS configuration. Supported only for HTTP APIs.
    ///   - credentialsArn: This property is part of quick create. It specifies the credentials required for the integration, if any. For a Lambda integration, three options are available. To specify an IAM Role for API Gateway to assume, use the role's Amazon Resource Name (ARN). To require that the caller's identity be passed through from the request, specify arn:aws:iam::*:user/*. To use resource-based permissions on supported AWS services, don't specify this parameter. Currently, this property is not used for HTTP integrations. If provided, this value replaces the credentials associated with the quick create integration. Supported only for HTTP APIs.
    ///   - description: The description of the API.
    ///   - disableExecuteApiEndpoint: Specifies whether clients can invoke your API by using the default execute-api endpoint. By default, clients can invoke your API with the default https://{api_id}.execute-api.{region}.amazonaws.com endpoint. To require that clients use a custom domain name to invoke your API, disable the default endpoint.
    ///   - disableSchemaValidation: Avoid validating models when creating a deployment. Supported only for WebSocket APIs.
    ///   - name: The name of the API.
    ///   - routeKey: This property is part of quick create. If not specified, the route created using quick create is kept. Otherwise, this value replaces the route key of the quick create route. Additional routes may still be added after the API is updated. Supported only for HTTP APIs.
    ///   - routeSelectionExpression: The route selection expression for the API. For HTTP APIs, the routeSelectionExpression must be ${request.method} ${request.path}. If not provided, this will be the default for HTTP APIs. This property is required for WebSocket APIs.
    ///   - target: This property is part of quick create. For HTTP integrations, specify a fully qualified URL. For Lambda integrations, specify a function ARN. The type of the integration will be HTTP_PROXY or AWS_PROXY, respectively. The value provided updates the integration URI and integration type. You can update a quick-created target, but you can't remove it from an API. Supported only for HTTP APIs.
    ///   - version: A version identifier for the API.
    ///   - logger: Logger use during operation
    @inlinable
    public func updateApi(
        apiId: String,
        apiKeySelectionExpression: String? = nil,
        corsConfiguration: Cors? = nil,
        credentialsArn: String? = nil,
        description: String? = nil,
        disableExecuteApiEndpoint: Bool? = nil,
        disableSchemaValidation: Bool? = nil,
        name: String? = nil,
        routeKey: String? = nil,
        routeSelectionExpression: String? = nil,
        target: String? = nil,
        version: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> UpdateApiResponse {
        let input = UpdateApiRequest(
            apiId: apiId, 
            apiKeySelectionExpression: apiKeySelectionExpression, 
            corsConfiguration: corsConfiguration, 
            credentialsArn: credentialsArn, 
            description: description, 
            disableExecuteApiEndpoint: disableExecuteApiEndpoint, 
            disableSchemaValidation: disableSchemaValidation, 
            name: name, 
            routeKey: routeKey, 
            routeSelectionExpression: routeSelectionExpression, 
            target: target, 
            version: version
        )
        return try await self.updateApi(input, logger: logger)
    }

    /// The API mapping.
    @Sendable
    @inlinable
    public func updateApiMapping(_ input: UpdateApiMappingRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> UpdateApiMappingResponse {
        try await self.client.execute(
            operation: "UpdateApiMapping", 
            path: "/v2/domainnames/{DomainName}/apimappings/{ApiMappingId}", 
            httpMethod: .PATCH, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// The API mapping.
    ///
    /// Parameters:
    ///   - apiId: The API identifier.
    ///   - apiMappingId: The API mapping identifier.
    ///   - apiMappingKey: The API mapping key.
    ///   - domainName: The domain name.
    ///   - stage: The API stage.
    ///   - logger: Logger use during operation
    @inlinable
    public func updateApiMapping(
        apiId: String? = nil,
        apiMappingId: String,
        apiMappingKey: String? = nil,
        domainName: String,
        stage: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> UpdateApiMappingResponse {
        let input = UpdateApiMappingRequest(
            apiId: apiId, 
            apiMappingId: apiMappingId, 
            apiMappingKey: apiMappingKey, 
            domainName: domainName, 
            stage: stage
        )
        return try await self.updateApiMapping(input, logger: logger)
    }

    /// Updates an Authorizer.
    @Sendable
    @inlinable
    public func updateAuthorizer(_ input: UpdateAuthorizerRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> UpdateAuthorizerResponse {
        try await self.client.execute(
            operation: "UpdateAuthorizer", 
            path: "/v2/apis/{ApiId}/authorizers/{AuthorizerId}", 
            httpMethod: .PATCH, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Updates an Authorizer.
    ///
    /// Parameters:
    ///   - apiId: The API identifier.
    ///   - authorizerCredentialsArn: Specifies the required credentials as an IAM role for API Gateway to invoke the authorizer. To specify an IAM role for API Gateway to assume, use the role's Amazon Resource Name (ARN). To use resource-based permissions on the Lambda function, don't specify this parameter.
    ///   - authorizerId: The authorizer identifier.
    ///   - authorizerPayloadFormatVersion: Specifies the format of the payload sent to an HTTP API Lambda authorizer. Required for HTTP API Lambda authorizers. Supported values are 1.0 and 2.0. To learn more, see Working with AWS Lambda authorizers for HTTP APIs.
    ///   - authorizerResultTtlInSeconds: The time to live (TTL) for cached authorizer results, in seconds. If it equals 0, authorization caching is disabled. If it is greater than 0, API Gateway caches authorizer responses. The maximum value is 3600, or 1 hour. Supported only for HTTP API Lambda authorizers.
    ///   - authorizerType: The authorizer type. Specify REQUEST for a Lambda function using incoming request parameters. Specify JWT to use JSON Web Tokens (supported only for HTTP APIs).
    ///   - authorizerUri: The authorizer's Uniform Resource Identifier (URI). For REQUEST authorizers, this must be a well-formed Lambda function URI, for example, arn:aws:apigateway:us-west-2:lambda:path/2015-03-31/functions/arn:aws:lambda:us-west-2:{account_id}:function:{lambda_function_name}/invocations. In general, the URI has this form: arn:aws:apigateway:{region}:lambda:path/{service_api} , where {region} is the same as the region hosting the Lambda function, path indicates that the remaining substring in the URI should be treated as the path to the resource, including the initial /. For Lambda functions, this is usually of the form /2015-03-31/functions/[FunctionARN]/invocations. Supported only for REQUEST authorizers.
    ///   - enableSimpleResponses: Specifies whether a Lambda authorizer returns a response in a simple format. By default, a Lambda authorizer must return an IAM policy. If enabled, the Lambda authorizer can return a boolean value instead of an IAM policy. Supported only for HTTP APIs. To learn more, see Working with AWS Lambda authorizers for HTTP APIs
    ///   - identitySource: The identity source for which authorization is requested. For a REQUEST authorizer, this is optional. The value is a set of one or more mapping expressions of the specified request parameters. The identity source can be headers, query string parameters, stage variables, and context parameters. For example, if an Auth header and a Name query string parameter are defined as identity sources, this value is route.request.header.Auth, route.request.querystring.Name for WebSocket APIs. For HTTP APIs, use selection expressions prefixed with $, for example, $request.header.Auth, $request.querystring.Name. These parameters are used to perform runtime validation for Lambda-based authorizers by verifying all of the identity-related request parameters are present in the request, not null, and non-empty. Only when this is true does the authorizer invoke the authorizer Lambda function. Otherwise, it returns a 401 Unauthorized response without calling the Lambda function. For HTTP APIs, identity sources are also used as the cache key when caching is enabled. To learn more, see Working with AWS Lambda authorizers for HTTP APIs. For JWT, a single entry that specifies where to extract the JSON Web Token (JWT) from inbound requests. Currently only header-based and query parameter-based selections are supported, for example $request.header.Authorization.
    ///   - identityValidationExpression: This parameter is not used.
    ///   - jwtConfiguration: Represents the configuration of a JWT authorizer. Required for the JWT authorizer type. Supported only for HTTP APIs.
    ///   - name: The name of the authorizer.
    ///   - logger: Logger use during operation
    @inlinable
    public func updateAuthorizer(
        apiId: String,
        authorizerCredentialsArn: String? = nil,
        authorizerId: String,
        authorizerPayloadFormatVersion: String? = nil,
        authorizerResultTtlInSeconds: Int? = nil,
        authorizerType: AuthorizerType? = nil,
        authorizerUri: String? = nil,
        enableSimpleResponses: Bool? = nil,
        identitySource: [String]? = nil,
        identityValidationExpression: String? = nil,
        jwtConfiguration: JWTConfiguration? = nil,
        name: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> UpdateAuthorizerResponse {
        let input = UpdateAuthorizerRequest(
            apiId: apiId, 
            authorizerCredentialsArn: authorizerCredentialsArn, 
            authorizerId: authorizerId, 
            authorizerPayloadFormatVersion: authorizerPayloadFormatVersion, 
            authorizerResultTtlInSeconds: authorizerResultTtlInSeconds, 
            authorizerType: authorizerType, 
            authorizerUri: authorizerUri, 
            enableSimpleResponses: enableSimpleResponses, 
            identitySource: identitySource, 
            identityValidationExpression: identityValidationExpression, 
            jwtConfiguration: jwtConfiguration, 
            name: name
        )
        return try await self.updateAuthorizer(input, logger: logger)
    }

    /// Updates a Deployment.
    @Sendable
    @inlinable
    public func updateDeployment(_ input: UpdateDeploymentRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> UpdateDeploymentResponse {
        try await self.client.execute(
            operation: "UpdateDeployment", 
            path: "/v2/apis/{ApiId}/deployments/{DeploymentId}", 
            httpMethod: .PATCH, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Updates a Deployment.
    ///
    /// Parameters:
    ///   - apiId: The API identifier.
    ///   - deploymentId: The deployment ID.
    ///   - description: The description for the deployment resource.
    ///   - logger: Logger use during operation
    @inlinable
    public func updateDeployment(
        apiId: String,
        deploymentId: String,
        description: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> UpdateDeploymentResponse {
        let input = UpdateDeploymentRequest(
            apiId: apiId, 
            deploymentId: deploymentId, 
            description: description
        )
        return try await self.updateDeployment(input, logger: logger)
    }

    /// Updates a domain name.
    @Sendable
    @inlinable
    public func updateDomainName(_ input: UpdateDomainNameRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> UpdateDomainNameResponse {
        try await self.client.execute(
            operation: "UpdateDomainName", 
            path: "/v2/domainnames/{DomainName}", 
            httpMethod: .PATCH, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Updates a domain name.
    ///
    /// Parameters:
    ///   - domainName: The domain name.
    ///   - domainNameConfigurations: The domain name configurations.
    ///   - mutualTlsAuthentication: The mutual TLS authentication configuration for a custom domain name.
    ///   - logger: Logger use during operation
    @inlinable
    public func updateDomainName(
        domainName: String,
        domainNameConfigurations: [DomainNameConfiguration]? = nil,
        mutualTlsAuthentication: MutualTlsAuthenticationInput? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> UpdateDomainNameResponse {
        let input = UpdateDomainNameRequest(
            domainName: domainName, 
            domainNameConfigurations: domainNameConfigurations, 
            mutualTlsAuthentication: mutualTlsAuthentication
        )
        return try await self.updateDomainName(input, logger: logger)
    }

    /// Updates an Integration.
    @Sendable
    @inlinable
    public func updateIntegration(_ input: UpdateIntegrationRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> UpdateIntegrationResult {
        try await self.client.execute(
            operation: "UpdateIntegration", 
            path: "/v2/apis/{ApiId}/integrations/{IntegrationId}", 
            httpMethod: .PATCH, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Updates an Integration.
    ///
    /// Parameters:
    ///   - apiId: The API identifier.
    ///   - connectionId: The ID of the VPC link for a private integration. Supported only for HTTP APIs.
    ///   - connectionType: The type of the network connection to the integration endpoint. Specify INTERNET for connections through the public routable internet or VPC_LINK for private connections between API Gateway and resources in a VPC. The default value is INTERNET.
    ///   - contentHandlingStrategy: Supported only for WebSocket APIs. Specifies how to handle response payload content type conversions. Supported values are CONVERT_TO_BINARY and CONVERT_TO_TEXT, with the following behaviors: CONVERT_TO_BINARY: Converts a response payload from a Base64-encoded string to the corresponding binary blob. CONVERT_TO_TEXT: Converts a response payload from a binary blob to a Base64-encoded string. If this property is not defined, the response payload will be passed through from the integration response to the route response or method response without modification.
    ///   - credentialsArn: Specifies the credentials required for the integration, if any. For AWS integrations, three options are available. To specify an IAM Role for API Gateway to assume, use the role's Amazon Resource Name (ARN). To require that the caller's identity be passed through from the request, specify the string arn:aws:iam::*:user/*. To use resource-based permissions on supported AWS services, specify null.
    ///   - description: The description of the integration
    ///   - integrationId: The integration ID.
    ///   - integrationMethod: Specifies the integration's HTTP method type.
    ///   - integrationSubtype: Supported only for HTTP API AWS_PROXY integrations. Specifies the AWS service action to invoke. To learn more, see Integration subtype reference.
    ///   - integrationType: The integration type of an integration. One of the following: AWS: for integrating the route or method request with an AWS service action, including the Lambda function-invoking action. With the Lambda function-invoking action, this is referred to as the Lambda custom integration. With any other AWS service action, this is known as AWS integration. Supported only for WebSocket APIs. AWS_PROXY: for integrating the route or method request with a Lambda function or other AWS service action. This integration is also referred to as a Lambda proxy integration. HTTP: for integrating the route or method request with an HTTP endpoint. This integration is also referred to as the HTTP custom integration. Supported only for WebSocket APIs. HTTP_PROXY: for integrating the route or method request with an HTTP endpoint, with the client request passed through as-is. This is also referred to as HTTP proxy integration. For HTTP API private integrations, use an HTTP_PROXY integration. MOCK: for integrating the route or method request with API Gateway as a "loopback" endpoint without invoking any backend. Supported only for WebSocket APIs.
    ///   - integrationUri: For a Lambda integration, specify the URI of a Lambda function. For an HTTP integration, specify a fully-qualified URL. For an HTTP API private integration, specify the ARN of an Application Load Balancer listener, Network Load Balancer listener, or AWS Cloud Map service. If you specify the ARN of an AWS Cloud Map service, API Gateway uses DiscoverInstances to identify resources. You can use query parameters to target specific resources. To learn more, see DiscoverInstances. For private integrations, all resources must be owned by the same AWS account.
    ///   - passthroughBehavior: Specifies the pass-through behavior for incoming requests based on the Content-Type header in the request, and the available mapping templates specified as the requestTemplates property on the Integration resource. There are three valid values: WHEN_NO_MATCH, WHEN_NO_TEMPLATES, and NEVER. Supported only for WebSocket APIs. WHEN_NO_MATCH passes the request body for unmapped content types through to the integration backend without transformation. NEVER rejects unmapped content types with an HTTP 415 Unsupported Media Type response. WHEN_NO_TEMPLATES allows pass-through when the integration has no content types mapped to templates. However, if there is at least one content type defined, unmapped content types will be rejected with the same HTTP 415 Unsupported Media Type response.
    ///   - payloadFormatVersion: Specifies the format of the payload sent to an integration. Required for HTTP APIs.
    ///   - requestParameters: For WebSocket APIs, a key-value map specifying request parameters that are passed from the method request to the backend. The key is an integration request parameter name and the associated value is a method request parameter value or static value that must be enclosed within single quotes and pre-encoded as required by the backend. The method request parameter value must match the pattern of method.request.{location}.{name} , where  {location} is querystring, path, or header; and  {name} must be a valid and unique method request parameter name. For HTTP API integrations with a specified integrationSubtype, request parameters are a key-value map specifying parameters that are passed to AWS_PROXY integrations. You can provide static values, or map request data, stage variables, or context variables that are evaluated at runtime. To learn more, see Working with AWS service integrations for HTTP APIs. For HTTP API integrations, without a specified integrationSubtype request parameters are a key-value map specifying how to transform HTTP requests before sending them to the backend. The key should follow the pattern &lt;action&gt;:&lt;header|querystring|path&gt;.&lt;location&gt; where action can be append, overwrite or remove. For values, you can provide static values, or map request data, stage variables, or context variables that are evaluated at runtime. To learn more, see Transforming API requests and responses.
    ///   - requestTemplates: Represents a map of Velocity templates that are applied on the request payload based on the value of the Content-Type header sent by the client. The content type value is the key in this map, and the template (as a String) is the value. Supported only for WebSocket APIs.
    ///   - responseParameters: Supported only for HTTP APIs. You use response parameters to transform the HTTP response from a backend integration before returning the response to clients. Specify a key-value map from a selection key to response parameters. The selection key must be a valid HTTP status code within the range of 200-599. Response parameters are a key-value map. The key must match pattern &lt;action&gt;:&lt;header&gt;.&lt;location&gt; or overwrite.statuscode. The action can be append, overwrite or remove. The value can be a static value, or map to response data, stage variables, or context variables that are evaluated at runtime. To learn more, see Transforming API requests and responses.
    ///   - templateSelectionExpression: The template selection expression for the integration.
    ///   - timeoutInMillis: Custom timeout between 50 and 29,000 milliseconds for WebSocket APIs and between 50 and 30,000 milliseconds for HTTP APIs. The default timeout is 29 seconds for WebSocket APIs and 30 seconds for HTTP APIs.
    ///   - tlsConfig: The TLS configuration for a private integration. If you specify a TLS configuration, private integration traffic uses the HTTPS protocol. Supported only for HTTP APIs.
    ///   - logger: Logger use during operation
    @inlinable
    public func updateIntegration(
        apiId: String,
        connectionId: String? = nil,
        connectionType: ConnectionType? = nil,
        contentHandlingStrategy: ContentHandlingStrategy? = nil,
        credentialsArn: String? = nil,
        description: String? = nil,
        integrationId: String,
        integrationMethod: String? = nil,
        integrationSubtype: String? = nil,
        integrationType: IntegrationType? = nil,
        integrationUri: String? = nil,
        passthroughBehavior: PassthroughBehavior? = nil,
        payloadFormatVersion: String? = nil,
        requestParameters: [String: String]? = nil,
        requestTemplates: [String: String]? = nil,
        responseParameters: [String: [String: String]]? = nil,
        templateSelectionExpression: String? = nil,
        timeoutInMillis: Int? = nil,
        tlsConfig: TlsConfigInput? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> UpdateIntegrationResult {
        let input = UpdateIntegrationRequest(
            apiId: apiId, 
            connectionId: connectionId, 
            connectionType: connectionType, 
            contentHandlingStrategy: contentHandlingStrategy, 
            credentialsArn: credentialsArn, 
            description: description, 
            integrationId: integrationId, 
            integrationMethod: integrationMethod, 
            integrationSubtype: integrationSubtype, 
            integrationType: integrationType, 
            integrationUri: integrationUri, 
            passthroughBehavior: passthroughBehavior, 
            payloadFormatVersion: payloadFormatVersion, 
            requestParameters: requestParameters, 
            requestTemplates: requestTemplates, 
            responseParameters: responseParameters, 
            templateSelectionExpression: templateSelectionExpression, 
            timeoutInMillis: timeoutInMillis, 
            tlsConfig: tlsConfig
        )
        return try await self.updateIntegration(input, logger: logger)
    }

    /// Updates an IntegrationResponses.
    @Sendable
    @inlinable
    public func updateIntegrationResponse(_ input: UpdateIntegrationResponseRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> UpdateIntegrationResponseResponse {
        try await self.client.execute(
            operation: "UpdateIntegrationResponse", 
            path: "/v2/apis/{ApiId}/integrations/{IntegrationId}/integrationresponses/{IntegrationResponseId}", 
            httpMethod: .PATCH, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Updates an IntegrationResponses.
    ///
    /// Parameters:
    ///   - apiId: The API identifier.
    ///   - contentHandlingStrategy: Supported only for WebSocket APIs. Specifies how to handle response payload content type conversions. Supported values are CONVERT_TO_BINARY and CONVERT_TO_TEXT, with the following behaviors: CONVERT_TO_BINARY: Converts a response payload from a Base64-encoded string to the corresponding binary blob. CONVERT_TO_TEXT: Converts a response payload from a binary blob to a Base64-encoded string. If this property is not defined, the response payload will be passed through from the integration response to the route response or method response without modification.
    ///   - integrationId: The integration ID.
    ///   - integrationResponseId: The integration response ID.
    ///   - integrationResponseKey: The integration response key.
    ///   - responseParameters: A key-value map specifying response parameters that are passed to the method response from the backend. The key is a method response header parameter name and the mapped value is an integration response header value, a static value enclosed within a pair of single quotes, or a JSON expression from the integration response body. The mapping key must match the pattern of method.response.header.{name} , where name is a valid and unique header name. The mapped non-static value must match the pattern of integration.response.header.{name} or integration.response.body.{JSON-expression} , where  {name} is a valid and unique response header name and  {JSON-expression} is a valid JSON expression without the $ prefix.
    ///   - responseTemplates: The collection of response templates for the integration response as a string-to-string map of key-value pairs. Response templates are represented as a key/value map, with a content-type as the key and a template as the value.
    ///   - templateSelectionExpression: The template selection expression for the integration response. Supported only for WebSocket APIs.
    ///   - logger: Logger use during operation
    @inlinable
    public func updateIntegrationResponse(
        apiId: String,
        contentHandlingStrategy: ContentHandlingStrategy? = nil,
        integrationId: String,
        integrationResponseId: String,
        integrationResponseKey: String? = nil,
        responseParameters: [String: String]? = nil,
        responseTemplates: [String: String]? = nil,
        templateSelectionExpression: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> UpdateIntegrationResponseResponse {
        let input = UpdateIntegrationResponseRequest(
            apiId: apiId, 
            contentHandlingStrategy: contentHandlingStrategy, 
            integrationId: integrationId, 
            integrationResponseId: integrationResponseId, 
            integrationResponseKey: integrationResponseKey, 
            responseParameters: responseParameters, 
            responseTemplates: responseTemplates, 
            templateSelectionExpression: templateSelectionExpression
        )
        return try await self.updateIntegrationResponse(input, logger: logger)
    }

    /// Updates a Model.
    @Sendable
    @inlinable
    public func updateModel(_ input: UpdateModelRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> UpdateModelResponse {
        try await self.client.execute(
            operation: "UpdateModel", 
            path: "/v2/apis/{ApiId}/models/{ModelId}", 
            httpMethod: .PATCH, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Updates a Model.
    ///
    /// Parameters:
    ///   - apiId: The API identifier.
    ///   - contentType: The content-type for the model, for example, "application/json".
    ///   - description: The description of the model.
    ///   - modelId: The model ID.
    ///   - name: The name of the model.
    ///   - schema: The schema for the model. For application/json models, this should be JSON schema draft 4 model.
    ///   - logger: Logger use during operation
    @inlinable
    public func updateModel(
        apiId: String,
        contentType: String? = nil,
        description: String? = nil,
        modelId: String,
        name: String? = nil,
        schema: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> UpdateModelResponse {
        let input = UpdateModelRequest(
            apiId: apiId, 
            contentType: contentType, 
            description: description, 
            modelId: modelId, 
            name: name, 
            schema: schema
        )
        return try await self.updateModel(input, logger: logger)
    }

    /// Updates a Route.
    @Sendable
    @inlinable
    public func updateRoute(_ input: UpdateRouteRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> UpdateRouteResult {
        try await self.client.execute(
            operation: "UpdateRoute", 
            path: "/v2/apis/{ApiId}/routes/{RouteId}", 
            httpMethod: .PATCH, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Updates a Route.
    ///
    /// Parameters:
    ///   - apiId: The API identifier.
    ///   - apiKeyRequired: Specifies whether an API key is required for the route. Supported only for WebSocket APIs.
    ///   - authorizationScopes: The authorization scopes supported by this route.
    ///   - authorizationType: The authorization type for the route. For WebSocket APIs, valid values are NONE for open access, AWS_IAM for using AWS IAM permissions, and CUSTOM for using a Lambda authorizer For HTTP APIs, valid values are NONE for open access, JWT for using JSON Web Tokens, AWS_IAM for using AWS IAM permissions, and CUSTOM for using a Lambda authorizer.
    ///   - authorizerId: The identifier of the Authorizer resource to be associated with this route. The authorizer identifier is generated by API Gateway when you created the authorizer.
    ///   - modelSelectionExpression: The model selection expression for the route. Supported only for WebSocket APIs.
    ///   - operationName: The operation name for the route.
    ///   - requestModels: The request models for the route. Supported only for WebSocket APIs.
    ///   - requestParameters: The request parameters for the route. Supported only for WebSocket APIs.
    ///   - routeId: The route ID.
    ///   - routeKey: The route key for the route.
    ///   - routeResponseSelectionExpression: The route response selection expression for the route. Supported only for WebSocket APIs.
    ///   - target: The target for the route.
    ///   - logger: Logger use during operation
    @inlinable
    public func updateRoute(
        apiId: String,
        apiKeyRequired: Bool? = nil,
        authorizationScopes: [String]? = nil,
        authorizationType: AuthorizationType? = nil,
        authorizerId: String? = nil,
        modelSelectionExpression: String? = nil,
        operationName: String? = nil,
        requestModels: [String: String]? = nil,
        requestParameters: [String: ParameterConstraints]? = nil,
        routeId: String,
        routeKey: String? = nil,
        routeResponseSelectionExpression: String? = nil,
        target: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> UpdateRouteResult {
        let input = UpdateRouteRequest(
            apiId: apiId, 
            apiKeyRequired: apiKeyRequired, 
            authorizationScopes: authorizationScopes, 
            authorizationType: authorizationType, 
            authorizerId: authorizerId, 
            modelSelectionExpression: modelSelectionExpression, 
            operationName: operationName, 
            requestModels: requestModels, 
            requestParameters: requestParameters, 
            routeId: routeId, 
            routeKey: routeKey, 
            routeResponseSelectionExpression: routeResponseSelectionExpression, 
            target: target
        )
        return try await self.updateRoute(input, logger: logger)
    }

    /// Updates a RouteResponse.
    @Sendable
    @inlinable
    public func updateRouteResponse(_ input: UpdateRouteResponseRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> UpdateRouteResponseResponse {
        try await self.client.execute(
            operation: "UpdateRouteResponse", 
            path: "/v2/apis/{ApiId}/routes/{RouteId}/routeresponses/{RouteResponseId}", 
            httpMethod: .PATCH, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Updates a RouteResponse.
    ///
    /// Parameters:
    ///   - apiId: The API identifier.
    ///   - modelSelectionExpression: The model selection expression for the route response. Supported only for WebSocket APIs.
    ///   - responseModels: The response models for the route response.
    ///   - responseParameters: The route response parameters.
    ///   - routeId: The route ID.
    ///   - routeResponseId: The route response ID.
    ///   - routeResponseKey: The route response key.
    ///   - logger: Logger use during operation
    @inlinable
    public func updateRouteResponse(
        apiId: String,
        modelSelectionExpression: String? = nil,
        responseModels: [String: String]? = nil,
        responseParameters: [String: ParameterConstraints]? = nil,
        routeId: String,
        routeResponseId: String,
        routeResponseKey: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> UpdateRouteResponseResponse {
        let input = UpdateRouteResponseRequest(
            apiId: apiId, 
            modelSelectionExpression: modelSelectionExpression, 
            responseModels: responseModels, 
            responseParameters: responseParameters, 
            routeId: routeId, 
            routeResponseId: routeResponseId, 
            routeResponseKey: routeResponseKey
        )
        return try await self.updateRouteResponse(input, logger: logger)
    }

    /// Updates a Stage.
    @Sendable
    @inlinable
    public func updateStage(_ input: UpdateStageRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> UpdateStageResponse {
        try await self.client.execute(
            operation: "UpdateStage", 
            path: "/v2/apis/{ApiId}/stages/{StageName}", 
            httpMethod: .PATCH, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Updates a Stage.
    ///
    /// Parameters:
    ///   - accessLogSettings: Settings for logging access in this stage.
    ///   - apiId: The API identifier.
    ///   - autoDeploy: Specifies whether updates to an API automatically trigger a new deployment. The default value is false.
    ///   - clientCertificateId: The identifier of a client certificate for a Stage.
    ///   - defaultRouteSettings: The default route settings for the stage.
    ///   - deploymentId: The deployment identifier for the API stage. Can't be updated if autoDeploy is enabled.
    ///   - description: The description for the API stage.
    ///   - routeSettings: Route settings for the stage.
    ///   - stageName: The stage name. Stage names can contain only alphanumeric characters, hyphens, and underscores, or be $default. Maximum length is 128 characters.
    ///   - stageVariables: A map that defines the stage variables for a Stage. Variable names can have alphanumeric and underscore characters, and the values must match [A-Za-z0-9-._~:/?#&amp;=,]+.
    ///   - logger: Logger use during operation
    @inlinable
    public func updateStage(
        accessLogSettings: AccessLogSettings? = nil,
        apiId: String,
        autoDeploy: Bool? = nil,
        clientCertificateId: String? = nil,
        defaultRouteSettings: RouteSettings? = nil,
        deploymentId: String? = nil,
        description: String? = nil,
        routeSettings: [String: RouteSettings]? = nil,
        stageName: String,
        stageVariables: [String: String]? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> UpdateStageResponse {
        let input = UpdateStageRequest(
            accessLogSettings: accessLogSettings, 
            apiId: apiId, 
            autoDeploy: autoDeploy, 
            clientCertificateId: clientCertificateId, 
            defaultRouteSettings: defaultRouteSettings, 
            deploymentId: deploymentId, 
            description: description, 
            routeSettings: routeSettings, 
            stageName: stageName, 
            stageVariables: stageVariables
        )
        return try await self.updateStage(input, logger: logger)
    }

    /// Updates a VPC link.
    @Sendable
    @inlinable
    public func updateVpcLink(_ input: UpdateVpcLinkRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> UpdateVpcLinkResponse {
        try await self.client.execute(
            operation: "UpdateVpcLink", 
            path: "/v2/vpclinks/{VpcLinkId}", 
            httpMethod: .PATCH, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Updates a VPC link.
    ///
    /// Parameters:
    ///   - name: The name of the VPC link.
    ///   - vpcLinkId: The ID of the VPC link.
    ///   - logger: Logger use during operation
    @inlinable
    public func updateVpcLink(
        name: String? = nil,
        vpcLinkId: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> UpdateVpcLinkResponse {
        let input = UpdateVpcLinkRequest(
            name: name, 
            vpcLinkId: vpcLinkId
        )
        return try await self.updateVpcLink(input, logger: logger)
    }
}

extension ApiGatewayV2 {
    /// Initializer required by `AWSService.with(middlewares:timeout:byteBufferAllocator:options)`. You are not able to use this initializer directly as there are not public
    /// initializers for `AWSServiceConfig.Patch`. Please use `AWSService.with(middlewares:timeout:byteBufferAllocator:options)` instead.
    public init(from: ApiGatewayV2, patch: AWSServiceConfig.Patch) {
        self.client = from.client
        self.config = from.config.with(patch: patch)
    }
}
