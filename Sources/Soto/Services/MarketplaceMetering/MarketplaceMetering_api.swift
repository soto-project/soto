//===----------------------------------------------------------------------===//
//
// This source file is part of the Soto for AWS open source project
//
// Copyright (c) 2017-2024 the Soto project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
// See CONTRIBUTORS.txt for the list of Soto project authors
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by https://github.com/soto-project/soto-codegenerator.
// DO NOT EDIT.

#if canImport(FoundationEssentials)
import FoundationEssentials
#else
import Foundation
#endif
@_exported import SotoCore

/// Service object for interacting with AWS MarketplaceMetering service.
///
/// Amazon Web Services Marketplace Metering Service This reference provides descriptions of the low-level Marketplace Metering Service API. Amazon Web Services Marketplace sellers can use this API to submit usage data for custom usage dimensions. For information about the permissions that you need to use this API, see Amazon Web Services Marketplace metering and entitlement API permissions in the Amazon Web Services Marketplace Seller Guide.   Submitting metering records   MeterUsage    Submits the metering record for an Amazon Web Services Marketplace product.   Called from: Amazon Elastic Compute Cloud (Amazon EC2) instance or a container running on either Amazon Elastic Kubernetes Service (Amazon EKS) or Amazon Elastic Container Service (Amazon ECS)   Supported product types: Amazon Machine Images (AMIs) and containers   Vendor-metered tagging: Supported allocation tagging    BatchMeterUsage    Submits the metering record for a set of customers. BatchMeterUsage API calls are captured by CloudTrail. You can use CloudTrail to verify that the software as a subscription (SaaS) metering records that you sent are accurate by searching for records with the eventName of BatchMeterUsage. You can also use CloudTrail to audit records over time. For more information, see the CloudTrail User Guide.   Called from: SaaS applications   Supported product type: SaaS   Vendor-metered tagging: Supports allocation tagging    Accepting new customers   ResolveCustomer    Resolves the registration token that the buyer submits through the browser during the registration process. Obtains a CustomerIdentifier along with the CustomerAWSAccountId and ProductCode.   Called from: SaaS application during the registration process   Supported product type: SaaS   Vendor-metered tagging: Not applicable    Entitlement and metering for paid container products   RegisteredUsage    Provides software entitlement and metering. Paid container software products sold through Amazon Web Services Marketplace must integrate with the Marketplace Metering Service and call the RegisterUsage operation. Free and Bring Your Own License model (BYOL) products for Amazon ECS or Amazon EKS aren't required to call RegisterUsage. However, you can do so if you want to receive usage data in your seller reports. For more information about using the RegisterUsage operation, see Container-based products.   Called from: Paid container software products   Supported product type: Containers   Vendor-metered tagging: Not applicable    Entitlement custom metering for container products    MeterUsage API is available in GovCloud Regions but only supports AMI FCP products in GovCloud Regions. Flexible Consumption Pricing (FCP) Container products arenâ€™t supported in GovCloud Regions: us-gov-west-1 and us-gov-east-1. For more information, see Container-based products.   Custom metering for container products are called using the MeterUsage API. The API is used for FCP AMI and FCP Container product metering.    Custom metering for Amazon EKS is available in 17 Amazon Web Services Regions    The metering service supports Amazon ECS and EKS for Flexible Consumption Pricing (FCP) products using MeterUsage API. Amazon ECS is supported in all Amazon Web Services Regions that MeterUsage API is available except for GovCloud.   Amazon EKS is supported in the following: us-east-1, us-east-2, us-west-1, us-west-2, eu-west-1, eu-central-1, eu-west-2, eu-west-3, eu-north-1, ap-east-1, ap-southeast-1, ap-northeast-1, ap-southeast-2, ap-northeast-2, ap-south-1, ca-central-1, sa-east-1.  For questions about adding Amazon Web Services Regions for metering, contact Amazon Web Services Marketplace Seller Operations.
public struct MarketplaceMetering: AWSService {
    // MARK: Member variables

    /// Client used for communication with AWS
    public let client: AWSClient
    /// Service configuration
    public let config: AWSServiceConfig

    // MARK: Initialization

    /// Initialize the MarketplaceMetering client
    /// - parameters:
    ///     - client: AWSClient used to process requests
    ///     - region: Region of server you want to communicate with. This will override the partition parameter.
    ///     - partition: AWS partition where service resides, standard (.aws), china (.awscn), government (.awsusgov).
    ///     - endpoint: Custom endpoint URL to use instead of standard AWS servers
    ///     - middleware: Middleware chain used to edit requests before they are sent and responses before they are decoded 
    ///     - timeout: Timeout value for HTTP requests
    ///     - byteBufferAllocator: Allocator for ByteBuffers
    ///     - options: Service options
    public init(
        client: AWSClient,
        region: SotoCore.Region? = nil,
        partition: AWSPartition = .aws,
        endpoint: String? = nil,
        middleware: AWSMiddlewareProtocol? = nil,
        timeout: TimeAmount? = nil,
        byteBufferAllocator: ByteBufferAllocator = ByteBufferAllocator(),
        options: AWSServiceConfig.Options = []
    ) {
        self.client = client
        self.config = AWSServiceConfig(
            region: region,
            partition: region?.partition ?? partition,
            amzTarget: "AWSMPMeteringService",
            serviceName: "MarketplaceMetering",
            serviceIdentifier: "metering.marketplace",
            signingName: "aws-marketplace",
            serviceProtocol: .json(version: "1.1"),
            apiVersion: "2016-01-14",
            endpoint: endpoint,
            variantEndpoints: Self.variantEndpoints,
            errorType: MarketplaceMeteringErrorType.self,
            middleware: middleware,
            timeout: timeout,
            byteBufferAllocator: byteBufferAllocator,
            options: options
        )
    }




    /// FIPS and dualstack endpoints
    static var variantEndpoints: [EndpointVariantType: AWSServiceConfig.EndpointVariant] {[
        [.dualstack]: .init(endpoints: [
            "af-south-1": "metering-marketplace.af-south-1.api.aws",
            "ap-east-1": "metering-marketplace.ap-east-1.api.aws",
            "ap-northeast-1": "metering-marketplace.ap-northeast-1.api.aws",
            "ap-northeast-2": "metering-marketplace.ap-northeast-2.api.aws",
            "ap-northeast-3": "metering-marketplace.ap-northeast-3.api.aws",
            "ap-south-1": "metering-marketplace.ap-south-1.api.aws",
            "ap-south-2": "metering-marketplace.ap-south-2.api.aws",
            "ap-southeast-1": "metering-marketplace.ap-southeast-1.api.aws",
            "ap-southeast-2": "metering-marketplace.ap-southeast-2.api.aws",
            "ap-southeast-3": "metering-marketplace.ap-southeast-3.api.aws",
            "ap-southeast-4": "metering-marketplace.ap-southeast-4.api.aws",
            "ca-central-1": "metering-marketplace.ca-central-1.api.aws",
            "eu-central-1": "metering-marketplace.eu-central-1.api.aws",
            "eu-central-2": "metering-marketplace.eu-central-2.api.aws",
            "eu-north-1": "metering-marketplace.eu-north-1.api.aws",
            "eu-south-1": "metering-marketplace.eu-south-1.api.aws",
            "eu-south-2": "metering-marketplace.eu-south-2.api.aws",
            "eu-west-1": "metering-marketplace.eu-west-1.api.aws",
            "eu-west-2": "metering-marketplace.eu-west-2.api.aws",
            "eu-west-3": "metering-marketplace.eu-west-3.api.aws",
            "il-central-1": "metering-marketplace.il-central-1.api.aws",
            "me-central-1": "metering-marketplace.me-central-1.api.aws",
            "me-south-1": "metering-marketplace.me-south-1.api.aws",
            "sa-east-1": "metering-marketplace.sa-east-1.api.aws",
            "us-east-1": "metering-marketplace.us-east-1.api.aws",
            "us-east-2": "metering-marketplace.us-east-2.api.aws",
            "us-gov-east-1": "metering-marketplace.us-gov-east-1.api.aws",
            "us-gov-west-1": "metering-marketplace.us-gov-west-1.api.aws",
            "us-west-1": "metering-marketplace.us-west-1.api.aws",
            "us-west-2": "metering-marketplace.us-west-2.api.aws"
        ])
    ]}

    // MARK: API Calls

    ///   The CustomerIdentifier parameter is scheduled for deprecation. Use CustomerAWSAccountID instead. These parameters are mutually exclusive. You can't specify both CustomerIdentifier and CustomerAWSAccountID in the same request.   To post metering records for customers, SaaS applications call BatchMeterUsage, which is used for metering SaaS flexible consumption pricing (FCP). Identical requests are idempotent and can be retried with the same records or a subset of records. Each BatchMeterUsage request is for only one product. If you want to meter usage for multiple products, you must make multiple BatchMeterUsage calls. Usage records should be submitted in quick succession following a recorded event. Usage records aren't accepted 6 hours or more after an event.  BatchMeterUsage can process up to 25 UsageRecords at a time, and each request must be less than 1 MB in size. Optionally, you can have multiple usage allocations for usage data that's split into buckets according to predefined tags.  BatchMeterUsage returns a list of UsageRecordResult objects, which have each UsageRecord. It also returns a list of UnprocessedRecords, which indicate errors on the service side that should be retried. For Amazon Web Services Regions that support BatchMeterUsage, see BatchMeterUsage Region support.   For an example of BatchMeterUsage, see  BatchMeterUsage code example in the Amazon Web Services Marketplace Seller Guide.
    @Sendable
    @inlinable
    public func batchMeterUsage(_ input: BatchMeterUsageRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> BatchMeterUsageResult {
        try await self.client.execute(
            operation: "BatchMeterUsage", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    ///   The CustomerIdentifier parameter is scheduled for deprecation. Use CustomerAWSAccountID instead. These parameters are mutually exclusive. You can't specify both CustomerIdentifier and CustomerAWSAccountID in the same request.   To post metering records for customers, SaaS applications call BatchMeterUsage, which is used for metering SaaS flexible consumption pricing (FCP). Identical requests are idempotent and can be retried with the same records or a subset of records. Each BatchMeterUsage request is for only one product. If you want to meter usage for multiple products, you must make multiple BatchMeterUsage calls. Usage records should be submitted in quick succession following a recorded event. Usage records aren't accepted 6 hours or more after an event.  BatchMeterUsage can process up to 25 UsageRecords at a time, and each request must be less than 1 MB in size. Optionally, you can have multiple usage allocations for usage data that's split into buckets according to predefined tags.  BatchMeterUsage returns a list of UsageRecordResult objects, which have each UsageRecord. It also returns a list of UnprocessedRecords, which indicate errors on the service side that should be retried. For Amazon Web Services Regions that support BatchMeterUsage, see BatchMeterUsage Region support.   For an example of BatchMeterUsage, see  BatchMeterUsage code example in the Amazon Web Services Marketplace Seller Guide.
    ///
    /// Parameters:
    ///   - productCode: Product code is used to uniquely identify a product in Amazon Web Services Marketplace. The product code should be the same as the one used during the publishing of a new product.
    ///   - usageRecords: The set of UsageRecords to submit. BatchMeterUsage accepts up to 25 UsageRecords at a time.
    ///   - logger: Logger use during operation
    @inlinable
    public func batchMeterUsage(
        productCode: String,
        usageRecords: [UsageRecord],
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> BatchMeterUsageResult {
        let input = BatchMeterUsageRequest(
            productCode: productCode, 
            usageRecords: usageRecords
        )
        return try await self.batchMeterUsage(input, logger: logger)
    }

    /// API to emit metering records. For identical requests, the API is idempotent and returns the metering record ID. This is used for metering flexible consumption pricing (FCP) Amazon Machine Images (AMI) and container products.  MeterUsage is authenticated on the buyer's Amazon Web Services account using credentials from the Amazon EC2 instance, Amazon ECS task, or Amazon EKS pod.  MeterUsage can optionally include multiple usage allocations, to provide customers with usage data split into buckets by tags that you define (or allow the customer to define). Usage records are expected to be submitted as quickly as possible after the event that is being recorded, and are not accepted more than 6 hours after the event. For Amazon Web Services Regions that support MeterUsage, see MeterUsage Region support for Amazon EC2 and MeterUsage Region support for Amazon ECS and Amazon EKS.
    @Sendable
    @inlinable
    public func meterUsage(_ input: MeterUsageRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> MeterUsageResult {
        try await self.client.execute(
            operation: "MeterUsage", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// API to emit metering records. For identical requests, the API is idempotent and returns the metering record ID. This is used for metering flexible consumption pricing (FCP) Amazon Machine Images (AMI) and container products.  MeterUsage is authenticated on the buyer's Amazon Web Services account using credentials from the Amazon EC2 instance, Amazon ECS task, or Amazon EKS pod.  MeterUsage can optionally include multiple usage allocations, to provide customers with usage data split into buckets by tags that you define (or allow the customer to define). Usage records are expected to be submitted as quickly as possible after the event that is being recorded, and are not accepted more than 6 hours after the event. For Amazon Web Services Regions that support MeterUsage, see MeterUsage Region support for Amazon EC2 and MeterUsage Region support for Amazon ECS and Amazon EKS.
    ///
    /// Parameters:
    ///   - dryRun: Checks whether you have the permissions required for the action, but does not make the request. If you have the permissions, the request returns DryRunOperation; otherwise, it returns UnauthorizedException. Defaults to false if not specified.
    ///   - productCode: Product code is used to uniquely identify a product in Amazon Web Services Marketplace. The product code should be the same as the one used during the publishing of a new product.
    ///   - timestamp: Timestamp, in UTC, for which the usage is being reported. Your application can meter usage for up to six hours in the past. Make sure the timestamp value is not before the start of the software usage.
    ///   - usageAllocations: The set of UsageAllocations to submit. The sum of all UsageAllocation quantities must equal the UsageQuantity of the MeterUsage request, and each UsageAllocation must have a unique set of tags (include no tags).
    ///   - usageDimension: It will be one of the fcp dimension name provided during the publishing of the product.
    ///   - usageQuantity: Consumption value for the hour. Defaults to 0 if not specified.
    ///   - logger: Logger use during operation
    @inlinable
    public func meterUsage(
        dryRun: Bool? = nil,
        productCode: String,
        timestamp: Date,
        usageAllocations: [UsageAllocation]? = nil,
        usageDimension: String,
        usageQuantity: Int? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> MeterUsageResult {
        let input = MeterUsageRequest(
            dryRun: dryRun, 
            productCode: productCode, 
            timestamp: timestamp, 
            usageAllocations: usageAllocations, 
            usageDimension: usageDimension, 
            usageQuantity: usageQuantity
        )
        return try await self.meterUsage(input, logger: logger)
    }

    /// Paid container software products sold through Amazon Web Services Marketplace must integrate with the Amazon Web Services Marketplace Metering Service and call the RegisterUsage operation for software entitlement and metering. Free and BYOL products for Amazon ECS or Amazon EKS aren't required to call RegisterUsage, but you may choose to do so if you would like to receive usage data in your seller reports. The sections below explain the behavior of RegisterUsage. RegisterUsage performs two primary functions: metering and entitlement.    Entitlement: RegisterUsage allows you to verify that the customer running your paid software is subscribed to your product on Amazon Web Services Marketplace, enabling you to guard against unauthorized use. Your container image that integrates with RegisterUsage is only required to guard against unauthorized use at container startup, as such a CustomerNotSubscribedException or PlatformNotSupportedException will only be thrown on the initial call to RegisterUsage. Subsequent calls from the same Amazon ECS task instance (e.g. task-id) or Amazon EKS pod will not throw a CustomerNotSubscribedException, even if the customer unsubscribes while the Amazon ECS task or Amazon EKS pod is still running.    Metering: RegisterUsage meters software use per ECS task, per hour, or per pod for Amazon EKS with usage prorated to the second. A minimum of 1 minute of usage applies to tasks that are short lived. For example, if a customer has a 10 node Amazon ECS or Amazon EKS cluster and a service configured as a Daemon Set, then Amazon ECS or Amazon EKS will launch a task on all 10 cluster nodes and the customer will be charged for 10 tasks. Software metering is handled by the Amazon Web Services Marketplace metering control planeâ€”your software is not required to perform metering-specific actions other than to call RegisterUsage to commence metering. The Amazon Web Services Marketplace metering control plane will also bill customers for running ECS tasks and Amazon EKS pods, regardless of the customer's subscription state, which removes the need for your software to run entitlement checks at runtime. For containers, RegisterUsage should be called immediately at launch. If you donâ€™t register the container within the first 6 hours of the launch, Amazon Web Services Marketplace Metering Service doesnâ€™t provide any metering guarantees for previous months. Metering will continue, however, for the current month forward until the container ends. RegisterUsage is for metering paid hourly container products. For Amazon Web Services Regions that support RegisterUsage, see RegisterUsage Region support.
    @Sendable
    @inlinable
    public func registerUsage(_ input: RegisterUsageRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> RegisterUsageResult {
        try await self.client.execute(
            operation: "RegisterUsage", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Paid container software products sold through Amazon Web Services Marketplace must integrate with the Amazon Web Services Marketplace Metering Service and call the RegisterUsage operation for software entitlement and metering. Free and BYOL products for Amazon ECS or Amazon EKS aren't required to call RegisterUsage, but you may choose to do so if you would like to receive usage data in your seller reports. The sections below explain the behavior of RegisterUsage. RegisterUsage performs two primary functions: metering and entitlement.    Entitlement: RegisterUsage allows you to verify that the customer running your paid software is subscribed to your product on Amazon Web Services Marketplace, enabling you to guard against unauthorized use. Your container image that integrates with RegisterUsage is only required to guard against unauthorized use at container startup, as such a CustomerNotSubscribedException or PlatformNotSupportedException will only be thrown on the initial call to RegisterUsage. Subsequent calls from the same Amazon ECS task instance (e.g. task-id) or Amazon EKS pod will not throw a CustomerNotSubscribedException, even if the customer unsubscribes while the Amazon ECS task or Amazon EKS pod is still running.    Metering: RegisterUsage meters software use per ECS task, per hour, or per pod for Amazon EKS with usage prorated to the second. A minimum of 1 minute of usage applies to tasks that are short lived. For example, if a customer has a 10 node Amazon ECS or Amazon EKS cluster and a service configured as a Daemon Set, then Amazon ECS or Amazon EKS will launch a task on all 10 cluster nodes and the customer will be charged for 10 tasks. Software metering is handled by the Amazon Web Services Marketplace metering control planeâ€”your software is not required to perform metering-specific actions other than to call RegisterUsage to commence metering. The Amazon Web Services Marketplace metering control plane will also bill customers for running ECS tasks and Amazon EKS pods, regardless of the customer's subscription state, which removes the need for your software to run entitlement checks at runtime. For containers, RegisterUsage should be called immediately at launch. If you donâ€™t register the container within the first 6 hours of the launch, Amazon Web Services Marketplace Metering Service doesnâ€™t provide any metering guarantees for previous months. Metering will continue, however, for the current month forward until the container ends. RegisterUsage is for metering paid hourly container products. For Amazon Web Services Regions that support RegisterUsage, see RegisterUsage Region support.
    ///
    /// Parameters:
    ///   - nonce: (Optional) To scope down the registration to a specific running software instance and guard against replay attacks.
    ///   - productCode: Product code is used to uniquely identify a product in Amazon Web Services Marketplace. The product code should be the same as the one used during the publishing of a new product.
    ///   - publicKeyVersion: Public Key Version provided by Amazon Web Services Marketplace
    ///   - logger: Logger use during operation
    @inlinable
    public func registerUsage(
        nonce: String? = nil,
        productCode: String,
        publicKeyVersion: Int,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> RegisterUsageResult {
        let input = RegisterUsageRequest(
            nonce: nonce, 
            productCode: productCode, 
            publicKeyVersion: publicKeyVersion
        )
        return try await self.registerUsage(input, logger: logger)
    }

    ///  ResolveCustomer is called by a SaaS application during the registration process. When a buyer visits your website during the registration process, the buyer submits a registration token through their browser. The registration token is resolved through this API to obtain a CustomerIdentifier along with the CustomerAWSAccountId and ProductCode.  To successfully resolve the token, the API must be called from the account that was used to publish the SaaS application. For an example of using ResolveCustomer, see  ResolveCustomer code example in the Amazon Web Services Marketplace Seller Guide.  Permission is required for this operation. Your IAM role or user performing this operation requires a policy to allow the aws-marketplace:ResolveCustomer action. For more information, see Actions, resources, and condition keys for Amazon Web Services Marketplace Metering Service in the Service Authorization Reference. For Amazon Web Services Regions that support ResolveCustomer, see ResolveCustomer Region support.
    @Sendable
    @inlinable
    public func resolveCustomer(_ input: ResolveCustomerRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> ResolveCustomerResult {
        try await self.client.execute(
            operation: "ResolveCustomer", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    ///  ResolveCustomer is called by a SaaS application during the registration process. When a buyer visits your website during the registration process, the buyer submits a registration token through their browser. The registration token is resolved through this API to obtain a CustomerIdentifier along with the CustomerAWSAccountId and ProductCode.  To successfully resolve the token, the API must be called from the account that was used to publish the SaaS application. For an example of using ResolveCustomer, see  ResolveCustomer code example in the Amazon Web Services Marketplace Seller Guide.  Permission is required for this operation. Your IAM role or user performing this operation requires a policy to allow the aws-marketplace:ResolveCustomer action. For more information, see Actions, resources, and condition keys for Amazon Web Services Marketplace Metering Service in the Service Authorization Reference. For Amazon Web Services Regions that support ResolveCustomer, see ResolveCustomer Region support.
    ///
    /// Parameters:
    ///   - registrationToken: When a buyer visits your website during the registration process, the buyer submits a registration token through the browser. The registration token is resolved to obtain a CustomerIdentifier along with the CustomerAWSAccountId and ProductCode.
    ///   - logger: Logger use during operation
    @inlinable
    public func resolveCustomer(
        registrationToken: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> ResolveCustomerResult {
        let input = ResolveCustomerRequest(
            registrationToken: registrationToken
        )
        return try await self.resolveCustomer(input, logger: logger)
    }
}

extension MarketplaceMetering {
    /// Initializer required by `AWSService.with(middlewares:timeout:byteBufferAllocator:options)`. You are not able to use this initializer directly as there are not public
    /// initializers for `AWSServiceConfig.Patch`. Please use `AWSService.with(middlewares:timeout:byteBufferAllocator:options)` instead.
    public init(from: MarketplaceMetering, patch: AWSServiceConfig.Patch) {
        self.client = from.client
        self.config = from.config.with(patch: patch)
    }
}
