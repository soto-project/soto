//===----------------------------------------------------------------------===//
//
// This source file is part of the Soto for AWS open source project
//
// Copyright (c) 2017-2024 the Soto project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
// See CONTRIBUTORS.txt for the list of Soto project authors
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by https://github.com/soto-project/soto-codegenerator.
// DO NOT EDIT.

#if os(Linux) && compiler(<5.10)
// swift-corelibs-foundation hasn't been updated with Sendable conformances
@preconcurrency import Foundation
#else
import Foundation
#endif
@_spi(SotoInternal) import SotoCore

extension SocialMessaging {
    // MARK: Enums

    public enum RegistrationStatus: String, CustomStringConvertible, Codable, Sendable, CodingKeyRepresentable {
        case complete = "COMPLETE"
        case incomplete = "INCOMPLETE"
        public var description: String { return self.rawValue }
    }

    // MARK: Shapes

    public struct AssociateWhatsAppBusinessAccountInput: AWSEncodableShape {
        /// A JSON object that contains the phone numbers and WhatsApp Business Account to link to your account.
        public let setupFinalization: WhatsAppSetupFinalization?
        /// Contains the callback access token.
        public let signupCallback: WhatsAppSignupCallback?

        @inlinable
        public init(setupFinalization: WhatsAppSetupFinalization? = nil, signupCallback: WhatsAppSignupCallback? = nil) {
            self.setupFinalization = setupFinalization
            self.signupCallback = signupCallback
        }

        public func validate(name: String) throws {
            try self.setupFinalization?.validate(name: "\(name).setupFinalization")
        }

        private enum CodingKeys: String, CodingKey {
            case setupFinalization = "setupFinalization"
            case signupCallback = "signupCallback"
        }
    }

    public struct AssociateWhatsAppBusinessAccountOutput: AWSDecodableShape {
        /// Contains your WhatsApp registration status.
        public let signupCallbackResult: WhatsAppSignupCallbackResult?
        /// The status code for the response.
        public let statusCode: Int?

        @inlinable
        public init(signupCallbackResult: WhatsAppSignupCallbackResult? = nil, statusCode: Int? = nil) {
            self.signupCallbackResult = signupCallbackResult
            self.statusCode = statusCode
        }

        private enum CodingKeys: String, CodingKey {
            case signupCallbackResult = "signupCallbackResult"
            case statusCode = "statusCode"
        }
    }

    public struct DeleteWhatsAppMessageMediaInput: AWSEncodableShape {
        /// The unique identifier of the media file to delete. Use the mediaId returned from PostWhatsAppMessageMedia.
        public let mediaId: String
        /// The unique identifier of the originating phone number associated with the media. Phone number identifiers are formatted as phone-number-id-01234567890123456789012345678901. Use GetLinkedWhatsAppBusinessAccount to find a phone number's id.
        public let originationPhoneNumberId: String

        @inlinable
        public init(mediaId: String, originationPhoneNumberId: String) {
            self.mediaId = mediaId
            self.originationPhoneNumberId = originationPhoneNumberId
        }

        public func encode(to encoder: Encoder) throws {
            let request = encoder.userInfo[.awsRequest]! as! RequestEncodingContainer
            _ = encoder.container(keyedBy: CodingKeys.self)
            request.encodeQuery(self.mediaId, key: "mediaId")
            request.encodeQuery(self.originationPhoneNumberId, key: "originationPhoneNumberId")
        }

        public func validate(name: String) throws {
            try self.validate(self.mediaId, name: "mediaId", parent: name, max: 100)
            try self.validate(self.mediaId, name: "mediaId", parent: name, min: 1)
            try self.validate(self.mediaId, name: "mediaId", parent: name, pattern: "^[A-Za-z0-9]+$")
            try self.validate(self.originationPhoneNumberId, name: "originationPhoneNumberId", parent: name, max: 100)
            try self.validate(self.originationPhoneNumberId, name: "originationPhoneNumberId", parent: name, min: 1)
            try self.validate(self.originationPhoneNumberId, name: "originationPhoneNumberId", parent: name, pattern: "(^phone-number-id-.*$)|(^arn:.*:phone-number-id/[0-9a-zA-Z]+$)")
        }

        private enum CodingKeys: CodingKey {}
    }

    public struct DeleteWhatsAppMessageMediaOutput: AWSDecodableShape {
        /// Success indicator for deleting the media file.
        public let success: Bool?

        @inlinable
        public init(success: Bool? = nil) {
            self.success = success
        }

        private enum CodingKeys: String, CodingKey {
            case success = "success"
        }
    }

    public struct DisassociateWhatsAppBusinessAccountInput: AWSEncodableShape {
        /// The unique identifier of your WhatsApp Business Account. WABA identifiers are formatted as waba-01234567890123456789012345678901. Use ListLinkedWhatsAppBusinessAccounts to list all WABAs and their details.
        public let id: String

        @inlinable
        public init(id: String) {
            self.id = id
        }

        public func encode(to encoder: Encoder) throws {
            let request = encoder.userInfo[.awsRequest]! as! RequestEncodingContainer
            _ = encoder.container(keyedBy: CodingKeys.self)
            request.encodeQuery(self.id, key: "id")
        }

        public func validate(name: String) throws {
            try self.validate(self.id, name: "id", parent: name, max: 100)
            try self.validate(self.id, name: "id", parent: name, min: 1)
            try self.validate(self.id, name: "id", parent: name, pattern: "(^waba-.*$)|(^arn:.*:waba/[0-9a-zA-Z]+$)")
        }

        private enum CodingKeys: CodingKey {}
    }

    public struct DisassociateWhatsAppBusinessAccountOutput: AWSDecodableShape {
        public init() {}
    }

    public struct GetLinkedWhatsAppBusinessAccountInput: AWSEncodableShape {
        /// The unique identifier, from Amazon Web Services, of the linked WhatsApp Business Account. WABA identifiers are formatted as waba-01234567890123456789012345678901. Use ListLinkedWhatsAppBusinessAccounts to list all WABAs and their details.
        public let id: String

        @inlinable
        public init(id: String) {
            self.id = id
        }

        public func encode(to encoder: Encoder) throws {
            let request = encoder.userInfo[.awsRequest]! as! RequestEncodingContainer
            _ = encoder.container(keyedBy: CodingKeys.self)
            request.encodeQuery(self.id, key: "id")
        }

        public func validate(name: String) throws {
            try self.validate(self.id, name: "id", parent: name, max: 100)
            try self.validate(self.id, name: "id", parent: name, min: 1)
            try self.validate(self.id, name: "id", parent: name, pattern: "(^waba-.*$)|(^arn:.*:waba/[0-9a-zA-Z]+$)")
        }

        private enum CodingKeys: CodingKey {}
    }

    public struct GetLinkedWhatsAppBusinessAccountOutput: AWSDecodableShape {
        /// The details of the linked WhatsApp Business Account.
        public let account: LinkedWhatsAppBusinessAccount?

        @inlinable
        public init(account: LinkedWhatsAppBusinessAccount? = nil) {
            self.account = account
        }

        private enum CodingKeys: String, CodingKey {
            case account = "account"
        }
    }

    public struct GetLinkedWhatsAppBusinessAccountPhoneNumberInput: AWSEncodableShape {
        /// The unique identifier of the phone number. Phone number identifiers are formatted as phone-number-id-01234567890123456789012345678901. Use GetLinkedWhatsAppBusinessAccount to find a phone number's id.
        public let id: String

        @inlinable
        public init(id: String) {
            self.id = id
        }

        public func encode(to encoder: Encoder) throws {
            let request = encoder.userInfo[.awsRequest]! as! RequestEncodingContainer
            _ = encoder.container(keyedBy: CodingKeys.self)
            request.encodeQuery(self.id, key: "id")
        }

        public func validate(name: String) throws {
            try self.validate(self.id, name: "id", parent: name, max: 100)
            try self.validate(self.id, name: "id", parent: name, min: 1)
            try self.validate(self.id, name: "id", parent: name, pattern: "(^phone-number-id-.*$)|(^arn:.*:phone-number-id/[0-9a-zA-Z]+$)")
        }

        private enum CodingKeys: CodingKey {}
    }

    public struct GetLinkedWhatsAppBusinessAccountPhoneNumberOutput: AWSDecodableShape {
        /// The WABA identifier linked to the phone number, formatted as waba-01234567890123456789012345678901.
        public let linkedWhatsAppBusinessAccountId: String?
        public let phoneNumber: WhatsAppPhoneNumberDetail?

        @inlinable
        public init(linkedWhatsAppBusinessAccountId: String? = nil, phoneNumber: WhatsAppPhoneNumberDetail? = nil) {
            self.linkedWhatsAppBusinessAccountId = linkedWhatsAppBusinessAccountId
            self.phoneNumber = phoneNumber
        }

        private enum CodingKeys: String, CodingKey {
            case linkedWhatsAppBusinessAccountId = "linkedWhatsAppBusinessAccountId"
            case phoneNumber = "phoneNumber"
        }
    }

    public struct GetWhatsAppMessageMediaInput: AWSEncodableShape {
        /// The bucketName and key of the S3 media file.
        public let destinationS3File: S3File?
        /// The presign url of the media file.
        public let destinationS3PresignedUrl: S3PresignedUrl?
        /// The unique identifier for the media file.
        public let mediaId: String
        /// Set to True to get only the metadata for the file.
        public let metadataOnly: Bool?
        /// The unique identifier of the originating phone number for the WhatsApp message media. The phone number identifiers are formatted as phone-number-id-01234567890123456789012345678901. Use GetLinkedWhatsAppBusinessAccount to find a phone number's id.
        public let originationPhoneNumberId: String

        @inlinable
        public init(destinationS3File: S3File? = nil, destinationS3PresignedUrl: S3PresignedUrl? = nil, mediaId: String, metadataOnly: Bool? = nil, originationPhoneNumberId: String) {
            self.destinationS3File = destinationS3File
            self.destinationS3PresignedUrl = destinationS3PresignedUrl
            self.mediaId = mediaId
            self.metadataOnly = metadataOnly
            self.originationPhoneNumberId = originationPhoneNumberId
        }

        public func validate(name: String) throws {
            try self.validate(self.mediaId, name: "mediaId", parent: name, max: 100)
            try self.validate(self.mediaId, name: "mediaId", parent: name, min: 1)
            try self.validate(self.mediaId, name: "mediaId", parent: name, pattern: "^[A-Za-z0-9]+$")
            try self.validate(self.originationPhoneNumberId, name: "originationPhoneNumberId", parent: name, max: 100)
            try self.validate(self.originationPhoneNumberId, name: "originationPhoneNumberId", parent: name, min: 1)
            try self.validate(self.originationPhoneNumberId, name: "originationPhoneNumberId", parent: name, pattern: "(^phone-number-id-.*$)|(^arn:.*:phone-number-id/[0-9a-zA-Z]+$)")
        }

        private enum CodingKeys: String, CodingKey {
            case destinationS3File = "destinationS3File"
            case destinationS3PresignedUrl = "destinationS3PresignedUrl"
            case mediaId = "mediaId"
            case metadataOnly = "metadataOnly"
            case originationPhoneNumberId = "originationPhoneNumberId"
        }
    }

    public struct GetWhatsAppMessageMediaOutput: AWSDecodableShape {
        /// The file size of the media, in KB.
        public let fileSize: Int64?
        /// The MIME type of the media.
        public let mimeType: String?

        @inlinable
        public init(fileSize: Int64? = nil, mimeType: String? = nil) {
            self.fileSize = fileSize
            self.mimeType = mimeType
        }

        private enum CodingKeys: String, CodingKey {
            case fileSize = "fileSize"
            case mimeType = "mimeType"
        }
    }

    public struct LinkedWhatsAppBusinessAccount: AWSDecodableShape {
        /// The ARN of the linked WhatsApp Business Account.
        public let arn: String
        /// The event destinations for the linked WhatsApp Business Account.
        public let eventDestinations: [WhatsAppBusinessAccountEventDestination]
        /// The ID of the linked WhatsApp Business Account, formatted as waba-01234567890123456789012345678901.
        public let id: String
        /// The date the WhatsApp Business Account was linked.
        public let linkDate: Date
        /// The phone numbers associated with the Linked WhatsApp Business Account.
        public let phoneNumbers: [WhatsAppPhoneNumberSummary]
        /// The registration status of the linked WhatsApp Business Account.
        public let registrationStatus: RegistrationStatus
        /// The WhatsApp Business Account ID from meta.
        public let wabaId: String
        /// The name of the linked WhatsApp Business Account.
        public let wabaName: String

        @inlinable
        public init(arn: String, eventDestinations: [WhatsAppBusinessAccountEventDestination], id: String, linkDate: Date, phoneNumbers: [WhatsAppPhoneNumberSummary], registrationStatus: RegistrationStatus, wabaId: String, wabaName: String) {
            self.arn = arn
            self.eventDestinations = eventDestinations
            self.id = id
            self.linkDate = linkDate
            self.phoneNumbers = phoneNumbers
            self.registrationStatus = registrationStatus
            self.wabaId = wabaId
            self.wabaName = wabaName
        }

        private enum CodingKeys: String, CodingKey {
            case arn = "arn"
            case eventDestinations = "eventDestinations"
            case id = "id"
            case linkDate = "linkDate"
            case phoneNumbers = "phoneNumbers"
            case registrationStatus = "registrationStatus"
            case wabaId = "wabaId"
            case wabaName = "wabaName"
        }
    }

    public struct LinkedWhatsAppBusinessAccountIdMetaData: AWSDecodableShape {
        /// The name of your account.
        public let accountName: String?
        /// The registration status of the linked WhatsApp Business Account.
        public let registrationStatus: RegistrationStatus?
        /// The details for unregistered WhatsApp phone numbers.
        public let unregisteredWhatsAppPhoneNumbers: [WhatsAppPhoneNumberDetail]?

        @inlinable
        public init(accountName: String? = nil, registrationStatus: RegistrationStatus? = nil, unregisteredWhatsAppPhoneNumbers: [WhatsAppPhoneNumberDetail]? = nil) {
            self.accountName = accountName
            self.registrationStatus = registrationStatus
            self.unregisteredWhatsAppPhoneNumbers = unregisteredWhatsAppPhoneNumbers
        }

        private enum CodingKeys: String, CodingKey {
            case accountName = "accountName"
            case registrationStatus = "registrationStatus"
            case unregisteredWhatsAppPhoneNumbers = "unregisteredWhatsAppPhoneNumbers"
        }
    }

    public struct LinkedWhatsAppBusinessAccountSummary: AWSDecodableShape {
        /// The ARN of the linked WhatsApp Business Account.
        public let arn: String
        /// The event destinations for the linked WhatsApp Business Account.
        public let eventDestinations: [WhatsAppBusinessAccountEventDestination]
        /// The ID of the linked WhatsApp Business Account, formatted as waba-01234567890123456789012345678901.
        public let id: String
        /// The date the WhatsApp Business Account was linked.
        public let linkDate: Date
        /// The registration status of the linked WhatsApp Business Account.
        public let registrationStatus: RegistrationStatus
        /// The WhatsApp Business Account ID provided by Meta.
        public let wabaId: String
        /// The name of the linked WhatsApp Business Account.
        public let wabaName: String

        @inlinable
        public init(arn: String, eventDestinations: [WhatsAppBusinessAccountEventDestination], id: String, linkDate: Date, registrationStatus: RegistrationStatus, wabaId: String, wabaName: String) {
            self.arn = arn
            self.eventDestinations = eventDestinations
            self.id = id
            self.linkDate = linkDate
            self.registrationStatus = registrationStatus
            self.wabaId = wabaId
            self.wabaName = wabaName
        }

        private enum CodingKeys: String, CodingKey {
            case arn = "arn"
            case eventDestinations = "eventDestinations"
            case id = "id"
            case linkDate = "linkDate"
            case registrationStatus = "registrationStatus"
            case wabaId = "wabaId"
            case wabaName = "wabaName"
        }
    }

    public struct ListLinkedWhatsAppBusinessAccountsInput: AWSEncodableShape {
        /// The maximum number of results to return.
        public let maxResults: Int?
        /// The next token for pagination.
        public let nextToken: String?

        @inlinable
        public init(maxResults: Int? = nil, nextToken: String? = nil) {
            self.maxResults = maxResults
            self.nextToken = nextToken
        }

        public func encode(to encoder: Encoder) throws {
            let request = encoder.userInfo[.awsRequest]! as! RequestEncodingContainer
            _ = encoder.container(keyedBy: CodingKeys.self)
            request.encodeQuery(self.maxResults, key: "maxResults")
            request.encodeQuery(self.nextToken, key: "nextToken")
        }

        public func validate(name: String) throws {
            try self.validate(self.maxResults, name: "maxResults", parent: name, max: 100)
            try self.validate(self.maxResults, name: "maxResults", parent: name, min: 1)
            try self.validate(self.nextToken, name: "nextToken", parent: name, max: 600)
            try self.validate(self.nextToken, name: "nextToken", parent: name, min: 1)
        }

        private enum CodingKeys: CodingKey {}
    }

    public struct ListLinkedWhatsAppBusinessAccountsOutput: AWSDecodableShape {
        /// A list of WhatsApp Business Accounts linked to your Amazon Web Services account.
        public let linkedAccounts: [LinkedWhatsAppBusinessAccountSummary]?
        /// The next token for pagination.
        public let nextToken: String?

        @inlinable
        public init(linkedAccounts: [LinkedWhatsAppBusinessAccountSummary]? = nil, nextToken: String? = nil) {
            self.linkedAccounts = linkedAccounts
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case linkedAccounts = "linkedAccounts"
            case nextToken = "nextToken"
        }
    }

    public struct ListTagsForResourceInput: AWSEncodableShape {
        /// The Amazon Resource Name (ARN) of the resource to retrieve the tags from.
        public let resourceArn: String

        @inlinable
        public init(resourceArn: String) {
            self.resourceArn = resourceArn
        }

        public func encode(to encoder: Encoder) throws {
            let request = encoder.userInfo[.awsRequest]! as! RequestEncodingContainer
            _ = encoder.container(keyedBy: CodingKeys.self)
            request.encodeQuery(self.resourceArn, key: "resourceArn")
        }

        public func validate(name: String) throws {
            try self.validate(self.resourceArn, name: "resourceArn", parent: name, max: 2048)
            try self.validate(self.resourceArn, name: "resourceArn", parent: name, pattern: "^arn:.*$")
        }

        private enum CodingKeys: CodingKey {}
    }

    public struct ListTagsForResourceOutput: AWSDecodableShape {
        /// The status code of the response.
        public let statusCode: Int?
        /// The tags for the resource.
        public let tags: [Tag]?

        @inlinable
        public init(statusCode: Int? = nil, tags: [Tag]? = nil) {
            self.statusCode = statusCode
            self.tags = tags
        }

        private enum CodingKeys: String, CodingKey {
            case statusCode = "statusCode"
            case tags = "tags"
        }
    }

    public struct PostWhatsAppMessageMediaInput: AWSEncodableShape {
        /// The ID of the phone number to associate with the WhatsApp media file. The phone number identifiers are formatted as phone-number-id-01234567890123456789012345678901. Use GetLinkedWhatsAppBusinessAccount  to find a phone number's id.
        public let originationPhoneNumberId: String
        /// The source S3 url for the media file.
        public let sourceS3File: S3File?
        /// The source presign url of the media file.
        public let sourceS3PresignedUrl: S3PresignedUrl?

        @inlinable
        public init(originationPhoneNumberId: String, sourceS3File: S3File? = nil, sourceS3PresignedUrl: S3PresignedUrl? = nil) {
            self.originationPhoneNumberId = originationPhoneNumberId
            self.sourceS3File = sourceS3File
            self.sourceS3PresignedUrl = sourceS3PresignedUrl
        }

        public func validate(name: String) throws {
            try self.validate(self.originationPhoneNumberId, name: "originationPhoneNumberId", parent: name, max: 100)
            try self.validate(self.originationPhoneNumberId, name: "originationPhoneNumberId", parent: name, min: 1)
            try self.validate(self.originationPhoneNumberId, name: "originationPhoneNumberId", parent: name, pattern: "(^phone-number-id-.*$)|(^arn:.*:phone-number-id/[0-9a-zA-Z]+$)")
        }

        private enum CodingKeys: String, CodingKey {
            case originationPhoneNumberId = "originationPhoneNumberId"
            case sourceS3File = "sourceS3File"
            case sourceS3PresignedUrl = "sourceS3PresignedUrl"
        }
    }

    public struct PostWhatsAppMessageMediaOutput: AWSDecodableShape {
        /// The unique identifier of the posted WhatsApp message.
        public let mediaId: String?

        @inlinable
        public init(mediaId: String? = nil) {
            self.mediaId = mediaId
        }

        private enum CodingKeys: String, CodingKey {
            case mediaId = "mediaId"
        }
    }

    public struct PutWhatsAppBusinessAccountEventDestinationsInput: AWSEncodableShape {
        /// An array of WhatsAppBusinessAccountEventDestination event destinations.
        public let eventDestinations: [WhatsAppBusinessAccountEventDestination]
        /// The unique identifier of your WhatsApp Business Account. WABA identifiers are formatted as waba-01234567890123456789012345678901. Use ListLinkedWhatsAppBusinessAccounts to list all WABAs and their details.
        public let id: String

        @inlinable
        public init(eventDestinations: [WhatsAppBusinessAccountEventDestination], id: String) {
            self.eventDestinations = eventDestinations
            self.id = id
        }

        public func validate(name: String) throws {
            try self.eventDestinations.forEach {
                try $0.validate(name: "\(name).eventDestinations[]")
            }
            try self.validate(self.eventDestinations, name: "eventDestinations", parent: name, max: 1)
            try self.validate(self.id, name: "id", parent: name, max: 100)
            try self.validate(self.id, name: "id", parent: name, min: 1)
            try self.validate(self.id, name: "id", parent: name, pattern: "(^waba-.*$)|(^arn:.*:waba/[0-9a-zA-Z]+$)")
        }

        private enum CodingKeys: String, CodingKey {
            case eventDestinations = "eventDestinations"
            case id = "id"
        }
    }

    public struct PutWhatsAppBusinessAccountEventDestinationsOutput: AWSDecodableShape {
        public init() {}
    }

    public struct S3File: AWSEncodableShape {
        /// The bucket name.
        public let bucketName: String
        /// The object key of the media file.
        public let key: String

        @inlinable
        public init(bucketName: String, key: String) {
            self.bucketName = bucketName
            self.key = key
        }

        private enum CodingKeys: String, CodingKey {
            case bucketName = "bucketName"
            case key = "key"
        }
    }

    public struct S3PresignedUrl: AWSEncodableShape {
        /// A map of headers and their values. You must specify the Content-Type header when using PostWhatsAppMessageMedia. For a list of common headers, see Common Request Headers in the Amazon S3 API Reference
        public let headers: [String: String]
        /// The presign url to the object.
        public let url: String

        @inlinable
        public init(headers: [String: String], url: String) {
            self.headers = headers
            self.url = url
        }

        private enum CodingKeys: String, CodingKey {
            case headers = "headers"
            case url = "url"
        }
    }

    public struct SendWhatsAppMessageInput: AWSEncodableShape {
        /// The message to send through WhatsApp. The length is in KB. The message field passes through a WhatsApp Message object, see Messages in the WhatsApp Business Platform Cloud API Reference.
        public let message: AWSBase64Data
        /// The API version for the request formatted as v{VersionNumber}. For a list of supported API versions and Amazon Web Services Regions, see  Amazon Web Services End User Messaging Social API Service Endpoints in the Amazon Web Services General Reference.
        public let metaApiVersion: String
        /// The ID of the phone number used to send the WhatsApp message. If you are sending a media file only the originationPhoneNumberId used to upload the file can be used. Phone number identifiers are formatted as phone-number-id-01234567890123456789012345678901. Use GetLinkedWhatsAppBusinessAccount to find a phone number's id.
        public let originationPhoneNumberId: String

        @inlinable
        public init(message: AWSBase64Data, metaApiVersion: String, originationPhoneNumberId: String) {
            self.message = message
            self.metaApiVersion = metaApiVersion
            self.originationPhoneNumberId = originationPhoneNumberId
        }

        public func validate(name: String) throws {
            try self.validate(self.message, name: "message", parent: name, max: 2048000)
            try self.validate(self.message, name: "message", parent: name, min: 1)
            try self.validate(self.originationPhoneNumberId, name: "originationPhoneNumberId", parent: name, max: 100)
            try self.validate(self.originationPhoneNumberId, name: "originationPhoneNumberId", parent: name, min: 1)
            try self.validate(self.originationPhoneNumberId, name: "originationPhoneNumberId", parent: name, pattern: "(^phone-number-id-.*$)|(^arn:.*:phone-number-id/[0-9a-zA-Z]+$)")
        }

        private enum CodingKeys: String, CodingKey {
            case message = "message"
            case metaApiVersion = "metaApiVersion"
            case originationPhoneNumberId = "originationPhoneNumberId"
        }
    }

    public struct SendWhatsAppMessageOutput: AWSDecodableShape {
        /// The unique identifier of the message.
        public let messageId: String?

        @inlinable
        public init(messageId: String? = nil) {
            self.messageId = messageId
        }

        private enum CodingKeys: String, CodingKey {
            case messageId = "messageId"
        }
    }

    public struct Tag: AWSEncodableShape & AWSDecodableShape {
        /// The tag key.
        public let key: String
        /// The tag value.
        public let value: String?

        @inlinable
        public init(key: String, value: String? = nil) {
            self.key = key
            self.value = value
        }

        private enum CodingKeys: String, CodingKey {
            case key = "key"
            case value = "value"
        }
    }

    public struct TagResourceInput: AWSEncodableShape {
        /// The Amazon Resource Name (ARN) of the resource to tag.
        public let resourceArn: String
        /// The tags to add to the resource.
        public let tags: [Tag]

        @inlinable
        public init(resourceArn: String, tags: [Tag]) {
            self.resourceArn = resourceArn
            self.tags = tags
        }

        public func validate(name: String) throws {
            try self.validate(self.resourceArn, name: "resourceArn", parent: name, max: 2048)
            try self.validate(self.resourceArn, name: "resourceArn", parent: name, pattern: "^arn:.*$")
        }

        private enum CodingKeys: String, CodingKey {
            case resourceArn = "resourceArn"
            case tags = "tags"
        }
    }

    public struct TagResourceOutput: AWSDecodableShape {
        /// The status code of the tag resource operation.
        public let statusCode: Int?

        @inlinable
        public init(statusCode: Int? = nil) {
            self.statusCode = statusCode
        }

        private enum CodingKeys: String, CodingKey {
            case statusCode = "statusCode"
        }
    }

    public struct UntagResourceInput: AWSEncodableShape {
        /// The Amazon Resource Name (ARN) of the resource to remove tags from.
        public let resourceArn: String
        /// The keys of the tags to remove from the resource.
        public let tagKeys: [String]

        @inlinable
        public init(resourceArn: String, tagKeys: [String]) {
            self.resourceArn = resourceArn
            self.tagKeys = tagKeys
        }

        public func validate(name: String) throws {
            try self.validate(self.resourceArn, name: "resourceArn", parent: name, max: 2048)
            try self.validate(self.resourceArn, name: "resourceArn", parent: name, pattern: "^arn:.*$")
        }

        private enum CodingKeys: String, CodingKey {
            case resourceArn = "resourceArn"
            case tagKeys = "tagKeys"
        }
    }

    public struct UntagResourceOutput: AWSDecodableShape {
        /// The status code of the untag resource operation.
        public let statusCode: Int?

        @inlinable
        public init(statusCode: Int? = nil) {
            self.statusCode = statusCode
        }

        private enum CodingKeys: String, CodingKey {
            case statusCode = "statusCode"
        }
    }

    public struct WabaPhoneNumberSetupFinalization: AWSEncodableShape {
        /// The two letter ISO region for the location of where Meta will store data.  Asia–Pacific (APAC)    Australia AU    Indonesia ID    India IN    Japan JP    Singapore SG    South Korea KR     Europe    Germany DE    Switzerland CH    United Kingdom GB     Latin America (LATAM)    Brazil BR     Middle East and Africa (MEA)    Bahrain BH    South Africa ZA    United Arab Emirates AE     North America (NORAM)    Canada CA
        public let dataLocalizationRegion: String?
        /// The unique identifier of the originating phone number associated with the media. Phone number identifiers are formatted as phone-number-id-01234567890123456789012345678901. Use GetLinkedWhatsAppBusinessAccount to find a phone number's id.
        public let id: String
        /// An array of key and value pair tags.
        public let tags: [Tag]?
        /// The PIN to use for two-step verification. To reset your PIN follow the directions in Updating PIN in the WhatsApp Business Platform Cloud API Reference.
        public let twoFactorPin: String

        @inlinable
        public init(dataLocalizationRegion: String? = nil, id: String, tags: [Tag]? = nil, twoFactorPin: String) {
            self.dataLocalizationRegion = dataLocalizationRegion
            self.id = id
            self.tags = tags
            self.twoFactorPin = twoFactorPin
        }

        public func validate(name: String) throws {
            try self.validate(self.dataLocalizationRegion, name: "dataLocalizationRegion", parent: name, pattern: "^[A-Z]{2}$")
            try self.validate(self.id, name: "id", parent: name, max: 100)
            try self.validate(self.id, name: "id", parent: name, min: 1)
            try self.validate(self.twoFactorPin, name: "twoFactorPin", parent: name, max: 6)
            try self.validate(self.twoFactorPin, name: "twoFactorPin", parent: name, min: 1)
        }

        private enum CodingKeys: String, CodingKey {
            case dataLocalizationRegion = "dataLocalizationRegion"
            case id = "id"
            case tags = "tags"
            case twoFactorPin = "twoFactorPin"
        }
    }

    public struct WabaSetupFinalization: AWSEncodableShape {
        /// The event destinations for the linked WhatsApp Business Account.
        public let eventDestinations: [WhatsAppBusinessAccountEventDestination]?
        /// The ID of the linked WhatsApp Business Account, formatted as waba-01234567890123456789012345678901.
        public let id: String?
        /// An array of key and value pair tags.
        public let tags: [Tag]?

        @inlinable
        public init(eventDestinations: [WhatsAppBusinessAccountEventDestination]? = nil, id: String? = nil, tags: [Tag]? = nil) {
            self.eventDestinations = eventDestinations
            self.id = id
            self.tags = tags
        }

        public func validate(name: String) throws {
            try self.eventDestinations?.forEach {
                try $0.validate(name: "\(name).eventDestinations[]")
            }
            try self.validate(self.eventDestinations, name: "eventDestinations", parent: name, max: 1)
            try self.validate(self.id, name: "id", parent: name, max: 100)
            try self.validate(self.id, name: "id", parent: name, min: 1)
        }

        private enum CodingKeys: String, CodingKey {
            case eventDestinations = "eventDestinations"
            case id = "id"
            case tags = "tags"
        }
    }

    public struct WhatsAppBusinessAccountEventDestination: AWSEncodableShape & AWSDecodableShape {
        /// The ARN of the event destination.
        public let eventDestinationArn: String

        @inlinable
        public init(eventDestinationArn: String) {
            self.eventDestinationArn = eventDestinationArn
        }

        public func validate(name: String) throws {
            try self.validate(self.eventDestinationArn, name: "eventDestinationArn", parent: name, max: 2048)
            try self.validate(self.eventDestinationArn, name: "eventDestinationArn", parent: name, pattern: "^arn:.*:[a-z-]+([/:](.*))?$")
        }

        private enum CodingKeys: String, CodingKey {
            case eventDestinationArn = "eventDestinationArn"
        }
    }

    public struct WhatsAppPhoneNumberDetail: AWSDecodableShape {
        /// The ARN of the WhatsApp phone number.
        public let arn: String
        /// The phone number that appears in the recipients display.
        public let displayPhoneNumber: String
        /// The display name for this phone number.
        public let displayPhoneNumberName: String
        /// The phone number ID from Meta.
        public let metaPhoneNumberId: String
        /// The phone number for sending WhatsApp.
        public let phoneNumber: String
        /// The phone number ID. Phone number identifiers are formatted as phone-number-id-01234567890123456789012345678901.
        public let phoneNumberId: String
        /// The quality rating of the phone number.
        public let qualityRating: String

        @inlinable
        public init(arn: String, displayPhoneNumber: String, displayPhoneNumberName: String, metaPhoneNumberId: String, phoneNumber: String, phoneNumberId: String, qualityRating: String) {
            self.arn = arn
            self.displayPhoneNumber = displayPhoneNumber
            self.displayPhoneNumberName = displayPhoneNumberName
            self.metaPhoneNumberId = metaPhoneNumberId
            self.phoneNumber = phoneNumber
            self.phoneNumberId = phoneNumberId
            self.qualityRating = qualityRating
        }

        private enum CodingKeys: String, CodingKey {
            case arn = "arn"
            case displayPhoneNumber = "displayPhoneNumber"
            case displayPhoneNumberName = "displayPhoneNumberName"
            case metaPhoneNumberId = "metaPhoneNumberId"
            case phoneNumber = "phoneNumber"
            case phoneNumberId = "phoneNumberId"
            case qualityRating = "qualityRating"
        }
    }

    public struct WhatsAppPhoneNumberSummary: AWSDecodableShape {
        /// The full Amazon Resource Name (ARN) for the phone number.
        public let arn: String
        /// The phone number that appears in the recipients display.
        public let displayPhoneNumber: String
        /// The display name for this phone number.
        public let displayPhoneNumberName: String
        /// The phone number ID from Meta.
        public let metaPhoneNumberId: String
        /// The phone number associated with the Linked WhatsApp Business Account.
        public let phoneNumber: String
        /// The phone number ID. Phone number identifiers are formatted as phone-number-id-01234567890123456789012345678901.
        public let phoneNumberId: String
        /// The quality rating of the phone number. This is from Meta.
        public let qualityRating: String

        @inlinable
        public init(arn: String, displayPhoneNumber: String, displayPhoneNumberName: String, metaPhoneNumberId: String, phoneNumber: String, phoneNumberId: String, qualityRating: String) {
            self.arn = arn
            self.displayPhoneNumber = displayPhoneNumber
            self.displayPhoneNumberName = displayPhoneNumberName
            self.metaPhoneNumberId = metaPhoneNumberId
            self.phoneNumber = phoneNumber
            self.phoneNumberId = phoneNumberId
            self.qualityRating = qualityRating
        }

        private enum CodingKeys: String, CodingKey {
            case arn = "arn"
            case displayPhoneNumber = "displayPhoneNumber"
            case displayPhoneNumberName = "displayPhoneNumberName"
            case metaPhoneNumberId = "metaPhoneNumberId"
            case phoneNumber = "phoneNumber"
            case phoneNumberId = "phoneNumberId"
            case qualityRating = "qualityRating"
        }
    }

    public struct WhatsAppSetupFinalization: AWSEncodableShape {
        /// An Amazon Web Services access token generated by WhatsAppSignupCallback and used by WhatsAppSetupFinalization.
        public let associateInProgressToken: String
        /// Used to add a new phone number to an existing WhatsApp Business Account. This field can't be used when the waba field is present.
        public let phoneNumberParent: String?
        /// An array of WabaPhoneNumberSetupFinalization objects containing the details of each phone number associated with the WhatsApp Business Account.
        public let phoneNumbers: [WabaPhoneNumberSetupFinalization]
        /// Used to create a new WhatsApp Business Account and add a phone number. This field can't be used when the phoneNumberParent field is present.
        public let waba: WabaSetupFinalization?

        @inlinable
        public init(associateInProgressToken: String, phoneNumberParent: String? = nil, phoneNumbers: [WabaPhoneNumberSetupFinalization], waba: WabaSetupFinalization? = nil) {
            self.associateInProgressToken = associateInProgressToken
            self.phoneNumberParent = phoneNumberParent
            self.phoneNumbers = phoneNumbers
            self.waba = waba
        }

        public func validate(name: String) throws {
            try self.validate(self.associateInProgressToken, name: "associateInProgressToken", parent: name, max: 50)
            try self.validate(self.phoneNumberParent, name: "phoneNumberParent", parent: name, max: 100)
            try self.validate(self.phoneNumberParent, name: "phoneNumberParent", parent: name, min: 1)
            try self.validate(self.phoneNumberParent, name: "phoneNumberParent", parent: name, pattern: "(^waba-.*$)|(^arn:.*:waba/[0-9a-zA-Z]+$)")
            try self.phoneNumbers.forEach {
                try $0.validate(name: "\(name).phoneNumbers[]")
            }
            try self.waba?.validate(name: "\(name).waba")
        }

        private enum CodingKeys: String, CodingKey {
            case associateInProgressToken = "associateInProgressToken"
            case phoneNumberParent = "phoneNumberParent"
            case phoneNumbers = "phoneNumbers"
            case waba = "waba"
        }
    }

    public struct WhatsAppSignupCallback: AWSEncodableShape {
        /// The access token for your WhatsApp Business Account. The accessToken value is provided by Meta.
        public let accessToken: String

        @inlinable
        public init(accessToken: String) {
            self.accessToken = accessToken
        }

        private enum CodingKeys: String, CodingKey {
            case accessToken = "accessToken"
        }
    }

    public struct WhatsAppSignupCallbackResult: AWSDecodableShape {
        /// An Amazon Web Services access token generated by WhatsAppSignupCallback and used by WhatsAppSetupFinalization.
        public let associateInProgressToken: String?
        /// A LinkedWhatsAppBusinessAccountIdMetaData object map containing the details of any WhatsAppBusiness accounts that have incomplete setup.
        public let linkedAccountsWithIncompleteSetup: [String: LinkedWhatsAppBusinessAccountIdMetaData]?

        @inlinable
        public init(associateInProgressToken: String? = nil, linkedAccountsWithIncompleteSetup: [String: LinkedWhatsAppBusinessAccountIdMetaData]? = nil) {
            self.associateInProgressToken = associateInProgressToken
            self.linkedAccountsWithIncompleteSetup = linkedAccountsWithIncompleteSetup
        }

        private enum CodingKeys: String, CodingKey {
            case associateInProgressToken = "associateInProgressToken"
            case linkedAccountsWithIncompleteSetup = "linkedAccountsWithIncompleteSetup"
        }
    }
}

// MARK: - Errors

/// Error enum for SocialMessaging
public struct SocialMessagingErrorType: AWSErrorType {
    enum Code: String {
        case accessDeniedByMetaException = "AccessDeniedByMetaException"
        case accessDeniedException = "AccessDeniedException"
        case dependencyException = "DependencyException"
        case internalServiceException = "InternalServiceException"
        case invalidParametersException = "InvalidParametersException"
        case resourceNotFoundException = "ResourceNotFoundException"
        case throttledRequestException = "ThrottledRequestException"
        case validationException = "ValidationException"
    }

    private let error: Code
    public let context: AWSErrorContext?

    /// initialize SocialMessaging
    public init?(errorCode: String, context: AWSErrorContext) {
        guard let error = Code(rawValue: errorCode) else { return nil }
        self.error = error
        self.context = context
    }

    internal init(_ error: Code) {
        self.error = error
        self.context = nil
    }

    /// return error code string
    public var errorCode: String { self.error.rawValue }

    /// You do not have sufficient access to perform this action.
    public static var accessDeniedByMetaException: Self { .init(.accessDeniedByMetaException) }
    /// You do not have sufficient access to perform this action.
    public static var accessDeniedException: Self { .init(.accessDeniedException) }
    /// Thrown when performing an action because a dependency would be broken.
    public static var dependencyException: Self { .init(.dependencyException) }
    /// The request processing has failed because of an unknown error, exception, or failure.
    public static var internalServiceException: Self { .init(.internalServiceException) }
    /// One or more parameters provided to the action are not valid.
    public static var invalidParametersException: Self { .init(.invalidParametersException) }
    /// The resource was not found.
    public static var resourceNotFoundException: Self { .init(.resourceNotFoundException) }
    /// The request was denied due to request throttling.
    public static var throttledRequestException: Self { .init(.throttledRequestException) }
    /// The request contains an invalid parameter value.
    public static var validationException: Self { .init(.validationException) }
}

extension SocialMessagingErrorType: Equatable {
    public static func == (lhs: SocialMessagingErrorType, rhs: SocialMessagingErrorType) -> Bool {
        lhs.error == rhs.error
    }
}

extension SocialMessagingErrorType: CustomStringConvertible {
    public var description: String {
        return "\(self.error.rawValue): \(self.message ?? "")"
    }
}
