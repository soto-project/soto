//===----------------------------------------------------------------------===//
//
// This source file is part of the Soto for AWS open source project
//
// Copyright (c) 2017-2021 the Soto project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
// See CONTRIBUTORS.txt for the list of Soto project authors
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by https://github.com/soto-project/soto-codegenerator.
// DO NOT EDIT.

import Foundation
import SotoCore

extension WAF {
    // MARK: Enums

    public enum ChangeAction: String, CustomStringConvertible, Codable {
        case delete = "DELETE"
        case insert = "INSERT"
        public var description: String { return self.rawValue }
    }

    public enum ChangeTokenStatus: String, CustomStringConvertible, Codable {
        case insync = "INSYNC"
        case pending = "PENDING"
        case provisioned = "PROVISIONED"
        public var description: String { return self.rawValue }
    }

    public enum ComparisonOperator: String, CustomStringConvertible, Codable {
        case eq = "EQ"
        case ge = "GE"
        case gt = "GT"
        case le = "LE"
        case lt = "LT"
        case ne = "NE"
        public var description: String { return self.rawValue }
    }

    public enum GeoMatchConstraintType: String, CustomStringConvertible, Codable {
        case country = "Country"
        public var description: String { return self.rawValue }
    }

    public enum GeoMatchConstraintValue: String, CustomStringConvertible, Codable {
        case ad = "AD"
        case ae = "AE"
        case af = "AF"
        case ag = "AG"
        case ai = "AI"
        case al = "AL"
        case am = "AM"
        case ao = "AO"
        case aq = "AQ"
        case ar = "AR"
        case `as` = "AS"
        case at = "AT"
        case au = "AU"
        case aw = "AW"
        case ax = "AX"
        case az = "AZ"
        case ba = "BA"
        case bb = "BB"
        case bd = "BD"
        case be = "BE"
        case bf = "BF"
        case bg = "BG"
        case bh = "BH"
        case bi = "BI"
        case bj = "BJ"
        case bl = "BL"
        case bm = "BM"
        case bn = "BN"
        case bo = "BO"
        case bq = "BQ"
        case br = "BR"
        case bs = "BS"
        case bt = "BT"
        case bv = "BV"
        case bw = "BW"
        case by = "BY"
        case bz = "BZ"
        case ca = "CA"
        case cc = "CC"
        case cd = "CD"
        case cf = "CF"
        case cg = "CG"
        case ch = "CH"
        case ci = "CI"
        case ck = "CK"
        case cl = "CL"
        case cm = "CM"
        case cn = "CN"
        case co = "CO"
        case cr = "CR"
        case cu = "CU"
        case cv = "CV"
        case cw = "CW"
        case cx = "CX"
        case cy = "CY"
        case cz = "CZ"
        case de = "DE"
        case dj = "DJ"
        case dk = "DK"
        case dm = "DM"
        case `do` = "DO"
        case dz = "DZ"
        case ec = "EC"
        case ee = "EE"
        case eg = "EG"
        case eh = "EH"
        case er = "ER"
        case es = "ES"
        case et = "ET"
        case fi = "FI"
        case fj = "FJ"
        case fk = "FK"
        case fm = "FM"
        case fo = "FO"
        case fr = "FR"
        case ga = "GA"
        case gb = "GB"
        case gd = "GD"
        case ge = "GE"
        case gf = "GF"
        case gg = "GG"
        case gh = "GH"
        case gi = "GI"
        case gl = "GL"
        case gm = "GM"
        case gn = "GN"
        case gp = "GP"
        case gq = "GQ"
        case gr = "GR"
        case gs = "GS"
        case gt = "GT"
        case gu = "GU"
        case gw = "GW"
        case gy = "GY"
        case hk = "HK"
        case hm = "HM"
        case hn = "HN"
        case hr = "HR"
        case ht = "HT"
        case hu = "HU"
        case id = "ID"
        case ie = "IE"
        case il = "IL"
        case im = "IM"
        case `in` = "IN"
        case io = "IO"
        case iq = "IQ"
        case ir = "IR"
        case `is` = "IS"
        case it = "IT"
        case je = "JE"
        case jm = "JM"
        case jo = "JO"
        case jp = "JP"
        case ke = "KE"
        case kg = "KG"
        case kh = "KH"
        case ki = "KI"
        case km = "KM"
        case kn = "KN"
        case kp = "KP"
        case kr = "KR"
        case kw = "KW"
        case ky = "KY"
        case kz = "KZ"
        case la = "LA"
        case lb = "LB"
        case lc = "LC"
        case li = "LI"
        case lk = "LK"
        case lr = "LR"
        case ls = "LS"
        case lt = "LT"
        case lu = "LU"
        case lv = "LV"
        case ly = "LY"
        case ma = "MA"
        case mc = "MC"
        case md = "MD"
        case me = "ME"
        case mf = "MF"
        case mg = "MG"
        case mh = "MH"
        case mk = "MK"
        case ml = "ML"
        case mm = "MM"
        case mn = "MN"
        case mo = "MO"
        case mp = "MP"
        case mq = "MQ"
        case mr = "MR"
        case ms = "MS"
        case mt = "MT"
        case mu = "MU"
        case mv = "MV"
        case mw = "MW"
        case mx = "MX"
        case my = "MY"
        case mz = "MZ"
        case na = "NA"
        case nc = "NC"
        case ne = "NE"
        case nf = "NF"
        case ng = "NG"
        case ni = "NI"
        case nl = "NL"
        case no = "NO"
        case np = "NP"
        case nr = "NR"
        case nu = "NU"
        case nz = "NZ"
        case om = "OM"
        case pa = "PA"
        case pe = "PE"
        case pf = "PF"
        case pg = "PG"
        case ph = "PH"
        case pk = "PK"
        case pl = "PL"
        case pm = "PM"
        case pn = "PN"
        case pr = "PR"
        case ps = "PS"
        case pt = "PT"
        case pw = "PW"
        case py = "PY"
        case qa = "QA"
        case re = "RE"
        case ro = "RO"
        case rs = "RS"
        case ru = "RU"
        case rw = "RW"
        case sa = "SA"
        case sb = "SB"
        case sc = "SC"
        case sd = "SD"
        case se = "SE"
        case sg = "SG"
        case sh = "SH"
        case si = "SI"
        case sj = "SJ"
        case sk = "SK"
        case sl = "SL"
        case sm = "SM"
        case sn = "SN"
        case so = "SO"
        case sr = "SR"
        case ss = "SS"
        case st = "ST"
        case sv = "SV"
        case sx = "SX"
        case sy = "SY"
        case sz = "SZ"
        case tc = "TC"
        case td = "TD"
        case tf = "TF"
        case tg = "TG"
        case th = "TH"
        case tj = "TJ"
        case tk = "TK"
        case tl = "TL"
        case tm = "TM"
        case tn = "TN"
        case to = "TO"
        case tr = "TR"
        case tt = "TT"
        case tv = "TV"
        case tw = "TW"
        case tz = "TZ"
        case ua = "UA"
        case ug = "UG"
        case um = "UM"
        case us = "US"
        case uy = "UY"
        case uz = "UZ"
        case va = "VA"
        case vc = "VC"
        case ve = "VE"
        case vg = "VG"
        case vi = "VI"
        case vn = "VN"
        case vu = "VU"
        case wf = "WF"
        case ws = "WS"
        case ye = "YE"
        case yt = "YT"
        case za = "ZA"
        case zm = "ZM"
        case zw = "ZW"
        public var description: String { return self.rawValue }
    }

    public enum IPSetDescriptorType: String, CustomStringConvertible, Codable {
        case ipv4 = "IPV4"
        case ipv6 = "IPV6"
        public var description: String { return self.rawValue }
    }

    public enum MatchFieldType: String, CustomStringConvertible, Codable {
        case allQueryArgs = "ALL_QUERY_ARGS"
        case body = "BODY"
        case header = "HEADER"
        case method = "METHOD"
        case queryString = "QUERY_STRING"
        case singleQueryArg = "SINGLE_QUERY_ARG"
        case uri = "URI"
        public var description: String { return self.rawValue }
    }

    public enum PositionalConstraint: String, CustomStringConvertible, Codable {
        case contains = "CONTAINS"
        case containsWord = "CONTAINS_WORD"
        case endsWith = "ENDS_WITH"
        case exactly = "EXACTLY"
        case startsWith = "STARTS_WITH"
        public var description: String { return self.rawValue }
    }

    public enum PredicateType: String, CustomStringConvertible, Codable {
        case bytematch = "ByteMatch"
        case geomatch = "GeoMatch"
        case ipmatch = "IPMatch"
        case regexmatch = "RegexMatch"
        case sizeconstraint = "SizeConstraint"
        case sqlinjectionmatch = "SqlInjectionMatch"
        case xssmatch = "XssMatch"
        public var description: String { return self.rawValue }
    }

    public enum RateKey: String, CustomStringConvertible, Codable {
        case ip = "IP"
        public var description: String { return self.rawValue }
    }

    public enum TextTransformation: String, CustomStringConvertible, Codable {
        case cmdLine = "CMD_LINE"
        case compressWhiteSpace = "COMPRESS_WHITE_SPACE"
        case htmlEntityDecode = "HTML_ENTITY_DECODE"
        case lowercase = "LOWERCASE"
        case none = "NONE"
        case urlDecode = "URL_DECODE"
        public var description: String { return self.rawValue }
    }

    public enum WafActionType: String, CustomStringConvertible, Codable {
        case allow = "ALLOW"
        case block = "BLOCK"
        case count = "COUNT"
        public var description: String { return self.rawValue }
    }

    public enum WafOverrideActionType: String, CustomStringConvertible, Codable {
        case count = "COUNT"
        case none = "NONE"
        public var description: String { return self.rawValue }
    }

    public enum WafRuleType: String, CustomStringConvertible, Codable {
        case group = "GROUP"
        case rateBased = "RATE_BASED"
        case regular = "REGULAR"
        public var description: String { return self.rawValue }
    }

    // MARK: Shapes

    public struct ActivatedRule: AWSEncodableShape & AWSDecodableShape {
        /// Specifies the action that CloudFront or AWS WAF takes when a web request matches the conditions in the Rule.
        /// 			Valid values for Action include the following:
        /// 			         ALLOW: CloudFront responds with the requested object.    BLOCK: CloudFront responds with an HTTP 403 (Forbidden) status code.    COUNT: AWS WAF increments a counter of requests that match the conditions in the rule and then continues to
        /// 					inspect the web request based on the remaining rules in the web ACL.
        /// 	         ActivatedRule|OverrideAction applies only when updating or adding a RuleGroup to a WebACL. In this case, you do not use ActivatedRule|Action. For all other update requests, ActivatedRule|Action is used instead of ActivatedRule|OverrideAction.
        public let action: WafAction?
        /// An array of rules to exclude from a rule group. This is applicable only when the ActivatedRule refers to a RuleGroup. Sometimes it is necessary to troubleshoot rule groups that are blocking traffic unexpectedly (false positives). One troubleshooting technique is to identify the specific rule within the rule group that is blocking the legitimate traffic and then disable (exclude) that particular rule. You can exclude rules from both your own rule groups and AWS Marketplace rule groups that have been associated with a web ACL. Specifying ExcludedRules does not remove those rules from the rule group. Rather, it changes the action for the rules to COUNT. Therefore, requests that match an ExcludedRule are counted but not blocked. The RuleGroup owner will receive COUNT metrics for each ExcludedRule. If you want to exclude rules from a rule group that is already associated with a web ACL, perform the following steps:   Use the AWS WAF logs to identify the IDs of the rules that you want to exclude. For more information about the logs, see Logging Web ACL Traffic Information.   Submit an UpdateWebACL request that has two actions:   The first action deletes the existing rule group from the web ACL. That is, in the UpdateWebACL request, the first Updates:Action should be DELETE and Updates:ActivatedRule:RuleId should be the rule group that contains the rules that you want to exclude.   The second action inserts the same rule group back in, but specifying the rules to exclude. That is, the second Updates:Action should be INSERT, Updates:ActivatedRule:RuleId should be the rule group that you just removed, and ExcludedRules should contain the rules that you want to exclude.
        public let excludedRules: [ExcludedRule]?
        /// Use the OverrideAction to test your RuleGroup. Any rule in a RuleGroup can potentially block a request. If you set the OverrideAction to None, the RuleGroup will block a request if any individual rule in the RuleGroup matches the request and is configured to block that request. However if you first want to test the RuleGroup, set the  OverrideAction to Count. The RuleGroup will then override any block action specified by individual rules contained within the group. Instead of blocking matching requests, those requests will be counted. You can view a record of counted requests using  GetSampledRequests.
        /// 	         ActivatedRule|OverrideAction applies only when updating or adding a RuleGroup to a WebACL. In this case you do not use ActivatedRule|Action.  For all other update requests, ActivatedRule|Action is used instead of ActivatedRule|OverrideAction.
        public let overrideAction: WafOverrideAction?
        /// Specifies the order in which the Rules in a WebACL are evaluated. Rules with a lower value for
        /// 			Priority are evaluated before Rules with a higher value. The value must be a unique integer. If you add multiple
        /// 			Rules to a WebACL, the values don't need to be consecutive.
        public let priority: Int
        /// The RuleId for a Rule. You use RuleId to get more information about a Rule (see GetRule),
        /// 			update a Rule (see UpdateRule), insert a Rule into a WebACL or delete a
        /// 			one from a WebACL (see UpdateWebACL), or delete a Rule from AWS WAF (see DeleteRule).
        /// 		        RuleId is returned by CreateRule and by ListRules.
        public let ruleId: String
        /// The rule type, either REGULAR, as defined by Rule, RATE_BASED, as defined by RateBasedRule, or GROUP, as defined by RuleGroup. The default is REGULAR. Although this field is optional, be aware that if you try to add a RATE_BASED rule to a web ACL without setting the type, the  UpdateWebACL request will fail because the request tries to add a REGULAR rule with the specified ID, which does not exist.
        ///
        public let type: WafRuleType?

        public init(action: WafAction? = nil, excludedRules: [ExcludedRule]? = nil, overrideAction: WafOverrideAction? = nil, priority: Int, ruleId: String, type: WafRuleType? = nil) {
            self.action = action
            self.excludedRules = excludedRules
            self.overrideAction = overrideAction
            self.priority = priority
            self.ruleId = ruleId
            self.type = type
        }

        public func validate(name: String) throws {
            try self.excludedRules?.forEach {
                try $0.validate(name: "\(name).excludedRules[]")
            }
            try self.validate(self.ruleId, name: "ruleId", parent: name, max: 128)
            try self.validate(self.ruleId, name: "ruleId", parent: name, min: 1)
            try self.validate(self.ruleId, name: "ruleId", parent: name, pattern: ".*\\S.*")
        }

        private enum CodingKeys: String, CodingKey {
            case action = "Action"
            case excludedRules = "ExcludedRules"
            case overrideAction = "OverrideAction"
            case priority = "Priority"
            case ruleId = "RuleId"
            case type = "Type"
        }
    }

    public struct ByteMatchSet: AWSDecodableShape {
        /// The ByteMatchSetId for a ByteMatchSet. You use ByteMatchSetId to get information about a
        /// 			ByteMatchSet (see GetByteMatchSet), update a ByteMatchSet (see UpdateByteMatchSet),
        /// 			insert a ByteMatchSet into a Rule or delete one from a Rule (see UpdateRule), and
        /// 			delete a ByteMatchSet from AWS WAF (see DeleteByteMatchSet).
        /// 		        ByteMatchSetId is returned by CreateByteMatchSet and by ListByteMatchSets.
        public let byteMatchSetId: String
        /// Specifies the bytes (typically a string that corresponds with ASCII characters) that you want AWS WAF to search for in web requests, the location in requests that you want AWS WAF to search, and other settings.
        public let byteMatchTuples: [ByteMatchTuple]
        /// A friendly name or description of the ByteMatchSet. You can't change Name after you create a ByteMatchSet.
        public let name: String?

        public init(byteMatchSetId: String, byteMatchTuples: [ByteMatchTuple], name: String? = nil) {
            self.byteMatchSetId = byteMatchSetId
            self.byteMatchTuples = byteMatchTuples
            self.name = name
        }

        private enum CodingKeys: String, CodingKey {
            case byteMatchSetId = "ByteMatchSetId"
            case byteMatchTuples = "ByteMatchTuples"
            case name = "Name"
        }
    }

    public struct ByteMatchSetSummary: AWSDecodableShape {
        /// The ByteMatchSetId for a ByteMatchSet. You use ByteMatchSetId to get information about a ByteMatchSet,
        /// 			update a ByteMatchSet, remove a ByteMatchSet from a Rule, and delete a ByteMatchSet from AWS WAF.
        /// 		        ByteMatchSetId is returned by CreateByteMatchSet and by ListByteMatchSets.
        public let byteMatchSetId: String
        /// A friendly name or description of the ByteMatchSet. You can't change Name after you create a ByteMatchSet.
        public let name: String

        public init(byteMatchSetId: String, name: String) {
            self.byteMatchSetId = byteMatchSetId
            self.name = name
        }

        private enum CodingKeys: String, CodingKey {
            case byteMatchSetId = "ByteMatchSetId"
            case name = "Name"
        }
    }

    public struct ByteMatchSetUpdate: AWSEncodableShape {
        /// Specifies whether to insert or delete a ByteMatchTuple.
        public let action: ChangeAction
        /// Information about the part of a web request that you want AWS WAF to inspect and the value that you want AWS WAF to search for.
        /// 			If you specify DELETE for the value of Action, the ByteMatchTuple values must
        /// 			exactly match the values in the ByteMatchTuple that you want to delete from the ByteMatchSet.
        public let byteMatchTuple: ByteMatchTuple

        public init(action: ChangeAction, byteMatchTuple: ByteMatchTuple) {
            self.action = action
            self.byteMatchTuple = byteMatchTuple
        }

        public func validate(name: String) throws {
            try self.byteMatchTuple.validate(name: "\(name).byteMatchTuple")
        }

        private enum CodingKeys: String, CodingKey {
            case action = "Action"
            case byteMatchTuple = "ByteMatchTuple"
        }
    }

    public struct ByteMatchTuple: AWSEncodableShape & AWSDecodableShape {
        /// The part of a web request that you want AWS WAF to search, such as a specified header or a query string. For more information, see
        /// 			FieldToMatch.
        public let fieldToMatch: FieldToMatch
        /// Within the portion of a web request that you want to search (for example, in the query string, if any), specify where you want AWS WAF to search. Valid values include the following:
        /// 		        CONTAINS
        /// 		       The specified part of the web request must include the value of TargetString, but the location doesn't matter.
        /// 		        CONTAINS_WORD
        /// 		       The specified part of the web request must include the value of TargetString, and
        /// 			TargetString must contain only alphanumeric characters or underscore (A-Z, a-z, 0-9, or _). In addition,
        /// 			TargetString must be a word, which means one of the following:
        /// 			         TargetString exactly matches the value of the specified part of the web request, such as the value of a
        /// 					header.    TargetString is at the beginning of the specified part of the web request and is followed by a character
        /// 					other than an alphanumeric character or underscore (_), for example, BadBot;.    TargetString is at the end of the specified part of the web request and is preceded by a character
        /// 					other than an alphanumeric character or underscore (_), for example, ;BadBot.    TargetString is in the middle of the specified part of the web request and is preceded and followed
        /// 					by characters other than alphanumeric characters or underscore (_), for example, -BadBot;.
        /// 		        EXACTLY
        /// 		       The value of the specified part of the web request must exactly match the value of TargetString.
        /// 		        STARTS_WITH
        /// 		       The value of TargetString must appear at the beginning of the specified part of the web request.
        /// 		        ENDS_WITH
        /// 		       The value of TargetString must appear at the end of the specified part of the web request.
        public let positionalConstraint: PositionalConstraint
        /// The value that you want AWS WAF to search for. AWS WAF searches for the specified string in the part of web requests that you
        /// 			specified in FieldToMatch. The maximum length of the value is 50 bytes.
        /// 		       Valid values depend on the values that you specified for FieldToMatch:
        /// 		          HEADER: The value that you want AWS WAF to search for in the request header that you specified in
        /// 				FieldToMatch, for example, the value of the User-Agent or Referer header.    METHOD: The HTTP method, which indicates the type of operation specified in the request.
        /// 				CloudFront supports the following methods: DELETE, GET, HEAD, OPTIONS,
        /// 				PATCH, POST, and PUT.    QUERY_STRING: The value that you want AWS WAF to search for in the query string, which is the part
        /// 				of a URL that appears after a ? character.    URI: The value that you want AWS WAF to search for in the part of a URL that identifies a resource,
        /// 				for example, /images/daily-ad.jpg.    BODY: The part of a request that contains any additional data that you want to send to your web server
        /// 				as the HTTP request body, such as data from a form. The request body immediately follows the request headers.
        /// 				Note that only the first 8192 bytes of the request body are forwarded to AWS WAF for inspection.
        /// 				To allow or block requests based on the length of the body, you can create a size constraint set.
        /// 				For more information, see CreateSizeConstraintSet.
        ///
        /// 		                SINGLE_QUERY_ARG: The parameter in the query string that you will inspect, such as UserName or SalesRegion. The maximum length for SINGLE_QUERY_ARG is 30 characters.
        ///
        /// 		              ALL_QUERY_ARGS: Similar to SINGLE_QUERY_ARG, but instead of inspecting a single parameter, AWS WAF inspects all parameters within the query string for the value or regex pattern that you specify in TargetString.
        ///
        ///
        /// 		       If TargetString includes alphabetic characters A-Z and a-z, note that the value is case sensitive.
        /// 		        If you're using the AWS WAF API
        /// 		       Specify a base64-encoded version of the value. The maximum length of the value before you base64-encode it is 50 bytes.
        /// 		       For example, suppose the value of Type is HEADER and the value of Data is User-Agent. If you want to search the User-Agent header for the value BadBot, you base64-encode BadBot using MIME base64-encoding and include the resulting value, QmFkQm90, in the value of TargetString.
        /// 		        If you're using the AWS CLI or one of the AWS SDKs
        /// 		       The value that you want AWS WAF to search for. The SDK automatically base64 encodes the value.
        public let targetString: Data
        /// Text transformations eliminate some of the unusual formatting that attackers use in web requests in an effort to bypass AWS WAF.
        /// 			If you specify a transformation, AWS WAF performs the transformation on FieldToMatch before inspecting it for a match. You can only specify a single type of TextTransformation.
        /// 		        CMD_LINE
        /// 		       When you're concerned that attackers are injecting an operating system command line command and using unusual formatting to disguise some or all of the command, use this option to perform the following transformations:
        /// 		         Delete the following characters: \ " ' ^   Delete spaces before the following characters: / (   Replace the following characters with a space: , ;   Replace multiple spaces with one space   Convert uppercase letters (A-Z) to lowercase (a-z)
        ///
        /// 		        COMPRESS_WHITE_SPACE
        /// 		       Use this option to replace the following characters with a space character (decimal 32):
        /// 		         \f, formfeed, decimal 12   \t, tab, decimal 9   \n, newline, decimal 10   \r, carriage return, decimal 13   \v, vertical tab, decimal 11   non-breaking space, decimal 160
        /// 		        COMPRESS_WHITE_SPACE also replaces multiple spaces with one space.
        /// 		        HTML_ENTITY_DECODE
        /// 		       Use this option to replace HTML-encoded characters with unencoded characters. HTML_ENTITY_DECODE performs
        /// 			the following operations:
        /// 		         Replaces (ampersand)quot; with "    Replaces (ampersand)nbsp; with a non-breaking space, decimal 160   Replaces (ampersand)lt; with a "less than" symbol   Replaces (ampersand)gt; with >    Replaces characters that are represented in hexadecimal format, (ampersand)#xhhhh;, with the corresponding
        /// 				characters   Replaces characters that are represented in decimal format, (ampersand)#nnnn;, with the corresponding
        /// 				characters
        /// 		        LOWERCASE
        /// 		       Use this option to convert uppercase letters (A-Z) to lowercase (a-z).
        /// 		        URL_DECODE
        /// 		       Use this option to decode a URL-encoded value.
        /// 		        NONE
        /// 		       Specify NONE if you don't want to perform any text transformations.
        public let textTransformation: TextTransformation

        public init(fieldToMatch: FieldToMatch, positionalConstraint: PositionalConstraint, targetString: Data, textTransformation: TextTransformation) {
            self.fieldToMatch = fieldToMatch
            self.positionalConstraint = positionalConstraint
            self.targetString = targetString
            self.textTransformation = textTransformation
        }

        public func validate(name: String) throws {
            try self.fieldToMatch.validate(name: "\(name).fieldToMatch")
        }

        private enum CodingKeys: String, CodingKey {
            case fieldToMatch = "FieldToMatch"
            case positionalConstraint = "PositionalConstraint"
            case targetString = "TargetString"
            case textTransformation = "TextTransformation"
        }
    }

    public struct CreateByteMatchSetRequest: AWSEncodableShape {
        /// The value returned by the most recent call to GetChangeToken.
        public let changeToken: String
        /// A friendly name or description of the ByteMatchSet. You can't change Name after you create a
        /// 			ByteMatchSet.
        public let name: String

        public init(changeToken: String, name: String) {
            self.changeToken = changeToken
            self.name = name
        }

        public func validate(name: String) throws {
            try self.validate(self.changeToken, name: "changeToken", parent: name, max: 128)
            try self.validate(self.changeToken, name: "changeToken", parent: name, min: 1)
            try self.validate(self.changeToken, name: "changeToken", parent: name, pattern: ".*\\S.*")
            try self.validate(self.name, name: "name", parent: name, max: 128)
            try self.validate(self.name, name: "name", parent: name, min: 1)
            try self.validate(self.name, name: "name", parent: name, pattern: ".*\\S.*")
        }

        private enum CodingKeys: String, CodingKey {
            case changeToken = "ChangeToken"
            case name = "Name"
        }
    }

    public struct CreateByteMatchSetResponse: AWSDecodableShape {
        /// A ByteMatchSet that contains no ByteMatchTuple objects.
        public let byteMatchSet: ByteMatchSet?
        /// The ChangeToken that you used to submit the CreateByteMatchSet request. You can also use this value
        /// 			to query the status of the request. For more information, see GetChangeTokenStatus.
        public let changeToken: String?

        public init(byteMatchSet: ByteMatchSet? = nil, changeToken: String? = nil) {
            self.byteMatchSet = byteMatchSet
            self.changeToken = changeToken
        }

        private enum CodingKeys: String, CodingKey {
            case byteMatchSet = "ByteMatchSet"
            case changeToken = "ChangeToken"
        }
    }

    public struct CreateGeoMatchSetRequest: AWSEncodableShape {
        /// The value returned by the most recent call to GetChangeToken.
        public let changeToken: String
        /// A friendly name or description of the GeoMatchSet. You can't change Name after you create the GeoMatchSet.
        public let name: String

        public init(changeToken: String, name: String) {
            self.changeToken = changeToken
            self.name = name
        }

        public func validate(name: String) throws {
            try self.validate(self.changeToken, name: "changeToken", parent: name, max: 128)
            try self.validate(self.changeToken, name: "changeToken", parent: name, min: 1)
            try self.validate(self.changeToken, name: "changeToken", parent: name, pattern: ".*\\S.*")
            try self.validate(self.name, name: "name", parent: name, max: 128)
            try self.validate(self.name, name: "name", parent: name, min: 1)
            try self.validate(self.name, name: "name", parent: name, pattern: ".*\\S.*")
        }

        private enum CodingKeys: String, CodingKey {
            case changeToken = "ChangeToken"
            case name = "Name"
        }
    }

    public struct CreateGeoMatchSetResponse: AWSDecodableShape {
        /// The ChangeToken that you used to submit the CreateGeoMatchSet request. You can also use this value
        /// 			to query the status of the request. For more information, see GetChangeTokenStatus.
        public let changeToken: String?
        /// The GeoMatchSet returned in the CreateGeoMatchSet response. The GeoMatchSet contains no GeoMatchConstraints.
        public let geoMatchSet: GeoMatchSet?

        public init(changeToken: String? = nil, geoMatchSet: GeoMatchSet? = nil) {
            self.changeToken = changeToken
            self.geoMatchSet = geoMatchSet
        }

        private enum CodingKeys: String, CodingKey {
            case changeToken = "ChangeToken"
            case geoMatchSet = "GeoMatchSet"
        }
    }

    public struct CreateIPSetRequest: AWSEncodableShape {
        /// The value returned by the most recent call to GetChangeToken.
        public let changeToken: String
        /// A friendly name or description of the IPSet. You can't change Name after you create the IPSet.
        public let name: String

        public init(changeToken: String, name: String) {
            self.changeToken = changeToken
            self.name = name
        }

        public func validate(name: String) throws {
            try self.validate(self.changeToken, name: "changeToken", parent: name, max: 128)
            try self.validate(self.changeToken, name: "changeToken", parent: name, min: 1)
            try self.validate(self.changeToken, name: "changeToken", parent: name, pattern: ".*\\S.*")
            try self.validate(self.name, name: "name", parent: name, max: 128)
            try self.validate(self.name, name: "name", parent: name, min: 1)
            try self.validate(self.name, name: "name", parent: name, pattern: ".*\\S.*")
        }

        private enum CodingKeys: String, CodingKey {
            case changeToken = "ChangeToken"
            case name = "Name"
        }
    }

    public struct CreateIPSetResponse: AWSDecodableShape {
        /// The ChangeToken that you used to submit the CreateIPSet request. You can also use this value
        /// 			to query the status of the request. For more information, see GetChangeTokenStatus.
        public let changeToken: String?
        /// The IPSet returned in the CreateIPSet response.
        public let iPSet: IPSet?

        public init(changeToken: String? = nil, iPSet: IPSet? = nil) {
            self.changeToken = changeToken
            self.iPSet = iPSet
        }

        private enum CodingKeys: String, CodingKey {
            case changeToken = "ChangeToken"
            case iPSet = "IPSet"
        }
    }

    public struct CreateRateBasedRuleRequest: AWSEncodableShape {
        /// The ChangeToken that you used to submit the CreateRateBasedRule request. You can also use this value to query the status of the request. For more information, see GetChangeTokenStatus.
        public let changeToken: String
        /// A friendly name or description for the metrics for this RateBasedRule. The name can contain only alphanumeric characters (A-Z, a-z, 0-9), with maximum length 128 and minimum length one. It can't contain whitespace or metric names reserved for AWS WAF, including "All" and "Default_Action." You can't change the name of the metric after you create the RateBasedRule.
        public let metricName: String
        /// A friendly name or description of the RateBasedRule. You can't change the name of a RateBasedRule after you create it.
        public let name: String
        /// The field that AWS WAF uses to determine if requests are likely arriving from a single source and thus subject to rate monitoring. The only valid value for RateKey is IP. IP indicates that requests that arrive from the same IP address are subject to the RateLimit that is specified in the RateBasedRule.
        public let rateKey: RateKey
        /// The maximum number of requests, which have an identical value in the field that is specified by RateKey, allowed in a five-minute period. If the number of requests exceeds the RateLimit and the other predicates specified in the rule are also met, AWS WAF triggers the action that is specified for this rule.
        public let rateLimit: Int64
        public let tags: [Tag]?

        public init(changeToken: String, metricName: String, name: String, rateKey: RateKey, rateLimit: Int64, tags: [Tag]? = nil) {
            self.changeToken = changeToken
            self.metricName = metricName
            self.name = name
            self.rateKey = rateKey
            self.rateLimit = rateLimit
            self.tags = tags
        }

        public func validate(name: String) throws {
            try self.validate(self.changeToken, name: "changeToken", parent: name, max: 128)
            try self.validate(self.changeToken, name: "changeToken", parent: name, min: 1)
            try self.validate(self.changeToken, name: "changeToken", parent: name, pattern: ".*\\S.*")
            try self.validate(self.metricName, name: "metricName", parent: name, max: 128)
            try self.validate(self.metricName, name: "metricName", parent: name, min: 1)
            try self.validate(self.metricName, name: "metricName", parent: name, pattern: ".*\\S.*")
            try self.validate(self.name, name: "name", parent: name, max: 128)
            try self.validate(self.name, name: "name", parent: name, min: 1)
            try self.validate(self.name, name: "name", parent: name, pattern: ".*\\S.*")
            try self.validate(self.rateLimit, name: "rateLimit", parent: name, max: 2_000_000_000)
            try self.validate(self.rateLimit, name: "rateLimit", parent: name, min: 100)
            try self.tags?.forEach {
                try $0.validate(name: "\(name).tags[]")
            }
            try self.validate(self.tags, name: "tags", parent: name, min: 1)
        }

        private enum CodingKeys: String, CodingKey {
            case changeToken = "ChangeToken"
            case metricName = "MetricName"
            case name = "Name"
            case rateKey = "RateKey"
            case rateLimit = "RateLimit"
            case tags = "Tags"
        }
    }

    public struct CreateRateBasedRuleResponse: AWSDecodableShape {
        /// The ChangeToken that you used to submit the CreateRateBasedRule request. You can also use this value to query the status of the request. For more information, see GetChangeTokenStatus.
        public let changeToken: String?
        /// The RateBasedRule that is returned in the CreateRateBasedRule response.
        public let rule: RateBasedRule?

        public init(changeToken: String? = nil, rule: RateBasedRule? = nil) {
            self.changeToken = changeToken
            self.rule = rule
        }

        private enum CodingKeys: String, CodingKey {
            case changeToken = "ChangeToken"
            case rule = "Rule"
        }
    }

    public struct CreateRegexMatchSetRequest: AWSEncodableShape {
        /// The value returned by the most recent call to GetChangeToken.
        public let changeToken: String
        /// A friendly name or description of the RegexMatchSet. You can't change Name after you create a
        /// 			RegexMatchSet.
        public let name: String

        public init(changeToken: String, name: String) {
            self.changeToken = changeToken
            self.name = name
        }

        public func validate(name: String) throws {
            try self.validate(self.changeToken, name: "changeToken", parent: name, max: 128)
            try self.validate(self.changeToken, name: "changeToken", parent: name, min: 1)
            try self.validate(self.changeToken, name: "changeToken", parent: name, pattern: ".*\\S.*")
            try self.validate(self.name, name: "name", parent: name, max: 128)
            try self.validate(self.name, name: "name", parent: name, min: 1)
            try self.validate(self.name, name: "name", parent: name, pattern: ".*\\S.*")
        }

        private enum CodingKeys: String, CodingKey {
            case changeToken = "ChangeToken"
            case name = "Name"
        }
    }

    public struct CreateRegexMatchSetResponse: AWSDecodableShape {
        /// The ChangeToken that you used to submit the CreateRegexMatchSet request. You can also use this value
        /// 			to query the status of the request. For more information, see GetChangeTokenStatus.
        public let changeToken: String?
        /// A RegexMatchSet that contains no RegexMatchTuple objects.
        public let regexMatchSet: RegexMatchSet?

        public init(changeToken: String? = nil, regexMatchSet: RegexMatchSet? = nil) {
            self.changeToken = changeToken
            self.regexMatchSet = regexMatchSet
        }

        private enum CodingKeys: String, CodingKey {
            case changeToken = "ChangeToken"
            case regexMatchSet = "RegexMatchSet"
        }
    }

    public struct CreateRegexPatternSetRequest: AWSEncodableShape {
        /// The value returned by the most recent call to GetChangeToken.
        public let changeToken: String
        /// A friendly name or description of the RegexPatternSet. You can't change Name after you create a
        /// 			RegexPatternSet.
        public let name: String

        public init(changeToken: String, name: String) {
            self.changeToken = changeToken
            self.name = name
        }

        public func validate(name: String) throws {
            try self.validate(self.changeToken, name: "changeToken", parent: name, max: 128)
            try self.validate(self.changeToken, name: "changeToken", parent: name, min: 1)
            try self.validate(self.changeToken, name: "changeToken", parent: name, pattern: ".*\\S.*")
            try self.validate(self.name, name: "name", parent: name, max: 128)
            try self.validate(self.name, name: "name", parent: name, min: 1)
            try self.validate(self.name, name: "name", parent: name, pattern: ".*\\S.*")
        }

        private enum CodingKeys: String, CodingKey {
            case changeToken = "ChangeToken"
            case name = "Name"
        }
    }

    public struct CreateRegexPatternSetResponse: AWSDecodableShape {
        /// The ChangeToken that you used to submit the CreateRegexPatternSet request. You can also use this value
        /// 			to query the status of the request. For more information, see GetChangeTokenStatus.
        public let changeToken: String?
        /// A RegexPatternSet that contains no objects.
        public let regexPatternSet: RegexPatternSet?

        public init(changeToken: String? = nil, regexPatternSet: RegexPatternSet? = nil) {
            self.changeToken = changeToken
            self.regexPatternSet = regexPatternSet
        }

        private enum CodingKeys: String, CodingKey {
            case changeToken = "ChangeToken"
            case regexPatternSet = "RegexPatternSet"
        }
    }

    public struct CreateRuleGroupRequest: AWSEncodableShape {
        /// The value returned by the most recent call to GetChangeToken.
        public let changeToken: String
        /// A friendly name or description for the metrics for this RuleGroup. The name can contain only alphanumeric characters (A-Z, a-z, 0-9), with maximum length 128 and minimum length one. It can't contain whitespace or metric names reserved for AWS WAF, including "All" and "Default_Action." You can't change the name of the metric after you create the RuleGroup.
        public let metricName: String
        /// A friendly name or description of the RuleGroup. You can't change Name after you create a  RuleGroup.
        public let name: String
        public let tags: [Tag]?

        public init(changeToken: String, metricName: String, name: String, tags: [Tag]? = nil) {
            self.changeToken = changeToken
            self.metricName = metricName
            self.name = name
            self.tags = tags
        }

        public func validate(name: String) throws {
            try self.validate(self.changeToken, name: "changeToken", parent: name, max: 128)
            try self.validate(self.changeToken, name: "changeToken", parent: name, min: 1)
            try self.validate(self.changeToken, name: "changeToken", parent: name, pattern: ".*\\S.*")
            try self.validate(self.metricName, name: "metricName", parent: name, max: 128)
            try self.validate(self.metricName, name: "metricName", parent: name, min: 1)
            try self.validate(self.metricName, name: "metricName", parent: name, pattern: ".*\\S.*")
            try self.validate(self.name, name: "name", parent: name, max: 128)
            try self.validate(self.name, name: "name", parent: name, min: 1)
            try self.validate(self.name, name: "name", parent: name, pattern: ".*\\S.*")
            try self.tags?.forEach {
                try $0.validate(name: "\(name).tags[]")
            }
            try self.validate(self.tags, name: "tags", parent: name, min: 1)
        }

        private enum CodingKeys: String, CodingKey {
            case changeToken = "ChangeToken"
            case metricName = "MetricName"
            case name = "Name"
            case tags = "Tags"
        }
    }

    public struct CreateRuleGroupResponse: AWSDecodableShape {
        /// The ChangeToken that you used to submit the CreateRuleGroup request. You can also use this value  to query the status of the request. For more information, see GetChangeTokenStatus.
        public let changeToken: String?
        /// An empty  RuleGroup.
        public let ruleGroup: RuleGroup?

        public init(changeToken: String? = nil, ruleGroup: RuleGroup? = nil) {
            self.changeToken = changeToken
            self.ruleGroup = ruleGroup
        }

        private enum CodingKeys: String, CodingKey {
            case changeToken = "ChangeToken"
            case ruleGroup = "RuleGroup"
        }
    }

    public struct CreateRuleRequest: AWSEncodableShape {
        /// The value returned by the most recent call to GetChangeToken.
        public let changeToken: String
        /// A friendly name or description for the metrics for this Rule. The name can contain only alphanumeric characters (A-Z, a-z, 0-9), with maximum length 128 and minimum length one. It can't contain
        /// 	        whitespace or metric names reserved for AWS WAF, including "All" and "Default_Action." You can't change the name of the metric after you create the Rule.
        public let metricName: String
        /// A friendly name or description of the Rule. You can't change the name of a Rule after you create it.
        public let name: String
        public let tags: [Tag]?

        public init(changeToken: String, metricName: String, name: String, tags: [Tag]? = nil) {
            self.changeToken = changeToken
            self.metricName = metricName
            self.name = name
            self.tags = tags
        }

        public func validate(name: String) throws {
            try self.validate(self.changeToken, name: "changeToken", parent: name, max: 128)
            try self.validate(self.changeToken, name: "changeToken", parent: name, min: 1)
            try self.validate(self.changeToken, name: "changeToken", parent: name, pattern: ".*\\S.*")
            try self.validate(self.metricName, name: "metricName", parent: name, max: 128)
            try self.validate(self.metricName, name: "metricName", parent: name, min: 1)
            try self.validate(self.metricName, name: "metricName", parent: name, pattern: ".*\\S.*")
            try self.validate(self.name, name: "name", parent: name, max: 128)
            try self.validate(self.name, name: "name", parent: name, min: 1)
            try self.validate(self.name, name: "name", parent: name, pattern: ".*\\S.*")
            try self.tags?.forEach {
                try $0.validate(name: "\(name).tags[]")
            }
            try self.validate(self.tags, name: "tags", parent: name, min: 1)
        }

        private enum CodingKeys: String, CodingKey {
            case changeToken = "ChangeToken"
            case metricName = "MetricName"
            case name = "Name"
            case tags = "Tags"
        }
    }

    public struct CreateRuleResponse: AWSDecodableShape {
        /// The ChangeToken that you used to submit the CreateRule request. You can also use this value
        /// 			to query the status of the request. For more information, see GetChangeTokenStatus.
        public let changeToken: String?
        /// The Rule returned in the CreateRule response.
        public let rule: Rule?

        public init(changeToken: String? = nil, rule: Rule? = nil) {
            self.changeToken = changeToken
            self.rule = rule
        }

        private enum CodingKeys: String, CodingKey {
            case changeToken = "ChangeToken"
            case rule = "Rule"
        }
    }

    public struct CreateSizeConstraintSetRequest: AWSEncodableShape {
        /// The value returned by the most recent call to GetChangeToken.
        public let changeToken: String
        /// A friendly name or description of the SizeConstraintSet. You can't change Name after you create a
        /// 			SizeConstraintSet.
        public let name: String

        public init(changeToken: String, name: String) {
            self.changeToken = changeToken
            self.name = name
        }

        public func validate(name: String) throws {
            try self.validate(self.changeToken, name: "changeToken", parent: name, max: 128)
            try self.validate(self.changeToken, name: "changeToken", parent: name, min: 1)
            try self.validate(self.changeToken, name: "changeToken", parent: name, pattern: ".*\\S.*")
            try self.validate(self.name, name: "name", parent: name, max: 128)
            try self.validate(self.name, name: "name", parent: name, min: 1)
            try self.validate(self.name, name: "name", parent: name, pattern: ".*\\S.*")
        }

        private enum CodingKeys: String, CodingKey {
            case changeToken = "ChangeToken"
            case name = "Name"
        }
    }

    public struct CreateSizeConstraintSetResponse: AWSDecodableShape {
        /// The ChangeToken that you used to submit the CreateSizeConstraintSet request. You can also use this value
        /// 			to query the status of the request. For more information, see GetChangeTokenStatus.
        public let changeToken: String?
        /// A SizeConstraintSet that contains no SizeConstraint objects.
        public let sizeConstraintSet: SizeConstraintSet?

        public init(changeToken: String? = nil, sizeConstraintSet: SizeConstraintSet? = nil) {
            self.changeToken = changeToken
            self.sizeConstraintSet = sizeConstraintSet
        }

        private enum CodingKeys: String, CodingKey {
            case changeToken = "ChangeToken"
            case sizeConstraintSet = "SizeConstraintSet"
        }
    }

    public struct CreateSqlInjectionMatchSetRequest: AWSEncodableShape {
        /// The value returned by the most recent call to GetChangeToken.
        public let changeToken: String
        /// A friendly name or description for the SqlInjectionMatchSet that you're creating. You can't change Name
        /// 			after you create the SqlInjectionMatchSet.
        public let name: String

        public init(changeToken: String, name: String) {
            self.changeToken = changeToken
            self.name = name
        }

        public func validate(name: String) throws {
            try self.validate(self.changeToken, name: "changeToken", parent: name, max: 128)
            try self.validate(self.changeToken, name: "changeToken", parent: name, min: 1)
            try self.validate(self.changeToken, name: "changeToken", parent: name, pattern: ".*\\S.*")
            try self.validate(self.name, name: "name", parent: name, max: 128)
            try self.validate(self.name, name: "name", parent: name, min: 1)
            try self.validate(self.name, name: "name", parent: name, pattern: ".*\\S.*")
        }

        private enum CodingKeys: String, CodingKey {
            case changeToken = "ChangeToken"
            case name = "Name"
        }
    }

    public struct CreateSqlInjectionMatchSetResponse: AWSDecodableShape {
        /// The ChangeToken that you used to submit the CreateSqlInjectionMatchSet request. You can also use this value
        /// 			to query the status of the request. For more information, see GetChangeTokenStatus.
        public let changeToken: String?
        /// A SqlInjectionMatchSet.
        public let sqlInjectionMatchSet: SqlInjectionMatchSet?

        public init(changeToken: String? = nil, sqlInjectionMatchSet: SqlInjectionMatchSet? = nil) {
            self.changeToken = changeToken
            self.sqlInjectionMatchSet = sqlInjectionMatchSet
        }

        private enum CodingKeys: String, CodingKey {
            case changeToken = "ChangeToken"
            case sqlInjectionMatchSet = "SqlInjectionMatchSet"
        }
    }

    public struct CreateWebACLMigrationStackRequest: AWSEncodableShape {
        /// Indicates whether to exclude entities that can't be migrated or to stop the migration. Set this to true to ignore unsupported entities in the web ACL during the migration. Otherwise, if AWS WAF encounters unsupported  entities, it stops the process and throws an exception.
        public let ignoreUnsupportedType: Bool
        /// The name of the Amazon S3 bucket to store the CloudFormation template in. The S3 bucket must be  configured as follows for the migration:     The bucket name must start with aws-waf-migration-. For example, aws-waf-migration-my-web-acl.   The bucket must be in the Region where you are deploying the template. For example, for a web ACL in us-west-2, you must use an Amazon S3 bucket in us-west-2 and you must deploy the template stack to us-west-2.    The bucket policies must permit the migration process to write data. For listings of the  bucket policies, see the Examples section.
        public let s3BucketName: String
        /// The UUID of the WAF Classic web ACL that you want to migrate to WAF v2.
        public let webACLId: String

        public init(ignoreUnsupportedType: Bool, s3BucketName: String, webACLId: String) {
            self.ignoreUnsupportedType = ignoreUnsupportedType
            self.s3BucketName = s3BucketName
            self.webACLId = webACLId
        }

        public func validate(name: String) throws {
            try self.validate(self.s3BucketName, name: "s3BucketName", parent: name, max: 63)
            try self.validate(self.s3BucketName, name: "s3BucketName", parent: name, min: 3)
            try self.validate(self.s3BucketName, name: "s3BucketName", parent: name, pattern: "^aws-waf-migration-[0-9A-Za-z\\.\\-_]*")
            try self.validate(self.webACLId, name: "webACLId", parent: name, max: 128)
            try self.validate(self.webACLId, name: "webACLId", parent: name, min: 1)
            try self.validate(self.webACLId, name: "webACLId", parent: name, pattern: ".*\\S.*")
        }

        private enum CodingKeys: String, CodingKey {
            case ignoreUnsupportedType = "IgnoreUnsupportedType"
            case s3BucketName = "S3BucketName"
            case webACLId = "WebACLId"
        }
    }

    public struct CreateWebACLMigrationStackResponse: AWSDecodableShape {
        /// The URL of the template created in Amazon S3.
        public let s3ObjectUrl: String

        public init(s3ObjectUrl: String) {
            self.s3ObjectUrl = s3ObjectUrl
        }

        private enum CodingKeys: String, CodingKey {
            case s3ObjectUrl = "S3ObjectUrl"
        }
    }

    public struct CreateWebACLRequest: AWSEncodableShape {
        /// The value returned by the most recent call to GetChangeToken.
        public let changeToken: String
        /// The action that you want  AWS WAF to take when a request doesn't match the criteria specified in any of the Rule
        /// 			objects that are associated with the WebACL.
        public let defaultAction: WafAction
        /// A friendly name or description for the metrics for this WebACL.The name can contain only alphanumeric characters (A-Z, a-z, 0-9), with maximum length 128 and minimum length one. It can't contain
        /// 	        whitespace or metric names reserved for AWS WAF, including "All" and "Default_Action." You can't change MetricName after you create the WebACL.
        public let metricName: String
        /// A friendly name or description of the WebACL. You can't change Name after you create the WebACL.
        public let name: String
        public let tags: [Tag]?

        public init(changeToken: String, defaultAction: WafAction, metricName: String, name: String, tags: [Tag]? = nil) {
            self.changeToken = changeToken
            self.defaultAction = defaultAction
            self.metricName = metricName
            self.name = name
            self.tags = tags
        }

        public func validate(name: String) throws {
            try self.validate(self.changeToken, name: "changeToken", parent: name, max: 128)
            try self.validate(self.changeToken, name: "changeToken", parent: name, min: 1)
            try self.validate(self.changeToken, name: "changeToken", parent: name, pattern: ".*\\S.*")
            try self.validate(self.metricName, name: "metricName", parent: name, max: 128)
            try self.validate(self.metricName, name: "metricName", parent: name, min: 1)
            try self.validate(self.metricName, name: "metricName", parent: name, pattern: ".*\\S.*")
            try self.validate(self.name, name: "name", parent: name, max: 128)
            try self.validate(self.name, name: "name", parent: name, min: 1)
            try self.validate(self.name, name: "name", parent: name, pattern: ".*\\S.*")
            try self.tags?.forEach {
                try $0.validate(name: "\(name).tags[]")
            }
            try self.validate(self.tags, name: "tags", parent: name, min: 1)
        }

        private enum CodingKeys: String, CodingKey {
            case changeToken = "ChangeToken"
            case defaultAction = "DefaultAction"
            case metricName = "MetricName"
            case name = "Name"
            case tags = "Tags"
        }
    }

    public struct CreateWebACLResponse: AWSDecodableShape {
        /// The ChangeToken that you used to submit the CreateWebACL request. You can also use this value
        /// 			to query the status of the request. For more information, see GetChangeTokenStatus.
        public let changeToken: String?
        /// The WebACL returned in the CreateWebACL response.
        public let webACL: WebACL?

        public init(changeToken: String? = nil, webACL: WebACL? = nil) {
            self.changeToken = changeToken
            self.webACL = webACL
        }

        private enum CodingKeys: String, CodingKey {
            case changeToken = "ChangeToken"
            case webACL = "WebACL"
        }
    }

    public struct CreateXssMatchSetRequest: AWSEncodableShape {
        /// The value returned by the most recent call to GetChangeToken.
        public let changeToken: String
        /// A friendly name or description for the XssMatchSet that you're creating. You can't change Name
        /// 			after you create the XssMatchSet.
        public let name: String

        public init(changeToken: String, name: String) {
            self.changeToken = changeToken
            self.name = name
        }

        public func validate(name: String) throws {
            try self.validate(self.changeToken, name: "changeToken", parent: name, max: 128)
            try self.validate(self.changeToken, name: "changeToken", parent: name, min: 1)
            try self.validate(self.changeToken, name: "changeToken", parent: name, pattern: ".*\\S.*")
            try self.validate(self.name, name: "name", parent: name, max: 128)
            try self.validate(self.name, name: "name", parent: name, min: 1)
            try self.validate(self.name, name: "name", parent: name, pattern: ".*\\S.*")
        }

        private enum CodingKeys: String, CodingKey {
            case changeToken = "ChangeToken"
            case name = "Name"
        }
    }

    public struct CreateXssMatchSetResponse: AWSDecodableShape {
        /// The ChangeToken that you used to submit the CreateXssMatchSet request. You can also use this value
        /// 			to query the status of the request. For more information, see GetChangeTokenStatus.
        public let changeToken: String?
        /// An XssMatchSet.
        public let xssMatchSet: XssMatchSet?

        public init(changeToken: String? = nil, xssMatchSet: XssMatchSet? = nil) {
            self.changeToken = changeToken
            self.xssMatchSet = xssMatchSet
        }

        private enum CodingKeys: String, CodingKey {
            case changeToken = "ChangeToken"
            case xssMatchSet = "XssMatchSet"
        }
    }

    public struct DeleteByteMatchSetRequest: AWSEncodableShape {
        /// The ByteMatchSetId of the ByteMatchSet that you want to delete. ByteMatchSetId is returned by CreateByteMatchSet and by
        /// 			ListByteMatchSets.
        public let byteMatchSetId: String
        /// The value returned by the most recent call to GetChangeToken.
        public let changeToken: String

        public init(byteMatchSetId: String, changeToken: String) {
            self.byteMatchSetId = byteMatchSetId
            self.changeToken = changeToken
        }

        public func validate(name: String) throws {
            try self.validate(self.byteMatchSetId, name: "byteMatchSetId", parent: name, max: 128)
            try self.validate(self.byteMatchSetId, name: "byteMatchSetId", parent: name, min: 1)
            try self.validate(self.byteMatchSetId, name: "byteMatchSetId", parent: name, pattern: ".*\\S.*")
            try self.validate(self.changeToken, name: "changeToken", parent: name, max: 128)
            try self.validate(self.changeToken, name: "changeToken", parent: name, min: 1)
            try self.validate(self.changeToken, name: "changeToken", parent: name, pattern: ".*\\S.*")
        }

        private enum CodingKeys: String, CodingKey {
            case byteMatchSetId = "ByteMatchSetId"
            case changeToken = "ChangeToken"
        }
    }

    public struct DeleteByteMatchSetResponse: AWSDecodableShape {
        /// The ChangeToken that you used to submit the DeleteByteMatchSet request. You can also use this value
        /// 			to query the status of the request. For more information, see GetChangeTokenStatus.
        public let changeToken: String?

        public init(changeToken: String? = nil) {
            self.changeToken = changeToken
        }

        private enum CodingKeys: String, CodingKey {
            case changeToken = "ChangeToken"
        }
    }

    public struct DeleteGeoMatchSetRequest: AWSEncodableShape {
        /// The value returned by the most recent call to GetChangeToken.
        public let changeToken: String
        /// The GeoMatchSetID of the GeoMatchSet that you want to delete. GeoMatchSetId is returned by CreateGeoMatchSet and by
        /// 			ListGeoMatchSets.
        public let geoMatchSetId: String

        public init(changeToken: String, geoMatchSetId: String) {
            self.changeToken = changeToken
            self.geoMatchSetId = geoMatchSetId
        }

        public func validate(name: String) throws {
            try self.validate(self.changeToken, name: "changeToken", parent: name, max: 128)
            try self.validate(self.changeToken, name: "changeToken", parent: name, min: 1)
            try self.validate(self.changeToken, name: "changeToken", parent: name, pattern: ".*\\S.*")
            try self.validate(self.geoMatchSetId, name: "geoMatchSetId", parent: name, max: 128)
            try self.validate(self.geoMatchSetId, name: "geoMatchSetId", parent: name, min: 1)
            try self.validate(self.geoMatchSetId, name: "geoMatchSetId", parent: name, pattern: ".*\\S.*")
        }

        private enum CodingKeys: String, CodingKey {
            case changeToken = "ChangeToken"
            case geoMatchSetId = "GeoMatchSetId"
        }
    }

    public struct DeleteGeoMatchSetResponse: AWSDecodableShape {
        /// The ChangeToken that you used to submit the DeleteGeoMatchSet request. You can also use this value
        /// 			to query the status of the request. For more information, see GetChangeTokenStatus.
        public let changeToken: String?

        public init(changeToken: String? = nil) {
            self.changeToken = changeToken
        }

        private enum CodingKeys: String, CodingKey {
            case changeToken = "ChangeToken"
        }
    }

    public struct DeleteIPSetRequest: AWSEncodableShape {
        /// The value returned by the most recent call to GetChangeToken.
        public let changeToken: String
        /// The IPSetId of the IPSet that you want to delete. IPSetId is returned by CreateIPSet and by
        /// 			ListIPSets.
        public let iPSetId: String

        public init(changeToken: String, iPSetId: String) {
            self.changeToken = changeToken
            self.iPSetId = iPSetId
        }

        public func validate(name: String) throws {
            try self.validate(self.changeToken, name: "changeToken", parent: name, max: 128)
            try self.validate(self.changeToken, name: "changeToken", parent: name, min: 1)
            try self.validate(self.changeToken, name: "changeToken", parent: name, pattern: ".*\\S.*")
            try self.validate(self.iPSetId, name: "iPSetId", parent: name, max: 128)
            try self.validate(self.iPSetId, name: "iPSetId", parent: name, min: 1)
            try self.validate(self.iPSetId, name: "iPSetId", parent: name, pattern: ".*\\S.*")
        }

        private enum CodingKeys: String, CodingKey {
            case changeToken = "ChangeToken"
            case iPSetId = "IPSetId"
        }
    }

    public struct DeleteIPSetResponse: AWSDecodableShape {
        /// The ChangeToken that you used to submit the DeleteIPSet request. You can also use this value
        /// 			to query the status of the request. For more information, see GetChangeTokenStatus.
        public let changeToken: String?

        public init(changeToken: String? = nil) {
            self.changeToken = changeToken
        }

        private enum CodingKeys: String, CodingKey {
            case changeToken = "ChangeToken"
        }
    }

    public struct DeleteLoggingConfigurationRequest: AWSEncodableShape {
        /// The Amazon Resource Name (ARN) of the web ACL from which you want to delete the LoggingConfiguration.
        public let resourceArn: String

        public init(resourceArn: String) {
            self.resourceArn = resourceArn
        }

        public func validate(name: String) throws {
            try self.validate(self.resourceArn, name: "resourceArn", parent: name, max: 1224)
            try self.validate(self.resourceArn, name: "resourceArn", parent: name, min: 1)
            try self.validate(self.resourceArn, name: "resourceArn", parent: name, pattern: ".*\\S.*")
        }

        private enum CodingKeys: String, CodingKey {
            case resourceArn = "ResourceArn"
        }
    }

    public struct DeleteLoggingConfigurationResponse: AWSDecodableShape {
        public init() {}
    }

    public struct DeletePermissionPolicyRequest: AWSEncodableShape {
        /// The Amazon Resource Name (ARN) of the RuleGroup from which you want to delete the policy. The user making the request must be the owner of the RuleGroup.
        public let resourceArn: String

        public init(resourceArn: String) {
            self.resourceArn = resourceArn
        }

        public func validate(name: String) throws {
            try self.validate(self.resourceArn, name: "resourceArn", parent: name, max: 1224)
            try self.validate(self.resourceArn, name: "resourceArn", parent: name, min: 1)
            try self.validate(self.resourceArn, name: "resourceArn", parent: name, pattern: ".*\\S.*")
        }

        private enum CodingKeys: String, CodingKey {
            case resourceArn = "ResourceArn"
        }
    }

    public struct DeletePermissionPolicyResponse: AWSDecodableShape {
        public init() {}
    }

    public struct DeleteRateBasedRuleRequest: AWSEncodableShape {
        /// The value returned by the most recent call to GetChangeToken.
        public let changeToken: String
        /// The RuleId of the RateBasedRule that you want to delete. RuleId is returned by CreateRateBasedRule and by ListRateBasedRules.
        public let ruleId: String

        public init(changeToken: String, ruleId: String) {
            self.changeToken = changeToken
            self.ruleId = ruleId
        }

        public func validate(name: String) throws {
            try self.validate(self.changeToken, name: "changeToken", parent: name, max: 128)
            try self.validate(self.changeToken, name: "changeToken", parent: name, min: 1)
            try self.validate(self.changeToken, name: "changeToken", parent: name, pattern: ".*\\S.*")
            try self.validate(self.ruleId, name: "ruleId", parent: name, max: 128)
            try self.validate(self.ruleId, name: "ruleId", parent: name, min: 1)
            try self.validate(self.ruleId, name: "ruleId", parent: name, pattern: ".*\\S.*")
        }

        private enum CodingKeys: String, CodingKey {
            case changeToken = "ChangeToken"
            case ruleId = "RuleId"
        }
    }

    public struct DeleteRateBasedRuleResponse: AWSDecodableShape {
        /// The ChangeToken that you used to submit the DeleteRateBasedRule request. You can also use this value to query the status of the request. For more information, see GetChangeTokenStatus.
        public let changeToken: String?

        public init(changeToken: String? = nil) {
            self.changeToken = changeToken
        }

        private enum CodingKeys: String, CodingKey {
            case changeToken = "ChangeToken"
        }
    }

    public struct DeleteRegexMatchSetRequest: AWSEncodableShape {
        /// The value returned by the most recent call to GetChangeToken.
        public let changeToken: String
        /// The RegexMatchSetId of the RegexMatchSet that you want to delete. RegexMatchSetId is returned by CreateRegexMatchSet and by
        /// 			ListRegexMatchSets.
        public let regexMatchSetId: String

        public init(changeToken: String, regexMatchSetId: String) {
            self.changeToken = changeToken
            self.regexMatchSetId = regexMatchSetId
        }

        public func validate(name: String) throws {
            try self.validate(self.changeToken, name: "changeToken", parent: name, max: 128)
            try self.validate(self.changeToken, name: "changeToken", parent: name, min: 1)
            try self.validate(self.changeToken, name: "changeToken", parent: name, pattern: ".*\\S.*")
            try self.validate(self.regexMatchSetId, name: "regexMatchSetId", parent: name, max: 128)
            try self.validate(self.regexMatchSetId, name: "regexMatchSetId", parent: name, min: 1)
            try self.validate(self.regexMatchSetId, name: "regexMatchSetId", parent: name, pattern: ".*\\S.*")
        }

        private enum CodingKeys: String, CodingKey {
            case changeToken = "ChangeToken"
            case regexMatchSetId = "RegexMatchSetId"
        }
    }

    public struct DeleteRegexMatchSetResponse: AWSDecodableShape {
        /// The ChangeToken that you used to submit the DeleteRegexMatchSet request. You can also use this value
        /// 			to query the status of the request. For more information, see GetChangeTokenStatus.
        public let changeToken: String?

        public init(changeToken: String? = nil) {
            self.changeToken = changeToken
        }

        private enum CodingKeys: String, CodingKey {
            case changeToken = "ChangeToken"
        }
    }

    public struct DeleteRegexPatternSetRequest: AWSEncodableShape {
        /// The value returned by the most recent call to GetChangeToken.
        public let changeToken: String
        /// The RegexPatternSetId of the RegexPatternSet that you want to delete. RegexPatternSetId is returned by CreateRegexPatternSet and by
        /// 			ListRegexPatternSets.
        public let regexPatternSetId: String

        public init(changeToken: String, regexPatternSetId: String) {
            self.changeToken = changeToken
            self.regexPatternSetId = regexPatternSetId
        }

        public func validate(name: String) throws {
            try self.validate(self.changeToken, name: "changeToken", parent: name, max: 128)
            try self.validate(self.changeToken, name: "changeToken", parent: name, min: 1)
            try self.validate(self.changeToken, name: "changeToken", parent: name, pattern: ".*\\S.*")
            try self.validate(self.regexPatternSetId, name: "regexPatternSetId", parent: name, max: 128)
            try self.validate(self.regexPatternSetId, name: "regexPatternSetId", parent: name, min: 1)
            try self.validate(self.regexPatternSetId, name: "regexPatternSetId", parent: name, pattern: ".*\\S.*")
        }

        private enum CodingKeys: String, CodingKey {
            case changeToken = "ChangeToken"
            case regexPatternSetId = "RegexPatternSetId"
        }
    }

    public struct DeleteRegexPatternSetResponse: AWSDecodableShape {
        /// The ChangeToken that you used to submit the DeleteRegexPatternSet request. You can also use this value
        /// 			to query the status of the request. For more information, see GetChangeTokenStatus.
        public let changeToken: String?

        public init(changeToken: String? = nil) {
            self.changeToken = changeToken
        }

        private enum CodingKeys: String, CodingKey {
            case changeToken = "ChangeToken"
        }
    }

    public struct DeleteRuleGroupRequest: AWSEncodableShape {
        /// The value returned by the most recent call to GetChangeToken.
        public let changeToken: String
        /// The RuleGroupId of the RuleGroup that you want to delete. RuleGroupId is returned by CreateRuleGroup and by  ListRuleGroups.
        public let ruleGroupId: String

        public init(changeToken: String, ruleGroupId: String) {
            self.changeToken = changeToken
            self.ruleGroupId = ruleGroupId
        }

        public func validate(name: String) throws {
            try self.validate(self.changeToken, name: "changeToken", parent: name, max: 128)
            try self.validate(self.changeToken, name: "changeToken", parent: name, min: 1)
            try self.validate(self.changeToken, name: "changeToken", parent: name, pattern: ".*\\S.*")
            try self.validate(self.ruleGroupId, name: "ruleGroupId", parent: name, max: 128)
            try self.validate(self.ruleGroupId, name: "ruleGroupId", parent: name, min: 1)
            try self.validate(self.ruleGroupId, name: "ruleGroupId", parent: name, pattern: ".*\\S.*")
        }

        private enum CodingKeys: String, CodingKey {
            case changeToken = "ChangeToken"
            case ruleGroupId = "RuleGroupId"
        }
    }

    public struct DeleteRuleGroupResponse: AWSDecodableShape {
        /// The ChangeToken that you used to submit the DeleteRuleGroup request. You can also use this value  to query the status of the request. For more information, see GetChangeTokenStatus.
        public let changeToken: String?

        public init(changeToken: String? = nil) {
            self.changeToken = changeToken
        }

        private enum CodingKeys: String, CodingKey {
            case changeToken = "ChangeToken"
        }
    }

    public struct DeleteRuleRequest: AWSEncodableShape {
        /// The value returned by the most recent call to GetChangeToken.
        public let changeToken: String
        /// The RuleId of the Rule that you want to delete. RuleId is returned by CreateRule and by
        /// 			ListRules.
        public let ruleId: String

        public init(changeToken: String, ruleId: String) {
            self.changeToken = changeToken
            self.ruleId = ruleId
        }

        public func validate(name: String) throws {
            try self.validate(self.changeToken, name: "changeToken", parent: name, max: 128)
            try self.validate(self.changeToken, name: "changeToken", parent: name, min: 1)
            try self.validate(self.changeToken, name: "changeToken", parent: name, pattern: ".*\\S.*")
            try self.validate(self.ruleId, name: "ruleId", parent: name, max: 128)
            try self.validate(self.ruleId, name: "ruleId", parent: name, min: 1)
            try self.validate(self.ruleId, name: "ruleId", parent: name, pattern: ".*\\S.*")
        }

        private enum CodingKeys: String, CodingKey {
            case changeToken = "ChangeToken"
            case ruleId = "RuleId"
        }
    }

    public struct DeleteRuleResponse: AWSDecodableShape {
        /// The ChangeToken that you used to submit the DeleteRule request. You can also use this value
        /// 			to query the status of the request. For more information, see GetChangeTokenStatus.
        public let changeToken: String?

        public init(changeToken: String? = nil) {
            self.changeToken = changeToken
        }

        private enum CodingKeys: String, CodingKey {
            case changeToken = "ChangeToken"
        }
    }

    public struct DeleteSizeConstraintSetRequest: AWSEncodableShape {
        /// The value returned by the most recent call to GetChangeToken.
        public let changeToken: String
        /// The SizeConstraintSetId of the SizeConstraintSet that you want to delete. SizeConstraintSetId
        /// 			is returned by CreateSizeConstraintSet and by ListSizeConstraintSets.
        public let sizeConstraintSetId: String

        public init(changeToken: String, sizeConstraintSetId: String) {
            self.changeToken = changeToken
            self.sizeConstraintSetId = sizeConstraintSetId
        }

        public func validate(name: String) throws {
            try self.validate(self.changeToken, name: "changeToken", parent: name, max: 128)
            try self.validate(self.changeToken, name: "changeToken", parent: name, min: 1)
            try self.validate(self.changeToken, name: "changeToken", parent: name, pattern: ".*\\S.*")
            try self.validate(self.sizeConstraintSetId, name: "sizeConstraintSetId", parent: name, max: 128)
            try self.validate(self.sizeConstraintSetId, name: "sizeConstraintSetId", parent: name, min: 1)
            try self.validate(self.sizeConstraintSetId, name: "sizeConstraintSetId", parent: name, pattern: ".*\\S.*")
        }

        private enum CodingKeys: String, CodingKey {
            case changeToken = "ChangeToken"
            case sizeConstraintSetId = "SizeConstraintSetId"
        }
    }

    public struct DeleteSizeConstraintSetResponse: AWSDecodableShape {
        /// The ChangeToken that you used to submit the DeleteSizeConstraintSet request. You can also use this value
        /// 			to query the status of the request. For more information, see GetChangeTokenStatus.
        public let changeToken: String?

        public init(changeToken: String? = nil) {
            self.changeToken = changeToken
        }

        private enum CodingKeys: String, CodingKey {
            case changeToken = "ChangeToken"
        }
    }

    public struct DeleteSqlInjectionMatchSetRequest: AWSEncodableShape {
        /// The value returned by the most recent call to GetChangeToken.
        public let changeToken: String
        /// The SqlInjectionMatchSetId of the SqlInjectionMatchSet that you want to delete.
        /// 			SqlInjectionMatchSetId is returned by CreateSqlInjectionMatchSet and by ListSqlInjectionMatchSets.
        public let sqlInjectionMatchSetId: String

        public init(changeToken: String, sqlInjectionMatchSetId: String) {
            self.changeToken = changeToken
            self.sqlInjectionMatchSetId = sqlInjectionMatchSetId
        }

        public func validate(name: String) throws {
            try self.validate(self.changeToken, name: "changeToken", parent: name, max: 128)
            try self.validate(self.changeToken, name: "changeToken", parent: name, min: 1)
            try self.validate(self.changeToken, name: "changeToken", parent: name, pattern: ".*\\S.*")
            try self.validate(self.sqlInjectionMatchSetId, name: "sqlInjectionMatchSetId", parent: name, max: 128)
            try self.validate(self.sqlInjectionMatchSetId, name: "sqlInjectionMatchSetId", parent: name, min: 1)
            try self.validate(self.sqlInjectionMatchSetId, name: "sqlInjectionMatchSetId", parent: name, pattern: ".*\\S.*")
        }

        private enum CodingKeys: String, CodingKey {
            case changeToken = "ChangeToken"
            case sqlInjectionMatchSetId = "SqlInjectionMatchSetId"
        }
    }

    public struct DeleteSqlInjectionMatchSetResponse: AWSDecodableShape {
        /// The ChangeToken that you used to submit the DeleteSqlInjectionMatchSet request. You can also use this value
        /// 			to query the status of the request. For more information, see GetChangeTokenStatus.
        public let changeToken: String?

        public init(changeToken: String? = nil) {
            self.changeToken = changeToken
        }

        private enum CodingKeys: String, CodingKey {
            case changeToken = "ChangeToken"
        }
    }

    public struct DeleteWebACLRequest: AWSEncodableShape {
        /// The value returned by the most recent call to GetChangeToken.
        public let changeToken: String
        /// The WebACLId of the WebACL that you want to delete. WebACLId is returned by CreateWebACL and by
        /// 			ListWebACLs.
        public let webACLId: String

        public init(changeToken: String, webACLId: String) {
            self.changeToken = changeToken
            self.webACLId = webACLId
        }

        public func validate(name: String) throws {
            try self.validate(self.changeToken, name: "changeToken", parent: name, max: 128)
            try self.validate(self.changeToken, name: "changeToken", parent: name, min: 1)
            try self.validate(self.changeToken, name: "changeToken", parent: name, pattern: ".*\\S.*")
            try self.validate(self.webACLId, name: "webACLId", parent: name, max: 128)
            try self.validate(self.webACLId, name: "webACLId", parent: name, min: 1)
            try self.validate(self.webACLId, name: "webACLId", parent: name, pattern: ".*\\S.*")
        }

        private enum CodingKeys: String, CodingKey {
            case changeToken = "ChangeToken"
            case webACLId = "WebACLId"
        }
    }

    public struct DeleteWebACLResponse: AWSDecodableShape {
        /// The ChangeToken that you used to submit the DeleteWebACL request. You can also use this value
        /// 			to query the status of the request. For more information, see GetChangeTokenStatus.
        public let changeToken: String?

        public init(changeToken: String? = nil) {
            self.changeToken = changeToken
        }

        private enum CodingKeys: String, CodingKey {
            case changeToken = "ChangeToken"
        }
    }

    public struct DeleteXssMatchSetRequest: AWSEncodableShape {
        /// The value returned by the most recent call to GetChangeToken.
        public let changeToken: String
        /// The XssMatchSetId of the XssMatchSet that you want to delete.
        /// 			XssMatchSetId is returned by CreateXssMatchSet and by ListXssMatchSets.
        public let xssMatchSetId: String

        public init(changeToken: String, xssMatchSetId: String) {
            self.changeToken = changeToken
            self.xssMatchSetId = xssMatchSetId
        }

        public func validate(name: String) throws {
            try self.validate(self.changeToken, name: "changeToken", parent: name, max: 128)
            try self.validate(self.changeToken, name: "changeToken", parent: name, min: 1)
            try self.validate(self.changeToken, name: "changeToken", parent: name, pattern: ".*\\S.*")
            try self.validate(self.xssMatchSetId, name: "xssMatchSetId", parent: name, max: 128)
            try self.validate(self.xssMatchSetId, name: "xssMatchSetId", parent: name, min: 1)
            try self.validate(self.xssMatchSetId, name: "xssMatchSetId", parent: name, pattern: ".*\\S.*")
        }

        private enum CodingKeys: String, CodingKey {
            case changeToken = "ChangeToken"
            case xssMatchSetId = "XssMatchSetId"
        }
    }

    public struct DeleteXssMatchSetResponse: AWSDecodableShape {
        /// The ChangeToken that you used to submit the DeleteXssMatchSet request. You can also use this value
        /// 			to query the status of the request. For more information, see GetChangeTokenStatus.
        public let changeToken: String?

        public init(changeToken: String? = nil) {
            self.changeToken = changeToken
        }

        private enum CodingKeys: String, CodingKey {
            case changeToken = "ChangeToken"
        }
    }

    public struct ExcludedRule: AWSEncodableShape & AWSDecodableShape {
        /// The unique identifier for the rule to exclude from the rule group.
        public let ruleId: String

        public init(ruleId: String) {
            self.ruleId = ruleId
        }

        public func validate(name: String) throws {
            try self.validate(self.ruleId, name: "ruleId", parent: name, max: 128)
            try self.validate(self.ruleId, name: "ruleId", parent: name, min: 1)
            try self.validate(self.ruleId, name: "ruleId", parent: name, pattern: ".*\\S.*")
        }

        private enum CodingKeys: String, CodingKey {
            case ruleId = "RuleId"
        }
    }

    public struct FieldToMatch: AWSEncodableShape & AWSDecodableShape {
        /// When the value of Type is HEADER, enter the name of the header that you want AWS WAF to search,
        /// 			for example, User-Agent or Referer. The name of the header is not case sensitive.
        /// 	        When the value of Type is SINGLE_QUERY_ARG, enter the name of the parameter that you want AWS WAF to search,
        /// 	        for example, UserName or SalesRegion. The parameter name is not case sensitive.
        /// 	        If the value of Type is any other value, omit Data.
        public let data: String?
        /// The part of the web request that you want AWS WAF to search for a specified string. Parts of a request that you can search include the following:
        /// 		          HEADER: A specified request header, for example, the value of the User-Agent or Referer header.
        /// 				If you choose HEADER for the type, specify the name of the header in Data.    METHOD: The HTTP method, which indicated the type of operation that the request is asking the origin to perform.
        /// 				Amazon CloudFront supports the following methods: DELETE, GET, HEAD, OPTIONS, PATCH,
        /// 				POST, and PUT.    QUERY_STRING: A query string, which is the part of a URL that appears after a ? character, if any.    URI: The part of a web request that identifies a resource, for example, /images/daily-ad.jpg.    BODY: The part of a request that contains any additional data that you want to send to your web server
        /// 				as the HTTP request body, such as data from a form. The request body immediately follows the request headers.
        /// 				Note that only the first 8192 bytes of the request body are forwarded to AWS WAF for inspection.
        /// 				To allow or block requests based on the length of the body, you can create a size constraint set.
        /// 				For more information, see CreateSizeConstraintSet.
        ///
        /// 		                SINGLE_QUERY_ARG: The parameter in the query string that you will inspect, such as UserName or SalesRegion. The maximum length for SINGLE_QUERY_ARG is 30 characters.
        ///
        ///
        /// 		                ALL_QUERY_ARGS: Similar to SINGLE_QUERY_ARG, but rather than inspecting a single parameter, AWS WAF will inspect all parameters within the query for the value or regex pattern that you specify in
        /// 		             TargetString.
        ///
        public let type: MatchFieldType

        public init(data: String? = nil, type: MatchFieldType) {
            self.data = data
            self.type = type
        }

        public func validate(name: String) throws {
            try self.validate(self.data, name: "data", parent: name, max: 128)
            try self.validate(self.data, name: "data", parent: name, min: 1)
            try self.validate(self.data, name: "data", parent: name, pattern: ".*\\S.*")
        }

        private enum CodingKeys: String, CodingKey {
            case data = "Data"
            case type = "Type"
        }
    }

    public struct GeoMatchConstraint: AWSEncodableShape & AWSDecodableShape {
        /// The type of geographical area you want AWS WAF to search for. Currently Country is the only valid value.
        public let type: GeoMatchConstraintType
        /// The country that you want AWS WAF to search for.
        public let value: GeoMatchConstraintValue

        public init(type: GeoMatchConstraintType, value: GeoMatchConstraintValue) {
            self.type = type
            self.value = value
        }

        private enum CodingKeys: String, CodingKey {
            case type = "Type"
            case value = "Value"
        }
    }

    public struct GeoMatchSet: AWSDecodableShape {
        /// An array of GeoMatchConstraint objects, which contain the country that you want AWS WAF to search for.
        public let geoMatchConstraints: [GeoMatchConstraint]
        /// The GeoMatchSetId for an GeoMatchSet. You use GeoMatchSetId to get information about a
        /// 			GeoMatchSet (see GeoMatchSet), update a GeoMatchSet (see UpdateGeoMatchSet), insert a GeoMatchSet into a Rule or delete one from a Rule (see UpdateRule), and delete a GeoMatchSet from AWS WAF (see DeleteGeoMatchSet).
        /// 		        GeoMatchSetId is returned by CreateGeoMatchSet and by ListGeoMatchSets.
        public let geoMatchSetId: String
        /// A friendly name or description of the GeoMatchSet. You can't change the name of an GeoMatchSet after you create it.
        public let name: String?

        public init(geoMatchConstraints: [GeoMatchConstraint], geoMatchSetId: String, name: String? = nil) {
            self.geoMatchConstraints = geoMatchConstraints
            self.geoMatchSetId = geoMatchSetId
            self.name = name
        }

        private enum CodingKeys: String, CodingKey {
            case geoMatchConstraints = "GeoMatchConstraints"
            case geoMatchSetId = "GeoMatchSetId"
            case name = "Name"
        }
    }

    public struct GeoMatchSetSummary: AWSDecodableShape {
        /// The GeoMatchSetId for an GeoMatchSet. You can use GeoMatchSetId in a GetGeoMatchSet request to get detailed	information about an GeoMatchSet.
        public let geoMatchSetId: String
        /// A friendly name or description of the GeoMatchSet. You can't change the name of an GeoMatchSet after you create it.
        public let name: String

        public init(geoMatchSetId: String, name: String) {
            self.geoMatchSetId = geoMatchSetId
            self.name = name
        }

        private enum CodingKeys: String, CodingKey {
            case geoMatchSetId = "GeoMatchSetId"
            case name = "Name"
        }
    }

    public struct GeoMatchSetUpdate: AWSEncodableShape {
        /// Specifies whether to insert or delete a country with UpdateGeoMatchSet.
        public let action: ChangeAction
        /// The country from which web requests originate that you want AWS WAF to search for.
        public let geoMatchConstraint: GeoMatchConstraint

        public init(action: ChangeAction, geoMatchConstraint: GeoMatchConstraint) {
            self.action = action
            self.geoMatchConstraint = geoMatchConstraint
        }

        private enum CodingKeys: String, CodingKey {
            case action = "Action"
            case geoMatchConstraint = "GeoMatchConstraint"
        }
    }

    public struct GetByteMatchSetRequest: AWSEncodableShape {
        /// The ByteMatchSetId of the ByteMatchSet that you want to get. ByteMatchSetId is returned by
        /// 			CreateByteMatchSet and by ListByteMatchSets.
        public let byteMatchSetId: String

        public init(byteMatchSetId: String) {
            self.byteMatchSetId = byteMatchSetId
        }

        public func validate(name: String) throws {
            try self.validate(self.byteMatchSetId, name: "byteMatchSetId", parent: name, max: 128)
            try self.validate(self.byteMatchSetId, name: "byteMatchSetId", parent: name, min: 1)
            try self.validate(self.byteMatchSetId, name: "byteMatchSetId", parent: name, pattern: ".*\\S.*")
        }

        private enum CodingKeys: String, CodingKey {
            case byteMatchSetId = "ByteMatchSetId"
        }
    }

    public struct GetByteMatchSetResponse: AWSDecodableShape {
        /// Information about the ByteMatchSet that you specified in the GetByteMatchSet request. For more information, see the
        /// 			following topics:
        /// 		          ByteMatchSet: Contains ByteMatchSetId, ByteMatchTuples, and Name     ByteMatchTuples: Contains an array of ByteMatchTuple objects. Each ByteMatchTuple
        /// 				object contains FieldToMatch, PositionalConstraint, TargetString,
        /// 				and TextTransformation     FieldToMatch: Contains Data and Type
        public let byteMatchSet: ByteMatchSet?

        public init(byteMatchSet: ByteMatchSet? = nil) {
            self.byteMatchSet = byteMatchSet
        }

        private enum CodingKeys: String, CodingKey {
            case byteMatchSet = "ByteMatchSet"
        }
    }

    public struct GetChangeTokenRequest: AWSEncodableShape {
        public init() {}
    }

    public struct GetChangeTokenResponse: AWSDecodableShape {
        /// The ChangeToken that you used in the request. Use this value in a GetChangeTokenStatus request
        /// 			to get the current status of the request.
        public let changeToken: String?

        public init(changeToken: String? = nil) {
            self.changeToken = changeToken
        }

        private enum CodingKeys: String, CodingKey {
            case changeToken = "ChangeToken"
        }
    }

    public struct GetChangeTokenStatusRequest: AWSEncodableShape {
        /// The change token for which you want to get the status. This change token was previously returned in the GetChangeToken response.
        public let changeToken: String

        public init(changeToken: String) {
            self.changeToken = changeToken
        }

        public func validate(name: String) throws {
            try self.validate(self.changeToken, name: "changeToken", parent: name, max: 128)
            try self.validate(self.changeToken, name: "changeToken", parent: name, min: 1)
            try self.validate(self.changeToken, name: "changeToken", parent: name, pattern: ".*\\S.*")
        }

        private enum CodingKeys: String, CodingKey {
            case changeToken = "ChangeToken"
        }
    }

    public struct GetChangeTokenStatusResponse: AWSDecodableShape {
        /// The status of the change token.
        public let changeTokenStatus: ChangeTokenStatus?

        public init(changeTokenStatus: ChangeTokenStatus? = nil) {
            self.changeTokenStatus = changeTokenStatus
        }

        private enum CodingKeys: String, CodingKey {
            case changeTokenStatus = "ChangeTokenStatus"
        }
    }

    public struct GetGeoMatchSetRequest: AWSEncodableShape {
        /// The GeoMatchSetId of the GeoMatchSet that you want to get. GeoMatchSetId is returned by CreateGeoMatchSet and by
        /// 			ListGeoMatchSets.
        public let geoMatchSetId: String

        public init(geoMatchSetId: String) {
            self.geoMatchSetId = geoMatchSetId
        }

        public func validate(name: String) throws {
            try self.validate(self.geoMatchSetId, name: "geoMatchSetId", parent: name, max: 128)
            try self.validate(self.geoMatchSetId, name: "geoMatchSetId", parent: name, min: 1)
            try self.validate(self.geoMatchSetId, name: "geoMatchSetId", parent: name, pattern: ".*\\S.*")
        }

        private enum CodingKeys: String, CodingKey {
            case geoMatchSetId = "GeoMatchSetId"
        }
    }

    public struct GetGeoMatchSetResponse: AWSDecodableShape {
        /// Information about the GeoMatchSet that you specified in the GetGeoMatchSet request. This includes the Type, which for a GeoMatchContraint is always Country, as well as the Value, which is the identifier for a specific country.
        public let geoMatchSet: GeoMatchSet?

        public init(geoMatchSet: GeoMatchSet? = nil) {
            self.geoMatchSet = geoMatchSet
        }

        private enum CodingKeys: String, CodingKey {
            case geoMatchSet = "GeoMatchSet"
        }
    }

    public struct GetIPSetRequest: AWSEncodableShape {
        /// The IPSetId of the IPSet that you want to get. IPSetId is returned by CreateIPSet and by
        /// 			ListIPSets.
        public let iPSetId: String

        public init(iPSetId: String) {
            self.iPSetId = iPSetId
        }

        public func validate(name: String) throws {
            try self.validate(self.iPSetId, name: "iPSetId", parent: name, max: 128)
            try self.validate(self.iPSetId, name: "iPSetId", parent: name, min: 1)
            try self.validate(self.iPSetId, name: "iPSetId", parent: name, pattern: ".*\\S.*")
        }

        private enum CodingKeys: String, CodingKey {
            case iPSetId = "IPSetId"
        }
    }

    public struct GetIPSetResponse: AWSDecodableShape {
        /// Information about the IPSet that you specified in the GetIPSet request. For more information, see the
        /// 			following topics:
        /// 		          IPSet: Contains IPSetDescriptors, IPSetId, and Name     IPSetDescriptors: Contains an array of IPSetDescriptor objects. Each IPSetDescriptor
        /// 				object contains Type and Value
        public let iPSet: IPSet?

        public init(iPSet: IPSet? = nil) {
            self.iPSet = iPSet
        }

        private enum CodingKeys: String, CodingKey {
            case iPSet = "IPSet"
        }
    }

    public struct GetLoggingConfigurationRequest: AWSEncodableShape {
        /// The Amazon Resource Name (ARN) of the web ACL for which you want to get the LoggingConfiguration.
        public let resourceArn: String

        public init(resourceArn: String) {
            self.resourceArn = resourceArn
        }

        public func validate(name: String) throws {
            try self.validate(self.resourceArn, name: "resourceArn", parent: name, max: 1224)
            try self.validate(self.resourceArn, name: "resourceArn", parent: name, min: 1)
            try self.validate(self.resourceArn, name: "resourceArn", parent: name, pattern: ".*\\S.*")
        }

        private enum CodingKeys: String, CodingKey {
            case resourceArn = "ResourceArn"
        }
    }

    public struct GetLoggingConfigurationResponse: AWSDecodableShape {
        /// The LoggingConfiguration for the specified web ACL.
        public let loggingConfiguration: LoggingConfiguration?

        public init(loggingConfiguration: LoggingConfiguration? = nil) {
            self.loggingConfiguration = loggingConfiguration
        }

        private enum CodingKeys: String, CodingKey {
            case loggingConfiguration = "LoggingConfiguration"
        }
    }

    public struct GetPermissionPolicyRequest: AWSEncodableShape {
        /// The Amazon Resource Name (ARN) of the RuleGroup for which you want to get the policy.
        public let resourceArn: String

        public init(resourceArn: String) {
            self.resourceArn = resourceArn
        }

        public func validate(name: String) throws {
            try self.validate(self.resourceArn, name: "resourceArn", parent: name, max: 1224)
            try self.validate(self.resourceArn, name: "resourceArn", parent: name, min: 1)
            try self.validate(self.resourceArn, name: "resourceArn", parent: name, pattern: ".*\\S.*")
        }

        private enum CodingKeys: String, CodingKey {
            case resourceArn = "ResourceArn"
        }
    }

    public struct GetPermissionPolicyResponse: AWSDecodableShape {
        /// The IAM policy attached to the specified RuleGroup.
        public let policy: String?

        public init(policy: String? = nil) {
            self.policy = policy
        }

        private enum CodingKeys: String, CodingKey {
            case policy = "Policy"
        }
    }

    public struct GetRateBasedRuleManagedKeysRequest: AWSEncodableShape {
        /// A null value and not currently used. Do not include this in your request.
        public let nextMarker: String?
        /// The RuleId of the RateBasedRule for which you want to get a list of ManagedKeys. RuleId is returned by CreateRateBasedRule and by ListRateBasedRules.
        public let ruleId: String

        public init(nextMarker: String? = nil, ruleId: String) {
            self.nextMarker = nextMarker
            self.ruleId = ruleId
        }

        public func validate(name: String) throws {
            try self.validate(self.nextMarker, name: "nextMarker", parent: name, max: 1224)
            try self.validate(self.nextMarker, name: "nextMarker", parent: name, min: 1)
            try self.validate(self.nextMarker, name: "nextMarker", parent: name, pattern: ".*\\S.*")
            try self.validate(self.ruleId, name: "ruleId", parent: name, max: 128)
            try self.validate(self.ruleId, name: "ruleId", parent: name, min: 1)
            try self.validate(self.ruleId, name: "ruleId", parent: name, pattern: ".*\\S.*")
        }

        private enum CodingKeys: String, CodingKey {
            case nextMarker = "NextMarker"
            case ruleId = "RuleId"
        }
    }

    public struct GetRateBasedRuleManagedKeysResponse: AWSDecodableShape {
        /// An array of IP addresses that currently are blocked by the specified RateBasedRule.
        public let managedKeys: [String]?
        /// A null value and not currently used.
        public let nextMarker: String?

        public init(managedKeys: [String]? = nil, nextMarker: String? = nil) {
            self.managedKeys = managedKeys
            self.nextMarker = nextMarker
        }

        private enum CodingKeys: String, CodingKey {
            case managedKeys = "ManagedKeys"
            case nextMarker = "NextMarker"
        }
    }

    public struct GetRateBasedRuleRequest: AWSEncodableShape {
        /// The RuleId of the RateBasedRule that you want to get. RuleId is returned by CreateRateBasedRule and by ListRateBasedRules.
        public let ruleId: String

        public init(ruleId: String) {
            self.ruleId = ruleId
        }

        public func validate(name: String) throws {
            try self.validate(self.ruleId, name: "ruleId", parent: name, max: 128)
            try self.validate(self.ruleId, name: "ruleId", parent: name, min: 1)
            try self.validate(self.ruleId, name: "ruleId", parent: name, pattern: ".*\\S.*")
        }

        private enum CodingKeys: String, CodingKey {
            case ruleId = "RuleId"
        }
    }

    public struct GetRateBasedRuleResponse: AWSDecodableShape {
        /// Information about the RateBasedRule that you specified in the GetRateBasedRule request.
        public let rule: RateBasedRule?

        public init(rule: RateBasedRule? = nil) {
            self.rule = rule
        }

        private enum CodingKeys: String, CodingKey {
            case rule = "Rule"
        }
    }

    public struct GetRegexMatchSetRequest: AWSEncodableShape {
        /// The RegexMatchSetId of the RegexMatchSet that you want to get. RegexMatchSetId is returned by
        /// 			CreateRegexMatchSet and by ListRegexMatchSets.
        public let regexMatchSetId: String

        public init(regexMatchSetId: String) {
            self.regexMatchSetId = regexMatchSetId
        }

        public func validate(name: String) throws {
            try self.validate(self.regexMatchSetId, name: "regexMatchSetId", parent: name, max: 128)
            try self.validate(self.regexMatchSetId, name: "regexMatchSetId", parent: name, min: 1)
            try self.validate(self.regexMatchSetId, name: "regexMatchSetId", parent: name, pattern: ".*\\S.*")
        }

        private enum CodingKeys: String, CodingKey {
            case regexMatchSetId = "RegexMatchSetId"
        }
    }

    public struct GetRegexMatchSetResponse: AWSDecodableShape {
        /// Information about the RegexMatchSet that you specified in the GetRegexMatchSet request. For more information, see RegexMatchTuple.
        public let regexMatchSet: RegexMatchSet?

        public init(regexMatchSet: RegexMatchSet? = nil) {
            self.regexMatchSet = regexMatchSet
        }

        private enum CodingKeys: String, CodingKey {
            case regexMatchSet = "RegexMatchSet"
        }
    }

    public struct GetRegexPatternSetRequest: AWSEncodableShape {
        /// The RegexPatternSetId of the RegexPatternSet that you want to get. RegexPatternSetId is returned by
        /// 			CreateRegexPatternSet and by ListRegexPatternSets.
        public let regexPatternSetId: String

        public init(regexPatternSetId: String) {
            self.regexPatternSetId = regexPatternSetId
        }

        public func validate(name: String) throws {
            try self.validate(self.regexPatternSetId, name: "regexPatternSetId", parent: name, max: 128)
            try self.validate(self.regexPatternSetId, name: "regexPatternSetId", parent: name, min: 1)
            try self.validate(self.regexPatternSetId, name: "regexPatternSetId", parent: name, pattern: ".*\\S.*")
        }

        private enum CodingKeys: String, CodingKey {
            case regexPatternSetId = "RegexPatternSetId"
        }
    }

    public struct GetRegexPatternSetResponse: AWSDecodableShape {
        /// Information about the RegexPatternSet that you specified in the GetRegexPatternSet request, including the identifier of the pattern set and the regular expression patterns you want AWS WAF to search for.
        public let regexPatternSet: RegexPatternSet?

        public init(regexPatternSet: RegexPatternSet? = nil) {
            self.regexPatternSet = regexPatternSet
        }

        private enum CodingKeys: String, CodingKey {
            case regexPatternSet = "RegexPatternSet"
        }
    }

    public struct GetRuleGroupRequest: AWSEncodableShape {
        /// The RuleGroupId of the RuleGroup that you want to get. RuleGroupId is returned by CreateRuleGroup and by  ListRuleGroups.
        public let ruleGroupId: String

        public init(ruleGroupId: String) {
            self.ruleGroupId = ruleGroupId
        }

        public func validate(name: String) throws {
            try self.validate(self.ruleGroupId, name: "ruleGroupId", parent: name, max: 128)
            try self.validate(self.ruleGroupId, name: "ruleGroupId", parent: name, min: 1)
            try self.validate(self.ruleGroupId, name: "ruleGroupId", parent: name, pattern: ".*\\S.*")
        }

        private enum CodingKeys: String, CodingKey {
            case ruleGroupId = "RuleGroupId"
        }
    }

    public struct GetRuleGroupResponse: AWSDecodableShape {
        /// Information about the RuleGroup that you specified in the GetRuleGroup request.
        public let ruleGroup: RuleGroup?

        public init(ruleGroup: RuleGroup? = nil) {
            self.ruleGroup = ruleGroup
        }

        private enum CodingKeys: String, CodingKey {
            case ruleGroup = "RuleGroup"
        }
    }

    public struct GetRuleRequest: AWSEncodableShape {
        /// The RuleId of the Rule that you want to get. RuleId is returned by CreateRule and by
        /// 			ListRules.
        public let ruleId: String

        public init(ruleId: String) {
            self.ruleId = ruleId
        }

        public func validate(name: String) throws {
            try self.validate(self.ruleId, name: "ruleId", parent: name, max: 128)
            try self.validate(self.ruleId, name: "ruleId", parent: name, min: 1)
            try self.validate(self.ruleId, name: "ruleId", parent: name, pattern: ".*\\S.*")
        }

        private enum CodingKeys: String, CodingKey {
            case ruleId = "RuleId"
        }
    }

    public struct GetRuleResponse: AWSDecodableShape {
        /// Information about the Rule that you specified in the GetRule request.
        /// 			For more information, see the following topics:
        /// 		          Rule: Contains MetricName, Name, an array of Predicate objects,
        /// 				and RuleId     Predicate: Each Predicate object contains DataId, Negated, and
        /// 				Type
        public let rule: Rule?

        public init(rule: Rule? = nil) {
            self.rule = rule
        }

        private enum CodingKeys: String, CodingKey {
            case rule = "Rule"
        }
    }

    public struct GetSampledRequestsRequest: AWSEncodableShape {
        /// The number of requests that you want AWS WAF to return from among the first 5,000 requests that your AWS resource received
        /// 			during the time range. If your resource received fewer requests than the value of MaxItems, GetSampledRequests
        /// 			returns information about all of them.
        public let maxItems: Int64
        ///  RuleId is one of three values:
        ///
        /// 				           The RuleId of the Rule or the RuleGroupId of the RuleGroup for which you want GetSampledRequests to return a sample of requests.    Default_Action, which causes GetSampledRequests to return a sample of the requests that
        /// 					didn't match any of the rules in the specified WebACL.
        public let ruleId: String
        /// The start date and time and the end date and time of the range for which you want GetSampledRequests to return a  sample of requests. You must specify the times in Coordinated Universal Time (UTC) format. UTC format includes the special   designator, Z. For example, "2016-09-27T14:50Z". You can specify any time range in the previous three hours.
        public let timeWindow: TimeWindow
        /// The WebACLId of the WebACL for which you want GetSampledRequests to return a sample of requests.
        public let webAclId: String

        public init(maxItems: Int64, ruleId: String, timeWindow: TimeWindow, webAclId: String) {
            self.maxItems = maxItems
            self.ruleId = ruleId
            self.timeWindow = timeWindow
            self.webAclId = webAclId
        }

        public func validate(name: String) throws {
            try self.validate(self.maxItems, name: "maxItems", parent: name, max: 500)
            try self.validate(self.maxItems, name: "maxItems", parent: name, min: 1)
            try self.validate(self.ruleId, name: "ruleId", parent: name, max: 128)
            try self.validate(self.ruleId, name: "ruleId", parent: name, min: 1)
            try self.validate(self.ruleId, name: "ruleId", parent: name, pattern: ".*\\S.*")
            try self.validate(self.webAclId, name: "webAclId", parent: name, max: 128)
            try self.validate(self.webAclId, name: "webAclId", parent: name, min: 1)
            try self.validate(self.webAclId, name: "webAclId", parent: name, pattern: ".*\\S.*")
        }

        private enum CodingKeys: String, CodingKey {
            case maxItems = "MaxItems"
            case ruleId = "RuleId"
            case timeWindow = "TimeWindow"
            case webAclId = "WebAclId"
        }
    }

    public struct GetSampledRequestsResponse: AWSDecodableShape {
        /// The total number of requests from which GetSampledRequests got a sample of MaxItems requests.
        /// 			If PopulationSize is less than MaxItems, the sample includes every request that your AWS resource
        /// 			received during the specified time range.
        public let populationSize: Int64?
        /// A complex type that contains detailed information about each of the requests in the sample.
        public let sampledRequests: [SampledHTTPRequest]?
        /// Usually, TimeWindow is the time range that you specified in the GetSampledRequests request. However,
        /// 			if your AWS resource received more than 5,000 requests during the time range that you specified in the request,
        /// 			GetSampledRequests returns the time range for the first 5,000 requests. Times are in Coordinated Universal Time (UTC) format.
        public let timeWindow: TimeWindow?

        public init(populationSize: Int64? = nil, sampledRequests: [SampledHTTPRequest]? = nil, timeWindow: TimeWindow? = nil) {
            self.populationSize = populationSize
            self.sampledRequests = sampledRequests
            self.timeWindow = timeWindow
        }

        private enum CodingKeys: String, CodingKey {
            case populationSize = "PopulationSize"
            case sampledRequests = "SampledRequests"
            case timeWindow = "TimeWindow"
        }
    }

    public struct GetSizeConstraintSetRequest: AWSEncodableShape {
        /// The SizeConstraintSetId of the SizeConstraintSet that you want to get. SizeConstraintSetId is returned by
        /// 			CreateSizeConstraintSet and by ListSizeConstraintSets.
        public let sizeConstraintSetId: String

        public init(sizeConstraintSetId: String) {
            self.sizeConstraintSetId = sizeConstraintSetId
        }

        public func validate(name: String) throws {
            try self.validate(self.sizeConstraintSetId, name: "sizeConstraintSetId", parent: name, max: 128)
            try self.validate(self.sizeConstraintSetId, name: "sizeConstraintSetId", parent: name, min: 1)
            try self.validate(self.sizeConstraintSetId, name: "sizeConstraintSetId", parent: name, pattern: ".*\\S.*")
        }

        private enum CodingKeys: String, CodingKey {
            case sizeConstraintSetId = "SizeConstraintSetId"
        }
    }

    public struct GetSizeConstraintSetResponse: AWSDecodableShape {
        /// Information about the SizeConstraintSet that you specified in the GetSizeConstraintSet request. For more information, see the
        /// 			following topics:
        /// 		          SizeConstraintSet: Contains SizeConstraintSetId, SizeConstraints, and Name     SizeConstraints: Contains an array of SizeConstraint objects. Each SizeConstraint
        /// 				object contains FieldToMatch, TextTransformation, ComparisonOperator,
        /// 				and Size     FieldToMatch: Contains Data and Type
        public let sizeConstraintSet: SizeConstraintSet?

        public init(sizeConstraintSet: SizeConstraintSet? = nil) {
            self.sizeConstraintSet = sizeConstraintSet
        }

        private enum CodingKeys: String, CodingKey {
            case sizeConstraintSet = "SizeConstraintSet"
        }
    }

    public struct GetSqlInjectionMatchSetRequest: AWSEncodableShape {
        /// The SqlInjectionMatchSetId of the SqlInjectionMatchSet that you want to get. SqlInjectionMatchSetId
        /// 			is returned by CreateSqlInjectionMatchSet and by ListSqlInjectionMatchSets.
        public let sqlInjectionMatchSetId: String

        public init(sqlInjectionMatchSetId: String) {
            self.sqlInjectionMatchSetId = sqlInjectionMatchSetId
        }

        public func validate(name: String) throws {
            try self.validate(self.sqlInjectionMatchSetId, name: "sqlInjectionMatchSetId", parent: name, max: 128)
            try self.validate(self.sqlInjectionMatchSetId, name: "sqlInjectionMatchSetId", parent: name, min: 1)
            try self.validate(self.sqlInjectionMatchSetId, name: "sqlInjectionMatchSetId", parent: name, pattern: ".*\\S.*")
        }

        private enum CodingKeys: String, CodingKey {
            case sqlInjectionMatchSetId = "SqlInjectionMatchSetId"
        }
    }

    public struct GetSqlInjectionMatchSetResponse: AWSDecodableShape {
        /// Information about the SqlInjectionMatchSet that you specified in the GetSqlInjectionMatchSet request.
        /// 			For more information, see the following topics:
        /// 		          SqlInjectionMatchSet: Contains Name, SqlInjectionMatchSetId, and an array of
        /// 				SqlInjectionMatchTuple objects    SqlInjectionMatchTuple: Each SqlInjectionMatchTuple object contains FieldToMatch and
        /// 				TextTransformation     FieldToMatch: Contains Data and Type
        public let sqlInjectionMatchSet: SqlInjectionMatchSet?

        public init(sqlInjectionMatchSet: SqlInjectionMatchSet? = nil) {
            self.sqlInjectionMatchSet = sqlInjectionMatchSet
        }

        private enum CodingKeys: String, CodingKey {
            case sqlInjectionMatchSet = "SqlInjectionMatchSet"
        }
    }

    public struct GetWebACLRequest: AWSEncodableShape {
        /// The WebACLId of the WebACL that you want to get. WebACLId is returned by CreateWebACL and by
        /// 			ListWebACLs.
        public let webACLId: String

        public init(webACLId: String) {
            self.webACLId = webACLId
        }

        public func validate(name: String) throws {
            try self.validate(self.webACLId, name: "webACLId", parent: name, max: 128)
            try self.validate(self.webACLId, name: "webACLId", parent: name, min: 1)
            try self.validate(self.webACLId, name: "webACLId", parent: name, pattern: ".*\\S.*")
        }

        private enum CodingKeys: String, CodingKey {
            case webACLId = "WebACLId"
        }
    }

    public struct GetWebACLResponse: AWSDecodableShape {
        /// Information about the WebACL that you specified in the GetWebACL request.
        /// 			For more information, see the following topics:
        /// 		          WebACL: Contains DefaultAction, MetricName, Name, an array of
        /// 				Rule objects, and WebACLId     DefaultAction (Data type is WafAction): Contains Type     Rules: Contains an array of ActivatedRule objects, which contain Action,
        /// 				Priority, and RuleId     Action: Contains Type
        public let webACL: WebACL?

        public init(webACL: WebACL? = nil) {
            self.webACL = webACL
        }

        private enum CodingKeys: String, CodingKey {
            case webACL = "WebACL"
        }
    }

    public struct GetXssMatchSetRequest: AWSEncodableShape {
        /// The XssMatchSetId of the XssMatchSet that you want to get. XssMatchSetId
        /// 			is returned by CreateXssMatchSet and by ListXssMatchSets.
        public let xssMatchSetId: String

        public init(xssMatchSetId: String) {
            self.xssMatchSetId = xssMatchSetId
        }

        public func validate(name: String) throws {
            try self.validate(self.xssMatchSetId, name: "xssMatchSetId", parent: name, max: 128)
            try self.validate(self.xssMatchSetId, name: "xssMatchSetId", parent: name, min: 1)
            try self.validate(self.xssMatchSetId, name: "xssMatchSetId", parent: name, pattern: ".*\\S.*")
        }

        private enum CodingKeys: String, CodingKey {
            case xssMatchSetId = "XssMatchSetId"
        }
    }

    public struct GetXssMatchSetResponse: AWSDecodableShape {
        /// Information about the XssMatchSet that you specified in the GetXssMatchSet request.
        /// 			For more information, see the following topics:
        /// 		          XssMatchSet: Contains Name, XssMatchSetId, and an array of
        /// 				XssMatchTuple objects    XssMatchTuple: Each XssMatchTuple object contains FieldToMatch and
        /// 				TextTransformation     FieldToMatch: Contains Data and Type
        public let xssMatchSet: XssMatchSet?

        public init(xssMatchSet: XssMatchSet? = nil) {
            self.xssMatchSet = xssMatchSet
        }

        private enum CodingKeys: String, CodingKey {
            case xssMatchSet = "XssMatchSet"
        }
    }

    public struct HTTPHeader: AWSDecodableShape {
        /// The name of one of the headers in the sampled web request.
        public let name: String?
        /// The value of one of the headers in the sampled web request.
        public let value: String?

        public init(name: String? = nil, value: String? = nil) {
            self.name = name
            self.value = value
        }

        private enum CodingKeys: String, CodingKey {
            case name = "Name"
            case value = "Value"
        }
    }

    public struct HTTPRequest: AWSDecodableShape {
        /// The IP address that the request originated from. If the WebACL is associated with a CloudFront distribution,
        /// 			this is the value of one of the following fields in CloudFront access logs:
        /// 		          c-ip, if the viewer did not use an HTTP proxy or a load balancer to send the request    x-forwarded-for, if the viewer did use an HTTP proxy or a load balancer to send the request
        public let clientIP: String?
        /// The two-letter country code for the country that the request originated from. For a current list of country codes,
        /// 			see the Wikipedia entry ISO 3166-1 alpha-2.
        public let country: String?
        /// A complex type that contains two values for each header in the sampled web request: the name of the header and the value of the header.
        public let headers: [HTTPHeader]?
        /// The HTTP version specified in the sampled web request, for example, HTTP/1.1.
        public let hTTPVersion: String?
        /// The HTTP method specified in the sampled web request. CloudFront supports the following methods: DELETE,
        /// 			GET, HEAD, OPTIONS, PATCH, POST, and PUT.
        public let method: String?
        /// The part of a web request that identifies the resource, for example, /images/daily-ad.jpg.
        public let uri: String?

        public init(clientIP: String? = nil, country: String? = nil, headers: [HTTPHeader]? = nil, hTTPVersion: String? = nil, method: String? = nil, uri: String? = nil) {
            self.clientIP = clientIP
            self.country = country
            self.headers = headers
            self.hTTPVersion = hTTPVersion
            self.method = method
            self.uri = uri
        }

        private enum CodingKeys: String, CodingKey {
            case clientIP = "ClientIP"
            case country = "Country"
            case headers = "Headers"
            case hTTPVersion = "HTTPVersion"
            case method = "Method"
            case uri = "URI"
        }
    }

    public struct IPSet: AWSDecodableShape {
        /// The IP address type (IPV4 or IPV6) and the IP address range (in CIDR notation) that web requests originate from.
        /// 			If the WebACL is associated with a CloudFront distribution and the viewer did not use an HTTP proxy or a load balancer to send the request, this is the value of the c-ip field in the CloudFront access logs.
        public let iPSetDescriptors: [IPSetDescriptor]
        /// The IPSetId for an IPSet. You use IPSetId to get information about an
        /// 			IPSet (see GetIPSet), update an IPSet (see UpdateIPSet),
        /// 			insert an IPSet into a Rule or delete one from a Rule (see UpdateRule), and
        /// 			delete an IPSet from AWS WAF (see DeleteIPSet).
        /// 		        IPSetId is returned by CreateIPSet and by ListIPSets.
        public let iPSetId: String
        /// A friendly name or description of the IPSet. You can't change the name of an IPSet after you create it.
        public let name: String?

        public init(iPSetDescriptors: [IPSetDescriptor], iPSetId: String, name: String? = nil) {
            self.iPSetDescriptors = iPSetDescriptors
            self.iPSetId = iPSetId
            self.name = name
        }

        private enum CodingKeys: String, CodingKey {
            case iPSetDescriptors = "IPSetDescriptors"
            case iPSetId = "IPSetId"
            case name = "Name"
        }
    }

    public struct IPSetDescriptor: AWSEncodableShape & AWSDecodableShape {
        /// Specify IPV4 or IPV6.
        public let type: IPSetDescriptorType
        /// Specify an IPv4 address by using CIDR notation. For example:
        /// 		         To configure AWS WAF to allow, block, or count requests that originated from the IP address 192.0.2.44, specify 192.0.2.44/32.   To configure AWS WAF to allow, block, or count requests that originated from IP addresses from 192.0.2.0 to 192.0.2.255, specify
        /// 				192.0.2.0/24.
        ///
        /// 	        For more information about CIDR notation, see the Wikipedia entry
        /// 	      Classless Inter-Domain Routing.
        /// 	        Specify an IPv6 address by using CIDR notation. For example:
        ///
        /// 	              To configure AWS WAF to allow, block, or count requests that originated from the IP address 1111:0000:0000:0000:0000:0000:0000:0111, specify 1111:0000:0000:0000:0000:0000:0000:0111/128.
        ///
        /// 	              To configure AWS WAF to allow, block, or count requests that originated from IP addresses 1111:0000:0000:0000:0000:0000:0000:0000 to 1111:0000:0000:0000:ffff:ffff:ffff:ffff, specify 1111:0000:0000:0000:0000:0000:0000:0000/64.
        ///
        public let value: String

        public init(type: IPSetDescriptorType, value: String) {
            self.type = type
            self.value = value
        }

        public func validate(name: String) throws {
            try self.validate(self.value, name: "value", parent: name, max: 50)
            try self.validate(self.value, name: "value", parent: name, min: 1)
            try self.validate(self.value, name: "value", parent: name, pattern: ".*\\S.*")
        }

        private enum CodingKeys: String, CodingKey {
            case type = "Type"
            case value = "Value"
        }
    }

    public struct IPSetSummary: AWSDecodableShape {
        /// The IPSetId for an IPSet. You can use IPSetId in a GetIPSet request to get detailed
        /// 			information about an IPSet.
        public let iPSetId: String
        /// A friendly name or description of the IPSet. You can't change the name of an IPSet after you create it.
        public let name: String

        public init(iPSetId: String, name: String) {
            self.iPSetId = iPSetId
            self.name = name
        }

        private enum CodingKeys: String, CodingKey {
            case iPSetId = "IPSetId"
            case name = "Name"
        }
    }

    public struct IPSetUpdate: AWSEncodableShape {
        /// Specifies whether to insert or delete an IP address with UpdateIPSet.
        public let action: ChangeAction
        /// The IP address type (IPV4 or IPV6) and the IP address range (in CIDR notation) that web requests originate from.
        public let iPSetDescriptor: IPSetDescriptor

        public init(action: ChangeAction, iPSetDescriptor: IPSetDescriptor) {
            self.action = action
            self.iPSetDescriptor = iPSetDescriptor
        }

        public func validate(name: String) throws {
            try self.iPSetDescriptor.validate(name: "\(name).iPSetDescriptor")
        }

        private enum CodingKeys: String, CodingKey {
            case action = "Action"
            case iPSetDescriptor = "IPSetDescriptor"
        }
    }

    public struct ListActivatedRulesInRuleGroupRequest: AWSEncodableShape {
        /// Specifies the number of ActivatedRules that you want AWS WAF to return for this request. If you have more ActivatedRules than the number that you specify for Limit, the response includes a  NextMarker value that you can use to get another batch of ActivatedRules.
        public let limit: Int?
        /// If you specify a value for Limit and you have more ActivatedRules than the value of Limit,  AWS WAF returns a NextMarker value in the response that allows you to list another group of ActivatedRules.  For the second and subsequent ListActivatedRulesInRuleGroup requests, specify the value of NextMarker  from the previous response to get information about another batch of ActivatedRules.
        public let nextMarker: String?
        /// The RuleGroupId of the RuleGroup for which you want to get a list of ActivatedRule objects.
        public let ruleGroupId: String?

        public init(limit: Int? = nil, nextMarker: String? = nil, ruleGroupId: String? = nil) {
            self.limit = limit
            self.nextMarker = nextMarker
            self.ruleGroupId = ruleGroupId
        }

        public func validate(name: String) throws {
            try self.validate(self.limit, name: "limit", parent: name, max: 100)
            try self.validate(self.limit, name: "limit", parent: name, min: 0)
            try self.validate(self.nextMarker, name: "nextMarker", parent: name, max: 1224)
            try self.validate(self.nextMarker, name: "nextMarker", parent: name, min: 1)
            try self.validate(self.nextMarker, name: "nextMarker", parent: name, pattern: ".*\\S.*")
            try self.validate(self.ruleGroupId, name: "ruleGroupId", parent: name, max: 128)
            try self.validate(self.ruleGroupId, name: "ruleGroupId", parent: name, min: 1)
            try self.validate(self.ruleGroupId, name: "ruleGroupId", parent: name, pattern: ".*\\S.*")
        }

        private enum CodingKeys: String, CodingKey {
            case limit = "Limit"
            case nextMarker = "NextMarker"
            case ruleGroupId = "RuleGroupId"
        }
    }

    public struct ListActivatedRulesInRuleGroupResponse: AWSDecodableShape {
        /// An array of ActivatedRules objects.
        public let activatedRules: [ActivatedRule]?
        /// If you have more ActivatedRules than the number that you specified for Limit in the request, the response includes a NextMarker value. To list more ActivatedRules, submit another ListActivatedRulesInRuleGroup request, and specify the NextMarker value from the response in the NextMarker value in the next request.
        public let nextMarker: String?

        public init(activatedRules: [ActivatedRule]? = nil, nextMarker: String? = nil) {
            self.activatedRules = activatedRules
            self.nextMarker = nextMarker
        }

        private enum CodingKeys: String, CodingKey {
            case activatedRules = "ActivatedRules"
            case nextMarker = "NextMarker"
        }
    }

    public struct ListByteMatchSetsRequest: AWSEncodableShape {
        /// Specifies the number of ByteMatchSet objects that you want AWS WAF to return for this request. If you have more
        /// 			ByteMatchSets objects than the number you specify for Limit, the response includes a
        /// 			NextMarker value that you can use to get another batch of ByteMatchSet objects.
        public let limit: Int?
        /// If you specify a value for Limit and you have more ByteMatchSets than the value of Limit,
        /// 			AWS WAF returns a NextMarker value in the response that allows you to list another group of ByteMatchSets.
        /// 			For the second and subsequent ListByteMatchSets requests, specify the value of NextMarker
        /// 			from the previous response to get information about another batch of ByteMatchSets.
        public let nextMarker: String?

        public init(limit: Int? = nil, nextMarker: String? = nil) {
            self.limit = limit
            self.nextMarker = nextMarker
        }

        public func validate(name: String) throws {
            try self.validate(self.limit, name: "limit", parent: name, max: 100)
            try self.validate(self.limit, name: "limit", parent: name, min: 0)
            try self.validate(self.nextMarker, name: "nextMarker", parent: name, max: 1224)
            try self.validate(self.nextMarker, name: "nextMarker", parent: name, min: 1)
            try self.validate(self.nextMarker, name: "nextMarker", parent: name, pattern: ".*\\S.*")
        }

        private enum CodingKeys: String, CodingKey {
            case limit = "Limit"
            case nextMarker = "NextMarker"
        }
    }

    public struct ListByteMatchSetsResponse: AWSDecodableShape {
        /// An array of ByteMatchSetSummary objects.
        public let byteMatchSets: [ByteMatchSetSummary]?
        /// If you have more ByteMatchSet objects than the number that you specified for Limit in the request,
        /// 			the response includes a NextMarker value. To list more ByteMatchSet objects, submit another
        /// 			ListByteMatchSets request, and specify the NextMarker value from the response in the
        /// 			NextMarker value in the next request.
        public let nextMarker: String?

        public init(byteMatchSets: [ByteMatchSetSummary]? = nil, nextMarker: String? = nil) {
            self.byteMatchSets = byteMatchSets
            self.nextMarker = nextMarker
        }

        private enum CodingKeys: String, CodingKey {
            case byteMatchSets = "ByteMatchSets"
            case nextMarker = "NextMarker"
        }
    }

    public struct ListGeoMatchSetsRequest: AWSEncodableShape {
        /// Specifies the number of GeoMatchSet objects that you want AWS WAF to return for this request. If you have more
        /// 			GeoMatchSet objects than the number you specify for Limit, the response includes a
        /// 			NextMarker value that you can use to get another batch of GeoMatchSet objects.
        public let limit: Int?
        /// If you specify a value for Limit and you have more GeoMatchSets than the value of Limit,
        /// 			AWS WAF returns a NextMarker value in the response that allows you to list another group of GeoMatchSet objects.
        /// 			For the second and subsequent ListGeoMatchSets requests, specify the value of NextMarker
        /// 			from the previous response to get information about another batch of GeoMatchSet objects.
        public let nextMarker: String?

        public init(limit: Int? = nil, nextMarker: String? = nil) {
            self.limit = limit
            self.nextMarker = nextMarker
        }

        public func validate(name: String) throws {
            try self.validate(self.limit, name: "limit", parent: name, max: 100)
            try self.validate(self.limit, name: "limit", parent: name, min: 0)
            try self.validate(self.nextMarker, name: "nextMarker", parent: name, max: 1224)
            try self.validate(self.nextMarker, name: "nextMarker", parent: name, min: 1)
            try self.validate(self.nextMarker, name: "nextMarker", parent: name, pattern: ".*\\S.*")
        }

        private enum CodingKeys: String, CodingKey {
            case limit = "Limit"
            case nextMarker = "NextMarker"
        }
    }

    public struct ListGeoMatchSetsResponse: AWSDecodableShape {
        /// An array of GeoMatchSetSummary objects.
        public let geoMatchSets: [GeoMatchSetSummary]?
        /// If you have more GeoMatchSet objects than the number that you specified for Limit in the request,
        /// 			the response includes a NextMarker value. To list more GeoMatchSet objects, submit another
        /// 			ListGeoMatchSets request, and specify the NextMarker value from the response in the
        /// 			NextMarker value in the next request.
        public let nextMarker: String?

        public init(geoMatchSets: [GeoMatchSetSummary]? = nil, nextMarker: String? = nil) {
            self.geoMatchSets = geoMatchSets
            self.nextMarker = nextMarker
        }

        private enum CodingKeys: String, CodingKey {
            case geoMatchSets = "GeoMatchSets"
            case nextMarker = "NextMarker"
        }
    }

    public struct ListIPSetsRequest: AWSEncodableShape {
        /// Specifies the number of IPSet objects that you want AWS WAF to return for this request. If you have more
        /// 			IPSet objects than the number you specify for Limit, the response includes a
        /// 			NextMarker value that you can use to get another batch of IPSet objects.
        public let limit: Int?
        /// AWS WAF returns a NextMarker value in the response that allows you to list another group of IPSets. For the second and subsequent ListIPSets requests, specify the value of NextMarker from the previous response to get information about another batch of IPSets.
        public let nextMarker: String?

        public init(limit: Int? = nil, nextMarker: String? = nil) {
            self.limit = limit
            self.nextMarker = nextMarker
        }

        public func validate(name: String) throws {
            try self.validate(self.limit, name: "limit", parent: name, max: 100)
            try self.validate(self.limit, name: "limit", parent: name, min: 0)
            try self.validate(self.nextMarker, name: "nextMarker", parent: name, max: 1224)
            try self.validate(self.nextMarker, name: "nextMarker", parent: name, min: 1)
            try self.validate(self.nextMarker, name: "nextMarker", parent: name, pattern: ".*\\S.*")
        }

        private enum CodingKeys: String, CodingKey {
            case limit = "Limit"
            case nextMarker = "NextMarker"
        }
    }

    public struct ListIPSetsResponse: AWSDecodableShape {
        /// An array of IPSetSummary objects.
        public let iPSets: [IPSetSummary]?
        /// To list more IPSet objects, submit another ListIPSets request, and in the next request use the NextMarker response value as the NextMarker value.
        public let nextMarker: String?

        public init(iPSets: [IPSetSummary]? = nil, nextMarker: String? = nil) {
            self.iPSets = iPSets
            self.nextMarker = nextMarker
        }

        private enum CodingKeys: String, CodingKey {
            case iPSets = "IPSets"
            case nextMarker = "NextMarker"
        }
    }

    public struct ListLoggingConfigurationsRequest: AWSEncodableShape {
        /// Specifies the number of LoggingConfigurations that you want AWS WAF to return for this request. If you have more LoggingConfigurations than the number that you specify for Limit, the response includes a NextMarker value that you can use to get another batch of LoggingConfigurations.
        public let limit: Int?
        /// If you specify a value for Limit and you have more LoggingConfigurations than the value of Limit,
        /// 			AWS WAF returns a NextMarker value in the response that allows you to list another group of LoggingConfigurations.
        /// 			For the second and subsequent ListLoggingConfigurations requests, specify the value of NextMarker
        /// 			from the previous response to get information about another batch of ListLoggingConfigurations.
        public let nextMarker: String?

        public init(limit: Int? = nil, nextMarker: String? = nil) {
            self.limit = limit
            self.nextMarker = nextMarker
        }

        public func validate(name: String) throws {
            try self.validate(self.limit, name: "limit", parent: name, max: 100)
            try self.validate(self.limit, name: "limit", parent: name, min: 0)
            try self.validate(self.nextMarker, name: "nextMarker", parent: name, max: 1224)
            try self.validate(self.nextMarker, name: "nextMarker", parent: name, min: 1)
            try self.validate(self.nextMarker, name: "nextMarker", parent: name, pattern: ".*\\S.*")
        }

        private enum CodingKeys: String, CodingKey {
            case limit = "Limit"
            case nextMarker = "NextMarker"
        }
    }

    public struct ListLoggingConfigurationsResponse: AWSDecodableShape {
        /// An array of LoggingConfiguration objects.
        public let loggingConfigurations: [LoggingConfiguration]?
        /// If you have more LoggingConfigurations than the number that you specified for Limit in the request, the response includes a NextMarker value. To list more LoggingConfigurations, submit another ListLoggingConfigurations request, and specify the NextMarker value from the response in the NextMarker value in the next request.
        public let nextMarker: String?

        public init(loggingConfigurations: [LoggingConfiguration]? = nil, nextMarker: String? = nil) {
            self.loggingConfigurations = loggingConfigurations
            self.nextMarker = nextMarker
        }

        private enum CodingKeys: String, CodingKey {
            case loggingConfigurations = "LoggingConfigurations"
            case nextMarker = "NextMarker"
        }
    }

    public struct ListRateBasedRulesRequest: AWSEncodableShape {
        /// Specifies the number of Rules that you want AWS WAF to return for this request. If you have more Rules than the number that you specify for Limit, the response includes a NextMarker value that you can use to get another batch of Rules.
        public let limit: Int?
        /// If you specify a value for Limit and you have more Rules than the value of Limit, AWS WAF returns a NextMarker value in the response that allows you to list another group of Rules. For the second and subsequent ListRateBasedRules requests, specify the value of NextMarker from the previous response to get information about another batch of Rules.
        public let nextMarker: String?

        public init(limit: Int? = nil, nextMarker: String? = nil) {
            self.limit = limit
            self.nextMarker = nextMarker
        }

        public func validate(name: String) throws {
            try self.validate(self.limit, name: "limit", parent: name, max: 100)
            try self.validate(self.limit, name: "limit", parent: name, min: 0)
            try self.validate(self.nextMarker, name: "nextMarker", parent: name, max: 1224)
            try self.validate(self.nextMarker, name: "nextMarker", parent: name, min: 1)
            try self.validate(self.nextMarker, name: "nextMarker", parent: name, pattern: ".*\\S.*")
        }

        private enum CodingKeys: String, CodingKey {
            case limit = "Limit"
            case nextMarker = "NextMarker"
        }
    }

    public struct ListRateBasedRulesResponse: AWSDecodableShape {
        /// If you have more Rules than the number that you specified for Limit in the request, the response includes a NextMarker value. To list more Rules, submit another ListRateBasedRules request, and specify the NextMarker value from the response in the NextMarker value in the next request.
        public let nextMarker: String?
        /// An array of RuleSummary objects.
        public let rules: [RuleSummary]?

        public init(nextMarker: String? = nil, rules: [RuleSummary]? = nil) {
            self.nextMarker = nextMarker
            self.rules = rules
        }

        private enum CodingKeys: String, CodingKey {
            case nextMarker = "NextMarker"
            case rules = "Rules"
        }
    }

    public struct ListRegexMatchSetsRequest: AWSEncodableShape {
        /// Specifies the number of RegexMatchSet objects that you want AWS WAF to return for this request. If you have more
        /// 			RegexMatchSet objects than the number you specify for Limit, the response includes a
        /// 			NextMarker value that you can use to get another batch of RegexMatchSet objects.
        public let limit: Int?
        /// If you specify a value for Limit and you have more RegexMatchSet objects than the value of Limit,
        /// 			AWS WAF returns a NextMarker value in the response that allows you to list another group of ByteMatchSets.
        /// 			For the second and subsequent ListRegexMatchSets requests, specify the value of NextMarker
        /// 			from the previous response to get information about another batch of RegexMatchSet objects.
        public let nextMarker: String?

        public init(limit: Int? = nil, nextMarker: String? = nil) {
            self.limit = limit
            self.nextMarker = nextMarker
        }

        public func validate(name: String) throws {
            try self.validate(self.limit, name: "limit", parent: name, max: 100)
            try self.validate(self.limit, name: "limit", parent: name, min: 0)
            try self.validate(self.nextMarker, name: "nextMarker", parent: name, max: 1224)
            try self.validate(self.nextMarker, name: "nextMarker", parent: name, min: 1)
            try self.validate(self.nextMarker, name: "nextMarker", parent: name, pattern: ".*\\S.*")
        }

        private enum CodingKeys: String, CodingKey {
            case limit = "Limit"
            case nextMarker = "NextMarker"
        }
    }

    public struct ListRegexMatchSetsResponse: AWSDecodableShape {
        /// If you have more RegexMatchSet objects than the number that you specified for Limit in the request,
        /// 			the response includes a NextMarker value. To list more RegexMatchSet objects, submit another
        /// 			ListRegexMatchSets request, and specify the NextMarker value from the response in the
        /// 			NextMarker value in the next request.
        public let nextMarker: String?
        /// An array of RegexMatchSetSummary objects.
        public let regexMatchSets: [RegexMatchSetSummary]?

        public init(nextMarker: String? = nil, regexMatchSets: [RegexMatchSetSummary]? = nil) {
            self.nextMarker = nextMarker
            self.regexMatchSets = regexMatchSets
        }

        private enum CodingKeys: String, CodingKey {
            case nextMarker = "NextMarker"
            case regexMatchSets = "RegexMatchSets"
        }
    }

    public struct ListRegexPatternSetsRequest: AWSEncodableShape {
        /// Specifies the number of RegexPatternSet objects that you want AWS WAF to return for this request. If you have more
        /// 			RegexPatternSet objects than the number you specify for Limit, the response includes a
        /// 			NextMarker value that you can use to get another batch of RegexPatternSet objects.
        public let limit: Int?
        /// If you specify a value for Limit and you have more RegexPatternSet objects than the value of Limit,
        /// 			AWS WAF returns a NextMarker value in the response that allows you to list another group of RegexPatternSet objects.
        /// 			For the second and subsequent ListRegexPatternSets requests, specify the value of NextMarker
        /// 			from the previous response to get information about another batch of RegexPatternSet objects.
        public let nextMarker: String?

        public init(limit: Int? = nil, nextMarker: String? = nil) {
            self.limit = limit
            self.nextMarker = nextMarker
        }

        public func validate(name: String) throws {
            try self.validate(self.limit, name: "limit", parent: name, max: 100)
            try self.validate(self.limit, name: "limit", parent: name, min: 0)
            try self.validate(self.nextMarker, name: "nextMarker", parent: name, max: 1224)
            try self.validate(self.nextMarker, name: "nextMarker", parent: name, min: 1)
            try self.validate(self.nextMarker, name: "nextMarker", parent: name, pattern: ".*\\S.*")
        }

        private enum CodingKeys: String, CodingKey {
            case limit = "Limit"
            case nextMarker = "NextMarker"
        }
    }

    public struct ListRegexPatternSetsResponse: AWSDecodableShape {
        /// If you have more RegexPatternSet objects than the number that you specified for Limit in the request,
        /// 			the response includes a NextMarker value. To list more RegexPatternSet objects, submit another
        /// 			ListRegexPatternSets request, and specify the NextMarker value from the response in the
        /// 			NextMarker value in the next request.
        public let nextMarker: String?
        /// An array of RegexPatternSetSummary objects.
        public let regexPatternSets: [RegexPatternSetSummary]?

        public init(nextMarker: String? = nil, regexPatternSets: [RegexPatternSetSummary]? = nil) {
            self.nextMarker = nextMarker
            self.regexPatternSets = regexPatternSets
        }

        private enum CodingKeys: String, CodingKey {
            case nextMarker = "NextMarker"
            case regexPatternSets = "RegexPatternSets"
        }
    }

    public struct ListRuleGroupsRequest: AWSEncodableShape {
        /// Specifies the number of RuleGroups that you want AWS WAF to return for this request. If you have more RuleGroups than the number that you specify for Limit, the response includes a NextMarker value that you can use to get another batch of RuleGroups.
        public let limit: Int?
        /// If you specify a value for Limit and you have more RuleGroups than the value of Limit,  AWS WAF returns a NextMarker value in the response that allows you to list another group of RuleGroups.  For the second and subsequent ListRuleGroups requests, specify the value of NextMarker  from the previous response to get information about another batch of RuleGroups.
        public let nextMarker: String?

        public init(limit: Int? = nil, nextMarker: String? = nil) {
            self.limit = limit
            self.nextMarker = nextMarker
        }

        public func validate(name: String) throws {
            try self.validate(self.limit, name: "limit", parent: name, max: 100)
            try self.validate(self.limit, name: "limit", parent: name, min: 0)
            try self.validate(self.nextMarker, name: "nextMarker", parent: name, max: 1224)
            try self.validate(self.nextMarker, name: "nextMarker", parent: name, min: 1)
            try self.validate(self.nextMarker, name: "nextMarker", parent: name, pattern: ".*\\S.*")
        }

        private enum CodingKeys: String, CodingKey {
            case limit = "Limit"
            case nextMarker = "NextMarker"
        }
    }

    public struct ListRuleGroupsResponse: AWSDecodableShape {
        /// If you have more RuleGroups than the number that you specified for Limit in the request, the response includes a NextMarker value. To list more RuleGroups, submit another ListRuleGroups request, and specify the NextMarker value from the response in the NextMarker value in the next request.
        public let nextMarker: String?
        /// An array of RuleGroup objects.
        public let ruleGroups: [RuleGroupSummary]?

        public init(nextMarker: String? = nil, ruleGroups: [RuleGroupSummary]? = nil) {
            self.nextMarker = nextMarker
            self.ruleGroups = ruleGroups
        }

        private enum CodingKeys: String, CodingKey {
            case nextMarker = "NextMarker"
            case ruleGroups = "RuleGroups"
        }
    }

    public struct ListRulesRequest: AWSEncodableShape {
        /// Specifies the number of Rules that you want AWS WAF to return for this request. If you have more 			Rules than the number that you specify for Limit, the response includes a
        /// 			NextMarker value that you can use to get another batch of Rules.
        public let limit: Int?
        /// If you specify a value for Limit and you have more Rules than the value of Limit,
        /// 			AWS WAF returns a NextMarker value in the response that allows you to list another group of Rules.
        /// 			For the second and subsequent ListRules requests, specify the value of NextMarker
        /// 			from the previous response to get information about another batch of Rules.
        public let nextMarker: String?

        public init(limit: Int? = nil, nextMarker: String? = nil) {
            self.limit = limit
            self.nextMarker = nextMarker
        }

        public func validate(name: String) throws {
            try self.validate(self.limit, name: "limit", parent: name, max: 100)
            try self.validate(self.limit, name: "limit", parent: name, min: 0)
            try self.validate(self.nextMarker, name: "nextMarker", parent: name, max: 1224)
            try self.validate(self.nextMarker, name: "nextMarker", parent: name, min: 1)
            try self.validate(self.nextMarker, name: "nextMarker", parent: name, pattern: ".*\\S.*")
        }

        private enum CodingKeys: String, CodingKey {
            case limit = "Limit"
            case nextMarker = "NextMarker"
        }
    }

    public struct ListRulesResponse: AWSDecodableShape {
        /// If you have more Rules than the number that you specified for Limit in the request, 			the response includes a NextMarker value. To list more Rules, submit another
        /// 			ListRules request, and specify the NextMarker value from the response in the
        /// 			NextMarker value in the next request.
        public let nextMarker: String?
        /// An array of RuleSummary objects.
        public let rules: [RuleSummary]?

        public init(nextMarker: String? = nil, rules: [RuleSummary]? = nil) {
            self.nextMarker = nextMarker
            self.rules = rules
        }

        private enum CodingKeys: String, CodingKey {
            case nextMarker = "NextMarker"
            case rules = "Rules"
        }
    }

    public struct ListSizeConstraintSetsRequest: AWSEncodableShape {
        /// Specifies the number of SizeConstraintSet objects that you want AWS WAF to return for this request. If you have more
        /// 			SizeConstraintSets objects than the number you specify for Limit, the response includes a
        /// 			NextMarker value that you can use to get another batch of SizeConstraintSet objects.
        public let limit: Int?
        /// If you specify a value for Limit and you have more SizeConstraintSets than the value of Limit,
        /// 			AWS WAF returns a NextMarker value in the response that allows you to list another group of SizeConstraintSets.
        /// 			For the second and subsequent ListSizeConstraintSets requests, specify the value of NextMarker 			from the previous response to get information about another batch of SizeConstraintSets.
        public let nextMarker: String?

        public init(limit: Int? = nil, nextMarker: String? = nil) {
            self.limit = limit
            self.nextMarker = nextMarker
        }

        public func validate(name: String) throws {
            try self.validate(self.limit, name: "limit", parent: name, max: 100)
            try self.validate(self.limit, name: "limit", parent: name, min: 0)
            try self.validate(self.nextMarker, name: "nextMarker", parent: name, max: 1224)
            try self.validate(self.nextMarker, name: "nextMarker", parent: name, min: 1)
            try self.validate(self.nextMarker, name: "nextMarker", parent: name, pattern: ".*\\S.*")
        }

        private enum CodingKeys: String, CodingKey {
            case limit = "Limit"
            case nextMarker = "NextMarker"
        }
    }

    public struct ListSizeConstraintSetsResponse: AWSDecodableShape {
        /// If you have more SizeConstraintSet objects than the number that you specified for Limit in the request,
        /// 			the response includes a NextMarker value. To list more SizeConstraintSet objects, submit another
        /// 			ListSizeConstraintSets request, and specify the NextMarker value from the response in the
        /// 			NextMarker value in the next request.
        public let nextMarker: String?
        /// An array of SizeConstraintSetSummary objects.
        public let sizeConstraintSets: [SizeConstraintSetSummary]?

        public init(nextMarker: String? = nil, sizeConstraintSets: [SizeConstraintSetSummary]? = nil) {
            self.nextMarker = nextMarker
            self.sizeConstraintSets = sizeConstraintSets
        }

        private enum CodingKeys: String, CodingKey {
            case nextMarker = "NextMarker"
            case sizeConstraintSets = "SizeConstraintSets"
        }
    }

    public struct ListSqlInjectionMatchSetsRequest: AWSEncodableShape {
        /// Specifies the number of SqlInjectionMatchSet objects that you want AWS WAF to return for this request. If you have more
        /// 			SqlInjectionMatchSet objects than the number you specify for Limit, the response includes a
        /// 			NextMarker value that you can use to get another batch of Rules.
        public let limit: Int?
        /// If you specify a value for Limit and you have more SqlInjectionMatchSet objects than the value of
        /// 			Limit, AWS WAF returns a NextMarker value in the response that allows you to list another group of
        /// 			SqlInjectionMatchSets. For the second and subsequent ListSqlInjectionMatchSets requests, specify the
        /// 			value of NextMarker from the previous response to get information about another batch of SqlInjectionMatchSets.
        public let nextMarker: String?

        public init(limit: Int? = nil, nextMarker: String? = nil) {
            self.limit = limit
            self.nextMarker = nextMarker
        }

        public func validate(name: String) throws {
            try self.validate(self.limit, name: "limit", parent: name, max: 100)
            try self.validate(self.limit, name: "limit", parent: name, min: 0)
            try self.validate(self.nextMarker, name: "nextMarker", parent: name, max: 1224)
            try self.validate(self.nextMarker, name: "nextMarker", parent: name, min: 1)
            try self.validate(self.nextMarker, name: "nextMarker", parent: name, pattern: ".*\\S.*")
        }

        private enum CodingKeys: String, CodingKey {
            case limit = "Limit"
            case nextMarker = "NextMarker"
        }
    }

    public struct ListSqlInjectionMatchSetsResponse: AWSDecodableShape {
        /// If you have more SqlInjectionMatchSet objects than the number that you specified for Limit in the request,
        /// 			the response includes a NextMarker value. To list more SqlInjectionMatchSet objects, submit another
        /// 			ListSqlInjectionMatchSets request, and specify the NextMarker value from the response in the
        /// 			NextMarker value in the next request.
        public let nextMarker: String?
        /// An array of SqlInjectionMatchSetSummary objects.
        public let sqlInjectionMatchSets: [SqlInjectionMatchSetSummary]?

        public init(nextMarker: String? = nil, sqlInjectionMatchSets: [SqlInjectionMatchSetSummary]? = nil) {
            self.nextMarker = nextMarker
            self.sqlInjectionMatchSets = sqlInjectionMatchSets
        }

        private enum CodingKeys: String, CodingKey {
            case nextMarker = "NextMarker"
            case sqlInjectionMatchSets = "SqlInjectionMatchSets"
        }
    }

    public struct ListSubscribedRuleGroupsRequest: AWSEncodableShape {
        /// Specifies the number of subscribed rule groups that you want AWS WAF to return for this request. If you have more
        /// 			objects than the number you specify for Limit, the response includes a
        /// 			NextMarker value that you can use to get another batch of objects.
        public let limit: Int?
        /// If you specify a value for Limit and you have more ByteMatchSetssubscribed rule groups than the value of Limit,
        /// 			AWS WAF returns a NextMarker value in the response that allows you to list another group of subscribed rule groups.
        /// 			For the second and subsequent ListSubscribedRuleGroupsRequest requests, specify the value of NextMarker
        /// 			from the previous response to get information about another batch of subscribed rule groups.
        public let nextMarker: String?

        public init(limit: Int? = nil, nextMarker: String? = nil) {
            self.limit = limit
            self.nextMarker = nextMarker
        }

        public func validate(name: String) throws {
            try self.validate(self.limit, name: "limit", parent: name, max: 100)
            try self.validate(self.limit, name: "limit", parent: name, min: 0)
            try self.validate(self.nextMarker, name: "nextMarker", parent: name, max: 1224)
            try self.validate(self.nextMarker, name: "nextMarker", parent: name, min: 1)
            try self.validate(self.nextMarker, name: "nextMarker", parent: name, pattern: ".*\\S.*")
        }

        private enum CodingKeys: String, CodingKey {
            case limit = "Limit"
            case nextMarker = "NextMarker"
        }
    }

    public struct ListSubscribedRuleGroupsResponse: AWSDecodableShape {
        /// If you have more objects than the number that you specified for Limit in the request,
        /// 			the response includes a NextMarker value. To list more objects, submit another
        /// 			ListSubscribedRuleGroups request, and specify the NextMarker value from the response in the
        /// 			NextMarker value in the next request.
        public let nextMarker: String?
        /// An array of RuleGroup objects.
        public let ruleGroups: [SubscribedRuleGroupSummary]?

        public init(nextMarker: String? = nil, ruleGroups: [SubscribedRuleGroupSummary]? = nil) {
            self.nextMarker = nextMarker
            self.ruleGroups = ruleGroups
        }

        private enum CodingKeys: String, CodingKey {
            case nextMarker = "NextMarker"
            case ruleGroups = "RuleGroups"
        }
    }

    public struct ListTagsForResourceRequest: AWSEncodableShape {
        public let limit: Int?
        public let nextMarker: String?
        public let resourceARN: String

        public init(limit: Int? = nil, nextMarker: String? = nil, resourceARN: String) {
            self.limit = limit
            self.nextMarker = nextMarker
            self.resourceARN = resourceARN
        }

        public func validate(name: String) throws {
            try self.validate(self.limit, name: "limit", parent: name, max: 100)
            try self.validate(self.limit, name: "limit", parent: name, min: 0)
            try self.validate(self.nextMarker, name: "nextMarker", parent: name, max: 1224)
            try self.validate(self.nextMarker, name: "nextMarker", parent: name, min: 1)
            try self.validate(self.nextMarker, name: "nextMarker", parent: name, pattern: ".*\\S.*")
            try self.validate(self.resourceARN, name: "resourceARN", parent: name, max: 1224)
            try self.validate(self.resourceARN, name: "resourceARN", parent: name, min: 1)
            try self.validate(self.resourceARN, name: "resourceARN", parent: name, pattern: ".*\\S.*")
        }

        private enum CodingKeys: String, CodingKey {
            case limit = "Limit"
            case nextMarker = "NextMarker"
            case resourceARN = "ResourceARN"
        }
    }

    public struct ListTagsForResourceResponse: AWSDecodableShape {
        public let nextMarker: String?
        public let tagInfoForResource: TagInfoForResource?

        public init(nextMarker: String? = nil, tagInfoForResource: TagInfoForResource? = nil) {
            self.nextMarker = nextMarker
            self.tagInfoForResource = tagInfoForResource
        }

        private enum CodingKeys: String, CodingKey {
            case nextMarker = "NextMarker"
            case tagInfoForResource = "TagInfoForResource"
        }
    }

    public struct ListWebACLsRequest: AWSEncodableShape {
        /// Specifies the number of WebACL objects that you want AWS WAF to return for this request. If you have more
        /// 			WebACL objects than the number that you specify for Limit, the response includes a
        /// 			NextMarker value that you can use to get another batch of WebACL objects.
        public let limit: Int?
        /// If you specify a value for Limit and you have more WebACL objects than the number that you specify
        /// 			for Limit, AWS WAF returns a NextMarker value in the response that allows you to list another group of
        /// 			WebACL objects. For the second and subsequent ListWebACLs requests, specify the value of NextMarker
        /// 			from the previous response to get information about another batch of WebACL objects.
        public let nextMarker: String?

        public init(limit: Int? = nil, nextMarker: String? = nil) {
            self.limit = limit
            self.nextMarker = nextMarker
        }

        public func validate(name: String) throws {
            try self.validate(self.limit, name: "limit", parent: name, max: 100)
            try self.validate(self.limit, name: "limit", parent: name, min: 0)
            try self.validate(self.nextMarker, name: "nextMarker", parent: name, max: 1224)
            try self.validate(self.nextMarker, name: "nextMarker", parent: name, min: 1)
            try self.validate(self.nextMarker, name: "nextMarker", parent: name, pattern: ".*\\S.*")
        }

        private enum CodingKeys: String, CodingKey {
            case limit = "Limit"
            case nextMarker = "NextMarker"
        }
    }

    public struct ListWebACLsResponse: AWSDecodableShape {
        /// If you have more WebACL objects than the number that you specified for Limit in the request,
        /// 			the response includes a NextMarker value. To list more WebACL objects, submit another
        /// 			ListWebACLs request, and specify the NextMarker value from the response in the
        /// 			NextMarker value in the next request.
        public let nextMarker: String?
        /// An array of WebACLSummary objects.
        public let webACLs: [WebACLSummary]?

        public init(nextMarker: String? = nil, webACLs: [WebACLSummary]? = nil) {
            self.nextMarker = nextMarker
            self.webACLs = webACLs
        }

        private enum CodingKeys: String, CodingKey {
            case nextMarker = "NextMarker"
            case webACLs = "WebACLs"
        }
    }

    public struct ListXssMatchSetsRequest: AWSEncodableShape {
        /// Specifies the number of XssMatchSet objects that you want AWS WAF to return for this request. If you have more
        /// 			XssMatchSet objects than the number you specify for Limit, the response includes a
        /// 			NextMarker value that you can use to get another batch of Rules.
        public let limit: Int?
        /// If you specify a value for Limit and you have more XssMatchSet objects than the value of
        /// 			Limit, AWS WAF returns a NextMarker value in the response that allows you to list another group of
        /// 			XssMatchSets. For the second and subsequent ListXssMatchSets requests, specify the
        /// 			value of NextMarker from the previous response to get information about another batch of XssMatchSets.
        public let nextMarker: String?

        public init(limit: Int? = nil, nextMarker: String? = nil) {
            self.limit = limit
            self.nextMarker = nextMarker
        }

        public func validate(name: String) throws {
            try self.validate(self.limit, name: "limit", parent: name, max: 100)
            try self.validate(self.limit, name: "limit", parent: name, min: 0)
            try self.validate(self.nextMarker, name: "nextMarker", parent: name, max: 1224)
            try self.validate(self.nextMarker, name: "nextMarker", parent: name, min: 1)
            try self.validate(self.nextMarker, name: "nextMarker", parent: name, pattern: ".*\\S.*")
        }

        private enum CodingKeys: String, CodingKey {
            case limit = "Limit"
            case nextMarker = "NextMarker"
        }
    }

    public struct ListXssMatchSetsResponse: AWSDecodableShape {
        /// If you have more XssMatchSet objects than the number that you specified for Limit in the request,
        /// 			the response includes a NextMarker value. To list more XssMatchSet objects, submit another
        /// 			ListXssMatchSets request, and specify the NextMarker value from the response in the
        /// 			NextMarker value in the next request.
        public let nextMarker: String?
        /// An array of XssMatchSetSummary objects.
        public let xssMatchSets: [XssMatchSetSummary]?

        public init(nextMarker: String? = nil, xssMatchSets: [XssMatchSetSummary]? = nil) {
            self.nextMarker = nextMarker
            self.xssMatchSets = xssMatchSets
        }

        private enum CodingKeys: String, CodingKey {
            case nextMarker = "NextMarker"
            case xssMatchSets = "XssMatchSets"
        }
    }

    public struct LoggingConfiguration: AWSEncodableShape & AWSDecodableShape {
        /// An array of Amazon Kinesis Data Firehose ARNs.
        public let logDestinationConfigs: [String]
        /// The parts of the request that you want redacted from the logs. For example, if you redact the cookie field, the cookie field in the firehose will be xxx.
        public let redactedFields: [FieldToMatch]?
        /// The Amazon Resource Name (ARN) of the web ACL that you want to associate with LogDestinationConfigs.
        public let resourceArn: String

        public init(logDestinationConfigs: [String], redactedFields: [FieldToMatch]? = nil, resourceArn: String) {
            self.logDestinationConfigs = logDestinationConfigs
            self.redactedFields = redactedFields
            self.resourceArn = resourceArn
        }

        public func validate(name: String) throws {
            try self.logDestinationConfigs.forEach {
                try validate($0, name: "logDestinationConfigs[]", parent: name, max: 1224)
                try validate($0, name: "logDestinationConfigs[]", parent: name, min: 1)
                try validate($0, name: "logDestinationConfigs[]", parent: name, pattern: ".*\\S.*")
            }
            try self.validate(self.logDestinationConfigs, name: "logDestinationConfigs", parent: name, max: 1)
            try self.validate(self.logDestinationConfigs, name: "logDestinationConfigs", parent: name, min: 1)
            try self.redactedFields?.forEach {
                try $0.validate(name: "\(name).redactedFields[]")
            }
            try self.validate(self.resourceArn, name: "resourceArn", parent: name, max: 1224)
            try self.validate(self.resourceArn, name: "resourceArn", parent: name, min: 1)
            try self.validate(self.resourceArn, name: "resourceArn", parent: name, pattern: ".*\\S.*")
        }

        private enum CodingKeys: String, CodingKey {
            case logDestinationConfigs = "LogDestinationConfigs"
            case redactedFields = "RedactedFields"
            case resourceArn = "ResourceArn"
        }
    }

    public struct Predicate: AWSEncodableShape & AWSDecodableShape {
        /// A unique identifier for a predicate in a Rule, such as ByteMatchSetId or IPSetId.
        /// 			The ID is returned by the corresponding Create or List command.
        public let dataId: String
        /// Set Negated to False if you want AWS WAF to allow, block, or count requests based on the settings in the
        /// 		       specified ByteMatchSet, IPSet, SqlInjectionMatchSet, XssMatchSet, RegexMatchSet,  GeoMatchSet,  or SizeConstraintSet.
        /// 			For example, if an IPSet includes the IP address 192.0.2.44, AWS WAF will allow or block requests based on that IP address.
        /// 		       Set Negated to True if you want AWS WAF to allow or block a request based on the negation
        /// 		       of the settings in the ByteMatchSet, IPSet, SqlInjectionMatchSet, XssMatchSet, RegexMatchSet,  GeoMatchSet, or SizeConstraintSet.
        /// 			For example, if an IPSet includes the IP address 192.0.2.44, AWS WAF will allow, block, or count requests based on
        /// 			all IP addresses except  192.0.2.44.
        public let negated: Bool
        /// The type of predicate in a Rule, such as ByteMatch or IPSet.
        public let type: PredicateType

        public init(dataId: String, negated: Bool, type: PredicateType) {
            self.dataId = dataId
            self.negated = negated
            self.type = type
        }

        public func validate(name: String) throws {
            try self.validate(self.dataId, name: "dataId", parent: name, max: 128)
            try self.validate(self.dataId, name: "dataId", parent: name, min: 1)
            try self.validate(self.dataId, name: "dataId", parent: name, pattern: ".*\\S.*")
        }

        private enum CodingKeys: String, CodingKey {
            case dataId = "DataId"
            case negated = "Negated"
            case type = "Type"
        }
    }

    public struct PutLoggingConfigurationRequest: AWSEncodableShape {
        /// The Amazon Kinesis Data Firehose that contains the inspected traffic information, the redacted fields details, and the Amazon Resource Name (ARN) of the web ACL to monitor.  When specifying Type in RedactedFields, you must use one of the following values: URI, QUERY_STRING, HEADER, or METHOD.
        public let loggingConfiguration: LoggingConfiguration

        public init(loggingConfiguration: LoggingConfiguration) {
            self.loggingConfiguration = loggingConfiguration
        }

        public func validate(name: String) throws {
            try self.loggingConfiguration.validate(name: "\(name).loggingConfiguration")
        }

        private enum CodingKeys: String, CodingKey {
            case loggingConfiguration = "LoggingConfiguration"
        }
    }

    public struct PutLoggingConfigurationResponse: AWSDecodableShape {
        /// The LoggingConfiguration that you submitted in the request.
        public let loggingConfiguration: LoggingConfiguration?

        public init(loggingConfiguration: LoggingConfiguration? = nil) {
            self.loggingConfiguration = loggingConfiguration
        }

        private enum CodingKeys: String, CodingKey {
            case loggingConfiguration = "LoggingConfiguration"
        }
    }

    public struct PutPermissionPolicyRequest: AWSEncodableShape {
        /// The policy to attach to the specified RuleGroup.
        public let policy: String
        /// The Amazon Resource Name (ARN) of the RuleGroup to which you want to attach the policy.
        public let resourceArn: String

        public init(policy: String, resourceArn: String) {
            self.policy = policy
            self.resourceArn = resourceArn
        }

        public func validate(name: String) throws {
            try self.validate(self.policy, name: "policy", parent: name, max: 395_000)
            try self.validate(self.policy, name: "policy", parent: name, min: 1)
            try self.validate(self.policy, name: "policy", parent: name, pattern: ".*\\S.*")
            try self.validate(self.resourceArn, name: "resourceArn", parent: name, max: 1224)
            try self.validate(self.resourceArn, name: "resourceArn", parent: name, min: 1)
            try self.validate(self.resourceArn, name: "resourceArn", parent: name, pattern: ".*\\S.*")
        }

        private enum CodingKeys: String, CodingKey {
            case policy = "Policy"
            case resourceArn = "ResourceArn"
        }
    }

    public struct PutPermissionPolicyResponse: AWSDecodableShape {
        public init() {}
    }

    public struct RateBasedRule: AWSDecodableShape {
        /// The Predicates object contains one Predicate element for each ByteMatchSet, IPSet, or SqlInjectionMatchSet object that you want to include in a RateBasedRule.
        public let matchPredicates: [Predicate]
        /// A friendly name or description for the metrics for a RateBasedRule. The name can contain only alphanumeric characters (A-Z, a-z, 0-9), with maximum length 128 and minimum length one. It can't contain whitespace or metric names reserved for AWS WAF, including "All" and "Default_Action." You can't change the name of the metric after you create the RateBasedRule.
        public let metricName: String?
        /// A friendly name or description for a RateBasedRule. You can't change the name of a RateBasedRule after you create it.
        public let name: String?
        /// The field that AWS WAF uses to determine if requests are likely arriving from single source and thus subject to rate monitoring. The only valid value for RateKey is IP. IP indicates that requests arriving from the same IP address are subject to the RateLimit that is specified in the RateBasedRule.
        public let rateKey: RateKey
        /// The maximum number of requests, which have an identical value in the field specified by the RateKey, allowed in a five-minute period. If the number of requests exceeds the RateLimit and the other predicates specified in the rule are also met, AWS WAF triggers the action that is specified for this rule.
        public let rateLimit: Int64
        /// A unique identifier for a RateBasedRule. You use RuleId to get more information about a RateBasedRule (see GetRateBasedRule), update a RateBasedRule (see UpdateRateBasedRule), insert a RateBasedRule into a WebACL or delete one from a WebACL (see UpdateWebACL), or delete a RateBasedRule from AWS WAF (see DeleteRateBasedRule).
        public let ruleId: String

        public init(matchPredicates: [Predicate], metricName: String? = nil, name: String? = nil, rateKey: RateKey, rateLimit: Int64, ruleId: String) {
            self.matchPredicates = matchPredicates
            self.metricName = metricName
            self.name = name
            self.rateKey = rateKey
            self.rateLimit = rateLimit
            self.ruleId = ruleId
        }

        private enum CodingKeys: String, CodingKey {
            case matchPredicates = "MatchPredicates"
            case metricName = "MetricName"
            case name = "Name"
            case rateKey = "RateKey"
            case rateLimit = "RateLimit"
            case ruleId = "RuleId"
        }
    }

    public struct RegexMatchSet: AWSDecodableShape {
        /// A friendly name or description of the RegexMatchSet. You can't change Name after you create a
        /// 			RegexMatchSet.
        public let name: String?
        /// The RegexMatchSetId for a RegexMatchSet. You use RegexMatchSetId to get information about a
        /// 			RegexMatchSet (see GetRegexMatchSet), update a RegexMatchSet (see UpdateRegexMatchSet),
        /// 			insert a RegexMatchSet into a Rule or delete one from a Rule (see UpdateRule), and
        /// 			delete a RegexMatchSet from AWS WAF (see DeleteRegexMatchSet).
        /// 		        RegexMatchSetId is returned by CreateRegexMatchSet and by ListRegexMatchSets.
        public let regexMatchSetId: String?
        /// Contains an array of RegexMatchTuple objects. Each RegexMatchTuple
        /// 				object contains:
        /// 		         The part of a web request that you want AWS WAF to inspect, such as a query string or the value of the User-Agent header.    The identifier of the pattern (a regular expression) that you want AWS WAF to look for. For more information, see RegexPatternSet.   Whether to perform any conversions on the request, such as converting it to lowercase, before inspecting it for the specified string.
        ///
        public let regexMatchTuples: [RegexMatchTuple]?

        public init(name: String? = nil, regexMatchSetId: String? = nil, regexMatchTuples: [RegexMatchTuple]? = nil) {
            self.name = name
            self.regexMatchSetId = regexMatchSetId
            self.regexMatchTuples = regexMatchTuples
        }

        private enum CodingKeys: String, CodingKey {
            case name = "Name"
            case regexMatchSetId = "RegexMatchSetId"
            case regexMatchTuples = "RegexMatchTuples"
        }
    }

    public struct RegexMatchSetSummary: AWSDecodableShape {
        /// A friendly name or description of the RegexMatchSet. You can't change Name after you create a RegexMatchSet.
        public let name: String
        /// The RegexMatchSetId for a RegexMatchSet. You use RegexMatchSetId to get information about a RegexMatchSet,
        /// 			update a RegexMatchSet, remove a RegexMatchSet from a Rule, and delete a RegexMatchSet from AWS WAF.
        /// 		        RegexMatchSetId is returned by CreateRegexMatchSet and by ListRegexMatchSets.
        public let regexMatchSetId: String

        public init(name: String, regexMatchSetId: String) {
            self.name = name
            self.regexMatchSetId = regexMatchSetId
        }

        private enum CodingKeys: String, CodingKey {
            case name = "Name"
            case regexMatchSetId = "RegexMatchSetId"
        }
    }

    public struct RegexMatchSetUpdate: AWSEncodableShape {
        /// Specifies whether to insert or delete a RegexMatchTuple.
        public let action: ChangeAction
        /// Information about the part of a web request that you want AWS WAF to inspect and the identifier of the regular expression (regex) pattern that you want AWS WAF to search for. If you specify DELETE for the value of Action, the RegexMatchTuple values must  exactly match the values in the RegexMatchTuple that you want to delete from the RegexMatchSet.
        public let regexMatchTuple: RegexMatchTuple

        public init(action: ChangeAction, regexMatchTuple: RegexMatchTuple) {
            self.action = action
            self.regexMatchTuple = regexMatchTuple
        }

        public func validate(name: String) throws {
            try self.regexMatchTuple.validate(name: "\(name).regexMatchTuple")
        }

        private enum CodingKeys: String, CodingKey {
            case action = "Action"
            case regexMatchTuple = "RegexMatchTuple"
        }
    }

    public struct RegexMatchTuple: AWSEncodableShape & AWSDecodableShape {
        /// Specifies where in a web request to look for the RegexPatternSet.
        public let fieldToMatch: FieldToMatch
        /// The RegexPatternSetId for a RegexPatternSet. You use RegexPatternSetId to get information about a
        /// 			RegexPatternSet (see GetRegexPatternSet), update a RegexPatternSet (see UpdateRegexPatternSet),
        /// 			insert a RegexPatternSet into a RegexMatchSet or delete one from a RegexMatchSet (see UpdateRegexMatchSet), and
        /// 			delete an RegexPatternSet from AWS WAF (see DeleteRegexPatternSet).
        ///
        /// 		          RegexPatternSetId is returned by CreateRegexPatternSet and by ListRegexPatternSets.
        public let regexPatternSetId: String
        /// Text transformations eliminate some of the unusual formatting that attackers use in web requests in an effort to bypass AWS WAF.
        /// 			If you specify a transformation, AWS WAF performs the transformation on RegexPatternSet before inspecting a request for a match.	 You can only specify a single type of TextTransformation.
        /// 		        CMD_LINE
        /// 		       When you're concerned that attackers are injecting an operating system commandline command and using unusual formatting to disguise some or all of the command, use this option to perform the following transformations:
        /// 		         Delete the following characters: \ " ' ^   Delete spaces before the following characters: / (   Replace the following characters with a space: , ;   Replace multiple spaces with one space   Convert uppercase letters (A-Z) to lowercase (a-z)
        ///
        /// 		        COMPRESS_WHITE_SPACE
        /// 		       Use this option to replace the following characters with a space character (decimal 32):
        /// 		         \f, formfeed, decimal 12   \t, tab, decimal 9   \n, newline, decimal 10   \r, carriage return, decimal 13   \v, vertical tab, decimal 11   non-breaking space, decimal 160
        /// 		        COMPRESS_WHITE_SPACE also replaces multiple spaces with one space.
        /// 		        HTML_ENTITY_DECODE
        /// 		       Use this option to replace HTML-encoded characters with unencoded characters. HTML_ENTITY_DECODE performs
        /// 			the following operations:
        /// 		         Replaces (ampersand)quot; with "    Replaces (ampersand)nbsp; with a non-breaking space, decimal 160   Replaces (ampersand)lt; with a "less than" symbol   Replaces (ampersand)gt; with >    Replaces characters that are represented in hexadecimal format, (ampersand)#xhhhh;, with the corresponding
        /// 				characters   Replaces characters that are represented in decimal format, (ampersand)#nnnn;, with the corresponding
        /// 				characters
        /// 		        LOWERCASE
        /// 		       Use this option to convert uppercase letters (A-Z) to lowercase (a-z).
        /// 		        URL_DECODE
        /// 		       Use this option to decode a URL-encoded value.
        /// 		        NONE
        /// 		       Specify NONE if you don't want to perform any text transformations.
        public let textTransformation: TextTransformation

        public init(fieldToMatch: FieldToMatch, regexPatternSetId: String, textTransformation: TextTransformation) {
            self.fieldToMatch = fieldToMatch
            self.regexPatternSetId = regexPatternSetId
            self.textTransformation = textTransformation
        }

        public func validate(name: String) throws {
            try self.fieldToMatch.validate(name: "\(name).fieldToMatch")
            try self.validate(self.regexPatternSetId, name: "regexPatternSetId", parent: name, max: 128)
            try self.validate(self.regexPatternSetId, name: "regexPatternSetId", parent: name, min: 1)
            try self.validate(self.regexPatternSetId, name: "regexPatternSetId", parent: name, pattern: ".*\\S.*")
        }

        private enum CodingKeys: String, CodingKey {
            case fieldToMatch = "FieldToMatch"
            case regexPatternSetId = "RegexPatternSetId"
            case textTransformation = "TextTransformation"
        }
    }

    public struct RegexPatternSet: AWSDecodableShape {
        /// A friendly name or description of the RegexPatternSet. You can't change Name after you create a RegexPatternSet.
        public let name: String?
        /// The identifier for the RegexPatternSet. You use RegexPatternSetId to get information about a RegexPatternSet, update a RegexPatternSet, remove a RegexPatternSet from a RegexMatchSet, and delete a RegexPatternSet from AWS WAF.  RegexMatchSetId is returned by CreateRegexPatternSet and by ListRegexPatternSets.
        public let regexPatternSetId: String
        /// Specifies the regular expression (regex) patterns that you want AWS WAF to search for, such as B[a@]dB[o0]t.
        public let regexPatternStrings: [String]

        public init(name: String? = nil, regexPatternSetId: String, regexPatternStrings: [String]) {
            self.name = name
            self.regexPatternSetId = regexPatternSetId
            self.regexPatternStrings = regexPatternStrings
        }

        private enum CodingKeys: String, CodingKey {
            case name = "Name"
            case regexPatternSetId = "RegexPatternSetId"
            case regexPatternStrings = "RegexPatternStrings"
        }
    }

    public struct RegexPatternSetSummary: AWSDecodableShape {
        /// A friendly name or description of the RegexPatternSet. You can't change Name after you create a RegexPatternSet.
        public let name: String
        /// The RegexPatternSetId for a RegexPatternSet. You use RegexPatternSetId to get information about a RegexPatternSet, update a RegexPatternSet, remove a RegexPatternSet from a RegexMatchSet, and delete a RegexPatternSet from AWS WAF.  RegexPatternSetId is returned by CreateRegexPatternSet and by ListRegexPatternSets.
        public let regexPatternSetId: String

        public init(name: String, regexPatternSetId: String) {
            self.name = name
            self.regexPatternSetId = regexPatternSetId
        }

        private enum CodingKeys: String, CodingKey {
            case name = "Name"
            case regexPatternSetId = "RegexPatternSetId"
        }
    }

    public struct RegexPatternSetUpdate: AWSEncodableShape {
        /// Specifies whether to insert or delete a RegexPatternString.
        public let action: ChangeAction
        /// Specifies the regular expression (regex) pattern that you want AWS WAF to search for, such as B[a@]dB[o0]t.
        public let regexPatternString: String

        public init(action: ChangeAction, regexPatternString: String) {
            self.action = action
            self.regexPatternString = regexPatternString
        }

        public func validate(name: String) throws {
            try self.validate(self.regexPatternString, name: "regexPatternString", parent: name, max: 512)
            try self.validate(self.regexPatternString, name: "regexPatternString", parent: name, min: 1)
            try self.validate(self.regexPatternString, name: "regexPatternString", parent: name, pattern: ".*")
        }

        private enum CodingKeys: String, CodingKey {
            case action = "Action"
            case regexPatternString = "RegexPatternString"
        }
    }

    public struct Rule: AWSDecodableShape {
        /// A friendly name or description for the metrics for this Rule. The name can contain only alphanumeric characters (A-Z, a-z, 0-9), with maximum length 128 and minimum length one. It can't contain whitespace or metric names reserved for AWS WAF, including "All" and "Default_Action." You can't change MetricName after you create the Rule.
        public let metricName: String?
        /// The friendly name or description for the Rule. You can't change the name of a Rule after you create it.
        public let name: String?
        /// The Predicates object contains one Predicate element for each ByteMatchSet, IPSet, or
        /// 			SqlInjectionMatchSet object that you want to include in a Rule.
        public let predicates: [Predicate]
        /// A unique identifier for a Rule. You use RuleId to get more information about a Rule (see GetRule),
        /// 			update a Rule (see UpdateRule), insert a Rule into a WebACL or delete a
        /// 			one from a WebACL (see UpdateWebACL), or delete a Rule from AWS WAF (see DeleteRule).
        /// 		        RuleId is returned by CreateRule and by ListRules.
        public let ruleId: String

        public init(metricName: String? = nil, name: String? = nil, predicates: [Predicate], ruleId: String) {
            self.metricName = metricName
            self.name = name
            self.predicates = predicates
            self.ruleId = ruleId
        }

        private enum CodingKeys: String, CodingKey {
            case metricName = "MetricName"
            case name = "Name"
            case predicates = "Predicates"
            case ruleId = "RuleId"
        }
    }

    public struct RuleGroup: AWSDecodableShape {
        /// A friendly name or description for the metrics for this RuleGroup. The name can contain only alphanumeric characters (A-Z, a-z, 0-9), with maximum length 128 and minimum length one. It can't contain whitespace or metric names reserved for AWS WAF, including "All" and "Default_Action." You can't change the name of the metric after you create the RuleGroup.
        public let metricName: String?
        /// The friendly name or description for the RuleGroup. You can't change the name of a RuleGroup after you create it.
        public let name: String?
        /// A unique identifier for a RuleGroup. You use RuleGroupId to get more information about a RuleGroup (see GetRuleGroup),  update a RuleGroup (see UpdateRuleGroup), insert a RuleGroup into a WebACL or delete a  one from a WebACL (see UpdateWebACL), or delete a RuleGroup from AWS WAF (see DeleteRuleGroup).  RuleGroupId is returned by CreateRuleGroup and by ListRuleGroups.
        public let ruleGroupId: String

        public init(metricName: String? = nil, name: String? = nil, ruleGroupId: String) {
            self.metricName = metricName
            self.name = name
            self.ruleGroupId = ruleGroupId
        }

        private enum CodingKeys: String, CodingKey {
            case metricName = "MetricName"
            case name = "Name"
            case ruleGroupId = "RuleGroupId"
        }
    }

    public struct RuleGroupSummary: AWSDecodableShape {
        /// A friendly name or description of the RuleGroup. You can't change the name of a RuleGroup after you create it.
        public let name: String
        /// A unique identifier for a RuleGroup. You use RuleGroupId to get more information about a RuleGroup (see GetRuleGroup),  update a RuleGroup (see UpdateRuleGroup), insert a RuleGroup into a WebACL or delete  one from a WebACL (see UpdateWebACL), or delete a RuleGroup from AWS WAF (see DeleteRuleGroup).  RuleGroupId is returned by CreateRuleGroup and by ListRuleGroups.
        public let ruleGroupId: String

        public init(name: String, ruleGroupId: String) {
            self.name = name
            self.ruleGroupId = ruleGroupId
        }

        private enum CodingKeys: String, CodingKey {
            case name = "Name"
            case ruleGroupId = "RuleGroupId"
        }
    }

    public struct RuleGroupUpdate: AWSEncodableShape {
        /// Specify INSERT to add an ActivatedRule to a RuleGroup. Use DELETE to remove an  ActivatedRule from a RuleGroup.
        public let action: ChangeAction
        /// The ActivatedRule object specifies a Rule that you want to insert or delete,  the priority of the Rule in the WebACL, and the action that you want AWS WAF to take when a web request matches the Rule  (ALLOW, BLOCK, or COUNT).
        public let activatedRule: ActivatedRule

        public init(action: ChangeAction, activatedRule: ActivatedRule) {
            self.action = action
            self.activatedRule = activatedRule
        }

        public func validate(name: String) throws {
            try self.activatedRule.validate(name: "\(name).activatedRule")
        }

        private enum CodingKeys: String, CodingKey {
            case action = "Action"
            case activatedRule = "ActivatedRule"
        }
    }

    public struct RuleSummary: AWSDecodableShape {
        /// A friendly name or description of the Rule. You can't change the name of a Rule after you create it.
        public let name: String
        /// A unique identifier for a Rule. You use RuleId to get more information about a Rule (see GetRule),
        /// 			update a Rule (see UpdateRule), insert a Rule into a WebACL or delete
        /// 			one from a WebACL (see UpdateWebACL), or delete a Rule from AWS WAF (see DeleteRule).
        /// 		        RuleId is returned by CreateRule and by ListRules.
        public let ruleId: String

        public init(name: String, ruleId: String) {
            self.name = name
            self.ruleId = ruleId
        }

        private enum CodingKeys: String, CodingKey {
            case name = "Name"
            case ruleId = "RuleId"
        }
    }

    public struct RuleUpdate: AWSEncodableShape {
        /// Specify INSERT to add a Predicate to a Rule. Use DELETE to remove a
        /// 			Predicate from a Rule.
        public let action: ChangeAction
        /// The ID of the Predicate (such as an IPSet) that you want to add to a Rule.
        public let predicate: Predicate

        public init(action: ChangeAction, predicate: Predicate) {
            self.action = action
            self.predicate = predicate
        }

        public func validate(name: String) throws {
            try self.predicate.validate(name: "\(name).predicate")
        }

        private enum CodingKeys: String, CodingKey {
            case action = "Action"
            case predicate = "Predicate"
        }
    }

    public struct SampledHTTPRequest: AWSDecodableShape {
        /// The action for the Rule that the request matched: ALLOW, BLOCK, or COUNT.
        public let action: String?
        /// A complex type that contains detailed information about the request.
        public let request: HTTPRequest
        /// This value is returned if the GetSampledRequests  request specifies the ID of a RuleGroup rather than the ID of an individual rule. RuleWithinRuleGroup is the rule within the specified RuleGroup that matched the request listed in the response.
        public let ruleWithinRuleGroup: String?
        /// The time at which AWS WAF received the request from your AWS resource, in Unix time format (in seconds).
        public let timestamp: Date?
        /// A value that indicates how one result in the response relates proportionally to other results in the response.
        /// 			A result that has a weight of 2 represents roughly twice as many CloudFront web requests as a result
        /// 			that has a weight of 1.
        public let weight: Int64

        public init(action: String? = nil, request: HTTPRequest, ruleWithinRuleGroup: String? = nil, timestamp: Date? = nil, weight: Int64) {
            self.action = action
            self.request = request
            self.ruleWithinRuleGroup = ruleWithinRuleGroup
            self.timestamp = timestamp
            self.weight = weight
        }

        private enum CodingKeys: String, CodingKey {
            case action = "Action"
            case request = "Request"
            case ruleWithinRuleGroup = "RuleWithinRuleGroup"
            case timestamp = "Timestamp"
            case weight = "Weight"
        }
    }

    public struct SizeConstraint: AWSEncodableShape & AWSDecodableShape {
        /// The type of comparison you want AWS WAF to perform. AWS WAF uses this in combination with the provided Size and FieldToMatch
        /// 			to build an expression in the form of "Size  ComparisonOperator size in bytes of FieldToMatch". If that expression
        /// 			is true, the SizeConstraint is considered to match.
        /// 		        EQ: Used to test if the Size is equal to the size of the FieldToMatch
        /// 		        NE: Used to test if the Size is not equal to the size of the FieldToMatch
        /// 		        LE: Used to test if the Size is less than or equal to the size of the FieldToMatch
        /// 		        LT: Used to test if the Size is strictly less than the size of the FieldToMatch
        /// 		        GE: Used to test if the Size is greater than or equal to the size of the FieldToMatch
        /// 		        GT: Used to test if the Size is strictly greater than the size of the FieldToMatch
        public let comparisonOperator: ComparisonOperator
        /// Specifies where in a web request to look for the size constraint.
        public let fieldToMatch: FieldToMatch
        /// The size in bytes that you want AWS WAF to compare against the size of the specified FieldToMatch. AWS WAF uses this in combination
        /// 			with ComparisonOperator and FieldToMatch to build an expression in the form of "Size  ComparisonOperator size
        /// 			in bytes of FieldToMatch". If that expression is true, the SizeConstraint is considered to match.
        /// 		       Valid values for size are 0 - 21474836480 bytes (0 - 20 GB).
        /// 		       If you specify URI for the value of Type, the / in the URI counts as one character.
        /// 			For example, the URI /logo.jpg is nine characters long.
        public let size: Int64
        /// Text transformations eliminate some of the unusual formatting that attackers use in web requests in an effort to bypass AWS WAF.
        /// 			If you specify a transformation, AWS WAF performs the transformation on FieldToMatch before inspecting it for a match. You can only specify a single type of TextTransformation.
        /// 		       Note that if you choose BODY for the value of Type, you must choose NONE for TextTransformation
        /// 			because CloudFront forwards only the first 8192 bytes for inspection.
        /// 		        NONE
        /// 		       Specify NONE if you don't want to perform any text transformations.
        /// 		        CMD_LINE
        /// 		       When you're concerned that attackers are injecting an operating system command line command and using unusual formatting to disguise some or all of the command, use this option to perform the following transformations:
        /// 		         Delete the following characters: \ " ' ^   Delete spaces before the following characters: / (   Replace the following characters with a space: , ;   Replace multiple spaces with one space   Convert uppercase letters (A-Z) to lowercase (a-z)
        /// 		        COMPRESS_WHITE_SPACE
        /// 		       Use this option to replace the following characters with a space character (decimal 32):
        /// 		         \f, formfeed, decimal 12   \t, tab, decimal 9   \n, newline, decimal 10   \r, carriage return, decimal 13   \v, vertical tab, decimal 11   non-breaking space, decimal 160
        /// 		        COMPRESS_WHITE_SPACE also replaces multiple spaces with one space.
        /// 		        HTML_ENTITY_DECODE
        /// 		       Use this option to replace HTML-encoded characters with unencoded characters. HTML_ENTITY_DECODE performs
        /// 			the following operations:
        /// 		         Replaces (ampersand)quot; with "    Replaces (ampersand)nbsp; with a non-breaking space, decimal 160   Replaces (ampersand)lt; with a "less than" symbol   Replaces (ampersand)gt; with >    Replaces characters that are represented in hexadecimal format, (ampersand)#xhhhh;, with the corresponding
        /// 				characters   Replaces characters that are represented in decimal format, (ampersand)#nnnn;, with the corresponding
        /// 				characters
        /// 		        LOWERCASE
        /// 		       Use this option to convert uppercase letters (A-Z) to lowercase (a-z).
        /// 		        URL_DECODE
        /// 		       Use this option to decode a URL-encoded value.
        public let textTransformation: TextTransformation

        public init(comparisonOperator: ComparisonOperator, fieldToMatch: FieldToMatch, size: Int64, textTransformation: TextTransformation) {
            self.comparisonOperator = comparisonOperator
            self.fieldToMatch = fieldToMatch
            self.size = size
            self.textTransformation = textTransformation
        }

        public func validate(name: String) throws {
            try self.fieldToMatch.validate(name: "\(name).fieldToMatch")
            try self.validate(self.size, name: "size", parent: name, max: 21_474_836_480)
            try self.validate(self.size, name: "size", parent: name, min: 0)
        }

        private enum CodingKeys: String, CodingKey {
            case comparisonOperator = "ComparisonOperator"
            case fieldToMatch = "FieldToMatch"
            case size = "Size"
            case textTransformation = "TextTransformation"
        }
    }

    public struct SizeConstraintSet: AWSDecodableShape {
        /// The name, if any, of the SizeConstraintSet.
        public let name: String?
        /// Specifies the parts of web requests that you want to inspect the size of.
        public let sizeConstraints: [SizeConstraint]
        /// A unique identifier for a SizeConstraintSet. You use SizeConstraintSetId to get information about a
        /// 			SizeConstraintSet (see GetSizeConstraintSet), update a SizeConstraintSet
        /// 			(see UpdateSizeConstraintSet), insert a SizeConstraintSet into a Rule or
        /// 			delete one from a Rule (see UpdateRule), and delete a SizeConstraintSet from AWS WAF
        /// 			(see DeleteSizeConstraintSet).
        /// 		        SizeConstraintSetId is returned by CreateSizeConstraintSet and by ListSizeConstraintSets.
        public let sizeConstraintSetId: String

        public init(name: String? = nil, sizeConstraints: [SizeConstraint], sizeConstraintSetId: String) {
            self.name = name
            self.sizeConstraints = sizeConstraints
            self.sizeConstraintSetId = sizeConstraintSetId
        }

        private enum CodingKeys: String, CodingKey {
            case name = "Name"
            case sizeConstraints = "SizeConstraints"
            case sizeConstraintSetId = "SizeConstraintSetId"
        }
    }

    public struct SizeConstraintSetSummary: AWSDecodableShape {
        /// The name of the SizeConstraintSet, if any.
        public let name: String
        /// A unique identifier for a SizeConstraintSet. You use SizeConstraintSetId to get information about a
        /// 			SizeConstraintSet (see GetSizeConstraintSet), update a SizeConstraintSet
        /// 			(see UpdateSizeConstraintSet), insert a SizeConstraintSet into a Rule or
        /// 			delete one from a Rule (see UpdateRule), and delete a SizeConstraintSet from AWS WAF
        /// 			(see DeleteSizeConstraintSet).
        /// 		        SizeConstraintSetId is returned by CreateSizeConstraintSet and by ListSizeConstraintSets.
        public let sizeConstraintSetId: String

        public init(name: String, sizeConstraintSetId: String) {
            self.name = name
            self.sizeConstraintSetId = sizeConstraintSetId
        }

        private enum CodingKeys: String, CodingKey {
            case name = "Name"
            case sizeConstraintSetId = "SizeConstraintSetId"
        }
    }

    public struct SizeConstraintSetUpdate: AWSEncodableShape {
        /// Specify INSERT to add a SizeConstraintSetUpdate to a SizeConstraintSet.
        /// 			Use DELETE to remove a SizeConstraintSetUpdate from a SizeConstraintSet.
        public let action: ChangeAction
        /// Specifies a constraint on the size of a part of the web request. AWS WAF uses the Size, ComparisonOperator, and FieldToMatch to build
        /// 			an expression in the form of "Size  ComparisonOperator size in bytes of FieldToMatch". If that expression is true, the
        /// 			SizeConstraint is considered to match.
        public let sizeConstraint: SizeConstraint

        public init(action: ChangeAction, sizeConstraint: SizeConstraint) {
            self.action = action
            self.sizeConstraint = sizeConstraint
        }

        public func validate(name: String) throws {
            try self.sizeConstraint.validate(name: "\(name).sizeConstraint")
        }

        private enum CodingKeys: String, CodingKey {
            case action = "Action"
            case sizeConstraint = "SizeConstraint"
        }
    }

    public struct SqlInjectionMatchSet: AWSDecodableShape {
        /// The name, if any, of the SqlInjectionMatchSet.
        public let name: String?
        /// A unique identifier for a SqlInjectionMatchSet. You use SqlInjectionMatchSetId to get information about a
        /// 			SqlInjectionMatchSet (see GetSqlInjectionMatchSet), update a SqlInjectionMatchSet
        /// 			(see UpdateSqlInjectionMatchSet), insert a SqlInjectionMatchSet into a Rule or
        /// 			delete one from a Rule (see UpdateRule), and delete a SqlInjectionMatchSet from AWS WAF
        /// 			(see DeleteSqlInjectionMatchSet).
        /// 		        SqlInjectionMatchSetId is returned by CreateSqlInjectionMatchSet and by ListSqlInjectionMatchSets.
        public let sqlInjectionMatchSetId: String
        /// Specifies the parts of web requests that you want to inspect for snippets of malicious SQL code.
        public let sqlInjectionMatchTuples: [SqlInjectionMatchTuple]

        public init(name: String? = nil, sqlInjectionMatchSetId: String, sqlInjectionMatchTuples: [SqlInjectionMatchTuple]) {
            self.name = name
            self.sqlInjectionMatchSetId = sqlInjectionMatchSetId
            self.sqlInjectionMatchTuples = sqlInjectionMatchTuples
        }

        private enum CodingKeys: String, CodingKey {
            case name = "Name"
            case sqlInjectionMatchSetId = "SqlInjectionMatchSetId"
            case sqlInjectionMatchTuples = "SqlInjectionMatchTuples"
        }
    }

    public struct SqlInjectionMatchSetSummary: AWSDecodableShape {
        /// The name of the SqlInjectionMatchSet, if any, specified by Id.
        public let name: String
        /// A unique identifier for a SqlInjectionMatchSet. You use SqlInjectionMatchSetId to get information about a
        /// 			SqlInjectionMatchSet (see GetSqlInjectionMatchSet), update a SqlInjectionMatchSet
        /// 			(see UpdateSqlInjectionMatchSet), insert a SqlInjectionMatchSet into a Rule or
        /// 			delete one from a Rule (see UpdateRule), and delete a SqlInjectionMatchSet from AWS WAF
        /// 			(see DeleteSqlInjectionMatchSet).
        /// 		        SqlInjectionMatchSetId is returned by CreateSqlInjectionMatchSet and by ListSqlInjectionMatchSets.
        public let sqlInjectionMatchSetId: String

        public init(name: String, sqlInjectionMatchSetId: String) {
            self.name = name
            self.sqlInjectionMatchSetId = sqlInjectionMatchSetId
        }

        private enum CodingKeys: String, CodingKey {
            case name = "Name"
            case sqlInjectionMatchSetId = "SqlInjectionMatchSetId"
        }
    }

    public struct SqlInjectionMatchSetUpdate: AWSEncodableShape {
        /// Specify INSERT to add a SqlInjectionMatchSetUpdate to a SqlInjectionMatchSet.
        /// 			Use DELETE to remove a SqlInjectionMatchSetUpdate from a SqlInjectionMatchSet.
        public let action: ChangeAction
        /// Specifies the part of a web request that you want AWS WAF to inspect for snippets of malicious SQL code and, if you want AWS WAF to inspect a header, the name of the header.
        public let sqlInjectionMatchTuple: SqlInjectionMatchTuple

        public init(action: ChangeAction, sqlInjectionMatchTuple: SqlInjectionMatchTuple) {
            self.action = action
            self.sqlInjectionMatchTuple = sqlInjectionMatchTuple
        }

        public func validate(name: String) throws {
            try self.sqlInjectionMatchTuple.validate(name: "\(name).sqlInjectionMatchTuple")
        }

        private enum CodingKeys: String, CodingKey {
            case action = "Action"
            case sqlInjectionMatchTuple = "SqlInjectionMatchTuple"
        }
    }

    public struct SqlInjectionMatchTuple: AWSEncodableShape & AWSDecodableShape {
        /// Specifies where in a web request to look for snippets of malicious SQL code.
        public let fieldToMatch: FieldToMatch
        /// Text transformations eliminate some of the unusual formatting that attackers use in web requests in an effort to bypass AWS WAF.
        /// 			If you specify a transformation, AWS WAF performs the transformation on FieldToMatch before inspecting it for a match. You can only specify a single type of TextTransformation.
        /// 		        CMD_LINE
        /// 		       When you're concerned that attackers are injecting an operating system command line command and using unusual formatting to disguise some or all of the command, use this option to perform the following transformations:
        /// 		         Delete the following characters: \ " ' ^   Delete spaces before the following characters: / (   Replace the following characters with a space: , ;   Replace multiple spaces with one space   Convert uppercase letters (A-Z) to lowercase (a-z)
        /// 		        COMPRESS_WHITE_SPACE
        /// 		       Use this option to replace the following characters with a space character (decimal 32):
        /// 		         \f, formfeed, decimal 12   \t, tab, decimal 9   \n, newline, decimal 10   \r, carriage return, decimal 13   \v, vertical tab, decimal 11   non-breaking space, decimal 160
        /// 		        COMPRESS_WHITE_SPACE also replaces multiple spaces with one space.
        /// 		        HTML_ENTITY_DECODE
        /// 		       Use this option to replace HTML-encoded characters with unencoded characters. HTML_ENTITY_DECODE performs
        /// 			the following operations:
        /// 		         Replaces (ampersand)quot; with "    Replaces (ampersand)nbsp; with a non-breaking space, decimal 160   Replaces (ampersand)lt; with a "less than" symbol   Replaces (ampersand)gt; with >    Replaces characters that are represented in hexadecimal format, (ampersand)#xhhhh;, with the corresponding
        /// 				characters   Replaces characters that are represented in decimal format, (ampersand)#nnnn;, with the corresponding
        /// 				characters
        /// 		        LOWERCASE
        /// 		       Use this option to convert uppercase letters (A-Z) to lowercase (a-z).
        /// 		        URL_DECODE
        /// 		       Use this option to decode a URL-encoded value.
        /// 		        NONE
        /// 		       Specify NONE if you don't want to perform any text transformations.
        public let textTransformation: TextTransformation

        public init(fieldToMatch: FieldToMatch, textTransformation: TextTransformation) {
            self.fieldToMatch = fieldToMatch
            self.textTransformation = textTransformation
        }

        public func validate(name: String) throws {
            try self.fieldToMatch.validate(name: "\(name).fieldToMatch")
        }

        private enum CodingKeys: String, CodingKey {
            case fieldToMatch = "FieldToMatch"
            case textTransformation = "TextTransformation"
        }
    }

    public struct SubscribedRuleGroupSummary: AWSDecodableShape {
        /// A friendly name or description for the metrics for this RuleGroup. The name can contain only alphanumeric characters (A-Z, a-z, 0-9), with maximum length 128 and minimum length one. It can't contain whitespace or metric names reserved for AWS WAF, including "All" and "Default_Action." You can't change the name of the metric after you create the RuleGroup.
        public let metricName: String
        /// A friendly name or description of the RuleGroup. You can't change the name of a RuleGroup after you create it.
        public let name: String
        /// A unique identifier for a RuleGroup.
        public let ruleGroupId: String

        public init(metricName: String, name: String, ruleGroupId: String) {
            self.metricName = metricName
            self.name = name
            self.ruleGroupId = ruleGroupId
        }

        private enum CodingKeys: String, CodingKey {
            case metricName = "MetricName"
            case name = "Name"
            case ruleGroupId = "RuleGroupId"
        }
    }

    public struct Tag: AWSEncodableShape & AWSDecodableShape {
        public let key: String
        public let value: String

        public init(key: String, value: String) {
            self.key = key
            self.value = value
        }

        public func validate(name: String) throws {
            try self.validate(self.key, name: "key", parent: name, max: 128)
            try self.validate(self.key, name: "key", parent: name, min: 1)
            try self.validate(self.key, name: "key", parent: name, pattern: ".*\\S.*")
            try self.validate(self.value, name: "value", parent: name, max: 256)
            try self.validate(self.value, name: "value", parent: name, pattern: ".*")
        }

        private enum CodingKeys: String, CodingKey {
            case key = "Key"
            case value = "Value"
        }
    }

    public struct TagInfoForResource: AWSDecodableShape {
        public let resourceARN: String?
        public let tagList: [Tag]?

        public init(resourceARN: String? = nil, tagList: [Tag]? = nil) {
            self.resourceARN = resourceARN
            self.tagList = tagList
        }

        private enum CodingKeys: String, CodingKey {
            case resourceARN = "ResourceARN"
            case tagList = "TagList"
        }
    }

    public struct TagResourceRequest: AWSEncodableShape {
        public let resourceARN: String
        public let tags: [Tag]

        public init(resourceARN: String, tags: [Tag]) {
            self.resourceARN = resourceARN
            self.tags = tags
        }

        public func validate(name: String) throws {
            try self.validate(self.resourceARN, name: "resourceARN", parent: name, max: 1224)
            try self.validate(self.resourceARN, name: "resourceARN", parent: name, min: 1)
            try self.validate(self.resourceARN, name: "resourceARN", parent: name, pattern: ".*\\S.*")
            try self.tags.forEach {
                try $0.validate(name: "\(name).tags[]")
            }
            try self.validate(self.tags, name: "tags", parent: name, min: 1)
        }

        private enum CodingKeys: String, CodingKey {
            case resourceARN = "ResourceARN"
            case tags = "Tags"
        }
    }

    public struct TagResourceResponse: AWSDecodableShape {
        public init() {}
    }

    public struct TimeWindow: AWSEncodableShape & AWSDecodableShape {
        /// The end of the time range from which you want GetSampledRequests to return a sample of the  requests that your AWS resource received. You must specify the date and time in Coordinated Universal Time (UTC) format.  UTC format includes the special designator, Z. For example, "2016-09-27T14:50Z".  You can specify any time range in the previous three hours.
        public let endTime: Date
        /// The beginning of the time range from which you want GetSampledRequests to return a sample of the  requests that your AWS resource received. You must specify the date and time in Coordinated Universal Time (UTC) format.  UTC format includes the special designator, Z. For example, "2016-09-27T14:50Z".  You can specify any time range in the previous three hours.
        public let startTime: Date

        public init(endTime: Date, startTime: Date) {
            self.endTime = endTime
            self.startTime = startTime
        }

        private enum CodingKeys: String, CodingKey {
            case endTime = "EndTime"
            case startTime = "StartTime"
        }
    }

    public struct UntagResourceRequest: AWSEncodableShape {
        public let resourceARN: String
        public let tagKeys: [String]

        public init(resourceARN: String, tagKeys: [String]) {
            self.resourceARN = resourceARN
            self.tagKeys = tagKeys
        }

        public func validate(name: String) throws {
            try self.validate(self.resourceARN, name: "resourceARN", parent: name, max: 1224)
            try self.validate(self.resourceARN, name: "resourceARN", parent: name, min: 1)
            try self.validate(self.resourceARN, name: "resourceARN", parent: name, pattern: ".*\\S.*")
            try self.tagKeys.forEach {
                try validate($0, name: "tagKeys[]", parent: name, max: 128)
                try validate($0, name: "tagKeys[]", parent: name, min: 1)
                try validate($0, name: "tagKeys[]", parent: name, pattern: ".*\\S.*")
            }
            try self.validate(self.tagKeys, name: "tagKeys", parent: name, min: 1)
        }

        private enum CodingKeys: String, CodingKey {
            case resourceARN = "ResourceARN"
            case tagKeys = "TagKeys"
        }
    }

    public struct UntagResourceResponse: AWSDecodableShape {
        public init() {}
    }

    public struct UpdateByteMatchSetRequest: AWSEncodableShape {
        /// The ByteMatchSetId of the ByteMatchSet that you want to update. ByteMatchSetId is returned by CreateByteMatchSet and by
        /// 			ListByteMatchSets.
        public let byteMatchSetId: String
        /// The value returned by the most recent call to GetChangeToken.
        public let changeToken: String
        /// An array of ByteMatchSetUpdate objects that you want to insert into or delete from a ByteMatchSet.
        /// 			For more information, see the applicable data types:
        /// 		          ByteMatchSetUpdate: Contains Action and ByteMatchTuple     ByteMatchTuple: Contains FieldToMatch, PositionalConstraint, TargetString,
        /// 				and TextTransformation     FieldToMatch: Contains Data and Type
        public let updates: [ByteMatchSetUpdate]

        public init(byteMatchSetId: String, changeToken: String, updates: [ByteMatchSetUpdate]) {
            self.byteMatchSetId = byteMatchSetId
            self.changeToken = changeToken
            self.updates = updates
        }

        public func validate(name: String) throws {
            try self.validate(self.byteMatchSetId, name: "byteMatchSetId", parent: name, max: 128)
            try self.validate(self.byteMatchSetId, name: "byteMatchSetId", parent: name, min: 1)
            try self.validate(self.byteMatchSetId, name: "byteMatchSetId", parent: name, pattern: ".*\\S.*")
            try self.validate(self.changeToken, name: "changeToken", parent: name, max: 128)
            try self.validate(self.changeToken, name: "changeToken", parent: name, min: 1)
            try self.validate(self.changeToken, name: "changeToken", parent: name, pattern: ".*\\S.*")
            try self.updates.forEach {
                try $0.validate(name: "\(name).updates[]")
            }
            try self.validate(self.updates, name: "updates", parent: name, min: 1)
        }

        private enum CodingKeys: String, CodingKey {
            case byteMatchSetId = "ByteMatchSetId"
            case changeToken = "ChangeToken"
            case updates = "Updates"
        }
    }

    public struct UpdateByteMatchSetResponse: AWSDecodableShape {
        /// The ChangeToken that you used to submit the UpdateByteMatchSet request. You can also use this value
        /// 			to query the status of the request. For more information, see GetChangeTokenStatus.
        public let changeToken: String?

        public init(changeToken: String? = nil) {
            self.changeToken = changeToken
        }

        private enum CodingKeys: String, CodingKey {
            case changeToken = "ChangeToken"
        }
    }

    public struct UpdateGeoMatchSetRequest: AWSEncodableShape {
        /// The value returned by the most recent call to GetChangeToken.
        public let changeToken: String
        /// The GeoMatchSetId of the GeoMatchSet that you want to update. GeoMatchSetId is returned by CreateGeoMatchSet and by
        /// 			ListGeoMatchSets.
        public let geoMatchSetId: String
        /// An array of GeoMatchSetUpdate objects that you want to insert into or delete from an GeoMatchSet.
        /// 			For more information, see the applicable data types:
        /// 		          GeoMatchSetUpdate: Contains Action and GeoMatchConstraint     GeoMatchConstraint: Contains Type and Value
        /// 			            You can have only one Type and Value per GeoMatchConstraint. To add multiple countries, include multiple GeoMatchSetUpdate objects in your request.
        public let updates: [GeoMatchSetUpdate]

        public init(changeToken: String, geoMatchSetId: String, updates: [GeoMatchSetUpdate]) {
            self.changeToken = changeToken
            self.geoMatchSetId = geoMatchSetId
            self.updates = updates
        }

        public func validate(name: String) throws {
            try self.validate(self.changeToken, name: "changeToken", parent: name, max: 128)
            try self.validate(self.changeToken, name: "changeToken", parent: name, min: 1)
            try self.validate(self.changeToken, name: "changeToken", parent: name, pattern: ".*\\S.*")
            try self.validate(self.geoMatchSetId, name: "geoMatchSetId", parent: name, max: 128)
            try self.validate(self.geoMatchSetId, name: "geoMatchSetId", parent: name, min: 1)
            try self.validate(self.geoMatchSetId, name: "geoMatchSetId", parent: name, pattern: ".*\\S.*")
            try self.validate(self.updates, name: "updates", parent: name, min: 1)
        }

        private enum CodingKeys: String, CodingKey {
            case changeToken = "ChangeToken"
            case geoMatchSetId = "GeoMatchSetId"
            case updates = "Updates"
        }
    }

    public struct UpdateGeoMatchSetResponse: AWSDecodableShape {
        /// The ChangeToken that you used to submit the UpdateGeoMatchSet request. You can also use this value
        /// 			to query the status of the request. For more information, see GetChangeTokenStatus.
        public let changeToken: String?

        public init(changeToken: String? = nil) {
            self.changeToken = changeToken
        }

        private enum CodingKeys: String, CodingKey {
            case changeToken = "ChangeToken"
        }
    }

    public struct UpdateIPSetRequest: AWSEncodableShape {
        /// The value returned by the most recent call to GetChangeToken.
        public let changeToken: String
        /// The IPSetId of the IPSet that you want to update. IPSetId is returned by CreateIPSet and by
        /// 			ListIPSets.
        public let iPSetId: String
        /// An array of IPSetUpdate objects that you want to insert into or delete from an IPSet.
        /// 			For more information, see the applicable data types:
        /// 		          IPSetUpdate: Contains Action and IPSetDescriptor     IPSetDescriptor: Contains Type and Value
        /// 	        You can insert a maximum of 1000 addresses in a single request.
        public let updates: [IPSetUpdate]

        public init(changeToken: String, iPSetId: String, updates: [IPSetUpdate]) {
            self.changeToken = changeToken
            self.iPSetId = iPSetId
            self.updates = updates
        }

        public func validate(name: String) throws {
            try self.validate(self.changeToken, name: "changeToken", parent: name, max: 128)
            try self.validate(self.changeToken, name: "changeToken", parent: name, min: 1)
            try self.validate(self.changeToken, name: "changeToken", parent: name, pattern: ".*\\S.*")
            try self.validate(self.iPSetId, name: "iPSetId", parent: name, max: 128)
            try self.validate(self.iPSetId, name: "iPSetId", parent: name, min: 1)
            try self.validate(self.iPSetId, name: "iPSetId", parent: name, pattern: ".*\\S.*")
            try self.updates.forEach {
                try $0.validate(name: "\(name).updates[]")
            }
            try self.validate(self.updates, name: "updates", parent: name, min: 1)
        }

        private enum CodingKeys: String, CodingKey {
            case changeToken = "ChangeToken"
            case iPSetId = "IPSetId"
            case updates = "Updates"
        }
    }

    public struct UpdateIPSetResponse: AWSDecodableShape {
        /// The ChangeToken that you used to submit the UpdateIPSet request. You can also use this value
        /// 			to query the status of the request. For more information, see GetChangeTokenStatus.
        public let changeToken: String?

        public init(changeToken: String? = nil) {
            self.changeToken = changeToken
        }

        private enum CodingKeys: String, CodingKey {
            case changeToken = "ChangeToken"
        }
    }

    public struct UpdateRateBasedRuleRequest: AWSEncodableShape {
        /// The value returned by the most recent call to GetChangeToken.
        public let changeToken: String
        /// The maximum number of requests, which have an identical value in the field specified by the RateKey, allowed in a five-minute period. If the number of requests exceeds the RateLimit and the other predicates specified in the rule are also met, AWS WAF triggers the action that is specified for this rule.
        public let rateLimit: Int64
        /// The RuleId of the RateBasedRule that you want to update. RuleId is returned by CreateRateBasedRule and by ListRateBasedRules.
        public let ruleId: String
        /// An array of RuleUpdate objects that you want to insert into or delete from a RateBasedRule.
        public let updates: [RuleUpdate]

        public init(changeToken: String, rateLimit: Int64, ruleId: String, updates: [RuleUpdate]) {
            self.changeToken = changeToken
            self.rateLimit = rateLimit
            self.ruleId = ruleId
            self.updates = updates
        }

        public func validate(name: String) throws {
            try self.validate(self.changeToken, name: "changeToken", parent: name, max: 128)
            try self.validate(self.changeToken, name: "changeToken", parent: name, min: 1)
            try self.validate(self.changeToken, name: "changeToken", parent: name, pattern: ".*\\S.*")
            try self.validate(self.rateLimit, name: "rateLimit", parent: name, max: 2_000_000_000)
            try self.validate(self.rateLimit, name: "rateLimit", parent: name, min: 100)
            try self.validate(self.ruleId, name: "ruleId", parent: name, max: 128)
            try self.validate(self.ruleId, name: "ruleId", parent: name, min: 1)
            try self.validate(self.ruleId, name: "ruleId", parent: name, pattern: ".*\\S.*")
            try self.updates.forEach {
                try $0.validate(name: "\(name).updates[]")
            }
        }

        private enum CodingKeys: String, CodingKey {
            case changeToken = "ChangeToken"
            case rateLimit = "RateLimit"
            case ruleId = "RuleId"
            case updates = "Updates"
        }
    }

    public struct UpdateRateBasedRuleResponse: AWSDecodableShape {
        /// The ChangeToken that you used to submit the UpdateRateBasedRule request. You can also use this value to query the status of the request. For more information, see GetChangeTokenStatus.
        public let changeToken: String?

        public init(changeToken: String? = nil) {
            self.changeToken = changeToken
        }

        private enum CodingKeys: String, CodingKey {
            case changeToken = "ChangeToken"
        }
    }

    public struct UpdateRegexMatchSetRequest: AWSEncodableShape {
        /// The value returned by the most recent call to GetChangeToken.
        public let changeToken: String
        /// The RegexMatchSetId of the RegexMatchSet that you want to update. RegexMatchSetId is returned by CreateRegexMatchSet and by
        /// 			ListRegexMatchSets.
        public let regexMatchSetId: String
        /// An array of RegexMatchSetUpdate objects that you want to insert into or delete from a RegexMatchSet.
        /// 			For more information, see RegexMatchTuple.
        public let updates: [RegexMatchSetUpdate]

        public init(changeToken: String, regexMatchSetId: String, updates: [RegexMatchSetUpdate]) {
            self.changeToken = changeToken
            self.regexMatchSetId = regexMatchSetId
            self.updates = updates
        }

        public func validate(name: String) throws {
            try self.validate(self.changeToken, name: "changeToken", parent: name, max: 128)
            try self.validate(self.changeToken, name: "changeToken", parent: name, min: 1)
            try self.validate(self.changeToken, name: "changeToken", parent: name, pattern: ".*\\S.*")
            try self.validate(self.regexMatchSetId, name: "regexMatchSetId", parent: name, max: 128)
            try self.validate(self.regexMatchSetId, name: "regexMatchSetId", parent: name, min: 1)
            try self.validate(self.regexMatchSetId, name: "regexMatchSetId", parent: name, pattern: ".*\\S.*")
            try self.updates.forEach {
                try $0.validate(name: "\(name).updates[]")
            }
            try self.validate(self.updates, name: "updates", parent: name, min: 1)
        }

        private enum CodingKeys: String, CodingKey {
            case changeToken = "ChangeToken"
            case regexMatchSetId = "RegexMatchSetId"
            case updates = "Updates"
        }
    }

    public struct UpdateRegexMatchSetResponse: AWSDecodableShape {
        /// The ChangeToken that you used to submit the UpdateRegexMatchSet request. You can also use this value
        /// 			to query the status of the request. For more information, see GetChangeTokenStatus.
        public let changeToken: String?

        public init(changeToken: String? = nil) {
            self.changeToken = changeToken
        }

        private enum CodingKeys: String, CodingKey {
            case changeToken = "ChangeToken"
        }
    }

    public struct UpdateRegexPatternSetRequest: AWSEncodableShape {
        /// The value returned by the most recent call to GetChangeToken.
        public let changeToken: String
        /// The RegexPatternSetId of the RegexPatternSet that you want to update. RegexPatternSetId is returned by CreateRegexPatternSet and by
        /// 			ListRegexPatternSets.
        public let regexPatternSetId: String
        /// An array of RegexPatternSetUpdate objects that you want to insert into or delete from a RegexPatternSet.
        public let updates: [RegexPatternSetUpdate]

        public init(changeToken: String, regexPatternSetId: String, updates: [RegexPatternSetUpdate]) {
            self.changeToken = changeToken
            self.regexPatternSetId = regexPatternSetId
            self.updates = updates
        }

        public func validate(name: String) throws {
            try self.validate(self.changeToken, name: "changeToken", parent: name, max: 128)
            try self.validate(self.changeToken, name: "changeToken", parent: name, min: 1)
            try self.validate(self.changeToken, name: "changeToken", parent: name, pattern: ".*\\S.*")
            try self.validate(self.regexPatternSetId, name: "regexPatternSetId", parent: name, max: 128)
            try self.validate(self.regexPatternSetId, name: "regexPatternSetId", parent: name, min: 1)
            try self.validate(self.regexPatternSetId, name: "regexPatternSetId", parent: name, pattern: ".*\\S.*")
            try self.updates.forEach {
                try $0.validate(name: "\(name).updates[]")
            }
            try self.validate(self.updates, name: "updates", parent: name, min: 1)
        }

        private enum CodingKeys: String, CodingKey {
            case changeToken = "ChangeToken"
            case regexPatternSetId = "RegexPatternSetId"
            case updates = "Updates"
        }
    }

    public struct UpdateRegexPatternSetResponse: AWSDecodableShape {
        /// The ChangeToken that you used to submit the UpdateRegexPatternSet request. You can also use this value
        /// 			to query the status of the request. For more information, see GetChangeTokenStatus.
        public let changeToken: String?

        public init(changeToken: String? = nil) {
            self.changeToken = changeToken
        }

        private enum CodingKeys: String, CodingKey {
            case changeToken = "ChangeToken"
        }
    }

    public struct UpdateRuleGroupRequest: AWSEncodableShape {
        /// The value returned by the most recent call to GetChangeToken.
        public let changeToken: String
        /// The RuleGroupId of the RuleGroup that you want to update. RuleGroupId is returned by CreateRuleGroup and by  ListRuleGroups.
        public let ruleGroupId: String
        /// An array of RuleGroupUpdate objects that you want to insert into or delete from a  RuleGroup.
        /// 		       You can only insert REGULAR rules into a rule group.
        /// 		        ActivatedRule|OverrideAction applies only when updating or adding a RuleGroup to a WebACL. In this case you do not use ActivatedRule|Action.  For all other update requests, ActivatedRule|Action is used instead of ActivatedRule|OverrideAction.
        public let updates: [RuleGroupUpdate]

        public init(changeToken: String, ruleGroupId: String, updates: [RuleGroupUpdate]) {
            self.changeToken = changeToken
            self.ruleGroupId = ruleGroupId
            self.updates = updates
        }

        public func validate(name: String) throws {
            try self.validate(self.changeToken, name: "changeToken", parent: name, max: 128)
            try self.validate(self.changeToken, name: "changeToken", parent: name, min: 1)
            try self.validate(self.changeToken, name: "changeToken", parent: name, pattern: ".*\\S.*")
            try self.validate(self.ruleGroupId, name: "ruleGroupId", parent: name, max: 128)
            try self.validate(self.ruleGroupId, name: "ruleGroupId", parent: name, min: 1)
            try self.validate(self.ruleGroupId, name: "ruleGroupId", parent: name, pattern: ".*\\S.*")
            try self.updates.forEach {
                try $0.validate(name: "\(name).updates[]")
            }
            try self.validate(self.updates, name: "updates", parent: name, min: 1)
        }

        private enum CodingKeys: String, CodingKey {
            case changeToken = "ChangeToken"
            case ruleGroupId = "RuleGroupId"
            case updates = "Updates"
        }
    }

    public struct UpdateRuleGroupResponse: AWSDecodableShape {
        /// The ChangeToken that you used to submit the UpdateRuleGroup request. You can also use this value  to query the status of the request. For more information, see GetChangeTokenStatus.
        public let changeToken: String?

        public init(changeToken: String? = nil) {
            self.changeToken = changeToken
        }

        private enum CodingKeys: String, CodingKey {
            case changeToken = "ChangeToken"
        }
    }

    public struct UpdateRuleRequest: AWSEncodableShape {
        /// The value returned by the most recent call to GetChangeToken.
        public let changeToken: String
        /// The RuleId of the Rule that you want to update. RuleId is returned by
        /// 			CreateRule and by ListRules.
        public let ruleId: String
        /// An array of RuleUpdate objects that you want to insert into or delete from a
        /// 			Rule. For more information, see the applicable data types:
        /// 		          RuleUpdate: Contains Action and Predicate     Predicate: Contains DataId, Negated, and Type     FieldToMatch: Contains Data and Type
        public let updates: [RuleUpdate]

        public init(changeToken: String, ruleId: String, updates: [RuleUpdate]) {
            self.changeToken = changeToken
            self.ruleId = ruleId
            self.updates = updates
        }

        public func validate(name: String) throws {
            try self.validate(self.changeToken, name: "changeToken", parent: name, max: 128)
            try self.validate(self.changeToken, name: "changeToken", parent: name, min: 1)
            try self.validate(self.changeToken, name: "changeToken", parent: name, pattern: ".*\\S.*")
            try self.validate(self.ruleId, name: "ruleId", parent: name, max: 128)
            try self.validate(self.ruleId, name: "ruleId", parent: name, min: 1)
            try self.validate(self.ruleId, name: "ruleId", parent: name, pattern: ".*\\S.*")
            try self.updates.forEach {
                try $0.validate(name: "\(name).updates[]")
            }
        }

        private enum CodingKeys: String, CodingKey {
            case changeToken = "ChangeToken"
            case ruleId = "RuleId"
            case updates = "Updates"
        }
    }

    public struct UpdateRuleResponse: AWSDecodableShape {
        /// The ChangeToken that you used to submit the UpdateRule request. You can also use this value
        /// 			to query the status of the request. For more information, see GetChangeTokenStatus.
        public let changeToken: String?

        public init(changeToken: String? = nil) {
            self.changeToken = changeToken
        }

        private enum CodingKeys: String, CodingKey {
            case changeToken = "ChangeToken"
        }
    }

    public struct UpdateSizeConstraintSetRequest: AWSEncodableShape {
        /// The value returned by the most recent call to GetChangeToken.
        public let changeToken: String
        /// The SizeConstraintSetId of the SizeConstraintSet that you want to update. SizeConstraintSetId
        /// 			is returned by CreateSizeConstraintSet and by ListSizeConstraintSets.
        public let sizeConstraintSetId: String
        /// An array of SizeConstraintSetUpdate objects that you want to insert into or delete from a SizeConstraintSet.
        /// 			For more information, see the applicable data types:
        /// 		          SizeConstraintSetUpdate: Contains Action and SizeConstraint     SizeConstraint: Contains FieldToMatch, TextTransformation, ComparisonOperator,
        /// 				and Size     FieldToMatch: Contains Data and Type
        public let updates: [SizeConstraintSetUpdate]

        public init(changeToken: String, sizeConstraintSetId: String, updates: [SizeConstraintSetUpdate]) {
            self.changeToken = changeToken
            self.sizeConstraintSetId = sizeConstraintSetId
            self.updates = updates
        }

        public func validate(name: String) throws {
            try self.validate(self.changeToken, name: "changeToken", parent: name, max: 128)
            try self.validate(self.changeToken, name: "changeToken", parent: name, min: 1)
            try self.validate(self.changeToken, name: "changeToken", parent: name, pattern: ".*\\S.*")
            try self.validate(self.sizeConstraintSetId, name: "sizeConstraintSetId", parent: name, max: 128)
            try self.validate(self.sizeConstraintSetId, name: "sizeConstraintSetId", parent: name, min: 1)
            try self.validate(self.sizeConstraintSetId, name: "sizeConstraintSetId", parent: name, pattern: ".*\\S.*")
            try self.updates.forEach {
                try $0.validate(name: "\(name).updates[]")
            }
            try self.validate(self.updates, name: "updates", parent: name, min: 1)
        }

        private enum CodingKeys: String, CodingKey {
            case changeToken = "ChangeToken"
            case sizeConstraintSetId = "SizeConstraintSetId"
            case updates = "Updates"
        }
    }

    public struct UpdateSizeConstraintSetResponse: AWSDecodableShape {
        /// The ChangeToken that you used to submit the UpdateSizeConstraintSet request. You can also use this value
        /// 			to query the status of the request. For more information, see GetChangeTokenStatus.
        public let changeToken: String?

        public init(changeToken: String? = nil) {
            self.changeToken = changeToken
        }

        private enum CodingKeys: String, CodingKey {
            case changeToken = "ChangeToken"
        }
    }

    public struct UpdateSqlInjectionMatchSetRequest: AWSEncodableShape {
        /// The value returned by the most recent call to GetChangeToken.
        public let changeToken: String
        /// The SqlInjectionMatchSetId of the SqlInjectionMatchSet that you want to update.
        /// 			SqlInjectionMatchSetId is returned by CreateSqlInjectionMatchSet and by ListSqlInjectionMatchSets.
        public let sqlInjectionMatchSetId: String
        /// An array of SqlInjectionMatchSetUpdate objects that you want to insert into or delete from a
        /// 			SqlInjectionMatchSet. For more information, see the applicable data types:
        /// 		          SqlInjectionMatchSetUpdate: Contains Action and SqlInjectionMatchTuple     SqlInjectionMatchTuple: Contains FieldToMatch and TextTransformation     FieldToMatch: Contains Data and Type
        public let updates: [SqlInjectionMatchSetUpdate]

        public init(changeToken: String, sqlInjectionMatchSetId: String, updates: [SqlInjectionMatchSetUpdate]) {
            self.changeToken = changeToken
            self.sqlInjectionMatchSetId = sqlInjectionMatchSetId
            self.updates = updates
        }

        public func validate(name: String) throws {
            try self.validate(self.changeToken, name: "changeToken", parent: name, max: 128)
            try self.validate(self.changeToken, name: "changeToken", parent: name, min: 1)
            try self.validate(self.changeToken, name: "changeToken", parent: name, pattern: ".*\\S.*")
            try self.validate(self.sqlInjectionMatchSetId, name: "sqlInjectionMatchSetId", parent: name, max: 128)
            try self.validate(self.sqlInjectionMatchSetId, name: "sqlInjectionMatchSetId", parent: name, min: 1)
            try self.validate(self.sqlInjectionMatchSetId, name: "sqlInjectionMatchSetId", parent: name, pattern: ".*\\S.*")
            try self.updates.forEach {
                try $0.validate(name: "\(name).updates[]")
            }
            try self.validate(self.updates, name: "updates", parent: name, min: 1)
        }

        private enum CodingKeys: String, CodingKey {
            case changeToken = "ChangeToken"
            case sqlInjectionMatchSetId = "SqlInjectionMatchSetId"
            case updates = "Updates"
        }
    }

    public struct UpdateSqlInjectionMatchSetResponse: AWSDecodableShape {
        /// The ChangeToken that you used to submit the UpdateSqlInjectionMatchSet request. You can also use this value
        /// 			to query the status of the request. For more information, see GetChangeTokenStatus.
        public let changeToken: String?

        public init(changeToken: String? = nil) {
            self.changeToken = changeToken
        }

        private enum CodingKeys: String, CodingKey {
            case changeToken = "ChangeToken"
        }
    }

    public struct UpdateWebACLRequest: AWSEncodableShape {
        /// The value returned by the most recent call to GetChangeToken.
        public let changeToken: String
        /// A default action for the web ACL, either ALLOW or BLOCK. AWS WAF performs the default action if a request doesn't match the criteria in any of the rules in a web ACL.
        public let defaultAction: WafAction?
        /// An array of updates to make to the WebACL.
        /// 		       An array of WebACLUpdate objects that you want to insert into or delete from a
        /// 			WebACL. For more information, see the applicable data types:
        /// 		          WebACLUpdate: Contains Action and ActivatedRule     ActivatedRule: Contains Action, OverrideAction, Priority, RuleId, and Type. ActivatedRule|OverrideAction applies only when updating or adding a RuleGroup to a WebACL. In this case, you do not use ActivatedRule|Action. For all other update requests, ActivatedRule|Action is used instead of ActivatedRule|OverrideAction.     WafAction: Contains Type
        public let updates: [WebACLUpdate]?
        /// The WebACLId of the WebACL that you want to update. WebACLId is returned by CreateWebACL and by
        /// 			ListWebACLs.
        public let webACLId: String

        public init(changeToken: String, defaultAction: WafAction? = nil, updates: [WebACLUpdate]? = nil, webACLId: String) {
            self.changeToken = changeToken
            self.defaultAction = defaultAction
            self.updates = updates
            self.webACLId = webACLId
        }

        public func validate(name: String) throws {
            try self.validate(self.changeToken, name: "changeToken", parent: name, max: 128)
            try self.validate(self.changeToken, name: "changeToken", parent: name, min: 1)
            try self.validate(self.changeToken, name: "changeToken", parent: name, pattern: ".*\\S.*")
            try self.updates?.forEach {
                try $0.validate(name: "\(name).updates[]")
            }
            try self.validate(self.webACLId, name: "webACLId", parent: name, max: 128)
            try self.validate(self.webACLId, name: "webACLId", parent: name, min: 1)
            try self.validate(self.webACLId, name: "webACLId", parent: name, pattern: ".*\\S.*")
        }

        private enum CodingKeys: String, CodingKey {
            case changeToken = "ChangeToken"
            case defaultAction = "DefaultAction"
            case updates = "Updates"
            case webACLId = "WebACLId"
        }
    }

    public struct UpdateWebACLResponse: AWSDecodableShape {
        /// The ChangeToken that you used to submit the UpdateWebACL request. You can also use this value
        /// 			to query the status of the request. For more information, see GetChangeTokenStatus.
        public let changeToken: String?

        public init(changeToken: String? = nil) {
            self.changeToken = changeToken
        }

        private enum CodingKeys: String, CodingKey {
            case changeToken = "ChangeToken"
        }
    }

    public struct UpdateXssMatchSetRequest: AWSEncodableShape {
        /// The value returned by the most recent call to GetChangeToken.
        public let changeToken: String
        /// An array of XssMatchSetUpdate objects that you want to insert into or delete from an XssMatchSet. For more information, see the applicable data types:
        /// 		          XssMatchSetUpdate: Contains Action and XssMatchTuple     XssMatchTuple: Contains FieldToMatch and TextTransformation     FieldToMatch: Contains Data and Type
        public let updates: [XssMatchSetUpdate]
        /// The XssMatchSetId of the XssMatchSet that you want to update.
        /// 			XssMatchSetId is returned by CreateXssMatchSet and by ListXssMatchSets.
        public let xssMatchSetId: String

        public init(changeToken: String, updates: [XssMatchSetUpdate], xssMatchSetId: String) {
            self.changeToken = changeToken
            self.updates = updates
            self.xssMatchSetId = xssMatchSetId
        }

        public func validate(name: String) throws {
            try self.validate(self.changeToken, name: "changeToken", parent: name, max: 128)
            try self.validate(self.changeToken, name: "changeToken", parent: name, min: 1)
            try self.validate(self.changeToken, name: "changeToken", parent: name, pattern: ".*\\S.*")
            try self.updates.forEach {
                try $0.validate(name: "\(name).updates[]")
            }
            try self.validate(self.updates, name: "updates", parent: name, min: 1)
            try self.validate(self.xssMatchSetId, name: "xssMatchSetId", parent: name, max: 128)
            try self.validate(self.xssMatchSetId, name: "xssMatchSetId", parent: name, min: 1)
            try self.validate(self.xssMatchSetId, name: "xssMatchSetId", parent: name, pattern: ".*\\S.*")
        }

        private enum CodingKeys: String, CodingKey {
            case changeToken = "ChangeToken"
            case updates = "Updates"
            case xssMatchSetId = "XssMatchSetId"
        }
    }

    public struct UpdateXssMatchSetResponse: AWSDecodableShape {
        /// The ChangeToken that you used to submit the UpdateXssMatchSet request. You can also use this value
        /// 			to query the status of the request. For more information, see GetChangeTokenStatus.
        public let changeToken: String?

        public init(changeToken: String? = nil) {
            self.changeToken = changeToken
        }

        private enum CodingKeys: String, CodingKey {
            case changeToken = "ChangeToken"
        }
    }

    public struct WafAction: AWSEncodableShape & AWSDecodableShape {
        /// Specifies how you want AWS WAF to respond to requests that match the settings in a Rule. Valid settings include the following:
        /// 		          ALLOW: AWS WAF allows requests    BLOCK: AWS WAF blocks requests    COUNT: AWS WAF increments a counter of the requests that match all of the conditions in the rule.
        /// 				AWS WAF then continues to inspect the web request based on the remaining rules in the web ACL. You can't specify COUNT
        /// 				for the default action for a WebACL.
        public let type: WafActionType

        public init(type: WafActionType) {
            self.type = type
        }

        private enum CodingKeys: String, CodingKey {
            case type = "Type"
        }
    }

    public struct WafOverrideAction: AWSEncodableShape & AWSDecodableShape {
        ///  COUNT overrides the action specified by the individual rule within a RuleGroup . If set to NONE, the rule's action will take place.
        public let type: WafOverrideActionType

        public init(type: WafOverrideActionType) {
            self.type = type
        }

        private enum CodingKeys: String, CodingKey {
            case type = "Type"
        }
    }

    public struct WebACL: AWSDecodableShape {
        /// The action to perform if none of the Rules contained in the WebACL match. The action is specified by the
        /// 			WafAction object.
        public let defaultAction: WafAction
        /// A friendly name or description for the metrics for this WebACL. The name can contain only alphanumeric characters (A-Z, a-z, 0-9), with maximum length 128 and minimum length one. It can't contain whitespace or metric names reserved for AWS WAF, including "All" and "Default_Action." You can't change MetricName after you create the WebACL.
        public let metricName: String?
        /// A friendly name or description of the WebACL. You can't change the name of a WebACL after you create it.
        public let name: String?
        /// An array that contains the action for each Rule in a WebACL, the priority of the Rule,
        /// 			and the ID of the Rule.
        public let rules: [ActivatedRule]
        /// Tha Amazon Resource Name (ARN) of the web ACL.
        public let webACLArn: String?
        /// A unique identifier for a WebACL. You use WebACLId to get information about a WebACL
        /// 			(see GetWebACL), update a WebACL (see UpdateWebACL), and delete a WebACL from AWS WAF
        /// 			(see DeleteWebACL).
        /// 		        WebACLId is returned by CreateWebACL and by ListWebACLs.
        public let webACLId: String

        public init(defaultAction: WafAction, metricName: String? = nil, name: String? = nil, rules: [ActivatedRule], webACLArn: String? = nil, webACLId: String) {
            self.defaultAction = defaultAction
            self.metricName = metricName
            self.name = name
            self.rules = rules
            self.webACLArn = webACLArn
            self.webACLId = webACLId
        }

        private enum CodingKeys: String, CodingKey {
            case defaultAction = "DefaultAction"
            case metricName = "MetricName"
            case name = "Name"
            case rules = "Rules"
            case webACLArn = "WebACLArn"
            case webACLId = "WebACLId"
        }
    }

    public struct WebACLSummary: AWSDecodableShape {
        /// A friendly name or description of the WebACL. You can't change the name of a WebACL after you create it.
        public let name: String
        /// A unique identifier for a WebACL. You use WebACLId to get information about a WebACL
        /// 			(see GetWebACL), update a WebACL (see UpdateWebACL), and delete a WebACL from AWS WAF
        /// 			(see DeleteWebACL).
        /// 		        WebACLId is returned by CreateWebACL and by ListWebACLs.
        public let webACLId: String

        public init(name: String, webACLId: String) {
            self.name = name
            self.webACLId = webACLId
        }

        private enum CodingKeys: String, CodingKey {
            case name = "Name"
            case webACLId = "WebACLId"
        }
    }

    public struct WebACLUpdate: AWSEncodableShape {
        /// Specifies whether to insert a Rule into or delete a Rule from a WebACL.
        public let action: ChangeAction
        /// The ActivatedRule object in an UpdateWebACL request specifies a Rule that you want to insert or delete,  the priority of the Rule in the WebACL, and the action that you want AWS WAF to take when a web request matches the Rule  (ALLOW, BLOCK, or COUNT).
        public let activatedRule: ActivatedRule

        public init(action: ChangeAction, activatedRule: ActivatedRule) {
            self.action = action
            self.activatedRule = activatedRule
        }

        public func validate(name: String) throws {
            try self.activatedRule.validate(name: "\(name).activatedRule")
        }

        private enum CodingKeys: String, CodingKey {
            case action = "Action"
            case activatedRule = "ActivatedRule"
        }
    }

    public struct XssMatchSet: AWSDecodableShape {
        /// The name, if any, of the XssMatchSet.
        public let name: String?
        /// A unique identifier for an XssMatchSet. You use XssMatchSetId to get information about an
        /// 			XssMatchSet (see GetXssMatchSet), update an XssMatchSet
        /// 			(see UpdateXssMatchSet), insert an XssMatchSet into a Rule or
        /// 			delete one from a Rule (see UpdateRule), and delete an XssMatchSet from AWS WAF
        /// 			(see DeleteXssMatchSet).
        /// 		        XssMatchSetId is returned by CreateXssMatchSet and by ListXssMatchSets.
        public let xssMatchSetId: String
        /// Specifies the parts of web requests that you want to inspect for cross-site scripting attacks.
        public let xssMatchTuples: [XssMatchTuple]

        public init(name: String? = nil, xssMatchSetId: String, xssMatchTuples: [XssMatchTuple]) {
            self.name = name
            self.xssMatchSetId = xssMatchSetId
            self.xssMatchTuples = xssMatchTuples
        }

        private enum CodingKeys: String, CodingKey {
            case name = "Name"
            case xssMatchSetId = "XssMatchSetId"
            case xssMatchTuples = "XssMatchTuples"
        }
    }

    public struct XssMatchSetSummary: AWSDecodableShape {
        /// The name of the XssMatchSet, if any, specified by Id.
        public let name: String
        /// A unique identifier for an XssMatchSet. You use XssMatchSetId to get information about a
        /// 			XssMatchSet (see GetXssMatchSet), update an XssMatchSet
        /// 			(see UpdateXssMatchSet), insert an XssMatchSet into a Rule or
        /// 			delete one from a Rule (see UpdateRule), and delete an XssMatchSet from AWS WAF
        /// 			(see DeleteXssMatchSet).
        /// 		        XssMatchSetId is returned by CreateXssMatchSet and by ListXssMatchSets.
        public let xssMatchSetId: String

        public init(name: String, xssMatchSetId: String) {
            self.name = name
            self.xssMatchSetId = xssMatchSetId
        }

        private enum CodingKeys: String, CodingKey {
            case name = "Name"
            case xssMatchSetId = "XssMatchSetId"
        }
    }

    public struct XssMatchSetUpdate: AWSEncodableShape {
        /// Specify INSERT to add an XssMatchSetUpdate to an XssMatchSet. Use DELETE to remove an XssMatchSetUpdate from an XssMatchSet.
        public let action: ChangeAction
        /// Specifies the part of a web request that you want AWS WAF to inspect for cross-site scripting attacks and, if you want AWS WAF to inspect a header, the name of the header.
        public let xssMatchTuple: XssMatchTuple

        public init(action: ChangeAction, xssMatchTuple: XssMatchTuple) {
            self.action = action
            self.xssMatchTuple = xssMatchTuple
        }

        public func validate(name: String) throws {
            try self.xssMatchTuple.validate(name: "\(name).xssMatchTuple")
        }

        private enum CodingKeys: String, CodingKey {
            case action = "Action"
            case xssMatchTuple = "XssMatchTuple"
        }
    }

    public struct XssMatchTuple: AWSEncodableShape & AWSDecodableShape {
        /// Specifies where in a web request to look for cross-site scripting attacks.
        public let fieldToMatch: FieldToMatch
        /// Text transformations eliminate some of the unusual formatting that attackers use in web requests in an effort to bypass AWS WAF.
        /// 			If you specify a transformation, AWS WAF performs the transformation on FieldToMatch before inspecting it for a match.	 You can only specify a single type of TextTransformation.
        /// 		        CMD_LINE
        /// 		       When you're concerned that attackers are injecting an operating system command line command and using unusual formatting to disguise some or all of the command, use this option to perform the following transformations:
        /// 		         Delete the following characters: \ " ' ^   Delete spaces before the following characters: / (   Replace the following characters with a space: , ;   Replace multiple spaces with one space   Convert uppercase letters (A-Z) to lowercase (a-z)
        /// 		        COMPRESS_WHITE_SPACE
        /// 		       Use this option to replace the following characters with a space character (decimal 32):
        /// 		         \f, formfeed, decimal 12   \t, tab, decimal 9   \n, newline, decimal 10   \r, carriage return, decimal 13   \v, vertical tab, decimal 11   non-breaking space, decimal 160
        /// 		        COMPRESS_WHITE_SPACE also replaces multiple spaces with one space.
        /// 		        HTML_ENTITY_DECODE
        /// 		       Use this option to replace HTML-encoded characters with unencoded characters. HTML_ENTITY_DECODE performs
        /// 			the following operations:
        /// 		         Replaces (ampersand)quot; with "    Replaces (ampersand)nbsp; with a non-breaking space, decimal 160   Replaces (ampersand)lt; with a "less than" symbol   Replaces (ampersand)gt; with >    Replaces characters that are represented in hexadecimal format, (ampersand)#xhhhh;, with the corresponding
        /// 				characters   Replaces characters that are represented in decimal format, (ampersand)#nnnn;, with the corresponding
        /// 				characters
        /// 		        LOWERCASE
        /// 		       Use this option to convert uppercase letters (A-Z) to lowercase (a-z).
        /// 		        URL_DECODE
        /// 		       Use this option to decode a URL-encoded value.
        /// 		        NONE
        /// 		       Specify NONE if you don't want to perform any text transformations.
        public let textTransformation: TextTransformation

        public init(fieldToMatch: FieldToMatch, textTransformation: TextTransformation) {
            self.fieldToMatch = fieldToMatch
            self.textTransformation = textTransformation
        }

        public func validate(name: String) throws {
            try self.fieldToMatch.validate(name: "\(name).fieldToMatch")
        }

        private enum CodingKeys: String, CodingKey {
            case fieldToMatch = "FieldToMatch"
            case textTransformation = "TextTransformation"
        }
    }
}
