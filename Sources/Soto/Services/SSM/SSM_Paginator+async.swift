//===----------------------------------------------------------------------===//
//
// This source file is part of the Soto for AWS open source project
//
// Copyright (c) 2017-2021 the Soto project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
// See CONTRIBUTORS.txt for the list of Soto project authors
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by https://github.com/soto-project/soto-codegenerator.
// DO NOT EDIT.

#if compiler(>=5.5) && canImport(_Concurrency)

import SotoCore

// MARK: Paginators

@available(macOS 12.0, iOS 15.0, watchOS 8.0, tvOS 15.0, *)
extension SSM {
    ///  Describes details about the activation, such as the date and time the activation was created, its expiration date, the Identity and Access Management (IAM) role assigned to the instances in the activation, and the number of instances registered by using this activation.
    /// Return PaginatorSequence for operation.
    ///
    /// - Parameters:
    ///   - input: Input for request
    ///   - logger: Logger used flot logging
    ///   - eventLoop: EventLoop to run this process on
    public func describeActivationsPaginator(
        _ input: DescribeActivationsRequest,
        logger: Logger = AWSClient.loggingDisabled,
        on eventLoop: EventLoop? = nil
    ) -> AWSClient.PaginatorSequence<DescribeActivationsRequest, DescribeActivationsResult> {
        return .init(
            input: input,
            command: describeActivations,
            inputKey: \DescribeActivationsRequest.nextToken,
            outputKey: \DescribeActivationsResult.nextToken,
            logger: logger,
            on: eventLoop
        )
    }

    ///  Views information about a specific execution of a specific association.
    /// Return PaginatorSequence for operation.
    ///
    /// - Parameters:
    ///   - input: Input for request
    ///   - logger: Logger used flot logging
    ///   - eventLoop: EventLoop to run this process on
    public func describeAssociationExecutionTargetsPaginator(
        _ input: DescribeAssociationExecutionTargetsRequest,
        logger: Logger = AWSClient.loggingDisabled,
        on eventLoop: EventLoop? = nil
    ) -> AWSClient.PaginatorSequence<DescribeAssociationExecutionTargetsRequest, DescribeAssociationExecutionTargetsResult> {
        return .init(
            input: input,
            command: describeAssociationExecutionTargets,
            inputKey: \DescribeAssociationExecutionTargetsRequest.nextToken,
            outputKey: \DescribeAssociationExecutionTargetsResult.nextToken,
            logger: logger,
            on: eventLoop
        )
    }

    ///  Views all executions for a specific association ID.
    /// Return PaginatorSequence for operation.
    ///
    /// - Parameters:
    ///   - input: Input for request
    ///   - logger: Logger used flot logging
    ///   - eventLoop: EventLoop to run this process on
    public func describeAssociationExecutionsPaginator(
        _ input: DescribeAssociationExecutionsRequest,
        logger: Logger = AWSClient.loggingDisabled,
        on eventLoop: EventLoop? = nil
    ) -> AWSClient.PaginatorSequence<DescribeAssociationExecutionsRequest, DescribeAssociationExecutionsResult> {
        return .init(
            input: input,
            command: describeAssociationExecutions,
            inputKey: \DescribeAssociationExecutionsRequest.nextToken,
            outputKey: \DescribeAssociationExecutionsResult.nextToken,
            logger: logger,
            on: eventLoop
        )
    }

    ///  Provides details about all active and terminated Automation executions.
    /// Return PaginatorSequence for operation.
    ///
    /// - Parameters:
    ///   - input: Input for request
    ///   - logger: Logger used flot logging
    ///   - eventLoop: EventLoop to run this process on
    public func describeAutomationExecutionsPaginator(
        _ input: DescribeAutomationExecutionsRequest,
        logger: Logger = AWSClient.loggingDisabled,
        on eventLoop: EventLoop? = nil
    ) -> AWSClient.PaginatorSequence<DescribeAutomationExecutionsRequest, DescribeAutomationExecutionsResult> {
        return .init(
            input: input,
            command: describeAutomationExecutions,
            inputKey: \DescribeAutomationExecutionsRequest.nextToken,
            outputKey: \DescribeAutomationExecutionsResult.nextToken,
            logger: logger,
            on: eventLoop
        )
    }

    ///  Information about all active and terminated step executions in an Automation workflow.
    /// Return PaginatorSequence for operation.
    ///
    /// - Parameters:
    ///   - input: Input for request
    ///   - logger: Logger used flot logging
    ///   - eventLoop: EventLoop to run this process on
    public func describeAutomationStepExecutionsPaginator(
        _ input: DescribeAutomationStepExecutionsRequest,
        logger: Logger = AWSClient.loggingDisabled,
        on eventLoop: EventLoop? = nil
    ) -> AWSClient.PaginatorSequence<DescribeAutomationStepExecutionsRequest, DescribeAutomationStepExecutionsResult> {
        return .init(
            input: input,
            command: describeAutomationStepExecutions,
            inputKey: \DescribeAutomationStepExecutionsRequest.nextToken,
            outputKey: \DescribeAutomationStepExecutionsResult.nextToken,
            logger: logger,
            on: eventLoop
        )
    }

    ///  Lists all patches eligible to be included in a patch baseline.
    /// Return PaginatorSequence for operation.
    ///
    /// - Parameters:
    ///   - input: Input for request
    ///   - logger: Logger used flot logging
    ///   - eventLoop: EventLoop to run this process on
    public func describeAvailablePatchesPaginator(
        _ input: DescribeAvailablePatchesRequest,
        logger: Logger = AWSClient.loggingDisabled,
        on eventLoop: EventLoop? = nil
    ) -> AWSClient.PaginatorSequence<DescribeAvailablePatchesRequest, DescribeAvailablePatchesResult> {
        return .init(
            input: input,
            command: describeAvailablePatches,
            inputKey: \DescribeAvailablePatchesRequest.nextToken,
            outputKey: \DescribeAvailablePatchesResult.nextToken,
            logger: logger,
            on: eventLoop
        )
    }

    ///  All associations for the instance(s).
    /// Return PaginatorSequence for operation.
    ///
    /// - Parameters:
    ///   - input: Input for request
    ///   - logger: Logger used flot logging
    ///   - eventLoop: EventLoop to run this process on
    public func describeEffectiveInstanceAssociationsPaginator(
        _ input: DescribeEffectiveInstanceAssociationsRequest,
        logger: Logger = AWSClient.loggingDisabled,
        on eventLoop: EventLoop? = nil
    ) -> AWSClient.PaginatorSequence<DescribeEffectiveInstanceAssociationsRequest, DescribeEffectiveInstanceAssociationsResult> {
        return .init(
            input: input,
            command: describeEffectiveInstanceAssociations,
            inputKey: \DescribeEffectiveInstanceAssociationsRequest.nextToken,
            outputKey: \DescribeEffectiveInstanceAssociationsResult.nextToken,
            logger: logger,
            on: eventLoop
        )
    }

    ///  Retrieves the current effective patches (the patch and the approval state) for the specified patch baseline. Applies to patch baselines for Windows only.
    /// Return PaginatorSequence for operation.
    ///
    /// - Parameters:
    ///   - input: Input for request
    ///   - logger: Logger used flot logging
    ///   - eventLoop: EventLoop to run this process on
    public func describeEffectivePatchesForPatchBaselinePaginator(
        _ input: DescribeEffectivePatchesForPatchBaselineRequest,
        logger: Logger = AWSClient.loggingDisabled,
        on eventLoop: EventLoop? = nil
    ) -> AWSClient.PaginatorSequence<DescribeEffectivePatchesForPatchBaselineRequest, DescribeEffectivePatchesForPatchBaselineResult> {
        return .init(
            input: input,
            command: describeEffectivePatchesForPatchBaseline,
            inputKey: \DescribeEffectivePatchesForPatchBaselineRequest.nextToken,
            outputKey: \DescribeEffectivePatchesForPatchBaselineResult.nextToken,
            logger: logger,
            on: eventLoop
        )
    }

    ///  The status of the associations for the instance(s).
    /// Return PaginatorSequence for operation.
    ///
    /// - Parameters:
    ///   - input: Input for request
    ///   - logger: Logger used flot logging
    ///   - eventLoop: EventLoop to run this process on
    public func describeInstanceAssociationsStatusPaginator(
        _ input: DescribeInstanceAssociationsStatusRequest,
        logger: Logger = AWSClient.loggingDisabled,
        on eventLoop: EventLoop? = nil
    ) -> AWSClient.PaginatorSequence<DescribeInstanceAssociationsStatusRequest, DescribeInstanceAssociationsStatusResult> {
        return .init(
            input: input,
            command: describeInstanceAssociationsStatus,
            inputKey: \DescribeInstanceAssociationsStatusRequest.nextToken,
            outputKey: \DescribeInstanceAssociationsStatusResult.nextToken,
            logger: logger,
            on: eventLoop
        )
    }

    ///  Describes one or more of your instances, including information about the operating system platform, the version of SSM Agent installed on the instance, instance status, and so on. If you specify one or more instance IDs, it returns information for those instances. If you don't specify instance IDs, it returns information for all your instances. If you specify an instance ID that isn't valid or an instance that you don't own, you receive an error.  The IamRole field for this API operation is the Identity and Access Management (IAM) role assigned to on-premises instances. This call doesn't return the IAM role for EC2 instances.
    /// Return PaginatorSequence for operation.
    ///
    /// - Parameters:
    ///   - input: Input for request
    ///   - logger: Logger used flot logging
    ///   - eventLoop: EventLoop to run this process on
    public func describeInstanceInformationPaginator(
        _ input: DescribeInstanceInformationRequest,
        logger: Logger = AWSClient.loggingDisabled,
        on eventLoop: EventLoop? = nil
    ) -> AWSClient.PaginatorSequence<DescribeInstanceInformationRequest, DescribeInstanceInformationResult> {
        return .init(
            input: input,
            command: describeInstanceInformation,
            inputKey: \DescribeInstanceInformationRequest.nextToken,
            outputKey: \DescribeInstanceInformationResult.nextToken,
            logger: logger,
            on: eventLoop
        )
    }

    ///  Retrieves the high-level patch state of one or more instances.
    /// Return PaginatorSequence for operation.
    ///
    /// - Parameters:
    ///   - input: Input for request
    ///   - logger: Logger used flot logging
    ///   - eventLoop: EventLoop to run this process on
    public func describeInstancePatchStatesPaginator(
        _ input: DescribeInstancePatchStatesRequest,
        logger: Logger = AWSClient.loggingDisabled,
        on eventLoop: EventLoop? = nil
    ) -> AWSClient.PaginatorSequence<DescribeInstancePatchStatesRequest, DescribeInstancePatchStatesResult> {
        return .init(
            input: input,
            command: describeInstancePatchStates,
            inputKey: \DescribeInstancePatchStatesRequest.nextToken,
            outputKey: \DescribeInstancePatchStatesResult.nextToken,
            logger: logger,
            on: eventLoop
        )
    }

    ///  Retrieves the high-level patch state for the instances in the specified patch group.
    /// Return PaginatorSequence for operation.
    ///
    /// - Parameters:
    ///   - input: Input for request
    ///   - logger: Logger used flot logging
    ///   - eventLoop: EventLoop to run this process on
    public func describeInstancePatchStatesForPatchGroupPaginator(
        _ input: DescribeInstancePatchStatesForPatchGroupRequest,
        logger: Logger = AWSClient.loggingDisabled,
        on eventLoop: EventLoop? = nil
    ) -> AWSClient.PaginatorSequence<DescribeInstancePatchStatesForPatchGroupRequest, DescribeInstancePatchStatesForPatchGroupResult> {
        return .init(
            input: input,
            command: describeInstancePatchStatesForPatchGroup,
            inputKey: \DescribeInstancePatchStatesForPatchGroupRequest.nextToken,
            outputKey: \DescribeInstancePatchStatesForPatchGroupResult.nextToken,
            logger: logger,
            on: eventLoop
        )
    }

    ///  Retrieves information about the patches on the specified instance and their state relative to the patch baseline being used for the instance.
    /// Return PaginatorSequence for operation.
    ///
    /// - Parameters:
    ///   - input: Input for request
    ///   - logger: Logger used flot logging
    ///   - eventLoop: EventLoop to run this process on
    public func describeInstancePatchesPaginator(
        _ input: DescribeInstancePatchesRequest,
        logger: Logger = AWSClient.loggingDisabled,
        on eventLoop: EventLoop? = nil
    ) -> AWSClient.PaginatorSequence<DescribeInstancePatchesRequest, DescribeInstancePatchesResult> {
        return .init(
            input: input,
            command: describeInstancePatches,
            inputKey: \DescribeInstancePatchesRequest.nextToken,
            outputKey: \DescribeInstancePatchesResult.nextToken,
            logger: logger,
            on: eventLoop
        )
    }

    ///  Describes a specific delete inventory operation.
    /// Return PaginatorSequence for operation.
    ///
    /// - Parameters:
    ///   - input: Input for request
    ///   - logger: Logger used flot logging
    ///   - eventLoop: EventLoop to run this process on
    public func describeInventoryDeletionsPaginator(
        _ input: DescribeInventoryDeletionsRequest,
        logger: Logger = AWSClient.loggingDisabled,
        on eventLoop: EventLoop? = nil
    ) -> AWSClient.PaginatorSequence<DescribeInventoryDeletionsRequest, DescribeInventoryDeletionsResult> {
        return .init(
            input: input,
            command: describeInventoryDeletions,
            inputKey: \DescribeInventoryDeletionsRequest.nextToken,
            outputKey: \DescribeInventoryDeletionsResult.nextToken,
            logger: logger,
            on: eventLoop
        )
    }

    ///  Retrieves the individual task executions (one per target) for a particular task run as part of a maintenance window execution.
    /// Return PaginatorSequence for operation.
    ///
    /// - Parameters:
    ///   - input: Input for request
    ///   - logger: Logger used flot logging
    ///   - eventLoop: EventLoop to run this process on
    public func describeMaintenanceWindowExecutionTaskInvocationsPaginator(
        _ input: DescribeMaintenanceWindowExecutionTaskInvocationsRequest,
        logger: Logger = AWSClient.loggingDisabled,
        on eventLoop: EventLoop? = nil
    ) -> AWSClient.PaginatorSequence<DescribeMaintenanceWindowExecutionTaskInvocationsRequest, DescribeMaintenanceWindowExecutionTaskInvocationsResult> {
        return .init(
            input: input,
            command: describeMaintenanceWindowExecutionTaskInvocations,
            inputKey: \DescribeMaintenanceWindowExecutionTaskInvocationsRequest.nextToken,
            outputKey: \DescribeMaintenanceWindowExecutionTaskInvocationsResult.nextToken,
            logger: logger,
            on: eventLoop
        )
    }

    ///  For a given maintenance window execution, lists the tasks that were run.
    /// Return PaginatorSequence for operation.
    ///
    /// - Parameters:
    ///   - input: Input for request
    ///   - logger: Logger used flot logging
    ///   - eventLoop: EventLoop to run this process on
    public func describeMaintenanceWindowExecutionTasksPaginator(
        _ input: DescribeMaintenanceWindowExecutionTasksRequest,
        logger: Logger = AWSClient.loggingDisabled,
        on eventLoop: EventLoop? = nil
    ) -> AWSClient.PaginatorSequence<DescribeMaintenanceWindowExecutionTasksRequest, DescribeMaintenanceWindowExecutionTasksResult> {
        return .init(
            input: input,
            command: describeMaintenanceWindowExecutionTasks,
            inputKey: \DescribeMaintenanceWindowExecutionTasksRequest.nextToken,
            outputKey: \DescribeMaintenanceWindowExecutionTasksResult.nextToken,
            logger: logger,
            on: eventLoop
        )
    }

    ///  Lists the executions of a maintenance window. This includes information about when the maintenance window was scheduled to be active, and information about tasks registered and run with the maintenance window.
    /// Return PaginatorSequence for operation.
    ///
    /// - Parameters:
    ///   - input: Input for request
    ///   - logger: Logger used flot logging
    ///   - eventLoop: EventLoop to run this process on
    public func describeMaintenanceWindowExecutionsPaginator(
        _ input: DescribeMaintenanceWindowExecutionsRequest,
        logger: Logger = AWSClient.loggingDisabled,
        on eventLoop: EventLoop? = nil
    ) -> AWSClient.PaginatorSequence<DescribeMaintenanceWindowExecutionsRequest, DescribeMaintenanceWindowExecutionsResult> {
        return .init(
            input: input,
            command: describeMaintenanceWindowExecutions,
            inputKey: \DescribeMaintenanceWindowExecutionsRequest.nextToken,
            outputKey: \DescribeMaintenanceWindowExecutionsResult.nextToken,
            logger: logger,
            on: eventLoop
        )
    }

    ///  Retrieves information about upcoming executions of a maintenance window.
    /// Return PaginatorSequence for operation.
    ///
    /// - Parameters:
    ///   - input: Input for request
    ///   - logger: Logger used flot logging
    ///   - eventLoop: EventLoop to run this process on
    public func describeMaintenanceWindowSchedulePaginator(
        _ input: DescribeMaintenanceWindowScheduleRequest,
        logger: Logger = AWSClient.loggingDisabled,
        on eventLoop: EventLoop? = nil
    ) -> AWSClient.PaginatorSequence<DescribeMaintenanceWindowScheduleRequest, DescribeMaintenanceWindowScheduleResult> {
        return .init(
            input: input,
            command: describeMaintenanceWindowSchedule,
            inputKey: \DescribeMaintenanceWindowScheduleRequest.nextToken,
            outputKey: \DescribeMaintenanceWindowScheduleResult.nextToken,
            logger: logger,
            on: eventLoop
        )
    }

    ///  Lists the targets registered with the maintenance window.
    /// Return PaginatorSequence for operation.
    ///
    /// - Parameters:
    ///   - input: Input for request
    ///   - logger: Logger used flot logging
    ///   - eventLoop: EventLoop to run this process on
    public func describeMaintenanceWindowTargetsPaginator(
        _ input: DescribeMaintenanceWindowTargetsRequest,
        logger: Logger = AWSClient.loggingDisabled,
        on eventLoop: EventLoop? = nil
    ) -> AWSClient.PaginatorSequence<DescribeMaintenanceWindowTargetsRequest, DescribeMaintenanceWindowTargetsResult> {
        return .init(
            input: input,
            command: describeMaintenanceWindowTargets,
            inputKey: \DescribeMaintenanceWindowTargetsRequest.nextToken,
            outputKey: \DescribeMaintenanceWindowTargetsResult.nextToken,
            logger: logger,
            on: eventLoop
        )
    }

    ///  Lists the tasks in a maintenance window.  For maintenance window tasks without a specified target, you can't supply values for --max-errors and --max-concurrency. Instead, the system inserts a placeholder value of 1, which may be reported in the response to this command. These values don't affect the running of your task and can be ignored.
    /// Return PaginatorSequence for operation.
    ///
    /// - Parameters:
    ///   - input: Input for request
    ///   - logger: Logger used flot logging
    ///   - eventLoop: EventLoop to run this process on
    public func describeMaintenanceWindowTasksPaginator(
        _ input: DescribeMaintenanceWindowTasksRequest,
        logger: Logger = AWSClient.loggingDisabled,
        on eventLoop: EventLoop? = nil
    ) -> AWSClient.PaginatorSequence<DescribeMaintenanceWindowTasksRequest, DescribeMaintenanceWindowTasksResult> {
        return .init(
            input: input,
            command: describeMaintenanceWindowTasks,
            inputKey: \DescribeMaintenanceWindowTasksRequest.nextToken,
            outputKey: \DescribeMaintenanceWindowTasksResult.nextToken,
            logger: logger,
            on: eventLoop
        )
    }

    ///  Retrieves the maintenance windows in an Amazon Web Services account.
    /// Return PaginatorSequence for operation.
    ///
    /// - Parameters:
    ///   - input: Input for request
    ///   - logger: Logger used flot logging
    ///   - eventLoop: EventLoop to run this process on
    public func describeMaintenanceWindowsPaginator(
        _ input: DescribeMaintenanceWindowsRequest,
        logger: Logger = AWSClient.loggingDisabled,
        on eventLoop: EventLoop? = nil
    ) -> AWSClient.PaginatorSequence<DescribeMaintenanceWindowsRequest, DescribeMaintenanceWindowsResult> {
        return .init(
            input: input,
            command: describeMaintenanceWindows,
            inputKey: \DescribeMaintenanceWindowsRequest.nextToken,
            outputKey: \DescribeMaintenanceWindowsResult.nextToken,
            logger: logger,
            on: eventLoop
        )
    }

    ///  Retrieves information about the maintenance window targets or tasks that an instance is associated with.
    /// Return PaginatorSequence for operation.
    ///
    /// - Parameters:
    ///   - input: Input for request
    ///   - logger: Logger used flot logging
    ///   - eventLoop: EventLoop to run this process on
    public func describeMaintenanceWindowsForTargetPaginator(
        _ input: DescribeMaintenanceWindowsForTargetRequest,
        logger: Logger = AWSClient.loggingDisabled,
        on eventLoop: EventLoop? = nil
    ) -> AWSClient.PaginatorSequence<DescribeMaintenanceWindowsForTargetRequest, DescribeMaintenanceWindowsForTargetResult> {
        return .init(
            input: input,
            command: describeMaintenanceWindowsForTarget,
            inputKey: \DescribeMaintenanceWindowsForTargetRequest.nextToken,
            outputKey: \DescribeMaintenanceWindowsForTargetResult.nextToken,
            logger: logger,
            on: eventLoop
        )
    }

    ///  Query a set of OpsItems. You must have permission in Identity and Access Management (IAM) to query a list of OpsItems. For more information, see Getting started with OpsCenter in the Amazon Web Services Systems Manager User Guide. Operations engineers and IT professionals use Amazon Web Services Systems Manager OpsCenter to view, investigate, and remediate operational issues impacting the performance and health of their Amazon Web Services resources. For more information, see OpsCenter in the Amazon Web Services Systems Manager User Guide.
    /// Return PaginatorSequence for operation.
    ///
    /// - Parameters:
    ///   - input: Input for request
    ///   - logger: Logger used flot logging
    ///   - eventLoop: EventLoop to run this process on
    public func describeOpsItemsPaginator(
        _ input: DescribeOpsItemsRequest,
        logger: Logger = AWSClient.loggingDisabled,
        on eventLoop: EventLoop? = nil
    ) -> AWSClient.PaginatorSequence<DescribeOpsItemsRequest, DescribeOpsItemsResponse> {
        return .init(
            input: input,
            command: describeOpsItems,
            inputKey: \DescribeOpsItemsRequest.nextToken,
            outputKey: \DescribeOpsItemsResponse.nextToken,
            logger: logger,
            on: eventLoop
        )
    }

    ///  Get information about a parameter. Request results are returned on a best-effort basis. If you specify MaxResults in the request, the response includes information up to the limit specified. The number of items returned, however, can be between zero and the value of MaxResults. If the service reaches an internal limit while processing the results, it stops the operation and returns the matching values up to that point and a NextToken. You can specify the NextToken in a subsequent call to get the next set of results.  If you change the KMS key alias for the KMS key used to encrypt a parameter, then you must also update the key alias the parameter uses to reference KMS. Otherwise, DescribeParameters retrieves whatever the original key alias was referencing.
    /// Return PaginatorSequence for operation.
    ///
    /// - Parameters:
    ///   - input: Input for request
    ///   - logger: Logger used flot logging
    ///   - eventLoop: EventLoop to run this process on
    public func describeParametersPaginator(
        _ input: DescribeParametersRequest,
        logger: Logger = AWSClient.loggingDisabled,
        on eventLoop: EventLoop? = nil
    ) -> AWSClient.PaginatorSequence<DescribeParametersRequest, DescribeParametersResult> {
        return .init(
            input: input,
            command: describeParameters,
            inputKey: \DescribeParametersRequest.nextToken,
            outputKey: \DescribeParametersResult.nextToken,
            logger: logger,
            on: eventLoop
        )
    }

    ///  Lists the patch baselines in your Amazon Web Services account.
    /// Return PaginatorSequence for operation.
    ///
    /// - Parameters:
    ///   - input: Input for request
    ///   - logger: Logger used flot logging
    ///   - eventLoop: EventLoop to run this process on
    public func describePatchBaselinesPaginator(
        _ input: DescribePatchBaselinesRequest,
        logger: Logger = AWSClient.loggingDisabled,
        on eventLoop: EventLoop? = nil
    ) -> AWSClient.PaginatorSequence<DescribePatchBaselinesRequest, DescribePatchBaselinesResult> {
        return .init(
            input: input,
            command: describePatchBaselines,
            inputKey: \DescribePatchBaselinesRequest.nextToken,
            outputKey: \DescribePatchBaselinesResult.nextToken,
            logger: logger,
            on: eventLoop
        )
    }

    ///  Lists all patch groups that have been registered with patch baselines.
    /// Return PaginatorSequence for operation.
    ///
    /// - Parameters:
    ///   - input: Input for request
    ///   - logger: Logger used flot logging
    ///   - eventLoop: EventLoop to run this process on
    public func describePatchGroupsPaginator(
        _ input: DescribePatchGroupsRequest,
        logger: Logger = AWSClient.loggingDisabled,
        on eventLoop: EventLoop? = nil
    ) -> AWSClient.PaginatorSequence<DescribePatchGroupsRequest, DescribePatchGroupsResult> {
        return .init(
            input: input,
            command: describePatchGroups,
            inputKey: \DescribePatchGroupsRequest.nextToken,
            outputKey: \DescribePatchGroupsResult.nextToken,
            logger: logger,
            on: eventLoop
        )
    }

    ///  Lists the properties of available patches organized by product, product family, classification, severity, and other properties of available patches. You can use the reported properties in the filters you specify in requests for operations such as CreatePatchBaseline, UpdatePatchBaseline, DescribeAvailablePatches, and DescribePatchBaselines. The following section lists the properties that can be used in filters for each major operating system type:  AMAZON_LINUX  Valid properties: PRODUCT | CLASSIFICATION | SEVERITY   AMAZON_LINUX_2  Valid properties: PRODUCT | CLASSIFICATION | SEVERITY   CENTOS  Valid properties: PRODUCT | CLASSIFICATION | SEVERITY   DEBIAN  Valid properties: PRODUCT | PRIORITY   MACOS  Valid properties: PRODUCT | CLASSIFICATION   ORACLE_LINUX  Valid properties: PRODUCT | CLASSIFICATION | SEVERITY   REDHAT_ENTERPRISE_LINUX  Valid properties: PRODUCT | CLASSIFICATION | SEVERITY   SUSE  Valid properties: PRODUCT | CLASSIFICATION | SEVERITY   UBUNTU  Valid properties: PRODUCT | PRIORITY   WINDOWS  Valid properties: PRODUCT | PRODUCT_FAMILY | CLASSIFICATION | MSRC_SEVERITY
    /// Return PaginatorSequence for operation.
    ///
    /// - Parameters:
    ///   - input: Input for request
    ///   - logger: Logger used flot logging
    ///   - eventLoop: EventLoop to run this process on
    public func describePatchPropertiesPaginator(
        _ input: DescribePatchPropertiesRequest,
        logger: Logger = AWSClient.loggingDisabled,
        on eventLoop: EventLoop? = nil
    ) -> AWSClient.PaginatorSequence<DescribePatchPropertiesRequest, DescribePatchPropertiesResult> {
        return .init(
            input: input,
            command: describePatchProperties,
            inputKey: \DescribePatchPropertiesRequest.nextToken,
            outputKey: \DescribePatchPropertiesResult.nextToken,
            logger: logger,
            on: eventLoop
        )
    }

    ///  Retrieves a list of all active sessions (both connected and disconnected) or terminated sessions from the past 30 days.
    /// Return PaginatorSequence for operation.
    ///
    /// - Parameters:
    ///   - input: Input for request
    ///   - logger: Logger used flot logging
    ///   - eventLoop: EventLoop to run this process on
    public func describeSessionsPaginator(
        _ input: DescribeSessionsRequest,
        logger: Logger = AWSClient.loggingDisabled,
        on eventLoop: EventLoop? = nil
    ) -> AWSClient.PaginatorSequence<DescribeSessionsRequest, DescribeSessionsResponse> {
        return .init(
            input: input,
            command: describeSessions,
            inputKey: \DescribeSessionsRequest.nextToken,
            outputKey: \DescribeSessionsResponse.nextToken,
            logger: logger,
            on: eventLoop
        )
    }

    ///  Query inventory information. This includes instance status, such as Stopped or Terminated.
    /// Return PaginatorSequence for operation.
    ///
    /// - Parameters:
    ///   - input: Input for request
    ///   - logger: Logger used flot logging
    ///   - eventLoop: EventLoop to run this process on
    public func getInventoryPaginator(
        _ input: GetInventoryRequest,
        logger: Logger = AWSClient.loggingDisabled,
        on eventLoop: EventLoop? = nil
    ) -> AWSClient.PaginatorSequence<GetInventoryRequest, GetInventoryResult> {
        return .init(
            input: input,
            command: getInventory,
            inputKey: \GetInventoryRequest.nextToken,
            outputKey: \GetInventoryResult.nextToken,
            logger: logger,
            on: eventLoop
        )
    }

    ///  Return a list of inventory type names for the account, or return a list of attribute names for a specific Inventory item type.
    /// Return PaginatorSequence for operation.
    ///
    /// - Parameters:
    ///   - input: Input for request
    ///   - logger: Logger used flot logging
    ///   - eventLoop: EventLoop to run this process on
    public func getInventorySchemaPaginator(
        _ input: GetInventorySchemaRequest,
        logger: Logger = AWSClient.loggingDisabled,
        on eventLoop: EventLoop? = nil
    ) -> AWSClient.PaginatorSequence<GetInventorySchemaRequest, GetInventorySchemaResult> {
        return .init(
            input: input,
            command: getInventorySchema,
            inputKey: \GetInventorySchemaRequest.nextToken,
            outputKey: \GetInventorySchemaResult.nextToken,
            logger: logger,
            on: eventLoop
        )
    }

    ///  View a summary of operations metadata (OpsData) based on specified filters and aggregators. OpsData can include information about Amazon Web Services Systems Manager OpsCenter operational workitems (OpsItems) as well as information about any Amazon Web Services resource or service configured to report OpsData to Amazon Web Services Systems Manager Explorer.
    /// Return PaginatorSequence for operation.
    ///
    /// - Parameters:
    ///   - input: Input for request
    ///   - logger: Logger used flot logging
    ///   - eventLoop: EventLoop to run this process on
    public func getOpsSummaryPaginator(
        _ input: GetOpsSummaryRequest,
        logger: Logger = AWSClient.loggingDisabled,
        on eventLoop: EventLoop? = nil
    ) -> AWSClient.PaginatorSequence<GetOpsSummaryRequest, GetOpsSummaryResult> {
        return .init(
            input: input,
            command: getOpsSummary,
            inputKey: \GetOpsSummaryRequest.nextToken,
            outputKey: \GetOpsSummaryResult.nextToken,
            logger: logger,
            on: eventLoop
        )
    }

    ///  Retrieves the history of all changes to a parameter.  If you change the KMS key alias for the KMS key used to encrypt a parameter, then you must also update the key alias the parameter uses to reference KMS. Otherwise, GetParameterHistory retrieves whatever the original key alias was referencing.
    /// Return PaginatorSequence for operation.
    ///
    /// - Parameters:
    ///   - input: Input for request
    ///   - logger: Logger used flot logging
    ///   - eventLoop: EventLoop to run this process on
    public func getParameterHistoryPaginator(
        _ input: GetParameterHistoryRequest,
        logger: Logger = AWSClient.loggingDisabled,
        on eventLoop: EventLoop? = nil
    ) -> AWSClient.PaginatorSequence<GetParameterHistoryRequest, GetParameterHistoryResult> {
        return .init(
            input: input,
            command: getParameterHistory,
            inputKey: \GetParameterHistoryRequest.nextToken,
            outputKey: \GetParameterHistoryResult.nextToken,
            logger: logger,
            on: eventLoop
        )
    }

    ///  Retrieve information about one or more parameters in a specific hierarchy.  Request results are returned on a best-effort basis. If you specify MaxResults in the request, the response includes information up to the limit specified. The number of items returned, however, can be between zero and the value of MaxResults. If the service reaches an internal limit while processing the results, it stops the operation and returns the matching values up to that point and a NextToken. You can specify the NextToken in a subsequent call to get the next set of results.
    /// Return PaginatorSequence for operation.
    ///
    /// - Parameters:
    ///   - input: Input for request
    ///   - logger: Logger used flot logging
    ///   - eventLoop: EventLoop to run this process on
    public func getParametersByPathPaginator(
        _ input: GetParametersByPathRequest,
        logger: Logger = AWSClient.loggingDisabled,
        on eventLoop: EventLoop? = nil
    ) -> AWSClient.PaginatorSequence<GetParametersByPathRequest, GetParametersByPathResult> {
        return .init(
            input: input,
            command: getParametersByPath,
            inputKey: \GetParametersByPathRequest.nextToken,
            outputKey: \GetParametersByPathResult.nextToken,
            logger: logger,
            on: eventLoop
        )
    }

    ///  Retrieves all versions of an association for a specific association ID.
    /// Return PaginatorSequence for operation.
    ///
    /// - Parameters:
    ///   - input: Input for request
    ///   - logger: Logger used flot logging
    ///   - eventLoop: EventLoop to run this process on
    public func listAssociationVersionsPaginator(
        _ input: ListAssociationVersionsRequest,
        logger: Logger = AWSClient.loggingDisabled,
        on eventLoop: EventLoop? = nil
    ) -> AWSClient.PaginatorSequence<ListAssociationVersionsRequest, ListAssociationVersionsResult> {
        return .init(
            input: input,
            command: listAssociationVersions,
            inputKey: \ListAssociationVersionsRequest.nextToken,
            outputKey: \ListAssociationVersionsResult.nextToken,
            logger: logger,
            on: eventLoop
        )
    }

    ///  Returns all State Manager associations in the current Amazon Web Services account and Amazon Web Services Region. You can limit the results to a specific State Manager association document or instance by specifying a filter. State Manager is a capability of Amazon Web Services Systems Manager.
    /// Return PaginatorSequence for operation.
    ///
    /// - Parameters:
    ///   - input: Input for request
    ///   - logger: Logger used flot logging
    ///   - eventLoop: EventLoop to run this process on
    public func listAssociationsPaginator(
        _ input: ListAssociationsRequest,
        logger: Logger = AWSClient.loggingDisabled,
        on eventLoop: EventLoop? = nil
    ) -> AWSClient.PaginatorSequence<ListAssociationsRequest, ListAssociationsResult> {
        return .init(
            input: input,
            command: listAssociations,
            inputKey: \ListAssociationsRequest.nextToken,
            outputKey: \ListAssociationsResult.nextToken,
            logger: logger,
            on: eventLoop
        )
    }

    ///  An invocation is copy of a command sent to a specific instance. A command can apply to one or more instances. A command invocation applies to one instance. For example, if a user runs SendCommand against three instances, then a command invocation is created for each requested instance ID. ListCommandInvocations provide status about command execution.
    /// Return PaginatorSequence for operation.
    ///
    /// - Parameters:
    ///   - input: Input for request
    ///   - logger: Logger used flot logging
    ///   - eventLoop: EventLoop to run this process on
    public func listCommandInvocationsPaginator(
        _ input: ListCommandInvocationsRequest,
        logger: Logger = AWSClient.loggingDisabled,
        on eventLoop: EventLoop? = nil
    ) -> AWSClient.PaginatorSequence<ListCommandInvocationsRequest, ListCommandInvocationsResult> {
        return .init(
            input: input,
            command: listCommandInvocations,
            inputKey: \ListCommandInvocationsRequest.nextToken,
            outputKey: \ListCommandInvocationsResult.nextToken,
            logger: logger,
            on: eventLoop
        )
    }

    ///  Lists the commands requested by users of the Amazon Web Services account.
    /// Return PaginatorSequence for operation.
    ///
    /// - Parameters:
    ///   - input: Input for request
    ///   - logger: Logger used flot logging
    ///   - eventLoop: EventLoop to run this process on
    public func listCommandsPaginator(
        _ input: ListCommandsRequest,
        logger: Logger = AWSClient.loggingDisabled,
        on eventLoop: EventLoop? = nil
    ) -> AWSClient.PaginatorSequence<ListCommandsRequest, ListCommandsResult> {
        return .init(
            input: input,
            command: listCommands,
            inputKey: \ListCommandsRequest.nextToken,
            outputKey: \ListCommandsResult.nextToken,
            logger: logger,
            on: eventLoop
        )
    }

    ///  For a specified resource ID, this API operation returns a list of compliance statuses for different resource types. Currently, you can only specify one resource ID per call. List results depend on the criteria specified in the filter.
    /// Return PaginatorSequence for operation.
    ///
    /// - Parameters:
    ///   - input: Input for request
    ///   - logger: Logger used flot logging
    ///   - eventLoop: EventLoop to run this process on
    public func listComplianceItemsPaginator(
        _ input: ListComplianceItemsRequest,
        logger: Logger = AWSClient.loggingDisabled,
        on eventLoop: EventLoop? = nil
    ) -> AWSClient.PaginatorSequence<ListComplianceItemsRequest, ListComplianceItemsResult> {
        return .init(
            input: input,
            command: listComplianceItems,
            inputKey: \ListComplianceItemsRequest.nextToken,
            outputKey: \ListComplianceItemsResult.nextToken,
            logger: logger,
            on: eventLoop
        )
    }

    ///  Returns a summary count of compliant and non-compliant resources for a compliance type. For example, this call can return State Manager associations, patches, or custom compliance types according to the filter criteria that you specify.
    /// Return PaginatorSequence for operation.
    ///
    /// - Parameters:
    ///   - input: Input for request
    ///   - logger: Logger used flot logging
    ///   - eventLoop: EventLoop to run this process on
    public func listComplianceSummariesPaginator(
        _ input: ListComplianceSummariesRequest,
        logger: Logger = AWSClient.loggingDisabled,
        on eventLoop: EventLoop? = nil
    ) -> AWSClient.PaginatorSequence<ListComplianceSummariesRequest, ListComplianceSummariesResult> {
        return .init(
            input: input,
            command: listComplianceSummaries,
            inputKey: \ListComplianceSummariesRequest.nextToken,
            outputKey: \ListComplianceSummariesResult.nextToken,
            logger: logger,
            on: eventLoop
        )
    }

    ///  List all versions for a document.
    /// Return PaginatorSequence for operation.
    ///
    /// - Parameters:
    ///   - input: Input for request
    ///   - logger: Logger used flot logging
    ///   - eventLoop: EventLoop to run this process on
    public func listDocumentVersionsPaginator(
        _ input: ListDocumentVersionsRequest,
        logger: Logger = AWSClient.loggingDisabled,
        on eventLoop: EventLoop? = nil
    ) -> AWSClient.PaginatorSequence<ListDocumentVersionsRequest, ListDocumentVersionsResult> {
        return .init(
            input: input,
            command: listDocumentVersions,
            inputKey: \ListDocumentVersionsRequest.nextToken,
            outputKey: \ListDocumentVersionsResult.nextToken,
            logger: logger,
            on: eventLoop
        )
    }

    ///  Returns all Systems Manager (SSM) documents in the current Amazon Web Services account and Amazon Web Services Region. You can limit the results of this request by using a filter.
    /// Return PaginatorSequence for operation.
    ///
    /// - Parameters:
    ///   - input: Input for request
    ///   - logger: Logger used flot logging
    ///   - eventLoop: EventLoop to run this process on
    public func listDocumentsPaginator(
        _ input: ListDocumentsRequest,
        logger: Logger = AWSClient.loggingDisabled,
        on eventLoop: EventLoop? = nil
    ) -> AWSClient.PaginatorSequence<ListDocumentsRequest, ListDocumentsResult> {
        return .init(
            input: input,
            command: listDocuments,
            inputKey: \ListDocumentsRequest.nextToken,
            outputKey: \ListDocumentsResult.nextToken,
            logger: logger,
            on: eventLoop
        )
    }

    ///  Returns a list of all OpsItem events in the current Amazon Web Services Region and Amazon Web Services account. You can limit the results to events associated with specific OpsItems by specifying a filter.
    /// Return PaginatorSequence for operation.
    ///
    /// - Parameters:
    ///   - input: Input for request
    ///   - logger: Logger used flot logging
    ///   - eventLoop: EventLoop to run this process on
    public func listOpsItemEventsPaginator(
        _ input: ListOpsItemEventsRequest,
        logger: Logger = AWSClient.loggingDisabled,
        on eventLoop: EventLoop? = nil
    ) -> AWSClient.PaginatorSequence<ListOpsItemEventsRequest, ListOpsItemEventsResponse> {
        return .init(
            input: input,
            command: listOpsItemEvents,
            inputKey: \ListOpsItemEventsRequest.nextToken,
            outputKey: \ListOpsItemEventsResponse.nextToken,
            logger: logger,
            on: eventLoop
        )
    }

    ///  Lists all related-item resources associated with a Systems Manager OpsCenter OpsItem. OpsCenter is a capability of Amazon Web Services Systems Manager.
    /// Return PaginatorSequence for operation.
    ///
    /// - Parameters:
    ///   - input: Input for request
    ///   - logger: Logger used flot logging
    ///   - eventLoop: EventLoop to run this process on
    public func listOpsItemRelatedItemsPaginator(
        _ input: ListOpsItemRelatedItemsRequest,
        logger: Logger = AWSClient.loggingDisabled,
        on eventLoop: EventLoop? = nil
    ) -> AWSClient.PaginatorSequence<ListOpsItemRelatedItemsRequest, ListOpsItemRelatedItemsResponse> {
        return .init(
            input: input,
            command: listOpsItemRelatedItems,
            inputKey: \ListOpsItemRelatedItemsRequest.nextToken,
            outputKey: \ListOpsItemRelatedItemsResponse.nextToken,
            logger: logger,
            on: eventLoop
        )
    }

    ///  Amazon Web Services Systems Manager calls this API operation when displaying all Application Manager OpsMetadata objects or blobs.
    /// Return PaginatorSequence for operation.
    ///
    /// - Parameters:
    ///   - input: Input for request
    ///   - logger: Logger used flot logging
    ///   - eventLoop: EventLoop to run this process on
    public func listOpsMetadataPaginator(
        _ input: ListOpsMetadataRequest,
        logger: Logger = AWSClient.loggingDisabled,
        on eventLoop: EventLoop? = nil
    ) -> AWSClient.PaginatorSequence<ListOpsMetadataRequest, ListOpsMetadataResult> {
        return .init(
            input: input,
            command: listOpsMetadata,
            inputKey: \ListOpsMetadataRequest.nextToken,
            outputKey: \ListOpsMetadataResult.nextToken,
            logger: logger,
            on: eventLoop
        )
    }

    ///  Returns a resource-level summary count. The summary includes information about compliant and non-compliant statuses and detailed compliance-item severity counts, according to the filter criteria you specify.
    /// Return PaginatorSequence for operation.
    ///
    /// - Parameters:
    ///   - input: Input for request
    ///   - logger: Logger used flot logging
    ///   - eventLoop: EventLoop to run this process on
    public func listResourceComplianceSummariesPaginator(
        _ input: ListResourceComplianceSummariesRequest,
        logger: Logger = AWSClient.loggingDisabled,
        on eventLoop: EventLoop? = nil
    ) -> AWSClient.PaginatorSequence<ListResourceComplianceSummariesRequest, ListResourceComplianceSummariesResult> {
        return .init(
            input: input,
            command: listResourceComplianceSummaries,
            inputKey: \ListResourceComplianceSummariesRequest.nextToken,
            outputKey: \ListResourceComplianceSummariesResult.nextToken,
            logger: logger,
            on: eventLoop
        )
    }

    ///  Lists your resource data sync configurations. Includes information about the last time a sync attempted to start, the last sync status, and the last time a sync successfully completed. The number of sync configurations might be too large to return using a single call to ListResourceDataSync. You can limit the number of sync configurations returned by using the MaxResults parameter. To determine whether there are more sync configurations to list, check the value of NextToken in the output. If there are more sync configurations to list, you can request them by specifying the NextToken returned in the call to the parameter of a subsequent call.
    /// Return PaginatorSequence for operation.
    ///
    /// - Parameters:
    ///   - input: Input for request
    ///   - logger: Logger used flot logging
    ///   - eventLoop: EventLoop to run this process on
    public func listResourceDataSyncPaginator(
        _ input: ListResourceDataSyncRequest,
        logger: Logger = AWSClient.loggingDisabled,
        on eventLoop: EventLoop? = nil
    ) -> AWSClient.PaginatorSequence<ListResourceDataSyncRequest, ListResourceDataSyncResult> {
        return .init(
            input: input,
            command: listResourceDataSync,
            inputKey: \ListResourceDataSyncRequest.nextToken,
            outputKey: \ListResourceDataSyncResult.nextToken,
            logger: logger,
            on: eventLoop
        )
    }
}

#endif // compiler(>=5.5) && canImport(_Concurrency)
