//===----------------------------------------------------------------------===//
//
// This source file is part of the Soto for AWS open source project
//
// Copyright (c) 2017-2023 the Soto project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
// See CONTRIBUTORS.txt for the list of Soto project authors
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by https://github.com/soto-project/soto-codegenerator.
// DO NOT EDIT.

import SotoCore

@available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
extension Finspace {
    // MARK: Async API Calls

    /// Create a new FinSpace environment.
    public func createEnvironment(_ input: CreateEnvironmentRequest, logger: Logger = AWSClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> CreateEnvironmentResponse {
        return try await self.client.execute(operation: "CreateEnvironment", path: "/environment", httpMethod: .POST, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    ///  Creates a changeset for a kdb database. A changeset allows you to add and delete existing files by using an ordered list of change requests.
    public func createKxChangeset(_ input: CreateKxChangesetRequest, logger: Logger = AWSClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> CreateKxChangesetResponse {
        return try await self.client.execute(operation: "CreateKxChangeset", path: "/kx/environments/{environmentId}/databases/{databaseName}/changesets", httpMethod: .POST, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// Creates a new kdb cluster.
    public func createKxCluster(_ input: CreateKxClusterRequest, logger: Logger = AWSClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> CreateKxClusterResponse {
        return try await self.client.execute(operation: "CreateKxCluster", path: "/kx/environments/{environmentId}/clusters", httpMethod: .POST, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// Creates a new kdb database in the environment.
    public func createKxDatabase(_ input: CreateKxDatabaseRequest, logger: Logger = AWSClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> CreateKxDatabaseResponse {
        return try await self.client.execute(operation: "CreateKxDatabase", path: "/kx/environments/{environmentId}/databases", httpMethod: .POST, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// Creates a managed kdb environment for the account.
    public func createKxEnvironment(_ input: CreateKxEnvironmentRequest, logger: Logger = AWSClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> CreateKxEnvironmentResponse {
        return try await self.client.execute(operation: "CreateKxEnvironment", path: "/kx/environments", httpMethod: .POST, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// Creates a user in FinSpace kdb environment with an associated IAM role.
    public func createKxUser(_ input: CreateKxUserRequest, logger: Logger = AWSClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> CreateKxUserResponse {
        return try await self.client.execute(operation: "CreateKxUser", path: "/kx/environments/{environmentId}/users", httpMethod: .POST, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// Delete an FinSpace environment.
    public func deleteEnvironment(_ input: DeleteEnvironmentRequest, logger: Logger = AWSClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DeleteEnvironmentResponse {
        return try await self.client.execute(operation: "DeleteEnvironment", path: "/environment/{environmentId}", httpMethod: .DELETE, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// Deletes a kdb cluster.
    public func deleteKxCluster(_ input: DeleteKxClusterRequest, logger: Logger = AWSClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DeleteKxClusterResponse {
        return try await self.client.execute(operation: "DeleteKxCluster", path: "/kx/environments/{environmentId}/clusters/{clusterName}", httpMethod: .DELETE, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// Deletes the specified database and all of its associated data. This action is irreversible. You must copy any data out of the database before deleting it if the data is to be retained.
    public func deleteKxDatabase(_ input: DeleteKxDatabaseRequest, logger: Logger = AWSClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DeleteKxDatabaseResponse {
        return try await self.client.execute(operation: "DeleteKxDatabase", path: "/kx/environments/{environmentId}/databases/{databaseName}", httpMethod: .DELETE, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// Deletes the kdb environment. This action is irreversible. Deleting a kdb environment will remove all the associated data and any services running in it.
    public func deleteKxEnvironment(_ input: DeleteKxEnvironmentRequest, logger: Logger = AWSClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DeleteKxEnvironmentResponse {
        return try await self.client.execute(operation: "DeleteKxEnvironment", path: "/kx/environments/{environmentId}", httpMethod: .DELETE, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// Deletes a user in the specified kdb environment.
    public func deleteKxUser(_ input: DeleteKxUserRequest, logger: Logger = AWSClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DeleteKxUserResponse {
        return try await self.client.execute(operation: "DeleteKxUser", path: "/kx/environments/{environmentId}/users/{userName}", httpMethod: .DELETE, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// Returns the FinSpace environment object.
    public func getEnvironment(_ input: GetEnvironmentRequest, logger: Logger = AWSClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> GetEnvironmentResponse {
        return try await self.client.execute(operation: "GetEnvironment", path: "/environment/{environmentId}", httpMethod: .GET, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// Returns information about a kdb changeset.
    public func getKxChangeset(_ input: GetKxChangesetRequest, logger: Logger = AWSClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> GetKxChangesetResponse {
        return try await self.client.execute(operation: "GetKxChangeset", path: "/kx/environments/{environmentId}/databases/{databaseName}/changesets/{changesetId}", httpMethod: .GET, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// Retrieves information about a kdb cluster.
    public func getKxCluster(_ input: GetKxClusterRequest, logger: Logger = AWSClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> GetKxClusterResponse {
        return try await self.client.execute(operation: "GetKxCluster", path: "/kx/environments/{environmentId}/clusters/{clusterName}", httpMethod: .GET, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// Retrieves a connection string for a user to connect to a kdb cluster. You must call this API using the same role that you have defined while creating a user.
    public func getKxConnectionString(_ input: GetKxConnectionStringRequest, logger: Logger = AWSClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> GetKxConnectionStringResponse {
        return try await self.client.execute(operation: "GetKxConnectionString", path: "/kx/environments/{environmentId}/connectionString", httpMethod: .GET, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// Returns database information for the specified environment ID.
    public func getKxDatabase(_ input: GetKxDatabaseRequest, logger: Logger = AWSClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> GetKxDatabaseResponse {
        return try await self.client.execute(operation: "GetKxDatabase", path: "/kx/environments/{environmentId}/databases/{databaseName}", httpMethod: .GET, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// Retrieves all the information for the specified kdb environment.
    public func getKxEnvironment(_ input: GetKxEnvironmentRequest, logger: Logger = AWSClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> GetKxEnvironmentResponse {
        return try await self.client.execute(operation: "GetKxEnvironment", path: "/kx/environments/{environmentId}", httpMethod: .GET, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// Retrieves information about the specified kdb user.
    public func getKxUser(_ input: GetKxUserRequest, logger: Logger = AWSClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> GetKxUserResponse {
        return try await self.client.execute(operation: "GetKxUser", path: "/kx/environments/{environmentId}/users/{userName}", httpMethod: .GET, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// A list of all of your FinSpace environments.
    public func listEnvironments(_ input: ListEnvironmentsRequest, logger: Logger = AWSClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> ListEnvironmentsResponse {
        return try await self.client.execute(operation: "ListEnvironments", path: "/environment", httpMethod: .GET, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// Returns a list of all the changesets for a database.
    public func listKxChangesets(_ input: ListKxChangesetsRequest, logger: Logger = AWSClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> ListKxChangesetsResponse {
        return try await self.client.execute(operation: "ListKxChangesets", path: "/kx/environments/{environmentId}/databases/{databaseName}/changesets", httpMethod: .GET, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// Lists all the nodes in a kdb cluster.
    public func listKxClusterNodes(_ input: ListKxClusterNodesRequest, logger: Logger = AWSClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> ListKxClusterNodesResponse {
        return try await self.client.execute(operation: "ListKxClusterNodes", path: "/kx/environments/{environmentId}/clusters/{clusterName}/nodes", httpMethod: .GET, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// Returns a list of clusters.
    public func listKxClusters(_ input: ListKxClustersRequest, logger: Logger = AWSClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> ListKxClustersResponse {
        return try await self.client.execute(operation: "ListKxClusters", path: "/kx/environments/{environmentId}/clusters", httpMethod: .GET, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// Returns a list of all the databases in the kdb environment.
    public func listKxDatabases(_ input: ListKxDatabasesRequest, logger: Logger = AWSClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> ListKxDatabasesResponse {
        return try await self.client.execute(operation: "ListKxDatabases", path: "/kx/environments/{environmentId}/databases", httpMethod: .GET, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// Returns a list of kdb environments created in an account.
    public func listKxEnvironments(_ input: ListKxEnvironmentsRequest, logger: Logger = AWSClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> ListKxEnvironmentsResponse {
        return try await self.client.execute(operation: "ListKxEnvironments", path: "/kx/environments", httpMethod: .GET, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// Lists all the users in a kdb environment.
    public func listKxUsers(_ input: ListKxUsersRequest, logger: Logger = AWSClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> ListKxUsersResponse {
        return try await self.client.execute(operation: "ListKxUsers", path: "/kx/environments/{environmentId}/users", httpMethod: .GET, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// A list of all tags for a resource.
    public func listTagsForResource(_ input: ListTagsForResourceRequest, logger: Logger = AWSClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> ListTagsForResourceResponse {
        return try await self.client.execute(operation: "ListTagsForResource", path: "/tags/{resourceArn}", httpMethod: .GET, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// Adds metadata tags to a FinSpace resource.
    public func tagResource(_ input: TagResourceRequest, logger: Logger = AWSClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> TagResourceResponse {
        return try await self.client.execute(operation: "TagResource", path: "/tags/{resourceArn}", httpMethod: .POST, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// Removes metadata tags from a FinSpace resource.
    public func untagResource(_ input: UntagResourceRequest, logger: Logger = AWSClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> UntagResourceResponse {
        return try await self.client.execute(operation: "UntagResource", path: "/tags/{resourceArn}", httpMethod: .DELETE, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// Update your FinSpace environment.
    public func updateEnvironment(_ input: UpdateEnvironmentRequest, logger: Logger = AWSClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> UpdateEnvironmentResponse {
        return try await self.client.execute(operation: "UpdateEnvironment", path: "/environment/{environmentId}", httpMethod: .PUT, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// Updates the databases mounted on a kdb cluster, which includes the changesetId and all the dbPaths to be cached. This API does not allow you to change a database name or add a database if you created a cluster without one.  Using this API you can point a cluster to a different changeset and modify a list of partitions being cached.
    public func updateKxClusterDatabases(_ input: UpdateKxClusterDatabasesRequest, logger: Logger = AWSClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> UpdateKxClusterDatabasesResponse {
        return try await self.client.execute(operation: "UpdateKxClusterDatabases", path: "/kx/environments/{environmentId}/clusters/{clusterName}/configuration/databases", httpMethod: .PUT, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// Updates information for the given kdb database.
    public func updateKxDatabase(_ input: UpdateKxDatabaseRequest, logger: Logger = AWSClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> UpdateKxDatabaseResponse {
        return try await self.client.execute(operation: "UpdateKxDatabase", path: "/kx/environments/{environmentId}/databases/{databaseName}", httpMethod: .PUT, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// Updates information for the given kdb environment.
    public func updateKxEnvironment(_ input: UpdateKxEnvironmentRequest, logger: Logger = AWSClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> UpdateKxEnvironmentResponse {
        return try await self.client.execute(operation: "UpdateKxEnvironment", path: "/kx/environments/{environmentId}", httpMethod: .PUT, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// Updates environment network to connect to your internal network by using a transit gateway. This API supports request to create a transit gateway attachment from FinSpace VPC to your transit gateway ID and create a custom Route-53 outbound resolvers. Once you send a request to update a network, you cannot change it again. Network update might require termination of any clusters that are running in the existing network.
    public func updateKxEnvironmentNetwork(_ input: UpdateKxEnvironmentNetworkRequest, logger: Logger = AWSClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> UpdateKxEnvironmentNetworkResponse {
        return try await self.client.execute(operation: "UpdateKxEnvironmentNetwork", path: "/kx/environments/{environmentId}/network", httpMethod: .PUT, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// Updates the user details. You can only update the IAM role associated with a user.
    public func updateKxUser(_ input: UpdateKxUserRequest, logger: Logger = AWSClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> UpdateKxUserResponse {
        return try await self.client.execute(operation: "UpdateKxUser", path: "/kx/environments/{environmentId}/users/{userName}", httpMethod: .PUT, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }
}

// MARK: Paginators

@available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
extension Finspace {
    /// Returns a list of all the changesets for a database.
    /// Return PaginatorSequence for operation.
    ///
    /// - Parameters:
    ///   - input: Input for request
    ///   - logger: Logger used flot logging
    ///   - eventLoop: EventLoop to run this process on
    public func listKxChangesetsPaginator(
        _ input: ListKxChangesetsRequest,
        logger: Logger = AWSClient.loggingDisabled,
        on eventLoop: EventLoop? = nil
    ) -> AWSClient.PaginatorSequence<ListKxChangesetsRequest, ListKxChangesetsResponse> {
        return .init(
            input: input,
            command: self.listKxChangesets,
            inputKey: \ListKxChangesetsRequest.nextToken,
            outputKey: \ListKxChangesetsResponse.nextToken,
            logger: logger,
            on: eventLoop
        )
    }

    /// Lists all the nodes in a kdb cluster.
    /// Return PaginatorSequence for operation.
    ///
    /// - Parameters:
    ///   - input: Input for request
    ///   - logger: Logger used flot logging
    ///   - eventLoop: EventLoop to run this process on
    public func listKxClusterNodesPaginator(
        _ input: ListKxClusterNodesRequest,
        logger: Logger = AWSClient.loggingDisabled,
        on eventLoop: EventLoop? = nil
    ) -> AWSClient.PaginatorSequence<ListKxClusterNodesRequest, ListKxClusterNodesResponse> {
        return .init(
            input: input,
            command: self.listKxClusterNodes,
            inputKey: \ListKxClusterNodesRequest.nextToken,
            outputKey: \ListKxClusterNodesResponse.nextToken,
            logger: logger,
            on: eventLoop
        )
    }

    /// Returns a list of all the databases in the kdb environment.
    /// Return PaginatorSequence for operation.
    ///
    /// - Parameters:
    ///   - input: Input for request
    ///   - logger: Logger used flot logging
    ///   - eventLoop: EventLoop to run this process on
    public func listKxDatabasesPaginator(
        _ input: ListKxDatabasesRequest,
        logger: Logger = AWSClient.loggingDisabled,
        on eventLoop: EventLoop? = nil
    ) -> AWSClient.PaginatorSequence<ListKxDatabasesRequest, ListKxDatabasesResponse> {
        return .init(
            input: input,
            command: self.listKxDatabases,
            inputKey: \ListKxDatabasesRequest.nextToken,
            outputKey: \ListKxDatabasesResponse.nextToken,
            logger: logger,
            on: eventLoop
        )
    }

    /// Returns a list of kdb environments created in an account.
    /// Return PaginatorSequence for operation.
    ///
    /// - Parameters:
    ///   - input: Input for request
    ///   - logger: Logger used flot logging
    ///   - eventLoop: EventLoop to run this process on
    public func listKxEnvironmentsPaginator(
        _ input: ListKxEnvironmentsRequest,
        logger: Logger = AWSClient.loggingDisabled,
        on eventLoop: EventLoop? = nil
    ) -> AWSClient.PaginatorSequence<ListKxEnvironmentsRequest, ListKxEnvironmentsResponse> {
        return .init(
            input: input,
            command: self.listKxEnvironments,
            inputKey: \ListKxEnvironmentsRequest.nextToken,
            outputKey: \ListKxEnvironmentsResponse.nextToken,
            logger: logger,
            on: eventLoop
        )
    }
}
