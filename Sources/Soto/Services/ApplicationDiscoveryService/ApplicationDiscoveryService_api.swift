//===----------------------------------------------------------------------===//
//
// This source file is part of the Soto for AWS open source project
//
// Copyright (c) 2017-2024 the Soto project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
// See CONTRIBUTORS.txt for the list of Soto project authors
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by https://github.com/soto-project/soto-codegenerator.
// DO NOT EDIT.

#if canImport(FoundationEssentials)
import FoundationEssentials
#else
import Foundation
#endif
@_exported import SotoCore

/// Service object for interacting with AWS ApplicationDiscoveryService service.
///
/// Amazon Web Services Application Discovery Service Amazon Web Services Application Discovery Service (Application Discovery Service) helps you plan application migration projects. It automatically identifies servers, virtual machines (VMs), and network dependencies in your on-premises data centers. For more information, see the Amazon Web Services Application Discovery Service FAQ.  Application Discovery Service offers three ways of performing discovery and collecting data about your on-premises servers:    Agentless discovery using Amazon Web Services Application Discovery Service Agentless Collector (Agentless Collector), which doesn't require you to install an agent on each host.   Agentless Collector gathers server information regardless of the operating systems, which minimizes the time required for initial on-premises infrastructure assessment.   Agentless Collector doesn't collect information about network dependencies, only agent-based discovery collects that information.         Agent-based discovery using the Amazon Web Services Application Discovery Agent (Application Discovery Agent) collects a richer set of data than agentless discovery, which you install on one or more hosts in your data center.   The agent captures infrastructure and application information, including an inventory of running processes, system performance information, resource utilization, and network dependencies.   The information collected by agents is secured at rest and in transit to the Application Discovery Service database in the Amazon Web Services cloud. For more information, see Amazon Web Services Application Discovery Agent.        Amazon Web Services Partner Network (APN) solutions integrate with Application Discovery Service, enabling you to import details of your on-premises environment directly into Amazon Web Services Migration Hub (Migration Hub) without using Agentless Collector or Application Discovery Agent.   Third-party application discovery tools can query Amazon Web Services Application Discovery Service, and they can write to the Application Discovery Service database using the public API.   In this way, you can import data into Migration Hub and view it, so that you can associate applications with servers and track migrations.      Working With This Guide  This API reference provides descriptions, syntax, and usage examples for each of the actions and data types for Application Discovery Service. The topic for each action shows the API request parameters and the response. Alternatively, you can use one of the Amazon Web Services SDKs to access an API that is tailored to the programming language or platform that you're using. For more information, see Amazon Web Services SDKs.    Remember that you must set your Migration Hub home Region before you call any of these APIs.   You must make API calls for write actions (create, notify, associate, disassociate, import, or put) while in your home Region, or a HomeRegionNotSetException error is returned.   API calls for read actions (list, describe, stop, and delete) are permitted outside of your home Region.   Although it is unlikely, the Migration Hub home Region could change. If you call APIs outside the home Region, an InvalidInputException is returned.   You must call GetHomeRegion to obtain the latest Migration Hub home Region.    This guide is intended for use with the Amazon Web Services Application Discovery Service User Guide.  All data is handled according to the Amazon Web Services Privacy Policy. You can operate Application Discovery Service offline to inspect collected data before it is shared with the service.
public struct ApplicationDiscoveryService: AWSService {
    // MARK: Member variables

    /// Client used for communication with AWS
    public let client: AWSClient
    /// Service configuration
    public let config: AWSServiceConfig

    // MARK: Initialization

    /// Initialize the ApplicationDiscoveryService client
    /// - parameters:
    ///     - client: AWSClient used to process requests
    ///     - region: Region of server you want to communicate with. This will override the partition parameter.
    ///     - partition: AWS partition where service resides, standard (.aws), china (.awscn), government (.awsusgov).
    ///     - endpoint: Custom endpoint URL to use instead of standard AWS servers
    ///     - middleware: Middleware chain used to edit requests before they are sent and responses before they are decoded 
    ///     - timeout: Timeout value for HTTP requests
    ///     - byteBufferAllocator: Allocator for ByteBuffers
    ///     - options: Service options
    public init(
        client: AWSClient,
        region: SotoCore.Region? = nil,
        partition: AWSPartition = .aws,
        endpoint: String? = nil,
        middleware: AWSMiddlewareProtocol? = nil,
        timeout: TimeAmount? = nil,
        byteBufferAllocator: ByteBufferAllocator = ByteBufferAllocator(),
        options: AWSServiceConfig.Options = []
    ) {
        self.client = client
        self.config = AWSServiceConfig(
            region: region,
            partition: region?.partition ?? partition,
            amzTarget: "AWSPoseidonService_V2015_11_01",
            serviceName: "ApplicationDiscoveryService",
            serviceIdentifier: "discovery",
            serviceProtocol: .json(version: "1.1"),
            apiVersion: "2015-11-01",
            endpoint: endpoint,
            errorType: ApplicationDiscoveryServiceErrorType.self,
            xmlNamespace: "http://ec2.amazon.com/awsposiedon/V2015_11_01/",
            middleware: middleware,
            timeout: timeout,
            byteBufferAllocator: byteBufferAllocator,
            options: options
        )
    }





    // MARK: API Calls

    /// Associates one or more configuration items with an application.
    @Sendable
    @inlinable
    public func associateConfigurationItemsToApplication(_ input: AssociateConfigurationItemsToApplicationRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> AssociateConfigurationItemsToApplicationResponse {
        try await self.client.execute(
            operation: "AssociateConfigurationItemsToApplication", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Associates one or more configuration items with an application.
    ///
    /// Parameters:
    ///   - applicationConfigurationId: The configuration ID of an application with which items are to be associated.
    ///   - configurationIds: The ID of each configuration item to be associated with an application.
    ///   - logger: Logger use during operation
    @inlinable
    public func associateConfigurationItemsToApplication(
        applicationConfigurationId: String,
        configurationIds: [String],
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> AssociateConfigurationItemsToApplicationResponse {
        let input = AssociateConfigurationItemsToApplicationRequest(
            applicationConfigurationId: applicationConfigurationId, 
            configurationIds: configurationIds
        )
        return try await self.associateConfigurationItemsToApplication(input, logger: logger)
    }

    ///  Deletes one or more agents or collectors as specified by ID. Deleting an agent or collector does not  delete the previously discovered data.  To delete the data collected, use StartBatchDeleteConfigurationTask.
    @Sendable
    @inlinable
    public func batchDeleteAgents(_ input: BatchDeleteAgentsRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> BatchDeleteAgentsResponse {
        try await self.client.execute(
            operation: "BatchDeleteAgents", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    ///  Deletes one or more agents or collectors as specified by ID. Deleting an agent or collector does not  delete the previously discovered data.  To delete the data collected, use StartBatchDeleteConfigurationTask.
    ///
    /// Parameters:
    ///   - deleteAgents:  The list of agents to delete.
    ///   - logger: Logger use during operation
    @inlinable
    public func batchDeleteAgents(
        deleteAgents: [DeleteAgent],
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> BatchDeleteAgentsResponse {
        let input = BatchDeleteAgentsRequest(
            deleteAgents: deleteAgents
        )
        return try await self.batchDeleteAgents(input, logger: logger)
    }

    /// Deletes one or more import tasks, each identified by their import ID. Each import task has a number of records that can identify servers or applications.  Amazon Web Services Application Discovery Service has built-in matching logic that will identify when discovered servers match existing entries that you've previously discovered, the information for the already-existing discovered server is updated. When you delete an import task that contains records that were used to match, the information in those matched records that comes from the deleted records will also be deleted.
    @Sendable
    @inlinable
    public func batchDeleteImportData(_ input: BatchDeleteImportDataRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> BatchDeleteImportDataResponse {
        try await self.client.execute(
            operation: "BatchDeleteImportData", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Deletes one or more import tasks, each identified by their import ID. Each import task has a number of records that can identify servers or applications.  Amazon Web Services Application Discovery Service has built-in matching logic that will identify when discovered servers match existing entries that you've previously discovered, the information for the already-existing discovered server is updated. When you delete an import task that contains records that were used to match, the information in those matched records that comes from the deleted records will also be deleted.
    ///
    /// Parameters:
    ///   - deleteHistory:  Set to true to remove the deleted import task from  DescribeImportTasks.
    ///   - importTaskIds: The IDs for the import tasks that you want to delete.
    ///   - logger: Logger use during operation
    @inlinable
    public func batchDeleteImportData(
        deleteHistory: Bool? = nil,
        importTaskIds: [String],
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> BatchDeleteImportDataResponse {
        let input = BatchDeleteImportDataRequest(
            deleteHistory: deleteHistory, 
            importTaskIds: importTaskIds
        )
        return try await self.batchDeleteImportData(input, logger: logger)
    }

    /// Creates an application with the given name and description.
    @Sendable
    @inlinable
    public func createApplication(_ input: CreateApplicationRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> CreateApplicationResponse {
        try await self.client.execute(
            operation: "CreateApplication", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Creates an application with the given name and description.
    ///
    /// Parameters:
    ///   - description: The description of the application to be created.
    ///   - name: The name of the application to be created.
    ///   - wave: The name of the migration wave of the application to be created.
    ///   - logger: Logger use during operation
    @inlinable
    public func createApplication(
        description: String? = nil,
        name: String,
        wave: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> CreateApplicationResponse {
        let input = CreateApplicationRequest(
            description: description, 
            name: name, 
            wave: wave
        )
        return try await self.createApplication(input, logger: logger)
    }

    /// Creates one or more tags for configuration items. Tags are metadata that help you categorize IT assets. This API accepts a list of multiple configuration items.  Do not store sensitive information (like personal data) in tags.
    @Sendable
    @inlinable
    public func createTags(_ input: CreateTagsRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> CreateTagsResponse {
        try await self.client.execute(
            operation: "CreateTags", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Creates one or more tags for configuration items. Tags are metadata that help you categorize IT assets. This API accepts a list of multiple configuration items.  Do not store sensitive information (like personal data) in tags.
    ///
    /// Parameters:
    ///   - configurationIds: A list of configuration items that you want to tag.
    ///   - tags: Tags that you want to associate with one or more configuration items. Specify the tags that you want to create in a key-value format. For example:  {"key": "serverType", "value": "webServer"}
    ///   - logger: Logger use during operation
    @inlinable
    public func createTags(
        configurationIds: [String],
        tags: [Tag],
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> CreateTagsResponse {
        let input = CreateTagsRequest(
            configurationIds: configurationIds, 
            tags: tags
        )
        return try await self.createTags(input, logger: logger)
    }

    /// Deletes a list of applications and their associations with configuration items.
    @Sendable
    @inlinable
    public func deleteApplications(_ input: DeleteApplicationsRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DeleteApplicationsResponse {
        try await self.client.execute(
            operation: "DeleteApplications", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Deletes a list of applications and their associations with configuration items.
    ///
    /// Parameters:
    ///   - configurationIds: Configuration ID of an application to be deleted.
    ///   - logger: Logger use during operation
    @inlinable
    public func deleteApplications(
        configurationIds: [String],
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> DeleteApplicationsResponse {
        let input = DeleteApplicationsRequest(
            configurationIds: configurationIds
        )
        return try await self.deleteApplications(input, logger: logger)
    }

    /// Deletes the association between configuration items and one or more tags. This API accepts a list of multiple configuration items.
    @Sendable
    @inlinable
    public func deleteTags(_ input: DeleteTagsRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DeleteTagsResponse {
        try await self.client.execute(
            operation: "DeleteTags", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Deletes the association between configuration items and one or more tags. This API accepts a list of multiple configuration items.
    ///
    /// Parameters:
    ///   - configurationIds: A list of configuration items with tags that you want to delete.
    ///   - tags: Tags that you want to delete from one or more configuration items. Specify the tags that you want to delete in a key-value format. For example:  {"key": "serverType", "value": "webServer"}
    ///   - logger: Logger use during operation
    @inlinable
    public func deleteTags(
        configurationIds: [String],
        tags: [Tag]? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> DeleteTagsResponse {
        let input = DeleteTagsRequest(
            configurationIds: configurationIds, 
            tags: tags
        )
        return try await self.deleteTags(input, logger: logger)
    }

    /// Lists agents or collectors as specified by ID or other filters. All agents/collectors associated with your user can be listed if you call DescribeAgents as is without passing any parameters.
    @Sendable
    @inlinable
    public func describeAgents(_ input: DescribeAgentsRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DescribeAgentsResponse {
        try await self.client.execute(
            operation: "DescribeAgents", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Lists agents or collectors as specified by ID or other filters. All agents/collectors associated with your user can be listed if you call DescribeAgents as is without passing any parameters.
    ///
    /// Parameters:
    ///   - agentIds: The agent or the collector IDs for which you want information. If you specify no IDs, the system returns information about all agents/collectors associated with your user.
    ///   - filters: You can filter the request using various logical operators and a key-value format. For example:   {"key": "collectionStatus", "value": "STARTED"}
    ///   - maxResults: The total number of agents/collectors to return in a single page of output. The maximum value is 100.
    ///   - nextToken: Token to retrieve the next set of results. For example, if you previously specified 100 IDs for DescribeAgentsRequest$agentIds but set DescribeAgentsRequest$maxResults to 10, you received a set of 10 results along with a token. Use that token in this query to get the next set of 10.
    ///   - logger: Logger use during operation
    @inlinable
    public func describeAgents(
        agentIds: [String]? = nil,
        filters: [Filter]? = nil,
        maxResults: Int? = nil,
        nextToken: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> DescribeAgentsResponse {
        let input = DescribeAgentsRequest(
            agentIds: agentIds, 
            filters: filters, 
            maxResults: maxResults, 
            nextToken: nextToken
        )
        return try await self.describeAgents(input, logger: logger)
    }

    ///  Takes a unique deletion task identifier as input and returns metadata about a configuration deletion task.
    @Sendable
    @inlinable
    public func describeBatchDeleteConfigurationTask(_ input: DescribeBatchDeleteConfigurationTaskRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DescribeBatchDeleteConfigurationTaskResponse {
        try await self.client.execute(
            operation: "DescribeBatchDeleteConfigurationTask", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    ///  Takes a unique deletion task identifier as input and returns metadata about a configuration deletion task.
    ///
    /// Parameters:
    ///   - taskId:  The ID of the task to delete.
    ///   - logger: Logger use during operation
    @inlinable
    public func describeBatchDeleteConfigurationTask(
        taskId: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> DescribeBatchDeleteConfigurationTaskResponse {
        let input = DescribeBatchDeleteConfigurationTaskRequest(
            taskId: taskId
        )
        return try await self.describeBatchDeleteConfigurationTask(input, logger: logger)
    }

    /// Retrieves attributes for a list of configuration item IDs.  All of the supplied IDs must be for the same asset type from one of the following:   server   application   process   connection   Output fields are specific to the asset type specified. For example, the output for a server configuration item includes a list of attributes about the server, such as host name, operating system, number of network cards, etc. For a complete list of outputs for each asset type, see Using the DescribeConfigurations Action in the Amazon Web Services Application Discovery Service User Guide.
    @Sendable
    @inlinable
    public func describeConfigurations(_ input: DescribeConfigurationsRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DescribeConfigurationsResponse {
        try await self.client.execute(
            operation: "DescribeConfigurations", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Retrieves attributes for a list of configuration item IDs.  All of the supplied IDs must be for the same asset type from one of the following:   server   application   process   connection   Output fields are specific to the asset type specified. For example, the output for a server configuration item includes a list of attributes about the server, such as host name, operating system, number of network cards, etc. For a complete list of outputs for each asset type, see Using the DescribeConfigurations Action in the Amazon Web Services Application Discovery Service User Guide.
    ///
    /// Parameters:
    ///   - configurationIds: One or more configuration IDs.
    ///   - logger: Logger use during operation
    @inlinable
    public func describeConfigurations(
        configurationIds: [String],
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> DescribeConfigurationsResponse {
        let input = DescribeConfigurationsRequest(
            configurationIds: configurationIds
        )
        return try await self.describeConfigurations(input, logger: logger)
    }

    /// Lists exports as specified by ID. All continuous exports associated with your user can be listed if you call DescribeContinuousExports as is without passing any parameters.
    @Sendable
    @inlinable
    public func describeContinuousExports(_ input: DescribeContinuousExportsRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DescribeContinuousExportsResponse {
        try await self.client.execute(
            operation: "DescribeContinuousExports", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Lists exports as specified by ID. All continuous exports associated with your user can be listed if you call DescribeContinuousExports as is without passing any parameters.
    ///
    /// Parameters:
    ///   - exportIds: The unique IDs assigned to the exports.
    ///   - maxResults: A number between 1 and 100 specifying the maximum number of continuous export descriptions returned.
    ///   - nextToken: The token from the previous call to DescribeExportTasks.
    ///   - logger: Logger use during operation
    @inlinable
    public func describeContinuousExports(
        exportIds: [String]? = nil,
        maxResults: Int? = nil,
        nextToken: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> DescribeContinuousExportsResponse {
        let input = DescribeContinuousExportsRequest(
            exportIds: exportIds, 
            maxResults: maxResults, 
            nextToken: nextToken
        )
        return try await self.describeContinuousExports(input, logger: logger)
    }

    ///  DescribeExportConfigurations is deprecated. Use DescribeExportTasks, instead.
    @Sendable
    @inlinable
    public func describeExportConfigurations(_ input: DescribeExportConfigurationsRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DescribeExportConfigurationsResponse {
        try await self.client.execute(
            operation: "DescribeExportConfigurations", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    ///  DescribeExportConfigurations is deprecated. Use DescribeExportTasks, instead.
    ///
    /// Parameters:
    ///   - exportIds: A list of continuous export IDs to search for.
    ///   - maxResults: A number between 1 and 100 specifying the maximum number of continuous export descriptions returned.
    ///   - nextToken: The token from the previous call to describe-export-tasks.
    ///   - logger: Logger use during operation
    @inlinable
    public func describeExportConfigurations(
        exportIds: [String]? = nil,
        maxResults: Int? = nil,
        nextToken: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> DescribeExportConfigurationsResponse {
        let input = DescribeExportConfigurationsRequest(
            exportIds: exportIds, 
            maxResults: maxResults, 
            nextToken: nextToken
        )
        return try await self.describeExportConfigurations(input, logger: logger)
    }

    /// Retrieve status of one or more export tasks. You can retrieve the status of up to 100 export tasks.
    @Sendable
    @inlinable
    public func describeExportTasks(_ input: DescribeExportTasksRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DescribeExportTasksResponse {
        try await self.client.execute(
            operation: "DescribeExportTasks", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Retrieve status of one or more export tasks. You can retrieve the status of up to 100 export tasks.
    ///
    /// Parameters:
    ///   - exportIds: One or more unique identifiers used to query the status of an export request.
    ///   - filters: One or more filters.    AgentId - ID of the agent whose collected data will be exported
    ///   - maxResults: The maximum number of volume results returned by DescribeExportTasks in paginated output. When this parameter is used, DescribeExportTasks only returns maxResults results in a single page along with a nextToken response element.
    ///   - nextToken: The nextToken value returned from a previous paginated DescribeExportTasks request where maxResults was used and the results exceeded the value of that parameter. Pagination continues from the end of the previous results that returned the nextToken value. This value is null when there are no more results to return.
    ///   - logger: Logger use during operation
    @inlinable
    public func describeExportTasks(
        exportIds: [String]? = nil,
        filters: [ExportFilter]? = nil,
        maxResults: Int? = nil,
        nextToken: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> DescribeExportTasksResponse {
        let input = DescribeExportTasksRequest(
            exportIds: exportIds, 
            filters: filters, 
            maxResults: maxResults, 
            nextToken: nextToken
        )
        return try await self.describeExportTasks(input, logger: logger)
    }

    /// Returns an array of import tasks for your account, including status information, times, IDs, the Amazon S3 Object URL for the import file, and more.
    @Sendable
    @inlinable
    public func describeImportTasks(_ input: DescribeImportTasksRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DescribeImportTasksResponse {
        try await self.client.execute(
            operation: "DescribeImportTasks", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Returns an array of import tasks for your account, including status information, times, IDs, the Amazon S3 Object URL for the import file, and more.
    ///
    /// Parameters:
    ///   - filters: An array of name-value pairs that you provide to filter the results for the DescribeImportTask request to a specific subset of results. Currently, wildcard values aren't supported for filters.
    ///   - maxResults: The maximum number of results that you want this request to return, up to 100.
    ///   - nextToken: The token to request a specific page of results.
    ///   - logger: Logger use during operation
    @inlinable
    public func describeImportTasks(
        filters: [ImportTaskFilter]? = nil,
        maxResults: Int? = nil,
        nextToken: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> DescribeImportTasksResponse {
        let input = DescribeImportTasksRequest(
            filters: filters, 
            maxResults: maxResults, 
            nextToken: nextToken
        )
        return try await self.describeImportTasks(input, logger: logger)
    }

    /// Retrieves a list of configuration items that have tags as specified by the key-value pairs, name and value, passed to the optional parameter filters. There are three valid tag filter names:   tagKey   tagValue   configurationId   Also, all configuration items associated with your user that have tags can be listed if you call DescribeTags as is without passing any parameters.
    @Sendable
    @inlinable
    public func describeTags(_ input: DescribeTagsRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DescribeTagsResponse {
        try await self.client.execute(
            operation: "DescribeTags", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Retrieves a list of configuration items that have tags as specified by the key-value pairs, name and value, passed to the optional parameter filters. There are three valid tag filter names:   tagKey   tagValue   configurationId   Also, all configuration items associated with your user that have tags can be listed if you call DescribeTags as is without passing any parameters.
    ///
    /// Parameters:
    ///   - filters: You can filter the list using a key-value format. You can separate these items by using logical operators. Allowed filters include tagKey, tagValue, and configurationId.
    ///   - maxResults: The total number of items to return in a single page of output. The maximum value is 100.
    ///   - nextToken: A token to start the list. Use this token to get the next set of results.
    ///   - logger: Logger use during operation
    @inlinable
    public func describeTags(
        filters: [TagFilter]? = nil,
        maxResults: Int? = nil,
        nextToken: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> DescribeTagsResponse {
        let input = DescribeTagsRequest(
            filters: filters, 
            maxResults: maxResults, 
            nextToken: nextToken
        )
        return try await self.describeTags(input, logger: logger)
    }

    /// Disassociates one or more configuration items from an application.
    @Sendable
    @inlinable
    public func disassociateConfigurationItemsFromApplication(_ input: DisassociateConfigurationItemsFromApplicationRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DisassociateConfigurationItemsFromApplicationResponse {
        try await self.client.execute(
            operation: "DisassociateConfigurationItemsFromApplication", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Disassociates one or more configuration items from an application.
    ///
    /// Parameters:
    ///   - applicationConfigurationId: Configuration ID of an application from which each item is disassociated.
    ///   - configurationIds: Configuration ID of each item to be disassociated from an application.
    ///   - logger: Logger use during operation
    @inlinable
    public func disassociateConfigurationItemsFromApplication(
        applicationConfigurationId: String,
        configurationIds: [String],
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> DisassociateConfigurationItemsFromApplicationResponse {
        let input = DisassociateConfigurationItemsFromApplicationRequest(
            applicationConfigurationId: applicationConfigurationId, 
            configurationIds: configurationIds
        )
        return try await self.disassociateConfigurationItemsFromApplication(input, logger: logger)
    }

    /// Deprecated. Use StartExportTask instead. Exports all discovered configuration data to an Amazon S3 bucket or an application that enables you to view and evaluate the data. Data includes tags and tag associations, processes, connections, servers, and system performance. This API returns an export ID that you can query using the DescribeExportConfigurations API. The system imposes a limit of two configuration exports in six hours.
    @Sendable
    @inlinable
    public func exportConfigurations(logger: Logger = AWSClient.loggingDisabled) async throws -> ExportConfigurationsResponse {
        try await self.client.execute(
            operation: "ExportConfigurations", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            logger: logger
        )
    }

    /// Retrieves a short summary of discovered assets. This API operation takes no request parameters and is called as is at the command prompt as shown in the example.
    @Sendable
    @inlinable
    public func getDiscoverySummary(_ input: GetDiscoverySummaryRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> GetDiscoverySummaryResponse {
        try await self.client.execute(
            operation: "GetDiscoverySummary", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Retrieves a short summary of discovered assets. This API operation takes no request parameters and is called as is at the command prompt as shown in the example.
    ///
    /// Parameters:
    ///   - logger: Logger use during operation
    @inlinable
    public func getDiscoverySummary(
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> GetDiscoverySummaryResponse {
        let input = GetDiscoverySummaryRequest(
        )
        return try await self.getDiscoverySummary(input, logger: logger)
    }

    /// Retrieves a list of configuration items as specified by the value passed to the required parameter configurationType. Optional filtering may be applied to refine search results.
    @Sendable
    @inlinable
    public func listConfigurations(_ input: ListConfigurationsRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> ListConfigurationsResponse {
        try await self.client.execute(
            operation: "ListConfigurations", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Retrieves a list of configuration items as specified by the value passed to the required parameter configurationType. Optional filtering may be applied to refine search results.
    ///
    /// Parameters:
    ///   - configurationType: A valid configuration identified by Application Discovery Service.
    ///   - filters: You can filter the request using various logical operators and a key-value format. For example:   {"key": "serverType", "value": "webServer"}  For a complete list of filter options and guidance about using them with this action, see Using the ListConfigurations Action in the Amazon Web Services Application Discovery Service User Guide.
    ///   - maxResults: The total number of items to return. The maximum value is 100.
    ///   - nextToken: Token to retrieve the next set of results. For example, if a previous call to ListConfigurations returned 100 items, but you set ListConfigurationsRequest$maxResults to 10, you received a set of 10 results along with a token. Use that token in this query to get the next set of 10.
    ///   - orderBy: Certain filter criteria return output that can be sorted in ascending or descending order. For a list of output characteristics for each filter, see Using the ListConfigurations Action in the Amazon Web Services Application Discovery Service User Guide.
    ///   - logger: Logger use during operation
    @inlinable
    public func listConfigurations(
        configurationType: ConfigurationItemType,
        filters: [Filter]? = nil,
        maxResults: Int? = nil,
        nextToken: String? = nil,
        orderBy: [OrderByElement]? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> ListConfigurationsResponse {
        let input = ListConfigurationsRequest(
            configurationType: configurationType, 
            filters: filters, 
            maxResults: maxResults, 
            nextToken: nextToken, 
            orderBy: orderBy
        )
        return try await self.listConfigurations(input, logger: logger)
    }

    /// Retrieves a list of servers that are one network hop away from a specified server.
    @Sendable
    @inlinable
    public func listServerNeighbors(_ input: ListServerNeighborsRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> ListServerNeighborsResponse {
        try await self.client.execute(
            operation: "ListServerNeighbors", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Retrieves a list of servers that are one network hop away from a specified server.
    ///
    /// Parameters:
    ///   - configurationId: Configuration ID of the server for which neighbors are being listed.
    ///   - maxResults: Maximum number of results to return in a single page of output.
    ///   - neighborConfigurationIds: List of configuration IDs to test for one-hop-away.
    ///   - nextToken: Token to retrieve the next set of results. For example, if you previously specified 100 IDs for ListServerNeighborsRequest$neighborConfigurationIds but set ListServerNeighborsRequest$maxResults to 10, you received a set of 10 results along with a token. Use that token in this query to get the next set of 10.
    ///   - portInformationNeeded: Flag to indicate if port and protocol information is needed as part of the response.
    ///   - logger: Logger use during operation
    @inlinable
    public func listServerNeighbors(
        configurationId: String,
        maxResults: Int? = nil,
        neighborConfigurationIds: [String]? = nil,
        nextToken: String? = nil,
        portInformationNeeded: Bool? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> ListServerNeighborsResponse {
        let input = ListServerNeighborsRequest(
            configurationId: configurationId, 
            maxResults: maxResults, 
            neighborConfigurationIds: neighborConfigurationIds, 
            nextToken: nextToken, 
            portInformationNeeded: portInformationNeeded
        )
        return try await self.listServerNeighbors(input, logger: logger)
    }

    ///  Takes a list of configurationId as input and starts an asynchronous deletion  task to remove the configurationItems. Returns a unique deletion task identifier.
    @Sendable
    @inlinable
    public func startBatchDeleteConfigurationTask(_ input: StartBatchDeleteConfigurationTaskRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> StartBatchDeleteConfigurationTaskResponse {
        try await self.client.execute(
            operation: "StartBatchDeleteConfigurationTask", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    ///  Takes a list of configurationId as input and starts an asynchronous deletion  task to remove the configurationItems. Returns a unique deletion task identifier.
    ///
    /// Parameters:
    ///   - configurationIds:  The list of configuration IDs that will be deleted by the task.
    ///   - configurationType:  The type of configuration item to delete. Supported types are: SERVER.
    ///   - logger: Logger use during operation
    @inlinable
    public func startBatchDeleteConfigurationTask(
        configurationIds: [String],
        configurationType: DeletionConfigurationItemType,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> StartBatchDeleteConfigurationTaskResponse {
        let input = StartBatchDeleteConfigurationTaskRequest(
            configurationIds: configurationIds, 
            configurationType: configurationType
        )
        return try await self.startBatchDeleteConfigurationTask(input, logger: logger)
    }

    /// Start the continuous flow of agent's discovered data into Amazon Athena.
    @Sendable
    @inlinable
    public func startContinuousExport(_ input: StartContinuousExportRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> StartContinuousExportResponse {
        try await self.client.execute(
            operation: "StartContinuousExport", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Start the continuous flow of agent's discovered data into Amazon Athena.
    ///
    /// Parameters:
    ///   - logger: Logger use during operation
    @inlinable
    public func startContinuousExport(
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> StartContinuousExportResponse {
        let input = StartContinuousExportRequest(
        )
        return try await self.startContinuousExport(input, logger: logger)
    }

    /// Instructs the specified agents to start collecting data.
    @Sendable
    @inlinable
    public func startDataCollectionByAgentIds(_ input: StartDataCollectionByAgentIdsRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> StartDataCollectionByAgentIdsResponse {
        try await self.client.execute(
            operation: "StartDataCollectionByAgentIds", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Instructs the specified agents to start collecting data.
    ///
    /// Parameters:
    ///   - agentIds: The IDs of the agents from which to start collecting data. If you send a request to an agent ID that you do not have permission to contact, according to your Amazon Web Services account, the service does not throw an exception. Instead, it returns the error in the Description field. If you send a request to multiple agents and you do not have permission to contact some of those agents, the system does not throw an exception. Instead, the system shows Failed in the Description field.
    ///   - logger: Logger use during operation
    @inlinable
    public func startDataCollectionByAgentIds(
        agentIds: [String],
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> StartDataCollectionByAgentIdsResponse {
        let input = StartDataCollectionByAgentIdsRequest(
            agentIds: agentIds
        )
        return try await self.startDataCollectionByAgentIds(input, logger: logger)
    }

    /// Begins the export of a discovered data report to an Amazon S3 bucket managed by Amazon Web Services.  Exports might provide an estimate of fees and savings based on certain information  that you provide. Fee estimates do not include any taxes that might apply.  Your actual fees and savings depend on a variety of factors, including your actual usage of Amazon Web Services  services, which might vary from the estimates provided in this report.  If you do not specify preferences or agentIds in the filter, a summary of all servers, applications, tags, and performance is generated. This data is an aggregation of all server data collected through on-premises tooling, file import, application grouping and applying tags. If you specify agentIds in a filter, the task exports up to 72 hours of detailed data collected by the identified Application Discovery Agent, including network, process, and performance details. A time range for exported agent data may be set by using startTime and endTime. Export of detailed agent data is limited to five concurrently running exports.  Export of detailed agent data is limited to two exports per day. If you enable ec2RecommendationsPreferences in preferences  , an Amazon EC2 instance matching the characteristics of each server in Application Discovery Service is generated.  Changing the attributes of the ec2RecommendationsPreferences changes the criteria of the recommendation.
    @Sendable
    @inlinable
    public func startExportTask(_ input: StartExportTaskRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> StartExportTaskResponse {
        try await self.client.execute(
            operation: "StartExportTask", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Begins the export of a discovered data report to an Amazon S3 bucket managed by Amazon Web Services.  Exports might provide an estimate of fees and savings based on certain information  that you provide. Fee estimates do not include any taxes that might apply.  Your actual fees and savings depend on a variety of factors, including your actual usage of Amazon Web Services  services, which might vary from the estimates provided in this report.  If you do not specify preferences or agentIds in the filter, a summary of all servers, applications, tags, and performance is generated. This data is an aggregation of all server data collected through on-premises tooling, file import, application grouping and applying tags. If you specify agentIds in a filter, the task exports up to 72 hours of detailed data collected by the identified Application Discovery Agent, including network, process, and performance details. A time range for exported agent data may be set by using startTime and endTime. Export of detailed agent data is limited to five concurrently running exports.  Export of detailed agent data is limited to two exports per day. If you enable ec2RecommendationsPreferences in preferences  , an Amazon EC2 instance matching the characteristics of each server in Application Discovery Service is generated.  Changing the attributes of the ec2RecommendationsPreferences changes the criteria of the recommendation.
    ///
    /// Parameters:
    ///   - endTime: The end timestamp for exported data from the single Application Discovery Agent selected in the filters. If no value is specified, exported data includes the most recent data collected by the agent.
    ///   - exportDataFormat: The file format for the returned export data. Default value is CSV. Note: The GRAPHML option has been deprecated.
    ///   - filters: If a filter is present, it selects the single agentId of the Application Discovery Agent for which data is exported. The agentId can be found in the results of the DescribeAgents API or CLI. If no filter is present, startTime and endTime are ignored and exported data includes both Amazon Web Services Application Discovery Service Agentless Collector collectors data and summary data from Application Discovery Agent agents.
    ///   - preferences:  Indicates the type of data that needs to be exported. Only one  ExportPreferences can be enabled at any time.
    ///   - startTime: The start timestamp for exported data from the single Application Discovery Agent selected in the filters. If no value is specified, data is exported starting from the first data collected by the agent.
    ///   - logger: Logger use during operation
    @inlinable
    public func startExportTask(
        endTime: Date? = nil,
        exportDataFormat: [ExportDataFormat]? = nil,
        filters: [ExportFilter]? = nil,
        preferences: ExportPreferences? = nil,
        startTime: Date? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> StartExportTaskResponse {
        let input = StartExportTaskRequest(
            endTime: endTime, 
            exportDataFormat: exportDataFormat, 
            filters: filters, 
            preferences: preferences, 
            startTime: startTime
        )
        return try await self.startExportTask(input, logger: logger)
    }

    /// Starts an import task, which allows you to import details of your on-premises environment directly into Amazon Web Services Migration Hub without having to use the Amazon Web Services Application Discovery Service (Application Discovery Service) tools such as the Amazon Web Services Application Discovery Service Agentless Collector or Application Discovery Agent. This gives you the option to perform migration assessment and planning directly from your imported data, including the ability to group your devices as applications and track their migration status. To start an import request, do this:   Download the specially formatted comma separated value (CSV) import template, which you can find here: https://s3.us-west-2.amazonaws.com/templates-7cffcf56-bd96-4b1c-b45b-a5b42f282e46/import_template.csv.   Fill out the template with your server and application data.   Upload your import file to an Amazon S3 bucket, and make a note of it's Object URL. Your import file must be in the CSV format.   Use the console or the StartImportTask command with the Amazon Web Services CLI or one of the Amazon Web Services SDKs to import the records from your file.   For more information, including step-by-step procedures, see Migration Hub Import in the Amazon Web Services Application Discovery Service User Guide.  There are limits to the number of import tasks you can create (and delete) in an Amazon Web Services account. For more information, see Amazon Web Services Application Discovery Service Limits in the Amazon Web Services Application Discovery Service User Guide.
    @Sendable
    @inlinable
    public func startImportTask(_ input: StartImportTaskRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> StartImportTaskResponse {
        try await self.client.execute(
            operation: "StartImportTask", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Starts an import task, which allows you to import details of your on-premises environment directly into Amazon Web Services Migration Hub without having to use the Amazon Web Services Application Discovery Service (Application Discovery Service) tools such as the Amazon Web Services Application Discovery Service Agentless Collector or Application Discovery Agent. This gives you the option to perform migration assessment and planning directly from your imported data, including the ability to group your devices as applications and track their migration status. To start an import request, do this:   Download the specially formatted comma separated value (CSV) import template, which you can find here: https://s3.us-west-2.amazonaws.com/templates-7cffcf56-bd96-4b1c-b45b-a5b42f282e46/import_template.csv.   Fill out the template with your server and application data.   Upload your import file to an Amazon S3 bucket, and make a note of it's Object URL. Your import file must be in the CSV format.   Use the console or the StartImportTask command with the Amazon Web Services CLI or one of the Amazon Web Services SDKs to import the records from your file.   For more information, including step-by-step procedures, see Migration Hub Import in the Amazon Web Services Application Discovery Service User Guide.  There are limits to the number of import tasks you can create (and delete) in an Amazon Web Services account. For more information, see Amazon Web Services Application Discovery Service Limits in the Amazon Web Services Application Discovery Service User Guide.
    ///
    /// Parameters:
    ///   - clientRequestToken: Optional. A unique token that you can provide to prevent the same import request from occurring more than once. If you don't provide a token, a token is automatically generated. Sending more than one StartImportTask request with the same client request token will return information about the original import task with that client request token.
    ///   - importUrl: The URL for your import file that you've uploaded to Amazon S3.  If you're using the Amazon Web Services CLI, this URL is structured as follows: s3://BucketName/ImportFileName.CSV
    ///   - name: A descriptive name for this request. You can use this name to filter future requests related to this import task, such as identifying applications and servers that were included in this import task. We recommend that you use a meaningful name for each import task.
    ///   - logger: Logger use during operation
    @inlinable
    public func startImportTask(
        clientRequestToken: String? = StartImportTaskRequest.idempotencyToken(),
        importUrl: String,
        name: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> StartImportTaskResponse {
        let input = StartImportTaskRequest(
            clientRequestToken: clientRequestToken, 
            importUrl: importUrl, 
            name: name
        )
        return try await self.startImportTask(input, logger: logger)
    }

    /// Stop the continuous flow of agent's discovered data into Amazon Athena.
    @Sendable
    @inlinable
    public func stopContinuousExport(_ input: StopContinuousExportRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> StopContinuousExportResponse {
        try await self.client.execute(
            operation: "StopContinuousExport", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Stop the continuous flow of agent's discovered data into Amazon Athena.
    ///
    /// Parameters:
    ///   - exportId: The unique ID assigned to this export.
    ///   - logger: Logger use during operation
    @inlinable
    public func stopContinuousExport(
        exportId: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> StopContinuousExportResponse {
        let input = StopContinuousExportRequest(
            exportId: exportId
        )
        return try await self.stopContinuousExport(input, logger: logger)
    }

    /// Instructs the specified agents to stop collecting data.
    @Sendable
    @inlinable
    public func stopDataCollectionByAgentIds(_ input: StopDataCollectionByAgentIdsRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> StopDataCollectionByAgentIdsResponse {
        try await self.client.execute(
            operation: "StopDataCollectionByAgentIds", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Instructs the specified agents to stop collecting data.
    ///
    /// Parameters:
    ///   - agentIds: The IDs of the agents from which to stop collecting data.
    ///   - logger: Logger use during operation
    @inlinable
    public func stopDataCollectionByAgentIds(
        agentIds: [String],
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> StopDataCollectionByAgentIdsResponse {
        let input = StopDataCollectionByAgentIdsRequest(
            agentIds: agentIds
        )
        return try await self.stopDataCollectionByAgentIds(input, logger: logger)
    }

    /// Updates metadata about an application.
    @Sendable
    @inlinable
    public func updateApplication(_ input: UpdateApplicationRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> UpdateApplicationResponse {
        try await self.client.execute(
            operation: "UpdateApplication", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Updates metadata about an application.
    ///
    /// Parameters:
    ///   - configurationId: Configuration ID of the application to be updated.
    ///   - description: New description of the application to be updated.
    ///   - name: New name of the application to be updated.
    ///   - wave: The new migration wave of the application that you want to update.
    ///   - logger: Logger use during operation
    @inlinable
    public func updateApplication(
        configurationId: String,
        description: String? = nil,
        name: String? = nil,
        wave: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> UpdateApplicationResponse {
        let input = UpdateApplicationRequest(
            configurationId: configurationId, 
            description: description, 
            name: name, 
            wave: wave
        )
        return try await self.updateApplication(input, logger: logger)
    }
}

extension ApplicationDiscoveryService {
    /// Initializer required by `AWSService.with(middlewares:timeout:byteBufferAllocator:options)`. You are not able to use this initializer directly as there are not public
    /// initializers for `AWSServiceConfig.Patch`. Please use `AWSService.with(middlewares:timeout:byteBufferAllocator:options)` instead.
    public init(from: ApplicationDiscoveryService, patch: AWSServiceConfig.Patch) {
        self.client = from.client
        self.config = from.config.with(patch: patch)
    }
}

// MARK: Paginators

@available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
extension ApplicationDiscoveryService {
    /// Return PaginatorSequence for operation ``describeAgents(_:logger:)``.
    ///
    /// - Parameters:
    ///   - input: Input for operation
    ///   - logger: Logger used for logging
    @inlinable
    public func describeAgentsPaginator(
        _ input: DescribeAgentsRequest,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<DescribeAgentsRequest, DescribeAgentsResponse> {
        return .init(
            input: input,
            command: self.describeAgents,
            inputKey: \DescribeAgentsRequest.nextToken,
            outputKey: \DescribeAgentsResponse.nextToken,
            logger: logger
        )
    }
    /// Return PaginatorSequence for operation ``describeAgents(_:logger:)``.
    ///
    /// - Parameters:
    ///   - agentIds: The agent or the collector IDs for which you want information. If you specify no IDs, the system returns information about all agents/collectors associated with your user.
    ///   - filters: You can filter the request using various logical operators and a key-value format. For example:   {"key": "collectionStatus", "value": "STARTED"}
    ///   - maxResults: The total number of agents/collectors to return in a single page of output. The maximum value is 100.
    ///   - logger: Logger used for logging
    @inlinable
    public func describeAgentsPaginator(
        agentIds: [String]? = nil,
        filters: [Filter]? = nil,
        maxResults: Int? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) -> AWSClient.PaginatorSequence<DescribeAgentsRequest, DescribeAgentsResponse> {
        let input = DescribeAgentsRequest(
            agentIds: agentIds, 
            filters: filters, 
            maxResults: maxResults
        )
        return self.describeAgentsPaginator(input, logger: logger)
    }

    /// Return PaginatorSequence for operation ``describeContinuousExports(_:logger:)``.
    ///
    /// - Parameters:
    ///   - input: Input for operation
    ///   - logger: Logger used for logging
    @inlinable
    public func describeContinuousExportsPaginator(
        _ input: DescribeContinuousExportsRequest,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<DescribeContinuousExportsRequest, DescribeContinuousExportsResponse> {
        return .init(
            input: input,
            command: self.describeContinuousExports,
            inputKey: \DescribeContinuousExportsRequest.nextToken,
            outputKey: \DescribeContinuousExportsResponse.nextToken,
            logger: logger
        )
    }
    /// Return PaginatorSequence for operation ``describeContinuousExports(_:logger:)``.
    ///
    /// - Parameters:
    ///   - exportIds: The unique IDs assigned to the exports.
    ///   - maxResults: A number between 1 and 100 specifying the maximum number of continuous export descriptions returned.
    ///   - logger: Logger used for logging
    @inlinable
    public func describeContinuousExportsPaginator(
        exportIds: [String]? = nil,
        maxResults: Int? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) -> AWSClient.PaginatorSequence<DescribeContinuousExportsRequest, DescribeContinuousExportsResponse> {
        let input = DescribeContinuousExportsRequest(
            exportIds: exportIds, 
            maxResults: maxResults
        )
        return self.describeContinuousExportsPaginator(input, logger: logger)
    }

    /// Return PaginatorSequence for operation ``describeExportConfigurations(_:logger:)``.
    ///
    /// - Parameters:
    ///   - input: Input for operation
    ///   - logger: Logger used for logging
    @inlinable
    public func describeExportConfigurationsPaginator(
        _ input: DescribeExportConfigurationsRequest,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<DescribeExportConfigurationsRequest, DescribeExportConfigurationsResponse> {
        return .init(
            input: input,
            command: self.describeExportConfigurations,
            inputKey: \DescribeExportConfigurationsRequest.nextToken,
            outputKey: \DescribeExportConfigurationsResponse.nextToken,
            logger: logger
        )
    }
    /// Return PaginatorSequence for operation ``describeExportConfigurations(_:logger:)``.
    ///
    /// - Parameters:
    ///   - exportIds: A list of continuous export IDs to search for.
    ///   - maxResults: A number between 1 and 100 specifying the maximum number of continuous export descriptions returned.
    ///   - logger: Logger used for logging
    @inlinable
    public func describeExportConfigurationsPaginator(
        exportIds: [String]? = nil,
        maxResults: Int? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) -> AWSClient.PaginatorSequence<DescribeExportConfigurationsRequest, DescribeExportConfigurationsResponse> {
        let input = DescribeExportConfigurationsRequest(
            exportIds: exportIds, 
            maxResults: maxResults
        )
        return self.describeExportConfigurationsPaginator(input, logger: logger)
    }

    /// Return PaginatorSequence for operation ``describeExportTasks(_:logger:)``.
    ///
    /// - Parameters:
    ///   - input: Input for operation
    ///   - logger: Logger used for logging
    @inlinable
    public func describeExportTasksPaginator(
        _ input: DescribeExportTasksRequest,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<DescribeExportTasksRequest, DescribeExportTasksResponse> {
        return .init(
            input: input,
            command: self.describeExportTasks,
            inputKey: \DescribeExportTasksRequest.nextToken,
            outputKey: \DescribeExportTasksResponse.nextToken,
            logger: logger
        )
    }
    /// Return PaginatorSequence for operation ``describeExportTasks(_:logger:)``.
    ///
    /// - Parameters:
    ///   - exportIds: One or more unique identifiers used to query the status of an export request.
    ///   - filters: One or more filters.    AgentId - ID of the agent whose collected data will be exported
    ///   - maxResults: The maximum number of volume results returned by DescribeExportTasks in paginated output. When this parameter is used, DescribeExportTasks only returns maxResults results in a single page along with a nextToken response element.
    ///   - logger: Logger used for logging
    @inlinable
    public func describeExportTasksPaginator(
        exportIds: [String]? = nil,
        filters: [ExportFilter]? = nil,
        maxResults: Int? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) -> AWSClient.PaginatorSequence<DescribeExportTasksRequest, DescribeExportTasksResponse> {
        let input = DescribeExportTasksRequest(
            exportIds: exportIds, 
            filters: filters, 
            maxResults: maxResults
        )
        return self.describeExportTasksPaginator(input, logger: logger)
    }

    /// Return PaginatorSequence for operation ``describeImportTasks(_:logger:)``.
    ///
    /// - Parameters:
    ///   - input: Input for operation
    ///   - logger: Logger used for logging
    @inlinable
    public func describeImportTasksPaginator(
        _ input: DescribeImportTasksRequest,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<DescribeImportTasksRequest, DescribeImportTasksResponse> {
        return .init(
            input: input,
            command: self.describeImportTasks,
            inputKey: \DescribeImportTasksRequest.nextToken,
            outputKey: \DescribeImportTasksResponse.nextToken,
            logger: logger
        )
    }
    /// Return PaginatorSequence for operation ``describeImportTasks(_:logger:)``.
    ///
    /// - Parameters:
    ///   - filters: An array of name-value pairs that you provide to filter the results for the DescribeImportTask request to a specific subset of results. Currently, wildcard values aren't supported for filters.
    ///   - maxResults: The maximum number of results that you want this request to return, up to 100.
    ///   - logger: Logger used for logging
    @inlinable
    public func describeImportTasksPaginator(
        filters: [ImportTaskFilter]? = nil,
        maxResults: Int? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) -> AWSClient.PaginatorSequence<DescribeImportTasksRequest, DescribeImportTasksResponse> {
        let input = DescribeImportTasksRequest(
            filters: filters, 
            maxResults: maxResults
        )
        return self.describeImportTasksPaginator(input, logger: logger)
    }

    /// Return PaginatorSequence for operation ``describeTags(_:logger:)``.
    ///
    /// - Parameters:
    ///   - input: Input for operation
    ///   - logger: Logger used for logging
    @inlinable
    public func describeTagsPaginator(
        _ input: DescribeTagsRequest,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<DescribeTagsRequest, DescribeTagsResponse> {
        return .init(
            input: input,
            command: self.describeTags,
            inputKey: \DescribeTagsRequest.nextToken,
            outputKey: \DescribeTagsResponse.nextToken,
            logger: logger
        )
    }
    /// Return PaginatorSequence for operation ``describeTags(_:logger:)``.
    ///
    /// - Parameters:
    ///   - filters: You can filter the list using a key-value format. You can separate these items by using logical operators. Allowed filters include tagKey, tagValue, and configurationId.
    ///   - maxResults: The total number of items to return in a single page of output. The maximum value is 100.
    ///   - logger: Logger used for logging
    @inlinable
    public func describeTagsPaginator(
        filters: [TagFilter]? = nil,
        maxResults: Int? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) -> AWSClient.PaginatorSequence<DescribeTagsRequest, DescribeTagsResponse> {
        let input = DescribeTagsRequest(
            filters: filters, 
            maxResults: maxResults
        )
        return self.describeTagsPaginator(input, logger: logger)
    }

    /// Return PaginatorSequence for operation ``listConfigurations(_:logger:)``.
    ///
    /// - Parameters:
    ///   - input: Input for operation
    ///   - logger: Logger used for logging
    @inlinable
    public func listConfigurationsPaginator(
        _ input: ListConfigurationsRequest,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<ListConfigurationsRequest, ListConfigurationsResponse> {
        return .init(
            input: input,
            command: self.listConfigurations,
            inputKey: \ListConfigurationsRequest.nextToken,
            outputKey: \ListConfigurationsResponse.nextToken,
            logger: logger
        )
    }
    /// Return PaginatorSequence for operation ``listConfigurations(_:logger:)``.
    ///
    /// - Parameters:
    ///   - configurationType: A valid configuration identified by Application Discovery Service.
    ///   - filters: You can filter the request using various logical operators and a key-value format. For example:   {"key": "serverType", "value": "webServer"}  For a complete list of filter options and guidance about using them with this action, see Using the ListConfigurations Action in the Amazon Web Services Application Discovery Service User Guide.
    ///   - maxResults: The total number of items to return. The maximum value is 100.
    ///   - orderBy: Certain filter criteria return output that can be sorted in ascending or descending order. For a list of output characteristics for each filter, see Using the ListConfigurations Action in the Amazon Web Services Application Discovery Service User Guide.
    ///   - logger: Logger used for logging
    @inlinable
    public func listConfigurationsPaginator(
        configurationType: ConfigurationItemType,
        filters: [Filter]? = nil,
        maxResults: Int? = nil,
        orderBy: [OrderByElement]? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) -> AWSClient.PaginatorSequence<ListConfigurationsRequest, ListConfigurationsResponse> {
        let input = ListConfigurationsRequest(
            configurationType: configurationType, 
            filters: filters, 
            maxResults: maxResults, 
            orderBy: orderBy
        )
        return self.listConfigurationsPaginator(input, logger: logger)
    }
}

extension ApplicationDiscoveryService.DescribeAgentsRequest: AWSPaginateToken {
    @inlinable
    public func usingPaginationToken(_ token: String) -> ApplicationDiscoveryService.DescribeAgentsRequest {
        return .init(
            agentIds: self.agentIds,
            filters: self.filters,
            maxResults: self.maxResults,
            nextToken: token
        )
    }
}

extension ApplicationDiscoveryService.DescribeContinuousExportsRequest: AWSPaginateToken {
    @inlinable
    public func usingPaginationToken(_ token: String) -> ApplicationDiscoveryService.DescribeContinuousExportsRequest {
        return .init(
            exportIds: self.exportIds,
            maxResults: self.maxResults,
            nextToken: token
        )
    }
}

extension ApplicationDiscoveryService.DescribeExportConfigurationsRequest: AWSPaginateToken {
    @inlinable
    public func usingPaginationToken(_ token: String) -> ApplicationDiscoveryService.DescribeExportConfigurationsRequest {
        return .init(
            exportIds: self.exportIds,
            maxResults: self.maxResults,
            nextToken: token
        )
    }
}

extension ApplicationDiscoveryService.DescribeExportTasksRequest: AWSPaginateToken {
    @inlinable
    public func usingPaginationToken(_ token: String) -> ApplicationDiscoveryService.DescribeExportTasksRequest {
        return .init(
            exportIds: self.exportIds,
            filters: self.filters,
            maxResults: self.maxResults,
            nextToken: token
        )
    }
}

extension ApplicationDiscoveryService.DescribeImportTasksRequest: AWSPaginateToken {
    @inlinable
    public func usingPaginationToken(_ token: String) -> ApplicationDiscoveryService.DescribeImportTasksRequest {
        return .init(
            filters: self.filters,
            maxResults: self.maxResults,
            nextToken: token
        )
    }
}

extension ApplicationDiscoveryService.DescribeTagsRequest: AWSPaginateToken {
    @inlinable
    public func usingPaginationToken(_ token: String) -> ApplicationDiscoveryService.DescribeTagsRequest {
        return .init(
            filters: self.filters,
            maxResults: self.maxResults,
            nextToken: token
        )
    }
}

extension ApplicationDiscoveryService.ListConfigurationsRequest: AWSPaginateToken {
    @inlinable
    public func usingPaginationToken(_ token: String) -> ApplicationDiscoveryService.ListConfigurationsRequest {
        return .init(
            configurationType: self.configurationType,
            filters: self.filters,
            maxResults: self.maxResults,
            nextToken: token,
            orderBy: self.orderBy
        )
    }
}
