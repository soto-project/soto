//===----------------------------------------------------------------------===//
//
// This source file is part of the Soto for AWS open source project
//
// Copyright (c) 2017-2024 the Soto project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
// See CONTRIBUTORS.txt for the list of Soto project authors
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by https://github.com/soto-project/soto-codegenerator.
// DO NOT EDIT.

#if os(Linux) && compiler(<5.10)
// swift-corelibs-foundation hasn't been updated with Sendable conformances
@preconcurrency import Foundation
#else
import Foundation
#endif
@_exported import SotoCore

/// Service object for interacting with AWS LakeFormation service.
///
/// Lake Formation Defines the public endpoint for the Lake Formation service.
public struct LakeFormation: AWSService {
    // MARK: Member variables

    /// Client used for communication with AWS
    public let client: AWSClient
    /// Service configuration
    public let config: AWSServiceConfig

    // MARK: Initialization

    /// Initialize the LakeFormation client
    /// - parameters:
    ///     - client: AWSClient used to process requests
    ///     - region: Region of server you want to communicate with. This will override the partition parameter.
    ///     - partition: AWS partition where service resides, standard (.aws), china (.awscn), government (.awsusgov).
    ///     - endpoint: Custom endpoint URL to use instead of standard AWS servers
    ///     - middleware: Middleware chain used to edit requests before they are sent and responses before they are decoded 
    ///     - timeout: Timeout value for HTTP requests
    ///     - byteBufferAllocator: Allocator for ByteBuffers
    ///     - options: Service options
    public init(
        client: AWSClient,
        region: SotoCore.Region? = nil,
        partition: AWSPartition = .aws,
        endpoint: String? = nil,
        middleware: AWSMiddlewareProtocol? = nil,
        timeout: TimeAmount? = nil,
        byteBufferAllocator: ByteBufferAllocator = ByteBufferAllocator(),
        options: AWSServiceConfig.Options = []
    ) {
        self.client = client
        self.config = AWSServiceConfig(
            region: region,
            partition: region?.partition ?? partition,
            serviceName: "LakeFormation",
            serviceIdentifier: "lakeformation",
            serviceProtocol: .restjson,
            apiVersion: "2017-03-31",
            endpoint: endpoint,
            variantEndpoints: Self.variantEndpoints,
            errorType: LakeFormationErrorType.self,
            middleware: middleware,
            timeout: timeout,
            byteBufferAllocator: byteBufferAllocator,
            options: options
        )
    }




    /// FIPS and dualstack endpoints
    static var variantEndpoints: [EndpointVariantType: AWSServiceConfig.EndpointVariant] {[
        [.dualstack]: .init(endpoints: [
            "af-south-1": "lakeformation.af-south-1.api.aws",
            "ap-east-1": "lakeformation.ap-east-1.api.aws",
            "ap-northeast-1": "lakeformation.ap-northeast-1.api.aws",
            "ap-northeast-2": "lakeformation.ap-northeast-2.api.aws",
            "ap-northeast-3": "lakeformation.ap-northeast-3.api.aws",
            "ap-south-1": "lakeformation.ap-south-1.api.aws",
            "ap-south-2": "lakeformation.ap-south-2.api.aws",
            "ap-southeast-1": "lakeformation.ap-southeast-1.api.aws",
            "ap-southeast-2": "lakeformation.ap-southeast-2.api.aws",
            "ap-southeast-3": "lakeformation.ap-southeast-3.api.aws",
            "ap-southeast-4": "lakeformation.ap-southeast-4.api.aws",
            "ap-southeast-5": "lakeformation.ap-southeast-5.api.aws",
            "ca-central-1": "lakeformation.ca-central-1.api.aws",
            "ca-west-1": "lakeformation.ca-west-1.api.aws",
            "cn-north-1": "lakeformation.cn-north-1.api.amazonwebservices.com.cn",
            "cn-northwest-1": "lakeformation.cn-northwest-1.api.amazonwebservices.com.cn",
            "eu-central-1": "lakeformation.eu-central-1.api.aws",
            "eu-central-2": "lakeformation.eu-central-2.api.aws",
            "eu-north-1": "lakeformation.eu-north-1.api.aws",
            "eu-south-1": "lakeformation.eu-south-1.api.aws",
            "eu-south-2": "lakeformation.eu-south-2.api.aws",
            "eu-west-1": "lakeformation.eu-west-1.api.aws",
            "eu-west-2": "lakeformation.eu-west-2.api.aws",
            "eu-west-3": "lakeformation.eu-west-3.api.aws",
            "il-central-1": "lakeformation.il-central-1.api.aws",
            "me-central-1": "lakeformation.me-central-1.api.aws",
            "me-south-1": "lakeformation.me-south-1.api.aws",
            "sa-east-1": "lakeformation.sa-east-1.api.aws",
            "us-east-1": "lakeformation.us-east-1.api.aws",
            "us-east-2": "lakeformation.us-east-2.api.aws",
            "us-gov-east-1": "lakeformation.us-gov-east-1.api.aws",
            "us-gov-west-1": "lakeformation.us-gov-west-1.api.aws",
            "us-west-1": "lakeformation.us-west-1.api.aws",
            "us-west-2": "lakeformation.us-west-2.api.aws"
        ]),
        [.dualstack, .fips]: .init(endpoints: [
            "us-east-1": "lakeformation-fips.us-east-1.api.aws",
            "us-east-2": "lakeformation-fips.us-east-2.api.aws",
            "us-gov-east-1": "lakeformation-fips.us-gov-east-1.api.aws",
            "us-gov-west-1": "lakeformation-fips.us-gov-west-1.api.aws",
            "us-west-1": "lakeformation-fips.us-west-1.api.aws",
            "us-west-2": "lakeformation-fips.us-west-2.api.aws"
        ]),
        [.fips]: .init(endpoints: [
            "us-east-1": "lakeformation-fips.us-east-1.amazonaws.com",
            "us-east-2": "lakeformation-fips.us-east-2.amazonaws.com",
            "us-gov-east-1": "lakeformation-fips.us-gov-east-1.amazonaws.com",
            "us-gov-west-1": "lakeformation-fips.us-gov-west-1.amazonaws.com",
            "us-west-1": "lakeformation-fips.us-west-1.amazonaws.com",
            "us-west-2": "lakeformation-fips.us-west-2.amazonaws.com"
        ])
    ]}

    // MARK: API Calls

    /// Attaches one or more LF-tags to an existing resource.
    @Sendable
    @inlinable
    public func addLFTagsToResource(_ input: AddLFTagsToResourceRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> AddLFTagsToResourceResponse {
        try await self.client.execute(
            operation: "AddLFTagsToResource", 
            path: "/AddLFTagsToResource", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Attaches one or more LF-tags to an existing resource.
    ///
    /// Parameters:
    ///   - catalogId: The identifier for the Data Catalog. By default, the account ID. The Data Catalog is the persistent metadata store. It contains database definitions, table definitions, and other control information to manage your Lake Formation environment.
    ///   - lfTags: The LF-tags to attach to the resource.
    ///   - resource: The database, table, or column resource to which to attach an LF-tag.
    ///   - logger: Logger use during operation
    @inlinable
    public func addLFTagsToResource(
        catalogId: String? = nil,
        lfTags: [LFTagPair],
        resource: Resource,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> AddLFTagsToResourceResponse {
        let input = AddLFTagsToResourceRequest(
            catalogId: catalogId, 
            lfTags: lfTags, 
            resource: resource
        )
        return try await self.addLFTagsToResource(input, logger: logger)
    }

    /// Allows a caller to assume an IAM role decorated as the SAML user specified in the SAML assertion included in the request. This decoration allows Lake Formation to enforce access policies against the SAML users and groups.  This API operation requires SAML federation setup in the caller’s account as it can only be called with valid SAML assertions. Lake Formation does not scope down the permission of the assumed role.  All permissions attached to the role via the SAML federation setup will be included in the role session.   This decorated role is expected to access data in Amazon S3 by getting temporary access from Lake Formation which is authorized via the virtual API GetDataAccess.  Therefore, all SAML roles that can be assumed via AssumeDecoratedRoleWithSAML must at a minimum include lakeformation:GetDataAccess in their role policies.  A typical IAM policy attached to such a role would look as follows:
    @Sendable
    @inlinable
    public func assumeDecoratedRoleWithSAML(_ input: AssumeDecoratedRoleWithSAMLRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> AssumeDecoratedRoleWithSAMLResponse {
        try await self.client.execute(
            operation: "AssumeDecoratedRoleWithSAML", 
            path: "/AssumeDecoratedRoleWithSAML", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Allows a caller to assume an IAM role decorated as the SAML user specified in the SAML assertion included in the request. This decoration allows Lake Formation to enforce access policies against the SAML users and groups.  This API operation requires SAML federation setup in the caller’s account as it can only be called with valid SAML assertions. Lake Formation does not scope down the permission of the assumed role.  All permissions attached to the role via the SAML federation setup will be included in the role session.   This decorated role is expected to access data in Amazon S3 by getting temporary access from Lake Formation which is authorized via the virtual API GetDataAccess.  Therefore, all SAML roles that can be assumed via AssumeDecoratedRoleWithSAML must at a minimum include lakeformation:GetDataAccess in their role policies.  A typical IAM policy attached to such a role would look as follows:
    ///
    /// Parameters:
    ///   - durationSeconds: The time period, between 900 and 43,200 seconds, for the timeout of the temporary credentials.
    ///   - principalArn: The Amazon Resource Name (ARN) of the SAML provider in IAM that describes the IdP.
    ///   - roleArn: The role that represents an IAM principal whose scope down policy allows it to call credential vending APIs such as GetTemporaryTableCredentials. The caller must also have iam:PassRole permission on this role.
    ///   - samlAssertion: A SAML assertion consisting of an assertion statement for the user who needs temporary credentials. This must match the SAML assertion that was issued to IAM. This must be Base64 encoded.
    ///   - logger: Logger use during operation
    @inlinable
    public func assumeDecoratedRoleWithSAML(
        durationSeconds: Int? = nil,
        principalArn: String,
        roleArn: String,
        samlAssertion: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> AssumeDecoratedRoleWithSAMLResponse {
        let input = AssumeDecoratedRoleWithSAMLRequest(
            durationSeconds: durationSeconds, 
            principalArn: principalArn, 
            roleArn: roleArn, 
            samlAssertion: samlAssertion
        )
        return try await self.assumeDecoratedRoleWithSAML(input, logger: logger)
    }

    /// Batch operation to grant permissions to the principal.
    @Sendable
    @inlinable
    public func batchGrantPermissions(_ input: BatchGrantPermissionsRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> BatchGrantPermissionsResponse {
        try await self.client.execute(
            operation: "BatchGrantPermissions", 
            path: "/BatchGrantPermissions", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Batch operation to grant permissions to the principal.
    ///
    /// Parameters:
    ///   - catalogId: The identifier for the Data Catalog. By default, the account ID. The Data Catalog is the persistent metadata store. It contains database definitions, table definitions, and other control information to manage your Lake Formation environment.
    ///   - entries: A list of up to 20 entries for resource permissions to be granted by batch operation to the principal.
    ///   - logger: Logger use during operation
    @inlinable
    public func batchGrantPermissions(
        catalogId: String? = nil,
        entries: [BatchPermissionsRequestEntry],
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> BatchGrantPermissionsResponse {
        let input = BatchGrantPermissionsRequest(
            catalogId: catalogId, 
            entries: entries
        )
        return try await self.batchGrantPermissions(input, logger: logger)
    }

    /// Batch operation to revoke permissions from the principal.
    @Sendable
    @inlinable
    public func batchRevokePermissions(_ input: BatchRevokePermissionsRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> BatchRevokePermissionsResponse {
        try await self.client.execute(
            operation: "BatchRevokePermissions", 
            path: "/BatchRevokePermissions", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Batch operation to revoke permissions from the principal.
    ///
    /// Parameters:
    ///   - catalogId: The identifier for the Data Catalog. By default, the account ID. The Data Catalog is the persistent metadata store. It contains database definitions, table definitions, and other control information to manage your Lake Formation environment.
    ///   - entries: A list of up to 20 entries for resource permissions to be revoked by batch operation to the principal.
    ///   - logger: Logger use during operation
    @inlinable
    public func batchRevokePermissions(
        catalogId: String? = nil,
        entries: [BatchPermissionsRequestEntry],
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> BatchRevokePermissionsResponse {
        let input = BatchRevokePermissionsRequest(
            catalogId: catalogId, 
            entries: entries
        )
        return try await self.batchRevokePermissions(input, logger: logger)
    }

    /// Attempts to cancel the specified transaction. Returns an exception if the transaction was previously committed.
    @Sendable
    @inlinable
    public func cancelTransaction(_ input: CancelTransactionRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> CancelTransactionResponse {
        try await self.client.execute(
            operation: "CancelTransaction", 
            path: "/CancelTransaction", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Attempts to cancel the specified transaction. Returns an exception if the transaction was previously committed.
    ///
    /// Parameters:
    ///   - transactionId: The transaction to cancel.
    ///   - logger: Logger use during operation
    @inlinable
    public func cancelTransaction(
        transactionId: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> CancelTransactionResponse {
        let input = CancelTransactionRequest(
            transactionId: transactionId
        )
        return try await self.cancelTransaction(input, logger: logger)
    }

    /// Attempts to commit the specified transaction. Returns an exception if the transaction was previously aborted. This API action is idempotent if called multiple times for the same transaction.
    @Sendable
    @inlinable
    public func commitTransaction(_ input: CommitTransactionRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> CommitTransactionResponse {
        try await self.client.execute(
            operation: "CommitTransaction", 
            path: "/CommitTransaction", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Attempts to commit the specified transaction. Returns an exception if the transaction was previously aborted. This API action is idempotent if called multiple times for the same transaction.
    ///
    /// Parameters:
    ///   - transactionId: The transaction to commit.
    ///   - logger: Logger use during operation
    @inlinable
    public func commitTransaction(
        transactionId: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> CommitTransactionResponse {
        let input = CommitTransactionRequest(
            transactionId: transactionId
        )
        return try await self.commitTransaction(input, logger: logger)
    }

    /// Creates a data cell filter to allow one to grant access to certain columns on certain rows.
    @Sendable
    @inlinable
    public func createDataCellsFilter(_ input: CreateDataCellsFilterRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> CreateDataCellsFilterResponse {
        try await self.client.execute(
            operation: "CreateDataCellsFilter", 
            path: "/CreateDataCellsFilter", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Creates a data cell filter to allow one to grant access to certain columns on certain rows.
    ///
    /// Parameters:
    ///   - tableData: A DataCellsFilter structure containing information about the data cells filter.
    ///   - logger: Logger use during operation
    @inlinable
    public func createDataCellsFilter(
        tableData: DataCellsFilter,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> CreateDataCellsFilterResponse {
        let input = CreateDataCellsFilterRequest(
            tableData: tableData
        )
        return try await self.createDataCellsFilter(input, logger: logger)
    }

    /// Creates an LF-tag with the specified name and values.
    @Sendable
    @inlinable
    public func createLFTag(_ input: CreateLFTagRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> CreateLFTagResponse {
        try await self.client.execute(
            operation: "CreateLFTag", 
            path: "/CreateLFTag", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Creates an LF-tag with the specified name and values.
    ///
    /// Parameters:
    ///   - catalogId: The identifier for the Data Catalog. By default, the account ID. The Data Catalog is the persistent metadata store. It contains database definitions, table definitions, and other control information to manage your Lake Formation environment.
    ///   - tagKey: The key-name for the LF-tag.
    ///   - tagValues: A list of possible values an attribute can take.
    ///   - logger: Logger use during operation
    @inlinable
    public func createLFTag(
        catalogId: String? = nil,
        tagKey: String,
        tagValues: [String],
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> CreateLFTagResponse {
        let input = CreateLFTagRequest(
            catalogId: catalogId, 
            tagKey: tagKey, 
            tagValues: tagValues
        )
        return try await self.createLFTag(input, logger: logger)
    }

    /// Creates a new LF-Tag expression with the provided name, description, catalog ID, and expression body. This call fails if a LF-Tag expression with the same name already exists in the caller’s account or if the underlying LF-Tags don't exist. To call this API operation, caller needs the following Lake Formation permissions:  CREATE_LF_TAG_EXPRESSION on the root catalog resource.  GRANT_WITH_LF_TAG_EXPRESSION on all underlying LF-Tag key:value pairs included in the expression.
    @Sendable
    @inlinable
    public func createLFTagExpression(_ input: CreateLFTagExpressionRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> CreateLFTagExpressionResponse {
        try await self.client.execute(
            operation: "CreateLFTagExpression", 
            path: "/CreateLFTagExpression", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Creates a new LF-Tag expression with the provided name, description, catalog ID, and expression body. This call fails if a LF-Tag expression with the same name already exists in the caller’s account or if the underlying LF-Tags don't exist. To call this API operation, caller needs the following Lake Formation permissions:  CREATE_LF_TAG_EXPRESSION on the root catalog resource.  GRANT_WITH_LF_TAG_EXPRESSION on all underlying LF-Tag key:value pairs included in the expression.
    ///
    /// Parameters:
    ///   - catalogId: The identifier for the Data Catalog. By default, the account ID. The Data Catalog is the persistent metadata store. It contains database definitions, table definitions, and other control information to manage your Lake Formation environment.
    ///   - description: A description with information about the LF-Tag expression.
    ///   - expression: A list of LF-Tag conditions (key-value pairs).
    ///   - name: A name for the expression.
    ///   - logger: Logger use during operation
    @inlinable
    public func createLFTagExpression(
        catalogId: String? = nil,
        description: String? = nil,
        expression: [LFTag],
        name: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> CreateLFTagExpressionResponse {
        let input = CreateLFTagExpressionRequest(
            catalogId: catalogId, 
            description: description, 
            expression: expression, 
            name: name
        )
        return try await self.createLFTagExpression(input, logger: logger)
    }

    /// Creates an IAM Identity Center connection with Lake Formation to allow IAM Identity Center users and groups to access Data Catalog resources.
    @Sendable
    @inlinable
    public func createLakeFormationIdentityCenterConfiguration(_ input: CreateLakeFormationIdentityCenterConfigurationRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> CreateLakeFormationIdentityCenterConfigurationResponse {
        try await self.client.execute(
            operation: "CreateLakeFormationIdentityCenterConfiguration", 
            path: "/CreateLakeFormationIdentityCenterConfiguration", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Creates an IAM Identity Center connection with Lake Formation to allow IAM Identity Center users and groups to access Data Catalog resources.
    ///
    /// Parameters:
    ///   - catalogId: The identifier for the Data Catalog. By default, the account ID. The Data Catalog is the persistent metadata store. It contains database definitions, table definitions, view definitions, and other control information to manage your Lake Formation environment.
    ///   - externalFiltering: A list of the account IDs of Amazon Web Services accounts of third-party applications that are allowed to access data managed by Lake Formation.
    ///   - instanceArn: The ARN of the IAM Identity Center instance for which the operation will be executed. For more information about ARNs, see Amazon Resource Names (ARNs) and Amazon Web Services Service Namespaces in the Amazon Web Services General Reference.
    ///   - shareRecipients: A list of Amazon Web Services account IDs and/or Amazon Web Services organization/organizational unit ARNs that are allowed to access data managed by Lake Formation.  If the ShareRecipients list includes valid values, a resource share is created with the principals you want to have access to the resources. If the ShareRecipients value is null or the list is empty, no resource share is created.
    ///   - logger: Logger use during operation
    @inlinable
    public func createLakeFormationIdentityCenterConfiguration(
        catalogId: String? = nil,
        externalFiltering: ExternalFilteringConfiguration? = nil,
        instanceArn: String? = nil,
        shareRecipients: [DataLakePrincipal]? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> CreateLakeFormationIdentityCenterConfigurationResponse {
        let input = CreateLakeFormationIdentityCenterConfigurationRequest(
            catalogId: catalogId, 
            externalFiltering: externalFiltering, 
            instanceArn: instanceArn, 
            shareRecipients: shareRecipients
        )
        return try await self.createLakeFormationIdentityCenterConfiguration(input, logger: logger)
    }

    /// Enforce Lake Formation permissions for the given databases, tables, and principals.
    @Sendable
    @inlinable
    public func createLakeFormationOptIn(_ input: CreateLakeFormationOptInRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> CreateLakeFormationOptInResponse {
        try await self.client.execute(
            operation: "CreateLakeFormationOptIn", 
            path: "/CreateLakeFormationOptIn", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Enforce Lake Formation permissions for the given databases, tables, and principals.
    ///
    /// Parameters:
    ///   - principal: 
    ///   - resource: 
    ///   - logger: Logger use during operation
    @inlinable
    public func createLakeFormationOptIn(
        principal: DataLakePrincipal,
        resource: Resource,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> CreateLakeFormationOptInResponse {
        let input = CreateLakeFormationOptInRequest(
            principal: principal, 
            resource: resource
        )
        return try await self.createLakeFormationOptIn(input, logger: logger)
    }

    /// Deletes a data cell filter.
    @Sendable
    @inlinable
    public func deleteDataCellsFilter(_ input: DeleteDataCellsFilterRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DeleteDataCellsFilterResponse {
        try await self.client.execute(
            operation: "DeleteDataCellsFilter", 
            path: "/DeleteDataCellsFilter", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Deletes a data cell filter.
    ///
    /// Parameters:
    ///   - databaseName: A database in the Glue Data Catalog.
    ///   - name: The name given by the user to the data filter cell.
    ///   - tableCatalogId: The ID of the catalog to which the table belongs.
    ///   - tableName: A table in the database.
    ///   - logger: Logger use during operation
    @inlinable
    public func deleteDataCellsFilter(
        databaseName: String? = nil,
        name: String? = nil,
        tableCatalogId: String? = nil,
        tableName: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> DeleteDataCellsFilterResponse {
        let input = DeleteDataCellsFilterRequest(
            databaseName: databaseName, 
            name: name, 
            tableCatalogId: tableCatalogId, 
            tableName: tableName
        )
        return try await self.deleteDataCellsFilter(input, logger: logger)
    }

    /// Deletes the specified LF-tag given a key name. If the input parameter tag key was not found, then the operation will throw an exception. When you delete an LF-tag, the LFTagPolicy attached to the LF-tag becomes invalid. If the deleted LF-tag was still assigned to any resource, the tag policy attach to the deleted LF-tag will no longer be applied to the resource.
    @Sendable
    @inlinable
    public func deleteLFTag(_ input: DeleteLFTagRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DeleteLFTagResponse {
        try await self.client.execute(
            operation: "DeleteLFTag", 
            path: "/DeleteLFTag", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Deletes the specified LF-tag given a key name. If the input parameter tag key was not found, then the operation will throw an exception. When you delete an LF-tag, the LFTagPolicy attached to the LF-tag becomes invalid. If the deleted LF-tag was still assigned to any resource, the tag policy attach to the deleted LF-tag will no longer be applied to the resource.
    ///
    /// Parameters:
    ///   - catalogId: The identifier for the Data Catalog. By default, the account ID. The Data Catalog is the persistent metadata store. It contains database definitions, table definitions, and other control information to manage your Lake Formation environment.
    ///   - tagKey: The key-name for the LF-tag to delete.
    ///   - logger: Logger use during operation
    @inlinable
    public func deleteLFTag(
        catalogId: String? = nil,
        tagKey: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> DeleteLFTagResponse {
        let input = DeleteLFTagRequest(
            catalogId: catalogId, 
            tagKey: tagKey
        )
        return try await self.deleteLFTag(input, logger: logger)
    }

    /// Deletes the LF-Tag expression. The caller must be a data lake admin or have DROP permissions on the LF-Tag expression. Deleting a LF-Tag expression will also delete all LFTagPolicy permissions referencing the LF-Tag expression.
    @Sendable
    @inlinable
    public func deleteLFTagExpression(_ input: DeleteLFTagExpressionRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DeleteLFTagExpressionResponse {
        try await self.client.execute(
            operation: "DeleteLFTagExpression", 
            path: "/DeleteLFTagExpression", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Deletes the LF-Tag expression. The caller must be a data lake admin or have DROP permissions on the LF-Tag expression. Deleting a LF-Tag expression will also delete all LFTagPolicy permissions referencing the LF-Tag expression.
    ///
    /// Parameters:
    ///   - catalogId: The identifier for the Data Catalog. By default, the account ID in which the LF-Tag expression is saved.
    ///   - name: The name for the LF-Tag expression.
    ///   - logger: Logger use during operation
    @inlinable
    public func deleteLFTagExpression(
        catalogId: String? = nil,
        name: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> DeleteLFTagExpressionResponse {
        let input = DeleteLFTagExpressionRequest(
            catalogId: catalogId, 
            name: name
        )
        return try await self.deleteLFTagExpression(input, logger: logger)
    }

    /// Deletes an IAM Identity Center connection with Lake Formation.
    @Sendable
    @inlinable
    public func deleteLakeFormationIdentityCenterConfiguration(_ input: DeleteLakeFormationIdentityCenterConfigurationRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DeleteLakeFormationIdentityCenterConfigurationResponse {
        try await self.client.execute(
            operation: "DeleteLakeFormationIdentityCenterConfiguration", 
            path: "/DeleteLakeFormationIdentityCenterConfiguration", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Deletes an IAM Identity Center connection with Lake Formation.
    ///
    /// Parameters:
    ///   - catalogId: The identifier for the Data Catalog. By default, the account ID. The Data Catalog is the persistent metadata store. It contains database definitions, table definitions, view definition, and other control information to manage your Lake Formation environment.
    ///   - logger: Logger use during operation
    @inlinable
    public func deleteLakeFormationIdentityCenterConfiguration(
        catalogId: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> DeleteLakeFormationIdentityCenterConfigurationResponse {
        let input = DeleteLakeFormationIdentityCenterConfigurationRequest(
            catalogId: catalogId
        )
        return try await self.deleteLakeFormationIdentityCenterConfiguration(input, logger: logger)
    }

    /// Remove the Lake Formation permissions enforcement of the given databases, tables, and principals.
    @Sendable
    @inlinable
    public func deleteLakeFormationOptIn(_ input: DeleteLakeFormationOptInRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DeleteLakeFormationOptInResponse {
        try await self.client.execute(
            operation: "DeleteLakeFormationOptIn", 
            path: "/DeleteLakeFormationOptIn", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Remove the Lake Formation permissions enforcement of the given databases, tables, and principals.
    ///
    /// Parameters:
    ///   - principal: 
    ///   - resource: 
    ///   - logger: Logger use during operation
    @inlinable
    public func deleteLakeFormationOptIn(
        principal: DataLakePrincipal,
        resource: Resource,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> DeleteLakeFormationOptInResponse {
        let input = DeleteLakeFormationOptInRequest(
            principal: principal, 
            resource: resource
        )
        return try await self.deleteLakeFormationOptIn(input, logger: logger)
    }

    /// For a specific governed table, provides a list of Amazon S3 objects that will be written during the current transaction and that can be automatically deleted if the transaction is canceled. Without this call, no Amazon S3 objects are automatically deleted when a transaction cancels.   The Glue ETL library function write_dynamic_frame.from_catalog() includes an option to automatically  call DeleteObjectsOnCancel before writes. For more information, see  Rolling Back Amazon S3 Writes.
    @Sendable
    @inlinable
    public func deleteObjectsOnCancel(_ input: DeleteObjectsOnCancelRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DeleteObjectsOnCancelResponse {
        try await self.client.execute(
            operation: "DeleteObjectsOnCancel", 
            path: "/DeleteObjectsOnCancel", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// For a specific governed table, provides a list of Amazon S3 objects that will be written during the current transaction and that can be automatically deleted if the transaction is canceled. Without this call, no Amazon S3 objects are automatically deleted when a transaction cancels.   The Glue ETL library function write_dynamic_frame.from_catalog() includes an option to automatically  call DeleteObjectsOnCancel before writes. For more information, see  Rolling Back Amazon S3 Writes.
    ///
    /// Parameters:
    ///   - catalogId: The Glue data catalog that contains the governed table. Defaults to the current account ID.
    ///   - databaseName: The database that contains the governed table.
    ///   - objects: A list of VirtualObject structures, which indicates the Amazon S3 objects to be deleted if the transaction cancels.
    ///   - tableName: The name of the governed table.
    ///   - transactionId: ID of the transaction that the writes occur in.
    ///   - logger: Logger use during operation
    @inlinable
    public func deleteObjectsOnCancel(
        catalogId: String? = nil,
        databaseName: String,
        objects: [VirtualObject],
        tableName: String,
        transactionId: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> DeleteObjectsOnCancelResponse {
        let input = DeleteObjectsOnCancelRequest(
            catalogId: catalogId, 
            databaseName: databaseName, 
            objects: objects, 
            tableName: tableName, 
            transactionId: transactionId
        )
        return try await self.deleteObjectsOnCancel(input, logger: logger)
    }

    /// Deregisters the resource as managed by the Data Catalog. When you deregister a path, Lake Formation removes the path from the inline policy attached to your service-linked role.
    @Sendable
    @inlinable
    public func deregisterResource(_ input: DeregisterResourceRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DeregisterResourceResponse {
        try await self.client.execute(
            operation: "DeregisterResource", 
            path: "/DeregisterResource", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Deregisters the resource as managed by the Data Catalog. When you deregister a path, Lake Formation removes the path from the inline policy attached to your service-linked role.
    ///
    /// Parameters:
    ///   - resourceArn: The Amazon Resource Name (ARN) of the resource that you want to deregister.
    ///   - logger: Logger use during operation
    @inlinable
    public func deregisterResource(
        resourceArn: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> DeregisterResourceResponse {
        let input = DeregisterResourceRequest(
            resourceArn: resourceArn
        )
        return try await self.deregisterResource(input, logger: logger)
    }

    /// Retrieves the instance ARN and application ARN for the connection.
    @Sendable
    @inlinable
    public func describeLakeFormationIdentityCenterConfiguration(_ input: DescribeLakeFormationIdentityCenterConfigurationRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DescribeLakeFormationIdentityCenterConfigurationResponse {
        try await self.client.execute(
            operation: "DescribeLakeFormationIdentityCenterConfiguration", 
            path: "/DescribeLakeFormationIdentityCenterConfiguration", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Retrieves the instance ARN and application ARN for the connection.
    ///
    /// Parameters:
    ///   - catalogId: The identifier for the Data Catalog. By default, the account ID. The Data Catalog is the persistent metadata store. It contains database definitions, table definitions, and other control information to manage your Lake Formation environment.
    ///   - logger: Logger use during operation
    @inlinable
    public func describeLakeFormationIdentityCenterConfiguration(
        catalogId: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> DescribeLakeFormationIdentityCenterConfigurationResponse {
        let input = DescribeLakeFormationIdentityCenterConfigurationRequest(
            catalogId: catalogId
        )
        return try await self.describeLakeFormationIdentityCenterConfiguration(input, logger: logger)
    }

    /// Retrieves the current data access role for the given resource registered in Lake Formation.
    @Sendable
    @inlinable
    public func describeResource(_ input: DescribeResourceRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DescribeResourceResponse {
        try await self.client.execute(
            operation: "DescribeResource", 
            path: "/DescribeResource", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Retrieves the current data access role for the given resource registered in Lake Formation.
    ///
    /// Parameters:
    ///   - resourceArn: The resource ARN.
    ///   - logger: Logger use during operation
    @inlinable
    public func describeResource(
        resourceArn: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> DescribeResourceResponse {
        let input = DescribeResourceRequest(
            resourceArn: resourceArn
        )
        return try await self.describeResource(input, logger: logger)
    }

    /// Returns the details of a single transaction.
    @Sendable
    @inlinable
    public func describeTransaction(_ input: DescribeTransactionRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DescribeTransactionResponse {
        try await self.client.execute(
            operation: "DescribeTransaction", 
            path: "/DescribeTransaction", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Returns the details of a single transaction.
    ///
    /// Parameters:
    ///   - transactionId: The transaction for which to return status.
    ///   - logger: Logger use during operation
    @inlinable
    public func describeTransaction(
        transactionId: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> DescribeTransactionResponse {
        let input = DescribeTransactionRequest(
            transactionId: transactionId
        )
        return try await self.describeTransaction(input, logger: logger)
    }

    /// Indicates to the service that the specified transaction is still active and should not be treated as idle and aborted. Write transactions that remain idle for a long period are automatically aborted unless explicitly extended.
    @Sendable
    @inlinable
    public func extendTransaction(_ input: ExtendTransactionRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> ExtendTransactionResponse {
        try await self.client.execute(
            operation: "ExtendTransaction", 
            path: "/ExtendTransaction", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Indicates to the service that the specified transaction is still active and should not be treated as idle and aborted. Write transactions that remain idle for a long period are automatically aborted unless explicitly extended.
    ///
    /// Parameters:
    ///   - transactionId: The transaction to extend.
    ///   - logger: Logger use during operation
    @inlinable
    public func extendTransaction(
        transactionId: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> ExtendTransactionResponse {
        let input = ExtendTransactionRequest(
            transactionId: transactionId
        )
        return try await self.extendTransaction(input, logger: logger)
    }

    /// Returns a data cells filter.
    @Sendable
    @inlinable
    public func getDataCellsFilter(_ input: GetDataCellsFilterRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> GetDataCellsFilterResponse {
        try await self.client.execute(
            operation: "GetDataCellsFilter", 
            path: "/GetDataCellsFilter", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Returns a data cells filter.
    ///
    /// Parameters:
    ///   - databaseName: A database in the Glue Data Catalog.
    ///   - name: The name given by the user to the data filter cell.
    ///   - tableCatalogId: The ID of the catalog to which the table belongs.
    ///   - tableName: A table in the database.
    ///   - logger: Logger use during operation
    @inlinable
    public func getDataCellsFilter(
        databaseName: String,
        name: String,
        tableCatalogId: String,
        tableName: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> GetDataCellsFilterResponse {
        let input = GetDataCellsFilterRequest(
            databaseName: databaseName, 
            name: name, 
            tableCatalogId: tableCatalogId, 
            tableName: tableName
        )
        return try await self.getDataCellsFilter(input, logger: logger)
    }

    /// Returns the identity of the invoking principal.
    @Sendable
    @inlinable
    public func getDataLakePrincipal(_ input: GetDataLakePrincipalRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> GetDataLakePrincipalResponse {
        try await self.client.execute(
            operation: "GetDataLakePrincipal", 
            path: "/GetDataLakePrincipal", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Returns the identity of the invoking principal.
    ///
    /// Parameters:
    ///   - logger: Logger use during operation
    @inlinable
    public func getDataLakePrincipal(
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> GetDataLakePrincipalResponse {
        let input = GetDataLakePrincipalRequest(
        )
        return try await self.getDataLakePrincipal(input, logger: logger)
    }

    /// Retrieves the list of the data lake administrators of a Lake Formation-managed data lake.
    @Sendable
    @inlinable
    public func getDataLakeSettings(_ input: GetDataLakeSettingsRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> GetDataLakeSettingsResponse {
        try await self.client.execute(
            operation: "GetDataLakeSettings", 
            path: "/GetDataLakeSettings", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Retrieves the list of the data lake administrators of a Lake Formation-managed data lake.
    ///
    /// Parameters:
    ///   - catalogId: The identifier for the Data Catalog. By default, the account ID. The Data Catalog is the persistent metadata store. It contains database definitions, table definitions, and other control information to manage your Lake Formation environment.
    ///   - logger: Logger use during operation
    @inlinable
    public func getDataLakeSettings(
        catalogId: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> GetDataLakeSettingsResponse {
        let input = GetDataLakeSettingsRequest(
            catalogId: catalogId
        )
        return try await self.getDataLakeSettings(input, logger: logger)
    }

    /// Returns the Lake Formation permissions for a specified table or database resource located at a path in Amazon S3. GetEffectivePermissionsForPath will not return databases and tables if the catalog is encrypted.
    @Sendable
    @inlinable
    public func getEffectivePermissionsForPath(_ input: GetEffectivePermissionsForPathRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> GetEffectivePermissionsForPathResponse {
        try await self.client.execute(
            operation: "GetEffectivePermissionsForPath", 
            path: "/GetEffectivePermissionsForPath", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Returns the Lake Formation permissions for a specified table or database resource located at a path in Amazon S3. GetEffectivePermissionsForPath will not return databases and tables if the catalog is encrypted.
    ///
    /// Parameters:
    ///   - catalogId: The identifier for the Data Catalog. By default, the account ID. The Data Catalog is the persistent metadata store. It contains database definitions, table definitions, and other control information to manage your Lake Formation environment.
    ///   - maxResults: The maximum number of results to return.
    ///   - nextToken: A continuation token, if this is not the first call to retrieve this list.
    ///   - resourceArn: The Amazon Resource Name (ARN) of the resource for which you want to get permissions.
    ///   - logger: Logger use during operation
    @inlinable
    public func getEffectivePermissionsForPath(
        catalogId: String? = nil,
        maxResults: Int? = nil,
        nextToken: String? = nil,
        resourceArn: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> GetEffectivePermissionsForPathResponse {
        let input = GetEffectivePermissionsForPathRequest(
            catalogId: catalogId, 
            maxResults: maxResults, 
            nextToken: nextToken, 
            resourceArn: resourceArn
        )
        return try await self.getEffectivePermissionsForPath(input, logger: logger)
    }

    /// Returns an LF-tag definition.
    @Sendable
    @inlinable
    public func getLFTag(_ input: GetLFTagRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> GetLFTagResponse {
        try await self.client.execute(
            operation: "GetLFTag", 
            path: "/GetLFTag", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Returns an LF-tag definition.
    ///
    /// Parameters:
    ///   - catalogId: The identifier for the Data Catalog. By default, the account ID. The Data Catalog is the persistent metadata store. It contains database definitions, table definitions, and other control information to manage your Lake Formation environment.
    ///   - tagKey: The key-name for the LF-tag.
    ///   - logger: Logger use during operation
    @inlinable
    public func getLFTag(
        catalogId: String? = nil,
        tagKey: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> GetLFTagResponse {
        let input = GetLFTagRequest(
            catalogId: catalogId, 
            tagKey: tagKey
        )
        return try await self.getLFTag(input, logger: logger)
    }

    /// Returns the details about the LF-Tag expression. The caller must be a data lake admin or must have DESCRIBE permission on the LF-Tag expression resource.
    @Sendable
    @inlinable
    public func getLFTagExpression(_ input: GetLFTagExpressionRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> GetLFTagExpressionResponse {
        try await self.client.execute(
            operation: "GetLFTagExpression", 
            path: "/GetLFTagExpression", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Returns the details about the LF-Tag expression. The caller must be a data lake admin or must have DESCRIBE permission on the LF-Tag expression resource.
    ///
    /// Parameters:
    ///   - catalogId: The identifier for the Data Catalog. By default, the account ID.
    ///   - name: The name for the LF-Tag expression
    ///   - logger: Logger use during operation
    @inlinable
    public func getLFTagExpression(
        catalogId: String? = nil,
        name: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> GetLFTagExpressionResponse {
        let input = GetLFTagExpressionRequest(
            catalogId: catalogId, 
            name: name
        )
        return try await self.getLFTagExpression(input, logger: logger)
    }

    /// Returns the state of a query previously submitted. Clients are expected to poll GetQueryState to monitor the current state of the planning before retrieving the work units. A query state is only visible to the principal that made the initial call to StartQueryPlanning.
    @Sendable
    @inlinable
    public func getQueryState(_ input: GetQueryStateRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> GetQueryStateResponse {
        try await self.client.execute(
            operation: "GetQueryState", 
            path: "/GetQueryState", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            hostPrefix: "query-", 
            logger: logger
        )
    }
    /// Returns the state of a query previously submitted. Clients are expected to poll GetQueryState to monitor the current state of the planning before retrieving the work units. A query state is only visible to the principal that made the initial call to StartQueryPlanning.
    ///
    /// Parameters:
    ///   - queryId: The ID of the plan query operation.
    ///   - logger: Logger use during operation
    @inlinable
    public func getQueryState(
        queryId: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> GetQueryStateResponse {
        let input = GetQueryStateRequest(
            queryId: queryId
        )
        return try await self.getQueryState(input, logger: logger)
    }

    /// Retrieves statistics on the planning and execution of a query.
    @Sendable
    @inlinable
    public func getQueryStatistics(_ input: GetQueryStatisticsRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> GetQueryStatisticsResponse {
        try await self.client.execute(
            operation: "GetQueryStatistics", 
            path: "/GetQueryStatistics", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            hostPrefix: "query-", 
            logger: logger
        )
    }
    /// Retrieves statistics on the planning and execution of a query.
    ///
    /// Parameters:
    ///   - queryId: The ID of the plan query operation.
    ///   - logger: Logger use during operation
    @inlinable
    public func getQueryStatistics(
        queryId: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> GetQueryStatisticsResponse {
        let input = GetQueryStatisticsRequest(
            queryId: queryId
        )
        return try await self.getQueryStatistics(input, logger: logger)
    }

    /// Returns the LF-tags applied to a resource.
    @Sendable
    @inlinable
    public func getResourceLFTags(_ input: GetResourceLFTagsRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> GetResourceLFTagsResponse {
        try await self.client.execute(
            operation: "GetResourceLFTags", 
            path: "/GetResourceLFTags", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Returns the LF-tags applied to a resource.
    ///
    /// Parameters:
    ///   - catalogId: The identifier for the Data Catalog. By default, the account ID. The Data Catalog is the persistent metadata store. It contains database definitions, table definitions, and other control information to manage your Lake Formation environment.
    ///   - resource: The database, table, or column resource for which you want to return LF-tags.
    ///   - showAssignedLFTags: Indicates whether to show the assigned LF-tags.
    ///   - logger: Logger use during operation
    @inlinable
    public func getResourceLFTags(
        catalogId: String? = nil,
        resource: Resource,
        showAssignedLFTags: Bool? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> GetResourceLFTagsResponse {
        let input = GetResourceLFTagsRequest(
            catalogId: catalogId, 
            resource: resource, 
            showAssignedLFTags: showAssignedLFTags
        )
        return try await self.getResourceLFTags(input, logger: logger)
    }

    /// Returns the set of Amazon S3 objects that make up the specified governed table. A transaction ID or timestamp can be specified for time-travel queries.
    @Sendable
    @inlinable
    public func getTableObjects(_ input: GetTableObjectsRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> GetTableObjectsResponse {
        try await self.client.execute(
            operation: "GetTableObjects", 
            path: "/GetTableObjects", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Returns the set of Amazon S3 objects that make up the specified governed table. A transaction ID or timestamp can be specified for time-travel queries.
    ///
    /// Parameters:
    ///   - catalogId: The catalog containing the governed table. Defaults to the caller’s account.
    ///   - databaseName: The database containing the governed table.
    ///   - maxResults: Specifies how many values to return in a page.
    ///   - nextToken: A continuation token if this is not the first call to retrieve these objects.
    ///   - partitionPredicate: A predicate to filter the objects returned based on the partition keys defined in the governed table.   The comparison operators supported are: =, >, =,    The logical operators supported are: AND   The data types supported are integer, long, date(yyyy-MM-dd), timestamp(yyyy-MM-dd HH:mm:ssXXX or yyyy-MM-dd HH:mm:ss"), string and decimal.
    ///   - queryAsOfTime: The time as of when to read the governed table contents. If not set, the most recent transaction commit time is used. Cannot be specified along with TransactionId.
    ///   - tableName: The governed table for which to retrieve objects.
    ///   - transactionId: The transaction ID at which to read the governed table contents. If this transaction has aborted, an error is returned. If not set, defaults to the most recent committed transaction. Cannot be specified along with QueryAsOfTime.
    ///   - logger: Logger use during operation
    @inlinable
    public func getTableObjects(
        catalogId: String? = nil,
        databaseName: String,
        maxResults: Int? = nil,
        nextToken: String? = nil,
        partitionPredicate: String? = nil,
        queryAsOfTime: Date? = nil,
        tableName: String,
        transactionId: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> GetTableObjectsResponse {
        let input = GetTableObjectsRequest(
            catalogId: catalogId, 
            databaseName: databaseName, 
            maxResults: maxResults, 
            nextToken: nextToken, 
            partitionPredicate: partitionPredicate, 
            queryAsOfTime: queryAsOfTime, 
            tableName: tableName, 
            transactionId: transactionId
        )
        return try await self.getTableObjects(input, logger: logger)
    }

    /// This API is identical to GetTemporaryTableCredentials except that this is used when the target Data Catalog resource is of type Partition.  Lake Formation restricts the permission of the vended credentials with the same scope down policy which restricts access to a single Amazon S3 prefix.
    @Sendable
    @inlinable
    public func getTemporaryGluePartitionCredentials(_ input: GetTemporaryGluePartitionCredentialsRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> GetTemporaryGluePartitionCredentialsResponse {
        try await self.client.execute(
            operation: "GetTemporaryGluePartitionCredentials", 
            path: "/GetTemporaryGluePartitionCredentials", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// This API is identical to GetTemporaryTableCredentials except that this is used when the target Data Catalog resource is of type Partition.  Lake Formation restricts the permission of the vended credentials with the same scope down policy which restricts access to a single Amazon S3 prefix.
    ///
    /// Parameters:
    ///   - auditContext: A structure representing context to access a resource (column names, query ID, etc).
    ///   - durationSeconds: The time period, between 900 and 21,600 seconds, for the timeout of the temporary credentials.
    ///   - partition: A list of partition values identifying a single partition.
    ///   - permissions: Filters the request based on the user having been granted a list of specified permissions on the requested resource(s).
    ///   - supportedPermissionTypes: A list of supported permission types for the partition. Valid values are COLUMN_PERMISSION and CELL_FILTER_PERMISSION.
    ///   - tableArn: The ARN of the partitions' table.
    ///   - logger: Logger use during operation
    @inlinable
    public func getTemporaryGluePartitionCredentials(
        auditContext: AuditContext? = nil,
        durationSeconds: Int? = nil,
        partition: PartitionValueList,
        permissions: [Permission]? = nil,
        supportedPermissionTypes: [PermissionType]? = nil,
        tableArn: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> GetTemporaryGluePartitionCredentialsResponse {
        let input = GetTemporaryGluePartitionCredentialsRequest(
            auditContext: auditContext, 
            durationSeconds: durationSeconds, 
            partition: partition, 
            permissions: permissions, 
            supportedPermissionTypes: supportedPermissionTypes, 
            tableArn: tableArn
        )
        return try await self.getTemporaryGluePartitionCredentials(input, logger: logger)
    }

    /// Allows a caller in a secure environment to assume a role with permission to access Amazon S3. In order to vend such credentials, Lake Formation assumes the role associated with a registered location, for example an Amazon S3 bucket, with a scope down policy which restricts the access to a single prefix. To call this API, the role that the service assumes must have lakeformation:GetDataAccess permission on the resource.
    @Sendable
    @inlinable
    public func getTemporaryGlueTableCredentials(_ input: GetTemporaryGlueTableCredentialsRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> GetTemporaryGlueTableCredentialsResponse {
        try await self.client.execute(
            operation: "GetTemporaryGlueTableCredentials", 
            path: "/GetTemporaryGlueTableCredentials", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Allows a caller in a secure environment to assume a role with permission to access Amazon S3. In order to vend such credentials, Lake Formation assumes the role associated with a registered location, for example an Amazon S3 bucket, with a scope down policy which restricts the access to a single prefix. To call this API, the role that the service assumes must have lakeformation:GetDataAccess permission on the resource.
    ///
    /// Parameters:
    ///   - auditContext: A structure representing context to access a resource (column names, query ID, etc).
    ///   - durationSeconds: The time period, between 900 and 21,600 seconds, for the timeout of the temporary credentials.
    ///   - permissions: Filters the request based on the user having been granted a list of specified permissions on the requested resource(s).
    ///   - querySessionContext: A structure used as a protocol between query engines and Lake Formation or Glue. Contains both a Lake Formation generated authorization identifier and information from the request's authorization context.
    ///   - s3Path: The Amazon S3 path for the table.
    ///   - supportedPermissionTypes: A list of supported permission types for the table. Valid values are COLUMN_PERMISSION and CELL_FILTER_PERMISSION.
    ///   - tableArn: The ARN identifying a table in the Data Catalog for the temporary credentials request.
    ///   - logger: Logger use during operation
    @inlinable
    public func getTemporaryGlueTableCredentials(
        auditContext: AuditContext? = nil,
        durationSeconds: Int? = nil,
        permissions: [Permission]? = nil,
        querySessionContext: QuerySessionContext? = nil,
        s3Path: String? = nil,
        supportedPermissionTypes: [PermissionType]? = nil,
        tableArn: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> GetTemporaryGlueTableCredentialsResponse {
        let input = GetTemporaryGlueTableCredentialsRequest(
            auditContext: auditContext, 
            durationSeconds: durationSeconds, 
            permissions: permissions, 
            querySessionContext: querySessionContext, 
            s3Path: s3Path, 
            supportedPermissionTypes: supportedPermissionTypes, 
            tableArn: tableArn
        )
        return try await self.getTemporaryGlueTableCredentials(input, logger: logger)
    }

    /// Returns the work units resulting from the query. Work units can be executed in any order and in parallel.
    @Sendable
    @inlinable
    public func getWorkUnitResults(_ input: GetWorkUnitResultsRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> GetWorkUnitResultsResponse {
        try await self.client.execute(
            operation: "GetWorkUnitResults", 
            path: "/GetWorkUnitResults", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            hostPrefix: "data-", 
            logger: logger
        )
    }
    /// Returns the work units resulting from the query. Work units can be executed in any order and in parallel.
    ///
    /// Parameters:
    ///   - queryId: The ID of the plan query operation for which to get results.
    ///   - workUnitId: The work unit ID for which to get results. Value generated by enumerating WorkUnitIdMin to WorkUnitIdMax (inclusive) from the WorkUnitRange in the output of GetWorkUnits.
    ///   - workUnitToken: A work token used to query the execution service. Token output from GetWorkUnits.
    ///   - logger: Logger use during operation
    @inlinable
    public func getWorkUnitResults(
        queryId: String,
        workUnitId: Int64 = 0,
        workUnitToken: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> GetWorkUnitResultsResponse {
        let input = GetWorkUnitResultsRequest(
            queryId: queryId, 
            workUnitId: workUnitId, 
            workUnitToken: workUnitToken
        )
        return try await self.getWorkUnitResults(input, logger: logger)
    }

    /// Retrieves the work units generated by the StartQueryPlanning operation.
    @Sendable
    @inlinable
    public func getWorkUnits(_ input: GetWorkUnitsRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> GetWorkUnitsResponse {
        try await self.client.execute(
            operation: "GetWorkUnits", 
            path: "/GetWorkUnits", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            hostPrefix: "query-", 
            logger: logger
        )
    }
    /// Retrieves the work units generated by the StartQueryPlanning operation.
    ///
    /// Parameters:
    ///   - nextToken: A continuation token, if this is a continuation call.
    ///   - pageSize: The size of each page to get in the Amazon Web Services service call. This does not affect the number of items returned in the command's output. Setting a smaller page size results in more calls to the Amazon Web Services service, retrieving fewer items in each call. This can help prevent the Amazon Web Services service calls from timing out.
    ///   - queryId: The ID of the plan query operation.
    ///   - logger: Logger use during operation
    @inlinable
    public func getWorkUnits(
        nextToken: String? = nil,
        pageSize: Int? = nil,
        queryId: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> GetWorkUnitsResponse {
        let input = GetWorkUnitsRequest(
            nextToken: nextToken, 
            pageSize: pageSize, 
            queryId: queryId
        )
        return try await self.getWorkUnits(input, logger: logger)
    }

    /// Grants permissions to the principal to access metadata in the Data Catalog and data organized in underlying data storage such as Amazon S3. For information about permissions, see Security and Access Control to Metadata and Data.
    @Sendable
    @inlinable
    public func grantPermissions(_ input: GrantPermissionsRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> GrantPermissionsResponse {
        try await self.client.execute(
            operation: "GrantPermissions", 
            path: "/GrantPermissions", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Grants permissions to the principal to access metadata in the Data Catalog and data organized in underlying data storage such as Amazon S3. For information about permissions, see Security and Access Control to Metadata and Data.
    ///
    /// Parameters:
    ///   - catalogId: The identifier for the Data Catalog. By default, the account ID. The Data Catalog is the persistent metadata store. It contains database definitions, table definitions, and other control information to manage your Lake Formation environment.
    ///   - permissions: The permissions granted to the principal on the resource. Lake Formation defines privileges to grant and revoke access to metadata in the Data Catalog and data organized in underlying data storage such as Amazon S3. Lake Formation requires that each principal be authorized to perform a specific task on Lake Formation resources.
    ///   - permissionsWithGrantOption: Indicates a list of the granted permissions that the principal may pass to other users. These permissions may only be a subset of the permissions granted in the Privileges.
    ///   - principal: The principal to be granted the permissions on the resource. Supported principals are IAM users or IAM roles, and they are defined by their principal type and their ARN. Note that if you define a resource with a particular ARN, then later delete, and recreate a resource with that same ARN, the resource maintains the permissions already granted.
    ///   - resource: The resource to which permissions are to be granted. Resources in Lake Formation are the Data Catalog, databases, and tables.
    ///   - logger: Logger use during operation
    @inlinable
    public func grantPermissions(
        catalogId: String? = nil,
        permissions: [Permission],
        permissionsWithGrantOption: [Permission]? = nil,
        principal: DataLakePrincipal,
        resource: Resource,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> GrantPermissionsResponse {
        let input = GrantPermissionsRequest(
            catalogId: catalogId, 
            permissions: permissions, 
            permissionsWithGrantOption: permissionsWithGrantOption, 
            principal: principal, 
            resource: resource
        )
        return try await self.grantPermissions(input, logger: logger)
    }

    /// Lists all the data cell filters on a table.
    @Sendable
    @inlinable
    public func listDataCellsFilter(_ input: ListDataCellsFilterRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> ListDataCellsFilterResponse {
        try await self.client.execute(
            operation: "ListDataCellsFilter", 
            path: "/ListDataCellsFilter", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Lists all the data cell filters on a table.
    ///
    /// Parameters:
    ///   - maxResults: The maximum size of the response.
    ///   - nextToken: A continuation token, if this is a continuation call.
    ///   - table: A table in the Glue Data Catalog.
    ///   - logger: Logger use during operation
    @inlinable
    public func listDataCellsFilter(
        maxResults: Int? = nil,
        nextToken: String? = nil,
        table: TableResource? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> ListDataCellsFilterResponse {
        let input = ListDataCellsFilterRequest(
            maxResults: maxResults, 
            nextToken: nextToken, 
            table: table
        )
        return try await self.listDataCellsFilter(input, logger: logger)
    }

    /// Returns the LF-Tag expressions in caller’s account filtered based on caller's permissions. Data Lake and read only admins implicitly can see all tag expressions in their account, else caller needs DESCRIBE permissions on tag expression.
    @Sendable
    @inlinable
    public func listLFTagExpressions(_ input: ListLFTagExpressionsRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> ListLFTagExpressionsResponse {
        try await self.client.execute(
            operation: "ListLFTagExpressions", 
            path: "/ListLFTagExpressions", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Returns the LF-Tag expressions in caller’s account filtered based on caller's permissions. Data Lake and read only admins implicitly can see all tag expressions in their account, else caller needs DESCRIBE permissions on tag expression.
    ///
    /// Parameters:
    ///   - catalogId: The identifier for the Data Catalog. By default, the account ID.
    ///   - maxResults: The maximum number of results to return.
    ///   - nextToken: A continuation token, if this is not the first call to retrieve this list.
    ///   - logger: Logger use during operation
    @inlinable
    public func listLFTagExpressions(
        catalogId: String? = nil,
        maxResults: Int? = nil,
        nextToken: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> ListLFTagExpressionsResponse {
        let input = ListLFTagExpressionsRequest(
            catalogId: catalogId, 
            maxResults: maxResults, 
            nextToken: nextToken
        )
        return try await self.listLFTagExpressions(input, logger: logger)
    }

    /// Lists LF-tags that the requester has permission to view.
    @Sendable
    @inlinable
    public func listLFTags(_ input: ListLFTagsRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> ListLFTagsResponse {
        try await self.client.execute(
            operation: "ListLFTags", 
            path: "/ListLFTags", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Lists LF-tags that the requester has permission to view.
    ///
    /// Parameters:
    ///   - catalogId: The identifier for the Data Catalog. By default, the account ID. The Data Catalog is the persistent metadata store. It contains database definitions, table definitions, and other control information to manage your Lake Formation environment.
    ///   - maxResults: The maximum number of results to return.
    ///   - nextToken: A continuation token, if this is not the first call to retrieve this list.
    ///   - resourceShareType: If resource share type is ALL, returns both in-account LF-tags and shared LF-tags that the requester has permission to view. If resource share type is FOREIGN, returns all share LF-tags that the requester can view. If no resource share type is passed, lists LF-tags in the given catalog ID that the requester has permission to view.
    ///   - logger: Logger use during operation
    @inlinable
    public func listLFTags(
        catalogId: String? = nil,
        maxResults: Int? = nil,
        nextToken: String? = nil,
        resourceShareType: ResourceShareType? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> ListLFTagsResponse {
        let input = ListLFTagsRequest(
            catalogId: catalogId, 
            maxResults: maxResults, 
            nextToken: nextToken, 
            resourceShareType: resourceShareType
        )
        return try await self.listLFTags(input, logger: logger)
    }

    /// Retrieve the current list of resources and principals that are opt in to enforce Lake Formation permissions.
    @Sendable
    @inlinable
    public func listLakeFormationOptIns(_ input: ListLakeFormationOptInsRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> ListLakeFormationOptInsResponse {
        try await self.client.execute(
            operation: "ListLakeFormationOptIns", 
            path: "/ListLakeFormationOptIns", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Retrieve the current list of resources and principals that are opt in to enforce Lake Formation permissions.
    ///
    /// Parameters:
    ///   - maxResults: The maximum number of results to return.
    ///   - nextToken: A continuation token, if this is not the first call to retrieve this list.
    ///   - principal: 
    ///   - resource: A structure for the resource.
    ///   - logger: Logger use during operation
    @inlinable
    public func listLakeFormationOptIns(
        maxResults: Int? = nil,
        nextToken: String? = nil,
        principal: DataLakePrincipal? = nil,
        resource: Resource? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> ListLakeFormationOptInsResponse {
        let input = ListLakeFormationOptInsRequest(
            maxResults: maxResults, 
            nextToken: nextToken, 
            principal: principal, 
            resource: resource
        )
        return try await self.listLakeFormationOptIns(input, logger: logger)
    }

    /// Returns a list of the principal permissions on the resource, filtered by the permissions of the caller. For example, if you are granted an ALTER permission, you are able to see only the principal permissions for ALTER. This operation returns only those permissions that have been explicitly granted. For information about permissions, see Security and Access Control to Metadata and Data.
    @Sendable
    @inlinable
    public func listPermissions(_ input: ListPermissionsRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> ListPermissionsResponse {
        try await self.client.execute(
            operation: "ListPermissions", 
            path: "/ListPermissions", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Returns a list of the principal permissions on the resource, filtered by the permissions of the caller. For example, if you are granted an ALTER permission, you are able to see only the principal permissions for ALTER. This operation returns only those permissions that have been explicitly granted. For information about permissions, see Security and Access Control to Metadata and Data.
    ///
    /// Parameters:
    ///   - catalogId: The identifier for the Data Catalog. By default, the account ID. The Data Catalog is the persistent metadata store. It contains database definitions, table definitions, and other control information to manage your Lake Formation environment.
    ///   - includeRelated: Indicates that related permissions should be included in the results.
    ///   - maxResults: The maximum number of results to return.
    ///   - nextToken: A continuation token, if this is not the first call to retrieve this list.
    ///   - principal: Specifies a principal to filter the permissions returned.
    ///   - resource: A resource where you will get a list of the principal permissions. This operation does not support getting privileges on a table with columns. Instead, call this operation on the table, and the operation returns the table and the table w columns.
    ///   - resourceType: Specifies a resource type to filter the permissions returned.
    ///   - logger: Logger use during operation
    @inlinable
    public func listPermissions(
        catalogId: String? = nil,
        includeRelated: String? = nil,
        maxResults: Int? = nil,
        nextToken: String? = nil,
        principal: DataLakePrincipal? = nil,
        resource: Resource? = nil,
        resourceType: DataLakeResourceType? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> ListPermissionsResponse {
        let input = ListPermissionsRequest(
            catalogId: catalogId, 
            includeRelated: includeRelated, 
            maxResults: maxResults, 
            nextToken: nextToken, 
            principal: principal, 
            resource: resource, 
            resourceType: resourceType
        )
        return try await self.listPermissions(input, logger: logger)
    }

    /// Lists the resources registered to be managed by the Data Catalog.
    @Sendable
    @inlinable
    public func listResources(_ input: ListResourcesRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> ListResourcesResponse {
        try await self.client.execute(
            operation: "ListResources", 
            path: "/ListResources", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Lists the resources registered to be managed by the Data Catalog.
    ///
    /// Parameters:
    ///   - filterConditionList: Any applicable row-level and/or column-level filtering conditions for the resources.
    ///   - maxResults: The maximum number of resource results.
    ///   - nextToken: A continuation token, if this is not the first call to retrieve these resources.
    ///   - logger: Logger use during operation
    @inlinable
    public func listResources(
        filterConditionList: [FilterCondition]? = nil,
        maxResults: Int? = nil,
        nextToken: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> ListResourcesResponse {
        let input = ListResourcesRequest(
            filterConditionList: filterConditionList, 
            maxResults: maxResults, 
            nextToken: nextToken
        )
        return try await self.listResources(input, logger: logger)
    }

    /// Returns the configuration of all storage optimizers associated with a specified table.
    @Sendable
    @inlinable
    public func listTableStorageOptimizers(_ input: ListTableStorageOptimizersRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> ListTableStorageOptimizersResponse {
        try await self.client.execute(
            operation: "ListTableStorageOptimizers", 
            path: "/ListTableStorageOptimizers", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Returns the configuration of all storage optimizers associated with a specified table.
    ///
    /// Parameters:
    ///   - catalogId: The Catalog ID of the table.
    ///   - databaseName: Name of the database where the table is present.
    ///   - maxResults: The number of storage optimizers to return on each call.
    ///   - nextToken: A continuation token, if this is a continuation call.
    ///   - storageOptimizerType: The specific type of storage optimizers to list. The supported value is compaction.
    ///   - tableName: Name of the table.
    ///   - logger: Logger use during operation
    @inlinable
    public func listTableStorageOptimizers(
        catalogId: String? = nil,
        databaseName: String,
        maxResults: Int? = nil,
        nextToken: String? = nil,
        storageOptimizerType: OptimizerType? = nil,
        tableName: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> ListTableStorageOptimizersResponse {
        let input = ListTableStorageOptimizersRequest(
            catalogId: catalogId, 
            databaseName: databaseName, 
            maxResults: maxResults, 
            nextToken: nextToken, 
            storageOptimizerType: storageOptimizerType, 
            tableName: tableName
        )
        return try await self.listTableStorageOptimizers(input, logger: logger)
    }

    /// Returns metadata about transactions and their status. To prevent the response from growing indefinitely, only uncommitted transactions and those available for time-travel queries are returned. This operation can help you identify uncommitted transactions or to get information about transactions.
    @Sendable
    @inlinable
    public func listTransactions(_ input: ListTransactionsRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> ListTransactionsResponse {
        try await self.client.execute(
            operation: "ListTransactions", 
            path: "/ListTransactions", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Returns metadata about transactions and their status. To prevent the response from growing indefinitely, only uncommitted transactions and those available for time-travel queries are returned. This operation can help you identify uncommitted transactions or to get information about transactions.
    ///
    /// Parameters:
    ///   - catalogId: The catalog for which to list transactions. Defaults to the account ID of the caller.
    ///   - maxResults: The maximum number of transactions to return in a single call.
    ///   - nextToken: A continuation token if this is not the first call to retrieve transactions.
    ///   - statusFilter:  A filter indicating the status of transactions to return. Options are ALL | COMPLETED | COMMITTED | ABORTED | ACTIVE. The default is ALL.
    ///   - logger: Logger use during operation
    @inlinable
    public func listTransactions(
        catalogId: String? = nil,
        maxResults: Int? = nil,
        nextToken: String? = nil,
        statusFilter: TransactionStatusFilter? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> ListTransactionsResponse {
        let input = ListTransactionsRequest(
            catalogId: catalogId, 
            maxResults: maxResults, 
            nextToken: nextToken, 
            statusFilter: statusFilter
        )
        return try await self.listTransactions(input, logger: logger)
    }

    /// Sets the list of data lake administrators who have admin privileges on all resources managed by Lake Formation. For more information on admin privileges, see Granting Lake Formation Permissions. This API replaces the current list of data lake admins with the new list being passed. To add an admin, fetch the current list and add the new admin to that list and pass that list in this API.
    @Sendable
    @inlinable
    public func putDataLakeSettings(_ input: PutDataLakeSettingsRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> PutDataLakeSettingsResponse {
        try await self.client.execute(
            operation: "PutDataLakeSettings", 
            path: "/PutDataLakeSettings", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Sets the list of data lake administrators who have admin privileges on all resources managed by Lake Formation. For more information on admin privileges, see Granting Lake Formation Permissions. This API replaces the current list of data lake admins with the new list being passed. To add an admin, fetch the current list and add the new admin to that list and pass that list in this API.
    ///
    /// Parameters:
    ///   - catalogId: The identifier for the Data Catalog. By default, the account ID. The Data Catalog is the persistent metadata store. It contains database definitions, table definitions, and other control information to manage your Lake Formation environment.
    ///   - dataLakeSettings: A structure representing a list of Lake Formation principals designated as data lake administrators.
    ///   - logger: Logger use during operation
    @inlinable
    public func putDataLakeSettings(
        catalogId: String? = nil,
        dataLakeSettings: DataLakeSettings,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> PutDataLakeSettingsResponse {
        let input = PutDataLakeSettingsRequest(
            catalogId: catalogId, 
            dataLakeSettings: dataLakeSettings
        )
        return try await self.putDataLakeSettings(input, logger: logger)
    }

    /// Registers the resource as managed by the Data Catalog. To add or update data, Lake Formation needs read/write access to the chosen Amazon S3 path. Choose a role that you know has permission to do this, or choose the AWSServiceRoleForLakeFormationDataAccess service-linked role. When you register the first Amazon S3 path, the service-linked role and a new inline policy are created on your behalf. Lake Formation adds the first path to the inline policy and attaches it to the service-linked role. When you register subsequent paths, Lake Formation adds the path to the existing policy. The following request registers a new location and gives Lake Formation permission to use the service-linked role to access that location.  ResourceArn = arn:aws:s3:::my-bucket/
    /// UseServiceLinkedRole = true  If UseServiceLinkedRole is not set to true, you must provide or set the RoleArn:  arn:aws:iam::12345:role/my-data-access-role
    @Sendable
    @inlinable
    public func registerResource(_ input: RegisterResourceRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> RegisterResourceResponse {
        try await self.client.execute(
            operation: "RegisterResource", 
            path: "/RegisterResource", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Registers the resource as managed by the Data Catalog. To add or update data, Lake Formation needs read/write access to the chosen Amazon S3 path. Choose a role that you know has permission to do this, or choose the AWSServiceRoleForLakeFormationDataAccess service-linked role. When you register the first Amazon S3 path, the service-linked role and a new inline policy are created on your behalf. Lake Formation adds the first path to the inline policy and attaches it to the service-linked role. When you register subsequent paths, Lake Formation adds the path to the existing policy. The following request registers a new location and gives Lake Formation permission to use the service-linked role to access that location.  ResourceArn = arn:aws:s3:::my-bucket/
    /// UseServiceLinkedRole = true  If UseServiceLinkedRole is not set to true, you must provide or set the RoleArn:  arn:aws:iam::12345:role/my-data-access-role
    ///
    /// Parameters:
    ///   - hybridAccessEnabled:  Specifies whether the data access of tables pointing to the location can be managed by both Lake Formation permissions as well as Amazon S3 bucket policies.
    ///   - resourceArn: The Amazon Resource Name (ARN) of the resource that you want to register.
    ///   - roleArn: The identifier for the role that registers the resource.
    ///   - useServiceLinkedRole: Designates an Identity and Access Management (IAM) service-linked role by registering this role with the Data Catalog. A service-linked role is a unique type of IAM role that is linked directly to Lake Formation. For more information, see Using Service-Linked Roles for Lake Formation.
    ///   - withFederation: Whether or not the resource is a federated resource.
    ///   - logger: Logger use during operation
    @inlinable
    public func registerResource(
        hybridAccessEnabled: Bool? = nil,
        resourceArn: String,
        roleArn: String? = nil,
        useServiceLinkedRole: Bool? = nil,
        withFederation: Bool? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> RegisterResourceResponse {
        let input = RegisterResourceRequest(
            hybridAccessEnabled: hybridAccessEnabled, 
            resourceArn: resourceArn, 
            roleArn: roleArn, 
            useServiceLinkedRole: useServiceLinkedRole, 
            withFederation: withFederation
        )
        return try await self.registerResource(input, logger: logger)
    }

    /// Removes an LF-tag from the resource. Only database, table, or tableWithColumns resource are allowed. To tag columns, use the column inclusion list in tableWithColumns to specify column input.
    @Sendable
    @inlinable
    public func removeLFTagsFromResource(_ input: RemoveLFTagsFromResourceRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> RemoveLFTagsFromResourceResponse {
        try await self.client.execute(
            operation: "RemoveLFTagsFromResource", 
            path: "/RemoveLFTagsFromResource", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Removes an LF-tag from the resource. Only database, table, or tableWithColumns resource are allowed. To tag columns, use the column inclusion list in tableWithColumns to specify column input.
    ///
    /// Parameters:
    ///   - catalogId: The identifier for the Data Catalog. By default, the account ID. The Data Catalog is the persistent metadata store. It contains database definitions, table definitions, and other control information to manage your Lake Formation environment.
    ///   - lfTags: The LF-tags to be removed from the resource.
    ///   - resource: The database, table, or column resource where you want to remove an LF-tag.
    ///   - logger: Logger use during operation
    @inlinable
    public func removeLFTagsFromResource(
        catalogId: String? = nil,
        lfTags: [LFTagPair],
        resource: Resource,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> RemoveLFTagsFromResourceResponse {
        let input = RemoveLFTagsFromResourceRequest(
            catalogId: catalogId, 
            lfTags: lfTags, 
            resource: resource
        )
        return try await self.removeLFTagsFromResource(input, logger: logger)
    }

    /// Revokes permissions to the principal to access metadata in the Data Catalog and data organized in underlying data storage such as Amazon S3.
    @Sendable
    @inlinable
    public func revokePermissions(_ input: RevokePermissionsRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> RevokePermissionsResponse {
        try await self.client.execute(
            operation: "RevokePermissions", 
            path: "/RevokePermissions", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Revokes permissions to the principal to access metadata in the Data Catalog and data organized in underlying data storage such as Amazon S3.
    ///
    /// Parameters:
    ///   - catalogId: The identifier for the Data Catalog. By default, the account ID. The Data Catalog is the persistent metadata store. It contains database definitions, table definitions, and other control information to manage your Lake Formation environment.
    ///   - permissions: The permissions revoked to the principal on the resource. For information about permissions, see Security and Access Control to Metadata and Data.
    ///   - permissionsWithGrantOption: Indicates a list of permissions for which to revoke the grant option allowing the principal to pass permissions to other principals.
    ///   - principal: The principal to be revoked permissions on the resource.
    ///   - resource: The resource to which permissions are to be revoked.
    ///   - logger: Logger use during operation
    @inlinable
    public func revokePermissions(
        catalogId: String? = nil,
        permissions: [Permission],
        permissionsWithGrantOption: [Permission]? = nil,
        principal: DataLakePrincipal,
        resource: Resource,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> RevokePermissionsResponse {
        let input = RevokePermissionsRequest(
            catalogId: catalogId, 
            permissions: permissions, 
            permissionsWithGrantOption: permissionsWithGrantOption, 
            principal: principal, 
            resource: resource
        )
        return try await self.revokePermissions(input, logger: logger)
    }

    /// This operation allows a search on DATABASE resources by TagCondition. This operation is used by admins who want to grant user permissions on certain TagConditions. Before making a grant, the admin can use SearchDatabasesByTags to find all resources where the given TagConditions are valid to verify whether the returned resources can be shared.
    @Sendable
    @inlinable
    public func searchDatabasesByLFTags(_ input: SearchDatabasesByLFTagsRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> SearchDatabasesByLFTagsResponse {
        try await self.client.execute(
            operation: "SearchDatabasesByLFTags", 
            path: "/SearchDatabasesByLFTags", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// This operation allows a search on DATABASE resources by TagCondition. This operation is used by admins who want to grant user permissions on certain TagConditions. Before making a grant, the admin can use SearchDatabasesByTags to find all resources where the given TagConditions are valid to verify whether the returned resources can be shared.
    ///
    /// Parameters:
    ///   - catalogId: The identifier for the Data Catalog. By default, the account ID. The Data Catalog is the persistent metadata store. It contains database definitions, table definitions, and other control information to manage your Lake Formation environment.
    ///   - expression: A list of conditions (LFTag structures) to search for in database resources.
    ///   - maxResults: The maximum number of results to return.
    ///   - nextToken: A continuation token, if this is not the first call to retrieve this list.
    ///   - logger: Logger use during operation
    @inlinable
    public func searchDatabasesByLFTags(
        catalogId: String? = nil,
        expression: [LFTag],
        maxResults: Int? = nil,
        nextToken: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> SearchDatabasesByLFTagsResponse {
        let input = SearchDatabasesByLFTagsRequest(
            catalogId: catalogId, 
            expression: expression, 
            maxResults: maxResults, 
            nextToken: nextToken
        )
        return try await self.searchDatabasesByLFTags(input, logger: logger)
    }

    /// This operation allows a search on TABLE resources by LFTags. This will be used by admins who want to grant user permissions on certain LF-tags. Before making a grant, the admin can use SearchTablesByLFTags to find all resources where the given LFTags are valid to verify whether the returned resources can be shared.
    @Sendable
    @inlinable
    public func searchTablesByLFTags(_ input: SearchTablesByLFTagsRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> SearchTablesByLFTagsResponse {
        try await self.client.execute(
            operation: "SearchTablesByLFTags", 
            path: "/SearchTablesByLFTags", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// This operation allows a search on TABLE resources by LFTags. This will be used by admins who want to grant user permissions on certain LF-tags. Before making a grant, the admin can use SearchTablesByLFTags to find all resources where the given LFTags are valid to verify whether the returned resources can be shared.
    ///
    /// Parameters:
    ///   - catalogId: The identifier for the Data Catalog. By default, the account ID. The Data Catalog is the persistent metadata store. It contains database definitions, table definitions, and other control information to manage your Lake Formation environment.
    ///   - expression: A list of conditions (LFTag structures) to search for in table resources.
    ///   - maxResults: The maximum number of results to return.
    ///   - nextToken: A continuation token, if this is not the first call to retrieve this list.
    ///   - logger: Logger use during operation
    @inlinable
    public func searchTablesByLFTags(
        catalogId: String? = nil,
        expression: [LFTag],
        maxResults: Int? = nil,
        nextToken: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> SearchTablesByLFTagsResponse {
        let input = SearchTablesByLFTagsRequest(
            catalogId: catalogId, 
            expression: expression, 
            maxResults: maxResults, 
            nextToken: nextToken
        )
        return try await self.searchTablesByLFTags(input, logger: logger)
    }

    /// Submits a request to process a query statement. This operation generates work units that can be retrieved with the GetWorkUnits operation as soon as the query state is WORKUNITS_AVAILABLE or FINISHED.
    @Sendable
    @inlinable
    public func startQueryPlanning(_ input: StartQueryPlanningRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> StartQueryPlanningResponse {
        try await self.client.execute(
            operation: "StartQueryPlanning", 
            path: "/StartQueryPlanning", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            hostPrefix: "query-", 
            logger: logger
        )
    }
    /// Submits a request to process a query statement. This operation generates work units that can be retrieved with the GetWorkUnits operation as soon as the query state is WORKUNITS_AVAILABLE or FINISHED.
    ///
    /// Parameters:
    ///   - queryPlanningContext: A structure containing information about the query plan.
    ///   - queryString: A PartiQL query statement used as an input to the planner service.
    ///   - logger: Logger use during operation
    @inlinable
    public func startQueryPlanning(
        queryPlanningContext: QueryPlanningContext,
        queryString: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> StartQueryPlanningResponse {
        let input = StartQueryPlanningRequest(
            queryPlanningContext: queryPlanningContext, 
            queryString: queryString
        )
        return try await self.startQueryPlanning(input, logger: logger)
    }

    /// Starts a new transaction and returns its transaction ID. Transaction IDs are opaque objects that you can use to identify a transaction.
    @Sendable
    @inlinable
    public func startTransaction(_ input: StartTransactionRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> StartTransactionResponse {
        try await self.client.execute(
            operation: "StartTransaction", 
            path: "/StartTransaction", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Starts a new transaction and returns its transaction ID. Transaction IDs are opaque objects that you can use to identify a transaction.
    ///
    /// Parameters:
    ///   - transactionType: Indicates whether this transaction should be read only or read and write. Writes made using a read-only transaction ID will be rejected. Read-only transactions do not need to be committed.
    ///   - logger: Logger use during operation
    @inlinable
    public func startTransaction(
        transactionType: TransactionType? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> StartTransactionResponse {
        let input = StartTransactionRequest(
            transactionType: transactionType
        )
        return try await self.startTransaction(input, logger: logger)
    }

    /// Updates a data cell filter.
    @Sendable
    @inlinable
    public func updateDataCellsFilter(_ input: UpdateDataCellsFilterRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> UpdateDataCellsFilterResponse {
        try await self.client.execute(
            operation: "UpdateDataCellsFilter", 
            path: "/UpdateDataCellsFilter", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Updates a data cell filter.
    ///
    /// Parameters:
    ///   - tableData: A DataCellsFilter structure containing information about the data cells filter.
    ///   - logger: Logger use during operation
    @inlinable
    public func updateDataCellsFilter(
        tableData: DataCellsFilter,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> UpdateDataCellsFilterResponse {
        let input = UpdateDataCellsFilterRequest(
            tableData: tableData
        )
        return try await self.updateDataCellsFilter(input, logger: logger)
    }

    /// Updates the list of possible values for the specified LF-tag key. If the LF-tag does not exist, the operation throws an EntityNotFoundException. The values in the delete key values will be deleted from list of possible values. If any value in the delete key values is attached to a resource, then API errors out with a 400 Exception - "Update not allowed". Untag the attribute before deleting the LF-tag key's value.
    @Sendable
    @inlinable
    public func updateLFTag(_ input: UpdateLFTagRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> UpdateLFTagResponse {
        try await self.client.execute(
            operation: "UpdateLFTag", 
            path: "/UpdateLFTag", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Updates the list of possible values for the specified LF-tag key. If the LF-tag does not exist, the operation throws an EntityNotFoundException. The values in the delete key values will be deleted from list of possible values. If any value in the delete key values is attached to a resource, then API errors out with a 400 Exception - "Update not allowed". Untag the attribute before deleting the LF-tag key's value.
    ///
    /// Parameters:
    ///   - catalogId: The identifier for the Data Catalog. By default, the account ID. The Data Catalog is the persistent metadata store. It contains database definitions, table definitions, and other control information to manage your Lake Formation environment.
    ///   - tagKey: The key-name for the LF-tag for which to add or delete values.
    ///   - tagValuesToAdd: A list of LF-tag values to add from the LF-tag.
    ///   - tagValuesToDelete: A list of LF-tag values to delete from the LF-tag.
    ///   - logger: Logger use during operation
    @inlinable
    public func updateLFTag(
        catalogId: String? = nil,
        tagKey: String,
        tagValuesToAdd: [String]? = nil,
        tagValuesToDelete: [String]? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> UpdateLFTagResponse {
        let input = UpdateLFTagRequest(
            catalogId: catalogId, 
            tagKey: tagKey, 
            tagValuesToAdd: tagValuesToAdd, 
            tagValuesToDelete: tagValuesToDelete
        )
        return try await self.updateLFTag(input, logger: logger)
    }

    /// Updates the name of the LF-Tag expression to the new description and expression body provided. Updating a LF-Tag expression immediately changes the permission boundaries of all existing LFTagPolicy permission grants that reference the given LF-Tag expression.
    @Sendable
    @inlinable
    public func updateLFTagExpression(_ input: UpdateLFTagExpressionRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> UpdateLFTagExpressionResponse {
        try await self.client.execute(
            operation: "UpdateLFTagExpression", 
            path: "/UpdateLFTagExpression", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Updates the name of the LF-Tag expression to the new description and expression body provided. Updating a LF-Tag expression immediately changes the permission boundaries of all existing LFTagPolicy permission grants that reference the given LF-Tag expression.
    ///
    /// Parameters:
    ///   - catalogId: The identifier for the Data Catalog. By default, the account ID.
    ///   - description: The description with information about the saved LF-Tag expression.
    ///   - expression: The LF-Tag expression body composed of one more LF-Tag key-value pairs.
    ///   - name: The name for the LF-Tag expression.
    ///   - logger: Logger use during operation
    @inlinable
    public func updateLFTagExpression(
        catalogId: String? = nil,
        description: String? = nil,
        expression: [LFTag],
        name: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> UpdateLFTagExpressionResponse {
        let input = UpdateLFTagExpressionRequest(
            catalogId: catalogId, 
            description: description, 
            expression: expression, 
            name: name
        )
        return try await self.updateLFTagExpression(input, logger: logger)
    }

    /// Updates the IAM Identity Center connection parameters.
    @Sendable
    @inlinable
    public func updateLakeFormationIdentityCenterConfiguration(_ input: UpdateLakeFormationIdentityCenterConfigurationRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> UpdateLakeFormationIdentityCenterConfigurationResponse {
        try await self.client.execute(
            operation: "UpdateLakeFormationIdentityCenterConfiguration", 
            path: "/UpdateLakeFormationIdentityCenterConfiguration", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Updates the IAM Identity Center connection parameters.
    ///
    /// Parameters:
    ///   - applicationStatus: Allows to enable or disable the IAM Identity Center connection.
    ///   - catalogId: The identifier for the Data Catalog. By default, the account ID. The Data Catalog is the persistent metadata store. It contains database definitions, table definitions, view definitions, and other control information to manage your Lake Formation environment.
    ///   - externalFiltering: A list of the account IDs of Amazon Web Services accounts of third-party applications that are allowed to access data managed by Lake Formation.
    ///   - shareRecipients: A list of Amazon Web Services account IDs or Amazon Web Services organization/organizational unit ARNs that are allowed to access to access data managed by Lake Formation.  If the ShareRecipients list includes valid values, then the resource share is updated with the principals you want to have access to the resources. If the ShareRecipients value is null, both the list of share recipients and the resource share remain unchanged. If the ShareRecipients value is an empty list, then the existing share recipients list will be cleared, and the resource share will be deleted.
    ///   - logger: Logger use during operation
    @inlinable
    public func updateLakeFormationIdentityCenterConfiguration(
        applicationStatus: ApplicationStatus? = nil,
        catalogId: String? = nil,
        externalFiltering: ExternalFilteringConfiguration? = nil,
        shareRecipients: [DataLakePrincipal]? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> UpdateLakeFormationIdentityCenterConfigurationResponse {
        let input = UpdateLakeFormationIdentityCenterConfigurationRequest(
            applicationStatus: applicationStatus, 
            catalogId: catalogId, 
            externalFiltering: externalFiltering, 
            shareRecipients: shareRecipients
        )
        return try await self.updateLakeFormationIdentityCenterConfiguration(input, logger: logger)
    }

    /// Updates the data access role used for vending access to the given (registered) resource in Lake Formation.
    @Sendable
    @inlinable
    public func updateResource(_ input: UpdateResourceRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> UpdateResourceResponse {
        try await self.client.execute(
            operation: "UpdateResource", 
            path: "/UpdateResource", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Updates the data access role used for vending access to the given (registered) resource in Lake Formation.
    ///
    /// Parameters:
    ///   - hybridAccessEnabled:  Specifies whether the data access of tables pointing to the location can be managed by both Lake Formation permissions as well as Amazon S3 bucket policies.
    ///   - resourceArn: The resource ARN.
    ///   - roleArn: The new role to use for the given resource registered in Lake Formation.
    ///   - withFederation: Whether or not the resource is a federated resource.
    ///   - logger: Logger use during operation
    @inlinable
    public func updateResource(
        hybridAccessEnabled: Bool? = nil,
        resourceArn: String,
        roleArn: String,
        withFederation: Bool? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> UpdateResourceResponse {
        let input = UpdateResourceRequest(
            hybridAccessEnabled: hybridAccessEnabled, 
            resourceArn: resourceArn, 
            roleArn: roleArn, 
            withFederation: withFederation
        )
        return try await self.updateResource(input, logger: logger)
    }

    /// Updates the manifest of Amazon S3 objects that make up the specified governed table.
    @Sendable
    @inlinable
    public func updateTableObjects(_ input: UpdateTableObjectsRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> UpdateTableObjectsResponse {
        try await self.client.execute(
            operation: "UpdateTableObjects", 
            path: "/UpdateTableObjects", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Updates the manifest of Amazon S3 objects that make up the specified governed table.
    ///
    /// Parameters:
    ///   - catalogId: The catalog containing the governed table to update. Defaults to the caller’s account ID.
    ///   - databaseName: The database containing the governed table to update.
    ///   - tableName: The governed table to update.
    ///   - transactionId: The transaction at which to do the write.
    ///   - writeOperations: A list of WriteOperation objects that define an object to add to or delete from the manifest for a governed table.
    ///   - logger: Logger use during operation
    @inlinable
    public func updateTableObjects(
        catalogId: String? = nil,
        databaseName: String,
        tableName: String,
        transactionId: String? = nil,
        writeOperations: [WriteOperation],
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> UpdateTableObjectsResponse {
        let input = UpdateTableObjectsRequest(
            catalogId: catalogId, 
            databaseName: databaseName, 
            tableName: tableName, 
            transactionId: transactionId, 
            writeOperations: writeOperations
        )
        return try await self.updateTableObjects(input, logger: logger)
    }

    /// Updates the configuration of the storage optimizers for a table.
    @Sendable
    @inlinable
    public func updateTableStorageOptimizer(_ input: UpdateTableStorageOptimizerRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> UpdateTableStorageOptimizerResponse {
        try await self.client.execute(
            operation: "UpdateTableStorageOptimizer", 
            path: "/UpdateTableStorageOptimizer", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Updates the configuration of the storage optimizers for a table.
    ///
    /// Parameters:
    ///   - catalogId: The Catalog ID of the table.
    ///   - databaseName: Name of the database where the table is present.
    ///   - storageOptimizerConfig: Name of the configuration for the storage optimizer.
    ///   - tableName: Name of the table for which to enable the storage optimizer.
    ///   - logger: Logger use during operation
    @inlinable
    public func updateTableStorageOptimizer(
        catalogId: String? = nil,
        databaseName: String,
        storageOptimizerConfig: [OptimizerType: [String: String]],
        tableName: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> UpdateTableStorageOptimizerResponse {
        let input = UpdateTableStorageOptimizerRequest(
            catalogId: catalogId, 
            databaseName: databaseName, 
            storageOptimizerConfig: storageOptimizerConfig, 
            tableName: tableName
        )
        return try await self.updateTableStorageOptimizer(input, logger: logger)
    }
}

extension LakeFormation {
    /// Initializer required by `AWSService.with(middlewares:timeout:byteBufferAllocator:options)`. You are not able to use this initializer directly as there are not public
    /// initializers for `AWSServiceConfig.Patch`. Please use `AWSService.with(middlewares:timeout:byteBufferAllocator:options)` instead.
    public init(from: LakeFormation, patch: AWSServiceConfig.Patch) {
        self.client = from.client
        self.config = from.config.with(patch: patch)
    }
}

// MARK: Paginators

@available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
extension LakeFormation {
    /// Return PaginatorSequence for operation ``getEffectivePermissionsForPath(_:logger:)``.
    ///
    /// - Parameters:
    ///   - input: Input for operation
    ///   - logger: Logger used for logging
    @inlinable
    public func getEffectivePermissionsForPathPaginator(
        _ input: GetEffectivePermissionsForPathRequest,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<GetEffectivePermissionsForPathRequest, GetEffectivePermissionsForPathResponse> {
        return .init(
            input: input,
            command: self.getEffectivePermissionsForPath,
            inputKey: \GetEffectivePermissionsForPathRequest.nextToken,
            outputKey: \GetEffectivePermissionsForPathResponse.nextToken,
            logger: logger
        )
    }
    /// Return PaginatorSequence for operation ``getEffectivePermissionsForPath(_:logger:)``.
    ///
    /// - Parameters:
    ///   - catalogId: The identifier for the Data Catalog. By default, the account ID. The Data Catalog is the persistent metadata store. It contains database definitions, table definitions, and other control information to manage your Lake Formation environment.
    ///   - maxResults: The maximum number of results to return.
    ///   - resourceArn: The Amazon Resource Name (ARN) of the resource for which you want to get permissions.
    ///   - logger: Logger used for logging
    @inlinable
    public func getEffectivePermissionsForPathPaginator(
        catalogId: String? = nil,
        maxResults: Int? = nil,
        resourceArn: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) -> AWSClient.PaginatorSequence<GetEffectivePermissionsForPathRequest, GetEffectivePermissionsForPathResponse> {
        let input = GetEffectivePermissionsForPathRequest(
            catalogId: catalogId, 
            maxResults: maxResults, 
            resourceArn: resourceArn
        )
        return self.getEffectivePermissionsForPathPaginator(input, logger: logger)
    }

    /// Return PaginatorSequence for operation ``getTableObjects(_:logger:)``.
    ///
    /// - Parameters:
    ///   - input: Input for operation
    ///   - logger: Logger used for logging
    @inlinable
    public func getTableObjectsPaginator(
        _ input: GetTableObjectsRequest,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<GetTableObjectsRequest, GetTableObjectsResponse> {
        return .init(
            input: input,
            command: self.getTableObjects,
            inputKey: \GetTableObjectsRequest.nextToken,
            outputKey: \GetTableObjectsResponse.nextToken,
            logger: logger
        )
    }
    /// Return PaginatorSequence for operation ``getTableObjects(_:logger:)``.
    ///
    /// - Parameters:
    ///   - catalogId: The catalog containing the governed table. Defaults to the caller’s account.
    ///   - databaseName: The database containing the governed table.
    ///   - maxResults: Specifies how many values to return in a page.
    ///   - partitionPredicate: A predicate to filter the objects returned based on the partition keys defined in the governed table.   The comparison operators supported are: =, >, =,    The logical operators supported are: AND   The data types supported are integer, long, date(yyyy-MM-dd), timestamp(yyyy-MM-dd HH:mm:ssXXX or yyyy-MM-dd HH:mm:ss"), string and decimal.
    ///   - queryAsOfTime: The time as of when to read the governed table contents. If not set, the most recent transaction commit time is used. Cannot be specified along with TransactionId.
    ///   - tableName: The governed table for which to retrieve objects.
    ///   - transactionId: The transaction ID at which to read the governed table contents. If this transaction has aborted, an error is returned. If not set, defaults to the most recent committed transaction. Cannot be specified along with QueryAsOfTime.
    ///   - logger: Logger used for logging
    @inlinable
    public func getTableObjectsPaginator(
        catalogId: String? = nil,
        databaseName: String,
        maxResults: Int? = nil,
        partitionPredicate: String? = nil,
        queryAsOfTime: Date? = nil,
        tableName: String,
        transactionId: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) -> AWSClient.PaginatorSequence<GetTableObjectsRequest, GetTableObjectsResponse> {
        let input = GetTableObjectsRequest(
            catalogId: catalogId, 
            databaseName: databaseName, 
            maxResults: maxResults, 
            partitionPredicate: partitionPredicate, 
            queryAsOfTime: queryAsOfTime, 
            tableName: tableName, 
            transactionId: transactionId
        )
        return self.getTableObjectsPaginator(input, logger: logger)
    }

    /// Return PaginatorSequence for operation ``getWorkUnits(_:logger:)``.
    ///
    /// - Parameters:
    ///   - input: Input for operation
    ///   - logger: Logger used for logging
    @inlinable
    public func getWorkUnitsPaginator(
        _ input: GetWorkUnitsRequest,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<GetWorkUnitsRequest, GetWorkUnitsResponse> {
        return .init(
            input: input,
            command: self.getWorkUnits,
            inputKey: \GetWorkUnitsRequest.nextToken,
            outputKey: \GetWorkUnitsResponse.nextToken,
            logger: logger
        )
    }
    /// Return PaginatorSequence for operation ``getWorkUnits(_:logger:)``.
    ///
    /// - Parameters:
    ///   - pageSize: The size of each page to get in the Amazon Web Services service call. This does not affect the number of items returned in the command's output. Setting a smaller page size results in more calls to the Amazon Web Services service, retrieving fewer items in each call. This can help prevent the Amazon Web Services service calls from timing out.
    ///   - queryId: The ID of the plan query operation.
    ///   - logger: Logger used for logging
    @inlinable
    public func getWorkUnitsPaginator(
        pageSize: Int? = nil,
        queryId: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) -> AWSClient.PaginatorSequence<GetWorkUnitsRequest, GetWorkUnitsResponse> {
        let input = GetWorkUnitsRequest(
            pageSize: pageSize, 
            queryId: queryId
        )
        return self.getWorkUnitsPaginator(input, logger: logger)
    }

    /// Return PaginatorSequence for operation ``listDataCellsFilter(_:logger:)``.
    ///
    /// - Parameters:
    ///   - input: Input for operation
    ///   - logger: Logger used for logging
    @inlinable
    public func listDataCellsFilterPaginator(
        _ input: ListDataCellsFilterRequest,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<ListDataCellsFilterRequest, ListDataCellsFilterResponse> {
        return .init(
            input: input,
            command: self.listDataCellsFilter,
            inputKey: \ListDataCellsFilterRequest.nextToken,
            outputKey: \ListDataCellsFilterResponse.nextToken,
            logger: logger
        )
    }
    /// Return PaginatorSequence for operation ``listDataCellsFilter(_:logger:)``.
    ///
    /// - Parameters:
    ///   - maxResults: The maximum size of the response.
    ///   - table: A table in the Glue Data Catalog.
    ///   - logger: Logger used for logging
    @inlinable
    public func listDataCellsFilterPaginator(
        maxResults: Int? = nil,
        table: TableResource? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) -> AWSClient.PaginatorSequence<ListDataCellsFilterRequest, ListDataCellsFilterResponse> {
        let input = ListDataCellsFilterRequest(
            maxResults: maxResults, 
            table: table
        )
        return self.listDataCellsFilterPaginator(input, logger: logger)
    }

    /// Return PaginatorSequence for operation ``listLFTagExpressions(_:logger:)``.
    ///
    /// - Parameters:
    ///   - input: Input for operation
    ///   - logger: Logger used for logging
    @inlinable
    public func listLFTagExpressionsPaginator(
        _ input: ListLFTagExpressionsRequest,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<ListLFTagExpressionsRequest, ListLFTagExpressionsResponse> {
        return .init(
            input: input,
            command: self.listLFTagExpressions,
            inputKey: \ListLFTagExpressionsRequest.nextToken,
            outputKey: \ListLFTagExpressionsResponse.nextToken,
            logger: logger
        )
    }
    /// Return PaginatorSequence for operation ``listLFTagExpressions(_:logger:)``.
    ///
    /// - Parameters:
    ///   - catalogId: The identifier for the Data Catalog. By default, the account ID.
    ///   - maxResults: The maximum number of results to return.
    ///   - logger: Logger used for logging
    @inlinable
    public func listLFTagExpressionsPaginator(
        catalogId: String? = nil,
        maxResults: Int? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) -> AWSClient.PaginatorSequence<ListLFTagExpressionsRequest, ListLFTagExpressionsResponse> {
        let input = ListLFTagExpressionsRequest(
            catalogId: catalogId, 
            maxResults: maxResults
        )
        return self.listLFTagExpressionsPaginator(input, logger: logger)
    }

    /// Return PaginatorSequence for operation ``listLFTags(_:logger:)``.
    ///
    /// - Parameters:
    ///   - input: Input for operation
    ///   - logger: Logger used for logging
    @inlinable
    public func listLFTagsPaginator(
        _ input: ListLFTagsRequest,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<ListLFTagsRequest, ListLFTagsResponse> {
        return .init(
            input: input,
            command: self.listLFTags,
            inputKey: \ListLFTagsRequest.nextToken,
            outputKey: \ListLFTagsResponse.nextToken,
            logger: logger
        )
    }
    /// Return PaginatorSequence for operation ``listLFTags(_:logger:)``.
    ///
    /// - Parameters:
    ///   - catalogId: The identifier for the Data Catalog. By default, the account ID. The Data Catalog is the persistent metadata store. It contains database definitions, table definitions, and other control information to manage your Lake Formation environment.
    ///   - maxResults: The maximum number of results to return.
    ///   - resourceShareType: If resource share type is ALL, returns both in-account LF-tags and shared LF-tags that the requester has permission to view. If resource share type is FOREIGN, returns all share LF-tags that the requester can view. If no resource share type is passed, lists LF-tags in the given catalog ID that the requester has permission to view.
    ///   - logger: Logger used for logging
    @inlinable
    public func listLFTagsPaginator(
        catalogId: String? = nil,
        maxResults: Int? = nil,
        resourceShareType: ResourceShareType? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) -> AWSClient.PaginatorSequence<ListLFTagsRequest, ListLFTagsResponse> {
        let input = ListLFTagsRequest(
            catalogId: catalogId, 
            maxResults: maxResults, 
            resourceShareType: resourceShareType
        )
        return self.listLFTagsPaginator(input, logger: logger)
    }

    /// Return PaginatorSequence for operation ``listLakeFormationOptIns(_:logger:)``.
    ///
    /// - Parameters:
    ///   - input: Input for operation
    ///   - logger: Logger used for logging
    @inlinable
    public func listLakeFormationOptInsPaginator(
        _ input: ListLakeFormationOptInsRequest,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<ListLakeFormationOptInsRequest, ListLakeFormationOptInsResponse> {
        return .init(
            input: input,
            command: self.listLakeFormationOptIns,
            inputKey: \ListLakeFormationOptInsRequest.nextToken,
            outputKey: \ListLakeFormationOptInsResponse.nextToken,
            logger: logger
        )
    }
    /// Return PaginatorSequence for operation ``listLakeFormationOptIns(_:logger:)``.
    ///
    /// - Parameters:
    ///   - maxResults: The maximum number of results to return.
    ///   - principal: 
    ///   - resource: A structure for the resource.
    ///   - logger: Logger used for logging
    @inlinable
    public func listLakeFormationOptInsPaginator(
        maxResults: Int? = nil,
        principal: DataLakePrincipal? = nil,
        resource: Resource? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) -> AWSClient.PaginatorSequence<ListLakeFormationOptInsRequest, ListLakeFormationOptInsResponse> {
        let input = ListLakeFormationOptInsRequest(
            maxResults: maxResults, 
            principal: principal, 
            resource: resource
        )
        return self.listLakeFormationOptInsPaginator(input, logger: logger)
    }

    /// Return PaginatorSequence for operation ``listPermissions(_:logger:)``.
    ///
    /// - Parameters:
    ///   - input: Input for operation
    ///   - logger: Logger used for logging
    @inlinable
    public func listPermissionsPaginator(
        _ input: ListPermissionsRequest,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<ListPermissionsRequest, ListPermissionsResponse> {
        return .init(
            input: input,
            command: self.listPermissions,
            inputKey: \ListPermissionsRequest.nextToken,
            outputKey: \ListPermissionsResponse.nextToken,
            logger: logger
        )
    }
    /// Return PaginatorSequence for operation ``listPermissions(_:logger:)``.
    ///
    /// - Parameters:
    ///   - catalogId: The identifier for the Data Catalog. By default, the account ID. The Data Catalog is the persistent metadata store. It contains database definitions, table definitions, and other control information to manage your Lake Formation environment.
    ///   - includeRelated: Indicates that related permissions should be included in the results.
    ///   - maxResults: The maximum number of results to return.
    ///   - principal: Specifies a principal to filter the permissions returned.
    ///   - resource: A resource where you will get a list of the principal permissions. This operation does not support getting privileges on a table with columns. Instead, call this operation on the table, and the operation returns the table and the table w columns.
    ///   - resourceType: Specifies a resource type to filter the permissions returned.
    ///   - logger: Logger used for logging
    @inlinable
    public func listPermissionsPaginator(
        catalogId: String? = nil,
        includeRelated: String? = nil,
        maxResults: Int? = nil,
        principal: DataLakePrincipal? = nil,
        resource: Resource? = nil,
        resourceType: DataLakeResourceType? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) -> AWSClient.PaginatorSequence<ListPermissionsRequest, ListPermissionsResponse> {
        let input = ListPermissionsRequest(
            catalogId: catalogId, 
            includeRelated: includeRelated, 
            maxResults: maxResults, 
            principal: principal, 
            resource: resource, 
            resourceType: resourceType
        )
        return self.listPermissionsPaginator(input, logger: logger)
    }

    /// Return PaginatorSequence for operation ``listResources(_:logger:)``.
    ///
    /// - Parameters:
    ///   - input: Input for operation
    ///   - logger: Logger used for logging
    @inlinable
    public func listResourcesPaginator(
        _ input: ListResourcesRequest,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<ListResourcesRequest, ListResourcesResponse> {
        return .init(
            input: input,
            command: self.listResources,
            inputKey: \ListResourcesRequest.nextToken,
            outputKey: \ListResourcesResponse.nextToken,
            logger: logger
        )
    }
    /// Return PaginatorSequence for operation ``listResources(_:logger:)``.
    ///
    /// - Parameters:
    ///   - filterConditionList: Any applicable row-level and/or column-level filtering conditions for the resources.
    ///   - maxResults: The maximum number of resource results.
    ///   - logger: Logger used for logging
    @inlinable
    public func listResourcesPaginator(
        filterConditionList: [FilterCondition]? = nil,
        maxResults: Int? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) -> AWSClient.PaginatorSequence<ListResourcesRequest, ListResourcesResponse> {
        let input = ListResourcesRequest(
            filterConditionList: filterConditionList, 
            maxResults: maxResults
        )
        return self.listResourcesPaginator(input, logger: logger)
    }

    /// Return PaginatorSequence for operation ``listTableStorageOptimizers(_:logger:)``.
    ///
    /// - Parameters:
    ///   - input: Input for operation
    ///   - logger: Logger used for logging
    @inlinable
    public func listTableStorageOptimizersPaginator(
        _ input: ListTableStorageOptimizersRequest,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<ListTableStorageOptimizersRequest, ListTableStorageOptimizersResponse> {
        return .init(
            input: input,
            command: self.listTableStorageOptimizers,
            inputKey: \ListTableStorageOptimizersRequest.nextToken,
            outputKey: \ListTableStorageOptimizersResponse.nextToken,
            logger: logger
        )
    }
    /// Return PaginatorSequence for operation ``listTableStorageOptimizers(_:logger:)``.
    ///
    /// - Parameters:
    ///   - catalogId: The Catalog ID of the table.
    ///   - databaseName: Name of the database where the table is present.
    ///   - maxResults: The number of storage optimizers to return on each call.
    ///   - storageOptimizerType: The specific type of storage optimizers to list. The supported value is compaction.
    ///   - tableName: Name of the table.
    ///   - logger: Logger used for logging
    @inlinable
    public func listTableStorageOptimizersPaginator(
        catalogId: String? = nil,
        databaseName: String,
        maxResults: Int? = nil,
        storageOptimizerType: OptimizerType? = nil,
        tableName: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) -> AWSClient.PaginatorSequence<ListTableStorageOptimizersRequest, ListTableStorageOptimizersResponse> {
        let input = ListTableStorageOptimizersRequest(
            catalogId: catalogId, 
            databaseName: databaseName, 
            maxResults: maxResults, 
            storageOptimizerType: storageOptimizerType, 
            tableName: tableName
        )
        return self.listTableStorageOptimizersPaginator(input, logger: logger)
    }

    /// Return PaginatorSequence for operation ``listTransactions(_:logger:)``.
    ///
    /// - Parameters:
    ///   - input: Input for operation
    ///   - logger: Logger used for logging
    @inlinable
    public func listTransactionsPaginator(
        _ input: ListTransactionsRequest,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<ListTransactionsRequest, ListTransactionsResponse> {
        return .init(
            input: input,
            command: self.listTransactions,
            inputKey: \ListTransactionsRequest.nextToken,
            outputKey: \ListTransactionsResponse.nextToken,
            logger: logger
        )
    }
    /// Return PaginatorSequence for operation ``listTransactions(_:logger:)``.
    ///
    /// - Parameters:
    ///   - catalogId: The catalog for which to list transactions. Defaults to the account ID of the caller.
    ///   - maxResults: The maximum number of transactions to return in a single call.
    ///   - statusFilter:  A filter indicating the status of transactions to return. Options are ALL | COMPLETED | COMMITTED | ABORTED | ACTIVE. The default is ALL.
    ///   - logger: Logger used for logging
    @inlinable
    public func listTransactionsPaginator(
        catalogId: String? = nil,
        maxResults: Int? = nil,
        statusFilter: TransactionStatusFilter? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) -> AWSClient.PaginatorSequence<ListTransactionsRequest, ListTransactionsResponse> {
        let input = ListTransactionsRequest(
            catalogId: catalogId, 
            maxResults: maxResults, 
            statusFilter: statusFilter
        )
        return self.listTransactionsPaginator(input, logger: logger)
    }

    /// Return PaginatorSequence for operation ``searchDatabasesByLFTags(_:logger:)``.
    ///
    /// - Parameters:
    ///   - input: Input for operation
    ///   - logger: Logger used for logging
    @inlinable
    public func searchDatabasesByLFTagsPaginator(
        _ input: SearchDatabasesByLFTagsRequest,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<SearchDatabasesByLFTagsRequest, SearchDatabasesByLFTagsResponse> {
        return .init(
            input: input,
            command: self.searchDatabasesByLFTags,
            inputKey: \SearchDatabasesByLFTagsRequest.nextToken,
            outputKey: \SearchDatabasesByLFTagsResponse.nextToken,
            logger: logger
        )
    }
    /// Return PaginatorSequence for operation ``searchDatabasesByLFTags(_:logger:)``.
    ///
    /// - Parameters:
    ///   - catalogId: The identifier for the Data Catalog. By default, the account ID. The Data Catalog is the persistent metadata store. It contains database definitions, table definitions, and other control information to manage your Lake Formation environment.
    ///   - expression: A list of conditions (LFTag structures) to search for in database resources.
    ///   - maxResults: The maximum number of results to return.
    ///   - logger: Logger used for logging
    @inlinable
    public func searchDatabasesByLFTagsPaginator(
        catalogId: String? = nil,
        expression: [LFTag],
        maxResults: Int? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) -> AWSClient.PaginatorSequence<SearchDatabasesByLFTagsRequest, SearchDatabasesByLFTagsResponse> {
        let input = SearchDatabasesByLFTagsRequest(
            catalogId: catalogId, 
            expression: expression, 
            maxResults: maxResults
        )
        return self.searchDatabasesByLFTagsPaginator(input, logger: logger)
    }

    /// Return PaginatorSequence for operation ``searchTablesByLFTags(_:logger:)``.
    ///
    /// - Parameters:
    ///   - input: Input for operation
    ///   - logger: Logger used for logging
    @inlinable
    public func searchTablesByLFTagsPaginator(
        _ input: SearchTablesByLFTagsRequest,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<SearchTablesByLFTagsRequest, SearchTablesByLFTagsResponse> {
        return .init(
            input: input,
            command: self.searchTablesByLFTags,
            inputKey: \SearchTablesByLFTagsRequest.nextToken,
            outputKey: \SearchTablesByLFTagsResponse.nextToken,
            logger: logger
        )
    }
    /// Return PaginatorSequence for operation ``searchTablesByLFTags(_:logger:)``.
    ///
    /// - Parameters:
    ///   - catalogId: The identifier for the Data Catalog. By default, the account ID. The Data Catalog is the persistent metadata store. It contains database definitions, table definitions, and other control information to manage your Lake Formation environment.
    ///   - expression: A list of conditions (LFTag structures) to search for in table resources.
    ///   - maxResults: The maximum number of results to return.
    ///   - logger: Logger used for logging
    @inlinable
    public func searchTablesByLFTagsPaginator(
        catalogId: String? = nil,
        expression: [LFTag],
        maxResults: Int? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) -> AWSClient.PaginatorSequence<SearchTablesByLFTagsRequest, SearchTablesByLFTagsResponse> {
        let input = SearchTablesByLFTagsRequest(
            catalogId: catalogId, 
            expression: expression, 
            maxResults: maxResults
        )
        return self.searchTablesByLFTagsPaginator(input, logger: logger)
    }
}

extension LakeFormation.GetEffectivePermissionsForPathRequest: AWSPaginateToken {
    @inlinable
    public func usingPaginationToken(_ token: String) -> LakeFormation.GetEffectivePermissionsForPathRequest {
        return .init(
            catalogId: self.catalogId,
            maxResults: self.maxResults,
            nextToken: token,
            resourceArn: self.resourceArn
        )
    }
}

extension LakeFormation.GetTableObjectsRequest: AWSPaginateToken {
    @inlinable
    public func usingPaginationToken(_ token: String) -> LakeFormation.GetTableObjectsRequest {
        return .init(
            catalogId: self.catalogId,
            databaseName: self.databaseName,
            maxResults: self.maxResults,
            nextToken: token,
            partitionPredicate: self.partitionPredicate,
            queryAsOfTime: self.queryAsOfTime,
            tableName: self.tableName,
            transactionId: self.transactionId
        )
    }
}

extension LakeFormation.GetWorkUnitsRequest: AWSPaginateToken {
    @inlinable
    public func usingPaginationToken(_ token: String) -> LakeFormation.GetWorkUnitsRequest {
        return .init(
            nextToken: token,
            pageSize: self.pageSize,
            queryId: self.queryId
        )
    }
}

extension LakeFormation.ListDataCellsFilterRequest: AWSPaginateToken {
    @inlinable
    public func usingPaginationToken(_ token: String) -> LakeFormation.ListDataCellsFilterRequest {
        return .init(
            maxResults: self.maxResults,
            nextToken: token,
            table: self.table
        )
    }
}

extension LakeFormation.ListLFTagExpressionsRequest: AWSPaginateToken {
    @inlinable
    public func usingPaginationToken(_ token: String) -> LakeFormation.ListLFTagExpressionsRequest {
        return .init(
            catalogId: self.catalogId,
            maxResults: self.maxResults,
            nextToken: token
        )
    }
}

extension LakeFormation.ListLFTagsRequest: AWSPaginateToken {
    @inlinable
    public func usingPaginationToken(_ token: String) -> LakeFormation.ListLFTagsRequest {
        return .init(
            catalogId: self.catalogId,
            maxResults: self.maxResults,
            nextToken: token,
            resourceShareType: self.resourceShareType
        )
    }
}

extension LakeFormation.ListLakeFormationOptInsRequest: AWSPaginateToken {
    @inlinable
    public func usingPaginationToken(_ token: String) -> LakeFormation.ListLakeFormationOptInsRequest {
        return .init(
            maxResults: self.maxResults,
            nextToken: token,
            principal: self.principal,
            resource: self.resource
        )
    }
}

extension LakeFormation.ListPermissionsRequest: AWSPaginateToken {
    @inlinable
    public func usingPaginationToken(_ token: String) -> LakeFormation.ListPermissionsRequest {
        return .init(
            catalogId: self.catalogId,
            includeRelated: self.includeRelated,
            maxResults: self.maxResults,
            nextToken: token,
            principal: self.principal,
            resource: self.resource,
            resourceType: self.resourceType
        )
    }
}

extension LakeFormation.ListResourcesRequest: AWSPaginateToken {
    @inlinable
    public func usingPaginationToken(_ token: String) -> LakeFormation.ListResourcesRequest {
        return .init(
            filterConditionList: self.filterConditionList,
            maxResults: self.maxResults,
            nextToken: token
        )
    }
}

extension LakeFormation.ListTableStorageOptimizersRequest: AWSPaginateToken {
    @inlinable
    public func usingPaginationToken(_ token: String) -> LakeFormation.ListTableStorageOptimizersRequest {
        return .init(
            catalogId: self.catalogId,
            databaseName: self.databaseName,
            maxResults: self.maxResults,
            nextToken: token,
            storageOptimizerType: self.storageOptimizerType,
            tableName: self.tableName
        )
    }
}

extension LakeFormation.ListTransactionsRequest: AWSPaginateToken {
    @inlinable
    public func usingPaginationToken(_ token: String) -> LakeFormation.ListTransactionsRequest {
        return .init(
            catalogId: self.catalogId,
            maxResults: self.maxResults,
            nextToken: token,
            statusFilter: self.statusFilter
        )
    }
}

extension LakeFormation.SearchDatabasesByLFTagsRequest: AWSPaginateToken {
    @inlinable
    public func usingPaginationToken(_ token: String) -> LakeFormation.SearchDatabasesByLFTagsRequest {
        return .init(
            catalogId: self.catalogId,
            expression: self.expression,
            maxResults: self.maxResults,
            nextToken: token
        )
    }
}

extension LakeFormation.SearchTablesByLFTagsRequest: AWSPaginateToken {
    @inlinable
    public func usingPaginationToken(_ token: String) -> LakeFormation.SearchTablesByLFTagsRequest {
        return .init(
            catalogId: self.catalogId,
            expression: self.expression,
            maxResults: self.maxResults,
            nextToken: token
        )
    }
}
