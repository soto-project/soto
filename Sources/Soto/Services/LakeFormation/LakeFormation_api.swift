//===----------------------------------------------------------------------===//
//
// This source file is part of the Soto for AWS open source project
//
// Copyright (c) 2017-2023 the Soto project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
// See CONTRIBUTORS.txt for the list of Soto project authors
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by https://github.com/soto-project/soto-codegenerator.
// DO NOT EDIT.

@_exported import SotoCore

/// Service object for interacting with AWS LakeFormation service.
///
/// Lake Formation Defines the public endpoint for the Lake Formation service.
public struct LakeFormation: AWSService {
    // MARK: Member variables

    /// Client used for communication with AWS
    public let client: AWSClient
    /// Service configuration
    public let config: AWSServiceConfig

    // MARK: Initialization

    /// Initialize the LakeFormation client
    /// - parameters:
    ///     - client: AWSClient used to process requests
    ///     - region: Region of server you want to communicate with. This will override the partition parameter.
    ///     - partition: AWS partition where service resides, standard (.aws), china (.awscn), government (.awsusgov).
    ///     - endpoint: Custom endpoint URL to use instead of standard AWS servers
    ///     - middleware: Middleware chain used to edit requests before they are sent and responses before they are decoded 
    ///     - timeout: Timeout value for HTTP requests
    ///     - byteBufferAllocator: Allocator for ByteBuffers
    ///     - options: Service options
    public init(
        client: AWSClient,
        region: SotoCore.Region? = nil,
        partition: AWSPartition = .aws,
        endpoint: String? = nil,
        middleware: AWSMiddlewareProtocol? = nil,
        timeout: TimeAmount? = nil,
        byteBufferAllocator: ByteBufferAllocator = ByteBufferAllocator(),
        options: AWSServiceConfig.Options = []
    ) {
        self.client = client
        self.config = AWSServiceConfig(
            region: region,
            partition: region?.partition ?? partition,
            serviceName: "LakeFormation",
            serviceIdentifier: "lakeformation",
            serviceProtocol: .restjson,
            apiVersion: "2017-03-31",
            endpoint: endpoint,
            variantEndpoints: Self.variantEndpoints,
            errorType: LakeFormationErrorType.self,
            middleware: middleware,
            timeout: timeout,
            byteBufferAllocator: byteBufferAllocator,
            options: options
        )
    }




    /// FIPS and dualstack endpoints
    static var variantEndpoints: [EndpointVariantType: AWSServiceConfig.EndpointVariant] {[
        [.fips]: .init(endpoints: [
            "us-east-1": "lakeformation-fips.us-east-1.amazonaws.com",
            "us-east-2": "lakeformation-fips.us-east-2.amazonaws.com",
            "us-gov-east-1": "lakeformation-fips.us-gov-east-1.amazonaws.com",
            "us-gov-west-1": "lakeformation-fips.us-gov-west-1.amazonaws.com",
            "us-west-1": "lakeformation-fips.us-west-1.amazonaws.com",
            "us-west-2": "lakeformation-fips.us-west-2.amazonaws.com"
        ])
    ]}

    // MARK: API Calls

    /// Attaches one or more LF-tags to an existing resource.
    @Sendable
    public func addLFTagsToResource(_ input: AddLFTagsToResourceRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> AddLFTagsToResourceResponse {
        return try await self.client.execute(
            operation: "AddLFTagsToResource", 
            path: "/AddLFTagsToResource", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Allows a caller to assume an IAM role decorated as the SAML user specified in the SAML assertion included in the request. This decoration allows Lake Formation to enforce access policies against the SAML users and groups.  This API operation requires SAML federation setup in the callerâ€™s account as it can only be called with valid SAML assertions. Lake Formation does not scope down the permission of the assumed role.  All permissions attached to the role via the SAML federation setup will be included in the role session.   This decorated role is expected to access data in Amazon S3 by getting temporary access from Lake Formation which is authorized via the virtual API GetDataAccess.  Therefore, all SAML roles that can be assumed via AssumeDecoratedRoleWithSAML must at a minimum include lakeformation:GetDataAccess in their role policies.  A typical IAM policy attached to such a role would look as follows:
    @Sendable
    public func assumeDecoratedRoleWithSAML(_ input: AssumeDecoratedRoleWithSAMLRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> AssumeDecoratedRoleWithSAMLResponse {
        return try await self.client.execute(
            operation: "AssumeDecoratedRoleWithSAML", 
            path: "/AssumeDecoratedRoleWithSAML", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Batch operation to grant permissions to the principal.
    @Sendable
    public func batchGrantPermissions(_ input: BatchGrantPermissionsRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> BatchGrantPermissionsResponse {
        return try await self.client.execute(
            operation: "BatchGrantPermissions", 
            path: "/BatchGrantPermissions", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Batch operation to revoke permissions from the principal.
    @Sendable
    public func batchRevokePermissions(_ input: BatchRevokePermissionsRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> BatchRevokePermissionsResponse {
        return try await self.client.execute(
            operation: "BatchRevokePermissions", 
            path: "/BatchRevokePermissions", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Attempts to cancel the specified transaction. Returns an exception if the transaction was previously committed.
    @Sendable
    public func cancelTransaction(_ input: CancelTransactionRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> CancelTransactionResponse {
        return try await self.client.execute(
            operation: "CancelTransaction", 
            path: "/CancelTransaction", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Attempts to commit the specified transaction. Returns an exception if the transaction was previously aborted. This API action is idempotent if called multiple times for the same transaction.
    @Sendable
    public func commitTransaction(_ input: CommitTransactionRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> CommitTransactionResponse {
        return try await self.client.execute(
            operation: "CommitTransaction", 
            path: "/CommitTransaction", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Creates a data cell filter to allow one to grant access to certain columns on certain rows.
    @Sendable
    public func createDataCellsFilter(_ input: CreateDataCellsFilterRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> CreateDataCellsFilterResponse {
        return try await self.client.execute(
            operation: "CreateDataCellsFilter", 
            path: "/CreateDataCellsFilter", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Creates an LF-tag with the specified name and values.
    @Sendable
    public func createLFTag(_ input: CreateLFTagRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> CreateLFTagResponse {
        return try await self.client.execute(
            operation: "CreateLFTag", 
            path: "/CreateLFTag", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Deletes a data cell filter.
    @Sendable
    public func deleteDataCellsFilter(_ input: DeleteDataCellsFilterRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DeleteDataCellsFilterResponse {
        return try await self.client.execute(
            operation: "DeleteDataCellsFilter", 
            path: "/DeleteDataCellsFilter", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Deletes the specified LF-tag given a key name. If the input parameter tag key was not found, then the operation will throw an exception. When you delete an LF-tag, the LFTagPolicy attached to the LF-tag becomes invalid. If the deleted LF-tag was still assigned to any resource, the tag policy attach to the deleted LF-tag will no longer be applied to the resource.
    @Sendable
    public func deleteLFTag(_ input: DeleteLFTagRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DeleteLFTagResponse {
        return try await self.client.execute(
            operation: "DeleteLFTag", 
            path: "/DeleteLFTag", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// For a specific governed table, provides a list of Amazon S3 objects that will be written during the current transaction and that can be automatically deleted if the transaction is canceled. Without this call, no Amazon S3 objects are automatically deleted when a transaction cancels.   The Glue ETL library function write_dynamic_frame.from_catalog() includes an option to automatically  call DeleteObjectsOnCancel before writes. For more information, see  Rolling Back Amazon S3 Writes.
    @Sendable
    public func deleteObjectsOnCancel(_ input: DeleteObjectsOnCancelRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DeleteObjectsOnCancelResponse {
        return try await self.client.execute(
            operation: "DeleteObjectsOnCancel", 
            path: "/DeleteObjectsOnCancel", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Deregisters the resource as managed by the Data Catalog. When you deregister a path, Lake Formation removes the path from the inline policy attached to your service-linked role.
    @Sendable
    public func deregisterResource(_ input: DeregisterResourceRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DeregisterResourceResponse {
        return try await self.client.execute(
            operation: "DeregisterResource", 
            path: "/DeregisterResource", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Retrieves the current data access role for the given resource registered in Lake Formation.
    @Sendable
    public func describeResource(_ input: DescribeResourceRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DescribeResourceResponse {
        return try await self.client.execute(
            operation: "DescribeResource", 
            path: "/DescribeResource", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Returns the details of a single transaction.
    @Sendable
    public func describeTransaction(_ input: DescribeTransactionRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DescribeTransactionResponse {
        return try await self.client.execute(
            operation: "DescribeTransaction", 
            path: "/DescribeTransaction", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Indicates to the service that the specified transaction is still active and should not be treated as idle and aborted. Write transactions that remain idle for a long period are automatically aborted unless explicitly extended.
    @Sendable
    public func extendTransaction(_ input: ExtendTransactionRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> ExtendTransactionResponse {
        return try await self.client.execute(
            operation: "ExtendTransaction", 
            path: "/ExtendTransaction", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Returns a data cells filter.
    @Sendable
    public func getDataCellsFilter(_ input: GetDataCellsFilterRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> GetDataCellsFilterResponse {
        return try await self.client.execute(
            operation: "GetDataCellsFilter", 
            path: "/GetDataCellsFilter", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Retrieves the list of the data lake administrators of a Lake Formation-managed data lake.
    @Sendable
    public func getDataLakeSettings(_ input: GetDataLakeSettingsRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> GetDataLakeSettingsResponse {
        return try await self.client.execute(
            operation: "GetDataLakeSettings", 
            path: "/GetDataLakeSettings", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Returns the Lake Formation permissions for a specified table or database resource located at a path in Amazon S3. GetEffectivePermissionsForPath will not return databases and tables if the catalog is encrypted.
    @Sendable
    public func getEffectivePermissionsForPath(_ input: GetEffectivePermissionsForPathRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> GetEffectivePermissionsForPathResponse {
        return try await self.client.execute(
            operation: "GetEffectivePermissionsForPath", 
            path: "/GetEffectivePermissionsForPath", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Returns an LF-tag definition.
    @Sendable
    public func getLFTag(_ input: GetLFTagRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> GetLFTagResponse {
        return try await self.client.execute(
            operation: "GetLFTag", 
            path: "/GetLFTag", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Returns the state of a query previously submitted. Clients are expected to poll GetQueryState to monitor the current state of the planning before retrieving the work units. A query state is only visible to the principal that made the initial call to StartQueryPlanning.
    @Sendable
    public func getQueryState(_ input: GetQueryStateRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> GetQueryStateResponse {
        return try await self.client.execute(
            operation: "GetQueryState", 
            path: "/GetQueryState", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            hostPrefix: "query-", 
            logger: logger
        )
    }

    /// Retrieves statistics on the planning and execution of a query.
    @Sendable
    public func getQueryStatistics(_ input: GetQueryStatisticsRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> GetQueryStatisticsResponse {
        return try await self.client.execute(
            operation: "GetQueryStatistics", 
            path: "/GetQueryStatistics", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            hostPrefix: "query-", 
            logger: logger
        )
    }

    /// Returns the LF-tags applied to a resource.
    @Sendable
    public func getResourceLFTags(_ input: GetResourceLFTagsRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> GetResourceLFTagsResponse {
        return try await self.client.execute(
            operation: "GetResourceLFTags", 
            path: "/GetResourceLFTags", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Returns the set of Amazon S3 objects that make up the specified governed table. A transaction ID or timestamp can be specified for time-travel queries.
    @Sendable
    public func getTableObjects(_ input: GetTableObjectsRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> GetTableObjectsResponse {
        return try await self.client.execute(
            operation: "GetTableObjects", 
            path: "/GetTableObjects", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// This API is identical to GetTemporaryTableCredentials except that this is used when the target Data Catalog resource is of type Partition.  Lake Formation restricts the permission of the vended credentials with the same scope down policy which restricts access to a single Amazon S3 prefix.
    @Sendable
    public func getTemporaryGluePartitionCredentials(_ input: GetTemporaryGluePartitionCredentialsRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> GetTemporaryGluePartitionCredentialsResponse {
        return try await self.client.execute(
            operation: "GetTemporaryGluePartitionCredentials", 
            path: "/GetTemporaryGluePartitionCredentials", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Allows a caller in a secure environment to assume a role with permission to access Amazon S3. In order to vend such credentials, Lake Formation assumes the role associated with a registered location, for example an Amazon S3 bucket, with a scope down policy which restricts the access to a single prefix.
    @Sendable
    public func getTemporaryGlueTableCredentials(_ input: GetTemporaryGlueTableCredentialsRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> GetTemporaryGlueTableCredentialsResponse {
        return try await self.client.execute(
            operation: "GetTemporaryGlueTableCredentials", 
            path: "/GetTemporaryGlueTableCredentials", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Returns the work units resulting from the query. Work units can be executed in any order and in parallel.
    @Sendable
    public func getWorkUnitResults(_ input: GetWorkUnitResultsRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> GetWorkUnitResultsResponse {
        return try await self.client.execute(
            operation: "GetWorkUnitResults", 
            path: "/GetWorkUnitResults", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            hostPrefix: "data-", 
            logger: logger
        )
    }

    /// Retrieves the work units generated by the StartQueryPlanning operation.
    @Sendable
    public func getWorkUnits(_ input: GetWorkUnitsRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> GetWorkUnitsResponse {
        return try await self.client.execute(
            operation: "GetWorkUnits", 
            path: "/GetWorkUnits", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            hostPrefix: "query-", 
            logger: logger
        )
    }

    /// Grants permissions to the principal to access metadata in the Data Catalog and data organized in underlying data storage such as Amazon S3. For information about permissions, see Security and Access Control to Metadata and Data.
    @Sendable
    public func grantPermissions(_ input: GrantPermissionsRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> GrantPermissionsResponse {
        return try await self.client.execute(
            operation: "GrantPermissions", 
            path: "/GrantPermissions", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Lists all the data cell filters on a table.
    @Sendable
    public func listDataCellsFilter(_ input: ListDataCellsFilterRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> ListDataCellsFilterResponse {
        return try await self.client.execute(
            operation: "ListDataCellsFilter", 
            path: "/ListDataCellsFilter", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Lists LF-tags that the requester has permission to view.
    @Sendable
    public func listLFTags(_ input: ListLFTagsRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> ListLFTagsResponse {
        return try await self.client.execute(
            operation: "ListLFTags", 
            path: "/ListLFTags", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Returns a list of the principal permissions on the resource, filtered by the permissions of the caller. For example, if you are granted an ALTER permission, you are able to see only the principal permissions for ALTER. This operation returns only those permissions that have been explicitly granted. For information about permissions, see Security and Access Control to Metadata and Data.
    @Sendable
    public func listPermissions(_ input: ListPermissionsRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> ListPermissionsResponse {
        return try await self.client.execute(
            operation: "ListPermissions", 
            path: "/ListPermissions", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Lists the resources registered to be managed by the Data Catalog.
    @Sendable
    public func listResources(_ input: ListResourcesRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> ListResourcesResponse {
        return try await self.client.execute(
            operation: "ListResources", 
            path: "/ListResources", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Returns the configuration of all storage optimizers associated with a specified table.
    @Sendable
    public func listTableStorageOptimizers(_ input: ListTableStorageOptimizersRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> ListTableStorageOptimizersResponse {
        return try await self.client.execute(
            operation: "ListTableStorageOptimizers", 
            path: "/ListTableStorageOptimizers", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Returns metadata about transactions and their status. To prevent the response from growing indefinitely, only uncommitted transactions and those available for time-travel queries are returned. This operation can help you identify uncommitted transactions or to get information about transactions.
    @Sendable
    public func listTransactions(_ input: ListTransactionsRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> ListTransactionsResponse {
        return try await self.client.execute(
            operation: "ListTransactions", 
            path: "/ListTransactions", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Sets the list of data lake administrators who have admin privileges on all resources managed by Lake Formation. For more information on admin privileges, see Granting Lake Formation Permissions. This API replaces the current list of data lake admins with the new list being passed. To add an admin, fetch the current list and add the new admin to that list and pass that list in this API.
    @Sendable
    public func putDataLakeSettings(_ input: PutDataLakeSettingsRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> PutDataLakeSettingsResponse {
        return try await self.client.execute(
            operation: "PutDataLakeSettings", 
            path: "/PutDataLakeSettings", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Registers the resource as managed by the Data Catalog. To add or update data, Lake Formation needs read/write access to the chosen Amazon S3 path. Choose a role that you know has permission to do this, or choose the AWSServiceRoleForLakeFormationDataAccess service-linked role. When you register the first Amazon S3 path, the service-linked role and a new inline policy are created on your behalf. Lake Formation adds the first path to the inline policy and attaches it to the service-linked role. When you register subsequent paths, Lake Formation adds the path to the existing policy. The following request registers a new location and gives Lake Formation permission to use the service-linked role to access that location.  ResourceArn = arn:aws:s3:::my-bucket
    /// UseServiceLinkedRole = true  If UseServiceLinkedRole is not set to true, you must provide or set the RoleArn:  arn:aws:iam::12345:role/my-data-access-role
    @Sendable
    public func registerResource(_ input: RegisterResourceRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> RegisterResourceResponse {
        return try await self.client.execute(
            operation: "RegisterResource", 
            path: "/RegisterResource", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Removes an LF-tag from the resource. Only database, table, or tableWithColumns resource are allowed. To tag columns, use the column inclusion list in tableWithColumns to specify column input.
    @Sendable
    public func removeLFTagsFromResource(_ input: RemoveLFTagsFromResourceRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> RemoveLFTagsFromResourceResponse {
        return try await self.client.execute(
            operation: "RemoveLFTagsFromResource", 
            path: "/RemoveLFTagsFromResource", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Revokes permissions to the principal to access metadata in the Data Catalog and data organized in underlying data storage such as Amazon S3.
    @Sendable
    public func revokePermissions(_ input: RevokePermissionsRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> RevokePermissionsResponse {
        return try await self.client.execute(
            operation: "RevokePermissions", 
            path: "/RevokePermissions", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// This operation allows a search on DATABASE resources by TagCondition. This operation is used by admins who want to grant user permissions on certain TagConditions. Before making a grant, the admin can use SearchDatabasesByTags to find all resources where the given TagConditions are valid to verify whether the returned resources can be shared.
    @Sendable
    public func searchDatabasesByLFTags(_ input: SearchDatabasesByLFTagsRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> SearchDatabasesByLFTagsResponse {
        return try await self.client.execute(
            operation: "SearchDatabasesByLFTags", 
            path: "/SearchDatabasesByLFTags", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// This operation allows a search on TABLE resources by LFTags. This will be used by admins who want to grant user permissions on certain LF-tags. Before making a grant, the admin can use SearchTablesByLFTags to find all resources where the given LFTags are valid to verify whether the returned resources can be shared.
    @Sendable
    public func searchTablesByLFTags(_ input: SearchTablesByLFTagsRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> SearchTablesByLFTagsResponse {
        return try await self.client.execute(
            operation: "SearchTablesByLFTags", 
            path: "/SearchTablesByLFTags", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Submits a request to process a query statement. This operation generates work units that can be retrieved with the GetWorkUnits operation as soon as the query state is WORKUNITS_AVAILABLE or FINISHED.
    @Sendable
    public func startQueryPlanning(_ input: StartQueryPlanningRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> StartQueryPlanningResponse {
        return try await self.client.execute(
            operation: "StartQueryPlanning", 
            path: "/StartQueryPlanning", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            hostPrefix: "query-", 
            logger: logger
        )
    }

    /// Starts a new transaction and returns its transaction ID. Transaction IDs are opaque objects that you can use to identify a transaction.
    @Sendable
    public func startTransaction(_ input: StartTransactionRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> StartTransactionResponse {
        return try await self.client.execute(
            operation: "StartTransaction", 
            path: "/StartTransaction", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Updates a data cell filter.
    @Sendable
    public func updateDataCellsFilter(_ input: UpdateDataCellsFilterRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> UpdateDataCellsFilterResponse {
        return try await self.client.execute(
            operation: "UpdateDataCellsFilter", 
            path: "/UpdateDataCellsFilter", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Updates the list of possible values for the specified LF-tag key. If the LF-tag does not exist, the operation throws an EntityNotFoundException. The values in the delete key values will be deleted from list of possible values. If any value in the delete key values is attached to a resource, then API errors out with a 400 Exception - "Update not allowed". Untag the attribute before deleting the LF-tag key's value.
    @Sendable
    public func updateLFTag(_ input: UpdateLFTagRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> UpdateLFTagResponse {
        return try await self.client.execute(
            operation: "UpdateLFTag", 
            path: "/UpdateLFTag", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Updates the data access role used for vending access to the given (registered) resource in Lake Formation.
    @Sendable
    public func updateResource(_ input: UpdateResourceRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> UpdateResourceResponse {
        return try await self.client.execute(
            operation: "UpdateResource", 
            path: "/UpdateResource", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Updates the manifest of Amazon S3 objects that make up the specified governed table.
    @Sendable
    public func updateTableObjects(_ input: UpdateTableObjectsRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> UpdateTableObjectsResponse {
        return try await self.client.execute(
            operation: "UpdateTableObjects", 
            path: "/UpdateTableObjects", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Updates the configuration of the storage optimizers for a table.
    @Sendable
    public func updateTableStorageOptimizer(_ input: UpdateTableStorageOptimizerRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> UpdateTableStorageOptimizerResponse {
        return try await self.client.execute(
            operation: "UpdateTableStorageOptimizer", 
            path: "/UpdateTableStorageOptimizer", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
}

extension LakeFormation {
    /// Initializer required by `AWSService.with(middlewares:timeout:byteBufferAllocator:options)`. You are not able to use this initializer directly as there are not public
    /// initializers for `AWSServiceConfig.Patch`. Please use `AWSService.with(middlewares:timeout:byteBufferAllocator:options)` instead.
    public init(from: LakeFormation, patch: AWSServiceConfig.Patch) {
        self.client = from.client
        self.config = from.config.with(patch: patch)
    }
}

// MARK: Paginators

@available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
extension LakeFormation {
    /// Returns the Lake Formation permissions for a specified table or database resource located at a path in Amazon S3. GetEffectivePermissionsForPath will not return databases and tables if the catalog is encrypted.
    /// Return PaginatorSequence for operation.
    ///
    /// - Parameters:
    ///   - input: Input for request
    ///   - logger: Logger used flot logging
    public func getEffectivePermissionsForPathPaginator(
        _ input: GetEffectivePermissionsForPathRequest,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<GetEffectivePermissionsForPathRequest, GetEffectivePermissionsForPathResponse> {
        return .init(
            input: input,
            command: self.getEffectivePermissionsForPath,
            inputKey: \GetEffectivePermissionsForPathRequest.nextToken,
            outputKey: \GetEffectivePermissionsForPathResponse.nextToken,
            logger: logger
        )
    }

    /// Returns the set of Amazon S3 objects that make up the specified governed table. A transaction ID or timestamp can be specified for time-travel queries.
    /// Return PaginatorSequence for operation.
    ///
    /// - Parameters:
    ///   - input: Input for request
    ///   - logger: Logger used flot logging
    public func getTableObjectsPaginator(
        _ input: GetTableObjectsRequest,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<GetTableObjectsRequest, GetTableObjectsResponse> {
        return .init(
            input: input,
            command: self.getTableObjects,
            inputKey: \GetTableObjectsRequest.nextToken,
            outputKey: \GetTableObjectsResponse.nextToken,
            logger: logger
        )
    }

    /// Retrieves the work units generated by the StartQueryPlanning operation.
    /// Return PaginatorSequence for operation.
    ///
    /// - Parameters:
    ///   - input: Input for request
    ///   - logger: Logger used flot logging
    public func getWorkUnitsPaginator(
        _ input: GetWorkUnitsRequest,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<GetWorkUnitsRequest, GetWorkUnitsResponse> {
        return .init(
            input: input,
            command: self.getWorkUnits,
            inputKey: \GetWorkUnitsRequest.nextToken,
            outputKey: \GetWorkUnitsResponse.nextToken,
            logger: logger
        )
    }

    /// Lists all the data cell filters on a table.
    /// Return PaginatorSequence for operation.
    ///
    /// - Parameters:
    ///   - input: Input for request
    ///   - logger: Logger used flot logging
    public func listDataCellsFilterPaginator(
        _ input: ListDataCellsFilterRequest,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<ListDataCellsFilterRequest, ListDataCellsFilterResponse> {
        return .init(
            input: input,
            command: self.listDataCellsFilter,
            inputKey: \ListDataCellsFilterRequest.nextToken,
            outputKey: \ListDataCellsFilterResponse.nextToken,
            logger: logger
        )
    }

    /// Lists LF-tags that the requester has permission to view.
    /// Return PaginatorSequence for operation.
    ///
    /// - Parameters:
    ///   - input: Input for request
    ///   - logger: Logger used flot logging
    public func listLFTagsPaginator(
        _ input: ListLFTagsRequest,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<ListLFTagsRequest, ListLFTagsResponse> {
        return .init(
            input: input,
            command: self.listLFTags,
            inputKey: \ListLFTagsRequest.nextToken,
            outputKey: \ListLFTagsResponse.nextToken,
            logger: logger
        )
    }

    /// Returns a list of the principal permissions on the resource, filtered by the permissions of the caller. For example, if you are granted an ALTER permission, you are able to see only the principal permissions for ALTER. This operation returns only those permissions that have been explicitly granted. For information about permissions, see Security and Access Control to Metadata and Data.
    /// Return PaginatorSequence for operation.
    ///
    /// - Parameters:
    ///   - input: Input for request
    ///   - logger: Logger used flot logging
    public func listPermissionsPaginator(
        _ input: ListPermissionsRequest,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<ListPermissionsRequest, ListPermissionsResponse> {
        return .init(
            input: input,
            command: self.listPermissions,
            inputKey: \ListPermissionsRequest.nextToken,
            outputKey: \ListPermissionsResponse.nextToken,
            logger: logger
        )
    }

    /// Lists the resources registered to be managed by the Data Catalog.
    /// Return PaginatorSequence for operation.
    ///
    /// - Parameters:
    ///   - input: Input for request
    ///   - logger: Logger used flot logging
    public func listResourcesPaginator(
        _ input: ListResourcesRequest,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<ListResourcesRequest, ListResourcesResponse> {
        return .init(
            input: input,
            command: self.listResources,
            inputKey: \ListResourcesRequest.nextToken,
            outputKey: \ListResourcesResponse.nextToken,
            logger: logger
        )
    }

    /// Returns the configuration of all storage optimizers associated with a specified table.
    /// Return PaginatorSequence for operation.
    ///
    /// - Parameters:
    ///   - input: Input for request
    ///   - logger: Logger used flot logging
    public func listTableStorageOptimizersPaginator(
        _ input: ListTableStorageOptimizersRequest,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<ListTableStorageOptimizersRequest, ListTableStorageOptimizersResponse> {
        return .init(
            input: input,
            command: self.listTableStorageOptimizers,
            inputKey: \ListTableStorageOptimizersRequest.nextToken,
            outputKey: \ListTableStorageOptimizersResponse.nextToken,
            logger: logger
        )
    }

    /// Returns metadata about transactions and their status. To prevent the response from growing indefinitely, only uncommitted transactions and those available for time-travel queries are returned. This operation can help you identify uncommitted transactions or to get information about transactions.
    /// Return PaginatorSequence for operation.
    ///
    /// - Parameters:
    ///   - input: Input for request
    ///   - logger: Logger used flot logging
    public func listTransactionsPaginator(
        _ input: ListTransactionsRequest,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<ListTransactionsRequest, ListTransactionsResponse> {
        return .init(
            input: input,
            command: self.listTransactions,
            inputKey: \ListTransactionsRequest.nextToken,
            outputKey: \ListTransactionsResponse.nextToken,
            logger: logger
        )
    }

    /// This operation allows a search on DATABASE resources by TagCondition. This operation is used by admins who want to grant user permissions on certain TagConditions. Before making a grant, the admin can use SearchDatabasesByTags to find all resources where the given TagConditions are valid to verify whether the returned resources can be shared.
    /// Return PaginatorSequence for operation.
    ///
    /// - Parameters:
    ///   - input: Input for request
    ///   - logger: Logger used flot logging
    public func searchDatabasesByLFTagsPaginator(
        _ input: SearchDatabasesByLFTagsRequest,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<SearchDatabasesByLFTagsRequest, SearchDatabasesByLFTagsResponse> {
        return .init(
            input: input,
            command: self.searchDatabasesByLFTags,
            inputKey: \SearchDatabasesByLFTagsRequest.nextToken,
            outputKey: \SearchDatabasesByLFTagsResponse.nextToken,
            logger: logger
        )
    }

    /// This operation allows a search on TABLE resources by LFTags. This will be used by admins who want to grant user permissions on certain LF-tags. Before making a grant, the admin can use SearchTablesByLFTags to find all resources where the given LFTags are valid to verify whether the returned resources can be shared.
    /// Return PaginatorSequence for operation.
    ///
    /// - Parameters:
    ///   - input: Input for request
    ///   - logger: Logger used flot logging
    public func searchTablesByLFTagsPaginator(
        _ input: SearchTablesByLFTagsRequest,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<SearchTablesByLFTagsRequest, SearchTablesByLFTagsResponse> {
        return .init(
            input: input,
            command: self.searchTablesByLFTags,
            inputKey: \SearchTablesByLFTagsRequest.nextToken,
            outputKey: \SearchTablesByLFTagsResponse.nextToken,
            logger: logger
        )
    }
}

extension LakeFormation.GetEffectivePermissionsForPathRequest: AWSPaginateToken {
    public func usingPaginationToken(_ token: String) -> LakeFormation.GetEffectivePermissionsForPathRequest {
        return .init(
            catalogId: self.catalogId,
            maxResults: self.maxResults,
            nextToken: token,
            resourceArn: self.resourceArn
        )
    }
}

extension LakeFormation.GetTableObjectsRequest: AWSPaginateToken {
    public func usingPaginationToken(_ token: String) -> LakeFormation.GetTableObjectsRequest {
        return .init(
            catalogId: self.catalogId,
            databaseName: self.databaseName,
            maxResults: self.maxResults,
            nextToken: token,
            partitionPredicate: self.partitionPredicate,
            queryAsOfTime: self.queryAsOfTime,
            tableName: self.tableName,
            transactionId: self.transactionId
        )
    }
}

extension LakeFormation.GetWorkUnitsRequest: AWSPaginateToken {
    public func usingPaginationToken(_ token: String) -> LakeFormation.GetWorkUnitsRequest {
        return .init(
            nextToken: token,
            pageSize: self.pageSize,
            queryId: self.queryId
        )
    }
}

extension LakeFormation.ListDataCellsFilterRequest: AWSPaginateToken {
    public func usingPaginationToken(_ token: String) -> LakeFormation.ListDataCellsFilterRequest {
        return .init(
            maxResults: self.maxResults,
            nextToken: token,
            table: self.table
        )
    }
}

extension LakeFormation.ListLFTagsRequest: AWSPaginateToken {
    public func usingPaginationToken(_ token: String) -> LakeFormation.ListLFTagsRequest {
        return .init(
            catalogId: self.catalogId,
            maxResults: self.maxResults,
            nextToken: token,
            resourceShareType: self.resourceShareType
        )
    }
}

extension LakeFormation.ListPermissionsRequest: AWSPaginateToken {
    public func usingPaginationToken(_ token: String) -> LakeFormation.ListPermissionsRequest {
        return .init(
            catalogId: self.catalogId,
            includeRelated: self.includeRelated,
            maxResults: self.maxResults,
            nextToken: token,
            principal: self.principal,
            resource: self.resource,
            resourceType: self.resourceType
        )
    }
}

extension LakeFormation.ListResourcesRequest: AWSPaginateToken {
    public func usingPaginationToken(_ token: String) -> LakeFormation.ListResourcesRequest {
        return .init(
            filterConditionList: self.filterConditionList,
            maxResults: self.maxResults,
            nextToken: token
        )
    }
}

extension LakeFormation.ListTableStorageOptimizersRequest: AWSPaginateToken {
    public func usingPaginationToken(_ token: String) -> LakeFormation.ListTableStorageOptimizersRequest {
        return .init(
            catalogId: self.catalogId,
            databaseName: self.databaseName,
            maxResults: self.maxResults,
            nextToken: token,
            storageOptimizerType: self.storageOptimizerType,
            tableName: self.tableName
        )
    }
}

extension LakeFormation.ListTransactionsRequest: AWSPaginateToken {
    public func usingPaginationToken(_ token: String) -> LakeFormation.ListTransactionsRequest {
        return .init(
            catalogId: self.catalogId,
            maxResults: self.maxResults,
            nextToken: token,
            statusFilter: self.statusFilter
        )
    }
}

extension LakeFormation.SearchDatabasesByLFTagsRequest: AWSPaginateToken {
    public func usingPaginationToken(_ token: String) -> LakeFormation.SearchDatabasesByLFTagsRequest {
        return .init(
            catalogId: self.catalogId,
            expression: self.expression,
            maxResults: self.maxResults,
            nextToken: token
        )
    }
}

extension LakeFormation.SearchTablesByLFTagsRequest: AWSPaginateToken {
    public func usingPaginationToken(_ token: String) -> LakeFormation.SearchTablesByLFTagsRequest {
        return .init(
            catalogId: self.catalogId,
            expression: self.expression,
            maxResults: self.maxResults,
            nextToken: token
        )
    }
}
