//===----------------------------------------------------------------------===//
//
// This source file is part of the Soto for AWS open source project
//
// Copyright (c) 2017-2023 the Soto project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
// See CONTRIBUTORS.txt for the list of Soto project authors
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by https://github.com/soto-project/soto-codegenerator.
// DO NOT EDIT.

import SotoCore

@available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
extension EntityResolution {
    // MARK: Async API Calls

    /// Creates a MatchingWorkflow object which stores the configuration of the data processing job  to be run.  It is important to note that there should not be a pre-existing MatchingWorkflow  with the same name. To modify an existing workflow, utilize the UpdateMatchingWorkflow API.
    public func createMatchingWorkflow(_ input: CreateMatchingWorkflowInput, logger: Logger = AWSClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> CreateMatchingWorkflowOutput {
        return try await self.client.execute(operation: "CreateMatchingWorkflow", path: "/matchingworkflows", httpMethod: .POST, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// Creates a schema mapping, which defines the schema of the input customer records table. The SchemaMapping also provides Entity Resolution with some metadata about the table, such as the attribute types of the columns and which columns to match on.
    public func createSchemaMapping(_ input: CreateSchemaMappingInput, logger: Logger = AWSClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> CreateSchemaMappingOutput {
        return try await self.client.execute(operation: "CreateSchemaMapping", path: "/schemas", httpMethod: .POST, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// Deletes the MatchingWorkflow with a given name. This operation will succeed even if a  workflow with the given name does not exist.
    public func deleteMatchingWorkflow(_ input: DeleteMatchingWorkflowInput, logger: Logger = AWSClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DeleteMatchingWorkflowOutput {
        return try await self.client.execute(operation: "DeleteMatchingWorkflow", path: "/matchingworkflows/{workflowName}", httpMethod: .DELETE, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// Deletes the SchemaMapping with a given name. This operation will succeed even if a schema  with the given name does not exist. This operation will fail if there is a DataIntegrationWorkflow  object that references the SchemaMapping in the workflow's InputSourceConfig.
    public func deleteSchemaMapping(_ input: DeleteSchemaMappingInput, logger: Logger = AWSClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DeleteSchemaMappingOutput {
        return try await self.client.execute(operation: "DeleteSchemaMapping", path: "/schemas/{schemaName}", httpMethod: .DELETE, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// Returns the corresponding Match ID of a customer record if the record has been processed.
    public func getMatchId(_ input: GetMatchIdInput, logger: Logger = AWSClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> GetMatchIdOutput {
        return try await self.client.execute(operation: "GetMatchId", path: "/matchingworkflows/{workflowName}/matches", httpMethod: .POST, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// Gets the status, metrics, and errors (if there are any) that are associated with a job.
    public func getMatchingJob(_ input: GetMatchingJobInput, logger: Logger = AWSClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> GetMatchingJobOutput {
        return try await self.client.execute(operation: "GetMatchingJob", path: "/matchingworkflows/{workflowName}/jobs/{jobId}", httpMethod: .GET, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// Returns the MatchingWorkflow with a given name, if it exists.
    public func getMatchingWorkflow(_ input: GetMatchingWorkflowInput, logger: Logger = AWSClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> GetMatchingWorkflowOutput {
        return try await self.client.execute(operation: "GetMatchingWorkflow", path: "/matchingworkflows/{workflowName}", httpMethod: .GET, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// Returns the SchemaMapping of a given name.
    public func getSchemaMapping(_ input: GetSchemaMappingInput, logger: Logger = AWSClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> GetSchemaMappingOutput {
        return try await self.client.execute(operation: "GetSchemaMapping", path: "/schemas/{schemaName}", httpMethod: .GET, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// Lists all jobs for a given workflow.
    public func listMatchingJobs(_ input: ListMatchingJobsInput, logger: Logger = AWSClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> ListMatchingJobsOutput {
        return try await self.client.execute(operation: "ListMatchingJobs", path: "/matchingworkflows/{workflowName}/jobs", httpMethod: .GET, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// Returns a list of all the MatchingWorkflows that have been created for an Amazon Web Services account.
    public func listMatchingWorkflows(_ input: ListMatchingWorkflowsInput, logger: Logger = AWSClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> ListMatchingWorkflowsOutput {
        return try await self.client.execute(operation: "ListMatchingWorkflows", path: "/matchingworkflows", httpMethod: .GET, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// Returns a list of all the SchemaMappings that have been created for an Amazon Web Services account.
    public func listSchemaMappings(_ input: ListSchemaMappingsInput, logger: Logger = AWSClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> ListSchemaMappingsOutput {
        return try await self.client.execute(operation: "ListSchemaMappings", path: "/schemas", httpMethod: .GET, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// Displays the tags associated with an Entity Resolution resource. In Entity Resolution, SchemaMapping, and MatchingWorkflow can be tagged.
    public func listTagsForResource(_ input: ListTagsForResourceInput, logger: Logger = AWSClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> ListTagsForResourceOutput {
        return try await self.client.execute(operation: "ListTagsForResource", path: "/tags/{resourceArn}", httpMethod: .GET, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// Starts the MatchingJob of a workflow. The workflow must have previously been created  using the CreateMatchingWorkflow endpoint.
    public func startMatchingJob(_ input: StartMatchingJobInput, logger: Logger = AWSClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> StartMatchingJobOutput {
        return try await self.client.execute(operation: "StartMatchingJob", path: "/matchingworkflows/{workflowName}/jobs", httpMethod: .POST, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// Assigns one or more tags (key-value pairs) to the specified Entity Resolution resource. Tags can help you organize and categorize your resources. You can also use them to scope user permissions by granting a user permission to access or change only resources with certain tag values. In Entity Resolution, SchemaMapping and MatchingWorkflow can be tagged. Tags don't have any semantic meaning to Amazon Web Services and are interpreted strictly as strings of characters. You can use the TagResource action with a resource that already has tags. If you specify a new tag key, this tag is appended to the list of tags associated with the resource. If you specify a tag key that is already associated with the resource, the new tag value that you specify replaces the previous value for that tag.
    public func tagResource(_ input: TagResourceInput, logger: Logger = AWSClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> TagResourceOutput {
        return try await self.client.execute(operation: "TagResource", path: "/tags/{resourceArn}", httpMethod: .POST, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// Removes one or more tags from the specified Entity Resolution resource. In Entity Resolution, SchemaMapping, and MatchingWorkflow can be tagged.
    public func untagResource(_ input: UntagResourceInput, logger: Logger = AWSClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> UntagResourceOutput {
        return try await self.client.execute(operation: "UntagResource", path: "/tags/{resourceArn}", httpMethod: .DELETE, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// Updates an existing MatchingWorkflow. This method is identical to  CreateMatchingWorkflow, except it uses an HTTP PUT request instead of  a POST request, and the MatchingWorkflow must already exist for the  method to succeed.
    public func updateMatchingWorkflow(_ input: UpdateMatchingWorkflowInput, logger: Logger = AWSClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> UpdateMatchingWorkflowOutput {
        return try await self.client.execute(operation: "UpdateMatchingWorkflow", path: "/matchingworkflows/{workflowName}", httpMethod: .PUT, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }
}

// MARK: Paginators

@available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
extension EntityResolution {
    /// Lists all jobs for a given workflow.
    /// Return PaginatorSequence for operation.
    ///
    /// - Parameters:
    ///   - input: Input for request
    ///   - logger: Logger used flot logging
    ///   - eventLoop: EventLoop to run this process on
    public func listMatchingJobsPaginator(
        _ input: ListMatchingJobsInput,
        logger: Logger = AWSClient.loggingDisabled,
        on eventLoop: EventLoop? = nil
    ) -> AWSClient.PaginatorSequence<ListMatchingJobsInput, ListMatchingJobsOutput> {
        return .init(
            input: input,
            command: self.listMatchingJobs,
            inputKey: \ListMatchingJobsInput.nextToken,
            outputKey: \ListMatchingJobsOutput.nextToken,
            logger: logger,
            on: eventLoop
        )
    }

    /// Returns a list of all the MatchingWorkflows that have been created for an Amazon Web Services account.
    /// Return PaginatorSequence for operation.
    ///
    /// - Parameters:
    ///   - input: Input for request
    ///   - logger: Logger used flot logging
    ///   - eventLoop: EventLoop to run this process on
    public func listMatchingWorkflowsPaginator(
        _ input: ListMatchingWorkflowsInput,
        logger: Logger = AWSClient.loggingDisabled,
        on eventLoop: EventLoop? = nil
    ) -> AWSClient.PaginatorSequence<ListMatchingWorkflowsInput, ListMatchingWorkflowsOutput> {
        return .init(
            input: input,
            command: self.listMatchingWorkflows,
            inputKey: \ListMatchingWorkflowsInput.nextToken,
            outputKey: \ListMatchingWorkflowsOutput.nextToken,
            logger: logger,
            on: eventLoop
        )
    }

    /// Returns a list of all the SchemaMappings that have been created for an Amazon Web Services account.
    /// Return PaginatorSequence for operation.
    ///
    /// - Parameters:
    ///   - input: Input for request
    ///   - logger: Logger used flot logging
    ///   - eventLoop: EventLoop to run this process on
    public func listSchemaMappingsPaginator(
        _ input: ListSchemaMappingsInput,
        logger: Logger = AWSClient.loggingDisabled,
        on eventLoop: EventLoop? = nil
    ) -> AWSClient.PaginatorSequence<ListSchemaMappingsInput, ListSchemaMappingsOutput> {
        return .init(
            input: input,
            command: self.listSchemaMappings,
            inputKey: \ListSchemaMappingsInput.nextToken,
            outputKey: \ListSchemaMappingsOutput.nextToken,
            logger: logger,
            on: eventLoop
        )
    }
}
