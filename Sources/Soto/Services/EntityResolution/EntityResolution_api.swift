//===----------------------------------------------------------------------===//
//
// This source file is part of the Soto for AWS open source project
//
// Copyright (c) 2017-2024 the Soto project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
// See CONTRIBUTORS.txt for the list of Soto project authors
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by https://github.com/soto-project/soto-codegenerator.
// DO NOT EDIT.

@_exported import SotoCore

/// Service object for interacting with AWS EntityResolution service.
///
/// Welcome to the Entity Resolution API Reference. Entity Resolution is an Amazon Web Services service that provides pre-configured entity resolution capabilities that enable developers and analysts at advertising and marketing companies to build an accurate and complete view of their consumers. With Entity Resolution, you can match source records containing consumer identifiers, such as name, email address, and phone number. This is true even when these records have incomplete or conflicting identifiers. For example, Entity Resolution can effectively match a source record from a customer relationship management (CRM) system with a source record from a marketing system containing campaign information. To learn more about Entity Resolution concepts, procedures, and best practices, see the Entity Resolution User Guide.
public struct EntityResolution: AWSService {
    // MARK: Member variables

    /// Client used for communication with AWS
    public let client: AWSClient
    /// Service configuration
    public let config: AWSServiceConfig

    // MARK: Initialization

    /// Initialize the EntityResolution client
    /// - parameters:
    ///     - client: AWSClient used to process requests
    ///     - region: Region of server you want to communicate with. This will override the partition parameter.
    ///     - partition: AWS partition where service resides, standard (.aws), china (.awscn), government (.awsusgov).
    ///     - endpoint: Custom endpoint URL to use instead of standard AWS servers
    ///     - middleware: Middleware chain used to edit requests before they are sent and responses before they are decoded 
    ///     - timeout: Timeout value for HTTP requests
    ///     - byteBufferAllocator: Allocator for ByteBuffers
    ///     - options: Service options
    public init(
        client: AWSClient,
        region: SotoCore.Region? = nil,
        partition: AWSPartition = .aws,
        endpoint: String? = nil,
        middleware: AWSMiddlewareProtocol? = nil,
        timeout: TimeAmount? = nil,
        byteBufferAllocator: ByteBufferAllocator = ByteBufferAllocator(),
        options: AWSServiceConfig.Options = []
    ) {
        self.client = client
        self.config = AWSServiceConfig(
            region: region,
            partition: region?.partition ?? partition,
            serviceName: "EntityResolution",
            serviceIdentifier: "entityresolution",
            serviceProtocol: .restjson,
            apiVersion: "2018-05-10",
            endpoint: endpoint,
            errorType: EntityResolutionErrorType.self,
            middleware: middleware,
            timeout: timeout,
            byteBufferAllocator: byteBufferAllocator,
            options: options
        )
    }





    // MARK: API Calls

    /// Adds a policy statement object. To retrieve a list of existing policy statements, use the GetPolicy API.
    @Sendable
    public func addPolicyStatement(_ input: AddPolicyStatementInput, logger: Logger = AWSClient.loggingDisabled) async throws -> AddPolicyStatementOutput {
        return try await self.client.execute(
            operation: "AddPolicyStatement", 
            path: "/policies/{arn}/{statementId}", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Deletes multiple unique IDs in a matching workflow.
    @Sendable
    public func batchDeleteUniqueId(_ input: BatchDeleteUniqueIdInput, logger: Logger = AWSClient.loggingDisabled) async throws -> BatchDeleteUniqueIdOutput {
        return try await self.client.execute(
            operation: "BatchDeleteUniqueId", 
            path: "/matchingworkflows/{workflowName}/uniqueids", 
            httpMethod: .DELETE, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Creates an IdMappingWorkflow object which stores the configuration of the data processing job to be run. Each IdMappingWorkflow must have a unique workflow name. To modify an existing workflow, use the UpdateIdMappingWorkflow API.
    @Sendable
    public func createIdMappingWorkflow(_ input: CreateIdMappingWorkflowInput, logger: Logger = AWSClient.loggingDisabled) async throws -> CreateIdMappingWorkflowOutput {
        return try await self.client.execute(
            operation: "CreateIdMappingWorkflow", 
            path: "/idmappingworkflows", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Creates an ID namespace object which will help customers provide metadata explaining their dataset and how to use it. Each ID namespace must have a unique name. To modify an existing ID namespace, use the UpdateIdNamespace API.
    @Sendable
    public func createIdNamespace(_ input: CreateIdNamespaceInput, logger: Logger = AWSClient.loggingDisabled) async throws -> CreateIdNamespaceOutput {
        return try await self.client.execute(
            operation: "CreateIdNamespace", 
            path: "/idnamespaces", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Creates a MatchingWorkflow object which stores the configuration of the data processing job to be run. It is important to note that there should not be a pre-existing MatchingWorkflow with the same name. To modify an existing workflow, utilize the UpdateMatchingWorkflow API.
    @Sendable
    public func createMatchingWorkflow(_ input: CreateMatchingWorkflowInput, logger: Logger = AWSClient.loggingDisabled) async throws -> CreateMatchingWorkflowOutput {
        return try await self.client.execute(
            operation: "CreateMatchingWorkflow", 
            path: "/matchingworkflows", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Creates a schema mapping, which defines the schema of the input customer records table. The SchemaMapping also provides Entity Resolution with some metadata about the table, such as the attribute types of the columns and which columns to match on.
    @Sendable
    public func createSchemaMapping(_ input: CreateSchemaMappingInput, logger: Logger = AWSClient.loggingDisabled) async throws -> CreateSchemaMappingOutput {
        return try await self.client.execute(
            operation: "CreateSchemaMapping", 
            path: "/schemas", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Deletes the IdMappingWorkflow with a given name. This operation will succeed even if a workflow with the given name does not exist.
    @Sendable
    public func deleteIdMappingWorkflow(_ input: DeleteIdMappingWorkflowInput, logger: Logger = AWSClient.loggingDisabled) async throws -> DeleteIdMappingWorkflowOutput {
        return try await self.client.execute(
            operation: "DeleteIdMappingWorkflow", 
            path: "/idmappingworkflows/{workflowName}", 
            httpMethod: .DELETE, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Deletes the IdNamespace with a given name.
    @Sendable
    public func deleteIdNamespace(_ input: DeleteIdNamespaceInput, logger: Logger = AWSClient.loggingDisabled) async throws -> DeleteIdNamespaceOutput {
        return try await self.client.execute(
            operation: "DeleteIdNamespace", 
            path: "/idnamespaces/{idNamespaceName}", 
            httpMethod: .DELETE, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Deletes the MatchingWorkflow with a given name. This operation will succeed even if a workflow with the given name does not exist.
    @Sendable
    public func deleteMatchingWorkflow(_ input: DeleteMatchingWorkflowInput, logger: Logger = AWSClient.loggingDisabled) async throws -> DeleteMatchingWorkflowOutput {
        return try await self.client.execute(
            operation: "DeleteMatchingWorkflow", 
            path: "/matchingworkflows/{workflowName}", 
            httpMethod: .DELETE, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Deletes the policy statement.
    @Sendable
    public func deletePolicyStatement(_ input: DeletePolicyStatementInput, logger: Logger = AWSClient.loggingDisabled) async throws -> DeletePolicyStatementOutput {
        return try await self.client.execute(
            operation: "DeletePolicyStatement", 
            path: "/policies/{arn}/{statementId}", 
            httpMethod: .DELETE, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Deletes the SchemaMapping with a given name. This operation will succeed even if a schema with the given name does not exist. This operation will fail if there is a MatchingWorkflow object that references the SchemaMapping in the workflow's InputSourceConfig.
    @Sendable
    public func deleteSchemaMapping(_ input: DeleteSchemaMappingInput, logger: Logger = AWSClient.loggingDisabled) async throws -> DeleteSchemaMappingOutput {
        return try await self.client.execute(
            operation: "DeleteSchemaMapping", 
            path: "/schemas/{schemaName}", 
            httpMethod: .DELETE, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Gets the status, metrics, and errors (if there are any) that are associated with a job.
    @Sendable
    public func getIdMappingJob(_ input: GetIdMappingJobInput, logger: Logger = AWSClient.loggingDisabled) async throws -> GetIdMappingJobOutput {
        return try await self.client.execute(
            operation: "GetIdMappingJob", 
            path: "/idmappingworkflows/{workflowName}/jobs/{jobId}", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Returns the IdMappingWorkflow with a given name, if it exists.
    @Sendable
    public func getIdMappingWorkflow(_ input: GetIdMappingWorkflowInput, logger: Logger = AWSClient.loggingDisabled) async throws -> GetIdMappingWorkflowOutput {
        return try await self.client.execute(
            operation: "GetIdMappingWorkflow", 
            path: "/idmappingworkflows/{workflowName}", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Returns the IdNamespace with a given name, if it exists.
    @Sendable
    public func getIdNamespace(_ input: GetIdNamespaceInput, logger: Logger = AWSClient.loggingDisabled) async throws -> GetIdNamespaceOutput {
        return try await self.client.execute(
            operation: "GetIdNamespace", 
            path: "/idnamespaces/{idNamespaceName}", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Returns the corresponding Match ID of a customer record if the record has been processed.
    @Sendable
    public func getMatchId(_ input: GetMatchIdInput, logger: Logger = AWSClient.loggingDisabled) async throws -> GetMatchIdOutput {
        return try await self.client.execute(
            operation: "GetMatchId", 
            path: "/matchingworkflows/{workflowName}/matches", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Gets the status, metrics, and errors (if there are any) that are associated with a job.
    @Sendable
    public func getMatchingJob(_ input: GetMatchingJobInput, logger: Logger = AWSClient.loggingDisabled) async throws -> GetMatchingJobOutput {
        return try await self.client.execute(
            operation: "GetMatchingJob", 
            path: "/matchingworkflows/{workflowName}/jobs/{jobId}", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Returns the MatchingWorkflow with a given name, if it exists.
    @Sendable
    public func getMatchingWorkflow(_ input: GetMatchingWorkflowInput, logger: Logger = AWSClient.loggingDisabled) async throws -> GetMatchingWorkflowOutput {
        return try await self.client.execute(
            operation: "GetMatchingWorkflow", 
            path: "/matchingworkflows/{workflowName}", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Returns the resource-based policy.
    @Sendable
    public func getPolicy(_ input: GetPolicyInput, logger: Logger = AWSClient.loggingDisabled) async throws -> GetPolicyOutput {
        return try await self.client.execute(
            operation: "GetPolicy", 
            path: "/policies/{arn}", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Returns the ProviderService of a given name.
    @Sendable
    public func getProviderService(_ input: GetProviderServiceInput, logger: Logger = AWSClient.loggingDisabled) async throws -> GetProviderServiceOutput {
        return try await self.client.execute(
            operation: "GetProviderService", 
            path: "/providerservices/{providerName}/{providerServiceName}", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Returns the SchemaMapping of a given name.
    @Sendable
    public func getSchemaMapping(_ input: GetSchemaMappingInput, logger: Logger = AWSClient.loggingDisabled) async throws -> GetSchemaMappingOutput {
        return try await self.client.execute(
            operation: "GetSchemaMapping", 
            path: "/schemas/{schemaName}", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Lists all ID mapping jobs for a given workflow.
    @Sendable
    public func listIdMappingJobs(_ input: ListIdMappingJobsInput, logger: Logger = AWSClient.loggingDisabled) async throws -> ListIdMappingJobsOutput {
        return try await self.client.execute(
            operation: "ListIdMappingJobs", 
            path: "/idmappingworkflows/{workflowName}/jobs", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Returns a list of all the IdMappingWorkflows that have been created for an Amazon Web Services account.
    @Sendable
    public func listIdMappingWorkflows(_ input: ListIdMappingWorkflowsInput, logger: Logger = AWSClient.loggingDisabled) async throws -> ListIdMappingWorkflowsOutput {
        return try await self.client.execute(
            operation: "ListIdMappingWorkflows", 
            path: "/idmappingworkflows", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Returns a list of all ID namespaces.
    @Sendable
    public func listIdNamespaces(_ input: ListIdNamespacesInput, logger: Logger = AWSClient.loggingDisabled) async throws -> ListIdNamespacesOutput {
        return try await self.client.execute(
            operation: "ListIdNamespaces", 
            path: "/idnamespaces", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Lists all jobs for a given workflow.
    @Sendable
    public func listMatchingJobs(_ input: ListMatchingJobsInput, logger: Logger = AWSClient.loggingDisabled) async throws -> ListMatchingJobsOutput {
        return try await self.client.execute(
            operation: "ListMatchingJobs", 
            path: "/matchingworkflows/{workflowName}/jobs", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Returns a list of all the MatchingWorkflows that have been created for an Amazon Web Services account.
    @Sendable
    public func listMatchingWorkflows(_ input: ListMatchingWorkflowsInput, logger: Logger = AWSClient.loggingDisabled) async throws -> ListMatchingWorkflowsOutput {
        return try await self.client.execute(
            operation: "ListMatchingWorkflows", 
            path: "/matchingworkflows", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Returns a list of all the ProviderServices that are available in this Amazon Web Services Region.
    @Sendable
    public func listProviderServices(_ input: ListProviderServicesInput, logger: Logger = AWSClient.loggingDisabled) async throws -> ListProviderServicesOutput {
        return try await self.client.execute(
            operation: "ListProviderServices", 
            path: "/providerservices", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Returns a list of all the SchemaMappings that have been created for an Amazon Web Services account.
    @Sendable
    public func listSchemaMappings(_ input: ListSchemaMappingsInput, logger: Logger = AWSClient.loggingDisabled) async throws -> ListSchemaMappingsOutput {
        return try await self.client.execute(
            operation: "ListSchemaMappings", 
            path: "/schemas", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Displays the tags associated with an Entity Resolution resource. In Entity Resolution, SchemaMapping, and MatchingWorkflow can be tagged.
    @Sendable
    public func listTagsForResource(_ input: ListTagsForResourceInput, logger: Logger = AWSClient.loggingDisabled) async throws -> ListTagsForResourceOutput {
        return try await self.client.execute(
            operation: "ListTagsForResource", 
            path: "/tags/{resourceArn}", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Updates the resource-based policy.
    @Sendable
    public func putPolicy(_ input: PutPolicyInput, logger: Logger = AWSClient.loggingDisabled) async throws -> PutPolicyOutput {
        return try await self.client.execute(
            operation: "PutPolicy", 
            path: "/policies/{arn}", 
            httpMethod: .PUT, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Starts the IdMappingJob of a workflow. The workflow must have previously been created using the CreateIdMappingWorkflow endpoint.
    @Sendable
    public func startIdMappingJob(_ input: StartIdMappingJobInput, logger: Logger = AWSClient.loggingDisabled) async throws -> StartIdMappingJobOutput {
        return try await self.client.execute(
            operation: "StartIdMappingJob", 
            path: "/idmappingworkflows/{workflowName}/jobs", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Starts the MatchingJob of a workflow. The workflow must have previously been created using the CreateMatchingWorkflow endpoint.
    @Sendable
    public func startMatchingJob(_ input: StartMatchingJobInput, logger: Logger = AWSClient.loggingDisabled) async throws -> StartMatchingJobOutput {
        return try await self.client.execute(
            operation: "StartMatchingJob", 
            path: "/matchingworkflows/{workflowName}/jobs", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Assigns one or more tags (key-value pairs) to the specified Entity Resolution resource. Tags can help you organize and categorize your resources. You can also use them to scope user permissions by granting a user permission to access or change only resources with certain tag values. In Entity Resolution, SchemaMapping and MatchingWorkflow can be tagged. Tags don't have any semantic meaning to Amazon Web Services and are interpreted strictly as strings of characters. You can use the TagResource action with a resource that already has tags. If you specify a new tag key, this tag is appended to the list of tags associated with the resource. If you specify a tag key that is already associated with the resource, the new tag value that you specify replaces the previous value for that tag.
    @Sendable
    public func tagResource(_ input: TagResourceInput, logger: Logger = AWSClient.loggingDisabled) async throws -> TagResourceOutput {
        return try await self.client.execute(
            operation: "TagResource", 
            path: "/tags/{resourceArn}", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Removes one or more tags from the specified Entity Resolution resource. In Entity Resolution, SchemaMapping, and MatchingWorkflow can be tagged.
    @Sendable
    public func untagResource(_ input: UntagResourceInput, logger: Logger = AWSClient.loggingDisabled) async throws -> UntagResourceOutput {
        return try await self.client.execute(
            operation: "UntagResource", 
            path: "/tags/{resourceArn}", 
            httpMethod: .DELETE, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Updates an existing IdMappingWorkflow. This method is identical to CreateIdMappingWorkflow, except it uses an HTTP PUT request instead of a POST request, and the IdMappingWorkflow must already exist for the method to succeed.
    @Sendable
    public func updateIdMappingWorkflow(_ input: UpdateIdMappingWorkflowInput, logger: Logger = AWSClient.loggingDisabled) async throws -> UpdateIdMappingWorkflowOutput {
        return try await self.client.execute(
            operation: "UpdateIdMappingWorkflow", 
            path: "/idmappingworkflows/{workflowName}", 
            httpMethod: .PUT, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Updates an existing ID namespace.
    @Sendable
    public func updateIdNamespace(_ input: UpdateIdNamespaceInput, logger: Logger = AWSClient.loggingDisabled) async throws -> UpdateIdNamespaceOutput {
        return try await self.client.execute(
            operation: "UpdateIdNamespace", 
            path: "/idnamespaces/{idNamespaceName}", 
            httpMethod: .PUT, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Updates an existing MatchingWorkflow. This method is identical to CreateMatchingWorkflow, except it uses an HTTP PUT request instead of a POST request, and the MatchingWorkflow must already exist for the method to succeed.
    @Sendable
    public func updateMatchingWorkflow(_ input: UpdateMatchingWorkflowInput, logger: Logger = AWSClient.loggingDisabled) async throws -> UpdateMatchingWorkflowOutput {
        return try await self.client.execute(
            operation: "UpdateMatchingWorkflow", 
            path: "/matchingworkflows/{workflowName}", 
            httpMethod: .PUT, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Updates a schema mapping.  A schema is immutable if it is being used by a workflow. Therefore, you can't update a schema mapping if it's associated with a workflow.
    @Sendable
    public func updateSchemaMapping(_ input: UpdateSchemaMappingInput, logger: Logger = AWSClient.loggingDisabled) async throws -> UpdateSchemaMappingOutput {
        return try await self.client.execute(
            operation: "UpdateSchemaMapping", 
            path: "/schemas/{schemaName}", 
            httpMethod: .PUT, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
}

extension EntityResolution {
    /// Initializer required by `AWSService.with(middlewares:timeout:byteBufferAllocator:options)`. You are not able to use this initializer directly as there are not public
    /// initializers for `AWSServiceConfig.Patch`. Please use `AWSService.with(middlewares:timeout:byteBufferAllocator:options)` instead.
    public init(from: EntityResolution, patch: AWSServiceConfig.Patch) {
        self.client = from.client
        self.config = from.config.with(patch: patch)
    }
}

// MARK: Paginators

@available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
extension EntityResolution {
    /// Lists all ID mapping jobs for a given workflow.
    /// Return PaginatorSequence for operation.
    ///
    /// - Parameters:
    ///   - input: Input for request
    ///   - logger: Logger used flot logging
    public func listIdMappingJobsPaginator(
        _ input: ListIdMappingJobsInput,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<ListIdMappingJobsInput, ListIdMappingJobsOutput> {
        return .init(
            input: input,
            command: self.listIdMappingJobs,
            inputKey: \ListIdMappingJobsInput.nextToken,
            outputKey: \ListIdMappingJobsOutput.nextToken,
            logger: logger
        )
    }

    /// Returns a list of all the IdMappingWorkflows that have been created for an Amazon Web Services account.
    /// Return PaginatorSequence for operation.
    ///
    /// - Parameters:
    ///   - input: Input for request
    ///   - logger: Logger used flot logging
    public func listIdMappingWorkflowsPaginator(
        _ input: ListIdMappingWorkflowsInput,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<ListIdMappingWorkflowsInput, ListIdMappingWorkflowsOutput> {
        return .init(
            input: input,
            command: self.listIdMappingWorkflows,
            inputKey: \ListIdMappingWorkflowsInput.nextToken,
            outputKey: \ListIdMappingWorkflowsOutput.nextToken,
            logger: logger
        )
    }

    /// Returns a list of all ID namespaces.
    /// Return PaginatorSequence for operation.
    ///
    /// - Parameters:
    ///   - input: Input for request
    ///   - logger: Logger used flot logging
    public func listIdNamespacesPaginator(
        _ input: ListIdNamespacesInput,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<ListIdNamespacesInput, ListIdNamespacesOutput> {
        return .init(
            input: input,
            command: self.listIdNamespaces,
            inputKey: \ListIdNamespacesInput.nextToken,
            outputKey: \ListIdNamespacesOutput.nextToken,
            logger: logger
        )
    }

    /// Lists all jobs for a given workflow.
    /// Return PaginatorSequence for operation.
    ///
    /// - Parameters:
    ///   - input: Input for request
    ///   - logger: Logger used flot logging
    public func listMatchingJobsPaginator(
        _ input: ListMatchingJobsInput,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<ListMatchingJobsInput, ListMatchingJobsOutput> {
        return .init(
            input: input,
            command: self.listMatchingJobs,
            inputKey: \ListMatchingJobsInput.nextToken,
            outputKey: \ListMatchingJobsOutput.nextToken,
            logger: logger
        )
    }

    /// Returns a list of all the MatchingWorkflows that have been created for an Amazon Web Services account.
    /// Return PaginatorSequence for operation.
    ///
    /// - Parameters:
    ///   - input: Input for request
    ///   - logger: Logger used flot logging
    public func listMatchingWorkflowsPaginator(
        _ input: ListMatchingWorkflowsInput,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<ListMatchingWorkflowsInput, ListMatchingWorkflowsOutput> {
        return .init(
            input: input,
            command: self.listMatchingWorkflows,
            inputKey: \ListMatchingWorkflowsInput.nextToken,
            outputKey: \ListMatchingWorkflowsOutput.nextToken,
            logger: logger
        )
    }

    /// Returns a list of all the ProviderServices that are available in this Amazon Web Services Region.
    /// Return PaginatorSequence for operation.
    ///
    /// - Parameters:
    ///   - input: Input for request
    ///   - logger: Logger used flot logging
    public func listProviderServicesPaginator(
        _ input: ListProviderServicesInput,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<ListProviderServicesInput, ListProviderServicesOutput> {
        return .init(
            input: input,
            command: self.listProviderServices,
            inputKey: \ListProviderServicesInput.nextToken,
            outputKey: \ListProviderServicesOutput.nextToken,
            logger: logger
        )
    }

    /// Returns a list of all the SchemaMappings that have been created for an Amazon Web Services account.
    /// Return PaginatorSequence for operation.
    ///
    /// - Parameters:
    ///   - input: Input for request
    ///   - logger: Logger used flot logging
    public func listSchemaMappingsPaginator(
        _ input: ListSchemaMappingsInput,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<ListSchemaMappingsInput, ListSchemaMappingsOutput> {
        return .init(
            input: input,
            command: self.listSchemaMappings,
            inputKey: \ListSchemaMappingsInput.nextToken,
            outputKey: \ListSchemaMappingsOutput.nextToken,
            logger: logger
        )
    }
}

extension EntityResolution.ListIdMappingJobsInput: AWSPaginateToken {
    public func usingPaginationToken(_ token: String) -> EntityResolution.ListIdMappingJobsInput {
        return .init(
            maxResults: self.maxResults,
            nextToken: token,
            workflowName: self.workflowName
        )
    }
}

extension EntityResolution.ListIdMappingWorkflowsInput: AWSPaginateToken {
    public func usingPaginationToken(_ token: String) -> EntityResolution.ListIdMappingWorkflowsInput {
        return .init(
            maxResults: self.maxResults,
            nextToken: token
        )
    }
}

extension EntityResolution.ListIdNamespacesInput: AWSPaginateToken {
    public func usingPaginationToken(_ token: String) -> EntityResolution.ListIdNamespacesInput {
        return .init(
            maxResults: self.maxResults,
            nextToken: token
        )
    }
}

extension EntityResolution.ListMatchingJobsInput: AWSPaginateToken {
    public func usingPaginationToken(_ token: String) -> EntityResolution.ListMatchingJobsInput {
        return .init(
            maxResults: self.maxResults,
            nextToken: token,
            workflowName: self.workflowName
        )
    }
}

extension EntityResolution.ListMatchingWorkflowsInput: AWSPaginateToken {
    public func usingPaginationToken(_ token: String) -> EntityResolution.ListMatchingWorkflowsInput {
        return .init(
            maxResults: self.maxResults,
            nextToken: token
        )
    }
}

extension EntityResolution.ListProviderServicesInput: AWSPaginateToken {
    public func usingPaginationToken(_ token: String) -> EntityResolution.ListProviderServicesInput {
        return .init(
            maxResults: self.maxResults,
            nextToken: token,
            providerName: self.providerName
        )
    }
}

extension EntityResolution.ListSchemaMappingsInput: AWSPaginateToken {
    public func usingPaginationToken(_ token: String) -> EntityResolution.ListSchemaMappingsInput {
        return .init(
            maxResults: self.maxResults,
            nextToken: token
        )
    }
}
