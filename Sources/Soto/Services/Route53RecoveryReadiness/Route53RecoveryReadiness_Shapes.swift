//===----------------------------------------------------------------------===//
//
// This source file is part of the Soto for AWS open source project
//
// Copyright (c) 2017-2021 the Soto project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
// See CONTRIBUTORS.txt for the list of Soto project authors
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by https://github.com/soto-project/soto/tree/main/CodeGenerator. DO NOT EDIT.

import Foundation
import SotoCore

extension Route53RecoveryReadiness {
    // MARK: Enums

    public enum Readiness: String, CustomStringConvertible, Codable {
        case notAuthorized = "NOT_AUTHORIZED"
        case notReady = "NOT_READY"
        case ready = "READY"
        case unknown = "UNKNOWN"
        public var description: String { return self.rawValue }
    }

    // MARK: Shapes

    public struct CellOutput: AWSDecodableShape {
        /// The Amazon Resource Name (ARN) for the cell.
        public let cellArn: String
        /// The name of the cell.
        public let cellName: String
        /// A list of cell ARNs.
        public let cells: [String]
        /// The readiness scope for the cell, which can be a cell Amazon Resource Name (ARN) or a recovery group ARN. This is a list but currently can have only one element.
        public let parentReadinessScopes: [String]
        /// Tags on the resources.
        public let tags: [String: String]?

        public init(cellArn: String, cellName: String, cells: [String], parentReadinessScopes: [String], tags: [String: String]? = nil) {
            self.cellArn = cellArn
            self.cellName = cellName
            self.cells = cells
            self.parentReadinessScopes = parentReadinessScopes
            self.tags = tags
        }

        private enum CodingKeys: String, CodingKey {
            case cellArn
            case cellName
            case cells
            case parentReadinessScopes
            case tags
        }
    }

    public struct CreateCellRequest: AWSEncodableShape {
        public let cellName: String
        public let cells: [String]?
        public let tags: [String: String]?

        public init(cellName: String, cells: [String]? = nil, tags: [String: String]? = nil) {
            self.cellName = cellName
            self.cells = cells
            self.tags = tags
        }

        private enum CodingKeys: String, CodingKey {
            case cellName
            case cells
            case tags
        }
    }

    public struct CreateCellResponse: AWSDecodableShape {
        public let cellArn: String?
        public let cellName: String?
        public let cells: [String]?
        public let parentReadinessScopes: [String]?
        public let tags: [String: String]?

        public init(cellArn: String? = nil, cellName: String? = nil, cells: [String]? = nil, parentReadinessScopes: [String]? = nil, tags: [String: String]? = nil) {
            self.cellArn = cellArn
            self.cellName = cellName
            self.cells = cells
            self.parentReadinessScopes = parentReadinessScopes
            self.tags = tags
        }

        private enum CodingKeys: String, CodingKey {
            case cellArn
            case cellName
            case cells
            case parentReadinessScopes
            case tags
        }
    }

    public struct CreateCrossAccountAuthorizationRequest: AWSEncodableShape {
        public let crossAccountAuthorization: String

        public init(crossAccountAuthorization: String) {
            self.crossAccountAuthorization = crossAccountAuthorization
        }

        private enum CodingKeys: String, CodingKey {
            case crossAccountAuthorization
        }
    }

    public struct CreateCrossAccountAuthorizationResponse: AWSDecodableShape {
        public let crossAccountAuthorization: String?

        public init(crossAccountAuthorization: String? = nil) {
            self.crossAccountAuthorization = crossAccountAuthorization
        }

        private enum CodingKeys: String, CodingKey {
            case crossAccountAuthorization
        }
    }

    public struct CreateReadinessCheckRequest: AWSEncodableShape {
        public let readinessCheckName: String
        public let resourceSetName: String
        public let tags: [String: String]?

        public init(readinessCheckName: String, resourceSetName: String, tags: [String: String]? = nil) {
            self.readinessCheckName = readinessCheckName
            self.resourceSetName = resourceSetName
            self.tags = tags
        }

        private enum CodingKeys: String, CodingKey {
            case readinessCheckName
            case resourceSetName
            case tags
        }
    }

    public struct CreateReadinessCheckResponse: AWSDecodableShape {
        public let readinessCheckArn: String?
        public let readinessCheckName: String?
        public let resourceSet: String?
        public let tags: [String: String]?

        public init(readinessCheckArn: String? = nil, readinessCheckName: String? = nil, resourceSet: String? = nil, tags: [String: String]? = nil) {
            self.readinessCheckArn = readinessCheckArn
            self.readinessCheckName = readinessCheckName
            self.resourceSet = resourceSet
            self.tags = tags
        }

        private enum CodingKeys: String, CodingKey {
            case readinessCheckArn
            case readinessCheckName
            case resourceSet
            case tags
        }
    }

    public struct CreateRecoveryGroupRequest: AWSEncodableShape {
        public let cells: [String]?
        public let recoveryGroupName: String
        public let tags: [String: String]?

        public init(cells: [String]? = nil, recoveryGroupName: String, tags: [String: String]? = nil) {
            self.cells = cells
            self.recoveryGroupName = recoveryGroupName
            self.tags = tags
        }

        private enum CodingKeys: String, CodingKey {
            case cells
            case recoveryGroupName
            case tags
        }
    }

    public struct CreateRecoveryGroupResponse: AWSDecodableShape {
        public let cells: [String]?
        public let recoveryGroupArn: String?
        public let recoveryGroupName: String?
        public let tags: [String: String]?

        public init(cells: [String]? = nil, recoveryGroupArn: String? = nil, recoveryGroupName: String? = nil, tags: [String: String]? = nil) {
            self.cells = cells
            self.recoveryGroupArn = recoveryGroupArn
            self.recoveryGroupName = recoveryGroupName
            self.tags = tags
        }

        private enum CodingKeys: String, CodingKey {
            case cells
            case recoveryGroupArn
            case recoveryGroupName
            case tags
        }
    }

    public struct CreateResourceSetRequest: AWSEncodableShape {
        public let resources: [Resource]
        public let resourceSetName: String
        public let resourceSetType: String
        public let tags: [String: String]?

        public init(resources: [Resource], resourceSetName: String, resourceSetType: String, tags: [String: String]? = nil) {
            self.resources = resources
            self.resourceSetName = resourceSetName
            self.resourceSetType = resourceSetType
            self.tags = tags
        }

        public func validate(name: String) throws {
            try self.validate(self.resourceSetType, name: "resourceSetType", parent: name, pattern: "AWS::[A-Za-z0-9]+::[A-Za-z0-9]+")
        }

        private enum CodingKeys: String, CodingKey {
            case resources
            case resourceSetName
            case resourceSetType
            case tags
        }
    }

    public struct CreateResourceSetResponse: AWSDecodableShape {
        public let resources: [Resource]?
        public let resourceSetArn: String?
        public let resourceSetName: String?
        public let resourceSetType: String?
        public let tags: [String: String]?

        public init(resources: [Resource]? = nil, resourceSetArn: String? = nil, resourceSetName: String? = nil, resourceSetType: String? = nil, tags: [String: String]? = nil) {
            self.resources = resources
            self.resourceSetArn = resourceSetArn
            self.resourceSetName = resourceSetName
            self.resourceSetType = resourceSetType
            self.tags = tags
        }

        private enum CodingKeys: String, CodingKey {
            case resources
            case resourceSetArn
            case resourceSetName
            case resourceSetType
            case tags
        }
    }

    public struct DNSTargetResource: AWSEncodableShape & AWSDecodableShape {
        /// The domain name that acts as an ingress point to a portion of the customer application.
        public let domainName: String?
        /// The hosted zone Amazon Resource Name (ARN) that contains the DNS record with the provided name of the target resource.
        public let hostedZoneArn: String?
        /// The Route 53 record set ID that uniquely identifies a DNS record, given a name and a type.
        public let recordSetId: String?
        /// The type of DNS record of the target resource.
        public let recordType: String?
        /// The target resource of the DNS target resource.
        public let targetResource: TargetResource?

        public init(domainName: String? = nil, hostedZoneArn: String? = nil, recordSetId: String? = nil, recordType: String? = nil, targetResource: TargetResource? = nil) {
            self.domainName = domainName
            self.hostedZoneArn = hostedZoneArn
            self.recordSetId = recordSetId
            self.recordType = recordType
            self.targetResource = targetResource
        }

        private enum CodingKeys: String, CodingKey {
            case domainName
            case hostedZoneArn
            case recordSetId
            case recordType
            case targetResource
        }
    }

    public struct DeleteCellRequest: AWSEncodableShape {
        public static var _encoding = [
            AWSMemberEncoding(label: "cellName", location: .uri(locationName: "cellName"))
        ]

        public let cellName: String

        public init(cellName: String) {
            self.cellName = cellName
        }

        private enum CodingKeys: CodingKey {}
    }

    public struct DeleteCrossAccountAuthorizationRequest: AWSEncodableShape {
        public static var _encoding = [
            AWSMemberEncoding(label: "crossAccountAuthorization", location: .uri(locationName: "crossAccountAuthorization"))
        ]

        public let crossAccountAuthorization: String

        public init(crossAccountAuthorization: String) {
            self.crossAccountAuthorization = crossAccountAuthorization
        }

        private enum CodingKeys: CodingKey {}
    }

    public struct DeleteCrossAccountAuthorizationResponse: AWSDecodableShape {
        public init() {}
    }

    public struct DeleteReadinessCheckRequest: AWSEncodableShape {
        public static var _encoding = [
            AWSMemberEncoding(label: "readinessCheckName", location: .uri(locationName: "readinessCheckName"))
        ]

        public let readinessCheckName: String

        public init(readinessCheckName: String) {
            self.readinessCheckName = readinessCheckName
        }

        private enum CodingKeys: CodingKey {}
    }

    public struct DeleteRecoveryGroupRequest: AWSEncodableShape {
        public static var _encoding = [
            AWSMemberEncoding(label: "recoveryGroupName", location: .uri(locationName: "recoveryGroupName"))
        ]

        public let recoveryGroupName: String

        public init(recoveryGroupName: String) {
            self.recoveryGroupName = recoveryGroupName
        }

        private enum CodingKeys: CodingKey {}
    }

    public struct DeleteResourceSetRequest: AWSEncodableShape {
        public static var _encoding = [
            AWSMemberEncoding(label: "resourceSetName", location: .uri(locationName: "resourceSetName"))
        ]

        public let resourceSetName: String

        public init(resourceSetName: String) {
            self.resourceSetName = resourceSetName
        }

        private enum CodingKeys: CodingKey {}
    }

    public struct GetArchitectureRecommendationsRequest: AWSEncodableShape {
        public static var _encoding = [
            AWSMemberEncoding(label: "maxResults", location: .querystring(locationName: "maxResults")),
            AWSMemberEncoding(label: "nextToken", location: .querystring(locationName: "nextToken")),
            AWSMemberEncoding(label: "recoveryGroupName", location: .uri(locationName: "recoveryGroupName"))
        ]

        public let maxResults: Int?
        public let nextToken: String?
        public let recoveryGroupName: String

        public init(maxResults: Int? = nil, nextToken: String? = nil, recoveryGroupName: String) {
            self.maxResults = maxResults
            self.nextToken = nextToken
            self.recoveryGroupName = recoveryGroupName
        }

        public func validate(name: String) throws {
            try self.validate(self.maxResults, name: "maxResults", parent: name, max: 1000)
            try self.validate(self.maxResults, name: "maxResults", parent: name, min: 1)
        }

        private enum CodingKeys: CodingKey {}
    }

    public struct GetArchitectureRecommendationsResponse: AWSDecodableShape {
        @OptionalCustomCoding<ISO8601DateCoder>
        public var lastAuditTimestamp: Date?
        public let nextToken: String?
        public let recommendations: [Recommendation]?

        public init(lastAuditTimestamp: Date? = nil, nextToken: String? = nil, recommendations: [Recommendation]? = nil) {
            self.lastAuditTimestamp = lastAuditTimestamp
            self.nextToken = nextToken
            self.recommendations = recommendations
        }

        private enum CodingKeys: String, CodingKey {
            case lastAuditTimestamp
            case nextToken
            case recommendations
        }
    }

    public struct GetCellReadinessSummaryRequest: AWSEncodableShape {
        public static var _encoding = [
            AWSMemberEncoding(label: "cellName", location: .uri(locationName: "cellName")),
            AWSMemberEncoding(label: "maxResults", location: .querystring(locationName: "maxResults")),
            AWSMemberEncoding(label: "nextToken", location: .querystring(locationName: "nextToken"))
        ]

        public let cellName: String
        public let maxResults: Int?
        public let nextToken: String?

        public init(cellName: String, maxResults: Int? = nil, nextToken: String? = nil) {
            self.cellName = cellName
            self.maxResults = maxResults
            self.nextToken = nextToken
        }

        public func validate(name: String) throws {
            try self.validate(self.maxResults, name: "maxResults", parent: name, max: 1000)
            try self.validate(self.maxResults, name: "maxResults", parent: name, min: 1)
        }

        private enum CodingKeys: CodingKey {}
    }

    public struct GetCellReadinessSummaryResponse: AWSDecodableShape {
        public let nextToken: String?
        public let readiness: Readiness?
        public let readinessChecks: [ReadinessCheckSummary]?

        public init(nextToken: String? = nil, readiness: Readiness? = nil, readinessChecks: [ReadinessCheckSummary]? = nil) {
            self.nextToken = nextToken
            self.readiness = readiness
            self.readinessChecks = readinessChecks
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken
            case readiness
            case readinessChecks
        }
    }

    public struct GetCellRequest: AWSEncodableShape {
        public static var _encoding = [
            AWSMemberEncoding(label: "cellName", location: .uri(locationName: "cellName"))
        ]

        public let cellName: String

        public init(cellName: String) {
            self.cellName = cellName
        }

        private enum CodingKeys: CodingKey {}
    }

    public struct GetCellResponse: AWSDecodableShape {
        public let cellArn: String?
        public let cellName: String?
        public let cells: [String]?
        public let parentReadinessScopes: [String]?
        public let tags: [String: String]?

        public init(cellArn: String? = nil, cellName: String? = nil, cells: [String]? = nil, parentReadinessScopes: [String]? = nil, tags: [String: String]? = nil) {
            self.cellArn = cellArn
            self.cellName = cellName
            self.cells = cells
            self.parentReadinessScopes = parentReadinessScopes
            self.tags = tags
        }

        private enum CodingKeys: String, CodingKey {
            case cellArn
            case cellName
            case cells
            case parentReadinessScopes
            case tags
        }
    }

    public struct GetReadinessCheckRequest: AWSEncodableShape {
        public static var _encoding = [
            AWSMemberEncoding(label: "readinessCheckName", location: .uri(locationName: "readinessCheckName"))
        ]

        public let readinessCheckName: String

        public init(readinessCheckName: String) {
            self.readinessCheckName = readinessCheckName
        }

        private enum CodingKeys: CodingKey {}
    }

    public struct GetReadinessCheckResourceStatusRequest: AWSEncodableShape {
        public static var _encoding = [
            AWSMemberEncoding(label: "maxResults", location: .querystring(locationName: "maxResults")),
            AWSMemberEncoding(label: "nextToken", location: .querystring(locationName: "nextToken")),
            AWSMemberEncoding(label: "readinessCheckName", location: .uri(locationName: "readinessCheckName")),
            AWSMemberEncoding(label: "resourceIdentifier", location: .uri(locationName: "resourceIdentifier"))
        ]

        public let maxResults: Int?
        public let nextToken: String?
        public let readinessCheckName: String
        public let resourceIdentifier: String

        public init(maxResults: Int? = nil, nextToken: String? = nil, readinessCheckName: String, resourceIdentifier: String) {
            self.maxResults = maxResults
            self.nextToken = nextToken
            self.readinessCheckName = readinessCheckName
            self.resourceIdentifier = resourceIdentifier
        }

        public func validate(name: String) throws {
            try self.validate(self.maxResults, name: "maxResults", parent: name, max: 1000)
            try self.validate(self.maxResults, name: "maxResults", parent: name, min: 1)
        }

        private enum CodingKeys: CodingKey {}
    }

    public struct GetReadinessCheckResourceStatusResponse: AWSDecodableShape {
        public let nextToken: String?
        public let readiness: Readiness?
        public let rules: [RuleResult]?

        public init(nextToken: String? = nil, readiness: Readiness? = nil, rules: [RuleResult]? = nil) {
            self.nextToken = nextToken
            self.readiness = readiness
            self.rules = rules
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken
            case readiness
            case rules
        }
    }

    public struct GetReadinessCheckResponse: AWSDecodableShape {
        public let readinessCheckArn: String?
        public let readinessCheckName: String?
        public let resourceSet: String?
        public let tags: [String: String]?

        public init(readinessCheckArn: String? = nil, readinessCheckName: String? = nil, resourceSet: String? = nil, tags: [String: String]? = nil) {
            self.readinessCheckArn = readinessCheckArn
            self.readinessCheckName = readinessCheckName
            self.resourceSet = resourceSet
            self.tags = tags
        }

        private enum CodingKeys: String, CodingKey {
            case readinessCheckArn
            case readinessCheckName
            case resourceSet
            case tags
        }
    }

    public struct GetReadinessCheckStatusRequest: AWSEncodableShape {
        public static var _encoding = [
            AWSMemberEncoding(label: "maxResults", location: .querystring(locationName: "maxResults")),
            AWSMemberEncoding(label: "nextToken", location: .querystring(locationName: "nextToken")),
            AWSMemberEncoding(label: "readinessCheckName", location: .uri(locationName: "readinessCheckName"))
        ]

        public let maxResults: Int?
        public let nextToken: String?
        public let readinessCheckName: String

        public init(maxResults: Int? = nil, nextToken: String? = nil, readinessCheckName: String) {
            self.maxResults = maxResults
            self.nextToken = nextToken
            self.readinessCheckName = readinessCheckName
        }

        public func validate(name: String) throws {
            try self.validate(self.maxResults, name: "maxResults", parent: name, max: 1000)
            try self.validate(self.maxResults, name: "maxResults", parent: name, min: 1)
        }

        private enum CodingKeys: CodingKey {}
    }

    public struct GetReadinessCheckStatusResponse: AWSDecodableShape {
        public let messages: [Message]?
        public let nextToken: String?
        public let readiness: Readiness?
        public let resources: [ResourceResult]?

        public init(messages: [Message]? = nil, nextToken: String? = nil, readiness: Readiness? = nil, resources: [ResourceResult]? = nil) {
            self.messages = messages
            self.nextToken = nextToken
            self.readiness = readiness
            self.resources = resources
        }

        private enum CodingKeys: String, CodingKey {
            case messages
            case nextToken
            case readiness
            case resources
        }
    }

    public struct GetRecoveryGroupReadinessSummaryRequest: AWSEncodableShape {
        public static var _encoding = [
            AWSMemberEncoding(label: "maxResults", location: .querystring(locationName: "maxResults")),
            AWSMemberEncoding(label: "nextToken", location: .querystring(locationName: "nextToken")),
            AWSMemberEncoding(label: "recoveryGroupName", location: .uri(locationName: "recoveryGroupName"))
        ]

        public let maxResults: Int?
        public let nextToken: String?
        public let recoveryGroupName: String

        public init(maxResults: Int? = nil, nextToken: String? = nil, recoveryGroupName: String) {
            self.maxResults = maxResults
            self.nextToken = nextToken
            self.recoveryGroupName = recoveryGroupName
        }

        public func validate(name: String) throws {
            try self.validate(self.maxResults, name: "maxResults", parent: name, max: 1000)
            try self.validate(self.maxResults, name: "maxResults", parent: name, min: 1)
        }

        private enum CodingKeys: CodingKey {}
    }

    public struct GetRecoveryGroupReadinessSummaryResponse: AWSDecodableShape {
        public let nextToken: String?
        public let readiness: Readiness?
        public let readinessChecks: [ReadinessCheckSummary]?

        public init(nextToken: String? = nil, readiness: Readiness? = nil, readinessChecks: [ReadinessCheckSummary]? = nil) {
            self.nextToken = nextToken
            self.readiness = readiness
            self.readinessChecks = readinessChecks
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken
            case readiness
            case readinessChecks
        }
    }

    public struct GetRecoveryGroupRequest: AWSEncodableShape {
        public static var _encoding = [
            AWSMemberEncoding(label: "recoveryGroupName", location: .uri(locationName: "recoveryGroupName"))
        ]

        public let recoveryGroupName: String

        public init(recoveryGroupName: String) {
            self.recoveryGroupName = recoveryGroupName
        }

        private enum CodingKeys: CodingKey {}
    }

    public struct GetRecoveryGroupResponse: AWSDecodableShape {
        public let cells: [String]?
        public let recoveryGroupArn: String?
        public let recoveryGroupName: String?
        public let tags: [String: String]?

        public init(cells: [String]? = nil, recoveryGroupArn: String? = nil, recoveryGroupName: String? = nil, tags: [String: String]? = nil) {
            self.cells = cells
            self.recoveryGroupArn = recoveryGroupArn
            self.recoveryGroupName = recoveryGroupName
            self.tags = tags
        }

        private enum CodingKeys: String, CodingKey {
            case cells
            case recoveryGroupArn
            case recoveryGroupName
            case tags
        }
    }

    public struct GetResourceSetRequest: AWSEncodableShape {
        public static var _encoding = [
            AWSMemberEncoding(label: "resourceSetName", location: .uri(locationName: "resourceSetName"))
        ]

        public let resourceSetName: String

        public init(resourceSetName: String) {
            self.resourceSetName = resourceSetName
        }

        private enum CodingKeys: CodingKey {}
    }

    public struct GetResourceSetResponse: AWSDecodableShape {
        public let resources: [Resource]?
        public let resourceSetArn: String?
        public let resourceSetName: String?
        public let resourceSetType: String?
        public let tags: [String: String]?

        public init(resources: [Resource]? = nil, resourceSetArn: String? = nil, resourceSetName: String? = nil, resourceSetType: String? = nil, tags: [String: String]? = nil) {
            self.resources = resources
            self.resourceSetArn = resourceSetArn
            self.resourceSetName = resourceSetName
            self.resourceSetType = resourceSetType
            self.tags = tags
        }

        private enum CodingKeys: String, CodingKey {
            case resources
            case resourceSetArn
            case resourceSetName
            case resourceSetType
            case tags
        }
    }

    public struct ListCellsRequest: AWSEncodableShape {
        public static var _encoding = [
            AWSMemberEncoding(label: "maxResults", location: .querystring(locationName: "maxResults")),
            AWSMemberEncoding(label: "nextToken", location: .querystring(locationName: "nextToken"))
        ]

        public let maxResults: Int?
        public let nextToken: String?

        public init(maxResults: Int? = nil, nextToken: String? = nil) {
            self.maxResults = maxResults
            self.nextToken = nextToken
        }

        public func validate(name: String) throws {
            try self.validate(self.maxResults, name: "maxResults", parent: name, max: 1000)
            try self.validate(self.maxResults, name: "maxResults", parent: name, min: 1)
        }

        private enum CodingKeys: CodingKey {}
    }

    public struct ListCellsResponse: AWSDecodableShape {
        public let cells: [CellOutput]?
        public let nextToken: String?

        public init(cells: [CellOutput]? = nil, nextToken: String? = nil) {
            self.cells = cells
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case cells
            case nextToken
        }
    }

    public struct ListCrossAccountAuthorizationsRequest: AWSEncodableShape {
        public static var _encoding = [
            AWSMemberEncoding(label: "maxResults", location: .querystring(locationName: "maxResults")),
            AWSMemberEncoding(label: "nextToken", location: .querystring(locationName: "nextToken"))
        ]

        public let maxResults: Int?
        public let nextToken: String?

        public init(maxResults: Int? = nil, nextToken: String? = nil) {
            self.maxResults = maxResults
            self.nextToken = nextToken
        }

        public func validate(name: String) throws {
            try self.validate(self.maxResults, name: "maxResults", parent: name, max: 1000)
            try self.validate(self.maxResults, name: "maxResults", parent: name, min: 1)
        }

        private enum CodingKeys: CodingKey {}
    }

    public struct ListCrossAccountAuthorizationsResponse: AWSDecodableShape {
        public let crossAccountAuthorizations: [String]?
        public let nextToken: String?

        public init(crossAccountAuthorizations: [String]? = nil, nextToken: String? = nil) {
            self.crossAccountAuthorizations = crossAccountAuthorizations
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case crossAccountAuthorizations
            case nextToken
        }
    }

    public struct ListReadinessChecksRequest: AWSEncodableShape {
        public static var _encoding = [
            AWSMemberEncoding(label: "maxResults", location: .querystring(locationName: "maxResults")),
            AWSMemberEncoding(label: "nextToken", location: .querystring(locationName: "nextToken"))
        ]

        public let maxResults: Int?
        public let nextToken: String?

        public init(maxResults: Int? = nil, nextToken: String? = nil) {
            self.maxResults = maxResults
            self.nextToken = nextToken
        }

        public func validate(name: String) throws {
            try self.validate(self.maxResults, name: "maxResults", parent: name, max: 1000)
            try self.validate(self.maxResults, name: "maxResults", parent: name, min: 1)
        }

        private enum CodingKeys: CodingKey {}
    }

    public struct ListReadinessChecksResponse: AWSDecodableShape {
        public let nextToken: String?
        public let readinessChecks: [ReadinessCheckOutput]?

        public init(nextToken: String? = nil, readinessChecks: [ReadinessCheckOutput]? = nil) {
            self.nextToken = nextToken
            self.readinessChecks = readinessChecks
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken
            case readinessChecks
        }
    }

    public struct ListRecoveryGroupsRequest: AWSEncodableShape {
        public static var _encoding = [
            AWSMemberEncoding(label: "maxResults", location: .querystring(locationName: "maxResults")),
            AWSMemberEncoding(label: "nextToken", location: .querystring(locationName: "nextToken"))
        ]

        public let maxResults: Int?
        public let nextToken: String?

        public init(maxResults: Int? = nil, nextToken: String? = nil) {
            self.maxResults = maxResults
            self.nextToken = nextToken
        }

        public func validate(name: String) throws {
            try self.validate(self.maxResults, name: "maxResults", parent: name, max: 1000)
            try self.validate(self.maxResults, name: "maxResults", parent: name, min: 1)
        }

        private enum CodingKeys: CodingKey {}
    }

    public struct ListRecoveryGroupsResponse: AWSDecodableShape {
        public let nextToken: String?
        public let recoveryGroups: [RecoveryGroupOutput]?

        public init(nextToken: String? = nil, recoveryGroups: [RecoveryGroupOutput]? = nil) {
            self.nextToken = nextToken
            self.recoveryGroups = recoveryGroups
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken
            case recoveryGroups
        }
    }

    public struct ListResourceSetsRequest: AWSEncodableShape {
        public static var _encoding = [
            AWSMemberEncoding(label: "maxResults", location: .querystring(locationName: "maxResults")),
            AWSMemberEncoding(label: "nextToken", location: .querystring(locationName: "nextToken"))
        ]

        public let maxResults: Int?
        public let nextToken: String?

        public init(maxResults: Int? = nil, nextToken: String? = nil) {
            self.maxResults = maxResults
            self.nextToken = nextToken
        }

        public func validate(name: String) throws {
            try self.validate(self.maxResults, name: "maxResults", parent: name, max: 1000)
            try self.validate(self.maxResults, name: "maxResults", parent: name, min: 1)
        }

        private enum CodingKeys: CodingKey {}
    }

    public struct ListResourceSetsResponse: AWSDecodableShape {
        public let nextToken: String?
        public let resourceSets: [ResourceSetOutput]?

        public init(nextToken: String? = nil, resourceSets: [ResourceSetOutput]? = nil) {
            self.nextToken = nextToken
            self.resourceSets = resourceSets
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken
            case resourceSets
        }
    }

    public struct ListRulesOutput: AWSDecodableShape {
        /// The resource type that the readiness rule applies to.
        public let resourceType: String
        /// The description of a readiness rule.
        public let ruleDescription: String
        /// The ID for the readiness rule.
        public let ruleId: String

        public init(resourceType: String, ruleDescription: String, ruleId: String) {
            self.resourceType = resourceType
            self.ruleDescription = ruleDescription
            self.ruleId = ruleId
        }

        private enum CodingKeys: String, CodingKey {
            case resourceType
            case ruleDescription
            case ruleId
        }
    }

    public struct ListRulesRequest: AWSEncodableShape {
        public static var _encoding = [
            AWSMemberEncoding(label: "maxResults", location: .querystring(locationName: "maxResults")),
            AWSMemberEncoding(label: "nextToken", location: .querystring(locationName: "nextToken")),
            AWSMemberEncoding(label: "resourceType", location: .querystring(locationName: "resourceType"))
        ]

        public let maxResults: Int?
        public let nextToken: String?
        public let resourceType: String?

        public init(maxResults: Int? = nil, nextToken: String? = nil, resourceType: String? = nil) {
            self.maxResults = maxResults
            self.nextToken = nextToken
            self.resourceType = resourceType
        }

        public func validate(name: String) throws {
            try self.validate(self.maxResults, name: "maxResults", parent: name, max: 1000)
            try self.validate(self.maxResults, name: "maxResults", parent: name, min: 1)
        }

        private enum CodingKeys: CodingKey {}
    }

    public struct ListRulesResponse: AWSDecodableShape {
        public let nextToken: String?
        public let rules: [ListRulesOutput]?

        public init(nextToken: String? = nil, rules: [ListRulesOutput]? = nil) {
            self.nextToken = nextToken
            self.rules = rules
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken
            case rules
        }
    }

    public struct ListTagsForResourcesRequest: AWSEncodableShape {
        public static var _encoding = [
            AWSMemberEncoding(label: "resourceArn", location: .uri(locationName: "resource-arn"))
        ]

        public let resourceArn: String

        public init(resourceArn: String) {
            self.resourceArn = resourceArn
        }

        private enum CodingKeys: CodingKey {}
    }

    public struct ListTagsForResourcesResponse: AWSDecodableShape {
        public let tags: [String: String]?

        public init(tags: [String: String]? = nil) {
            self.tags = tags
        }

        private enum CodingKeys: String, CodingKey {
            case tags
        }
    }

    public struct Message: AWSDecodableShape {
        /// The text of a readiness check message.
        public let messageText: String?

        public init(messageText: String? = nil) {
            self.messageText = messageText
        }

        private enum CodingKeys: String, CodingKey {
            case messageText
        }
    }

    public struct NLBResource: AWSEncodableShape & AWSDecodableShape {
        /// The Network Load Balancer resource Amazon Resource Name (ARN).
        public let arn: String?

        public init(arn: String? = nil) {
            self.arn = arn
        }

        private enum CodingKeys: String, CodingKey {
            case arn
        }
    }

    public struct R53ResourceRecord: AWSEncodableShape & AWSDecodableShape {
        /// The DNS target domain name.
        public let domainName: String?
        /// The Route 53 Resource Record Set ID.
        public let recordSetId: String?

        public init(domainName: String? = nil, recordSetId: String? = nil) {
            self.domainName = domainName
            self.recordSetId = recordSetId
        }

        private enum CodingKeys: String, CodingKey {
            case domainName
            case recordSetId
        }
    }

    public struct ReadinessCheckOutput: AWSDecodableShape {
        /// The Amazon Resource Name (ARN) associated with a readiness check.
        public let readinessCheckArn: String
        /// Name of a readiness check.
        public let readinessCheckName: String?
        /// Name of the resource set to be checked.
        public let resourceSet: String
        public let tags: [String: String]?

        public init(readinessCheckArn: String, readinessCheckName: String? = nil, resourceSet: String, tags: [String: String]? = nil) {
            self.readinessCheckArn = readinessCheckArn
            self.readinessCheckName = readinessCheckName
            self.resourceSet = resourceSet
            self.tags = tags
        }

        private enum CodingKeys: String, CodingKey {
            case readinessCheckArn
            case readinessCheckName
            case resourceSet
            case tags
        }
    }

    public struct ReadinessCheckSummary: AWSDecodableShape {
        /// The readiness status of this readiness check.
        public let readiness: Readiness?
        /// The name of a readiness check.
        public let readinessCheckName: String?

        public init(readiness: Readiness? = nil, readinessCheckName: String? = nil) {
            self.readiness = readiness
            self.readinessCheckName = readinessCheckName
        }

        private enum CodingKeys: String, CodingKey {
            case readiness
            case readinessCheckName
        }
    }

    public struct Recommendation: AWSDecodableShape {
        /// Text of the recommendations that are provided to make an application more recovery resilient.
        public let recommendationText: String

        public init(recommendationText: String) {
            self.recommendationText = recommendationText
        }

        private enum CodingKeys: String, CodingKey {
            case recommendationText
        }
    }

    public struct RecoveryGroupOutput: AWSDecodableShape {
        /// A list of a cell's Amazon Resource Names (ARNs).
        public let cells: [String]
        /// The Amazon Resource Name (ARN) for the recovery group.
        public let recoveryGroupArn: String
        /// The name of the recovery group.
        public let recoveryGroupName: String
        /// The tags associated with the recovery group.
        public let tags: [String: String]?

        public init(cells: [String], recoveryGroupArn: String, recoveryGroupName: String, tags: [String: String]? = nil) {
            self.cells = cells
            self.recoveryGroupArn = recoveryGroupArn
            self.recoveryGroupName = recoveryGroupName
            self.tags = tags
        }

        private enum CodingKeys: String, CodingKey {
            case cells
            case recoveryGroupArn
            case recoveryGroupName
            case tags
        }
    }

    public struct Resource: AWSEncodableShape & AWSDecodableShape {
        /// The component identifier of the resource, generated when DNS target resource is used.
        public let componentId: String?
        /// The DNS target resource.
        public let dnsTargetResource: DNSTargetResource?
        /// A list of recovery group Amazon Resource Names (ARNs) and cell ARNs that this resource is contained within.
        public let readinessScopes: [String]?
        /// The Amazon Resource Name (ARN) of the Amazon Web Services resource.
        public let resourceArn: String?

        public init(componentId: String? = nil, dnsTargetResource: DNSTargetResource? = nil, readinessScopes: [String]? = nil, resourceArn: String? = nil) {
            self.componentId = componentId
            self.dnsTargetResource = dnsTargetResource
            self.readinessScopes = readinessScopes
            self.resourceArn = resourceArn
        }

        private enum CodingKeys: String, CodingKey {
            case componentId
            case dnsTargetResource
            case readinessScopes
            case resourceArn
        }
    }

    public struct ResourceResult: AWSDecodableShape {
        /// The component id of the resource.
        public let componentId: String?
        /// The time (UTC) that the resource was last checked for readiness, in ISO-8601 format.
        @CustomCoding<ISO8601DateCoder>
        public var lastCheckedTimestamp: Date
        /// The readiness of a resource.
        public let readiness: Readiness
        /// The Amazon Resource Name (ARN) of the resource.
        public let resourceArn: String?

        public init(componentId: String? = nil, lastCheckedTimestamp: Date, readiness: Readiness, resourceArn: String? = nil) {
            self.componentId = componentId
            self.lastCheckedTimestamp = lastCheckedTimestamp
            self.readiness = readiness
            self.resourceArn = resourceArn
        }

        private enum CodingKeys: String, CodingKey {
            case componentId
            case lastCheckedTimestamp
            case readiness
            case resourceArn
        }
    }

    public struct ResourceSetOutput: AWSDecodableShape {
        /// A list of resource objects.
        public let resources: [Resource]
        /// The Amazon Resource Name (ARN) for the resource set.
        public let resourceSetArn: String
        /// The name of the resource set.
        public let resourceSetName: String
        /// The resource type of the resources in the resource set. Enter one of the following values for resource type: AWS::ApiGateway::Stage, AWS::ApiGatewayV2::Stage, AWS::AutoScaling::AutoScalingGroup, AWS::CloudWatch::Alarm, AWS::EC2::CustomerGateway, AWS::DynamoDB::Table, AWS::EC2::Volume, AWS::ElasticLoadBalancing::LoadBalancer, AWS::ElasticLoadBalancingV2::LoadBalancer, AWS::Lambda::Function, AWS::MSK::Cluster, AWS::RDS::DBCluster, AWS::Route53::HealthCheck, AWS::SQS::Queue, AWS::SNS::Topic, AWS::SNS::Subscription, AWS::EC2::VPC, AWS::EC2::VPNConnection, AWS::EC2::VPNGateway, AWS::Route53RecoveryReadiness::DNSTargetResource
        public let resourceSetType: String
        public let tags: [String: String]?

        public init(resources: [Resource], resourceSetArn: String, resourceSetName: String, resourceSetType: String, tags: [String: String]? = nil) {
            self.resources = resources
            self.resourceSetArn = resourceSetArn
            self.resourceSetName = resourceSetName
            self.resourceSetType = resourceSetType
            self.tags = tags
        }

        private enum CodingKeys: String, CodingKey {
            case resources
            case resourceSetArn
            case resourceSetName
            case resourceSetType
            case tags
        }
    }

    public struct RuleResult: AWSDecodableShape {
        /// The time the resource was last checked for readiness, in ISO-8601 format, UTC.
        @CustomCoding<ISO8601DateCoder>
        public var lastCheckedTimestamp: Date
        /// Details about the resource's readiness.
        public let messages: [Message]
        /// The readiness at rule level.
        public let readiness: Readiness
        /// The identifier of the rule.
        public let ruleId: String

        public init(lastCheckedTimestamp: Date, messages: [Message], readiness: Readiness, ruleId: String) {
            self.lastCheckedTimestamp = lastCheckedTimestamp
            self.messages = messages
            self.readiness = readiness
            self.ruleId = ruleId
        }

        private enum CodingKeys: String, CodingKey {
            case lastCheckedTimestamp
            case messages
            case readiness
            case ruleId
        }
    }

    public struct TagResourceRequest: AWSEncodableShape {
        public static var _encoding = [
            AWSMemberEncoding(label: "resourceArn", location: .uri(locationName: "resource-arn"))
        ]

        public let resourceArn: String
        public let tags: [String: String]

        public init(resourceArn: String, tags: [String: String]) {
            self.resourceArn = resourceArn
            self.tags = tags
        }

        private enum CodingKeys: String, CodingKey {
            case tags
        }
    }

    public struct TagResourceResponse: AWSDecodableShape {
        public init() {}
    }

    public struct TargetResource: AWSEncodableShape & AWSDecodableShape {
        /// The Network Load Balancer Resource.
        public let nLBResource: NLBResource?
        /// The Route 53 resource.
        public let r53Resource: R53ResourceRecord?

        public init(nLBResource: NLBResource? = nil, r53Resource: R53ResourceRecord? = nil) {
            self.nLBResource = nLBResource
            self.r53Resource = r53Resource
        }

        private enum CodingKeys: String, CodingKey {
            case nLBResource
            case r53Resource
        }
    }

    public struct UntagResourceRequest: AWSEncodableShape {
        public static var _encoding = [
            AWSMemberEncoding(label: "resourceArn", location: .uri(locationName: "resource-arn")),
            AWSMemberEncoding(label: "tagKeys", location: .querystring(locationName: "tagKeys"))
        ]

        public let resourceArn: String
        public let tagKeys: [String]

        public init(resourceArn: String, tagKeys: [String]) {
            self.resourceArn = resourceArn
            self.tagKeys = tagKeys
        }

        private enum CodingKeys: CodingKey {}
    }

    public struct UpdateCellRequest: AWSEncodableShape {
        public static var _encoding = [
            AWSMemberEncoding(label: "cellName", location: .uri(locationName: "cellName"))
        ]

        public let cellName: String
        public let cells: [String]

        public init(cellName: String, cells: [String]) {
            self.cellName = cellName
            self.cells = cells
        }

        private enum CodingKeys: String, CodingKey {
            case cells
        }
    }

    public struct UpdateCellResponse: AWSDecodableShape {
        public let cellArn: String?
        public let cellName: String?
        public let cells: [String]?
        public let parentReadinessScopes: [String]?
        public let tags: [String: String]?

        public init(cellArn: String? = nil, cellName: String? = nil, cells: [String]? = nil, parentReadinessScopes: [String]? = nil, tags: [String: String]? = nil) {
            self.cellArn = cellArn
            self.cellName = cellName
            self.cells = cells
            self.parentReadinessScopes = parentReadinessScopes
            self.tags = tags
        }

        private enum CodingKeys: String, CodingKey {
            case cellArn
            case cellName
            case cells
            case parentReadinessScopes
            case tags
        }
    }

    public struct UpdateReadinessCheckRequest: AWSEncodableShape {
        public static var _encoding = [
            AWSMemberEncoding(label: "readinessCheckName", location: .uri(locationName: "readinessCheckName"))
        ]

        public let readinessCheckName: String
        public let resourceSetName: String

        public init(readinessCheckName: String, resourceSetName: String) {
            self.readinessCheckName = readinessCheckName
            self.resourceSetName = resourceSetName
        }

        private enum CodingKeys: String, CodingKey {
            case resourceSetName
        }
    }

    public struct UpdateReadinessCheckResponse: AWSDecodableShape {
        public let readinessCheckArn: String?
        public let readinessCheckName: String?
        public let resourceSet: String?
        public let tags: [String: String]?

        public init(readinessCheckArn: String? = nil, readinessCheckName: String? = nil, resourceSet: String? = nil, tags: [String: String]? = nil) {
            self.readinessCheckArn = readinessCheckArn
            self.readinessCheckName = readinessCheckName
            self.resourceSet = resourceSet
            self.tags = tags
        }

        private enum CodingKeys: String, CodingKey {
            case readinessCheckArn
            case readinessCheckName
            case resourceSet
            case tags
        }
    }

    public struct UpdateRecoveryGroupRequest: AWSEncodableShape {
        public static var _encoding = [
            AWSMemberEncoding(label: "recoveryGroupName", location: .uri(locationName: "recoveryGroupName"))
        ]

        public let cells: [String]
        public let recoveryGroupName: String

        public init(cells: [String], recoveryGroupName: String) {
            self.cells = cells
            self.recoveryGroupName = recoveryGroupName
        }

        private enum CodingKeys: String, CodingKey {
            case cells
        }
    }

    public struct UpdateRecoveryGroupResponse: AWSDecodableShape {
        public let cells: [String]?
        public let recoveryGroupArn: String?
        public let recoveryGroupName: String?
        public let tags: [String: String]?

        public init(cells: [String]? = nil, recoveryGroupArn: String? = nil, recoveryGroupName: String? = nil, tags: [String: String]? = nil) {
            self.cells = cells
            self.recoveryGroupArn = recoveryGroupArn
            self.recoveryGroupName = recoveryGroupName
            self.tags = tags
        }

        private enum CodingKeys: String, CodingKey {
            case cells
            case recoveryGroupArn
            case recoveryGroupName
            case tags
        }
    }

    public struct UpdateResourceSetRequest: AWSEncodableShape {
        public static var _encoding = [
            AWSMemberEncoding(label: "resourceSetName", location: .uri(locationName: "resourceSetName"))
        ]

        public let resources: [Resource]
        public let resourceSetName: String
        public let resourceSetType: String

        public init(resources: [Resource], resourceSetName: String, resourceSetType: String) {
            self.resources = resources
            self.resourceSetName = resourceSetName
            self.resourceSetType = resourceSetType
        }

        public func validate(name: String) throws {
            try self.validate(self.resourceSetType, name: "resourceSetType", parent: name, pattern: "AWS::[A-Za-z0-9]+::[A-Za-z0-9]+")
        }

        private enum CodingKeys: String, CodingKey {
            case resources
            case resourceSetType
        }
    }

    public struct UpdateResourceSetResponse: AWSDecodableShape {
        public let resources: [Resource]?
        public let resourceSetArn: String?
        public let resourceSetName: String?
        public let resourceSetType: String?
        public let tags: [String: String]?

        public init(resources: [Resource]? = nil, resourceSetArn: String? = nil, resourceSetName: String? = nil, resourceSetType: String? = nil, tags: [String: String]? = nil) {
            self.resources = resources
            self.resourceSetArn = resourceSetArn
            self.resourceSetName = resourceSetName
            self.resourceSetType = resourceSetType
            self.tags = tags
        }

        private enum CodingKeys: String, CodingKey {
            case resources
            case resourceSetArn
            case resourceSetName
            case resourceSetType
            case tags
        }
    }
}
