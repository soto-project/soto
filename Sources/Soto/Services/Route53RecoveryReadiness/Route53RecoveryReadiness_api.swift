//===----------------------------------------------------------------------===//
//
// This source file is part of the Soto for AWS open source project
//
// Copyright (c) 2017-2023 the Soto project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
// See CONTRIBUTORS.txt for the list of Soto project authors
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by https://github.com/soto-project/soto-codegenerator.
// DO NOT EDIT.

@_exported import SotoCore

/// Service object for interacting with AWS Route53RecoveryReadiness service.
///
/// Recovery readiness
public struct Route53RecoveryReadiness: AWSService {
    // MARK: Member variables

    /// Client used for communication with AWS
    public let client: AWSClient
    /// Service configuration
    public let config: AWSServiceConfig

    // MARK: Initialization

    /// Initialize the Route53RecoveryReadiness client
    /// - parameters:
    ///     - client: AWSClient used to process requests
    ///     - region: Region of server you want to communicate with. This will override the partition parameter.
    ///     - partition: AWS partition where service resides, standard (.aws), china (.awscn), government (.awsusgov).
    ///     - endpoint: Custom endpoint URL to use instead of standard AWS servers
    ///     - middleware: Middleware chain used to edit requests before they are sent and responses before they are decoded 
    ///     - timeout: Timeout value for HTTP requests
    ///     - byteBufferAllocator: Allocator for ByteBuffers
    ///     - options: Service options
    public init(
        client: AWSClient,
        region: SotoCore.Region? = nil,
        partition: AWSPartition = .aws,
        endpoint: String? = nil,
        middleware: AWSMiddlewareProtocol? = nil,
        timeout: TimeAmount? = nil,
        byteBufferAllocator: ByteBufferAllocator = ByteBufferAllocator(),
        options: AWSServiceConfig.Options = []
    ) {
        self.client = client
        self.config = AWSServiceConfig(
            region: region,
            partition: region?.partition ?? partition,
            serviceName: "Route53RecoveryReadiness",
            serviceIdentifier: "route53-recovery-readiness",
            serviceProtocol: .restjson,
            apiVersion: "2019-12-02",
            endpoint: endpoint,
            errorType: Route53RecoveryReadinessErrorType.self,
            middleware: middleware,
            timeout: timeout,
            byteBufferAllocator: byteBufferAllocator,
            options: options
        )
    }





    // MARK: API Calls

    /// Creates a cell in an account.
    @Sendable
    public func createCell(_ input: CreateCellRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> CreateCellResponse {
        return try await self.client.execute(
            operation: "CreateCell", 
            path: "/cells", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Creates a cross-account readiness authorization. This lets you authorize another account to work with Route 53 Application Recovery Controller, for example, to check the readiness status of resources in a separate account.
    @Sendable
    public func createCrossAccountAuthorization(_ input: CreateCrossAccountAuthorizationRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> CreateCrossAccountAuthorizationResponse {
        return try await self.client.execute(
            operation: "CreateCrossAccountAuthorization", 
            path: "/crossaccountauthorizations", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Creates a readiness check in an account. A readiness check monitors a resource set in your application, such as a set of Amazon Aurora instances, that Application Recovery Controller is auditing recovery readiness for. The audits run once every minute on every resource that's associated with a readiness check.
    @Sendable
    public func createReadinessCheck(_ input: CreateReadinessCheckRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> CreateReadinessCheckResponse {
        return try await self.client.execute(
            operation: "CreateReadinessCheck", 
            path: "/readinesschecks", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Creates a recovery group in an account. A recovery group corresponds to an application and includes a list of the cells that make up the application.
    @Sendable
    public func createRecoveryGroup(_ input: CreateRecoveryGroupRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> CreateRecoveryGroupResponse {
        return try await self.client.execute(
            operation: "CreateRecoveryGroup", 
            path: "/recoverygroups", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Creates a resource set. A resource set is a set of resources of one type that span multiple cells. You can associate a resource set with a readiness check to monitor the resources for failover readiness.
    @Sendable
    public func createResourceSet(_ input: CreateResourceSetRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> CreateResourceSetResponse {
        return try await self.client.execute(
            operation: "CreateResourceSet", 
            path: "/resourcesets", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Delete a cell. When successful, the response code is 204, with no response body.
    @Sendable
    public func deleteCell(_ input: DeleteCellRequest, logger: Logger = AWSClient.loggingDisabled) async throws {
        return try await self.client.execute(
            operation: "DeleteCell", 
            path: "/cells/{CellName}", 
            httpMethod: .DELETE, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Deletes cross account readiness authorization.
    @Sendable
    public func deleteCrossAccountAuthorization(_ input: DeleteCrossAccountAuthorizationRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DeleteCrossAccountAuthorizationResponse {
        return try await self.client.execute(
            operation: "DeleteCrossAccountAuthorization", 
            path: "/crossaccountauthorizations/{CrossAccountAuthorization}", 
            httpMethod: .DELETE, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Deletes a readiness check.
    @Sendable
    public func deleteReadinessCheck(_ input: DeleteReadinessCheckRequest, logger: Logger = AWSClient.loggingDisabled) async throws {
        return try await self.client.execute(
            operation: "DeleteReadinessCheck", 
            path: "/readinesschecks/{ReadinessCheckName}", 
            httpMethod: .DELETE, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Deletes a recovery group.
    @Sendable
    public func deleteRecoveryGroup(_ input: DeleteRecoveryGroupRequest, logger: Logger = AWSClient.loggingDisabled) async throws {
        return try await self.client.execute(
            operation: "DeleteRecoveryGroup", 
            path: "/recoverygroups/{RecoveryGroupName}", 
            httpMethod: .DELETE, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Deletes a resource set.
    @Sendable
    public func deleteResourceSet(_ input: DeleteResourceSetRequest, logger: Logger = AWSClient.loggingDisabled) async throws {
        return try await self.client.execute(
            operation: "DeleteResourceSet", 
            path: "/resourcesets/{ResourceSetName}", 
            httpMethod: .DELETE, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Gets recommendations about architecture designs for improving resiliency for an application, based on a recovery group.
    @Sendable
    public func getArchitectureRecommendations(_ input: GetArchitectureRecommendationsRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> GetArchitectureRecommendationsResponse {
        return try await self.client.execute(
            operation: "GetArchitectureRecommendations", 
            path: "/recoverygroups/{RecoveryGroupName}/architectureRecommendations", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Gets information about a cell including cell name, cell Amazon Resource Name (ARN), ARNs of nested cells for this cell, and a list of those cell ARNs with their associated recovery group ARNs.
    @Sendable
    public func getCell(_ input: GetCellRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> GetCellResponse {
        return try await self.client.execute(
            operation: "GetCell", 
            path: "/cells/{CellName}", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Gets readiness for a cell. Aggregates the readiness of all the resources that are associated with the cell into a single value.
    @Sendable
    public func getCellReadinessSummary(_ input: GetCellReadinessSummaryRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> GetCellReadinessSummaryResponse {
        return try await self.client.execute(
            operation: "GetCellReadinessSummary", 
            path: "/cellreadiness/{CellName}", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Gets details about a readiness check.
    @Sendable
    public func getReadinessCheck(_ input: GetReadinessCheckRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> GetReadinessCheckResponse {
        return try await self.client.execute(
            operation: "GetReadinessCheck", 
            path: "/readinesschecks/{ReadinessCheckName}", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Gets individual readiness status for a readiness check. To see the overall readiness status for a recovery group, that considers the readiness status for all the readiness checks in the recovery group, use GetRecoveryGroupReadinessSummary.
    @Sendable
    public func getReadinessCheckResourceStatus(_ input: GetReadinessCheckResourceStatusRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> GetReadinessCheckResourceStatusResponse {
        return try await self.client.execute(
            operation: "GetReadinessCheckResourceStatus", 
            path: "/readinesschecks/{ReadinessCheckName}/resource/{ResourceIdentifier}/status", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Gets the readiness status for an individual readiness check. To see the overall readiness status for a recovery group, that considers the readiness status for all the readiness checks in a recovery group, use GetRecoveryGroupReadinessSummary.
    @Sendable
    public func getReadinessCheckStatus(_ input: GetReadinessCheckStatusRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> GetReadinessCheckStatusResponse {
        return try await self.client.execute(
            operation: "GetReadinessCheckStatus", 
            path: "/readinesschecks/{ReadinessCheckName}/status", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Gets details about a recovery group, including a list of the cells that are included in it.
    @Sendable
    public func getRecoveryGroup(_ input: GetRecoveryGroupRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> GetRecoveryGroupResponse {
        return try await self.client.execute(
            operation: "GetRecoveryGroup", 
            path: "/recoverygroups/{RecoveryGroupName}", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Displays a summary of information about a recovery group's readiness status. Includes the readiness checks for resources in the recovery group and the readiness status of each one.
    @Sendable
    public func getRecoveryGroupReadinessSummary(_ input: GetRecoveryGroupReadinessSummaryRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> GetRecoveryGroupReadinessSummaryResponse {
        return try await self.client.execute(
            operation: "GetRecoveryGroupReadinessSummary", 
            path: "/recoverygroupreadiness/{RecoveryGroupName}", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Displays the details about a resource set, including a list of the resources in the set.
    @Sendable
    public func getResourceSet(_ input: GetResourceSetRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> GetResourceSetResponse {
        return try await self.client.execute(
            operation: "GetResourceSet", 
            path: "/resourcesets/{ResourceSetName}", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Lists the cells for an account.
    @Sendable
    public func listCells(_ input: ListCellsRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> ListCellsResponse {
        return try await self.client.execute(
            operation: "ListCells", 
            path: "/cells", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Lists the cross-account readiness authorizations that are in place for an account.
    @Sendable
    public func listCrossAccountAuthorizations(_ input: ListCrossAccountAuthorizationsRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> ListCrossAccountAuthorizationsResponse {
        return try await self.client.execute(
            operation: "ListCrossAccountAuthorizations", 
            path: "/crossaccountauthorizations", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Lists the readiness checks for an account.
    @Sendable
    public func listReadinessChecks(_ input: ListReadinessChecksRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> ListReadinessChecksResponse {
        return try await self.client.execute(
            operation: "ListReadinessChecks", 
            path: "/readinesschecks", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Lists the recovery groups in an account.
    @Sendable
    public func listRecoveryGroups(_ input: ListRecoveryGroupsRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> ListRecoveryGroupsResponse {
        return try await self.client.execute(
            operation: "ListRecoveryGroups", 
            path: "/recoverygroups", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Lists the resource sets in an account.
    @Sendable
    public func listResourceSets(_ input: ListResourceSetsRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> ListResourceSetsResponse {
        return try await self.client.execute(
            operation: "ListResourceSets", 
            path: "/resourcesets", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Lists all readiness rules, or lists the readiness rules for a specific resource type.
    @Sendable
    public func listRules(_ input: ListRulesRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> ListRulesResponse {
        return try await self.client.execute(
            operation: "ListRules", 
            path: "/rules", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Lists the tags for a resource.
    @Sendable
    public func listTagsForResources(_ input: ListTagsForResourcesRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> ListTagsForResourcesResponse {
        return try await self.client.execute(
            operation: "ListTagsForResources", 
            path: "/tags/{ResourceArn}", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Adds a tag to a resource.
    @Sendable
    public func tagResource(_ input: TagResourceRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> TagResourceResponse {
        return try await self.client.execute(
            operation: "TagResource", 
            path: "/tags/{ResourceArn}", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Removes a tag from a resource.
    @Sendable
    public func untagResource(_ input: UntagResourceRequest, logger: Logger = AWSClient.loggingDisabled) async throws {
        return try await self.client.execute(
            operation: "UntagResource", 
            path: "/tags/{ResourceArn}", 
            httpMethod: .DELETE, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Updates a cell to replace the list of nested cells with a new list of nested cells.
    @Sendable
    public func updateCell(_ input: UpdateCellRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> UpdateCellResponse {
        return try await self.client.execute(
            operation: "UpdateCell", 
            path: "/cells/{CellName}", 
            httpMethod: .PUT, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Updates a readiness check.
    @Sendable
    public func updateReadinessCheck(_ input: UpdateReadinessCheckRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> UpdateReadinessCheckResponse {
        return try await self.client.execute(
            operation: "UpdateReadinessCheck", 
            path: "/readinesschecks/{ReadinessCheckName}", 
            httpMethod: .PUT, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Updates a recovery group.
    @Sendable
    public func updateRecoveryGroup(_ input: UpdateRecoveryGroupRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> UpdateRecoveryGroupResponse {
        return try await self.client.execute(
            operation: "UpdateRecoveryGroup", 
            path: "/recoverygroups/{RecoveryGroupName}", 
            httpMethod: .PUT, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Updates a resource set.
    @Sendable
    public func updateResourceSet(_ input: UpdateResourceSetRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> UpdateResourceSetResponse {
        return try await self.client.execute(
            operation: "UpdateResourceSet", 
            path: "/resourcesets/{ResourceSetName}", 
            httpMethod: .PUT, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
}

extension Route53RecoveryReadiness {
    /// Initializer required by `AWSService.with(middlewares:timeout:byteBufferAllocator:options)`. You are not able to use this initializer directly as there are not public
    /// initializers for `AWSServiceConfig.Patch`. Please use `AWSService.with(middlewares:timeout:byteBufferAllocator:options)` instead.
    public init(from: Route53RecoveryReadiness, patch: AWSServiceConfig.Patch) {
        self.client = from.client
        self.config = from.config.with(patch: patch)
    }
}

// MARK: Paginators

@available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
extension Route53RecoveryReadiness {
    /// Gets readiness for a cell. Aggregates the readiness of all the resources that are associated with the cell into a single value.
    /// Return PaginatorSequence for operation.
    ///
    /// - Parameters:
    ///   - input: Input for request
    ///   - logger: Logger used flot logging
    public func getCellReadinessSummaryPaginator(
        _ input: GetCellReadinessSummaryRequest,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<GetCellReadinessSummaryRequest, GetCellReadinessSummaryResponse> {
        return .init(
            input: input,
            command: self.getCellReadinessSummary,
            inputKey: \GetCellReadinessSummaryRequest.nextToken,
            outputKey: \GetCellReadinessSummaryResponse.nextToken,
            logger: logger
        )
    }

    /// Gets individual readiness status for a readiness check. To see the overall readiness status for a recovery group, that considers the readiness status for all the readiness checks in the recovery group, use GetRecoveryGroupReadinessSummary.
    /// Return PaginatorSequence for operation.
    ///
    /// - Parameters:
    ///   - input: Input for request
    ///   - logger: Logger used flot logging
    public func getReadinessCheckResourceStatusPaginator(
        _ input: GetReadinessCheckResourceStatusRequest,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<GetReadinessCheckResourceStatusRequest, GetReadinessCheckResourceStatusResponse> {
        return .init(
            input: input,
            command: self.getReadinessCheckResourceStatus,
            inputKey: \GetReadinessCheckResourceStatusRequest.nextToken,
            outputKey: \GetReadinessCheckResourceStatusResponse.nextToken,
            logger: logger
        )
    }

    /// Gets the readiness status for an individual readiness check. To see the overall readiness status for a recovery group, that considers the readiness status for all the readiness checks in a recovery group, use GetRecoveryGroupReadinessSummary.
    /// Return PaginatorSequence for operation.
    ///
    /// - Parameters:
    ///   - input: Input for request
    ///   - logger: Logger used flot logging
    public func getReadinessCheckStatusPaginator(
        _ input: GetReadinessCheckStatusRequest,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<GetReadinessCheckStatusRequest, GetReadinessCheckStatusResponse> {
        return .init(
            input: input,
            command: self.getReadinessCheckStatus,
            inputKey: \GetReadinessCheckStatusRequest.nextToken,
            outputKey: \GetReadinessCheckStatusResponse.nextToken,
            logger: logger
        )
    }

    /// Displays a summary of information about a recovery group's readiness status. Includes the readiness checks for resources in the recovery group and the readiness status of each one.
    /// Return PaginatorSequence for operation.
    ///
    /// - Parameters:
    ///   - input: Input for request
    ///   - logger: Logger used flot logging
    public func getRecoveryGroupReadinessSummaryPaginator(
        _ input: GetRecoveryGroupReadinessSummaryRequest,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<GetRecoveryGroupReadinessSummaryRequest, GetRecoveryGroupReadinessSummaryResponse> {
        return .init(
            input: input,
            command: self.getRecoveryGroupReadinessSummary,
            inputKey: \GetRecoveryGroupReadinessSummaryRequest.nextToken,
            outputKey: \GetRecoveryGroupReadinessSummaryResponse.nextToken,
            logger: logger
        )
    }

    /// Lists the cells for an account.
    /// Return PaginatorSequence for operation.
    ///
    /// - Parameters:
    ///   - input: Input for request
    ///   - logger: Logger used flot logging
    public func listCellsPaginator(
        _ input: ListCellsRequest,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<ListCellsRequest, ListCellsResponse> {
        return .init(
            input: input,
            command: self.listCells,
            inputKey: \ListCellsRequest.nextToken,
            outputKey: \ListCellsResponse.nextToken,
            logger: logger
        )
    }

    /// Lists the cross-account readiness authorizations that are in place for an account.
    /// Return PaginatorSequence for operation.
    ///
    /// - Parameters:
    ///   - input: Input for request
    ///   - logger: Logger used flot logging
    public func listCrossAccountAuthorizationsPaginator(
        _ input: ListCrossAccountAuthorizationsRequest,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<ListCrossAccountAuthorizationsRequest, ListCrossAccountAuthorizationsResponse> {
        return .init(
            input: input,
            command: self.listCrossAccountAuthorizations,
            inputKey: \ListCrossAccountAuthorizationsRequest.nextToken,
            outputKey: \ListCrossAccountAuthorizationsResponse.nextToken,
            logger: logger
        )
    }

    /// Lists the readiness checks for an account.
    /// Return PaginatorSequence for operation.
    ///
    /// - Parameters:
    ///   - input: Input for request
    ///   - logger: Logger used flot logging
    public func listReadinessChecksPaginator(
        _ input: ListReadinessChecksRequest,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<ListReadinessChecksRequest, ListReadinessChecksResponse> {
        return .init(
            input: input,
            command: self.listReadinessChecks,
            inputKey: \ListReadinessChecksRequest.nextToken,
            outputKey: \ListReadinessChecksResponse.nextToken,
            logger: logger
        )
    }

    /// Lists the recovery groups in an account.
    /// Return PaginatorSequence for operation.
    ///
    /// - Parameters:
    ///   - input: Input for request
    ///   - logger: Logger used flot logging
    public func listRecoveryGroupsPaginator(
        _ input: ListRecoveryGroupsRequest,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<ListRecoveryGroupsRequest, ListRecoveryGroupsResponse> {
        return .init(
            input: input,
            command: self.listRecoveryGroups,
            inputKey: \ListRecoveryGroupsRequest.nextToken,
            outputKey: \ListRecoveryGroupsResponse.nextToken,
            logger: logger
        )
    }

    /// Lists the resource sets in an account.
    /// Return PaginatorSequence for operation.
    ///
    /// - Parameters:
    ///   - input: Input for request
    ///   - logger: Logger used flot logging
    public func listResourceSetsPaginator(
        _ input: ListResourceSetsRequest,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<ListResourceSetsRequest, ListResourceSetsResponse> {
        return .init(
            input: input,
            command: self.listResourceSets,
            inputKey: \ListResourceSetsRequest.nextToken,
            outputKey: \ListResourceSetsResponse.nextToken,
            logger: logger
        )
    }

    /// Lists all readiness rules, or lists the readiness rules for a specific resource type.
    /// Return PaginatorSequence for operation.
    ///
    /// - Parameters:
    ///   - input: Input for request
    ///   - logger: Logger used flot logging
    public func listRulesPaginator(
        _ input: ListRulesRequest,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<ListRulesRequest, ListRulesResponse> {
        return .init(
            input: input,
            command: self.listRules,
            inputKey: \ListRulesRequest.nextToken,
            outputKey: \ListRulesResponse.nextToken,
            logger: logger
        )
    }
}

extension Route53RecoveryReadiness.GetCellReadinessSummaryRequest: AWSPaginateToken {
    public func usingPaginationToken(_ token: String) -> Route53RecoveryReadiness.GetCellReadinessSummaryRequest {
        return .init(
            cellName: self.cellName,
            maxResults: self.maxResults,
            nextToken: token
        )
    }
}

extension Route53RecoveryReadiness.GetReadinessCheckResourceStatusRequest: AWSPaginateToken {
    public func usingPaginationToken(_ token: String) -> Route53RecoveryReadiness.GetReadinessCheckResourceStatusRequest {
        return .init(
            maxResults: self.maxResults,
            nextToken: token,
            readinessCheckName: self.readinessCheckName,
            resourceIdentifier: self.resourceIdentifier
        )
    }
}

extension Route53RecoveryReadiness.GetReadinessCheckStatusRequest: AWSPaginateToken {
    public func usingPaginationToken(_ token: String) -> Route53RecoveryReadiness.GetReadinessCheckStatusRequest {
        return .init(
            maxResults: self.maxResults,
            nextToken: token,
            readinessCheckName: self.readinessCheckName
        )
    }
}

extension Route53RecoveryReadiness.GetRecoveryGroupReadinessSummaryRequest: AWSPaginateToken {
    public func usingPaginationToken(_ token: String) -> Route53RecoveryReadiness.GetRecoveryGroupReadinessSummaryRequest {
        return .init(
            maxResults: self.maxResults,
            nextToken: token,
            recoveryGroupName: self.recoveryGroupName
        )
    }
}

extension Route53RecoveryReadiness.ListCellsRequest: AWSPaginateToken {
    public func usingPaginationToken(_ token: String) -> Route53RecoveryReadiness.ListCellsRequest {
        return .init(
            maxResults: self.maxResults,
            nextToken: token
        )
    }
}

extension Route53RecoveryReadiness.ListCrossAccountAuthorizationsRequest: AWSPaginateToken {
    public func usingPaginationToken(_ token: String) -> Route53RecoveryReadiness.ListCrossAccountAuthorizationsRequest {
        return .init(
            maxResults: self.maxResults,
            nextToken: token
        )
    }
}

extension Route53RecoveryReadiness.ListReadinessChecksRequest: AWSPaginateToken {
    public func usingPaginationToken(_ token: String) -> Route53RecoveryReadiness.ListReadinessChecksRequest {
        return .init(
            maxResults: self.maxResults,
            nextToken: token
        )
    }
}

extension Route53RecoveryReadiness.ListRecoveryGroupsRequest: AWSPaginateToken {
    public func usingPaginationToken(_ token: String) -> Route53RecoveryReadiness.ListRecoveryGroupsRequest {
        return .init(
            maxResults: self.maxResults,
            nextToken: token
        )
    }
}

extension Route53RecoveryReadiness.ListResourceSetsRequest: AWSPaginateToken {
    public func usingPaginationToken(_ token: String) -> Route53RecoveryReadiness.ListResourceSetsRequest {
        return .init(
            maxResults: self.maxResults,
            nextToken: token
        )
    }
}

extension Route53RecoveryReadiness.ListRulesRequest: AWSPaginateToken {
    public func usingPaginationToken(_ token: String) -> Route53RecoveryReadiness.ListRulesRequest {
        return .init(
            maxResults: self.maxResults,
            nextToken: token,
            resourceType: self.resourceType
        )
    }
}
