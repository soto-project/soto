//===----------------------------------------------------------------------===//
//
// This source file is part of the Soto for AWS open source project
//
// Copyright (c) 2017-2021 the Soto project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
// See CONTRIBUTORS.txt for the list of Soto project authors
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by https://github.com/soto-project/soto-codegenerator.
// DO NOT EDIT.

#if compiler(>=5.5) && canImport(_Concurrency)

import SotoCore

// MARK: Paginators

@available(macOS 9999, iOS 9999, watchOS 9999, tvOS 9999, *)
extension Route53RecoveryReadiness {
    ///  Returns information about readiness of a Cell.
    /// Return PaginatorSequence for operation.
    ///
    /// - Parameters:
    ///   - input: Input for request
    ///   - logger: Logger used flot logging
    ///   - eventLoop: EventLoop to run this process on
    public func getCellReadinessSummaryPaginator(
        _ input: GetCellReadinessSummaryRequest,
        logger: Logger = AWSClient.loggingDisabled,
        on eventLoop: EventLoop? = nil
    ) -> AWSClient.PaginatorSequence<GetCellReadinessSummaryRequest, GetCellReadinessSummaryResponse> {
        return .init(
            input: input,
            command: getCellReadinessSummary,
            inputKey: \GetCellReadinessSummaryRequest.nextToken,
            outputKey: \GetCellReadinessSummaryResponse.nextToken,
            logger: logger,
            on: eventLoop
        )
    }

    ///  Returns detailed information about the status of an individual resource within a Readiness Check's Resource Set.
    /// Return PaginatorSequence for operation.
    ///
    /// - Parameters:
    ///   - input: Input for request
    ///   - logger: Logger used flot logging
    ///   - eventLoop: EventLoop to run this process on
    public func getReadinessCheckResourceStatusPaginator(
        _ input: GetReadinessCheckResourceStatusRequest,
        logger: Logger = AWSClient.loggingDisabled,
        on eventLoop: EventLoop? = nil
    ) -> AWSClient.PaginatorSequence<GetReadinessCheckResourceStatusRequest, GetReadinessCheckResourceStatusResponse> {
        return .init(
            input: input,
            command: getReadinessCheckResourceStatus,
            inputKey: \GetReadinessCheckResourceStatusRequest.nextToken,
            outputKey: \GetReadinessCheckResourceStatusResponse.nextToken,
            logger: logger,
            on: eventLoop
        )
    }

    ///  Returns information about the status of a Readiness Check.
    /// Return PaginatorSequence for operation.
    ///
    /// - Parameters:
    ///   - input: Input for request
    ///   - logger: Logger used flot logging
    ///   - eventLoop: EventLoop to run this process on
    public func getReadinessCheckStatusPaginator(
        _ input: GetReadinessCheckStatusRequest,
        logger: Logger = AWSClient.loggingDisabled,
        on eventLoop: EventLoop? = nil
    ) -> AWSClient.PaginatorSequence<GetReadinessCheckStatusRequest, GetReadinessCheckStatusResponse> {
        return .init(
            input: input,
            command: getReadinessCheckStatus,
            inputKey: \GetReadinessCheckStatusRequest.nextToken,
            outputKey: \GetReadinessCheckStatusResponse.nextToken,
            logger: logger,
            on: eventLoop
        )
    }

    ///  Returns information about a Recovery Group.
    /// Return PaginatorSequence for operation.
    ///
    /// - Parameters:
    ///   - input: Input for request
    ///   - logger: Logger used flot logging
    ///   - eventLoop: EventLoop to run this process on
    public func getRecoveryGroupReadinessSummaryPaginator(
        _ input: GetRecoveryGroupReadinessSummaryRequest,
        logger: Logger = AWSClient.loggingDisabled,
        on eventLoop: EventLoop? = nil
    ) -> AWSClient.PaginatorSequence<GetRecoveryGroupReadinessSummaryRequest, GetRecoveryGroupReadinessSummaryResponse> {
        return .init(
            input: input,
            command: getRecoveryGroupReadinessSummary,
            inputKey: \GetRecoveryGroupReadinessSummaryRequest.nextToken,
            outputKey: \GetRecoveryGroupReadinessSummaryResponse.nextToken,
            logger: logger,
            on: eventLoop
        )
    }

    ///  Returns a collection of Cells.
    /// Return PaginatorSequence for operation.
    ///
    /// - Parameters:
    ///   - input: Input for request
    ///   - logger: Logger used flot logging
    ///   - eventLoop: EventLoop to run this process on
    public func listCellsPaginator(
        _ input: ListCellsRequest,
        logger: Logger = AWSClient.loggingDisabled,
        on eventLoop: EventLoop? = nil
    ) -> AWSClient.PaginatorSequence<ListCellsRequest, ListCellsResponse> {
        return .init(
            input: input,
            command: listCells,
            inputKey: \ListCellsRequest.nextToken,
            outputKey: \ListCellsResponse.nextToken,
            logger: logger,
            on: eventLoop
        )
    }

    ///  Returns a collection of cross account readiness authorizations.
    /// Return PaginatorSequence for operation.
    ///
    /// - Parameters:
    ///   - input: Input for request
    ///   - logger: Logger used flot logging
    ///   - eventLoop: EventLoop to run this process on
    public func listCrossAccountAuthorizationsPaginator(
        _ input: ListCrossAccountAuthorizationsRequest,
        logger: Logger = AWSClient.loggingDisabled,
        on eventLoop: EventLoop? = nil
    ) -> AWSClient.PaginatorSequence<ListCrossAccountAuthorizationsRequest, ListCrossAccountAuthorizationsResponse> {
        return .init(
            input: input,
            command: listCrossAccountAuthorizations,
            inputKey: \ListCrossAccountAuthorizationsRequest.nextToken,
            outputKey: \ListCrossAccountAuthorizationsResponse.nextToken,
            logger: logger,
            on: eventLoop
        )
    }

    ///  Returns a collection of Readiness Checks.
    /// Return PaginatorSequence for operation.
    ///
    /// - Parameters:
    ///   - input: Input for request
    ///   - logger: Logger used flot logging
    ///   - eventLoop: EventLoop to run this process on
    public func listReadinessChecksPaginator(
        _ input: ListReadinessChecksRequest,
        logger: Logger = AWSClient.loggingDisabled,
        on eventLoop: EventLoop? = nil
    ) -> AWSClient.PaginatorSequence<ListReadinessChecksRequest, ListReadinessChecksResponse> {
        return .init(
            input: input,
            command: listReadinessChecks,
            inputKey: \ListReadinessChecksRequest.nextToken,
            outputKey: \ListReadinessChecksResponse.nextToken,
            logger: logger,
            on: eventLoop
        )
    }

    ///  Returns a collection of Recovery Groups.
    /// Return PaginatorSequence for operation.
    ///
    /// - Parameters:
    ///   - input: Input for request
    ///   - logger: Logger used flot logging
    ///   - eventLoop: EventLoop to run this process on
    public func listRecoveryGroupsPaginator(
        _ input: ListRecoveryGroupsRequest,
        logger: Logger = AWSClient.loggingDisabled,
        on eventLoop: EventLoop? = nil
    ) -> AWSClient.PaginatorSequence<ListRecoveryGroupsRequest, ListRecoveryGroupsResponse> {
        return .init(
            input: input,
            command: listRecoveryGroups,
            inputKey: \ListRecoveryGroupsRequest.nextToken,
            outputKey: \ListRecoveryGroupsResponse.nextToken,
            logger: logger,
            on: eventLoop
        )
    }

    ///  Returns a collection of Resource Sets.
    /// Return PaginatorSequence for operation.
    ///
    /// - Parameters:
    ///   - input: Input for request
    ///   - logger: Logger used flot logging
    ///   - eventLoop: EventLoop to run this process on
    public func listResourceSetsPaginator(
        _ input: ListResourceSetsRequest,
        logger: Logger = AWSClient.loggingDisabled,
        on eventLoop: EventLoop? = nil
    ) -> AWSClient.PaginatorSequence<ListResourceSetsRequest, ListResourceSetsResponse> {
        return .init(
            input: input,
            command: listResourceSets,
            inputKey: \ListResourceSetsRequest.nextToken,
            outputKey: \ListResourceSetsResponse.nextToken,
            logger: logger,
            on: eventLoop
        )
    }

    ///  Returns a collection of rules that are applied as part of Readiness Checks.
    /// Return PaginatorSequence for operation.
    ///
    /// - Parameters:
    ///   - input: Input for request
    ///   - logger: Logger used flot logging
    ///   - eventLoop: EventLoop to run this process on
    public func listRulesPaginator(
        _ input: ListRulesRequest,
        logger: Logger = AWSClient.loggingDisabled,
        on eventLoop: EventLoop? = nil
    ) -> AWSClient.PaginatorSequence<ListRulesRequest, ListRulesResponse> {
        return .init(
            input: input,
            command: listRules,
            inputKey: \ListRulesRequest.nextToken,
            outputKey: \ListRulesResponse.nextToken,
            logger: logger,
            on: eventLoop
        )
    }
}

#endif // compiler(>=5.5) && canImport(_Concurrency)
