//===----------------------------------------------------------------------===//
//
// This source file is part of the Soto for AWS open source project
//
// Copyright (c) 2017-2023 the Soto project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
// See CONTRIBUTORS.txt for the list of Soto project authors
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by https://github.com/soto-project/soto-codegenerator.
// DO NOT EDIT.

#if os(Linux) && compiler(<5.10)
// swift-corelibs-foundation hasn't been updated with Sendable conformances
@preconcurrency import Foundation
#else
import Foundation
#endif
@_spi(SotoInternal) import SotoCore

extension Batch {
    // MARK: Enums

    public enum ArrayJobDependency: String, CustomStringConvertible, Codable, Sendable, CodingKeyRepresentable {
        case nToN = "N_TO_N"
        case sequential = "SEQUENTIAL"
        public var description: String { return self.rawValue }
    }

    public enum AssignPublicIp: String, CustomStringConvertible, Codable, Sendable, CodingKeyRepresentable {
        case disabled = "DISABLED"
        case enabled = "ENABLED"
        public var description: String { return self.rawValue }
    }

    public enum CEState: String, CustomStringConvertible, Codable, Sendable, CodingKeyRepresentable {
        case disabled = "DISABLED"
        case enabled = "ENABLED"
        public var description: String { return self.rawValue }
    }

    public enum CEStatus: String, CustomStringConvertible, Codable, Sendable, CodingKeyRepresentable {
        case creating = "CREATING"
        case deleted = "DELETED"
        case deleting = "DELETING"
        case invalid = "INVALID"
        case updating = "UPDATING"
        case valid = "VALID"
        public var description: String { return self.rawValue }
    }

    public enum CEType: String, CustomStringConvertible, Codable, Sendable, CodingKeyRepresentable {
        case managed = "MANAGED"
        case unmanaged = "UNMANAGED"
        public var description: String { return self.rawValue }
    }

    public enum CRAllocationStrategy: String, CustomStringConvertible, Codable, Sendable, CodingKeyRepresentable {
        case bestFit = "BEST_FIT"
        case bestFitProgressive = "BEST_FIT_PROGRESSIVE"
        case spotCapacityOptimized = "SPOT_CAPACITY_OPTIMIZED"
        case spotPriceCapacityOptimized = "SPOT_PRICE_CAPACITY_OPTIMIZED"
        public var description: String { return self.rawValue }
    }

    public enum CRType: String, CustomStringConvertible, Codable, Sendable, CodingKeyRepresentable {
        case ec2 = "EC2"
        case fargate = "FARGATE"
        case fargateSpot = "FARGATE_SPOT"
        case spot = "SPOT"
        public var description: String { return self.rawValue }
    }

    public enum CRUpdateAllocationStrategy: String, CustomStringConvertible, Codable, Sendable, CodingKeyRepresentable {
        case bestFitProgressive = "BEST_FIT_PROGRESSIVE"
        case spotCapacityOptimized = "SPOT_CAPACITY_OPTIMIZED"
        case spotPriceCapacityOptimized = "SPOT_PRICE_CAPACITY_OPTIMIZED"
        public var description: String { return self.rawValue }
    }

    public enum DeviceCgroupPermission: String, CustomStringConvertible, Codable, Sendable, CodingKeyRepresentable {
        case mknod = "MKNOD"
        case read = "READ"
        case write = "WRITE"
        public var description: String { return self.rawValue }
    }

    public enum EFSAuthorizationConfigIAM: String, CustomStringConvertible, Codable, Sendable, CodingKeyRepresentable {
        case disabled = "DISABLED"
        case enabled = "ENABLED"
        public var description: String { return self.rawValue }
    }

    public enum EFSTransitEncryption: String, CustomStringConvertible, Codable, Sendable, CodingKeyRepresentable {
        case disabled = "DISABLED"
        case enabled = "ENABLED"
        public var description: String { return self.rawValue }
    }

    public enum JQState: String, CustomStringConvertible, Codable, Sendable, CodingKeyRepresentable {
        case disabled = "DISABLED"
        case enabled = "ENABLED"
        public var description: String { return self.rawValue }
    }

    public enum JQStatus: String, CustomStringConvertible, Codable, Sendable, CodingKeyRepresentable {
        case creating = "CREATING"
        case deleted = "DELETED"
        case deleting = "DELETING"
        case invalid = "INVALID"
        case updating = "UPDATING"
        case valid = "VALID"
        public var description: String { return self.rawValue }
    }

    public enum JobDefinitionType: String, CustomStringConvertible, Codable, Sendable, CodingKeyRepresentable {
        case container = "container"
        case multinode = "multinode"
        public var description: String { return self.rawValue }
    }

    public enum JobStateTimeLimitActionsAction: String, CustomStringConvertible, Codable, Sendable, CodingKeyRepresentable {
        case cancel = "CANCEL"
        public var description: String { return self.rawValue }
    }

    public enum JobStateTimeLimitActionsState: String, CustomStringConvertible, Codable, Sendable, CodingKeyRepresentable {
        case runnable = "RUNNABLE"
        public var description: String { return self.rawValue }
    }

    public enum JobStatus: String, CustomStringConvertible, Codable, Sendable, CodingKeyRepresentable {
        case failed = "FAILED"
        case pending = "PENDING"
        case runnable = "RUNNABLE"
        case running = "RUNNING"
        case starting = "STARTING"
        case submitted = "SUBMITTED"
        case succeeded = "SUCCEEDED"
        public var description: String { return self.rawValue }
    }

    public enum LogDriver: String, CustomStringConvertible, Codable, Sendable, CodingKeyRepresentable {
        case awslogs = "awslogs"
        case fluentd = "fluentd"
        case gelf = "gelf"
        case journald = "journald"
        case jsonFile = "json-file"
        case splunk = "splunk"
        case syslog = "syslog"
        public var description: String { return self.rawValue }
    }

    public enum OrchestrationType: String, CustomStringConvertible, Codable, Sendable, CodingKeyRepresentable {
        case ecs = "ECS"
        case eks = "EKS"
        public var description: String { return self.rawValue }
    }

    public enum PlatformCapability: String, CustomStringConvertible, Codable, Sendable, CodingKeyRepresentable {
        case ec2 = "EC2"
        case fargate = "FARGATE"
        public var description: String { return self.rawValue }
    }

    public enum ResourceType: String, CustomStringConvertible, Codable, Sendable, CodingKeyRepresentable {
        case gpu = "GPU"
        case memory = "MEMORY"
        case vcpu = "VCPU"
        public var description: String { return self.rawValue }
    }

    public enum RetryAction: String, CustomStringConvertible, Codable, Sendable, CodingKeyRepresentable {
        case exit = "EXIT"
        case retry = "RETRY"
        public var description: String { return self.rawValue }
    }

    // MARK: Shapes

    public struct ArrayProperties: AWSEncodableShape {
        /// The size of the array job.
        public let size: Int?

        public init(size: Int? = nil) {
            self.size = size
        }

        private enum CodingKeys: String, CodingKey {
            case size = "size"
        }
    }

    public struct ArrayPropertiesDetail: AWSDecodableShape {
        /// The job index within the array that's associated with this job. This parameter is returned for array job children.
        public let index: Int?
        /// The size of the array job. This parameter is returned for parent array jobs.
        public let size: Int?
        /// A summary of the number of array job children in each available job status. This parameter is returned for parent array jobs.
        public let statusSummary: [String: Int]?

        public init(index: Int? = nil, size: Int? = nil, statusSummary: [String: Int]? = nil) {
            self.index = index
            self.size = size
            self.statusSummary = statusSummary
        }

        private enum CodingKeys: String, CodingKey {
            case index = "index"
            case size = "size"
            case statusSummary = "statusSummary"
        }
    }

    public struct ArrayPropertiesSummary: AWSDecodableShape {
        /// The job index within the array that's associated with this job. This parameter is returned for children of array jobs.
        public let index: Int?
        /// The size of the array job. This parameter is returned for parent array jobs.
        public let size: Int?

        public init(index: Int? = nil, size: Int? = nil) {
            self.index = index
            self.size = size
        }

        private enum CodingKeys: String, CodingKey {
            case index = "index"
            case size = "size"
        }
    }

    public struct AttemptContainerDetail: AWSDecodableShape {
        /// The Amazon Resource Name (ARN) of the Amazon ECS container instance that hosts the job attempt.
        public let containerInstanceArn: String?
        /// The exit code for the job attempt. A non-zero exit code is considered failed.
        public let exitCode: Int?
        /// The name of the CloudWatch Logs log stream that's associated with the container. The log group for Batch jobs is /aws/batch/job. Each container attempt receives a log stream name when they reach the RUNNING status.
        public let logStreamName: String?
        /// The network interfaces that are associated with the job attempt.
        public let networkInterfaces: [NetworkInterface]?
        /// A short (255 max characters) human-readable string to provide additional details for a running or stopped container.
        public let reason: String?
        /// The Amazon Resource Name (ARN) of the Amazon ECS task that's associated with the job attempt. Each container attempt receives a task ARN when they reach the STARTING status.
        public let taskArn: String?

        public init(containerInstanceArn: String? = nil, exitCode: Int? = nil, logStreamName: String? = nil, networkInterfaces: [NetworkInterface]? = nil, reason: String? = nil, taskArn: String? = nil) {
            self.containerInstanceArn = containerInstanceArn
            self.exitCode = exitCode
            self.logStreamName = logStreamName
            self.networkInterfaces = networkInterfaces
            self.reason = reason
            self.taskArn = taskArn
        }

        private enum CodingKeys: String, CodingKey {
            case containerInstanceArn = "containerInstanceArn"
            case exitCode = "exitCode"
            case logStreamName = "logStreamName"
            case networkInterfaces = "networkInterfaces"
            case reason = "reason"
            case taskArn = "taskArn"
        }
    }

    public struct AttemptDetail: AWSDecodableShape {
        /// The details for the container in this job attempt.
        public let container: AttemptContainerDetail?
        /// The Unix timestamp (in milliseconds) for when the attempt was started (when the attempt transitioned from the STARTING state to the RUNNING state).
        public let startedAt: Int64?
        /// A short, human-readable string to provide additional details for the current status of the job attempt.
        public let statusReason: String?
        /// The Unix timestamp (in milliseconds) for when the attempt was stopped (when the attempt transitioned from the RUNNING state to a terminal state, such as SUCCEEDED or FAILED).
        public let stoppedAt: Int64?

        public init(container: AttemptContainerDetail? = nil, startedAt: Int64? = nil, statusReason: String? = nil, stoppedAt: Int64? = nil) {
            self.container = container
            self.startedAt = startedAt
            self.statusReason = statusReason
            self.stoppedAt = stoppedAt
        }

        private enum CodingKeys: String, CodingKey {
            case container = "container"
            case startedAt = "startedAt"
            case statusReason = "statusReason"
            case stoppedAt = "stoppedAt"
        }
    }

    public struct CancelJobRequest: AWSEncodableShape {
        /// The Batch job ID of the job to cancel.
        public let jobId: String?
        /// A message to attach to the job that explains the reason for canceling it. This message is returned by future DescribeJobs operations on the job. This message is also recorded in the Batch activity logs.
        public let reason: String?

        public init(jobId: String? = nil, reason: String? = nil) {
            self.jobId = jobId
            self.reason = reason
        }

        private enum CodingKeys: String, CodingKey {
            case jobId = "jobId"
            case reason = "reason"
        }
    }

    public struct CancelJobResponse: AWSDecodableShape {
        public init() {}
    }

    public struct ComputeEnvironmentDetail: AWSDecodableShape {
        /// The Amazon Resource Name (ARN) of the compute environment.
        public let computeEnvironmentArn: String?
        /// The name of the compute environment. It can be up to 128 characters long. It can contain uppercase and lowercase letters, numbers, hyphens (-), and underscores (_).
        public let computeEnvironmentName: String?
        /// The compute resources defined for the compute environment. For more information, see Compute environments in the Batch User Guide.
        public let computeResources: ComputeResource?
        /// The orchestration type of the compute environment. The valid values are ECS (default) or EKS.
        public let containerOrchestrationType: OrchestrationType?
        /// The Amazon Resource Name (ARN) of the underlying Amazon ECS cluster that the compute environment uses.
        public let ecsClusterArn: String?
        /// The configuration for the Amazon EKS cluster that supports the Batch compute environment. Only specify this parameter if the containerOrchestrationType is EKS.
        public let eksConfiguration: EksConfiguration?
        /// The service role that's associated with the compute environment that allows Batch to make calls to Amazon Web Services API operations on your behalf. For more information, see Batch service IAM role in the Batch User Guide.
        public let serviceRole: String?
        /// The state of the compute environment. The valid values are ENABLED or DISABLED. If the state is ENABLED, then the Batch scheduler can attempt to place jobs from an associated job queue on the compute resources within the environment. If the compute environment is managed, then it can scale its instances out or in automatically based on the job queue demand. If the state is DISABLED, then the Batch scheduler doesn't attempt to place jobs within the environment. Jobs in a STARTING or RUNNING state continue to progress normally. Managed compute environments in the DISABLED state don't scale out.   Compute environments in a DISABLED state may continue to incur billing charges. To prevent additional charges, turn off and then delete the compute environment. For more information, see State in the Batch User Guide.  When an instance is idle, the instance scales down to the minvCpus value. However, the instance size doesn't change. For example, consider a c5.8xlarge instance with a minvCpus value of 4 and a desiredvCpus value of 36. This instance doesn't scale down to a c5.large instance.
        public let state: CEState?
        /// The current status of the compute environment (for example, CREATING or VALID).
        public let status: CEStatus?
        /// A short, human-readable string to provide additional details for the current status of the compute environment.
        public let statusReason: String?
        /// The tags applied to the compute environment.
        public let tags: [String: String]?
        /// The type of the compute environment: MANAGED or UNMANAGED. For more information, see Compute environments in the Batch User Guide.
        public let type: CEType?
        /// The maximum number of VCPUs expected to be used for an unmanaged compute environment.
        public let unmanagedvCpus: Int?
        /// Specifies the infrastructure update policy for the compute environment. For more information about infrastructure updates, see Updating compute environments in the Batch User Guide.
        public let updatePolicy: UpdatePolicy?
        /// Unique identifier for the compute environment.
        public let uuid: String?

        public init(computeEnvironmentArn: String? = nil, computeEnvironmentName: String? = nil, computeResources: ComputeResource? = nil, containerOrchestrationType: OrchestrationType? = nil, ecsClusterArn: String? = nil, eksConfiguration: EksConfiguration? = nil, serviceRole: String? = nil, state: CEState? = nil, status: CEStatus? = nil, statusReason: String? = nil, tags: [String: String]? = nil, type: CEType? = nil, unmanagedvCpus: Int? = nil, updatePolicy: UpdatePolicy? = nil, uuid: String? = nil) {
            self.computeEnvironmentArn = computeEnvironmentArn
            self.computeEnvironmentName = computeEnvironmentName
            self.computeResources = computeResources
            self.containerOrchestrationType = containerOrchestrationType
            self.ecsClusterArn = ecsClusterArn
            self.eksConfiguration = eksConfiguration
            self.serviceRole = serviceRole
            self.state = state
            self.status = status
            self.statusReason = statusReason
            self.tags = tags
            self.type = type
            self.unmanagedvCpus = unmanagedvCpus
            self.updatePolicy = updatePolicy
            self.uuid = uuid
        }

        private enum CodingKeys: String, CodingKey {
            case computeEnvironmentArn = "computeEnvironmentArn"
            case computeEnvironmentName = "computeEnvironmentName"
            case computeResources = "computeResources"
            case containerOrchestrationType = "containerOrchestrationType"
            case ecsClusterArn = "ecsClusterArn"
            case eksConfiguration = "eksConfiguration"
            case serviceRole = "serviceRole"
            case state = "state"
            case status = "status"
            case statusReason = "statusReason"
            case tags = "tags"
            case type = "type"
            case unmanagedvCpus = "unmanagedvCpus"
            case updatePolicy = "updatePolicy"
            case uuid = "uuid"
        }
    }

    public struct ComputeEnvironmentOrder: AWSEncodableShape & AWSDecodableShape {
        /// The Amazon Resource Name (ARN) of the compute environment.
        public let computeEnvironment: String?
        /// The order of the compute environment. Compute environments are tried in ascending order. For example, if two compute environments are associated with a job queue, the compute environment with a lower order integer value is tried for job placement first.
        public let order: Int?

        public init(computeEnvironment: String? = nil, order: Int? = nil) {
            self.computeEnvironment = computeEnvironment
            self.order = order
        }

        private enum CodingKeys: String, CodingKey {
            case computeEnvironment = "computeEnvironment"
            case order = "order"
        }
    }

    public struct ComputeResource: AWSEncodableShape & AWSDecodableShape {
        /// The allocation strategy to use for the compute resource if not enough instances of the best fitting instance type can be allocated. This might be because of availability of the instance type in the Region or Amazon EC2 service limits. For more information, see Allocation strategies in the Batch User Guide.  This parameter isn't applicable to jobs that are running on Fargate resources. Don't specify it.   BEST_FIT (default)  Batch selects an instance type that best fits the needs of the jobs with a preference for the lowest-cost instance type. If additional instances of the selected instance type aren't available, Batch waits for the additional instances to be available. If there aren't enough instances available or the user is reaching Amazon EC2 service limits, additional jobs aren't run until the currently running jobs are completed. This allocation strategy keeps costs lower but can limit scaling. If you're using Spot Fleets with BEST_FIT, the Spot Fleet IAM Role must be specified. Compute resources that use a BEST_FIT allocation strategy don't support infrastructure updates and can't update some parameters. For more information, see Updating compute environments in the Batch User Guide.  BEST_FIT_PROGRESSIVE  Batch selects additional instance types that are large enough to meet the requirements of the jobs in the queue. Its preference is for instance types with lower cost vCPUs. If additional instances of the previously selected instance types aren't available, Batch selects new instance types.  SPOT_CAPACITY_OPTIMIZED  Batch selects one or more instance types that are large enough to meet the requirements of the jobs in the queue. Its preference is for instance types that are less likely to be interrupted. This allocation strategy is only available for Spot Instance compute resources.  SPOT_PRICE_CAPACITY_OPTIMIZED  The price and capacity optimized allocation strategy looks at both price and capacity to select the Spot Instance pools that are the least likely to be interrupted and have the lowest possible price. This allocation strategy is only available for Spot Instance compute resources.   With BEST_FIT_PROGRESSIVE,SPOT_CAPACITY_OPTIMIZED and SPOT_PRICE_CAPACITY_OPTIMIZED (recommended) strategies using On-Demand or Spot Instances, and the BEST_FIT strategy using Spot Instances, Batch might need to exceed maxvCpus to meet your capacity requirements. In this event, Batch never exceeds maxvCpus by more than a single instance.
        public let allocationStrategy: CRAllocationStrategy?
        /// The maximum percentage that a Spot Instance price can be when compared with the On-Demand price for that instance type before instances are launched. For example, if your maximum percentage is 20%, then the Spot price must be less than 20% of the current On-Demand price for that Amazon EC2 instance. You always pay the lowest (market) price and never more than your maximum percentage. If you leave this field empty, the default value is 100% of the On-Demand price. For most use cases, we recommend leaving this field empty.  This parameter isn't applicable to jobs that are running on Fargate resources. Don't specify it.
        public let bidPercentage: Int?
        /// The desired number of vCPUS in the compute environment. Batch modifies this value between the minimum and maximum values based on job queue demand.  This parameter isn't applicable to jobs that are running on Fargate resources. Don't specify it.
        public let desiredvCpus: Int?
        /// Provides information that's used to select Amazon Machine Images (AMIs) for Amazon EC2 instances in the compute environment. If Ec2Configuration isn't specified, the default is ECS_AL2. One or two values can be provided.  This parameter isn't applicable to jobs that are running on Fargate resources. Don't specify it.
        public let ec2Configuration: [Ec2Configuration]?
        /// The Amazon EC2 key pair that's used for instances launched in the compute environment. You can use this key pair to log in to your instances with SSH.  This parameter isn't applicable to jobs that are running on Fargate resources. Don't specify it.
        public let ec2KeyPair: String?
        /// The Amazon Machine Image (AMI) ID used for instances launched in the compute environment. This parameter is overridden by the imageIdOverride member of the Ec2Configuration structure.  This parameter isn't applicable to jobs that are running on Fargate resources. Don't specify it.   The AMI that you choose for a compute environment must match the architecture of the instance types that you intend to use for that compute environment. For example, if your compute environment uses A1 instance types, the compute resource AMI that you choose must support ARM instances. Amazon ECS vends both x86 and ARM versions of the Amazon ECS-optimized Amazon Linux 2 AMI. For more information, see Amazon ECS-optimized Amazon Linux 2 AMI in the Amazon Elastic Container Service Developer Guide.
        public let imageId: String?
        /// The Amazon ECS instance profile applied to Amazon EC2 instances in a compute environment. This parameter is required for Amazon EC2 instances types. You can specify the short name or full Amazon Resource Name (ARN) of an instance profile. For example,  ecsInstanceRole or arn:aws:iam:::instance-profile/ecsInstanceRole . For more information, see Amazon ECS instance role in the Batch User Guide.  This parameter isn't applicable to jobs that are running on Fargate resources. Don't specify it.
        public let instanceRole: String?
        /// The instances types that can be launched. You can specify instance families to launch any instance type within those families (for example, c5 or p3), or you can specify specific sizes within a family (such as c5.8xlarge). You can also choose optimal to select instance types (from the C4, M4, and R4 instance families) that match the demand of your job queues.  This parameter isn't applicable to jobs that are running on Fargate resources. Don't specify it.   When you create a compute environment, the instance types that you select for the compute environment must share the same architecture. For example, you can't mix x86 and ARM instances in the same compute environment.   Currently, optimal uses instance types from the C4, M4, and R4 instance families. In Regions that don't have instance types from those instance families, instance types from the C5, M5, and R5 instance families are used.
        public let instanceTypes: [String]?
        /// The launch template to use for your compute resources. Any other compute resource parameters that you specify in a CreateComputeEnvironment API operation override the same parameters in the launch template. You must specify either the launch template ID or launch template name in the request, but not both. For more information, see Launch template support in the Batch User Guide.  This parameter isn't applicable to jobs that are running on Fargate resources. Don't specify it.
        public let launchTemplate: LaunchTemplateSpecification?
        /// The maximum number of vCPUs that a compute environment can support.  With BEST_FIT_PROGRESSIVE,SPOT_CAPACITY_OPTIMIZED and SPOT_PRICE_CAPACITY_OPTIMIZED (recommended) strategies using On-Demand or Spot Instances, and the BEST_FIT strategy using Spot Instances, Batch might need to exceed maxvCpus to meet your capacity requirements. In this event, Batch never exceeds maxvCpus by more than a single instance.
        public let maxvCpus: Int?
        /// The minimum number of vCPUs that a compute environment should maintain (even if the compute environment is DISABLED).  This parameter isn't applicable to jobs that are running on Fargate resources. Don't specify it.
        public let minvCpus: Int?
        /// The Amazon EC2 placement group to associate with your compute resources. If you intend to submit multi-node parallel jobs to your compute environment, you should consider creating a cluster placement group and associate it with your compute resources. This keeps your multi-node parallel job on a logical grouping of instances within a single Availability Zone with high network flow potential. For more information, see Placement groups in the Amazon EC2 User Guide for Linux Instances.  This parameter isn't applicable to jobs that are running on Fargate resources. Don't specify it.
        public let placementGroup: String?
        /// The Amazon EC2 security groups that are associated with instances launched in the compute environment. One or more security groups must be specified, either in securityGroupIds or using a launch template referenced in launchTemplate. This parameter is required for jobs that are running on Fargate resources and must contain at least one security group. Fargate doesn't support launch templates. If security groups are specified using both securityGroupIds and launchTemplate, the values in securityGroupIds are used.
        public let securityGroupIds: [String]?
        /// The Amazon Resource Name (ARN) of the Amazon EC2 Spot Fleet IAM role applied to a SPOT compute environment. This role is required if the allocation strategy set to BEST_FIT or if the allocation strategy isn't specified. For more information, see Amazon EC2 spot fleet role in the Batch User Guide.  This parameter isn't applicable to jobs that are running on Fargate resources. Don't specify it.   To tag your Spot Instances on creation, the Spot Fleet IAM role specified here must use the newer AmazonEC2SpotFleetTaggingRole managed policy. The previously recommended AmazonEC2SpotFleetRole managed policy doesn't have the required permissions to tag Spot Instances. For more information, see Spot instances not tagged on creation in the Batch User Guide.
        public let spotIamFleetRole: String?
        /// The VPC subnets where the compute resources are launched. These subnets must be within the same VPC. Fargate compute resources can contain up to 16 subnets. For more information, see VPCs and subnets in the Amazon VPC User Guide.  Batch on Amazon EC2 and Batch on Amazon EKS support Local Zones. For more information, see  Local Zones in the Amazon EC2 User Guide for Linux Instances, Amazon EKS and Amazon Web Services Local Zones in the Amazon EKS User Guide and  Amazon ECS clusters in Local Zones, Wavelength Zones, and Amazon Web Services Outposts in the Amazon ECS Developer Guide. Batch on Fargate doesn't currently support Local Zones.
        public let subnets: [String]?
        /// Key-value pair tags to be applied to Amazon EC2 resources that are launched in the compute environment. For Batch, these take the form of "String1": "String2", where String1 is the tag key and String2 is the tag value-for example, { "Name": "Batch Instance - C4OnDemand" }. This is helpful for recognizing your Batch instances in the Amazon EC2 console. Updating these tags requires an infrastructure update to the compute environment. For more information, see Updating compute environments in the Batch User Guide. These tags aren't seen when using the Batch ListTagsForResource API operation.  This parameter isn't applicable to jobs that are running on Fargate resources. Don't specify it.
        public let tags: [String: String]?
        /// The type of compute environment: EC2, SPOT, FARGATE, or FARGATE_SPOT. For more information, see Compute environments in the Batch User Guide. If you choose SPOT, you must also specify an Amazon EC2 Spot Fleet role with the spotIamFleetRole parameter. For more information, see Amazon EC2 spot fleet role in the Batch User Guide.
        public let type: CRType?

        public init(allocationStrategy: CRAllocationStrategy? = nil, bidPercentage: Int? = nil, desiredvCpus: Int? = nil, ec2Configuration: [Ec2Configuration]? = nil, ec2KeyPair: String? = nil, instanceRole: String? = nil, instanceTypes: [String]? = nil, launchTemplate: LaunchTemplateSpecification? = nil, maxvCpus: Int? = nil, minvCpus: Int? = nil, placementGroup: String? = nil, securityGroupIds: [String]? = nil, spotIamFleetRole: String? = nil, subnets: [String]? = nil, tags: [String: String]? = nil, type: CRType? = nil) {
            self.allocationStrategy = allocationStrategy
            self.bidPercentage = bidPercentage
            self.desiredvCpus = desiredvCpus
            self.ec2Configuration = ec2Configuration
            self.ec2KeyPair = ec2KeyPair
            self.imageId = nil
            self.instanceRole = instanceRole
            self.instanceTypes = instanceTypes
            self.launchTemplate = launchTemplate
            self.maxvCpus = maxvCpus
            self.minvCpus = minvCpus
            self.placementGroup = placementGroup
            self.securityGroupIds = securityGroupIds
            self.spotIamFleetRole = spotIamFleetRole
            self.subnets = subnets
            self.tags = tags
            self.type = type
        }

        @available(*, deprecated, message: "Members imageId have been deprecated")
        public init(allocationStrategy: CRAllocationStrategy? = nil, bidPercentage: Int? = nil, desiredvCpus: Int? = nil, ec2Configuration: [Ec2Configuration]? = nil, ec2KeyPair: String? = nil, imageId: String? = nil, instanceRole: String? = nil, instanceTypes: [String]? = nil, launchTemplate: LaunchTemplateSpecification? = nil, maxvCpus: Int? = nil, minvCpus: Int? = nil, placementGroup: String? = nil, securityGroupIds: [String]? = nil, spotIamFleetRole: String? = nil, subnets: [String]? = nil, tags: [String: String]? = nil, type: CRType? = nil) {
            self.allocationStrategy = allocationStrategy
            self.bidPercentage = bidPercentage
            self.desiredvCpus = desiredvCpus
            self.ec2Configuration = ec2Configuration
            self.ec2KeyPair = ec2KeyPair
            self.imageId = imageId
            self.instanceRole = instanceRole
            self.instanceTypes = instanceTypes
            self.launchTemplate = launchTemplate
            self.maxvCpus = maxvCpus
            self.minvCpus = minvCpus
            self.placementGroup = placementGroup
            self.securityGroupIds = securityGroupIds
            self.spotIamFleetRole = spotIamFleetRole
            self.subnets = subnets
            self.tags = tags
            self.type = type
        }

        public func validate(name: String) throws {
            try self.ec2Configuration?.forEach {
                try $0.validate(name: "\(name).ec2Configuration[]")
            }
        }

        private enum CodingKeys: String, CodingKey {
            case allocationStrategy = "allocationStrategy"
            case bidPercentage = "bidPercentage"
            case desiredvCpus = "desiredvCpus"
            case ec2Configuration = "ec2Configuration"
            case ec2KeyPair = "ec2KeyPair"
            case imageId = "imageId"
            case instanceRole = "instanceRole"
            case instanceTypes = "instanceTypes"
            case launchTemplate = "launchTemplate"
            case maxvCpus = "maxvCpus"
            case minvCpus = "minvCpus"
            case placementGroup = "placementGroup"
            case securityGroupIds = "securityGroupIds"
            case spotIamFleetRole = "spotIamFleetRole"
            case subnets = "subnets"
            case tags = "tags"
            case type = "type"
        }
    }

    public struct ComputeResourceUpdate: AWSEncodableShape {
        /// The allocation strategy to use for the compute resource if there's not enough instances of the best fitting instance type that can be allocated. This might be because of availability of the instance type in the Region or Amazon EC2 service limits. For more information, see Allocation strategies in the Batch User Guide. When updating a compute environment, changing the allocation strategy requires an infrastructure update of the compute environment. For more information, see Updating compute environments in the Batch User Guide. BEST_FIT isn't supported when updating a compute environment.  This parameter isn't applicable to jobs that are running on Fargate resources. Don't specify it.   BEST_FIT_PROGRESSIVE  Batch selects additional instance types that are large enough to meet the requirements of the jobs in the queue. Its preference is for instance types with lower cost vCPUs. If additional instances of the previously selected instance types aren't available, Batch selects new instance types.  SPOT_CAPACITY_OPTIMIZED  Batch selects one or more instance types that are large enough to meet the requirements of the jobs in the queue. Its preference is for instance types that are less likely to be interrupted. This allocation strategy is only available for Spot Instance compute resources.  SPOT_PRICE_CAPACITY_OPTIMIZED  The price and capacity optimized allocation strategy looks at both price and capacity to select the Spot Instance pools that are the least likely to be interrupted and have the lowest possible price. This allocation strategy is only available for Spot Instance compute resources.   With BEST_FIT_PROGRESSIVE,SPOT_CAPACITY_OPTIMIZED and SPOT_PRICE_CAPACITY_OPTIMIZED (recommended) strategies using On-Demand or Spot Instances, and the BEST_FIT strategy using Spot Instances, Batch might need to exceed maxvCpus to meet your capacity requirements. In this event, Batch never exceeds maxvCpus by more than a single instance.
        public let allocationStrategy: CRUpdateAllocationStrategy?
        /// The maximum percentage that a Spot Instance price can be when compared with the On-Demand price for that instance type before instances are launched. For example, if your maximum percentage is 20%, the Spot price must be less than 20% of the current On-Demand price for that Amazon EC2 instance. You always pay the lowest (market) price and never more than your maximum percentage. For most use cases, we recommend leaving this field empty. When updating a compute environment, changing the bid percentage requires an infrastructure update of the compute environment. For more information, see Updating compute environments in the Batch User Guide.  This parameter isn't applicable to jobs that are running on Fargate resources. Don't specify it.
        public let bidPercentage: Int?
        /// The desired number of vCPUS in the compute environment. Batch modifies this value between the minimum and maximum values based on job queue demand.  This parameter isn't applicable to jobs that are running on Fargate resources. Don't specify it.   Batch doesn't support changing the desired number of vCPUs of an existing compute environment. Don't specify this parameter for compute environments using Amazon EKS clusters.   When you update the desiredvCpus setting, the value must be between the minvCpus and maxvCpus values.  Additionally, the updated desiredvCpus value must be greater than or equal to the current desiredvCpus value. For more information, see Troubleshooting Batch in the Batch User Guide.
        public let desiredvCpus: Int?
        /// Provides information used to select Amazon Machine Images (AMIs) for Amazon EC2 instances in the compute environment. If Ec2Configuration isn't specified, the default is ECS_AL2. When updating a compute environment, changing this setting requires an infrastructure update of the compute environment. For more information, see Updating compute environments in the Batch User Guide. To remove the Amazon EC2 configuration and any custom AMI ID specified in imageIdOverride, set this value to an empty string. One or two values can be provided.  This parameter isn't applicable to jobs that are running on Fargate resources. Don't specify it.
        public let ec2Configuration: [Ec2Configuration]?
        /// The Amazon EC2 key pair that's used for instances launched in the compute environment. You can use this key pair to log in to your instances with SSH. To remove the Amazon EC2 key pair, set this value to an empty string. When updating a compute environment, changing the Amazon EC2 key pair requires an infrastructure update of the compute environment. For more information, see Updating compute environments in the Batch User Guide.  This parameter isn't applicable to jobs that are running on Fargate resources. Don't specify it.
        public let ec2KeyPair: String?
        /// The Amazon Machine Image (AMI) ID used for instances launched in the compute environment. This parameter is overridden by the imageIdOverride member of the Ec2Configuration structure. To remove the custom AMI ID and use the default AMI ID, set this value to an empty string. When updating a compute environment, changing the AMI ID requires an infrastructure update of the compute environment. For more information, see Updating compute environments in the Batch User Guide.  This parameter isn't applicable to jobs that are running on Fargate resources. Don't specify it.   The AMI that you choose for a compute environment must match the architecture of the instance types that you intend to use for that compute environment. For example, if your compute environment uses A1 instance types, the compute resource AMI that you choose must support ARM instances. Amazon ECS vends both x86 and ARM versions of the Amazon ECS-optimized Amazon Linux 2 AMI. For more information, see Amazon ECS-optimized Amazon Linux 2 AMI in the Amazon Elastic Container Service Developer Guide.
        public let imageId: String?
        /// The Amazon ECS instance profile applied to Amazon EC2 instances in a compute environment. Required for Amazon EC2 instances. You can specify the short name or full Amazon Resource Name (ARN) of an instance profile. For example,  ecsInstanceRole or arn:aws:iam:::instance-profile/ecsInstanceRole . For more information, see Amazon ECS instance role in the Batch User Guide. When updating a compute environment, changing this setting requires an infrastructure update of the compute environment. For more information, see Updating compute environments in the Batch User Guide.  This parameter isn't applicable to jobs that are running on Fargate resources. Don't specify it.
        public let instanceRole: String?
        /// The instances types that can be launched. You can specify instance families to launch any instance type within those families (for example, c5 or p3), or you can specify specific sizes within a family (such as c5.8xlarge). You can also choose optimal to select instance types (from the C4, M4, and R4 instance families) that match the demand of your job queues. When updating a compute environment, changing this setting requires an infrastructure update of the compute environment. For more information, see Updating compute environments in the Batch User Guide.  This parameter isn't applicable to jobs that are running on Fargate resources. Don't specify it.   When you create a compute environment, the instance types that you select for the compute environment must share the same architecture. For example, you can't mix x86 and ARM instances in the same compute environment.   Currently, optimal uses instance types from the C4, M4, and R4 instance families. In Regions that don't have instance types from those instance families, instance types from the C5, M5, and R5 instance families are used.
        public let instanceTypes: [String]?
        /// The updated launch template to use for your compute resources. You must specify either the launch template ID or launch template name in the request, but not both. For more information, see Launch template support in the Batch User Guide. To remove the custom launch template and use the default launch template, set launchTemplateId or launchTemplateName member of the launch template specification to an empty string. Removing the launch template from a compute environment will not remove the AMI specified in the launch template. In order to update the AMI specified in a launch template, the updateToLatestImageVersion parameter must be set to true. When updating a compute environment, changing the launch template requires an infrastructure update of the compute environment. For more information, see Updating compute environments in the Batch User Guide.  This parameter isn't applicable to jobs that are running on Fargate resources. Don't specify it.
        public let launchTemplate: LaunchTemplateSpecification?
        /// The maximum number of Amazon EC2 vCPUs that an environment can reach.  With BEST_FIT_PROGRESSIVE,SPOT_CAPACITY_OPTIMIZED and SPOT_PRICE_CAPACITY_OPTIMIZED (recommended) strategies using On-Demand or Spot Instances, and the BEST_FIT strategy using Spot Instances, Batch might need to exceed maxvCpus to meet your capacity requirements. In this event, Batch never exceeds maxvCpus by more than a single instance.
        public let maxvCpus: Int?
        /// The minimum number of vCPUs that an environment should maintain (even if the compute environment is DISABLED).  This parameter isn't applicable to jobs that are running on Fargate resources. Don't specify it.
        public let minvCpus: Int?
        /// The Amazon EC2 placement group to associate with your compute resources. If you intend to submit multi-node parallel jobs to your compute environment, you should consider creating a cluster placement group and associate it with your compute resources. This keeps your multi-node parallel job on a logical grouping of instances within a single Availability Zone with high network flow potential. For more information, see Placement groups in the Amazon EC2 User Guide for Linux Instances. When updating a compute environment, changing the placement group requires an infrastructure update of the compute environment. For more information, see Updating compute environments in the Batch User Guide.  This parameter isn't applicable to jobs that are running on Fargate resources. Don't specify it.
        public let placementGroup: String?
        /// The Amazon EC2 security groups that are associated with instances launched in the compute environment. This parameter is required for Fargate compute resources, where it can contain up to 5 security groups. For Fargate compute resources, providing an empty list is handled as if this parameter wasn't specified and no change is made. For Amazon EC2 compute resources, providing an empty list removes the security groups from the compute resource. When updating a compute environment, changing the Amazon EC2 security groups requires an infrastructure update of the compute environment. For more information, see Updating compute environments in the Batch User Guide.
        public let securityGroupIds: [String]?
        /// The VPC subnets where the compute resources are launched. Fargate compute resources can contain up to 16 subnets. For Fargate compute resources, providing an empty list will be handled as if this parameter wasn't specified and no change is made. For Amazon EC2 compute resources, providing an empty list removes the VPC subnets from the compute resource. For more information, see VPCs and subnets in the Amazon VPC User Guide. When updating a compute environment, changing the VPC subnets requires an infrastructure update of the compute environment. For more information, see Updating compute environments in the Batch User Guide.  Batch on Amazon EC2 and Batch on Amazon EKS support Local Zones. For more information, see  Local Zones in the Amazon EC2 User Guide for Linux Instances, Amazon EKS and Amazon Web Services Local Zones in the Amazon EKS User Guide and  Amazon ECS clusters in Local Zones, Wavelength Zones, and Amazon Web Services Outposts in the Amazon ECS Developer Guide. Batch on Fargate doesn't currently support Local Zones.
        public let subnets: [String]?
        /// Key-value pair tags to be applied to Amazon EC2 resources that are launched in the compute environment. For Batch, these take the form of "String1": "String2", where String1 is the tag key and String2 is the tag value-for example, { "Name": "Batch Instance - C4OnDemand" }. This is helpful for recognizing your Batch instances in the Amazon EC2 console. These tags aren't seen when using the Batch ListTagsForResource API operation. When updating a compute environment, changing this setting requires an infrastructure update of the compute environment. For more information, see Updating compute environments in the Batch User Guide.  This parameter isn't applicable to jobs that are running on Fargate resources. Don't specify it.
        public let tags: [String: String]?
        /// The type of compute environment: EC2, SPOT, FARGATE, or FARGATE_SPOT. For more information, see Compute environments in the Batch User Guide. If you choose SPOT, you must also specify an Amazon EC2 Spot Fleet role with the spotIamFleetRole parameter. For more information, see Amazon EC2 spot fleet role in the Batch User Guide. When updating a compute environment, changing the type of a compute environment requires an infrastructure update of the compute environment. For more information, see Updating compute environments in the Batch User Guide.
        public let type: CRType?
        /// Specifies whether the AMI ID is updated to the latest one that's supported by Batch when the compute environment has an infrastructure update. The default value is false.  An AMI ID can either be specified in the imageId or imageIdOverride parameters or be determined by the launch template that's specified in the launchTemplate parameter. If an AMI ID is specified any of these ways, this parameter is ignored. For more information about to update AMI IDs during an infrastructure update, see Updating the AMI ID in the Batch User Guide.  When updating a compute environment, changing this setting requires an infrastructure update of the compute environment. For more information, see Updating compute environments in the Batch User Guide.
        public let updateToLatestImageVersion: Bool?

        public init(allocationStrategy: CRUpdateAllocationStrategy? = nil, bidPercentage: Int? = nil, desiredvCpus: Int? = nil, ec2Configuration: [Ec2Configuration]? = nil, ec2KeyPair: String? = nil, imageId: String? = nil, instanceRole: String? = nil, instanceTypes: [String]? = nil, launchTemplate: LaunchTemplateSpecification? = nil, maxvCpus: Int? = nil, minvCpus: Int? = nil, placementGroup: String? = nil, securityGroupIds: [String]? = nil, subnets: [String]? = nil, tags: [String: String]? = nil, type: CRType? = nil, updateToLatestImageVersion: Bool? = nil) {
            self.allocationStrategy = allocationStrategy
            self.bidPercentage = bidPercentage
            self.desiredvCpus = desiredvCpus
            self.ec2Configuration = ec2Configuration
            self.ec2KeyPair = ec2KeyPair
            self.imageId = imageId
            self.instanceRole = instanceRole
            self.instanceTypes = instanceTypes
            self.launchTemplate = launchTemplate
            self.maxvCpus = maxvCpus
            self.minvCpus = minvCpus
            self.placementGroup = placementGroup
            self.securityGroupIds = securityGroupIds
            self.subnets = subnets
            self.tags = tags
            self.type = type
            self.updateToLatestImageVersion = updateToLatestImageVersion
        }

        public func validate(name: String) throws {
            try self.ec2Configuration?.forEach {
                try $0.validate(name: "\(name).ec2Configuration[]")
            }
        }

        private enum CodingKeys: String, CodingKey {
            case allocationStrategy = "allocationStrategy"
            case bidPercentage = "bidPercentage"
            case desiredvCpus = "desiredvCpus"
            case ec2Configuration = "ec2Configuration"
            case ec2KeyPair = "ec2KeyPair"
            case imageId = "imageId"
            case instanceRole = "instanceRole"
            case instanceTypes = "instanceTypes"
            case launchTemplate = "launchTemplate"
            case maxvCpus = "maxvCpus"
            case minvCpus = "minvCpus"
            case placementGroup = "placementGroup"
            case securityGroupIds = "securityGroupIds"
            case subnets = "subnets"
            case tags = "tags"
            case type = "type"
            case updateToLatestImageVersion = "updateToLatestImageVersion"
        }
    }

    public struct ContainerDetail: AWSDecodableShape {
        /// The command that's passed to the container.
        public let command: [String]?
        /// The Amazon Resource Name (ARN) of the container instance that the container is running on.
        public let containerInstanceArn: String?
        /// The environment variables to pass to a container.  Environment variables cannot start with "AWS_BATCH". This naming convention is reserved for variables that Batch sets.
        public let environment: [KeyValuePair]?
        /// The amount of ephemeral storage allocated for the task. This parameter is used to expand the total amount of ephemeral storage available, beyond the default amount, for tasks hosted on Fargate.
        public let ephemeralStorage: EphemeralStorage?
        /// The Amazon Resource Name (ARN) of the execution role that Batch can assume. For more information, see Batch execution IAM role in the Batch User Guide.
        public let executionRoleArn: String?
        /// The exit code returned upon completion.
        public let exitCode: Int?
        /// The platform configuration for jobs that are running on Fargate resources. Jobs that are running on Amazon EC2 resources must not specify this parameter.
        public let fargatePlatformConfiguration: FargatePlatformConfiguration?
        /// The image used to start the container.
        public let image: String?
        /// The instance type of the underlying host infrastructure of a multi-node parallel job.  This parameter isn't applicable to jobs that are running on Fargate resources.
        public let instanceType: String?
        /// The Amazon Resource Name (ARN) that's associated with the job when run.
        public let jobRoleArn: String?
        /// Linux-specific modifications that are applied to the container, such as details for device mappings.
        public let linuxParameters: LinuxParameters?
        /// The log configuration specification for the container. This parameter maps to LogConfig in the Create a container section of the Docker Remote API and the --log-driver option to docker run. By default, containers use the same logging driver that the Docker daemon uses. However, the container might use a different logging driver than the Docker daemon by specifying a log driver with this parameter in the container definition. To use a different logging driver for a container, the log system must be configured properly on the container instance. Or, alternatively, it must be configured on a different log server for remote logging options. For more information on the options for different supported log drivers, see Configure logging drivers in the Docker documentation.  Batch currently supports a subset of the logging drivers available to the Docker daemon (shown in the LogConfiguration data type). Additional log drivers might be available in future releases of the Amazon ECS container agent.  This parameter requires version 1.18 of the Docker Remote API or greater on your container instance. To check the Docker Remote API version on your container instance, log in to your container instance and run the following command: sudo docker version | grep "Server API version"   The Amazon ECS container agent running on a container instance must register the logging drivers available on that instance with the ECS_AVAILABLE_LOGGING_DRIVERS environment variable before containers placed on that instance can use these log configuration options. For more information, see Amazon ECS container agent configuration in the Amazon Elastic Container Service Developer Guide.
        public let logConfiguration: LogConfiguration?
        /// The name of the Amazon CloudWatch Logs log stream that's associated with the container. The log group for Batch jobs is /aws/batch/job. Each container attempt receives a log stream name when they reach the RUNNING status.
        public let logStreamName: String?
        /// For jobs running on Amazon EC2 resources that didn't specify memory requirements using resourceRequirements, the number of MiB of memory reserved for the job. For other jobs, including all run on Fargate resources, see resourceRequirements.
        public let memory: Int?
        /// The mount points for data volumes in your container.
        public let mountPoints: [MountPoint]?
        /// The network configuration for jobs that are running on Fargate resources. Jobs that are running on Amazon EC2 resources must not specify this parameter.
        public let networkConfiguration: NetworkConfiguration?
        /// The network interfaces that are associated with the job.
        public let networkInterfaces: [NetworkInterface]?
        /// When this parameter is true, the container is given elevated permissions on the host container instance (similar to the root user). The default value is false.  This parameter isn't applicable to jobs that are running on Fargate resources and shouldn't be provided, or specified as false.
        public let privileged: Bool?
        /// When this parameter is true, the container is given read-only access to its root file system. This parameter maps to ReadonlyRootfs in the Create a container section of the Docker Remote API and the --read-only option to  docker run .
        public let readonlyRootFilesystem: Bool?
        /// A short (255 max characters) human-readable string to provide additional details for a running or stopped container.
        public let reason: String?
        /// The private repository authentication credentials to use.
        public let repositoryCredentials: RepositoryCredentials?
        /// The type and amount of resources to assign to a container. The supported resources include GPU, MEMORY, and VCPU.
        public let resourceRequirements: [ResourceRequirement]?
        /// An object that represents the compute environment architecture for Batch jobs on Fargate.
        public let runtimePlatform: RuntimePlatform?
        /// The secrets to pass to the container. For more information, see Specifying sensitive data in the Batch User Guide.
        public let secrets: [Secret]?
        /// The Amazon Resource Name (ARN) of the Amazon ECS task that's associated with the container job. Each container attempt receives a task ARN when they reach the STARTING status.
        public let taskArn: String?
        /// A list of ulimit values to set in the container. This parameter maps to Ulimits in the Create a container section of the Docker Remote API and the --ulimit option to docker run.  This parameter isn't applicable to jobs that are running on Fargate resources.
        public let ulimits: [Ulimit]?
        /// The user name to use inside the container. This parameter maps to User in the Create a container section of the Docker Remote API and the --user option to docker run.
        public let user: String?
        /// The number of vCPUs reserved for the container. For jobs that run on Amazon EC2 resources, you can specify the vCPU requirement for the job using resourceRequirements, but you can't specify the vCPU requirements in both the vcpus and resourceRequirements object. This parameter maps to CpuShares in the Create a container section of the Docker Remote API and the --cpu-shares option to docker run. Each vCPU is equivalent to 1,024 CPU shares. You must specify at least one vCPU. This is required but can be specified in several places. It must be specified for each node at least once.  This parameter isn't applicable to jobs that run on Fargate resources. For jobs that run on Fargate resources, you must specify the vCPU requirement for the job using resourceRequirements.
        public let vcpus: Int?
        /// A list of volumes that are associated with the job.
        public let volumes: [Volume]?

        public init(command: [String]? = nil, containerInstanceArn: String? = nil, environment: [KeyValuePair]? = nil, ephemeralStorage: EphemeralStorage? = nil, executionRoleArn: String? = nil, exitCode: Int? = nil, fargatePlatformConfiguration: FargatePlatformConfiguration? = nil, image: String? = nil, instanceType: String? = nil, jobRoleArn: String? = nil, linuxParameters: LinuxParameters? = nil, logConfiguration: LogConfiguration? = nil, logStreamName: String? = nil, memory: Int? = nil, mountPoints: [MountPoint]? = nil, networkConfiguration: NetworkConfiguration? = nil, networkInterfaces: [NetworkInterface]? = nil, privileged: Bool? = nil, readonlyRootFilesystem: Bool? = nil, reason: String? = nil, repositoryCredentials: RepositoryCredentials? = nil, resourceRequirements: [ResourceRequirement]? = nil, runtimePlatform: RuntimePlatform? = nil, secrets: [Secret]? = nil, taskArn: String? = nil, ulimits: [Ulimit]? = nil, user: String? = nil, vcpus: Int? = nil, volumes: [Volume]? = nil) {
            self.command = command
            self.containerInstanceArn = containerInstanceArn
            self.environment = environment
            self.ephemeralStorage = ephemeralStorage
            self.executionRoleArn = executionRoleArn
            self.exitCode = exitCode
            self.fargatePlatformConfiguration = fargatePlatformConfiguration
            self.image = image
            self.instanceType = instanceType
            self.jobRoleArn = jobRoleArn
            self.linuxParameters = linuxParameters
            self.logConfiguration = logConfiguration
            self.logStreamName = logStreamName
            self.memory = memory
            self.mountPoints = mountPoints
            self.networkConfiguration = networkConfiguration
            self.networkInterfaces = networkInterfaces
            self.privileged = privileged
            self.readonlyRootFilesystem = readonlyRootFilesystem
            self.reason = reason
            self.repositoryCredentials = repositoryCredentials
            self.resourceRequirements = resourceRequirements
            self.runtimePlatform = runtimePlatform
            self.secrets = secrets
            self.taskArn = taskArn
            self.ulimits = ulimits
            self.user = user
            self.vcpus = vcpus
            self.volumes = volumes
        }

        private enum CodingKeys: String, CodingKey {
            case command = "command"
            case containerInstanceArn = "containerInstanceArn"
            case environment = "environment"
            case ephemeralStorage = "ephemeralStorage"
            case executionRoleArn = "executionRoleArn"
            case exitCode = "exitCode"
            case fargatePlatformConfiguration = "fargatePlatformConfiguration"
            case image = "image"
            case instanceType = "instanceType"
            case jobRoleArn = "jobRoleArn"
            case linuxParameters = "linuxParameters"
            case logConfiguration = "logConfiguration"
            case logStreamName = "logStreamName"
            case memory = "memory"
            case mountPoints = "mountPoints"
            case networkConfiguration = "networkConfiguration"
            case networkInterfaces = "networkInterfaces"
            case privileged = "privileged"
            case readonlyRootFilesystem = "readonlyRootFilesystem"
            case reason = "reason"
            case repositoryCredentials = "repositoryCredentials"
            case resourceRequirements = "resourceRequirements"
            case runtimePlatform = "runtimePlatform"
            case secrets = "secrets"
            case taskArn = "taskArn"
            case ulimits = "ulimits"
            case user = "user"
            case vcpus = "vcpus"
            case volumes = "volumes"
        }
    }

    public struct ContainerOverrides: AWSEncodableShape {
        /// The command to send to the container that overrides the default command from the Docker image or the job definition.  This parameter can't contain an empty string.
        public let command: [String]?
        /// The environment variables to send to the container. You can add new environment variables, which are added to the container at launch, or you can override the existing environment variables from the Docker image or the job definition.  Environment variables cannot start with "AWS_BATCH". This naming convention is reserved for variables that Batch sets.
        public let environment: [KeyValuePair]?
        /// The instance type to use for a multi-node parallel job.  This parameter isn't applicable to single-node container jobs or jobs that run on Fargate resources, and shouldn't be provided.
        public let instanceType: String?
        /// This parameter is deprecated, use resourceRequirements to override the memory requirements specified in the job definition. It's not supported for jobs running on Fargate resources. For jobs that run on Amazon EC2 resources, it overrides the memory parameter set in the job definition, but doesn't override any memory requirement that's specified in the resourceRequirements structure in the job definition. To override memory requirements that are specified in the resourceRequirements structure in the job definition, resourceRequirements must be specified in the SubmitJob request, with type set to MEMORY and value set to the new value. For more information, see Can't override job definition resource requirements in the Batch User Guide.
        public let memory: Int?
        /// The type and amount of resources to assign to a container. This overrides the settings in the job definition. The supported resources include GPU, MEMORY, and VCPU.
        public let resourceRequirements: [ResourceRequirement]?
        /// This parameter is deprecated, use resourceRequirements to override the vcpus parameter that's set in the job definition. It's not supported for jobs running on Fargate resources. For jobs that run on Amazon EC2 resources, it overrides the vcpus parameter set in the job definition, but doesn't override any vCPU requirement specified in the resourceRequirements structure in the job definition. To override vCPU requirements that are specified in the resourceRequirements structure in the job definition, resourceRequirements must be specified in the SubmitJob request, with type set to VCPU and value set to the new value. For more information, see Can't override job definition resource requirements in the Batch User Guide.
        public let vcpus: Int?

        public init(command: [String]? = nil, environment: [KeyValuePair]? = nil, instanceType: String? = nil, resourceRequirements: [ResourceRequirement]? = nil) {
            self.command = command
            self.environment = environment
            self.instanceType = instanceType
            self.memory = nil
            self.resourceRequirements = resourceRequirements
            self.vcpus = nil
        }

        @available(*, deprecated, message: "Members memory, vcpus have been deprecated")
        public init(command: [String]? = nil, environment: [KeyValuePair]? = nil, instanceType: String? = nil, memory: Int? = nil, resourceRequirements: [ResourceRequirement]? = nil, vcpus: Int? = nil) {
            self.command = command
            self.environment = environment
            self.instanceType = instanceType
            self.memory = memory
            self.resourceRequirements = resourceRequirements
            self.vcpus = vcpus
        }

        private enum CodingKeys: String, CodingKey {
            case command = "command"
            case environment = "environment"
            case instanceType = "instanceType"
            case memory = "memory"
            case resourceRequirements = "resourceRequirements"
            case vcpus = "vcpus"
        }
    }

    public struct ContainerProperties: AWSEncodableShape & AWSDecodableShape {
        /// The command that's passed to the container. This parameter maps to Cmd in the Create a container section of the Docker Remote API and the COMMAND parameter to docker run. For more information, see https://docs.docker.com/engine/reference/builder/#cmd.
        public let command: [String]?
        /// The environment variables to pass to a container. This parameter maps to Env in the Create a container section of the Docker Remote API and the --env option to docker run.  We don't recommend using plaintext environment variables for sensitive information, such as credential data.   Environment variables cannot start with "AWS_BATCH". This naming convention is reserved for variables that Batch sets.
        public let environment: [KeyValuePair]?
        /// The amount of ephemeral storage to allocate for the task. This parameter is used to expand the total amount of ephemeral storage available, beyond the default amount, for tasks hosted on Fargate.
        public let ephemeralStorage: EphemeralStorage?
        /// The Amazon Resource Name (ARN) of the execution role that Batch can assume. For jobs that run on Fargate resources, you must provide an execution role. For more information, see Batch execution IAM role in the Batch User Guide.
        public let executionRoleArn: String?
        /// The platform configuration for jobs that are running on Fargate resources. Jobs that are running on Amazon EC2 resources must not specify this parameter.
        public let fargatePlatformConfiguration: FargatePlatformConfiguration?
        /// Required. The image used to start a container. This string is passed directly to the Docker daemon. Images in the Docker Hub registry are available by default. Other repositories are specified with  repository-url/image:tag . It can be 255 characters long. It can contain uppercase and lowercase letters, numbers, hyphens (-), underscores (_), colons (:), periods (.), forward slashes (/), and number signs (#). This parameter maps to Image in the Create a container section of the Docker Remote API and the IMAGE parameter of docker run.  Docker image architecture must match the processor architecture of the compute resources that they're scheduled on. For example, ARM-based Docker images can only run on ARM-based compute resources.    Images in Amazon ECR Public repositories use the full registry/repository[:tag] or registry/repository[@digest] naming conventions. For example, public.ecr.aws/registry_alias/my-web-app:latest .   Images in Amazon ECR repositories use the full registry and repository URI (for example, 123456789012.dkr.ecr..amazonaws.com/).   Images in official repositories on Docker Hub use a single name (for example, ubuntu or mongo).   Images in other repositories on Docker Hub are qualified with an organization name (for example, amazon/amazon-ecs-agent).   Images in other online repositories are qualified further by a domain name (for example, quay.io/assemblyline/ubuntu).
        public let image: String?
        /// The instance type to use for a multi-node parallel job. All node groups in a multi-node parallel job must use the same instance type.  This parameter isn't applicable to single-node container jobs or jobs that run on Fargate resources, and shouldn't be provided.
        public let instanceType: String?
        /// The Amazon Resource Name (ARN) of the IAM role that the container can assume for Amazon Web Services permissions. For more information, see IAM roles for tasks in the Amazon Elastic Container Service Developer Guide.
        public let jobRoleArn: String?
        /// Linux-specific modifications that are applied to the container, such as details for device mappings.
        public let linuxParameters: LinuxParameters?
        /// The log configuration specification for the container. This parameter maps to LogConfig in the Create a container section of the Docker Remote API and the --log-driver option to docker run. By default, containers use the same logging driver that the Docker daemon uses. However the container might use a different logging driver than the Docker daemon by specifying a log driver with this parameter in the container definition. To use a different logging driver for a container, the log system must be configured properly on the container instance (or on a different log server for remote logging options). For more information on the options for different supported log drivers, see Configure logging drivers in the Docker documentation.  Batch currently supports a subset of the logging drivers available to the Docker daemon (shown in the LogConfiguration data type).  This parameter requires version 1.18 of the Docker Remote API or greater on your container instance. To check the Docker Remote API version on your container instance, log in to your container instance and run the following command: sudo docker version | grep "Server API version"   The Amazon ECS container agent running on a container instance must register the logging drivers available on that instance with the ECS_AVAILABLE_LOGGING_DRIVERS environment variable before containers placed on that instance can use these log configuration options. For more information, see Amazon ECS container agent configuration in the Amazon Elastic Container Service Developer Guide.
        public let logConfiguration: LogConfiguration?
        /// This parameter is deprecated, use resourceRequirements to specify the memory requirements for the job definition. It's not supported for jobs running on Fargate resources. For jobs that run on Amazon EC2 resources, it specifies the memory hard limit (in MiB) for a container. If your container attempts to exceed the specified number, it's terminated. You must specify at least 4 MiB of memory for a job using this parameter. The memory hard limit can be specified in several places. It must be specified for each node at least once.
        public let memory: Int?
        /// The mount points for data volumes in your container. This parameter maps to Volumes in the Create a container section of the Docker Remote API and the --volume option to docker run.
        public let mountPoints: [MountPoint]?
        /// The network configuration for jobs that are running on Fargate resources. Jobs that are running on Amazon EC2 resources must not specify this parameter.
        public let networkConfiguration: NetworkConfiguration?
        /// When this parameter is true, the container is given elevated permissions on the host container instance (similar to the root user). This parameter maps to Privileged in the Create a container section of the Docker Remote API and the --privileged option to docker run. The default value is false.  This parameter isn't applicable to jobs that are running on Fargate resources and shouldn't be provided, or specified as false.
        public let privileged: Bool?
        /// When this parameter is true, the container is given read-only access to its root file system. This parameter maps to ReadonlyRootfs in the Create a container section of the Docker Remote API and the --read-only option to docker run.
        public let readonlyRootFilesystem: Bool?
        /// The private repository authentication credentials to use.
        public let repositoryCredentials: RepositoryCredentials?
        /// The type and amount of resources to assign to a container. The supported resources include GPU, MEMORY, and VCPU.
        public let resourceRequirements: [ResourceRequirement]?
        /// An object that represents the compute environment architecture for Batch jobs on Fargate.
        public let runtimePlatform: RuntimePlatform?
        /// The secrets for the container. For more information, see Specifying sensitive data in the Batch User Guide.
        public let secrets: [Secret]?
        /// A list of ulimits to set in the container. This parameter maps to Ulimits in the Create a container section of the Docker Remote API and the --ulimit option to docker run.  This parameter isn't applicable to jobs that are running on Fargate resources and shouldn't be provided.
        public let ulimits: [Ulimit]?
        /// The user name to use inside the container. This parameter maps to User in the Create a container section of the Docker Remote API and the --user option to docker run.
        public let user: String?
        /// This parameter is deprecated, use resourceRequirements to specify the vCPU requirements for the job definition. It's not supported for jobs running on Fargate resources. For jobs running on Amazon EC2 resources, it specifies the number of vCPUs reserved for the job. Each vCPU is equivalent to 1,024 CPU shares. This parameter maps to CpuShares in the Create a container section of the Docker Remote API and the --cpu-shares option to docker run. The number of vCPUs must be specified but can be specified in several places. You must specify it at least once for each node.
        public let vcpus: Int?
        /// A list of data volumes used in a job.
        public let volumes: [Volume]?

        public init(command: [String]? = nil, environment: [KeyValuePair]? = nil, ephemeralStorage: EphemeralStorage? = nil, executionRoleArn: String? = nil, fargatePlatformConfiguration: FargatePlatformConfiguration? = nil, image: String? = nil, instanceType: String? = nil, jobRoleArn: String? = nil, linuxParameters: LinuxParameters? = nil, logConfiguration: LogConfiguration? = nil, mountPoints: [MountPoint]? = nil, networkConfiguration: NetworkConfiguration? = nil, privileged: Bool? = nil, readonlyRootFilesystem: Bool? = nil, repositoryCredentials: RepositoryCredentials? = nil, resourceRequirements: [ResourceRequirement]? = nil, runtimePlatform: RuntimePlatform? = nil, secrets: [Secret]? = nil, ulimits: [Ulimit]? = nil, user: String? = nil, volumes: [Volume]? = nil) {
            self.command = command
            self.environment = environment
            self.ephemeralStorage = ephemeralStorage
            self.executionRoleArn = executionRoleArn
            self.fargatePlatformConfiguration = fargatePlatformConfiguration
            self.image = image
            self.instanceType = instanceType
            self.jobRoleArn = jobRoleArn
            self.linuxParameters = linuxParameters
            self.logConfiguration = logConfiguration
            self.memory = nil
            self.mountPoints = mountPoints
            self.networkConfiguration = networkConfiguration
            self.privileged = privileged
            self.readonlyRootFilesystem = readonlyRootFilesystem
            self.repositoryCredentials = repositoryCredentials
            self.resourceRequirements = resourceRequirements
            self.runtimePlatform = runtimePlatform
            self.secrets = secrets
            self.ulimits = ulimits
            self.user = user
            self.vcpus = nil
            self.volumes = volumes
        }

        @available(*, deprecated, message: "Members memory, vcpus have been deprecated")
        public init(command: [String]? = nil, environment: [KeyValuePair]? = nil, ephemeralStorage: EphemeralStorage? = nil, executionRoleArn: String? = nil, fargatePlatformConfiguration: FargatePlatformConfiguration? = nil, image: String? = nil, instanceType: String? = nil, jobRoleArn: String? = nil, linuxParameters: LinuxParameters? = nil, logConfiguration: LogConfiguration? = nil, memory: Int? = nil, mountPoints: [MountPoint]? = nil, networkConfiguration: NetworkConfiguration? = nil, privileged: Bool? = nil, readonlyRootFilesystem: Bool? = nil, repositoryCredentials: RepositoryCredentials? = nil, resourceRequirements: [ResourceRequirement]? = nil, runtimePlatform: RuntimePlatform? = nil, secrets: [Secret]? = nil, ulimits: [Ulimit]? = nil, user: String? = nil, vcpus: Int? = nil, volumes: [Volume]? = nil) {
            self.command = command
            self.environment = environment
            self.ephemeralStorage = ephemeralStorage
            self.executionRoleArn = executionRoleArn
            self.fargatePlatformConfiguration = fargatePlatformConfiguration
            self.image = image
            self.instanceType = instanceType
            self.jobRoleArn = jobRoleArn
            self.linuxParameters = linuxParameters
            self.logConfiguration = logConfiguration
            self.memory = memory
            self.mountPoints = mountPoints
            self.networkConfiguration = networkConfiguration
            self.privileged = privileged
            self.readonlyRootFilesystem = readonlyRootFilesystem
            self.repositoryCredentials = repositoryCredentials
            self.resourceRequirements = resourceRequirements
            self.runtimePlatform = runtimePlatform
            self.secrets = secrets
            self.ulimits = ulimits
            self.user = user
            self.vcpus = vcpus
            self.volumes = volumes
        }

        private enum CodingKeys: String, CodingKey {
            case command = "command"
            case environment = "environment"
            case ephemeralStorage = "ephemeralStorage"
            case executionRoleArn = "executionRoleArn"
            case fargatePlatformConfiguration = "fargatePlatformConfiguration"
            case image = "image"
            case instanceType = "instanceType"
            case jobRoleArn = "jobRoleArn"
            case linuxParameters = "linuxParameters"
            case logConfiguration = "logConfiguration"
            case memory = "memory"
            case mountPoints = "mountPoints"
            case networkConfiguration = "networkConfiguration"
            case privileged = "privileged"
            case readonlyRootFilesystem = "readonlyRootFilesystem"
            case repositoryCredentials = "repositoryCredentials"
            case resourceRequirements = "resourceRequirements"
            case runtimePlatform = "runtimePlatform"
            case secrets = "secrets"
            case ulimits = "ulimits"
            case user = "user"
            case vcpus = "vcpus"
            case volumes = "volumes"
        }
    }

    public struct ContainerSummary: AWSDecodableShape {
        /// The exit code to return upon completion.
        public let exitCode: Int?
        /// A short (255 max characters) human-readable string to provide additional details for a running or stopped container.
        public let reason: String?

        public init(exitCode: Int? = nil, reason: String? = nil) {
            self.exitCode = exitCode
            self.reason = reason
        }

        private enum CodingKeys: String, CodingKey {
            case exitCode = "exitCode"
            case reason = "reason"
        }
    }

    public struct CreateComputeEnvironmentRequest: AWSEncodableShape {
        /// The name for your compute environment. It can be up to 128 characters long. It can contain uppercase and lowercase letters, numbers, hyphens (-), and underscores (_).
        public let computeEnvironmentName: String?
        /// Details about the compute resources managed by the compute environment. This parameter is required for managed compute environments. For more information, see Compute Environments in the Batch User Guide.
        public let computeResources: ComputeResource?
        /// The details for the Amazon EKS cluster that supports the compute environment.
        public let eksConfiguration: EksConfiguration?
        /// The full Amazon Resource Name (ARN) of the IAM role that allows Batch to make calls to other Amazon Web Services services on your behalf. For more information, see Batch service IAM role in the Batch User Guide.  If your account already created the Batch service-linked role, that role is used by default for your compute environment unless you specify a different role here. If the Batch service-linked role doesn't exist in your account, and no role is specified here, the service attempts to create the Batch service-linked role in your account.  If your specified role has a path other than /, then you must specify either the full role ARN (recommended) or prefix the role name with the path. For example, if a role with the name bar has a path of /foo/, specify /foo/bar as the role name. For more information, see Friendly names and paths in the IAM User Guide.  Depending on how you created your Batch service role, its ARN might contain the service-role path prefix. When you only specify the name of the service role, Batch assumes that your ARN doesn't use the service-role path prefix. Because of this, we recommend that you specify the full ARN of your service role when you create compute environments.
        public let serviceRole: String?
        /// The state of the compute environment. If the state is ENABLED, then the compute environment accepts jobs from a queue and can scale out automatically based on queues. If the state is ENABLED, then the Batch scheduler can attempt to place jobs from an associated job queue on the compute resources within the environment. If the compute environment is managed, then it can scale its instances out or in automatically, based on the job queue demand. If the state is DISABLED, then the Batch scheduler doesn't attempt to place jobs within the environment. Jobs in a STARTING or RUNNING state continue to progress normally. Managed compute environments in the DISABLED state don't scale out.   Compute environments in a DISABLED state may continue to incur billing charges. To prevent additional charges, turn off and then delete the compute environment. For more information, see State in the Batch User Guide.  When an instance is idle, the instance scales down to the minvCpus value. However, the instance size doesn't change. For example, consider a c5.8xlarge instance with a minvCpus value of 4 and a desiredvCpus value of 36. This instance doesn't scale down to a c5.large instance.
        public let state: CEState?
        /// The tags that you apply to the compute environment to help you categorize and organize your resources. Each tag consists of a key and an optional value. For more information, see Tagging Amazon Web Services Resources in Amazon Web Services General Reference. These tags can be updated or removed using the TagResource and UntagResource API operations. These tags don't propagate to the underlying compute resources.
        public let tags: [String: String]?
        /// The type of the compute environment: MANAGED or UNMANAGED. For more information, see Compute Environments in the Batch User Guide.
        public let type: CEType?
        /// The maximum number of vCPUs for an unmanaged compute environment. This parameter is only used for fair share scheduling to reserve vCPU capacity for new share identifiers. If this parameter isn't provided for a fair share job queue, no vCPU capacity is reserved.  This parameter is only supported when the type parameter is set to UNMANAGED.
        public let unmanagedvCpus: Int?

        public init(computeEnvironmentName: String? = nil, computeResources: ComputeResource? = nil, eksConfiguration: EksConfiguration? = nil, serviceRole: String? = nil, state: CEState? = nil, tags: [String: String]? = nil, type: CEType? = nil, unmanagedvCpus: Int? = nil) {
            self.computeEnvironmentName = computeEnvironmentName
            self.computeResources = computeResources
            self.eksConfiguration = eksConfiguration
            self.serviceRole = serviceRole
            self.state = state
            self.tags = tags
            self.type = type
            self.unmanagedvCpus = unmanagedvCpus
        }

        public func validate(name: String) throws {
            try self.computeResources?.validate(name: "\(name).computeResources")
            try self.tags?.forEach {
                try validate($0.key, name: "tags.key", parent: name, max: 128)
                try validate($0.key, name: "tags.key", parent: name, min: 1)
                try validate($0.value, name: "tags[\"\($0.key)\"]", parent: name, max: 256)
            }
            try self.validate(self.tags, name: "tags", parent: name, max: 50)
            try self.validate(self.tags, name: "tags", parent: name, min: 1)
        }

        private enum CodingKeys: String, CodingKey {
            case computeEnvironmentName = "computeEnvironmentName"
            case computeResources = "computeResources"
            case eksConfiguration = "eksConfiguration"
            case serviceRole = "serviceRole"
            case state = "state"
            case tags = "tags"
            case type = "type"
            case unmanagedvCpus = "unmanagedvCpus"
        }
    }

    public struct CreateComputeEnvironmentResponse: AWSDecodableShape {
        /// The Amazon Resource Name (ARN) of the compute environment.
        public let computeEnvironmentArn: String?
        /// The name of the compute environment. It can be up to 128 characters long. It can contain uppercase and lowercase letters, numbers, hyphens (-), and underscores (_).
        public let computeEnvironmentName: String?

        public init(computeEnvironmentArn: String? = nil, computeEnvironmentName: String? = nil) {
            self.computeEnvironmentArn = computeEnvironmentArn
            self.computeEnvironmentName = computeEnvironmentName
        }

        private enum CodingKeys: String, CodingKey {
            case computeEnvironmentArn = "computeEnvironmentArn"
            case computeEnvironmentName = "computeEnvironmentName"
        }
    }

    public struct CreateJobQueueRequest: AWSEncodableShape {
        /// The set of compute environments mapped to a job queue and their order relative to each other. The job scheduler uses this parameter to determine which compute environment runs a specific job. Compute environments must be in the VALID state before you can associate them with a job queue. You can associate up to three compute environments with a job queue. All of the compute environments must be either EC2 (EC2 or SPOT) or Fargate (FARGATE or FARGATE_SPOT); EC2 and Fargate compute environments can't be mixed.  All compute environments that are associated with a job queue must share the same architecture. Batch doesn't support mixing compute environment architecture types in a single job queue.
        public let computeEnvironmentOrder: [ComputeEnvironmentOrder]?
        /// The name of the job queue. It can be up to 128 letters long. It can contain uppercase and lowercase letters, numbers, hyphens (-), and underscores (_).
        public let jobQueueName: String?
        /// The set of actions that Batch performs on jobs that remain at the head of the job queue in the specified state longer than specified times. Batch will perform each action after maxTimeSeconds has passed.
        public let jobStateTimeLimitActions: [JobStateTimeLimitAction]?
        /// The priority of the job queue. Job queues with a higher priority (or a higher integer value for the priority parameter) are evaluated first when associated with the same compute environment. Priority is determined in descending order. For example, a job queue with a priority value of 10 is given scheduling preference over a job queue with a priority value of 1. All of the compute environments must be either EC2 (EC2 or SPOT) or Fargate (FARGATE or FARGATE_SPOT); EC2 and Fargate compute environments can't be mixed.
        public let priority: Int?
        /// The Amazon Resource Name (ARN) of the fair share scheduling policy. If this parameter is specified, the job queue uses a fair share scheduling policy. If this parameter isn't specified, the job queue uses a first in, first out (FIFO) scheduling policy. After a job queue is created, you can replace but can't remove the fair share scheduling policy. The format is aws:Partition:batch:Region:Account:scheduling-policy/Name . An example is aws:aws:batch:us-west-2:123456789012:scheduling-policy/MySchedulingPolicy.
        public let schedulingPolicyArn: String?
        /// The state of the job queue. If the job queue state is ENABLED, it is able to accept jobs. If the job queue state is DISABLED, new jobs can't be added to the queue, but jobs already in the queue can finish.
        public let state: JQState?
        /// The tags that you apply to the job queue to help you categorize and organize your resources. Each tag consists of a key and an optional value. For more information, see Tagging your Batch resources in Batch User Guide.
        public let tags: [String: String]?

        public init(computeEnvironmentOrder: [ComputeEnvironmentOrder]? = nil, jobQueueName: String? = nil, jobStateTimeLimitActions: [JobStateTimeLimitAction]? = nil, priority: Int? = nil, schedulingPolicyArn: String? = nil, state: JQState? = nil, tags: [String: String]? = nil) {
            self.computeEnvironmentOrder = computeEnvironmentOrder
            self.jobQueueName = jobQueueName
            self.jobStateTimeLimitActions = jobStateTimeLimitActions
            self.priority = priority
            self.schedulingPolicyArn = schedulingPolicyArn
            self.state = state
            self.tags = tags
        }

        public func validate(name: String) throws {
            try self.tags?.forEach {
                try validate($0.key, name: "tags.key", parent: name, max: 128)
                try validate($0.key, name: "tags.key", parent: name, min: 1)
                try validate($0.value, name: "tags[\"\($0.key)\"]", parent: name, max: 256)
            }
            try self.validate(self.tags, name: "tags", parent: name, max: 50)
            try self.validate(self.tags, name: "tags", parent: name, min: 1)
        }

        private enum CodingKeys: String, CodingKey {
            case computeEnvironmentOrder = "computeEnvironmentOrder"
            case jobQueueName = "jobQueueName"
            case jobStateTimeLimitActions = "jobStateTimeLimitActions"
            case priority = "priority"
            case schedulingPolicyArn = "schedulingPolicyArn"
            case state = "state"
            case tags = "tags"
        }
    }

    public struct CreateJobQueueResponse: AWSDecodableShape {
        /// The Amazon Resource Name (ARN) of the job queue.
        public let jobQueueArn: String?
        /// The name of the job queue.
        public let jobQueueName: String?

        public init(jobQueueArn: String? = nil, jobQueueName: String? = nil) {
            self.jobQueueArn = jobQueueArn
            self.jobQueueName = jobQueueName
        }

        private enum CodingKeys: String, CodingKey {
            case jobQueueArn = "jobQueueArn"
            case jobQueueName = "jobQueueName"
        }
    }

    public struct CreateSchedulingPolicyRequest: AWSEncodableShape {
        /// The fair share policy of the scheduling policy.
        public let fairsharePolicy: FairsharePolicy?
        /// The name of the scheduling policy. It can be up to 128 letters long. It can contain uppercase and lowercase letters, numbers, hyphens (-), and underscores (_).
        public let name: String?
        /// The tags that you apply to the scheduling policy to help you categorize and organize your resources. Each tag consists of a key and an optional value. For more information, see Tagging Amazon Web Services Resources in Amazon Web Services General Reference. These tags can be updated or removed using the TagResource and UntagResource API operations.
        public let tags: [String: String]?

        public init(fairsharePolicy: FairsharePolicy? = nil, name: String? = nil, tags: [String: String]? = nil) {
            self.fairsharePolicy = fairsharePolicy
            self.name = name
            self.tags = tags
        }

        public func validate(name: String) throws {
            try self.tags?.forEach {
                try validate($0.key, name: "tags.key", parent: name, max: 128)
                try validate($0.key, name: "tags.key", parent: name, min: 1)
                try validate($0.value, name: "tags[\"\($0.key)\"]", parent: name, max: 256)
            }
            try self.validate(self.tags, name: "tags", parent: name, max: 50)
            try self.validate(self.tags, name: "tags", parent: name, min: 1)
        }

        private enum CodingKeys: String, CodingKey {
            case fairsharePolicy = "fairsharePolicy"
            case name = "name"
            case tags = "tags"
        }
    }

    public struct CreateSchedulingPolicyResponse: AWSDecodableShape {
        /// The Amazon Resource Name (ARN) of the scheduling policy. The format is aws:Partition:batch:Region:Account:scheduling-policy/Name . For example, aws:aws:batch:us-west-2:123456789012:scheduling-policy/MySchedulingPolicy.
        public let arn: String?
        /// The name of the scheduling policy.
        public let name: String?

        public init(arn: String? = nil, name: String? = nil) {
            self.arn = arn
            self.name = name
        }

        private enum CodingKeys: String, CodingKey {
            case arn = "arn"
            case name = "name"
        }
    }

    public struct DeleteComputeEnvironmentRequest: AWSEncodableShape {
        /// The name or Amazon Resource Name (ARN) of the compute environment to delete.
        public let computeEnvironment: String?

        public init(computeEnvironment: String? = nil) {
            self.computeEnvironment = computeEnvironment
        }

        private enum CodingKeys: String, CodingKey {
            case computeEnvironment = "computeEnvironment"
        }
    }

    public struct DeleteComputeEnvironmentResponse: AWSDecodableShape {
        public init() {}
    }

    public struct DeleteJobQueueRequest: AWSEncodableShape {
        /// The short name or full Amazon Resource Name (ARN) of the queue to delete.
        public let jobQueue: String?

        public init(jobQueue: String? = nil) {
            self.jobQueue = jobQueue
        }

        private enum CodingKeys: String, CodingKey {
            case jobQueue = "jobQueue"
        }
    }

    public struct DeleteJobQueueResponse: AWSDecodableShape {
        public init() {}
    }

    public struct DeleteSchedulingPolicyRequest: AWSEncodableShape {
        /// The Amazon Resource Name (ARN) of the scheduling policy to delete.
        public let arn: String?

        public init(arn: String? = nil) {
            self.arn = arn
        }

        private enum CodingKeys: String, CodingKey {
            case arn = "arn"
        }
    }

    public struct DeleteSchedulingPolicyResponse: AWSDecodableShape {
        public init() {}
    }

    public struct DeregisterJobDefinitionRequest: AWSEncodableShape {
        /// The name and revision (name:revision) or full Amazon Resource Name (ARN) of the job definition to deregister.
        public let jobDefinition: String?

        public init(jobDefinition: String? = nil) {
            self.jobDefinition = jobDefinition
        }

        private enum CodingKeys: String, CodingKey {
            case jobDefinition = "jobDefinition"
        }
    }

    public struct DeregisterJobDefinitionResponse: AWSDecodableShape {
        public init() {}
    }

    public struct DescribeComputeEnvironmentsRequest: AWSEncodableShape {
        /// A list of up to 100 compute environment names or full Amazon Resource Name (ARN) entries.
        public let computeEnvironments: [String]?
        /// The maximum number of cluster results returned by DescribeComputeEnvironments in paginated output. When this parameter is used, DescribeComputeEnvironments only returns maxResults results in a single page along with a nextToken response element. The remaining results of the initial request can be seen by sending another DescribeComputeEnvironments request with the returned nextToken value. This value can be between 1 and 100. If this parameter isn't used, then DescribeComputeEnvironments returns up to 100 results and a nextToken value if applicable.
        public let maxResults: Int?
        /// The nextToken value returned from a previous paginated DescribeComputeEnvironments request where maxResults was used and the results exceeded the value of that parameter. Pagination continues from the end of the previous results that returned the nextToken value. This value is null when there are no more results to return.  Treat this token as an opaque identifier that's only used to retrieve the next items in a list and not for other programmatic purposes.
        public let nextToken: String?

        public init(computeEnvironments: [String]? = nil, maxResults: Int? = nil, nextToken: String? = nil) {
            self.computeEnvironments = computeEnvironments
            self.maxResults = maxResults
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case computeEnvironments = "computeEnvironments"
            case maxResults = "maxResults"
            case nextToken = "nextToken"
        }
    }

    public struct DescribeComputeEnvironmentsResponse: AWSDecodableShape {
        /// The list of compute environments.
        public let computeEnvironments: [ComputeEnvironmentDetail]?
        /// The nextToken value to include in a future DescribeComputeEnvironments request. When the results of a DescribeComputeEnvironments request exceed maxResults, this value can be used to retrieve the next page of results. This value is null when there are no more results to return.
        public let nextToken: String?

        public init(computeEnvironments: [ComputeEnvironmentDetail]? = nil, nextToken: String? = nil) {
            self.computeEnvironments = computeEnvironments
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case computeEnvironments = "computeEnvironments"
            case nextToken = "nextToken"
        }
    }

    public struct DescribeJobDefinitionsRequest: AWSEncodableShape {
        /// The name of the job definition to describe.
        public let jobDefinitionName: String?
        /// A list of up to 100 job definitions. Each entry in the list can either be an ARN in the format arn:aws:batch:${Region}:${Account}:job-definition/${JobDefinitionName}:${Revision} or a short version using the form ${JobDefinitionName}:${Revision}. This parameter can't be used with other parameters.
        public let jobDefinitions: [String]?
        /// The maximum number of results returned by DescribeJobDefinitions in paginated output. When this parameter is used, DescribeJobDefinitions only returns maxResults results in a single page and a nextToken response element. The remaining results of the initial request can be seen by sending another DescribeJobDefinitions request with the returned nextToken value. This value can be between 1 and 100. If this parameter isn't used, then DescribeJobDefinitions returns up to 100 results and a nextToken value if applicable.
        public let maxResults: Int?
        /// The nextToken value returned from a previous paginated DescribeJobDefinitions request where maxResults was used and the results exceeded the value of that parameter. Pagination continues from the end of the previous results that returned the nextToken value. This value is null when there are no more results to return.  Treat this token as an opaque identifier that's only used to retrieve the next items in a list and not for other programmatic purposes.
        public let nextToken: String?
        /// The status used to filter job definitions.
        public let status: String?

        public init(jobDefinitionName: String? = nil, jobDefinitions: [String]? = nil, maxResults: Int? = nil, nextToken: String? = nil, status: String? = nil) {
            self.jobDefinitionName = jobDefinitionName
            self.jobDefinitions = jobDefinitions
            self.maxResults = maxResults
            self.nextToken = nextToken
            self.status = status
        }

        private enum CodingKeys: String, CodingKey {
            case jobDefinitionName = "jobDefinitionName"
            case jobDefinitions = "jobDefinitions"
            case maxResults = "maxResults"
            case nextToken = "nextToken"
            case status = "status"
        }
    }

    public struct DescribeJobDefinitionsResponse: AWSDecodableShape {
        /// The list of job definitions.
        public let jobDefinitions: [JobDefinition]?
        /// The nextToken value to include in a future DescribeJobDefinitions request. When the results of a DescribeJobDefinitions request exceed maxResults, this value can be used to retrieve the next page of results. This value is null when there are no more results to return.
        public let nextToken: String?

        public init(jobDefinitions: [JobDefinition]? = nil, nextToken: String? = nil) {
            self.jobDefinitions = jobDefinitions
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case jobDefinitions = "jobDefinitions"
            case nextToken = "nextToken"
        }
    }

    public struct DescribeJobQueuesRequest: AWSEncodableShape {
        /// A list of up to 100 queue names or full queue Amazon Resource Name (ARN) entries.
        public let jobQueues: [String]?
        /// The maximum number of results returned by DescribeJobQueues in paginated output. When this parameter is used, DescribeJobQueues only returns maxResults results in a single page and a nextToken response element. The remaining results of the initial request can be seen by sending another DescribeJobQueues request with the returned nextToken value. This value can be between 1 and 100. If this parameter isn't used, then DescribeJobQueues returns up to 100 results and a nextToken value if applicable.
        public let maxResults: Int?
        /// The nextToken value returned from a previous paginated DescribeJobQueues request where maxResults was used and the results exceeded the value of that parameter. Pagination continues from the end of the previous results that returned the nextToken value. This value is null when there are no more results to return.  Treat this token as an opaque identifier that's only used to retrieve the next items in a list and not for other programmatic purposes.
        public let nextToken: String?

        public init(jobQueues: [String]? = nil, maxResults: Int? = nil, nextToken: String? = nil) {
            self.jobQueues = jobQueues
            self.maxResults = maxResults
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case jobQueues = "jobQueues"
            case maxResults = "maxResults"
            case nextToken = "nextToken"
        }
    }

    public struct DescribeJobQueuesResponse: AWSDecodableShape {
        /// The list of job queues.
        public let jobQueues: [JobQueueDetail]?
        /// The nextToken value to include in a future DescribeJobQueues request. When the results of a DescribeJobQueues request exceed maxResults, this value can be used to retrieve the next page of results. This value is null when there are no more results to return.
        public let nextToken: String?

        public init(jobQueues: [JobQueueDetail]? = nil, nextToken: String? = nil) {
            self.jobQueues = jobQueues
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case jobQueues = "jobQueues"
            case nextToken = "nextToken"
        }
    }

    public struct DescribeJobsRequest: AWSEncodableShape {
        /// A list of up to 100 job IDs.
        public let jobs: [String]?

        public init(jobs: [String]? = nil) {
            self.jobs = jobs
        }

        private enum CodingKeys: String, CodingKey {
            case jobs = "jobs"
        }
    }

    public struct DescribeJobsResponse: AWSDecodableShape {
        /// The list of jobs.
        public let jobs: [JobDetail]?

        public init(jobs: [JobDetail]? = nil) {
            self.jobs = jobs
        }

        private enum CodingKeys: String, CodingKey {
            case jobs = "jobs"
        }
    }

    public struct DescribeSchedulingPoliciesRequest: AWSEncodableShape {
        /// A list of up to 100 scheduling policy Amazon Resource Name (ARN) entries.
        public let arns: [String]?

        public init(arns: [String]? = nil) {
            self.arns = arns
        }

        private enum CodingKeys: String, CodingKey {
            case arns = "arns"
        }
    }

    public struct DescribeSchedulingPoliciesResponse: AWSDecodableShape {
        /// The list of scheduling policies.
        public let schedulingPolicies: [SchedulingPolicyDetail]?

        public init(schedulingPolicies: [SchedulingPolicyDetail]? = nil) {
            self.schedulingPolicies = schedulingPolicies
        }

        private enum CodingKeys: String, CodingKey {
            case schedulingPolicies = "schedulingPolicies"
        }
    }

    public struct Device: AWSEncodableShape & AWSDecodableShape {
        /// The path inside the container that's used to expose the host device. By default, the hostPath value is used.
        public let containerPath: String?
        /// The path for the device on the host container instance.
        public let hostPath: String?
        /// The explicit permissions to provide to the container for the device. By default, the container has permissions for read, write, and mknod for the device.
        public let permissions: [DeviceCgroupPermission]?

        public init(containerPath: String? = nil, hostPath: String? = nil, permissions: [DeviceCgroupPermission]? = nil) {
            self.containerPath = containerPath
            self.hostPath = hostPath
            self.permissions = permissions
        }

        private enum CodingKeys: String, CodingKey {
            case containerPath = "containerPath"
            case hostPath = "hostPath"
            case permissions = "permissions"
        }
    }

    public struct EFSAuthorizationConfig: AWSEncodableShape & AWSDecodableShape {
        /// The Amazon EFS access point ID to use. If an access point is specified, the root directory value specified in the EFSVolumeConfiguration must either be omitted or set to / which enforces the path set on the EFS access point. If an access point is used, transit encryption must be enabled in the EFSVolumeConfiguration. For more information, see Working with Amazon EFS access points in the Amazon Elastic File System User Guide.
        public let accessPointId: String?
        /// Whether or not to use the Batch job IAM role defined in a job definition when mounting the Amazon EFS file system. If enabled, transit encryption must be enabled in the EFSVolumeConfiguration. If this parameter is omitted, the default value of DISABLED is used. For more information, see Using Amazon EFS access points in the Batch User Guide. EFS IAM authorization requires that TransitEncryption be ENABLED and that a JobRoleArn is specified.
        public let iam: EFSAuthorizationConfigIAM?

        public init(accessPointId: String? = nil, iam: EFSAuthorizationConfigIAM? = nil) {
            self.accessPointId = accessPointId
            self.iam = iam
        }

        private enum CodingKeys: String, CodingKey {
            case accessPointId = "accessPointId"
            case iam = "iam"
        }
    }

    public struct EFSVolumeConfiguration: AWSEncodableShape & AWSDecodableShape {
        /// The authorization configuration details for the Amazon EFS file system.
        public let authorizationConfig: EFSAuthorizationConfig?
        /// The Amazon EFS file system ID to use.
        public let fileSystemId: String?
        /// The directory within the Amazon EFS file system to mount as the root directory inside the host. If this parameter is omitted, the root of the Amazon EFS volume is used instead. Specifying / has the same effect as omitting this parameter. The maximum length is 4,096 characters.  If an EFS access point is specified in the authorizationConfig, the root directory parameter must either be omitted or set to /, which enforces the path set on the Amazon EFS access point.
        public let rootDirectory: String?
        /// Determines whether to enable encryption for Amazon EFS data in transit between the Amazon ECS host and the Amazon EFS server. Transit encryption must be enabled if Amazon EFS IAM authorization is used. If this parameter is omitted, the default value of DISABLED is used. For more information, see Encrypting data in transit in the Amazon Elastic File System User Guide.
        public let transitEncryption: EFSTransitEncryption?
        /// The port to use when sending encrypted data between the Amazon ECS host and the Amazon EFS server. If you don't specify a transit encryption port, it uses the port selection strategy that the Amazon EFS mount helper uses. The value must be between 0 and 65,535. For more information, see EFS mount helper in the Amazon Elastic File System User Guide.
        public let transitEncryptionPort: Int?

        public init(authorizationConfig: EFSAuthorizationConfig? = nil, fileSystemId: String? = nil, rootDirectory: String? = nil, transitEncryption: EFSTransitEncryption? = nil, transitEncryptionPort: Int? = nil) {
            self.authorizationConfig = authorizationConfig
            self.fileSystemId = fileSystemId
            self.rootDirectory = rootDirectory
            self.transitEncryption = transitEncryption
            self.transitEncryptionPort = transitEncryptionPort
        }

        private enum CodingKeys: String, CodingKey {
            case authorizationConfig = "authorizationConfig"
            case fileSystemId = "fileSystemId"
            case rootDirectory = "rootDirectory"
            case transitEncryption = "transitEncryption"
            case transitEncryptionPort = "transitEncryptionPort"
        }
    }

    public struct Ec2Configuration: AWSEncodableShape & AWSDecodableShape {
        /// The AMI ID used for instances launched in the compute environment that match the image type. This setting overrides the imageId set in the computeResource object.  The AMI that you choose for a compute environment must match the architecture of the instance types that you intend to use for that compute environment. For example, if your compute environment uses A1 instance types, the compute resource AMI that you choose must support ARM instances. Amazon ECS vends both x86 and ARM versions of the Amazon ECS-optimized Amazon Linux 2 AMI. For more information, see Amazon ECS-optimized Amazon Linux 2 AMI in the Amazon Elastic Container Service Developer Guide.
        public let imageIdOverride: String?
        /// The Kubernetes version for the compute environment. If you don't specify a value, the latest version that Batch supports is used.
        public let imageKubernetesVersion: String?
        /// The image type to match with the instance type to select an AMI. The supported values are different for ECS and EKS resources.  ECS  If the imageIdOverride parameter isn't specified, then a recent Amazon ECS-optimized Amazon Linux 2 AMI (ECS_AL2) is used. If a new image type is specified in an update, but neither an imageId nor a imageIdOverride parameter is specified, then the latest Amazon ECS optimized AMI for that image type that's supported by Batch is used.  ECS_AL2   Amazon Linux 2: Default for all non-GPU instance families.  ECS_AL2_NVIDIA   Amazon Linux 2 (GPU): Default for all GPU instance families (for example P4 and G4) and can be used for all non Amazon Web Services Graviton-based instance types.  ECS_AL2023   Amazon Linux 2023: Batch supports Amazon Linux 2023.  Amazon Linux 2023 does not support A1 instances.   ECS_AL1   Amazon Linux. Amazon Linux has reached the end-of-life of standard support. For more information, see Amazon Linux AMI.    EKS  If the imageIdOverride parameter isn't specified, then a recent Amazon EKS-optimized Amazon Linux AMI (EKS_AL2) is used. If a new image type is specified in an update, but neither an imageId nor a imageIdOverride parameter is specified, then the latest Amazon EKS optimized AMI for that image type that Batch supports is used.  EKS_AL2   Amazon Linux 2: Default for all non-GPU instance families.  EKS_AL2_NVIDIA   Amazon Linux 2 (accelerated): Default for all GPU instance families (for example, P4 and G4) and can be used for all non Amazon Web Services Graviton-based instance types.
        public let imageType: String?

        public init(imageIdOverride: String? = nil, imageKubernetesVersion: String? = nil, imageType: String? = nil) {
            self.imageIdOverride = imageIdOverride
            self.imageKubernetesVersion = imageKubernetesVersion
            self.imageType = imageType
        }

        public func validate(name: String) throws {
            try self.validate(self.imageIdOverride, name: "imageIdOverride", parent: name, max: 256)
            try self.validate(self.imageIdOverride, name: "imageIdOverride", parent: name, min: 1)
            try self.validate(self.imageKubernetesVersion, name: "imageKubernetesVersion", parent: name, max: 256)
            try self.validate(self.imageKubernetesVersion, name: "imageKubernetesVersion", parent: name, min: 1)
            try self.validate(self.imageType, name: "imageType", parent: name, max: 256)
            try self.validate(self.imageType, name: "imageType", parent: name, min: 1)
        }

        private enum CodingKeys: String, CodingKey {
            case imageIdOverride = "imageIdOverride"
            case imageKubernetesVersion = "imageKubernetesVersion"
            case imageType = "imageType"
        }
    }

    public struct EcsProperties: AWSEncodableShape & AWSDecodableShape {
        /// An object that contains the properties for the Amazon ECS task definition of a job.  This object is currently limited to one element.
        public let taskProperties: [EcsTaskProperties]?

        public init(taskProperties: [EcsTaskProperties]? = nil) {
            self.taskProperties = taskProperties
        }

        private enum CodingKeys: String, CodingKey {
            case taskProperties = "taskProperties"
        }
    }

    public struct EcsPropertiesDetail: AWSDecodableShape {
        /// The properties for the Amazon ECS task definition of a job.
        public let taskProperties: [EcsTaskDetails]?

        public init(taskProperties: [EcsTaskDetails]? = nil) {
            self.taskProperties = taskProperties
        }

        private enum CodingKeys: String, CodingKey {
            case taskProperties = "taskProperties"
        }
    }

    public struct EcsPropertiesOverride: AWSEncodableShape {
        /// The overrides for the Amazon ECS task definition of a job.  This object is currently limited to one element.
        public let taskProperties: [TaskPropertiesOverride]?

        public init(taskProperties: [TaskPropertiesOverride]? = nil) {
            self.taskProperties = taskProperties
        }

        private enum CodingKeys: String, CodingKey {
            case taskProperties = "taskProperties"
        }
    }

    public struct EcsTaskDetails: AWSDecodableShape {
        /// The Amazon Resource Name (ARN) of the container instance that hosts the task.
        public let containerInstanceArn: String?
        /// A list of containers that are included in the taskProperties list.
        public let containers: [TaskContainerDetails]?
        /// The amount of ephemeral storage allocated for the task.
        public let ephemeralStorage: EphemeralStorage?
        /// The Amazon Resource Name (ARN) of the execution role that Batch can assume. For more information, see Batch execution IAM role in the Batch User Guide.
        public let executionRoleArn: String?
        /// The IPC resource namespace to use for the containers in the task.
        public let ipcMode: String?
        /// The network configuration for jobs that are running on Fargate resources. Jobs that are running on Amazon EC2 resources must not specify this parameter.
        public let networkConfiguration: NetworkConfiguration?
        /// The process namespace to use for the containers in the task.
        public let pidMode: String?
        /// The Fargate platform version where the jobs are running.
        public let platformVersion: String?
        /// An object that represents the compute environment architecture for Batch jobs on Fargate.
        public let runtimePlatform: RuntimePlatform?
        /// The ARN of the Amazon ECS task.
        public let taskArn: String?
        /// The Amazon Resource Name (ARN) of the IAM role that the container can assume for Amazon Web Services permissions. For more information, see IAM roles for tasks in the Amazon Elastic Container Service Developer Guide.  This is object is comparable to ContainerProperties:jobRoleArn.
        public let taskRoleArn: String?
        /// A list of data volumes used in a job.
        public let volumes: [Volume]?

        public init(containerInstanceArn: String? = nil, containers: [TaskContainerDetails]? = nil, ephemeralStorage: EphemeralStorage? = nil, executionRoleArn: String? = nil, ipcMode: String? = nil, networkConfiguration: NetworkConfiguration? = nil, pidMode: String? = nil, platformVersion: String? = nil, runtimePlatform: RuntimePlatform? = nil, taskArn: String? = nil, taskRoleArn: String? = nil, volumes: [Volume]? = nil) {
            self.containerInstanceArn = containerInstanceArn
            self.containers = containers
            self.ephemeralStorage = ephemeralStorage
            self.executionRoleArn = executionRoleArn
            self.ipcMode = ipcMode
            self.networkConfiguration = networkConfiguration
            self.pidMode = pidMode
            self.platformVersion = platformVersion
            self.runtimePlatform = runtimePlatform
            self.taskArn = taskArn
            self.taskRoleArn = taskRoleArn
            self.volumes = volumes
        }

        private enum CodingKeys: String, CodingKey {
            case containerInstanceArn = "containerInstanceArn"
            case containers = "containers"
            case ephemeralStorage = "ephemeralStorage"
            case executionRoleArn = "executionRoleArn"
            case ipcMode = "ipcMode"
            case networkConfiguration = "networkConfiguration"
            case pidMode = "pidMode"
            case platformVersion = "platformVersion"
            case runtimePlatform = "runtimePlatform"
            case taskArn = "taskArn"
            case taskRoleArn = "taskRoleArn"
            case volumes = "volumes"
        }
    }

    public struct EcsTaskProperties: AWSEncodableShape & AWSDecodableShape {
        /// This object is a list of containers.
        public let containers: [TaskContainerProperties]?
        /// The amount of ephemeral storage to allocate for the task. This parameter is used to expand the total amount of ephemeral storage available, beyond the default amount, for tasks hosted on Fargate.
        public let ephemeralStorage: EphemeralStorage?
        /// The Amazon Resource Name (ARN) of the execution role that Batch can assume. For jobs that run on Fargate resources, you must provide an execution role. For more information, see Batch execution IAM role in the Batch User Guide.
        public let executionRoleArn: String?
        /// The IPC resource namespace to use for the containers in the task. The valid values are host, task, or none. If host is specified, all containers within the tasks that specified the host IPC mode on the same container instance share the same IPC resources with the host Amazon EC2 instance. If task is specified, all containers within the specified task share the same IPC resources. If none is specified, the IPC resources within the containers of a task are private, and are not shared with other containers in a task or on the container instance.  If no value is specified, then the IPC resource namespace sharing depends on the Docker daemon setting on the container instance. For more information, see IPC settings in the Docker run reference.
        public let ipcMode: String?
        /// The network configuration for jobs that are running on Fargate resources. Jobs that are running on Amazon EC2 resources must not specify this parameter.
        public let networkConfiguration: NetworkConfiguration?
        /// The process namespace to use for the containers in the task. The valid values are host or task. For example, monitoring sidecars might need pidMode to access information about other containers running in the same task. If host is specified, all containers within the tasks that specified the host PID mode on the same container instance share the process namespace with the host Amazon EC2 instance. If task is specified, all containers within the specified task share the same process namespace. If no value is specified, the default is a private namespace for each container. For more information, see PID settings in the Docker run reference.
        public let pidMode: String?
        /// The Fargate platform version where the jobs are running. A platform version is specified only for jobs that are running on Fargate resources. If one isn't specified, the LATEST platform version is used by default. This uses a recent, approved version of the Fargate platform for compute resources. For more information, see Fargate platform versions in the Amazon Elastic Container Service Developer Guide.
        public let platformVersion: String?
        /// An object that represents the compute environment architecture for Batch jobs on Fargate.
        public let runtimePlatform: RuntimePlatform?
        /// The Amazon Resource Name (ARN) that's associated with the Amazon ECS task.  This is object is comparable to ContainerProperties:jobRoleArn.
        public let taskRoleArn: String?
        /// A list of volumes that are associated with the job.
        public let volumes: [Volume]?

        public init(containers: [TaskContainerProperties]? = nil, ephemeralStorage: EphemeralStorage? = nil, executionRoleArn: String? = nil, ipcMode: String? = nil, networkConfiguration: NetworkConfiguration? = nil, pidMode: String? = nil, platformVersion: String? = nil, runtimePlatform: RuntimePlatform? = nil, taskRoleArn: String? = nil, volumes: [Volume]? = nil) {
            self.containers = containers
            self.ephemeralStorage = ephemeralStorage
            self.executionRoleArn = executionRoleArn
            self.ipcMode = ipcMode
            self.networkConfiguration = networkConfiguration
            self.pidMode = pidMode
            self.platformVersion = platformVersion
            self.runtimePlatform = runtimePlatform
            self.taskRoleArn = taskRoleArn
            self.volumes = volumes
        }

        private enum CodingKeys: String, CodingKey {
            case containers = "containers"
            case ephemeralStorage = "ephemeralStorage"
            case executionRoleArn = "executionRoleArn"
            case ipcMode = "ipcMode"
            case networkConfiguration = "networkConfiguration"
            case pidMode = "pidMode"
            case platformVersion = "platformVersion"
            case runtimePlatform = "runtimePlatform"
            case taskRoleArn = "taskRoleArn"
            case volumes = "volumes"
        }
    }

    public struct EksAttemptContainerDetail: AWSDecodableShape {
        /// The exit code returned for the job attempt. A non-zero exit code is considered failed.
        public let exitCode: Int?
        /// A short (255 max characters) human-readable string to provide additional details for a running or stopped container.
        public let reason: String?

        public init(exitCode: Int? = nil, reason: String? = nil) {
            self.exitCode = exitCode
            self.reason = reason
        }

        private enum CodingKeys: String, CodingKey {
            case exitCode = "exitCode"
            case reason = "reason"
        }
    }

    public struct EksAttemptDetail: AWSDecodableShape {
        /// The details for the final status of the containers for this job attempt.
        public let containers: [EksAttemptContainerDetail]?
        /// The details for the init containers.
        public let initContainers: [EksAttemptContainerDetail]?
        /// The name of the node for this job attempt.
        public let nodeName: String?
        /// The name of the pod for this job attempt.
        public let podName: String?
        /// The Unix timestamp (in milliseconds) for when the attempt was started (when the attempt transitioned from the STARTING state to the RUNNING state).
        public let startedAt: Int64?
        /// A short, human-readable string to provide additional details for the current status of the job attempt.
        public let statusReason: String?
        /// The Unix timestamp (in milliseconds) for when the attempt was stopped. This happens when the attempt transitioned from the RUNNING state to a terminal state, such as SUCCEEDED or FAILED.
        public let stoppedAt: Int64?

        public init(containers: [EksAttemptContainerDetail]? = nil, initContainers: [EksAttemptContainerDetail]? = nil, nodeName: String? = nil, podName: String? = nil, startedAt: Int64? = nil, statusReason: String? = nil, stoppedAt: Int64? = nil) {
            self.containers = containers
            self.initContainers = initContainers
            self.nodeName = nodeName
            self.podName = podName
            self.startedAt = startedAt
            self.statusReason = statusReason
            self.stoppedAt = stoppedAt
        }

        private enum CodingKeys: String, CodingKey {
            case containers = "containers"
            case initContainers = "initContainers"
            case nodeName = "nodeName"
            case podName = "podName"
            case startedAt = "startedAt"
            case statusReason = "statusReason"
            case stoppedAt = "stoppedAt"
        }
    }

    public struct EksConfiguration: AWSEncodableShape & AWSDecodableShape {
        /// The Amazon Resource Name (ARN) of the Amazon EKS cluster. An example is arn:aws:eks:us-east-1:123456789012:cluster/ClusterForBatch .
        public let eksClusterArn: String?
        /// The namespace of the Amazon EKS cluster. Batch manages pods in this namespace. The value can't left empty or null. It must be fewer than 64 characters long, can't be set to default, can't start with "kube-," and must match this regular expression: ^[a-z0-9]([-a-z0-9]*[a-z0-9])?$. For more information, see Namespaces in the Kubernetes documentation.
        public let kubernetesNamespace: String?

        public init(eksClusterArn: String? = nil, kubernetesNamespace: String? = nil) {
            self.eksClusterArn = eksClusterArn
            self.kubernetesNamespace = kubernetesNamespace
        }

        private enum CodingKeys: String, CodingKey {
            case eksClusterArn = "eksClusterArn"
            case kubernetesNamespace = "kubernetesNamespace"
        }
    }

    public struct EksContainer: AWSEncodableShape & AWSDecodableShape {
        /// An array of arguments to the entrypoint. If this isn't specified, the CMD of the container image is used. This corresponds to the args member in the Entrypoint portion of the Pod in Kubernetes. Environment variable references are expanded using the container's environment. If the referenced environment variable doesn't exist, the reference in the command isn't changed. For example, if the reference is to "$(NAME1)" and the NAME1 environment variable doesn't exist, the command string will remain "$(NAME1)." $$ is replaced with $, and the resulting string isn't expanded. For example, $$(VAR_NAME) is passed as $(VAR_NAME) whether or not the VAR_NAME environment variable exists. For more information, see Dockerfile reference: CMD and Define a command and arguments for a pod in the Kubernetes documentation.
        public let args: [String]?
        /// The entrypoint for the container. This isn't run within a shell. If this isn't specified, the ENTRYPOINT of the container image is used. Environment variable references are expanded using the container's environment. If the referenced environment variable doesn't exist, the reference in the command isn't changed. For example, if the reference is to "$(NAME1)" and the NAME1 environment variable doesn't exist, the command string will remain "$(NAME1)." $$ is replaced with $ and the resulting string isn't expanded. For example, $$(VAR_NAME) will be passed as $(VAR_NAME) whether or not the VAR_NAME environment variable exists. The entrypoint can't be updated. For more information, see ENTRYPOINT in the Dockerfile reference and Define a command and arguments for a container and Entrypoint in the Kubernetes documentation.
        public let command: [String]?
        /// The environment variables to pass to a container.  Environment variables cannot start with "AWS_BATCH". This naming convention is reserved for variables that Batch sets.
        public let env: [EksContainerEnvironmentVariable]?
        /// The Docker image used to start the container.
        public let image: String?
        /// The image pull policy for the container. Supported values are Always, IfNotPresent, and Never. This parameter defaults to IfNotPresent. However, if the :latest tag is specified, it defaults to Always. For more information, see Updating images in the Kubernetes documentation.
        public let imagePullPolicy: String?
        /// The name of the container. If the name isn't specified, the default name "Default" is used. Each container in a pod must have a unique name.
        public let name: String?
        /// The type and amount of resources to assign to a container. The supported resources include memory, cpu, and nvidia.com/gpu. For more information, see Resource management for pods and containers in the Kubernetes documentation.
        public let resources: EksContainerResourceRequirements?
        /// The security context for a job. For more information, see Configure a security context for a pod or container in the Kubernetes documentation.
        public let securityContext: EksContainerSecurityContext?
        /// The volume mounts for the container. Batch supports emptyDir, hostPath, and secret volume types. For more information about volumes and volume mounts in Kubernetes, see Volumes in the Kubernetes documentation.
        public let volumeMounts: [EksContainerVolumeMount]?

        public init(args: [String]? = nil, command: [String]? = nil, env: [EksContainerEnvironmentVariable]? = nil, image: String? = nil, imagePullPolicy: String? = nil, name: String? = nil, resources: EksContainerResourceRequirements? = nil, securityContext: EksContainerSecurityContext? = nil, volumeMounts: [EksContainerVolumeMount]? = nil) {
            self.args = args
            self.command = command
            self.env = env
            self.image = image
            self.imagePullPolicy = imagePullPolicy
            self.name = name
            self.resources = resources
            self.securityContext = securityContext
            self.volumeMounts = volumeMounts
        }

        public func validate(name: String) throws {
            try self.resources?.validate(name: "\(name).resources")
        }

        private enum CodingKeys: String, CodingKey {
            case args = "args"
            case command = "command"
            case env = "env"
            case image = "image"
            case imagePullPolicy = "imagePullPolicy"
            case name = "name"
            case resources = "resources"
            case securityContext = "securityContext"
            case volumeMounts = "volumeMounts"
        }
    }

    public struct EksContainerDetail: AWSDecodableShape {
        /// An array of arguments to the entrypoint. If this isn't specified, the CMD of the container image is used. This corresponds to the args member in the Entrypoint portion of the Pod in Kubernetes. Environment variable references are expanded using the container's environment. If the referenced environment variable doesn't exist, the reference in the command isn't changed. For example, if the reference is to "$(NAME1)" and the NAME1 environment variable doesn't exist, the command string will remain "$(NAME1)". $$ is replaced with $ and the resulting string isn't expanded. For example, $$(VAR_NAME) is passed as $(VAR_NAME) whether or not the VAR_NAME environment variable exists. For more information, see Dockerfile reference: CMD and Define a command and arguments for a pod in the Kubernetes documentation.
        public let args: [String]?
        /// The entrypoint for the container. For more information, see Entrypoint in the Kubernetes documentation.
        public let command: [String]?
        /// The environment variables to pass to a container.  Environment variables cannot start with "AWS_BATCH". This naming convention is reserved for variables that Batch sets.
        public let env: [EksContainerEnvironmentVariable]?
        /// The exit code returned for the job attempt. A non-zero exit code is considered failed.
        public let exitCode: Int?
        /// The Docker image used to start the container.
        public let image: String?
        /// The image pull policy for the container. Supported values are Always, IfNotPresent, and Never. This parameter defaults to Always if the :latest tag is specified, IfNotPresent otherwise. For more information, see Updating images in the Kubernetes documentation.
        public let imagePullPolicy: String?
        /// The name of the container. If the name isn't specified, the default name "Default" is used. Each container in a pod must have a unique name.
        public let name: String?
        /// A short human-readable string to provide additional details for a running or stopped container. It can be up to 255 characters long.
        public let reason: String?
        /// The type and amount of resources to assign to a container. The supported resources include memory, cpu, and nvidia.com/gpu. For more information, see Resource management for pods and containers in the Kubernetes documentation.
        public let resources: EksContainerResourceRequirements?
        /// The security context for a job. For more information, see Configure a security context for a pod or container in the Kubernetes documentation.
        public let securityContext: EksContainerSecurityContext?
        /// The volume mounts for the container. Batch supports emptyDir, hostPath, and secret volume types. For more information about volumes and volume mounts in Kubernetes, see Volumes in the Kubernetes documentation.
        public let volumeMounts: [EksContainerVolumeMount]?

        public init(args: [String]? = nil, command: [String]? = nil, env: [EksContainerEnvironmentVariable]? = nil, exitCode: Int? = nil, image: String? = nil, imagePullPolicy: String? = nil, name: String? = nil, reason: String? = nil, resources: EksContainerResourceRequirements? = nil, securityContext: EksContainerSecurityContext? = nil, volumeMounts: [EksContainerVolumeMount]? = nil) {
            self.args = args
            self.command = command
            self.env = env
            self.exitCode = exitCode
            self.image = image
            self.imagePullPolicy = imagePullPolicy
            self.name = name
            self.reason = reason
            self.resources = resources
            self.securityContext = securityContext
            self.volumeMounts = volumeMounts
        }

        private enum CodingKeys: String, CodingKey {
            case args = "args"
            case command = "command"
            case env = "env"
            case exitCode = "exitCode"
            case image = "image"
            case imagePullPolicy = "imagePullPolicy"
            case name = "name"
            case reason = "reason"
            case resources = "resources"
            case securityContext = "securityContext"
            case volumeMounts = "volumeMounts"
        }
    }

    public struct EksContainerEnvironmentVariable: AWSEncodableShape & AWSDecodableShape {
        /// The name of the environment variable.
        public let name: String?
        /// The value of the environment variable.
        public let value: String?

        public init(name: String? = nil, value: String? = nil) {
            self.name = name
            self.value = value
        }

        private enum CodingKeys: String, CodingKey {
            case name = "name"
            case value = "value"
        }
    }

    public struct EksContainerOverride: AWSEncodableShape {
        /// The arguments to the entrypoint to send to the container that overrides the default arguments from the Docker image or the job definition. For more information, see Dockerfile reference: CMD and Define a command an arguments for a pod in the Kubernetes documentation.
        public let args: [String]?
        /// The command to send to the container that overrides the default command from the Docker image or the job definition.
        public let command: [String]?
        /// The environment variables to send to the container. You can add new environment variables, which are added to the container at launch. Or, you can override the existing environment variables from the Docker image or the job definition.  Environment variables cannot start with "AWS_BATCH". This naming convention is reserved for variables that Batch sets.
        public let env: [EksContainerEnvironmentVariable]?
        /// The override of the Docker image that's used to start the container.
        public let image: String?
        /// A pointer to the container that you want to override. The name must match a unique container name that you wish to override.
        public let name: String?
        /// The type and amount of resources to assign to a container. These override the settings in the job definition. The supported resources include memory, cpu, and nvidia.com/gpu. For more information, see Resource management for pods and containers in the Kubernetes documentation.
        public let resources: EksContainerResourceRequirements?

        public init(args: [String]? = nil, command: [String]? = nil, env: [EksContainerEnvironmentVariable]? = nil, image: String? = nil, name: String? = nil, resources: EksContainerResourceRequirements? = nil) {
            self.args = args
            self.command = command
            self.env = env
            self.image = image
            self.name = name
            self.resources = resources
        }

        public func validate(name: String) throws {
            try self.resources?.validate(name: "\(name).resources")
        }

        private enum CodingKeys: String, CodingKey {
            case args = "args"
            case command = "command"
            case env = "env"
            case image = "image"
            case name = "name"
            case resources = "resources"
        }
    }

    public struct EksContainerResourceRequirements: AWSEncodableShape & AWSDecodableShape {
        /// The type and quantity of the resources to reserve for the container. The values vary based on the name that's specified. Resources can be requested using either the limits or the requests objects.  memory  The memory hard limit (in MiB) for the container, using whole integers, with a "Mi" suffix. If your container attempts to exceed the memory specified, the container is terminated. You must specify at least 4 MiB of memory for a job. memory can be specified in limits, requests, or both. If memory is specified in both places, then the value that's specified in limits must be equal to the value that's specified in requests.  To maximize your resource utilization, provide your jobs with as much memory as possible for the specific instance type that you are using. To learn how, see Memory management in the Batch User Guide.   cpu  The number of CPUs that's reserved for the container. Values must be an even multiple of 0.25. cpu can be specified in limits, requests, or both. If cpu is specified in both places, then the value that's specified in limits must be at least as large as the value that's specified in requests.  nvidia.com/gpu  The number of GPUs that's reserved for the container. Values must be a whole integer. memory can be specified in limits, requests, or both. If memory is specified in both places, then the value that's specified in limits must be equal to the value that's specified in requests.
        public let limits: [String: String]?
        /// The type and quantity of the resources to request for the container. The values vary based on the name that's specified. Resources can be requested by using either the limits or the requests objects.  memory  The memory hard limit (in MiB) for the container, using whole integers, with a "Mi" suffix. If your container attempts to exceed the memory specified, the container is terminated. You must specify at least 4 MiB of memory for a job. memory can be specified in limits, requests, or both. If memory is specified in both, then the value that's specified in limits must be equal to the value that's specified in requests.  If you're trying to maximize your resource utilization by providing your jobs as much memory as possible for a particular instance type, see Memory management in the Batch User Guide.   cpu  The number of CPUs that are reserved for the container. Values must be an even multiple of 0.25. cpu can be specified in limits, requests, or both. If cpu is specified in both, then the value that's specified in limits must be at least as large as the value that's specified in requests.  nvidia.com/gpu  The number of GPUs that are reserved for the container. Values must be a whole integer. nvidia.com/gpu can be specified in limits, requests, or both. If nvidia.com/gpu is specified in both, then the value that's specified in limits must be equal to the value that's specified in requests.
        public let requests: [String: String]?

        public init(limits: [String: String]? = nil, requests: [String: String]? = nil) {
            self.limits = limits
            self.requests = requests
        }

        public func validate(name: String) throws {
            try self.limits?.forEach {
                try validate($0.value, name: "limits[\"\($0.key)\"]", parent: name, max: 256)
                try validate($0.value, name: "limits[\"\($0.key)\"]", parent: name, min: 1)
            }
            try self.requests?.forEach {
                try validate($0.value, name: "requests[\"\($0.key)\"]", parent: name, max: 256)
                try validate($0.value, name: "requests[\"\($0.key)\"]", parent: name, min: 1)
            }
        }

        private enum CodingKeys: String, CodingKey {
            case limits = "limits"
            case requests = "requests"
        }
    }

    public struct EksContainerSecurityContext: AWSEncodableShape & AWSDecodableShape {
        /// Whether or not a container or a Kubernetes pod is allowed to gain more privileges than its parent process. The default value is false.
        public let allowPrivilegeEscalation: Bool?
        /// When this parameter is true, the container is given elevated permissions on the host container instance. The level of permissions are similar to the root user permissions. The default value is false. This parameter maps to privileged policy in the Privileged pod security policies in the Kubernetes documentation.
        public let privileged: Bool?
        /// When this parameter is true, the container is given read-only access to its root file system. The default value is false. This parameter maps to ReadOnlyRootFilesystem policy in the Volumes and file systems pod security policies in the Kubernetes documentation.
        public let readOnlyRootFilesystem: Bool?
        /// When this parameter is specified, the container is run as the specified group ID (gid). If this parameter isn't specified, the default is the group that's specified in the image metadata. This parameter maps to RunAsGroup and MustRunAs policy in the Users and groups pod security policies in the Kubernetes documentation.
        public let runAsGroup: Int64?
        /// When this parameter is specified, the container is run as a user with a uid other than 0. If this parameter isn't specified, so such rule is enforced. This parameter maps to RunAsUser and MustRunAsNonRoot policy in the Users and groups pod security policies in the Kubernetes documentation.
        public let runAsNonRoot: Bool?
        /// When this parameter is specified, the container is run as the specified user ID (uid). If this parameter isn't specified, the default is the user that's specified in the image metadata. This parameter maps to RunAsUser and MustRanAs policy in the Users and groups pod security policies in the Kubernetes documentation.
        public let runAsUser: Int64?

        public init(allowPrivilegeEscalation: Bool? = nil, privileged: Bool? = nil, readOnlyRootFilesystem: Bool? = nil, runAsGroup: Int64? = nil, runAsNonRoot: Bool? = nil, runAsUser: Int64? = nil) {
            self.allowPrivilegeEscalation = allowPrivilegeEscalation
            self.privileged = privileged
            self.readOnlyRootFilesystem = readOnlyRootFilesystem
            self.runAsGroup = runAsGroup
            self.runAsNonRoot = runAsNonRoot
            self.runAsUser = runAsUser
        }

        private enum CodingKeys: String, CodingKey {
            case allowPrivilegeEscalation = "allowPrivilegeEscalation"
            case privileged = "privileged"
            case readOnlyRootFilesystem = "readOnlyRootFilesystem"
            case runAsGroup = "runAsGroup"
            case runAsNonRoot = "runAsNonRoot"
            case runAsUser = "runAsUser"
        }
    }

    public struct EksContainerVolumeMount: AWSEncodableShape & AWSDecodableShape {
        /// The path on the container where the volume is mounted.
        public let mountPath: String?
        /// The name the volume mount. This must match the name of one of the volumes in the pod.
        public let name: String?
        /// If this value is true, the container has read-only access to the volume. Otherwise, the container can write to the volume. The default value is false.
        public let readOnly: Bool?

        public init(mountPath: String? = nil, name: String? = nil, readOnly: Bool? = nil) {
            self.mountPath = mountPath
            self.name = name
            self.readOnly = readOnly
        }

        private enum CodingKeys: String, CodingKey {
            case mountPath = "mountPath"
            case name = "name"
            case readOnly = "readOnly"
        }
    }

    public struct EksEmptyDir: AWSEncodableShape & AWSDecodableShape {
        /// The medium to store the volume. The default value is an empty string, which uses the storage of the node.  ""   (Default) Use the disk storage of the node.  "Memory"  Use the tmpfs volume that's backed by the RAM of the node. Contents of the volume are lost when the node reboots, and any storage on the volume counts against the container's memory limit.
        public let medium: String?
        /// The maximum size of the volume. By default, there's no maximum size defined.
        public let sizeLimit: String?

        public init(medium: String? = nil, sizeLimit: String? = nil) {
            self.medium = medium
            self.sizeLimit = sizeLimit
        }

        public func validate(name: String) throws {
            try self.validate(self.sizeLimit, name: "sizeLimit", parent: name, max: 256)
            try self.validate(self.sizeLimit, name: "sizeLimit", parent: name, min: 1)
        }

        private enum CodingKeys: String, CodingKey {
            case medium = "medium"
            case sizeLimit = "sizeLimit"
        }
    }

    public struct EksHostPath: AWSEncodableShape & AWSDecodableShape {
        /// The path of the file or directory on the host to mount into containers on the pod.
        public let path: String?

        public init(path: String? = nil) {
            self.path = path
        }

        private enum CodingKeys: String, CodingKey {
            case path = "path"
        }
    }

    public struct EksMetadata: AWSEncodableShape & AWSDecodableShape {
        /// Key-value pairs used to identify, sort, and organize cube resources. Can contain up to 63 uppercase letters, lowercase letters, numbers, hyphens (-), and underscores (_). Labels can be added or modified at any time. Each resource can have multiple labels, but each key must be unique for a given object.
        public let labels: [String: String]?

        public init(labels: [String: String]? = nil) {
            self.labels = labels
        }

        private enum CodingKeys: String, CodingKey {
            case labels = "labels"
        }
    }

    public struct EksPodProperties: AWSEncodableShape & AWSDecodableShape {
        /// The properties of the container that's used on the Amazon EKS pod.
        public let containers: [EksContainer]?
        /// The DNS policy for the pod. The default value is ClusterFirst. If the hostNetwork parameter is not specified, the default is ClusterFirstWithHostNet. ClusterFirst indicates that any DNS query that does not match the configured cluster domain suffix is forwarded to the upstream nameserver inherited from the node. For more information, see Pod's DNS policy in the Kubernetes documentation. Valid values: Default | ClusterFirst | ClusterFirstWithHostNet
        public let dnsPolicy: String?
        /// Indicates if the pod uses the hosts' network IP address. The default value is true. Setting this to false enables the Kubernetes pod networking model. Most Batch workloads are egress-only and don't require the overhead of IP allocation for each pod for incoming connections. For more information, see Host namespaces and Pod networking in the Kubernetes documentation.
        public let hostNetwork: Bool?
        /// References a Kubernetes secret resource. This object must start and end with an alphanumeric character, is required to be lowercase, can include periods (.) and hyphens (-), and can't contain more than 253 characters.  ImagePullSecret$name is required when this object is used.
        public let imagePullSecrets: [ImagePullSecret]?
        /// These containers run before application containers, always runs to completion, and must complete successfully before the next container starts. These containers are registered with the Amazon EKS Connector agent and persists the registration information in the Kubernetes backend data store.  For more information, see Init Containers in the Kubernetes documentation.  This object is limited to 10 elements
        public let initContainers: [EksContainer]?
        /// Metadata about the Kubernetes pod. For more information, see Understanding Kubernetes Objects in the Kubernetes documentation.
        public let metadata: EksMetadata?
        /// The name of the service account that's used to run the pod. For more information, see Kubernetes service accounts and Configure a Kubernetes service account to assume an IAM role in the Amazon EKS User Guide and Configure service accounts for pods in the Kubernetes documentation.
        public let serviceAccountName: String?
        /// Indicates if the processes in a container are shared, or visible, to other containers in the same pod. For more information, see Share Process Namespace between Containers in a Pod.
        public let shareProcessNamespace: Bool?
        /// Specifies the volumes for a job definition that uses Amazon EKS resources.
        public let volumes: [EksVolume]?

        public init(containers: [EksContainer]? = nil, dnsPolicy: String? = nil, hostNetwork: Bool? = nil, imagePullSecrets: [ImagePullSecret]? = nil, initContainers: [EksContainer]? = nil, metadata: EksMetadata? = nil, serviceAccountName: String? = nil, shareProcessNamespace: Bool? = nil, volumes: [EksVolume]? = nil) {
            self.containers = containers
            self.dnsPolicy = dnsPolicy
            self.hostNetwork = hostNetwork
            self.imagePullSecrets = imagePullSecrets
            self.initContainers = initContainers
            self.metadata = metadata
            self.serviceAccountName = serviceAccountName
            self.shareProcessNamespace = shareProcessNamespace
            self.volumes = volumes
        }

        public func validate(name: String) throws {
            try self.containers?.forEach {
                try $0.validate(name: "\(name).containers[]")
            }
            try self.initContainers?.forEach {
                try $0.validate(name: "\(name).initContainers[]")
            }
            try self.volumes?.forEach {
                try $0.validate(name: "\(name).volumes[]")
            }
        }

        private enum CodingKeys: String, CodingKey {
            case containers = "containers"
            case dnsPolicy = "dnsPolicy"
            case hostNetwork = "hostNetwork"
            case imagePullSecrets = "imagePullSecrets"
            case initContainers = "initContainers"
            case metadata = "metadata"
            case serviceAccountName = "serviceAccountName"
            case shareProcessNamespace = "shareProcessNamespace"
            case volumes = "volumes"
        }
    }

    public struct EksPodPropertiesDetail: AWSDecodableShape {
        /// The properties of the container that's used on the Amazon EKS pod.
        public let containers: [EksContainerDetail]?
        /// The DNS policy for the pod. The default value is ClusterFirst. If the hostNetwork parameter is not specified, the default is ClusterFirstWithHostNet. ClusterFirst indicates that any DNS query that does not match the configured cluster domain suffix is forwarded to the upstream nameserver inherited from the node. If no value was specified for dnsPolicy in the RegisterJobDefinition API operation, then no value will be returned for dnsPolicy by either of DescribeJobDefinitions or DescribeJobs API operations. The pod spec setting will contain either ClusterFirst or ClusterFirstWithHostNet, depending on the value of the hostNetwork parameter. For more information, see Pod's DNS policy in the Kubernetes documentation. Valid values: Default | ClusterFirst | ClusterFirstWithHostNet
        public let dnsPolicy: String?
        /// Indicates if the pod uses the hosts' network IP address. The default value is true. Setting this to false enables the Kubernetes pod networking model. Most Batch workloads are egress-only and don't require the overhead of IP allocation for each pod for incoming connections. For more information, see Host namespaces and Pod networking in the Kubernetes documentation.
        public let hostNetwork: Bool?
        /// Displays the reference pointer to the Kubernetes secret resource.
        public let imagePullSecrets: [ImagePullSecret]?
        /// The container registered with the Amazon EKS Connector agent and persists the registration information in the Kubernetes backend data store.
        public let initContainers: [EksContainerDetail]?
        /// Describes and uniquely identifies Kubernetes resources. For example, the compute environment that a pod runs in or the jobID for a job running in the pod. For more information, see Understanding Kubernetes Objects in the Kubernetes documentation.
        public let metadata: EksMetadata?
        /// The name of the node for this job.
        public let nodeName: String?
        /// The name of the pod for this job.
        public let podName: String?
        /// The name of the service account that's used to run the pod. For more information, see Kubernetes service accounts and Configure a Kubernetes service account to assume an IAM role in the Amazon EKS User Guide and Configure service accounts for pods in the Kubernetes documentation.
        public let serviceAccountName: String?
        /// Indicates if the processes in a container are shared, or visible, to other containers in the same pod. For more information, see Share Process Namespace between Containers in a Pod.
        public let shareProcessNamespace: Bool?
        /// Specifies the volumes for a job definition using Amazon EKS resources.
        public let volumes: [EksVolume]?

        public init(containers: [EksContainerDetail]? = nil, dnsPolicy: String? = nil, hostNetwork: Bool? = nil, imagePullSecrets: [ImagePullSecret]? = nil, initContainers: [EksContainerDetail]? = nil, metadata: EksMetadata? = nil, nodeName: String? = nil, podName: String? = nil, serviceAccountName: String? = nil, shareProcessNamespace: Bool? = nil, volumes: [EksVolume]? = nil) {
            self.containers = containers
            self.dnsPolicy = dnsPolicy
            self.hostNetwork = hostNetwork
            self.imagePullSecrets = imagePullSecrets
            self.initContainers = initContainers
            self.metadata = metadata
            self.nodeName = nodeName
            self.podName = podName
            self.serviceAccountName = serviceAccountName
            self.shareProcessNamespace = shareProcessNamespace
            self.volumes = volumes
        }

        private enum CodingKeys: String, CodingKey {
            case containers = "containers"
            case dnsPolicy = "dnsPolicy"
            case hostNetwork = "hostNetwork"
            case imagePullSecrets = "imagePullSecrets"
            case initContainers = "initContainers"
            case metadata = "metadata"
            case nodeName = "nodeName"
            case podName = "podName"
            case serviceAccountName = "serviceAccountName"
            case shareProcessNamespace = "shareProcessNamespace"
            case volumes = "volumes"
        }
    }

    public struct EksPodPropertiesOverride: AWSEncodableShape {
        /// The overrides for the container that's used on the Amazon EKS pod.
        public let containers: [EksContainerOverride]?
        /// The overrides for the conatainers defined in the Amazon EKS  pod. These containers run before application containers, always runs to completion, and must complete successfully before the next container starts. These containers are registered with the Amazon EKS Connector agent and persists the registration information in the Kubernetes backend data store.  For more information, see Init Containers in the Kubernetes documentation.  This object is limited to 10 elements
        public let initContainers: [EksContainerOverride]?
        /// Metadata about the overrides for the container that's used on the Amazon EKS pod.
        public let metadata: EksMetadata?

        public init(containers: [EksContainerOverride]? = nil, initContainers: [EksContainerOverride]? = nil, metadata: EksMetadata? = nil) {
            self.containers = containers
            self.initContainers = initContainers
            self.metadata = metadata
        }

        public func validate(name: String) throws {
            try self.containers?.forEach {
                try $0.validate(name: "\(name).containers[]")
            }
            try self.initContainers?.forEach {
                try $0.validate(name: "\(name).initContainers[]")
            }
        }

        private enum CodingKeys: String, CodingKey {
            case containers = "containers"
            case initContainers = "initContainers"
            case metadata = "metadata"
        }
    }

    public struct EksProperties: AWSEncodableShape & AWSDecodableShape {
        /// The properties for the Kubernetes pod resources of a job.
        public let podProperties: EksPodProperties?

        public init(podProperties: EksPodProperties? = nil) {
            self.podProperties = podProperties
        }

        public func validate(name: String) throws {
            try self.podProperties?.validate(name: "\(name).podProperties")
        }

        private enum CodingKeys: String, CodingKey {
            case podProperties = "podProperties"
        }
    }

    public struct EksPropertiesDetail: AWSDecodableShape {
        /// The properties for the Kubernetes pod resources of a job.
        public let podProperties: EksPodPropertiesDetail?

        public init(podProperties: EksPodPropertiesDetail? = nil) {
            self.podProperties = podProperties
        }

        private enum CodingKeys: String, CodingKey {
            case podProperties = "podProperties"
        }
    }

    public struct EksPropertiesOverride: AWSEncodableShape {
        /// The overrides for the Kubernetes pod resources of a job.
        public let podProperties: EksPodPropertiesOverride?

        public init(podProperties: EksPodPropertiesOverride? = nil) {
            self.podProperties = podProperties
        }

        public func validate(name: String) throws {
            try self.podProperties?.validate(name: "\(name).podProperties")
        }

        private enum CodingKeys: String, CodingKey {
            case podProperties = "podProperties"
        }
    }

    public struct EksSecret: AWSEncodableShape & AWSDecodableShape {
        /// Specifies whether the secret or the secret's keys must be defined.
        public let optional: Bool?
        /// The name of the secret. The name must be allowed as a DNS subdomain name. For more information, see DNS subdomain names in the Kubernetes documentation.
        public let secretName: String?

        public init(optional: Bool? = nil, secretName: String? = nil) {
            self.optional = optional
            self.secretName = secretName
        }

        private enum CodingKeys: String, CodingKey {
            case optional = "optional"
            case secretName = "secretName"
        }
    }

    public struct EksVolume: AWSEncodableShape & AWSDecodableShape {
        /// Specifies the configuration of a Kubernetes emptyDir volume. For more information, see emptyDir in the Kubernetes documentation.
        public let emptyDir: EksEmptyDir?
        /// Specifies the configuration of a Kubernetes hostPath volume. For more information, see hostPath in the Kubernetes documentation.
        public let hostPath: EksHostPath?
        /// The name of the volume. The name must be allowed as a DNS subdomain name. For more information, see DNS subdomain names in the Kubernetes documentation.
        public let name: String?
        /// Specifies the configuration of a Kubernetes secret volume. For more information, see secret in the Kubernetes documentation.
        public let secret: EksSecret?

        public init(emptyDir: EksEmptyDir? = nil, hostPath: EksHostPath? = nil, name: String? = nil, secret: EksSecret? = nil) {
            self.emptyDir = emptyDir
            self.hostPath = hostPath
            self.name = name
            self.secret = secret
        }

        public func validate(name: String) throws {
            try self.emptyDir?.validate(name: "\(name).emptyDir")
        }

        private enum CodingKeys: String, CodingKey {
            case emptyDir = "emptyDir"
            case hostPath = "hostPath"
            case name = "name"
            case secret = "secret"
        }
    }

    public struct EphemeralStorage: AWSEncodableShape & AWSDecodableShape {
        /// The total amount, in GiB, of ephemeral storage to set for the task. The minimum supported value is 21 GiB and the maximum supported value is 200 GiB.
        public let sizeInGiB: Int?

        public init(sizeInGiB: Int? = nil) {
            self.sizeInGiB = sizeInGiB
        }

        private enum CodingKeys: String, CodingKey {
            case sizeInGiB = "sizeInGiB"
        }
    }

    public struct EvaluateOnExit: AWSEncodableShape & AWSDecodableShape {
        /// Specifies the action to take if all of the specified conditions (onStatusReason, onReason, and onExitCode) are met. The values aren't case sensitive.
        public let action: RetryAction?
        /// Contains a glob pattern to match against the decimal representation of the ExitCode returned for a job. The pattern can be up to 512 characters long. It can contain only numbers, and can end with an asterisk (*) so that only the start of the string needs to be an exact match. The string can contain up to 512 characters.
        public let onExitCode: String?
        /// Contains a glob pattern to match against the Reason returned for a job. The pattern can contain up to 512 characters. It can contain letters, numbers, periods (.), colons (:), and white space (including spaces and tabs). It can optionally end with an asterisk (*) so that only the start of the string needs to be an exact match.
        public let onReason: String?
        /// Contains a glob pattern to match against the StatusReason returned for a job. The pattern can contain up to 512 characters. It can contain letters, numbers, periods (.), colons (:), and white spaces (including spaces or tabs). It can optionally end with an asterisk (*) so that only the start of the string needs to be an exact match.
        public let onStatusReason: String?

        public init(action: RetryAction? = nil, onExitCode: String? = nil, onReason: String? = nil, onStatusReason: String? = nil) {
            self.action = action
            self.onExitCode = onExitCode
            self.onReason = onReason
            self.onStatusReason = onStatusReason
        }

        private enum CodingKeys: String, CodingKey {
            case action = "action"
            case onExitCode = "onExitCode"
            case onReason = "onReason"
            case onStatusReason = "onStatusReason"
        }
    }

    public struct FairsharePolicy: AWSEncodableShape & AWSDecodableShape {
        /// A value used to reserve some of the available maximum vCPU for fair share identifiers that aren't already used. The reserved ratio is (computeReservation/100)^ActiveFairShares  where  ActiveFairShares is the number of active fair share identifiers. For example, a computeReservation value of 50 indicates that Batch reserves 50% of the maximum available vCPU if there's only one fair share identifier. It reserves 25% if there are two fair share identifiers. It reserves 12.5% if there are three fair share identifiers. A computeReservation value of 25 indicates that Batch should reserve 25% of the maximum available vCPU if there's only one fair share identifier, 6.25% if there are two fair share identifiers, and 1.56% if there are three fair share identifiers. The minimum value is 0 and the maximum value is 99.
        public let computeReservation: Int?
        /// The amount of time (in seconds) to use to calculate a fair share percentage for each fair share identifier in use. A value of zero (0) indicates that only current usage is measured. The decay allows for more recently run jobs to have more weight than jobs that ran earlier. The maximum supported value is 604800 (1 week).
        public let shareDecaySeconds: Int?
        /// An array of SharedIdentifier objects that contain the weights for the fair share identifiers for the fair share policy. Fair share identifiers that aren't included have a default weight of 1.0.
        public let shareDistribution: [ShareAttributes]?

        public init(computeReservation: Int? = nil, shareDecaySeconds: Int? = nil, shareDistribution: [ShareAttributes]? = nil) {
            self.computeReservation = computeReservation
            self.shareDecaySeconds = shareDecaySeconds
            self.shareDistribution = shareDistribution
        }

        private enum CodingKeys: String, CodingKey {
            case computeReservation = "computeReservation"
            case shareDecaySeconds = "shareDecaySeconds"
            case shareDistribution = "shareDistribution"
        }
    }

    public struct FargatePlatformConfiguration: AWSEncodableShape & AWSDecodableShape {
        /// The Fargate platform version where the jobs are running. A platform version is specified only for jobs that are running on Fargate resources. If one isn't specified, the LATEST platform version is used by default. This uses a recent, approved version of the Fargate platform for compute resources. For more information, see Fargate platform versions in the Amazon Elastic Container Service Developer Guide.
        public let platformVersion: String?

        public init(platformVersion: String? = nil) {
            self.platformVersion = platformVersion
        }

        private enum CodingKeys: String, CodingKey {
            case platformVersion = "platformVersion"
        }
    }

    public struct Host: AWSEncodableShape & AWSDecodableShape {
        /// The path on the host container instance that's presented to the container. If this parameter is empty, then the Docker daemon has assigned a host path for you. If this parameter contains a file location, then the data volume persists at the specified location on the host container instance until you delete it manually. If the source path location doesn't exist on the host container instance, the Docker daemon creates it. If the location does exist, the contents of the source path folder are exported.  This parameter isn't applicable to jobs that run on Fargate resources. Don't provide this for these jobs.
        public let sourcePath: String?

        public init(sourcePath: String? = nil) {
            self.sourcePath = sourcePath
        }

        private enum CodingKeys: String, CodingKey {
            case sourcePath = "sourcePath"
        }
    }

    public struct ImagePullSecret: AWSEncodableShape & AWSDecodableShape {
        /// Provides a unique identifier for the ImagePullSecret. This object is required when EksPodProperties$imagePullSecrets is used.
        public let name: String?

        public init(name: String? = nil) {
            self.name = name
        }

        private enum CodingKeys: String, CodingKey {
            case name = "name"
        }
    }

    public struct JobDefinition: AWSDecodableShape {
        /// The orchestration type of the compute environment. The valid values are ECS (default) or EKS.
        public let containerOrchestrationType: OrchestrationType?
        /// An object with properties specific to Amazon ECS-based jobs. When containerProperties is used in the job definition, it can't be used in addition to eksProperties, ecsProperties, or nodeProperties.
        public let containerProperties: ContainerProperties?
        /// An object that contains the properties for the Amazon ECS resources of a job.When ecsProperties is used in the job definition, it can't be used in addition to containerProperties, eksProperties, or nodeProperties.
        public let ecsProperties: EcsProperties?
        /// An object with properties that are specific to Amazon EKS-based jobs. When eksProperties is used in the job definition, it can't be used in addition to containerProperties, ecsProperties, or nodeProperties.
        public let eksProperties: EksProperties?
        /// The Amazon Resource Name (ARN) for the job definition.
        public let jobDefinitionArn: String?
        /// The name of the job definition.
        public let jobDefinitionName: String?
        /// An object with properties that are specific to multi-node parallel jobs. When nodeProperties is used in the job definition, it can't be used in addition to containerProperties, ecsProperties, or eksProperties.  If the job runs on Fargate resources, don't specify nodeProperties. Use containerProperties instead.
        public let nodeProperties: NodeProperties?
        /// Default parameters or parameter substitution placeholders that are set in the job definition. Parameters are specified as a key-value pair mapping. Parameters in a SubmitJob request override any corresponding parameter defaults from the job definition. For more information about specifying parameters, see Job definition parameters in the Batch User Guide.
        public let parameters: [String: String]?
        /// The platform capabilities required by the job definition. If no value is specified, it defaults to EC2. Jobs run on Fargate resources specify FARGATE.
        public let platformCapabilities: [PlatformCapability]?
        /// Specifies whether to propagate the tags from the job or job definition to the corresponding Amazon ECS task. If no value is specified, the tags aren't propagated. Tags can only be propagated to the tasks when the tasks are created. For tags with the same name, job tags are given priority over job definitions tags. If the total number of combined tags from the job and job definition is over 50, the job is moved to the FAILED state.
        public let propagateTags: Bool?
        /// The retry strategy to use for failed jobs that are submitted with this job definition.
        public let retryStrategy: RetryStrategy?
        /// The revision of the job definition.
        public let revision: Int?
        /// The scheduling priority of the job definition. This only affects jobs in job queues with a fair share policy. Jobs with a higher scheduling priority are scheduled before jobs with a lower scheduling priority.
        public let schedulingPriority: Int?
        /// The status of the job definition.
        public let status: String?
        /// The tags that are applied to the job definition.
        public let tags: [String: String]?
        /// The timeout time for jobs that are submitted with this job definition. After the amount of time you specify passes, Batch terminates your jobs if they aren't finished.
        public let timeout: JobTimeout?
        /// The type of job definition. It's either container or multinode. If the job is run on Fargate resources, then multinode isn't supported. For more information about multi-node parallel jobs, see Creating a multi-node parallel job definition in the Batch User Guide.
        public let type: String?

        public init(containerOrchestrationType: OrchestrationType? = nil, containerProperties: ContainerProperties? = nil, ecsProperties: EcsProperties? = nil, eksProperties: EksProperties? = nil, jobDefinitionArn: String? = nil, jobDefinitionName: String? = nil, nodeProperties: NodeProperties? = nil, parameters: [String: String]? = nil, platformCapabilities: [PlatformCapability]? = nil, propagateTags: Bool? = nil, retryStrategy: RetryStrategy? = nil, revision: Int? = nil, schedulingPriority: Int? = nil, status: String? = nil, tags: [String: String]? = nil, timeout: JobTimeout? = nil, type: String? = nil) {
            self.containerOrchestrationType = containerOrchestrationType
            self.containerProperties = containerProperties
            self.ecsProperties = ecsProperties
            self.eksProperties = eksProperties
            self.jobDefinitionArn = jobDefinitionArn
            self.jobDefinitionName = jobDefinitionName
            self.nodeProperties = nodeProperties
            self.parameters = parameters
            self.platformCapabilities = platformCapabilities
            self.propagateTags = propagateTags
            self.retryStrategy = retryStrategy
            self.revision = revision
            self.schedulingPriority = schedulingPriority
            self.status = status
            self.tags = tags
            self.timeout = timeout
            self.type = type
        }

        private enum CodingKeys: String, CodingKey {
            case containerOrchestrationType = "containerOrchestrationType"
            case containerProperties = "containerProperties"
            case ecsProperties = "ecsProperties"
            case eksProperties = "eksProperties"
            case jobDefinitionArn = "jobDefinitionArn"
            case jobDefinitionName = "jobDefinitionName"
            case nodeProperties = "nodeProperties"
            case parameters = "parameters"
            case platformCapabilities = "platformCapabilities"
            case propagateTags = "propagateTags"
            case retryStrategy = "retryStrategy"
            case revision = "revision"
            case schedulingPriority = "schedulingPriority"
            case status = "status"
            case tags = "tags"
            case timeout = "timeout"
            case type = "type"
        }
    }

    public struct JobDependency: AWSEncodableShape & AWSDecodableShape {
        /// The job ID of the Batch job that's associated with this dependency.
        public let jobId: String?
        /// The type of the job dependency.
        public let type: ArrayJobDependency?

        public init(jobId: String? = nil, type: ArrayJobDependency? = nil) {
            self.jobId = jobId
            self.type = type
        }

        private enum CodingKeys: String, CodingKey {
            case jobId = "jobId"
            case type = "type"
        }
    }

    public struct JobDetail: AWSDecodableShape {
        /// The array properties of the job, if it's an array job.
        public let arrayProperties: ArrayPropertiesDetail?
        /// A list of job attempts that are associated with this job.
        public let attempts: [AttemptDetail]?
        /// An object that represents the details for the container that's associated with the job. If the details are for a multiple-container job, this object will be empty.
        public let container: ContainerDetail?
        /// The Unix timestamp (in milliseconds) for when the job was created. For non-array jobs and parent array jobs, this is when the job entered the SUBMITTED state. This is specifically at the time SubmitJob was called. For array child jobs, this is when the child job was spawned by its parent and entered the PENDING state.
        public let createdAt: Int64?
        /// A list of job IDs that this job depends on.
        public let dependsOn: [JobDependency]?
        /// An object with properties that are specific to Amazon ECS-based jobs.
        public let ecsProperties: EcsPropertiesDetail?
        /// A list of job attempts that are associated with this job.
        public let eksAttempts: [EksAttemptDetail]?
        /// An object with various properties that are specific to Amazon EKS based jobs.
        public let eksProperties: EksPropertiesDetail?
        /// Indicates whether the job is canceled.
        public let isCancelled: Bool?
        /// Indicates whether the job is terminated.
        public let isTerminated: Bool?
        /// The Amazon Resource Name (ARN) of the job.
        public let jobArn: String?
        /// The Amazon Resource Name (ARN) of the job definition that this job uses.
        public let jobDefinition: String?
        /// The job ID.
        public let jobId: String?
        /// The job name.
        public let jobName: String?
        /// The Amazon Resource Name (ARN) of the job queue that the job is associated with.
        public let jobQueue: String?
        /// An object that represents the details of a node that's associated with a multi-node parallel job.
        public let nodeDetails: NodeDetails?
        /// An object that represents the node properties of a multi-node parallel job.  This isn't applicable to jobs that are running on Fargate resources.
        public let nodeProperties: NodeProperties?
        /// Additional parameters that are passed to the job that replace parameter substitution placeholders or override any corresponding parameter defaults from the job definition.
        public let parameters: [String: String]?
        /// The platform capabilities required by the job definition. If no value is specified, it defaults to EC2. Jobs run on Fargate resources specify FARGATE.
        public let platformCapabilities: [PlatformCapability]?
        /// Specifies whether to propagate the tags from the job or job definition to the corresponding Amazon ECS task. If no value is specified, the tags aren't propagated. Tags can only be propagated to the tasks when the tasks are created. For tags with the same name, job tags are given priority over job definitions tags. If the total number of combined tags from the job and job definition is over 50, the job is moved to the FAILED state.
        public let propagateTags: Bool?
        /// The retry strategy to use for this job if an attempt fails.
        public let retryStrategy: RetryStrategy?
        /// The scheduling policy of the job definition. This only affects jobs in job queues with a fair share policy. Jobs with a higher scheduling priority are scheduled before jobs with a lower scheduling priority.
        public let schedulingPriority: Int?
        /// The share identifier for the job.
        public let shareIdentifier: String?
        /// The Unix timestamp (in milliseconds) for when the job was started. More specifically, it's when the job transitioned from the STARTING state to the RUNNING state.
        public let startedAt: Int64?
        /// The current status for the job.  If your jobs don't progress to STARTING, see Jobs stuck in RUNNABLE status in the troubleshooting section of the Batch User Guide.
        public let status: JobStatus?
        /// A short, human-readable string to provide more details for the current status of the job.    CAPACITY:INSUFFICIENT_INSTANCE_CAPACITY - All compute environments have insufficient capacity to service the job.    MISCONFIGURATION:COMPUTE_ENVIRONMENT_MAX_RESOURCE - All compute environments have a maxVcpu setting that is smaller than the job requirements.    MISCONFIGURATION:JOB_RESOURCE_REQUIREMENT - All compute environments  have no connected instances that meet the job requirements.    MISCONFIGURATION:SERVICE_ROLE_PERMISSIONS - All compute environments have problems with the service role permissions.
        public let statusReason: String?
        /// The Unix timestamp (in milliseconds) for when the job was stopped. More specifically, it's when the job transitioned from the RUNNING state to a terminal state, such as SUCCEEDED or FAILED.
        public let stoppedAt: Int64?
        /// The tags that are applied to the job.
        public let tags: [String: String]?
        /// The timeout configuration for the job.
        public let timeout: JobTimeout?

        public init(arrayProperties: ArrayPropertiesDetail? = nil, attempts: [AttemptDetail]? = nil, container: ContainerDetail? = nil, createdAt: Int64? = nil, dependsOn: [JobDependency]? = nil, ecsProperties: EcsPropertiesDetail? = nil, eksAttempts: [EksAttemptDetail]? = nil, eksProperties: EksPropertiesDetail? = nil, isCancelled: Bool? = nil, isTerminated: Bool? = nil, jobArn: String? = nil, jobDefinition: String? = nil, jobId: String? = nil, jobName: String? = nil, jobQueue: String? = nil, nodeDetails: NodeDetails? = nil, nodeProperties: NodeProperties? = nil, parameters: [String: String]? = nil, platformCapabilities: [PlatformCapability]? = nil, propagateTags: Bool? = nil, retryStrategy: RetryStrategy? = nil, schedulingPriority: Int? = nil, shareIdentifier: String? = nil, startedAt: Int64? = nil, status: JobStatus? = nil, statusReason: String? = nil, stoppedAt: Int64? = nil, tags: [String: String]? = nil, timeout: JobTimeout? = nil) {
            self.arrayProperties = arrayProperties
            self.attempts = attempts
            self.container = container
            self.createdAt = createdAt
            self.dependsOn = dependsOn
            self.ecsProperties = ecsProperties
            self.eksAttempts = eksAttempts
            self.eksProperties = eksProperties
            self.isCancelled = isCancelled
            self.isTerminated = isTerminated
            self.jobArn = jobArn
            self.jobDefinition = jobDefinition
            self.jobId = jobId
            self.jobName = jobName
            self.jobQueue = jobQueue
            self.nodeDetails = nodeDetails
            self.nodeProperties = nodeProperties
            self.parameters = parameters
            self.platformCapabilities = platformCapabilities
            self.propagateTags = propagateTags
            self.retryStrategy = retryStrategy
            self.schedulingPriority = schedulingPriority
            self.shareIdentifier = shareIdentifier
            self.startedAt = startedAt
            self.status = status
            self.statusReason = statusReason
            self.stoppedAt = stoppedAt
            self.tags = tags
            self.timeout = timeout
        }

        private enum CodingKeys: String, CodingKey {
            case arrayProperties = "arrayProperties"
            case attempts = "attempts"
            case container = "container"
            case createdAt = "createdAt"
            case dependsOn = "dependsOn"
            case ecsProperties = "ecsProperties"
            case eksAttempts = "eksAttempts"
            case eksProperties = "eksProperties"
            case isCancelled = "isCancelled"
            case isTerminated = "isTerminated"
            case jobArn = "jobArn"
            case jobDefinition = "jobDefinition"
            case jobId = "jobId"
            case jobName = "jobName"
            case jobQueue = "jobQueue"
            case nodeDetails = "nodeDetails"
            case nodeProperties = "nodeProperties"
            case parameters = "parameters"
            case platformCapabilities = "platformCapabilities"
            case propagateTags = "propagateTags"
            case retryStrategy = "retryStrategy"
            case schedulingPriority = "schedulingPriority"
            case shareIdentifier = "shareIdentifier"
            case startedAt = "startedAt"
            case status = "status"
            case statusReason = "statusReason"
            case stoppedAt = "stoppedAt"
            case tags = "tags"
            case timeout = "timeout"
        }
    }

    public struct JobQueueDetail: AWSDecodableShape {
        /// The compute environments that are attached to the job queue and the order that job placement is preferred. Compute environments are selected for job placement in ascending order.
        public let computeEnvironmentOrder: [ComputeEnvironmentOrder]?
        /// The Amazon Resource Name (ARN) of the job queue.
        public let jobQueueArn: String?
        /// The job queue name.
        public let jobQueueName: String?
        /// The set of actions that Batch perform on jobs that remain at the head of the job queue in the specified state longer than specified times. Batch will perform each action after maxTimeSeconds has passed.
        public let jobStateTimeLimitActions: [JobStateTimeLimitAction]?
        /// The priority of the job queue. Job queues with a higher priority (or a higher integer value for the priority parameter) are evaluated first when associated with the same compute environment. Priority is determined in descending order. For example, a job queue with a priority value of 10 is given scheduling preference over a job queue with a priority value of 1. All of the compute environments must be either Amazon EC2 (EC2 or SPOT) or Fargate (FARGATE or FARGATE_SPOT). Amazon EC2 and Fargate compute environments can't be mixed.
        public let priority: Int?
        /// The Amazon Resource Name (ARN) of the scheduling policy. The format is aws:Partition:batch:Region:Account:scheduling-policy/Name . For example, aws:aws:batch:us-west-2:123456789012:scheduling-policy/MySchedulingPolicy.
        public let schedulingPolicyArn: String?
        /// Describes the ability of the queue to accept new jobs. If the job queue state is ENABLED, it can accept jobs. If the job queue state is DISABLED, new jobs can't be added to the queue, but jobs already in the queue can finish.
        public let state: JQState?
        /// The status of the job queue (for example, CREATING or VALID).
        public let status: JQStatus?
        /// A short, human-readable string to provide additional details for the current status of the job queue.
        public let statusReason: String?
        /// The tags that are applied to the job queue. For more information, see Tagging your Batch resources in Batch User Guide.
        public let tags: [String: String]?

        public init(computeEnvironmentOrder: [ComputeEnvironmentOrder]? = nil, jobQueueArn: String? = nil, jobQueueName: String? = nil, jobStateTimeLimitActions: [JobStateTimeLimitAction]? = nil, priority: Int? = nil, schedulingPolicyArn: String? = nil, state: JQState? = nil, status: JQStatus? = nil, statusReason: String? = nil, tags: [String: String]? = nil) {
            self.computeEnvironmentOrder = computeEnvironmentOrder
            self.jobQueueArn = jobQueueArn
            self.jobQueueName = jobQueueName
            self.jobStateTimeLimitActions = jobStateTimeLimitActions
            self.priority = priority
            self.schedulingPolicyArn = schedulingPolicyArn
            self.state = state
            self.status = status
            self.statusReason = statusReason
            self.tags = tags
        }

        private enum CodingKeys: String, CodingKey {
            case computeEnvironmentOrder = "computeEnvironmentOrder"
            case jobQueueArn = "jobQueueArn"
            case jobQueueName = "jobQueueName"
            case jobStateTimeLimitActions = "jobStateTimeLimitActions"
            case priority = "priority"
            case schedulingPolicyArn = "schedulingPolicyArn"
            case state = "state"
            case status = "status"
            case statusReason = "statusReason"
            case tags = "tags"
        }
    }

    public struct JobStateTimeLimitAction: AWSEncodableShape & AWSDecodableShape {
        /// The action to take when a job is at the head of the job queue in the specified state for the specified period of time. The only supported value is "CANCEL", which will cancel the job.
        public let action: JobStateTimeLimitActionsAction?
        /// The approximate amount of time, in seconds, that must pass with the job in the specified state before the action is taken. The minimum value is 600 (10 minutes) and the maximum value is 86,400 (24 hours).
        public let maxTimeSeconds: Int?
        /// The reason to log for the action being taken.
        public let reason: String?
        /// The state of the job needed to trigger the action. The only supported value is "RUNNABLE".
        public let state: JobStateTimeLimitActionsState?

        public init(action: JobStateTimeLimitActionsAction? = nil, maxTimeSeconds: Int? = nil, reason: String? = nil, state: JobStateTimeLimitActionsState? = nil) {
            self.action = action
            self.maxTimeSeconds = maxTimeSeconds
            self.reason = reason
            self.state = state
        }

        private enum CodingKeys: String, CodingKey {
            case action = "action"
            case maxTimeSeconds = "maxTimeSeconds"
            case reason = "reason"
            case state = "state"
        }
    }

    public struct JobSummary: AWSDecodableShape {
        /// The array properties of the job, if it's an array job.
        public let arrayProperties: ArrayPropertiesSummary?
        /// An object that represents the details of the container that's associated with the job.
        public let container: ContainerSummary?
        /// The Unix timestamp (in milliseconds) for when the job was created. For non-array jobs and parent array jobs, this is when the job entered the SUBMITTED state (at the time SubmitJob was called). For array child jobs, this is when the child job was spawned by its parent and entered the PENDING state.
        public let createdAt: Int64?
        /// The Amazon Resource Name (ARN) of the job.
        public let jobArn: String?
        /// The Amazon Resource Name (ARN) of the job definition.
        public let jobDefinition: String?
        /// The job ID.
        public let jobId: String?
        /// The job name.
        public let jobName: String?
        /// The node properties for a single node in a job summary list.  This isn't applicable to jobs that are running on Fargate resources.
        public let nodeProperties: NodePropertiesSummary?
        /// The Unix timestamp for when the job was started. More specifically, it's when the job transitioned from the STARTING state to the RUNNING state.
        public let startedAt: Int64?
        /// The current status for the job.
        public let status: JobStatus?
        /// A short, human-readable string to provide more details for the current status of the job.
        public let statusReason: String?
        /// The Unix timestamp for when the job was stopped. More specifically, it's when the job transitioned from the RUNNING state to a terminal state, such as SUCCEEDED or FAILED.
        public let stoppedAt: Int64?

        public init(arrayProperties: ArrayPropertiesSummary? = nil, container: ContainerSummary? = nil, createdAt: Int64? = nil, jobArn: String? = nil, jobDefinition: String? = nil, jobId: String? = nil, jobName: String? = nil, nodeProperties: NodePropertiesSummary? = nil, startedAt: Int64? = nil, status: JobStatus? = nil, statusReason: String? = nil, stoppedAt: Int64? = nil) {
            self.arrayProperties = arrayProperties
            self.container = container
            self.createdAt = createdAt
            self.jobArn = jobArn
            self.jobDefinition = jobDefinition
            self.jobId = jobId
            self.jobName = jobName
            self.nodeProperties = nodeProperties
            self.startedAt = startedAt
            self.status = status
            self.statusReason = statusReason
            self.stoppedAt = stoppedAt
        }

        private enum CodingKeys: String, CodingKey {
            case arrayProperties = "arrayProperties"
            case container = "container"
            case createdAt = "createdAt"
            case jobArn = "jobArn"
            case jobDefinition = "jobDefinition"
            case jobId = "jobId"
            case jobName = "jobName"
            case nodeProperties = "nodeProperties"
            case startedAt = "startedAt"
            case status = "status"
            case statusReason = "statusReason"
            case stoppedAt = "stoppedAt"
        }
    }

    public struct JobTimeout: AWSEncodableShape & AWSDecodableShape {
        /// The job timeout time (in seconds) that's measured from the job attempt's startedAt timestamp. After this time passes, Batch terminates your jobs if they aren't finished. The minimum value for the timeout is 60 seconds. For array jobs, the timeout applies to the child jobs, not to the parent array job. For multi-node parallel (MNP) jobs, the timeout applies to the whole job, not to the individual nodes.
        public let attemptDurationSeconds: Int?

        public init(attemptDurationSeconds: Int? = nil) {
            self.attemptDurationSeconds = attemptDurationSeconds
        }

        private enum CodingKeys: String, CodingKey {
            case attemptDurationSeconds = "attemptDurationSeconds"
        }
    }

    public struct KeyValuePair: AWSEncodableShape & AWSDecodableShape {
        /// The name of the key-value pair. For environment variables, this is the name of the environment variable.
        public let name: String?
        /// The value of the key-value pair. For environment variables, this is the value of the environment variable.
        public let value: String?

        public init(name: String? = nil, value: String? = nil) {
            self.name = name
            self.value = value
        }

        private enum CodingKeys: String, CodingKey {
            case name = "name"
            case value = "value"
        }
    }

    public struct KeyValuesPair: AWSEncodableShape {
        /// The name of the filter. Filter names are case sensitive.
        public let name: String?
        /// The filter values.
        public let values: [String]?

        public init(name: String? = nil, values: [String]? = nil) {
            self.name = name
            self.values = values
        }

        private enum CodingKeys: String, CodingKey {
            case name = "name"
            case values = "values"
        }
    }

    public struct LaunchTemplateSpecification: AWSEncodableShape & AWSDecodableShape {
        /// The ID of the launch template.
        public let launchTemplateId: String?
        /// The name of the launch template.
        public let launchTemplateName: String?
        /// The version number of the launch template, $Latest, or $Default. If the value is $Latest, the latest version of the launch template is used. If the value is $Default, the default version of the launch template is used.  If the AMI ID that's used in a compute environment is from the launch template, the AMI isn't changed when the compute environment is updated. It's only changed if the updateToLatestImageVersion parameter for the compute environment is set to true. During an infrastructure update, if either $Latest or $Default is specified, Batch re-evaluates the launch template version, and it might use a different version of the launch template. This is the case even if the launch template isn't specified in the update. When updating a compute environment, changing the launch template requires an infrastructure update of the compute environment. For more information, see Updating compute environments in the Batch User Guide.  Default: $Default.
        public let version: String?

        public init(launchTemplateId: String? = nil, launchTemplateName: String? = nil, version: String? = nil) {
            self.launchTemplateId = launchTemplateId
            self.launchTemplateName = launchTemplateName
            self.version = version
        }

        private enum CodingKeys: String, CodingKey {
            case launchTemplateId = "launchTemplateId"
            case launchTemplateName = "launchTemplateName"
            case version = "version"
        }
    }

    public struct LinuxParameters: AWSEncodableShape & AWSDecodableShape {
        /// Any of the host devices to expose to the container. This parameter maps to Devices in the Create a container section of the Docker Remote API and the --device option to docker run.  This parameter isn't applicable to jobs that are running on Fargate resources. Don't provide it for these jobs.
        public let devices: [Device]?
        /// If true, run an init process inside the container that forwards signals and reaps processes. This parameter maps to the --init option to docker run. This parameter requires version 1.25 of the Docker Remote API or greater on your container instance. To check the Docker Remote API version on your container instance, log in to your container instance and run the following command: sudo docker version | grep "Server API version"
        public let initProcessEnabled: Bool?
        /// The total amount of swap memory (in MiB) a container can use. This parameter is translated to the --memory-swap option to docker run where the value is the sum of the container memory plus the maxSwap value. For more information, see  --memory-swap details in the Docker documentation. If a maxSwap value of 0 is specified, the container doesn't use swap. Accepted values are 0 or any positive integer. If the maxSwap parameter is omitted, the container doesn't use the swap configuration for the container instance that it's running on. A maxSwap value must be set for the swappiness parameter to be used.  This parameter isn't applicable to jobs that are running on Fargate resources. Don't provide it for these jobs.
        public let maxSwap: Int?
        /// The value for the size (in MiB) of the /dev/shm volume. This parameter maps to the --shm-size option to docker run.  This parameter isn't applicable to jobs that are running on Fargate resources. Don't provide it for these jobs.
        public let sharedMemorySize: Int?
        /// You can use this parameter to tune a container's memory swappiness behavior. A swappiness value of 0 causes swapping to not occur unless absolutely necessary. A swappiness value of 100 causes pages to be swapped aggressively. Valid values are whole numbers between 0 and 100. If the swappiness parameter isn't specified, a default value of 60 is used. If a value isn't specified for maxSwap, then this parameter is ignored. If maxSwap is set to 0, the container doesn't use swap. This parameter maps to the --memory-swappiness option to docker run. Consider the following when you use a per-container swap configuration.   Swap space must be enabled and allocated on the container instance for the containers to use.  By default, the Amazon ECS optimized AMIs don't have swap enabled. You must enable swap on the instance to use this feature. For more information, see Instance store swap volumes in the Amazon EC2 User Guide for Linux Instances or How do I allocate memory to work as swap space in an Amazon EC2 instance by using a swap file?     The swap space parameters are only supported for job definitions using EC2 resources.   If the maxSwap and swappiness parameters are omitted from a job definition, each container has a default swappiness value of 60. Moreover, the total swap usage is limited to two times the memory reservation of the container.    This parameter isn't applicable to jobs that are running on Fargate resources. Don't provide it for these jobs.
        public let swappiness: Int?
        /// The container path, mount options, and size (in MiB) of the tmpfs mount. This parameter maps to the --tmpfs option to docker run.  This parameter isn't applicable to jobs that are running on Fargate resources. Don't provide this parameter for this resource type.
        public let tmpfs: [Tmpfs]?

        public init(devices: [Device]? = nil, initProcessEnabled: Bool? = nil, maxSwap: Int? = nil, sharedMemorySize: Int? = nil, swappiness: Int? = nil, tmpfs: [Tmpfs]? = nil) {
            self.devices = devices
            self.initProcessEnabled = initProcessEnabled
            self.maxSwap = maxSwap
            self.sharedMemorySize = sharedMemorySize
            self.swappiness = swappiness
            self.tmpfs = tmpfs
        }

        private enum CodingKeys: String, CodingKey {
            case devices = "devices"
            case initProcessEnabled = "initProcessEnabled"
            case maxSwap = "maxSwap"
            case sharedMemorySize = "sharedMemorySize"
            case swappiness = "swappiness"
            case tmpfs = "tmpfs"
        }
    }

    public struct ListJobsRequest: AWSEncodableShape {
        /// The job ID for an array job. Specifying an array job ID with this parameter lists all child jobs from within the specified array.
        public let arrayJobId: String?
        /// The filter to apply to the query. Only one filter can be used at a time. When the filter is used, jobStatus is ignored. The filter doesn't apply to child jobs in an array or multi-node parallel (MNP) jobs. The results are sorted by the createdAt field, with the most recent jobs being first.  JOB_NAME  The value of the filter is a case-insensitive match for the job name. If the value ends with an asterisk (*), the filter matches any job name that begins with the string before the '*'. This corresponds to the jobName value. For example, test1 matches both Test1 and test1, and test1* matches both test1 and Test10. When the JOB_NAME filter is used, the results are grouped by the job name and version.  JOB_DEFINITION  The value for the filter is the name or Amazon Resource Name (ARN) of the job definition. This corresponds to the jobDefinition value. The value is case sensitive. When the value for the filter is the job definition name, the results include all the jobs that used any revision of that job definition name. If the value ends with an asterisk (*), the filter matches any job definition name that begins with the string before the '*'. For example, jd1 matches only jd1, and jd1* matches both jd1 and jd1A. The version of the job definition that's used doesn't affect the sort order. When the JOB_DEFINITION filter is used and the ARN is used (which is in the form arn:${Partition}:batch:${Region}:${Account}:job-definition/${JobDefinitionName}:${Revision}), the results include jobs that used the specified revision of the job definition. Asterisk (*) isn't supported when the ARN is used.  BEFORE_CREATED_AT  The value for the filter is the time that's before the job was created. This corresponds to the createdAt value. The value is a string representation of the number of milliseconds since 00:00:00 UTC (midnight) on January 1, 1970.  AFTER_CREATED_AT  The value for the filter is the time that's after the job was created. This corresponds to the createdAt value. The value is a string representation of the number of milliseconds since 00:00:00 UTC (midnight) on January 1, 1970.
        public let filters: [KeyValuesPair]?
        /// The name or full Amazon Resource Name (ARN) of the job queue used to list jobs.
        public let jobQueue: String?
        /// The job status used to filter jobs in the specified queue. If the filters parameter is specified, the jobStatus parameter is ignored and jobs with any status are returned. If you don't specify a status, only RUNNING jobs are returned.
        public let jobStatus: JobStatus?
        /// The maximum number of results returned by ListJobs in paginated output. When this parameter is used, ListJobs only returns maxResults results in a single page and a nextToken response element. The remaining results of the initial request can be seen by sending another ListJobs request with the returned nextToken value. This value can be between 1 and 100. If this parameter isn't used, then ListJobs returns up to 100 results and a nextToken value if applicable.
        public let maxResults: Int?
        /// The job ID for a multi-node parallel job. Specifying a multi-node parallel job ID with this parameter lists all nodes that are associated with the specified job.
        public let multiNodeJobId: String?
        /// The nextToken value returned from a previous paginated ListJobs request where maxResults was used and the results exceeded the value of that parameter. Pagination continues from the end of the previous results that returned the nextToken value. This value is null when there are no more results to return.  Treat this token as an opaque identifier that's only used to retrieve the next items in a list and not for other programmatic purposes.
        public let nextToken: String?

        public init(arrayJobId: String? = nil, filters: [KeyValuesPair]? = nil, jobQueue: String? = nil, jobStatus: JobStatus? = nil, maxResults: Int? = nil, multiNodeJobId: String? = nil, nextToken: String? = nil) {
            self.arrayJobId = arrayJobId
            self.filters = filters
            self.jobQueue = jobQueue
            self.jobStatus = jobStatus
            self.maxResults = maxResults
            self.multiNodeJobId = multiNodeJobId
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case arrayJobId = "arrayJobId"
            case filters = "filters"
            case jobQueue = "jobQueue"
            case jobStatus = "jobStatus"
            case maxResults = "maxResults"
            case multiNodeJobId = "multiNodeJobId"
            case nextToken = "nextToken"
        }
    }

    public struct ListJobsResponse: AWSDecodableShape {
        /// A list of job summaries that match the request.
        public let jobSummaryList: [JobSummary]?
        /// The nextToken value to include in a future ListJobs request. When the results of a ListJobs request exceed maxResults, this value can be used to retrieve the next page of results. This value is null when there are no more results to return.
        public let nextToken: String?

        public init(jobSummaryList: [JobSummary]? = nil, nextToken: String? = nil) {
            self.jobSummaryList = jobSummaryList
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case jobSummaryList = "jobSummaryList"
            case nextToken = "nextToken"
        }
    }

    public struct ListSchedulingPoliciesRequest: AWSEncodableShape {
        /// The maximum number of results that's returned by ListSchedulingPolicies in paginated output. When this parameter is used, ListSchedulingPolicies only returns maxResults results in a single page and a nextToken response element. You can see the remaining results of the initial request by sending another ListSchedulingPolicies request with the returned nextToken value. This value can be between 1 and 100. If this parameter isn't used, ListSchedulingPolicies returns up to 100 results and a nextToken value if applicable.
        public let maxResults: Int?
        /// The nextToken value that's returned from a previous paginated ListSchedulingPolicies request where maxResults was used and the results exceeded the value of that parameter. Pagination continues from the end of the previous results that returned the nextToken value. This value is null when there are no more results to return.  Treat this token as an opaque identifier that's only used to retrieve the next items in a list and not for other programmatic purposes.
        public let nextToken: String?

        public init(maxResults: Int? = nil, nextToken: String? = nil) {
            self.maxResults = maxResults
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case maxResults = "maxResults"
            case nextToken = "nextToken"
        }
    }

    public struct ListSchedulingPoliciesResponse: AWSDecodableShape {
        /// The nextToken value to include in a future ListSchedulingPolicies request. When the results of a ListSchedulingPolicies request exceed maxResults, this value can be used to retrieve the next page of results. This value is null when there are no more results to return.
        public let nextToken: String?
        /// A list of scheduling policies that match the request.
        public let schedulingPolicies: [SchedulingPolicyListingDetail]?

        public init(nextToken: String? = nil, schedulingPolicies: [SchedulingPolicyListingDetail]? = nil) {
            self.nextToken = nextToken
            self.schedulingPolicies = schedulingPolicies
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "nextToken"
            case schedulingPolicies = "schedulingPolicies"
        }
    }

    public struct ListTagsForResourceRequest: AWSEncodableShape {
        /// The Amazon Resource Name (ARN) that identifies the resource that tags are listed for. Batch resources that support tags are compute environments, jobs, job definitions, job queues, and scheduling policies. ARNs for child jobs of array and multi-node parallel (MNP) jobs aren't supported.
        public let resourceArn: String

        public init(resourceArn: String) {
            self.resourceArn = resourceArn
        }

        public func encode(to encoder: Encoder) throws {
            let request = encoder.userInfo[.awsRequest]! as! RequestEncodingContainer
            _ = encoder.container(keyedBy: CodingKeys.self)
            request.encodePath(self.resourceArn, key: "resourceArn")
        }

        private enum CodingKeys: CodingKey {}
    }

    public struct ListTagsForResourceResponse: AWSDecodableShape {
        /// The tags for the resource.
        public let tags: [String: String]?

        public init(tags: [String: String]? = nil) {
            self.tags = tags
        }

        private enum CodingKeys: String, CodingKey {
            case tags = "tags"
        }
    }

    public struct LogConfiguration: AWSEncodableShape & AWSDecodableShape {
        /// The log driver to use for the container. The valid values that are listed for this parameter are log drivers that the Amazon ECS container agent can communicate with by default. The supported log drivers are awslogs, fluentd, gelf, json-file, journald, logentries, syslog, and splunk.  Jobs that are running on Fargate resources are restricted to the awslogs and splunk log drivers.   awslogs  Specifies the Amazon CloudWatch Logs logging driver. For more information, see Using the awslogs log driver in the Batch User Guide and Amazon CloudWatch Logs logging driver in the Docker documentation.  fluentd  Specifies the Fluentd logging driver. For more information including usage and options, see Fluentd logging driver in the Docker documentation.  gelf  Specifies the Graylog Extended Format (GELF) logging driver. For more information including usage and options, see Graylog Extended Format logging driver in the Docker documentation.  journald  Specifies the journald logging driver. For more information including usage and options, see Journald logging driver in the Docker documentation.  json-file  Specifies the JSON file logging driver. For more information including usage and options, see JSON File logging driver in the Docker documentation.  splunk  Specifies the Splunk logging driver. For more information including usage and options, see Splunk logging driver in the Docker documentation.  syslog  Specifies the syslog logging driver. For more information including usage and options, see Syslog logging driver in the Docker documentation.    If you have a custom driver that's not listed earlier that you want to work with the Amazon ECS container agent, you can fork the Amazon ECS container agent project that's available on GitHub and customize it to work with that driver. We encourage you to submit pull requests for changes that you want to have included. However, Amazon Web Services doesn't currently support running modified copies of this software.  This parameter requires version 1.18 of the Docker Remote API or greater on your container instance. To check the Docker Remote API version on your container instance, log in to your container instance and run the following command: sudo docker version | grep "Server API version"
        public let logDriver: LogDriver?
        /// The configuration options to send to the log driver. This parameter requires version 1.19 of the Docker Remote API or greater on your container instance. To check the Docker Remote API version on your container instance, log in to your container instance and run the following command: sudo docker version | grep "Server API version"
        public let options: [String: String]?
        /// The secrets to pass to the log configuration. For more information, see Specifying sensitive data in the Batch User Guide.
        public let secretOptions: [Secret]?

        public init(logDriver: LogDriver? = nil, options: [String: String]? = nil, secretOptions: [Secret]? = nil) {
            self.logDriver = logDriver
            self.options = options
            self.secretOptions = secretOptions
        }

        private enum CodingKeys: String, CodingKey {
            case logDriver = "logDriver"
            case options = "options"
            case secretOptions = "secretOptions"
        }
    }

    public struct MountPoint: AWSEncodableShape & AWSDecodableShape {
        /// The path on the container where the host volume is mounted.
        public let containerPath: String?
        /// If this value is true, the container has read-only access to the volume. Otherwise, the container can write to the volume. The default value is false.
        public let readOnly: Bool?
        /// The name of the volume to mount.
        public let sourceVolume: String?

        public init(containerPath: String? = nil, readOnly: Bool? = nil, sourceVolume: String? = nil) {
            self.containerPath = containerPath
            self.readOnly = readOnly
            self.sourceVolume = sourceVolume
        }

        private enum CodingKeys: String, CodingKey {
            case containerPath = "containerPath"
            case readOnly = "readOnly"
            case sourceVolume = "sourceVolume"
        }
    }

    public struct NetworkConfiguration: AWSEncodableShape & AWSDecodableShape {
        /// Indicates whether the job has a public IP address. For a job that's running on Fargate resources in a private subnet to send outbound traffic to the internet (for example, to pull container images), the private subnet requires a NAT gateway be attached to route requests to the internet. For more information, see Amazon ECS task networking in the Amazon Elastic Container Service Developer Guide. The default value is "DISABLED".
        public let assignPublicIp: AssignPublicIp?

        public init(assignPublicIp: AssignPublicIp? = nil) {
            self.assignPublicIp = assignPublicIp
        }

        private enum CodingKeys: String, CodingKey {
            case assignPublicIp = "assignPublicIp"
        }
    }

    public struct NetworkInterface: AWSDecodableShape {
        /// The attachment ID for the network interface.
        public let attachmentId: String?
        /// The private IPv6 address for the network interface.
        public let ipv6Address: String?
        /// The private IPv4 address for the network interface.
        public let privateIpv4Address: String?

        public init(attachmentId: String? = nil, ipv6Address: String? = nil, privateIpv4Address: String? = nil) {
            self.attachmentId = attachmentId
            self.ipv6Address = ipv6Address
            self.privateIpv4Address = privateIpv4Address
        }

        private enum CodingKeys: String, CodingKey {
            case attachmentId = "attachmentId"
            case ipv6Address = "ipv6Address"
            case privateIpv4Address = "privateIpv4Address"
        }
    }

    public struct NodeDetails: AWSDecodableShape {
        /// Specifies whether the current node is the main node for a multi-node parallel job.
        public let isMainNode: Bool?
        /// The node index for the node. Node index numbering starts at zero. This index is also available on the node with the AWS_BATCH_JOB_NODE_INDEX environment variable.
        public let nodeIndex: Int?

        public init(isMainNode: Bool? = nil, nodeIndex: Int? = nil) {
            self.isMainNode = isMainNode
            self.nodeIndex = nodeIndex
        }

        private enum CodingKeys: String, CodingKey {
            case isMainNode = "isMainNode"
            case nodeIndex = "nodeIndex"
        }
    }

    public struct NodeOverrides: AWSEncodableShape {
        /// The node property overrides for the job.
        public let nodePropertyOverrides: [NodePropertyOverride]?
        /// The number of nodes to use with a multi-node parallel job. This value overrides the number of nodes that are specified in the job definition. To use this override, you must meet the following conditions:   There must be at least one node range in your job definition that has an open upper boundary, such as : or n:.   The lower boundary of the node range that's specified in the job definition must be fewer than the number of nodes specified in the override.   The main node index that's specified in the job definition must be fewer than the number of nodes specified in the override.
        public let numNodes: Int?

        public init(nodePropertyOverrides: [NodePropertyOverride]? = nil, numNodes: Int? = nil) {
            self.nodePropertyOverrides = nodePropertyOverrides
            self.numNodes = numNodes
        }

        private enum CodingKeys: String, CodingKey {
            case nodePropertyOverrides = "nodePropertyOverrides"
            case numNodes = "numNodes"
        }
    }

    public struct NodeProperties: AWSEncodableShape & AWSDecodableShape {
        /// Specifies the node index for the main node of a multi-node parallel job. This node index value must be fewer than the number of nodes.
        public let mainNode: Int?
        /// A list of node ranges and their properties that are associated with a multi-node parallel job.
        public let nodeRangeProperties: [NodeRangeProperty]?
        /// The number of nodes that are associated with a multi-node parallel job.
        public let numNodes: Int?

        public init(mainNode: Int? = nil, nodeRangeProperties: [NodeRangeProperty]? = nil, numNodes: Int? = nil) {
            self.mainNode = mainNode
            self.nodeRangeProperties = nodeRangeProperties
            self.numNodes = numNodes
        }

        private enum CodingKeys: String, CodingKey {
            case mainNode = "mainNode"
            case nodeRangeProperties = "nodeRangeProperties"
            case numNodes = "numNodes"
        }
    }

    public struct NodePropertiesSummary: AWSDecodableShape {
        /// Specifies whether the current node is the main node for a multi-node parallel job.
        public let isMainNode: Bool?
        /// The node index for the node. Node index numbering begins at zero. This index is also available on the node with the AWS_BATCH_JOB_NODE_INDEX environment variable.
        public let nodeIndex: Int?
        /// The number of nodes that are associated with a multi-node parallel job.
        public let numNodes: Int?

        public init(isMainNode: Bool? = nil, nodeIndex: Int? = nil, numNodes: Int? = nil) {
            self.isMainNode = isMainNode
            self.nodeIndex = nodeIndex
            self.numNodes = numNodes
        }

        private enum CodingKeys: String, CodingKey {
            case isMainNode = "isMainNode"
            case nodeIndex = "nodeIndex"
            case numNodes = "numNodes"
        }
    }

    public struct NodePropertyOverride: AWSEncodableShape {
        /// The overrides that are sent to a node range.
        public let containerOverrides: ContainerOverrides?
        /// An object that contains the properties that you want to replace for the existing Amazon ECS resources of a job.
        public let ecsPropertiesOverride: EcsPropertiesOverride?
        /// An object that contains the instance types that you want to replace for the existing resources of a job.
        public let instanceTypes: [String]?
        /// The range of nodes, using node index values, that's used to override. A range of 0:3 indicates nodes with index values of 0 through 3. If the starting range value is omitted (:n), then 0 is used to start the range. If the ending range value is omitted (n:), then the highest possible node index is used to end the range.
        public let targetNodes: String?

        public init(containerOverrides: ContainerOverrides? = nil, ecsPropertiesOverride: EcsPropertiesOverride? = nil, instanceTypes: [String]? = nil, targetNodes: String? = nil) {
            self.containerOverrides = containerOverrides
            self.ecsPropertiesOverride = ecsPropertiesOverride
            self.instanceTypes = instanceTypes
            self.targetNodes = targetNodes
        }

        private enum CodingKeys: String, CodingKey {
            case containerOverrides = "containerOverrides"
            case ecsPropertiesOverride = "ecsPropertiesOverride"
            case instanceTypes = "instanceTypes"
            case targetNodes = "targetNodes"
        }
    }

    public struct NodeRangeProperty: AWSEncodableShape & AWSDecodableShape {
        /// The container details for the node range.
        public let container: ContainerProperties?
        /// This is an object that represents the properties of the node range for a multi-node parallel job.
        public let ecsProperties: EcsProperties?
        /// The instance types of the underlying host infrastructure of a multi-node parallel job.  This parameter isn't applicable to jobs that are running on Fargate resources. In addition, this list object is currently limited to one element.
        public let instanceTypes: [String]?
        /// The range of nodes, using node index values. A range of 0:3 indicates nodes with index values of 0 through 3. If the starting range value is omitted (:n), then 0 is used to start the range. If the ending range value is omitted (n:), then the highest possible node index is used to end the range. Your accumulative node ranges must account for all nodes (0:n). You can nest node ranges (for example, 0:10 and 4:5). In this case, the 4:5 range properties override the 0:10 properties.
        public let targetNodes: String?

        public init(container: ContainerProperties? = nil, ecsProperties: EcsProperties? = nil, instanceTypes: [String]? = nil, targetNodes: String? = nil) {
            self.container = container
            self.ecsProperties = ecsProperties
            self.instanceTypes = instanceTypes
            self.targetNodes = targetNodes
        }

        private enum CodingKeys: String, CodingKey {
            case container = "container"
            case ecsProperties = "ecsProperties"
            case instanceTypes = "instanceTypes"
            case targetNodes = "targetNodes"
        }
    }

    public struct RegisterJobDefinitionRequest: AWSEncodableShape {
        /// An object with properties specific to Amazon ECS-based single-node container-based jobs. If the job definition's type parameter is container, then you must specify either containerProperties or nodeProperties. This must not be specified for Amazon EKS-based job definitions.  If the job runs on Fargate resources, then you must not specify nodeProperties; use only containerProperties.
        public let containerProperties: ContainerProperties?
        /// An object with properties that are specific to Amazon ECS-based jobs. This must not be specified for Amazon EKS-based job definitions.
        public let ecsProperties: EcsProperties?
        /// An object with properties that are specific to Amazon EKS-based jobs. This must not be specified for Amazon ECS based job definitions.
        public let eksProperties: EksProperties?
        /// The name of the job definition to register. It can be up to 128 letters long. It can contain uppercase and lowercase letters, numbers, hyphens (-), and underscores (_).
        public let jobDefinitionName: String?
        /// An object with properties specific to multi-node parallel jobs. If you specify node properties for a job, it becomes a multi-node parallel job. For more information, see Multi-node Parallel Jobs in the Batch User Guide.  If the job runs on Fargate resources, then you must not specify nodeProperties; use containerProperties instead.   If the job runs on Amazon EKS resources, then you must not specify nodeProperties.
        public let nodeProperties: NodeProperties?
        /// Default parameter substitution placeholders to set in the job definition. Parameters are specified as a key-value pair mapping. Parameters in a SubmitJob request override any corresponding parameter defaults from the job definition.
        public let parameters: [String: String]?
        /// The platform capabilities required by the job definition. If no value is specified, it defaults to EC2. To run the job on Fargate resources, specify FARGATE.  If the job runs on Amazon EKS resources, then you must not specify platformCapabilities.
        public let platformCapabilities: [PlatformCapability]?
        /// Specifies whether to propagate the tags from the job or job definition to the corresponding Amazon ECS task. If no value is specified, the tags are not propagated. Tags can only be propagated to the tasks during task creation. For tags with the same name, job tags are given priority over job definitions tags. If the total number of combined tags from the job and job definition is over 50, the job is moved to the FAILED state.  If the job runs on Amazon EKS resources, then you must not specify propagateTags.
        public let propagateTags: Bool?
        /// The retry strategy to use for failed jobs that are submitted with this job definition. Any retry strategy that's specified during a SubmitJob operation overrides the retry strategy defined here. If a job is terminated due to a timeout, it isn't retried.
        public let retryStrategy: RetryStrategy?
        /// The scheduling priority for jobs that are submitted with this job definition. This only affects jobs in job queues with a fair share policy. Jobs with a higher scheduling priority are scheduled before jobs with a lower scheduling priority. The minimum supported value is 0 and the maximum supported value is 9999.
        public let schedulingPriority: Int?
        /// The tags that you apply to the job definition to help you categorize and organize your resources. Each tag consists of a key and an optional value. For more information, see Tagging Amazon Web Services Resources in Batch User Guide.
        public let tags: [String: String]?
        /// The timeout configuration for jobs that are submitted with this job definition, after which Batch terminates your jobs if they have not finished. If a job is terminated due to a timeout, it isn't retried. The minimum value for the timeout is 60 seconds. Any timeout configuration that's specified during a SubmitJob operation overrides the timeout configuration defined here. For more information, see Job Timeouts in the Batch User Guide.
        public let timeout: JobTimeout?
        /// The type of job definition. For more information about multi-node parallel jobs, see Creating a multi-node parallel job definition in the Batch User Guide.   If the value is container, then one of the following is required: containerProperties, ecsProperties, or eksProperties.   If the value is multinode, then nodeProperties is required.    If the job is run on Fargate resources, then multinode isn't supported.
        public let type: JobDefinitionType?

        public init(containerProperties: ContainerProperties? = nil, ecsProperties: EcsProperties? = nil, eksProperties: EksProperties? = nil, jobDefinitionName: String? = nil, nodeProperties: NodeProperties? = nil, parameters: [String: String]? = nil, platformCapabilities: [PlatformCapability]? = nil, propagateTags: Bool? = nil, retryStrategy: RetryStrategy? = nil, schedulingPriority: Int? = nil, tags: [String: String]? = nil, timeout: JobTimeout? = nil, type: JobDefinitionType? = nil) {
            self.containerProperties = containerProperties
            self.ecsProperties = ecsProperties
            self.eksProperties = eksProperties
            self.jobDefinitionName = jobDefinitionName
            self.nodeProperties = nodeProperties
            self.parameters = parameters
            self.platformCapabilities = platformCapabilities
            self.propagateTags = propagateTags
            self.retryStrategy = retryStrategy
            self.schedulingPriority = schedulingPriority
            self.tags = tags
            self.timeout = timeout
            self.type = type
        }

        public func validate(name: String) throws {
            try self.eksProperties?.validate(name: "\(name).eksProperties")
            try self.tags?.forEach {
                try validate($0.key, name: "tags.key", parent: name, max: 128)
                try validate($0.key, name: "tags.key", parent: name, min: 1)
                try validate($0.value, name: "tags[\"\($0.key)\"]", parent: name, max: 256)
            }
            try self.validate(self.tags, name: "tags", parent: name, max: 50)
            try self.validate(self.tags, name: "tags", parent: name, min: 1)
        }

        private enum CodingKeys: String, CodingKey {
            case containerProperties = "containerProperties"
            case ecsProperties = "ecsProperties"
            case eksProperties = "eksProperties"
            case jobDefinitionName = "jobDefinitionName"
            case nodeProperties = "nodeProperties"
            case parameters = "parameters"
            case platformCapabilities = "platformCapabilities"
            case propagateTags = "propagateTags"
            case retryStrategy = "retryStrategy"
            case schedulingPriority = "schedulingPriority"
            case tags = "tags"
            case timeout = "timeout"
            case type = "type"
        }
    }

    public struct RegisterJobDefinitionResponse: AWSDecodableShape {
        /// The Amazon Resource Name (ARN) of the job definition.
        public let jobDefinitionArn: String?
        /// The name of the job definition.
        public let jobDefinitionName: String?
        /// The revision of the job definition.
        public let revision: Int?

        public init(jobDefinitionArn: String? = nil, jobDefinitionName: String? = nil, revision: Int? = nil) {
            self.jobDefinitionArn = jobDefinitionArn
            self.jobDefinitionName = jobDefinitionName
            self.revision = revision
        }

        private enum CodingKeys: String, CodingKey {
            case jobDefinitionArn = "jobDefinitionArn"
            case jobDefinitionName = "jobDefinitionName"
            case revision = "revision"
        }
    }

    public struct RepositoryCredentials: AWSEncodableShape & AWSDecodableShape {
        /// The Amazon Resource Name (ARN) of the secret containing the private repository credentials.
        public let credentialsParameter: String?

        public init(credentialsParameter: String? = nil) {
            self.credentialsParameter = credentialsParameter
        }

        private enum CodingKeys: String, CodingKey {
            case credentialsParameter = "credentialsParameter"
        }
    }

    public struct ResourceRequirement: AWSEncodableShape & AWSDecodableShape {
        /// The type of resource to assign to a container. The supported resources include GPU, MEMORY, and VCPU.
        public let type: ResourceType?
        /// The quantity of the specified resource to reserve for the container. The values vary based on the type specified.  type="GPU"  The number of physical GPUs to reserve for the container. Make sure that the number of GPUs reserved for all containers in a job doesn't exceed the number of available GPUs on the compute resource that the job is launched on.  GPUs aren't available for jobs that are running on Fargate resources.   type="MEMORY"  The memory hard limit (in MiB) present to the container. This parameter is supported for jobs that are running on Amazon EC2 resources. If your container attempts to exceed the memory specified, the container is terminated. This parameter maps to Memory in the Create a container section of the Docker Remote API and the --memory option to docker run. You must specify at least 4 MiB of memory for a job. This is required but can be specified in several places for multi-node parallel (MNP) jobs. It must be specified for each node at least once. This parameter maps to Memory in the Create a container section of the Docker Remote API and the --memory option to docker run.  If you're trying to maximize your resource utilization by providing your jobs as much memory as possible for a particular instance type, see Memory management in the Batch User Guide.  For jobs that are running on Fargate resources, then value is the hard limit (in MiB), and must match one of the supported values and the VCPU values must be one of the values supported for that memory value.  value = 512   VCPU = 0.25  value = 1024   VCPU = 0.25 or 0.5  value = 2048   VCPU = 0.25, 0.5, or 1  value = 3072   VCPU = 0.5, or 1  value = 4096   VCPU = 0.5, 1, or 2  value = 5120, 6144, or 7168   VCPU = 1 or 2  value = 8192   VCPU = 1, 2, or 4  value = 9216, 10240, 11264, 12288, 13312, 14336, or 15360   VCPU = 2 or 4  value = 16384   VCPU = 2, 4, or 8  value = 17408, 18432, 19456, 21504, 22528, 23552, 25600, 26624, 27648, 29696, or 30720   VCPU = 4  value = 20480, 24576, or 28672   VCPU = 4 or 8  value = 36864, 45056, 53248, or 61440   VCPU = 8  value = 32768, 40960, 49152, or 57344   VCPU = 8 or 16  value = 65536, 73728, 81920, 90112, 98304, 106496, 114688, or 122880   VCPU = 16    type="VCPU"  The number of vCPUs reserved for the container. This parameter maps to CpuShares in the Create a container section of the Docker Remote API and the --cpu-shares option to docker run. Each vCPU is equivalent to 1,024 CPU shares. For Amazon EC2 resources, you must specify at least one vCPU. This is required but can be specified in several places; it must be specified for each node at least once. The default for the Fargate On-Demand vCPU resource count quota is 6 vCPUs. For more information about Fargate quotas, see Fargate quotas in the Amazon Web Services General Reference. For jobs that are running on Fargate resources, then value must match one of the supported values and the MEMORY values must be one of the values supported for that VCPU value. The supported values are 0.25, 0.5, 1, 2, 4, 8, and 16  value = 0.25   MEMORY = 512, 1024, or 2048  value = 0.5   MEMORY = 1024, 2048, 3072, or 4096  value = 1   MEMORY = 2048, 3072, 4096, 5120, 6144, 7168, or 8192  value = 2   MEMORY = 4096, 5120, 6144, 7168, 8192, 9216, 10240, 11264, 12288, 13312, 14336, 15360, or 16384  value = 4   MEMORY = 8192, 9216, 10240, 11264, 12288, 13312, 14336, 15360, 16384, 17408, 18432, 19456, 20480, 21504, 22528, 23552, 24576, 25600, 26624, 27648, 28672, 29696, or 30720  value = 8   MEMORY = 16384, 20480, 24576, 28672, 32768, 36864, 40960, 45056, 49152, 53248, 57344, or 61440
        ///   value = 16   MEMORY = 32768, 40960, 49152, 57344, 65536, 73728, 81920, 90112, 98304, 106496, 114688, or 122880
        ///
        public let value: String?

        public init(type: ResourceType? = nil, value: String? = nil) {
            self.type = type
            self.value = value
        }

        private enum CodingKeys: String, CodingKey {
            case type = "type"
            case value = "value"
        }
    }

    public struct RetryStrategy: AWSEncodableShape & AWSDecodableShape {
        /// The number of times to move a job to the RUNNABLE status. You can specify between 1 and 10 attempts. If the value of attempts is greater than one, the job is retried on failure the same number of attempts as the value.
        public let attempts: Int?
        /// Array of up to 5 objects that specify the conditions where jobs are retried or failed. If this parameter is specified, then the attempts parameter must also be specified. If none of the listed conditions match, then the job is retried.
        public let evaluateOnExit: [EvaluateOnExit]?

        public init(attempts: Int? = nil, evaluateOnExit: [EvaluateOnExit]? = nil) {
            self.attempts = attempts
            self.evaluateOnExit = evaluateOnExit
        }

        private enum CodingKeys: String, CodingKey {
            case attempts = "attempts"
            case evaluateOnExit = "evaluateOnExit"
        }
    }

    public struct RuntimePlatform: AWSEncodableShape & AWSDecodableShape {
        ///  The vCPU architecture. The default value is X86_64. Valid values are X86_64 and ARM64.  This parameter must be set to X86_64 for Windows containers.   Fargate Spot is not supported for ARM64 and Windows-based containers on Fargate. A job queue will be blocked if a Fargate ARM64 or Windows job is submitted to a job queue with only Fargate Spot compute environments. However, you can attach both FARGATE and FARGATE_SPOT compute environments to the same job queue.
        public let cpuArchitecture: String?
        /// The operating system for the compute environment. Valid values are: LINUX (default), WINDOWS_SERVER_2019_CORE, WINDOWS_SERVER_2019_FULL, WINDOWS_SERVER_2022_CORE, and WINDOWS_SERVER_2022_FULL.  The following parameters can’t be set for Windows containers: linuxParameters, privileged, user, ulimits, readonlyRootFilesystem, and efsVolumeConfiguration.   The Batch Scheduler checks the compute environments that are attached to the job queue before registering a task definition with Fargate. In this scenario, the job queue is where the job is submitted. If the job requires a Windows container and the first compute environment is LINUX, the compute environment is skipped and the next compute environment is checked until a Windows-based compute environment is found.   Fargate Spot is not supported for ARM64 and Windows-based containers on Fargate. A job queue will be blocked if a Fargate ARM64 or Windows job is submitted to a job queue with only Fargate Spot compute environments. However, you can attach both FARGATE and FARGATE_SPOT compute environments to the same job queue.
        public let operatingSystemFamily: String?

        public init(cpuArchitecture: String? = nil, operatingSystemFamily: String? = nil) {
            self.cpuArchitecture = cpuArchitecture
            self.operatingSystemFamily = operatingSystemFamily
        }

        private enum CodingKeys: String, CodingKey {
            case cpuArchitecture = "cpuArchitecture"
            case operatingSystemFamily = "operatingSystemFamily"
        }
    }

    public struct SchedulingPolicyDetail: AWSDecodableShape {
        /// The Amazon Resource Name (ARN) of the scheduling policy. An example is arn:aws:batch:us-east-1:123456789012:scheduling-policy/HighPriority .
        public let arn: String?
        /// The fair share policy for the scheduling policy.
        public let fairsharePolicy: FairsharePolicy?
        /// The name of the scheduling policy.
        public let name: String?
        /// The tags that you apply to the scheduling policy to categorize and organize your resources. Each tag consists of a key and an optional value. For more information, see Tagging Amazon Web Services resources in Amazon Web Services General Reference.
        public let tags: [String: String]?

        public init(arn: String? = nil, fairsharePolicy: FairsharePolicy? = nil, name: String? = nil, tags: [String: String]? = nil) {
            self.arn = arn
            self.fairsharePolicy = fairsharePolicy
            self.name = name
            self.tags = tags
        }

        private enum CodingKeys: String, CodingKey {
            case arn = "arn"
            case fairsharePolicy = "fairsharePolicy"
            case name = "name"
            case tags = "tags"
        }
    }

    public struct SchedulingPolicyListingDetail: AWSDecodableShape {
        /// Amazon Resource Name (ARN) of the scheduling policy.
        public let arn: String?

        public init(arn: String? = nil) {
            self.arn = arn
        }

        private enum CodingKeys: String, CodingKey {
            case arn = "arn"
        }
    }

    public struct Secret: AWSEncodableShape & AWSDecodableShape {
        /// The name of the secret.
        public let name: String?
        /// The secret to expose to the container. The supported values are either the full Amazon Resource Name (ARN) of the Secrets Manager secret or the full ARN of the parameter in the Amazon Web Services Systems Manager Parameter Store.  If the Amazon Web Services Systems Manager Parameter Store parameter exists in the same Region as the job you're launching, then you can use either the full Amazon Resource Name (ARN) or name of the parameter. If the parameter exists in a different Region, then the full ARN must be specified.
        public let valueFrom: String?

        public init(name: String? = nil, valueFrom: String? = nil) {
            self.name = name
            self.valueFrom = valueFrom
        }

        private enum CodingKeys: String, CodingKey {
            case name = "name"
            case valueFrom = "valueFrom"
        }
    }

    public struct ShareAttributes: AWSEncodableShape & AWSDecodableShape {
        /// A fair share identifier or fair share identifier prefix. If the string ends with an asterisk (*), this entry specifies the weight factor to use for fair share identifiers that start with that prefix. The list of fair share identifiers in a fair share policy can't overlap. For example, you can't have one that specifies a shareIdentifier of UserA* and another that specifies a shareIdentifier of UserA-1. There can be no more than 500 fair share identifiers active in a job queue. The string is limited to 255 alphanumeric characters, and can be followed by an asterisk (*).
        public let shareIdentifier: String?
        /// The weight factor for the fair share identifier. The default value is 1.0. A lower value has a higher priority for compute resources. For example, jobs that use a share identifier with a weight factor of 0.125 (1/8) get 8 times the compute resources of jobs that use a share identifier with a weight factor of 1. The smallest supported value is 0.0001, and the largest supported value is 999.9999.
        public let weightFactor: Float?

        public init(shareIdentifier: String? = nil, weightFactor: Float? = nil) {
            self.shareIdentifier = shareIdentifier
            self.weightFactor = weightFactor
        }

        private enum CodingKeys: String, CodingKey {
            case shareIdentifier = "shareIdentifier"
            case weightFactor = "weightFactor"
        }
    }

    public struct SubmitJobRequest: AWSEncodableShape {
        /// The array properties for the submitted job, such as the size of the array. The array size can be between 2 and 10,000. If you specify array properties for a job, it becomes an array job. For more information, see Array Jobs in the Batch User Guide.
        public let arrayProperties: ArrayProperties?
        /// An object with properties that override the defaults for the job definition that specify the name of a container in the specified job definition and the overrides it should receive. You can override the default command for a container, which is specified in the job definition or the Docker image, with a command override. You can also override existing environment variables on a container or add new environment variables to it with an environment override.
        public let containerOverrides: ContainerOverrides?
        /// A list of dependencies for the job. A job can depend upon a maximum of 20 jobs. You can specify a SEQUENTIAL type dependency without specifying a job ID for array jobs so that each child array job completes sequentially, starting at index 0. You can also specify an N_TO_N type dependency with a job ID for array jobs. In that case, each index child of this job must wait for the corresponding index child of each dependency to complete before it can begin.
        public let dependsOn: [JobDependency]?
        /// An object, with properties that override defaults for the job definition, can only be specified for jobs that are run on Amazon ECS resources.
        public let ecsPropertiesOverride: EcsPropertiesOverride?
        /// An object, with properties that override defaults for the job definition, can only be specified for jobs that are run on Amazon EKS resources.
        public let eksPropertiesOverride: EksPropertiesOverride?
        /// The job definition used by this job. This value can be one of definition-name, definition-name:revision, or the Amazon Resource Name (ARN) for the job definition, with or without the revision (arn:aws:batch:region:account:job-definition/definition-name:revision , or arn:aws:batch:region:account:job-definition/definition-name ). If the revision is not specified, then the latest active revision is used.
        public let jobDefinition: String?
        /// The name of the job. It can be up to 128 letters long. The first character must be alphanumeric, can contain uppercase and lowercase letters, numbers, hyphens (-), and underscores (_).
        public let jobName: String?
        /// The job queue where the job is submitted. You can specify either the name or the Amazon Resource Name (ARN) of the queue.
        public let jobQueue: String?
        /// A list of node overrides in JSON format that specify the node range to target and the container overrides for that node range.  This parameter isn't applicable to jobs that are running on Fargate resources; use containerOverrides instead.
        public let nodeOverrides: NodeOverrides?
        /// Additional parameters passed to the job that replace parameter substitution placeholders that are set in the job definition. Parameters are specified as a key and value pair mapping. Parameters in a SubmitJob request override any corresponding parameter defaults from the job definition.
        public let parameters: [String: String]?
        /// Specifies whether to propagate the tags from the job or job definition to the corresponding Amazon ECS task. If no value is specified, the tags aren't propagated. Tags can only be propagated to the tasks during task creation. For tags with the same name, job tags are given priority over job definitions tags. If the total number of combined tags from the job and job definition is over 50, the job is moved to the FAILED state. When specified, this overrides the tag propagation setting in the job definition.
        public let propagateTags: Bool?
        /// The retry strategy to use for failed jobs from this SubmitJob operation. When a retry strategy is specified here, it overrides the retry strategy defined in the job definition.
        public let retryStrategy: RetryStrategy?
        /// The scheduling priority for the job. This only affects jobs in job queues with a fair share policy. Jobs with a higher scheduling priority are scheduled before jobs with a lower scheduling priority. This overrides any scheduling priority in the job definition and works only within a single share identifier. The minimum supported value is 0 and the maximum supported value is 9999.
        public let schedulingPriorityOverride: Int?
        /// The share identifier for the job. Don't specify this parameter if the job queue doesn't have a scheduling policy. If the job queue has a scheduling policy, then this parameter must be specified. This string is limited to 255 alphanumeric characters, and can be followed by an asterisk (*).
        public let shareIdentifier: String?
        /// The tags that you apply to the job request to help you categorize and organize your resources. Each tag consists of a key and an optional value. For more information, see Tagging Amazon Web Services Resources in Amazon Web Services General Reference.
        public let tags: [String: String]?
        /// The timeout configuration for this SubmitJob operation. You can specify a timeout duration after which Batch terminates your jobs if they haven't finished. If a job is terminated due to a timeout, it isn't retried. The minimum value for the timeout is 60 seconds. This configuration overrides any timeout configuration specified in the job definition. For array jobs, child jobs have the same timeout configuration as the parent job. For more information, see Job Timeouts in the Amazon Elastic Container Service Developer Guide.
        public let timeout: JobTimeout?

        public init(arrayProperties: ArrayProperties? = nil, containerOverrides: ContainerOverrides? = nil, dependsOn: [JobDependency]? = nil, ecsPropertiesOverride: EcsPropertiesOverride? = nil, eksPropertiesOverride: EksPropertiesOverride? = nil, jobDefinition: String? = nil, jobName: String? = nil, jobQueue: String? = nil, nodeOverrides: NodeOverrides? = nil, parameters: [String: String]? = nil, propagateTags: Bool? = nil, retryStrategy: RetryStrategy? = nil, schedulingPriorityOverride: Int? = nil, shareIdentifier: String? = nil, tags: [String: String]? = nil, timeout: JobTimeout? = nil) {
            self.arrayProperties = arrayProperties
            self.containerOverrides = containerOverrides
            self.dependsOn = dependsOn
            self.ecsPropertiesOverride = ecsPropertiesOverride
            self.eksPropertiesOverride = eksPropertiesOverride
            self.jobDefinition = jobDefinition
            self.jobName = jobName
            self.jobQueue = jobQueue
            self.nodeOverrides = nodeOverrides
            self.parameters = parameters
            self.propagateTags = propagateTags
            self.retryStrategy = retryStrategy
            self.schedulingPriorityOverride = schedulingPriorityOverride
            self.shareIdentifier = shareIdentifier
            self.tags = tags
            self.timeout = timeout
        }

        public func validate(name: String) throws {
            try self.eksPropertiesOverride?.validate(name: "\(name).eksPropertiesOverride")
            try self.tags?.forEach {
                try validate($0.key, name: "tags.key", parent: name, max: 128)
                try validate($0.key, name: "tags.key", parent: name, min: 1)
                try validate($0.value, name: "tags[\"\($0.key)\"]", parent: name, max: 256)
            }
            try self.validate(self.tags, name: "tags", parent: name, max: 50)
            try self.validate(self.tags, name: "tags", parent: name, min: 1)
        }

        private enum CodingKeys: String, CodingKey {
            case arrayProperties = "arrayProperties"
            case containerOverrides = "containerOverrides"
            case dependsOn = "dependsOn"
            case ecsPropertiesOverride = "ecsPropertiesOverride"
            case eksPropertiesOverride = "eksPropertiesOverride"
            case jobDefinition = "jobDefinition"
            case jobName = "jobName"
            case jobQueue = "jobQueue"
            case nodeOverrides = "nodeOverrides"
            case parameters = "parameters"
            case propagateTags = "propagateTags"
            case retryStrategy = "retryStrategy"
            case schedulingPriorityOverride = "schedulingPriorityOverride"
            case shareIdentifier = "shareIdentifier"
            case tags = "tags"
            case timeout = "timeout"
        }
    }

    public struct SubmitJobResponse: AWSDecodableShape {
        /// The Amazon Resource Name (ARN) for the job.
        public let jobArn: String?
        /// The unique identifier for the job.
        public let jobId: String?
        /// The name of the job.
        public let jobName: String?

        public init(jobArn: String? = nil, jobId: String? = nil, jobName: String? = nil) {
            self.jobArn = jobArn
            self.jobId = jobId
            self.jobName = jobName
        }

        private enum CodingKeys: String, CodingKey {
            case jobArn = "jobArn"
            case jobId = "jobId"
            case jobName = "jobName"
        }
    }

    public struct TagResourceRequest: AWSEncodableShape {
        /// The Amazon Resource Name (ARN) of the resource that tags are added to. Batch resources that support tags are compute environments, jobs, job definitions, job queues, and scheduling policies. ARNs for child jobs of array and multi-node parallel (MNP) jobs aren't supported.
        public let resourceArn: String
        /// The tags that you apply to the resource to help you categorize and organize your resources. Each tag consists of a key and an optional value. For more information, see Tagging Amazon Web Services Resources in Amazon Web Services General Reference.
        public let tags: [String: String]?

        public init(resourceArn: String, tags: [String: String]? = nil) {
            self.resourceArn = resourceArn
            self.tags = tags
        }

        public func encode(to encoder: Encoder) throws {
            let request = encoder.userInfo[.awsRequest]! as! RequestEncodingContainer
            var container = encoder.container(keyedBy: CodingKeys.self)
            request.encodePath(self.resourceArn, key: "resourceArn")
            try container.encodeIfPresent(self.tags, forKey: .tags)
        }

        public func validate(name: String) throws {
            try self.tags?.forEach {
                try validate($0.key, name: "tags.key", parent: name, max: 128)
                try validate($0.key, name: "tags.key", parent: name, min: 1)
                try validate($0.value, name: "tags[\"\($0.key)\"]", parent: name, max: 256)
            }
            try self.validate(self.tags, name: "tags", parent: name, max: 50)
            try self.validate(self.tags, name: "tags", parent: name, min: 1)
        }

        private enum CodingKeys: String, CodingKey {
            case tags = "tags"
        }
    }

    public struct TagResourceResponse: AWSDecodableShape {
        public init() {}
    }

    public struct TaskContainerDependency: AWSEncodableShape & AWSDecodableShape {
        /// The dependency condition of the container. The following are the available conditions and their behavior:    START - This condition emulates the behavior of links and volumes today. It validates that a dependent container is started before permitting other containers to start.     COMPLETE - This condition validates that a dependent container runs to completion (exits) before permitting other containers to start. This can be useful for nonessential containers that run a script and then exit. This condition can't be set on an essential container.     SUCCESS - This condition is the same as COMPLETE, but it also requires that the container exits with a zero status. This condition can't be set on an essential container.
        public let condition: String?
        /// A unique identifier for the container.
        public let containerName: String?

        public init(condition: String? = nil, containerName: String? = nil) {
            self.condition = condition
            self.containerName = containerName
        }

        private enum CodingKeys: String, CodingKey {
            case condition = "condition"
            case containerName = "containerName"
        }
    }

    public struct TaskContainerDetails: AWSDecodableShape {
        /// The command that's passed to the container. This parameter maps to Cmd in the Create a container section of the Docker Remote API and the COMMAND parameter to docker run. For more information, see https://docs.docker.com/engine/reference/builder/#cmd.
        public let command: [String]?
        /// A list of containers that this container depends on.
        public let dependsOn: [TaskContainerDependency]?
        /// The environment variables to pass to a container. This parameter maps to Env in the Create a container section of the Docker Remote API and the --env option to docker run.  We don't recommend using plaintext environment variables for sensitive information, such as credential data.
        public let environment: [KeyValuePair]?
        /// If the essential parameter of a container is marked as true, and that container fails or stops for any reason, all other containers that are part of the task are stopped. If the essential parameter of a container is marked as false, its failure doesn't affect the rest of the containers in a task. If this parameter is omitted, a container is assumed to be essential. All jobs must have at least one essential container. If you have an application that's composed of multiple containers, group containers that are used for a common purpose into components, and separate the different components into multiple task definitions. For more information, see Application Architecture in the Amazon Elastic Container Service Developer Guide.
        public let essential: Bool?
        /// The exit code returned upon completion.
        public let exitCode: Int?
        /// The image used to start a container. This string is passed directly to the Docker daemon. By default, images in the Docker Hub registry are available. Other repositories are specified with either repository-url/image:tag or repository-url/image@digest. Up to 255 letters (uppercase and lowercase), numbers, hyphens, underscores, colons, periods, forward slashes, and number signs are allowed. This parameter maps to Image in the Create a container section of the Docker Remote API and the IMAGE parameter of the  docker run .
        public let image: String?
        /// Linux-specific modifications that are applied to the container, such as Linux kernel capabilities. For more information, see KernelCapabilities.  This parameter is not supported for Windows containers.
        public let linuxParameters: LinuxParameters?
        /// The log configuration specification for the container. This parameter maps to LogConfig in the Create a container section of the Docker Remote API and the --log-driver option to docker run. By default, containers use the same logging driver that the Docker daemon uses. However the container can use a different logging driver than the Docker daemon by specifying a log driver with this parameter in the container definition. To use a different logging driver for a container, the log system must be configured properly on the container instance (or on a different log server for remote logging options). For more information about the options for different supported log drivers, see Configure logging drivers  in the Docker documentation.  Amazon ECS currently supports a subset of the logging drivers available to the Docker daemon (shown in the LogConfiguration data type). Additional log drivers may be available in future releases of the Amazon ECS container agent.  This parameter requires version 1.18 of the Docker Remote API or greater on your container instance. To check the Docker Remote API version on your container instance, log in to your container instance and run the following command: sudo docker version --format '{{.Server.APIVersion}}'   The Amazon ECS container agent running on a container instance must register the logging drivers available on that instance with the ECS_AVAILABLE_LOGGING_DRIVERS environment variable before containers placed on that instance can use these log configuration options. For more information, see Amazon ECS container agent configuration in the Amazon Elastic Container Service Developer Guide.
        public let logConfiguration: LogConfiguration?
        /// The name of the CloudWatch Logs log stream that's associated with the container. The log group for Batch jobs is /aws/batch/job. Each container attempt receives a log stream name when they reach the RUNNING status.
        public let logStreamName: String?
        /// The mount points for data volumes in your container. This parameter maps to Volumes in the Create a container section of the Docker Remote API and the --volume option to docker run. Windows containers can mount whole directories on the same drive as $env:ProgramData. Windows containers can't mount directories on a different drive, and mount point can't be across drives.
        public let mountPoints: [MountPoint]?
        /// The name of a container.
        public let name: String?
        /// The network interfaces that are associated with the job.
        public let networkInterfaces: [NetworkInterface]?
        /// When this parameter is true, the container is given elevated privileges on the host container instance (similar to the root user). This parameter maps to Privileged in the Create a container section of the Docker Remote API and the --privileged option to docker run.  This parameter is not supported for Windows containers or tasks run on Fargate.
        public let privileged: Bool?
        /// When this parameter is true, the container is given read-only access to its root file system. This parameter maps to ReadonlyRootfs in the Create a container section of the Docker Remote API and the --read-only option to docker run.  This parameter is not supported for Windows containers.
        public let readonlyRootFilesystem: Bool?
        /// A short (255 max characters) human-readable string to provide additional details for a running or stopped container.
        public let reason: String?
        /// The private repository authentication credentials to use.
        public let repositoryCredentials: RepositoryCredentials?
        /// The type and amount of a resource to assign to a container. The only supported resource is a GPU.
        public let resourceRequirements: [ResourceRequirement]?
        /// The secrets to pass to the container. For more information, see Specifying Sensitive Data in the Amazon Elastic Container Service Developer Guide.
        public let secrets: [Secret]?
        /// A list of ulimits to set in the container. If a ulimit value is specified in a task definition, it overrides the default values set by Docker. This parameter maps to Ulimits in the Create a container section of the Docker Remote API and the --ulimit option to docker run. Amazon ECS tasks hosted on Fargate use the default resource limit values set by the operating system with the exception of the nofile resource limit parameter which Fargate overrides. The nofile resource limit sets a restriction on the number of open files that a container can use. The default nofile soft limit is 1024 and the default hard limit is 65535. This parameter requires version 1.18 of the Docker Remote API or greater on your container instance. To check the Docker Remote API version on your container instance, log in to your container instance and run the following command: sudo docker version --format '{{.Server.APIVersion}}'   This parameter is not supported for Windows containers.
        public let ulimits: [Ulimit]?
        /// The user to use inside the container. This parameter maps to User in the Create a container section of the Docker Remote API and the --user option to docker run.  When running tasks using the host network mode, don't run containers using the root user (UID 0). We recommend using a non-root user for better security.  You can specify the user using the following formats. If specifying a UID or GID, you must specify it as a positive integer.    user     user:group     uid     uid:gid     user:gi     uid:group          This parameter is not supported for Windows containers.
        public let user: String?

        public init(command: [String]? = nil, dependsOn: [TaskContainerDependency]? = nil, environment: [KeyValuePair]? = nil, essential: Bool? = nil, exitCode: Int? = nil, image: String? = nil, linuxParameters: LinuxParameters? = nil, logConfiguration: LogConfiguration? = nil, logStreamName: String? = nil, mountPoints: [MountPoint]? = nil, name: String? = nil, networkInterfaces: [NetworkInterface]? = nil, privileged: Bool? = nil, readonlyRootFilesystem: Bool? = nil, reason: String? = nil, repositoryCredentials: RepositoryCredentials? = nil, resourceRequirements: [ResourceRequirement]? = nil, secrets: [Secret]? = nil, ulimits: [Ulimit]? = nil, user: String? = nil) {
            self.command = command
            self.dependsOn = dependsOn
            self.environment = environment
            self.essential = essential
            self.exitCode = exitCode
            self.image = image
            self.linuxParameters = linuxParameters
            self.logConfiguration = logConfiguration
            self.logStreamName = logStreamName
            self.mountPoints = mountPoints
            self.name = name
            self.networkInterfaces = networkInterfaces
            self.privileged = privileged
            self.readonlyRootFilesystem = readonlyRootFilesystem
            self.reason = reason
            self.repositoryCredentials = repositoryCredentials
            self.resourceRequirements = resourceRequirements
            self.secrets = secrets
            self.ulimits = ulimits
            self.user = user
        }

        private enum CodingKeys: String, CodingKey {
            case command = "command"
            case dependsOn = "dependsOn"
            case environment = "environment"
            case essential = "essential"
            case exitCode = "exitCode"
            case image = "image"
            case linuxParameters = "linuxParameters"
            case logConfiguration = "logConfiguration"
            case logStreamName = "logStreamName"
            case mountPoints = "mountPoints"
            case name = "name"
            case networkInterfaces = "networkInterfaces"
            case privileged = "privileged"
            case readonlyRootFilesystem = "readonlyRootFilesystem"
            case reason = "reason"
            case repositoryCredentials = "repositoryCredentials"
            case resourceRequirements = "resourceRequirements"
            case secrets = "secrets"
            case ulimits = "ulimits"
            case user = "user"
        }
    }

    public struct TaskContainerOverrides: AWSEncodableShape {
        /// The command to send to the container that overrides the default command from the Docker image or the job definition.  This parameter can't contain an empty string.
        public let command: [String]?
        /// The environment variables to send to the container. You can add new environment variables, which are added to the container at launch, or you can override the existing environment variables from the Docker image or the job definition.  Environment variables cannot start with AWS_BATCH. This naming convention is reserved for variables that Batch sets.
        public let environment: [KeyValuePair]?
        /// A pointer to the container that you want to override. The container's name provides a unique identifier for the container being used.
        public let name: String?
        /// The type and amount of resources to assign to a container. This overrides the settings in the job definition. The supported resources include GPU, MEMORY, and VCPU.
        public let resourceRequirements: [ResourceRequirement]?

        public init(command: [String]? = nil, environment: [KeyValuePair]? = nil, name: String? = nil, resourceRequirements: [ResourceRequirement]? = nil) {
            self.command = command
            self.environment = environment
            self.name = name
            self.resourceRequirements = resourceRequirements
        }

        private enum CodingKeys: String, CodingKey {
            case command = "command"
            case environment = "environment"
            case name = "name"
            case resourceRequirements = "resourceRequirements"
        }
    }

    public struct TaskContainerProperties: AWSEncodableShape & AWSDecodableShape {
        /// The command that's passed to the container. This parameter maps to Cmd in the Create a container section of the Docker Remote API and the COMMAND parameter to docker run. For more information, see Dockerfile reference: CMD.
        public let command: [String]?
        /// A list of containers that this container depends on.
        public let dependsOn: [TaskContainerDependency]?
        /// The environment variables to pass to a container. This parameter maps to Env inthe Create a container section of the Docker Remote API and the --env parameter to docker run.   We don't recommend using plaintext environment variables for sensitive information, such as credential data.   Environment variables cannot start with AWS_BATCH. This naming convention is reserved for variables that Batch sets.
        public let environment: [KeyValuePair]?
        /// If the essential parameter of a container is marked as true, and that container fails or stops for any reason, all other containers that are part of the task are stopped. If the essential parameter of a container is marked as false, its failure doesn't affect the rest of the containers in a task. If this parameter is omitted, a container is assumed to be essential. All jobs must have at least one essential container. If you have an application that's composed of multiple containers, group containers that are used for a common purpose into components, and separate the different components into multiple task definitions. For more information, see Application Architecture in the Amazon Elastic Container Service Developer Guide.
        public let essential: Bool?
        /// The image used to start a container. This string is passed directly to the Docker daemon. By default, images in the Docker Hub registry are available. Other repositories are specified with either repository-url/image:tag or repository-url/image@digest. Up to 255 letters (uppercase and lowercase), numbers, hyphens, underscores, colons, periods, forward slashes, and number signs are allowed. This parameter maps to Image in the Create a container section of the Docker Remote API and the IMAGE parameter of the  docker run .
        public let image: String?
        /// Linux-specific modifications that are applied to the container, such as Linux kernel capabilities. For more information, see KernelCapabilities.
        public let linuxParameters: LinuxParameters?
        /// The log configuration specification for the container. This parameter maps to LogConfig in the Create a container section of the Docker Remote API and the --log-driver option to docker run. By default, containers use the same logging driver that the Docker daemon uses. However the container can use a different logging driver than the Docker daemon by specifying a log driver with this parameter in the container definition. To use a different logging driver for a container, the log system must be configured properly on the container instance (or on a different log server for remote logging options). For more information about the options for different supported log drivers, see Configure logging drivers  in the Docker documentation.  Amazon ECS currently supports a subset of the logging drivers available to the Docker daemon (shown in the LogConfiguration data type). Additional log drivers may be available in future releases of the Amazon ECS container agent.  This parameter requires version 1.18 of the Docker Remote API or greater on your container instance. To check the Docker Remote API version on your container instance, log in to your container instance and run the following command: sudo docker version --format '{{.Server.APIVersion}}'   The Amazon ECS container agent running on a container instance must register the logging drivers available on that instance with the ECS_AVAILABLE_LOGGING_DRIVERS environment variable before containers placed on that instance can use these log configuration options. For more information, see Amazon ECS container agent configuration in the Amazon Elastic Container Service Developer Guide.
        public let logConfiguration: LogConfiguration?
        /// The mount points for data volumes in your container. This parameter maps to Volumes in the Create a container section of the Docker Remote API and the --volume option to docker run. Windows containers can mount whole directories on the same drive as $env:ProgramData. Windows containers can't mount directories on a different drive, and mount point can't be across drives.
        public let mountPoints: [MountPoint]?
        /// The name of a container. The name can be used as a unique identifier to target your dependsOn and Overrides objects.
        public let name: String?
        /// When this parameter is true, the container is given elevated privileges on the host container instance (similar to the root user). This parameter maps to Privileged in the Create a container section of the Docker Remote API and the --privileged option to docker run.  This parameter is not supported for Windows containers or tasks run on Fargate.
        public let privileged: Bool?
        /// When this parameter is true, the container is given read-only access to its root file system. This parameter maps to ReadonlyRootfs in the Create a container section of the Docker Remote API and the --read-only option to docker run.  This parameter is not supported for Windows containers.
        public let readonlyRootFilesystem: Bool?
        /// The private repository authentication credentials to use.
        public let repositoryCredentials: RepositoryCredentials?
        /// The type and amount of a resource to assign to a container. The only supported resource is a GPU.
        public let resourceRequirements: [ResourceRequirement]?
        /// The secrets to pass to the container. For more information, see Specifying Sensitive Data in the Amazon Elastic Container Service Developer Guide.
        public let secrets: [Secret]?
        /// A list of ulimits to set in the container. If a ulimit value is specified in a task definition, it overrides the default values set by Docker. This parameter maps to Ulimits in the Create a container section of the Docker Remote API and the --ulimit option to docker run. Amazon ECS tasks hosted on Fargate use the default resource limit values set by the operating system with the exception of the nofile resource limit parameter which Fargate overrides. The nofile resource limit sets a restriction on the number of open files that a container can use. The default nofile soft limit is 1024 and the default hard limit is 65535. This parameter requires version 1.18 of the Docker Remote API or greater on your container instance. To check the Docker Remote API version on your container instance, log in to your container instance and run the following command: sudo docker version --format '{{.Server.APIVersion}}'   This parameter is not supported for Windows containers.
        public let ulimits: [Ulimit]?
        /// The user to use inside the container. This parameter maps to User in the Create a container section of the Docker Remote API and the --user option to docker run.  When running tasks using the host network mode, don't run containers using the root user (UID 0). We recommend using a non-root user for better security.  You can specify the user using the following formats. If specifying a UID or GID, you must specify it as a positive integer.    user     user:group     uid     uid:gid     user:gi     uid:group     This parameter is not supported for Windows containers.
        public let user: String?

        public init(command: [String]? = nil, dependsOn: [TaskContainerDependency]? = nil, environment: [KeyValuePair]? = nil, essential: Bool? = nil, image: String? = nil, linuxParameters: LinuxParameters? = nil, logConfiguration: LogConfiguration? = nil, mountPoints: [MountPoint]? = nil, name: String? = nil, privileged: Bool? = nil, readonlyRootFilesystem: Bool? = nil, repositoryCredentials: RepositoryCredentials? = nil, resourceRequirements: [ResourceRequirement]? = nil, secrets: [Secret]? = nil, ulimits: [Ulimit]? = nil, user: String? = nil) {
            self.command = command
            self.dependsOn = dependsOn
            self.environment = environment
            self.essential = essential
            self.image = image
            self.linuxParameters = linuxParameters
            self.logConfiguration = logConfiguration
            self.mountPoints = mountPoints
            self.name = name
            self.privileged = privileged
            self.readonlyRootFilesystem = readonlyRootFilesystem
            self.repositoryCredentials = repositoryCredentials
            self.resourceRequirements = resourceRequirements
            self.secrets = secrets
            self.ulimits = ulimits
            self.user = user
        }

        private enum CodingKeys: String, CodingKey {
            case command = "command"
            case dependsOn = "dependsOn"
            case environment = "environment"
            case essential = "essential"
            case image = "image"
            case linuxParameters = "linuxParameters"
            case logConfiguration = "logConfiguration"
            case mountPoints = "mountPoints"
            case name = "name"
            case privileged = "privileged"
            case readonlyRootFilesystem = "readonlyRootFilesystem"
            case repositoryCredentials = "repositoryCredentials"
            case resourceRequirements = "resourceRequirements"
            case secrets = "secrets"
            case ulimits = "ulimits"
            case user = "user"
        }
    }

    public struct TaskPropertiesOverride: AWSEncodableShape {
        /// The overrides for the container definition of a job.
        public let containers: [TaskContainerOverrides]?

        public init(containers: [TaskContainerOverrides]? = nil) {
            self.containers = containers
        }

        private enum CodingKeys: String, CodingKey {
            case containers = "containers"
        }
    }

    public struct TerminateJobRequest: AWSEncodableShape {
        /// The Batch job ID of the job to terminate.
        public let jobId: String?
        /// A message to attach to the job that explains the reason for canceling it. This message is returned by future DescribeJobs operations on the job. This message is also recorded in the Batch activity logs.
        public let reason: String?

        public init(jobId: String? = nil, reason: String? = nil) {
            self.jobId = jobId
            self.reason = reason
        }

        private enum CodingKeys: String, CodingKey {
            case jobId = "jobId"
            case reason = "reason"
        }
    }

    public struct TerminateJobResponse: AWSDecodableShape {
        public init() {}
    }

    public struct Tmpfs: AWSEncodableShape & AWSDecodableShape {
        /// The absolute file path in the container where the tmpfs volume is mounted.
        public let containerPath: String?
        /// The list of tmpfs volume mount options. Valid values: "defaults" | "ro" | "rw" | "suid" | "nosuid" | "dev" | "nodev" | "exec" | "noexec" | "sync" | "async" | "dirsync" | "remount" | "mand" | "nomand" | "atime" | "noatime" | "diratime" | "nodiratime" | "bind" | "rbind" | "unbindable" | "runbindable" | "private" | "rprivate" | "shared" | "rshared" | "slave" | "rslave" | "relatime" | "norelatime" | "strictatime" | "nostrictatime" | "mode" | "uid" | "gid" | "nr_inodes" | "nr_blocks" | "mpol"
        public let mountOptions: [String]?
        /// The size (in MiB) of the tmpfs volume.
        public let size: Int?

        public init(containerPath: String? = nil, mountOptions: [String]? = nil, size: Int? = nil) {
            self.containerPath = containerPath
            self.mountOptions = mountOptions
            self.size = size
        }

        private enum CodingKeys: String, CodingKey {
            case containerPath = "containerPath"
            case mountOptions = "mountOptions"
            case size = "size"
        }
    }

    public struct Ulimit: AWSEncodableShape & AWSDecodableShape {
        /// The hard limit for the ulimit type.
        public let hardLimit: Int?
        /// The type of the ulimit. Valid values are: core | cpu | data | fsize | locks | memlock | msgqueue | nice | nofile | nproc | rss | rtprio | rttime | sigpending | stack.
        public let name: String?
        /// The soft limit for the ulimit type.
        public let softLimit: Int?

        public init(hardLimit: Int? = nil, name: String? = nil, softLimit: Int? = nil) {
            self.hardLimit = hardLimit
            self.name = name
            self.softLimit = softLimit
        }

        private enum CodingKeys: String, CodingKey {
            case hardLimit = "hardLimit"
            case name = "name"
            case softLimit = "softLimit"
        }
    }

    public struct UntagResourceRequest: AWSEncodableShape {
        /// The Amazon Resource Name (ARN) of the resource from which to delete tags. Batch resources that support tags are compute environments, jobs, job definitions, job queues, and scheduling policies. ARNs for child jobs of array and multi-node parallel (MNP) jobs aren't supported.
        public let resourceArn: String
        /// The keys of the tags to be removed.
        public let tagKeys: [String]?

        public init(resourceArn: String, tagKeys: [String]? = nil) {
            self.resourceArn = resourceArn
            self.tagKeys = tagKeys
        }

        public func encode(to encoder: Encoder) throws {
            let request = encoder.userInfo[.awsRequest]! as! RequestEncodingContainer
            _ = encoder.container(keyedBy: CodingKeys.self)
            request.encodePath(self.resourceArn, key: "resourceArn")
            request.encodeQuery(self.tagKeys, key: "tagKeys")
        }

        public func validate(name: String) throws {
            try self.tagKeys?.forEach {
                try validate($0, name: "tagKeys[]", parent: name, max: 128)
                try validate($0, name: "tagKeys[]", parent: name, min: 1)
            }
            try self.validate(self.tagKeys, name: "tagKeys", parent: name, max: 50)
            try self.validate(self.tagKeys, name: "tagKeys", parent: name, min: 1)
        }

        private enum CodingKeys: CodingKey {}
    }

    public struct UntagResourceResponse: AWSDecodableShape {
        public init() {}
    }

    public struct UpdateComputeEnvironmentRequest: AWSEncodableShape {
        /// The name or full Amazon Resource Name (ARN) of the compute environment to update.
        public let computeEnvironment: String?
        /// Details of the compute resources managed by the compute environment. Required for a managed compute environment. For more information, see Compute Environments in the Batch User Guide.
        public let computeResources: ComputeResourceUpdate?
        /// The full Amazon Resource Name (ARN) of the IAM role that allows Batch to make calls to other Amazon Web Services services on your behalf. For more information, see Batch service IAM role in the Batch User Guide.  If the compute environment has a service-linked role, it can't be changed to use a regular IAM role. Likewise, if the compute environment has a regular IAM role, it can't be changed to use a service-linked role. To update the parameters for the compute environment that require an infrastructure update to change, the AWSServiceRoleForBatch service-linked role must be used. For more information, see Updating compute environments in the Batch User Guide.  If your specified role has a path other than /, then you must either specify the full role ARN (recommended) or prefix the role name with the path.  Depending on how you created your Batch service role, its ARN might contain the service-role path prefix. When you only specify the name of the service role, Batch assumes that your ARN doesn't use the service-role path prefix. Because of this, we recommend that you specify the full ARN of your service role when you create compute environments.
        public let serviceRole: String?
        /// The state of the compute environment. Compute environments in the ENABLED state can accept jobs from a queue and scale in or out automatically based on the workload demand of its associated queues. If the state is ENABLED, then the Batch scheduler can attempt to place jobs from an associated job queue on the compute resources within the environment. If the compute environment is managed, then it can scale its instances out or in automatically, based on the job queue demand. If the state is DISABLED, then the Batch scheduler doesn't attempt to place jobs within the environment. Jobs in a STARTING or RUNNING state continue to progress normally. Managed compute environments in the DISABLED state don't scale out.   Compute environments in a DISABLED state may continue to incur billing charges. To prevent additional charges, turn off and then delete the compute environment. For more information, see State in the Batch User Guide.  When an instance is idle, the instance scales down to the minvCpus value. However, the instance size doesn't change. For example, consider a c5.8xlarge instance with a minvCpus value of 4 and a desiredvCpus value of 36. This instance doesn't scale down to a c5.large instance.
        public let state: CEState?
        /// The maximum number of vCPUs expected to be used for an unmanaged compute environment. Don't specify this parameter for a managed compute environment. This parameter is only used for fair share scheduling to reserve vCPU capacity for new share identifiers. If this parameter isn't provided for a fair share job queue, no vCPU capacity is reserved.
        public let unmanagedvCpus: Int?
        /// Specifies the updated infrastructure update policy for the compute environment. For more information about infrastructure updates, see Updating compute environments in the Batch User Guide.
        public let updatePolicy: UpdatePolicy?

        public init(computeEnvironment: String? = nil, computeResources: ComputeResourceUpdate? = nil, serviceRole: String? = nil, state: CEState? = nil, unmanagedvCpus: Int? = nil, updatePolicy: UpdatePolicy? = nil) {
            self.computeEnvironment = computeEnvironment
            self.computeResources = computeResources
            self.serviceRole = serviceRole
            self.state = state
            self.unmanagedvCpus = unmanagedvCpus
            self.updatePolicy = updatePolicy
        }

        public func validate(name: String) throws {
            try self.computeResources?.validate(name: "\(name).computeResources")
            try self.updatePolicy?.validate(name: "\(name).updatePolicy")
        }

        private enum CodingKeys: String, CodingKey {
            case computeEnvironment = "computeEnvironment"
            case computeResources = "computeResources"
            case serviceRole = "serviceRole"
            case state = "state"
            case unmanagedvCpus = "unmanagedvCpus"
            case updatePolicy = "updatePolicy"
        }
    }

    public struct UpdateComputeEnvironmentResponse: AWSDecodableShape {
        /// The Amazon Resource Name (ARN) of the compute environment.
        public let computeEnvironmentArn: String?
        /// The name of the compute environment. It can be up to 128 characters long. It can contain uppercase and lowercase letters, numbers, hyphens (-), and underscores (_).
        public let computeEnvironmentName: String?

        public init(computeEnvironmentArn: String? = nil, computeEnvironmentName: String? = nil) {
            self.computeEnvironmentArn = computeEnvironmentArn
            self.computeEnvironmentName = computeEnvironmentName
        }

        private enum CodingKeys: String, CodingKey {
            case computeEnvironmentArn = "computeEnvironmentArn"
            case computeEnvironmentName = "computeEnvironmentName"
        }
    }

    public struct UpdateJobQueueRequest: AWSEncodableShape {
        /// Details the set of compute environments mapped to a job queue and their order relative to each other. This is one of the parameters used by the job scheduler to determine which compute environment runs a given job. Compute environments must be in the VALID state before you can associate them with a job queue. All of the compute environments must be either EC2 (EC2 or SPOT) or Fargate (FARGATE or FARGATE_SPOT). EC2 and Fargate compute environments can't be mixed.  All compute environments that are associated with a job queue must share the same architecture. Batch doesn't support mixing compute environment architecture types in a single job queue.
        public let computeEnvironmentOrder: [ComputeEnvironmentOrder]?
        /// The name or the Amazon Resource Name (ARN) of the job queue.
        public let jobQueue: String?
        /// The set of actions that Batch perform on jobs that remain at the head of the job queue in the specified state longer than specified times. Batch will perform each action after maxTimeSeconds has passed.
        public let jobStateTimeLimitActions: [JobStateTimeLimitAction]?
        /// The priority of the job queue. Job queues with a higher priority (or a higher integer value for the priority parameter) are evaluated first when associated with the same compute environment. Priority is determined in descending order. For example, a job queue with a priority value of 10 is given scheduling preference over a job queue with a priority value of 1. All of the compute environments must be either EC2 (EC2 or SPOT) or Fargate (FARGATE or FARGATE_SPOT). EC2 and Fargate compute environments can't be mixed.
        public let priority: Int?
        /// Amazon Resource Name (ARN) of the fair share scheduling policy. Once a job queue is created, the fair share scheduling policy can be replaced but not removed. The format is aws:Partition:batch:Region:Account:scheduling-policy/Name . For example, aws:aws:batch:us-west-2:123456789012:scheduling-policy/MySchedulingPolicy.
        public let schedulingPolicyArn: String?
        /// Describes the queue's ability to accept new jobs. If the job queue state is ENABLED, it can accept jobs. If the job queue state is DISABLED, new jobs can't be added to the queue, but jobs already in the queue can finish.
        public let state: JQState?

        public init(computeEnvironmentOrder: [ComputeEnvironmentOrder]? = nil, jobQueue: String? = nil, jobStateTimeLimitActions: [JobStateTimeLimitAction]? = nil, priority: Int? = nil, schedulingPolicyArn: String? = nil, state: JQState? = nil) {
            self.computeEnvironmentOrder = computeEnvironmentOrder
            self.jobQueue = jobQueue
            self.jobStateTimeLimitActions = jobStateTimeLimitActions
            self.priority = priority
            self.schedulingPolicyArn = schedulingPolicyArn
            self.state = state
        }

        private enum CodingKeys: String, CodingKey {
            case computeEnvironmentOrder = "computeEnvironmentOrder"
            case jobQueue = "jobQueue"
            case jobStateTimeLimitActions = "jobStateTimeLimitActions"
            case priority = "priority"
            case schedulingPolicyArn = "schedulingPolicyArn"
            case state = "state"
        }
    }

    public struct UpdateJobQueueResponse: AWSDecodableShape {
        /// The Amazon Resource Name (ARN) of the job queue.
        public let jobQueueArn: String?
        /// The name of the job queue.
        public let jobQueueName: String?

        public init(jobQueueArn: String? = nil, jobQueueName: String? = nil) {
            self.jobQueueArn = jobQueueArn
            self.jobQueueName = jobQueueName
        }

        private enum CodingKeys: String, CodingKey {
            case jobQueueArn = "jobQueueArn"
            case jobQueueName = "jobQueueName"
        }
    }

    public struct UpdatePolicy: AWSEncodableShape & AWSDecodableShape {
        /// Specifies the job timeout (in minutes) when the compute environment infrastructure is updated. The default value is 30.
        public let jobExecutionTimeoutMinutes: Int64?
        /// Specifies whether jobs are automatically terminated when the computer environment infrastructure is updated. The default value is false.
        public let terminateJobsOnUpdate: Bool?

        public init(jobExecutionTimeoutMinutes: Int64? = nil, terminateJobsOnUpdate: Bool? = nil) {
            self.jobExecutionTimeoutMinutes = jobExecutionTimeoutMinutes
            self.terminateJobsOnUpdate = terminateJobsOnUpdate
        }

        public func validate(name: String) throws {
            try self.validate(self.jobExecutionTimeoutMinutes, name: "jobExecutionTimeoutMinutes", parent: name, max: 360)
            try self.validate(self.jobExecutionTimeoutMinutes, name: "jobExecutionTimeoutMinutes", parent: name, min: 1)
        }

        private enum CodingKeys: String, CodingKey {
            case jobExecutionTimeoutMinutes = "jobExecutionTimeoutMinutes"
            case terminateJobsOnUpdate = "terminateJobsOnUpdate"
        }
    }

    public struct UpdateSchedulingPolicyRequest: AWSEncodableShape {
        /// The Amazon Resource Name (ARN) of the scheduling policy to update.
        public let arn: String?
        /// The fair share policy.
        public let fairsharePolicy: FairsharePolicy?

        public init(arn: String? = nil, fairsharePolicy: FairsharePolicy? = nil) {
            self.arn = arn
            self.fairsharePolicy = fairsharePolicy
        }

        private enum CodingKeys: String, CodingKey {
            case arn = "arn"
            case fairsharePolicy = "fairsharePolicy"
        }
    }

    public struct UpdateSchedulingPolicyResponse: AWSDecodableShape {
        public init() {}
    }

    public struct Volume: AWSEncodableShape & AWSDecodableShape {
        /// This parameter is specified when you're using an Amazon Elastic File System file system for job storage. Jobs that are running on Fargate resources must specify a platformVersion of at least 1.4.0.
        public let efsVolumeConfiguration: EFSVolumeConfiguration?
        /// The contents of the host parameter determine whether your data volume persists on the host container instance and where it's stored. If the host parameter is empty, then the Docker daemon assigns a host path for your data volume. However, the data isn't guaranteed to persist after the containers that are associated with it stop running.  This parameter isn't applicable to jobs that are running on Fargate resources and shouldn't be provided.
        public let host: Host?
        /// The name of the volume. It can be up to 255 characters long. It can contain uppercase and lowercase letters, numbers, hyphens (-), and underscores (_). This name is referenced in the sourceVolume parameter of container definition mountPoints.
        public let name: String?

        public init(efsVolumeConfiguration: EFSVolumeConfiguration? = nil, host: Host? = nil, name: String? = nil) {
            self.efsVolumeConfiguration = efsVolumeConfiguration
            self.host = host
            self.name = name
        }

        private enum CodingKeys: String, CodingKey {
            case efsVolumeConfiguration = "efsVolumeConfiguration"
            case host = "host"
            case name = "name"
        }
    }
}

// MARK: - Errors

/// Error enum for Batch
public struct BatchErrorType: AWSErrorType {
    enum Code: String {
        case clientException = "ClientException"
        case serverException = "ServerException"
    }

    private let error: Code
    public let context: AWSErrorContext?

    /// initialize Batch
    public init?(errorCode: String, context: AWSErrorContext) {
        guard let error = Code(rawValue: errorCode) else { return nil }
        self.error = error
        self.context = context
    }

    internal init(_ error: Code) {
        self.error = error
        self.context = nil
    }

    /// return error code string
    public var errorCode: String { self.error.rawValue }

    /// These errors are usually caused by a client action. One example cause is using an action or resource on behalf of a user that doesn't have permissions to use the action or resource. Another cause is specifying an identifier that's not valid.
    public static var clientException: Self { .init(.clientException) }
    /// These errors are usually caused by a server issue.
    public static var serverException: Self { .init(.serverException) }
}

extension BatchErrorType: Equatable {
    public static func == (lhs: BatchErrorType, rhs: BatchErrorType) -> Bool {
        lhs.error == rhs.error
    }
}

extension BatchErrorType: CustomStringConvertible {
    public var description: String {
        return "\(self.error.rawValue): \(self.message ?? "")"
    }
}
