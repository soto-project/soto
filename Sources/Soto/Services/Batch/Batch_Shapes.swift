//===----------------------------------------------------------------------===//
//
// This source file is part of the Soto for AWS open source project
//
// Copyright (c) 2017-2021 the Soto project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
// See CONTRIBUTORS.txt for the list of Soto project authors
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by https://github.com/soto-project/soto/tree/main/CodeGenerator. DO NOT EDIT.

import Foundation
import SotoCore

extension Batch {
    // MARK: Enums

    public enum ArrayJobDependency: String, CustomStringConvertible, Codable {
        case nToN = "N_TO_N"
        case sequential = "SEQUENTIAL"
        public var description: String { return self.rawValue }
    }

    public enum AssignPublicIp: String, CustomStringConvertible, Codable {
        case disabled = "DISABLED"
        case enabled = "ENABLED"
        public var description: String { return self.rawValue }
    }

    public enum CEState: String, CustomStringConvertible, Codable {
        case disabled = "DISABLED"
        case enabled = "ENABLED"
        public var description: String { return self.rawValue }
    }

    public enum CEStatus: String, CustomStringConvertible, Codable {
        case creating = "CREATING"
        case deleted = "DELETED"
        case deleting = "DELETING"
        case invalid = "INVALID"
        case updating = "UPDATING"
        case valid = "VALID"
        public var description: String { return self.rawValue }
    }

    public enum CEType: String, CustomStringConvertible, Codable {
        case managed = "MANAGED"
        case unmanaged = "UNMANAGED"
        public var description: String { return self.rawValue }
    }

    public enum CRAllocationStrategy: String, CustomStringConvertible, Codable {
        case bestFit = "BEST_FIT"
        case bestFitProgressive = "BEST_FIT_PROGRESSIVE"
        case spotCapacityOptimized = "SPOT_CAPACITY_OPTIMIZED"
        public var description: String { return self.rawValue }
    }

    public enum CRType: String, CustomStringConvertible, Codable {
        case ec2 = "EC2"
        case fargate = "FARGATE"
        case fargateSpot = "FARGATE_SPOT"
        case spot = "SPOT"
        public var description: String { return self.rawValue }
    }

    public enum DeviceCgroupPermission: String, CustomStringConvertible, Codable {
        case mknod = "MKNOD"
        case read = "READ"
        case write = "WRITE"
        public var description: String { return self.rawValue }
    }

    public enum EFSAuthorizationConfigIAM: String, CustomStringConvertible, Codable {
        case disabled = "DISABLED"
        case enabled = "ENABLED"
        public var description: String { return self.rawValue }
    }

    public enum EFSTransitEncryption: String, CustomStringConvertible, Codable {
        case disabled = "DISABLED"
        case enabled = "ENABLED"
        public var description: String { return self.rawValue }
    }

    public enum JQState: String, CustomStringConvertible, Codable {
        case disabled = "DISABLED"
        case enabled = "ENABLED"
        public var description: String { return self.rawValue }
    }

    public enum JQStatus: String, CustomStringConvertible, Codable {
        case creating = "CREATING"
        case deleted = "DELETED"
        case deleting = "DELETING"
        case invalid = "INVALID"
        case updating = "UPDATING"
        case valid = "VALID"
        public var description: String { return self.rawValue }
    }

    public enum JobDefinitionType: String, CustomStringConvertible, Codable {
        case container
        case multinode
        public var description: String { return self.rawValue }
    }

    public enum JobStatus: String, CustomStringConvertible, Codable {
        case failed = "FAILED"
        case pending = "PENDING"
        case runnable = "RUNNABLE"
        case running = "RUNNING"
        case starting = "STARTING"
        case submitted = "SUBMITTED"
        case succeeded = "SUCCEEDED"
        public var description: String { return self.rawValue }
    }

    public enum LogDriver: String, CustomStringConvertible, Codable {
        case awslogs
        case fluentd
        case gelf
        case journald
        case jsonFile = "json-file"
        case splunk
        case syslog
        public var description: String { return self.rawValue }
    }

    public enum PlatformCapability: String, CustomStringConvertible, Codable {
        case ec2 = "EC2"
        case fargate = "FARGATE"
        public var description: String { return self.rawValue }
    }

    public enum ResourceType: String, CustomStringConvertible, Codable {
        case gpu = "GPU"
        case memory = "MEMORY"
        case vcpu = "VCPU"
        public var description: String { return self.rawValue }
    }

    public enum RetryAction: String, CustomStringConvertible, Codable {
        case exit = "EXIT"
        case retry = "RETRY"
        public var description: String { return self.rawValue }
    }

    // MARK: Shapes

    public struct ArrayProperties: AWSEncodableShape {
        /// The size of the array job.
        public let size: Int?

        public init(size: Int? = nil) {
            self.size = size
        }

        private enum CodingKeys: String, CodingKey {
            case size
        }
    }

    public struct ArrayPropertiesDetail: AWSDecodableShape {
        /// The job index within the array that's associated with this job. This parameter is returned for array job children.
        public let index: Int?
        /// The size of the array job. This parameter is returned for parent array jobs.
        public let size: Int?
        /// A summary of the number of array job children in each available job status. This parameter is returned for parent array jobs.
        public let statusSummary: [String: Int]?

        public init(index: Int? = nil, size: Int? = nil, statusSummary: [String: Int]? = nil) {
            self.index = index
            self.size = size
            self.statusSummary = statusSummary
        }

        private enum CodingKeys: String, CodingKey {
            case index
            case size
            case statusSummary
        }
    }

    public struct ArrayPropertiesSummary: AWSDecodableShape {
        /// The job index within the array that's associated with this job. This parameter is returned for children of array jobs.
        public let index: Int?
        /// The size of the array job. This parameter is returned for parent array jobs.
        public let size: Int?

        public init(index: Int? = nil, size: Int? = nil) {
            self.index = index
            self.size = size
        }

        private enum CodingKeys: String, CodingKey {
            case index
            case size
        }
    }

    public struct AttemptContainerDetail: AWSDecodableShape {
        /// The Amazon Resource Name (ARN) of the Amazon ECS container instance that hosts the job attempt.
        public let containerInstanceArn: String?
        /// The exit code for the job attempt. A non-zero exit code is considered a failure.
        public let exitCode: Int?
        /// The name of the CloudWatch Logs log stream associated with the container. The log group for Batch jobs is /aws/batch/job. Each container attempt receives a log stream name when they reach the RUNNING status.
        public let logStreamName: String?
        /// The network interfaces associated with the job attempt.
        public let networkInterfaces: [NetworkInterface]?
        /// A short (255 max characters) human-readable string to provide additional details about a running or stopped container.
        public let reason: String?
        /// The Amazon Resource Name (ARN) of the Amazon ECS task that's associated with the job attempt. Each container attempt receives a task ARN when they reach the STARTING status.
        public let taskArn: String?

        public init(containerInstanceArn: String? = nil, exitCode: Int? = nil, logStreamName: String? = nil, networkInterfaces: [NetworkInterface]? = nil, reason: String? = nil, taskArn: String? = nil) {
            self.containerInstanceArn = containerInstanceArn
            self.exitCode = exitCode
            self.logStreamName = logStreamName
            self.networkInterfaces = networkInterfaces
            self.reason = reason
            self.taskArn = taskArn
        }

        private enum CodingKeys: String, CodingKey {
            case containerInstanceArn
            case exitCode
            case logStreamName
            case networkInterfaces
            case reason
            case taskArn
        }
    }

    public struct AttemptDetail: AWSDecodableShape {
        /// Details about the container in this job attempt.
        public let container: AttemptContainerDetail?
        /// The Unix timestamp (in milliseconds) for when the attempt was started (when the attempt transitioned from the STARTING state to the RUNNING state).
        public let startedAt: Int64?
        /// A short, human-readable string to provide additional details about the current status of the job attempt.
        public let statusReason: String?
        /// The Unix timestamp (in milliseconds) for when the attempt was stopped (when the attempt transitioned from the RUNNING state to a terminal state, such as SUCCEEDED or FAILED).
        public let stoppedAt: Int64?

        public init(container: AttemptContainerDetail? = nil, startedAt: Int64? = nil, statusReason: String? = nil, stoppedAt: Int64? = nil) {
            self.container = container
            self.startedAt = startedAt
            self.statusReason = statusReason
            self.stoppedAt = stoppedAt
        }

        private enum CodingKeys: String, CodingKey {
            case container
            case startedAt
            case statusReason
            case stoppedAt
        }
    }

    public struct CancelJobRequest: AWSEncodableShape {
        /// The Batch job ID of the job to cancel.
        public let jobId: String
        /// A message to attach to the job that explains the reason for canceling it. This message is returned by future DescribeJobs operations on the job. This message is also recorded in the Batch activity logs.
        public let reason: String

        public init(jobId: String, reason: String) {
            self.jobId = jobId
            self.reason = reason
        }

        private enum CodingKeys: String, CodingKey {
            case jobId
            case reason
        }
    }

    public struct CancelJobResponse: AWSDecodableShape {
        public init() {}
    }

    public struct ComputeEnvironmentDetail: AWSDecodableShape {
        /// The Amazon Resource Name (ARN) of the compute environment.
        public let computeEnvironmentArn: String
        /// The name of the compute environment. Up to 128 letters (uppercase and lowercase), numbers, hyphens, and underscores are allowed.
        public let computeEnvironmentName: String
        /// The compute resources defined for the compute environment. For more information, see Compute Environments in the Batch User Guide.
        public let computeResources: ComputeResource?
        /// The Amazon Resource Name (ARN) of the underlying Amazon ECS cluster used by the compute environment.
        public let ecsClusterArn: String
        /// The service role associated with the compute environment that allows Batch to make calls to Amazon Web Services API operations on your behalf. For more information, see Batch service IAM role in the Batch User Guide.
        public let serviceRole: String?
        /// The state of the compute environment. The valid values are ENABLED or DISABLED. If the state is ENABLED, then the Batch scheduler can attempt to place jobs from an associated job queue on the compute resources within the environment. If the compute environment is managed, then it can scale its instances out or in automatically, based on the job queue demand. If the state is DISABLED, then the Batch scheduler doesn't attempt to place jobs within the environment. Jobs in a STARTING or RUNNING state continue to progress normally. Managed compute environments in the DISABLED state don't scale out. However, they scale in to minvCpus value after instances become idle.
        public let state: CEState?
        /// The current status of the compute environment (for example, CREATING or VALID).
        public let status: CEStatus?
        /// A short, human-readable string to provide additional details about the current status of the compute environment.
        public let statusReason: String?
        /// The tags applied to the compute environment.
        public let tags: [String: String]?
        /// The type of the compute environment: MANAGED or UNMANAGED. For more information, see Compute Environments in the Batch User Guide.
        public let type: CEType?

        public init(computeEnvironmentArn: String, computeEnvironmentName: String, computeResources: ComputeResource? = nil, ecsClusterArn: String, serviceRole: String? = nil, state: CEState? = nil, status: CEStatus? = nil, statusReason: String? = nil, tags: [String: String]? = nil, type: CEType? = nil) {
            self.computeEnvironmentArn = computeEnvironmentArn
            self.computeEnvironmentName = computeEnvironmentName
            self.computeResources = computeResources
            self.ecsClusterArn = ecsClusterArn
            self.serviceRole = serviceRole
            self.state = state
            self.status = status
            self.statusReason = statusReason
            self.tags = tags
            self.type = type
        }

        private enum CodingKeys: String, CodingKey {
            case computeEnvironmentArn
            case computeEnvironmentName
            case computeResources
            case ecsClusterArn
            case serviceRole
            case state
            case status
            case statusReason
            case tags
            case type
        }
    }

    public struct ComputeEnvironmentOrder: AWSEncodableShape & AWSDecodableShape {
        /// The Amazon Resource Name (ARN) of the compute environment.
        public let computeEnvironment: String
        /// The order of the compute environment. Compute environments are tried in ascending order. For example, if two compute environments are associated with a job queue, the compute environment with a lower order integer value is tried for job placement first.
        public let order: Int

        public init(computeEnvironment: String, order: Int) {
            self.computeEnvironment = computeEnvironment
            self.order = order
        }

        private enum CodingKeys: String, CodingKey {
            case computeEnvironment
            case order
        }
    }

    public struct ComputeResource: AWSEncodableShape & AWSDecodableShape {
        /// The allocation strategy to use for the compute resource if not enough instances of the best fitting instance type can be allocated. This might be because of availability of the instance type in the Region or Amazon EC2 service limits. For more information, see Allocation Strategies in the Batch User Guide.  This parameter isn't applicable to jobs that are running on Fargate resources, and shouldn't be specified.   BEST_FIT (default)  Batch selects an instance type that best fits the needs of the jobs with a preference for the lowest-cost instance type. If additional instances of the selected instance type aren't available, Batch waits for the additional instances to be available. If there aren't enough instances available, or if the user is reaching Amazon EC2 service limits then additional jobs aren't run until the currently running jobs have completed. This allocation strategy keeps costs lower but can limit scaling. If you are using Spot Fleets with BEST_FIT then the Spot Fleet IAM Role must be specified.  BEST_FIT_PROGRESSIVE  Batch will select additional instance types that are large enough to meet the requirements of the jobs in the queue, with a preference for instance types with a lower cost per unit vCPU. If additional instances of the previously selected instance types aren't available, Batch will select new instance types.  SPOT_CAPACITY_OPTIMIZED  Batch will select one or more instance types that are large enough to meet the requirements of the jobs in the queue, with a preference for instance types that are less likely to be interrupted. This allocation strategy is only available for Spot Instance compute resources.   With both BEST_FIT_PROGRESSIVE and SPOT_CAPACITY_OPTIMIZED strategies, Batch might need to go above maxvCpus to meet your capacity requirements. In this event, Batch never exceeds maxvCpus by more than a single instance.
        public let allocationStrategy: CRAllocationStrategy?
        /// The maximum percentage that a Spot Instance price can be when compared with the On-Demand price for that instance type before instances are launched. For example, if your maximum percentage is 20%, then the Spot price must be less than 20% of the current On-Demand price for that Amazon EC2 instance. You always pay the lowest (market) price and never more than your maximum percentage. If you leave this field empty, the default value is 100% of the On-Demand price.  This parameter isn't applicable to jobs that are running on Fargate resources, and shouldn't be specified.
        public let bidPercentage: Int?
        /// The desired number of Amazon EC2 vCPUS in the compute environment. Batch modifies this value between the minimum and maximum values, based on job queue demand.  This parameter isn't applicable to jobs that are running on Fargate resources, and shouldn't be specified.
        public let desiredvCpus: Int?
        /// Provides information used to select Amazon Machine Images (AMIs) for EC2 instances in the compute environment. If Ec2Configuration isn't specified, the default is ECS_AL1.  This parameter isn't applicable to jobs that are running on Fargate resources, and shouldn't be specified.
        public let ec2Configuration: [Ec2Configuration]?
        /// The Amazon EC2 key pair that's used for instances launched in the compute environment. You can use this key pair to log in to your instances with SSH.  This parameter isn't applicable to jobs that are running on Fargate resources, and shouldn't be specified.
        public let ec2KeyPair: String?
        /// The Amazon ECS instance profile applied to Amazon EC2 instances in a compute environment. You can specify the short name or full Amazon Resource Name (ARN) of an instance profile. For example,  ecsInstanceRole  or arn:aws:iam::&lt;aws_account_id&gt;:instance-profile/ecsInstanceRole . For more information, see Amazon ECS Instance Role in the Batch User Guide.  This parameter isn't applicable to jobs that are running on Fargate resources, and shouldn't be specified.
        public let instanceRole: String?
        /// The instances types that can be launched. You can specify instance families to launch any instance type within those families (for example, c5 or p3), or you can specify specific sizes within a family (such as c5.8xlarge). You can also choose optimal to select instance types (from the C4, M4, and R4 instance families) that match the demand of your job queues.  This parameter isn't applicable to jobs that are running on Fargate resources, and shouldn't be specified.   When you create a compute environment, the instance types that you select for the compute environment must share the same architecture. For example, you can't mix x86 and ARM instances in the same compute environment.   Currently, optimal uses instance types from the C4, M4, and R4 instance families. In Regions that don't have instance types from those instance families, instance types from the C5, M5. and R5 instance families are used.
        public let instanceTypes: [String]?
        /// The launch template to use for your compute resources. Any other compute resource parameters that you specify in a CreateComputeEnvironment API operation override the same parameters in the launch template. You must specify either the launch template ID or launch template name in the request, but not both. For more information, see Launch Template Support in the Batch User Guide.  This parameter isn't applicable to jobs that are running on Fargate resources, and shouldn't be specified.
        public let launchTemplate: LaunchTemplateSpecification?
        /// The maximum number of Amazon EC2 vCPUs that a compute environment can reach.  With both BEST_FIT_PROGRESSIVE and SPOT_CAPACITY_OPTIMIZED allocation strategies, Batch might need to exceed maxvCpus to meet your capacity requirements. In this event, Batch never exceeds maxvCpus by more than a single instance. For example, no more than a single instance from among those specified in your compute environment is allocated.
        public let maxvCpus: Int
        /// The minimum number of Amazon EC2 vCPUs that an environment should maintain (even if the compute environment is DISABLED).  This parameter isn't applicable to jobs that are running on Fargate resources, and shouldn't be specified.
        public let minvCpus: Int?
        /// The Amazon EC2 placement group to associate with your compute resources. If you intend to submit multi-node parallel jobs to your compute environment, you should consider creating a cluster placement group and associate it with your compute resources. This keeps your multi-node parallel job on a logical grouping of instances within a single Availability Zone with high network flow potential. For more information, see Placement Groups in the Amazon EC2 User Guide for Linux Instances.  This parameter isn't applicable to jobs that are running on Fargate resources, and shouldn't be specified.
        public let placementGroup: String?
        /// The Amazon EC2 security groups associated with instances launched in the compute environment. One or more security groups must be specified, either in securityGroupIds or using a launch template referenced in launchTemplate. This parameter is required for jobs that are running on Fargate resources and must contain at least one security group. Fargate doesn't support launch templates. If security groups are specified using both securityGroupIds and launchTemplate, the values in securityGroupIds are used.
        public let securityGroupIds: [String]?
        /// The Amazon Resource Name (ARN) of the Amazon EC2 Spot Fleet IAM role applied to a SPOT compute environment. This role is required if the allocation strategy set to BEST_FIT or if the allocation strategy isn't specified. For more information, see Amazon EC2 Spot Fleet Role in the Batch User Guide.  This parameter isn't applicable to jobs that are running on Fargate resources, and shouldn't be specified.   To tag your Spot Instances on creation, the Spot Fleet IAM role specified here must use the newer AmazonEC2SpotFleetTaggingRole managed policy. The previously recommended AmazonEC2SpotFleetRole managed policy doesn't have the required permissions to tag Spot Instances. For more information, see Spot Instances not tagged on creation in the Batch User Guide.
        public let spotIamFleetRole: String?
        /// The VPC subnets where the compute resources are launched. These subnets must be within the same VPC. Fargate compute resources can contain up to 16 subnets. For more information, see VPCs and Subnets in the Amazon VPC User Guide.
        public let subnets: [String]
        /// Key-value pair tags to be applied to EC2 resources that are launched in the compute environment. For Batch, these take the form of "String1": "String2", where String1 is the tag key and String2 is the tag value−for example, { "Name": "Batch Instance - C4OnDemand" }. This is helpful for recognizing your Batch instances in the Amazon EC2 console. These tags can't be updated or removed after the compute environment is created.Aany changes to these tags require that you create a new compute environment and remove the old compute environment. These tags aren't seen when using the Batch ListTagsForResource API operation.  This parameter isn't applicable to jobs that are running on Fargate resources, and shouldn't be specified.
        public let tags: [String: String]?
        /// The type of compute environment: EC2, SPOT, FARGATE, or FARGATE_SPOT. For more information, see Compute Environments in the Batch User Guide.  If you choose SPOT, you must also specify an Amazon EC2 Spot Fleet role with the spotIamFleetRole parameter. For more information, see Amazon EC2 Spot Fleet role in the Batch User Guide.
        public let type: CRType

        public init(allocationStrategy: CRAllocationStrategy? = nil, bidPercentage: Int? = nil, desiredvCpus: Int? = nil, ec2Configuration: [Ec2Configuration]? = nil, ec2KeyPair: String? = nil, instanceRole: String? = nil, instanceTypes: [String]? = nil, launchTemplate: LaunchTemplateSpecification? = nil, maxvCpus: Int, minvCpus: Int? = nil, placementGroup: String? = nil, securityGroupIds: [String]? = nil, spotIamFleetRole: String? = nil, subnets: [String], tags: [String: String]? = nil, type: CRType) {
            self.allocationStrategy = allocationStrategy
            self.bidPercentage = bidPercentage
            self.desiredvCpus = desiredvCpus
            self.ec2Configuration = ec2Configuration
            self.ec2KeyPair = ec2KeyPair
            self.instanceRole = instanceRole
            self.instanceTypes = instanceTypes
            self.launchTemplate = launchTemplate
            self.maxvCpus = maxvCpus
            self.minvCpus = minvCpus
            self.placementGroup = placementGroup
            self.securityGroupIds = securityGroupIds
            self.spotIamFleetRole = spotIamFleetRole
            self.subnets = subnets
            self.tags = tags
            self.type = type
        }

        public func validate(name: String) throws {
            try self.ec2Configuration?.forEach {
                try $0.validate(name: "\(name).ec2Configuration[]")
            }
        }

        private enum CodingKeys: String, CodingKey {
            case allocationStrategy
            case bidPercentage
            case desiredvCpus
            case ec2Configuration
            case ec2KeyPair
            case instanceRole
            case instanceTypes
            case launchTemplate
            case maxvCpus
            case minvCpus
            case placementGroup
            case securityGroupIds
            case spotIamFleetRole
            case subnets
            case tags
            case type
        }
    }

    public struct ComputeResourceUpdate: AWSEncodableShape {
        /// The desired number of Amazon EC2 vCPUS in the compute environment.  This parameter isn't applicable to jobs that are running on Fargate resources, and shouldn't be specified.
        public let desiredvCpus: Int?
        /// The maximum number of Amazon EC2 vCPUs that an environment can reach.  With both BEST_FIT_PROGRESSIVE and SPOT_CAPACITY_OPTIMIZED allocation strategies, Batch might need to exceed maxvCpus to meet your capacity requirements. In this event, Batch never exceeds maxvCpus by more than a single instance. That is, no more than a single instance from among those specified in your compute environment.
        public let maxvCpus: Int?
        /// The minimum number of Amazon EC2 vCPUs that an environment should maintain.  This parameter isn't applicable to jobs that are running on Fargate resources, and shouldn't be specified.
        public let minvCpus: Int?
        /// The Amazon EC2 security groups associated with instances launched in the compute environment. This parameter is required for Fargate compute resources, where it can contain up to 5 security groups. This can't be specified for EC2 compute resources. Providing an empty list is handled as if this parameter wasn't specified and no change is made.
        public let securityGroupIds: [String]?
        /// The VPC subnets where the compute resources are launched. Fargate compute resources can contain up to 16 subnets. Providing an empty list will be handled as if this parameter wasn't specified and no change is made. This can't be specified for EC2 compute resources. For more information, see VPCs and Subnets in the Amazon VPC User Guide.
        public let subnets: [String]?

        public init(desiredvCpus: Int? = nil, maxvCpus: Int? = nil, minvCpus: Int? = nil, securityGroupIds: [String]? = nil, subnets: [String]? = nil) {
            self.desiredvCpus = desiredvCpus
            self.maxvCpus = maxvCpus
            self.minvCpus = minvCpus
            self.securityGroupIds = securityGroupIds
            self.subnets = subnets
        }

        private enum CodingKeys: String, CodingKey {
            case desiredvCpus
            case maxvCpus
            case minvCpus
            case securityGroupIds
            case subnets
        }
    }

    public struct ContainerDetail: AWSDecodableShape {
        /// The command that's passed to the container.
        public let command: [String]?
        /// The Amazon Resource Name (ARN) of the container instance that the container is running on.
        public let containerInstanceArn: String?
        /// The environment variables to pass to a container.  Environment variables must not start with AWS_BATCH; this naming convention is reserved for variables that are set by the Batch service.
        public let environment: [KeyValuePair]?
        /// The Amazon Resource Name (ARN) of the execution role that Batch can assume. For more information, see Batch execution IAM role in the Batch User Guide.
        public let executionRoleArn: String?
        /// The exit code to return upon completion.
        public let exitCode: Int?
        /// The platform configuration for jobs that are running on Fargate resources. Jobs that are running on EC2 resources must not specify this parameter.
        public let fargatePlatformConfiguration: FargatePlatformConfiguration?
        /// The image used to start the container.
        public let image: String?
        /// The instance type of the underlying host infrastructure of a multi-node parallel job.  This parameter isn't applicable to jobs that are running on Fargate resources.
        public let instanceType: String?
        /// The Amazon Resource Name (ARN) associated with the job upon execution.
        public let jobRoleArn: String?
        /// Linux-specific modifications that are applied to the container, such as details for device mappings.
        public let linuxParameters: LinuxParameters?
        /// The log configuration specification for the container. This parameter maps to LogConfig in the Create a container section of the Docker Remote API and the --log-driver option to docker run. By default, containers use the same logging driver that the Docker daemon uses. However, the container might use a different logging driver than the Docker daemon by specifying a log driver with this parameter in the container definition. To use a different logging driver for a container, the log system must be configured properly on the container instance. Or, alternatively, it must be configured on a different log server for remote logging options. For more information on the options for different supported log drivers, see Configure logging drivers in the Docker documentation.  Batch currently supports a subset of the logging drivers available to the Docker daemon (shown in the LogConfiguration data type). Additional log drivers might be available in future releases of the Amazon ECS container agent.  This parameter requires version 1.18 of the Docker Remote API or greater on your container instance. To check the Docker Remote API version on your container instance, log into your container instance and run the following command: sudo docker version | grep "Server API version"   The Amazon ECS container agent running on a container instance must register the logging drivers available on that instance with the ECS_AVAILABLE_LOGGING_DRIVERS environment variable before containers placed on that instance can use these log configuration options. For more information, see Amazon ECS Container Agent Configuration in the Amazon Elastic Container Service Developer Guide.
        public let logConfiguration: LogConfiguration?
        /// The name of the CloudWatch Logs log stream associated with the container. The log group for Batch jobs is /aws/batch/job. Each container attempt receives a log stream name when they reach the RUNNING status.
        public let logStreamName: String?
        /// For jobs run on EC2 resources that didn't specify memory requirements using ResourceRequirement, the number of MiB of memory reserved for the job. For other jobs, including all run on Fargate resources, see resourceRequirements.
        public let memory: Int?
        /// The mount points for data volumes in your container.
        public let mountPoints: [MountPoint]?
        /// The network configuration for jobs that are running on Fargate resources. Jobs that are running on EC2 resources must not specify this parameter.
        public let networkConfiguration: NetworkConfiguration?
        /// The network interfaces associated with the job.
        public let networkInterfaces: [NetworkInterface]?
        /// When this parameter is true, the container is given elevated permissions on the host container instance (similar to the root user). The default value is false.  This parameter isn't applicable to jobs that are running on Fargate resources and shouldn't be provided, or specified as false.
        public let privileged: Bool?
        /// When this parameter is true, the container is given read-only access to its root file system. This parameter maps to ReadonlyRootfs in the Create a container section of the Docker Remote API and the --read-only option to  docker run .
        public let readonlyRootFilesystem: Bool?
        /// A short (255 max characters) human-readable string to provide additional details about a running or stopped container.
        public let reason: String?
        /// The type and amount of resources to assign to a container. The supported resources include GPU, MEMORY, and VCPU.
        public let resourceRequirements: [ResourceRequirement]?
        /// The secrets to pass to the container. For more information, see Specifying sensitive data in the Batch User Guide.
        public let secrets: [Secret]?
        /// The Amazon Resource Name (ARN) of the Amazon ECS task that's associated with the container job. Each container attempt receives a task ARN when they reach the STARTING status.
        public let taskArn: String?
        /// A list of ulimit values to set in the container. This parameter maps to Ulimits in the Create a container section of the Docker Remote API and the --ulimit option to docker run.  This parameter isn't applicable to jobs that are running on Fargate resources.
        public let ulimits: [Ulimit]?
        /// The user name to use inside the container. This parameter maps to User in the Create a container section of the Docker Remote API and the --user option to docker run.
        public let user: String?
        /// The number of vCPUs reserved for the container. For jobs that run on EC2 resources, you can specify the vCPU requirement for the job using resourceRequirements, but you can't specify the vCPU requirements in both the vcpus and resourceRequirement object. This parameter maps to CpuShares in the Create a container section of the Docker Remote API and the --cpu-shares option to docker run. Each vCPU is equivalent to 1,024 CPU shares. You must specify at least one vCPU. This is required but can be specified in several places. It must be specified for each node at least once.  This parameter isn't applicable to jobs that run on Fargate resources. For jobs that run on Fargate resources, you must specify the vCPU requirement for the job using resourceRequirements.
        public let vcpus: Int?
        /// A list of volumes associated with the job.
        public let volumes: [Volume]?

        public init(command: [String]? = nil, containerInstanceArn: String? = nil, environment: [KeyValuePair]? = nil, executionRoleArn: String? = nil, exitCode: Int? = nil, fargatePlatformConfiguration: FargatePlatformConfiguration? = nil, image: String? = nil, instanceType: String? = nil, jobRoleArn: String? = nil, linuxParameters: LinuxParameters? = nil, logConfiguration: LogConfiguration? = nil, logStreamName: String? = nil, memory: Int? = nil, mountPoints: [MountPoint]? = nil, networkConfiguration: NetworkConfiguration? = nil, networkInterfaces: [NetworkInterface]? = nil, privileged: Bool? = nil, readonlyRootFilesystem: Bool? = nil, reason: String? = nil, resourceRequirements: [ResourceRequirement]? = nil, secrets: [Secret]? = nil, taskArn: String? = nil, ulimits: [Ulimit]? = nil, user: String? = nil, vcpus: Int? = nil, volumes: [Volume]? = nil) {
            self.command = command
            self.containerInstanceArn = containerInstanceArn
            self.environment = environment
            self.executionRoleArn = executionRoleArn
            self.exitCode = exitCode
            self.fargatePlatformConfiguration = fargatePlatformConfiguration
            self.image = image
            self.instanceType = instanceType
            self.jobRoleArn = jobRoleArn
            self.linuxParameters = linuxParameters
            self.logConfiguration = logConfiguration
            self.logStreamName = logStreamName
            self.memory = memory
            self.mountPoints = mountPoints
            self.networkConfiguration = networkConfiguration
            self.networkInterfaces = networkInterfaces
            self.privileged = privileged
            self.readonlyRootFilesystem = readonlyRootFilesystem
            self.reason = reason
            self.resourceRequirements = resourceRequirements
            self.secrets = secrets
            self.taskArn = taskArn
            self.ulimits = ulimits
            self.user = user
            self.vcpus = vcpus
            self.volumes = volumes
        }

        private enum CodingKeys: String, CodingKey {
            case command
            case containerInstanceArn
            case environment
            case executionRoleArn
            case exitCode
            case fargatePlatformConfiguration
            case image
            case instanceType
            case jobRoleArn
            case linuxParameters
            case logConfiguration
            case logStreamName
            case memory
            case mountPoints
            case networkConfiguration
            case networkInterfaces
            case privileged
            case readonlyRootFilesystem
            case reason
            case resourceRequirements
            case secrets
            case taskArn
            case ulimits
            case user
            case vcpus
            case volumes
        }
    }

    public struct ContainerOverrides: AWSEncodableShape {
        /// The command to send to the container that overrides the default command from the Docker image or the job definition.
        public let command: [String]?
        /// The environment variables to send to the container. You can add new environment variables, which are added to the container at launch, or you can override the existing environment variables from the Docker image or the job definition.  Environment variables must not start with AWS_BATCH; this naming convention is reserved for variables that are set by the Batch service.
        public let environment: [KeyValuePair]?
        /// The instance type to use for a multi-node parallel job.  This parameter isn't applicable to single-node container jobs or jobs that run on Fargate resources, and shouldn't be provided.
        public let instanceType: String?
        /// The type and amount of resources to assign to a container. This overrides the settings in the job definition. The supported resources include GPU, MEMORY, and VCPU.
        public let resourceRequirements: [ResourceRequirement]?

        public init(command: [String]? = nil, environment: [KeyValuePair]? = nil, instanceType: String? = nil, resourceRequirements: [ResourceRequirement]? = nil) {
            self.command = command
            self.environment = environment
            self.instanceType = instanceType
            self.resourceRequirements = resourceRequirements
        }

        private enum CodingKeys: String, CodingKey {
            case command
            case environment
            case instanceType
            case resourceRequirements
        }
    }

    public struct ContainerProperties: AWSEncodableShape & AWSDecodableShape {
        /// The command that's passed to the container. This parameter maps to Cmd in the Create a container section of the Docker Remote API and the COMMAND parameter to docker run. For more information, see https://docs.docker.com/engine/reference/builder/#cmd.
        public let command: [String]?
        /// The environment variables to pass to a container. This parameter maps to Env in the Create a container section of the Docker Remote API and the --env option to docker run.  We don't recommend using plaintext environment variables for sensitive information, such as credential data.   Environment variables must not start with AWS_BATCH; this naming convention is reserved for variables that are set by the Batch service.
        public let environment: [KeyValuePair]?
        /// The Amazon Resource Name (ARN) of the execution role that Batch can assume. For jobs that run on Fargate resources, you must provide an execution role. For more information, see Batch execution IAM role in the Batch User Guide.
        public let executionRoleArn: String?
        /// The platform configuration for jobs that are running on Fargate resources. Jobs that are running on EC2 resources must not specify this parameter.
        public let fargatePlatformConfiguration: FargatePlatformConfiguration?
        /// The image used to start a container. This string is passed directly to the Docker daemon. Images in the Docker Hub registry are available by default. Other repositories are specified with  repository-url/image:tag . Up to 255 letters (uppercase and lowercase), numbers, hyphens, underscores, colons, periods, forward slashes, and number signs are allowed. This parameter maps to Image in the Create a container section of the Docker Remote API and the IMAGE parameter of docker run.  Docker image architecture must match the processor architecture of the compute resources that they're scheduled on. For example, ARM-based Docker images can only run on ARM-based compute resources.    Images in Amazon ECR repositories use the full registry and repository URI (for example, 012345678910.dkr.ecr.&lt;region-name&gt;.amazonaws.com/&lt;repository-name&gt;).   Images in official repositories on Docker Hub use a single name (for example, ubuntu or mongo).   Images in other repositories on Docker Hub are qualified with an organization name (for example, amazon/amazon-ecs-agent).   Images in other online repositories are qualified further by a domain name (for example, quay.io/assemblyline/ubuntu).
        public let image: String?
        /// The instance type to use for a multi-node parallel job. All node groups in a multi-node parallel job must use the same instance type.  This parameter isn't applicable to single-node container jobs or jobs that run on Fargate resources, and shouldn't be provided.
        public let instanceType: String?
        /// The Amazon Resource Name (ARN) of the IAM role that the container can assume for Amazon Web Services permissions. For more information, see IAM Roles for Tasks in the Amazon Elastic Container Service Developer Guide.
        public let jobRoleArn: String?
        /// Linux-specific modifications that are applied to the container, such as details for device mappings.
        public let linuxParameters: LinuxParameters?
        /// The log configuration specification for the container. This parameter maps to LogConfig in the Create a container section of the Docker Remote API and the --log-driver option to docker run. By default, containers use the same logging driver that the Docker daemon uses. However the container might use a different logging driver than the Docker daemon by specifying a log driver with this parameter in the container definition. To use a different logging driver for a container, the log system must be configured properly on the container instance (or on a different log server for remote logging options). For more information on the options for different supported log drivers, see Configure logging drivers in the Docker documentation.  Batch currently supports a subset of the logging drivers available to the Docker daemon (shown in the LogConfiguration data type).  This parameter requires version 1.18 of the Docker Remote API or greater on your container instance. To check the Docker Remote API version on your container instance, log into your container instance and run the following command: sudo docker version | grep "Server API version"   The Amazon ECS container agent running on a container instance must register the logging drivers available on that instance with the ECS_AVAILABLE_LOGGING_DRIVERS environment variable before containers placed on that instance can use these log configuration options. For more information, see Amazon ECS Container Agent Configuration in the Amazon Elastic Container Service Developer Guide.
        public let logConfiguration: LogConfiguration?
        /// The mount points for data volumes in your container. This parameter maps to Volumes in the Create a container section of the Docker Remote API and the --volume option to docker run.
        public let mountPoints: [MountPoint]?
        /// The network configuration for jobs that are running on Fargate resources. Jobs that are running on EC2 resources must not specify this parameter.
        public let networkConfiguration: NetworkConfiguration?
        /// When this parameter is true, the container is given elevated permissions on the host container instance (similar to the root user). This parameter maps to Privileged in the Create a container section of the Docker Remote API and the --privileged option to docker run. The default value is false.  This parameter isn't applicable to jobs that are running on Fargate resources and shouldn't be provided, or specified as false.
        public let privileged: Bool?
        /// When this parameter is true, the container is given read-only access to its root file system. This parameter maps to ReadonlyRootfs in the Create a container section of the Docker Remote API and the --read-only option to docker run.
        public let readonlyRootFilesystem: Bool?
        /// The type and amount of resources to assign to a container. The supported resources include GPU, MEMORY, and VCPU.
        public let resourceRequirements: [ResourceRequirement]?
        /// The secrets for the container. For more information, see Specifying sensitive data in the Batch User Guide.
        public let secrets: [Secret]?
        /// A list of ulimits to set in the container. This parameter maps to Ulimits in the Create a container section of the Docker Remote API and the --ulimit option to docker run.  This parameter isn't applicable to jobs that are running on Fargate resources and shouldn't be provided.
        public let ulimits: [Ulimit]?
        /// The user name to use inside the container. This parameter maps to User in the Create a container section of the Docker Remote API and the --user option to docker run.
        public let user: String?
        /// A list of data volumes used in a job.
        public let volumes: [Volume]?

        public init(command: [String]? = nil, environment: [KeyValuePair]? = nil, executionRoleArn: String? = nil, fargatePlatformConfiguration: FargatePlatformConfiguration? = nil, image: String? = nil, instanceType: String? = nil, jobRoleArn: String? = nil, linuxParameters: LinuxParameters? = nil, logConfiguration: LogConfiguration? = nil, mountPoints: [MountPoint]? = nil, networkConfiguration: NetworkConfiguration? = nil, privileged: Bool? = nil, readonlyRootFilesystem: Bool? = nil, resourceRequirements: [ResourceRequirement]? = nil, secrets: [Secret]? = nil, ulimits: [Ulimit]? = nil, user: String? = nil, volumes: [Volume]? = nil) {
            self.command = command
            self.environment = environment
            self.executionRoleArn = executionRoleArn
            self.fargatePlatformConfiguration = fargatePlatformConfiguration
            self.image = image
            self.instanceType = instanceType
            self.jobRoleArn = jobRoleArn
            self.linuxParameters = linuxParameters
            self.logConfiguration = logConfiguration
            self.mountPoints = mountPoints
            self.networkConfiguration = networkConfiguration
            self.privileged = privileged
            self.readonlyRootFilesystem = readonlyRootFilesystem
            self.resourceRequirements = resourceRequirements
            self.secrets = secrets
            self.ulimits = ulimits
            self.user = user
            self.volumes = volumes
        }

        private enum CodingKeys: String, CodingKey {
            case command
            case environment
            case executionRoleArn
            case fargatePlatformConfiguration
            case image
            case instanceType
            case jobRoleArn
            case linuxParameters
            case logConfiguration
            case mountPoints
            case networkConfiguration
            case privileged
            case readonlyRootFilesystem
            case resourceRequirements
            case secrets
            case ulimits
            case user
            case volumes
        }
    }

    public struct ContainerSummary: AWSDecodableShape {
        /// The exit code to return upon completion.
        public let exitCode: Int?
        /// A short (255 max characters) human-readable string to provide additional details about a running or stopped container.
        public let reason: String?

        public init(exitCode: Int? = nil, reason: String? = nil) {
            self.exitCode = exitCode
            self.reason = reason
        }

        private enum CodingKeys: String, CodingKey {
            case exitCode
            case reason
        }
    }

    public struct CreateComputeEnvironmentRequest: AWSEncodableShape {
        /// The name for your compute environment. Up to 128 letters (uppercase and lowercase), numbers, hyphens, and underscores are allowed.
        public let computeEnvironmentName: String
        /// Details about the compute resources managed by the compute environment. This parameter is required for managed compute environments. For more information, see Compute Environments in the Batch User Guide.
        public let computeResources: ComputeResource?
        /// The full Amazon Resource Name (ARN) of the IAM role that allows Batch to make calls to other Amazon Web Services services on your behalf. For more information, see Batch service IAM role in the Batch User Guide.  If your account already created the Batch service-linked role, that role is used by default for your compute environment unless you specify a different role here. If the Batch service-linked role doesn't exist in your account, and no role is specified here, the service attempts to create the Batch service-linked role in your account.  If your specified role has a path other than /, then you must specify either the full role ARN (recommended) or prefix the role name with the path. For example, if a role with the name bar has a path of /foo/ then you would specify /foo/bar as the role name. For more information, see Friendly names and paths in the IAM User Guide.  Depending on how you created your Batch service role, its ARN might contain the service-role path prefix. When you only specify the name of the service role, Batch assumes that your ARN doesn't use the service-role path prefix. Because of this, we recommend that you specify the full ARN of your service role when you create compute environments.
        public let serviceRole: String?
        /// The state of the compute environment. If the state is ENABLED, then the compute environment accepts jobs from a queue and can scale out automatically based on queues. If the state is ENABLED, then the Batch scheduler can attempt to place jobs from an associated job queue on the compute resources within the environment. If the compute environment is managed, then it can scale its instances out or in automatically, based on the job queue demand. If the state is DISABLED, then the Batch scheduler doesn't attempt to place jobs within the environment. Jobs in a STARTING or RUNNING state continue to progress normally. Managed compute environments in the DISABLED state don't scale out. However, they scale in to minvCpus value after instances become idle.
        public let state: CEState?
        /// The tags that you apply to the compute environment to help you categorize and organize your resources. Each tag consists of a key and an optional value. For more information, see Tagging Amazon Web Services Resources in Amazon Web Services General Reference. These tags can be updated or removed using the TagResource and UntagResource API operations. These tags don't propagate to the underlying compute resources.
        public let tags: [String: String]?
        /// The type of the compute environment: MANAGED or UNMANAGED. For more information, see Compute Environments in the Batch User Guide.
        public let type: CEType

        public init(computeEnvironmentName: String, computeResources: ComputeResource? = nil, serviceRole: String? = nil, state: CEState? = nil, tags: [String: String]? = nil, type: CEType) {
            self.computeEnvironmentName = computeEnvironmentName
            self.computeResources = computeResources
            self.serviceRole = serviceRole
            self.state = state
            self.tags = tags
            self.type = type
        }

        public func validate(name: String) throws {
            try self.computeResources?.validate(name: "\(name).computeResources")
            try self.tags?.forEach {
                try validate($0.key, name: "tags.key", parent: name, max: 128)
                try validate($0.key, name: "tags.key", parent: name, min: 1)
                try validate($0.value, name: "tags[\"\($0.key)\"]", parent: name, max: 256)
            }
        }

        private enum CodingKeys: String, CodingKey {
            case computeEnvironmentName
            case computeResources
            case serviceRole
            case state
            case tags
            case type
        }
    }

    public struct CreateComputeEnvironmentResponse: AWSDecodableShape {
        /// The Amazon Resource Name (ARN) of the compute environment.
        public let computeEnvironmentArn: String?
        /// The name of the compute environment. Up to 128 letters (uppercase and lowercase), numbers, hyphens, and underscores are allowed.
        public let computeEnvironmentName: String?

        public init(computeEnvironmentArn: String? = nil, computeEnvironmentName: String? = nil) {
            self.computeEnvironmentArn = computeEnvironmentArn
            self.computeEnvironmentName = computeEnvironmentName
        }

        private enum CodingKeys: String, CodingKey {
            case computeEnvironmentArn
            case computeEnvironmentName
        }
    }

    public struct CreateJobQueueRequest: AWSEncodableShape {
        /// The set of compute environments mapped to a job queue and their order relative to each other. The job scheduler uses this parameter to determine which compute environment should run a specific job. Compute environments must be in the VALID state before you can associate them with a job queue. You can associate up to three compute environments with a job queue. All of the compute environments must be either EC2 (EC2 or SPOT) or Fargate (FARGATE or FARGATE_SPOT); EC2 and Fargate compute environments can't be mixed.  All compute environments that are associated with a job queue must share the same architecture. Batch doesn't support mixing compute environment architecture types in a single job queue.
        public let computeEnvironmentOrder: [ComputeEnvironmentOrder]
        /// The name of the job queue. Up to 128 letters (uppercase and lowercase), numbers, and underscores are allowed.
        public let jobQueueName: String
        /// The priority of the job queue. Job queues with a higher priority (or a higher integer value for the priority parameter) are evaluated first when associated with the same compute environment. Priority is determined in descending order. For example, a job queue with a priority value of 10 is given scheduling preference over a job queue with a priority value of 1. All of the compute environments must be either EC2 (EC2 or SPOT) or Fargate (FARGATE or FARGATE_SPOT); EC2 and Fargate compute environments can't be mixed.
        public let priority: Int
        /// The state of the job queue. If the job queue state is ENABLED, it is able to accept jobs. If the job queue state is DISABLED, new jobs can't be added to the queue, but jobs already in the queue can finish.
        public let state: JQState?
        /// The tags that you apply to the job queue to help you categorize and organize your resources. Each tag consists of a key and an optional value. For more information, see Tagging your Batch resources in Batch User Guide.
        public let tags: [String: String]?

        public init(computeEnvironmentOrder: [ComputeEnvironmentOrder], jobQueueName: String, priority: Int, state: JQState? = nil, tags: [String: String]? = nil) {
            self.computeEnvironmentOrder = computeEnvironmentOrder
            self.jobQueueName = jobQueueName
            self.priority = priority
            self.state = state
            self.tags = tags
        }

        public func validate(name: String) throws {
            try self.tags?.forEach {
                try validate($0.key, name: "tags.key", parent: name, max: 128)
                try validate($0.key, name: "tags.key", parent: name, min: 1)
                try validate($0.value, name: "tags[\"\($0.key)\"]", parent: name, max: 256)
            }
        }

        private enum CodingKeys: String, CodingKey {
            case computeEnvironmentOrder
            case jobQueueName
            case priority
            case state
            case tags
        }
    }

    public struct CreateJobQueueResponse: AWSDecodableShape {
        /// The Amazon Resource Name (ARN) of the job queue.
        public let jobQueueArn: String
        /// The name of the job queue.
        public let jobQueueName: String

        public init(jobQueueArn: String, jobQueueName: String) {
            self.jobQueueArn = jobQueueArn
            self.jobQueueName = jobQueueName
        }

        private enum CodingKeys: String, CodingKey {
            case jobQueueArn
            case jobQueueName
        }
    }

    public struct DeleteComputeEnvironmentRequest: AWSEncodableShape {
        /// The name or Amazon Resource Name (ARN) of the compute environment to delete.
        public let computeEnvironment: String

        public init(computeEnvironment: String) {
            self.computeEnvironment = computeEnvironment
        }

        private enum CodingKeys: String, CodingKey {
            case computeEnvironment
        }
    }

    public struct DeleteComputeEnvironmentResponse: AWSDecodableShape {
        public init() {}
    }

    public struct DeleteJobQueueRequest: AWSEncodableShape {
        /// The short name or full Amazon Resource Name (ARN) of the queue to delete.
        public let jobQueue: String

        public init(jobQueue: String) {
            self.jobQueue = jobQueue
        }

        private enum CodingKeys: String, CodingKey {
            case jobQueue
        }
    }

    public struct DeleteJobQueueResponse: AWSDecodableShape {
        public init() {}
    }

    public struct DeregisterJobDefinitionRequest: AWSEncodableShape {
        /// The name and revision (name:revision) or full Amazon Resource Name (ARN) of the job definition to deregister.
        public let jobDefinition: String

        public init(jobDefinition: String) {
            self.jobDefinition = jobDefinition
        }

        private enum CodingKeys: String, CodingKey {
            case jobDefinition
        }
    }

    public struct DeregisterJobDefinitionResponse: AWSDecodableShape {
        public init() {}
    }

    public struct DescribeComputeEnvironmentsRequest: AWSEncodableShape {
        /// A list of up to 100 compute environment names or full Amazon Resource Name (ARN) entries.
        public let computeEnvironments: [String]?
        /// The maximum number of cluster results returned by DescribeComputeEnvironments in paginated output. When this parameter is used, DescribeComputeEnvironments only returns maxResults results in a single page along with a nextToken response element. The remaining results of the initial request can be seen by sending another DescribeComputeEnvironments request with the returned nextToken value. This value can be between 1 and 100. If this parameter isn't used, then DescribeComputeEnvironments returns up to 100 results and a nextToken value if applicable.
        public let maxResults: Int?
        /// The nextToken value returned from a previous paginated DescribeComputeEnvironments request where maxResults was used and the results exceeded the value of that parameter. Pagination continues from the end of the previous results that returned the nextToken value. This value is null when there are no more results to return.  This token should be treated as an opaque identifier that's only used to retrieve the next items in a list and not for other programmatic purposes.
        public let nextToken: String?

        public init(computeEnvironments: [String]? = nil, maxResults: Int? = nil, nextToken: String? = nil) {
            self.computeEnvironments = computeEnvironments
            self.maxResults = maxResults
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case computeEnvironments
            case maxResults
            case nextToken
        }
    }

    public struct DescribeComputeEnvironmentsResponse: AWSDecodableShape {
        /// The list of compute environments.
        public let computeEnvironments: [ComputeEnvironmentDetail]?
        /// The nextToken value to include in a future DescribeComputeEnvironments request. When the results of a DescribeJobDefinitions request exceed maxResults, this value can be used to retrieve the next page of results. This value is null when there are no more results to return.
        public let nextToken: String?

        public init(computeEnvironments: [ComputeEnvironmentDetail]? = nil, nextToken: String? = nil) {
            self.computeEnvironments = computeEnvironments
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case computeEnvironments
            case nextToken
        }
    }

    public struct DescribeJobDefinitionsRequest: AWSEncodableShape {
        /// The name of the job definition to describe.
        public let jobDefinitionName: String?
        /// A list of up to 100 job definitions. Each entry in the list can either be an ARN of the form arn:aws:batch:${Region}:${Account}:job-definition/${JobDefinitionName}:${Revision} or a short version using the form ${JobDefinitionName}:${Revision}.
        public let jobDefinitions: [String]?
        /// The maximum number of results returned by DescribeJobDefinitions in paginated output. When this parameter is used, DescribeJobDefinitions only returns maxResults results in a single page and a nextToken response element. The remaining results of the initial request can be seen by sending another DescribeJobDefinitions request with the returned nextToken value. This value can be between 1 and 100. If this parameter isn't used, then DescribeJobDefinitions returns up to 100 results and a nextToken value if applicable.
        public let maxResults: Int?
        /// The nextToken value returned from a previous paginated DescribeJobDefinitions request where maxResults was used and the results exceeded the value of that parameter. Pagination continues from the end of the previous results that returned the nextToken value. This value is null when there are no more results to return.  This token should be treated as an opaque identifier that's only used to retrieve the next items in a list and not for other programmatic purposes.
        public let nextToken: String?
        /// The status used to filter job definitions.
        public let status: String?

        public init(jobDefinitionName: String? = nil, jobDefinitions: [String]? = nil, maxResults: Int? = nil, nextToken: String? = nil, status: String? = nil) {
            self.jobDefinitionName = jobDefinitionName
            self.jobDefinitions = jobDefinitions
            self.maxResults = maxResults
            self.nextToken = nextToken
            self.status = status
        }

        private enum CodingKeys: String, CodingKey {
            case jobDefinitionName
            case jobDefinitions
            case maxResults
            case nextToken
            case status
        }
    }

    public struct DescribeJobDefinitionsResponse: AWSDecodableShape {
        /// The list of job definitions.
        public let jobDefinitions: [JobDefinition]?
        /// The nextToken value to include in a future DescribeJobDefinitions request. When the results of a DescribeJobDefinitions request exceed maxResults, this value can be used to retrieve the next page of results. This value is null when there are no more results to return.
        public let nextToken: String?

        public init(jobDefinitions: [JobDefinition]? = nil, nextToken: String? = nil) {
            self.jobDefinitions = jobDefinitions
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case jobDefinitions
            case nextToken
        }
    }

    public struct DescribeJobQueuesRequest: AWSEncodableShape {
        /// A list of up to 100 queue names or full queue Amazon Resource Name (ARN) entries.
        public let jobQueues: [String]?
        /// The maximum number of results returned by DescribeJobQueues in paginated output. When this parameter is used, DescribeJobQueues only returns maxResults results in a single page and a nextToken response element. The remaining results of the initial request can be seen by sending another DescribeJobQueues request with the returned nextToken value. This value can be between 1 and 100. If this parameter isn't used, then DescribeJobQueues returns up to 100 results and a nextToken value if applicable.
        public let maxResults: Int?
        /// The nextToken value returned from a previous paginated DescribeJobQueues request where maxResults was used and the results exceeded the value of that parameter. Pagination continues from the end of the previous results that returned the nextToken value. This value is null when there are no more results to return.  This token should be treated as an opaque identifier that's only used to retrieve the next items in a list and not for other programmatic purposes.
        public let nextToken: String?

        public init(jobQueues: [String]? = nil, maxResults: Int? = nil, nextToken: String? = nil) {
            self.jobQueues = jobQueues
            self.maxResults = maxResults
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case jobQueues
            case maxResults
            case nextToken
        }
    }

    public struct DescribeJobQueuesResponse: AWSDecodableShape {
        /// The list of job queues.
        public let jobQueues: [JobQueueDetail]?
        /// The nextToken value to include in a future DescribeJobQueues request. When the results of a DescribeJobQueues request exceed maxResults, this value can be used to retrieve the next page of results. This value is null when there are no more results to return.
        public let nextToken: String?

        public init(jobQueues: [JobQueueDetail]? = nil, nextToken: String? = nil) {
            self.jobQueues = jobQueues
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case jobQueues
            case nextToken
        }
    }

    public struct DescribeJobsRequest: AWSEncodableShape {
        /// A list of up to 100 job IDs.
        public let jobs: [String]

        public init(jobs: [String]) {
            self.jobs = jobs
        }

        private enum CodingKeys: String, CodingKey {
            case jobs
        }
    }

    public struct DescribeJobsResponse: AWSDecodableShape {
        /// The list of jobs.
        public let jobs: [JobDetail]?

        public init(jobs: [JobDetail]? = nil) {
            self.jobs = jobs
        }

        private enum CodingKeys: String, CodingKey {
            case jobs
        }
    }

    public struct Device: AWSEncodableShape & AWSDecodableShape {
        /// The path inside the container that's used to expose the host device. By default, the hostPath value is used.
        public let containerPath: String?
        /// The path for the device on the host container instance.
        public let hostPath: String
        /// The explicit permissions to provide to the container for the device. By default, the container has permissions for read, write, and mknod for the device.
        public let permissions: [DeviceCgroupPermission]?

        public init(containerPath: String? = nil, hostPath: String, permissions: [DeviceCgroupPermission]? = nil) {
            self.containerPath = containerPath
            self.hostPath = hostPath
            self.permissions = permissions
        }

        private enum CodingKeys: String, CodingKey {
            case containerPath
            case hostPath
            case permissions
        }
    }

    public struct EFSAuthorizationConfig: AWSEncodableShape & AWSDecodableShape {
        /// The Amazon EFS access point ID to use. If an access point is specified, the root directory value specified in the EFSVolumeConfiguration must either be omitted or set to / which will enforce the path set on the EFS access point. If an access point is used, transit encryption must be enabled in the EFSVolumeConfiguration. For more information, see Working with Amazon EFS Access Points in the Amazon Elastic File System User Guide.
        public let accessPointId: String?
        /// Whether or not to use the Batch job IAM role defined in a job definition when mounting the Amazon EFS file system. If enabled, transit encryption must be enabled in the EFSVolumeConfiguration. If this parameter is omitted, the default value of DISABLED is used. For more information, see Using Amazon EFS Access Points in the Batch User Guide. EFS IAM authorization requires that TransitEncryption be ENABLED and that a JobRoleArn is specified.
        public let iam: EFSAuthorizationConfigIAM?

        public init(accessPointId: String? = nil, iam: EFSAuthorizationConfigIAM? = nil) {
            self.accessPointId = accessPointId
            self.iam = iam
        }

        private enum CodingKeys: String, CodingKey {
            case accessPointId
            case iam
        }
    }

    public struct EFSVolumeConfiguration: AWSEncodableShape & AWSDecodableShape {
        /// The authorization configuration details for the Amazon EFS file system.
        public let authorizationConfig: EFSAuthorizationConfig?
        /// The Amazon EFS file system ID to use.
        public let fileSystemId: String
        /// The directory within the Amazon EFS file system to mount as the root directory inside the host. If this parameter is omitted, the root of the Amazon EFS volume is used instead. Specifying / has the same effect as omitting this parameter. The maximum length is 4,096 characters.  If an EFS access point is specified in the authorizationConfig, the root directory parameter must either be omitted or set to /, which enforces the path set on the Amazon EFS access point.
        public let rootDirectory: String?
        /// Determines whether to enable encryption for Amazon EFS data in transit between the Amazon ECS host and the Amazon EFS server. Transit encryption must be enabled if Amazon EFS IAM authorization is used. If this parameter is omitted, the default value of DISABLED is used. For more information, see Encrypting data in transit in the Amazon Elastic File System User Guide.
        public let transitEncryption: EFSTransitEncryption?
        /// The port to use when sending encrypted data between the Amazon ECS host and the Amazon EFS server. If you don't specify a transit encryption port, it uses the port selection strategy that the Amazon EFS mount helper uses. The value must be between 0 and 65,535. For more information, see EFS Mount Helper in the Amazon Elastic File System User Guide.
        public let transitEncryptionPort: Int?

        public init(authorizationConfig: EFSAuthorizationConfig? = nil, fileSystemId: String, rootDirectory: String? = nil, transitEncryption: EFSTransitEncryption? = nil, transitEncryptionPort: Int? = nil) {
            self.authorizationConfig = authorizationConfig
            self.fileSystemId = fileSystemId
            self.rootDirectory = rootDirectory
            self.transitEncryption = transitEncryption
            self.transitEncryptionPort = transitEncryptionPort
        }

        private enum CodingKeys: String, CodingKey {
            case authorizationConfig
            case fileSystemId
            case rootDirectory
            case transitEncryption
            case transitEncryptionPort
        }
    }

    public struct Ec2Configuration: AWSEncodableShape & AWSDecodableShape {
        /// The AMI ID used for instances launched in the compute environment that match the image type. This setting overrides the imageId set in the computeResource object.
        public let imageIdOverride: String?
        /// The image type to match with the instance type to select an AMI. If the imageIdOverride parameter isn't specified, then a recent Amazon ECS-optimized AMI (ECS_AL1) is used. Starting on March 31, 2021, this default will be changing to ECS_AL2 (Amazon Linux 2).  ECS_AL2   Amazon Linux 2− Default for all Amazon Web Services Graviton-based instance families (for example, C6g, M6g, R6g, and T4g) and can be used for all non-GPU instance types.  ECS_AL2_NVIDIA   Amazon Linux 2 (GPU)−Default for all GPU instance families (for example P4 and G4) and can be used for all non Amazon Web Services Graviton-based instance types.  ECS_AL1   Amazon Linux−Default for all non-GPU, non Amazon Web Services Graviton instance families. Amazon Linux is reaching the end-of-life of standard support. For more information, see Amazon Linux AMI.
        public let imageType: String

        public init(imageIdOverride: String? = nil, imageType: String) {
            self.imageIdOverride = imageIdOverride
            self.imageType = imageType
        }

        public func validate(name: String) throws {
            try self.validate(self.imageIdOverride, name: "imageIdOverride", parent: name, max: 256)
            try self.validate(self.imageIdOverride, name: "imageIdOverride", parent: name, min: 1)
            try self.validate(self.imageType, name: "imageType", parent: name, max: 256)
            try self.validate(self.imageType, name: "imageType", parent: name, min: 1)
        }

        private enum CodingKeys: String, CodingKey {
            case imageIdOverride
            case imageType
        }
    }

    public struct EvaluateOnExit: AWSEncodableShape & AWSDecodableShape {
        /// Specifies the action to take if all of the specified conditions (onStatusReason, onReason, and onExitCode) are met. The values aren't case sensitive.
        public let action: RetryAction
        /// Contains a glob pattern to match against the decimal representation of the ExitCode returned for a job. The pattern can be up to 512 characters in length. It can contain only numbers, and can optionally end with an asterisk (*) so that only the start of the string needs to be an exact match.
        public let onExitCode: String?
        /// Contains a glob pattern to match against the Reason returned for a job. The pattern can be up to 512 characters in length. It can contain letters, numbers, periods (.), colons (:), and white space (including spaces and tabs). It can optionally end with an asterisk (*) so that only the start of the string needs to be an exact match.
        public let onReason: String?
        /// Contains a glob pattern to match against the StatusReason returned for a job. The pattern can be up to 512 characters in length. It can contain letters, numbers, periods (.), colons (:), and white space (including spaces or tabs). It can optionally end with an asterisk (*) so that only the start of the string needs to be an exact match.
        public let onStatusReason: String?

        public init(action: RetryAction, onExitCode: String? = nil, onReason: String? = nil, onStatusReason: String? = nil) {
            self.action = action
            self.onExitCode = onExitCode
            self.onReason = onReason
            self.onStatusReason = onStatusReason
        }

        private enum CodingKeys: String, CodingKey {
            case action
            case onExitCode
            case onReason
            case onStatusReason
        }
    }

    public struct FargatePlatformConfiguration: AWSEncodableShape & AWSDecodableShape {
        /// The Fargate platform version where the jobs are running. A platform version is specified only for jobs that are running on Fargate resources. If one isn't specified, the LATEST platform version is used by default. This uses a recent, approved version of the Fargate platform for compute resources. For more information, see Fargate platform versions in the Amazon Elastic Container Service Developer Guide.
        public let platformVersion: String?

        public init(platformVersion: String? = nil) {
            self.platformVersion = platformVersion
        }

        private enum CodingKeys: String, CodingKey {
            case platformVersion
        }
    }

    public struct Host: AWSEncodableShape & AWSDecodableShape {
        /// The path on the host container instance that's presented to the container. If this parameter is empty, then the Docker daemon has assigned a host path for you. If this parameter contains a file location, then the data volume persists at the specified location on the host container instance until you delete it manually. If the source path location doesn't exist on the host container instance, the Docker daemon creates it. If the location does exist, the contents of the source path folder are exported.  This parameter isn't applicable to jobs that run on Fargate resources and shouldn't be provided.
        public let sourcePath: String?

        public init(sourcePath: String? = nil) {
            self.sourcePath = sourcePath
        }

        private enum CodingKeys: String, CodingKey {
            case sourcePath
        }
    }

    public struct JobDefinition: AWSDecodableShape {
        /// An object with various properties specific to container-based jobs.
        public let containerProperties: ContainerProperties?
        /// The Amazon Resource Name (ARN) for the job definition.
        public let jobDefinitionArn: String
        /// The name of the job definition.
        public let jobDefinitionName: String
        /// An object with various properties specific to multi-node parallel jobs.  If the job runs on Fargate resources, then you must not specify nodeProperties; use containerProperties instead.
        public let nodeProperties: NodeProperties?
        /// Default parameters or parameter substitution placeholders that are set in the job definition. Parameters are specified as a key-value pair mapping. Parameters in a SubmitJob request override any corresponding parameter defaults from the job definition. For more information about specifying parameters, see Job Definition Parameters in the Batch User Guide.
        public let parameters: [String: String]?
        /// The platform capabilities required by the job definition. If no value is specified, it defaults to EC2. Jobs run on Fargate resources specify FARGATE.
        public let platformCapabilities: [PlatformCapability]?
        /// Specifies whether to propagate the tags from the job or job definition to the corresponding Amazon ECS task. If no value is specified, the tags aren't propagated. Tags can only be propagated to the tasks during task creation. For tags with the same name, job tags are given priority over job definitions tags. If the total number of combined tags from the job and job definition is over 50, the job is moved to the FAILED state.
        public let propagateTags: Bool?
        /// The retry strategy to use for failed jobs that are submitted with this job definition.
        public let retryStrategy: RetryStrategy?
        /// The revision of the job definition.
        public let revision: Int
        /// The status of the job definition.
        public let status: String?
        /// The tags applied to the job definition.
        public let tags: [String: String]?
        /// The timeout configuration for jobs that are submitted with this job definition. You can specify a timeout duration after which Batch terminates your jobs if they haven't finished.
        public let timeout: JobTimeout?
        /// The type of job definition. If the job is run on Fargate resources, then multinode isn't supported. For more information about multi-node parallel jobs, see Creating a multi-node parallel job definition in the Batch User Guide.
        public let type: String

        public init(containerProperties: ContainerProperties? = nil, jobDefinitionArn: String, jobDefinitionName: String, nodeProperties: NodeProperties? = nil, parameters: [String: String]? = nil, platformCapabilities: [PlatformCapability]? = nil, propagateTags: Bool? = nil, retryStrategy: RetryStrategy? = nil, revision: Int, status: String? = nil, tags: [String: String]? = nil, timeout: JobTimeout? = nil, type: String) {
            self.containerProperties = containerProperties
            self.jobDefinitionArn = jobDefinitionArn
            self.jobDefinitionName = jobDefinitionName
            self.nodeProperties = nodeProperties
            self.parameters = parameters
            self.platformCapabilities = platformCapabilities
            self.propagateTags = propagateTags
            self.retryStrategy = retryStrategy
            self.revision = revision
            self.status = status
            self.tags = tags
            self.timeout = timeout
            self.type = type
        }

        private enum CodingKeys: String, CodingKey {
            case containerProperties
            case jobDefinitionArn
            case jobDefinitionName
            case nodeProperties
            case parameters
            case platformCapabilities
            case propagateTags
            case retryStrategy
            case revision
            case status
            case tags
            case timeout
            case type
        }
    }

    public struct JobDependency: AWSEncodableShape & AWSDecodableShape {
        /// The job ID of the Batch job associated with this dependency.
        public let jobId: String?
        /// The type of the job dependency.
        public let type: ArrayJobDependency?

        public init(jobId: String? = nil, type: ArrayJobDependency? = nil) {
            self.jobId = jobId
            self.type = type
        }

        private enum CodingKeys: String, CodingKey {
            case jobId
            case type
        }
    }

    public struct JobDetail: AWSDecodableShape {
        /// The array properties of the job, if it is an array job.
        public let arrayProperties: ArrayPropertiesDetail?
        /// A list of job attempts associated with this job.
        public let attempts: [AttemptDetail]?
        /// An object representing the details of the container that's associated with the job.
        public let container: ContainerDetail?
        /// The Unix timestamp (in milliseconds) for when the job was created. For non-array jobs and parent array jobs, this is when the job entered the SUBMITTED state (at the time SubmitJob was called). For array child jobs, this is when the child job was spawned by its parent and entered the PENDING state.
        public let createdAt: Int64?
        /// A list of job IDs that this job depends on.
        public let dependsOn: [JobDependency]?
        /// The Amazon Resource Name (ARN) of the job.
        public let jobArn: String?
        /// The job definition that's used by this job.
        public let jobDefinition: String
        /// The ID for the job.
        public let jobId: String
        /// The name of the job.
        public let jobName: String
        /// The Amazon Resource Name (ARN) of the job queue that the job is associated with.
        public let jobQueue: String
        /// An object representing the details of a node that's associated with a multi-node parallel job.
        public let nodeDetails: NodeDetails?
        /// An object representing the node properties of a multi-node parallel job.  This isn't applicable to jobs that are running on Fargate resources.
        public let nodeProperties: NodeProperties?
        /// Additional parameters passed to the job that replace parameter substitution placeholders or override any corresponding parameter defaults from the job definition.
        public let parameters: [String: String]?
        /// The platform capabilities required by the job definition. If no value is specified, it defaults to EC2. Jobs run on Fargate resources specify FARGATE.
        public let platformCapabilities: [PlatformCapability]?
        /// Specifies whether to propagate the tags from the job or job definition to the corresponding Amazon ECS task. If no value is specified, the tags aren't propagated. Tags can only be propagated to the tasks during task creation. For tags with the same name, job tags are given priority over job definitions tags. If the total number of combined tags from the job and job definition is over 50, the job is moved to the FAILED state.
        public let propagateTags: Bool?
        /// The retry strategy to use for this job if an attempt fails.
        public let retryStrategy: RetryStrategy?
        /// The Unix timestamp (in milliseconds) for when the job was started (when the job transitioned from the STARTING state to the RUNNING state). This parameter isn't provided for child jobs of array jobs or multi-node parallel jobs.
        public let startedAt: Int64
        /// The current status for the job.  If your jobs don't progress to STARTING, see Jobs Stuck in RUNNABLE Status in the troubleshooting section of the Batch User Guide.
        public let status: JobStatus
        /// A short, human-readable string to provide additional details about the current status of the job.
        public let statusReason: String?
        /// The Unix timestamp (in milliseconds) for when the job was stopped (when the job transitioned from the RUNNING state to a terminal state, such as SUCCEEDED or FAILED).
        public let stoppedAt: Int64?
        /// The tags applied to the job.
        public let tags: [String: String]?
        /// The timeout configuration for the job.
        public let timeout: JobTimeout?

        public init(arrayProperties: ArrayPropertiesDetail? = nil, attempts: [AttemptDetail]? = nil, container: ContainerDetail? = nil, createdAt: Int64? = nil, dependsOn: [JobDependency]? = nil, jobArn: String? = nil, jobDefinition: String, jobId: String, jobName: String, jobQueue: String, nodeDetails: NodeDetails? = nil, nodeProperties: NodeProperties? = nil, parameters: [String: String]? = nil, platformCapabilities: [PlatformCapability]? = nil, propagateTags: Bool? = nil, retryStrategy: RetryStrategy? = nil, startedAt: Int64, status: JobStatus, statusReason: String? = nil, stoppedAt: Int64? = nil, tags: [String: String]? = nil, timeout: JobTimeout? = nil) {
            self.arrayProperties = arrayProperties
            self.attempts = attempts
            self.container = container
            self.createdAt = createdAt
            self.dependsOn = dependsOn
            self.jobArn = jobArn
            self.jobDefinition = jobDefinition
            self.jobId = jobId
            self.jobName = jobName
            self.jobQueue = jobQueue
            self.nodeDetails = nodeDetails
            self.nodeProperties = nodeProperties
            self.parameters = parameters
            self.platformCapabilities = platformCapabilities
            self.propagateTags = propagateTags
            self.retryStrategy = retryStrategy
            self.startedAt = startedAt
            self.status = status
            self.statusReason = statusReason
            self.stoppedAt = stoppedAt
            self.tags = tags
            self.timeout = timeout
        }

        private enum CodingKeys: String, CodingKey {
            case arrayProperties
            case attempts
            case container
            case createdAt
            case dependsOn
            case jobArn
            case jobDefinition
            case jobId
            case jobName
            case jobQueue
            case nodeDetails
            case nodeProperties
            case parameters
            case platformCapabilities
            case propagateTags
            case retryStrategy
            case startedAt
            case status
            case statusReason
            case stoppedAt
            case tags
            case timeout
        }
    }

    public struct JobQueueDetail: AWSDecodableShape {
        /// The compute environments that are attached to the job queue and the order that job placement is preferred. Compute environments are selected for job placement in ascending order.
        public let computeEnvironmentOrder: [ComputeEnvironmentOrder]
        /// The Amazon Resource Name (ARN) of the job queue.
        public let jobQueueArn: String
        /// The name of the job queue.
        public let jobQueueName: String
        /// The priority of the job queue. Job queues with a higher priority (or a higher integer value for the priority parameter) are evaluated first when associated with the same compute environment. Priority is determined in descending order, for example, a job queue with a priority value of 10 is given scheduling preference over a job queue with a priority value of 1. All of the compute environments must be either EC2 (EC2 or SPOT) or Fargate (FARGATE or FARGATE_SPOT); EC2 and Fargate compute environments can't be mixed.
        public let priority: Int
        /// Describes the ability of the queue to accept new jobs. If the job queue state is ENABLED, it's able to accept jobs. If the job queue state is DISABLED, new jobs can't be added to the queue, but jobs already in the queue can finish.
        public let state: JQState
        /// The status of the job queue (for example, CREATING or VALID).
        public let status: JQStatus?
        /// A short, human-readable string to provide additional details about the current status of the job queue.
        public let statusReason: String?
        /// The tags applied to the job queue. For more information, see Tagging your Batch resources in Batch User Guide.
        public let tags: [String: String]?

        public init(computeEnvironmentOrder: [ComputeEnvironmentOrder], jobQueueArn: String, jobQueueName: String, priority: Int, state: JQState, status: JQStatus? = nil, statusReason: String? = nil, tags: [String: String]? = nil) {
            self.computeEnvironmentOrder = computeEnvironmentOrder
            self.jobQueueArn = jobQueueArn
            self.jobQueueName = jobQueueName
            self.priority = priority
            self.state = state
            self.status = status
            self.statusReason = statusReason
            self.tags = tags
        }

        private enum CodingKeys: String, CodingKey {
            case computeEnvironmentOrder
            case jobQueueArn
            case jobQueueName
            case priority
            case state
            case status
            case statusReason
            case tags
        }
    }

    public struct JobSummary: AWSDecodableShape {
        /// The array properties of the job, if it is an array job.
        public let arrayProperties: ArrayPropertiesSummary?
        /// An object representing the details of the container that's associated with the job.
        public let container: ContainerSummary?
        /// The Unix timestamp for when the job was created. For non-array jobs and parent array jobs, this is when the job entered the SUBMITTED state (at the time SubmitJob was called). For array child jobs, this is when the child job was spawned by its parent and entered the PENDING state.
        public let createdAt: Int64?
        /// The Amazon Resource Name (ARN) of the job.
        public let jobArn: String?
        /// The Amazon Resource Name (ARN) of the job definition.
        public let jobDefinition: String?
        /// The ID of the job.
        public let jobId: String
        /// The name of the job.
        public let jobName: String
        /// The node properties for a single node in a job summary list.  This isn't applicable to jobs that are running on Fargate resources.
        public let nodeProperties: NodePropertiesSummary?
        /// The Unix timestamp for when the job was started (when the job transitioned from the STARTING state to the RUNNING state).
        public let startedAt: Int64?
        /// The current status for the job.
        public let status: JobStatus?
        /// A short, human-readable string to provide additional details about the current status of the job.
        public let statusReason: String?
        /// The Unix timestamp for when the job was stopped (when the job transitioned from the RUNNING state to a terminal state, such as SUCCEEDED or FAILED).
        public let stoppedAt: Int64?

        public init(arrayProperties: ArrayPropertiesSummary? = nil, container: ContainerSummary? = nil, createdAt: Int64? = nil, jobArn: String? = nil, jobDefinition: String? = nil, jobId: String, jobName: String, nodeProperties: NodePropertiesSummary? = nil, startedAt: Int64? = nil, status: JobStatus? = nil, statusReason: String? = nil, stoppedAt: Int64? = nil) {
            self.arrayProperties = arrayProperties
            self.container = container
            self.createdAt = createdAt
            self.jobArn = jobArn
            self.jobDefinition = jobDefinition
            self.jobId = jobId
            self.jobName = jobName
            self.nodeProperties = nodeProperties
            self.startedAt = startedAt
            self.status = status
            self.statusReason = statusReason
            self.stoppedAt = stoppedAt
        }

        private enum CodingKeys: String, CodingKey {
            case arrayProperties
            case container
            case createdAt
            case jobArn
            case jobDefinition
            case jobId
            case jobName
            case nodeProperties
            case startedAt
            case status
            case statusReason
            case stoppedAt
        }
    }

    public struct JobTimeout: AWSEncodableShape & AWSDecodableShape {
        /// The time duration in seconds (measured from the job attempt's startedAt timestamp) after which Batch terminates your jobs if they have not finished. The minimum value for the timeout is 60 seconds.
        public let attemptDurationSeconds: Int?

        public init(attemptDurationSeconds: Int? = nil) {
            self.attemptDurationSeconds = attemptDurationSeconds
        }

        private enum CodingKeys: String, CodingKey {
            case attemptDurationSeconds
        }
    }

    public struct KeyValuePair: AWSEncodableShape & AWSDecodableShape {
        /// The name of the key-value pair. For environment variables, this is the name of the environment variable.
        public let name: String?
        /// The value of the key-value pair. For environment variables, this is the value of the environment variable.
        public let value: String?

        public init(name: String? = nil, value: String? = nil) {
            self.name = name
            self.value = value
        }

        private enum CodingKeys: String, CodingKey {
            case name
            case value
        }
    }

    public struct KeyValuesPair: AWSEncodableShape {
        /// The name of the filter. Filter names are case sensitive.
        public let name: String?
        /// The filter values.
        public let values: [String]?

        public init(name: String? = nil, values: [String]? = nil) {
            self.name = name
            self.values = values
        }

        private enum CodingKeys: String, CodingKey {
            case name
            case values
        }
    }

    public struct LaunchTemplateSpecification: AWSEncodableShape & AWSDecodableShape {
        /// The ID of the launch template.
        public let launchTemplateId: String?
        /// The name of the launch template.
        public let launchTemplateName: String?
        /// The version number of the launch template, $Latest, or $Default. If the value is $Latest, the latest version of the launch template is used. If the value is $Default, the default version of the launch template is used.  After the compute environment is created, the launch template version that's used isn't changed, even if the $Default or $Latest version for the launch template is updated. To use a new launch template version, create a new compute environment, add the new compute environment to the existing job queue, remove the old compute environment from the job queue, and delete the old compute environment.  Default: $Default.
        public let version: String?

        public init(launchTemplateId: String? = nil, launchTemplateName: String? = nil, version: String? = nil) {
            self.launchTemplateId = launchTemplateId
            self.launchTemplateName = launchTemplateName
            self.version = version
        }

        private enum CodingKeys: String, CodingKey {
            case launchTemplateId
            case launchTemplateName
            case version
        }
    }

    public struct LinuxParameters: AWSEncodableShape & AWSDecodableShape {
        /// Any host devices to expose to the container. This parameter maps to Devices in the Create a container section of the Docker Remote API and the --device option to docker run.  This parameter isn't applicable to jobs that are running on Fargate resources and shouldn't be provided.
        public let devices: [Device]?
        /// If true, run an init process inside the container that forwards signals and reaps processes. This parameter maps to the --init option to docker run. This parameter requires version 1.25 of the Docker Remote API or greater on your container instance. To check the Docker Remote API version on your container instance, log into your container instance and run the following command: sudo docker version | grep "Server API version"
        public let initProcessEnabled: Bool?
        /// The total amount of swap memory (in MiB) a container can use. This parameter is translated to the --memory-swap option to docker run where the value is the sum of the container memory plus the maxSwap value. For more information, see  --memory-swap details in the Docker documentation. If a maxSwap value of 0 is specified, the container doesn't use swap. Accepted values are 0 or any positive integer. If the maxSwap parameter is omitted, the container doesn't use the swap configuration for the container instance it is running on. A maxSwap value must be set for the swappiness parameter to be used.  This parameter isn't applicable to jobs that are running on Fargate resources and shouldn't be provided.
        public let maxSwap: Int?
        /// The value for the size (in MiB) of the /dev/shm volume. This parameter maps to the --shm-size option to docker run.  This parameter isn't applicable to jobs that are running on Fargate resources and shouldn't be provided.
        public let sharedMemorySize: Int?
        /// This allows you to tune a container's memory swappiness behavior. A swappiness value of 0 causes swapping not to happen unless absolutely necessary. A swappiness value of 100 causes pages to be swapped very aggressively. Accepted values are whole numbers between 0 and 100. If the swappiness parameter isn't specified, a default value of 60 is used. If a value isn't specified for maxSwap, then this parameter is ignored. If maxSwap is set to 0, the container doesn't use swap. This parameter maps to the --memory-swappiness option to docker run. Consider the following when you use a per-container swap configuration.   Swap space must be enabled and allocated on the container instance for the containers to use.  The Amazon ECS optimized AMIs don't have swap enabled by default. You must enable swap on the instance to use this feature. For more information, see Instance Store Swap Volumes in the Amazon EC2 User Guide for Linux Instances or How do I allocate memory to work as swap space in an Amazon EC2 instance by using a swap file?     The swap space parameters are only supported for job definitions using EC2 resources.   If the maxSwap and swappiness parameters are omitted from a job definition, each container will have a default swappiness value of 60, and the total swap usage will be limited to two times the memory reservation of the container.    This parameter isn't applicable to jobs that are running on Fargate resources and shouldn't be provided.
        public let swappiness: Int?
        /// The container path, mount options, and size (in MiB) of the tmpfs mount. This parameter maps to the --tmpfs option to docker run.  This parameter isn't applicable to jobs that are running on Fargate resources and shouldn't be provided.
        public let tmpfs: [Tmpfs]?

        public init(devices: [Device]? = nil, initProcessEnabled: Bool? = nil, maxSwap: Int? = nil, sharedMemorySize: Int? = nil, swappiness: Int? = nil, tmpfs: [Tmpfs]? = nil) {
            self.devices = devices
            self.initProcessEnabled = initProcessEnabled
            self.maxSwap = maxSwap
            self.sharedMemorySize = sharedMemorySize
            self.swappiness = swappiness
            self.tmpfs = tmpfs
        }

        private enum CodingKeys: String, CodingKey {
            case devices
            case initProcessEnabled
            case maxSwap
            case sharedMemorySize
            case swappiness
            case tmpfs
        }
    }

    public struct ListJobsRequest: AWSEncodableShape {
        /// The job ID for an array job. Specifying an array job ID with this parameter lists all child jobs from within the specified array.
        public let arrayJobId: String?
        /// The filter to apply to the query. Only one filter can be used at a time. When the filter is used, jobStatus is ignored. The filter doesn't apply to child jobs in an array or multi-node parallel (MNP) jobs. The results are sorted by the createdAt field, with the most recent jobs being first.  JOB_NAME  The value of the filter is a case-insensitive match for the job name. If the value ends with an asterisk (*), the filter will match any job name that begins with the string before the '*'. This corresponds to the jobName value. For example, test1 matches both Test1 and test1, and test1* matches both test1 and Test10. When the JOB_NAME filter is used, the results are grouped by the job name and version.  JOB_DEFINITION  The value for the filter is the name or Amazon Resource Name (ARN) of the job definition. This corresponds to the jobDefinition value. The value is case sensitive. When the value for the filter is the job definition name, the results include all the jobs that used any revision of that job definition name. If the value ends with an asterisk (*), the filter will match any job definition name that begins with the string before the '*'. For example, jd1 matches only jd1, and jd1* matches both jd1 and jd1A. The version of the job definition that's used doesn't affect the sort order. When the JOB_DEFINITION filter is used and the ARN is used (which is in the form arn:${Partition}:batch:${Region}:${Account}:job-definition/${JobDefinitionName}:${Revision}), the results include jobs that used the specified revision of the job definition. Asterisk (*) is not supported when the ARN is used.  BEFORE_CREATED_AT  The value for the filter is the time that's before the job was created. This corresponds to the createdAt value. The value is a string representation of the number of seconds since 00:00:00 UTC (midnight) on January 1, 1970.  AFTER_CREATED_AT  The value for the filter is the time that's after the job was created. This corresponds to the createdAt value. The value is a string representation of the number of seconds since 00:00:00 UTC (midnight) on January 1, 1970.
        public let filters: [KeyValuesPair]?
        /// The name or full Amazon Resource Name (ARN) of the job queue used to list jobs.
        public let jobQueue: String?
        /// The job status used to filter jobs in the specified queue. If the filters parameter is specified, the jobStatus parameter is ignored and jobs with any status are returned. If you don't specify a status, only RUNNING jobs are returned.
        public let jobStatus: JobStatus?
        /// The maximum number of results returned by ListJobs in paginated output. When this parameter is used, ListJobs only returns maxResults results in a single page and a nextToken response element. The remaining results of the initial request can be seen by sending another ListJobs request with the returned nextToken value. This value can be between 1 and 100. If this parameter isn't used, then ListJobs returns up to 100 results and a nextToken value if applicable.
        public let maxResults: Int?
        /// The job ID for a multi-node parallel job. Specifying a multi-node parallel job ID with this parameter lists all nodes that are associated with the specified job.
        public let multiNodeJobId: String?
        /// The nextToken value returned from a previous paginated ListJobs request where maxResults was used and the results exceeded the value of that parameter. Pagination continues from the end of the previous results that returned the nextToken value. This value is null when there are no more results to return.  This token should be treated as an opaque identifier that's only used to retrieve the next items in a list and not for other programmatic purposes.
        public let nextToken: String?

        public init(arrayJobId: String? = nil, filters: [KeyValuesPair]? = nil, jobQueue: String? = nil, jobStatus: JobStatus? = nil, maxResults: Int? = nil, multiNodeJobId: String? = nil, nextToken: String? = nil) {
            self.arrayJobId = arrayJobId
            self.filters = filters
            self.jobQueue = jobQueue
            self.jobStatus = jobStatus
            self.maxResults = maxResults
            self.multiNodeJobId = multiNodeJobId
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case arrayJobId
            case filters
            case jobQueue
            case jobStatus
            case maxResults
            case multiNodeJobId
            case nextToken
        }
    }

    public struct ListJobsResponse: AWSDecodableShape {
        /// A list of job summaries that match the request.
        public let jobSummaryList: [JobSummary]
        /// The nextToken value to include in a future ListJobs request. When the results of a ListJobs request exceed maxResults, this value can be used to retrieve the next page of results. This value is null when there are no more results to return.
        public let nextToken: String?

        public init(jobSummaryList: [JobSummary], nextToken: String? = nil) {
            self.jobSummaryList = jobSummaryList
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case jobSummaryList
            case nextToken
        }
    }

    public struct ListTagsForResourceRequest: AWSEncodableShape {
        public static var _encoding = [
            AWSMemberEncoding(label: "resourceArn", location: .uri(locationName: "resourceArn"))
        ]

        /// The Amazon Resource Name (ARN) that identifies the resource that tags are listed for. Batch resources that support tags are compute environments, jobs, job definitions, and job queues. ARNs for child jobs of array and multi-node parallel (MNP) jobs are not supported.
        public let resourceArn: String

        public init(resourceArn: String) {
            self.resourceArn = resourceArn
        }

        private enum CodingKeys: CodingKey {}
    }

    public struct ListTagsForResourceResponse: AWSDecodableShape {
        /// The tags for the resource.
        public let tags: [String: String]?

        public init(tags: [String: String]? = nil) {
            self.tags = tags
        }

        private enum CodingKeys: String, CodingKey {
            case tags
        }
    }

    public struct LogConfiguration: AWSEncodableShape & AWSDecodableShape {
        /// The log driver to use for the container. The valid values listed for this parameter are log drivers that the Amazon ECS container agent can communicate with by default. The supported log drivers are awslogs, fluentd, gelf, json-file, journald, logentries, syslog, and splunk.  Jobs that are running on Fargate resources are restricted to the awslogs and splunk log drivers.   awslogs  Specifies the Amazon CloudWatch Logs logging driver. For more information, see Using the awslogs Log Driver in the Batch User Guide and Amazon CloudWatch Logs logging driver in the Docker documentation.  fluentd  Specifies the Fluentd logging driver. For more information, including usage and options, see Fluentd logging driver in the Docker documentation.  gelf  Specifies the Graylog Extended Format (GELF) logging driver. For more information, including usage and options, see Graylog Extended Format logging driver in the Docker documentation.  journald  Specifies the journald logging driver. For more information, including usage and options, see Journald logging driver in the Docker documentation.  json-file  Specifies the JSON file logging driver. For more information, including usage and options, see JSON File logging driver in the Docker documentation.  splunk  Specifies the Splunk logging driver. For more information, including usage and options, see Splunk logging driver in the Docker documentation.  syslog  Specifies the syslog logging driver. For more information, including usage and options, see Syslog logging driver in the Docker documentation.    If you have a custom driver that's not listed earlier that you want to work with the Amazon ECS container agent, you can fork the Amazon ECS container agent project that's available on GitHub and customize it to work with that driver. We encourage you to submit pull requests for changes that you want to have included. However, Amazon Web Services doesn't currently support running modified copies of this software.  This parameter requires version 1.18 of the Docker Remote API or greater on your container instance. To check the Docker Remote API version on your container instance, log into your container instance and run the following command: sudo docker version | grep "Server API version"
        public let logDriver: LogDriver
        /// The configuration options to send to the log driver. This parameter requires version 1.19 of the Docker Remote API or greater on your container instance. To check the Docker Remote API version on your container instance, log into your container instance and run the following command: sudo docker version | grep "Server API version"
        public let options: [String: String]?
        /// The secrets to pass to the log configuration. For more information, see Specifying Sensitive Data in the Batch User Guide.
        public let secretOptions: [Secret]?

        public init(logDriver: LogDriver, options: [String: String]? = nil, secretOptions: [Secret]? = nil) {
            self.logDriver = logDriver
            self.options = options
            self.secretOptions = secretOptions
        }

        private enum CodingKeys: String, CodingKey {
            case logDriver
            case options
            case secretOptions
        }
    }

    public struct MountPoint: AWSEncodableShape & AWSDecodableShape {
        /// The path on the container where the host volume is mounted.
        public let containerPath: String?
        /// If this value is true, the container has read-only access to the volume. Otherwise, the container can write to the volume. The default value is false.
        public let readOnly: Bool?
        /// The name of the volume to mount.
        public let sourceVolume: String?

        public init(containerPath: String? = nil, readOnly: Bool? = nil, sourceVolume: String? = nil) {
            self.containerPath = containerPath
            self.readOnly = readOnly
            self.sourceVolume = sourceVolume
        }

        private enum CodingKeys: String, CodingKey {
            case containerPath
            case readOnly
            case sourceVolume
        }
    }

    public struct NetworkConfiguration: AWSEncodableShape & AWSDecodableShape {
        /// Indicates whether the job should have a public IP address. For a job that is running on Fargate resources in a private subnet to send outbound traffic to the internet (for example, to pull container images), the private subnet requires a NAT gateway be attached to route requests to the internet. For more information, see Amazon ECS task networking. The default value is "DISABLED".
        public let assignPublicIp: AssignPublicIp?

        public init(assignPublicIp: AssignPublicIp? = nil) {
            self.assignPublicIp = assignPublicIp
        }

        private enum CodingKeys: String, CodingKey {
            case assignPublicIp
        }
    }

    public struct NetworkInterface: AWSDecodableShape {
        /// The attachment ID for the network interface.
        public let attachmentId: String?
        /// The private IPv6 address for the network interface.
        public let ipv6Address: String?
        /// The private IPv4 address for the network interface.
        public let privateIpv4Address: String?

        public init(attachmentId: String? = nil, ipv6Address: String? = nil, privateIpv4Address: String? = nil) {
            self.attachmentId = attachmentId
            self.ipv6Address = ipv6Address
            self.privateIpv4Address = privateIpv4Address
        }

        private enum CodingKeys: String, CodingKey {
            case attachmentId
            case ipv6Address
            case privateIpv4Address
        }
    }

    public struct NodeDetails: AWSDecodableShape {
        /// Specifies whether the current node is the main node for a multi-node parallel job.
        public let isMainNode: Bool?
        /// The node index for the node. Node index numbering begins at zero. This index is also available on the node with the AWS_BATCH_JOB_NODE_INDEX environment variable.
        public let nodeIndex: Int?

        public init(isMainNode: Bool? = nil, nodeIndex: Int? = nil) {
            self.isMainNode = isMainNode
            self.nodeIndex = nodeIndex
        }

        private enum CodingKeys: String, CodingKey {
            case isMainNode
            case nodeIndex
        }
    }

    public struct NodeOverrides: AWSEncodableShape {
        /// The node property overrides for the job.
        public let nodePropertyOverrides: [NodePropertyOverride]?
        /// The number of nodes to use with a multi-node parallel job. This value overrides the number of nodes that are specified in the job definition. To use this override:   There must be at least one node range in your job definition that has an open upper boundary (such as : or n:).   The lower boundary of the node range specified in the job definition must be fewer than the number of nodes specified in the override.   The main node index specified in the job definition must be fewer than the number of nodes specified in the override.
        public let numNodes: Int?

        public init(nodePropertyOverrides: [NodePropertyOverride]? = nil, numNodes: Int? = nil) {
            self.nodePropertyOverrides = nodePropertyOverrides
            self.numNodes = numNodes
        }

        private enum CodingKeys: String, CodingKey {
            case nodePropertyOverrides
            case numNodes
        }
    }

    public struct NodeProperties: AWSEncodableShape & AWSDecodableShape {
        /// Specifies the node index for the main node of a multi-node parallel job. This node index value must be fewer than the number of nodes.
        public let mainNode: Int
        /// A list of node ranges and their properties associated with a multi-node parallel job.
        public let nodeRangeProperties: [NodeRangeProperty]
        /// The number of nodes associated with a multi-node parallel job.
        public let numNodes: Int

        public init(mainNode: Int, nodeRangeProperties: [NodeRangeProperty], numNodes: Int) {
            self.mainNode = mainNode
            self.nodeRangeProperties = nodeRangeProperties
            self.numNodes = numNodes
        }

        private enum CodingKeys: String, CodingKey {
            case mainNode
            case nodeRangeProperties
            case numNodes
        }
    }

    public struct NodePropertiesSummary: AWSDecodableShape {
        /// Specifies whether the current node is the main node for a multi-node parallel job.
        public let isMainNode: Bool?
        /// The node index for the node. Node index numbering begins at zero. This index is also available on the node with the AWS_BATCH_JOB_NODE_INDEX environment variable.
        public let nodeIndex: Int?
        /// The number of nodes associated with a multi-node parallel job.
        public let numNodes: Int?

        public init(isMainNode: Bool? = nil, nodeIndex: Int? = nil, numNodes: Int? = nil) {
            self.isMainNode = isMainNode
            self.nodeIndex = nodeIndex
            self.numNodes = numNodes
        }

        private enum CodingKeys: String, CodingKey {
            case isMainNode
            case nodeIndex
            case numNodes
        }
    }

    public struct NodePropertyOverride: AWSEncodableShape {
        /// The overrides that should be sent to a node range.
        public let containerOverrides: ContainerOverrides?
        /// The range of nodes, using node index values, that's used to override. A range of 0:3 indicates nodes with index values of 0 through 3. If the starting range value is omitted (:n), then 0 is used to start the range. If the ending range value is omitted (n:), then the highest possible node index is used to end the range.
        public let targetNodes: String

        public init(containerOverrides: ContainerOverrides? = nil, targetNodes: String) {
            self.containerOverrides = containerOverrides
            self.targetNodes = targetNodes
        }

        private enum CodingKeys: String, CodingKey {
            case containerOverrides
            case targetNodes
        }
    }

    public struct NodeRangeProperty: AWSEncodableShape & AWSDecodableShape {
        /// The container details for the node range.
        public let container: ContainerProperties?
        /// The range of nodes, using node index values. A range of 0:3 indicates nodes with index values of 0 through 3. If the starting range value is omitted (:n), then 0 is used to start the range. If the ending range value is omitted (n:), then the highest possible node index is used to end the range. Your accumulative node ranges must account for all nodes (0:n). You can nest node ranges, for example 0:10 and 4:5, in which case the 4:5 range properties override the 0:10 properties.
        public let targetNodes: String

        public init(container: ContainerProperties? = nil, targetNodes: String) {
            self.container = container
            self.targetNodes = targetNodes
        }

        private enum CodingKeys: String, CodingKey {
            case container
            case targetNodes
        }
    }

    public struct RegisterJobDefinitionRequest: AWSEncodableShape {
        /// An object with various properties specific to single-node container-based jobs. If the job definition's type parameter is container, then you must specify either containerProperties or nodeProperties.  If the job runs on Fargate resources, then you must not specify nodeProperties; use only containerProperties.
        public let containerProperties: ContainerProperties?
        /// The name of the job definition to register. Up to 128 letters (uppercase and lowercase), numbers, hyphens, and underscores are allowed.
        public let jobDefinitionName: String
        /// An object with various properties specific to multi-node parallel jobs. If you specify node properties for a job, it becomes a multi-node parallel job. For more information, see Multi-node Parallel Jobs in the Batch User Guide. If the job definition's type parameter is container, then you must specify either containerProperties or nodeProperties.  If the job runs on Fargate resources, then you must not specify nodeProperties; use containerProperties instead.
        public let nodeProperties: NodeProperties?
        /// Default parameter substitution placeholders to set in the job definition. Parameters are specified as a key-value pair mapping. Parameters in a SubmitJob request override any corresponding parameter defaults from the job definition.
        public let parameters: [String: String]?
        /// The platform capabilities required by the job definition. If no value is specified, it defaults to EC2. To run the job on Fargate resources, specify FARGATE.
        public let platformCapabilities: [PlatformCapability]?
        /// Specifies whether to propagate the tags from the job or job definition to the corresponding Amazon ECS task. If no value is specified, the tags are not propagated. Tags can only be propagated to the tasks during task creation. For tags with the same name, job tags are given priority over job definitions tags. If the total number of combined tags from the job and job definition is over 50, the job is moved to the FAILED state.
        public let propagateTags: Bool?
        /// The retry strategy to use for failed jobs that are submitted with this job definition. Any retry strategy that's specified during a SubmitJob operation overrides the retry strategy defined here. If a job is terminated due to a timeout, it isn't retried.
        public let retryStrategy: RetryStrategy?
        /// The tags that you apply to the job definition to help you categorize and organize your resources. Each tag consists of a key and an optional value. For more information, see Tagging Amazon Web Services Resources in Batch User Guide.
        public let tags: [String: String]?
        /// The timeout configuration for jobs that are submitted with this job definition, after which Batch terminates your jobs if they have not finished. If a job is terminated due to a timeout, it isn't retried. The minimum value for the timeout is 60 seconds. Any timeout configuration that's specified during a SubmitJob operation overrides the timeout configuration defined here. For more information, see Job Timeouts in the Batch User Guide.
        public let timeout: JobTimeout?
        /// The type of job definition. For more information about multi-node parallel jobs, see Creating a multi-node parallel job definition in the Batch User Guide.  If the job is run on Fargate resources, then multinode isn't supported.
        public let type: JobDefinitionType

        public init(containerProperties: ContainerProperties? = nil, jobDefinitionName: String, nodeProperties: NodeProperties? = nil, parameters: [String: String]? = nil, platformCapabilities: [PlatformCapability]? = nil, propagateTags: Bool? = nil, retryStrategy: RetryStrategy? = nil, tags: [String: String]? = nil, timeout: JobTimeout? = nil, type: JobDefinitionType) {
            self.containerProperties = containerProperties
            self.jobDefinitionName = jobDefinitionName
            self.nodeProperties = nodeProperties
            self.parameters = parameters
            self.platformCapabilities = platformCapabilities
            self.propagateTags = propagateTags
            self.retryStrategy = retryStrategy
            self.tags = tags
            self.timeout = timeout
            self.type = type
        }

        public func validate(name: String) throws {
            try self.tags?.forEach {
                try validate($0.key, name: "tags.key", parent: name, max: 128)
                try validate($0.key, name: "tags.key", parent: name, min: 1)
                try validate($0.value, name: "tags[\"\($0.key)\"]", parent: name, max: 256)
            }
        }

        private enum CodingKeys: String, CodingKey {
            case containerProperties
            case jobDefinitionName
            case nodeProperties
            case parameters
            case platformCapabilities
            case propagateTags
            case retryStrategy
            case tags
            case timeout
            case type
        }
    }

    public struct RegisterJobDefinitionResponse: AWSDecodableShape {
        /// The Amazon Resource Name (ARN) of the job definition.
        public let jobDefinitionArn: String
        /// The name of the job definition.
        public let jobDefinitionName: String
        /// The revision of the job definition.
        public let revision: Int

        public init(jobDefinitionArn: String, jobDefinitionName: String, revision: Int) {
            self.jobDefinitionArn = jobDefinitionArn
            self.jobDefinitionName = jobDefinitionName
            self.revision = revision
        }

        private enum CodingKeys: String, CodingKey {
            case jobDefinitionArn
            case jobDefinitionName
            case revision
        }
    }

    public struct ResourceRequirement: AWSEncodableShape & AWSDecodableShape {
        /// The type of resource to assign to a container. The supported resources include GPU, MEMORY, and VCPU.
        public let type: ResourceType
        /// The quantity of the specified resource to reserve for the container. The values vary based on the type specified.  type="GPU"  The number of physical GPUs to reserve for the container. The number of GPUs reserved for all containers in a job shouldn't exceed the number of available GPUs on the compute resource that the job is launched on.  GPUs are not available for jobs that are running on Fargate resources.   type="MEMORY"  The memory hard limit (in MiB) present to the container. This parameter is supported for jobs that are running on EC2 resources. If your container attempts to exceed the memory specified, the container is terminated. This parameter maps to Memory in the Create a container section of the Docker Remote API and the --memory option to docker run. You must specify at least 4 MiB of memory for a job. This is required but can be specified in several places for multi-node parallel (MNP) jobs. It must be specified for each node at least once. This parameter maps to Memory in the Create a container section of the Docker Remote API and the --memory option to docker run.  If you're trying to maximize your resource utilization by providing your jobs as much memory as possible for a particular instance type, see Memory Management in the Batch User Guide.  For jobs that are running on Fargate resources, then value is the hard limit (in MiB), and must match one of the supported values and the VCPU values must be one of the values supported for that memory value.  value = 512   VCPU = 0.25  value = 1024   VCPU = 0.25 or 0.5  value = 2048   VCPU = 0.25, 0.5, or 1  value = 3072   VCPU = 0.5, or 1  value = 4096   VCPU = 0.5, 1, or 2  value = 5120, 6144, or 7168   VCPU = 1 or 2  value = 8192   VCPU = 1, 2, or 4  value = 9216, 10240, 11264, 12288, 13312, 14336, 15360, or 16384   VCPU = 2 or 4  value = 17408, 18432, 19456, 20480, 21504, 22528, 23552, 24576, 25600, 26624, 27648, 28672, 29696, or 30720   VCPU = 4    type="VCPU"  The number of vCPUs reserved for the container. This parameter maps to CpuShares in the Create a container section of the Docker Remote API and the --cpu-shares option to docker run. Each vCPU is equivalent to 1,024 CPU shares. For EC2 resources, you must specify at least one vCPU. This is required but can be specified in several places; it must be specified for each node at least once. For jobs that are running on Fargate resources, then value must match one of the supported values and the MEMORY values must be one of the values supported for that VCPU value. The supported values are 0.25, 0.5, 1, 2, and 4  value = 0.25   MEMORY = 512, 1024, or 2048  value = 0.5   MEMORY = 1024, 2048, 3072, or 4096  value = 1   MEMORY = 2048, 3072, 4096, 5120, 6144, 7168, or 8192  value = 2   MEMORY = 4096, 5120, 6144, 7168, 8192, 9216, 10240, 11264, 12288, 13312, 14336, 15360, or 16384  value = 4   MEMORY = 8192, 9216, 10240, 11264, 12288, 13312, 14336, 15360, 16384, 17408, 18432, 19456, 20480, 21504, 22528, 23552, 24576, 25600, 26624, 27648, 28672, 29696, or 30720
        public let value: String

        public init(type: ResourceType, value: String) {
            self.type = type
            self.value = value
        }

        private enum CodingKeys: String, CodingKey {
            case type
            case value
        }
    }

    public struct RetryStrategy: AWSEncodableShape & AWSDecodableShape {
        /// The number of times to move a job to the RUNNABLE status. You can specify between 1 and 10 attempts. If the value of attempts is greater than one, the job is retried on failure the same number of attempts as the value.
        public let attempts: Int?
        /// Array of up to 5 objects that specify conditions under which the job should be retried or failed. If this parameter is specified, then the attempts parameter must also be specified.
        public let evaluateOnExit: [EvaluateOnExit]?

        public init(attempts: Int? = nil, evaluateOnExit: [EvaluateOnExit]? = nil) {
            self.attempts = attempts
            self.evaluateOnExit = evaluateOnExit
        }

        private enum CodingKeys: String, CodingKey {
            case attempts
            case evaluateOnExit
        }
    }

    public struct Secret: AWSEncodableShape & AWSDecodableShape {
        /// The name of the secret.
        public let name: String
        /// The secret to expose to the container. The supported values are either the full ARN of the Secrets Manager secret or the full ARN of the parameter in the Amazon Web Services Systems Manager Parameter Store.  If the Amazon Web Services Systems Manager Parameter Store parameter exists in the same Region as the job you're launching, then you can use either the full ARN or name of the parameter. If the parameter exists in a different Region, then the full ARN must be specified.
        public let valueFrom: String

        public init(name: String, valueFrom: String) {
            self.name = name
            self.valueFrom = valueFrom
        }

        private enum CodingKeys: String, CodingKey {
            case name
            case valueFrom
        }
    }

    public struct SubmitJobRequest: AWSEncodableShape {
        /// The array properties for the submitted job, such as the size of the array. The array size can be between 2 and 10,000. If you specify array properties for a job, it becomes an array job. For more information, see Array Jobs in the Batch User Guide.
        public let arrayProperties: ArrayProperties?
        /// A list of container overrides in the JSON format that specify the name of a container in the specified job definition and the overrides it should receive. You can override the default command for a container, which is specified in the job definition or the Docker image, with a command override. You can also override existing environment variables on a container or add new environment variables to it with an environment override.
        public let containerOverrides: ContainerOverrides?
        /// A list of dependencies for the job. A job can depend upon a maximum of 20 jobs. You can specify a SEQUENTIAL type dependency without specifying a job ID for array jobs so that each child array job completes sequentially, starting at index 0. You can also specify an N_TO_N type dependency with a job ID for array jobs. In that case, each index child of this job must wait for the corresponding index child of each dependency to complete before it can begin.
        public let dependsOn: [JobDependency]?
        /// The job definition used by this job. This value can be one of name, name:revision, or the Amazon Resource Name (ARN) for the job definition. If name is specified without a revision then the latest active revision is used.
        public let jobDefinition: String
        /// The name of the job. The first character must be alphanumeric, and up to 128 letters (uppercase and lowercase), numbers, hyphens, and underscores are allowed.
        public let jobName: String
        /// The job queue where the job is submitted. You can specify either the name or the Amazon Resource Name (ARN) of the queue.
        public let jobQueue: String
        /// A list of node overrides in JSON format that specify the node range to target and the container overrides for that node range.  This parameter isn't applicable to jobs that are running on Fargate resources; use containerOverrides instead.
        public let nodeOverrides: NodeOverrides?
        /// Additional parameters passed to the job that replace parameter substitution placeholders that are set in the job definition. Parameters are specified as a key and value pair mapping. Parameters in a SubmitJob request override any corresponding parameter defaults from the job definition.
        public let parameters: [String: String]?
        /// Specifies whether to propagate the tags from the job or job definition to the corresponding Amazon ECS task. If no value is specified, the tags aren't propagated. Tags can only be propagated to the tasks during task creation. For tags with the same name, job tags are given priority over job definitions tags. If the total number of combined tags from the job and job definition is over 50, the job is moved to the FAILED state. When specified, this overrides the tag propagation setting in the job definition.
        public let propagateTags: Bool?
        /// The retry strategy to use for failed jobs from this SubmitJob operation. When a retry strategy is specified here, it overrides the retry strategy defined in the job definition.
        public let retryStrategy: RetryStrategy?
        /// The tags that you apply to the job request to help you categorize and organize your resources. Each tag consists of a key and an optional value. For more information, see Tagging Amazon Web Services Resources in Amazon Web Services General Reference.
        public let tags: [String: String]?
        /// The timeout configuration for this SubmitJob operation. You can specify a timeout duration after which Batch terminates your jobs if they haven't finished. If a job is terminated due to a timeout, it isn't retried. The minimum value for the timeout is 60 seconds. This configuration overrides any timeout configuration specified in the job definition. For array jobs, child jobs have the same timeout configuration as the parent job. For more information, see Job Timeouts in the Amazon Elastic Container Service Developer Guide.
        public let timeout: JobTimeout?

        public init(arrayProperties: ArrayProperties? = nil, containerOverrides: ContainerOverrides? = nil, dependsOn: [JobDependency]? = nil, jobDefinition: String, jobName: String, jobQueue: String, nodeOverrides: NodeOverrides? = nil, parameters: [String: String]? = nil, propagateTags: Bool? = nil, retryStrategy: RetryStrategy? = nil, tags: [String: String]? = nil, timeout: JobTimeout? = nil) {
            self.arrayProperties = arrayProperties
            self.containerOverrides = containerOverrides
            self.dependsOn = dependsOn
            self.jobDefinition = jobDefinition
            self.jobName = jobName
            self.jobQueue = jobQueue
            self.nodeOverrides = nodeOverrides
            self.parameters = parameters
            self.propagateTags = propagateTags
            self.retryStrategy = retryStrategy
            self.tags = tags
            self.timeout = timeout
        }

        public func validate(name: String) throws {
            try self.tags?.forEach {
                try validate($0.key, name: "tags.key", parent: name, max: 128)
                try validate($0.key, name: "tags.key", parent: name, min: 1)
                try validate($0.value, name: "tags[\"\($0.key)\"]", parent: name, max: 256)
            }
        }

        private enum CodingKeys: String, CodingKey {
            case arrayProperties
            case containerOverrides
            case dependsOn
            case jobDefinition
            case jobName
            case jobQueue
            case nodeOverrides
            case parameters
            case propagateTags
            case retryStrategy
            case tags
            case timeout
        }
    }

    public struct SubmitJobResponse: AWSDecodableShape {
        /// The Amazon Resource Name (ARN) for the job.
        public let jobArn: String?
        /// The unique identifier for the job.
        public let jobId: String
        /// The name of the job.
        public let jobName: String

        public init(jobArn: String? = nil, jobId: String, jobName: String) {
            self.jobArn = jobArn
            self.jobId = jobId
            self.jobName = jobName
        }

        private enum CodingKeys: String, CodingKey {
            case jobArn
            case jobId
            case jobName
        }
    }

    public struct TagResourceRequest: AWSEncodableShape {
        public static var _encoding = [
            AWSMemberEncoding(label: "resourceArn", location: .uri(locationName: "resourceArn"))
        ]

        /// The Amazon Resource Name (ARN) of the resource that tags are added to. Batch resources that support tags are compute environments, jobs, job definitions, and job queues. ARNs for child jobs of array and multi-node parallel (MNP) jobs are not supported.
        public let resourceArn: String
        /// The tags that you apply to the resource to help you categorize and organize your resources. Each tag consists of a key and an optional value. For more information, see Tagging Amazon Web Services Resources in Amazon Web Services General Reference.
        public let tags: [String: String]

        public init(resourceArn: String, tags: [String: String]) {
            self.resourceArn = resourceArn
            self.tags = tags
        }

        public func validate(name: String) throws {
            try self.tags.forEach {
                try validate($0.key, name: "tags.key", parent: name, max: 128)
                try validate($0.key, name: "tags.key", parent: name, min: 1)
                try validate($0.value, name: "tags[\"\($0.key)\"]", parent: name, max: 256)
            }
        }

        private enum CodingKeys: String, CodingKey {
            case tags
        }
    }

    public struct TagResourceResponse: AWSDecodableShape {
        public init() {}
    }

    public struct TerminateJobRequest: AWSEncodableShape {
        /// The Batch job ID of the job to terminate.
        public let jobId: String
        /// A message to attach to the job that explains the reason for canceling it. This message is returned by future DescribeJobs operations on the job. This message is also recorded in the Batch activity logs.
        public let reason: String

        public init(jobId: String, reason: String) {
            self.jobId = jobId
            self.reason = reason
        }

        private enum CodingKeys: String, CodingKey {
            case jobId
            case reason
        }
    }

    public struct TerminateJobResponse: AWSDecodableShape {
        public init() {}
    }

    public struct Tmpfs: AWSEncodableShape & AWSDecodableShape {
        /// The absolute file path in the container where the tmpfs volume is mounted.
        public let containerPath: String
        /// The list of tmpfs volume mount options. Valid values: "defaults" | "ro" | "rw" | "suid" | "nosuid" | "dev" | "nodev" | "exec" | "noexec" | "sync" | "async" | "dirsync" | "remount" | "mand" | "nomand" | "atime" | "noatime" | "diratime" | "nodiratime" | "bind" | "rbind" | "unbindable" | "runbindable" | "private" | "rprivate" | "shared" | "rshared" | "slave" | "rslave" | "relatime" | "norelatime" | "strictatime" | "nostrictatime" | "mode" | "uid" | "gid" | "nr_inodes" | "nr_blocks" | "mpol"
        public let mountOptions: [String]?
        /// The size (in MiB) of the tmpfs volume.
        public let size: Int

        public init(containerPath: String, mountOptions: [String]? = nil, size: Int) {
            self.containerPath = containerPath
            self.mountOptions = mountOptions
            self.size = size
        }

        private enum CodingKeys: String, CodingKey {
            case containerPath
            case mountOptions
            case size
        }
    }

    public struct Ulimit: AWSEncodableShape & AWSDecodableShape {
        /// The hard limit for the ulimit type.
        public let hardLimit: Int
        /// The type of the ulimit.
        public let name: String
        /// The soft limit for the ulimit type.
        public let softLimit: Int

        public init(hardLimit: Int, name: String, softLimit: Int) {
            self.hardLimit = hardLimit
            self.name = name
            self.softLimit = softLimit
        }

        private enum CodingKeys: String, CodingKey {
            case hardLimit
            case name
            case softLimit
        }
    }

    public struct UntagResourceRequest: AWSEncodableShape {
        public static var _encoding = [
            AWSMemberEncoding(label: "resourceArn", location: .uri(locationName: "resourceArn")),
            AWSMemberEncoding(label: "tagKeys", location: .querystring(locationName: "tagKeys"))
        ]

        /// The Amazon Resource Name (ARN) of the resource from which to delete tags. Batch resources that support tags are compute environments, jobs, job definitions, and job queues. ARNs for child jobs of array and multi-node parallel (MNP) jobs are not supported.
        public let resourceArn: String
        /// The keys of the tags to be removed.
        public let tagKeys: [String]

        public init(resourceArn: String, tagKeys: [String]) {
            self.resourceArn = resourceArn
            self.tagKeys = tagKeys
        }

        public func validate(name: String) throws {
            try self.tagKeys.forEach {
                try validate($0, name: "tagKeys[]", parent: name, max: 128)
                try validate($0, name: "tagKeys[]", parent: name, min: 1)
            }
            try self.validate(self.tagKeys, name: "tagKeys", parent: name, max: 50)
            try self.validate(self.tagKeys, name: "tagKeys", parent: name, min: 1)
        }

        private enum CodingKeys: CodingKey {}
    }

    public struct UntagResourceResponse: AWSDecodableShape {
        public init() {}
    }

    public struct UpdateComputeEnvironmentRequest: AWSEncodableShape {
        /// The name or full Amazon Resource Name (ARN) of the compute environment to update.
        public let computeEnvironment: String
        /// Details of the compute resources managed by the compute environment. Required for a managed compute environment. For more information, see Compute Environments in the Batch User Guide.
        public let computeResources: ComputeResourceUpdate?
        /// The full Amazon Resource Name (ARN) of the IAM role that allows Batch to make calls to other Amazon Web Services services on your behalf. For more information, see Batch service IAM role in the Batch User Guide.  If the compute environment has a service-linked role, it can't be changed to use a regular IAM role. Likewise, if the compute environment has a regular IAM role, it can't be changed to use a service-linked role.  If your specified role has a path other than /, then you must either specify the full role ARN (this is recommended) or prefix the role name with the path.  Depending on how you created your Batch service role, its ARN might contain the service-role path prefix. When you only specify the name of the service role, Batch assumes that your ARN doesn't use the service-role path prefix. Because of this, we recommend that you specify the full ARN of your service role when you create compute environments.
        public let serviceRole: String?
        /// The state of the compute environment. Compute environments in the ENABLED state can accept jobs from a queue and scale in or out automatically based on the workload demand of its associated queues. If the state is ENABLED, then the Batch scheduler can attempt to place jobs from an associated job queue on the compute resources within the environment. If the compute environment is managed, then it can scale its instances out or in automatically, based on the job queue demand. If the state is DISABLED, then the Batch scheduler doesn't attempt to place jobs within the environment. Jobs in a STARTING or RUNNING state continue to progress normally. Managed compute environments in the DISABLED state don't scale out. However, they scale in to minvCpus value after instances become idle.
        public let state: CEState?

        public init(computeEnvironment: String, computeResources: ComputeResourceUpdate? = nil, serviceRole: String? = nil, state: CEState? = nil) {
            self.computeEnvironment = computeEnvironment
            self.computeResources = computeResources
            self.serviceRole = serviceRole
            self.state = state
        }

        private enum CodingKeys: String, CodingKey {
            case computeEnvironment
            case computeResources
            case serviceRole
            case state
        }
    }

    public struct UpdateComputeEnvironmentResponse: AWSDecodableShape {
        /// The Amazon Resource Name (ARN) of the compute environment.
        public let computeEnvironmentArn: String?
        /// The name of the compute environment. Up to 128 letters (uppercase and lowercase), numbers, hyphens, and underscores are allowed.
        public let computeEnvironmentName: String?

        public init(computeEnvironmentArn: String? = nil, computeEnvironmentName: String? = nil) {
            self.computeEnvironmentArn = computeEnvironmentArn
            self.computeEnvironmentName = computeEnvironmentName
        }

        private enum CodingKeys: String, CodingKey {
            case computeEnvironmentArn
            case computeEnvironmentName
        }
    }

    public struct UpdateJobQueueRequest: AWSEncodableShape {
        /// Details the set of compute environments mapped to a job queue and their order relative to each other. This is one of the parameters used by the job scheduler to determine which compute environment should run a given job. Compute environments must be in the VALID state before you can associate them with a job queue. All of the compute environments must be either EC2 (EC2 or SPOT) or Fargate (FARGATE or FARGATE_SPOT). EC2 and Fargate compute environments can't be mixed.  All compute environments that are associated with a job queue must share the same architecture. Batch doesn't support mixing compute environment architecture types in a single job queue.
        public let computeEnvironmentOrder: [ComputeEnvironmentOrder]?
        /// The name or the Amazon Resource Name (ARN) of the job queue.
        public let jobQueue: String
        /// The priority of the job queue. Job queues with a higher priority (or a higher integer value for the priority parameter) are evaluated first when associated with the same compute environment. Priority is determined in descending order, for example, a job queue with a priority value of 10 is given scheduling preference over a job queue with a priority value of 1. All of the compute environments must be either EC2 (EC2 or SPOT) or Fargate (FARGATE or FARGATE_SPOT). EC2 and Fargate compute environments can't be mixed.
        public let priority: Int?
        /// Describes the queue's ability to accept new jobs. If the job queue state is ENABLED, it can accept jobs. If the job queue state is DISABLED, new jobs can't be added to the queue, but jobs already in the queue can finish.
        public let state: JQState?

        public init(computeEnvironmentOrder: [ComputeEnvironmentOrder]? = nil, jobQueue: String, priority: Int? = nil, state: JQState? = nil) {
            self.computeEnvironmentOrder = computeEnvironmentOrder
            self.jobQueue = jobQueue
            self.priority = priority
            self.state = state
        }

        private enum CodingKeys: String, CodingKey {
            case computeEnvironmentOrder
            case jobQueue
            case priority
            case state
        }
    }

    public struct UpdateJobQueueResponse: AWSDecodableShape {
        /// The Amazon Resource Name (ARN) of the job queue.
        public let jobQueueArn: String?
        /// The name of the job queue.
        public let jobQueueName: String?

        public init(jobQueueArn: String? = nil, jobQueueName: String? = nil) {
            self.jobQueueArn = jobQueueArn
            self.jobQueueName = jobQueueName
        }

        private enum CodingKeys: String, CodingKey {
            case jobQueueArn
            case jobQueueName
        }
    }

    public struct Volume: AWSEncodableShape & AWSDecodableShape {
        /// This parameter is specified when you are using an Amazon Elastic File System file system for job storage. Jobs that are running on Fargate resources must specify a platformVersion of at least 1.4.0.
        public let efsVolumeConfiguration: EFSVolumeConfiguration?
        /// The contents of the host parameter determine whether your data volume persists on the host container instance and where it is stored. If the host parameter is empty, then the Docker daemon assigns a host path for your data volume. However, the data isn't guaranteed to persist after the containers associated with it stop running.  This parameter isn't applicable to jobs that are running on Fargate resources and shouldn't be provided.
        public let host: Host?
        /// The name of the volume. Up to 255 letters (uppercase and lowercase), numbers, hyphens, and underscores are allowed. This name is referenced in the sourceVolume parameter of container definition mountPoints.
        public let name: String?

        public init(efsVolumeConfiguration: EFSVolumeConfiguration? = nil, host: Host? = nil, name: String? = nil) {
            self.efsVolumeConfiguration = efsVolumeConfiguration
            self.host = host
            self.name = name
        }

        private enum CodingKeys: String, CodingKey {
            case efsVolumeConfiguration
            case host
            case name
        }
    }
}
