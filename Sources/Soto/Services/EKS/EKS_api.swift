//===----------------------------------------------------------------------===//
//
// This source file is part of the Soto for AWS open source project
//
// Copyright (c) 2017-2023 the Soto project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
// See CONTRIBUTORS.txt for the list of Soto project authors
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by https://github.com/soto-project/soto-codegenerator.
// DO NOT EDIT.

@_exported import SotoCore

/// Service object for interacting with AWS EKS service.
///
/// Amazon Elastic Kubernetes Service (Amazon EKS) is a managed service that makes it easy for you to run Kubernetes on Amazon Web Services without needing to setup or maintain your own Kubernetes control plane. Kubernetes is an open-source system for automating the deployment, scaling, and management of containerized applications. Amazon EKS runs up-to-date versions of the open-source Kubernetes software, so you can use all the existing plugins and tooling from the Kubernetes community. Applications running on Amazon EKS are fully compatible with applications running on any standard Kubernetes environment, whether running in on-premises data centers or public clouds. This means that you can easily migrate any standard Kubernetes application to Amazon EKS without any code modification required.
public struct EKS: AWSService {
    // MARK: Member variables

    /// Client used for communication with AWS
    public let client: AWSClient
    /// Service configuration
    public let config: AWSServiceConfig

    // MARK: Initialization

    /// Initialize the EKS client
    /// - parameters:
    ///     - client: AWSClient used to process requests
    ///     - region: Region of server you want to communicate with. This will override the partition parameter.
    ///     - partition: AWS partition where service resides, standard (.aws), china (.awscn), government (.awsusgov).
    ///     - endpoint: Custom endpoint URL to use instead of standard AWS servers
    ///     - middleware: Middleware chain used to edit requests before they are sent and responses before they are decoded 
    ///     - timeout: Timeout value for HTTP requests
    ///     - byteBufferAllocator: Allocator for ByteBuffers
    ///     - options: Service options
    public init(
        client: AWSClient,
        region: SotoCore.Region? = nil,
        partition: AWSPartition = .aws,
        endpoint: String? = nil,
        middleware: AWSMiddlewareProtocol? = nil,
        timeout: TimeAmount? = nil,
        byteBufferAllocator: ByteBufferAllocator = ByteBufferAllocator(),
        options: AWSServiceConfig.Options = []
    ) {
        self.client = client
        self.config = AWSServiceConfig(
            region: region,
            partition: region?.partition ?? partition,
            serviceName: "EKS",
            serviceIdentifier: "eks",
            serviceProtocol: .restjson,
            apiVersion: "2017-11-01",
            endpoint: endpoint,
            variantEndpoints: Self.variantEndpoints,
            errorType: EKSErrorType.self,
            middleware: middleware,
            timeout: timeout,
            byteBufferAllocator: byteBufferAllocator,
            options: options
        )
    }




    /// FIPS and dualstack endpoints
    static var variantEndpoints: [EndpointVariantType: AWSServiceConfig.EndpointVariant] {[
        [.fips]: .init(endpoints: [
            "af-south-1": "fips.eks.af-south-1.amazonaws.com",
            "ap-east-1": "fips.eks.ap-east-1.amazonaws.com",
            "ap-northeast-1": "fips.eks.ap-northeast-1.amazonaws.com",
            "ap-northeast-2": "fips.eks.ap-northeast-2.amazonaws.com",
            "ap-northeast-3": "fips.eks.ap-northeast-3.amazonaws.com",
            "ap-south-1": "fips.eks.ap-south-1.amazonaws.com",
            "ap-south-2": "fips.eks.ap-south-2.amazonaws.com",
            "ap-southeast-1": "fips.eks.ap-southeast-1.amazonaws.com",
            "ap-southeast-2": "fips.eks.ap-southeast-2.amazonaws.com",
            "ap-southeast-3": "fips.eks.ap-southeast-3.amazonaws.com",
            "ap-southeast-4": "fips.eks.ap-southeast-4.amazonaws.com",
            "ca-central-1": "fips.eks.ca-central-1.amazonaws.com",
            "ca-west-1": "fips.eks.ca-west-1.amazonaws.com",
            "eu-central-1": "fips.eks.eu-central-1.amazonaws.com",
            "eu-central-2": "fips.eks.eu-central-2.amazonaws.com",
            "eu-north-1": "fips.eks.eu-north-1.amazonaws.com",
            "eu-south-1": "fips.eks.eu-south-1.amazonaws.com",
            "eu-south-2": "fips.eks.eu-south-2.amazonaws.com",
            "eu-west-1": "fips.eks.eu-west-1.amazonaws.com",
            "eu-west-2": "fips.eks.eu-west-2.amazonaws.com",
            "eu-west-3": "fips.eks.eu-west-3.amazonaws.com",
            "il-central-1": "fips.eks.il-central-1.amazonaws.com",
            "me-central-1": "fips.eks.me-central-1.amazonaws.com",
            "me-south-1": "fips.eks.me-south-1.amazonaws.com",
            "sa-east-1": "fips.eks.sa-east-1.amazonaws.com",
            "us-east-1": "fips.eks.us-east-1.amazonaws.com",
            "us-east-2": "fips.eks.us-east-2.amazonaws.com",
            "us-gov-east-1": "eks.us-gov-east-1.amazonaws.com",
            "us-gov-west-1": "eks.us-gov-west-1.amazonaws.com",
            "us-west-1": "fips.eks.us-west-1.amazonaws.com",
            "us-west-2": "fips.eks.us-west-2.amazonaws.com"
        ])
    ]}

    // MARK: API Calls

    /// Associates an access policy and its scope to an access entry. For more information about associating access policies, see Associating and disassociating access policies to and from access entries in the Amazon EKS User Guide.
    @Sendable
    public func associateAccessPolicy(_ input: AssociateAccessPolicyRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> AssociateAccessPolicyResponse {
        return try await self.client.execute(
            operation: "AssociateAccessPolicy", 
            path: "/clusters/{clusterName}/access-entries/{principalArn}/access-policies", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Associates an encryption configuration to an existing cluster. Use this API to enable encryption on existing clusters that don't already have encryption enabled. This allows you to implement a defense-in-depth security strategy without migrating applications to new Amazon EKS clusters.
    @Sendable
    public func associateEncryptionConfig(_ input: AssociateEncryptionConfigRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> AssociateEncryptionConfigResponse {
        return try await self.client.execute(
            operation: "AssociateEncryptionConfig", 
            path: "/clusters/{clusterName}/encryption-config/associate", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Associates an identity provider configuration to a cluster. If you want to authenticate identities using an identity provider, you can create an identity provider configuration and associate it to your cluster. After configuring authentication to your cluster you can create Kubernetes Role and ClusterRole objects, assign permissions to them, and then bind them to the identities using Kubernetes RoleBinding and ClusterRoleBinding objects. For more information see Using RBAC Authorization in the Kubernetes documentation.
    @Sendable
    public func associateIdentityProviderConfig(_ input: AssociateIdentityProviderConfigRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> AssociateIdentityProviderConfigResponse {
        return try await self.client.execute(
            operation: "AssociateIdentityProviderConfig", 
            path: "/clusters/{clusterName}/identity-provider-configs/associate", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Creates an access entry. An access entry allows an IAM principal to access your cluster. Access entries can replace the need to maintain entries in the aws-auth ConfigMap for authentication. You have the following options for authorizing an IAM principal to access Kubernetes objects on your cluster: Kubernetes role-based access control (RBAC), Amazon EKS, or both. Kubernetes RBAC authorization requires you to create and manage Kubernetes Role, ClusterRole, RoleBinding, and ClusterRoleBinding objects, in addition to managing access entries. If you use Amazon EKS authorization exclusively, you don't need to create and manage Kubernetes Role, ClusterRole, RoleBinding, and ClusterRoleBinding objects. For more information about access entries, see Access entries in the Amazon EKS User Guide.
    @Sendable
    public func createAccessEntry(_ input: CreateAccessEntryRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> CreateAccessEntryResponse {
        return try await self.client.execute(
            operation: "CreateAccessEntry", 
            path: "/clusters/{clusterName}/access-entries", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Creates an Amazon EKS add-on. Amazon EKS add-ons help to automate the provisioning and lifecycle management of common operational software for Amazon EKS clusters. For more information, see Amazon EKS add-ons in the Amazon EKS User Guide.
    @Sendable
    public func createAddon(_ input: CreateAddonRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> CreateAddonResponse {
        return try await self.client.execute(
            operation: "CreateAddon", 
            path: "/clusters/{clusterName}/addons", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Creates an Amazon EKS control plane. The Amazon EKS control plane consists of control plane instances that run the Kubernetes software, such as etcd and the API server. The control plane runs in an account managed by Amazon Web Services, and the Kubernetes API is exposed by the Amazon EKS API server endpoint. Each Amazon EKS cluster control plane is single tenant and unique. It runs on its own set of Amazon EC2 instances. The cluster control plane is provisioned across multiple Availability Zones and fronted by an Elastic Load Balancing Network Load Balancer. Amazon EKS also provisions elastic network interfaces in your VPC subnets to provide connectivity from the control plane instances to the nodes (for example, to support kubectl exec, logs, and proxy data flows). Amazon EKS nodes run in your Amazon Web Services account and connect to your cluster's control plane over the Kubernetes API server endpoint and a certificate file that is created for your cluster. You can use the endpointPublicAccess and endpointPrivateAccess parameters to enable or disable public and private access to your cluster's Kubernetes API server endpoint. By default, public access is enabled, and private access is disabled. For more information, see Amazon EKS Cluster Endpoint Access Control in the  Amazon EKS User Guide .  You can use the logging parameter to enable or disable exporting the Kubernetes control plane logs for your cluster to CloudWatch Logs. By default, cluster control plane logs aren't exported to CloudWatch Logs. For more information, see Amazon EKS Cluster Control Plane Logs in the  Amazon EKS User Guide .  CloudWatch Logs ingestion, archive storage, and data scanning rates apply to exported control plane logs. For more information, see CloudWatch Pricing.  In most cases, it takes several minutes to create a cluster. After you create an Amazon EKS cluster, you must configure your Kubernetes tooling to communicate with the API server and launch nodes into your cluster. For more information, see Managing Cluster Authentication and Launching Amazon EKS nodes in the Amazon EKS User Guide.
    @Sendable
    public func createCluster(_ input: CreateClusterRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> CreateClusterResponse {
        return try await self.client.execute(
            operation: "CreateCluster", 
            path: "/clusters", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Creates an EKS Anywhere subscription. When a subscription is created, it is a contract agreement for the length of the term specified in the request. Licenses that are used to validate support are provisioned in Amazon Web Services License Manager and the caller account is granted access to EKS Anywhere Curated Packages.
    @Sendable
    public func createEksAnywhereSubscription(_ input: CreateEksAnywhereSubscriptionRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> CreateEksAnywhereSubscriptionResponse {
        return try await self.client.execute(
            operation: "CreateEksAnywhereSubscription", 
            path: "/eks-anywhere-subscriptions", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Creates an Fargate profile for your Amazon EKS cluster. You must have at least one Fargate profile in a cluster to be able to run pods on Fargate. The Fargate profile allows an administrator to declare which pods run on Fargate and specify which pods run on which Fargate profile. This declaration is done through the profile’s selectors. Each profile can have up to five selectors that contain a namespace and labels. A namespace is required for every selector. The label field consists of multiple optional key-value pairs. Pods that match the selectors are scheduled on Fargate. If a to-be-scheduled pod matches any of the selectors in the Fargate profile, then that pod is run on Fargate. When you create a Fargate profile, you must specify a pod execution role to use with the pods that are scheduled with the profile. This role is added to the cluster's Kubernetes Role Based Access Control (RBAC) for authorization so that the kubelet that is running on the Fargate infrastructure can register with your Amazon EKS cluster so that it can appear in your cluster as a node. The pod execution role also provides IAM permissions to the Fargate infrastructure to allow read access to Amazon ECR image repositories. For more information, see Pod Execution Role in the Amazon EKS User Guide. Fargate profiles are immutable. However, you can create a new updated profile to replace an existing profile and then delete the original after the updated profile has finished creating. If any Fargate profiles in a cluster are in the DELETING status, you must wait for that Fargate profile to finish deleting before you can create any other profiles in that cluster. For more information, see Fargate profile in the Amazon EKS User Guide.
    @Sendable
    public func createFargateProfile(_ input: CreateFargateProfileRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> CreateFargateProfileResponse {
        return try await self.client.execute(
            operation: "CreateFargateProfile", 
            path: "/clusters/{clusterName}/fargate-profiles", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Creates a managed node group for an Amazon EKS cluster. You can only create a node group for your cluster that is equal to the current Kubernetes version for the cluster. All node groups are created with the latest AMI release version for the respective minor Kubernetes version of the cluster, unless you deploy a custom AMI using a launch template. For more information about using launch templates, see Launch template support. An Amazon EKS managed node group is an Amazon EC2 Auto Scaling group and associated Amazon EC2 instances that are managed by Amazon Web Services for an Amazon EKS cluster. For more information, see Managed node groups in the Amazon EKS User Guide.  Windows AMI types are only supported for commercial Amazon Web Services Regions that support Windows on Amazon EKS.
    @Sendable
    public func createNodegroup(_ input: CreateNodegroupRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> CreateNodegroupResponse {
        return try await self.client.execute(
            operation: "CreateNodegroup", 
            path: "/clusters/{clusterName}/node-groups", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Creates an EKS Pod Identity association between a service account in an Amazon EKS cluster and an IAM role with EKS Pod Identity. Use EKS Pod Identity to give temporary IAM credentials to pods and the credentials are rotated automatically. Amazon EKS Pod Identity associations provide the ability to manage credentials for your applications, similar to the way that Amazon EC2 instance profiles provide credentials to Amazon EC2 instances. If a pod uses a service account that has an association, Amazon EKS sets environment variables in the containers of the pod. The environment variables configure the Amazon Web Services SDKs, including the Command Line Interface, to use the EKS Pod Identity credentials. Pod Identity is a simpler method than IAM roles for service accounts, as this method doesn't use OIDC identity providers. Additionally, you can configure a role for Pod Identity once, and reuse it across clusters.
    @Sendable
    public func createPodIdentityAssociation(_ input: CreatePodIdentityAssociationRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> CreatePodIdentityAssociationResponse {
        return try await self.client.execute(
            operation: "CreatePodIdentityAssociation", 
            path: "/clusters/{clusterName}/pod-identity-associations", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Deletes an access entry. Deleting an access entry of a type other than Standard can cause your cluster to function improperly. If you delete an access entry in error, you can recreate it.
    @Sendable
    public func deleteAccessEntry(_ input: DeleteAccessEntryRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DeleteAccessEntryResponse {
        return try await self.client.execute(
            operation: "DeleteAccessEntry", 
            path: "/clusters/{clusterName}/access-entries/{principalArn}", 
            httpMethod: .DELETE, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Deletes an Amazon EKS add-on. When you remove an add-on, it's deleted from the cluster. You can always manually start an add-on on the cluster using the Kubernetes API.
    @Sendable
    public func deleteAddon(_ input: DeleteAddonRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DeleteAddonResponse {
        return try await self.client.execute(
            operation: "DeleteAddon", 
            path: "/clusters/{clusterName}/addons/{addonName}", 
            httpMethod: .DELETE, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Deletes an Amazon EKS cluster control plane. If you have active services in your cluster that are associated with a load balancer, you must delete those services before deleting the cluster so that the load balancers are deleted properly. Otherwise, you can have orphaned resources in your VPC that prevent you from being able to delete the VPC. For more information, see Deleting a cluster in the Amazon EKS User Guide. If you have managed node groups or Fargate profiles attached to the cluster, you must delete them first. For more information, see DeleteNodgroup and DeleteFargateProfile.
    @Sendable
    public func deleteCluster(_ input: DeleteClusterRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DeleteClusterResponse {
        return try await self.client.execute(
            operation: "DeleteCluster", 
            path: "/clusters/{name}", 
            httpMethod: .DELETE, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Deletes an expired or inactive subscription. Deleting inactive subscriptions removes them from the Amazon Web Services Management Console view and from list/describe API responses. Subscriptions can only be cancelled within 7 days of creation and are cancelled by creating a ticket in the Amazon Web Services Support Center.
    @Sendable
    public func deleteEksAnywhereSubscription(_ input: DeleteEksAnywhereSubscriptionRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DeleteEksAnywhereSubscriptionResponse {
        return try await self.client.execute(
            operation: "DeleteEksAnywhereSubscription", 
            path: "/eks-anywhere-subscriptions/{id}", 
            httpMethod: .DELETE, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Deletes an Fargate profile. When you delete a Fargate profile, any Pod running on Fargate that was created with the profile is deleted. If the Pod matches another Fargate profile, then it is scheduled on Fargate with that profile. If it no longer matches any Fargate profiles, then it's not scheduled on Fargate and may remain in a pending state. Only one Fargate profile in a cluster can be in the DELETING status at a time. You must wait for a Fargate profile to finish deleting before you can delete any other profiles in that cluster.
    @Sendable
    public func deleteFargateProfile(_ input: DeleteFargateProfileRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DeleteFargateProfileResponse {
        return try await self.client.execute(
            operation: "DeleteFargateProfile", 
            path: "/clusters/{clusterName}/fargate-profiles/{fargateProfileName}", 
            httpMethod: .DELETE, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Deletes a managed node group.
    @Sendable
    public func deleteNodegroup(_ input: DeleteNodegroupRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DeleteNodegroupResponse {
        return try await self.client.execute(
            operation: "DeleteNodegroup", 
            path: "/clusters/{clusterName}/node-groups/{nodegroupName}", 
            httpMethod: .DELETE, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Deletes a EKS Pod Identity association. The temporary Amazon Web Services credentials from the previous IAM role session might still be valid until the session expiry. If you need to immediately revoke the temporary session credentials, then go to the role in the IAM console.
    @Sendable
    public func deletePodIdentityAssociation(_ input: DeletePodIdentityAssociationRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DeletePodIdentityAssociationResponse {
        return try await self.client.execute(
            operation: "DeletePodIdentityAssociation", 
            path: "/clusters/{clusterName}/pod-identity-associations/{associationId}", 
            httpMethod: .DELETE, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Deregisters a connected cluster to remove it from the Amazon EKS control plane. A connected cluster is a Kubernetes cluster that you've connected to your control plane using the Amazon EKS Connector.
    @Sendable
    public func deregisterCluster(_ input: DeregisterClusterRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DeregisterClusterResponse {
        return try await self.client.execute(
            operation: "DeregisterCluster", 
            path: "/cluster-registrations/{name}", 
            httpMethod: .DELETE, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Describes an access entry.
    @Sendable
    public func describeAccessEntry(_ input: DescribeAccessEntryRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DescribeAccessEntryResponse {
        return try await self.client.execute(
            operation: "DescribeAccessEntry", 
            path: "/clusters/{clusterName}/access-entries/{principalArn}", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Describes an Amazon EKS add-on.
    @Sendable
    public func describeAddon(_ input: DescribeAddonRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DescribeAddonResponse {
        return try await self.client.execute(
            operation: "DescribeAddon", 
            path: "/clusters/{clusterName}/addons/{addonName}", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Returns configuration options.
    @Sendable
    public func describeAddonConfiguration(_ input: DescribeAddonConfigurationRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DescribeAddonConfigurationResponse {
        return try await self.client.execute(
            operation: "DescribeAddonConfiguration", 
            path: "/addons/configuration-schemas", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Describes the versions for an add-on. Information such as the Kubernetes versions that you can use the add-on with, the owner, publisher, and the type of the add-on are returned.
    @Sendable
    public func describeAddonVersions(_ input: DescribeAddonVersionsRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DescribeAddonVersionsResponse {
        return try await self.client.execute(
            operation: "DescribeAddonVersions", 
            path: "/addons/supported-versions", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Describes an Amazon EKS cluster. The API server endpoint and certificate authority data returned by this operation are required for kubelet and kubectl to communicate with your Kubernetes API server. For more information, see Creating or updating a kubeconfig file for an Amazon EKS cluster.  The API server endpoint and certificate authority data aren't available until the cluster reaches the ACTIVE state.
    @Sendable
    public func describeCluster(_ input: DescribeClusterRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DescribeClusterResponse {
        return try await self.client.execute(
            operation: "DescribeCluster", 
            path: "/clusters/{name}", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Returns descriptive information about a subscription.
    @Sendable
    public func describeEksAnywhereSubscription(_ input: DescribeEksAnywhereSubscriptionRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DescribeEksAnywhereSubscriptionResponse {
        return try await self.client.execute(
            operation: "DescribeEksAnywhereSubscription", 
            path: "/eks-anywhere-subscriptions/{id}", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Describes an Fargate profile.
    @Sendable
    public func describeFargateProfile(_ input: DescribeFargateProfileRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DescribeFargateProfileResponse {
        return try await self.client.execute(
            operation: "DescribeFargateProfile", 
            path: "/clusters/{clusterName}/fargate-profiles/{fargateProfileName}", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Describes an identity provider configuration.
    @Sendable
    public func describeIdentityProviderConfig(_ input: DescribeIdentityProviderConfigRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DescribeIdentityProviderConfigResponse {
        return try await self.client.execute(
            operation: "DescribeIdentityProviderConfig", 
            path: "/clusters/{clusterName}/identity-provider-configs/describe", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Returns details about an insight that you specify using its ID.
    @Sendable
    public func describeInsight(_ input: DescribeInsightRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DescribeInsightResponse {
        return try await self.client.execute(
            operation: "DescribeInsight", 
            path: "/clusters/{clusterName}/insights/{id}", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Describes a managed node group.
    @Sendable
    public func describeNodegroup(_ input: DescribeNodegroupRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DescribeNodegroupResponse {
        return try await self.client.execute(
            operation: "DescribeNodegroup", 
            path: "/clusters/{clusterName}/node-groups/{nodegroupName}", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Returns descriptive information about an EKS Pod Identity association. This action requires the ID of the association. You can get the ID from the response to the CreatePodIdentityAssocation for newly created associations. Or, you can list the IDs for associations with ListPodIdentityAssociations and filter the list by namespace or service account.
    @Sendable
    public func describePodIdentityAssociation(_ input: DescribePodIdentityAssociationRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DescribePodIdentityAssociationResponse {
        return try await self.client.execute(
            operation: "DescribePodIdentityAssociation", 
            path: "/clusters/{clusterName}/pod-identity-associations/{associationId}", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Describes an update to an Amazon EKS resource. When the status of the update is Succeeded, the update is complete. If an update fails, the status is Failed, and an error detail explains the reason for the failure.
    @Sendable
    public func describeUpdate(_ input: DescribeUpdateRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DescribeUpdateResponse {
        return try await self.client.execute(
            operation: "DescribeUpdate", 
            path: "/clusters/{name}/updates/{updateId}", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Disassociates an access policy from an access entry.
    @Sendable
    public func disassociateAccessPolicy(_ input: DisassociateAccessPolicyRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DisassociateAccessPolicyResponse {
        return try await self.client.execute(
            operation: "DisassociateAccessPolicy", 
            path: "/clusters/{clusterName}/access-entries/{principalArn}/access-policies/{policyArn}", 
            httpMethod: .DELETE, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Disassociates an identity provider configuration from a cluster. If you disassociate an identity provider from your cluster, users included in the provider can no longer access the cluster. However, you can still access the cluster with IAM principals.
    @Sendable
    public func disassociateIdentityProviderConfig(_ input: DisassociateIdentityProviderConfigRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DisassociateIdentityProviderConfigResponse {
        return try await self.client.execute(
            operation: "DisassociateIdentityProviderConfig", 
            path: "/clusters/{clusterName}/identity-provider-configs/disassociate", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Lists the access entries for your cluster.
    @Sendable
    public func listAccessEntries(_ input: ListAccessEntriesRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> ListAccessEntriesResponse {
        return try await self.client.execute(
            operation: "ListAccessEntries", 
            path: "/clusters/{clusterName}/access-entries", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Lists the available access policies.
    @Sendable
    public func listAccessPolicies(_ input: ListAccessPoliciesRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> ListAccessPoliciesResponse {
        return try await self.client.execute(
            operation: "ListAccessPolicies", 
            path: "/access-policies", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Lists the installed add-ons.
    @Sendable
    public func listAddons(_ input: ListAddonsRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> ListAddonsResponse {
        return try await self.client.execute(
            operation: "ListAddons", 
            path: "/clusters/{clusterName}/addons", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Lists the access policies associated with an access entry.
    @Sendable
    public func listAssociatedAccessPolicies(_ input: ListAssociatedAccessPoliciesRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> ListAssociatedAccessPoliciesResponse {
        return try await self.client.execute(
            operation: "ListAssociatedAccessPolicies", 
            path: "/clusters/{clusterName}/access-entries/{principalArn}/access-policies", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Lists the Amazon EKS clusters in your Amazon Web Services account in the specified Amazon Web Services Region.
    @Sendable
    public func listClusters(_ input: ListClustersRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> ListClustersResponse {
        return try await self.client.execute(
            operation: "ListClusters", 
            path: "/clusters", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Displays the full description of the subscription.
    @Sendable
    public func listEksAnywhereSubscriptions(_ input: ListEksAnywhereSubscriptionsRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> ListEksAnywhereSubscriptionsResponse {
        return try await self.client.execute(
            operation: "ListEksAnywhereSubscriptions", 
            path: "/eks-anywhere-subscriptions", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Lists the Fargate profiles associated with the specified cluster in your Amazon Web Services account in the specified Amazon Web Services Region.
    @Sendable
    public func listFargateProfiles(_ input: ListFargateProfilesRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> ListFargateProfilesResponse {
        return try await self.client.execute(
            operation: "ListFargateProfiles", 
            path: "/clusters/{clusterName}/fargate-profiles", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Lists the identity provider configurations for your cluster.
    @Sendable
    public func listIdentityProviderConfigs(_ input: ListIdentityProviderConfigsRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> ListIdentityProviderConfigsResponse {
        return try await self.client.execute(
            operation: "ListIdentityProviderConfigs", 
            path: "/clusters/{clusterName}/identity-provider-configs", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Returns a list of all insights checked for against the specified cluster. You can filter which insights are returned by category, associated Kubernetes version, and status.
    @Sendable
    public func listInsights(_ input: ListInsightsRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> ListInsightsResponse {
        return try await self.client.execute(
            operation: "ListInsights", 
            path: "/clusters/{clusterName}/insights", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Lists the managed node groups associated with the specified cluster in your Amazon Web Services account in the specified Amazon Web Services Region. Self-managed node groups aren't listed.
    @Sendable
    public func listNodegroups(_ input: ListNodegroupsRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> ListNodegroupsResponse {
        return try await self.client.execute(
            operation: "ListNodegroups", 
            path: "/clusters/{clusterName}/node-groups", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// List the EKS Pod Identity associations in a cluster. You can filter the list by the namespace that the association is in or the service account that the association uses.
    @Sendable
    public func listPodIdentityAssociations(_ input: ListPodIdentityAssociationsRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> ListPodIdentityAssociationsResponse {
        return try await self.client.execute(
            operation: "ListPodIdentityAssociations", 
            path: "/clusters/{clusterName}/pod-identity-associations", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// List the tags for an Amazon EKS resource.
    @Sendable
    public func listTagsForResource(_ input: ListTagsForResourceRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> ListTagsForResourceResponse {
        return try await self.client.execute(
            operation: "ListTagsForResource", 
            path: "/tags/{resourceArn}", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Lists the updates associated with an Amazon EKS resource in your Amazon Web Services account, in the specified Amazon Web Services Region.
    @Sendable
    public func listUpdates(_ input: ListUpdatesRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> ListUpdatesResponse {
        return try await self.client.execute(
            operation: "ListUpdates", 
            path: "/clusters/{name}/updates", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Connects a Kubernetes cluster to the Amazon EKS control plane.  Any Kubernetes cluster can be connected to the Amazon EKS control plane to view current information about the cluster and its nodes.  Cluster connection requires two steps. First, send a  RegisterClusterRequest to add it to the Amazon EKS control plane. Second, a Manifest containing the activationID and activationCode must be applied to the Kubernetes cluster through it's native provider to provide visibility. After the manifest is updated and applied, the connected cluster is visible to the Amazon EKS control plane. If the manifest isn't applied within three days, the connected cluster will no longer be visible and must be deregistered using DeregisterCluster.
    @Sendable
    public func registerCluster(_ input: RegisterClusterRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> RegisterClusterResponse {
        return try await self.client.execute(
            operation: "RegisterCluster", 
            path: "/cluster-registrations", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Associates the specified tags to an Amazon EKS resource with the specified resourceArn. If existing tags on a resource are not specified in the request parameters, they aren't changed. When a resource is deleted, the tags associated with that resource are also deleted. Tags that you create for Amazon EKS resources don't propagate to any other resources associated with the cluster. For example, if you tag a cluster with this operation, that tag doesn't automatically propagate to the subnets and nodes associated with the cluster.
    @Sendable
    public func tagResource(_ input: TagResourceRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> TagResourceResponse {
        return try await self.client.execute(
            operation: "TagResource", 
            path: "/tags/{resourceArn}", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Deletes specified tags from an Amazon EKS resource.
    @Sendable
    public func untagResource(_ input: UntagResourceRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> UntagResourceResponse {
        return try await self.client.execute(
            operation: "UntagResource", 
            path: "/tags/{resourceArn}", 
            httpMethod: .DELETE, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Updates an access entry.
    @Sendable
    public func updateAccessEntry(_ input: UpdateAccessEntryRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> UpdateAccessEntryResponse {
        return try await self.client.execute(
            operation: "UpdateAccessEntry", 
            path: "/clusters/{clusterName}/access-entries/{principalArn}", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Updates an Amazon EKS add-on.
    @Sendable
    public func updateAddon(_ input: UpdateAddonRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> UpdateAddonResponse {
        return try await self.client.execute(
            operation: "UpdateAddon", 
            path: "/clusters/{clusterName}/addons/{addonName}/update", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Updates an Amazon EKS cluster configuration. Your cluster continues to function during the update. The response output includes an update ID that you can use to track the status of your cluster update with DescribeUpdate"/>. You can use this API operation to enable or disable exporting the Kubernetes control plane logs for your cluster to CloudWatch Logs. By default, cluster control plane logs aren't exported to CloudWatch Logs. For more information, see Amazon EKS Cluster control plane logs in the  Amazon EKS User Guide .  CloudWatch Logs ingestion, archive storage, and data scanning rates apply to exported control plane logs. For more information, see CloudWatch Pricing.  You can also use this API operation to enable or disable public and private access to your cluster's Kubernetes API server endpoint. By default, public access is enabled, and private access is disabled. For more information, see Amazon EKS cluster endpoint access control in the  Amazon EKS User Guide . You can also use this API operation to choose different subnets and security groups for the cluster. You must specify at least two subnets that are in different Availability Zones. You can't change which VPC the subnets are from, the subnets must be in the same VPC as the subnets that the cluster was created with. For more information about the VPC requirements, see https://docs.aws.amazon.com/eks/latest/userguide/network_reqs.html in the  Amazon EKS User Guide . Cluster updates are asynchronous, and they should finish within a few minutes. During an update, the cluster status moves to UPDATING (this status transition is eventually consistent). When the update is complete (either Failed or Successful), the cluster status moves to Active.
    @Sendable
    public func updateClusterConfig(_ input: UpdateClusterConfigRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> UpdateClusterConfigResponse {
        return try await self.client.execute(
            operation: "UpdateClusterConfig", 
            path: "/clusters/{name}/update-config", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Updates an Amazon EKS cluster to the specified Kubernetes version. Your cluster continues to function during the update. The response output includes an update ID that you can use to track the status of your cluster update with the DescribeUpdate API operation. Cluster updates are asynchronous, and they should finish within a few minutes. During an update, the cluster status moves to UPDATING (this status transition is eventually consistent). When the update is complete (either Failed or Successful), the cluster status moves to Active. If your cluster has managed node groups attached to it, all of your node groups’ Kubernetes versions must match the cluster’s Kubernetes version in order to update the cluster to a new Kubernetes version.
    @Sendable
    public func updateClusterVersion(_ input: UpdateClusterVersionRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> UpdateClusterVersionResponse {
        return try await self.client.execute(
            operation: "UpdateClusterVersion", 
            path: "/clusters/{name}/updates", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Update an EKS Anywhere Subscription. Only auto renewal and tags can be updated after subscription creation.
    @Sendable
    public func updateEksAnywhereSubscription(_ input: UpdateEksAnywhereSubscriptionRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> UpdateEksAnywhereSubscriptionResponse {
        return try await self.client.execute(
            operation: "UpdateEksAnywhereSubscription", 
            path: "/eks-anywhere-subscriptions/{id}", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Updates an Amazon EKS managed node group configuration. Your node group continues to function during the update. The response output includes an update ID that you can use to track the status of your node group update with the DescribeUpdate API operation. Currently you can update the Kubernetes labels for a node group or the scaling configuration.
    @Sendable
    public func updateNodegroupConfig(_ input: UpdateNodegroupConfigRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> UpdateNodegroupConfigResponse {
        return try await self.client.execute(
            operation: "UpdateNodegroupConfig", 
            path: "/clusters/{clusterName}/node-groups/{nodegroupName}/update-config", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Updates the Kubernetes version or AMI version of an Amazon EKS managed node group. You can update a node group using a launch template only if the node group was originally deployed with a launch template. If you need to update a custom AMI in a node group that was deployed with a launch template, then update your custom AMI, specify the new ID in a new version of the launch template, and then update the node group to the new version of the launch template. If you update without a launch template, then you can update to the latest available AMI version of a node group's current Kubernetes version by not specifying a Kubernetes version in the request. You can update to the latest AMI version of your cluster's current Kubernetes version by specifying your cluster's Kubernetes version in the request. For information about Linux versions, see Amazon EKS optimized Amazon Linux AMI versions in the Amazon EKS User Guide. For information about Windows versions, see Amazon EKS optimized Windows AMI versions in the Amazon EKS User Guide.  You cannot roll back a node group to an earlier Kubernetes version or AMI version. When a node in a managed node group is terminated due to a scaling action or update, every Pod on that node is drained first. Amazon EKS attempts to drain the nodes gracefully and will fail if it is unable to do so. You can force the update if Amazon EKS is unable to drain the nodes as a result of a Pod disruption budget issue.
    @Sendable
    public func updateNodegroupVersion(_ input: UpdateNodegroupVersionRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> UpdateNodegroupVersionResponse {
        return try await self.client.execute(
            operation: "UpdateNodegroupVersion", 
            path: "/clusters/{clusterName}/node-groups/{nodegroupName}/update-version", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Updates a EKS Pod Identity association. Only the IAM role can be changed; an association can't be moved between clusters, namespaces, or service accounts. If you need to edit the namespace or service account, you need to delete the association and then create a new association with your desired settings.
    @Sendable
    public func updatePodIdentityAssociation(_ input: UpdatePodIdentityAssociationRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> UpdatePodIdentityAssociationResponse {
        return try await self.client.execute(
            operation: "UpdatePodIdentityAssociation", 
            path: "/clusters/{clusterName}/pod-identity-associations/{associationId}", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
}

extension EKS {
    /// Initializer required by `AWSService.with(middlewares:timeout:byteBufferAllocator:options)`. You are not able to use this initializer directly as there are not public
    /// initializers for `AWSServiceConfig.Patch`. Please use `AWSService.with(middlewares:timeout:byteBufferAllocator:options)` instead.
    public init(from: EKS, patch: AWSServiceConfig.Patch) {
        self.client = from.client
        self.config = from.config.with(patch: patch)
    }
}

// MARK: Paginators

@available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
extension EKS {
    /// Describes the versions for an add-on. Information such as the Kubernetes versions that you can use the add-on with, the owner, publisher, and the type of the add-on are returned.
    /// Return PaginatorSequence for operation.
    ///
    /// - Parameters:
    ///   - input: Input for request
    ///   - logger: Logger used flot logging
    public func describeAddonVersionsPaginator(
        _ input: DescribeAddonVersionsRequest,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<DescribeAddonVersionsRequest, DescribeAddonVersionsResponse> {
        return .init(
            input: input,
            command: self.describeAddonVersions,
            inputKey: \DescribeAddonVersionsRequest.nextToken,
            outputKey: \DescribeAddonVersionsResponse.nextToken,
            logger: logger
        )
    }

    /// Lists the access entries for your cluster.
    /// Return PaginatorSequence for operation.
    ///
    /// - Parameters:
    ///   - input: Input for request
    ///   - logger: Logger used flot logging
    public func listAccessEntriesPaginator(
        _ input: ListAccessEntriesRequest,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<ListAccessEntriesRequest, ListAccessEntriesResponse> {
        return .init(
            input: input,
            command: self.listAccessEntries,
            inputKey: \ListAccessEntriesRequest.nextToken,
            outputKey: \ListAccessEntriesResponse.nextToken,
            logger: logger
        )
    }

    /// Lists the available access policies.
    /// Return PaginatorSequence for operation.
    ///
    /// - Parameters:
    ///   - input: Input for request
    ///   - logger: Logger used flot logging
    public func listAccessPoliciesPaginator(
        _ input: ListAccessPoliciesRequest,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<ListAccessPoliciesRequest, ListAccessPoliciesResponse> {
        return .init(
            input: input,
            command: self.listAccessPolicies,
            inputKey: \ListAccessPoliciesRequest.nextToken,
            outputKey: \ListAccessPoliciesResponse.nextToken,
            logger: logger
        )
    }

    /// Lists the installed add-ons.
    /// Return PaginatorSequence for operation.
    ///
    /// - Parameters:
    ///   - input: Input for request
    ///   - logger: Logger used flot logging
    public func listAddonsPaginator(
        _ input: ListAddonsRequest,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<ListAddonsRequest, ListAddonsResponse> {
        return .init(
            input: input,
            command: self.listAddons,
            inputKey: \ListAddonsRequest.nextToken,
            outputKey: \ListAddonsResponse.nextToken,
            logger: logger
        )
    }

    /// Lists the access policies associated with an access entry.
    /// Return PaginatorSequence for operation.
    ///
    /// - Parameters:
    ///   - input: Input for request
    ///   - logger: Logger used flot logging
    public func listAssociatedAccessPoliciesPaginator(
        _ input: ListAssociatedAccessPoliciesRequest,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<ListAssociatedAccessPoliciesRequest, ListAssociatedAccessPoliciesResponse> {
        return .init(
            input: input,
            command: self.listAssociatedAccessPolicies,
            inputKey: \ListAssociatedAccessPoliciesRequest.nextToken,
            outputKey: \ListAssociatedAccessPoliciesResponse.nextToken,
            logger: logger
        )
    }

    /// Lists the Amazon EKS clusters in your Amazon Web Services account in the specified Amazon Web Services Region.
    /// Return PaginatorSequence for operation.
    ///
    /// - Parameters:
    ///   - input: Input for request
    ///   - logger: Logger used flot logging
    public func listClustersPaginator(
        _ input: ListClustersRequest,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<ListClustersRequest, ListClustersResponse> {
        return .init(
            input: input,
            command: self.listClusters,
            inputKey: \ListClustersRequest.nextToken,
            outputKey: \ListClustersResponse.nextToken,
            logger: logger
        )
    }

    /// Displays the full description of the subscription.
    /// Return PaginatorSequence for operation.
    ///
    /// - Parameters:
    ///   - input: Input for request
    ///   - logger: Logger used flot logging
    public func listEksAnywhereSubscriptionsPaginator(
        _ input: ListEksAnywhereSubscriptionsRequest,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<ListEksAnywhereSubscriptionsRequest, ListEksAnywhereSubscriptionsResponse> {
        return .init(
            input: input,
            command: self.listEksAnywhereSubscriptions,
            inputKey: \ListEksAnywhereSubscriptionsRequest.nextToken,
            outputKey: \ListEksAnywhereSubscriptionsResponse.nextToken,
            logger: logger
        )
    }

    /// Lists the Fargate profiles associated with the specified cluster in your Amazon Web Services account in the specified Amazon Web Services Region.
    /// Return PaginatorSequence for operation.
    ///
    /// - Parameters:
    ///   - input: Input for request
    ///   - logger: Logger used flot logging
    public func listFargateProfilesPaginator(
        _ input: ListFargateProfilesRequest,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<ListFargateProfilesRequest, ListFargateProfilesResponse> {
        return .init(
            input: input,
            command: self.listFargateProfiles,
            inputKey: \ListFargateProfilesRequest.nextToken,
            outputKey: \ListFargateProfilesResponse.nextToken,
            logger: logger
        )
    }

    /// Lists the identity provider configurations for your cluster.
    /// Return PaginatorSequence for operation.
    ///
    /// - Parameters:
    ///   - input: Input for request
    ///   - logger: Logger used flot logging
    public func listIdentityProviderConfigsPaginator(
        _ input: ListIdentityProviderConfigsRequest,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<ListIdentityProviderConfigsRequest, ListIdentityProviderConfigsResponse> {
        return .init(
            input: input,
            command: self.listIdentityProviderConfigs,
            inputKey: \ListIdentityProviderConfigsRequest.nextToken,
            outputKey: \ListIdentityProviderConfigsResponse.nextToken,
            logger: logger
        )
    }

    /// Returns a list of all insights checked for against the specified cluster. You can filter which insights are returned by category, associated Kubernetes version, and status.
    /// Return PaginatorSequence for operation.
    ///
    /// - Parameters:
    ///   - input: Input for request
    ///   - logger: Logger used flot logging
    public func listInsightsPaginator(
        _ input: ListInsightsRequest,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<ListInsightsRequest, ListInsightsResponse> {
        return .init(
            input: input,
            command: self.listInsights,
            inputKey: \ListInsightsRequest.nextToken,
            outputKey: \ListInsightsResponse.nextToken,
            logger: logger
        )
    }

    /// Lists the managed node groups associated with the specified cluster in your Amazon Web Services account in the specified Amazon Web Services Region. Self-managed node groups aren't listed.
    /// Return PaginatorSequence for operation.
    ///
    /// - Parameters:
    ///   - input: Input for request
    ///   - logger: Logger used flot logging
    public func listNodegroupsPaginator(
        _ input: ListNodegroupsRequest,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<ListNodegroupsRequest, ListNodegroupsResponse> {
        return .init(
            input: input,
            command: self.listNodegroups,
            inputKey: \ListNodegroupsRequest.nextToken,
            outputKey: \ListNodegroupsResponse.nextToken,
            logger: logger
        )
    }

    /// List the EKS Pod Identity associations in a cluster. You can filter the list by the namespace that the association is in or the service account that the association uses.
    /// Return PaginatorSequence for operation.
    ///
    /// - Parameters:
    ///   - input: Input for request
    ///   - logger: Logger used flot logging
    public func listPodIdentityAssociationsPaginator(
        _ input: ListPodIdentityAssociationsRequest,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<ListPodIdentityAssociationsRequest, ListPodIdentityAssociationsResponse> {
        return .init(
            input: input,
            command: self.listPodIdentityAssociations,
            inputKey: \ListPodIdentityAssociationsRequest.nextToken,
            outputKey: \ListPodIdentityAssociationsResponse.nextToken,
            logger: logger
        )
    }

    /// Lists the updates associated with an Amazon EKS resource in your Amazon Web Services account, in the specified Amazon Web Services Region.
    /// Return PaginatorSequence for operation.
    ///
    /// - Parameters:
    ///   - input: Input for request
    ///   - logger: Logger used flot logging
    public func listUpdatesPaginator(
        _ input: ListUpdatesRequest,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<ListUpdatesRequest, ListUpdatesResponse> {
        return .init(
            input: input,
            command: self.listUpdates,
            inputKey: \ListUpdatesRequest.nextToken,
            outputKey: \ListUpdatesResponse.nextToken,
            logger: logger
        )
    }
}

extension EKS.DescribeAddonVersionsRequest: AWSPaginateToken {
    public func usingPaginationToken(_ token: String) -> EKS.DescribeAddonVersionsRequest {
        return .init(
            addonName: self.addonName,
            kubernetesVersion: self.kubernetesVersion,
            maxResults: self.maxResults,
            nextToken: token,
            owners: self.owners,
            publishers: self.publishers,
            types: self.types
        )
    }
}

extension EKS.ListAccessEntriesRequest: AWSPaginateToken {
    public func usingPaginationToken(_ token: String) -> EKS.ListAccessEntriesRequest {
        return .init(
            associatedPolicyArn: self.associatedPolicyArn,
            clusterName: self.clusterName,
            maxResults: self.maxResults,
            nextToken: token
        )
    }
}

extension EKS.ListAccessPoliciesRequest: AWSPaginateToken {
    public func usingPaginationToken(_ token: String) -> EKS.ListAccessPoliciesRequest {
        return .init(
            maxResults: self.maxResults,
            nextToken: token
        )
    }
}

extension EKS.ListAddonsRequest: AWSPaginateToken {
    public func usingPaginationToken(_ token: String) -> EKS.ListAddonsRequest {
        return .init(
            clusterName: self.clusterName,
            maxResults: self.maxResults,
            nextToken: token
        )
    }
}

extension EKS.ListAssociatedAccessPoliciesRequest: AWSPaginateToken {
    public func usingPaginationToken(_ token: String) -> EKS.ListAssociatedAccessPoliciesRequest {
        return .init(
            clusterName: self.clusterName,
            maxResults: self.maxResults,
            nextToken: token,
            principalArn: self.principalArn
        )
    }
}

extension EKS.ListClustersRequest: AWSPaginateToken {
    public func usingPaginationToken(_ token: String) -> EKS.ListClustersRequest {
        return .init(
            include: self.include,
            maxResults: self.maxResults,
            nextToken: token
        )
    }
}

extension EKS.ListEksAnywhereSubscriptionsRequest: AWSPaginateToken {
    public func usingPaginationToken(_ token: String) -> EKS.ListEksAnywhereSubscriptionsRequest {
        return .init(
            includeStatus: self.includeStatus,
            maxResults: self.maxResults,
            nextToken: token
        )
    }
}

extension EKS.ListFargateProfilesRequest: AWSPaginateToken {
    public func usingPaginationToken(_ token: String) -> EKS.ListFargateProfilesRequest {
        return .init(
            clusterName: self.clusterName,
            maxResults: self.maxResults,
            nextToken: token
        )
    }
}

extension EKS.ListIdentityProviderConfigsRequest: AWSPaginateToken {
    public func usingPaginationToken(_ token: String) -> EKS.ListIdentityProviderConfigsRequest {
        return .init(
            clusterName: self.clusterName,
            maxResults: self.maxResults,
            nextToken: token
        )
    }
}

extension EKS.ListInsightsRequest: AWSPaginateToken {
    public func usingPaginationToken(_ token: String) -> EKS.ListInsightsRequest {
        return .init(
            clusterName: self.clusterName,
            filter: self.filter,
            maxResults: self.maxResults,
            nextToken: token
        )
    }
}

extension EKS.ListNodegroupsRequest: AWSPaginateToken {
    public func usingPaginationToken(_ token: String) -> EKS.ListNodegroupsRequest {
        return .init(
            clusterName: self.clusterName,
            maxResults: self.maxResults,
            nextToken: token
        )
    }
}

extension EKS.ListPodIdentityAssociationsRequest: AWSPaginateToken {
    public func usingPaginationToken(_ token: String) -> EKS.ListPodIdentityAssociationsRequest {
        return .init(
            clusterName: self.clusterName,
            maxResults: self.maxResults,
            namespace: self.namespace,
            nextToken: token,
            serviceAccount: self.serviceAccount
        )
    }
}

extension EKS.ListUpdatesRequest: AWSPaginateToken {
    public func usingPaginationToken(_ token: String) -> EKS.ListUpdatesRequest {
        return .init(
            addonName: self.addonName,
            maxResults: self.maxResults,
            name: self.name,
            nextToken: token,
            nodegroupName: self.nodegroupName
        )
    }
}

// MARK: Waiters

@available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
extension EKS {
    public func waitUntilAddonActive(
        _ input: DescribeAddonRequest,
        maxWaitTime: TimeAmount? = nil,
        logger: Logger = AWSClient.loggingDisabled
    ) async throws {
        let waiter = AWSClient.Waiter(
            acceptors: [
                .init(state: .failure, matcher: try! JMESPathMatcher("addon.status", expected: "CREATE_FAILED")),
                .init(state: .failure, matcher: try! JMESPathMatcher("addon.status", expected: "DEGRADED")),
                .init(state: .success, matcher: try! JMESPathMatcher("addon.status", expected: "ACTIVE")),
            ],
            minDelayTime: .seconds(10),
            command: self.describeAddon
        )
        return try await self.client.waitUntil(input, waiter: waiter, maxWaitTime: maxWaitTime, logger: logger)
    }

    public func waitUntilAddonDeleted(
        _ input: DescribeAddonRequest,
        maxWaitTime: TimeAmount? = nil,
        logger: Logger = AWSClient.loggingDisabled
    ) async throws {
        let waiter = AWSClient.Waiter(
            acceptors: [
                .init(state: .failure, matcher: try! JMESPathMatcher("addon.status", expected: "DELETE_FAILED")),
                .init(state: .success, matcher: AWSErrorCodeMatcher("ResourceNotFoundException")),
            ],
            minDelayTime: .seconds(10),
            command: self.describeAddon
        )
        return try await self.client.waitUntil(input, waiter: waiter, maxWaitTime: maxWaitTime, logger: logger)
    }

    public func waitUntilClusterActive(
        _ input: DescribeClusterRequest,
        maxWaitTime: TimeAmount? = nil,
        logger: Logger = AWSClient.loggingDisabled
    ) async throws {
        let waiter = AWSClient.Waiter(
            acceptors: [
                .init(state: .failure, matcher: try! JMESPathMatcher("cluster.status", expected: "DELETING")),
                .init(state: .failure, matcher: try! JMESPathMatcher("cluster.status", expected: "FAILED")),
                .init(state: .success, matcher: try! JMESPathMatcher("cluster.status", expected: "ACTIVE")),
            ],
            minDelayTime: .seconds(30),
            command: self.describeCluster
        )
        return try await self.client.waitUntil(input, waiter: waiter, maxWaitTime: maxWaitTime, logger: logger)
    }

    public func waitUntilClusterDeleted(
        _ input: DescribeClusterRequest,
        maxWaitTime: TimeAmount? = nil,
        logger: Logger = AWSClient.loggingDisabled
    ) async throws {
        let waiter = AWSClient.Waiter(
            acceptors: [
                .init(state: .failure, matcher: try! JMESPathMatcher("cluster.status", expected: "ACTIVE")),
                .init(state: .failure, matcher: try! JMESPathMatcher("cluster.status", expected: "CREATING")),
                .init(state: .failure, matcher: try! JMESPathMatcher("cluster.status", expected: "PENDING")),
                .init(state: .success, matcher: AWSErrorCodeMatcher("ResourceNotFoundException")),
            ],
            minDelayTime: .seconds(30),
            command: self.describeCluster
        )
        return try await self.client.waitUntil(input, waiter: waiter, maxWaitTime: maxWaitTime, logger: logger)
    }

    public func waitUntilFargateProfileActive(
        _ input: DescribeFargateProfileRequest,
        maxWaitTime: TimeAmount? = nil,
        logger: Logger = AWSClient.loggingDisabled
    ) async throws {
        let waiter = AWSClient.Waiter(
            acceptors: [
                .init(state: .failure, matcher: try! JMESPathMatcher("fargateProfile.status", expected: "CREATE_FAILED")),
                .init(state: .success, matcher: try! JMESPathMatcher("fargateProfile.status", expected: "ACTIVE")),
            ],
            minDelayTime: .seconds(10),
            command: self.describeFargateProfile
        )
        return try await self.client.waitUntil(input, waiter: waiter, maxWaitTime: maxWaitTime, logger: logger)
    }

    public func waitUntilFargateProfileDeleted(
        _ input: DescribeFargateProfileRequest,
        maxWaitTime: TimeAmount? = nil,
        logger: Logger = AWSClient.loggingDisabled
    ) async throws {
        let waiter = AWSClient.Waiter(
            acceptors: [
                .init(state: .failure, matcher: try! JMESPathMatcher("fargateProfile.status", expected: "DELETE_FAILED")),
                .init(state: .success, matcher: AWSErrorCodeMatcher("ResourceNotFoundException")),
            ],
            minDelayTime: .seconds(30),
            command: self.describeFargateProfile
        )
        return try await self.client.waitUntil(input, waiter: waiter, maxWaitTime: maxWaitTime, logger: logger)
    }

    public func waitUntilNodegroupActive(
        _ input: DescribeNodegroupRequest,
        maxWaitTime: TimeAmount? = nil,
        logger: Logger = AWSClient.loggingDisabled
    ) async throws {
        let waiter = AWSClient.Waiter(
            acceptors: [
                .init(state: .failure, matcher: try! JMESPathMatcher("nodegroup.status", expected: "CREATE_FAILED")),
                .init(state: .success, matcher: try! JMESPathMatcher("nodegroup.status", expected: "ACTIVE")),
            ],
            minDelayTime: .seconds(30),
            command: self.describeNodegroup
        )
        return try await self.client.waitUntil(input, waiter: waiter, maxWaitTime: maxWaitTime, logger: logger)
    }

    public func waitUntilNodegroupDeleted(
        _ input: DescribeNodegroupRequest,
        maxWaitTime: TimeAmount? = nil,
        logger: Logger = AWSClient.loggingDisabled
    ) async throws {
        let waiter = AWSClient.Waiter(
            acceptors: [
                .init(state: .failure, matcher: try! JMESPathMatcher("nodegroup.status", expected: "DELETE_FAILED")),
                .init(state: .success, matcher: AWSErrorCodeMatcher("ResourceNotFoundException")),
            ],
            minDelayTime: .seconds(30),
            command: self.describeNodegroup
        )
        return try await self.client.waitUntil(input, waiter: waiter, maxWaitTime: maxWaitTime, logger: logger)
    }
}
