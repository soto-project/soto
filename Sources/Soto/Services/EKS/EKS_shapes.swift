//===----------------------------------------------------------------------===//
//
// This source file is part of the Soto for AWS open source project
//
// Copyright (c) 2017-2023 the Soto project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
// See CONTRIBUTORS.txt for the list of Soto project authors
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by https://github.com/soto-project/soto-codegenerator.
// DO NOT EDIT.

#if os(Linux) && compiler(<5.10)
// swift-corelibs-foundation hasn't been updated with Sendable conformances
@preconcurrency import Foundation
#else
import Foundation
#endif
@_spi(SotoInternal) import SotoCore

extension EKS {
    // MARK: Enums

    public enum AMITypes: String, CustomStringConvertible, Codable, Sendable, CodingKeyRepresentable {
        case al2023Arm64Standard = "AL2023_ARM_64_STANDARD"
        case al2023X8664STANDARD = "AL2023_x86_64_STANDARD"
        case al2Arm64 = "AL2_ARM_64"
        case al2X8664 = "AL2_x86_64"
        case al2X8664GPU = "AL2_x86_64_GPU"
        case bottlerocketArm64 = "BOTTLEROCKET_ARM_64"
        case bottlerocketArm64Nvidia = "BOTTLEROCKET_ARM_64_NVIDIA"
        case bottlerocketX8664 = "BOTTLEROCKET_x86_64"
        case bottlerocketX8664NVIDIA = "BOTTLEROCKET_x86_64_NVIDIA"
        case custom = "CUSTOM"
        case windowsCORE2019X8664 = "WINDOWS_CORE_2019_x86_64"
        case windowsCORE2022X8664 = "WINDOWS_CORE_2022_x86_64"
        case windowsFULL2019X8664 = "WINDOWS_FULL_2019_x86_64"
        case windowsFULL2022X8664 = "WINDOWS_FULL_2022_x86_64"
        public var description: String { return self.rawValue }
    }

    public enum AccessScopeType: String, CustomStringConvertible, Codable, Sendable, CodingKeyRepresentable {
        case cluster = "cluster"
        case namespace = "namespace"
        public var description: String { return self.rawValue }
    }

    public enum AddonIssueCode: String, CustomStringConvertible, Codable, Sendable, CodingKeyRepresentable {
        case accessDenied = "AccessDenied"
        case admissionRequestDenied = "AdmissionRequestDenied"
        case clusterUnreachable = "ClusterUnreachable"
        case configurationConflict = "ConfigurationConflict"
        case insufficientNumberOfReplicas = "InsufficientNumberOfReplicas"
        case internalFailure = "InternalFailure"
        case k8sResourceNotFound = "K8sResourceNotFound"
        case unsupportedAddonModification = "UnsupportedAddonModification"
        public var description: String { return self.rawValue }
    }

    public enum AddonStatus: String, CustomStringConvertible, Codable, Sendable, CodingKeyRepresentable {
        case active = "ACTIVE"
        case createFailed = "CREATE_FAILED"
        case creating = "CREATING"
        case degraded = "DEGRADED"
        case deleteFailed = "DELETE_FAILED"
        case deleting = "DELETING"
        case updateFailed = "UPDATE_FAILED"
        case updating = "UPDATING"
        public var description: String { return self.rawValue }
    }

    public enum AuthenticationMode: String, CustomStringConvertible, Codable, Sendable, CodingKeyRepresentable {
        case api = "API"
        case apiAndConfigMap = "API_AND_CONFIG_MAP"
        case configMap = "CONFIG_MAP"
        public var description: String { return self.rawValue }
    }

    public enum CapacityTypes: String, CustomStringConvertible, Codable, Sendable, CodingKeyRepresentable {
        case onDemand = "ON_DEMAND"
        case spot = "SPOT"
        public var description: String { return self.rawValue }
    }

    public enum Category: String, CustomStringConvertible, Codable, Sendable, CodingKeyRepresentable {
        case upgradeReadiness = "UPGRADE_READINESS"
        public var description: String { return self.rawValue }
    }

    public enum ClusterIssueCode: String, CustomStringConvertible, Codable, Sendable, CodingKeyRepresentable {
        case accessDenied = "AccessDenied"
        case clusterUnreachable = "ClusterUnreachable"
        case configurationConflict = "ConfigurationConflict"
        case ec2SecurityGroupNotFound = "Ec2SecurityGroupNotFound"
        case ec2ServiceNotSubscribed = "Ec2ServiceNotSubscribed"
        case ec2SubnetNotFound = "Ec2SubnetNotFound"
        case iamRoleNotFound = "IamRoleNotFound"
        case insufficientFreeAddresses = "InsufficientFreeAddresses"
        case internalFailure = "InternalFailure"
        case kmsGrantRevoked = "KmsGrantRevoked"
        case kmsKeyDisabled = "KmsKeyDisabled"
        case kmsKeyMarkedForDeletion = "KmsKeyMarkedForDeletion"
        case kmsKeyNotFound = "KmsKeyNotFound"
        case other = "Other"
        case resourceLimitExceeded = "ResourceLimitExceeded"
        case resourceNotFound = "ResourceNotFound"
        case stsRegionalEndpointDisabled = "StsRegionalEndpointDisabled"
        case unsupportedVersion = "UnsupportedVersion"
        case vpcNotFound = "VpcNotFound"
        public var description: String { return self.rawValue }
    }

    public enum ClusterStatus: String, CustomStringConvertible, Codable, Sendable, CodingKeyRepresentable {
        case active = "ACTIVE"
        case creating = "CREATING"
        case deleting = "DELETING"
        case failed = "FAILED"
        case pending = "PENDING"
        case updating = "UPDATING"
        public var description: String { return self.rawValue }
    }

    public enum ConfigStatus: String, CustomStringConvertible, Codable, Sendable, CodingKeyRepresentable {
        case active = "ACTIVE"
        case creating = "CREATING"
        case deleting = "DELETING"
        public var description: String { return self.rawValue }
    }

    public enum ConnectorConfigProvider: String, CustomStringConvertible, Codable, Sendable, CodingKeyRepresentable {
        case aks = "AKS"
        case anthos = "ANTHOS"
        case ec2 = "EC2"
        case eksAnywhere = "EKS_ANYWHERE"
        case gke = "GKE"
        case openshift = "OPENSHIFT"
        case other = "OTHER"
        case rancher = "RANCHER"
        case tanzu = "TANZU"
        public var description: String { return self.rawValue }
    }

    public enum EksAnywhereSubscriptionLicenseType: String, CustomStringConvertible, Codable, Sendable, CodingKeyRepresentable {
        case cluster = "Cluster"
        public var description: String { return self.rawValue }
    }

    public enum EksAnywhereSubscriptionStatus: String, CustomStringConvertible, Codable, Sendable, CodingKeyRepresentable {
        case active = "ACTIVE"
        case creating = "CREATING"
        case deleting = "DELETING"
        case expired = "EXPIRED"
        case expiring = "EXPIRING"
        case updating = "UPDATING"
        public var description: String { return self.rawValue }
    }

    public enum EksAnywhereSubscriptionTermUnit: String, CustomStringConvertible, Codable, Sendable, CodingKeyRepresentable {
        case months = "MONTHS"
        public var description: String { return self.rawValue }
    }

    public enum ErrorCode: String, CustomStringConvertible, Codable, Sendable, CodingKeyRepresentable {
        case accessDenied = "AccessDenied"
        case admissionRequestDenied = "AdmissionRequestDenied"
        case clusterUnreachable = "ClusterUnreachable"
        case configurationConflict = "ConfigurationConflict"
        case eniLimitReached = "EniLimitReached"
        case insufficientFreeAddresses = "InsufficientFreeAddresses"
        case insufficientNumberOfReplicas = "InsufficientNumberOfReplicas"
        case ipNotAvailable = "IpNotAvailable"
        case k8sResourceNotFound = "K8sResourceNotFound"
        case nodeCreationFailure = "NodeCreationFailure"
        case operationNotPermitted = "OperationNotPermitted"
        case podEvictionFailure = "PodEvictionFailure"
        case securityGroupNotFound = "SecurityGroupNotFound"
        case subnetNotFound = "SubnetNotFound"
        case unknown = "Unknown"
        case unsupportedAddonModification = "UnsupportedAddonModification"
        case vpcIdNotFound = "VpcIdNotFound"
        public var description: String { return self.rawValue }
    }

    public enum FargateProfileStatus: String, CustomStringConvertible, Codable, Sendable, CodingKeyRepresentable {
        case active = "ACTIVE"
        case createFailed = "CREATE_FAILED"
        case creating = "CREATING"
        case deleteFailed = "DELETE_FAILED"
        case deleting = "DELETING"
        public var description: String { return self.rawValue }
    }

    public enum InsightStatusValue: String, CustomStringConvertible, Codable, Sendable, CodingKeyRepresentable {
        case error = "ERROR"
        case passing = "PASSING"
        case unknown = "UNKNOWN"
        case warning = "WARNING"
        public var description: String { return self.rawValue }
    }

    public enum IpFamily: String, CustomStringConvertible, Codable, Sendable, CodingKeyRepresentable {
        case ipv4 = "ipv4"
        case ipv6 = "ipv6"
        public var description: String { return self.rawValue }
    }

    public enum LogType: String, CustomStringConvertible, Codable, Sendable, CodingKeyRepresentable {
        case api = "api"
        case audit = "audit"
        case authenticator = "authenticator"
        case controllerManager = "controllerManager"
        case scheduler = "scheduler"
        public var description: String { return self.rawValue }
    }

    public enum NodegroupIssueCode: String, CustomStringConvertible, Codable, Sendable, CodingKeyRepresentable {
        case accessDenied = "AccessDenied"
        case amiIdNotFound = "AmiIdNotFound"
        case asgInstanceLaunchFailures = "AsgInstanceLaunchFailures"
        case autoScalingGroupInstanceRefreshActive = "AutoScalingGroupInstanceRefreshActive"
        case autoScalingGroupInvalidConfiguration = "AutoScalingGroupInvalidConfiguration"
        case autoScalingGroupNotFound = "AutoScalingGroupNotFound"
        case autoScalingGroupOptInRequired = "AutoScalingGroupOptInRequired"
        case autoScalingGroupRateLimitExceeded = "AutoScalingGroupRateLimitExceeded"
        case clusterUnreachable = "ClusterUnreachable"
        case ec2LaunchTemplateDeletionFailure = "Ec2LaunchTemplateDeletionFailure"
        case ec2LaunchTemplateInvalidConfiguration = "Ec2LaunchTemplateInvalidConfiguration"
        case ec2LaunchTemplateMaxLimitExceeded = "Ec2LaunchTemplateMaxLimitExceeded"
        case ec2LaunchTemplateNotFound = "Ec2LaunchTemplateNotFound"
        case ec2LaunchTemplateVersionMaxLimitExceeded = "Ec2LaunchTemplateVersionMaxLimitExceeded"
        case ec2LaunchTemplateVersionMismatch = "Ec2LaunchTemplateVersionMismatch"
        case ec2SecurityGroupDeletionFailure = "Ec2SecurityGroupDeletionFailure"
        case ec2SecurityGroupNotFound = "Ec2SecurityGroupNotFound"
        case ec2SubnetInvalidConfiguration = "Ec2SubnetInvalidConfiguration"
        case ec2SubnetListTooLong = "Ec2SubnetListTooLong"
        case ec2SubnetMissingIpv6Assignment = "Ec2SubnetMissingIpv6Assignment"
        case ec2SubnetNotFound = "Ec2SubnetNotFound"
        case iamInstanceProfileNotFound = "IamInstanceProfileNotFound"
        case iamLimitExceeded = "IamLimitExceeded"
        case iamNodeRoleNotFound = "IamNodeRoleNotFound"
        case iamThrottling = "IamThrottling"
        case instanceLimitExceeded = "InstanceLimitExceeded"
        case insufficientFreeAddresses = "InsufficientFreeAddresses"
        case internalFailure = "InternalFailure"
        case kubernetesLabelInvalid = "KubernetesLabelInvalid"
        case limitExceeded = "LimitExceeded"
        case nodeCreationFailure = "NodeCreationFailure"
        case nodeTerminationFailure = "NodeTerminationFailure"
        case podEvictionFailure = "PodEvictionFailure"
        case sourceEc2LaunchTemplateNotFound = "SourceEc2LaunchTemplateNotFound"
        case unknown = "Unknown"
        public var description: String { return self.rawValue }
    }

    public enum NodegroupStatus: String, CustomStringConvertible, Codable, Sendable, CodingKeyRepresentable {
        case active = "ACTIVE"
        case createFailed = "CREATE_FAILED"
        case creating = "CREATING"
        case degraded = "DEGRADED"
        case deleteFailed = "DELETE_FAILED"
        case deleting = "DELETING"
        case updating = "UPDATING"
        public var description: String { return self.rawValue }
    }

    public enum ResolveConflicts: String, CustomStringConvertible, Codable, Sendable, CodingKeyRepresentable {
        case none = "NONE"
        case overwrite = "OVERWRITE"
        case preserve = "PRESERVE"
        public var description: String { return self.rawValue }
    }

    public enum TaintEffect: String, CustomStringConvertible, Codable, Sendable, CodingKeyRepresentable {
        case noExecute = "NO_EXECUTE"
        case noSchedule = "NO_SCHEDULE"
        case preferNoSchedule = "PREFER_NO_SCHEDULE"
        public var description: String { return self.rawValue }
    }

    public enum UpdateParamType: String, CustomStringConvertible, Codable, Sendable, CodingKeyRepresentable {
        case addonVersion = "AddonVersion"
        case authenticationMode = "AuthenticationMode"
        case clusterLogging = "ClusterLogging"
        case configurationValues = "ConfigurationValues"
        case desiredSize = "DesiredSize"
        case encryptionConfig = "EncryptionConfig"
        case endpointPrivateAccess = "EndpointPrivateAccess"
        case endpointPublicAccess = "EndpointPublicAccess"
        case identityProviderConfig = "IdentityProviderConfig"
        case labelsToAdd = "LabelsToAdd"
        case labelsToRemove = "LabelsToRemove"
        case launchTemplateName = "LaunchTemplateName"
        case launchTemplateVersion = "LaunchTemplateVersion"
        case maxSize = "MaxSize"
        case maxUnavailable = "MaxUnavailable"
        case maxUnavailablePercentage = "MaxUnavailablePercentage"
        case minSize = "MinSize"
        case platformVersion = "PlatformVersion"
        case publicAccessCidrs = "PublicAccessCidrs"
        case releaseVersion = "ReleaseVersion"
        case resolveConflicts = "ResolveConflicts"
        case securityGroups = "SecurityGroups"
        case serviceAccountRoleArn = "ServiceAccountRoleArn"
        case subnets = "Subnets"
        case taintsToAdd = "TaintsToAdd"
        case taintsToRemove = "TaintsToRemove"
        case version = "Version"
        public var description: String { return self.rawValue }
    }

    public enum UpdateStatus: String, CustomStringConvertible, Codable, Sendable, CodingKeyRepresentable {
        case cancelled = "Cancelled"
        case failed = "Failed"
        case inProgress = "InProgress"
        case successful = "Successful"
        public var description: String { return self.rawValue }
    }

    public enum UpdateType: String, CustomStringConvertible, Codable, Sendable, CodingKeyRepresentable {
        case accessConfigUpdate = "AccessConfigUpdate"
        case addonUpdate = "AddonUpdate"
        case associateEncryptionConfig = "AssociateEncryptionConfig"
        case associateIdentityProviderConfig = "AssociateIdentityProviderConfig"
        case configUpdate = "ConfigUpdate"
        case disassociateIdentityProviderConfig = "DisassociateIdentityProviderConfig"
        case endpointAccessUpdate = "EndpointAccessUpdate"
        case loggingUpdate = "LoggingUpdate"
        case versionUpdate = "VersionUpdate"
        case vpcConfigUpdate = "VpcConfigUpdate"
        public var description: String { return self.rawValue }
    }

    // MARK: Shapes

    public struct AccessConfigResponse: AWSDecodableShape {
        /// The current authentication mode of the cluster.
        public let authenticationMode: AuthenticationMode?
        /// Specifies whether or not the cluster creator IAM principal was set as a cluster admin access entry during cluster creation time.
        public let bootstrapClusterCreatorAdminPermissions: Bool?

        public init(authenticationMode: AuthenticationMode? = nil, bootstrapClusterCreatorAdminPermissions: Bool? = nil) {
            self.authenticationMode = authenticationMode
            self.bootstrapClusterCreatorAdminPermissions = bootstrapClusterCreatorAdminPermissions
        }

        private enum CodingKeys: String, CodingKey {
            case authenticationMode = "authenticationMode"
            case bootstrapClusterCreatorAdminPermissions = "bootstrapClusterCreatorAdminPermissions"
        }
    }

    public struct AccessEntry: AWSDecodableShape {
        /// The ARN of the access entry.
        public let accessEntryArn: String?
        /// The name of your cluster.
        public let clusterName: String?
        /// The Unix epoch timestamp at object creation.
        public let createdAt: Date?
        /// A name that you've specified in a Kubernetes RoleBinding or ClusterRoleBinding object so that Kubernetes authorizes the principalARN access to cluster objects.
        public let kubernetesGroups: [String]?
        /// The Unix epoch timestamp for the last modification to the object.
        public let modifiedAt: Date?
        /// The ARN of the IAM principal for the access entry. If you ever delete the IAM principal with this ARN, the access entry isn't automatically deleted. We recommend that you delete the access entry with an ARN for an IAM principal that you delete. If you don't delete the access entry and ever recreate the IAM principal, even if it has the same ARN, the access entry won't work. This is because even though the ARN is the same for the recreated IAM principal, the roleID or userID (you can see this with the Security Token Service GetCallerIdentity API) is different for the recreated IAM principal than it was for the original IAM principal. Even though you don't see the IAM principal's roleID or userID for an access entry, Amazon EKS stores it with the access entry.
        public let principalArn: String?
        /// Metadata that assists with categorization and organization. Each tag consists of a key and an optional value. You define both. Tags don't propagate to any other cluster or Amazon Web Services resources.
        public let tags: [String: String]?
        /// The type of the access entry.
        public let type: String?
        /// The name of a user that can authenticate to your cluster.
        public let username: String?

        public init(accessEntryArn: String? = nil, clusterName: String? = nil, createdAt: Date? = nil, kubernetesGroups: [String]? = nil, modifiedAt: Date? = nil, principalArn: String? = nil, tags: [String: String]? = nil, type: String? = nil, username: String? = nil) {
            self.accessEntryArn = accessEntryArn
            self.clusterName = clusterName
            self.createdAt = createdAt
            self.kubernetesGroups = kubernetesGroups
            self.modifiedAt = modifiedAt
            self.principalArn = principalArn
            self.tags = tags
            self.type = type
            self.username = username
        }

        private enum CodingKeys: String, CodingKey {
            case accessEntryArn = "accessEntryArn"
            case clusterName = "clusterName"
            case createdAt = "createdAt"
            case kubernetesGroups = "kubernetesGroups"
            case modifiedAt = "modifiedAt"
            case principalArn = "principalArn"
            case tags = "tags"
            case type = "type"
            case username = "username"
        }
    }

    public struct AccessPolicy: AWSDecodableShape {
        /// The ARN of the access policy.
        public let arn: String?
        /// The name of the access policy.
        public let name: String?

        public init(arn: String? = nil, name: String? = nil) {
            self.arn = arn
            self.name = name
        }

        private enum CodingKeys: String, CodingKey {
            case arn = "arn"
            case name = "name"
        }
    }

    public struct AccessScope: AWSEncodableShape & AWSDecodableShape {
        /// A Kubernetes namespace that an access policy is scoped to. A value is required if you specified namespace for Type.
        public let namespaces: [String]?
        /// The scope type of an access policy.
        public let type: AccessScopeType?

        public init(namespaces: [String]? = nil, type: AccessScopeType? = nil) {
            self.namespaces = namespaces
            self.type = type
        }

        private enum CodingKeys: String, CodingKey {
            case namespaces = "namespaces"
            case type = "type"
        }
    }

    public struct Addon: AWSDecodableShape {
        /// The Amazon Resource Name (ARN) of the add-on.
        public let addonArn: String?
        /// The name of the add-on.
        public let addonName: String?
        /// The version of the add-on.
        public let addonVersion: String?
        /// The name of your cluster.
        public let clusterName: String?
        /// The configuration values that you provided.
        public let configurationValues: String?
        /// The Unix epoch timestamp at object creation.
        public let createdAt: Date?
        /// An object that represents the health of the add-on.
        public let health: AddonHealth?
        /// Information about an Amazon EKS add-on from the Amazon Web Services Marketplace.
        public let marketplaceInformation: MarketplaceInformation?
        /// The Unix epoch timestamp for the last modification to the object.
        public let modifiedAt: Date?
        /// The owner of the add-on.
        public let owner: String?
        /// The publisher of the add-on.
        public let publisher: String?
        /// The Amazon Resource Name (ARN) of the IAM role that's bound to the Kubernetes ServiceAccount object that the add-on uses.
        public let serviceAccountRoleArn: String?
        /// The status of the add-on.
        public let status: AddonStatus?
        /// Metadata that assists with categorization and organization. Each tag consists of a key and an optional value. You define both. Tags don't propagate to any other cluster or Amazon Web Services resources.
        public let tags: [String: String]?

        public init(addonArn: String? = nil, addonName: String? = nil, addonVersion: String? = nil, clusterName: String? = nil, configurationValues: String? = nil, createdAt: Date? = nil, health: AddonHealth? = nil, marketplaceInformation: MarketplaceInformation? = nil, modifiedAt: Date? = nil, owner: String? = nil, publisher: String? = nil, serviceAccountRoleArn: String? = nil, status: AddonStatus? = nil, tags: [String: String]? = nil) {
            self.addonArn = addonArn
            self.addonName = addonName
            self.addonVersion = addonVersion
            self.clusterName = clusterName
            self.configurationValues = configurationValues
            self.createdAt = createdAt
            self.health = health
            self.marketplaceInformation = marketplaceInformation
            self.modifiedAt = modifiedAt
            self.owner = owner
            self.publisher = publisher
            self.serviceAccountRoleArn = serviceAccountRoleArn
            self.status = status
            self.tags = tags
        }

        private enum CodingKeys: String, CodingKey {
            case addonArn = "addonArn"
            case addonName = "addonName"
            case addonVersion = "addonVersion"
            case clusterName = "clusterName"
            case configurationValues = "configurationValues"
            case createdAt = "createdAt"
            case health = "health"
            case marketplaceInformation = "marketplaceInformation"
            case modifiedAt = "modifiedAt"
            case owner = "owner"
            case publisher = "publisher"
            case serviceAccountRoleArn = "serviceAccountRoleArn"
            case status = "status"
            case tags = "tags"
        }
    }

    public struct AddonHealth: AWSDecodableShape {
        /// An object representing the health issues for an add-on.
        public let issues: [AddonIssue]?

        public init(issues: [AddonIssue]? = nil) {
            self.issues = issues
        }

        private enum CodingKeys: String, CodingKey {
            case issues = "issues"
        }
    }

    public struct AddonInfo: AWSDecodableShape {
        /// The name of the add-on.
        public let addonName: String?
        /// An object representing information about available add-on versions and compatible Kubernetes versions.
        public let addonVersions: [AddonVersionInfo]?
        /// Information about the add-on from the Amazon Web Services Marketplace.
        public let marketplaceInformation: MarketplaceInformation?
        /// The owner of the add-on.
        public let owner: String?
        /// The publisher of the add-on.
        public let publisher: String?
        /// The type of the add-on.
        public let type: String?

        public init(addonName: String? = nil, addonVersions: [AddonVersionInfo]? = nil, marketplaceInformation: MarketplaceInformation? = nil, owner: String? = nil, publisher: String? = nil, type: String? = nil) {
            self.addonName = addonName
            self.addonVersions = addonVersions
            self.marketplaceInformation = marketplaceInformation
            self.owner = owner
            self.publisher = publisher
            self.type = type
        }

        private enum CodingKeys: String, CodingKey {
            case addonName = "addonName"
            case addonVersions = "addonVersions"
            case marketplaceInformation = "marketplaceInformation"
            case owner = "owner"
            case publisher = "publisher"
            case type = "type"
        }
    }

    public struct AddonIssue: AWSDecodableShape {
        /// A code that describes the type of issue.
        public let code: AddonIssueCode?
        /// A message that provides details about the issue and what might cause it.
        public let message: String?
        /// The resource IDs of the issue.
        public let resourceIds: [String]?

        public init(code: AddonIssueCode? = nil, message: String? = nil, resourceIds: [String]? = nil) {
            self.code = code
            self.message = message
            self.resourceIds = resourceIds
        }

        private enum CodingKeys: String, CodingKey {
            case code = "code"
            case message = "message"
            case resourceIds = "resourceIds"
        }
    }

    public struct AddonVersionInfo: AWSDecodableShape {
        /// The version of the add-on.
        public let addonVersion: String?
        /// The architectures that the version supports.
        public let architecture: [String]?
        /// An object representing the compatibilities of a version.
        public let compatibilities: [Compatibility]?
        /// Whether the add-on requires configuration.
        public let requiresConfiguration: Bool?

        public init(addonVersion: String? = nil, architecture: [String]? = nil, compatibilities: [Compatibility]? = nil, requiresConfiguration: Bool? = nil) {
            self.addonVersion = addonVersion
            self.architecture = architecture
            self.compatibilities = compatibilities
            self.requiresConfiguration = requiresConfiguration
        }

        private enum CodingKeys: String, CodingKey {
            case addonVersion = "addonVersion"
            case architecture = "architecture"
            case compatibilities = "compatibilities"
            case requiresConfiguration = "requiresConfiguration"
        }
    }

    public struct AssociateAccessPolicyRequest: AWSEncodableShape {
        /// The scope for the AccessPolicy. You can scope access policies to an entire cluster or to specific Kubernetes namespaces.
        public let accessScope: AccessScope
        /// The name of your cluster.
        public let clusterName: String
        /// The ARN of the AccessPolicy that you're associating. For a list of ARNs, use ListAccessPolicies.
        public let policyArn: String
        /// The Amazon Resource Name (ARN) of the IAM user or role for the AccessEntry that you're associating the access policy to.
        public let principalArn: String

        public init(accessScope: AccessScope, clusterName: String, policyArn: String, principalArn: String) {
            self.accessScope = accessScope
            self.clusterName = clusterName
            self.policyArn = policyArn
            self.principalArn = principalArn
        }

        public func encode(to encoder: Encoder) throws {
            let request = encoder.userInfo[.awsRequest]! as! RequestEncodingContainer
            var container = encoder.container(keyedBy: CodingKeys.self)
            try container.encode(self.accessScope, forKey: .accessScope)
            request.encodePath(self.clusterName, key: "clusterName")
            try container.encode(self.policyArn, forKey: .policyArn)
            request.encodePath(self.principalArn, key: "principalArn")
        }

        private enum CodingKeys: String, CodingKey {
            case accessScope = "accessScope"
            case policyArn = "policyArn"
        }
    }

    public struct AssociateAccessPolicyResponse: AWSDecodableShape {
        /// The AccessPolicy and scope associated to the AccessEntry.
        public let associatedAccessPolicy: AssociatedAccessPolicy?
        /// The name of your cluster.
        public let clusterName: String?
        /// The ARN of the IAM principal for the AccessEntry.
        public let principalArn: String?

        public init(associatedAccessPolicy: AssociatedAccessPolicy? = nil, clusterName: String? = nil, principalArn: String? = nil) {
            self.associatedAccessPolicy = associatedAccessPolicy
            self.clusterName = clusterName
            self.principalArn = principalArn
        }

        private enum CodingKeys: String, CodingKey {
            case associatedAccessPolicy = "associatedAccessPolicy"
            case clusterName = "clusterName"
            case principalArn = "principalArn"
        }
    }

    public struct AssociateEncryptionConfigRequest: AWSEncodableShape {
        /// A unique, case-sensitive identifier that you provide to ensure
        /// the idempotency of the request.
        public let clientRequestToken: String?
        /// The name of your cluster.
        public let clusterName: String
        /// The configuration you are using for encryption.
        public let encryptionConfig: [EncryptionConfig]

        public init(clientRequestToken: String? = AssociateEncryptionConfigRequest.idempotencyToken(), clusterName: String, encryptionConfig: [EncryptionConfig]) {
            self.clientRequestToken = clientRequestToken
            self.clusterName = clusterName
            self.encryptionConfig = encryptionConfig
        }

        public func encode(to encoder: Encoder) throws {
            let request = encoder.userInfo[.awsRequest]! as! RequestEncodingContainer
            var container = encoder.container(keyedBy: CodingKeys.self)
            try container.encodeIfPresent(self.clientRequestToken, forKey: .clientRequestToken)
            request.encodePath(self.clusterName, key: "clusterName")
            try container.encode(self.encryptionConfig, forKey: .encryptionConfig)
        }

        public func validate(name: String) throws {
            try self.validate(self.encryptionConfig, name: "encryptionConfig", parent: name, max: 1)
        }

        private enum CodingKeys: String, CodingKey {
            case clientRequestToken = "clientRequestToken"
            case encryptionConfig = "encryptionConfig"
        }
    }

    public struct AssociateEncryptionConfigResponse: AWSDecodableShape {
        public let update: Update?

        public init(update: Update? = nil) {
            self.update = update
        }

        private enum CodingKeys: String, CodingKey {
            case update = "update"
        }
    }

    public struct AssociateIdentityProviderConfigRequest: AWSEncodableShape {
        /// A unique, case-sensitive identifier that you provide to ensure
        /// the idempotency of the request.
        public let clientRequestToken: String?
        /// The name of your cluster.
        public let clusterName: String
        /// An object representing an OpenID Connect (OIDC) identity provider configuration.
        public let oidc: OidcIdentityProviderConfigRequest
        /// Metadata that assists with categorization and organization. Each tag consists of a key and an optional value. You define both. Tags don't propagate to any other cluster or Amazon Web Services resources.
        public let tags: [String: String]?

        public init(clientRequestToken: String? = AssociateIdentityProviderConfigRequest.idempotencyToken(), clusterName: String, oidc: OidcIdentityProviderConfigRequest, tags: [String: String]? = nil) {
            self.clientRequestToken = clientRequestToken
            self.clusterName = clusterName
            self.oidc = oidc
            self.tags = tags
        }

        public func encode(to encoder: Encoder) throws {
            let request = encoder.userInfo[.awsRequest]! as! RequestEncodingContainer
            var container = encoder.container(keyedBy: CodingKeys.self)
            try container.encodeIfPresent(self.clientRequestToken, forKey: .clientRequestToken)
            request.encodePath(self.clusterName, key: "clusterName")
            try container.encode(self.oidc, forKey: .oidc)
            try container.encodeIfPresent(self.tags, forKey: .tags)
        }

        public func validate(name: String) throws {
            try self.oidc.validate(name: "\(name).oidc")
            try self.tags?.forEach {
                try validate($0.key, name: "tags.key", parent: name, max: 128)
                try validate($0.key, name: "tags.key", parent: name, min: 1)
                try validate($0.value, name: "tags[\"\($0.key)\"]", parent: name, max: 256)
            }
            try self.validate(self.tags, name: "tags", parent: name, max: 50)
            try self.validate(self.tags, name: "tags", parent: name, min: 1)
        }

        private enum CodingKeys: String, CodingKey {
            case clientRequestToken = "clientRequestToken"
            case oidc = "oidc"
            case tags = "tags"
        }
    }

    public struct AssociateIdentityProviderConfigResponse: AWSDecodableShape {
        /// The tags for the resource.
        public let tags: [String: String]?
        public let update: Update?

        public init(tags: [String: String]? = nil, update: Update? = nil) {
            self.tags = tags
            self.update = update
        }

        private enum CodingKeys: String, CodingKey {
            case tags = "tags"
            case update = "update"
        }
    }

    public struct AssociatedAccessPolicy: AWSDecodableShape {
        /// The scope of the access policy.
        public let accessScope: AccessScope?
        /// The date and time the AccessPolicy was associated with an AccessEntry.
        public let associatedAt: Date?
        /// The Unix epoch timestamp for the last modification to the object.
        public let modifiedAt: Date?
        /// The ARN of the AccessPolicy.
        public let policyArn: String?

        public init(accessScope: AccessScope? = nil, associatedAt: Date? = nil, modifiedAt: Date? = nil, policyArn: String? = nil) {
            self.accessScope = accessScope
            self.associatedAt = associatedAt
            self.modifiedAt = modifiedAt
            self.policyArn = policyArn
        }

        private enum CodingKeys: String, CodingKey {
            case accessScope = "accessScope"
            case associatedAt = "associatedAt"
            case modifiedAt = "modifiedAt"
            case policyArn = "policyArn"
        }
    }

    public struct AutoScalingGroup: AWSDecodableShape {
        /// The name of the Auto Scaling group associated with an Amazon EKS managed node group.
        public let name: String?

        public init(name: String? = nil) {
            self.name = name
        }

        private enum CodingKeys: String, CodingKey {
            case name = "name"
        }
    }

    public struct Certificate: AWSDecodableShape {
        /// The Base64-encoded certificate data required to communicate with your cluster. Add this to the certificate-authority-data section of the kubeconfig file for your cluster.
        public let data: String?

        public init(data: String? = nil) {
            self.data = data
        }

        private enum CodingKeys: String, CodingKey {
            case data = "data"
        }
    }

    public struct ClientStat: AWSDecodableShape {
        /// The timestamp of the last request seen from the Kubernetes client.
        public let lastRequestTime: Date?
        /// The number of requests from the Kubernetes client seen over the last 30 days.
        public let numberOfRequestsLast30Days: Int?
        /// The user agent of the Kubernetes client using the deprecated resource.
        public let userAgent: String?

        public init(lastRequestTime: Date? = nil, numberOfRequestsLast30Days: Int? = nil, userAgent: String? = nil) {
            self.lastRequestTime = lastRequestTime
            self.numberOfRequestsLast30Days = numberOfRequestsLast30Days
            self.userAgent = userAgent
        }

        private enum CodingKeys: String, CodingKey {
            case lastRequestTime = "lastRequestTime"
            case numberOfRequestsLast30Days = "numberOfRequestsLast30Days"
            case userAgent = "userAgent"
        }
    }

    public struct Cluster: AWSDecodableShape {
        /// The access configuration for the cluster.
        public let accessConfig: AccessConfigResponse?
        /// The Amazon Resource Name (ARN) of the cluster.
        public let arn: String?
        /// The certificate-authority-data for your cluster.
        public let certificateAuthority: Certificate?
        /// A unique, case-sensitive identifier that you provide to ensure
        /// the idempotency of the request.
        public let clientRequestToken: String?
        /// The configuration used to connect to a cluster for registration.
        public let connectorConfig: ConnectorConfigResponse?
        /// The Unix epoch timestamp at object creation.
        public let createdAt: Date?
        /// The encryption configuration for the cluster.
        public let encryptionConfig: [EncryptionConfig]?
        /// The endpoint for your Kubernetes API server.
        public let endpoint: String?
        /// An object representing the health of your local Amazon EKS cluster on an Amazon Web Services Outpost. This object isn't available for clusters on the Amazon Web Services cloud.
        public let health: ClusterHealth?
        /// The ID of your local Amazon EKS cluster on an Amazon Web Services Outpost. This property isn't available for an Amazon EKS cluster on the Amazon Web Services cloud.
        public let id: String?
        /// The identity provider information for the cluster.
        public let identity: Identity?
        /// The Kubernetes network configuration for the cluster.
        public let kubernetesNetworkConfig: KubernetesNetworkConfigResponse?
        /// The logging configuration for your cluster.
        public let logging: Logging?
        /// The name of your cluster.
        public let name: String?
        /// An object representing the configuration of your local Amazon EKS cluster on an Amazon Web Services Outpost. This object isn't available for clusters on the Amazon Web Services cloud.
        public let outpostConfig: OutpostConfigResponse?
        /// The platform version of your Amazon EKS cluster. For more information about clusters deployed on the Amazon Web Services Cloud, see Platform versions in the  Amazon EKS User Guide . For more information about local clusters deployed on an Outpost, see Amazon EKS local cluster platform versions in the  Amazon EKS User Guide .
        public let platformVersion: String?
        /// The VPC configuration used by the cluster control plane. Amazon EKS VPC resources have specific requirements to work properly with Kubernetes. For more information, see Cluster VPC considerations and Cluster security group considerations in the Amazon EKS User Guide.
        public let resourcesVpcConfig: VpcConfigResponse?
        /// The Amazon Resource Name (ARN) of the IAM role that provides permissions for the Kubernetes control plane to make calls to Amazon Web Services API operations on your behalf.
        public let roleArn: String?
        /// The current status of the cluster.
        public let status: ClusterStatus?
        /// Metadata that assists with categorization and organization. Each tag consists of a key and an optional value. You define both. Tags don't propagate to any other cluster or Amazon Web Services resources.
        public let tags: [String: String]?
        /// The Kubernetes server version for the cluster.
        public let version: String?

        public init(accessConfig: AccessConfigResponse? = nil, arn: String? = nil, certificateAuthority: Certificate? = nil, clientRequestToken: String? = nil, connectorConfig: ConnectorConfigResponse? = nil, createdAt: Date? = nil, encryptionConfig: [EncryptionConfig]? = nil, endpoint: String? = nil, health: ClusterHealth? = nil, id: String? = nil, identity: Identity? = nil, kubernetesNetworkConfig: KubernetesNetworkConfigResponse? = nil, logging: Logging? = nil, name: String? = nil, outpostConfig: OutpostConfigResponse? = nil, platformVersion: String? = nil, resourcesVpcConfig: VpcConfigResponse? = nil, roleArn: String? = nil, status: ClusterStatus? = nil, tags: [String: String]? = nil, version: String? = nil) {
            self.accessConfig = accessConfig
            self.arn = arn
            self.certificateAuthority = certificateAuthority
            self.clientRequestToken = clientRequestToken
            self.connectorConfig = connectorConfig
            self.createdAt = createdAt
            self.encryptionConfig = encryptionConfig
            self.endpoint = endpoint
            self.health = health
            self.id = id
            self.identity = identity
            self.kubernetesNetworkConfig = kubernetesNetworkConfig
            self.logging = logging
            self.name = name
            self.outpostConfig = outpostConfig
            self.platformVersion = platformVersion
            self.resourcesVpcConfig = resourcesVpcConfig
            self.roleArn = roleArn
            self.status = status
            self.tags = tags
            self.version = version
        }

        private enum CodingKeys: String, CodingKey {
            case accessConfig = "accessConfig"
            case arn = "arn"
            case certificateAuthority = "certificateAuthority"
            case clientRequestToken = "clientRequestToken"
            case connectorConfig = "connectorConfig"
            case createdAt = "createdAt"
            case encryptionConfig = "encryptionConfig"
            case endpoint = "endpoint"
            case health = "health"
            case id = "id"
            case identity = "identity"
            case kubernetesNetworkConfig = "kubernetesNetworkConfig"
            case logging = "logging"
            case name = "name"
            case outpostConfig = "outpostConfig"
            case platformVersion = "platformVersion"
            case resourcesVpcConfig = "resourcesVpcConfig"
            case roleArn = "roleArn"
            case status = "status"
            case tags = "tags"
            case version = "version"
        }
    }

    public struct ClusterHealth: AWSDecodableShape {
        /// An object representing the health issues of your local Amazon EKS cluster on an Amazon Web Services Outpost.
        public let issues: [ClusterIssue]?

        public init(issues: [ClusterIssue]? = nil) {
            self.issues = issues
        }

        private enum CodingKeys: String, CodingKey {
            case issues = "issues"
        }
    }

    public struct ClusterIssue: AWSDecodableShape {
        /// The error code of the issue.
        public let code: ClusterIssueCode?
        /// A description of the issue.
        public let message: String?
        /// The resource IDs that the issue relates to.
        public let resourceIds: [String]?

        public init(code: ClusterIssueCode? = nil, message: String? = nil, resourceIds: [String]? = nil) {
            self.code = code
            self.message = message
            self.resourceIds = resourceIds
        }

        private enum CodingKeys: String, CodingKey {
            case code = "code"
            case message = "message"
            case resourceIds = "resourceIds"
        }
    }

    public struct Compatibility: AWSDecodableShape {
        /// The supported Kubernetes version of the cluster.
        public let clusterVersion: String?
        /// The supported default version.
        public let defaultVersion: Bool?
        /// The supported compute platform.
        public let platformVersions: [String]?

        public init(clusterVersion: String? = nil, defaultVersion: Bool? = nil, platformVersions: [String]? = nil) {
            self.clusterVersion = clusterVersion
            self.defaultVersion = defaultVersion
            self.platformVersions = platformVersions
        }

        private enum CodingKeys: String, CodingKey {
            case clusterVersion = "clusterVersion"
            case defaultVersion = "defaultVersion"
            case platformVersions = "platformVersions"
        }
    }

    public struct ConnectorConfigRequest: AWSEncodableShape {
        /// The cloud provider for the target cluster to connect.
        public let provider: ConnectorConfigProvider
        /// The Amazon Resource Name (ARN) of the role that is authorized to request the connector configuration.
        public let roleArn: String

        public init(provider: ConnectorConfigProvider, roleArn: String) {
            self.provider = provider
            self.roleArn = roleArn
        }

        private enum CodingKeys: String, CodingKey {
            case provider = "provider"
            case roleArn = "roleArn"
        }
    }

    public struct ConnectorConfigResponse: AWSDecodableShape {
        /// A unique code associated with the cluster for registration purposes.
        public let activationCode: String?
        /// The expiration time of the connected cluster. The cluster's YAML file must be applied through the native provider.
        public let activationExpiry: Date?
        /// A unique ID associated with the cluster for registration purposes.
        public let activationId: String?
        /// The cluster's cloud service provider.
        public let provider: String?
        /// The Amazon Resource Name (ARN) of the role to communicate with services from the connected Kubernetes cluster.
        public let roleArn: String?

        public init(activationCode: String? = nil, activationExpiry: Date? = nil, activationId: String? = nil, provider: String? = nil, roleArn: String? = nil) {
            self.activationCode = activationCode
            self.activationExpiry = activationExpiry
            self.activationId = activationId
            self.provider = provider
            self.roleArn = roleArn
        }

        private enum CodingKeys: String, CodingKey {
            case activationCode = "activationCode"
            case activationExpiry = "activationExpiry"
            case activationId = "activationId"
            case provider = "provider"
            case roleArn = "roleArn"
        }
    }

    public struct ControlPlanePlacementRequest: AWSEncodableShape {
        /// The name of the placement group for the Kubernetes control plane instances. This setting can't be changed after cluster creation.
        public let groupName: String?

        public init(groupName: String? = nil) {
            self.groupName = groupName
        }

        private enum CodingKeys: String, CodingKey {
            case groupName = "groupName"
        }
    }

    public struct ControlPlanePlacementResponse: AWSDecodableShape {
        /// The name of the placement group for the Kubernetes control plane instances.
        public let groupName: String?

        public init(groupName: String? = nil) {
            self.groupName = groupName
        }

        private enum CodingKeys: String, CodingKey {
            case groupName = "groupName"
        }
    }

    public struct CreateAccessConfigRequest: AWSEncodableShape {
        /// The desired authentication mode for the cluster. If you create a cluster by using the EKS API, Amazon Web Services SDKs, or CloudFormation, the default is CONFIG_MAP. If you create the cluster by using the Amazon Web Services Management Console, the default value is API_AND_CONFIG_MAP.
        public let authenticationMode: AuthenticationMode?
        /// Specifies whether or not the cluster creator IAM principal was set as a cluster admin access entry during cluster creation time. The default value is true.
        public let bootstrapClusterCreatorAdminPermissions: Bool?

        public init(authenticationMode: AuthenticationMode? = nil, bootstrapClusterCreatorAdminPermissions: Bool? = nil) {
            self.authenticationMode = authenticationMode
            self.bootstrapClusterCreatorAdminPermissions = bootstrapClusterCreatorAdminPermissions
        }

        private enum CodingKeys: String, CodingKey {
            case authenticationMode = "authenticationMode"
            case bootstrapClusterCreatorAdminPermissions = "bootstrapClusterCreatorAdminPermissions"
        }
    }

    public struct CreateAccessEntryRequest: AWSEncodableShape {
        /// A unique, case-sensitive identifier that you provide to ensure
        /// the idempotency of the request.
        public let clientRequestToken: String?
        /// The name of your cluster.
        public let clusterName: String
        /// The value for name that you've specified for kind: Group as a subject in a Kubernetes RoleBinding or ClusterRoleBinding object. Amazon EKS doesn't confirm that the value for name exists in any bindings on your cluster. You can specify one or more names. Kubernetes authorizes the principalArn of the access entry to access any cluster objects that you've specified in a Kubernetes Role or ClusterRole object that is also specified in a binding's roleRef. For more information about creating Kubernetes RoleBinding, ClusterRoleBinding, Role, or ClusterRole objects, see Using RBAC Authorization in the Kubernetes documentation. If you want Amazon EKS to authorize the principalArn (instead of, or in addition to Kubernetes authorizing the principalArn), you can associate one or more access policies to the access entry using AssociateAccessPolicy. If you associate any access policies, the principalARN has all permissions assigned in the associated access policies and all permissions in any Kubernetes Role or ClusterRole objects that the group names are bound to.
        public let kubernetesGroups: [String]?
        /// The ARN of the IAM principal for the AccessEntry. You can specify one ARN for each access entry. You can't specify the same ARN in more than one access entry. This value can't be changed after access entry creation. The valid principals differ depending on the type of the access entry in the type field. The only valid ARN is IAM roles for the types of access entries for nodes:  . You can use every IAM principal type for STANDARD access entries. You can't use the STS session principal type with access entries because this is a temporary principal for each session and not a permanent identity that can be assigned permissions.  IAM best practices recommend using IAM roles with temporary credentials, rather than IAM users with long-term credentials.
        public let principalArn: String
        /// Metadata that assists with categorization and organization. Each tag consists of a key and an optional value. You define both. Tags don't propagate to any other cluster or Amazon Web Services resources.
        public let tags: [String: String]?
        /// The type of the new access entry. Valid values are Standard, FARGATE_LINUX, EC2_LINUX, and EC2_WINDOWS. If the principalArn is for an IAM role that's used for self-managed Amazon EC2 nodes, specify EC2_LINUX or EC2_WINDOWS. Amazon EKS grants the necessary permissions to the node for you. If the principalArn is for any other purpose, specify STANDARD. If you don't specify a value, Amazon EKS sets the value to STANDARD. It's unnecessary to create access entries for IAM roles used with Fargate profiles or managed Amazon EC2 nodes, because Amazon EKS creates entries in the aws-auth ConfigMap for the roles. You can't change this value once you've created the access entry. If you set the value to EC2_LINUX or EC2_WINDOWS, you can't specify values for kubernetesGroups, or associate an AccessPolicy to the access entry.
        public let type: String?
        /// The username to authenticate to Kubernetes with. We recommend not specifying a username and letting Amazon EKS specify it for you. For more information about the value Amazon EKS specifies for you, or constraints before specifying your own username, see Creating access entries in the Amazon EKS User Guide.
        public let username: String?

        public init(clientRequestToken: String? = CreateAccessEntryRequest.idempotencyToken(), clusterName: String, kubernetesGroups: [String]? = nil, principalArn: String, tags: [String: String]? = nil, type: String? = nil, username: String? = nil) {
            self.clientRequestToken = clientRequestToken
            self.clusterName = clusterName
            self.kubernetesGroups = kubernetesGroups
            self.principalArn = principalArn
            self.tags = tags
            self.type = type
            self.username = username
        }

        public func encode(to encoder: Encoder) throws {
            let request = encoder.userInfo[.awsRequest]! as! RequestEncodingContainer
            var container = encoder.container(keyedBy: CodingKeys.self)
            try container.encodeIfPresent(self.clientRequestToken, forKey: .clientRequestToken)
            request.encodePath(self.clusterName, key: "clusterName")
            try container.encodeIfPresent(self.kubernetesGroups, forKey: .kubernetesGroups)
            try container.encode(self.principalArn, forKey: .principalArn)
            try container.encodeIfPresent(self.tags, forKey: .tags)
            try container.encodeIfPresent(self.type, forKey: .type)
            try container.encodeIfPresent(self.username, forKey: .username)
        }

        public func validate(name: String) throws {
            try self.tags?.forEach {
                try validate($0.key, name: "tags.key", parent: name, max: 128)
                try validate($0.key, name: "tags.key", parent: name, min: 1)
                try validate($0.value, name: "tags[\"\($0.key)\"]", parent: name, max: 256)
            }
            try self.validate(self.tags, name: "tags", parent: name, max: 50)
            try self.validate(self.tags, name: "tags", parent: name, min: 1)
        }

        private enum CodingKeys: String, CodingKey {
            case clientRequestToken = "clientRequestToken"
            case kubernetesGroups = "kubernetesGroups"
            case principalArn = "principalArn"
            case tags = "tags"
            case type = "type"
            case username = "username"
        }
    }

    public struct CreateAccessEntryResponse: AWSDecodableShape {
        public let accessEntry: AccessEntry?

        public init(accessEntry: AccessEntry? = nil) {
            self.accessEntry = accessEntry
        }

        private enum CodingKeys: String, CodingKey {
            case accessEntry = "accessEntry"
        }
    }

    public struct CreateAddonRequest: AWSEncodableShape {
        /// The name of the add-on. The name must match one of the names returned by DescribeAddonVersions.
        public let addonName: String
        /// The version of the add-on. The version must match one of the versions returned by  DescribeAddonVersions .
        public let addonVersion: String?
        /// A unique, case-sensitive identifier that you provide to ensure
        /// the idempotency of the request.
        public let clientRequestToken: String?
        /// The name of your cluster.
        public let clusterName: String
        /// The set of configuration values for the add-on that's created. The values that you provide are validated against the schema returned by DescribeAddonConfiguration.
        public let configurationValues: String?
        /// How to resolve field value conflicts for an Amazon EKS add-on. Conflicts are handled based on the value you choose:    None – If the self-managed version of the add-on is installed on your cluster, Amazon EKS doesn't change the value. Creation of the add-on might fail.    Overwrite – If the self-managed version of the add-on is installed on your cluster and the Amazon EKS default value is different than the existing value, Amazon EKS changes the value to the Amazon EKS default value.    Preserve – This is similar to the NONE option. If the self-managed version of the add-on is installed on your cluster Amazon EKS doesn't change the add-on resource properties. Creation of the add-on might fail if conflicts are detected. This option works differently during the update operation. For more information, see UpdateAddon.   If you don't currently have the self-managed version of the add-on installed on your cluster, the Amazon EKS add-on is installed. Amazon EKS sets all values to default values, regardless of the option that you specify.
        public let resolveConflicts: ResolveConflicts?
        /// The Amazon Resource Name (ARN) of an existing IAM role to bind to the add-on's service account. The role must be assigned the IAM permissions required by the add-on. If you don't specify an existing IAM role, then the add-on uses the permissions assigned to the node IAM role. For more information, see Amazon EKS node IAM role in the Amazon EKS User Guide.  To specify an existing IAM role, you must have an IAM OpenID Connect (OIDC) provider created for your cluster. For more information, see Enabling IAM roles for service accounts on your cluster in the Amazon EKS User Guide.
        public let serviceAccountRoleArn: String?
        /// Metadata that assists with categorization and organization. Each tag consists of a key and an optional value. You define both. Tags don't propagate to any other cluster or Amazon Web Services resources.
        public let tags: [String: String]?

        public init(addonName: String, addonVersion: String? = nil, clientRequestToken: String? = CreateAddonRequest.idempotencyToken(), clusterName: String, configurationValues: String? = nil, resolveConflicts: ResolveConflicts? = nil, serviceAccountRoleArn: String? = nil, tags: [String: String]? = nil) {
            self.addonName = addonName
            self.addonVersion = addonVersion
            self.clientRequestToken = clientRequestToken
            self.clusterName = clusterName
            self.configurationValues = configurationValues
            self.resolveConflicts = resolveConflicts
            self.serviceAccountRoleArn = serviceAccountRoleArn
            self.tags = tags
        }

        public func encode(to encoder: Encoder) throws {
            let request = encoder.userInfo[.awsRequest]! as! RequestEncodingContainer
            var container = encoder.container(keyedBy: CodingKeys.self)
            try container.encode(self.addonName, forKey: .addonName)
            try container.encodeIfPresent(self.addonVersion, forKey: .addonVersion)
            try container.encodeIfPresent(self.clientRequestToken, forKey: .clientRequestToken)
            request.encodePath(self.clusterName, key: "clusterName")
            try container.encodeIfPresent(self.configurationValues, forKey: .configurationValues)
            try container.encodeIfPresent(self.resolveConflicts, forKey: .resolveConflicts)
            try container.encodeIfPresent(self.serviceAccountRoleArn, forKey: .serviceAccountRoleArn)
            try container.encodeIfPresent(self.tags, forKey: .tags)
        }

        public func validate(name: String) throws {
            try self.validate(self.clusterName, name: "clusterName", parent: name, max: 100)
            try self.validate(self.clusterName, name: "clusterName", parent: name, min: 1)
            try self.validate(self.clusterName, name: "clusterName", parent: name, pattern: "^[0-9A-Za-z][A-Za-z0-9\\-_]*$")
            try self.validate(self.serviceAccountRoleArn, name: "serviceAccountRoleArn", parent: name, max: 255)
            try self.validate(self.serviceAccountRoleArn, name: "serviceAccountRoleArn", parent: name, min: 1)
            try self.tags?.forEach {
                try validate($0.key, name: "tags.key", parent: name, max: 128)
                try validate($0.key, name: "tags.key", parent: name, min: 1)
                try validate($0.value, name: "tags[\"\($0.key)\"]", parent: name, max: 256)
            }
            try self.validate(self.tags, name: "tags", parent: name, max: 50)
            try self.validate(self.tags, name: "tags", parent: name, min: 1)
        }

        private enum CodingKeys: String, CodingKey {
            case addonName = "addonName"
            case addonVersion = "addonVersion"
            case clientRequestToken = "clientRequestToken"
            case configurationValues = "configurationValues"
            case resolveConflicts = "resolveConflicts"
            case serviceAccountRoleArn = "serviceAccountRoleArn"
            case tags = "tags"
        }
    }

    public struct CreateAddonResponse: AWSDecodableShape {
        public let addon: Addon?

        public init(addon: Addon? = nil) {
            self.addon = addon
        }

        private enum CodingKeys: String, CodingKey {
            case addon = "addon"
        }
    }

    public struct CreateClusterRequest: AWSEncodableShape {
        /// The access configuration for the cluster.
        public let accessConfig: CreateAccessConfigRequest?
        /// A unique, case-sensitive identifier that you provide to ensure
        /// the idempotency of the request.
        public let clientRequestToken: String?
        /// The encryption configuration for the cluster.
        public let encryptionConfig: [EncryptionConfig]?
        /// The Kubernetes network configuration for the cluster.
        public let kubernetesNetworkConfig: KubernetesNetworkConfigRequest?
        /// Enable or disable exporting the Kubernetes control plane logs for your cluster to CloudWatch Logs. By default, cluster control plane logs aren't exported to CloudWatch Logs. For more information, see Amazon EKS Cluster control plane logs in the  Amazon EKS User Guide .  CloudWatch Logs ingestion, archive storage, and data scanning rates apply to exported control plane logs. For more information, see CloudWatch Pricing.
        public let logging: Logging?
        /// The unique name to give to your cluster.
        public let name: String
        /// An object representing the configuration of your local Amazon EKS cluster on an Amazon Web Services Outpost. Before creating a local cluster on an Outpost, review Local clusters for Amazon EKS on Amazon Web Services Outposts in the Amazon EKS User Guide. This object isn't available for creating Amazon EKS clusters on the Amazon Web Services cloud.
        public let outpostConfig: OutpostConfigRequest?
        /// The VPC configuration that's used by the cluster control plane. Amazon EKS VPC resources have specific requirements to work properly with Kubernetes. For more information, see Cluster VPC Considerations and Cluster Security Group Considerations in the Amazon EKS User Guide. You must specify at least two subnets. You can specify up to five security groups. However, we recommend that you use a dedicated security group for your cluster control plane.
        public let resourcesVpcConfig: VpcConfigRequest
        /// The Amazon Resource Name (ARN) of the IAM role that provides permissions for the Kubernetes control plane to make calls to Amazon Web Services API operations on your behalf. For more information, see Amazon EKS Service IAM Role in the  Amazon EKS User Guide .
        public let roleArn: String
        /// Metadata that assists with categorization and organization. Each tag consists of a key and an optional value. You define both. Tags don't propagate to any other cluster or Amazon Web Services resources.
        public let tags: [String: String]?
        /// The desired Kubernetes version for your cluster. If you don't specify a value here, the default version available in Amazon EKS is used.  The default version might not be the latest version available.
        public let version: String?

        public init(accessConfig: CreateAccessConfigRequest? = nil, clientRequestToken: String? = CreateClusterRequest.idempotencyToken(), encryptionConfig: [EncryptionConfig]? = nil, kubernetesNetworkConfig: KubernetesNetworkConfigRequest? = nil, logging: Logging? = nil, name: String, outpostConfig: OutpostConfigRequest? = nil, resourcesVpcConfig: VpcConfigRequest, roleArn: String, tags: [String: String]? = nil, version: String? = nil) {
            self.accessConfig = accessConfig
            self.clientRequestToken = clientRequestToken
            self.encryptionConfig = encryptionConfig
            self.kubernetesNetworkConfig = kubernetesNetworkConfig
            self.logging = logging
            self.name = name
            self.outpostConfig = outpostConfig
            self.resourcesVpcConfig = resourcesVpcConfig
            self.roleArn = roleArn
            self.tags = tags
            self.version = version
        }

        public func validate(name: String) throws {
            try self.validate(self.encryptionConfig, name: "encryptionConfig", parent: name, max: 1)
            try self.validate(self.name, name: "name", parent: name, max: 100)
            try self.validate(self.name, name: "name", parent: name, min: 1)
            try self.validate(self.name, name: "name", parent: name, pattern: "^[0-9A-Za-z][A-Za-z0-9\\-_]*$")
            try self.tags?.forEach {
                try validate($0.key, name: "tags.key", parent: name, max: 128)
                try validate($0.key, name: "tags.key", parent: name, min: 1)
                try validate($0.value, name: "tags[\"\($0.key)\"]", parent: name, max: 256)
            }
            try self.validate(self.tags, name: "tags", parent: name, max: 50)
            try self.validate(self.tags, name: "tags", parent: name, min: 1)
        }

        private enum CodingKeys: String, CodingKey {
            case accessConfig = "accessConfig"
            case clientRequestToken = "clientRequestToken"
            case encryptionConfig = "encryptionConfig"
            case kubernetesNetworkConfig = "kubernetesNetworkConfig"
            case logging = "logging"
            case name = "name"
            case outpostConfig = "outpostConfig"
            case resourcesVpcConfig = "resourcesVpcConfig"
            case roleArn = "roleArn"
            case tags = "tags"
            case version = "version"
        }
    }

    public struct CreateClusterResponse: AWSDecodableShape {
        /// The full description of your new cluster.
        public let cluster: Cluster?

        public init(cluster: Cluster? = nil) {
            self.cluster = cluster
        }

        private enum CodingKeys: String, CodingKey {
            case cluster = "cluster"
        }
    }

    public struct CreateEksAnywhereSubscriptionRequest: AWSEncodableShape {
        /// A boolean indicating whether the subscription auto renews at the end of the term.
        public let autoRenew: Bool?
        /// A unique, case-sensitive identifier that you provide to ensure
        /// the idempotency of the request.
        public let clientRequestToken: String?
        /// The number of licenses to purchase with the subscription. Valid values are between 1 and 100. This value can't be changed after creating the subscription.
        public let licenseQuantity: Int?
        /// The license type for all licenses in the subscription. Valid value is CLUSTER. With the CLUSTER license type, each license covers support for a single EKS Anywhere cluster.
        public let licenseType: EksAnywhereSubscriptionLicenseType?
        /// The unique name for your subscription. It must be unique in your Amazon Web Services account in the Amazon Web Services Region you're creating the subscription in. The name can contain only alphanumeric characters (case-sensitive), hyphens, and underscores. It must start with an alphabetic character and can't be longer than 100 characters.
        public let name: String
        /// The metadata for a subscription to assist with categorization and organization. Each tag consists of a key and an optional value. Subscription tags don't propagate to any other resources associated with the subscription.
        public let tags: [String: String]?
        /// An object representing the term duration and term unit type of your subscription. This determines the term length of your subscription. Valid values are MONTHS for term unit and 12 or 36 for term duration, indicating a 12 month or 36 month subscription. This value cannot be changed after creating the subscription.
        public let term: EksAnywhereSubscriptionTerm

        public init(autoRenew: Bool? = nil, clientRequestToken: String? = CreateEksAnywhereSubscriptionRequest.idempotencyToken(), licenseQuantity: Int? = nil, licenseType: EksAnywhereSubscriptionLicenseType? = nil, name: String, tags: [String: String]? = nil, term: EksAnywhereSubscriptionTerm) {
            self.autoRenew = autoRenew
            self.clientRequestToken = clientRequestToken
            self.licenseQuantity = licenseQuantity
            self.licenseType = licenseType
            self.name = name
            self.tags = tags
            self.term = term
        }

        public func validate(name: String) throws {
            try self.validate(self.name, name: "name", parent: name, max: 100)
            try self.validate(self.name, name: "name", parent: name, min: 1)
            try self.validate(self.name, name: "name", parent: name, pattern: "^[0-9A-Za-z][A-Za-z0-9\\-_]*$")
            try self.tags?.forEach {
                try validate($0.key, name: "tags.key", parent: name, max: 128)
                try validate($0.key, name: "tags.key", parent: name, min: 1)
                try validate($0.value, name: "tags[\"\($0.key)\"]", parent: name, max: 256)
            }
            try self.validate(self.tags, name: "tags", parent: name, max: 50)
            try self.validate(self.tags, name: "tags", parent: name, min: 1)
        }

        private enum CodingKeys: String, CodingKey {
            case autoRenew = "autoRenew"
            case clientRequestToken = "clientRequestToken"
            case licenseQuantity = "licenseQuantity"
            case licenseType = "licenseType"
            case name = "name"
            case tags = "tags"
            case term = "term"
        }
    }

    public struct CreateEksAnywhereSubscriptionResponse: AWSDecodableShape {
        /// The full description of the subscription.
        public let subscription: EksAnywhereSubscription?

        public init(subscription: EksAnywhereSubscription? = nil) {
            self.subscription = subscription
        }

        private enum CodingKeys: String, CodingKey {
            case subscription = "subscription"
        }
    }

    public struct CreateFargateProfileRequest: AWSEncodableShape {
        /// A unique, case-sensitive identifier that you provide to ensure
        /// the idempotency of the request.
        public let clientRequestToken: String?
        /// The name of your cluster.
        public let clusterName: String
        /// The name of the Fargate profile.
        public let fargateProfileName: String
        /// The Amazon Resource Name (ARN) of the Pod execution role to use for a Pod that matches the selectors in the Fargate profile. The Pod execution role allows Fargate infrastructure to register with your cluster as a node, and it provides read access to Amazon ECR image repositories. For more information, see  Pod execution role in the Amazon EKS User Guide.
        public let podExecutionRoleArn: String
        /// The selectors to match for a Pod to use this Fargate profile. Each selector must have an associated Kubernetes namespace. Optionally, you can also specify labels for a namespace. You may specify up to five selectors in a Fargate profile.
        public let selectors: [FargateProfileSelector]?
        /// The IDs of subnets to launch a Pod into. A Pod running on Fargate isn't assigned a public IP address, so only private subnets (with no direct route to an Internet Gateway) are accepted for this parameter.
        public let subnets: [String]?
        /// Metadata that assists with categorization and organization. Each tag consists of a key and an optional value. You define both. Tags don't propagate to any other cluster or Amazon Web Services resources.
        public let tags: [String: String]?

        public init(clientRequestToken: String? = CreateFargateProfileRequest.idempotencyToken(), clusterName: String, fargateProfileName: String, podExecutionRoleArn: String, selectors: [FargateProfileSelector]? = nil, subnets: [String]? = nil, tags: [String: String]? = nil) {
            self.clientRequestToken = clientRequestToken
            self.clusterName = clusterName
            self.fargateProfileName = fargateProfileName
            self.podExecutionRoleArn = podExecutionRoleArn
            self.selectors = selectors
            self.subnets = subnets
            self.tags = tags
        }

        public func encode(to encoder: Encoder) throws {
            let request = encoder.userInfo[.awsRequest]! as! RequestEncodingContainer
            var container = encoder.container(keyedBy: CodingKeys.self)
            try container.encodeIfPresent(self.clientRequestToken, forKey: .clientRequestToken)
            request.encodePath(self.clusterName, key: "clusterName")
            try container.encode(self.fargateProfileName, forKey: .fargateProfileName)
            try container.encode(self.podExecutionRoleArn, forKey: .podExecutionRoleArn)
            try container.encodeIfPresent(self.selectors, forKey: .selectors)
            try container.encodeIfPresent(self.subnets, forKey: .subnets)
            try container.encodeIfPresent(self.tags, forKey: .tags)
        }

        public func validate(name: String) throws {
            try self.tags?.forEach {
                try validate($0.key, name: "tags.key", parent: name, max: 128)
                try validate($0.key, name: "tags.key", parent: name, min: 1)
                try validate($0.value, name: "tags[\"\($0.key)\"]", parent: name, max: 256)
            }
            try self.validate(self.tags, name: "tags", parent: name, max: 50)
            try self.validate(self.tags, name: "tags", parent: name, min: 1)
        }

        private enum CodingKeys: String, CodingKey {
            case clientRequestToken = "clientRequestToken"
            case fargateProfileName = "fargateProfileName"
            case podExecutionRoleArn = "podExecutionRoleArn"
            case selectors = "selectors"
            case subnets = "subnets"
            case tags = "tags"
        }
    }

    public struct CreateFargateProfileResponse: AWSDecodableShape {
        /// The full description of your new Fargate profile.
        public let fargateProfile: FargateProfile?

        public init(fargateProfile: FargateProfile? = nil) {
            self.fargateProfile = fargateProfile
        }

        private enum CodingKeys: String, CodingKey {
            case fargateProfile = "fargateProfile"
        }
    }

    public struct CreateNodegroupRequest: AWSEncodableShape {
        /// The AMI type for your node group. If you specify launchTemplate, and your launch template uses a custom AMI, then don't specify amiType, or the node group  deployment will fail. If your launch template uses a Windows custom AMI, then add eks:kube-proxy-windows to your Windows nodes rolearn in the aws-auth ConfigMap. For more information about using launch templates with Amazon EKS, see Launch template support in the Amazon EKS User Guide.
        public let amiType: AMITypes?
        /// The capacity type for your node group.
        public let capacityType: CapacityTypes?
        /// A unique, case-sensitive identifier that you provide to ensure
        /// the idempotency of the request.
        public let clientRequestToken: String?
        /// The name of your cluster.
        public let clusterName: String
        /// The root device disk size (in GiB) for your node group instances. The default disk size is 20 GiB for Linux and Bottlerocket. The default disk size is 50 GiB for Windows. If you specify launchTemplate, then don't specify  diskSize, or the node group  deployment will fail. For more information about using launch templates with Amazon EKS, see Launch template support in the Amazon EKS User Guide.
        public let diskSize: Int?
        /// Specify the instance types for a node group. If you specify a GPU instance type, make sure to also specify an applicable GPU AMI type with the amiType parameter. If you specify launchTemplate, then you can specify zero or one instance type in your launch template or you can specify 0-20 instance types for instanceTypes. If however, you specify an instance type in your launch template and specify any instanceTypes, the node group deployment will fail. If you don't specify an instance type in a launch template or for instanceTypes, then t3.medium is used, by default. If you specify Spot for capacityType, then we recommend specifying multiple values for instanceTypes. For more information, see Managed node group capacity types and Launch template support in the Amazon EKS User Guide.
        public let instanceTypes: [String]?
        /// The Kubernetes labels to apply to the nodes in the node group when they are created.
        public let labels: [String: String]?
        /// An object representing a node group's launch template specification. If specified, then do not specify instanceTypes, diskSize, or remoteAccess and make sure that the launch template meets the requirements in launchTemplateSpecification.
        public let launchTemplate: LaunchTemplateSpecification?
        /// The unique name to give your node group.
        public let nodegroupName: String
        /// The Amazon Resource Name (ARN) of the IAM role to associate with your node group. The Amazon EKS worker node kubelet daemon makes calls to Amazon Web Services APIs on your behalf. Nodes receive permissions for these API calls through an IAM instance profile and associated policies. Before you can launch nodes and register them into a cluster, you must create an IAM role for those nodes to use when they are launched. For more information, see Amazon EKS node IAM role in the  Amazon EKS User Guide . If you specify launchTemplate, then don't specify   IamInstanceProfile in your launch template, or the node group  deployment will fail. For more information about using launch templates with Amazon EKS, see Launch template support in the Amazon EKS User Guide.
        public let nodeRole: String
        /// The AMI version of the Amazon EKS optimized AMI to use with your node group. By default, the latest available AMI version for the node group's current Kubernetes version is used. For information about Linux versions, see Amazon EKS optimized Amazon Linux AMI versions in the Amazon EKS User Guide. Amazon EKS managed node groups support the November 2022 and later releases of the Windows AMIs. For information about Windows versions, see Amazon EKS optimized Windows AMI versions in the Amazon EKS User Guide. If you specify launchTemplate, and your launch template uses a custom AMI, then don't specify  releaseVersion, or the node group  deployment will fail. For more information about using launch templates with Amazon EKS, see Launch template support in the Amazon EKS User Guide.
        public let releaseVersion: String?
        /// The remote access configuration to use with your node group. For Linux, the protocol is SSH. For Windows, the protocol is RDP. If you specify launchTemplate, then don't specify  remoteAccess, or the node group  deployment will fail. For more information about using launch templates with Amazon EKS, see Launch template support in the Amazon EKS User Guide.
        public let remoteAccess: RemoteAccessConfig?
        /// The scaling configuration details for the Auto Scaling group that is created for your node group.
        public let scalingConfig: NodegroupScalingConfig?
        /// The subnets to use for the Auto Scaling group that is created for your node group. If you specify launchTemplate, then don't specify   SubnetId in your launch template, or the node group  deployment will fail. For more information about using launch templates with Amazon EKS, see Launch template support in the Amazon EKS User Guide.
        public let subnets: [String]
        /// Metadata that assists with categorization and organization. Each tag consists of a key and an optional value. You define both. Tags don't propagate to any other cluster or Amazon Web Services resources.
        public let tags: [String: String]?
        /// The Kubernetes taints to be applied to the nodes in the node group. For more information, see Node taints on managed node groups.
        public let taints: [Taint]?
        /// The node group update configuration.
        public let updateConfig: NodegroupUpdateConfig?
        /// The Kubernetes version to use for your managed nodes. By default, the Kubernetes version of the cluster is used, and this is the only accepted specified value. If you specify launchTemplate, and your launch template uses a custom AMI, then don't specify  version, or the node group  deployment will fail. For more information about using launch templates with Amazon EKS, see Launch template support in the Amazon EKS User Guide.
        public let version: String?

        public init(amiType: AMITypes? = nil, capacityType: CapacityTypes? = nil, clientRequestToken: String? = CreateNodegroupRequest.idempotencyToken(), clusterName: String, diskSize: Int? = nil, instanceTypes: [String]? = nil, labels: [String: String]? = nil, launchTemplate: LaunchTemplateSpecification? = nil, nodegroupName: String, nodeRole: String, releaseVersion: String? = nil, remoteAccess: RemoteAccessConfig? = nil, scalingConfig: NodegroupScalingConfig? = nil, subnets: [String], tags: [String: String]? = nil, taints: [Taint]? = nil, updateConfig: NodegroupUpdateConfig? = nil, version: String? = nil) {
            self.amiType = amiType
            self.capacityType = capacityType
            self.clientRequestToken = clientRequestToken
            self.clusterName = clusterName
            self.diskSize = diskSize
            self.instanceTypes = instanceTypes
            self.labels = labels
            self.launchTemplate = launchTemplate
            self.nodegroupName = nodegroupName
            self.nodeRole = nodeRole
            self.releaseVersion = releaseVersion
            self.remoteAccess = remoteAccess
            self.scalingConfig = scalingConfig
            self.subnets = subnets
            self.tags = tags
            self.taints = taints
            self.updateConfig = updateConfig
            self.version = version
        }

        public func encode(to encoder: Encoder) throws {
            let request = encoder.userInfo[.awsRequest]! as! RequestEncodingContainer
            var container = encoder.container(keyedBy: CodingKeys.self)
            try container.encodeIfPresent(self.amiType, forKey: .amiType)
            try container.encodeIfPresent(self.capacityType, forKey: .capacityType)
            try container.encodeIfPresent(self.clientRequestToken, forKey: .clientRequestToken)
            request.encodePath(self.clusterName, key: "clusterName")
            try container.encodeIfPresent(self.diskSize, forKey: .diskSize)
            try container.encodeIfPresent(self.instanceTypes, forKey: .instanceTypes)
            try container.encodeIfPresent(self.labels, forKey: .labels)
            try container.encodeIfPresent(self.launchTemplate, forKey: .launchTemplate)
            try container.encode(self.nodegroupName, forKey: .nodegroupName)
            try container.encode(self.nodeRole, forKey: .nodeRole)
            try container.encodeIfPresent(self.releaseVersion, forKey: .releaseVersion)
            try container.encodeIfPresent(self.remoteAccess, forKey: .remoteAccess)
            try container.encodeIfPresent(self.scalingConfig, forKey: .scalingConfig)
            try container.encode(self.subnets, forKey: .subnets)
            try container.encodeIfPresent(self.tags, forKey: .tags)
            try container.encodeIfPresent(self.taints, forKey: .taints)
            try container.encodeIfPresent(self.updateConfig, forKey: .updateConfig)
            try container.encodeIfPresent(self.version, forKey: .version)
        }

        public func validate(name: String) throws {
            try self.labels?.forEach {
                try validate($0.key, name: "labels.key", parent: name, max: 63)
                try validate($0.key, name: "labels.key", parent: name, min: 1)
                try validate($0.value, name: "labels[\"\($0.key)\"]", parent: name, max: 63)
                try validate($0.value, name: "labels[\"\($0.key)\"]", parent: name, min: 1)
            }
            try self.scalingConfig?.validate(name: "\(name).scalingConfig")
            try self.tags?.forEach {
                try validate($0.key, name: "tags.key", parent: name, max: 128)
                try validate($0.key, name: "tags.key", parent: name, min: 1)
                try validate($0.value, name: "tags[\"\($0.key)\"]", parent: name, max: 256)
            }
            try self.validate(self.tags, name: "tags", parent: name, max: 50)
            try self.validate(self.tags, name: "tags", parent: name, min: 1)
            try self.taints?.forEach {
                try $0.validate(name: "\(name).taints[]")
            }
            try self.updateConfig?.validate(name: "\(name).updateConfig")
        }

        private enum CodingKeys: String, CodingKey {
            case amiType = "amiType"
            case capacityType = "capacityType"
            case clientRequestToken = "clientRequestToken"
            case diskSize = "diskSize"
            case instanceTypes = "instanceTypes"
            case labels = "labels"
            case launchTemplate = "launchTemplate"
            case nodegroupName = "nodegroupName"
            case nodeRole = "nodeRole"
            case releaseVersion = "releaseVersion"
            case remoteAccess = "remoteAccess"
            case scalingConfig = "scalingConfig"
            case subnets = "subnets"
            case tags = "tags"
            case taints = "taints"
            case updateConfig = "updateConfig"
            case version = "version"
        }
    }

    public struct CreateNodegroupResponse: AWSDecodableShape {
        /// The full description of your new node group.
        public let nodegroup: Nodegroup?

        public init(nodegroup: Nodegroup? = nil) {
            self.nodegroup = nodegroup
        }

        private enum CodingKeys: String, CodingKey {
            case nodegroup = "nodegroup"
        }
    }

    public struct CreatePodIdentityAssociationRequest: AWSEncodableShape {
        /// A unique, case-sensitive identifier that you provide to ensure
        /// the idempotency of the request.
        public let clientRequestToken: String?
        /// The name of the cluster to create the association in.
        public let clusterName: String
        /// The name of the Kubernetes namespace inside the cluster to create the association in. The service account and the pods that use the service account must be in this namespace.
        public let namespace: String
        /// The Amazon Resource Name (ARN) of the IAM role to associate with the service account. The EKS Pod Identity agent manages credentials to assume this role for applications in the containers in the pods that use this service account.
        public let roleArn: String
        /// The name of the Kubernetes service account inside the cluster to associate the IAM credentials with.
        public let serviceAccount: String
        /// Metadata that assists with categorization and organization. Each tag consists of a key and an optional value. You define both. Tags don't propagate to any other cluster or Amazon Web Services resources. The following basic restrictions apply to tags:   Maximum number of tags per resource – 50   For each resource, each tag key must be unique, and each tag key can have only one value.   Maximum key length – 128 Unicode characters in UTF-8   Maximum value length – 256 Unicode characters in UTF-8   If your tagging schema is used across multiple services and resources, remember that other services may have restrictions on allowed characters. Generally allowed characters are: letters, numbers, and spaces representable in UTF-8, and the following characters: + - = . _ : / @.   Tag keys and values are case-sensitive.   Do not use aws:, AWS:, or any upper or lowercase combination of such as a prefix for either keys or values as it is reserved for Amazon Web Services use. You cannot edit or delete tag keys or values with this prefix. Tags with this prefix do not count against your tags per resource limit.
        public let tags: [String: String]?

        public init(clientRequestToken: String? = CreatePodIdentityAssociationRequest.idempotencyToken(), clusterName: String, namespace: String, roleArn: String, serviceAccount: String, tags: [String: String]? = nil) {
            self.clientRequestToken = clientRequestToken
            self.clusterName = clusterName
            self.namespace = namespace
            self.roleArn = roleArn
            self.serviceAccount = serviceAccount
            self.tags = tags
        }

        public func encode(to encoder: Encoder) throws {
            let request = encoder.userInfo[.awsRequest]! as! RequestEncodingContainer
            var container = encoder.container(keyedBy: CodingKeys.self)
            try container.encodeIfPresent(self.clientRequestToken, forKey: .clientRequestToken)
            request.encodePath(self.clusterName, key: "clusterName")
            try container.encode(self.namespace, forKey: .namespace)
            try container.encode(self.roleArn, forKey: .roleArn)
            try container.encode(self.serviceAccount, forKey: .serviceAccount)
            try container.encodeIfPresent(self.tags, forKey: .tags)
        }

        public func validate(name: String) throws {
            try self.tags?.forEach {
                try validate($0.key, name: "tags.key", parent: name, max: 128)
                try validate($0.key, name: "tags.key", parent: name, min: 1)
                try validate($0.value, name: "tags[\"\($0.key)\"]", parent: name, max: 256)
            }
            try self.validate(self.tags, name: "tags", parent: name, max: 50)
            try self.validate(self.tags, name: "tags", parent: name, min: 1)
        }

        private enum CodingKeys: String, CodingKey {
            case clientRequestToken = "clientRequestToken"
            case namespace = "namespace"
            case roleArn = "roleArn"
            case serviceAccount = "serviceAccount"
            case tags = "tags"
        }
    }

    public struct CreatePodIdentityAssociationResponse: AWSDecodableShape {
        /// The full description of your new association. The description includes an ID for the association. Use the ID of the association in further actions to manage the association.
        public let association: PodIdentityAssociation?

        public init(association: PodIdentityAssociation? = nil) {
            self.association = association
        }

        private enum CodingKeys: String, CodingKey {
            case association = "association"
        }
    }

    public struct DeleteAccessEntryRequest: AWSEncodableShape {
        /// The name of your cluster.
        public let clusterName: String
        /// The ARN of the IAM principal for the AccessEntry.
        public let principalArn: String

        public init(clusterName: String, principalArn: String) {
            self.clusterName = clusterName
            self.principalArn = principalArn
        }

        public func encode(to encoder: Encoder) throws {
            let request = encoder.userInfo[.awsRequest]! as! RequestEncodingContainer
            _ = encoder.container(keyedBy: CodingKeys.self)
            request.encodePath(self.clusterName, key: "clusterName")
            request.encodePath(self.principalArn, key: "principalArn")
        }

        private enum CodingKeys: CodingKey {}
    }

    public struct DeleteAccessEntryResponse: AWSDecodableShape {
        public init() {}
    }

    public struct DeleteAddonRequest: AWSEncodableShape {
        /// The name of the add-on. The name must match one of the names returned by  ListAddons .
        public let addonName: String
        /// The name of your cluster.
        public let clusterName: String
        /// Specifying this option preserves the add-on software on your cluster but Amazon EKS stops managing any settings for the add-on. If an IAM account is associated with the add-on, it isn't removed.
        public let preserve: Bool?

        public init(addonName: String, clusterName: String, preserve: Bool? = nil) {
            self.addonName = addonName
            self.clusterName = clusterName
            self.preserve = preserve
        }

        public func encode(to encoder: Encoder) throws {
            let request = encoder.userInfo[.awsRequest]! as! RequestEncodingContainer
            _ = encoder.container(keyedBy: CodingKeys.self)
            request.encodePath(self.addonName, key: "addonName")
            request.encodePath(self.clusterName, key: "clusterName")
            request.encodeQuery(self.preserve, key: "preserve")
        }

        public func validate(name: String) throws {
            try self.validate(self.clusterName, name: "clusterName", parent: name, max: 100)
            try self.validate(self.clusterName, name: "clusterName", parent: name, min: 1)
            try self.validate(self.clusterName, name: "clusterName", parent: name, pattern: "^[0-9A-Za-z][A-Za-z0-9\\-_]*$")
        }

        private enum CodingKeys: CodingKey {}
    }

    public struct DeleteAddonResponse: AWSDecodableShape {
        public let addon: Addon?

        public init(addon: Addon? = nil) {
            self.addon = addon
        }

        private enum CodingKeys: String, CodingKey {
            case addon = "addon"
        }
    }

    public struct DeleteClusterRequest: AWSEncodableShape {
        /// The name of the cluster to delete.
        public let name: String

        public init(name: String) {
            self.name = name
        }

        public func encode(to encoder: Encoder) throws {
            let request = encoder.userInfo[.awsRequest]! as! RequestEncodingContainer
            _ = encoder.container(keyedBy: CodingKeys.self)
            request.encodePath(self.name, key: "name")
        }

        private enum CodingKeys: CodingKey {}
    }

    public struct DeleteClusterResponse: AWSDecodableShape {
        /// The full description of the cluster to delete.
        public let cluster: Cluster?

        public init(cluster: Cluster? = nil) {
            self.cluster = cluster
        }

        private enum CodingKeys: String, CodingKey {
            case cluster = "cluster"
        }
    }

    public struct DeleteEksAnywhereSubscriptionRequest: AWSEncodableShape {
        /// The ID of the subscription.
        public let id: String

        public init(id: String) {
            self.id = id
        }

        public func encode(to encoder: Encoder) throws {
            let request = encoder.userInfo[.awsRequest]! as! RequestEncodingContainer
            _ = encoder.container(keyedBy: CodingKeys.self)
            request.encodePath(self.id, key: "id")
        }

        private enum CodingKeys: CodingKey {}
    }

    public struct DeleteEksAnywhereSubscriptionResponse: AWSDecodableShape {
        /// The full description of the subscription to be deleted.
        public let subscription: EksAnywhereSubscription?

        public init(subscription: EksAnywhereSubscription? = nil) {
            self.subscription = subscription
        }

        private enum CodingKeys: String, CodingKey {
            case subscription = "subscription"
        }
    }

    public struct DeleteFargateProfileRequest: AWSEncodableShape {
        /// The name of your cluster.
        public let clusterName: String
        /// The name of the Fargate profile to delete.
        public let fargateProfileName: String

        public init(clusterName: String, fargateProfileName: String) {
            self.clusterName = clusterName
            self.fargateProfileName = fargateProfileName
        }

        public func encode(to encoder: Encoder) throws {
            let request = encoder.userInfo[.awsRequest]! as! RequestEncodingContainer
            _ = encoder.container(keyedBy: CodingKeys.self)
            request.encodePath(self.clusterName, key: "clusterName")
            request.encodePath(self.fargateProfileName, key: "fargateProfileName")
        }

        private enum CodingKeys: CodingKey {}
    }

    public struct DeleteFargateProfileResponse: AWSDecodableShape {
        /// The deleted Fargate profile.
        public let fargateProfile: FargateProfile?

        public init(fargateProfile: FargateProfile? = nil) {
            self.fargateProfile = fargateProfile
        }

        private enum CodingKeys: String, CodingKey {
            case fargateProfile = "fargateProfile"
        }
    }

    public struct DeleteNodegroupRequest: AWSEncodableShape {
        /// The name of your cluster.
        public let clusterName: String
        /// The name of the node group to delete.
        public let nodegroupName: String

        public init(clusterName: String, nodegroupName: String) {
            self.clusterName = clusterName
            self.nodegroupName = nodegroupName
        }

        public func encode(to encoder: Encoder) throws {
            let request = encoder.userInfo[.awsRequest]! as! RequestEncodingContainer
            _ = encoder.container(keyedBy: CodingKeys.self)
            request.encodePath(self.clusterName, key: "clusterName")
            request.encodePath(self.nodegroupName, key: "nodegroupName")
        }

        private enum CodingKeys: CodingKey {}
    }

    public struct DeleteNodegroupResponse: AWSDecodableShape {
        /// The full description of your deleted node group.
        public let nodegroup: Nodegroup?

        public init(nodegroup: Nodegroup? = nil) {
            self.nodegroup = nodegroup
        }

        private enum CodingKeys: String, CodingKey {
            case nodegroup = "nodegroup"
        }
    }

    public struct DeletePodIdentityAssociationRequest: AWSEncodableShape {
        /// The ID of the association to be deleted.
        public let associationId: String
        /// The cluster name that
        public let clusterName: String

        public init(associationId: String, clusterName: String) {
            self.associationId = associationId
            self.clusterName = clusterName
        }

        public func encode(to encoder: Encoder) throws {
            let request = encoder.userInfo[.awsRequest]! as! RequestEncodingContainer
            _ = encoder.container(keyedBy: CodingKeys.self)
            request.encodePath(self.associationId, key: "associationId")
            request.encodePath(self.clusterName, key: "clusterName")
        }

        private enum CodingKeys: CodingKey {}
    }

    public struct DeletePodIdentityAssociationResponse: AWSDecodableShape {
        /// The full description of the EKS Pod Identity association that was deleted.
        public let association: PodIdentityAssociation?

        public init(association: PodIdentityAssociation? = nil) {
            self.association = association
        }

        private enum CodingKeys: String, CodingKey {
            case association = "association"
        }
    }

    public struct DeprecationDetail: AWSDecodableShape {
        /// Details about Kubernetes clients using the deprecated resources.
        public let clientStats: [ClientStat]?
        /// The newer version of the resource to migrate to if applicable.
        public let replacedWith: String?
        /// The version of the software where the newer resource version became available to migrate to if applicable.
        public let startServingReplacementVersion: String?
        /// The version of the software where the deprecated resource version will stop being served.
        public let stopServingVersion: String?
        /// The deprecated version of the resource.
        public let usage: String?

        public init(clientStats: [ClientStat]? = nil, replacedWith: String? = nil, startServingReplacementVersion: String? = nil, stopServingVersion: String? = nil, usage: String? = nil) {
            self.clientStats = clientStats
            self.replacedWith = replacedWith
            self.startServingReplacementVersion = startServingReplacementVersion
            self.stopServingVersion = stopServingVersion
            self.usage = usage
        }

        private enum CodingKeys: String, CodingKey {
            case clientStats = "clientStats"
            case replacedWith = "replacedWith"
            case startServingReplacementVersion = "startServingReplacementVersion"
            case stopServingVersion = "stopServingVersion"
            case usage = "usage"
        }
    }

    public struct DeregisterClusterRequest: AWSEncodableShape {
        /// The name of the connected cluster to deregister.
        public let name: String

        public init(name: String) {
            self.name = name
        }

        public func encode(to encoder: Encoder) throws {
            let request = encoder.userInfo[.awsRequest]! as! RequestEncodingContainer
            _ = encoder.container(keyedBy: CodingKeys.self)
            request.encodePath(self.name, key: "name")
        }

        private enum CodingKeys: CodingKey {}
    }

    public struct DeregisterClusterResponse: AWSDecodableShape {
        public let cluster: Cluster?

        public init(cluster: Cluster? = nil) {
            self.cluster = cluster
        }

        private enum CodingKeys: String, CodingKey {
            case cluster = "cluster"
        }
    }

    public struct DescribeAccessEntryRequest: AWSEncodableShape {
        /// The name of your cluster.
        public let clusterName: String
        /// The ARN of the IAM principal for the AccessEntry.
        public let principalArn: String

        public init(clusterName: String, principalArn: String) {
            self.clusterName = clusterName
            self.principalArn = principalArn
        }

        public func encode(to encoder: Encoder) throws {
            let request = encoder.userInfo[.awsRequest]! as! RequestEncodingContainer
            _ = encoder.container(keyedBy: CodingKeys.self)
            request.encodePath(self.clusterName, key: "clusterName")
            request.encodePath(self.principalArn, key: "principalArn")
        }

        private enum CodingKeys: CodingKey {}
    }

    public struct DescribeAccessEntryResponse: AWSDecodableShape {
        /// Information about the access entry.
        public let accessEntry: AccessEntry?

        public init(accessEntry: AccessEntry? = nil) {
            self.accessEntry = accessEntry
        }

        private enum CodingKeys: String, CodingKey {
            case accessEntry = "accessEntry"
        }
    }

    public struct DescribeAddonConfigurationRequest: AWSEncodableShape {
        /// The name of the add-on. The name must match one of the names returned by DescribeAddonVersions.
        public let addonName: String
        /// The version of the add-on. The version must match one of the versions returned by  DescribeAddonVersions .
        public let addonVersion: String

        public init(addonName: String, addonVersion: String) {
            self.addonName = addonName
            self.addonVersion = addonVersion
        }

        public func encode(to encoder: Encoder) throws {
            let request = encoder.userInfo[.awsRequest]! as! RequestEncodingContainer
            _ = encoder.container(keyedBy: CodingKeys.self)
            request.encodeQuery(self.addonName, key: "addonName")
            request.encodeQuery(self.addonVersion, key: "addonVersion")
        }

        private enum CodingKeys: CodingKey {}
    }

    public struct DescribeAddonConfigurationResponse: AWSDecodableShape {
        /// The name of the add-on.
        public let addonName: String?
        /// The version of the add-on. The version must match one of the versions returned by  DescribeAddonVersions .
        public let addonVersion: String?
        /// A JSON schema that's used to validate the configuration values you provide when an add-on is created or updated.
        public let configurationSchema: String?

        public init(addonName: String? = nil, addonVersion: String? = nil, configurationSchema: String? = nil) {
            self.addonName = addonName
            self.addonVersion = addonVersion
            self.configurationSchema = configurationSchema
        }

        private enum CodingKeys: String, CodingKey {
            case addonName = "addonName"
            case addonVersion = "addonVersion"
            case configurationSchema = "configurationSchema"
        }
    }

    public struct DescribeAddonRequest: AWSEncodableShape {
        /// The name of the add-on. The name must match one of the names returned by  ListAddons .
        public let addonName: String
        /// The name of your cluster.
        public let clusterName: String

        public init(addonName: String, clusterName: String) {
            self.addonName = addonName
            self.clusterName = clusterName
        }

        public func encode(to encoder: Encoder) throws {
            let request = encoder.userInfo[.awsRequest]! as! RequestEncodingContainer
            _ = encoder.container(keyedBy: CodingKeys.self)
            request.encodePath(self.addonName, key: "addonName")
            request.encodePath(self.clusterName, key: "clusterName")
        }

        public func validate(name: String) throws {
            try self.validate(self.clusterName, name: "clusterName", parent: name, max: 100)
            try self.validate(self.clusterName, name: "clusterName", parent: name, min: 1)
            try self.validate(self.clusterName, name: "clusterName", parent: name, pattern: "^[0-9A-Za-z][A-Za-z0-9\\-_]*$")
        }

        private enum CodingKeys: CodingKey {}
    }

    public struct DescribeAddonResponse: AWSDecodableShape {
        public let addon: Addon?

        public init(addon: Addon? = nil) {
            self.addon = addon
        }

        private enum CodingKeys: String, CodingKey {
            case addon = "addon"
        }
    }

    public struct DescribeAddonVersionsRequest: AWSEncodableShape {
        /// The name of the add-on. The name must match one of the names returned by  ListAddons .
        public let addonName: String?
        /// The Kubernetes versions that you can use the add-on with.
        public let kubernetesVersion: String?
        /// The maximum number of results, returned in paginated output. You receive maxResults in a single page, along with a nextToken response element. You can see the remaining results of the initial request by sending another request with the returned nextToken value. This value can be between 1 and 100. If you don't use this parameter, 100 results and a nextToken value, if applicable, are returned.
        public let maxResults: Int?
        /// The nextToken value returned from a previous paginated request, where maxResults was used and the results exceeded the value of that parameter. Pagination continues from the end of the previous results that returned the nextToken value. This value is null when there are no more results to return.  This token should be treated as an opaque identifier that is used only to retrieve the next items in a list and not for other programmatic purposes.
        public let nextToken: String?
        /// The owner of the add-on. For valid owners, don't specify a value for this property.
        public let owners: [String]?
        /// The publisher of the add-on. For valid publishers, don't specify a value for this property.
        public let publishers: [String]?
        /// The type of the add-on. For valid types, don't specify a value for this property.
        public let types: [String]?

        public init(addonName: String? = nil, kubernetesVersion: String? = nil, maxResults: Int? = nil, nextToken: String? = nil, owners: [String]? = nil, publishers: [String]? = nil, types: [String]? = nil) {
            self.addonName = addonName
            self.kubernetesVersion = kubernetesVersion
            self.maxResults = maxResults
            self.nextToken = nextToken
            self.owners = owners
            self.publishers = publishers
            self.types = types
        }

        public func encode(to encoder: Encoder) throws {
            let request = encoder.userInfo[.awsRequest]! as! RequestEncodingContainer
            _ = encoder.container(keyedBy: CodingKeys.self)
            request.encodeQuery(self.addonName, key: "addonName")
            request.encodeQuery(self.kubernetesVersion, key: "kubernetesVersion")
            request.encodeQuery(self.maxResults, key: "maxResults")
            request.encodeQuery(self.nextToken, key: "nextToken")
            request.encodeQuery(self.owners, key: "owners")
            request.encodeQuery(self.publishers, key: "publishers")
            request.encodeQuery(self.types, key: "types")
        }

        public func validate(name: String) throws {
            try self.validate(self.maxResults, name: "maxResults", parent: name, max: 100)
            try self.validate(self.maxResults, name: "maxResults", parent: name, min: 1)
        }

        private enum CodingKeys: CodingKey {}
    }

    public struct DescribeAddonVersionsResponse: AWSDecodableShape {
        /// The list of available versions with Kubernetes version compatibility and other properties.
        public let addons: [AddonInfo]?
        /// The nextToken value to include in a future DescribeAddonVersions request. When the results of a DescribeAddonVersions request exceed maxResults, you can use this value to retrieve the next page of results. This value is null when there are no more results to return.  This token should be treated as an opaque identifier that is used only to retrieve the next items in a list and not for other programmatic purposes.
        public let nextToken: String?

        public init(addons: [AddonInfo]? = nil, nextToken: String? = nil) {
            self.addons = addons
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case addons = "addons"
            case nextToken = "nextToken"
        }
    }

    public struct DescribeClusterRequest: AWSEncodableShape {
        /// The name of your cluster.
        public let name: String

        public init(name: String) {
            self.name = name
        }

        public func encode(to encoder: Encoder) throws {
            let request = encoder.userInfo[.awsRequest]! as! RequestEncodingContainer
            _ = encoder.container(keyedBy: CodingKeys.self)
            request.encodePath(self.name, key: "name")
        }

        private enum CodingKeys: CodingKey {}
    }

    public struct DescribeClusterResponse: AWSDecodableShape {
        /// The full description of your specified cluster.
        public let cluster: Cluster?

        public init(cluster: Cluster? = nil) {
            self.cluster = cluster
        }

        private enum CodingKeys: String, CodingKey {
            case cluster = "cluster"
        }
    }

    public struct DescribeEksAnywhereSubscriptionRequest: AWSEncodableShape {
        /// The ID of the subscription.
        public let id: String

        public init(id: String) {
            self.id = id
        }

        public func encode(to encoder: Encoder) throws {
            let request = encoder.userInfo[.awsRequest]! as! RequestEncodingContainer
            _ = encoder.container(keyedBy: CodingKeys.self)
            request.encodePath(self.id, key: "id")
        }

        private enum CodingKeys: CodingKey {}
    }

    public struct DescribeEksAnywhereSubscriptionResponse: AWSDecodableShape {
        /// The full description of the subscription.
        public let subscription: EksAnywhereSubscription?

        public init(subscription: EksAnywhereSubscription? = nil) {
            self.subscription = subscription
        }

        private enum CodingKeys: String, CodingKey {
            case subscription = "subscription"
        }
    }

    public struct DescribeFargateProfileRequest: AWSEncodableShape {
        /// The name of your cluster.
        public let clusterName: String
        /// The name of the Fargate profile to describe.
        public let fargateProfileName: String

        public init(clusterName: String, fargateProfileName: String) {
            self.clusterName = clusterName
            self.fargateProfileName = fargateProfileName
        }

        public func encode(to encoder: Encoder) throws {
            let request = encoder.userInfo[.awsRequest]! as! RequestEncodingContainer
            _ = encoder.container(keyedBy: CodingKeys.self)
            request.encodePath(self.clusterName, key: "clusterName")
            request.encodePath(self.fargateProfileName, key: "fargateProfileName")
        }

        private enum CodingKeys: CodingKey {}
    }

    public struct DescribeFargateProfileResponse: AWSDecodableShape {
        /// The full description of your Fargate profile.
        public let fargateProfile: FargateProfile?

        public init(fargateProfile: FargateProfile? = nil) {
            self.fargateProfile = fargateProfile
        }

        private enum CodingKeys: String, CodingKey {
            case fargateProfile = "fargateProfile"
        }
    }

    public struct DescribeIdentityProviderConfigRequest: AWSEncodableShape {
        /// The name of your cluster.
        public let clusterName: String
        /// An object representing an identity provider configuration.
        public let identityProviderConfig: IdentityProviderConfig

        public init(clusterName: String, identityProviderConfig: IdentityProviderConfig) {
            self.clusterName = clusterName
            self.identityProviderConfig = identityProviderConfig
        }

        public func encode(to encoder: Encoder) throws {
            let request = encoder.userInfo[.awsRequest]! as! RequestEncodingContainer
            var container = encoder.container(keyedBy: CodingKeys.self)
            request.encodePath(self.clusterName, key: "clusterName")
            try container.encode(self.identityProviderConfig, forKey: .identityProviderConfig)
        }

        private enum CodingKeys: String, CodingKey {
            case identityProviderConfig = "identityProviderConfig"
        }
    }

    public struct DescribeIdentityProviderConfigResponse: AWSDecodableShape {
        /// The object that represents an OpenID Connect (OIDC) identity provider configuration.
        public let identityProviderConfig: IdentityProviderConfigResponse?

        public init(identityProviderConfig: IdentityProviderConfigResponse? = nil) {
            self.identityProviderConfig = identityProviderConfig
        }

        private enum CodingKeys: String, CodingKey {
            case identityProviderConfig = "identityProviderConfig"
        }
    }

    public struct DescribeInsightRequest: AWSEncodableShape {
        /// The name of the cluster to describe the insight for.
        public let clusterName: String
        /// The identity of the insight to describe.
        public let id: String

        public init(clusterName: String, id: String) {
            self.clusterName = clusterName
            self.id = id
        }

        public func encode(to encoder: Encoder) throws {
            let request = encoder.userInfo[.awsRequest]! as! RequestEncodingContainer
            _ = encoder.container(keyedBy: CodingKeys.self)
            request.encodePath(self.clusterName, key: "clusterName")
            request.encodePath(self.id, key: "id")
        }

        private enum CodingKeys: CodingKey {}
    }

    public struct DescribeInsightResponse: AWSDecodableShape {
        /// The full description of the insight.
        public let insight: Insight?

        public init(insight: Insight? = nil) {
            self.insight = insight
        }

        private enum CodingKeys: String, CodingKey {
            case insight = "insight"
        }
    }

    public struct DescribeNodegroupRequest: AWSEncodableShape {
        /// The name of your cluster.
        public let clusterName: String
        /// The name of the node group to describe.
        public let nodegroupName: String

        public init(clusterName: String, nodegroupName: String) {
            self.clusterName = clusterName
            self.nodegroupName = nodegroupName
        }

        public func encode(to encoder: Encoder) throws {
            let request = encoder.userInfo[.awsRequest]! as! RequestEncodingContainer
            _ = encoder.container(keyedBy: CodingKeys.self)
            request.encodePath(self.clusterName, key: "clusterName")
            request.encodePath(self.nodegroupName, key: "nodegroupName")
        }

        private enum CodingKeys: CodingKey {}
    }

    public struct DescribeNodegroupResponse: AWSDecodableShape {
        /// The full description of your node group.
        public let nodegroup: Nodegroup?

        public init(nodegroup: Nodegroup? = nil) {
            self.nodegroup = nodegroup
        }

        private enum CodingKeys: String, CodingKey {
            case nodegroup = "nodegroup"
        }
    }

    public struct DescribePodIdentityAssociationRequest: AWSEncodableShape {
        /// The ID of the association that you want the description of.
        public let associationId: String
        /// The name of the cluster that the association is in.
        public let clusterName: String

        public init(associationId: String, clusterName: String) {
            self.associationId = associationId
            self.clusterName = clusterName
        }

        public func encode(to encoder: Encoder) throws {
            let request = encoder.userInfo[.awsRequest]! as! RequestEncodingContainer
            _ = encoder.container(keyedBy: CodingKeys.self)
            request.encodePath(self.associationId, key: "associationId")
            request.encodePath(self.clusterName, key: "clusterName")
        }

        private enum CodingKeys: CodingKey {}
    }

    public struct DescribePodIdentityAssociationResponse: AWSDecodableShape {
        /// The full description of the EKS Pod Identity association.
        public let association: PodIdentityAssociation?

        public init(association: PodIdentityAssociation? = nil) {
            self.association = association
        }

        private enum CodingKeys: String, CodingKey {
            case association = "association"
        }
    }

    public struct DescribeUpdateRequest: AWSEncodableShape {
        /// The name of the add-on. The name must match one of the names returned by  ListAddons . This parameter is required if the update is an add-on update.
        public let addonName: String?
        /// The name of the Amazon EKS cluster associated with the update.
        public let name: String
        /// The name of the Amazon EKS node group associated with the update. This parameter is required if the update is a node group update.
        public let nodegroupName: String?
        /// The ID of the update to describe.
        public let updateId: String

        public init(addonName: String? = nil, name: String, nodegroupName: String? = nil, updateId: String) {
            self.addonName = addonName
            self.name = name
            self.nodegroupName = nodegroupName
            self.updateId = updateId
        }

        public func encode(to encoder: Encoder) throws {
            let request = encoder.userInfo[.awsRequest]! as! RequestEncodingContainer
            _ = encoder.container(keyedBy: CodingKeys.self)
            request.encodeQuery(self.addonName, key: "addonName")
            request.encodePath(self.name, key: "name")
            request.encodeQuery(self.nodegroupName, key: "nodegroupName")
            request.encodePath(self.updateId, key: "updateId")
        }

        private enum CodingKeys: CodingKey {}
    }

    public struct DescribeUpdateResponse: AWSDecodableShape {
        /// The full description of the specified update.
        public let update: Update?

        public init(update: Update? = nil) {
            self.update = update
        }

        private enum CodingKeys: String, CodingKey {
            case update = "update"
        }
    }

    public struct DisassociateAccessPolicyRequest: AWSEncodableShape {
        /// The name of your cluster.
        public let clusterName: String
        /// The ARN of the policy to disassociate from the access entry. For a list of associated policies ARNs, use ListAssociatedAccessPolicies.
        public let policyArn: String
        /// The ARN of the IAM principal for the AccessEntry.
        public let principalArn: String

        public init(clusterName: String, policyArn: String, principalArn: String) {
            self.clusterName = clusterName
            self.policyArn = policyArn
            self.principalArn = principalArn
        }

        public func encode(to encoder: Encoder) throws {
            let request = encoder.userInfo[.awsRequest]! as! RequestEncodingContainer
            _ = encoder.container(keyedBy: CodingKeys.self)
            request.encodePath(self.clusterName, key: "clusterName")
            request.encodePath(self.policyArn, key: "policyArn")
            request.encodePath(self.principalArn, key: "principalArn")
        }

        private enum CodingKeys: CodingKey {}
    }

    public struct DisassociateAccessPolicyResponse: AWSDecodableShape {
        public init() {}
    }

    public struct DisassociateIdentityProviderConfigRequest: AWSEncodableShape {
        /// A unique, case-sensitive identifier that you provide to ensure
        /// the idempotency of the request.
        public let clientRequestToken: String?
        /// The name of your cluster.
        public let clusterName: String
        /// An object representing an identity provider configuration.
        public let identityProviderConfig: IdentityProviderConfig

        public init(clientRequestToken: String? = DisassociateIdentityProviderConfigRequest.idempotencyToken(), clusterName: String, identityProviderConfig: IdentityProviderConfig) {
            self.clientRequestToken = clientRequestToken
            self.clusterName = clusterName
            self.identityProviderConfig = identityProviderConfig
        }

        public func encode(to encoder: Encoder) throws {
            let request = encoder.userInfo[.awsRequest]! as! RequestEncodingContainer
            var container = encoder.container(keyedBy: CodingKeys.self)
            try container.encodeIfPresent(self.clientRequestToken, forKey: .clientRequestToken)
            request.encodePath(self.clusterName, key: "clusterName")
            try container.encode(self.identityProviderConfig, forKey: .identityProviderConfig)
        }

        private enum CodingKeys: String, CodingKey {
            case clientRequestToken = "clientRequestToken"
            case identityProviderConfig = "identityProviderConfig"
        }
    }

    public struct DisassociateIdentityProviderConfigResponse: AWSDecodableShape {
        public let update: Update?

        public init(update: Update? = nil) {
            self.update = update
        }

        private enum CodingKeys: String, CodingKey {
            case update = "update"
        }
    }

    public struct EksAnywhereSubscription: AWSDecodableShape {
        /// The Amazon Resource Name (ARN) for the subscription.
        public let arn: String?
        /// A boolean indicating whether or not a subscription will auto renew when it expires.
        public let autoRenew: Bool?
        /// The Unix timestamp in seconds for when the subscription was created.
        public let createdAt: Date?
        /// The Unix timestamp in seconds for when the subscription is effective.
        public let effectiveDate: Date?
        /// The Unix timestamp in seconds for when the subscription will expire or auto renew, depending on the auto renew configuration of the subscription object.
        public let expirationDate: Date?
        /// UUID identifying a subscription.
        public let id: String?
        /// Amazon Web Services License Manager ARN associated with the subscription.
        public let licenseArns: [String]?
        /// The number of licenses included in a subscription. Valid values are between 1 and 100.
        public let licenseQuantity: Int?
        /// The type of licenses included in the subscription. Valid value is CLUSTER. With the CLUSTER license type, each license covers support for a single EKS Anywhere cluster.
        public let licenseType: EksAnywhereSubscriptionLicenseType?
        /// The status of a subscription.
        public let status: String?
        /// The metadata for a subscription to assist with categorization and organization. Each tag consists of a key and an optional value. Subscription tags do not propagate to any other resources associated with the subscription.
        public let tags: [String: String]?
        /// An EksAnywhereSubscriptionTerm object.
        public let term: EksAnywhereSubscriptionTerm?

        public init(arn: String? = nil, autoRenew: Bool? = nil, createdAt: Date? = nil, effectiveDate: Date? = nil, expirationDate: Date? = nil, id: String? = nil, licenseArns: [String]? = nil, licenseQuantity: Int? = nil, licenseType: EksAnywhereSubscriptionLicenseType? = nil, status: String? = nil, tags: [String: String]? = nil, term: EksAnywhereSubscriptionTerm? = nil) {
            self.arn = arn
            self.autoRenew = autoRenew
            self.createdAt = createdAt
            self.effectiveDate = effectiveDate
            self.expirationDate = expirationDate
            self.id = id
            self.licenseArns = licenseArns
            self.licenseQuantity = licenseQuantity
            self.licenseType = licenseType
            self.status = status
            self.tags = tags
            self.term = term
        }

        private enum CodingKeys: String, CodingKey {
            case arn = "arn"
            case autoRenew = "autoRenew"
            case createdAt = "createdAt"
            case effectiveDate = "effectiveDate"
            case expirationDate = "expirationDate"
            case id = "id"
            case licenseArns = "licenseArns"
            case licenseQuantity = "licenseQuantity"
            case licenseType = "licenseType"
            case status = "status"
            case tags = "tags"
            case term = "term"
        }
    }

    public struct EksAnywhereSubscriptionTerm: AWSEncodableShape & AWSDecodableShape {
        /// The duration of the subscription term. Valid values are 12 and 36, indicating a 12 month or 36 month subscription.
        public let duration: Int?
        /// The term unit of the subscription. Valid value is MONTHS.
        public let unit: EksAnywhereSubscriptionTermUnit?

        public init(duration: Int? = nil, unit: EksAnywhereSubscriptionTermUnit? = nil) {
            self.duration = duration
            self.unit = unit
        }

        private enum CodingKeys: String, CodingKey {
            case duration = "duration"
            case unit = "unit"
        }
    }

    public struct EncryptionConfig: AWSEncodableShape & AWSDecodableShape {
        /// Key Management Service (KMS) key. Either the ARN or the alias can be used.
        public let provider: Provider?
        /// Specifies the resources to be encrypted. The only supported value is secrets.
        public let resources: [String]?

        public init(provider: Provider? = nil, resources: [String]? = nil) {
            self.provider = provider
            self.resources = resources
        }

        private enum CodingKeys: String, CodingKey {
            case provider = "provider"
            case resources = "resources"
        }
    }

    public struct ErrorDetail: AWSDecodableShape {
        /// A brief description of the error.     SubnetNotFound: We couldn't find one of the subnets associated with the cluster.    SecurityGroupNotFound: We couldn't find one of the security groups associated with the cluster.    EniLimitReached: You have reached the elastic network interface limit for your account.    IpNotAvailable: A subnet associated with the cluster doesn't have any available IP addresses.    AccessDenied: You don't have permissions to perform the specified operation.    OperationNotPermitted: The service role associated with the cluster doesn't have the required access permissions for Amazon EKS.    VpcIdNotFound: We couldn't find the VPC associated with the cluster.
        public let errorCode: ErrorCode?
        /// A more complete description of the error.
        public let errorMessage: String?
        /// An optional field that contains the resource IDs associated with the error.
        public let resourceIds: [String]?

        public init(errorCode: ErrorCode? = nil, errorMessage: String? = nil, resourceIds: [String]? = nil) {
            self.errorCode = errorCode
            self.errorMessage = errorMessage
            self.resourceIds = resourceIds
        }

        private enum CodingKeys: String, CodingKey {
            case errorCode = "errorCode"
            case errorMessage = "errorMessage"
            case resourceIds = "resourceIds"
        }
    }

    public struct FargateProfile: AWSDecodableShape {
        /// The name of your cluster.
        public let clusterName: String?
        /// The Unix epoch timestamp at object creation.
        public let createdAt: Date?
        /// The full Amazon Resource Name (ARN) of the Fargate profile.
        public let fargateProfileArn: String?
        /// The name of the Fargate profile.
        public let fargateProfileName: String?
        /// The Amazon Resource Name (ARN) of the Pod execution role to use for any Pod that matches the selectors in the Fargate profile. For more information, see  Pod execution role in the Amazon EKS User Guide.
        public let podExecutionRoleArn: String?
        /// The selectors to match for a Pod to use this Fargate profile.
        public let selectors: [FargateProfileSelector]?
        /// The current status of the Fargate profile.
        public let status: FargateProfileStatus?
        /// The IDs of subnets to launch a Pod into.
        public let subnets: [String]?
        /// Metadata that assists with categorization and organization. Each tag consists of a key and an optional value. You define both. Tags don't propagate to any other cluster or Amazon Web Services resources.
        public let tags: [String: String]?

        public init(clusterName: String? = nil, createdAt: Date? = nil, fargateProfileArn: String? = nil, fargateProfileName: String? = nil, podExecutionRoleArn: String? = nil, selectors: [FargateProfileSelector]? = nil, status: FargateProfileStatus? = nil, subnets: [String]? = nil, tags: [String: String]? = nil) {
            self.clusterName = clusterName
            self.createdAt = createdAt
            self.fargateProfileArn = fargateProfileArn
            self.fargateProfileName = fargateProfileName
            self.podExecutionRoleArn = podExecutionRoleArn
            self.selectors = selectors
            self.status = status
            self.subnets = subnets
            self.tags = tags
        }

        private enum CodingKeys: String, CodingKey {
            case clusterName = "clusterName"
            case createdAt = "createdAt"
            case fargateProfileArn = "fargateProfileArn"
            case fargateProfileName = "fargateProfileName"
            case podExecutionRoleArn = "podExecutionRoleArn"
            case selectors = "selectors"
            case status = "status"
            case subnets = "subnets"
            case tags = "tags"
        }
    }

    public struct FargateProfileSelector: AWSEncodableShape & AWSDecodableShape {
        /// The Kubernetes labels that the selector should match. A pod must contain all of the labels that are specified in the selector for it to be considered a match.
        public let labels: [String: String]?
        /// The Kubernetes namespace that the selector should match.
        public let namespace: String?

        public init(labels: [String: String]? = nil, namespace: String? = nil) {
            self.labels = labels
            self.namespace = namespace
        }

        private enum CodingKeys: String, CodingKey {
            case labels = "labels"
            case namespace = "namespace"
        }
    }

    public struct Identity: AWSDecodableShape {
        /// An object representing the OpenID Connect identity provider information.
        public let oidc: OIDC?

        public init(oidc: OIDC? = nil) {
            self.oidc = oidc
        }

        private enum CodingKeys: String, CodingKey {
            case oidc = "oidc"
        }
    }

    public struct IdentityProviderConfig: AWSEncodableShape & AWSDecodableShape {
        /// The name of the identity provider configuration.
        public let name: String
        /// The type of the identity provider configuration. The only type available is oidc.
        public let type: String

        public init(name: String, type: String) {
            self.name = name
            self.type = type
        }

        private enum CodingKeys: String, CodingKey {
            case name = "name"
            case type = "type"
        }
    }

    public struct IdentityProviderConfigResponse: AWSDecodableShape {
        /// An object representing an OpenID Connect (OIDC) identity provider configuration.
        public let oidc: OidcIdentityProviderConfig?

        public init(oidc: OidcIdentityProviderConfig? = nil) {
            self.oidc = oidc
        }

        private enum CodingKeys: String, CodingKey {
            case oidc = "oidc"
        }
    }

    public struct Insight: AWSDecodableShape {
        /// Links to sources that provide additional context on the insight.
        public let additionalInfo: [String: String]?
        /// The category of the insight.
        public let category: Category?
        /// Summary information that relates to the category of the insight. Currently only returned with certain insights having category UPGRADE_READINESS.
        public let categorySpecificSummary: InsightCategorySpecificSummary?
        /// The description of the insight which includes alert criteria, remediation recommendation, and additional resources (contains Markdown).
        public let description: String?
        /// The ID of the insight.
        public let id: String?
        /// An object containing more detail on the status of the insight resource.
        public let insightStatus: InsightStatus?
        /// The Kubernetes minor version associated with an insight if applicable.
        public let kubernetesVersion: String?
        /// The time Amazon EKS last successfully completed a refresh of this insight check on the cluster.
        public let lastRefreshTime: Date?
        /// The time the status of the insight last changed.
        public let lastTransitionTime: Date?
        /// The name of the insight.
        public let name: String?
        /// A summary of how to remediate the finding of this insight if applicable.
        public let recommendation: String?
        /// The details about each resource listed in the insight check result.
        public let resources: [InsightResourceDetail]?

        public init(additionalInfo: [String: String]? = nil, category: Category? = nil, categorySpecificSummary: InsightCategorySpecificSummary? = nil, description: String? = nil, id: String? = nil, insightStatus: InsightStatus? = nil, kubernetesVersion: String? = nil, lastRefreshTime: Date? = nil, lastTransitionTime: Date? = nil, name: String? = nil, recommendation: String? = nil, resources: [InsightResourceDetail]? = nil) {
            self.additionalInfo = additionalInfo
            self.category = category
            self.categorySpecificSummary = categorySpecificSummary
            self.description = description
            self.id = id
            self.insightStatus = insightStatus
            self.kubernetesVersion = kubernetesVersion
            self.lastRefreshTime = lastRefreshTime
            self.lastTransitionTime = lastTransitionTime
            self.name = name
            self.recommendation = recommendation
            self.resources = resources
        }

        private enum CodingKeys: String, CodingKey {
            case additionalInfo = "additionalInfo"
            case category = "category"
            case categorySpecificSummary = "categorySpecificSummary"
            case description = "description"
            case id = "id"
            case insightStatus = "insightStatus"
            case kubernetesVersion = "kubernetesVersion"
            case lastRefreshTime = "lastRefreshTime"
            case lastTransitionTime = "lastTransitionTime"
            case name = "name"
            case recommendation = "recommendation"
            case resources = "resources"
        }
    }

    public struct InsightCategorySpecificSummary: AWSDecodableShape {
        /// The summary information about deprecated resource usage for an insight check in the UPGRADE_READINESS category.
        public let deprecationDetails: [DeprecationDetail]?

        public init(deprecationDetails: [DeprecationDetail]? = nil) {
            self.deprecationDetails = deprecationDetails
        }

        private enum CodingKeys: String, CodingKey {
            case deprecationDetails = "deprecationDetails"
        }
    }

    public struct InsightResourceDetail: AWSDecodableShape {
        /// The Amazon Resource Name (ARN) if applicable.
        public let arn: String?
        /// An object containing more detail on the status of the insight resource.
        public let insightStatus: InsightStatus?
        /// The Kubernetes resource URI if applicable.
        public let kubernetesResourceUri: String?

        public init(arn: String? = nil, insightStatus: InsightStatus? = nil, kubernetesResourceUri: String? = nil) {
            self.arn = arn
            self.insightStatus = insightStatus
            self.kubernetesResourceUri = kubernetesResourceUri
        }

        private enum CodingKeys: String, CodingKey {
            case arn = "arn"
            case insightStatus = "insightStatus"
            case kubernetesResourceUri = "kubernetesResourceUri"
        }
    }

    public struct InsightStatus: AWSDecodableShape {
        /// Explanation on the reasoning for the status of the resource.
        public let reason: String?
        /// The status of the resource.
        public let status: InsightStatusValue?

        public init(reason: String? = nil, status: InsightStatusValue? = nil) {
            self.reason = reason
            self.status = status
        }

        private enum CodingKeys: String, CodingKey {
            case reason = "reason"
            case status = "status"
        }
    }

    public struct InsightSummary: AWSDecodableShape {
        /// The category of the insight.
        public let category: Category?
        /// The description of the insight which includes alert criteria, remediation recommendation, and additional resources (contains Markdown).
        public let description: String?
        /// The ID of the insight.
        public let id: String?
        /// An object containing more detail on the status of the insight.
        public let insightStatus: InsightStatus?
        /// The Kubernetes minor version associated with an insight if applicable.
        public let kubernetesVersion: String?
        /// The time Amazon EKS last successfully completed a refresh of this insight check on the cluster.
        public let lastRefreshTime: Date?
        /// The time the status of the insight last changed.
        public let lastTransitionTime: Date?
        /// The name of the insight.
        public let name: String?

        public init(category: Category? = nil, description: String? = nil, id: String? = nil, insightStatus: InsightStatus? = nil, kubernetesVersion: String? = nil, lastRefreshTime: Date? = nil, lastTransitionTime: Date? = nil, name: String? = nil) {
            self.category = category
            self.description = description
            self.id = id
            self.insightStatus = insightStatus
            self.kubernetesVersion = kubernetesVersion
            self.lastRefreshTime = lastRefreshTime
            self.lastTransitionTime = lastTransitionTime
            self.name = name
        }

        private enum CodingKeys: String, CodingKey {
            case category = "category"
            case description = "description"
            case id = "id"
            case insightStatus = "insightStatus"
            case kubernetesVersion = "kubernetesVersion"
            case lastRefreshTime = "lastRefreshTime"
            case lastTransitionTime = "lastTransitionTime"
            case name = "name"
        }
    }

    public struct InsightsFilter: AWSEncodableShape {
        /// The categories to use to filter insights.
        public let categories: [Category]?
        /// The Kubernetes versions to use to filter the insights.
        public let kubernetesVersions: [String]?
        /// The statuses to use to filter the insights.
        public let statuses: [InsightStatusValue]?

        public init(categories: [Category]? = nil, kubernetesVersions: [String]? = nil, statuses: [InsightStatusValue]? = nil) {
            self.categories = categories
            self.kubernetesVersions = kubernetesVersions
            self.statuses = statuses
        }

        private enum CodingKeys: String, CodingKey {
            case categories = "categories"
            case kubernetesVersions = "kubernetesVersions"
            case statuses = "statuses"
        }
    }

    public struct Issue: AWSDecodableShape {
        /// A brief description of the error.    AccessDenied: Amazon EKS or one or more of your managed nodes is failing to authenticate or authorize with your Kubernetes cluster API server.    AsgInstanceLaunchFailures: Your Auto Scaling group is experiencing failures while attempting to launch instances.    AutoScalingGroupNotFound: We couldn't find the Auto Scaling group associated with the managed node group. You may be able to recreate an Auto Scaling group with the same settings to recover.    ClusterUnreachable: Amazon EKS or one or more of your managed nodes is unable to to communicate with your Kubernetes cluster API server. This can happen if there are network disruptions or if API servers are timing out processing requests.     Ec2LaunchTemplateNotFound: We couldn't find the Amazon EC2 launch template for your managed node group. You may be able to recreate a launch template with the same settings to recover.    Ec2LaunchTemplateVersionMismatch: The Amazon EC2 launch template version for your managed node group does not match the version that Amazon EKS created. You may be able to revert to the version that Amazon EKS created to recover.    Ec2SecurityGroupDeletionFailure: We could not delete the remote access security group for your managed node group. Remove any dependencies from the security group.    Ec2SecurityGroupNotFound: We couldn't find the cluster security group for the cluster. You must recreate your cluster.    Ec2SubnetInvalidConfiguration: One or more Amazon EC2 subnets specified for a node group do not automatically assign public IP addresses to instances launched into it. If you want your instances to be assigned a public IP address, then you need to enable the auto-assign public IP address setting for the subnet. See Modifying the public IPv4 addressing attribute for your subnet in the Amazon VPC User Guide.    IamInstanceProfileNotFound: We couldn't find the IAM instance profile for your managed node group. You may be able to recreate an instance profile with the same settings to recover.    IamNodeRoleNotFound: We couldn't find the IAM role for your managed node group. You may be able to recreate an IAM role with the same settings to recover.    InstanceLimitExceeded: Your Amazon Web Services account is unable to launch any more instances of the specified instance type. You may be able to request an Amazon EC2 instance limit increase to recover.    InsufficientFreeAddresses: One or more of the subnets associated with your managed node group does not have enough available IP addresses for new nodes.    InternalFailure: These errors are usually caused by an Amazon EKS server-side issue.    NodeCreationFailure: Your launched instances are unable to register with your Amazon EKS cluster. Common causes of this failure are insufficient node IAM role permissions or lack of outbound internet access for the nodes.
        public let code: NodegroupIssueCode?
        /// The error message associated with the issue.
        public let message: String?
        /// The Amazon Web Services resources that are afflicted by this issue.
        public let resourceIds: [String]?

        public init(code: NodegroupIssueCode? = nil, message: String? = nil, resourceIds: [String]? = nil) {
            self.code = code
            self.message = message
            self.resourceIds = resourceIds
        }

        private enum CodingKeys: String, CodingKey {
            case code = "code"
            case message = "message"
            case resourceIds = "resourceIds"
        }
    }

    public struct KubernetesNetworkConfigRequest: AWSEncodableShape {
        /// Specify which IP family is used to assign Kubernetes pod and service IP addresses. If you don't specify a value, ipv4 is used by default. You can only specify an IP family when you create a cluster and can't change this value once the cluster is created. If you specify ipv6, the VPC and subnets that you specify for cluster creation must have both IPv4 and IPv6 CIDR blocks assigned to them. You can't specify ipv6 for clusters in China Regions. You can only specify ipv6 for 1.21 and later clusters that use version 1.10.1 or later of the Amazon VPC CNI add-on. If you specify ipv6, then ensure that your VPC meets the requirements listed in the considerations listed in Assigning IPv6 addresses to pods and services in the Amazon EKS User Guide. Kubernetes assigns services IPv6 addresses from the unique local address range (fc00::/7). You can't specify a custom IPv6 CIDR block. Pod addresses are assigned from the subnet's IPv6 CIDR.
        public let ipFamily: IpFamily?
        /// Don't specify a value if you select ipv6 for ipFamily. The CIDR block to assign Kubernetes service IP addresses from. If you don't specify a block, Kubernetes assigns addresses from either the 10.100.0.0/16 or 172.20.0.0/16 CIDR blocks. We recommend that you specify a block that does not overlap with resources in other networks that are peered or connected to your VPC. The block must meet the following requirements:   Within one of the following private IP address blocks: 10.0.0.0/8, 172.16.0.0/12, or 192.168.0.0/16.   Doesn't overlap with any CIDR block assigned to the VPC that you selected for VPC.   Between /24 and /12.    You can only specify a custom CIDR block when you create a cluster. You can't change this value after the cluster is created.
        public let serviceIpv4Cidr: String?

        public init(ipFamily: IpFamily? = nil, serviceIpv4Cidr: String? = nil) {
            self.ipFamily = ipFamily
            self.serviceIpv4Cidr = serviceIpv4Cidr
        }

        private enum CodingKeys: String, CodingKey {
            case ipFamily = "ipFamily"
            case serviceIpv4Cidr = "serviceIpv4Cidr"
        }
    }

    public struct KubernetesNetworkConfigResponse: AWSDecodableShape {
        /// The IP family used to assign Kubernetes Pod and Service objects IP addresses. The IP family is always ipv4, unless you have a 1.21 or later cluster running version 1.10.1 or later of the Amazon VPC CNI plugin for Kubernetes and specified ipv6 when you created the cluster.
        public let ipFamily: IpFamily?
        /// The CIDR block that Kubernetes Pod and Service object IP addresses are assigned from. Kubernetes assigns addresses from an IPv4 CIDR block assigned to a subnet that the node is in. If you didn't specify a CIDR block when you created the cluster, then Kubernetes assigns addresses from either the 10.100.0.0/16 or 172.20.0.0/16 CIDR blocks. If this was specified, then it was specified when the cluster was created and it can't be changed.
        public let serviceIpv4Cidr: String?
        /// The CIDR block that Kubernetes pod and service IP addresses are assigned from if you created a 1.21 or later cluster with version 1.10.1 or later of the Amazon VPC CNI add-on and specified ipv6 for ipFamily when you created the cluster. Kubernetes assigns service addresses from the unique local address range (fc00::/7) because you can't specify a custom IPv6 CIDR block when you create the cluster.
        public let serviceIpv6Cidr: String?

        public init(ipFamily: IpFamily? = nil, serviceIpv4Cidr: String? = nil, serviceIpv6Cidr: String? = nil) {
            self.ipFamily = ipFamily
            self.serviceIpv4Cidr = serviceIpv4Cidr
            self.serviceIpv6Cidr = serviceIpv6Cidr
        }

        private enum CodingKeys: String, CodingKey {
            case ipFamily = "ipFamily"
            case serviceIpv4Cidr = "serviceIpv4Cidr"
            case serviceIpv6Cidr = "serviceIpv6Cidr"
        }
    }

    public struct LaunchTemplateSpecification: AWSEncodableShape & AWSDecodableShape {
        /// The ID of the launch template. You must specify either the launch template ID or the launch template name in the request, but not both.
        public let id: String?
        /// The name of the launch template. You must specify either the launch template name or the launch template ID in the request, but not both.
        public let name: String?
        /// The version number of the launch template to use. If no version is specified, then the template's default version is used.
        public let version: String?

        public init(id: String? = nil, name: String? = nil, version: String? = nil) {
            self.id = id
            self.name = name
            self.version = version
        }

        private enum CodingKeys: String, CodingKey {
            case id = "id"
            case name = "name"
            case version = "version"
        }
    }

    public struct ListAccessEntriesRequest: AWSEncodableShape {
        /// The ARN of an AccessPolicy. When you specify an access policy ARN, only the access entries associated to that access policy are returned. For a list of available policy ARNs, use ListAccessPolicies.
        public let associatedPolicyArn: String?
        /// The name of your cluster.
        public let clusterName: String
        /// The maximum number of results, returned in paginated output. You receive maxResults in a single page, along with a nextToken response element. You can see the remaining results of the initial request by sending another request with the returned nextToken value. This value can be between 1 and 100. If you don't use this parameter, 100 results and a nextToken value, if applicable, are returned.
        public let maxResults: Int?
        /// The nextToken value returned from a previous paginated request, where maxResults was used and the results exceeded the value of that parameter. Pagination continues from the end of the previous results that returned the nextToken value. This value is null when there are no more results to return.  This token should be treated as an opaque identifier that is used only to retrieve the next items in a list and not for other programmatic purposes.
        public let nextToken: String?

        public init(associatedPolicyArn: String? = nil, clusterName: String, maxResults: Int? = nil, nextToken: String? = nil) {
            self.associatedPolicyArn = associatedPolicyArn
            self.clusterName = clusterName
            self.maxResults = maxResults
            self.nextToken = nextToken
        }

        public func encode(to encoder: Encoder) throws {
            let request = encoder.userInfo[.awsRequest]! as! RequestEncodingContainer
            _ = encoder.container(keyedBy: CodingKeys.self)
            request.encodeQuery(self.associatedPolicyArn, key: "associatedPolicyArn")
            request.encodePath(self.clusterName, key: "clusterName")
            request.encodeQuery(self.maxResults, key: "maxResults")
            request.encodeQuery(self.nextToken, key: "nextToken")
        }

        public func validate(name: String) throws {
            try self.validate(self.maxResults, name: "maxResults", parent: name, max: 100)
            try self.validate(self.maxResults, name: "maxResults", parent: name, min: 1)
        }

        private enum CodingKeys: CodingKey {}
    }

    public struct ListAccessEntriesResponse: AWSDecodableShape {
        /// The list of access entries that exist for the cluster.
        public let accessEntries: [String]?
        /// The nextToken value returned from a previous paginated request, where maxResults was used and the results exceeded the value of that parameter. Pagination continues from the end of the previous results that returned the nextToken value. This value is null when there are no more results to return.  This token should be treated as an opaque identifier that is used only to retrieve the next items in a list and not for other programmatic purposes.
        public let nextToken: String?

        public init(accessEntries: [String]? = nil, nextToken: String? = nil) {
            self.accessEntries = accessEntries
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case accessEntries = "accessEntries"
            case nextToken = "nextToken"
        }
    }

    public struct ListAccessPoliciesRequest: AWSEncodableShape {
        /// The maximum number of results, returned in paginated output. You receive maxResults in a single page, along with a nextToken response element. You can see the remaining results of the initial request by sending another request with the returned nextToken value. This value can be between 1 and 100. If you don't use this parameter, 100 results and a nextToken value, if applicable, are returned.
        public let maxResults: Int?
        /// The nextToken value returned from a previous paginated request, where maxResults was used and the results exceeded the value of that parameter. Pagination continues from the end of the previous results that returned the nextToken value. This value is null when there are no more results to return.  This token should be treated as an opaque identifier that is used only to retrieve the next items in a list and not for other programmatic purposes.
        public let nextToken: String?

        public init(maxResults: Int? = nil, nextToken: String? = nil) {
            self.maxResults = maxResults
            self.nextToken = nextToken
        }

        public func encode(to encoder: Encoder) throws {
            let request = encoder.userInfo[.awsRequest]! as! RequestEncodingContainer
            _ = encoder.container(keyedBy: CodingKeys.self)
            request.encodeQuery(self.maxResults, key: "maxResults")
            request.encodeQuery(self.nextToken, key: "nextToken")
        }

        public func validate(name: String) throws {
            try self.validate(self.maxResults, name: "maxResults", parent: name, max: 100)
            try self.validate(self.maxResults, name: "maxResults", parent: name, min: 1)
        }

        private enum CodingKeys: CodingKey {}
    }

    public struct ListAccessPoliciesResponse: AWSDecodableShape {
        /// The list of available access policies. You can't view the contents of an access policy using the API. To view the contents, see Access policy permissions in the Amazon EKS User Guide.
        public let accessPolicies: [AccessPolicy]?
        /// The nextToken value returned from a previous paginated request, where maxResults was used and the results exceeded the value of that parameter. Pagination continues from the end of the previous results that returned the nextToken value. This value is null when there are no more results to return.  This token should be treated as an opaque identifier that is used only to retrieve the next items in a list and not for other programmatic purposes.
        public let nextToken: String?

        public init(accessPolicies: [AccessPolicy]? = nil, nextToken: String? = nil) {
            self.accessPolicies = accessPolicies
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case accessPolicies = "accessPolicies"
            case nextToken = "nextToken"
        }
    }

    public struct ListAddonsRequest: AWSEncodableShape {
        /// The name of your cluster.
        public let clusterName: String
        /// The maximum number of results, returned in paginated output. You receive maxResults in a single page, along with a nextToken response element. You can see the remaining results of the initial request by sending another request with the returned nextToken value. This value can be between 1 and 100. If you don't use this parameter, 100 results and a nextToken value, if applicable, are returned.
        public let maxResults: Int?
        /// The nextToken value returned from a previous paginated request, where maxResults was used and the results exceeded the value of that parameter. Pagination continues from the end of the previous results that returned the nextToken value. This value is null when there are no more results to return.  This token should be treated as an opaque identifier that is used only to retrieve the next items in a list and not for other programmatic purposes.
        public let nextToken: String?

        public init(clusterName: String, maxResults: Int? = nil, nextToken: String? = nil) {
            self.clusterName = clusterName
            self.maxResults = maxResults
            self.nextToken = nextToken
        }

        public func encode(to encoder: Encoder) throws {
            let request = encoder.userInfo[.awsRequest]! as! RequestEncodingContainer
            _ = encoder.container(keyedBy: CodingKeys.self)
            request.encodePath(self.clusterName, key: "clusterName")
            request.encodeQuery(self.maxResults, key: "maxResults")
            request.encodeQuery(self.nextToken, key: "nextToken")
        }

        public func validate(name: String) throws {
            try self.validate(self.clusterName, name: "clusterName", parent: name, max: 100)
            try self.validate(self.clusterName, name: "clusterName", parent: name, min: 1)
            try self.validate(self.clusterName, name: "clusterName", parent: name, pattern: "^[0-9A-Za-z][A-Za-z0-9\\-_]*$")
            try self.validate(self.maxResults, name: "maxResults", parent: name, max: 100)
            try self.validate(self.maxResults, name: "maxResults", parent: name, min: 1)
        }

        private enum CodingKeys: CodingKey {}
    }

    public struct ListAddonsResponse: AWSDecodableShape {
        /// A list of installed add-ons.
        public let addons: [String]?
        /// The nextToken value to include in a future ListAddons request. When the results of a ListAddons request exceed maxResults, you can use this value to retrieve the next page of results. This value is null when there are no more results to return.  This token should be treated as an opaque identifier that is used only to retrieve the next items in a list and not for other programmatic purposes.
        public let nextToken: String?

        public init(addons: [String]? = nil, nextToken: String? = nil) {
            self.addons = addons
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case addons = "addons"
            case nextToken = "nextToken"
        }
    }

    public struct ListAssociatedAccessPoliciesRequest: AWSEncodableShape {
        /// The name of your cluster.
        public let clusterName: String
        /// The maximum number of results, returned in paginated output. You receive maxResults in a single page, along with a nextToken response element. You can see the remaining results of the initial request by sending another request with the returned nextToken value. This value can be between 1 and 100. If you don't use this parameter, 100 results and a nextToken value, if applicable, are returned.
        public let maxResults: Int?
        /// The nextToken value returned from a previous paginated request, where maxResults was used and the results exceeded the value of that parameter. Pagination continues from the end of the previous results that returned the nextToken value. This value is null when there are no more results to return.  This token should be treated as an opaque identifier that is used only to retrieve the next items in a list and not for other programmatic purposes.
        public let nextToken: String?
        /// The ARN of the IAM principal for the AccessEntry.
        public let principalArn: String

        public init(clusterName: String, maxResults: Int? = nil, nextToken: String? = nil, principalArn: String) {
            self.clusterName = clusterName
            self.maxResults = maxResults
            self.nextToken = nextToken
            self.principalArn = principalArn
        }

        public func encode(to encoder: Encoder) throws {
            let request = encoder.userInfo[.awsRequest]! as! RequestEncodingContainer
            _ = encoder.container(keyedBy: CodingKeys.self)
            request.encodePath(self.clusterName, key: "clusterName")
            request.encodeQuery(self.maxResults, key: "maxResults")
            request.encodeQuery(self.nextToken, key: "nextToken")
            request.encodePath(self.principalArn, key: "principalArn")
        }

        public func validate(name: String) throws {
            try self.validate(self.maxResults, name: "maxResults", parent: name, max: 100)
            try self.validate(self.maxResults, name: "maxResults", parent: name, min: 1)
        }

        private enum CodingKeys: CodingKey {}
    }

    public struct ListAssociatedAccessPoliciesResponse: AWSDecodableShape {
        /// The list of access policies associated with the access entry.
        public let associatedAccessPolicies: [AssociatedAccessPolicy]?
        /// The name of your cluster.
        public let clusterName: String?
        /// The nextToken value returned from a previous paginated request, where maxResults was used and the results exceeded the value of that parameter. Pagination continues from the end of the previous results that returned the nextToken value. This value is null when there are no more results to return.  This token should be treated as an opaque identifier that is used only to retrieve the next items in a list and not for other programmatic purposes.
        public let nextToken: String?
        /// The ARN of the IAM principal for the AccessEntry.
        public let principalArn: String?

        public init(associatedAccessPolicies: [AssociatedAccessPolicy]? = nil, clusterName: String? = nil, nextToken: String? = nil, principalArn: String? = nil) {
            self.associatedAccessPolicies = associatedAccessPolicies
            self.clusterName = clusterName
            self.nextToken = nextToken
            self.principalArn = principalArn
        }

        private enum CodingKeys: String, CodingKey {
            case associatedAccessPolicies = "associatedAccessPolicies"
            case clusterName = "clusterName"
            case nextToken = "nextToken"
            case principalArn = "principalArn"
        }
    }

    public struct ListClustersRequest: AWSEncodableShape {
        /// Indicates whether external clusters are included in the returned list. Use 'all' to return https://docs.aws.amazon.com/eks/latest/userguide/eks-connector.htmlconnected clusters, or blank to return only Amazon EKS clusters. 'all' must be in lowercase otherwise an error occurs.
        public let include: [String]?
        /// The maximum number of results, returned in paginated output. You receive maxResults in a single page, along with a nextToken response element. You can see the remaining results of the initial request by sending another request with the returned nextToken value. This value can be between 1 and 100. If you don't use this parameter, 100 results and a nextToken value, if applicable, are returned.
        public let maxResults: Int?
        /// The nextToken value returned from a previous paginated request, where maxResults was used and the results exceeded the value of that parameter. Pagination continues from the end of the previous results that returned the nextToken value. This value is null when there are no more results to return.  This token should be treated as an opaque identifier that is used only to retrieve the next items in a list and not for other programmatic purposes.
        public let nextToken: String?

        public init(include: [String]? = nil, maxResults: Int? = nil, nextToken: String? = nil) {
            self.include = include
            self.maxResults = maxResults
            self.nextToken = nextToken
        }

        public func encode(to encoder: Encoder) throws {
            let request = encoder.userInfo[.awsRequest]! as! RequestEncodingContainer
            _ = encoder.container(keyedBy: CodingKeys.self)
            request.encodeQuery(self.include, key: "include")
            request.encodeQuery(self.maxResults, key: "maxResults")
            request.encodeQuery(self.nextToken, key: "nextToken")
        }

        public func validate(name: String) throws {
            try self.validate(self.maxResults, name: "maxResults", parent: name, max: 100)
            try self.validate(self.maxResults, name: "maxResults", parent: name, min: 1)
        }

        private enum CodingKeys: CodingKey {}
    }

    public struct ListClustersResponse: AWSDecodableShape {
        /// A list of all of the clusters for your account in the specified Amazon Web Services Region.
        public let clusters: [String]?
        /// The nextToken value returned from a previous paginated request, where maxResults was used and the results exceeded the value of that parameter. Pagination continues from the end of the previous results that returned the nextToken value. This value is null when there are no more results to return.  This token should be treated as an opaque identifier that is used only to retrieve the next items in a list and not for other programmatic purposes.
        public let nextToken: String?

        public init(clusters: [String]? = nil, nextToken: String? = nil) {
            self.clusters = clusters
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case clusters = "clusters"
            case nextToken = "nextToken"
        }
    }

    public struct ListEksAnywhereSubscriptionsRequest: AWSEncodableShape {
        /// An array of subscription statuses to filter on.
        public let includeStatus: [EksAnywhereSubscriptionStatus]?
        /// The maximum number of cluster results returned by ListEksAnywhereSubscriptions in paginated output. When you use this parameter, ListEksAnywhereSubscriptions returns only maxResults results in a single page along with a nextToken response element. You can see the remaining results of the initial request by sending another ListEksAnywhereSubscriptions request with the returned nextToken value. This value can be between 1 and 100. If you don't use this parameter, ListEksAnywhereSubscriptions returns up to 10 results and a nextToken value if applicable.
        public let maxResults: Int?
        /// The nextToken value returned from a previous paginated ListEksAnywhereSubscriptions request where maxResults was used and the results exceeded the value of that parameter. Pagination continues from the end of the previous results that returned the nextToken value.
        public let nextToken: String?

        public init(includeStatus: [EksAnywhereSubscriptionStatus]? = nil, maxResults: Int? = nil, nextToken: String? = nil) {
            self.includeStatus = includeStatus
            self.maxResults = maxResults
            self.nextToken = nextToken
        }

        public func encode(to encoder: Encoder) throws {
            let request = encoder.userInfo[.awsRequest]! as! RequestEncodingContainer
            _ = encoder.container(keyedBy: CodingKeys.self)
            request.encodeQuery(self.includeStatus, key: "includeStatus")
            request.encodeQuery(self.maxResults, key: "maxResults")
            request.encodeQuery(self.nextToken, key: "nextToken")
        }

        public func validate(name: String) throws {
            try self.validate(self.maxResults, name: "maxResults", parent: name, max: 100)
            try self.validate(self.maxResults, name: "maxResults", parent: name, min: 1)
        }

        private enum CodingKeys: CodingKey {}
    }

    public struct ListEksAnywhereSubscriptionsResponse: AWSDecodableShape {
        /// The nextToken value to include in a future ListEksAnywhereSubscriptions request. When the results of a ListEksAnywhereSubscriptions request exceed maxResults, you can use this value to retrieve the next page of results. This value is null when there are no more results to return.
        public let nextToken: String?
        /// A list of all subscription objects in the region, filtered by includeStatus and paginated by nextToken and maxResults.
        public let subscriptions: [EksAnywhereSubscription]?

        public init(nextToken: String? = nil, subscriptions: [EksAnywhereSubscription]? = nil) {
            self.nextToken = nextToken
            self.subscriptions = subscriptions
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "nextToken"
            case subscriptions = "subscriptions"
        }
    }

    public struct ListFargateProfilesRequest: AWSEncodableShape {
        /// The name of your cluster.
        public let clusterName: String
        /// The maximum number of results, returned in paginated output. You receive maxResults in a single page, along with a nextToken response element. You can see the remaining results of the initial request by sending another request with the returned nextToken value. This value can be between 1 and 100. If you don't use this parameter, 100 results and a nextToken value, if applicable, are returned.
        public let maxResults: Int?
        /// The nextToken value returned from a previous paginated request, where maxResults was used and the results exceeded the value of that parameter. Pagination continues from the end of the previous results that returned the nextToken value. This value is null when there are no more results to return.  This token should be treated as an opaque identifier that is used only to retrieve the next items in a list and not for other programmatic purposes.
        public let nextToken: String?

        public init(clusterName: String, maxResults: Int? = nil, nextToken: String? = nil) {
            self.clusterName = clusterName
            self.maxResults = maxResults
            self.nextToken = nextToken
        }

        public func encode(to encoder: Encoder) throws {
            let request = encoder.userInfo[.awsRequest]! as! RequestEncodingContainer
            _ = encoder.container(keyedBy: CodingKeys.self)
            request.encodePath(self.clusterName, key: "clusterName")
            request.encodeQuery(self.maxResults, key: "maxResults")
            request.encodeQuery(self.nextToken, key: "nextToken")
        }

        public func validate(name: String) throws {
            try self.validate(self.maxResults, name: "maxResults", parent: name, max: 100)
            try self.validate(self.maxResults, name: "maxResults", parent: name, min: 1)
        }

        private enum CodingKeys: CodingKey {}
    }

    public struct ListFargateProfilesResponse: AWSDecodableShape {
        /// A list of all of the Fargate profiles associated with the specified cluster.
        public let fargateProfileNames: [String]?
        /// The nextToken value returned from a previous paginated request, where maxResults was used and the results exceeded the value of that parameter. Pagination continues from the end of the previous results that returned the nextToken value. This value is null when there are no more results to return.  This token should be treated as an opaque identifier that is used only to retrieve the next items in a list and not for other programmatic purposes.
        public let nextToken: String?

        public init(fargateProfileNames: [String]? = nil, nextToken: String? = nil) {
            self.fargateProfileNames = fargateProfileNames
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case fargateProfileNames = "fargateProfileNames"
            case nextToken = "nextToken"
        }
    }

    public struct ListIdentityProviderConfigsRequest: AWSEncodableShape {
        /// The name of your cluster.
        public let clusterName: String
        /// The maximum number of results, returned in paginated output. You receive maxResults in a single page, along with a nextToken response element. You can see the remaining results of the initial request by sending another request with the returned nextToken value. This value can be between 1 and 100. If you don't use this parameter, 100 results and a nextToken value, if applicable, are returned.
        public let maxResults: Int?
        /// The nextToken value returned from a previous paginated request, where maxResults was used and the results exceeded the value of that parameter. Pagination continues from the end of the previous results that returned the nextToken value. This value is null when there are no more results to return.  This token should be treated as an opaque identifier that is used only to retrieve the next items in a list and not for other programmatic purposes.
        public let nextToken: String?

        public init(clusterName: String, maxResults: Int? = nil, nextToken: String? = nil) {
            self.clusterName = clusterName
            self.maxResults = maxResults
            self.nextToken = nextToken
        }

        public func encode(to encoder: Encoder) throws {
            let request = encoder.userInfo[.awsRequest]! as! RequestEncodingContainer
            _ = encoder.container(keyedBy: CodingKeys.self)
            request.encodePath(self.clusterName, key: "clusterName")
            request.encodeQuery(self.maxResults, key: "maxResults")
            request.encodeQuery(self.nextToken, key: "nextToken")
        }

        public func validate(name: String) throws {
            try self.validate(self.maxResults, name: "maxResults", parent: name, max: 100)
            try self.validate(self.maxResults, name: "maxResults", parent: name, min: 1)
        }

        private enum CodingKeys: CodingKey {}
    }

    public struct ListIdentityProviderConfigsResponse: AWSDecodableShape {
        /// The identity provider configurations for the cluster.
        public let identityProviderConfigs: [IdentityProviderConfig]?
        /// The nextToken value to include in a future ListIdentityProviderConfigsResponse request. When the results of a ListIdentityProviderConfigsResponse request exceed maxResults, you can use this value to retrieve the next page of results. This value is null when there are no more results to return.  This token should be treated as an opaque identifier that is used only to retrieve the next items in a list and not for other programmatic purposes.
        public let nextToken: String?

        public init(identityProviderConfigs: [IdentityProviderConfig]? = nil, nextToken: String? = nil) {
            self.identityProviderConfigs = identityProviderConfigs
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case identityProviderConfigs = "identityProviderConfigs"
            case nextToken = "nextToken"
        }
    }

    public struct ListInsightsRequest: AWSEncodableShape {
        /// The name of the Amazon EKS cluster associated with the insights.
        public let clusterName: String
        /// The criteria to filter your list of insights for your cluster. You can filter which insights are returned by category, associated Kubernetes version, and status.
        public let filter: InsightsFilter?
        /// The maximum number of identity provider configurations returned by ListInsights in paginated output. When you use this parameter, ListInsights returns only maxResults results in a single page along with a nextToken response element. You can see the remaining results of the initial request by sending another ListInsights request with the returned nextToken value. This value can be between 1 and 100. If you don't use this parameter, ListInsights returns up to 100 results and a nextToken value, if applicable.
        public let maxResults: Int?
        /// The nextToken value returned from a previous paginated ListInsights request. When the results of a ListInsights request exceed maxResults, you can use this value to retrieve the next page of results. This value is null when there are no more results to return.
        public let nextToken: String?

        public init(clusterName: String, filter: InsightsFilter? = nil, maxResults: Int? = nil, nextToken: String? = nil) {
            self.clusterName = clusterName
            self.filter = filter
            self.maxResults = maxResults
            self.nextToken = nextToken
        }

        public func encode(to encoder: Encoder) throws {
            let request = encoder.userInfo[.awsRequest]! as! RequestEncodingContainer
            var container = encoder.container(keyedBy: CodingKeys.self)
            request.encodePath(self.clusterName, key: "clusterName")
            try container.encodeIfPresent(self.filter, forKey: .filter)
            try container.encodeIfPresent(self.maxResults, forKey: .maxResults)
            try container.encodeIfPresent(self.nextToken, forKey: .nextToken)
        }

        public func validate(name: String) throws {
            try self.validate(self.maxResults, name: "maxResults", parent: name, max: 100)
            try self.validate(self.maxResults, name: "maxResults", parent: name, min: 1)
        }

        private enum CodingKeys: String, CodingKey {
            case filter = "filter"
            case maxResults = "maxResults"
            case nextToken = "nextToken"
        }
    }

    public struct ListInsightsResponse: AWSDecodableShape {
        /// The returned list of insights.
        public let insights: [InsightSummary]?
        /// The nextToken value to include in a future ListInsights request. When the results of a ListInsights request exceed maxResults, you can use this value to retrieve the next page of results. This value is null when there are no more results to return.
        public let nextToken: String?

        public init(insights: [InsightSummary]? = nil, nextToken: String? = nil) {
            self.insights = insights
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case insights = "insights"
            case nextToken = "nextToken"
        }
    }

    public struct ListNodegroupsRequest: AWSEncodableShape {
        /// The name of your cluster.
        public let clusterName: String
        /// The maximum number of results, returned in paginated output. You receive maxResults in a single page, along with a nextToken response element. You can see the remaining results of the initial request by sending another request with the returned nextToken value. This value can be between 1 and 100. If you don't use this parameter, 100 results and a nextToken value, if applicable, are returned.
        public let maxResults: Int?
        /// The nextToken value returned from a previous paginated request, where maxResults was used and the results exceeded the value of that parameter. Pagination continues from the end of the previous results that returned the nextToken value. This value is null when there are no more results to return.  This token should be treated as an opaque identifier that is used only to retrieve the next items in a list and not for other programmatic purposes.
        public let nextToken: String?

        public init(clusterName: String, maxResults: Int? = nil, nextToken: String? = nil) {
            self.clusterName = clusterName
            self.maxResults = maxResults
            self.nextToken = nextToken
        }

        public func encode(to encoder: Encoder) throws {
            let request = encoder.userInfo[.awsRequest]! as! RequestEncodingContainer
            _ = encoder.container(keyedBy: CodingKeys.self)
            request.encodePath(self.clusterName, key: "clusterName")
            request.encodeQuery(self.maxResults, key: "maxResults")
            request.encodeQuery(self.nextToken, key: "nextToken")
        }

        public func validate(name: String) throws {
            try self.validate(self.maxResults, name: "maxResults", parent: name, max: 100)
            try self.validate(self.maxResults, name: "maxResults", parent: name, min: 1)
        }

        private enum CodingKeys: CodingKey {}
    }

    public struct ListNodegroupsResponse: AWSDecodableShape {
        /// The nextToken value returned from a previous paginated request, where maxResults was used and the results exceeded the value of that parameter. Pagination continues from the end of the previous results that returned the nextToken value. This value is null when there are no more results to return.  This token should be treated as an opaque identifier that is used only to retrieve the next items in a list and not for other programmatic purposes.
        public let nextToken: String?
        /// A list of all of the node groups associated with the specified cluster.
        public let nodegroups: [String]?

        public init(nextToken: String? = nil, nodegroups: [String]? = nil) {
            self.nextToken = nextToken
            self.nodegroups = nodegroups
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "nextToken"
            case nodegroups = "nodegroups"
        }
    }

    public struct ListPodIdentityAssociationsRequest: AWSEncodableShape {
        /// The name of the cluster that the associations are in.
        public let clusterName: String
        /// The maximum number of EKS Pod Identity association results returned by ListPodIdentityAssociations in paginated output. When you use this parameter, ListPodIdentityAssociations returns only maxResults results in a single page along with a nextToken response element. You can see the remaining results of the initial request by sending another ListPodIdentityAssociations request with the returned nextToken value. This value can be between 1 and 100. If you don't use this parameter, ListPodIdentityAssociations returns up to 100 results and a nextToken value if applicable.
        public let maxResults: Int?
        /// The name of the Kubernetes namespace inside the cluster that the associations are in.
        public let namespace: String?
        /// The nextToken value returned from a previous paginated ListUpdates request where maxResults was used and the results exceeded the value of that parameter. Pagination continues from the end of the previous results that returned the nextToken value.  This token should be treated as an opaque identifier that is used only to retrieve the next items in a list and not for other programmatic purposes.
        public let nextToken: String?
        /// The name of the Kubernetes service account that the associations use.
        public let serviceAccount: String?

        public init(clusterName: String, maxResults: Int? = nil, namespace: String? = nil, nextToken: String? = nil, serviceAccount: String? = nil) {
            self.clusterName = clusterName
            self.maxResults = maxResults
            self.namespace = namespace
            self.nextToken = nextToken
            self.serviceAccount = serviceAccount
        }

        public func encode(to encoder: Encoder) throws {
            let request = encoder.userInfo[.awsRequest]! as! RequestEncodingContainer
            _ = encoder.container(keyedBy: CodingKeys.self)
            request.encodePath(self.clusterName, key: "clusterName")
            request.encodeQuery(self.maxResults, key: "maxResults")
            request.encodeQuery(self.namespace, key: "namespace")
            request.encodeQuery(self.nextToken, key: "nextToken")
            request.encodeQuery(self.serviceAccount, key: "serviceAccount")
        }

        public func validate(name: String) throws {
            try self.validate(self.maxResults, name: "maxResults", parent: name, max: 100)
            try self.validate(self.maxResults, name: "maxResults", parent: name, min: 1)
        }

        private enum CodingKeys: CodingKey {}
    }

    public struct ListPodIdentityAssociationsResponse: AWSDecodableShape {
        /// The list of summarized descriptions of the associations that are in the cluster and match any filters that you provided. Each summary is simplified by removing these fields compared to the full  PodIdentityAssociation :   The IAM role: roleArn    The timestamp that the association was created at: createdAt    The most recent timestamp that the association was modified at:. modifiedAt    The tags on the association: tags
        public let associations: [PodIdentityAssociationSummary]?
        /// The nextToken value to include in a future ListPodIdentityAssociations request. When the results of a ListPodIdentityAssociations request exceed maxResults, you can use this value to retrieve the next page of results. This value is null when there are no more results to return.  This token should be treated as an opaque identifier that is used only to retrieve the next items in a list and not for other programmatic purposes.
        public let nextToken: String?

        public init(associations: [PodIdentityAssociationSummary]? = nil, nextToken: String? = nil) {
            self.associations = associations
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case associations = "associations"
            case nextToken = "nextToken"
        }
    }

    public struct ListTagsForResourceRequest: AWSEncodableShape {
        /// The Amazon Resource Name (ARN) that identifies the resource to list tags for.
        public let resourceArn: String

        public init(resourceArn: String) {
            self.resourceArn = resourceArn
        }

        public func encode(to encoder: Encoder) throws {
            let request = encoder.userInfo[.awsRequest]! as! RequestEncodingContainer
            _ = encoder.container(keyedBy: CodingKeys.self)
            request.encodePath(self.resourceArn, key: "resourceArn")
        }

        private enum CodingKeys: CodingKey {}
    }

    public struct ListTagsForResourceResponse: AWSDecodableShape {
        /// The tags for the resource.
        public let tags: [String: String]?

        public init(tags: [String: String]? = nil) {
            self.tags = tags
        }

        private enum CodingKeys: String, CodingKey {
            case tags = "tags"
        }
    }

    public struct ListUpdatesRequest: AWSEncodableShape {
        /// The names of the installed add-ons that have available updates.
        public let addonName: String?
        /// The maximum number of results, returned in paginated output. You receive maxResults in a single page, along with a nextToken response element. You can see the remaining results of the initial request by sending another request with the returned nextToken value. This value can be between 1 and 100. If you don't use this parameter, 100 results and a nextToken value, if applicable, are returned.
        public let maxResults: Int?
        /// The name of the Amazon EKS cluster to list updates for.
        public let name: String
        /// The nextToken value returned from a previous paginated request, where maxResults was used and the results exceeded the value of that parameter. Pagination continues from the end of the previous results that returned the nextToken value. This value is null when there are no more results to return.  This token should be treated as an opaque identifier that is used only to retrieve the next items in a list and not for other programmatic purposes.
        public let nextToken: String?
        /// The name of the Amazon EKS managed node group to list updates for.
        public let nodegroupName: String?

        public init(addonName: String? = nil, maxResults: Int? = nil, name: String, nextToken: String? = nil, nodegroupName: String? = nil) {
            self.addonName = addonName
            self.maxResults = maxResults
            self.name = name
            self.nextToken = nextToken
            self.nodegroupName = nodegroupName
        }

        public func encode(to encoder: Encoder) throws {
            let request = encoder.userInfo[.awsRequest]! as! RequestEncodingContainer
            _ = encoder.container(keyedBy: CodingKeys.self)
            request.encodeQuery(self.addonName, key: "addonName")
            request.encodeQuery(self.maxResults, key: "maxResults")
            request.encodePath(self.name, key: "name")
            request.encodeQuery(self.nextToken, key: "nextToken")
            request.encodeQuery(self.nodegroupName, key: "nodegroupName")
        }

        public func validate(name: String) throws {
            try self.validate(self.maxResults, name: "maxResults", parent: name, max: 100)
            try self.validate(self.maxResults, name: "maxResults", parent: name, min: 1)
        }

        private enum CodingKeys: CodingKey {}
    }

    public struct ListUpdatesResponse: AWSDecodableShape {
        /// The nextToken value returned from a previous paginated request, where maxResults was used and the results exceeded the value of that parameter. Pagination continues from the end of the previous results that returned the nextToken value. This value is null when there are no more results to return.  This token should be treated as an opaque identifier that is used only to retrieve the next items in a list and not for other programmatic purposes.
        public let nextToken: String?
        /// A list of all the updates for the specified cluster and Region.
        public let updateIds: [String]?

        public init(nextToken: String? = nil, updateIds: [String]? = nil) {
            self.nextToken = nextToken
            self.updateIds = updateIds
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "nextToken"
            case updateIds = "updateIds"
        }
    }

    public struct LogSetup: AWSEncodableShape & AWSDecodableShape {
        /// If a log type is enabled, that log type exports its control plane logs to CloudWatch Logs. If a log type isn't enabled, that log type doesn't export its control plane logs. Each individual log type can be enabled or disabled independently.
        public let enabled: Bool?
        /// The available cluster control plane log types.
        public let types: [LogType]?

        public init(enabled: Bool? = nil, types: [LogType]? = nil) {
            self.enabled = enabled
            self.types = types
        }

        private enum CodingKeys: String, CodingKey {
            case enabled = "enabled"
            case types = "types"
        }
    }

    public struct Logging: AWSEncodableShape & AWSDecodableShape {
        /// The cluster control plane logging configuration for your cluster.
        public let clusterLogging: [LogSetup]?

        public init(clusterLogging: [LogSetup]? = nil) {
            self.clusterLogging = clusterLogging
        }

        private enum CodingKeys: String, CodingKey {
            case clusterLogging = "clusterLogging"
        }
    }

    public struct MarketplaceInformation: AWSDecodableShape {
        /// The product ID from the Amazon Web Services Marketplace.
        public let productId: String?
        /// The product URL from the Amazon Web Services Marketplace.
        public let productUrl: String?

        public init(productId: String? = nil, productUrl: String? = nil) {
            self.productId = productId
            self.productUrl = productUrl
        }

        private enum CodingKeys: String, CodingKey {
            case productId = "productId"
            case productUrl = "productUrl"
        }
    }

    public struct Nodegroup: AWSDecodableShape {
        /// If the node group was deployed using a launch template with a custom AMI, then this is CUSTOM. For node groups that weren't deployed using a launch template, this is the AMI type that was specified in the node group configuration.
        public let amiType: AMITypes?
        /// The capacity type of your managed node group.
        public let capacityType: CapacityTypes?
        /// The name of your cluster.
        public let clusterName: String?
        /// The Unix epoch timestamp at object creation.
        public let createdAt: Date?
        /// If the node group wasn't deployed with a launch template, then this is the disk size in the node group configuration. If the node group was deployed with a launch template, then this is null.
        public let diskSize: Int?
        /// The health status of the node group. If there are issues with your node group's health, they are listed here.
        public let health: NodegroupHealth?
        /// If the node group wasn't deployed with a launch template, then this is the instance type that is associated with the node group. If the node group was deployed with a launch template, then this is null.
        public let instanceTypes: [String]?
        /// The Kubernetes labels applied to the nodes in the node group.  Only labels that are applied with the Amazon EKS API are shown here. There may be other Kubernetes labels applied to the nodes in this group.
        public let labels: [String: String]?
        /// If a launch template was used to create the node group, then this is the launch template that was used.
        public let launchTemplate: LaunchTemplateSpecification?
        /// The Unix epoch timestamp for the last modification to the object.
        public let modifiedAt: Date?
        /// The Amazon Resource Name (ARN) associated with the managed node group.
        public let nodegroupArn: String?
        /// The name associated with an Amazon EKS managed node group.
        public let nodegroupName: String?
        /// The IAM role associated with your node group. The Amazon EKS node kubelet daemon makes calls to Amazon Web Services APIs on your behalf. Nodes receive permissions for these API calls through an IAM instance profile and associated policies.
        public let nodeRole: String?
        /// If the node group was deployed using a launch template with a custom AMI, then this is the AMI ID that was specified in the launch template. For node groups that weren't deployed using a launch template, this is the version of the Amazon EKS optimized AMI that the node group was deployed with.
        public let releaseVersion: String?
        /// If the node group wasn't deployed with a launch template, then this is the remote access configuration that is associated with the node group. If the node group was deployed with a launch template, then this is null.
        public let remoteAccess: RemoteAccessConfig?
        /// The resources associated with the node group, such as Auto Scaling groups and security groups for remote access.
        public let resources: NodegroupResources?
        /// The scaling configuration details for the Auto Scaling group that is associated with your node group.
        public let scalingConfig: NodegroupScalingConfig?
        /// The current status of the managed node group.
        public let status: NodegroupStatus?
        /// The subnets that were specified for the Auto Scaling group that is associated with your node group.
        public let subnets: [String]?
        /// Metadata that assists with categorization and organization. Each tag consists of a key and an optional value. You define both. Tags don't propagate to any other cluster or Amazon Web Services resources.
        public let tags: [String: String]?
        /// The Kubernetes taints to be applied to the nodes in the node group when they are created. Effect is one of No_Schedule, Prefer_No_Schedule, or No_Execute. Kubernetes taints can be used together with tolerations to control how workloads are scheduled to your nodes. For more information, see Node taints on managed node groups.
        public let taints: [Taint]?
        /// The node group update configuration.
        public let updateConfig: NodegroupUpdateConfig?
        /// The Kubernetes version of the managed node group.
        public let version: String?

        public init(amiType: AMITypes? = nil, capacityType: CapacityTypes? = nil, clusterName: String? = nil, createdAt: Date? = nil, diskSize: Int? = nil, health: NodegroupHealth? = nil, instanceTypes: [String]? = nil, labels: [String: String]? = nil, launchTemplate: LaunchTemplateSpecification? = nil, modifiedAt: Date? = nil, nodegroupArn: String? = nil, nodegroupName: String? = nil, nodeRole: String? = nil, releaseVersion: String? = nil, remoteAccess: RemoteAccessConfig? = nil, resources: NodegroupResources? = nil, scalingConfig: NodegroupScalingConfig? = nil, status: NodegroupStatus? = nil, subnets: [String]? = nil, tags: [String: String]? = nil, taints: [Taint]? = nil, updateConfig: NodegroupUpdateConfig? = nil, version: String? = nil) {
            self.amiType = amiType
            self.capacityType = capacityType
            self.clusterName = clusterName
            self.createdAt = createdAt
            self.diskSize = diskSize
            self.health = health
            self.instanceTypes = instanceTypes
            self.labels = labels
            self.launchTemplate = launchTemplate
            self.modifiedAt = modifiedAt
            self.nodegroupArn = nodegroupArn
            self.nodegroupName = nodegroupName
            self.nodeRole = nodeRole
            self.releaseVersion = releaseVersion
            self.remoteAccess = remoteAccess
            self.resources = resources
            self.scalingConfig = scalingConfig
            self.status = status
            self.subnets = subnets
            self.tags = tags
            self.taints = taints
            self.updateConfig = updateConfig
            self.version = version
        }

        private enum CodingKeys: String, CodingKey {
            case amiType = "amiType"
            case capacityType = "capacityType"
            case clusterName = "clusterName"
            case createdAt = "createdAt"
            case diskSize = "diskSize"
            case health = "health"
            case instanceTypes = "instanceTypes"
            case labels = "labels"
            case launchTemplate = "launchTemplate"
            case modifiedAt = "modifiedAt"
            case nodegroupArn = "nodegroupArn"
            case nodegroupName = "nodegroupName"
            case nodeRole = "nodeRole"
            case releaseVersion = "releaseVersion"
            case remoteAccess = "remoteAccess"
            case resources = "resources"
            case scalingConfig = "scalingConfig"
            case status = "status"
            case subnets = "subnets"
            case tags = "tags"
            case taints = "taints"
            case updateConfig = "updateConfig"
            case version = "version"
        }
    }

    public struct NodegroupHealth: AWSDecodableShape {
        /// Any issues that are associated with the node group.
        public let issues: [Issue]?

        public init(issues: [Issue]? = nil) {
            self.issues = issues
        }

        private enum CodingKeys: String, CodingKey {
            case issues = "issues"
        }
    }

    public struct NodegroupResources: AWSDecodableShape {
        /// The Auto Scaling groups associated with the node group.
        public let autoScalingGroups: [AutoScalingGroup]?
        /// The remote access security group associated with the node group. This security group controls SSH access to the nodes.
        public let remoteAccessSecurityGroup: String?

        public init(autoScalingGroups: [AutoScalingGroup]? = nil, remoteAccessSecurityGroup: String? = nil) {
            self.autoScalingGroups = autoScalingGroups
            self.remoteAccessSecurityGroup = remoteAccessSecurityGroup
        }

        private enum CodingKeys: String, CodingKey {
            case autoScalingGroups = "autoScalingGroups"
            case remoteAccessSecurityGroup = "remoteAccessSecurityGroup"
        }
    }

    public struct NodegroupScalingConfig: AWSEncodableShape & AWSDecodableShape {
        /// The current number of nodes that the managed node group should maintain.  If you use the Kubernetes Cluster Autoscaler, you shouldn't change the desiredSize value directly, as this can cause the Cluster Autoscaler to suddenly scale up or scale down.  Whenever this parameter changes, the number of worker nodes in the node group is updated to the specified size. If this parameter is given a value that is smaller than the current number of running worker nodes, the necessary number of worker nodes are terminated to match the given value.  When using CloudFormation, no action occurs if you remove this parameter from your CFN template. This parameter can be different from minSize in some cases, such as when starting with extra hosts for testing. This parameter can also be different when you want to start with an estimated number of needed hosts, but let the Cluster Autoscaler reduce the number if there are too many. When the Cluster Autoscaler is used, the desiredSize parameter is altered by the Cluster Autoscaler (but can be out-of-date for short periods of time). the Cluster Autoscaler doesn't scale a managed node group lower than minSize or higher than maxSize.
        public let desiredSize: Int?
        /// The maximum number of nodes that the managed node group can scale out to. For information about the maximum number that you can specify, see Amazon EKS service quotas in the Amazon EKS User Guide.
        public let maxSize: Int?
        /// The minimum number of nodes that the managed node group can scale in to.
        public let minSize: Int?

        public init(desiredSize: Int? = nil, maxSize: Int? = nil, minSize: Int? = nil) {
            self.desiredSize = desiredSize
            self.maxSize = maxSize
            self.minSize = minSize
        }

        public func validate(name: String) throws {
            try self.validate(self.desiredSize, name: "desiredSize", parent: name, min: 0)
            try self.validate(self.maxSize, name: "maxSize", parent: name, min: 1)
            try self.validate(self.minSize, name: "minSize", parent: name, min: 0)
        }

        private enum CodingKeys: String, CodingKey {
            case desiredSize = "desiredSize"
            case maxSize = "maxSize"
            case minSize = "minSize"
        }
    }

    public struct NodegroupUpdateConfig: AWSEncodableShape & AWSDecodableShape {
        /// The maximum number of nodes unavailable at once during a version update. Nodes are updated in parallel. This value or maxUnavailablePercentage is required to have a value.The maximum number is 100.
        public let maxUnavailable: Int?
        /// The maximum percentage of nodes unavailable during a version update. This percentage of nodes are updated in parallel, up to 100 nodes at once. This value or maxUnavailable is required to have a value.
        public let maxUnavailablePercentage: Int?

        public init(maxUnavailable: Int? = nil, maxUnavailablePercentage: Int? = nil) {
            self.maxUnavailable = maxUnavailable
            self.maxUnavailablePercentage = maxUnavailablePercentage
        }

        public func validate(name: String) throws {
            try self.validate(self.maxUnavailable, name: "maxUnavailable", parent: name, min: 1)
            try self.validate(self.maxUnavailablePercentage, name: "maxUnavailablePercentage", parent: name, max: 100)
            try self.validate(self.maxUnavailablePercentage, name: "maxUnavailablePercentage", parent: name, min: 1)
        }

        private enum CodingKeys: String, CodingKey {
            case maxUnavailable = "maxUnavailable"
            case maxUnavailablePercentage = "maxUnavailablePercentage"
        }
    }

    public struct OIDC: AWSDecodableShape {
        /// The issuer URL for the OIDC identity provider.
        public let issuer: String?

        public init(issuer: String? = nil) {
            self.issuer = issuer
        }

        private enum CodingKeys: String, CodingKey {
            case issuer = "issuer"
        }
    }

    public struct OidcIdentityProviderConfig: AWSDecodableShape {
        /// This is also known as audience. The ID of the client application that makes authentication requests to the OIDC identity provider.
        public let clientId: String?
        /// The name of your cluster.
        public let clusterName: String?
        /// The JSON web token (JWT) claim that the provider uses to return your groups.
        public let groupsClaim: String?
        /// The prefix that is prepended to group claims to prevent clashes with existing names (such as system: groups). For example, the value oidc: creates group names like oidc:engineering and oidc:infra. The prefix can't contain system:
        public let groupsPrefix: String?
        /// The ARN of the configuration.
        public let identityProviderConfigArn: String?
        /// The name of the configuration.
        public let identityProviderConfigName: String?
        /// The URL of the OIDC identity provider that allows the API server to discover public signing keys for verifying tokens.
        public let issuerUrl: String?
        /// The key-value pairs that describe required claims in the identity token. If set, each claim is verified to be present in the token with a matching value.
        public let requiredClaims: [String: String]?
        /// The status of the OIDC identity provider.
        public let status: ConfigStatus?
        /// Metadata that assists with categorization and organization. Each tag consists of a key and an optional value. You define both. Tags don't propagate to any other cluster or Amazon Web Services resources.
        public let tags: [String: String]?
        /// The JSON Web token (JWT) claim that is used as the username.
        public let usernameClaim: String?
        /// The prefix that is prepended to username claims to prevent clashes with existing names. The prefix can't contain system:
        public let usernamePrefix: String?

        public init(clientId: String? = nil, clusterName: String? = nil, groupsClaim: String? = nil, groupsPrefix: String? = nil, identityProviderConfigArn: String? = nil, identityProviderConfigName: String? = nil, issuerUrl: String? = nil, requiredClaims: [String: String]? = nil, status: ConfigStatus? = nil, tags: [String: String]? = nil, usernameClaim: String? = nil, usernamePrefix: String? = nil) {
            self.clientId = clientId
            self.clusterName = clusterName
            self.groupsClaim = groupsClaim
            self.groupsPrefix = groupsPrefix
            self.identityProviderConfigArn = identityProviderConfigArn
            self.identityProviderConfigName = identityProviderConfigName
            self.issuerUrl = issuerUrl
            self.requiredClaims = requiredClaims
            self.status = status
            self.tags = tags
            self.usernameClaim = usernameClaim
            self.usernamePrefix = usernamePrefix
        }

        private enum CodingKeys: String, CodingKey {
            case clientId = "clientId"
            case clusterName = "clusterName"
            case groupsClaim = "groupsClaim"
            case groupsPrefix = "groupsPrefix"
            case identityProviderConfigArn = "identityProviderConfigArn"
            case identityProviderConfigName = "identityProviderConfigName"
            case issuerUrl = "issuerUrl"
            case requiredClaims = "requiredClaims"
            case status = "status"
            case tags = "tags"
            case usernameClaim = "usernameClaim"
            case usernamePrefix = "usernamePrefix"
        }
    }

    public struct OidcIdentityProviderConfigRequest: AWSEncodableShape {
        /// This is also known as audience. The ID for the client application that makes authentication requests to the OIDC identity provider.
        public let clientId: String
        /// The JWT claim that the provider uses to return your groups.
        public let groupsClaim: String?
        /// The prefix that is prepended to group claims to prevent clashes with existing names (such as system: groups). For example, the value oidc: will create group names like oidc:engineering and oidc:infra.
        public let groupsPrefix: String?
        /// The name of the OIDC provider configuration.
        public let identityProviderConfigName: String
        /// The URL of the OIDC identity provider that allows the API server to discover public signing keys for verifying tokens. The URL must begin with https:// and should correspond to the iss claim in the provider's OIDC ID tokens. Based on the OIDC standard, path components are allowed but query parameters are not. Typically the URL consists of only a hostname, like https://server.example.org or https://example.com. This URL should point to the level below .well-known/openid-configuration and must be publicly accessible over the internet.
        public let issuerUrl: String
        /// The key value pairs that describe required claims in the identity token. If set, each claim is verified to be present in the token with a matching value. For the maximum number of claims that you can require, see Amazon EKS service quotas in the Amazon EKS User Guide.
        public let requiredClaims: [String: String]?
        /// The JSON Web Token (JWT) claim to use as the username. The default is sub, which is expected to be a unique identifier of the end user. You can choose other claims, such as email or name, depending on the OIDC identity provider. Claims other than email are prefixed with the issuer URL to prevent naming clashes with other plug-ins.
        public let usernameClaim: String?
        /// The prefix that is prepended to username claims to prevent clashes with existing names. If you do not provide this field, and username is a value other than email, the prefix defaults to issuerurl#. You can use the value - to disable all prefixing.
        public let usernamePrefix: String?

        public init(clientId: String, groupsClaim: String? = nil, groupsPrefix: String? = nil, identityProviderConfigName: String, issuerUrl: String, requiredClaims: [String: String]? = nil, usernameClaim: String? = nil, usernamePrefix: String? = nil) {
            self.clientId = clientId
            self.groupsClaim = groupsClaim
            self.groupsPrefix = groupsPrefix
            self.identityProviderConfigName = identityProviderConfigName
            self.issuerUrl = issuerUrl
            self.requiredClaims = requiredClaims
            self.usernameClaim = usernameClaim
            self.usernamePrefix = usernamePrefix
        }

        public func validate(name: String) throws {
            try self.requiredClaims?.forEach {
                try validate($0.key, name: "requiredClaims.key", parent: name, max: 63)
                try validate($0.key, name: "requiredClaims.key", parent: name, min: 1)
                try validate($0.value, name: "requiredClaims[\"\($0.key)\"]", parent: name, max: 253)
                try validate($0.value, name: "requiredClaims[\"\($0.key)\"]", parent: name, min: 1)
            }
        }

        private enum CodingKeys: String, CodingKey {
            case clientId = "clientId"
            case groupsClaim = "groupsClaim"
            case groupsPrefix = "groupsPrefix"
            case identityProviderConfigName = "identityProviderConfigName"
            case issuerUrl = "issuerUrl"
            case requiredClaims = "requiredClaims"
            case usernameClaim = "usernameClaim"
            case usernamePrefix = "usernamePrefix"
        }
    }

    public struct OutpostConfigRequest: AWSEncodableShape {
        /// The Amazon EC2 instance type that you want to use for your local Amazon EKS cluster on Outposts. Choose an instance type based on the number of nodes that your cluster will have. For more information, see Capacity considerations in the Amazon EKS User Guide. The instance type that you specify is used for all Kubernetes control plane instances. The instance type can't be changed after cluster creation. The control plane is not automatically scaled by Amazon EKS.
        public let controlPlaneInstanceType: String
        /// An object representing the placement configuration for all the control plane instances of your local Amazon EKS cluster on an Amazon Web Services Outpost. For more information, see Capacity considerations in the Amazon EKS User Guide.
        public let controlPlanePlacement: ControlPlanePlacementRequest?
        /// The ARN of the Outpost that you want to use for your local Amazon EKS cluster on Outposts. Only a single Outpost ARN is supported.
        public let outpostArns: [String]

        public init(controlPlaneInstanceType: String, controlPlanePlacement: ControlPlanePlacementRequest? = nil, outpostArns: [String]) {
            self.controlPlaneInstanceType = controlPlaneInstanceType
            self.controlPlanePlacement = controlPlanePlacement
            self.outpostArns = outpostArns
        }

        private enum CodingKeys: String, CodingKey {
            case controlPlaneInstanceType = "controlPlaneInstanceType"
            case controlPlanePlacement = "controlPlanePlacement"
            case outpostArns = "outpostArns"
        }
    }

    public struct OutpostConfigResponse: AWSDecodableShape {
        /// The Amazon EC2 instance type used for the control plane. The instance type is the same for all control plane instances.
        public let controlPlaneInstanceType: String
        /// An object representing the placement configuration for all the control plane instances of your local Amazon EKS cluster on an Amazon Web Services Outpost. For more information, see Capacity considerations in the Amazon EKS User Guide.
        public let controlPlanePlacement: ControlPlanePlacementResponse?
        /// The ARN of the Outpost that you specified for use with your local Amazon EKS cluster on Outposts.
        public let outpostArns: [String]

        public init(controlPlaneInstanceType: String, controlPlanePlacement: ControlPlanePlacementResponse? = nil, outpostArns: [String]) {
            self.controlPlaneInstanceType = controlPlaneInstanceType
            self.controlPlanePlacement = controlPlanePlacement
            self.outpostArns = outpostArns
        }

        private enum CodingKeys: String, CodingKey {
            case controlPlaneInstanceType = "controlPlaneInstanceType"
            case controlPlanePlacement = "controlPlanePlacement"
            case outpostArns = "outpostArns"
        }
    }

    public struct PodIdentityAssociation: AWSDecodableShape {
        /// The Amazon Resource Name (ARN) of the association.
        public let associationArn: String?
        /// The ID of the association.
        public let associationId: String?
        /// The name of the cluster that the association is in.
        public let clusterName: String?
        /// The timestamp that the association was created at.
        public let createdAt: Date?
        /// The most recent timestamp that the association was modified at
        public let modifiedAt: Date?
        /// The name of the Kubernetes namespace inside the cluster to create the association in. The service account and the pods that use the service account must be in this namespace.
        public let namespace: String?
        /// The Amazon Resource Name (ARN) of the IAM role to associate with the service account. The EKS Pod Identity agent manages credentials to assume this role for applications in the containers in the pods that use this service account.
        public let roleArn: String?
        /// The name of the Kubernetes service account inside the cluster to associate the IAM credentials with.
        public let serviceAccount: String?
        /// Metadata that assists with categorization and organization. Each tag consists of a key and an optional value. You define both. Tags don't propagate to any other cluster or Amazon Web Services resources. The following basic restrictions apply to tags:   Maximum number of tags per resource – 50   For each resource, each tag key must be unique, and each tag key can have only one value.   Maximum key length – 128 Unicode characters in UTF-8   Maximum value length – 256 Unicode characters in UTF-8   If your tagging schema is used across multiple services and resources, remember that other services may have restrictions on allowed characters. Generally allowed characters are: letters, numbers, and spaces representable in UTF-8, and the following characters: + - = . _ : / @.   Tag keys and values are case-sensitive.   Do not use aws:, AWS:, or any upper or lowercase combination of such as a prefix for either keys or values as it is reserved for Amazon Web Services use. You cannot edit or delete tag keys or values with this prefix. Tags with this prefix do not count against your tags per resource limit.
        public let tags: [String: String]?

        public init(associationArn: String? = nil, associationId: String? = nil, clusterName: String? = nil, createdAt: Date? = nil, modifiedAt: Date? = nil, namespace: String? = nil, roleArn: String? = nil, serviceAccount: String? = nil, tags: [String: String]? = nil) {
            self.associationArn = associationArn
            self.associationId = associationId
            self.clusterName = clusterName
            self.createdAt = createdAt
            self.modifiedAt = modifiedAt
            self.namespace = namespace
            self.roleArn = roleArn
            self.serviceAccount = serviceAccount
            self.tags = tags
        }

        private enum CodingKeys: String, CodingKey {
            case associationArn = "associationArn"
            case associationId = "associationId"
            case clusterName = "clusterName"
            case createdAt = "createdAt"
            case modifiedAt = "modifiedAt"
            case namespace = "namespace"
            case roleArn = "roleArn"
            case serviceAccount = "serviceAccount"
            case tags = "tags"
        }
    }

    public struct PodIdentityAssociationSummary: AWSDecodableShape {
        /// The Amazon Resource Name (ARN) of the association.
        public let associationArn: String?
        /// The ID of the association.
        public let associationId: String?
        /// The name of the cluster that the association is in.
        public let clusterName: String?
        /// The name of the Kubernetes namespace inside the cluster to create the association in. The service account and the pods that use the service account must be in this namespace.
        public let namespace: String?
        /// The name of the Kubernetes service account inside the cluster to associate the IAM credentials with.
        public let serviceAccount: String?

        public init(associationArn: String? = nil, associationId: String? = nil, clusterName: String? = nil, namespace: String? = nil, serviceAccount: String? = nil) {
            self.associationArn = associationArn
            self.associationId = associationId
            self.clusterName = clusterName
            self.namespace = namespace
            self.serviceAccount = serviceAccount
        }

        private enum CodingKeys: String, CodingKey {
            case associationArn = "associationArn"
            case associationId = "associationId"
            case clusterName = "clusterName"
            case namespace = "namespace"
            case serviceAccount = "serviceAccount"
        }
    }

    public struct Provider: AWSEncodableShape & AWSDecodableShape {
        /// Amazon Resource Name (ARN) or alias of the KMS key. The KMS key must be symmetric and created in the same Amazon Web Services Region as the cluster. If the KMS key was created in a different account, the IAM principal must have access to the KMS key. For more information, see Allowing users in other accounts to use a KMS key in the Key Management Service Developer Guide.
        public let keyArn: String?

        public init(keyArn: String? = nil) {
            self.keyArn = keyArn
        }

        private enum CodingKeys: String, CodingKey {
            case keyArn = "keyArn"
        }
    }

    public struct RegisterClusterRequest: AWSEncodableShape {
        /// A unique, case-sensitive identifier that you provide to ensure
        /// the idempotency of the request.
        public let clientRequestToken: String?
        /// The configuration settings required to connect the Kubernetes cluster to the Amazon EKS control plane.
        public let connectorConfig: ConnectorConfigRequest
        /// A unique name for this cluster in your Amazon Web Services Region.
        public let name: String
        /// Metadata that assists with categorization and organization. Each tag consists of a key and an optional value. You define both. Tags don't propagate to any other cluster or Amazon Web Services resources.
        public let tags: [String: String]?

        public init(clientRequestToken: String? = RegisterClusterRequest.idempotencyToken(), connectorConfig: ConnectorConfigRequest, name: String, tags: [String: String]? = nil) {
            self.clientRequestToken = clientRequestToken
            self.connectorConfig = connectorConfig
            self.name = name
            self.tags = tags
        }

        public func validate(name: String) throws {
            try self.validate(self.name, name: "name", parent: name, max: 100)
            try self.validate(self.name, name: "name", parent: name, min: 1)
            try self.validate(self.name, name: "name", parent: name, pattern: "^[0-9A-Za-z][A-Za-z0-9\\-_]*$")
            try self.tags?.forEach {
                try validate($0.key, name: "tags.key", parent: name, max: 128)
                try validate($0.key, name: "tags.key", parent: name, min: 1)
                try validate($0.value, name: "tags[\"\($0.key)\"]", parent: name, max: 256)
            }
            try self.validate(self.tags, name: "tags", parent: name, max: 50)
            try self.validate(self.tags, name: "tags", parent: name, min: 1)
        }

        private enum CodingKeys: String, CodingKey {
            case clientRequestToken = "clientRequestToken"
            case connectorConfig = "connectorConfig"
            case name = "name"
            case tags = "tags"
        }
    }

    public struct RegisterClusterResponse: AWSDecodableShape {
        public let cluster: Cluster?

        public init(cluster: Cluster? = nil) {
            self.cluster = cluster
        }

        private enum CodingKeys: String, CodingKey {
            case cluster = "cluster"
        }
    }

    public struct RemoteAccessConfig: AWSEncodableShape & AWSDecodableShape {
        /// The Amazon EC2 SSH key name that provides access for SSH communication with the nodes in the managed node group. For more information, see Amazon EC2 key pairs and Linux instances in the Amazon Elastic Compute Cloud User Guide for Linux Instances. For Windows, an Amazon EC2 SSH key is used to obtain the RDP password. For more information, see Amazon EC2 key pairs and Windows instances in the Amazon Elastic Compute Cloud User Guide for Windows Instances.
        public let ec2SshKey: String?
        /// The security group IDs that are allowed SSH access (port 22) to the nodes. For Windows, the port is 3389. If you specify an Amazon EC2 SSH key but don't specify a source security group when you create a managed node group, then the port on the nodes is opened to the internet (0.0.0.0/0). For more information, see Security Groups for Your VPC in the Amazon Virtual Private Cloud User Guide.
        public let sourceSecurityGroups: [String]?

        public init(ec2SshKey: String? = nil, sourceSecurityGroups: [String]? = nil) {
            self.ec2SshKey = ec2SshKey
            self.sourceSecurityGroups = sourceSecurityGroups
        }

        private enum CodingKeys: String, CodingKey {
            case ec2SshKey = "ec2SshKey"
            case sourceSecurityGroups = "sourceSecurityGroups"
        }
    }

    public struct TagResourceRequest: AWSEncodableShape {
        /// The Amazon Resource Name (ARN) of the resource to add tags to.
        public let resourceArn: String
        /// Metadata that assists with categorization and organization. Each tag consists of a key and an optional value. You define both. Tags don't propagate to any other cluster or Amazon Web Services resources.
        public let tags: [String: String]

        public init(resourceArn: String, tags: [String: String]) {
            self.resourceArn = resourceArn
            self.tags = tags
        }

        public func encode(to encoder: Encoder) throws {
            let request = encoder.userInfo[.awsRequest]! as! RequestEncodingContainer
            var container = encoder.container(keyedBy: CodingKeys.self)
            request.encodePath(self.resourceArn, key: "resourceArn")
            try container.encode(self.tags, forKey: .tags)
        }

        public func validate(name: String) throws {
            try self.tags.forEach {
                try validate($0.key, name: "tags.key", parent: name, max: 128)
                try validate($0.key, name: "tags.key", parent: name, min: 1)
                try validate($0.value, name: "tags[\"\($0.key)\"]", parent: name, max: 256)
            }
            try self.validate(self.tags, name: "tags", parent: name, max: 50)
            try self.validate(self.tags, name: "tags", parent: name, min: 1)
        }

        private enum CodingKeys: String, CodingKey {
            case tags = "tags"
        }
    }

    public struct TagResourceResponse: AWSDecodableShape {
        public init() {}
    }

    public struct Taint: AWSEncodableShape & AWSDecodableShape {
        /// The effect of the taint.
        public let effect: TaintEffect?
        /// The key of the taint.
        public let key: String?
        /// The value of the taint.
        public let value: String?

        public init(effect: TaintEffect? = nil, key: String? = nil, value: String? = nil) {
            self.effect = effect
            self.key = key
            self.value = value
        }

        public func validate(name: String) throws {
            try self.validate(self.key, name: "key", parent: name, max: 63)
            try self.validate(self.key, name: "key", parent: name, min: 1)
            try self.validate(self.value, name: "value", parent: name, max: 63)
        }

        private enum CodingKeys: String, CodingKey {
            case effect = "effect"
            case key = "key"
            case value = "value"
        }
    }

    public struct UntagResourceRequest: AWSEncodableShape {
        /// The Amazon Resource Name (ARN) of the resource to delete tags from.
        public let resourceArn: String
        /// The keys of the tags to remove.
        public let tagKeys: [String]

        public init(resourceArn: String, tagKeys: [String]) {
            self.resourceArn = resourceArn
            self.tagKeys = tagKeys
        }

        public func encode(to encoder: Encoder) throws {
            let request = encoder.userInfo[.awsRequest]! as! RequestEncodingContainer
            _ = encoder.container(keyedBy: CodingKeys.self)
            request.encodePath(self.resourceArn, key: "resourceArn")
            request.encodeQuery(self.tagKeys, key: "tagKeys")
        }

        public func validate(name: String) throws {
            try self.tagKeys.forEach {
                try validate($0, name: "tagKeys[]", parent: name, max: 128)
                try validate($0, name: "tagKeys[]", parent: name, min: 1)
            }
            try self.validate(self.tagKeys, name: "tagKeys", parent: name, max: 50)
            try self.validate(self.tagKeys, name: "tagKeys", parent: name, min: 1)
        }

        private enum CodingKeys: CodingKey {}
    }

    public struct UntagResourceResponse: AWSDecodableShape {
        public init() {}
    }

    public struct Update: AWSDecodableShape {
        /// The Unix epoch timestamp at object creation.
        public let createdAt: Date?
        /// Any errors associated with a Failed update.
        public let errors: [ErrorDetail]?
        /// A UUID that is used to track the update.
        public let id: String?
        /// A key-value map that contains the parameters associated with the update.
        public let params: [UpdateParam]?
        /// The current status of the update.
        public let status: UpdateStatus?
        /// The type of the update.
        public let type: UpdateType?

        public init(createdAt: Date? = nil, errors: [ErrorDetail]? = nil, id: String? = nil, params: [UpdateParam]? = nil, status: UpdateStatus? = nil, type: UpdateType? = nil) {
            self.createdAt = createdAt
            self.errors = errors
            self.id = id
            self.params = params
            self.status = status
            self.type = type
        }

        private enum CodingKeys: String, CodingKey {
            case createdAt = "createdAt"
            case errors = "errors"
            case id = "id"
            case params = "params"
            case status = "status"
            case type = "type"
        }
    }

    public struct UpdateAccessConfigRequest: AWSEncodableShape {
        /// The desired authentication mode for the cluster.
        public let authenticationMode: AuthenticationMode?

        public init(authenticationMode: AuthenticationMode? = nil) {
            self.authenticationMode = authenticationMode
        }

        private enum CodingKeys: String, CodingKey {
            case authenticationMode = "authenticationMode"
        }
    }

    public struct UpdateAccessEntryRequest: AWSEncodableShape {
        /// A unique, case-sensitive identifier that you provide to ensure
        /// the idempotency of the request.
        public let clientRequestToken: String?
        /// The name of your cluster.
        public let clusterName: String
        /// The value for name that you've specified for kind: Group as a subject in a Kubernetes RoleBinding or ClusterRoleBinding object. Amazon EKS doesn't confirm that the value for name exists in any bindings on your cluster. You can specify one or more names. Kubernetes authorizes the principalArn of the access entry to access any cluster objects that you've specified in a Kubernetes Role or ClusterRole object that is also specified in a binding's roleRef. For more information about creating Kubernetes RoleBinding, ClusterRoleBinding, Role, or ClusterRole objects, see Using RBAC Authorization in the Kubernetes documentation. If you want Amazon EKS to authorize the principalArn (instead of, or in addition to Kubernetes authorizing the principalArn), you can associate one or more access policies to the access entry using AssociateAccessPolicy. If you associate any access policies, the principalARN has all permissions assigned in the associated access policies and all permissions in any Kubernetes Role or ClusterRole objects that the group names are bound to.
        public let kubernetesGroups: [String]?
        /// The ARN of the IAM principal for the AccessEntry.
        public let principalArn: String
        /// The username to authenticate to Kubernetes with. We recommend not specifying a username and letting Amazon EKS specify it for you. For more information about the value Amazon EKS specifies for you, or constraints before specifying your own username, see Creating access entries in the Amazon EKS User Guide.
        public let username: String?

        public init(clientRequestToken: String? = UpdateAccessEntryRequest.idempotencyToken(), clusterName: String, kubernetesGroups: [String]? = nil, principalArn: String, username: String? = nil) {
            self.clientRequestToken = clientRequestToken
            self.clusterName = clusterName
            self.kubernetesGroups = kubernetesGroups
            self.principalArn = principalArn
            self.username = username
        }

        public func encode(to encoder: Encoder) throws {
            let request = encoder.userInfo[.awsRequest]! as! RequestEncodingContainer
            var container = encoder.container(keyedBy: CodingKeys.self)
            try container.encodeIfPresent(self.clientRequestToken, forKey: .clientRequestToken)
            request.encodePath(self.clusterName, key: "clusterName")
            try container.encodeIfPresent(self.kubernetesGroups, forKey: .kubernetesGroups)
            request.encodePath(self.principalArn, key: "principalArn")
            try container.encodeIfPresent(self.username, forKey: .username)
        }

        private enum CodingKeys: String, CodingKey {
            case clientRequestToken = "clientRequestToken"
            case kubernetesGroups = "kubernetesGroups"
            case username = "username"
        }
    }

    public struct UpdateAccessEntryResponse: AWSDecodableShape {
        /// The ARN of the IAM principal for the AccessEntry.
        public let accessEntry: AccessEntry?

        public init(accessEntry: AccessEntry? = nil) {
            self.accessEntry = accessEntry
        }

        private enum CodingKeys: String, CodingKey {
            case accessEntry = "accessEntry"
        }
    }

    public struct UpdateAddonRequest: AWSEncodableShape {
        /// The name of the add-on. The name must match one of the names returned by  ListAddons .
        public let addonName: String
        /// The version of the add-on. The version must match one of the versions returned by  DescribeAddonVersions .
        public let addonVersion: String?
        /// A unique, case-sensitive identifier that you provide to ensure
        /// the idempotency of the request.
        public let clientRequestToken: String?
        /// The name of your cluster.
        public let clusterName: String
        /// The set of configuration values for the add-on that's created. The values that you provide are validated against the schema returned by DescribeAddonConfiguration.
        public let configurationValues: String?
        /// How to resolve field value conflicts for an Amazon EKS add-on if you've changed a value from the Amazon EKS default value. Conflicts are handled based on the option you choose:    None – Amazon EKS doesn't change the value. The update might fail.    Overwrite – Amazon EKS overwrites the changed value back to the Amazon EKS default value.    Preserve – Amazon EKS preserves the value. If you choose this option, we recommend that you test any field and value changes on a non-production cluster before updating the add-on on your production cluster.
        public let resolveConflicts: ResolveConflicts?
        /// The Amazon Resource Name (ARN) of an existing IAM role to bind to the add-on's service account. The role must be assigned the IAM permissions required by the add-on. If you don't specify an existing IAM role, then the add-on uses the permissions assigned to the node IAM role. For more information, see Amazon EKS node IAM role in the Amazon EKS User Guide.  To specify an existing IAM role, you must have an IAM OpenID Connect (OIDC) provider created for your cluster. For more information, see Enabling IAM roles for service accounts on your cluster in the Amazon EKS User Guide.
        public let serviceAccountRoleArn: String?

        public init(addonName: String, addonVersion: String? = nil, clientRequestToken: String? = UpdateAddonRequest.idempotencyToken(), clusterName: String, configurationValues: String? = nil, resolveConflicts: ResolveConflicts? = nil, serviceAccountRoleArn: String? = nil) {
            self.addonName = addonName
            self.addonVersion = addonVersion
            self.clientRequestToken = clientRequestToken
            self.clusterName = clusterName
            self.configurationValues = configurationValues
            self.resolveConflicts = resolveConflicts
            self.serviceAccountRoleArn = serviceAccountRoleArn
        }

        public func encode(to encoder: Encoder) throws {
            let request = encoder.userInfo[.awsRequest]! as! RequestEncodingContainer
            var container = encoder.container(keyedBy: CodingKeys.self)
            request.encodePath(self.addonName, key: "addonName")
            try container.encodeIfPresent(self.addonVersion, forKey: .addonVersion)
            try container.encodeIfPresent(self.clientRequestToken, forKey: .clientRequestToken)
            request.encodePath(self.clusterName, key: "clusterName")
            try container.encodeIfPresent(self.configurationValues, forKey: .configurationValues)
            try container.encodeIfPresent(self.resolveConflicts, forKey: .resolveConflicts)
            try container.encodeIfPresent(self.serviceAccountRoleArn, forKey: .serviceAccountRoleArn)
        }

        public func validate(name: String) throws {
            try self.validate(self.clusterName, name: "clusterName", parent: name, max: 100)
            try self.validate(self.clusterName, name: "clusterName", parent: name, min: 1)
            try self.validate(self.clusterName, name: "clusterName", parent: name, pattern: "^[0-9A-Za-z][A-Za-z0-9\\-_]*$")
            try self.validate(self.serviceAccountRoleArn, name: "serviceAccountRoleArn", parent: name, max: 255)
            try self.validate(self.serviceAccountRoleArn, name: "serviceAccountRoleArn", parent: name, min: 1)
        }

        private enum CodingKeys: String, CodingKey {
            case addonVersion = "addonVersion"
            case clientRequestToken = "clientRequestToken"
            case configurationValues = "configurationValues"
            case resolveConflicts = "resolveConflicts"
            case serviceAccountRoleArn = "serviceAccountRoleArn"
        }
    }

    public struct UpdateAddonResponse: AWSDecodableShape {
        public let update: Update?

        public init(update: Update? = nil) {
            self.update = update
        }

        private enum CodingKeys: String, CodingKey {
            case update = "update"
        }
    }

    public struct UpdateClusterConfigRequest: AWSEncodableShape {
        /// The access configuration for the cluster.
        public let accessConfig: UpdateAccessConfigRequest?
        /// A unique, case-sensitive identifier that you provide to ensure
        /// the idempotency of the request.
        public let clientRequestToken: String?
        /// Enable or disable exporting the Kubernetes control plane logs for your cluster to CloudWatch Logs. By default, cluster control plane logs aren't exported to CloudWatch Logs. For more information, see Amazon EKS cluster control plane logs in the  Amazon EKS User Guide .  CloudWatch Logs ingestion, archive storage, and data scanning rates apply to exported control plane logs. For more information, see CloudWatch Pricing.
        public let logging: Logging?
        /// The name of the Amazon EKS cluster to update.
        public let name: String
        public let resourcesVpcConfig: VpcConfigRequest?

        public init(accessConfig: UpdateAccessConfigRequest? = nil, clientRequestToken: String? = UpdateClusterConfigRequest.idempotencyToken(), logging: Logging? = nil, name: String, resourcesVpcConfig: VpcConfigRequest? = nil) {
            self.accessConfig = accessConfig
            self.clientRequestToken = clientRequestToken
            self.logging = logging
            self.name = name
            self.resourcesVpcConfig = resourcesVpcConfig
        }

        public func encode(to encoder: Encoder) throws {
            let request = encoder.userInfo[.awsRequest]! as! RequestEncodingContainer
            var container = encoder.container(keyedBy: CodingKeys.self)
            try container.encodeIfPresent(self.accessConfig, forKey: .accessConfig)
            try container.encodeIfPresent(self.clientRequestToken, forKey: .clientRequestToken)
            try container.encodeIfPresent(self.logging, forKey: .logging)
            request.encodePath(self.name, key: "name")
            try container.encodeIfPresent(self.resourcesVpcConfig, forKey: .resourcesVpcConfig)
        }

        private enum CodingKeys: String, CodingKey {
            case accessConfig = "accessConfig"
            case clientRequestToken = "clientRequestToken"
            case logging = "logging"
            case resourcesVpcConfig = "resourcesVpcConfig"
        }
    }

    public struct UpdateClusterConfigResponse: AWSDecodableShape {
        public let update: Update?

        public init(update: Update? = nil) {
            self.update = update
        }

        private enum CodingKeys: String, CodingKey {
            case update = "update"
        }
    }

    public struct UpdateClusterVersionRequest: AWSEncodableShape {
        /// A unique, case-sensitive identifier that you provide to ensure
        /// the idempotency of the request.
        public let clientRequestToken: String?
        /// The name of the Amazon EKS cluster to update.
        public let name: String
        /// The desired Kubernetes version following a successful update.
        public let version: String

        public init(clientRequestToken: String? = UpdateClusterVersionRequest.idempotencyToken(), name: String, version: String) {
            self.clientRequestToken = clientRequestToken
            self.name = name
            self.version = version
        }

        public func encode(to encoder: Encoder) throws {
            let request = encoder.userInfo[.awsRequest]! as! RequestEncodingContainer
            var container = encoder.container(keyedBy: CodingKeys.self)
            try container.encodeIfPresent(self.clientRequestToken, forKey: .clientRequestToken)
            request.encodePath(self.name, key: "name")
            try container.encode(self.version, forKey: .version)
        }

        private enum CodingKeys: String, CodingKey {
            case clientRequestToken = "clientRequestToken"
            case version = "version"
        }
    }

    public struct UpdateClusterVersionResponse: AWSDecodableShape {
        /// The full description of the specified update
        public let update: Update?

        public init(update: Update? = nil) {
            self.update = update
        }

        private enum CodingKeys: String, CodingKey {
            case update = "update"
        }
    }

    public struct UpdateEksAnywhereSubscriptionRequest: AWSEncodableShape {
        /// A boolean indicating whether or not to automatically renew the subscription.
        public let autoRenew: Bool
        /// Unique, case-sensitive identifier to ensure the idempotency of the request.
        public let clientRequestToken: String?
        /// The ID of the subscription.
        public let id: String

        public init(autoRenew: Bool = false, clientRequestToken: String? = UpdateEksAnywhereSubscriptionRequest.idempotencyToken(), id: String) {
            self.autoRenew = autoRenew
            self.clientRequestToken = clientRequestToken
            self.id = id
        }

        public func encode(to encoder: Encoder) throws {
            let request = encoder.userInfo[.awsRequest]! as! RequestEncodingContainer
            var container = encoder.container(keyedBy: CodingKeys.self)
            try container.encode(self.autoRenew, forKey: .autoRenew)
            try container.encodeIfPresent(self.clientRequestToken, forKey: .clientRequestToken)
            request.encodePath(self.id, key: "id")
        }

        private enum CodingKeys: String, CodingKey {
            case autoRenew = "autoRenew"
            case clientRequestToken = "clientRequestToken"
        }
    }

    public struct UpdateEksAnywhereSubscriptionResponse: AWSDecodableShape {
        /// The full description of the updated subscription.
        public let subscription: EksAnywhereSubscription?

        public init(subscription: EksAnywhereSubscription? = nil) {
            self.subscription = subscription
        }

        private enum CodingKeys: String, CodingKey {
            case subscription = "subscription"
        }
    }

    public struct UpdateLabelsPayload: AWSEncodableShape {
        /// The Kubernetes labels to add or update.
        public let addOrUpdateLabels: [String: String]?
        /// The Kubernetes labels to remove.
        public let removeLabels: [String]?

        public init(addOrUpdateLabels: [String: String]? = nil, removeLabels: [String]? = nil) {
            self.addOrUpdateLabels = addOrUpdateLabels
            self.removeLabels = removeLabels
        }

        public func validate(name: String) throws {
            try self.addOrUpdateLabels?.forEach {
                try validate($0.key, name: "addOrUpdateLabels.key", parent: name, max: 63)
                try validate($0.key, name: "addOrUpdateLabels.key", parent: name, min: 1)
                try validate($0.value, name: "addOrUpdateLabels[\"\($0.key)\"]", parent: name, max: 63)
                try validate($0.value, name: "addOrUpdateLabels[\"\($0.key)\"]", parent: name, min: 1)
            }
        }

        private enum CodingKeys: String, CodingKey {
            case addOrUpdateLabels = "addOrUpdateLabels"
            case removeLabels = "removeLabels"
        }
    }

    public struct UpdateNodegroupConfigRequest: AWSEncodableShape {
        /// A unique, case-sensitive identifier that you provide to ensure
        /// the idempotency of the request.
        public let clientRequestToken: String?
        /// The name of your cluster.
        public let clusterName: String
        /// The Kubernetes labels to apply to the nodes in the node group after the update.
        public let labels: UpdateLabelsPayload?
        /// The name of the managed node group to update.
        public let nodegroupName: String
        /// The scaling configuration details for the Auto Scaling group after the update.
        public let scalingConfig: NodegroupScalingConfig?
        /// The Kubernetes taints to be applied to the nodes in the node group after the update. For more information, see Node taints on managed node groups.
        public let taints: UpdateTaintsPayload?
        /// The node group update configuration.
        public let updateConfig: NodegroupUpdateConfig?

        public init(clientRequestToken: String? = UpdateNodegroupConfigRequest.idempotencyToken(), clusterName: String, labels: UpdateLabelsPayload? = nil, nodegroupName: String, scalingConfig: NodegroupScalingConfig? = nil, taints: UpdateTaintsPayload? = nil, updateConfig: NodegroupUpdateConfig? = nil) {
            self.clientRequestToken = clientRequestToken
            self.clusterName = clusterName
            self.labels = labels
            self.nodegroupName = nodegroupName
            self.scalingConfig = scalingConfig
            self.taints = taints
            self.updateConfig = updateConfig
        }

        public func encode(to encoder: Encoder) throws {
            let request = encoder.userInfo[.awsRequest]! as! RequestEncodingContainer
            var container = encoder.container(keyedBy: CodingKeys.self)
            try container.encodeIfPresent(self.clientRequestToken, forKey: .clientRequestToken)
            request.encodePath(self.clusterName, key: "clusterName")
            try container.encodeIfPresent(self.labels, forKey: .labels)
            request.encodePath(self.nodegroupName, key: "nodegroupName")
            try container.encodeIfPresent(self.scalingConfig, forKey: .scalingConfig)
            try container.encodeIfPresent(self.taints, forKey: .taints)
            try container.encodeIfPresent(self.updateConfig, forKey: .updateConfig)
        }

        public func validate(name: String) throws {
            try self.labels?.validate(name: "\(name).labels")
            try self.scalingConfig?.validate(name: "\(name).scalingConfig")
            try self.taints?.validate(name: "\(name).taints")
            try self.updateConfig?.validate(name: "\(name).updateConfig")
        }

        private enum CodingKeys: String, CodingKey {
            case clientRequestToken = "clientRequestToken"
            case labels = "labels"
            case scalingConfig = "scalingConfig"
            case taints = "taints"
            case updateConfig = "updateConfig"
        }
    }

    public struct UpdateNodegroupConfigResponse: AWSDecodableShape {
        public let update: Update?

        public init(update: Update? = nil) {
            self.update = update
        }

        private enum CodingKeys: String, CodingKey {
            case update = "update"
        }
    }

    public struct UpdateNodegroupVersionRequest: AWSEncodableShape {
        /// A unique, case-sensitive identifier that you provide to ensure
        /// the idempotency of the request.
        public let clientRequestToken: String?
        /// The name of your cluster.
        public let clusterName: String
        /// Force the update if any Pod on the existing node group can't be drained due to a Pod disruption budget issue. If an update fails because all Pods can't be drained, you can force the update after it fails to terminate the old node whether or not any Pod is running on the node.
        public let force: Bool?
        /// An object representing a node group's launch template specification. You can only update a node group using a launch template if the node group was originally deployed with a launch template.
        public let launchTemplate: LaunchTemplateSpecification?
        /// The name of the managed node group to update.
        public let nodegroupName: String
        /// The AMI version of the Amazon EKS optimized AMI to use for the update. By default, the latest available AMI version for the node group's Kubernetes version is used. For information about Linux versions, see Amazon EKS optimized Amazon Linux AMI versions in the Amazon EKS User Guide. Amazon EKS managed node groups support the November 2022 and later releases of the Windows AMIs. For information about Windows versions, see Amazon EKS optimized Windows AMI versions in the Amazon EKS User Guide. If you specify launchTemplate, and your launch template uses a custom AMI, then don't specify  releaseVersion, or the node group  update will fail. For more information about using launch templates with Amazon EKS, see Launch template support in the Amazon EKS User Guide.
        public let releaseVersion: String?
        /// The Kubernetes version to update to. If no version is specified, then the Kubernetes version of the node group does not change. You can specify the Kubernetes version of the cluster to update the node group to the latest AMI version of the cluster's Kubernetes version. If you specify launchTemplate, and your launch template uses a custom AMI, then don't specify  version, or the node group  update will fail. For more information about using launch templates with Amazon EKS, see Launch template support in the Amazon EKS User Guide.
        public let version: String?

        public init(clientRequestToken: String? = UpdateNodegroupVersionRequest.idempotencyToken(), clusterName: String, force: Bool? = nil, launchTemplate: LaunchTemplateSpecification? = nil, nodegroupName: String, releaseVersion: String? = nil, version: String? = nil) {
            self.clientRequestToken = clientRequestToken
            self.clusterName = clusterName
            self.force = force
            self.launchTemplate = launchTemplate
            self.nodegroupName = nodegroupName
            self.releaseVersion = releaseVersion
            self.version = version
        }

        public func encode(to encoder: Encoder) throws {
            let request = encoder.userInfo[.awsRequest]! as! RequestEncodingContainer
            var container = encoder.container(keyedBy: CodingKeys.self)
            try container.encodeIfPresent(self.clientRequestToken, forKey: .clientRequestToken)
            request.encodePath(self.clusterName, key: "clusterName")
            try container.encodeIfPresent(self.force, forKey: .force)
            try container.encodeIfPresent(self.launchTemplate, forKey: .launchTemplate)
            request.encodePath(self.nodegroupName, key: "nodegroupName")
            try container.encodeIfPresent(self.releaseVersion, forKey: .releaseVersion)
            try container.encodeIfPresent(self.version, forKey: .version)
        }

        private enum CodingKeys: String, CodingKey {
            case clientRequestToken = "clientRequestToken"
            case force = "force"
            case launchTemplate = "launchTemplate"
            case releaseVersion = "releaseVersion"
            case version = "version"
        }
    }

    public struct UpdateNodegroupVersionResponse: AWSDecodableShape {
        public let update: Update?

        public init(update: Update? = nil) {
            self.update = update
        }

        private enum CodingKeys: String, CodingKey {
            case update = "update"
        }
    }

    public struct UpdateParam: AWSDecodableShape {
        /// The keys associated with an update request.
        public let type: UpdateParamType?
        /// The value of the keys submitted as part of an update request.
        public let value: String?

        public init(type: UpdateParamType? = nil, value: String? = nil) {
            self.type = type
            self.value = value
        }

        private enum CodingKeys: String, CodingKey {
            case type = "type"
            case value = "value"
        }
    }

    public struct UpdatePodIdentityAssociationRequest: AWSEncodableShape {
        /// The ID of the association to be updated.
        public let associationId: String
        /// A unique, case-sensitive identifier that you provide to ensure
        /// the idempotency of the request.
        public let clientRequestToken: String?
        /// The name of the cluster that you want to update the association in.
        public let clusterName: String
        /// The new IAM role to change the
        public let roleArn: String?

        public init(associationId: String, clientRequestToken: String? = UpdatePodIdentityAssociationRequest.idempotencyToken(), clusterName: String, roleArn: String? = nil) {
            self.associationId = associationId
            self.clientRequestToken = clientRequestToken
            self.clusterName = clusterName
            self.roleArn = roleArn
        }

        public func encode(to encoder: Encoder) throws {
            let request = encoder.userInfo[.awsRequest]! as! RequestEncodingContainer
            var container = encoder.container(keyedBy: CodingKeys.self)
            request.encodePath(self.associationId, key: "associationId")
            try container.encodeIfPresent(self.clientRequestToken, forKey: .clientRequestToken)
            request.encodePath(self.clusterName, key: "clusterName")
            try container.encodeIfPresent(self.roleArn, forKey: .roleArn)
        }

        private enum CodingKeys: String, CodingKey {
            case clientRequestToken = "clientRequestToken"
            case roleArn = "roleArn"
        }
    }

    public struct UpdatePodIdentityAssociationResponse: AWSDecodableShape {
        /// The full description of the EKS Pod Identity association that was updated.
        public let association: PodIdentityAssociation?

        public init(association: PodIdentityAssociation? = nil) {
            self.association = association
        }

        private enum CodingKeys: String, CodingKey {
            case association = "association"
        }
    }

    public struct UpdateTaintsPayload: AWSEncodableShape {
        /// Kubernetes taints to be added or updated.
        public let addOrUpdateTaints: [Taint]?
        /// Kubernetes taints to remove.
        public let removeTaints: [Taint]?

        public init(addOrUpdateTaints: [Taint]? = nil, removeTaints: [Taint]? = nil) {
            self.addOrUpdateTaints = addOrUpdateTaints
            self.removeTaints = removeTaints
        }

        public func validate(name: String) throws {
            try self.addOrUpdateTaints?.forEach {
                try $0.validate(name: "\(name).addOrUpdateTaints[]")
            }
            try self.removeTaints?.forEach {
                try $0.validate(name: "\(name).removeTaints[]")
            }
        }

        private enum CodingKeys: String, CodingKey {
            case addOrUpdateTaints = "addOrUpdateTaints"
            case removeTaints = "removeTaints"
        }
    }

    public struct VpcConfigRequest: AWSEncodableShape {
        /// Set this value to true to enable private access for your cluster's Kubernetes API server endpoint. If you enable private access, Kubernetes API requests from within your cluster's VPC use the private VPC endpoint. The default value for this parameter is false, which disables private access for your Kubernetes API server. If you disable private access and you have nodes or Fargate pods in the cluster, then ensure that publicAccessCidrs includes the necessary CIDR blocks for communication with the nodes or Fargate pods. For more information, see Amazon EKS cluster endpoint access control in the  Amazon EKS User Guide .
        public let endpointPrivateAccess: Bool?
        /// Set this value to false to disable public access to your cluster's Kubernetes API server endpoint. If you disable public access, your cluster's Kubernetes API server can only receive requests from within the cluster VPC. The default value for this parameter is true, which enables public access for your Kubernetes API server. For more information, see Amazon EKS cluster endpoint access control in the  Amazon EKS User Guide .
        public let endpointPublicAccess: Bool?
        /// The CIDR blocks that are allowed access to your cluster's public Kubernetes API server endpoint. Communication to the endpoint from addresses outside of the CIDR blocks that you specify is denied. The default value is 0.0.0.0/0. If you've disabled private endpoint access, make sure that you specify the necessary CIDR blocks for every node and Fargate Pod in the cluster. For more information, see Amazon EKS cluster endpoint access control in the  Amazon EKS User Guide .
        public let publicAccessCidrs: [String]?
        /// Specify one or more security groups for the cross-account elastic network interfaces that Amazon EKS creates to use that allow communication between your nodes and the Kubernetes control plane. If you don't specify any security groups, then familiarize yourself with the difference between Amazon EKS defaults for clusters deployed with Kubernetes. For more information, see Amazon EKS security group considerations in the  Amazon EKS User Guide .
        public let securityGroupIds: [String]?
        /// Specify subnets for your Amazon EKS nodes. Amazon EKS creates cross-account elastic network interfaces in these subnets to allow communication between your nodes and the Kubernetes control plane.
        public let subnetIds: [String]?

        public init(endpointPrivateAccess: Bool? = nil, endpointPublicAccess: Bool? = nil, publicAccessCidrs: [String]? = nil, securityGroupIds: [String]? = nil, subnetIds: [String]? = nil) {
            self.endpointPrivateAccess = endpointPrivateAccess
            self.endpointPublicAccess = endpointPublicAccess
            self.publicAccessCidrs = publicAccessCidrs
            self.securityGroupIds = securityGroupIds
            self.subnetIds = subnetIds
        }

        private enum CodingKeys: String, CodingKey {
            case endpointPrivateAccess = "endpointPrivateAccess"
            case endpointPublicAccess = "endpointPublicAccess"
            case publicAccessCidrs = "publicAccessCidrs"
            case securityGroupIds = "securityGroupIds"
            case subnetIds = "subnetIds"
        }
    }

    public struct VpcConfigResponse: AWSDecodableShape {
        /// The cluster security group that was created by Amazon EKS for the cluster. Managed node groups use this security group for control-plane-to-data-plane communication.
        public let clusterSecurityGroupId: String?
        /// This parameter indicates whether the Amazon EKS private API server endpoint is enabled. If the Amazon EKS private API server endpoint is enabled, Kubernetes API requests that originate from within your cluster's VPC use the private VPC endpoint instead of traversing the internet. If this value is disabled and you have nodes or Fargate pods in the cluster, then ensure that publicAccessCidrs includes the necessary CIDR blocks for communication with the nodes or Fargate pods. For more information, see Amazon EKS cluster endpoint access control in the  Amazon EKS User Guide .
        public let endpointPrivateAccess: Bool?
        /// Whether the public API server endpoint is enabled.
        public let endpointPublicAccess: Bool?
        /// The CIDR blocks that are allowed access to your cluster's public Kubernetes API server endpoint.
        public let publicAccessCidrs: [String]?
        /// The security groups associated with the cross-account elastic network interfaces that are used to allow communication between your nodes and the Kubernetes control plane.
        public let securityGroupIds: [String]?
        /// The subnets associated with your cluster.
        public let subnetIds: [String]?
        /// The VPC associated with your cluster.
        public let vpcId: String?

        public init(clusterSecurityGroupId: String? = nil, endpointPrivateAccess: Bool? = nil, endpointPublicAccess: Bool? = nil, publicAccessCidrs: [String]? = nil, securityGroupIds: [String]? = nil, subnetIds: [String]? = nil, vpcId: String? = nil) {
            self.clusterSecurityGroupId = clusterSecurityGroupId
            self.endpointPrivateAccess = endpointPrivateAccess
            self.endpointPublicAccess = endpointPublicAccess
            self.publicAccessCidrs = publicAccessCidrs
            self.securityGroupIds = securityGroupIds
            self.subnetIds = subnetIds
            self.vpcId = vpcId
        }

        private enum CodingKeys: String, CodingKey {
            case clusterSecurityGroupId = "clusterSecurityGroupId"
            case endpointPrivateAccess = "endpointPrivateAccess"
            case endpointPublicAccess = "endpointPublicAccess"
            case publicAccessCidrs = "publicAccessCidrs"
            case securityGroupIds = "securityGroupIds"
            case subnetIds = "subnetIds"
            case vpcId = "vpcId"
        }
    }
}

// MARK: - Errors

/// Error enum for EKS
public struct EKSErrorType: AWSErrorType {
    enum Code: String {
        case accessDeniedException = "AccessDeniedException"
        case badRequestException = "BadRequestException"
        case clientException = "ClientException"
        case invalidParameterException = "InvalidParameterException"
        case invalidRequestException = "InvalidRequestException"
        case notFoundException = "NotFoundException"
        case resourceInUseException = "ResourceInUseException"
        case resourceLimitExceededException = "ResourceLimitExceededException"
        case resourceNotFoundException = "ResourceNotFoundException"
        case resourcePropagationDelayException = "ResourcePropagationDelayException"
        case serverException = "ServerException"
        case serviceUnavailableException = "ServiceUnavailableException"
        case unsupportedAvailabilityZoneException = "UnsupportedAvailabilityZoneException"
    }

    private let error: Code
    public let context: AWSErrorContext?

    /// initialize EKS
    public init?(errorCode: String, context: AWSErrorContext) {
        guard let error = Code(rawValue: errorCode) else { return nil }
        self.error = error
        self.context = context
    }

    internal init(_ error: Code) {
        self.error = error
        self.context = nil
    }

    /// return error code string
    public var errorCode: String { self.error.rawValue }

    /// You don't have permissions to perform the requested operation. The IAM principal making the request must have at least one IAM permissions policy attached that grants the required permissions. For more information, see Access management in the IAM User Guide.
    public static var accessDeniedException: Self { .init(.accessDeniedException) }
    /// This exception is thrown if the request contains a semantic error. The precise meaning will depend on the API, and will be documented in the error message.
    public static var badRequestException: Self { .init(.badRequestException) }
    /// These errors are usually caused by a client action. Actions can include using an action or resource on behalf of an IAM principal that doesn't have permissions to use the action or resource or specifying an identifier that is not valid.
    public static var clientException: Self { .init(.clientException) }
    /// The specified parameter is invalid. Review the available parameters for the API request.
    public static var invalidParameterException: Self { .init(.invalidParameterException) }
    /// The request is invalid given the state of the cluster. Check the state of the cluster and the associated operations.
    public static var invalidRequestException: Self { .init(.invalidRequestException) }
    /// A service resource associated with the request could not be found. Clients should not retry such requests.
    public static var notFoundException: Self { .init(.notFoundException) }
    /// The specified resource is in use.
    public static var resourceInUseException: Self { .init(.resourceInUseException) }
    /// You have encountered a service limit on the specified resource.
    public static var resourceLimitExceededException: Self { .init(.resourceLimitExceededException) }
    /// The specified resource could not be found. You can view your available clusters with ListClusters. You can view your available managed node groups with ListNodegroups. Amazon EKS clusters and node groups are Amazon Web Services Region specific.
    public static var resourceNotFoundException: Self { .init(.resourceNotFoundException) }
    /// Required resources (such as service-linked roles) were created and are still propagating. Retry later.
    public static var resourcePropagationDelayException: Self { .init(.resourcePropagationDelayException) }
    /// These errors are usually caused by a server-side issue.
    public static var serverException: Self { .init(.serverException) }
    /// The service is unavailable. Back off and retry the operation.
    public static var serviceUnavailableException: Self { .init(.serviceUnavailableException) }
    /// At least one of your specified cluster subnets is in an Availability Zone that does not support Amazon EKS. The exception output specifies the supported Availability Zones for your account, from which you can choose subnets for your cluster.
    public static var unsupportedAvailabilityZoneException: Self { .init(.unsupportedAvailabilityZoneException) }
}

extension EKSErrorType: Equatable {
    public static func == (lhs: EKSErrorType, rhs: EKSErrorType) -> Bool {
        lhs.error == rhs.error
    }
}

extension EKSErrorType: CustomStringConvertible {
    public var description: String {
        return "\(self.error.rawValue): \(self.message ?? "")"
    }
}
