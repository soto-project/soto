//===----------------------------------------------------------------------===//
//
// This source file is part of the Soto for AWS open source project
//
// Copyright (c) 2017-2024 the Soto project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
// See CONTRIBUTORS.txt for the list of Soto project authors
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by https://github.com/soto-project/soto-codegenerator.
// DO NOT EDIT.

#if canImport(FoundationEssentials)
import FoundationEssentials
#else
import Foundation
#endif
@_exported import SotoCore

/// Service object for interacting with AWS IoTManagedIntegrations service.
///
/// Managed integrations is a feature of AWS IoT Device Management that enables developers to quickly build innovative IoT solutions. Customers can use managed integrations to automate device setup workflows and support interoperability across many devices, regardless of device vendor or connectivity protocol. This allows developers to use a single user-interface to control, manage, and operate a range of devices.
public struct IoTManagedIntegrations: AWSService {
    // MARK: Member variables

    /// Client used for communication with AWS
    public let client: AWSClient
    /// Service configuration
    public let config: AWSServiceConfig

    // MARK: Initialization

    /// Initialize the IoTManagedIntegrations client
    /// - parameters:
    ///     - client: AWSClient used to process requests
    ///     - region: Region of server you want to communicate with. This will override the partition parameter.
    ///     - partition: AWS partition where service resides, standard (.aws), china (.awscn), government (.awsusgov).
    ///     - endpoint: Custom endpoint URL to use instead of standard AWS servers
    ///     - middleware: Middleware chain used to edit requests before they are sent and responses before they are decoded 
    ///     - timeout: Timeout value for HTTP requests
    ///     - byteBufferAllocator: Allocator for ByteBuffers
    ///     - options: Service options
    public init(
        client: AWSClient,
        region: SotoCore.Region? = nil,
        partition: AWSPartition = .aws,
        endpoint: String? = nil,
        middleware: AWSMiddlewareProtocol? = nil,
        timeout: TimeAmount? = nil,
        byteBufferAllocator: ByteBufferAllocator = ByteBufferAllocator(),
        options: AWSServiceConfig.Options = []
    ) {
        self.client = client
        self.config = AWSServiceConfig(
            region: region,
            partition: region?.partition ?? partition,
            serviceName: "IoTManagedIntegrations",
            serviceIdentifier: "api.iotmanagedintegrations",
            signingName: "iotmanagedintegrations",
            serviceProtocol: .restjson,
            apiVersion: "2025-03-03",
            endpoint: endpoint,
            errorType: IoTManagedIntegrationsErrorType.self,
            middleware: middleware,
            timeout: timeout,
            byteBufferAllocator: byteBufferAllocator,
            options: options
        )
    }





    // MARK: API Calls

    /// Create a product credential locker. This operation will trigger the creation of all the manufacturing resources including the Wi-Fi setup key pair and device certificate.
    @Sendable
    @inlinable
    public func createCredentialLocker(_ input: CreateCredentialLockerRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> CreateCredentialLockerResponse {
        try await self.client.execute(
            operation: "CreateCredentialLocker", 
            path: "/credential-lockers", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Create a product credential locker. This operation will trigger the creation of all the manufacturing resources including the Wi-Fi setup key pair and device certificate.
    ///
    /// Parameters:
    ///   - clientToken: An idempotency token. If you retry a request that completed successfully initially using the same client token and parameters, then the retry attempt will succeed without performing any further actions.
    ///   - name: The name of the credential locker.
    ///   - tags: A set of key/value pairs that are used to manage the credential locker.
    ///   - logger: Logger use during operation
    @inlinable
    public func createCredentialLocker(
        clientToken: String? = CreateCredentialLockerRequest.idempotencyToken(),
        name: String? = nil,
        tags: [String: String]? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> CreateCredentialLockerResponse {
        let input = CreateCredentialLockerRequest(
            clientToken: clientToken, 
            name: name, 
            tags: tags
        )
        return try await self.createCredentialLocker(input, logger: logger)
    }

    ///  Create a destination. IoT managed integrations uses the destination to determine where to deliver notifications for a device.
    @Sendable
    @inlinable
    public func createDestination(_ input: CreateDestinationRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> CreateDestinationResponse {
        try await self.client.execute(
            operation: "CreateDestination", 
            path: "/destinations", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    ///  Create a destination. IoT managed integrations uses the destination to determine where to deliver notifications for a device.
    ///
    /// Parameters:
    ///   - clientToken: An idempotency token. If you retry a request that completed successfully initially using the same client token and parameters, then the retry attempt will succeed without performing any further actions.
    ///   - deliveryDestinationArn: The Amazon Resource Name (ARN) of the customer-managed destination.
    ///   - deliveryDestinationType: The destination type for the customer-managed destination.
    ///   - description: The description of the customer-managed destination.
    ///   - name: The name of the customer-managed destination.
    ///   - roleArn: The Amazon Resource Name (ARN) of the delivery destination role.
    ///   - tags: A set of key/value pairs that are used to manage the destination.
    ///   - logger: Logger use during operation
    @inlinable
    public func createDestination(
        clientToken: String? = CreateDestinationRequest.idempotencyToken(),
        deliveryDestinationArn: String,
        deliveryDestinationType: DeliveryDestinationType,
        description: String? = nil,
        name: String,
        roleArn: String,
        tags: [String: String]? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> CreateDestinationResponse {
        let input = CreateDestinationRequest(
            clientToken: clientToken, 
            deliveryDestinationArn: deliveryDestinationArn, 
            deliveryDestinationType: deliveryDestinationType, 
            description: description, 
            name: name, 
            roleArn: roleArn, 
            tags: tags
        )
        return try await self.createDestination(input, logger: logger)
    }

    /// Set the event log configuration for the account, resource type, or specific resource.
    @Sendable
    @inlinable
    public func createEventLogConfiguration(_ input: CreateEventLogConfigurationRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> CreateEventLogConfigurationResponse {
        try await self.client.execute(
            operation: "CreateEventLogConfiguration", 
            path: "/event-log-configurations", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Set the event log configuration for the account, resource type, or specific resource.
    ///
    /// Parameters:
    ///   - clientToken: An idempotency token. If you retry a request that completed successfully initially using the same client token and parameters, then the retry attempt will succeed without performing any further actions.
    ///   - eventLogLevel: The logging level for the event log configuration.
    ///   - resourceId: The identifier of the resource for the event log configuration.
    ///   - resourceType: The type of resource for the event log configuration.
    ///   - logger: Logger use during operation
    @inlinable
    public func createEventLogConfiguration(
        clientToken: String? = CreateEventLogConfigurationRequest.idempotencyToken(),
        eventLogLevel: LogLevel,
        resourceId: String? = nil,
        resourceType: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> CreateEventLogConfigurationResponse {
        let input = CreateEventLogConfigurationRequest(
            clientToken: clientToken, 
            eventLogLevel: eventLogLevel, 
            resourceId: resourceId, 
            resourceType: resourceType
        )
        return try await self.createEventLogConfiguration(input, logger: logger)
    }

    /// Creates a managed thing. A managed thing contains the device identifier, protocol supported, and capabilities of the device in a protocol-specific format.
    @Sendable
    @inlinable
    public func createManagedThing(_ input: CreateManagedThingRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> CreateManagedThingResponse {
        try await self.client.execute(
            operation: "CreateManagedThing", 
            path: "/managed-things", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Creates a managed thing. A managed thing contains the device identifier, protocol supported, and capabilities of the device in a protocol-specific format.
    ///
    /// Parameters:
    ///   - authenticationMaterial: The authentication material defining the device connectivity setup requests. The authentication materials used are the device bar code.
    ///   - authenticationMaterialType: The type of authentication material used for device connectivity setup requests.
    ///   - brand: The brand of the device.
    ///   - capabilities: The capabilities of the device such as light bulb.
    ///   - capabilityReport: A report of the capabilities for the managed thing.
    ///   - classification: The classification of the managed thing such as light bulb or thermostat.
    ///   - clientToken: An idempotency token. If you retry a request that completed successfully initially using the same client token and parameters, then the retry attempt will succeed without performing any further actions.
    ///   - credentialLockerId: The identifier of the credential for the managed thing.
    ///   - metaData: The metadata for the managed thing.
    ///   - model: The model of the device.
    ///   - name: The name of the managed thing representing the physical device.
    ///   - owner: Owner of the device, usually an indication of whom the device belongs to. This value should not contain personal identifiable information.
    ///   - role: The type of device used. This will be the hub controller, cloud device, or AWS IoT device.
    ///   - serialNumber: The serial number of the device.
    ///   - tags: A set of key/value pairs that are used to manage the managed thing.
    ///   - logger: Logger use during operation
    @inlinable
    public func createManagedThing(
        authenticationMaterial: String,
        authenticationMaterialType: AuthMaterialType,
        brand: String? = nil,
        capabilities: String? = nil,
        capabilityReport: CapabilityReport? = nil,
        classification: String? = nil,
        clientToken: String? = CreateManagedThingRequest.idempotencyToken(),
        credentialLockerId: String? = nil,
        metaData: [String: String]? = nil,
        model: String? = nil,
        name: String? = nil,
        owner: String? = nil,
        role: Role,
        serialNumber: String? = nil,
        tags: [String: String]? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> CreateManagedThingResponse {
        let input = CreateManagedThingRequest(
            authenticationMaterial: authenticationMaterial, 
            authenticationMaterialType: authenticationMaterialType, 
            brand: brand, 
            capabilities: capabilities, 
            capabilityReport: capabilityReport, 
            classification: classification, 
            clientToken: clientToken, 
            credentialLockerId: credentialLockerId, 
            metaData: metaData, 
            model: model, 
            name: name, 
            owner: owner, 
            role: role, 
            serialNumber: serialNumber, 
            tags: tags
        )
        return try await self.createManagedThing(input, logger: logger)
    }

    /// Creates a notification configuration. A configuration is a connection between an event type and a destination that you have already created.
    @Sendable
    @inlinable
    public func createNotificationConfiguration(_ input: CreateNotificationConfigurationRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> CreateNotificationConfigurationResponse {
        try await self.client.execute(
            operation: "CreateNotificationConfiguration", 
            path: "/notification-configurations", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Creates a notification configuration. A configuration is a connection between an event type and a destination that you have already created.
    ///
    /// Parameters:
    ///   - clientToken: An idempotency token. If you retry a request that completed successfully initially using the same client token and parameters, then the retry attempt will succeed without performing any further actions.
    ///   - destinationName: The name of the destination for the notification configuration.
    ///   - eventType: The type of event triggering a device notification to the customer-managed destination.
    ///   - tags: A set of key/value pairs that are used to manage the notification configuration.
    ///   - logger: Logger use during operation
    @inlinable
    public func createNotificationConfiguration(
        clientToken: String? = CreateNotificationConfigurationRequest.idempotencyToken(),
        destinationName: String,
        eventType: EventType,
        tags: [String: String]? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> CreateNotificationConfigurationResponse {
        let input = CreateNotificationConfigurationRequest(
            clientToken: clientToken, 
            destinationName: destinationName, 
            eventType: eventType, 
            tags: tags
        )
        return try await self.createNotificationConfiguration(input, logger: logger)
    }

    /// Create an over-the-air (OTA) task to update a device.
    @Sendable
    @inlinable
    public func createOtaTask(_ input: CreateOtaTaskRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> CreateOtaTaskResponse {
        try await self.client.execute(
            operation: "CreateOtaTask", 
            path: "/ota-tasks", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Create an over-the-air (OTA) task to update a device.
    ///
    /// Parameters:
    ///   - clientToken: An idempotency token. If you retry a request that completed successfully initially using the same client token and parameters, then the retry attempt will succeed without performing any further actions.
    ///   - description: The description of the over-the-air (OTA) task.
    ///   - otaMechanism: The deployment mechanism for the over-the-air (OTA) task.
    ///   - otaSchedulingConfig: 
    ///   - otaTargetQueryString: The query string to add things to the thing group.
    ///   - otaTaskExecutionRetryConfig: 
    ///   - otaType: The frequency type for the over-the-air (OTA) task.
    ///   - protocol: The connection protocol the over-the-air (OTA) task uses to update the device.
    ///   - s3Url: The URL to the Amazon S3 bucket where the over-the-air (OTA) task is stored.
    ///   - tags: A set of key/value pairs that are used to manage the over-the-air (OTA) task.
    ///   - target: The device targeted for the over-the-air (OTA) task.
    ///   - taskConfigurationId: The identifier for the over-the-air (OTA) task configuration.
    ///   - logger: Logger use during operation
    @inlinable
    public func createOtaTask(
        clientToken: String? = CreateOtaTaskRequest.idempotencyToken(),
        description: String? = nil,
        otaMechanism: OtaMechanism? = nil,
        otaSchedulingConfig: OtaTaskSchedulingConfig? = nil,
        otaTargetQueryString: String? = nil,
        otaTaskExecutionRetryConfig: OtaTaskExecutionRetryConfig? = nil,
        otaType: OtaType,
        protocol: OtaProtocol? = nil,
        s3Url: String,
        tags: [String: String]? = nil,
        target: [String]? = nil,
        taskConfigurationId: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> CreateOtaTaskResponse {
        let input = CreateOtaTaskRequest(
            clientToken: clientToken, 
            description: description, 
            otaMechanism: otaMechanism, 
            otaSchedulingConfig: otaSchedulingConfig, 
            otaTargetQueryString: otaTargetQueryString, 
            otaTaskExecutionRetryConfig: otaTaskExecutionRetryConfig, 
            otaType: otaType, 
            protocol: `protocol`, 
            s3Url: s3Url, 
            tags: tags, 
            target: target, 
            taskConfigurationId: taskConfigurationId
        )
        return try await self.createOtaTask(input, logger: logger)
    }

    /// Create a configuraiton for the over-the-air (OTA) task.
    @Sendable
    @inlinable
    public func createOtaTaskConfiguration(_ input: CreateOtaTaskConfigurationRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> CreateOtaTaskConfigurationResponse {
        try await self.client.execute(
            operation: "CreateOtaTaskConfiguration", 
            path: "/ota-task-configurations", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Create a configuraiton for the over-the-air (OTA) task.
    ///
    /// Parameters:
    ///   - clientToken: An idempotency token. If you retry a request that completed successfully initially using the same client token and parameters, then the retry attempt will succeed without performing any further actions.
    ///   - description: A description of the over-the-air (OTA) task configuration.
    ///   - name: The name of the over-the-air (OTA) task.
    ///   - pushConfig: Describes the type of configuration used for the over-the-air (OTA) task.
    ///   - logger: Logger use during operation
    @inlinable
    public func createOtaTaskConfiguration(
        clientToken: String? = CreateOtaTaskConfigurationRequest.idempotencyToken(),
        description: String? = nil,
        name: String? = nil,
        pushConfig: PushConfig? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> CreateOtaTaskConfigurationResponse {
        let input = CreateOtaTaskConfigurationRequest(
            clientToken: clientToken, 
            description: description, 
            name: name, 
            pushConfig: pushConfig
        )
        return try await self.createOtaTaskConfiguration(input, logger: logger)
    }

    /// Create a provisioning profile for a device to execute the provisioning flows using a provisioning template. The provisioning template is a document that defines the set of resources and policies applied to a device during the provisioning process.
    @Sendable
    @inlinable
    public func createProvisioningProfile(_ input: CreateProvisioningProfileRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> CreateProvisioningProfileResponse {
        try await self.client.execute(
            operation: "CreateProvisioningProfile", 
            path: "/provisioning-profiles", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Create a provisioning profile for a device to execute the provisioning flows using a provisioning template. The provisioning template is a document that defines the set of resources and policies applied to a device during the provisioning process.
    ///
    /// Parameters:
    ///   - caCertificate: The id of the certificate authority (CA) certificate.
    ///   - clientToken: An idempotency token. If you retry a request that completed successfully initially using the same client token and parameters, then the retry attempt will succeed without performing any further actions.
    ///   - name: The name of the provisioning template.
    ///   - provisioningType: The type of provisioning workflow the device uses for onboarding to IoT managed integrations.
    ///   - tags: A set of key/value pairs that are used to manage the provisioning profile.
    ///   - logger: Logger use during operation
    @inlinable
    public func createProvisioningProfile(
        caCertificate: String? = nil,
        clientToken: String? = CreateProvisioningProfileRequest.idempotencyToken(),
        name: String? = nil,
        provisioningType: ProvisioningType,
        tags: [String: String]? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> CreateProvisioningProfileResponse {
        let input = CreateProvisioningProfileRequest(
            caCertificate: caCertificate, 
            clientToken: clientToken, 
            name: name, 
            provisioningType: provisioningType, 
            tags: tags
        )
        return try await self.createProvisioningProfile(input, logger: logger)
    }

    /// Delete a credential locker.   This operation can't be undone and any existing device won't be able to use IoT managed integrations.
    @Sendable
    @inlinable
    public func deleteCredentialLocker(_ input: DeleteCredentialLockerRequest, logger: Logger = AWSClient.loggingDisabled) async throws {
        try await self.client.execute(
            operation: "DeleteCredentialLocker", 
            path: "/credential-lockers/{Identifier}", 
            httpMethod: .DELETE, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Delete a credential locker.   This operation can't be undone and any existing device won't be able to use IoT managed integrations.
    ///
    /// Parameters:
    ///   - identifier: The identifier of the credential locker.
    ///   - logger: Logger use during operation
    @inlinable
    public func deleteCredentialLocker(
        identifier: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws {
        let input = DeleteCredentialLockerRequest(
            identifier: identifier
        )
        return try await self.deleteCredentialLocker(input, logger: logger)
    }

    /// Deletes a customer-managed destination specified by id.
    @Sendable
    @inlinable
    public func deleteDestination(_ input: DeleteDestinationRequest, logger: Logger = AWSClient.loggingDisabled) async throws {
        try await self.client.execute(
            operation: "DeleteDestination", 
            path: "/destinations/{Name}", 
            httpMethod: .DELETE, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Deletes a customer-managed destination specified by id.
    ///
    /// Parameters:
    ///   - name: The id of the customer-managed destination.
    ///   - logger: Logger use during operation
    @inlinable
    public func deleteDestination(
        name: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws {
        let input = DeleteDestinationRequest(
            name: name
        )
        return try await self.deleteDestination(input, logger: logger)
    }

    /// Delete an event log configuration.
    @Sendable
    @inlinable
    public func deleteEventLogConfiguration(_ input: DeleteEventLogConfigurationRequest, logger: Logger = AWSClient.loggingDisabled) async throws {
        try await self.client.execute(
            operation: "DeleteEventLogConfiguration", 
            path: "/event-log-configurations/{Id}", 
            httpMethod: .DELETE, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Delete an event log configuration.
    ///
    /// Parameters:
    ///   - id: The identifier of the event log configuration.
    ///   - logger: Logger use during operation
    @inlinable
    public func deleteEventLogConfiguration(
        id: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws {
        let input = DeleteEventLogConfigurationRequest(
            id: id
        )
        return try await self.deleteEventLogConfiguration(input, logger: logger)
    }

    /// Delete a managed thing. If a controller is deleted, all of the devices connected to it will have their status changed to PENDING. It is not possible to remove a cloud device.
    @Sendable
    @inlinable
    public func deleteManagedThing(_ input: DeleteManagedThingRequest, logger: Logger = AWSClient.loggingDisabled) async throws {
        try await self.client.execute(
            operation: "DeleteManagedThing", 
            path: "/managed-things/{Identifier}", 
            httpMethod: .DELETE, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Delete a managed thing. If a controller is deleted, all of the devices connected to it will have their status changed to PENDING. It is not possible to remove a cloud device.
    ///
    /// Parameters:
    ///   - force: When set to TRUE, a forceful deteletion of the managed thing will occur. When set to FALSE, a non-forceful deletion of the managed thing will occur.
    ///   - identifier: The id of the managed thing.
    ///   - logger: Logger use during operation
    @inlinable
    public func deleteManagedThing(
        force: Bool? = nil,
        identifier: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws {
        let input = DeleteManagedThingRequest(
            force: force, 
            identifier: identifier
        )
        return try await self.deleteManagedThing(input, logger: logger)
    }

    /// Deletes a notification configuration.
    @Sendable
    @inlinable
    public func deleteNotificationConfiguration(_ input: DeleteNotificationConfigurationRequest, logger: Logger = AWSClient.loggingDisabled) async throws {
        try await self.client.execute(
            operation: "DeleteNotificationConfiguration", 
            path: "/notification-configurations/{EventType}", 
            httpMethod: .DELETE, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Deletes a notification configuration.
    ///
    /// Parameters:
    ///   - eventType: The type of event triggering a device notification to the customer-managed destination.
    ///   - logger: Logger use during operation
    @inlinable
    public func deleteNotificationConfiguration(
        eventType: EventType,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws {
        let input = DeleteNotificationConfigurationRequest(
            eventType: eventType
        )
        return try await self.deleteNotificationConfiguration(input, logger: logger)
    }

    /// Delete the over-the-air (OTA) task.
    @Sendable
    @inlinable
    public func deleteOtaTask(_ input: DeleteOtaTaskRequest, logger: Logger = AWSClient.loggingDisabled) async throws {
        try await self.client.execute(
            operation: "DeleteOtaTask", 
            path: "/ota-tasks/{Identifier}", 
            httpMethod: .DELETE, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Delete the over-the-air (OTA) task.
    ///
    /// Parameters:
    ///   - identifier: The identifier of the over-the-air (OTA) task.
    ///   - logger: Logger use during operation
    @inlinable
    public func deleteOtaTask(
        identifier: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws {
        let input = DeleteOtaTaskRequest(
            identifier: identifier
        )
        return try await self.deleteOtaTask(input, logger: logger)
    }

    /// Delete the over-the-air (OTA) task configuration.
    @Sendable
    @inlinable
    public func deleteOtaTaskConfiguration(_ input: DeleteOtaTaskConfigurationRequest, logger: Logger = AWSClient.loggingDisabled) async throws {
        try await self.client.execute(
            operation: "DeleteOtaTaskConfiguration", 
            path: "/ota-task-configurations/{Identifier}", 
            httpMethod: .DELETE, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Delete the over-the-air (OTA) task configuration.
    ///
    /// Parameters:
    ///   - identifier: The identifier of the over-the-air (OTA) task configuration.
    ///   - logger: Logger use during operation
    @inlinable
    public func deleteOtaTaskConfiguration(
        identifier: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws {
        let input = DeleteOtaTaskConfigurationRequest(
            identifier: identifier
        )
        return try await self.deleteOtaTaskConfiguration(input, logger: logger)
    }

    /// Delete a provisioning profile.
    @Sendable
    @inlinable
    public func deleteProvisioningProfile(_ input: DeleteProvisioningProfileRequest, logger: Logger = AWSClient.loggingDisabled) async throws {
        try await self.client.execute(
            operation: "DeleteProvisioningProfile", 
            path: "/provisioning-profiles/{Identifier}", 
            httpMethod: .DELETE, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Delete a provisioning profile.
    ///
    /// Parameters:
    ///   - identifier: The name of the provisioning template.
    ///   - logger: Logger use during operation
    @inlinable
    public func deleteProvisioningProfile(
        identifier: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws {
        let input = DeleteProvisioningProfileRequest(
            identifier: identifier
        )
        return try await self.deleteProvisioningProfile(input, logger: logger)
    }

    /// Get information on an existing credential locker
    @Sendable
    @inlinable
    public func getCredentialLocker(_ input: GetCredentialLockerRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> GetCredentialLockerResponse {
        try await self.client.execute(
            operation: "GetCredentialLocker", 
            path: "/credential-lockers/{Identifier}", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Get information on an existing credential locker
    ///
    /// Parameters:
    ///   - identifier: The identifier of the credential locker.
    ///   - logger: Logger use during operation
    @inlinable
    public func getCredentialLocker(
        identifier: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> GetCredentialLockerResponse {
        let input = GetCredentialLockerRequest(
            identifier: identifier
        )
        return try await self.getCredentialLocker(input, logger: logger)
    }

    /// Returns the IoT managed integrations custom endpoint.
    @Sendable
    @inlinable
    public func getCustomEndpoint(_ input: GetCustomEndpointRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> GetCustomEndpointResponse {
        try await self.client.execute(
            operation: "GetCustomEndpoint", 
            path: "/custom-endpoint", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Returns the IoT managed integrations custom endpoint.
    ///
    /// Parameters:
    ///   - logger: Logger use during operation
    @inlinable
    public func getCustomEndpoint(
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> GetCustomEndpointResponse {
        let input = GetCustomEndpointRequest(
        )
        return try await self.getCustomEndpoint(input, logger: logger)
    }

    ///  Retrieves information about the default encryption configuration for the Amazon Web Services account in the default or specified region. For more information, see Key management in the AWS IoT SiteWise User Guide.
    @Sendable
    @inlinable
    public func getDefaultEncryptionConfiguration(_ input: GetDefaultEncryptionConfigurationRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> GetDefaultEncryptionConfigurationResponse {
        try await self.client.execute(
            operation: "GetDefaultEncryptionConfiguration", 
            path: "/configuration/account/encryption", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    ///  Retrieves information about the default encryption configuration for the Amazon Web Services account in the default or specified region. For more information, see Key management in the AWS IoT SiteWise User Guide.
    ///
    /// Parameters:
    ///   - logger: Logger use during operation
    @inlinable
    public func getDefaultEncryptionConfiguration(
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> GetDefaultEncryptionConfigurationResponse {
        let input = GetDefaultEncryptionConfigurationRequest(
        )
        return try await self.getDefaultEncryptionConfiguration(input, logger: logger)
    }

    /// Gets a destination by ID.
    @Sendable
    @inlinable
    public func getDestination(_ input: GetDestinationRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> GetDestinationResponse {
        try await self.client.execute(
            operation: "GetDestination", 
            path: "/destinations/{Name}", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Gets a destination by ID.
    ///
    /// Parameters:
    ///   - name: The name of the customer-managed destination.
    ///   - logger: Logger use during operation
    @inlinable
    public func getDestination(
        name: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> GetDestinationResponse {
        let input = GetDestinationRequest(
            name: name
        )
        return try await self.getDestination(input, logger: logger)
    }

    ///  Get the current state of a device discovery.
    @Sendable
    @inlinable
    public func getDeviceDiscovery(_ input: GetDeviceDiscoveryRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> GetDeviceDiscoveryResponse {
        try await self.client.execute(
            operation: "GetDeviceDiscovery", 
            path: "/device-discoveries/{Identifier}", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    ///  Get the current state of a device discovery.
    ///
    /// Parameters:
    ///   - identifier: The id of the device discovery job request.
    ///   - logger: Logger use during operation
    @inlinable
    public func getDeviceDiscovery(
        identifier: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> GetDeviceDiscoveryResponse {
        let input = GetDeviceDiscoveryRequest(
            identifier: identifier
        )
        return try await self.getDeviceDiscovery(input, logger: logger)
    }

    /// Get an event log configuration.
    @Sendable
    @inlinable
    public func getEventLogConfiguration(_ input: GetEventLogConfigurationRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> GetEventLogConfigurationResponse {
        try await self.client.execute(
            operation: "GetEventLogConfiguration", 
            path: "/event-log-configurations/{Id}", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Get an event log configuration.
    ///
    /// Parameters:
    ///   - id: The identifier of the event log configuration.
    ///   - logger: Logger use during operation
    @inlinable
    public func getEventLogConfiguration(
        id: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> GetEventLogConfigurationResponse {
        let input = GetEventLogConfigurationRequest(
            id: id
        )
        return try await self.getEventLogConfiguration(input, logger: logger)
    }

    /// Get a hub configuration.
    @Sendable
    @inlinable
    public func getHubConfiguration(_ input: GetHubConfigurationRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> GetHubConfigurationResponse {
        try await self.client.execute(
            operation: "GetHubConfiguration", 
            path: "/hub-configuration", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Get a hub configuration.
    ///
    /// Parameters:
    ///   - logger: Logger use during operation
    @inlinable
    public func getHubConfiguration(
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> GetHubConfigurationResponse {
        let input = GetHubConfigurationRequest(
        )
        return try await self.getHubConfiguration(input, logger: logger)
    }

    ///  Get the attributes and capabilities associated with a managed thing.
    @Sendable
    @inlinable
    public func getManagedThing(_ input: GetManagedThingRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> GetManagedThingResponse {
        try await self.client.execute(
            operation: "GetManagedThing", 
            path: "/managed-things/{Identifier}", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    ///  Get the attributes and capabilities associated with a managed thing.
    ///
    /// Parameters:
    ///   - identifier: The id of the managed thing.
    ///   - logger: Logger use during operation
    @inlinable
    public func getManagedThing(
        identifier: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> GetManagedThingResponse {
        let input = GetManagedThingRequest(
            identifier: identifier
        )
        return try await self.getManagedThing(input, logger: logger)
    }

    /// Get the capabilities for a managed thing using the device ID.
    @Sendable
    @inlinable
    public func getManagedThingCapabilities(_ input: GetManagedThingCapabilitiesRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> GetManagedThingCapabilitiesResponse {
        try await self.client.execute(
            operation: "GetManagedThingCapabilities", 
            path: "/managed-things-capabilities/{Identifier}", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Get the capabilities for a managed thing using the device ID.
    ///
    /// Parameters:
    ///   - identifier: The id of the device.
    ///   - logger: Logger use during operation
    @inlinable
    public func getManagedThingCapabilities(
        identifier: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> GetManagedThingCapabilitiesResponse {
        let input = GetManagedThingCapabilitiesRequest(
            identifier: identifier
        )
        return try await self.getManagedThingCapabilities(input, logger: logger)
    }

    /// Get the connectivity status of a managed thing.
    @Sendable
    @inlinable
    public func getManagedThingConnectivityData(_ input: GetManagedThingConnectivityDataRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> GetManagedThingConnectivityDataResponse {
        try await self.client.execute(
            operation: "GetManagedThingConnectivityData", 
            path: "/managed-things-connectivity-data/{Identifier}", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Get the connectivity status of a managed thing.
    ///
    /// Parameters:
    ///   - identifier: The identifier of a managed thing.
    ///   - logger: Logger use during operation
    @inlinable
    public func getManagedThingConnectivityData(
        identifier: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> GetManagedThingConnectivityDataResponse {
        let input = GetManagedThingConnectivityDataRequest(
            identifier: identifier
        )
        return try await self.getManagedThingConnectivityData(input, logger: logger)
    }

    /// Get the metadata information for a managed thing.
    @Sendable
    @inlinable
    public func getManagedThingMetaData(_ input: GetManagedThingMetaDataRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> GetManagedThingMetaDataResponse {
        try await self.client.execute(
            operation: "GetManagedThingMetaData", 
            path: "/managed-things-metadata/{Identifier}", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Get the metadata information for a managed thing.
    ///
    /// Parameters:
    ///   - identifier: The managed thing id.
    ///   - logger: Logger use during operation
    @inlinable
    public func getManagedThingMetaData(
        identifier: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> GetManagedThingMetaDataResponse {
        let input = GetManagedThingMetaDataRequest(
            identifier: identifier
        )
        return try await self.getManagedThingMetaData(input, logger: logger)
    }

    ///  Returns the managed thing state for the given device Id.
    @Sendable
    @inlinable
    public func getManagedThingState(_ input: GetManagedThingStateRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> GetManagedThingStateResponse {
        try await self.client.execute(
            operation: "GetManagedThingState", 
            path: "/managed-thing-states/{ManagedThingId}", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    ///  Returns the managed thing state for the given device Id.
    ///
    /// Parameters:
    ///   - managedThingId: The id of the device.
    ///   - logger: Logger use during operation
    @inlinable
    public func getManagedThingState(
        managedThingId: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> GetManagedThingStateResponse {
        let input = GetManagedThingStateRequest(
            managedThingId: managedThingId
        )
        return try await self.getManagedThingState(input, logger: logger)
    }

    ///  Get a notification configuration.
    @Sendable
    @inlinable
    public func getNotificationConfiguration(_ input: GetNotificationConfigurationRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> GetNotificationConfigurationResponse {
        try await self.client.execute(
            operation: "GetNotificationConfiguration", 
            path: "/notification-configurations/{EventType}", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    ///  Get a notification configuration.
    ///
    /// Parameters:
    ///   - eventType: The type of event triggering a device notification to the customer-managed destination.
    ///   - logger: Logger use during operation
    @inlinable
    public func getNotificationConfiguration(
        eventType: EventType,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> GetNotificationConfigurationResponse {
        let input = GetNotificationConfigurationRequest(
            eventType: eventType
        )
        return try await self.getNotificationConfiguration(input, logger: logger)
    }

    /// Get the over-the-air (OTA) task.
    @Sendable
    @inlinable
    public func getOtaTask(_ input: GetOtaTaskRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> GetOtaTaskResponse {
        try await self.client.execute(
            operation: "GetOtaTask", 
            path: "/ota-tasks/{Identifier}", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Get the over-the-air (OTA) task.
    ///
    /// Parameters:
    ///   - identifier: The over-the-air (OTA) task id.
    ///   - logger: Logger use during operation
    @inlinable
    public func getOtaTask(
        identifier: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> GetOtaTaskResponse {
        let input = GetOtaTaskRequest(
            identifier: identifier
        )
        return try await self.getOtaTask(input, logger: logger)
    }

    /// Get a configuraiton for the over-the-air (OTA) task.
    @Sendable
    @inlinable
    public func getOtaTaskConfiguration(_ input: GetOtaTaskConfigurationRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> GetOtaTaskConfigurationResponse {
        try await self.client.execute(
            operation: "GetOtaTaskConfiguration", 
            path: "/ota-task-configurations/{Identifier}", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Get a configuraiton for the over-the-air (OTA) task.
    ///
    /// Parameters:
    ///   - identifier: The over-the-air (OTA) task configuration id.
    ///   - logger: Logger use during operation
    @inlinable
    public func getOtaTaskConfiguration(
        identifier: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> GetOtaTaskConfigurationResponse {
        let input = GetOtaTaskConfigurationRequest(
            identifier: identifier
        )
        return try await self.getOtaTaskConfiguration(input, logger: logger)
    }

    /// Get a provisioning profile by template name.
    @Sendable
    @inlinable
    public func getProvisioningProfile(_ input: GetProvisioningProfileRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> GetProvisioningProfileResponse {
        try await self.client.execute(
            operation: "GetProvisioningProfile", 
            path: "/provisioning-profiles/{Identifier}", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Get a provisioning profile by template name.
    ///
    /// Parameters:
    ///   - identifier: The provisioning template the device uses for the provisioning process.
    ///   - logger: Logger use during operation
    @inlinable
    public func getProvisioningProfile(
        identifier: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> GetProvisioningProfileResponse {
        let input = GetProvisioningProfileRequest(
            identifier: identifier
        )
        return try await self.getProvisioningProfile(input, logger: logger)
    }

    /// Get the runtime log configuration for a specific managed thing or for all managed things as a group.
    @Sendable
    @inlinable
    public func getRuntimeLogConfiguration(_ input: GetRuntimeLogConfigurationRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> GetRuntimeLogConfigurationResponse {
        try await self.client.execute(
            operation: "GetRuntimeLogConfiguration", 
            path: "/runtime-log-configurations/{ManagedThingId}", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Get the runtime log configuration for a specific managed thing or for all managed things as a group.
    ///
    /// Parameters:
    ///   - managedThingId: The id for a managed thing.
    ///   - logger: Logger use during operation
    @inlinable
    public func getRuntimeLogConfiguration(
        managedThingId: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> GetRuntimeLogConfigurationResponse {
        let input = GetRuntimeLogConfigurationRequest(
            managedThingId: managedThingId
        )
        return try await self.getRuntimeLogConfiguration(input, logger: logger)
    }

    /// Gets a schema version with the provided information.
    @Sendable
    @inlinable
    public func getSchemaVersion(_ input: GetSchemaVersionRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> GetSchemaVersionResponse {
        try await self.client.execute(
            operation: "GetSchemaVersion", 
            path: "/schema-versions/{Type}/{SchemaVersionedId}", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Gets a schema version with the provided information.
    ///
    /// Parameters:
    ///   - format: The format of the schema version.
    ///   - schemaVersionedId: Schema id with a version specified. If the version is missing, it defaults to latest version.
    ///   - type: The type of schema version.
    ///   - logger: Logger use during operation
    @inlinable
    public func getSchemaVersion(
        format: SchemaVersionFormat? = nil,
        schemaVersionedId: String,
        type: SchemaVersionType,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> GetSchemaVersionResponse {
        let input = GetSchemaVersionRequest(
            format: format, 
            schemaVersionedId: schemaVersionedId, 
            type: type
        )
        return try await self.getSchemaVersion(input, logger: logger)
    }

    /// List information on an existing credential locker.
    @Sendable
    @inlinable
    public func listCredentialLockers(_ input: ListCredentialLockersRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> ListCredentialLockersResponse {
        try await self.client.execute(
            operation: "ListCredentialLockers", 
            path: "/credential-lockers", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// List information on an existing credential locker.
    ///
    /// Parameters:
    ///   - maxResults: The maximum number of results to return at one time.
    ///   - nextToken: A token that can be used to retrieve the next set of results.
    ///   - logger: Logger use during operation
    @inlinable
    public func listCredentialLockers(
        maxResults: Int? = nil,
        nextToken: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> ListCredentialLockersResponse {
        let input = ListCredentialLockersRequest(
            maxResults: maxResults, 
            nextToken: nextToken
        )
        return try await self.listCredentialLockers(input, logger: logger)
    }

    ///  List all destination names under one Amazon Web Services account.
    @Sendable
    @inlinable
    public func listDestinations(_ input: ListDestinationsRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> ListDestinationsResponse {
        try await self.client.execute(
            operation: "ListDestinations", 
            path: "/destinations", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    ///  List all destination names under one Amazon Web Services account.
    ///
    /// Parameters:
    ///   - maxResults: The maximum number of results to return at one time.
    ///   - nextToken: A token that can be used to retrieve the next set of results.
    ///   - logger: Logger use during operation
    @inlinable
    public func listDestinations(
        maxResults: Int? = nil,
        nextToken: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> ListDestinationsResponse {
        let input = ListDestinationsRequest(
            maxResults: maxResults, 
            nextToken: nextToken
        )
        return try await self.listDestinations(input, logger: logger)
    }

    /// List all event log configurations for an account.
    @Sendable
    @inlinable
    public func listEventLogConfigurations(_ input: ListEventLogConfigurationsRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> ListEventLogConfigurationsResponse {
        try await self.client.execute(
            operation: "ListEventLogConfigurations", 
            path: "/event-log-configurations", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// List all event log configurations for an account.
    ///
    /// Parameters:
    ///   - maxResults: The maximum number of results to return at one time.
    ///   - nextToken: A token that can be used to retrieve the next set of results.
    ///   - logger: Logger use during operation
    @inlinable
    public func listEventLogConfigurations(
        maxResults: Int? = nil,
        nextToken: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> ListEventLogConfigurationsResponse {
        let input = ListEventLogConfigurationsRequest(
            maxResults: maxResults, 
            nextToken: nextToken
        )
        return try await self.listEventLogConfigurations(input, logger: logger)
    }

    /// List schemas associated with a managed thing.
    @Sendable
    @inlinable
    public func listManagedThingSchemas(_ input: ListManagedThingSchemasRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> ListManagedThingSchemasResponse {
        try await self.client.execute(
            operation: "ListManagedThingSchemas", 
            path: "/managed-thing-schemas/{Identifier}", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// List schemas associated with a managed thing.
    ///
    /// Parameters:
    ///   - capabilityIdFilter: Filter on a capability id.
    ///   - endpointIdFilter: Filter on an endpoint id.
    ///   - identifier: The managed thing id.
    ///   - maxResults: The maximum number of results to return at one time.
    ///   - nextToken: A token that can be used to retrieve the next set of results.
    ///   - logger: Logger use during operation
    @inlinable
    public func listManagedThingSchemas(
        capabilityIdFilter: String? = nil,
        endpointIdFilter: String? = nil,
        identifier: String,
        maxResults: Int? = nil,
        nextToken: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> ListManagedThingSchemasResponse {
        let input = ListManagedThingSchemasRequest(
            capabilityIdFilter: capabilityIdFilter, 
            endpointIdFilter: endpointIdFilter, 
            identifier: identifier, 
            maxResults: maxResults, 
            nextToken: nextToken
        )
        return try await self.listManagedThingSchemas(input, logger: logger)
    }

    /// List all of the associations and statuses for a managed thing by its owner.
    @Sendable
    @inlinable
    public func listManagedThings(_ input: ListManagedThingsRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> ListManagedThingsResponse {
        try await self.client.execute(
            operation: "ListManagedThings", 
            path: "/managed-things", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// List all of the associations and statuses for a managed thing by its owner.
    ///
    /// Parameters:
    ///   - connectorPolicyIdFilter: Filter on a connector policy id for a managed thing.
    ///   - credentialLockerFilter: Filter on a credential locker for a managed thing.
    ///   - maxResults: The maximum number of results to return at one time.
    ///   - nextToken: A token that can be used to retrieve the next set of results.
    ///   - ownerFilter: Filter on device owners when listing managed things.
    ///   - parentControllerIdentifierFilter: Filter on a parent controller id for a managed thing.
    ///   - provisioningStatusFilter: Filter on the status of the device.
    ///   - roleFilter: Filter on the type of device used. This will be the Amazon Web Services hub controller, cloud device, or IoT device.
    ///   - serialNumberFilter: Filter on the serial number of the device.
    ///   - logger: Logger use during operation
    @inlinable
    public func listManagedThings(
        connectorPolicyIdFilter: String? = nil,
        credentialLockerFilter: String? = nil,
        maxResults: Int? = nil,
        nextToken: String? = nil,
        ownerFilter: String? = nil,
        parentControllerIdentifierFilter: String? = nil,
        provisioningStatusFilter: ProvisioningStatus? = nil,
        roleFilter: Role? = nil,
        serialNumberFilter: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> ListManagedThingsResponse {
        let input = ListManagedThingsRequest(
            connectorPolicyIdFilter: connectorPolicyIdFilter, 
            credentialLockerFilter: credentialLockerFilter, 
            maxResults: maxResults, 
            nextToken: nextToken, 
            ownerFilter: ownerFilter, 
            parentControllerIdentifierFilter: parentControllerIdentifierFilter, 
            provisioningStatusFilter: provisioningStatusFilter, 
            roleFilter: roleFilter, 
            serialNumberFilter: serialNumberFilter
        )
        return try await self.listManagedThings(input, logger: logger)
    }

    ///  List all notification configurations.
    @Sendable
    @inlinable
    public func listNotificationConfigurations(_ input: ListNotificationConfigurationsRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> ListNotificationConfigurationsResponse {
        try await self.client.execute(
            operation: "ListNotificationConfigurations", 
            path: "/notification-configurations", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    ///  List all notification configurations.
    ///
    /// Parameters:
    ///   - maxResults: The maximum number of results to return at one time.
    ///   - nextToken: A token that can be used to retrieve the next set of results.
    ///   - logger: Logger use during operation
    @inlinable
    public func listNotificationConfigurations(
        maxResults: Int? = nil,
        nextToken: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> ListNotificationConfigurationsResponse {
        let input = ListNotificationConfigurationsRequest(
            maxResults: maxResults, 
            nextToken: nextToken
        )
        return try await self.listNotificationConfigurations(input, logger: logger)
    }

    /// List all of the over-the-air (OTA) task configurations.
    @Sendable
    @inlinable
    public func listOtaTaskConfigurations(_ input: ListOtaTaskConfigurationsRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> ListOtaTaskConfigurationsResponse {
        try await self.client.execute(
            operation: "ListOtaTaskConfigurations", 
            path: "/ota-task-configurations", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// List all of the over-the-air (OTA) task configurations.
    ///
    /// Parameters:
    ///   - maxResults: The maximum number of results to return at one time.
    ///   - nextToken: A token that can be used to retrieve the next set of results.
    ///   - logger: Logger use during operation
    @inlinable
    public func listOtaTaskConfigurations(
        maxResults: Int? = nil,
        nextToken: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> ListOtaTaskConfigurationsResponse {
        let input = ListOtaTaskConfigurationsRequest(
            maxResults: maxResults, 
            nextToken: nextToken
        )
        return try await self.listOtaTaskConfigurations(input, logger: logger)
    }

    /// List all of the over-the-air (OTA) task executions.
    @Sendable
    @inlinable
    public func listOtaTaskExecutions(_ input: ListOtaTaskExecutionsRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> ListOtaTaskExecutionsResponse {
        try await self.client.execute(
            operation: "ListOtaTaskExecutions", 
            path: "/ota-tasks/{Identifier}/devices", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// List all of the over-the-air (OTA) task executions.
    ///
    /// Parameters:
    ///   - identifier: The over-the-air (OTA) task id.
    ///   - maxResults: The maximum number of results to return at one time.
    ///   - nextToken: A token that can be used to retrieve the next set of results.
    ///   - logger: Logger use during operation
    @inlinable
    public func listOtaTaskExecutions(
        identifier: String,
        maxResults: Int? = nil,
        nextToken: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> ListOtaTaskExecutionsResponse {
        let input = ListOtaTaskExecutionsRequest(
            identifier: identifier, 
            maxResults: maxResults, 
            nextToken: nextToken
        )
        return try await self.listOtaTaskExecutions(input, logger: logger)
    }

    /// List all of the over-the-air (OTA) tasks.
    @Sendable
    @inlinable
    public func listOtaTasks(_ input: ListOtaTasksRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> ListOtaTasksResponse {
        try await self.client.execute(
            operation: "ListOtaTasks", 
            path: "/ota-tasks", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// List all of the over-the-air (OTA) tasks.
    ///
    /// Parameters:
    ///   - maxResults: The maximum number of results to return at one time.
    ///   - nextToken: A token that can be used to retrieve the next set of results.
    ///   - logger: Logger use during operation
    @inlinable
    public func listOtaTasks(
        maxResults: Int? = nil,
        nextToken: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> ListOtaTasksResponse {
        let input = ListOtaTasksRequest(
            maxResults: maxResults, 
            nextToken: nextToken
        )
        return try await self.listOtaTasks(input, logger: logger)
    }

    /// List the provisioning profiles within the Amazon Web Services account.
    @Sendable
    @inlinable
    public func listProvisioningProfiles(_ input: ListProvisioningProfilesRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> ListProvisioningProfilesResponse {
        try await self.client.execute(
            operation: "ListProvisioningProfiles", 
            path: "/provisioning-profiles", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// List the provisioning profiles within the Amazon Web Services account.
    ///
    /// Parameters:
    ///   - maxResults: The maximum number of results to return at one time.
    ///   - nextToken: A token that can be used to retrieve the next set of results.
    ///   - logger: Logger use during operation
    @inlinable
    public func listProvisioningProfiles(
        maxResults: Int? = nil,
        nextToken: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> ListProvisioningProfilesResponse {
        let input = ListProvisioningProfilesRequest(
            maxResults: maxResults, 
            nextToken: nextToken
        )
        return try await self.listProvisioningProfiles(input, logger: logger)
    }

    /// Lists schema versions with the provided information.
    @Sendable
    @inlinable
    public func listSchemaVersions(_ input: ListSchemaVersionsRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> ListSchemaVersionsResponse {
        try await self.client.execute(
            operation: "ListSchemaVersions", 
            path: "/schema-versions/{Type}", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Lists schema versions with the provided information.
    ///
    /// Parameters:
    ///   - maxResults: The maximum number of results to return at one time.
    ///   - namespace: Filter on the name of the schema version.
    ///   - nextToken: A token that can be used to retrieve the next set of results.
    ///   - schemaId: Filter on the id of the schema version.
    ///   - semanticVersion: The schema version. If this is left blank, it defaults to the latest version.
    ///   - type: Filter on the type of schema version.
    ///   - visibility: The visibility of the schema version.
    ///   - logger: Logger use during operation
    @inlinable
    public func listSchemaVersions(
        maxResults: Int? = nil,
        namespace: String? = nil,
        nextToken: String? = nil,
        schemaId: String? = nil,
        semanticVersion: String? = nil,
        type: SchemaVersionType,
        visibility: SchemaVersionVisibility? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> ListSchemaVersionsResponse {
        let input = ListSchemaVersionsRequest(
            maxResults: maxResults, 
            namespace: namespace, 
            nextToken: nextToken, 
            schemaId: schemaId, 
            semanticVersion: semanticVersion, 
            type: type, 
            visibility: visibility
        )
        return try await self.listSchemaVersions(input, logger: logger)
    }

    /// Sets the default encryption configuration for the Amazon Web Services account. For more information, see Key management in the AWS IoT SiteWise User Guide.
    @Sendable
    @inlinable
    public func putDefaultEncryptionConfiguration(_ input: PutDefaultEncryptionConfigurationRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> PutDefaultEncryptionConfigurationResponse {
        try await self.client.execute(
            operation: "PutDefaultEncryptionConfiguration", 
            path: "/configuration/account/encryption", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Sets the default encryption configuration for the Amazon Web Services account. For more information, see Key management in the AWS IoT SiteWise User Guide.
    ///
    /// Parameters:
    ///   - encryptionType: The type of encryption used for the encryption configuration.
    ///   - kmsKeyArn: The Key Amazon Resource Name (ARN) of the AWS KMS key used for KMS encryption if you use KMS_BASED_ENCRYPTION.
    ///   - logger: Logger use during operation
    @inlinable
    public func putDefaultEncryptionConfiguration(
        encryptionType: EncryptionType,
        kmsKeyArn: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> PutDefaultEncryptionConfigurationResponse {
        let input = PutDefaultEncryptionConfigurationRequest(
            encryptionType: encryptionType, 
            kmsKeyArn: kmsKeyArn
        )
        return try await self.putDefaultEncryptionConfiguration(input, logger: logger)
    }

    /// Update a hub configuration.
    @Sendable
    @inlinable
    public func putHubConfiguration(_ input: PutHubConfigurationRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> PutHubConfigurationResponse {
        try await self.client.execute(
            operation: "PutHubConfiguration", 
            path: "/hub-configuration", 
            httpMethod: .PUT, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Update a hub configuration.
    ///
    /// Parameters:
    ///   - hubTokenTimerExpirySettingInSeconds: A user-defined integer value that represents the hub token timer expiry setting in seconds.
    ///   - logger: Logger use during operation
    @inlinable
    public func putHubConfiguration(
        hubTokenTimerExpirySettingInSeconds: Int64,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> PutHubConfigurationResponse {
        let input = PutHubConfigurationRequest(
            hubTokenTimerExpirySettingInSeconds: hubTokenTimerExpirySettingInSeconds
        )
        return try await self.putHubConfiguration(input, logger: logger)
    }

    /// Set the runtime log configuration for a specific managed thing or for all managed things as a group.
    @Sendable
    @inlinable
    public func putRuntimeLogConfiguration(_ input: PutRuntimeLogConfigurationRequest, logger: Logger = AWSClient.loggingDisabled) async throws {
        try await self.client.execute(
            operation: "PutRuntimeLogConfiguration", 
            path: "/runtime-log-configurations/{ManagedThingId}", 
            httpMethod: .PUT, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Set the runtime log configuration for a specific managed thing or for all managed things as a group.
    ///
    /// Parameters:
    ///   - managedThingId: The id for a managed thing.
    ///   - runtimeLogConfigurations: The runtime log configuration for a managed thing.
    ///   - logger: Logger use during operation
    @inlinable
    public func putRuntimeLogConfiguration(
        managedThingId: String,
        runtimeLogConfigurations: RuntimeLogConfigurations,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws {
        let input = PutRuntimeLogConfigurationRequest(
            managedThingId: managedThingId, 
            runtimeLogConfigurations: runtimeLogConfigurations
        )
        return try await self.putRuntimeLogConfiguration(input, logger: logger)
    }

    /// Customers can request IoT managed integrations to manage the server trust for them or bring their own external server trusts for the custom domain. Returns an IoT managed integrations endpoint.
    @Sendable
    @inlinable
    public func registerCustomEndpoint(_ input: RegisterCustomEndpointRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> RegisterCustomEndpointResponse {
        try await self.client.execute(
            operation: "RegisterCustomEndpoint", 
            path: "/custom-endpoint", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Customers can request IoT managed integrations to manage the server trust for them or bring their own external server trusts for the custom domain. Returns an IoT managed integrations endpoint.
    ///
    /// Parameters:
    ///   - logger: Logger use during operation
    @inlinable
    public func registerCustomEndpoint(
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> RegisterCustomEndpointResponse {
        let input = RegisterCustomEndpointRequest(
        )
        return try await self.registerCustomEndpoint(input, logger: logger)
    }

    /// Reset a runtime log configuration for a specific managed thing or for all managed things as a group.
    @Sendable
    @inlinable
    public func resetRuntimeLogConfiguration(_ input: ResetRuntimeLogConfigurationRequest, logger: Logger = AWSClient.loggingDisabled) async throws {
        try await self.client.execute(
            operation: "ResetRuntimeLogConfiguration", 
            path: "/runtime-log-configurations/{ManagedThingId}", 
            httpMethod: .DELETE, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Reset a runtime log configuration for a specific managed thing or for all managed things as a group.
    ///
    /// Parameters:
    ///   - managedThingId: The id of a managed thing.
    ///   - logger: Logger use during operation
    @inlinable
    public func resetRuntimeLogConfiguration(
        managedThingId: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws {
        let input = ResetRuntimeLogConfigurationRequest(
            managedThingId: managedThingId
        )
        return try await self.resetRuntimeLogConfiguration(input, logger: logger)
    }

    /// Send the command to the device represented by the managed thing.
    @Sendable
    @inlinable
    public func sendManagedThingCommand(_ input: SendManagedThingCommandRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> SendManagedThingCommandResponse {
        try await self.client.execute(
            operation: "SendManagedThingCommand", 
            path: "/managed-things-command/{ManagedThingId}", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Send the command to the device represented by the managed thing.
    ///
    /// Parameters:
    ///   - connectorAssociationId: The ID tracking the current discovery process for one connector association.
    ///   - endpoints: The device endpoint.
    ///   - managedThingId: The id of the device.
    ///   - logger: Logger use during operation
    @inlinable
    public func sendManagedThingCommand(
        connectorAssociationId: String? = nil,
        endpoints: [CommandEndpoint],
        managedThingId: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> SendManagedThingCommandResponse {
        let input = SendManagedThingCommandRequest(
            connectorAssociationId: connectorAssociationId, 
            endpoints: endpoints, 
            managedThingId: managedThingId
        )
        return try await self.sendManagedThingCommand(input, logger: logger)
    }

    ///  During user-guided setup, this is used to start device discovery. The authentication material (install code) is passed as a message to the controller telling it to start the discovery.
    @Sendable
    @inlinable
    public func startDeviceDiscovery(_ input: StartDeviceDiscoveryRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> StartDeviceDiscoveryResponse {
        try await self.client.execute(
            operation: "StartDeviceDiscovery", 
            path: "/device-discoveries", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    ///  During user-guided setup, this is used to start device discovery. The authentication material (install code) is passed as a message to the controller telling it to start the discovery.
    ///
    /// Parameters:
    ///   - authenticationMaterial: The authentication material required to start the local device discovery job request.
    ///   - authenticationMaterialType: The type of authentication material used for device discovery jobs.
    ///   - clientToken: An idempotency token. If you retry a request that completed successfully initially using the same client token and parameters, then the retry attempt will succeed without performing any further actions.
    ///   - connectorAssociationIdentifier: The id of the connector association.
    ///   - controllerIdentifier: The id of the end-user's IoT hub.
    ///   - discoveryType: The discovery type supporting the type of device to be discovered in the device discovery job request.
    ///   - tags: A set of key/value pairs that are used to manage the device discovery request.
    ///   - logger: Logger use during operation
    @inlinable
    public func startDeviceDiscovery(
        authenticationMaterial: String? = nil,
        authenticationMaterialType: DiscoveryAuthMaterialType? = nil,
        clientToken: String? = nil,
        connectorAssociationIdentifier: String? = nil,
        controllerIdentifier: String? = nil,
        discoveryType: DiscoveryType,
        tags: [String: String]? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> StartDeviceDiscoveryResponse {
        let input = StartDeviceDiscoveryRequest(
            authenticationMaterial: authenticationMaterial, 
            authenticationMaterialType: authenticationMaterialType, 
            clientToken: clientToken, 
            connectorAssociationIdentifier: connectorAssociationIdentifier, 
            controllerIdentifier: controllerIdentifier, 
            discoveryType: discoveryType, 
            tags: tags
        )
        return try await self.startDeviceDiscovery(input, logger: logger)
    }

    ///  Update a destination specified by id.
    @Sendable
    @inlinable
    public func updateDestination(_ input: UpdateDestinationRequest, logger: Logger = AWSClient.loggingDisabled) async throws {
        try await self.client.execute(
            operation: "UpdateDestination", 
            path: "/destinations/{Name}", 
            httpMethod: .PUT, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    ///  Update a destination specified by id.
    ///
    /// Parameters:
    ///   - deliveryDestinationArn: The Amazon Resource Name (ARN) of the customer-managed destination.
    ///   - deliveryDestinationType: The destination type for the customer-managed destination.
    ///   - description: The description of the customer-managed destination.
    ///   - name: The name of the customer-managed destination.
    ///   - roleArn: The Amazon Resource Name (ARN) of the delivery destination role.
    ///   - logger: Logger use during operation
    @inlinable
    public func updateDestination(
        deliveryDestinationArn: String? = nil,
        deliveryDestinationType: DeliveryDestinationType? = nil,
        description: String? = nil,
        name: String,
        roleArn: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws {
        let input = UpdateDestinationRequest(
            deliveryDestinationArn: deliveryDestinationArn, 
            deliveryDestinationType: deliveryDestinationType, 
            description: description, 
            name: name, 
            roleArn: roleArn
        )
        return try await self.updateDestination(input, logger: logger)
    }

    /// Update an event log configuration by log configuration ID.
    @Sendable
    @inlinable
    public func updateEventLogConfiguration(_ input: UpdateEventLogConfigurationRequest, logger: Logger = AWSClient.loggingDisabled) async throws {
        try await self.client.execute(
            operation: "UpdateEventLogConfiguration", 
            path: "/event-log-configurations/{Id}", 
            httpMethod: .PATCH, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Update an event log configuration by log configuration ID.
    ///
    /// Parameters:
    ///   - eventLogLevel: The log level for the event in terms of severity.
    ///   - id: The log configuration id.
    ///   - logger: Logger use during operation
    @inlinable
    public func updateEventLogConfiguration(
        eventLogLevel: LogLevel,
        id: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws {
        let input = UpdateEventLogConfigurationRequest(
            eventLogLevel: eventLogLevel, 
            id: id
        )
        return try await self.updateEventLogConfiguration(input, logger: logger)
    }

    /// Update the attributes and capabilities associated with a managed thing.
    @Sendable
    @inlinable
    public func updateManagedThing(_ input: UpdateManagedThingRequest, logger: Logger = AWSClient.loggingDisabled) async throws {
        try await self.client.execute(
            operation: "UpdateManagedThing", 
            path: "/managed-things/{Identifier}", 
            httpMethod: .PUT, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Update the attributes and capabilities associated with a managed thing.
    ///
    /// Parameters:
    ///   - brand: The brand of the device.
    ///   - capabilities: The capabilities of the device such as light bulb.
    ///   - capabilityReport: A report of the capabilities for the managed thing.
    ///   - classification: The classification of the managed thing such as light bulb or thermostat.
    ///   - credentialLockerId: The identifier of the credential for the managed thing.
    ///   - hubNetworkMode: The network mode for the hub-connected device.
    ///   - identifier: The id of the managed thing.
    ///   - metaData: The metadata for the managed thing.
    ///   - model: The model of the device.
    ///   - name: The name of the managed thing representing the physical device.
    ///   - owner: Owner of the device, usually an indication of whom the device belongs to. This value should not contain personal identifiable information.
    ///   - serialNumber: The serial number of the device.
    ///   - logger: Logger use during operation
    @inlinable
    public func updateManagedThing(
        brand: String? = nil,
        capabilities: String? = nil,
        capabilityReport: CapabilityReport? = nil,
        classification: String? = nil,
        credentialLockerId: String? = nil,
        hubNetworkMode: HubNetworkMode? = nil,
        identifier: String,
        metaData: [String: String]? = nil,
        model: String? = nil,
        name: String? = nil,
        owner: String? = nil,
        serialNumber: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws {
        let input = UpdateManagedThingRequest(
            brand: brand, 
            capabilities: capabilities, 
            capabilityReport: capabilityReport, 
            classification: classification, 
            credentialLockerId: credentialLockerId, 
            hubNetworkMode: hubNetworkMode, 
            identifier: identifier, 
            metaData: metaData, 
            model: model, 
            name: name, 
            owner: owner, 
            serialNumber: serialNumber
        )
        return try await self.updateManagedThing(input, logger: logger)
    }

    ///  Update a notification configuration.
    @Sendable
    @inlinable
    public func updateNotificationConfiguration(_ input: UpdateNotificationConfigurationRequest, logger: Logger = AWSClient.loggingDisabled) async throws {
        try await self.client.execute(
            operation: "UpdateNotificationConfiguration", 
            path: "/notification-configurations/{EventType}", 
            httpMethod: .PUT, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    ///  Update a notification configuration.
    ///
    /// Parameters:
    ///   - destinationName: The name of the destination for the notification configuration.
    ///   - eventType: The type of event triggering a device notification to the customer-managed destination.
    ///   - logger: Logger use during operation
    @inlinable
    public func updateNotificationConfiguration(
        destinationName: String,
        eventType: EventType,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws {
        let input = UpdateNotificationConfigurationRequest(
            destinationName: destinationName, 
            eventType: eventType
        )
        return try await self.updateNotificationConfiguration(input, logger: logger)
    }

    /// Update an over-the-air (OTA) task.
    @Sendable
    @inlinable
    public func updateOtaTask(_ input: UpdateOtaTaskRequest, logger: Logger = AWSClient.loggingDisabled) async throws {
        try await self.client.execute(
            operation: "UpdateOtaTask", 
            path: "/ota-tasks/{Identifier}", 
            httpMethod: .PUT, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Update an over-the-air (OTA) task.
    ///
    /// Parameters:
    ///   - description: The description of the over-the-air (OTA) task.
    ///   - identifier: The over-the-air (OTA) task id.
    ///   - taskConfigurationId: The identifier for the over-the-air (OTA) task configuration.
    ///   - logger: Logger use during operation
    @inlinable
    public func updateOtaTask(
        description: String? = nil,
        identifier: String,
        taskConfigurationId: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws {
        let input = UpdateOtaTaskRequest(
            description: description, 
            identifier: identifier, 
            taskConfigurationId: taskConfigurationId
        )
        return try await self.updateOtaTask(input, logger: logger)
    }
}

extension IoTManagedIntegrations {
    /// Initializer required by `AWSService.with(middlewares:timeout:byteBufferAllocator:options)`. You are not able to use this initializer directly as there are not public
    /// initializers for `AWSServiceConfig.Patch`. Please use `AWSService.with(middlewares:timeout:byteBufferAllocator:options)` instead.
    public init(from: IoTManagedIntegrations, patch: AWSServiceConfig.Patch) {
        self.client = from.client
        self.config = from.config.with(patch: patch)
    }
}

// MARK: Paginators

@available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
extension IoTManagedIntegrations {
    /// Return PaginatorSequence for operation ``listCredentialLockers(_:logger:)``.
    ///
    /// - Parameters:
    ///   - input: Input for operation
    ///   - logger: Logger used for logging
    @inlinable
    public func listCredentialLockersPaginator(
        _ input: ListCredentialLockersRequest,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<ListCredentialLockersRequest, ListCredentialLockersResponse> {
        return .init(
            input: input,
            command: self.listCredentialLockers,
            inputKey: \ListCredentialLockersRequest.nextToken,
            outputKey: \ListCredentialLockersResponse.nextToken,
            logger: logger
        )
    }
    /// Return PaginatorSequence for operation ``listCredentialLockers(_:logger:)``.
    ///
    /// - Parameters:
    ///   - maxResults: The maximum number of results to return at one time.
    ///   - logger: Logger used for logging
    @inlinable
    public func listCredentialLockersPaginator(
        maxResults: Int? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) -> AWSClient.PaginatorSequence<ListCredentialLockersRequest, ListCredentialLockersResponse> {
        let input = ListCredentialLockersRequest(
            maxResults: maxResults
        )
        return self.listCredentialLockersPaginator(input, logger: logger)
    }

    /// Return PaginatorSequence for operation ``listDestinations(_:logger:)``.
    ///
    /// - Parameters:
    ///   - input: Input for operation
    ///   - logger: Logger used for logging
    @inlinable
    public func listDestinationsPaginator(
        _ input: ListDestinationsRequest,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<ListDestinationsRequest, ListDestinationsResponse> {
        return .init(
            input: input,
            command: self.listDestinations,
            inputKey: \ListDestinationsRequest.nextToken,
            outputKey: \ListDestinationsResponse.nextToken,
            logger: logger
        )
    }
    /// Return PaginatorSequence for operation ``listDestinations(_:logger:)``.
    ///
    /// - Parameters:
    ///   - maxResults: The maximum number of results to return at one time.
    ///   - logger: Logger used for logging
    @inlinable
    public func listDestinationsPaginator(
        maxResults: Int? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) -> AWSClient.PaginatorSequence<ListDestinationsRequest, ListDestinationsResponse> {
        let input = ListDestinationsRequest(
            maxResults: maxResults
        )
        return self.listDestinationsPaginator(input, logger: logger)
    }

    /// Return PaginatorSequence for operation ``listEventLogConfigurations(_:logger:)``.
    ///
    /// - Parameters:
    ///   - input: Input for operation
    ///   - logger: Logger used for logging
    @inlinable
    public func listEventLogConfigurationsPaginator(
        _ input: ListEventLogConfigurationsRequest,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<ListEventLogConfigurationsRequest, ListEventLogConfigurationsResponse> {
        return .init(
            input: input,
            command: self.listEventLogConfigurations,
            inputKey: \ListEventLogConfigurationsRequest.nextToken,
            outputKey: \ListEventLogConfigurationsResponse.nextToken,
            logger: logger
        )
    }
    /// Return PaginatorSequence for operation ``listEventLogConfigurations(_:logger:)``.
    ///
    /// - Parameters:
    ///   - maxResults: The maximum number of results to return at one time.
    ///   - logger: Logger used for logging
    @inlinable
    public func listEventLogConfigurationsPaginator(
        maxResults: Int? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) -> AWSClient.PaginatorSequence<ListEventLogConfigurationsRequest, ListEventLogConfigurationsResponse> {
        let input = ListEventLogConfigurationsRequest(
            maxResults: maxResults
        )
        return self.listEventLogConfigurationsPaginator(input, logger: logger)
    }

    /// Return PaginatorSequence for operation ``listManagedThingSchemas(_:logger:)``.
    ///
    /// - Parameters:
    ///   - input: Input for operation
    ///   - logger: Logger used for logging
    @inlinable
    public func listManagedThingSchemasPaginator(
        _ input: ListManagedThingSchemasRequest,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<ListManagedThingSchemasRequest, ListManagedThingSchemasResponse> {
        return .init(
            input: input,
            command: self.listManagedThingSchemas,
            inputKey: \ListManagedThingSchemasRequest.nextToken,
            outputKey: \ListManagedThingSchemasResponse.nextToken,
            logger: logger
        )
    }
    /// Return PaginatorSequence for operation ``listManagedThingSchemas(_:logger:)``.
    ///
    /// - Parameters:
    ///   - capabilityIdFilter: Filter on a capability id.
    ///   - endpointIdFilter: Filter on an endpoint id.
    ///   - identifier: The managed thing id.
    ///   - maxResults: The maximum number of results to return at one time.
    ///   - logger: Logger used for logging
    @inlinable
    public func listManagedThingSchemasPaginator(
        capabilityIdFilter: String? = nil,
        endpointIdFilter: String? = nil,
        identifier: String,
        maxResults: Int? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) -> AWSClient.PaginatorSequence<ListManagedThingSchemasRequest, ListManagedThingSchemasResponse> {
        let input = ListManagedThingSchemasRequest(
            capabilityIdFilter: capabilityIdFilter, 
            endpointIdFilter: endpointIdFilter, 
            identifier: identifier, 
            maxResults: maxResults
        )
        return self.listManagedThingSchemasPaginator(input, logger: logger)
    }

    /// Return PaginatorSequence for operation ``listManagedThings(_:logger:)``.
    ///
    /// - Parameters:
    ///   - input: Input for operation
    ///   - logger: Logger used for logging
    @inlinable
    public func listManagedThingsPaginator(
        _ input: ListManagedThingsRequest,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<ListManagedThingsRequest, ListManagedThingsResponse> {
        return .init(
            input: input,
            command: self.listManagedThings,
            inputKey: \ListManagedThingsRequest.nextToken,
            outputKey: \ListManagedThingsResponse.nextToken,
            logger: logger
        )
    }
    /// Return PaginatorSequence for operation ``listManagedThings(_:logger:)``.
    ///
    /// - Parameters:
    ///   - connectorPolicyIdFilter: Filter on a connector policy id for a managed thing.
    ///   - credentialLockerFilter: Filter on a credential locker for a managed thing.
    ///   - maxResults: The maximum number of results to return at one time.
    ///   - ownerFilter: Filter on device owners when listing managed things.
    ///   - parentControllerIdentifierFilter: Filter on a parent controller id for a managed thing.
    ///   - provisioningStatusFilter: Filter on the status of the device.
    ///   - roleFilter: Filter on the type of device used. This will be the Amazon Web Services hub controller, cloud device, or IoT device.
    ///   - serialNumberFilter: Filter on the serial number of the device.
    ///   - logger: Logger used for logging
    @inlinable
    public func listManagedThingsPaginator(
        connectorPolicyIdFilter: String? = nil,
        credentialLockerFilter: String? = nil,
        maxResults: Int? = nil,
        ownerFilter: String? = nil,
        parentControllerIdentifierFilter: String? = nil,
        provisioningStatusFilter: ProvisioningStatus? = nil,
        roleFilter: Role? = nil,
        serialNumberFilter: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) -> AWSClient.PaginatorSequence<ListManagedThingsRequest, ListManagedThingsResponse> {
        let input = ListManagedThingsRequest(
            connectorPolicyIdFilter: connectorPolicyIdFilter, 
            credentialLockerFilter: credentialLockerFilter, 
            maxResults: maxResults, 
            ownerFilter: ownerFilter, 
            parentControllerIdentifierFilter: parentControllerIdentifierFilter, 
            provisioningStatusFilter: provisioningStatusFilter, 
            roleFilter: roleFilter, 
            serialNumberFilter: serialNumberFilter
        )
        return self.listManagedThingsPaginator(input, logger: logger)
    }

    /// Return PaginatorSequence for operation ``listNotificationConfigurations(_:logger:)``.
    ///
    /// - Parameters:
    ///   - input: Input for operation
    ///   - logger: Logger used for logging
    @inlinable
    public func listNotificationConfigurationsPaginator(
        _ input: ListNotificationConfigurationsRequest,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<ListNotificationConfigurationsRequest, ListNotificationConfigurationsResponse> {
        return .init(
            input: input,
            command: self.listNotificationConfigurations,
            inputKey: \ListNotificationConfigurationsRequest.nextToken,
            outputKey: \ListNotificationConfigurationsResponse.nextToken,
            logger: logger
        )
    }
    /// Return PaginatorSequence for operation ``listNotificationConfigurations(_:logger:)``.
    ///
    /// - Parameters:
    ///   - maxResults: The maximum number of results to return at one time.
    ///   - logger: Logger used for logging
    @inlinable
    public func listNotificationConfigurationsPaginator(
        maxResults: Int? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) -> AWSClient.PaginatorSequence<ListNotificationConfigurationsRequest, ListNotificationConfigurationsResponse> {
        let input = ListNotificationConfigurationsRequest(
            maxResults: maxResults
        )
        return self.listNotificationConfigurationsPaginator(input, logger: logger)
    }

    /// Return PaginatorSequence for operation ``listOtaTaskConfigurations(_:logger:)``.
    ///
    /// - Parameters:
    ///   - input: Input for operation
    ///   - logger: Logger used for logging
    @inlinable
    public func listOtaTaskConfigurationsPaginator(
        _ input: ListOtaTaskConfigurationsRequest,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<ListOtaTaskConfigurationsRequest, ListOtaTaskConfigurationsResponse> {
        return .init(
            input: input,
            command: self.listOtaTaskConfigurations,
            inputKey: \ListOtaTaskConfigurationsRequest.nextToken,
            outputKey: \ListOtaTaskConfigurationsResponse.nextToken,
            logger: logger
        )
    }
    /// Return PaginatorSequence for operation ``listOtaTaskConfigurations(_:logger:)``.
    ///
    /// - Parameters:
    ///   - maxResults: The maximum number of results to return at one time.
    ///   - logger: Logger used for logging
    @inlinable
    public func listOtaTaskConfigurationsPaginator(
        maxResults: Int? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) -> AWSClient.PaginatorSequence<ListOtaTaskConfigurationsRequest, ListOtaTaskConfigurationsResponse> {
        let input = ListOtaTaskConfigurationsRequest(
            maxResults: maxResults
        )
        return self.listOtaTaskConfigurationsPaginator(input, logger: logger)
    }

    /// Return PaginatorSequence for operation ``listOtaTaskExecutions(_:logger:)``.
    ///
    /// - Parameters:
    ///   - input: Input for operation
    ///   - logger: Logger used for logging
    @inlinable
    public func listOtaTaskExecutionsPaginator(
        _ input: ListOtaTaskExecutionsRequest,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<ListOtaTaskExecutionsRequest, ListOtaTaskExecutionsResponse> {
        return .init(
            input: input,
            command: self.listOtaTaskExecutions,
            inputKey: \ListOtaTaskExecutionsRequest.nextToken,
            outputKey: \ListOtaTaskExecutionsResponse.nextToken,
            logger: logger
        )
    }
    /// Return PaginatorSequence for operation ``listOtaTaskExecutions(_:logger:)``.
    ///
    /// - Parameters:
    ///   - identifier: The over-the-air (OTA) task id.
    ///   - maxResults: The maximum number of results to return at one time.
    ///   - logger: Logger used for logging
    @inlinable
    public func listOtaTaskExecutionsPaginator(
        identifier: String,
        maxResults: Int? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) -> AWSClient.PaginatorSequence<ListOtaTaskExecutionsRequest, ListOtaTaskExecutionsResponse> {
        let input = ListOtaTaskExecutionsRequest(
            identifier: identifier, 
            maxResults: maxResults
        )
        return self.listOtaTaskExecutionsPaginator(input, logger: logger)
    }

    /// Return PaginatorSequence for operation ``listOtaTasks(_:logger:)``.
    ///
    /// - Parameters:
    ///   - input: Input for operation
    ///   - logger: Logger used for logging
    @inlinable
    public func listOtaTasksPaginator(
        _ input: ListOtaTasksRequest,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<ListOtaTasksRequest, ListOtaTasksResponse> {
        return .init(
            input: input,
            command: self.listOtaTasks,
            inputKey: \ListOtaTasksRequest.nextToken,
            outputKey: \ListOtaTasksResponse.nextToken,
            logger: logger
        )
    }
    /// Return PaginatorSequence for operation ``listOtaTasks(_:logger:)``.
    ///
    /// - Parameters:
    ///   - maxResults: The maximum number of results to return at one time.
    ///   - logger: Logger used for logging
    @inlinable
    public func listOtaTasksPaginator(
        maxResults: Int? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) -> AWSClient.PaginatorSequence<ListOtaTasksRequest, ListOtaTasksResponse> {
        let input = ListOtaTasksRequest(
            maxResults: maxResults
        )
        return self.listOtaTasksPaginator(input, logger: logger)
    }

    /// Return PaginatorSequence for operation ``listProvisioningProfiles(_:logger:)``.
    ///
    /// - Parameters:
    ///   - input: Input for operation
    ///   - logger: Logger used for logging
    @inlinable
    public func listProvisioningProfilesPaginator(
        _ input: ListProvisioningProfilesRequest,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<ListProvisioningProfilesRequest, ListProvisioningProfilesResponse> {
        return .init(
            input: input,
            command: self.listProvisioningProfiles,
            inputKey: \ListProvisioningProfilesRequest.nextToken,
            outputKey: \ListProvisioningProfilesResponse.nextToken,
            logger: logger
        )
    }
    /// Return PaginatorSequence for operation ``listProvisioningProfiles(_:logger:)``.
    ///
    /// - Parameters:
    ///   - maxResults: The maximum number of results to return at one time.
    ///   - logger: Logger used for logging
    @inlinable
    public func listProvisioningProfilesPaginator(
        maxResults: Int? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) -> AWSClient.PaginatorSequence<ListProvisioningProfilesRequest, ListProvisioningProfilesResponse> {
        let input = ListProvisioningProfilesRequest(
            maxResults: maxResults
        )
        return self.listProvisioningProfilesPaginator(input, logger: logger)
    }

    /// Return PaginatorSequence for operation ``listSchemaVersions(_:logger:)``.
    ///
    /// - Parameters:
    ///   - input: Input for operation
    ///   - logger: Logger used for logging
    @inlinable
    public func listSchemaVersionsPaginator(
        _ input: ListSchemaVersionsRequest,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<ListSchemaVersionsRequest, ListSchemaVersionsResponse> {
        return .init(
            input: input,
            command: self.listSchemaVersions,
            inputKey: \ListSchemaVersionsRequest.nextToken,
            outputKey: \ListSchemaVersionsResponse.nextToken,
            logger: logger
        )
    }
    /// Return PaginatorSequence for operation ``listSchemaVersions(_:logger:)``.
    ///
    /// - Parameters:
    ///   - maxResults: The maximum number of results to return at one time.
    ///   - namespace: Filter on the name of the schema version.
    ///   - schemaId: Filter on the id of the schema version.
    ///   - semanticVersion: The schema version. If this is left blank, it defaults to the latest version.
    ///   - type: Filter on the type of schema version.
    ///   - visibility: The visibility of the schema version.
    ///   - logger: Logger used for logging
    @inlinable
    public func listSchemaVersionsPaginator(
        maxResults: Int? = nil,
        namespace: String? = nil,
        schemaId: String? = nil,
        semanticVersion: String? = nil,
        type: SchemaVersionType,
        visibility: SchemaVersionVisibility? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) -> AWSClient.PaginatorSequence<ListSchemaVersionsRequest, ListSchemaVersionsResponse> {
        let input = ListSchemaVersionsRequest(
            maxResults: maxResults, 
            namespace: namespace, 
            schemaId: schemaId, 
            semanticVersion: semanticVersion, 
            type: type, 
            visibility: visibility
        )
        return self.listSchemaVersionsPaginator(input, logger: logger)
    }
}

extension IoTManagedIntegrations.ListCredentialLockersRequest: AWSPaginateToken {
    @inlinable
    public func usingPaginationToken(_ token: String) -> IoTManagedIntegrations.ListCredentialLockersRequest {
        return .init(
            maxResults: self.maxResults,
            nextToken: token
        )
    }
}

extension IoTManagedIntegrations.ListDestinationsRequest: AWSPaginateToken {
    @inlinable
    public func usingPaginationToken(_ token: String) -> IoTManagedIntegrations.ListDestinationsRequest {
        return .init(
            maxResults: self.maxResults,
            nextToken: token
        )
    }
}

extension IoTManagedIntegrations.ListEventLogConfigurationsRequest: AWSPaginateToken {
    @inlinable
    public func usingPaginationToken(_ token: String) -> IoTManagedIntegrations.ListEventLogConfigurationsRequest {
        return .init(
            maxResults: self.maxResults,
            nextToken: token
        )
    }
}

extension IoTManagedIntegrations.ListManagedThingSchemasRequest: AWSPaginateToken {
    @inlinable
    public func usingPaginationToken(_ token: String) -> IoTManagedIntegrations.ListManagedThingSchemasRequest {
        return .init(
            capabilityIdFilter: self.capabilityIdFilter,
            endpointIdFilter: self.endpointIdFilter,
            identifier: self.identifier,
            maxResults: self.maxResults,
            nextToken: token
        )
    }
}

extension IoTManagedIntegrations.ListManagedThingsRequest: AWSPaginateToken {
    @inlinable
    public func usingPaginationToken(_ token: String) -> IoTManagedIntegrations.ListManagedThingsRequest {
        return .init(
            connectorPolicyIdFilter: self.connectorPolicyIdFilter,
            credentialLockerFilter: self.credentialLockerFilter,
            maxResults: self.maxResults,
            nextToken: token,
            ownerFilter: self.ownerFilter,
            parentControllerIdentifierFilter: self.parentControllerIdentifierFilter,
            provisioningStatusFilter: self.provisioningStatusFilter,
            roleFilter: self.roleFilter,
            serialNumberFilter: self.serialNumberFilter
        )
    }
}

extension IoTManagedIntegrations.ListNotificationConfigurationsRequest: AWSPaginateToken {
    @inlinable
    public func usingPaginationToken(_ token: String) -> IoTManagedIntegrations.ListNotificationConfigurationsRequest {
        return .init(
            maxResults: self.maxResults,
            nextToken: token
        )
    }
}

extension IoTManagedIntegrations.ListOtaTaskConfigurationsRequest: AWSPaginateToken {
    @inlinable
    public func usingPaginationToken(_ token: String) -> IoTManagedIntegrations.ListOtaTaskConfigurationsRequest {
        return .init(
            maxResults: self.maxResults,
            nextToken: token
        )
    }
}

extension IoTManagedIntegrations.ListOtaTaskExecutionsRequest: AWSPaginateToken {
    @inlinable
    public func usingPaginationToken(_ token: String) -> IoTManagedIntegrations.ListOtaTaskExecutionsRequest {
        return .init(
            identifier: self.identifier,
            maxResults: self.maxResults,
            nextToken: token
        )
    }
}

extension IoTManagedIntegrations.ListOtaTasksRequest: AWSPaginateToken {
    @inlinable
    public func usingPaginationToken(_ token: String) -> IoTManagedIntegrations.ListOtaTasksRequest {
        return .init(
            maxResults: self.maxResults,
            nextToken: token
        )
    }
}

extension IoTManagedIntegrations.ListProvisioningProfilesRequest: AWSPaginateToken {
    @inlinable
    public func usingPaginationToken(_ token: String) -> IoTManagedIntegrations.ListProvisioningProfilesRequest {
        return .init(
            maxResults: self.maxResults,
            nextToken: token
        )
    }
}

extension IoTManagedIntegrations.ListSchemaVersionsRequest: AWSPaginateToken {
    @inlinable
    public func usingPaginationToken(_ token: String) -> IoTManagedIntegrations.ListSchemaVersionsRequest {
        return .init(
            maxResults: self.maxResults,
            namespace: self.namespace,
            nextToken: token,
            schemaId: self.schemaId,
            semanticVersion: self.semanticVersion,
            type: self.type,
            visibility: self.visibility
        )
    }
}
