//===----------------------------------------------------------------------===//
//
// This source file is part of the Soto for AWS open source project
//
// Copyright (c) 2017-2021 the Soto project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
// See CONTRIBUTORS.txt for the list of Soto project authors
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by https://github.com/soto-project/soto/tree/main/CodeGenerator. DO NOT EDIT.

import Foundation
import SotoCore

extension SecretsManager {
    // MARK: Enums

    public enum FilterNameStringType: String, CustomStringConvertible, Codable {
        case all
        case description
        case name
        case primaryRegion = "primary-region"
        case tagKey = "tag-key"
        case tagValue = "tag-value"
        public var description: String { return self.rawValue }
    }

    public enum SortOrderType: String, CustomStringConvertible, Codable {
        case asc
        case desc
        public var description: String { return self.rawValue }
    }

    public enum StatusType: String, CustomStringConvertible, Codable {
        case failed = "Failed"
        case inprogress = "InProgress"
        case insync = "InSync"
        public var description: String { return self.rawValue }
    }

    // MARK: Shapes

    public struct CancelRotateSecretRequest: AWSEncodableShape {
        /// Specifies the secret to cancel a rotation request. You can specify either the Amazon Resource Name (ARN) or the friendly name of the secret.  If you specify an ARN, we generally recommend that you specify a complete ARN. You can specify a partial ARN too—for example, if you don’t include the final hyphen and six random characters that Secrets Manager adds at the end of the ARN when you created the secret. A partial ARN match can work as long as it uniquely matches only one secret. However, if your secret has a name that ends in a hyphen followed by six characters (before Secrets Manager adds the hyphen and six characters to the ARN) and you try to use that as a partial ARN, then those characters cause Secrets Manager to assume that you’re specifying a complete ARN. This confusion can cause unexpected results. To avoid this situation, we recommend that you don’t create secret names ending with a hyphen followed by six characters. If you specify an incomplete ARN without the random suffix, and instead provide the 'friendly name', you must not include the random suffix. If you do include the random suffix added by Secrets Manager, you receive either a ResourceNotFoundException or an AccessDeniedException error, depending on your permissions.
        public let secretId: String

        public init(secretId: String) {
            self.secretId = secretId
        }

        public func validate(name: String) throws {
            try self.validate(self.secretId, name: "secretId", parent: name, max: 2048)
            try self.validate(self.secretId, name: "secretId", parent: name, min: 1)
        }

        private enum CodingKeys: String, CodingKey {
            case secretId = "SecretId"
        }
    }

    public struct CancelRotateSecretResponse: AWSDecodableShape {
        /// The ARN of the secret for which rotation was canceled.
        public let arn: String?
        /// The friendly name of the secret for which rotation was canceled.
        public let name: String?
        /// The unique identifier of the version of the secret created during the rotation. This version might not be complete, and should be evaluated for possible deletion. At the very least, you should remove the VersionStage value AWSPENDING to enable this version to be deleted. Failing to clean up a cancelled rotation can block you from successfully starting future rotations.
        public let versionId: String?

        public init(arn: String? = nil, name: String? = nil, versionId: String? = nil) {
            self.arn = arn
            self.name = name
            self.versionId = versionId
        }

        private enum CodingKeys: String, CodingKey {
            case arn = "ARN"
            case name = "Name"
            case versionId = "VersionId"
        }
    }

    public struct CreateSecretRequest: AWSEncodableShape {
        /// (Optional) Add a list of regions to replicate secrets. Secrets Manager replicates the KMSKeyID objects to the list of regions specified in the parameter.
        public let addReplicaRegions: [ReplicaRegionType]?
        /// (Optional) If you include SecretString or SecretBinary, then an initial version is created as part of the secret, and this parameter specifies a unique identifier for the new version.   If you use the Amazon Web Services CLI or one of the Amazon Web Services SDK to call this operation, then you can leave this parameter empty. The CLI or SDK generates a random UUID for you and includes it as the value for this parameter in the request. If you don't use the SDK and instead generate a raw HTTP request to the Secrets Manager service endpoint, then you must generate a ClientRequestToken yourself for the new version and include the value in the request.  This value helps ensure idempotency. Secrets Manager uses this value to prevent the accidental creation of duplicate versions if there are failures and retries during a rotation. We recommend that you generate a UUID-type value to ensure uniqueness of your versions within the specified secret.    If the ClientRequestToken value isn't already associated with a version of the secret then a new version of the secret is created.    If a version with this value already exists and the version SecretString and SecretBinary values are the same as those in the request, then the request is ignored.   If a version with this value already exists and that version's SecretString and SecretBinary values are different from those in the request, then the request fails because you cannot modify an existing version. Instead, use PutSecretValue to create a new version.   This value becomes the VersionId of the new version.
        public let clientRequestToken: String?
        /// (Optional) Specifies a user-provided description of the secret.
        public let description: String?
        /// (Optional) If set, the replication overwrites a secret with the same name in the destination region.
        public let forceOverwriteReplicaSecret: Bool?
        /// (Optional) Specifies the ARN, Key ID, or alias of the Amazon Web Services KMS customer master key (CMK) to be used to encrypt the SecretString or SecretBinary values in the versions stored in this secret. You can specify any of the supported ways to identify a Amazon Web Services KMS key ID. If you need to reference a CMK in a different account, you can use only the key ARN or the alias ARN. If you don't specify this value, then Secrets Manager defaults to using the Amazon Web Services account's default CMK (the one named aws/secretsmanager). If a Amazon Web Services KMS CMK with that name doesn't yet exist, then Secrets Manager creates it for you automatically the first time it needs to encrypt a version's SecretString or SecretBinary fields.  You can use the account default CMK to encrypt and decrypt only if you call this operation using credentials from the same account that owns the secret. If the secret resides in a different account, then you must create a custom CMK and specify the ARN in this field.
        public let kmsKeyId: String?
        /// Specifies the friendly name of the new secret. The secret name must be ASCII letters, digits, or the following characters : /_+=.@-  Do not end your secret name with a hyphen followed by six characters. If you do so, you risk confusion and unexpected results when searching for a secret by partial ARN. Secrets Manager automatically adds a hyphen and six random characters at the end of the ARN.
        public let name: String
        /// (Optional) Specifies binary data that you want to encrypt and store in the new version of the secret. To use this parameter in the command-line tools, we recommend that you store your binary data in a file and then use the appropriate technique for your tool to pass the contents of the file as a parameter. Either SecretString or SecretBinary must have a value, but not both. They cannot both be empty. This parameter is not available using the Secrets Manager console. It can be accessed only by using the Amazon Web Services CLI or one of the Amazon Web Services SDKs.
        public let secretBinary: Data?
        /// (Optional) Specifies text data that you want to encrypt and store in this new version of the secret. Either SecretString or SecretBinary must have a value, but not both. They cannot both be empty. If you create a secret by using the Secrets Manager console then Secrets Manager puts the protected secret text in only the SecretString parameter. The Secrets Manager console stores the information as a JSON structure of key/value pairs that the Lambda rotation function knows how to parse. For storing multiple values, we recommend that you use a JSON text string argument and specify key/value pairs. For information on how to format a JSON parameter for the various command line tool environments, see Using JSON for Parameters in the CLI User Guide. For example:  {"username":"bob","password":"abc123xyz456"}  If your command-line tool or SDK requires quotation marks around the parameter, you should use single quotes to avoid confusion with the double quotes required in the JSON text.
        public let secretString: String?
        /// (Optional) Specifies a list of user-defined tags that are attached to the secret. Each tag is a "Key" and "Value" pair of strings. This operation only appends tags to the existing list of tags. To remove tags, you must use UntagResource.    Secrets Manager tag key names are case sensitive. A tag with the key "ABC" is a different tag from one with key "abc".   If you check tags in IAM policy Condition elements as part of your security strategy, then adding or removing a tag can change permissions. If the successful completion of this operation would result in you losing your permissions for this secret, then this operation is blocked and returns an Access Denied error.    This parameter requires a JSON text string argument. For information on how to format a JSON parameter for the various command line tool environments, see Using JSON for Parameters in the CLI User Guide. For example:  [{"Key":"CostCenter","Value":"12345"},{"Key":"environment","Value":"production"}]  If your command-line tool or SDK requires quotation marks around the parameter, you should use single quotes to avoid confusion with the double quotes required in the JSON text.  The following basic restrictions apply to tags:   Maximum number of tags per secret—50   Maximum key length—127 Unicode characters in UTF-8   Maximum value length—255 Unicode characters in UTF-8   Tag keys and values are case sensitive.   Do not use the aws: prefix in your tag names or values because Amazon Web Services reserves it for Amazon Web Services use. You can't edit or delete tag names or values with this prefix. Tags with this prefix do not count against your tags per secret limit.   If you use your tagging schema across multiple services and resources, remember other services might have restrictions on allowed characters. Generally allowed characters: letters, spaces, and numbers representable in UTF-8, plus the following special characters: + - = . _ : / @.
        public let tags: [Tag]?

        public init(addReplicaRegions: [ReplicaRegionType]? = nil, clientRequestToken: String? = CreateSecretRequest.idempotencyToken(), description: String? = nil, forceOverwriteReplicaSecret: Bool? = nil, kmsKeyId: String? = nil, name: String, secretBinary: Data? = nil, secretString: String? = nil, tags: [Tag]? = nil) {
            self.addReplicaRegions = addReplicaRegions
            self.clientRequestToken = clientRequestToken
            self.description = description
            self.forceOverwriteReplicaSecret = forceOverwriteReplicaSecret
            self.kmsKeyId = kmsKeyId
            self.name = name
            self.secretBinary = secretBinary
            self.secretString = secretString
            self.tags = tags
        }

        public func validate(name: String) throws {
            try self.addReplicaRegions?.forEach {
                try $0.validate(name: "\(name).addReplicaRegions[]")
            }
            try self.validate(self.addReplicaRegions, name: "addReplicaRegions", parent: name, min: 1)
            try self.validate(self.clientRequestToken, name: "clientRequestToken", parent: name, max: 64)
            try self.validate(self.clientRequestToken, name: "clientRequestToken", parent: name, min: 32)
            try self.validate(self.description, name: "description", parent: name, max: 2048)
            try self.validate(self.kmsKeyId, name: "kmsKeyId", parent: name, max: 2048)
            try self.validate(self.kmsKeyId, name: "kmsKeyId", parent: name, min: 0)
            try self.validate(self.name, name: "name", parent: name, max: 512)
            try self.validate(self.name, name: "name", parent: name, min: 1)
            try self.validate(self.secretBinary, name: "secretBinary", parent: name, max: 65536)
            try self.validate(self.secretBinary, name: "secretBinary", parent: name, min: 0)
            try self.validate(self.secretString, name: "secretString", parent: name, max: 65536)
            try self.validate(self.secretString, name: "secretString", parent: name, min: 0)
            try self.tags?.forEach {
                try $0.validate(name: "\(name).tags[]")
            }
        }

        private enum CodingKeys: String, CodingKey {
            case addReplicaRegions = "AddReplicaRegions"
            case clientRequestToken = "ClientRequestToken"
            case description = "Description"
            case forceOverwriteReplicaSecret = "ForceOverwriteReplicaSecret"
            case kmsKeyId = "KmsKeyId"
            case name = "Name"
            case secretBinary = "SecretBinary"
            case secretString = "SecretString"
            case tags = "Tags"
        }
    }

    public struct CreateSecretResponse: AWSDecodableShape {
        /// The Amazon Resource Name (ARN) of the secret that you just created.  Secrets Manager automatically adds several random characters to the name at the end of the ARN when you initially create a secret. This affects only the ARN and not the actual friendly name. This ensures that if you create a new secret with the same name as an old secret that you previously deleted, then users with access to the old secret don't automatically get access to the new secret because the ARNs are different.
        public let arn: String?
        /// The friendly name of the secret that you just created.
        public let name: String?
        /// Describes a list of replication status objects as InProgress, Failed or InSync.
        public let replicationStatus: [ReplicationStatusType]?
        /// The unique identifier associated with the version of the secret you just created.
        public let versionId: String?

        public init(arn: String? = nil, name: String? = nil, replicationStatus: [ReplicationStatusType]? = nil, versionId: String? = nil) {
            self.arn = arn
            self.name = name
            self.replicationStatus = replicationStatus
            self.versionId = versionId
        }

        private enum CodingKeys: String, CodingKey {
            case arn = "ARN"
            case name = "Name"
            case replicationStatus = "ReplicationStatus"
            case versionId = "VersionId"
        }
    }

    public struct DeleteResourcePolicyRequest: AWSEncodableShape {
        /// Specifies the secret that you want to delete the attached resource-based policy for. You can specify either the Amazon Resource Name (ARN) or the friendly name of the secret.  If you specify an ARN, we generally recommend that you specify a complete ARN. You can specify a partial ARN too—for example, if you don’t include the final hyphen and six random characters that Secrets Manager adds at the end of the ARN when you created the secret. A partial ARN match can work as long as it uniquely matches only one secret. However, if your secret has a name that ends in a hyphen followed by six characters (before Secrets Manager adds the hyphen and six characters to the ARN) and you try to use that as a partial ARN, then those characters cause Secrets Manager to assume that you’re specifying a complete ARN. This confusion can cause unexpected results. To avoid this situation, we recommend that you don’t create secret names ending with a hyphen followed by six characters. If you specify an incomplete ARN without the random suffix, and instead provide the 'friendly name', you must not include the random suffix. If you do include the random suffix added by Secrets Manager, you receive either a ResourceNotFoundException or an AccessDeniedException error, depending on your permissions.
        public let secretId: String

        public init(secretId: String) {
            self.secretId = secretId
        }

        public func validate(name: String) throws {
            try self.validate(self.secretId, name: "secretId", parent: name, max: 2048)
            try self.validate(self.secretId, name: "secretId", parent: name, min: 1)
        }

        private enum CodingKeys: String, CodingKey {
            case secretId = "SecretId"
        }
    }

    public struct DeleteResourcePolicyResponse: AWSDecodableShape {
        /// The ARN of the secret that the resource-based policy was deleted for.
        public let arn: String?
        /// The friendly name of the secret that the resource-based policy was deleted for.
        public let name: String?

        public init(arn: String? = nil, name: String? = nil) {
            self.arn = arn
            self.name = name
        }

        private enum CodingKeys: String, CodingKey {
            case arn = "ARN"
            case name = "Name"
        }
    }

    public struct DeleteSecretRequest: AWSEncodableShape {
        /// (Optional) Specifies that the secret is to be deleted without any recovery window. You can't use both this parameter and the RecoveryWindowInDays parameter in the same API call. An asynchronous background process performs the actual deletion, so there can be a short delay before the operation completes. If you write code to delete and then immediately recreate a secret with the same name, ensure that your code includes appropriate back off and retry logic.  Use this parameter with caution. This parameter causes the operation to skip the normal waiting period before the permanent deletion that Amazon Web Services would normally impose with the RecoveryWindowInDays parameter. If you delete a secret with the ForceDeleteWithouRecovery parameter, then you have no opportunity to recover the secret. You lose the secret permanently.   If you use this parameter and include a previously deleted or nonexistent secret, the operation does not return the error ResourceNotFoundException in order to correctly handle retries.
        public let forceDeleteWithoutRecovery: Bool?
        /// (Optional) Specifies the number of days that Secrets Manager waits before Secrets Manager can delete the secret. You can't use both this parameter and the ForceDeleteWithoutRecovery parameter in the same API call. This value can range from 7 to 30 days with a default value of 30.
        public let recoveryWindowInDays: Int64?
        /// Specifies the secret to delete. You can specify either the Amazon Resource Name (ARN) or the friendly name of the secret.  If you specify an ARN, we generally recommend that you specify a complete ARN. You can specify a partial ARN too—for example, if you don’t include the final hyphen and six random characters that Secrets Manager adds at the end of the ARN when you created the secret. A partial ARN match can work as long as it uniquely matches only one secret. However, if your secret has a name that ends in a hyphen followed by six characters (before Secrets Manager adds the hyphen and six characters to the ARN) and you try to use that as a partial ARN, then those characters cause Secrets Manager to assume that you’re specifying a complete ARN. This confusion can cause unexpected results. To avoid this situation, we recommend that you don’t create secret names ending with a hyphen followed by six characters. If you specify an incomplete ARN without the random suffix, and instead provide the 'friendly name', you must not include the random suffix. If you do include the random suffix added by Secrets Manager, you receive either a ResourceNotFoundException or an AccessDeniedException error, depending on your permissions.
        public let secretId: String

        public init(forceDeleteWithoutRecovery: Bool? = nil, recoveryWindowInDays: Int64? = nil, secretId: String) {
            self.forceDeleteWithoutRecovery = forceDeleteWithoutRecovery
            self.recoveryWindowInDays = recoveryWindowInDays
            self.secretId = secretId
        }

        public func validate(name: String) throws {
            try self.validate(self.secretId, name: "secretId", parent: name, max: 2048)
            try self.validate(self.secretId, name: "secretId", parent: name, min: 1)
        }

        private enum CodingKeys: String, CodingKey {
            case forceDeleteWithoutRecovery = "ForceDeleteWithoutRecovery"
            case recoveryWindowInDays = "RecoveryWindowInDays"
            case secretId = "SecretId"
        }
    }

    public struct DeleteSecretResponse: AWSDecodableShape {
        /// The ARN of the secret that is now scheduled for deletion.
        public let arn: String?
        /// The date and time after which this secret can be deleted by Secrets Manager and can no longer be restored. This value is the date and time of the delete request plus the number of days specified in RecoveryWindowInDays.
        public let deletionDate: Date?
        /// The friendly name of the secret currently scheduled for deletion.
        public let name: String?

        public init(arn: String? = nil, deletionDate: Date? = nil, name: String? = nil) {
            self.arn = arn
            self.deletionDate = deletionDate
            self.name = name
        }

        private enum CodingKeys: String, CodingKey {
            case arn = "ARN"
            case deletionDate = "DeletionDate"
            case name = "Name"
        }
    }

    public struct DescribeSecretRequest: AWSEncodableShape {
        /// The identifier of the secret whose details you want to retrieve. You can specify either the Amazon Resource Name (ARN) or the friendly name of the secret.  If you specify an ARN, we generally recommend that you specify a complete ARN. You can specify a partial ARN too—for example, if you don’t include the final hyphen and six random characters that Secrets Manager adds at the end of the ARN when you created the secret. A partial ARN match can work as long as it uniquely matches only one secret. However, if your secret has a name that ends in a hyphen followed by six characters (before Secrets Manager adds the hyphen and six characters to the ARN) and you try to use that as a partial ARN, then those characters cause Secrets Manager to assume that you’re specifying a complete ARN. This confusion can cause unexpected results. To avoid this situation, we recommend that you don’t create secret names ending with a hyphen followed by six characters. If you specify an incomplete ARN without the random suffix, and instead provide the 'friendly name', you must not include the random suffix. If you do include the random suffix added by Secrets Manager, you receive either a ResourceNotFoundException or an AccessDeniedException error, depending on your permissions.
        public let secretId: String

        public init(secretId: String) {
            self.secretId = secretId
        }

        public func validate(name: String) throws {
            try self.validate(self.secretId, name: "secretId", parent: name, max: 2048)
            try self.validate(self.secretId, name: "secretId", parent: name, min: 1)
        }

        private enum CodingKeys: String, CodingKey {
            case secretId = "SecretId"
        }
    }

    public struct DescribeSecretResponse: AWSDecodableShape {
        /// The ARN of the secret.
        public let arn: String?
        /// The date you created the secret.
        public let createdDate: Date?
        /// This value exists if the secret is scheduled for deletion. Some time after the specified date and time, Secrets Manager deletes the secret and all of its versions. If a secret is scheduled for deletion, then its details, including the encrypted secret information, is not accessible. To cancel a scheduled deletion and restore access, use RestoreSecret.
        public let deletedDate: Date?
        /// The user-provided description of the secret.
        public let description: String?
        /// The ARN or alias of the Amazon Web Services KMS customer master key (CMK) that's used to encrypt the SecretString or SecretBinary fields in each version of the secret. If you don't provide a key, then Secrets Manager defaults to encrypting the secret fields with the default Amazon Web Services KMS CMK (the one named awssecretsmanager) for this account.
        public let kmsKeyId: String?
        /// The last date that this secret was accessed. This value is truncated to midnight of the date and therefore shows only the date, not the time.
        public let lastAccessedDate: Date?
        /// The last date and time that this secret was modified in any way.
        public let lastChangedDate: Date?
        /// The last date and time that the rotation process for this secret was invoked. The most recent date and time that the Secrets Manager rotation process successfully completed. If the secret doesn't rotate, Secrets Manager returns a null value.
        public let lastRotatedDate: Date?
        /// The user-provided friendly name of the secret.
        public let name: String?
        /// Returns the name of the service that created this secret.
        public let owningService: String?
        /// Specifies the primary region for secret replication.
        public let primaryRegion: String?
        /// Describes a list of replication status objects as InProgress, Failed or InSync.P
        public let replicationStatus: [ReplicationStatusType]?
        /// Specifies whether automatic rotation is enabled for this secret. To enable rotation, use RotateSecret with AutomaticallyRotateAfterDays set to a value greater than 0. To disable rotation, use CancelRotateSecret.
        public let rotationEnabled: Bool?
        /// The ARN of a Lambda function that's invoked by Secrets Manager to rotate the secret either automatically per the schedule or manually by a call to RotateSecret.
        public let rotationLambdaARN: String?
        /// A structure with the rotation configuration for this secret.
        public let rotationRules: RotationRulesType?
        /// The list of user-defined tags that are associated with the secret. To add tags to a secret, use TagResource. To remove tags, use UntagResource.
        public let tags: [Tag]?
        /// A list of all of the currently assigned VersionStage staging labels and the VersionId that each is attached to. Staging labels are used to keep track of the different versions during the rotation process.  A version that does not have any staging labels attached is considered deprecated and subject to deletion. Such versions are not included in this list.
        public let versionIdsToStages: [String: [String]]?

        public init(arn: String? = nil, createdDate: Date? = nil, deletedDate: Date? = nil, description: String? = nil, kmsKeyId: String? = nil, lastAccessedDate: Date? = nil, lastChangedDate: Date? = nil, lastRotatedDate: Date? = nil, name: String? = nil, owningService: String? = nil, primaryRegion: String? = nil, replicationStatus: [ReplicationStatusType]? = nil, rotationEnabled: Bool? = nil, rotationLambdaARN: String? = nil, rotationRules: RotationRulesType? = nil, tags: [Tag]? = nil, versionIdsToStages: [String: [String]]? = nil) {
            self.arn = arn
            self.createdDate = createdDate
            self.deletedDate = deletedDate
            self.description = description
            self.kmsKeyId = kmsKeyId
            self.lastAccessedDate = lastAccessedDate
            self.lastChangedDate = lastChangedDate
            self.lastRotatedDate = lastRotatedDate
            self.name = name
            self.owningService = owningService
            self.primaryRegion = primaryRegion
            self.replicationStatus = replicationStatus
            self.rotationEnabled = rotationEnabled
            self.rotationLambdaARN = rotationLambdaARN
            self.rotationRules = rotationRules
            self.tags = tags
            self.versionIdsToStages = versionIdsToStages
        }

        private enum CodingKeys: String, CodingKey {
            case arn = "ARN"
            case createdDate = "CreatedDate"
            case deletedDate = "DeletedDate"
            case description = "Description"
            case kmsKeyId = "KmsKeyId"
            case lastAccessedDate = "LastAccessedDate"
            case lastChangedDate = "LastChangedDate"
            case lastRotatedDate = "LastRotatedDate"
            case name = "Name"
            case owningService = "OwningService"
            case primaryRegion = "PrimaryRegion"
            case replicationStatus = "ReplicationStatus"
            case rotationEnabled = "RotationEnabled"
            case rotationLambdaARN = "RotationLambdaARN"
            case rotationRules = "RotationRules"
            case tags = "Tags"
            case versionIdsToStages = "VersionIdsToStages"
        }
    }

    public struct Filter: AWSEncodableShape {
        /// Filters your list of secrets by a specific key.
        public let key: FilterNameStringType?
        /// Filters your list of secrets by a specific value. You can prefix your search value with an exclamation mark (!) in order to perform negation filters.
        public let values: [String]?

        public init(key: FilterNameStringType? = nil, values: [String]? = nil) {
            self.key = key
            self.values = values
        }

        public func validate(name: String) throws {
            try self.values?.forEach {
                try validate($0, name: "values[]", parent: name, max: 512)
                try validate($0, name: "values[]", parent: name, pattern: "^\\!?[a-zA-Z0-9 :_@\\/\\+\\=\\.\\-]*$")
            }
            try self.validate(self.values, name: "values", parent: name, max: 10)
            try self.validate(self.values, name: "values", parent: name, min: 1)
        }

        private enum CodingKeys: String, CodingKey {
            case key = "Key"
            case values = "Values"
        }
    }

    public struct GetRandomPasswordRequest: AWSEncodableShape {
        /// A string that includes characters that should not be included in the generated password. The default is that all characters from the included sets can be used.
        public let excludeCharacters: String?
        /// Specifies that the generated password should not include lowercase letters. The default if you do not include this switch parameter is that lowercase letters can be included.
        public let excludeLowercase: Bool?
        /// Specifies that the generated password should not include digits. The default if you do not include this switch parameter is that digits can be included.
        public let excludeNumbers: Bool?
        /// Specifies that the generated password should not include punctuation characters. The default if you do not include this switch parameter is that punctuation characters can be included. The following are the punctuation characters that can be included in the generated password if you don't explicitly exclude them with ExcludeCharacters or ExcludePunctuation:  ! " # $ % &amp; ' ( ) * + , - . / : ; &lt; = &gt; ? @ [ \ ] ^ _ ` { | } ~
        public let excludePunctuation: Bool?
        /// Specifies that the generated password should not include uppercase letters. The default if you do not include this switch parameter is that uppercase letters can be included.
        public let excludeUppercase: Bool?
        /// Specifies that the generated password can include the space character. The default if you do not include this switch parameter is that the space character is not included.
        public let includeSpace: Bool?
        /// The desired length of the generated password. The default value if you do not include this parameter is 32 characters.
        public let passwordLength: Int64?
        /// A boolean value that specifies whether the generated password must include at least one of every allowed character type. The default value is True and the operation requires at least one of every character type.
        public let requireEachIncludedType: Bool?

        public init(excludeCharacters: String? = nil, excludeLowercase: Bool? = nil, excludeNumbers: Bool? = nil, excludePunctuation: Bool? = nil, excludeUppercase: Bool? = nil, includeSpace: Bool? = nil, passwordLength: Int64? = nil, requireEachIncludedType: Bool? = nil) {
            self.excludeCharacters = excludeCharacters
            self.excludeLowercase = excludeLowercase
            self.excludeNumbers = excludeNumbers
            self.excludePunctuation = excludePunctuation
            self.excludeUppercase = excludeUppercase
            self.includeSpace = includeSpace
            self.passwordLength = passwordLength
            self.requireEachIncludedType = requireEachIncludedType
        }

        public func validate(name: String) throws {
            try self.validate(self.excludeCharacters, name: "excludeCharacters", parent: name, max: 4096)
            try self.validate(self.excludeCharacters, name: "excludeCharacters", parent: name, min: 0)
            try self.validate(self.passwordLength, name: "passwordLength", parent: name, max: 4096)
            try self.validate(self.passwordLength, name: "passwordLength", parent: name, min: 1)
        }

        private enum CodingKeys: String, CodingKey {
            case excludeCharacters = "ExcludeCharacters"
            case excludeLowercase = "ExcludeLowercase"
            case excludeNumbers = "ExcludeNumbers"
            case excludePunctuation = "ExcludePunctuation"
            case excludeUppercase = "ExcludeUppercase"
            case includeSpace = "IncludeSpace"
            case passwordLength = "PasswordLength"
            case requireEachIncludedType = "RequireEachIncludedType"
        }
    }

    public struct GetRandomPasswordResponse: AWSDecodableShape {
        /// A string with the generated password.
        public let randomPassword: String?

        public init(randomPassword: String? = nil) {
            self.randomPassword = randomPassword
        }

        private enum CodingKeys: String, CodingKey {
            case randomPassword = "RandomPassword"
        }
    }

    public struct GetResourcePolicyRequest: AWSEncodableShape {
        /// Specifies the secret that you want to retrieve the attached resource-based policy for. You can specify either the Amazon Resource Name (ARN) or the friendly name of the secret.  If you specify an ARN, we generally recommend that you specify a complete ARN. You can specify a partial ARN too—for example, if you don’t include the final hyphen and six random characters that Secrets Manager adds at the end of the ARN when you created the secret. A partial ARN match can work as long as it uniquely matches only one secret. However, if your secret has a name that ends in a hyphen followed by six characters (before Secrets Manager adds the hyphen and six characters to the ARN) and you try to use that as a partial ARN, then those characters cause Secrets Manager to assume that you’re specifying a complete ARN. This confusion can cause unexpected results. To avoid this situation, we recommend that you don’t create secret names ending with a hyphen followed by six characters. If you specify an incomplete ARN without the random suffix, and instead provide the 'friendly name', you must not include the random suffix. If you do include the random suffix added by Secrets Manager, you receive either a ResourceNotFoundException or an AccessDeniedException error, depending on your permissions.
        public let secretId: String

        public init(secretId: String) {
            self.secretId = secretId
        }

        public func validate(name: String) throws {
            try self.validate(self.secretId, name: "secretId", parent: name, max: 2048)
            try self.validate(self.secretId, name: "secretId", parent: name, min: 1)
        }

        private enum CodingKeys: String, CodingKey {
            case secretId = "SecretId"
        }
    }

    public struct GetResourcePolicyResponse: AWSDecodableShape {
        /// The ARN of the secret that the resource-based policy was retrieved for.
        public let arn: String?
        /// The friendly name of the secret that the resource-based policy was retrieved for.
        public let name: String?
        /// A JSON-formatted string that describes the permissions that are associated with the attached secret. These permissions are combined with any permissions that are associated with the user or role that attempts to access this secret. The combined permissions specify who can access the secret and what actions they can perform. For more information, see Authentication and Access Control for Amazon Web Services Secrets Manager in the Amazon Web Services Secrets Manager User Guide.
        public let resourcePolicy: String?

        public init(arn: String? = nil, name: String? = nil, resourcePolicy: String? = nil) {
            self.arn = arn
            self.name = name
            self.resourcePolicy = resourcePolicy
        }

        private enum CodingKeys: String, CodingKey {
            case arn = "ARN"
            case name = "Name"
            case resourcePolicy = "ResourcePolicy"
        }
    }

    public struct GetSecretValueRequest: AWSEncodableShape {
        /// Specifies the secret containing the version that you want to retrieve. You can specify either the Amazon Resource Name (ARN) or the friendly name of the secret.  If you specify an ARN, we generally recommend that you specify a complete ARN. You can specify a partial ARN too—for example, if you don’t include the final hyphen and six random characters that Secrets Manager adds at the end of the ARN when you created the secret. A partial ARN match can work as long as it uniquely matches only one secret. However, if your secret has a name that ends in a hyphen followed by six characters (before Secrets Manager adds the hyphen and six characters to the ARN) and you try to use that as a partial ARN, then those characters cause Secrets Manager to assume that you’re specifying a complete ARN. This confusion can cause unexpected results. To avoid this situation, we recommend that you don’t create secret names ending with a hyphen followed by six characters. If you specify an incomplete ARN without the random suffix, and instead provide the 'friendly name', you must not include the random suffix. If you do include the random suffix added by Secrets Manager, you receive either a ResourceNotFoundException or an AccessDeniedException error, depending on your permissions.
        public let secretId: String
        /// Specifies the unique identifier of the version of the secret that you want to retrieve. If you specify both this parameter and VersionStage, the two parameters must refer to the same secret version. If you don't specify either a VersionStage or VersionId then the default is to perform the operation on the version with the VersionStage value of AWSCURRENT. This value is typically a UUID-type value with 32 hexadecimal digits.
        public let versionId: String?
        /// Specifies the secret version that you want to retrieve by the staging label attached to the version. Staging labels are used to keep track of different versions during the rotation process. If you specify both this parameter and VersionId, the two parameters must refer to the same secret version . If you don't specify either a VersionStage or VersionId, then the default is to perform the operation on the version with the VersionStage value of AWSCURRENT.
        public let versionStage: String?

        public init(secretId: String, versionId: String? = nil, versionStage: String? = nil) {
            self.secretId = secretId
            self.versionId = versionId
            self.versionStage = versionStage
        }

        public func validate(name: String) throws {
            try self.validate(self.secretId, name: "secretId", parent: name, max: 2048)
            try self.validate(self.secretId, name: "secretId", parent: name, min: 1)
            try self.validate(self.versionId, name: "versionId", parent: name, max: 64)
            try self.validate(self.versionId, name: "versionId", parent: name, min: 32)
            try self.validate(self.versionStage, name: "versionStage", parent: name, max: 256)
            try self.validate(self.versionStage, name: "versionStage", parent: name, min: 1)
        }

        private enum CodingKeys: String, CodingKey {
            case secretId = "SecretId"
            case versionId = "VersionId"
            case versionStage = "VersionStage"
        }
    }

    public struct GetSecretValueResponse: AWSDecodableShape {
        /// The ARN of the secret.
        public let arn: String?
        /// The date and time that this version of the secret was created.
        public let createdDate: Date?
        /// The friendly name of the secret.
        public let name: String?
        /// The decrypted part of the protected secret information that was originally provided as binary data in the form of a byte array. The response parameter represents the binary data as a base64-encoded string. This parameter is not used if the secret is created by the Secrets Manager console. If you store custom information in this field of the secret, then you must code your Lambda rotation function to parse and interpret whatever you store in the SecretString or SecretBinary fields.
        public let secretBinary: Data?
        /// The decrypted part of the protected secret information that was originally provided as a string. If you create this secret by using the Secrets Manager console then only the SecretString parameter contains data. Secrets Manager stores the information as a JSON structure of key/value pairs that the Lambda rotation function knows how to parse. If you store custom information in the secret by using the CreateSecret, UpdateSecret, or PutSecretValue API operations instead of the Secrets Manager console, or by using the Other secret type in the console, then you must code your Lambda rotation function to parse and interpret those values.
        public let secretString: String?
        /// The unique identifier of this version of the secret.
        public let versionId: String?
        /// A list of all of the staging labels currently attached to this version of the secret.
        public let versionStages: [String]?

        public init(arn: String? = nil, createdDate: Date? = nil, name: String? = nil, secretBinary: Data? = nil, secretString: String? = nil, versionId: String? = nil, versionStages: [String]? = nil) {
            self.arn = arn
            self.createdDate = createdDate
            self.name = name
            self.secretBinary = secretBinary
            self.secretString = secretString
            self.versionId = versionId
            self.versionStages = versionStages
        }

        private enum CodingKeys: String, CodingKey {
            case arn = "ARN"
            case createdDate = "CreatedDate"
            case name = "Name"
            case secretBinary = "SecretBinary"
            case secretString = "SecretString"
            case versionId = "VersionId"
            case versionStages = "VersionStages"
        }
    }

    public struct ListSecretVersionIdsRequest: AWSEncodableShape {
        /// (Optional) Specifies that you want the results to include versions that do not have any staging labels attached to them. Such versions are considered deprecated and are subject to deletion by Secrets Manager as needed.
        public let includeDeprecated: Bool?
        /// (Optional) Limits the number of results you want to include in the response. If you don't include this parameter, it defaults to a value that's specific to the operation. If additional items exist beyond the maximum you specify, the NextToken response element is present and has a value (isn't null). Include that value as the NextToken request parameter in the next call to the operation to get the next part of the results. Note that Secrets Manager might return fewer results than the maximum even when there are more results available. You should check NextToken after every operation to ensure that you receive all of the results.
        public let maxResults: Int?
        /// (Optional) Use this parameter in a request if you receive a NextToken response in a previous request indicating there's more output available. In a subsequent call, set it to the value of the previous call NextToken response to indicate where the output should continue from.
        public let nextToken: String?
        /// The identifier for the secret containing the versions you want to list. You can specify either the Amazon Resource Name (ARN) or the friendly name of the secret.  If you specify an ARN, we generally recommend that you specify a complete ARN. You can specify a partial ARN too—for example, if you don’t include the final hyphen and six random characters that Secrets Manager adds at the end of the ARN when you created the secret. A partial ARN match can work as long as it uniquely matches only one secret. However, if your secret has a name that ends in a hyphen followed by six characters (before Secrets Manager adds the hyphen and six characters to the ARN) and you try to use that as a partial ARN, then those characters cause Secrets Manager to assume that you’re specifying a complete ARN. This confusion can cause unexpected results. To avoid this situation, we recommend that you don’t create secret names ending with a hyphen followed by six characters. If you specify an incomplete ARN without the random suffix, and instead provide the 'friendly name', you must not include the random suffix. If you do include the random suffix added by Secrets Manager, you receive either a ResourceNotFoundException or an AccessDeniedException error, depending on your permissions.
        public let secretId: String

        public init(includeDeprecated: Bool? = nil, maxResults: Int? = nil, nextToken: String? = nil, secretId: String) {
            self.includeDeprecated = includeDeprecated
            self.maxResults = maxResults
            self.nextToken = nextToken
            self.secretId = secretId
        }

        public func validate(name: String) throws {
            try self.validate(self.maxResults, name: "maxResults", parent: name, max: 100)
            try self.validate(self.maxResults, name: "maxResults", parent: name, min: 1)
            try self.validate(self.nextToken, name: "nextToken", parent: name, max: 4096)
            try self.validate(self.nextToken, name: "nextToken", parent: name, min: 1)
            try self.validate(self.secretId, name: "secretId", parent: name, max: 2048)
            try self.validate(self.secretId, name: "secretId", parent: name, min: 1)
        }

        private enum CodingKeys: String, CodingKey {
            case includeDeprecated = "IncludeDeprecated"
            case maxResults = "MaxResults"
            case nextToken = "NextToken"
            case secretId = "SecretId"
        }
    }

    public struct ListSecretVersionIdsResponse: AWSDecodableShape {
        /// The Amazon Resource Name (ARN) for the secret.  Secrets Manager automatically adds several random characters to the name at the end of the ARN when you initially create a secret. This affects only the ARN and not the actual friendly name. This ensures that if you create a new secret with the same name as an old secret that you previously deleted, then users with access to the old secret don't automatically get access to the new secret because the ARNs are different.
        public let arn: String?
        /// The friendly name of the secret.
        public let name: String?
        /// If present in the response, this value indicates that there's more output available than included in the current response. This can occur even when the response includes no values at all, such as when you ask for a filtered view of a very long list. Use this value in the NextToken request parameter in a subsequent call to the operation to continue processing and get the next part of the output. You should repeat this until the NextToken response element comes back empty (as null).
        public let nextToken: String?
        /// The list of the currently available versions of the specified secret.
        public let versions: [SecretVersionsListEntry]?

        public init(arn: String? = nil, name: String? = nil, nextToken: String? = nil, versions: [SecretVersionsListEntry]? = nil) {
            self.arn = arn
            self.name = name
            self.nextToken = nextToken
            self.versions = versions
        }

        private enum CodingKeys: String, CodingKey {
            case arn = "ARN"
            case name = "Name"
            case nextToken = "NextToken"
            case versions = "Versions"
        }
    }

    public struct ListSecretsRequest: AWSEncodableShape {
        /// Lists the secret request filters.
        public let filters: [Filter]?
        /// (Optional) Limits the number of results you want to include in the response. If you don't include this parameter, it defaults to a value that's specific to the operation. If additional items exist beyond the maximum you specify, the NextToken response element is present and has a value (isn't null). Include that value as the NextToken request parameter in the next call to the operation to get the next part of the results. Note that Secrets Manager might return fewer results than the maximum even when there are more results available. You should check NextToken after every operation to ensure that you receive all of the results.
        public let maxResults: Int?
        /// (Optional) Use this parameter in a request if you receive a NextToken response in a previous request indicating there's more output available. In a subsequent call, set it to the value of the previous call NextToken response to indicate where the output should continue from.
        public let nextToken: String?
        /// Lists secrets in the requested order.
        public let sortOrder: SortOrderType?

        public init(filters: [Filter]? = nil, maxResults: Int? = nil, nextToken: String? = nil, sortOrder: SortOrderType? = nil) {
            self.filters = filters
            self.maxResults = maxResults
            self.nextToken = nextToken
            self.sortOrder = sortOrder
        }

        public func validate(name: String) throws {
            try self.filters?.forEach {
                try $0.validate(name: "\(name).filters[]")
            }
            try self.validate(self.filters, name: "filters", parent: name, max: 10)
            try self.validate(self.maxResults, name: "maxResults", parent: name, max: 100)
            try self.validate(self.maxResults, name: "maxResults", parent: name, min: 1)
            try self.validate(self.nextToken, name: "nextToken", parent: name, max: 4096)
            try self.validate(self.nextToken, name: "nextToken", parent: name, min: 1)
        }

        private enum CodingKeys: String, CodingKey {
            case filters = "Filters"
            case maxResults = "MaxResults"
            case nextToken = "NextToken"
            case sortOrder = "SortOrder"
        }
    }

    public struct ListSecretsResponse: AWSDecodableShape {
        /// If present in the response, this value indicates that there's more output available than included in the current response. This can occur even when the response includes no values at all, such as when you ask for a filtered view of a very long list. Use this value in the NextToken request parameter in a subsequent call to the operation to continue processing and get the next part of the output. You should repeat this until the NextToken response element comes back empty (as null).
        public let nextToken: String?
        /// A list of the secrets in the account.
        public let secretList: [SecretListEntry]?

        public init(nextToken: String? = nil, secretList: [SecretListEntry]? = nil) {
            self.nextToken = nextToken
            self.secretList = secretList
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "NextToken"
            case secretList = "SecretList"
        }
    }

    public struct PutResourcePolicyRequest: AWSEncodableShape {
        /// (Optional) If you set the parameter, BlockPublicPolicy to true, then you block resource-based policies that allow broad access to the secret.
        public let blockPublicPolicy: Bool?
        /// A JSON-formatted string constructed according to the grammar and syntax for an Amazon Web Services resource-based policy. The policy in the string identifies who can access or manage this secret and its versions. For information on how to format a JSON parameter for the various command line tool environments, see Using JSON for Parameters in the CLI User Guide.
        public let resourcePolicy: String
        /// Specifies the secret that you want to attach the resource-based policy. You can specify either the ARN or the friendly name of the secret.  If you specify an ARN, we generally recommend that you specify a complete ARN. You can specify a partial ARN too—for example, if you don’t include the final hyphen and six random characters that Secrets Manager adds at the end of the ARN when you created the secret. A partial ARN match can work as long as it uniquely matches only one secret. However, if your secret has a name that ends in a hyphen followed by six characters (before Secrets Manager adds the hyphen and six characters to the ARN) and you try to use that as a partial ARN, then those characters cause Secrets Manager to assume that you’re specifying a complete ARN. This confusion can cause unexpected results. To avoid this situation, we recommend that you don’t create secret names ending with a hyphen followed by six characters. If you specify an incomplete ARN without the random suffix, and instead provide the 'friendly name', you must not include the random suffix. If you do include the random suffix added by Secrets Manager, you receive either a ResourceNotFoundException or an AccessDeniedException error, depending on your permissions.
        public let secretId: String

        public init(blockPublicPolicy: Bool? = nil, resourcePolicy: String, secretId: String) {
            self.blockPublicPolicy = blockPublicPolicy
            self.resourcePolicy = resourcePolicy
            self.secretId = secretId
        }

        public func validate(name: String) throws {
            try self.validate(self.resourcePolicy, name: "resourcePolicy", parent: name, max: 20480)
            try self.validate(self.resourcePolicy, name: "resourcePolicy", parent: name, min: 1)
            try self.validate(self.secretId, name: "secretId", parent: name, max: 2048)
            try self.validate(self.secretId, name: "secretId", parent: name, min: 1)
        }

        private enum CodingKeys: String, CodingKey {
            case blockPublicPolicy = "BlockPublicPolicy"
            case resourcePolicy = "ResourcePolicy"
            case secretId = "SecretId"
        }
    }

    public struct PutResourcePolicyResponse: AWSDecodableShape {
        /// The ARN of the secret retrieved by the resource-based policy.
        public let arn: String?
        /// The friendly name of the secret retrieved by the resource-based policy.
        public let name: String?

        public init(arn: String? = nil, name: String? = nil) {
            self.arn = arn
            self.name = name
        }

        private enum CodingKeys: String, CodingKey {
            case arn = "ARN"
            case name = "Name"
        }
    }

    public struct PutSecretValueRequest: AWSEncodableShape {
        /// (Optional) Specifies a unique identifier for the new version of the secret.   If you use the Amazon Web Services CLI or one of the Amazon Web Services SDK to call this operation, then you can leave this parameter empty. The CLI or SDK generates a random UUID for you and includes that in the request. If you don't use the SDK and instead generate a raw HTTP request to the Secrets Manager service endpoint, then you must generate a ClientRequestToken yourself for new versions and include that value in the request.   This value helps ensure idempotency. Secrets Manager uses this value to prevent the accidental creation of duplicate versions if there are failures and retries during the Lambda rotation function's processing. We recommend that you generate a UUID-type value to ensure uniqueness within the specified secret.    If the ClientRequestToken value isn't already associated with a version of the secret then a new version of the secret is created.    If a version with this value already exists and that version's SecretString or SecretBinary values are the same as those in the request then the request is ignored (the operation is idempotent).    If a version with this value already exists and the version of the SecretString and SecretBinary values are different from those in the request then the request fails because you cannot modify an existing secret version. You can only create new versions to store new secret values.   This value becomes the VersionId of the new version.
        public let clientRequestToken: String?
        /// (Optional) Specifies binary data that you want to encrypt and store in the new version of the secret. To use this parameter in the command-line tools, we recommend that you store your binary data in a file and then use the appropriate technique for your tool to pass the contents of the file as a parameter. Either SecretBinary or SecretString must have a value, but not both. They cannot both be empty. This parameter is not accessible if the secret using the Secrets Manager console.
        public let secretBinary: Data?
        /// Specifies the secret to which you want to add a new version. You can specify either the Amazon Resource Name (ARN) or the friendly name of the secret. The secret must already exist.  If you specify an ARN, we generally recommend that you specify a complete ARN. You can specify a partial ARN too—for example, if you don’t include the final hyphen and six random characters that Secrets Manager adds at the end of the ARN when you created the secret. A partial ARN match can work as long as it uniquely matches only one secret. However, if your secret has a name that ends in a hyphen followed by six characters (before Secrets Manager adds the hyphen and six characters to the ARN) and you try to use that as a partial ARN, then those characters cause Secrets Manager to assume that you’re specifying a complete ARN. This confusion can cause unexpected results. To avoid this situation, we recommend that you don’t create secret names ending with a hyphen followed by six characters. If you specify an incomplete ARN without the random suffix, and instead provide the 'friendly name', you must not include the random suffix. If you do include the random suffix added by Secrets Manager, you receive either a ResourceNotFoundException or an AccessDeniedException error, depending on your permissions.
        public let secretId: String
        /// (Optional) Specifies text data that you want to encrypt and store in this new version of the secret. Either SecretString or SecretBinary must have a value, but not both. They cannot both be empty. If you create this secret by using the Secrets Manager console then Secrets Manager puts the protected secret text in only the SecretString parameter. The Secrets Manager console stores the information as a JSON structure of key/value pairs that the default Lambda rotation function knows how to parse. For storing multiple values, we recommend that you use a JSON text string argument and specify key/value pairs. For information on how to format a JSON parameter for the various command line tool environments, see Using JSON for Parameters in the CLI User Guide.  For example:  [{"username":"bob"},{"password":"abc123xyz456"}]  If your command-line tool or SDK requires quotation marks around the parameter, you should use single quotes to avoid confusion with the double quotes required in the JSON text.
        public let secretString: String?
        /// (Optional) Specifies a list of staging labels that are attached to this version of the secret. These staging labels are used to track the versions through the rotation process by the Lambda rotation function. A staging label must be unique to a single version of the secret. If you specify a staging label that's already associated with a different version of the same secret then that staging label is automatically removed from the other version and attached to this version. If you do not specify a value for VersionStages then Secrets Manager automatically moves the staging label AWSCURRENT to this new version.
        public let versionStages: [String]?

        public init(clientRequestToken: String? = PutSecretValueRequest.idempotencyToken(), secretBinary: Data? = nil, secretId: String, secretString: String? = nil, versionStages: [String]? = nil) {
            self.clientRequestToken = clientRequestToken
            self.secretBinary = secretBinary
            self.secretId = secretId
            self.secretString = secretString
            self.versionStages = versionStages
        }

        public func validate(name: String) throws {
            try self.validate(self.clientRequestToken, name: "clientRequestToken", parent: name, max: 64)
            try self.validate(self.clientRequestToken, name: "clientRequestToken", parent: name, min: 32)
            try self.validate(self.secretBinary, name: "secretBinary", parent: name, max: 65536)
            try self.validate(self.secretBinary, name: "secretBinary", parent: name, min: 0)
            try self.validate(self.secretId, name: "secretId", parent: name, max: 2048)
            try self.validate(self.secretId, name: "secretId", parent: name, min: 1)
            try self.validate(self.secretString, name: "secretString", parent: name, max: 65536)
            try self.validate(self.secretString, name: "secretString", parent: name, min: 0)
            try self.versionStages?.forEach {
                try validate($0, name: "versionStages[]", parent: name, max: 256)
                try validate($0, name: "versionStages[]", parent: name, min: 1)
            }
            try self.validate(self.versionStages, name: "versionStages", parent: name, max: 20)
            try self.validate(self.versionStages, name: "versionStages", parent: name, min: 1)
        }

        private enum CodingKeys: String, CodingKey {
            case clientRequestToken = "ClientRequestToken"
            case secretBinary = "SecretBinary"
            case secretId = "SecretId"
            case secretString = "SecretString"
            case versionStages = "VersionStages"
        }
    }

    public struct PutSecretValueResponse: AWSDecodableShape {
        /// The Amazon Resource Name (ARN) for the secret for which you just created a version.
        public let arn: String?
        /// The friendly name of the secret for which you just created or updated a version.
        public let name: String?
        /// The unique identifier of the version of the secret you just created or updated.
        public let versionId: String?
        /// The list of staging labels that are currently attached to this version of the secret. Staging labels are used to track a version as it progresses through the secret rotation process.
        public let versionStages: [String]?

        public init(arn: String? = nil, name: String? = nil, versionId: String? = nil, versionStages: [String]? = nil) {
            self.arn = arn
            self.name = name
            self.versionId = versionId
            self.versionStages = versionStages
        }

        private enum CodingKeys: String, CodingKey {
            case arn = "ARN"
            case name = "Name"
            case versionId = "VersionId"
            case versionStages = "VersionStages"
        }
    }

    public struct RemoveRegionsFromReplicationRequest: AWSEncodableShape {
        /// Remove replication from specific Regions.
        public let removeReplicaRegions: [String]
        /// Remove a secret by SecretId from replica Regions.
        public let secretId: String

        public init(removeReplicaRegions: [String], secretId: String) {
            self.removeReplicaRegions = removeReplicaRegions
            self.secretId = secretId
        }

        public func validate(name: String) throws {
            try self.removeReplicaRegions.forEach {
                try validate($0, name: "removeReplicaRegions[]", parent: name, max: 128)
                try validate($0, name: "removeReplicaRegions[]", parent: name, min: 1)
                try validate($0, name: "removeReplicaRegions[]", parent: name, pattern: "^([a-z]+-)+\\d+$")
            }
            try self.validate(self.removeReplicaRegions, name: "removeReplicaRegions", parent: name, min: 1)
            try self.validate(self.secretId, name: "secretId", parent: name, max: 2048)
            try self.validate(self.secretId, name: "secretId", parent: name, min: 1)
        }

        private enum CodingKeys: String, CodingKey {
            case removeReplicaRegions = "RemoveReplicaRegions"
            case secretId = "SecretId"
        }
    }

    public struct RemoveRegionsFromReplicationResponse: AWSDecodableShape {
        /// The secret ARN removed from replication regions.
        public let arn: String?
        /// Describes the remaining replication status after you remove regions from the replication list.
        public let replicationStatus: [ReplicationStatusType]?

        public init(arn: String? = nil, replicationStatus: [ReplicationStatusType]? = nil) {
            self.arn = arn
            self.replicationStatus = replicationStatus
        }

        private enum CodingKeys: String, CodingKey {
            case arn = "ARN"
            case replicationStatus = "ReplicationStatus"
        }
    }

    public struct ReplicaRegionType: AWSEncodableShape {
        /// Can be an ARN, Key ID, or Alias.
        public let kmsKeyId: String?
        /// Describes a single instance of Region objects.
        public let region: String?

        public init(kmsKeyId: String? = nil, region: String? = nil) {
            self.kmsKeyId = kmsKeyId
            self.region = region
        }

        public func validate(name: String) throws {
            try self.validate(self.kmsKeyId, name: "kmsKeyId", parent: name, max: 2048)
            try self.validate(self.kmsKeyId, name: "kmsKeyId", parent: name, min: 0)
            try self.validate(self.region, name: "region", parent: name, max: 128)
            try self.validate(self.region, name: "region", parent: name, min: 1)
            try self.validate(self.region, name: "region", parent: name, pattern: "^([a-z]+-)+\\d+$")
        }

        private enum CodingKeys: String, CodingKey {
            case kmsKeyId = "KmsKeyId"
            case region = "Region"
        }
    }

    public struct ReplicateSecretToRegionsRequest: AWSEncodableShape {
        /// Add Regions to replicate the secret.
        public let addReplicaRegions: [ReplicaRegionType]
        /// (Optional) If set, Secrets Manager replication overwrites a secret with the same name in the destination region.
        public let forceOverwriteReplicaSecret: Bool?
        /// Use the Secret Id to replicate a secret to regions.
        public let secretId: String

        public init(addReplicaRegions: [ReplicaRegionType], forceOverwriteReplicaSecret: Bool? = nil, secretId: String) {
            self.addReplicaRegions = addReplicaRegions
            self.forceOverwriteReplicaSecret = forceOverwriteReplicaSecret
            self.secretId = secretId
        }

        public func validate(name: String) throws {
            try self.addReplicaRegions.forEach {
                try $0.validate(name: "\(name).addReplicaRegions[]")
            }
            try self.validate(self.addReplicaRegions, name: "addReplicaRegions", parent: name, min: 1)
            try self.validate(self.secretId, name: "secretId", parent: name, max: 2048)
            try self.validate(self.secretId, name: "secretId", parent: name, min: 1)
        }

        private enum CodingKeys: String, CodingKey {
            case addReplicaRegions = "AddReplicaRegions"
            case forceOverwriteReplicaSecret = "ForceOverwriteReplicaSecret"
            case secretId = "SecretId"
        }
    }

    public struct ReplicateSecretToRegionsResponse: AWSDecodableShape {
        /// Replicate a secret based on the ReplicaRegionType&gt; consisting of a Region(required) and a KMSKeyId (optional) which can be the ARN, KeyID, or Alias.
        public let arn: String?
        /// Describes the secret replication status as PENDING, SUCCESS or FAIL.
        public let replicationStatus: [ReplicationStatusType]?

        public init(arn: String? = nil, replicationStatus: [ReplicationStatusType]? = nil) {
            self.arn = arn
            self.replicationStatus = replicationStatus
        }

        private enum CodingKeys: String, CodingKey {
            case arn = "ARN"
            case replicationStatus = "ReplicationStatus"
        }
    }

    public struct ReplicationStatusType: AWSDecodableShape {
        /// Can be an ARN, Key ID, or Alias.
        public let kmsKeyId: String?
        /// The date that you last accessed the secret in the Region.
        public let lastAccessedDate: Date?
        /// The Region where replication occurs.
        public let region: String?
        /// The status can be InProgress, Failed, or InSync.
        public let status: StatusType?
        /// Status message such as "Secret with this name already exists in this region".
        public let statusMessage: String?

        public init(kmsKeyId: String? = nil, lastAccessedDate: Date? = nil, region: String? = nil, status: StatusType? = nil, statusMessage: String? = nil) {
            self.kmsKeyId = kmsKeyId
            self.lastAccessedDate = lastAccessedDate
            self.region = region
            self.status = status
            self.statusMessage = statusMessage
        }

        private enum CodingKeys: String, CodingKey {
            case kmsKeyId = "KmsKeyId"
            case lastAccessedDate = "LastAccessedDate"
            case region = "Region"
            case status = "Status"
            case statusMessage = "StatusMessage"
        }
    }

    public struct RestoreSecretRequest: AWSEncodableShape {
        /// Specifies the secret that you want to restore from a previously scheduled deletion. You can specify either the Amazon Resource Name (ARN) or the friendly name of the secret.  If you specify an ARN, we generally recommend that you specify a complete ARN. You can specify a partial ARN too—for example, if you don’t include the final hyphen and six random characters that Secrets Manager adds at the end of the ARN when you created the secret. A partial ARN match can work as long as it uniquely matches only one secret. However, if your secret has a name that ends in a hyphen followed by six characters (before Secrets Manager adds the hyphen and six characters to the ARN) and you try to use that as a partial ARN, then those characters cause Secrets Manager to assume that you’re specifying a complete ARN. This confusion can cause unexpected results. To avoid this situation, we recommend that you don’t create secret names ending with a hyphen followed by six characters. If you specify an incomplete ARN without the random suffix, and instead provide the 'friendly name', you must not include the random suffix. If you do include the random suffix added by Secrets Manager, you receive either a ResourceNotFoundException or an AccessDeniedException error, depending on your permissions.
        public let secretId: String

        public init(secretId: String) {
            self.secretId = secretId
        }

        public func validate(name: String) throws {
            try self.validate(self.secretId, name: "secretId", parent: name, max: 2048)
            try self.validate(self.secretId, name: "secretId", parent: name, min: 1)
        }

        private enum CodingKeys: String, CodingKey {
            case secretId = "SecretId"
        }
    }

    public struct RestoreSecretResponse: AWSDecodableShape {
        /// The ARN of the secret that was restored.
        public let arn: String?
        /// The friendly name of the secret that was restored.
        public let name: String?

        public init(arn: String? = nil, name: String? = nil) {
            self.arn = arn
            self.name = name
        }

        private enum CodingKeys: String, CodingKey {
            case arn = "ARN"
            case name = "Name"
        }
    }

    public struct RotateSecretRequest: AWSEncodableShape {
        /// (Optional) Specifies a unique identifier for the new version of the secret that helps ensure idempotency.  If you use the Amazon Web Services CLI or one of the Amazon Web Services SDK to call this operation, then you can leave this parameter empty. The CLI or SDK generates a random UUID for you and includes that in the request for this parameter. If you don't use the SDK and instead generate a raw HTTP request to the Secrets Manager service endpoint, then you must generate a ClientRequestToken yourself for new versions and include that value in the request. You only need to specify your own value if you implement your own retry logic and want to ensure that a given secret is not created twice. We recommend that you generate a UUID-type value to ensure uniqueness within the specified secret.  Secrets Manager uses this value to prevent the accidental creation of duplicate versions if there are failures and retries during the function's processing. This value becomes the VersionId of the new version.
        public let clientRequestToken: String?
        /// (Optional) Specifies the ARN of the Lambda function that can rotate the secret.
        public let rotationLambdaARN: String?
        /// A structure that defines the rotation configuration for this secret.
        public let rotationRules: RotationRulesType?
        /// Specifies the secret that you want to rotate. You can specify either the Amazon Resource Name (ARN) or the friendly name of the secret.  If you specify an ARN, we generally recommend that you specify a complete ARN. You can specify a partial ARN too—for example, if you don’t include the final hyphen and six random characters that Secrets Manager adds at the end of the ARN when you created the secret. A partial ARN match can work as long as it uniquely matches only one secret. However, if your secret has a name that ends in a hyphen followed by six characters (before Secrets Manager adds the hyphen and six characters to the ARN) and you try to use that as a partial ARN, then those characters cause Secrets Manager to assume that you’re specifying a complete ARN. This confusion can cause unexpected results. To avoid this situation, we recommend that you don’t create secret names ending with a hyphen followed by six characters. If you specify an incomplete ARN without the random suffix, and instead provide the 'friendly name', you must not include the random suffix. If you do include the random suffix added by Secrets Manager, you receive either a ResourceNotFoundException or an AccessDeniedException error, depending on your permissions.
        public let secretId: String

        public init(clientRequestToken: String? = RotateSecretRequest.idempotencyToken(), rotationLambdaARN: String? = nil, rotationRules: RotationRulesType? = nil, secretId: String) {
            self.clientRequestToken = clientRequestToken
            self.rotationLambdaARN = rotationLambdaARN
            self.rotationRules = rotationRules
            self.secretId = secretId
        }

        public func validate(name: String) throws {
            try self.validate(self.clientRequestToken, name: "clientRequestToken", parent: name, max: 64)
            try self.validate(self.clientRequestToken, name: "clientRequestToken", parent: name, min: 32)
            try self.validate(self.rotationLambdaARN, name: "rotationLambdaARN", parent: name, max: 2048)
            try self.validate(self.rotationLambdaARN, name: "rotationLambdaARN", parent: name, min: 0)
            try self.rotationRules?.validate(name: "\(name).rotationRules")
            try self.validate(self.secretId, name: "secretId", parent: name, max: 2048)
            try self.validate(self.secretId, name: "secretId", parent: name, min: 1)
        }

        private enum CodingKeys: String, CodingKey {
            case clientRequestToken = "ClientRequestToken"
            case rotationLambdaARN = "RotationLambdaARN"
            case rotationRules = "RotationRules"
            case secretId = "SecretId"
        }
    }

    public struct RotateSecretResponse: AWSDecodableShape {
        /// The ARN of the secret.
        public let arn: String?
        /// The friendly name of the secret.
        public let name: String?
        /// The ID of the new version of the secret created by the rotation started by this request.
        public let versionId: String?

        public init(arn: String? = nil, name: String? = nil, versionId: String? = nil) {
            self.arn = arn
            self.name = name
            self.versionId = versionId
        }

        private enum CodingKeys: String, CodingKey {
            case arn = "ARN"
            case name = "Name"
            case versionId = "VersionId"
        }
    }

    public struct RotationRulesType: AWSEncodableShape & AWSDecodableShape {
        /// Specifies the number of days between automatic scheduled rotations of the secret. Secrets Manager schedules the next rotation when the previous one is complete. Secrets Manager schedules the date by adding the rotation interval (number of days) to the actual date of the last rotation. The service chooses the hour within that 24-hour date window randomly. The minute is also chosen somewhat randomly, but weighted towards the top of the hour and influenced by a variety of factors that help distribute load.
        public let automaticallyAfterDays: Int64?

        public init(automaticallyAfterDays: Int64? = nil) {
            self.automaticallyAfterDays = automaticallyAfterDays
        }

        public func validate(name: String) throws {
            try self.validate(self.automaticallyAfterDays, name: "automaticallyAfterDays", parent: name, max: 1000)
            try self.validate(self.automaticallyAfterDays, name: "automaticallyAfterDays", parent: name, min: 1)
        }

        private enum CodingKeys: String, CodingKey {
            case automaticallyAfterDays = "AutomaticallyAfterDays"
        }
    }

    public struct SecretListEntry: AWSDecodableShape {
        /// The Amazon Resource Name (ARN) of the secret. For more information about ARNs in Secrets Manager, see Policy Resources in the Amazon Web Services Secrets Manager User Guide.
        public let arn: String?
        /// The date and time when a secret was created.
        public let createdDate: Date?
        /// The date and time the deletion of the secret occurred. Not present on active secrets. The secret can be recovered until the number of days in the recovery window has passed, as specified in the RecoveryWindowInDays parameter of the DeleteSecret operation.
        public let deletedDate: Date?
        /// The user-provided description of the secret.
        public let description: String?
        /// The ARN or alias of the Amazon Web Services KMS customer master key (CMK) used to encrypt the SecretString and SecretBinary fields in each version of the secret. If you don't provide a key, then Secrets Manager defaults to encrypting the secret fields with the default KMS CMK, the key named awssecretsmanager, for this account.
        public let kmsKeyId: String?
        /// The last date that this secret was accessed. This value is truncated to midnight of the date and therefore shows only the date, not the time.
        public let lastAccessedDate: Date?
        /// The last date and time that this secret was modified in any way.
        public let lastChangedDate: Date?
        /// The most recent date and time that the Secrets Manager rotation process was successfully completed. This value is null if the secret hasn't ever rotated.
        public let lastRotatedDate: Date?
        /// The friendly name of the secret. You can use forward slashes in the name to represent a path hierarchy. For example, /prod/databases/dbserver1 could represent the secret for a server named dbserver1 in the folder databases in the folder prod.
        public let name: String?
        /// Returns the name of the service that created the secret.
        public let owningService: String?
        /// The Region where Secrets Manager originated the secret.
        public let primaryRegion: String?
        /// Indicates whether automatic, scheduled rotation is enabled for this secret.
        public let rotationEnabled: Bool?
        /// The ARN of an Amazon Web Services Lambda function invoked by Secrets Manager to rotate and expire the secret either automatically per the schedule or manually by a call to RotateSecret.
        public let rotationLambdaARN: String?
        /// A structure that defines the rotation configuration for the secret.
        public let rotationRules: RotationRulesType?
        /// A list of all of the currently assigned SecretVersionStage staging labels and the SecretVersionId attached to each one. Staging labels are used to keep track of the different versions during the rotation process.  A version that does not have any SecretVersionStage is considered deprecated and subject to deletion. Such versions are not included in this list.
        public let secretVersionsToStages: [String: [String]]?
        /// The list of user-defined tags associated with the secret. To add tags to a secret, use TagResource. To remove tags, use UntagResource.
        public let tags: [Tag]?

        public init(arn: String? = nil, createdDate: Date? = nil, deletedDate: Date? = nil, description: String? = nil, kmsKeyId: String? = nil, lastAccessedDate: Date? = nil, lastChangedDate: Date? = nil, lastRotatedDate: Date? = nil, name: String? = nil, owningService: String? = nil, primaryRegion: String? = nil, rotationEnabled: Bool? = nil, rotationLambdaARN: String? = nil, rotationRules: RotationRulesType? = nil, secretVersionsToStages: [String: [String]]? = nil, tags: [Tag]? = nil) {
            self.arn = arn
            self.createdDate = createdDate
            self.deletedDate = deletedDate
            self.description = description
            self.kmsKeyId = kmsKeyId
            self.lastAccessedDate = lastAccessedDate
            self.lastChangedDate = lastChangedDate
            self.lastRotatedDate = lastRotatedDate
            self.name = name
            self.owningService = owningService
            self.primaryRegion = primaryRegion
            self.rotationEnabled = rotationEnabled
            self.rotationLambdaARN = rotationLambdaARN
            self.rotationRules = rotationRules
            self.secretVersionsToStages = secretVersionsToStages
            self.tags = tags
        }

        private enum CodingKeys: String, CodingKey {
            case arn = "ARN"
            case createdDate = "CreatedDate"
            case deletedDate = "DeletedDate"
            case description = "Description"
            case kmsKeyId = "KmsKeyId"
            case lastAccessedDate = "LastAccessedDate"
            case lastChangedDate = "LastChangedDate"
            case lastRotatedDate = "LastRotatedDate"
            case name = "Name"
            case owningService = "OwningService"
            case primaryRegion = "PrimaryRegion"
            case rotationEnabled = "RotationEnabled"
            case rotationLambdaARN = "RotationLambdaARN"
            case rotationRules = "RotationRules"
            case secretVersionsToStages = "SecretVersionsToStages"
            case tags = "Tags"
        }
    }

    public struct SecretVersionsListEntry: AWSDecodableShape {
        /// The date and time this version of the secret was created.
        public let createdDate: Date?
        /// The KMS keys used to encrypt the secret version.
        public let kmsKeyIds: [String]?
        /// The date that this version of the secret was last accessed. Note that the resolution of this field is at the date level and does not include the time.
        public let lastAccessedDate: Date?
        /// The unique version identifier of this version of the secret.
        public let versionId: String?
        /// An array of staging labels that are currently associated with this version of the secret.
        public let versionStages: [String]?

        public init(createdDate: Date? = nil, kmsKeyIds: [String]? = nil, lastAccessedDate: Date? = nil, versionId: String? = nil, versionStages: [String]? = nil) {
            self.createdDate = createdDate
            self.kmsKeyIds = kmsKeyIds
            self.lastAccessedDate = lastAccessedDate
            self.versionId = versionId
            self.versionStages = versionStages
        }

        private enum CodingKeys: String, CodingKey {
            case createdDate = "CreatedDate"
            case kmsKeyIds = "KmsKeyIds"
            case lastAccessedDate = "LastAccessedDate"
            case versionId = "VersionId"
            case versionStages = "VersionStages"
        }
    }

    public struct StopReplicationToReplicaRequest: AWSEncodableShape {
        /// Response to StopReplicationToReplica of a secret, based on the SecretId.
        public let secretId: String

        public init(secretId: String) {
            self.secretId = secretId
        }

        public func validate(name: String) throws {
            try self.validate(self.secretId, name: "secretId", parent: name, max: 2048)
            try self.validate(self.secretId, name: "secretId", parent: name, min: 1)
        }

        private enum CodingKeys: String, CodingKey {
            case secretId = "SecretId"
        }
    }

    public struct StopReplicationToReplicaResponse: AWSDecodableShape {
        /// Response StopReplicationToReplica of a secret, based on the ARN,.
        public let arn: String?

        public init(arn: String? = nil) {
            self.arn = arn
        }

        private enum CodingKeys: String, CodingKey {
            case arn = "ARN"
        }
    }

    public struct Tag: AWSEncodableShape & AWSDecodableShape {
        /// The key identifier, or name, of the tag.
        public let key: String?
        /// The string value associated with the key of the tag.
        public let value: String?

        public init(key: String? = nil, value: String? = nil) {
            self.key = key
            self.value = value
        }

        public func validate(name: String) throws {
            try self.validate(self.key, name: "key", parent: name, max: 128)
            try self.validate(self.key, name: "key", parent: name, min: 1)
            try self.validate(self.value, name: "value", parent: name, max: 256)
            try self.validate(self.value, name: "value", parent: name, min: 0)
        }

        private enum CodingKeys: String, CodingKey {
            case key = "Key"
            case value = "Value"
        }
    }

    public struct TagResourceRequest: AWSEncodableShape {
        /// The identifier for the secret that you want to attach tags to. You can specify either the Amazon Resource Name (ARN) or the friendly name of the secret.  If you specify an ARN, we generally recommend that you specify a complete ARN. You can specify a partial ARN too—for example, if you don’t include the final hyphen and six random characters that Secrets Manager adds at the end of the ARN when you created the secret. A partial ARN match can work as long as it uniquely matches only one secret. However, if your secret has a name that ends in a hyphen followed by six characters (before Secrets Manager adds the hyphen and six characters to the ARN) and you try to use that as a partial ARN, then those characters cause Secrets Manager to assume that you’re specifying a complete ARN. This confusion can cause unexpected results. To avoid this situation, we recommend that you don’t create secret names ending with a hyphen followed by six characters. If you specify an incomplete ARN without the random suffix, and instead provide the 'friendly name', you must not include the random suffix. If you do include the random suffix added by Secrets Manager, you receive either a ResourceNotFoundException or an AccessDeniedException error, depending on your permissions.
        public let secretId: String
        /// The tags to attach to the secret. Each element in the list consists of a Key and a Value. This parameter to the API requires a JSON text string argument. For information on how to format a JSON parameter for the various command line tool environments, see Using JSON for Parameters in the CLI User Guide. For the CLI, you can also use the syntax: --Tags Key="Key1",Value="Value1" Key="Key2",Value="Value2"[,…]
        public let tags: [Tag]

        public init(secretId: String, tags: [Tag]) {
            self.secretId = secretId
            self.tags = tags
        }

        public func validate(name: String) throws {
            try self.validate(self.secretId, name: "secretId", parent: name, max: 2048)
            try self.validate(self.secretId, name: "secretId", parent: name, min: 1)
            try self.tags.forEach {
                try $0.validate(name: "\(name).tags[]")
            }
        }

        private enum CodingKeys: String, CodingKey {
            case secretId = "SecretId"
            case tags = "Tags"
        }
    }

    public struct UntagResourceRequest: AWSEncodableShape {
        /// The identifier for the secret that you want to remove tags from. You can specify either the Amazon Resource Name (ARN) or the friendly name of the secret.  If you specify an ARN, we generally recommend that you specify a complete ARN. You can specify a partial ARN too—for example, if you don’t include the final hyphen and six random characters that Secrets Manager adds at the end of the ARN when you created the secret. A partial ARN match can work as long as it uniquely matches only one secret. However, if your secret has a name that ends in a hyphen followed by six characters (before Secrets Manager adds the hyphen and six characters to the ARN) and you try to use that as a partial ARN, then those characters cause Secrets Manager to assume that you’re specifying a complete ARN. This confusion can cause unexpected results. To avoid this situation, we recommend that you don’t create secret names ending with a hyphen followed by six characters. If you specify an incomplete ARN without the random suffix, and instead provide the 'friendly name', you must not include the random suffix. If you do include the random suffix added by Secrets Manager, you receive either a ResourceNotFoundException or an AccessDeniedException error, depending on your permissions.
        public let secretId: String
        /// A list of tag key names to remove from the secret. You don't specify the value. Both the key and its associated value are removed. This parameter to the API requires a JSON text string argument. For information on how to format a JSON parameter for the various command line tool environments, see Using JSON for Parameters in the CLI User Guide.
        public let tagKeys: [String]

        public init(secretId: String, tagKeys: [String]) {
            self.secretId = secretId
            self.tagKeys = tagKeys
        }

        public func validate(name: String) throws {
            try self.validate(self.secretId, name: "secretId", parent: name, max: 2048)
            try self.validate(self.secretId, name: "secretId", parent: name, min: 1)
            try self.tagKeys.forEach {
                try validate($0, name: "tagKeys[]", parent: name, max: 128)
                try validate($0, name: "tagKeys[]", parent: name, min: 1)
            }
        }

        private enum CodingKeys: String, CodingKey {
            case secretId = "SecretId"
            case tagKeys = "TagKeys"
        }
    }

    public struct UpdateSecretRequest: AWSEncodableShape {
        /// (Optional) If you want to add a new version to the secret, this parameter specifies a unique identifier for the new version that helps ensure idempotency.  If you use the Amazon Web Services CLI or one of the Amazon Web Services SDK to call this operation, then you can leave this parameter empty. The CLI or SDK generates a random UUID for you and includes that in the request. If you don't use the SDK and instead generate a raw HTTP request to the Secrets Manager service endpoint, then you must generate a ClientRequestToken yourself for new versions and include that value in the request. You typically only need to interact with this value if you implement your own retry logic and want to ensure that a given secret is not created twice. We recommend that you generate a UUID-type value to ensure uniqueness within the specified secret.  Secrets Manager uses this value to prevent the accidental creation of duplicate versions if there are failures and retries during the Lambda rotation function's processing.   If the ClientRequestToken value isn't already associated with a version of the secret then a new version of the secret is created.    If a version with this value already exists and that version's SecretString and SecretBinary values are the same as those in the request then the request is ignored (the operation is idempotent).    If a version with this value already exists and that version's SecretString and SecretBinary values are different from the request then an error occurs because you cannot modify an existing secret value.   This value becomes the VersionId of the new version.
        public let clientRequestToken: String?
        /// (Optional) Specifies an updated user-provided description of the secret.
        public let description: String?
        /// (Optional) Specifies an updated ARN or alias of the Amazon Web Services KMS customer master key (CMK) to be used to encrypt the protected text in new versions of this secret.  You can only use the account's default CMK to encrypt and decrypt if you call this operation using credentials from the same account that owns the secret. If the secret is in a different account, then you must create a custom CMK and provide the ARN of that CMK in this field. The user making the call must have permissions to both the secret and the CMK in their respective accounts.
        public let kmsKeyId: String?
        /// (Optional) Specifies updated binary data that you want to encrypt and store in the new version of the secret. To use this parameter in the command-line tools, we recommend that you store your binary data in a file and then use the appropriate technique for your tool to pass the contents of the file as a parameter. Either SecretBinary or SecretString must have a value, but not both. They cannot both be empty. This parameter is not accessible using the Secrets Manager console.
        public let secretBinary: Data?
        /// Specifies the secret that you want to modify or to which you want to add a new version. You can specify either the Amazon Resource Name (ARN) or the friendly name of the secret.  If you specify an ARN, we generally recommend that you specify a complete ARN. You can specify a partial ARN too—for example, if you don’t include the final hyphen and six random characters that Secrets Manager adds at the end of the ARN when you created the secret. A partial ARN match can work as long as it uniquely matches only one secret. However, if your secret has a name that ends in a hyphen followed by six characters (before Secrets Manager adds the hyphen and six characters to the ARN) and you try to use that as a partial ARN, then those characters cause Secrets Manager to assume that you’re specifying a complete ARN. This confusion can cause unexpected results. To avoid this situation, we recommend that you don’t create secret names ending with a hyphen followed by six characters. If you specify an incomplete ARN without the random suffix, and instead provide the 'friendly name', you must not include the random suffix. If you do include the random suffix added by Secrets Manager, you receive either a ResourceNotFoundException or an AccessDeniedException error, depending on your permissions.
        public let secretId: String
        /// (Optional) Specifies updated text data that you want to encrypt and store in this new version of the secret. Either SecretBinary or SecretString must have a value, but not both. They cannot both be empty. If you create this secret by using the Secrets Manager console then Secrets Manager puts the protected secret text in only the SecretString parameter. The Secrets Manager console stores the information as a JSON structure of key/value pairs that the default Lambda rotation function knows how to parse. For storing multiple values, we recommend that you use a JSON text string argument and specify key/value pairs. For information on how to format a JSON parameter for the various command line tool environments, see Using JSON for Parameters in the CLI User Guide. For example:  [{"username":"bob"},{"password":"abc123xyz456"}]  If your command-line tool or SDK requires quotation marks around the parameter, you should use single quotes to avoid confusion with the double quotes required in the JSON text. You can also 'escape' the double quote character in the embedded JSON text by prefacing each with a backslash. For example, the following string is surrounded by double-quotes. All of the embedded double quotes are escaped:  "[{\"username\":\"bob\"},{\"password\":\"abc123xyz456\"}]"
        public let secretString: String?

        public init(clientRequestToken: String? = UpdateSecretRequest.idempotencyToken(), description: String? = nil, kmsKeyId: String? = nil, secretBinary: Data? = nil, secretId: String, secretString: String? = nil) {
            self.clientRequestToken = clientRequestToken
            self.description = description
            self.kmsKeyId = kmsKeyId
            self.secretBinary = secretBinary
            self.secretId = secretId
            self.secretString = secretString
        }

        public func validate(name: String) throws {
            try self.validate(self.clientRequestToken, name: "clientRequestToken", parent: name, max: 64)
            try self.validate(self.clientRequestToken, name: "clientRequestToken", parent: name, min: 32)
            try self.validate(self.description, name: "description", parent: name, max: 2048)
            try self.validate(self.kmsKeyId, name: "kmsKeyId", parent: name, max: 2048)
            try self.validate(self.kmsKeyId, name: "kmsKeyId", parent: name, min: 0)
            try self.validate(self.secretBinary, name: "secretBinary", parent: name, max: 65536)
            try self.validate(self.secretBinary, name: "secretBinary", parent: name, min: 0)
            try self.validate(self.secretId, name: "secretId", parent: name, max: 2048)
            try self.validate(self.secretId, name: "secretId", parent: name, min: 1)
            try self.validate(self.secretString, name: "secretString", parent: name, max: 65536)
            try self.validate(self.secretString, name: "secretString", parent: name, min: 0)
        }

        private enum CodingKeys: String, CodingKey {
            case clientRequestToken = "ClientRequestToken"
            case description = "Description"
            case kmsKeyId = "KmsKeyId"
            case secretBinary = "SecretBinary"
            case secretId = "SecretId"
            case secretString = "SecretString"
        }
    }

    public struct UpdateSecretResponse: AWSDecodableShape {
        /// The ARN of the secret that was updated.  Secrets Manager automatically adds several random characters to the name at the end of the ARN when you initially create a secret. This affects only the ARN and not the actual friendly name. This ensures that if you create a new secret with the same name as an old secret that you previously deleted, then users with access to the old secret don't automatically get access to the new secret because the ARNs are different.
        public let arn: String?
        /// The friendly name of the secret that was updated.
        public let name: String?
        /// If a new version of the secret was created by this operation, then VersionId contains the unique identifier of the new version.
        public let versionId: String?

        public init(arn: String? = nil, name: String? = nil, versionId: String? = nil) {
            self.arn = arn
            self.name = name
            self.versionId = versionId
        }

        private enum CodingKeys: String, CodingKey {
            case arn = "ARN"
            case name = "Name"
            case versionId = "VersionId"
        }
    }

    public struct UpdateSecretVersionStageRequest: AWSEncodableShape {
        /// (Optional) The secret version ID that you want to add the staging label. If you want to remove a label from a version, then do not specify this parameter. If the staging label is already attached to a different version of the secret, then you must also specify the RemoveFromVersionId parameter.
        public let moveToVersionId: String?
        /// Specifies the secret version ID of the version that the staging label is to be removed from. If the staging label you are trying to attach to one version is already attached to a different version, then you must include this parameter and specify the version that the label is to be removed from. If the label is attached and you either do not specify this parameter, or the version ID does not match, then the operation fails.
        public let removeFromVersionId: String?
        /// Specifies the secret with the version with the list of staging labels you want to modify. You can specify either the Amazon Resource Name (ARN) or the friendly name of the secret.  If you specify an ARN, we generally recommend that you specify a complete ARN. You can specify a partial ARN too—for example, if you don’t include the final hyphen and six random characters that Secrets Manager adds at the end of the ARN when you created the secret. A partial ARN match can work as long as it uniquely matches only one secret. However, if your secret has a name that ends in a hyphen followed by six characters (before Secrets Manager adds the hyphen and six characters to the ARN) and you try to use that as a partial ARN, then those characters cause Secrets Manager to assume that you’re specifying a complete ARN. This confusion can cause unexpected results. To avoid this situation, we recommend that you don’t create secret names ending with a hyphen followed by six characters. If you specify an incomplete ARN without the random suffix, and instead provide the 'friendly name', you must not include the random suffix. If you do include the random suffix added by Secrets Manager, you receive either a ResourceNotFoundException or an AccessDeniedException error, depending on your permissions.
        public let secretId: String
        /// The staging label to add to this version.
        public let versionStage: String

        public init(moveToVersionId: String? = nil, removeFromVersionId: String? = nil, secretId: String, versionStage: String) {
            self.moveToVersionId = moveToVersionId
            self.removeFromVersionId = removeFromVersionId
            self.secretId = secretId
            self.versionStage = versionStage
        }

        public func validate(name: String) throws {
            try self.validate(self.moveToVersionId, name: "moveToVersionId", parent: name, max: 64)
            try self.validate(self.moveToVersionId, name: "moveToVersionId", parent: name, min: 32)
            try self.validate(self.removeFromVersionId, name: "removeFromVersionId", parent: name, max: 64)
            try self.validate(self.removeFromVersionId, name: "removeFromVersionId", parent: name, min: 32)
            try self.validate(self.secretId, name: "secretId", parent: name, max: 2048)
            try self.validate(self.secretId, name: "secretId", parent: name, min: 1)
            try self.validate(self.versionStage, name: "versionStage", parent: name, max: 256)
            try self.validate(self.versionStage, name: "versionStage", parent: name, min: 1)
        }

        private enum CodingKeys: String, CodingKey {
            case moveToVersionId = "MoveToVersionId"
            case removeFromVersionId = "RemoveFromVersionId"
            case secretId = "SecretId"
            case versionStage = "VersionStage"
        }
    }

    public struct UpdateSecretVersionStageResponse: AWSDecodableShape {
        /// The ARN of the secret with the modified staging label.
        public let arn: String?
        /// The friendly name of the secret with the modified staging label.
        public let name: String?

        public init(arn: String? = nil, name: String? = nil) {
            self.arn = arn
            self.name = name
        }

        private enum CodingKeys: String, CodingKey {
            case arn = "ARN"
            case name = "Name"
        }
    }

    public struct ValidateResourcePolicyRequest: AWSEncodableShape {
        /// A JSON-formatted string constructed according to the grammar and syntax for an Amazon Web Services resource-based policy. The policy in the string identifies who can access or manage this secret and its versions. For information on how to format a JSON parameter for the various command line tool environments, see Using JSON for Parameters in the CLI User Guide.publi
        public let resourcePolicy: String
        ///  (Optional) The identifier of the secret with the resource-based policy you want to validate. You can specify either the Amazon Resource Name (ARN) or the friendly name of the secret.  If you specify an ARN, we generally recommend that you specify a complete ARN. You can specify a partial ARN too—for example, if you don’t include the final hyphen and six random characters that Secrets Manager adds at the end of the ARN when you created the secret. A partial ARN match can work as long as it uniquely matches only one secret. However, if your secret has a name that ends in a hyphen followed by six characters (before Secrets Manager adds the hyphen and six characters to the ARN) and you try to use that as a partial ARN, then those characters cause Secrets Manager to assume that you’re specifying a complete ARN. This confusion can cause unexpected results. To avoid this situation, we recommend that you don’t create secret names ending with a hyphen followed by six characters. If you specify an incomplete ARN without the random suffix, and instead provide the 'friendly name', you must not include the random suffix. If you do include the random suffix added by Secrets Manager, you receive either a ResourceNotFoundException or an AccessDeniedException error, depending on your permissions.
        public let secretId: String?

        public init(resourcePolicy: String, secretId: String? = nil) {
            self.resourcePolicy = resourcePolicy
            self.secretId = secretId
        }

        public func validate(name: String) throws {
            try self.validate(self.resourcePolicy, name: "resourcePolicy", parent: name, max: 20480)
            try self.validate(self.resourcePolicy, name: "resourcePolicy", parent: name, min: 1)
            try self.validate(self.secretId, name: "secretId", parent: name, max: 2048)
            try self.validate(self.secretId, name: "secretId", parent: name, min: 1)
        }

        private enum CodingKeys: String, CodingKey {
            case resourcePolicy = "ResourcePolicy"
            case secretId = "SecretId"
        }
    }

    public struct ValidateResourcePolicyResponse: AWSDecodableShape {
        /// Returns a message stating that your Reource Policy passed validation.
        public let policyValidationPassed: Bool?
        /// Returns an error message if your policy doesn't pass validatation.
        public let validationErrors: [ValidationErrorsEntry]?

        public init(policyValidationPassed: Bool? = nil, validationErrors: [ValidationErrorsEntry]? = nil) {
            self.policyValidationPassed = policyValidationPassed
            self.validationErrors = validationErrors
        }

        private enum CodingKeys: String, CodingKey {
            case policyValidationPassed = "PolicyValidationPassed"
            case validationErrors = "ValidationErrors"
        }
    }

    public struct ValidationErrorsEntry: AWSDecodableShape {
        /// Checks the name of the policy.
        public let checkName: String?
        /// Displays error messages if validation encounters problems during validation of the resource policy.
        public let errorMessage: String?

        public init(checkName: String? = nil, errorMessage: String? = nil) {
            self.checkName = checkName
            self.errorMessage = errorMessage
        }

        private enum CodingKeys: String, CodingKey {
            case checkName = "CheckName"
            case errorMessage = "ErrorMessage"
        }
    }
}
