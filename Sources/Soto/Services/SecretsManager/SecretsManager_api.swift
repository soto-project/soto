//===----------------------------------------------------------------------===//
//
// This source file is part of the Soto for AWS open source project
//
// Copyright (c) 2017-2023 the Soto project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
// See CONTRIBUTORS.txt for the list of Soto project authors
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by https://github.com/soto-project/soto-codegenerator.
// DO NOT EDIT.

@_exported import SotoCore

/// Service object for interacting with AWS SecretsManager service.
///
/// Amazon Web Services Secrets Manager Amazon Web Services Secrets Manager provides a service to enable you to store, manage, and retrieve, secrets. This guide provides descriptions of the Secrets Manager API. For more information about using this service, see the Amazon Web Services Secrets Manager User Guide.  API Version  This version of the Secrets Manager API Reference documents the Secrets Manager API version 2017-10-17. For a list of endpoints, see Amazon Web Services Secrets Manager  endpoints.  Support and Feedback for Amazon Web Services Secrets Manager  We welcome your feedback. Send your comments to awssecretsmanager-feedback@amazon.com, or post your feedback and questions in the Amazon Web Services Secrets Manager Discussion Forum. For more information about the Amazon Web Services Discussion Forums, see Forums Help.  Logging API Requests  Amazon Web Services Secrets Manager supports Amazon Web Services CloudTrail, a service that records Amazon Web Services API calls for your Amazon Web Services account and delivers log files to an Amazon S3 bucket. By using information that's collected by Amazon Web Services CloudTrail, you can determine the requests successfully made to Secrets Manager, who made the request, when it was made, and so on. For more about Amazon Web Services Secrets Manager and support for Amazon Web Services CloudTrail, see Logging Amazon Web Services Secrets Manager Events with Amazon Web Services CloudTrail in the Amazon Web Services Secrets Manager User Guide. To learn more about CloudTrail, including enabling it and find your log files, see the Amazon Web Services CloudTrail User Guide.
public struct SecretsManager: AWSService {
    // MARK: Member variables

    /// Client used for communication with AWS
    public let client: AWSClient
    /// Service configuration
    public let config: AWSServiceConfig

    // MARK: Initialization

    /// Initialize the SecretsManager client
    /// - parameters:
    ///     - client: AWSClient used to process requests
    ///     - region: Region of server you want to communicate with. This will override the partition parameter.
    ///     - partition: AWS partition where service resides, standard (.aws), china (.awscn), government (.awsusgov).
    ///     - endpoint: Custom endpoint URL to use instead of standard AWS servers
    ///     - middleware: Middleware chain used to edit requests before they are sent and responses before they are decoded 
    ///     - timeout: Timeout value for HTTP requests
    ///     - byteBufferAllocator: Allocator for ByteBuffers
    ///     - options: Service options
    public init(
        client: AWSClient,
        region: SotoCore.Region? = nil,
        partition: AWSPartition = .aws,
        endpoint: String? = nil,
        middleware: AWSMiddlewareProtocol? = nil,
        timeout: TimeAmount? = nil,
        byteBufferAllocator: ByteBufferAllocator = ByteBufferAllocator(),
        options: AWSServiceConfig.Options = []
    ) {
        self.client = client
        self.config = AWSServiceConfig(
            region: region,
            partition: region?.partition ?? partition,
            amzTarget: "secretsmanager",
            serviceName: "SecretsManager",
            serviceIdentifier: "secretsmanager",
            serviceProtocol: .json(version: "1.1"),
            apiVersion: "2017-10-17",
            endpoint: endpoint,
            variantEndpoints: Self.variantEndpoints,
            errorType: SecretsManagerErrorType.self,
            middleware: middleware,
            timeout: timeout,
            byteBufferAllocator: byteBufferAllocator,
            options: options
        )
    }




    /// FIPS and dualstack endpoints
    static var variantEndpoints: [EndpointVariantType: AWSServiceConfig.EndpointVariant] {[
        [.dualstack]: .init(endpoints: [
            "af-south-1": "secretsmanager.af-south-1.api.aws",
            "ap-east-1": "secretsmanager.ap-east-1.api.aws",
            "ap-northeast-1": "secretsmanager.ap-northeast-1.api.aws",
            "ap-northeast-2": "secretsmanager.ap-northeast-2.api.aws",
            "ap-northeast-3": "secretsmanager.ap-northeast-3.api.aws",
            "ap-south-1": "secretsmanager.ap-south-1.api.aws",
            "ap-south-2": "secretsmanager.ap-south-2.api.aws",
            "ap-southeast-1": "secretsmanager.ap-southeast-1.api.aws",
            "ap-southeast-2": "secretsmanager.ap-southeast-2.api.aws",
            "ap-southeast-3": "secretsmanager.ap-southeast-3.api.aws",
            "ap-southeast-4": "secretsmanager.ap-southeast-4.api.aws",
            "ca-central-1": "secretsmanager.ca-central-1.api.aws",
            "ca-west-1": "secretsmanager.ca-west-1.api.aws",
            "cn-north-1": "secretsmanager.cn-north-1.api.amazonwebservices.com.cn",
            "cn-northwest-1": "secretsmanager.cn-northwest-1.api.amazonwebservices.com.cn",
            "eu-central-1": "secretsmanager.eu-central-1.api.aws",
            "eu-central-2": "secretsmanager.eu-central-2.api.aws",
            "eu-north-1": "secretsmanager.eu-north-1.api.aws",
            "eu-south-1": "secretsmanager.eu-south-1.api.aws",
            "eu-south-2": "secretsmanager.eu-south-2.api.aws",
            "eu-west-1": "secretsmanager.eu-west-1.api.aws",
            "eu-west-2": "secretsmanager.eu-west-2.api.aws",
            "eu-west-3": "secretsmanager.eu-west-3.api.aws",
            "il-central-1": "secretsmanager.il-central-1.api.aws",
            "me-central-1": "secretsmanager.me-central-1.api.aws",
            "me-south-1": "secretsmanager.me-south-1.api.aws",
            "sa-east-1": "secretsmanager.sa-east-1.api.aws",
            "us-east-1": "secretsmanager.us-east-1.api.aws",
            "us-east-2": "secretsmanager.us-east-2.api.aws",
            "us-gov-east-1": "secretsmanager.us-gov-east-1.api.aws",
            "us-gov-west-1": "secretsmanager.us-gov-west-1.api.aws",
            "us-west-1": "secretsmanager.us-west-1.api.aws",
            "us-west-2": "secretsmanager.us-west-2.api.aws"
        ]),
        [.dualstack, .fips]: .init(endpoints: [
            "ca-central-1": "secretsmanager-fips.ca-central-1.api.aws",
            "ca-west-1": "secretsmanager-fips.ca-west-1.api.aws",
            "us-east-1": "secretsmanager-fips.us-east-1.api.aws",
            "us-east-2": "secretsmanager-fips.us-east-2.api.aws",
            "us-gov-east-1": "secretsmanager-fips.us-gov-east-1.api.aws",
            "us-gov-west-1": "secretsmanager-fips.us-gov-west-1.api.aws",
            "us-west-1": "secretsmanager-fips.us-west-1.api.aws",
            "us-west-2": "secretsmanager-fips.us-west-2.api.aws"
        ]),
        [.fips]: .init(endpoints: [
            "ca-central-1": "secretsmanager-fips.ca-central-1.amazonaws.com",
            "ca-west-1": "secretsmanager-fips.ca-west-1.amazonaws.com",
            "us-east-1": "secretsmanager-fips.us-east-1.amazonaws.com",
            "us-east-2": "secretsmanager-fips.us-east-2.amazonaws.com",
            "us-gov-east-1": "secretsmanager-fips.us-gov-east-1.amazonaws.com",
            "us-gov-west-1": "secretsmanager-fips.us-gov-west-1.amazonaws.com",
            "us-west-1": "secretsmanager-fips.us-west-1.amazonaws.com",
            "us-west-2": "secretsmanager-fips.us-west-2.amazonaws.com"
        ])
    ]}

    // MARK: API Calls

    /// Retrieves the contents of the encrypted fields SecretString or SecretBinary for up to 20 secrets.  To retrieve a single secret, call GetSecretValue.  To choose which secrets to retrieve, you can specify a list of secrets by name or ARN, or you can use filters. If Secrets Manager encounters errors such as AccessDeniedException while attempting to retrieve any of the secrets, you can see the errors in Errors in the response. Secrets Manager generates CloudTrail GetSecretValue log entries for each secret you request when you call this action. Do not include sensitive information in request parameters because it might be logged. For more information, see Logging Secrets Manager events with CloudTrail.  Required permissions:  secretsmanager:BatchGetSecretValue, and you must have secretsmanager:GetSecretValue for each secret. If you use filters, you must also have secretsmanager:ListSecrets. If the secrets are encrypted using customer-managed keys instead of the Amazon Web Services managed key  aws/secretsmanager, then you also need kms:Decrypt permissions for the keys. For more information, see  IAM policy actions for Secrets Manager and Authentication  and access control in Secrets Manager.
    @Sendable
    public func batchGetSecretValue(_ input: BatchGetSecretValueRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> BatchGetSecretValueResponse {
        return try await self.client.execute(
            operation: "BatchGetSecretValue", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Turns off automatic rotation, and if a rotation is currently in progress, cancels the rotation. If you cancel a rotation in progress, it can leave the VersionStage labels in an unexpected state. You might need to remove the staging label AWSPENDING from the partially created version.  You also need to determine whether to roll back to the previous version of the secret  by moving the staging label AWSCURRENT to the version that has AWSPENDING. To determine  which version has a specific staging label, call ListSecretVersionIds. Then use  UpdateSecretVersionStage to change staging labels.  For more information, see How rotation works. To turn on automatic rotation again, call RotateSecret. Secrets Manager generates a CloudTrail log entry when you call this action. Do not include sensitive information in request parameters because it might be logged. For more information, see Logging Secrets Manager events with CloudTrail.  Required permissions:  secretsmanager:CancelRotateSecret.  For more information, see  IAM policy actions for Secrets Manager and Authentication  and access control in Secrets Manager.
    @Sendable
    public func cancelRotateSecret(_ input: CancelRotateSecretRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> CancelRotateSecretResponse {
        return try await self.client.execute(
            operation: "CancelRotateSecret", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Creates a new secret. A secret can be a password, a set of  credentials such as a user name and password, an OAuth token, or other secret information  that you store in an encrypted form in Secrets Manager. The secret also  includes the connection information to access a database or other service, which Secrets Manager  doesn't encrypt. A secret in Secrets Manager consists of both the protected secret data and the important information needed to manage the secret. For secrets that use managed rotation, you need to create the secret through the managing service. For more information, see Secrets Manager secrets managed by other Amazon Web Services services.
    ///   For information about creating a secret in the console, see Create a secret. To create a secret, you can provide the secret value to be encrypted in either the SecretString parameter or the SecretBinary parameter, but not both.  If you include SecretString or SecretBinary then Secrets Manager creates an initial secret version and automatically attaches the staging label AWSCURRENT to it. For database credentials you want to rotate, for Secrets Manager to be able to rotate the secret, you must make sure the JSON you store in the SecretString matches the JSON structure of a database secret. If you don't specify an KMS encryption key, Secrets Manager uses the Amazon Web Services managed key  aws/secretsmanager. If this key  doesn't already exist in your account, then Secrets Manager creates it for you automatically. All users and roles in the Amazon Web Services account automatically have access to use aws/secretsmanager.  Creating aws/secretsmanager can result in a one-time significant delay in returning the  result. If the secret is in a different Amazon Web Services account from the credentials calling the API, then  you can't use aws/secretsmanager to encrypt the secret, and you must create  and use a customer managed KMS key.  Secrets Manager generates a CloudTrail log entry when you call this action. Do not include sensitive information in request parameters except SecretBinary or SecretString because it might be logged. For more information, see Logging Secrets Manager events with CloudTrail.  Required permissions:  secretsmanager:CreateSecret. If you  include tags in the secret, you also need secretsmanager:TagResource. For more information, see  IAM policy actions for Secrets Manager and Authentication  and access control in Secrets Manager.  To encrypt the secret with a KMS key other than aws/secretsmanager, you need kms:GenerateDataKey and kms:Decrypt permission to the key.
    @Sendable
    public func createSecret(_ input: CreateSecretRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> CreateSecretResponse {
        return try await self.client.execute(
            operation: "CreateSecret", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Deletes the resource-based permission policy attached to the secret. To attach a policy to  a secret, use PutResourcePolicy. Secrets Manager generates a CloudTrail log entry when you call this action. Do not include sensitive information in request parameters because it might be logged. For more information, see Logging Secrets Manager events with CloudTrail.  Required permissions:  secretsmanager:DeleteResourcePolicy.  For more information, see  IAM policy actions for Secrets Manager and Authentication  and access control in Secrets Manager.
    @Sendable
    public func deleteResourcePolicy(_ input: DeleteResourcePolicyRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DeleteResourcePolicyResponse {
        return try await self.client.execute(
            operation: "DeleteResourcePolicy", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Deletes a secret and all of its versions. You can specify a recovery window during which you can restore the secret. The minimum recovery window is 7 days.  The default recovery window is 30 days. Secrets Manager attaches a DeletionDate stamp to the secret that specifies the end of the recovery window. At the end of the recovery window, Secrets Manager deletes the secret permanently. You can't delete a primary secret that is replicated to other Regions. You must first delete the  replicas using RemoveRegionsFromReplication, and then delete the primary secret.  When you delete a replica, it is deleted immediately. You can't directly delete a version of a secret. Instead, you remove all staging labels  from the version using UpdateSecretVersionStage. This marks the version as deprecated,  and then Secrets Manager can automatically delete the version in the background. To determine whether an application still uses a secret, you can create an Amazon CloudWatch alarm  to alert you to any attempts to access a secret during the recovery window. For more information,  see  Monitor secrets scheduled for deletion. Secrets Manager performs the permanent secret deletion at the end of the waiting period as a background task with low priority. There is no guarantee of a specific time after the recovery window for the permanent delete to occur. At any time before recovery window ends, you can use RestoreSecret to remove the DeletionDate and cancel the deletion of the secret. When a secret is scheduled for deletion, you cannot retrieve the secret value. You must first cancel the deletion with RestoreSecret and then you can retrieve the secret. Secrets Manager generates a CloudTrail log entry when you call this action. Do not include sensitive information in request parameters because it might be logged. For more information, see Logging Secrets Manager events with CloudTrail.  Required permissions:  secretsmanager:DeleteSecret.  For more information, see  IAM policy actions for Secrets Manager and Authentication  and access control in Secrets Manager.
    @Sendable
    public func deleteSecret(_ input: DeleteSecretRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DeleteSecretResponse {
        return try await self.client.execute(
            operation: "DeleteSecret", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Retrieves the details of a secret. It does not include the encrypted secret value. Secrets Manager only returns fields that have a value in the response.  Secrets Manager generates a CloudTrail log entry when you call this action. Do not include sensitive information in request parameters because it might be logged. For more information, see Logging Secrets Manager events with CloudTrail.  Required permissions:  secretsmanager:DescribeSecret.  For more information, see  IAM policy actions for Secrets Manager and Authentication  and access control in Secrets Manager.
    @Sendable
    public func describeSecret(_ input: DescribeSecretRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DescribeSecretResponse {
        return try await self.client.execute(
            operation: "DescribeSecret", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Generates a random password. We recommend that you specify the maximum length and include every character type that the system you are generating a password for can support. By default, Secrets Manager uses uppercase and lowercase letters, numbers, and the following characters in passwords: !\"#$%&'()*+,-./:;?@[\\]^_`{|}~  Secrets Manager generates a CloudTrail log entry when you call this action.  Required permissions:  secretsmanager:GetRandomPassword.  For more information, see  IAM policy actions for Secrets Manager and Authentication  and access control in Secrets Manager.
    @Sendable
    public func getRandomPassword(_ input: GetRandomPasswordRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> GetRandomPasswordResponse {
        return try await self.client.execute(
            operation: "GetRandomPassword", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Retrieves the JSON text of the resource-based policy document attached to the secret. For more information about permissions policies attached to a secret, see  Permissions  policies attached to a secret. Secrets Manager generates a CloudTrail log entry when you call this action. Do not include sensitive information in request parameters because it might be logged. For more information, see Logging Secrets Manager events with CloudTrail.  Required permissions:  secretsmanager:GetResourcePolicy.  For more information, see  IAM policy actions for Secrets Manager and Authentication  and access control in Secrets Manager.
    @Sendable
    public func getResourcePolicy(_ input: GetResourcePolicyRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> GetResourcePolicyResponse {
        return try await self.client.execute(
            operation: "GetResourcePolicy", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Retrieves the contents of the encrypted fields SecretString or SecretBinary from the specified version of a secret, whichever contains content. To retrieve the values for a group of secrets, call BatchGetSecretValue. We recommend that you cache your secret values by using client-side caching.  Caching secrets improves speed and reduces your costs. For more information, see Cache secrets for  your applications. To retrieve the previous version of a secret, use VersionStage and specify  AWSPREVIOUS. To revert to the previous version of a secret, call UpdateSecretVersionStage. Secrets Manager generates a CloudTrail log entry when you call this action. Do not include sensitive information in request parameters because it might be logged. For more information, see Logging Secrets Manager events with CloudTrail.  Required permissions:  secretsmanager:GetSecretValue.  If the secret is encrypted using a customer-managed key instead of the Amazon Web Services managed key  aws/secretsmanager, then you also need kms:Decrypt permissions for that key. For more information, see  IAM policy actions for Secrets Manager and Authentication  and access control in Secrets Manager.
    @Sendable
    public func getSecretValue(_ input: GetSecretValueRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> GetSecretValueResponse {
        return try await self.client.execute(
            operation: "GetSecretValue", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Lists the versions of a secret. Secrets Manager uses staging labels to indicate the different versions  of a secret. For more information, see  Secrets Manager concepts: Versions. To list the secrets in the account, use ListSecrets. Secrets Manager generates a CloudTrail log entry when you call this action. Do not include sensitive information in request parameters because it might be logged. For more information, see Logging Secrets Manager events with CloudTrail.  Required permissions:  secretsmanager:ListSecretVersionIds.  For more information, see  IAM policy actions for Secrets Manager and Authentication  and access control in Secrets Manager.
    @Sendable
    public func listSecretVersionIds(_ input: ListSecretVersionIdsRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> ListSecretVersionIdsResponse {
        return try await self.client.execute(
            operation: "ListSecretVersionIds", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Lists the secrets that are stored by Secrets Manager in the Amazon Web Services account, not including secrets  that are marked for deletion. To see secrets marked for deletion, use the Secrets Manager console. All Secrets Manager operations are eventually consistent. ListSecrets might not reflect changes from the last five minutes. You can get more recent information for a specific secret by calling DescribeSecret. To list the versions of a secret, use ListSecretVersionIds. To retrieve the values for the secrets, call BatchGetSecretValue or GetSecretValue. For information about finding secrets in the console, see Find secrets in Secrets Manager. Secrets Manager generates a CloudTrail log entry when you call this action. Do not include sensitive information in request parameters because it might be logged. For more information, see Logging Secrets Manager events with CloudTrail.  Required permissions:  secretsmanager:ListSecrets.  For more information, see  IAM policy actions for Secrets Manager and Authentication  and access control in Secrets Manager.
    @Sendable
    public func listSecrets(_ input: ListSecretsRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> ListSecretsResponse {
        return try await self.client.execute(
            operation: "ListSecrets", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Attaches a resource-based permission policy to a secret. A resource-based policy is  optional. For more information, see Authentication and access control for Secrets Manager  For information about attaching a policy in the console, see Attach a  permissions policy to a secret. Secrets Manager generates a CloudTrail log entry when you call this action. Do not include sensitive information in request parameters because it might be logged. For more information, see Logging Secrets Manager events with CloudTrail.  Required permissions:  secretsmanager:PutResourcePolicy.  For more information, see  IAM policy actions for Secrets Manager and Authentication  and access control in Secrets Manager.
    @Sendable
    public func putResourcePolicy(_ input: PutResourcePolicyRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> PutResourcePolicyResponse {
        return try await self.client.execute(
            operation: "PutResourcePolicy", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Creates a new version with a new encrypted secret value and attaches it to the secret. The  version can contain a new SecretString value or a new SecretBinary value.  We recommend you avoid calling PutSecretValue at a sustained rate of more than  once every 10 minutes. When you update the secret value, Secrets Manager creates a new version  of the secret. Secrets Manager removes outdated versions when there are more than 100, but it does not  remove versions created less than 24 hours ago. If you call PutSecretValue more  than once every 10 minutes, you create more versions than Secrets Manager removes, and you will reach  the quota for secret versions. You can specify the staging labels to attach to the new version in VersionStages.  If you don't include VersionStages, then Secrets Manager automatically moves the staging label AWSCURRENT to this version. If this operation creates  the first version for the secret, then Secrets Manager automatically attaches the staging label AWSCURRENT to it.  If this operation moves the staging label AWSCURRENT from another version to this version, then Secrets Manager also automatically moves the staging label AWSPREVIOUS to the version that AWSCURRENT was removed from. This operation is idempotent. If you call this operation with a ClientRequestToken  that matches an existing version's VersionId, and you specify the same secret data, the operation succeeds but does nothing. However, if the secret data is different, then the operation fails because you can't modify an existing version; you can only create new ones. Secrets Manager generates a CloudTrail log entry when you call this action. Do not include sensitive information in request parameters except SecretBinary or SecretString because it might be logged. For more information, see Logging Secrets Manager events with CloudTrail.  Required permissions:  secretsmanager:PutSecretValue.  For more information, see  IAM policy actions for Secrets Manager and Authentication  and access control in Secrets Manager.
    @Sendable
    public func putSecretValue(_ input: PutSecretValueRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> PutSecretValueResponse {
        return try await self.client.execute(
            operation: "PutSecretValue", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// For a secret that is replicated to other Regions, deletes the secret replicas from the Regions you specify. Secrets Manager generates a CloudTrail log entry when you call this action. Do not include sensitive information in request parameters because it might be logged. For more information, see Logging Secrets Manager events with CloudTrail.  Required permissions:  secretsmanager:RemoveRegionsFromReplication.  For more information, see  IAM policy actions for Secrets Manager and Authentication  and access control in Secrets Manager.
    @Sendable
    public func removeRegionsFromReplication(_ input: RemoveRegionsFromReplicationRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> RemoveRegionsFromReplicationResponse {
        return try await self.client.execute(
            operation: "RemoveRegionsFromReplication", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Replicates the secret to a new Regions. See Multi-Region secrets. Secrets Manager generates a CloudTrail log entry when you call this action. Do not include sensitive information in request parameters because it might be logged. For more information, see Logging Secrets Manager events with CloudTrail.  Required permissions:  secretsmanager:ReplicateSecretToRegions.  If the primary secret is encrypted with a KMS key other than aws/secretsmanager, you also need kms:Decrypt permission to the key. To encrypt the replicated secret with a KMS key other than aws/secretsmanager, you need kms:GenerateDataKey and kms:Encrypt to the key. For more information, see  IAM policy actions for Secrets Manager and Authentication  and access control in Secrets Manager.
    @Sendable
    public func replicateSecretToRegions(_ input: ReplicateSecretToRegionsRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> ReplicateSecretToRegionsResponse {
        return try await self.client.execute(
            operation: "ReplicateSecretToRegions", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Cancels the scheduled deletion of a secret by removing the DeletedDate time stamp. You can access a secret again after it has been restored. Secrets Manager generates a CloudTrail log entry when you call this action. Do not include sensitive information in request parameters because it might be logged. For more information, see Logging Secrets Manager events with CloudTrail.  Required permissions:  secretsmanager:RestoreSecret.  For more information, see  IAM policy actions for Secrets Manager and Authentication  and access control in Secrets Manager.
    @Sendable
    public func restoreSecret(_ input: RestoreSecretRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> RestoreSecretResponse {
        return try await self.client.execute(
            operation: "RestoreSecret", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Configures and starts the asynchronous process of rotating the secret. For information about rotation,  see Rotate secrets in the Secrets Manager User Guide. If you include the configuration parameters, the operation sets the values for the secret and then immediately starts a rotation. If you don't include the configuration parameters, the operation starts a rotation with the values already stored in the secret.  When rotation is successful, the AWSPENDING staging label might be attached to the same version as the AWSCURRENT version, or it might not be attached to any version. If the AWSPENDING staging label is present but not attached to the same version as AWSCURRENT, then any later invocation of RotateSecret assumes that a previous rotation request is still in progress and returns an error. When rotation is unsuccessful, the AWSPENDING staging label might be attached to an empty secret version. For more information, see Troubleshoot rotation in the Secrets Manager User Guide. Secrets Manager generates a CloudTrail log entry when you call this action. Do not include sensitive information in request parameters because it might be logged. For more information, see Logging Secrets Manager events with CloudTrail.  Required permissions:  secretsmanager:RotateSecret.  For more information, see  IAM policy actions for Secrets Manager and Authentication  and access control in Secrets Manager. You also need lambda:InvokeFunction permissions on the rotation function.  For more information, see  Permissions for rotation.
    @Sendable
    public func rotateSecret(_ input: RotateSecretRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> RotateSecretResponse {
        return try await self.client.execute(
            operation: "RotateSecret", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Removes the link between the replica secret and the primary secret and promotes the replica to a primary secret in the replica Region. You must call this operation from the Region in which you want to promote the replica to a primary secret. Secrets Manager generates a CloudTrail log entry when you call this action. Do not include sensitive information in request parameters because it might be logged. For more information, see Logging Secrets Manager events with CloudTrail.  Required permissions:  secretsmanager:StopReplicationToReplica.  For more information, see  IAM policy actions for Secrets Manager and Authentication  and access control in Secrets Manager.
    @Sendable
    public func stopReplicationToReplica(_ input: StopReplicationToReplicaRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> StopReplicationToReplicaResponse {
        return try await self.client.execute(
            operation: "StopReplicationToReplica", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Attaches tags to a secret. Tags consist of a key name and a value. Tags are part of the  secret's metadata. They are not associated with specific versions of the secret. This operation appends tags to the existing list of tags. For tag quotas and naming restrictions, see Service quotas for Tagging in the Amazon Web Services General  Reference guide.  If you use tags as part of your security strategy, then adding or removing a tag can change permissions. If successfully completing this operation would result in you losing your permissions for this secret, then the operation is blocked and returns an Access Denied error.  Secrets Manager generates a CloudTrail log entry when you call this action. Do not include sensitive information in request parameters because it might be logged. For more information, see Logging Secrets Manager events with CloudTrail.  Required permissions:  secretsmanager:TagResource.  For more information, see  IAM policy actions for Secrets Manager and Authentication  and access control in Secrets Manager.
    @Sendable
    public func tagResource(_ input: TagResourceRequest, logger: Logger = AWSClient.loggingDisabled) async throws {
        return try await self.client.execute(
            operation: "TagResource", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Removes specific tags from a secret. This operation is idempotent. If a requested tag is not attached to the secret, no error is returned and the secret metadata is unchanged.  If you use tags as part of your security strategy, then removing a tag can change permissions. If successfully completing this operation would result in you losing your permissions for this secret, then the operation is blocked and returns an Access Denied error.  Secrets Manager generates a CloudTrail log entry when you call this action. Do not include sensitive information in request parameters because it might be logged. For more information, see Logging Secrets Manager events with CloudTrail.  Required permissions:  secretsmanager:UntagResource.  For more information, see  IAM policy actions for Secrets Manager and Authentication  and access control in Secrets Manager.
    @Sendable
    public func untagResource(_ input: UntagResourceRequest, logger: Logger = AWSClient.loggingDisabled) async throws {
        return try await self.client.execute(
            operation: "UntagResource", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Modifies the details of a secret, including metadata and the secret value. To change the secret value, you can also use PutSecretValue. To change the rotation configuration of a secret, use RotateSecret instead. To change a secret so that it is managed by another service, you need to recreate the secret in that service. See Secrets Manager secrets managed by other Amazon Web Services services. We recommend you avoid calling UpdateSecret at a sustained rate of more than  once every 10 minutes. When you call UpdateSecret to update the secret value, Secrets Manager creates a new version  of the secret. Secrets Manager removes outdated versions when there are more than 100, but it does not  remove versions created less than 24 hours ago. If you update the secret value more  than once every 10 minutes, you create more versions than Secrets Manager removes, and you will reach  the quota for secret versions. If you include SecretString or SecretBinary to create a new secret version, Secrets Manager automatically moves the staging label AWSCURRENT to the new version. Then it attaches the label AWSPREVIOUS to the version that AWSCURRENT was removed from. If you call this operation with a ClientRequestToken that matches an existing version's  VersionId, the operation results in an error. You can't modify an existing  version, you can only create a new version. To remove a version, remove all staging labels from it. See  UpdateSecretVersionStage. Secrets Manager generates a CloudTrail log entry when you call this action. Do not include sensitive information in request parameters except SecretBinary or SecretString because it might be logged. For more information, see Logging Secrets Manager events with CloudTrail.  Required permissions:  secretsmanager:UpdateSecret.  For more information, see  IAM policy actions for Secrets Manager and Authentication  and access control in Secrets Manager.  If you use a customer managed key, you must also have kms:GenerateDataKey, kms:Encrypt, and  kms:Decrypt permissions on the key. If you change the KMS key and you don't have kms:Encrypt permission to the new key, Secrets Manager does not re-ecrypt existing secret versions with the new key. For more information, see  Secret encryption and decryption.
    @Sendable
    public func updateSecret(_ input: UpdateSecretRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> UpdateSecretResponse {
        return try await self.client.execute(
            operation: "UpdateSecret", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Modifies the staging labels attached to a version of a secret. Secrets Manager uses staging labels to track a version as it progresses through the secret rotation process. Each staging label can be  attached to only one version at a time. To add a staging label to a version when it is already  attached to another version, Secrets Manager first removes it from the other version first and then attaches it to this one. For more information about versions and staging labels, see Concepts: Version.  The staging labels that you specify in the VersionStage parameter are added to the existing list of staging labels for the version.  You can move the AWSCURRENT staging label to this version by including it in this call.  Whenever you move AWSCURRENT, Secrets Manager automatically moves the label AWSPREVIOUS to the version that AWSCURRENT was removed from.  If this action results in the last label being removed from a version, then the version is considered to be 'deprecated' and can be deleted by Secrets Manager. Secrets Manager generates a CloudTrail log entry when you call this action. Do not include sensitive information in request parameters because it might be logged. For more information, see Logging Secrets Manager events with CloudTrail.  Required permissions:  secretsmanager:UpdateSecretVersionStage.  For more information, see  IAM policy actions for Secrets Manager and Authentication  and access control in Secrets Manager.
    @Sendable
    public func updateSecretVersionStage(_ input: UpdateSecretVersionStageRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> UpdateSecretVersionStageResponse {
        return try await self.client.execute(
            operation: "UpdateSecretVersionStage", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Validates that a resource policy does not grant a wide range of principals access to your secret. A resource-based policy is optional for secrets. The API performs three checks when validating the policy:   Sends a call to Zelkova, an automated reasoning engine, to ensure your resource policy does not allow broad access to your secret, for example policies that use a wildcard for the principal.   Checks for correct syntax in a policy.   Verifies the policy does not lock out a caller.   Secrets Manager generates a CloudTrail log entry when you call this action. Do not include sensitive information in request parameters because it might be logged. For more information, see Logging Secrets Manager events with CloudTrail.  Required permissions:  secretsmanager:ValidateResourcePolicy and secretsmanager:PutResourcePolicy.  For more information, see  IAM policy actions for Secrets Manager and Authentication  and access control in Secrets Manager.
    @Sendable
    public func validateResourcePolicy(_ input: ValidateResourcePolicyRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> ValidateResourcePolicyResponse {
        return try await self.client.execute(
            operation: "ValidateResourcePolicy", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
}

extension SecretsManager {
    /// Initializer required by `AWSService.with(middlewares:timeout:byteBufferAllocator:options)`. You are not able to use this initializer directly as there are not public
    /// initializers for `AWSServiceConfig.Patch`. Please use `AWSService.with(middlewares:timeout:byteBufferAllocator:options)` instead.
    public init(from: SecretsManager, patch: AWSServiceConfig.Patch) {
        self.client = from.client
        self.config = from.config.with(patch: patch)
    }
}

// MARK: Paginators

@available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
extension SecretsManager {
    /// Retrieves the contents of the encrypted fields SecretString or SecretBinary for up to 20 secrets.  To retrieve a single secret, call GetSecretValue.  To choose which secrets to retrieve, you can specify a list of secrets by name or ARN, or you can use filters. If Secrets Manager encounters errors such as AccessDeniedException while attempting to retrieve any of the secrets, you can see the errors in Errors in the response. Secrets Manager generates CloudTrail GetSecretValue log entries for each secret you request when you call this action. Do not include sensitive information in request parameters because it might be logged. For more information, see Logging Secrets Manager events with CloudTrail.  Required permissions:  secretsmanager:BatchGetSecretValue, and you must have secretsmanager:GetSecretValue for each secret. If you use filters, you must also have secretsmanager:ListSecrets. If the secrets are encrypted using customer-managed keys instead of the Amazon Web Services managed key  aws/secretsmanager, then you also need kms:Decrypt permissions for the keys. For more information, see  IAM policy actions for Secrets Manager and Authentication  and access control in Secrets Manager.
    /// Return PaginatorSequence for operation.
    ///
    /// - Parameters:
    ///   - input: Input for request
    ///   - logger: Logger used flot logging
    public func batchGetSecretValuePaginator(
        _ input: BatchGetSecretValueRequest,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<BatchGetSecretValueRequest, BatchGetSecretValueResponse> {
        return .init(
            input: input,
            command: self.batchGetSecretValue,
            inputKey: \BatchGetSecretValueRequest.nextToken,
            outputKey: \BatchGetSecretValueResponse.nextToken,
            logger: logger
        )
    }

    /// Lists the versions of a secret. Secrets Manager uses staging labels to indicate the different versions  of a secret. For more information, see  Secrets Manager concepts: Versions. To list the secrets in the account, use ListSecrets. Secrets Manager generates a CloudTrail log entry when you call this action. Do not include sensitive information in request parameters because it might be logged. For more information, see Logging Secrets Manager events with CloudTrail.  Required permissions:  secretsmanager:ListSecretVersionIds.  For more information, see  IAM policy actions for Secrets Manager and Authentication  and access control in Secrets Manager.
    /// Return PaginatorSequence for operation.
    ///
    /// - Parameters:
    ///   - input: Input for request
    ///   - logger: Logger used flot logging
    public func listSecretVersionIdsPaginator(
        _ input: ListSecretVersionIdsRequest,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<ListSecretVersionIdsRequest, ListSecretVersionIdsResponse> {
        return .init(
            input: input,
            command: self.listSecretVersionIds,
            inputKey: \ListSecretVersionIdsRequest.nextToken,
            outputKey: \ListSecretVersionIdsResponse.nextToken,
            logger: logger
        )
    }

    /// Lists the secrets that are stored by Secrets Manager in the Amazon Web Services account, not including secrets  that are marked for deletion. To see secrets marked for deletion, use the Secrets Manager console. All Secrets Manager operations are eventually consistent. ListSecrets might not reflect changes from the last five minutes. You can get more recent information for a specific secret by calling DescribeSecret. To list the versions of a secret, use ListSecretVersionIds. To retrieve the values for the secrets, call BatchGetSecretValue or GetSecretValue. For information about finding secrets in the console, see Find secrets in Secrets Manager. Secrets Manager generates a CloudTrail log entry when you call this action. Do not include sensitive information in request parameters because it might be logged. For more information, see Logging Secrets Manager events with CloudTrail.  Required permissions:  secretsmanager:ListSecrets.  For more information, see  IAM policy actions for Secrets Manager and Authentication  and access control in Secrets Manager.
    /// Return PaginatorSequence for operation.
    ///
    /// - Parameters:
    ///   - input: Input for request
    ///   - logger: Logger used flot logging
    public func listSecretsPaginator(
        _ input: ListSecretsRequest,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<ListSecretsRequest, ListSecretsResponse> {
        return .init(
            input: input,
            command: self.listSecrets,
            inputKey: \ListSecretsRequest.nextToken,
            outputKey: \ListSecretsResponse.nextToken,
            logger: logger
        )
    }
}

extension SecretsManager.BatchGetSecretValueRequest: AWSPaginateToken {
    public func usingPaginationToken(_ token: String) -> SecretsManager.BatchGetSecretValueRequest {
        return .init(
            filters: self.filters,
            maxResults: self.maxResults,
            nextToken: token,
            secretIdList: self.secretIdList
        )
    }
}

extension SecretsManager.ListSecretVersionIdsRequest: AWSPaginateToken {
    public func usingPaginationToken(_ token: String) -> SecretsManager.ListSecretVersionIdsRequest {
        return .init(
            includeDeprecated: self.includeDeprecated,
            maxResults: self.maxResults,
            nextToken: token,
            secretId: self.secretId
        )
    }
}

extension SecretsManager.ListSecretsRequest: AWSPaginateToken {
    public func usingPaginationToken(_ token: String) -> SecretsManager.ListSecretsRequest {
        return .init(
            filters: self.filters,
            includePlannedDeletion: self.includePlannedDeletion,
            maxResults: self.maxResults,
            nextToken: token,
            sortOrder: self.sortOrder
        )
    }
}
