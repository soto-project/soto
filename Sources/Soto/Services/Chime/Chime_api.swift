//===----------------------------------------------------------------------===//
//
// This source file is part of the Soto for AWS open source project
//
// Copyright (c) 2017-2024 the Soto project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
// See CONTRIBUTORS.txt for the list of Soto project authors
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by https://github.com/soto-project/soto-codegenerator.
// DO NOT EDIT.

#if os(Linux) && compiler(<5.10)
// swift-corelibs-foundation hasn't been updated with Sendable conformances
@preconcurrency import Foundation
#else
import Foundation
#endif
@_exported import SotoCore

/// Service object for interacting with AWS Chime service.
///
///   Most of these APIs are no longer supported and will not be updated. We recommend using the latest versions in the  Amazon Chime SDK API reference, in the Amazon Chime SDK. Using the latest versions requires migrating to dedicated namespaces. For more information, refer to   Migrating from the Amazon Chime namespace in the  Amazon Chime SDK Developer Guide.  The Amazon Chime application programming interface (API) is designed so administrators can perform key tasks, such as creating and managing Amazon Chime accounts, users, and Voice Connectors. This guide provides detailed information about the Amazon Chime API, including operations, types, inputs and outputs, and error codes. You can use an AWS SDK, the AWS Command Line Interface (AWS CLI), or the REST API to make API calls for Amazon Chime. We recommend using an AWS SDK or the  AWS CLI. The page for each API action contains a See Also section that includes links to information about using the action with a language-specific  AWS SDK or the AWS CLI.  Using an AWS SDK   You don't need to write code to calculate a signature for request authentication. The SDK clients authenticate your requests by using access keys that you provide. For more information about AWS SDKs, see the  AWS Developer Center.   Using the AWS CLI  Use your access keys with the AWS CLI to make API calls. For information about setting up the AWS CLI, see  Installing the AWS Command Line Interface in the AWS Command Line Interface User Guide. For a list of available Amazon Chime commands, see the  Amazon Chime commands in the  AWS CLI Command Reference.   Using REST APIs  If you use REST to make API calls, you must authenticate your request by providing a signature. Amazon Chime supports Signature Version 4. For more information, see  Signature Version 4 Signing Process in the Amazon Web Services General Reference. When making REST API calls, use the service name chime and REST endpoint https://service.chime.aws.amazon.com.   Administrative permissions are controlled using AWS Identity and Access Management (IAM). For more information, see  Identity and Access Management for Amazon Chime in the Amazon Chime Administration Guide.
public struct Chime: AWSService {
    // MARK: Member variables

    /// Client used for communication with AWS
    public let client: AWSClient
    /// Service configuration
    public let config: AWSServiceConfig

    // MARK: Initialization

    /// Initialize the Chime client
    /// - parameters:
    ///     - client: AWSClient used to process requests
    ///     - partition: AWS partition where service resides, standard (.aws), china (.awscn), government (.awsusgov).
    ///     - endpoint: Custom endpoint URL to use instead of standard AWS servers
    ///     - middleware: Middleware chain used to edit requests before they are sent and responses before they are decoded 
    ///     - timeout: Timeout value for HTTP requests
    ///     - byteBufferAllocator: Allocator for ByteBuffers
    ///     - options: Service options
    public init(
        client: AWSClient,
        partition: AWSPartition = .aws,
        endpoint: String? = nil,
        middleware: AWSMiddlewareProtocol? = nil,
        timeout: TimeAmount? = nil,
        byteBufferAllocator: ByteBufferAllocator = ByteBufferAllocator(),
        options: AWSServiceConfig.Options = []
    ) {
        self.client = client
        self.config = AWSServiceConfig(
            region: nil,
            partition: partition,
            serviceName: "Chime",
            serviceIdentifier: "chime",
            serviceProtocol: .restjson,
            apiVersion: "2018-05-01",
            endpoint: endpoint,
            serviceEndpoints: Self.serviceEndpoints,
            partitionEndpoints: Self.partitionEndpoints,
            errorType: ChimeErrorType.self,
            middleware: middleware,
            timeout: timeout,
            byteBufferAllocator: byteBufferAllocator,
            options: options
        )
    }


    /// custom endpoints for regions
    static var serviceEndpoints: [String: String] {[
        "aws-global": "chime.us-east-1.amazonaws.com"
    ]}

    /// Default endpoint and region to use for each partition
    static var partitionEndpoints: [AWSPartition: (endpoint: String, region: SotoCore.Region)] {[
        .aws: (endpoint: "aws-global", region: .useast1)
    ]}


    // MARK: API Calls

    /// Associates a phone number with the specified Amazon Chime user.
    @Sendable
    @inlinable
    public func associatePhoneNumberWithUser(_ input: AssociatePhoneNumberWithUserRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> AssociatePhoneNumberWithUserResponse {
        try await self.client.execute(
            operation: "AssociatePhoneNumberWithUser", 
            path: "/accounts/{AccountId}/users/{UserId}?operation=associate-phone-number", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Associates a phone number with the specified Amazon Chime user.
    ///
    /// Parameters:
    ///   - accountId: The Amazon Chime account ID.
    ///   - e164PhoneNumber: The phone number, in E.164 format.
    ///   - userId: The user ID.
    ///   - logger: Logger use during operation
    @inlinable
    public func associatePhoneNumberWithUser(
        accountId: String,
        e164PhoneNumber: String,
        userId: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> AssociatePhoneNumberWithUserResponse {
        let input = AssociatePhoneNumberWithUserRequest(
            accountId: accountId, 
            e164PhoneNumber: e164PhoneNumber, 
            userId: userId
        )
        return try await self.associatePhoneNumberWithUser(input, logger: logger)
    }

    /// Associates phone numbers with the specified Amazon Chime Voice Connector.   This API is is no longer supported and will not be updated. We recommend using the latest version, AssociatePhoneNumbersWithVoiceConnector, in the Amazon Chime SDK. Using the latest version requires migrating to a dedicated namespace. For more information, refer to   Migrating from the Amazon Chime namespace in the  Amazon Chime SDK Developer Guide.
    @available(*, deprecated, message: "Replaced by AssociatePhoneNumbersWithVoiceConnector in the Amazon Chime SDK Voice Namespace")
    @Sendable
    @inlinable
    public func associatePhoneNumbersWithVoiceConnector(_ input: AssociatePhoneNumbersWithVoiceConnectorRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> AssociatePhoneNumbersWithVoiceConnectorResponse {
        try await self.client.execute(
            operation: "AssociatePhoneNumbersWithVoiceConnector", 
            path: "/voice-connectors/{VoiceConnectorId}?operation=associate-phone-numbers", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Associates phone numbers with the specified Amazon Chime Voice Connector.   This API is is no longer supported and will not be updated. We recommend using the latest version, AssociatePhoneNumbersWithVoiceConnector, in the Amazon Chime SDK. Using the latest version requires migrating to a dedicated namespace. For more information, refer to   Migrating from the Amazon Chime namespace in the  Amazon Chime SDK Developer Guide.
    ///
    /// Parameters:
    ///   - e164PhoneNumbers: List of phone numbers, in E.164 format.
    ///   - forceAssociate: If true, associates the provided phone numbers with the provided Amazon Chime Voice Connector and removes any previously existing associations. If false, does not associate any phone numbers that have previously existing associations.
    ///   - voiceConnectorId: The Amazon Chime Voice Connector ID.
    ///   - logger: Logger use during operation
    @available(*, deprecated, message: "Replaced by AssociatePhoneNumbersWithVoiceConnector in the Amazon Chime SDK Voice Namespace")
    @inlinable
    public func associatePhoneNumbersWithVoiceConnector(
        e164PhoneNumbers: [String],
        forceAssociate: Bool? = nil,
        voiceConnectorId: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> AssociatePhoneNumbersWithVoiceConnectorResponse {
        let input = AssociatePhoneNumbersWithVoiceConnectorRequest(
            e164PhoneNumbers: e164PhoneNumbers, 
            forceAssociate: forceAssociate, 
            voiceConnectorId: voiceConnectorId
        )
        return try await self.associatePhoneNumbersWithVoiceConnector(input, logger: logger)
    }

    /// Associates phone numbers with the specified Amazon Chime Voice Connector group.   This API is is no longer supported and will not be updated. We recommend using the latest version, AssociatePhoneNumbersWithVoiceConnectorGroup, in the Amazon Chime SDK. Using the latest version requires migrating to a dedicated namespace. For more information, refer to   Migrating from the Amazon Chime namespace in the  Amazon Chime SDK Developer Guide.
    @available(*, deprecated, message: "Replaced by AssociatePhoneNumbersWithVoiceConnectorGroup in the Amazon Chime SDK Voice Namespace")
    @Sendable
    @inlinable
    public func associatePhoneNumbersWithVoiceConnectorGroup(_ input: AssociatePhoneNumbersWithVoiceConnectorGroupRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> AssociatePhoneNumbersWithVoiceConnectorGroupResponse {
        try await self.client.execute(
            operation: "AssociatePhoneNumbersWithVoiceConnectorGroup", 
            path: "/voice-connector-groups/{VoiceConnectorGroupId}?operation=associate-phone-numbers", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Associates phone numbers with the specified Amazon Chime Voice Connector group.   This API is is no longer supported and will not be updated. We recommend using the latest version, AssociatePhoneNumbersWithVoiceConnectorGroup, in the Amazon Chime SDK. Using the latest version requires migrating to a dedicated namespace. For more information, refer to   Migrating from the Amazon Chime namespace in the  Amazon Chime SDK Developer Guide.
    ///
    /// Parameters:
    ///   - e164PhoneNumbers: List of phone numbers, in E.164 format.
    ///   - forceAssociate: If true, associates the provided phone numbers with the provided Amazon Chime Voice Connector Group and removes any previously existing associations. If false, does not associate any phone numbers that have previously existing associations.
    ///   - voiceConnectorGroupId: The Amazon Chime Voice Connector group ID.
    ///   - logger: Logger use during operation
    @available(*, deprecated, message: "Replaced by AssociatePhoneNumbersWithVoiceConnectorGroup in the Amazon Chime SDK Voice Namespace")
    @inlinable
    public func associatePhoneNumbersWithVoiceConnectorGroup(
        e164PhoneNumbers: [String],
        forceAssociate: Bool? = nil,
        voiceConnectorGroupId: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> AssociatePhoneNumbersWithVoiceConnectorGroupResponse {
        let input = AssociatePhoneNumbersWithVoiceConnectorGroupRequest(
            e164PhoneNumbers: e164PhoneNumbers, 
            forceAssociate: forceAssociate, 
            voiceConnectorGroupId: voiceConnectorGroupId
        )
        return try await self.associatePhoneNumbersWithVoiceConnectorGroup(input, logger: logger)
    }

    /// Associates the specified sign-in delegate groups with the specified Amazon Chime account.
    @Sendable
    @inlinable
    public func associateSigninDelegateGroupsWithAccount(_ input: AssociateSigninDelegateGroupsWithAccountRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> AssociateSigninDelegateGroupsWithAccountResponse {
        try await self.client.execute(
            operation: "AssociateSigninDelegateGroupsWithAccount", 
            path: "/accounts/{AccountId}?operation=associate-signin-delegate-groups", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Associates the specified sign-in delegate groups with the specified Amazon Chime account.
    ///
    /// Parameters:
    ///   - accountId: The Amazon Chime account ID.
    ///   - signinDelegateGroups: The sign-in delegate groups.
    ///   - logger: Logger use during operation
    @inlinable
    public func associateSigninDelegateGroupsWithAccount(
        accountId: String,
        signinDelegateGroups: [SigninDelegateGroup],
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> AssociateSigninDelegateGroupsWithAccountResponse {
        let input = AssociateSigninDelegateGroupsWithAccountRequest(
            accountId: accountId, 
            signinDelegateGroups: signinDelegateGroups
        )
        return try await self.associateSigninDelegateGroupsWithAccount(input, logger: logger)
    }

    /// Creates up to 100 new attendees for an active Amazon Chime SDK meeting.   This API is is no longer supported and will not be updated. We recommend using the latest version, BatchCreateAttendee, in the Amazon Chime SDK. Using the latest version requires migrating to a dedicated namespace. For more information, refer to   Migrating from the Amazon Chime namespace in the  Amazon Chime SDK Developer Guide.  For more information about the Amazon Chime SDK, see
    /// Using the Amazon Chime SDK
    /// in the
    /// Amazon Chime SDK Developer Guide.
    @available(*, deprecated, message: "Replaced by BatchCreateAttendee in the Amazon Chime SDK Meetings Namespace")
    @Sendable
    @inlinable
    public func batchCreateAttendee(_ input: BatchCreateAttendeeRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> BatchCreateAttendeeResponse {
        try await self.client.execute(
            operation: "BatchCreateAttendee", 
            path: "/meetings/{MeetingId}/attendees?operation=batch-create", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Creates up to 100 new attendees for an active Amazon Chime SDK meeting.   This API is is no longer supported and will not be updated. We recommend using the latest version, BatchCreateAttendee, in the Amazon Chime SDK. Using the latest version requires migrating to a dedicated namespace. For more information, refer to   Migrating from the Amazon Chime namespace in the  Amazon Chime SDK Developer Guide.  For more information about the Amazon Chime SDK, see
    /// Using the Amazon Chime SDK
    /// in the
    /// Amazon Chime SDK Developer Guide.
    ///
    /// Parameters:
    ///   - attendees: The request containing the attendees to create.
    ///   - meetingId: The Amazon Chime SDK meeting ID.
    ///   - logger: Logger use during operation
    @available(*, deprecated, message: "Replaced by BatchCreateAttendee in the Amazon Chime SDK Meetings Namespace")
    @inlinable
    public func batchCreateAttendee(
        attendees: [CreateAttendeeRequestItem],
        meetingId: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> BatchCreateAttendeeResponse {
        let input = BatchCreateAttendeeRequest(
            attendees: attendees, 
            meetingId: meetingId
        )
        return try await self.batchCreateAttendee(input, logger: logger)
    }

    /// Adds a specified number of users to a channel.   This API is is no longer supported and will not be updated. We recommend using the latest version, BatchCreateChannelMembership, in the Amazon Chime SDK. Using the latest version requires migrating to a dedicated namespace. For more information, refer to   Migrating from the Amazon Chime namespace in the  Amazon Chime SDK Developer Guide.
    @available(*, deprecated, message: "Replaced by BatchCreateChannelMembership in the Amazon Chime SDK Messaging Namespace")
    @Sendable
    @inlinable
    public func batchCreateChannelMembership(_ input: BatchCreateChannelMembershipRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> BatchCreateChannelMembershipResponse {
        try await self.client.execute(
            operation: "BatchCreateChannelMembership", 
            path: "/channels/{ChannelArn}/memberships?operation=batch-create", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            hostPrefix: "messaging-", 
            logger: logger
        )
    }
    /// Adds a specified number of users to a channel.   This API is is no longer supported and will not be updated. We recommend using the latest version, BatchCreateChannelMembership, in the Amazon Chime SDK. Using the latest version requires migrating to a dedicated namespace. For more information, refer to   Migrating from the Amazon Chime namespace in the  Amazon Chime SDK Developer Guide.
    ///
    /// Parameters:
    ///   - channelArn: The ARN of the channel to which you're adding users.
    ///   - chimeBearer: The AppInstanceUserArn of the user that makes the API call.
    ///   - memberArns: The ARNs of the members you want to add to the channel.
    ///   - type: The membership type of a user, DEFAULT or HIDDEN. Default members are always returned as part of ListChannelMemberships. Hidden members are only returned if the type filter in ListChannelMemberships equals HIDDEN. Otherwise hidden members are not returned. This is only supported by moderators.
    ///   - logger: Logger use during operation
    @available(*, deprecated, message: "Replaced by BatchCreateChannelMembership in the Amazon Chime SDK Messaging Namespace")
    @inlinable
    public func batchCreateChannelMembership(
        channelArn: String,
        chimeBearer: String? = nil,
        memberArns: [String],
        type: ChannelMembershipType? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> BatchCreateChannelMembershipResponse {
        let input = BatchCreateChannelMembershipRequest(
            channelArn: channelArn, 
            chimeBearer: chimeBearer, 
            memberArns: memberArns, 
            type: type
        )
        return try await self.batchCreateChannelMembership(input, logger: logger)
    }

    /// Adds up to 50 members to a chat room in an Amazon Chime Enterprise account. Members can be users or bots. The member role designates whether the member is a  chat room administrator or a general chat room member.
    @Sendable
    @inlinable
    public func batchCreateRoomMembership(_ input: BatchCreateRoomMembershipRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> BatchCreateRoomMembershipResponse {
        try await self.client.execute(
            operation: "BatchCreateRoomMembership", 
            path: "/accounts/{AccountId}/rooms/{RoomId}/memberships?operation=batch-create", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Adds up to 50 members to a chat room in an Amazon Chime Enterprise account. Members can be users or bots. The member role designates whether the member is a  chat room administrator or a general chat room member.
    ///
    /// Parameters:
    ///   - accountId: The Amazon Chime account ID.
    ///   - membershipItemList: The list of membership items.
    ///   - roomId: The room ID.
    ///   - logger: Logger use during operation
    @inlinable
    public func batchCreateRoomMembership(
        accountId: String,
        membershipItemList: [MembershipItem],
        roomId: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> BatchCreateRoomMembershipResponse {
        let input = BatchCreateRoomMembershipRequest(
            accountId: accountId, 
            membershipItemList: membershipItemList, 
            roomId: roomId
        )
        return try await self.batchCreateRoomMembership(input, logger: logger)
    }

    /// Moves phone numbers into the
    /// Deletion queue. Phone numbers must be disassociated from any users or Amazon Chime Voice Connectors before they can be deleted.
    ///
    /// Phone numbers remain in the
    /// Deletion queue for 7 days before they are deleted permanently.
    @Sendable
    @inlinable
    public func batchDeletePhoneNumber(_ input: BatchDeletePhoneNumberRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> BatchDeletePhoneNumberResponse {
        try await self.client.execute(
            operation: "BatchDeletePhoneNumber", 
            path: "/phone-numbers?operation=batch-delete", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Moves phone numbers into the
    /// Deletion queue. Phone numbers must be disassociated from any users or Amazon Chime Voice Connectors before they can be deleted.
    ///
    /// Phone numbers remain in the
    /// Deletion queue for 7 days before they are deleted permanently.
    ///
    /// Parameters:
    ///   - phoneNumberIds: List of phone number IDs.
    ///   - logger: Logger use during operation
    @inlinable
    public func batchDeletePhoneNumber(
        phoneNumberIds: [String],
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> BatchDeletePhoneNumberResponse {
        let input = BatchDeletePhoneNumberRequest(
            phoneNumberIds: phoneNumberIds
        )
        return try await self.batchDeletePhoneNumber(input, logger: logger)
    }

    /// Suspends up to 50 users from a Team or EnterpriseLWA Amazon Chime account. For more information about different account types, see Managing Your Amazon Chime Accounts in the Amazon Chime Administration Guide. Users suspended from a Team account are disassociated from the account,but they can continue to use Amazon Chime as free users. To remove the suspension from suspended Team account users, invite them to the Team account again. You can use the InviteUsers action to do so. Users suspended from an EnterpriseLWA account are immediately signed out of Amazon Chime and can no longer sign in. To remove the suspension from suspended EnterpriseLWA account users, use the  BatchUnsuspendUser action.
    /// To sign out users without suspending them, use the
    /// LogoutUser action.
    @Sendable
    @inlinable
    public func batchSuspendUser(_ input: BatchSuspendUserRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> BatchSuspendUserResponse {
        try await self.client.execute(
            operation: "BatchSuspendUser", 
            path: "/accounts/{AccountId}/users?operation=suspend", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Suspends up to 50 users from a Team or EnterpriseLWA Amazon Chime account. For more information about different account types, see Managing Your Amazon Chime Accounts in the Amazon Chime Administration Guide. Users suspended from a Team account are disassociated from the account,but they can continue to use Amazon Chime as free users. To remove the suspension from suspended Team account users, invite them to the Team account again. You can use the InviteUsers action to do so. Users suspended from an EnterpriseLWA account are immediately signed out of Amazon Chime and can no longer sign in. To remove the suspension from suspended EnterpriseLWA account users, use the  BatchUnsuspendUser action.
    /// To sign out users without suspending them, use the
    /// LogoutUser action.
    ///
    /// Parameters:
    ///   - accountId: The Amazon Chime account ID.
    ///   - userIdList: The request containing the user IDs to suspend.
    ///   - logger: Logger use during operation
    @inlinable
    public func batchSuspendUser(
        accountId: String,
        userIdList: [String],
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> BatchSuspendUserResponse {
        let input = BatchSuspendUserRequest(
            accountId: accountId, 
            userIdList: userIdList
        )
        return try await self.batchSuspendUser(input, logger: logger)
    }

    /// Removes the suspension from up to 50 previously suspended users for the specified Amazon Chime EnterpriseLWA account. Only users on EnterpriseLWA accounts can be unsuspended using this action. For more information about different account types, see   Managing Your Amazon Chime Accounts in the account types, in the Amazon Chime Administration Guide.
    ///  Previously suspended users who are unsuspended using this action are returned to
    /// Registered
    /// status. Users who are not previously suspended are ignored.
    @Sendable
    @inlinable
    public func batchUnsuspendUser(_ input: BatchUnsuspendUserRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> BatchUnsuspendUserResponse {
        try await self.client.execute(
            operation: "BatchUnsuspendUser", 
            path: "/accounts/{AccountId}/users?operation=unsuspend", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Removes the suspension from up to 50 previously suspended users for the specified Amazon Chime EnterpriseLWA account. Only users on EnterpriseLWA accounts can be unsuspended using this action. For more information about different account types, see   Managing Your Amazon Chime Accounts in the account types, in the Amazon Chime Administration Guide.
    ///  Previously suspended users who are unsuspended using this action are returned to
    /// Registered
    /// status. Users who are not previously suspended are ignored.
    ///
    /// Parameters:
    ///   - accountId: The Amazon Chime account ID.
    ///   - userIdList: The request containing the user IDs to unsuspend.
    ///   - logger: Logger use during operation
    @inlinable
    public func batchUnsuspendUser(
        accountId: String,
        userIdList: [String],
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> BatchUnsuspendUserResponse {
        let input = BatchUnsuspendUserRequest(
            accountId: accountId, 
            userIdList: userIdList
        )
        return try await self.batchUnsuspendUser(input, logger: logger)
    }

    /// Updates phone number product types or calling names. You can update one attribute at a time for each UpdatePhoneNumberRequestItem. For example, you can update the product type or the calling name. For toll-free numbers, you cannot use the Amazon Chime Business Calling product type. For numbers outside the U.S., you must use the Amazon Chime SIP Media Application Dial-In product type. Updates to outbound calling names can take up to 72 hours to complete. Pending updates to outbound calling names must be complete before you can request another update.
    @Sendable
    @inlinable
    public func batchUpdatePhoneNumber(_ input: BatchUpdatePhoneNumberRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> BatchUpdatePhoneNumberResponse {
        try await self.client.execute(
            operation: "BatchUpdatePhoneNumber", 
            path: "/phone-numbers?operation=batch-update", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Updates phone number product types or calling names. You can update one attribute at a time for each UpdatePhoneNumberRequestItem. For example, you can update the product type or the calling name. For toll-free numbers, you cannot use the Amazon Chime Business Calling product type. For numbers outside the U.S., you must use the Amazon Chime SIP Media Application Dial-In product type. Updates to outbound calling names can take up to 72 hours to complete. Pending updates to outbound calling names must be complete before you can request another update.
    ///
    /// Parameters:
    ///   - updatePhoneNumberRequestItems: The request containing the phone number IDs and product types or calling names to update.
    ///   - logger: Logger use during operation
    @inlinable
    public func batchUpdatePhoneNumber(
        updatePhoneNumberRequestItems: [UpdatePhoneNumberRequestItem],
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> BatchUpdatePhoneNumberResponse {
        let input = BatchUpdatePhoneNumberRequest(
            updatePhoneNumberRequestItems: updatePhoneNumberRequestItems
        )
        return try await self.batchUpdatePhoneNumber(input, logger: logger)
    }

    /// Updates user details within the UpdateUserRequestItem object for up to 20 users for the specified Amazon Chime account. Currently, only LicenseType updates are supported for this action.
    @Sendable
    @inlinable
    public func batchUpdateUser(_ input: BatchUpdateUserRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> BatchUpdateUserResponse {
        try await self.client.execute(
            operation: "BatchUpdateUser", 
            path: "/accounts/{AccountId}/users", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Updates user details within the UpdateUserRequestItem object for up to 20 users for the specified Amazon Chime account. Currently, only LicenseType updates are supported for this action.
    ///
    /// Parameters:
    ///   - accountId: The Amazon Chime account ID.
    ///   - updateUserRequestItems: The request containing the user IDs and details to update.
    ///   - logger: Logger use during operation
    @inlinable
    public func batchUpdateUser(
        accountId: String,
        updateUserRequestItems: [UpdateUserRequestItem],
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> BatchUpdateUserResponse {
        let input = BatchUpdateUserRequest(
            accountId: accountId, 
            updateUserRequestItems: updateUserRequestItems
        )
        return try await self.batchUpdateUser(input, logger: logger)
    }

    /// Creates an Amazon Chime account under the administrator's AWS account. Only Team account types are currently supported for this action. For more information about different account types, see  Managing Your Amazon Chime Accounts in the Amazon Chime  Administration Guide.
    @Sendable
    @inlinable
    public func createAccount(_ input: CreateAccountRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> CreateAccountResponse {
        try await self.client.execute(
            operation: "CreateAccount", 
            path: "/accounts", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Creates an Amazon Chime account under the administrator's AWS account. Only Team account types are currently supported for this action. For more information about different account types, see  Managing Your Amazon Chime Accounts in the Amazon Chime  Administration Guide.
    ///
    /// Parameters:
    ///   - name: The name of the Amazon Chime account.
    ///   - logger: Logger use during operation
    @inlinable
    public func createAccount(
        name: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> CreateAccountResponse {
        let input = CreateAccountRequest(
            name: name
        )
        return try await self.createAccount(input, logger: logger)
    }

    /// Creates an Amazon Chime SDK messaging AppInstance under an AWS account. Only SDK messaging customers use this API.
    /// CreateAppInstance supports idempotency behavior as described in the AWS API Standard.   This API is is no longer supported and will not be updated. We recommend using the latest version, CreateAppInstance, in the Amazon Chime SDK. Using the latest version requires migrating to a dedicated namespace. For more information, refer to   Migrating from the Amazon Chime namespace in the  Amazon Chime SDK Developer Guide.
    @available(*, deprecated, message: "Replaced by CreateAppInstance in the Amazon Chime SDK Identity Namespace")
    @Sendable
    @inlinable
    public func createAppInstance(_ input: CreateAppInstanceRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> CreateAppInstanceResponse {
        try await self.client.execute(
            operation: "CreateAppInstance", 
            path: "/app-instances", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            hostPrefix: "identity-", 
            logger: logger
        )
    }
    /// Creates an Amazon Chime SDK messaging AppInstance under an AWS account. Only SDK messaging customers use this API.
    /// CreateAppInstance supports idempotency behavior as described in the AWS API Standard.   This API is is no longer supported and will not be updated. We recommend using the latest version, CreateAppInstance, in the Amazon Chime SDK. Using the latest version requires migrating to a dedicated namespace. For more information, refer to   Migrating from the Amazon Chime namespace in the  Amazon Chime SDK Developer Guide.
    ///
    /// Parameters:
    ///   - clientRequestToken: The ClientRequestToken of the AppInstance.
    ///   - metadata: The metadata of the AppInstance. Limited to a 1KB string in UTF-8.
    ///   - name: The name of the AppInstance.
    ///   - tags: Tags assigned to the AppInstance.
    ///   - logger: Logger use during operation
    @available(*, deprecated, message: "Replaced by CreateAppInstance in the Amazon Chime SDK Identity Namespace")
    @inlinable
    public func createAppInstance(
        clientRequestToken: String = CreateAppInstanceRequest.idempotencyToken(),
        metadata: String? = nil,
        name: String,
        tags: [Tag]? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> CreateAppInstanceResponse {
        let input = CreateAppInstanceRequest(
            clientRequestToken: clientRequestToken, 
            metadata: metadata, 
            name: name, 
            tags: tags
        )
        return try await self.createAppInstance(input, logger: logger)
    }

    /// Promotes an AppInstanceUser to an AppInstanceAdmin. The promoted user can perform the following actions.    This API is is no longer supported and will not be updated. We recommend using the latest version, CreateAppInstanceAdmin, in the Amazon Chime SDK. Using the latest version requires migrating to a dedicated namespace. For more information, refer to   Migrating from the Amazon Chime namespace in the  Amazon Chime SDK Developer Guide.     ChannelModerator actions across all channels in the AppInstance.    DeleteChannelMessage actions.   Only an AppInstanceUser can be promoted to an AppInstanceAdmin role.
    @available(*, deprecated, message: "Replaced by CreateAppInstanceAdmin in the Amazon Chime SDK Identity Namespace")
    @Sendable
    @inlinable
    public func createAppInstanceAdmin(_ input: CreateAppInstanceAdminRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> CreateAppInstanceAdminResponse {
        try await self.client.execute(
            operation: "CreateAppInstanceAdmin", 
            path: "/app-instances/{AppInstanceArn}/admins", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            hostPrefix: "identity-", 
            logger: logger
        )
    }
    /// Promotes an AppInstanceUser to an AppInstanceAdmin. The promoted user can perform the following actions.    This API is is no longer supported and will not be updated. We recommend using the latest version, CreateAppInstanceAdmin, in the Amazon Chime SDK. Using the latest version requires migrating to a dedicated namespace. For more information, refer to   Migrating from the Amazon Chime namespace in the  Amazon Chime SDK Developer Guide.     ChannelModerator actions across all channels in the AppInstance.    DeleteChannelMessage actions.   Only an AppInstanceUser can be promoted to an AppInstanceAdmin role.
    ///
    /// Parameters:
    ///   - appInstanceAdminArn: The ARN of the administrator of the current AppInstance.
    ///   - appInstanceArn: The ARN of the AppInstance.
    ///   - logger: Logger use during operation
    @available(*, deprecated, message: "Replaced by CreateAppInstanceAdmin in the Amazon Chime SDK Identity Namespace")
    @inlinable
    public func createAppInstanceAdmin(
        appInstanceAdminArn: String,
        appInstanceArn: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> CreateAppInstanceAdminResponse {
        let input = CreateAppInstanceAdminRequest(
            appInstanceAdminArn: appInstanceAdminArn, 
            appInstanceArn: appInstanceArn
        )
        return try await self.createAppInstanceAdmin(input, logger: logger)
    }

    /// Creates a user under an Amazon Chime AppInstance. The request consists of a unique appInstanceUserId and
    /// Name for that user.   This API is is no longer supported and will not be updated. We recommend using the latest version, CreateAppInstanceUser, in the Amazon Chime SDK. Using the latest version requires migrating to a dedicated namespace. For more information, refer to   Migrating from the Amazon Chime namespace in the  Amazon Chime SDK Developer Guide.
    @available(*, deprecated, message: "Replaced by CreateAppInstanceUser in the Amazon Chime SDK Identity Namespace")
    @Sendable
    @inlinable
    public func createAppInstanceUser(_ input: CreateAppInstanceUserRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> CreateAppInstanceUserResponse {
        try await self.client.execute(
            operation: "CreateAppInstanceUser", 
            path: "/app-instance-users", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            hostPrefix: "identity-", 
            logger: logger
        )
    }
    /// Creates a user under an Amazon Chime AppInstance. The request consists of a unique appInstanceUserId and
    /// Name for that user.   This API is is no longer supported and will not be updated. We recommend using the latest version, CreateAppInstanceUser, in the Amazon Chime SDK. Using the latest version requires migrating to a dedicated namespace. For more information, refer to   Migrating from the Amazon Chime namespace in the  Amazon Chime SDK Developer Guide.
    ///
    /// Parameters:
    ///   - appInstanceArn: The ARN of the AppInstance request.
    ///   - appInstanceUserId: The user ID of the AppInstance.
    ///   - clientRequestToken: The token assigned to the user requesting an AppInstance.
    ///   - metadata: The request's metadata. Limited to a 1KB string in UTF-8.
    ///   - name: The user's name.
    ///   - tags: Tags assigned to the AppInstanceUser.
    ///   - logger: Logger use during operation
    @available(*, deprecated, message: "Replaced by CreateAppInstanceUser in the Amazon Chime SDK Identity Namespace")
    @inlinable
    public func createAppInstanceUser(
        appInstanceArn: String,
        appInstanceUserId: String,
        clientRequestToken: String = CreateAppInstanceUserRequest.idempotencyToken(),
        metadata: String? = nil,
        name: String,
        tags: [Tag]? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> CreateAppInstanceUserResponse {
        let input = CreateAppInstanceUserRequest(
            appInstanceArn: appInstanceArn, 
            appInstanceUserId: appInstanceUserId, 
            clientRequestToken: clientRequestToken, 
            metadata: metadata, 
            name: name, 
            tags: tags
        )
        return try await self.createAppInstanceUser(input, logger: logger)
    }

    /// Creates a new attendee for an active Amazon Chime SDK meeting. For more information about the Amazon Chime SDK, see
    /// Using the Amazon Chime SDK
    /// in the
    /// Amazon Chime SDK Developer Guide.
    ///    This API is is no longer supported and will not be updated. We recommend using the latest version, CreateAttendee, in the Amazon Chime SDK. Using the latest version requires migrating to a dedicated namespace. For more information, refer to   Migrating from the Amazon Chime namespace in the  Amazon Chime SDK Developer Guide.
    @available(*, deprecated, message: "Replaced by CreateAttendee in the Amazon Chime SDK Meetings Namespace")
    @Sendable
    @inlinable
    public func createAttendee(_ input: CreateAttendeeRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> CreateAttendeeResponse {
        try await self.client.execute(
            operation: "CreateAttendee", 
            path: "/meetings/{MeetingId}/attendees", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Creates a new attendee for an active Amazon Chime SDK meeting. For more information about the Amazon Chime SDK, see
    /// Using the Amazon Chime SDK
    /// in the
    /// Amazon Chime SDK Developer Guide.
    ///    This API is is no longer supported and will not be updated. We recommend using the latest version, CreateAttendee, in the Amazon Chime SDK. Using the latest version requires migrating to a dedicated namespace. For more information, refer to   Migrating from the Amazon Chime namespace in the  Amazon Chime SDK Developer Guide.
    ///
    /// Parameters:
    ///   - externalUserId: The Amazon Chime SDK external user ID. An idempotency token. Links the attendee to an identity managed by a builder application.
    ///   - meetingId: The Amazon Chime SDK meeting ID.
    ///   - tags: The tag key-value pairs.
    ///   - logger: Logger use during operation
    @available(*, deprecated, message: "Replaced by CreateAttendee in the Amazon Chime SDK Meetings Namespace")
    @inlinable
    public func createAttendee(
        externalUserId: String,
        meetingId: String,
        tags: [Tag]? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> CreateAttendeeResponse {
        let input = CreateAttendeeRequest(
            externalUserId: externalUserId, 
            meetingId: meetingId, 
            tags: tags
        )
        return try await self.createAttendee(input, logger: logger)
    }

    /// Creates a bot for an Amazon Chime Enterprise account.
    @Sendable
    @inlinable
    public func createBot(_ input: CreateBotRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> CreateBotResponse {
        try await self.client.execute(
            operation: "CreateBot", 
            path: "/accounts/{AccountId}/bots", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Creates a bot for an Amazon Chime Enterprise account.
    ///
    /// Parameters:
    ///   - accountId: The Amazon Chime account ID.
    ///   - displayName: The bot display name.
    ///   - domain: The domain of the Amazon Chime Enterprise account.
    ///   - logger: Logger use during operation
    @inlinable
    public func createBot(
        accountId: String,
        displayName: String,
        domain: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> CreateBotResponse {
        let input = CreateBotRequest(
            accountId: accountId, 
            displayName: displayName, 
            domain: domain
        )
        return try await self.createBot(input, logger: logger)
    }

    /// Creates a channel to which you can add users and send messages.  Restriction: You can't change a channel's privacy.  The x-amz-chime-bearer request header is mandatory. Use the AppInstanceUserArn of the user that makes the API call as the value in the header.    This API is is no longer supported and will not be updated. We recommend using the latest version, CreateChannel, in the Amazon Chime SDK. Using the latest version requires migrating to a dedicated namespace. For more information, refer to   Migrating from the Amazon Chime namespace in the  Amazon Chime SDK Developer Guide.
    @available(*, deprecated, message: "Replaced by CreateChannel in the Amazon Chime SDK Messaging Namespace")
    @Sendable
    @inlinable
    public func createChannel(_ input: CreateChannelRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> CreateChannelResponse {
        try await self.client.execute(
            operation: "CreateChannel", 
            path: "/channels", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            hostPrefix: "messaging-", 
            logger: logger
        )
    }
    /// Creates a channel to which you can add users and send messages.  Restriction: You can't change a channel's privacy.  The x-amz-chime-bearer request header is mandatory. Use the AppInstanceUserArn of the user that makes the API call as the value in the header.    This API is is no longer supported and will not be updated. We recommend using the latest version, CreateChannel, in the Amazon Chime SDK. Using the latest version requires migrating to a dedicated namespace. For more information, refer to   Migrating from the Amazon Chime namespace in the  Amazon Chime SDK Developer Guide.
    ///
    /// Parameters:
    ///   - appInstanceArn: The ARN of the channel request.
    ///   - chimeBearer: The AppInstanceUserArn of the user that makes the API call.
    ///   - clientRequestToken: The client token for the request. An Idempotency token.
    ///   - metadata: The metadata of the creation request. Limited to 1KB and UTF-8.
    ///   - mode: The channel mode: UNRESTRICTED or RESTRICTED. Administrators, moderators, and channel members can add themselves and other members to unrestricted channels. Only administrators and moderators can add members to restricted channels.
    ///   - name: The name of the channel.
    ///   - privacy: The channel's privacy level: PUBLIC or PRIVATE. Private channels aren't discoverable by users outside the channel. Public channels are discoverable by anyone in the AppInstance.
    ///   - tags: The tags for the creation request.
    ///   - logger: Logger use during operation
    @available(*, deprecated, message: "Replaced by CreateChannel in the Amazon Chime SDK Messaging Namespace")
    @inlinable
    public func createChannel(
        appInstanceArn: String,
        chimeBearer: String? = nil,
        clientRequestToken: String = CreateChannelRequest.idempotencyToken(),
        metadata: String? = nil,
        mode: ChannelMode? = nil,
        name: String,
        privacy: ChannelPrivacy? = nil,
        tags: [Tag]? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> CreateChannelResponse {
        let input = CreateChannelRequest(
            appInstanceArn: appInstanceArn, 
            chimeBearer: chimeBearer, 
            clientRequestToken: clientRequestToken, 
            metadata: metadata, 
            mode: mode, 
            name: name, 
            privacy: privacy, 
            tags: tags
        )
        return try await self.createChannel(input, logger: logger)
    }

    /// Permanently bans a member from a channel. Moderators can't add banned members to a channel. To undo a ban, you first have to DeleteChannelBan, and then CreateChannelMembership. Bans are cleaned up when you delete users or channels. If you ban a user who is already part of a channel, that user is automatically kicked from the channel.  The x-amz-chime-bearer request header is mandatory. Use the AppInstanceUserArn of the user that makes the API call as the value in the header.    This API is is no longer supported and will not be updated. We recommend using the latest version, CreateChannelBan, in the Amazon Chime SDK. Using the latest version requires migrating to a dedicated namespace. For more information, refer to   Migrating from the Amazon Chime namespace in the  Amazon Chime SDK Developer Guide.
    @available(*, deprecated, message: "Replaced by CreateChannelBan in the Amazon Chime SDK Messaging Namespace")
    @Sendable
    @inlinable
    public func createChannelBan(_ input: CreateChannelBanRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> CreateChannelBanResponse {
        try await self.client.execute(
            operation: "CreateChannelBan", 
            path: "/channels/{ChannelArn}/bans", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            hostPrefix: "messaging-", 
            logger: logger
        )
    }
    /// Permanently bans a member from a channel. Moderators can't add banned members to a channel. To undo a ban, you first have to DeleteChannelBan, and then CreateChannelMembership. Bans are cleaned up when you delete users or channels. If you ban a user who is already part of a channel, that user is automatically kicked from the channel.  The x-amz-chime-bearer request header is mandatory. Use the AppInstanceUserArn of the user that makes the API call as the value in the header.    This API is is no longer supported and will not be updated. We recommend using the latest version, CreateChannelBan, in the Amazon Chime SDK. Using the latest version requires migrating to a dedicated namespace. For more information, refer to   Migrating from the Amazon Chime namespace in the  Amazon Chime SDK Developer Guide.
    ///
    /// Parameters:
    ///   - channelArn: The ARN of the ban request.
    ///   - chimeBearer: The AppInstanceUserArn of the user that makes the API call.
    ///   - memberArn: The ARN of the member being banned.
    ///   - logger: Logger use during operation
    @available(*, deprecated, message: "Replaced by CreateChannelBan in the Amazon Chime SDK Messaging Namespace")
    @inlinable
    public func createChannelBan(
        channelArn: String,
        chimeBearer: String? = nil,
        memberArn: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> CreateChannelBanResponse {
        let input = CreateChannelBanRequest(
            channelArn: channelArn, 
            chimeBearer: chimeBearer, 
            memberArn: memberArn
        )
        return try await self.createChannelBan(input, logger: logger)
    }

    /// Adds a user to a channel. The InvitedBy response field is derived from the request header. A channel member can:   List messages   Send messages   Receive messages   Edit their own messages   Leave the channel   Privacy settings impact this action as follows:   Public Channels: You do not need to be a member to list messages, but you must be a member to send messages.   Private Channels: You must be a member to list or send messages.    The x-amz-chime-bearer request header is mandatory. Use the AppInstanceUserArn of the user that makes the API call as the value in the header.    This API is is no longer supported and will not be updated. We recommend using the latest version, CreateChannelMembership, in the Amazon Chime SDK. Using the latest version requires migrating to a dedicated namespace. For more information, refer to   Migrating from the Amazon Chime namespace in the  Amazon Chime SDK Developer Guide.
    @available(*, deprecated, message: "Replaced by CreateChannelMembership in the Amazon Chime SDK Messaging Namespace")
    @Sendable
    @inlinable
    public func createChannelMembership(_ input: CreateChannelMembershipRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> CreateChannelMembershipResponse {
        try await self.client.execute(
            operation: "CreateChannelMembership", 
            path: "/channels/{ChannelArn}/memberships", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            hostPrefix: "messaging-", 
            logger: logger
        )
    }
    /// Adds a user to a channel. The InvitedBy response field is derived from the request header. A channel member can:   List messages   Send messages   Receive messages   Edit their own messages   Leave the channel   Privacy settings impact this action as follows:   Public Channels: You do not need to be a member to list messages, but you must be a member to send messages.   Private Channels: You must be a member to list or send messages.    The x-amz-chime-bearer request header is mandatory. Use the AppInstanceUserArn of the user that makes the API call as the value in the header.    This API is is no longer supported and will not be updated. We recommend using the latest version, CreateChannelMembership, in the Amazon Chime SDK. Using the latest version requires migrating to a dedicated namespace. For more information, refer to   Migrating from the Amazon Chime namespace in the  Amazon Chime SDK Developer Guide.
    ///
    /// Parameters:
    ///   - channelArn: The ARN of the channel to which you're adding users.
    ///   - chimeBearer: The AppInstanceUserArn of the user that makes the API call.
    ///   - memberArn: The ARN of the member you want to add to the channel.
    ///   - type: The membership type of a user, DEFAULT or HIDDEN. Default members are always returned as part of ListChannelMemberships. Hidden members are only returned if the type filter in ListChannelMemberships equals HIDDEN. Otherwise hidden members are not returned. This is only supported by moderators.
    ///   - logger: Logger use during operation
    @available(*, deprecated, message: "Replaced by CreateChannelMembership in the Amazon Chime SDK Messaging Namespace")
    @inlinable
    public func createChannelMembership(
        channelArn: String,
        chimeBearer: String? = nil,
        memberArn: String,
        type: ChannelMembershipType,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> CreateChannelMembershipResponse {
        let input = CreateChannelMembershipRequest(
            channelArn: channelArn, 
            chimeBearer: chimeBearer, 
            memberArn: memberArn, 
            type: type
        )
        return try await self.createChannelMembership(input, logger: logger)
    }

    /// Creates a new ChannelModerator. A channel moderator can:   Add and remove other members of the channel.   Add and remove other moderators of the channel.   Add and remove user bans for the channel.   Redact messages in the channel.   List messages in the channel.    The x-amz-chime-bearer request header is mandatory. Use the AppInstanceUserArn of the user that makes the API call as the value in the header.    This API is is no longer supported and will not be updated. We recommend using the latest version, CreateChannelModerator, in the Amazon Chime SDK. Using the latest version requires migrating to a dedicated namespace. For more information, refer to   Migrating from the Amazon Chime namespace in the  Amazon Chime SDK Developer Guide.
    @available(*, deprecated, message: "Replaced by CreateChannelModerator in the Amazon Chime SDK Messaging Namespace")
    @Sendable
    @inlinable
    public func createChannelModerator(_ input: CreateChannelModeratorRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> CreateChannelModeratorResponse {
        try await self.client.execute(
            operation: "CreateChannelModerator", 
            path: "/channels/{ChannelArn}/moderators", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            hostPrefix: "messaging-", 
            logger: logger
        )
    }
    /// Creates a new ChannelModerator. A channel moderator can:   Add and remove other members of the channel.   Add and remove other moderators of the channel.   Add and remove user bans for the channel.   Redact messages in the channel.   List messages in the channel.    The x-amz-chime-bearer request header is mandatory. Use the AppInstanceUserArn of the user that makes the API call as the value in the header.    This API is is no longer supported and will not be updated. We recommend using the latest version, CreateChannelModerator, in the Amazon Chime SDK. Using the latest version requires migrating to a dedicated namespace. For more information, refer to   Migrating from the Amazon Chime namespace in the  Amazon Chime SDK Developer Guide.
    ///
    /// Parameters:
    ///   - channelArn: The ARN of the channel.
    ///   - channelModeratorArn: The ARN of the moderator.
    ///   - chimeBearer: The AppInstanceUserArn of the user that makes the API call.
    ///   - logger: Logger use during operation
    @available(*, deprecated, message: "Replaced by CreateChannelModerator in the Amazon Chime SDK Messaging Namespace")
    @inlinable
    public func createChannelModerator(
        channelArn: String,
        channelModeratorArn: String,
        chimeBearer: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> CreateChannelModeratorResponse {
        let input = CreateChannelModeratorRequest(
            channelArn: channelArn, 
            channelModeratorArn: channelModeratorArn, 
            chimeBearer: chimeBearer
        )
        return try await self.createChannelModerator(input, logger: logger)
    }

    /// Creates a media capture pipeline.   This API is is no longer supported and will not be updated. We recommend using the latest version, CreateMediaCapturePipeline, in the Amazon Chime SDK. Using the latest version requires migrating to a dedicated namespace. For more information, refer to   Migrating from the Amazon Chime namespace in the  Amazon Chime SDK Developer Guide.
    @available(*, deprecated, message: "Replaced by CreateMediaCapturePipeline in the Amazon Chime SDK Media Pipelines Namespace")
    @Sendable
    @inlinable
    public func createMediaCapturePipeline(_ input: CreateMediaCapturePipelineRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> CreateMediaCapturePipelineResponse {
        try await self.client.execute(
            operation: "CreateMediaCapturePipeline", 
            path: "/media-capture-pipelines", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Creates a media capture pipeline.   This API is is no longer supported and will not be updated. We recommend using the latest version, CreateMediaCapturePipeline, in the Amazon Chime SDK. Using the latest version requires migrating to a dedicated namespace. For more information, refer to   Migrating from the Amazon Chime namespace in the  Amazon Chime SDK Developer Guide.
    ///
    /// Parameters:
    ///   - chimeSdkMeetingConfiguration: The configuration for a specified media capture pipeline. SourceType must be ChimeSdkMeeting.
    ///   - clientRequestToken: The unique identifier for the client request. The token makes the API request idempotent. Use a different token for different media pipeline requests.
    ///   - sinkArn: The ARN of the sink type.
    ///   - sinkType: Destination type to which the media artifacts are saved. You must use an S3 bucket.
    ///   - sourceArn: ARN of the source from which the media artifacts are captured.
    ///   - sourceType: Source type from which the media artifacts will be captured. A Chime SDK Meeting  is the only supported source.
    ///   - logger: Logger use during operation
    @available(*, deprecated, message: "Replaced by CreateMediaCapturePipeline in the Amazon Chime SDK Media Pipelines Namespace")
    @inlinable
    public func createMediaCapturePipeline(
        chimeSdkMeetingConfiguration: ChimeSdkMeetingConfiguration? = nil,
        clientRequestToken: String? = CreateMediaCapturePipelineRequest.idempotencyToken(),
        sinkArn: String,
        sinkType: MediaPipelineSinkType,
        sourceArn: String,
        sourceType: MediaPipelineSourceType,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> CreateMediaCapturePipelineResponse {
        let input = CreateMediaCapturePipelineRequest(
            chimeSdkMeetingConfiguration: chimeSdkMeetingConfiguration, 
            clientRequestToken: clientRequestToken, 
            sinkArn: sinkArn, 
            sinkType: sinkType, 
            sourceArn: sourceArn, 
            sourceType: sourceType
        )
        return try await self.createMediaCapturePipeline(input, logger: logger)
    }

    /// Creates a new Amazon Chime SDK meeting in the specified media Region with no initial attendees. For more information about specifying media Regions, see
    /// Amazon Chime SDK Media Regions
    /// in the Amazon Chime SDK Developer Guide
    /// . For more information about the Amazon Chime SDK, see
    /// Using the Amazon Chime SDK
    /// in the Amazon Chime SDK Developer Guide.   This API is is no longer supported and will not be updated. We recommend using the latest version, CreateMeeting, in the Amazon Chime SDK. Using the latest version requires migrating to a dedicated namespace. For more information, refer to   Migrating from the Amazon Chime namespace in the  Amazon Chime SDK Developer Guide.
    @available(*, deprecated, message: "Replaced by CreateMeeting in the Amazon Chime SDK Meetings Namespace")
    @Sendable
    @inlinable
    public func createMeeting(_ input: CreateMeetingRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> CreateMeetingResponse {
        try await self.client.execute(
            operation: "CreateMeeting", 
            path: "/meetings", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Creates a new Amazon Chime SDK meeting in the specified media Region with no initial attendees. For more information about specifying media Regions, see
    /// Amazon Chime SDK Media Regions
    /// in the Amazon Chime SDK Developer Guide
    /// . For more information about the Amazon Chime SDK, see
    /// Using the Amazon Chime SDK
    /// in the Amazon Chime SDK Developer Guide.   This API is is no longer supported and will not be updated. We recommend using the latest version, CreateMeeting, in the Amazon Chime SDK. Using the latest version requires migrating to a dedicated namespace. For more information, refer to   Migrating from the Amazon Chime namespace in the  Amazon Chime SDK Developer Guide.
    ///
    /// Parameters:
    ///   - clientRequestToken: The unique identifier for the client request. Use a different token for different meetings.
    ///   - externalMeetingId: The external meeting ID.
    ///   - mediaRegion: The Region in which to create the meeting. Default: us-east-1.
    ///   - meetingHostId: Reserved.
    ///   - notificationsConfiguration: The configuration for resource targets to receive notifications when meeting and attendee events occur.
    ///   - tags: The tag key-value pairs.
    ///   - logger: Logger use during operation
    @available(*, deprecated, message: "Replaced by CreateMeeting in the Amazon Chime SDK Meetings Namespace")
    @inlinable
    public func createMeeting(
        clientRequestToken: String = CreateMeetingRequest.idempotencyToken(),
        externalMeetingId: String? = nil,
        mediaRegion: String? = nil,
        meetingHostId: String? = nil,
        notificationsConfiguration: MeetingNotificationConfiguration? = nil,
        tags: [Tag]? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> CreateMeetingResponse {
        let input = CreateMeetingRequest(
            clientRequestToken: clientRequestToken, 
            externalMeetingId: externalMeetingId, 
            mediaRegion: mediaRegion, 
            meetingHostId: meetingHostId, 
            notificationsConfiguration: notificationsConfiguration, 
            tags: tags
        )
        return try await self.createMeeting(input, logger: logger)
    }

    /// Uses the join token and call metadata in a meeting request (From number, To number, and so forth) to initiate an outbound call to a public  switched telephone network (PSTN) and join them into a Chime meeting. Also ensures that the From number belongs to the customer. To play welcome audio or implement an interactive voice response (IVR), use the
    /// CreateSipMediaApplicationCall action with the corresponding SIP media application ID.   This API is is not available in a dedicated namespace.
    @Sendable
    @inlinable
    public func createMeetingDialOut(_ input: CreateMeetingDialOutRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> CreateMeetingDialOutResponse {
        try await self.client.execute(
            operation: "CreateMeetingDialOut", 
            path: "/meetings/{MeetingId}/dial-outs", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Uses the join token and call metadata in a meeting request (From number, To number, and so forth) to initiate an outbound call to a public  switched telephone network (PSTN) and join them into a Chime meeting. Also ensures that the From number belongs to the customer. To play welcome audio or implement an interactive voice response (IVR), use the
    /// CreateSipMediaApplicationCall action with the corresponding SIP media application ID.   This API is is not available in a dedicated namespace.
    ///
    /// Parameters:
    ///   - fromPhoneNumber: Phone number used as the caller ID when the remote party receives a call.
    ///   - joinToken: Token used by the Amazon Chime SDK attendee. Call the CreateAttendee action to get a join token.
    ///   - meetingId: The Amazon Chime SDK meeting ID.
    ///   - toPhoneNumber: Phone number called when inviting someone to a meeting.
    ///   - logger: Logger use during operation
    @inlinable
    public func createMeetingDialOut(
        fromPhoneNumber: String,
        joinToken: String,
        meetingId: String,
        toPhoneNumber: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> CreateMeetingDialOutResponse {
        let input = CreateMeetingDialOutRequest(
            fromPhoneNumber: fromPhoneNumber, 
            joinToken: joinToken, 
            meetingId: meetingId, 
            toPhoneNumber: toPhoneNumber
        )
        return try await self.createMeetingDialOut(input, logger: logger)
    }

    /// Creates a new Amazon Chime SDK meeting in the specified media Region, with attendees. For more information about specifying media Regions, see
    /// Amazon Chime SDK Media Regions
    /// in the
    /// Amazon Chime SDK Developer Guide
    /// . For more information about the Amazon Chime SDK, see
    /// Using the Amazon Chime SDK
    /// in the
    /// Amazon Chime SDK Developer Guide
    /// .
    ///    This API is is no longer supported and will not be updated. We recommend using the latest version, CreateMeetingWithAttendees, in the Amazon Chime SDK. Using the latest version requires migrating to a dedicated namespace. For more information, refer to   Migrating from the Amazon Chime namespace in the  Amazon Chime SDK Developer Guide.
    @available(*, deprecated, message: "Replaced by CreateMeetingWithAttendees in the Amazon Chime SDK Meetings Namespace")
    @Sendable
    @inlinable
    public func createMeetingWithAttendees(_ input: CreateMeetingWithAttendeesRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> CreateMeetingWithAttendeesResponse {
        try await self.client.execute(
            operation: "CreateMeetingWithAttendees", 
            path: "/meetings?operation=create-attendees", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Creates a new Amazon Chime SDK meeting in the specified media Region, with attendees. For more information about specifying media Regions, see
    /// Amazon Chime SDK Media Regions
    /// in the
    /// Amazon Chime SDK Developer Guide
    /// . For more information about the Amazon Chime SDK, see
    /// Using the Amazon Chime SDK
    /// in the
    /// Amazon Chime SDK Developer Guide
    /// .
    ///    This API is is no longer supported and will not be updated. We recommend using the latest version, CreateMeetingWithAttendees, in the Amazon Chime SDK. Using the latest version requires migrating to a dedicated namespace. For more information, refer to   Migrating from the Amazon Chime namespace in the  Amazon Chime SDK Developer Guide.
    ///
    /// Parameters:
    ///   - attendees: The request containing the attendees to create.
    ///   - clientRequestToken: The unique identifier for the client request. Use a different token for different meetings.
    ///   - externalMeetingId: The external meeting ID.
    ///   - mediaRegion: The Region in which to create the meeting. Default: us-east-1
    ///   - meetingHostId: Reserved.
    ///   - notificationsConfiguration: The resource target configurations for receiving Amazon Chime SDK meeting and attendee event  notifications. The Amazon Chime SDK supports resource targets located in the US East (N. Virginia) AWS  Region (us-east-1).
    ///   - tags: The tag key-value pairs.
    ///   - logger: Logger use during operation
    @available(*, deprecated, message: "Replaced by CreateMeetingWithAttendees in the Amazon Chime SDK Meetings Namespace")
    @inlinable
    public func createMeetingWithAttendees(
        attendees: [CreateAttendeeRequestItem]? = nil,
        clientRequestToken: String = CreateMeetingWithAttendeesRequest.idempotencyToken(),
        externalMeetingId: String? = nil,
        mediaRegion: String? = nil,
        meetingHostId: String? = nil,
        notificationsConfiguration: MeetingNotificationConfiguration? = nil,
        tags: [Tag]? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> CreateMeetingWithAttendeesResponse {
        let input = CreateMeetingWithAttendeesRequest(
            attendees: attendees, 
            clientRequestToken: clientRequestToken, 
            externalMeetingId: externalMeetingId, 
            mediaRegion: mediaRegion, 
            meetingHostId: meetingHostId, 
            notificationsConfiguration: notificationsConfiguration, 
            tags: tags
        )
        return try await self.createMeetingWithAttendees(input, logger: logger)
    }

    /// Creates an order for phone numbers to be provisioned. For toll-free numbers, you cannot use the Amazon Chime Business Calling product type.  For numbers outside the U.S., you must use the Amazon Chime SIP Media Application Dial-In product type.
    @Sendable
    @inlinable
    public func createPhoneNumberOrder(_ input: CreatePhoneNumberOrderRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> CreatePhoneNumberOrderResponse {
        try await self.client.execute(
            operation: "CreatePhoneNumberOrder", 
            path: "/phone-number-orders", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Creates an order for phone numbers to be provisioned. For toll-free numbers, you cannot use the Amazon Chime Business Calling product type.  For numbers outside the U.S., you must use the Amazon Chime SIP Media Application Dial-In product type.
    ///
    /// Parameters:
    ///   - e164PhoneNumbers: List of phone numbers, in E.164 format.
    ///   - productType: The phone number product type.
    ///   - logger: Logger use during operation
    @inlinable
    public func createPhoneNumberOrder(
        e164PhoneNumbers: [String],
        productType: PhoneNumberProductType,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> CreatePhoneNumberOrderResponse {
        let input = CreatePhoneNumberOrderRequest(
            e164PhoneNumbers: e164PhoneNumbers, 
            productType: productType
        )
        return try await self.createPhoneNumberOrder(input, logger: logger)
    }

    /// Creates a proxy session on the specified Amazon Chime Voice Connector for the specified participant phone numbers.   This API is is no longer supported and will not be updated. We recommend using the latest version, CreateProxySession, in the Amazon Chime SDK. Using the latest version requires migrating to a dedicated namespace. For more information, refer to   Migrating from the Amazon Chime namespace in the  Amazon Chime SDK Developer Guide.
    @available(*, deprecated, message: "Replaced by CreateProxySession in the Amazon Chime SDK Voice Namespace")
    @Sendable
    @inlinable
    public func createProxySession(_ input: CreateProxySessionRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> CreateProxySessionResponse {
        try await self.client.execute(
            operation: "CreateProxySession", 
            path: "/voice-connectors/{VoiceConnectorId}/proxy-sessions", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Creates a proxy session on the specified Amazon Chime Voice Connector for the specified participant phone numbers.   This API is is no longer supported and will not be updated. We recommend using the latest version, CreateProxySession, in the Amazon Chime SDK. Using the latest version requires migrating to a dedicated namespace. For more information, refer to   Migrating from the Amazon Chime namespace in the  Amazon Chime SDK Developer Guide.
    ///
    /// Parameters:
    ///   - capabilities: The proxy session capabilities.
    ///   - expiryMinutes: The number of minutes allowed for the proxy session.
    ///   - geoMatchLevel: The preference for matching the country or area code of the proxy phone number with that of the first participant.
    ///   - geoMatchParams: The country and area code for the proxy phone number.
    ///   - name: The name of the proxy session.
    ///   - numberSelectionBehavior: The preference for proxy phone number reuse, or stickiness, between the same participants across sessions.
    ///   - participantPhoneNumbers: The participant phone numbers.
    ///   - voiceConnectorId: The Amazon Chime voice connector ID.
    ///   - logger: Logger use during operation
    @available(*, deprecated, message: "Replaced by CreateProxySession in the Amazon Chime SDK Voice Namespace")
    @inlinable
    public func createProxySession(
        capabilities: [Capability],
        expiryMinutes: Int? = nil,
        geoMatchLevel: GeoMatchLevel? = nil,
        geoMatchParams: GeoMatchParams? = nil,
        name: String? = nil,
        numberSelectionBehavior: NumberSelectionBehavior? = nil,
        participantPhoneNumbers: [String],
        voiceConnectorId: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> CreateProxySessionResponse {
        let input = CreateProxySessionRequest(
            capabilities: capabilities, 
            expiryMinutes: expiryMinutes, 
            geoMatchLevel: geoMatchLevel, 
            geoMatchParams: geoMatchParams, 
            name: name, 
            numberSelectionBehavior: numberSelectionBehavior, 
            participantPhoneNumbers: participantPhoneNumbers, 
            voiceConnectorId: voiceConnectorId
        )
        return try await self.createProxySession(input, logger: logger)
    }

    /// Creates a chat room for the specified Amazon Chime Enterprise account.
    @Sendable
    @inlinable
    public func createRoom(_ input: CreateRoomRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> CreateRoomResponse {
        try await self.client.execute(
            operation: "CreateRoom", 
            path: "/accounts/{AccountId}/rooms", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Creates a chat room for the specified Amazon Chime Enterprise account.
    ///
    /// Parameters:
    ///   - accountId: The Amazon Chime account ID.
    ///   - clientRequestToken: The idempotency token for the request.
    ///   - name: The room name.
    ///   - logger: Logger use during operation
    @inlinable
    public func createRoom(
        accountId: String,
        clientRequestToken: String? = CreateRoomRequest.idempotencyToken(),
        name: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> CreateRoomResponse {
        let input = CreateRoomRequest(
            accountId: accountId, 
            clientRequestToken: clientRequestToken, 
            name: name
        )
        return try await self.createRoom(input, logger: logger)
    }

    /// Adds a member to a chat room in an Amazon Chime Enterprise account. A member can be either a user or a bot. The member role designates whether the member is a chat room administrator or a general chat room member.
    @Sendable
    @inlinable
    public func createRoomMembership(_ input: CreateRoomMembershipRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> CreateRoomMembershipResponse {
        try await self.client.execute(
            operation: "CreateRoomMembership", 
            path: "/accounts/{AccountId}/rooms/{RoomId}/memberships", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Adds a member to a chat room in an Amazon Chime Enterprise account. A member can be either a user or a bot. The member role designates whether the member is a chat room administrator or a general chat room member.
    ///
    /// Parameters:
    ///   - accountId: The Amazon Chime account ID.
    ///   - memberId: The Amazon Chime member ID (user ID or bot ID).
    ///   - role: The role of the member.
    ///   - roomId: The room ID.
    ///   - logger: Logger use during operation
    @inlinable
    public func createRoomMembership(
        accountId: String,
        memberId: String,
        role: RoomMembershipRole? = nil,
        roomId: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> CreateRoomMembershipResponse {
        let input = CreateRoomMembershipRequest(
            accountId: accountId, 
            memberId: memberId, 
            role: role, 
            roomId: roomId
        )
        return try await self.createRoomMembership(input, logger: logger)
    }

    /// Creates a SIP media application.   This API is is no longer supported and will not be updated. We recommend using the latest version, CreateSipMediaApplication, in the Amazon Chime SDK. Using the latest version requires migrating to a dedicated namespace. For more information, refer to   Migrating from the Amazon Chime namespace in the  Amazon Chime SDK Developer Guide.
    @available(*, deprecated, message: "Replaced by CreateSipMediaApplication in the Amazon Chime SDK Voice Namespace")
    @Sendable
    @inlinable
    public func createSipMediaApplication(_ input: CreateSipMediaApplicationRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> CreateSipMediaApplicationResponse {
        try await self.client.execute(
            operation: "CreateSipMediaApplication", 
            path: "/sip-media-applications", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Creates a SIP media application.   This API is is no longer supported and will not be updated. We recommend using the latest version, CreateSipMediaApplication, in the Amazon Chime SDK. Using the latest version requires migrating to a dedicated namespace. For more information, refer to   Migrating from the Amazon Chime namespace in the  Amazon Chime SDK Developer Guide.
    ///
    /// Parameters:
    ///   - awsRegion: The AWS Region assigned to the SIP media application.
    ///   - endpoints: List of endpoints (Lambda Amazon Resource Names) specified for the SIP media application. Currently, only one endpoint is supported.
    ///   - name: The SIP media application name.
    ///   - logger: Logger use during operation
    @available(*, deprecated, message: "Replaced by CreateSipMediaApplication in the Amazon Chime SDK Voice Namespace")
    @inlinable
    public func createSipMediaApplication(
        awsRegion: String,
        endpoints: [SipMediaApplicationEndpoint],
        name: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> CreateSipMediaApplicationResponse {
        let input = CreateSipMediaApplicationRequest(
            awsRegion: awsRegion, 
            endpoints: endpoints, 
            name: name
        )
        return try await self.createSipMediaApplication(input, logger: logger)
    }

    /// Creates an outbound call to a phone number from the phone number specified in the request, and it invokes the endpoint of the specified
    /// sipMediaApplicationId.   This API is is no longer supported and will not be updated. We recommend using the latest version, CreateSipMediaApplicationCall, in the Amazon Chime SDK. Using the latest version requires migrating to a dedicated namespace. For more information, refer to   Migrating from the Amazon Chime namespace in the  Amazon Chime SDK Developer Guide.
    @available(*, deprecated, message: "Replaced by CreateSipMediaApplicationCall in the Amazon Chime SDK Voice Namespace")
    @Sendable
    @inlinable
    public func createSipMediaApplicationCall(_ input: CreateSipMediaApplicationCallRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> CreateSipMediaApplicationCallResponse {
        try await self.client.execute(
            operation: "CreateSipMediaApplicationCall", 
            path: "/sip-media-applications/{SipMediaApplicationId}/calls", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Creates an outbound call to a phone number from the phone number specified in the request, and it invokes the endpoint of the specified
    /// sipMediaApplicationId.   This API is is no longer supported and will not be updated. We recommend using the latest version, CreateSipMediaApplicationCall, in the Amazon Chime SDK. Using the latest version requires migrating to a dedicated namespace. For more information, refer to   Migrating from the Amazon Chime namespace in the  Amazon Chime SDK Developer Guide.
    ///
    /// Parameters:
    ///   - fromPhoneNumber: The phone number that a user calls from. This is a phone number in your Amazon Chime phone number inventory.
    ///   - sipHeaders: The SIP headers added to an outbound call leg.
    ///   - sipMediaApplicationId: The ID of the SIP media application.
    ///   - toPhoneNumber: The phone number that the service should call.
    ///   - logger: Logger use during operation
    @available(*, deprecated, message: "Replaced by CreateSipMediaApplicationCall in the Amazon Chime SDK Voice Namespace")
    @inlinable
    public func createSipMediaApplicationCall(
        fromPhoneNumber: String,
        sipHeaders: [String: String]? = nil,
        sipMediaApplicationId: String,
        toPhoneNumber: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> CreateSipMediaApplicationCallResponse {
        let input = CreateSipMediaApplicationCallRequest(
            fromPhoneNumber: fromPhoneNumber, 
            sipHeaders: sipHeaders, 
            sipMediaApplicationId: sipMediaApplicationId, 
            toPhoneNumber: toPhoneNumber
        )
        return try await self.createSipMediaApplicationCall(input, logger: logger)
    }

    /// Creates a SIP rule which can be used to run a SIP media application as a target for a specific trigger type.   This API is is no longer supported and will not be updated. We recommend using the latest version, CreateSipRule, in the Amazon Chime SDK. Using the latest version requires migrating to a dedicated namespace. For more information, refer to   Migrating from the Amazon Chime namespace in the  Amazon Chime SDK Developer Guide.
    @available(*, deprecated, message: "Replaced by CreateSipRule in the Amazon Chime SDK Voice Namespace")
    @Sendable
    @inlinable
    public func createSipRule(_ input: CreateSipRuleRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> CreateSipRuleResponse {
        try await self.client.execute(
            operation: "CreateSipRule", 
            path: "/sip-rules", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Creates a SIP rule which can be used to run a SIP media application as a target for a specific trigger type.   This API is is no longer supported and will not be updated. We recommend using the latest version, CreateSipRule, in the Amazon Chime SDK. Using the latest version requires migrating to a dedicated namespace. For more information, refer to   Migrating from the Amazon Chime namespace in the  Amazon Chime SDK Developer Guide.
    ///
    /// Parameters:
    ///   - disabled: Enables or disables a rule. You must disable rules before you can delete them.
    ///   - name: The name of the SIP rule.
    ///   - targetApplications: List of SIP media applications with priority and AWS Region. Only one SIP application per AWS Region can be used.
    ///   - triggerType: The type of trigger assigned to the SIP rule in TriggerValue, currently RequestUriHostname or ToPhoneNumber.
    ///   - triggerValue: If TriggerType is RequestUriHostname, the value can be the outbound host name of an Amazon Chime Voice Connector. If TriggerType is ToPhoneNumber, the value can be a customer-owned phone number in the E164 format. The SipMediaApplication specified in the SipRule is triggered if the request URI in an incoming SIP  request matches the RequestUriHostname, or if the To header in the incoming SIP request matches the  ToPhoneNumber value.
    ///   - logger: Logger use during operation
    @available(*, deprecated, message: "Replaced by CreateSipRule in the Amazon Chime SDK Voice Namespace")
    @inlinable
    public func createSipRule(
        disabled: Bool? = nil,
        name: String,
        targetApplications: [SipRuleTargetApplication],
        triggerType: SipRuleTriggerType,
        triggerValue: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> CreateSipRuleResponse {
        let input = CreateSipRuleRequest(
            disabled: disabled, 
            name: name, 
            targetApplications: targetApplications, 
            triggerType: triggerType, 
            triggerValue: triggerValue
        )
        return try await self.createSipRule(input, logger: logger)
    }

    /// Creates a user under the specified Amazon Chime account.
    @Sendable
    @inlinable
    public func createUser(_ input: CreateUserRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> CreateUserResponse {
        try await self.client.execute(
            operation: "CreateUser", 
            path: "/accounts/{AccountId}/users?operation=create", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Creates a user under the specified Amazon Chime account.
    ///
    /// Parameters:
    ///   - accountId: The Amazon Chime account ID.
    ///   - email: The user's email address.
    ///   - username: The user name.
    ///   - userType: The user type.
    ///   - logger: Logger use during operation
    @inlinable
    public func createUser(
        accountId: String,
        email: String? = nil,
        username: String? = nil,
        userType: UserType? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> CreateUserResponse {
        let input = CreateUserRequest(
            accountId: accountId, 
            email: email, 
            username: username, 
            userType: userType
        )
        return try await self.createUser(input, logger: logger)
    }

    /// Creates an Amazon Chime Voice Connector under the administrator's AWS account. You can choose to create an Amazon Chime Voice Connector in a specific AWS Region. Enabling CreateVoiceConnectorRequest$RequireEncryption
    /// configures your Amazon Chime Voice Connector to use TLS transport for SIP signaling and Secure RTP (SRTP) for media. Inbound calls use TLS transport, and unencrypted outbound calls are blocked.
    ///    This API is is no longer supported and will not be updated. We recommend using the latest version, CreateVoiceConnector, in the Amazon Chime SDK. Using the latest version requires migrating to a dedicated namespace. For more information, refer to   Migrating from the Amazon Chime namespace in the  Amazon Chime SDK Developer Guide.
    @available(*, deprecated, message: "Replaced by CreateVoiceConnector in the Amazon Chime SDK Voice Namespace")
    @Sendable
    @inlinable
    public func createVoiceConnector(_ input: CreateVoiceConnectorRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> CreateVoiceConnectorResponse {
        try await self.client.execute(
            operation: "CreateVoiceConnector", 
            path: "/voice-connectors", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Creates an Amazon Chime Voice Connector under the administrator's AWS account. You can choose to create an Amazon Chime Voice Connector in a specific AWS Region. Enabling CreateVoiceConnectorRequest$RequireEncryption
    /// configures your Amazon Chime Voice Connector to use TLS transport for SIP signaling and Secure RTP (SRTP) for media. Inbound calls use TLS transport, and unencrypted outbound calls are blocked.
    ///    This API is is no longer supported and will not be updated. We recommend using the latest version, CreateVoiceConnector, in the Amazon Chime SDK. Using the latest version requires migrating to a dedicated namespace. For more information, refer to   Migrating from the Amazon Chime namespace in the  Amazon Chime SDK Developer Guide.
    ///
    /// Parameters:
    ///   - awsRegion: The AWS Region in which the Amazon Chime Voice Connector is created. Default value:
    ///   - name: The name of the Amazon Chime Voice Connector.
    ///   - requireEncryption: When enabled, requires encryption for the Amazon Chime Voice Connector.
    ///   - logger: Logger use during operation
    @available(*, deprecated, message: "Replaced by CreateVoiceConnector in the Amazon Chime SDK Voice Namespace")
    @inlinable
    public func createVoiceConnector(
        awsRegion: VoiceConnectorAwsRegion? = nil,
        name: String,
        requireEncryption: Bool,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> CreateVoiceConnectorResponse {
        let input = CreateVoiceConnectorRequest(
            awsRegion: awsRegion, 
            name: name, 
            requireEncryption: requireEncryption
        )
        return try await self.createVoiceConnector(input, logger: logger)
    }

    /// Creates an Amazon Chime Voice Connector group under the administrator's AWS account. You can associate Amazon Chime Voice Connectors with the Amazon Chime Voice Connector group by including VoiceConnectorItems in the request. You can include Amazon Chime Voice Connectors from different AWS Regions in your group. This creates a fault tolerant mechanism for fallback in case of availability events.   This API is is no longer supported and will not be updated. We recommend using the latest version, CreateVoiceConnectorGroup, in the Amazon Chime SDK. Using the latest version requires migrating to a dedicated namespace. For more information, refer to   Migrating from the Amazon Chime namespace in the  Amazon Chime SDK Developer Guide.
    @available(*, deprecated, message: "Replaced by CreateVoiceConnectorGroup in the Amazon Chime SDK Voice Namespace")
    @Sendable
    @inlinable
    public func createVoiceConnectorGroup(_ input: CreateVoiceConnectorGroupRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> CreateVoiceConnectorGroupResponse {
        try await self.client.execute(
            operation: "CreateVoiceConnectorGroup", 
            path: "/voice-connector-groups", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Creates an Amazon Chime Voice Connector group under the administrator's AWS account. You can associate Amazon Chime Voice Connectors with the Amazon Chime Voice Connector group by including VoiceConnectorItems in the request. You can include Amazon Chime Voice Connectors from different AWS Regions in your group. This creates a fault tolerant mechanism for fallback in case of availability events.   This API is is no longer supported and will not be updated. We recommend using the latest version, CreateVoiceConnectorGroup, in the Amazon Chime SDK. Using the latest version requires migrating to a dedicated namespace. For more information, refer to   Migrating from the Amazon Chime namespace in the  Amazon Chime SDK Developer Guide.
    ///
    /// Parameters:
    ///   - name: The name of the Amazon Chime Voice Connector group.
    ///   - voiceConnectorItems: The Amazon Chime Voice Connectors to route inbound calls to.
    ///   - logger: Logger use during operation
    @available(*, deprecated, message: "Replaced by CreateVoiceConnectorGroup in the Amazon Chime SDK Voice Namespace")
    @inlinable
    public func createVoiceConnectorGroup(
        name: String,
        voiceConnectorItems: [VoiceConnectorItem]? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> CreateVoiceConnectorGroupResponse {
        let input = CreateVoiceConnectorGroupRequest(
            name: name, 
            voiceConnectorItems: voiceConnectorItems
        )
        return try await self.createVoiceConnectorGroup(input, logger: logger)
    }

    /// Deletes the specified Amazon Chime account. You must suspend all users before deleting Team account. You can use the BatchSuspendUser action to dodo. For EnterpriseLWA and EnterpriseAD accounts, you must release the claimed domains for your Amazon Chime account before deletion. As soon as you release the domain, all users under that account are suspended. Deleted accounts appear in your Disabled accounts list for 90 days. To restore deleted account from your Disabled accounts list, you must contact AWS Support. After 90 days, deleted accounts are permanently removed from your
    /// Disabled accounts list.
    @Sendable
    @inlinable
    public func deleteAccount(_ input: DeleteAccountRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DeleteAccountResponse {
        try await self.client.execute(
            operation: "DeleteAccount", 
            path: "/accounts/{AccountId}", 
            httpMethod: .DELETE, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Deletes the specified Amazon Chime account. You must suspend all users before deleting Team account. You can use the BatchSuspendUser action to dodo. For EnterpriseLWA and EnterpriseAD accounts, you must release the claimed domains for your Amazon Chime account before deletion. As soon as you release the domain, all users under that account are suspended. Deleted accounts appear in your Disabled accounts list for 90 days. To restore deleted account from your Disabled accounts list, you must contact AWS Support. After 90 days, deleted accounts are permanently removed from your
    /// Disabled accounts list.
    ///
    /// Parameters:
    ///   - accountId: The Amazon Chime account ID.
    ///   - logger: Logger use during operation
    @inlinable
    public func deleteAccount(
        accountId: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> DeleteAccountResponse {
        let input = DeleteAccountRequest(
            accountId: accountId
        )
        return try await self.deleteAccount(input, logger: logger)
    }

    /// Deletes an AppInstance and all associated data asynchronously.   This API is is no longer supported and will not be updated. We recommend using the latest version,  DeleteAppInstance, in the Amazon Chime SDK. Using the latest version requires migrating to a dedicated namespace. For more information, refer to   Migrating from the Amazon Chime namespace in the  Amazon Chime SDK Developer Guide.
    @available(*, deprecated, message: "Replaced by DeleteAppInstance in the Amazon Chime SDK Identity Namespace")
    @Sendable
    @inlinable
    public func deleteAppInstance(_ input: DeleteAppInstanceRequest, logger: Logger = AWSClient.loggingDisabled) async throws {
        try await self.client.execute(
            operation: "DeleteAppInstance", 
            path: "/app-instances/{AppInstanceArn}", 
            httpMethod: .DELETE, 
            serviceConfig: self.config, 
            input: input, 
            hostPrefix: "identity-", 
            logger: logger
        )
    }
    /// Deletes an AppInstance and all associated data asynchronously.   This API is is no longer supported and will not be updated. We recommend using the latest version,  DeleteAppInstance, in the Amazon Chime SDK. Using the latest version requires migrating to a dedicated namespace. For more information, refer to   Migrating from the Amazon Chime namespace in the  Amazon Chime SDK Developer Guide.
    ///
    /// Parameters:
    ///   - appInstanceArn: The ARN of the AppInstance.
    ///   - logger: Logger use during operation
    @available(*, deprecated, message: "Replaced by DeleteAppInstance in the Amazon Chime SDK Identity Namespace")
    @inlinable
    public func deleteAppInstance(
        appInstanceArn: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws {
        let input = DeleteAppInstanceRequest(
            appInstanceArn: appInstanceArn
        )
        return try await self.deleteAppInstance(input, logger: logger)
    }

    /// Demotes an AppInstanceAdmin to an AppInstanceUser. This action does not delete the user.   This API is is no longer supported and will not be updated. We recommend using the latest version,  DeleteAppInstanceAdmin, in the Amazon Chime SDK. Using the latest version requires migrating to a dedicated namespace. For more information, refer to   Migrating from the Amazon Chime namespace in the  Amazon Chime SDK Developer Guide.
    @available(*, deprecated, message: "Replaced by DeleteAppInstanceAdmin in the Amazon Chime SDK Identity Namespace")
    @Sendable
    @inlinable
    public func deleteAppInstanceAdmin(_ input: DeleteAppInstanceAdminRequest, logger: Logger = AWSClient.loggingDisabled) async throws {
        try await self.client.execute(
            operation: "DeleteAppInstanceAdmin", 
            path: "/app-instances/{AppInstanceArn}/admins/{AppInstanceAdminArn}", 
            httpMethod: .DELETE, 
            serviceConfig: self.config, 
            input: input, 
            hostPrefix: "identity-", 
            logger: logger
        )
    }
    /// Demotes an AppInstanceAdmin to an AppInstanceUser. This action does not delete the user.   This API is is no longer supported and will not be updated. We recommend using the latest version,  DeleteAppInstanceAdmin, in the Amazon Chime SDK. Using the latest version requires migrating to a dedicated namespace. For more information, refer to   Migrating from the Amazon Chime namespace in the  Amazon Chime SDK Developer Guide.
    ///
    /// Parameters:
    ///   - appInstanceAdminArn: The ARN of the AppInstance's administrator.
    ///   - appInstanceArn: The ARN of the AppInstance.
    ///   - logger: Logger use during operation
    @available(*, deprecated, message: "Replaced by DeleteAppInstanceAdmin in the Amazon Chime SDK Identity Namespace")
    @inlinable
    public func deleteAppInstanceAdmin(
        appInstanceAdminArn: String,
        appInstanceArn: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws {
        let input = DeleteAppInstanceAdminRequest(
            appInstanceAdminArn: appInstanceAdminArn, 
            appInstanceArn: appInstanceArn
        )
        return try await self.deleteAppInstanceAdmin(input, logger: logger)
    }

    /// Deletes the streaming configurations of an AppInstance.   This API is is no longer supported and will not be updated. We recommend using the latest version, DeleteAppInstanceStreamingConfigurations, in the Amazon Chime SDK. Using the latest version requires migrating to a dedicated namespace. For more information, refer to   Migrating from the Amazon Chime namespace in the  Amazon Chime SDK Developer Guide.
    @available(*, deprecated, message: "Replaced by DeleteAppInstanceStreamingConfigurations in the Amazon Chime SDK Messaging Namespace")
    @Sendable
    @inlinable
    public func deleteAppInstanceStreamingConfigurations(_ input: DeleteAppInstanceStreamingConfigurationsRequest, logger: Logger = AWSClient.loggingDisabled) async throws {
        try await self.client.execute(
            operation: "DeleteAppInstanceStreamingConfigurations", 
            path: "/app-instances/{AppInstanceArn}/streaming-configurations", 
            httpMethod: .DELETE, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Deletes the streaming configurations of an AppInstance.   This API is is no longer supported and will not be updated. We recommend using the latest version, DeleteAppInstanceStreamingConfigurations, in the Amazon Chime SDK. Using the latest version requires migrating to a dedicated namespace. For more information, refer to   Migrating from the Amazon Chime namespace in the  Amazon Chime SDK Developer Guide.
    ///
    /// Parameters:
    ///   - appInstanceArn: The ARN of the streaming configurations being deleted.
    ///   - logger: Logger use during operation
    @available(*, deprecated, message: "Replaced by DeleteAppInstanceStreamingConfigurations in the Amazon Chime SDK Messaging Namespace")
    @inlinable
    public func deleteAppInstanceStreamingConfigurations(
        appInstanceArn: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws {
        let input = DeleteAppInstanceStreamingConfigurationsRequest(
            appInstanceArn: appInstanceArn
        )
        return try await self.deleteAppInstanceStreamingConfigurations(input, logger: logger)
    }

    /// Deletes an AppInstanceUser.   This API is is no longer supported and will not be updated. We recommend using the latest version, DeleteAppInstanceUser, in the Amazon Chime SDK. Using the latest version requires migrating to a dedicated namespace. For more information, refer to   Migrating from the Amazon Chime namespace in the  Amazon Chime SDK Developer Guide.
    @available(*, deprecated, message: "Replaced by DeleteAppInstanceUser in the Amazon Chime SDK Identity Namespace")
    @Sendable
    @inlinable
    public func deleteAppInstanceUser(_ input: DeleteAppInstanceUserRequest, logger: Logger = AWSClient.loggingDisabled) async throws {
        try await self.client.execute(
            operation: "DeleteAppInstanceUser", 
            path: "/app-instance-users/{AppInstanceUserArn}", 
            httpMethod: .DELETE, 
            serviceConfig: self.config, 
            input: input, 
            hostPrefix: "identity-", 
            logger: logger
        )
    }
    /// Deletes an AppInstanceUser.   This API is is no longer supported and will not be updated. We recommend using the latest version, DeleteAppInstanceUser, in the Amazon Chime SDK. Using the latest version requires migrating to a dedicated namespace. For more information, refer to   Migrating from the Amazon Chime namespace in the  Amazon Chime SDK Developer Guide.
    ///
    /// Parameters:
    ///   - appInstanceUserArn: The ARN of the user request being deleted.
    ///   - logger: Logger use during operation
    @available(*, deprecated, message: "Replaced by DeleteAppInstanceUser in the Amazon Chime SDK Identity Namespace")
    @inlinable
    public func deleteAppInstanceUser(
        appInstanceUserArn: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws {
        let input = DeleteAppInstanceUserRequest(
            appInstanceUserArn: appInstanceUserArn
        )
        return try await self.deleteAppInstanceUser(input, logger: logger)
    }

    /// Deletes an attendee from the specified Amazon Chime SDK meeting and deletes their
    /// JoinToken. Attendees are automatically deleted when a Amazon Chime SDK meeting is deleted. For more information about the Amazon Chime SDK, see
    /// Using the Amazon Chime SDK
    /// in the Amazon Chime SDK Developer Guide.   This API is is no longer supported and will not be updated. We recommend using the latest version, DeleteAttendee, in the Amazon Chime SDK. Using the latest version requires migrating to a dedicated namespace. For more information, refer to   Migrating from the Amazon Chime namespace in the  Amazon Chime SDK Developer Guide.
    @available(*, deprecated, message: "Replaced by DeleteAttendee in the Amazon Chime SDK Meetings Namespace")
    @Sendable
    @inlinable
    public func deleteAttendee(_ input: DeleteAttendeeRequest, logger: Logger = AWSClient.loggingDisabled) async throws {
        try await self.client.execute(
            operation: "DeleteAttendee", 
            path: "/meetings/{MeetingId}/attendees/{AttendeeId}", 
            httpMethod: .DELETE, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Deletes an attendee from the specified Amazon Chime SDK meeting and deletes their
    /// JoinToken. Attendees are automatically deleted when a Amazon Chime SDK meeting is deleted. For more information about the Amazon Chime SDK, see
    /// Using the Amazon Chime SDK
    /// in the Amazon Chime SDK Developer Guide.   This API is is no longer supported and will not be updated. We recommend using the latest version, DeleteAttendee, in the Amazon Chime SDK. Using the latest version requires migrating to a dedicated namespace. For more information, refer to   Migrating from the Amazon Chime namespace in the  Amazon Chime SDK Developer Guide.
    ///
    /// Parameters:
    ///   - attendeeId: The Amazon Chime SDK attendee ID.
    ///   - meetingId: The Amazon Chime SDK meeting ID.
    ///   - logger: Logger use during operation
    @available(*, deprecated, message: "Replaced by DeleteAttendee in the Amazon Chime SDK Meetings Namespace")
    @inlinable
    public func deleteAttendee(
        attendeeId: String,
        meetingId: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws {
        let input = DeleteAttendeeRequest(
            attendeeId: attendeeId, 
            meetingId: meetingId
        )
        return try await self.deleteAttendee(input, logger: logger)
    }

    /// Immediately makes a channel and its memberships inaccessible and marks them for deletion. This is an irreversible process.  The x-amz-chime-bearer request header is mandatory. Use the AppInstanceUserArn of the user that makes the API call as the value in the header.    This API is is no longer supported and will not be updated. We recommend using the latest version, DeleteChannel, in the Amazon Chime SDK. Using the latest version requires migrating to a dedicated namespace. For more information, refer to   Migrating from the Amazon Chime namespace in the  Amazon Chime SDK Developer Guide.
    @available(*, deprecated, message: "Replaced by DeleteChannel in the Amazon Chime SDK Messaging Namespace")
    @Sendable
    @inlinable
    public func deleteChannel(_ input: DeleteChannelRequest, logger: Logger = AWSClient.loggingDisabled) async throws {
        try await self.client.execute(
            operation: "DeleteChannel", 
            path: "/channels/{ChannelArn}", 
            httpMethod: .DELETE, 
            serviceConfig: self.config, 
            input: input, 
            hostPrefix: "messaging-", 
            logger: logger
        )
    }
    /// Immediately makes a channel and its memberships inaccessible and marks them for deletion. This is an irreversible process.  The x-amz-chime-bearer request header is mandatory. Use the AppInstanceUserArn of the user that makes the API call as the value in the header.    This API is is no longer supported and will not be updated. We recommend using the latest version, DeleteChannel, in the Amazon Chime SDK. Using the latest version requires migrating to a dedicated namespace. For more information, refer to   Migrating from the Amazon Chime namespace in the  Amazon Chime SDK Developer Guide.
    ///
    /// Parameters:
    ///   - channelArn: The ARN of the channel being deleted.
    ///   - chimeBearer: The AppInstanceUserArn of the user that makes the API call.
    ///   - logger: Logger use during operation
    @available(*, deprecated, message: "Replaced by DeleteChannel in the Amazon Chime SDK Messaging Namespace")
    @inlinable
    public func deleteChannel(
        channelArn: String,
        chimeBearer: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws {
        let input = DeleteChannelRequest(
            channelArn: channelArn, 
            chimeBearer: chimeBearer
        )
        return try await self.deleteChannel(input, logger: logger)
    }

    /// Removes a user from a channel's ban list.  The x-amz-chime-bearer request header is mandatory. Use the AppInstanceUserArn of the user that makes the API call as the value in the header.    This API is is no longer supported and will not be updated. We recommend using the latest version, DeleteChannelBan, in the Amazon Chime SDK. Using the latest version requires migrating to a dedicated namespace. For more information, refer to   Migrating from the Amazon Chime namespace in the  Amazon Chime SDK Developer Guide.
    @available(*, deprecated, message: "Replaced by DeleteChannelBan in the Amazon Chime SDK Messaging Namespace")
    @Sendable
    @inlinable
    public func deleteChannelBan(_ input: DeleteChannelBanRequest, logger: Logger = AWSClient.loggingDisabled) async throws {
        try await self.client.execute(
            operation: "DeleteChannelBan", 
            path: "/channels/{ChannelArn}/bans/{MemberArn}", 
            httpMethod: .DELETE, 
            serviceConfig: self.config, 
            input: input, 
            hostPrefix: "messaging-", 
            logger: logger
        )
    }
    /// Removes a user from a channel's ban list.  The x-amz-chime-bearer request header is mandatory. Use the AppInstanceUserArn of the user that makes the API call as the value in the header.    This API is is no longer supported and will not be updated. We recommend using the latest version, DeleteChannelBan, in the Amazon Chime SDK. Using the latest version requires migrating to a dedicated namespace. For more information, refer to   Migrating from the Amazon Chime namespace in the  Amazon Chime SDK Developer Guide.
    ///
    /// Parameters:
    ///   - channelArn: The ARN of the channel from which the AppInstanceUser was banned.
    ///   - chimeBearer: The AppInstanceUserArn of the user that makes the API call.
    ///   - memberArn: The ARN of the AppInstanceUser that you want to reinstate.
    ///   - logger: Logger use during operation
    @available(*, deprecated, message: "Replaced by DeleteChannelBan in the Amazon Chime SDK Messaging Namespace")
    @inlinable
    public func deleteChannelBan(
        channelArn: String,
        chimeBearer: String? = nil,
        memberArn: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws {
        let input = DeleteChannelBanRequest(
            channelArn: channelArn, 
            chimeBearer: chimeBearer, 
            memberArn: memberArn
        )
        return try await self.deleteChannelBan(input, logger: logger)
    }

    /// Removes a member from a channel.  The x-amz-chime-bearer request header is mandatory. Use the AppInstanceUserArn of the user that makes the API call as the value in the header.    This API is is no longer supported and will not be updated. We recommend using the latest version, DeleteChannelMembership, in the Amazon Chime SDK. Using the latest version requires migrating to a dedicated namespace. For more information, refer to   Migrating from the Amazon Chime namespace in the  Amazon Chime SDK Developer Guide.
    @available(*, deprecated, message: "Replaced by DeleteChannelMembership in the Amazon Chime SDK Messaging Namespace")
    @Sendable
    @inlinable
    public func deleteChannelMembership(_ input: DeleteChannelMembershipRequest, logger: Logger = AWSClient.loggingDisabled) async throws {
        try await self.client.execute(
            operation: "DeleteChannelMembership", 
            path: "/channels/{ChannelArn}/memberships/{MemberArn}", 
            httpMethod: .DELETE, 
            serviceConfig: self.config, 
            input: input, 
            hostPrefix: "messaging-", 
            logger: logger
        )
    }
    /// Removes a member from a channel.  The x-amz-chime-bearer request header is mandatory. Use the AppInstanceUserArn of the user that makes the API call as the value in the header.    This API is is no longer supported and will not be updated. We recommend using the latest version, DeleteChannelMembership, in the Amazon Chime SDK. Using the latest version requires migrating to a dedicated namespace. For more information, refer to   Migrating from the Amazon Chime namespace in the  Amazon Chime SDK Developer Guide.
    ///
    /// Parameters:
    ///   - channelArn: The ARN of the channel from which you want to remove the user.
    ///   - chimeBearer: The AppInstanceUserArn of the user that makes the API call.
    ///   - memberArn: The ARN of the member that you're removing from the channel.
    ///   - logger: Logger use during operation
    @available(*, deprecated, message: "Replaced by DeleteChannelMembership in the Amazon Chime SDK Messaging Namespace")
    @inlinable
    public func deleteChannelMembership(
        channelArn: String,
        chimeBearer: String? = nil,
        memberArn: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws {
        let input = DeleteChannelMembershipRequest(
            channelArn: channelArn, 
            chimeBearer: chimeBearer, 
            memberArn: memberArn
        )
        return try await self.deleteChannelMembership(input, logger: logger)
    }

    /// Deletes a channel message. Only admins can perform this action. Deletion makes messages inaccessible immediately. A background process deletes any revisions created by UpdateChannelMessage.  The x-amz-chime-bearer request header is mandatory. Use the AppInstanceUserArn of the user that makes the API call as the value in the header.    This API is is no longer supported and will not be updated. We recommend using the latest version, DeleteChannelMessage, in the Amazon Chime SDK. Using the latest version requires migrating to a dedicated namespace. For more information, refer to   Migrating from the Amazon Chime namespace in the  Amazon Chime SDK Developer Guide.
    @available(*, deprecated, message: "Replaced by DeleteChannelMessage in the Amazon Chime SDK Messaging Namespace")
    @Sendable
    @inlinable
    public func deleteChannelMessage(_ input: DeleteChannelMessageRequest, logger: Logger = AWSClient.loggingDisabled) async throws {
        try await self.client.execute(
            operation: "DeleteChannelMessage", 
            path: "/channels/{ChannelArn}/messages/{MessageId}", 
            httpMethod: .DELETE, 
            serviceConfig: self.config, 
            input: input, 
            hostPrefix: "messaging-", 
            logger: logger
        )
    }
    /// Deletes a channel message. Only admins can perform this action. Deletion makes messages inaccessible immediately. A background process deletes any revisions created by UpdateChannelMessage.  The x-amz-chime-bearer request header is mandatory. Use the AppInstanceUserArn of the user that makes the API call as the value in the header.    This API is is no longer supported and will not be updated. We recommend using the latest version, DeleteChannelMessage, in the Amazon Chime SDK. Using the latest version requires migrating to a dedicated namespace. For more information, refer to   Migrating from the Amazon Chime namespace in the  Amazon Chime SDK Developer Guide.
    ///
    /// Parameters:
    ///   - channelArn: The ARN of the channel.
    ///   - chimeBearer: The AppInstanceUserArn of the user that makes the API call.
    ///   - messageId: The ID of the message being deleted.
    ///   - logger: Logger use during operation
    @available(*, deprecated, message: "Replaced by DeleteChannelMessage in the Amazon Chime SDK Messaging Namespace")
    @inlinable
    public func deleteChannelMessage(
        channelArn: String,
        chimeBearer: String? = nil,
        messageId: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws {
        let input = DeleteChannelMessageRequest(
            channelArn: channelArn, 
            chimeBearer: chimeBearer, 
            messageId: messageId
        )
        return try await self.deleteChannelMessage(input, logger: logger)
    }

    /// Deletes a channel moderator.  The x-amz-chime-bearer request header is mandatory. Use the AppInstanceUserArn of the user that makes the API call as the value in the header.    This API is is no longer supported and will not be updated. We recommend using the latest version, DeleteChannelModerator, in the Amazon Chime SDK. Using the latest version requires migrating to a dedicated namespace. For more information, refer to   Migrating from the Amazon Chime namespace in the  Amazon Chime SDK Developer Guide.
    @available(*, deprecated, message: "Replaced by DeleteChannelModerator in the Amazon Chime SDK Messaging Namespace")
    @Sendable
    @inlinable
    public func deleteChannelModerator(_ input: DeleteChannelModeratorRequest, logger: Logger = AWSClient.loggingDisabled) async throws {
        try await self.client.execute(
            operation: "DeleteChannelModerator", 
            path: "/channels/{ChannelArn}/moderators/{ChannelModeratorArn}", 
            httpMethod: .DELETE, 
            serviceConfig: self.config, 
            input: input, 
            hostPrefix: "messaging-", 
            logger: logger
        )
    }
    /// Deletes a channel moderator.  The x-amz-chime-bearer request header is mandatory. Use the AppInstanceUserArn of the user that makes the API call as the value in the header.    This API is is no longer supported and will not be updated. We recommend using the latest version, DeleteChannelModerator, in the Amazon Chime SDK. Using the latest version requires migrating to a dedicated namespace. For more information, refer to   Migrating from the Amazon Chime namespace in the  Amazon Chime SDK Developer Guide.
    ///
    /// Parameters:
    ///   - channelArn: The ARN of the channel.
    ///   - channelModeratorArn: The ARN of the moderator being deleted.
    ///   - chimeBearer: The AppInstanceUserArn of the user that makes the API call.
    ///   - logger: Logger use during operation
    @available(*, deprecated, message: "Replaced by DeleteChannelModerator in the Amazon Chime SDK Messaging Namespace")
    @inlinable
    public func deleteChannelModerator(
        channelArn: String,
        channelModeratorArn: String,
        chimeBearer: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws {
        let input = DeleteChannelModeratorRequest(
            channelArn: channelArn, 
            channelModeratorArn: channelModeratorArn, 
            chimeBearer: chimeBearer
        )
        return try await self.deleteChannelModerator(input, logger: logger)
    }

    /// Deletes the events configuration that allows a bot to receive outgoing events.
    @Sendable
    @inlinable
    public func deleteEventsConfiguration(_ input: DeleteEventsConfigurationRequest, logger: Logger = AWSClient.loggingDisabled) async throws {
        try await self.client.execute(
            operation: "DeleteEventsConfiguration", 
            path: "/accounts/{AccountId}/bots/{BotId}/events-configuration", 
            httpMethod: .DELETE, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Deletes the events configuration that allows a bot to receive outgoing events.
    ///
    /// Parameters:
    ///   - accountId: The Amazon Chime account ID.
    ///   - botId: The bot ID.
    ///   - logger: Logger use during operation
    @inlinable
    public func deleteEventsConfiguration(
        accountId: String,
        botId: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws {
        let input = DeleteEventsConfigurationRequest(
            accountId: accountId, 
            botId: botId
        )
        return try await self.deleteEventsConfiguration(input, logger: logger)
    }

    /// Deletes the media capture pipeline.   This API is is no longer supported and will not be updated. We recommend using the latest version,  DeleteMediaCapturePipeline, in the Amazon Chime SDK. Using the latest version requires migrating to a dedicated namespace. For more information, refer to   Migrating from the Amazon Chime namespace in the  Amazon Chime SDK Developer Guide.
    @available(*, deprecated, message: "Replaced by DeleteMediaCapturePipeline in the Amazon Chime SDK Media Pipelines Namespace")
    @Sendable
    @inlinable
    public func deleteMediaCapturePipeline(_ input: DeleteMediaCapturePipelineRequest, logger: Logger = AWSClient.loggingDisabled) async throws {
        try await self.client.execute(
            operation: "DeleteMediaCapturePipeline", 
            path: "/media-capture-pipelines/{MediaPipelineId}", 
            httpMethod: .DELETE, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Deletes the media capture pipeline.   This API is is no longer supported and will not be updated. We recommend using the latest version,  DeleteMediaCapturePipeline, in the Amazon Chime SDK. Using the latest version requires migrating to a dedicated namespace. For more information, refer to   Migrating from the Amazon Chime namespace in the  Amazon Chime SDK Developer Guide.
    ///
    /// Parameters:
    ///   - mediaPipelineId: The ID of the media capture pipeline being deleted.
    ///   - logger: Logger use during operation
    @available(*, deprecated, message: "Replaced by DeleteMediaCapturePipeline in the Amazon Chime SDK Media Pipelines Namespace")
    @inlinable
    public func deleteMediaCapturePipeline(
        mediaPipelineId: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws {
        let input = DeleteMediaCapturePipelineRequest(
            mediaPipelineId: mediaPipelineId
        )
        return try await self.deleteMediaCapturePipeline(input, logger: logger)
    }

    /// Deletes the specified Amazon Chime SDK meeting. The operation deletes all attendees, disconnects all clients, and prevents new clients from  joining the meeting. For more information about the Amazon Chime SDK, see  Using the Amazon Chime SDK in the  Amazon Chime SDK Developer Guide.   This API is is no longer supported and will not be updated. We recommend using the latest version, DeleteMeeting, in the Amazon Chime SDK. Using the latest version requires migrating to a dedicated namespace. For more information, refer to   Migrating from the Amazon Chime namespace in the  Amazon Chime SDK Developer Guide.
    @available(*, deprecated, message: "Replaced by DeleteMeeting in the Amazon Chime SDK Meetings Namespace")
    @Sendable
    @inlinable
    public func deleteMeeting(_ input: DeleteMeetingRequest, logger: Logger = AWSClient.loggingDisabled) async throws {
        try await self.client.execute(
            operation: "DeleteMeeting", 
            path: "/meetings/{MeetingId}", 
            httpMethod: .DELETE, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Deletes the specified Amazon Chime SDK meeting. The operation deletes all attendees, disconnects all clients, and prevents new clients from  joining the meeting. For more information about the Amazon Chime SDK, see  Using the Amazon Chime SDK in the  Amazon Chime SDK Developer Guide.   This API is is no longer supported and will not be updated. We recommend using the latest version, DeleteMeeting, in the Amazon Chime SDK. Using the latest version requires migrating to a dedicated namespace. For more information, refer to   Migrating from the Amazon Chime namespace in the  Amazon Chime SDK Developer Guide.
    ///
    /// Parameters:
    ///   - meetingId: The Amazon Chime SDK meeting ID.
    ///   - logger: Logger use during operation
    @available(*, deprecated, message: "Replaced by DeleteMeeting in the Amazon Chime SDK Meetings Namespace")
    @inlinable
    public func deleteMeeting(
        meetingId: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws {
        let input = DeleteMeetingRequest(
            meetingId: meetingId
        )
        return try await self.deleteMeeting(input, logger: logger)
    }

    /// Moves the specified phone number into the Deletion queue. A phone number must be disassociated from any users or Amazon Chime Voice Connectors before it can be deleted. Deleted phone numbers remain in the
    /// Deletion queue
    /// for 7 days before they are deleted permanently.
    @Sendable
    @inlinable
    public func deletePhoneNumber(_ input: DeletePhoneNumberRequest, logger: Logger = AWSClient.loggingDisabled) async throws {
        try await self.client.execute(
            operation: "DeletePhoneNumber", 
            path: "/phone-numbers/{PhoneNumberId}", 
            httpMethod: .DELETE, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Moves the specified phone number into the Deletion queue. A phone number must be disassociated from any users or Amazon Chime Voice Connectors before it can be deleted. Deleted phone numbers remain in the
    /// Deletion queue
    /// for 7 days before they are deleted permanently.
    ///
    /// Parameters:
    ///   - phoneNumberId: The phone number ID.
    ///   - logger: Logger use during operation
    @inlinable
    public func deletePhoneNumber(
        phoneNumberId: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws {
        let input = DeletePhoneNumberRequest(
            phoneNumberId: phoneNumberId
        )
        return try await self.deletePhoneNumber(input, logger: logger)
    }

    /// Deletes the specified proxy session from the specified Amazon Chime Voice Connector.   This API is is no longer supported and will not be updated. We recommend using the latest version, DeleteProxySession, in the Amazon Chime SDK. Using the latest version requires migrating to a dedicated namespace. For more information, refer to   Migrating from the Amazon Chime namespace in the  Amazon Chime SDK Developer Guide.
    @available(*, deprecated, message: "Replaced by DeleteProxySession in the Amazon Chime SDK Voice Namespace")
    @Sendable
    @inlinable
    public func deleteProxySession(_ input: DeleteProxySessionRequest, logger: Logger = AWSClient.loggingDisabled) async throws {
        try await self.client.execute(
            operation: "DeleteProxySession", 
            path: "/voice-connectors/{VoiceConnectorId}/proxy-sessions/{ProxySessionId}", 
            httpMethod: .DELETE, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Deletes the specified proxy session from the specified Amazon Chime Voice Connector.   This API is is no longer supported and will not be updated. We recommend using the latest version, DeleteProxySession, in the Amazon Chime SDK. Using the latest version requires migrating to a dedicated namespace. For more information, refer to   Migrating from the Amazon Chime namespace in the  Amazon Chime SDK Developer Guide.
    ///
    /// Parameters:
    ///   - proxySessionId: The proxy session ID.
    ///   - voiceConnectorId: The Amazon Chime voice connector ID.
    ///   - logger: Logger use during operation
    @available(*, deprecated, message: "Replaced by DeleteProxySession in the Amazon Chime SDK Voice Namespace")
    @inlinable
    public func deleteProxySession(
        proxySessionId: String,
        voiceConnectorId: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws {
        let input = DeleteProxySessionRequest(
            proxySessionId: proxySessionId, 
            voiceConnectorId: voiceConnectorId
        )
        return try await self.deleteProxySession(input, logger: logger)
    }

    /// Deletes a chat room in an Amazon Chime Enterprise account.
    @Sendable
    @inlinable
    public func deleteRoom(_ input: DeleteRoomRequest, logger: Logger = AWSClient.loggingDisabled) async throws {
        try await self.client.execute(
            operation: "DeleteRoom", 
            path: "/accounts/{AccountId}/rooms/{RoomId}", 
            httpMethod: .DELETE, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Deletes a chat room in an Amazon Chime Enterprise account.
    ///
    /// Parameters:
    ///   - accountId: The Amazon Chime account ID.
    ///   - roomId: The chat room ID.
    ///   - logger: Logger use during operation
    @inlinable
    public func deleteRoom(
        accountId: String,
        roomId: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws {
        let input = DeleteRoomRequest(
            accountId: accountId, 
            roomId: roomId
        )
        return try await self.deleteRoom(input, logger: logger)
    }

    /// Removes a member from a chat room in an Amazon Chime Enterprise account.
    @Sendable
    @inlinable
    public func deleteRoomMembership(_ input: DeleteRoomMembershipRequest, logger: Logger = AWSClient.loggingDisabled) async throws {
        try await self.client.execute(
            operation: "DeleteRoomMembership", 
            path: "/accounts/{AccountId}/rooms/{RoomId}/memberships/{MemberId}", 
            httpMethod: .DELETE, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Removes a member from a chat room in an Amazon Chime Enterprise account.
    ///
    /// Parameters:
    ///   - accountId: The Amazon Chime account ID.
    ///   - memberId: The member ID (user ID or bot ID).
    ///   - roomId: The room ID.
    ///   - logger: Logger use during operation
    @inlinable
    public func deleteRoomMembership(
        accountId: String,
        memberId: String,
        roomId: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws {
        let input = DeleteRoomMembershipRequest(
            accountId: accountId, 
            memberId: memberId, 
            roomId: roomId
        )
        return try await self.deleteRoomMembership(input, logger: logger)
    }

    /// Deletes a SIP media application.   This API is is no longer supported and will not be updated. We recommend using the latest version, DeleteSipMediaApplication, in the Amazon Chime SDK. Using the latest version requires migrating to a dedicated namespace. For more information, refer to   Migrating from the Amazon Chime namespace in the  Amazon Chime SDK Developer Guide.
    @available(*, deprecated, message: "Replaced by DeleteSipMediaApplication in the Amazon Chime SDK Voice Namespace")
    @Sendable
    @inlinable
    public func deleteSipMediaApplication(_ input: DeleteSipMediaApplicationRequest, logger: Logger = AWSClient.loggingDisabled) async throws {
        try await self.client.execute(
            operation: "DeleteSipMediaApplication", 
            path: "/sip-media-applications/{SipMediaApplicationId}", 
            httpMethod: .DELETE, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Deletes a SIP media application.   This API is is no longer supported and will not be updated. We recommend using the latest version, DeleteSipMediaApplication, in the Amazon Chime SDK. Using the latest version requires migrating to a dedicated namespace. For more information, refer to   Migrating from the Amazon Chime namespace in the  Amazon Chime SDK Developer Guide.
    ///
    /// Parameters:
    ///   - sipMediaApplicationId: The SIP media application ID.
    ///   - logger: Logger use during operation
    @available(*, deprecated, message: "Replaced by DeleteSipMediaApplication in the Amazon Chime SDK Voice Namespace")
    @inlinable
    public func deleteSipMediaApplication(
        sipMediaApplicationId: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws {
        let input = DeleteSipMediaApplicationRequest(
            sipMediaApplicationId: sipMediaApplicationId
        )
        return try await self.deleteSipMediaApplication(input, logger: logger)
    }

    /// Deletes a SIP rule. You must disable a SIP rule before you can delete it.   This API is is no longer supported and will not be updated. We recommend using the latest version, DeleteSipRule, in the Amazon Chime SDK. Using the latest version requires migrating to a dedicated namespace. For more information, refer to   Migrating from the Amazon Chime namespace in the  Amazon Chime SDK Developer Guide.
    @available(*, deprecated, message: "Replaced by DeleteSipRule in the Amazon Chime SDK Voice Namespace")
    @Sendable
    @inlinable
    public func deleteSipRule(_ input: DeleteSipRuleRequest, logger: Logger = AWSClient.loggingDisabled) async throws {
        try await self.client.execute(
            operation: "DeleteSipRule", 
            path: "/sip-rules/{SipRuleId}", 
            httpMethod: .DELETE, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Deletes a SIP rule. You must disable a SIP rule before you can delete it.   This API is is no longer supported and will not be updated. We recommend using the latest version, DeleteSipRule, in the Amazon Chime SDK. Using the latest version requires migrating to a dedicated namespace. For more information, refer to   Migrating from the Amazon Chime namespace in the  Amazon Chime SDK Developer Guide.
    ///
    /// Parameters:
    ///   - sipRuleId: The SIP rule ID.
    ///   - logger: Logger use during operation
    @available(*, deprecated, message: "Replaced by DeleteSipRule in the Amazon Chime SDK Voice Namespace")
    @inlinable
    public func deleteSipRule(
        sipRuleId: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws {
        let input = DeleteSipRuleRequest(
            sipRuleId: sipRuleId
        )
        return try await self.deleteSipRule(input, logger: logger)
    }

    /// Deletes the specified Amazon Chime Voice Connector. Any phone numbers associated with the Amazon Chime Voice Connector must be disassociated from it before it can be deleted.   This API is is no longer supported and will not be updated. We recommend using the latest version, DeleteVoiceConnector, in the Amazon Chime SDK. Using the latest version requires migrating to a dedicated namespace. For more information, refer to   Migrating from the Amazon Chime namespace in the  Amazon Chime SDK Developer Guide.
    @available(*, deprecated, message: "Replaced by DeleteVoiceConnector in the Amazon Chime SDK Voice Namespace")
    @Sendable
    @inlinable
    public func deleteVoiceConnector(_ input: DeleteVoiceConnectorRequest, logger: Logger = AWSClient.loggingDisabled) async throws {
        try await self.client.execute(
            operation: "DeleteVoiceConnector", 
            path: "/voice-connectors/{VoiceConnectorId}", 
            httpMethod: .DELETE, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Deletes the specified Amazon Chime Voice Connector. Any phone numbers associated with the Amazon Chime Voice Connector must be disassociated from it before it can be deleted.   This API is is no longer supported and will not be updated. We recommend using the latest version, DeleteVoiceConnector, in the Amazon Chime SDK. Using the latest version requires migrating to a dedicated namespace. For more information, refer to   Migrating from the Amazon Chime namespace in the  Amazon Chime SDK Developer Guide.
    ///
    /// Parameters:
    ///   - voiceConnectorId: The Amazon Chime Voice Connector ID.
    ///   - logger: Logger use during operation
    @available(*, deprecated, message: "Replaced by DeleteVoiceConnector in the Amazon Chime SDK Voice Namespace")
    @inlinable
    public func deleteVoiceConnector(
        voiceConnectorId: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws {
        let input = DeleteVoiceConnectorRequest(
            voiceConnectorId: voiceConnectorId
        )
        return try await self.deleteVoiceConnector(input, logger: logger)
    }

    /// Deletes the emergency calling configuration details from the specified Amazon Chime Voice Connector.   This API is is no longer supported and will not be updated. We recommend using the latest version, DeleteVoiceConnectorEmergencyCallingConfiguration, in the Amazon Chime SDK. Using the latest version requires migrating to a dedicated namespace. For more information, refer to   Migrating from the Amazon Chime namespace in the  Amazon Chime SDK Developer Guide.
    @available(*, deprecated, message: "Replaced by DeleteVoiceConnectorEmergencyCallingConfiguration in the Amazon Chime SDK Voice Namespace")
    @Sendable
    @inlinable
    public func deleteVoiceConnectorEmergencyCallingConfiguration(_ input: DeleteVoiceConnectorEmergencyCallingConfigurationRequest, logger: Logger = AWSClient.loggingDisabled) async throws {
        try await self.client.execute(
            operation: "DeleteVoiceConnectorEmergencyCallingConfiguration", 
            path: "/voice-connectors/{VoiceConnectorId}/emergency-calling-configuration", 
            httpMethod: .DELETE, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Deletes the emergency calling configuration details from the specified Amazon Chime Voice Connector.   This API is is no longer supported and will not be updated. We recommend using the latest version, DeleteVoiceConnectorEmergencyCallingConfiguration, in the Amazon Chime SDK. Using the latest version requires migrating to a dedicated namespace. For more information, refer to   Migrating from the Amazon Chime namespace in the  Amazon Chime SDK Developer Guide.
    ///
    /// Parameters:
    ///   - voiceConnectorId: The Amazon Chime Voice Connector ID.
    ///   - logger: Logger use during operation
    @available(*, deprecated, message: "Replaced by DeleteVoiceConnectorEmergencyCallingConfiguration in the Amazon Chime SDK Voice Namespace")
    @inlinable
    public func deleteVoiceConnectorEmergencyCallingConfiguration(
        voiceConnectorId: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws {
        let input = DeleteVoiceConnectorEmergencyCallingConfigurationRequest(
            voiceConnectorId: voiceConnectorId
        )
        return try await self.deleteVoiceConnectorEmergencyCallingConfiguration(input, logger: logger)
    }

    /// Deletes the specified Amazon Chime Voice Connector group. Any
    /// VoiceConnectorItems
    /// and phone numbers associated with the group must be removed before it can be deleted.   This API is is no longer supported and will not be updated. We recommend using the latest version, DeleteVoiceConnectorGroup, in the Amazon Chime SDK. Using the latest version requires migrating to a dedicated namespace. For more information, refer to   Migrating from the Amazon Chime namespace in the  Amazon Chime SDK Developer Guide.
    @available(*, deprecated, message: "Replaced by DeleteVoiceConnectorGroup in the Amazon Chime SDK Voice Namespace")
    @Sendable
    @inlinable
    public func deleteVoiceConnectorGroup(_ input: DeleteVoiceConnectorGroupRequest, logger: Logger = AWSClient.loggingDisabled) async throws {
        try await self.client.execute(
            operation: "DeleteVoiceConnectorGroup", 
            path: "/voice-connector-groups/{VoiceConnectorGroupId}", 
            httpMethod: .DELETE, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Deletes the specified Amazon Chime Voice Connector group. Any
    /// VoiceConnectorItems
    /// and phone numbers associated with the group must be removed before it can be deleted.   This API is is no longer supported and will not be updated. We recommend using the latest version, DeleteVoiceConnectorGroup, in the Amazon Chime SDK. Using the latest version requires migrating to a dedicated namespace. For more information, refer to   Migrating from the Amazon Chime namespace in the  Amazon Chime SDK Developer Guide.
    ///
    /// Parameters:
    ///   - voiceConnectorGroupId: The Amazon Chime Voice Connector group ID.
    ///   - logger: Logger use during operation
    @available(*, deprecated, message: "Replaced by DeleteVoiceConnectorGroup in the Amazon Chime SDK Voice Namespace")
    @inlinable
    public func deleteVoiceConnectorGroup(
        voiceConnectorGroupId: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws {
        let input = DeleteVoiceConnectorGroupRequest(
            voiceConnectorGroupId: voiceConnectorGroupId
        )
        return try await self.deleteVoiceConnectorGroup(input, logger: logger)
    }

    /// Deletes the origination settings for the specified Amazon Chime Voice Connector.  If emergency calling is configured for the Amazon Chime Voice Connector, it must be deleted prior to deleting the origination settings.    This API is is no longer supported and will not be updated. We recommend using the latest version, DeleteVoiceConnectorOrigination, in the Amazon Chime SDK. Using the latest version requires migrating to a dedicated namespace. For more information, refer to   Migrating from the Amazon Chime namespace in the  Amazon Chime SDK Developer Guide.
    @available(*, deprecated, message: "Replaced by DeleteVoiceConnectorOrigination in the Amazon Chime SDK Voice Namespace")
    @Sendable
    @inlinable
    public func deleteVoiceConnectorOrigination(_ input: DeleteVoiceConnectorOriginationRequest, logger: Logger = AWSClient.loggingDisabled) async throws {
        try await self.client.execute(
            operation: "DeleteVoiceConnectorOrigination", 
            path: "/voice-connectors/{VoiceConnectorId}/origination", 
            httpMethod: .DELETE, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Deletes the origination settings for the specified Amazon Chime Voice Connector.  If emergency calling is configured for the Amazon Chime Voice Connector, it must be deleted prior to deleting the origination settings.    This API is is no longer supported and will not be updated. We recommend using the latest version, DeleteVoiceConnectorOrigination, in the Amazon Chime SDK. Using the latest version requires migrating to a dedicated namespace. For more information, refer to   Migrating from the Amazon Chime namespace in the  Amazon Chime SDK Developer Guide.
    ///
    /// Parameters:
    ///   - voiceConnectorId: The Amazon Chime Voice Connector ID.
    ///   - logger: Logger use during operation
    @available(*, deprecated, message: "Replaced by DeleteVoiceConnectorOrigination in the Amazon Chime SDK Voice Namespace")
    @inlinable
    public func deleteVoiceConnectorOrigination(
        voiceConnectorId: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws {
        let input = DeleteVoiceConnectorOriginationRequest(
            voiceConnectorId: voiceConnectorId
        )
        return try await self.deleteVoiceConnectorOrigination(input, logger: logger)
    }

    /// Deletes the proxy configuration from the specified Amazon Chime Voice Connector.   This API is is no longer supported and will not be updated. We recommend using the latest version, DeleteVoiceProxy, in the Amazon Chime SDK. Using the latest version requires migrating to a dedicated namespace. For more information, refer to   Migrating from the Amazon Chime namespace in the  Amazon Chime SDK Developer Guide.
    @available(*, deprecated, message: "Replaced by DeleteVoiceConnectorProxy in the Amazon Chime SDK Voice Namespace")
    @Sendable
    @inlinable
    public func deleteVoiceConnectorProxy(_ input: DeleteVoiceConnectorProxyRequest, logger: Logger = AWSClient.loggingDisabled) async throws {
        try await self.client.execute(
            operation: "DeleteVoiceConnectorProxy", 
            path: "/voice-connectors/{VoiceConnectorId}/programmable-numbers/proxy", 
            httpMethod: .DELETE, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Deletes the proxy configuration from the specified Amazon Chime Voice Connector.   This API is is no longer supported and will not be updated. We recommend using the latest version, DeleteVoiceProxy, in the Amazon Chime SDK. Using the latest version requires migrating to a dedicated namespace. For more information, refer to   Migrating from the Amazon Chime namespace in the  Amazon Chime SDK Developer Guide.
    ///
    /// Parameters:
    ///   - voiceConnectorId: The Amazon Chime Voice Connector ID.
    ///   - logger: Logger use during operation
    @available(*, deprecated, message: "Replaced by DeleteVoiceConnectorProxy in the Amazon Chime SDK Voice Namespace")
    @inlinable
    public func deleteVoiceConnectorProxy(
        voiceConnectorId: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws {
        let input = DeleteVoiceConnectorProxyRequest(
            voiceConnectorId: voiceConnectorId
        )
        return try await self.deleteVoiceConnectorProxy(input, logger: logger)
    }

    /// Deletes the streaming configuration for the specified Amazon Chime Voice Connector.   This API is is no longer supported and will not be updated. We recommend using the latest version, DeleteVoiceConnectorStreamingConfiguration, in the Amazon Chime SDK. Using the latest version requires migrating to a dedicated namespace. For more information, refer to   Migrating from the Amazon Chime namespace in the  Amazon Chime SDK Developer Guide.
    @available(*, deprecated, message: "Replaced by DeleteVoiceConnectorStreamingConfiguration in the Amazon Chime SDK Voice Namespace")
    @Sendable
    @inlinable
    public func deleteVoiceConnectorStreamingConfiguration(_ input: DeleteVoiceConnectorStreamingConfigurationRequest, logger: Logger = AWSClient.loggingDisabled) async throws {
        try await self.client.execute(
            operation: "DeleteVoiceConnectorStreamingConfiguration", 
            path: "/voice-connectors/{VoiceConnectorId}/streaming-configuration", 
            httpMethod: .DELETE, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Deletes the streaming configuration for the specified Amazon Chime Voice Connector.   This API is is no longer supported and will not be updated. We recommend using the latest version, DeleteVoiceConnectorStreamingConfiguration, in the Amazon Chime SDK. Using the latest version requires migrating to a dedicated namespace. For more information, refer to   Migrating from the Amazon Chime namespace in the  Amazon Chime SDK Developer Guide.
    ///
    /// Parameters:
    ///   - voiceConnectorId: The Amazon Chime Voice Connector ID.
    ///   - logger: Logger use during operation
    @available(*, deprecated, message: "Replaced by DeleteVoiceConnectorStreamingConfiguration in the Amazon Chime SDK Voice Namespace")
    @inlinable
    public func deleteVoiceConnectorStreamingConfiguration(
        voiceConnectorId: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws {
        let input = DeleteVoiceConnectorStreamingConfigurationRequest(
            voiceConnectorId: voiceConnectorId
        )
        return try await self.deleteVoiceConnectorStreamingConfiguration(input, logger: logger)
    }

    /// Deletes the termination settings for the specified Amazon Chime Voice Connector.  If emergency calling is configured for the Amazon Chime Voice Connector, it must be deleted prior to deleting the termination settings.    This API is is no longer supported and will not be updated. We recommend using the latest version, DeleteVoiceConnectorTermination, in the Amazon Chime SDK. Using the latest version requires migrating to a dedicated namespace. For more information, refer to   Migrating from the Amazon Chime namespace in the  Amazon Chime SDK Developer Guide.
    @available(*, deprecated, message: "Replaced by DeleteVoiceConnectorTermination in the Amazon Chime SDK Voice Namespace")
    @Sendable
    @inlinable
    public func deleteVoiceConnectorTermination(_ input: DeleteVoiceConnectorTerminationRequest, logger: Logger = AWSClient.loggingDisabled) async throws {
        try await self.client.execute(
            operation: "DeleteVoiceConnectorTermination", 
            path: "/voice-connectors/{VoiceConnectorId}/termination", 
            httpMethod: .DELETE, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Deletes the termination settings for the specified Amazon Chime Voice Connector.  If emergency calling is configured for the Amazon Chime Voice Connector, it must be deleted prior to deleting the termination settings.    This API is is no longer supported and will not be updated. We recommend using the latest version, DeleteVoiceConnectorTermination, in the Amazon Chime SDK. Using the latest version requires migrating to a dedicated namespace. For more information, refer to   Migrating from the Amazon Chime namespace in the  Amazon Chime SDK Developer Guide.
    ///
    /// Parameters:
    ///   - voiceConnectorId: The Amazon Chime Voice Connector ID.
    ///   - logger: Logger use during operation
    @available(*, deprecated, message: "Replaced by DeleteVoiceConnectorTermination in the Amazon Chime SDK Voice Namespace")
    @inlinable
    public func deleteVoiceConnectorTermination(
        voiceConnectorId: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws {
        let input = DeleteVoiceConnectorTerminationRequest(
            voiceConnectorId: voiceConnectorId
        )
        return try await self.deleteVoiceConnectorTermination(input, logger: logger)
    }

    /// Deletes the specified SIP credentials used by your equipment to authenticate during call termination.   This API is is no longer supported and will not be updated. We recommend using the latest version, DeleteVoiceConnectorTerminationCredentials, in the Amazon Chime SDK. Using the latest version requires migrating to a dedicated namespace. For more information, refer to   Migrating from the Amazon Chime namespace in the  Amazon Chime SDK Developer Guide.
    @available(*, deprecated, message: "Replaced by DeleteVoiceConnectorTerminationCredentials in the Amazon Chime SDK Voice Namespace")
    @Sendable
    @inlinable
    public func deleteVoiceConnectorTerminationCredentials(_ input: DeleteVoiceConnectorTerminationCredentialsRequest, logger: Logger = AWSClient.loggingDisabled) async throws {
        try await self.client.execute(
            operation: "DeleteVoiceConnectorTerminationCredentials", 
            path: "/voice-connectors/{VoiceConnectorId}/termination/credentials?operation=delete", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Deletes the specified SIP credentials used by your equipment to authenticate during call termination.   This API is is no longer supported and will not be updated. We recommend using the latest version, DeleteVoiceConnectorTerminationCredentials, in the Amazon Chime SDK. Using the latest version requires migrating to a dedicated namespace. For more information, refer to   Migrating from the Amazon Chime namespace in the  Amazon Chime SDK Developer Guide.
    ///
    /// Parameters:
    ///   - usernames: The RFC2617 compliant username associated with the SIP credentials, in US-ASCII format.
    ///   - voiceConnectorId: The Amazon Chime Voice Connector ID.
    ///   - logger: Logger use during operation
    @available(*, deprecated, message: "Replaced by DeleteVoiceConnectorTerminationCredentials in the Amazon Chime SDK Voice Namespace")
    @inlinable
    public func deleteVoiceConnectorTerminationCredentials(
        usernames: [String],
        voiceConnectorId: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws {
        let input = DeleteVoiceConnectorTerminationCredentialsRequest(
            usernames: usernames, 
            voiceConnectorId: voiceConnectorId
        )
        return try await self.deleteVoiceConnectorTerminationCredentials(input, logger: logger)
    }

    /// Returns the full details of an AppInstance.   This API is is no longer supported and will not be updated. We recommend using the latest version, DescribeAppInstance, in the Amazon Chime SDK. Using the latest version requires migrating to a dedicated namespace. For more information, refer to   Migrating from the Amazon Chime namespace in the  Amazon Chime SDK Developer Guide.
    @available(*, deprecated, message: "Replaced by DescribeAppInstance in the Amazon Chime SDK Identity Namespace")
    @Sendable
    @inlinable
    public func describeAppInstance(_ input: DescribeAppInstanceRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DescribeAppInstanceResponse {
        try await self.client.execute(
            operation: "DescribeAppInstance", 
            path: "/app-instances/{AppInstanceArn}", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            hostPrefix: "identity-", 
            logger: logger
        )
    }
    /// Returns the full details of an AppInstance.   This API is is no longer supported and will not be updated. We recommend using the latest version, DescribeAppInstance, in the Amazon Chime SDK. Using the latest version requires migrating to a dedicated namespace. For more information, refer to   Migrating from the Amazon Chime namespace in the  Amazon Chime SDK Developer Guide.
    ///
    /// Parameters:
    ///   - appInstanceArn: The ARN of the AppInstance.
    ///   - logger: Logger use during operation
    @available(*, deprecated, message: "Replaced by DescribeAppInstance in the Amazon Chime SDK Identity Namespace")
    @inlinable
    public func describeAppInstance(
        appInstanceArn: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> DescribeAppInstanceResponse {
        let input = DescribeAppInstanceRequest(
            appInstanceArn: appInstanceArn
        )
        return try await self.describeAppInstance(input, logger: logger)
    }

    /// Returns the full details of an AppInstanceAdmin.   This API is is no longer supported and will not be updated. We recommend using the latest version, DescribeAppInstanceAdmin, in the Amazon Chime SDK. Using the latest version requires migrating to a dedicated namespace. For more information, refer to   Migrating from the Amazon Chime namespace in the  Amazon Chime SDK Developer Guide.
    @available(*, deprecated, message: "Replaced by DescribeAppInstanceAdmin in the Amazon Chime SDK Identity Namespace")
    @Sendable
    @inlinable
    public func describeAppInstanceAdmin(_ input: DescribeAppInstanceAdminRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DescribeAppInstanceAdminResponse {
        try await self.client.execute(
            operation: "DescribeAppInstanceAdmin", 
            path: "/app-instances/{AppInstanceArn}/admins/{AppInstanceAdminArn}", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            hostPrefix: "identity-", 
            logger: logger
        )
    }
    /// Returns the full details of an AppInstanceAdmin.   This API is is no longer supported and will not be updated. We recommend using the latest version, DescribeAppInstanceAdmin, in the Amazon Chime SDK. Using the latest version requires migrating to a dedicated namespace. For more information, refer to   Migrating from the Amazon Chime namespace in the  Amazon Chime SDK Developer Guide.
    ///
    /// Parameters:
    ///   - appInstanceAdminArn: The ARN of the AppInstanceAdmin.
    ///   - appInstanceArn: The ARN of the AppInstance.
    ///   - logger: Logger use during operation
    @available(*, deprecated, message: "Replaced by DescribeAppInstanceAdmin in the Amazon Chime SDK Identity Namespace")
    @inlinable
    public func describeAppInstanceAdmin(
        appInstanceAdminArn: String,
        appInstanceArn: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> DescribeAppInstanceAdminResponse {
        let input = DescribeAppInstanceAdminRequest(
            appInstanceAdminArn: appInstanceAdminArn, 
            appInstanceArn: appInstanceArn
        )
        return try await self.describeAppInstanceAdmin(input, logger: logger)
    }

    /// Returns the full details of an AppInstanceUser.   This API is is no longer supported and will not be updated. We recommend using the latest version, DescribeAppInstanceUser, in the Amazon Chime SDK. Using the latest version requires migrating to a dedicated namespace. For more information, refer to   Migrating from the Amazon Chime namespace in the  Amazon Chime SDK Developer Guide.
    @available(*, deprecated, message: "Replaced by DescribeAppInstanceUser in the Amazon Chime SDK Identity Namespace")
    @Sendable
    @inlinable
    public func describeAppInstanceUser(_ input: DescribeAppInstanceUserRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DescribeAppInstanceUserResponse {
        try await self.client.execute(
            operation: "DescribeAppInstanceUser", 
            path: "/app-instance-users/{AppInstanceUserArn}", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            hostPrefix: "identity-", 
            logger: logger
        )
    }
    /// Returns the full details of an AppInstanceUser.   This API is is no longer supported and will not be updated. We recommend using the latest version, DescribeAppInstanceUser, in the Amazon Chime SDK. Using the latest version requires migrating to a dedicated namespace. For more information, refer to   Migrating from the Amazon Chime namespace in the  Amazon Chime SDK Developer Guide.
    ///
    /// Parameters:
    ///   - appInstanceUserArn: The ARN of the AppInstanceUser.
    ///   - logger: Logger use during operation
    @available(*, deprecated, message: "Replaced by DescribeAppInstanceUser in the Amazon Chime SDK Identity Namespace")
    @inlinable
    public func describeAppInstanceUser(
        appInstanceUserArn: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> DescribeAppInstanceUserResponse {
        let input = DescribeAppInstanceUserRequest(
            appInstanceUserArn: appInstanceUserArn
        )
        return try await self.describeAppInstanceUser(input, logger: logger)
    }

    /// Returns the full details of a channel in an Amazon Chime AppInstance.  The x-amz-chime-bearer request header is mandatory. Use the AppInstanceUserArn of the user that makes the API call as the value in the header.    This API is is no longer supported and will not be updated. We recommend using the latest version, DescribeChannel, in the Amazon Chime SDK. Using the latest version requires migrating to a dedicated namespace. For more information, refer to   Migrating from the Amazon Chime namespace in the  Amazon Chime SDK Developer Guide.
    @available(*, deprecated, message: "Replaced by DescribeChannel in the Amazon Chime SDK Messaging Namespace")
    @Sendable
    @inlinable
    public func describeChannel(_ input: DescribeChannelRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DescribeChannelResponse {
        try await self.client.execute(
            operation: "DescribeChannel", 
            path: "/channels/{ChannelArn}", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            hostPrefix: "messaging-", 
            logger: logger
        )
    }
    /// Returns the full details of a channel in an Amazon Chime AppInstance.  The x-amz-chime-bearer request header is mandatory. Use the AppInstanceUserArn of the user that makes the API call as the value in the header.    This API is is no longer supported and will not be updated. We recommend using the latest version, DescribeChannel, in the Amazon Chime SDK. Using the latest version requires migrating to a dedicated namespace. For more information, refer to   Migrating from the Amazon Chime namespace in the  Amazon Chime SDK Developer Guide.
    ///
    /// Parameters:
    ///   - channelArn: The ARN of the channel.
    ///   - chimeBearer: The AppInstanceUserArn of the user that makes the API call.
    ///   - logger: Logger use during operation
    @available(*, deprecated, message: "Replaced by DescribeChannel in the Amazon Chime SDK Messaging Namespace")
    @inlinable
    public func describeChannel(
        channelArn: String,
        chimeBearer: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> DescribeChannelResponse {
        let input = DescribeChannelRequest(
            channelArn: channelArn, 
            chimeBearer: chimeBearer
        )
        return try await self.describeChannel(input, logger: logger)
    }

    /// Returns the full details of a channel ban.  The x-amz-chime-bearer request header is mandatory. Use the AppInstanceUserArn of the user that makes the API call as the value in the header.    This API is is no longer supported and will not be updated. We recommend using the latest version, DescribeChannelBan, in the Amazon Chime SDK. Using the latest version requires migrating to a dedicated namespace. For more information, refer to   Migrating from the Amazon Chime namespace in the  Amazon Chime SDK Developer Guide.
    @available(*, deprecated, message: "Replaced by DescribeChannelBan in the Amazon Chime SDK Messaging Namespace")
    @Sendable
    @inlinable
    public func describeChannelBan(_ input: DescribeChannelBanRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DescribeChannelBanResponse {
        try await self.client.execute(
            operation: "DescribeChannelBan", 
            path: "/channels/{ChannelArn}/bans/{MemberArn}", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            hostPrefix: "messaging-", 
            logger: logger
        )
    }
    /// Returns the full details of a channel ban.  The x-amz-chime-bearer request header is mandatory. Use the AppInstanceUserArn of the user that makes the API call as the value in the header.    This API is is no longer supported and will not be updated. We recommend using the latest version, DescribeChannelBan, in the Amazon Chime SDK. Using the latest version requires migrating to a dedicated namespace. For more information, refer to   Migrating from the Amazon Chime namespace in the  Amazon Chime SDK Developer Guide.
    ///
    /// Parameters:
    ///   - channelArn: The ARN of the channel from which the user is banned.
    ///   - chimeBearer: The AppInstanceUserArn of the user that makes the API call.
    ///   - memberArn: The ARN of the member being banned.
    ///   - logger: Logger use during operation
    @available(*, deprecated, message: "Replaced by DescribeChannelBan in the Amazon Chime SDK Messaging Namespace")
    @inlinable
    public func describeChannelBan(
        channelArn: String,
        chimeBearer: String? = nil,
        memberArn: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> DescribeChannelBanResponse {
        let input = DescribeChannelBanRequest(
            channelArn: channelArn, 
            chimeBearer: chimeBearer, 
            memberArn: memberArn
        )
        return try await self.describeChannelBan(input, logger: logger)
    }

    /// Returns the full details of a user's channel membership.  The x-amz-chime-bearer request header is mandatory. Use the AppInstanceUserArn of the user that makes the API call as the value in the header.    This API is is no longer supported and will not be updated. We recommend using the latest version, DescribeChannelMembership, in the Amazon Chime SDK. Using the latest version requires migrating to a dedicated namespace. For more information, refer to   Migrating from the Amazon Chime namespace in the  Amazon Chime SDK Developer Guide.
    @available(*, deprecated, message: "Replaced by DescribeChannelMembership in the Amazon Chime SDK Messaging Namespace")
    @Sendable
    @inlinable
    public func describeChannelMembership(_ input: DescribeChannelMembershipRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DescribeChannelMembershipResponse {
        try await self.client.execute(
            operation: "DescribeChannelMembership", 
            path: "/channels/{ChannelArn}/memberships/{MemberArn}", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            hostPrefix: "messaging-", 
            logger: logger
        )
    }
    /// Returns the full details of a user's channel membership.  The x-amz-chime-bearer request header is mandatory. Use the AppInstanceUserArn of the user that makes the API call as the value in the header.    This API is is no longer supported and will not be updated. We recommend using the latest version, DescribeChannelMembership, in the Amazon Chime SDK. Using the latest version requires migrating to a dedicated namespace. For more information, refer to   Migrating from the Amazon Chime namespace in the  Amazon Chime SDK Developer Guide.
    ///
    /// Parameters:
    ///   - channelArn: The ARN of the channel.
    ///   - chimeBearer: The AppInstanceUserArn of the user that makes the API call.
    ///   - memberArn: The ARN of the member.
    ///   - logger: Logger use during operation
    @available(*, deprecated, message: "Replaced by DescribeChannelMembership in the Amazon Chime SDK Messaging Namespace")
    @inlinable
    public func describeChannelMembership(
        channelArn: String,
        chimeBearer: String? = nil,
        memberArn: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> DescribeChannelMembershipResponse {
        let input = DescribeChannelMembershipRequest(
            channelArn: channelArn, 
            chimeBearer: chimeBearer, 
            memberArn: memberArn
        )
        return try await self.describeChannelMembership(input, logger: logger)
    }

    ///  Returns the details of a channel based on the membership of the specified AppInstanceUser.  The x-amz-chime-bearer request header is mandatory. Use the AppInstanceUserArn of the user that makes the API call as the value in the header.    This API is is no longer supported and will not be updated. We recommend using the latest version, DescribeChannelMembershipForAppInstanceUser, in the Amazon Chime SDK. Using the latest version requires migrating to a dedicated namespace. For more information, refer to   Migrating from the Amazon Chime namespace in the  Amazon Chime SDK Developer Guide.
    @available(*, deprecated, message: "Replaced by DescribeChannelMembershipForAppInstanceUser in the Amazon Chime SDK Messaging Namespace")
    @Sendable
    @inlinable
    public func describeChannelMembershipForAppInstanceUser(_ input: DescribeChannelMembershipForAppInstanceUserRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DescribeChannelMembershipForAppInstanceUserResponse {
        try await self.client.execute(
            operation: "DescribeChannelMembershipForAppInstanceUser", 
            path: "/channels/{ChannelArn}?scope=app-instance-user-membership", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            hostPrefix: "messaging-", 
            logger: logger
        )
    }
    ///  Returns the details of a channel based on the membership of the specified AppInstanceUser.  The x-amz-chime-bearer request header is mandatory. Use the AppInstanceUserArn of the user that makes the API call as the value in the header.    This API is is no longer supported and will not be updated. We recommend using the latest version, DescribeChannelMembershipForAppInstanceUser, in the Amazon Chime SDK. Using the latest version requires migrating to a dedicated namespace. For more information, refer to   Migrating from the Amazon Chime namespace in the  Amazon Chime SDK Developer Guide.
    ///
    /// Parameters:
    ///   - appInstanceUserArn: The ARN of the user in a channel.
    ///   - channelArn: The ARN of the channel to which the user belongs.
    ///   - chimeBearer: The AppInstanceUserArn of the user that makes the API call.
    ///   - logger: Logger use during operation
    @available(*, deprecated, message: "Replaced by DescribeChannelMembershipForAppInstanceUser in the Amazon Chime SDK Messaging Namespace")
    @inlinable
    public func describeChannelMembershipForAppInstanceUser(
        appInstanceUserArn: String,
        channelArn: String,
        chimeBearer: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> DescribeChannelMembershipForAppInstanceUserResponse {
        let input = DescribeChannelMembershipForAppInstanceUserRequest(
            appInstanceUserArn: appInstanceUserArn, 
            channelArn: channelArn, 
            chimeBearer: chimeBearer
        )
        return try await self.describeChannelMembershipForAppInstanceUser(input, logger: logger)
    }

    /// Returns the full details of a channel moderated by the specified AppInstanceUser.  The x-amz-chime-bearer request header is mandatory. Use the AppInstanceUserArn of the user that makes the API call as the value in the header.    This API is is no longer supported and will not be updated. We recommend using the latest version, DescribeChannelModeratedByAppInstanceUser, in the Amazon Chime SDK. Using the latest version requires migrating to a dedicated namespace. For more information, refer to   Migrating from the Amazon Chime namespace in the  Amazon Chime SDK Developer Guide.
    @available(*, deprecated, message: "Replaced by DescribeChannelModeratedByAppInstanceUser in the Amazon Chime SDK Messaging Namespace")
    @Sendable
    @inlinable
    public func describeChannelModeratedByAppInstanceUser(_ input: DescribeChannelModeratedByAppInstanceUserRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DescribeChannelModeratedByAppInstanceUserResponse {
        try await self.client.execute(
            operation: "DescribeChannelModeratedByAppInstanceUser", 
            path: "/channels/{ChannelArn}?scope=app-instance-user-moderated-channel", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            hostPrefix: "messaging-", 
            logger: logger
        )
    }
    /// Returns the full details of a channel moderated by the specified AppInstanceUser.  The x-amz-chime-bearer request header is mandatory. Use the AppInstanceUserArn of the user that makes the API call as the value in the header.    This API is is no longer supported and will not be updated. We recommend using the latest version, DescribeChannelModeratedByAppInstanceUser, in the Amazon Chime SDK. Using the latest version requires migrating to a dedicated namespace. For more information, refer to   Migrating from the Amazon Chime namespace in the  Amazon Chime SDK Developer Guide.
    ///
    /// Parameters:
    ///   - appInstanceUserArn: The ARN of the AppInstanceUser in the moderated channel.
    ///   - channelArn: The ARN of the moderated channel.
    ///   - chimeBearer: The AppInstanceUserArn of the user that makes the API call.
    ///   - logger: Logger use during operation
    @available(*, deprecated, message: "Replaced by DescribeChannelModeratedByAppInstanceUser in the Amazon Chime SDK Messaging Namespace")
    @inlinable
    public func describeChannelModeratedByAppInstanceUser(
        appInstanceUserArn: String,
        channelArn: String,
        chimeBearer: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> DescribeChannelModeratedByAppInstanceUserResponse {
        let input = DescribeChannelModeratedByAppInstanceUserRequest(
            appInstanceUserArn: appInstanceUserArn, 
            channelArn: channelArn, 
            chimeBearer: chimeBearer
        )
        return try await self.describeChannelModeratedByAppInstanceUser(input, logger: logger)
    }

    /// Returns the full details of a single ChannelModerator.  The x-amz-chime-bearer request header is mandatory. Use the AppInstanceUserArn of the user that makes the API call as the value in the header.    This API is is no longer supported and will not be updated. We recommend using the latest version, DescribeChannelModerator, in the Amazon Chime SDK. Using the latest version requires migrating to a dedicated namespace. For more information, refer to   Migrating from the Amazon Chime namespace in the  Amazon Chime SDK Developer Guide.
    @available(*, deprecated, message: "Replaced by DescribeChannelModerator in the Amazon Chime SDK Messaging Namespace")
    @Sendable
    @inlinable
    public func describeChannelModerator(_ input: DescribeChannelModeratorRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DescribeChannelModeratorResponse {
        try await self.client.execute(
            operation: "DescribeChannelModerator", 
            path: "/channels/{ChannelArn}/moderators/{ChannelModeratorArn}", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            hostPrefix: "messaging-", 
            logger: logger
        )
    }
    /// Returns the full details of a single ChannelModerator.  The x-amz-chime-bearer request header is mandatory. Use the AppInstanceUserArn of the user that makes the API call as the value in the header.    This API is is no longer supported and will not be updated. We recommend using the latest version, DescribeChannelModerator, in the Amazon Chime SDK. Using the latest version requires migrating to a dedicated namespace. For more information, refer to   Migrating from the Amazon Chime namespace in the  Amazon Chime SDK Developer Guide.
    ///
    /// Parameters:
    ///   - channelArn: The ARN of the channel.
    ///   - channelModeratorArn: The ARN of the channel moderator.
    ///   - chimeBearer: The AppInstanceUserArn of the user that makes the API call.
    ///   - logger: Logger use during operation
    @available(*, deprecated, message: "Replaced by DescribeChannelModerator in the Amazon Chime SDK Messaging Namespace")
    @inlinable
    public func describeChannelModerator(
        channelArn: String,
        channelModeratorArn: String,
        chimeBearer: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> DescribeChannelModeratorResponse {
        let input = DescribeChannelModeratorRequest(
            channelArn: channelArn, 
            channelModeratorArn: channelModeratorArn, 
            chimeBearer: chimeBearer
        )
        return try await self.describeChannelModerator(input, logger: logger)
    }

    /// Disassociates the primary provisioned phone number from the specified Amazon Chime user.
    @Sendable
    @inlinable
    public func disassociatePhoneNumberFromUser(_ input: DisassociatePhoneNumberFromUserRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DisassociatePhoneNumberFromUserResponse {
        try await self.client.execute(
            operation: "DisassociatePhoneNumberFromUser", 
            path: "/accounts/{AccountId}/users/{UserId}?operation=disassociate-phone-number", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Disassociates the primary provisioned phone number from the specified Amazon Chime user.
    ///
    /// Parameters:
    ///   - accountId: The Amazon Chime account ID.
    ///   - userId: The user ID.
    ///   - logger: Logger use during operation
    @inlinable
    public func disassociatePhoneNumberFromUser(
        accountId: String,
        userId: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> DisassociatePhoneNumberFromUserResponse {
        let input = DisassociatePhoneNumberFromUserRequest(
            accountId: accountId, 
            userId: userId
        )
        return try await self.disassociatePhoneNumberFromUser(input, logger: logger)
    }

    /// Disassociates the specified phone numbers from the specified Amazon Chime Voice Connector.   This API is is no longer supported and will not be updated. We recommend using the latest version, DisassociatePhoneNumbersFromVoiceConnector, in the Amazon Chime SDK. Using the latest version requires migrating to a dedicated namespace. For more information, refer to   Migrating from the Amazon Chime namespace in the  Amazon Chime SDK Developer Guide.
    @available(*, deprecated, message: "Replaced by DisassociatePhoneNumbersFromVoiceConnector in the Amazon Chime SDK Voice Namespace")
    @Sendable
    @inlinable
    public func disassociatePhoneNumbersFromVoiceConnector(_ input: DisassociatePhoneNumbersFromVoiceConnectorRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DisassociatePhoneNumbersFromVoiceConnectorResponse {
        try await self.client.execute(
            operation: "DisassociatePhoneNumbersFromVoiceConnector", 
            path: "/voice-connectors/{VoiceConnectorId}?operation=disassociate-phone-numbers", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Disassociates the specified phone numbers from the specified Amazon Chime Voice Connector.   This API is is no longer supported and will not be updated. We recommend using the latest version, DisassociatePhoneNumbersFromVoiceConnector, in the Amazon Chime SDK. Using the latest version requires migrating to a dedicated namespace. For more information, refer to   Migrating from the Amazon Chime namespace in the  Amazon Chime SDK Developer Guide.
    ///
    /// Parameters:
    ///   - e164PhoneNumbers: List of phone numbers, in E.164 format.
    ///   - voiceConnectorId: The Amazon Chime Voice Connector ID.
    ///   - logger: Logger use during operation
    @available(*, deprecated, message: "Replaced by DisassociatePhoneNumbersFromVoiceConnector in the Amazon Chime SDK Voice Namespace")
    @inlinable
    public func disassociatePhoneNumbersFromVoiceConnector(
        e164PhoneNumbers: [String],
        voiceConnectorId: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> DisassociatePhoneNumbersFromVoiceConnectorResponse {
        let input = DisassociatePhoneNumbersFromVoiceConnectorRequest(
            e164PhoneNumbers: e164PhoneNumbers, 
            voiceConnectorId: voiceConnectorId
        )
        return try await self.disassociatePhoneNumbersFromVoiceConnector(input, logger: logger)
    }

    /// Disassociates the specified phone numbers from the specified Amazon Chime Voice Connector group.   This API is is no longer supported and will not be updated. We recommend using the latest version, DisassociatePhoneNumbersFromVoiceConnectorGroup, in the Amazon Chime SDK. Using the latest version requires migrating to a dedicated namespace. For more information, refer to   Migrating from the Amazon Chime namespace in the  Amazon Chime SDK Developer Guide.
    @available(*, deprecated, message: "Replaced by DisassociatePhoneNumbersFromVoiceConnectorGroup in the Amazon Chime SDK Voice Namespace")
    @Sendable
    @inlinable
    public func disassociatePhoneNumbersFromVoiceConnectorGroup(_ input: DisassociatePhoneNumbersFromVoiceConnectorGroupRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DisassociatePhoneNumbersFromVoiceConnectorGroupResponse {
        try await self.client.execute(
            operation: "DisassociatePhoneNumbersFromVoiceConnectorGroup", 
            path: "/voice-connector-groups/{VoiceConnectorGroupId}?operation=disassociate-phone-numbers", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Disassociates the specified phone numbers from the specified Amazon Chime Voice Connector group.   This API is is no longer supported and will not be updated. We recommend using the latest version, DisassociatePhoneNumbersFromVoiceConnectorGroup, in the Amazon Chime SDK. Using the latest version requires migrating to a dedicated namespace. For more information, refer to   Migrating from the Amazon Chime namespace in the  Amazon Chime SDK Developer Guide.
    ///
    /// Parameters:
    ///   - e164PhoneNumbers: List of phone numbers, in E.164 format.
    ///   - voiceConnectorGroupId: The Amazon Chime Voice Connector group ID.
    ///   - logger: Logger use during operation
    @available(*, deprecated, message: "Replaced by DisassociatePhoneNumbersFromVoiceConnectorGroup in the Amazon Chime SDK Voice Namespace")
    @inlinable
    public func disassociatePhoneNumbersFromVoiceConnectorGroup(
        e164PhoneNumbers: [String],
        voiceConnectorGroupId: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> DisassociatePhoneNumbersFromVoiceConnectorGroupResponse {
        let input = DisassociatePhoneNumbersFromVoiceConnectorGroupRequest(
            e164PhoneNumbers: e164PhoneNumbers, 
            voiceConnectorGroupId: voiceConnectorGroupId
        )
        return try await self.disassociatePhoneNumbersFromVoiceConnectorGroup(input, logger: logger)
    }

    /// Disassociates the specified sign-in delegate groups from the specified Amazon Chime account.
    @Sendable
    @inlinable
    public func disassociateSigninDelegateGroupsFromAccount(_ input: DisassociateSigninDelegateGroupsFromAccountRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DisassociateSigninDelegateGroupsFromAccountResponse {
        try await self.client.execute(
            operation: "DisassociateSigninDelegateGroupsFromAccount", 
            path: "/accounts/{AccountId}?operation=disassociate-signin-delegate-groups", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Disassociates the specified sign-in delegate groups from the specified Amazon Chime account.
    ///
    /// Parameters:
    ///   - accountId: The Amazon Chime account ID.
    ///   - groupNames: The sign-in delegate group names.
    ///   - logger: Logger use during operation
    @inlinable
    public func disassociateSigninDelegateGroupsFromAccount(
        accountId: String,
        groupNames: [String],
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> DisassociateSigninDelegateGroupsFromAccountResponse {
        let input = DisassociateSigninDelegateGroupsFromAccountRequest(
            accountId: accountId, 
            groupNames: groupNames
        )
        return try await self.disassociateSigninDelegateGroupsFromAccount(input, logger: logger)
    }

    /// Retrieves details for the specified Amazon Chime account, such as account type and supported licenses.
    @Sendable
    @inlinable
    public func getAccount(_ input: GetAccountRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> GetAccountResponse {
        try await self.client.execute(
            operation: "GetAccount", 
            path: "/accounts/{AccountId}", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Retrieves details for the specified Amazon Chime account, such as account type and supported licenses.
    ///
    /// Parameters:
    ///   - accountId: The Amazon Chime account ID.
    ///   - logger: Logger use during operation
    @inlinable
    public func getAccount(
        accountId: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> GetAccountResponse {
        let input = GetAccountRequest(
            accountId: accountId
        )
        return try await self.getAccount(input, logger: logger)
    }

    /// Retrieves account settings for the specified Amazon Chime account ID, such as remote control and dialout settings. For more information about these settings, see  Use the Policies Page in the Amazon Chime Administration Guide.
    @Sendable
    @inlinable
    public func getAccountSettings(_ input: GetAccountSettingsRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> GetAccountSettingsResponse {
        try await self.client.execute(
            operation: "GetAccountSettings", 
            path: "/accounts/{AccountId}/settings", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Retrieves account settings for the specified Amazon Chime account ID, such as remote control and dialout settings. For more information about these settings, see  Use the Policies Page in the Amazon Chime Administration Guide.
    ///
    /// Parameters:
    ///   - accountId: The Amazon Chime account ID.
    ///   - logger: Logger use during operation
    @inlinable
    public func getAccountSettings(
        accountId: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> GetAccountSettingsResponse {
        let input = GetAccountSettingsRequest(
            accountId: accountId
        )
        return try await self.getAccountSettings(input, logger: logger)
    }

    /// Gets the retention settings for an AppInstance.   This API is is no longer supported and will not be updated. We recommend using the latest version, GetMessagingRetentionSettings, in the Amazon Chime SDK. Using the latest version requires migrating to a dedicated namespace. For more information, refer to   Migrating from the Amazon Chime namespace in the  Amazon Chime SDK Developer Guide.
    @available(*, deprecated, message: "Replaced by GetAppInstanceRetentionSettings in the Amazon Chime SDK Identity Namespace")
    @Sendable
    @inlinable
    public func getAppInstanceRetentionSettings(_ input: GetAppInstanceRetentionSettingsRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> GetAppInstanceRetentionSettingsResponse {
        try await self.client.execute(
            operation: "GetAppInstanceRetentionSettings", 
            path: "/app-instances/{AppInstanceArn}/retention-settings", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            hostPrefix: "identity-", 
            logger: logger
        )
    }
    /// Gets the retention settings for an AppInstance.   This API is is no longer supported and will not be updated. We recommend using the latest version, GetMessagingRetentionSettings, in the Amazon Chime SDK. Using the latest version requires migrating to a dedicated namespace. For more information, refer to   Migrating from the Amazon Chime namespace in the  Amazon Chime SDK Developer Guide.
    ///
    /// Parameters:
    ///   - appInstanceArn: The ARN of the AppInstance.
    ///   - logger: Logger use during operation
    @available(*, deprecated, message: "Replaced by GetAppInstanceRetentionSettings in the Amazon Chime SDK Identity Namespace")
    @inlinable
    public func getAppInstanceRetentionSettings(
        appInstanceArn: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> GetAppInstanceRetentionSettingsResponse {
        let input = GetAppInstanceRetentionSettingsRequest(
            appInstanceArn: appInstanceArn
        )
        return try await self.getAppInstanceRetentionSettings(input, logger: logger)
    }

    /// Gets the streaming settings for an AppInstance.   This API is is no longer supported and will not be updated. We recommend using the latest version, GetMessagingStreamingConfigurations, in the Amazon Chime SDK. Using the latest version requires migrating to a dedicated namespace. For more information, refer to   Migrating from the Amazon Chime namespace in the  Amazon Chime SDK Developer Guide.
    @available(*, deprecated, message: "Replaced by GetAppInstanceStreamingConfigurations in the Amazon Chime SDK Messaging Namespace")
    @Sendable
    @inlinable
    public func getAppInstanceStreamingConfigurations(_ input: GetAppInstanceStreamingConfigurationsRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> GetAppInstanceStreamingConfigurationsResponse {
        try await self.client.execute(
            operation: "GetAppInstanceStreamingConfigurations", 
            path: "/app-instances/{AppInstanceArn}/streaming-configurations", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Gets the streaming settings for an AppInstance.   This API is is no longer supported and will not be updated. We recommend using the latest version, GetMessagingStreamingConfigurations, in the Amazon Chime SDK. Using the latest version requires migrating to a dedicated namespace. For more information, refer to   Migrating from the Amazon Chime namespace in the  Amazon Chime SDK Developer Guide.
    ///
    /// Parameters:
    ///   - appInstanceArn: The ARN of the AppInstance.
    ///   - logger: Logger use during operation
    @available(*, deprecated, message: "Replaced by GetAppInstanceStreamingConfigurations in the Amazon Chime SDK Messaging Namespace")
    @inlinable
    public func getAppInstanceStreamingConfigurations(
        appInstanceArn: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> GetAppInstanceStreamingConfigurationsResponse {
        let input = GetAppInstanceStreamingConfigurationsRequest(
            appInstanceArn: appInstanceArn
        )
        return try await self.getAppInstanceStreamingConfigurations(input, logger: logger)
    }

    /// Gets the Amazon Chime SDK attendee details for a specified meeting ID and attendee ID. For more information about the Amazon Chime SDK, see
    /// Using the Amazon Chime SDK
    /// in the Amazon Chime SDK Developer Guide.
    ///    This API is is no longer supported and will not be updated. We recommend using the latest version, GetAttendee, in the Amazon Chime SDK. Using the latest version requires migrating to a dedicated namespace. For more information, refer to   Migrating from the Amazon Chime namespace in the  Amazon Chime SDK Developer Guide.
    @available(*, deprecated, message: "Replaced by GetAttendee in the Amazon Chime SDK Meetings Namespace")
    @Sendable
    @inlinable
    public func getAttendee(_ input: GetAttendeeRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> GetAttendeeResponse {
        try await self.client.execute(
            operation: "GetAttendee", 
            path: "/meetings/{MeetingId}/attendees/{AttendeeId}", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Gets the Amazon Chime SDK attendee details for a specified meeting ID and attendee ID. For more information about the Amazon Chime SDK, see
    /// Using the Amazon Chime SDK
    /// in the Amazon Chime SDK Developer Guide.
    ///    This API is is no longer supported and will not be updated. We recommend using the latest version, GetAttendee, in the Amazon Chime SDK. Using the latest version requires migrating to a dedicated namespace. For more information, refer to   Migrating from the Amazon Chime namespace in the  Amazon Chime SDK Developer Guide.
    ///
    /// Parameters:
    ///   - attendeeId: The Amazon Chime SDK attendee ID.
    ///   - meetingId: The Amazon Chime SDK meeting ID.
    ///   - logger: Logger use during operation
    @available(*, deprecated, message: "Replaced by GetAttendee in the Amazon Chime SDK Meetings Namespace")
    @inlinable
    public func getAttendee(
        attendeeId: String,
        meetingId: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> GetAttendeeResponse {
        let input = GetAttendeeRequest(
            attendeeId: attendeeId, 
            meetingId: meetingId
        )
        return try await self.getAttendee(input, logger: logger)
    }

    /// Retrieves details for the specified bot, such as bot email address, bot type, status, and display name.
    @Sendable
    @inlinable
    public func getBot(_ input: GetBotRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> GetBotResponse {
        try await self.client.execute(
            operation: "GetBot", 
            path: "/accounts/{AccountId}/bots/{BotId}", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Retrieves details for the specified bot, such as bot email address, bot type, status, and display name.
    ///
    /// Parameters:
    ///   - accountId: The Amazon Chime account ID.
    ///   - botId: The bot ID.
    ///   - logger: Logger use during operation
    @inlinable
    public func getBot(
        accountId: String,
        botId: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> GetBotResponse {
        let input = GetBotRequest(
            accountId: accountId, 
            botId: botId
        )
        return try await self.getBot(input, logger: logger)
    }

    /// Gets the full details of a channel message.  The x-amz-chime-bearer request header is mandatory. Use the AppInstanceUserArn of the user that makes the API call as the value in the header.    This API is is no longer supported and will not be updated. We recommend using the latest version, GetChannelMessage, in the Amazon Chime SDK. Using the latest version requires migrating to a dedicated namespace. For more information, refer to   Migrating from the Amazon Chime namespace in the  Amazon Chime SDK Developer Guide.
    @available(*, deprecated, message: "Replaced by GetChannelMessage in the Amazon Chime SDK Messaging Namespace")
    @Sendable
    @inlinable
    public func getChannelMessage(_ input: GetChannelMessageRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> GetChannelMessageResponse {
        try await self.client.execute(
            operation: "GetChannelMessage", 
            path: "/channels/{ChannelArn}/messages/{MessageId}", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            hostPrefix: "messaging-", 
            logger: logger
        )
    }
    /// Gets the full details of a channel message.  The x-amz-chime-bearer request header is mandatory. Use the AppInstanceUserArn of the user that makes the API call as the value in the header.    This API is is no longer supported and will not be updated. We recommend using the latest version, GetChannelMessage, in the Amazon Chime SDK. Using the latest version requires migrating to a dedicated namespace. For more information, refer to   Migrating from the Amazon Chime namespace in the  Amazon Chime SDK Developer Guide.
    ///
    /// Parameters:
    ///   - channelArn: The ARN of the channel.
    ///   - chimeBearer: The AppInstanceUserArn of the user that makes the API call.
    ///   - messageId: The ID of the message.
    ///   - logger: Logger use during operation
    @available(*, deprecated, message: "Replaced by GetChannelMessage in the Amazon Chime SDK Messaging Namespace")
    @inlinable
    public func getChannelMessage(
        channelArn: String,
        chimeBearer: String? = nil,
        messageId: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> GetChannelMessageResponse {
        let input = GetChannelMessageRequest(
            channelArn: channelArn, 
            chimeBearer: chimeBearer, 
            messageId: messageId
        )
        return try await self.getChannelMessage(input, logger: logger)
    }

    /// Gets details for an events configuration that allows a bot to receive outgoing events, such as an HTTPS endpoint or Lambda function ARN.
    @Sendable
    @inlinable
    public func getEventsConfiguration(_ input: GetEventsConfigurationRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> GetEventsConfigurationResponse {
        try await self.client.execute(
            operation: "GetEventsConfiguration", 
            path: "/accounts/{AccountId}/bots/{BotId}/events-configuration", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Gets details for an events configuration that allows a bot to receive outgoing events, such as an HTTPS endpoint or Lambda function ARN.
    ///
    /// Parameters:
    ///   - accountId: The Amazon Chime account ID.
    ///   - botId: The bot ID.
    ///   - logger: Logger use during operation
    @inlinable
    public func getEventsConfiguration(
        accountId: String,
        botId: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> GetEventsConfigurationResponse {
        let input = GetEventsConfigurationRequest(
            accountId: accountId, 
            botId: botId
        )
        return try await self.getEventsConfiguration(input, logger: logger)
    }

    /// Retrieves global settings for the administrator's AWS account, such as Amazon Chime Business Calling and Amazon Chime Voice Connector settings.
    @Sendable
    @inlinable
    public func getGlobalSettings(logger: Logger = AWSClient.loggingDisabled) async throws -> GetGlobalSettingsResponse {
        try await self.client.execute(
            operation: "GetGlobalSettings", 
            path: "/settings", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            logger: logger
        )
    }

    /// Gets an existing media capture pipeline.   This API is is no longer supported and will not be updated. We recommend using the latest version,  GetMediaCapturePipeline, in the Amazon Chime SDK. Using the latest version requires migrating to a dedicated namespace. For more information, refer to   Migrating from the Amazon Chime namespace in the  Amazon Chime SDK Developer Guide.
    @available(*, deprecated, message: "Replaced by GetMediaCapturePipeline in the Amazon Chime SDK Media Pipelines Namespace")
    @Sendable
    @inlinable
    public func getMediaCapturePipeline(_ input: GetMediaCapturePipelineRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> GetMediaCapturePipelineResponse {
        try await self.client.execute(
            operation: "GetMediaCapturePipeline", 
            path: "/media-capture-pipelines/{MediaPipelineId}", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Gets an existing media capture pipeline.   This API is is no longer supported and will not be updated. We recommend using the latest version,  GetMediaCapturePipeline, in the Amazon Chime SDK. Using the latest version requires migrating to a dedicated namespace. For more information, refer to   Migrating from the Amazon Chime namespace in the  Amazon Chime SDK Developer Guide.
    ///
    /// Parameters:
    ///   - mediaPipelineId: The ID of the pipeline that you want to get.
    ///   - logger: Logger use during operation
    @available(*, deprecated, message: "Replaced by GetMediaCapturePipeline in the Amazon Chime SDK Media Pipelines Namespace")
    @inlinable
    public func getMediaCapturePipeline(
        mediaPipelineId: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> GetMediaCapturePipelineResponse {
        let input = GetMediaCapturePipelineRequest(
            mediaPipelineId: mediaPipelineId
        )
        return try await self.getMediaCapturePipeline(input, logger: logger)
    }

    ///   This API is is no longer supported and will not be updated. We recommend using the latest version, GetMeeting, in the Amazon Chime SDK. Using the latest version requires migrating to a dedicated namespace. For more information, refer to   Migrating from the Amazon Chime namespace in the  Amazon Chime SDK Developer Guide.
    /// Gets the Amazon Chime SDK meeting details for the specified meeting ID. For more information about the Amazon Chime SDK, see
    /// Using the Amazon Chime SDK
    /// in the
    /// Amazon Chime SDK Developer Guide
    /// .
    @available(*, deprecated, message: "Replaced by GetMeeting in the Amazon Chime SDK Meetings Namespace")
    @Sendable
    @inlinable
    public func getMeeting(_ input: GetMeetingRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> GetMeetingResponse {
        try await self.client.execute(
            operation: "GetMeeting", 
            path: "/meetings/{MeetingId}", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    ///   This API is is no longer supported and will not be updated. We recommend using the latest version, GetMeeting, in the Amazon Chime SDK. Using the latest version requires migrating to a dedicated namespace. For more information, refer to   Migrating from the Amazon Chime namespace in the  Amazon Chime SDK Developer Guide.
    /// Gets the Amazon Chime SDK meeting details for the specified meeting ID. For more information about the Amazon Chime SDK, see
    /// Using the Amazon Chime SDK
    /// in the
    /// Amazon Chime SDK Developer Guide
    /// .
    ///
    /// Parameters:
    ///   - meetingId: The Amazon Chime SDK meeting ID.
    ///   - logger: Logger use during operation
    @available(*, deprecated, message: "Replaced by GetMeeting in the Amazon Chime SDK Meetings Namespace")
    @inlinable
    public func getMeeting(
        meetingId: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> GetMeetingResponse {
        let input = GetMeetingRequest(
            meetingId: meetingId
        )
        return try await self.getMeeting(input, logger: logger)
    }

    /// The details of the endpoint for the messaging session.   This API is is no longer supported and will not be updated. We recommend using the latest version, GetMessagingSessionEndpoint, in the Amazon Chime SDK. Using the latest version requires migrating to a dedicated namespace. For more information, refer to   Migrating from the Amazon Chime namespace in the  Amazon Chime SDK Developer Guide.
    @available(*, deprecated, message: "Replaced by GetMessagingSessionEndpoint in the Amazon Chime SDK Messaging Namespace")
    @Sendable
    @inlinable
    public func getMessagingSessionEndpoint(_ input: GetMessagingSessionEndpointRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> GetMessagingSessionEndpointResponse {
        try await self.client.execute(
            operation: "GetMessagingSessionEndpoint", 
            path: "/endpoints/messaging-session", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            hostPrefix: "messaging-", 
            logger: logger
        )
    }
    /// The details of the endpoint for the messaging session.   This API is is no longer supported and will not be updated. We recommend using the latest version, GetMessagingSessionEndpoint, in the Amazon Chime SDK. Using the latest version requires migrating to a dedicated namespace. For more information, refer to   Migrating from the Amazon Chime namespace in the  Amazon Chime SDK Developer Guide.
    ///
    /// Parameters:
    ///   - logger: Logger use during operation
    @available(*, deprecated, message: "Replaced by GetMessagingSessionEndpoint in the Amazon Chime SDK Messaging Namespace")
    @inlinable
    public func getMessagingSessionEndpoint(
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> GetMessagingSessionEndpointResponse {
        let input = GetMessagingSessionEndpointRequest(
        )
        return try await self.getMessagingSessionEndpoint(input, logger: logger)
    }

    /// Retrieves details for the specified phone number ID, such as associations, capabilities, and product type.
    @Sendable
    @inlinable
    public func getPhoneNumber(_ input: GetPhoneNumberRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> GetPhoneNumberResponse {
        try await self.client.execute(
            operation: "GetPhoneNumber", 
            path: "/phone-numbers/{PhoneNumberId}", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Retrieves details for the specified phone number ID, such as associations, capabilities, and product type.
    ///
    /// Parameters:
    ///   - phoneNumberId: The phone number ID.
    ///   - logger: Logger use during operation
    @inlinable
    public func getPhoneNumber(
        phoneNumberId: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> GetPhoneNumberResponse {
        let input = GetPhoneNumberRequest(
            phoneNumberId: phoneNumberId
        )
        return try await self.getPhoneNumber(input, logger: logger)
    }

    /// Retrieves details for the specified phone number order, such as the order creation timestamp, phone numbers in E.164 format, product type, and order status.
    @Sendable
    @inlinable
    public func getPhoneNumberOrder(_ input: GetPhoneNumberOrderRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> GetPhoneNumberOrderResponse {
        try await self.client.execute(
            operation: "GetPhoneNumberOrder", 
            path: "/phone-number-orders/{PhoneNumberOrderId}", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Retrieves details for the specified phone number order, such as the order creation timestamp, phone numbers in E.164 format, product type, and order status.
    ///
    /// Parameters:
    ///   - phoneNumberOrderId: The ID for the phone number order.
    ///   - logger: Logger use during operation
    @inlinable
    public func getPhoneNumberOrder(
        phoneNumberOrderId: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> GetPhoneNumberOrderResponse {
        let input = GetPhoneNumberOrderRequest(
            phoneNumberOrderId: phoneNumberOrderId
        )
        return try await self.getPhoneNumberOrder(input, logger: logger)
    }

    /// Retrieves the phone number settings for the administrator's AWS account, such as the default outbound calling name.
    @Sendable
    @inlinable
    public func getPhoneNumberSettings(logger: Logger = AWSClient.loggingDisabled) async throws -> GetPhoneNumberSettingsResponse {
        try await self.client.execute(
            operation: "GetPhoneNumberSettings", 
            path: "/settings/phone-number", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            logger: logger
        )
    }

    /// Gets the specified proxy session details for the specified Amazon Chime Voice Connector.   This API is is no longer supported and will not be updated. We recommend using the latest version, GetProxySession, in the Amazon Chime SDK. Using the latest version requires migrating to a dedicated namespace. For more information, refer to   Migrating from the Amazon Chime namespace in the  Amazon Chime SDK Developer Guide.
    @available(*, deprecated, message: "Replaced by GetProxySession in the Amazon Chime SDK Voice Namespace")
    @Sendable
    @inlinable
    public func getProxySession(_ input: GetProxySessionRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> GetProxySessionResponse {
        try await self.client.execute(
            operation: "GetProxySession", 
            path: "/voice-connectors/{VoiceConnectorId}/proxy-sessions/{ProxySessionId}", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Gets the specified proxy session details for the specified Amazon Chime Voice Connector.   This API is is no longer supported and will not be updated. We recommend using the latest version, GetProxySession, in the Amazon Chime SDK. Using the latest version requires migrating to a dedicated namespace. For more information, refer to   Migrating from the Amazon Chime namespace in the  Amazon Chime SDK Developer Guide.
    ///
    /// Parameters:
    ///   - proxySessionId: The proxy session ID.
    ///   - voiceConnectorId: The Amazon Chime voice connector ID.
    ///   - logger: Logger use during operation
    @available(*, deprecated, message: "Replaced by GetProxySession in the Amazon Chime SDK Voice Namespace")
    @inlinable
    public func getProxySession(
        proxySessionId: String,
        voiceConnectorId: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> GetProxySessionResponse {
        let input = GetProxySessionRequest(
            proxySessionId: proxySessionId, 
            voiceConnectorId: voiceConnectorId
        )
        return try await self.getProxySession(input, logger: logger)
    }

    /// Gets the retention settings for the specified Amazon Chime Enterprise account. For more information about retention settings, see
    /// Managing Chat Retention Policies in the Amazon Chime Administration Guide.
    @Sendable
    @inlinable
    public func getRetentionSettings(_ input: GetRetentionSettingsRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> GetRetentionSettingsResponse {
        try await self.client.execute(
            operation: "GetRetentionSettings", 
            path: "/accounts/{AccountId}/retention-settings", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Gets the retention settings for the specified Amazon Chime Enterprise account. For more information about retention settings, see
    /// Managing Chat Retention Policies in the Amazon Chime Administration Guide.
    ///
    /// Parameters:
    ///   - accountId: The Amazon Chime account ID.
    ///   - logger: Logger use during operation
    @inlinable
    public func getRetentionSettings(
        accountId: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> GetRetentionSettingsResponse {
        let input = GetRetentionSettingsRequest(
            accountId: accountId
        )
        return try await self.getRetentionSettings(input, logger: logger)
    }

    /// Retrieves room details, such as the room name, for a room in an Amazon Chime Enterprise account.
    @Sendable
    @inlinable
    public func getRoom(_ input: GetRoomRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> GetRoomResponse {
        try await self.client.execute(
            operation: "GetRoom", 
            path: "/accounts/{AccountId}/rooms/{RoomId}", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Retrieves room details, such as the room name, for a room in an Amazon Chime Enterprise account.
    ///
    /// Parameters:
    ///   - accountId: The Amazon Chime account ID.
    ///   - roomId: The room ID.
    ///   - logger: Logger use during operation
    @inlinable
    public func getRoom(
        accountId: String,
        roomId: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> GetRoomResponse {
        let input = GetRoomRequest(
            accountId: accountId, 
            roomId: roomId
        )
        return try await self.getRoom(input, logger: logger)
    }

    /// Retrieves the information for a SIP media application, including name, AWS Region, and endpoints.   This API is is no longer supported and will not be updated. We recommend using the latest version, GetSipMediaApplication, in the Amazon Chime SDK. Using the latest version requires migrating to a dedicated namespace. For more information, refer to   Migrating from the Amazon Chime namespace in the  Amazon Chime SDK Developer Guide.
    @available(*, deprecated, message: "Replaced by GetSipMediaApplication in the Amazon Chime SDK Voice Namespace")
    @Sendable
    @inlinable
    public func getSipMediaApplication(_ input: GetSipMediaApplicationRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> GetSipMediaApplicationResponse {
        try await self.client.execute(
            operation: "GetSipMediaApplication", 
            path: "/sip-media-applications/{SipMediaApplicationId}", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Retrieves the information for a SIP media application, including name, AWS Region, and endpoints.   This API is is no longer supported and will not be updated. We recommend using the latest version, GetSipMediaApplication, in the Amazon Chime SDK. Using the latest version requires migrating to a dedicated namespace. For more information, refer to   Migrating from the Amazon Chime namespace in the  Amazon Chime SDK Developer Guide.
    ///
    /// Parameters:
    ///   - sipMediaApplicationId: The SIP media application ID.
    ///   - logger: Logger use during operation
    @available(*, deprecated, message: "Replaced by GetSipMediaApplication in the Amazon Chime SDK Voice Namespace")
    @inlinable
    public func getSipMediaApplication(
        sipMediaApplicationId: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> GetSipMediaApplicationResponse {
        let input = GetSipMediaApplicationRequest(
            sipMediaApplicationId: sipMediaApplicationId
        )
        return try await self.getSipMediaApplication(input, logger: logger)
    }

    /// Returns the logging configuration for the specified SIP media application.   This API is is no longer supported and will not be updated. We recommend using the latest version, GetSipMediaApplicationLoggingConfiguration, in the Amazon Chime SDK. Using the latest version requires migrating to a dedicated namespace. For more information, refer to   Migrating from the Amazon Chime namespace in the  Amazon Chime SDK Developer Guide.
    @available(*, deprecated, message: "Replaced by GetSipMediaApplicationLoggingConfiguration in the Amazon Chime SDK Voice Namespace")
    @Sendable
    @inlinable
    public func getSipMediaApplicationLoggingConfiguration(_ input: GetSipMediaApplicationLoggingConfigurationRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> GetSipMediaApplicationLoggingConfigurationResponse {
        try await self.client.execute(
            operation: "GetSipMediaApplicationLoggingConfiguration", 
            path: "/sip-media-applications/{SipMediaApplicationId}/logging-configuration", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Returns the logging configuration for the specified SIP media application.   This API is is no longer supported and will not be updated. We recommend using the latest version, GetSipMediaApplicationLoggingConfiguration, in the Amazon Chime SDK. Using the latest version requires migrating to a dedicated namespace. For more information, refer to   Migrating from the Amazon Chime namespace in the  Amazon Chime SDK Developer Guide.
    ///
    /// Parameters:
    ///   - sipMediaApplicationId: The SIP media application ID.
    ///   - logger: Logger use during operation
    @available(*, deprecated, message: "Replaced by GetSipMediaApplicationLoggingConfiguration in the Amazon Chime SDK Voice Namespace")
    @inlinable
    public func getSipMediaApplicationLoggingConfiguration(
        sipMediaApplicationId: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> GetSipMediaApplicationLoggingConfigurationResponse {
        let input = GetSipMediaApplicationLoggingConfigurationRequest(
            sipMediaApplicationId: sipMediaApplicationId
        )
        return try await self.getSipMediaApplicationLoggingConfiguration(input, logger: logger)
    }

    /// Retrieves the details of a SIP rule, such as the rule ID, name, triggers, and target endpoints.   This API is is no longer supported and will not be updated. We recommend using the latest version, GetSipRule, in the Amazon Chime SDK. Using the latest version requires migrating to a dedicated namespace. For more information, refer to   Migrating from the Amazon Chime namespace in the  Amazon Chime SDK Developer Guide.
    @available(*, deprecated, message: "Replaced by GetSipRule in the Amazon Chime SDK Voice Namespace")
    @Sendable
    @inlinable
    public func getSipRule(_ input: GetSipRuleRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> GetSipRuleResponse {
        try await self.client.execute(
            operation: "GetSipRule", 
            path: "/sip-rules/{SipRuleId}", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Retrieves the details of a SIP rule, such as the rule ID, name, triggers, and target endpoints.   This API is is no longer supported and will not be updated. We recommend using the latest version, GetSipRule, in the Amazon Chime SDK. Using the latest version requires migrating to a dedicated namespace. For more information, refer to   Migrating from the Amazon Chime namespace in the  Amazon Chime SDK Developer Guide.
    ///
    /// Parameters:
    ///   - sipRuleId: The SIP rule ID.
    ///   - logger: Logger use during operation
    @available(*, deprecated, message: "Replaced by GetSipRule in the Amazon Chime SDK Voice Namespace")
    @inlinable
    public func getSipRule(
        sipRuleId: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> GetSipRuleResponse {
        let input = GetSipRuleRequest(
            sipRuleId: sipRuleId
        )
        return try await self.getSipRule(input, logger: logger)
    }

    /// Retrieves details for the specified user ID, such as primary email address, license type,and personal meeting PIN.
    /// To retrieve user details with an email address instead of a user ID, use the
    /// ListUsers action, and then filter by email address.
    @Sendable
    @inlinable
    public func getUser(_ input: GetUserRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> GetUserResponse {
        try await self.client.execute(
            operation: "GetUser", 
            path: "/accounts/{AccountId}/users/{UserId}", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Retrieves details for the specified user ID, such as primary email address, license type,and personal meeting PIN.
    /// To retrieve user details with an email address instead of a user ID, use the
    /// ListUsers action, and then filter by email address.
    ///
    /// Parameters:
    ///   - accountId: The Amazon Chime account ID.
    ///   - userId: The user ID.
    ///   - logger: Logger use during operation
    @inlinable
    public func getUser(
        accountId: String,
        userId: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> GetUserResponse {
        let input = GetUserRequest(
            accountId: accountId, 
            userId: userId
        )
        return try await self.getUser(input, logger: logger)
    }

    /// Retrieves settings for the specified user ID, such as any associated phone number settings.
    @Sendable
    @inlinable
    public func getUserSettings(_ input: GetUserSettingsRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> GetUserSettingsResponse {
        try await self.client.execute(
            operation: "GetUserSettings", 
            path: "/accounts/{AccountId}/users/{UserId}/settings", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Retrieves settings for the specified user ID, such as any associated phone number settings.
    ///
    /// Parameters:
    ///   - accountId: The Amazon Chime account ID.
    ///   - userId: The user ID.
    ///   - logger: Logger use during operation
    @inlinable
    public func getUserSettings(
        accountId: String,
        userId: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> GetUserSettingsResponse {
        let input = GetUserSettingsRequest(
            accountId: accountId, 
            userId: userId
        )
        return try await self.getUserSettings(input, logger: logger)
    }

    /// Retrieves details for the specified Amazon Chime Voice Connector, such as timestamps,name, outbound host, and encryption requirements.   This API is is no longer supported and will not be updated. We recommend using the latest version, GetVoiceConnector, in the Amazon Chime SDK. Using the latest version requires migrating to a dedicated namespace. For more information, refer to   Migrating from the Amazon Chime namespace in the  Amazon Chime SDK Developer Guide.
    @available(*, deprecated, message: "Replaced by GetVoiceConnector in the Amazon Chime SDK Voice Namespace")
    @Sendable
    @inlinable
    public func getVoiceConnector(_ input: GetVoiceConnectorRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> GetVoiceConnectorResponse {
        try await self.client.execute(
            operation: "GetVoiceConnector", 
            path: "/voice-connectors/{VoiceConnectorId}", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Retrieves details for the specified Amazon Chime Voice Connector, such as timestamps,name, outbound host, and encryption requirements.   This API is is no longer supported and will not be updated. We recommend using the latest version, GetVoiceConnector, in the Amazon Chime SDK. Using the latest version requires migrating to a dedicated namespace. For more information, refer to   Migrating from the Amazon Chime namespace in the  Amazon Chime SDK Developer Guide.
    ///
    /// Parameters:
    ///   - voiceConnectorId: The Amazon Chime Voice Connector ID.
    ///   - logger: Logger use during operation
    @available(*, deprecated, message: "Replaced by GetVoiceConnector in the Amazon Chime SDK Voice Namespace")
    @inlinable
    public func getVoiceConnector(
        voiceConnectorId: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> GetVoiceConnectorResponse {
        let input = GetVoiceConnectorRequest(
            voiceConnectorId: voiceConnectorId
        )
        return try await self.getVoiceConnector(input, logger: logger)
    }

    /// Gets the emergency calling configuration details for the specified Amazon Chime Voice Connector.   This API is is no longer supported and will not be updated. We recommend using the latest version, GetVoiceConnectorEmergencyCallingConfiguration, in the Amazon Chime SDK. Using the latest version requires migrating to a dedicated namespace. For more information, refer to   Migrating from the Amazon Chime namespace in the  Amazon Chime SDK Developer Guide.
    @available(*, deprecated, message: "Replaced by GetVoiceConnectorEmergencyCallingConfiguration in the Amazon Chime SDK Voice Namespace")
    @Sendable
    @inlinable
    public func getVoiceConnectorEmergencyCallingConfiguration(_ input: GetVoiceConnectorEmergencyCallingConfigurationRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> GetVoiceConnectorEmergencyCallingConfigurationResponse {
        try await self.client.execute(
            operation: "GetVoiceConnectorEmergencyCallingConfiguration", 
            path: "/voice-connectors/{VoiceConnectorId}/emergency-calling-configuration", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Gets the emergency calling configuration details for the specified Amazon Chime Voice Connector.   This API is is no longer supported and will not be updated. We recommend using the latest version, GetVoiceConnectorEmergencyCallingConfiguration, in the Amazon Chime SDK. Using the latest version requires migrating to a dedicated namespace. For more information, refer to   Migrating from the Amazon Chime namespace in the  Amazon Chime SDK Developer Guide.
    ///
    /// Parameters:
    ///   - voiceConnectorId: The Amazon Chime Voice Connector ID.
    ///   - logger: Logger use during operation
    @available(*, deprecated, message: "Replaced by GetVoiceConnectorEmergencyCallingConfiguration in the Amazon Chime SDK Voice Namespace")
    @inlinable
    public func getVoiceConnectorEmergencyCallingConfiguration(
        voiceConnectorId: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> GetVoiceConnectorEmergencyCallingConfigurationResponse {
        let input = GetVoiceConnectorEmergencyCallingConfigurationRequest(
            voiceConnectorId: voiceConnectorId
        )
        return try await self.getVoiceConnectorEmergencyCallingConfiguration(input, logger: logger)
    }

    /// Retrieves details for the specified Amazon Chime Voice Connector group, such as timestamps,name, and associated VoiceConnectorItems.   This API is is no longer supported and will not be updated. We recommend using the latest version, GetVoiceConnectorGroup, in the Amazon Chime SDK. Using the latest version requires migrating to a dedicated namespace. For more information, refer to   Migrating from the Amazon Chime namespace in the  Amazon Chime SDK Developer Guide.
    @available(*, deprecated, message: "Replaced by GetVoiceConnectorGroup in the Amazon Chime SDK Voice Namespace")
    @Sendable
    @inlinable
    public func getVoiceConnectorGroup(_ input: GetVoiceConnectorGroupRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> GetVoiceConnectorGroupResponse {
        try await self.client.execute(
            operation: "GetVoiceConnectorGroup", 
            path: "/voice-connector-groups/{VoiceConnectorGroupId}", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Retrieves details for the specified Amazon Chime Voice Connector group, such as timestamps,name, and associated VoiceConnectorItems.   This API is is no longer supported and will not be updated. We recommend using the latest version, GetVoiceConnectorGroup, in the Amazon Chime SDK. Using the latest version requires migrating to a dedicated namespace. For more information, refer to   Migrating from the Amazon Chime namespace in the  Amazon Chime SDK Developer Guide.
    ///
    /// Parameters:
    ///   - voiceConnectorGroupId: The Amazon Chime Voice Connector group ID.
    ///   - logger: Logger use during operation
    @available(*, deprecated, message: "Replaced by GetVoiceConnectorGroup in the Amazon Chime SDK Voice Namespace")
    @inlinable
    public func getVoiceConnectorGroup(
        voiceConnectorGroupId: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> GetVoiceConnectorGroupResponse {
        let input = GetVoiceConnectorGroupRequest(
            voiceConnectorGroupId: voiceConnectorGroupId
        )
        return try await self.getVoiceConnectorGroup(input, logger: logger)
    }

    /// Retrieves the logging configuration details for the specified Amazon Chime Voice Connector. Shows whether SIP message logs are enabled for sending to  Amazon CloudWatch Logs.   This API is is no longer supported and will not be updated. We recommend using the latest version, GetVoiceConnectorLoggingConfiguration, in the Amazon Chime SDK. Using the latest version requires migrating to a dedicated namespace. For more information, refer to   Migrating from the Amazon Chime namespace in the  Amazon Chime SDK Developer Guide.
    @available(*, deprecated, message: "Replaced by GetVoiceConnectorLoggingConfiguration in the Amazon Chime SDK Voice Namespace")
    @Sendable
    @inlinable
    public func getVoiceConnectorLoggingConfiguration(_ input: GetVoiceConnectorLoggingConfigurationRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> GetVoiceConnectorLoggingConfigurationResponse {
        try await self.client.execute(
            operation: "GetVoiceConnectorLoggingConfiguration", 
            path: "/voice-connectors/{VoiceConnectorId}/logging-configuration", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Retrieves the logging configuration details for the specified Amazon Chime Voice Connector. Shows whether SIP message logs are enabled for sending to  Amazon CloudWatch Logs.   This API is is no longer supported and will not be updated. We recommend using the latest version, GetVoiceConnectorLoggingConfiguration, in the Amazon Chime SDK. Using the latest version requires migrating to a dedicated namespace. For more information, refer to   Migrating from the Amazon Chime namespace in the  Amazon Chime SDK Developer Guide.
    ///
    /// Parameters:
    ///   - voiceConnectorId: The Amazon Chime Voice Connector ID.
    ///   - logger: Logger use during operation
    @available(*, deprecated, message: "Replaced by GetVoiceConnectorLoggingConfiguration in the Amazon Chime SDK Voice Namespace")
    @inlinable
    public func getVoiceConnectorLoggingConfiguration(
        voiceConnectorId: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> GetVoiceConnectorLoggingConfigurationResponse {
        let input = GetVoiceConnectorLoggingConfigurationRequest(
            voiceConnectorId: voiceConnectorId
        )
        return try await self.getVoiceConnectorLoggingConfiguration(input, logger: logger)
    }

    /// Retrieves origination setting details for the specified Amazon Chime Voice Connector.   This API is is no longer supported and will not be updated. We recommend using the latest version, GetVoiceConnectorOrigination, in the Amazon Chime SDK. Using the latest version requires migrating to a dedicated namespace. For more information, refer to   Migrating from the Amazon Chime namespace in the  Amazon Chime SDK Developer Guide.
    @available(*, deprecated, message: "Replaced by GetVoiceConnectorOrigination in the Amazon Chime SDK Voice Namespace")
    @Sendable
    @inlinable
    public func getVoiceConnectorOrigination(_ input: GetVoiceConnectorOriginationRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> GetVoiceConnectorOriginationResponse {
        try await self.client.execute(
            operation: "GetVoiceConnectorOrigination", 
            path: "/voice-connectors/{VoiceConnectorId}/origination", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Retrieves origination setting details for the specified Amazon Chime Voice Connector.   This API is is no longer supported and will not be updated. We recommend using the latest version, GetVoiceConnectorOrigination, in the Amazon Chime SDK. Using the latest version requires migrating to a dedicated namespace. For more information, refer to   Migrating from the Amazon Chime namespace in the  Amazon Chime SDK Developer Guide.
    ///
    /// Parameters:
    ///   - voiceConnectorId: The Amazon Chime Voice Connector ID.
    ///   - logger: Logger use during operation
    @available(*, deprecated, message: "Replaced by GetVoiceConnectorOrigination in the Amazon Chime SDK Voice Namespace")
    @inlinable
    public func getVoiceConnectorOrigination(
        voiceConnectorId: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> GetVoiceConnectorOriginationResponse {
        let input = GetVoiceConnectorOriginationRequest(
            voiceConnectorId: voiceConnectorId
        )
        return try await self.getVoiceConnectorOrigination(input, logger: logger)
    }

    /// Gets the proxy configuration details for the specified Amazon Chime Voice Connector.   This API is is no longer supported and will not be updated. We recommend using the latest version, GetVoiceConnectorProxy, in the Amazon Chime SDK. Using the latest version requires migrating to a dedicated namespace. For more information, refer to   Migrating from the Amazon Chime namespace in the  Amazon Chime SDK Developer Guide.
    @available(*, deprecated, message: "Replaced by GetVoiceConnectorProxy in the Amazon Chime SDK Voice Namespace")
    @Sendable
    @inlinable
    public func getVoiceConnectorProxy(_ input: GetVoiceConnectorProxyRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> GetVoiceConnectorProxyResponse {
        try await self.client.execute(
            operation: "GetVoiceConnectorProxy", 
            path: "/voice-connectors/{VoiceConnectorId}/programmable-numbers/proxy", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Gets the proxy configuration details for the specified Amazon Chime Voice Connector.   This API is is no longer supported and will not be updated. We recommend using the latest version, GetVoiceConnectorProxy, in the Amazon Chime SDK. Using the latest version requires migrating to a dedicated namespace. For more information, refer to   Migrating from the Amazon Chime namespace in the  Amazon Chime SDK Developer Guide.
    ///
    /// Parameters:
    ///   - voiceConnectorId: The Amazon Chime voice connector ID.
    ///   - logger: Logger use during operation
    @available(*, deprecated, message: "Replaced by GetVoiceConnectorProxy in the Amazon Chime SDK Voice Namespace")
    @inlinable
    public func getVoiceConnectorProxy(
        voiceConnectorId: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> GetVoiceConnectorProxyResponse {
        let input = GetVoiceConnectorProxyRequest(
            voiceConnectorId: voiceConnectorId
        )
        return try await self.getVoiceConnectorProxy(input, logger: logger)
    }

    /// Retrieves the streaming configuration details for the specified Amazon Chime Voice Connector. Shows whether media streaming is enabled for sending to Amazon Kinesis. It also shows the retention period, in hours, for the Amazon Kinesis data.   This API is is no longer supported and will not be updated. We recommend using the latest version, GetVoiceConnectorStreamingConfiguration, in the Amazon Chime SDK. Using the latest version requires migrating to a dedicated namespace. For more information, refer to   Migrating from the Amazon Chime namespace in the  Amazon Chime SDK Developer Guide.
    @available(*, deprecated, message: "Replaced by GetVoiceConnectorStreamingConfiguration in the Amazon Chime SDK Voice Namespace")
    @Sendable
    @inlinable
    public func getVoiceConnectorStreamingConfiguration(_ input: GetVoiceConnectorStreamingConfigurationRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> GetVoiceConnectorStreamingConfigurationResponse {
        try await self.client.execute(
            operation: "GetVoiceConnectorStreamingConfiguration", 
            path: "/voice-connectors/{VoiceConnectorId}/streaming-configuration", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Retrieves the streaming configuration details for the specified Amazon Chime Voice Connector. Shows whether media streaming is enabled for sending to Amazon Kinesis. It also shows the retention period, in hours, for the Amazon Kinesis data.   This API is is no longer supported and will not be updated. We recommend using the latest version, GetVoiceConnectorStreamingConfiguration, in the Amazon Chime SDK. Using the latest version requires migrating to a dedicated namespace. For more information, refer to   Migrating from the Amazon Chime namespace in the  Amazon Chime SDK Developer Guide.
    ///
    /// Parameters:
    ///   - voiceConnectorId: The Amazon Chime Voice Connector ID.
    ///   - logger: Logger use during operation
    @available(*, deprecated, message: "Replaced by GetVoiceConnectorStreamingConfiguration in the Amazon Chime SDK Voice Namespace")
    @inlinable
    public func getVoiceConnectorStreamingConfiguration(
        voiceConnectorId: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> GetVoiceConnectorStreamingConfigurationResponse {
        let input = GetVoiceConnectorStreamingConfigurationRequest(
            voiceConnectorId: voiceConnectorId
        )
        return try await self.getVoiceConnectorStreamingConfiguration(input, logger: logger)
    }

    /// Retrieves termination setting details for the specified Amazon Chime Voice Connector.   This API is is no longer supported and will not be updated. We recommend using the latest version, GetVoiceConnectorTermination, in the Amazon Chime SDK. Using the latest version requires migrating to a dedicated namespace. For more information, refer to   Migrating from the Amazon Chime namespace in the  Amazon Chime SDK Developer Guide.
    @available(*, deprecated, message: "Replaced by GetVoiceConnectorTermination in the Amazon Chime SDK Voice Namespace")
    @Sendable
    @inlinable
    public func getVoiceConnectorTermination(_ input: GetVoiceConnectorTerminationRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> GetVoiceConnectorTerminationResponse {
        try await self.client.execute(
            operation: "GetVoiceConnectorTermination", 
            path: "/voice-connectors/{VoiceConnectorId}/termination", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Retrieves termination setting details for the specified Amazon Chime Voice Connector.   This API is is no longer supported and will not be updated. We recommend using the latest version, GetVoiceConnectorTermination, in the Amazon Chime SDK. Using the latest version requires migrating to a dedicated namespace. For more information, refer to   Migrating from the Amazon Chime namespace in the  Amazon Chime SDK Developer Guide.
    ///
    /// Parameters:
    ///   - voiceConnectorId: The Amazon Chime Voice Connector ID.
    ///   - logger: Logger use during operation
    @available(*, deprecated, message: "Replaced by GetVoiceConnectorTermination in the Amazon Chime SDK Voice Namespace")
    @inlinable
    public func getVoiceConnectorTermination(
        voiceConnectorId: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> GetVoiceConnectorTerminationResponse {
        let input = GetVoiceConnectorTerminationRequest(
            voiceConnectorId: voiceConnectorId
        )
        return try await self.getVoiceConnectorTermination(input, logger: logger)
    }

    ///   This API is is no longer supported and will not be updated. We recommend using the latest version, GetVoiceConnectorTerminationHealth, in the Amazon Chime SDK. Using the latest version requires migrating to a dedicated namespace. For more information, refer to   Migrating from the Amazon Chime namespace in the  Amazon Chime SDK Developer Guide.  Retrieves information about the last time a SIP OPTIONS ping was received from your SIP infrastructure for the specified Amazon Chime Voice Connector.
    @available(*, deprecated, message: "Replaced by GetVoiceConnectorTerminationHealth in the Amazon Chime SDK Voice Namespace")
    @Sendable
    @inlinable
    public func getVoiceConnectorTerminationHealth(_ input: GetVoiceConnectorTerminationHealthRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> GetVoiceConnectorTerminationHealthResponse {
        try await self.client.execute(
            operation: "GetVoiceConnectorTerminationHealth", 
            path: "/voice-connectors/{VoiceConnectorId}/termination/health", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    ///   This API is is no longer supported and will not be updated. We recommend using the latest version, GetVoiceConnectorTerminationHealth, in the Amazon Chime SDK. Using the latest version requires migrating to a dedicated namespace. For more information, refer to   Migrating from the Amazon Chime namespace in the  Amazon Chime SDK Developer Guide.  Retrieves information about the last time a SIP OPTIONS ping was received from your SIP infrastructure for the specified Amazon Chime Voice Connector.
    ///
    /// Parameters:
    ///   - voiceConnectorId: The Amazon Chime Voice Connector ID.
    ///   - logger: Logger use during operation
    @available(*, deprecated, message: "Replaced by GetVoiceConnectorTerminationHealth in the Amazon Chime SDK Voice Namespace")
    @inlinable
    public func getVoiceConnectorTerminationHealth(
        voiceConnectorId: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> GetVoiceConnectorTerminationHealthResponse {
        let input = GetVoiceConnectorTerminationHealthRequest(
            voiceConnectorId: voiceConnectorId
        )
        return try await self.getVoiceConnectorTerminationHealth(input, logger: logger)
    }

    /// Sends email to a maximum of 50 users, inviting them to the specified Amazon Chime Team account. Only Team account types are currently supported for this action.
    @Sendable
    @inlinable
    public func inviteUsers(_ input: InviteUsersRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> InviteUsersResponse {
        try await self.client.execute(
            operation: "InviteUsers", 
            path: "/accounts/{AccountId}/users?operation=add", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Sends email to a maximum of 50 users, inviting them to the specified Amazon Chime Team account. Only Team account types are currently supported for this action.
    ///
    /// Parameters:
    ///   - accountId: The Amazon Chime account ID.
    ///   - userEmailList: The user email addresses to which to send the email invitation.
    ///   - userType: The user type.
    ///   - logger: Logger use during operation
    @inlinable
    public func inviteUsers(
        accountId: String,
        userEmailList: [String],
        userType: UserType? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> InviteUsersResponse {
        let input = InviteUsersRequest(
            accountId: accountId, 
            userEmailList: userEmailList, 
            userType: userType
        )
        return try await self.inviteUsers(input, logger: logger)
    }

    /// Lists the Amazon Chime accounts under the administrator's AWS account. You can filter accounts by account name prefix. To find out which Amazon Chime account a user belongs to, you can filter by the user's email address, which returns one account result.
    @Sendable
    @inlinable
    public func listAccounts(_ input: ListAccountsRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> ListAccountsResponse {
        try await self.client.execute(
            operation: "ListAccounts", 
            path: "/accounts", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Lists the Amazon Chime accounts under the administrator's AWS account. You can filter accounts by account name prefix. To find out which Amazon Chime account a user belongs to, you can filter by the user's email address, which returns one account result.
    ///
    /// Parameters:
    ///   - maxResults: The maximum number of results to return in a single call. Defaults to 100.
    ///   - name: Amazon Chime account name prefix with which to filter results.
    ///   - nextToken: The token to use to retrieve the next page of results.
    ///   - userEmail: User email address with which to filter results.
    ///   - logger: Logger use during operation
    @inlinable
    public func listAccounts(
        maxResults: Int? = nil,
        name: String? = nil,
        nextToken: String? = nil,
        userEmail: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> ListAccountsResponse {
        let input = ListAccountsRequest(
            maxResults: maxResults, 
            name: name, 
            nextToken: nextToken, 
            userEmail: userEmail
        )
        return try await self.listAccounts(input, logger: logger)
    }

    /// Returns a list of the administrators in the AppInstance.   This API is is no longer supported and will not be updated. We recommend using the latest version, ListAppInstanceAdmins, in the Amazon Chime SDK. Using the latest version requires migrating to a dedicated namespace. For more information, refer to   Migrating from the Amazon Chime namespace in the  Amazon Chime SDK Developer Guide.
    @available(*, deprecated, message: "Replaced by ListAppInstanceAdmins in the Amazon Chime SDK Identity Namespace")
    @Sendable
    @inlinable
    public func listAppInstanceAdmins(_ input: ListAppInstanceAdminsRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> ListAppInstanceAdminsResponse {
        try await self.client.execute(
            operation: "ListAppInstanceAdmins", 
            path: "/app-instances/{AppInstanceArn}/admins", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            hostPrefix: "identity-", 
            logger: logger
        )
    }
    /// Returns a list of the administrators in the AppInstance.   This API is is no longer supported and will not be updated. We recommend using the latest version, ListAppInstanceAdmins, in the Amazon Chime SDK. Using the latest version requires migrating to a dedicated namespace. For more information, refer to   Migrating from the Amazon Chime namespace in the  Amazon Chime SDK Developer Guide.
    ///
    /// Parameters:
    ///   - appInstanceArn: The ARN of the AppInstance.
    ///   - maxResults: The maximum number of administrators that you want to return.
    ///   - nextToken: The token returned from previous API requests until the number of administrators is reached.
    ///   - logger: Logger use during operation
    @available(*, deprecated, message: "Replaced by ListAppInstanceAdmins in the Amazon Chime SDK Identity Namespace")
    @inlinable
    public func listAppInstanceAdmins(
        appInstanceArn: String,
        maxResults: Int? = nil,
        nextToken: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> ListAppInstanceAdminsResponse {
        let input = ListAppInstanceAdminsRequest(
            appInstanceArn: appInstanceArn, 
            maxResults: maxResults, 
            nextToken: nextToken
        )
        return try await self.listAppInstanceAdmins(input, logger: logger)
    }

    /// List all AppInstanceUsers created under a single AppInstance.    This API is is no longer supported and will not be updated. We recommend using the latest version, ListAppInstanceUsers, in the Amazon Chime SDK. Using the latest version requires migrating to a dedicated namespace. For more information, refer to   Migrating from the Amazon Chime namespace in the  Amazon Chime SDK Developer Guide.
    @available(*, deprecated, message: "Replaced by ListAppInstanceUsers in the Amazon Chime SDK Identity Namespace")
    @Sendable
    @inlinable
    public func listAppInstanceUsers(_ input: ListAppInstanceUsersRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> ListAppInstanceUsersResponse {
        try await self.client.execute(
            operation: "ListAppInstanceUsers", 
            path: "/app-instance-users", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            hostPrefix: "identity-", 
            logger: logger
        )
    }
    /// List all AppInstanceUsers created under a single AppInstance.    This API is is no longer supported and will not be updated. We recommend using the latest version, ListAppInstanceUsers, in the Amazon Chime SDK. Using the latest version requires migrating to a dedicated namespace. For more information, refer to   Migrating from the Amazon Chime namespace in the  Amazon Chime SDK Developer Guide.
    ///
    /// Parameters:
    ///   - appInstanceArn: The ARN of the AppInstance.
    ///   - maxResults: The maximum number of requests that you want returned.
    ///   - nextToken: The token passed by previous API calls until all requested users are returned.
    ///   - logger: Logger use during operation
    @available(*, deprecated, message: "Replaced by ListAppInstanceUsers in the Amazon Chime SDK Identity Namespace")
    @inlinable
    public func listAppInstanceUsers(
        appInstanceArn: String,
        maxResults: Int? = nil,
        nextToken: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> ListAppInstanceUsersResponse {
        let input = ListAppInstanceUsersRequest(
            appInstanceArn: appInstanceArn, 
            maxResults: maxResults, 
            nextToken: nextToken
        )
        return try await self.listAppInstanceUsers(input, logger: logger)
    }

    /// Lists all Amazon Chime AppInstances created under a single AWS account.   This API is is no longer supported and will not be updated. We recommend using the latest version, ListAppInstances, in the Amazon Chime SDK. Using the latest version requires migrating to a dedicated namespace. For more information, refer to   Migrating from the Amazon Chime namespace in the  Amazon Chime SDK Developer Guide.
    @available(*, deprecated, message: "Replaced by ListAppInstances in the Amazon Chime SDK Identity Namespace")
    @Sendable
    @inlinable
    public func listAppInstances(_ input: ListAppInstancesRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> ListAppInstancesResponse {
        try await self.client.execute(
            operation: "ListAppInstances", 
            path: "/app-instances", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            hostPrefix: "identity-", 
            logger: logger
        )
    }
    /// Lists all Amazon Chime AppInstances created under a single AWS account.   This API is is no longer supported and will not be updated. We recommend using the latest version, ListAppInstances, in the Amazon Chime SDK. Using the latest version requires migrating to a dedicated namespace. For more information, refer to   Migrating from the Amazon Chime namespace in the  Amazon Chime SDK Developer Guide.
    ///
    /// Parameters:
    ///   - maxResults: The maximum number of AppInstances that you want to return.
    ///   - nextToken: The token passed by previous API requests until you reach the maximum number of AppInstances.
    ///   - logger: Logger use during operation
    @available(*, deprecated, message: "Replaced by ListAppInstances in the Amazon Chime SDK Identity Namespace")
    @inlinable
    public func listAppInstances(
        maxResults: Int? = nil,
        nextToken: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> ListAppInstancesResponse {
        let input = ListAppInstancesRequest(
            maxResults: maxResults, 
            nextToken: nextToken
        )
        return try await self.listAppInstances(input, logger: logger)
    }

    /// Lists the tags applied to an Amazon Chime SDK attendee resource.  ListAttendeeTags is not supported in the Amazon Chime SDK Meetings Namespace. Update your application to remove calls to this API.
    @available(*, deprecated, message: "Attendee Tags are not supported in the Amazon Chime SDK Meetings Namespace. Update your application to remove calls to this API.")
    @Sendable
    @inlinable
    public func listAttendeeTags(_ input: ListAttendeeTagsRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> ListAttendeeTagsResponse {
        try await self.client.execute(
            operation: "ListAttendeeTags", 
            path: "/meetings/{MeetingId}/attendees/{AttendeeId}/tags", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Lists the tags applied to an Amazon Chime SDK attendee resource.  ListAttendeeTags is not supported in the Amazon Chime SDK Meetings Namespace. Update your application to remove calls to this API.
    ///
    /// Parameters:
    ///   - attendeeId: The Amazon Chime SDK attendee ID.
    ///   - meetingId: The Amazon Chime SDK meeting ID.
    ///   - logger: Logger use during operation
    @available(*, deprecated, message: "Attendee Tags are not supported in the Amazon Chime SDK Meetings Namespace. Update your application to remove calls to this API.")
    @inlinable
    public func listAttendeeTags(
        attendeeId: String,
        meetingId: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> ListAttendeeTagsResponse {
        let input = ListAttendeeTagsRequest(
            attendeeId: attendeeId, 
            meetingId: meetingId
        )
        return try await self.listAttendeeTags(input, logger: logger)
    }

    /// Lists the attendees for the specified Amazon Chime SDK meeting. For more information about the Amazon Chime SDK, see
    /// Using the Amazon Chime SDK
    /// in the Amazon Chime SDK Developer Guide.
    ///    This API is is no longer supported and will not be updated. We recommend using the latest version, ListAttendees, in the Amazon Chime SDK. Using the latest version requires migrating to a dedicated namespace. For more information, refer to   Migrating from the Amazon Chime namespace in the  Amazon Chime SDK Developer Guide.
    @available(*, deprecated, message: "Replaced by ListAttendees in the Amazon Chime SDK Meetings Namespace")
    @Sendable
    @inlinable
    public func listAttendees(_ input: ListAttendeesRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> ListAttendeesResponse {
        try await self.client.execute(
            operation: "ListAttendees", 
            path: "/meetings/{MeetingId}/attendees", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Lists the attendees for the specified Amazon Chime SDK meeting. For more information about the Amazon Chime SDK, see
    /// Using the Amazon Chime SDK
    /// in the Amazon Chime SDK Developer Guide.
    ///    This API is is no longer supported and will not be updated. We recommend using the latest version, ListAttendees, in the Amazon Chime SDK. Using the latest version requires migrating to a dedicated namespace. For more information, refer to   Migrating from the Amazon Chime namespace in the  Amazon Chime SDK Developer Guide.
    ///
    /// Parameters:
    ///   - maxResults: The maximum number of results to return in a single call.
    ///   - meetingId: The Amazon Chime SDK meeting ID.
    ///   - nextToken: The token to use to retrieve the next page of results.
    ///   - logger: Logger use during operation
    @available(*, deprecated, message: "Replaced by ListAttendees in the Amazon Chime SDK Meetings Namespace")
    @inlinable
    public func listAttendees(
        maxResults: Int? = nil,
        meetingId: String,
        nextToken: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> ListAttendeesResponse {
        let input = ListAttendeesRequest(
            maxResults: maxResults, 
            meetingId: meetingId, 
            nextToken: nextToken
        )
        return try await self.listAttendees(input, logger: logger)
    }

    /// Lists the bots associated with the administrator's Amazon Chime Enterprise account ID.
    @Sendable
    @inlinable
    public func listBots(_ input: ListBotsRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> ListBotsResponse {
        try await self.client.execute(
            operation: "ListBots", 
            path: "/accounts/{AccountId}/bots", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Lists the bots associated with the administrator's Amazon Chime Enterprise account ID.
    ///
    /// Parameters:
    ///   - accountId: The Amazon Chime account ID.
    ///   - maxResults: The maximum number of results to return in a single call. The default is 10.
    ///   - nextToken: The token to use to retrieve the next page of results.
    ///   - logger: Logger use during operation
    @inlinable
    public func listBots(
        accountId: String,
        maxResults: Int? = nil,
        nextToken: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> ListBotsResponse {
        let input = ListBotsRequest(
            accountId: accountId, 
            maxResults: maxResults, 
            nextToken: nextToken
        )
        return try await self.listBots(input, logger: logger)
    }

    /// Lists all the users banned from a particular channel.  The x-amz-chime-bearer request header is mandatory. Use the AppInstanceUserArn of the user that makes the API call as the value in the header.    This API is is no longer supported and will not be updated. We recommend using the latest version, ListChannelBans, in the Amazon Chime SDK. Using the latest version requires migrating to a dedicated namespace. For more information, refer to   Migrating from the Amazon Chime namespace in the  Amazon Chime SDK Developer Guide.
    @available(*, deprecated, message: "Replaced by ListChannelBans in the Amazon Chime SDK Messaging Namespace")
    @Sendable
    @inlinable
    public func listChannelBans(_ input: ListChannelBansRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> ListChannelBansResponse {
        try await self.client.execute(
            operation: "ListChannelBans", 
            path: "/channels/{ChannelArn}/bans", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            hostPrefix: "messaging-", 
            logger: logger
        )
    }
    /// Lists all the users banned from a particular channel.  The x-amz-chime-bearer request header is mandatory. Use the AppInstanceUserArn of the user that makes the API call as the value in the header.    This API is is no longer supported and will not be updated. We recommend using the latest version, ListChannelBans, in the Amazon Chime SDK. Using the latest version requires migrating to a dedicated namespace. For more information, refer to   Migrating from the Amazon Chime namespace in the  Amazon Chime SDK Developer Guide.
    ///
    /// Parameters:
    ///   - channelArn: The ARN of the channel.
    ///   - chimeBearer: The AppInstanceUserArn of the user that makes the API call.
    ///   - maxResults: The maximum number of bans that you want returned.
    ///   - nextToken: The token passed by previous API calls until all requested bans are returned.
    ///   - logger: Logger use during operation
    @available(*, deprecated, message: "Replaced by ListChannelBans in the Amazon Chime SDK Messaging Namespace")
    @inlinable
    public func listChannelBans(
        channelArn: String,
        chimeBearer: String? = nil,
        maxResults: Int? = nil,
        nextToken: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> ListChannelBansResponse {
        let input = ListChannelBansRequest(
            channelArn: channelArn, 
            chimeBearer: chimeBearer, 
            maxResults: maxResults, 
            nextToken: nextToken
        )
        return try await self.listChannelBans(input, logger: logger)
    }

    /// Lists all channel memberships in a channel.  The x-amz-chime-bearer request header is mandatory. Use the AppInstanceUserArn of the user that makes the API call as the value in the header.    This API is is no longer supported and will not be updated. We recommend using the latest version, ListChannelMemberships, in the Amazon Chime SDK. Using the latest version requires migrating to a dedicated namespace. For more information, refer to   Migrating from the Amazon Chime namespace in the  Amazon Chime SDK Developer Guide.
    @available(*, deprecated, message: "Replaced by ListChannelMemberships in the Amazon Chime SDK Messaging Namespace")
    @Sendable
    @inlinable
    public func listChannelMemberships(_ input: ListChannelMembershipsRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> ListChannelMembershipsResponse {
        try await self.client.execute(
            operation: "ListChannelMemberships", 
            path: "/channels/{ChannelArn}/memberships", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            hostPrefix: "messaging-", 
            logger: logger
        )
    }
    /// Lists all channel memberships in a channel.  The x-amz-chime-bearer request header is mandatory. Use the AppInstanceUserArn of the user that makes the API call as the value in the header.    This API is is no longer supported and will not be updated. We recommend using the latest version, ListChannelMemberships, in the Amazon Chime SDK. Using the latest version requires migrating to a dedicated namespace. For more information, refer to   Migrating from the Amazon Chime namespace in the  Amazon Chime SDK Developer Guide.
    ///
    /// Parameters:
    ///   - channelArn: The maximum number of channel memberships that you want returned.
    ///   - chimeBearer: The AppInstanceUserArn of the user that makes the API call.
    ///   - maxResults: The maximum number of channel memberships that you want returned.
    ///   - nextToken: The token passed by previous API calls until all requested channel memberships are returned.
    ///   - type: The membership type of a user, DEFAULT or HIDDEN. Default members are always returned as part of ListChannelMemberships. Hidden members are only returned if the type filter in ListChannelMemberships equals HIDDEN. Otherwise hidden members are not returned.
    ///   - logger: Logger use during operation
    @available(*, deprecated, message: "Replaced by ListChannelMemberships in the Amazon Chime SDK Messaging Namespace")
    @inlinable
    public func listChannelMemberships(
        channelArn: String,
        chimeBearer: String? = nil,
        maxResults: Int? = nil,
        nextToken: String? = nil,
        type: ChannelMembershipType? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> ListChannelMembershipsResponse {
        let input = ListChannelMembershipsRequest(
            channelArn: channelArn, 
            chimeBearer: chimeBearer, 
            maxResults: maxResults, 
            nextToken: nextToken, 
            type: type
        )
        return try await self.listChannelMemberships(input, logger: logger)
    }

    ///  Lists all channels that a particular AppInstanceUser is a part of. Only an AppInstanceAdmin can call the API with a user ARN that is not their own.   The x-amz-chime-bearer request header is mandatory. Use the AppInstanceUserArn of the user that makes the API call as the value in the header.    This API is is no longer supported and will not be updated. We recommend using the latest version, ListChannelMembershipsForAppInstanceUser, in the Amazon Chime SDK. Using the latest version requires migrating to a dedicated namespace. For more information, refer to   Migrating from the Amazon Chime namespace in the  Amazon Chime SDK Developer Guide.
    @available(*, deprecated, message: "Replaced by ListChannelMembershipsForAppInstanceUser in the Amazon Chime SDK Messaging Namespace")
    @Sendable
    @inlinable
    public func listChannelMembershipsForAppInstanceUser(_ input: ListChannelMembershipsForAppInstanceUserRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> ListChannelMembershipsForAppInstanceUserResponse {
        try await self.client.execute(
            operation: "ListChannelMembershipsForAppInstanceUser", 
            path: "/channels?scope=app-instance-user-memberships", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            hostPrefix: "messaging-", 
            logger: logger
        )
    }
    ///  Lists all channels that a particular AppInstanceUser is a part of. Only an AppInstanceAdmin can call the API with a user ARN that is not their own.   The x-amz-chime-bearer request header is mandatory. Use the AppInstanceUserArn of the user that makes the API call as the value in the header.    This API is is no longer supported and will not be updated. We recommend using the latest version, ListChannelMembershipsForAppInstanceUser, in the Amazon Chime SDK. Using the latest version requires migrating to a dedicated namespace. For more information, refer to   Migrating from the Amazon Chime namespace in the  Amazon Chime SDK Developer Guide.
    ///
    /// Parameters:
    ///   - appInstanceUserArn: The ARN of the AppInstanceUsers
    ///   - chimeBearer: The AppInstanceUserArn of the user that makes the API call.
    ///   - maxResults: The maximum number of users that you want returned.
    ///   - nextToken: The token returned from previous API requests until the number of channel memberships is reached.
    ///   - logger: Logger use during operation
    @available(*, deprecated, message: "Replaced by ListChannelMembershipsForAppInstanceUser in the Amazon Chime SDK Messaging Namespace")
    @inlinable
    public func listChannelMembershipsForAppInstanceUser(
        appInstanceUserArn: String? = nil,
        chimeBearer: String? = nil,
        maxResults: Int? = nil,
        nextToken: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> ListChannelMembershipsForAppInstanceUserResponse {
        let input = ListChannelMembershipsForAppInstanceUserRequest(
            appInstanceUserArn: appInstanceUserArn, 
            chimeBearer: chimeBearer, 
            maxResults: maxResults, 
            nextToken: nextToken
        )
        return try await self.listChannelMembershipsForAppInstanceUser(input, logger: logger)
    }

    /// List all the messages in a channel. Returns a paginated list of ChannelMessages. By default, sorted by creation timestamp in descending order.  Redacted messages appear in the results as empty, since they are only redacted, not deleted. Deleted messages do not appear in the results. This action always returns the latest version of an edited message. Also, the x-amz-chime-bearer request header is mandatory. Use the AppInstanceUserArn of the user that makes the API call as the value in the header.    This API is is no longer supported and will not be updated. We recommend using the latest version, ListChannelMessages, in the Amazon Chime SDK. Using the latest version requires migrating to a dedicated namespace. For more information, refer to   Migrating from the Amazon Chime namespace in the  Amazon Chime SDK Developer Guide.
    @available(*, deprecated, message: "Replaced by ListChannelMessages in the Amazon Chime SDK Messaging Namespace")
    @Sendable
    @inlinable
    public func listChannelMessages(_ input: ListChannelMessagesRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> ListChannelMessagesResponse {
        try await self.client.execute(
            operation: "ListChannelMessages", 
            path: "/channels/{ChannelArn}/messages", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            hostPrefix: "messaging-", 
            logger: logger
        )
    }
    /// List all the messages in a channel. Returns a paginated list of ChannelMessages. By default, sorted by creation timestamp in descending order.  Redacted messages appear in the results as empty, since they are only redacted, not deleted. Deleted messages do not appear in the results. This action always returns the latest version of an edited message. Also, the x-amz-chime-bearer request header is mandatory. Use the AppInstanceUserArn of the user that makes the API call as the value in the header.    This API is is no longer supported and will not be updated. We recommend using the latest version, ListChannelMessages, in the Amazon Chime SDK. Using the latest version requires migrating to a dedicated namespace. For more information, refer to   Migrating from the Amazon Chime namespace in the  Amazon Chime SDK Developer Guide.
    ///
    /// Parameters:
    ///   - channelArn: The ARN of the channel.
    ///   - chimeBearer: The AppInstanceUserArn of the user that makes the API call.
    ///   - maxResults: The maximum number of messages that you want returned.
    ///   - nextToken: The token passed by previous API calls until all requested messages are returned.
    ///   - notAfter: The final or ending time stamp for your requested messages.
    ///   - notBefore: The initial or starting time stamp for your requested messages.
    ///   - sortOrder: The order in which you want messages sorted. Default is Descending, based on time created.
    ///   - logger: Logger use during operation
    @available(*, deprecated, message: "Replaced by ListChannelMessages in the Amazon Chime SDK Messaging Namespace")
    @inlinable
    public func listChannelMessages(
        channelArn: String,
        chimeBearer: String? = nil,
        maxResults: Int? = nil,
        nextToken: String? = nil,
        notAfter: Date? = nil,
        notBefore: Date? = nil,
        sortOrder: SortOrder? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> ListChannelMessagesResponse {
        let input = ListChannelMessagesRequest(
            channelArn: channelArn, 
            chimeBearer: chimeBearer, 
            maxResults: maxResults, 
            nextToken: nextToken, 
            notAfter: notAfter, 
            notBefore: notBefore, 
            sortOrder: sortOrder
        )
        return try await self.listChannelMessages(input, logger: logger)
    }

    /// Lists all the moderators for a channel.  The x-amz-chime-bearer request header is mandatory. Use the AppInstanceUserArn of the user that makes the API call as the value in the header.    This API is is no longer supported and will not be updated. We recommend using the latest version, ListChannelModerators, in the Amazon Chime SDK. Using the latest version requires migrating to a dedicated namespace. For more information, refer to   Migrating from the Amazon Chime namespace in the  Amazon Chime SDK Developer Guide.
    @available(*, deprecated, message: "Replaced by ListChannelModerators in the Amazon Chime SDK Messaging Namespace")
    @Sendable
    @inlinable
    public func listChannelModerators(_ input: ListChannelModeratorsRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> ListChannelModeratorsResponse {
        try await self.client.execute(
            operation: "ListChannelModerators", 
            path: "/channels/{ChannelArn}/moderators", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            hostPrefix: "messaging-", 
            logger: logger
        )
    }
    /// Lists all the moderators for a channel.  The x-amz-chime-bearer request header is mandatory. Use the AppInstanceUserArn of the user that makes the API call as the value in the header.    This API is is no longer supported and will not be updated. We recommend using the latest version, ListChannelModerators, in the Amazon Chime SDK. Using the latest version requires migrating to a dedicated namespace. For more information, refer to   Migrating from the Amazon Chime namespace in the  Amazon Chime SDK Developer Guide.
    ///
    /// Parameters:
    ///   - channelArn: The ARN of the channel.
    ///   - chimeBearer: The AppInstanceUserArn of the user that makes the API call.
    ///   - maxResults: The maximum number of moderators that you want returned.
    ///   - nextToken: The token passed by previous API calls until all requested moderators are returned.
    ///   - logger: Logger use during operation
    @available(*, deprecated, message: "Replaced by ListChannelModerators in the Amazon Chime SDK Messaging Namespace")
    @inlinable
    public func listChannelModerators(
        channelArn: String,
        chimeBearer: String? = nil,
        maxResults: Int? = nil,
        nextToken: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> ListChannelModeratorsResponse {
        let input = ListChannelModeratorsRequest(
            channelArn: channelArn, 
            chimeBearer: chimeBearer, 
            maxResults: maxResults, 
            nextToken: nextToken
        )
        return try await self.listChannelModerators(input, logger: logger)
    }

    /// Lists all Channels created under a single Chime App as a paginated list. You can specify filters to narrow results.  Functionality & restrictions    Use privacy = PUBLIC to retrieve all public channels in the account.   Only an AppInstanceAdmin can set privacy = PRIVATE to list the private channels in an account.    The x-amz-chime-bearer request header is mandatory. Use the AppInstanceUserArn of the user that makes the API call as the value in the header.    This API is is no longer supported and will not be updated. We recommend using the latest version, ListChannels, in the Amazon Chime SDK. Using the latest version requires migrating to a dedicated namespace. For more information, refer to   Migrating from the Amazon Chime namespace in the  Amazon Chime SDK Developer Guide.
    @available(*, deprecated, message: "Replaced by ListChannels in the Amazon Chime SDK Messaging Namespace")
    @Sendable
    @inlinable
    public func listChannels(_ input: ListChannelsRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> ListChannelsResponse {
        try await self.client.execute(
            operation: "ListChannels", 
            path: "/channels", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            hostPrefix: "messaging-", 
            logger: logger
        )
    }
    /// Lists all Channels created under a single Chime App as a paginated list. You can specify filters to narrow results.  Functionality & restrictions    Use privacy = PUBLIC to retrieve all public channels in the account.   Only an AppInstanceAdmin can set privacy = PRIVATE to list the private channels in an account.    The x-amz-chime-bearer request header is mandatory. Use the AppInstanceUserArn of the user that makes the API call as the value in the header.    This API is is no longer supported and will not be updated. We recommend using the latest version, ListChannels, in the Amazon Chime SDK. Using the latest version requires migrating to a dedicated namespace. For more information, refer to   Migrating from the Amazon Chime namespace in the  Amazon Chime SDK Developer Guide.
    ///
    /// Parameters:
    ///   - appInstanceArn: The ARN of the AppInstance.
    ///   - chimeBearer: The AppInstanceUserArn of the user that makes the API call.
    ///   - maxResults: The maximum number of channels that you want to return.
    ///   - nextToken: The token passed by previous API calls until all requested channels are returned.
    ///   - privacy: The privacy setting. PUBLIC retrieves all the public channels. PRIVATE retrieves private channels. Only an AppInstanceAdmin can retrieve private channels.
    ///   - logger: Logger use during operation
    @available(*, deprecated, message: "Replaced by ListChannels in the Amazon Chime SDK Messaging Namespace")
    @inlinable
    public func listChannels(
        appInstanceArn: String,
        chimeBearer: String? = nil,
        maxResults: Int? = nil,
        nextToken: String? = nil,
        privacy: ChannelPrivacy? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> ListChannelsResponse {
        let input = ListChannelsRequest(
            appInstanceArn: appInstanceArn, 
            chimeBearer: chimeBearer, 
            maxResults: maxResults, 
            nextToken: nextToken, 
            privacy: privacy
        )
        return try await self.listChannels(input, logger: logger)
    }

    /// A list of the channels moderated by an AppInstanceUser.  The x-amz-chime-bearer request header is mandatory. Use the AppInstanceUserArn of the user that makes the API call as the value in the header.    This API is is no longer supported and will not be updated. We recommend using the latest version, ListChannelsModeratedByAppInstanceUser, in the Amazon Chime SDK. Using the latest version requires migrating to a dedicated namespace. For more information, refer to   Migrating from the Amazon Chime namespace in the  Amazon Chime SDK Developer Guide.
    @available(*, deprecated, message: "Replaced by ListChannelsModeratedByAppInstanceUser in the Amazon Chime SDK Messaging Namespace")
    @Sendable
    @inlinable
    public func listChannelsModeratedByAppInstanceUser(_ input: ListChannelsModeratedByAppInstanceUserRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> ListChannelsModeratedByAppInstanceUserResponse {
        try await self.client.execute(
            operation: "ListChannelsModeratedByAppInstanceUser", 
            path: "/channels?scope=app-instance-user-moderated-channels", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            hostPrefix: "messaging-", 
            logger: logger
        )
    }
    /// A list of the channels moderated by an AppInstanceUser.  The x-amz-chime-bearer request header is mandatory. Use the AppInstanceUserArn of the user that makes the API call as the value in the header.    This API is is no longer supported and will not be updated. We recommend using the latest version, ListChannelsModeratedByAppInstanceUser, in the Amazon Chime SDK. Using the latest version requires migrating to a dedicated namespace. For more information, refer to   Migrating from the Amazon Chime namespace in the  Amazon Chime SDK Developer Guide.
    ///
    /// Parameters:
    ///   - appInstanceUserArn: The ARN of the user in the moderated channel.
    ///   - chimeBearer: The AppInstanceUserArn of the user that makes the API call.
    ///   - maxResults: The maximum number of channels in the request.
    ///   - nextToken: The token returned from previous API requests until the number of channels moderated by the user is reached.
    ///   - logger: Logger use during operation
    @available(*, deprecated, message: "Replaced by ListChannelsModeratedByAppInstanceUser in the Amazon Chime SDK Messaging Namespace")
    @inlinable
    public func listChannelsModeratedByAppInstanceUser(
        appInstanceUserArn: String? = nil,
        chimeBearer: String? = nil,
        maxResults: Int? = nil,
        nextToken: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> ListChannelsModeratedByAppInstanceUserResponse {
        let input = ListChannelsModeratedByAppInstanceUserRequest(
            appInstanceUserArn: appInstanceUserArn, 
            chimeBearer: chimeBearer, 
            maxResults: maxResults, 
            nextToken: nextToken
        )
        return try await self.listChannelsModeratedByAppInstanceUser(input, logger: logger)
    }

    /// Returns a list of media capture pipelines.   This API is is no longer supported and will not be updated. We recommend using the latest version, ListMediaCapturePipelines, in the Amazon Chime SDK. Using the latest version requires migrating to a dedicated namespace. For more information, refer to   Migrating from the Amazon Chime namespace in the  Amazon Chime SDK Developer Guide.
    @available(*, deprecated, message: "Replaced by ListMediaCapturePipelines in the Amazon Chime SDK Media Pipelines Namespace")
    @Sendable
    @inlinable
    public func listMediaCapturePipelines(_ input: ListMediaCapturePipelinesRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> ListMediaCapturePipelinesResponse {
        try await self.client.execute(
            operation: "ListMediaCapturePipelines", 
            path: "/media-capture-pipelines", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Returns a list of media capture pipelines.   This API is is no longer supported and will not be updated. We recommend using the latest version, ListMediaCapturePipelines, in the Amazon Chime SDK. Using the latest version requires migrating to a dedicated namespace. For more information, refer to   Migrating from the Amazon Chime namespace in the  Amazon Chime SDK Developer Guide.
    ///
    /// Parameters:
    ///   - maxResults: The maximum number of results to return in a single call. Valid Range: 1 - 99.
    ///   - nextToken: The token used to retrieve the next page of results.
    ///   - logger: Logger use during operation
    @available(*, deprecated, message: "Replaced by ListMediaCapturePipelines in the Amazon Chime SDK Media Pipelines Namespace")
    @inlinable
    public func listMediaCapturePipelines(
        maxResults: Int? = nil,
        nextToken: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> ListMediaCapturePipelinesResponse {
        let input = ListMediaCapturePipelinesRequest(
            maxResults: maxResults, 
            nextToken: nextToken
        )
        return try await self.listMediaCapturePipelines(input, logger: logger)
    }

    /// Lists the tags applied to an Amazon Chime SDK meeting resource.   This API is is no longer supported and will not be updated. We recommend using the latest version, ListTagsForResource, in the Amazon Chime SDK. Using the latest version requires migrating to a dedicated namespace. For more information, refer to   Migrating from the Amazon Chime namespace in the  Amazon Chime SDK Developer Guide.
    @available(*, deprecated, message: "Use ListTagsForResource in the Amazon Chime SDK Meetings Namespace.")
    @Sendable
    @inlinable
    public func listMeetingTags(_ input: ListMeetingTagsRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> ListMeetingTagsResponse {
        try await self.client.execute(
            operation: "ListMeetingTags", 
            path: "/meetings/{MeetingId}/tags", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Lists the tags applied to an Amazon Chime SDK meeting resource.   This API is is no longer supported and will not be updated. We recommend using the latest version, ListTagsForResource, in the Amazon Chime SDK. Using the latest version requires migrating to a dedicated namespace. For more information, refer to   Migrating from the Amazon Chime namespace in the  Amazon Chime SDK Developer Guide.
    ///
    /// Parameters:
    ///   - meetingId: The Amazon Chime SDK meeting ID.
    ///   - logger: Logger use during operation
    @available(*, deprecated, message: "Use ListTagsForResource in the Amazon Chime SDK Meetings Namespace.")
    @inlinable
    public func listMeetingTags(
        meetingId: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> ListMeetingTagsResponse {
        let input = ListMeetingTagsRequest(
            meetingId: meetingId
        )
        return try await self.listMeetingTags(input, logger: logger)
    }

    /// Lists up to 100 active Amazon Chime SDK meetings.  ListMeetings is not supported in the Amazon Chime SDK Meetings Namespace. Update your application to remove calls to this API.  For more information about the Amazon Chime SDK, see  Using the Amazon Chime SDK in the Amazon Chime SDK Developer Guide.
    @available(*, deprecated, message: "ListMeetings is not supported in the Amazon Chime SDK Meetings Namespace. Update your application to remove calls to this API.")
    @Sendable
    @inlinable
    public func listMeetings(_ input: ListMeetingsRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> ListMeetingsResponse {
        try await self.client.execute(
            operation: "ListMeetings", 
            path: "/meetings", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Lists up to 100 active Amazon Chime SDK meetings.  ListMeetings is not supported in the Amazon Chime SDK Meetings Namespace. Update your application to remove calls to this API.  For more information about the Amazon Chime SDK, see  Using the Amazon Chime SDK in the Amazon Chime SDK Developer Guide.
    ///
    /// Parameters:
    ///   - maxResults: The maximum number of results to return in a single call.
    ///   - nextToken: The token to use to retrieve the next page of results.
    ///   - logger: Logger use during operation
    @available(*, deprecated, message: "ListMeetings is not supported in the Amazon Chime SDK Meetings Namespace. Update your application to remove calls to this API.")
    @inlinable
    public func listMeetings(
        maxResults: Int? = nil,
        nextToken: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> ListMeetingsResponse {
        let input = ListMeetingsRequest(
            maxResults: maxResults, 
            nextToken: nextToken
        )
        return try await self.listMeetings(input, logger: logger)
    }

    /// Lists the phone number orders for the administrator's Amazon Chime account.
    @Sendable
    @inlinable
    public func listPhoneNumberOrders(_ input: ListPhoneNumberOrdersRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> ListPhoneNumberOrdersResponse {
        try await self.client.execute(
            operation: "ListPhoneNumberOrders", 
            path: "/phone-number-orders", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Lists the phone number orders for the administrator's Amazon Chime account.
    ///
    /// Parameters:
    ///   - maxResults: The maximum number of results to return in a single call.
    ///   - nextToken: The token to use to retrieve the next page of results.
    ///   - logger: Logger use during operation
    @inlinable
    public func listPhoneNumberOrders(
        maxResults: Int? = nil,
        nextToken: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> ListPhoneNumberOrdersResponse {
        let input = ListPhoneNumberOrdersRequest(
            maxResults: maxResults, 
            nextToken: nextToken
        )
        return try await self.listPhoneNumberOrders(input, logger: logger)
    }

    /// Lists the phone numbers for the specified Amazon Chime account, Amazon Chime user, Amazon Chime Voice Connector, or Amazon Chime Voice Connector group.
    @Sendable
    @inlinable
    public func listPhoneNumbers(_ input: ListPhoneNumbersRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> ListPhoneNumbersResponse {
        try await self.client.execute(
            operation: "ListPhoneNumbers", 
            path: "/phone-numbers", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Lists the phone numbers for the specified Amazon Chime account, Amazon Chime user, Amazon Chime Voice Connector, or Amazon Chime Voice Connector group.
    ///
    /// Parameters:
    ///   - filterName: The filter to use to limit the number of results.
    ///   - filterValue: The value to use for the filter.
    ///   - maxResults: The maximum number of results to return in a single call.
    ///   - nextToken: The token to use to retrieve the next page of results.
    ///   - productType: The phone number product type.
    ///   - status: The phone number status.
    ///   - logger: Logger use during operation
    @inlinable
    public func listPhoneNumbers(
        filterName: PhoneNumberAssociationName? = nil,
        filterValue: String? = nil,
        maxResults: Int? = nil,
        nextToken: String? = nil,
        productType: PhoneNumberProductType? = nil,
        status: PhoneNumberStatus? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> ListPhoneNumbersResponse {
        let input = ListPhoneNumbersRequest(
            filterName: filterName, 
            filterValue: filterValue, 
            maxResults: maxResults, 
            nextToken: nextToken, 
            productType: productType, 
            status: status
        )
        return try await self.listPhoneNumbers(input, logger: logger)
    }

    /// Lists the proxy sessions for the specified Amazon Chime Voice Connector.   This API is is no longer supported and will not be updated. We recommend using the latest version, ListProxySessions, in the Amazon Chime SDK. Using the latest version requires migrating to a dedicated namespace. For more information, refer to   Migrating from the Amazon Chime namespace in the  Amazon Chime SDK Developer Guide.
    @available(*, deprecated, message: "Replaced by ListProxySessions in the Amazon Chime SDK Voice Namespace")
    @Sendable
    @inlinable
    public func listProxySessions(_ input: ListProxySessionsRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> ListProxySessionsResponse {
        try await self.client.execute(
            operation: "ListProxySessions", 
            path: "/voice-connectors/{VoiceConnectorId}/proxy-sessions", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Lists the proxy sessions for the specified Amazon Chime Voice Connector.   This API is is no longer supported and will not be updated. We recommend using the latest version, ListProxySessions, in the Amazon Chime SDK. Using the latest version requires migrating to a dedicated namespace. For more information, refer to   Migrating from the Amazon Chime namespace in the  Amazon Chime SDK Developer Guide.
    ///
    /// Parameters:
    ///   - maxResults: The maximum number of results to return in a single call.
    ///   - nextToken: The token to use to retrieve the next page of results.
    ///   - status: The proxy session status.
    ///   - voiceConnectorId: The Amazon Chime voice connector ID.
    ///   - logger: Logger use during operation
    @available(*, deprecated, message: "Replaced by ListProxySessions in the Amazon Chime SDK Voice Namespace")
    @inlinable
    public func listProxySessions(
        maxResults: Int? = nil,
        nextToken: String? = nil,
        status: ProxySessionStatus? = nil,
        voiceConnectorId: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> ListProxySessionsResponse {
        let input = ListProxySessionsRequest(
            maxResults: maxResults, 
            nextToken: nextToken, 
            status: status, 
            voiceConnectorId: voiceConnectorId
        )
        return try await self.listProxySessions(input, logger: logger)
    }

    /// Lists the membership details for the specified room in an Amazon Chime Enterprise account, such as the members' IDs, email addresses, and names.
    @Sendable
    @inlinable
    public func listRoomMemberships(_ input: ListRoomMembershipsRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> ListRoomMembershipsResponse {
        try await self.client.execute(
            operation: "ListRoomMemberships", 
            path: "/accounts/{AccountId}/rooms/{RoomId}/memberships", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Lists the membership details for the specified room in an Amazon Chime Enterprise account, such as the members' IDs, email addresses, and names.
    ///
    /// Parameters:
    ///   - accountId: The Amazon Chime account ID.
    ///   - maxResults: The maximum number of results to return in a single call.
    ///   - nextToken: The token to use to retrieve the next page of results.
    ///   - roomId: The room ID.
    ///   - logger: Logger use during operation
    @inlinable
    public func listRoomMemberships(
        accountId: String,
        maxResults: Int? = nil,
        nextToken: String? = nil,
        roomId: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> ListRoomMembershipsResponse {
        let input = ListRoomMembershipsRequest(
            accountId: accountId, 
            maxResults: maxResults, 
            nextToken: nextToken, 
            roomId: roomId
        )
        return try await self.listRoomMemberships(input, logger: logger)
    }

    /// Lists the room details for the specified Amazon Chime Enterprise account. Optionally, filter the results by a member ID (user ID or bot ID) to see a list of rooms that the member belongs to.
    @Sendable
    @inlinable
    public func listRooms(_ input: ListRoomsRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> ListRoomsResponse {
        try await self.client.execute(
            operation: "ListRooms", 
            path: "/accounts/{AccountId}/rooms", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Lists the room details for the specified Amazon Chime Enterprise account. Optionally, filter the results by a member ID (user ID or bot ID) to see a list of rooms that the member belongs to.
    ///
    /// Parameters:
    ///   - accountId: The Amazon Chime account ID.
    ///   - maxResults: The maximum number of results to return in a single call.
    ///   - memberId: The member ID (user ID or bot ID).
    ///   - nextToken: The token to use to retrieve the next page of results.
    ///   - logger: Logger use during operation
    @inlinable
    public func listRooms(
        accountId: String,
        maxResults: Int? = nil,
        memberId: String? = nil,
        nextToken: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> ListRoomsResponse {
        let input = ListRoomsRequest(
            accountId: accountId, 
            maxResults: maxResults, 
            memberId: memberId, 
            nextToken: nextToken
        )
        return try await self.listRooms(input, logger: logger)
    }

    /// Lists the SIP media applications under the administrator's AWS account.   This API is is no longer supported and will not be updated. We recommend using the latest version, ListSipMediaApplications, in the Amazon Chime SDK. Using the latest version requires migrating to a dedicated namespace. For more information, refer to   Migrating from the Amazon Chime namespace in the  Amazon Chime SDK Developer Guide.
    @available(*, deprecated, message: "Replaced by ListSipMediaApplications in the Amazon Chime SDK Voice Namespace")
    @Sendable
    @inlinable
    public func listSipMediaApplications(_ input: ListSipMediaApplicationsRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> ListSipMediaApplicationsResponse {
        try await self.client.execute(
            operation: "ListSipMediaApplications", 
            path: "/sip-media-applications", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Lists the SIP media applications under the administrator's AWS account.   This API is is no longer supported and will not be updated. We recommend using the latest version, ListSipMediaApplications, in the Amazon Chime SDK. Using the latest version requires migrating to a dedicated namespace. For more information, refer to   Migrating from the Amazon Chime namespace in the  Amazon Chime SDK Developer Guide.
    ///
    /// Parameters:
    ///   - maxResults: The maximum number of results to return in a single call. Defaults to 100.
    ///   - nextToken: The token to use to retrieve the next page of results.
    ///   - logger: Logger use during operation
    @available(*, deprecated, message: "Replaced by ListSipMediaApplications in the Amazon Chime SDK Voice Namespace")
    @inlinable
    public func listSipMediaApplications(
        maxResults: Int? = nil,
        nextToken: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> ListSipMediaApplicationsResponse {
        let input = ListSipMediaApplicationsRequest(
            maxResults: maxResults, 
            nextToken: nextToken
        )
        return try await self.listSipMediaApplications(input, logger: logger)
    }

    /// Lists the SIP rules under the administrator's AWS account.   This API is is no longer supported and will not be updated. We recommend using the latest version, ListSipRules, in the Amazon Chime SDK. Using the latest version requires migrating to a dedicated namespace. For more information, refer to   Migrating from the Amazon Chime namespace in the  Amazon Chime SDK Developer Guide.
    @available(*, deprecated, message: "Replaced by ListSipRules in the Amazon Chime SDK Voice Namespace")
    @Sendable
    @inlinable
    public func listSipRules(_ input: ListSipRulesRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> ListSipRulesResponse {
        try await self.client.execute(
            operation: "ListSipRules", 
            path: "/sip-rules", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Lists the SIP rules under the administrator's AWS account.   This API is is no longer supported and will not be updated. We recommend using the latest version, ListSipRules, in the Amazon Chime SDK. Using the latest version requires migrating to a dedicated namespace. For more information, refer to   Migrating from the Amazon Chime namespace in the  Amazon Chime SDK Developer Guide.
    ///
    /// Parameters:
    ///   - maxResults: The maximum number of results to return in a single call. Defaults to 100.
    ///   - nextToken: The token to use to retrieve the next page of results.
    ///   - sipMediaApplicationId: The SIP media application ID.
    ///   - logger: Logger use during operation
    @available(*, deprecated, message: "Replaced by ListSipRules in the Amazon Chime SDK Voice Namespace")
    @inlinable
    public func listSipRules(
        maxResults: Int? = nil,
        nextToken: String? = nil,
        sipMediaApplicationId: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> ListSipRulesResponse {
        let input = ListSipRulesRequest(
            maxResults: maxResults, 
            nextToken: nextToken, 
            sipMediaApplicationId: sipMediaApplicationId
        )
        return try await self.listSipRules(input, logger: logger)
    }

    /// Lists supported phone number countries.
    @Sendable
    @inlinable
    public func listSupportedPhoneNumberCountries(_ input: ListSupportedPhoneNumberCountriesRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> ListSupportedPhoneNumberCountriesResponse {
        try await self.client.execute(
            operation: "ListSupportedPhoneNumberCountries", 
            path: "/phone-number-countries", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Lists supported phone number countries.
    ///
    /// Parameters:
    ///   - productType: The phone number product type.
    ///   - logger: Logger use during operation
    @inlinable
    public func listSupportedPhoneNumberCountries(
        productType: PhoneNumberProductType,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> ListSupportedPhoneNumberCountriesResponse {
        let input = ListSupportedPhoneNumberCountriesRequest(
            productType: productType
        )
        return try await self.listSupportedPhoneNumberCountries(input, logger: logger)
    }

    /// Lists the tags applied to an Amazon Chime SDK meeting and messaging resources.   This API is is no longer supported and will not be updated. We recommend using the applicable latest version in the Amazon Chime SDK.   For meetings: ListTagsForResource.   For messaging: ListTagsForResource.   Using the latest version requires migrating to a dedicated namespace. For more information, refer to   Migrating from the Amazon Chime namespace in the  Amazon Chime SDK Developer Guide.
    @available(*, deprecated, message: "Replaced by ListTagsForResource in the Amazon Chime SDK Voice, Amazon Chime SDK Meetings, Amazon Chime SDK Identity, Amazon Chime SDK Messaging, and Amazon Chime SDK Media Pipelines Namespaces")
    @Sendable
    @inlinable
    public func listTagsForResource(_ input: ListTagsForResourceRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> ListTagsForResourceResponse {
        try await self.client.execute(
            operation: "ListTagsForResource", 
            path: "/tags", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Lists the tags applied to an Amazon Chime SDK meeting and messaging resources.   This API is is no longer supported and will not be updated. We recommend using the applicable latest version in the Amazon Chime SDK.   For meetings: ListTagsForResource.   For messaging: ListTagsForResource.   Using the latest version requires migrating to a dedicated namespace. For more information, refer to   Migrating from the Amazon Chime namespace in the  Amazon Chime SDK Developer Guide.
    ///
    /// Parameters:
    ///   - resourceARN: The resource ARN.
    ///   - logger: Logger use during operation
    @available(*, deprecated, message: "Replaced by ListTagsForResource in the Amazon Chime SDK Voice, Amazon Chime SDK Meetings, Amazon Chime SDK Identity, Amazon Chime SDK Messaging, and Amazon Chime SDK Media Pipelines Namespaces")
    @inlinable
    public func listTagsForResource(
        resourceARN: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> ListTagsForResourceResponse {
        let input = ListTagsForResourceRequest(
            resourceARN: resourceARN
        )
        return try await self.listTagsForResource(input, logger: logger)
    }

    /// Lists the users that belong to the specified Amazon Chime account. You can specify an email address to list only the user that the email address belongs to.
    @Sendable
    @inlinable
    public func listUsers(_ input: ListUsersRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> ListUsersResponse {
        try await self.client.execute(
            operation: "ListUsers", 
            path: "/accounts/{AccountId}/users", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Lists the users that belong to the specified Amazon Chime account. You can specify an email address to list only the user that the email address belongs to.
    ///
    /// Parameters:
    ///   - accountId: The Amazon Chime account ID.
    ///   - maxResults: The maximum number of results to return in a single call. Defaults to 100.
    ///   - nextToken: The token to use to retrieve the next page of results.
    ///   - userEmail: Optional. The user email address used to filter results. Maximum 1.
    ///   - userType: The user type.
    ///   - logger: Logger use during operation
    @inlinable
    public func listUsers(
        accountId: String,
        maxResults: Int? = nil,
        nextToken: String? = nil,
        userEmail: String? = nil,
        userType: UserType? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> ListUsersResponse {
        let input = ListUsersRequest(
            accountId: accountId, 
            maxResults: maxResults, 
            nextToken: nextToken, 
            userEmail: userEmail, 
            userType: userType
        )
        return try await self.listUsers(input, logger: logger)
    }

    /// Lists the Amazon Chime Voice Connector groups for the administrator's AWS account.   This API is is no longer supported and will not be updated. We recommend using the latest version, ListVoiceConnectorGroups, in the Amazon Chime SDK. Using the latest version requires migrating to a dedicated namespace. For more information, refer to   Migrating from the Amazon Chime namespace in the  Amazon Chime SDK Developer Guide.
    @available(*, deprecated, message: "Replaced by ListVoiceConnectorGroups in the Amazon Chime SDK Voice Namespace")
    @Sendable
    @inlinable
    public func listVoiceConnectorGroups(_ input: ListVoiceConnectorGroupsRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> ListVoiceConnectorGroupsResponse {
        try await self.client.execute(
            operation: "ListVoiceConnectorGroups", 
            path: "/voice-connector-groups", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Lists the Amazon Chime Voice Connector groups for the administrator's AWS account.   This API is is no longer supported and will not be updated. We recommend using the latest version, ListVoiceConnectorGroups, in the Amazon Chime SDK. Using the latest version requires migrating to a dedicated namespace. For more information, refer to   Migrating from the Amazon Chime namespace in the  Amazon Chime SDK Developer Guide.
    ///
    /// Parameters:
    ///   - maxResults: The maximum number of results to return in a single call.
    ///   - nextToken: The token to use to retrieve the next page of results.
    ///   - logger: Logger use during operation
    @available(*, deprecated, message: "Replaced by ListVoiceConnectorGroups in the Amazon Chime SDK Voice Namespace")
    @inlinable
    public func listVoiceConnectorGroups(
        maxResults: Int? = nil,
        nextToken: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> ListVoiceConnectorGroupsResponse {
        let input = ListVoiceConnectorGroupsRequest(
            maxResults: maxResults, 
            nextToken: nextToken
        )
        return try await self.listVoiceConnectorGroups(input, logger: logger)
    }

    /// Lists the SIP credentials for the specified Amazon Chime Voice Connector.   This API is is no longer supported and will not be updated. We recommend using the latest version, ListVoiceConnectorTerminationCredentials, in the Amazon Chime SDK. Using the latest version requires migrating to a dedicated namespace. For more information, refer to   Migrating from the Amazon Chime namespace in the  Amazon Chime SDK Developer Guide.
    @available(*, deprecated, message: "Replaced by ListVoiceConnectorTerminationCredentials in the Amazon Chime SDK Voice Namespace")
    @Sendable
    @inlinable
    public func listVoiceConnectorTerminationCredentials(_ input: ListVoiceConnectorTerminationCredentialsRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> ListVoiceConnectorTerminationCredentialsResponse {
        try await self.client.execute(
            operation: "ListVoiceConnectorTerminationCredentials", 
            path: "/voice-connectors/{VoiceConnectorId}/termination/credentials", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Lists the SIP credentials for the specified Amazon Chime Voice Connector.   This API is is no longer supported and will not be updated. We recommend using the latest version, ListVoiceConnectorTerminationCredentials, in the Amazon Chime SDK. Using the latest version requires migrating to a dedicated namespace. For more information, refer to   Migrating from the Amazon Chime namespace in the  Amazon Chime SDK Developer Guide.
    ///
    /// Parameters:
    ///   - voiceConnectorId: The Amazon Chime Voice Connector ID.
    ///   - logger: Logger use during operation
    @available(*, deprecated, message: "Replaced by ListVoiceConnectorTerminationCredentials in the Amazon Chime SDK Voice Namespace")
    @inlinable
    public func listVoiceConnectorTerminationCredentials(
        voiceConnectorId: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> ListVoiceConnectorTerminationCredentialsResponse {
        let input = ListVoiceConnectorTerminationCredentialsRequest(
            voiceConnectorId: voiceConnectorId
        )
        return try await self.listVoiceConnectorTerminationCredentials(input, logger: logger)
    }

    /// Lists the Amazon Chime Voice Connectors for the administrator's AWS account.   This API is is no longer supported and will not be updated. We recommend using the latest version, ListVoiceConnectors, in the Amazon Chime SDK. Using the latest version requires migrating to a dedicated namespace. For more information, refer to   Migrating from the Amazon Chime namespace in the  Amazon Chime SDK Developer Guide.
    @available(*, deprecated, message: "Replaced by ListVoiceConnectors in the Amazon Chime SDK Voice Namespace")
    @Sendable
    @inlinable
    public func listVoiceConnectors(_ input: ListVoiceConnectorsRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> ListVoiceConnectorsResponse {
        try await self.client.execute(
            operation: "ListVoiceConnectors", 
            path: "/voice-connectors", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Lists the Amazon Chime Voice Connectors for the administrator's AWS account.   This API is is no longer supported and will not be updated. We recommend using the latest version, ListVoiceConnectors, in the Amazon Chime SDK. Using the latest version requires migrating to a dedicated namespace. For more information, refer to   Migrating from the Amazon Chime namespace in the  Amazon Chime SDK Developer Guide.
    ///
    /// Parameters:
    ///   - maxResults: The maximum number of results to return in a single call.
    ///   - nextToken: The token to use to retrieve the next page of results.
    ///   - logger: Logger use during operation
    @available(*, deprecated, message: "Replaced by ListVoiceConnectors in the Amazon Chime SDK Voice Namespace")
    @inlinable
    public func listVoiceConnectors(
        maxResults: Int? = nil,
        nextToken: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> ListVoiceConnectorsResponse {
        let input = ListVoiceConnectorsRequest(
            maxResults: maxResults, 
            nextToken: nextToken
        )
        return try await self.listVoiceConnectors(input, logger: logger)
    }

    /// Logs out the specified user from all of the devices they are currently logged into.
    @Sendable
    @inlinable
    public func logoutUser(_ input: LogoutUserRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> LogoutUserResponse {
        try await self.client.execute(
            operation: "LogoutUser", 
            path: "/accounts/{AccountId}/users/{UserId}?operation=logout", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Logs out the specified user from all of the devices they are currently logged into.
    ///
    /// Parameters:
    ///   - accountId: The Amazon Chime account ID.
    ///   - userId: The user ID.
    ///   - logger: Logger use during operation
    @inlinable
    public func logoutUser(
        accountId: String,
        userId: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> LogoutUserResponse {
        let input = LogoutUserRequest(
            accountId: accountId, 
            userId: userId
        )
        return try await self.logoutUser(input, logger: logger)
    }

    /// Sets the amount of time in days that a given AppInstance retains data.   This API is is no longer supported and will not be updated. We recommend using the latest version, PutAppInstanceRetentionSettings, in the Amazon Chime SDK. Using the latest version requires migrating to a dedicated namespace. For more information, refer to   Migrating from the Amazon Chime namespace in the  Amazon Chime SDK Developer Guide.
    @available(*, deprecated, message: "Replaced by PutAppInstanceRetentionSettings in the Amazon Chime SDK Identity Namespace")
    @Sendable
    @inlinable
    public func putAppInstanceRetentionSettings(_ input: PutAppInstanceRetentionSettingsRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> PutAppInstanceRetentionSettingsResponse {
        try await self.client.execute(
            operation: "PutAppInstanceRetentionSettings", 
            path: "/app-instances/{AppInstanceArn}/retention-settings", 
            httpMethod: .PUT, 
            serviceConfig: self.config, 
            input: input, 
            hostPrefix: "identity-", 
            logger: logger
        )
    }
    /// Sets the amount of time in days that a given AppInstance retains data.   This API is is no longer supported and will not be updated. We recommend using the latest version, PutAppInstanceRetentionSettings, in the Amazon Chime SDK. Using the latest version requires migrating to a dedicated namespace. For more information, refer to   Migrating from the Amazon Chime namespace in the  Amazon Chime SDK Developer Guide.
    ///
    /// Parameters:
    ///   - appInstanceArn: The ARN of the AppInstance.
    ///   - appInstanceRetentionSettings: The time in days to retain data. Data type: number.
    ///   - logger: Logger use during operation
    @available(*, deprecated, message: "Replaced by PutAppInstanceRetentionSettings in the Amazon Chime SDK Identity Namespace")
    @inlinable
    public func putAppInstanceRetentionSettings(
        appInstanceArn: String,
        appInstanceRetentionSettings: AppInstanceRetentionSettings,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> PutAppInstanceRetentionSettingsResponse {
        let input = PutAppInstanceRetentionSettingsRequest(
            appInstanceArn: appInstanceArn, 
            appInstanceRetentionSettings: appInstanceRetentionSettings
        )
        return try await self.putAppInstanceRetentionSettings(input, logger: logger)
    }

    /// The data streaming configurations of an AppInstance.   This API is is no longer supported and will not be updated. We recommend using the latest version, PutMessagingStreamingConfigurations, in the Amazon Chime SDK. Using the latest version requires migrating to a dedicated namespace. For more information, refer to   Migrating from the Amazon Chime namespace in the  Amazon Chime SDK Developer Guide.
    @available(*, deprecated, message: "Replaced by PutAppInstanceStreamingConfigurations in the Amazon Chime SDK Messaging Namespace")
    @Sendable
    @inlinable
    public func putAppInstanceStreamingConfigurations(_ input: PutAppInstanceStreamingConfigurationsRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> PutAppInstanceStreamingConfigurationsResponse {
        try await self.client.execute(
            operation: "PutAppInstanceStreamingConfigurations", 
            path: "/app-instances/{AppInstanceArn}/streaming-configurations", 
            httpMethod: .PUT, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// The data streaming configurations of an AppInstance.   This API is is no longer supported and will not be updated. We recommend using the latest version, PutMessagingStreamingConfigurations, in the Amazon Chime SDK. Using the latest version requires migrating to a dedicated namespace. For more information, refer to   Migrating from the Amazon Chime namespace in the  Amazon Chime SDK Developer Guide.
    ///
    /// Parameters:
    ///   - appInstanceArn: The ARN of the AppInstance.
    ///   - appInstanceStreamingConfigurations: The streaming configurations set for an AppInstance.
    ///   - logger: Logger use during operation
    @available(*, deprecated, message: "Replaced by PutAppInstanceStreamingConfigurations in the Amazon Chime SDK Messaging Namespace")
    @inlinable
    public func putAppInstanceStreamingConfigurations(
        appInstanceArn: String,
        appInstanceStreamingConfigurations: [AppInstanceStreamingConfiguration],
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> PutAppInstanceStreamingConfigurationsResponse {
        let input = PutAppInstanceStreamingConfigurationsRequest(
            appInstanceArn: appInstanceArn, 
            appInstanceStreamingConfigurations: appInstanceStreamingConfigurations
        )
        return try await self.putAppInstanceStreamingConfigurations(input, logger: logger)
    }

    /// Creates an events configuration that allows a bot to receive outgoing events sent by Amazon Chime. Choose either an HTTPS endpoint or a Lambda function ARN. For more information, see Bot.
    @Sendable
    @inlinable
    public func putEventsConfiguration(_ input: PutEventsConfigurationRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> PutEventsConfigurationResponse {
        try await self.client.execute(
            operation: "PutEventsConfiguration", 
            path: "/accounts/{AccountId}/bots/{BotId}/events-configuration", 
            httpMethod: .PUT, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Creates an events configuration that allows a bot to receive outgoing events sent by Amazon Chime. Choose either an HTTPS endpoint or a Lambda function ARN. For more information, see Bot.
    ///
    /// Parameters:
    ///   - accountId: The Amazon Chime account ID.
    ///   - botId: The bot ID.
    ///   - lambdaFunctionArn: Lambda function ARN that allows the bot to receive outgoing events.
    ///   - outboundEventsHTTPSEndpoint: HTTPS endpoint that allows the bot to receive outgoing events.
    ///   - logger: Logger use during operation
    @inlinable
    public func putEventsConfiguration(
        accountId: String,
        botId: String,
        lambdaFunctionArn: String? = nil,
        outboundEventsHTTPSEndpoint: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> PutEventsConfigurationResponse {
        let input = PutEventsConfigurationRequest(
            accountId: accountId, 
            botId: botId, 
            lambdaFunctionArn: lambdaFunctionArn, 
            outboundEventsHTTPSEndpoint: outboundEventsHTTPSEndpoint
        )
        return try await self.putEventsConfiguration(input, logger: logger)
    }

    /// Puts retention settings for the specified Amazon Chime Enterprise account. We recommend using AWS CloudTrail to monitor usage of this API for your account. For more information, see
    /// Logging Amazon Chime API Calls with AWS CloudTrail
    /// in the Amazon Chime Administration Guide.
    /// To turn off existing retention settings, remove the number of days from the corresponding
    /// RetentionDays
    /// field in the
    /// RetentionSettings
    /// object. For more information about retention settings, see
    /// Managing Chat Retention Policies
    /// in the Amazon Chime Administration Guide.
    @Sendable
    @inlinable
    public func putRetentionSettings(_ input: PutRetentionSettingsRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> PutRetentionSettingsResponse {
        try await self.client.execute(
            operation: "PutRetentionSettings", 
            path: "/accounts/{AccountId}/retention-settings", 
            httpMethod: .PUT, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Puts retention settings for the specified Amazon Chime Enterprise account. We recommend using AWS CloudTrail to monitor usage of this API for your account. For more information, see
    /// Logging Amazon Chime API Calls with AWS CloudTrail
    /// in the Amazon Chime Administration Guide.
    /// To turn off existing retention settings, remove the number of days from the corresponding
    /// RetentionDays
    /// field in the
    /// RetentionSettings
    /// object. For more information about retention settings, see
    /// Managing Chat Retention Policies
    /// in the Amazon Chime Administration Guide.
    ///
    /// Parameters:
    ///   - accountId: The Amazon Chime account ID.
    ///   - retentionSettings: The retention settings.
    ///   - logger: Logger use during operation
    @inlinable
    public func putRetentionSettings(
        accountId: String,
        retentionSettings: RetentionSettings,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> PutRetentionSettingsResponse {
        let input = PutRetentionSettingsRequest(
            accountId: accountId, 
            retentionSettings: retentionSettings
        )
        return try await self.putRetentionSettings(input, logger: logger)
    }

    /// Updates the logging configuration for the specified SIP media application.   This API is is no longer supported and will not be updated. We recommend using the latest version, PutSipMediaApplicationLoggingConfiguration, in the Amazon Chime SDK. Using the latest version requires migrating to a dedicated namespace. For more information, refer to   Migrating from the Amazon Chime namespace in the  Amazon Chime SDK Developer Guide.
    @available(*, deprecated, message: "Replaced by PutSipMediaApplicationLoggingConfiguration in the Amazon Chime SDK Voice Namespace")
    @Sendable
    @inlinable
    public func putSipMediaApplicationLoggingConfiguration(_ input: PutSipMediaApplicationLoggingConfigurationRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> PutSipMediaApplicationLoggingConfigurationResponse {
        try await self.client.execute(
            operation: "PutSipMediaApplicationLoggingConfiguration", 
            path: "/sip-media-applications/{SipMediaApplicationId}/logging-configuration", 
            httpMethod: .PUT, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Updates the logging configuration for the specified SIP media application.   This API is is no longer supported and will not be updated. We recommend using the latest version, PutSipMediaApplicationLoggingConfiguration, in the Amazon Chime SDK. Using the latest version requires migrating to a dedicated namespace. For more information, refer to   Migrating from the Amazon Chime namespace in the  Amazon Chime SDK Developer Guide.
    ///
    /// Parameters:
    ///   - sipMediaApplicationId: The SIP media application ID.
    ///   - sipMediaApplicationLoggingConfiguration: The actual logging configuration.
    ///   - logger: Logger use during operation
    @available(*, deprecated, message: "Replaced by PutSipMediaApplicationLoggingConfiguration in the Amazon Chime SDK Voice Namespace")
    @inlinable
    public func putSipMediaApplicationLoggingConfiguration(
        sipMediaApplicationId: String,
        sipMediaApplicationLoggingConfiguration: SipMediaApplicationLoggingConfiguration? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> PutSipMediaApplicationLoggingConfigurationResponse {
        let input = PutSipMediaApplicationLoggingConfigurationRequest(
            sipMediaApplicationId: sipMediaApplicationId, 
            sipMediaApplicationLoggingConfiguration: sipMediaApplicationLoggingConfiguration
        )
        return try await self.putSipMediaApplicationLoggingConfiguration(input, logger: logger)
    }

    /// Puts emergency calling configuration details to the specified Amazon Chime Voice Connector, such as emergency phone numbers and calling countries. Origination and termination settings must be enabled for  the Amazon Chime Voice Connector before emergency calling can be configured.   This API is is no longer supported and will not be updated. We recommend using the latest version, PutVoiceConnectorEmergencyCallingConfiguration, in the Amazon Chime SDK. Using the latest version requires migrating to a dedicated namespace. For more information, refer to   Migrating from the Amazon Chime namespace in the  Amazon Chime SDK Developer Guide.
    @available(*, deprecated, message: "Replaced by PutVoiceConnectorEmergencyCallingConfiguration in the Amazon Chime SDK Voice Namespace")
    @Sendable
    @inlinable
    public func putVoiceConnectorEmergencyCallingConfiguration(_ input: PutVoiceConnectorEmergencyCallingConfigurationRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> PutVoiceConnectorEmergencyCallingConfigurationResponse {
        try await self.client.execute(
            operation: "PutVoiceConnectorEmergencyCallingConfiguration", 
            path: "/voice-connectors/{VoiceConnectorId}/emergency-calling-configuration", 
            httpMethod: .PUT, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Puts emergency calling configuration details to the specified Amazon Chime Voice Connector, such as emergency phone numbers and calling countries. Origination and termination settings must be enabled for  the Amazon Chime Voice Connector before emergency calling can be configured.   This API is is no longer supported and will not be updated. We recommend using the latest version, PutVoiceConnectorEmergencyCallingConfiguration, in the Amazon Chime SDK. Using the latest version requires migrating to a dedicated namespace. For more information, refer to   Migrating from the Amazon Chime namespace in the  Amazon Chime SDK Developer Guide.
    ///
    /// Parameters:
    ///   - emergencyCallingConfiguration: The emergency calling configuration details.
    ///   - voiceConnectorId: The Amazon Chime Voice Connector ID.
    ///   - logger: Logger use during operation
    @available(*, deprecated, message: "Replaced by PutVoiceConnectorEmergencyCallingConfiguration in the Amazon Chime SDK Voice Namespace")
    @inlinable
    public func putVoiceConnectorEmergencyCallingConfiguration(
        emergencyCallingConfiguration: EmergencyCallingConfiguration,
        voiceConnectorId: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> PutVoiceConnectorEmergencyCallingConfigurationResponse {
        let input = PutVoiceConnectorEmergencyCallingConfigurationRequest(
            emergencyCallingConfiguration: emergencyCallingConfiguration, 
            voiceConnectorId: voiceConnectorId
        )
        return try await self.putVoiceConnectorEmergencyCallingConfiguration(input, logger: logger)
    }

    /// Adds a logging configuration for the specified Amazon Chime Voice Connector. The logging configuration specifies whether SIP message logs are enabled for sending to  Amazon CloudWatch Logs.   This API is is no longer supported and will not be updated. We recommend using the latest version, PutVoiceConnectorLoggingConfiguration, in the Amazon Chime SDK. Using the latest version requires migrating to a dedicated namespace. For more information, refer to   Migrating from the Amazon Chime namespace in the  Amazon Chime SDK Developer Guide.
    @available(*, deprecated, message: "Replaced by PutVoiceConnectorLoggingConfiguration in the Amazon Chime SDK Voice Namespace")
    @Sendable
    @inlinable
    public func putVoiceConnectorLoggingConfiguration(_ input: PutVoiceConnectorLoggingConfigurationRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> PutVoiceConnectorLoggingConfigurationResponse {
        try await self.client.execute(
            operation: "PutVoiceConnectorLoggingConfiguration", 
            path: "/voice-connectors/{VoiceConnectorId}/logging-configuration", 
            httpMethod: .PUT, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Adds a logging configuration for the specified Amazon Chime Voice Connector. The logging configuration specifies whether SIP message logs are enabled for sending to  Amazon CloudWatch Logs.   This API is is no longer supported and will not be updated. We recommend using the latest version, PutVoiceConnectorLoggingConfiguration, in the Amazon Chime SDK. Using the latest version requires migrating to a dedicated namespace. For more information, refer to   Migrating from the Amazon Chime namespace in the  Amazon Chime SDK Developer Guide.
    ///
    /// Parameters:
    ///   - loggingConfiguration: The logging configuration details to add.
    ///   - voiceConnectorId: The Amazon Chime Voice Connector ID.
    ///   - logger: Logger use during operation
    @available(*, deprecated, message: "Replaced by PutVoiceConnectorLoggingConfiguration in the Amazon Chime SDK Voice Namespace")
    @inlinable
    public func putVoiceConnectorLoggingConfiguration(
        loggingConfiguration: LoggingConfiguration,
        voiceConnectorId: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> PutVoiceConnectorLoggingConfigurationResponse {
        let input = PutVoiceConnectorLoggingConfigurationRequest(
            loggingConfiguration: loggingConfiguration, 
            voiceConnectorId: voiceConnectorId
        )
        return try await self.putVoiceConnectorLoggingConfiguration(input, logger: logger)
    }

    /// Adds origination settings for the specified Amazon Chime Voice Connector.  If emergency calling is configured for the Amazon Chime Voice Connector, it must be deleted prior to turning off origination settings.    This API is is no longer supported and will not be updated. We recommend using the latest version, PutVoiceConnectorOrigination, in the Amazon Chime SDK. Using the latest version requires migrating to a dedicated namespace. For more information, refer to   Migrating from the Amazon Chime namespace in the  Amazon Chime SDK Developer Guide.
    @available(*, deprecated, message: "Replaced by PutVoiceConnectorOrigination in the Amazon Chime SDK Voice Namespace")
    @Sendable
    @inlinable
    public func putVoiceConnectorOrigination(_ input: PutVoiceConnectorOriginationRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> PutVoiceConnectorOriginationResponse {
        try await self.client.execute(
            operation: "PutVoiceConnectorOrigination", 
            path: "/voice-connectors/{VoiceConnectorId}/origination", 
            httpMethod: .PUT, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Adds origination settings for the specified Amazon Chime Voice Connector.  If emergency calling is configured for the Amazon Chime Voice Connector, it must be deleted prior to turning off origination settings.    This API is is no longer supported and will not be updated. We recommend using the latest version, PutVoiceConnectorOrigination, in the Amazon Chime SDK. Using the latest version requires migrating to a dedicated namespace. For more information, refer to   Migrating from the Amazon Chime namespace in the  Amazon Chime SDK Developer Guide.
    ///
    /// Parameters:
    ///   - origination: The origination setting details to add.
    ///   - voiceConnectorId: The Amazon Chime Voice Connector ID.
    ///   - logger: Logger use during operation
    @available(*, deprecated, message: "Replaced by PutVoiceConnectorOrigination in the Amazon Chime SDK Voice Namespace")
    @inlinable
    public func putVoiceConnectorOrigination(
        origination: Origination,
        voiceConnectorId: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> PutVoiceConnectorOriginationResponse {
        let input = PutVoiceConnectorOriginationRequest(
            origination: origination, 
            voiceConnectorId: voiceConnectorId
        )
        return try await self.putVoiceConnectorOrigination(input, logger: logger)
    }

    /// Puts the specified proxy configuration to the specified Amazon Chime Voice Connector.   This API is is no longer supported and will not be updated. We recommend using the latest version, PutVoiceConnectorProxy, in the Amazon Chime SDK. Using the latest version requires migrating to a dedicated namespace. For more information, refer to   Migrating from the Amazon Chime namespace in the  Amazon Chime SDK Developer Guide.
    @available(*, deprecated, message: "Replaced by PutVoiceConnectorProxy in the Amazon Chime SDK Voice Namespace")
    @Sendable
    @inlinable
    public func putVoiceConnectorProxy(_ input: PutVoiceConnectorProxyRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> PutVoiceConnectorProxyResponse {
        try await self.client.execute(
            operation: "PutVoiceConnectorProxy", 
            path: "/voice-connectors/{VoiceConnectorId}/programmable-numbers/proxy", 
            httpMethod: .PUT, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Puts the specified proxy configuration to the specified Amazon Chime Voice Connector.   This API is is no longer supported and will not be updated. We recommend using the latest version, PutVoiceConnectorProxy, in the Amazon Chime SDK. Using the latest version requires migrating to a dedicated namespace. For more information, refer to   Migrating from the Amazon Chime namespace in the  Amazon Chime SDK Developer Guide.
    ///
    /// Parameters:
    ///   - defaultSessionExpiryMinutes: The default number of minutes allowed for proxy sessions.
    ///   - disabled: When true, stops proxy sessions from being created on the specified Amazon Chime Voice Connector.
    ///   - fallBackPhoneNumber: The phone number to route calls to after a proxy session expires.
    ///   - phoneNumberPoolCountries: The countries for proxy phone numbers to be selected from.
    ///   - voiceConnectorId: The Amazon Chime voice connector ID.
    ///   - logger: Logger use during operation
    @available(*, deprecated, message: "Replaced by PutVoiceConnectorProxy in the Amazon Chime SDK Voice Namespace")
    @inlinable
    public func putVoiceConnectorProxy(
        defaultSessionExpiryMinutes: Int,
        disabled: Bool? = nil,
        fallBackPhoneNumber: String? = nil,
        phoneNumberPoolCountries: [String],
        voiceConnectorId: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> PutVoiceConnectorProxyResponse {
        let input = PutVoiceConnectorProxyRequest(
            defaultSessionExpiryMinutes: defaultSessionExpiryMinutes, 
            disabled: disabled, 
            fallBackPhoneNumber: fallBackPhoneNumber, 
            phoneNumberPoolCountries: phoneNumberPoolCountries, 
            voiceConnectorId: voiceConnectorId
        )
        return try await self.putVoiceConnectorProxy(input, logger: logger)
    }

    /// Adds a streaming configuration for the specified Amazon Chime Voice Connector. The streaming configuration specifies whether media streaming is enabled for sending to Kinesis. It also sets the retention period, in hours, for the Amazon Kinesis data.   This API is is no longer supported and will not be updated. We recommend using the latest version, PutVoiceConnectorStreamingConfiguration, in the Amazon Chime SDK. Using the latest version requires migrating to a dedicated namespace. For more information, refer to   Migrating from the Amazon Chime namespace in the  Amazon Chime SDK Developer Guide.
    @available(*, deprecated, message: "Replaced by PutVoiceConnectorStreamingConfiguration in the Amazon Chime SDK Voice Namespace")
    @Sendable
    @inlinable
    public func putVoiceConnectorStreamingConfiguration(_ input: PutVoiceConnectorStreamingConfigurationRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> PutVoiceConnectorStreamingConfigurationResponse {
        try await self.client.execute(
            operation: "PutVoiceConnectorStreamingConfiguration", 
            path: "/voice-connectors/{VoiceConnectorId}/streaming-configuration", 
            httpMethod: .PUT, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Adds a streaming configuration for the specified Amazon Chime Voice Connector. The streaming configuration specifies whether media streaming is enabled for sending to Kinesis. It also sets the retention period, in hours, for the Amazon Kinesis data.   This API is is no longer supported and will not be updated. We recommend using the latest version, PutVoiceConnectorStreamingConfiguration, in the Amazon Chime SDK. Using the latest version requires migrating to a dedicated namespace. For more information, refer to   Migrating from the Amazon Chime namespace in the  Amazon Chime SDK Developer Guide.
    ///
    /// Parameters:
    ///   - streamingConfiguration: The streaming configuration details to add.
    ///   - voiceConnectorId: The Amazon Chime Voice Connector ID.
    ///   - logger: Logger use during operation
    @available(*, deprecated, message: "Replaced by PutVoiceConnectorStreamingConfiguration in the Amazon Chime SDK Voice Namespace")
    @inlinable
    public func putVoiceConnectorStreamingConfiguration(
        streamingConfiguration: StreamingConfiguration,
        voiceConnectorId: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> PutVoiceConnectorStreamingConfigurationResponse {
        let input = PutVoiceConnectorStreamingConfigurationRequest(
            streamingConfiguration: streamingConfiguration, 
            voiceConnectorId: voiceConnectorId
        )
        return try await self.putVoiceConnectorStreamingConfiguration(input, logger: logger)
    }

    /// Adds termination settings for the specified Amazon Chime Voice Connector.  If emergency calling is configured for the Amazon Chime Voice Connector, it must be deleted prior to turning off termination settings.    This API is is no longer supported and will not be updated. We recommend using the latest version, PutVoiceConnectorTermination, in the Amazon Chime SDK. Using the latest version requires migrating to a dedicated namespace. For more information, refer to   Migrating from the Amazon Chime namespace in the  Amazon Chime SDK Developer Guide.
    @available(*, deprecated, message: "Replaced by PutVoiceConnectorTermination in the Amazon Chime SDK Voice Namespace")
    @Sendable
    @inlinable
    public func putVoiceConnectorTermination(_ input: PutVoiceConnectorTerminationRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> PutVoiceConnectorTerminationResponse {
        try await self.client.execute(
            operation: "PutVoiceConnectorTermination", 
            path: "/voice-connectors/{VoiceConnectorId}/termination", 
            httpMethod: .PUT, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Adds termination settings for the specified Amazon Chime Voice Connector.  If emergency calling is configured for the Amazon Chime Voice Connector, it must be deleted prior to turning off termination settings.    This API is is no longer supported and will not be updated. We recommend using the latest version, PutVoiceConnectorTermination, in the Amazon Chime SDK. Using the latest version requires migrating to a dedicated namespace. For more information, refer to   Migrating from the Amazon Chime namespace in the  Amazon Chime SDK Developer Guide.
    ///
    /// Parameters:
    ///   - termination: The termination setting details to add.
    ///   - voiceConnectorId: The Amazon Chime Voice Connector ID.
    ///   - logger: Logger use during operation
    @available(*, deprecated, message: "Replaced by PutVoiceConnectorTermination in the Amazon Chime SDK Voice Namespace")
    @inlinable
    public func putVoiceConnectorTermination(
        termination: Termination,
        voiceConnectorId: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> PutVoiceConnectorTerminationResponse {
        let input = PutVoiceConnectorTerminationRequest(
            termination: termination, 
            voiceConnectorId: voiceConnectorId
        )
        return try await self.putVoiceConnectorTermination(input, logger: logger)
    }

    /// Adds termination SIP credentials for the specified Amazon Chime Voice Connector.   This API is is no longer supported and will not be updated. We recommend using the latest version, PutVoiceConnectorTerminationCredentials, in the Amazon Chime SDK. Using the latest version requires migrating to a dedicated namespace. For more information, refer to   Migrating from the Amazon Chime namespace in the  Amazon Chime SDK Developer Guide.
    @available(*, deprecated, message: "Replaced by PutVoiceConnectorTerminationCredentials in the Amazon Chime SDK Voice Namespace")
    @Sendable
    @inlinable
    public func putVoiceConnectorTerminationCredentials(_ input: PutVoiceConnectorTerminationCredentialsRequest, logger: Logger = AWSClient.loggingDisabled) async throws {
        try await self.client.execute(
            operation: "PutVoiceConnectorTerminationCredentials", 
            path: "/voice-connectors/{VoiceConnectorId}/termination/credentials?operation=put", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Adds termination SIP credentials for the specified Amazon Chime Voice Connector.   This API is is no longer supported and will not be updated. We recommend using the latest version, PutVoiceConnectorTerminationCredentials, in the Amazon Chime SDK. Using the latest version requires migrating to a dedicated namespace. For more information, refer to   Migrating from the Amazon Chime namespace in the  Amazon Chime SDK Developer Guide.
    ///
    /// Parameters:
    ///   - credentials: The termination SIP credentials.
    ///   - voiceConnectorId: The Amazon Chime Voice Connector ID.
    ///   - logger: Logger use during operation
    @available(*, deprecated, message: "Replaced by PutVoiceConnectorTerminationCredentials in the Amazon Chime SDK Voice Namespace")
    @inlinable
    public func putVoiceConnectorTerminationCredentials(
        credentials: [Credential]? = nil,
        voiceConnectorId: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws {
        let input = PutVoiceConnectorTerminationCredentialsRequest(
            credentials: credentials, 
            voiceConnectorId: voiceConnectorId
        )
        return try await self.putVoiceConnectorTerminationCredentials(input, logger: logger)
    }

    /// Redacts message content, but not metadata. The message exists in the back end, but the action returns null content, and the state shows as redacted.  The x-amz-chime-bearer request header is mandatory. Use the AppInstanceUserArn of the user that makes the API call as the value in the header.    This API is is no longer supported and will not be updated. We recommend using the latest version, RedactChannelMessage, in the Amazon Chime SDK. Using the latest version requires migrating to a dedicated namespace. For more information, refer to   Migrating from the Amazon Chime namespace in the  Amazon Chime SDK Developer Guide.
    @available(*, deprecated, message: "Replaced by RedactChannelMessage in the Amazon Chime SDK Messaging Namespace")
    @Sendable
    @inlinable
    public func redactChannelMessage(_ input: RedactChannelMessageRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> RedactChannelMessageResponse {
        try await self.client.execute(
            operation: "RedactChannelMessage", 
            path: "/channels/{ChannelArn}/messages/{MessageId}?operation=redact", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            hostPrefix: "messaging-", 
            logger: logger
        )
    }
    /// Redacts message content, but not metadata. The message exists in the back end, but the action returns null content, and the state shows as redacted.  The x-amz-chime-bearer request header is mandatory. Use the AppInstanceUserArn of the user that makes the API call as the value in the header.    This API is is no longer supported and will not be updated. We recommend using the latest version, RedactChannelMessage, in the Amazon Chime SDK. Using the latest version requires migrating to a dedicated namespace. For more information, refer to   Migrating from the Amazon Chime namespace in the  Amazon Chime SDK Developer Guide.
    ///
    /// Parameters:
    ///   - channelArn: The ARN of the channel containing the messages that you want to redact.
    ///   - chimeBearer: The AppInstanceUserArn of the user that makes the API call.
    ///   - messageId: The ID of the message being redacted.
    ///   - logger: Logger use during operation
    @available(*, deprecated, message: "Replaced by RedactChannelMessage in the Amazon Chime SDK Messaging Namespace")
    @inlinable
    public func redactChannelMessage(
        channelArn: String,
        chimeBearer: String? = nil,
        messageId: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> RedactChannelMessageResponse {
        let input = RedactChannelMessageRequest(
            channelArn: channelArn, 
            chimeBearer: chimeBearer, 
            messageId: messageId
        )
        return try await self.redactChannelMessage(input, logger: logger)
    }

    /// Redacts the specified message from the specified Amazon Chime conversation.
    @Sendable
    @inlinable
    public func redactConversationMessage(_ input: RedactConversationMessageRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> RedactConversationMessageResponse {
        try await self.client.execute(
            operation: "RedactConversationMessage", 
            path: "/accounts/{AccountId}/conversations/{ConversationId}/messages/{MessageId}?operation=redact", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Redacts the specified message from the specified Amazon Chime conversation.
    ///
    /// Parameters:
    ///   - accountId: The Amazon Chime account ID.
    ///   - conversationId: The conversation ID.
    ///   - messageId: The message ID.
    ///   - logger: Logger use during operation
    @inlinable
    public func redactConversationMessage(
        accountId: String,
        conversationId: String,
        messageId: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> RedactConversationMessageResponse {
        let input = RedactConversationMessageRequest(
            accountId: accountId, 
            conversationId: conversationId, 
            messageId: messageId
        )
        return try await self.redactConversationMessage(input, logger: logger)
    }

    /// Redacts the specified message from the specified Amazon Chime channel.
    @Sendable
    @inlinable
    public func redactRoomMessage(_ input: RedactRoomMessageRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> RedactRoomMessageResponse {
        try await self.client.execute(
            operation: "RedactRoomMessage", 
            path: "/accounts/{AccountId}/rooms/{RoomId}/messages/{MessageId}?operation=redact", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Redacts the specified message from the specified Amazon Chime channel.
    ///
    /// Parameters:
    ///   - accountId: The Amazon Chime account ID.
    ///   - messageId: The message ID.
    ///   - roomId: The room ID.
    ///   - logger: Logger use during operation
    @inlinable
    public func redactRoomMessage(
        accountId: String,
        messageId: String,
        roomId: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> RedactRoomMessageResponse {
        let input = RedactRoomMessageRequest(
            accountId: accountId, 
            messageId: messageId, 
            roomId: roomId
        )
        return try await self.redactRoomMessage(input, logger: logger)
    }

    /// Regenerates the security token for a bot.
    @Sendable
    @inlinable
    public func regenerateSecurityToken(_ input: RegenerateSecurityTokenRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> RegenerateSecurityTokenResponse {
        try await self.client.execute(
            operation: "RegenerateSecurityToken", 
            path: "/accounts/{AccountId}/bots/{BotId}?operation=regenerate-security-token", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Regenerates the security token for a bot.
    ///
    /// Parameters:
    ///   - accountId: The Amazon Chime account ID.
    ///   - botId: The bot ID.
    ///   - logger: Logger use during operation
    @inlinable
    public func regenerateSecurityToken(
        accountId: String,
        botId: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> RegenerateSecurityTokenResponse {
        let input = RegenerateSecurityTokenRequest(
            accountId: accountId, 
            botId: botId
        )
        return try await self.regenerateSecurityToken(input, logger: logger)
    }

    /// Resets the personal meeting PIN for the specified user on an Amazon Chime account. Returns the User object with the updated personal meeting PIN.
    @Sendable
    @inlinable
    public func resetPersonalPIN(_ input: ResetPersonalPINRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> ResetPersonalPINResponse {
        try await self.client.execute(
            operation: "ResetPersonalPIN", 
            path: "/accounts/{AccountId}/users/{UserId}?operation=reset-personal-pin", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Resets the personal meeting PIN for the specified user on an Amazon Chime account. Returns the User object with the updated personal meeting PIN.
    ///
    /// Parameters:
    ///   - accountId: The Amazon Chime account ID.
    ///   - userId: The user ID.
    ///   - logger: Logger use during operation
    @inlinable
    public func resetPersonalPIN(
        accountId: String,
        userId: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> ResetPersonalPINResponse {
        let input = ResetPersonalPINRequest(
            accountId: accountId, 
            userId: userId
        )
        return try await self.resetPersonalPIN(input, logger: logger)
    }

    /// Moves a phone number from the Deletion queue back into the phone number Inventory.
    @Sendable
    @inlinable
    public func restorePhoneNumber(_ input: RestorePhoneNumberRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> RestorePhoneNumberResponse {
        try await self.client.execute(
            operation: "RestorePhoneNumber", 
            path: "/phone-numbers/{PhoneNumberId}?operation=restore", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Moves a phone number from the Deletion queue back into the phone number Inventory.
    ///
    /// Parameters:
    ///   - phoneNumberId: The phone number.
    ///   - logger: Logger use during operation
    @inlinable
    public func restorePhoneNumber(
        phoneNumberId: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> RestorePhoneNumberResponse {
        let input = RestorePhoneNumberRequest(
            phoneNumberId: phoneNumberId
        )
        return try await self.restorePhoneNumber(input, logger: logger)
    }

    /// Searches for phone numbers that can be ordered. For US numbers, provide at least one of the following search filters: AreaCode, City, State, or TollFreePrefix. If you provide City, you must also provide State. Numbers outside the US only support the PhoneNumberType filter, which you must use.
    @Sendable
    @inlinable
    public func searchAvailablePhoneNumbers(_ input: SearchAvailablePhoneNumbersRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> SearchAvailablePhoneNumbersResponse {
        try await self.client.execute(
            operation: "SearchAvailablePhoneNumbers", 
            path: "/search?type=phone-numbers", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Searches for phone numbers that can be ordered. For US numbers, provide at least one of the following search filters: AreaCode, City, State, or TollFreePrefix. If you provide City, you must also provide State. Numbers outside the US only support the PhoneNumberType filter, which you must use.
    ///
    /// Parameters:
    ///   - areaCode: The area code used to filter results. Only applies to the US.
    ///   - city: The city used to filter results. Only applies to the US.
    ///   - country: The country used to filter results. Defaults to the US Format: ISO 3166-1 alpha-2.
    ///   - maxResults: The maximum number of results to return in a single call.
    ///   - nextToken: The token used to retrieve the next page of results.
    ///   - phoneNumberType: The phone number type used to filter results. Required for non-US numbers.
    ///   - state: The state used to filter results. Required only if you provide City. Only applies to the US.
    ///   - tollFreePrefix: The toll-free prefix that you use to filter results. Only applies to the US.
    ///   - logger: Logger use during operation
    @inlinable
    public func searchAvailablePhoneNumbers(
        areaCode: String? = nil,
        city: String? = nil,
        country: String? = nil,
        maxResults: Int? = nil,
        nextToken: String? = nil,
        phoneNumberType: PhoneNumberType? = nil,
        state: String? = nil,
        tollFreePrefix: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> SearchAvailablePhoneNumbersResponse {
        let input = SearchAvailablePhoneNumbersRequest(
            areaCode: areaCode, 
            city: city, 
            country: country, 
            maxResults: maxResults, 
            nextToken: nextToken, 
            phoneNumberType: phoneNumberType, 
            state: state, 
            tollFreePrefix: tollFreePrefix
        )
        return try await self.searchAvailablePhoneNumbers(input, logger: logger)
    }

    /// Sends a message to a particular channel that the member is a part of.  The x-amz-chime-bearer request header is mandatory. Use the AppInstanceUserArn of the user that makes the API call as the value in the header. Also, STANDARD messages can contain 4KB of data and the 1KB of metadata. CONTROL messages can contain 30 bytes of data and no metadata.    This API is is no longer supported and will not be updated. We recommend using the latest version, SendChannelMessage, in the Amazon Chime SDK. Using the latest version requires migrating to a dedicated namespace. For more information, refer to   Migrating from the Amazon Chime namespace in the  Amazon Chime SDK Developer Guide.
    @available(*, deprecated, message: "Replaced by SendChannelMessage in the Amazon Chime SDK Messaging Namespace")
    @Sendable
    @inlinable
    public func sendChannelMessage(_ input: SendChannelMessageRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> SendChannelMessageResponse {
        try await self.client.execute(
            operation: "SendChannelMessage", 
            path: "/channels/{ChannelArn}/messages", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            hostPrefix: "messaging-", 
            logger: logger
        )
    }
    /// Sends a message to a particular channel that the member is a part of.  The x-amz-chime-bearer request header is mandatory. Use the AppInstanceUserArn of the user that makes the API call as the value in the header. Also, STANDARD messages can contain 4KB of data and the 1KB of metadata. CONTROL messages can contain 30 bytes of data and no metadata.    This API is is no longer supported and will not be updated. We recommend using the latest version, SendChannelMessage, in the Amazon Chime SDK. Using the latest version requires migrating to a dedicated namespace. For more information, refer to   Migrating from the Amazon Chime namespace in the  Amazon Chime SDK Developer Guide.
    ///
    /// Parameters:
    ///   - channelArn: The ARN of the channel.
    ///   - chimeBearer: The AppInstanceUserArn of the user that makes the API call.
    ///   - clientRequestToken: The Idempotency token for each client request.
    ///   - content: The content of the message.
    ///   - metadata: The optional metadata for each message.
    ///   - persistence: Boolean that controls whether the message is persisted on the back end. Required.
    ///   - type: The type of message, STANDARD or CONTROL.
    ///   - logger: Logger use during operation
    @available(*, deprecated, message: "Replaced by SendChannelMessage in the Amazon Chime SDK Messaging Namespace")
    @inlinable
    public func sendChannelMessage(
        channelArn: String,
        chimeBearer: String? = nil,
        clientRequestToken: String = SendChannelMessageRequest.idempotencyToken(),
        content: String,
        metadata: String? = nil,
        persistence: ChannelMessagePersistenceType,
        type: ChannelMessageType,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> SendChannelMessageResponse {
        let input = SendChannelMessageRequest(
            channelArn: channelArn, 
            chimeBearer: chimeBearer, 
            clientRequestToken: clientRequestToken, 
            content: content, 
            metadata: metadata, 
            persistence: persistence, 
            type: type
        )
        return try await self.sendChannelMessage(input, logger: logger)
    }

    /// Starts transcription for the specified meetingId. For more information, refer to  Using Amazon Chime SDK live transcription in the Amazon Chime SDK Developer Guide. If you specify an invalid configuration, a TranscriptFailed event will be sent with the contents of the BadRequestException generated by Amazon Transcribe.   For more information on each parameter and which combinations are valid, refer to the  StartStreamTranscription API in the  Amazon Transcribe Developer Guide.  Amazon Chime SDK live transcription is powered by Amazon Transcribe. Use of Amazon Transcribe is subject to the  AWS Service Terms, including the terms specific to the AWS Machine Learning and Artificial  Intelligence Services.    This API is is no longer supported and will not be updated. We recommend using the latest version, StartMeetingTranscription, in the Amazon Chime SDK. Using the latest version requires migrating to a dedicated namespace. For more information, refer to   Migrating from the Amazon Chime namespace in the  Amazon Chime SDK Developer Guide.
    @available(*, deprecated, message: "Replaced by StartMeetingTranscription in the Amazon Chime SDK Meetings Namespace")
    @Sendable
    @inlinable
    public func startMeetingTranscription(_ input: StartMeetingTranscriptionRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> StartMeetingTranscriptionResponse {
        try await self.client.execute(
            operation: "StartMeetingTranscription", 
            path: "/meetings/{MeetingId}/transcription?operation=start", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Starts transcription for the specified meetingId. For more information, refer to  Using Amazon Chime SDK live transcription in the Amazon Chime SDK Developer Guide. If you specify an invalid configuration, a TranscriptFailed event will be sent with the contents of the BadRequestException generated by Amazon Transcribe.   For more information on each parameter and which combinations are valid, refer to the  StartStreamTranscription API in the  Amazon Transcribe Developer Guide.  Amazon Chime SDK live transcription is powered by Amazon Transcribe. Use of Amazon Transcribe is subject to the  AWS Service Terms, including the terms specific to the AWS Machine Learning and Artificial  Intelligence Services.    This API is is no longer supported and will not be updated. We recommend using the latest version, StartMeetingTranscription, in the Amazon Chime SDK. Using the latest version requires migrating to a dedicated namespace. For more information, refer to   Migrating from the Amazon Chime namespace in the  Amazon Chime SDK Developer Guide.
    ///
    /// Parameters:
    ///   - meetingId: The unique ID of the meeting being transcribed.
    ///   - transcriptionConfiguration: The configuration for the current transcription operation. Must contain EngineTranscribeSettings or EngineTranscribeMedicalSettings.
    ///   - logger: Logger use during operation
    @available(*, deprecated, message: "Replaced by StartMeetingTranscription in the Amazon Chime SDK Meetings Namespace")
    @inlinable
    public func startMeetingTranscription(
        meetingId: String,
        transcriptionConfiguration: TranscriptionConfiguration,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> StartMeetingTranscriptionResponse {
        let input = StartMeetingTranscriptionRequest(
            meetingId: meetingId, 
            transcriptionConfiguration: transcriptionConfiguration
        )
        return try await self.startMeetingTranscription(input, logger: logger)
    }

    /// Stops transcription for the specified meetingId.   This API is is no longer supported and will not be updated. We recommend using the latest version, StopMeetingTranscription, in the Amazon Chime SDK. Using the latest version requires migrating to a dedicated namespace. For more information, refer to   Migrating from the Amazon Chime namespace in the  Amazon Chime SDK Developer Guide.
    @available(*, deprecated, message: "Replaced by StopMeetingTranscription in the Amazon Chime SDK Meetings Namespace")
    @Sendable
    @inlinable
    public func stopMeetingTranscription(_ input: StopMeetingTranscriptionRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> StopMeetingTranscriptionResponse {
        try await self.client.execute(
            operation: "StopMeetingTranscription", 
            path: "/meetings/{MeetingId}/transcription?operation=stop", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Stops transcription for the specified meetingId.   This API is is no longer supported and will not be updated. We recommend using the latest version, StopMeetingTranscription, in the Amazon Chime SDK. Using the latest version requires migrating to a dedicated namespace. For more information, refer to   Migrating from the Amazon Chime namespace in the  Amazon Chime SDK Developer Guide.
    ///
    /// Parameters:
    ///   - meetingId: The unique ID of the meeting for which you stop transcription.
    ///   - logger: Logger use during operation
    @available(*, deprecated, message: "Replaced by StopMeetingTranscription in the Amazon Chime SDK Meetings Namespace")
    @inlinable
    public func stopMeetingTranscription(
        meetingId: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> StopMeetingTranscriptionResponse {
        let input = StopMeetingTranscriptionRequest(
            meetingId: meetingId
        )
        return try await self.stopMeetingTranscription(input, logger: logger)
    }

    /// Applies the specified tags to the specified Amazon Chime attendee.  TagAttendee is not supported in the Amazon Chime SDK Meetings Namespace. Update your application to remove calls to this API.
    @available(*, deprecated, message: "Attendee Tags are not supported in the Amazon Chime SDK Meetings Namespace. Update your application to remove calls to this API.")
    @Sendable
    @inlinable
    public func tagAttendee(_ input: TagAttendeeRequest, logger: Logger = AWSClient.loggingDisabled) async throws {
        try await self.client.execute(
            operation: "TagAttendee", 
            path: "/meetings/{MeetingId}/attendees/{AttendeeId}/tags?operation=add", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Applies the specified tags to the specified Amazon Chime attendee.  TagAttendee is not supported in the Amazon Chime SDK Meetings Namespace. Update your application to remove calls to this API.
    ///
    /// Parameters:
    ///   - attendeeId: The Amazon Chime SDK attendee ID.
    ///   - meetingId: The Amazon Chime SDK meeting ID.
    ///   - tags: The tag key-value pairs.
    ///   - logger: Logger use during operation
    @available(*, deprecated, message: "Attendee Tags are not supported in the Amazon Chime SDK Meetings Namespace. Update your application to remove calls to this API.")
    @inlinable
    public func tagAttendee(
        attendeeId: String,
        meetingId: String,
        tags: [Tag],
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws {
        let input = TagAttendeeRequest(
            attendeeId: attendeeId, 
            meetingId: meetingId, 
            tags: tags
        )
        return try await self.tagAttendee(input, logger: logger)
    }

    /// Applies the specified tags to the specified Amazon Chime SDK meeting.   This API is is no longer supported and will not be updated. We recommend using the latest version, TagResource, in the Amazon Chime SDK. Using the latest version requires migrating to a dedicated namespace. For more information, refer to   Migrating from the Amazon Chime namespace in the  Amazon Chime SDK Developer Guide.
    @available(*, deprecated, message: "Use TagResource in the Amazon Chime SDK Meetings Namespace.")
    @Sendable
    @inlinable
    public func tagMeeting(_ input: TagMeetingRequest, logger: Logger = AWSClient.loggingDisabled) async throws {
        try await self.client.execute(
            operation: "TagMeeting", 
            path: "/meetings/{MeetingId}/tags?operation=add", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Applies the specified tags to the specified Amazon Chime SDK meeting.   This API is is no longer supported and will not be updated. We recommend using the latest version, TagResource, in the Amazon Chime SDK. Using the latest version requires migrating to a dedicated namespace. For more information, refer to   Migrating from the Amazon Chime namespace in the  Amazon Chime SDK Developer Guide.
    ///
    /// Parameters:
    ///   - meetingId: The Amazon Chime SDK meeting ID.
    ///   - tags: The tag key-value pairs.
    ///   - logger: Logger use during operation
    @available(*, deprecated, message: "Use TagResource in the Amazon Chime SDK Meetings Namespace.")
    @inlinable
    public func tagMeeting(
        meetingId: String,
        tags: [Tag],
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws {
        let input = TagMeetingRequest(
            meetingId: meetingId, 
            tags: tags
        )
        return try await self.tagMeeting(input, logger: logger)
    }

    /// Applies the specified tags to the specified Amazon Chime SDK meeting resource.   This API is is no longer supported and will not be updated. We recommend using the latest version, TagResource, in the Amazon Chime SDK. Using the latest version requires migrating to a dedicated namespace. For more information, refer to   Migrating from the Amazon Chime namespace in the  Amazon Chime SDK Developer Guide.
    @available(*, deprecated, message: "Replaced by TagResource in the Amazon Chime SDK Voice, Amazon Chime SDK Meetings, Amazon Chime SDK Identity, Amazon Chime SDK Messaging, and Amazon Chime SDK Media Pipelines Namespaces")
    @Sendable
    @inlinable
    public func tagResource(_ input: TagResourceRequest, logger: Logger = AWSClient.loggingDisabled) async throws {
        try await self.client.execute(
            operation: "TagResource", 
            path: "/tags?operation=tag-resource", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Applies the specified tags to the specified Amazon Chime SDK meeting resource.   This API is is no longer supported and will not be updated. We recommend using the latest version, TagResource, in the Amazon Chime SDK. Using the latest version requires migrating to a dedicated namespace. For more information, refer to   Migrating from the Amazon Chime namespace in the  Amazon Chime SDK Developer Guide.
    ///
    /// Parameters:
    ///   - resourceARN: The resource ARN.
    ///   - tags: The tag key-value pairs.
    ///   - logger: Logger use during operation
    @available(*, deprecated, message: "Replaced by TagResource in the Amazon Chime SDK Voice, Amazon Chime SDK Meetings, Amazon Chime SDK Identity, Amazon Chime SDK Messaging, and Amazon Chime SDK Media Pipelines Namespaces")
    @inlinable
    public func tagResource(
        resourceARN: String,
        tags: [Tag],
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws {
        let input = TagResourceRequest(
            resourceARN: resourceARN, 
            tags: tags
        )
        return try await self.tagResource(input, logger: logger)
    }

    /// Untags the specified tags from the specified Amazon Chime SDK attendee.  UntagAttendee is not supported in the Amazon Chime SDK Meetings Namespace. Update your application to remove calls to this API.
    @available(*, deprecated, message: "Attendee Tags are not supported in the Amazon Chime SDK Meetings Namespace. Update your application to remove calls to this API.")
    @Sendable
    @inlinable
    public func untagAttendee(_ input: UntagAttendeeRequest, logger: Logger = AWSClient.loggingDisabled) async throws {
        try await self.client.execute(
            operation: "UntagAttendee", 
            path: "/meetings/{MeetingId}/attendees/{AttendeeId}/tags?operation=delete", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Untags the specified tags from the specified Amazon Chime SDK attendee.  UntagAttendee is not supported in the Amazon Chime SDK Meetings Namespace. Update your application to remove calls to this API.
    ///
    /// Parameters:
    ///   - attendeeId: The Amazon Chime SDK attendee ID.
    ///   - meetingId: The Amazon Chime SDK meeting ID.
    ///   - tagKeys: The tag keys.
    ///   - logger: Logger use during operation
    @available(*, deprecated, message: "Attendee Tags are not supported in the Amazon Chime SDK Meetings Namespace. Update your application to remove calls to this API.")
    @inlinable
    public func untagAttendee(
        attendeeId: String,
        meetingId: String,
        tagKeys: [String],
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws {
        let input = UntagAttendeeRequest(
            attendeeId: attendeeId, 
            meetingId: meetingId, 
            tagKeys: tagKeys
        )
        return try await self.untagAttendee(input, logger: logger)
    }

    /// Untags the specified tags from the specified Amazon Chime SDK meeting.   This API is is no longer supported and will not be updated. We recommend using the latest version, UntagResource, in the Amazon Chime SDK. Using the latest version requires migrating to a dedicated namespace. For more information, refer to   Migrating from the Amazon Chime namespace in the  Amazon Chime SDK Developer Guide.
    @available(*, deprecated, message: "Use UntagResource in the Amazon Chime SDK Meetings Namespace.")
    @Sendable
    @inlinable
    public func untagMeeting(_ input: UntagMeetingRequest, logger: Logger = AWSClient.loggingDisabled) async throws {
        try await self.client.execute(
            operation: "UntagMeeting", 
            path: "/meetings/{MeetingId}/tags?operation=delete", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Untags the specified tags from the specified Amazon Chime SDK meeting.   This API is is no longer supported and will not be updated. We recommend using the latest version, UntagResource, in the Amazon Chime SDK. Using the latest version requires migrating to a dedicated namespace. For more information, refer to   Migrating from the Amazon Chime namespace in the  Amazon Chime SDK Developer Guide.
    ///
    /// Parameters:
    ///   - meetingId: The Amazon Chime SDK meeting ID.
    ///   - tagKeys: The tag keys.
    ///   - logger: Logger use during operation
    @available(*, deprecated, message: "Use UntagResource in the Amazon Chime SDK Meetings Namespace.")
    @inlinable
    public func untagMeeting(
        meetingId: String,
        tagKeys: [String],
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws {
        let input = UntagMeetingRequest(
            meetingId: meetingId, 
            tagKeys: tagKeys
        )
        return try await self.untagMeeting(input, logger: logger)
    }

    /// Untags the specified tags from the specified Amazon Chime SDK meeting resource. Applies the specified tags to the specified Amazon Chime SDK meeting resource.   This API is is no longer supported and will not be updated. We recommend using the latest version, UntagResource, in the Amazon Chime SDK. Using the latest version requires migrating to a dedicated namespace. For more information, refer to   Migrating from the Amazon Chime namespace in the  Amazon Chime SDK Developer Guide.
    @available(*, deprecated, message: "Replaced by UntagResource in the Amazon Chime SDK Voice, Amazon Chime SDK Meetings, Amazon Chime SDK Identity, Amazon Chime SDK Messaging, and Amazon Chime SDK Media Pipelines Namespaces")
    @Sendable
    @inlinable
    public func untagResource(_ input: UntagResourceRequest, logger: Logger = AWSClient.loggingDisabled) async throws {
        try await self.client.execute(
            operation: "UntagResource", 
            path: "/tags?operation=untag-resource", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Untags the specified tags from the specified Amazon Chime SDK meeting resource. Applies the specified tags to the specified Amazon Chime SDK meeting resource.   This API is is no longer supported and will not be updated. We recommend using the latest version, UntagResource, in the Amazon Chime SDK. Using the latest version requires migrating to a dedicated namespace. For more information, refer to   Migrating from the Amazon Chime namespace in the  Amazon Chime SDK Developer Guide.
    ///
    /// Parameters:
    ///   - resourceARN: The resource ARN.
    ///   - tagKeys: The tag keys.
    ///   - logger: Logger use during operation
    @available(*, deprecated, message: "Replaced by UntagResource in the Amazon Chime SDK Voice, Amazon Chime SDK Meetings, Amazon Chime SDK Identity, Amazon Chime SDK Messaging, and Amazon Chime SDK Media Pipelines Namespaces")
    @inlinable
    public func untagResource(
        resourceARN: String,
        tagKeys: [String],
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws {
        let input = UntagResourceRequest(
            resourceARN: resourceARN, 
            tagKeys: tagKeys
        )
        return try await self.untagResource(input, logger: logger)
    }

    /// Updates account details for the specified Amazon Chime account. Currently, only account name and default license updates are supported for this action.
    @Sendable
    @inlinable
    public func updateAccount(_ input: UpdateAccountRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> UpdateAccountResponse {
        try await self.client.execute(
            operation: "UpdateAccount", 
            path: "/accounts/{AccountId}", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Updates account details for the specified Amazon Chime account. Currently, only account name and default license updates are supported for this action.
    ///
    /// Parameters:
    ///   - accountId: The Amazon Chime account ID.
    ///   - defaultLicense: The default license applied when you add users to an Amazon Chime account.
    ///   - name: The new name for the specified Amazon Chime account.
    ///   - logger: Logger use during operation
    @inlinable
    public func updateAccount(
        accountId: String,
        defaultLicense: License? = nil,
        name: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> UpdateAccountResponse {
        let input = UpdateAccountRequest(
            accountId: accountId, 
            defaultLicense: defaultLicense, 
            name: name
        )
        return try await self.updateAccount(input, logger: logger)
    }

    /// Updates the settings for the specified Amazon Chime account. You can update settings for remote control of shared screens, or for the dial-out option. For more information about these settings, see Use the Policies Page in the Amazon Chime Administration Guide.
    @Sendable
    @inlinable
    public func updateAccountSettings(_ input: UpdateAccountSettingsRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> UpdateAccountSettingsResponse {
        try await self.client.execute(
            operation: "UpdateAccountSettings", 
            path: "/accounts/{AccountId}/settings", 
            httpMethod: .PUT, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Updates the settings for the specified Amazon Chime account. You can update settings for remote control of shared screens, or for the dial-out option. For more information about these settings, see Use the Policies Page in the Amazon Chime Administration Guide.
    ///
    /// Parameters:
    ///   - accountId: The Amazon Chime account ID.
    ///   - accountSettings: The Amazon Chime account settings to update.
    ///   - logger: Logger use during operation
    @inlinable
    public func updateAccountSettings(
        accountId: String,
        accountSettings: AccountSettings,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> UpdateAccountSettingsResponse {
        let input = UpdateAccountSettingsRequest(
            accountId: accountId, 
            accountSettings: accountSettings
        )
        return try await self.updateAccountSettings(input, logger: logger)
    }

    /// Updates AppInstance metadata.   This API is is no longer supported and will not be updated. We recommend using the latest version, UpdateAppInstance, in the Amazon Chime SDK. Using the latest version requires migrating to a dedicated namespace. For more information, refer to   Migrating from the Amazon Chime namespace in the  Amazon Chime SDK Developer Guide.
    @available(*, deprecated, message: "Replaced by UpdateAppInstance in the Amazon Chime SDK Identity Namespace")
    @Sendable
    @inlinable
    public func updateAppInstance(_ input: UpdateAppInstanceRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> UpdateAppInstanceResponse {
        try await self.client.execute(
            operation: "UpdateAppInstance", 
            path: "/app-instances/{AppInstanceArn}", 
            httpMethod: .PUT, 
            serviceConfig: self.config, 
            input: input, 
            hostPrefix: "identity-", 
            logger: logger
        )
    }
    /// Updates AppInstance metadata.   This API is is no longer supported and will not be updated. We recommend using the latest version, UpdateAppInstance, in the Amazon Chime SDK. Using the latest version requires migrating to a dedicated namespace. For more information, refer to   Migrating from the Amazon Chime namespace in the  Amazon Chime SDK Developer Guide.
    ///
    /// Parameters:
    ///   - appInstanceArn: The ARN of the AppInstance.
    ///   - metadata: The metadata that you want to change.
    ///   - name: The name that you want to change.
    ///   - logger: Logger use during operation
    @available(*, deprecated, message: "Replaced by UpdateAppInstance in the Amazon Chime SDK Identity Namespace")
    @inlinable
    public func updateAppInstance(
        appInstanceArn: String,
        metadata: String? = nil,
        name: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> UpdateAppInstanceResponse {
        let input = UpdateAppInstanceRequest(
            appInstanceArn: appInstanceArn, 
            metadata: metadata, 
            name: name
        )
        return try await self.updateAppInstance(input, logger: logger)
    }

    /// Updates the details of an AppInstanceUser. You can update names and metadata.   This API is is no longer supported and will not be updated. We recommend using the latest version, UpdateAppInstanceUser, in the Amazon Chime SDK. Using the latest version requires migrating to a dedicated namespace. For more information, refer to   Migrating from the Amazon Chime namespace in the  Amazon Chime SDK Developer Guide.
    @available(*, deprecated, message: "Replaced by UpdateAppInstanceUser in the Amazon Chime SDK Identity Namespace")
    @Sendable
    @inlinable
    public func updateAppInstanceUser(_ input: UpdateAppInstanceUserRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> UpdateAppInstanceUserResponse {
        try await self.client.execute(
            operation: "UpdateAppInstanceUser", 
            path: "/app-instance-users/{AppInstanceUserArn}", 
            httpMethod: .PUT, 
            serviceConfig: self.config, 
            input: input, 
            hostPrefix: "identity-", 
            logger: logger
        )
    }
    /// Updates the details of an AppInstanceUser. You can update names and metadata.   This API is is no longer supported and will not be updated. We recommend using the latest version, UpdateAppInstanceUser, in the Amazon Chime SDK. Using the latest version requires migrating to a dedicated namespace. For more information, refer to   Migrating from the Amazon Chime namespace in the  Amazon Chime SDK Developer Guide.
    ///
    /// Parameters:
    ///   - appInstanceUserArn: The ARN of the AppInstanceUser.
    ///   - metadata: The metadata of the AppInstanceUser.
    ///   - name: The name of the AppInstanceUser.
    ///   - logger: Logger use during operation
    @available(*, deprecated, message: "Replaced by UpdateAppInstanceUser in the Amazon Chime SDK Identity Namespace")
    @inlinable
    public func updateAppInstanceUser(
        appInstanceUserArn: String,
        metadata: String? = nil,
        name: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> UpdateAppInstanceUserResponse {
        let input = UpdateAppInstanceUserRequest(
            appInstanceUserArn: appInstanceUserArn, 
            metadata: metadata, 
            name: name
        )
        return try await self.updateAppInstanceUser(input, logger: logger)
    }

    /// Updates the status of the specified bot, such as starting or stopping the bot from running in your Amazon Chime Enterprise account.
    @Sendable
    @inlinable
    public func updateBot(_ input: UpdateBotRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> UpdateBotResponse {
        try await self.client.execute(
            operation: "UpdateBot", 
            path: "/accounts/{AccountId}/bots/{BotId}", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Updates the status of the specified bot, such as starting or stopping the bot from running in your Amazon Chime Enterprise account.
    ///
    /// Parameters:
    ///   - accountId: The Amazon Chime account ID.
    ///   - botId: The bot ID.
    ///   - disabled: When true, stops the specified bot from running in your account.
    ///   - logger: Logger use during operation
    @inlinable
    public func updateBot(
        accountId: String,
        botId: String,
        disabled: Bool? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> UpdateBotResponse {
        let input = UpdateBotRequest(
            accountId: accountId, 
            botId: botId, 
            disabled: disabled
        )
        return try await self.updateBot(input, logger: logger)
    }

    /// Update a channel's attributes.  Restriction: You can't change a channel's privacy.   The x-amz-chime-bearer request header is mandatory. Use the AppInstanceUserArn of the user that makes the API call as the value in the header.    This API is is no longer supported and will not be updated. We recommend using the latest version, UpdateChannel, in the Amazon Chime SDK. Using the latest version requires migrating to a dedicated namespace. For more information, refer to   Migrating from the Amazon Chime namespace in the  Amazon Chime SDK Developer Guide.
    @available(*, deprecated, message: "Replaced by UpdateChannel in the Amazon Chime SDK Messaging Namespace")
    @Sendable
    @inlinable
    public func updateChannel(_ input: UpdateChannelRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> UpdateChannelResponse {
        try await self.client.execute(
            operation: "UpdateChannel", 
            path: "/channels/{ChannelArn}", 
            httpMethod: .PUT, 
            serviceConfig: self.config, 
            input: input, 
            hostPrefix: "messaging-", 
            logger: logger
        )
    }
    /// Update a channel's attributes.  Restriction: You can't change a channel's privacy.   The x-amz-chime-bearer request header is mandatory. Use the AppInstanceUserArn of the user that makes the API call as the value in the header.    This API is is no longer supported and will not be updated. We recommend using the latest version, UpdateChannel, in the Amazon Chime SDK. Using the latest version requires migrating to a dedicated namespace. For more information, refer to   Migrating from the Amazon Chime namespace in the  Amazon Chime SDK Developer Guide.
    ///
    /// Parameters:
    ///   - channelArn: The ARN of the channel.
    ///   - chimeBearer: The AppInstanceUserArn of the user that makes the API call.
    ///   - metadata: The metadata for the update request.
    ///   - mode: The mode of the update request.
    ///   - name: The name of the channel.
    ///   - logger: Logger use during operation
    @available(*, deprecated, message: "Replaced by UpdateChannel in the Amazon Chime SDK Messaging Namespace")
    @inlinable
    public func updateChannel(
        channelArn: String,
        chimeBearer: String? = nil,
        metadata: String? = nil,
        mode: ChannelMode,
        name: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> UpdateChannelResponse {
        let input = UpdateChannelRequest(
            channelArn: channelArn, 
            chimeBearer: chimeBearer, 
            metadata: metadata, 
            mode: mode, 
            name: name
        )
        return try await self.updateChannel(input, logger: logger)
    }

    /// Updates the content of a message.  The x-amz-chime-bearer request header is mandatory. Use the AppInstanceUserArn of the user that makes the API call as the value in the header.    This API is is no longer supported and will not be updated. We recommend using the latest version, UpdateChannelMessage, in the Amazon Chime SDK. Using the latest version requires migrating to a dedicated namespace. For more information, refer to   Migrating from the Amazon Chime namespace in the  Amazon Chime SDK Developer Guide.
    @available(*, deprecated, message: "Replaced by UpdateChannelMessage in the Amazon Chime SDK Messaging Namespace")
    @Sendable
    @inlinable
    public func updateChannelMessage(_ input: UpdateChannelMessageRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> UpdateChannelMessageResponse {
        try await self.client.execute(
            operation: "UpdateChannelMessage", 
            path: "/channels/{ChannelArn}/messages/{MessageId}", 
            httpMethod: .PUT, 
            serviceConfig: self.config, 
            input: input, 
            hostPrefix: "messaging-", 
            logger: logger
        )
    }
    /// Updates the content of a message.  The x-amz-chime-bearer request header is mandatory. Use the AppInstanceUserArn of the user that makes the API call as the value in the header.    This API is is no longer supported and will not be updated. We recommend using the latest version, UpdateChannelMessage, in the Amazon Chime SDK. Using the latest version requires migrating to a dedicated namespace. For more information, refer to   Migrating from the Amazon Chime namespace in the  Amazon Chime SDK Developer Guide.
    ///
    /// Parameters:
    ///   - channelArn: The ARN of the channel.
    ///   - chimeBearer: The AppInstanceUserArn of the user that makes the API call.
    ///   - content: The content of the message being updated.
    ///   - messageId: The ID string of the message being updated.
    ///   - metadata: The metadata of the message being updated.
    ///   - logger: Logger use during operation
    @available(*, deprecated, message: "Replaced by UpdateChannelMessage in the Amazon Chime SDK Messaging Namespace")
    @inlinable
    public func updateChannelMessage(
        channelArn: String,
        chimeBearer: String? = nil,
        content: String? = nil,
        messageId: String,
        metadata: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> UpdateChannelMessageResponse {
        let input = UpdateChannelMessageRequest(
            channelArn: channelArn, 
            chimeBearer: chimeBearer, 
            content: content, 
            messageId: messageId, 
            metadata: metadata
        )
        return try await self.updateChannelMessage(input, logger: logger)
    }

    /// The details of the time when a user last read messages in a channel.  The x-amz-chime-bearer request header is mandatory. Use the AppInstanceUserArn of the user that makes the API call as the value in the header.    This API is is no longer supported and will not be updated. We recommend using the latest version, UpdateChannelReadMarker, in the Amazon Chime SDK. Using the latest version requires migrating to a dedicated namespace. For more information, refer to   Migrating from the Amazon Chime namespace in the  Amazon Chime SDK Developer Guide.
    @available(*, deprecated, message: "Replaced by UpdateChannelReadMarker in the Amazon Chime SDK Messaging Namespace")
    @Sendable
    @inlinable
    public func updateChannelReadMarker(_ input: UpdateChannelReadMarkerRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> UpdateChannelReadMarkerResponse {
        try await self.client.execute(
            operation: "UpdateChannelReadMarker", 
            path: "/channels/{ChannelArn}/readMarker", 
            httpMethod: .PUT, 
            serviceConfig: self.config, 
            input: input, 
            hostPrefix: "messaging-", 
            logger: logger
        )
    }
    /// The details of the time when a user last read messages in a channel.  The x-amz-chime-bearer request header is mandatory. Use the AppInstanceUserArn of the user that makes the API call as the value in the header.    This API is is no longer supported and will not be updated. We recommend using the latest version, UpdateChannelReadMarker, in the Amazon Chime SDK. Using the latest version requires migrating to a dedicated namespace. For more information, refer to   Migrating from the Amazon Chime namespace in the  Amazon Chime SDK Developer Guide.
    ///
    /// Parameters:
    ///   - channelArn: The ARN of the channel.
    ///   - chimeBearer: The AppInstanceUserArn of the user that makes the API call.
    ///   - logger: Logger use during operation
    @available(*, deprecated, message: "Replaced by UpdateChannelReadMarker in the Amazon Chime SDK Messaging Namespace")
    @inlinable
    public func updateChannelReadMarker(
        channelArn: String,
        chimeBearer: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> UpdateChannelReadMarkerResponse {
        let input = UpdateChannelReadMarkerRequest(
            channelArn: channelArn, 
            chimeBearer: chimeBearer
        )
        return try await self.updateChannelReadMarker(input, logger: logger)
    }

    /// Updates global settings for the administrator's AWS account, such as Amazon Chime Business Calling and Amazon Chime Voice Connector settings.
    @Sendable
    @inlinable
    public func updateGlobalSettings(_ input: UpdateGlobalSettingsRequest, logger: Logger = AWSClient.loggingDisabled) async throws {
        try await self.client.execute(
            operation: "UpdateGlobalSettings", 
            path: "/settings", 
            httpMethod: .PUT, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Updates global settings for the administrator's AWS account, such as Amazon Chime Business Calling and Amazon Chime Voice Connector settings.
    ///
    /// Parameters:
    ///   - businessCalling: The Amazon Chime Business Calling settings.
    ///   - voiceConnector: The Amazon Chime Voice Connector settings.
    ///   - logger: Logger use during operation
    @inlinable
    public func updateGlobalSettings(
        businessCalling: BusinessCallingSettings? = nil,
        voiceConnector: VoiceConnectorSettings? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws {
        let input = UpdateGlobalSettingsRequest(
            businessCalling: businessCalling, 
            voiceConnector: voiceConnector
        )
        return try await self.updateGlobalSettings(input, logger: logger)
    }

    /// Updates phone number details, such as product type or calling name, for the specified phone number ID. You can update one phone number detail at a time. For example, you can update either the product type or the calling name in one action. For toll-free numbers, you cannot use the Amazon Chime Business Calling product type. For numbers outside the U.S., you must use the Amazon Chime SIP Media Application Dial-In product type. Updates to outbound calling names can take 72 hours to complete. Pending updates to outbound calling names must be complete before you can request another update.
    @Sendable
    @inlinable
    public func updatePhoneNumber(_ input: UpdatePhoneNumberRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> UpdatePhoneNumberResponse {
        try await self.client.execute(
            operation: "UpdatePhoneNumber", 
            path: "/phone-numbers/{PhoneNumberId}", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Updates phone number details, such as product type or calling name, for the specified phone number ID. You can update one phone number detail at a time. For example, you can update either the product type or the calling name in one action. For toll-free numbers, you cannot use the Amazon Chime Business Calling product type. For numbers outside the U.S., you must use the Amazon Chime SIP Media Application Dial-In product type. Updates to outbound calling names can take 72 hours to complete. Pending updates to outbound calling names must be complete before you can request another update.
    ///
    /// Parameters:
    ///   - callingName: The outbound calling name associated with the phone number.
    ///   - phoneNumberId: The phone number ID.
    ///   - productType: The product type.
    ///   - logger: Logger use during operation
    @inlinable
    public func updatePhoneNumber(
        callingName: String? = nil,
        phoneNumberId: String,
        productType: PhoneNumberProductType? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> UpdatePhoneNumberResponse {
        let input = UpdatePhoneNumberRequest(
            callingName: callingName, 
            phoneNumberId: phoneNumberId, 
            productType: productType
        )
        return try await self.updatePhoneNumber(input, logger: logger)
    }

    /// Updates the phone number settings for the administrator's AWS account, such as the default outbound calling name. You can update the default outbound calling name once every seven days. Outbound calling names can take up to 72 hours to update.
    @Sendable
    @inlinable
    public func updatePhoneNumberSettings(_ input: UpdatePhoneNumberSettingsRequest, logger: Logger = AWSClient.loggingDisabled) async throws {
        try await self.client.execute(
            operation: "UpdatePhoneNumberSettings", 
            path: "/settings/phone-number", 
            httpMethod: .PUT, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Updates the phone number settings for the administrator's AWS account, such as the default outbound calling name. You can update the default outbound calling name once every seven days. Outbound calling names can take up to 72 hours to update.
    ///
    /// Parameters:
    ///   - callingName: The default outbound calling name for the account.
    ///   - logger: Logger use during operation
    @inlinable
    public func updatePhoneNumberSettings(
        callingName: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws {
        let input = UpdatePhoneNumberSettingsRequest(
            callingName: callingName
        )
        return try await self.updatePhoneNumberSettings(input, logger: logger)
    }

    /// Updates the specified proxy session details, such as voice or SMS capabilities.   This API is is no longer supported and will not be updated. We recommend using the latest version, UpdateProxySession, in the Amazon Chime SDK. Using the latest version requires migrating to a dedicated namespace. For more information, refer to   Migrating from the Amazon Chime namespace in the  Amazon Chime SDK Developer Guide.
    @available(*, deprecated, message: "Replaced by UpdateProxySession in the Amazon Chime SDK Voice Namespace")
    @Sendable
    @inlinable
    public func updateProxySession(_ input: UpdateProxySessionRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> UpdateProxySessionResponse {
        try await self.client.execute(
            operation: "UpdateProxySession", 
            path: "/voice-connectors/{VoiceConnectorId}/proxy-sessions/{ProxySessionId}", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Updates the specified proxy session details, such as voice or SMS capabilities.   This API is is no longer supported and will not be updated. We recommend using the latest version, UpdateProxySession, in the Amazon Chime SDK. Using the latest version requires migrating to a dedicated namespace. For more information, refer to   Migrating from the Amazon Chime namespace in the  Amazon Chime SDK Developer Guide.
    ///
    /// Parameters:
    ///   - capabilities: The proxy session capabilities.
    ///   - expiryMinutes: The number of minutes allowed for the proxy session.
    ///   - proxySessionId: The proxy session ID.
    ///   - voiceConnectorId: The Amazon Chime voice connector ID.
    ///   - logger: Logger use during operation
    @available(*, deprecated, message: "Replaced by UpdateProxySession in the Amazon Chime SDK Voice Namespace")
    @inlinable
    public func updateProxySession(
        capabilities: [Capability],
        expiryMinutes: Int? = nil,
        proxySessionId: String,
        voiceConnectorId: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> UpdateProxySessionResponse {
        let input = UpdateProxySessionRequest(
            capabilities: capabilities, 
            expiryMinutes: expiryMinutes, 
            proxySessionId: proxySessionId, 
            voiceConnectorId: voiceConnectorId
        )
        return try await self.updateProxySession(input, logger: logger)
    }

    /// Updates room details, such as the room name, for a room in an Amazon Chime Enterprise account.
    @Sendable
    @inlinable
    public func updateRoom(_ input: UpdateRoomRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> UpdateRoomResponse {
        try await self.client.execute(
            operation: "UpdateRoom", 
            path: "/accounts/{AccountId}/rooms/{RoomId}", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Updates room details, such as the room name, for a room in an Amazon Chime Enterprise account.
    ///
    /// Parameters:
    ///   - accountId: The Amazon Chime account ID.
    ///   - name: The room name.
    ///   - roomId: The room ID.
    ///   - logger: Logger use during operation
    @inlinable
    public func updateRoom(
        accountId: String,
        name: String? = nil,
        roomId: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> UpdateRoomResponse {
        let input = UpdateRoomRequest(
            accountId: accountId, 
            name: name, 
            roomId: roomId
        )
        return try await self.updateRoom(input, logger: logger)
    }

    /// Updates room membership details, such as the member role, for a room in an Amazon Chime Enterprise account. The member role designates whether the member is a chat room administrator or a general chat room member. The member role can be updated only for user IDs.
    @Sendable
    @inlinable
    public func updateRoomMembership(_ input: UpdateRoomMembershipRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> UpdateRoomMembershipResponse {
        try await self.client.execute(
            operation: "UpdateRoomMembership", 
            path: "/accounts/{AccountId}/rooms/{RoomId}/memberships/{MemberId}", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Updates room membership details, such as the member role, for a room in an Amazon Chime Enterprise account. The member role designates whether the member is a chat room administrator or a general chat room member. The member role can be updated only for user IDs.
    ///
    /// Parameters:
    ///   - accountId: The Amazon Chime account ID.
    ///   - memberId: The member ID.
    ///   - role: The role of the member.
    ///   - roomId: The room ID.
    ///   - logger: Logger use during operation
    @inlinable
    public func updateRoomMembership(
        accountId: String,
        memberId: String,
        role: RoomMembershipRole? = nil,
        roomId: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> UpdateRoomMembershipResponse {
        let input = UpdateRoomMembershipRequest(
            accountId: accountId, 
            memberId: memberId, 
            role: role, 
            roomId: roomId
        )
        return try await self.updateRoomMembership(input, logger: logger)
    }

    /// Updates the details of the specified SIP media application.   This API is is no longer supported and will not be updated. We recommend using the latest version, UpdateSipMediaApplication, in the Amazon Chime SDK. Using the latest version requires migrating to a dedicated namespace. For more information, refer to   Migrating from the Amazon Chime namespace in the  Amazon Chime SDK Developer Guide.
    @available(*, deprecated, message: "Replaced by UpdateSipMediaApplication in the Amazon Chime SDK Voice Namespace")
    @Sendable
    @inlinable
    public func updateSipMediaApplication(_ input: UpdateSipMediaApplicationRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> UpdateSipMediaApplicationResponse {
        try await self.client.execute(
            operation: "UpdateSipMediaApplication", 
            path: "/sip-media-applications/{SipMediaApplicationId}", 
            httpMethod: .PUT, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Updates the details of the specified SIP media application.   This API is is no longer supported and will not be updated. We recommend using the latest version, UpdateSipMediaApplication, in the Amazon Chime SDK. Using the latest version requires migrating to a dedicated namespace. For more information, refer to   Migrating from the Amazon Chime namespace in the  Amazon Chime SDK Developer Guide.
    ///
    /// Parameters:
    ///   - endpoints: The new set of endpoints for the specified SIP media application.
    ///   - name: The new name for the specified SIP media application.
    ///   - sipMediaApplicationId: The SIP media application ID.
    ///   - logger: Logger use during operation
    @available(*, deprecated, message: "Replaced by UpdateSipMediaApplication in the Amazon Chime SDK Voice Namespace")
    @inlinable
    public func updateSipMediaApplication(
        endpoints: [SipMediaApplicationEndpoint]? = nil,
        name: String? = nil,
        sipMediaApplicationId: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> UpdateSipMediaApplicationResponse {
        let input = UpdateSipMediaApplicationRequest(
            endpoints: endpoints, 
            name: name, 
            sipMediaApplicationId: sipMediaApplicationId
        )
        return try await self.updateSipMediaApplication(input, logger: logger)
    }

    /// Invokes the AWS Lambda function associated with the SIP media application and transaction ID in an update request.  The Lambda function can then return a new set of actions.   This API is is no longer supported and will not be updated. We recommend using the latest version, UpdateSipMediaApplicationCall, in the Amazon Chime SDK. Using the latest version requires migrating to a dedicated namespace. For more information, refer to   Migrating from the Amazon Chime namespace in the  Amazon Chime SDK Developer Guide.
    @available(*, deprecated, message: "Replaced by UpdateSipMediaApplicationCall in the Amazon Chime SDK Voice Namespace")
    @Sendable
    @inlinable
    public func updateSipMediaApplicationCall(_ input: UpdateSipMediaApplicationCallRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> UpdateSipMediaApplicationCallResponse {
        try await self.client.execute(
            operation: "UpdateSipMediaApplicationCall", 
            path: "/sip-media-applications/{SipMediaApplicationId}/calls/{TransactionId}", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Invokes the AWS Lambda function associated with the SIP media application and transaction ID in an update request.  The Lambda function can then return a new set of actions.   This API is is no longer supported and will not be updated. We recommend using the latest version, UpdateSipMediaApplicationCall, in the Amazon Chime SDK. Using the latest version requires migrating to a dedicated namespace. For more information, refer to   Migrating from the Amazon Chime namespace in the  Amazon Chime SDK Developer Guide.
    ///
    /// Parameters:
    ///   - arguments: Arguments made available to the Lambda function as part of the CALL_UPDATE_REQUESTED event. Can contain 0-20 key-value pairs.
    ///   - sipMediaApplicationId: The ID of the SIP media application handling the call.
    ///   - transactionId: The ID of the call transaction.
    ///   - logger: Logger use during operation
    @available(*, deprecated, message: "Replaced by UpdateSipMediaApplicationCall in the Amazon Chime SDK Voice Namespace")
    @inlinable
    public func updateSipMediaApplicationCall(
        arguments: [String: String],
        sipMediaApplicationId: String,
        transactionId: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> UpdateSipMediaApplicationCallResponse {
        let input = UpdateSipMediaApplicationCallRequest(
            arguments: arguments, 
            sipMediaApplicationId: sipMediaApplicationId, 
            transactionId: transactionId
        )
        return try await self.updateSipMediaApplicationCall(input, logger: logger)
    }

    /// Updates the details of the specified SIP rule.   This API is is no longer supported and will not be updated. We recommend using the latest version, UpdateSipRule, in the Amazon Chime SDK. Using the latest version requires migrating to a dedicated namespace. For more information, refer to   Migrating from the Amazon Chime namespace in the  Amazon Chime SDK Developer Guide.
    @available(*, deprecated, message: "Replaced by UpdateSipRule in the Amazon Chime SDK Voice Namespace")
    @Sendable
    @inlinable
    public func updateSipRule(_ input: UpdateSipRuleRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> UpdateSipRuleResponse {
        try await self.client.execute(
            operation: "UpdateSipRule", 
            path: "/sip-rules/{SipRuleId}", 
            httpMethod: .PUT, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Updates the details of the specified SIP rule.   This API is is no longer supported and will not be updated. We recommend using the latest version, UpdateSipRule, in the Amazon Chime SDK. Using the latest version requires migrating to a dedicated namespace. For more information, refer to   Migrating from the Amazon Chime namespace in the  Amazon Chime SDK Developer Guide.
    ///
    /// Parameters:
    ///   - disabled: The new value specified to indicate whether the rule is disabled.
    ///   - name: The new name for the specified SIP rule.
    ///   - sipRuleId: The SIP rule ID.
    ///   - targetApplications: The new value of the list of target applications.
    ///   - logger: Logger use during operation
    @available(*, deprecated, message: "Replaced by UpdateSipRule in the Amazon Chime SDK Voice Namespace")
    @inlinable
    public func updateSipRule(
        disabled: Bool? = nil,
        name: String,
        sipRuleId: String,
        targetApplications: [SipRuleTargetApplication]? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> UpdateSipRuleResponse {
        let input = UpdateSipRuleRequest(
            disabled: disabled, 
            name: name, 
            sipRuleId: sipRuleId, 
            targetApplications: targetApplications
        )
        return try await self.updateSipRule(input, logger: logger)
    }

    /// Updates user details for a specified user ID. Currently, only LicenseType updates are supported for this action.
    @Sendable
    @inlinable
    public func updateUser(_ input: UpdateUserRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> UpdateUserResponse {
        try await self.client.execute(
            operation: "UpdateUser", 
            path: "/accounts/{AccountId}/users/{UserId}", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Updates user details for a specified user ID. Currently, only LicenseType updates are supported for this action.
    ///
    /// Parameters:
    ///   - accountId: The Amazon Chime account ID.
    ///   - alexaForBusinessMetadata: The Alexa for Business metadata.
    ///   - licenseType: The user license type to update. This must be a supported license type for the Amazon Chime account that the user belongs to.
    ///   - userId: The user ID.
    ///   - userType: The user type.
    ///   - logger: Logger use during operation
    @inlinable
    public func updateUser(
        accountId: String,
        alexaForBusinessMetadata: AlexaForBusinessMetadata? = nil,
        licenseType: License? = nil,
        userId: String,
        userType: UserType? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> UpdateUserResponse {
        let input = UpdateUserRequest(
            accountId: accountId, 
            alexaForBusinessMetadata: alexaForBusinessMetadata, 
            licenseType: licenseType, 
            userId: userId, 
            userType: userType
        )
        return try await self.updateUser(input, logger: logger)
    }

    /// Updates the settings for the specified user, such as phone number settings.
    @Sendable
    @inlinable
    public func updateUserSettings(_ input: UpdateUserSettingsRequest, logger: Logger = AWSClient.loggingDisabled) async throws {
        try await self.client.execute(
            operation: "UpdateUserSettings", 
            path: "/accounts/{AccountId}/users/{UserId}/settings", 
            httpMethod: .PUT, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Updates the settings for the specified user, such as phone number settings.
    ///
    /// Parameters:
    ///   - accountId: The Amazon Chime account ID.
    ///   - userId: The user ID.
    ///   - userSettings: The user settings to update.
    ///   - logger: Logger use during operation
    @inlinable
    public func updateUserSettings(
        accountId: String,
        userId: String,
        userSettings: UserSettings,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws {
        let input = UpdateUserSettingsRequest(
            accountId: accountId, 
            userId: userId, 
            userSettings: userSettings
        )
        return try await self.updateUserSettings(input, logger: logger)
    }

    /// Updates details for the specified Amazon Chime Voice Connector.   This API is is no longer supported and will not be updated. We recommend using the latest version, UpdateVoiceConnector, in the Amazon Chime SDK. Using the latest version requires migrating to a dedicated namespace. For more information, refer to   Migrating from the Amazon Chime namespace in the  Amazon Chime SDK Developer Guide.
    @available(*, deprecated, message: "Replaced by UpdateVoiceConnector in the Amazon Chime SDK Voice Namespace")
    @Sendable
    @inlinable
    public func updateVoiceConnector(_ input: UpdateVoiceConnectorRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> UpdateVoiceConnectorResponse {
        try await self.client.execute(
            operation: "UpdateVoiceConnector", 
            path: "/voice-connectors/{VoiceConnectorId}", 
            httpMethod: .PUT, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Updates details for the specified Amazon Chime Voice Connector.   This API is is no longer supported and will not be updated. We recommend using the latest version, UpdateVoiceConnector, in the Amazon Chime SDK. Using the latest version requires migrating to a dedicated namespace. For more information, refer to   Migrating from the Amazon Chime namespace in the  Amazon Chime SDK Developer Guide.
    ///
    /// Parameters:
    ///   - name: The name of the Amazon Chime Voice Connector.
    ///   - requireEncryption: When enabled, requires encryption for the Amazon Chime Voice Connector.
    ///   - voiceConnectorId: The Amazon Chime Voice Connector ID.
    ///   - logger: Logger use during operation
    @available(*, deprecated, message: "Replaced by UpdateVoiceConnector in the Amazon Chime SDK Voice Namespace")
    @inlinable
    public func updateVoiceConnector(
        name: String,
        requireEncryption: Bool,
        voiceConnectorId: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> UpdateVoiceConnectorResponse {
        let input = UpdateVoiceConnectorRequest(
            name: name, 
            requireEncryption: requireEncryption, 
            voiceConnectorId: voiceConnectorId
        )
        return try await self.updateVoiceConnector(input, logger: logger)
    }

    /// Updates details of the specified Amazon Chime Voice Connector group, such as the name and Amazon Chime Voice Connector priority ranking.   This API is is no longer supported and will not be updated. We recommend using the latest version, UpdateVoiceConnectorGroup, in the Amazon Chime SDK. Using the latest version requires migrating to a dedicated namespace. For more information, refer to   Migrating from the Amazon Chime namespace in the  Amazon Chime SDK Developer Guide.
    @available(*, deprecated, message: "Replaced by UpdateVoiceConnectorGroup in the Amazon Chime SDK Voice Namespace")
    @Sendable
    @inlinable
    public func updateVoiceConnectorGroup(_ input: UpdateVoiceConnectorGroupRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> UpdateVoiceConnectorGroupResponse {
        try await self.client.execute(
            operation: "UpdateVoiceConnectorGroup", 
            path: "/voice-connector-groups/{VoiceConnectorGroupId}", 
            httpMethod: .PUT, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Updates details of the specified Amazon Chime Voice Connector group, such as the name and Amazon Chime Voice Connector priority ranking.   This API is is no longer supported and will not be updated. We recommend using the latest version, UpdateVoiceConnectorGroup, in the Amazon Chime SDK. Using the latest version requires migrating to a dedicated namespace. For more information, refer to   Migrating from the Amazon Chime namespace in the  Amazon Chime SDK Developer Guide.
    ///
    /// Parameters:
    ///   - name: The name of the Amazon Chime Voice Connector group.
    ///   - voiceConnectorGroupId: The Amazon Chime Voice Connector group ID.
    ///   - voiceConnectorItems: The VoiceConnectorItems to associate with the group.
    ///   - logger: Logger use during operation
    @available(*, deprecated, message: "Replaced by UpdateVoiceConnectorGroup in the Amazon Chime SDK Voice Namespace")
    @inlinable
    public func updateVoiceConnectorGroup(
        name: String,
        voiceConnectorGroupId: String,
        voiceConnectorItems: [VoiceConnectorItem],
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> UpdateVoiceConnectorGroupResponse {
        let input = UpdateVoiceConnectorGroupRequest(
            name: name, 
            voiceConnectorGroupId: voiceConnectorGroupId, 
            voiceConnectorItems: voiceConnectorItems
        )
        return try await self.updateVoiceConnectorGroup(input, logger: logger)
    }

    /// Validates an address to be used for 911 calls made with Amazon  Chime Voice Connectors. You can use validated addresses  in a Presence Information Data Format Location Object file that you include in SIP requests. That helps ensure that addresses are routed to the appropriate Public Safety Answering Point.   This API is is no longer supported and will not be updated. We recommend using the latest version, ValidateE911Address, in the Amazon Chime SDK. Using the latest version requires migrating to a dedicated namespace. For more information, refer to   Migrating from the Amazon Chime namespace in the  Amazon Chime SDK Developer Guide.
    @available(*, deprecated, message: "Replaced by ValidateE911Address in the Amazon Chime SDK Voice Namespace")
    @Sendable
    @inlinable
    public func validateE911Address(_ input: ValidateE911AddressRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> ValidateE911AddressResponse {
        try await self.client.execute(
            operation: "ValidateE911Address", 
            path: "/emergency-calling/address", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Validates an address to be used for 911 calls made with Amazon  Chime Voice Connectors. You can use validated addresses  in a Presence Information Data Format Location Object file that you include in SIP requests. That helps ensure that addresses are routed to the appropriate Public Safety Answering Point.   This API is is no longer supported and will not be updated. We recommend using the latest version, ValidateE911Address, in the Amazon Chime SDK. Using the latest version requires migrating to a dedicated namespace. For more information, refer to   Migrating from the Amazon Chime namespace in the  Amazon Chime SDK Developer Guide.
    ///
    /// Parameters:
    ///   - awsAccountId: The AWS account ID.
    ///   - city: The address city, such as Portland.
    ///   - country: The address country, such as US.
    ///   - postalCode: The address postal code, such as 04352.
    ///   - state: The address state, such as ME.
    ///   - streetInfo: The address street information, such as 8th Avenue.
    ///   - streetNumber: The address street number, such as 200 or 2121.
    ///   - logger: Logger use during operation
    @available(*, deprecated, message: "Replaced by ValidateE911Address in the Amazon Chime SDK Voice Namespace")
    @inlinable
    public func validateE911Address(
        awsAccountId: String,
        city: String,
        country: String,
        postalCode: String,
        state: String,
        streetInfo: String,
        streetNumber: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> ValidateE911AddressResponse {
        let input = ValidateE911AddressRequest(
            awsAccountId: awsAccountId, 
            city: city, 
            country: country, 
            postalCode: postalCode, 
            state: state, 
            streetInfo: streetInfo, 
            streetNumber: streetNumber
        )
        return try await self.validateE911Address(input, logger: logger)
    }
}

extension Chime {
    /// Initializer required by `AWSService.with(middlewares:timeout:byteBufferAllocator:options)`. You are not able to use this initializer directly as there are not public
    /// initializers for `AWSServiceConfig.Patch`. Please use `AWSService.with(middlewares:timeout:byteBufferAllocator:options)` instead.
    public init(from: Chime, patch: AWSServiceConfig.Patch) {
        self.client = from.client
        self.config = from.config.with(patch: patch)
    }
}

// MARK: Paginators

@available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
extension Chime {
    /// Return PaginatorSequence for operation ``listAccounts(_:logger:)``.
    ///
    /// - Parameters:
    ///   - input: Input for operation
    ///   - logger: Logger used for logging
    @inlinable
    public func listAccountsPaginator(
        _ input: ListAccountsRequest,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<ListAccountsRequest, ListAccountsResponse> {
        return .init(
            input: input,
            command: self.listAccounts,
            inputKey: \ListAccountsRequest.nextToken,
            outputKey: \ListAccountsResponse.nextToken,
            logger: logger
        )
    }
    /// Return PaginatorSequence for operation ``listAccounts(_:logger:)``.
    ///
    /// - Parameters:
    ///   - maxResults: The maximum number of results to return in a single call. Defaults to 100.
    ///   - name: Amazon Chime account name prefix with which to filter results.
    ///   - userEmail: User email address with which to filter results.
    ///   - logger: Logger used for logging
    @inlinable
    public func listAccountsPaginator(
        maxResults: Int? = nil,
        name: String? = nil,
        userEmail: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) -> AWSClient.PaginatorSequence<ListAccountsRequest, ListAccountsResponse> {
        let input = ListAccountsRequest(
            maxResults: maxResults, 
            name: name, 
            userEmail: userEmail
        )
        return self.listAccountsPaginator(input, logger: logger)
    }

    /// Return PaginatorSequence for operation ``listAppInstanceAdmins(_:logger:)``.
    ///
    /// - Parameters:
    ///   - input: Input for operation
    ///   - logger: Logger used for logging
    @available(*, deprecated, message: "Replaced by ListAppInstanceAdmins in the Amazon Chime SDK Identity Namespace")
    @inlinable
    public func listAppInstanceAdminsPaginator(
        _ input: ListAppInstanceAdminsRequest,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<ListAppInstanceAdminsRequest, ListAppInstanceAdminsResponse> {
        return .init(
            input: input,
            command: self.listAppInstanceAdmins,
            inputKey: \ListAppInstanceAdminsRequest.nextToken,
            outputKey: \ListAppInstanceAdminsResponse.nextToken,
            logger: logger
        )
    }
    /// Return PaginatorSequence for operation ``listAppInstanceAdmins(_:logger:)``.
    ///
    /// - Parameters:
    ///   - appInstanceArn: The ARN of the AppInstance.
    ///   - maxResults: The maximum number of administrators that you want to return.
    ///   - logger: Logger used for logging
    @available(*, deprecated, message: "Replaced by ListAppInstanceAdmins in the Amazon Chime SDK Identity Namespace")
    @inlinable
    public func listAppInstanceAdminsPaginator(
        appInstanceArn: String,
        maxResults: Int? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) -> AWSClient.PaginatorSequence<ListAppInstanceAdminsRequest, ListAppInstanceAdminsResponse> {
        let input = ListAppInstanceAdminsRequest(
            appInstanceArn: appInstanceArn, 
            maxResults: maxResults
        )
        return self.listAppInstanceAdminsPaginator(input, logger: logger)
    }

    /// Return PaginatorSequence for operation ``listAppInstanceUsers(_:logger:)``.
    ///
    /// - Parameters:
    ///   - input: Input for operation
    ///   - logger: Logger used for logging
    @available(*, deprecated, message: "Replaced by ListAppInstanceUsers in the Amazon Chime SDK Identity Namespace")
    @inlinable
    public func listAppInstanceUsersPaginator(
        _ input: ListAppInstanceUsersRequest,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<ListAppInstanceUsersRequest, ListAppInstanceUsersResponse> {
        return .init(
            input: input,
            command: self.listAppInstanceUsers,
            inputKey: \ListAppInstanceUsersRequest.nextToken,
            outputKey: \ListAppInstanceUsersResponse.nextToken,
            logger: logger
        )
    }
    /// Return PaginatorSequence for operation ``listAppInstanceUsers(_:logger:)``.
    ///
    /// - Parameters:
    ///   - appInstanceArn: The ARN of the AppInstance.
    ///   - maxResults: The maximum number of requests that you want returned.
    ///   - logger: Logger used for logging
    @available(*, deprecated, message: "Replaced by ListAppInstanceUsers in the Amazon Chime SDK Identity Namespace")
    @inlinable
    public func listAppInstanceUsersPaginator(
        appInstanceArn: String,
        maxResults: Int? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) -> AWSClient.PaginatorSequence<ListAppInstanceUsersRequest, ListAppInstanceUsersResponse> {
        let input = ListAppInstanceUsersRequest(
            appInstanceArn: appInstanceArn, 
            maxResults: maxResults
        )
        return self.listAppInstanceUsersPaginator(input, logger: logger)
    }

    /// Return PaginatorSequence for operation ``listAppInstances(_:logger:)``.
    ///
    /// - Parameters:
    ///   - input: Input for operation
    ///   - logger: Logger used for logging
    @available(*, deprecated, message: "Replaced by ListAppInstances in the Amazon Chime SDK Identity Namespace")
    @inlinable
    public func listAppInstancesPaginator(
        _ input: ListAppInstancesRequest,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<ListAppInstancesRequest, ListAppInstancesResponse> {
        return .init(
            input: input,
            command: self.listAppInstances,
            inputKey: \ListAppInstancesRequest.nextToken,
            outputKey: \ListAppInstancesResponse.nextToken,
            logger: logger
        )
    }
    /// Return PaginatorSequence for operation ``listAppInstances(_:logger:)``.
    ///
    /// - Parameters:
    ///   - maxResults: The maximum number of AppInstances that you want to return.
    ///   - logger: Logger used for logging
    @available(*, deprecated, message: "Replaced by ListAppInstances in the Amazon Chime SDK Identity Namespace")
    @inlinable
    public func listAppInstancesPaginator(
        maxResults: Int? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) -> AWSClient.PaginatorSequence<ListAppInstancesRequest, ListAppInstancesResponse> {
        let input = ListAppInstancesRequest(
            maxResults: maxResults
        )
        return self.listAppInstancesPaginator(input, logger: logger)
    }

    /// Return PaginatorSequence for operation ``listAttendees(_:logger:)``.
    ///
    /// - Parameters:
    ///   - input: Input for operation
    ///   - logger: Logger used for logging
    @available(*, deprecated, message: "Replaced by ListAttendees in the Amazon Chime SDK Meetings Namespace")
    @inlinable
    public func listAttendeesPaginator(
        _ input: ListAttendeesRequest,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<ListAttendeesRequest, ListAttendeesResponse> {
        return .init(
            input: input,
            command: self.listAttendees,
            inputKey: \ListAttendeesRequest.nextToken,
            outputKey: \ListAttendeesResponse.nextToken,
            logger: logger
        )
    }
    /// Return PaginatorSequence for operation ``listAttendees(_:logger:)``.
    ///
    /// - Parameters:
    ///   - maxResults: The maximum number of results to return in a single call.
    ///   - meetingId: The Amazon Chime SDK meeting ID.
    ///   - logger: Logger used for logging
    @available(*, deprecated, message: "Replaced by ListAttendees in the Amazon Chime SDK Meetings Namespace")
    @inlinable
    public func listAttendeesPaginator(
        maxResults: Int? = nil,
        meetingId: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) -> AWSClient.PaginatorSequence<ListAttendeesRequest, ListAttendeesResponse> {
        let input = ListAttendeesRequest(
            maxResults: maxResults, 
            meetingId: meetingId
        )
        return self.listAttendeesPaginator(input, logger: logger)
    }

    /// Return PaginatorSequence for operation ``listBots(_:logger:)``.
    ///
    /// - Parameters:
    ///   - input: Input for operation
    ///   - logger: Logger used for logging
    @inlinable
    public func listBotsPaginator(
        _ input: ListBotsRequest,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<ListBotsRequest, ListBotsResponse> {
        return .init(
            input: input,
            command: self.listBots,
            inputKey: \ListBotsRequest.nextToken,
            outputKey: \ListBotsResponse.nextToken,
            logger: logger
        )
    }
    /// Return PaginatorSequence for operation ``listBots(_:logger:)``.
    ///
    /// - Parameters:
    ///   - accountId: The Amazon Chime account ID.
    ///   - maxResults: The maximum number of results to return in a single call. The default is 10.
    ///   - logger: Logger used for logging
    @inlinable
    public func listBotsPaginator(
        accountId: String,
        maxResults: Int? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) -> AWSClient.PaginatorSequence<ListBotsRequest, ListBotsResponse> {
        let input = ListBotsRequest(
            accountId: accountId, 
            maxResults: maxResults
        )
        return self.listBotsPaginator(input, logger: logger)
    }

    /// Return PaginatorSequence for operation ``listChannelBans(_:logger:)``.
    ///
    /// - Parameters:
    ///   - input: Input for operation
    ///   - logger: Logger used for logging
    @available(*, deprecated, message: "Replaced by ListChannelBans in the Amazon Chime SDK Messaging Namespace")
    @inlinable
    public func listChannelBansPaginator(
        _ input: ListChannelBansRequest,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<ListChannelBansRequest, ListChannelBansResponse> {
        return .init(
            input: input,
            command: self.listChannelBans,
            inputKey: \ListChannelBansRequest.nextToken,
            outputKey: \ListChannelBansResponse.nextToken,
            logger: logger
        )
    }
    /// Return PaginatorSequence for operation ``listChannelBans(_:logger:)``.
    ///
    /// - Parameters:
    ///   - channelArn: The ARN of the channel.
    ///   - chimeBearer: The AppInstanceUserArn of the user that makes the API call.
    ///   - maxResults: The maximum number of bans that you want returned.
    ///   - logger: Logger used for logging
    @available(*, deprecated, message: "Replaced by ListChannelBans in the Amazon Chime SDK Messaging Namespace")
    @inlinable
    public func listChannelBansPaginator(
        channelArn: String,
        chimeBearer: String? = nil,
        maxResults: Int? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) -> AWSClient.PaginatorSequence<ListChannelBansRequest, ListChannelBansResponse> {
        let input = ListChannelBansRequest(
            channelArn: channelArn, 
            chimeBearer: chimeBearer, 
            maxResults: maxResults
        )
        return self.listChannelBansPaginator(input, logger: logger)
    }

    /// Return PaginatorSequence for operation ``listChannelMemberships(_:logger:)``.
    ///
    /// - Parameters:
    ///   - input: Input for operation
    ///   - logger: Logger used for logging
    @available(*, deprecated, message: "Replaced by ListChannelMemberships in the Amazon Chime SDK Messaging Namespace")
    @inlinable
    public func listChannelMembershipsPaginator(
        _ input: ListChannelMembershipsRequest,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<ListChannelMembershipsRequest, ListChannelMembershipsResponse> {
        return .init(
            input: input,
            command: self.listChannelMemberships,
            inputKey: \ListChannelMembershipsRequest.nextToken,
            outputKey: \ListChannelMembershipsResponse.nextToken,
            logger: logger
        )
    }
    /// Return PaginatorSequence for operation ``listChannelMemberships(_:logger:)``.
    ///
    /// - Parameters:
    ///   - channelArn: The maximum number of channel memberships that you want returned.
    ///   - chimeBearer: The AppInstanceUserArn of the user that makes the API call.
    ///   - maxResults: The maximum number of channel memberships that you want returned.
    ///   - type: The membership type of a user, DEFAULT or HIDDEN. Default members are always returned as part of ListChannelMemberships. Hidden members are only returned if the type filter in ListChannelMemberships equals HIDDEN. Otherwise hidden members are not returned.
    ///   - logger: Logger used for logging
    @available(*, deprecated, message: "Replaced by ListChannelMemberships in the Amazon Chime SDK Messaging Namespace")
    @inlinable
    public func listChannelMembershipsPaginator(
        channelArn: String,
        chimeBearer: String? = nil,
        maxResults: Int? = nil,
        type: ChannelMembershipType? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) -> AWSClient.PaginatorSequence<ListChannelMembershipsRequest, ListChannelMembershipsResponse> {
        let input = ListChannelMembershipsRequest(
            channelArn: channelArn, 
            chimeBearer: chimeBearer, 
            maxResults: maxResults, 
            type: type
        )
        return self.listChannelMembershipsPaginator(input, logger: logger)
    }

    /// Return PaginatorSequence for operation ``listChannelMembershipsForAppInstanceUser(_:logger:)``.
    ///
    /// - Parameters:
    ///   - input: Input for operation
    ///   - logger: Logger used for logging
    @available(*, deprecated, message: "Replaced by ListChannelMembershipsForAppInstanceUser in the Amazon Chime SDK Messaging Namespace")
    @inlinable
    public func listChannelMembershipsForAppInstanceUserPaginator(
        _ input: ListChannelMembershipsForAppInstanceUserRequest,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<ListChannelMembershipsForAppInstanceUserRequest, ListChannelMembershipsForAppInstanceUserResponse> {
        return .init(
            input: input,
            command: self.listChannelMembershipsForAppInstanceUser,
            inputKey: \ListChannelMembershipsForAppInstanceUserRequest.nextToken,
            outputKey: \ListChannelMembershipsForAppInstanceUserResponse.nextToken,
            logger: logger
        )
    }
    /// Return PaginatorSequence for operation ``listChannelMembershipsForAppInstanceUser(_:logger:)``.
    ///
    /// - Parameters:
    ///   - appInstanceUserArn: The ARN of the AppInstanceUsers
    ///   - chimeBearer: The AppInstanceUserArn of the user that makes the API call.
    ///   - maxResults: The maximum number of users that you want returned.
    ///   - logger: Logger used for logging
    @available(*, deprecated, message: "Replaced by ListChannelMembershipsForAppInstanceUser in the Amazon Chime SDK Messaging Namespace")
    @inlinable
    public func listChannelMembershipsForAppInstanceUserPaginator(
        appInstanceUserArn: String? = nil,
        chimeBearer: String? = nil,
        maxResults: Int? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) -> AWSClient.PaginatorSequence<ListChannelMembershipsForAppInstanceUserRequest, ListChannelMembershipsForAppInstanceUserResponse> {
        let input = ListChannelMembershipsForAppInstanceUserRequest(
            appInstanceUserArn: appInstanceUserArn, 
            chimeBearer: chimeBearer, 
            maxResults: maxResults
        )
        return self.listChannelMembershipsForAppInstanceUserPaginator(input, logger: logger)
    }

    /// Return PaginatorSequence for operation ``listChannelMessages(_:logger:)``.
    ///
    /// - Parameters:
    ///   - input: Input for operation
    ///   - logger: Logger used for logging
    @available(*, deprecated, message: "Replaced by ListChannelMessages in the Amazon Chime SDK Messaging Namespace")
    @inlinable
    public func listChannelMessagesPaginator(
        _ input: ListChannelMessagesRequest,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<ListChannelMessagesRequest, ListChannelMessagesResponse> {
        return .init(
            input: input,
            command: self.listChannelMessages,
            inputKey: \ListChannelMessagesRequest.nextToken,
            outputKey: \ListChannelMessagesResponse.nextToken,
            logger: logger
        )
    }
    /// Return PaginatorSequence for operation ``listChannelMessages(_:logger:)``.
    ///
    /// - Parameters:
    ///   - channelArn: The ARN of the channel.
    ///   - chimeBearer: The AppInstanceUserArn of the user that makes the API call.
    ///   - maxResults: The maximum number of messages that you want returned.
    ///   - notAfter: The final or ending time stamp for your requested messages.
    ///   - notBefore: The initial or starting time stamp for your requested messages.
    ///   - sortOrder: The order in which you want messages sorted. Default is Descending, based on time created.
    ///   - logger: Logger used for logging
    @available(*, deprecated, message: "Replaced by ListChannelMessages in the Amazon Chime SDK Messaging Namespace")
    @inlinable
    public func listChannelMessagesPaginator(
        channelArn: String,
        chimeBearer: String? = nil,
        maxResults: Int? = nil,
        notAfter: Date? = nil,
        notBefore: Date? = nil,
        sortOrder: SortOrder? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) -> AWSClient.PaginatorSequence<ListChannelMessagesRequest, ListChannelMessagesResponse> {
        let input = ListChannelMessagesRequest(
            channelArn: channelArn, 
            chimeBearer: chimeBearer, 
            maxResults: maxResults, 
            notAfter: notAfter, 
            notBefore: notBefore, 
            sortOrder: sortOrder
        )
        return self.listChannelMessagesPaginator(input, logger: logger)
    }

    /// Return PaginatorSequence for operation ``listChannelModerators(_:logger:)``.
    ///
    /// - Parameters:
    ///   - input: Input for operation
    ///   - logger: Logger used for logging
    @available(*, deprecated, message: "Replaced by ListChannelModerators in the Amazon Chime SDK Messaging Namespace")
    @inlinable
    public func listChannelModeratorsPaginator(
        _ input: ListChannelModeratorsRequest,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<ListChannelModeratorsRequest, ListChannelModeratorsResponse> {
        return .init(
            input: input,
            command: self.listChannelModerators,
            inputKey: \ListChannelModeratorsRequest.nextToken,
            outputKey: \ListChannelModeratorsResponse.nextToken,
            logger: logger
        )
    }
    /// Return PaginatorSequence for operation ``listChannelModerators(_:logger:)``.
    ///
    /// - Parameters:
    ///   - channelArn: The ARN of the channel.
    ///   - chimeBearer: The AppInstanceUserArn of the user that makes the API call.
    ///   - maxResults: The maximum number of moderators that you want returned.
    ///   - logger: Logger used for logging
    @available(*, deprecated, message: "Replaced by ListChannelModerators in the Amazon Chime SDK Messaging Namespace")
    @inlinable
    public func listChannelModeratorsPaginator(
        channelArn: String,
        chimeBearer: String? = nil,
        maxResults: Int? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) -> AWSClient.PaginatorSequence<ListChannelModeratorsRequest, ListChannelModeratorsResponse> {
        let input = ListChannelModeratorsRequest(
            channelArn: channelArn, 
            chimeBearer: chimeBearer, 
            maxResults: maxResults
        )
        return self.listChannelModeratorsPaginator(input, logger: logger)
    }

    /// Return PaginatorSequence for operation ``listChannels(_:logger:)``.
    ///
    /// - Parameters:
    ///   - input: Input for operation
    ///   - logger: Logger used for logging
    @available(*, deprecated, message: "Replaced by ListChannels in the Amazon Chime SDK Messaging Namespace")
    @inlinable
    public func listChannelsPaginator(
        _ input: ListChannelsRequest,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<ListChannelsRequest, ListChannelsResponse> {
        return .init(
            input: input,
            command: self.listChannels,
            inputKey: \ListChannelsRequest.nextToken,
            outputKey: \ListChannelsResponse.nextToken,
            logger: logger
        )
    }
    /// Return PaginatorSequence for operation ``listChannels(_:logger:)``.
    ///
    /// - Parameters:
    ///   - appInstanceArn: The ARN of the AppInstance.
    ///   - chimeBearer: The AppInstanceUserArn of the user that makes the API call.
    ///   - maxResults: The maximum number of channels that you want to return.
    ///   - privacy: The privacy setting. PUBLIC retrieves all the public channels. PRIVATE retrieves private channels. Only an AppInstanceAdmin can retrieve private channels.
    ///   - logger: Logger used for logging
    @available(*, deprecated, message: "Replaced by ListChannels in the Amazon Chime SDK Messaging Namespace")
    @inlinable
    public func listChannelsPaginator(
        appInstanceArn: String,
        chimeBearer: String? = nil,
        maxResults: Int? = nil,
        privacy: ChannelPrivacy? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) -> AWSClient.PaginatorSequence<ListChannelsRequest, ListChannelsResponse> {
        let input = ListChannelsRequest(
            appInstanceArn: appInstanceArn, 
            chimeBearer: chimeBearer, 
            maxResults: maxResults, 
            privacy: privacy
        )
        return self.listChannelsPaginator(input, logger: logger)
    }

    /// Return PaginatorSequence for operation ``listChannelsModeratedByAppInstanceUser(_:logger:)``.
    ///
    /// - Parameters:
    ///   - input: Input for operation
    ///   - logger: Logger used for logging
    @available(*, deprecated, message: "Replaced by ListChannelsModeratedByAppInstanceUser in the Amazon Chime SDK Messaging Namespace")
    @inlinable
    public func listChannelsModeratedByAppInstanceUserPaginator(
        _ input: ListChannelsModeratedByAppInstanceUserRequest,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<ListChannelsModeratedByAppInstanceUserRequest, ListChannelsModeratedByAppInstanceUserResponse> {
        return .init(
            input: input,
            command: self.listChannelsModeratedByAppInstanceUser,
            inputKey: \ListChannelsModeratedByAppInstanceUserRequest.nextToken,
            outputKey: \ListChannelsModeratedByAppInstanceUserResponse.nextToken,
            logger: logger
        )
    }
    /// Return PaginatorSequence for operation ``listChannelsModeratedByAppInstanceUser(_:logger:)``.
    ///
    /// - Parameters:
    ///   - appInstanceUserArn: The ARN of the user in the moderated channel.
    ///   - chimeBearer: The AppInstanceUserArn of the user that makes the API call.
    ///   - maxResults: The maximum number of channels in the request.
    ///   - logger: Logger used for logging
    @available(*, deprecated, message: "Replaced by ListChannelsModeratedByAppInstanceUser in the Amazon Chime SDK Messaging Namespace")
    @inlinable
    public func listChannelsModeratedByAppInstanceUserPaginator(
        appInstanceUserArn: String? = nil,
        chimeBearer: String? = nil,
        maxResults: Int? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) -> AWSClient.PaginatorSequence<ListChannelsModeratedByAppInstanceUserRequest, ListChannelsModeratedByAppInstanceUserResponse> {
        let input = ListChannelsModeratedByAppInstanceUserRequest(
            appInstanceUserArn: appInstanceUserArn, 
            chimeBearer: chimeBearer, 
            maxResults: maxResults
        )
        return self.listChannelsModeratedByAppInstanceUserPaginator(input, logger: logger)
    }

    /// Return PaginatorSequence for operation ``listMediaCapturePipelines(_:logger:)``.
    ///
    /// - Parameters:
    ///   - input: Input for operation
    ///   - logger: Logger used for logging
    @available(*, deprecated, message: "Replaced by ListMediaCapturePipelines in the Amazon Chime SDK Media Pipelines Namespace")
    @inlinable
    public func listMediaCapturePipelinesPaginator(
        _ input: ListMediaCapturePipelinesRequest,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<ListMediaCapturePipelinesRequest, ListMediaCapturePipelinesResponse> {
        return .init(
            input: input,
            command: self.listMediaCapturePipelines,
            inputKey: \ListMediaCapturePipelinesRequest.nextToken,
            outputKey: \ListMediaCapturePipelinesResponse.nextToken,
            logger: logger
        )
    }
    /// Return PaginatorSequence for operation ``listMediaCapturePipelines(_:logger:)``.
    ///
    /// - Parameters:
    ///   - maxResults: The maximum number of results to return in a single call. Valid Range: 1 - 99.
    ///   - logger: Logger used for logging
    @available(*, deprecated, message: "Replaced by ListMediaCapturePipelines in the Amazon Chime SDK Media Pipelines Namespace")
    @inlinable
    public func listMediaCapturePipelinesPaginator(
        maxResults: Int? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) -> AWSClient.PaginatorSequence<ListMediaCapturePipelinesRequest, ListMediaCapturePipelinesResponse> {
        let input = ListMediaCapturePipelinesRequest(
            maxResults: maxResults
        )
        return self.listMediaCapturePipelinesPaginator(input, logger: logger)
    }

    /// Return PaginatorSequence for operation ``listMeetings(_:logger:)``.
    ///
    /// - Parameters:
    ///   - input: Input for operation
    ///   - logger: Logger used for logging
    @available(*, deprecated, message: "ListMeetings is not supported in the Amazon Chime SDK Meetings Namespace. Update your application to remove calls to this API.")
    @inlinable
    public func listMeetingsPaginator(
        _ input: ListMeetingsRequest,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<ListMeetingsRequest, ListMeetingsResponse> {
        return .init(
            input: input,
            command: self.listMeetings,
            inputKey: \ListMeetingsRequest.nextToken,
            outputKey: \ListMeetingsResponse.nextToken,
            logger: logger
        )
    }
    /// Return PaginatorSequence for operation ``listMeetings(_:logger:)``.
    ///
    /// - Parameters:
    ///   - maxResults: The maximum number of results to return in a single call.
    ///   - logger: Logger used for logging
    @available(*, deprecated, message: "ListMeetings is not supported in the Amazon Chime SDK Meetings Namespace. Update your application to remove calls to this API.")
    @inlinable
    public func listMeetingsPaginator(
        maxResults: Int? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) -> AWSClient.PaginatorSequence<ListMeetingsRequest, ListMeetingsResponse> {
        let input = ListMeetingsRequest(
            maxResults: maxResults
        )
        return self.listMeetingsPaginator(input, logger: logger)
    }

    /// Return PaginatorSequence for operation ``listPhoneNumberOrders(_:logger:)``.
    ///
    /// - Parameters:
    ///   - input: Input for operation
    ///   - logger: Logger used for logging
    @inlinable
    public func listPhoneNumberOrdersPaginator(
        _ input: ListPhoneNumberOrdersRequest,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<ListPhoneNumberOrdersRequest, ListPhoneNumberOrdersResponse> {
        return .init(
            input: input,
            command: self.listPhoneNumberOrders,
            inputKey: \ListPhoneNumberOrdersRequest.nextToken,
            outputKey: \ListPhoneNumberOrdersResponse.nextToken,
            logger: logger
        )
    }
    /// Return PaginatorSequence for operation ``listPhoneNumberOrders(_:logger:)``.
    ///
    /// - Parameters:
    ///   - maxResults: The maximum number of results to return in a single call.
    ///   - logger: Logger used for logging
    @inlinable
    public func listPhoneNumberOrdersPaginator(
        maxResults: Int? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) -> AWSClient.PaginatorSequence<ListPhoneNumberOrdersRequest, ListPhoneNumberOrdersResponse> {
        let input = ListPhoneNumberOrdersRequest(
            maxResults: maxResults
        )
        return self.listPhoneNumberOrdersPaginator(input, logger: logger)
    }

    /// Return PaginatorSequence for operation ``listPhoneNumbers(_:logger:)``.
    ///
    /// - Parameters:
    ///   - input: Input for operation
    ///   - logger: Logger used for logging
    @inlinable
    public func listPhoneNumbersPaginator(
        _ input: ListPhoneNumbersRequest,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<ListPhoneNumbersRequest, ListPhoneNumbersResponse> {
        return .init(
            input: input,
            command: self.listPhoneNumbers,
            inputKey: \ListPhoneNumbersRequest.nextToken,
            outputKey: \ListPhoneNumbersResponse.nextToken,
            logger: logger
        )
    }
    /// Return PaginatorSequence for operation ``listPhoneNumbers(_:logger:)``.
    ///
    /// - Parameters:
    ///   - filterName: The filter to use to limit the number of results.
    ///   - filterValue: The value to use for the filter.
    ///   - maxResults: The maximum number of results to return in a single call.
    ///   - productType: The phone number product type.
    ///   - status: The phone number status.
    ///   - logger: Logger used for logging
    @inlinable
    public func listPhoneNumbersPaginator(
        filterName: PhoneNumberAssociationName? = nil,
        filterValue: String? = nil,
        maxResults: Int? = nil,
        productType: PhoneNumberProductType? = nil,
        status: PhoneNumberStatus? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) -> AWSClient.PaginatorSequence<ListPhoneNumbersRequest, ListPhoneNumbersResponse> {
        let input = ListPhoneNumbersRequest(
            filterName: filterName, 
            filterValue: filterValue, 
            maxResults: maxResults, 
            productType: productType, 
            status: status
        )
        return self.listPhoneNumbersPaginator(input, logger: logger)
    }

    /// Return PaginatorSequence for operation ``listProxySessions(_:logger:)``.
    ///
    /// - Parameters:
    ///   - input: Input for operation
    ///   - logger: Logger used for logging
    @available(*, deprecated, message: "Replaced by ListProxySessions in the Amazon Chime SDK Voice Namespace")
    @inlinable
    public func listProxySessionsPaginator(
        _ input: ListProxySessionsRequest,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<ListProxySessionsRequest, ListProxySessionsResponse> {
        return .init(
            input: input,
            command: self.listProxySessions,
            inputKey: \ListProxySessionsRequest.nextToken,
            outputKey: \ListProxySessionsResponse.nextToken,
            logger: logger
        )
    }
    /// Return PaginatorSequence for operation ``listProxySessions(_:logger:)``.
    ///
    /// - Parameters:
    ///   - maxResults: The maximum number of results to return in a single call.
    ///   - status: The proxy session status.
    ///   - voiceConnectorId: The Amazon Chime voice connector ID.
    ///   - logger: Logger used for logging
    @available(*, deprecated, message: "Replaced by ListProxySessions in the Amazon Chime SDK Voice Namespace")
    @inlinable
    public func listProxySessionsPaginator(
        maxResults: Int? = nil,
        status: ProxySessionStatus? = nil,
        voiceConnectorId: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) -> AWSClient.PaginatorSequence<ListProxySessionsRequest, ListProxySessionsResponse> {
        let input = ListProxySessionsRequest(
            maxResults: maxResults, 
            status: status, 
            voiceConnectorId: voiceConnectorId
        )
        return self.listProxySessionsPaginator(input, logger: logger)
    }

    /// Return PaginatorSequence for operation ``listRoomMemberships(_:logger:)``.
    ///
    /// - Parameters:
    ///   - input: Input for operation
    ///   - logger: Logger used for logging
    @inlinable
    public func listRoomMembershipsPaginator(
        _ input: ListRoomMembershipsRequest,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<ListRoomMembershipsRequest, ListRoomMembershipsResponse> {
        return .init(
            input: input,
            command: self.listRoomMemberships,
            inputKey: \ListRoomMembershipsRequest.nextToken,
            outputKey: \ListRoomMembershipsResponse.nextToken,
            logger: logger
        )
    }
    /// Return PaginatorSequence for operation ``listRoomMemberships(_:logger:)``.
    ///
    /// - Parameters:
    ///   - accountId: The Amazon Chime account ID.
    ///   - maxResults: The maximum number of results to return in a single call.
    ///   - roomId: The room ID.
    ///   - logger: Logger used for logging
    @inlinable
    public func listRoomMembershipsPaginator(
        accountId: String,
        maxResults: Int? = nil,
        roomId: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) -> AWSClient.PaginatorSequence<ListRoomMembershipsRequest, ListRoomMembershipsResponse> {
        let input = ListRoomMembershipsRequest(
            accountId: accountId, 
            maxResults: maxResults, 
            roomId: roomId
        )
        return self.listRoomMembershipsPaginator(input, logger: logger)
    }

    /// Return PaginatorSequence for operation ``listRooms(_:logger:)``.
    ///
    /// - Parameters:
    ///   - input: Input for operation
    ///   - logger: Logger used for logging
    @inlinable
    public func listRoomsPaginator(
        _ input: ListRoomsRequest,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<ListRoomsRequest, ListRoomsResponse> {
        return .init(
            input: input,
            command: self.listRooms,
            inputKey: \ListRoomsRequest.nextToken,
            outputKey: \ListRoomsResponse.nextToken,
            logger: logger
        )
    }
    /// Return PaginatorSequence for operation ``listRooms(_:logger:)``.
    ///
    /// - Parameters:
    ///   - accountId: The Amazon Chime account ID.
    ///   - maxResults: The maximum number of results to return in a single call.
    ///   - memberId: The member ID (user ID or bot ID).
    ///   - logger: Logger used for logging
    @inlinable
    public func listRoomsPaginator(
        accountId: String,
        maxResults: Int? = nil,
        memberId: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) -> AWSClient.PaginatorSequence<ListRoomsRequest, ListRoomsResponse> {
        let input = ListRoomsRequest(
            accountId: accountId, 
            maxResults: maxResults, 
            memberId: memberId
        )
        return self.listRoomsPaginator(input, logger: logger)
    }

    /// Return PaginatorSequence for operation ``listSipMediaApplications(_:logger:)``.
    ///
    /// - Parameters:
    ///   - input: Input for operation
    ///   - logger: Logger used for logging
    @available(*, deprecated, message: "Replaced by ListSipMediaApplications in the Amazon Chime SDK Voice Namespace")
    @inlinable
    public func listSipMediaApplicationsPaginator(
        _ input: ListSipMediaApplicationsRequest,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<ListSipMediaApplicationsRequest, ListSipMediaApplicationsResponse> {
        return .init(
            input: input,
            command: self.listSipMediaApplications,
            inputKey: \ListSipMediaApplicationsRequest.nextToken,
            outputKey: \ListSipMediaApplicationsResponse.nextToken,
            logger: logger
        )
    }
    /// Return PaginatorSequence for operation ``listSipMediaApplications(_:logger:)``.
    ///
    /// - Parameters:
    ///   - maxResults: The maximum number of results to return in a single call. Defaults to 100.
    ///   - logger: Logger used for logging
    @available(*, deprecated, message: "Replaced by ListSipMediaApplications in the Amazon Chime SDK Voice Namespace")
    @inlinable
    public func listSipMediaApplicationsPaginator(
        maxResults: Int? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) -> AWSClient.PaginatorSequence<ListSipMediaApplicationsRequest, ListSipMediaApplicationsResponse> {
        let input = ListSipMediaApplicationsRequest(
            maxResults: maxResults
        )
        return self.listSipMediaApplicationsPaginator(input, logger: logger)
    }

    /// Return PaginatorSequence for operation ``listSipRules(_:logger:)``.
    ///
    /// - Parameters:
    ///   - input: Input for operation
    ///   - logger: Logger used for logging
    @available(*, deprecated, message: "Replaced by ListSipRules in the Amazon Chime SDK Voice Namespace")
    @inlinable
    public func listSipRulesPaginator(
        _ input: ListSipRulesRequest,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<ListSipRulesRequest, ListSipRulesResponse> {
        return .init(
            input: input,
            command: self.listSipRules,
            inputKey: \ListSipRulesRequest.nextToken,
            outputKey: \ListSipRulesResponse.nextToken,
            logger: logger
        )
    }
    /// Return PaginatorSequence for operation ``listSipRules(_:logger:)``.
    ///
    /// - Parameters:
    ///   - maxResults: The maximum number of results to return in a single call. Defaults to 100.
    ///   - sipMediaApplicationId: The SIP media application ID.
    ///   - logger: Logger used for logging
    @available(*, deprecated, message: "Replaced by ListSipRules in the Amazon Chime SDK Voice Namespace")
    @inlinable
    public func listSipRulesPaginator(
        maxResults: Int? = nil,
        sipMediaApplicationId: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) -> AWSClient.PaginatorSequence<ListSipRulesRequest, ListSipRulesResponse> {
        let input = ListSipRulesRequest(
            maxResults: maxResults, 
            sipMediaApplicationId: sipMediaApplicationId
        )
        return self.listSipRulesPaginator(input, logger: logger)
    }

    /// Return PaginatorSequence for operation ``listUsers(_:logger:)``.
    ///
    /// - Parameters:
    ///   - input: Input for operation
    ///   - logger: Logger used for logging
    @inlinable
    public func listUsersPaginator(
        _ input: ListUsersRequest,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<ListUsersRequest, ListUsersResponse> {
        return .init(
            input: input,
            command: self.listUsers,
            inputKey: \ListUsersRequest.nextToken,
            outputKey: \ListUsersResponse.nextToken,
            logger: logger
        )
    }
    /// Return PaginatorSequence for operation ``listUsers(_:logger:)``.
    ///
    /// - Parameters:
    ///   - accountId: The Amazon Chime account ID.
    ///   - maxResults: The maximum number of results to return in a single call. Defaults to 100.
    ///   - userEmail: Optional. The user email address used to filter results. Maximum 1.
    ///   - userType: The user type.
    ///   - logger: Logger used for logging
    @inlinable
    public func listUsersPaginator(
        accountId: String,
        maxResults: Int? = nil,
        userEmail: String? = nil,
        userType: UserType? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) -> AWSClient.PaginatorSequence<ListUsersRequest, ListUsersResponse> {
        let input = ListUsersRequest(
            accountId: accountId, 
            maxResults: maxResults, 
            userEmail: userEmail, 
            userType: userType
        )
        return self.listUsersPaginator(input, logger: logger)
    }

    /// Return PaginatorSequence for operation ``listVoiceConnectorGroups(_:logger:)``.
    ///
    /// - Parameters:
    ///   - input: Input for operation
    ///   - logger: Logger used for logging
    @available(*, deprecated, message: "Replaced by ListVoiceConnectorGroups in the Amazon Chime SDK Voice Namespace")
    @inlinable
    public func listVoiceConnectorGroupsPaginator(
        _ input: ListVoiceConnectorGroupsRequest,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<ListVoiceConnectorGroupsRequest, ListVoiceConnectorGroupsResponse> {
        return .init(
            input: input,
            command: self.listVoiceConnectorGroups,
            inputKey: \ListVoiceConnectorGroupsRequest.nextToken,
            outputKey: \ListVoiceConnectorGroupsResponse.nextToken,
            logger: logger
        )
    }
    /// Return PaginatorSequence for operation ``listVoiceConnectorGroups(_:logger:)``.
    ///
    /// - Parameters:
    ///   - maxResults: The maximum number of results to return in a single call.
    ///   - logger: Logger used for logging
    @available(*, deprecated, message: "Replaced by ListVoiceConnectorGroups in the Amazon Chime SDK Voice Namespace")
    @inlinable
    public func listVoiceConnectorGroupsPaginator(
        maxResults: Int? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) -> AWSClient.PaginatorSequence<ListVoiceConnectorGroupsRequest, ListVoiceConnectorGroupsResponse> {
        let input = ListVoiceConnectorGroupsRequest(
            maxResults: maxResults
        )
        return self.listVoiceConnectorGroupsPaginator(input, logger: logger)
    }

    /// Return PaginatorSequence for operation ``listVoiceConnectors(_:logger:)``.
    ///
    /// - Parameters:
    ///   - input: Input for operation
    ///   - logger: Logger used for logging
    @available(*, deprecated, message: "Replaced by ListVoiceConnectors in the Amazon Chime SDK Voice Namespace")
    @inlinable
    public func listVoiceConnectorsPaginator(
        _ input: ListVoiceConnectorsRequest,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<ListVoiceConnectorsRequest, ListVoiceConnectorsResponse> {
        return .init(
            input: input,
            command: self.listVoiceConnectors,
            inputKey: \ListVoiceConnectorsRequest.nextToken,
            outputKey: \ListVoiceConnectorsResponse.nextToken,
            logger: logger
        )
    }
    /// Return PaginatorSequence for operation ``listVoiceConnectors(_:logger:)``.
    ///
    /// - Parameters:
    ///   - maxResults: The maximum number of results to return in a single call.
    ///   - logger: Logger used for logging
    @available(*, deprecated, message: "Replaced by ListVoiceConnectors in the Amazon Chime SDK Voice Namespace")
    @inlinable
    public func listVoiceConnectorsPaginator(
        maxResults: Int? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) -> AWSClient.PaginatorSequence<ListVoiceConnectorsRequest, ListVoiceConnectorsResponse> {
        let input = ListVoiceConnectorsRequest(
            maxResults: maxResults
        )
        return self.listVoiceConnectorsPaginator(input, logger: logger)
    }

    /// Return PaginatorSequence for operation ``searchAvailablePhoneNumbers(_:logger:)``.
    ///
    /// - Parameters:
    ///   - input: Input for operation
    ///   - logger: Logger used for logging
    @inlinable
    public func searchAvailablePhoneNumbersPaginator(
        _ input: SearchAvailablePhoneNumbersRequest,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<SearchAvailablePhoneNumbersRequest, SearchAvailablePhoneNumbersResponse> {
        return .init(
            input: input,
            command: self.searchAvailablePhoneNumbers,
            inputKey: \SearchAvailablePhoneNumbersRequest.nextToken,
            outputKey: \SearchAvailablePhoneNumbersResponse.nextToken,
            logger: logger
        )
    }
    /// Return PaginatorSequence for operation ``searchAvailablePhoneNumbers(_:logger:)``.
    ///
    /// - Parameters:
    ///   - areaCode: The area code used to filter results. Only applies to the US.
    ///   - city: The city used to filter results. Only applies to the US.
    ///   - country: The country used to filter results. Defaults to the US Format: ISO 3166-1 alpha-2.
    ///   - maxResults: The maximum number of results to return in a single call.
    ///   - phoneNumberType: The phone number type used to filter results. Required for non-US numbers.
    ///   - state: The state used to filter results. Required only if you provide City. Only applies to the US.
    ///   - tollFreePrefix: The toll-free prefix that you use to filter results. Only applies to the US.
    ///   - logger: Logger used for logging
    @inlinable
    public func searchAvailablePhoneNumbersPaginator(
        areaCode: String? = nil,
        city: String? = nil,
        country: String? = nil,
        maxResults: Int? = nil,
        phoneNumberType: PhoneNumberType? = nil,
        state: String? = nil,
        tollFreePrefix: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) -> AWSClient.PaginatorSequence<SearchAvailablePhoneNumbersRequest, SearchAvailablePhoneNumbersResponse> {
        let input = SearchAvailablePhoneNumbersRequest(
            areaCode: areaCode, 
            city: city, 
            country: country, 
            maxResults: maxResults, 
            phoneNumberType: phoneNumberType, 
            state: state, 
            tollFreePrefix: tollFreePrefix
        )
        return self.searchAvailablePhoneNumbersPaginator(input, logger: logger)
    }
}

extension Chime.ListAccountsRequest: AWSPaginateToken {
    @inlinable
    public func usingPaginationToken(_ token: String) -> Chime.ListAccountsRequest {
        return .init(
            maxResults: self.maxResults,
            name: self.name,
            nextToken: token,
            userEmail: self.userEmail
        )
    }
}

extension Chime.ListAppInstanceAdminsRequest: AWSPaginateToken {
    @inlinable
    public func usingPaginationToken(_ token: String) -> Chime.ListAppInstanceAdminsRequest {
        return .init(
            appInstanceArn: self.appInstanceArn,
            maxResults: self.maxResults,
            nextToken: token
        )
    }
}

extension Chime.ListAppInstanceUsersRequest: AWSPaginateToken {
    @inlinable
    public func usingPaginationToken(_ token: String) -> Chime.ListAppInstanceUsersRequest {
        return .init(
            appInstanceArn: self.appInstanceArn,
            maxResults: self.maxResults,
            nextToken: token
        )
    }
}

extension Chime.ListAppInstancesRequest: AWSPaginateToken {
    @inlinable
    public func usingPaginationToken(_ token: String) -> Chime.ListAppInstancesRequest {
        return .init(
            maxResults: self.maxResults,
            nextToken: token
        )
    }
}

extension Chime.ListAttendeesRequest: AWSPaginateToken {
    @inlinable
    public func usingPaginationToken(_ token: String) -> Chime.ListAttendeesRequest {
        return .init(
            maxResults: self.maxResults,
            meetingId: self.meetingId,
            nextToken: token
        )
    }
}

extension Chime.ListBotsRequest: AWSPaginateToken {
    @inlinable
    public func usingPaginationToken(_ token: String) -> Chime.ListBotsRequest {
        return .init(
            accountId: self.accountId,
            maxResults: self.maxResults,
            nextToken: token
        )
    }
}

extension Chime.ListChannelBansRequest: AWSPaginateToken {
    @inlinable
    public func usingPaginationToken(_ token: String) -> Chime.ListChannelBansRequest {
        return .init(
            channelArn: self.channelArn,
            chimeBearer: self.chimeBearer,
            maxResults: self.maxResults,
            nextToken: token
        )
    }
}

extension Chime.ListChannelMembershipsForAppInstanceUserRequest: AWSPaginateToken {
    @inlinable
    public func usingPaginationToken(_ token: String) -> Chime.ListChannelMembershipsForAppInstanceUserRequest {
        return .init(
            appInstanceUserArn: self.appInstanceUserArn,
            chimeBearer: self.chimeBearer,
            maxResults: self.maxResults,
            nextToken: token
        )
    }
}

extension Chime.ListChannelMembershipsRequest: AWSPaginateToken {
    @inlinable
    public func usingPaginationToken(_ token: String) -> Chime.ListChannelMembershipsRequest {
        return .init(
            channelArn: self.channelArn,
            chimeBearer: self.chimeBearer,
            maxResults: self.maxResults,
            nextToken: token,
            type: self.type
        )
    }
}

extension Chime.ListChannelMessagesRequest: AWSPaginateToken {
    @inlinable
    public func usingPaginationToken(_ token: String) -> Chime.ListChannelMessagesRequest {
        return .init(
            channelArn: self.channelArn,
            chimeBearer: self.chimeBearer,
            maxResults: self.maxResults,
            nextToken: token,
            notAfter: self.notAfter,
            notBefore: self.notBefore,
            sortOrder: self.sortOrder
        )
    }
}

extension Chime.ListChannelModeratorsRequest: AWSPaginateToken {
    @inlinable
    public func usingPaginationToken(_ token: String) -> Chime.ListChannelModeratorsRequest {
        return .init(
            channelArn: self.channelArn,
            chimeBearer: self.chimeBearer,
            maxResults: self.maxResults,
            nextToken: token
        )
    }
}

extension Chime.ListChannelsModeratedByAppInstanceUserRequest: AWSPaginateToken {
    @inlinable
    public func usingPaginationToken(_ token: String) -> Chime.ListChannelsModeratedByAppInstanceUserRequest {
        return .init(
            appInstanceUserArn: self.appInstanceUserArn,
            chimeBearer: self.chimeBearer,
            maxResults: self.maxResults,
            nextToken: token
        )
    }
}

extension Chime.ListChannelsRequest: AWSPaginateToken {
    @inlinable
    public func usingPaginationToken(_ token: String) -> Chime.ListChannelsRequest {
        return .init(
            appInstanceArn: self.appInstanceArn,
            chimeBearer: self.chimeBearer,
            maxResults: self.maxResults,
            nextToken: token,
            privacy: self.privacy
        )
    }
}

extension Chime.ListMediaCapturePipelinesRequest: AWSPaginateToken {
    @inlinable
    public func usingPaginationToken(_ token: String) -> Chime.ListMediaCapturePipelinesRequest {
        return .init(
            maxResults: self.maxResults,
            nextToken: token
        )
    }
}

extension Chime.ListMeetingsRequest: AWSPaginateToken {
    @inlinable
    public func usingPaginationToken(_ token: String) -> Chime.ListMeetingsRequest {
        return .init(
            maxResults: self.maxResults,
            nextToken: token
        )
    }
}

extension Chime.ListPhoneNumberOrdersRequest: AWSPaginateToken {
    @inlinable
    public func usingPaginationToken(_ token: String) -> Chime.ListPhoneNumberOrdersRequest {
        return .init(
            maxResults: self.maxResults,
            nextToken: token
        )
    }
}

extension Chime.ListPhoneNumbersRequest: AWSPaginateToken {
    @inlinable
    public func usingPaginationToken(_ token: String) -> Chime.ListPhoneNumbersRequest {
        return .init(
            filterName: self.filterName,
            filterValue: self.filterValue,
            maxResults: self.maxResults,
            nextToken: token,
            productType: self.productType,
            status: self.status
        )
    }
}

extension Chime.ListProxySessionsRequest: AWSPaginateToken {
    @inlinable
    public func usingPaginationToken(_ token: String) -> Chime.ListProxySessionsRequest {
        return .init(
            maxResults: self.maxResults,
            nextToken: token,
            status: self.status,
            voiceConnectorId: self.voiceConnectorId
        )
    }
}

extension Chime.ListRoomMembershipsRequest: AWSPaginateToken {
    @inlinable
    public func usingPaginationToken(_ token: String) -> Chime.ListRoomMembershipsRequest {
        return .init(
            accountId: self.accountId,
            maxResults: self.maxResults,
            nextToken: token,
            roomId: self.roomId
        )
    }
}

extension Chime.ListRoomsRequest: AWSPaginateToken {
    @inlinable
    public func usingPaginationToken(_ token: String) -> Chime.ListRoomsRequest {
        return .init(
            accountId: self.accountId,
            maxResults: self.maxResults,
            memberId: self.memberId,
            nextToken: token
        )
    }
}

extension Chime.ListSipMediaApplicationsRequest: AWSPaginateToken {
    @inlinable
    public func usingPaginationToken(_ token: String) -> Chime.ListSipMediaApplicationsRequest {
        return .init(
            maxResults: self.maxResults,
            nextToken: token
        )
    }
}

extension Chime.ListSipRulesRequest: AWSPaginateToken {
    @inlinable
    public func usingPaginationToken(_ token: String) -> Chime.ListSipRulesRequest {
        return .init(
            maxResults: self.maxResults,
            nextToken: token,
            sipMediaApplicationId: self.sipMediaApplicationId
        )
    }
}

extension Chime.ListUsersRequest: AWSPaginateToken {
    @inlinable
    public func usingPaginationToken(_ token: String) -> Chime.ListUsersRequest {
        return .init(
            accountId: self.accountId,
            maxResults: self.maxResults,
            nextToken: token,
            userEmail: self.userEmail,
            userType: self.userType
        )
    }
}

extension Chime.ListVoiceConnectorGroupsRequest: AWSPaginateToken {
    @inlinable
    public func usingPaginationToken(_ token: String) -> Chime.ListVoiceConnectorGroupsRequest {
        return .init(
            maxResults: self.maxResults,
            nextToken: token
        )
    }
}

extension Chime.ListVoiceConnectorsRequest: AWSPaginateToken {
    @inlinable
    public func usingPaginationToken(_ token: String) -> Chime.ListVoiceConnectorsRequest {
        return .init(
            maxResults: self.maxResults,
            nextToken: token
        )
    }
}

extension Chime.SearchAvailablePhoneNumbersRequest: AWSPaginateToken {
    @inlinable
    public func usingPaginationToken(_ token: String) -> Chime.SearchAvailablePhoneNumbersRequest {
        return .init(
            areaCode: self.areaCode,
            city: self.city,
            country: self.country,
            maxResults: self.maxResults,
            nextToken: token,
            phoneNumberType: self.phoneNumberType,
            state: self.state,
            tollFreePrefix: self.tollFreePrefix
        )
    }
}
