//===----------------------------------------------------------------------===//
//
// This source file is part of the Soto for AWS open source project
//
// Copyright (c) 2017-2024 the Soto project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
// See CONTRIBUTORS.txt for the list of Soto project authors
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by https://github.com/soto-project/soto-codegenerator.
// DO NOT EDIT.

#if canImport(FoundationEssentials)
import FoundationEssentials
#else
import Foundation
#endif
@_exported import SotoCore

/// Service object for interacting with AWS ARCZonalShift service.
///
/// Welcome to the API Reference Guide for zonal shift and zonal autoshift in Amazon Route 53 Application Recovery Controller (ARC). You can start a zonal shift to move traffic for a load balancer resource away from an Availability Zone to
/// 			help your application recover quickly from an impairment in an Availability Zone. For example,
/// 			you can recover your application from a developer's bad code deployment or from an
/// 			Amazon Web Services infrastructure failure in a single Availability Zone. You can also configure zonal autoshift for supported load balancer resources. Zonal autoshift
/// 			is a capability in ARC where you authorize Amazon Web Services to shift away application resource
/// 			traffic from an Availability Zone during events, on your behalf, to help reduce your time to recovery.
/// 			Amazon Web Services starts an autoshift when internal telemetry indicates that there is an Availability
/// 			Zone impairment that could potentially impact customers. To help make sure that zonal autoshift is safe for your application, you must
/// 			also configure practice runs when you enable zonal autoshift for a resource. Practice runs start
/// 			weekly zonal shifts for a resource, to shift traffic for the resource away from an Availability Zone.
/// 			Practice runs help you to make sure, on a regular basis, that you have enough capacity in all the
/// 			Availability Zones in an Amazon Web Services Region for your application to continue to operate normally
/// 			when traffic for a resource is shifted away from one Availability Zone.  Before you configure practice runs or enable zonal autoshift, we strongly recommend
/// 			that you prescale your application resource capacity in all Availability Zones in the Region where
/// 			your application resources are deployed. You should not rely on scaling on demand when an
/// 			autoshift or practice run starts. Zonal autoshift, including practice runs, works independently,
/// 			and does not wait for auto scaling actions to complete. Relying on auto scaling, instead of
/// 			pre-scaling, can result in loss of availability. If you use auto scaling to handle regular cycles of traffic, we strongly recommend that you configure
/// 				the minimum capacity of your auto scaling to continue operating normally with the loss of an
/// 				Availability Zone.   Be aware that ARC does not inspect the health of individual resources. Amazon Web Services only starts an
/// 			autoshift when Amazon Web Services telemetry detects that there is an Availability Zone impairment that could
/// 			potentially impact customers. In some cases, resources might be shifted away that are not experiencing
/// 			impact. For more information about using zonal shift and zonal autoshift, see the
/// 			Amazon Route 53 Application Recovery Controller
/// 				Developer Guide.
public struct ARCZonalShift: AWSService {
    // MARK: Member variables

    /// Client used for communication with AWS
    public let client: AWSClient
    /// Service configuration
    public let config: AWSServiceConfig

    // MARK: Initialization

    /// Initialize the ARCZonalShift client
    /// - parameters:
    ///     - client: AWSClient used to process requests
    ///     - region: Region of server you want to communicate with. This will override the partition parameter.
    ///     - partition: AWS partition where service resides, standard (.aws), china (.awscn), government (.awsusgov).
    ///     - endpoint: Custom endpoint URL to use instead of standard AWS servers
    ///     - middleware: Middleware chain used to edit requests before they are sent and responses before they are decoded 
    ///     - timeout: Timeout value for HTTP requests
    ///     - byteBufferAllocator: Allocator for ByteBuffers
    ///     - options: Service options
    public init(
        client: AWSClient,
        region: SotoCore.Region? = nil,
        partition: AWSPartition = .aws,
        endpoint: String? = nil,
        middleware: AWSMiddlewareProtocol? = nil,
        timeout: TimeAmount? = nil,
        byteBufferAllocator: ByteBufferAllocator = ByteBufferAllocator(),
        options: AWSServiceConfig.Options = []
    ) {
        self.client = client
        self.config = AWSServiceConfig(
            region: region,
            partition: region?.partition ?? partition,
            serviceName: "ARCZonalShift",
            serviceIdentifier: "arc-zonal-shift",
            serviceProtocol: .restjson,
            apiVersion: "2022-10-30",
            endpoint: endpoint,
            errorType: ARCZonalShiftErrorType.self,
            middleware: middleware,
            timeout: timeout,
            byteBufferAllocator: byteBufferAllocator,
            options: options
        )
    }





    // MARK: API Calls

    /// Cancel a zonal shift in Amazon Route 53 Application Recovery Controller. To cancel the zonal shift, specify the zonal shift ID. A zonal shift can be one that you've started for a resource in your Amazon Web Services account  		in an Amazon Web Services Region, or it can be a zonal shift started by a practice run with zonal  		autoshift.
    @Sendable
    @inlinable
    public func cancelZonalShift(_ input: CancelZonalShiftRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> ZonalShift {
        try await self.client.execute(
            operation: "CancelZonalShift", 
            path: "/zonalshifts/{zonalShiftId}", 
            httpMethod: .DELETE, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Cancel a zonal shift in Amazon Route 53 Application Recovery Controller. To cancel the zonal shift, specify the zonal shift ID. A zonal shift can be one that you've started for a resource in your Amazon Web Services account  		in an Amazon Web Services Region, or it can be a zonal shift started by a practice run with zonal  		autoshift.
    ///
    /// Parameters:
    ///   - zonalShiftId: The internally-generated identifier of a zonal shift.
    ///   - logger: Logger use during operation
    @inlinable
    public func cancelZonalShift(
        zonalShiftId: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> ZonalShift {
        let input = CancelZonalShiftRequest(
            zonalShiftId: zonalShiftId
        )
        return try await self.cancelZonalShift(input, logger: logger)
    }

    /// A practice run configuration for zonal autoshift is required when you enable zonal autoshift.
    /// 			A practice run configuration includes specifications for blocked dates and blocked time windows,
    /// 		and for Amazon CloudWatch alarms that you create to use with practice runs. The alarms that you specify are an
    /// 			outcome alarm, to monitor application health during practice runs and,
    /// 			optionally, a blocking alarm, to block practice runs from starting. When a resource has a practice run configuration, ARC starts zonal shifts for the resource
    /// 			weekly, to shift traffic for practice runs. Practice runs help you to ensure that
    /// 			shifting away traffic from an Availability Zone during an autoshift is safe for your application. For more information, see
    ///
    /// 				Considerations when you configure zonal autoshift in the Amazon Route 53 Application Recovery Controller Developer Guide.
    @Sendable
    @inlinable
    public func createPracticeRunConfiguration(_ input: CreatePracticeRunConfigurationRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> CreatePracticeRunConfigurationResponse {
        try await self.client.execute(
            operation: "CreatePracticeRunConfiguration", 
            path: "/configuration", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// A practice run configuration for zonal autoshift is required when you enable zonal autoshift.
    /// 			A practice run configuration includes specifications for blocked dates and blocked time windows,
    /// 		and for Amazon CloudWatch alarms that you create to use with practice runs. The alarms that you specify are an
    /// 			outcome alarm, to monitor application health during practice runs and,
    /// 			optionally, a blocking alarm, to block practice runs from starting. When a resource has a practice run configuration, ARC starts zonal shifts for the resource
    /// 			weekly, to shift traffic for practice runs. Practice runs help you to ensure that
    /// 			shifting away traffic from an Availability Zone during an autoshift is safe for your application. For more information, see
    ///
    /// 				Considerations when you configure zonal autoshift in the Amazon Route 53 Application Recovery Controller Developer Guide.
    ///
    /// Parameters:
    ///   - blockedDates: Optionally, you can block ARC from starting practice runs for a resource
    ///   - blockedWindows: Optionally, you can block ARC from starting practice runs for specific windows of
    ///   - blockingAlarms: An Amazon CloudWatch alarm that you can specify for zonal autoshift
    ///   - outcomeAlarms: The outcome alarm for practice runs is a required
    ///   - resourceIdentifier: The identifier of the resource that Amazon Web Services shifts traffic for with a practice
    ///   - logger: Logger use during operation
    @inlinable
    public func createPracticeRunConfiguration(
        blockedDates: [String]? = nil,
        blockedWindows: [String]? = nil,
        blockingAlarms: [ControlCondition]? = nil,
        outcomeAlarms: [ControlCondition],
        resourceIdentifier: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> CreatePracticeRunConfigurationResponse {
        let input = CreatePracticeRunConfigurationRequest(
            blockedDates: blockedDates, 
            blockedWindows: blockedWindows, 
            blockingAlarms: blockingAlarms, 
            outcomeAlarms: outcomeAlarms, 
            resourceIdentifier: resourceIdentifier
        )
        return try await self.createPracticeRunConfiguration(input, logger: logger)
    }

    /// Deletes the practice run configuration for a resource. Before you can delete
    /// 			a practice run configuration for a resource., you must disable zonal autoshift for
    /// 			the resource. Practice runs must be configured for zonal autoshift to be enabled.
    @Sendable
    @inlinable
    public func deletePracticeRunConfiguration(_ input: DeletePracticeRunConfigurationRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DeletePracticeRunConfigurationResponse {
        try await self.client.execute(
            operation: "DeletePracticeRunConfiguration", 
            path: "/configuration/{resourceIdentifier}", 
            httpMethod: .DELETE, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Deletes the practice run configuration for a resource. Before you can delete
    /// 			a practice run configuration for a resource., you must disable zonal autoshift for
    /// 			the resource. Practice runs must be configured for zonal autoshift to be enabled.
    ///
    /// Parameters:
    ///   - resourceIdentifier: The identifier for the resource that you want to delete the practice
    ///   - logger: Logger use during operation
    @inlinable
    public func deletePracticeRunConfiguration(
        resourceIdentifier: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> DeletePracticeRunConfigurationResponse {
        let input = DeletePracticeRunConfigurationRequest(
            resourceIdentifier: resourceIdentifier
        )
        return try await self.deletePracticeRunConfiguration(input, logger: logger)
    }

    /// Returns the status of the autoshift observer notification. Autoshift observer notifications notify you through Amazon EventBridge when there is an autoshift event for zonal autoshift. The status can be ENABLED or DISABLED. When ENABLED, a notification is sent when an autoshift is triggered. When DISABLED, notifications are not sent.
    ///
    @Sendable
    @inlinable
    public func getAutoshiftObserverNotificationStatus(_ input: GetAutoshiftObserverNotificationStatusRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> GetAutoshiftObserverNotificationStatusResponse {
        try await self.client.execute(
            operation: "GetAutoshiftObserverNotificationStatus", 
            path: "/autoshift-observer-notification", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Returns the status of the autoshift observer notification. Autoshift observer notifications notify you through Amazon EventBridge when there is an autoshift event for zonal autoshift. The status can be ENABLED or DISABLED. When ENABLED, a notification is sent when an autoshift is triggered. When DISABLED, notifications are not sent.
    ///
    ///
    /// Parameters:
    ///   - logger: Logger use during operation
    @inlinable
    public func getAutoshiftObserverNotificationStatus(
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> GetAutoshiftObserverNotificationStatusResponse {
        let input = GetAutoshiftObserverNotificationStatusRequest(
        )
        return try await self.getAutoshiftObserverNotificationStatus(input, logger: logger)
    }

    /// Get information about a resource that's been registered for zonal shifts with Amazon Route 53 Application Recovery Controller in this Amazon Web Services Region. Resources that are registered for 		zonal shifts are managed resources in ARC. You can start zonal shifts and configure zonal autoshift for managed resources.
    @Sendable
    @inlinable
    public func getManagedResource(_ input: GetManagedResourceRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> GetManagedResourceResponse {
        try await self.client.execute(
            operation: "GetManagedResource", 
            path: "/managedresources/{resourceIdentifier}", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Get information about a resource that's been registered for zonal shifts with Amazon Route 53 Application Recovery Controller in this Amazon Web Services Region. Resources that are registered for 		zonal shifts are managed resources in ARC. You can start zonal shifts and configure zonal autoshift for managed resources.
    ///
    /// Parameters:
    ///   - resourceIdentifier: The identifier for the resource that Amazon Web Services shifts traffic for. The identifier is the Amazon Resource Name (ARN) for the resource. At this time, supported resources are Network Load Balancers and Application Load Balancers with cross-zone load balancing turned off.
    ///   - logger: Logger use during operation
    @inlinable
    public func getManagedResource(
        resourceIdentifier: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> GetManagedResourceResponse {
        let input = GetManagedResourceRequest(
            resourceIdentifier: resourceIdentifier
        )
        return try await self.getManagedResource(input, logger: logger)
    }

    /// Returns the autoshifts for an Amazon Web Services Region. By default, the call returns
    /// 			only ACTIVE autoshifts. Optionally, you can specify the status parameter to return
    /// 			COMPLETED autoshifts.
    ///
    @Sendable
    @inlinable
    public func listAutoshifts(_ input: ListAutoshiftsRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> ListAutoshiftsResponse {
        try await self.client.execute(
            operation: "ListAutoshifts", 
            path: "/autoshifts", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Returns the autoshifts for an Amazon Web Services Region. By default, the call returns
    /// 			only ACTIVE autoshifts. Optionally, you can specify the status parameter to return
    /// 			COMPLETED autoshifts.
    ///
    ///
    /// Parameters:
    ///   - maxResults: The number of objects that you want to return with this call.
    ///   - nextToken: Specifies that you want to receive the next page of results. Valid only if you received a nextToken response in the
    ///   - status: The status of the autoshift.
    ///   - logger: Logger use during operation
    @inlinable
    public func listAutoshifts(
        maxResults: Int? = nil,
        nextToken: String? = nil,
        status: AutoshiftExecutionStatus? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> ListAutoshiftsResponse {
        let input = ListAutoshiftsRequest(
            maxResults: maxResults, 
            nextToken: nextToken, 
            status: status
        )
        return try await self.listAutoshifts(input, logger: logger)
    }

    /// Lists all the resources in your Amazon Web Services account in this Amazon Web Services Region that are managed for  		zonal shifts in Amazon Route 53 Application Recovery Controller, and information about them. The information includes the zonal autoshift status for the resource,  		as well as the Amazon Resource Name (ARN), the Availability Zones that each resource is deployed in, and  		the resource name.
    @Sendable
    @inlinable
    public func listManagedResources(_ input: ListManagedResourcesRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> ListManagedResourcesResponse {
        try await self.client.execute(
            operation: "ListManagedResources", 
            path: "/managedresources", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Lists all the resources in your Amazon Web Services account in this Amazon Web Services Region that are managed for  		zonal shifts in Amazon Route 53 Application Recovery Controller, and information about them. The information includes the zonal autoshift status for the resource,  		as well as the Amazon Resource Name (ARN), the Availability Zones that each resource is deployed in, and  		the resource name.
    ///
    /// Parameters:
    ///   - maxResults: The number of objects that you want to return with this call.
    ///   - nextToken: Specifies that you want to receive the next page of results. Valid only if you received a nextToken response in the  		previous request. If you did, it indicates that more output is available. Set this parameter to the value provided by the previous  		call's nextToken response to request the next page of results.
    ///   - logger: Logger use during operation
    @inlinable
    public func listManagedResources(
        maxResults: Int? = nil,
        nextToken: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> ListManagedResourcesResponse {
        let input = ListManagedResourcesRequest(
            maxResults: maxResults, 
            nextToken: nextToken
        )
        return try await self.listManagedResources(input, logger: logger)
    }

    /// Lists all active and completed zonal shifts in Amazon Route 53 Application Recovery Controller in your Amazon Web Services account in this Amazon Web Services Region. 		ListZonalShifts returns customer-initiated zonal shifts, as well as practice run zonal shifts that ARC started on  		your behalf for zonal autoshift. For more information about listing 		autoshifts, see "&gt;ListAutoshifts.
    @Sendable
    @inlinable
    public func listZonalShifts(_ input: ListZonalShiftsRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> ListZonalShiftsResponse {
        try await self.client.execute(
            operation: "ListZonalShifts", 
            path: "/zonalshifts", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Lists all active and completed zonal shifts in Amazon Route 53 Application Recovery Controller in your Amazon Web Services account in this Amazon Web Services Region. 		ListZonalShifts returns customer-initiated zonal shifts, as well as practice run zonal shifts that ARC started on  		your behalf for zonal autoshift. For more information about listing 		autoshifts, see "&gt;ListAutoshifts.
    ///
    /// Parameters:
    ///   - maxResults: The number of objects that you want to return with this call.
    ///   - nextToken: Specifies that you want to receive the next page of results. Valid only if you received a nextToken response in the  		previous request. If you did, it indicates that more output is available. Set this parameter to the value provided by the previous  		call's nextToken response to request the next page of results.
    ///   - resourceIdentifier: The identifier for the resource that you want to list zonal shifts for.
    ///   - status: A status for a zonal shift. The Status for a zonal shift can have one of the following values:    ACTIVE: The zonal shift has been started and active.    EXPIRED: The zonal shift has expired (the expiry time was exceeded).    CANCELED: The zonal shift was canceled.
    ///   - logger: Logger use during operation
    @inlinable
    public func listZonalShifts(
        maxResults: Int? = nil,
        nextToken: String? = nil,
        resourceIdentifier: String? = nil,
        status: ZonalShiftStatus? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> ListZonalShiftsResponse {
        let input = ListZonalShiftsRequest(
            maxResults: maxResults, 
            nextToken: nextToken, 
            resourceIdentifier: resourceIdentifier, 
            status: status
        )
        return try await self.listZonalShifts(input, logger: logger)
    }

    /// You start a zonal shift to temporarily move load balancer traffic away from an Availability Zone in an Amazon Web Services Region, 		to help your application recover immediately, for example, from a developer's bad code deployment or from an Amazon Web Services  		infrastructure failure in a single Availability Zone. You can start a zonal shift in ARC only for managed 		resources in your Amazon Web Services account in an Amazon Web Services Region. Resources are automatically registered with ARC  		by Amazon Web Services services. At this time, you can only start a zonal shift for Network Load Balancers and Application Load Balancers with cross-zone load balancing turned off. When you start a zonal shift, traffic for the resource is no longer routed to the Availability Zone. The 		zonal shift is created immediately in ARC. However, it can take a short time, typically up to a few minutes, 		for existing, in-progress connections in the Availability Zone to complete. For more information, see Zonal shift 		in the Amazon Route 53 Application Recovery Controller Developer Guide.
    @Sendable
    @inlinable
    public func startZonalShift(_ input: StartZonalShiftRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> ZonalShift {
        try await self.client.execute(
            operation: "StartZonalShift", 
            path: "/zonalshifts", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// You start a zonal shift to temporarily move load balancer traffic away from an Availability Zone in an Amazon Web Services Region, 		to help your application recover immediately, for example, from a developer's bad code deployment or from an Amazon Web Services  		infrastructure failure in a single Availability Zone. You can start a zonal shift in ARC only for managed 		resources in your Amazon Web Services account in an Amazon Web Services Region. Resources are automatically registered with ARC  		by Amazon Web Services services. At this time, you can only start a zonal shift for Network Load Balancers and Application Load Balancers with cross-zone load balancing turned off. When you start a zonal shift, traffic for the resource is no longer routed to the Availability Zone. The 		zonal shift is created immediately in ARC. However, it can take a short time, typically up to a few minutes, 		for existing, in-progress connections in the Availability Zone to complete. For more information, see Zonal shift 		in the Amazon Route 53 Application Recovery Controller Developer Guide.
    ///
    /// Parameters:
    ///   - awayFrom: The Availability Zone (for example, use1-az1) that traffic is moved away from for a resource when you start a zonal shift.  		Until the zonal shift expires or you cancel it, traffic for the resource is instead moved to other Availability Zones in the Amazon Web Services Region.
    ///   - comment: A comment that you enter about the zonal shift. Only the latest comment is retained; no comment 		history is maintained. A new comment overwrites any existing comment string.
    ///   - expiresIn: The length of time that you want a zonal shift to be active, which ARC converts to an expiry time (expiration time).
    ///   - resourceIdentifier: The identifier for the resource that Amazon Web Services shifts traffic for. The identifier is the Amazon Resource Name (ARN) for the resource. At this time, supported resources are Network Load Balancers and Application Load Balancers with cross-zone load balancing turned off.
    ///   - logger: Logger use during operation
    @inlinable
    public func startZonalShift(
        awayFrom: String,
        comment: String,
        expiresIn: String,
        resourceIdentifier: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> ZonalShift {
        let input = StartZonalShiftRequest(
            awayFrom: awayFrom, 
            comment: comment, 
            expiresIn: expiresIn, 
            resourceIdentifier: resourceIdentifier
        )
        return try await self.startZonalShift(input, logger: logger)
    }

    /// Update the status of autoshift observer notification. Autoshift observer
    /// 			notification enables you to be notified, through Amazon EventBridge, when
    /// 			there is an autoshift event for zonal autoshift. If the status is ENABLED,
    /// 			ARC includes all autoshift events when you use the EventBridge pattern
    /// 			Autoshift In Progress. When the status is DISABLED,
    /// 			ARC includes only autoshift events for autoshifts when one or more of your
    /// 			resources is included in the autoshift. For more information, see
    ///
    /// 				Notifications for practice runs and autoshifts in the Amazon Route 53 Application Recovery Controller Developer Guide.
    @Sendable
    @inlinable
    public func updateAutoshiftObserverNotificationStatus(_ input: UpdateAutoshiftObserverNotificationStatusRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> UpdateAutoshiftObserverNotificationStatusResponse {
        try await self.client.execute(
            operation: "UpdateAutoshiftObserverNotificationStatus", 
            path: "/autoshift-observer-notification", 
            httpMethod: .PUT, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Update the status of autoshift observer notification. Autoshift observer
    /// 			notification enables you to be notified, through Amazon EventBridge, when
    /// 			there is an autoshift event for zonal autoshift. If the status is ENABLED,
    /// 			ARC includes all autoshift events when you use the EventBridge pattern
    /// 			Autoshift In Progress. When the status is DISABLED,
    /// 			ARC includes only autoshift events for autoshifts when one or more of your
    /// 			resources is included in the autoshift. For more information, see
    ///
    /// 				Notifications for practice runs and autoshifts in the Amazon Route 53 Application Recovery Controller Developer Guide.
    ///
    /// Parameters:
    ///   - status: The status to set for autoshift observer notification. If the status is ENABLED,
    ///   - logger: Logger use during operation
    @inlinable
    public func updateAutoshiftObserverNotificationStatus(
        status: AutoshiftObserverNotificationStatus,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> UpdateAutoshiftObserverNotificationStatusResponse {
        let input = UpdateAutoshiftObserverNotificationStatusRequest(
            status: status
        )
        return try await self.updateAutoshiftObserverNotificationStatus(input, logger: logger)
    }

    /// Update a practice run configuration to change one or more of the following: add,
    /// 			change, or remove the blocking alarm; change the outcome alarm; or add, change,
    /// 			or remove blocking dates or time windows.
    @Sendable
    @inlinable
    public func updatePracticeRunConfiguration(_ input: UpdatePracticeRunConfigurationRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> UpdatePracticeRunConfigurationResponse {
        try await self.client.execute(
            operation: "UpdatePracticeRunConfiguration", 
            path: "/configuration/{resourceIdentifier}", 
            httpMethod: .PATCH, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Update a practice run configuration to change one or more of the following: add,
    /// 			change, or remove the blocking alarm; change the outcome alarm; or add, change,
    /// 			or remove blocking dates or time windows.
    ///
    /// Parameters:
    ///   - blockedDates: Add, change, or remove blocked dates for a practice run in zonal autoshift. Optionally, you can block practice runs for specific calendar dates.
    ///   - blockedWindows: Add, change, or remove windows of days and times for when you can, optionally,
    ///   - blockingAlarms: Add, change, or remove the Amazon CloudWatch alarm that you optionally
    ///   - outcomeAlarms: Specify a new the Amazon CloudWatch alarm as the outcome alarm for practice runs.
    ///   - resourceIdentifier: The identifier for the resource that you want to update the practice
    ///   - logger: Logger use during operation
    @inlinable
    public func updatePracticeRunConfiguration(
        blockedDates: [String]? = nil,
        blockedWindows: [String]? = nil,
        blockingAlarms: [ControlCondition]? = nil,
        outcomeAlarms: [ControlCondition]? = nil,
        resourceIdentifier: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> UpdatePracticeRunConfigurationResponse {
        let input = UpdatePracticeRunConfigurationRequest(
            blockedDates: blockedDates, 
            blockedWindows: blockedWindows, 
            blockingAlarms: blockingAlarms, 
            outcomeAlarms: outcomeAlarms, 
            resourceIdentifier: resourceIdentifier
        )
        return try await self.updatePracticeRunConfiguration(input, logger: logger)
    }

    /// The zonal autoshift configuration for a resource includes the practice run configuration and the status for
    /// 			running autoshifts, zonal autoshift status. When a resource has a practice run configuation, Route 53 ARC
    /// 			starts weekly zonal shifts for the resource, to shift traffic away from an Availability Zone. Weekly practice
    /// 			runs help you to make sure that your application can continue to operate normally with the loss of one Availability Zone. You can update the zonal autoshift autoshift status to enable or disable zonal autoshift. When zonal
    /// 			autoshift is ENABLED, you authorize Amazon Web Services to shift away resource traffic for
    /// 			an application from an Availability Zone during events, on your behalf, to help reduce time to recovery.
    /// 			Traffic is also shifted away for the required weekly practice runs.
    @Sendable
    @inlinable
    public func updateZonalAutoshiftConfiguration(_ input: UpdateZonalAutoshiftConfigurationRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> UpdateZonalAutoshiftConfigurationResponse {
        try await self.client.execute(
            operation: "UpdateZonalAutoshiftConfiguration", 
            path: "/managedresources/{resourceIdentifier}", 
            httpMethod: .PUT, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// The zonal autoshift configuration for a resource includes the practice run configuration and the status for
    /// 			running autoshifts, zonal autoshift status. When a resource has a practice run configuation, Route 53 ARC
    /// 			starts weekly zonal shifts for the resource, to shift traffic away from an Availability Zone. Weekly practice
    /// 			runs help you to make sure that your application can continue to operate normally with the loss of one Availability Zone. You can update the zonal autoshift autoshift status to enable or disable zonal autoshift. When zonal
    /// 			autoshift is ENABLED, you authorize Amazon Web Services to shift away resource traffic for
    /// 			an application from an Availability Zone during events, on your behalf, to help reduce time to recovery.
    /// 			Traffic is also shifted away for the required weekly practice runs.
    ///
    /// Parameters:
    ///   - resourceIdentifier: The identifier for the resource that you want to update the zonal autoshift
    ///   - zonalAutoshiftStatus: The zonal autoshift status for the resource that you want to update the zonal
    ///   - logger: Logger use during operation
    @inlinable
    public func updateZonalAutoshiftConfiguration(
        resourceIdentifier: String,
        zonalAutoshiftStatus: ZonalAutoshiftStatus,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> UpdateZonalAutoshiftConfigurationResponse {
        let input = UpdateZonalAutoshiftConfigurationRequest(
            resourceIdentifier: resourceIdentifier, 
            zonalAutoshiftStatus: zonalAutoshiftStatus
        )
        return try await self.updateZonalAutoshiftConfiguration(input, logger: logger)
    }

    /// Update an active zonal shift in Amazon Route 53 Application Recovery Controller in your Amazon Web Services account. You can update a zonal shift to set a new expiration, or  		edit or replace the comment for the zonal shift.
    @Sendable
    @inlinable
    public func updateZonalShift(_ input: UpdateZonalShiftRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> ZonalShift {
        try await self.client.execute(
            operation: "UpdateZonalShift", 
            path: "/zonalshifts/{zonalShiftId}", 
            httpMethod: .PATCH, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Update an active zonal shift in Amazon Route 53 Application Recovery Controller in your Amazon Web Services account. You can update a zonal shift to set a new expiration, or  		edit or replace the comment for the zonal shift.
    ///
    /// Parameters:
    ///   - comment: A comment that you enter about the zonal shift. Only the latest comment is retained; no comment 		history is maintained. A new comment overwrites any existing comment string.
    ///   - expiresIn: The length of time that you want a zonal shift to be active, which ARC converts to an expiry time (expiration time). 		Zonal shifts are temporary. You can set a zonal shift to be active initially for up to three days (72 hours). If you want to still keep traffic away from an Availability Zone, you can update the  		zonal shift and set a new expiration. You can also cancel a zonal shift, before it expires, for example, if you're ready to  		restore traffic to the Availability Zone. To set a length of time for a zonal shift to be active, specify a whole number, and then one of the following, with no space:    A lowercase letter m: To specify that the value is in minutes.    A lowercase letter h: To specify that the value is in hours.   For example: 20h means the zonal shift expires in 20 hours. 120m means the zonal shift expires in 120 minutes (2 hours).
    ///   - zonalShiftId: The identifier of a zonal shift.
    ///   - logger: Logger use during operation
    @inlinable
    public func updateZonalShift(
        comment: String? = nil,
        expiresIn: String? = nil,
        zonalShiftId: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> ZonalShift {
        let input = UpdateZonalShiftRequest(
            comment: comment, 
            expiresIn: expiresIn, 
            zonalShiftId: zonalShiftId
        )
        return try await self.updateZonalShift(input, logger: logger)
    }
}

extension ARCZonalShift {
    /// Initializer required by `AWSService.with(middlewares:timeout:byteBufferAllocator:options)`. You are not able to use this initializer directly as there are not public
    /// initializers for `AWSServiceConfig.Patch`. Please use `AWSService.with(middlewares:timeout:byteBufferAllocator:options)` instead.
    public init(from: ARCZonalShift, patch: AWSServiceConfig.Patch) {
        self.client = from.client
        self.config = from.config.with(patch: patch)
    }
}

// MARK: Paginators

@available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
extension ARCZonalShift {
    /// Return PaginatorSequence for operation ``listAutoshifts(_:logger:)``.
    ///
    /// - Parameters:
    ///   - input: Input for operation
    ///   - logger: Logger used for logging
    @inlinable
    public func listAutoshiftsPaginator(
        _ input: ListAutoshiftsRequest,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<ListAutoshiftsRequest, ListAutoshiftsResponse> {
        return .init(
            input: input,
            command: self.listAutoshifts,
            inputKey: \ListAutoshiftsRequest.nextToken,
            outputKey: \ListAutoshiftsResponse.nextToken,
            logger: logger
        )
    }
    /// Return PaginatorSequence for operation ``listAutoshifts(_:logger:)``.
    ///
    /// - Parameters:
    ///   - maxResults: The number of objects that you want to return with this call.
    ///   - status: The status of the autoshift.
    ///   - logger: Logger used for logging
    @inlinable
    public func listAutoshiftsPaginator(
        maxResults: Int? = nil,
        status: AutoshiftExecutionStatus? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) -> AWSClient.PaginatorSequence<ListAutoshiftsRequest, ListAutoshiftsResponse> {
        let input = ListAutoshiftsRequest(
            maxResults: maxResults, 
            status: status
        )
        return self.listAutoshiftsPaginator(input, logger: logger)
    }

    /// Return PaginatorSequence for operation ``listManagedResources(_:logger:)``.
    ///
    /// - Parameters:
    ///   - input: Input for operation
    ///   - logger: Logger used for logging
    @inlinable
    public func listManagedResourcesPaginator(
        _ input: ListManagedResourcesRequest,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<ListManagedResourcesRequest, ListManagedResourcesResponse> {
        return .init(
            input: input,
            command: self.listManagedResources,
            inputKey: \ListManagedResourcesRequest.nextToken,
            outputKey: \ListManagedResourcesResponse.nextToken,
            logger: logger
        )
    }
    /// Return PaginatorSequence for operation ``listManagedResources(_:logger:)``.
    ///
    /// - Parameters:
    ///   - maxResults: The number of objects that you want to return with this call.
    ///   - logger: Logger used for logging
    @inlinable
    public func listManagedResourcesPaginator(
        maxResults: Int? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) -> AWSClient.PaginatorSequence<ListManagedResourcesRequest, ListManagedResourcesResponse> {
        let input = ListManagedResourcesRequest(
            maxResults: maxResults
        )
        return self.listManagedResourcesPaginator(input, logger: logger)
    }

    /// Return PaginatorSequence for operation ``listZonalShifts(_:logger:)``.
    ///
    /// - Parameters:
    ///   - input: Input for operation
    ///   - logger: Logger used for logging
    @inlinable
    public func listZonalShiftsPaginator(
        _ input: ListZonalShiftsRequest,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<ListZonalShiftsRequest, ListZonalShiftsResponse> {
        return .init(
            input: input,
            command: self.listZonalShifts,
            inputKey: \ListZonalShiftsRequest.nextToken,
            outputKey: \ListZonalShiftsResponse.nextToken,
            logger: logger
        )
    }
    /// Return PaginatorSequence for operation ``listZonalShifts(_:logger:)``.
    ///
    /// - Parameters:
    ///   - maxResults: The number of objects that you want to return with this call.
    ///   - resourceIdentifier: The identifier for the resource that you want to list zonal shifts for.
    ///   - status: A status for a zonal shift. The Status for a zonal shift can have one of the following values:    ACTIVE: The zonal shift has been started and active.    EXPIRED: The zonal shift has expired (the expiry time was exceeded).    CANCELED: The zonal shift was canceled.
    ///   - logger: Logger used for logging
    @inlinable
    public func listZonalShiftsPaginator(
        maxResults: Int? = nil,
        resourceIdentifier: String? = nil,
        status: ZonalShiftStatus? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) -> AWSClient.PaginatorSequence<ListZonalShiftsRequest, ListZonalShiftsResponse> {
        let input = ListZonalShiftsRequest(
            maxResults: maxResults, 
            resourceIdentifier: resourceIdentifier, 
            status: status
        )
        return self.listZonalShiftsPaginator(input, logger: logger)
    }
}

extension ARCZonalShift.ListAutoshiftsRequest: AWSPaginateToken {
    @inlinable
    public func usingPaginationToken(_ token: String) -> ARCZonalShift.ListAutoshiftsRequest {
        return .init(
            maxResults: self.maxResults,
            nextToken: token,
            status: self.status
        )
    }
}

extension ARCZonalShift.ListManagedResourcesRequest: AWSPaginateToken {
    @inlinable
    public func usingPaginationToken(_ token: String) -> ARCZonalShift.ListManagedResourcesRequest {
        return .init(
            maxResults: self.maxResults,
            nextToken: token
        )
    }
}

extension ARCZonalShift.ListZonalShiftsRequest: AWSPaginateToken {
    @inlinable
    public func usingPaginationToken(_ token: String) -> ARCZonalShift.ListZonalShiftsRequest {
        return .init(
            maxResults: self.maxResults,
            nextToken: token,
            resourceIdentifier: self.resourceIdentifier,
            status: self.status
        )
    }
}
