//===----------------------------------------------------------------------===//
//
// This source file is part of the Soto for AWS open source project
//
// Copyright (c) 2017-2021 the Soto project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
// See CONTRIBUTORS.txt for the list of Soto project authors
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by https://github.com/soto-project/soto/tree/main/CodeGenerator. DO NOT EDIT.

import Foundation
import SotoCore

extension AmplifyBackend {
    // MARK: Enums

    public enum AdditionalConstraintsElement: String, CustomStringConvertible, Codable {
        case requireDigit = "REQUIRE_DIGIT"
        case requireLowercase = "REQUIRE_LOWERCASE"
        case requireSymbol = "REQUIRE_SYMBOL"
        case requireUppercase = "REQUIRE_UPPERCASE"
        public var description: String { return self.rawValue }
    }

    public enum AuthResources: String, CustomStringConvertible, Codable {
        case identityPoolAndUserPool = "IDENTITY_POOL_AND_USER_POOL"
        case userPoolOnly = "USER_POOL_ONLY"
        public var description: String { return self.rawValue }
    }

    public enum DeliveryMethod: String, CustomStringConvertible, Codable {
        case email = "EMAIL"
        case sms = "SMS"
        public var description: String { return self.rawValue }
    }

    public enum MFAMode: String, CustomStringConvertible, Codable {
        case off = "OFF"
        case on = "ON"
        case optional = "OPTIONAL"
        public var description: String { return self.rawValue }
    }

    public enum MfaTypesElement: String, CustomStringConvertible, Codable {
        case sms = "SMS"
        case totp = "TOTP"
        public var description: String { return self.rawValue }
    }

    public enum Mode: String, CustomStringConvertible, Codable {
        case amazonCognitoUserPools = "AMAZON_COGNITO_USER_POOLS"
        case apiKey = "API_KEY"
        case awsIam = "AWS_IAM"
        case openidConnect = "OPENID_CONNECT"
        public var description: String { return self.rawValue }
    }

    public enum OAuthGrantType: String, CustomStringConvertible, Codable {
        case code = "CODE"
        case implicit = "IMPLICIT"
        public var description: String { return self.rawValue }
    }

    public enum OAuthScopesElement: String, CustomStringConvertible, Codable {
        case awsCognitoSigninUserAdmin = "AWS_COGNITO_SIGNIN_USER_ADMIN"
        case email = "EMAIL"
        case openid = "OPENID"
        case phone = "PHONE"
        case profile = "PROFILE"
        public var description: String { return self.rawValue }
    }

    public enum RequiredSignUpAttributesElement: String, CustomStringConvertible, Codable {
        case address = "ADDRESS"
        case birthdate = "BIRTHDATE"
        case email = "EMAIL"
        case familyName = "FAMILY_NAME"
        case gender = "GENDER"
        case givenName = "GIVEN_NAME"
        case locale = "LOCALE"
        case middleName = "MIDDLE_NAME"
        case name = "NAME"
        case nickname = "NICKNAME"
        case phoneNumber = "PHONE_NUMBER"
        case picture = "PICTURE"
        case preferredUsername = "PREFERRED_USERNAME"
        case profile = "PROFILE"
        case updatedAt = "UPDATED_AT"
        case website = "WEBSITE"
        case zoneInfo = "ZONE_INFO"
        public var description: String { return self.rawValue }
    }

    public enum ResolutionStrategy: String, CustomStringConvertible, Codable {
        case automerge = "AUTOMERGE"
        case lambda = "LAMBDA"
        case none = "NONE"
        case optimisticConcurrency = "OPTIMISTIC_CONCURRENCY"
        public var description: String { return self.rawValue }
    }

    public enum Service: String, CustomStringConvertible, Codable {
        case cognito = "COGNITO"
        public var description: String { return self.rawValue }
    }

    public enum SignInMethod: String, CustomStringConvertible, Codable {
        case email = "EMAIL"
        case emailAndPhoneNumber = "EMAIL_AND_PHONE_NUMBER"
        case phoneNumber = "PHONE_NUMBER"
        case username = "USERNAME"
        public var description: String { return self.rawValue }
    }

    public enum Status: String, CustomStringConvertible, Codable {
        case latest = "LATEST"
        case stale = "STALE"
        public var description: String { return self.rawValue }
    }

    // MARK: Shapes

    public struct BackendAPIAppSyncAuthSettings: AWSEncodableShape & AWSDecodableShape {
        /// The Amazon Cognito user pool ID, if Amazon Cognito was used as an authentication setting to access your data models.
        public let cognitoUserPoolId: String?
        /// The API key description for API_KEY, if it was used as an authentication mechanism to access your data models.
        public let description: String?
        /// The API key expiration time for API_KEY, if it was used as an authentication mechanism to access your data models.
        public let expirationTime: Double?
        /// The expiry time for the OpenID authentication mechanism.
        public let openIDAuthTTL: String?
        /// The clientID for openID, if openID was used as an authentication setting to access your data models.
        public let openIDClientId: String?
        /// The expiry time for the OpenID authentication mechanism.
        public let openIDIatTTL: String?
        /// The openID issuer URL, if openID was used as an authentication setting to access your data models.
        public let openIDIssueURL: String?
        /// The OpenID provider name, if OpenID was used as an authentication mechanism to access your data models.
        public let openIDProviderName: String?

        public init(cognitoUserPoolId: String? = nil, description: String? = nil, expirationTime: Double? = nil, openIDAuthTTL: String? = nil, openIDClientId: String? = nil, openIDIatTTL: String? = nil, openIDIssueURL: String? = nil, openIDProviderName: String? = nil) {
            self.cognitoUserPoolId = cognitoUserPoolId
            self.description = description
            self.expirationTime = expirationTime
            self.openIDAuthTTL = openIDAuthTTL
            self.openIDClientId = openIDClientId
            self.openIDIatTTL = openIDIatTTL
            self.openIDIssueURL = openIDIssueURL
            self.openIDProviderName = openIDProviderName
        }

        private enum CodingKeys: String, CodingKey {
            case cognitoUserPoolId
            case description
            case expirationTime
            case openIDAuthTTL
            case openIDClientId
            case openIDIatTTL
            case openIDIssueURL
            case openIDProviderName
        }
    }

    public struct BackendAPIAuthType: AWSEncodableShape & AWSDecodableShape {
        /// Describes the authentication mode.
        public let mode: Mode?
        /// Describes settings for the authentication mode.
        public let settings: BackendAPIAppSyncAuthSettings?

        public init(mode: Mode? = nil, settings: BackendAPIAppSyncAuthSettings? = nil) {
            self.mode = mode
            self.settings = settings
        }

        private enum CodingKeys: String, CodingKey {
            case mode
            case settings
        }
    }

    public struct BackendAPIConflictResolution: AWSEncodableShape & AWSDecodableShape {
        /// The strategy for conflict resolution.
        public let resolutionStrategy: ResolutionStrategy?

        public init(resolutionStrategy: ResolutionStrategy? = nil) {
            self.resolutionStrategy = resolutionStrategy
        }

        private enum CodingKeys: String, CodingKey {
            case resolutionStrategy
        }
    }

    public struct BackendAPIResourceConfig: AWSEncodableShape & AWSDecodableShape {
        /// Additional authentication methods used to interact with your data models.
        public let additionalAuthTypes: [BackendAPIAuthType]?
        /// The API name used to interact with the data model, configured as a part of your Amplify project.
        public let apiName: String?
        /// The conflict resolution strategy for your data stored in the data models.
        public let conflictResolution: BackendAPIConflictResolution?
        /// The default authentication type for interacting with the configured data models in your Amplify project.
        public let defaultAuthType: BackendAPIAuthType?
        /// The service used to provision and interact with the data model.
        public let service: String?
        /// The definition of the data model in the annotated transform of the GraphQL schema.
        public let transformSchema: String?

        public init(additionalAuthTypes: [BackendAPIAuthType]? = nil, apiName: String? = nil, conflictResolution: BackendAPIConflictResolution? = nil, defaultAuthType: BackendAPIAuthType? = nil, service: String? = nil, transformSchema: String? = nil) {
            self.additionalAuthTypes = additionalAuthTypes
            self.apiName = apiName
            self.conflictResolution = conflictResolution
            self.defaultAuthType = defaultAuthType
            self.service = service
            self.transformSchema = transformSchema
        }

        private enum CodingKeys: String, CodingKey {
            case additionalAuthTypes
            case apiName
            case conflictResolution
            case defaultAuthType
            case service
            case transformSchema
        }
    }

    public struct BackendAuthAppleProviderConfig: AWSEncodableShape & AWSDecodableShape {
        /// Describes the client_id (also called Services ID) that comes from Apple.
        public let clientId: String?
        /// Describes the key_id that comes from Apple.
        public let keyId: String?
        /// Describes the private_key that comes from Apple.
        public let privateKey: String?
        /// Describes the team_id that comes from Apple.
        public let teamId: String?

        public init(clientId: String? = nil, keyId: String? = nil, privateKey: String? = nil, teamId: String? = nil) {
            self.clientId = clientId
            self.keyId = keyId
            self.privateKey = privateKey
            self.teamId = teamId
        }

        private enum CodingKeys: String, CodingKey {
            case clientId = "client_id"
            case keyId = "key_id"
            case privateKey = "private_key"
            case teamId = "team_id"
        }
    }

    public struct BackendAuthSocialProviderConfig: AWSEncodableShape & AWSDecodableShape {
        /// Describes the client_id, which can be obtained from the third-party social federation provider.
        public let clientId: String?
        /// Describes the client_secret, which can be obtained from third-party social federation providers.
        public let clientSecret: String?

        public init(clientId: String? = nil, clientSecret: String? = nil) {
            self.clientId = clientId
            self.clientSecret = clientSecret
        }

        private enum CodingKeys: String, CodingKey {
            case clientId = "client_id"
            case clientSecret = "client_secret"
        }
    }

    public struct BackendJobRespObj: AWSDecodableShape {
        /// The app ID.
        public let appId: String
        /// The name of the backend environment.
        public let backendEnvironmentName: String
        /// The time when the job was created.
        public let createTime: String?
        /// If the request fails, this error is returned.
        public let error: String?
        /// The ID for the job.
        public let jobId: String?
        /// The name of the operation.
        public let operation: String?
        /// The current status of the request.
        public let status: String?
        /// The time when the job was last updated.
        public let updateTime: String?

        public init(appId: String, backendEnvironmentName: String, createTime: String? = nil, error: String? = nil, jobId: String? = nil, operation: String? = nil, status: String? = nil, updateTime: String? = nil) {
            self.appId = appId
            self.backendEnvironmentName = backendEnvironmentName
            self.createTime = createTime
            self.error = error
            self.jobId = jobId
            self.operation = operation
            self.status = status
            self.updateTime = updateTime
        }

        private enum CodingKeys: String, CodingKey {
            case appId
            case backendEnvironmentName
            case createTime
            case error
            case jobId
            case operation
            case status
            case updateTime
        }
    }

    public struct CloneBackendRequest: AWSEncodableShape {
        public static var _encoding = [
            AWSMemberEncoding(label: "appId", location: .uri(locationName: "appId")),
            AWSMemberEncoding(label: "backendEnvironmentName", location: .uri(locationName: "backendEnvironmentName"))
        ]

        public let appId: String
        public let backendEnvironmentName: String
        public let targetEnvironmentName: String

        public init(appId: String, backendEnvironmentName: String, targetEnvironmentName: String) {
            self.appId = appId
            self.backendEnvironmentName = backendEnvironmentName
            self.targetEnvironmentName = targetEnvironmentName
        }

        private enum CodingKeys: String, CodingKey {
            case targetEnvironmentName
        }
    }

    public struct CloneBackendResponse: AWSDecodableShape {
        public let appId: String?
        public let backendEnvironmentName: String?
        public let error: String?
        public let jobId: String?
        public let operation: String?
        public let status: String?

        public init(appId: String? = nil, backendEnvironmentName: String? = nil, error: String? = nil, jobId: String? = nil, operation: String? = nil, status: String? = nil) {
            self.appId = appId
            self.backendEnvironmentName = backendEnvironmentName
            self.error = error
            self.jobId = jobId
            self.operation = operation
            self.status = status
        }

        private enum CodingKeys: String, CodingKey {
            case appId
            case backendEnvironmentName
            case error
            case jobId
            case operation
            case status
        }
    }

    public struct CreateBackendAPIRequest: AWSEncodableShape {
        public static var _encoding = [
            AWSMemberEncoding(label: "appId", location: .uri(locationName: "appId"))
        ]

        public let appId: String
        public let backendEnvironmentName: String
        public let resourceConfig: BackendAPIResourceConfig
        public let resourceName: String

        public init(appId: String, backendEnvironmentName: String, resourceConfig: BackendAPIResourceConfig, resourceName: String) {
            self.appId = appId
            self.backendEnvironmentName = backendEnvironmentName
            self.resourceConfig = resourceConfig
            self.resourceName = resourceName
        }

        private enum CodingKeys: String, CodingKey {
            case backendEnvironmentName
            case resourceConfig
            case resourceName
        }
    }

    public struct CreateBackendAPIResponse: AWSDecodableShape {
        public let appId: String?
        public let backendEnvironmentName: String?
        public let error: String?
        public let jobId: String?
        public let operation: String?
        public let status: String?

        public init(appId: String? = nil, backendEnvironmentName: String? = nil, error: String? = nil, jobId: String? = nil, operation: String? = nil, status: String? = nil) {
            self.appId = appId
            self.backendEnvironmentName = backendEnvironmentName
            self.error = error
            self.jobId = jobId
            self.operation = operation
            self.status = status
        }

        private enum CodingKeys: String, CodingKey {
            case appId
            case backendEnvironmentName
            case error
            case jobId
            case operation
            case status
        }
    }

    public struct CreateBackendAuthForgotPasswordConfig: AWSEncodableShape & AWSDecodableShape {
        /// Describes which mode to use (either SMS or email) to deliver messages to app users who want to recover their password.
        public let deliveryMethod: DeliveryMethod
        /// The configuration for the email sent when an app user forgets their password.
        public let emailSettings: EmailSettings?
        /// The configuration for the SMS message sent when an app user forgets their password.
        public let smsSettings: SmsSettings?

        public init(deliveryMethod: DeliveryMethod, emailSettings: EmailSettings? = nil, smsSettings: SmsSettings? = nil) {
            self.deliveryMethod = deliveryMethod
            self.emailSettings = emailSettings
            self.smsSettings = smsSettings
        }

        private enum CodingKeys: String, CodingKey {
            case deliveryMethod
            case emailSettings
            case smsSettings
        }
    }

    public struct CreateBackendAuthIdentityPoolConfig: AWSEncodableShape & AWSDecodableShape {
        /// Name of the Amazon Cognito identity pool used for authorization.
        public let identityPoolName: String
        /// Set to true or false based on whether you want to enable guest authorization to your Amplify app.
        public let unauthenticatedLogin: Bool

        public init(identityPoolName: String, unauthenticatedLogin: Bool) {
            self.identityPoolName = identityPoolName
            self.unauthenticatedLogin = unauthenticatedLogin
        }

        private enum CodingKeys: String, CodingKey {
            case identityPoolName
            case unauthenticatedLogin
        }
    }

    public struct CreateBackendAuthMFAConfig: AWSEncodableShape & AWSDecodableShape {
        /// Describes whether MFA should be [ON, OFF, or OPTIONAL] for authentication in your Amplify project.
        public let mFAMode: MFAMode
        /// Describes the configuration settings and methods for your Amplify app users to use MFA.
        public let settings: Settings?

        public init(mFAMode: MFAMode, settings: Settings? = nil) {
            self.mFAMode = mFAMode
            self.settings = settings
        }

        private enum CodingKeys: String, CodingKey {
            case mFAMode = "MFAMode"
            case settings
        }
    }

    public struct CreateBackendAuthOAuthConfig: AWSEncodableShape & AWSDecodableShape {
        /// The domain prefix for your Amplify app.
        public let domainPrefix: String?
        /// The OAuth grant type that you use to allow app users to authenticate from your Amplify app.
        public let oAuthGrantType: OAuthGrantType
        /// List of OAuth-related flows used to allow your app users to authenticate from your Amplify app.
        public let oAuthScopes: [OAuthScopesElement]
        /// The redirected URI for signing in to your Amplify app.
        public let redirectSignInURIs: [String]
        /// Redirect URLs that OAuth uses when a user signs out of an Amplify app.
        public let redirectSignOutURIs: [String]
        /// The settings for using social providers to access your Amplify app.
        public let socialProviderSettings: SocialProviderSettings?

        public init(domainPrefix: String? = nil, oAuthGrantType: OAuthGrantType, oAuthScopes: [OAuthScopesElement], redirectSignInURIs: [String], redirectSignOutURIs: [String], socialProviderSettings: SocialProviderSettings? = nil) {
            self.domainPrefix = domainPrefix
            self.oAuthGrantType = oAuthGrantType
            self.oAuthScopes = oAuthScopes
            self.redirectSignInURIs = redirectSignInURIs
            self.redirectSignOutURIs = redirectSignOutURIs
            self.socialProviderSettings = socialProviderSettings
        }

        private enum CodingKeys: String, CodingKey {
            case domainPrefix
            case oAuthGrantType
            case oAuthScopes
            case redirectSignInURIs
            case redirectSignOutURIs
            case socialProviderSettings
        }
    }

    public struct CreateBackendAuthPasswordPolicyConfig: AWSEncodableShape & AWSDecodableShape {
        /// Additional constraints for the password used to access the backend of your Amplify project.
        public let additionalConstraints: [AdditionalConstraintsElement]?
        /// The minimum length of the password used to access the backend of your Amplify project.
        public let minimumLength: Double

        public init(additionalConstraints: [AdditionalConstraintsElement]? = nil, minimumLength: Double) {
            self.additionalConstraints = additionalConstraints
            self.minimumLength = minimumLength
        }

        private enum CodingKeys: String, CodingKey {
            case additionalConstraints
            case minimumLength
        }
    }

    public struct CreateBackendAuthRequest: AWSEncodableShape {
        public static var _encoding = [
            AWSMemberEncoding(label: "appId", location: .uri(locationName: "appId"))
        ]

        public let appId: String
        public let backendEnvironmentName: String
        public let resourceConfig: CreateBackendAuthResourceConfig
        public let resourceName: String

        public init(appId: String, backendEnvironmentName: String, resourceConfig: CreateBackendAuthResourceConfig, resourceName: String) {
            self.appId = appId
            self.backendEnvironmentName = backendEnvironmentName
            self.resourceConfig = resourceConfig
            self.resourceName = resourceName
        }

        private enum CodingKeys: String, CodingKey {
            case backendEnvironmentName
            case resourceConfig
            case resourceName
        }
    }

    public struct CreateBackendAuthResourceConfig: AWSEncodableShape & AWSDecodableShape {
        /// Defines whether you want to configure only authentication or both authentication and authorization settings.
        public let authResources: AuthResources
        /// Describes the authorization configuration for the Amazon Cognito identity pool, provisioned as a part of your auth resource in the Amplify project.
        public let identityPoolConfigs: CreateBackendAuthIdentityPoolConfig?
        /// Defines the service name to use when configuring an authentication resource in your Amplify project.
        public let service: Service
        /// Describes authentication configuration for the Amazon Cognito user pool, provisioned as a part of your auth resource in the Amplify project.
        public let userPoolConfigs: CreateBackendAuthUserPoolConfig

        public init(authResources: AuthResources, identityPoolConfigs: CreateBackendAuthIdentityPoolConfig? = nil, service: Service, userPoolConfigs: CreateBackendAuthUserPoolConfig) {
            self.authResources = authResources
            self.identityPoolConfigs = identityPoolConfigs
            self.service = service
            self.userPoolConfigs = userPoolConfigs
        }

        private enum CodingKeys: String, CodingKey {
            case authResources
            case identityPoolConfigs
            case service
            case userPoolConfigs
        }
    }

    public struct CreateBackendAuthResponse: AWSDecodableShape {
        public let appId: String?
        public let backendEnvironmentName: String?
        public let error: String?
        public let jobId: String?
        public let operation: String?
        public let status: String?

        public init(appId: String? = nil, backendEnvironmentName: String? = nil, error: String? = nil, jobId: String? = nil, operation: String? = nil, status: String? = nil) {
            self.appId = appId
            self.backendEnvironmentName = backendEnvironmentName
            self.error = error
            self.jobId = jobId
            self.operation = operation
            self.status = status
        }

        private enum CodingKeys: String, CodingKey {
            case appId
            case backendEnvironmentName
            case error
            case jobId
            case operation
            case status
        }
    }

    public struct CreateBackendAuthUserPoolConfig: AWSEncodableShape & AWSDecodableShape {
        /// Describes the forgotten password policy for your Amazon Cognito user pool, configured as a part of your Amplify project.
        public let forgotPassword: CreateBackendAuthForgotPasswordConfig?
        /// Describes whether to apply multi-factor authentication policies for your Amazon Cognito user pool configured as a part of your Amplify project.
        public let mfa: CreateBackendAuthMFAConfig?
        /// Describes the OAuth policy and rules for your Amazon Cognito user pool, configured as a part of your Amplify project.
        public let oAuth: CreateBackendAuthOAuthConfig?
        /// Describes the password policy for your Amazon Cognito user pool, configured as a part of your Amplify project.
        public let passwordPolicy: CreateBackendAuthPasswordPolicyConfig?
        /// The required attributes to sign up new users in the user pool.
        public let requiredSignUpAttributes: [RequiredSignUpAttributesElement]
        /// Describes the sign-in methods that your Amplify app users use to log in using the Amazon Cognito user pool, configured as a part of your Amplify project.
        public let signInMethod: SignInMethod
        /// The Amazon Cognito user pool name.
        public let userPoolName: String

        public init(forgotPassword: CreateBackendAuthForgotPasswordConfig? = nil, mfa: CreateBackendAuthMFAConfig? = nil, oAuth: CreateBackendAuthOAuthConfig? = nil, passwordPolicy: CreateBackendAuthPasswordPolicyConfig? = nil, requiredSignUpAttributes: [RequiredSignUpAttributesElement], signInMethod: SignInMethod, userPoolName: String) {
            self.forgotPassword = forgotPassword
            self.mfa = mfa
            self.oAuth = oAuth
            self.passwordPolicy = passwordPolicy
            self.requiredSignUpAttributes = requiredSignUpAttributes
            self.signInMethod = signInMethod
            self.userPoolName = userPoolName
        }

        private enum CodingKeys: String, CodingKey {
            case forgotPassword
            case mfa
            case oAuth
            case passwordPolicy
            case requiredSignUpAttributes
            case signInMethod
            case userPoolName
        }
    }

    public struct CreateBackendConfigRequest: AWSEncodableShape {
        public static var _encoding = [
            AWSMemberEncoding(label: "appId", location: .uri(locationName: "appId"))
        ]

        public let appId: String
        public let backendManagerAppId: String?

        public init(appId: String, backendManagerAppId: String? = nil) {
            self.appId = appId
            self.backendManagerAppId = backendManagerAppId
        }

        private enum CodingKeys: String, CodingKey {
            case backendManagerAppId
        }
    }

    public struct CreateBackendConfigResponse: AWSDecodableShape {
        public let appId: String?
        public let backendEnvironmentName: String?
        public let jobId: String?
        public let status: String?

        public init(appId: String? = nil, backendEnvironmentName: String? = nil, jobId: String? = nil, status: String? = nil) {
            self.appId = appId
            self.backendEnvironmentName = backendEnvironmentName
            self.jobId = jobId
            self.status = status
        }

        private enum CodingKeys: String, CodingKey {
            case appId
            case backendEnvironmentName
            case jobId
            case status
        }
    }

    public struct CreateBackendRequest: AWSEncodableShape {
        public let appId: String
        public let appName: String
        public let backendEnvironmentName: String
        public let resourceConfig: ResourceConfig?
        public let resourceName: String?

        public init(appId: String, appName: String, backendEnvironmentName: String, resourceConfig: ResourceConfig? = nil, resourceName: String? = nil) {
            self.appId = appId
            self.appName = appName
            self.backendEnvironmentName = backendEnvironmentName
            self.resourceConfig = resourceConfig
            self.resourceName = resourceName
        }

        private enum CodingKeys: String, CodingKey {
            case appId
            case appName
            case backendEnvironmentName
            case resourceConfig
            case resourceName
        }
    }

    public struct CreateBackendResponse: AWSDecodableShape {
        public let appId: String?
        public let backendEnvironmentName: String?
        public let error: String?
        public let jobId: String?
        public let operation: String?
        public let status: String?

        public init(appId: String? = nil, backendEnvironmentName: String? = nil, error: String? = nil, jobId: String? = nil, operation: String? = nil, status: String? = nil) {
            self.appId = appId
            self.backendEnvironmentName = backendEnvironmentName
            self.error = error
            self.jobId = jobId
            self.operation = operation
            self.status = status
        }

        private enum CodingKeys: String, CodingKey {
            case appId
            case backendEnvironmentName
            case error
            case jobId
            case operation
            case status
        }
    }

    public struct CreateTokenRequest: AWSEncodableShape {
        public static var _encoding = [
            AWSMemberEncoding(label: "appId", location: .uri(locationName: "appId"))
        ]

        public let appId: String

        public init(appId: String) {
            self.appId = appId
        }

        private enum CodingKeys: CodingKey {}
    }

    public struct CreateTokenResponse: AWSDecodableShape {
        public let appId: String?
        public let challengeCode: String?
        public let sessionId: String?
        public let ttl: String?

        public init(appId: String? = nil, challengeCode: String? = nil, sessionId: String? = nil, ttl: String? = nil) {
            self.appId = appId
            self.challengeCode = challengeCode
            self.sessionId = sessionId
            self.ttl = ttl
        }

        private enum CodingKeys: String, CodingKey {
            case appId
            case challengeCode
            case sessionId
            case ttl
        }
    }

    public struct DeleteBackendAPIRequest: AWSEncodableShape {
        public static var _encoding = [
            AWSMemberEncoding(label: "appId", location: .uri(locationName: "appId")),
            AWSMemberEncoding(label: "backendEnvironmentName", location: .uri(locationName: "backendEnvironmentName"))
        ]

        public let appId: String
        public let backendEnvironmentName: String
        public let resourceConfig: BackendAPIResourceConfig?
        public let resourceName: String

        public init(appId: String, backendEnvironmentName: String, resourceConfig: BackendAPIResourceConfig? = nil, resourceName: String) {
            self.appId = appId
            self.backendEnvironmentName = backendEnvironmentName
            self.resourceConfig = resourceConfig
            self.resourceName = resourceName
        }

        private enum CodingKeys: String, CodingKey {
            case resourceConfig
            case resourceName
        }
    }

    public struct DeleteBackendAPIResponse: AWSDecodableShape {
        public let appId: String?
        public let backendEnvironmentName: String?
        public let error: String?
        public let jobId: String?
        public let operation: String?
        public let status: String?

        public init(appId: String? = nil, backendEnvironmentName: String? = nil, error: String? = nil, jobId: String? = nil, operation: String? = nil, status: String? = nil) {
            self.appId = appId
            self.backendEnvironmentName = backendEnvironmentName
            self.error = error
            self.jobId = jobId
            self.operation = operation
            self.status = status
        }

        private enum CodingKeys: String, CodingKey {
            case appId
            case backendEnvironmentName
            case error
            case jobId
            case operation
            case status
        }
    }

    public struct DeleteBackendAuthRequest: AWSEncodableShape {
        public static var _encoding = [
            AWSMemberEncoding(label: "appId", location: .uri(locationName: "appId")),
            AWSMemberEncoding(label: "backendEnvironmentName", location: .uri(locationName: "backendEnvironmentName"))
        ]

        public let appId: String
        public let backendEnvironmentName: String
        public let resourceName: String

        public init(appId: String, backendEnvironmentName: String, resourceName: String) {
            self.appId = appId
            self.backendEnvironmentName = backendEnvironmentName
            self.resourceName = resourceName
        }

        private enum CodingKeys: String, CodingKey {
            case resourceName
        }
    }

    public struct DeleteBackendAuthResponse: AWSDecodableShape {
        public let appId: String?
        public let backendEnvironmentName: String?
        public let error: String?
        public let jobId: String?
        public let operation: String?
        public let status: String?

        public init(appId: String? = nil, backendEnvironmentName: String? = nil, error: String? = nil, jobId: String? = nil, operation: String? = nil, status: String? = nil) {
            self.appId = appId
            self.backendEnvironmentName = backendEnvironmentName
            self.error = error
            self.jobId = jobId
            self.operation = operation
            self.status = status
        }

        private enum CodingKeys: String, CodingKey {
            case appId
            case backendEnvironmentName
            case error
            case jobId
            case operation
            case status
        }
    }

    public struct DeleteBackendRequest: AWSEncodableShape {
        public static var _encoding = [
            AWSMemberEncoding(label: "appId", location: .uri(locationName: "appId")),
            AWSMemberEncoding(label: "backendEnvironmentName", location: .uri(locationName: "backendEnvironmentName"))
        ]

        public let appId: String
        public let backendEnvironmentName: String

        public init(appId: String, backendEnvironmentName: String) {
            self.appId = appId
            self.backendEnvironmentName = backendEnvironmentName
        }

        private enum CodingKeys: CodingKey {}
    }

    public struct DeleteBackendResponse: AWSDecodableShape {
        public let appId: String?
        public let backendEnvironmentName: String?
        public let error: String?
        public let jobId: String?
        public let operation: String?
        public let status: String?

        public init(appId: String? = nil, backendEnvironmentName: String? = nil, error: String? = nil, jobId: String? = nil, operation: String? = nil, status: String? = nil) {
            self.appId = appId
            self.backendEnvironmentName = backendEnvironmentName
            self.error = error
            self.jobId = jobId
            self.operation = operation
            self.status = status
        }

        private enum CodingKeys: String, CodingKey {
            case appId
            case backendEnvironmentName
            case error
            case jobId
            case operation
            case status
        }
    }

    public struct DeleteTokenRequest: AWSEncodableShape {
        public static var _encoding = [
            AWSMemberEncoding(label: "appId", location: .uri(locationName: "appId")),
            AWSMemberEncoding(label: "sessionId", location: .uri(locationName: "sessionId"))
        ]

        public let appId: String
        public let sessionId: String

        public init(appId: String, sessionId: String) {
            self.appId = appId
            self.sessionId = sessionId
        }

        private enum CodingKeys: CodingKey {}
    }

    public struct DeleteTokenResponse: AWSDecodableShape {
        public let isSuccess: Bool?

        public init(isSuccess: Bool? = nil) {
            self.isSuccess = isSuccess
        }

        private enum CodingKeys: String, CodingKey {
            case isSuccess
        }
    }

    public struct EmailSettings: AWSEncodableShape & AWSDecodableShape {
        /// The body of the email.
        public let emailMessage: String?
        /// The subject of the email.
        public let emailSubject: String?

        public init(emailMessage: String? = nil, emailSubject: String? = nil) {
            self.emailMessage = emailMessage
            self.emailSubject = emailSubject
        }

        private enum CodingKeys: String, CodingKey {
            case emailMessage
            case emailSubject
        }
    }

    public struct GenerateBackendAPIModelsRequest: AWSEncodableShape {
        public static var _encoding = [
            AWSMemberEncoding(label: "appId", location: .uri(locationName: "appId")),
            AWSMemberEncoding(label: "backendEnvironmentName", location: .uri(locationName: "backendEnvironmentName"))
        ]

        public let appId: String
        public let backendEnvironmentName: String
        public let resourceName: String

        public init(appId: String, backendEnvironmentName: String, resourceName: String) {
            self.appId = appId
            self.backendEnvironmentName = backendEnvironmentName
            self.resourceName = resourceName
        }

        private enum CodingKeys: String, CodingKey {
            case resourceName
        }
    }

    public struct GenerateBackendAPIModelsResponse: AWSDecodableShape {
        public let appId: String?
        public let backendEnvironmentName: String?
        public let error: String?
        public let jobId: String?
        public let operation: String?
        public let status: String?

        public init(appId: String? = nil, backendEnvironmentName: String? = nil, error: String? = nil, jobId: String? = nil, operation: String? = nil, status: String? = nil) {
            self.appId = appId
            self.backendEnvironmentName = backendEnvironmentName
            self.error = error
            self.jobId = jobId
            self.operation = operation
            self.status = status
        }

        private enum CodingKeys: String, CodingKey {
            case appId
            case backendEnvironmentName
            case error
            case jobId
            case operation
            case status
        }
    }

    public struct GetBackendAPIModelsRequest: AWSEncodableShape {
        public static var _encoding = [
            AWSMemberEncoding(label: "appId", location: .uri(locationName: "appId")),
            AWSMemberEncoding(label: "backendEnvironmentName", location: .uri(locationName: "backendEnvironmentName"))
        ]

        public let appId: String
        public let backendEnvironmentName: String
        public let resourceName: String

        public init(appId: String, backendEnvironmentName: String, resourceName: String) {
            self.appId = appId
            self.backendEnvironmentName = backendEnvironmentName
            self.resourceName = resourceName
        }

        private enum CodingKeys: String, CodingKey {
            case resourceName
        }
    }

    public struct GetBackendAPIModelsResponse: AWSDecodableShape {
        public let models: String?
        public let status: Status?

        public init(models: String? = nil, status: Status? = nil) {
            self.models = models
            self.status = status
        }

        private enum CodingKeys: String, CodingKey {
            case models
            case status
        }
    }

    public struct GetBackendAPIRequest: AWSEncodableShape {
        public static var _encoding = [
            AWSMemberEncoding(label: "appId", location: .uri(locationName: "appId")),
            AWSMemberEncoding(label: "backendEnvironmentName", location: .uri(locationName: "backendEnvironmentName"))
        ]

        public let appId: String
        public let backendEnvironmentName: String
        public let resourceConfig: BackendAPIResourceConfig?
        public let resourceName: String

        public init(appId: String, backendEnvironmentName: String, resourceConfig: BackendAPIResourceConfig? = nil, resourceName: String) {
            self.appId = appId
            self.backendEnvironmentName = backendEnvironmentName
            self.resourceConfig = resourceConfig
            self.resourceName = resourceName
        }

        private enum CodingKeys: String, CodingKey {
            case resourceConfig
            case resourceName
        }
    }

    public struct GetBackendAPIResponse: AWSDecodableShape {
        public let appId: String?
        public let backendEnvironmentName: String?
        public let error: String?
        public let resourceConfig: BackendAPIResourceConfig?
        public let resourceName: String?

        public init(appId: String? = nil, backendEnvironmentName: String? = nil, error: String? = nil, resourceConfig: BackendAPIResourceConfig? = nil, resourceName: String? = nil) {
            self.appId = appId
            self.backendEnvironmentName = backendEnvironmentName
            self.error = error
            self.resourceConfig = resourceConfig
            self.resourceName = resourceName
        }

        private enum CodingKeys: String, CodingKey {
            case appId
            case backendEnvironmentName
            case error
            case resourceConfig
            case resourceName
        }
    }

    public struct GetBackendAuthRequest: AWSEncodableShape {
        public static var _encoding = [
            AWSMemberEncoding(label: "appId", location: .uri(locationName: "appId")),
            AWSMemberEncoding(label: "backendEnvironmentName", location: .uri(locationName: "backendEnvironmentName"))
        ]

        public let appId: String
        public let backendEnvironmentName: String
        public let resourceName: String

        public init(appId: String, backendEnvironmentName: String, resourceName: String) {
            self.appId = appId
            self.backendEnvironmentName = backendEnvironmentName
            self.resourceName = resourceName
        }

        private enum CodingKeys: String, CodingKey {
            case resourceName
        }
    }

    public struct GetBackendAuthResponse: AWSDecodableShape {
        public let appId: String?
        public let backendEnvironmentName: String?
        public let error: String?
        public let resourceConfig: CreateBackendAuthResourceConfig?
        public let resourceName: String?

        public init(appId: String? = nil, backendEnvironmentName: String? = nil, error: String? = nil, resourceConfig: CreateBackendAuthResourceConfig? = nil, resourceName: String? = nil) {
            self.appId = appId
            self.backendEnvironmentName = backendEnvironmentName
            self.error = error
            self.resourceConfig = resourceConfig
            self.resourceName = resourceName
        }

        private enum CodingKeys: String, CodingKey {
            case appId
            case backendEnvironmentName
            case error
            case resourceConfig
            case resourceName
        }
    }

    public struct GetBackendJobRequest: AWSEncodableShape {
        public static var _encoding = [
            AWSMemberEncoding(label: "appId", location: .uri(locationName: "appId")),
            AWSMemberEncoding(label: "backendEnvironmentName", location: .uri(locationName: "backendEnvironmentName")),
            AWSMemberEncoding(label: "jobId", location: .uri(locationName: "jobId"))
        ]

        public let appId: String
        public let backendEnvironmentName: String
        public let jobId: String

        public init(appId: String, backendEnvironmentName: String, jobId: String) {
            self.appId = appId
            self.backendEnvironmentName = backendEnvironmentName
            self.jobId = jobId
        }

        private enum CodingKeys: CodingKey {}
    }

    public struct GetBackendJobResponse: AWSDecodableShape {
        public let appId: String?
        public let backendEnvironmentName: String?
        public let createTime: String?
        public let error: String?
        public let jobId: String?
        public let operation: String?
        public let status: String?
        public let updateTime: String?

        public init(appId: String? = nil, backendEnvironmentName: String? = nil, createTime: String? = nil, error: String? = nil, jobId: String? = nil, operation: String? = nil, status: String? = nil, updateTime: String? = nil) {
            self.appId = appId
            self.backendEnvironmentName = backendEnvironmentName
            self.createTime = createTime
            self.error = error
            self.jobId = jobId
            self.operation = operation
            self.status = status
            self.updateTime = updateTime
        }

        private enum CodingKeys: String, CodingKey {
            case appId
            case backendEnvironmentName
            case createTime
            case error
            case jobId
            case operation
            case status
            case updateTime
        }
    }

    public struct GetBackendRequest: AWSEncodableShape {
        public static var _encoding = [
            AWSMemberEncoding(label: "appId", location: .uri(locationName: "appId"))
        ]

        public let appId: String
        public let backendEnvironmentName: String?

        public init(appId: String, backendEnvironmentName: String? = nil) {
            self.appId = appId
            self.backendEnvironmentName = backendEnvironmentName
        }

        private enum CodingKeys: String, CodingKey {
            case backendEnvironmentName
        }
    }

    public struct GetBackendResponse: AWSDecodableShape {
        public let amplifyMetaConfig: String?
        public let appId: String?
        public let appName: String?
        public let backendEnvironmentList: [String]?
        public let backendEnvironmentName: String?
        public let error: String?

        public init(amplifyMetaConfig: String? = nil, appId: String? = nil, appName: String? = nil, backendEnvironmentList: [String]? = nil, backendEnvironmentName: String? = nil, error: String? = nil) {
            self.amplifyMetaConfig = amplifyMetaConfig
            self.appId = appId
            self.appName = appName
            self.backendEnvironmentList = backendEnvironmentList
            self.backendEnvironmentName = backendEnvironmentName
            self.error = error
        }

        private enum CodingKeys: String, CodingKey {
            case amplifyMetaConfig
            case appId
            case appName
            case backendEnvironmentList
            case backendEnvironmentName
            case error
        }
    }

    public struct GetTokenRequest: AWSEncodableShape {
        public static var _encoding = [
            AWSMemberEncoding(label: "appId", location: .uri(locationName: "appId")),
            AWSMemberEncoding(label: "sessionId", location: .uri(locationName: "sessionId"))
        ]

        public let appId: String
        public let sessionId: String

        public init(appId: String, sessionId: String) {
            self.appId = appId
            self.sessionId = sessionId
        }

        private enum CodingKeys: CodingKey {}
    }

    public struct GetTokenResponse: AWSDecodableShape {
        public let appId: String?
        public let challengeCode: String?
        public let sessionId: String?
        public let ttl: String?

        public init(appId: String? = nil, challengeCode: String? = nil, sessionId: String? = nil, ttl: String? = nil) {
            self.appId = appId
            self.challengeCode = challengeCode
            self.sessionId = sessionId
            self.ttl = ttl
        }

        private enum CodingKeys: String, CodingKey {
            case appId
            case challengeCode
            case sessionId
            case ttl
        }
    }

    public struct ImportBackendAuthRequest: AWSEncodableShape {
        public static var _encoding = [
            AWSMemberEncoding(label: "appId", location: .uri(locationName: "appId")),
            AWSMemberEncoding(label: "backendEnvironmentName", location: .uri(locationName: "backendEnvironmentName"))
        ]

        public let appId: String
        public let backendEnvironmentName: String
        public let identityPoolId: String?
        public let nativeClientId: String
        public let userPoolId: String
        public let webClientId: String

        public init(appId: String, backendEnvironmentName: String, identityPoolId: String? = nil, nativeClientId: String, userPoolId: String, webClientId: String) {
            self.appId = appId
            self.backendEnvironmentName = backendEnvironmentName
            self.identityPoolId = identityPoolId
            self.nativeClientId = nativeClientId
            self.userPoolId = userPoolId
            self.webClientId = webClientId
        }

        private enum CodingKeys: String, CodingKey {
            case identityPoolId
            case nativeClientId
            case userPoolId
            case webClientId
        }
    }

    public struct ImportBackendAuthResponse: AWSDecodableShape {
        public let appId: String?
        public let backendEnvironmentName: String?
        public let error: String?
        public let jobId: String?
        public let operation: String?
        public let status: String?

        public init(appId: String? = nil, backendEnvironmentName: String? = nil, error: String? = nil, jobId: String? = nil, operation: String? = nil, status: String? = nil) {
            self.appId = appId
            self.backendEnvironmentName = backendEnvironmentName
            self.error = error
            self.jobId = jobId
            self.operation = operation
            self.status = status
        }

        private enum CodingKeys: String, CodingKey {
            case appId
            case backendEnvironmentName
            case error
            case jobId
            case operation
            case status
        }
    }

    public struct ListBackendJobsRequest: AWSEncodableShape {
        public static var _encoding = [
            AWSMemberEncoding(label: "appId", location: .uri(locationName: "appId")),
            AWSMemberEncoding(label: "backendEnvironmentName", location: .uri(locationName: "backendEnvironmentName"))
        ]

        public let appId: String
        public let backendEnvironmentName: String
        public let jobId: String?
        public let maxResults: Int?
        public let nextToken: String?
        public let operation: String?
        public let status: String?

        public init(appId: String, backendEnvironmentName: String, jobId: String? = nil, maxResults: Int? = nil, nextToken: String? = nil, operation: String? = nil, status: String? = nil) {
            self.appId = appId
            self.backendEnvironmentName = backendEnvironmentName
            self.jobId = jobId
            self.maxResults = maxResults
            self.nextToken = nextToken
            self.operation = operation
            self.status = status
        }

        public func validate(name: String) throws {
            try self.validate(self.maxResults, name: "maxResults", parent: name, max: 25)
            try self.validate(self.maxResults, name: "maxResults", parent: name, min: 1)
        }

        private enum CodingKeys: String, CodingKey {
            case jobId
            case maxResults
            case nextToken
            case operation
            case status
        }
    }

    public struct ListBackendJobsResponse: AWSDecodableShape {
        public let jobs: [BackendJobRespObj]?
        public let nextToken: String?

        public init(jobs: [BackendJobRespObj]? = nil, nextToken: String? = nil) {
            self.jobs = jobs
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case jobs
            case nextToken
        }
    }

    public struct LoginAuthConfigReqObj: AWSEncodableShape & AWSDecodableShape {
        /// The Amazon Cognito identity pool ID used for the Amplify Admin UI login authorization.
        public let awsCognitoIdentityPoolId: String?
        /// The AWS Region for the Amplify Admin UI login.
        public let awsCognitoRegion: String?
        /// The Amazon Cognito user pool ID used for Amplify Admin UI login authentication.
        public let awsUserPoolsId: String?
        /// The web client ID for the Amazon Cognito user pools.
        public let awsUserPoolsWebClientId: String?

        public init(awsCognitoIdentityPoolId: String? = nil, awsCognitoRegion: String? = nil, awsUserPoolsId: String? = nil, awsUserPoolsWebClientId: String? = nil) {
            self.awsCognitoIdentityPoolId = awsCognitoIdentityPoolId
            self.awsCognitoRegion = awsCognitoRegion
            self.awsUserPoolsId = awsUserPoolsId
            self.awsUserPoolsWebClientId = awsUserPoolsWebClientId
        }

        private enum CodingKeys: String, CodingKey {
            case awsCognitoIdentityPoolId = "aws_cognito_identity_pool_id"
            case awsCognitoRegion = "aws_cognito_region"
            case awsUserPoolsId = "aws_user_pools_id"
            case awsUserPoolsWebClientId = "aws_user_pools_web_client_id"
        }
    }

    public struct RemoveAllBackendsRequest: AWSEncodableShape {
        public static var _encoding = [
            AWSMemberEncoding(label: "appId", location: .uri(locationName: "appId"))
        ]

        public let appId: String
        public let cleanAmplifyApp: Bool?

        public init(appId: String, cleanAmplifyApp: Bool? = nil) {
            self.appId = appId
            self.cleanAmplifyApp = cleanAmplifyApp
        }

        private enum CodingKeys: String, CodingKey {
            case cleanAmplifyApp
        }
    }

    public struct RemoveAllBackendsResponse: AWSDecodableShape {
        public let appId: String?
        public let error: String?
        public let jobId: String?
        public let operation: String?
        public let status: String?

        public init(appId: String? = nil, error: String? = nil, jobId: String? = nil, operation: String? = nil, status: String? = nil) {
            self.appId = appId
            self.error = error
            self.jobId = jobId
            self.operation = operation
            self.status = status
        }

        private enum CodingKeys: String, CodingKey {
            case appId
            case error
            case jobId
            case operation
            case status
        }
    }

    public struct RemoveBackendConfigRequest: AWSEncodableShape {
        public static var _encoding = [
            AWSMemberEncoding(label: "appId", location: .uri(locationName: "appId"))
        ]

        public let appId: String

        public init(appId: String) {
            self.appId = appId
        }

        private enum CodingKeys: CodingKey {}
    }

    public struct RemoveBackendConfigResponse: AWSDecodableShape {
        public let error: String?

        public init(error: String? = nil) {
            self.error = error
        }

        private enum CodingKeys: String, CodingKey {
            case error
        }
    }

    public struct ResourceConfig: AWSEncodableShape {
        public init() {}
    }

    public struct Settings: AWSEncodableShape & AWSDecodableShape {
        public let mfaTypes: [MfaTypesElement]?
        /// The body of the SMS message.
        public let smsMessage: String?

        public init(mfaTypes: [MfaTypesElement]? = nil, smsMessage: String? = nil) {
            self.mfaTypes = mfaTypes
            self.smsMessage = smsMessage
        }

        private enum CodingKeys: String, CodingKey {
            case mfaTypes
            case smsMessage
        }
    }

    public struct SmsSettings: AWSEncodableShape & AWSDecodableShape {
        /// The body of the SMS message.
        public let smsMessage: String?

        public init(smsMessage: String? = nil) {
            self.smsMessage = smsMessage
        }

        private enum CodingKeys: String, CodingKey {
            case smsMessage
        }
    }

    public struct SocialProviderSettings: AWSEncodableShape & AWSDecodableShape {
        public let facebook: BackendAuthSocialProviderConfig?
        public let google: BackendAuthSocialProviderConfig?
        public let loginWithAmazon: BackendAuthSocialProviderConfig?
        public let signInWithApple: BackendAuthAppleProviderConfig?

        public init(facebook: BackendAuthSocialProviderConfig? = nil, google: BackendAuthSocialProviderConfig? = nil, loginWithAmazon: BackendAuthSocialProviderConfig? = nil, signInWithApple: BackendAuthAppleProviderConfig? = nil) {
            self.facebook = facebook
            self.google = google
            self.loginWithAmazon = loginWithAmazon
            self.signInWithApple = signInWithApple
        }

        private enum CodingKeys: String, CodingKey {
            case facebook = "Facebook"
            case google = "Google"
            case loginWithAmazon = "LoginWithAmazon"
            case signInWithApple = "SignInWithApple"
        }
    }

    public struct UpdateBackendAPIRequest: AWSEncodableShape {
        public static var _encoding = [
            AWSMemberEncoding(label: "appId", location: .uri(locationName: "appId")),
            AWSMemberEncoding(label: "backendEnvironmentName", location: .uri(locationName: "backendEnvironmentName"))
        ]

        public let appId: String
        public let backendEnvironmentName: String
        public let resourceConfig: BackendAPIResourceConfig?
        public let resourceName: String

        public init(appId: String, backendEnvironmentName: String, resourceConfig: BackendAPIResourceConfig? = nil, resourceName: String) {
            self.appId = appId
            self.backendEnvironmentName = backendEnvironmentName
            self.resourceConfig = resourceConfig
            self.resourceName = resourceName
        }

        private enum CodingKeys: String, CodingKey {
            case resourceConfig
            case resourceName
        }
    }

    public struct UpdateBackendAPIResponse: AWSDecodableShape {
        public let appId: String?
        public let backendEnvironmentName: String?
        public let error: String?
        public let jobId: String?
        public let operation: String?
        public let status: String?

        public init(appId: String? = nil, backendEnvironmentName: String? = nil, error: String? = nil, jobId: String? = nil, operation: String? = nil, status: String? = nil) {
            self.appId = appId
            self.backendEnvironmentName = backendEnvironmentName
            self.error = error
            self.jobId = jobId
            self.operation = operation
            self.status = status
        }

        private enum CodingKeys: String, CodingKey {
            case appId
            case backendEnvironmentName
            case error
            case jobId
            case operation
            case status
        }
    }

    public struct UpdateBackendAuthForgotPasswordConfig: AWSEncodableShape {
        /// Describes which mode to use (either SMS or email) to deliver messages to app users that want to recover their password.
        public let deliveryMethod: DeliveryMethod?
        /// The configuration for the email sent when an app user forgets their password.
        public let emailSettings: EmailSettings?
        /// The configuration for the SMS message sent when an Amplify app user forgets their password.
        public let smsSettings: SmsSettings?

        public init(deliveryMethod: DeliveryMethod? = nil, emailSettings: EmailSettings? = nil, smsSettings: SmsSettings? = nil) {
            self.deliveryMethod = deliveryMethod
            self.emailSettings = emailSettings
            self.smsSettings = smsSettings
        }

        private enum CodingKeys: String, CodingKey {
            case deliveryMethod
            case emailSettings
            case smsSettings
        }
    }

    public struct UpdateBackendAuthIdentityPoolConfig: AWSEncodableShape {
        /// A boolean value that can be set to allow or disallow guest-level authorization into your Amplify app.
        public let unauthenticatedLogin: Bool?

        public init(unauthenticatedLogin: Bool? = nil) {
            self.unauthenticatedLogin = unauthenticatedLogin
        }

        private enum CodingKeys: String, CodingKey {
            case unauthenticatedLogin
        }
    }

    public struct UpdateBackendAuthMFAConfig: AWSEncodableShape {
        /// The MFA mode for the backend of your Amplify project.
        public let mFAMode: MFAMode?
        /// The settings of your MFA configuration for the backend of your Amplify project.
        public let settings: Settings?

        public init(mFAMode: MFAMode? = nil, settings: Settings? = nil) {
            self.mFAMode = mFAMode
            self.settings = settings
        }

        private enum CodingKeys: String, CodingKey {
            case mFAMode = "MFAMode"
            case settings
        }
    }

    public struct UpdateBackendAuthOAuthConfig: AWSEncodableShape {
        /// The Amazon Cognito domain prefix used to create a hosted UI for authentication.
        public let domainPrefix: String?
        /// The OAuth grant type to allow app users to authenticate from your Amplify app.
        public let oAuthGrantType: OAuthGrantType?
        /// The list of OAuth-related flows that can allow users to authenticate from your Amplify app.
        public let oAuthScopes: [OAuthScopesElement]?
        /// Redirect URLs that OAuth uses when a user signs in to an Amplify app.
        public let redirectSignInURIs: [String]?
        /// Redirect URLs that OAuth uses when a user signs out of an Amplify app.
        public let redirectSignOutURIs: [String]?
        /// Describes third-party social federation configurations for allowing your users to sign in with OAuth.
        public let socialProviderSettings: SocialProviderSettings?

        public init(domainPrefix: String? = nil, oAuthGrantType: OAuthGrantType? = nil, oAuthScopes: [OAuthScopesElement]? = nil, redirectSignInURIs: [String]? = nil, redirectSignOutURIs: [String]? = nil, socialProviderSettings: SocialProviderSettings? = nil) {
            self.domainPrefix = domainPrefix
            self.oAuthGrantType = oAuthGrantType
            self.oAuthScopes = oAuthScopes
            self.redirectSignInURIs = redirectSignInURIs
            self.redirectSignOutURIs = redirectSignOutURIs
            self.socialProviderSettings = socialProviderSettings
        }

        private enum CodingKeys: String, CodingKey {
            case domainPrefix
            case oAuthGrantType
            case oAuthScopes
            case redirectSignInURIs
            case redirectSignOutURIs
            case socialProviderSettings
        }
    }

    public struct UpdateBackendAuthPasswordPolicyConfig: AWSEncodableShape {
        /// Describes additional constraints on password requirements to sign in to the auth resource, configured as a part of your Amplify project.
        public let additionalConstraints: [AdditionalConstraintsElement]?
        /// Describes the minimum length of the password required to sign in to the auth resource, configured as a part of your Amplify project.
        public let minimumLength: Double?

        public init(additionalConstraints: [AdditionalConstraintsElement]? = nil, minimumLength: Double? = nil) {
            self.additionalConstraints = additionalConstraints
            self.minimumLength = minimumLength
        }

        private enum CodingKeys: String, CodingKey {
            case additionalConstraints
            case minimumLength
        }
    }

    public struct UpdateBackendAuthRequest: AWSEncodableShape {
        public static var _encoding = [
            AWSMemberEncoding(label: "appId", location: .uri(locationName: "appId")),
            AWSMemberEncoding(label: "backendEnvironmentName", location: .uri(locationName: "backendEnvironmentName"))
        ]

        public let appId: String
        public let backendEnvironmentName: String
        public let resourceConfig: UpdateBackendAuthResourceConfig
        public let resourceName: String

        public init(appId: String, backendEnvironmentName: String, resourceConfig: UpdateBackendAuthResourceConfig, resourceName: String) {
            self.appId = appId
            self.backendEnvironmentName = backendEnvironmentName
            self.resourceConfig = resourceConfig
            self.resourceName = resourceName
        }

        private enum CodingKeys: String, CodingKey {
            case resourceConfig
            case resourceName
        }
    }

    public struct UpdateBackendAuthResourceConfig: AWSEncodableShape {
        /// Defines the service name to use when configuring an authentication resource in your Amplify project.
        public let authResources: AuthResources
        /// Describes the authorization configuration for the Amazon Cognito identity pool, provisioned as a part of your auth resource in the Amplify project.
        public let identityPoolConfigs: UpdateBackendAuthIdentityPoolConfig?
        /// Defines the service name to use when configuring an authentication resource in your Amplify project.
        public let service: Service
        /// Describes the authentication configuration for the Amazon Cognito user pool, provisioned as a part of your auth resource in the Amplify project.
        public let userPoolConfigs: UpdateBackendAuthUserPoolConfig

        public init(authResources: AuthResources, identityPoolConfigs: UpdateBackendAuthIdentityPoolConfig? = nil, service: Service, userPoolConfigs: UpdateBackendAuthUserPoolConfig) {
            self.authResources = authResources
            self.identityPoolConfigs = identityPoolConfigs
            self.service = service
            self.userPoolConfigs = userPoolConfigs
        }

        private enum CodingKeys: String, CodingKey {
            case authResources
            case identityPoolConfigs
            case service
            case userPoolConfigs
        }
    }

    public struct UpdateBackendAuthResponse: AWSDecodableShape {
        public let appId: String?
        public let backendEnvironmentName: String?
        public let error: String?
        public let jobId: String?
        public let operation: String?
        public let status: String?

        public init(appId: String? = nil, backendEnvironmentName: String? = nil, error: String? = nil, jobId: String? = nil, operation: String? = nil, status: String? = nil) {
            self.appId = appId
            self.backendEnvironmentName = backendEnvironmentName
            self.error = error
            self.jobId = jobId
            self.operation = operation
            self.status = status
        }

        private enum CodingKeys: String, CodingKey {
            case appId
            case backendEnvironmentName
            case error
            case jobId
            case operation
            case status
        }
    }

    public struct UpdateBackendAuthUserPoolConfig: AWSEncodableShape {
        /// Describes the forgot password policy for your Amazon Cognito user pool, configured as a part of your Amplify project.
        public let forgotPassword: UpdateBackendAuthForgotPasswordConfig?
        /// Describes whether to apply multi-factor authentication policies for your Amazon Cognito user pool configured as a part of your Amplify project.
        public let mfa: UpdateBackendAuthMFAConfig?
        /// Describes the OAuth policy and rules for your Amazon Cognito user pool, configured as a part of your Amplify project.
        public let oAuth: UpdateBackendAuthOAuthConfig?
        /// Describes the password policy for your Amazon Cognito user pool, configured as a part of your Amplify project.
        public let passwordPolicy: UpdateBackendAuthPasswordPolicyConfig?

        public init(forgotPassword: UpdateBackendAuthForgotPasswordConfig? = nil, mfa: UpdateBackendAuthMFAConfig? = nil, oAuth: UpdateBackendAuthOAuthConfig? = nil, passwordPolicy: UpdateBackendAuthPasswordPolicyConfig? = nil) {
            self.forgotPassword = forgotPassword
            self.mfa = mfa
            self.oAuth = oAuth
            self.passwordPolicy = passwordPolicy
        }

        private enum CodingKeys: String, CodingKey {
            case forgotPassword
            case mfa
            case oAuth
            case passwordPolicy
        }
    }

    public struct UpdateBackendConfigRequest: AWSEncodableShape {
        public static var _encoding = [
            AWSMemberEncoding(label: "appId", location: .uri(locationName: "appId"))
        ]

        public let appId: String
        public let loginAuthConfig: LoginAuthConfigReqObj?

        public init(appId: String, loginAuthConfig: LoginAuthConfigReqObj? = nil) {
            self.appId = appId
            self.loginAuthConfig = loginAuthConfig
        }

        private enum CodingKeys: String, CodingKey {
            case loginAuthConfig
        }
    }

    public struct UpdateBackendConfigResponse: AWSDecodableShape {
        public let appId: String?
        public let backendManagerAppId: String?
        public let error: String?
        public let loginAuthConfig: LoginAuthConfigReqObj?

        public init(appId: String? = nil, backendManagerAppId: String? = nil, error: String? = nil, loginAuthConfig: LoginAuthConfigReqObj? = nil) {
            self.appId = appId
            self.backendManagerAppId = backendManagerAppId
            self.error = error
            self.loginAuthConfig = loginAuthConfig
        }

        private enum CodingKeys: String, CodingKey {
            case appId
            case backendManagerAppId
            case error
            case loginAuthConfig
        }
    }

    public struct UpdateBackendJobRequest: AWSEncodableShape {
        public static var _encoding = [
            AWSMemberEncoding(label: "appId", location: .uri(locationName: "appId")),
            AWSMemberEncoding(label: "backendEnvironmentName", location: .uri(locationName: "backendEnvironmentName")),
            AWSMemberEncoding(label: "jobId", location: .uri(locationName: "jobId"))
        ]

        public let appId: String
        public let backendEnvironmentName: String
        public let jobId: String
        public let operation: String?
        public let status: String?

        public init(appId: String, backendEnvironmentName: String, jobId: String, operation: String? = nil, status: String? = nil) {
            self.appId = appId
            self.backendEnvironmentName = backendEnvironmentName
            self.jobId = jobId
            self.operation = operation
            self.status = status
        }

        private enum CodingKeys: String, CodingKey {
            case operation
            case status
        }
    }

    public struct UpdateBackendJobResponse: AWSDecodableShape {
        public let appId: String?
        public let backendEnvironmentName: String?
        public let createTime: String?
        public let error: String?
        public let jobId: String?
        public let operation: String?
        public let status: String?
        public let updateTime: String?

        public init(appId: String? = nil, backendEnvironmentName: String? = nil, createTime: String? = nil, error: String? = nil, jobId: String? = nil, operation: String? = nil, status: String? = nil, updateTime: String? = nil) {
            self.appId = appId
            self.backendEnvironmentName = backendEnvironmentName
            self.createTime = createTime
            self.error = error
            self.jobId = jobId
            self.operation = operation
            self.status = status
            self.updateTime = updateTime
        }

        private enum CodingKeys: String, CodingKey {
            case appId
            case backendEnvironmentName
            case createTime
            case error
            case jobId
            case operation
            case status
            case updateTime
        }
    }
}
