//===----------------------------------------------------------------------===//
//
// This source file is part of the Soto for AWS open source project
//
// Copyright (c) 2017-2023 the Soto project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
// See CONTRIBUTORS.txt for the list of Soto project authors
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by https://github.com/soto-project/soto-codegenerator.
// DO NOT EDIT.

@_exported import SotoCore

/// Service object for interacting with AWS Proton service.
///
/// This is the Proton Service API Reference. It provides descriptions, syntax and usage examples for each of the actions and data types for the Proton service. The documentation for each action shows the Query API request parameters and the XML response. Alternatively, you can use the Amazon Web Services CLI to access an API. For more information, see the Amazon Web Services Command Line Interface User Guide. The Proton service is a two-pronged automation framework. Administrators create service templates to provide standardized infrastructure and deployment tooling for serverless and container based applications. Developers, in turn, select from the available service templates to automate their application or service deployments. Because administrators define the infrastructure and tooling that Proton deploys and manages, they need permissions to use all of the listed API operations. When developers select a specific infrastructure and tooling set, Proton deploys their applications. To monitor their applications that are running on Proton, developers need permissions to the service create, list, update and delete API operations and the service instance list and update API operations. To learn more about Proton, see the Proton User Guide.  Ensuring Idempotency  When you make a mutating API request, the request typically returns a result before the asynchronous workflows of the operation are complete. Operations might also time out or encounter other server issues before they're complete, even if the request already returned a result. This might make it difficult to determine whether the request succeeded. Moreover, you might need to retry the request multiple times to ensure that the operation completes successfully. However, if the original request and the subsequent retries are successful, the operation occurs multiple times. This means that you might create more resources than you intended.  Idempotency ensures that an API request action completes no more than one time. With an idempotent request, if the original request action completes successfully, any subsequent retries complete successfully without performing any further actions. However, the result might contain updated information, such as the current creation status. The following lists of APIs are grouped according to methods that ensure idempotency.  Idempotent create APIs with a client token  The API actions in this list support idempotency with the use of a client token. The corresponding Amazon Web Services CLI commands also support idempotency using a client token. A client token is a unique, case-sensitive string of up to 64 ASCII characters. To make an idempotent API request using one of these actions, specify a client token in the request. We recommend that you don't reuse the same client token for other API requests. If you donâ€™t provide a client token for these APIs, a default client token is automatically provided by SDKs. Given a request action that has succeeded: If you retry the request using the same client token and the same parameters, the retry succeeds without performing any further actions other than returning the original resource detail data in the response. If you retry the request using the same client token, but one or more of the parameters are different, the retry throws a ValidationException with an IdempotentParameterMismatch error. Client tokens expire eight hours after a request is made. If you retry the request with the expired token, a new resource is created. If the original resource is deleted and you retry the request, a new resource is created. Idempotent create APIs with a client token:   CreateEnvironmentTemplateVersion   CreateServiceTemplateVersion   CreateEnvironmentAccountConnection    Idempotent create APIs  Given a request action that has succeeded: If you retry the request with an API from this group, and the original resource hasn't been modified, the retry succeeds without performing any further actions other than returning the original resource detail data in the response. If the original resource has been modified, the retry throws a ConflictException. If you retry with different input parameters, the retry throws a ValidationException with an IdempotentParameterMismatch error. Idempotent create APIs:   CreateEnvironmentTemplate   CreateServiceTemplate   CreateEnvironment   CreateService    Idempotent delete APIs  Given a request action that has succeeded: When you retry the request with an API from this group and the resource was deleted, its metadata is returned in the response. If you retry and the resource doesn't exist, the response is empty. In both cases, the retry succeeds. Idempotent delete APIs:   DeleteEnvironmentTemplate   DeleteEnvironmentTemplateVersion   DeleteServiceTemplate   DeleteServiceTemplateVersion   DeleteEnvironmentAccountConnection    Asynchronous idempotent delete APIs  Given a request action that has succeeded: If you retry the request with an API from this group, if the original request delete operation status is DELETE_IN_PROGRESS, the retry returns the resource detail data in the response without performing any further actions. If the original request delete operation is complete, a retry returns an empty response. Asynchronous idempotent delete APIs:   DeleteEnvironment   DeleteService
public struct Proton: AWSService {
    // MARK: Member variables

    /// Client used for communication with AWS
    public let client: AWSClient
    /// Service configuration
    public let config: AWSServiceConfig

    // MARK: Initialization

    /// Initialize the Proton client
    /// - parameters:
    ///     - client: AWSClient used to process requests
    ///     - region: Region of server you want to communicate with. This will override the partition parameter.
    ///     - partition: AWS partition where service resides, standard (.aws), china (.awscn), government (.awsusgov).
    ///     - endpoint: Custom endpoint URL to use instead of standard AWS servers
    ///     - middleware: Middleware chain used to edit requests before they are sent and responses before they are decoded 
    ///     - timeout: Timeout value for HTTP requests
    ///     - byteBufferAllocator: Allocator for ByteBuffers
    ///     - options: Service options
    public init(
        client: AWSClient,
        region: SotoCore.Region? = nil,
        partition: AWSPartition = .aws,
        endpoint: String? = nil,
        middleware: AWSMiddlewareProtocol? = nil,
        timeout: TimeAmount? = nil,
        byteBufferAllocator: ByteBufferAllocator = ByteBufferAllocator(),
        options: AWSServiceConfig.Options = []
    ) {
        self.client = client
        self.config = AWSServiceConfig(
            region: region,
            partition: region?.partition ?? partition,
            amzTarget: "AwsProton20200720",
            serviceName: "Proton",
            serviceIdentifier: "proton",
            serviceProtocol: .json(version: "1.0"),
            apiVersion: "2020-07-20",
            endpoint: endpoint,
            errorType: ProtonErrorType.self,
            middleware: middleware,
            timeout: timeout,
            byteBufferAllocator: byteBufferAllocator,
            options: options
        )
    }





    // MARK: API Calls

    /// In a management account, an environment account connection request is accepted. When the environment account connection request is accepted, Proton can use the associated IAM role to provision environment infrastructure resources in the associated environment account. For more information, see Environment account connections in the Proton User guide.
    @Sendable
    public func acceptEnvironmentAccountConnection(_ input: AcceptEnvironmentAccountConnectionInput, logger: Logger = AWSClient.loggingDisabled) async throws -> AcceptEnvironmentAccountConnectionOutput {
        return try await self.client.execute(
            operation: "AcceptEnvironmentAccountConnection", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Attempts to cancel a component deployment (for a component that is in the IN_PROGRESS deployment status). For more information about components, see Proton components in the Proton User Guide.
    @Sendable
    public func cancelComponentDeployment(_ input: CancelComponentDeploymentInput, logger: Logger = AWSClient.loggingDisabled) async throws -> CancelComponentDeploymentOutput {
        return try await self.client.execute(
            operation: "CancelComponentDeployment", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Attempts to cancel an environment deployment on an UpdateEnvironment action, if the deployment is IN_PROGRESS. For more information, see Update an environment in the Proton User guide. The following list includes potential cancellation scenarios.   If the cancellation attempt succeeds, the resulting deployment state is CANCELLED.   If the cancellation attempt fails, the resulting deployment state is FAILED.   If the current UpdateEnvironment action succeeds before the cancellation attempt starts, the resulting deployment state is SUCCEEDED and the cancellation attempt has no effect.
    @Sendable
    public func cancelEnvironmentDeployment(_ input: CancelEnvironmentDeploymentInput, logger: Logger = AWSClient.loggingDisabled) async throws -> CancelEnvironmentDeploymentOutput {
        return try await self.client.execute(
            operation: "CancelEnvironmentDeployment", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Attempts to cancel a service instance deployment on an UpdateServiceInstance action, if the deployment is IN_PROGRESS. For more information, see Update a service instance in the Proton User guide. The following list includes potential cancellation scenarios.   If the cancellation attempt succeeds, the resulting deployment state is CANCELLED.   If the cancellation attempt fails, the resulting deployment state is FAILED.   If the current UpdateServiceInstance action succeeds before the cancellation attempt starts, the resulting deployment state is SUCCEEDED and the cancellation attempt has no effect.
    @Sendable
    public func cancelServiceInstanceDeployment(_ input: CancelServiceInstanceDeploymentInput, logger: Logger = AWSClient.loggingDisabled) async throws -> CancelServiceInstanceDeploymentOutput {
        return try await self.client.execute(
            operation: "CancelServiceInstanceDeployment", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Attempts to cancel a service pipeline deployment on an UpdateServicePipeline action, if the deployment is IN_PROGRESS. For more information, see Update a service pipeline in the Proton User guide. The following list includes potential cancellation scenarios.   If the cancellation attempt succeeds, the resulting deployment state is CANCELLED.   If the cancellation attempt fails, the resulting deployment state is FAILED.   If the current UpdateServicePipeline action succeeds before the cancellation attempt starts, the resulting deployment state is SUCCEEDED and the cancellation attempt has no effect.
    @Sendable
    public func cancelServicePipelineDeployment(_ input: CancelServicePipelineDeploymentInput, logger: Logger = AWSClient.loggingDisabled) async throws -> CancelServicePipelineDeploymentOutput {
        return try await self.client.execute(
            operation: "CancelServicePipelineDeployment", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Create an Proton component. A component is an infrastructure extension for a service instance. For more information about components, see Proton components in the Proton User Guide.
    @Sendable
    public func createComponent(_ input: CreateComponentInput, logger: Logger = AWSClient.loggingDisabled) async throws -> CreateComponentOutput {
        return try await self.client.execute(
            operation: "CreateComponent", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Deploy a new environment. An Proton environment is created from an environment template that defines infrastructure and resources that can be shared across services.  You can provision environments using the following methods:    Amazon Web Services-managed provisioning: Proton makes direct calls to provision your resources.   Self-managed provisioning: Proton makes pull requests on your repository to provide compiled infrastructure as code (IaC) files that your IaC engine uses to provision resources.   For more information, see Environments and Provisioning methods in the Proton User Guide.
    @Sendable
    public func createEnvironment(_ input: CreateEnvironmentInput, logger: Logger = AWSClient.loggingDisabled) async throws -> CreateEnvironmentOutput {
        return try await self.client.execute(
            operation: "CreateEnvironment", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Create an environment account connection in an environment account so that environment infrastructure resources can be provisioned in the environment account from a management account. An environment account connection is a secure bi-directional connection between a management account and an environment account that maintains authorization and permissions. For more information, see Environment account connections in the Proton User guide.
    @Sendable
    public func createEnvironmentAccountConnection(_ input: CreateEnvironmentAccountConnectionInput, logger: Logger = AWSClient.loggingDisabled) async throws -> CreateEnvironmentAccountConnectionOutput {
        return try await self.client.execute(
            operation: "CreateEnvironmentAccountConnection", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Create an environment template for Proton. For more information, see Environment Templates in the Proton User Guide. You can create an environment template in one of the two following ways:   Register and publish a standard environment template that instructs Proton to deploy and manage environment infrastructure.   Register and publish a customer managed environment template that connects Proton to your existing provisioned infrastructure that you manage. Proton doesn't manage your existing provisioned infrastructure. To create an environment template for customer provisioned and managed infrastructure, include the provisioning parameter and set the value to CUSTOMER_MANAGED. For more information, see Register and publish an environment template in the Proton User Guide.
    @Sendable
    public func createEnvironmentTemplate(_ input: CreateEnvironmentTemplateInput, logger: Logger = AWSClient.loggingDisabled) async throws -> CreateEnvironmentTemplateOutput {
        return try await self.client.execute(
            operation: "CreateEnvironmentTemplate", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Create a new major or minor version of an environment template. A major version of an environment template is a version that isn't backwards compatible. A minor version of an environment template is a version that's backwards compatible within its major version.
    @Sendable
    public func createEnvironmentTemplateVersion(_ input: CreateEnvironmentTemplateVersionInput, logger: Logger = AWSClient.loggingDisabled) async throws -> CreateEnvironmentTemplateVersionOutput {
        return try await self.client.execute(
            operation: "CreateEnvironmentTemplateVersion", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Create and register a link to a repository. Proton uses the link to repeatedly access the repository, to either push to it (self-managed provisioning) or pull from it (template sync). You can share a linked repository across multiple resources (like environments using self-managed provisioning, or synced templates). When you create a repository link, Proton creates a service-linked role for you. For more information, see Self-managed provisioning, Template bundles, and Template sync configurations in the Proton User Guide.
    @Sendable
    public func createRepository(_ input: CreateRepositoryInput, logger: Logger = AWSClient.loggingDisabled) async throws -> CreateRepositoryOutput {
        return try await self.client.execute(
            operation: "CreateRepository", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Create an Proton service. An Proton service is an instantiation of a service template and often includes several service instances and pipeline. For more information, see Services in the Proton User Guide.
    @Sendable
    public func createService(_ input: CreateServiceInput, logger: Logger = AWSClient.loggingDisabled) async throws -> CreateServiceOutput {
        return try await self.client.execute(
            operation: "CreateService", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Create a service instance.
    @Sendable
    public func createServiceInstance(_ input: CreateServiceInstanceInput, logger: Logger = AWSClient.loggingDisabled) async throws -> CreateServiceInstanceOutput {
        return try await self.client.execute(
            operation: "CreateServiceInstance", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Create the Proton Ops configuration file.
    @Sendable
    public func createServiceSyncConfig(_ input: CreateServiceSyncConfigInput, logger: Logger = AWSClient.loggingDisabled) async throws -> CreateServiceSyncConfigOutput {
        return try await self.client.execute(
            operation: "CreateServiceSyncConfig", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Create a service template. The administrator creates a service template to define standardized infrastructure and an optional CI/CD service pipeline. Developers, in turn, select the service template from Proton. If the selected service template includes a service pipeline definition, they provide a link to their source code repository. Proton then deploys and manages the infrastructure defined by the selected service template. For more information, see Proton templates in the Proton User Guide.
    @Sendable
    public func createServiceTemplate(_ input: CreateServiceTemplateInput, logger: Logger = AWSClient.loggingDisabled) async throws -> CreateServiceTemplateOutput {
        return try await self.client.execute(
            operation: "CreateServiceTemplate", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Create a new major or minor version of a service template. A major version of a service template is a version that isn't backward compatible. A minor version of a service template is a version that's backward compatible within its major version.
    @Sendable
    public func createServiceTemplateVersion(_ input: CreateServiceTemplateVersionInput, logger: Logger = AWSClient.loggingDisabled) async throws -> CreateServiceTemplateVersionOutput {
        return try await self.client.execute(
            operation: "CreateServiceTemplateVersion", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Set up a template to create new template versions automatically by tracking a linked repository. A linked repository is a repository that has been registered with Proton. For more information, see CreateRepository. When a commit is pushed to your linked repository, Proton checks for changes to your repository template bundles. If it detects a template bundle change, a new major or minor version of its template is created, if the version doesnâ€™t already exist. For more information, see Template sync configurations in the Proton User Guide.
    @Sendable
    public func createTemplateSyncConfig(_ input: CreateTemplateSyncConfigInput, logger: Logger = AWSClient.loggingDisabled) async throws -> CreateTemplateSyncConfigOutput {
        return try await self.client.execute(
            operation: "CreateTemplateSyncConfig", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Delete an Proton component resource. For more information about components, see Proton components in the Proton User Guide.
    @Sendable
    public func deleteComponent(_ input: DeleteComponentInput, logger: Logger = AWSClient.loggingDisabled) async throws -> DeleteComponentOutput {
        return try await self.client.execute(
            operation: "DeleteComponent", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Delete an environment.
    @Sendable
    public func deleteEnvironment(_ input: DeleteEnvironmentInput, logger: Logger = AWSClient.loggingDisabled) async throws -> DeleteEnvironmentOutput {
        return try await self.client.execute(
            operation: "DeleteEnvironment", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// In an environment account, delete an environment account connection. After you delete an environment account connection thatâ€™s in use by an Proton environment, Proton canâ€™t manage the environment infrastructure resources until a new environment account connection is accepted for the environment account and associated environment. You're responsible for cleaning up provisioned resources that remain without an environment connection. For more information, see Environment account connections in the Proton User guide.
    @Sendable
    public func deleteEnvironmentAccountConnection(_ input: DeleteEnvironmentAccountConnectionInput, logger: Logger = AWSClient.loggingDisabled) async throws -> DeleteEnvironmentAccountConnectionOutput {
        return try await self.client.execute(
            operation: "DeleteEnvironmentAccountConnection", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// If no other major or minor versions of an environment template exist, delete the environment template.
    @Sendable
    public func deleteEnvironmentTemplate(_ input: DeleteEnvironmentTemplateInput, logger: Logger = AWSClient.loggingDisabled) async throws -> DeleteEnvironmentTemplateOutput {
        return try await self.client.execute(
            operation: "DeleteEnvironmentTemplate", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// If no other minor versions of an environment template exist, delete a major version of the environment template if it's not the Recommended version. Delete the Recommended version of the environment template if no other major versions or minor versions of the environment template exist. A major version of an environment template is a version that's not backward compatible. Delete a minor version of an environment template if it isn't the Recommended version. Delete a Recommended minor version of the environment template if no other minor versions of the environment template exist. A minor version of an environment template is a version that's backward compatible.
    @Sendable
    public func deleteEnvironmentTemplateVersion(_ input: DeleteEnvironmentTemplateVersionInput, logger: Logger = AWSClient.loggingDisabled) async throws -> DeleteEnvironmentTemplateVersionOutput {
        return try await self.client.execute(
            operation: "DeleteEnvironmentTemplateVersion", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// De-register and unlink your repository.
    @Sendable
    public func deleteRepository(_ input: DeleteRepositoryInput, logger: Logger = AWSClient.loggingDisabled) async throws -> DeleteRepositoryOutput {
        return try await self.client.execute(
            operation: "DeleteRepository", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Delete a service, with its instances and pipeline.  You can't delete a service if it has any service instances that have components attached to them. For more information about components, see Proton components in the Proton User Guide.
    @Sendable
    public func deleteService(_ input: DeleteServiceInput, logger: Logger = AWSClient.loggingDisabled) async throws -> DeleteServiceOutput {
        return try await self.client.execute(
            operation: "DeleteService", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Delete the Proton Ops file.
    @Sendable
    public func deleteServiceSyncConfig(_ input: DeleteServiceSyncConfigInput, logger: Logger = AWSClient.loggingDisabled) async throws -> DeleteServiceSyncConfigOutput {
        return try await self.client.execute(
            operation: "DeleteServiceSyncConfig", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// If no other major or minor versions of the service template exist, delete the service template.
    @Sendable
    public func deleteServiceTemplate(_ input: DeleteServiceTemplateInput, logger: Logger = AWSClient.loggingDisabled) async throws -> DeleteServiceTemplateOutput {
        return try await self.client.execute(
            operation: "DeleteServiceTemplate", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// If no other minor versions of a service template exist, delete a major version of the service template if it's not the Recommended version. Delete the Recommended version of the service template if no other major versions or minor versions of the service template exist. A major version of a service template is a version that isn't backwards compatible. Delete a minor version of a service template if it's not the Recommended version. Delete a Recommended minor version of the service template if no other minor versions of the service template exist. A minor version of a service template is a version that's backwards compatible.
    @Sendable
    public func deleteServiceTemplateVersion(_ input: DeleteServiceTemplateVersionInput, logger: Logger = AWSClient.loggingDisabled) async throws -> DeleteServiceTemplateVersionOutput {
        return try await self.client.execute(
            operation: "DeleteServiceTemplateVersion", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Delete a template sync configuration.
    @Sendable
    public func deleteTemplateSyncConfig(_ input: DeleteTemplateSyncConfigInput, logger: Logger = AWSClient.loggingDisabled) async throws -> DeleteTemplateSyncConfigOutput {
        return try await self.client.execute(
            operation: "DeleteTemplateSyncConfig", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Get detail data for Proton account-wide settings.
    @Sendable
    public func getAccountSettings(_ input: GetAccountSettingsInput, logger: Logger = AWSClient.loggingDisabled) async throws -> GetAccountSettingsOutput {
        return try await self.client.execute(
            operation: "GetAccountSettings", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Get detailed data for a component. For more information about components, see Proton components in the Proton User Guide.
    @Sendable
    public func getComponent(_ input: GetComponentInput, logger: Logger = AWSClient.loggingDisabled) async throws -> GetComponentOutput {
        return try await self.client.execute(
            operation: "GetComponent", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Get detailed data for an environment.
    @Sendable
    public func getEnvironment(_ input: GetEnvironmentInput, logger: Logger = AWSClient.loggingDisabled) async throws -> GetEnvironmentOutput {
        return try await self.client.execute(
            operation: "GetEnvironment", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// In an environment account, get the detailed data for an environment account connection. For more information, see Environment account connections in the Proton User guide.
    @Sendable
    public func getEnvironmentAccountConnection(_ input: GetEnvironmentAccountConnectionInput, logger: Logger = AWSClient.loggingDisabled) async throws -> GetEnvironmentAccountConnectionOutput {
        return try await self.client.execute(
            operation: "GetEnvironmentAccountConnection", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Get detailed data for an environment template.
    @Sendable
    public func getEnvironmentTemplate(_ input: GetEnvironmentTemplateInput, logger: Logger = AWSClient.loggingDisabled) async throws -> GetEnvironmentTemplateOutput {
        return try await self.client.execute(
            operation: "GetEnvironmentTemplate", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Get detailed data for a major or minor version of an environment template.
    @Sendable
    public func getEnvironmentTemplateVersion(_ input: GetEnvironmentTemplateVersionInput, logger: Logger = AWSClient.loggingDisabled) async throws -> GetEnvironmentTemplateVersionOutput {
        return try await self.client.execute(
            operation: "GetEnvironmentTemplateVersion", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Get detail data for a linked repository.
    @Sendable
    public func getRepository(_ input: GetRepositoryInput, logger: Logger = AWSClient.loggingDisabled) async throws -> GetRepositoryOutput {
        return try await self.client.execute(
            operation: "GetRepository", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Get the sync status of a repository used for Proton template sync. For more information about template sync, see .  A repository sync status isn't tied to the Proton Repository resource (or any other Proton resource). Therefore, tags on an Proton Repository resource have no effect on this action. Specifically, you can't use these tags to control access to this action using Attribute-based access control (ABAC). For more information about ABAC, see ABAC in the Proton User Guide.
    @Sendable
    public func getRepositorySyncStatus(_ input: GetRepositorySyncStatusInput, logger: Logger = AWSClient.loggingDisabled) async throws -> GetRepositorySyncStatusOutput {
        return try await self.client.execute(
            operation: "GetRepositorySyncStatus", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Get counts of Proton resources. For infrastructure-provisioning resources (environments, services, service instances, pipelines), the action returns staleness counts. A resource is stale when it's behind the recommended version of the Proton template that it uses and it needs an update to become current. The action returns staleness counts (counts of resources that are up-to-date, behind a template major version, or behind a template minor version), the total number of resources, and the number of resources that are in a failed state, grouped by resource type. Components, environments, and service templates return less information - see the components, environments, and serviceTemplates field descriptions. For context, the action also returns the total number of each type of Proton template in the Amazon Web Services account. For more information, see Proton dashboard in the Proton User Guide.
    @Sendable
    public func getResourcesSummary(_ input: GetResourcesSummaryInput, logger: Logger = AWSClient.loggingDisabled) async throws -> GetResourcesSummaryOutput {
        return try await self.client.execute(
            operation: "GetResourcesSummary", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Get detailed data for a service.
    @Sendable
    public func getService(_ input: GetServiceInput, logger: Logger = AWSClient.loggingDisabled) async throws -> GetServiceOutput {
        return try await self.client.execute(
            operation: "GetService", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Get detailed data for a service instance. A service instance is an instantiation of service template and it runs in a specific environment.
    @Sendable
    public func getServiceInstance(_ input: GetServiceInstanceInput, logger: Logger = AWSClient.loggingDisabled) async throws -> GetServiceInstanceOutput {
        return try await self.client.execute(
            operation: "GetServiceInstance", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Get the status of the synced service instance.
    @Sendable
    public func getServiceInstanceSyncStatus(_ input: GetServiceInstanceSyncStatusInput, logger: Logger = AWSClient.loggingDisabled) async throws -> GetServiceInstanceSyncStatusOutput {
        return try await self.client.execute(
            operation: "GetServiceInstanceSyncStatus", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Get detailed data for the service sync blocker summary.
    @Sendable
    public func getServiceSyncBlockerSummary(_ input: GetServiceSyncBlockerSummaryInput, logger: Logger = AWSClient.loggingDisabled) async throws -> GetServiceSyncBlockerSummaryOutput {
        return try await self.client.execute(
            operation: "GetServiceSyncBlockerSummary", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Get detailed information for the service sync configuration.
    @Sendable
    public func getServiceSyncConfig(_ input: GetServiceSyncConfigInput, logger: Logger = AWSClient.loggingDisabled) async throws -> GetServiceSyncConfigOutput {
        return try await self.client.execute(
            operation: "GetServiceSyncConfig", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Get detailed data for a service template.
    @Sendable
    public func getServiceTemplate(_ input: GetServiceTemplateInput, logger: Logger = AWSClient.loggingDisabled) async throws -> GetServiceTemplateOutput {
        return try await self.client.execute(
            operation: "GetServiceTemplate", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Get detailed data for a major or minor version of a service template.
    @Sendable
    public func getServiceTemplateVersion(_ input: GetServiceTemplateVersionInput, logger: Logger = AWSClient.loggingDisabled) async throws -> GetServiceTemplateVersionOutput {
        return try await self.client.execute(
            operation: "GetServiceTemplateVersion", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Get detail data for a template sync configuration.
    @Sendable
    public func getTemplateSyncConfig(_ input: GetTemplateSyncConfigInput, logger: Logger = AWSClient.loggingDisabled) async throws -> GetTemplateSyncConfigOutput {
        return try await self.client.execute(
            operation: "GetTemplateSyncConfig", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Get the status of a template sync.
    @Sendable
    public func getTemplateSyncStatus(_ input: GetTemplateSyncStatusInput, logger: Logger = AWSClient.loggingDisabled) async throws -> GetTemplateSyncStatusOutput {
        return try await self.client.execute(
            operation: "GetTemplateSyncStatus", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Get a list of component Infrastructure as Code (IaC) outputs. For more information about components, see Proton components in the Proton User Guide.
    @Sendable
    public func listComponentOutputs(_ input: ListComponentOutputsInput, logger: Logger = AWSClient.loggingDisabled) async throws -> ListComponentOutputsOutput {
        return try await self.client.execute(
            operation: "ListComponentOutputs", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// List provisioned resources for a component with details. For more information about components, see Proton components in the Proton User Guide.
    @Sendable
    public func listComponentProvisionedResources(_ input: ListComponentProvisionedResourcesInput, logger: Logger = AWSClient.loggingDisabled) async throws -> ListComponentProvisionedResourcesOutput {
        return try await self.client.execute(
            operation: "ListComponentProvisionedResources", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// List components with summary data. You can filter the result list by environment, service, or a single service instance. For more information about components, see Proton components in the Proton User Guide.
    @Sendable
    public func listComponents(_ input: ListComponentsInput, logger: Logger = AWSClient.loggingDisabled) async throws -> ListComponentsOutput {
        return try await self.client.execute(
            operation: "ListComponents", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// View a list of environment account connections. For more information, see Environment account connections in the Proton User guide.
    @Sendable
    public func listEnvironmentAccountConnections(_ input: ListEnvironmentAccountConnectionsInput, logger: Logger = AWSClient.loggingDisabled) async throws -> ListEnvironmentAccountConnectionsOutput {
        return try await self.client.execute(
            operation: "ListEnvironmentAccountConnections", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// List the infrastructure as code outputs for your environment.
    @Sendable
    public func listEnvironmentOutputs(_ input: ListEnvironmentOutputsInput, logger: Logger = AWSClient.loggingDisabled) async throws -> ListEnvironmentOutputsOutput {
        return try await self.client.execute(
            operation: "ListEnvironmentOutputs", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// List the provisioned resources for your environment.
    @Sendable
    public func listEnvironmentProvisionedResources(_ input: ListEnvironmentProvisionedResourcesInput, logger: Logger = AWSClient.loggingDisabled) async throws -> ListEnvironmentProvisionedResourcesOutput {
        return try await self.client.execute(
            operation: "ListEnvironmentProvisionedResources", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// List major or minor versions of an environment template with detail data.
    @Sendable
    public func listEnvironmentTemplateVersions(_ input: ListEnvironmentTemplateVersionsInput, logger: Logger = AWSClient.loggingDisabled) async throws -> ListEnvironmentTemplateVersionsOutput {
        return try await self.client.execute(
            operation: "ListEnvironmentTemplateVersions", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// List environment templates.
    @Sendable
    public func listEnvironmentTemplates(_ input: ListEnvironmentTemplatesInput, logger: Logger = AWSClient.loggingDisabled) async throws -> ListEnvironmentTemplatesOutput {
        return try await self.client.execute(
            operation: "ListEnvironmentTemplates", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// List environments with detail data summaries.
    @Sendable
    public func listEnvironments(_ input: ListEnvironmentsInput, logger: Logger = AWSClient.loggingDisabled) async throws -> ListEnvironmentsOutput {
        return try await self.client.execute(
            operation: "ListEnvironments", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// List linked repositories with detail data.
    @Sendable
    public func listRepositories(_ input: ListRepositoriesInput, logger: Logger = AWSClient.loggingDisabled) async throws -> ListRepositoriesOutput {
        return try await self.client.execute(
            operation: "ListRepositories", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// List repository sync definitions with detail data.
    @Sendable
    public func listRepositorySyncDefinitions(_ input: ListRepositorySyncDefinitionsInput, logger: Logger = AWSClient.loggingDisabled) async throws -> ListRepositorySyncDefinitionsOutput {
        return try await self.client.execute(
            operation: "ListRepositorySyncDefinitions", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Get a list service of instance Infrastructure as Code (IaC) outputs.
    @Sendable
    public func listServiceInstanceOutputs(_ input: ListServiceInstanceOutputsInput, logger: Logger = AWSClient.loggingDisabled) async throws -> ListServiceInstanceOutputsOutput {
        return try await self.client.execute(
            operation: "ListServiceInstanceOutputs", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// List provisioned resources for a service instance with details.
    @Sendable
    public func listServiceInstanceProvisionedResources(_ input: ListServiceInstanceProvisionedResourcesInput, logger: Logger = AWSClient.loggingDisabled) async throws -> ListServiceInstanceProvisionedResourcesOutput {
        return try await self.client.execute(
            operation: "ListServiceInstanceProvisionedResources", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// List service instances with summary data. This action lists service instances of all services in the Amazon Web Services account.
    @Sendable
    public func listServiceInstances(_ input: ListServiceInstancesInput, logger: Logger = AWSClient.loggingDisabled) async throws -> ListServiceInstancesOutput {
        return try await self.client.execute(
            operation: "ListServiceInstances", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Get a list of service pipeline Infrastructure as Code (IaC) outputs.
    @Sendable
    public func listServicePipelineOutputs(_ input: ListServicePipelineOutputsInput, logger: Logger = AWSClient.loggingDisabled) async throws -> ListServicePipelineOutputsOutput {
        return try await self.client.execute(
            operation: "ListServicePipelineOutputs", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// List provisioned resources for a service and pipeline with details.
    @Sendable
    public func listServicePipelineProvisionedResources(_ input: ListServicePipelineProvisionedResourcesInput, logger: Logger = AWSClient.loggingDisabled) async throws -> ListServicePipelineProvisionedResourcesOutput {
        return try await self.client.execute(
            operation: "ListServicePipelineProvisionedResources", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// List major or minor versions of a service template with detail data.
    @Sendable
    public func listServiceTemplateVersions(_ input: ListServiceTemplateVersionsInput, logger: Logger = AWSClient.loggingDisabled) async throws -> ListServiceTemplateVersionsOutput {
        return try await self.client.execute(
            operation: "ListServiceTemplateVersions", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// List service templates with detail data.
    @Sendable
    public func listServiceTemplates(_ input: ListServiceTemplatesInput, logger: Logger = AWSClient.loggingDisabled) async throws -> ListServiceTemplatesOutput {
        return try await self.client.execute(
            operation: "ListServiceTemplates", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// List services with summaries of detail data.
    @Sendable
    public func listServices(_ input: ListServicesInput, logger: Logger = AWSClient.loggingDisabled) async throws -> ListServicesOutput {
        return try await self.client.execute(
            operation: "ListServices", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// List tags for a resource. For more information, see Proton resources and tagging in the Proton User Guide.
    @Sendable
    public func listTagsForResource(_ input: ListTagsForResourceInput, logger: Logger = AWSClient.loggingDisabled) async throws -> ListTagsForResourceOutput {
        return try await self.client.execute(
            operation: "ListTagsForResource", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Notify Proton of status changes to a provisioned resource when you use self-managed provisioning. For more information, see Self-managed provisioning in the Proton User Guide.
    @Sendable
    public func notifyResourceDeploymentStatusChange(_ input: NotifyResourceDeploymentStatusChangeInput, logger: Logger = AWSClient.loggingDisabled) async throws -> NotifyResourceDeploymentStatusChangeOutput {
        return try await self.client.execute(
            operation: "NotifyResourceDeploymentStatusChange", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// In a management account, reject an environment account connection from another environment account. After you reject an environment account connection request, you can't accept or use the rejected environment account connection. You canâ€™t reject an environment account connection that's connected to an environment. For more information, see Environment account connections in the Proton User guide.
    @Sendable
    public func rejectEnvironmentAccountConnection(_ input: RejectEnvironmentAccountConnectionInput, logger: Logger = AWSClient.loggingDisabled) async throws -> RejectEnvironmentAccountConnectionOutput {
        return try await self.client.execute(
            operation: "RejectEnvironmentAccountConnection", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Tag a resource. A tag is a key-value pair of metadata that you associate with an Proton resource. For more information, see Proton resources and tagging in the Proton User Guide.
    @Sendable
    public func tagResource(_ input: TagResourceInput, logger: Logger = AWSClient.loggingDisabled) async throws -> TagResourceOutput {
        return try await self.client.execute(
            operation: "TagResource", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Remove a customer tag from a resource. A tag is a key-value pair of metadata associated with an Proton resource. For more information, see Proton resources and tagging in the Proton User Guide.
    @Sendable
    public func untagResource(_ input: UntagResourceInput, logger: Logger = AWSClient.loggingDisabled) async throws -> UntagResourceOutput {
        return try await self.client.execute(
            operation: "UntagResource", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Update Proton settings that are used for multiple services in the Amazon Web Services account.
    @Sendable
    public func updateAccountSettings(_ input: UpdateAccountSettingsInput, logger: Logger = AWSClient.loggingDisabled) async throws -> UpdateAccountSettingsOutput {
        return try await self.client.execute(
            operation: "UpdateAccountSettings", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Update a component. There are a few modes for updating a component. The deploymentType field defines the mode.  You can't update a component while its deployment status, or the deployment status of a service instance attached to it, is IN_PROGRESS.  For more information about components, see Proton components in the Proton User Guide.
    @Sendable
    public func updateComponent(_ input: UpdateComponentInput, logger: Logger = AWSClient.loggingDisabled) async throws -> UpdateComponentOutput {
        return try await self.client.execute(
            operation: "UpdateComponent", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Update an environment. If the environment is associated with an environment account connection, don't update or include the protonServiceRoleArn and provisioningRepository parameter to update or connect to an environment account connection. You can only update to a new environment account connection if that connection was created in the same environment account that the current environment account connection was created in. The account connection must also be associated with the current environment. If the environment isn't associated with an environment account connection, don't update or include the environmentAccountConnectionId parameter. You can't update or connect the environment to an environment account connection if it isn't already associated with an environment connection. You can update either the environmentAccountConnectionId or protonServiceRoleArn parameter and value. You canâ€™t update both. If the environment was configured for Amazon Web Services-managed provisioning, omit the provisioningRepository parameter. If the environment was configured for self-managed provisioning, specify the provisioningRepository parameter and omit the protonServiceRoleArn and environmentAccountConnectionId parameters. For more information, see Environments and Provisioning methods in the Proton User Guide. There are four modes for updating an environment. The deploymentType field defines the mode.     NONE  In this mode, a deployment doesn't occur. Only the requested metadata parameters are updated.     CURRENT_VERSION  In this mode, the environment is deployed and updated with the new spec that you provide. Only requested parameters are updated. Donâ€™t include minor or major version parameters when you use this deployment-type.     MINOR_VERSION  In this mode, the environment is deployed and updated with the published, recommended (latest) minor version of the current major version in use, by default. You can also specify a different minor version of the current major version in use.     MAJOR_VERSION  In this mode, the environment is deployed and updated with the published, recommended (latest) major and minor version of the current template, by default. You can also specify a different major version that's higher than the major version in use and a minor version.
    @Sendable
    public func updateEnvironment(_ input: UpdateEnvironmentInput, logger: Logger = AWSClient.loggingDisabled) async throws -> UpdateEnvironmentOutput {
        return try await self.client.execute(
            operation: "UpdateEnvironment", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// In an environment account, update an environment account connection to use a new IAM role. For more information, see Environment account connections in the Proton User guide.
    @Sendable
    public func updateEnvironmentAccountConnection(_ input: UpdateEnvironmentAccountConnectionInput, logger: Logger = AWSClient.loggingDisabled) async throws -> UpdateEnvironmentAccountConnectionOutput {
        return try await self.client.execute(
            operation: "UpdateEnvironmentAccountConnection", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Update an environment template.
    @Sendable
    public func updateEnvironmentTemplate(_ input: UpdateEnvironmentTemplateInput, logger: Logger = AWSClient.loggingDisabled) async throws -> UpdateEnvironmentTemplateOutput {
        return try await self.client.execute(
            operation: "UpdateEnvironmentTemplate", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Update a major or minor version of an environment template.
    @Sendable
    public func updateEnvironmentTemplateVersion(_ input: UpdateEnvironmentTemplateVersionInput, logger: Logger = AWSClient.loggingDisabled) async throws -> UpdateEnvironmentTemplateVersionOutput {
        return try await self.client.execute(
            operation: "UpdateEnvironmentTemplateVersion", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Edit a service description or use a spec to add and delete service instances.  Existing service instances and the service pipeline can't be edited using this API. They can only be deleted.  Use the description parameter to modify the description. Edit the spec parameter to add or delete instances.  You can't delete a service instance (remove it from the spec) if it has an attached component. For more information about components, see Proton components in the Proton User Guide.
    @Sendable
    public func updateService(_ input: UpdateServiceInput, logger: Logger = AWSClient.loggingDisabled) async throws -> UpdateServiceOutput {
        return try await self.client.execute(
            operation: "UpdateService", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Update a service instance. There are a few modes for updating a service instance. The deploymentType field defines the mode.  You can't update a service instance while its deployment status, or the deployment status of a component attached to it, is IN_PROGRESS. For more information about components, see Proton components in the Proton User Guide.
    @Sendable
    public func updateServiceInstance(_ input: UpdateServiceInstanceInput, logger: Logger = AWSClient.loggingDisabled) async throws -> UpdateServiceInstanceOutput {
        return try await self.client.execute(
            operation: "UpdateServiceInstance", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Update the service pipeline. There are four modes for updating a service pipeline. The deploymentType field defines the mode.     NONE  In this mode, a deployment doesn't occur. Only the requested metadata parameters are updated.     CURRENT_VERSION  In this mode, the service pipeline is deployed and updated with the new spec that you provide. Only requested parameters are updated. Donâ€™t include major or minor version parameters when you use this deployment-type.     MINOR_VERSION  In this mode, the service pipeline is deployed and updated with the published, recommended (latest) minor version of the current major version in use, by default. You can specify a different minor version of the current major version in use.     MAJOR_VERSION  In this mode, the service pipeline is deployed and updated with the published, recommended (latest) major and minor version of the current template by default. You can specify a different major version that's higher than the major version in use and a minor version.
    @Sendable
    public func updateServicePipeline(_ input: UpdateServicePipelineInput, logger: Logger = AWSClient.loggingDisabled) async throws -> UpdateServicePipelineOutput {
        return try await self.client.execute(
            operation: "UpdateServicePipeline", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Update the service sync blocker by resolving it.
    @Sendable
    public func updateServiceSyncBlocker(_ input: UpdateServiceSyncBlockerInput, logger: Logger = AWSClient.loggingDisabled) async throws -> UpdateServiceSyncBlockerOutput {
        return try await self.client.execute(
            operation: "UpdateServiceSyncBlocker", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Update the Proton Ops config file.
    @Sendable
    public func updateServiceSyncConfig(_ input: UpdateServiceSyncConfigInput, logger: Logger = AWSClient.loggingDisabled) async throws -> UpdateServiceSyncConfigOutput {
        return try await self.client.execute(
            operation: "UpdateServiceSyncConfig", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Update a service template.
    @Sendable
    public func updateServiceTemplate(_ input: UpdateServiceTemplateInput, logger: Logger = AWSClient.loggingDisabled) async throws -> UpdateServiceTemplateOutput {
        return try await self.client.execute(
            operation: "UpdateServiceTemplate", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Update a major or minor version of a service template.
    @Sendable
    public func updateServiceTemplateVersion(_ input: UpdateServiceTemplateVersionInput, logger: Logger = AWSClient.loggingDisabled) async throws -> UpdateServiceTemplateVersionOutput {
        return try await self.client.execute(
            operation: "UpdateServiceTemplateVersion", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Update template sync configuration parameters, except for the templateName and templateType. Repository details (branch, name, and provider) should be of a linked repository. A linked repository is a repository that has been registered with Proton. For more information, see CreateRepository.
    @Sendable
    public func updateTemplateSyncConfig(_ input: UpdateTemplateSyncConfigInput, logger: Logger = AWSClient.loggingDisabled) async throws -> UpdateTemplateSyncConfigOutput {
        return try await self.client.execute(
            operation: "UpdateTemplateSyncConfig", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
}

extension Proton {
    /// Initializer required by `AWSService.with(middlewares:timeout:byteBufferAllocator:options)`. You are not able to use this initializer directly as there are not public
    /// initializers for `AWSServiceConfig.Patch`. Please use `AWSService.with(middlewares:timeout:byteBufferAllocator:options)` instead.
    public init(from: Proton, patch: AWSServiceConfig.Patch) {
        self.client = from.client
        self.config = from.config.with(patch: patch)
    }
}

// MARK: Paginators

@available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
extension Proton {
    /// Get a list of component Infrastructure as Code (IaC) outputs. For more information about components, see Proton components in the Proton User Guide.
    /// Return PaginatorSequence for operation.
    ///
    /// - Parameters:
    ///   - input: Input for request
    ///   - logger: Logger used flot logging
    public func listComponentOutputsPaginator(
        _ input: ListComponentOutputsInput,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<ListComponentOutputsInput, ListComponentOutputsOutput> {
        return .init(
            input: input,
            command: self.listComponentOutputs,
            inputKey: \ListComponentOutputsInput.nextToken,
            outputKey: \ListComponentOutputsOutput.nextToken,
            logger: logger
        )
    }

    /// List provisioned resources for a component with details. For more information about components, see Proton components in the Proton User Guide.
    /// Return PaginatorSequence for operation.
    ///
    /// - Parameters:
    ///   - input: Input for request
    ///   - logger: Logger used flot logging
    public func listComponentProvisionedResourcesPaginator(
        _ input: ListComponentProvisionedResourcesInput,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<ListComponentProvisionedResourcesInput, ListComponentProvisionedResourcesOutput> {
        return .init(
            input: input,
            command: self.listComponentProvisionedResources,
            inputKey: \ListComponentProvisionedResourcesInput.nextToken,
            outputKey: \ListComponentProvisionedResourcesOutput.nextToken,
            logger: logger
        )
    }

    /// List components with summary data. You can filter the result list by environment, service, or a single service instance. For more information about components, see Proton components in the Proton User Guide.
    /// Return PaginatorSequence for operation.
    ///
    /// - Parameters:
    ///   - input: Input for request
    ///   - logger: Logger used flot logging
    public func listComponentsPaginator(
        _ input: ListComponentsInput,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<ListComponentsInput, ListComponentsOutput> {
        return .init(
            input: input,
            command: self.listComponents,
            inputKey: \ListComponentsInput.nextToken,
            outputKey: \ListComponentsOutput.nextToken,
            logger: logger
        )
    }

    /// View a list of environment account connections. For more information, see Environment account connections in the Proton User guide.
    /// Return PaginatorSequence for operation.
    ///
    /// - Parameters:
    ///   - input: Input for request
    ///   - logger: Logger used flot logging
    public func listEnvironmentAccountConnectionsPaginator(
        _ input: ListEnvironmentAccountConnectionsInput,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<ListEnvironmentAccountConnectionsInput, ListEnvironmentAccountConnectionsOutput> {
        return .init(
            input: input,
            command: self.listEnvironmentAccountConnections,
            inputKey: \ListEnvironmentAccountConnectionsInput.nextToken,
            outputKey: \ListEnvironmentAccountConnectionsOutput.nextToken,
            logger: logger
        )
    }

    /// List the infrastructure as code outputs for your environment.
    /// Return PaginatorSequence for operation.
    ///
    /// - Parameters:
    ///   - input: Input for request
    ///   - logger: Logger used flot logging
    public func listEnvironmentOutputsPaginator(
        _ input: ListEnvironmentOutputsInput,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<ListEnvironmentOutputsInput, ListEnvironmentOutputsOutput> {
        return .init(
            input: input,
            command: self.listEnvironmentOutputs,
            inputKey: \ListEnvironmentOutputsInput.nextToken,
            outputKey: \ListEnvironmentOutputsOutput.nextToken,
            logger: logger
        )
    }

    /// List the provisioned resources for your environment.
    /// Return PaginatorSequence for operation.
    ///
    /// - Parameters:
    ///   - input: Input for request
    ///   - logger: Logger used flot logging
    public func listEnvironmentProvisionedResourcesPaginator(
        _ input: ListEnvironmentProvisionedResourcesInput,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<ListEnvironmentProvisionedResourcesInput, ListEnvironmentProvisionedResourcesOutput> {
        return .init(
            input: input,
            command: self.listEnvironmentProvisionedResources,
            inputKey: \ListEnvironmentProvisionedResourcesInput.nextToken,
            outputKey: \ListEnvironmentProvisionedResourcesOutput.nextToken,
            logger: logger
        )
    }

    /// List major or minor versions of an environment template with detail data.
    /// Return PaginatorSequence for operation.
    ///
    /// - Parameters:
    ///   - input: Input for request
    ///   - logger: Logger used flot logging
    public func listEnvironmentTemplateVersionsPaginator(
        _ input: ListEnvironmentTemplateVersionsInput,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<ListEnvironmentTemplateVersionsInput, ListEnvironmentTemplateVersionsOutput> {
        return .init(
            input: input,
            command: self.listEnvironmentTemplateVersions,
            inputKey: \ListEnvironmentTemplateVersionsInput.nextToken,
            outputKey: \ListEnvironmentTemplateVersionsOutput.nextToken,
            logger: logger
        )
    }

    /// List environment templates.
    /// Return PaginatorSequence for operation.
    ///
    /// - Parameters:
    ///   - input: Input for request
    ///   - logger: Logger used flot logging
    public func listEnvironmentTemplatesPaginator(
        _ input: ListEnvironmentTemplatesInput,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<ListEnvironmentTemplatesInput, ListEnvironmentTemplatesOutput> {
        return .init(
            input: input,
            command: self.listEnvironmentTemplates,
            inputKey: \ListEnvironmentTemplatesInput.nextToken,
            outputKey: \ListEnvironmentTemplatesOutput.nextToken,
            logger: logger
        )
    }

    /// List environments with detail data summaries.
    /// Return PaginatorSequence for operation.
    ///
    /// - Parameters:
    ///   - input: Input for request
    ///   - logger: Logger used flot logging
    public func listEnvironmentsPaginator(
        _ input: ListEnvironmentsInput,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<ListEnvironmentsInput, ListEnvironmentsOutput> {
        return .init(
            input: input,
            command: self.listEnvironments,
            inputKey: \ListEnvironmentsInput.nextToken,
            outputKey: \ListEnvironmentsOutput.nextToken,
            logger: logger
        )
    }

    /// List linked repositories with detail data.
    /// Return PaginatorSequence for operation.
    ///
    /// - Parameters:
    ///   - input: Input for request
    ///   - logger: Logger used flot logging
    public func listRepositoriesPaginator(
        _ input: ListRepositoriesInput,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<ListRepositoriesInput, ListRepositoriesOutput> {
        return .init(
            input: input,
            command: self.listRepositories,
            inputKey: \ListRepositoriesInput.nextToken,
            outputKey: \ListRepositoriesOutput.nextToken,
            logger: logger
        )
    }

    /// List repository sync definitions with detail data.
    /// Return PaginatorSequence for operation.
    ///
    /// - Parameters:
    ///   - input: Input for request
    ///   - logger: Logger used flot logging
    public func listRepositorySyncDefinitionsPaginator(
        _ input: ListRepositorySyncDefinitionsInput,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<ListRepositorySyncDefinitionsInput, ListRepositorySyncDefinitionsOutput> {
        return .init(
            input: input,
            command: self.listRepositorySyncDefinitions,
            inputKey: \ListRepositorySyncDefinitionsInput.nextToken,
            outputKey: \ListRepositorySyncDefinitionsOutput.nextToken,
            logger: logger
        )
    }

    /// Get a list service of instance Infrastructure as Code (IaC) outputs.
    /// Return PaginatorSequence for operation.
    ///
    /// - Parameters:
    ///   - input: Input for request
    ///   - logger: Logger used flot logging
    public func listServiceInstanceOutputsPaginator(
        _ input: ListServiceInstanceOutputsInput,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<ListServiceInstanceOutputsInput, ListServiceInstanceOutputsOutput> {
        return .init(
            input: input,
            command: self.listServiceInstanceOutputs,
            inputKey: \ListServiceInstanceOutputsInput.nextToken,
            outputKey: \ListServiceInstanceOutputsOutput.nextToken,
            logger: logger
        )
    }

    /// List provisioned resources for a service instance with details.
    /// Return PaginatorSequence for operation.
    ///
    /// - Parameters:
    ///   - input: Input for request
    ///   - logger: Logger used flot logging
    public func listServiceInstanceProvisionedResourcesPaginator(
        _ input: ListServiceInstanceProvisionedResourcesInput,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<ListServiceInstanceProvisionedResourcesInput, ListServiceInstanceProvisionedResourcesOutput> {
        return .init(
            input: input,
            command: self.listServiceInstanceProvisionedResources,
            inputKey: \ListServiceInstanceProvisionedResourcesInput.nextToken,
            outputKey: \ListServiceInstanceProvisionedResourcesOutput.nextToken,
            logger: logger
        )
    }

    /// List service instances with summary data. This action lists service instances of all services in the Amazon Web Services account.
    /// Return PaginatorSequence for operation.
    ///
    /// - Parameters:
    ///   - input: Input for request
    ///   - logger: Logger used flot logging
    public func listServiceInstancesPaginator(
        _ input: ListServiceInstancesInput,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<ListServiceInstancesInput, ListServiceInstancesOutput> {
        return .init(
            input: input,
            command: self.listServiceInstances,
            inputKey: \ListServiceInstancesInput.nextToken,
            outputKey: \ListServiceInstancesOutput.nextToken,
            logger: logger
        )
    }

    /// Get a list of service pipeline Infrastructure as Code (IaC) outputs.
    /// Return PaginatorSequence for operation.
    ///
    /// - Parameters:
    ///   - input: Input for request
    ///   - logger: Logger used flot logging
    public func listServicePipelineOutputsPaginator(
        _ input: ListServicePipelineOutputsInput,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<ListServicePipelineOutputsInput, ListServicePipelineOutputsOutput> {
        return .init(
            input: input,
            command: self.listServicePipelineOutputs,
            inputKey: \ListServicePipelineOutputsInput.nextToken,
            outputKey: \ListServicePipelineOutputsOutput.nextToken,
            logger: logger
        )
    }

    /// List provisioned resources for a service and pipeline with details.
    /// Return PaginatorSequence for operation.
    ///
    /// - Parameters:
    ///   - input: Input for request
    ///   - logger: Logger used flot logging
    public func listServicePipelineProvisionedResourcesPaginator(
        _ input: ListServicePipelineProvisionedResourcesInput,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<ListServicePipelineProvisionedResourcesInput, ListServicePipelineProvisionedResourcesOutput> {
        return .init(
            input: input,
            command: self.listServicePipelineProvisionedResources,
            inputKey: \ListServicePipelineProvisionedResourcesInput.nextToken,
            outputKey: \ListServicePipelineProvisionedResourcesOutput.nextToken,
            logger: logger
        )
    }

    /// List major or minor versions of a service template with detail data.
    /// Return PaginatorSequence for operation.
    ///
    /// - Parameters:
    ///   - input: Input for request
    ///   - logger: Logger used flot logging
    public func listServiceTemplateVersionsPaginator(
        _ input: ListServiceTemplateVersionsInput,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<ListServiceTemplateVersionsInput, ListServiceTemplateVersionsOutput> {
        return .init(
            input: input,
            command: self.listServiceTemplateVersions,
            inputKey: \ListServiceTemplateVersionsInput.nextToken,
            outputKey: \ListServiceTemplateVersionsOutput.nextToken,
            logger: logger
        )
    }

    /// List service templates with detail data.
    /// Return PaginatorSequence for operation.
    ///
    /// - Parameters:
    ///   - input: Input for request
    ///   - logger: Logger used flot logging
    public func listServiceTemplatesPaginator(
        _ input: ListServiceTemplatesInput,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<ListServiceTemplatesInput, ListServiceTemplatesOutput> {
        return .init(
            input: input,
            command: self.listServiceTemplates,
            inputKey: \ListServiceTemplatesInput.nextToken,
            outputKey: \ListServiceTemplatesOutput.nextToken,
            logger: logger
        )
    }

    /// List services with summaries of detail data.
    /// Return PaginatorSequence for operation.
    ///
    /// - Parameters:
    ///   - input: Input for request
    ///   - logger: Logger used flot logging
    public func listServicesPaginator(
        _ input: ListServicesInput,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<ListServicesInput, ListServicesOutput> {
        return .init(
            input: input,
            command: self.listServices,
            inputKey: \ListServicesInput.nextToken,
            outputKey: \ListServicesOutput.nextToken,
            logger: logger
        )
    }

    /// List tags for a resource. For more information, see Proton resources and tagging in the Proton User Guide.
    /// Return PaginatorSequence for operation.
    ///
    /// - Parameters:
    ///   - input: Input for request
    ///   - logger: Logger used flot logging
    public func listTagsForResourcePaginator(
        _ input: ListTagsForResourceInput,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<ListTagsForResourceInput, ListTagsForResourceOutput> {
        return .init(
            input: input,
            command: self.listTagsForResource,
            inputKey: \ListTagsForResourceInput.nextToken,
            outputKey: \ListTagsForResourceOutput.nextToken,
            logger: logger
        )
    }
}

extension Proton.ListComponentOutputsInput: AWSPaginateToken {
    public func usingPaginationToken(_ token: String) -> Proton.ListComponentOutputsInput {
        return .init(
            componentName: self.componentName,
            nextToken: token
        )
    }
}

extension Proton.ListComponentProvisionedResourcesInput: AWSPaginateToken {
    public func usingPaginationToken(_ token: String) -> Proton.ListComponentProvisionedResourcesInput {
        return .init(
            componentName: self.componentName,
            nextToken: token
        )
    }
}

extension Proton.ListComponentsInput: AWSPaginateToken {
    public func usingPaginationToken(_ token: String) -> Proton.ListComponentsInput {
        return .init(
            environmentName: self.environmentName,
            maxResults: self.maxResults,
            nextToken: token,
            serviceInstanceName: self.serviceInstanceName,
            serviceName: self.serviceName
        )
    }
}

extension Proton.ListEnvironmentAccountConnectionsInput: AWSPaginateToken {
    public func usingPaginationToken(_ token: String) -> Proton.ListEnvironmentAccountConnectionsInput {
        return .init(
            environmentName: self.environmentName,
            maxResults: self.maxResults,
            nextToken: token,
            requestedBy: self.requestedBy,
            statuses: self.statuses
        )
    }
}

extension Proton.ListEnvironmentOutputsInput: AWSPaginateToken {
    public func usingPaginationToken(_ token: String) -> Proton.ListEnvironmentOutputsInput {
        return .init(
            environmentName: self.environmentName,
            nextToken: token
        )
    }
}

extension Proton.ListEnvironmentProvisionedResourcesInput: AWSPaginateToken {
    public func usingPaginationToken(_ token: String) -> Proton.ListEnvironmentProvisionedResourcesInput {
        return .init(
            environmentName: self.environmentName,
            nextToken: token
        )
    }
}

extension Proton.ListEnvironmentTemplateVersionsInput: AWSPaginateToken {
    public func usingPaginationToken(_ token: String) -> Proton.ListEnvironmentTemplateVersionsInput {
        return .init(
            majorVersion: self.majorVersion,
            maxResults: self.maxResults,
            nextToken: token,
            templateName: self.templateName
        )
    }
}

extension Proton.ListEnvironmentTemplatesInput: AWSPaginateToken {
    public func usingPaginationToken(_ token: String) -> Proton.ListEnvironmentTemplatesInput {
        return .init(
            maxResults: self.maxResults,
            nextToken: token
        )
    }
}

extension Proton.ListEnvironmentsInput: AWSPaginateToken {
    public func usingPaginationToken(_ token: String) -> Proton.ListEnvironmentsInput {
        return .init(
            environmentTemplates: self.environmentTemplates,
            maxResults: self.maxResults,
            nextToken: token
        )
    }
}

extension Proton.ListRepositoriesInput: AWSPaginateToken {
    public func usingPaginationToken(_ token: String) -> Proton.ListRepositoriesInput {
        return .init(
            maxResults: self.maxResults,
            nextToken: token
        )
    }
}

extension Proton.ListRepositorySyncDefinitionsInput: AWSPaginateToken {
    public func usingPaginationToken(_ token: String) -> Proton.ListRepositorySyncDefinitionsInput {
        return .init(
            nextToken: token,
            repositoryName: self.repositoryName,
            repositoryProvider: self.repositoryProvider,
            syncType: self.syncType
        )
    }
}

extension Proton.ListServiceInstanceOutputsInput: AWSPaginateToken {
    public func usingPaginationToken(_ token: String) -> Proton.ListServiceInstanceOutputsInput {
        return .init(
            nextToken: token,
            serviceInstanceName: self.serviceInstanceName,
            serviceName: self.serviceName
        )
    }
}

extension Proton.ListServiceInstanceProvisionedResourcesInput: AWSPaginateToken {
    public func usingPaginationToken(_ token: String) -> Proton.ListServiceInstanceProvisionedResourcesInput {
        return .init(
            nextToken: token,
            serviceInstanceName: self.serviceInstanceName,
            serviceName: self.serviceName
        )
    }
}

extension Proton.ListServiceInstancesInput: AWSPaginateToken {
    public func usingPaginationToken(_ token: String) -> Proton.ListServiceInstancesInput {
        return .init(
            filters: self.filters,
            maxResults: self.maxResults,
            nextToken: token,
            serviceName: self.serviceName,
            sortBy: self.sortBy,
            sortOrder: self.sortOrder
        )
    }
}

extension Proton.ListServicePipelineOutputsInput: AWSPaginateToken {
    public func usingPaginationToken(_ token: String) -> Proton.ListServicePipelineOutputsInput {
        return .init(
            nextToken: token,
            serviceName: self.serviceName
        )
    }
}

extension Proton.ListServicePipelineProvisionedResourcesInput: AWSPaginateToken {
    public func usingPaginationToken(_ token: String) -> Proton.ListServicePipelineProvisionedResourcesInput {
        return .init(
            nextToken: token,
            serviceName: self.serviceName
        )
    }
}

extension Proton.ListServiceTemplateVersionsInput: AWSPaginateToken {
    public func usingPaginationToken(_ token: String) -> Proton.ListServiceTemplateVersionsInput {
        return .init(
            majorVersion: self.majorVersion,
            maxResults: self.maxResults,
            nextToken: token,
            templateName: self.templateName
        )
    }
}

extension Proton.ListServiceTemplatesInput: AWSPaginateToken {
    public func usingPaginationToken(_ token: String) -> Proton.ListServiceTemplatesInput {
        return .init(
            maxResults: self.maxResults,
            nextToken: token
        )
    }
}

extension Proton.ListServicesInput: AWSPaginateToken {
    public func usingPaginationToken(_ token: String) -> Proton.ListServicesInput {
        return .init(
            maxResults: self.maxResults,
            nextToken: token
        )
    }
}

extension Proton.ListTagsForResourceInput: AWSPaginateToken {
    public func usingPaginationToken(_ token: String) -> Proton.ListTagsForResourceInput {
        return .init(
            maxResults: self.maxResults,
            nextToken: token,
            resourceArn: self.resourceArn
        )
    }
}

// MARK: Waiters

@available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
extension Proton {
    public func waitUntilComponentDeleted(
        _ input: GetComponentInput,
        maxWaitTime: TimeAmount? = nil,
        logger: Logger = AWSClient.loggingDisabled
    ) async throws {
        let waiter = AWSClient.Waiter(
            acceptors: [
                .init(state: .success, matcher: AWSErrorCodeMatcher("ResourceNotFoundException")),
                .init(state: .failure, matcher: try! JMESPathMatcher("component.deploymentStatus", expected: "DELETE_FAILED")),
            ],
            minDelayTime: .seconds(5),
            maxDelayTime: .seconds(4999),
            command: self.getComponent
        )
        return try await self.client.waitUntil(input, waiter: waiter, maxWaitTime: maxWaitTime, logger: logger)
    }

    public func waitUntilComponentDeployed(
        _ input: GetComponentInput,
        maxWaitTime: TimeAmount? = nil,
        logger: Logger = AWSClient.loggingDisabled
    ) async throws {
        let waiter = AWSClient.Waiter(
            acceptors: [
                .init(state: .success, matcher: try! JMESPathMatcher("component.deploymentStatus", expected: "SUCCEEDED")),
                .init(state: .failure, matcher: try! JMESPathMatcher("component.deploymentStatus", expected: "FAILED")),
            ],
            minDelayTime: .seconds(5),
            maxDelayTime: .seconds(4999),
            command: self.getComponent
        )
        return try await self.client.waitUntil(input, waiter: waiter, maxWaitTime: maxWaitTime, logger: logger)
    }

    public func waitUntilEnvironmentDeployed(
        _ input: GetEnvironmentInput,
        maxWaitTime: TimeAmount? = nil,
        logger: Logger = AWSClient.loggingDisabled
    ) async throws {
        let waiter = AWSClient.Waiter(
            acceptors: [
                .init(state: .success, matcher: try! JMESPathMatcher("environment.deploymentStatus", expected: "SUCCEEDED")),
                .init(state: .failure, matcher: try! JMESPathMatcher("environment.deploymentStatus", expected: "FAILED")),
            ],
            minDelayTime: .seconds(5),
            maxDelayTime: .seconds(4999),
            command: self.getEnvironment
        )
        return try await self.client.waitUntil(input, waiter: waiter, maxWaitTime: maxWaitTime, logger: logger)
    }

    public func waitUntilEnvironmentTemplateVersionRegistered(
        _ input: GetEnvironmentTemplateVersionInput,
        maxWaitTime: TimeAmount? = nil,
        logger: Logger = AWSClient.loggingDisabled
    ) async throws {
        let waiter = AWSClient.Waiter(
            acceptors: [
                .init(state: .success, matcher: try! JMESPathMatcher("environmentTemplateVersion.status", expected: "DRAFT")),
                .init(state: .success, matcher: try! JMESPathMatcher("environmentTemplateVersion.status", expected: "PUBLISHED")),
                .init(state: .failure, matcher: try! JMESPathMatcher("environmentTemplateVersion.status", expected: "REGISTRATION_FAILED")),
            ],
            minDelayTime: .seconds(2),
            maxDelayTime: .seconds(300),
            command: self.getEnvironmentTemplateVersion
        )
        return try await self.client.waitUntil(input, waiter: waiter, maxWaitTime: maxWaitTime, logger: logger)
    }

    public func waitUntilServiceCreated(
        _ input: GetServiceInput,
        maxWaitTime: TimeAmount? = nil,
        logger: Logger = AWSClient.loggingDisabled
    ) async throws {
        let waiter = AWSClient.Waiter(
            acceptors: [
                .init(state: .success, matcher: try! JMESPathMatcher("service.status", expected: "ACTIVE")),
                .init(state: .failure, matcher: try! JMESPathMatcher("service.status", expected: "CREATE_FAILED_CLEANUP_COMPLETE")),
                .init(state: .failure, matcher: try! JMESPathMatcher("service.status", expected: "CREATE_FAILED_CLEANUP_FAILED")),
                .init(state: .failure, matcher: try! JMESPathMatcher("service.status", expected: "CREATE_FAILED")),
            ],
            minDelayTime: .seconds(5),
            maxDelayTime: .seconds(4999),
            command: self.getService
        )
        return try await self.client.waitUntil(input, waiter: waiter, maxWaitTime: maxWaitTime, logger: logger)
    }

    public func waitUntilServiceDeleted(
        _ input: GetServiceInput,
        maxWaitTime: TimeAmount? = nil,
        logger: Logger = AWSClient.loggingDisabled
    ) async throws {
        let waiter = AWSClient.Waiter(
            acceptors: [
                .init(state: .success, matcher: AWSErrorCodeMatcher("ResourceNotFoundException")),
                .init(state: .failure, matcher: try! JMESPathMatcher("service.status", expected: "DELETE_FAILED")),
            ],
            minDelayTime: .seconds(5),
            maxDelayTime: .seconds(4999),
            command: self.getService
        )
        return try await self.client.waitUntil(input, waiter: waiter, maxWaitTime: maxWaitTime, logger: logger)
    }

    public func waitUntilServiceInstanceDeployed(
        _ input: GetServiceInstanceInput,
        maxWaitTime: TimeAmount? = nil,
        logger: Logger = AWSClient.loggingDisabled
    ) async throws {
        let waiter = AWSClient.Waiter(
            acceptors: [
                .init(state: .success, matcher: try! JMESPathMatcher("serviceInstance.deploymentStatus", expected: "SUCCEEDED")),
                .init(state: .failure, matcher: try! JMESPathMatcher("serviceInstance.deploymentStatus", expected: "FAILED")),
            ],
            minDelayTime: .seconds(5),
            maxDelayTime: .seconds(4999),
            command: self.getServiceInstance
        )
        return try await self.client.waitUntil(input, waiter: waiter, maxWaitTime: maxWaitTime, logger: logger)
    }

    public func waitUntilServicePipelineDeployed(
        _ input: GetServiceInput,
        maxWaitTime: TimeAmount? = nil,
        logger: Logger = AWSClient.loggingDisabled
    ) async throws {
        let waiter = AWSClient.Waiter(
            acceptors: [
                .init(state: .success, matcher: try! JMESPathMatcher("service.pipeline.deploymentStatus", expected: "SUCCEEDED")),
                .init(state: .failure, matcher: try! JMESPathMatcher("service.pipeline.deploymentStatus", expected: "FAILED")),
            ],
            minDelayTime: .seconds(10),
            maxDelayTime: .seconds(3600),
            command: self.getService
        )
        return try await self.client.waitUntil(input, waiter: waiter, maxWaitTime: maxWaitTime, logger: logger)
    }

    public func waitUntilServiceTemplateVersionRegistered(
        _ input: GetServiceTemplateVersionInput,
        maxWaitTime: TimeAmount? = nil,
        logger: Logger = AWSClient.loggingDisabled
    ) async throws {
        let waiter = AWSClient.Waiter(
            acceptors: [
                .init(state: .success, matcher: try! JMESPathMatcher("serviceTemplateVersion.status", expected: "DRAFT")),
                .init(state: .success, matcher: try! JMESPathMatcher("serviceTemplateVersion.status", expected: "PUBLISHED")),
                .init(state: .failure, matcher: try! JMESPathMatcher("serviceTemplateVersion.status", expected: "REGISTRATION_FAILED")),
            ],
            minDelayTime: .seconds(2),
            maxDelayTime: .seconds(300),
            command: self.getServiceTemplateVersion
        )
        return try await self.client.waitUntil(input, waiter: waiter, maxWaitTime: maxWaitTime, logger: logger)
    }

    public func waitUntilServiceUpdated(
        _ input: GetServiceInput,
        maxWaitTime: TimeAmount? = nil,
        logger: Logger = AWSClient.loggingDisabled
    ) async throws {
        let waiter = AWSClient.Waiter(
            acceptors: [
                .init(state: .success, matcher: try! JMESPathMatcher("service.status", expected: "ACTIVE")),
                .init(state: .failure, matcher: try! JMESPathMatcher("service.status", expected: "UPDATE_FAILED_CLEANUP_COMPLETE")),
                .init(state: .failure, matcher: try! JMESPathMatcher("service.status", expected: "UPDATE_FAILED_CLEANUP_FAILED")),
                .init(state: .failure, matcher: try! JMESPathMatcher("service.status", expected: "UPDATE_FAILED")),
                .init(state: .failure, matcher: try! JMESPathMatcher("service.status", expected: "UPDATE_COMPLETE_CLEANUP_FAILED")),
            ],
            minDelayTime: .seconds(5),
            maxDelayTime: .seconds(4999),
            command: self.getService
        )
        return try await self.client.waitUntil(input, waiter: waiter, maxWaitTime: maxWaitTime, logger: logger)
    }
}
