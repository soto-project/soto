//===----------------------------------------------------------------------===//
//
// This source file is part of the Soto for AWS open source project
//
// Copyright (c) 2017-2021 the Soto project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
// See CONTRIBUTORS.txt for the list of Soto project authors
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by https://github.com/soto-project/soto-codegenerator.
// DO NOT EDIT.

#if compiler(>=5.6)
@preconcurrency import Foundation
#else
import Foundation
#endif
import SotoCore

extension Proton {
    // MARK: Enums

    public enum DeploymentStatus: String, CustomStringConvertible, Codable, _SotoSendable {
        case cancelled = "CANCELLED"
        case cancelling = "CANCELLING"
        case deleteComplete = "DELETE_COMPLETE"
        case deleteFailed = "DELETE_FAILED"
        case deleteInProgress = "DELETE_IN_PROGRESS"
        case failed = "FAILED"
        case inProgress = "IN_PROGRESS"
        case succeeded = "SUCCEEDED"
        public var description: String { return self.rawValue }
    }

    public enum DeploymentUpdateType: String, CustomStringConvertible, Codable, _SotoSendable {
        case currentVersion = "CURRENT_VERSION"
        case majorVersion = "MAJOR_VERSION"
        case minorVersion = "MINOR_VERSION"
        case none = "NONE"
        public var description: String { return self.rawValue }
    }

    public enum EnvironmentAccountConnectionRequesterAccountType: String, CustomStringConvertible, Codable, _SotoSendable {
        case environmentAccount = "ENVIRONMENT_ACCOUNT"
        case managementAccount = "MANAGEMENT_ACCOUNT"
        public var description: String { return self.rawValue }
    }

    public enum EnvironmentAccountConnectionStatus: String, CustomStringConvertible, Codable, _SotoSendable {
        case connected = "CONNECTED"
        case pending = "PENDING"
        case rejected = "REJECTED"
        public var description: String { return self.rawValue }
    }

    public enum ProvisionedResourceEngine: String, CustomStringConvertible, Codable, _SotoSendable {
        case cloudformation = "CLOUDFORMATION"
        case terraform = "TERRAFORM"
        public var description: String { return self.rawValue }
    }

    public enum Provisioning: String, CustomStringConvertible, Codable, _SotoSendable {
        case customerManaged = "CUSTOMER_MANAGED"
        public var description: String { return self.rawValue }
    }

    public enum RepositoryProvider: String, CustomStringConvertible, Codable, _SotoSendable {
        case bitbucket = "BITBUCKET"
        case github = "GITHUB"
        case githubEnterprise = "GITHUB_ENTERPRISE"
        public var description: String { return self.rawValue }
    }

    public enum RepositorySyncStatus: String, CustomStringConvertible, Codable, _SotoSendable {
        ///     The repository sync attempt has failed.
        case failed = "FAILED"
        ///    A repository sync attempt has been created and will begin soon.
        case initiated = "INITIATED"
        ///     A repository sync attempt has started and work is being done to reconcile the branch.
        case inProgress = "IN_PROGRESS"
        ///     The repository sync attempt didn't execute and was queued.
        case queued = "QUEUED"
        ///     The repository sync attempt has completed successfully.
        case succeeded = "SUCCEEDED"
        public var description: String { return self.rawValue }
    }

    public enum ResourceDeploymentStatus: String, CustomStringConvertible, Codable, _SotoSendable {
        case failed = "FAILED"
        case inProgress = "IN_PROGRESS"
        case succeeded = "SUCCEEDED"
        public var description: String { return self.rawValue }
    }

    public enum ResourceSyncStatus: String, CustomStringConvertible, Codable, _SotoSendable {
        ///     Syncing has failed.
        case failed = "FAILED"
        ///    A sync attempt has been created and will begin soon.
        case initiated = "INITIATED"
        ///     Syncing has started and work is being done to reconcile state.
        case inProgress = "IN_PROGRESS"
        ///     Syncing has completed successfully.
        case succeeded = "SUCCEEDED"
        public var description: String { return self.rawValue }
    }

    public enum ServiceStatus: String, CustomStringConvertible, Codable, _SotoSendable {
        case active = "ACTIVE"
        case createFailed = "CREATE_FAILED"
        case createFailedCleanupComplete = "CREATE_FAILED_CLEANUP_COMPLETE"
        case createFailedCleanupFailed = "CREATE_FAILED_CLEANUP_FAILED"
        case createFailedCleanupInProgress = "CREATE_FAILED_CLEANUP_IN_PROGRESS"
        case createInProgress = "CREATE_IN_PROGRESS"
        case deleteFailed = "DELETE_FAILED"
        case deleteInProgress = "DELETE_IN_PROGRESS"
        case updateCompleteCleanupFailed = "UPDATE_COMPLETE_CLEANUP_FAILED"
        case updateFailed = "UPDATE_FAILED"
        case updateFailedCleanupComplete = "UPDATE_FAILED_CLEANUP_COMPLETE"
        case updateFailedCleanupFailed = "UPDATE_FAILED_CLEANUP_FAILED"
        case updateFailedCleanupInProgress = "UPDATE_FAILED_CLEANUP_IN_PROGRESS"
        case updateInProgress = "UPDATE_IN_PROGRESS"
        public var description: String { return self.rawValue }
    }

    public enum SyncType: String, CustomStringConvertible, Codable, _SotoSendable {
        case templateSync = "TEMPLATE_SYNC"
        public var description: String { return self.rawValue }
    }

    public enum TemplateType: String, CustomStringConvertible, Codable, _SotoSendable {
        case environment = "ENVIRONMENT"
        case service = "SERVICE"
        public var description: String { return self.rawValue }
    }

    public enum TemplateVersionStatus: String, CustomStringConvertible, Codable, _SotoSendable {
        case draft = "DRAFT"
        case published = "PUBLISHED"
        case registrationFailed = "REGISTRATION_FAILED"
        case registrationInProgress = "REGISTRATION_IN_PROGRESS"
        public var description: String { return self.rawValue }
    }

    // MARK: Shapes

    public struct AcceptEnvironmentAccountConnectionInput: AWSEncodableShape {
        /// The ID of the environment account connection.
        public let id: String

        public init(id: String) {
            self.id = id
        }

        public func validate(name: String) throws {
            try self.validate(self.id, name: "id", parent: name, pattern: "^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$")
        }

        private enum CodingKeys: String, CodingKey {
            case id
        }
    }

    public struct AcceptEnvironmentAccountConnectionOutput: AWSDecodableShape {
        /// The environment account connection data that's returned by Proton.
        public let environmentAccountConnection: EnvironmentAccountConnection

        public init(environmentAccountConnection: EnvironmentAccountConnection) {
            self.environmentAccountConnection = environmentAccountConnection
        }

        private enum CodingKeys: String, CodingKey {
            case environmentAccountConnection
        }
    }

    public struct AccountSettings: AWSDecodableShape {
        /// The repository configured in the Amazon Web Services account for pipeline provisioning. Required it if you have environments configured for self-managed provisioning with services that include pipelines.
        public let pipelineProvisioningRepository: RepositoryBranch?
        /// The Amazon Resource Name (ARN) of the service role you want to use for provisioning pipelines. Assumed by Proton for Amazon Web Services-managed provisioning, and by customer-owned automation for self-managed provisioning.
        public let pipelineServiceRoleArn: String?

        public init(pipelineProvisioningRepository: RepositoryBranch? = nil, pipelineServiceRoleArn: String? = nil) {
            self.pipelineProvisioningRepository = pipelineProvisioningRepository
            self.pipelineServiceRoleArn = pipelineServiceRoleArn
        }

        private enum CodingKeys: String, CodingKey {
            case pipelineProvisioningRepository
            case pipelineServiceRoleArn
        }
    }

    public struct CancelEnvironmentDeploymentInput: AWSEncodableShape {
        /// The name of the environment with the deployment to cancel.
        public let environmentName: String

        public init(environmentName: String) {
            self.environmentName = environmentName
        }

        public func validate(name: String) throws {
            try self.validate(self.environmentName, name: "environmentName", parent: name, max: 100)
            try self.validate(self.environmentName, name: "environmentName", parent: name, min: 1)
            try self.validate(self.environmentName, name: "environmentName", parent: name, pattern: "^[0-9A-Za-z]+[0-9A-Za-z_\\-]*$")
        }

        private enum CodingKeys: String, CodingKey {
            case environmentName
        }
    }

    public struct CancelEnvironmentDeploymentOutput: AWSDecodableShape {
        /// The environment summary data that's returned by Proton.
        public let environment: Environment

        public init(environment: Environment) {
            self.environment = environment
        }

        private enum CodingKeys: String, CodingKey {
            case environment
        }
    }

    public struct CancelServiceInstanceDeploymentInput: AWSEncodableShape {
        /// The name of the service instance with the deployment to cancel.
        public let serviceInstanceName: String
        /// The name of the service with the service instance deployment to cancel.
        public let serviceName: String

        public init(serviceInstanceName: String, serviceName: String) {
            self.serviceInstanceName = serviceInstanceName
            self.serviceName = serviceName
        }

        public func validate(name: String) throws {
            try self.validate(self.serviceInstanceName, name: "serviceInstanceName", parent: name, max: 100)
            try self.validate(self.serviceInstanceName, name: "serviceInstanceName", parent: name, min: 1)
            try self.validate(self.serviceInstanceName, name: "serviceInstanceName", parent: name, pattern: "^[0-9A-Za-z]+[0-9A-Za-z_\\-]*$")
            try self.validate(self.serviceName, name: "serviceName", parent: name, max: 100)
            try self.validate(self.serviceName, name: "serviceName", parent: name, min: 1)
            try self.validate(self.serviceName, name: "serviceName", parent: name, pattern: "^[0-9A-Za-z]+[0-9A-Za-z_\\-]*$")
        }

        private enum CodingKeys: String, CodingKey {
            case serviceInstanceName
            case serviceName
        }
    }

    public struct CancelServiceInstanceDeploymentOutput: AWSDecodableShape {
        /// The service instance summary data that's returned by Proton.
        public let serviceInstance: ServiceInstance

        public init(serviceInstance: ServiceInstance) {
            self.serviceInstance = serviceInstance
        }

        private enum CodingKeys: String, CodingKey {
            case serviceInstance
        }
    }

    public struct CancelServicePipelineDeploymentInput: AWSEncodableShape {
        /// The name of the service with the service pipeline deployment to cancel.
        public let serviceName: String

        public init(serviceName: String) {
            self.serviceName = serviceName
        }

        public func validate(name: String) throws {
            try self.validate(self.serviceName, name: "serviceName", parent: name, max: 100)
            try self.validate(self.serviceName, name: "serviceName", parent: name, min: 1)
            try self.validate(self.serviceName, name: "serviceName", parent: name, pattern: "^[0-9A-Za-z]+[0-9A-Za-z_\\-]*$")
        }

        private enum CodingKeys: String, CodingKey {
            case serviceName
        }
    }

    public struct CancelServicePipelineDeploymentOutput: AWSDecodableShape {
        /// The service pipeline detail data that's returned by Proton.
        public let pipeline: ServicePipeline

        public init(pipeline: ServicePipeline) {
            self.pipeline = pipeline
        }

        private enum CodingKeys: String, CodingKey {
            case pipeline
        }
    }

    public struct CompatibleEnvironmentTemplate: AWSDecodableShape {
        /// The major version of the compatible environment template.
        public let majorVersion: String
        /// The compatible environment template name.
        public let templateName: String

        public init(majorVersion: String, templateName: String) {
            self.majorVersion = majorVersion
            self.templateName = templateName
        }

        private enum CodingKeys: String, CodingKey {
            case majorVersion
            case templateName
        }
    }

    public struct CompatibleEnvironmentTemplateInput: AWSEncodableShape {
        /// The major version of the compatible environment template.
        public let majorVersion: String
        /// The compatible environment template name.
        public let templateName: String

        public init(majorVersion: String, templateName: String) {
            self.majorVersion = majorVersion
            self.templateName = templateName
        }

        public func validate(name: String) throws {
            try self.validate(self.majorVersion, name: "majorVersion", parent: name, max: 20)
            try self.validate(self.majorVersion, name: "majorVersion", parent: name, min: 1)
            try self.validate(self.majorVersion, name: "majorVersion", parent: name, pattern: "^(0|([1-9]{1}\\d*))$")
            try self.validate(self.templateName, name: "templateName", parent: name, max: 100)
            try self.validate(self.templateName, name: "templateName", parent: name, min: 1)
            try self.validate(self.templateName, name: "templateName", parent: name, pattern: "^[0-9A-Za-z]+[0-9A-Za-z_\\-]*$")
        }

        private enum CodingKeys: String, CodingKey {
            case majorVersion
            case templateName
        }
    }

    public struct CreateEnvironmentAccountConnectionInput: AWSEncodableShape {
        /// When included, if two identical requests are made with the same client token, Proton returns the environment account connection that the first request created.
        public let clientToken: String?
        /// The name of the Proton environment that's created in the associated management account.
        public let environmentName: String
        /// The ID of the management account that accepts or rejects the environment account connection. You create and manage the Proton environment in this account. If the management account accepts the environment account connection, Proton can use the associated IAM role to provision environment infrastructure resources in the associated environment account.
        public let managementAccountId: String
        /// The Amazon Resource Name (ARN) of the IAM service role that's created in the environment account. Proton uses this role to provision infrastructure resources in the associated environment account.
        public let roleArn: String
        /// An optional list of metadata items that you can associate with the Proton environment account connection. A tag is a key-value pair. For more information, see Proton resources and tagging in the Proton Administrator Guide.
        public let tags: [Tag]?

        public init(clientToken: String? = CreateEnvironmentAccountConnectionInput.idempotencyToken(), environmentName: String, managementAccountId: String, roleArn: String, tags: [Tag]? = nil) {
            self.clientToken = clientToken
            self.environmentName = environmentName
            self.managementAccountId = managementAccountId
            self.roleArn = roleArn
            self.tags = tags
        }

        public func validate(name: String) throws {
            try self.validate(self.clientToken, name: "clientToken", parent: name, max: 64)
            try self.validate(self.clientToken, name: "clientToken", parent: name, pattern: "^[!-~]*$")
            try self.validate(self.environmentName, name: "environmentName", parent: name, max: 100)
            try self.validate(self.environmentName, name: "environmentName", parent: name, min: 1)
            try self.validate(self.environmentName, name: "environmentName", parent: name, pattern: "^[0-9A-Za-z]+[0-9A-Za-z_\\-]*$")
            try self.validate(self.managementAccountId, name: "managementAccountId", parent: name, pattern: "^\\d{12}$")
            try self.validate(self.roleArn, name: "roleArn", parent: name, max: 200)
            try self.validate(self.roleArn, name: "roleArn", parent: name, min: 1)
            try self.tags?.forEach {
                try $0.validate(name: "\(name).tags[]")
            }
            try self.validate(self.tags, name: "tags", parent: name, max: 50)
        }

        private enum CodingKeys: String, CodingKey {
            case clientToken
            case environmentName
            case managementAccountId
            case roleArn
            case tags
        }
    }

    public struct CreateEnvironmentAccountConnectionOutput: AWSDecodableShape {
        /// The environment account connection detail data that's returned by Proton.
        public let environmentAccountConnection: EnvironmentAccountConnection

        public init(environmentAccountConnection: EnvironmentAccountConnection) {
            self.environmentAccountConnection = environmentAccountConnection
        }

        private enum CodingKeys: String, CodingKey {
            case environmentAccountConnection
        }
    }

    public struct CreateEnvironmentInput: AWSEncodableShape {
        /// A description of the environment that's being created and deployed.
        public let description: String?
        /// The ID of the environment account connection that you provide if you're provisioning your environment infrastructure resources to an environment account. For more information, see Environment account connections in the Proton Administrator guide. To use Amazon Web Services-managed provisioning for the environment, specify either the environmentAccountConnectionId or protonServiceRoleArn parameter and omit the provisioningRepository parameter.
        public let environmentAccountConnectionId: String?
        /// The name of the environment.
        public let name: String
        /// The Amazon Resource Name (ARN) of the Proton service role that allows Proton to make calls to other services on your behalf. To use Amazon Web Services-managed provisioning for the environment, specify either the environmentAccountConnectionId or protonServiceRoleArn parameter and omit the provisioningRepository parameter.
        public let protonServiceRoleArn: String?
        /// The infrastructure repository that you use to host your rendered infrastructure templates for self-managed provisioning. To use self-managed provisioning for the environment, specify this parameter and omit the environmentAccountConnectionId and protonServiceRoleArn parameters.
        public let provisioningRepository: RepositoryBranchInput?
        /// A YAML formatted string that provides inputs as defined in the environment template bundle schema file. For more information, see Environments in the Proton Administrator Guide.
        public let spec: String
        /// An optional list of metadata items that you can associate with the Proton environment. A tag is a key-value pair. For more information, see Proton resources and tagging in the Proton Administrator Guide or Proton User Guide.
        public let tags: [Tag]?
        /// The major version of the environment template.
        public let templateMajorVersion: String
        /// The minor version of the environment template.
        public let templateMinorVersion: String?
        /// The name of the environment template. For more information, see Environment Templates in the Proton Administrator Guide.
        public let templateName: String

        public init(description: String? = nil, environmentAccountConnectionId: String? = nil, name: String, protonServiceRoleArn: String? = nil, provisioningRepository: RepositoryBranchInput? = nil, spec: String, tags: [Tag]? = nil, templateMajorVersion: String, templateMinorVersion: String? = nil, templateName: String) {
            self.description = description
            self.environmentAccountConnectionId = environmentAccountConnectionId
            self.name = name
            self.protonServiceRoleArn = protonServiceRoleArn
            self.provisioningRepository = provisioningRepository
            self.spec = spec
            self.tags = tags
            self.templateMajorVersion = templateMajorVersion
            self.templateMinorVersion = templateMinorVersion
            self.templateName = templateName
        }

        public func validate(name: String) throws {
            try self.validate(self.description, name: "description", parent: name, max: 500)
            try self.validate(self.environmentAccountConnectionId, name: "environmentAccountConnectionId", parent: name, pattern: "^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$")
            try self.validate(self.name, name: "name", parent: name, max: 100)
            try self.validate(self.name, name: "name", parent: name, min: 1)
            try self.validate(self.name, name: "name", parent: name, pattern: "^[0-9A-Za-z]+[0-9A-Za-z_\\-]*$")
            try self.validate(self.protonServiceRoleArn, name: "protonServiceRoleArn", parent: name, max: 200)
            try self.validate(self.protonServiceRoleArn, name: "protonServiceRoleArn", parent: name, min: 1)
            try self.provisioningRepository?.validate(name: "\(name).provisioningRepository")
            try self.validate(self.spec, name: "spec", parent: name, max: 51200)
            try self.validate(self.spec, name: "spec", parent: name, min: 1)
            try self.tags?.forEach {
                try $0.validate(name: "\(name).tags[]")
            }
            try self.validate(self.tags, name: "tags", parent: name, max: 50)
            try self.validate(self.templateMajorVersion, name: "templateMajorVersion", parent: name, max: 20)
            try self.validate(self.templateMajorVersion, name: "templateMajorVersion", parent: name, min: 1)
            try self.validate(self.templateMajorVersion, name: "templateMajorVersion", parent: name, pattern: "^(0|([1-9]{1}\\d*))$")
            try self.validate(self.templateMinorVersion, name: "templateMinorVersion", parent: name, max: 20)
            try self.validate(self.templateMinorVersion, name: "templateMinorVersion", parent: name, min: 1)
            try self.validate(self.templateMinorVersion, name: "templateMinorVersion", parent: name, pattern: "^(0|([1-9]{1}\\d*))$")
            try self.validate(self.templateName, name: "templateName", parent: name, max: 100)
            try self.validate(self.templateName, name: "templateName", parent: name, min: 1)
            try self.validate(self.templateName, name: "templateName", parent: name, pattern: "^[0-9A-Za-z]+[0-9A-Za-z_\\-]*$")
        }

        private enum CodingKeys: String, CodingKey {
            case description
            case environmentAccountConnectionId
            case name
            case protonServiceRoleArn
            case provisioningRepository
            case spec
            case tags
            case templateMajorVersion
            case templateMinorVersion
            case templateName
        }
    }

    public struct CreateEnvironmentOutput: AWSDecodableShape {
        /// The environment detail data that's returned by Proton.
        public let environment: Environment

        public init(environment: Environment) {
            self.environment = environment
        }

        private enum CodingKeys: String, CodingKey {
            case environment
        }
    }

    public struct CreateEnvironmentTemplateInput: AWSEncodableShape {
        /// A description of the environment template.
        public let description: String?
        /// The environment template name as displayed in the developer interface.
        public let displayName: String?
        /// A customer provided encryption key that Proton uses to encrypt data.
        public let encryptionKey: String?
        /// The name of the environment template.
        public let name: String
        /// When included, indicates that the environment template is for customer provisioned and managed infrastructure.
        public let provisioning: Provisioning?
        /// An optional list of metadata items that you can associate with the Proton environment template. A tag is a key-value pair. For more information, see Proton resources and tagging in the Proton Administrator Guide or Proton User Guide.
        public let tags: [Tag]?

        public init(description: String? = nil, displayName: String? = nil, encryptionKey: String? = nil, name: String, provisioning: Provisioning? = nil, tags: [Tag]? = nil) {
            self.description = description
            self.displayName = displayName
            self.encryptionKey = encryptionKey
            self.name = name
            self.provisioning = provisioning
            self.tags = tags
        }

        public func validate(name: String) throws {
            try self.validate(self.description, name: "description", parent: name, max: 500)
            try self.validate(self.displayName, name: "displayName", parent: name, max: 100)
            try self.validate(self.displayName, name: "displayName", parent: name, min: 1)
            try self.validate(self.encryptionKey, name: "encryptionKey", parent: name, max: 200)
            try self.validate(self.encryptionKey, name: "encryptionKey", parent: name, min: 1)
            try self.validate(self.name, name: "name", parent: name, max: 100)
            try self.validate(self.name, name: "name", parent: name, min: 1)
            try self.validate(self.name, name: "name", parent: name, pattern: "^[0-9A-Za-z]+[0-9A-Za-z_\\-]*$")
            try self.tags?.forEach {
                try $0.validate(name: "\(name).tags[]")
            }
            try self.validate(self.tags, name: "tags", parent: name, max: 50)
        }

        private enum CodingKeys: String, CodingKey {
            case description
            case displayName
            case encryptionKey
            case name
            case provisioning
            case tags
        }
    }

    public struct CreateEnvironmentTemplateOutput: AWSDecodableShape {
        /// The environment template detail data that's returned by Proton.
        public let environmentTemplate: EnvironmentTemplate

        public init(environmentTemplate: EnvironmentTemplate) {
            self.environmentTemplate = environmentTemplate
        }

        private enum CodingKeys: String, CodingKey {
            case environmentTemplate
        }
    }

    public struct CreateEnvironmentTemplateVersionInput: AWSEncodableShape {
        /// When included, if two identical requests are made with the same client token, Proton returns the environment template version that the first request created.
        public let clientToken: String?
        /// A description of the new version of an environment template.
        public let description: String?
        /// To create a new minor version of the environment template, include major Version. To create a new major and minor version of the environment template, exclude major Version.
        public let majorVersion: String?
        /// An object that includes the template bundle S3 bucket path and name for the new version of an template.
        public let source: TemplateVersionSourceInput
        /// An optional list of metadata items that you can associate with the Proton environment template version. A tag is a key-value pair. For more information, see Proton resources and tagging in the Proton Administrator Guide or Proton User Guide.
        public let tags: [Tag]?
        /// The name of the environment template.
        public let templateName: String

        public init(clientToken: String? = CreateEnvironmentTemplateVersionInput.idempotencyToken(), description: String? = nil, majorVersion: String? = nil, source: TemplateVersionSourceInput, tags: [Tag]? = nil, templateName: String) {
            self.clientToken = clientToken
            self.description = description
            self.majorVersion = majorVersion
            self.source = source
            self.tags = tags
            self.templateName = templateName
        }

        public func validate(name: String) throws {
            try self.validate(self.clientToken, name: "clientToken", parent: name, max: 64)
            try self.validate(self.clientToken, name: "clientToken", parent: name, pattern: "^[!-~]*$")
            try self.validate(self.description, name: "description", parent: name, max: 500)
            try self.validate(self.majorVersion, name: "majorVersion", parent: name, max: 20)
            try self.validate(self.majorVersion, name: "majorVersion", parent: name, min: 1)
            try self.validate(self.majorVersion, name: "majorVersion", parent: name, pattern: "^(0|([1-9]{1}\\d*))$")
            try self.source.validate(name: "\(name).source")
            try self.tags?.forEach {
                try $0.validate(name: "\(name).tags[]")
            }
            try self.validate(self.tags, name: "tags", parent: name, max: 50)
            try self.validate(self.templateName, name: "templateName", parent: name, max: 100)
            try self.validate(self.templateName, name: "templateName", parent: name, min: 1)
            try self.validate(self.templateName, name: "templateName", parent: name, pattern: "^[0-9A-Za-z]+[0-9A-Za-z_\\-]*$")
        }

        private enum CodingKeys: String, CodingKey {
            case clientToken
            case description
            case majorVersion
            case source
            case tags
            case templateName
        }
    }

    public struct CreateEnvironmentTemplateVersionOutput: AWSDecodableShape {
        /// The environment template detail data that's returned by Proton.
        public let environmentTemplateVersion: EnvironmentTemplateVersion

        public init(environmentTemplateVersion: EnvironmentTemplateVersion) {
            self.environmentTemplateVersion = environmentTemplateVersion
        }

        private enum CodingKeys: String, CodingKey {
            case environmentTemplateVersion
        }
    }

    public struct CreateRepositoryInput: AWSEncodableShape {
        /// The Amazon Resource Name (ARN) of your Amazon Web Services CodeStar connection. For more information, see Setting up for Proton in the Proton Administrator Guide.
        public let connectionArn: String
        /// The ARN of your customer Amazon Web Services Key Management Service (Amazon Web Services KMS) key.
        public let encryptionKey: String?
        /// The repository name (for example, myrepos/myrepo).
        public let name: String
        /// The repository provider.
        public let provider: RepositoryProvider
        /// An optional list of metadata items that you can associate with the Proton repository. A tag is a key-value pair. For more information, see Proton resources and tagging in the Proton Administrator Guide or Proton User Guide.
        public let tags: [Tag]?

        public init(connectionArn: String, encryptionKey: String? = nil, name: String, provider: RepositoryProvider, tags: [Tag]? = nil) {
            self.connectionArn = connectionArn
            self.encryptionKey = encryptionKey
            self.name = name
            self.provider = provider
            self.tags = tags
        }

        public func validate(name: String) throws {
            try self.validate(self.connectionArn, name: "connectionArn", parent: name, max: 200)
            try self.validate(self.connectionArn, name: "connectionArn", parent: name, min: 1)
            try self.validate(self.encryptionKey, name: "encryptionKey", parent: name, max: 200)
            try self.validate(self.encryptionKey, name: "encryptionKey", parent: name, min: 1)
            try self.validate(self.name, name: "name", parent: name, max: 100)
            try self.validate(self.name, name: "name", parent: name, min: 1)
            try self.validate(self.name, name: "name", parent: name, pattern: "[A-Za-z0-9_.-].*/[A-Za-z0-9_.-].*")
            try self.tags?.forEach {
                try $0.validate(name: "\(name).tags[]")
            }
            try self.validate(self.tags, name: "tags", parent: name, max: 50)
        }

        private enum CodingKeys: String, CodingKey {
            case connectionArn
            case encryptionKey
            case name
            case provider
            case tags
        }
    }

    public struct CreateRepositoryOutput: AWSDecodableShape {
        /// The repository detail data that's returned by Proton.
        public let repository: Repository

        public init(repository: Repository) {
            self.repository = repository
        }

        private enum CodingKeys: String, CodingKey {
            case repository
        }
    }

    public struct CreateServiceInput: AWSEncodableShape {
        /// The name of the code repository branch that holds the code that's deployed in Proton. Don't include this parameter if your service template doesn't include a service pipeline.
        public let branchName: String?
        /// A description of the Proton service.
        public let description: String?
        /// The service name.
        public let name: String
        /// The Amazon Resource Name (ARN) of the repository connection. For more information, see Set up repository connection in the Proton Administrator Guide and Setting up with Proton in the Proton User Guide. Don't include this parameter if your service template doesn't include a service pipeline.
        public let repositoryConnectionArn: String?
        /// The ID of the code repository. Don't include this parameter if your service template doesn't include a service pipeline.
        public let repositoryId: String?
        /// A link to a spec file that provides inputs as defined in the service template bundle schema file. The spec file is in YAML format. Don’t include pipeline inputs in the spec if your service template doesn’t include a service pipeline. For more information, see Create a service in the Proton Administrator Guide and Create a service in the Proton User Guide.
        public let spec: String
        /// An optional list of metadata items that you can associate with the Proton service. A tag is a key-value pair. For more information, see Proton resources and tagging in the Proton Administrator Guide or Proton User Guide.
        public let tags: [Tag]?
        /// The major version of the service template that was used to create the service.
        public let templateMajorVersion: String
        /// The minor version of the service template that was used to create the service.
        public let templateMinorVersion: String?
        /// The name of the service template that's used to create the service.
        public let templateName: String

        public init(branchName: String? = nil, description: String? = nil, name: String, repositoryConnectionArn: String? = nil, repositoryId: String? = nil, spec: String, tags: [Tag]? = nil, templateMajorVersion: String, templateMinorVersion: String? = nil, templateName: String) {
            self.branchName = branchName
            self.description = description
            self.name = name
            self.repositoryConnectionArn = repositoryConnectionArn
            self.repositoryId = repositoryId
            self.spec = spec
            self.tags = tags
            self.templateMajorVersion = templateMajorVersion
            self.templateMinorVersion = templateMinorVersion
            self.templateName = templateName
        }

        public func validate(name: String) throws {
            try self.validate(self.branchName, name: "branchName", parent: name, max: 200)
            try self.validate(self.branchName, name: "branchName", parent: name, min: 1)
            try self.validate(self.description, name: "description", parent: name, max: 500)
            try self.validate(self.name, name: "name", parent: name, max: 100)
            try self.validate(self.name, name: "name", parent: name, min: 1)
            try self.validate(self.name, name: "name", parent: name, pattern: "^[0-9A-Za-z]+[0-9A-Za-z_\\-]*$")
            try self.validate(self.repositoryConnectionArn, name: "repositoryConnectionArn", parent: name, max: 200)
            try self.validate(self.repositoryConnectionArn, name: "repositoryConnectionArn", parent: name, min: 1)
            try self.validate(self.repositoryId, name: "repositoryId", parent: name, max: 200)
            try self.validate(self.repositoryId, name: "repositoryId", parent: name, min: 1)
            try self.validate(self.spec, name: "spec", parent: name, max: 51200)
            try self.validate(self.spec, name: "spec", parent: name, min: 1)
            try self.tags?.forEach {
                try $0.validate(name: "\(name).tags[]")
            }
            try self.validate(self.tags, name: "tags", parent: name, max: 50)
            try self.validate(self.templateMajorVersion, name: "templateMajorVersion", parent: name, max: 20)
            try self.validate(self.templateMajorVersion, name: "templateMajorVersion", parent: name, min: 1)
            try self.validate(self.templateMajorVersion, name: "templateMajorVersion", parent: name, pattern: "^(0|([1-9]{1}\\d*))$")
            try self.validate(self.templateMinorVersion, name: "templateMinorVersion", parent: name, max: 20)
            try self.validate(self.templateMinorVersion, name: "templateMinorVersion", parent: name, min: 1)
            try self.validate(self.templateMinorVersion, name: "templateMinorVersion", parent: name, pattern: "^(0|([1-9]{1}\\d*))$")
            try self.validate(self.templateName, name: "templateName", parent: name, max: 100)
            try self.validate(self.templateName, name: "templateName", parent: name, min: 1)
            try self.validate(self.templateName, name: "templateName", parent: name, pattern: "^[0-9A-Za-z]+[0-9A-Za-z_\\-]*$")
        }

        private enum CodingKeys: String, CodingKey {
            case branchName
            case description
            case name
            case repositoryConnectionArn
            case repositoryId
            case spec
            case tags
            case templateMajorVersion
            case templateMinorVersion
            case templateName
        }
    }

    public struct CreateServiceOutput: AWSDecodableShape {
        /// The service detail data that's returned by Proton.
        public let service: Service

        public init(service: Service) {
            self.service = service
        }

        private enum CodingKeys: String, CodingKey {
            case service
        }
    }

    public struct CreateServiceTemplateInput: AWSEncodableShape {
        /// A description of the service template.
        public let description: String?
        /// The name of the service template as displayed in the developer interface.
        public let displayName: String?
        /// A customer provided encryption key that's used to encrypt data.
        public let encryptionKey: String?
        /// The name of the service template.
        public let name: String
        /// By default, Proton provides a service pipeline for your service. When this parameter is included, it indicates that an Proton service pipeline isn't provided for your service. After it's included, it can't be changed. For more information, see Service template bundles in the Proton Administrator Guide.
        public let pipelineProvisioning: Provisioning?
        /// An optional list of metadata items that you can associate with the Proton service template. A tag is a key-value pair. For more information, see Proton resources and tagging in the Proton Administrator Guide or Proton User Guide.
        public let tags: [Tag]?

        public init(description: String? = nil, displayName: String? = nil, encryptionKey: String? = nil, name: String, pipelineProvisioning: Provisioning? = nil, tags: [Tag]? = nil) {
            self.description = description
            self.displayName = displayName
            self.encryptionKey = encryptionKey
            self.name = name
            self.pipelineProvisioning = pipelineProvisioning
            self.tags = tags
        }

        public func validate(name: String) throws {
            try self.validate(self.description, name: "description", parent: name, max: 500)
            try self.validate(self.displayName, name: "displayName", parent: name, max: 100)
            try self.validate(self.displayName, name: "displayName", parent: name, min: 1)
            try self.validate(self.encryptionKey, name: "encryptionKey", parent: name, max: 200)
            try self.validate(self.encryptionKey, name: "encryptionKey", parent: name, min: 1)
            try self.validate(self.name, name: "name", parent: name, max: 100)
            try self.validate(self.name, name: "name", parent: name, min: 1)
            try self.validate(self.name, name: "name", parent: name, pattern: "^[0-9A-Za-z]+[0-9A-Za-z_\\-]*$")
            try self.tags?.forEach {
                try $0.validate(name: "\(name).tags[]")
            }
            try self.validate(self.tags, name: "tags", parent: name, max: 50)
        }

        private enum CodingKeys: String, CodingKey {
            case description
            case displayName
            case encryptionKey
            case name
            case pipelineProvisioning
            case tags
        }
    }

    public struct CreateServiceTemplateOutput: AWSDecodableShape {
        /// The service template detail data that's returned by Proton.
        public let serviceTemplate: ServiceTemplate

        public init(serviceTemplate: ServiceTemplate) {
            self.serviceTemplate = serviceTemplate
        }

        private enum CodingKeys: String, CodingKey {
            case serviceTemplate
        }
    }

    public struct CreateServiceTemplateVersionInput: AWSEncodableShape {
        /// When included, if two identical requests are made with the same client token, Proton returns the service template version that the first request created.
        public let clientToken: String?
        /// An array of compatible environment template objects for the new version of a service template.
        public let compatibleEnvironmentTemplates: [CompatibleEnvironmentTemplateInput]
        /// A description of the new version of a service template.
        public let description: String?
        /// To create a new minor version of the service template, include a major Version. To create a new major and minor version of the service template, exclude major Version.
        public let majorVersion: String?
        /// An object that includes the template bundle S3 bucket path and name for the new version of a service template.
        public let source: TemplateVersionSourceInput
        /// An optional list of metadata items that you can associate with the Proton service template version. A tag is a key-value pair. For more information, see Proton resources and tagging in the Proton Administrator Guide or Proton User Guide.
        public let tags: [Tag]?
        /// The name of the service template.
        public let templateName: String

        public init(clientToken: String? = CreateServiceTemplateVersionInput.idempotencyToken(), compatibleEnvironmentTemplates: [CompatibleEnvironmentTemplateInput], description: String? = nil, majorVersion: String? = nil, source: TemplateVersionSourceInput, tags: [Tag]? = nil, templateName: String) {
            self.clientToken = clientToken
            self.compatibleEnvironmentTemplates = compatibleEnvironmentTemplates
            self.description = description
            self.majorVersion = majorVersion
            self.source = source
            self.tags = tags
            self.templateName = templateName
        }

        public func validate(name: String) throws {
            try self.validate(self.clientToken, name: "clientToken", parent: name, max: 64)
            try self.validate(self.clientToken, name: "clientToken", parent: name, pattern: "^[!-~]*$")
            try self.compatibleEnvironmentTemplates.forEach {
                try $0.validate(name: "\(name).compatibleEnvironmentTemplates[]")
            }
            try self.validate(self.compatibleEnvironmentTemplates, name: "compatibleEnvironmentTemplates", parent: name, max: 10)
            try self.validate(self.compatibleEnvironmentTemplates, name: "compatibleEnvironmentTemplates", parent: name, min: 1)
            try self.validate(self.description, name: "description", parent: name, max: 500)
            try self.validate(self.majorVersion, name: "majorVersion", parent: name, max: 20)
            try self.validate(self.majorVersion, name: "majorVersion", parent: name, min: 1)
            try self.validate(self.majorVersion, name: "majorVersion", parent: name, pattern: "^(0|([1-9]{1}\\d*))$")
            try self.source.validate(name: "\(name).source")
            try self.tags?.forEach {
                try $0.validate(name: "\(name).tags[]")
            }
            try self.validate(self.tags, name: "tags", parent: name, max: 50)
            try self.validate(self.templateName, name: "templateName", parent: name, max: 100)
            try self.validate(self.templateName, name: "templateName", parent: name, min: 1)
            try self.validate(self.templateName, name: "templateName", parent: name, pattern: "^[0-9A-Za-z]+[0-9A-Za-z_\\-]*$")
        }

        private enum CodingKeys: String, CodingKey {
            case clientToken
            case compatibleEnvironmentTemplates
            case description
            case majorVersion
            case source
            case tags
            case templateName
        }
    }

    public struct CreateServiceTemplateVersionOutput: AWSDecodableShape {
        /// The service template version summary of detail data that's returned by Proton.
        public let serviceTemplateVersion: ServiceTemplateVersion

        public init(serviceTemplateVersion: ServiceTemplateVersion) {
            self.serviceTemplateVersion = serviceTemplateVersion
        }

        private enum CodingKeys: String, CodingKey {
            case serviceTemplateVersion
        }
    }

    public struct CreateTemplateSyncConfigInput: AWSEncodableShape {
        /// The branch of the registered repository for your template.
        public let branch: String
        /// The name of your repository (for example, myrepos/myrepo).
        public let repositoryName: String
        /// The provider type for your repository.
        public let repositoryProvider: RepositoryProvider
        /// A repository subdirectory path to your template bundle directory. When included, Proton limits the template bundle search to this repository directory.
        public let subdirectory: String?
        /// The name of your registered template.
        public let templateName: String
        /// The type of the registered template.
        public let templateType: TemplateType

        public init(branch: String, repositoryName: String, repositoryProvider: RepositoryProvider, subdirectory: String? = nil, templateName: String, templateType: TemplateType) {
            self.branch = branch
            self.repositoryName = repositoryName
            self.repositoryProvider = repositoryProvider
            self.subdirectory = subdirectory
            self.templateName = templateName
            self.templateType = templateType
        }

        public func validate(name: String) throws {
            try self.validate(self.branch, name: "branch", parent: name, max: 200)
            try self.validate(self.branch, name: "branch", parent: name, min: 1)
            try self.validate(self.repositoryName, name: "repositoryName", parent: name, max: 100)
            try self.validate(self.repositoryName, name: "repositoryName", parent: name, min: 1)
            try self.validate(self.repositoryName, name: "repositoryName", parent: name, pattern: "[A-Za-z0-9_.-].*/[A-Za-z0-9_.-].*")
            try self.validate(self.subdirectory, name: "subdirectory", parent: name, max: 4096)
            try self.validate(self.subdirectory, name: "subdirectory", parent: name, min: 1)
            try self.validate(self.templateName, name: "templateName", parent: name, max: 100)
            try self.validate(self.templateName, name: "templateName", parent: name, min: 1)
            try self.validate(self.templateName, name: "templateName", parent: name, pattern: "^[0-9A-Za-z]+[0-9A-Za-z_\\-]*$")
        }

        private enum CodingKeys: String, CodingKey {
            case branch
            case repositoryName
            case repositoryProvider
            case subdirectory
            case templateName
            case templateType
        }
    }

    public struct CreateTemplateSyncConfigOutput: AWSDecodableShape {
        /// The template sync configuration detail data that's returned by Proton.
        public let templateSyncConfig: TemplateSyncConfig?

        public init(templateSyncConfig: TemplateSyncConfig? = nil) {
            self.templateSyncConfig = templateSyncConfig
        }

        private enum CodingKeys: String, CodingKey {
            case templateSyncConfig
        }
    }

    public struct DeleteEnvironmentAccountConnectionInput: AWSEncodableShape {
        /// The ID of the environment account connection to delete.
        public let id: String

        public init(id: String) {
            self.id = id
        }

        public func validate(name: String) throws {
            try self.validate(self.id, name: "id", parent: name, pattern: "^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$")
        }

        private enum CodingKeys: String, CodingKey {
            case id
        }
    }

    public struct DeleteEnvironmentAccountConnectionOutput: AWSDecodableShape {
        /// The environment account connection detail data that's returned by Proton.
        public let environmentAccountConnection: EnvironmentAccountConnection?

        public init(environmentAccountConnection: EnvironmentAccountConnection? = nil) {
            self.environmentAccountConnection = environmentAccountConnection
        }

        private enum CodingKeys: String, CodingKey {
            case environmentAccountConnection
        }
    }

    public struct DeleteEnvironmentInput: AWSEncodableShape {
        /// The name of the environment to delete.
        public let name: String

        public init(name: String) {
            self.name = name
        }

        public func validate(name: String) throws {
            try self.validate(self.name, name: "name", parent: name, max: 100)
            try self.validate(self.name, name: "name", parent: name, min: 1)
            try self.validate(self.name, name: "name", parent: name, pattern: "^[0-9A-Za-z]+[0-9A-Za-z_\\-]*$")
        }

        private enum CodingKeys: String, CodingKey {
            case name
        }
    }

    public struct DeleteEnvironmentOutput: AWSDecodableShape {
        /// The environment detail data that's returned by Proton.
        public let environment: Environment?

        public init(environment: Environment? = nil) {
            self.environment = environment
        }

        private enum CodingKeys: String, CodingKey {
            case environment
        }
    }

    public struct DeleteEnvironmentTemplateInput: AWSEncodableShape {
        /// The name of the environment template to delete.
        public let name: String

        public init(name: String) {
            self.name = name
        }

        public func validate(name: String) throws {
            try self.validate(self.name, name: "name", parent: name, max: 100)
            try self.validate(self.name, name: "name", parent: name, min: 1)
            try self.validate(self.name, name: "name", parent: name, pattern: "^[0-9A-Za-z]+[0-9A-Za-z_\\-]*$")
        }

        private enum CodingKeys: String, CodingKey {
            case name
        }
    }

    public struct DeleteEnvironmentTemplateOutput: AWSDecodableShape {
        /// The environment template detail data that's returned by Proton.
        public let environmentTemplate: EnvironmentTemplate?

        public init(environmentTemplate: EnvironmentTemplate? = nil) {
            self.environmentTemplate = environmentTemplate
        }

        private enum CodingKeys: String, CodingKey {
            case environmentTemplate
        }
    }

    public struct DeleteEnvironmentTemplateVersionInput: AWSEncodableShape {
        /// The environment template major version to delete.
        public let majorVersion: String
        /// The environment template minor version to delete.
        public let minorVersion: String
        /// The name of the environment template.
        public let templateName: String

        public init(majorVersion: String, minorVersion: String, templateName: String) {
            self.majorVersion = majorVersion
            self.minorVersion = minorVersion
            self.templateName = templateName
        }

        public func validate(name: String) throws {
            try self.validate(self.majorVersion, name: "majorVersion", parent: name, max: 20)
            try self.validate(self.majorVersion, name: "majorVersion", parent: name, min: 1)
            try self.validate(self.majorVersion, name: "majorVersion", parent: name, pattern: "^(0|([1-9]{1}\\d*))$")
            try self.validate(self.minorVersion, name: "minorVersion", parent: name, max: 20)
            try self.validate(self.minorVersion, name: "minorVersion", parent: name, min: 1)
            try self.validate(self.minorVersion, name: "minorVersion", parent: name, pattern: "^(0|([1-9]{1}\\d*))$")
            try self.validate(self.templateName, name: "templateName", parent: name, max: 100)
            try self.validate(self.templateName, name: "templateName", parent: name, min: 1)
            try self.validate(self.templateName, name: "templateName", parent: name, pattern: "^[0-9A-Za-z]+[0-9A-Za-z_\\-]*$")
        }

        private enum CodingKeys: String, CodingKey {
            case majorVersion
            case minorVersion
            case templateName
        }
    }

    public struct DeleteEnvironmentTemplateVersionOutput: AWSDecodableShape {
        /// The environment template version detail data that's returned by Proton.
        public let environmentTemplateVersion: EnvironmentTemplateVersion?

        public init(environmentTemplateVersion: EnvironmentTemplateVersion? = nil) {
            self.environmentTemplateVersion = environmentTemplateVersion
        }

        private enum CodingKeys: String, CodingKey {
            case environmentTemplateVersion
        }
    }

    public struct DeleteRepositoryInput: AWSEncodableShape {
        /// The name of the repository.
        public let name: String
        /// The repository provider.
        public let provider: RepositoryProvider

        public init(name: String, provider: RepositoryProvider) {
            self.name = name
            self.provider = provider
        }

        public func validate(name: String) throws {
            try self.validate(self.name, name: "name", parent: name, max: 100)
            try self.validate(self.name, name: "name", parent: name, min: 1)
            try self.validate(self.name, name: "name", parent: name, pattern: "[A-Za-z0-9_.-].*/[A-Za-z0-9_.-].*")
        }

        private enum CodingKeys: String, CodingKey {
            case name
            case provider
        }
    }

    public struct DeleteRepositoryOutput: AWSDecodableShape {
        /// The repository detail data that's returned by Proton.
        public let repository: Repository?

        public init(repository: Repository? = nil) {
            self.repository = repository
        }

        private enum CodingKeys: String, CodingKey {
            case repository
        }
    }

    public struct DeleteServiceInput: AWSEncodableShape {
        /// The name of the service to delete.
        public let name: String

        public init(name: String) {
            self.name = name
        }

        public func validate(name: String) throws {
            try self.validate(self.name, name: "name", parent: name, max: 100)
            try self.validate(self.name, name: "name", parent: name, min: 1)
            try self.validate(self.name, name: "name", parent: name, pattern: "^[0-9A-Za-z]+[0-9A-Za-z_\\-]*$")
        }

        private enum CodingKeys: String, CodingKey {
            case name
        }
    }

    public struct DeleteServiceOutput: AWSDecodableShape {
        /// The service detail data that's returned by Proton.
        public let service: Service?

        public init(service: Service? = nil) {
            self.service = service
        }

        private enum CodingKeys: String, CodingKey {
            case service
        }
    }

    public struct DeleteServiceTemplateInput: AWSEncodableShape {
        /// The name of the service template to delete.
        public let name: String

        public init(name: String) {
            self.name = name
        }

        public func validate(name: String) throws {
            try self.validate(self.name, name: "name", parent: name, max: 100)
            try self.validate(self.name, name: "name", parent: name, min: 1)
            try self.validate(self.name, name: "name", parent: name, pattern: "^[0-9A-Za-z]+[0-9A-Za-z_\\-]*$")
        }

        private enum CodingKeys: String, CodingKey {
            case name
        }
    }

    public struct DeleteServiceTemplateOutput: AWSDecodableShape {
        /// The service template detail data that's returned by Proton.
        public let serviceTemplate: ServiceTemplate?

        public init(serviceTemplate: ServiceTemplate? = nil) {
            self.serviceTemplate = serviceTemplate
        }

        private enum CodingKeys: String, CodingKey {
            case serviceTemplate
        }
    }

    public struct DeleteServiceTemplateVersionInput: AWSEncodableShape {
        /// The service template major version to delete.
        public let majorVersion: String
        /// The service template minor version to delete.
        public let minorVersion: String
        /// The name of the service template.
        public let templateName: String

        public init(majorVersion: String, minorVersion: String, templateName: String) {
            self.majorVersion = majorVersion
            self.minorVersion = minorVersion
            self.templateName = templateName
        }

        public func validate(name: String) throws {
            try self.validate(self.majorVersion, name: "majorVersion", parent: name, max: 20)
            try self.validate(self.majorVersion, name: "majorVersion", parent: name, min: 1)
            try self.validate(self.majorVersion, name: "majorVersion", parent: name, pattern: "^(0|([1-9]{1}\\d*))$")
            try self.validate(self.minorVersion, name: "minorVersion", parent: name, max: 20)
            try self.validate(self.minorVersion, name: "minorVersion", parent: name, min: 1)
            try self.validate(self.minorVersion, name: "minorVersion", parent: name, pattern: "^(0|([1-9]{1}\\d*))$")
            try self.validate(self.templateName, name: "templateName", parent: name, max: 100)
            try self.validate(self.templateName, name: "templateName", parent: name, min: 1)
            try self.validate(self.templateName, name: "templateName", parent: name, pattern: "^[0-9A-Za-z]+[0-9A-Za-z_\\-]*$")
        }

        private enum CodingKeys: String, CodingKey {
            case majorVersion
            case minorVersion
            case templateName
        }
    }

    public struct DeleteServiceTemplateVersionOutput: AWSDecodableShape {
        /// The service template version detail data that's returned by Proton.
        public let serviceTemplateVersion: ServiceTemplateVersion?

        public init(serviceTemplateVersion: ServiceTemplateVersion? = nil) {
            self.serviceTemplateVersion = serviceTemplateVersion
        }

        private enum CodingKeys: String, CodingKey {
            case serviceTemplateVersion
        }
    }

    public struct DeleteTemplateSyncConfigInput: AWSEncodableShape {
        /// The template name.
        public let templateName: String
        /// The template type.
        public let templateType: TemplateType

        public init(templateName: String, templateType: TemplateType) {
            self.templateName = templateName
            self.templateType = templateType
        }

        public func validate(name: String) throws {
            try self.validate(self.templateName, name: "templateName", parent: name, max: 100)
            try self.validate(self.templateName, name: "templateName", parent: name, min: 1)
            try self.validate(self.templateName, name: "templateName", parent: name, pattern: "^[0-9A-Za-z]+[0-9A-Za-z_\\-]*$")
        }

        private enum CodingKeys: String, CodingKey {
            case templateName
            case templateType
        }
    }

    public struct DeleteTemplateSyncConfigOutput: AWSDecodableShape {
        /// The template sync configuration detail data that's returned by Proton.
        public let templateSyncConfig: TemplateSyncConfig?

        public init(templateSyncConfig: TemplateSyncConfig? = nil) {
            self.templateSyncConfig = templateSyncConfig
        }

        private enum CodingKeys: String, CodingKey {
            case templateSyncConfig
        }
    }

    public struct Environment: AWSDecodableShape {
        /// The Amazon Resource Name (ARN) of the environment.
        public let arn: String
        /// The time when the environment was created.
        public let createdAt: Date
        /// The environment deployment status.
        public let deploymentStatus: DeploymentStatus
        /// An environment deployment status message.
        public let deploymentStatusMessage: String?
        /// The description of the environment.
        public let description: String?
        /// The ID of the environment account connection that's used to provision infrastructure resources in an environment account.
        public let environmentAccountConnectionId: String?
        /// The ID of the environment account that the environment infrastructure resources are provisioned in.
        public let environmentAccountId: String?
        /// The time when a deployment of the environment was last attempted.
        public let lastDeploymentAttemptedAt: Date
        /// The time when the environment was last deployed successfully.
        public let lastDeploymentSucceededAt: Date
        /// The name of the environment.
        public let name: String
        /// The Amazon Resource Name (ARN) of the Proton service role that allows Proton to make calls to other services on your behalf.
        public let protonServiceRoleArn: String?
        /// When included, indicates that the environment template is for customer provisioned and managed infrastructure.
        public let provisioning: Provisioning?
        /// The infrastructure repository that you use to host your rendered infrastructure templates for self-managed provisioning.
        public let provisioningRepository: RepositoryBranch?
        /// The environment spec.
        public let spec: String?
        /// The major version of the environment template.
        public let templateMajorVersion: String
        /// The minor version of the environment template.
        public let templateMinorVersion: String
        /// The Amazon Resource Name (ARN) of the environment template.
        public let templateName: String

        public init(arn: String, createdAt: Date, deploymentStatus: DeploymentStatus, deploymentStatusMessage: String? = nil, description: String? = nil, environmentAccountConnectionId: String? = nil, environmentAccountId: String? = nil, lastDeploymentAttemptedAt: Date, lastDeploymentSucceededAt: Date, name: String, protonServiceRoleArn: String? = nil, provisioning: Provisioning? = nil, provisioningRepository: RepositoryBranch? = nil, spec: String? = nil, templateMajorVersion: String, templateMinorVersion: String, templateName: String) {
            self.arn = arn
            self.createdAt = createdAt
            self.deploymentStatus = deploymentStatus
            self.deploymentStatusMessage = deploymentStatusMessage
            self.description = description
            self.environmentAccountConnectionId = environmentAccountConnectionId
            self.environmentAccountId = environmentAccountId
            self.lastDeploymentAttemptedAt = lastDeploymentAttemptedAt
            self.lastDeploymentSucceededAt = lastDeploymentSucceededAt
            self.name = name
            self.protonServiceRoleArn = protonServiceRoleArn
            self.provisioning = provisioning
            self.provisioningRepository = provisioningRepository
            self.spec = spec
            self.templateMajorVersion = templateMajorVersion
            self.templateMinorVersion = templateMinorVersion
            self.templateName = templateName
        }

        private enum CodingKeys: String, CodingKey {
            case arn
            case createdAt
            case deploymentStatus
            case deploymentStatusMessage
            case description
            case environmentAccountConnectionId
            case environmentAccountId
            case lastDeploymentAttemptedAt
            case lastDeploymentSucceededAt
            case name
            case protonServiceRoleArn
            case provisioning
            case provisioningRepository
            case spec
            case templateMajorVersion
            case templateMinorVersion
            case templateName
        }
    }

    public struct EnvironmentAccountConnection: AWSDecodableShape {
        /// The Amazon Resource Name (ARN) of the environment account connection.
        public let arn: String
        /// The environment account that's connected to the environment account connection.
        public let environmentAccountId: String
        /// The name of the environment that's associated with the environment account connection.
        public let environmentName: String
        /// The ID of the environment account connection.
        public let id: String
        /// The time when the environment account connection was last modified.
        public let lastModifiedAt: Date
        /// The ID of the management account that's connected to the environment account connection.
        public let managementAccountId: String
        /// The time when the environment account connection request was made.
        public let requestedAt: Date
        /// The IAM service role that's associated with the environment account connection.
        public let roleArn: String
        /// The status of the environment account connection.
        public let status: EnvironmentAccountConnectionStatus

        public init(arn: String, environmentAccountId: String, environmentName: String, id: String, lastModifiedAt: Date, managementAccountId: String, requestedAt: Date, roleArn: String, status: EnvironmentAccountConnectionStatus) {
            self.arn = arn
            self.environmentAccountId = environmentAccountId
            self.environmentName = environmentName
            self.id = id
            self.lastModifiedAt = lastModifiedAt
            self.managementAccountId = managementAccountId
            self.requestedAt = requestedAt
            self.roleArn = roleArn
            self.status = status
        }

        private enum CodingKeys: String, CodingKey {
            case arn
            case environmentAccountId
            case environmentName
            case id
            case lastModifiedAt
            case managementAccountId
            case requestedAt
            case roleArn
            case status
        }
    }

    public struct EnvironmentAccountConnectionSummary: AWSDecodableShape {
        /// The Amazon Resource Name (ARN) of the environment account connection.
        public let arn: String
        /// The ID of the environment account that's connected to the environment account connection.
        public let environmentAccountId: String
        /// The name of the environment that's associated with the environment account connection.
        public let environmentName: String
        /// The ID of the environment account connection.
        public let id: String
        /// The time when the environment account connection was last modified.
        public let lastModifiedAt: Date
        /// The ID of the management account that's connected to the environment account connection.
        public let managementAccountId: String
        /// The time when the environment account connection request was made.
        public let requestedAt: Date
        /// The IAM service role that's associated with the environment account connection.
        public let roleArn: String
        /// The status of the environment account connection.
        public let status: EnvironmentAccountConnectionStatus

        public init(arn: String, environmentAccountId: String, environmentName: String, id: String, lastModifiedAt: Date, managementAccountId: String, requestedAt: Date, roleArn: String, status: EnvironmentAccountConnectionStatus) {
            self.arn = arn
            self.environmentAccountId = environmentAccountId
            self.environmentName = environmentName
            self.id = id
            self.lastModifiedAt = lastModifiedAt
            self.managementAccountId = managementAccountId
            self.requestedAt = requestedAt
            self.roleArn = roleArn
            self.status = status
        }

        private enum CodingKeys: String, CodingKey {
            case arn
            case environmentAccountId
            case environmentName
            case id
            case lastModifiedAt
            case managementAccountId
            case requestedAt
            case roleArn
            case status
        }
    }

    public struct EnvironmentSummary: AWSDecodableShape {
        /// The Amazon Resource Name (ARN) of the environment.
        public let arn: String
        /// The time when the environment was created.
        public let createdAt: Date
        /// The environment deployment status.
        public let deploymentStatus: DeploymentStatus
        /// An environment deployment status message.
        public let deploymentStatusMessage: String?
        /// The description of the environment.
        public let description: String?
        /// The ID of the environment account connection that the environment is associated with.
        public let environmentAccountConnectionId: String?
        /// The ID of the environment account that the environment infrastructure resources are provisioned in.
        public let environmentAccountId: String?
        /// The time when a deployment of the environment was last attempted.
        public let lastDeploymentAttemptedAt: Date
        /// The time when the environment was last deployed successfully.
        public let lastDeploymentSucceededAt: Date
        /// The name of the environment.
        public let name: String
        /// The Amazon Resource Name (ARN) of the Proton service role that allows Proton to make calls to other services on your behalf.
        public let protonServiceRoleArn: String?
        /// When included, indicates that the environment template is for customer provisioned and managed infrastructure.
        public let provisioning: Provisioning?
        /// The major version of the environment template.
        public let templateMajorVersion: String
        /// The minor version of the environment template.
        public let templateMinorVersion: String
        /// The name of the environment template.
        public let templateName: String

        public init(arn: String, createdAt: Date, deploymentStatus: DeploymentStatus, deploymentStatusMessage: String? = nil, description: String? = nil, environmentAccountConnectionId: String? = nil, environmentAccountId: String? = nil, lastDeploymentAttemptedAt: Date, lastDeploymentSucceededAt: Date, name: String, protonServiceRoleArn: String? = nil, provisioning: Provisioning? = nil, templateMajorVersion: String, templateMinorVersion: String, templateName: String) {
            self.arn = arn
            self.createdAt = createdAt
            self.deploymentStatus = deploymentStatus
            self.deploymentStatusMessage = deploymentStatusMessage
            self.description = description
            self.environmentAccountConnectionId = environmentAccountConnectionId
            self.environmentAccountId = environmentAccountId
            self.lastDeploymentAttemptedAt = lastDeploymentAttemptedAt
            self.lastDeploymentSucceededAt = lastDeploymentSucceededAt
            self.name = name
            self.protonServiceRoleArn = protonServiceRoleArn
            self.provisioning = provisioning
            self.templateMajorVersion = templateMajorVersion
            self.templateMinorVersion = templateMinorVersion
            self.templateName = templateName
        }

        private enum CodingKeys: String, CodingKey {
            case arn
            case createdAt
            case deploymentStatus
            case deploymentStatusMessage
            case description
            case environmentAccountConnectionId
            case environmentAccountId
            case lastDeploymentAttemptedAt
            case lastDeploymentSucceededAt
            case name
            case protonServiceRoleArn
            case provisioning
            case templateMajorVersion
            case templateMinorVersion
            case templateName
        }
    }

    public struct EnvironmentTemplate: AWSDecodableShape {
        /// The Amazon Resource Name (ARN) of the environment template.
        public let arn: String
        /// The time when the environment template was created.
        public let createdAt: Date
        /// A description of the environment template.
        public let description: String?
        /// The name of the environment template as displayed in the developer interface.
        public let displayName: String?
        /// The customer provided encryption key for the environment template.
        public let encryptionKey: String?
        /// The time when the environment template was last modified.
        public let lastModifiedAt: Date
        /// The name of the environment template.
        public let name: String
        /// When included, indicates that the environment template is for customer provisioned and managed infrastructure.
        public let provisioning: Provisioning?
        /// The ID of the recommended version of the environment template.
        public let recommendedVersion: String?

        public init(arn: String, createdAt: Date, description: String? = nil, displayName: String? = nil, encryptionKey: String? = nil, lastModifiedAt: Date, name: String, provisioning: Provisioning? = nil, recommendedVersion: String? = nil) {
            self.arn = arn
            self.createdAt = createdAt
            self.description = description
            self.displayName = displayName
            self.encryptionKey = encryptionKey
            self.lastModifiedAt = lastModifiedAt
            self.name = name
            self.provisioning = provisioning
            self.recommendedVersion = recommendedVersion
        }

        private enum CodingKeys: String, CodingKey {
            case arn
            case createdAt
            case description
            case displayName
            case encryptionKey
            case lastModifiedAt
            case name
            case provisioning
            case recommendedVersion
        }
    }

    public struct EnvironmentTemplateFilter: AWSEncodableShape {
        /// Include majorVersion to filter search for a major version.
        public let majorVersion: String
        /// Include templateName to filter search for a template name.
        public let templateName: String

        public init(majorVersion: String, templateName: String) {
            self.majorVersion = majorVersion
            self.templateName = templateName
        }

        public func validate(name: String) throws {
            try self.validate(self.majorVersion, name: "majorVersion", parent: name, max: 20)
            try self.validate(self.majorVersion, name: "majorVersion", parent: name, min: 1)
            try self.validate(self.majorVersion, name: "majorVersion", parent: name, pattern: "^(0|([1-9]{1}\\d*))$")
            try self.validate(self.templateName, name: "templateName", parent: name, max: 100)
            try self.validate(self.templateName, name: "templateName", parent: name, min: 1)
            try self.validate(self.templateName, name: "templateName", parent: name, pattern: "^[0-9A-Za-z]+[0-9A-Za-z_\\-]*$")
        }

        private enum CodingKeys: String, CodingKey {
            case majorVersion
            case templateName
        }
    }

    public struct EnvironmentTemplateSummary: AWSDecodableShape {
        /// The Amazon Resource Name (ARN) of the environment template.
        public let arn: String
        /// The time when the environment template was created.
        public let createdAt: Date
        /// A description of the environment template.
        public let description: String?
        /// The name of the environment template as displayed in the developer interface.
        public let displayName: String?
        /// The time when the environment template was last modified.
        public let lastModifiedAt: Date
        /// The name of the environment template.
        public let name: String
        /// When included, indicates that the environment template is for customer provisioned and managed infrastructure.
        public let provisioning: Provisioning?
        /// The recommended version of the environment template.
        public let recommendedVersion: String?

        public init(arn: String, createdAt: Date, description: String? = nil, displayName: String? = nil, lastModifiedAt: Date, name: String, provisioning: Provisioning? = nil, recommendedVersion: String? = nil) {
            self.arn = arn
            self.createdAt = createdAt
            self.description = description
            self.displayName = displayName
            self.lastModifiedAt = lastModifiedAt
            self.name = name
            self.provisioning = provisioning
            self.recommendedVersion = recommendedVersion
        }

        private enum CodingKeys: String, CodingKey {
            case arn
            case createdAt
            case description
            case displayName
            case lastModifiedAt
            case name
            case provisioning
            case recommendedVersion
        }
    }

    public struct EnvironmentTemplateVersion: AWSDecodableShape {
        /// The Amazon Resource Name (ARN) of the version of an environment template.
        public let arn: String
        /// The time when the version of an environment template was created.
        public let createdAt: Date
        /// A description of the minor version of an environment template.
        public let description: String?
        /// The time when the version of an environment template was last modified.
        public let lastModifiedAt: Date
        /// The latest major version that's associated with the version of an environment template.
        public let majorVersion: String
        /// The minor version of an environment template.
        public let minorVersion: String
        /// The recommended minor version of the environment template.
        public let recommendedMinorVersion: String?
        /// The schema of the version of an environment template.
        public let schema: String?
        /// The status of the version of an environment template.
        public let status: TemplateVersionStatus
        /// The status message of the version of an environment template.
        public let statusMessage: String?
        /// The name of the version of an environment template.
        public let templateName: String

        public init(arn: String, createdAt: Date, description: String? = nil, lastModifiedAt: Date, majorVersion: String, minorVersion: String, recommendedMinorVersion: String? = nil, schema: String? = nil, status: TemplateVersionStatus, statusMessage: String? = nil, templateName: String) {
            self.arn = arn
            self.createdAt = createdAt
            self.description = description
            self.lastModifiedAt = lastModifiedAt
            self.majorVersion = majorVersion
            self.minorVersion = minorVersion
            self.recommendedMinorVersion = recommendedMinorVersion
            self.schema = schema
            self.status = status
            self.statusMessage = statusMessage
            self.templateName = templateName
        }

        private enum CodingKeys: String, CodingKey {
            case arn
            case createdAt
            case description
            case lastModifiedAt
            case majorVersion
            case minorVersion
            case recommendedMinorVersion
            case schema
            case status
            case statusMessage
            case templateName
        }
    }

    public struct EnvironmentTemplateVersionSummary: AWSDecodableShape {
        /// The Amazon Resource Name (ARN) of the version of an environment template.
        public let arn: String
        /// The time when the version of an environment template was created.
        public let createdAt: Date
        /// A description of the version of an environment template.
        public let description: String?
        /// The time when the version of an environment template was last modified.
        public let lastModifiedAt: Date
        /// The latest major version that's associated with the version of an environment template.
        public let majorVersion: String
        /// The version of an environment template.
        public let minorVersion: String
        /// The recommended minor version of the environment template.
        public let recommendedMinorVersion: String?
        /// The status of the version of an environment template.
        public let status: TemplateVersionStatus
        /// The status message of the version of an environment template.
        public let statusMessage: String?
        /// The name of the environment template.
        public let templateName: String

        public init(arn: String, createdAt: Date, description: String? = nil, lastModifiedAt: Date, majorVersion: String, minorVersion: String, recommendedMinorVersion: String? = nil, status: TemplateVersionStatus, statusMessage: String? = nil, templateName: String) {
            self.arn = arn
            self.createdAt = createdAt
            self.description = description
            self.lastModifiedAt = lastModifiedAt
            self.majorVersion = majorVersion
            self.minorVersion = minorVersion
            self.recommendedMinorVersion = recommendedMinorVersion
            self.status = status
            self.statusMessage = statusMessage
            self.templateName = templateName
        }

        private enum CodingKeys: String, CodingKey {
            case arn
            case createdAt
            case description
            case lastModifiedAt
            case majorVersion
            case minorVersion
            case recommendedMinorVersion
            case status
            case statusMessage
            case templateName
        }
    }

    public struct GetAccountSettingsInput: AWSEncodableShape {
        public init() {}
    }

    public struct GetAccountSettingsOutput: AWSDecodableShape {
        /// The Proton pipeline service role detail data that's returned by Proton.
        public let accountSettings: AccountSettings?

        public init(accountSettings: AccountSettings? = nil) {
            self.accountSettings = accountSettings
        }

        private enum CodingKeys: String, CodingKey {
            case accountSettings
        }
    }

    public struct GetEnvironmentAccountConnectionInput: AWSEncodableShape {
        /// The ID of the environment account connection.
        public let id: String

        public init(id: String) {
            self.id = id
        }

        public func validate(name: String) throws {
            try self.validate(self.id, name: "id", parent: name, pattern: "^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$")
        }

        private enum CodingKeys: String, CodingKey {
            case id
        }
    }

    public struct GetEnvironmentAccountConnectionOutput: AWSDecodableShape {
        /// The environment account connection detail data that's returned by Proton.
        public let environmentAccountConnection: EnvironmentAccountConnection

        public init(environmentAccountConnection: EnvironmentAccountConnection) {
            self.environmentAccountConnection = environmentAccountConnection
        }

        private enum CodingKeys: String, CodingKey {
            case environmentAccountConnection
        }
    }

    public struct GetEnvironmentInput: AWSEncodableShape {
        /// The name of the environment that you want to get the detail data for.
        public let name: String

        public init(name: String) {
            self.name = name
        }

        public func validate(name: String) throws {
            try self.validate(self.name, name: "name", parent: name, max: 100)
            try self.validate(self.name, name: "name", parent: name, min: 1)
            try self.validate(self.name, name: "name", parent: name, pattern: "^[0-9A-Za-z]+[0-9A-Za-z_\\-]*$")
        }

        private enum CodingKeys: String, CodingKey {
            case name
        }
    }

    public struct GetEnvironmentOutput: AWSDecodableShape {
        /// The environment detail data that's returned by Proton.
        public let environment: Environment

        public init(environment: Environment) {
            self.environment = environment
        }

        private enum CodingKeys: String, CodingKey {
            case environment
        }
    }

    public struct GetEnvironmentTemplateInput: AWSEncodableShape {
        /// The name of the environment template that you want to get the detail data for.
        public let name: String

        public init(name: String) {
            self.name = name
        }

        public func validate(name: String) throws {
            try self.validate(self.name, name: "name", parent: name, max: 100)
            try self.validate(self.name, name: "name", parent: name, min: 1)
            try self.validate(self.name, name: "name", parent: name, pattern: "^[0-9A-Za-z]+[0-9A-Za-z_\\-]*$")
        }

        private enum CodingKeys: String, CodingKey {
            case name
        }
    }

    public struct GetEnvironmentTemplateOutput: AWSDecodableShape {
        /// The environment template detail data that's returned by Proton.
        public let environmentTemplate: EnvironmentTemplate

        public init(environmentTemplate: EnvironmentTemplate) {
            self.environmentTemplate = environmentTemplate
        }

        private enum CodingKeys: String, CodingKey {
            case environmentTemplate
        }
    }

    public struct GetEnvironmentTemplateVersionInput: AWSEncodableShape {
        /// To view environment template major version detail data, include major Version.
        public let majorVersion: String
        /// To view environment template minor version detail data, include minorVersion.
        public let minorVersion: String
        /// The name of the environment template.
        public let templateName: String

        public init(majorVersion: String, minorVersion: String, templateName: String) {
            self.majorVersion = majorVersion
            self.minorVersion = minorVersion
            self.templateName = templateName
        }

        public func validate(name: String) throws {
            try self.validate(self.majorVersion, name: "majorVersion", parent: name, max: 20)
            try self.validate(self.majorVersion, name: "majorVersion", parent: name, min: 1)
            try self.validate(self.majorVersion, name: "majorVersion", parent: name, pattern: "^(0|([1-9]{1}\\d*))$")
            try self.validate(self.minorVersion, name: "minorVersion", parent: name, max: 20)
            try self.validate(self.minorVersion, name: "minorVersion", parent: name, min: 1)
            try self.validate(self.minorVersion, name: "minorVersion", parent: name, pattern: "^(0|([1-9]{1}\\d*))$")
            try self.validate(self.templateName, name: "templateName", parent: name, max: 100)
            try self.validate(self.templateName, name: "templateName", parent: name, min: 1)
            try self.validate(self.templateName, name: "templateName", parent: name, pattern: "^[0-9A-Za-z]+[0-9A-Za-z_\\-]*$")
        }

        private enum CodingKeys: String, CodingKey {
            case majorVersion
            case minorVersion
            case templateName
        }
    }

    public struct GetEnvironmentTemplateVersionOutput: AWSDecodableShape {
        /// The environment template version detail data that's returned by Proton.
        public let environmentTemplateVersion: EnvironmentTemplateVersion

        public init(environmentTemplateVersion: EnvironmentTemplateVersion) {
            self.environmentTemplateVersion = environmentTemplateVersion
        }

        private enum CodingKeys: String, CodingKey {
            case environmentTemplateVersion
        }
    }

    public struct GetRepositoryInput: AWSEncodableShape {
        /// The repository name, for example myrepos/myrepo.
        public let name: String
        /// The repository provider.
        public let provider: RepositoryProvider

        public init(name: String, provider: RepositoryProvider) {
            self.name = name
            self.provider = provider
        }

        public func validate(name: String) throws {
            try self.validate(self.name, name: "name", parent: name, max: 100)
            try self.validate(self.name, name: "name", parent: name, min: 1)
            try self.validate(self.name, name: "name", parent: name, pattern: "[A-Za-z0-9_.-].*/[A-Za-z0-9_.-].*")
        }

        private enum CodingKeys: String, CodingKey {
            case name
            case provider
        }
    }

    public struct GetRepositoryOutput: AWSDecodableShape {
        /// The repository detail data that's returned by Proton.
        public let repository: Repository

        public init(repository: Repository) {
            self.repository = repository
        }

        private enum CodingKeys: String, CodingKey {
            case repository
        }
    }

    public struct GetRepositorySyncStatusInput: AWSEncodableShape {
        /// The repository branch.
        public let branch: String
        /// The repository name.
        public let repositoryName: String
        /// The repository provider.
        public let repositoryProvider: RepositoryProvider
        /// The repository sync type.
        public let syncType: SyncType

        public init(branch: String, repositoryName: String, repositoryProvider: RepositoryProvider, syncType: SyncType) {
            self.branch = branch
            self.repositoryName = repositoryName
            self.repositoryProvider = repositoryProvider
            self.syncType = syncType
        }

        public func validate(name: String) throws {
            try self.validate(self.branch, name: "branch", parent: name, max: 200)
            try self.validate(self.branch, name: "branch", parent: name, min: 1)
            try self.validate(self.repositoryName, name: "repositoryName", parent: name, max: 100)
            try self.validate(self.repositoryName, name: "repositoryName", parent: name, min: 1)
            try self.validate(self.repositoryName, name: "repositoryName", parent: name, pattern: "[A-Za-z0-9_.-].*/[A-Za-z0-9_.-].*")
        }

        private enum CodingKeys: String, CodingKey {
            case branch
            case repositoryName
            case repositoryProvider
            case syncType
        }
    }

    public struct GetRepositorySyncStatusOutput: AWSDecodableShape {
        /// The repository sync status detail data that's returned by Proton.
        public let latestSync: RepositorySyncAttempt?

        public init(latestSync: RepositorySyncAttempt? = nil) {
            self.latestSync = latestSync
        }

        private enum CodingKeys: String, CodingKey {
            case latestSync
        }
    }

    public struct GetServiceInput: AWSEncodableShape {
        /// The name of the service that you want to get the detail data for.
        public let name: String

        public init(name: String) {
            self.name = name
        }

        public func validate(name: String) throws {
            try self.validate(self.name, name: "name", parent: name, max: 100)
            try self.validate(self.name, name: "name", parent: name, min: 1)
            try self.validate(self.name, name: "name", parent: name, pattern: "^[0-9A-Za-z]+[0-9A-Za-z_\\-]*$")
        }

        private enum CodingKeys: String, CodingKey {
            case name
        }
    }

    public struct GetServiceInstanceInput: AWSEncodableShape {
        /// The name of a service instance that you want to get the detail data for.
        public let name: String
        /// The name of the service that the service instance belongs to.
        public let serviceName: String

        public init(name: String, serviceName: String) {
            self.name = name
            self.serviceName = serviceName
        }

        public func validate(name: String) throws {
            try self.validate(self.name, name: "name", parent: name, max: 100)
            try self.validate(self.name, name: "name", parent: name, min: 1)
            try self.validate(self.name, name: "name", parent: name, pattern: "^[0-9A-Za-z]+[0-9A-Za-z_\\-]*$")
            try self.validate(self.serviceName, name: "serviceName", parent: name, max: 100)
            try self.validate(self.serviceName, name: "serviceName", parent: name, min: 1)
            try self.validate(self.serviceName, name: "serviceName", parent: name, pattern: "^[0-9A-Za-z]+[0-9A-Za-z_\\-]*$")
        }

        private enum CodingKeys: String, CodingKey {
            case name
            case serviceName
        }
    }

    public struct GetServiceInstanceOutput: AWSDecodableShape {
        /// The service instance detail data that's returned by Proton.
        public let serviceInstance: ServiceInstance

        public init(serviceInstance: ServiceInstance) {
            self.serviceInstance = serviceInstance
        }

        private enum CodingKeys: String, CodingKey {
            case serviceInstance
        }
    }

    public struct GetServiceOutput: AWSDecodableShape {
        /// The service detail data that's returned by Proton.
        public let service: Service?

        public init(service: Service? = nil) {
            self.service = service
        }

        private enum CodingKeys: String, CodingKey {
            case service
        }
    }

    public struct GetServiceTemplateInput: AWSEncodableShape {
        /// The name of the service template that you want to get detail data for.
        public let name: String

        public init(name: String) {
            self.name = name
        }

        public func validate(name: String) throws {
            try self.validate(self.name, name: "name", parent: name, max: 100)
            try self.validate(self.name, name: "name", parent: name, min: 1)
            try self.validate(self.name, name: "name", parent: name, pattern: "^[0-9A-Za-z]+[0-9A-Za-z_\\-]*$")
        }

        private enum CodingKeys: String, CodingKey {
            case name
        }
    }

    public struct GetServiceTemplateOutput: AWSDecodableShape {
        /// The service template detail data that's returned by Proton.
        public let serviceTemplate: ServiceTemplate

        public init(serviceTemplate: ServiceTemplate) {
            self.serviceTemplate = serviceTemplate
        }

        private enum CodingKeys: String, CodingKey {
            case serviceTemplate
        }
    }

    public struct GetServiceTemplateVersionInput: AWSEncodableShape {
        /// To view service template major version detail data, include major Version.
        public let majorVersion: String
        /// To view service template minor version detail data, include minorVersion.
        public let minorVersion: String
        /// The name of the service template.
        public let templateName: String

        public init(majorVersion: String, minorVersion: String, templateName: String) {
            self.majorVersion = majorVersion
            self.minorVersion = minorVersion
            self.templateName = templateName
        }

        public func validate(name: String) throws {
            try self.validate(self.majorVersion, name: "majorVersion", parent: name, max: 20)
            try self.validate(self.majorVersion, name: "majorVersion", parent: name, min: 1)
            try self.validate(self.majorVersion, name: "majorVersion", parent: name, pattern: "^(0|([1-9]{1}\\d*))$")
            try self.validate(self.minorVersion, name: "minorVersion", parent: name, max: 20)
            try self.validate(self.minorVersion, name: "minorVersion", parent: name, min: 1)
            try self.validate(self.minorVersion, name: "minorVersion", parent: name, pattern: "^(0|([1-9]{1}\\d*))$")
            try self.validate(self.templateName, name: "templateName", parent: name, max: 100)
            try self.validate(self.templateName, name: "templateName", parent: name, min: 1)
            try self.validate(self.templateName, name: "templateName", parent: name, pattern: "^[0-9A-Za-z]+[0-9A-Za-z_\\-]*$")
        }

        private enum CodingKeys: String, CodingKey {
            case majorVersion
            case minorVersion
            case templateName
        }
    }

    public struct GetServiceTemplateVersionOutput: AWSDecodableShape {
        /// The service template version detail data that's returned by Proton.
        public let serviceTemplateVersion: ServiceTemplateVersion

        public init(serviceTemplateVersion: ServiceTemplateVersion) {
            self.serviceTemplateVersion = serviceTemplateVersion
        }

        private enum CodingKeys: String, CodingKey {
            case serviceTemplateVersion
        }
    }

    public struct GetTemplateSyncConfigInput: AWSEncodableShape {
        /// The template name.
        public let templateName: String
        /// The template type.
        public let templateType: TemplateType

        public init(templateName: String, templateType: TemplateType) {
            self.templateName = templateName
            self.templateType = templateType
        }

        public func validate(name: String) throws {
            try self.validate(self.templateName, name: "templateName", parent: name, max: 100)
            try self.validate(self.templateName, name: "templateName", parent: name, min: 1)
            try self.validate(self.templateName, name: "templateName", parent: name, pattern: "^[0-9A-Za-z]+[0-9A-Za-z_\\-]*$")
        }

        private enum CodingKeys: String, CodingKey {
            case templateName
            case templateType
        }
    }

    public struct GetTemplateSyncConfigOutput: AWSDecodableShape {
        /// The template sync configuration detail data that's returned by Proton.
        public let templateSyncConfig: TemplateSyncConfig?

        public init(templateSyncConfig: TemplateSyncConfig? = nil) {
            self.templateSyncConfig = templateSyncConfig
        }

        private enum CodingKeys: String, CodingKey {
            case templateSyncConfig
        }
    }

    public struct GetTemplateSyncStatusInput: AWSEncodableShape {
        /// The template name.
        public let templateName: String
        /// The template type.
        public let templateType: TemplateType
        /// The template major version.
        public let templateVersion: String

        public init(templateName: String, templateType: TemplateType, templateVersion: String) {
            self.templateName = templateName
            self.templateType = templateType
            self.templateVersion = templateVersion
        }

        public func validate(name: String) throws {
            try self.validate(self.templateName, name: "templateName", parent: name, max: 100)
            try self.validate(self.templateName, name: "templateName", parent: name, min: 1)
            try self.validate(self.templateName, name: "templateName", parent: name, pattern: "^[0-9A-Za-z]+[0-9A-Za-z_\\-]*$")
            try self.validate(self.templateVersion, name: "templateVersion", parent: name, max: 20)
            try self.validate(self.templateVersion, name: "templateVersion", parent: name, min: 1)
            try self.validate(self.templateVersion, name: "templateVersion", parent: name, pattern: "^(0|([1-9]{1}\\d*))$")
        }

        private enum CodingKeys: String, CodingKey {
            case templateName
            case templateType
            case templateVersion
        }
    }

    public struct GetTemplateSyncStatusOutput: AWSDecodableShape {
        /// The template sync desired state that's returned by Proton.
        public let desiredState: Revision?
        /// The details of the last successful sync that's returned by Proton.
        public let latestSuccessfulSync: ResourceSyncAttempt?
        /// The details of the last sync that's returned by Proton.
        public let latestSync: ResourceSyncAttempt?

        public init(desiredState: Revision? = nil, latestSuccessfulSync: ResourceSyncAttempt? = nil, latestSync: ResourceSyncAttempt? = nil) {
            self.desiredState = desiredState
            self.latestSuccessfulSync = latestSuccessfulSync
            self.latestSync = latestSync
        }

        private enum CodingKeys: String, CodingKey {
            case desiredState
            case latestSuccessfulSync
            case latestSync
        }
    }

    public struct ListEnvironmentAccountConnectionsInput: AWSEncodableShape {
        /// The environment name that's associated with each listed environment account connection.
        public let environmentName: String?
        /// The maximum number of environment account connections to list.
        public let maxResults: Int?
        /// A token that indicates the location of the next environment account connection in the array of environment account connections, after the list of environment account connections that was previously requested.
        public let nextToken: String?
        /// The type of account making the ListEnvironmentAccountConnections request.
        public let requestedBy: EnvironmentAccountConnectionRequesterAccountType
        /// The status details for each listed environment account connection.
        public let statuses: [EnvironmentAccountConnectionStatus]?

        public init(environmentName: String? = nil, maxResults: Int? = nil, nextToken: String? = nil, requestedBy: EnvironmentAccountConnectionRequesterAccountType, statuses: [EnvironmentAccountConnectionStatus]? = nil) {
            self.environmentName = environmentName
            self.maxResults = maxResults
            self.nextToken = nextToken
            self.requestedBy = requestedBy
            self.statuses = statuses
        }

        public func validate(name: String) throws {
            try self.validate(self.environmentName, name: "environmentName", parent: name, max: 100)
            try self.validate(self.environmentName, name: "environmentName", parent: name, min: 1)
            try self.validate(self.environmentName, name: "environmentName", parent: name, pattern: "^[0-9A-Za-z]+[0-9A-Za-z_\\-]*$")
            try self.validate(self.maxResults, name: "maxResults", parent: name, max: 100)
            try self.validate(self.maxResults, name: "maxResults", parent: name, min: 1)
            try self.validate(self.nextToken, name: "nextToken", parent: name, pattern: "^[A-Za-z0-9+=/]+$")
        }

        private enum CodingKeys: String, CodingKey {
            case environmentName
            case maxResults
            case nextToken
            case requestedBy
            case statuses
        }
    }

    public struct ListEnvironmentAccountConnectionsOutput: AWSDecodableShape {
        /// An array of environment account connections with details that's returned by Proton.
        public let environmentAccountConnections: [EnvironmentAccountConnectionSummary]
        /// A token that indicates the location of the next environment account connection in the array of environment account connections, after the current requested list of environment account connections.
        public let nextToken: String?

        public init(environmentAccountConnections: [EnvironmentAccountConnectionSummary], nextToken: String? = nil) {
            self.environmentAccountConnections = environmentAccountConnections
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case environmentAccountConnections
            case nextToken
        }
    }

    public struct ListEnvironmentOutputsInput: AWSEncodableShape {
        /// The environment name.
        public let environmentName: String
        /// A token that indicates the location of the next environment output in the array of environment outputs, after the list of environment outputs that was previously requested.
        public let nextToken: String?

        public init(environmentName: String, nextToken: String? = nil) {
            self.environmentName = environmentName
            self.nextToken = nextToken
        }

        public func validate(name: String) throws {
            try self.validate(self.environmentName, name: "environmentName", parent: name, max: 100)
            try self.validate(self.environmentName, name: "environmentName", parent: name, min: 1)
            try self.validate(self.environmentName, name: "environmentName", parent: name, pattern: "^[0-9A-Za-z]+[0-9A-Za-z_\\-]*$")
            try self.validate(self.nextToken, name: "nextToken", parent: name, max: 0)
        }

        private enum CodingKeys: String, CodingKey {
            case environmentName
            case nextToken
        }
    }

    public struct ListEnvironmentOutputsOutput: AWSDecodableShape {
        /// A token that indicates the location of the next environment output in the array of environment outputs, after the current requested list of environment outputs.
        public let nextToken: String?
        /// An array of environment outputs with detail data.
        public let outputs: [Output]

        public init(nextToken: String? = nil, outputs: [Output]) {
            self.nextToken = nextToken
            self.outputs = outputs
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken
            case outputs
        }
    }

    public struct ListEnvironmentProvisionedResourcesInput: AWSEncodableShape {
        /// The environment name.
        public let environmentName: String
        /// A token that indicates the location of the next environment provisioned resource in the array of environment provisioned resources, after the list of environment provisioned resources that was previously requested.
        public let nextToken: String?

        public init(environmentName: String, nextToken: String? = nil) {
            self.environmentName = environmentName
            self.nextToken = nextToken
        }

        public func validate(name: String) throws {
            try self.validate(self.environmentName, name: "environmentName", parent: name, max: 100)
            try self.validate(self.environmentName, name: "environmentName", parent: name, min: 1)
            try self.validate(self.environmentName, name: "environmentName", parent: name, pattern: "^[0-9A-Za-z]+[0-9A-Za-z_\\-]*$")
            try self.validate(self.nextToken, name: "nextToken", parent: name, max: 0)
        }

        private enum CodingKeys: String, CodingKey {
            case environmentName
            case nextToken
        }
    }

    public struct ListEnvironmentProvisionedResourcesOutput: AWSDecodableShape {
        /// A token that indicates the location of the next environment provisioned resource in the array of provisioned resources, after the current requested list of environment provisioned resources.
        public let nextToken: String?
        /// An array of environment provisioned resources.
        public let provisionedResources: [ProvisionedResource]

        public init(nextToken: String? = nil, provisionedResources: [ProvisionedResource]) {
            self.nextToken = nextToken
            self.provisionedResources = provisionedResources
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken
            case provisionedResources
        }
    }

    public struct ListEnvironmentTemplateVersionsInput: AWSEncodableShape {
        /// To view a list of minor of versions under a major version of an environment template, include major Version. To view a list of major versions of an environment template, exclude major Version.
        public let majorVersion: String?
        /// The maximum number of major or minor versions of an environment template to list.
        public let maxResults: Int?
        /// A token that indicates the location of the next major or minor version in the array of major or minor versions of an environment template, after the list of major or minor versions that was previously requested.
        public let nextToken: String?
        /// The name of the environment template.
        public let templateName: String

        public init(majorVersion: String? = nil, maxResults: Int? = nil, nextToken: String? = nil, templateName: String) {
            self.majorVersion = majorVersion
            self.maxResults = maxResults
            self.nextToken = nextToken
            self.templateName = templateName
        }

        public func validate(name: String) throws {
            try self.validate(self.majorVersion, name: "majorVersion", parent: name, max: 20)
            try self.validate(self.majorVersion, name: "majorVersion", parent: name, min: 1)
            try self.validate(self.majorVersion, name: "majorVersion", parent: name, pattern: "^(0|([1-9]{1}\\d*))$")
            try self.validate(self.maxResults, name: "maxResults", parent: name, max: 100)
            try self.validate(self.maxResults, name: "maxResults", parent: name, min: 1)
            try self.validate(self.nextToken, name: "nextToken", parent: name, pattern: "^[A-Za-z0-9+=/]+$")
            try self.validate(self.templateName, name: "templateName", parent: name, max: 100)
            try self.validate(self.templateName, name: "templateName", parent: name, min: 1)
            try self.validate(self.templateName, name: "templateName", parent: name, pattern: "^[0-9A-Za-z]+[0-9A-Za-z_\\-]*$")
        }

        private enum CodingKeys: String, CodingKey {
            case majorVersion
            case maxResults
            case nextToken
            case templateName
        }
    }

    public struct ListEnvironmentTemplateVersionsOutput: AWSDecodableShape {
        /// A token that indicates the location of the next major or minor version in the array of major or minor versions of an environment template, after the list of major or minor versions that was previously requested.
        public let nextToken: String?
        /// An array of major or minor versions of an environment template detail data.
        public let templateVersions: [EnvironmentTemplateVersionSummary]

        public init(nextToken: String? = nil, templateVersions: [EnvironmentTemplateVersionSummary]) {
            self.nextToken = nextToken
            self.templateVersions = templateVersions
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken
            case templateVersions
        }
    }

    public struct ListEnvironmentTemplatesInput: AWSEncodableShape {
        /// The maximum number of environment templates to list.
        public let maxResults: Int?
        /// A token that indicates the location of the next environment template in the array of environment templates, after the list of environment templates that was previously requested.
        public let nextToken: String?

        public init(maxResults: Int? = nil, nextToken: String? = nil) {
            self.maxResults = maxResults
            self.nextToken = nextToken
        }

        public func validate(name: String) throws {
            try self.validate(self.maxResults, name: "maxResults", parent: name, max: 100)
            try self.validate(self.maxResults, name: "maxResults", parent: name, min: 1)
            try self.validate(self.nextToken, name: "nextToken", parent: name, pattern: "^[A-Za-z0-9+=/]+$")
        }

        private enum CodingKeys: String, CodingKey {
            case maxResults
            case nextToken
        }
    }

    public struct ListEnvironmentTemplatesOutput: AWSDecodableShape {
        /// A token that indicates the location of the next environment template in the array of environment templates, after the current requested list of environment templates.
        public let nextToken: String?
        /// An array of environment templates with detail data.
        public let templates: [EnvironmentTemplateSummary]

        public init(nextToken: String? = nil, templates: [EnvironmentTemplateSummary]) {
            self.nextToken = nextToken
            self.templates = templates
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken
            case templates
        }
    }

    public struct ListEnvironmentsInput: AWSEncodableShape {
        /// An array of the versions of the environment template.
        public let environmentTemplates: [EnvironmentTemplateFilter]?
        /// The maximum number of environments to list.
        public let maxResults: Int?
        /// A token that indicates the location of the next environment in the array of environments, after the list of environments that was previously requested.
        public let nextToken: String?

        public init(environmentTemplates: [EnvironmentTemplateFilter]? = nil, maxResults: Int? = nil, nextToken: String? = nil) {
            self.environmentTemplates = environmentTemplates
            self.maxResults = maxResults
            self.nextToken = nextToken
        }

        public func validate(name: String) throws {
            try self.environmentTemplates?.forEach {
                try $0.validate(name: "\(name).environmentTemplates[]")
            }
            try self.validate(self.maxResults, name: "maxResults", parent: name, max: 100)
            try self.validate(self.maxResults, name: "maxResults", parent: name, min: 1)
            try self.validate(self.nextToken, name: "nextToken", parent: name, pattern: "^[A-Za-z0-9+=/]+$")
        }

        private enum CodingKeys: String, CodingKey {
            case environmentTemplates
            case maxResults
            case nextToken
        }
    }

    public struct ListEnvironmentsOutput: AWSDecodableShape {
        /// An array of environment detail data summaries.
        public let environments: [EnvironmentSummary]
        /// A token that indicates the location of the next environment in the array of environments, after the current requested list of environments.
        public let nextToken: String?

        public init(environments: [EnvironmentSummary], nextToken: String? = nil) {
            self.environments = environments
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case environments
            case nextToken
        }
    }

    public struct ListRepositoriesInput: AWSEncodableShape {
        /// The maximum number of repositories to list.
        public let maxResults: Int?
        /// A token that indicates the location of the next repository in the array of repositories, after the list of repositories previously requested.
        public let nextToken: String?

        public init(maxResults: Int? = nil, nextToken: String? = nil) {
            self.maxResults = maxResults
            self.nextToken = nextToken
        }

        public func validate(name: String) throws {
            try self.validate(self.maxResults, name: "maxResults", parent: name, max: 100)
            try self.validate(self.maxResults, name: "maxResults", parent: name, min: 1)
            try self.validate(self.nextToken, name: "nextToken", parent: name, pattern: "^[A-Za-z0-9+=/]+$")
        }

        private enum CodingKeys: String, CodingKey {
            case maxResults
            case nextToken
        }
    }

    public struct ListRepositoriesOutput: AWSDecodableShape {
        /// A token that indicates the location of the next repository in the array of repositories, after the current requested list of repositories.
        public let nextToken: String?
        /// An array of repositories.
        public let repositories: [RepositorySummary]

        public init(nextToken: String? = nil, repositories: [RepositorySummary]) {
            self.nextToken = nextToken
            self.repositories = repositories
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken
            case repositories
        }
    }

    public struct ListRepositorySyncDefinitionsInput: AWSEncodableShape {
        /// A token that indicates the location of the next repository sync definition in the array of repository sync definitions, after the list of repository sync definitions previously requested.
        public let nextToken: String?
        /// The repository name.
        public let repositoryName: String
        /// The repository provider.
        public let repositoryProvider: RepositoryProvider
        /// The sync type. The only supported value is TEMPLATE_SYNC.
        public let syncType: SyncType

        public init(nextToken: String? = nil, repositoryName: String, repositoryProvider: RepositoryProvider, syncType: SyncType) {
            self.nextToken = nextToken
            self.repositoryName = repositoryName
            self.repositoryProvider = repositoryProvider
            self.syncType = syncType
        }

        public func validate(name: String) throws {
            try self.validate(self.nextToken, name: "nextToken", parent: name, max: 0)
            try self.validate(self.repositoryName, name: "repositoryName", parent: name, max: 100)
            try self.validate(self.repositoryName, name: "repositoryName", parent: name, min: 1)
            try self.validate(self.repositoryName, name: "repositoryName", parent: name, pattern: "[A-Za-z0-9_.-].*/[A-Za-z0-9_.-].*")
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken
            case repositoryName
            case repositoryProvider
            case syncType
        }
    }

    public struct ListRepositorySyncDefinitionsOutput: AWSDecodableShape {
        /// A token that indicates the location of the next repository sync definition in the array of repository sync definitions, after the current requested list of repository sync definitions.
        public let nextToken: String?
        /// An array of repository sync definitions.
        public let syncDefinitions: [RepositorySyncDefinition]

        public init(nextToken: String? = nil, syncDefinitions: [RepositorySyncDefinition]) {
            self.nextToken = nextToken
            self.syncDefinitions = syncDefinitions
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken
            case syncDefinitions
        }
    }

    public struct ListServiceInstanceOutputsInput: AWSEncodableShape {
        /// A token that indicates the location of the next output in the array of outputs, after the list of outputs that was previously requested.
        public let nextToken: String?
        /// The service instance name.
        public let serviceInstanceName: String
        /// The service name.
        public let serviceName: String

        public init(nextToken: String? = nil, serviceInstanceName: String, serviceName: String) {
            self.nextToken = nextToken
            self.serviceInstanceName = serviceInstanceName
            self.serviceName = serviceName
        }

        public func validate(name: String) throws {
            try self.validate(self.nextToken, name: "nextToken", parent: name, max: 0)
            try self.validate(self.serviceInstanceName, name: "serviceInstanceName", parent: name, max: 100)
            try self.validate(self.serviceInstanceName, name: "serviceInstanceName", parent: name, min: 1)
            try self.validate(self.serviceInstanceName, name: "serviceInstanceName", parent: name, pattern: "^[0-9A-Za-z]+[0-9A-Za-z_\\-]*$")
            try self.validate(self.serviceName, name: "serviceName", parent: name, max: 100)
            try self.validate(self.serviceName, name: "serviceName", parent: name, min: 1)
            try self.validate(self.serviceName, name: "serviceName", parent: name, pattern: "^[0-9A-Za-z]+[0-9A-Za-z_\\-]*$")
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken
            case serviceInstanceName
            case serviceName
        }
    }

    public struct ListServiceInstanceOutputsOutput: AWSDecodableShape {
        /// A token that indicates the location of the next output in the array of outputs, after the current requested list of outputs.
        public let nextToken: String?
        /// An array of service instance infrastructure as code outputs.
        public let outputs: [Output]

        public init(nextToken: String? = nil, outputs: [Output]) {
            self.nextToken = nextToken
            self.outputs = outputs
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken
            case outputs
        }
    }

    public struct ListServiceInstanceProvisionedResourcesInput: AWSEncodableShape {
        /// A token that indicates the location of the next provisioned resource in the array of provisioned resources, after the list of provisioned resources that was previously requested.
        public let nextToken: String?
        /// The service instance name.
        public let serviceInstanceName: String
        /// The service name.
        public let serviceName: String

        public init(nextToken: String? = nil, serviceInstanceName: String, serviceName: String) {
            self.nextToken = nextToken
            self.serviceInstanceName = serviceInstanceName
            self.serviceName = serviceName
        }

        public func validate(name: String) throws {
            try self.validate(self.nextToken, name: "nextToken", parent: name, max: 0)
            try self.validate(self.serviceInstanceName, name: "serviceInstanceName", parent: name, max: 100)
            try self.validate(self.serviceInstanceName, name: "serviceInstanceName", parent: name, min: 1)
            try self.validate(self.serviceInstanceName, name: "serviceInstanceName", parent: name, pattern: "^[0-9A-Za-z]+[0-9A-Za-z_\\-]*$")
            try self.validate(self.serviceName, name: "serviceName", parent: name, max: 100)
            try self.validate(self.serviceName, name: "serviceName", parent: name, min: 1)
            try self.validate(self.serviceName, name: "serviceName", parent: name, pattern: "^[0-9A-Za-z]+[0-9A-Za-z_\\-]*$")
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken
            case serviceInstanceName
            case serviceName
        }
    }

    public struct ListServiceInstanceProvisionedResourcesOutput: AWSDecodableShape {
        /// A token that indicates the location of the next provisioned resource in the array of provisioned resources, after the current requested list of provisioned resources.
        public let nextToken: String?
        /// An array of provisioned resources for a service instance.
        public let provisionedResources: [ProvisionedResource]

        public init(nextToken: String? = nil, provisionedResources: [ProvisionedResource]) {
            self.nextToken = nextToken
            self.provisionedResources = provisionedResources
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken
            case provisionedResources
        }
    }

    public struct ListServiceInstancesInput: AWSEncodableShape {
        /// The maximum number of service instances to list.
        public let maxResults: Int?
        /// A token that indicates the location of the next service in the array of service instances, after the list of service instances that was previously requested.
        public let nextToken: String?
        /// The name of the service that the service instance belongs to.
        public let serviceName: String?

        public init(maxResults: Int? = nil, nextToken: String? = nil, serviceName: String? = nil) {
            self.maxResults = maxResults
            self.nextToken = nextToken
            self.serviceName = serviceName
        }

        public func validate(name: String) throws {
            try self.validate(self.maxResults, name: "maxResults", parent: name, max: 100)
            try self.validate(self.maxResults, name: "maxResults", parent: name, min: 1)
            try self.validate(self.nextToken, name: "nextToken", parent: name, pattern: "^[A-Za-z0-9+=/]+$")
            try self.validate(self.serviceName, name: "serviceName", parent: name, max: 100)
            try self.validate(self.serviceName, name: "serviceName", parent: name, min: 1)
            try self.validate(self.serviceName, name: "serviceName", parent: name, pattern: "^[0-9A-Za-z]+[0-9A-Za-z_\\-]*$")
        }

        private enum CodingKeys: String, CodingKey {
            case maxResults
            case nextToken
            case serviceName
        }
    }

    public struct ListServiceInstancesOutput: AWSDecodableShape {
        /// A token that indicates the location of the next service instance in the array of service instances, after the current requested list of service instances.
        public let nextToken: String?
        /// An array of service instances with summaries of detail data.
        public let serviceInstances: [ServiceInstanceSummary]

        public init(nextToken: String? = nil, serviceInstances: [ServiceInstanceSummary]) {
            self.nextToken = nextToken
            self.serviceInstances = serviceInstances
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken
            case serviceInstances
        }
    }

    public struct ListServicePipelineOutputsInput: AWSEncodableShape {
        /// A token that indicates the location of the next output in the array of outputs, after the list of outputs that was previously requested.
        public let nextToken: String?
        /// The service name.
        public let serviceName: String

        public init(nextToken: String? = nil, serviceName: String) {
            self.nextToken = nextToken
            self.serviceName = serviceName
        }

        public func validate(name: String) throws {
            try self.validate(self.nextToken, name: "nextToken", parent: name, max: 0)
            try self.validate(self.serviceName, name: "serviceName", parent: name, max: 100)
            try self.validate(self.serviceName, name: "serviceName", parent: name, min: 1)
            try self.validate(self.serviceName, name: "serviceName", parent: name, pattern: "^[0-9A-Za-z]+[0-9A-Za-z_\\-]*$")
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken
            case serviceName
        }
    }

    public struct ListServicePipelineOutputsOutput: AWSDecodableShape {
        /// A token that indicates the location of the next output in the array of outputs, after the current requested list of outputs.
        public let nextToken: String?
        /// An array of outputs.
        public let outputs: [Output]

        public init(nextToken: String? = nil, outputs: [Output]) {
            self.nextToken = nextToken
            self.outputs = outputs
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken
            case outputs
        }
    }

    public struct ListServicePipelineProvisionedResourcesInput: AWSEncodableShape {
        /// A token that indicates the location of the next provisioned resource in the array of provisioned resources, after the list of provisioned resources that was previously requested.
        public let nextToken: String?
        /// The service name.
        public let serviceName: String

        public init(nextToken: String? = nil, serviceName: String) {
            self.nextToken = nextToken
            self.serviceName = serviceName
        }

        public func validate(name: String) throws {
            try self.validate(self.nextToken, name: "nextToken", parent: name, max: 0)
            try self.validate(self.serviceName, name: "serviceName", parent: name, max: 100)
            try self.validate(self.serviceName, name: "serviceName", parent: name, min: 1)
            try self.validate(self.serviceName, name: "serviceName", parent: name, pattern: "^[0-9A-Za-z]+[0-9A-Za-z_\\-]*$")
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken
            case serviceName
        }
    }

    public struct ListServicePipelineProvisionedResourcesOutput: AWSDecodableShape {
        /// A token that indicates the location of the next provisioned resource in the array of provisioned resources, after the current requested list of provisioned resources.
        public let nextToken: String?
        /// An array of provisioned resources for a service and pipeline.
        public let provisionedResources: [ProvisionedResource]

        public init(nextToken: String? = nil, provisionedResources: [ProvisionedResource]) {
            self.nextToken = nextToken
            self.provisionedResources = provisionedResources
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken
            case provisionedResources
        }
    }

    public struct ListServiceTemplateVersionsInput: AWSEncodableShape {
        /// To view a list of minor of versions under a major version of a service template, include major Version. To view a list of major versions of a service template, exclude major Version.
        public let majorVersion: String?
        /// The maximum number of major or minor versions of a service template to list.
        public let maxResults: Int?
        /// A token that indicates the location of the next major or minor version in the array of major or minor versions of a service template, after the list of major or minor versions that was previously requested.
        public let nextToken: String?
        /// The name of the service template.
        public let templateName: String

        public init(majorVersion: String? = nil, maxResults: Int? = nil, nextToken: String? = nil, templateName: String) {
            self.majorVersion = majorVersion
            self.maxResults = maxResults
            self.nextToken = nextToken
            self.templateName = templateName
        }

        public func validate(name: String) throws {
            try self.validate(self.majorVersion, name: "majorVersion", parent: name, max: 20)
            try self.validate(self.majorVersion, name: "majorVersion", parent: name, min: 1)
            try self.validate(self.majorVersion, name: "majorVersion", parent: name, pattern: "^(0|([1-9]{1}\\d*))$")
            try self.validate(self.maxResults, name: "maxResults", parent: name, max: 100)
            try self.validate(self.maxResults, name: "maxResults", parent: name, min: 1)
            try self.validate(self.nextToken, name: "nextToken", parent: name, pattern: "^[A-Za-z0-9+=/]+$")
            try self.validate(self.templateName, name: "templateName", parent: name, max: 100)
            try self.validate(self.templateName, name: "templateName", parent: name, min: 1)
            try self.validate(self.templateName, name: "templateName", parent: name, pattern: "^[0-9A-Za-z]+[0-9A-Za-z_\\-]*$")
        }

        private enum CodingKeys: String, CodingKey {
            case majorVersion
            case maxResults
            case nextToken
            case templateName
        }
    }

    public struct ListServiceTemplateVersionsOutput: AWSDecodableShape {
        /// A token that indicates the location of the next major or minor version in the array of major or minor versions of a service template, after the current requested list of service major or minor versions.
        public let nextToken: String?
        /// An array of major or minor versions of a service template with detail data.
        public let templateVersions: [ServiceTemplateVersionSummary]

        public init(nextToken: String? = nil, templateVersions: [ServiceTemplateVersionSummary]) {
            self.nextToken = nextToken
            self.templateVersions = templateVersions
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken
            case templateVersions
        }
    }

    public struct ListServiceTemplatesInput: AWSEncodableShape {
        /// The maximum number of service templates to list.
        public let maxResults: Int?
        /// A token that indicates the location of the next service template in the array of service templates, after the list of service templates previously requested.
        public let nextToken: String?

        public init(maxResults: Int? = nil, nextToken: String? = nil) {
            self.maxResults = maxResults
            self.nextToken = nextToken
        }

        public func validate(name: String) throws {
            try self.validate(self.maxResults, name: "maxResults", parent: name, max: 100)
            try self.validate(self.maxResults, name: "maxResults", parent: name, min: 1)
            try self.validate(self.nextToken, name: "nextToken", parent: name, pattern: "^[A-Za-z0-9+=/]+$")
        }

        private enum CodingKeys: String, CodingKey {
            case maxResults
            case nextToken
        }
    }

    public struct ListServiceTemplatesOutput: AWSDecodableShape {
        /// A token that indicates the location of the next service template in the array of service templates, after the current requested list of service templates.
        public let nextToken: String?
        /// An array of service templates with detail data.
        public let templates: [ServiceTemplateSummary]

        public init(nextToken: String? = nil, templates: [ServiceTemplateSummary]) {
            self.nextToken = nextToken
            self.templates = templates
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken
            case templates
        }
    }

    public struct ListServicesInput: AWSEncodableShape {
        /// The maximum number of services to list.
        public let maxResults: Int?
        /// A token that indicates the location of the next service in the array of services, after the list of services that was previously requested.
        public let nextToken: String?

        public init(maxResults: Int? = nil, nextToken: String? = nil) {
            self.maxResults = maxResults
            self.nextToken = nextToken
        }

        public func validate(name: String) throws {
            try self.validate(self.maxResults, name: "maxResults", parent: name, max: 100)
            try self.validate(self.maxResults, name: "maxResults", parent: name, min: 1)
            try self.validate(self.nextToken, name: "nextToken", parent: name, pattern: "^[A-Za-z0-9+=/]+$")
        }

        private enum CodingKeys: String, CodingKey {
            case maxResults
            case nextToken
        }
    }

    public struct ListServicesOutput: AWSDecodableShape {
        /// A token that indicates the location of the next service in the array of services, after the current requested list of services.
        public let nextToken: String?
        /// An array of services with summaries of detail data.
        public let services: [ServiceSummary]

        public init(nextToken: String? = nil, services: [ServiceSummary]) {
            self.nextToken = nextToken
            self.services = services
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken
            case services
        }
    }

    public struct ListTagsForResourceInput: AWSEncodableShape {
        public static var _encoding = [
            AWSMemberEncoding(label: "maxResults", location: .querystring("maxResults")),
            AWSMemberEncoding(label: "nextToken", location: .querystring("nextToken")),
            AWSMemberEncoding(label: "resourceArn", location: .querystring("resourceArn"))
        ]

        /// The maximum number of tags to list.
        public let maxResults: Int?
        /// A token that indicates the location of the next resource tag in the array of resource tags, after the list of resource tags that was previously requested.
        public let nextToken: String?
        /// The Amazon Resource Name (ARN) of the resource for the listed tags.
        public let resourceArn: String

        public init(maxResults: Int? = nil, nextToken: String? = nil, resourceArn: String) {
            self.maxResults = maxResults
            self.nextToken = nextToken
            self.resourceArn = resourceArn
        }

        public func validate(name: String) throws {
            try self.validate(self.maxResults, name: "maxResults", parent: name, max: 100)
            try self.validate(self.maxResults, name: "maxResults", parent: name, min: 1)
            try self.validate(self.resourceArn, name: "resourceArn", parent: name, max: 200)
            try self.validate(self.resourceArn, name: "resourceArn", parent: name, min: 1)
        }

        private enum CodingKeys: CodingKey {}
    }

    public struct ListTagsForResourceOutput: AWSDecodableShape {
        /// A token that indicates the location of the next resource tag in the array of resource tags, after the current requested list of resource tags.
        public let nextToken: String?
        /// A list of resource tags with detail data.
        public let tags: [Tag]

        public init(nextToken: String? = nil, tags: [Tag]) {
            self.nextToken = nextToken
            self.tags = tags
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken
            case tags
        }
    }

    public struct NotifyResourceDeploymentStatusChangeInput: AWSEncodableShape {
        /// The deployment ID for your provisioned resource.
        public let deploymentId: String?
        /// The provisioned resource state change detail data that's returned by Proton.
        public let outputs: [Output]?
        /// The provisioned resource Amazon Resource Name (ARN).
        public let resourceArn: String
        /// The status of your provisioned resource.
        public let status: ResourceDeploymentStatus
        /// The deployment status message for your provisioned resource.
        public let statusMessage: String?

        public init(deploymentId: String? = nil, outputs: [Output]? = nil, resourceArn: String, status: ResourceDeploymentStatus, statusMessage: String? = nil) {
            self.deploymentId = deploymentId
            self.outputs = outputs
            self.resourceArn = resourceArn
            self.status = status
            self.statusMessage = statusMessage
        }

        public func validate(name: String) throws {
            try self.validate(self.deploymentId, name: "deploymentId", parent: name, pattern: "^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$")
            try self.outputs?.forEach {
                try $0.validate(name: "\(name).outputs[]")
            }
            try self.validate(self.resourceArn, name: "resourceArn", parent: name, max: 200)
            try self.validate(self.resourceArn, name: "resourceArn", parent: name, min: 1)
        }

        private enum CodingKeys: String, CodingKey {
            case deploymentId
            case outputs
            case resourceArn
            case status
            case statusMessage
        }
    }

    public struct NotifyResourceDeploymentStatusChangeOutput: AWSDecodableShape {
        public init() {}
    }

    public struct Output: AWSEncodableShape & AWSDecodableShape {
        /// The output key.
        public let key: String?
        /// The output value.
        public let valueString: String?

        public init(key: String? = nil, valueString: String? = nil) {
            self.key = key
            self.valueString = valueString
        }

        public func validate(name: String) throws {
            try self.validate(self.key, name: "key", parent: name, max: 1024)
            try self.validate(self.key, name: "key", parent: name, min: 1)
            try self.validate(self.valueString, name: "valueString", parent: name, max: 1024)
            try self.validate(self.valueString, name: "valueString", parent: name, min: 1)
        }

        private enum CodingKeys: String, CodingKey {
            case key
            case valueString
        }
    }

    public struct ProvisionedResource: AWSDecodableShape {
        /// The provisioned resource identifier.
        public let identifier: String?
        /// The provisioned resource name.
        public let name: String?
        /// The resource provisioning engine. At this time, CLOUDFORMATION can be used for Amazon Web Services-managed provisioning, and TERRAFORM can be used for self-managed provisioning. For more information, see Self-managed provisioning in the Proton Administrator Guide.
        public let provisioningEngine: ProvisionedResourceEngine?

        public init(identifier: String? = nil, name: String? = nil, provisioningEngine: ProvisionedResourceEngine? = nil) {
            self.identifier = identifier
            self.name = name
            self.provisioningEngine = provisioningEngine
        }

        private enum CodingKeys: String, CodingKey {
            case identifier
            case name
            case provisioningEngine
        }
    }

    public struct RejectEnvironmentAccountConnectionInput: AWSEncodableShape {
        /// The ID of the environment account connection to reject.
        public let id: String

        public init(id: String) {
            self.id = id
        }

        public func validate(name: String) throws {
            try self.validate(self.id, name: "id", parent: name, pattern: "^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$")
        }

        private enum CodingKeys: String, CodingKey {
            case id
        }
    }

    public struct RejectEnvironmentAccountConnectionOutput: AWSDecodableShape {
        /// The environment connection account detail data that's returned by Proton.
        public let environmentAccountConnection: EnvironmentAccountConnection

        public init(environmentAccountConnection: EnvironmentAccountConnection) {
            self.environmentAccountConnection = environmentAccountConnection
        }

        private enum CodingKeys: String, CodingKey {
            case environmentAccountConnection
        }
    }

    public struct Repository: AWSDecodableShape {
        /// The repository Amazon Resource Name (ARN).
        public let arn: String
        /// The repository Amazon Web Services CodeStar connection that connects Proton to your repository.
        public let connectionArn: String
        /// Your customer Amazon Web Services KMS encryption key.
        public let encryptionKey: String?
        /// The repository name.
        public let name: String
        /// The repository provider.
        public let provider: RepositoryProvider

        public init(arn: String, connectionArn: String, encryptionKey: String? = nil, name: String, provider: RepositoryProvider) {
            self.arn = arn
            self.connectionArn = connectionArn
            self.encryptionKey = encryptionKey
            self.name = name
            self.provider = provider
        }

        private enum CodingKeys: String, CodingKey {
            case arn
            case connectionArn
            case encryptionKey
            case name
            case provider
        }
    }

    public struct RepositoryBranch: AWSDecodableShape {
        /// The Amazon Resource Name (ARN) of the repository branch.
        public let arn: String
        /// The repository branch.
        public let branch: String
        /// The repository name.
        public let name: String
        /// The repository provider.
        public let provider: RepositoryProvider

        public init(arn: String, branch: String, name: String, provider: RepositoryProvider) {
            self.arn = arn
            self.branch = branch
            self.name = name
            self.provider = provider
        }

        private enum CodingKeys: String, CodingKey {
            case arn
            case branch
            case name
            case provider
        }
    }

    public struct RepositoryBranchInput: AWSEncodableShape {
        /// The repository branch.
        public let branch: String
        /// The repository name.
        public let name: String
        /// The repository provider.
        public let provider: RepositoryProvider

        public init(branch: String, name: String, provider: RepositoryProvider) {
            self.branch = branch
            self.name = name
            self.provider = provider
        }

        public func validate(name: String) throws {
            try self.validate(self.branch, name: "branch", parent: name, max: 200)
            try self.validate(self.branch, name: "branch", parent: name, min: 1)
            try self.validate(self.name, name: "name", parent: name, max: 100)
            try self.validate(self.name, name: "name", parent: name, min: 1)
            try self.validate(self.name, name: "name", parent: name, pattern: "[A-Za-z0-9_.-].*/[A-Za-z0-9_.-].*")
        }

        private enum CodingKeys: String, CodingKey {
            case branch
            case name
            case provider
        }
    }

    public struct RepositorySummary: AWSDecodableShape {
        /// The Amazon Resource Name (ARN) for a repository.
        public let arn: String
        /// The repository name.
        public let name: String
        /// The repository provider.
        public let provider: RepositoryProvider

        public init(arn: String, name: String, provider: RepositoryProvider) {
            self.arn = arn
            self.name = name
            self.provider = provider
        }

        private enum CodingKeys: String, CodingKey {
            case arn
            case name
            case provider
        }
    }

    public struct RepositorySyncAttempt: AWSDecodableShape {
        /// Detail data for sync attempt events.
        public let events: [RepositorySyncEvent]
        /// The time when the sync attempt started.
        public let startedAt: Date
        /// The sync attempt status.
        public let status: RepositorySyncStatus

        public init(events: [RepositorySyncEvent], startedAt: Date, status: RepositorySyncStatus) {
            self.events = events
            self.startedAt = startedAt
            self.status = status
        }

        private enum CodingKeys: String, CodingKey {
            case events
            case startedAt
            case status
        }
    }

    public struct RepositorySyncDefinition: AWSDecodableShape {
        /// The repository branch.
        public let branch: String
        /// The directory in the repository.
        public let directory: String
        /// The resource that is synced from.
        public let parent: String
        /// The resource that is synced to.
        public let target: String

        public init(branch: String, directory: String, parent: String, target: String) {
            self.branch = branch
            self.directory = directory
            self.parent = parent
            self.target = target
        }

        private enum CodingKeys: String, CodingKey {
            case branch
            case directory
            case parent
            case target
        }
    }

    public struct RepositorySyncEvent: AWSDecodableShape {
        /// Event detail for a repository sync attempt.
        public let event: String
        /// The external ID of the sync event.
        public let externalId: String?
        /// The time that the sync event occurred.
        public let time: Date
        /// The type of event.
        public let type: String

        public init(event: String, externalId: String? = nil, time: Date, type: String) {
            self.event = event
            self.externalId = externalId
            self.time = time
            self.type = type
        }

        private enum CodingKeys: String, CodingKey {
            case event
            case externalId
            case time
            case type
        }
    }

    public struct ResourceSyncAttempt: AWSDecodableShape {
        /// An array of events with detail data.
        public let events: [ResourceSyncEvent]
        /// Detail data for the initial repository commit, path and push.
        public let initialRevision: Revision
        /// The time when the sync attempt started.
        public let startedAt: Date
        /// The status of the sync attempt.
        public let status: ResourceSyncStatus
        /// The resource that is synced to.
        public let target: String
        /// Detail data for the target revision.
        public let targetRevision: Revision

        public init(events: [ResourceSyncEvent], initialRevision: Revision, startedAt: Date, status: ResourceSyncStatus, target: String, targetRevision: Revision) {
            self.events = events
            self.initialRevision = initialRevision
            self.startedAt = startedAt
            self.status = status
            self.target = target
            self.targetRevision = targetRevision
        }

        private enum CodingKeys: String, CodingKey {
            case events
            case initialRevision
            case startedAt
            case status
            case target
            case targetRevision
        }
    }

    public struct ResourceSyncEvent: AWSDecodableShape {
        /// A resource sync event.
        public let event: String
        /// The external ID for the event.
        public let externalId: String?
        /// The time when the event occurred.
        public let time: Date
        /// The type of event.
        public let type: String

        public init(event: String, externalId: String? = nil, time: Date, type: String) {
            self.event = event
            self.externalId = externalId
            self.time = time
            self.type = type
        }

        private enum CodingKeys: String, CodingKey {
            case event
            case externalId
            case time
            case type
        }
    }

    public struct Revision: AWSDecodableShape {
        /// The repository branch.
        public let branch: String
        /// The repository directory changed by a commit and push that activated the sync attempt.
        public let directory: String
        /// The repository name.
        public let repositoryName: String
        /// The repository provider.
        public let repositoryProvider: RepositoryProvider
        /// The secure hash algorithm (SHA) hash for the revision.
        public let sha: String

        public init(branch: String, directory: String, repositoryName: String, repositoryProvider: RepositoryProvider, sha: String) {
            self.branch = branch
            self.directory = directory
            self.repositoryName = repositoryName
            self.repositoryProvider = repositoryProvider
            self.sha = sha
        }

        private enum CodingKeys: String, CodingKey {
            case branch
            case directory
            case repositoryName
            case repositoryProvider
            case sha
        }
    }

    public struct S3ObjectSource: AWSEncodableShape {
        /// The name of the S3 bucket that contains a template bundle.
        public let bucket: String
        /// The path to the S3 bucket that contains a template bundle.
        public let key: String

        public init(bucket: String, key: String) {
            self.bucket = bucket
            self.key = key
        }

        public func validate(name: String) throws {
            try self.validate(self.bucket, name: "bucket", parent: name, max: 63)
            try self.validate(self.bucket, name: "bucket", parent: name, min: 3)
            try self.validate(self.bucket, name: "bucket", parent: name, pattern: "^[a-z0-9]+[a-z0-9-\\.]+[a-z0-9]+$")
            try self.validate(self.key, name: "key", parent: name, max: 1024)
            try self.validate(self.key, name: "key", parent: name, min: 1)
        }

        private enum CodingKeys: String, CodingKey {
            case bucket
            case key
        }
    }

    public struct Service: AWSDecodableShape {
        /// The Amazon Resource Name (ARN) of the service.
        public let arn: String
        /// The name of the code repository branch that holds the code that's deployed in Proton.
        public let branchName: String?
        /// The time when the service was created.
        public let createdAt: Date
        /// A description of a service.
        public let description: String?
        /// The time when the service was last modified.
        public let lastModifiedAt: Date
        /// The name of the service.
        public let name: String
        /// The service pipeline detail data.
        public let pipeline: ServicePipeline?
        /// The Amazon Resource Name (ARN) of the repository connection. For more information, see Set up a repository connection in the Proton Administrator Guide and Setting up with Proton in the Proton User Guide.
        public let repositoryConnectionArn: String?
        /// The ID of the source code repository.
        public let repositoryId: String?
        /// The formatted specification that defines the service.
        public let spec: String
        /// The status of the service.
        public let status: ServiceStatus
        /// A service status message.
        public let statusMessage: String?
        /// The name of the service template.
        public let templateName: String

        public init(arn: String, branchName: String? = nil, createdAt: Date, description: String? = nil, lastModifiedAt: Date, name: String, pipeline: ServicePipeline? = nil, repositoryConnectionArn: String? = nil, repositoryId: String? = nil, spec: String, status: ServiceStatus, statusMessage: String? = nil, templateName: String) {
            self.arn = arn
            self.branchName = branchName
            self.createdAt = createdAt
            self.description = description
            self.lastModifiedAt = lastModifiedAt
            self.name = name
            self.pipeline = pipeline
            self.repositoryConnectionArn = repositoryConnectionArn
            self.repositoryId = repositoryId
            self.spec = spec
            self.status = status
            self.statusMessage = statusMessage
            self.templateName = templateName
        }

        private enum CodingKeys: String, CodingKey {
            case arn
            case branchName
            case createdAt
            case description
            case lastModifiedAt
            case name
            case pipeline
            case repositoryConnectionArn
            case repositoryId
            case spec
            case status
            case statusMessage
            case templateName
        }
    }

    public struct ServiceInstance: AWSDecodableShape {
        /// The Amazon Resource Name (ARN) of the service instance.
        public let arn: String
        /// The time when the service instance was created.
        public let createdAt: Date
        /// The service instance deployment status.
        public let deploymentStatus: DeploymentStatus
        /// A service instance deployment status message.
        public let deploymentStatusMessage: String?
        /// The name of the environment that the service instance was deployed into.
        public let environmentName: String
        /// The time when a deployment of the service instance was last attempted.
        public let lastDeploymentAttemptedAt: Date
        /// The time when the service instance was last deployed successfully.
        public let lastDeploymentSucceededAt: Date
        /// The name of the service instance.
        public let name: String
        /// The name of the service that the service instance belongs to.
        public let serviceName: String
        /// The service spec that was used to create the service instance.
        public let spec: String?
        /// The major version of the service template that was used to create the service instance.
        public let templateMajorVersion: String
        /// The minor version of the service template that was used to create the service instance.
        public let templateMinorVersion: String
        /// The name of the service template that was used to create the service instance.
        public let templateName: String

        public init(arn: String, createdAt: Date, deploymentStatus: DeploymentStatus, deploymentStatusMessage: String? = nil, environmentName: String, lastDeploymentAttemptedAt: Date, lastDeploymentSucceededAt: Date, name: String, serviceName: String, spec: String? = nil, templateMajorVersion: String, templateMinorVersion: String, templateName: String) {
            self.arn = arn
            self.createdAt = createdAt
            self.deploymentStatus = deploymentStatus
            self.deploymentStatusMessage = deploymentStatusMessage
            self.environmentName = environmentName
            self.lastDeploymentAttemptedAt = lastDeploymentAttemptedAt
            self.lastDeploymentSucceededAt = lastDeploymentSucceededAt
            self.name = name
            self.serviceName = serviceName
            self.spec = spec
            self.templateMajorVersion = templateMajorVersion
            self.templateMinorVersion = templateMinorVersion
            self.templateName = templateName
        }

        private enum CodingKeys: String, CodingKey {
            case arn
            case createdAt
            case deploymentStatus
            case deploymentStatusMessage
            case environmentName
            case lastDeploymentAttemptedAt
            case lastDeploymentSucceededAt
            case name
            case serviceName
            case spec
            case templateMajorVersion
            case templateMinorVersion
            case templateName
        }
    }

    public struct ServiceInstanceSummary: AWSDecodableShape {
        /// The Amazon Resource Name (ARN) of the service instance.
        public let arn: String
        /// The time when the service instance was created.
        public let createdAt: Date
        /// The service instance deployment status.
        public let deploymentStatus: DeploymentStatus
        /// A service instance deployment status message.
        public let deploymentStatusMessage: String?
        /// The name of the environment that the service instance was deployed into.
        public let environmentName: String
        /// The time when a deployment of the service was last attempted.
        public let lastDeploymentAttemptedAt: Date
        /// The time when the service was last deployed successfully.
        public let lastDeploymentSucceededAt: Date
        /// The name of the service instance.
        public let name: String
        /// The name of the service that the service instance belongs to.
        public let serviceName: String
        /// The service instance template major version.
        public let templateMajorVersion: String
        /// The service instance template minor version.
        public let templateMinorVersion: String
        /// The name of the service template.
        public let templateName: String

        public init(arn: String, createdAt: Date, deploymentStatus: DeploymentStatus, deploymentStatusMessage: String? = nil, environmentName: String, lastDeploymentAttemptedAt: Date, lastDeploymentSucceededAt: Date, name: String, serviceName: String, templateMajorVersion: String, templateMinorVersion: String, templateName: String) {
            self.arn = arn
            self.createdAt = createdAt
            self.deploymentStatus = deploymentStatus
            self.deploymentStatusMessage = deploymentStatusMessage
            self.environmentName = environmentName
            self.lastDeploymentAttemptedAt = lastDeploymentAttemptedAt
            self.lastDeploymentSucceededAt = lastDeploymentSucceededAt
            self.name = name
            self.serviceName = serviceName
            self.templateMajorVersion = templateMajorVersion
            self.templateMinorVersion = templateMinorVersion
            self.templateName = templateName
        }

        private enum CodingKeys: String, CodingKey {
            case arn
            case createdAt
            case deploymentStatus
            case deploymentStatusMessage
            case environmentName
            case lastDeploymentAttemptedAt
            case lastDeploymentSucceededAt
            case name
            case serviceName
            case templateMajorVersion
            case templateMinorVersion
            case templateName
        }
    }

    public struct ServicePipeline: AWSDecodableShape {
        /// The Amazon Resource Name (ARN) of the service pipeline.
        public let arn: String
        /// The time when the service pipeline was created.
        public let createdAt: Date
        /// The deployment status of the service pipeline.
        public let deploymentStatus: DeploymentStatus
        /// A service pipeline deployment status message.
        public let deploymentStatusMessage: String?
        /// The time when a deployment of the service pipeline was last attempted.
        public let lastDeploymentAttemptedAt: Date
        /// The time when the service pipeline was last deployed successfully.
        public let lastDeploymentSucceededAt: Date
        /// The service spec that was used to create the service pipeline.
        public let spec: String?
        /// The major version of the service template that was used to create the service pipeline.
        public let templateMajorVersion: String
        /// The minor version of the service template that was used to create the service pipeline.
        public let templateMinorVersion: String
        /// The name of the service template that was used to create the service pipeline.
        public let templateName: String

        public init(arn: String, createdAt: Date, deploymentStatus: DeploymentStatus, deploymentStatusMessage: String? = nil, lastDeploymentAttemptedAt: Date, lastDeploymentSucceededAt: Date, spec: String? = nil, templateMajorVersion: String, templateMinorVersion: String, templateName: String) {
            self.arn = arn
            self.createdAt = createdAt
            self.deploymentStatus = deploymentStatus
            self.deploymentStatusMessage = deploymentStatusMessage
            self.lastDeploymentAttemptedAt = lastDeploymentAttemptedAt
            self.lastDeploymentSucceededAt = lastDeploymentSucceededAt
            self.spec = spec
            self.templateMajorVersion = templateMajorVersion
            self.templateMinorVersion = templateMinorVersion
            self.templateName = templateName
        }

        private enum CodingKeys: String, CodingKey {
            case arn
            case createdAt
            case deploymentStatus
            case deploymentStatusMessage
            case lastDeploymentAttemptedAt
            case lastDeploymentSucceededAt
            case spec
            case templateMajorVersion
            case templateMinorVersion
            case templateName
        }
    }

    public struct ServiceSummary: AWSDecodableShape {
        /// The Amazon Resource Name (ARN) of the service.
        public let arn: String
        /// The time when the service was created.
        public let createdAt: Date
        /// A description of the service.
        public let description: String?
        /// The time when the service was last modified.
        public let lastModifiedAt: Date
        /// The name of the service.
        public let name: String
        /// The status of the service.
        public let status: ServiceStatus
        /// A service status message.
        public let statusMessage: String?
        /// The name of the service template.
        public let templateName: String

        public init(arn: String, createdAt: Date, description: String? = nil, lastModifiedAt: Date, name: String, status: ServiceStatus, statusMessage: String? = nil, templateName: String) {
            self.arn = arn
            self.createdAt = createdAt
            self.description = description
            self.lastModifiedAt = lastModifiedAt
            self.name = name
            self.status = status
            self.statusMessage = statusMessage
            self.templateName = templateName
        }

        private enum CodingKeys: String, CodingKey {
            case arn
            case createdAt
            case description
            case lastModifiedAt
            case name
            case status
            case statusMessage
            case templateName
        }
    }

    public struct ServiceTemplate: AWSDecodableShape {
        /// The Amazon Resource Name (ARN) of the service template.
        public let arn: String
        /// The time when the service template was created.
        public let createdAt: Date
        /// A description of the service template.
        public let description: String?
        /// The service template name as displayed in the developer interface.
        public let displayName: String?
        /// The customer provided service template encryption key that's used to encrypt data.
        public let encryptionKey: String?
        /// The time when the service template was last modified.
        public let lastModifiedAt: Date
        /// The name of the service template.
        public let name: String
        /// If pipelineProvisioning is true, a service pipeline is included in the service template. Otherwise, a service pipeline isn't included in the service template.
        public let pipelineProvisioning: Provisioning?
        /// The recommended version of the service template.
        public let recommendedVersion: String?

        public init(arn: String, createdAt: Date, description: String? = nil, displayName: String? = nil, encryptionKey: String? = nil, lastModifiedAt: Date, name: String, pipelineProvisioning: Provisioning? = nil, recommendedVersion: String? = nil) {
            self.arn = arn
            self.createdAt = createdAt
            self.description = description
            self.displayName = displayName
            self.encryptionKey = encryptionKey
            self.lastModifiedAt = lastModifiedAt
            self.name = name
            self.pipelineProvisioning = pipelineProvisioning
            self.recommendedVersion = recommendedVersion
        }

        private enum CodingKeys: String, CodingKey {
            case arn
            case createdAt
            case description
            case displayName
            case encryptionKey
            case lastModifiedAt
            case name
            case pipelineProvisioning
            case recommendedVersion
        }
    }

    public struct ServiceTemplateSummary: AWSDecodableShape {
        /// The Amazon Resource Name (ARN) of the service template.
        public let arn: String
        /// The time when the service template was created.
        public let createdAt: Date
        /// A description of the service template.
        public let description: String?
        /// The service template name as displayed in the developer interface.
        public let displayName: String?
        /// The time when the service template was last modified.
        public let lastModifiedAt: Date
        /// The name of the service template.
        public let name: String
        /// If pipelineProvisioning is true, a service pipeline is included in the service template, otherwise a service pipeline isn't included in the service template.
        public let pipelineProvisioning: Provisioning?
        /// The recommended version of the service template.
        public let recommendedVersion: String?

        public init(arn: String, createdAt: Date, description: String? = nil, displayName: String? = nil, lastModifiedAt: Date, name: String, pipelineProvisioning: Provisioning? = nil, recommendedVersion: String? = nil) {
            self.arn = arn
            self.createdAt = createdAt
            self.description = description
            self.displayName = displayName
            self.lastModifiedAt = lastModifiedAt
            self.name = name
            self.pipelineProvisioning = pipelineProvisioning
            self.recommendedVersion = recommendedVersion
        }

        private enum CodingKeys: String, CodingKey {
            case arn
            case createdAt
            case description
            case displayName
            case lastModifiedAt
            case name
            case pipelineProvisioning
            case recommendedVersion
        }
    }

    public struct ServiceTemplateVersion: AWSDecodableShape {
        /// The Amazon Resource Name (ARN) of the version of a service template.
        public let arn: String
        /// An array of compatible environment template names for the major version of a service template.
        public let compatibleEnvironmentTemplates: [CompatibleEnvironmentTemplate]
        /// The time when the version of a service template was created.
        public let createdAt: Date
        /// A description of the version of a service template.
        public let description: String?
        /// The time when the version of a service template was last modified.
        public let lastModifiedAt: Date
        /// The latest major version that's associated with the version of a service template.
        public let majorVersion: String
        /// The minor version of a service template.
        public let minorVersion: String
        /// The recommended minor version of the service template.
        public let recommendedMinorVersion: String?
        /// The schema of the version of a service template.
        public let schema: String?
        /// The service template version status.
        public let status: TemplateVersionStatus
        /// A service template version status message.
        public let statusMessage: String?
        /// The name of the version of a service template.
        public let templateName: String

        public init(arn: String, compatibleEnvironmentTemplates: [CompatibleEnvironmentTemplate], createdAt: Date, description: String? = nil, lastModifiedAt: Date, majorVersion: String, minorVersion: String, recommendedMinorVersion: String? = nil, schema: String? = nil, status: TemplateVersionStatus, statusMessage: String? = nil, templateName: String) {
            self.arn = arn
            self.compatibleEnvironmentTemplates = compatibleEnvironmentTemplates
            self.createdAt = createdAt
            self.description = description
            self.lastModifiedAt = lastModifiedAt
            self.majorVersion = majorVersion
            self.minorVersion = minorVersion
            self.recommendedMinorVersion = recommendedMinorVersion
            self.schema = schema
            self.status = status
            self.statusMessage = statusMessage
            self.templateName = templateName
        }

        private enum CodingKeys: String, CodingKey {
            case arn
            case compatibleEnvironmentTemplates
            case createdAt
            case description
            case lastModifiedAt
            case majorVersion
            case minorVersion
            case recommendedMinorVersion
            case schema
            case status
            case statusMessage
            case templateName
        }
    }

    public struct ServiceTemplateVersionSummary: AWSDecodableShape {
        /// The Amazon Resource Name (ARN) of the version of a service template.
        public let arn: String
        /// The time when the version of a service template was created.
        public let createdAt: Date
        /// A description of the version of a service template.
        public let description: String?
        /// The time when the version of a service template was last modified.
        public let lastModifiedAt: Date
        /// The latest major version that's associated with the version of a service template.
        public let majorVersion: String
        /// The minor version of a service template.
        public let minorVersion: String
        /// The recommended minor version of the service template.
        public let recommendedMinorVersion: String?
        /// The service template minor version status.
        public let status: TemplateVersionStatus
        /// A service template minor version status message.
        public let statusMessage: String?
        /// The name of the service template.
        public let templateName: String

        public init(arn: String, createdAt: Date, description: String? = nil, lastModifiedAt: Date, majorVersion: String, minorVersion: String, recommendedMinorVersion: String? = nil, status: TemplateVersionStatus, statusMessage: String? = nil, templateName: String) {
            self.arn = arn
            self.createdAt = createdAt
            self.description = description
            self.lastModifiedAt = lastModifiedAt
            self.majorVersion = majorVersion
            self.minorVersion = minorVersion
            self.recommendedMinorVersion = recommendedMinorVersion
            self.status = status
            self.statusMessage = statusMessage
            self.templateName = templateName
        }

        private enum CodingKeys: String, CodingKey {
            case arn
            case createdAt
            case description
            case lastModifiedAt
            case majorVersion
            case minorVersion
            case recommendedMinorVersion
            case status
            case statusMessage
            case templateName
        }
    }

    public struct Tag: AWSEncodableShape & AWSDecodableShape {
        /// The key of the resource tag.
        public let key: String
        /// The value of the resource tag.
        public let value: String

        public init(key: String, value: String) {
            self.key = key
            self.value = value
        }

        public func validate(name: String) throws {
            try self.validate(self.key, name: "key", parent: name, max: 128)
            try self.validate(self.key, name: "key", parent: name, min: 1)
            try self.validate(self.value, name: "value", parent: name, max: 256)
        }

        private enum CodingKeys: String, CodingKey {
            case key
            case value
        }
    }

    public struct TagResourceInput: AWSEncodableShape {
        public static var _encoding = [
            AWSMemberEncoding(label: "resourceArn", location: .querystring("resourceArn"))
        ]

        /// The Amazon Resource Name (ARN) of the Proton resource to apply customer tags to.
        public let resourceArn: String
        /// A list of customer tags to apply to the Proton resource.
        public let tags: [Tag]

        public init(resourceArn: String, tags: [Tag]) {
            self.resourceArn = resourceArn
            self.tags = tags
        }

        public func validate(name: String) throws {
            try self.validate(self.resourceArn, name: "resourceArn", parent: name, max: 200)
            try self.validate(self.resourceArn, name: "resourceArn", parent: name, min: 1)
            try self.tags.forEach {
                try $0.validate(name: "\(name).tags[]")
            }
            try self.validate(self.tags, name: "tags", parent: name, max: 50)
        }

        private enum CodingKeys: String, CodingKey {
            case tags
        }
    }

    public struct TagResourceOutput: AWSDecodableShape {
        public init() {}
    }

    public struct TemplateSyncConfig: AWSDecodableShape {
        /// The repository branch.
        public let branch: String
        /// The name of the repository, for example myrepos/myrepo.
        public let repositoryName: String
        /// The repository provider.
        public let repositoryProvider: RepositoryProvider
        /// A subdirectory path to your template bundle version.
        public let subdirectory: String?
        /// The template name.
        public let templateName: String
        /// The template type.
        public let templateType: TemplateType

        public init(branch: String, repositoryName: String, repositoryProvider: RepositoryProvider, subdirectory: String? = nil, templateName: String, templateType: TemplateType) {
            self.branch = branch
            self.repositoryName = repositoryName
            self.repositoryProvider = repositoryProvider
            self.subdirectory = subdirectory
            self.templateName = templateName
            self.templateType = templateType
        }

        private enum CodingKeys: String, CodingKey {
            case branch
            case repositoryName
            case repositoryProvider
            case subdirectory
            case templateName
            case templateType
        }
    }

    public struct UntagResourceInput: AWSEncodableShape {
        public static var _encoding = [
            AWSMemberEncoding(label: "resourceArn", location: .querystring("resourceArn"))
        ]

        /// The Amazon Resource Name (ARN) of the resource to remove customer tags from.
        public let resourceArn: String
        /// A list of customer tag keys that indicate the customer tags to be removed from the resource.
        public let tagKeys: [String]

        public init(resourceArn: String, tagKeys: [String]) {
            self.resourceArn = resourceArn
            self.tagKeys = tagKeys
        }

        public func validate(name: String) throws {
            try self.validate(self.resourceArn, name: "resourceArn", parent: name, max: 200)
            try self.validate(self.resourceArn, name: "resourceArn", parent: name, min: 1)
            try self.tagKeys.forEach {
                try validate($0, name: "tagKeys[]", parent: name, max: 128)
                try validate($0, name: "tagKeys[]", parent: name, min: 1)
            }
            try self.validate(self.tagKeys, name: "tagKeys", parent: name, max: 50)
        }

        private enum CodingKeys: String, CodingKey {
            case tagKeys
        }
    }

    public struct UntagResourceOutput: AWSDecodableShape {
        public init() {}
    }

    public struct UpdateAccountSettingsInput: AWSEncodableShape {
        /// A repository for pipeline provisioning. Specify it if you have environments configured for self-managed provisioning with services that include pipelines.
        public let pipelineProvisioningRepository: RepositoryBranchInput?
        /// The Amazon Resource Name (ARN) of the service role you want to use for provisioning pipelines. Assumed by Proton for Amazon Web Services-managed provisioning, and by customer-owned automation for self-managed provisioning.
        public let pipelineServiceRoleArn: String?

        public init(pipelineProvisioningRepository: RepositoryBranchInput? = nil, pipelineServiceRoleArn: String? = nil) {
            self.pipelineProvisioningRepository = pipelineProvisioningRepository
            self.pipelineServiceRoleArn = pipelineServiceRoleArn
        }

        public func validate(name: String) throws {
            try self.pipelineProvisioningRepository?.validate(name: "\(name).pipelineProvisioningRepository")
            try self.validate(self.pipelineServiceRoleArn, name: "pipelineServiceRoleArn", parent: name, max: 2048)
            try self.validate(self.pipelineServiceRoleArn, name: "pipelineServiceRoleArn", parent: name, pattern: "(^$)|(^arn:[a-zA-Z-]+:[a-zA-Z0-9-]+:[a-zA-Z0-9-]*:\\d*:[\\w+=\\/:,\\.@-]*)")
        }

        private enum CodingKeys: String, CodingKey {
            case pipelineProvisioningRepository
            case pipelineServiceRoleArn
        }
    }

    public struct UpdateAccountSettingsOutput: AWSDecodableShape {
        /// The Proton pipeline service role and repository data shared across the Amazon Web Services account.
        public let accountSettings: AccountSettings

        public init(accountSettings: AccountSettings) {
            self.accountSettings = accountSettings
        }

        private enum CodingKeys: String, CodingKey {
            case accountSettings
        }
    }

    public struct UpdateEnvironmentAccountConnectionInput: AWSEncodableShape {
        /// The ID of the environment account connection to update.
        public let id: String
        /// The Amazon Resource Name (ARN) of the IAM service role that's associated with the environment account connection to update.
        public let roleArn: String

        public init(id: String, roleArn: String) {
            self.id = id
            self.roleArn = roleArn
        }

        public func validate(name: String) throws {
            try self.validate(self.id, name: "id", parent: name, pattern: "^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$")
            try self.validate(self.roleArn, name: "roleArn", parent: name, max: 200)
            try self.validate(self.roleArn, name: "roleArn", parent: name, min: 1)
        }

        private enum CodingKeys: String, CodingKey {
            case id
            case roleArn
        }
    }

    public struct UpdateEnvironmentAccountConnectionOutput: AWSDecodableShape {
        /// The environment account connection detail data that's returned by Proton.
        public let environmentAccountConnection: EnvironmentAccountConnection

        public init(environmentAccountConnection: EnvironmentAccountConnection) {
            self.environmentAccountConnection = environmentAccountConnection
        }

        private enum CodingKeys: String, CodingKey {
            case environmentAccountConnection
        }
    }

    public struct UpdateEnvironmentInput: AWSEncodableShape {
        /// There are four modes for updating an environment. The deploymentType field defines the mode.     NONE  In this mode, a deployment doesn't occur. Only the requested metadata parameters are updated.     CURRENT_VERSION  In this mode, the environment is deployed and updated with the new spec that you provide. Only requested parameters are updated. Don’t include major or minor version parameters when you use this deployment-type.     MINOR_VERSION  In this mode, the environment is deployed and updated with the published, recommended (latest) minor version of the current major version in use, by default. You can also specify a different minor version of the current major version in use.     MAJOR_VERSION  In this mode, the environment is deployed and updated with the published, recommended (latest) major and minor version of the current template, by default. You can also specify a different major version that is higher than the major version in use and a minor version (optional).
        public let deploymentType: DeploymentUpdateType
        /// A description of the environment update.
        public let description: String?
        /// The ID of the environment account connection. You can only update to a new environment account connection if it was created in the same environment account that the current environment account connection was created in and is associated with the current environment.
        public let environmentAccountConnectionId: String?
        /// The name of the environment to update.
        public let name: String
        /// The Amazon Resource Name (ARN) of the Proton service role that allows Proton to make API calls to other services your behalf.
        public let protonServiceRoleArn: String?
        /// The infrastructure repository that you use to host your rendered infrastructure templates for self-managed provisioning.
        public let provisioningRepository: RepositoryBranchInput?
        /// The formatted specification that defines the update.
        public let spec: String?
        /// The major version of the environment to update.
        public let templateMajorVersion: String?
        /// The minor version of the environment to update.
        public let templateMinorVersion: String?

        public init(deploymentType: DeploymentUpdateType, description: String? = nil, environmentAccountConnectionId: String? = nil, name: String, protonServiceRoleArn: String? = nil, provisioningRepository: RepositoryBranchInput? = nil, spec: String? = nil, templateMajorVersion: String? = nil, templateMinorVersion: String? = nil) {
            self.deploymentType = deploymentType
            self.description = description
            self.environmentAccountConnectionId = environmentAccountConnectionId
            self.name = name
            self.protonServiceRoleArn = protonServiceRoleArn
            self.provisioningRepository = provisioningRepository
            self.spec = spec
            self.templateMajorVersion = templateMajorVersion
            self.templateMinorVersion = templateMinorVersion
        }

        public func validate(name: String) throws {
            try self.validate(self.description, name: "description", parent: name, max: 500)
            try self.validate(self.environmentAccountConnectionId, name: "environmentAccountConnectionId", parent: name, pattern: "^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$")
            try self.validate(self.name, name: "name", parent: name, max: 100)
            try self.validate(self.name, name: "name", parent: name, min: 1)
            try self.validate(self.name, name: "name", parent: name, pattern: "^[0-9A-Za-z]+[0-9A-Za-z_\\-]*$")
            try self.validate(self.protonServiceRoleArn, name: "protonServiceRoleArn", parent: name, max: 200)
            try self.validate(self.protonServiceRoleArn, name: "protonServiceRoleArn", parent: name, min: 1)
            try self.provisioningRepository?.validate(name: "\(name).provisioningRepository")
            try self.validate(self.spec, name: "spec", parent: name, max: 51200)
            try self.validate(self.spec, name: "spec", parent: name, min: 1)
            try self.validate(self.templateMajorVersion, name: "templateMajorVersion", parent: name, max: 20)
            try self.validate(self.templateMajorVersion, name: "templateMajorVersion", parent: name, min: 1)
            try self.validate(self.templateMajorVersion, name: "templateMajorVersion", parent: name, pattern: "^(0|([1-9]{1}\\d*))$")
            try self.validate(self.templateMinorVersion, name: "templateMinorVersion", parent: name, max: 20)
            try self.validate(self.templateMinorVersion, name: "templateMinorVersion", parent: name, min: 1)
            try self.validate(self.templateMinorVersion, name: "templateMinorVersion", parent: name, pattern: "^(0|([1-9]{1}\\d*))$")
        }

        private enum CodingKeys: String, CodingKey {
            case deploymentType
            case description
            case environmentAccountConnectionId
            case name
            case protonServiceRoleArn
            case provisioningRepository
            case spec
            case templateMajorVersion
            case templateMinorVersion
        }
    }

    public struct UpdateEnvironmentOutput: AWSDecodableShape {
        /// The environment detail data that's returned by Proton.
        public let environment: Environment

        public init(environment: Environment) {
            self.environment = environment
        }

        private enum CodingKeys: String, CodingKey {
            case environment
        }
    }

    public struct UpdateEnvironmentTemplateInput: AWSEncodableShape {
        /// A description of the environment template update.
        public let description: String?
        /// The name of the environment template to update as displayed in the developer interface.
        public let displayName: String?
        /// The name of the environment template to update.
        public let name: String

        public init(description: String? = nil, displayName: String? = nil, name: String) {
            self.description = description
            self.displayName = displayName
            self.name = name
        }

        public func validate(name: String) throws {
            try self.validate(self.description, name: "description", parent: name, max: 500)
            try self.validate(self.displayName, name: "displayName", parent: name, max: 100)
            try self.validate(self.displayName, name: "displayName", parent: name, min: 1)
            try self.validate(self.name, name: "name", parent: name, max: 100)
            try self.validate(self.name, name: "name", parent: name, min: 1)
            try self.validate(self.name, name: "name", parent: name, pattern: "^[0-9A-Za-z]+[0-9A-Za-z_\\-]*$")
        }

        private enum CodingKeys: String, CodingKey {
            case description
            case displayName
            case name
        }
    }

    public struct UpdateEnvironmentTemplateOutput: AWSDecodableShape {
        /// The environment template detail data that's returned by Proton.
        public let environmentTemplate: EnvironmentTemplate

        public init(environmentTemplate: EnvironmentTemplate) {
            self.environmentTemplate = environmentTemplate
        }

        private enum CodingKeys: String, CodingKey {
            case environmentTemplate
        }
    }

    public struct UpdateEnvironmentTemplateVersionInput: AWSEncodableShape {
        /// A description of environment template version to update.
        public let description: String?
        /// To update a major version of an environment template, include major Version.
        public let majorVersion: String
        /// To update a minor version of an environment template, include minorVersion.
        public let minorVersion: String
        /// The status of the environment template minor version to update.
        public let status: TemplateVersionStatus?
        /// The name of the environment template.
        public let templateName: String

        public init(description: String? = nil, majorVersion: String, minorVersion: String, status: TemplateVersionStatus? = nil, templateName: String) {
            self.description = description
            self.majorVersion = majorVersion
            self.minorVersion = minorVersion
            self.status = status
            self.templateName = templateName
        }

        public func validate(name: String) throws {
            try self.validate(self.description, name: "description", parent: name, max: 500)
            try self.validate(self.majorVersion, name: "majorVersion", parent: name, max: 20)
            try self.validate(self.majorVersion, name: "majorVersion", parent: name, min: 1)
            try self.validate(self.majorVersion, name: "majorVersion", parent: name, pattern: "^(0|([1-9]{1}\\d*))$")
            try self.validate(self.minorVersion, name: "minorVersion", parent: name, max: 20)
            try self.validate(self.minorVersion, name: "minorVersion", parent: name, min: 1)
            try self.validate(self.minorVersion, name: "minorVersion", parent: name, pattern: "^(0|([1-9]{1}\\d*))$")
            try self.validate(self.templateName, name: "templateName", parent: name, max: 100)
            try self.validate(self.templateName, name: "templateName", parent: name, min: 1)
            try self.validate(self.templateName, name: "templateName", parent: name, pattern: "^[0-9A-Za-z]+[0-9A-Za-z_\\-]*$")
        }

        private enum CodingKeys: String, CodingKey {
            case description
            case majorVersion
            case minorVersion
            case status
            case templateName
        }
    }

    public struct UpdateEnvironmentTemplateVersionOutput: AWSDecodableShape {
        /// The environment template version detail data that's returned by Proton.
        public let environmentTemplateVersion: EnvironmentTemplateVersion

        public init(environmentTemplateVersion: EnvironmentTemplateVersion) {
            self.environmentTemplateVersion = environmentTemplateVersion
        }

        private enum CodingKeys: String, CodingKey {
            case environmentTemplateVersion
        }
    }

    public struct UpdateServiceInput: AWSEncodableShape {
        /// The edited service description.
        public let description: String?
        /// The name of the service to edit.
        public let name: String
        /// Lists the service instances to add and the existing service instances to remain. Omit the existing service instances to delete from the list. Don't include edits to the existing service instances or pipeline. For more information, see Edit a service in the Proton Administrator Guide or the Proton User Guide.
        public let spec: String?

        public init(description: String? = nil, name: String, spec: String? = nil) {
            self.description = description
            self.name = name
            self.spec = spec
        }

        public func validate(name: String) throws {
            try self.validate(self.description, name: "description", parent: name, max: 500)
            try self.validate(self.name, name: "name", parent: name, max: 100)
            try self.validate(self.name, name: "name", parent: name, min: 1)
            try self.validate(self.name, name: "name", parent: name, pattern: "^[0-9A-Za-z]+[0-9A-Za-z_\\-]*$")
            try self.validate(self.spec, name: "spec", parent: name, max: 51200)
            try self.validate(self.spec, name: "spec", parent: name, min: 1)
        }

        private enum CodingKeys: String, CodingKey {
            case description
            case name
            case spec
        }
    }

    public struct UpdateServiceInstanceInput: AWSEncodableShape {
        /// The deployment type. There are four modes for updating a service instance. The deploymentType field defines the mode.     NONE  In this mode, a deployment doesn't occur. Only the requested metadata parameters are updated.     CURRENT_VERSION  In this mode, the service instance is deployed and updated with the new spec that you provide. Only requested parameters are updated. Don’t include major or minor version parameters when you use this deployment-type.     MINOR_VERSION  In this mode, the service instance is deployed and updated with the published, recommended (latest) minor version of the current major version in use, by default. You can also specify a different minor version of the current major version in use.     MAJOR_VERSION  In this mode, the service instance is deployed and updated with the published, recommended (latest) major and minor version of the current template, by default. You can specify a different major version that's higher than the major version in use and a minor version.
        public let deploymentType: DeploymentUpdateType
        /// The name of the service instance to update.
        public let name: String
        /// The name of the service that the service instance belongs to.
        public let serviceName: String
        /// The formatted specification that defines the service instance update.
        public let spec: String?
        /// The major version of the service template to update.
        public let templateMajorVersion: String?
        /// The minor version of the service template to update.
        public let templateMinorVersion: String?

        public init(deploymentType: DeploymentUpdateType, name: String, serviceName: String, spec: String? = nil, templateMajorVersion: String? = nil, templateMinorVersion: String? = nil) {
            self.deploymentType = deploymentType
            self.name = name
            self.serviceName = serviceName
            self.spec = spec
            self.templateMajorVersion = templateMajorVersion
            self.templateMinorVersion = templateMinorVersion
        }

        public func validate(name: String) throws {
            try self.validate(self.name, name: "name", parent: name, max: 100)
            try self.validate(self.name, name: "name", parent: name, min: 1)
            try self.validate(self.name, name: "name", parent: name, pattern: "^[0-9A-Za-z]+[0-9A-Za-z_\\-]*$")
            try self.validate(self.serviceName, name: "serviceName", parent: name, max: 100)
            try self.validate(self.serviceName, name: "serviceName", parent: name, min: 1)
            try self.validate(self.serviceName, name: "serviceName", parent: name, pattern: "^[0-9A-Za-z]+[0-9A-Za-z_\\-]*$")
            try self.validate(self.spec, name: "spec", parent: name, max: 51200)
            try self.validate(self.spec, name: "spec", parent: name, min: 1)
            try self.validate(self.templateMajorVersion, name: "templateMajorVersion", parent: name, max: 20)
            try self.validate(self.templateMajorVersion, name: "templateMajorVersion", parent: name, min: 1)
            try self.validate(self.templateMajorVersion, name: "templateMajorVersion", parent: name, pattern: "^(0|([1-9]{1}\\d*))$")
            try self.validate(self.templateMinorVersion, name: "templateMinorVersion", parent: name, max: 20)
            try self.validate(self.templateMinorVersion, name: "templateMinorVersion", parent: name, min: 1)
            try self.validate(self.templateMinorVersion, name: "templateMinorVersion", parent: name, pattern: "^(0|([1-9]{1}\\d*))$")
        }

        private enum CodingKeys: String, CodingKey {
            case deploymentType
            case name
            case serviceName
            case spec
            case templateMajorVersion
            case templateMinorVersion
        }
    }

    public struct UpdateServiceInstanceOutput: AWSDecodableShape {
        /// The service instance summary data that's returned by Proton.
        public let serviceInstance: ServiceInstance

        public init(serviceInstance: ServiceInstance) {
            self.serviceInstance = serviceInstance
        }

        private enum CodingKeys: String, CodingKey {
            case serviceInstance
        }
    }

    public struct UpdateServiceOutput: AWSDecodableShape {
        /// The service detail data that's returned by Proton.
        public let service: Service

        public init(service: Service) {
            self.service = service
        }

        private enum CodingKeys: String, CodingKey {
            case service
        }
    }

    public struct UpdateServicePipelineInput: AWSEncodableShape {
        /// The deployment type. There are four modes for updating a service pipeline. The deploymentType field defines the mode.     NONE  In this mode, a deployment doesn't occur. Only the requested metadata parameters are updated.     CURRENT_VERSION  In this mode, the service pipeline is deployed and updated with the new spec that you provide. Only requested parameters are updated. Don’t include major or minor version parameters when you use this deployment-type.     MINOR_VERSION  In this mode, the service pipeline is deployed and updated with the published, recommended (latest) minor version of the current major version in use, by default. You can specify a different minor version of the current major version in use.     MAJOR_VERSION  In this mode, the service pipeline is deployed and updated with the published, recommended (latest) major and minor version of the current template, by default. You can specify a different major version that's higher than the major version in use and a minor version.
        public let deploymentType: DeploymentUpdateType
        /// The name of the service to that the pipeline is associated with.
        public let serviceName: String
        /// The spec for the service pipeline to update.
        public let spec: String
        /// The major version of the service template that was used to create the service that the pipeline is associated with.
        public let templateMajorVersion: String?
        /// The minor version of the service template that was used to create the service that the pipeline is associated with.
        public let templateMinorVersion: String?

        public init(deploymentType: DeploymentUpdateType, serviceName: String, spec: String, templateMajorVersion: String? = nil, templateMinorVersion: String? = nil) {
            self.deploymentType = deploymentType
            self.serviceName = serviceName
            self.spec = spec
            self.templateMajorVersion = templateMajorVersion
            self.templateMinorVersion = templateMinorVersion
        }

        public func validate(name: String) throws {
            try self.validate(self.serviceName, name: "serviceName", parent: name, max: 100)
            try self.validate(self.serviceName, name: "serviceName", parent: name, min: 1)
            try self.validate(self.serviceName, name: "serviceName", parent: name, pattern: "^[0-9A-Za-z]+[0-9A-Za-z_\\-]*$")
            try self.validate(self.spec, name: "spec", parent: name, max: 51200)
            try self.validate(self.spec, name: "spec", parent: name, min: 1)
            try self.validate(self.templateMajorVersion, name: "templateMajorVersion", parent: name, max: 20)
            try self.validate(self.templateMajorVersion, name: "templateMajorVersion", parent: name, min: 1)
            try self.validate(self.templateMajorVersion, name: "templateMajorVersion", parent: name, pattern: "^(0|([1-9]{1}\\d*))$")
            try self.validate(self.templateMinorVersion, name: "templateMinorVersion", parent: name, max: 20)
            try self.validate(self.templateMinorVersion, name: "templateMinorVersion", parent: name, min: 1)
            try self.validate(self.templateMinorVersion, name: "templateMinorVersion", parent: name, pattern: "^(0|([1-9]{1}\\d*))$")
        }

        private enum CodingKeys: String, CodingKey {
            case deploymentType
            case serviceName
            case spec
            case templateMajorVersion
            case templateMinorVersion
        }
    }

    public struct UpdateServicePipelineOutput: AWSDecodableShape {
        /// The pipeline details that are returned by Proton.
        public let pipeline: ServicePipeline

        public init(pipeline: ServicePipeline) {
            self.pipeline = pipeline
        }

        private enum CodingKeys: String, CodingKey {
            case pipeline
        }
    }

    public struct UpdateServiceTemplateInput: AWSEncodableShape {
        /// A description of the service template update.
        public let description: String?
        /// The name of the service template to update that's displayed in the developer interface.
        public let displayName: String?
        /// The name of the service template to update.
        public let name: String

        public init(description: String? = nil, displayName: String? = nil, name: String) {
            self.description = description
            self.displayName = displayName
            self.name = name
        }

        public func validate(name: String) throws {
            try self.validate(self.description, name: "description", parent: name, max: 500)
            try self.validate(self.displayName, name: "displayName", parent: name, max: 100)
            try self.validate(self.displayName, name: "displayName", parent: name, min: 1)
            try self.validate(self.name, name: "name", parent: name, max: 100)
            try self.validate(self.name, name: "name", parent: name, min: 1)
            try self.validate(self.name, name: "name", parent: name, pattern: "^[0-9A-Za-z]+[0-9A-Za-z_\\-]*$")
        }

        private enum CodingKeys: String, CodingKey {
            case description
            case displayName
            case name
        }
    }

    public struct UpdateServiceTemplateOutput: AWSDecodableShape {
        /// The service template detail data that's returned by Proton.
        public let serviceTemplate: ServiceTemplate

        public init(serviceTemplate: ServiceTemplate) {
            self.serviceTemplate = serviceTemplate
        }

        private enum CodingKeys: String, CodingKey {
            case serviceTemplate
        }
    }

    public struct UpdateServiceTemplateVersionInput: AWSEncodableShape {
        /// An array of compatible environment names for a service template major or minor version to update.
        public let compatibleEnvironmentTemplates: [CompatibleEnvironmentTemplateInput]?
        /// A description of a service template version to update.
        public let description: String?
        /// To update a major version of a service template, include major Version.
        public let majorVersion: String
        /// To update a minor version of a service template, include minorVersion.
        public let minorVersion: String
        /// The status of the service template minor version to update.
        public let status: TemplateVersionStatus?
        /// The name of the service template.
        public let templateName: String

        public init(compatibleEnvironmentTemplates: [CompatibleEnvironmentTemplateInput]? = nil, description: String? = nil, majorVersion: String, minorVersion: String, status: TemplateVersionStatus? = nil, templateName: String) {
            self.compatibleEnvironmentTemplates = compatibleEnvironmentTemplates
            self.description = description
            self.majorVersion = majorVersion
            self.minorVersion = minorVersion
            self.status = status
            self.templateName = templateName
        }

        public func validate(name: String) throws {
            try self.compatibleEnvironmentTemplates?.forEach {
                try $0.validate(name: "\(name).compatibleEnvironmentTemplates[]")
            }
            try self.validate(self.compatibleEnvironmentTemplates, name: "compatibleEnvironmentTemplates", parent: name, max: 10)
            try self.validate(self.compatibleEnvironmentTemplates, name: "compatibleEnvironmentTemplates", parent: name, min: 1)
            try self.validate(self.description, name: "description", parent: name, max: 500)
            try self.validate(self.majorVersion, name: "majorVersion", parent: name, max: 20)
            try self.validate(self.majorVersion, name: "majorVersion", parent: name, min: 1)
            try self.validate(self.majorVersion, name: "majorVersion", parent: name, pattern: "^(0|([1-9]{1}\\d*))$")
            try self.validate(self.minorVersion, name: "minorVersion", parent: name, max: 20)
            try self.validate(self.minorVersion, name: "minorVersion", parent: name, min: 1)
            try self.validate(self.minorVersion, name: "minorVersion", parent: name, pattern: "^(0|([1-9]{1}\\d*))$")
            try self.validate(self.templateName, name: "templateName", parent: name, max: 100)
            try self.validate(self.templateName, name: "templateName", parent: name, min: 1)
            try self.validate(self.templateName, name: "templateName", parent: name, pattern: "^[0-9A-Za-z]+[0-9A-Za-z_\\-]*$")
        }

        private enum CodingKeys: String, CodingKey {
            case compatibleEnvironmentTemplates
            case description
            case majorVersion
            case minorVersion
            case status
            case templateName
        }
    }

    public struct UpdateServiceTemplateVersionOutput: AWSDecodableShape {
        /// The service template version detail data that's returned by Proton.
        public let serviceTemplateVersion: ServiceTemplateVersion

        public init(serviceTemplateVersion: ServiceTemplateVersion) {
            self.serviceTemplateVersion = serviceTemplateVersion
        }

        private enum CodingKeys: String, CodingKey {
            case serviceTemplateVersion
        }
    }

    public struct UpdateTemplateSyncConfigInput: AWSEncodableShape {
        /// The repository branch.
        public let branch: String
        /// The name of the repository (for example, myrepos/myrepo).
        public let repositoryName: String
        /// The repository provider.
        public let repositoryProvider: RepositoryProvider
        /// A subdirectory path to your template bundle version. When included, limits the template bundle search to this repository directory.
        public let subdirectory: String?
        /// The synced template name.
        public let templateName: String
        /// The synced template type.
        public let templateType: TemplateType

        public init(branch: String, repositoryName: String, repositoryProvider: RepositoryProvider, subdirectory: String? = nil, templateName: String, templateType: TemplateType) {
            self.branch = branch
            self.repositoryName = repositoryName
            self.repositoryProvider = repositoryProvider
            self.subdirectory = subdirectory
            self.templateName = templateName
            self.templateType = templateType
        }

        public func validate(name: String) throws {
            try self.validate(self.branch, name: "branch", parent: name, max: 200)
            try self.validate(self.branch, name: "branch", parent: name, min: 1)
            try self.validate(self.repositoryName, name: "repositoryName", parent: name, max: 100)
            try self.validate(self.repositoryName, name: "repositoryName", parent: name, min: 1)
            try self.validate(self.repositoryName, name: "repositoryName", parent: name, pattern: "[A-Za-z0-9_.-].*/[A-Za-z0-9_.-].*")
            try self.validate(self.subdirectory, name: "subdirectory", parent: name, max: 4096)
            try self.validate(self.subdirectory, name: "subdirectory", parent: name, min: 1)
            try self.validate(self.templateName, name: "templateName", parent: name, max: 100)
            try self.validate(self.templateName, name: "templateName", parent: name, min: 1)
            try self.validate(self.templateName, name: "templateName", parent: name, pattern: "^[0-9A-Za-z]+[0-9A-Za-z_\\-]*$")
        }

        private enum CodingKeys: String, CodingKey {
            case branch
            case repositoryName
            case repositoryProvider
            case subdirectory
            case templateName
            case templateType
        }
    }

    public struct UpdateTemplateSyncConfigOutput: AWSDecodableShape {
        /// The template sync configuration detail data that's returned by Proton.
        public let templateSyncConfig: TemplateSyncConfig?

        public init(templateSyncConfig: TemplateSyncConfig? = nil) {
            self.templateSyncConfig = templateSyncConfig
        }

        private enum CodingKeys: String, CodingKey {
            case templateSyncConfig
        }
    }

    public struct TemplateVersionSourceInput: AWSEncodableShape {
        /// An S3 source object that includes the template bundle S3 path and name for a template minor version.
        public let s3: S3ObjectSource?

        public init(s3: S3ObjectSource? = nil) {
            self.s3 = s3
        }

        public func validate(name: String) throws {
            try self.s3?.validate(name: "\(name).s3")
        }

        private enum CodingKeys: String, CodingKey {
            case s3
        }
    }
}
