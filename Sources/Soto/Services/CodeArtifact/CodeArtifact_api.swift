//===----------------------------------------------------------------------===//
//
// This source file is part of the Soto for AWS open source project
//
// Copyright (c) 2017-2023 the Soto project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
// See CONTRIBUTORS.txt for the list of Soto project authors
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by https://github.com/soto-project/soto-codegenerator.
// DO NOT EDIT.

@_exported import SotoCore

/// Service object for interacting with AWS CodeArtifact service.
///
///  CodeArtifact is a fully managed artifact repository compatible with language-native package managers and build tools such as npm, Apache Maven, pip, and dotnet. You can use CodeArtifact to share packages with development teams and pull packages. Packages can be pulled from both public and CodeArtifact repositories. You can also create an upstream relationship between a CodeArtifact repository and another repository, which effectively merges their contents from the point of view of a package manager client.   CodeArtifact concepts     Repository: A CodeArtifact repository contains a set of package versions, each of which maps to a set of assets, or files. Repositories are polyglot, so a single repository can contain packages of any supported type. Each repository exposes endpoints for fetching and publishing packages using tools like the  npm CLI, the Maven CLI ( mvn ), Python CLIs ( pip and twine), NuGet CLIs (nuget and dotnet), and  the Swift package manager ( swift ).    Domain: Repositories are aggregated into a higher-level entity known as a domain. All package assets and metadata are stored in the domain, but are consumed through repositories. A given package asset, such as a Maven JAR file, is stored once per domain, no matter how many repositories it's present in. All of the assets and metadata in a domain are encrypted with the same customer master key (CMK) stored in Key Management Service (KMS). Each repository is a member of a single domain and can't be moved to a different domain. The domain allows organizational policy to be applied across multiple repositories, such as which accounts can access repositories in the domain, and which public repositories can be used as sources of packages. Although an organization can have multiple domains, we recommend a single production domain that contains all published artifacts so that teams can find and share packages across their organization.    Package: A package is a bundle of software and the metadata required to resolve dependencies and install the software. CodeArtifact supports npm, PyPI, Maven, NuGet, Swift, and generic package formats. In CodeArtifact, a package consists of:   A name (for example, webpack is the name of a popular npm package)   An optional namespace (for example, @types in @types/node)   A set of versions (for example, 1.0.0, 1.0.1, 1.0.2, etc.)   Package-level metadata (for example, npm tags)      Package group: A group of packages that match a specified definition. Package  groups can be used to apply configuration to multiple packages that match a defined pattern using  package format, package namespace, and package name. You can use package groups to more conveniently  configure package origin controls for multiple packages. Package origin controls are used to block or allow ingestion or publishing  of new package versions, which protects users from malicious actions known as dependency substitution attacks.    Package version: A version of a package, such as @types/node 12.6.9. The version number format and semantics vary for different package formats. For example, npm package versions must conform to the Semantic Versioning specification. In CodeArtifact, a package version consists of the version identifier, metadata at the package version level, and a set of assets.    Upstream repository: One repository is upstream of another when the package versions in it can be accessed from the repository endpoint of the downstream repository, effectively merging the contents of the two repositories from the point of view of a client. CodeArtifact allows creating an upstream relationship between two repositories.    Asset: An individual file stored in CodeArtifact associated with a package version, such as an npm .tgz file or Maven POM and JAR files.    CodeArtifact supported API operations     AssociateExternalConnection: Adds an existing external  connection to a repository.     CopyPackageVersions: Copies package versions from one  repository to another repository in the same domain.    CreateDomain: Creates a domain.    CreatePackageGroup: Creates a package group.    CreateRepository: Creates a CodeArtifact repository in a domain.     DeleteDomain: Deletes a domain. You cannot delete a domain that contains repositories.     DeleteDomainPermissionsPolicy: Deletes the resource policy that is set on a domain.    DeletePackage: Deletes a package and all associated package versions.    DeletePackageGroup: Deletes a package group. Does not delete packages or package versions that are associated with a package group.    DeletePackageVersions: Deletes versions of a package. After a package has been deleted, it can be republished, but its assets and metadata cannot be restored because they have been permanently removed from storage.    DeleteRepository: Deletes a repository.               DeleteRepositoryPermissionsPolicy: Deletes the resource policy that is set on a repository.    DescribeDomain: Returns a DomainDescription object that contains information about the requested domain.    DescribePackage: Returns a PackageDescription object that contains details about a package.     DescribePackageGroup: Returns a PackageGroup object that contains details about a package group.     DescribePackageVersion: Returns a PackageVersionDescription object that contains details about a package version.     DescribeRepository: Returns a RepositoryDescription object that contains detailed information about the requested repository.     DisposePackageVersions: Disposes versions of a package. A package version with the status Disposed cannot be restored because they have been permanently removed from storage.    DisassociateExternalConnection: Removes an existing external connection from a repository.               GetAssociatedPackageGroup: Returns the most closely associated package group to the specified package.    GetAuthorizationToken: Generates a temporary authorization token for accessing repositories in the domain. The token expires the authorization period has passed.  The default authorization period is 12 hours and can be customized to any length with a maximum of 12 hours.    GetDomainPermissionsPolicy: Returns the policy of a resource that is attached to the specified domain.     GetPackageVersionAsset: Returns the contents of an asset that is in a package version.     GetPackageVersionReadme: Gets the readme file or descriptive text for a package version.    GetRepositoryEndpoint: Returns the endpoint of a repository for a specific package format. A repository has one endpoint for each  package format:     generic     maven     npm     nuget     pypi     swift       GetRepositoryPermissionsPolicy: Returns the resource policy that is set on a repository.               ListAllowedRepositoriesForGroup: Lists the allowed repositories for a package group that has origin configuration set to ALLOW_SPECIFIC_REPOSITORIES.    ListAssociatedPackages: Returns a list of packages associated with the requested package group.    ListDomains: Returns a list of DomainSummary objects. Each returned DomainSummary object contains information about a domain.    ListPackages: Lists the packages in a repository.    ListPackageGroups: Returns a list of package groups in the requested domain.    ListPackageVersionAssets: Lists the assets for a given package version.    ListPackageVersionDependencies: Returns a list of the direct dependencies for a package version.     ListPackageVersions: Returns a list of package versions for a specified package in a repository.    ListRepositories: Returns a list of repositories owned by the Amazon Web Services account that called this method.    ListRepositoriesInDomain: Returns a list of the repositories in a domain.    ListSubPackageGroups: Returns a list of direct children of the specified package group.    PublishPackageVersion: Creates a new package version containing one or more assets.    PutDomainPermissionsPolicy: Attaches a resource policy to a domain.    PutPackageOriginConfiguration: Sets the package origin configuration for a package, which determine  how new versions of the package can be added to a specific repository.    PutRepositoryPermissionsPolicy: Sets the resource policy on a repository that specifies permissions to access it.     UpdatePackageGroup: Updates a package group. This API cannot be used to update a package group's origin configuration or pattern.    UpdatePackageGroupOriginConfiguration: Updates the package origin configuration for a package group.    UpdatePackageVersionsStatus: Updates the status of one or more versions of a package.    UpdateRepository: Updates the properties of a repository.
public struct CodeArtifact: AWSService {
    // MARK: Member variables

    /// Client used for communication with AWS
    public let client: AWSClient
    /// Service configuration
    public let config: AWSServiceConfig

    // MARK: Initialization

    /// Initialize the CodeArtifact client
    /// - parameters:
    ///     - client: AWSClient used to process requests
    ///     - region: Region of server you want to communicate with. This will override the partition parameter.
    ///     - partition: AWS partition where service resides, standard (.aws), china (.awscn), government (.awsusgov).
    ///     - endpoint: Custom endpoint URL to use instead of standard AWS servers
    ///     - middleware: Middleware chain used to edit requests before they are sent and responses before they are decoded 
    ///     - timeout: Timeout value for HTTP requests
    ///     - byteBufferAllocator: Allocator for ByteBuffers
    ///     - options: Service options
    public init(
        client: AWSClient,
        region: SotoCore.Region? = nil,
        partition: AWSPartition = .aws,
        endpoint: String? = nil,
        middleware: AWSMiddlewareProtocol? = nil,
        timeout: TimeAmount? = nil,
        byteBufferAllocator: ByteBufferAllocator = ByteBufferAllocator(),
        options: AWSServiceConfig.Options = []
    ) {
        self.client = client
        self.config = AWSServiceConfig(
            region: region,
            partition: region?.partition ?? partition,
            serviceName: "CodeArtifact",
            serviceIdentifier: "codeartifact",
            serviceProtocol: .restjson,
            apiVersion: "2018-09-22",
            endpoint: endpoint,
            errorType: CodeArtifactErrorType.self,
            middleware: middleware,
            timeout: timeout,
            byteBufferAllocator: byteBufferAllocator,
            options: options
        )
    }





    // MARK: API Calls

    /// Adds an existing external connection to a repository. One external connection is allowed per repository.  A repository can have one or more upstream repositories, or an external connection.
    @Sendable
    public func associateExternalConnection(_ input: AssociateExternalConnectionRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> AssociateExternalConnectionResult {
        return try await self.client.execute(
            operation: "AssociateExternalConnection", 
            path: "/v1/repository/external-connection", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    ///  Copies package versions from one repository to another repository in the same domain.    You must specify versions or versionRevisions. You cannot specify both.
    @Sendable
    public func copyPackageVersions(_ input: CopyPackageVersionsRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> CopyPackageVersionsResult {
        return try await self.client.execute(
            operation: "CopyPackageVersions", 
            path: "/v1/package/versions/copy", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    ///  Creates a domain. CodeArtifact domains make it easier to manage multiple repositories across an organization. You can use a domain to apply permissions across many repositories owned by different Amazon Web Services accounts. An asset is stored only once in a domain, even if it's in multiple repositories.   Although you can have multiple domains, we recommend a single production domain that contains all published artifacts so that your development teams can find and share packages. You can use a second pre-production domain to test changes to the production domain configuration.
    @Sendable
    public func createDomain(_ input: CreateDomainRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> CreateDomainResult {
        return try await self.client.execute(
            operation: "CreateDomain", 
            path: "/v1/domain", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    ///  Creates a package group. For more information about creating package groups, including example CLI commands, see Create a package group in the CodeArtifact User Guide.
    @Sendable
    public func createPackageGroup(_ input: CreatePackageGroupRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> CreatePackageGroupResult {
        return try await self.client.execute(
            operation: "CreatePackageGroup", 
            path: "/v1/package-group", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    ///  Creates a repository.
    @Sendable
    public func createRepository(_ input: CreateRepositoryRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> CreateRepositoryResult {
        return try await self.client.execute(
            operation: "CreateRepository", 
            path: "/v1/repository", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    ///  Deletes a domain. You cannot delete a domain that contains repositories. If you want to delete a domain with repositories, first delete its repositories.
    @Sendable
    public func deleteDomain(_ input: DeleteDomainRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DeleteDomainResult {
        return try await self.client.execute(
            operation: "DeleteDomain", 
            path: "/v1/domain", 
            httpMethod: .DELETE, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    ///  Deletes the resource policy set on a domain.
    @Sendable
    public func deleteDomainPermissionsPolicy(_ input: DeleteDomainPermissionsPolicyRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DeleteDomainPermissionsPolicyResult {
        return try await self.client.execute(
            operation: "DeleteDomainPermissionsPolicy", 
            path: "/v1/domain/permissions/policy", 
            httpMethod: .DELETE, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Deletes a package and all associated package versions. A deleted package cannot be restored. To delete one or more package versions, use the DeletePackageVersions API.
    @Sendable
    public func deletePackage(_ input: DeletePackageRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DeletePackageResult {
        return try await self.client.execute(
            operation: "DeletePackage", 
            path: "/v1/package", 
            httpMethod: .DELETE, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Deletes a package group.  Deleting a package group does not delete packages or package versions associated with the package group.  When a package group is deleted, the direct child package groups will become children of the package  group's direct parent package group. Therefore, if any of the child groups are inheriting any settings  from the parent, those settings could change.
    @Sendable
    public func deletePackageGroup(_ input: DeletePackageGroupRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DeletePackageGroupResult {
        return try await self.client.execute(
            operation: "DeletePackageGroup", 
            path: "/v1/package-group", 
            httpMethod: .DELETE, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    ///  Deletes one or more versions of a package. A deleted package version cannot be restored in your repository. If you want to remove a package version from your repository and be able to restore it later, set its status to Archived. Archived packages cannot be downloaded from a repository and don't show up with list package APIs (for example, ListPackageVersions), but you can restore them using UpdatePackageVersionsStatus.
    @Sendable
    public func deletePackageVersions(_ input: DeletePackageVersionsRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DeletePackageVersionsResult {
        return try await self.client.execute(
            operation: "DeletePackageVersions", 
            path: "/v1/package/versions/delete", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    ///  Deletes a repository.
    @Sendable
    public func deleteRepository(_ input: DeleteRepositoryRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DeleteRepositoryResult {
        return try await self.client.execute(
            operation: "DeleteRepository", 
            path: "/v1/repository", 
            httpMethod: .DELETE, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    ///  Deletes the resource policy that is set on a repository. After a resource policy is deleted, the permissions allowed and denied by the deleted policy are removed. The effect of deleting a resource policy might not be immediate.    Use DeleteRepositoryPermissionsPolicy with caution. After a policy is deleted, Amazon Web Services users, roles, and accounts lose permissions to perform the repository actions granted by the deleted policy.
    @Sendable
    public func deleteRepositoryPermissionsPolicy(_ input: DeleteRepositoryPermissionsPolicyRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DeleteRepositoryPermissionsPolicyResult {
        return try await self.client.execute(
            operation: "DeleteRepositoryPermissionsPolicy", 
            path: "/v1/repository/permissions/policies", 
            httpMethod: .DELETE, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    ///  Returns a  DomainDescription  object that contains information about the requested domain.
    @Sendable
    public func describeDomain(_ input: DescribeDomainRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DescribeDomainResult {
        return try await self.client.execute(
            operation: "DescribeDomain", 
            path: "/v1/domain", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    ///  Returns a  PackageDescription  object that contains information about the requested package.
    @Sendable
    public func describePackage(_ input: DescribePackageRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DescribePackageResult {
        return try await self.client.execute(
            operation: "DescribePackage", 
            path: "/v1/package", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Returns a PackageGroupDescription object that  contains information about the requested package group.
    @Sendable
    public func describePackageGroup(_ input: DescribePackageGroupRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DescribePackageGroupResult {
        return try await self.client.execute(
            operation: "DescribePackageGroup", 
            path: "/v1/package-group", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    ///  Returns a  PackageVersionDescription  object that contains information about the requested package version.
    @Sendable
    public func describePackageVersion(_ input: DescribePackageVersionRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DescribePackageVersionResult {
        return try await self.client.execute(
            operation: "DescribePackageVersion", 
            path: "/v1/package/version", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    ///  Returns a RepositoryDescription object that contains detailed information  about the requested repository.
    @Sendable
    public func describeRepository(_ input: DescribeRepositoryRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DescribeRepositoryResult {
        return try await self.client.execute(
            operation: "DescribeRepository", 
            path: "/v1/repository", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    ///  Removes an existing external connection from a repository.
    @Sendable
    public func disassociateExternalConnection(_ input: DisassociateExternalConnectionRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DisassociateExternalConnectionResult {
        return try await self.client.execute(
            operation: "DisassociateExternalConnection", 
            path: "/v1/repository/external-connection", 
            httpMethod: .DELETE, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    ///  Deletes the assets in package versions and sets the package versions' status to Disposed. A disposed package version cannot be restored in your repository because its assets are deleted.   To view all disposed package versions in a repository, use ListPackageVersions and set the  status parameter  to Disposed.   To view information about a disposed package version, use DescribePackageVersion.
    @Sendable
    public func disposePackageVersions(_ input: DisposePackageVersionsRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DisposePackageVersionsResult {
        return try await self.client.execute(
            operation: "DisposePackageVersions", 
            path: "/v1/package/versions/dispose", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Returns the most closely associated package group to the specified package. This API does not require that the package exist  in any repository in the domain. As such, GetAssociatedPackageGroup can be used to see which package group's origin configuration  applies to a package before that package is in a repository. This can be helpful to check if public packages are blocked without ingesting them. For information package group association and matching, see  Package group  definition syntax and matching behavior in the CodeArtifact User Guide.
    @Sendable
    public func getAssociatedPackageGroup(_ input: GetAssociatedPackageGroupRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> GetAssociatedPackageGroupResult {
        return try await self.client.execute(
            operation: "GetAssociatedPackageGroup", 
            path: "/v1/get-associated-package-group", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    ///  Generates a temporary authorization token for accessing repositories in the domain.  This API requires the codeartifact:GetAuthorizationToken and sts:GetServiceBearerToken permissions.  For more information about authorization tokens, see  CodeArtifact authentication and tokens.   CodeArtifact authorization tokens are valid for a period of 12 hours when created with the login command.  You can call login periodically to refresh the token. When  you create an authorization token with the GetAuthorizationToken API, you can set a custom authorization period,  up to a maximum of 12 hours, with the durationSeconds parameter. The authorization period begins after login  or GetAuthorizationToken is called. If login or GetAuthorizationToken is called while  assuming a role, the token lifetime is independent of the maximum session duration  of the role. For example, if you call sts assume-role and specify a session duration of 15 minutes, then  generate a CodeArtifact authorization token, the token will be valid for the full authorization period  even though this is longer than the 15-minute session duration. See  Using IAM Roles  for more information on controlling session duration.
    @Sendable
    public func getAuthorizationToken(_ input: GetAuthorizationTokenRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> GetAuthorizationTokenResult {
        return try await self.client.execute(
            operation: "GetAuthorizationToken", 
            path: "/v1/authorization-token", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    ///  Returns the resource policy attached to the specified domain.    The policy is a resource-based policy, not an identity-based policy. For more information, see Identity-based policies and resource-based policies  in the IAM User Guide.
    @Sendable
    public func getDomainPermissionsPolicy(_ input: GetDomainPermissionsPolicyRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> GetDomainPermissionsPolicyResult {
        return try await self.client.execute(
            operation: "GetDomainPermissionsPolicy", 
            path: "/v1/domain/permissions/policy", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    ///  Returns an asset (or file) that is in a package. For example, for a Maven package version, use  GetPackageVersionAsset to download a JAR file, a POM file,  or any other assets in the package version.
    @Sendable
    public func getPackageVersionAsset(_ input: GetPackageVersionAssetRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> GetPackageVersionAssetResult {
        return try await self.client.execute(
            operation: "GetPackageVersionAsset", 
            path: "/v1/package/version/asset", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    ///  Gets the readme file or descriptive text for a package version.   The returned text might contain formatting. For example, it might contain formatting for Markdown or reStructuredText.
    @Sendable
    public func getPackageVersionReadme(_ input: GetPackageVersionReadmeRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> GetPackageVersionReadmeResult {
        return try await self.client.execute(
            operation: "GetPackageVersionReadme", 
            path: "/v1/package/version/readme", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    ///  Returns the endpoint of a repository for a specific package format. A repository has one endpoint for each  package format:     generic     maven     npm     nuget     pypi     swift
    @Sendable
    public func getRepositoryEndpoint(_ input: GetRepositoryEndpointRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> GetRepositoryEndpointResult {
        return try await self.client.execute(
            operation: "GetRepositoryEndpoint", 
            path: "/v1/repository/endpoint", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    ///  Returns the resource policy that is set on a repository.
    @Sendable
    public func getRepositoryPermissionsPolicy(_ input: GetRepositoryPermissionsPolicyRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> GetRepositoryPermissionsPolicyResult {
        return try await self.client.execute(
            operation: "GetRepositoryPermissionsPolicy", 
            path: "/v1/repository/permissions/policy", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Lists the repositories in the added repositories list of the specified restriction type for a package group. For more information about restriction types  and added repository lists, see Package group origin controls in the CodeArtifact User Guide.
    @Sendable
    public func listAllowedRepositoriesForGroup(_ input: ListAllowedRepositoriesForGroupRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> ListAllowedRepositoriesForGroupResult {
        return try await self.client.execute(
            operation: "ListAllowedRepositoriesForGroup", 
            path: "/v1/package-group-allowed-repositories", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Returns a list of packages associated with the requested package group. For information package group association and matching, see  Package group  definition syntax and matching behavior in the CodeArtifact User Guide.
    @Sendable
    public func listAssociatedPackages(_ input: ListAssociatedPackagesRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> ListAssociatedPackagesResult {
        return try await self.client.execute(
            operation: "ListAssociatedPackages", 
            path: "/v1/list-associated-packages", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    ///  Returns a list of DomainSummary objects for all domains owned by the Amazon Web Services account that makes this call. Each returned DomainSummary object contains information about a domain.
    @Sendable
    public func listDomains(_ input: ListDomainsRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> ListDomainsResult {
        return try await self.client.execute(
            operation: "ListDomains", 
            path: "/v1/domains", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Returns a list of package groups in the requested domain.
    @Sendable
    public func listPackageGroups(_ input: ListPackageGroupsRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> ListPackageGroupsResult {
        return try await self.client.execute(
            operation: "ListPackageGroups", 
            path: "/v1/package-groups", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    ///  Returns a list of  AssetSummary  objects for assets in a package version.
    @Sendable
    public func listPackageVersionAssets(_ input: ListPackageVersionAssetsRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> ListPackageVersionAssetsResult {
        return try await self.client.execute(
            operation: "ListPackageVersionAssets", 
            path: "/v1/package/version/assets", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    ///  Returns the direct dependencies for a package version. The dependencies are returned as  PackageDependency  objects. CodeArtifact extracts the dependencies for a package version from the metadata file for the package  format (for example, the package.json file for npm packages and the pom.xml file  for Maven). Any package version dependencies that are not listed in the configuration file are not returned.
    @Sendable
    public func listPackageVersionDependencies(_ input: ListPackageVersionDependenciesRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> ListPackageVersionDependenciesResult {
        return try await self.client.execute(
            operation: "ListPackageVersionDependencies", 
            path: "/v1/package/version/dependencies", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    ///  Returns a list of  PackageVersionSummary  objects for package versions in a repository that match the request parameters. Package versions of all statuses will be returned by default when calling list-package-versions with no  --status parameter.
    @Sendable
    public func listPackageVersions(_ input: ListPackageVersionsRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> ListPackageVersionsResult {
        return try await self.client.execute(
            operation: "ListPackageVersions", 
            path: "/v1/package/versions", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    ///  Returns a list of  PackageSummary  objects for packages in a repository that match the request parameters.
    @Sendable
    public func listPackages(_ input: ListPackagesRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> ListPackagesResult {
        return try await self.client.execute(
            operation: "ListPackages", 
            path: "/v1/packages", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    ///  Returns a list of  RepositorySummary  objects. Each RepositorySummary contains information about a repository in the specified Amazon Web Services account and that matches the input  parameters.
    @Sendable
    public func listRepositories(_ input: ListRepositoriesRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> ListRepositoriesResult {
        return try await self.client.execute(
            operation: "ListRepositories", 
            path: "/v1/repositories", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    ///  Returns a list of  RepositorySummary  objects. Each RepositorySummary contains information about a repository in the specified domain and that matches the input  parameters.
    @Sendable
    public func listRepositoriesInDomain(_ input: ListRepositoriesInDomainRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> ListRepositoriesInDomainResult {
        return try await self.client.execute(
            operation: "ListRepositoriesInDomain", 
            path: "/v1/domain/repositories", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Returns a list of direct children of the specified package group. For information package group hierarchy, see  Package group  definition syntax and matching behavior in the CodeArtifact User Guide.
    @Sendable
    public func listSubPackageGroups(_ input: ListSubPackageGroupsRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> ListSubPackageGroupsResult {
        return try await self.client.execute(
            operation: "ListSubPackageGroups", 
            path: "/v1/package-groups/sub-groups", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Gets information about Amazon Web Services tags for a specified Amazon Resource Name (ARN) in CodeArtifact.
    @Sendable
    public func listTagsForResource(_ input: ListTagsForResourceRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> ListTagsForResourceResult {
        return try await self.client.execute(
            operation: "ListTagsForResource", 
            path: "/v1/tags", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Creates a new package version containing one or more assets (or files). The unfinished flag can be used to keep the package version in the Unfinished state until all of its assets have been uploaded (see Package version status in the CodeArtifact user guide). To set the package version’s status to Published, omit the unfinished flag when uploading the final asset, or set the status using UpdatePackageVersionStatus. Once a package version’s status is set to Published, it cannot change back to Unfinished.  Only generic packages can be published using this API. For more information, see Using generic packages in the CodeArtifact User Guide.
    @Sendable
    public func publishPackageVersion(_ input: PublishPackageVersionRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> PublishPackageVersionResult {
        return try await self.client.execute(
            operation: "PublishPackageVersion", 
            path: "/v1/package/version/publish", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    ///  Sets a resource policy on a domain that specifies permissions to access it.   When you call PutDomainPermissionsPolicy, the resource policy on the domain is ignored when evaluting permissions.  This ensures that the owner of a domain cannot lock themselves out of the domain, which would prevent them from being  able to update the resource policy.
    @Sendable
    public func putDomainPermissionsPolicy(_ input: PutDomainPermissionsPolicyRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> PutDomainPermissionsPolicyResult {
        return try await self.client.execute(
            operation: "PutDomainPermissionsPolicy", 
            path: "/v1/domain/permissions/policy", 
            httpMethod: .PUT, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Sets the package origin configuration for a package. The package origin configuration determines how new versions of a package can be added to a repository. You can allow or block direct  publishing of new package versions, or ingestion and retaining of new package versions from an external connection or upstream source.  For more information about package origin controls and configuration, see Editing package origin controls in the CodeArtifact User Guide.  PutPackageOriginConfiguration can be called on a package that doesn't yet exist in the repository. When called  on a package that does not exist, a package is created in the repository with no versions and the requested restrictions are set on the package.  This can be used to preemptively block ingesting or retaining any versions from external connections or upstream repositories, or to block  publishing any versions of the package into the repository before connecting any package managers or publishers to the repository.
    @Sendable
    public func putPackageOriginConfiguration(_ input: PutPackageOriginConfigurationRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> PutPackageOriginConfigurationResult {
        return try await self.client.execute(
            operation: "PutPackageOriginConfiguration", 
            path: "/v1/package", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    ///  Sets the resource policy on a repository that specifies permissions to access it.   When you call PutRepositoryPermissionsPolicy, the resource policy on the repository is ignored when evaluting permissions.  This ensures that the owner of a repository cannot lock themselves out of the repository, which would prevent them from being  able to update the resource policy.
    @Sendable
    public func putRepositoryPermissionsPolicy(_ input: PutRepositoryPermissionsPolicyRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> PutRepositoryPermissionsPolicyResult {
        return try await self.client.execute(
            operation: "PutRepositoryPermissionsPolicy", 
            path: "/v1/repository/permissions/policy", 
            httpMethod: .PUT, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Adds or updates tags for a resource in CodeArtifact.
    @Sendable
    public func tagResource(_ input: TagResourceRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> TagResourceResult {
        return try await self.client.execute(
            operation: "TagResource", 
            path: "/v1/tag", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Removes tags from a resource in CodeArtifact.
    @Sendable
    public func untagResource(_ input: UntagResourceRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> UntagResourceResult {
        return try await self.client.execute(
            operation: "UntagResource", 
            path: "/v1/untag", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Updates a package group. This API cannot be used to update a package group's origin configuration or pattern. To update a  package group's origin configuration, use UpdatePackageGroupOriginConfiguration.
    @Sendable
    public func updatePackageGroup(_ input: UpdatePackageGroupRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> UpdatePackageGroupResult {
        return try await self.client.execute(
            operation: "UpdatePackageGroup", 
            path: "/v1/package-group", 
            httpMethod: .PUT, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Updates the package origin configuration for a package group. The package origin configuration determines how new versions of a package can be added to a repository. You can allow or block direct  publishing of new package versions, or ingestion and retaining of new package versions from an external connection or upstream source.  For more information about package group origin controls and configuration, see  Package group origin controls  in the CodeArtifact User Guide.
    @Sendable
    public func updatePackageGroupOriginConfiguration(_ input: UpdatePackageGroupOriginConfigurationRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> UpdatePackageGroupOriginConfigurationResult {
        return try await self.client.execute(
            operation: "UpdatePackageGroupOriginConfiguration", 
            path: "/v1/package-group-origin-configuration", 
            httpMethod: .PUT, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    ///  Updates the status of one or more versions of a package. Using UpdatePackageVersionsStatus,  you can update the status of package versions to Archived, Published, or Unlisted.  To set the status of a package version to Disposed, use  DisposePackageVersions.
    @Sendable
    public func updatePackageVersionsStatus(_ input: UpdatePackageVersionsStatusRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> UpdatePackageVersionsStatusResult {
        return try await self.client.execute(
            operation: "UpdatePackageVersionsStatus", 
            path: "/v1/package/versions/update_status", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    ///  Update the properties of a repository.
    @Sendable
    public func updateRepository(_ input: UpdateRepositoryRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> UpdateRepositoryResult {
        return try await self.client.execute(
            operation: "UpdateRepository", 
            path: "/v1/repository", 
            httpMethod: .PUT, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
}

extension CodeArtifact {
    /// Initializer required by `AWSService.with(middlewares:timeout:byteBufferAllocator:options)`. You are not able to use this initializer directly as there are not public
    /// initializers for `AWSServiceConfig.Patch`. Please use `AWSService.with(middlewares:timeout:byteBufferAllocator:options)` instead.
    public init(from: CodeArtifact, patch: AWSServiceConfig.Patch) {
        self.client = from.client
        self.config = from.config.with(patch: patch)
    }
}

// MARK: Paginators

@available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
extension CodeArtifact {
    /// Lists the repositories in the added repositories list of the specified restriction type for a package group. For more information about restriction types  and added repository lists, see Package group origin controls in the CodeArtifact User Guide.
    /// Return PaginatorSequence for operation.
    ///
    /// - Parameters:
    ///   - input: Input for request
    ///   - logger: Logger used flot logging
    public func listAllowedRepositoriesForGroupPaginator(
        _ input: ListAllowedRepositoriesForGroupRequest,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<ListAllowedRepositoriesForGroupRequest, ListAllowedRepositoriesForGroupResult> {
        return .init(
            input: input,
            command: self.listAllowedRepositoriesForGroup,
            inputKey: \ListAllowedRepositoriesForGroupRequest.nextToken,
            outputKey: \ListAllowedRepositoriesForGroupResult.nextToken,
            logger: logger
        )
    }

    /// Returns a list of packages associated with the requested package group. For information package group association and matching, see  Package group  definition syntax and matching behavior in the CodeArtifact User Guide.
    /// Return PaginatorSequence for operation.
    ///
    /// - Parameters:
    ///   - input: Input for request
    ///   - logger: Logger used flot logging
    public func listAssociatedPackagesPaginator(
        _ input: ListAssociatedPackagesRequest,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<ListAssociatedPackagesRequest, ListAssociatedPackagesResult> {
        return .init(
            input: input,
            command: self.listAssociatedPackages,
            inputKey: \ListAssociatedPackagesRequest.nextToken,
            outputKey: \ListAssociatedPackagesResult.nextToken,
            logger: logger
        )
    }

    ///  Returns a list of DomainSummary objects for all domains owned by the Amazon Web Services account that makes this call. Each returned DomainSummary object contains information about a domain.
    /// Return PaginatorSequence for operation.
    ///
    /// - Parameters:
    ///   - input: Input for request
    ///   - logger: Logger used flot logging
    public func listDomainsPaginator(
        _ input: ListDomainsRequest,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<ListDomainsRequest, ListDomainsResult> {
        return .init(
            input: input,
            command: self.listDomains,
            inputKey: \ListDomainsRequest.nextToken,
            outputKey: \ListDomainsResult.nextToken,
            logger: logger
        )
    }

    /// Returns a list of package groups in the requested domain.
    /// Return PaginatorSequence for operation.
    ///
    /// - Parameters:
    ///   - input: Input for request
    ///   - logger: Logger used flot logging
    public func listPackageGroupsPaginator(
        _ input: ListPackageGroupsRequest,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<ListPackageGroupsRequest, ListPackageGroupsResult> {
        return .init(
            input: input,
            command: self.listPackageGroups,
            inputKey: \ListPackageGroupsRequest.nextToken,
            outputKey: \ListPackageGroupsResult.nextToken,
            logger: logger
        )
    }

    ///  Returns a list of  AssetSummary  objects for assets in a package version.
    /// Return PaginatorSequence for operation.
    ///
    /// - Parameters:
    ///   - input: Input for request
    ///   - logger: Logger used flot logging
    public func listPackageVersionAssetsPaginator(
        _ input: ListPackageVersionAssetsRequest,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<ListPackageVersionAssetsRequest, ListPackageVersionAssetsResult> {
        return .init(
            input: input,
            command: self.listPackageVersionAssets,
            inputKey: \ListPackageVersionAssetsRequest.nextToken,
            outputKey: \ListPackageVersionAssetsResult.nextToken,
            logger: logger
        )
    }

    ///  Returns a list of  PackageVersionSummary  objects for package versions in a repository that match the request parameters. Package versions of all statuses will be returned by default when calling list-package-versions with no  --status parameter.
    /// Return PaginatorSequence for operation.
    ///
    /// - Parameters:
    ///   - input: Input for request
    ///   - logger: Logger used flot logging
    public func listPackageVersionsPaginator(
        _ input: ListPackageVersionsRequest,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<ListPackageVersionsRequest, ListPackageVersionsResult> {
        return .init(
            input: input,
            command: self.listPackageVersions,
            inputKey: \ListPackageVersionsRequest.nextToken,
            outputKey: \ListPackageVersionsResult.nextToken,
            logger: logger
        )
    }

    ///  Returns a list of  PackageSummary  objects for packages in a repository that match the request parameters.
    /// Return PaginatorSequence for operation.
    ///
    /// - Parameters:
    ///   - input: Input for request
    ///   - logger: Logger used flot logging
    public func listPackagesPaginator(
        _ input: ListPackagesRequest,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<ListPackagesRequest, ListPackagesResult> {
        return .init(
            input: input,
            command: self.listPackages,
            inputKey: \ListPackagesRequest.nextToken,
            outputKey: \ListPackagesResult.nextToken,
            logger: logger
        )
    }

    ///  Returns a list of  RepositorySummary  objects. Each RepositorySummary contains information about a repository in the specified Amazon Web Services account and that matches the input  parameters.
    /// Return PaginatorSequence for operation.
    ///
    /// - Parameters:
    ///   - input: Input for request
    ///   - logger: Logger used flot logging
    public func listRepositoriesPaginator(
        _ input: ListRepositoriesRequest,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<ListRepositoriesRequest, ListRepositoriesResult> {
        return .init(
            input: input,
            command: self.listRepositories,
            inputKey: \ListRepositoriesRequest.nextToken,
            outputKey: \ListRepositoriesResult.nextToken,
            logger: logger
        )
    }

    ///  Returns a list of  RepositorySummary  objects. Each RepositorySummary contains information about a repository in the specified domain and that matches the input  parameters.
    /// Return PaginatorSequence for operation.
    ///
    /// - Parameters:
    ///   - input: Input for request
    ///   - logger: Logger used flot logging
    public func listRepositoriesInDomainPaginator(
        _ input: ListRepositoriesInDomainRequest,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<ListRepositoriesInDomainRequest, ListRepositoriesInDomainResult> {
        return .init(
            input: input,
            command: self.listRepositoriesInDomain,
            inputKey: \ListRepositoriesInDomainRequest.nextToken,
            outputKey: \ListRepositoriesInDomainResult.nextToken,
            logger: logger
        )
    }

    /// Returns a list of direct children of the specified package group. For information package group hierarchy, see  Package group  definition syntax and matching behavior in the CodeArtifact User Guide.
    /// Return PaginatorSequence for operation.
    ///
    /// - Parameters:
    ///   - input: Input for request
    ///   - logger: Logger used flot logging
    public func listSubPackageGroupsPaginator(
        _ input: ListSubPackageGroupsRequest,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<ListSubPackageGroupsRequest, ListSubPackageGroupsResult> {
        return .init(
            input: input,
            command: self.listSubPackageGroups,
            inputKey: \ListSubPackageGroupsRequest.nextToken,
            outputKey: \ListSubPackageGroupsResult.nextToken,
            logger: logger
        )
    }
}

extension CodeArtifact.ListAllowedRepositoriesForGroupRequest: AWSPaginateToken {
    public func usingPaginationToken(_ token: String) -> CodeArtifact.ListAllowedRepositoriesForGroupRequest {
        return .init(
            domain: self.domain,
            domainOwner: self.domainOwner,
            maxResults: self.maxResults,
            nextToken: token,
            originRestrictionType: self.originRestrictionType,
            packageGroup: self.packageGroup
        )
    }
}

extension CodeArtifact.ListAssociatedPackagesRequest: AWSPaginateToken {
    public func usingPaginationToken(_ token: String) -> CodeArtifact.ListAssociatedPackagesRequest {
        return .init(
            domain: self.domain,
            domainOwner: self.domainOwner,
            maxResults: self.maxResults,
            nextToken: token,
            packageGroup: self.packageGroup,
            preview: self.preview
        )
    }
}

extension CodeArtifact.ListDomainsRequest: AWSPaginateToken {
    public func usingPaginationToken(_ token: String) -> CodeArtifact.ListDomainsRequest {
        return .init(
            maxResults: self.maxResults,
            nextToken: token
        )
    }
}

extension CodeArtifact.ListPackageGroupsRequest: AWSPaginateToken {
    public func usingPaginationToken(_ token: String) -> CodeArtifact.ListPackageGroupsRequest {
        return .init(
            domain: self.domain,
            domainOwner: self.domainOwner,
            maxResults: self.maxResults,
            nextToken: token,
            prefix: self.prefix
        )
    }
}

extension CodeArtifact.ListPackageVersionAssetsRequest: AWSPaginateToken {
    public func usingPaginationToken(_ token: String) -> CodeArtifact.ListPackageVersionAssetsRequest {
        return .init(
            domain: self.domain,
            domainOwner: self.domainOwner,
            format: self.format,
            maxResults: self.maxResults,
            namespace: self.namespace,
            nextToken: token,
            package: self.package,
            packageVersion: self.packageVersion,
            repository: self.repository
        )
    }
}

extension CodeArtifact.ListPackageVersionsRequest: AWSPaginateToken {
    public func usingPaginationToken(_ token: String) -> CodeArtifact.ListPackageVersionsRequest {
        return .init(
            domain: self.domain,
            domainOwner: self.domainOwner,
            format: self.format,
            maxResults: self.maxResults,
            namespace: self.namespace,
            nextToken: token,
            originType: self.originType,
            package: self.package,
            repository: self.repository,
            sortBy: self.sortBy,
            status: self.status
        )
    }
}

extension CodeArtifact.ListPackagesRequest: AWSPaginateToken {
    public func usingPaginationToken(_ token: String) -> CodeArtifact.ListPackagesRequest {
        return .init(
            domain: self.domain,
            domainOwner: self.domainOwner,
            format: self.format,
            maxResults: self.maxResults,
            namespace: self.namespace,
            nextToken: token,
            packagePrefix: self.packagePrefix,
            publish: self.publish,
            repository: self.repository,
            upstream: self.upstream
        )
    }
}

extension CodeArtifact.ListRepositoriesInDomainRequest: AWSPaginateToken {
    public func usingPaginationToken(_ token: String) -> CodeArtifact.ListRepositoriesInDomainRequest {
        return .init(
            administratorAccount: self.administratorAccount,
            domain: self.domain,
            domainOwner: self.domainOwner,
            maxResults: self.maxResults,
            nextToken: token,
            repositoryPrefix: self.repositoryPrefix
        )
    }
}

extension CodeArtifact.ListRepositoriesRequest: AWSPaginateToken {
    public func usingPaginationToken(_ token: String) -> CodeArtifact.ListRepositoriesRequest {
        return .init(
            maxResults: self.maxResults,
            nextToken: token,
            repositoryPrefix: self.repositoryPrefix
        )
    }
}

extension CodeArtifact.ListSubPackageGroupsRequest: AWSPaginateToken {
    public func usingPaginationToken(_ token: String) -> CodeArtifact.ListSubPackageGroupsRequest {
        return .init(
            domain: self.domain,
            domainOwner: self.domainOwner,
            maxResults: self.maxResults,
            nextToken: token,
            packageGroup: self.packageGroup
        )
    }
}
