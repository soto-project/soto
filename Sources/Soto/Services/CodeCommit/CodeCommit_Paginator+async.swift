//===----------------------------------------------------------------------===//
//
// This source file is part of the Soto for AWS open source project
//
// Copyright (c) 2017-2021 the Soto project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
// See CONTRIBUTORS.txt for the list of Soto project authors
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by https://github.com/soto-project/soto/tree/main/CodeGenerator. DO NOT EDIT.

#if compiler(>=5.5)

import SotoCore

// MARK: Paginators

@available(macOS 12.0, iOS 15.0, watchOS 8.0, tvOS 15.0, *)
extension CodeCommit {
    ///  Returns information about one or more merge conflicts in the attempted merge of two commit specifiers using the squash or three-way merge strategy. If the merge option for the attempted merge is specified as FAST_FORWARD_MERGE, an exception is thrown.
    /// Return PaginatorSequence for operation.
    ///
    /// - Parameters:
    ///   - input: Input for request
    ///   - logger: Logger used flot logging
    ///   - eventLoop: EventLoop to run this process on
    public func describeMergeConflictsPaginator(
        _ input: DescribeMergeConflictsInput,
        logger: Logger = AWSClient.loggingDisabled,
        on eventLoop: EventLoop? = nil
    ) -> AWSClient.PaginatorSequence<DescribeMergeConflictsInput, DescribeMergeConflictsOutput> {
        return .init(
            input: input,
            command: describeMergeConflicts,
            inputKey: \DescribeMergeConflictsInput.nextToken,
            outputKey: \DescribeMergeConflictsOutput.nextToken,
            logger: logger,
            on: eventLoop
        )
    }

    ///  Returns information about one or more pull request events.
    /// Return PaginatorSequence for operation.
    ///
    /// - Parameters:
    ///   - input: Input for request
    ///   - logger: Logger used flot logging
    ///   - eventLoop: EventLoop to run this process on
    public func describePullRequestEventsPaginator(
        _ input: DescribePullRequestEventsInput,
        logger: Logger = AWSClient.loggingDisabled,
        on eventLoop: EventLoop? = nil
    ) -> AWSClient.PaginatorSequence<DescribePullRequestEventsInput, DescribePullRequestEventsOutput> {
        return .init(
            input: input,
            command: describePullRequestEvents,
            inputKey: \DescribePullRequestEventsInput.nextToken,
            outputKey: \DescribePullRequestEventsOutput.nextToken,
            logger: logger,
            on: eventLoop
        )
    }

    ///  Returns information about reactions to a specified comment ID. Reactions from users who have been deleted will not be included in the count.
    /// Return PaginatorSequence for operation.
    ///
    /// - Parameters:
    ///   - input: Input for request
    ///   - logger: Logger used flot logging
    ///   - eventLoop: EventLoop to run this process on
    public func getCommentReactionsPaginator(
        _ input: GetCommentReactionsInput,
        logger: Logger = AWSClient.loggingDisabled,
        on eventLoop: EventLoop? = nil
    ) -> AWSClient.PaginatorSequence<GetCommentReactionsInput, GetCommentReactionsOutput> {
        return .init(
            input: input,
            command: getCommentReactions,
            inputKey: \GetCommentReactionsInput.nextToken,
            outputKey: \GetCommentReactionsOutput.nextToken,
            logger: logger,
            on: eventLoop
        )
    }

    ///  Returns information about comments made on the comparison between two commits.  Reaction counts might include numbers from user identities who were deleted after the reaction was made. For a count of reactions from active identities, use GetCommentReactions.
    /// Return PaginatorSequence for operation.
    ///
    /// - Parameters:
    ///   - input: Input for request
    ///   - logger: Logger used flot logging
    ///   - eventLoop: EventLoop to run this process on
    public func getCommentsForComparedCommitPaginator(
        _ input: GetCommentsForComparedCommitInput,
        logger: Logger = AWSClient.loggingDisabled,
        on eventLoop: EventLoop? = nil
    ) -> AWSClient.PaginatorSequence<GetCommentsForComparedCommitInput, GetCommentsForComparedCommitOutput> {
        return .init(
            input: input,
            command: getCommentsForComparedCommit,
            inputKey: \GetCommentsForComparedCommitInput.nextToken,
            outputKey: \GetCommentsForComparedCommitOutput.nextToken,
            logger: logger,
            on: eventLoop
        )
    }

    ///  Returns comments made on a pull request.  Reaction counts might include numbers from user identities who were deleted after the reaction was made. For a count of reactions from active identities, use GetCommentReactions.
    /// Return PaginatorSequence for operation.
    ///
    /// - Parameters:
    ///   - input: Input for request
    ///   - logger: Logger used flot logging
    ///   - eventLoop: EventLoop to run this process on
    public func getCommentsForPullRequestPaginator(
        _ input: GetCommentsForPullRequestInput,
        logger: Logger = AWSClient.loggingDisabled,
        on eventLoop: EventLoop? = nil
    ) -> AWSClient.PaginatorSequence<GetCommentsForPullRequestInput, GetCommentsForPullRequestOutput> {
        return .init(
            input: input,
            command: getCommentsForPullRequest,
            inputKey: \GetCommentsForPullRequestInput.nextToken,
            outputKey: \GetCommentsForPullRequestOutput.nextToken,
            logger: logger,
            on: eventLoop
        )
    }

    ///  Returns information about the differences in a valid commit specifier (such as a branch, tag, HEAD, commit ID, or other fully qualified reference). Results can be limited to a specified path.
    /// Return PaginatorSequence for operation.
    ///
    /// - Parameters:
    ///   - input: Input for request
    ///   - logger: Logger used flot logging
    ///   - eventLoop: EventLoop to run this process on
    public func getDifferencesPaginator(
        _ input: GetDifferencesInput,
        logger: Logger = AWSClient.loggingDisabled,
        on eventLoop: EventLoop? = nil
    ) -> AWSClient.PaginatorSequence<GetDifferencesInput, GetDifferencesOutput> {
        return .init(
            input: input,
            command: getDifferences,
            inputKey: \GetDifferencesInput.nextToken,
            outputKey: \GetDifferencesOutput.nextToken,
            logger: logger,
            on: eventLoop
        )
    }

    ///  Returns information about merge conflicts between the before and after commit IDs for a pull request in a repository.
    /// Return PaginatorSequence for operation.
    ///
    /// - Parameters:
    ///   - input: Input for request
    ///   - logger: Logger used flot logging
    ///   - eventLoop: EventLoop to run this process on
    public func getMergeConflictsPaginator(
        _ input: GetMergeConflictsInput,
        logger: Logger = AWSClient.loggingDisabled,
        on eventLoop: EventLoop? = nil
    ) -> AWSClient.PaginatorSequence<GetMergeConflictsInput, GetMergeConflictsOutput> {
        return .init(
            input: input,
            command: getMergeConflicts,
            inputKey: \GetMergeConflictsInput.nextToken,
            outputKey: \GetMergeConflictsOutput.nextToken,
            logger: logger,
            on: eventLoop
        )
    }

    ///  Lists all approval rule templates in the specified AWS Region in your AWS account. If an AWS Region is not specified, the AWS Region where you are signed in is used.
    /// Return PaginatorSequence for operation.
    ///
    /// - Parameters:
    ///   - input: Input for request
    ///   - logger: Logger used flot logging
    ///   - eventLoop: EventLoop to run this process on
    public func listApprovalRuleTemplatesPaginator(
        _ input: ListApprovalRuleTemplatesInput,
        logger: Logger = AWSClient.loggingDisabled,
        on eventLoop: EventLoop? = nil
    ) -> AWSClient.PaginatorSequence<ListApprovalRuleTemplatesInput, ListApprovalRuleTemplatesOutput> {
        return .init(
            input: input,
            command: listApprovalRuleTemplates,
            inputKey: \ListApprovalRuleTemplatesInput.nextToken,
            outputKey: \ListApprovalRuleTemplatesOutput.nextToken,
            logger: logger,
            on: eventLoop
        )
    }

    ///  Lists all approval rule templates that are associated with a specified repository.
    /// Return PaginatorSequence for operation.
    ///
    /// - Parameters:
    ///   - input: Input for request
    ///   - logger: Logger used flot logging
    ///   - eventLoop: EventLoop to run this process on
    public func listAssociatedApprovalRuleTemplatesForRepositoryPaginator(
        _ input: ListAssociatedApprovalRuleTemplatesForRepositoryInput,
        logger: Logger = AWSClient.loggingDisabled,
        on eventLoop: EventLoop? = nil
    ) -> AWSClient.PaginatorSequence<ListAssociatedApprovalRuleTemplatesForRepositoryInput, ListAssociatedApprovalRuleTemplatesForRepositoryOutput> {
        return .init(
            input: input,
            command: listAssociatedApprovalRuleTemplatesForRepository,
            inputKey: \ListAssociatedApprovalRuleTemplatesForRepositoryInput.nextToken,
            outputKey: \ListAssociatedApprovalRuleTemplatesForRepositoryOutput.nextToken,
            logger: logger,
            on: eventLoop
        )
    }

    ///  Gets information about one or more branches in a repository.
    /// Return PaginatorSequence for operation.
    ///
    /// - Parameters:
    ///   - input: Input for request
    ///   - logger: Logger used flot logging
    ///   - eventLoop: EventLoop to run this process on
    public func listBranchesPaginator(
        _ input: ListBranchesInput,
        logger: Logger = AWSClient.loggingDisabled,
        on eventLoop: EventLoop? = nil
    ) -> AWSClient.PaginatorSequence<ListBranchesInput, ListBranchesOutput> {
        return .init(
            input: input,
            command: listBranches,
            inputKey: \ListBranchesInput.nextToken,
            outputKey: \ListBranchesOutput.nextToken,
            logger: logger,
            on: eventLoop
        )
    }

    ///  Returns a list of pull requests for a specified repository. The return list can be refined by pull request status or pull request author ARN.
    /// Return PaginatorSequence for operation.
    ///
    /// - Parameters:
    ///   - input: Input for request
    ///   - logger: Logger used flot logging
    ///   - eventLoop: EventLoop to run this process on
    public func listPullRequestsPaginator(
        _ input: ListPullRequestsInput,
        logger: Logger = AWSClient.loggingDisabled,
        on eventLoop: EventLoop? = nil
    ) -> AWSClient.PaginatorSequence<ListPullRequestsInput, ListPullRequestsOutput> {
        return .init(
            input: input,
            command: listPullRequests,
            inputKey: \ListPullRequestsInput.nextToken,
            outputKey: \ListPullRequestsOutput.nextToken,
            logger: logger,
            on: eventLoop
        )
    }

    ///  Gets information about one or more repositories.
    /// Return PaginatorSequence for operation.
    ///
    /// - Parameters:
    ///   - input: Input for request
    ///   - logger: Logger used flot logging
    ///   - eventLoop: EventLoop to run this process on
    public func listRepositoriesPaginator(
        _ input: ListRepositoriesInput,
        logger: Logger = AWSClient.loggingDisabled,
        on eventLoop: EventLoop? = nil
    ) -> AWSClient.PaginatorSequence<ListRepositoriesInput, ListRepositoriesOutput> {
        return .init(
            input: input,
            command: listRepositories,
            inputKey: \ListRepositoriesInput.nextToken,
            outputKey: \ListRepositoriesOutput.nextToken,
            logger: logger,
            on: eventLoop
        )
    }

    ///  Lists all repositories associated with the specified approval rule template.
    /// Return PaginatorSequence for operation.
    ///
    /// - Parameters:
    ///   - input: Input for request
    ///   - logger: Logger used flot logging
    ///   - eventLoop: EventLoop to run this process on
    public func listRepositoriesForApprovalRuleTemplatePaginator(
        _ input: ListRepositoriesForApprovalRuleTemplateInput,
        logger: Logger = AWSClient.loggingDisabled,
        on eventLoop: EventLoop? = nil
    ) -> AWSClient.PaginatorSequence<ListRepositoriesForApprovalRuleTemplateInput, ListRepositoriesForApprovalRuleTemplateOutput> {
        return .init(
            input: input,
            command: listRepositoriesForApprovalRuleTemplate,
            inputKey: \ListRepositoriesForApprovalRuleTemplateInput.nextToken,
            outputKey: \ListRepositoriesForApprovalRuleTemplateOutput.nextToken,
            logger: logger,
            on: eventLoop
        )
    }
}

#endif // compiler(>=5.5)
