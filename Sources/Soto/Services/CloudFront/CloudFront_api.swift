//===----------------------------------------------------------------------===//
//
// This source file is part of the Soto for AWS open source project
//
// Copyright (c) 2017-2024 the Soto project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
// See CONTRIBUTORS.txt for the list of Soto project authors
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by https://github.com/soto-project/soto-codegenerator.
// DO NOT EDIT.

#if canImport(FoundationEssentials)
import FoundationEssentials
#else
import Foundation
#endif
@_exported import SotoCore

/// Service object for interacting with AWS CloudFront service.
///
/// Amazon CloudFront This is the Amazon CloudFront API Reference. This guide is for developers
/// 			who need detailed information about CloudFront API actions, data types, and errors. For
/// 			detailed information about CloudFront features, see the
/// 			Amazon CloudFront Developer Guide.
public struct CloudFront: AWSService {
    // MARK: Member variables

    /// Client used for communication with AWS
    public let client: AWSClient
    /// Service configuration
    public let config: AWSServiceConfig

    // MARK: Initialization

    /// Initialize the CloudFront client
    /// - parameters:
    ///     - client: AWSClient used to process requests
    ///     - partition: AWS partition where service resides, standard (.aws), china (.awscn), government (.awsusgov).
    ///     - endpoint: Custom endpoint URL to use instead of standard AWS servers
    ///     - middleware: Middleware chain used to edit requests before they are sent and responses before they are decoded 
    ///     - timeout: Timeout value for HTTP requests
    ///     - byteBufferAllocator: Allocator for ByteBuffers
    ///     - options: Service options
    public init(
        client: AWSClient,
        partition: AWSPartition = .aws,
        endpoint: String? = nil,
        middleware: AWSMiddlewareProtocol? = nil,
        timeout: TimeAmount? = nil,
        byteBufferAllocator: ByteBufferAllocator = ByteBufferAllocator(),
        options: AWSServiceConfig.Options = []
    ) {
        self.client = client
        self.config = AWSServiceConfig(
            region: nil,
            partition: partition,
            serviceName: "CloudFront",
            serviceIdentifier: "cloudfront",
            serviceProtocol: .restxml,
            apiVersion: "2020-05-31",
            endpoint: endpoint,
            serviceEndpoints: Self.serviceEndpoints,
            partitionEndpoints: Self.partitionEndpoints,
            errorType: CloudFrontErrorType.self,
            xmlNamespace: "http://cloudfront.amazonaws.com/doc/2020-05-31/",
            middleware: middleware,
            timeout: timeout,
            byteBufferAllocator: byteBufferAllocator,
            options: options
        )
    }


    /// custom endpoints for regions
    static var serviceEndpoints: [String: String] {[
        "aws-cn-global": "cloudfront.cn-northwest-1.amazonaws.com.cn",
        "aws-global": "cloudfront.amazonaws.com"
    ]}

    /// Default endpoint and region to use for each partition
    static var partitionEndpoints: [AWSPartition: (endpoint: String, region: SotoCore.Region)] {[
        .aws: (endpoint: "aws-global", region: .useast1),
        .awscn: (endpoint: "aws-cn-global", region: .cnnorthwest1)
    ]}


    // MARK: API Calls

    /// Associates an alias (also known as a CNAME or an alternate domain name) with a CloudFront
    /// 			distribution. With this operation you can move an alias that's already in use on a CloudFront distribution
    /// 			to a different distribution in one step. This prevents the downtime that could occur if
    /// 			you first remove the alias from one distribution and then separately add the alias to
    /// 			another distribution. To use this operation to associate an alias with a distribution, you provide the alias
    /// 			and the ID of the target distribution for the alias. For more information, including how
    /// 			to set up the target distribution, prerequisites that you must complete, and other
    /// 			restrictions, see Moving an alternate domain name to a different
    /// 				distribution in the Amazon CloudFront Developer Guide.
    @Sendable
    @inlinable
    public func associateAlias(_ input: AssociateAliasRequest, logger: Logger = AWSClient.loggingDisabled) async throws {
        try await self.client.execute(
            operation: "AssociateAlias", 
            path: "/2020-05-31/distribution/{TargetDistributionId}/associate-alias", 
            httpMethod: .PUT, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Associates an alias (also known as a CNAME or an alternate domain name) with a CloudFront
    /// 			distribution. With this operation you can move an alias that's already in use on a CloudFront distribution
    /// 			to a different distribution in one step. This prevents the downtime that could occur if
    /// 			you first remove the alias from one distribution and then separately add the alias to
    /// 			another distribution. To use this operation to associate an alias with a distribution, you provide the alias
    /// 			and the ID of the target distribution for the alias. For more information, including how
    /// 			to set up the target distribution, prerequisites that you must complete, and other
    /// 			restrictions, see Moving an alternate domain name to a different
    /// 				distribution in the Amazon CloudFront Developer Guide.
    ///
    /// Parameters:
    ///   - alias: The alias (also known as a CNAME) to add to the target distribution.
    ///   - targetDistributionId: The ID of the distribution that you're associating the alias with.
    ///   - logger: Logger use during operation
    @inlinable
    public func associateAlias(
        alias: String,
        targetDistributionId: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws {
        let input = AssociateAliasRequest(
            alias: alias, 
            targetDistributionId: targetDistributionId
        )
        return try await self.associateAlias(input, logger: logger)
    }

    /// Creates a staging distribution using the configuration of the provided primary
    /// 			distribution. A staging distribution is a copy of an existing distribution (called the
    /// 			primary distribution) that you can use in a continuous deployment workflow. After you create a staging distribution, you can use UpdateDistribution
    /// 			to modify the staging distribution's configuration. Then you can use
    /// 				CreateContinuousDeploymentPolicy to incrementally move traffic to the
    /// 			staging distribution. This API operation requires the following IAM permissions:    GetDistribution     CreateDistribution     CopyDistribution
    @Sendable
    @inlinable
    public func copyDistribution(_ input: CopyDistributionRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> CopyDistributionResult {
        try await self.client.execute(
            operation: "CopyDistribution", 
            path: "/2020-05-31/distribution/{PrimaryDistributionId}/copy", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Creates a staging distribution using the configuration of the provided primary
    /// 			distribution. A staging distribution is a copy of an existing distribution (called the
    /// 			primary distribution) that you can use in a continuous deployment workflow. After you create a staging distribution, you can use UpdateDistribution
    /// 			to modify the staging distribution's configuration. Then you can use
    /// 				CreateContinuousDeploymentPolicy to incrementally move traffic to the
    /// 			staging distribution. This API operation requires the following IAM permissions:    GetDistribution     CreateDistribution     CopyDistribution
    ///
    /// Parameters:
    ///   - callerReference: A value that uniquely identifies a request to create a resource. This helps to prevent
    ///   - enabled: A Boolean flag to specify the state of the staging distribution when it's
    ///   - ifMatch: The version identifier of the primary distribution whose configuration you are
    ///   - primaryDistributionId: The identifier of the primary distribution whose configuration you are copying. To get
    ///   - staging: The type of distribution that your primary distribution will be copied to. The only
    ///   - logger: Logger use during operation
    @inlinable
    public func copyDistribution(
        callerReference: String,
        enabled: Bool? = nil,
        ifMatch: String? = nil,
        primaryDistributionId: String,
        staging: Bool? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> CopyDistributionResult {
        let input = CopyDistributionRequest(
            callerReference: callerReference, 
            enabled: enabled, 
            ifMatch: ifMatch, 
            primaryDistributionId: primaryDistributionId, 
            staging: staging
        )
        return try await self.copyDistribution(input, logger: logger)
    }

    /// Creates an Anycast static IP list.
    @Sendable
    @inlinable
    public func createAnycastIpList(_ input: CreateAnycastIpListRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> CreateAnycastIpListResult {
        try await self.client.execute(
            operation: "CreateAnycastIpList", 
            path: "/2020-05-31/anycast-ip-list", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Creates an Anycast static IP list.
    ///
    /// Parameters:
    ///   - ipCount: The number of static IP addresses that are allocated to the Anycast static IP list.
    ///   - name: Name of the Anycast static IP list.
    ///   - tags: 
    ///   - logger: Logger use during operation
    @inlinable
    public func createAnycastIpList(
        ipCount: Int,
        name: String,
        tags: Tags? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> CreateAnycastIpListResult {
        let input = CreateAnycastIpListRequest(
            ipCount: ipCount, 
            name: name, 
            tags: tags
        )
        return try await self.createAnycastIpList(input, logger: logger)
    }

    /// Creates a cache policy. After you create a cache policy, you can attach it to one or more cache behaviors.
    /// 			When it's attached to a cache behavior, the cache policy determines the
    /// 			following:   The values that CloudFront includes in the cache key. These
    /// 					values can include HTTP headers, cookies, and URL query strings. CloudFront uses the
    /// 					cache key to find an object in its cache that it can return to the
    /// 					viewer.   The default, minimum, and maximum time to live (TTL) values that you want
    /// 					objects to stay in the CloudFront cache.   The headers, cookies, and query strings that are included in the cache key are also included
    /// 			in requests that CloudFront sends to the origin. CloudFront sends a request when it can't find an
    /// 			object in its cache that matches the request's cache key. If you want to send values to
    /// 			the origin but not include them in the cache key, use
    /// 			OriginRequestPolicy. For more information about cache policies, see Controlling the cache key in the
    /// 				Amazon CloudFront Developer Guide.
    @Sendable
    @inlinable
    public func createCachePolicy(_ input: CreateCachePolicyRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> CreateCachePolicyResult {
        try await self.client.execute(
            operation: "CreateCachePolicy", 
            path: "/2020-05-31/cache-policy", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Creates a cache policy. After you create a cache policy, you can attach it to one or more cache behaviors.
    /// 			When it's attached to a cache behavior, the cache policy determines the
    /// 			following:   The values that CloudFront includes in the cache key. These
    /// 					values can include HTTP headers, cookies, and URL query strings. CloudFront uses the
    /// 					cache key to find an object in its cache that it can return to the
    /// 					viewer.   The default, minimum, and maximum time to live (TTL) values that you want
    /// 					objects to stay in the CloudFront cache.   The headers, cookies, and query strings that are included in the cache key are also included
    /// 			in requests that CloudFront sends to the origin. CloudFront sends a request when it can't find an
    /// 			object in its cache that matches the request's cache key. If you want to send values to
    /// 			the origin but not include them in the cache key, use
    /// 			OriginRequestPolicy. For more information about cache policies, see Controlling the cache key in the
    /// 				Amazon CloudFront Developer Guide.
    ///
    /// Parameters:
    ///   - cachePolicyConfig: A cache policy configuration.
    ///   - logger: Logger use during operation
    @inlinable
    public func createCachePolicy(
        cachePolicyConfig: CachePolicyConfig,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> CreateCachePolicyResult {
        let input = CreateCachePolicyRequest(
            cachePolicyConfig: cachePolicyConfig
        )
        return try await self.createCachePolicy(input, logger: logger)
    }

    /// Creates a new origin access identity. If you're using Amazon S3 for your origin, you can
    /// 			use an origin access identity to require users to access your content using a CloudFront URL
    /// 			instead of the Amazon S3 URL. For more information about how to use origin access identities,
    /// 			see Serving Private
    /// 				Content through CloudFront in the Amazon CloudFront Developer Guide.
    @Sendable
    @inlinable
    public func createCloudFrontOriginAccessIdentity(_ input: CreateCloudFrontOriginAccessIdentityRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> CreateCloudFrontOriginAccessIdentityResult {
        try await self.client.execute(
            operation: "CreateCloudFrontOriginAccessIdentity", 
            path: "/2020-05-31/origin-access-identity/cloudfront", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Creates a new origin access identity. If you're using Amazon S3 for your origin, you can
    /// 			use an origin access identity to require users to access your content using a CloudFront URL
    /// 			instead of the Amazon S3 URL. For more information about how to use origin access identities,
    /// 			see Serving Private
    /// 				Content through CloudFront in the Amazon CloudFront Developer Guide.
    ///
    /// Parameters:
    ///   - cloudFrontOriginAccessIdentityConfig: The current configuration information for the identity.
    ///   - logger: Logger use during operation
    @inlinable
    public func createCloudFrontOriginAccessIdentity(
        cloudFrontOriginAccessIdentityConfig: CloudFrontOriginAccessIdentityConfig,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> CreateCloudFrontOriginAccessIdentityResult {
        let input = CreateCloudFrontOriginAccessIdentityRequest(
            cloudFrontOriginAccessIdentityConfig: cloudFrontOriginAccessIdentityConfig
        )
        return try await self.createCloudFrontOriginAccessIdentity(input, logger: logger)
    }

    /// Creates a continuous deployment policy that distributes traffic for a custom domain
    /// 			name to two different CloudFront distributions. To use a continuous deployment policy, first use CopyDistribution to
    /// 			create a staging distribution, then use UpdateDistribution to modify the
    /// 			staging distribution's configuration. After you create and update a staging distribution, you can use a continuous
    /// 			deployment policy to incrementally move traffic to the staging distribution. This
    /// 			workflow enables you to test changes to a distribution's configuration before moving all
    /// 			of your domain's production traffic to the new configuration.
    @Sendable
    @inlinable
    public func createContinuousDeploymentPolicy(_ input: CreateContinuousDeploymentPolicyRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> CreateContinuousDeploymentPolicyResult {
        try await self.client.execute(
            operation: "CreateContinuousDeploymentPolicy", 
            path: "/2020-05-31/continuous-deployment-policy", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Creates a continuous deployment policy that distributes traffic for a custom domain
    /// 			name to two different CloudFront distributions. To use a continuous deployment policy, first use CopyDistribution to
    /// 			create a staging distribution, then use UpdateDistribution to modify the
    /// 			staging distribution's configuration. After you create and update a staging distribution, you can use a continuous
    /// 			deployment policy to incrementally move traffic to the staging distribution. This
    /// 			workflow enables you to test changes to a distribution's configuration before moving all
    /// 			of your domain's production traffic to the new configuration.
    ///
    /// Parameters:
    ///   - continuousDeploymentPolicyConfig: Contains the configuration for a continuous deployment policy.
    ///   - logger: Logger use during operation
    @inlinable
    public func createContinuousDeploymentPolicy(
        continuousDeploymentPolicyConfig: ContinuousDeploymentPolicyConfig,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> CreateContinuousDeploymentPolicyResult {
        let input = CreateContinuousDeploymentPolicyRequest(
            continuousDeploymentPolicyConfig: continuousDeploymentPolicyConfig
        )
        return try await self.createContinuousDeploymentPolicy(input, logger: logger)
    }

    /// Creates a CloudFront distribution.
    @Sendable
    @inlinable
    public func createDistribution(_ input: CreateDistributionRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> CreateDistributionResult {
        try await self.client.execute(
            operation: "CreateDistribution", 
            path: "/2020-05-31/distribution", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Creates a CloudFront distribution.
    ///
    /// Parameters:
    ///   - distributionConfig: The distribution's configuration information.
    ///   - logger: Logger use during operation
    @inlinable
    public func createDistribution(
        distributionConfig: DistributionConfig,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> CreateDistributionResult {
        let input = CreateDistributionRequest(
            distributionConfig: distributionConfig
        )
        return try await self.createDistribution(input, logger: logger)
    }

    /// Create a new distribution with tags. This API operation requires the following IAM
    /// 			permissions:    CreateDistribution     TagResource
    @Sendable
    @inlinable
    public func createDistributionWithTags(_ input: CreateDistributionWithTagsRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> CreateDistributionWithTagsResult {
        try await self.client.execute(
            operation: "CreateDistributionWithTags", 
            path: "/2020-05-31/distribution?WithTags", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Create a new distribution with tags. This API operation requires the following IAM
    /// 			permissions:    CreateDistribution     TagResource
    ///
    /// Parameters:
    ///   - distributionConfigWithTags: The distribution's configuration information.
    ///   - logger: Logger use during operation
    @inlinable
    public func createDistributionWithTags(
        distributionConfigWithTags: DistributionConfigWithTags,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> CreateDistributionWithTagsResult {
        let input = CreateDistributionWithTagsRequest(
            distributionConfigWithTags: distributionConfigWithTags
        )
        return try await self.createDistributionWithTags(input, logger: logger)
    }

    /// Create a new field-level encryption configuration.
    @Sendable
    @inlinable
    public func createFieldLevelEncryptionConfig(_ input: CreateFieldLevelEncryptionConfigRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> CreateFieldLevelEncryptionConfigResult {
        try await self.client.execute(
            operation: "CreateFieldLevelEncryptionConfig", 
            path: "/2020-05-31/field-level-encryption", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Create a new field-level encryption configuration.
    ///
    /// Parameters:
    ///   - fieldLevelEncryptionConfig: The request to create a new field-level encryption configuration.
    ///   - logger: Logger use during operation
    @inlinable
    public func createFieldLevelEncryptionConfig(
        fieldLevelEncryptionConfig: FieldLevelEncryptionConfig,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> CreateFieldLevelEncryptionConfigResult {
        let input = CreateFieldLevelEncryptionConfigRequest(
            fieldLevelEncryptionConfig: fieldLevelEncryptionConfig
        )
        return try await self.createFieldLevelEncryptionConfig(input, logger: logger)
    }

    /// Create a field-level encryption profile.
    @Sendable
    @inlinable
    public func createFieldLevelEncryptionProfile(_ input: CreateFieldLevelEncryptionProfileRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> CreateFieldLevelEncryptionProfileResult {
        try await self.client.execute(
            operation: "CreateFieldLevelEncryptionProfile", 
            path: "/2020-05-31/field-level-encryption-profile", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Create a field-level encryption profile.
    ///
    /// Parameters:
    ///   - fieldLevelEncryptionProfileConfig: The request to create a field-level encryption profile.
    ///   - logger: Logger use during operation
    @inlinable
    public func createFieldLevelEncryptionProfile(
        fieldLevelEncryptionProfileConfig: FieldLevelEncryptionProfileConfig,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> CreateFieldLevelEncryptionProfileResult {
        let input = CreateFieldLevelEncryptionProfileRequest(
            fieldLevelEncryptionProfileConfig: fieldLevelEncryptionProfileConfig
        )
        return try await self.createFieldLevelEncryptionProfile(input, logger: logger)
    }

    /// Creates a CloudFront function. To create a function, you provide the function code and some configuration information
    /// 			about the function. The response contains an Amazon Resource Name (ARN) that uniquely
    /// 			identifies the function. When you create a function, it's in the DEVELOPMENT stage. In this stage,
    /// 			you can test the function with TestFunction, and update it with
    /// 				UpdateFunction. When you're ready to use your function with a CloudFront distribution, use
    /// 				PublishFunction to copy the function from the DEVELOPMENT
    /// 			stage to LIVE. When it's live, you can attach the function to a
    /// 			distribution's cache behavior, using the function's ARN.
    @Sendable
    @inlinable
    public func createFunction(_ input: CreateFunctionRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> CreateFunctionResult {
        try await self.client.execute(
            operation: "CreateFunction", 
            path: "/2020-05-31/function", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Creates a CloudFront function. To create a function, you provide the function code and some configuration information
    /// 			about the function. The response contains an Amazon Resource Name (ARN) that uniquely
    /// 			identifies the function. When you create a function, it's in the DEVELOPMENT stage. In this stage,
    /// 			you can test the function with TestFunction, and update it with
    /// 				UpdateFunction. When you're ready to use your function with a CloudFront distribution, use
    /// 				PublishFunction to copy the function from the DEVELOPMENT
    /// 			stage to LIVE. When it's live, you can attach the function to a
    /// 			distribution's cache behavior, using the function's ARN.
    ///
    /// Parameters:
    ///   - functionCode: The function code. For more information about writing a CloudFront function, see Writing
    ///   - functionConfig: Configuration information about the function, including an optional comment and the
    ///   - name: A name to identify the function.
    ///   - logger: Logger use during operation
    @inlinable
    public func createFunction(
        functionCode: AWSBase64Data,
        functionConfig: FunctionConfig,
        name: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> CreateFunctionResult {
        let input = CreateFunctionRequest(
            functionCode: functionCode, 
            functionConfig: functionConfig, 
            name: name
        )
        return try await self.createFunction(input, logger: logger)
    }

    /// Create a new invalidation. For more information, see Invalidating files in the Amazon CloudFront Developer Guide.
    @Sendable
    @inlinable
    public func createInvalidation(_ input: CreateInvalidationRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> CreateInvalidationResult {
        try await self.client.execute(
            operation: "CreateInvalidation", 
            path: "/2020-05-31/distribution/{DistributionId}/invalidation", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Create a new invalidation. For more information, see Invalidating files in the Amazon CloudFront Developer Guide.
    ///
    /// Parameters:
    ///   - distributionId: The distribution's id.
    ///   - invalidationBatch: The batch information for the invalidation.
    ///   - logger: Logger use during operation
    @inlinable
    public func createInvalidation(
        distributionId: String,
        invalidationBatch: InvalidationBatch,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> CreateInvalidationResult {
        let input = CreateInvalidationRequest(
            distributionId: distributionId, 
            invalidationBatch: invalidationBatch
        )
        return try await self.createInvalidation(input, logger: logger)
    }

    /// Creates a key group that you can use with CloudFront signed URLs and signed cookies. To create a key group, you must specify at least one public key for the key group.
    /// 			After you create a key group, you can reference it from one or more cache behaviors.
    /// 			When you reference a key group in a cache behavior, CloudFront requires signed URLs or signed
    /// 			cookies for all requests that match the cache behavior. The URLs or cookies must be
    /// 			signed with a private key whose corresponding public key is in the key group. The signed
    /// 			URL or cookie contains information about which public key CloudFront should use to verify the
    /// 			signature. For more information, see Serving private content in the
    /// 				Amazon CloudFront Developer Guide.
    @Sendable
    @inlinable
    public func createKeyGroup(_ input: CreateKeyGroupRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> CreateKeyGroupResult {
        try await self.client.execute(
            operation: "CreateKeyGroup", 
            path: "/2020-05-31/key-group", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Creates a key group that you can use with CloudFront signed URLs and signed cookies. To create a key group, you must specify at least one public key for the key group.
    /// 			After you create a key group, you can reference it from one or more cache behaviors.
    /// 			When you reference a key group in a cache behavior, CloudFront requires signed URLs or signed
    /// 			cookies for all requests that match the cache behavior. The URLs or cookies must be
    /// 			signed with a private key whose corresponding public key is in the key group. The signed
    /// 			URL or cookie contains information about which public key CloudFront should use to verify the
    /// 			signature. For more information, see Serving private content in the
    /// 				Amazon CloudFront Developer Guide.
    ///
    /// Parameters:
    ///   - keyGroupConfig: A key group configuration.
    ///   - logger: Logger use during operation
    @inlinable
    public func createKeyGroup(
        keyGroupConfig: KeyGroupConfig,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> CreateKeyGroupResult {
        let input = CreateKeyGroupRequest(
            keyGroupConfig: keyGroupConfig
        )
        return try await self.createKeyGroup(input, logger: logger)
    }

    /// Specifies the key value store resource to add to your account. In your account, the key value store names must be unique. You can also import key value store data in JSON format from an S3 bucket by providing a valid ImportSource that you own.
    @Sendable
    @inlinable
    public func createKeyValueStore(_ input: CreateKeyValueStoreRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> CreateKeyValueStoreResult {
        try await self.client.execute(
            operation: "CreateKeyValueStore", 
            path: "/2020-05-31/key-value-store", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Specifies the key value store resource to add to your account. In your account, the key value store names must be unique. You can also import key value store data in JSON format from an S3 bucket by providing a valid ImportSource that you own.
    ///
    /// Parameters:
    ///   - comment: The comment of the key value store.
    ///   - importSource: The S3 bucket that provides the source for the import. The source must be in a valid JSON format.
    ///   - name: The name of the key value store. The minimum length is 1 character and the maximum length is
    ///   - logger: Logger use during operation
    @inlinable
    public func createKeyValueStore(
        comment: String? = nil,
        importSource: ImportSource? = nil,
        name: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> CreateKeyValueStoreResult {
        let input = CreateKeyValueStoreRequest(
            comment: comment, 
            importSource: importSource, 
            name: name
        )
        return try await self.createKeyValueStore(input, logger: logger)
    }

    /// Enables or disables additional Amazon CloudWatch metrics for the specified CloudFront distribution. The
    /// 			additional metrics incur an additional cost. For more information, see Viewing additional CloudFront distribution metrics in
    /// 			the Amazon CloudFront Developer Guide.
    @Sendable
    @inlinable
    public func createMonitoringSubscription(_ input: CreateMonitoringSubscriptionRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> CreateMonitoringSubscriptionResult {
        try await self.client.execute(
            operation: "CreateMonitoringSubscription", 
            path: "/2020-05-31/distributions/{DistributionId}/monitoring-subscription", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Enables or disables additional Amazon CloudWatch metrics for the specified CloudFront distribution. The
    /// 			additional metrics incur an additional cost. For more information, see Viewing additional CloudFront distribution metrics in
    /// 			the Amazon CloudFront Developer Guide.
    ///
    /// Parameters:
    ///   - distributionId: The ID of the distribution that you are enabling metrics for.
    ///   - monitoringSubscription: A monitoring subscription. This structure contains information about whether additional CloudWatch
    ///   - logger: Logger use during operation
    @inlinable
    public func createMonitoringSubscription(
        distributionId: String,
        monitoringSubscription: MonitoringSubscription,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> CreateMonitoringSubscriptionResult {
        let input = CreateMonitoringSubscriptionRequest(
            distributionId: distributionId, 
            monitoringSubscription: monitoringSubscription
        )
        return try await self.createMonitoringSubscription(input, logger: logger)
    }

    /// Creates a new origin access control in CloudFront. After you create an origin access
    /// 			control, you can add it to an origin in a CloudFront distribution so that CloudFront sends
    /// 			authenticated (signed) requests to the origin. This makes it possible to block public access to the origin, allowing viewers (users) to
    /// 			access the origin's content only through CloudFront. For more information about using a CloudFront origin access control, see Restricting access to an Amazon Web Services origin in the
    /// 				Amazon CloudFront Developer Guide.
    @Sendable
    @inlinable
    public func createOriginAccessControl(_ input: CreateOriginAccessControlRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> CreateOriginAccessControlResult {
        try await self.client.execute(
            operation: "CreateOriginAccessControl", 
            path: "/2020-05-31/origin-access-control", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Creates a new origin access control in CloudFront. After you create an origin access
    /// 			control, you can add it to an origin in a CloudFront distribution so that CloudFront sends
    /// 			authenticated (signed) requests to the origin. This makes it possible to block public access to the origin, allowing viewers (users) to
    /// 			access the origin's content only through CloudFront. For more information about using a CloudFront origin access control, see Restricting access to an Amazon Web Services origin in the
    /// 				Amazon CloudFront Developer Guide.
    ///
    /// Parameters:
    ///   - originAccessControlConfig: Contains the origin access control.
    ///   - logger: Logger use during operation
    @inlinable
    public func createOriginAccessControl(
        originAccessControlConfig: OriginAccessControlConfig,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> CreateOriginAccessControlResult {
        let input = CreateOriginAccessControlRequest(
            originAccessControlConfig: originAccessControlConfig
        )
        return try await self.createOriginAccessControl(input, logger: logger)
    }

    /// Creates an origin request policy. After you create an origin request policy, you can attach it to one or more cache
    /// 			behaviors. When it's attached to a cache behavior, the origin request policy determines
    /// 			the values that CloudFront includes in requests that it sends to the origin. Each request that
    /// 			CloudFront sends to the origin includes the following:   The request body and the URL path (without the domain name) from the viewer
    /// 					request.   The headers that CloudFront automatically includes in every origin request,
    /// 					including Host, User-Agent, and
    /// 						X-Amz-Cf-Id.   All HTTP headers, cookies, and URL query strings that are specified in the
    /// 					cache policy or the origin request policy. These can include items from the
    /// 					viewer request and, in the case of headers, additional ones that are added by
    /// 					CloudFront.   CloudFront sends a request when it can't find a valid object in its cache that matches the
    /// 			request. If you want to send values to the origin and also include them in the cache
    /// 			key, use CachePolicy. For more information about origin request policies, see Controlling origin requests in the
    /// 				Amazon CloudFront Developer Guide.
    @Sendable
    @inlinable
    public func createOriginRequestPolicy(_ input: CreateOriginRequestPolicyRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> CreateOriginRequestPolicyResult {
        try await self.client.execute(
            operation: "CreateOriginRequestPolicy", 
            path: "/2020-05-31/origin-request-policy", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Creates an origin request policy. After you create an origin request policy, you can attach it to one or more cache
    /// 			behaviors. When it's attached to a cache behavior, the origin request policy determines
    /// 			the values that CloudFront includes in requests that it sends to the origin. Each request that
    /// 			CloudFront sends to the origin includes the following:   The request body and the URL path (without the domain name) from the viewer
    /// 					request.   The headers that CloudFront automatically includes in every origin request,
    /// 					including Host, User-Agent, and
    /// 						X-Amz-Cf-Id.   All HTTP headers, cookies, and URL query strings that are specified in the
    /// 					cache policy or the origin request policy. These can include items from the
    /// 					viewer request and, in the case of headers, additional ones that are added by
    /// 					CloudFront.   CloudFront sends a request when it can't find a valid object in its cache that matches the
    /// 			request. If you want to send values to the origin and also include them in the cache
    /// 			key, use CachePolicy. For more information about origin request policies, see Controlling origin requests in the
    /// 				Amazon CloudFront Developer Guide.
    ///
    /// Parameters:
    ///   - originRequestPolicyConfig: An origin request policy configuration.
    ///   - logger: Logger use during operation
    @inlinable
    public func createOriginRequestPolicy(
        originRequestPolicyConfig: OriginRequestPolicyConfig,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> CreateOriginRequestPolicyResult {
        let input = CreateOriginRequestPolicyRequest(
            originRequestPolicyConfig: originRequestPolicyConfig
        )
        return try await self.createOriginRequestPolicy(input, logger: logger)
    }

    /// Uploads a public key to CloudFront that you can use with signed URLs and signed cookies, or with field-level encryption.
    @Sendable
    @inlinable
    public func createPublicKey(_ input: CreatePublicKeyRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> CreatePublicKeyResult {
        try await self.client.execute(
            operation: "CreatePublicKey", 
            path: "/2020-05-31/public-key", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Uploads a public key to CloudFront that you can use with signed URLs and signed cookies, or with field-level encryption.
    ///
    /// Parameters:
    ///   - publicKeyConfig: A CloudFront public key configuration.
    ///   - logger: Logger use during operation
    @inlinable
    public func createPublicKey(
        publicKeyConfig: PublicKeyConfig,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> CreatePublicKeyResult {
        let input = CreatePublicKeyRequest(
            publicKeyConfig: publicKeyConfig
        )
        return try await self.createPublicKey(input, logger: logger)
    }

    /// Creates a real-time log configuration. After you create a real-time log configuration, you can attach it to one or more cache
    /// 			behaviors to send real-time log data to the specified Amazon Kinesis data stream. For more information about real-time log configurations, see Real-time logs in the
    /// 				Amazon CloudFront Developer Guide.
    @Sendable
    @inlinable
    public func createRealtimeLogConfig(_ input: CreateRealtimeLogConfigRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> CreateRealtimeLogConfigResult {
        try await self.client.execute(
            operation: "CreateRealtimeLogConfig", 
            path: "/2020-05-31/realtime-log-config", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Creates a real-time log configuration. After you create a real-time log configuration, you can attach it to one or more cache
    /// 			behaviors to send real-time log data to the specified Amazon Kinesis data stream. For more information about real-time log configurations, see Real-time logs in the
    /// 				Amazon CloudFront Developer Guide.
    ///
    /// Parameters:
    ///   - endPoints: Contains information about the Amazon Kinesis data stream where you are sending real-time
    ///   - fields: A list of fields to include in each real-time log record. For more information about fields, see Real-time log configuration fields in the
    ///   - name: A unique name to identify this real-time log configuration.
    ///   - samplingRate: The sampling rate for this real-time log configuration. You can specify a whole number between 1 and 100 (inclusive) to determine the percentage of viewer requests that are represented in the real-time log data.
    ///   - logger: Logger use during operation
    @inlinable
    public func createRealtimeLogConfig(
        endPoints: [EndPoint],
        fields: [String],
        name: String,
        samplingRate: Int64,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> CreateRealtimeLogConfigResult {
        let input = CreateRealtimeLogConfigRequest(
            endPoints: endPoints, 
            fields: fields, 
            name: name, 
            samplingRate: samplingRate
        )
        return try await self.createRealtimeLogConfig(input, logger: logger)
    }

    /// Creates a response headers policy. A response headers policy contains information about a set of HTTP headers. To create a
    /// 			response headers policy, you provide some metadata about the policy and a set of
    /// 			configurations that specify the headers. After you create a response headers policy, you can use its ID to attach it to one or more
    /// 			cache behaviors in a CloudFront distribution. When it's attached to a cache behavior, the
    /// 			response headers policy affects the HTTP headers that CloudFront includes in HTTP responses to
    /// 			requests that match the cache behavior. CloudFront adds or removes response headers according
    /// 			to the configuration of the response headers policy. For more information, see Adding or removing HTTP headers in CloudFront responses in the
    /// 			Amazon CloudFront Developer Guide.
    @Sendable
    @inlinable
    public func createResponseHeadersPolicy(_ input: CreateResponseHeadersPolicyRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> CreateResponseHeadersPolicyResult {
        try await self.client.execute(
            operation: "CreateResponseHeadersPolicy", 
            path: "/2020-05-31/response-headers-policy", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Creates a response headers policy. A response headers policy contains information about a set of HTTP headers. To create a
    /// 			response headers policy, you provide some metadata about the policy and a set of
    /// 			configurations that specify the headers. After you create a response headers policy, you can use its ID to attach it to one or more
    /// 			cache behaviors in a CloudFront distribution. When it's attached to a cache behavior, the
    /// 			response headers policy affects the HTTP headers that CloudFront includes in HTTP responses to
    /// 			requests that match the cache behavior. CloudFront adds or removes response headers according
    /// 			to the configuration of the response headers policy. For more information, see Adding or removing HTTP headers in CloudFront responses in the
    /// 			Amazon CloudFront Developer Guide.
    ///
    /// Parameters:
    ///   - responseHeadersPolicyConfig: Contains metadata about the response headers policy, and a set of configurations that
    ///   - logger: Logger use during operation
    @inlinable
    public func createResponseHeadersPolicy(
        responseHeadersPolicyConfig: ResponseHeadersPolicyConfig,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> CreateResponseHeadersPolicyResult {
        let input = CreateResponseHeadersPolicyRequest(
            responseHeadersPolicyConfig: responseHeadersPolicyConfig
        )
        return try await self.createResponseHeadersPolicy(input, logger: logger)
    }

    /// This API is deprecated. Amazon CloudFront is deprecating real-time messaging protocol (RTMP)
    /// 			distributions on December 31, 2020. For more information, read the announcement on the Amazon CloudFront discussion
    /// 			forum.
    @Sendable
    @inlinable
    public func createStreamingDistribution(_ input: CreateStreamingDistributionRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> CreateStreamingDistributionResult {
        try await self.client.execute(
            operation: "CreateStreamingDistribution", 
            path: "/2020-05-31/streaming-distribution", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// This API is deprecated. Amazon CloudFront is deprecating real-time messaging protocol (RTMP)
    /// 			distributions on December 31, 2020. For more information, read the announcement on the Amazon CloudFront discussion
    /// 			forum.
    ///
    /// Parameters:
    ///   - streamingDistributionConfig: The streaming distribution's configuration information.
    ///   - logger: Logger use during operation
    @inlinable
    public func createStreamingDistribution(
        streamingDistributionConfig: StreamingDistributionConfig,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> CreateStreamingDistributionResult {
        let input = CreateStreamingDistributionRequest(
            streamingDistributionConfig: streamingDistributionConfig
        )
        return try await self.createStreamingDistribution(input, logger: logger)
    }

    /// This API is deprecated. Amazon CloudFront is deprecating real-time messaging protocol (RTMP)
    /// 			distributions on December 31, 2020. For more information, read the announcement on the Amazon CloudFront discussion
    /// 			forum.
    @Sendable
    @inlinable
    public func createStreamingDistributionWithTags(_ input: CreateStreamingDistributionWithTagsRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> CreateStreamingDistributionWithTagsResult {
        try await self.client.execute(
            operation: "CreateStreamingDistributionWithTags", 
            path: "/2020-05-31/streaming-distribution?WithTags", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// This API is deprecated. Amazon CloudFront is deprecating real-time messaging protocol (RTMP)
    /// 			distributions on December 31, 2020. For more information, read the announcement on the Amazon CloudFront discussion
    /// 			forum.
    ///
    /// Parameters:
    ///   - streamingDistributionConfigWithTags: The streaming distribution's configuration information.
    ///   - logger: Logger use during operation
    @inlinable
    public func createStreamingDistributionWithTags(
        streamingDistributionConfigWithTags: StreamingDistributionConfigWithTags,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> CreateStreamingDistributionWithTagsResult {
        let input = CreateStreamingDistributionWithTagsRequest(
            streamingDistributionConfigWithTags: streamingDistributionConfigWithTags
        )
        return try await self.createStreamingDistributionWithTags(input, logger: logger)
    }

    /// Create an Amazon CloudFront VPC origin.
    @Sendable
    @inlinable
    public func createVpcOrigin(_ input: CreateVpcOriginRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> CreateVpcOriginResult {
        try await self.client.execute(
            operation: "CreateVpcOrigin", 
            path: "/2020-05-31/vpc-origin", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Create an Amazon CloudFront VPC origin.
    ///
    /// Parameters:
    ///   - tags: 
    ///   - vpcOriginEndpointConfig: The VPC origin endpoint configuration.
    ///   - logger: Logger use during operation
    @inlinable
    public func createVpcOrigin(
        tags: Tags? = nil,
        vpcOriginEndpointConfig: VpcOriginEndpointConfig,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> CreateVpcOriginResult {
        let input = CreateVpcOriginRequest(
            tags: tags, 
            vpcOriginEndpointConfig: vpcOriginEndpointConfig
        )
        return try await self.createVpcOrigin(input, logger: logger)
    }

    /// Deletes an Anycast static IP list.
    @Sendable
    @inlinable
    public func deleteAnycastIpList(_ input: DeleteAnycastIpListRequest, logger: Logger = AWSClient.loggingDisabled) async throws {
        try await self.client.execute(
            operation: "DeleteAnycastIpList", 
            path: "/2020-05-31/anycast-ip-list/{Id}", 
            httpMethod: .DELETE, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Deletes an Anycast static IP list.
    ///
    /// Parameters:
    ///   - id: The ID of the Anycast static IP list.
    ///   - ifMatch: The current version (ETag value) of the Anycast static IP list that
    ///   - logger: Logger use during operation
    @inlinable
    public func deleteAnycastIpList(
        id: String,
        ifMatch: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws {
        let input = DeleteAnycastIpListRequest(
            id: id, 
            ifMatch: ifMatch
        )
        return try await self.deleteAnycastIpList(input, logger: logger)
    }

    /// Deletes a cache policy. You cannot delete a cache policy if it's attached to a cache behavior. First update
    /// 			your distributions to remove the cache policy from all cache behaviors, then delete the
    /// 			cache policy. To delete a cache policy, you must provide the policy's identifier and version. To get
    /// 			these values, you can use ListCachePolicies or
    /// 			GetCachePolicy.
    @Sendable
    @inlinable
    public func deleteCachePolicy(_ input: DeleteCachePolicyRequest, logger: Logger = AWSClient.loggingDisabled) async throws {
        try await self.client.execute(
            operation: "DeleteCachePolicy", 
            path: "/2020-05-31/cache-policy/{Id}", 
            httpMethod: .DELETE, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Deletes a cache policy. You cannot delete a cache policy if it's attached to a cache behavior. First update
    /// 			your distributions to remove the cache policy from all cache behaviors, then delete the
    /// 			cache policy. To delete a cache policy, you must provide the policy's identifier and version. To get
    /// 			these values, you can use ListCachePolicies or
    /// 			GetCachePolicy.
    ///
    /// Parameters:
    ///   - id: The unique identifier for the cache policy that you are deleting. To get the
    ///   - ifMatch: The version of the cache policy that you are deleting. The version is the cache
    ///   - logger: Logger use during operation
    @inlinable
    public func deleteCachePolicy(
        id: String,
        ifMatch: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws {
        let input = DeleteCachePolicyRequest(
            id: id, 
            ifMatch: ifMatch
        )
        return try await self.deleteCachePolicy(input, logger: logger)
    }

    /// Delete an origin access identity.
    @Sendable
    @inlinable
    public func deleteCloudFrontOriginAccessIdentity(_ input: DeleteCloudFrontOriginAccessIdentityRequest, logger: Logger = AWSClient.loggingDisabled) async throws {
        try await self.client.execute(
            operation: "DeleteCloudFrontOriginAccessIdentity", 
            path: "/2020-05-31/origin-access-identity/cloudfront/{Id}", 
            httpMethod: .DELETE, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Delete an origin access identity.
    ///
    /// Parameters:
    ///   - id: The origin access identity's ID.
    ///   - ifMatch: The value of the ETag header you received from a previous
    ///   - logger: Logger use during operation
    @inlinable
    public func deleteCloudFrontOriginAccessIdentity(
        id: String,
        ifMatch: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws {
        let input = DeleteCloudFrontOriginAccessIdentityRequest(
            id: id, 
            ifMatch: ifMatch
        )
        return try await self.deleteCloudFrontOriginAccessIdentity(input, logger: logger)
    }

    /// Deletes a continuous deployment policy. You cannot delete a continuous deployment policy that's attached to a primary
    /// 			distribution. First update your distribution to remove the continuous deployment policy,
    /// 			then you can delete the policy.
    @Sendable
    @inlinable
    public func deleteContinuousDeploymentPolicy(_ input: DeleteContinuousDeploymentPolicyRequest, logger: Logger = AWSClient.loggingDisabled) async throws {
        try await self.client.execute(
            operation: "DeleteContinuousDeploymentPolicy", 
            path: "/2020-05-31/continuous-deployment-policy/{Id}", 
            httpMethod: .DELETE, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Deletes a continuous deployment policy. You cannot delete a continuous deployment policy that's attached to a primary
    /// 			distribution. First update your distribution to remove the continuous deployment policy,
    /// 			then you can delete the policy.
    ///
    /// Parameters:
    ///   - id: The identifier of the continuous deployment policy that you are deleting.
    ///   - ifMatch: The current version (ETag value) of the continuous deployment policy that
    ///   - logger: Logger use during operation
    @inlinable
    public func deleteContinuousDeploymentPolicy(
        id: String,
        ifMatch: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws {
        let input = DeleteContinuousDeploymentPolicyRequest(
            id: id, 
            ifMatch: ifMatch
        )
        return try await self.deleteContinuousDeploymentPolicy(input, logger: logger)
    }

    /// Delete a distribution.
    @Sendable
    @inlinable
    public func deleteDistribution(_ input: DeleteDistributionRequest, logger: Logger = AWSClient.loggingDisabled) async throws {
        try await self.client.execute(
            operation: "DeleteDistribution", 
            path: "/2020-05-31/distribution/{Id}", 
            httpMethod: .DELETE, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Delete a distribution.
    ///
    /// Parameters:
    ///   - id: The distribution ID.
    ///   - ifMatch: The value of the ETag header that you received when you disabled the
    ///   - logger: Logger use during operation
    @inlinable
    public func deleteDistribution(
        id: String,
        ifMatch: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws {
        let input = DeleteDistributionRequest(
            id: id, 
            ifMatch: ifMatch
        )
        return try await self.deleteDistribution(input, logger: logger)
    }

    /// Remove a field-level encryption configuration.
    @Sendable
    @inlinable
    public func deleteFieldLevelEncryptionConfig(_ input: DeleteFieldLevelEncryptionConfigRequest, logger: Logger = AWSClient.loggingDisabled) async throws {
        try await self.client.execute(
            operation: "DeleteFieldLevelEncryptionConfig", 
            path: "/2020-05-31/field-level-encryption/{Id}", 
            httpMethod: .DELETE, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Remove a field-level encryption configuration.
    ///
    /// Parameters:
    ///   - id: The ID of the configuration you want to delete from CloudFront.
    ///   - ifMatch: The value of the ETag header that you received when retrieving the
    ///   - logger: Logger use during operation
    @inlinable
    public func deleteFieldLevelEncryptionConfig(
        id: String,
        ifMatch: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws {
        let input = DeleteFieldLevelEncryptionConfigRequest(
            id: id, 
            ifMatch: ifMatch
        )
        return try await self.deleteFieldLevelEncryptionConfig(input, logger: logger)
    }

    /// Remove a field-level encryption profile.
    @Sendable
    @inlinable
    public func deleteFieldLevelEncryptionProfile(_ input: DeleteFieldLevelEncryptionProfileRequest, logger: Logger = AWSClient.loggingDisabled) async throws {
        try await self.client.execute(
            operation: "DeleteFieldLevelEncryptionProfile", 
            path: "/2020-05-31/field-level-encryption-profile/{Id}", 
            httpMethod: .DELETE, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Remove a field-level encryption profile.
    ///
    /// Parameters:
    ///   - id: Request the ID of the profile you want to delete from CloudFront.
    ///   - ifMatch: The value of the ETag header that you received when retrieving the
    ///   - logger: Logger use during operation
    @inlinable
    public func deleteFieldLevelEncryptionProfile(
        id: String,
        ifMatch: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws {
        let input = DeleteFieldLevelEncryptionProfileRequest(
            id: id, 
            ifMatch: ifMatch
        )
        return try await self.deleteFieldLevelEncryptionProfile(input, logger: logger)
    }

    /// Deletes a CloudFront function. You cannot delete a function if it's associated with a cache behavior. First, update
    /// 			your distributions to remove the function association from all cache behaviors, then
    /// 			delete the function. To delete a function, you must provide the function's name and version
    /// 				(ETag value). To get these values, you can use
    /// 				ListFunctions and DescribeFunction.
    @Sendable
    @inlinable
    public func deleteFunction(_ input: DeleteFunctionRequest, logger: Logger = AWSClient.loggingDisabled) async throws {
        try await self.client.execute(
            operation: "DeleteFunction", 
            path: "/2020-05-31/function/{Name}", 
            httpMethod: .DELETE, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Deletes a CloudFront function. You cannot delete a function if it's associated with a cache behavior. First, update
    /// 			your distributions to remove the function association from all cache behaviors, then
    /// 			delete the function. To delete a function, you must provide the function's name and version
    /// 				(ETag value). To get these values, you can use
    /// 				ListFunctions and DescribeFunction.
    ///
    /// Parameters:
    ///   - ifMatch: The current version (ETag value) of the function that you are deleting,
    ///   - name: The name of the function that you are deleting.
    ///   - logger: Logger use during operation
    @inlinable
    public func deleteFunction(
        ifMatch: String,
        name: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws {
        let input = DeleteFunctionRequest(
            ifMatch: ifMatch, 
            name: name
        )
        return try await self.deleteFunction(input, logger: logger)
    }

    /// Deletes a key group. You cannot delete a key group that is referenced in a cache behavior. First update
    /// 			your distributions to remove the key group from all cache behaviors, then delete the key
    /// 			group. To delete a key group, you must provide the key group's identifier and version. To get
    /// 			these values, use ListKeyGroups followed by GetKeyGroup or
    /// 				GetKeyGroupConfig.
    @Sendable
    @inlinable
    public func deleteKeyGroup(_ input: DeleteKeyGroupRequest, logger: Logger = AWSClient.loggingDisabled) async throws {
        try await self.client.execute(
            operation: "DeleteKeyGroup", 
            path: "/2020-05-31/key-group/{Id}", 
            httpMethod: .DELETE, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Deletes a key group. You cannot delete a key group that is referenced in a cache behavior. First update
    /// 			your distributions to remove the key group from all cache behaviors, then delete the key
    /// 			group. To delete a key group, you must provide the key group's identifier and version. To get
    /// 			these values, use ListKeyGroups followed by GetKeyGroup or
    /// 				GetKeyGroupConfig.
    ///
    /// Parameters:
    ///   - id: The identifier of the key group that you are deleting. To get the identifier, use
    ///   - ifMatch: The version of the key group that you are deleting. The version is the key group's
    ///   - logger: Logger use during operation
    @inlinable
    public func deleteKeyGroup(
        id: String,
        ifMatch: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws {
        let input = DeleteKeyGroupRequest(
            id: id, 
            ifMatch: ifMatch
        )
        return try await self.deleteKeyGroup(input, logger: logger)
    }

    /// Specifies the key value store to delete.
    @Sendable
    @inlinable
    public func deleteKeyValueStore(_ input: DeleteKeyValueStoreRequest, logger: Logger = AWSClient.loggingDisabled) async throws {
        try await self.client.execute(
            operation: "DeleteKeyValueStore", 
            path: "/2020-05-31/key-value-store/{Name}", 
            httpMethod: .DELETE, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Specifies the key value store to delete.
    ///
    /// Parameters:
    ///   - ifMatch: The key value store to delete, if a match occurs.
    ///   - name: The name of the key value store.
    ///   - logger: Logger use during operation
    @inlinable
    public func deleteKeyValueStore(
        ifMatch: String,
        name: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws {
        let input = DeleteKeyValueStoreRequest(
            ifMatch: ifMatch, 
            name: name
        )
        return try await self.deleteKeyValueStore(input, logger: logger)
    }

    /// Disables additional CloudWatch metrics for the specified CloudFront distribution.
    @Sendable
    @inlinable
    public func deleteMonitoringSubscription(_ input: DeleteMonitoringSubscriptionRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DeleteMonitoringSubscriptionResult {
        try await self.client.execute(
            operation: "DeleteMonitoringSubscription", 
            path: "/2020-05-31/distributions/{DistributionId}/monitoring-subscription", 
            httpMethod: .DELETE, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Disables additional CloudWatch metrics for the specified CloudFront distribution.
    ///
    /// Parameters:
    ///   - distributionId: The ID of the distribution that you are disabling metrics for.
    ///   - logger: Logger use during operation
    @inlinable
    public func deleteMonitoringSubscription(
        distributionId: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> DeleteMonitoringSubscriptionResult {
        let input = DeleteMonitoringSubscriptionRequest(
            distributionId: distributionId
        )
        return try await self.deleteMonitoringSubscription(input, logger: logger)
    }

    /// Deletes a CloudFront origin access control. You cannot delete an origin access control if it's in use. First, update all
    /// 			distributions to remove the origin access control from all origins, then delete the
    /// 			origin access control.
    @Sendable
    @inlinable
    public func deleteOriginAccessControl(_ input: DeleteOriginAccessControlRequest, logger: Logger = AWSClient.loggingDisabled) async throws {
        try await self.client.execute(
            operation: "DeleteOriginAccessControl", 
            path: "/2020-05-31/origin-access-control/{Id}", 
            httpMethod: .DELETE, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Deletes a CloudFront origin access control. You cannot delete an origin access control if it's in use. First, update all
    /// 			distributions to remove the origin access control from all origins, then delete the
    /// 			origin access control.
    ///
    /// Parameters:
    ///   - id: The unique identifier of the origin access control that you are deleting.
    ///   - ifMatch: The current version (ETag value) of the origin access control that you
    ///   - logger: Logger use during operation
    @inlinable
    public func deleteOriginAccessControl(
        id: String,
        ifMatch: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws {
        let input = DeleteOriginAccessControlRequest(
            id: id, 
            ifMatch: ifMatch
        )
        return try await self.deleteOriginAccessControl(input, logger: logger)
    }

    /// Deletes an origin request policy. You cannot delete an origin request policy if it's attached to any cache behaviors.
    /// 			First update your distributions to remove the origin request policy from all cache
    /// 			behaviors, then delete the origin request policy. To delete an origin request policy, you must provide the policy's identifier and
    /// 			version. To get the identifier, you can use ListOriginRequestPolicies or
    /// 				GetOriginRequestPolicy.
    @Sendable
    @inlinable
    public func deleteOriginRequestPolicy(_ input: DeleteOriginRequestPolicyRequest, logger: Logger = AWSClient.loggingDisabled) async throws {
        try await self.client.execute(
            operation: "DeleteOriginRequestPolicy", 
            path: "/2020-05-31/origin-request-policy/{Id}", 
            httpMethod: .DELETE, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Deletes an origin request policy. You cannot delete an origin request policy if it's attached to any cache behaviors.
    /// 			First update your distributions to remove the origin request policy from all cache
    /// 			behaviors, then delete the origin request policy. To delete an origin request policy, you must provide the policy's identifier and
    /// 			version. To get the identifier, you can use ListOriginRequestPolicies or
    /// 				GetOriginRequestPolicy.
    ///
    /// Parameters:
    ///   - id: The unique identifier for the origin request policy that you are deleting. To get the
    ///   - ifMatch: The version of the origin request policy that you are deleting. The version is the
    ///   - logger: Logger use during operation
    @inlinable
    public func deleteOriginRequestPolicy(
        id: String,
        ifMatch: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws {
        let input = DeleteOriginRequestPolicyRequest(
            id: id, 
            ifMatch: ifMatch
        )
        return try await self.deleteOriginRequestPolicy(input, logger: logger)
    }

    /// Remove a public key you previously added to CloudFront.
    @Sendable
    @inlinable
    public func deletePublicKey(_ input: DeletePublicKeyRequest, logger: Logger = AWSClient.loggingDisabled) async throws {
        try await self.client.execute(
            operation: "DeletePublicKey", 
            path: "/2020-05-31/public-key/{Id}", 
            httpMethod: .DELETE, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Remove a public key you previously added to CloudFront.
    ///
    /// Parameters:
    ///   - id: The ID of the public key you want to remove from CloudFront.
    ///   - ifMatch: The value of the ETag header that you received when retrieving the public
    ///   - logger: Logger use during operation
    @inlinable
    public func deletePublicKey(
        id: String,
        ifMatch: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws {
        let input = DeletePublicKeyRequest(
            id: id, 
            ifMatch: ifMatch
        )
        return try await self.deletePublicKey(input, logger: logger)
    }

    /// Deletes a real-time log configuration. You cannot delete a real-time log configuration if it's attached to a cache behavior.
    /// 			First update your distributions to remove the real-time log configuration from all cache
    /// 			behaviors, then delete the real-time log configuration. To delete a real-time log configuration, you can provide the configuration's name or
    /// 			its Amazon Resource Name (ARN). You must provide at least one. If you provide both, CloudFront
    /// 			uses the name to identify the real-time log configuration to delete.
    @Sendable
    @inlinable
    public func deleteRealtimeLogConfig(_ input: DeleteRealtimeLogConfigRequest, logger: Logger = AWSClient.loggingDisabled) async throws {
        try await self.client.execute(
            operation: "DeleteRealtimeLogConfig", 
            path: "/2020-05-31/delete-realtime-log-config", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Deletes a real-time log configuration. You cannot delete a real-time log configuration if it's attached to a cache behavior.
    /// 			First update your distributions to remove the real-time log configuration from all cache
    /// 			behaviors, then delete the real-time log configuration. To delete a real-time log configuration, you can provide the configuration's name or
    /// 			its Amazon Resource Name (ARN). You must provide at least one. If you provide both, CloudFront
    /// 			uses the name to identify the real-time log configuration to delete.
    ///
    /// Parameters:
    ///   - arn: The Amazon Resource Name (ARN) of the real-time log configuration to delete.
    ///   - name: The name of the real-time log configuration to delete.
    ///   - logger: Logger use during operation
    @inlinable
    public func deleteRealtimeLogConfig(
        arn: String? = nil,
        name: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws {
        let input = DeleteRealtimeLogConfigRequest(
            arn: arn, 
            name: name
        )
        return try await self.deleteRealtimeLogConfig(input, logger: logger)
    }

    /// Deletes a response headers policy. You cannot delete a response headers policy if it's attached to a cache behavior.
    /// 			First update your distributions to remove the response headers policy from all cache
    /// 			behaviors, then delete the response headers policy. To delete a response headers policy, you must provide the policy's identifier and
    /// 			version. To get these values, you can use ListResponseHeadersPolicies or
    /// 				GetResponseHeadersPolicy.
    @Sendable
    @inlinable
    public func deleteResponseHeadersPolicy(_ input: DeleteResponseHeadersPolicyRequest, logger: Logger = AWSClient.loggingDisabled) async throws {
        try await self.client.execute(
            operation: "DeleteResponseHeadersPolicy", 
            path: "/2020-05-31/response-headers-policy/{Id}", 
            httpMethod: .DELETE, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Deletes a response headers policy. You cannot delete a response headers policy if it's attached to a cache behavior.
    /// 			First update your distributions to remove the response headers policy from all cache
    /// 			behaviors, then delete the response headers policy. To delete a response headers policy, you must provide the policy's identifier and
    /// 			version. To get these values, you can use ListResponseHeadersPolicies or
    /// 				GetResponseHeadersPolicy.
    ///
    /// Parameters:
    ///   - id: The identifier for the response headers policy that you are deleting. To get the identifier, you can use ListResponseHeadersPolicies.
    ///   - ifMatch: The version of the response headers policy that you are deleting. The version is the response headers policy's ETag value, which you can
    ///   - logger: Logger use during operation
    @inlinable
    public func deleteResponseHeadersPolicy(
        id: String,
        ifMatch: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws {
        let input = DeleteResponseHeadersPolicyRequest(
            id: id, 
            ifMatch: ifMatch
        )
        return try await self.deleteResponseHeadersPolicy(input, logger: logger)
    }

    /// Delete a streaming distribution. To delete an RTMP distribution using the CloudFront API,
    /// 			perform the following steps.  To delete an RTMP distribution using the CloudFront
    /// 			API:   Disable the RTMP distribution.   Submit a GET Streaming Distribution Config request to get the
    /// 					current configuration and the Etag header for the distribution.
    /// 				   Update the XML document that was returned in the response to your GET
    /// 						Streaming Distribution Config request to change the value of
    /// 						Enabled to false.   Submit a PUT Streaming Distribution Config request to update the
    /// 					configuration for your distribution. In the request body, include the XML
    /// 					document that you updated in Step 3. Then set the value of the HTTP
    /// 						If-Match header to the value of the ETag header
    /// 					that CloudFront returned when you submitted the GET Streaming Distribution
    /// 						Config request in Step 2.   Review the response to the PUT Streaming Distribution Config
    /// 					request to confirm that the distribution was successfully disabled.   Submit a GET Streaming Distribution Config request to confirm
    /// 					that your changes have propagated. When propagation is complete, the value of
    /// 						Status is Deployed.   Submit a DELETE Streaming Distribution request. Set the value of
    /// 					the HTTP If-Match header to the value of the ETag
    /// 					header that CloudFront returned when you submitted the GET Streaming
    /// 						Distribution Config request in Step 2.   Review the response to your DELETE Streaming Distribution request
    /// 					to confirm that the distribution was successfully deleted.   For information about deleting a distribution using the CloudFront console, see Deleting a
    /// 				Distribution in the Amazon CloudFront Developer Guide.
    @Sendable
    @inlinable
    public func deleteStreamingDistribution(_ input: DeleteStreamingDistributionRequest, logger: Logger = AWSClient.loggingDisabled) async throws {
        try await self.client.execute(
            operation: "DeleteStreamingDistribution", 
            path: "/2020-05-31/streaming-distribution/{Id}", 
            httpMethod: .DELETE, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Delete a streaming distribution. To delete an RTMP distribution using the CloudFront API,
    /// 			perform the following steps.  To delete an RTMP distribution using the CloudFront
    /// 			API:   Disable the RTMP distribution.   Submit a GET Streaming Distribution Config request to get the
    /// 					current configuration and the Etag header for the distribution.
    /// 				   Update the XML document that was returned in the response to your GET
    /// 						Streaming Distribution Config request to change the value of
    /// 						Enabled to false.   Submit a PUT Streaming Distribution Config request to update the
    /// 					configuration for your distribution. In the request body, include the XML
    /// 					document that you updated in Step 3. Then set the value of the HTTP
    /// 						If-Match header to the value of the ETag header
    /// 					that CloudFront returned when you submitted the GET Streaming Distribution
    /// 						Config request in Step 2.   Review the response to the PUT Streaming Distribution Config
    /// 					request to confirm that the distribution was successfully disabled.   Submit a GET Streaming Distribution Config request to confirm
    /// 					that your changes have propagated. When propagation is complete, the value of
    /// 						Status is Deployed.   Submit a DELETE Streaming Distribution request. Set the value of
    /// 					the HTTP If-Match header to the value of the ETag
    /// 					header that CloudFront returned when you submitted the GET Streaming
    /// 						Distribution Config request in Step 2.   Review the response to your DELETE Streaming Distribution request
    /// 					to confirm that the distribution was successfully deleted.   For information about deleting a distribution using the CloudFront console, see Deleting a
    /// 				Distribution in the Amazon CloudFront Developer Guide.
    ///
    /// Parameters:
    ///   - id: The distribution ID.
    ///   - ifMatch: The value of the ETag header that you received when you disabled the
    ///   - logger: Logger use during operation
    @inlinable
    public func deleteStreamingDistribution(
        id: String,
        ifMatch: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws {
        let input = DeleteStreamingDistributionRequest(
            id: id, 
            ifMatch: ifMatch
        )
        return try await self.deleteStreamingDistribution(input, logger: logger)
    }

    /// Delete an Amazon CloudFront VPC origin.
    @Sendable
    @inlinable
    public func deleteVpcOrigin(_ input: DeleteVpcOriginRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DeleteVpcOriginResult {
        try await self.client.execute(
            operation: "DeleteVpcOrigin", 
            path: "/2020-05-31/vpc-origin/{Id}", 
            httpMethod: .DELETE, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Delete an Amazon CloudFront VPC origin.
    ///
    /// Parameters:
    ///   - id: The VPC origin ID.
    ///   - ifMatch: The version identifier of the VPC origin to delete. This is the ETag value returned in the response to GetVpcOrigin.
    ///   - logger: Logger use during operation
    @inlinable
    public func deleteVpcOrigin(
        id: String,
        ifMatch: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> DeleteVpcOriginResult {
        let input = DeleteVpcOriginRequest(
            id: id, 
            ifMatch: ifMatch
        )
        return try await self.deleteVpcOrigin(input, logger: logger)
    }

    /// Gets configuration information and metadata about a CloudFront function, but not the
    /// 			function's code. To get a function's code, use GetFunction. To get configuration information and metadata about a function, you must provide the
    /// 			function's name and stage. To get these values, you can use
    /// 			ListFunctions.
    @Sendable
    @inlinable
    public func describeFunction(_ input: DescribeFunctionRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DescribeFunctionResult {
        try await self.client.execute(
            operation: "DescribeFunction", 
            path: "/2020-05-31/function/{Name}/describe", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Gets configuration information and metadata about a CloudFront function, but not the
    /// 			function's code. To get a function's code, use GetFunction. To get configuration information and metadata about a function, you must provide the
    /// 			function's name and stage. To get these values, you can use
    /// 			ListFunctions.
    ///
    /// Parameters:
    ///   - name: The name of the function that you are getting information about.
    ///   - stage: The function's stage, either DEVELOPMENT or LIVE.
    ///   - logger: Logger use during operation
    @inlinable
    public func describeFunction(
        name: String,
        stage: FunctionStage? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> DescribeFunctionResult {
        let input = DescribeFunctionRequest(
            name: name, 
            stage: stage
        )
        return try await self.describeFunction(input, logger: logger)
    }

    /// Specifies the key value store and its configuration.
    @Sendable
    @inlinable
    public func describeKeyValueStore(_ input: DescribeKeyValueStoreRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DescribeKeyValueStoreResult {
        try await self.client.execute(
            operation: "DescribeKeyValueStore", 
            path: "/2020-05-31/key-value-store/{Name}", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Specifies the key value store and its configuration.
    ///
    /// Parameters:
    ///   - name: The name of the key value store.
    ///   - logger: Logger use during operation
    @inlinable
    public func describeKeyValueStore(
        name: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> DescribeKeyValueStoreResult {
        let input = DescribeKeyValueStoreRequest(
            name: name
        )
        return try await self.describeKeyValueStore(input, logger: logger)
    }

    /// Gets an Anycast static IP list.
    @Sendable
    @inlinable
    public func getAnycastIpList(_ input: GetAnycastIpListRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> GetAnycastIpListResult {
        try await self.client.execute(
            operation: "GetAnycastIpList", 
            path: "/2020-05-31/anycast-ip-list/{Id}", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Gets an Anycast static IP list.
    ///
    /// Parameters:
    ///   - id: The ID of the Anycast static IP list.
    ///   - logger: Logger use during operation
    @inlinable
    public func getAnycastIpList(
        id: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> GetAnycastIpListResult {
        let input = GetAnycastIpListRequest(
            id: id
        )
        return try await self.getAnycastIpList(input, logger: logger)
    }

    /// Gets a cache policy, including the following metadata:   The policy's identifier.   The date and time when the policy was last modified.   To get a cache policy, you must provide the policy's identifier. If the cache policy
    /// 			is attached to a distribution's cache behavior, you can get the policy's identifier
    /// 			using ListDistributions or GetDistribution. If the cache
    /// 			policy is not attached to a cache behavior, you can get the identifier using
    /// 				ListCachePolicies.
    @Sendable
    @inlinable
    public func getCachePolicy(_ input: GetCachePolicyRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> GetCachePolicyResult {
        try await self.client.execute(
            operation: "GetCachePolicy", 
            path: "/2020-05-31/cache-policy/{Id}", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Gets a cache policy, including the following metadata:   The policy's identifier.   The date and time when the policy was last modified.   To get a cache policy, you must provide the policy's identifier. If the cache policy
    /// 			is attached to a distribution's cache behavior, you can get the policy's identifier
    /// 			using ListDistributions or GetDistribution. If the cache
    /// 			policy is not attached to a cache behavior, you can get the identifier using
    /// 				ListCachePolicies.
    ///
    /// Parameters:
    ///   - id: The unique identifier for the cache policy. If the cache policy is attached to a
    ///   - logger: Logger use during operation
    @inlinable
    public func getCachePolicy(
        id: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> GetCachePolicyResult {
        let input = GetCachePolicyRequest(
            id: id
        )
        return try await self.getCachePolicy(input, logger: logger)
    }

    /// Gets a cache policy configuration. To get a cache policy configuration, you must provide the policy's identifier. If the
    /// 			cache policy is attached to a distribution's cache behavior, you can get the policy's
    /// 			identifier using ListDistributions or GetDistribution. If the
    /// 			cache policy is not attached to a cache behavior, you can get the identifier using
    /// 				ListCachePolicies.
    @Sendable
    @inlinable
    public func getCachePolicyConfig(_ input: GetCachePolicyConfigRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> GetCachePolicyConfigResult {
        try await self.client.execute(
            operation: "GetCachePolicyConfig", 
            path: "/2020-05-31/cache-policy/{Id}/config", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Gets a cache policy configuration. To get a cache policy configuration, you must provide the policy's identifier. If the
    /// 			cache policy is attached to a distribution's cache behavior, you can get the policy's
    /// 			identifier using ListDistributions or GetDistribution. If the
    /// 			cache policy is not attached to a cache behavior, you can get the identifier using
    /// 				ListCachePolicies.
    ///
    /// Parameters:
    ///   - id: The unique identifier for the cache policy. If the cache policy is attached to a
    ///   - logger: Logger use during operation
    @inlinable
    public func getCachePolicyConfig(
        id: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> GetCachePolicyConfigResult {
        let input = GetCachePolicyConfigRequest(
            id: id
        )
        return try await self.getCachePolicyConfig(input, logger: logger)
    }

    /// Get the information about an origin access identity.
    @Sendable
    @inlinable
    public func getCloudFrontOriginAccessIdentity(_ input: GetCloudFrontOriginAccessIdentityRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> GetCloudFrontOriginAccessIdentityResult {
        try await self.client.execute(
            operation: "GetCloudFrontOriginAccessIdentity", 
            path: "/2020-05-31/origin-access-identity/cloudfront/{Id}", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Get the information about an origin access identity.
    ///
    /// Parameters:
    ///   - id: The identity's ID.
    ///   - logger: Logger use during operation
    @inlinable
    public func getCloudFrontOriginAccessIdentity(
        id: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> GetCloudFrontOriginAccessIdentityResult {
        let input = GetCloudFrontOriginAccessIdentityRequest(
            id: id
        )
        return try await self.getCloudFrontOriginAccessIdentity(input, logger: logger)
    }

    /// Get the configuration information about an origin access identity.
    @Sendable
    @inlinable
    public func getCloudFrontOriginAccessIdentityConfig(_ input: GetCloudFrontOriginAccessIdentityConfigRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> GetCloudFrontOriginAccessIdentityConfigResult {
        try await self.client.execute(
            operation: "GetCloudFrontOriginAccessIdentityConfig", 
            path: "/2020-05-31/origin-access-identity/cloudfront/{Id}/config", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Get the configuration information about an origin access identity.
    ///
    /// Parameters:
    ///   - id: The identity's ID.
    ///   - logger: Logger use during operation
    @inlinable
    public func getCloudFrontOriginAccessIdentityConfig(
        id: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> GetCloudFrontOriginAccessIdentityConfigResult {
        let input = GetCloudFrontOriginAccessIdentityConfigRequest(
            id: id
        )
        return try await self.getCloudFrontOriginAccessIdentityConfig(input, logger: logger)
    }

    /// Gets a continuous deployment policy, including metadata (the policy's identifier and
    /// 			the date and time when the policy was last modified).
    @Sendable
    @inlinable
    public func getContinuousDeploymentPolicy(_ input: GetContinuousDeploymentPolicyRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> GetContinuousDeploymentPolicyResult {
        try await self.client.execute(
            operation: "GetContinuousDeploymentPolicy", 
            path: "/2020-05-31/continuous-deployment-policy/{Id}", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Gets a continuous deployment policy, including metadata (the policy's identifier and
    /// 			the date and time when the policy was last modified).
    ///
    /// Parameters:
    ///   - id: The identifier of the continuous deployment policy that you are getting.
    ///   - logger: Logger use during operation
    @inlinable
    public func getContinuousDeploymentPolicy(
        id: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> GetContinuousDeploymentPolicyResult {
        let input = GetContinuousDeploymentPolicyRequest(
            id: id
        )
        return try await self.getContinuousDeploymentPolicy(input, logger: logger)
    }

    /// Gets configuration information about a continuous deployment policy.
    @Sendable
    @inlinable
    public func getContinuousDeploymentPolicyConfig(_ input: GetContinuousDeploymentPolicyConfigRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> GetContinuousDeploymentPolicyConfigResult {
        try await self.client.execute(
            operation: "GetContinuousDeploymentPolicyConfig", 
            path: "/2020-05-31/continuous-deployment-policy/{Id}/config", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Gets configuration information about a continuous deployment policy.
    ///
    /// Parameters:
    ///   - id: The identifier of the continuous deployment policy whose configuration you are
    ///   - logger: Logger use during operation
    @inlinable
    public func getContinuousDeploymentPolicyConfig(
        id: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> GetContinuousDeploymentPolicyConfigResult {
        let input = GetContinuousDeploymentPolicyConfigRequest(
            id: id
        )
        return try await self.getContinuousDeploymentPolicyConfig(input, logger: logger)
    }

    /// Get the information about a distribution.
    @Sendable
    @inlinable
    public func getDistribution(_ input: GetDistributionRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> GetDistributionResult {
        try await self.client.execute(
            operation: "GetDistribution", 
            path: "/2020-05-31/distribution/{Id}", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Get the information about a distribution.
    ///
    /// Parameters:
    ///   - id: The distribution's ID. If the ID is empty, an empty distribution configuration is
    ///   - logger: Logger use during operation
    @inlinable
    public func getDistribution(
        id: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> GetDistributionResult {
        let input = GetDistributionRequest(
            id: id
        )
        return try await self.getDistribution(input, logger: logger)
    }

    /// Get the configuration information about a distribution.
    @Sendable
    @inlinable
    public func getDistributionConfig(_ input: GetDistributionConfigRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> GetDistributionConfigResult {
        try await self.client.execute(
            operation: "GetDistributionConfig", 
            path: "/2020-05-31/distribution/{Id}/config", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Get the configuration information about a distribution.
    ///
    /// Parameters:
    ///   - id: The distribution's ID. If the ID is empty, an empty distribution configuration is
    ///   - logger: Logger use during operation
    @inlinable
    public func getDistributionConfig(
        id: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> GetDistributionConfigResult {
        let input = GetDistributionConfigRequest(
            id: id
        )
        return try await self.getDistributionConfig(input, logger: logger)
    }

    /// Get the field-level encryption configuration information.
    @Sendable
    @inlinable
    public func getFieldLevelEncryption(_ input: GetFieldLevelEncryptionRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> GetFieldLevelEncryptionResult {
        try await self.client.execute(
            operation: "GetFieldLevelEncryption", 
            path: "/2020-05-31/field-level-encryption/{Id}", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Get the field-level encryption configuration information.
    ///
    /// Parameters:
    ///   - id: Request the ID for the field-level encryption configuration information.
    ///   - logger: Logger use during operation
    @inlinable
    public func getFieldLevelEncryption(
        id: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> GetFieldLevelEncryptionResult {
        let input = GetFieldLevelEncryptionRequest(
            id: id
        )
        return try await self.getFieldLevelEncryption(input, logger: logger)
    }

    /// Get the field-level encryption configuration information.
    @Sendable
    @inlinable
    public func getFieldLevelEncryptionConfig(_ input: GetFieldLevelEncryptionConfigRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> GetFieldLevelEncryptionConfigResult {
        try await self.client.execute(
            operation: "GetFieldLevelEncryptionConfig", 
            path: "/2020-05-31/field-level-encryption/{Id}/config", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Get the field-level encryption configuration information.
    ///
    /// Parameters:
    ///   - id: Request the ID for the field-level encryption configuration information.
    ///   - logger: Logger use during operation
    @inlinable
    public func getFieldLevelEncryptionConfig(
        id: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> GetFieldLevelEncryptionConfigResult {
        let input = GetFieldLevelEncryptionConfigRequest(
            id: id
        )
        return try await self.getFieldLevelEncryptionConfig(input, logger: logger)
    }

    /// Get the field-level encryption profile information.
    @Sendable
    @inlinable
    public func getFieldLevelEncryptionProfile(_ input: GetFieldLevelEncryptionProfileRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> GetFieldLevelEncryptionProfileResult {
        try await self.client.execute(
            operation: "GetFieldLevelEncryptionProfile", 
            path: "/2020-05-31/field-level-encryption-profile/{Id}", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Get the field-level encryption profile information.
    ///
    /// Parameters:
    ///   - id: Get the ID for the field-level encryption profile information.
    ///   - logger: Logger use during operation
    @inlinable
    public func getFieldLevelEncryptionProfile(
        id: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> GetFieldLevelEncryptionProfileResult {
        let input = GetFieldLevelEncryptionProfileRequest(
            id: id
        )
        return try await self.getFieldLevelEncryptionProfile(input, logger: logger)
    }

    /// Get the field-level encryption profile configuration information.
    @Sendable
    @inlinable
    public func getFieldLevelEncryptionProfileConfig(_ input: GetFieldLevelEncryptionProfileConfigRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> GetFieldLevelEncryptionProfileConfigResult {
        try await self.client.execute(
            operation: "GetFieldLevelEncryptionProfileConfig", 
            path: "/2020-05-31/field-level-encryption-profile/{Id}/config", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Get the field-level encryption profile configuration information.
    ///
    /// Parameters:
    ///   - id: Get the ID for the field-level encryption profile configuration information.
    ///   - logger: Logger use during operation
    @inlinable
    public func getFieldLevelEncryptionProfileConfig(
        id: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> GetFieldLevelEncryptionProfileConfigResult {
        let input = GetFieldLevelEncryptionProfileConfigRequest(
            id: id
        )
        return try await self.getFieldLevelEncryptionProfileConfig(input, logger: logger)
    }

    /// Gets the code of a CloudFront function. To get configuration information and metadata about
    /// 			a function, use DescribeFunction. To get a function's code, you must provide the function's name and stage. To get these
    /// 			values, you can use ListFunctions.
    @Sendable
    @inlinable
    public func getFunction(_ input: GetFunctionRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> GetFunctionResult {
        try await self.client.execute(
            operation: "GetFunction", 
            path: "/2020-05-31/function/{Name}", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Gets the code of a CloudFront function. To get configuration information and metadata about
    /// 			a function, use DescribeFunction. To get a function's code, you must provide the function's name and stage. To get these
    /// 			values, you can use ListFunctions.
    ///
    /// Parameters:
    ///   - name: The name of the function whose code you are getting.
    ///   - stage: The function's stage, either DEVELOPMENT or LIVE.
    ///   - logger: Logger use during operation
    @inlinable
    public func getFunction(
        name: String,
        stage: FunctionStage? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> GetFunctionResult {
        let input = GetFunctionRequest(
            name: name, 
            stage: stage
        )
        return try await self.getFunction(input, logger: logger)
    }

    /// Get the information about an invalidation.
    @Sendable
    @inlinable
    public func getInvalidation(_ input: GetInvalidationRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> GetInvalidationResult {
        try await self.client.execute(
            operation: "GetInvalidation", 
            path: "/2020-05-31/distribution/{DistributionId}/invalidation/{Id}", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Get the information about an invalidation.
    ///
    /// Parameters:
    ///   - distributionId: The distribution's ID.
    ///   - id: The identifier for the invalidation request, for example,
    ///   - logger: Logger use during operation
    @inlinable
    public func getInvalidation(
        distributionId: String,
        id: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> GetInvalidationResult {
        let input = GetInvalidationRequest(
            distributionId: distributionId, 
            id: id
        )
        return try await self.getInvalidation(input, logger: logger)
    }

    /// Gets a key group, including the date and time when the key group was last
    /// 			modified. To get a key group, you must provide the key group's identifier. If the key group is
    /// 			referenced in a distribution's cache behavior, you can get the key group's identifier
    /// 			using ListDistributions or GetDistribution. If the key group
    /// 			is not referenced in a cache behavior, you can get the identifier using
    /// 				ListKeyGroups.
    @Sendable
    @inlinable
    public func getKeyGroup(_ input: GetKeyGroupRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> GetKeyGroupResult {
        try await self.client.execute(
            operation: "GetKeyGroup", 
            path: "/2020-05-31/key-group/{Id}", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Gets a key group, including the date and time when the key group was last
    /// 			modified. To get a key group, you must provide the key group's identifier. If the key group is
    /// 			referenced in a distribution's cache behavior, you can get the key group's identifier
    /// 			using ListDistributions or GetDistribution. If the key group
    /// 			is not referenced in a cache behavior, you can get the identifier using
    /// 				ListKeyGroups.
    ///
    /// Parameters:
    ///   - id: The identifier of the key group that you are getting. To get the identifier, use
    ///   - logger: Logger use during operation
    @inlinable
    public func getKeyGroup(
        id: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> GetKeyGroupResult {
        let input = GetKeyGroupRequest(
            id: id
        )
        return try await self.getKeyGroup(input, logger: logger)
    }

    /// Gets a key group configuration. To get a key group configuration, you must provide the key group's identifier. If the
    /// 			key group is referenced in a distribution's cache behavior, you can get the key group's
    /// 			identifier using ListDistributions or GetDistribution. If the
    /// 			key group is not referenced in a cache behavior, you can get the identifier using
    /// 				ListKeyGroups.
    @Sendable
    @inlinable
    public func getKeyGroupConfig(_ input: GetKeyGroupConfigRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> GetKeyGroupConfigResult {
        try await self.client.execute(
            operation: "GetKeyGroupConfig", 
            path: "/2020-05-31/key-group/{Id}/config", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Gets a key group configuration. To get a key group configuration, you must provide the key group's identifier. If the
    /// 			key group is referenced in a distribution's cache behavior, you can get the key group's
    /// 			identifier using ListDistributions or GetDistribution. If the
    /// 			key group is not referenced in a cache behavior, you can get the identifier using
    /// 				ListKeyGroups.
    ///
    /// Parameters:
    ///   - id: The identifier of the key group whose configuration you are getting. To get the
    ///   - logger: Logger use during operation
    @inlinable
    public func getKeyGroupConfig(
        id: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> GetKeyGroupConfigResult {
        let input = GetKeyGroupConfigRequest(
            id: id
        )
        return try await self.getKeyGroupConfig(input, logger: logger)
    }

    /// Gets information about whether additional CloudWatch metrics are enabled for the
    /// 			specified CloudFront distribution.
    @Sendable
    @inlinable
    public func getMonitoringSubscription(_ input: GetMonitoringSubscriptionRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> GetMonitoringSubscriptionResult {
        try await self.client.execute(
            operation: "GetMonitoringSubscription", 
            path: "/2020-05-31/distributions/{DistributionId}/monitoring-subscription", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Gets information about whether additional CloudWatch metrics are enabled for the
    /// 			specified CloudFront distribution.
    ///
    /// Parameters:
    ///   - distributionId: The ID of the distribution that you are getting metrics information for.
    ///   - logger: Logger use during operation
    @inlinable
    public func getMonitoringSubscription(
        distributionId: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> GetMonitoringSubscriptionResult {
        let input = GetMonitoringSubscriptionRequest(
            distributionId: distributionId
        )
        return try await self.getMonitoringSubscription(input, logger: logger)
    }

    /// Gets a CloudFront origin access control, including its unique identifier.
    @Sendable
    @inlinable
    public func getOriginAccessControl(_ input: GetOriginAccessControlRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> GetOriginAccessControlResult {
        try await self.client.execute(
            operation: "GetOriginAccessControl", 
            path: "/2020-05-31/origin-access-control/{Id}", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Gets a CloudFront origin access control, including its unique identifier.
    ///
    /// Parameters:
    ///   - id: The unique identifier of the origin access control.
    ///   - logger: Logger use during operation
    @inlinable
    public func getOriginAccessControl(
        id: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> GetOriginAccessControlResult {
        let input = GetOriginAccessControlRequest(
            id: id
        )
        return try await self.getOriginAccessControl(input, logger: logger)
    }

    /// Gets a CloudFront origin access control configuration.
    @Sendable
    @inlinable
    public func getOriginAccessControlConfig(_ input: GetOriginAccessControlConfigRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> GetOriginAccessControlConfigResult {
        try await self.client.execute(
            operation: "GetOriginAccessControlConfig", 
            path: "/2020-05-31/origin-access-control/{Id}/config", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Gets a CloudFront origin access control configuration.
    ///
    /// Parameters:
    ///   - id: The unique identifier of the origin access control.
    ///   - logger: Logger use during operation
    @inlinable
    public func getOriginAccessControlConfig(
        id: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> GetOriginAccessControlConfigResult {
        let input = GetOriginAccessControlConfigRequest(
            id: id
        )
        return try await self.getOriginAccessControlConfig(input, logger: logger)
    }

    /// Gets an origin request policy, including the following metadata:   The policy's identifier.   The date and time when the policy was last modified.   To get an origin request policy, you must provide the policy's identifier. If the
    /// 			origin request policy is attached to a distribution's cache behavior, you can get the
    /// 			policy's identifier using ListDistributions or
    /// 			GetDistribution. If the origin request policy is not attached to a cache
    /// 			behavior, you can get the identifier using
    /// 			ListOriginRequestPolicies.
    @Sendable
    @inlinable
    public func getOriginRequestPolicy(_ input: GetOriginRequestPolicyRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> GetOriginRequestPolicyResult {
        try await self.client.execute(
            operation: "GetOriginRequestPolicy", 
            path: "/2020-05-31/origin-request-policy/{Id}", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Gets an origin request policy, including the following metadata:   The policy's identifier.   The date and time when the policy was last modified.   To get an origin request policy, you must provide the policy's identifier. If the
    /// 			origin request policy is attached to a distribution's cache behavior, you can get the
    /// 			policy's identifier using ListDistributions or
    /// 			GetDistribution. If the origin request policy is not attached to a cache
    /// 			behavior, you can get the identifier using
    /// 			ListOriginRequestPolicies.
    ///
    /// Parameters:
    ///   - id: The unique identifier for the origin request policy. If the origin request policy is
    ///   - logger: Logger use during operation
    @inlinable
    public func getOriginRequestPolicy(
        id: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> GetOriginRequestPolicyResult {
        let input = GetOriginRequestPolicyRequest(
            id: id
        )
        return try await self.getOriginRequestPolicy(input, logger: logger)
    }

    /// Gets an origin request policy configuration. To get an origin request policy configuration, you must provide the policy's
    /// 			identifier. If the origin request policy is attached to a distribution's cache behavior,
    /// 			you can get the policy's identifier using ListDistributions or
    /// 				GetDistribution. If the origin request policy is not attached to a
    /// 			cache behavior, you can get the identifier using
    /// 			ListOriginRequestPolicies.
    @Sendable
    @inlinable
    public func getOriginRequestPolicyConfig(_ input: GetOriginRequestPolicyConfigRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> GetOriginRequestPolicyConfigResult {
        try await self.client.execute(
            operation: "GetOriginRequestPolicyConfig", 
            path: "/2020-05-31/origin-request-policy/{Id}/config", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Gets an origin request policy configuration. To get an origin request policy configuration, you must provide the policy's
    /// 			identifier. If the origin request policy is attached to a distribution's cache behavior,
    /// 			you can get the policy's identifier using ListDistributions or
    /// 				GetDistribution. If the origin request policy is not attached to a
    /// 			cache behavior, you can get the identifier using
    /// 			ListOriginRequestPolicies.
    ///
    /// Parameters:
    ///   - id: The unique identifier for the origin request policy. If the origin request policy is
    ///   - logger: Logger use during operation
    @inlinable
    public func getOriginRequestPolicyConfig(
        id: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> GetOriginRequestPolicyConfigResult {
        let input = GetOriginRequestPolicyConfigRequest(
            id: id
        )
        return try await self.getOriginRequestPolicyConfig(input, logger: logger)
    }

    /// Gets a public key.
    @Sendable
    @inlinable
    public func getPublicKey(_ input: GetPublicKeyRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> GetPublicKeyResult {
        try await self.client.execute(
            operation: "GetPublicKey", 
            path: "/2020-05-31/public-key/{Id}", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Gets a public key.
    ///
    /// Parameters:
    ///   - id: The identifier of the public key you are getting.
    ///   - logger: Logger use during operation
    @inlinable
    public func getPublicKey(
        id: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> GetPublicKeyResult {
        let input = GetPublicKeyRequest(
            id: id
        )
        return try await self.getPublicKey(input, logger: logger)
    }

    /// Gets a public key configuration.
    @Sendable
    @inlinable
    public func getPublicKeyConfig(_ input: GetPublicKeyConfigRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> GetPublicKeyConfigResult {
        try await self.client.execute(
            operation: "GetPublicKeyConfig", 
            path: "/2020-05-31/public-key/{Id}/config", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Gets a public key configuration.
    ///
    /// Parameters:
    ///   - id: The identifier of the public key whose configuration you are getting.
    ///   - logger: Logger use during operation
    @inlinable
    public func getPublicKeyConfig(
        id: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> GetPublicKeyConfigResult {
        let input = GetPublicKeyConfigRequest(
            id: id
        )
        return try await self.getPublicKeyConfig(input, logger: logger)
    }

    /// Gets a real-time log configuration. To get a real-time log configuration, you can provide the configuration's name or its
    /// 			Amazon Resource Name (ARN). You must provide at least one. If you provide both, CloudFront
    /// 			uses the name to identify the real-time log configuration to get.
    @Sendable
    @inlinable
    public func getRealtimeLogConfig(_ input: GetRealtimeLogConfigRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> GetRealtimeLogConfigResult {
        try await self.client.execute(
            operation: "GetRealtimeLogConfig", 
            path: "/2020-05-31/get-realtime-log-config", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Gets a real-time log configuration. To get a real-time log configuration, you can provide the configuration's name or its
    /// 			Amazon Resource Name (ARN). You must provide at least one. If you provide both, CloudFront
    /// 			uses the name to identify the real-time log configuration to get.
    ///
    /// Parameters:
    ///   - arn: The Amazon Resource Name (ARN) of the real-time log configuration to get.
    ///   - name: The name of the real-time log configuration to get.
    ///   - logger: Logger use during operation
    @inlinable
    public func getRealtimeLogConfig(
        arn: String? = nil,
        name: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> GetRealtimeLogConfigResult {
        let input = GetRealtimeLogConfigRequest(
            arn: arn, 
            name: name
        )
        return try await self.getRealtimeLogConfig(input, logger: logger)
    }

    /// Gets a response headers policy, including metadata (the policy's identifier and the
    /// 			date and time when the policy was last modified). To get a response headers policy, you must provide the policy's identifier. If the
    /// 			response headers policy is attached to a distribution's cache behavior, you can get the
    /// 			policy's identifier using ListDistributions or
    /// 			GetDistribution. If the response headers policy is not attached to a cache
    /// 			behavior, you can get the identifier using
    /// 			ListResponseHeadersPolicies.
    @Sendable
    @inlinable
    public func getResponseHeadersPolicy(_ input: GetResponseHeadersPolicyRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> GetResponseHeadersPolicyResult {
        try await self.client.execute(
            operation: "GetResponseHeadersPolicy", 
            path: "/2020-05-31/response-headers-policy/{Id}", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Gets a response headers policy, including metadata (the policy's identifier and the
    /// 			date and time when the policy was last modified). To get a response headers policy, you must provide the policy's identifier. If the
    /// 			response headers policy is attached to a distribution's cache behavior, you can get the
    /// 			policy's identifier using ListDistributions or
    /// 			GetDistribution. If the response headers policy is not attached to a cache
    /// 			behavior, you can get the identifier using
    /// 			ListResponseHeadersPolicies.
    ///
    /// Parameters:
    ///   - id: The identifier for the response headers policy. If the response headers policy is attached to a distribution's cache behavior, you can
    ///   - logger: Logger use during operation
    @inlinable
    public func getResponseHeadersPolicy(
        id: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> GetResponseHeadersPolicyResult {
        let input = GetResponseHeadersPolicyRequest(
            id: id
        )
        return try await self.getResponseHeadersPolicy(input, logger: logger)
    }

    /// Gets a response headers policy configuration. To get a response headers policy configuration, you must provide the policy's
    /// 			identifier. If the response headers policy is attached to a distribution's cache
    /// 			behavior, you can get the policy's identifier using ListDistributions or
    /// 				GetDistribution. If the response headers policy is not attached to a
    /// 			cache behavior, you can get the identifier using
    /// 				ListResponseHeadersPolicies.
    @Sendable
    @inlinable
    public func getResponseHeadersPolicyConfig(_ input: GetResponseHeadersPolicyConfigRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> GetResponseHeadersPolicyConfigResult {
        try await self.client.execute(
            operation: "GetResponseHeadersPolicyConfig", 
            path: "/2020-05-31/response-headers-policy/{Id}/config", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Gets a response headers policy configuration. To get a response headers policy configuration, you must provide the policy's
    /// 			identifier. If the response headers policy is attached to a distribution's cache
    /// 			behavior, you can get the policy's identifier using ListDistributions or
    /// 				GetDistribution. If the response headers policy is not attached to a
    /// 			cache behavior, you can get the identifier using
    /// 				ListResponseHeadersPolicies.
    ///
    /// Parameters:
    ///   - id: The identifier for the response headers policy. If the response headers policy is attached to a distribution's cache behavior, you can
    ///   - logger: Logger use during operation
    @inlinable
    public func getResponseHeadersPolicyConfig(
        id: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> GetResponseHeadersPolicyConfigResult {
        let input = GetResponseHeadersPolicyConfigRequest(
            id: id
        )
        return try await self.getResponseHeadersPolicyConfig(input, logger: logger)
    }

    /// Gets information about a specified RTMP distribution, including the distribution
    /// 			configuration.
    @Sendable
    @inlinable
    public func getStreamingDistribution(_ input: GetStreamingDistributionRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> GetStreamingDistributionResult {
        try await self.client.execute(
            operation: "GetStreamingDistribution", 
            path: "/2020-05-31/streaming-distribution/{Id}", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Gets information about a specified RTMP distribution, including the distribution
    /// 			configuration.
    ///
    /// Parameters:
    ///   - id: The streaming distribution's ID.
    ///   - logger: Logger use during operation
    @inlinable
    public func getStreamingDistribution(
        id: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> GetStreamingDistributionResult {
        let input = GetStreamingDistributionRequest(
            id: id
        )
        return try await self.getStreamingDistribution(input, logger: logger)
    }

    /// Get the configuration information about a streaming distribution.
    @Sendable
    @inlinable
    public func getStreamingDistributionConfig(_ input: GetStreamingDistributionConfigRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> GetStreamingDistributionConfigResult {
        try await self.client.execute(
            operation: "GetStreamingDistributionConfig", 
            path: "/2020-05-31/streaming-distribution/{Id}/config", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Get the configuration information about a streaming distribution.
    ///
    /// Parameters:
    ///   - id: The streaming distribution's ID.
    ///   - logger: Logger use during operation
    @inlinable
    public func getStreamingDistributionConfig(
        id: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> GetStreamingDistributionConfigResult {
        let input = GetStreamingDistributionConfigRequest(
            id: id
        )
        return try await self.getStreamingDistributionConfig(input, logger: logger)
    }

    /// Get the details of an Amazon CloudFront VPC origin.
    @Sendable
    @inlinable
    public func getVpcOrigin(_ input: GetVpcOriginRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> GetVpcOriginResult {
        try await self.client.execute(
            operation: "GetVpcOrigin", 
            path: "/2020-05-31/vpc-origin/{Id}", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Get the details of an Amazon CloudFront VPC origin.
    ///
    /// Parameters:
    ///   - id: The VPC origin ID.
    ///   - logger: Logger use during operation
    @inlinable
    public func getVpcOrigin(
        id: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> GetVpcOriginResult {
        let input = GetVpcOriginRequest(
            id: id
        )
        return try await self.getVpcOrigin(input, logger: logger)
    }

    /// Lists your Anycast static IP lists.
    @Sendable
    @inlinable
    public func listAnycastIpLists(_ input: ListAnycastIpListsRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> ListAnycastIpListsResult {
        try await self.client.execute(
            operation: "ListAnycastIpLists", 
            path: "/2020-05-31/anycast-ip-list", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Lists your Anycast static IP lists.
    ///
    /// Parameters:
    ///   - marker: Use this field when paginating results to indicate where to begin in your list. The response includes items in the list that occur
    ///   - maxItems: The maximum number of Anycast static IP lists that you want returned in the
    ///   - logger: Logger use during operation
    @inlinable
    public func listAnycastIpLists(
        marker: String? = nil,
        maxItems: Int? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> ListAnycastIpListsResult {
        let input = ListAnycastIpListsRequest(
            marker: marker, 
            maxItems: maxItems
        )
        return try await self.listAnycastIpLists(input, logger: logger)
    }

    /// Gets a list of cache policies. You can optionally apply a filter to return only the managed policies created by
    /// 			Amazon Web Services, or only the custom policies created in your Amazon Web Services account. You can optionally specify the maximum number of items to receive in the response. If
    /// 			the total number of items in the list exceeds the maximum that you specify, or the
    /// 			default maximum, the response is paginated. To get the next page of items, send a
    /// 			subsequent request that specifies the NextMarker value from the current
    /// 			response as the Marker value in the subsequent request.
    @Sendable
    @inlinable
    public func listCachePolicies(_ input: ListCachePoliciesRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> ListCachePoliciesResult {
        try await self.client.execute(
            operation: "ListCachePolicies", 
            path: "/2020-05-31/cache-policy", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Gets a list of cache policies. You can optionally apply a filter to return only the managed policies created by
    /// 			Amazon Web Services, or only the custom policies created in your Amazon Web Services account. You can optionally specify the maximum number of items to receive in the response. If
    /// 			the total number of items in the list exceeds the maximum that you specify, or the
    /// 			default maximum, the response is paginated. To get the next page of items, send a
    /// 			subsequent request that specifies the NextMarker value from the current
    /// 			response as the Marker value in the subsequent request.
    ///
    /// Parameters:
    ///   - marker: Use this field when paginating results to indicate where to begin in your list of
    ///   - maxItems: The maximum number of cache policies that you want in the response.
    ///   - type: A filter to return only the specified kinds of cache policies. Valid values
    ///   - logger: Logger use during operation
    @inlinable
    public func listCachePolicies(
        marker: String? = nil,
        maxItems: Int? = nil,
        type: CachePolicyType? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> ListCachePoliciesResult {
        let input = ListCachePoliciesRequest(
            marker: marker, 
            maxItems: maxItems, 
            type: type
        )
        return try await self.listCachePolicies(input, logger: logger)
    }

    /// Lists origin access identities.
    @Sendable
    @inlinable
    public func listCloudFrontOriginAccessIdentities(_ input: ListCloudFrontOriginAccessIdentitiesRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> ListCloudFrontOriginAccessIdentitiesResult {
        try await self.client.execute(
            operation: "ListCloudFrontOriginAccessIdentities", 
            path: "/2020-05-31/origin-access-identity/cloudfront", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Lists origin access identities.
    ///
    /// Parameters:
    ///   - marker: Use this when paginating results to indicate where to begin in your list of origin
    ///   - maxItems: The maximum number of origin access identities you want in the response body.
    ///   - logger: Logger use during operation
    @inlinable
    public func listCloudFrontOriginAccessIdentities(
        marker: String? = nil,
        maxItems: Int? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> ListCloudFrontOriginAccessIdentitiesResult {
        let input = ListCloudFrontOriginAccessIdentitiesRequest(
            marker: marker, 
            maxItems: maxItems
        )
        return try await self.listCloudFrontOriginAccessIdentities(input, logger: logger)
    }

    /// Gets a list of aliases (also called CNAMEs or alternate domain names) that conflict or
    /// 			overlap with the provided alias, and the associated CloudFront distributions and Amazon Web Services
    /// 			accounts for each conflicting alias. In the returned list, the distribution and account
    /// 			IDs are partially hidden, which allows you to identify the distributions and accounts
    /// 			that you own, but helps to protect the information of ones that you don't own. Use this operation to find aliases that are in use in CloudFront that conflict or overlap
    /// 			with the provided alias. For example, if you provide www.example.com as
    /// 			input, the returned list can include www.example.com and the overlapping
    /// 			wildcard alternate domain name (*.example.com), if they exist. If you
    /// 			provide *.example.com as input, the returned list can include
    /// 				*.example.com and any alternate domain names covered by that wildcard
    /// 			(for example, www.example.com, test.example.com,
    /// 				dev.example.com, and so on), if they exist. To list conflicting aliases, you provide the alias to search and the ID of a
    /// 			distribution in your account that has an attached SSL/TLS certificate that includes the
    /// 			provided alias. For more information, including how to set up the distribution and
    /// 			certificate, see Moving an alternate domain name to a different
    /// 				distribution in the Amazon CloudFront Developer Guide. You can optionally specify the maximum number of items to receive in the response. If
    /// 			the total number of items in the list exceeds the maximum that you specify, or the
    /// 			default maximum, the response is paginated. To get the next page of items, send a
    /// 			subsequent request that specifies the NextMarker value from the current
    /// 			response as the Marker value in the subsequent request.
    @Sendable
    @inlinable
    public func listConflictingAliases(_ input: ListConflictingAliasesRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> ListConflictingAliasesResult {
        try await self.client.execute(
            operation: "ListConflictingAliases", 
            path: "/2020-05-31/conflicting-alias", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Gets a list of aliases (also called CNAMEs or alternate domain names) that conflict or
    /// 			overlap with the provided alias, and the associated CloudFront distributions and Amazon Web Services
    /// 			accounts for each conflicting alias. In the returned list, the distribution and account
    /// 			IDs are partially hidden, which allows you to identify the distributions and accounts
    /// 			that you own, but helps to protect the information of ones that you don't own. Use this operation to find aliases that are in use in CloudFront that conflict or overlap
    /// 			with the provided alias. For example, if you provide www.example.com as
    /// 			input, the returned list can include www.example.com and the overlapping
    /// 			wildcard alternate domain name (*.example.com), if they exist. If you
    /// 			provide *.example.com as input, the returned list can include
    /// 				*.example.com and any alternate domain names covered by that wildcard
    /// 			(for example, www.example.com, test.example.com,
    /// 				dev.example.com, and so on), if they exist. To list conflicting aliases, you provide the alias to search and the ID of a
    /// 			distribution in your account that has an attached SSL/TLS certificate that includes the
    /// 			provided alias. For more information, including how to set up the distribution and
    /// 			certificate, see Moving an alternate domain name to a different
    /// 				distribution in the Amazon CloudFront Developer Guide. You can optionally specify the maximum number of items to receive in the response. If
    /// 			the total number of items in the list exceeds the maximum that you specify, or the
    /// 			default maximum, the response is paginated. To get the next page of items, send a
    /// 			subsequent request that specifies the NextMarker value from the current
    /// 			response as the Marker value in the subsequent request.
    ///
    /// Parameters:
    ///   - alias: The alias (also called a CNAME) to search for conflicting aliases.
    ///   - distributionId: The ID of a distribution in your account that has an attached SSL/TLS certificate that
    ///   - marker: Use this field when paginating results to indicate where to begin in the list of
    ///   - maxItems: The maximum number of conflicting aliases that you want in the response.
    ///   - logger: Logger use during operation
    @inlinable
    public func listConflictingAliases(
        alias: String,
        distributionId: String,
        marker: String? = nil,
        maxItems: Int? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> ListConflictingAliasesResult {
        let input = ListConflictingAliasesRequest(
            alias: alias, 
            distributionId: distributionId, 
            marker: marker, 
            maxItems: maxItems
        )
        return try await self.listConflictingAliases(input, logger: logger)
    }

    /// Gets a list of the continuous deployment policies in your Amazon Web Services account. You can optionally specify the maximum number of items to receive in the response. If
    /// 			the total number of items in the list exceeds the maximum that you specify, or the
    /// 			default maximum, the response is paginated. To get the next page of items, send a
    /// 			subsequent request that specifies the NextMarker value from the current
    /// 			response as the Marker value in the subsequent request.
    @Sendable
    @inlinable
    public func listContinuousDeploymentPolicies(_ input: ListContinuousDeploymentPoliciesRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> ListContinuousDeploymentPoliciesResult {
        try await self.client.execute(
            operation: "ListContinuousDeploymentPolicies", 
            path: "/2020-05-31/continuous-deployment-policy", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Gets a list of the continuous deployment policies in your Amazon Web Services account. You can optionally specify the maximum number of items to receive in the response. If
    /// 			the total number of items in the list exceeds the maximum that you specify, or the
    /// 			default maximum, the response is paginated. To get the next page of items, send a
    /// 			subsequent request that specifies the NextMarker value from the current
    /// 			response as the Marker value in the subsequent request.
    ///
    /// Parameters:
    ///   - marker: Use this field when paginating results to indicate where to begin in your list of
    ///   - maxItems: The maximum number of continuous deployment policies that you want returned in the
    ///   - logger: Logger use during operation
    @inlinable
    public func listContinuousDeploymentPolicies(
        marker: String? = nil,
        maxItems: Int? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> ListContinuousDeploymentPoliciesResult {
        let input = ListContinuousDeploymentPoliciesRequest(
            marker: marker, 
            maxItems: maxItems
        )
        return try await self.listContinuousDeploymentPolicies(input, logger: logger)
    }

    /// List CloudFront distributions.
    @Sendable
    @inlinable
    public func listDistributions(_ input: ListDistributionsRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> ListDistributionsResult {
        try await self.client.execute(
            operation: "ListDistributions", 
            path: "/2020-05-31/distribution", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// List CloudFront distributions.
    ///
    /// Parameters:
    ///   - marker: Use this when paginating results to indicate where to begin in your list of
    ///   - maxItems: The maximum number of distributions you want in the response body.
    ///   - logger: Logger use during operation
    @inlinable
    public func listDistributions(
        marker: String? = nil,
        maxItems: Int? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> ListDistributionsResult {
        let input = ListDistributionsRequest(
            marker: marker, 
            maxItems: maxItems
        )
        return try await self.listDistributions(input, logger: logger)
    }

    /// Lists the distributions in your account that are associated with the specified AnycastIpListId.
    @Sendable
    @inlinable
    public func listDistributionsByAnycastIpListId(_ input: ListDistributionsByAnycastIpListIdRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> ListDistributionsByAnycastIpListIdResult {
        try await self.client.execute(
            operation: "ListDistributionsByAnycastIpListId", 
            path: "/2020-05-31/distributionsByAnycastIpListId/{AnycastIpListId}", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Lists the distributions in your account that are associated with the specified AnycastIpListId.
    ///
    /// Parameters:
    ///   - anycastIpListId: The ID of the Anycast static IP list.
    ///   - marker: Use this field when paginating results to indicate where to begin in your list. The response includes items in the list that occur
    ///   - maxItems: The maximum number of distributions that you want returned in the
    ///   - logger: Logger use during operation
    @inlinable
    public func listDistributionsByAnycastIpListId(
        anycastIpListId: String,
        marker: String? = nil,
        maxItems: Int? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> ListDistributionsByAnycastIpListIdResult {
        let input = ListDistributionsByAnycastIpListIdRequest(
            anycastIpListId: anycastIpListId, 
            marker: marker, 
            maxItems: maxItems
        )
        return try await self.listDistributionsByAnycastIpListId(input, logger: logger)
    }

    /// Gets a list of distribution IDs for distributions that have a cache behavior that's
    /// 			associated with the specified cache policy. You can optionally specify the maximum number of items to receive in the response. If
    /// 			the total number of items in the list exceeds the maximum that you specify, or the
    /// 			default maximum, the response is paginated. To get the next page of items, send a
    /// 			subsequent request that specifies the NextMarker value from the current
    /// 			response as the Marker value in the subsequent request.
    @Sendable
    @inlinable
    public func listDistributionsByCachePolicyId(_ input: ListDistributionsByCachePolicyIdRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> ListDistributionsByCachePolicyIdResult {
        try await self.client.execute(
            operation: "ListDistributionsByCachePolicyId", 
            path: "/2020-05-31/distributionsByCachePolicyId/{CachePolicyId}", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Gets a list of distribution IDs for distributions that have a cache behavior that's
    /// 			associated with the specified cache policy. You can optionally specify the maximum number of items to receive in the response. If
    /// 			the total number of items in the list exceeds the maximum that you specify, or the
    /// 			default maximum, the response is paginated. To get the next page of items, send a
    /// 			subsequent request that specifies the NextMarker value from the current
    /// 			response as the Marker value in the subsequent request.
    ///
    /// Parameters:
    ///   - cachePolicyId: The ID of the cache policy whose associated distribution IDs you want to list.
    ///   - marker: Use this field when paginating results to indicate where to begin in your list of
    ///   - maxItems: The maximum number of distribution IDs that you want in the response.
    ///   - logger: Logger use during operation
    @inlinable
    public func listDistributionsByCachePolicyId(
        cachePolicyId: String,
        marker: String? = nil,
        maxItems: Int? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> ListDistributionsByCachePolicyIdResult {
        let input = ListDistributionsByCachePolicyIdRequest(
            cachePolicyId: cachePolicyId, 
            marker: marker, 
            maxItems: maxItems
        )
        return try await self.listDistributionsByCachePolicyId(input, logger: logger)
    }

    /// Gets a list of distribution IDs for distributions that have a cache behavior that
    /// 			references the specified key group. You can optionally specify the maximum number of items to receive in the response. If
    /// 			the total number of items in the list exceeds the maximum that you specify, or the
    /// 			default maximum, the response is paginated. To get the next page of items, send a
    /// 			subsequent request that specifies the NextMarker value from the current
    /// 			response as the Marker value in the subsequent request.
    @Sendable
    @inlinable
    public func listDistributionsByKeyGroup(_ input: ListDistributionsByKeyGroupRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> ListDistributionsByKeyGroupResult {
        try await self.client.execute(
            operation: "ListDistributionsByKeyGroup", 
            path: "/2020-05-31/distributionsByKeyGroupId/{KeyGroupId}", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Gets a list of distribution IDs for distributions that have a cache behavior that
    /// 			references the specified key group. You can optionally specify the maximum number of items to receive in the response. If
    /// 			the total number of items in the list exceeds the maximum that you specify, or the
    /// 			default maximum, the response is paginated. To get the next page of items, send a
    /// 			subsequent request that specifies the NextMarker value from the current
    /// 			response as the Marker value in the subsequent request.
    ///
    /// Parameters:
    ///   - keyGroupId: The ID of the key group whose associated distribution IDs you are listing.
    ///   - marker: Use this field when paginating results to indicate where to begin in your list of
    ///   - maxItems: The maximum number of distribution IDs that you want in the response.
    ///   - logger: Logger use during operation
    @inlinable
    public func listDistributionsByKeyGroup(
        keyGroupId: String,
        marker: String? = nil,
        maxItems: Int? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> ListDistributionsByKeyGroupResult {
        let input = ListDistributionsByKeyGroupRequest(
            keyGroupId: keyGroupId, 
            marker: marker, 
            maxItems: maxItems
        )
        return try await self.listDistributionsByKeyGroup(input, logger: logger)
    }

    /// Gets a list of distribution IDs for distributions that have a cache behavior that's
    /// 			associated with the specified origin request policy. You can optionally specify the maximum number of items to receive in the response. If
    /// 			the total number of items in the list exceeds the maximum that you specify, or the
    /// 			default maximum, the response is paginated. To get the next page of items, send a
    /// 			subsequent request that specifies the NextMarker value from the current
    /// 			response as the Marker value in the subsequent request.
    @Sendable
    @inlinable
    public func listDistributionsByOriginRequestPolicyId(_ input: ListDistributionsByOriginRequestPolicyIdRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> ListDistributionsByOriginRequestPolicyIdResult {
        try await self.client.execute(
            operation: "ListDistributionsByOriginRequestPolicyId", 
            path: "/2020-05-31/distributionsByOriginRequestPolicyId/{OriginRequestPolicyId}", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Gets a list of distribution IDs for distributions that have a cache behavior that's
    /// 			associated with the specified origin request policy. You can optionally specify the maximum number of items to receive in the response. If
    /// 			the total number of items in the list exceeds the maximum that you specify, or the
    /// 			default maximum, the response is paginated. To get the next page of items, send a
    /// 			subsequent request that specifies the NextMarker value from the current
    /// 			response as the Marker value in the subsequent request.
    ///
    /// Parameters:
    ///   - marker: Use this field when paginating results to indicate where to begin in your list of
    ///   - maxItems: The maximum number of distribution IDs that you want in the response.
    ///   - originRequestPolicyId: The ID of the origin request policy whose associated distribution IDs you want to
    ///   - logger: Logger use during operation
    @inlinable
    public func listDistributionsByOriginRequestPolicyId(
        marker: String? = nil,
        maxItems: Int? = nil,
        originRequestPolicyId: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> ListDistributionsByOriginRequestPolicyIdResult {
        let input = ListDistributionsByOriginRequestPolicyIdRequest(
            marker: marker, 
            maxItems: maxItems, 
            originRequestPolicyId: originRequestPolicyId
        )
        return try await self.listDistributionsByOriginRequestPolicyId(input, logger: logger)
    }

    /// Gets a list of distributions that have a cache behavior that's associated with the
    /// 			specified real-time log configuration. You can specify the real-time log configuration by its name or its Amazon Resource
    /// 			Name (ARN). You must provide at least one. If you provide both, CloudFront uses the name to
    /// 			identify the real-time log configuration to list distributions for. You can optionally specify the maximum number of items to receive in the response. If
    /// 			the total number of items in the list exceeds the maximum that you specify, or the
    /// 			default maximum, the response is paginated. To get the next page of items, send a
    /// 			subsequent request that specifies the NextMarker value from the current
    /// 			response as the Marker value in the subsequent request.
    @Sendable
    @inlinable
    public func listDistributionsByRealtimeLogConfig(_ input: ListDistributionsByRealtimeLogConfigRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> ListDistributionsByRealtimeLogConfigResult {
        try await self.client.execute(
            operation: "ListDistributionsByRealtimeLogConfig", 
            path: "/2020-05-31/distributionsByRealtimeLogConfig", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Gets a list of distributions that have a cache behavior that's associated with the
    /// 			specified real-time log configuration. You can specify the real-time log configuration by its name or its Amazon Resource
    /// 			Name (ARN). You must provide at least one. If you provide both, CloudFront uses the name to
    /// 			identify the real-time log configuration to list distributions for. You can optionally specify the maximum number of items to receive in the response. If
    /// 			the total number of items in the list exceeds the maximum that you specify, or the
    /// 			default maximum, the response is paginated. To get the next page of items, send a
    /// 			subsequent request that specifies the NextMarker value from the current
    /// 			response as the Marker value in the subsequent request.
    ///
    /// Parameters:
    ///   - marker: Use this field when paginating results to indicate where to begin in your list of
    ///   - maxItems: The maximum number of distributions that you want in the response.
    ///   - realtimeLogConfigArn: The Amazon Resource Name (ARN) of the real-time log configuration whose associated
    ///   - realtimeLogConfigName: The name of the real-time log configuration whose associated distributions you want to
    ///   - logger: Logger use during operation
    @inlinable
    public func listDistributionsByRealtimeLogConfig(
        marker: String? = nil,
        maxItems: Int? = nil,
        realtimeLogConfigArn: String? = nil,
        realtimeLogConfigName: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> ListDistributionsByRealtimeLogConfigResult {
        let input = ListDistributionsByRealtimeLogConfigRequest(
            marker: marker, 
            maxItems: maxItems, 
            realtimeLogConfigArn: realtimeLogConfigArn, 
            realtimeLogConfigName: realtimeLogConfigName
        )
        return try await self.listDistributionsByRealtimeLogConfig(input, logger: logger)
    }

    /// Gets a list of distribution IDs for distributions that have a cache behavior that's
    /// 			associated with the specified response headers policy. You can optionally specify the maximum number of items to receive in the response. If
    /// 			the total number of items in the list exceeds the maximum that you specify, or the
    /// 			default maximum, the response is paginated. To get the next page of items, send a
    /// 			subsequent request that specifies the NextMarker value from the current
    /// 			response as the Marker value in the subsequent request.
    @Sendable
    @inlinable
    public func listDistributionsByResponseHeadersPolicyId(_ input: ListDistributionsByResponseHeadersPolicyIdRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> ListDistributionsByResponseHeadersPolicyIdResult {
        try await self.client.execute(
            operation: "ListDistributionsByResponseHeadersPolicyId", 
            path: "/2020-05-31/distributionsByResponseHeadersPolicyId/{ResponseHeadersPolicyId}", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Gets a list of distribution IDs for distributions that have a cache behavior that's
    /// 			associated with the specified response headers policy. You can optionally specify the maximum number of items to receive in the response. If
    /// 			the total number of items in the list exceeds the maximum that you specify, or the
    /// 			default maximum, the response is paginated. To get the next page of items, send a
    /// 			subsequent request that specifies the NextMarker value from the current
    /// 			response as the Marker value in the subsequent request.
    ///
    /// Parameters:
    ///   - marker: Use this field when paginating results to indicate where to begin in your list of
    ///   - maxItems: The maximum number of distribution IDs that you want to get in the response.
    ///   - responseHeadersPolicyId: The ID of the response headers policy whose associated distribution IDs you want to
    ///   - logger: Logger use during operation
    @inlinable
    public func listDistributionsByResponseHeadersPolicyId(
        marker: String? = nil,
        maxItems: Int? = nil,
        responseHeadersPolicyId: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> ListDistributionsByResponseHeadersPolicyIdResult {
        let input = ListDistributionsByResponseHeadersPolicyIdRequest(
            marker: marker, 
            maxItems: maxItems, 
            responseHeadersPolicyId: responseHeadersPolicyId
        )
        return try await self.listDistributionsByResponseHeadersPolicyId(input, logger: logger)
    }

    /// List CloudFront distributions by their VPC origin ID.
    @Sendable
    @inlinable
    public func listDistributionsByVpcOriginId(_ input: ListDistributionsByVpcOriginIdRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> ListDistributionsByVpcOriginIdResult {
        try await self.client.execute(
            operation: "ListDistributionsByVpcOriginId", 
            path: "/2020-05-31/distributionsByVpcOriginId/{VpcOriginId}", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// List CloudFront distributions by their VPC origin ID.
    ///
    /// Parameters:
    ///   - marker: The marker associated with the VPC origin distributions list.
    ///   - maxItems: The maximum number of items included in the list.
    ///   - vpcOriginId: The VPC origin ID.
    ///   - logger: Logger use during operation
    @inlinable
    public func listDistributionsByVpcOriginId(
        marker: String? = nil,
        maxItems: Int? = nil,
        vpcOriginId: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> ListDistributionsByVpcOriginIdResult {
        let input = ListDistributionsByVpcOriginIdRequest(
            marker: marker, 
            maxItems: maxItems, 
            vpcOriginId: vpcOriginId
        )
        return try await self.listDistributionsByVpcOriginId(input, logger: logger)
    }

    /// List the distributions that are associated with a specified WAF web ACL.
    @Sendable
    @inlinable
    public func listDistributionsByWebACLId(_ input: ListDistributionsByWebACLIdRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> ListDistributionsByWebACLIdResult {
        try await self.client.execute(
            operation: "ListDistributionsByWebACLId", 
            path: "/2020-05-31/distributionsByWebACLId/{WebACLId}", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// List the distributions that are associated with a specified WAF web ACL.
    ///
    /// Parameters:
    ///   - marker: Use Marker and MaxItems to control pagination of results. If
    ///   - maxItems: The maximum number of distributions that you want CloudFront to return in the response body.
    ///   - webACLId: The ID of the WAF web ACL that you want to list the associated distributions. If you
    ///   - logger: Logger use during operation
    @inlinable
    public func listDistributionsByWebACLId(
        marker: String? = nil,
        maxItems: Int? = nil,
        webACLId: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> ListDistributionsByWebACLIdResult {
        let input = ListDistributionsByWebACLIdRequest(
            marker: marker, 
            maxItems: maxItems, 
            webACLId: webACLId
        )
        return try await self.listDistributionsByWebACLId(input, logger: logger)
    }

    /// List all field-level encryption configurations that have been created in CloudFront for this
    /// 			account.
    @Sendable
    @inlinable
    public func listFieldLevelEncryptionConfigs(_ input: ListFieldLevelEncryptionConfigsRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> ListFieldLevelEncryptionConfigsResult {
        try await self.client.execute(
            operation: "ListFieldLevelEncryptionConfigs", 
            path: "/2020-05-31/field-level-encryption", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// List all field-level encryption configurations that have been created in CloudFront for this
    /// 			account.
    ///
    /// Parameters:
    ///   - marker: Use this when paginating results to indicate where to begin in your list of
    ///   - maxItems: The maximum number of field-level encryption configurations you want in the response
    ///   - logger: Logger use during operation
    @inlinable
    public func listFieldLevelEncryptionConfigs(
        marker: String? = nil,
        maxItems: Int? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> ListFieldLevelEncryptionConfigsResult {
        let input = ListFieldLevelEncryptionConfigsRequest(
            marker: marker, 
            maxItems: maxItems
        )
        return try await self.listFieldLevelEncryptionConfigs(input, logger: logger)
    }

    /// Request a list of field-level encryption profiles that have been created in CloudFront for
    /// 			this account.
    @Sendable
    @inlinable
    public func listFieldLevelEncryptionProfiles(_ input: ListFieldLevelEncryptionProfilesRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> ListFieldLevelEncryptionProfilesResult {
        try await self.client.execute(
            operation: "ListFieldLevelEncryptionProfiles", 
            path: "/2020-05-31/field-level-encryption-profile", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Request a list of field-level encryption profiles that have been created in CloudFront for
    /// 			this account.
    ///
    /// Parameters:
    ///   - marker: Use this when paginating results to indicate where to begin in your list of profiles.
    ///   - maxItems: The maximum number of field-level encryption profiles you want in the response body.
    ///   - logger: Logger use during operation
    @inlinable
    public func listFieldLevelEncryptionProfiles(
        marker: String? = nil,
        maxItems: Int? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> ListFieldLevelEncryptionProfilesResult {
        let input = ListFieldLevelEncryptionProfilesRequest(
            marker: marker, 
            maxItems: maxItems
        )
        return try await self.listFieldLevelEncryptionProfiles(input, logger: logger)
    }

    /// Gets a list of all CloudFront functions in your Amazon Web Services account. You can optionally apply a filter to return only the functions that are in the
    /// 			specified stage, either DEVELOPMENT or LIVE. You can optionally specify the maximum number of items to receive in the response. If
    /// 			the total number of items in the list exceeds the maximum that you specify, or the
    /// 			default maximum, the response is paginated. To get the next page of items, send a
    /// 			subsequent request that specifies the NextMarker value from the current
    /// 			response as the Marker value in the subsequent request.
    @Sendable
    @inlinable
    public func listFunctions(_ input: ListFunctionsRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> ListFunctionsResult {
        try await self.client.execute(
            operation: "ListFunctions", 
            path: "/2020-05-31/function", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Gets a list of all CloudFront functions in your Amazon Web Services account. You can optionally apply a filter to return only the functions that are in the
    /// 			specified stage, either DEVELOPMENT or LIVE. You can optionally specify the maximum number of items to receive in the response. If
    /// 			the total number of items in the list exceeds the maximum that you specify, or the
    /// 			default maximum, the response is paginated. To get the next page of items, send a
    /// 			subsequent request that specifies the NextMarker value from the current
    /// 			response as the Marker value in the subsequent request.
    ///
    /// Parameters:
    ///   - marker: Use this field when paginating results to indicate where to begin in your list of
    ///   - maxItems: The maximum number of functions that you want in the response.
    ///   - stage: An optional filter to return only the functions that are in the specified stage,
    ///   - logger: Logger use during operation
    @inlinable
    public func listFunctions(
        marker: String? = nil,
        maxItems: Int? = nil,
        stage: FunctionStage? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> ListFunctionsResult {
        let input = ListFunctionsRequest(
            marker: marker, 
            maxItems: maxItems, 
            stage: stage
        )
        return try await self.listFunctions(input, logger: logger)
    }

    /// Lists invalidation batches.
    @Sendable
    @inlinable
    public func listInvalidations(_ input: ListInvalidationsRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> ListInvalidationsResult {
        try await self.client.execute(
            operation: "ListInvalidations", 
            path: "/2020-05-31/distribution/{DistributionId}/invalidation", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Lists invalidation batches.
    ///
    /// Parameters:
    ///   - distributionId: The distribution's ID.
    ///   - marker: Use this parameter when paginating results to indicate where to begin in your list of
    ///   - maxItems: The maximum number of invalidation batches that you want in the response body.
    ///   - logger: Logger use during operation
    @inlinable
    public func listInvalidations(
        distributionId: String,
        marker: String? = nil,
        maxItems: Int? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> ListInvalidationsResult {
        let input = ListInvalidationsRequest(
            distributionId: distributionId, 
            marker: marker, 
            maxItems: maxItems
        )
        return try await self.listInvalidations(input, logger: logger)
    }

    /// Gets a list of key groups. You can optionally specify the maximum number of items to receive in the response. If
    /// 			the total number of items in the list exceeds the maximum that you specify, or the
    /// 			default maximum, the response is paginated. To get the next page of items, send a
    /// 			subsequent request that specifies the NextMarker value from the current
    /// 			response as the Marker value in the subsequent request.
    @Sendable
    @inlinable
    public func listKeyGroups(_ input: ListKeyGroupsRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> ListKeyGroupsResult {
        try await self.client.execute(
            operation: "ListKeyGroups", 
            path: "/2020-05-31/key-group", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Gets a list of key groups. You can optionally specify the maximum number of items to receive in the response. If
    /// 			the total number of items in the list exceeds the maximum that you specify, or the
    /// 			default maximum, the response is paginated. To get the next page of items, send a
    /// 			subsequent request that specifies the NextMarker value from the current
    /// 			response as the Marker value in the subsequent request.
    ///
    /// Parameters:
    ///   - marker: Use this field when paginating results to indicate where to begin in your list of key
    ///   - maxItems: The maximum number of key groups that you want in the response.
    ///   - logger: Logger use during operation
    @inlinable
    public func listKeyGroups(
        marker: String? = nil,
        maxItems: Int? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> ListKeyGroupsResult {
        let input = ListKeyGroupsRequest(
            marker: marker, 
            maxItems: maxItems
        )
        return try await self.listKeyGroups(input, logger: logger)
    }

    /// Specifies the key value stores to list.
    @Sendable
    @inlinable
    public func listKeyValueStores(_ input: ListKeyValueStoresRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> ListKeyValueStoresResult {
        try await self.client.execute(
            operation: "ListKeyValueStores", 
            path: "/2020-05-31/key-value-store", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Specifies the key value stores to list.
    ///
    /// Parameters:
    ///   - marker: The marker associated with the key value stores list.
    ///   - maxItems: The maximum number of items in the key value stores list.
    ///   - status: The status of the request for the key value stores list.
    ///   - logger: Logger use during operation
    @inlinable
    public func listKeyValueStores(
        marker: String? = nil,
        maxItems: Int? = nil,
        status: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> ListKeyValueStoresResult {
        let input = ListKeyValueStoresRequest(
            marker: marker, 
            maxItems: maxItems, 
            status: status
        )
        return try await self.listKeyValueStores(input, logger: logger)
    }

    /// Gets the list of CloudFront origin access controls (OACs) in this Amazon Web Services account. You can optionally specify the maximum number of items to receive in the response. If
    /// 			the total number of items in the list exceeds the maximum that you specify, or the
    /// 			default maximum, the response is paginated. To get the next page of items, send another
    /// 			request that specifies the NextMarker value from the current response as
    /// 			the Marker value in the next request.  If you're not using origin access controls for your Amazon Web Services account, the
    /// 					ListOriginAccessControls operation doesn't return the
    /// 					Items element in the response.
    @Sendable
    @inlinable
    public func listOriginAccessControls(_ input: ListOriginAccessControlsRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> ListOriginAccessControlsResult {
        try await self.client.execute(
            operation: "ListOriginAccessControls", 
            path: "/2020-05-31/origin-access-control", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Gets the list of CloudFront origin access controls (OACs) in this Amazon Web Services account. You can optionally specify the maximum number of items to receive in the response. If
    /// 			the total number of items in the list exceeds the maximum that you specify, or the
    /// 			default maximum, the response is paginated. To get the next page of items, send another
    /// 			request that specifies the NextMarker value from the current response as
    /// 			the Marker value in the next request.  If you're not using origin access controls for your Amazon Web Services account, the
    /// 					ListOriginAccessControls operation doesn't return the
    /// 					Items element in the response.
    ///
    /// Parameters:
    ///   - marker: Use this field when paginating results to indicate where to begin in your list of
    ///   - maxItems: The maximum number of origin access controls that you want in the response.
    ///   - logger: Logger use during operation
    @inlinable
    public func listOriginAccessControls(
        marker: String? = nil,
        maxItems: Int? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> ListOriginAccessControlsResult {
        let input = ListOriginAccessControlsRequest(
            marker: marker, 
            maxItems: maxItems
        )
        return try await self.listOriginAccessControls(input, logger: logger)
    }

    /// Gets a list of origin request policies. You can optionally apply a filter to return only the managed policies created by
    /// 			Amazon Web Services, or only the custom policies created in your Amazon Web Services account. You can optionally specify the maximum number of items to receive in the response. If
    /// 			the total number of items in the list exceeds the maximum that you specify, or the
    /// 			default maximum, the response is paginated. To get the next page of items, send a
    /// 			subsequent request that specifies the NextMarker value from the current
    /// 			response as the Marker value in the subsequent request.
    @Sendable
    @inlinable
    public func listOriginRequestPolicies(_ input: ListOriginRequestPoliciesRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> ListOriginRequestPoliciesResult {
        try await self.client.execute(
            operation: "ListOriginRequestPolicies", 
            path: "/2020-05-31/origin-request-policy", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Gets a list of origin request policies. You can optionally apply a filter to return only the managed policies created by
    /// 			Amazon Web Services, or only the custom policies created in your Amazon Web Services account. You can optionally specify the maximum number of items to receive in the response. If
    /// 			the total number of items in the list exceeds the maximum that you specify, or the
    /// 			default maximum, the response is paginated. To get the next page of items, send a
    /// 			subsequent request that specifies the NextMarker value from the current
    /// 			response as the Marker value in the subsequent request.
    ///
    /// Parameters:
    ///   - marker: Use this field when paginating results to indicate where to begin in your list of
    ///   - maxItems: The maximum number of origin request policies that you want in the response.
    ///   - type: A filter to return only the specified kinds of origin request policies. Valid values
    ///   - logger: Logger use during operation
    @inlinable
    public func listOriginRequestPolicies(
        marker: String? = nil,
        maxItems: Int? = nil,
        type: OriginRequestPolicyType? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> ListOriginRequestPoliciesResult {
        let input = ListOriginRequestPoliciesRequest(
            marker: marker, 
            maxItems: maxItems, 
            type: type
        )
        return try await self.listOriginRequestPolicies(input, logger: logger)
    }

    /// List all public keys that have been added to CloudFront for this account.
    @Sendable
    @inlinable
    public func listPublicKeys(_ input: ListPublicKeysRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> ListPublicKeysResult {
        try await self.client.execute(
            operation: "ListPublicKeys", 
            path: "/2020-05-31/public-key", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// List all public keys that have been added to CloudFront for this account.
    ///
    /// Parameters:
    ///   - marker: Use this when paginating results to indicate where to begin in your list of public
    ///   - maxItems: The maximum number of public keys you want in the response body.
    ///   - logger: Logger use during operation
    @inlinable
    public func listPublicKeys(
        marker: String? = nil,
        maxItems: Int? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> ListPublicKeysResult {
        let input = ListPublicKeysRequest(
            marker: marker, 
            maxItems: maxItems
        )
        return try await self.listPublicKeys(input, logger: logger)
    }

    /// Gets a list of real-time log configurations. You can optionally specify the maximum number of items to receive in the response. If
    /// 			the total number of items in the list exceeds the maximum that you specify, or the
    /// 			default maximum, the response is paginated. To get the next page of items, send a
    /// 			subsequent request that specifies the NextMarker value from the current
    /// 			response as the Marker value in the subsequent request.
    @Sendable
    @inlinable
    public func listRealtimeLogConfigs(_ input: ListRealtimeLogConfigsRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> ListRealtimeLogConfigsResult {
        try await self.client.execute(
            operation: "ListRealtimeLogConfigs", 
            path: "/2020-05-31/realtime-log-config", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Gets a list of real-time log configurations. You can optionally specify the maximum number of items to receive in the response. If
    /// 			the total number of items in the list exceeds the maximum that you specify, or the
    /// 			default maximum, the response is paginated. To get the next page of items, send a
    /// 			subsequent request that specifies the NextMarker value from the current
    /// 			response as the Marker value in the subsequent request.
    ///
    /// Parameters:
    ///   - marker: Use this field when paginating results to indicate where to begin in your list of
    ///   - maxItems: The maximum number of real-time log configurations that you want in the
    ///   - logger: Logger use during operation
    @inlinable
    public func listRealtimeLogConfigs(
        marker: String? = nil,
        maxItems: Int? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> ListRealtimeLogConfigsResult {
        let input = ListRealtimeLogConfigsRequest(
            marker: marker, 
            maxItems: maxItems
        )
        return try await self.listRealtimeLogConfigs(input, logger: logger)
    }

    /// Gets a list of response headers policies. You can optionally apply a filter to get only the managed policies created by Amazon Web Services,
    /// 			or only the custom policies created in your Amazon Web Services account. You can optionally specify the maximum number of items to receive in the response. If
    /// 			the total number of items in the list exceeds the maximum that you specify, or the
    /// 			default maximum, the response is paginated. To get the next page of items, send a
    /// 			subsequent request that specifies the NextMarker value from the current
    /// 			response as the Marker value in the subsequent request.
    @Sendable
    @inlinable
    public func listResponseHeadersPolicies(_ input: ListResponseHeadersPoliciesRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> ListResponseHeadersPoliciesResult {
        try await self.client.execute(
            operation: "ListResponseHeadersPolicies", 
            path: "/2020-05-31/response-headers-policy", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Gets a list of response headers policies. You can optionally apply a filter to get only the managed policies created by Amazon Web Services,
    /// 			or only the custom policies created in your Amazon Web Services account. You can optionally specify the maximum number of items to receive in the response. If
    /// 			the total number of items in the list exceeds the maximum that you specify, or the
    /// 			default maximum, the response is paginated. To get the next page of items, send a
    /// 			subsequent request that specifies the NextMarker value from the current
    /// 			response as the Marker value in the subsequent request.
    ///
    /// Parameters:
    ///   - marker: Use this field when paginating results to indicate where to begin in your list of
    ///   - maxItems: The maximum number of response headers policies that you want to get in the
    ///   - type: A filter to get only the specified kind of response headers policies. Valid values
    ///   - logger: Logger use during operation
    @inlinable
    public func listResponseHeadersPolicies(
        marker: String? = nil,
        maxItems: Int? = nil,
        type: ResponseHeadersPolicyType? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> ListResponseHeadersPoliciesResult {
        let input = ListResponseHeadersPoliciesRequest(
            marker: marker, 
            maxItems: maxItems, 
            type: type
        )
        return try await self.listResponseHeadersPolicies(input, logger: logger)
    }

    /// List streaming distributions.
    @Sendable
    @inlinable
    public func listStreamingDistributions(_ input: ListStreamingDistributionsRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> ListStreamingDistributionsResult {
        try await self.client.execute(
            operation: "ListStreamingDistributions", 
            path: "/2020-05-31/streaming-distribution", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// List streaming distributions.
    ///
    /// Parameters:
    ///   - marker: The value that you provided for the Marker request parameter.
    ///   - maxItems: The value that you provided for the MaxItems request parameter.
    ///   - logger: Logger use during operation
    @inlinable
    public func listStreamingDistributions(
        marker: String? = nil,
        maxItems: Int? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> ListStreamingDistributionsResult {
        let input = ListStreamingDistributionsRequest(
            marker: marker, 
            maxItems: maxItems
        )
        return try await self.listStreamingDistributions(input, logger: logger)
    }

    /// List tags for a CloudFront resource. For more information, see Tagging a distribution in the Amazon CloudFront Developer Guide.
    @Sendable
    @inlinable
    public func listTagsForResource(_ input: ListTagsForResourceRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> ListTagsForResourceResult {
        try await self.client.execute(
            operation: "ListTagsForResource", 
            path: "/2020-05-31/tagging", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// List tags for a CloudFront resource. For more information, see Tagging a distribution in the Amazon CloudFront Developer Guide.
    ///
    /// Parameters:
    ///   - resource: An ARN of a CloudFront resource.
    ///   - logger: Logger use during operation
    @inlinable
    public func listTagsForResource(
        resource: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> ListTagsForResourceResult {
        let input = ListTagsForResourceRequest(
            resource: resource
        )
        return try await self.listTagsForResource(input, logger: logger)
    }

    /// List the CloudFront VPC origins in your account.
    @Sendable
    @inlinable
    public func listVpcOrigins(_ input: ListVpcOriginsRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> ListVpcOriginsResult {
        try await self.client.execute(
            operation: "ListVpcOrigins", 
            path: "/2020-05-31/vpc-origin", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// List the CloudFront VPC origins in your account.
    ///
    /// Parameters:
    ///   - marker: The marker associated with the VPC origins list.
    ///   - maxItems: The maximum number of items included in the list.
    ///   - logger: Logger use during operation
    @inlinable
    public func listVpcOrigins(
        marker: String? = nil,
        maxItems: Int? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> ListVpcOriginsResult {
        let input = ListVpcOriginsRequest(
            marker: marker, 
            maxItems: maxItems
        )
        return try await self.listVpcOrigins(input, logger: logger)
    }

    /// Publishes a CloudFront function by copying the function code from the
    /// 				DEVELOPMENT stage to LIVE. This automatically updates all
    /// 			cache behaviors that are using this function to use the newly published copy in the
    /// 				LIVE stage. When a function is published to the LIVE stage, you can attach the
    /// 			function to a distribution's cache behavior, using the function's Amazon Resource Name
    /// 			(ARN). To publish a function, you must provide the function's name and version
    /// 				(ETag value). To get these values, you can use
    /// 				ListFunctions and DescribeFunction.
    @Sendable
    @inlinable
    public func publishFunction(_ input: PublishFunctionRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> PublishFunctionResult {
        try await self.client.execute(
            operation: "PublishFunction", 
            path: "/2020-05-31/function/{Name}/publish", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Publishes a CloudFront function by copying the function code from the
    /// 				DEVELOPMENT stage to LIVE. This automatically updates all
    /// 			cache behaviors that are using this function to use the newly published copy in the
    /// 				LIVE stage. When a function is published to the LIVE stage, you can attach the
    /// 			function to a distribution's cache behavior, using the function's Amazon Resource Name
    /// 			(ARN). To publish a function, you must provide the function's name and version
    /// 				(ETag value). To get these values, you can use
    /// 				ListFunctions and DescribeFunction.
    ///
    /// Parameters:
    ///   - ifMatch: The current version (ETag value) of the function that you are publishing,
    ///   - name: The name of the function that you are publishing.
    ///   - logger: Logger use during operation
    @inlinable
    public func publishFunction(
        ifMatch: String,
        name: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> PublishFunctionResult {
        let input = PublishFunctionRequest(
            ifMatch: ifMatch, 
            name: name
        )
        return try await self.publishFunction(input, logger: logger)
    }

    /// Add tags to a CloudFront resource. For more information, see Tagging a distribution in the Amazon CloudFront Developer Guide.
    @Sendable
    @inlinable
    public func tagResource(_ input: TagResourceRequest, logger: Logger = AWSClient.loggingDisabled) async throws {
        try await self.client.execute(
            operation: "TagResource", 
            path: "/2020-05-31/tagging?Operation=Tag", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Add tags to a CloudFront resource. For more information, see Tagging a distribution in the Amazon CloudFront Developer Guide.
    ///
    /// Parameters:
    ///   - resource: An ARN of a CloudFront resource.
    ///   - tags: A complex type that contains zero or more Tag elements.
    ///   - logger: Logger use during operation
    @inlinable
    public func tagResource(
        resource: String,
        tags: Tags,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws {
        let input = TagResourceRequest(
            resource: resource, 
            tags: tags
        )
        return try await self.tagResource(input, logger: logger)
    }

    /// Tests a CloudFront function. To test a function, you provide an event object that represents
    /// 			an HTTP request or response that your CloudFront distribution could receive in production.
    /// 			CloudFront runs the function, passing it the event object that you provided, and returns the
    /// 			function's result (the modified event object) in the response. The response also
    /// 			contains function logs and error messages, if any exist. For more information about
    /// 			testing functions, see Testing functions in the Amazon CloudFront Developer Guide. To test a function, you provide the function's name and version (ETag
    /// 			value) along with the event object. To get the function's name and version, you can use
    /// 				ListFunctions and DescribeFunction.
    @Sendable
    @inlinable
    public func testFunction(_ input: TestFunctionRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> TestFunctionResult {
        try await self.client.execute(
            operation: "TestFunction", 
            path: "/2020-05-31/function/{Name}/test", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Tests a CloudFront function. To test a function, you provide an event object that represents
    /// 			an HTTP request or response that your CloudFront distribution could receive in production.
    /// 			CloudFront runs the function, passing it the event object that you provided, and returns the
    /// 			function's result (the modified event object) in the response. The response also
    /// 			contains function logs and error messages, if any exist. For more information about
    /// 			testing functions, see Testing functions in the Amazon CloudFront Developer Guide. To test a function, you provide the function's name and version (ETag
    /// 			value) along with the event object. To get the function's name and version, you can use
    /// 				ListFunctions and DescribeFunction.
    ///
    /// Parameters:
    ///   - eventObject: The event object to test the function with. For more information about the structure
    ///   - ifMatch: The current version (ETag value) of the function that you are testing,
    ///   - name: The name of the function that you are testing.
    ///   - stage: The stage of the function that you are testing, either DEVELOPMENT or
    ///   - logger: Logger use during operation
    @inlinable
    public func testFunction(
        eventObject: AWSBase64Data,
        ifMatch: String,
        name: String,
        stage: FunctionStage? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> TestFunctionResult {
        let input = TestFunctionRequest(
            eventObject: eventObject, 
            ifMatch: ifMatch, 
            name: name, 
            stage: stage
        )
        return try await self.testFunction(input, logger: logger)
    }

    /// Remove tags from a CloudFront resource. For more information, see Tagging a distribution in the Amazon CloudFront Developer Guide.
    @Sendable
    @inlinable
    public func untagResource(_ input: UntagResourceRequest, logger: Logger = AWSClient.loggingDisabled) async throws {
        try await self.client.execute(
            operation: "UntagResource", 
            path: "/2020-05-31/tagging?Operation=Untag", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Remove tags from a CloudFront resource. For more information, see Tagging a distribution in the Amazon CloudFront Developer Guide.
    ///
    /// Parameters:
    ///   - resource: An ARN of a CloudFront resource.
    ///   - tagKeys: A complex type that contains zero or more Tag key elements.
    ///   - logger: Logger use during operation
    @inlinable
    public func untagResource(
        resource: String,
        tagKeys: TagKeys,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws {
        let input = UntagResourceRequest(
            resource: resource, 
            tagKeys: tagKeys
        )
        return try await self.untagResource(input, logger: logger)
    }

    /// Updates a cache policy configuration. When you update a cache policy configuration, all the fields are updated with the
    /// 			values provided in the request. You cannot update some fields independent of others. To
    /// 			update a cache policy configuration:   Use GetCachePolicyConfig to get the current configuration.   Locally modify the fields in the cache policy configuration that you want to
    /// 					update.   Call UpdateCachePolicy by providing the entire cache policy
    /// 					configuration, including the fields that you modified and those that you
    /// 					didn't.
    @Sendable
    @inlinable
    public func updateCachePolicy(_ input: UpdateCachePolicyRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> UpdateCachePolicyResult {
        try await self.client.execute(
            operation: "UpdateCachePolicy", 
            path: "/2020-05-31/cache-policy/{Id}", 
            httpMethod: .PUT, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Updates a cache policy configuration. When you update a cache policy configuration, all the fields are updated with the
    /// 			values provided in the request. You cannot update some fields independent of others. To
    /// 			update a cache policy configuration:   Use GetCachePolicyConfig to get the current configuration.   Locally modify the fields in the cache policy configuration that you want to
    /// 					update.   Call UpdateCachePolicy by providing the entire cache policy
    /// 					configuration, including the fields that you modified and those that you
    /// 					didn't.
    ///
    /// Parameters:
    ///   - cachePolicyConfig: A cache policy configuration.
    ///   - id: The unique identifier for the cache policy that you are updating. The identifier is
    ///   - ifMatch: The version of the cache policy that you are updating. The version is returned in the
    ///   - logger: Logger use during operation
    @inlinable
    public func updateCachePolicy(
        cachePolicyConfig: CachePolicyConfig,
        id: String,
        ifMatch: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> UpdateCachePolicyResult {
        let input = UpdateCachePolicyRequest(
            cachePolicyConfig: cachePolicyConfig, 
            id: id, 
            ifMatch: ifMatch
        )
        return try await self.updateCachePolicy(input, logger: logger)
    }

    /// Update an origin access identity.
    @Sendable
    @inlinable
    public func updateCloudFrontOriginAccessIdentity(_ input: UpdateCloudFrontOriginAccessIdentityRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> UpdateCloudFrontOriginAccessIdentityResult {
        try await self.client.execute(
            operation: "UpdateCloudFrontOriginAccessIdentity", 
            path: "/2020-05-31/origin-access-identity/cloudfront/{Id}/config", 
            httpMethod: .PUT, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Update an origin access identity.
    ///
    /// Parameters:
    ///   - cloudFrontOriginAccessIdentityConfig: The identity's configuration information.
    ///   - id: The identity's id.
    ///   - ifMatch: The value of the ETag header that you received when retrieving the
    ///   - logger: Logger use during operation
    @inlinable
    public func updateCloudFrontOriginAccessIdentity(
        cloudFrontOriginAccessIdentityConfig: CloudFrontOriginAccessIdentityConfig,
        id: String,
        ifMatch: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> UpdateCloudFrontOriginAccessIdentityResult {
        let input = UpdateCloudFrontOriginAccessIdentityRequest(
            cloudFrontOriginAccessIdentityConfig: cloudFrontOriginAccessIdentityConfig, 
            id: id, 
            ifMatch: ifMatch
        )
        return try await self.updateCloudFrontOriginAccessIdentity(input, logger: logger)
    }

    /// Updates a continuous deployment policy. You can update a continuous deployment policy
    /// 			to enable or disable it, to change the percentage of traffic that it sends to the
    /// 			staging distribution, or to change the staging distribution that it sends traffic
    /// 			to. When you update a continuous deployment policy configuration, all the fields are
    /// 			updated with the values that are provided in the request. You cannot update some fields
    /// 			independent of others. To update a continuous deployment policy configuration:   Use GetContinuousDeploymentPolicyConfig to get the current
    /// 					configuration.   Locally modify the fields in the continuous deployment policy configuration
    /// 					that you want to update.   Use UpdateContinuousDeploymentPolicy, providing the entire
    /// 					continuous deployment policy configuration, including the fields that you
    /// 					modified and those that you didn't.
    @Sendable
    @inlinable
    public func updateContinuousDeploymentPolicy(_ input: UpdateContinuousDeploymentPolicyRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> UpdateContinuousDeploymentPolicyResult {
        try await self.client.execute(
            operation: "UpdateContinuousDeploymentPolicy", 
            path: "/2020-05-31/continuous-deployment-policy/{Id}", 
            httpMethod: .PUT, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Updates a continuous deployment policy. You can update a continuous deployment policy
    /// 			to enable or disable it, to change the percentage of traffic that it sends to the
    /// 			staging distribution, or to change the staging distribution that it sends traffic
    /// 			to. When you update a continuous deployment policy configuration, all the fields are
    /// 			updated with the values that are provided in the request. You cannot update some fields
    /// 			independent of others. To update a continuous deployment policy configuration:   Use GetContinuousDeploymentPolicyConfig to get the current
    /// 					configuration.   Locally modify the fields in the continuous deployment policy configuration
    /// 					that you want to update.   Use UpdateContinuousDeploymentPolicy, providing the entire
    /// 					continuous deployment policy configuration, including the fields that you
    /// 					modified and those that you didn't.
    ///
    /// Parameters:
    ///   - continuousDeploymentPolicyConfig: The continuous deployment policy configuration.
    ///   - id: The identifier of the continuous deployment policy that you are updating.
    ///   - ifMatch: The current version (ETag value) of the continuous deployment policy that
    ///   - logger: Logger use during operation
    @inlinable
    public func updateContinuousDeploymentPolicy(
        continuousDeploymentPolicyConfig: ContinuousDeploymentPolicyConfig,
        id: String,
        ifMatch: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> UpdateContinuousDeploymentPolicyResult {
        let input = UpdateContinuousDeploymentPolicyRequest(
            continuousDeploymentPolicyConfig: continuousDeploymentPolicyConfig, 
            id: id, 
            ifMatch: ifMatch
        )
        return try await self.updateContinuousDeploymentPolicy(input, logger: logger)
    }

    /// Updates the configuration for a CloudFront distribution. The update process includes getting the current distribution configuration, updating
    /// 			it to make your changes, and then submitting an UpdateDistribution request
    /// 			to make the updates.  To update a web distribution using the CloudFront
    /// 			API    Use GetDistributionConfig to get the current configuration,
    /// 					including the version identifier (ETag).   Update the distribution configuration that was returned in the response. Note
    /// 					the following important requirements and restrictions:   You must copy the ETag field value from the response. (You'll use it for the IfMatch parameter in your request.) Then, remove the ETag
    /// 							field from the distribution configuration.   You can't change the value of CallerReference.     Submit an UpdateDistribution request, providing the updated distribution
    /// 					configuration. The new configuration replaces the existing configuration. The
    /// 					values that you specify in an UpdateDistribution request are not
    /// 					merged into your existing configuration. Make sure to include all fields: the
    /// 					ones that you modified and also the ones that you didn't.
    @Sendable
    @inlinable
    public func updateDistribution(_ input: UpdateDistributionRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> UpdateDistributionResult {
        try await self.client.execute(
            operation: "UpdateDistribution", 
            path: "/2020-05-31/distribution/{Id}/config", 
            httpMethod: .PUT, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Updates the configuration for a CloudFront distribution. The update process includes getting the current distribution configuration, updating
    /// 			it to make your changes, and then submitting an UpdateDistribution request
    /// 			to make the updates.  To update a web distribution using the CloudFront
    /// 			API    Use GetDistributionConfig to get the current configuration,
    /// 					including the version identifier (ETag).   Update the distribution configuration that was returned in the response. Note
    /// 					the following important requirements and restrictions:   You must copy the ETag field value from the response. (You'll use it for the IfMatch parameter in your request.) Then, remove the ETag
    /// 							field from the distribution configuration.   You can't change the value of CallerReference.     Submit an UpdateDistribution request, providing the updated distribution
    /// 					configuration. The new configuration replaces the existing configuration. The
    /// 					values that you specify in an UpdateDistribution request are not
    /// 					merged into your existing configuration. Make sure to include all fields: the
    /// 					ones that you modified and also the ones that you didn't.
    ///
    /// Parameters:
    ///   - distributionConfig: The distribution's configuration information.
    ///   - id: The distribution's id.
    ///   - ifMatch: The value of the ETag header that you received when retrieving the
    ///   - logger: Logger use during operation
    @inlinable
    public func updateDistribution(
        distributionConfig: DistributionConfig,
        id: String,
        ifMatch: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> UpdateDistributionResult {
        let input = UpdateDistributionRequest(
            distributionConfig: distributionConfig, 
            id: id, 
            ifMatch: ifMatch
        )
        return try await self.updateDistribution(input, logger: logger)
    }

    /// Copies the staging distribution's configuration to its corresponding primary
    /// 			distribution. The primary distribution retains its Aliases (also known as
    /// 			alternate domain names or CNAMEs) and ContinuousDeploymentPolicyId value,
    /// 			but otherwise its configuration is overwritten to match the staging distribution. You can use this operation in a continuous deployment workflow after you have tested
    /// 			configuration changes on the staging distribution. After using a continuous deployment
    /// 			policy to move a portion of your domain name's traffic to the staging distribution and
    /// 			verifying that it works as intended, you can use this operation to copy the staging
    /// 			distribution's configuration to the primary distribution. This action will disable the
    /// 			continuous deployment policy and move your domain's traffic back to the primary distribution. This API operation requires the following IAM permissions:    GetDistribution     UpdateDistribution
    @Sendable
    @inlinable
    public func updateDistributionWithStagingConfig(_ input: UpdateDistributionWithStagingConfigRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> UpdateDistributionWithStagingConfigResult {
        try await self.client.execute(
            operation: "UpdateDistributionWithStagingConfig", 
            path: "/2020-05-31/distribution/{Id}/promote-staging-config", 
            httpMethod: .PUT, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Copies the staging distribution's configuration to its corresponding primary
    /// 			distribution. The primary distribution retains its Aliases (also known as
    /// 			alternate domain names or CNAMEs) and ContinuousDeploymentPolicyId value,
    /// 			but otherwise its configuration is overwritten to match the staging distribution. You can use this operation in a continuous deployment workflow after you have tested
    /// 			configuration changes on the staging distribution. After using a continuous deployment
    /// 			policy to move a portion of your domain name's traffic to the staging distribution and
    /// 			verifying that it works as intended, you can use this operation to copy the staging
    /// 			distribution's configuration to the primary distribution. This action will disable the
    /// 			continuous deployment policy and move your domain's traffic back to the primary distribution. This API operation requires the following IAM permissions:    GetDistribution     UpdateDistribution
    ///
    /// Parameters:
    ///   - id: The identifier of the primary distribution to which you are copying a staging distribution's
    ///   - ifMatch: The current versions (ETag values) of both primary and staging distributions.
    ///   - stagingDistributionId: The identifier of the staging distribution whose configuration you are copying to the primary distribution.
    ///   - logger: Logger use during operation
    @inlinable
    public func updateDistributionWithStagingConfig(
        id: String,
        ifMatch: String? = nil,
        stagingDistributionId: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> UpdateDistributionWithStagingConfigResult {
        let input = UpdateDistributionWithStagingConfigRequest(
            id: id, 
            ifMatch: ifMatch, 
            stagingDistributionId: stagingDistributionId
        )
        return try await self.updateDistributionWithStagingConfig(input, logger: logger)
    }

    /// Update a field-level encryption configuration.
    @Sendable
    @inlinable
    public func updateFieldLevelEncryptionConfig(_ input: UpdateFieldLevelEncryptionConfigRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> UpdateFieldLevelEncryptionConfigResult {
        try await self.client.execute(
            operation: "UpdateFieldLevelEncryptionConfig", 
            path: "/2020-05-31/field-level-encryption/{Id}/config", 
            httpMethod: .PUT, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Update a field-level encryption configuration.
    ///
    /// Parameters:
    ///   - fieldLevelEncryptionConfig: Request to update a field-level encryption configuration.
    ///   - id: The ID of the configuration you want to update.
    ///   - ifMatch: The value of the ETag header that you received when retrieving the
    ///   - logger: Logger use during operation
    @inlinable
    public func updateFieldLevelEncryptionConfig(
        fieldLevelEncryptionConfig: FieldLevelEncryptionConfig,
        id: String,
        ifMatch: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> UpdateFieldLevelEncryptionConfigResult {
        let input = UpdateFieldLevelEncryptionConfigRequest(
            fieldLevelEncryptionConfig: fieldLevelEncryptionConfig, 
            id: id, 
            ifMatch: ifMatch
        )
        return try await self.updateFieldLevelEncryptionConfig(input, logger: logger)
    }

    /// Update a field-level encryption profile.
    @Sendable
    @inlinable
    public func updateFieldLevelEncryptionProfile(_ input: UpdateFieldLevelEncryptionProfileRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> UpdateFieldLevelEncryptionProfileResult {
        try await self.client.execute(
            operation: "UpdateFieldLevelEncryptionProfile", 
            path: "/2020-05-31/field-level-encryption-profile/{Id}/config", 
            httpMethod: .PUT, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Update a field-level encryption profile.
    ///
    /// Parameters:
    ///   - fieldLevelEncryptionProfileConfig: Request to update a field-level encryption profile.
    ///   - id: The ID of the field-level encryption profile request.
    ///   - ifMatch: The value of the ETag header that you received when retrieving the
    ///   - logger: Logger use during operation
    @inlinable
    public func updateFieldLevelEncryptionProfile(
        fieldLevelEncryptionProfileConfig: FieldLevelEncryptionProfileConfig,
        id: String,
        ifMatch: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> UpdateFieldLevelEncryptionProfileResult {
        let input = UpdateFieldLevelEncryptionProfileRequest(
            fieldLevelEncryptionProfileConfig: fieldLevelEncryptionProfileConfig, 
            id: id, 
            ifMatch: ifMatch
        )
        return try await self.updateFieldLevelEncryptionProfile(input, logger: logger)
    }

    /// Updates a CloudFront function. You can update a function's code or the comment that describes the function. You
    /// 			cannot update a function's name. To update a function, you provide the function's name and version (ETag
    /// 			value) along with the updated function code. To get the name and version, you can use
    /// 				ListFunctions and DescribeFunction.
    @Sendable
    @inlinable
    public func updateFunction(_ input: UpdateFunctionRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> UpdateFunctionResult {
        try await self.client.execute(
            operation: "UpdateFunction", 
            path: "/2020-05-31/function/{Name}", 
            httpMethod: .PUT, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Updates a CloudFront function. You can update a function's code or the comment that describes the function. You
    /// 			cannot update a function's name. To update a function, you provide the function's name and version (ETag
    /// 			value) along with the updated function code. To get the name and version, you can use
    /// 				ListFunctions and DescribeFunction.
    ///
    /// Parameters:
    ///   - functionCode: The function code. For more information about writing a CloudFront function, see Writing
    ///   - functionConfig: Configuration information about the function.
    ///   - ifMatch: The current version (ETag value) of the function that you are updating,
    ///   - name: The name of the function that you are updating.
    ///   - logger: Logger use during operation
    @inlinable
    public func updateFunction(
        functionCode: AWSBase64Data,
        functionConfig: FunctionConfig,
        ifMatch: String,
        name: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> UpdateFunctionResult {
        let input = UpdateFunctionRequest(
            functionCode: functionCode, 
            functionConfig: functionConfig, 
            ifMatch: ifMatch, 
            name: name
        )
        return try await self.updateFunction(input, logger: logger)
    }

    /// Updates a key group. When you update a key group, all the fields are updated with the values provided in
    /// 			the request. You cannot update some fields independent of others. To update a key
    /// 			group:   Get the current key group with GetKeyGroup or
    /// 						GetKeyGroupConfig.   Locally modify the fields in the key group that you want to update. For
    /// 					example, add or remove public key IDs.   Call UpdateKeyGroup with the entire key group object, including
    /// 					the fields that you modified and those that you didn't.
    @Sendable
    @inlinable
    public func updateKeyGroup(_ input: UpdateKeyGroupRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> UpdateKeyGroupResult {
        try await self.client.execute(
            operation: "UpdateKeyGroup", 
            path: "/2020-05-31/key-group/{Id}", 
            httpMethod: .PUT, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Updates a key group. When you update a key group, all the fields are updated with the values provided in
    /// 			the request. You cannot update some fields independent of others. To update a key
    /// 			group:   Get the current key group with GetKeyGroup or
    /// 						GetKeyGroupConfig.   Locally modify the fields in the key group that you want to update. For
    /// 					example, add or remove public key IDs.   Call UpdateKeyGroup with the entire key group object, including
    /// 					the fields that you modified and those that you didn't.
    ///
    /// Parameters:
    ///   - id: The identifier of the key group that you are updating.
    ///   - ifMatch: The version of the key group that you are updating. The version is the key group's
    ///   - keyGroupConfig: The key group configuration.
    ///   - logger: Logger use during operation
    @inlinable
    public func updateKeyGroup(
        id: String,
        ifMatch: String? = nil,
        keyGroupConfig: KeyGroupConfig,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> UpdateKeyGroupResult {
        let input = UpdateKeyGroupRequest(
            id: id, 
            ifMatch: ifMatch, 
            keyGroupConfig: keyGroupConfig
        )
        return try await self.updateKeyGroup(input, logger: logger)
    }

    /// Specifies the key value store to update.
    @Sendable
    @inlinable
    public func updateKeyValueStore(_ input: UpdateKeyValueStoreRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> UpdateKeyValueStoreResult {
        try await self.client.execute(
            operation: "UpdateKeyValueStore", 
            path: "/2020-05-31/key-value-store/{Name}", 
            httpMethod: .PUT, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Specifies the key value store to update.
    ///
    /// Parameters:
    ///   - comment: The comment of the key value store to update.
    ///   - ifMatch: The key value store to update, if a match occurs.
    ///   - name: The name of the key value store to update.
    ///   - logger: Logger use during operation
    @inlinable
    public func updateKeyValueStore(
        comment: String,
        ifMatch: String,
        name: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> UpdateKeyValueStoreResult {
        let input = UpdateKeyValueStoreRequest(
            comment: comment, 
            ifMatch: ifMatch, 
            name: name
        )
        return try await self.updateKeyValueStore(input, logger: logger)
    }

    /// Updates a CloudFront origin access control.
    @Sendable
    @inlinable
    public func updateOriginAccessControl(_ input: UpdateOriginAccessControlRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> UpdateOriginAccessControlResult {
        try await self.client.execute(
            operation: "UpdateOriginAccessControl", 
            path: "/2020-05-31/origin-access-control/{Id}/config", 
            httpMethod: .PUT, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Updates a CloudFront origin access control.
    ///
    /// Parameters:
    ///   - id: The unique identifier of the origin access control that you are updating.
    ///   - ifMatch: The current version (ETag value) of the origin access control that you
    ///   - originAccessControlConfig: An origin access control.
    ///   - logger: Logger use during operation
    @inlinable
    public func updateOriginAccessControl(
        id: String,
        ifMatch: String? = nil,
        originAccessControlConfig: OriginAccessControlConfig,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> UpdateOriginAccessControlResult {
        let input = UpdateOriginAccessControlRequest(
            id: id, 
            ifMatch: ifMatch, 
            originAccessControlConfig: originAccessControlConfig
        )
        return try await self.updateOriginAccessControl(input, logger: logger)
    }

    /// Updates an origin request policy configuration. When you update an origin request policy configuration, all the fields are updated
    /// 			with the values provided in the request. You cannot update some fields independent of
    /// 			others. To update an origin request policy configuration:   Use GetOriginRequestPolicyConfig to get the current
    /// 					configuration.   Locally modify the fields in the origin request policy configuration that you
    /// 					want to update.   Call UpdateOriginRequestPolicy by providing the entire origin
    /// 					request policy configuration, including the fields that you modified and those
    /// 					that you didn't.
    @Sendable
    @inlinable
    public func updateOriginRequestPolicy(_ input: UpdateOriginRequestPolicyRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> UpdateOriginRequestPolicyResult {
        try await self.client.execute(
            operation: "UpdateOriginRequestPolicy", 
            path: "/2020-05-31/origin-request-policy/{Id}", 
            httpMethod: .PUT, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Updates an origin request policy configuration. When you update an origin request policy configuration, all the fields are updated
    /// 			with the values provided in the request. You cannot update some fields independent of
    /// 			others. To update an origin request policy configuration:   Use GetOriginRequestPolicyConfig to get the current
    /// 					configuration.   Locally modify the fields in the origin request policy configuration that you
    /// 					want to update.   Call UpdateOriginRequestPolicy by providing the entire origin
    /// 					request policy configuration, including the fields that you modified and those
    /// 					that you didn't.
    ///
    /// Parameters:
    ///   - id: The unique identifier for the origin request policy that you are updating. The
    ///   - ifMatch: The version of the origin request policy that you are updating. The version is
    ///   - originRequestPolicyConfig: An origin request policy configuration.
    ///   - logger: Logger use during operation
    @inlinable
    public func updateOriginRequestPolicy(
        id: String,
        ifMatch: String? = nil,
        originRequestPolicyConfig: OriginRequestPolicyConfig,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> UpdateOriginRequestPolicyResult {
        let input = UpdateOriginRequestPolicyRequest(
            id: id, 
            ifMatch: ifMatch, 
            originRequestPolicyConfig: originRequestPolicyConfig
        )
        return try await self.updateOriginRequestPolicy(input, logger: logger)
    }

    /// Update public key information. Note that the only value you can change is the
    /// 			comment.
    @Sendable
    @inlinable
    public func updatePublicKey(_ input: UpdatePublicKeyRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> UpdatePublicKeyResult {
        try await self.client.execute(
            operation: "UpdatePublicKey", 
            path: "/2020-05-31/public-key/{Id}/config", 
            httpMethod: .PUT, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Update public key information. Note that the only value you can change is the
    /// 			comment.
    ///
    /// Parameters:
    ///   - id: The identifier of the public key that you are updating.
    ///   - ifMatch: The value of the ETag header that you received when retrieving the public
    ///   - publicKeyConfig: A public key configuration.
    ///   - logger: Logger use during operation
    @inlinable
    public func updatePublicKey(
        id: String,
        ifMatch: String? = nil,
        publicKeyConfig: PublicKeyConfig,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> UpdatePublicKeyResult {
        let input = UpdatePublicKeyRequest(
            id: id, 
            ifMatch: ifMatch, 
            publicKeyConfig: publicKeyConfig
        )
        return try await self.updatePublicKey(input, logger: logger)
    }

    /// Updates a real-time log configuration. When you update a real-time log configuration, all the parameters are updated with the
    /// 			values provided in the request. You cannot update some parameters independent of others.
    /// 			To update a real-time log configuration:   Call GetRealtimeLogConfig to get the current real-time log
    /// 					configuration.   Locally modify the parameters in the real-time log configuration that you want
    /// 					to update.   Call this API (UpdateRealtimeLogConfig) by providing the entire
    /// 					real-time log configuration, including the parameters that you modified and
    /// 					those that you didn't.   You cannot update a real-time log configuration's Name or
    /// 				ARN.
    @Sendable
    @inlinable
    public func updateRealtimeLogConfig(_ input: UpdateRealtimeLogConfigRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> UpdateRealtimeLogConfigResult {
        try await self.client.execute(
            operation: "UpdateRealtimeLogConfig", 
            path: "/2020-05-31/realtime-log-config", 
            httpMethod: .PUT, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Updates a real-time log configuration. When you update a real-time log configuration, all the parameters are updated with the
    /// 			values provided in the request. You cannot update some parameters independent of others.
    /// 			To update a real-time log configuration:   Call GetRealtimeLogConfig to get the current real-time log
    /// 					configuration.   Locally modify the parameters in the real-time log configuration that you want
    /// 					to update.   Call this API (UpdateRealtimeLogConfig) by providing the entire
    /// 					real-time log configuration, including the parameters that you modified and
    /// 					those that you didn't.   You cannot update a real-time log configuration's Name or
    /// 				ARN.
    ///
    /// Parameters:
    ///   - arn: The Amazon Resource Name (ARN) for this real-time log configuration.
    ///   - endPoints: Contains information about the Amazon Kinesis data stream where you are sending real-time
    ///   - fields: A list of fields to include in each real-time log record. For more information about fields, see Real-time log configuration fields in the
    ///   - name: The name for this real-time log configuration.
    ///   - samplingRate: The sampling rate for this real-time log configuration. The sampling rate determines
    ///   - logger: Logger use during operation
    @inlinable
    public func updateRealtimeLogConfig(
        arn: String? = nil,
        endPoints: [EndPoint]? = nil,
        fields: [String]? = nil,
        name: String? = nil,
        samplingRate: Int64? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> UpdateRealtimeLogConfigResult {
        let input = UpdateRealtimeLogConfigRequest(
            arn: arn, 
            endPoints: endPoints, 
            fields: fields, 
            name: name, 
            samplingRate: samplingRate
        )
        return try await self.updateRealtimeLogConfig(input, logger: logger)
    }

    /// Updates a response headers policy. When you update a response headers policy, the entire policy is replaced. You cannot
    /// 			update some policy fields independent of others. To update a response headers policy
    /// 			configuration:   Use GetResponseHeadersPolicyConfig to get the current policy's
    /// 					configuration.   Modify the fields in the response headers policy configuration that you want
    /// 					to update.   Call UpdateResponseHeadersPolicy, providing the entire response
    /// 					headers policy configuration, including the fields that you modified and those
    /// 					that you didn't.
    @Sendable
    @inlinable
    public func updateResponseHeadersPolicy(_ input: UpdateResponseHeadersPolicyRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> UpdateResponseHeadersPolicyResult {
        try await self.client.execute(
            operation: "UpdateResponseHeadersPolicy", 
            path: "/2020-05-31/response-headers-policy/{Id}", 
            httpMethod: .PUT, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Updates a response headers policy. When you update a response headers policy, the entire policy is replaced. You cannot
    /// 			update some policy fields independent of others. To update a response headers policy
    /// 			configuration:   Use GetResponseHeadersPolicyConfig to get the current policy's
    /// 					configuration.   Modify the fields in the response headers policy configuration that you want
    /// 					to update.   Call UpdateResponseHeadersPolicy, providing the entire response
    /// 					headers policy configuration, including the fields that you modified and those
    /// 					that you didn't.
    ///
    /// Parameters:
    ///   - id: The identifier for the response headers policy that you are updating.
    ///   - ifMatch: The version of the response headers policy that you are updating. The version is returned in the cache policy's ETag field in the response
    ///   - responseHeadersPolicyConfig: A response headers policy configuration.
    ///   - logger: Logger use during operation
    @inlinable
    public func updateResponseHeadersPolicy(
        id: String,
        ifMatch: String? = nil,
        responseHeadersPolicyConfig: ResponseHeadersPolicyConfig,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> UpdateResponseHeadersPolicyResult {
        let input = UpdateResponseHeadersPolicyRequest(
            id: id, 
            ifMatch: ifMatch, 
            responseHeadersPolicyConfig: responseHeadersPolicyConfig
        )
        return try await self.updateResponseHeadersPolicy(input, logger: logger)
    }

    /// Update a streaming distribution.
    @Sendable
    @inlinable
    public func updateStreamingDistribution(_ input: UpdateStreamingDistributionRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> UpdateStreamingDistributionResult {
        try await self.client.execute(
            operation: "UpdateStreamingDistribution", 
            path: "/2020-05-31/streaming-distribution/{Id}/config", 
            httpMethod: .PUT, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Update a streaming distribution.
    ///
    /// Parameters:
    ///   - id: The streaming distribution's id.
    ///   - ifMatch: The value of the ETag header that you received when retrieving the
    ///   - streamingDistributionConfig: The streaming distribution's configuration information.
    ///   - logger: Logger use during operation
    @inlinable
    public func updateStreamingDistribution(
        id: String,
        ifMatch: String? = nil,
        streamingDistributionConfig: StreamingDistributionConfig,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> UpdateStreamingDistributionResult {
        let input = UpdateStreamingDistributionRequest(
            id: id, 
            ifMatch: ifMatch, 
            streamingDistributionConfig: streamingDistributionConfig
        )
        return try await self.updateStreamingDistribution(input, logger: logger)
    }

    /// Update an Amazon CloudFront VPC origin in your account.
    @Sendable
    @inlinable
    public func updateVpcOrigin(_ input: UpdateVpcOriginRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> UpdateVpcOriginResult {
        try await self.client.execute(
            operation: "UpdateVpcOrigin", 
            path: "/2020-05-31/vpc-origin/{Id}", 
            httpMethod: .PUT, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Update an Amazon CloudFront VPC origin in your account.
    ///
    /// Parameters:
    ///   - id: The VPC origin ID.
    ///   - ifMatch: The VPC origin to update, if a match occurs.
    ///   - vpcOriginEndpointConfig: The VPC origin endpoint configuration.
    ///   - logger: Logger use during operation
    @inlinable
    public func updateVpcOrigin(
        id: String,
        ifMatch: String,
        vpcOriginEndpointConfig: VpcOriginEndpointConfig,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> UpdateVpcOriginResult {
        let input = UpdateVpcOriginRequest(
            id: id, 
            ifMatch: ifMatch, 
            vpcOriginEndpointConfig: vpcOriginEndpointConfig
        )
        return try await self.updateVpcOrigin(input, logger: logger)
    }
}

extension CloudFront {
    /// Initializer required by `AWSService.with(middlewares:timeout:byteBufferAllocator:options)`. You are not able to use this initializer directly as there are not public
    /// initializers for `AWSServiceConfig.Patch`. Please use `AWSService.with(middlewares:timeout:byteBufferAllocator:options)` instead.
    public init(from: CloudFront, patch: AWSServiceConfig.Patch) {
        self.client = from.client
        self.config = from.config.with(patch: patch)
    }
}

// MARK: Paginators

@available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
extension CloudFront {
    /// Return PaginatorSequence for operation ``listCloudFrontOriginAccessIdentities(_:logger:)``.
    ///
    /// - Parameters:
    ///   - input: Input for operation
    ///   - logger: Logger used for logging
    @inlinable
    public func listCloudFrontOriginAccessIdentitiesPaginator(
        _ input: ListCloudFrontOriginAccessIdentitiesRequest,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<ListCloudFrontOriginAccessIdentitiesRequest, ListCloudFrontOriginAccessIdentitiesResult> {
        return .init(
            input: input,
            command: self.listCloudFrontOriginAccessIdentities,
            inputKey: \ListCloudFrontOriginAccessIdentitiesRequest.marker,
            outputKey: \ListCloudFrontOriginAccessIdentitiesResult.cloudFrontOriginAccessIdentityList.nextMarker,
            logger: logger
        )
    }
    /// Return PaginatorSequence for operation ``listCloudFrontOriginAccessIdentities(_:logger:)``.
    ///
    /// - Parameters:
    ///   - maxItems: The maximum number of origin access identities you want in the response body.
    ///   - logger: Logger used for logging
    @inlinable
    public func listCloudFrontOriginAccessIdentitiesPaginator(
        maxItems: Int? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) -> AWSClient.PaginatorSequence<ListCloudFrontOriginAccessIdentitiesRequest, ListCloudFrontOriginAccessIdentitiesResult> {
        let input = ListCloudFrontOriginAccessIdentitiesRequest(
            maxItems: maxItems
        )
        return self.listCloudFrontOriginAccessIdentitiesPaginator(input, logger: logger)
    }

    /// Return PaginatorSequence for operation ``listDistributions(_:logger:)``.
    ///
    /// - Parameters:
    ///   - input: Input for operation
    ///   - logger: Logger used for logging
    @inlinable
    public func listDistributionsPaginator(
        _ input: ListDistributionsRequest,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<ListDistributionsRequest, ListDistributionsResult> {
        return .init(
            input: input,
            command: self.listDistributions,
            inputKey: \ListDistributionsRequest.marker,
            outputKey: \ListDistributionsResult.distributionList.nextMarker,
            logger: logger
        )
    }
    /// Return PaginatorSequence for operation ``listDistributions(_:logger:)``.
    ///
    /// - Parameters:
    ///   - maxItems: The maximum number of distributions you want in the response body.
    ///   - logger: Logger used for logging
    @inlinable
    public func listDistributionsPaginator(
        maxItems: Int? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) -> AWSClient.PaginatorSequence<ListDistributionsRequest, ListDistributionsResult> {
        let input = ListDistributionsRequest(
            maxItems: maxItems
        )
        return self.listDistributionsPaginator(input, logger: logger)
    }

    /// Return PaginatorSequence for operation ``listInvalidations(_:logger:)``.
    ///
    /// - Parameters:
    ///   - input: Input for operation
    ///   - logger: Logger used for logging
    @inlinable
    public func listInvalidationsPaginator(
        _ input: ListInvalidationsRequest,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<ListInvalidationsRequest, ListInvalidationsResult> {
        return .init(
            input: input,
            command: self.listInvalidations,
            inputKey: \ListInvalidationsRequest.marker,
            outputKey: \ListInvalidationsResult.invalidationList.nextMarker,
            logger: logger
        )
    }
    /// Return PaginatorSequence for operation ``listInvalidations(_:logger:)``.
    ///
    /// - Parameters:
    ///   - distributionId: The distribution's ID.
    ///   - maxItems: The maximum number of invalidation batches that you want in the response body.
    ///   - logger: Logger used for logging
    @inlinable
    public func listInvalidationsPaginator(
        distributionId: String,
        maxItems: Int? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) -> AWSClient.PaginatorSequence<ListInvalidationsRequest, ListInvalidationsResult> {
        let input = ListInvalidationsRequest(
            distributionId: distributionId, 
            maxItems: maxItems
        )
        return self.listInvalidationsPaginator(input, logger: logger)
    }

    /// Return PaginatorSequence for operation ``listKeyValueStores(_:logger:)``.
    ///
    /// - Parameters:
    ///   - input: Input for operation
    ///   - logger: Logger used for logging
    @inlinable
    public func listKeyValueStoresPaginator(
        _ input: ListKeyValueStoresRequest,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<ListKeyValueStoresRequest, ListKeyValueStoresResult> {
        return .init(
            input: input,
            command: self.listKeyValueStores,
            inputKey: \ListKeyValueStoresRequest.marker,
            outputKey: \ListKeyValueStoresResult.keyValueStoreList.nextMarker,
            logger: logger
        )
    }
    /// Return PaginatorSequence for operation ``listKeyValueStores(_:logger:)``.
    ///
    /// - Parameters:
    ///   - maxItems: The maximum number of items in the key value stores list.
    ///   - status: The status of the request for the key value stores list.
    ///   - logger: Logger used for logging
    @inlinable
    public func listKeyValueStoresPaginator(
        maxItems: Int? = nil,
        status: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) -> AWSClient.PaginatorSequence<ListKeyValueStoresRequest, ListKeyValueStoresResult> {
        let input = ListKeyValueStoresRequest(
            maxItems: maxItems, 
            status: status
        )
        return self.listKeyValueStoresPaginator(input, logger: logger)
    }

    /// Return PaginatorSequence for operation ``listPublicKeys(_:logger:)``.
    ///
    /// - Parameters:
    ///   - input: Input for operation
    ///   - logger: Logger used for logging
    @inlinable
    public func listPublicKeysPaginator(
        _ input: ListPublicKeysRequest,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<ListPublicKeysRequest, ListPublicKeysResult> {
        return .init(
            input: input,
            command: self.listPublicKeys,
            inputKey: \ListPublicKeysRequest.marker,
            outputKey: \ListPublicKeysResult.publicKeyList.nextMarker,
            logger: logger
        )
    }
    /// Return PaginatorSequence for operation ``listPublicKeys(_:logger:)``.
    ///
    /// - Parameters:
    ///   - maxItems: The maximum number of public keys you want in the response body.
    ///   - logger: Logger used for logging
    @inlinable
    public func listPublicKeysPaginator(
        maxItems: Int? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) -> AWSClient.PaginatorSequence<ListPublicKeysRequest, ListPublicKeysResult> {
        let input = ListPublicKeysRequest(
            maxItems: maxItems
        )
        return self.listPublicKeysPaginator(input, logger: logger)
    }

    /// Return PaginatorSequence for operation ``listStreamingDistributions(_:logger:)``.
    ///
    /// - Parameters:
    ///   - input: Input for operation
    ///   - logger: Logger used for logging
    @inlinable
    public func listStreamingDistributionsPaginator(
        _ input: ListStreamingDistributionsRequest,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<ListStreamingDistributionsRequest, ListStreamingDistributionsResult> {
        return .init(
            input: input,
            command: self.listStreamingDistributions,
            inputKey: \ListStreamingDistributionsRequest.marker,
            outputKey: \ListStreamingDistributionsResult.streamingDistributionList.nextMarker,
            logger: logger
        )
    }
    /// Return PaginatorSequence for operation ``listStreamingDistributions(_:logger:)``.
    ///
    /// - Parameters:
    ///   - maxItems: The value that you provided for the MaxItems request parameter.
    ///   - logger: Logger used for logging
    @inlinable
    public func listStreamingDistributionsPaginator(
        maxItems: Int? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) -> AWSClient.PaginatorSequence<ListStreamingDistributionsRequest, ListStreamingDistributionsResult> {
        let input = ListStreamingDistributionsRequest(
            maxItems: maxItems
        )
        return self.listStreamingDistributionsPaginator(input, logger: logger)
    }
}

extension CloudFront.ListCloudFrontOriginAccessIdentitiesRequest: AWSPaginateToken {
    @inlinable
    public func usingPaginationToken(_ token: String) -> CloudFront.ListCloudFrontOriginAccessIdentitiesRequest {
        return .init(
            marker: token,
            maxItems: self.maxItems
        )
    }
}

extension CloudFront.ListDistributionsRequest: AWSPaginateToken {
    @inlinable
    public func usingPaginationToken(_ token: String) -> CloudFront.ListDistributionsRequest {
        return .init(
            marker: token,
            maxItems: self.maxItems
        )
    }
}

extension CloudFront.ListInvalidationsRequest: AWSPaginateToken {
    @inlinable
    public func usingPaginationToken(_ token: String) -> CloudFront.ListInvalidationsRequest {
        return .init(
            distributionId: self.distributionId,
            marker: token,
            maxItems: self.maxItems
        )
    }
}

extension CloudFront.ListKeyValueStoresRequest: AWSPaginateToken {
    @inlinable
    public func usingPaginationToken(_ token: String) -> CloudFront.ListKeyValueStoresRequest {
        return .init(
            marker: token,
            maxItems: self.maxItems,
            status: self.status
        )
    }
}

extension CloudFront.ListPublicKeysRequest: AWSPaginateToken {
    @inlinable
    public func usingPaginationToken(_ token: String) -> CloudFront.ListPublicKeysRequest {
        return .init(
            marker: token,
            maxItems: self.maxItems
        )
    }
}

extension CloudFront.ListStreamingDistributionsRequest: AWSPaginateToken {
    @inlinable
    public func usingPaginationToken(_ token: String) -> CloudFront.ListStreamingDistributionsRequest {
        return .init(
            marker: token,
            maxItems: self.maxItems
        )
    }
}

// MARK: Waiters

@available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
extension CloudFront {
    /// Waiter for operation ``getDistribution(_:logger:)``.
    ///
    /// - Parameters:
    ///   - input: Input for operation
    ///   - logger: Logger used for logging
    @inlinable
    public func waitUntilDistributionDeployed(
        _ input: GetDistributionRequest,
        maxWaitTime: TimeAmount? = nil,
        logger: Logger = AWSClient.loggingDisabled
    ) async throws {
        let waiter = AWSClient.Waiter<GetDistributionRequest, _>(
            acceptors: [
                .init(state: .success, matcher: try! JMESPathMatcher("distribution.status", expected: "Deployed")),
            ],
            minDelayTime: .seconds(60),
            maxDelayTime: .seconds(2100),
            command: self.getDistribution
        )
        return try await self.client.waitUntil(input, waiter: waiter, maxWaitTime: maxWaitTime, logger: logger)
    }
    /// Waiter for operation ``getDistribution(_:logger:)``.
    ///
    /// - Parameters:
    ///   - id: The distribution's ID. If the ID is empty, an empty distribution configuration is
    ///   - logger: Logger used for logging
    @inlinable
    public func waitUntilDistributionDeployed(
        id: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws {
        let input = GetDistributionRequest(
            id: id
        )
        try await self.waitUntilDistributionDeployed(input, logger: logger)
    }

    /// Waiter for operation ``getInvalidation(_:logger:)``.
    ///
    /// - Parameters:
    ///   - input: Input for operation
    ///   - logger: Logger used for logging
    @inlinable
    public func waitUntilInvalidationCompleted(
        _ input: GetInvalidationRequest,
        maxWaitTime: TimeAmount? = nil,
        logger: Logger = AWSClient.loggingDisabled
    ) async throws {
        let waiter = AWSClient.Waiter<GetInvalidationRequest, _>(
            acceptors: [
                .init(state: .success, matcher: try! JMESPathMatcher("invalidation.status", expected: "Completed")),
            ],
            minDelayTime: .seconds(20),
            maxDelayTime: .seconds(600),
            command: self.getInvalidation
        )
        return try await self.client.waitUntil(input, waiter: waiter, maxWaitTime: maxWaitTime, logger: logger)
    }
    /// Waiter for operation ``getInvalidation(_:logger:)``.
    ///
    /// - Parameters:
    ///   - distributionId: The distribution's ID.
    ///   - id: The identifier for the invalidation request, for example,
    ///   - logger: Logger used for logging
    @inlinable
    public func waitUntilInvalidationCompleted(
        distributionId: String,
        id: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws {
        let input = GetInvalidationRequest(
            distributionId: distributionId, 
            id: id
        )
        try await self.waitUntilInvalidationCompleted(input, logger: logger)
    }

    /// Waiter for operation ``getStreamingDistribution(_:logger:)``.
    ///
    /// - Parameters:
    ///   - input: Input for operation
    ///   - logger: Logger used for logging
    @inlinable
    public func waitUntilStreamingDistributionDeployed(
        _ input: GetStreamingDistributionRequest,
        maxWaitTime: TimeAmount? = nil,
        logger: Logger = AWSClient.loggingDisabled
    ) async throws {
        let waiter = AWSClient.Waiter<GetStreamingDistributionRequest, _>(
            acceptors: [
                .init(state: .success, matcher: try! JMESPathMatcher("streamingDistribution.status", expected: "Deployed")),
            ],
            minDelayTime: .seconds(60),
            maxDelayTime: .seconds(1500),
            command: self.getStreamingDistribution
        )
        return try await self.client.waitUntil(input, waiter: waiter, maxWaitTime: maxWaitTime, logger: logger)
    }
    /// Waiter for operation ``getStreamingDistribution(_:logger:)``.
    ///
    /// - Parameters:
    ///   - id: The streaming distribution's ID.
    ///   - logger: Logger used for logging
    @inlinable
    public func waitUntilStreamingDistributionDeployed(
        id: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws {
        let input = GetStreamingDistributionRequest(
            id: id
        )
        try await self.waitUntilStreamingDistributionDeployed(input, logger: logger)
    }
}
