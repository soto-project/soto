//===----------------------------------------------------------------------===//
//
// This source file is part of the Soto for AWS open source project
//
// Copyright (c) 2017-2023 the Soto project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
// See CONTRIBUTORS.txt for the list of Soto project authors
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by https://github.com/soto-project/soto-codegenerator.
// DO NOT EDIT.

@_exported import SotoCore

/// Service object for interacting with AWS CloudFront service.
///
/// Amazon CloudFront This is the Amazon CloudFront API Reference. This guide is for developers
/// 			who need detailed information about CloudFront API actions, data types, and errors. For
/// 			detailed information about CloudFront features, see the
/// 			Amazon CloudFront Developer Guide.
public struct CloudFront: AWSService {
    // MARK: Member variables

    /// Client used for communication with AWS
    public let client: AWSClient
    /// Service configuration
    public let config: AWSServiceConfig

    // MARK: Initialization

    /// Initialize the CloudFront client
    /// - parameters:
    ///     - client: AWSClient used to process requests
    ///     - partition: AWS partition where service resides, standard (.aws), china (.awscn), government (.awsusgov).
    ///     - endpoint: Custom endpoint URL to use instead of standard AWS servers
    ///     - middleware: Middleware chain used to edit requests before they are sent and responses before they are decoded 
    ///     - timeout: Timeout value for HTTP requests
    ///     - byteBufferAllocator: Allocator for ByteBuffers
    ///     - options: Service options
    public init(
        client: AWSClient,
        partition: AWSPartition = .aws,
        endpoint: String? = nil,
        middleware: AWSMiddlewareProtocol? = nil,
        timeout: TimeAmount? = nil,
        byteBufferAllocator: ByteBufferAllocator = ByteBufferAllocator(),
        options: AWSServiceConfig.Options = []
    ) {
        self.client = client
        self.config = AWSServiceConfig(
            region: nil,
            partition: partition,
            serviceName: "CloudFront",
            serviceIdentifier: "cloudfront",
            serviceProtocol: .restxml,
            apiVersion: "2020-05-31",
            endpoint: endpoint,
            serviceEndpoints: Self.serviceEndpoints,
            partitionEndpoints: Self.partitionEndpoints,
            errorType: CloudFrontErrorType.self,
            xmlNamespace: "http://cloudfront.amazonaws.com/doc/2020-05-31/",
            middleware: middleware,
            timeout: timeout,
            byteBufferAllocator: byteBufferAllocator,
            options: options
        )
    }


    /// custom endpoints for regions
    static var serviceEndpoints: [String: String] {[
        "aws-cn-global": "cloudfront.cn-northwest-1.amazonaws.com.cn",
        "aws-global": "cloudfront.amazonaws.com"
    ]}

    /// Default endpoint and region to use for each partition
    static var partitionEndpoints: [AWSPartition: (endpoint: String, region: SotoCore.Region)] {[
        .aws: (endpoint: "aws-global", region: .useast1),
        .awscn: (endpoint: "aws-cn-global", region: .cnnorthwest1)
    ]}


    // MARK: API Calls

    /// Associates an alias (also known as a CNAME or an alternate domain name) with a CloudFront
    /// 			distribution. With this operation you can move an alias that's already in use on a CloudFront distribution
    /// 			to a different distribution in one step. This prevents the downtime that could occur if
    /// 			you first remove the alias from one distribution and then separately add the alias to
    /// 			another distribution. To use this operation to associate an alias with a distribution, you provide the alias
    /// 			and the ID of the target distribution for the alias. For more information, including how
    /// 			to set up the target distribution, prerequisites that you must complete, and other
    /// 			restrictions, see Moving an alternate domain name to a different
    /// 				distribution in the Amazon CloudFront Developer Guide.
    @Sendable
    public func associateAlias(_ input: AssociateAliasRequest, logger: Logger = AWSClient.loggingDisabled) async throws {
        return try await self.client.execute(
            operation: "AssociateAlias", 
            path: "/2020-05-31/distribution/{TargetDistributionId}/associate-alias", 
            httpMethod: .PUT, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Creates a staging distribution using the configuration of the provided primary
    /// 			distribution. A staging distribution is a copy of an existing distribution (called the
    /// 			primary distribution) that you can use in a continuous deployment workflow. After you create a staging distribution, you can use UpdateDistribution
    /// 			to modify the staging distribution's configuration. Then you can use
    /// 				CreateContinuousDeploymentPolicy to incrementally move traffic to the
    /// 			staging distribution.
    @Sendable
    public func copyDistribution(_ input: CopyDistributionRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> CopyDistributionResult {
        return try await self.client.execute(
            operation: "CopyDistribution", 
            path: "/2020-05-31/distribution/{PrimaryDistributionId}/copy", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Creates a cache policy. After you create a cache policy, you can attach it to one or more cache behaviors.
    /// 			When it's attached to a cache behavior, the cache policy determines the
    /// 			following:   The values that CloudFront includes in the cache key. These
    /// 					values can include HTTP headers, cookies, and URL query strings. CloudFront uses the
    /// 					cache key to find an object in its cache that it can return to the
    /// 					viewer.   The default, minimum, and maximum time to live (TTL) values that you want
    /// 					objects to stay in the CloudFront cache.   The headers, cookies, and query strings that are included in the cache key are also included
    /// 			in requests that CloudFront sends to the origin. CloudFront sends a request when it can't find an
    /// 			object in its cache that matches the request's cache key. If you want to send values to
    /// 			the origin but not include them in the cache key, use
    /// 			OriginRequestPolicy. For more information about cache policies, see Controlling the cache key in the
    /// 				Amazon CloudFront Developer Guide.
    @Sendable
    public func createCachePolicy(_ input: CreateCachePolicyRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> CreateCachePolicyResult {
        return try await self.client.execute(
            operation: "CreateCachePolicy", 
            path: "/2020-05-31/cache-policy", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Creates a new origin access identity. If you're using Amazon S3 for your origin, you can
    /// 			use an origin access identity to require users to access your content using a CloudFront URL
    /// 			instead of the Amazon S3 URL. For more information about how to use origin access identities,
    /// 			see Serving Private
    /// 				Content through CloudFront in the Amazon CloudFront Developer Guide.
    @Sendable
    public func createCloudFrontOriginAccessIdentity(_ input: CreateCloudFrontOriginAccessIdentityRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> CreateCloudFrontOriginAccessIdentityResult {
        return try await self.client.execute(
            operation: "CreateCloudFrontOriginAccessIdentity", 
            path: "/2020-05-31/origin-access-identity/cloudfront", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Creates a continuous deployment policy that distributes traffic for a custom domain
    /// 			name to two different CloudFront distributions. To use a continuous deployment policy, first use CopyDistribution to
    /// 			create a staging distribution, then use UpdateDistribution to modify the
    /// 			staging distribution's configuration. After you create and update a staging distribution, you can use a continuous
    /// 			deployment policy to incrementally move traffic to the staging distribution. This
    /// 			workflow enables you to test changes to a distribution's configuration before moving all
    /// 			of your domain's production traffic to the new configuration.
    @Sendable
    public func createContinuousDeploymentPolicy(_ input: CreateContinuousDeploymentPolicyRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> CreateContinuousDeploymentPolicyResult {
        return try await self.client.execute(
            operation: "CreateContinuousDeploymentPolicy", 
            path: "/2020-05-31/continuous-deployment-policy", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Creates a CloudFront distribution.
    @Sendable
    public func createDistribution(_ input: CreateDistributionRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> CreateDistributionResult {
        return try await self.client.execute(
            operation: "CreateDistribution", 
            path: "/2020-05-31/distribution", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Create a new distribution with tags.
    @Sendable
    public func createDistributionWithTags(_ input: CreateDistributionWithTagsRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> CreateDistributionWithTagsResult {
        return try await self.client.execute(
            operation: "CreateDistributionWithTags", 
            path: "/2020-05-31/distribution?WithTags", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Create a new field-level encryption configuration.
    @Sendable
    public func createFieldLevelEncryptionConfig(_ input: CreateFieldLevelEncryptionConfigRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> CreateFieldLevelEncryptionConfigResult {
        return try await self.client.execute(
            operation: "CreateFieldLevelEncryptionConfig", 
            path: "/2020-05-31/field-level-encryption", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Create a field-level encryption profile.
    @Sendable
    public func createFieldLevelEncryptionProfile(_ input: CreateFieldLevelEncryptionProfileRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> CreateFieldLevelEncryptionProfileResult {
        return try await self.client.execute(
            operation: "CreateFieldLevelEncryptionProfile", 
            path: "/2020-05-31/field-level-encryption-profile", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Creates a CloudFront function. To create a function, you provide the function code and some configuration information
    /// 			about the function. The response contains an Amazon Resource Name (ARN) that uniquely
    /// 			identifies the function. When you create a function, it's in the DEVELOPMENT stage. In this stage,
    /// 			you can test the function with TestFunction, and update it with
    /// 				UpdateFunction. When you're ready to use your function with a CloudFront distribution, use
    /// 				PublishFunction to copy the function from the DEVELOPMENT
    /// 			stage to LIVE. When it's live, you can attach the function to a
    /// 			distribution's cache behavior, using the function's ARN.
    @Sendable
    public func createFunction(_ input: CreateFunctionRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> CreateFunctionResult {
        return try await self.client.execute(
            operation: "CreateFunction", 
            path: "/2020-05-31/function", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Create a new invalidation.
    @Sendable
    public func createInvalidation(_ input: CreateInvalidationRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> CreateInvalidationResult {
        return try await self.client.execute(
            operation: "CreateInvalidation", 
            path: "/2020-05-31/distribution/{DistributionId}/invalidation", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Creates a key group that you can use with CloudFront signed URLs and signed cookies. To create a key group, you must specify at least one public key for the key group.
    /// 			After you create a key group, you can reference it from one or more cache behaviors.
    /// 			When you reference a key group in a cache behavior, CloudFront requires signed URLs or signed
    /// 			cookies for all requests that match the cache behavior. The URLs or cookies must be
    /// 			signed with a private key whose corresponding public key is in the key group. The signed
    /// 			URL or cookie contains information about which public key CloudFront should use to verify the
    /// 			signature. For more information, see Serving private content in the
    /// 				Amazon CloudFront Developer Guide.
    @Sendable
    public func createKeyGroup(_ input: CreateKeyGroupRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> CreateKeyGroupResult {
        return try await self.client.execute(
            operation: "CreateKeyGroup", 
            path: "/2020-05-31/key-group", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Enables additional CloudWatch metrics for the specified CloudFront distribution. The
    /// 			additional metrics incur an additional cost. For more information, see Viewing additional CloudFront distribution metrics in
    /// 			the Amazon CloudFront Developer Guide.
    @Sendable
    public func createMonitoringSubscription(_ input: CreateMonitoringSubscriptionRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> CreateMonitoringSubscriptionResult {
        return try await self.client.execute(
            operation: "CreateMonitoringSubscription", 
            path: "/2020-05-31/distributions/{DistributionId}/monitoring-subscription", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Creates a new origin access control in CloudFront. After you create an origin access
    /// 			control, you can add it to an origin in a CloudFront distribution so that CloudFront sends
    /// 			authenticated (signed) requests to the origin. This makes it possible to block public access to the origin, allowing viewers (users) to
    /// 			access the origin's content only through CloudFront. For more information about using a CloudFront origin access control, see Restricting access to an Amazon Web Services origin in the
    /// 				Amazon CloudFront Developer Guide.
    @Sendable
    public func createOriginAccessControl(_ input: CreateOriginAccessControlRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> CreateOriginAccessControlResult {
        return try await self.client.execute(
            operation: "CreateOriginAccessControl", 
            path: "/2020-05-31/origin-access-control", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Creates an origin request policy. After you create an origin request policy, you can attach it to one or more cache
    /// 			behaviors. When it's attached to a cache behavior, the origin request policy determines
    /// 			the values that CloudFront includes in requests that it sends to the origin. Each request that
    /// 			CloudFront sends to the origin includes the following:   The request body and the URL path (without the domain name) from the viewer
    /// 					request.   The headers that CloudFront automatically includes in every origin request,
    /// 					including Host, User-Agent, and
    /// 						X-Amz-Cf-Id.   All HTTP headers, cookies, and URL query strings that are specified in the
    /// 					cache policy or the origin request policy. These can include items from the
    /// 					viewer request and, in the case of headers, additional ones that are added by
    /// 					CloudFront.   CloudFront sends a request when it can't find a valid object in its cache that matches the
    /// 			request. If you want to send values to the origin and also include them in the cache
    /// 			key, use CachePolicy. For more information about origin request policies, see Controlling origin requests in the
    /// 				Amazon CloudFront Developer Guide.
    @Sendable
    public func createOriginRequestPolicy(_ input: CreateOriginRequestPolicyRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> CreateOriginRequestPolicyResult {
        return try await self.client.execute(
            operation: "CreateOriginRequestPolicy", 
            path: "/2020-05-31/origin-request-policy", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Uploads a public key to CloudFront that you can use with signed URLs and signed cookies, or with field-level encryption.
    @Sendable
    public func createPublicKey(_ input: CreatePublicKeyRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> CreatePublicKeyResult {
        return try await self.client.execute(
            operation: "CreatePublicKey", 
            path: "/2020-05-31/public-key", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Creates a real-time log configuration. After you create a real-time log configuration, you can attach it to one or more cache
    /// 			behaviors to send real-time log data to the specified Amazon Kinesis data stream. For more information about real-time log configurations, see Real-time logs in the
    /// 				Amazon CloudFront Developer Guide.
    @Sendable
    public func createRealtimeLogConfig(_ input: CreateRealtimeLogConfigRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> CreateRealtimeLogConfigResult {
        return try await self.client.execute(
            operation: "CreateRealtimeLogConfig", 
            path: "/2020-05-31/realtime-log-config", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Creates a response headers policy. A response headers policy contains information about a set of HTTP headers. To create a
    /// 			response headers policy, you provide some metadata about the policy and a set of
    /// 			configurations that specify the headers. After you create a response headers policy, you can use its ID to attach it to one or more
    /// 			cache behaviors in a CloudFront distribution. When it's attached to a cache behavior, the
    /// 			response headers policy affects the HTTP headers that CloudFront includes in HTTP responses to
    /// 			requests that match the cache behavior. CloudFront adds or removes response headers according
    /// 			to the configuration of the response headers policy. For more information, see Adding or removing HTTP headers in CloudFront responses in the
    /// 			Amazon CloudFront Developer Guide.
    @Sendable
    public func createResponseHeadersPolicy(_ input: CreateResponseHeadersPolicyRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> CreateResponseHeadersPolicyResult {
        return try await self.client.execute(
            operation: "CreateResponseHeadersPolicy", 
            path: "/2020-05-31/response-headers-policy", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// This API is deprecated. Amazon CloudFront is deprecating real-time messaging protocol (RTMP)
    /// 			distributions on December 31, 2020. For more information, read the announcement on the Amazon CloudFront discussion
    /// 			forum.
    @Sendable
    public func createStreamingDistribution(_ input: CreateStreamingDistributionRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> CreateStreamingDistributionResult {
        return try await self.client.execute(
            operation: "CreateStreamingDistribution", 
            path: "/2020-05-31/streaming-distribution", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// This API is deprecated. Amazon CloudFront is deprecating real-time messaging protocol (RTMP)
    /// 			distributions on December 31, 2020. For more information, read the announcement on the Amazon CloudFront discussion
    /// 			forum.
    @Sendable
    public func createStreamingDistributionWithTags(_ input: CreateStreamingDistributionWithTagsRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> CreateStreamingDistributionWithTagsResult {
        return try await self.client.execute(
            operation: "CreateStreamingDistributionWithTags", 
            path: "/2020-05-31/streaming-distribution?WithTags", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Deletes a cache policy. You cannot delete a cache policy if it's attached to a cache behavior. First update
    /// 			your distributions to remove the cache policy from all cache behaviors, then delete the
    /// 			cache policy. To delete a cache policy, you must provide the policy's identifier and version. To get
    /// 			these values, you can use ListCachePolicies or
    /// 			GetCachePolicy.
    @Sendable
    public func deleteCachePolicy(_ input: DeleteCachePolicyRequest, logger: Logger = AWSClient.loggingDisabled) async throws {
        return try await self.client.execute(
            operation: "DeleteCachePolicy", 
            path: "/2020-05-31/cache-policy/{Id}", 
            httpMethod: .DELETE, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Delete an origin access identity.
    @Sendable
    public func deleteCloudFrontOriginAccessIdentity(_ input: DeleteCloudFrontOriginAccessIdentityRequest, logger: Logger = AWSClient.loggingDisabled) async throws {
        return try await self.client.execute(
            operation: "DeleteCloudFrontOriginAccessIdentity", 
            path: "/2020-05-31/origin-access-identity/cloudfront/{Id}", 
            httpMethod: .DELETE, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Deletes a continuous deployment policy. You cannot delete a continuous deployment policy that's attached to a primary
    /// 			distribution. First update your distribution to remove the continuous deployment policy,
    /// 			then you can delete the policy.
    @Sendable
    public func deleteContinuousDeploymentPolicy(_ input: DeleteContinuousDeploymentPolicyRequest, logger: Logger = AWSClient.loggingDisabled) async throws {
        return try await self.client.execute(
            operation: "DeleteContinuousDeploymentPolicy", 
            path: "/2020-05-31/continuous-deployment-policy/{Id}", 
            httpMethod: .DELETE, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Delete a distribution.
    @Sendable
    public func deleteDistribution(_ input: DeleteDistributionRequest, logger: Logger = AWSClient.loggingDisabled) async throws {
        return try await self.client.execute(
            operation: "DeleteDistribution", 
            path: "/2020-05-31/distribution/{Id}", 
            httpMethod: .DELETE, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Remove a field-level encryption configuration.
    @Sendable
    public func deleteFieldLevelEncryptionConfig(_ input: DeleteFieldLevelEncryptionConfigRequest, logger: Logger = AWSClient.loggingDisabled) async throws {
        return try await self.client.execute(
            operation: "DeleteFieldLevelEncryptionConfig", 
            path: "/2020-05-31/field-level-encryption/{Id}", 
            httpMethod: .DELETE, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Remove a field-level encryption profile.
    @Sendable
    public func deleteFieldLevelEncryptionProfile(_ input: DeleteFieldLevelEncryptionProfileRequest, logger: Logger = AWSClient.loggingDisabled) async throws {
        return try await self.client.execute(
            operation: "DeleteFieldLevelEncryptionProfile", 
            path: "/2020-05-31/field-level-encryption-profile/{Id}", 
            httpMethod: .DELETE, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Deletes a CloudFront function. You cannot delete a function if it's associated with a cache behavior. First, update
    /// 			your distributions to remove the function association from all cache behaviors, then
    /// 			delete the function. To delete a function, you must provide the function's name and version
    /// 				(ETag value). To get these values, you can use
    /// 				ListFunctions and DescribeFunction.
    @Sendable
    public func deleteFunction(_ input: DeleteFunctionRequest, logger: Logger = AWSClient.loggingDisabled) async throws {
        return try await self.client.execute(
            operation: "DeleteFunction", 
            path: "/2020-05-31/function/{Name}", 
            httpMethod: .DELETE, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Deletes a key group. You cannot delete a key group that is referenced in a cache behavior. First update
    /// 			your distributions to remove the key group from all cache behaviors, then delete the key
    /// 			group. To delete a key group, you must provide the key group's identifier and version. To get
    /// 			these values, use ListKeyGroups followed by GetKeyGroup or
    /// 				GetKeyGroupConfig.
    @Sendable
    public func deleteKeyGroup(_ input: DeleteKeyGroupRequest, logger: Logger = AWSClient.loggingDisabled) async throws {
        return try await self.client.execute(
            operation: "DeleteKeyGroup", 
            path: "/2020-05-31/key-group/{Id}", 
            httpMethod: .DELETE, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Disables additional CloudWatch metrics for the specified CloudFront
    /// 			distribution.
    @Sendable
    public func deleteMonitoringSubscription(_ input: DeleteMonitoringSubscriptionRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DeleteMonitoringSubscriptionResult {
        return try await self.client.execute(
            operation: "DeleteMonitoringSubscription", 
            path: "/2020-05-31/distributions/{DistributionId}/monitoring-subscription", 
            httpMethod: .DELETE, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Deletes a CloudFront origin access control. You cannot delete an origin access control if it's in use. First, update all
    /// 			distributions to remove the origin access control from all origins, then delete the
    /// 			origin access control.
    @Sendable
    public func deleteOriginAccessControl(_ input: DeleteOriginAccessControlRequest, logger: Logger = AWSClient.loggingDisabled) async throws {
        return try await self.client.execute(
            operation: "DeleteOriginAccessControl", 
            path: "/2020-05-31/origin-access-control/{Id}", 
            httpMethod: .DELETE, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Deletes an origin request policy. You cannot delete an origin request policy if it's attached to any cache behaviors.
    /// 			First update your distributions to remove the origin request policy from all cache
    /// 			behaviors, then delete the origin request policy. To delete an origin request policy, you must provide the policy's identifier and
    /// 			version. To get the identifier, you can use ListOriginRequestPolicies or
    /// 				GetOriginRequestPolicy.
    @Sendable
    public func deleteOriginRequestPolicy(_ input: DeleteOriginRequestPolicyRequest, logger: Logger = AWSClient.loggingDisabled) async throws {
        return try await self.client.execute(
            operation: "DeleteOriginRequestPolicy", 
            path: "/2020-05-31/origin-request-policy/{Id}", 
            httpMethod: .DELETE, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Remove a public key you previously added to CloudFront.
    @Sendable
    public func deletePublicKey(_ input: DeletePublicKeyRequest, logger: Logger = AWSClient.loggingDisabled) async throws {
        return try await self.client.execute(
            operation: "DeletePublicKey", 
            path: "/2020-05-31/public-key/{Id}", 
            httpMethod: .DELETE, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Deletes a real-time log configuration. You cannot delete a real-time log configuration if it's attached to a cache behavior.
    /// 			First update your distributions to remove the real-time log configuration from all cache
    /// 			behaviors, then delete the real-time log configuration. To delete a real-time log configuration, you can provide the configuration's name or
    /// 			its Amazon Resource Name (ARN). You must provide at least one. If you provide both, CloudFront
    /// 			uses the name to identify the real-time log configuration to delete.
    @Sendable
    public func deleteRealtimeLogConfig(_ input: DeleteRealtimeLogConfigRequest, logger: Logger = AWSClient.loggingDisabled) async throws {
        return try await self.client.execute(
            operation: "DeleteRealtimeLogConfig", 
            path: "/2020-05-31/delete-realtime-log-config", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Deletes a response headers policy. You cannot delete a response headers policy if it's attached to a cache behavior.
    /// 			First update your distributions to remove the response headers policy from all cache
    /// 			behaviors, then delete the response headers policy. To delete a response headers policy, you must provide the policy's identifier and
    /// 			version. To get these values, you can use ListResponseHeadersPolicies or
    /// 				GetResponseHeadersPolicy.
    @Sendable
    public func deleteResponseHeadersPolicy(_ input: DeleteResponseHeadersPolicyRequest, logger: Logger = AWSClient.loggingDisabled) async throws {
        return try await self.client.execute(
            operation: "DeleteResponseHeadersPolicy", 
            path: "/2020-05-31/response-headers-policy/{Id}", 
            httpMethod: .DELETE, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Delete a streaming distribution. To delete an RTMP distribution using the CloudFront API,
    /// 			perform the following steps.  To delete an RTMP distribution using the CloudFront
    /// 			API:   Disable the RTMP distribution.   Submit a GET Streaming Distribution Config request to get the
    /// 					current configuration and the Etag header for the distribution.
    /// 				   Update the XML document that was returned in the response to your GET
    /// 						Streaming Distribution Config request to change the value of
    /// 						Enabled to false.   Submit a PUT Streaming Distribution Config request to update the
    /// 					configuration for your distribution. In the request body, include the XML
    /// 					document that you updated in Step 3. Then set the value of the HTTP
    /// 						If-Match header to the value of the ETag header
    /// 					that CloudFront returned when you submitted the GET Streaming Distribution
    /// 						Config request in Step 2.   Review the response to the PUT Streaming Distribution Config
    /// 					request to confirm that the distribution was successfully disabled.   Submit a GET Streaming Distribution Config request to confirm
    /// 					that your changes have propagated. When propagation is complete, the value of
    /// 						Status is Deployed.   Submit a DELETE Streaming Distribution request. Set the value of
    /// 					the HTTP If-Match header to the value of the ETag
    /// 					header that CloudFront returned when you submitted the GET Streaming
    /// 						Distribution Config request in Step 2.   Review the response to your DELETE Streaming Distribution request
    /// 					to confirm that the distribution was successfully deleted.   For information about deleting a distribution using the CloudFront console, see Deleting a
    /// 				Distribution in the Amazon CloudFront Developer Guide.
    @Sendable
    public func deleteStreamingDistribution(_ input: DeleteStreamingDistributionRequest, logger: Logger = AWSClient.loggingDisabled) async throws {
        return try await self.client.execute(
            operation: "DeleteStreamingDistribution", 
            path: "/2020-05-31/streaming-distribution/{Id}", 
            httpMethod: .DELETE, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Gets configuration information and metadata about a CloudFront function, but not the
    /// 			function's code. To get a function's code, use GetFunction. To get configuration information and metadata about a function, you must provide the
    /// 			function's name and stage. To get these values, you can use
    /// 			ListFunctions.
    @Sendable
    public func describeFunction(_ input: DescribeFunctionRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DescribeFunctionResult {
        return try await self.client.execute(
            operation: "DescribeFunction", 
            path: "/2020-05-31/function/{Name}/describe", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Gets a cache policy, including the following metadata:   The policy's identifier.   The date and time when the policy was last modified.   To get a cache policy, you must provide the policy's identifier. If the cache policy
    /// 			is attached to a distribution's cache behavior, you can get the policy's identifier
    /// 			using ListDistributions or GetDistribution. If the cache
    /// 			policy is not attached to a cache behavior, you can get the identifier using
    /// 				ListCachePolicies.
    @Sendable
    public func getCachePolicy(_ input: GetCachePolicyRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> GetCachePolicyResult {
        return try await self.client.execute(
            operation: "GetCachePolicy", 
            path: "/2020-05-31/cache-policy/{Id}", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Gets a cache policy configuration. To get a cache policy configuration, you must provide the policy's identifier. If the
    /// 			cache policy is attached to a distribution's cache behavior, you can get the policy's
    /// 			identifier using ListDistributions or GetDistribution. If the
    /// 			cache policy is not attached to a cache behavior, you can get the identifier using
    /// 				ListCachePolicies.
    @Sendable
    public func getCachePolicyConfig(_ input: GetCachePolicyConfigRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> GetCachePolicyConfigResult {
        return try await self.client.execute(
            operation: "GetCachePolicyConfig", 
            path: "/2020-05-31/cache-policy/{Id}/config", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Get the information about an origin access identity.
    @Sendable
    public func getCloudFrontOriginAccessIdentity(_ input: GetCloudFrontOriginAccessIdentityRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> GetCloudFrontOriginAccessIdentityResult {
        return try await self.client.execute(
            operation: "GetCloudFrontOriginAccessIdentity", 
            path: "/2020-05-31/origin-access-identity/cloudfront/{Id}", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Get the configuration information about an origin access identity.
    @Sendable
    public func getCloudFrontOriginAccessIdentityConfig(_ input: GetCloudFrontOriginAccessIdentityConfigRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> GetCloudFrontOriginAccessIdentityConfigResult {
        return try await self.client.execute(
            operation: "GetCloudFrontOriginAccessIdentityConfig", 
            path: "/2020-05-31/origin-access-identity/cloudfront/{Id}/config", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Gets a continuous deployment policy, including metadata (the policy's identifier and
    /// 			the date and time when the policy was last modified).
    @Sendable
    public func getContinuousDeploymentPolicy(_ input: GetContinuousDeploymentPolicyRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> GetContinuousDeploymentPolicyResult {
        return try await self.client.execute(
            operation: "GetContinuousDeploymentPolicy", 
            path: "/2020-05-31/continuous-deployment-policy/{Id}", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Gets configuration information about a continuous deployment policy.
    @Sendable
    public func getContinuousDeploymentPolicyConfig(_ input: GetContinuousDeploymentPolicyConfigRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> GetContinuousDeploymentPolicyConfigResult {
        return try await self.client.execute(
            operation: "GetContinuousDeploymentPolicyConfig", 
            path: "/2020-05-31/continuous-deployment-policy/{Id}/config", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Get the information about a distribution.
    @Sendable
    public func getDistribution(_ input: GetDistributionRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> GetDistributionResult {
        return try await self.client.execute(
            operation: "GetDistribution", 
            path: "/2020-05-31/distribution/{Id}", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Get the configuration information about a distribution.
    @Sendable
    public func getDistributionConfig(_ input: GetDistributionConfigRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> GetDistributionConfigResult {
        return try await self.client.execute(
            operation: "GetDistributionConfig", 
            path: "/2020-05-31/distribution/{Id}/config", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Get the field-level encryption configuration information.
    @Sendable
    public func getFieldLevelEncryption(_ input: GetFieldLevelEncryptionRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> GetFieldLevelEncryptionResult {
        return try await self.client.execute(
            operation: "GetFieldLevelEncryption", 
            path: "/2020-05-31/field-level-encryption/{Id}", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Get the field-level encryption configuration information.
    @Sendable
    public func getFieldLevelEncryptionConfig(_ input: GetFieldLevelEncryptionConfigRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> GetFieldLevelEncryptionConfigResult {
        return try await self.client.execute(
            operation: "GetFieldLevelEncryptionConfig", 
            path: "/2020-05-31/field-level-encryption/{Id}/config", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Get the field-level encryption profile information.
    @Sendable
    public func getFieldLevelEncryptionProfile(_ input: GetFieldLevelEncryptionProfileRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> GetFieldLevelEncryptionProfileResult {
        return try await self.client.execute(
            operation: "GetFieldLevelEncryptionProfile", 
            path: "/2020-05-31/field-level-encryption-profile/{Id}", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Get the field-level encryption profile configuration information.
    @Sendable
    public func getFieldLevelEncryptionProfileConfig(_ input: GetFieldLevelEncryptionProfileConfigRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> GetFieldLevelEncryptionProfileConfigResult {
        return try await self.client.execute(
            operation: "GetFieldLevelEncryptionProfileConfig", 
            path: "/2020-05-31/field-level-encryption-profile/{Id}/config", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Gets the code of a CloudFront function. To get configuration information and metadata about
    /// 			a function, use DescribeFunction. To get a function's code, you must provide the function's name and stage. To get these
    /// 			values, you can use ListFunctions.
    @Sendable
    public func getFunction(_ input: GetFunctionRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> GetFunctionResult {
        return try await self.client.execute(
            operation: "GetFunction", 
            path: "/2020-05-31/function/{Name}", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Get the information about an invalidation.
    @Sendable
    public func getInvalidation(_ input: GetInvalidationRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> GetInvalidationResult {
        return try await self.client.execute(
            operation: "GetInvalidation", 
            path: "/2020-05-31/distribution/{DistributionId}/invalidation/{Id}", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Gets a key group, including the date and time when the key group was last
    /// 			modified. To get a key group, you must provide the key group's identifier. If the key group is
    /// 			referenced in a distribution's cache behavior, you can get the key group's identifier
    /// 			using ListDistributions or GetDistribution. If the key group
    /// 			is not referenced in a cache behavior, you can get the identifier using
    /// 				ListKeyGroups.
    @Sendable
    public func getKeyGroup(_ input: GetKeyGroupRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> GetKeyGroupResult {
        return try await self.client.execute(
            operation: "GetKeyGroup", 
            path: "/2020-05-31/key-group/{Id}", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Gets a key group configuration. To get a key group configuration, you must provide the key group's identifier. If the
    /// 			key group is referenced in a distribution's cache behavior, you can get the key group's
    /// 			identifier using ListDistributions or GetDistribution. If the
    /// 			key group is not referenced in a cache behavior, you can get the identifier using
    /// 				ListKeyGroups.
    @Sendable
    public func getKeyGroupConfig(_ input: GetKeyGroupConfigRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> GetKeyGroupConfigResult {
        return try await self.client.execute(
            operation: "GetKeyGroupConfig", 
            path: "/2020-05-31/key-group/{Id}/config", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Gets information about whether additional CloudWatch metrics are enabled for the
    /// 			specified CloudFront distribution.
    @Sendable
    public func getMonitoringSubscription(_ input: GetMonitoringSubscriptionRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> GetMonitoringSubscriptionResult {
        return try await self.client.execute(
            operation: "GetMonitoringSubscription", 
            path: "/2020-05-31/distributions/{DistributionId}/monitoring-subscription", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Gets a CloudFront origin access control, including its unique identifier.
    @Sendable
    public func getOriginAccessControl(_ input: GetOriginAccessControlRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> GetOriginAccessControlResult {
        return try await self.client.execute(
            operation: "GetOriginAccessControl", 
            path: "/2020-05-31/origin-access-control/{Id}", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Gets a CloudFront origin access control configuration.
    @Sendable
    public func getOriginAccessControlConfig(_ input: GetOriginAccessControlConfigRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> GetOriginAccessControlConfigResult {
        return try await self.client.execute(
            operation: "GetOriginAccessControlConfig", 
            path: "/2020-05-31/origin-access-control/{Id}/config", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Gets an origin request policy, including the following metadata:   The policy's identifier.   The date and time when the policy was last modified.   To get an origin request policy, you must provide the policy's identifier. If the
    /// 			origin request policy is attached to a distribution's cache behavior, you can get the
    /// 			policy's identifier using ListDistributions or
    /// 			GetDistribution. If the origin request policy is not attached to a cache
    /// 			behavior, you can get the identifier using
    /// 			ListOriginRequestPolicies.
    @Sendable
    public func getOriginRequestPolicy(_ input: GetOriginRequestPolicyRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> GetOriginRequestPolicyResult {
        return try await self.client.execute(
            operation: "GetOriginRequestPolicy", 
            path: "/2020-05-31/origin-request-policy/{Id}", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Gets an origin request policy configuration. To get an origin request policy configuration, you must provide the policy's
    /// 			identifier. If the origin request policy is attached to a distribution's cache behavior,
    /// 			you can get the policy's identifier using ListDistributions or
    /// 				GetDistribution. If the origin request policy is not attached to a
    /// 			cache behavior, you can get the identifier using
    /// 			ListOriginRequestPolicies.
    @Sendable
    public func getOriginRequestPolicyConfig(_ input: GetOriginRequestPolicyConfigRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> GetOriginRequestPolicyConfigResult {
        return try await self.client.execute(
            operation: "GetOriginRequestPolicyConfig", 
            path: "/2020-05-31/origin-request-policy/{Id}/config", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Gets a public key.
    @Sendable
    public func getPublicKey(_ input: GetPublicKeyRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> GetPublicKeyResult {
        return try await self.client.execute(
            operation: "GetPublicKey", 
            path: "/2020-05-31/public-key/{Id}", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Gets a public key configuration.
    @Sendable
    public func getPublicKeyConfig(_ input: GetPublicKeyConfigRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> GetPublicKeyConfigResult {
        return try await self.client.execute(
            operation: "GetPublicKeyConfig", 
            path: "/2020-05-31/public-key/{Id}/config", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Gets a real-time log configuration. To get a real-time log configuration, you can provide the configuration's name or its
    /// 			Amazon Resource Name (ARN). You must provide at least one. If you provide both, CloudFront
    /// 			uses the name to identify the real-time log configuration to get.
    @Sendable
    public func getRealtimeLogConfig(_ input: GetRealtimeLogConfigRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> GetRealtimeLogConfigResult {
        return try await self.client.execute(
            operation: "GetRealtimeLogConfig", 
            path: "/2020-05-31/get-realtime-log-config", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Gets a response headers policy, including metadata (the policy's identifier and the
    /// 			date and time when the policy was last modified). To get a response headers policy, you must provide the policy's identifier. If the
    /// 			response headers policy is attached to a distribution's cache behavior, you can get the
    /// 			policy's identifier using ListDistributions or
    /// 			GetDistribution. If the response headers policy is not attached to a cache
    /// 			behavior, you can get the identifier using
    /// 			ListResponseHeadersPolicies.
    @Sendable
    public func getResponseHeadersPolicy(_ input: GetResponseHeadersPolicyRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> GetResponseHeadersPolicyResult {
        return try await self.client.execute(
            operation: "GetResponseHeadersPolicy", 
            path: "/2020-05-31/response-headers-policy/{Id}", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Gets a response headers policy configuration. To get a response headers policy configuration, you must provide the policy's
    /// 			identifier. If the response headers policy is attached to a distribution's cache
    /// 			behavior, you can get the policy's identifier using ListDistributions or
    /// 				GetDistribution. If the response headers policy is not attached to a
    /// 			cache behavior, you can get the identifier using
    /// 				ListResponseHeadersPolicies.
    @Sendable
    public func getResponseHeadersPolicyConfig(_ input: GetResponseHeadersPolicyConfigRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> GetResponseHeadersPolicyConfigResult {
        return try await self.client.execute(
            operation: "GetResponseHeadersPolicyConfig", 
            path: "/2020-05-31/response-headers-policy/{Id}/config", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Gets information about a specified RTMP distribution, including the distribution
    /// 			configuration.
    @Sendable
    public func getStreamingDistribution(_ input: GetStreamingDistributionRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> GetStreamingDistributionResult {
        return try await self.client.execute(
            operation: "GetStreamingDistribution", 
            path: "/2020-05-31/streaming-distribution/{Id}", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Get the configuration information about a streaming distribution.
    @Sendable
    public func getStreamingDistributionConfig(_ input: GetStreamingDistributionConfigRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> GetStreamingDistributionConfigResult {
        return try await self.client.execute(
            operation: "GetStreamingDistributionConfig", 
            path: "/2020-05-31/streaming-distribution/{Id}/config", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Gets a list of cache policies. You can optionally apply a filter to return only the managed policies created by
    /// 			Amazon Web Services, or only the custom policies created in your Amazon Web Services account. You can optionally specify the maximum number of items to receive in the response. If
    /// 			the total number of items in the list exceeds the maximum that you specify, or the
    /// 			default maximum, the response is paginated. To get the next page of items, send a
    /// 			subsequent request that specifies the NextMarker value from the current
    /// 			response as the Marker value in the subsequent request.
    @Sendable
    public func listCachePolicies(_ input: ListCachePoliciesRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> ListCachePoliciesResult {
        return try await self.client.execute(
            operation: "ListCachePolicies", 
            path: "/2020-05-31/cache-policy", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Lists origin access identities.
    @Sendable
    public func listCloudFrontOriginAccessIdentities(_ input: ListCloudFrontOriginAccessIdentitiesRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> ListCloudFrontOriginAccessIdentitiesResult {
        return try await self.client.execute(
            operation: "ListCloudFrontOriginAccessIdentities", 
            path: "/2020-05-31/origin-access-identity/cloudfront", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Gets a list of aliases (also called CNAMEs or alternate domain names) that conflict or
    /// 			overlap with the provided alias, and the associated CloudFront distributions and Amazon Web Services
    /// 			accounts for each conflicting alias. In the returned list, the distribution and account
    /// 			IDs are partially hidden, which allows you to identify the distributions and accounts
    /// 			that you own, but helps to protect the information of ones that you don't own. Use this operation to find aliases that are in use in CloudFront that conflict or overlap
    /// 			with the provided alias. For example, if you provide www.example.com as
    /// 			input, the returned list can include www.example.com and the overlapping
    /// 			wildcard alternate domain name (*.example.com), if they exist. If you
    /// 			provide *.example.com as input, the returned list can include
    /// 				*.example.com and any alternate domain names covered by that wildcard
    /// 			(for example, www.example.com, test.example.com,
    /// 				dev.example.com, and so on), if they exist. To list conflicting aliases, you provide the alias to search and the ID of a
    /// 			distribution in your account that has an attached SSL/TLS certificate that includes the
    /// 			provided alias. For more information, including how to set up the distribution and
    /// 			certificate, see Moving an alternate domain name to a different
    /// 				distribution in the Amazon CloudFront Developer Guide. You can optionally specify the maximum number of items to receive in the response. If
    /// 			the total number of items in the list exceeds the maximum that you specify, or the
    /// 			default maximum, the response is paginated. To get the next page of items, send a
    /// 			subsequent request that specifies the NextMarker value from the current
    /// 			response as the Marker value in the subsequent request.
    @Sendable
    public func listConflictingAliases(_ input: ListConflictingAliasesRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> ListConflictingAliasesResult {
        return try await self.client.execute(
            operation: "ListConflictingAliases", 
            path: "/2020-05-31/conflicting-alias", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Gets a list of the continuous deployment policies in your Amazon Web Services account. You can optionally specify the maximum number of items to receive in the response. If
    /// 			the total number of items in the list exceeds the maximum that you specify, or the
    /// 			default maximum, the response is paginated. To get the next page of items, send a
    /// 			subsequent request that specifies the NextMarker value from the current
    /// 			response as the Marker value in the subsequent request.
    @Sendable
    public func listContinuousDeploymentPolicies(_ input: ListContinuousDeploymentPoliciesRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> ListContinuousDeploymentPoliciesResult {
        return try await self.client.execute(
            operation: "ListContinuousDeploymentPolicies", 
            path: "/2020-05-31/continuous-deployment-policy", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// List CloudFront distributions.
    @Sendable
    public func listDistributions(_ input: ListDistributionsRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> ListDistributionsResult {
        return try await self.client.execute(
            operation: "ListDistributions", 
            path: "/2020-05-31/distribution", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Gets a list of distribution IDs for distributions that have a cache behavior that's
    /// 			associated with the specified cache policy. You can optionally specify the maximum number of items to receive in the response. If
    /// 			the total number of items in the list exceeds the maximum that you specify, or the
    /// 			default maximum, the response is paginated. To get the next page of items, send a
    /// 			subsequent request that specifies the NextMarker value from the current
    /// 			response as the Marker value in the subsequent request.
    @Sendable
    public func listDistributionsByCachePolicyId(_ input: ListDistributionsByCachePolicyIdRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> ListDistributionsByCachePolicyIdResult {
        return try await self.client.execute(
            operation: "ListDistributionsByCachePolicyId", 
            path: "/2020-05-31/distributionsByCachePolicyId/{CachePolicyId}", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Gets a list of distribution IDs for distributions that have a cache behavior that
    /// 			references the specified key group. You can optionally specify the maximum number of items to receive in the response. If
    /// 			the total number of items in the list exceeds the maximum that you specify, or the
    /// 			default maximum, the response is paginated. To get the next page of items, send a
    /// 			subsequent request that specifies the NextMarker value from the current
    /// 			response as the Marker value in the subsequent request.
    @Sendable
    public func listDistributionsByKeyGroup(_ input: ListDistributionsByKeyGroupRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> ListDistributionsByKeyGroupResult {
        return try await self.client.execute(
            operation: "ListDistributionsByKeyGroup", 
            path: "/2020-05-31/distributionsByKeyGroupId/{KeyGroupId}", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Gets a list of distribution IDs for distributions that have a cache behavior that's
    /// 			associated with the specified origin request policy. You can optionally specify the maximum number of items to receive in the response. If
    /// 			the total number of items in the list exceeds the maximum that you specify, or the
    /// 			default maximum, the response is paginated. To get the next page of items, send a
    /// 			subsequent request that specifies the NextMarker value from the current
    /// 			response as the Marker value in the subsequent request.
    @Sendable
    public func listDistributionsByOriginRequestPolicyId(_ input: ListDistributionsByOriginRequestPolicyIdRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> ListDistributionsByOriginRequestPolicyIdResult {
        return try await self.client.execute(
            operation: "ListDistributionsByOriginRequestPolicyId", 
            path: "/2020-05-31/distributionsByOriginRequestPolicyId/{OriginRequestPolicyId}", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Gets a list of distributions that have a cache behavior that's associated with the
    /// 			specified real-time log configuration. You can specify the real-time log configuration by its name or its Amazon Resource
    /// 			Name (ARN). You must provide at least one. If you provide both, CloudFront uses the name to
    /// 			identify the real-time log configuration to list distributions for. You can optionally specify the maximum number of items to receive in the response. If
    /// 			the total number of items in the list exceeds the maximum that you specify, or the
    /// 			default maximum, the response is paginated. To get the next page of items, send a
    /// 			subsequent request that specifies the NextMarker value from the current
    /// 			response as the Marker value in the subsequent request.
    @Sendable
    public func listDistributionsByRealtimeLogConfig(_ input: ListDistributionsByRealtimeLogConfigRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> ListDistributionsByRealtimeLogConfigResult {
        return try await self.client.execute(
            operation: "ListDistributionsByRealtimeLogConfig", 
            path: "/2020-05-31/distributionsByRealtimeLogConfig", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Gets a list of distribution IDs for distributions that have a cache behavior that's
    /// 			associated with the specified response headers policy. You can optionally specify the maximum number of items to receive in the response. If
    /// 			the total number of items in the list exceeds the maximum that you specify, or the
    /// 			default maximum, the response is paginated. To get the next page of items, send a
    /// 			subsequent request that specifies the NextMarker value from the current
    /// 			response as the Marker value in the subsequent request.
    @Sendable
    public func listDistributionsByResponseHeadersPolicyId(_ input: ListDistributionsByResponseHeadersPolicyIdRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> ListDistributionsByResponseHeadersPolicyIdResult {
        return try await self.client.execute(
            operation: "ListDistributionsByResponseHeadersPolicyId", 
            path: "/2020-05-31/distributionsByResponseHeadersPolicyId/{ResponseHeadersPolicyId}", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// List the distributions that are associated with a specified WAF web ACL.
    @Sendable
    public func listDistributionsByWebACLId(_ input: ListDistributionsByWebACLIdRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> ListDistributionsByWebACLIdResult {
        return try await self.client.execute(
            operation: "ListDistributionsByWebACLId", 
            path: "/2020-05-31/distributionsByWebACLId/{WebACLId}", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// List all field-level encryption configurations that have been created in CloudFront for this
    /// 			account.
    @Sendable
    public func listFieldLevelEncryptionConfigs(_ input: ListFieldLevelEncryptionConfigsRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> ListFieldLevelEncryptionConfigsResult {
        return try await self.client.execute(
            operation: "ListFieldLevelEncryptionConfigs", 
            path: "/2020-05-31/field-level-encryption", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Request a list of field-level encryption profiles that have been created in CloudFront for
    /// 			this account.
    @Sendable
    public func listFieldLevelEncryptionProfiles(_ input: ListFieldLevelEncryptionProfilesRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> ListFieldLevelEncryptionProfilesResult {
        return try await self.client.execute(
            operation: "ListFieldLevelEncryptionProfiles", 
            path: "/2020-05-31/field-level-encryption-profile", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Gets a list of all CloudFront functions in your Amazon Web Services account. You can optionally apply a filter to return only the functions that are in the
    /// 			specified stage, either DEVELOPMENT or LIVE. You can optionally specify the maximum number of items to receive in the response. If
    /// 			the total number of items in the list exceeds the maximum that you specify, or the
    /// 			default maximum, the response is paginated. To get the next page of items, send a
    /// 			subsequent request that specifies the NextMarker value from the current
    /// 			response as the Marker value in the subsequent request.
    @Sendable
    public func listFunctions(_ input: ListFunctionsRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> ListFunctionsResult {
        return try await self.client.execute(
            operation: "ListFunctions", 
            path: "/2020-05-31/function", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Lists invalidation batches.
    @Sendable
    public func listInvalidations(_ input: ListInvalidationsRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> ListInvalidationsResult {
        return try await self.client.execute(
            operation: "ListInvalidations", 
            path: "/2020-05-31/distribution/{DistributionId}/invalidation", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Gets a list of key groups. You can optionally specify the maximum number of items to receive in the response. If
    /// 			the total number of items in the list exceeds the maximum that you specify, or the
    /// 			default maximum, the response is paginated. To get the next page of items, send a
    /// 			subsequent request that specifies the NextMarker value from the current
    /// 			response as the Marker value in the subsequent request.
    @Sendable
    public func listKeyGroups(_ input: ListKeyGroupsRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> ListKeyGroupsResult {
        return try await self.client.execute(
            operation: "ListKeyGroups", 
            path: "/2020-05-31/key-group", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Gets the list of CloudFront origin access controls in this Amazon Web Services account. You can optionally specify the maximum number of items to receive in the response. If
    /// 			the total number of items in the list exceeds the maximum that you specify, or the
    /// 			default maximum, the response is paginated. To get the next page of items, send another
    /// 			request that specifies the NextMarker value from the current response as
    /// 			the Marker value in the next request.
    @Sendable
    public func listOriginAccessControls(_ input: ListOriginAccessControlsRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> ListOriginAccessControlsResult {
        return try await self.client.execute(
            operation: "ListOriginAccessControls", 
            path: "/2020-05-31/origin-access-control", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Gets a list of origin request policies. You can optionally apply a filter to return only the managed policies created by
    /// 			Amazon Web Services, or only the custom policies created in your Amazon Web Services account. You can optionally specify the maximum number of items to receive in the response. If
    /// 			the total number of items in the list exceeds the maximum that you specify, or the
    /// 			default maximum, the response is paginated. To get the next page of items, send a
    /// 			subsequent request that specifies the NextMarker value from the current
    /// 			response as the Marker value in the subsequent request.
    @Sendable
    public func listOriginRequestPolicies(_ input: ListOriginRequestPoliciesRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> ListOriginRequestPoliciesResult {
        return try await self.client.execute(
            operation: "ListOriginRequestPolicies", 
            path: "/2020-05-31/origin-request-policy", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// List all public keys that have been added to CloudFront for this account.
    @Sendable
    public func listPublicKeys(_ input: ListPublicKeysRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> ListPublicKeysResult {
        return try await self.client.execute(
            operation: "ListPublicKeys", 
            path: "/2020-05-31/public-key", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Gets a list of real-time log configurations. You can optionally specify the maximum number of items to receive in the response. If
    /// 			the total number of items in the list exceeds the maximum that you specify, or the
    /// 			default maximum, the response is paginated. To get the next page of items, send a
    /// 			subsequent request that specifies the NextMarker value from the current
    /// 			response as the Marker value in the subsequent request.
    @Sendable
    public func listRealtimeLogConfigs(_ input: ListRealtimeLogConfigsRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> ListRealtimeLogConfigsResult {
        return try await self.client.execute(
            operation: "ListRealtimeLogConfigs", 
            path: "/2020-05-31/realtime-log-config", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Gets a list of response headers policies. You can optionally apply a filter to get only the managed policies created by Amazon Web Services,
    /// 			or only the custom policies created in your Amazon Web Services account. You can optionally specify the maximum number of items to receive in the response. If
    /// 			the total number of items in the list exceeds the maximum that you specify, or the
    /// 			default maximum, the response is paginated. To get the next page of items, send a
    /// 			subsequent request that specifies the NextMarker value from the current
    /// 			response as the Marker value in the subsequent request.
    @Sendable
    public func listResponseHeadersPolicies(_ input: ListResponseHeadersPoliciesRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> ListResponseHeadersPoliciesResult {
        return try await self.client.execute(
            operation: "ListResponseHeadersPolicies", 
            path: "/2020-05-31/response-headers-policy", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// List streaming distributions.
    @Sendable
    public func listStreamingDistributions(_ input: ListStreamingDistributionsRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> ListStreamingDistributionsResult {
        return try await self.client.execute(
            operation: "ListStreamingDistributions", 
            path: "/2020-05-31/streaming-distribution", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// List tags for a CloudFront resource.
    @Sendable
    public func listTagsForResource(_ input: ListTagsForResourceRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> ListTagsForResourceResult {
        return try await self.client.execute(
            operation: "ListTagsForResource", 
            path: "/2020-05-31/tagging", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Publishes a CloudFront function by copying the function code from the
    /// 				DEVELOPMENT stage to LIVE. This automatically updates all
    /// 			cache behaviors that are using this function to use the newly published copy in the
    /// 				LIVE stage. When a function is published to the LIVE stage, you can attach the
    /// 			function to a distribution's cache behavior, using the function's Amazon Resource Name
    /// 			(ARN). To publish a function, you must provide the function's name and version
    /// 				(ETag value). To get these values, you can use
    /// 				ListFunctions and DescribeFunction.
    @Sendable
    public func publishFunction(_ input: PublishFunctionRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> PublishFunctionResult {
        return try await self.client.execute(
            operation: "PublishFunction", 
            path: "/2020-05-31/function/{Name}/publish", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Add tags to a CloudFront resource.
    @Sendable
    public func tagResource(_ input: TagResourceRequest, logger: Logger = AWSClient.loggingDisabled) async throws {
        return try await self.client.execute(
            operation: "TagResource", 
            path: "/2020-05-31/tagging?Operation=Tag", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Tests a CloudFront function. To test a function, you provide an event object that represents
    /// 			an HTTP request or response that your CloudFront distribution could receive in production.
    /// 			CloudFront runs the function, passing it the event object that you provided, and returns the
    /// 			function's result (the modified event object) in the response. The response also
    /// 			contains function logs and error messages, if any exist. For more information about
    /// 			testing functions, see Testing functions in the Amazon CloudFront Developer Guide. To test a function, you provide the function's name and version (ETag
    /// 			value) along with the event object. To get the function's name and version, you can use
    /// 				ListFunctions and DescribeFunction.
    @Sendable
    public func testFunction(_ input: TestFunctionRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> TestFunctionResult {
        return try await self.client.execute(
            operation: "TestFunction", 
            path: "/2020-05-31/function/{Name}/test", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Remove tags from a CloudFront resource.
    @Sendable
    public func untagResource(_ input: UntagResourceRequest, logger: Logger = AWSClient.loggingDisabled) async throws {
        return try await self.client.execute(
            operation: "UntagResource", 
            path: "/2020-05-31/tagging?Operation=Untag", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Updates a cache policy configuration. When you update a cache policy configuration, all the fields are updated with the
    /// 			values provided in the request. You cannot update some fields independent of others. To
    /// 			update a cache policy configuration:   Use GetCachePolicyConfig to get the current configuration.   Locally modify the fields in the cache policy configuration that you want to
    /// 					update.   Call UpdateCachePolicy by providing the entire cache policy
    /// 					configuration, including the fields that you modified and those that you
    /// 					didn't.
    @Sendable
    public func updateCachePolicy(_ input: UpdateCachePolicyRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> UpdateCachePolicyResult {
        return try await self.client.execute(
            operation: "UpdateCachePolicy", 
            path: "/2020-05-31/cache-policy/{Id}", 
            httpMethod: .PUT, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Update an origin access identity.
    @Sendable
    public func updateCloudFrontOriginAccessIdentity(_ input: UpdateCloudFrontOriginAccessIdentityRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> UpdateCloudFrontOriginAccessIdentityResult {
        return try await self.client.execute(
            operation: "UpdateCloudFrontOriginAccessIdentity", 
            path: "/2020-05-31/origin-access-identity/cloudfront/{Id}/config", 
            httpMethod: .PUT, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Updates a continuous deployment policy. You can update a continuous deployment policy
    /// 			to enable or disable it, to change the percentage of traffic that it sends to the
    /// 			staging distribution, or to change the staging distribution that it sends traffic
    /// 			to. When you update a continuous deployment policy configuration, all the fields are
    /// 			updated with the values that are provided in the request. You cannot update some fields
    /// 			independent of others. To update a continuous deployment policy configuration:   Use GetContinuousDeploymentPolicyConfig to get the current
    /// 					configuration.   Locally modify the fields in the continuous deployment policy configuration
    /// 					that you want to update.   Use UpdateContinuousDeploymentPolicy, providing the entire
    /// 					continuous deployment policy configuration, including the fields that you
    /// 					modified and those that you didn't.
    @Sendable
    public func updateContinuousDeploymentPolicy(_ input: UpdateContinuousDeploymentPolicyRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> UpdateContinuousDeploymentPolicyResult {
        return try await self.client.execute(
            operation: "UpdateContinuousDeploymentPolicy", 
            path: "/2020-05-31/continuous-deployment-policy/{Id}", 
            httpMethod: .PUT, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Updates the configuration for a CloudFront distribution. The update process includes getting the current distribution configuration, updating
    /// 			it to make your changes, and then submitting an UpdateDistribution request
    /// 			to make the updates.  To update a web distribution using the CloudFront
    /// 			API    Use GetDistributionConfig to get the current configuration,
    /// 					including the version identifier (ETag).   Update the distribution configuration that was returned in the response. Note
    /// 					the following important requirements and restrictions:   You must rename the ETag field to IfMatch,
    /// 							leaving the value unchanged. (Set the value of IfMatch to
    /// 							the value of ETag, then remove the ETag
    /// 							field.)   You can't change the value of CallerReference.     Submit an UpdateDistribution request, providing the distribution
    /// 					configuration. The new configuration replaces the existing configuration. The
    /// 					values that you specify in an UpdateDistribution request are not
    /// 					merged into your existing configuration. Make sure to include all fields: the
    /// 					ones that you modified and also the ones that you didn't.
    @Sendable
    public func updateDistribution(_ input: UpdateDistributionRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> UpdateDistributionResult {
        return try await self.client.execute(
            operation: "UpdateDistribution", 
            path: "/2020-05-31/distribution/{Id}/config", 
            httpMethod: .PUT, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Copies the staging distribution's configuration to its corresponding primary
    /// 			distribution. The primary distribution retains its Aliases (also known as
    /// 			alternate domain names or CNAMEs) and ContinuousDeploymentPolicyId value,
    /// 			but otherwise its configuration is overwritten to match the staging distribution. You can use this operation in a continuous deployment workflow after you have tested
    /// 			configuration changes on the staging distribution. After using a continuous deployment
    /// 			policy to move a portion of your domain name's traffic to the staging distribution and
    /// 			verifying that it works as intended, you can use this operation to copy the staging
    /// 			distribution's configuration to the primary distribution. This action will disable the
    /// 			continuous deployment policy and move your domain's traffic back to the primary distribution.
    @Sendable
    public func updateDistributionWithStagingConfig(_ input: UpdateDistributionWithStagingConfigRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> UpdateDistributionWithStagingConfigResult {
        return try await self.client.execute(
            operation: "UpdateDistributionWithStagingConfig", 
            path: "/2020-05-31/distribution/{Id}/promote-staging-config", 
            httpMethod: .PUT, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Update a field-level encryption configuration.
    @Sendable
    public func updateFieldLevelEncryptionConfig(_ input: UpdateFieldLevelEncryptionConfigRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> UpdateFieldLevelEncryptionConfigResult {
        return try await self.client.execute(
            operation: "UpdateFieldLevelEncryptionConfig", 
            path: "/2020-05-31/field-level-encryption/{Id}/config", 
            httpMethod: .PUT, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Update a field-level encryption profile.
    @Sendable
    public func updateFieldLevelEncryptionProfile(_ input: UpdateFieldLevelEncryptionProfileRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> UpdateFieldLevelEncryptionProfileResult {
        return try await self.client.execute(
            operation: "UpdateFieldLevelEncryptionProfile", 
            path: "/2020-05-31/field-level-encryption-profile/{Id}/config", 
            httpMethod: .PUT, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Updates a CloudFront function. You can update a function's code or the comment that describes the function. You
    /// 			cannot update a function's name. To update a function, you provide the function's name and version (ETag
    /// 			value) along with the updated function code. To get the name and version, you can use
    /// 				ListFunctions and DescribeFunction.
    @Sendable
    public func updateFunction(_ input: UpdateFunctionRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> UpdateFunctionResult {
        return try await self.client.execute(
            operation: "UpdateFunction", 
            path: "/2020-05-31/function/{Name}", 
            httpMethod: .PUT, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Updates a key group. When you update a key group, all the fields are updated with the values provided in
    /// 			the request. You cannot update some fields independent of others. To update a key
    /// 			group:   Get the current key group with GetKeyGroup or
    /// 						GetKeyGroupConfig.   Locally modify the fields in the key group that you want to update. For
    /// 					example, add or remove public key IDs.   Call UpdateKeyGroup with the entire key group object, including
    /// 					the fields that you modified and those that you didn't.
    @Sendable
    public func updateKeyGroup(_ input: UpdateKeyGroupRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> UpdateKeyGroupResult {
        return try await self.client.execute(
            operation: "UpdateKeyGroup", 
            path: "/2020-05-31/key-group/{Id}", 
            httpMethod: .PUT, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Updates a CloudFront origin access control.
    @Sendable
    public func updateOriginAccessControl(_ input: UpdateOriginAccessControlRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> UpdateOriginAccessControlResult {
        return try await self.client.execute(
            operation: "UpdateOriginAccessControl", 
            path: "/2020-05-31/origin-access-control/{Id}/config", 
            httpMethod: .PUT, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Updates an origin request policy configuration. When you update an origin request policy configuration, all the fields are updated
    /// 			with the values provided in the request. You cannot update some fields independent of
    /// 			others. To update an origin request policy configuration:   Use GetOriginRequestPolicyConfig to get the current
    /// 					configuration.   Locally modify the fields in the origin request policy configuration that you
    /// 					want to update.   Call UpdateOriginRequestPolicy by providing the entire origin
    /// 					request policy configuration, including the fields that you modified and those
    /// 					that you didn't.
    @Sendable
    public func updateOriginRequestPolicy(_ input: UpdateOriginRequestPolicyRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> UpdateOriginRequestPolicyResult {
        return try await self.client.execute(
            operation: "UpdateOriginRequestPolicy", 
            path: "/2020-05-31/origin-request-policy/{Id}", 
            httpMethod: .PUT, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Update public key information. Note that the only value you can change is the
    /// 			comment.
    @Sendable
    public func updatePublicKey(_ input: UpdatePublicKeyRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> UpdatePublicKeyResult {
        return try await self.client.execute(
            operation: "UpdatePublicKey", 
            path: "/2020-05-31/public-key/{Id}/config", 
            httpMethod: .PUT, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Updates a real-time log configuration. When you update a real-time log configuration, all the parameters are updated with the
    /// 			values provided in the request. You cannot update some parameters independent of others.
    /// 			To update a real-time log configuration:   Call GetRealtimeLogConfig to get the current real-time log
    /// 					configuration.   Locally modify the parameters in the real-time log configuration that you want
    /// 					to update.   Call this API (UpdateRealtimeLogConfig) by providing the entire
    /// 					real-time log configuration, including the parameters that you modified and
    /// 					those that you didn't.   You cannot update a real-time log configuration's Name or
    /// 				ARN.
    @Sendable
    public func updateRealtimeLogConfig(_ input: UpdateRealtimeLogConfigRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> UpdateRealtimeLogConfigResult {
        return try await self.client.execute(
            operation: "UpdateRealtimeLogConfig", 
            path: "/2020-05-31/realtime-log-config", 
            httpMethod: .PUT, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Updates a response headers policy. When you update a response headers policy, the entire policy is replaced. You cannot
    /// 			update some policy fields independent of others. To update a response headers policy
    /// 			configuration:   Use GetResponseHeadersPolicyConfig to get the current policy's
    /// 					configuration.   Modify the fields in the response headers policy configuration that you want
    /// 					to update.   Call UpdateResponseHeadersPolicy, providing the entire response
    /// 					headers policy configuration, including the fields that you modified and those
    /// 					that you didn't.
    @Sendable
    public func updateResponseHeadersPolicy(_ input: UpdateResponseHeadersPolicyRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> UpdateResponseHeadersPolicyResult {
        return try await self.client.execute(
            operation: "UpdateResponseHeadersPolicy", 
            path: "/2020-05-31/response-headers-policy/{Id}", 
            httpMethod: .PUT, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Update a streaming distribution.
    @Sendable
    public func updateStreamingDistribution(_ input: UpdateStreamingDistributionRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> UpdateStreamingDistributionResult {
        return try await self.client.execute(
            operation: "UpdateStreamingDistribution", 
            path: "/2020-05-31/streaming-distribution/{Id}/config", 
            httpMethod: .PUT, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
}

extension CloudFront {
    /// Initializer required by `AWSService.with(middlewares:timeout:byteBufferAllocator:options)`. You are not able to use this initializer directly as there are not public
    /// initializers for `AWSServiceConfig.Patch`. Please use `AWSService.with(middlewares:timeout:byteBufferAllocator:options)` instead.
    public init(from: CloudFront, patch: AWSServiceConfig.Patch) {
        self.client = from.client
        self.config = from.config.with(patch: patch)
    }
}

// MARK: Paginators

@available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
extension CloudFront {
    /// Lists origin access identities.
    /// Return PaginatorSequence for operation.
    ///
    /// - Parameters:
    ///   - input: Input for request
    ///   - logger: Logger used flot logging
    public func listCloudFrontOriginAccessIdentitiesPaginator(
        _ input: ListCloudFrontOriginAccessIdentitiesRequest,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<ListCloudFrontOriginAccessIdentitiesRequest, ListCloudFrontOriginAccessIdentitiesResult> {
        return .init(
            input: input,
            command: self.listCloudFrontOriginAccessIdentities,
            inputKey: \ListCloudFrontOriginAccessIdentitiesRequest.marker,
            outputKey: \ListCloudFrontOriginAccessIdentitiesResult.cloudFrontOriginAccessIdentityList.nextMarker,
            logger: logger
        )
    }

    /// List CloudFront distributions.
    /// Return PaginatorSequence for operation.
    ///
    /// - Parameters:
    ///   - input: Input for request
    ///   - logger: Logger used flot logging
    public func listDistributionsPaginator(
        _ input: ListDistributionsRequest,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<ListDistributionsRequest, ListDistributionsResult> {
        return .init(
            input: input,
            command: self.listDistributions,
            inputKey: \ListDistributionsRequest.marker,
            outputKey: \ListDistributionsResult.distributionList.nextMarker,
            logger: logger
        )
    }

    /// Lists invalidation batches.
    /// Return PaginatorSequence for operation.
    ///
    /// - Parameters:
    ///   - input: Input for request
    ///   - logger: Logger used flot logging
    public func listInvalidationsPaginator(
        _ input: ListInvalidationsRequest,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<ListInvalidationsRequest, ListInvalidationsResult> {
        return .init(
            input: input,
            command: self.listInvalidations,
            inputKey: \ListInvalidationsRequest.marker,
            outputKey: \ListInvalidationsResult.invalidationList.nextMarker,
            logger: logger
        )
    }

    /// List streaming distributions.
    /// Return PaginatorSequence for operation.
    ///
    /// - Parameters:
    ///   - input: Input for request
    ///   - logger: Logger used flot logging
    public func listStreamingDistributionsPaginator(
        _ input: ListStreamingDistributionsRequest,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<ListStreamingDistributionsRequest, ListStreamingDistributionsResult> {
        return .init(
            input: input,
            command: self.listStreamingDistributions,
            inputKey: \ListStreamingDistributionsRequest.marker,
            outputKey: \ListStreamingDistributionsResult.streamingDistributionList.nextMarker,
            logger: logger
        )
    }
}

extension CloudFront.ListCloudFrontOriginAccessIdentitiesRequest: AWSPaginateToken {
    public func usingPaginationToken(_ token: String) -> CloudFront.ListCloudFrontOriginAccessIdentitiesRequest {
        return .init(
            marker: token,
            maxItems: self.maxItems
        )
    }
}

extension CloudFront.ListDistributionsRequest: AWSPaginateToken {
    public func usingPaginationToken(_ token: String) -> CloudFront.ListDistributionsRequest {
        return .init(
            marker: token,
            maxItems: self.maxItems
        )
    }
}

extension CloudFront.ListInvalidationsRequest: AWSPaginateToken {
    public func usingPaginationToken(_ token: String) -> CloudFront.ListInvalidationsRequest {
        return .init(
            distributionId: self.distributionId,
            marker: token,
            maxItems: self.maxItems
        )
    }
}

extension CloudFront.ListStreamingDistributionsRequest: AWSPaginateToken {
    public func usingPaginationToken(_ token: String) -> CloudFront.ListStreamingDistributionsRequest {
        return .init(
            marker: token,
            maxItems: self.maxItems
        )
    }
}

// MARK: Waiters

@available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
extension CloudFront {
    public func waitUntilDistributionDeployed(
        _ input: GetDistributionRequest,
        maxWaitTime: TimeAmount? = nil,
        logger: Logger = AWSClient.loggingDisabled
    ) async throws {
        let waiter = AWSClient.Waiter(
            acceptors: [
                .init(state: .success, matcher: try! JMESPathMatcher("distribution.status", expected: "Deployed")),
            ],
            minDelayTime: .seconds(60),
            command: self.getDistribution
        )
        return try await self.client.waitUntil(input, waiter: waiter, maxWaitTime: maxWaitTime, logger: logger)
    }

    public func waitUntilInvalidationCompleted(
        _ input: GetInvalidationRequest,
        maxWaitTime: TimeAmount? = nil,
        logger: Logger = AWSClient.loggingDisabled
    ) async throws {
        let waiter = AWSClient.Waiter(
            acceptors: [
                .init(state: .success, matcher: try! JMESPathMatcher("invalidation.status", expected: "Completed")),
            ],
            minDelayTime: .seconds(20),
            command: self.getInvalidation
        )
        return try await self.client.waitUntil(input, waiter: waiter, maxWaitTime: maxWaitTime, logger: logger)
    }

    public func waitUntilStreamingDistributionDeployed(
        _ input: GetStreamingDistributionRequest,
        maxWaitTime: TimeAmount? = nil,
        logger: Logger = AWSClient.loggingDisabled
    ) async throws {
        let waiter = AWSClient.Waiter(
            acceptors: [
                .init(state: .success, matcher: try! JMESPathMatcher("streamingDistribution.status", expected: "Deployed")),
            ],
            minDelayTime: .seconds(60),
            command: self.getStreamingDistribution
        )
        return try await self.client.waitUntil(input, waiter: waiter, maxWaitTime: maxWaitTime, logger: logger)
    }
}
