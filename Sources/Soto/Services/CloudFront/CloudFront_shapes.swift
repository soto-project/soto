//===----------------------------------------------------------------------===//
//
// This source file is part of the Soto for AWS open source project
//
// Copyright (c) 2017-2023 the Soto project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
// See CONTRIBUTORS.txt for the list of Soto project authors
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by https://github.com/soto-project/soto-codegenerator.
// DO NOT EDIT.

#if os(Linux) && compiler(<5.10)
// swift-corelibs-foundation hasn't been updated with Sendable conformances
@preconcurrency import Foundation
#else
import Foundation
#endif
@_spi(SotoInternal) import SotoCore

extension CloudFront {
    // MARK: Enums

    public enum CachePolicyCookieBehavior: String, CustomStringConvertible, Codable, Sendable, CodingKeyRepresentable {
        case all = "all"
        case allExcept = "allExcept"
        case none = "none"
        case whitelist = "whitelist"
        public var description: String { return self.rawValue }
    }

    public enum CachePolicyHeaderBehavior: String, CustomStringConvertible, Codable, Sendable, CodingKeyRepresentable {
        case none = "none"
        case whitelist = "whitelist"
        public var description: String { return self.rawValue }
    }

    public enum CachePolicyQueryStringBehavior: String, CustomStringConvertible, Codable, Sendable, CodingKeyRepresentable {
        case all = "all"
        case allExcept = "allExcept"
        case none = "none"
        case whitelist = "whitelist"
        public var description: String { return self.rawValue }
    }

    public enum CachePolicyType: String, CustomStringConvertible, Codable, Sendable, CodingKeyRepresentable {
        case custom = "custom"
        case managed = "managed"
        public var description: String { return self.rawValue }
    }

    public enum CertificateSource: String, CustomStringConvertible, Codable, Sendable, CodingKeyRepresentable {
        case acm = "acm"
        case cloudfront = "cloudfront"
        case iam = "iam"
        public var description: String { return self.rawValue }
    }

    public enum ContinuousDeploymentPolicyType: String, CustomStringConvertible, Codable, Sendable, CodingKeyRepresentable {
        case singleHeader = "SingleHeader"
        case singleWeight = "SingleWeight"
        public var description: String { return self.rawValue }
    }

    public enum EventType: String, CustomStringConvertible, Codable, Sendable, CodingKeyRepresentable {
        case originRequest = "origin-request"
        case originResponse = "origin-response"
        case viewerRequest = "viewer-request"
        case viewerResponse = "viewer-response"
        public var description: String { return self.rawValue }
    }

    public enum Format: String, CustomStringConvertible, Codable, Sendable, CodingKeyRepresentable {
        case urlEncoded = "URLEncoded"
        public var description: String { return self.rawValue }
    }

    public enum FrameOptionsList: String, CustomStringConvertible, Codable, Sendable, CodingKeyRepresentable {
        case deny = "DENY"
        case sameorigin = "SAMEORIGIN"
        public var description: String { return self.rawValue }
    }

    public enum FunctionRuntime: String, CustomStringConvertible, Codable, Sendable, CodingKeyRepresentable {
        case cloudfrontJs10 = "cloudfront-js-1.0"
        case cloudfrontJs20 = "cloudfront-js-2.0"
        public var description: String { return self.rawValue }
    }

    public enum FunctionStage: String, CustomStringConvertible, Codable, Sendable, CodingKeyRepresentable {
        case development = "DEVELOPMENT"
        case live = "LIVE"
        public var description: String { return self.rawValue }
    }

    public enum GeoRestrictionType: String, CustomStringConvertible, Codable, Sendable, CodingKeyRepresentable {
        case blacklist = "blacklist"
        case none = "none"
        case whitelist = "whitelist"
        public var description: String { return self.rawValue }
    }

    public enum HttpVersion: String, CustomStringConvertible, Codable, Sendable, CodingKeyRepresentable {
        case http11 = "http1.1"
        case http2 = "http2"
        case http2and3 = "http2and3"
        case http3 = "http3"
        public var description: String { return self.rawValue }
    }

    public enum ICPRecordalStatus: String, CustomStringConvertible, Codable, Sendable, CodingKeyRepresentable {
        case approved = "APPROVED"
        case pending = "PENDING"
        case suspended = "SUSPENDED"
        public var description: String { return self.rawValue }
    }

    public enum ImportSourceType: String, CustomStringConvertible, Codable, Sendable, CodingKeyRepresentable {
        case s3 = "S3"
        public var description: String { return self.rawValue }
    }

    public enum ItemSelection: String, CustomStringConvertible, Codable, Sendable, CodingKeyRepresentable {
        case all = "all"
        case none = "none"
        case whitelist = "whitelist"
        public var description: String { return self.rawValue }
    }

    public enum Method: String, CustomStringConvertible, Codable, Sendable, CodingKeyRepresentable {
        case delete = "DELETE"
        case get = "GET"
        case head = "HEAD"
        case options = "OPTIONS"
        case patch = "PATCH"
        case post = "POST"
        case put = "PUT"
        public var description: String { return self.rawValue }
    }

    public enum MinimumProtocolVersion: String, CustomStringConvertible, Codable, Sendable, CodingKeyRepresentable {
        case ssLv3 = "SSLv3"
        case tlSv1 = "TLSv1"
        case tlSv112016 = "TLSv1.1_2016"
        case tlSv12016 = "TLSv1_2016"
        case tlSv122018 = "TLSv1.2_2018"
        case tlSv122019 = "TLSv1.2_2019"
        case tlSv122021 = "TLSv1.2_2021"
        public var description: String { return self.rawValue }
    }

    public enum OriginAccessControlOriginTypes: String, CustomStringConvertible, Codable, Sendable, CodingKeyRepresentable {
        case mediastore = "mediastore"
        case s3 = "s3"
        public var description: String { return self.rawValue }
    }

    public enum OriginAccessControlSigningBehaviors: String, CustomStringConvertible, Codable, Sendable, CodingKeyRepresentable {
        case always = "always"
        case never = "never"
        case noOverride = "no-override"
        public var description: String { return self.rawValue }
    }

    public enum OriginAccessControlSigningProtocols: String, CustomStringConvertible, Codable, Sendable, CodingKeyRepresentable {
        case sigv4 = "sigv4"
        public var description: String { return self.rawValue }
    }

    public enum OriginProtocolPolicy: String, CustomStringConvertible, Codable, Sendable, CodingKeyRepresentable {
        case httpOnly = "http-only"
        case httpsOnly = "https-only"
        case matchViewer = "match-viewer"
        public var description: String { return self.rawValue }
    }

    public enum OriginRequestPolicyCookieBehavior: String, CustomStringConvertible, Codable, Sendable, CodingKeyRepresentable {
        case all = "all"
        case allExcept = "allExcept"
        case none = "none"
        case whitelist = "whitelist"
        public var description: String { return self.rawValue }
    }

    public enum OriginRequestPolicyHeaderBehavior: String, CustomStringConvertible, Codable, Sendable, CodingKeyRepresentable {
        case allExcept = "allExcept"
        case allViewer = "allViewer"
        case allViewerAndWhitelistCloudFront = "allViewerAndWhitelistCloudFront"
        case none = "none"
        case whitelist = "whitelist"
        public var description: String { return self.rawValue }
    }

    public enum OriginRequestPolicyQueryStringBehavior: String, CustomStringConvertible, Codable, Sendable, CodingKeyRepresentable {
        case all = "all"
        case allExcept = "allExcept"
        case none = "none"
        case whitelist = "whitelist"
        public var description: String { return self.rawValue }
    }

    public enum OriginRequestPolicyType: String, CustomStringConvertible, Codable, Sendable, CodingKeyRepresentable {
        case custom = "custom"
        case managed = "managed"
        public var description: String { return self.rawValue }
    }

    public enum PriceClass: String, CustomStringConvertible, Codable, Sendable, CodingKeyRepresentable {
        case priceClass100 = "PriceClass_100"
        case priceClass200 = "PriceClass_200"
        case priceClassAll = "PriceClass_All"
        public var description: String { return self.rawValue }
    }

    public enum RealtimeMetricsSubscriptionStatus: String, CustomStringConvertible, Codable, Sendable, CodingKeyRepresentable {
        case disabled = "Disabled"
        case enabled = "Enabled"
        public var description: String { return self.rawValue }
    }

    public enum ReferrerPolicyList: String, CustomStringConvertible, Codable, Sendable, CodingKeyRepresentable {
        case noReferrer = "no-referrer"
        case noReferrerWhenDowngrade = "no-referrer-when-downgrade"
        case origin = "origin"
        case originWhenCrossOrigin = "origin-when-cross-origin"
        case sameOrigin = "same-origin"
        case strictOrigin = "strict-origin"
        case strictOriginWhenCrossOrigin = "strict-origin-when-cross-origin"
        case unsafeUrl = "unsafe-url"
        public var description: String { return self.rawValue }
    }

    public enum ResponseHeadersPolicyAccessControlAllowMethodsValues: String, CustomStringConvertible, Codable, Sendable, CodingKeyRepresentable {
        case all = "ALL"
        case delete = "DELETE"
        case get = "GET"
        case head = "HEAD"
        case options = "OPTIONS"
        case patch = "PATCH"
        case post = "POST"
        case put = "PUT"
        public var description: String { return self.rawValue }
    }

    public enum ResponseHeadersPolicyType: String, CustomStringConvertible, Codable, Sendable, CodingKeyRepresentable {
        case custom = "custom"
        case managed = "managed"
        public var description: String { return self.rawValue }
    }

    public enum SSLSupportMethod: String, CustomStringConvertible, Codable, Sendable, CodingKeyRepresentable {
        case sniOnly = "sni-only"
        case staticIp = "static-ip"
        case vip = "vip"
        public var description: String { return self.rawValue }
    }

    public enum SslProtocol: String, CustomStringConvertible, Codable, Sendable, CodingKeyRepresentable {
        case ssLv3 = "SSLv3"
        case tlSv1 = "TLSv1"
        case tlSv11 = "TLSv1.1"
        case tlSv12 = "TLSv1.2"
        public var description: String { return self.rawValue }
    }

    public enum UppercaseHttpVersion: String, CustomStringConvertible, Codable, Sendable, CodingKeyRepresentable {
        case http11 = "HTTP1_1"
        case http2 = "HTTP2"
        public var description: String { return self.rawValue }
    }

    public enum ViewerProtocolPolicy: String, CustomStringConvertible, Codable, Sendable, CodingKeyRepresentable {
        case allowAll = "allow-all"
        case httpsOnly = "https-only"
        case redirectToHttps = "redirect-to-https"
        public var description: String { return self.rawValue }
    }

    // MARK: Shapes

    public struct ActiveTrustedKeyGroups: AWSDecodableShape {
        public struct _ItemsEncoding: ArrayCoderProperties { public static let member = "KeyGroup" }

        /// This field is true if any of the key groups have public keys that CloudFront
        /// 			can use to verify the signatures of signed URLs and signed cookies. If not, this field
        /// 			is false.
        public let enabled: Bool
        /// A list of key groups, including the identifiers of the public keys in each key group
        /// 			that CloudFront can use to verify the signatures of signed URLs and signed cookies.
        @OptionalCustomCoding<ArrayCoder<_ItemsEncoding, KGKeyPairIds>>
        public var items: [KGKeyPairIds]?
        /// The number of key groups in the list.
        public let quantity: Int

        public init(enabled: Bool, items: [KGKeyPairIds]? = nil, quantity: Int) {
            self.enabled = enabled
            self.items = items
            self.quantity = quantity
        }

        private enum CodingKeys: String, CodingKey {
            case enabled = "Enabled"
            case items = "Items"
            case quantity = "Quantity"
        }
    }

    public struct ActiveTrustedSigners: AWSDecodableShape {
        public struct _ItemsEncoding: ArrayCoderProperties { public static let member = "Signer" }

        /// This field is true if any of the Amazon Web Services accounts in the list are configured as
        /// 			trusted signers. If not, this field is false.
        public let enabled: Bool
        /// A list of Amazon Web Services accounts and the identifiers of active CloudFront key pairs in each account
        /// 			that CloudFront can use to verify the signatures of signed URLs and signed cookies.
        @OptionalCustomCoding<ArrayCoder<_ItemsEncoding, Signer>>
        public var items: [Signer]?
        /// The number of Amazon Web Services accounts in the list.
        public let quantity: Int

        public init(enabled: Bool, items: [Signer]? = nil, quantity: Int) {
            self.enabled = enabled
            self.items = items
            self.quantity = quantity
        }

        private enum CodingKeys: String, CodingKey {
            case enabled = "Enabled"
            case items = "Items"
            case quantity = "Quantity"
        }
    }

    public struct AliasICPRecordal: AWSDecodableShape {
        /// A domain name associated with a distribution.
        public let cname: String?
        /// The Internet Content Provider (ICP) recordal status for a CNAME. The ICPRecordalStatus
        /// 			is set to APPROVED for all CNAMEs (aliases) in regions outside of China. The status values returned are the following:    APPROVED indicates that the associated CNAME
        /// 					has a valid ICP recordal number. Multiple CNAMEs can be associated with a
        /// 					distribution, and CNAMEs can correspond to different ICP recordals. To be marked
        /// 					as APPROVED, that is, valid to use with China region, a CNAME must have one ICP
        /// 					recordal number associated with it.    SUSPENDED indicates that the associated CNAME
        /// 					does not have a valid ICP recordal number.    PENDING indicates that CloudFront can't determine
        /// 					the ICP recordal status of the CNAME associated with the distribution because
        /// 					there was an error in trying to determine the status. You can try again to see
        /// 					if the error is resolved in which case CloudFront returns an APPROVED or SUSPENDED
        /// 					status.
        public let icpRecordalStatus: ICPRecordalStatus?

        public init(cname: String? = nil, icpRecordalStatus: ICPRecordalStatus? = nil) {
            self.cname = cname
            self.icpRecordalStatus = icpRecordalStatus
        }

        private enum CodingKeys: String, CodingKey {
            case cname = "CNAME"
            case icpRecordalStatus = "ICPRecordalStatus"
        }
    }

    public struct Aliases: AWSEncodableShape & AWSDecodableShape {
        public struct _ItemsEncoding: ArrayCoderProperties { public static let member = "CNAME" }

        /// A complex type that contains the CNAME aliases, if any, that you want to associate
        /// 			with this distribution.
        @OptionalCustomCoding<ArrayCoder<_ItemsEncoding, String>>
        public var items: [String]?
        /// The number of CNAME aliases, if any, that you want to associate with this
        /// 			distribution.
        public let quantity: Int

        public init(items: [String]? = nil, quantity: Int) {
            self.items = items
            self.quantity = quantity
        }

        private enum CodingKeys: String, CodingKey {
            case items = "Items"
            case quantity = "Quantity"
        }
    }

    public struct AllowedMethods: AWSEncodableShape & AWSDecodableShape {
        public struct _ItemsEncoding: ArrayCoderProperties { public static let member = "Method" }

        public let cachedMethods: CachedMethods?
        /// A complex type that contains the HTTP methods that you want CloudFront to process and
        /// 			forward to your origin.
        @CustomCoding<ArrayCoder<_ItemsEncoding, Method>>
        public var items: [Method]
        /// The number of HTTP methods that you want CloudFront to forward to your origin. Valid values
        /// 			are 2 (for GET and HEAD requests), 3 (for GET,
        /// 				HEAD, and OPTIONS requests) and 7 (for GET, HEAD,
        /// 				OPTIONS, PUT, PATCH, POST, and DELETE requests).
        public let quantity: Int

        public init(cachedMethods: CachedMethods? = nil, items: [Method], quantity: Int) {
            self.cachedMethods = cachedMethods
            self.items = items
            self.quantity = quantity
        }

        private enum CodingKeys: String, CodingKey {
            case cachedMethods = "CachedMethods"
            case items = "Items"
            case quantity = "Quantity"
        }
    }

    public struct AssociateAliasRequest: AWSEncodableShape {
        /// The alias (also known as a CNAME) to add to the target distribution.
        public let alias: String
        /// The ID of the distribution that you're associating the alias with.
        public let targetDistributionId: String

        public init(alias: String, targetDistributionId: String) {
            self.alias = alias
            self.targetDistributionId = targetDistributionId
        }

        public func encode(to encoder: Encoder) throws {
            let request = encoder.userInfo[.awsRequest]! as! RequestEncodingContainer
            _ = encoder.container(keyedBy: CodingKeys.self)
            request.encodeQuery(self.alias, key: "Alias")
            request.encodePath(self.targetDistributionId, key: "TargetDistributionId")
        }

        private enum CodingKeys: CodingKey {}
    }

    public struct CacheBehavior: AWSEncodableShape & AWSDecodableShape {
        public let allowedMethods: AllowedMethods?
        /// The unique identifier of the cache policy that is attached to this cache behavior. For
        /// 			more information, see Creating cache policies or Using the managed cache policies in the
        /// 				Amazon CloudFront Developer Guide. A CacheBehavior must include either a CachePolicyId or
        /// 				ForwardedValues. We recommend that you use a
        /// 			CachePolicyId.
        public let cachePolicyId: String?
        /// Whether you want CloudFront to automatically compress certain files for this cache behavior.
        /// 			If so, specify true; if not, specify false. For more information, see Serving
        /// 				Compressed Files in the Amazon CloudFront Developer Guide.
        public let compress: Bool?
        /// This field is deprecated. We recommend that you use the DefaultTTL field
        /// 			in a cache policy instead of this field. For more information, see Creating cache policies or Using the managed cache policies in the
        /// 				Amazon CloudFront Developer Guide. The default amount of time that you want objects to stay in CloudFront caches before CloudFront
        /// 			forwards another request to your origin to determine whether the object has been
        /// 			updated. The value that you specify applies only when your origin does not add HTTP
        /// 			headers such as Cache-Control max-age, Cache-Control s-maxage,
        /// 			and Expires to objects. For more information, see Managing How Long Content Stays in an Edge Cache (Expiration) in the
        /// 				Amazon CloudFront Developer Guide.
        public let defaultTTL: Int64?
        /// The value of ID for the field-level encryption configuration that you
        /// 			want CloudFront to use for encrypting specific fields of data for this cache behavior.
        public let fieldLevelEncryptionId: String?
        /// This field is deprecated. We recommend that you use a cache policy or an origin
        /// 			request policy instead of this field. For more information, see Working with policies in the
        /// 				Amazon CloudFront Developer Guide. If you want to include values in the cache key, use a cache policy. For more
        /// 			information, see Creating cache policies or Using the managed cache policies in the
        /// 				Amazon CloudFront Developer Guide. If you want to send values to the origin but not include them in the cache key, use an
        /// 			origin request policy. For more information, see Creating origin request policies or Using the managed origin request policies in the
        /// 				Amazon CloudFront Developer Guide. A CacheBehavior must include either a CachePolicyId or
        /// 				ForwardedValues. We recommend that you use a
        /// 			CachePolicyId. A complex type that specifies how CloudFront handles query strings, cookies, and HTTP
        /// 			headers.
        public let forwardedValues: ForwardedValues?
        /// A list of CloudFront functions that are associated with this cache behavior. CloudFront functions
        /// 			must be published to the LIVE stage to associate them with a cache
        /// 			behavior.
        public let functionAssociations: FunctionAssociations?
        /// A complex type that contains zero or more Lambda@Edge function associations for a
        /// 			cache behavior.
        public let lambdaFunctionAssociations: LambdaFunctionAssociations?
        /// This field is deprecated. We recommend that you use the MaxTTL field in a
        /// 			cache policy instead of this field. For more information, see Creating cache policies or Using the managed cache policies in the
        /// 				Amazon CloudFront Developer Guide. The maximum amount of time that you want objects to stay in CloudFront caches before CloudFront
        /// 			forwards another request to your origin to determine whether the object has been
        /// 			updated. The value that you specify applies only when your origin adds HTTP headers such
        /// 			as Cache-Control max-age, Cache-Control s-maxage, and
        /// 				Expires to objects. For more information, see Managing How Long Content Stays in an Edge Cache (Expiration) in the
        /// 				Amazon CloudFront Developer Guide.
        public let maxTTL: Int64?
        /// This field is deprecated. We recommend that you use the MinTTL field in a
        /// 			cache policy instead of this field. For more information, see Creating cache policies or Using the managed cache policies in the
        /// 				Amazon CloudFront Developer Guide. The minimum amount of time that you want objects to stay in CloudFront caches before CloudFront
        /// 			forwards another request to your origin to determine whether the object has been
        /// 			updated. For more information, see  Managing How Long
        /// 				Content Stays in an Edge Cache (Expiration) in the
        /// 				Amazon CloudFront Developer Guide. You must specify 0 for MinTTL if you configure CloudFront to
        /// 			forward all headers to your origin (under Headers, if you specify
        /// 				1 for Quantity and * for
        /// 			Name).
        public let minTTL: Int64?
        /// The unique identifier of the origin request policy that is attached to this cache
        /// 			behavior. For more information, see Creating origin request policies or Using the managed origin request policies in the
        /// 				Amazon CloudFront Developer Guide.
        public let originRequestPolicyId: String?
        /// The pattern (for example, images/*.jpg) that specifies which requests to
        /// 			apply the behavior to. When CloudFront receives a viewer request, the requested path is
        /// 			compared with path patterns in the order in which cache behaviors are listed in the
        /// 			distribution.  You can optionally include a slash (/) at the beginning of the path
        /// 				pattern. For example, /images/*.jpg. CloudFront behavior is the same with or
        /// 				without the leading /.  The path pattern for the default cache behavior is * and cannot be
        /// 			changed. If the request for an object does not match the path pattern for any cache
        /// 			behaviors, CloudFront applies the behavior in the default cache behavior. For more information, see Path Pattern in the  Amazon CloudFront Developer Guide.
        public let pathPattern: String
        /// The Amazon Resource Name (ARN) of the real-time log configuration that is attached to
        /// 			this cache behavior. For more information, see Real-time logs in the
        /// 				Amazon CloudFront Developer Guide.
        public let realtimeLogConfigArn: String?
        /// The identifier for a response headers policy.
        public let responseHeadersPolicyId: String?
        /// Indicates whether you want to distribute media files in the Microsoft Smooth Streaming
        /// 			format using the origin that is associated with this cache behavior. If so, specify
        /// 				true; if not, specify false. If you specify
        /// 				true for SmoothStreaming, you can still distribute other
        /// 			content using this cache behavior if the content matches the value of
        /// 				PathPattern.
        public let smoothStreaming: Bool?
        /// The value of ID for the origin that you want CloudFront to route requests to
        /// 			when they match this cache behavior.
        public let targetOriginId: String
        /// A list of key groups that CloudFront can use to validate signed URLs or signed
        /// 			cookies. When a cache behavior contains trusted key groups, CloudFront requires signed URLs or signed
        /// 			cookies for all requests that match the cache behavior. The URLs or cookies must be
        /// 			signed with a private key whose corresponding public key is in the key group. The signed
        /// 			URL or cookie contains information about which public key CloudFront should use to verify the
        /// 			signature. For more information, see Serving private content in the
        /// 				Amazon CloudFront Developer Guide.
        public let trustedKeyGroups: TrustedKeyGroups?
        ///  We recommend using TrustedKeyGroups instead of
        /// 					TrustedSigners.  A list of Amazon Web Services account IDs whose public keys CloudFront can use to validate signed URLs or
        /// 			signed cookies. When a cache behavior contains trusted signers, CloudFront requires signed URLs or signed
        /// 			cookies for all requests that match the cache behavior. The URLs or cookies must be
        /// 			signed with the private key of a CloudFront key pair in the trusted signer's Amazon Web Services account.
        /// 			The signed URL or cookie contains information about which public key CloudFront should use to
        /// 			verify the signature. For more information, see Serving private content in the
        /// 				Amazon CloudFront Developer Guide.
        public let trustedSigners: TrustedSigners?
        /// The protocol that viewers can use to access the files in the origin specified by
        /// 				TargetOriginId when a request matches the path pattern in
        /// 				PathPattern. You can specify the following options:    allow-all: Viewers can use HTTP or HTTPS.    redirect-to-https: If a viewer submits an HTTP request, CloudFront
        /// 					returns an HTTP status code of 301 (Moved Permanently) to the viewer along with
        /// 					the HTTPS URL. The viewer then resubmits the request using the new URL.    https-only: If a viewer sends an HTTP request, CloudFront returns an
        /// 					HTTP status code of 403 (Forbidden).   For more information about requiring the HTTPS protocol, see Requiring HTTPS Between Viewers and CloudFront in the
        /// 				Amazon CloudFront Developer Guide.  The only way to guarantee that viewers retrieve an object that was fetched from
        /// 				the origin using HTTPS is never to use any other protocol to fetch the object. If
        /// 				you have recently changed from HTTP to HTTPS, we recommend that you clear your
        /// 				objects' cache because cached objects are protocol agnostic. That means that an edge
        /// 				location will return an object from the cache regardless of whether the current
        /// 				request protocol matches the protocol used previously. For more information, see
        /// 					Managing Cache
        /// 					Expiration in the Amazon CloudFront Developer Guide.
        public let viewerProtocolPolicy: ViewerProtocolPolicy

        public init(allowedMethods: AllowedMethods? = nil, cachePolicyId: String? = nil, compress: Bool? = nil, fieldLevelEncryptionId: String? = nil, functionAssociations: FunctionAssociations? = nil, lambdaFunctionAssociations: LambdaFunctionAssociations? = nil, originRequestPolicyId: String? = nil, pathPattern: String, realtimeLogConfigArn: String? = nil, responseHeadersPolicyId: String? = nil, smoothStreaming: Bool? = nil, targetOriginId: String, trustedKeyGroups: TrustedKeyGroups? = nil, trustedSigners: TrustedSigners? = nil, viewerProtocolPolicy: ViewerProtocolPolicy) {
            self.allowedMethods = allowedMethods
            self.cachePolicyId = cachePolicyId
            self.compress = compress
            self.defaultTTL = nil
            self.fieldLevelEncryptionId = fieldLevelEncryptionId
            self.forwardedValues = nil
            self.functionAssociations = functionAssociations
            self.lambdaFunctionAssociations = lambdaFunctionAssociations
            self.maxTTL = nil
            self.minTTL = nil
            self.originRequestPolicyId = originRequestPolicyId
            self.pathPattern = pathPattern
            self.realtimeLogConfigArn = realtimeLogConfigArn
            self.responseHeadersPolicyId = responseHeadersPolicyId
            self.smoothStreaming = smoothStreaming
            self.targetOriginId = targetOriginId
            self.trustedKeyGroups = trustedKeyGroups
            self.trustedSigners = trustedSigners
            self.viewerProtocolPolicy = viewerProtocolPolicy
        }

        @available(*, deprecated, message: "Members defaultTTL, forwardedValues, maxTTL, minTTL have been deprecated")
        public init(allowedMethods: AllowedMethods? = nil, cachePolicyId: String? = nil, compress: Bool? = nil, defaultTTL: Int64? = nil, fieldLevelEncryptionId: String? = nil, forwardedValues: ForwardedValues? = nil, functionAssociations: FunctionAssociations? = nil, lambdaFunctionAssociations: LambdaFunctionAssociations? = nil, maxTTL: Int64? = nil, minTTL: Int64? = nil, originRequestPolicyId: String? = nil, pathPattern: String, realtimeLogConfigArn: String? = nil, responseHeadersPolicyId: String? = nil, smoothStreaming: Bool? = nil, targetOriginId: String, trustedKeyGroups: TrustedKeyGroups? = nil, trustedSigners: TrustedSigners? = nil, viewerProtocolPolicy: ViewerProtocolPolicy) {
            self.allowedMethods = allowedMethods
            self.cachePolicyId = cachePolicyId
            self.compress = compress
            self.defaultTTL = defaultTTL
            self.fieldLevelEncryptionId = fieldLevelEncryptionId
            self.forwardedValues = forwardedValues
            self.functionAssociations = functionAssociations
            self.lambdaFunctionAssociations = lambdaFunctionAssociations
            self.maxTTL = maxTTL
            self.minTTL = minTTL
            self.originRequestPolicyId = originRequestPolicyId
            self.pathPattern = pathPattern
            self.realtimeLogConfigArn = realtimeLogConfigArn
            self.responseHeadersPolicyId = responseHeadersPolicyId
            self.smoothStreaming = smoothStreaming
            self.targetOriginId = targetOriginId
            self.trustedKeyGroups = trustedKeyGroups
            self.trustedSigners = trustedSigners
            self.viewerProtocolPolicy = viewerProtocolPolicy
        }

        public func validate(name: String) throws {
            try self.functionAssociations?.validate(name: "\(name).functionAssociations")
        }

        private enum CodingKeys: String, CodingKey {
            case allowedMethods = "AllowedMethods"
            case cachePolicyId = "CachePolicyId"
            case compress = "Compress"
            case defaultTTL = "DefaultTTL"
            case fieldLevelEncryptionId = "FieldLevelEncryptionId"
            case forwardedValues = "ForwardedValues"
            case functionAssociations = "FunctionAssociations"
            case lambdaFunctionAssociations = "LambdaFunctionAssociations"
            case maxTTL = "MaxTTL"
            case minTTL = "MinTTL"
            case originRequestPolicyId = "OriginRequestPolicyId"
            case pathPattern = "PathPattern"
            case realtimeLogConfigArn = "RealtimeLogConfigArn"
            case responseHeadersPolicyId = "ResponseHeadersPolicyId"
            case smoothStreaming = "SmoothStreaming"
            case targetOriginId = "TargetOriginId"
            case trustedKeyGroups = "TrustedKeyGroups"
            case trustedSigners = "TrustedSigners"
            case viewerProtocolPolicy = "ViewerProtocolPolicy"
        }
    }

    public struct CacheBehaviors: AWSEncodableShape & AWSDecodableShape {
        public struct _ItemsEncoding: ArrayCoderProperties { public static let member = "CacheBehavior" }

        /// Optional: A complex type that contains cache behaviors for this distribution. If
        /// 				Quantity is 0, you can omit Items.
        @OptionalCustomCoding<ArrayCoder<_ItemsEncoding, CacheBehavior>>
        public var items: [CacheBehavior]?
        /// The number of cache behaviors for this distribution.
        public let quantity: Int

        public init(items: [CacheBehavior]? = nil, quantity: Int) {
            self.items = items
            self.quantity = quantity
        }

        public func validate(name: String) throws {
            try self.items?.forEach {
                try $0.validate(name: "\(name).items[]")
            }
        }

        private enum CodingKeys: String, CodingKey {
            case items = "Items"
            case quantity = "Quantity"
        }
    }

    public struct CachePolicy: AWSDecodableShape {
        /// The cache policy configuration.
        public let cachePolicyConfig: CachePolicyConfig
        /// The unique identifier for the cache policy.
        public let id: String
        /// The date and time when the cache policy was last modified.
        public let lastModifiedTime: Date

        public init(cachePolicyConfig: CachePolicyConfig, id: String, lastModifiedTime: Date) {
            self.cachePolicyConfig = cachePolicyConfig
            self.id = id
            self.lastModifiedTime = lastModifiedTime
        }

        private enum CodingKeys: String, CodingKey {
            case cachePolicyConfig = "CachePolicyConfig"
            case id = "Id"
            case lastModifiedTime = "LastModifiedTime"
        }
    }

    public struct CachePolicyConfig: AWSEncodableShape & AWSDecodableShape {
        /// A comment to describe the cache policy. The comment cannot be longer than 128
        /// 			characters.
        public let comment: String?
        /// The default amount of time, in seconds, that you want objects to stay in the CloudFront
        /// 			cache before CloudFront sends another request to the origin to see if the object has been
        /// 			updated. CloudFront uses this value as the object's time to live (TTL) only when the origin
        /// 			does not send Cache-Control or Expires
        /// 			headers with the object. For more information, see Managing How Long Content Stays in an Edge Cache (Expiration) in the
        /// 				Amazon CloudFront Developer Guide. The default value for this field is 86400 seconds (one day). If the value of
        /// 				MinTTL is more than 86400 seconds, then the default value for this
        /// 			field is the same as the value of MinTTL.
        public let defaultTTL: Int64?
        /// The maximum amount of time, in seconds, that objects stay in the CloudFront cache before
        /// 			CloudFront sends another request to the origin to see if the object has been updated. CloudFront
        /// 			uses this value only when the origin sends Cache-Control or
        /// 				Expires headers with the object. For more information, see Managing How Long Content Stays in an Edge Cache (Expiration) in the
        /// 				Amazon CloudFront Developer Guide. The default value for this field is 31536000 seconds (one year). If the value of
        /// 				MinTTL or DefaultTTL is more than 31536000 seconds, then
        /// 			the default value for this field is the same as the value of
        /// 			DefaultTTL.
        public let maxTTL: Int64?
        /// The minimum amount of time, in seconds, that you want objects to stay in the CloudFront
        /// 			cache before CloudFront sends another request to the origin to see if the object has been
        /// 			updated. For more information, see Managing How Long Content Stays in an Edge Cache (Expiration) in the
        /// 				Amazon CloudFront Developer Guide.
        public let minTTL: Int64
        /// A unique name to identify the cache policy.
        public let name: String
        /// The HTTP headers, cookies, and URL query strings to include in the cache key. The values
        /// 			included in the cache key are also included in requests that CloudFront sends to the
        /// 			origin.
        public let parametersInCacheKeyAndForwardedToOrigin: ParametersInCacheKeyAndForwardedToOrigin?

        public init(comment: String? = nil, defaultTTL: Int64? = nil, maxTTL: Int64? = nil, minTTL: Int64, name: String, parametersInCacheKeyAndForwardedToOrigin: ParametersInCacheKeyAndForwardedToOrigin? = nil) {
            self.comment = comment
            self.defaultTTL = defaultTTL
            self.maxTTL = maxTTL
            self.minTTL = minTTL
            self.name = name
            self.parametersInCacheKeyAndForwardedToOrigin = parametersInCacheKeyAndForwardedToOrigin
        }

        private enum CodingKeys: String, CodingKey {
            case comment = "Comment"
            case defaultTTL = "DefaultTTL"
            case maxTTL = "MaxTTL"
            case minTTL = "MinTTL"
            case name = "Name"
            case parametersInCacheKeyAndForwardedToOrigin = "ParametersInCacheKeyAndForwardedToOrigin"
        }
    }

    public struct CachePolicyCookiesConfig: AWSEncodableShape & AWSDecodableShape {
        /// Determines whether any cookies in viewer requests are included in the cache key and in
        /// 			requests that CloudFront sends to the origin. Valid values are:    none – No cookies in viewer requests are included in the cache key or in
        /// 					requests that CloudFront sends to the origin. Even when this field is set to
        /// 					none, any cookies that are listed in an
        /// 					OriginRequestPolicy are included in origin
        /// 					requests.    whitelist – Only the cookies in viewer requests that are listed in the
        /// 					CookieNames type are included in the cache key and in requests that
        /// 					CloudFront sends to the origin.    allExcept – All cookies in viewer requests are included in the cache key and
        /// 					in requests that CloudFront sends to the origin,  except for those that are listed in the
        /// 					CookieNames type, which are not included.    all – All cookies in viewer requests are included in the cache key and in
        /// 					requests that CloudFront sends to the origin.
        public let cookieBehavior: CachePolicyCookieBehavior
        public let cookies: CookieNames?

        public init(cookieBehavior: CachePolicyCookieBehavior, cookies: CookieNames? = nil) {
            self.cookieBehavior = cookieBehavior
            self.cookies = cookies
        }

        private enum CodingKeys: String, CodingKey {
            case cookieBehavior = "CookieBehavior"
            case cookies = "Cookies"
        }
    }

    public struct CachePolicyHeadersConfig: AWSEncodableShape & AWSDecodableShape {
        /// Determines whether any HTTP headers are included in the cache key and in requests that CloudFront
        /// 			sends to the origin. Valid values are:    none – No HTTP headers are included in the cache key or in requests that CloudFront
        /// 					sends to the origin. Even when this field is set to none, any
        /// 					headers that are listed in an OriginRequestPolicy are included in origin requests.    whitelist – Only the HTTP headers that are listed in the Headers
        /// 					type are included in the cache key and in requests that CloudFront sends to the
        /// 					origin.
        public let headerBehavior: CachePolicyHeaderBehavior
        public let headers: Headers?

        public init(headerBehavior: CachePolicyHeaderBehavior, headers: Headers? = nil) {
            self.headerBehavior = headerBehavior
            self.headers = headers
        }

        private enum CodingKeys: String, CodingKey {
            case headerBehavior = "HeaderBehavior"
            case headers = "Headers"
        }
    }

    public struct CachePolicyList: AWSDecodableShape {
        public struct _ItemsEncoding: ArrayCoderProperties { public static let member = "CachePolicySummary" }

        /// Contains the cache policies in the list.
        @OptionalCustomCoding<ArrayCoder<_ItemsEncoding, CachePolicySummary>>
        public var items: [CachePolicySummary]?
        /// The maximum number of cache policies requested.
        public let maxItems: Int
        /// If there are more items in the list than are in this response, this element is
        /// 			present. It contains the value that you should use in the Marker field of a
        /// 			subsequent request to continue listing cache policies where you left off.
        public let nextMarker: String?
        /// The total number of cache policies returned in the response.
        public let quantity: Int

        public init(items: [CachePolicySummary]? = nil, maxItems: Int, nextMarker: String? = nil, quantity: Int) {
            self.items = items
            self.maxItems = maxItems
            self.nextMarker = nextMarker
            self.quantity = quantity
        }

        private enum CodingKeys: String, CodingKey {
            case items = "Items"
            case maxItems = "MaxItems"
            case nextMarker = "NextMarker"
            case quantity = "Quantity"
        }
    }

    public struct CachePolicyQueryStringsConfig: AWSEncodableShape & AWSDecodableShape {
        /// Determines whether any URL query strings in viewer requests are included in the cache key
        /// 			and in requests that CloudFront sends to the origin. Valid values are:    none – No query strings in viewer requests are included in the cache key or
        /// 					in requests that CloudFront sends to the origin. Even when this field is set to
        /// 					none, any query strings that are listed in an
        /// 					OriginRequestPolicy are included in origin
        /// 					requests.    whitelist – Only the query strings in viewer requests that are listed in the
        /// 					QueryStringNames type are included in the cache key and in requests
        /// 					that CloudFront sends to the origin.    allExcept – All query strings in viewer requests are included in the cache
        /// 					key and in requests that CloudFront sends to the origin,  except those that are listed in the
        /// 					QueryStringNames type, which are not included.    all – All query strings in viewer requests are included in the cache key and
        /// 					in requests that CloudFront sends to the origin.
        public let queryStringBehavior: CachePolicyQueryStringBehavior
        /// Contains the specific query strings in viewer requests that either  are or  are
        /// 			not included in the cache key and in requests that CloudFront sends to
        /// 			the origin. The behavior depends on whether the QueryStringBehavior field
        /// 			in the CachePolicyQueryStringsConfig type is set to whitelist
        /// 			(the listed query strings  are
        /// 			included) or allExcept (the listed query strings  are not included, but all other query strings
        /// 			are).
        public let queryStrings: QueryStringNames?

        public init(queryStringBehavior: CachePolicyQueryStringBehavior, queryStrings: QueryStringNames? = nil) {
            self.queryStringBehavior = queryStringBehavior
            self.queryStrings = queryStrings
        }

        private enum CodingKeys: String, CodingKey {
            case queryStringBehavior = "QueryStringBehavior"
            case queryStrings = "QueryStrings"
        }
    }

    public struct CachePolicySummary: AWSDecodableShape {
        /// The cache policy.
        public let cachePolicy: CachePolicy
        /// The type of cache policy, either managed (created by Amazon Web Services) or
        /// 				custom (created in this Amazon Web Services account).
        public let type: CachePolicyType

        public init(cachePolicy: CachePolicy, type: CachePolicyType) {
            self.cachePolicy = cachePolicy
            self.type = type
        }

        private enum CodingKeys: String, CodingKey {
            case cachePolicy = "CachePolicy"
            case type = "Type"
        }
    }

    public struct CachedMethods: AWSEncodableShape & AWSDecodableShape {
        public struct _ItemsEncoding: ArrayCoderProperties { public static let member = "Method" }

        /// A complex type that contains the HTTP methods that you want CloudFront to cache responses
        /// 			to.
        @CustomCoding<ArrayCoder<_ItemsEncoding, Method>>
        public var items: [Method]
        /// The number of HTTP methods for which you want CloudFront to cache responses. Valid values
        /// 			are 2 (for caching responses to GET and HEAD
        /// 			requests) and 3 (for caching responses to GET,
        /// 				HEAD, and OPTIONS requests).
        public let quantity: Int

        public init(items: [Method], quantity: Int) {
            self.items = items
            self.quantity = quantity
        }

        private enum CodingKeys: String, CodingKey {
            case items = "Items"
            case quantity = "Quantity"
        }
    }

    public struct CloudFrontOriginAccessIdentity: AWSDecodableShape {
        /// The current configuration information for the identity.
        public let cloudFrontOriginAccessIdentityConfig: CloudFrontOriginAccessIdentityConfig?
        /// The ID for the origin access identity, for example, E74FTE3AJFJ256A.
        ///
        public let id: String
        /// The Amazon S3 canonical user ID for the origin access identity, used when giving the origin
        /// 			access identity read permission to an object in Amazon S3.
        public let s3CanonicalUserId: String

        public init(cloudFrontOriginAccessIdentityConfig: CloudFrontOriginAccessIdentityConfig? = nil, id: String, s3CanonicalUserId: String) {
            self.cloudFrontOriginAccessIdentityConfig = cloudFrontOriginAccessIdentityConfig
            self.id = id
            self.s3CanonicalUserId = s3CanonicalUserId
        }

        private enum CodingKeys: String, CodingKey {
            case cloudFrontOriginAccessIdentityConfig = "CloudFrontOriginAccessIdentityConfig"
            case id = "Id"
            case s3CanonicalUserId = "S3CanonicalUserId"
        }
    }

    public struct CloudFrontOriginAccessIdentityConfig: AWSEncodableShape & AWSDecodableShape {
        /// A unique value (for example, a date-time stamp) that ensures that the request can't be
        /// 			replayed. If the value of CallerReference is new (regardless of the content of the
        /// 				CloudFrontOriginAccessIdentityConfig object), a new origin access
        /// 			identity is created. If the CallerReference is a value already sent in a previous identity
        /// 			request, and the content of the CloudFrontOriginAccessIdentityConfig is
        /// 			identical to the original request (ignoring white space), the response includes the same
        /// 			information returned to the original request. If the CallerReference is a value you already sent in a previous request
        /// 			to create an identity, but the content of the
        /// 				CloudFrontOriginAccessIdentityConfig is different from the original
        /// 			request, CloudFront returns a CloudFrontOriginAccessIdentityAlreadyExists error.
        ///
        public let callerReference: String
        /// A comment to describe the origin access identity. The comment cannot be longer than
        /// 			128 characters.
        public let comment: String

        public init(callerReference: String, comment: String) {
            self.callerReference = callerReference
            self.comment = comment
        }

        private enum CodingKeys: String, CodingKey {
            case callerReference = "CallerReference"
            case comment = "Comment"
        }
    }

    public struct CloudFrontOriginAccessIdentityList: AWSDecodableShape {
        public struct _ItemsEncoding: ArrayCoderProperties { public static let member = "CloudFrontOriginAccessIdentitySummary" }

        /// A flag that indicates whether more origin access identities remain to be listed. If
        /// 			your results were truncated, you can make a follow-up pagination request using the
        /// 				Marker request parameter to retrieve more items in the list.
        public let isTruncated: Bool
        /// A complex type that contains one CloudFrontOriginAccessIdentitySummary
        /// 			element for each origin access identity that was created by the current
        /// 			Amazon Web Services account.
        @OptionalCustomCoding<ArrayCoder<_ItemsEncoding, CloudFrontOriginAccessIdentitySummary>>
        public var items: [CloudFrontOriginAccessIdentitySummary]?
        /// Use this when paginating results to indicate where to begin in your list of origin
        /// 			access identities. The results include identities in the list that occur after the
        /// 			marker. To get the next page of results, set the Marker to the value of the
        /// 				NextMarker from the current page's response (which is also the ID of
        /// 			the last identity on that page).
        public let marker: String
        /// The maximum number of origin access identities you want in the response body.
        public let maxItems: Int
        /// If IsTruncated is true, this element is present and contains
        /// 			the value you can use for the Marker request parameter to continue listing
        /// 			your origin access identities where they left off.
        public let nextMarker: String?
        /// The number of CloudFront origin access identities that were created by the current
        /// 			Amazon Web Services account.
        public let quantity: Int

        public init(isTruncated: Bool, items: [CloudFrontOriginAccessIdentitySummary]? = nil, marker: String, maxItems: Int, nextMarker: String? = nil, quantity: Int) {
            self.isTruncated = isTruncated
            self.items = items
            self.marker = marker
            self.maxItems = maxItems
            self.nextMarker = nextMarker
            self.quantity = quantity
        }

        private enum CodingKeys: String, CodingKey {
            case isTruncated = "IsTruncated"
            case items = "Items"
            case marker = "Marker"
            case maxItems = "MaxItems"
            case nextMarker = "NextMarker"
            case quantity = "Quantity"
        }
    }

    public struct CloudFrontOriginAccessIdentitySummary: AWSDecodableShape {
        /// The comment for this origin access identity, as originally specified when
        /// 			created.
        public let comment: String
        /// The ID for the origin access identity. For example:
        /// 			E74FTE3AJFJ256A.
        public let id: String
        /// The Amazon S3 canonical user ID for the origin access identity, which you use when giving
        /// 			the origin access identity read permission to an object in Amazon S3.
        public let s3CanonicalUserId: String

        public init(comment: String, id: String, s3CanonicalUserId: String) {
            self.comment = comment
            self.id = id
            self.s3CanonicalUserId = s3CanonicalUserId
        }

        private enum CodingKeys: String, CodingKey {
            case comment = "Comment"
            case id = "Id"
            case s3CanonicalUserId = "S3CanonicalUserId"
        }
    }

    public struct ConflictingAlias: AWSDecodableShape {
        /// The (partially hidden) ID of the Amazon Web Services account that owns the distribution that's
        /// 			associated with the alias.
        public let accountId: String?
        /// An alias (also called a CNAME).
        public let alias: String?
        /// The (partially hidden) ID of the CloudFront distribution associated with the alias.
        public let distributionId: String?

        public init(accountId: String? = nil, alias: String? = nil, distributionId: String? = nil) {
            self.accountId = accountId
            self.alias = alias
            self.distributionId = distributionId
        }

        private enum CodingKeys: String, CodingKey {
            case accountId = "AccountId"
            case alias = "Alias"
            case distributionId = "DistributionId"
        }
    }

    public struct ConflictingAliasesList: AWSDecodableShape {
        public struct _ItemsEncoding: ArrayCoderProperties { public static let member = "ConflictingAlias" }

        /// Contains the conflicting aliases in the list.
        @OptionalCustomCoding<ArrayCoder<_ItemsEncoding, ConflictingAlias>>
        public var items: [ConflictingAlias]?
        /// The maximum number of conflicting aliases requested.
        public let maxItems: Int?
        /// If there are more items in the list than are in this response, this element is
        /// 			present. It contains the value that you should use in the Marker field of a
        /// 			subsequent request to continue listing conflicting aliases where you left off.
        public let nextMarker: String?
        /// The number of conflicting aliases returned in the response.
        public let quantity: Int?

        public init(items: [ConflictingAlias]? = nil, maxItems: Int? = nil, nextMarker: String? = nil, quantity: Int? = nil) {
            self.items = items
            self.maxItems = maxItems
            self.nextMarker = nextMarker
            self.quantity = quantity
        }

        private enum CodingKeys: String, CodingKey {
            case items = "Items"
            case maxItems = "MaxItems"
            case nextMarker = "NextMarker"
            case quantity = "Quantity"
        }
    }

    public struct ContentTypeProfile: AWSEncodableShape & AWSDecodableShape {
        /// The content type for a field-level encryption content type-profile mapping.
        public let contentType: String
        /// The format for a field-level encryption content type-profile mapping.
        public let format: Format
        /// The profile ID for a field-level encryption content type-profile mapping.
        public let profileId: String?

        public init(contentType: String, format: Format, profileId: String? = nil) {
            self.contentType = contentType
            self.format = format
            self.profileId = profileId
        }

        private enum CodingKeys: String, CodingKey {
            case contentType = "ContentType"
            case format = "Format"
            case profileId = "ProfileId"
        }
    }

    public struct ContentTypeProfileConfig: AWSEncodableShape & AWSDecodableShape {
        /// The configuration for a field-level encryption content type-profile.
        public let contentTypeProfiles: ContentTypeProfiles?
        /// The setting in a field-level encryption content type-profile mapping that specifies
        /// 			what to do when an unknown content type is provided for the profile. If true, content is
        /// 			forwarded without being encrypted when the content type is unknown. If false (the
        /// 			default), an error is returned when the content type is unknown.
        public let forwardWhenContentTypeIsUnknown: Bool

        public init(contentTypeProfiles: ContentTypeProfiles? = nil, forwardWhenContentTypeIsUnknown: Bool) {
            self.contentTypeProfiles = contentTypeProfiles
            self.forwardWhenContentTypeIsUnknown = forwardWhenContentTypeIsUnknown
        }

        private enum CodingKeys: String, CodingKey {
            case contentTypeProfiles = "ContentTypeProfiles"
            case forwardWhenContentTypeIsUnknown = "ForwardWhenContentTypeIsUnknown"
        }
    }

    public struct ContentTypeProfiles: AWSEncodableShape & AWSDecodableShape {
        public struct _ItemsEncoding: ArrayCoderProperties { public static let member = "ContentTypeProfile" }

        /// Items in a field-level encryption content type-profile mapping.
        @OptionalCustomCoding<ArrayCoder<_ItemsEncoding, ContentTypeProfile>>
        public var items: [ContentTypeProfile]?
        /// The number of field-level encryption content type-profile mappings.
        public let quantity: Int

        public init(items: [ContentTypeProfile]? = nil, quantity: Int) {
            self.items = items
            self.quantity = quantity
        }

        private enum CodingKeys: String, CodingKey {
            case items = "Items"
            case quantity = "Quantity"
        }
    }

    public struct ContinuousDeploymentPolicy: AWSDecodableShape {
        public let continuousDeploymentPolicyConfig: ContinuousDeploymentPolicyConfig
        /// The identifier of the continuous deployment policy.
        public let id: String
        /// The date and time the continuous deployment policy was last modified.
        public let lastModifiedTime: Date

        public init(continuousDeploymentPolicyConfig: ContinuousDeploymentPolicyConfig, id: String, lastModifiedTime: Date) {
            self.continuousDeploymentPolicyConfig = continuousDeploymentPolicyConfig
            self.id = id
            self.lastModifiedTime = lastModifiedTime
        }

        private enum CodingKeys: String, CodingKey {
            case continuousDeploymentPolicyConfig = "ContinuousDeploymentPolicyConfig"
            case id = "Id"
            case lastModifiedTime = "LastModifiedTime"
        }
    }

    public struct ContinuousDeploymentPolicyConfig: AWSEncodableShape & AWSDecodableShape {
        /// A Boolean that indicates whether this continuous deployment policy is enabled (in
        /// 			effect). When this value is true, this policy is enabled and in effect.
        /// 			When this value is false, this policy is not enabled and has no
        /// 			effect.
        public let enabled: Bool
        /// The CloudFront domain name of the staging distribution. For example:
        /// 				d111111abcdef8.cloudfront.net.
        public let stagingDistributionDnsNames: StagingDistributionDnsNames
        /// Contains the parameters for routing production traffic from your primary to staging
        /// 			distributions.
        public let trafficConfig: TrafficConfig?

        public init(enabled: Bool, stagingDistributionDnsNames: StagingDistributionDnsNames, trafficConfig: TrafficConfig? = nil) {
            self.enabled = enabled
            self.stagingDistributionDnsNames = stagingDistributionDnsNames
            self.trafficConfig = trafficConfig
        }

        private enum CodingKeys: String, CodingKey {
            case enabled = "Enabled"
            case stagingDistributionDnsNames = "StagingDistributionDnsNames"
            case trafficConfig = "TrafficConfig"
        }
    }

    public struct ContinuousDeploymentPolicyList: AWSDecodableShape {
        public struct _ItemsEncoding: ArrayCoderProperties { public static let member = "ContinuousDeploymentPolicySummary" }

        /// A list of continuous deployment policy items.
        @OptionalCustomCoding<ArrayCoder<_ItemsEncoding, ContinuousDeploymentPolicySummary>>
        public var items: [ContinuousDeploymentPolicySummary]?
        /// The maximum number of continuous deployment policies that were specified in your
        /// 			request.
        public let maxItems: Int
        /// Indicates the next page of continuous deployment policies. To get the next page of the
        /// 			list, use this value in the Marker field of your request.
        public let nextMarker: String?
        /// The total number of continuous deployment policies in your Amazon Web Services account, regardless
        /// 			of the MaxItems value.
        public let quantity: Int

        public init(items: [ContinuousDeploymentPolicySummary]? = nil, maxItems: Int, nextMarker: String? = nil, quantity: Int) {
            self.items = items
            self.maxItems = maxItems
            self.nextMarker = nextMarker
            self.quantity = quantity
        }

        private enum CodingKeys: String, CodingKey {
            case items = "Items"
            case maxItems = "MaxItems"
            case nextMarker = "NextMarker"
            case quantity = "Quantity"
        }
    }

    public struct ContinuousDeploymentPolicySummary: AWSDecodableShape {
        /// The continuous deployment policy.
        public let continuousDeploymentPolicy: ContinuousDeploymentPolicy

        public init(continuousDeploymentPolicy: ContinuousDeploymentPolicy) {
            self.continuousDeploymentPolicy = continuousDeploymentPolicy
        }

        private enum CodingKeys: String, CodingKey {
            case continuousDeploymentPolicy = "ContinuousDeploymentPolicy"
        }
    }

    public struct ContinuousDeploymentSingleHeaderConfig: AWSEncodableShape & AWSDecodableShape {
        /// The request header name that you want CloudFront to send to your staging
        /// 			distribution. The header must contain the prefix aws-cf-cd-.
        public let header: String
        /// The request header value.
        public let value: String

        public init(header: String, value: String) {
            self.header = header
            self.value = value
        }

        private enum CodingKeys: String, CodingKey {
            case header = "Header"
            case value = "Value"
        }
    }

    public struct ContinuousDeploymentSingleWeightConfig: AWSEncodableShape & AWSDecodableShape {
        public let sessionStickinessConfig: SessionStickinessConfig?
        /// The percentage of traffic to send to a staging distribution, expressed as a decimal
        /// 			number between 0 and .15.
        public let weight: Float

        public init(sessionStickinessConfig: SessionStickinessConfig? = nil, weight: Float) {
            self.sessionStickinessConfig = sessionStickinessConfig
            self.weight = weight
        }

        private enum CodingKeys: String, CodingKey {
            case sessionStickinessConfig = "SessionStickinessConfig"
            case weight = "Weight"
        }
    }

    public struct CookieNames: AWSEncodableShape & AWSDecodableShape {
        public struct _ItemsEncoding: ArrayCoderProperties { public static let member = "Name" }

        /// A list of cookie names.
        @OptionalCustomCoding<ArrayCoder<_ItemsEncoding, String>>
        public var items: [String]?
        /// The number of cookie names in the Items list.
        public let quantity: Int

        public init(items: [String]? = nil, quantity: Int) {
            self.items = items
            self.quantity = quantity
        }

        private enum CodingKeys: String, CodingKey {
            case items = "Items"
            case quantity = "Quantity"
        }
    }

    public struct CookiePreference: AWSEncodableShape & AWSDecodableShape {
        /// This field is deprecated. We recommend that you use a cache policy or an origin
        /// 			request policy instead of this field. If you want to include cookies in the cache key, use a cache policy. For more
        /// 			information, see Creating cache policies in the Amazon CloudFront Developer Guide. If you want to send cookies to the origin but not include them in the cache key, use
        /// 			origin request policy. For more information, see Creating origin request policies in the
        /// 			Amazon CloudFront Developer Guide. Specifies which cookies to forward to the origin for this cache behavior: all, none,
        /// 			or the list of cookies specified in the WhitelistedNames complex
        /// 			type. Amazon S3 doesn't process cookies. When the cache behavior is forwarding requests to an
        /// 			Amazon S3 origin, specify none for the Forward element.
        public let forward: ItemSelection
        /// This field is deprecated. We recommend that you use a cache policy or an origin
        /// 			request policy instead of this field. If you want to include cookies in the cache key, use a cache policy. For more
        /// 			information, see Creating cache policies in the Amazon CloudFront Developer Guide. If you want to send cookies to the origin but not include them in the cache key, use
        /// 			an origin request policy. For more information, see Creating origin request policies in the
        /// 			Amazon CloudFront Developer Guide. Required if you specify whitelist for the value of Forward.
        /// 			A complex type that specifies how many different cookies you want CloudFront to forward to the
        /// 			origin for this cache behavior and, if you want to forward selected cookies, the names
        /// 			of those cookies. If you specify all or none for the value of
        /// 				Forward, omit WhitelistedNames. If you change the value of
        /// 				Forward from whitelist to all or
        /// 				none and you don't delete the WhitelistedNames element and
        /// 			its child elements, CloudFront deletes them automatically. For the current limit on the number of cookie names that you can whitelist for each
        /// 			cache behavior, see  CloudFront
        /// 				Limits in the Amazon Web Services General Reference.
        public let whitelistedNames: CookieNames?

        public init(forward: ItemSelection, whitelistedNames: CookieNames? = nil) {
            self.forward = forward
            self.whitelistedNames = whitelistedNames
        }

        private enum CodingKeys: String, CodingKey {
            case forward = "Forward"
            case whitelistedNames = "WhitelistedNames"
        }
    }

    public struct CopyDistributionRequest: AWSEncodableShape {
        /// A value that uniquely identifies a request to create a resource. This helps to prevent
        /// 			CloudFront from creating a duplicate resource if you accidentally resubmit an identical
        /// 			request.
        public let callerReference: String
        /// A Boolean flag to specify the state of the staging distribution when it's
        /// 			created. When you set this value to True, the staging
        /// 			distribution is enabled. When you set this value to False, the
        /// 			staging distribution is disabled. If you omit this field, the default value is True.
        public let enabled: Bool?
        /// The version identifier of the primary distribution whose configuration you are
        /// 			copying. This is the ETag value returned in the response to
        /// 				GetDistribution and GetDistributionConfig.
        public let ifMatch: String?
        /// The identifier of the primary distribution whose configuration you are copying. To get
        /// 			a distribution ID, use ListDistributions.
        public let primaryDistributionId: String
        /// The type of distribution that your primary distribution will be copied to. The only
        /// 			valid value is True, indicating that you are copying to a staging
        /// 			distribution.
        public let staging: Bool?

        public init(callerReference: String, enabled: Bool? = nil, ifMatch: String? = nil, primaryDistributionId: String, staging: Bool? = nil) {
            self.callerReference = callerReference
            self.enabled = enabled
            self.ifMatch = ifMatch
            self.primaryDistributionId = primaryDistributionId
            self.staging = staging
        }

        public func encode(to encoder: Encoder) throws {
            let request = encoder.userInfo[.awsRequest]! as! RequestEncodingContainer
            var container = encoder.container(keyedBy: CodingKeys.self)
            try container.encode(self.callerReference, forKey: .callerReference)
            try container.encodeIfPresent(self.enabled, forKey: .enabled)
            request.encodeHeader(self.ifMatch, key: "If-Match")
            request.encodePath(self.primaryDistributionId, key: "PrimaryDistributionId")
            request.encodeHeader(self.staging, key: "Staging")
        }

        private enum CodingKeys: String, CodingKey {
            case callerReference = "CallerReference"
            case enabled = "Enabled"
        }
    }

    public struct CopyDistributionResult: AWSDecodableShape {
        public let distribution: Distribution
        /// The version identifier for the current version of the staging distribution.
        public let eTag: String?
        /// The URL of the staging distribution.
        public let location: String?

        public init(distribution: Distribution, eTag: String? = nil, location: String? = nil) {
            self.distribution = distribution
            self.eTag = eTag
            self.location = location
        }

        public init(from decoder: Decoder) throws {
            let response = decoder.userInfo[.awsResponse]! as! ResponseDecodingContainer
            let container = try decoder.singleValueContainer()
            self.distribution = try container.decode(Distribution.self)
            self.eTag = try response.decodeHeaderIfPresent(String.self, key: "ETag")
            self.location = try response.decodeHeaderIfPresent(String.self, key: "Location")
        }

        private enum CodingKeys: CodingKey {}
    }

    public struct CreateCachePolicyRequest: AWSEncodableShape {
        public static let _xmlRootNodeName: String? = "CachePolicyConfig"
        /// A cache policy configuration.
        public let cachePolicyConfig: CachePolicyConfig

        public init(cachePolicyConfig: CachePolicyConfig) {
            self.cachePolicyConfig = cachePolicyConfig
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.singleValueContainer()
            try container.encode(self.cachePolicyConfig)
        }

        private enum CodingKeys: CodingKey {}
    }

    public struct CreateCachePolicyResult: AWSDecodableShape {
        /// A cache policy.
        public let cachePolicy: CachePolicy
        /// The current version of the cache policy.
        public let eTag: String?
        /// The fully qualified URI of the cache policy just created.
        public let location: String?

        public init(cachePolicy: CachePolicy, eTag: String? = nil, location: String? = nil) {
            self.cachePolicy = cachePolicy
            self.eTag = eTag
            self.location = location
        }

        public init(from decoder: Decoder) throws {
            let response = decoder.userInfo[.awsResponse]! as! ResponseDecodingContainer
            let container = try decoder.singleValueContainer()
            self.cachePolicy = try container.decode(CachePolicy.self)
            self.eTag = try response.decodeHeaderIfPresent(String.self, key: "ETag")
            self.location = try response.decodeHeaderIfPresent(String.self, key: "Location")
        }

        private enum CodingKeys: CodingKey {}
    }

    public struct CreateCloudFrontOriginAccessIdentityRequest: AWSEncodableShape {
        public static let _xmlRootNodeName: String? = "CloudFrontOriginAccessIdentityConfig"
        /// The current configuration information for the identity.
        public let cloudFrontOriginAccessIdentityConfig: CloudFrontOriginAccessIdentityConfig

        public init(cloudFrontOriginAccessIdentityConfig: CloudFrontOriginAccessIdentityConfig) {
            self.cloudFrontOriginAccessIdentityConfig = cloudFrontOriginAccessIdentityConfig
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.singleValueContainer()
            try container.encode(self.cloudFrontOriginAccessIdentityConfig)
        }

        private enum CodingKeys: CodingKey {}
    }

    public struct CreateCloudFrontOriginAccessIdentityResult: AWSDecodableShape {
        /// The origin access identity's information.
        public let cloudFrontOriginAccessIdentity: CloudFrontOriginAccessIdentity
        /// The current version of the origin access identity created.
        public let eTag: String?
        /// The fully qualified URI of the new origin access identity just created.
        public let location: String?

        public init(cloudFrontOriginAccessIdentity: CloudFrontOriginAccessIdentity, eTag: String? = nil, location: String? = nil) {
            self.cloudFrontOriginAccessIdentity = cloudFrontOriginAccessIdentity
            self.eTag = eTag
            self.location = location
        }

        public init(from decoder: Decoder) throws {
            let response = decoder.userInfo[.awsResponse]! as! ResponseDecodingContainer
            let container = try decoder.singleValueContainer()
            self.cloudFrontOriginAccessIdentity = try container.decode(CloudFrontOriginAccessIdentity.self)
            self.eTag = try response.decodeHeaderIfPresent(String.self, key: "ETag")
            self.location = try response.decodeHeaderIfPresent(String.self, key: "Location")
        }

        private enum CodingKeys: CodingKey {}
    }

    public struct CreateContinuousDeploymentPolicyRequest: AWSEncodableShape {
        public static let _xmlRootNodeName: String? = "ContinuousDeploymentPolicyConfig"
        /// Contains the configuration for a continuous deployment policy.
        public let continuousDeploymentPolicyConfig: ContinuousDeploymentPolicyConfig

        public init(continuousDeploymentPolicyConfig: ContinuousDeploymentPolicyConfig) {
            self.continuousDeploymentPolicyConfig = continuousDeploymentPolicyConfig
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.singleValueContainer()
            try container.encode(self.continuousDeploymentPolicyConfig)
        }

        private enum CodingKeys: CodingKey {}
    }

    public struct CreateContinuousDeploymentPolicyResult: AWSDecodableShape {
        /// A continuous deployment policy.
        public let continuousDeploymentPolicy: ContinuousDeploymentPolicy
        /// The version identifier for the current version of the continuous deployment
        /// 			policy.
        public let eTag: String?
        /// The location of the continuous deployment policy.
        public let location: String?

        public init(continuousDeploymentPolicy: ContinuousDeploymentPolicy, eTag: String? = nil, location: String? = nil) {
            self.continuousDeploymentPolicy = continuousDeploymentPolicy
            self.eTag = eTag
            self.location = location
        }

        public init(from decoder: Decoder) throws {
            let response = decoder.userInfo[.awsResponse]! as! ResponseDecodingContainer
            let container = try decoder.singleValueContainer()
            self.continuousDeploymentPolicy = try container.decode(ContinuousDeploymentPolicy.self)
            self.eTag = try response.decodeHeaderIfPresent(String.self, key: "ETag")
            self.location = try response.decodeHeaderIfPresent(String.self, key: "Location")
        }

        private enum CodingKeys: CodingKey {}
    }

    public struct CreateDistributionRequest: AWSEncodableShape {
        public static let _xmlRootNodeName: String? = "DistributionConfig"
        /// The distribution's configuration information.
        public let distributionConfig: DistributionConfig

        public init(distributionConfig: DistributionConfig) {
            self.distributionConfig = distributionConfig
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.singleValueContainer()
            try container.encode(self.distributionConfig)
        }

        public func validate(name: String) throws {
            try self.distributionConfig.validate(name: "\(name).distributionConfig")
        }

        private enum CodingKeys: CodingKey {}
    }

    public struct CreateDistributionResult: AWSDecodableShape {
        /// The distribution's information.
        public let distribution: Distribution
        /// The current version of the distribution created.
        public let eTag: String?
        /// The fully qualified URI of the new distribution resource just created.
        public let location: String?

        public init(distribution: Distribution, eTag: String? = nil, location: String? = nil) {
            self.distribution = distribution
            self.eTag = eTag
            self.location = location
        }

        public init(from decoder: Decoder) throws {
            let response = decoder.userInfo[.awsResponse]! as! ResponseDecodingContainer
            let container = try decoder.singleValueContainer()
            self.distribution = try container.decode(Distribution.self)
            self.eTag = try response.decodeHeaderIfPresent(String.self, key: "ETag")
            self.location = try response.decodeHeaderIfPresent(String.self, key: "Location")
        }

        private enum CodingKeys: CodingKey {}
    }

    public struct CreateDistributionWithTagsRequest: AWSEncodableShape {
        public static let _xmlRootNodeName: String? = "DistributionConfigWithTags"
        /// The distribution's configuration information.
        public let distributionConfigWithTags: DistributionConfigWithTags

        public init(distributionConfigWithTags: DistributionConfigWithTags) {
            self.distributionConfigWithTags = distributionConfigWithTags
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.singleValueContainer()
            try container.encode(self.distributionConfigWithTags)
        }

        public func validate(name: String) throws {
            try self.distributionConfigWithTags.validate(name: "\(name).distributionConfigWithTags")
        }

        private enum CodingKeys: CodingKey {}
    }

    public struct CreateDistributionWithTagsResult: AWSDecodableShape {
        /// The distribution's information.
        public let distribution: Distribution
        /// The current version of the distribution created.
        public let eTag: String?
        /// The fully qualified URI of the new distribution resource just created.
        public let location: String?

        public init(distribution: Distribution, eTag: String? = nil, location: String? = nil) {
            self.distribution = distribution
            self.eTag = eTag
            self.location = location
        }

        public init(from decoder: Decoder) throws {
            let response = decoder.userInfo[.awsResponse]! as! ResponseDecodingContainer
            let container = try decoder.singleValueContainer()
            self.distribution = try container.decode(Distribution.self)
            self.eTag = try response.decodeHeaderIfPresent(String.self, key: "ETag")
            self.location = try response.decodeHeaderIfPresent(String.self, key: "Location")
        }

        private enum CodingKeys: CodingKey {}
    }

    public struct CreateFieldLevelEncryptionConfigRequest: AWSEncodableShape {
        public static let _xmlRootNodeName: String? = "FieldLevelEncryptionConfig"
        /// The request to create a new field-level encryption configuration.
        public let fieldLevelEncryptionConfig: FieldLevelEncryptionConfig

        public init(fieldLevelEncryptionConfig: FieldLevelEncryptionConfig) {
            self.fieldLevelEncryptionConfig = fieldLevelEncryptionConfig
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.singleValueContainer()
            try container.encode(self.fieldLevelEncryptionConfig)
        }

        private enum CodingKeys: CodingKey {}
    }

    public struct CreateFieldLevelEncryptionConfigResult: AWSDecodableShape {
        /// The current version of the field level encryption configuration. For example:
        /// 				E2QWRUHAPOMQZL.
        public let eTag: String?
        /// Returned when you create a new field-level encryption configuration.
        public let fieldLevelEncryption: FieldLevelEncryption
        /// The fully qualified URI of the new configuration resource just created.
        public let location: String?

        public init(eTag: String? = nil, fieldLevelEncryption: FieldLevelEncryption, location: String? = nil) {
            self.eTag = eTag
            self.fieldLevelEncryption = fieldLevelEncryption
            self.location = location
        }

        public init(from decoder: Decoder) throws {
            let response = decoder.userInfo[.awsResponse]! as! ResponseDecodingContainer
            let container = try decoder.singleValueContainer()
            self.eTag = try response.decodeHeaderIfPresent(String.self, key: "ETag")
            self.fieldLevelEncryption = try container.decode(FieldLevelEncryption.self)
            self.location = try response.decodeHeaderIfPresent(String.self, key: "Location")
        }

        private enum CodingKeys: CodingKey {}
    }

    public struct CreateFieldLevelEncryptionProfileRequest: AWSEncodableShape {
        public static let _xmlRootNodeName: String? = "FieldLevelEncryptionProfileConfig"
        /// The request to create a field-level encryption profile.
        public let fieldLevelEncryptionProfileConfig: FieldLevelEncryptionProfileConfig

        public init(fieldLevelEncryptionProfileConfig: FieldLevelEncryptionProfileConfig) {
            self.fieldLevelEncryptionProfileConfig = fieldLevelEncryptionProfileConfig
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.singleValueContainer()
            try container.encode(self.fieldLevelEncryptionProfileConfig)
        }

        private enum CodingKeys: CodingKey {}
    }

    public struct CreateFieldLevelEncryptionProfileResult: AWSDecodableShape {
        /// The current version of the field level encryption profile. For example:
        /// 				E2QWRUHAPOMQZL.
        public let eTag: String?
        /// Returned when you create a new field-level encryption profile.
        public let fieldLevelEncryptionProfile: FieldLevelEncryptionProfile
        /// The fully qualified URI of the new profile resource just created.
        public let location: String?

        public init(eTag: String? = nil, fieldLevelEncryptionProfile: FieldLevelEncryptionProfile, location: String? = nil) {
            self.eTag = eTag
            self.fieldLevelEncryptionProfile = fieldLevelEncryptionProfile
            self.location = location
        }

        public init(from decoder: Decoder) throws {
            let response = decoder.userInfo[.awsResponse]! as! ResponseDecodingContainer
            let container = try decoder.singleValueContainer()
            self.eTag = try response.decodeHeaderIfPresent(String.self, key: "ETag")
            self.fieldLevelEncryptionProfile = try container.decode(FieldLevelEncryptionProfile.self)
            self.location = try response.decodeHeaderIfPresent(String.self, key: "Location")
        }

        private enum CodingKeys: CodingKey {}
    }

    public struct CreateFunctionRequest: AWSEncodableShape {
        /// The function code. For more information about writing a CloudFront function, see Writing
        /// 				function code for CloudFront Functions in the
        /// 			Amazon CloudFront Developer Guide.
        public let functionCode: AWSBase64Data
        /// Configuration information about the function, including an optional comment and the
        /// 			function's runtime.
        public let functionConfig: FunctionConfig
        /// A name to identify the function.
        public let name: String

        public init(functionCode: AWSBase64Data, functionConfig: FunctionConfig, name: String) {
            self.functionCode = functionCode
            self.functionConfig = functionConfig
            self.name = name
        }

        public func validate(name: String) throws {
            try self.validate(self.functionCode, name: "functionCode", parent: name, max: 40960)
            try self.validate(self.functionCode, name: "functionCode", parent: name, min: 1)
            try self.functionConfig.validate(name: "\(name).functionConfig")
            try self.validate(self.name, name: "name", parent: name, max: 64)
            try self.validate(self.name, name: "name", parent: name, min: 1)
            try self.validate(self.name, name: "name", parent: name, pattern: "^[a-zA-Z0-9-_]{1,64}$")
        }

        private enum CodingKeys: String, CodingKey {
            case functionCode = "FunctionCode"
            case functionConfig = "FunctionConfig"
            case name = "Name"
        }
    }

    public struct CreateFunctionResult: AWSDecodableShape {
        /// The version identifier for the current version of the CloudFront function.
        public let eTag: String?
        /// Contains configuration information and metadata about a CloudFront function.
        public let functionSummary: FunctionSummary
        /// The URL of the CloudFront function. Use the URL to manage the function with the CloudFront
        /// 			API.
        public let location: String?

        public init(eTag: String? = nil, functionSummary: FunctionSummary, location: String? = nil) {
            self.eTag = eTag
            self.functionSummary = functionSummary
            self.location = location
        }

        public init(from decoder: Decoder) throws {
            let response = decoder.userInfo[.awsResponse]! as! ResponseDecodingContainer
            let container = try decoder.singleValueContainer()
            self.eTag = try response.decodeHeaderIfPresent(String.self, key: "ETag")
            self.functionSummary = try container.decode(FunctionSummary.self)
            self.location = try response.decodeHeaderIfPresent(String.self, key: "Location")
        }

        private enum CodingKeys: CodingKey {}
    }

    public struct CreateInvalidationRequest: AWSEncodableShape {
        public static let _xmlRootNodeName: String? = "InvalidationBatch"
        /// The distribution's id.
        public let distributionId: String
        /// The batch information for the invalidation.
        public let invalidationBatch: InvalidationBatch

        public init(distributionId: String, invalidationBatch: InvalidationBatch) {
            self.distributionId = distributionId
            self.invalidationBatch = invalidationBatch
        }

        public func encode(to encoder: Encoder) throws {
            let request = encoder.userInfo[.awsRequest]! as! RequestEncodingContainer
            var container = encoder.singleValueContainer()
            request.encodePath(self.distributionId, key: "DistributionId")
            try container.encode(self.invalidationBatch)
        }

        private enum CodingKeys: CodingKey {}
    }

    public struct CreateInvalidationResult: AWSDecodableShape {
        /// The invalidation's information.
        public let invalidation: Invalidation
        /// The fully qualified URI of the distribution and invalidation batch request, including
        /// 			the Invalidation ID.
        public let location: String?

        public init(invalidation: Invalidation, location: String? = nil) {
            self.invalidation = invalidation
            self.location = location
        }

        public init(from decoder: Decoder) throws {
            let response = decoder.userInfo[.awsResponse]! as! ResponseDecodingContainer
            let container = try decoder.singleValueContainer()
            self.invalidation = try container.decode(Invalidation.self)
            self.location = try response.decodeHeaderIfPresent(String.self, key: "Location")
        }

        private enum CodingKeys: CodingKey {}
    }

    public struct CreateKeyGroupRequest: AWSEncodableShape {
        public static let _xmlRootNodeName: String? = "KeyGroupConfig"
        /// A key group configuration.
        public let keyGroupConfig: KeyGroupConfig

        public init(keyGroupConfig: KeyGroupConfig) {
            self.keyGroupConfig = keyGroupConfig
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.singleValueContainer()
            try container.encode(self.keyGroupConfig)
        }

        private enum CodingKeys: CodingKey {}
    }

    public struct CreateKeyGroupResult: AWSDecodableShape {
        /// The identifier for this version of the key group.
        public let eTag: String?
        /// The key group that was just created.
        public let keyGroup: KeyGroup
        /// The URL of the key group.
        public let location: String?

        public init(eTag: String? = nil, keyGroup: KeyGroup, location: String? = nil) {
            self.eTag = eTag
            self.keyGroup = keyGroup
            self.location = location
        }

        public init(from decoder: Decoder) throws {
            let response = decoder.userInfo[.awsResponse]! as! ResponseDecodingContainer
            let container = try decoder.singleValueContainer()
            self.eTag = try response.decodeHeaderIfPresent(String.self, key: "ETag")
            self.keyGroup = try container.decode(KeyGroup.self)
            self.location = try response.decodeHeaderIfPresent(String.self, key: "Location")
        }

        private enum CodingKeys: CodingKey {}
    }

    public struct CreateKeyValueStoreRequest: AWSEncodableShape {
        /// The comment of the Key Value Store.
        public let comment: String?
        /// The S3 bucket that provides the source for the import. The source must be in a valid JSON format.
        public let importSource: ImportSource?
        /// The name of the Key Value Store. The maximum length of the name is 32 characters.
        public let name: String

        public init(comment: String? = nil, importSource: ImportSource? = nil, name: String) {
            self.comment = comment
            self.importSource = importSource
            self.name = name
        }

        public func validate(name: String) throws {
            try self.validate(self.comment, name: "comment", parent: name, max: 128)
            try self.validate(self.name, name: "name", parent: name, max: 64)
            try self.validate(self.name, name: "name", parent: name, min: 1)
            try self.validate(self.name, name: "name", parent: name, pattern: "^[a-zA-Z0-9-_]{1,64}$")
        }

        private enum CodingKeys: String, CodingKey {
            case comment = "Comment"
            case importSource = "ImportSource"
            case name = "Name"
        }
    }

    public struct CreateKeyValueStoreResult: AWSDecodableShape {
        /// The ETag in the resulting Key Value Store.
        public let eTag: String?
        /// The resulting Key Value Store.
        public let keyValueStore: KeyValueStore
        /// The location of the resulting Key Value Store.
        public let location: String?

        public init(eTag: String? = nil, keyValueStore: KeyValueStore, location: String? = nil) {
            self.eTag = eTag
            self.keyValueStore = keyValueStore
            self.location = location
        }

        public init(from decoder: Decoder) throws {
            let response = decoder.userInfo[.awsResponse]! as! ResponseDecodingContainer
            let container = try decoder.singleValueContainer()
            self.eTag = try response.decodeHeaderIfPresent(String.self, key: "ETag")
            self.keyValueStore = try container.decode(KeyValueStore.self)
            self.location = try response.decodeHeaderIfPresent(String.self, key: "Location")
        }

        private enum CodingKeys: CodingKey {}
    }

    public struct CreateMonitoringSubscriptionRequest: AWSEncodableShape {
        public static let _xmlRootNodeName: String? = "MonitoringSubscription"
        /// The ID of the distribution that you are enabling metrics for.
        public let distributionId: String
        /// A monitoring subscription. This structure contains information about whether
        /// 			additional CloudWatch metrics are enabled for a given CloudFront distribution.
        public let monitoringSubscription: MonitoringSubscription

        public init(distributionId: String, monitoringSubscription: MonitoringSubscription) {
            self.distributionId = distributionId
            self.monitoringSubscription = monitoringSubscription
        }

        public func encode(to encoder: Encoder) throws {
            let request = encoder.userInfo[.awsRequest]! as! RequestEncodingContainer
            var container = encoder.singleValueContainer()
            request.encodePath(self.distributionId, key: "DistributionId")
            try container.encode(self.monitoringSubscription)
        }

        private enum CodingKeys: CodingKey {}
    }

    public struct CreateMonitoringSubscriptionResult: AWSDecodableShape {
        /// A monitoring subscription. This structure contains information about whether
        /// 			additional CloudWatch metrics are enabled for a given CloudFront distribution.
        public let monitoringSubscription: MonitoringSubscription

        public init(monitoringSubscription: MonitoringSubscription) {
            self.monitoringSubscription = monitoringSubscription
        }

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            self.monitoringSubscription = try container.decode(MonitoringSubscription.self)
        }

        private enum CodingKeys: CodingKey {}
    }

    public struct CreateOriginAccessControlRequest: AWSEncodableShape {
        public static let _xmlRootNodeName: String? = "OriginAccessControlConfig"
        /// Contains the origin access control.
        public let originAccessControlConfig: OriginAccessControlConfig

        public init(originAccessControlConfig: OriginAccessControlConfig) {
            self.originAccessControlConfig = originAccessControlConfig
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.singleValueContainer()
            try container.encode(self.originAccessControlConfig)
        }

        private enum CodingKeys: CodingKey {}
    }

    public struct CreateOriginAccessControlResult: AWSDecodableShape {
        /// The version identifier for the current version of the origin access control.
        public let eTag: String?
        /// The URL of the origin access control.
        public let location: String?
        /// Contains an origin access control.
        public let originAccessControl: OriginAccessControl

        public init(eTag: String? = nil, location: String? = nil, originAccessControl: OriginAccessControl) {
            self.eTag = eTag
            self.location = location
            self.originAccessControl = originAccessControl
        }

        public init(from decoder: Decoder) throws {
            let response = decoder.userInfo[.awsResponse]! as! ResponseDecodingContainer
            let container = try decoder.singleValueContainer()
            self.eTag = try response.decodeHeaderIfPresent(String.self, key: "ETag")
            self.location = try response.decodeHeaderIfPresent(String.self, key: "Location")
            self.originAccessControl = try container.decode(OriginAccessControl.self)
        }

        private enum CodingKeys: CodingKey {}
    }

    public struct CreateOriginRequestPolicyRequest: AWSEncodableShape {
        public static let _xmlRootNodeName: String? = "OriginRequestPolicyConfig"
        /// An origin request policy configuration.
        public let originRequestPolicyConfig: OriginRequestPolicyConfig

        public init(originRequestPolicyConfig: OriginRequestPolicyConfig) {
            self.originRequestPolicyConfig = originRequestPolicyConfig
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.singleValueContainer()
            try container.encode(self.originRequestPolicyConfig)
        }

        private enum CodingKeys: CodingKey {}
    }

    public struct CreateOriginRequestPolicyResult: AWSDecodableShape {
        /// The current version of the origin request policy.
        public let eTag: String?
        /// The fully qualified URI of the origin request policy just created.
        public let location: String?
        /// An origin request policy.
        public let originRequestPolicy: OriginRequestPolicy

        public init(eTag: String? = nil, location: String? = nil, originRequestPolicy: OriginRequestPolicy) {
            self.eTag = eTag
            self.location = location
            self.originRequestPolicy = originRequestPolicy
        }

        public init(from decoder: Decoder) throws {
            let response = decoder.userInfo[.awsResponse]! as! ResponseDecodingContainer
            let container = try decoder.singleValueContainer()
            self.eTag = try response.decodeHeaderIfPresent(String.self, key: "ETag")
            self.location = try response.decodeHeaderIfPresent(String.self, key: "Location")
            self.originRequestPolicy = try container.decode(OriginRequestPolicy.self)
        }

        private enum CodingKeys: CodingKey {}
    }

    public struct CreatePublicKeyRequest: AWSEncodableShape {
        public static let _xmlRootNodeName: String? = "PublicKeyConfig"
        /// A CloudFront public key configuration.
        public let publicKeyConfig: PublicKeyConfig

        public init(publicKeyConfig: PublicKeyConfig) {
            self.publicKeyConfig = publicKeyConfig
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.singleValueContainer()
            try container.encode(self.publicKeyConfig)
        }

        private enum CodingKeys: CodingKey {}
    }

    public struct CreatePublicKeyResult: AWSDecodableShape {
        /// The identifier for this version of the public key.
        public let eTag: String?
        /// The URL of the public key.
        public let location: String?
        /// The public key.
        public let publicKey: PublicKey

        public init(eTag: String? = nil, location: String? = nil, publicKey: PublicKey) {
            self.eTag = eTag
            self.location = location
            self.publicKey = publicKey
        }

        public init(from decoder: Decoder) throws {
            let response = decoder.userInfo[.awsResponse]! as! ResponseDecodingContainer
            let container = try decoder.singleValueContainer()
            self.eTag = try response.decodeHeaderIfPresent(String.self, key: "ETag")
            self.location = try response.decodeHeaderIfPresent(String.self, key: "Location")
            self.publicKey = try container.decode(PublicKey.self)
        }

        private enum CodingKeys: CodingKey {}
    }

    public struct CreateRealtimeLogConfigRequest: AWSEncodableShape {
        public struct _FieldsEncoding: ArrayCoderProperties { public static let member = "Field" }

        /// Contains information about the Amazon Kinesis data stream where you are sending real-time
        /// 			log data.
        @CustomCoding<StandardArrayCoder<EndPoint>>
        public var endPoints: [EndPoint]
        /// A list of fields to include in each real-time log record. For more information about fields, see Real-time log configuration fields in the
        /// 				Amazon CloudFront Developer Guide.
        @CustomCoding<ArrayCoder<_FieldsEncoding, String>>
        public var fields: [String]
        /// A unique name to identify this real-time log configuration.
        public let name: String
        /// The sampling rate for this real-time log configuration. The sampling rate determines
        /// 			the percentage of viewer requests that are represented in the real-time log data. You
        /// 			must provide an integer between 1 and 100, inclusive.
        public let samplingRate: Int64

        public init(endPoints: [EndPoint], fields: [String], name: String, samplingRate: Int64) {
            self.endPoints = endPoints
            self.fields = fields
            self.name = name
            self.samplingRate = samplingRate
        }

        private enum CodingKeys: String, CodingKey {
            case endPoints = "EndPoints"
            case fields = "Fields"
            case name = "Name"
            case samplingRate = "SamplingRate"
        }
    }

    public struct CreateRealtimeLogConfigResult: AWSDecodableShape {
        /// A real-time log configuration.
        public let realtimeLogConfig: RealtimeLogConfig?

        public init(realtimeLogConfig: RealtimeLogConfig? = nil) {
            self.realtimeLogConfig = realtimeLogConfig
        }

        private enum CodingKeys: String, CodingKey {
            case realtimeLogConfig = "RealtimeLogConfig"
        }
    }

    public struct CreateResponseHeadersPolicyRequest: AWSEncodableShape {
        public static let _xmlRootNodeName: String? = "ResponseHeadersPolicyConfig"
        /// Contains metadata about the response headers policy, and a set of configurations that
        /// 			specify the HTTP headers.
        public let responseHeadersPolicyConfig: ResponseHeadersPolicyConfig

        public init(responseHeadersPolicyConfig: ResponseHeadersPolicyConfig) {
            self.responseHeadersPolicyConfig = responseHeadersPolicyConfig
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.singleValueContainer()
            try container.encode(self.responseHeadersPolicyConfig)
        }

        public func validate(name: String) throws {
            try self.responseHeadersPolicyConfig.validate(name: "\(name).responseHeadersPolicyConfig")
        }

        private enum CodingKeys: CodingKey {}
    }

    public struct CreateResponseHeadersPolicyResult: AWSDecodableShape {
        /// The version identifier for the current version of the response headers policy.
        public let eTag: String?
        /// The URL of the response headers policy.
        public let location: String?
        /// Contains a response headers policy.
        public let responseHeadersPolicy: ResponseHeadersPolicy

        public init(eTag: String? = nil, location: String? = nil, responseHeadersPolicy: ResponseHeadersPolicy) {
            self.eTag = eTag
            self.location = location
            self.responseHeadersPolicy = responseHeadersPolicy
        }

        public init(from decoder: Decoder) throws {
            let response = decoder.userInfo[.awsResponse]! as! ResponseDecodingContainer
            let container = try decoder.singleValueContainer()
            self.eTag = try response.decodeHeaderIfPresent(String.self, key: "ETag")
            self.location = try response.decodeHeaderIfPresent(String.self, key: "Location")
            self.responseHeadersPolicy = try container.decode(ResponseHeadersPolicy.self)
        }

        private enum CodingKeys: CodingKey {}
    }

    public struct CreateStreamingDistributionRequest: AWSEncodableShape {
        public static let _xmlRootNodeName: String? = "StreamingDistributionConfig"
        /// The streaming distribution's configuration information.
        public let streamingDistributionConfig: StreamingDistributionConfig

        public init(streamingDistributionConfig: StreamingDistributionConfig) {
            self.streamingDistributionConfig = streamingDistributionConfig
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.singleValueContainer()
            try container.encode(self.streamingDistributionConfig)
        }

        private enum CodingKeys: CodingKey {}
    }

    public struct CreateStreamingDistributionResult: AWSDecodableShape {
        /// The current version of the streaming distribution created.
        public let eTag: String?
        /// The fully qualified URI of the new streaming distribution resource just
        /// 			created.
        public let location: String?
        /// The streaming distribution's information.
        public let streamingDistribution: StreamingDistribution

        public init(eTag: String? = nil, location: String? = nil, streamingDistribution: StreamingDistribution) {
            self.eTag = eTag
            self.location = location
            self.streamingDistribution = streamingDistribution
        }

        public init(from decoder: Decoder) throws {
            let response = decoder.userInfo[.awsResponse]! as! ResponseDecodingContainer
            let container = try decoder.singleValueContainer()
            self.eTag = try response.decodeHeaderIfPresent(String.self, key: "ETag")
            self.location = try response.decodeHeaderIfPresent(String.self, key: "Location")
            self.streamingDistribution = try container.decode(StreamingDistribution.self)
        }

        private enum CodingKeys: CodingKey {}
    }

    public struct CreateStreamingDistributionWithTagsRequest: AWSEncodableShape {
        public static let _xmlRootNodeName: String? = "StreamingDistributionConfigWithTags"
        /// The streaming distribution's configuration information.
        public let streamingDistributionConfigWithTags: StreamingDistributionConfigWithTags

        public init(streamingDistributionConfigWithTags: StreamingDistributionConfigWithTags) {
            self.streamingDistributionConfigWithTags = streamingDistributionConfigWithTags
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.singleValueContainer()
            try container.encode(self.streamingDistributionConfigWithTags)
        }

        public func validate(name: String) throws {
            try self.streamingDistributionConfigWithTags.validate(name: "\(name).streamingDistributionConfigWithTags")
        }

        private enum CodingKeys: CodingKey {}
    }

    public struct CreateStreamingDistributionWithTagsResult: AWSDecodableShape {
        /// The current version of the distribution created.
        public let eTag: String?
        /// The fully qualified URI of the new streaming distribution resource just
        /// 			created.
        public let location: String?
        /// The streaming distribution's information.
        public let streamingDistribution: StreamingDistribution

        public init(eTag: String? = nil, location: String? = nil, streamingDistribution: StreamingDistribution) {
            self.eTag = eTag
            self.location = location
            self.streamingDistribution = streamingDistribution
        }

        public init(from decoder: Decoder) throws {
            let response = decoder.userInfo[.awsResponse]! as! ResponseDecodingContainer
            let container = try decoder.singleValueContainer()
            self.eTag = try response.decodeHeaderIfPresent(String.self, key: "ETag")
            self.location = try response.decodeHeaderIfPresent(String.self, key: "Location")
            self.streamingDistribution = try container.decode(StreamingDistribution.self)
        }

        private enum CodingKeys: CodingKey {}
    }

    public struct CustomErrorResponse: AWSEncodableShape & AWSDecodableShape {
        /// The minimum amount of time, in seconds, that you want CloudFront to cache the HTTP status
        /// 			code specified in ErrorCode. When this time period has elapsed, CloudFront
        /// 			queries your origin to see whether the problem that caused the error has been resolved
        /// 			and the requested object is now available. For more information, see Customizing
        /// 				Error Responses in the Amazon CloudFront Developer Guide.
        public let errorCachingMinTTL: Int64?
        /// The HTTP status code for which you want to specify a custom error page and/or a
        /// 			caching duration.
        public let errorCode: Int
        /// The HTTP status code that you want CloudFront to return to the viewer along with the custom
        /// 			error page. There are a variety of reasons that you might want CloudFront to return a status
        /// 			code different from the status code that your origin returned to CloudFront, for
        /// 			example:   Some Internet devices (some firewalls and corporate proxies, for example)
        /// 					intercept HTTP 4xx and 5xx and prevent the response from being returned to the
        /// 					viewer. If you substitute 200, the response typically won't be
        /// 					intercepted.   If you don't care about distinguishing among different client errors or server
        /// 					errors, you can specify 400 or 500 as the
        /// 						ResponseCode for all 4xx or 5xx errors.   You might want to return a 200 status code (OK) and static
        /// 					website so your customers don't know that your website is down.   If you specify a value for ResponseCode, you must also specify a value
        /// 			for ResponsePagePath.
        public let responseCode: String?
        /// The path to the custom error page that you want CloudFront to return to a viewer when your
        /// 			origin returns the HTTP status code specified by ErrorCode, for example,
        /// 				/4xx-errors/403-forbidden.html. If you want to store your objects and
        /// 			your custom error pages in different locations, your distribution must include a cache
        /// 			behavior for which the following is true:   The value of PathPattern matches the path to your custom error
        /// 					messages. For example, suppose you saved custom error pages for 4xx errors in an
        /// 					Amazon S3 bucket in a directory named /4xx-errors. Your distribution
        /// 					must include a cache behavior for which the path pattern routes requests for
        /// 					your custom error pages to that location, for example,
        /// 						/4xx-errors/*.   The value of TargetOriginId specifies the value of the
        /// 						ID element for the origin that contains your custom error
        /// 					pages.   If you specify a value for ResponsePagePath, you must also specify a
        /// 			value for ResponseCode. We recommend that you store custom error pages in an Amazon S3 bucket. If you store custom
        /// 			error pages on an HTTP server and the server starts to return 5xx errors, CloudFront can't get
        /// 			the files that you want to return to viewers because the origin server is
        /// 			unavailable.
        public let responsePagePath: String?

        public init(errorCachingMinTTL: Int64? = nil, errorCode: Int, responseCode: String? = nil, responsePagePath: String? = nil) {
            self.errorCachingMinTTL = errorCachingMinTTL
            self.errorCode = errorCode
            self.responseCode = responseCode
            self.responsePagePath = responsePagePath
        }

        private enum CodingKeys: String, CodingKey {
            case errorCachingMinTTL = "ErrorCachingMinTTL"
            case errorCode = "ErrorCode"
            case responseCode = "ResponseCode"
            case responsePagePath = "ResponsePagePath"
        }
    }

    public struct CustomErrorResponses: AWSEncodableShape & AWSDecodableShape {
        public struct _ItemsEncoding: ArrayCoderProperties { public static let member = "CustomErrorResponse" }

        /// A complex type that contains a CustomErrorResponse element for each HTTP
        /// 			status code for which you want to specify a custom error page and/or a caching duration.
        ///
        @OptionalCustomCoding<ArrayCoder<_ItemsEncoding, CustomErrorResponse>>
        public var items: [CustomErrorResponse]?
        /// The number of HTTP status codes for which you want to specify a custom error page
        /// 			and/or a caching duration. If Quantity is 0, you can omit
        /// 				Items.
        public let quantity: Int

        public init(items: [CustomErrorResponse]? = nil, quantity: Int) {
            self.items = items
            self.quantity = quantity
        }

        private enum CodingKeys: String, CodingKey {
            case items = "Items"
            case quantity = "Quantity"
        }
    }

    public struct CustomHeaders: AWSEncodableShape & AWSDecodableShape {
        public struct _ItemsEncoding: ArrayCoderProperties { public static let member = "OriginCustomHeader" }

        ///  Optional: A list that contains one
        /// 				OriginCustomHeader element for each custom header that you want CloudFront to
        /// 			forward to the origin. If Quantity is 0, omit Items.
        @OptionalCustomCoding<ArrayCoder<_ItemsEncoding, OriginCustomHeader>>
        public var items: [OriginCustomHeader]?
        /// The number of custom headers, if any, for this distribution.
        public let quantity: Int

        public init(items: [OriginCustomHeader]? = nil, quantity: Int) {
            self.items = items
            self.quantity = quantity
        }

        private enum CodingKeys: String, CodingKey {
            case items = "Items"
            case quantity = "Quantity"
        }
    }

    public struct CustomOriginConfig: AWSEncodableShape & AWSDecodableShape {
        /// The HTTP port that CloudFront uses to connect to the origin. Specify the HTTP port that the
        /// 			origin listens on.
        public let httpPort: Int
        /// The HTTPS port that CloudFront uses to connect to the origin. Specify the HTTPS port that
        /// 			the origin listens on.
        public let httpsPort: Int
        /// Specifies how long, in seconds, CloudFront persists its connection to the origin. The
        /// 			minimum timeout is 1 second, the maximum is 60 seconds, and the default (if you don't
        /// 			specify otherwise) is 5 seconds. For more information, see Origin Keep-alive Timeout in the
        /// 				Amazon CloudFront Developer Guide.
        public let originKeepaliveTimeout: Int?
        /// Specifies the protocol (HTTP or HTTPS) that CloudFront uses to connect to the origin. Valid
        /// 			values are:    http-only – CloudFront always uses HTTP to connect to the
        /// 					origin.    match-viewer – CloudFront connects to the origin using the same
        /// 					protocol that the viewer used to connect to CloudFront.    https-only – CloudFront always uses HTTPS to connect to the
        /// 					origin.
        public let originProtocolPolicy: OriginProtocolPolicy
        /// Specifies how long, in seconds, CloudFront waits for a response from the origin. This is
        /// 			also known as the origin response timeout. The minimum timeout is 1
        /// 			second, the maximum is 60 seconds, and the default (if you don't specify otherwise) is
        /// 			30 seconds. For more information, see Origin Response Timeout in the
        /// 				Amazon CloudFront Developer Guide.
        public let originReadTimeout: Int?
        /// Specifies the minimum SSL/TLS protocol that CloudFront uses when connecting to your origin
        /// 			over HTTPS. Valid values include SSLv3, TLSv1,
        /// 				TLSv1.1, and TLSv1.2. For more information, see Minimum Origin SSL Protocol in the
        /// 				Amazon CloudFront Developer Guide.
        public let originSslProtocols: OriginSslProtocols?

        public init(httpPort: Int, httpsPort: Int, originKeepaliveTimeout: Int? = nil, originProtocolPolicy: OriginProtocolPolicy, originReadTimeout: Int? = nil, originSslProtocols: OriginSslProtocols? = nil) {
            self.httpPort = httpPort
            self.httpsPort = httpsPort
            self.originKeepaliveTimeout = originKeepaliveTimeout
            self.originProtocolPolicy = originProtocolPolicy
            self.originReadTimeout = originReadTimeout
            self.originSslProtocols = originSslProtocols
        }

        private enum CodingKeys: String, CodingKey {
            case httpPort = "HTTPPort"
            case httpsPort = "HTTPSPort"
            case originKeepaliveTimeout = "OriginKeepaliveTimeout"
            case originProtocolPolicy = "OriginProtocolPolicy"
            case originReadTimeout = "OriginReadTimeout"
            case originSslProtocols = "OriginSslProtocols"
        }
    }

    public struct DefaultCacheBehavior: AWSEncodableShape & AWSDecodableShape {
        public let allowedMethods: AllowedMethods?
        /// The unique identifier of the cache policy that is attached to the default cache
        /// 			behavior. For more information, see Creating cache policies or Using the managed cache policies in the
        /// 				Amazon CloudFront Developer Guide. A DefaultCacheBehavior must include either a CachePolicyId
        /// 			or ForwardedValues. We recommend that you use a
        /// 			CachePolicyId.
        public let cachePolicyId: String?
        /// Whether you want CloudFront to automatically compress certain files for this cache behavior.
        /// 			If so, specify true; if not, specify false. For more
        /// 			information, see Serving
        /// 				Compressed Files in the Amazon CloudFront Developer Guide.
        public let compress: Bool?
        /// This field is deprecated. We recommend that you use the DefaultTTL field
        /// 			in a cache policy instead of this field. For more information, see Creating cache policies or Using the managed cache policies in the
        /// 				Amazon CloudFront Developer Guide. The default amount of time that you want objects to stay in CloudFront caches before CloudFront
        /// 			forwards another request to your origin to determine whether the object has been
        /// 			updated. The value that you specify applies only when your origin does not add HTTP
        /// 			headers such as Cache-Control max-age, Cache-Control s-maxage,
        /// 			and Expires to objects. For more information, see Managing How Long Content Stays in an Edge Cache (Expiration) in the
        /// 				Amazon CloudFront Developer Guide.
        public let defaultTTL: Int64?
        /// The value of ID for the field-level encryption configuration that you
        /// 			want CloudFront to use for encrypting specific fields of data for the default cache
        /// 			behavior.
        public let fieldLevelEncryptionId: String?
        /// This field is deprecated. We recommend that you use a cache policy or an origin
        /// 			request policy instead of this field. For more information, see Working with policies in the
        /// 				Amazon CloudFront Developer Guide. If you want to include values in the cache key, use a cache policy. For more
        /// 			information, see Creating cache policies or Using the managed cache policies in the
        /// 				Amazon CloudFront Developer Guide. If you want to send values to the origin but not include them in the cache key, use an
        /// 			origin request policy. For more information, see Creating origin request policies or Using the managed origin request policies in the
        /// 				Amazon CloudFront Developer Guide. A DefaultCacheBehavior must include either a CachePolicyId
        /// 			or ForwardedValues. We recommend that you use a
        /// 			CachePolicyId. A complex type that specifies how CloudFront handles query strings, cookies, and HTTP
        /// 			headers.
        public let forwardedValues: ForwardedValues?
        /// A list of CloudFront functions that are associated with this cache behavior. CloudFront functions
        /// 			must be published to the LIVE stage to associate them with a cache
        /// 			behavior.
        public let functionAssociations: FunctionAssociations?
        /// A complex type that contains zero or more Lambda@Edge function associations for a
        /// 			cache behavior.
        public let lambdaFunctionAssociations: LambdaFunctionAssociations?
        /// This field is deprecated. We recommend that you use the MaxTTL field in a
        /// 			cache policy instead of this field. For more information, see Creating cache policies or Using the managed cache policies in the
        /// 				Amazon CloudFront Developer Guide. The maximum amount of time that you want objects to stay in CloudFront caches before CloudFront
        /// 			forwards another request to your origin to determine whether the object has been
        /// 			updated. The value that you specify applies only when your origin adds HTTP headers such
        /// 			as Cache-Control max-age, Cache-Control s-maxage, and
        /// 				Expires to objects. For more information, see Managing How Long Content Stays in an Edge Cache (Expiration) in the
        /// 				Amazon CloudFront Developer Guide.
        public let maxTTL: Int64?
        /// This field is deprecated. We recommend that you use the MinTTL field in a
        /// 			cache policy instead of this field. For more information, see Creating cache policies or Using the managed cache policies in the
        /// 				Amazon CloudFront Developer Guide. The minimum amount of time that you want objects to stay in CloudFront caches before CloudFront
        /// 			forwards another request to your origin to determine whether the object has been
        /// 			updated. For more information, see Managing How Long
        /// 				Content Stays in an Edge Cache (Expiration) in the
        /// 				Amazon CloudFront Developer Guide. You must specify 0 for MinTTL if you configure CloudFront to
        /// 			forward all headers to your origin (under Headers, if you specify
        /// 				1 for Quantity and * for
        /// 			Name).
        public let minTTL: Int64?
        /// The unique identifier of the origin request policy that is attached to the default
        /// 			cache behavior. For more information, see Creating origin request policies or Using the managed origin request policies in the
        /// 				Amazon CloudFront Developer Guide.
        public let originRequestPolicyId: String?
        /// The Amazon Resource Name (ARN) of the real-time log configuration that is attached to
        /// 			this cache behavior. For more information, see Real-time logs in the
        /// 				Amazon CloudFront Developer Guide.
        public let realtimeLogConfigArn: String?
        /// The identifier for a response headers policy.
        public let responseHeadersPolicyId: String?
        /// Indicates whether you want to distribute media files in the Microsoft Smooth Streaming
        /// 			format using the origin that is associated with this cache behavior. If so, specify
        /// 				true; if not, specify false. If you specify
        /// 				true for SmoothStreaming, you can still distribute other
        /// 			content using this cache behavior if the content matches the value of
        /// 				PathPattern.
        public let smoothStreaming: Bool?
        /// The value of ID for the origin that you want CloudFront to route requests to
        /// 			when they use the default cache behavior.
        public let targetOriginId: String
        /// A list of key groups that CloudFront can use to validate signed URLs or signed
        /// 			cookies. When a cache behavior contains trusted key groups, CloudFront requires signed URLs or signed
        /// 			cookies for all requests that match the cache behavior. The URLs or cookies must be
        /// 			signed with a private key whose corresponding public key is in the key group. The signed
        /// 			URL or cookie contains information about which public key CloudFront should use to verify the
        /// 			signature. For more information, see Serving private content in the
        /// 				Amazon CloudFront Developer Guide.
        public let trustedKeyGroups: TrustedKeyGroups?
        ///  We recommend using TrustedKeyGroups instead of
        /// 					TrustedSigners.  A list of Amazon Web Services account IDs whose public keys CloudFront can use to validate signed URLs or
        /// 			signed cookies. When a cache behavior contains trusted signers, CloudFront requires signed URLs or signed
        /// 			cookies for all requests that match the cache behavior. The URLs or cookies must be
        /// 			signed with the private key of a CloudFront key pair in a trusted signer's Amazon Web Services account. The
        /// 			signed URL or cookie contains information about which public key CloudFront should use to
        /// 			verify the signature. For more information, see Serving private content in the
        /// 				Amazon CloudFront Developer Guide.
        public let trustedSigners: TrustedSigners?
        /// The protocol that viewers can use to access the files in the origin specified by
        /// 				TargetOriginId when a request matches the path pattern in
        /// 				PathPattern. You can specify the following options:    allow-all: Viewers can use HTTP or HTTPS.    redirect-to-https: If a viewer submits an HTTP request, CloudFront
        /// 					returns an HTTP status code of 301 (Moved Permanently) to the viewer along with
        /// 					the HTTPS URL. The viewer then resubmits the request using the new URL.    https-only: If a viewer sends an HTTP request, CloudFront returns an
        /// 					HTTP status code of 403 (Forbidden).   For more information about requiring the HTTPS protocol, see Requiring HTTPS Between Viewers and CloudFront in the
        /// 				Amazon CloudFront Developer Guide.  The only way to guarantee that viewers retrieve an object that was fetched from
        /// 				the origin using HTTPS is never to use any other protocol to fetch the object. If
        /// 				you have recently changed from HTTP to HTTPS, we recommend that you clear your
        /// 				objects' cache because cached objects are protocol agnostic. That means that an edge
        /// 				location will return an object from the cache regardless of whether the current
        /// 				request protocol matches the protocol used previously. For more information, see
        /// 					Managing Cache
        /// 					Expiration in the Amazon CloudFront Developer Guide.
        public let viewerProtocolPolicy: ViewerProtocolPolicy

        public init(allowedMethods: AllowedMethods? = nil, cachePolicyId: String? = nil, compress: Bool? = nil, fieldLevelEncryptionId: String? = nil, functionAssociations: FunctionAssociations? = nil, lambdaFunctionAssociations: LambdaFunctionAssociations? = nil, originRequestPolicyId: String? = nil, realtimeLogConfigArn: String? = nil, responseHeadersPolicyId: String? = nil, smoothStreaming: Bool? = nil, targetOriginId: String, trustedKeyGroups: TrustedKeyGroups? = nil, trustedSigners: TrustedSigners? = nil, viewerProtocolPolicy: ViewerProtocolPolicy) {
            self.allowedMethods = allowedMethods
            self.cachePolicyId = cachePolicyId
            self.compress = compress
            self.defaultTTL = nil
            self.fieldLevelEncryptionId = fieldLevelEncryptionId
            self.forwardedValues = nil
            self.functionAssociations = functionAssociations
            self.lambdaFunctionAssociations = lambdaFunctionAssociations
            self.maxTTL = nil
            self.minTTL = nil
            self.originRequestPolicyId = originRequestPolicyId
            self.realtimeLogConfigArn = realtimeLogConfigArn
            self.responseHeadersPolicyId = responseHeadersPolicyId
            self.smoothStreaming = smoothStreaming
            self.targetOriginId = targetOriginId
            self.trustedKeyGroups = trustedKeyGroups
            self.trustedSigners = trustedSigners
            self.viewerProtocolPolicy = viewerProtocolPolicy
        }

        @available(*, deprecated, message: "Members defaultTTL, forwardedValues, maxTTL, minTTL have been deprecated")
        public init(allowedMethods: AllowedMethods? = nil, cachePolicyId: String? = nil, compress: Bool? = nil, defaultTTL: Int64? = nil, fieldLevelEncryptionId: String? = nil, forwardedValues: ForwardedValues? = nil, functionAssociations: FunctionAssociations? = nil, lambdaFunctionAssociations: LambdaFunctionAssociations? = nil, maxTTL: Int64? = nil, minTTL: Int64? = nil, originRequestPolicyId: String? = nil, realtimeLogConfigArn: String? = nil, responseHeadersPolicyId: String? = nil, smoothStreaming: Bool? = nil, targetOriginId: String, trustedKeyGroups: TrustedKeyGroups? = nil, trustedSigners: TrustedSigners? = nil, viewerProtocolPolicy: ViewerProtocolPolicy) {
            self.allowedMethods = allowedMethods
            self.cachePolicyId = cachePolicyId
            self.compress = compress
            self.defaultTTL = defaultTTL
            self.fieldLevelEncryptionId = fieldLevelEncryptionId
            self.forwardedValues = forwardedValues
            self.functionAssociations = functionAssociations
            self.lambdaFunctionAssociations = lambdaFunctionAssociations
            self.maxTTL = maxTTL
            self.minTTL = minTTL
            self.originRequestPolicyId = originRequestPolicyId
            self.realtimeLogConfigArn = realtimeLogConfigArn
            self.responseHeadersPolicyId = responseHeadersPolicyId
            self.smoothStreaming = smoothStreaming
            self.targetOriginId = targetOriginId
            self.trustedKeyGroups = trustedKeyGroups
            self.trustedSigners = trustedSigners
            self.viewerProtocolPolicy = viewerProtocolPolicy
        }

        public func validate(name: String) throws {
            try self.functionAssociations?.validate(name: "\(name).functionAssociations")
        }

        private enum CodingKeys: String, CodingKey {
            case allowedMethods = "AllowedMethods"
            case cachePolicyId = "CachePolicyId"
            case compress = "Compress"
            case defaultTTL = "DefaultTTL"
            case fieldLevelEncryptionId = "FieldLevelEncryptionId"
            case forwardedValues = "ForwardedValues"
            case functionAssociations = "FunctionAssociations"
            case lambdaFunctionAssociations = "LambdaFunctionAssociations"
            case maxTTL = "MaxTTL"
            case minTTL = "MinTTL"
            case originRequestPolicyId = "OriginRequestPolicyId"
            case realtimeLogConfigArn = "RealtimeLogConfigArn"
            case responseHeadersPolicyId = "ResponseHeadersPolicyId"
            case smoothStreaming = "SmoothStreaming"
            case targetOriginId = "TargetOriginId"
            case trustedKeyGroups = "TrustedKeyGroups"
            case trustedSigners = "TrustedSigners"
            case viewerProtocolPolicy = "ViewerProtocolPolicy"
        }
    }

    public struct DeleteCachePolicyRequest: AWSEncodableShape {
        /// The unique identifier for the cache policy that you are deleting. To get the
        /// 			identifier, you can use ListCachePolicies.
        public let id: String
        /// The version of the cache policy that you are deleting. The version is the cache
        /// 			policy's ETag value, which you can get using
        /// 			ListCachePolicies, GetCachePolicy, or
        /// 				GetCachePolicyConfig.
        public let ifMatch: String?

        public init(id: String, ifMatch: String? = nil) {
            self.id = id
            self.ifMatch = ifMatch
        }

        public func encode(to encoder: Encoder) throws {
            let request = encoder.userInfo[.awsRequest]! as! RequestEncodingContainer
            _ = encoder.container(keyedBy: CodingKeys.self)
            request.encodePath(self.id, key: "Id")
            request.encodeHeader(self.ifMatch, key: "If-Match")
        }

        private enum CodingKeys: CodingKey {}
    }

    public struct DeleteCloudFrontOriginAccessIdentityRequest: AWSEncodableShape {
        /// The origin access identity's ID.
        public let id: String
        /// The value of the ETag header you received from a previous
        /// 				GET or PUT request. For example:
        /// 				E2QWRUHAPOMQZL.
        public let ifMatch: String?

        public init(id: String, ifMatch: String? = nil) {
            self.id = id
            self.ifMatch = ifMatch
        }

        public func encode(to encoder: Encoder) throws {
            let request = encoder.userInfo[.awsRequest]! as! RequestEncodingContainer
            _ = encoder.container(keyedBy: CodingKeys.self)
            request.encodePath(self.id, key: "Id")
            request.encodeHeader(self.ifMatch, key: "If-Match")
        }

        private enum CodingKeys: CodingKey {}
    }

    public struct DeleteContinuousDeploymentPolicyRequest: AWSEncodableShape {
        /// The identifier of the continuous deployment policy that you are deleting.
        public let id: String
        /// The current version (ETag value) of the continuous deployment policy that
        /// 			you are deleting.
        public let ifMatch: String?

        public init(id: String, ifMatch: String? = nil) {
            self.id = id
            self.ifMatch = ifMatch
        }

        public func encode(to encoder: Encoder) throws {
            let request = encoder.userInfo[.awsRequest]! as! RequestEncodingContainer
            _ = encoder.container(keyedBy: CodingKeys.self)
            request.encodePath(self.id, key: "Id")
            request.encodeHeader(self.ifMatch, key: "If-Match")
        }

        private enum CodingKeys: CodingKey {}
    }

    public struct DeleteDistributionRequest: AWSEncodableShape {
        /// The distribution ID.
        public let id: String
        /// The value of the ETag header that you received when you disabled the
        /// 			distribution. For example: E2QWRUHAPOMQZL.
        public let ifMatch: String?

        public init(id: String, ifMatch: String? = nil) {
            self.id = id
            self.ifMatch = ifMatch
        }

        public func encode(to encoder: Encoder) throws {
            let request = encoder.userInfo[.awsRequest]! as! RequestEncodingContainer
            _ = encoder.container(keyedBy: CodingKeys.self)
            request.encodePath(self.id, key: "Id")
            request.encodeHeader(self.ifMatch, key: "If-Match")
        }

        private enum CodingKeys: CodingKey {}
    }

    public struct DeleteFieldLevelEncryptionConfigRequest: AWSEncodableShape {
        /// The ID of the configuration you want to delete from CloudFront.
        public let id: String
        /// The value of the ETag header that you received when retrieving the
        /// 			configuration identity to delete. For example: E2QWRUHAPOMQZL.
        public let ifMatch: String?

        public init(id: String, ifMatch: String? = nil) {
            self.id = id
            self.ifMatch = ifMatch
        }

        public func encode(to encoder: Encoder) throws {
            let request = encoder.userInfo[.awsRequest]! as! RequestEncodingContainer
            _ = encoder.container(keyedBy: CodingKeys.self)
            request.encodePath(self.id, key: "Id")
            request.encodeHeader(self.ifMatch, key: "If-Match")
        }

        private enum CodingKeys: CodingKey {}
    }

    public struct DeleteFieldLevelEncryptionProfileRequest: AWSEncodableShape {
        /// Request the ID of the profile you want to delete from CloudFront.
        public let id: String
        /// The value of the ETag header that you received when retrieving the
        /// 			profile to delete. For example: E2QWRUHAPOMQZL.
        public let ifMatch: String?

        public init(id: String, ifMatch: String? = nil) {
            self.id = id
            self.ifMatch = ifMatch
        }

        public func encode(to encoder: Encoder) throws {
            let request = encoder.userInfo[.awsRequest]! as! RequestEncodingContainer
            _ = encoder.container(keyedBy: CodingKeys.self)
            request.encodePath(self.id, key: "Id")
            request.encodeHeader(self.ifMatch, key: "If-Match")
        }

        private enum CodingKeys: CodingKey {}
    }

    public struct DeleteFunctionRequest: AWSEncodableShape {
        /// The current version (ETag value) of the function that you are deleting,
        /// 			which you can get using DescribeFunction.
        public let ifMatch: String
        /// The name of the function that you are deleting.
        public let name: String

        public init(ifMatch: String, name: String) {
            self.ifMatch = ifMatch
            self.name = name
        }

        public func encode(to encoder: Encoder) throws {
            let request = encoder.userInfo[.awsRequest]! as! RequestEncodingContainer
            _ = encoder.container(keyedBy: CodingKeys.self)
            request.encodeHeader(self.ifMatch, key: "If-Match")
            request.encodePath(self.name, key: "Name")
        }

        private enum CodingKeys: CodingKey {}
    }

    public struct DeleteKeyGroupRequest: AWSEncodableShape {
        /// The identifier of the key group that you are deleting. To get the identifier, use
        /// 				ListKeyGroups.
        public let id: String
        /// The version of the key group that you are deleting. The version is the key group's
        /// 				ETag value. To get the ETag, use GetKeyGroup
        /// 			or GetKeyGroupConfig.
        public let ifMatch: String?

        public init(id: String, ifMatch: String? = nil) {
            self.id = id
            self.ifMatch = ifMatch
        }

        public func encode(to encoder: Encoder) throws {
            let request = encoder.userInfo[.awsRequest]! as! RequestEncodingContainer
            _ = encoder.container(keyedBy: CodingKeys.self)
            request.encodePath(self.id, key: "Id")
            request.encodeHeader(self.ifMatch, key: "If-Match")
        }

        private enum CodingKeys: CodingKey {}
    }

    public struct DeleteKeyValueStoreRequest: AWSEncodableShape {
        /// The Key Value Store to delete, if a match occurs.
        public let ifMatch: String
        /// The name of the Key Value Store.
        public let name: String

        public init(ifMatch: String, name: String) {
            self.ifMatch = ifMatch
            self.name = name
        }

        public func encode(to encoder: Encoder) throws {
            let request = encoder.userInfo[.awsRequest]! as! RequestEncodingContainer
            _ = encoder.container(keyedBy: CodingKeys.self)
            request.encodeHeader(self.ifMatch, key: "If-Match")
            request.encodePath(self.name, key: "Name")
        }

        public func validate(name: String) throws {
            try self.validate(self.name, name: "name", parent: name, max: 64)
            try self.validate(self.name, name: "name", parent: name, min: 1)
            try self.validate(self.name, name: "name", parent: name, pattern: "^[a-zA-Z0-9-_]{1,64}$")
        }

        private enum CodingKeys: CodingKey {}
    }

    public struct DeleteMonitoringSubscriptionRequest: AWSEncodableShape {
        /// The ID of the distribution that you are disabling metrics for.
        public let distributionId: String

        public init(distributionId: String) {
            self.distributionId = distributionId
        }

        public func encode(to encoder: Encoder) throws {
            let request = encoder.userInfo[.awsRequest]! as! RequestEncodingContainer
            _ = encoder.container(keyedBy: CodingKeys.self)
            request.encodePath(self.distributionId, key: "DistributionId")
        }

        private enum CodingKeys: CodingKey {}
    }

    public struct DeleteMonitoringSubscriptionResult: AWSDecodableShape {
        public init() {}
    }

    public struct DeleteOriginAccessControlRequest: AWSEncodableShape {
        /// The unique identifier of the origin access control that you are deleting.
        public let id: String
        /// The current version (ETag value) of the origin access control that you
        /// 			are deleting.
        public let ifMatch: String?

        public init(id: String, ifMatch: String? = nil) {
            self.id = id
            self.ifMatch = ifMatch
        }

        public func encode(to encoder: Encoder) throws {
            let request = encoder.userInfo[.awsRequest]! as! RequestEncodingContainer
            _ = encoder.container(keyedBy: CodingKeys.self)
            request.encodePath(self.id, key: "Id")
            request.encodeHeader(self.ifMatch, key: "If-Match")
        }

        private enum CodingKeys: CodingKey {}
    }

    public struct DeleteOriginRequestPolicyRequest: AWSEncodableShape {
        /// The unique identifier for the origin request policy that you are deleting. To get the
        /// 			identifier, you can use ListOriginRequestPolicies.
        public let id: String
        /// The version of the origin request policy that you are deleting. The version is the
        /// 			origin request policy's ETag value, which you can get using
        /// 				ListOriginRequestPolicies, GetOriginRequestPolicy, or
        /// 				GetOriginRequestPolicyConfig.
        public let ifMatch: String?

        public init(id: String, ifMatch: String? = nil) {
            self.id = id
            self.ifMatch = ifMatch
        }

        public func encode(to encoder: Encoder) throws {
            let request = encoder.userInfo[.awsRequest]! as! RequestEncodingContainer
            _ = encoder.container(keyedBy: CodingKeys.self)
            request.encodePath(self.id, key: "Id")
            request.encodeHeader(self.ifMatch, key: "If-Match")
        }

        private enum CodingKeys: CodingKey {}
    }

    public struct DeletePublicKeyRequest: AWSEncodableShape {
        /// The ID of the public key you want to remove from CloudFront.
        public let id: String
        /// The value of the ETag header that you received when retrieving the public
        /// 			key identity to delete. For example: E2QWRUHAPOMQZL.
        public let ifMatch: String?

        public init(id: String, ifMatch: String? = nil) {
            self.id = id
            self.ifMatch = ifMatch
        }

        public func encode(to encoder: Encoder) throws {
            let request = encoder.userInfo[.awsRequest]! as! RequestEncodingContainer
            _ = encoder.container(keyedBy: CodingKeys.self)
            request.encodePath(self.id, key: "Id")
            request.encodeHeader(self.ifMatch, key: "If-Match")
        }

        private enum CodingKeys: CodingKey {}
    }

    public struct DeleteRealtimeLogConfigRequest: AWSEncodableShape {
        /// The Amazon Resource Name (ARN) of the real-time log configuration to delete.
        public let arn: String?
        /// The name of the real-time log configuration to delete.
        public let name: String?

        public init(arn: String? = nil, name: String? = nil) {
            self.arn = arn
            self.name = name
        }

        private enum CodingKeys: String, CodingKey {
            case arn = "ARN"
            case name = "Name"
        }
    }

    public struct DeleteResponseHeadersPolicyRequest: AWSEncodableShape {
        /// The identifier for the response headers policy that you are deleting. To get the identifier, you can use ListResponseHeadersPolicies.
        public let id: String
        /// The version of the response headers policy that you are deleting. The version is the response headers policy's ETag value, which you can
        /// 			get using ListResponseHeadersPolicies,
        /// 				GetResponseHeadersPolicy, or
        /// 				GetResponseHeadersPolicyConfig.
        public let ifMatch: String?

        public init(id: String, ifMatch: String? = nil) {
            self.id = id
            self.ifMatch = ifMatch
        }

        public func encode(to encoder: Encoder) throws {
            let request = encoder.userInfo[.awsRequest]! as! RequestEncodingContainer
            _ = encoder.container(keyedBy: CodingKeys.self)
            request.encodePath(self.id, key: "Id")
            request.encodeHeader(self.ifMatch, key: "If-Match")
        }

        private enum CodingKeys: CodingKey {}
    }

    public struct DeleteStreamingDistributionRequest: AWSEncodableShape {
        /// The distribution ID.
        public let id: String
        /// The value of the ETag header that you received when you disabled the
        /// 			streaming distribution. For example: E2QWRUHAPOMQZL.
        public let ifMatch: String?

        public init(id: String, ifMatch: String? = nil) {
            self.id = id
            self.ifMatch = ifMatch
        }

        public func encode(to encoder: Encoder) throws {
            let request = encoder.userInfo[.awsRequest]! as! RequestEncodingContainer
            _ = encoder.container(keyedBy: CodingKeys.self)
            request.encodePath(self.id, key: "Id")
            request.encodeHeader(self.ifMatch, key: "If-Match")
        }

        private enum CodingKeys: CodingKey {}
    }

    public struct DescribeFunctionRequest: AWSEncodableShape {
        /// The name of the function that you are getting information about.
        public let name: String
        /// The function's stage, either DEVELOPMENT or LIVE.
        public let stage: FunctionStage?

        public init(name: String, stage: FunctionStage? = nil) {
            self.name = name
            self.stage = stage
        }

        public func encode(to encoder: Encoder) throws {
            let request = encoder.userInfo[.awsRequest]! as! RequestEncodingContainer
            _ = encoder.container(keyedBy: CodingKeys.self)
            request.encodePath(self.name, key: "Name")
            request.encodeQuery(self.stage, key: "Stage")
        }

        private enum CodingKeys: CodingKey {}
    }

    public struct DescribeFunctionResult: AWSDecodableShape {
        /// The version identifier for the current version of the CloudFront function.
        public let eTag: String?
        /// Contains configuration information and metadata about a CloudFront function.
        public let functionSummary: FunctionSummary

        public init(eTag: String? = nil, functionSummary: FunctionSummary) {
            self.eTag = eTag
            self.functionSummary = functionSummary
        }

        public init(from decoder: Decoder) throws {
            let response = decoder.userInfo[.awsResponse]! as! ResponseDecodingContainer
            let container = try decoder.singleValueContainer()
            self.eTag = try response.decodeHeaderIfPresent(String.self, key: "ETag")
            self.functionSummary = try container.decode(FunctionSummary.self)
        }

        private enum CodingKeys: CodingKey {}
    }

    public struct DescribeKeyValueStoreRequest: AWSEncodableShape {
        /// The name of the Key Value Store.
        public let name: String

        public init(name: String) {
            self.name = name
        }

        public func encode(to encoder: Encoder) throws {
            let request = encoder.userInfo[.awsRequest]! as! RequestEncodingContainer
            _ = encoder.container(keyedBy: CodingKeys.self)
            request.encodePath(self.name, key: "Name")
        }

        public func validate(name: String) throws {
            try self.validate(self.name, name: "name", parent: name, max: 64)
            try self.validate(self.name, name: "name", parent: name, min: 1)
            try self.validate(self.name, name: "name", parent: name, pattern: "^[a-zA-Z0-9-_]{1,64}$")
        }

        private enum CodingKeys: CodingKey {}
    }

    public struct DescribeKeyValueStoreResult: AWSDecodableShape {
        /// The ETag of the resulting Key Value Store.
        public let eTag: String?
        /// The resulting Key Value Store.
        public let keyValueStore: KeyValueStore

        public init(eTag: String? = nil, keyValueStore: KeyValueStore) {
            self.eTag = eTag
            self.keyValueStore = keyValueStore
        }

        public init(from decoder: Decoder) throws {
            let response = decoder.userInfo[.awsResponse]! as! ResponseDecodingContainer
            let container = try decoder.singleValueContainer()
            self.eTag = try response.decodeHeaderIfPresent(String.self, key: "ETag")
            self.keyValueStore = try container.decode(KeyValueStore.self)
        }

        private enum CodingKeys: CodingKey {}
    }

    public struct Distribution: AWSDecodableShape {
        public struct _AliasICPRecordalsEncoding: ArrayCoderProperties { public static let member = "AliasICPRecordal" }

        /// This field contains a list of key groups and the public keys in each key group that
        /// 			CloudFront can use to verify the signatures of signed URLs or signed cookies.
        public let activeTrustedKeyGroups: ActiveTrustedKeyGroups?
        ///  We recommend using TrustedKeyGroups instead of
        /// 					TrustedSigners.  This field contains a list of Amazon Web Services account IDs and the active CloudFront key pairs in each
        /// 			account that CloudFront can use to verify the signatures of signed URLs or signed
        /// 			cookies.
        public let activeTrustedSigners: ActiveTrustedSigners?
        /// Amazon Web Services services in China customers must file for an Internet Content Provider (ICP)
        /// 			recordal if they want to serve content publicly on an alternate domain name, also known
        /// 			as a CNAME, that they've added to CloudFront. AliasICPRecordal provides the ICP recordal
        /// 			status for CNAMEs associated with distributions. For more information about ICP recordals, see  Signup, Accounts, and Credentials in Getting Started with Amazon Web Services
        /// 				services in China.
        @OptionalCustomCoding<ArrayCoder<_AliasICPRecordalsEncoding, AliasICPRecordal>>
        public var aliasICPRecordals: [AliasICPRecordal]?
        /// The distribution's Amazon Resource Name (ARN).
        public let arn: String
        /// The distribution's configuration.
        public let distributionConfig: DistributionConfig
        /// The distribution's CloudFront domain name. For example:
        /// 			d111111abcdef8.cloudfront.net.
        public let domainName: String
        /// The distribution's identifier. For example: E1U5RQF7T870K0.
        public let id: String
        /// The number of invalidation batches currently in progress.
        public let inProgressInvalidationBatches: Int
        /// The date and time when the distribution was last modified.
        public let lastModifiedTime: Date
        /// The distribution's status. When the status is Deployed, the
        /// 			distribution's information is fully propagated to all CloudFront edge locations.
        public let status: String

        public init(activeTrustedKeyGroups: ActiveTrustedKeyGroups? = nil, activeTrustedSigners: ActiveTrustedSigners? = nil, aliasICPRecordals: [AliasICPRecordal]? = nil, arn: String, distributionConfig: DistributionConfig, domainName: String, id: String, inProgressInvalidationBatches: Int, lastModifiedTime: Date, status: String) {
            self.activeTrustedKeyGroups = activeTrustedKeyGroups
            self.activeTrustedSigners = activeTrustedSigners
            self.aliasICPRecordals = aliasICPRecordals
            self.arn = arn
            self.distributionConfig = distributionConfig
            self.domainName = domainName
            self.id = id
            self.inProgressInvalidationBatches = inProgressInvalidationBatches
            self.lastModifiedTime = lastModifiedTime
            self.status = status
        }

        private enum CodingKeys: String, CodingKey {
            case activeTrustedKeyGroups = "ActiveTrustedKeyGroups"
            case activeTrustedSigners = "ActiveTrustedSigners"
            case aliasICPRecordals = "AliasICPRecordals"
            case arn = "ARN"
            case distributionConfig = "DistributionConfig"
            case domainName = "DomainName"
            case id = "Id"
            case inProgressInvalidationBatches = "InProgressInvalidationBatches"
            case lastModifiedTime = "LastModifiedTime"
            case status = "Status"
        }
    }

    public struct DistributionConfig: AWSEncodableShape & AWSDecodableShape {
        /// A complex type that contains information about CNAMEs (alternate domain names), if
        /// 			any, for this distribution.
        public let aliases: Aliases?
        /// A complex type that contains zero or more CacheBehavior elements.
        public let cacheBehaviors: CacheBehaviors?
        /// A unique value (for example, a date-time stamp) that ensures that the request can't be
        /// 			replayed. If the value of CallerReference is new (regardless of the content of the
        /// 				DistributionConfig object), CloudFront creates a new distribution. If CallerReference is a value that you already sent in a previous request
        /// 			to create a distribution, CloudFront returns a DistributionAlreadyExists
        /// 			error.
        public let callerReference: String
        /// A comment to describe the distribution. The comment cannot be longer than
        /// 			128 characters.
        public let comment: String
        /// The identifier of a continuous deployment policy. For more information, see
        /// 				CreateContinuousDeploymentPolicy.
        public let continuousDeploymentPolicyId: String?
        /// A complex type that controls the following:   Whether CloudFront replaces HTTP status codes in the 4xx and 5xx range with custom
        /// 					error messages before returning the response to the viewer.   How long CloudFront caches HTTP status codes in the 4xx and 5xx range.   For more information about custom error pages, see Customizing
        /// 				Error Responses in the Amazon CloudFront Developer Guide.
        public let customErrorResponses: CustomErrorResponses?
        /// A complex type that describes the default cache behavior if you don't specify a
        /// 				CacheBehavior element or if files don't match any of the values of
        /// 				PathPattern in CacheBehavior elements. You must create
        /// 			exactly one default cache behavior.
        public let defaultCacheBehavior: DefaultCacheBehavior
        /// The object that you want CloudFront to request from your origin (for example,
        /// 				index.html) when a viewer requests the root URL for your distribution
        /// 				(https://www.example.com) instead of an object in your distribution
        /// 				(https://www.example.com/product-description.html). Specifying a
        /// 			default root object avoids exposing the contents of your distribution. Specify only the object name, for example, index.html. Don't add a
        /// 				/ before the object name. If you don't want to specify a default root object when you create a distribution,
        /// 			include an empty DefaultRootObject element. To delete the default root object from an existing distribution, update the
        /// 			distribution configuration and include an empty DefaultRootObject
        /// 			element. To replace the default root object, update the distribution configuration and specify
        /// 			the new object. For more information about the default root object, see Creating a
        /// 				Default Root Object in the Amazon CloudFront Developer Guide.
        public let defaultRootObject: String?
        /// From this field, you can enable or disable the selected distribution.
        public let enabled: Bool
        /// (Optional) Specify the maximum HTTP version(s) that you want viewers to use to
        /// 			communicate with CloudFront. The default value for new web distributions is
        /// 			http2. Viewers that don't support HTTP/2 automatically use an earlier HTTP
        /// 			version. For viewers and CloudFront to use HTTP/2, viewers must support TLSv1.2 or later, and must
        /// 			support Server Name Indication (SNI). For viewers and CloudFront to use HTTP/3, viewers must support TLSv1.3 and Server Name
        /// 			Indication (SNI). CloudFront supports HTTP/3 connection migration to allow the viewer to
        /// 			switch networks without losing connection. For more information about connection
        /// 			migration, see Connection Migration at RFC 9000. For more information about supported
        /// 			TLSv1.3 ciphers, see Supported protocols and ciphers between viewers and CloudFront.
        public let httpVersion: HttpVersion?
        /// If you want CloudFront to respond to IPv6 DNS requests with an IPv6 address for your
        /// 			distribution, specify true. If you specify false, CloudFront
        /// 			responds to IPv6 DNS requests with the DNS response code NOERROR and with
        /// 			no IP addresses. This allows viewers to submit a second request, for an IPv4 address for
        /// 			your distribution. In general, you should enable IPv6 if you have users on IPv6 networks who want to
        /// 			access your content. However, if you're using signed URLs or signed cookies to restrict
        /// 			access to your content, and if you're using a custom policy that includes the
        /// 				IpAddress parameter to restrict the IP addresses that can access your
        /// 			content, don't enable IPv6. If you want to restrict access to some content by IP address
        /// 			and not restrict access to other content (or restrict access but not by IP address), you
        /// 			can create two distributions. For more information, see Creating a Signed URL Using a Custom Policy in the
        /// 				Amazon CloudFront Developer Guide. If you're using an Route 53 Amazon Web Services Integration alias resource record set to route traffic to your CloudFront
        /// 			distribution, you need to create a second alias resource record set when both of the
        /// 			following are true:   You enable IPv6 for the distribution   You're using alternate domain names in the URLs for your objects   For more information, see Routing
        /// 				Traffic to an Amazon CloudFront Web Distribution by Using Your Domain Name in the
        /// 				Route 53 Amazon Web Services Integration Developer Guide. If you created a CNAME resource record set, either with Route 53 Amazon Web Services Integration or with another DNS
        /// 			service, you don't need to make any changes. A CNAME record will route traffic to your
        /// 			distribution regardless of the IP address format of the viewer request.
        public let isIPV6Enabled: Bool?
        /// A complex type that controls whether access logs are written for the
        /// 			distribution. For more information about logging, see Access Logs in
        /// 			the Amazon CloudFront Developer Guide.
        public let logging: LoggingConfig?
        /// A complex type that contains information about origin groups for this
        /// 			distribution.
        public let originGroups: OriginGroups?
        /// A complex type that contains information about origins for this distribution.
        public let origins: Origins
        /// The price class that corresponds with the maximum price that you want to pay for CloudFront
        /// 			service. If you specify PriceClass_All, CloudFront responds to requests for your
        /// 			objects from all CloudFront edge locations. If you specify a price class other than PriceClass_All, CloudFront serves your
        /// 			objects from the CloudFront edge location that has the lowest latency among the edge locations
        /// 			in your price class. Viewers who are in or near regions that are excluded from your
        /// 			specified price class may encounter slower performance. For more information about price classes, see Choosing the Price
        /// 				Class for a CloudFront Distribution in the Amazon CloudFront Developer Guide.
        /// 			For information about CloudFront pricing, including how price classes (such as Price Class
        /// 			100) map to CloudFront regions, see Amazon CloudFront
        /// 				Pricing.
        public let priceClass: PriceClass?
        /// A complex type that identifies ways in which you want to restrict distribution of your
        /// 			content.
        public let restrictions: Restrictions?
        /// A Boolean that indicates whether this is a staging distribution. When this value is
        /// 				true, this is a staging distribution. When this value is
        /// 				false, this is not a staging distribution.
        public let staging: Bool?
        /// A complex type that determines the distribution's SSL/TLS configuration for
        /// 			communicating with viewers.
        public let viewerCertificate: ViewerCertificate?
        /// A unique identifier that specifies the WAF web ACL, if any, to associate with this
        /// 			distribution. To specify a web ACL created using the latest version of WAF, use the
        /// 			ACL ARN, for example
        /// 				arn:aws:wafv2:us-east-1:123456789012:global/webacl/ExampleWebACL/473e64fd-f30b-4765-81a0-62ad96dd167a.
        /// 			To specify a web ACL created using WAF Classic, use the ACL ID, for example
        /// 				473e64fd-f30b-4765-81a0-62ad96dd167a. WAF is a web application firewall that lets you monitor the HTTP and HTTPS requests
        /// 			that are forwarded to CloudFront, and lets you control access to your content. Based on
        /// 			conditions that you specify, such as the IP addresses that requests originate from or
        /// 			the values of query strings, CloudFront responds to requests either with the requested content
        /// 			or with an HTTP 403 status code (Forbidden). You can also configure CloudFront to return a
        /// 			custom error page when a request is blocked. For more information about WAF, see the
        /// 				WAF Developer Guide.
        public let webACLId: String?

        public init(aliases: Aliases? = nil, cacheBehaviors: CacheBehaviors? = nil, callerReference: String, comment: String, continuousDeploymentPolicyId: String? = nil, customErrorResponses: CustomErrorResponses? = nil, defaultCacheBehavior: DefaultCacheBehavior, defaultRootObject: String? = nil, enabled: Bool, httpVersion: HttpVersion? = nil, isIPV6Enabled: Bool? = nil, logging: LoggingConfig? = nil, originGroups: OriginGroups? = nil, origins: Origins, priceClass: PriceClass? = nil, restrictions: Restrictions? = nil, staging: Bool? = nil, viewerCertificate: ViewerCertificate? = nil, webACLId: String? = nil) {
            self.aliases = aliases
            self.cacheBehaviors = cacheBehaviors
            self.callerReference = callerReference
            self.comment = comment
            self.continuousDeploymentPolicyId = continuousDeploymentPolicyId
            self.customErrorResponses = customErrorResponses
            self.defaultCacheBehavior = defaultCacheBehavior
            self.defaultRootObject = defaultRootObject
            self.enabled = enabled
            self.httpVersion = httpVersion
            self.isIPV6Enabled = isIPV6Enabled
            self.logging = logging
            self.originGroups = originGroups
            self.origins = origins
            self.priceClass = priceClass
            self.restrictions = restrictions
            self.staging = staging
            self.viewerCertificate = viewerCertificate
            self.webACLId = webACLId
        }

        public func validate(name: String) throws {
            try self.cacheBehaviors?.validate(name: "\(name).cacheBehaviors")
            try self.defaultCacheBehavior.validate(name: "\(name).defaultCacheBehavior")
            try self.originGroups?.validate(name: "\(name).originGroups")
            try self.origins.validate(name: "\(name).origins")
        }

        private enum CodingKeys: String, CodingKey {
            case aliases = "Aliases"
            case cacheBehaviors = "CacheBehaviors"
            case callerReference = "CallerReference"
            case comment = "Comment"
            case continuousDeploymentPolicyId = "ContinuousDeploymentPolicyId"
            case customErrorResponses = "CustomErrorResponses"
            case defaultCacheBehavior = "DefaultCacheBehavior"
            case defaultRootObject = "DefaultRootObject"
            case enabled = "Enabled"
            case httpVersion = "HttpVersion"
            case isIPV6Enabled = "IsIPV6Enabled"
            case logging = "Logging"
            case originGroups = "OriginGroups"
            case origins = "Origins"
            case priceClass = "PriceClass"
            case restrictions = "Restrictions"
            case staging = "Staging"
            case viewerCertificate = "ViewerCertificate"
            case webACLId = "WebACLId"
        }
    }

    public struct DistributionConfigWithTags: AWSEncodableShape {
        /// A distribution configuration.
        public let distributionConfig: DistributionConfig
        /// A complex type that contains zero or more Tag elements.
        public let tags: Tags

        public init(distributionConfig: DistributionConfig, tags: Tags) {
            self.distributionConfig = distributionConfig
            self.tags = tags
        }

        public func validate(name: String) throws {
            try self.distributionConfig.validate(name: "\(name).distributionConfig")
            try self.tags.validate(name: "\(name).tags")
        }

        private enum CodingKeys: String, CodingKey {
            case distributionConfig = "DistributionConfig"
            case tags = "Tags"
        }
    }

    public struct DistributionIdList: AWSDecodableShape {
        public struct _ItemsEncoding: ArrayCoderProperties { public static let member = "DistributionId" }

        /// A flag that indicates whether more distribution IDs remain to be listed. If your
        /// 			results were truncated, you can make a subsequent request using the Marker
        /// 			request field to retrieve more distribution IDs in the list.
        public let isTruncated: Bool
        /// Contains the distribution IDs in the list.
        @OptionalCustomCoding<ArrayCoder<_ItemsEncoding, String>>
        public var items: [String]?
        /// The value provided in the Marker request field.
        public let marker: String
        /// The maximum number of distribution IDs requested.
        public let maxItems: Int
        /// Contains the value that you should use in the Marker field of a
        /// 			subsequent request to continue listing distribution IDs where you left off.
        public let nextMarker: String?
        /// The total number of distribution IDs returned in the response.
        public let quantity: Int

        public init(isTruncated: Bool, items: [String]? = nil, marker: String, maxItems: Int, nextMarker: String? = nil, quantity: Int) {
            self.isTruncated = isTruncated
            self.items = items
            self.marker = marker
            self.maxItems = maxItems
            self.nextMarker = nextMarker
            self.quantity = quantity
        }

        private enum CodingKeys: String, CodingKey {
            case isTruncated = "IsTruncated"
            case items = "Items"
            case marker = "Marker"
            case maxItems = "MaxItems"
            case nextMarker = "NextMarker"
            case quantity = "Quantity"
        }
    }

    public struct DistributionList: AWSDecodableShape {
        public struct _ItemsEncoding: ArrayCoderProperties { public static let member = "DistributionSummary" }

        /// A flag that indicates whether more distributions remain to be listed. If your results
        /// 			were truncated, you can make a follow-up pagination request using the
        /// 				Marker request parameter to retrieve more distributions in the
        /// 			list.
        public let isTruncated: Bool
        /// A complex type that contains one DistributionSummary element for each
        /// 			distribution that was created by the current Amazon Web Services account.
        @OptionalCustomCoding<ArrayCoder<_ItemsEncoding, DistributionSummary>>
        public var items: [DistributionSummary]?
        /// The value you provided for the Marker request parameter.
        public let marker: String
        /// The value you provided for the MaxItems request parameter.
        public let maxItems: Int
        /// If IsTruncated is true, this element is present and contains
        /// 			the value you can use for the Marker request parameter to continue listing
        /// 			your distributions where they left off.
        public let nextMarker: String?
        /// The number of distributions that were created by the current Amazon Web Services account.
        public let quantity: Int

        public init(isTruncated: Bool, items: [DistributionSummary]? = nil, marker: String, maxItems: Int, nextMarker: String? = nil, quantity: Int) {
            self.isTruncated = isTruncated
            self.items = items
            self.marker = marker
            self.maxItems = maxItems
            self.nextMarker = nextMarker
            self.quantity = quantity
        }

        private enum CodingKeys: String, CodingKey {
            case isTruncated = "IsTruncated"
            case items = "Items"
            case marker = "Marker"
            case maxItems = "MaxItems"
            case nextMarker = "NextMarker"
            case quantity = "Quantity"
        }
    }

    public struct DistributionSummary: AWSDecodableShape {
        public struct _AliasICPRecordalsEncoding: ArrayCoderProperties { public static let member = "AliasICPRecordal" }

        /// A complex type that contains information about CNAMEs (alternate domain names), if
        /// 			any, for this distribution.
        public let aliases: Aliases
        /// Amazon Web Services services in China customers must file for an Internet Content Provider (ICP)
        /// 			recordal if they want to serve content publicly on an alternate domain name, also known
        /// 			as a CNAME, that they've added to CloudFront. AliasICPRecordal provides the ICP recordal
        /// 			status for CNAMEs associated with distributions. For more information about ICP recordals, see  Signup, Accounts, and Credentials in Getting Started with Amazon Web Services
        /// 				services in China.
        @OptionalCustomCoding<ArrayCoder<_AliasICPRecordalsEncoding, AliasICPRecordal>>
        public var aliasICPRecordals: [AliasICPRecordal]?
        /// The ARN (Amazon Resource Name) for the distribution. For example:
        /// 				arn:aws:cloudfront::123456789012:distribution/EDFDVBD632BHDS5, where
        /// 				123456789012 is your Amazon Web Services account ID.
        public let arn: String
        /// A complex type that contains zero or more CacheBehavior elements.
        public let cacheBehaviors: CacheBehaviors
        /// The comment originally specified when this distribution was created.
        public let comment: String
        /// A complex type that contains zero or more CustomErrorResponses
        /// 			elements.
        public let customErrorResponses: CustomErrorResponses
        /// A complex type that describes the default cache behavior if you don't specify a
        /// 				CacheBehavior element or if files don't match any of the values of
        /// 				PathPattern in CacheBehavior elements. You must create
        /// 			exactly one default cache behavior.
        public let defaultCacheBehavior: DefaultCacheBehavior
        /// The domain name that corresponds to the distribution, for example,
        /// 				d111111abcdef8.cloudfront.net.
        public let domainName: String
        /// Whether the distribution is enabled to accept user requests for content.
        public let enabled: Bool
        /// Specify the maximum HTTP version that you want viewers to use to communicate with
        /// 			CloudFront. The default value for new web distributions is http2. Viewers that
        /// 			don't support HTTP/2 will automatically use an earlier version.
        public let httpVersion: UppercaseHttpVersion
        /// The identifier for the distribution. For example: EDFDVBD632BHDS5.
        public let id: String
        /// Whether CloudFront responds to IPv6 DNS requests with an IPv6 address for your
        /// 			distribution.
        public let isIPV6Enabled: Bool
        /// The date and time the distribution was last modified.
        public let lastModifiedTime: Date
        /// A complex type that contains information about origin groups for this
        /// 			distribution.
        public let originGroups: OriginGroups?
        /// A complex type that contains information about origins for this distribution.
        public let origins: Origins
        /// A complex type that contains information about price class for this streaming
        /// 			distribution.
        public let priceClass: PriceClass
        /// A complex type that identifies ways in which you want to restrict distribution of your
        /// 			content.
        public let restrictions: Restrictions
        /// Whether the primary distribution has a staging distribution enabled.
        public let staging: Bool
        /// The current status of the distribution. When the status is Deployed, the
        /// 			distribution's information is propagated to all CloudFront edge locations.
        public let status: String
        /// A complex type that determines the distribution's SSL/TLS configuration for
        /// 			communicating with viewers.
        public let viewerCertificate: ViewerCertificate
        /// The Web ACL Id (if any) associated with the distribution.
        public let webACLId: String

        public init(aliases: Aliases, aliasICPRecordals: [AliasICPRecordal]? = nil, arn: String, cacheBehaviors: CacheBehaviors, comment: String, customErrorResponses: CustomErrorResponses, defaultCacheBehavior: DefaultCacheBehavior, domainName: String, enabled: Bool, httpVersion: UppercaseHttpVersion, id: String, isIPV6Enabled: Bool, lastModifiedTime: Date, originGroups: OriginGroups? = nil, origins: Origins, priceClass: PriceClass, restrictions: Restrictions, staging: Bool, status: String, viewerCertificate: ViewerCertificate, webACLId: String) {
            self.aliases = aliases
            self.aliasICPRecordals = aliasICPRecordals
            self.arn = arn
            self.cacheBehaviors = cacheBehaviors
            self.comment = comment
            self.customErrorResponses = customErrorResponses
            self.defaultCacheBehavior = defaultCacheBehavior
            self.domainName = domainName
            self.enabled = enabled
            self.httpVersion = httpVersion
            self.id = id
            self.isIPV6Enabled = isIPV6Enabled
            self.lastModifiedTime = lastModifiedTime
            self.originGroups = originGroups
            self.origins = origins
            self.priceClass = priceClass
            self.restrictions = restrictions
            self.staging = staging
            self.status = status
            self.viewerCertificate = viewerCertificate
            self.webACLId = webACLId
        }

        private enum CodingKeys: String, CodingKey {
            case aliases = "Aliases"
            case aliasICPRecordals = "AliasICPRecordals"
            case arn = "ARN"
            case cacheBehaviors = "CacheBehaviors"
            case comment = "Comment"
            case customErrorResponses = "CustomErrorResponses"
            case defaultCacheBehavior = "DefaultCacheBehavior"
            case domainName = "DomainName"
            case enabled = "Enabled"
            case httpVersion = "HttpVersion"
            case id = "Id"
            case isIPV6Enabled = "IsIPV6Enabled"
            case lastModifiedTime = "LastModifiedTime"
            case originGroups = "OriginGroups"
            case origins = "Origins"
            case priceClass = "PriceClass"
            case restrictions = "Restrictions"
            case staging = "Staging"
            case status = "Status"
            case viewerCertificate = "ViewerCertificate"
            case webACLId = "WebACLId"
        }
    }

    public struct EncryptionEntities: AWSEncodableShape & AWSDecodableShape {
        public struct _ItemsEncoding: ArrayCoderProperties { public static let member = "EncryptionEntity" }

        /// An array of field patterns in a field-level encryption content type-profile mapping.
        ///
        @OptionalCustomCoding<ArrayCoder<_ItemsEncoding, EncryptionEntity>>
        public var items: [EncryptionEntity]?
        /// Number of field pattern items in a field-level encryption content type-profile
        /// 			mapping.
        public let quantity: Int

        public init(items: [EncryptionEntity]? = nil, quantity: Int) {
            self.items = items
            self.quantity = quantity
        }

        private enum CodingKeys: String, CodingKey {
            case items = "Items"
            case quantity = "Quantity"
        }
    }

    public struct EncryptionEntity: AWSEncodableShape & AWSDecodableShape {
        /// Field patterns in a field-level encryption content type profile specify the fields
        /// 			that you want to be encrypted. You can provide the full field name, or any beginning
        /// 			characters followed by a wildcard (*). You can't overlap field patterns. For example,
        /// 			you can't have both ABC* and AB*. Note that field patterns are case-sensitive.
        public let fieldPatterns: FieldPatterns
        /// The provider associated with the public key being used for encryption. This value must
        /// 			also be provided with the private key for applications to be able to decrypt
        /// 			data.
        public let providerId: String
        /// The public key associated with a set of field-level encryption patterns, to be used
        /// 			when encrypting the fields that match the patterns.
        public let publicKeyId: String

        public init(fieldPatterns: FieldPatterns, providerId: String, publicKeyId: String) {
            self.fieldPatterns = fieldPatterns
            self.providerId = providerId
            self.publicKeyId = publicKeyId
        }

        private enum CodingKeys: String, CodingKey {
            case fieldPatterns = "FieldPatterns"
            case providerId = "ProviderId"
            case publicKeyId = "PublicKeyId"
        }
    }

    public struct EndPoint: AWSEncodableShape & AWSDecodableShape {
        /// Contains information about the Amazon Kinesis data stream where you are sending real-time
        /// 			log data.
        public let kinesisStreamConfig: KinesisStreamConfig?
        /// The type of data stream where you are sending real-time log data. The only valid value
        /// 			is Kinesis.
        public let streamType: String

        public init(kinesisStreamConfig: KinesisStreamConfig? = nil, streamType: String) {
            self.kinesisStreamConfig = kinesisStreamConfig
            self.streamType = streamType
        }

        private enum CodingKeys: String, CodingKey {
            case kinesisStreamConfig = "KinesisStreamConfig"
            case streamType = "StreamType"
        }
    }

    public struct FieldLevelEncryption: AWSDecodableShape {
        /// A complex data type that includes the profile configurations specified for field-level
        /// 			encryption.
        public let fieldLevelEncryptionConfig: FieldLevelEncryptionConfig
        /// The configuration ID for a field-level encryption configuration which includes a set
        /// 			of profiles that specify certain selected data fields to be encrypted by specific public
        /// 			keys.
        public let id: String
        /// The last time the field-level encryption configuration was changed.
        public let lastModifiedTime: Date

        public init(fieldLevelEncryptionConfig: FieldLevelEncryptionConfig, id: String, lastModifiedTime: Date) {
            self.fieldLevelEncryptionConfig = fieldLevelEncryptionConfig
            self.id = id
            self.lastModifiedTime = lastModifiedTime
        }

        private enum CodingKeys: String, CodingKey {
            case fieldLevelEncryptionConfig = "FieldLevelEncryptionConfig"
            case id = "Id"
            case lastModifiedTime = "LastModifiedTime"
        }
    }

    public struct FieldLevelEncryptionConfig: AWSEncodableShape & AWSDecodableShape {
        /// A unique number that ensures the request can't be replayed.
        public let callerReference: String
        /// An optional comment about the configuration. The comment cannot be longer than 128
        /// 			characters.
        public let comment: String?
        /// A complex data type that specifies when to forward content if a content type isn't
        /// 			recognized and profiles to use as by default in a request if a query argument doesn't
        /// 			specify a profile to use.
        public let contentTypeProfileConfig: ContentTypeProfileConfig?
        /// A complex data type that specifies when to forward content if a profile isn't found
        /// 			and the profile that can be provided as a query argument in a request.
        public let queryArgProfileConfig: QueryArgProfileConfig?

        public init(callerReference: String, comment: String? = nil, contentTypeProfileConfig: ContentTypeProfileConfig? = nil, queryArgProfileConfig: QueryArgProfileConfig? = nil) {
            self.callerReference = callerReference
            self.comment = comment
            self.contentTypeProfileConfig = contentTypeProfileConfig
            self.queryArgProfileConfig = queryArgProfileConfig
        }

        private enum CodingKeys: String, CodingKey {
            case callerReference = "CallerReference"
            case comment = "Comment"
            case contentTypeProfileConfig = "ContentTypeProfileConfig"
            case queryArgProfileConfig = "QueryArgProfileConfig"
        }
    }

    public struct FieldLevelEncryptionList: AWSDecodableShape {
        public struct _ItemsEncoding: ArrayCoderProperties { public static let member = "FieldLevelEncryptionSummary" }

        /// An array of field-level encryption items.
        @OptionalCustomCoding<ArrayCoder<_ItemsEncoding, FieldLevelEncryptionSummary>>
        public var items: [FieldLevelEncryptionSummary]?
        /// The maximum number of elements you want in the response body.
        public let maxItems: Int
        /// If there are more elements to be listed, this element is present and contains the
        /// 			value that you can use for the Marker request parameter to continue listing
        /// 			your configurations where you left off.
        public let nextMarker: String?
        /// The number of field-level encryption items.
        public let quantity: Int

        public init(items: [FieldLevelEncryptionSummary]? = nil, maxItems: Int, nextMarker: String? = nil, quantity: Int) {
            self.items = items
            self.maxItems = maxItems
            self.nextMarker = nextMarker
            self.quantity = quantity
        }

        private enum CodingKeys: String, CodingKey {
            case items = "Items"
            case maxItems = "MaxItems"
            case nextMarker = "NextMarker"
            case quantity = "Quantity"
        }
    }

    public struct FieldLevelEncryptionProfile: AWSDecodableShape {
        /// A complex data type that includes the profile name and the encryption entities for the
        /// 			field-level encryption profile.
        public let fieldLevelEncryptionProfileConfig: FieldLevelEncryptionProfileConfig
        /// The ID for a field-level encryption profile configuration which includes a set of
        /// 			profiles that specify certain selected data fields to be encrypted by specific public
        /// 			keys.
        public let id: String
        /// The last time the field-level encryption profile was updated.
        public let lastModifiedTime: Date

        public init(fieldLevelEncryptionProfileConfig: FieldLevelEncryptionProfileConfig, id: String, lastModifiedTime: Date) {
            self.fieldLevelEncryptionProfileConfig = fieldLevelEncryptionProfileConfig
            self.id = id
            self.lastModifiedTime = lastModifiedTime
        }

        private enum CodingKeys: String, CodingKey {
            case fieldLevelEncryptionProfileConfig = "FieldLevelEncryptionProfileConfig"
            case id = "Id"
            case lastModifiedTime = "LastModifiedTime"
        }
    }

    public struct FieldLevelEncryptionProfileConfig: AWSEncodableShape & AWSDecodableShape {
        /// A unique number that ensures that the request can't be replayed.
        public let callerReference: String
        /// An optional comment for the field-level encryption profile. The comment cannot be
        /// 			longer than 128 characters.
        public let comment: String?
        /// A complex data type of encryption entities for the field-level encryption profile that
        /// 			include the public key ID, provider, and field patterns for specifying which fields to
        /// 			encrypt with this key.
        public let encryptionEntities: EncryptionEntities
        /// Profile name for the field-level encryption profile.
        public let name: String

        public init(callerReference: String, comment: String? = nil, encryptionEntities: EncryptionEntities, name: String) {
            self.callerReference = callerReference
            self.comment = comment
            self.encryptionEntities = encryptionEntities
            self.name = name
        }

        private enum CodingKeys: String, CodingKey {
            case callerReference = "CallerReference"
            case comment = "Comment"
            case encryptionEntities = "EncryptionEntities"
            case name = "Name"
        }
    }

    public struct FieldLevelEncryptionProfileList: AWSDecodableShape {
        public struct _ItemsEncoding: ArrayCoderProperties { public static let member = "FieldLevelEncryptionProfileSummary" }

        /// The field-level encryption profile items.
        @OptionalCustomCoding<ArrayCoder<_ItemsEncoding, FieldLevelEncryptionProfileSummary>>
        public var items: [FieldLevelEncryptionProfileSummary]?
        /// The maximum number of field-level encryption profiles you want in the response body.
        ///
        public let maxItems: Int
        /// If there are more elements to be listed, this element is present and contains the
        /// 			value that you can use for the Marker request parameter to continue listing
        /// 			your profiles where you left off.
        public let nextMarker: String?
        /// The number of field-level encryption profiles.
        public let quantity: Int

        public init(items: [FieldLevelEncryptionProfileSummary]? = nil, maxItems: Int, nextMarker: String? = nil, quantity: Int) {
            self.items = items
            self.maxItems = maxItems
            self.nextMarker = nextMarker
            self.quantity = quantity
        }

        private enum CodingKeys: String, CodingKey {
            case items = "Items"
            case maxItems = "MaxItems"
            case nextMarker = "NextMarker"
            case quantity = "Quantity"
        }
    }

    public struct FieldLevelEncryptionProfileSummary: AWSDecodableShape {
        /// An optional comment for the field-level encryption profile summary. The comment cannot
        /// 			be longer than 128 characters.
        public let comment: String?
        /// A complex data type of encryption entities for the field-level encryption profile that
        /// 			include the public key ID, provider, and field patterns for specifying which fields to
        /// 			encrypt with this key.
        public let encryptionEntities: EncryptionEntities
        /// ID for the field-level encryption profile summary.
        public let id: String
        /// The time when the  field-level encryption profile summary was last updated.
        public let lastModifiedTime: Date
        /// Name for the field-level encryption profile summary.
        public let name: String

        public init(comment: String? = nil, encryptionEntities: EncryptionEntities, id: String, lastModifiedTime: Date, name: String) {
            self.comment = comment
            self.encryptionEntities = encryptionEntities
            self.id = id
            self.lastModifiedTime = lastModifiedTime
            self.name = name
        }

        private enum CodingKeys: String, CodingKey {
            case comment = "Comment"
            case encryptionEntities = "EncryptionEntities"
            case id = "Id"
            case lastModifiedTime = "LastModifiedTime"
            case name = "Name"
        }
    }

    public struct FieldLevelEncryptionSummary: AWSDecodableShape {
        /// An optional comment about the field-level encryption item. The comment cannot be
        /// 			longer than 128 characters.
        public let comment: String?
        /// A summary of a content type-profile mapping.
        public let contentTypeProfileConfig: ContentTypeProfileConfig?
        /// The unique ID of a field-level encryption item.
        public let id: String
        /// The last time that the summary of field-level encryption items was modified.
        public let lastModifiedTime: Date
        /// A summary of a query argument-profile mapping.
        public let queryArgProfileConfig: QueryArgProfileConfig?

        public init(comment: String? = nil, contentTypeProfileConfig: ContentTypeProfileConfig? = nil, id: String, lastModifiedTime: Date, queryArgProfileConfig: QueryArgProfileConfig? = nil) {
            self.comment = comment
            self.contentTypeProfileConfig = contentTypeProfileConfig
            self.id = id
            self.lastModifiedTime = lastModifiedTime
            self.queryArgProfileConfig = queryArgProfileConfig
        }

        private enum CodingKeys: String, CodingKey {
            case comment = "Comment"
            case contentTypeProfileConfig = "ContentTypeProfileConfig"
            case id = "Id"
            case lastModifiedTime = "LastModifiedTime"
            case queryArgProfileConfig = "QueryArgProfileConfig"
        }
    }

    public struct FieldPatterns: AWSEncodableShape & AWSDecodableShape {
        public struct _ItemsEncoding: ArrayCoderProperties { public static let member = "FieldPattern" }

        /// An array of the field-level encryption field patterns.
        @OptionalCustomCoding<ArrayCoder<_ItemsEncoding, String>>
        public var items: [String]?
        /// The number of field-level encryption field patterns.
        public let quantity: Int

        public init(items: [String]? = nil, quantity: Int) {
            self.items = items
            self.quantity = quantity
        }

        private enum CodingKeys: String, CodingKey {
            case items = "Items"
            case quantity = "Quantity"
        }
    }

    public struct ForwardedValues: AWSEncodableShape & AWSDecodableShape {
        /// This field is deprecated. We recommend that you use a cache policy or an origin
        /// 			request policy instead of this field. If you want to include cookies in the cache key, use a cache policy. For more
        /// 			information, see Creating cache policies in the Amazon CloudFront Developer Guide. If you want to send cookies to the origin but not include them in the cache key, use
        /// 			an origin request policy. For more information, see Creating origin request policies in the
        /// 			Amazon CloudFront Developer Guide. A complex type that specifies whether you want CloudFront to forward cookies to the origin
        /// 			and, if so, which ones. For more information about forwarding cookies to the origin, see
        /// 				How CloudFront Forwards, Caches,
        /// 				and Logs Cookies in the Amazon CloudFront Developer Guide.
        public let cookies: CookiePreference
        /// This field is deprecated. We recommend that you use a cache policy or an origin
        /// 			request policy instead of this field. If you want to include headers in the cache key, use a cache policy. For more
        /// 			information, see Creating cache policies in the Amazon CloudFront Developer Guide. If you want to send headers to the origin but not include them in the cache key, use
        /// 			an origin request policy. For more information, see Creating origin request policies in the
        /// 			Amazon CloudFront Developer Guide. A complex type that specifies the Headers, if any, that you want CloudFront to
        /// 			forward to the origin for this cache behavior (whitelisted headers). For the headers
        /// 			that you specify, CloudFront also caches separate versions of a specified object that is based
        /// 			on the header values in viewer requests. For more information, see  Caching Content
        /// 				Based on Request Headers in the Amazon CloudFront Developer Guide.
        public let headers: Headers?
        /// This field is deprecated. We recommend that you use a cache policy or an origin
        /// 			request policy instead of this field. If you want to include query strings in the cache key, use a cache policy. For more
        /// 			information, see Creating cache policies in the Amazon CloudFront Developer Guide. If you want to send query strings to the origin but not include them in the cache key,
        /// 			use an origin request policy. For more information, see Creating origin request policies in the
        /// 			Amazon CloudFront Developer Guide. Indicates whether you want CloudFront to forward query strings to the origin that is
        /// 			associated with this cache behavior and cache based on the query string parameters. CloudFront
        /// 			behavior depends on the value of QueryString and on the values that you
        /// 			specify for QueryStringCacheKeys, if any: If you specify true for QueryString and you don't specify any values for
        /// 				QueryStringCacheKeys, CloudFront forwards all query string parameters to the
        /// 			origin and caches based on all query string parameters. Depending on how many query
        /// 			string parameters and values you have, this can adversely affect performance because
        /// 			CloudFront must forward more requests to the origin. If you specify true for QueryString and you specify one or more values
        /// 			for QueryStringCacheKeys, CloudFront forwards all query string parameters to the
        /// 			origin, but it only caches based on the query string parameters that you specify. If you specify false for QueryString, CloudFront doesn't forward any query
        /// 			string parameters to the origin, and doesn't cache based on query string
        /// 			parameters. For more information, see Configuring
        /// 				CloudFront to Cache Based on Query String Parameters in the
        /// 				Amazon CloudFront Developer Guide.
        public let queryString: Bool
        /// This field is deprecated. We recommend that you use a cache policy or an origin
        /// 			request policy instead of this field. If you want to include query strings in the cache key, use a cache policy. For more
        /// 			information, see Creating cache policies in the Amazon CloudFront Developer Guide. If you want to send query strings to the origin but not include them in the cache key,
        /// 			use an origin request policy. For more information, see Creating origin request policies in the
        /// 			Amazon CloudFront Developer Guide. A complex type that contains information about the query string parameters that you
        /// 			want CloudFront to use for caching for this cache behavior.
        public let queryStringCacheKeys: QueryStringCacheKeys?

        public init(cookies: CookiePreference, headers: Headers? = nil, queryString: Bool, queryStringCacheKeys: QueryStringCacheKeys? = nil) {
            self.cookies = cookies
            self.headers = headers
            self.queryString = queryString
            self.queryStringCacheKeys = queryStringCacheKeys
        }

        private enum CodingKeys: String, CodingKey {
            case cookies = "Cookies"
            case headers = "Headers"
            case queryString = "QueryString"
            case queryStringCacheKeys = "QueryStringCacheKeys"
        }
    }

    public struct FunctionAssociation: AWSEncodableShape & AWSDecodableShape {
        /// The event type of the function, either viewer-request or
        /// 				viewer-response. You cannot use origin-facing event types
        /// 				(origin-request and origin-response) with a CloudFront
        /// 			function.
        public let eventType: EventType
        /// The Amazon Resource Name (ARN) of the function.
        public let functionARN: String

        public init(eventType: EventType, functionARN: String) {
            self.eventType = eventType
            self.functionARN = functionARN
        }

        public func validate(name: String) throws {
            try self.validate(self.functionARN, name: "functionARN", parent: name, max: 108)
            try self.validate(self.functionARN, name: "functionARN", parent: name, pattern: "^arn:aws:cloudfront::[0-9]{12}:function\\/[a-zA-Z0-9-_]{1,64}$")
        }

        private enum CodingKeys: String, CodingKey {
            case eventType = "EventType"
            case functionARN = "FunctionARN"
        }
    }

    public struct FunctionAssociations: AWSEncodableShape & AWSDecodableShape {
        public struct _ItemsEncoding: ArrayCoderProperties { public static let member = "FunctionAssociation" }

        /// The CloudFront functions that are associated with a cache behavior in a CloudFront distribution.
        /// 			CloudFront functions must be published to the LIVE stage to associate them with a
        /// 			cache behavior.
        @OptionalCustomCoding<ArrayCoder<_ItemsEncoding, FunctionAssociation>>
        public var items: [FunctionAssociation]?
        /// The number of CloudFront functions in the list.
        public let quantity: Int

        public init(items: [FunctionAssociation]? = nil, quantity: Int) {
            self.items = items
            self.quantity = quantity
        }

        public func validate(name: String) throws {
            try self.items?.forEach {
                try $0.validate(name: "\(name).items[]")
            }
        }

        private enum CodingKeys: String, CodingKey {
            case items = "Items"
            case quantity = "Quantity"
        }
    }

    public struct FunctionConfig: AWSEncodableShape & AWSDecodableShape {
        /// A comment to describe the function.
        public let comment: String
        /// The configuration for the Key Value Store associations.
        public let keyValueStoreAssociations: KeyValueStoreAssociations?
        /// The function's runtime environment version.
        public let runtime: FunctionRuntime

        public init(comment: String, keyValueStoreAssociations: KeyValueStoreAssociations? = nil, runtime: FunctionRuntime) {
            self.comment = comment
            self.keyValueStoreAssociations = keyValueStoreAssociations
            self.runtime = runtime
        }

        public func validate(name: String) throws {
            try self.keyValueStoreAssociations?.validate(name: "\(name).keyValueStoreAssociations")
        }

        private enum CodingKeys: String, CodingKey {
            case comment = "Comment"
            case keyValueStoreAssociations = "KeyValueStoreAssociations"
            case runtime = "Runtime"
        }
    }

    public struct FunctionList: AWSDecodableShape {
        public struct _ItemsEncoding: ArrayCoderProperties { public static let member = "FunctionSummary" }

        /// Contains the functions in the list.
        @OptionalCustomCoding<ArrayCoder<_ItemsEncoding, FunctionSummary>>
        public var items: [FunctionSummary]?
        /// The maximum number of functions requested.
        public let maxItems: Int
        /// If there are more items in the list than are in this response, this element is
        /// 			present. It contains the value that you should use in the Marker field of a
        /// 			subsequent request to continue listing functions where you left off.
        public let nextMarker: String?
        /// The number of functions returned in the response.
        public let quantity: Int

        public init(items: [FunctionSummary]? = nil, maxItems: Int, nextMarker: String? = nil, quantity: Int) {
            self.items = items
            self.maxItems = maxItems
            self.nextMarker = nextMarker
            self.quantity = quantity
        }

        private enum CodingKeys: String, CodingKey {
            case items = "Items"
            case maxItems = "MaxItems"
            case nextMarker = "NextMarker"
            case quantity = "Quantity"
        }
    }

    public struct FunctionMetadata: AWSDecodableShape {
        /// The date and time when the function was created.
        public let createdTime: Date?
        /// The Amazon Resource Name (ARN) of the function. The ARN uniquely identifies the
        /// 			function.
        public let functionARN: String
        /// The date and time when the function was most recently updated.
        public let lastModifiedTime: Date
        /// The stage that the function is in, either DEVELOPMENT or
        /// 				LIVE. When a function is in the DEVELOPMENT stage, you can test the function
        /// 			with TestFunction, and update it with UpdateFunction. When a function is in the LIVE stage, you can attach the function to a
        /// 			distribution's cache behavior, using the function's ARN.
        public let stage: FunctionStage?

        public init(createdTime: Date? = nil, functionARN: String, lastModifiedTime: Date, stage: FunctionStage? = nil) {
            self.createdTime = createdTime
            self.functionARN = functionARN
            self.lastModifiedTime = lastModifiedTime
            self.stage = stage
        }

        private enum CodingKeys: String, CodingKey {
            case createdTime = "CreatedTime"
            case functionARN = "FunctionARN"
            case lastModifiedTime = "LastModifiedTime"
            case stage = "Stage"
        }
    }

    public struct FunctionSummary: AWSDecodableShape {
        /// Contains configuration information about a CloudFront function.
        public let functionConfig: FunctionConfig
        /// Contains metadata about a CloudFront function.
        public let functionMetadata: FunctionMetadata
        /// The name of the CloudFront function.
        public let name: String
        /// The status of the CloudFront function.
        public let status: String?

        public init(functionConfig: FunctionConfig, functionMetadata: FunctionMetadata, name: String, status: String? = nil) {
            self.functionConfig = functionConfig
            self.functionMetadata = functionMetadata
            self.name = name
            self.status = status
        }

        private enum CodingKeys: String, CodingKey {
            case functionConfig = "FunctionConfig"
            case functionMetadata = "FunctionMetadata"
            case name = "Name"
            case status = "Status"
        }
    }

    public struct GeoRestriction: AWSEncodableShape & AWSDecodableShape {
        public struct _ItemsEncoding: ArrayCoderProperties { public static let member = "Location" }

        /// A complex type that contains a Location element for each country in
        /// 			which you want CloudFront either to distribute your content (whitelist) or not
        /// 			distribute your content (blacklist). The Location element is a two-letter, uppercase country code for a
        /// 			country that you want to include in your blacklist or
        /// 				whitelist. Include one Location element for each
        /// 			country. CloudFront and MaxMind both use ISO 3166 country codes. For the
        /// 			current list of countries and the corresponding codes, see ISO
        /// 				3166-1-alpha-2 code on the International Organization for
        /// 				Standardization website. You can also refer to the country list on the
        /// 			CloudFront console, which includes both country names and codes.
        @OptionalCustomCoding<ArrayCoder<_ItemsEncoding, String>>
        public var items: [String]?
        /// When geo restriction is enabled, this is the number of countries in your
        /// 				whitelist or blacklist. Otherwise, when it is not enabled,
        /// 				Quantity is 0, and you can omit Items.
        public let quantity: Int
        /// The method that you want to use to restrict distribution of your content by
        /// 			country:    none: No geo restriction is enabled, meaning access to content is
        /// 					not restricted by client geo location.    blacklist: The Location elements specify the
        /// 					countries in which you don't want CloudFront to distribute your content.    whitelist: The Location elements specify the
        /// 					countries in which you want CloudFront to distribute your content.
        public let restrictionType: GeoRestrictionType

        public init(items: [String]? = nil, quantity: Int, restrictionType: GeoRestrictionType) {
            self.items = items
            self.quantity = quantity
            self.restrictionType = restrictionType
        }

        private enum CodingKeys: String, CodingKey {
            case items = "Items"
            case quantity = "Quantity"
            case restrictionType = "RestrictionType"
        }
    }

    public struct GetCachePolicyConfigRequest: AWSEncodableShape {
        /// The unique identifier for the cache policy. If the cache policy is attached to a
        /// 			distribution's cache behavior, you can get the policy's identifier using
        /// 				ListDistributions or GetDistribution. If the cache policy
        /// 			is not attached to a cache behavior, you can get the identifier using
        /// 				ListCachePolicies.
        public let id: String

        public init(id: String) {
            self.id = id
        }

        public func encode(to encoder: Encoder) throws {
            let request = encoder.userInfo[.awsRequest]! as! RequestEncodingContainer
            _ = encoder.container(keyedBy: CodingKeys.self)
            request.encodePath(self.id, key: "Id")
        }

        private enum CodingKeys: CodingKey {}
    }

    public struct GetCachePolicyConfigResult: AWSDecodableShape {
        /// The cache policy configuration.
        public let cachePolicyConfig: CachePolicyConfig
        /// The current version of the cache policy.
        public let eTag: String?

        public init(cachePolicyConfig: CachePolicyConfig, eTag: String? = nil) {
            self.cachePolicyConfig = cachePolicyConfig
            self.eTag = eTag
        }

        public init(from decoder: Decoder) throws {
            let response = decoder.userInfo[.awsResponse]! as! ResponseDecodingContainer
            let container = try decoder.singleValueContainer()
            self.cachePolicyConfig = try container.decode(CachePolicyConfig.self)
            self.eTag = try response.decodeHeaderIfPresent(String.self, key: "ETag")
        }

        private enum CodingKeys: CodingKey {}
    }

    public struct GetCachePolicyRequest: AWSEncodableShape {
        /// The unique identifier for the cache policy. If the cache policy is attached to a
        /// 			distribution's cache behavior, you can get the policy's identifier using
        /// 				ListDistributions or GetDistribution. If the cache policy
        /// 			is not attached to a cache behavior, you can get the identifier using
        /// 				ListCachePolicies.
        public let id: String

        public init(id: String) {
            self.id = id
        }

        public func encode(to encoder: Encoder) throws {
            let request = encoder.userInfo[.awsRequest]! as! RequestEncodingContainer
            _ = encoder.container(keyedBy: CodingKeys.self)
            request.encodePath(self.id, key: "Id")
        }

        private enum CodingKeys: CodingKey {}
    }

    public struct GetCachePolicyResult: AWSDecodableShape {
        /// The cache policy.
        public let cachePolicy: CachePolicy
        /// The current version of the cache policy.
        public let eTag: String?

        public init(cachePolicy: CachePolicy, eTag: String? = nil) {
            self.cachePolicy = cachePolicy
            self.eTag = eTag
        }

        public init(from decoder: Decoder) throws {
            let response = decoder.userInfo[.awsResponse]! as! ResponseDecodingContainer
            let container = try decoder.singleValueContainer()
            self.cachePolicy = try container.decode(CachePolicy.self)
            self.eTag = try response.decodeHeaderIfPresent(String.self, key: "ETag")
        }

        private enum CodingKeys: CodingKey {}
    }

    public struct GetCloudFrontOriginAccessIdentityConfigRequest: AWSEncodableShape {
        /// The identity's ID.
        public let id: String

        public init(id: String) {
            self.id = id
        }

        public func encode(to encoder: Encoder) throws {
            let request = encoder.userInfo[.awsRequest]! as! RequestEncodingContainer
            _ = encoder.container(keyedBy: CodingKeys.self)
            request.encodePath(self.id, key: "Id")
        }

        private enum CodingKeys: CodingKey {}
    }

    public struct GetCloudFrontOriginAccessIdentityConfigResult: AWSDecodableShape {
        /// The origin access identity's configuration information.
        public let cloudFrontOriginAccessIdentityConfig: CloudFrontOriginAccessIdentityConfig
        /// The current version of the configuration. For example:
        /// 			E2QWRUHAPOMQZL.
        public let eTag: String?

        public init(cloudFrontOriginAccessIdentityConfig: CloudFrontOriginAccessIdentityConfig, eTag: String? = nil) {
            self.cloudFrontOriginAccessIdentityConfig = cloudFrontOriginAccessIdentityConfig
            self.eTag = eTag
        }

        public init(from decoder: Decoder) throws {
            let response = decoder.userInfo[.awsResponse]! as! ResponseDecodingContainer
            let container = try decoder.singleValueContainer()
            self.cloudFrontOriginAccessIdentityConfig = try container.decode(CloudFrontOriginAccessIdentityConfig.self)
            self.eTag = try response.decodeHeaderIfPresent(String.self, key: "ETag")
        }

        private enum CodingKeys: CodingKey {}
    }

    public struct GetCloudFrontOriginAccessIdentityRequest: AWSEncodableShape {
        /// The identity's ID.
        public let id: String

        public init(id: String) {
            self.id = id
        }

        public func encode(to encoder: Encoder) throws {
            let request = encoder.userInfo[.awsRequest]! as! RequestEncodingContainer
            _ = encoder.container(keyedBy: CodingKeys.self)
            request.encodePath(self.id, key: "Id")
        }

        private enum CodingKeys: CodingKey {}
    }

    public struct GetCloudFrontOriginAccessIdentityResult: AWSDecodableShape {
        /// The origin access identity's information.
        public let cloudFrontOriginAccessIdentity: CloudFrontOriginAccessIdentity
        /// The current version of the origin access identity's information. For example:
        /// 				E2QWRUHAPOMQZL.
        public let eTag: String?

        public init(cloudFrontOriginAccessIdentity: CloudFrontOriginAccessIdentity, eTag: String? = nil) {
            self.cloudFrontOriginAccessIdentity = cloudFrontOriginAccessIdentity
            self.eTag = eTag
        }

        public init(from decoder: Decoder) throws {
            let response = decoder.userInfo[.awsResponse]! as! ResponseDecodingContainer
            let container = try decoder.singleValueContainer()
            self.cloudFrontOriginAccessIdentity = try container.decode(CloudFrontOriginAccessIdentity.self)
            self.eTag = try response.decodeHeaderIfPresent(String.self, key: "ETag")
        }

        private enum CodingKeys: CodingKey {}
    }

    public struct GetContinuousDeploymentPolicyConfigRequest: AWSEncodableShape {
        /// The identifier of the continuous deployment policy whose configuration you are
        /// 			getting.
        public let id: String

        public init(id: String) {
            self.id = id
        }

        public func encode(to encoder: Encoder) throws {
            let request = encoder.userInfo[.awsRequest]! as! RequestEncodingContainer
            _ = encoder.container(keyedBy: CodingKeys.self)
            request.encodePath(self.id, key: "Id")
        }

        private enum CodingKeys: CodingKey {}
    }

    public struct GetContinuousDeploymentPolicyConfigResult: AWSDecodableShape {
        public let continuousDeploymentPolicyConfig: ContinuousDeploymentPolicyConfig
        /// The version identifier for the current version of the continuous deployment
        /// 			policy.
        public let eTag: String?

        public init(continuousDeploymentPolicyConfig: ContinuousDeploymentPolicyConfig, eTag: String? = nil) {
            self.continuousDeploymentPolicyConfig = continuousDeploymentPolicyConfig
            self.eTag = eTag
        }

        public init(from decoder: Decoder) throws {
            let response = decoder.userInfo[.awsResponse]! as! ResponseDecodingContainer
            let container = try decoder.singleValueContainer()
            self.continuousDeploymentPolicyConfig = try container.decode(ContinuousDeploymentPolicyConfig.self)
            self.eTag = try response.decodeHeaderIfPresent(String.self, key: "ETag")
        }

        private enum CodingKeys: CodingKey {}
    }

    public struct GetContinuousDeploymentPolicyRequest: AWSEncodableShape {
        /// The identifier of the continuous deployment policy that you are getting.
        public let id: String

        public init(id: String) {
            self.id = id
        }

        public func encode(to encoder: Encoder) throws {
            let request = encoder.userInfo[.awsRequest]! as! RequestEncodingContainer
            _ = encoder.container(keyedBy: CodingKeys.self)
            request.encodePath(self.id, key: "Id")
        }

        private enum CodingKeys: CodingKey {}
    }

    public struct GetContinuousDeploymentPolicyResult: AWSDecodableShape {
        /// A continuous deployment policy.
        public let continuousDeploymentPolicy: ContinuousDeploymentPolicy
        /// The version identifier for the current version of the continuous deployment
        /// 			policy.
        public let eTag: String?

        public init(continuousDeploymentPolicy: ContinuousDeploymentPolicy, eTag: String? = nil) {
            self.continuousDeploymentPolicy = continuousDeploymentPolicy
            self.eTag = eTag
        }

        public init(from decoder: Decoder) throws {
            let response = decoder.userInfo[.awsResponse]! as! ResponseDecodingContainer
            let container = try decoder.singleValueContainer()
            self.continuousDeploymentPolicy = try container.decode(ContinuousDeploymentPolicy.self)
            self.eTag = try response.decodeHeaderIfPresent(String.self, key: "ETag")
        }

        private enum CodingKeys: CodingKey {}
    }

    public struct GetDistributionConfigRequest: AWSEncodableShape {
        /// The distribution's ID. If the ID is empty, an empty distribution configuration is
        /// 			returned.
        public let id: String

        public init(id: String) {
            self.id = id
        }

        public func encode(to encoder: Encoder) throws {
            let request = encoder.userInfo[.awsRequest]! as! RequestEncodingContainer
            _ = encoder.container(keyedBy: CodingKeys.self)
            request.encodePath(self.id, key: "Id")
        }

        private enum CodingKeys: CodingKey {}
    }

    public struct GetDistributionConfigResult: AWSDecodableShape {
        /// The distribution's configuration information.
        public let distributionConfig: DistributionConfig
        /// The current version of the configuration. For example:
        /// 			E2QWRUHAPOMQZL.
        public let eTag: String?

        public init(distributionConfig: DistributionConfig, eTag: String? = nil) {
            self.distributionConfig = distributionConfig
            self.eTag = eTag
        }

        public init(from decoder: Decoder) throws {
            let response = decoder.userInfo[.awsResponse]! as! ResponseDecodingContainer
            let container = try decoder.singleValueContainer()
            self.distributionConfig = try container.decode(DistributionConfig.self)
            self.eTag = try response.decodeHeaderIfPresent(String.self, key: "ETag")
        }

        private enum CodingKeys: CodingKey {}
    }

    public struct GetDistributionRequest: AWSEncodableShape {
        /// The distribution's ID. If the ID is empty, an empty distribution configuration is
        /// 			returned.
        public let id: String

        public init(id: String) {
            self.id = id
        }

        public func encode(to encoder: Encoder) throws {
            let request = encoder.userInfo[.awsRequest]! as! RequestEncodingContainer
            _ = encoder.container(keyedBy: CodingKeys.self)
            request.encodePath(self.id, key: "Id")
        }

        private enum CodingKeys: CodingKey {}
    }

    public struct GetDistributionResult: AWSDecodableShape {
        /// The distribution's information.
        public let distribution: Distribution
        /// The current version of the distribution's information. For example:
        /// 				E2QWRUHAPOMQZL.
        public let eTag: String?

        public init(distribution: Distribution, eTag: String? = nil) {
            self.distribution = distribution
            self.eTag = eTag
        }

        public init(from decoder: Decoder) throws {
            let response = decoder.userInfo[.awsResponse]! as! ResponseDecodingContainer
            let container = try decoder.singleValueContainer()
            self.distribution = try container.decode(Distribution.self)
            self.eTag = try response.decodeHeaderIfPresent(String.self, key: "ETag")
        }

        private enum CodingKeys: CodingKey {}
    }

    public struct GetFieldLevelEncryptionConfigRequest: AWSEncodableShape {
        /// Request the ID for the field-level encryption configuration information.
        public let id: String

        public init(id: String) {
            self.id = id
        }

        public func encode(to encoder: Encoder) throws {
            let request = encoder.userInfo[.awsRequest]! as! RequestEncodingContainer
            _ = encoder.container(keyedBy: CodingKeys.self)
            request.encodePath(self.id, key: "Id")
        }

        private enum CodingKeys: CodingKey {}
    }

    public struct GetFieldLevelEncryptionConfigResult: AWSDecodableShape {
        /// The current version of the field level encryption configuration. For example:
        /// 				E2QWRUHAPOMQZL.
        public let eTag: String?
        /// Return the field-level encryption configuration information.
        public let fieldLevelEncryptionConfig: FieldLevelEncryptionConfig

        public init(eTag: String? = nil, fieldLevelEncryptionConfig: FieldLevelEncryptionConfig) {
            self.eTag = eTag
            self.fieldLevelEncryptionConfig = fieldLevelEncryptionConfig
        }

        public init(from decoder: Decoder) throws {
            let response = decoder.userInfo[.awsResponse]! as! ResponseDecodingContainer
            let container = try decoder.singleValueContainer()
            self.eTag = try response.decodeHeaderIfPresent(String.self, key: "ETag")
            self.fieldLevelEncryptionConfig = try container.decode(FieldLevelEncryptionConfig.self)
        }

        private enum CodingKeys: CodingKey {}
    }

    public struct GetFieldLevelEncryptionProfileConfigRequest: AWSEncodableShape {
        /// Get the ID for the field-level encryption profile configuration information.
        public let id: String

        public init(id: String) {
            self.id = id
        }

        public func encode(to encoder: Encoder) throws {
            let request = encoder.userInfo[.awsRequest]! as! RequestEncodingContainer
            _ = encoder.container(keyedBy: CodingKeys.self)
            request.encodePath(self.id, key: "Id")
        }

        private enum CodingKeys: CodingKey {}
    }

    public struct GetFieldLevelEncryptionProfileConfigResult: AWSDecodableShape {
        /// The current version of the field-level encryption profile configuration result. For
        /// 			example: E2QWRUHAPOMQZL.
        public let eTag: String?
        /// Return the field-level encryption profile configuration information.
        public let fieldLevelEncryptionProfileConfig: FieldLevelEncryptionProfileConfig

        public init(eTag: String? = nil, fieldLevelEncryptionProfileConfig: FieldLevelEncryptionProfileConfig) {
            self.eTag = eTag
            self.fieldLevelEncryptionProfileConfig = fieldLevelEncryptionProfileConfig
        }

        public init(from decoder: Decoder) throws {
            let response = decoder.userInfo[.awsResponse]! as! ResponseDecodingContainer
            let container = try decoder.singleValueContainer()
            self.eTag = try response.decodeHeaderIfPresent(String.self, key: "ETag")
            self.fieldLevelEncryptionProfileConfig = try container.decode(FieldLevelEncryptionProfileConfig.self)
        }

        private enum CodingKeys: CodingKey {}
    }

    public struct GetFieldLevelEncryptionProfileRequest: AWSEncodableShape {
        /// Get the ID for the field-level encryption profile information.
        public let id: String

        public init(id: String) {
            self.id = id
        }

        public func encode(to encoder: Encoder) throws {
            let request = encoder.userInfo[.awsRequest]! as! RequestEncodingContainer
            _ = encoder.container(keyedBy: CodingKeys.self)
            request.encodePath(self.id, key: "Id")
        }

        private enum CodingKeys: CodingKey {}
    }

    public struct GetFieldLevelEncryptionProfileResult: AWSDecodableShape {
        /// The current version of the field level encryption profile. For example:
        /// 				E2QWRUHAPOMQZL.
        public let eTag: String?
        /// Return the field-level encryption profile information.
        public let fieldLevelEncryptionProfile: FieldLevelEncryptionProfile

        public init(eTag: String? = nil, fieldLevelEncryptionProfile: FieldLevelEncryptionProfile) {
            self.eTag = eTag
            self.fieldLevelEncryptionProfile = fieldLevelEncryptionProfile
        }

        public init(from decoder: Decoder) throws {
            let response = decoder.userInfo[.awsResponse]! as! ResponseDecodingContainer
            let container = try decoder.singleValueContainer()
            self.eTag = try response.decodeHeaderIfPresent(String.self, key: "ETag")
            self.fieldLevelEncryptionProfile = try container.decode(FieldLevelEncryptionProfile.self)
        }

        private enum CodingKeys: CodingKey {}
    }

    public struct GetFieldLevelEncryptionRequest: AWSEncodableShape {
        /// Request the ID for the field-level encryption configuration information.
        public let id: String

        public init(id: String) {
            self.id = id
        }

        public func encode(to encoder: Encoder) throws {
            let request = encoder.userInfo[.awsRequest]! as! RequestEncodingContainer
            _ = encoder.container(keyedBy: CodingKeys.self)
            request.encodePath(self.id, key: "Id")
        }

        private enum CodingKeys: CodingKey {}
    }

    public struct GetFieldLevelEncryptionResult: AWSDecodableShape {
        /// The current version of the field level encryption configuration. For example:
        /// 				E2QWRUHAPOMQZL.
        public let eTag: String?
        /// Return the field-level encryption configuration information.
        public let fieldLevelEncryption: FieldLevelEncryption

        public init(eTag: String? = nil, fieldLevelEncryption: FieldLevelEncryption) {
            self.eTag = eTag
            self.fieldLevelEncryption = fieldLevelEncryption
        }

        public init(from decoder: Decoder) throws {
            let response = decoder.userInfo[.awsResponse]! as! ResponseDecodingContainer
            let container = try decoder.singleValueContainer()
            self.eTag = try response.decodeHeaderIfPresent(String.self, key: "ETag")
            self.fieldLevelEncryption = try container.decode(FieldLevelEncryption.self)
        }

        private enum CodingKeys: CodingKey {}
    }

    public struct GetFunctionRequest: AWSEncodableShape {
        /// The name of the function whose code you are getting.
        public let name: String
        /// The function's stage, either DEVELOPMENT or LIVE.
        public let stage: FunctionStage?

        public init(name: String, stage: FunctionStage? = nil) {
            self.name = name
            self.stage = stage
        }

        public func encode(to encoder: Encoder) throws {
            let request = encoder.userInfo[.awsRequest]! as! RequestEncodingContainer
            _ = encoder.container(keyedBy: CodingKeys.self)
            request.encodePath(self.name, key: "Name")
            request.encodeQuery(self.stage, key: "Stage")
        }

        private enum CodingKeys: CodingKey {}
    }

    public struct GetFunctionResult: AWSDecodableShape {
        public static let _options: AWSShapeOptions = [.rawPayload]
        /// The content type (media type) of the response.
        public let contentType: String?
        /// The version identifier for the current version of the CloudFront function.
        public let eTag: String?
        /// The function code of a CloudFront function.
        public let functionCode: AWSHTTPBody

        public init(contentType: String? = nil, eTag: String? = nil, functionCode: AWSHTTPBody) {
            self.contentType = contentType
            self.eTag = eTag
            self.functionCode = functionCode
        }

        public init(from decoder: Decoder) throws {
            let response = decoder.userInfo[.awsResponse]! as! ResponseDecodingContainer
            let container = try decoder.singleValueContainer()
            self.contentType = try response.decodeHeaderIfPresent(String.self, key: "Content-Type")
            self.eTag = try response.decodeHeaderIfPresent(String.self, key: "ETag")
            self.functionCode = try container.decode(AWSHTTPBody.self)
        }

        private enum CodingKeys: CodingKey {}
    }

    public struct GetInvalidationRequest: AWSEncodableShape {
        /// The distribution's ID.
        public let distributionId: String
        /// The identifier for the invalidation request, for example,
        /// 			IDFDVBD632BHDS5.
        public let id: String

        public init(distributionId: String, id: String) {
            self.distributionId = distributionId
            self.id = id
        }

        public func encode(to encoder: Encoder) throws {
            let request = encoder.userInfo[.awsRequest]! as! RequestEncodingContainer
            _ = encoder.container(keyedBy: CodingKeys.self)
            request.encodePath(self.distributionId, key: "DistributionId")
            request.encodePath(self.id, key: "Id")
        }

        private enum CodingKeys: CodingKey {}
    }

    public struct GetInvalidationResult: AWSDecodableShape {
        /// The invalidation's information. For more information, see Invalidation
        /// 				Complex Type.
        public let invalidation: Invalidation

        public init(invalidation: Invalidation) {
            self.invalidation = invalidation
        }

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            self.invalidation = try container.decode(Invalidation.self)
        }

        private enum CodingKeys: CodingKey {}
    }

    public struct GetKeyGroupConfigRequest: AWSEncodableShape {
        /// The identifier of the key group whose configuration you are getting. To get the
        /// 			identifier, use ListKeyGroups.
        public let id: String

        public init(id: String) {
            self.id = id
        }

        public func encode(to encoder: Encoder) throws {
            let request = encoder.userInfo[.awsRequest]! as! RequestEncodingContainer
            _ = encoder.container(keyedBy: CodingKeys.self)
            request.encodePath(self.id, key: "Id")
        }

        private enum CodingKeys: CodingKey {}
    }

    public struct GetKeyGroupConfigResult: AWSDecodableShape {
        /// The identifier for this version of the key group.
        public let eTag: String?
        /// The key group configuration.
        public let keyGroupConfig: KeyGroupConfig

        public init(eTag: String? = nil, keyGroupConfig: KeyGroupConfig) {
            self.eTag = eTag
            self.keyGroupConfig = keyGroupConfig
        }

        public init(from decoder: Decoder) throws {
            let response = decoder.userInfo[.awsResponse]! as! ResponseDecodingContainer
            let container = try decoder.singleValueContainer()
            self.eTag = try response.decodeHeaderIfPresent(String.self, key: "ETag")
            self.keyGroupConfig = try container.decode(KeyGroupConfig.self)
        }

        private enum CodingKeys: CodingKey {}
    }

    public struct GetKeyGroupRequest: AWSEncodableShape {
        /// The identifier of the key group that you are getting. To get the identifier, use
        /// 				ListKeyGroups.
        public let id: String

        public init(id: String) {
            self.id = id
        }

        public func encode(to encoder: Encoder) throws {
            let request = encoder.userInfo[.awsRequest]! as! RequestEncodingContainer
            _ = encoder.container(keyedBy: CodingKeys.self)
            request.encodePath(self.id, key: "Id")
        }

        private enum CodingKeys: CodingKey {}
    }

    public struct GetKeyGroupResult: AWSDecodableShape {
        /// The identifier for this version of the key group.
        public let eTag: String?
        /// The key group.
        public let keyGroup: KeyGroup

        public init(eTag: String? = nil, keyGroup: KeyGroup) {
            self.eTag = eTag
            self.keyGroup = keyGroup
        }

        public init(from decoder: Decoder) throws {
            let response = decoder.userInfo[.awsResponse]! as! ResponseDecodingContainer
            let container = try decoder.singleValueContainer()
            self.eTag = try response.decodeHeaderIfPresent(String.self, key: "ETag")
            self.keyGroup = try container.decode(KeyGroup.self)
        }

        private enum CodingKeys: CodingKey {}
    }

    public struct GetMonitoringSubscriptionRequest: AWSEncodableShape {
        /// The ID of the distribution that you are getting metrics information for.
        public let distributionId: String

        public init(distributionId: String) {
            self.distributionId = distributionId
        }

        public func encode(to encoder: Encoder) throws {
            let request = encoder.userInfo[.awsRequest]! as! RequestEncodingContainer
            _ = encoder.container(keyedBy: CodingKeys.self)
            request.encodePath(self.distributionId, key: "DistributionId")
        }

        private enum CodingKeys: CodingKey {}
    }

    public struct GetMonitoringSubscriptionResult: AWSDecodableShape {
        /// A monitoring subscription. This structure contains information about whether
        /// 			additional CloudWatch metrics are enabled for a given CloudFront distribution.
        public let monitoringSubscription: MonitoringSubscription

        public init(monitoringSubscription: MonitoringSubscription) {
            self.monitoringSubscription = monitoringSubscription
        }

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            self.monitoringSubscription = try container.decode(MonitoringSubscription.self)
        }

        private enum CodingKeys: CodingKey {}
    }

    public struct GetOriginAccessControlConfigRequest: AWSEncodableShape {
        /// The unique identifier of the origin access control.
        public let id: String

        public init(id: String) {
            self.id = id
        }

        public func encode(to encoder: Encoder) throws {
            let request = encoder.userInfo[.awsRequest]! as! RequestEncodingContainer
            _ = encoder.container(keyedBy: CodingKeys.self)
            request.encodePath(self.id, key: "Id")
        }

        private enum CodingKeys: CodingKey {}
    }

    public struct GetOriginAccessControlConfigResult: AWSDecodableShape {
        /// The version identifier for the current version of the origin access control.
        public let eTag: String?
        /// Contains an origin access control configuration.
        public let originAccessControlConfig: OriginAccessControlConfig

        public init(eTag: String? = nil, originAccessControlConfig: OriginAccessControlConfig) {
            self.eTag = eTag
            self.originAccessControlConfig = originAccessControlConfig
        }

        public init(from decoder: Decoder) throws {
            let response = decoder.userInfo[.awsResponse]! as! ResponseDecodingContainer
            let container = try decoder.singleValueContainer()
            self.eTag = try response.decodeHeaderIfPresent(String.self, key: "ETag")
            self.originAccessControlConfig = try container.decode(OriginAccessControlConfig.self)
        }

        private enum CodingKeys: CodingKey {}
    }

    public struct GetOriginAccessControlRequest: AWSEncodableShape {
        /// The unique identifier of the origin access control.
        public let id: String

        public init(id: String) {
            self.id = id
        }

        public func encode(to encoder: Encoder) throws {
            let request = encoder.userInfo[.awsRequest]! as! RequestEncodingContainer
            _ = encoder.container(keyedBy: CodingKeys.self)
            request.encodePath(self.id, key: "Id")
        }

        private enum CodingKeys: CodingKey {}
    }

    public struct GetOriginAccessControlResult: AWSDecodableShape {
        /// The version identifier for the current version of the origin access control.
        public let eTag: String?
        /// Contains an origin access control, including its unique identifier.
        public let originAccessControl: OriginAccessControl

        public init(eTag: String? = nil, originAccessControl: OriginAccessControl) {
            self.eTag = eTag
            self.originAccessControl = originAccessControl
        }

        public init(from decoder: Decoder) throws {
            let response = decoder.userInfo[.awsResponse]! as! ResponseDecodingContainer
            let container = try decoder.singleValueContainer()
            self.eTag = try response.decodeHeaderIfPresent(String.self, key: "ETag")
            self.originAccessControl = try container.decode(OriginAccessControl.self)
        }

        private enum CodingKeys: CodingKey {}
    }

    public struct GetOriginRequestPolicyConfigRequest: AWSEncodableShape {
        /// The unique identifier for the origin request policy. If the origin request policy is
        /// 			attached to a distribution's cache behavior, you can get the policy's identifier using
        /// 				ListDistributions or GetDistribution. If the origin
        /// 			request policy is not attached to a cache behavior, you can get the identifier using
        /// 				ListOriginRequestPolicies.
        public let id: String

        public init(id: String) {
            self.id = id
        }

        public func encode(to encoder: Encoder) throws {
            let request = encoder.userInfo[.awsRequest]! as! RequestEncodingContainer
            _ = encoder.container(keyedBy: CodingKeys.self)
            request.encodePath(self.id, key: "Id")
        }

        private enum CodingKeys: CodingKey {}
    }

    public struct GetOriginRequestPolicyConfigResult: AWSDecodableShape {
        /// The current version of the origin request policy.
        public let eTag: String?
        /// The origin request policy configuration.
        public let originRequestPolicyConfig: OriginRequestPolicyConfig

        public init(eTag: String? = nil, originRequestPolicyConfig: OriginRequestPolicyConfig) {
            self.eTag = eTag
            self.originRequestPolicyConfig = originRequestPolicyConfig
        }

        public init(from decoder: Decoder) throws {
            let response = decoder.userInfo[.awsResponse]! as! ResponseDecodingContainer
            let container = try decoder.singleValueContainer()
            self.eTag = try response.decodeHeaderIfPresent(String.self, key: "ETag")
            self.originRequestPolicyConfig = try container.decode(OriginRequestPolicyConfig.self)
        }

        private enum CodingKeys: CodingKey {}
    }

    public struct GetOriginRequestPolicyRequest: AWSEncodableShape {
        /// The unique identifier for the origin request policy. If the origin request policy is
        /// 			attached to a distribution's cache behavior, you can get the policy's identifier using
        /// 				ListDistributions or GetDistribution. If the origin
        /// 			request policy is not attached to a cache behavior, you can get the identifier using
        /// 				ListOriginRequestPolicies.
        public let id: String

        public init(id: String) {
            self.id = id
        }

        public func encode(to encoder: Encoder) throws {
            let request = encoder.userInfo[.awsRequest]! as! RequestEncodingContainer
            _ = encoder.container(keyedBy: CodingKeys.self)
            request.encodePath(self.id, key: "Id")
        }

        private enum CodingKeys: CodingKey {}
    }

    public struct GetOriginRequestPolicyResult: AWSDecodableShape {
        /// The current version of the origin request policy.
        public let eTag: String?
        /// The origin request policy.
        public let originRequestPolicy: OriginRequestPolicy

        public init(eTag: String? = nil, originRequestPolicy: OriginRequestPolicy) {
            self.eTag = eTag
            self.originRequestPolicy = originRequestPolicy
        }

        public init(from decoder: Decoder) throws {
            let response = decoder.userInfo[.awsResponse]! as! ResponseDecodingContainer
            let container = try decoder.singleValueContainer()
            self.eTag = try response.decodeHeaderIfPresent(String.self, key: "ETag")
            self.originRequestPolicy = try container.decode(OriginRequestPolicy.self)
        }

        private enum CodingKeys: CodingKey {}
    }

    public struct GetPublicKeyConfigRequest: AWSEncodableShape {
        /// The identifier of the public key whose configuration you are getting.
        public let id: String

        public init(id: String) {
            self.id = id
        }

        public func encode(to encoder: Encoder) throws {
            let request = encoder.userInfo[.awsRequest]! as! RequestEncodingContainer
            _ = encoder.container(keyedBy: CodingKeys.self)
            request.encodePath(self.id, key: "Id")
        }

        private enum CodingKeys: CodingKey {}
    }

    public struct GetPublicKeyConfigResult: AWSDecodableShape {
        /// The identifier for this version of the public key configuration.
        public let eTag: String?
        /// A public key configuration.
        public let publicKeyConfig: PublicKeyConfig

        public init(eTag: String? = nil, publicKeyConfig: PublicKeyConfig) {
            self.eTag = eTag
            self.publicKeyConfig = publicKeyConfig
        }

        public init(from decoder: Decoder) throws {
            let response = decoder.userInfo[.awsResponse]! as! ResponseDecodingContainer
            let container = try decoder.singleValueContainer()
            self.eTag = try response.decodeHeaderIfPresent(String.self, key: "ETag")
            self.publicKeyConfig = try container.decode(PublicKeyConfig.self)
        }

        private enum CodingKeys: CodingKey {}
    }

    public struct GetPublicKeyRequest: AWSEncodableShape {
        /// The identifier of the public key you are getting.
        public let id: String

        public init(id: String) {
            self.id = id
        }

        public func encode(to encoder: Encoder) throws {
            let request = encoder.userInfo[.awsRequest]! as! RequestEncodingContainer
            _ = encoder.container(keyedBy: CodingKeys.self)
            request.encodePath(self.id, key: "Id")
        }

        private enum CodingKeys: CodingKey {}
    }

    public struct GetPublicKeyResult: AWSDecodableShape {
        /// The identifier for this version of the public key.
        public let eTag: String?
        /// The public key.
        public let publicKey: PublicKey

        public init(eTag: String? = nil, publicKey: PublicKey) {
            self.eTag = eTag
            self.publicKey = publicKey
        }

        public init(from decoder: Decoder) throws {
            let response = decoder.userInfo[.awsResponse]! as! ResponseDecodingContainer
            let container = try decoder.singleValueContainer()
            self.eTag = try response.decodeHeaderIfPresent(String.self, key: "ETag")
            self.publicKey = try container.decode(PublicKey.self)
        }

        private enum CodingKeys: CodingKey {}
    }

    public struct GetRealtimeLogConfigRequest: AWSEncodableShape {
        /// The Amazon Resource Name (ARN) of the real-time log configuration to get.
        public let arn: String?
        /// The name of the real-time log configuration to get.
        public let name: String?

        public init(arn: String? = nil, name: String? = nil) {
            self.arn = arn
            self.name = name
        }

        private enum CodingKeys: String, CodingKey {
            case arn = "ARN"
            case name = "Name"
        }
    }

    public struct GetRealtimeLogConfigResult: AWSDecodableShape {
        /// A real-time log configuration.
        public let realtimeLogConfig: RealtimeLogConfig?

        public init(realtimeLogConfig: RealtimeLogConfig? = nil) {
            self.realtimeLogConfig = realtimeLogConfig
        }

        private enum CodingKeys: String, CodingKey {
            case realtimeLogConfig = "RealtimeLogConfig"
        }
    }

    public struct GetResponseHeadersPolicyConfigRequest: AWSEncodableShape {
        /// The identifier for the response headers policy. If the response headers policy is attached to a distribution's cache behavior, you can
        /// 			get the policy's identifier using ListDistributions or
        /// 				GetDistribution. If the response headers policy is not attached to a
        /// 			cache behavior, you can get the identifier using
        /// 				ListResponseHeadersPolicies.
        public let id: String

        public init(id: String) {
            self.id = id
        }

        public func encode(to encoder: Encoder) throws {
            let request = encoder.userInfo[.awsRequest]! as! RequestEncodingContainer
            _ = encoder.container(keyedBy: CodingKeys.self)
            request.encodePath(self.id, key: "Id")
        }

        private enum CodingKeys: CodingKey {}
    }

    public struct GetResponseHeadersPolicyConfigResult: AWSDecodableShape {
        /// The version identifier for the current version of the response headers policy.
        public let eTag: String?
        /// Contains a response headers policy.
        public let responseHeadersPolicyConfig: ResponseHeadersPolicyConfig

        public init(eTag: String? = nil, responseHeadersPolicyConfig: ResponseHeadersPolicyConfig) {
            self.eTag = eTag
            self.responseHeadersPolicyConfig = responseHeadersPolicyConfig
        }

        public init(from decoder: Decoder) throws {
            let response = decoder.userInfo[.awsResponse]! as! ResponseDecodingContainer
            let container = try decoder.singleValueContainer()
            self.eTag = try response.decodeHeaderIfPresent(String.self, key: "ETag")
            self.responseHeadersPolicyConfig = try container.decode(ResponseHeadersPolicyConfig.self)
        }

        private enum CodingKeys: CodingKey {}
    }

    public struct GetResponseHeadersPolicyRequest: AWSEncodableShape {
        /// The identifier for the response headers policy. If the response headers policy is attached to a distribution's cache behavior, you can
        /// 			get the policy's identifier using ListDistributions or
        /// 				GetDistribution. If the response headers policy is not attached to a
        /// 			cache behavior, you can get the identifier using
        /// 				ListResponseHeadersPolicies.
        public let id: String

        public init(id: String) {
            self.id = id
        }

        public func encode(to encoder: Encoder) throws {
            let request = encoder.userInfo[.awsRequest]! as! RequestEncodingContainer
            _ = encoder.container(keyedBy: CodingKeys.self)
            request.encodePath(self.id, key: "Id")
        }

        private enum CodingKeys: CodingKey {}
    }

    public struct GetResponseHeadersPolicyResult: AWSDecodableShape {
        /// The version identifier for the current version of the response headers policy.
        public let eTag: String?
        /// Contains a response headers policy.
        public let responseHeadersPolicy: ResponseHeadersPolicy

        public init(eTag: String? = nil, responseHeadersPolicy: ResponseHeadersPolicy) {
            self.eTag = eTag
            self.responseHeadersPolicy = responseHeadersPolicy
        }

        public init(from decoder: Decoder) throws {
            let response = decoder.userInfo[.awsResponse]! as! ResponseDecodingContainer
            let container = try decoder.singleValueContainer()
            self.eTag = try response.decodeHeaderIfPresent(String.self, key: "ETag")
            self.responseHeadersPolicy = try container.decode(ResponseHeadersPolicy.self)
        }

        private enum CodingKeys: CodingKey {}
    }

    public struct GetStreamingDistributionConfigRequest: AWSEncodableShape {
        /// The streaming distribution's ID.
        public let id: String

        public init(id: String) {
            self.id = id
        }

        public func encode(to encoder: Encoder) throws {
            let request = encoder.userInfo[.awsRequest]! as! RequestEncodingContainer
            _ = encoder.container(keyedBy: CodingKeys.self)
            request.encodePath(self.id, key: "Id")
        }

        private enum CodingKeys: CodingKey {}
    }

    public struct GetStreamingDistributionConfigResult: AWSDecodableShape {
        /// The current version of the configuration. For example: E2QWRUHAPOMQZL.
        ///
        public let eTag: String?
        /// The streaming distribution's configuration information.
        public let streamingDistributionConfig: StreamingDistributionConfig

        public init(eTag: String? = nil, streamingDistributionConfig: StreamingDistributionConfig) {
            self.eTag = eTag
            self.streamingDistributionConfig = streamingDistributionConfig
        }

        public init(from decoder: Decoder) throws {
            let response = decoder.userInfo[.awsResponse]! as! ResponseDecodingContainer
            let container = try decoder.singleValueContainer()
            self.eTag = try response.decodeHeaderIfPresent(String.self, key: "ETag")
            self.streamingDistributionConfig = try container.decode(StreamingDistributionConfig.self)
        }

        private enum CodingKeys: CodingKey {}
    }

    public struct GetStreamingDistributionRequest: AWSEncodableShape {
        /// The streaming distribution's ID.
        public let id: String

        public init(id: String) {
            self.id = id
        }

        public func encode(to encoder: Encoder) throws {
            let request = encoder.userInfo[.awsRequest]! as! RequestEncodingContainer
            _ = encoder.container(keyedBy: CodingKeys.self)
            request.encodePath(self.id, key: "Id")
        }

        private enum CodingKeys: CodingKey {}
    }

    public struct GetStreamingDistributionResult: AWSDecodableShape {
        /// The current version of the streaming distribution's information. For example:
        /// 				E2QWRUHAPOMQZL.
        public let eTag: String?
        /// The streaming distribution's information.
        public let streamingDistribution: StreamingDistribution

        public init(eTag: String? = nil, streamingDistribution: StreamingDistribution) {
            self.eTag = eTag
            self.streamingDistribution = streamingDistribution
        }

        public init(from decoder: Decoder) throws {
            let response = decoder.userInfo[.awsResponse]! as! ResponseDecodingContainer
            let container = try decoder.singleValueContainer()
            self.eTag = try response.decodeHeaderIfPresent(String.self, key: "ETag")
            self.streamingDistribution = try container.decode(StreamingDistribution.self)
        }

        private enum CodingKeys: CodingKey {}
    }

    public struct Headers: AWSEncodableShape & AWSDecodableShape {
        public struct _ItemsEncoding: ArrayCoderProperties { public static let member = "Name" }

        /// A list of HTTP header names.
        @OptionalCustomCoding<ArrayCoder<_ItemsEncoding, String>>
        public var items: [String]?
        /// The number of header names in the Items list.
        public let quantity: Int

        public init(items: [String]? = nil, quantity: Int) {
            self.items = items
            self.quantity = quantity
        }

        private enum CodingKeys: String, CodingKey {
            case items = "Items"
            case quantity = "Quantity"
        }
    }

    public struct ImportSource: AWSEncodableShape {
        /// The Amazon Resource Name (ARN) of the import source for the Key Value Store.
        public let sourceARN: String
        /// The source type of the import source for the Key Value Store.
        public let sourceType: ImportSourceType

        public init(sourceARN: String, sourceType: ImportSourceType) {
            self.sourceARN = sourceARN
            self.sourceType = sourceType
        }

        private enum CodingKeys: String, CodingKey {
            case sourceARN = "SourceARN"
            case sourceType = "SourceType"
        }
    }

    public struct Invalidation: AWSDecodableShape {
        /// The date and time the invalidation request was first made.
        public let createTime: Date
        /// The identifier for the invalidation request. For example:
        /// 			IDFDVBD632BHDS5.
        public let id: String
        /// The current invalidation information for the batch request.
        public let invalidationBatch: InvalidationBatch
        /// The status of the invalidation request. When the invalidation batch is finished, the
        /// 			status is Completed.
        public let status: String

        public init(createTime: Date, id: String, invalidationBatch: InvalidationBatch, status: String) {
            self.createTime = createTime
            self.id = id
            self.invalidationBatch = invalidationBatch
            self.status = status
        }

        private enum CodingKeys: String, CodingKey {
            case createTime = "CreateTime"
            case id = "Id"
            case invalidationBatch = "InvalidationBatch"
            case status = "Status"
        }
    }

    public struct InvalidationBatch: AWSEncodableShape & AWSDecodableShape {
        /// A value that you specify to uniquely identify an invalidation request. CloudFront uses the
        /// 			value to prevent you from accidentally resubmitting an identical request. Whenever you
        /// 			create a new invalidation request, you must specify a new value for
        /// 				CallerReference and change other values in the request as applicable.
        /// 			One way to ensure that the value of CallerReference is unique is to use a
        /// 				timestamp, for example, 20120301090000. If you make a second invalidation request with the same value for
        /// 				CallerReference, and if the rest of the request is the same, CloudFront
        /// 			doesn't create a new invalidation request. Instead, CloudFront returns information about the
        /// 			invalidation request that you previously created with the same
        /// 				CallerReference. If CallerReference is a value you already sent in a previous invalidation
        /// 			batch request but the content of any Path is different from the original
        /// 			request, CloudFront returns an InvalidationBatchAlreadyExists error.
        public let callerReference: String
        /// A complex type that contains information about the objects that you want to
        /// 			invalidate. For more information, see Specifying the Objects to Invalidate in the
        /// 				Amazon CloudFront Developer Guide.
        public let paths: Paths

        public init(callerReference: String, paths: Paths) {
            self.callerReference = callerReference
            self.paths = paths
        }

        private enum CodingKeys: String, CodingKey {
            case callerReference = "CallerReference"
            case paths = "Paths"
        }
    }

    public struct InvalidationList: AWSDecodableShape {
        public struct _ItemsEncoding: ArrayCoderProperties { public static let member = "InvalidationSummary" }

        /// A flag that indicates whether more invalidation batch requests remain to be listed. If
        /// 			your results were truncated, you can make a follow-up pagination request using the
        /// 				Marker request parameter to retrieve more invalidation batches in the
        /// 			list.
        public let isTruncated: Bool
        /// A complex type that contains one InvalidationSummary element for each
        /// 			invalidation batch created by the current Amazon Web Services account.
        @OptionalCustomCoding<ArrayCoder<_ItemsEncoding, InvalidationSummary>>
        public var items: [InvalidationSummary]?
        /// The value that you provided for the Marker request parameter.
        public let marker: String
        /// The value that you provided for the MaxItems request parameter.
        public let maxItems: Int
        /// If IsTruncated is true, this element is present and contains
        /// 			the value that you can use for the Marker request parameter to continue
        /// 			listing your invalidation batches where they left off.
        public let nextMarker: String?
        /// The number of invalidation batches that were created by the current Amazon Web Services account.
        ///
        public let quantity: Int

        public init(isTruncated: Bool, items: [InvalidationSummary]? = nil, marker: String, maxItems: Int, nextMarker: String? = nil, quantity: Int) {
            self.isTruncated = isTruncated
            self.items = items
            self.marker = marker
            self.maxItems = maxItems
            self.nextMarker = nextMarker
            self.quantity = quantity
        }

        private enum CodingKeys: String, CodingKey {
            case isTruncated = "IsTruncated"
            case items = "Items"
            case marker = "Marker"
            case maxItems = "MaxItems"
            case nextMarker = "NextMarker"
            case quantity = "Quantity"
        }
    }

    public struct InvalidationSummary: AWSDecodableShape {
        /// The time that an invalidation request was created.
        public let createTime: Date
        /// The unique ID for an invalidation request.
        public let id: String
        /// The status of an invalidation request.
        public let status: String

        public init(createTime: Date, id: String, status: String) {
            self.createTime = createTime
            self.id = id
            self.status = status
        }

        private enum CodingKeys: String, CodingKey {
            case createTime = "CreateTime"
            case id = "Id"
            case status = "Status"
        }
    }

    public struct KGKeyPairIds: AWSDecodableShape {
        /// The identifier of the key group that contains the public keys.
        public let keyGroupId: String?
        public let keyPairIds: KeyPairIds?

        public init(keyGroupId: String? = nil, keyPairIds: KeyPairIds? = nil) {
            self.keyGroupId = keyGroupId
            self.keyPairIds = keyPairIds
        }

        private enum CodingKeys: String, CodingKey {
            case keyGroupId = "KeyGroupId"
            case keyPairIds = "KeyPairIds"
        }
    }

    public struct KeyGroup: AWSDecodableShape {
        /// The identifier for the key group.
        public let id: String
        /// The key group configuration.
        public let keyGroupConfig: KeyGroupConfig
        /// The date and time when the key group was last modified.
        public let lastModifiedTime: Date

        public init(id: String, keyGroupConfig: KeyGroupConfig, lastModifiedTime: Date) {
            self.id = id
            self.keyGroupConfig = keyGroupConfig
            self.lastModifiedTime = lastModifiedTime
        }

        private enum CodingKeys: String, CodingKey {
            case id = "Id"
            case keyGroupConfig = "KeyGroupConfig"
            case lastModifiedTime = "LastModifiedTime"
        }
    }

    public struct KeyGroupConfig: AWSEncodableShape & AWSDecodableShape {
        public struct _ItemsEncoding: ArrayCoderProperties { public static let member = "PublicKey" }

        /// A comment to describe the key group. The comment cannot be longer than 128
        /// 			characters.
        public let comment: String?
        /// A list of the identifiers of the public keys in the key group.
        @CustomCoding<ArrayCoder<_ItemsEncoding, String>>
        public var items: [String]
        /// A name to identify the key group.
        public let name: String

        public init(comment: String? = nil, items: [String], name: String) {
            self.comment = comment
            self.items = items
            self.name = name
        }

        private enum CodingKeys: String, CodingKey {
            case comment = "Comment"
            case items = "Items"
            case name = "Name"
        }
    }

    public struct KeyGroupList: AWSDecodableShape {
        public struct _ItemsEncoding: ArrayCoderProperties { public static let member = "KeyGroupSummary" }

        /// A list of key groups.
        @OptionalCustomCoding<ArrayCoder<_ItemsEncoding, KeyGroupSummary>>
        public var items: [KeyGroupSummary]?
        /// The maximum number of key groups requested.
        public let maxItems: Int
        /// If there are more items in the list than are in this response, this element is
        /// 			present. It contains the value that you should use in the Marker field of a
        /// 			subsequent request to continue listing key groups.
        public let nextMarker: String?
        /// The number of key groups returned in the response.
        public let quantity: Int

        public init(items: [KeyGroupSummary]? = nil, maxItems: Int, nextMarker: String? = nil, quantity: Int) {
            self.items = items
            self.maxItems = maxItems
            self.nextMarker = nextMarker
            self.quantity = quantity
        }

        private enum CodingKeys: String, CodingKey {
            case items = "Items"
            case maxItems = "MaxItems"
            case nextMarker = "NextMarker"
            case quantity = "Quantity"
        }
    }

    public struct KeyGroupSummary: AWSDecodableShape {
        /// A key group.
        public let keyGroup: KeyGroup

        public init(keyGroup: KeyGroup) {
            self.keyGroup = keyGroup
        }

        private enum CodingKeys: String, CodingKey {
            case keyGroup = "KeyGroup"
        }
    }

    public struct KeyPairIds: AWSDecodableShape {
        public struct _ItemsEncoding: ArrayCoderProperties { public static let member = "KeyPairId" }

        /// A list of CloudFront key pair identifiers.
        @OptionalCustomCoding<ArrayCoder<_ItemsEncoding, String>>
        public var items: [String]?
        /// The number of key pair identifiers in the list.
        public let quantity: Int

        public init(items: [String]? = nil, quantity: Int) {
            self.items = items
            self.quantity = quantity
        }

        private enum CodingKeys: String, CodingKey {
            case items = "Items"
            case quantity = "Quantity"
        }
    }

    public struct KeyValueStore: AWSDecodableShape {
        /// The Amazon Resource Name (ARN) of the Key Value Store.
        public let arn: String
        /// A comment for the Key Value Store.
        public let comment: String
        /// The unique Id for the Key Value Store.
        public let id: String
        /// The last-modified time of the Key Value Store.
        public let lastModifiedTime: Date
        /// The name of the Key Value Store.
        public let name: String
        /// The status of the Key Value Store.
        public let status: String?

        public init(arn: String, comment: String, id: String, lastModifiedTime: Date, name: String, status: String? = nil) {
            self.arn = arn
            self.comment = comment
            self.id = id
            self.lastModifiedTime = lastModifiedTime
            self.name = name
            self.status = status
        }

        private enum CodingKeys: String, CodingKey {
            case arn = "ARN"
            case comment = "Comment"
            case id = "Id"
            case lastModifiedTime = "LastModifiedTime"
            case name = "Name"
            case status = "Status"
        }
    }

    public struct KeyValueStoreAssociation: AWSEncodableShape & AWSDecodableShape {
        /// The Amazon Resource Name (ARN) of the Key Value Store association.
        public let keyValueStoreARN: String

        public init(keyValueStoreARN: String) {
            self.keyValueStoreARN = keyValueStoreARN
        }

        public func validate(name: String) throws {
            try self.validate(self.keyValueStoreARN, name: "keyValueStoreARN", parent: name, max: 85)
            try self.validate(self.keyValueStoreARN, name: "keyValueStoreARN", parent: name, pattern: "^arn:aws:cloudfront::[0-9]{12}:key-value-store\\/[0-9a-fA-F-]{36}$")
        }

        private enum CodingKeys: String, CodingKey {
            case keyValueStoreARN = "KeyValueStoreARN"
        }
    }

    public struct KeyValueStoreAssociations: AWSEncodableShape & AWSDecodableShape {
        public struct _ItemsEncoding: ArrayCoderProperties { public static let member = "KeyValueStoreAssociation" }

        /// The items of the Key Value Store association.
        @OptionalCustomCoding<ArrayCoder<_ItemsEncoding, KeyValueStoreAssociation>>
        public var items: [KeyValueStoreAssociation]?
        /// The quantity of Key Value Store associations.
        public let quantity: Int

        public init(items: [KeyValueStoreAssociation]? = nil, quantity: Int) {
            self.items = items
            self.quantity = quantity
        }

        public func validate(name: String) throws {
            try self.items?.forEach {
                try $0.validate(name: "\(name).items[]")
            }
        }

        private enum CodingKeys: String, CodingKey {
            case items = "Items"
            case quantity = "Quantity"
        }
    }

    public struct KeyValueStoreList: AWSDecodableShape {
        public struct _ItemsEncoding: ArrayCoderProperties { public static let member = "KeyValueStore" }

        /// The items of the Key Value Store list.
        @OptionalCustomCoding<ArrayCoder<_ItemsEncoding, KeyValueStore>>
        public var items: [KeyValueStore]?
        /// The maximum number of items in the Key Value Store list.
        public let maxItems: Int
        /// The next marker associated with the Key Value Store list.
        public let nextMarker: String?
        /// The quantity of the Key Value Store list.
        public let quantity: Int

        public init(items: [KeyValueStore]? = nil, maxItems: Int, nextMarker: String? = nil, quantity: Int) {
            self.items = items
            self.maxItems = maxItems
            self.nextMarker = nextMarker
            self.quantity = quantity
        }

        private enum CodingKeys: String, CodingKey {
            case items = "Items"
            case maxItems = "MaxItems"
            case nextMarker = "NextMarker"
            case quantity = "Quantity"
        }
    }

    public struct KinesisStreamConfig: AWSEncodableShape & AWSDecodableShape {
        /// The Amazon Resource Name (ARN) of an Identity and Access Management (IAM) role that CloudFront can use to
        /// 			send real-time log data to your Kinesis data stream. For more information the IAM role, see Real-time log configuration IAM role in the
        /// 				Amazon CloudFront Developer Guide.
        public let roleARN: String
        /// The Amazon Resource Name (ARN) of the Kinesis data stream where you are sending
        /// 			real-time log data.
        public let streamARN: String

        public init(roleARN: String, streamARN: String) {
            self.roleARN = roleARN
            self.streamARN = streamARN
        }

        private enum CodingKeys: String, CodingKey {
            case roleARN = "RoleARN"
            case streamARN = "StreamARN"
        }
    }

    public struct LambdaFunctionAssociation: AWSEncodableShape & AWSDecodableShape {
        /// Specifies the event type that triggers a Lambda@Edge function invocation. You can
        /// 			specify the following values:    viewer-request: The function executes when CloudFront receives a
        /// 					request from a viewer and before it checks to see whether the requested object
        /// 					is in the edge cache.    origin-request: The function executes only when CloudFront sends a
        /// 					request to your origin. When the requested object is in the edge cache, the
        /// 					function doesn't execute.    origin-response: The function executes after CloudFront receives a
        /// 					response from the origin and before it caches the object in the response. When
        /// 					the requested object is in the edge cache, the function doesn't execute.    viewer-response: The function executes before CloudFront returns the
        /// 					requested object to the viewer. The function executes regardless of whether the
        /// 					object was already in the edge cache. If the origin returns an HTTP status code other than HTTP 200 (OK), the
        /// 					function doesn't execute.
        public let eventType: EventType
        /// A flag that allows a Lambda@Edge function to have read access to the body content. For
        /// 			more information, see Accessing the Request Body by Choosing the Include Body Option in the
        /// 			Amazon CloudFront Developer Guide.
        public let includeBody: Bool?
        /// The ARN of the Lambda@Edge function. You must specify the ARN of a function version;
        /// 			you can't specify an alias or $LATEST.
        public let lambdaFunctionARN: String

        public init(eventType: EventType, includeBody: Bool? = nil, lambdaFunctionARN: String) {
            self.eventType = eventType
            self.includeBody = includeBody
            self.lambdaFunctionARN = lambdaFunctionARN
        }

        private enum CodingKeys: String, CodingKey {
            case eventType = "EventType"
            case includeBody = "IncludeBody"
            case lambdaFunctionARN = "LambdaFunctionARN"
        }
    }

    public struct LambdaFunctionAssociations: AWSEncodableShape & AWSDecodableShape {
        public struct _ItemsEncoding: ArrayCoderProperties { public static let member = "LambdaFunctionAssociation" }

        ///  Optional: A complex type that contains
        /// 				LambdaFunctionAssociation items for this cache behavior. If
        /// 				Quantity is 0, you can omit Items.
        @OptionalCustomCoding<ArrayCoder<_ItemsEncoding, LambdaFunctionAssociation>>
        public var items: [LambdaFunctionAssociation]?
        /// The number of Lambda@Edge function associations for this cache behavior.
        public let quantity: Int

        public init(items: [LambdaFunctionAssociation]? = nil, quantity: Int) {
            self.items = items
            self.quantity = quantity
        }

        private enum CodingKeys: String, CodingKey {
            case items = "Items"
            case quantity = "Quantity"
        }
    }

    public struct ListCachePoliciesRequest: AWSEncodableShape {
        /// Use this field when paginating results to indicate where to begin in your list of
        /// 			cache policies. The response includes cache policies in the list that occur after the
        /// 			marker. To get the next page of the list, set this field's value to the value of
        /// 				NextMarker from the current page's response.
        public let marker: String?
        /// The maximum number of cache policies that you want in the response.
        public let maxItems: Int?
        /// A filter to return only the specified kinds of cache policies. Valid values
        /// 			are:    managed – Returns only the managed policies created by
        /// 					Amazon Web Services.    custom – Returns only the custom policies created in your
        /// 					Amazon Web Services account.
        public let type: CachePolicyType?

        public init(marker: String? = nil, maxItems: Int? = nil, type: CachePolicyType? = nil) {
            self.marker = marker
            self.maxItems = maxItems
            self.type = type
        }

        public func encode(to encoder: Encoder) throws {
            let request = encoder.userInfo[.awsRequest]! as! RequestEncodingContainer
            _ = encoder.container(keyedBy: CodingKeys.self)
            request.encodeQuery(self.marker, key: "Marker")
            request.encodeQuery(self.maxItems, key: "MaxItems")
            request.encodeQuery(self.type, key: "Type")
        }

        private enum CodingKeys: CodingKey {}
    }

    public struct ListCachePoliciesResult: AWSDecodableShape {
        /// A list of cache policies.
        public let cachePolicyList: CachePolicyList

        public init(cachePolicyList: CachePolicyList) {
            self.cachePolicyList = cachePolicyList
        }

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            self.cachePolicyList = try container.decode(CachePolicyList.self)
        }

        private enum CodingKeys: CodingKey {}
    }

    public struct ListCloudFrontOriginAccessIdentitiesRequest: AWSEncodableShape {
        /// Use this when paginating results to indicate where to begin in your list of origin
        /// 			access identities. The results include identities in the list that occur after the
        /// 			marker. To get the next page of results, set the Marker to the value of the
        /// 				NextMarker from the current page's response (which is also the ID of
        /// 			the last identity on that page).
        public let marker: String?
        /// The maximum number of origin access identities you want in the response body.
        public let maxItems: Int?

        public init(marker: String? = nil, maxItems: Int? = nil) {
            self.marker = marker
            self.maxItems = maxItems
        }

        public func encode(to encoder: Encoder) throws {
            let request = encoder.userInfo[.awsRequest]! as! RequestEncodingContainer
            _ = encoder.container(keyedBy: CodingKeys.self)
            request.encodeQuery(self.marker, key: "Marker")
            request.encodeQuery(self.maxItems, key: "MaxItems")
        }

        private enum CodingKeys: CodingKey {}
    }

    public struct ListCloudFrontOriginAccessIdentitiesResult: AWSDecodableShape {
        /// The CloudFrontOriginAccessIdentityList type.
        public let cloudFrontOriginAccessIdentityList: CloudFrontOriginAccessIdentityList

        public init(cloudFrontOriginAccessIdentityList: CloudFrontOriginAccessIdentityList) {
            self.cloudFrontOriginAccessIdentityList = cloudFrontOriginAccessIdentityList
        }

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            self.cloudFrontOriginAccessIdentityList = try container.decode(CloudFrontOriginAccessIdentityList.self)
        }

        private enum CodingKeys: CodingKey {}
    }

    public struct ListConflictingAliasesRequest: AWSEncodableShape {
        /// The alias (also called a CNAME) to search for conflicting aliases.
        public let alias: String
        /// The ID of a distribution in your account that has an attached SSL/TLS certificate that
        /// 			includes the provided alias.
        public let distributionId: String
        /// Use this field when paginating results to indicate where to begin in the list of
        /// 			conflicting aliases. The response includes conflicting aliases in the list that occur
        /// 			after the marker. To get the next page of the list, set this field's value to the value
        /// 			of NextMarker from the current page's response.
        public let marker: String?
        /// The maximum number of conflicting aliases that you want in the response.
        public let maxItems: Int?

        public init(alias: String, distributionId: String, marker: String? = nil, maxItems: Int? = nil) {
            self.alias = alias
            self.distributionId = distributionId
            self.marker = marker
            self.maxItems = maxItems
        }

        public func encode(to encoder: Encoder) throws {
            let request = encoder.userInfo[.awsRequest]! as! RequestEncodingContainer
            _ = encoder.container(keyedBy: CodingKeys.self)
            request.encodeQuery(self.alias, key: "Alias")
            request.encodeQuery(self.distributionId, key: "DistributionId")
            request.encodeQuery(self.marker, key: "Marker")
            request.encodeQuery(self.maxItems, key: "MaxItems")
        }

        public func validate(name: String) throws {
            try self.validate(self.alias, name: "alias", parent: name, max: 253)
            try self.validate(self.distributionId, name: "distributionId", parent: name, max: 25)
            try self.validate(self.maxItems, name: "maxItems", parent: name, max: 100)
        }

        private enum CodingKeys: CodingKey {}
    }

    public struct ListConflictingAliasesResult: AWSDecodableShape {
        /// A list of conflicting aliases.
        public let conflictingAliasesList: ConflictingAliasesList

        public init(conflictingAliasesList: ConflictingAliasesList) {
            self.conflictingAliasesList = conflictingAliasesList
        }

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            self.conflictingAliasesList = try container.decode(ConflictingAliasesList.self)
        }

        private enum CodingKeys: CodingKey {}
    }

    public struct ListContinuousDeploymentPoliciesRequest: AWSEncodableShape {
        /// Use this field when paginating results to indicate where to begin in your list of
        /// 			continuous deployment policies. The response includes policies in the list that occur
        /// 			after the marker. To get the next page of the list, set this field's value to the value
        /// 			of NextMarker from the current page's response.
        public let marker: String?
        /// The maximum number of continuous deployment policies that you want returned in the
        /// 			response.
        public let maxItems: Int?

        public init(marker: String? = nil, maxItems: Int? = nil) {
            self.marker = marker
            self.maxItems = maxItems
        }

        public func encode(to encoder: Encoder) throws {
            let request = encoder.userInfo[.awsRequest]! as! RequestEncodingContainer
            _ = encoder.container(keyedBy: CodingKeys.self)
            request.encodeQuery(self.marker, key: "Marker")
            request.encodeQuery(self.maxItems, key: "MaxItems")
        }

        private enum CodingKeys: CodingKey {}
    }

    public struct ListContinuousDeploymentPoliciesResult: AWSDecodableShape {
        /// A list of continuous deployment policies.
        public let continuousDeploymentPolicyList: ContinuousDeploymentPolicyList

        public init(continuousDeploymentPolicyList: ContinuousDeploymentPolicyList) {
            self.continuousDeploymentPolicyList = continuousDeploymentPolicyList
        }

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            self.continuousDeploymentPolicyList = try container.decode(ContinuousDeploymentPolicyList.self)
        }

        private enum CodingKeys: CodingKey {}
    }

    public struct ListDistributionsByCachePolicyIdRequest: AWSEncodableShape {
        /// The ID of the cache policy whose associated distribution IDs you want to list.
        public let cachePolicyId: String
        /// Use this field when paginating results to indicate where to begin in your list of
        /// 			distribution IDs. The response includes distribution IDs in the list that occur after
        /// 			the marker. To get the next page of the list, set this field's value to the value of
        /// 				NextMarker from the current page's response.
        public let marker: String?
        /// The maximum number of distribution IDs that you want in the response.
        public let maxItems: Int?

        public init(cachePolicyId: String, marker: String? = nil, maxItems: Int? = nil) {
            self.cachePolicyId = cachePolicyId
            self.marker = marker
            self.maxItems = maxItems
        }

        public func encode(to encoder: Encoder) throws {
            let request = encoder.userInfo[.awsRequest]! as! RequestEncodingContainer
            _ = encoder.container(keyedBy: CodingKeys.self)
            request.encodePath(self.cachePolicyId, key: "CachePolicyId")
            request.encodeQuery(self.marker, key: "Marker")
            request.encodeQuery(self.maxItems, key: "MaxItems")
        }

        private enum CodingKeys: CodingKey {}
    }

    public struct ListDistributionsByCachePolicyIdResult: AWSDecodableShape {
        /// A list of distribution IDs.
        public let distributionIdList: DistributionIdList

        public init(distributionIdList: DistributionIdList) {
            self.distributionIdList = distributionIdList
        }

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            self.distributionIdList = try container.decode(DistributionIdList.self)
        }

        private enum CodingKeys: CodingKey {}
    }

    public struct ListDistributionsByKeyGroupRequest: AWSEncodableShape {
        /// The ID of the key group whose associated distribution IDs you are listing.
        public let keyGroupId: String
        /// Use this field when paginating results to indicate where to begin in your list of
        /// 			distribution IDs. The response includes distribution IDs in the list that occur after
        /// 			the marker. To get the next page of the list, set this field's value to the value of
        /// 				NextMarker from the current page's response.
        public let marker: String?
        /// The maximum number of distribution IDs that you want in the response.
        public let maxItems: Int?

        public init(keyGroupId: String, marker: String? = nil, maxItems: Int? = nil) {
            self.keyGroupId = keyGroupId
            self.marker = marker
            self.maxItems = maxItems
        }

        public func encode(to encoder: Encoder) throws {
            let request = encoder.userInfo[.awsRequest]! as! RequestEncodingContainer
            _ = encoder.container(keyedBy: CodingKeys.self)
            request.encodePath(self.keyGroupId, key: "KeyGroupId")
            request.encodeQuery(self.marker, key: "Marker")
            request.encodeQuery(self.maxItems, key: "MaxItems")
        }

        private enum CodingKeys: CodingKey {}
    }

    public struct ListDistributionsByKeyGroupResult: AWSDecodableShape {
        public let distributionIdList: DistributionIdList

        public init(distributionIdList: DistributionIdList) {
            self.distributionIdList = distributionIdList
        }

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            self.distributionIdList = try container.decode(DistributionIdList.self)
        }

        private enum CodingKeys: CodingKey {}
    }

    public struct ListDistributionsByOriginRequestPolicyIdRequest: AWSEncodableShape {
        /// Use this field when paginating results to indicate where to begin in your list of
        /// 			distribution IDs. The response includes distribution IDs in the list that occur after
        /// 			the marker. To get the next page of the list, set this field's value to the value of
        /// 				NextMarker from the current page's response.
        public let marker: String?
        /// The maximum number of distribution IDs that you want in the response.
        public let maxItems: Int?
        /// The ID of the origin request policy whose associated distribution IDs you want to
        /// 			list.
        public let originRequestPolicyId: String

        public init(marker: String? = nil, maxItems: Int? = nil, originRequestPolicyId: String) {
            self.marker = marker
            self.maxItems = maxItems
            self.originRequestPolicyId = originRequestPolicyId
        }

        public func encode(to encoder: Encoder) throws {
            let request = encoder.userInfo[.awsRequest]! as! RequestEncodingContainer
            _ = encoder.container(keyedBy: CodingKeys.self)
            request.encodeQuery(self.marker, key: "Marker")
            request.encodeQuery(self.maxItems, key: "MaxItems")
            request.encodePath(self.originRequestPolicyId, key: "OriginRequestPolicyId")
        }

        private enum CodingKeys: CodingKey {}
    }

    public struct ListDistributionsByOriginRequestPolicyIdResult: AWSDecodableShape {
        /// A list of distribution IDs.
        public let distributionIdList: DistributionIdList

        public init(distributionIdList: DistributionIdList) {
            self.distributionIdList = distributionIdList
        }

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            self.distributionIdList = try container.decode(DistributionIdList.self)
        }

        private enum CodingKeys: CodingKey {}
    }

    public struct ListDistributionsByRealtimeLogConfigRequest: AWSEncodableShape {
        /// Use this field when paginating results to indicate where to begin in your list of
        /// 			distributions. The response includes distributions in the list that occur after the
        /// 			marker. To get the next page of the list, set this field's value to the value of
        /// 				NextMarker from the current page's response.
        public let marker: String?
        /// The maximum number of distributions that you want in the response.
        public let maxItems: Int?
        /// The Amazon Resource Name (ARN) of the real-time log configuration whose associated
        /// 			distributions you want to list.
        public let realtimeLogConfigArn: String?
        /// The name of the real-time log configuration whose associated distributions you want to
        /// 			list.
        public let realtimeLogConfigName: String?

        public init(marker: String? = nil, maxItems: Int? = nil, realtimeLogConfigArn: String? = nil, realtimeLogConfigName: String? = nil) {
            self.marker = marker
            self.maxItems = maxItems
            self.realtimeLogConfigArn = realtimeLogConfigArn
            self.realtimeLogConfigName = realtimeLogConfigName
        }

        private enum CodingKeys: String, CodingKey {
            case marker = "Marker"
            case maxItems = "MaxItems"
            case realtimeLogConfigArn = "RealtimeLogConfigArn"
            case realtimeLogConfigName = "RealtimeLogConfigName"
        }
    }

    public struct ListDistributionsByRealtimeLogConfigResult: AWSDecodableShape {
        public let distributionList: DistributionList

        public init(distributionList: DistributionList) {
            self.distributionList = distributionList
        }

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            self.distributionList = try container.decode(DistributionList.self)
        }

        private enum CodingKeys: CodingKey {}
    }

    public struct ListDistributionsByResponseHeadersPolicyIdRequest: AWSEncodableShape {
        /// Use this field when paginating results to indicate where to begin in your list of
        /// 			distribution IDs. The response includes distribution IDs in the list that occur after
        /// 			the marker. To get the next page of the list, set this field's value to the value of
        /// 				NextMarker from the current page's response.
        public let marker: String?
        /// The maximum number of distribution IDs that you want to get in the response.
        public let maxItems: Int?
        /// The ID of the response headers policy whose associated distribution IDs you want to
        /// 			list.
        public let responseHeadersPolicyId: String

        public init(marker: String? = nil, maxItems: Int? = nil, responseHeadersPolicyId: String) {
            self.marker = marker
            self.maxItems = maxItems
            self.responseHeadersPolicyId = responseHeadersPolicyId
        }

        public func encode(to encoder: Encoder) throws {
            let request = encoder.userInfo[.awsRequest]! as! RequestEncodingContainer
            _ = encoder.container(keyedBy: CodingKeys.self)
            request.encodeQuery(self.marker, key: "Marker")
            request.encodeQuery(self.maxItems, key: "MaxItems")
            request.encodePath(self.responseHeadersPolicyId, key: "ResponseHeadersPolicyId")
        }

        private enum CodingKeys: CodingKey {}
    }

    public struct ListDistributionsByResponseHeadersPolicyIdResult: AWSDecodableShape {
        public let distributionIdList: DistributionIdList

        public init(distributionIdList: DistributionIdList) {
            self.distributionIdList = distributionIdList
        }

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            self.distributionIdList = try container.decode(DistributionIdList.self)
        }

        private enum CodingKeys: CodingKey {}
    }

    public struct ListDistributionsByWebACLIdRequest: AWSEncodableShape {
        /// Use Marker and MaxItems to control pagination of results. If
        /// 			you have more than MaxItems distributions that satisfy the request, the
        /// 			response includes a NextMarker element. To get the next page of results,
        /// 			submit another request. For the value of Marker, specify the value of
        /// 				NextMarker from the last response. (For the first request, omit
        /// 				Marker.)
        public let marker: String?
        /// The maximum number of distributions that you want CloudFront to return in the response body.
        /// 			The maximum and default values are both 100.
        public let maxItems: Int?
        /// The ID of the WAF web ACL that you want to list the associated distributions. If you
        /// 			specify "null" for the ID, the request returns a list of the distributions that aren't
        /// 			associated with a web ACL.
        public let webACLId: String

        public init(marker: String? = nil, maxItems: Int? = nil, webACLId: String) {
            self.marker = marker
            self.maxItems = maxItems
            self.webACLId = webACLId
        }

        public func encode(to encoder: Encoder) throws {
            let request = encoder.userInfo[.awsRequest]! as! RequestEncodingContainer
            _ = encoder.container(keyedBy: CodingKeys.self)
            request.encodeQuery(self.marker, key: "Marker")
            request.encodeQuery(self.maxItems, key: "MaxItems")
            request.encodePath(self.webACLId, key: "WebACLId")
        }

        private enum CodingKeys: CodingKey {}
    }

    public struct ListDistributionsByWebACLIdResult: AWSDecodableShape {
        /// The DistributionList type.
        public let distributionList: DistributionList

        public init(distributionList: DistributionList) {
            self.distributionList = distributionList
        }

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            self.distributionList = try container.decode(DistributionList.self)
        }

        private enum CodingKeys: CodingKey {}
    }

    public struct ListDistributionsRequest: AWSEncodableShape {
        /// Use this when paginating results to indicate where to begin in your list of
        /// 			distributions. The results include distributions in the list that occur after the
        /// 			marker. To get the next page of results, set the Marker to the value of the
        /// 				NextMarker from the current page's response (which is also the ID of
        /// 			the last distribution on that page).
        public let marker: String?
        /// The maximum number of distributions you want in the response body.
        public let maxItems: Int?

        public init(marker: String? = nil, maxItems: Int? = nil) {
            self.marker = marker
            self.maxItems = maxItems
        }

        public func encode(to encoder: Encoder) throws {
            let request = encoder.userInfo[.awsRequest]! as! RequestEncodingContainer
            _ = encoder.container(keyedBy: CodingKeys.self)
            request.encodeQuery(self.marker, key: "Marker")
            request.encodeQuery(self.maxItems, key: "MaxItems")
        }

        private enum CodingKeys: CodingKey {}
    }

    public struct ListDistributionsResult: AWSDecodableShape {
        /// The DistributionList type.
        public let distributionList: DistributionList

        public init(distributionList: DistributionList) {
            self.distributionList = distributionList
        }

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            self.distributionList = try container.decode(DistributionList.self)
        }

        private enum CodingKeys: CodingKey {}
    }

    public struct ListFieldLevelEncryptionConfigsRequest: AWSEncodableShape {
        /// Use this when paginating results to indicate where to begin in your list of
        /// 			configurations. The results include configurations in the list that occur after the
        /// 			marker. To get the next page of results, set the Marker to the value of the
        /// 				NextMarker from the current page's response (which is also the ID of
        /// 			the last configuration on that page).
        public let marker: String?
        /// The maximum number of field-level encryption configurations you want in the response
        /// 			body.
        public let maxItems: Int?

        public init(marker: String? = nil, maxItems: Int? = nil) {
            self.marker = marker
            self.maxItems = maxItems
        }

        public func encode(to encoder: Encoder) throws {
            let request = encoder.userInfo[.awsRequest]! as! RequestEncodingContainer
            _ = encoder.container(keyedBy: CodingKeys.self)
            request.encodeQuery(self.marker, key: "Marker")
            request.encodeQuery(self.maxItems, key: "MaxItems")
        }

        private enum CodingKeys: CodingKey {}
    }

    public struct ListFieldLevelEncryptionConfigsResult: AWSDecodableShape {
        /// Returns a list of all field-level encryption configurations that have been created in
        /// 			CloudFront for this account.
        public let fieldLevelEncryptionList: FieldLevelEncryptionList

        public init(fieldLevelEncryptionList: FieldLevelEncryptionList) {
            self.fieldLevelEncryptionList = fieldLevelEncryptionList
        }

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            self.fieldLevelEncryptionList = try container.decode(FieldLevelEncryptionList.self)
        }

        private enum CodingKeys: CodingKey {}
    }

    public struct ListFieldLevelEncryptionProfilesRequest: AWSEncodableShape {
        /// Use this when paginating results to indicate where to begin in your list of profiles.
        /// 			The results include profiles in the list that occur after the marker. To get the next
        /// 			page of results, set the Marker to the value of the NextMarker
        /// 			from the current page's response (which is also the ID of the last profile on that
        /// 			page).
        public let marker: String?
        /// The maximum number of field-level encryption profiles you want in the response body.
        ///
        public let maxItems: Int?

        public init(marker: String? = nil, maxItems: Int? = nil) {
            self.marker = marker
            self.maxItems = maxItems
        }

        public func encode(to encoder: Encoder) throws {
            let request = encoder.userInfo[.awsRequest]! as! RequestEncodingContainer
            _ = encoder.container(keyedBy: CodingKeys.self)
            request.encodeQuery(self.marker, key: "Marker")
            request.encodeQuery(self.maxItems, key: "MaxItems")
        }

        private enum CodingKeys: CodingKey {}
    }

    public struct ListFieldLevelEncryptionProfilesResult: AWSDecodableShape {
        /// Returns a list of the field-level encryption profiles that have been created in CloudFront
        /// 			for this account.
        public let fieldLevelEncryptionProfileList: FieldLevelEncryptionProfileList

        public init(fieldLevelEncryptionProfileList: FieldLevelEncryptionProfileList) {
            self.fieldLevelEncryptionProfileList = fieldLevelEncryptionProfileList
        }

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            self.fieldLevelEncryptionProfileList = try container.decode(FieldLevelEncryptionProfileList.self)
        }

        private enum CodingKeys: CodingKey {}
    }

    public struct ListFunctionsRequest: AWSEncodableShape {
        /// Use this field when paginating results to indicate where to begin in your list of
        /// 			functions. The response includes functions in the list that occur after the marker. To
        /// 			get the next page of the list, set this field's value to the value of
        /// 				NextMarker from the current page's response.
        public let marker: String?
        /// The maximum number of functions that you want in the response.
        public let maxItems: Int?
        /// An optional filter to return only the functions that are in the specified stage,
        /// 			either DEVELOPMENT or LIVE.
        public let stage: FunctionStage?

        public init(marker: String? = nil, maxItems: Int? = nil, stage: FunctionStage? = nil) {
            self.marker = marker
            self.maxItems = maxItems
            self.stage = stage
        }

        public func encode(to encoder: Encoder) throws {
            let request = encoder.userInfo[.awsRequest]! as! RequestEncodingContainer
            _ = encoder.container(keyedBy: CodingKeys.self)
            request.encodeQuery(self.marker, key: "Marker")
            request.encodeQuery(self.maxItems, key: "MaxItems")
            request.encodeQuery(self.stage, key: "Stage")
        }

        private enum CodingKeys: CodingKey {}
    }

    public struct ListFunctionsResult: AWSDecodableShape {
        /// A list of CloudFront functions.
        public let functionList: FunctionList

        public init(functionList: FunctionList) {
            self.functionList = functionList
        }

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            self.functionList = try container.decode(FunctionList.self)
        }

        private enum CodingKeys: CodingKey {}
    }

    public struct ListInvalidationsRequest: AWSEncodableShape {
        /// The distribution's ID.
        public let distributionId: String
        /// Use this parameter when paginating results to indicate where to begin in your list of
        /// 			invalidation batches. Because the results are returned in decreasing order from most
        /// 			recent to oldest, the most recent results are on the first page, the second page will
        /// 			contain earlier results, and so on. To get the next page of results, set
        /// 				Marker to the value of the NextMarker from the current
        /// 			page's response. This value is the same as the ID of the last invalidation batch on that
        /// 			page.
        public let marker: String?
        /// The maximum number of invalidation batches that you want in the response body.
        public let maxItems: Int?

        public init(distributionId: String, marker: String? = nil, maxItems: Int? = nil) {
            self.distributionId = distributionId
            self.marker = marker
            self.maxItems = maxItems
        }

        public func encode(to encoder: Encoder) throws {
            let request = encoder.userInfo[.awsRequest]! as! RequestEncodingContainer
            _ = encoder.container(keyedBy: CodingKeys.self)
            request.encodePath(self.distributionId, key: "DistributionId")
            request.encodeQuery(self.marker, key: "Marker")
            request.encodeQuery(self.maxItems, key: "MaxItems")
        }

        private enum CodingKeys: CodingKey {}
    }

    public struct ListInvalidationsResult: AWSDecodableShape {
        /// Information about invalidation batches.
        public let invalidationList: InvalidationList

        public init(invalidationList: InvalidationList) {
            self.invalidationList = invalidationList
        }

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            self.invalidationList = try container.decode(InvalidationList.self)
        }

        private enum CodingKeys: CodingKey {}
    }

    public struct ListKeyGroupsRequest: AWSEncodableShape {
        /// Use this field when paginating results to indicate where to begin in your list of key
        /// 			groups. The response includes key groups in the list that occur after the marker. To get
        /// 			the next page of the list, set this field's value to the value of
        /// 				NextMarker from the current page's response.
        public let marker: String?
        /// The maximum number of key groups that you want in the response.
        public let maxItems: Int?

        public init(marker: String? = nil, maxItems: Int? = nil) {
            self.marker = marker
            self.maxItems = maxItems
        }

        public func encode(to encoder: Encoder) throws {
            let request = encoder.userInfo[.awsRequest]! as! RequestEncodingContainer
            _ = encoder.container(keyedBy: CodingKeys.self)
            request.encodeQuery(self.marker, key: "Marker")
            request.encodeQuery(self.maxItems, key: "MaxItems")
        }

        private enum CodingKeys: CodingKey {}
    }

    public struct ListKeyGroupsResult: AWSDecodableShape {
        /// A list of key groups.
        public let keyGroupList: KeyGroupList

        public init(keyGroupList: KeyGroupList) {
            self.keyGroupList = keyGroupList
        }

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            self.keyGroupList = try container.decode(KeyGroupList.self)
        }

        private enum CodingKeys: CodingKey {}
    }

    public struct ListKeyValueStoresRequest: AWSEncodableShape {
        /// The marker associated with the Key Value Stores list.
        public let marker: String?
        /// The maximum number of items in the Key Value Stores list.
        public let maxItems: Int?
        /// The status of the request for the Key Value Stores list.
        public let status: String?

        public init(marker: String? = nil, maxItems: Int? = nil, status: String? = nil) {
            self.marker = marker
            self.maxItems = maxItems
            self.status = status
        }

        public func encode(to encoder: Encoder) throws {
            let request = encoder.userInfo[.awsRequest]! as! RequestEncodingContainer
            _ = encoder.container(keyedBy: CodingKeys.self)
            request.encodeQuery(self.marker, key: "Marker")
            request.encodeQuery(self.maxItems, key: "MaxItems")
            request.encodeQuery(self.status, key: "Status")
        }

        private enum CodingKeys: CodingKey {}
    }

    public struct ListKeyValueStoresResult: AWSDecodableShape {
        /// The resulting Key Value Stores list.
        public let keyValueStoreList: KeyValueStoreList

        public init(keyValueStoreList: KeyValueStoreList) {
            self.keyValueStoreList = keyValueStoreList
        }

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            self.keyValueStoreList = try container.decode(KeyValueStoreList.self)
        }

        private enum CodingKeys: CodingKey {}
    }

    public struct ListOriginAccessControlsRequest: AWSEncodableShape {
        /// Use this field when paginating results to indicate where to begin in your list of
        /// 			origin access controls. The response includes the items in the list that occur after the
        /// 			marker. To get the next page of the list, set this field's value to the value of
        /// 				NextMarker from the current page's response.
        public let marker: String?
        /// The maximum number of origin access controls that you want in the response.
        public let maxItems: Int?

        public init(marker: String? = nil, maxItems: Int? = nil) {
            self.marker = marker
            self.maxItems = maxItems
        }

        public func encode(to encoder: Encoder) throws {
            let request = encoder.userInfo[.awsRequest]! as! RequestEncodingContainer
            _ = encoder.container(keyedBy: CodingKeys.self)
            request.encodeQuery(self.marker, key: "Marker")
            request.encodeQuery(self.maxItems, key: "MaxItems")
        }

        private enum CodingKeys: CodingKey {}
    }

    public struct ListOriginAccessControlsResult: AWSDecodableShape {
        /// A list of origin access controls.
        public let originAccessControlList: OriginAccessControlList

        public init(originAccessControlList: OriginAccessControlList) {
            self.originAccessControlList = originAccessControlList
        }

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            self.originAccessControlList = try container.decode(OriginAccessControlList.self)
        }

        private enum CodingKeys: CodingKey {}
    }

    public struct ListOriginRequestPoliciesRequest: AWSEncodableShape {
        /// Use this field when paginating results to indicate where to begin in your list of
        /// 			origin request policies. The response includes origin request policies in the list that
        /// 			occur after the marker. To get the next page of the list, set this field's value to the
        /// 			value of NextMarker from the current page's response.
        public let marker: String?
        /// The maximum number of origin request policies that you want in the response.
        public let maxItems: Int?
        /// A filter to return only the specified kinds of origin request policies. Valid values
        /// 			are:    managed – Returns only the managed policies created by
        /// 					Amazon Web Services.    custom – Returns only the custom policies created in your
        /// 					Amazon Web Services account.
        public let type: OriginRequestPolicyType?

        public init(marker: String? = nil, maxItems: Int? = nil, type: OriginRequestPolicyType? = nil) {
            self.marker = marker
            self.maxItems = maxItems
            self.type = type
        }

        public func encode(to encoder: Encoder) throws {
            let request = encoder.userInfo[.awsRequest]! as! RequestEncodingContainer
            _ = encoder.container(keyedBy: CodingKeys.self)
            request.encodeQuery(self.marker, key: "Marker")
            request.encodeQuery(self.maxItems, key: "MaxItems")
            request.encodeQuery(self.type, key: "Type")
        }

        private enum CodingKeys: CodingKey {}
    }

    public struct ListOriginRequestPoliciesResult: AWSDecodableShape {
        /// A list of origin request policies.
        public let originRequestPolicyList: OriginRequestPolicyList

        public init(originRequestPolicyList: OriginRequestPolicyList) {
            self.originRequestPolicyList = originRequestPolicyList
        }

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            self.originRequestPolicyList = try container.decode(OriginRequestPolicyList.self)
        }

        private enum CodingKeys: CodingKey {}
    }

    public struct ListPublicKeysRequest: AWSEncodableShape {
        /// Use this when paginating results to indicate where to begin in your list of public
        /// 			keys. The results include public keys in the list that occur after the marker. To get
        /// 			the next page of results, set the Marker to the value of the
        /// 				NextMarker from the current page's response (which is also the ID of
        /// 			the last public key on that page).
        public let marker: String?
        /// The maximum number of public keys you want in the response body.
        public let maxItems: Int?

        public init(marker: String? = nil, maxItems: Int? = nil) {
            self.marker = marker
            self.maxItems = maxItems
        }

        public func encode(to encoder: Encoder) throws {
            let request = encoder.userInfo[.awsRequest]! as! RequestEncodingContainer
            _ = encoder.container(keyedBy: CodingKeys.self)
            request.encodeQuery(self.marker, key: "Marker")
            request.encodeQuery(self.maxItems, key: "MaxItems")
        }

        private enum CodingKeys: CodingKey {}
    }

    public struct ListPublicKeysResult: AWSDecodableShape {
        /// Returns a list of all public keys that have been added to CloudFront for this
        /// 			account.
        public let publicKeyList: PublicKeyList

        public init(publicKeyList: PublicKeyList) {
            self.publicKeyList = publicKeyList
        }

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            self.publicKeyList = try container.decode(PublicKeyList.self)
        }

        private enum CodingKeys: CodingKey {}
    }

    public struct ListRealtimeLogConfigsRequest: AWSEncodableShape {
        /// Use this field when paginating results to indicate where to begin in your list of
        /// 			real-time log configurations. The response includes real-time log configurations in the
        /// 			list that occur after the marker. To get the next page of the list, set this field's
        /// 			value to the value of NextMarker from the current page's response.
        public let marker: String?
        /// The maximum number of real-time log configurations that you want in the
        /// 			response.
        public let maxItems: Int?

        public init(marker: String? = nil, maxItems: Int? = nil) {
            self.marker = marker
            self.maxItems = maxItems
        }

        public func encode(to encoder: Encoder) throws {
            let request = encoder.userInfo[.awsRequest]! as! RequestEncodingContainer
            _ = encoder.container(keyedBy: CodingKeys.self)
            request.encodeQuery(self.marker, key: "Marker")
            request.encodeQuery(self.maxItems, key: "MaxItems")
        }

        private enum CodingKeys: CodingKey {}
    }

    public struct ListRealtimeLogConfigsResult: AWSDecodableShape {
        /// A list of real-time log configurations.
        public let realtimeLogConfigs: RealtimeLogConfigs

        public init(realtimeLogConfigs: RealtimeLogConfigs) {
            self.realtimeLogConfigs = realtimeLogConfigs
        }

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            self.realtimeLogConfigs = try container.decode(RealtimeLogConfigs.self)
        }

        private enum CodingKeys: CodingKey {}
    }

    public struct ListResponseHeadersPoliciesRequest: AWSEncodableShape {
        /// Use this field when paginating results to indicate where to begin in your list of
        /// 			response headers policies. The response includes response headers policies in the list
        /// 			that occur after the marker. To get the next page of the list, set this field's value to
        /// 			the value of NextMarker from the current page's response.
        public let marker: String?
        /// The maximum number of response headers policies that you want to get in the
        /// 			response.
        public let maxItems: Int?
        /// A filter to get only the specified kind of response headers policies. Valid values
        /// 			are:    managed – Gets only the managed policies created by Amazon Web Services.    custom – Gets only the custom policies created in your
        /// 					Amazon Web Services account.
        public let type: ResponseHeadersPolicyType?

        public init(marker: String? = nil, maxItems: Int? = nil, type: ResponseHeadersPolicyType? = nil) {
            self.marker = marker
            self.maxItems = maxItems
            self.type = type
        }

        public func encode(to encoder: Encoder) throws {
            let request = encoder.userInfo[.awsRequest]! as! RequestEncodingContainer
            _ = encoder.container(keyedBy: CodingKeys.self)
            request.encodeQuery(self.marker, key: "Marker")
            request.encodeQuery(self.maxItems, key: "MaxItems")
            request.encodeQuery(self.type, key: "Type")
        }

        private enum CodingKeys: CodingKey {}
    }

    public struct ListResponseHeadersPoliciesResult: AWSDecodableShape {
        /// A list of response headers policies.
        public let responseHeadersPolicyList: ResponseHeadersPolicyList

        public init(responseHeadersPolicyList: ResponseHeadersPolicyList) {
            self.responseHeadersPolicyList = responseHeadersPolicyList
        }

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            self.responseHeadersPolicyList = try container.decode(ResponseHeadersPolicyList.self)
        }

        private enum CodingKeys: CodingKey {}
    }

    public struct ListStreamingDistributionsRequest: AWSEncodableShape {
        /// The value that you provided for the Marker request parameter.
        public let marker: String?
        /// The value that you provided for the MaxItems request parameter.
        public let maxItems: Int?

        public init(marker: String? = nil, maxItems: Int? = nil) {
            self.marker = marker
            self.maxItems = maxItems
        }

        public func encode(to encoder: Encoder) throws {
            let request = encoder.userInfo[.awsRequest]! as! RequestEncodingContainer
            _ = encoder.container(keyedBy: CodingKeys.self)
            request.encodeQuery(self.marker, key: "Marker")
            request.encodeQuery(self.maxItems, key: "MaxItems")
        }

        private enum CodingKeys: CodingKey {}
    }

    public struct ListStreamingDistributionsResult: AWSDecodableShape {
        /// The StreamingDistributionList type.
        public let streamingDistributionList: StreamingDistributionList

        public init(streamingDistributionList: StreamingDistributionList) {
            self.streamingDistributionList = streamingDistributionList
        }

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            self.streamingDistributionList = try container.decode(StreamingDistributionList.self)
        }

        private enum CodingKeys: CodingKey {}
    }

    public struct ListTagsForResourceRequest: AWSEncodableShape {
        /// An ARN of a CloudFront resource.
        public let resource: String

        public init(resource: String) {
            self.resource = resource
        }

        public func encode(to encoder: Encoder) throws {
            let request = encoder.userInfo[.awsRequest]! as! RequestEncodingContainer
            _ = encoder.container(keyedBy: CodingKeys.self)
            request.encodeQuery(self.resource, key: "Resource")
        }

        public func validate(name: String) throws {
            try self.validate(self.resource, name: "resource", parent: name, pattern: "^arn:aws(-cn)?:cloudfront::[0-9]+:")
        }

        private enum CodingKeys: CodingKey {}
    }

    public struct ListTagsForResourceResult: AWSDecodableShape {
        /// A complex type that contains zero or more Tag elements.
        public let tags: Tags

        public init(tags: Tags) {
            self.tags = tags
        }

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            self.tags = try container.decode(Tags.self)
        }

        private enum CodingKeys: CodingKey {}
    }

    public struct LoggingConfig: AWSEncodableShape & AWSDecodableShape {
        /// The Amazon S3 bucket to store the access logs in, for example,
        /// 				myawslogbucket.s3.amazonaws.com.
        public let bucket: String
        /// Specifies whether you want CloudFront to save access logs to an Amazon S3 bucket. If you don't
        /// 			want to enable logging when you create a distribution or if you want to disable logging
        /// 			for an existing distribution, specify false for Enabled, and
        /// 			specify empty Bucket and Prefix elements. If you specify
        /// 				false for Enabled but you specify values for
        /// 				Bucket, prefix, and IncludeCookies, the
        /// 			values are automatically deleted.
        public let enabled: Bool
        /// Specifies whether you want CloudFront to include cookies in access logs, specify
        /// 				true for IncludeCookies. If you choose to include cookies
        /// 			in logs, CloudFront logs all cookies regardless of how you configure the cache behaviors for
        /// 			this distribution. If you don't want to include cookies when you create a distribution
        /// 			or if you want to disable include cookies for an existing distribution, specify
        /// 				false for IncludeCookies.
        public let includeCookies: Bool
        /// An optional string that you want CloudFront to prefix to the access log
        /// 				filenames for this distribution, for example, myprefix/.
        /// 			If you want to enable logging, but you don't want to specify a prefix, you still must
        /// 			include an empty Prefix element in the Logging element.
        public let prefix: String

        public init(bucket: String, enabled: Bool, includeCookies: Bool, prefix: String) {
            self.bucket = bucket
            self.enabled = enabled
            self.includeCookies = includeCookies
            self.prefix = prefix
        }

        private enum CodingKeys: String, CodingKey {
            case bucket = "Bucket"
            case enabled = "Enabled"
            case includeCookies = "IncludeCookies"
            case prefix = "Prefix"
        }
    }

    public struct MonitoringSubscription: AWSEncodableShape & AWSDecodableShape {
        /// A subscription configuration for additional CloudWatch metrics.
        public let realtimeMetricsSubscriptionConfig: RealtimeMetricsSubscriptionConfig?

        public init(realtimeMetricsSubscriptionConfig: RealtimeMetricsSubscriptionConfig? = nil) {
            self.realtimeMetricsSubscriptionConfig = realtimeMetricsSubscriptionConfig
        }

        private enum CodingKeys: String, CodingKey {
            case realtimeMetricsSubscriptionConfig = "RealtimeMetricsSubscriptionConfig"
        }
    }

    public struct Origin: AWSEncodableShape & AWSDecodableShape {
        /// The number of times that CloudFront attempts to connect to the origin. The minimum number is
        /// 			1, the maximum is 3, and the default (if you don't specify otherwise) is 3. For a custom origin (including an Amazon S3 bucket that's configured with static website
        /// 			hosting), this value also specifies the number of times that CloudFront attempts to get a
        /// 			response from the origin, in the case of an Origin Response Timeout. For more information, see Origin Connection Attempts in the
        /// 				Amazon CloudFront Developer Guide.
        public let connectionAttempts: Int?
        /// The number of seconds that CloudFront waits when trying to establish a connection to the
        /// 			origin. The minimum timeout is 1 second, the maximum is 10 seconds, and the default (if
        /// 			you don't specify otherwise) is 10 seconds. For more information, see Origin Connection Timeout in the
        /// 				Amazon CloudFront Developer Guide.
        public let connectionTimeout: Int?
        /// A list of HTTP header names and values that CloudFront adds to the requests that it sends to
        /// 			the origin. For more information, see Adding Custom Headers to Origin Requests in the
        /// 				Amazon CloudFront Developer Guide.
        public let customHeaders: CustomHeaders?
        /// Use this type to specify an origin that is not an Amazon S3 bucket, with one exception. If
        /// 			the Amazon S3 bucket is configured with static website hosting, use this type. If the Amazon S3
        /// 			bucket is not configured with static website hosting, use the
        /// 				S3OriginConfig type instead.
        public let customOriginConfig: CustomOriginConfig?
        /// The domain name for the origin. For more information, see Origin Domain Name in the Amazon CloudFront Developer Guide.
        public let domainName: String
        /// A unique identifier for the origin. This value must be unique within the
        /// 			distribution. Use this value to specify the TargetOriginId in a
        /// 				CacheBehavior or DefaultCacheBehavior.
        public let id: String
        /// The unique identifier of an origin access control for this origin. For more information, see Restricting access to an Amazon S3 origin in the
        /// 				Amazon CloudFront Developer Guide.
        public let originAccessControlId: String?
        /// An optional path that CloudFront appends to the origin domain name when CloudFront requests
        /// 			content from the origin. For more information, see Origin Path in the
        /// 			Amazon CloudFront Developer Guide.
        public let originPath: String?
        /// CloudFront Origin Shield. Using Origin Shield can help reduce the load on your
        /// 			origin. For more information, see Using Origin Shield in the Amazon CloudFront Developer Guide.
        public let originShield: OriginShield?
        /// Use this type to specify an origin that is an Amazon S3 bucket that is not configured with
        /// 			static website hosting. To specify any other type of origin, including an Amazon S3 bucket
        /// 			that is configured with static website hosting, use the CustomOriginConfig
        /// 			type instead.
        public let s3OriginConfig: S3OriginConfig?

        public init(connectionAttempts: Int? = nil, connectionTimeout: Int? = nil, customHeaders: CustomHeaders? = nil, customOriginConfig: CustomOriginConfig? = nil, domainName: String, id: String, originAccessControlId: String? = nil, originPath: String? = nil, originShield: OriginShield? = nil, s3OriginConfig: S3OriginConfig? = nil) {
            self.connectionAttempts = connectionAttempts
            self.connectionTimeout = connectionTimeout
            self.customHeaders = customHeaders
            self.customOriginConfig = customOriginConfig
            self.domainName = domainName
            self.id = id
            self.originAccessControlId = originAccessControlId
            self.originPath = originPath
            self.originShield = originShield
            self.s3OriginConfig = s3OriginConfig
        }

        public func validate(name: String) throws {
            try self.originShield?.validate(name: "\(name).originShield")
        }

        private enum CodingKeys: String, CodingKey {
            case connectionAttempts = "ConnectionAttempts"
            case connectionTimeout = "ConnectionTimeout"
            case customHeaders = "CustomHeaders"
            case customOriginConfig = "CustomOriginConfig"
            case domainName = "DomainName"
            case id = "Id"
            case originAccessControlId = "OriginAccessControlId"
            case originPath = "OriginPath"
            case originShield = "OriginShield"
            case s3OriginConfig = "S3OriginConfig"
        }
    }

    public struct OriginAccessControl: AWSDecodableShape {
        /// The unique identifier of the origin access control.
        public let id: String
        /// The origin access control.
        public let originAccessControlConfig: OriginAccessControlConfig?

        public init(id: String, originAccessControlConfig: OriginAccessControlConfig? = nil) {
            self.id = id
            self.originAccessControlConfig = originAccessControlConfig
        }

        private enum CodingKeys: String, CodingKey {
            case id = "Id"
            case originAccessControlConfig = "OriginAccessControlConfig"
        }
    }

    public struct OriginAccessControlConfig: AWSEncodableShape & AWSDecodableShape {
        /// A description of the origin access control.
        public let description: String?
        /// A name to identify the origin access control.
        public let name: String
        /// The type of origin that this origin access control is for.
        public let originAccessControlOriginType: OriginAccessControlOriginTypes
        /// Specifies which requests CloudFront signs (adds authentication information to). Specify
        /// 				always for the most common use case. For more information, see origin access control advanced settings in the
        /// 				Amazon CloudFront Developer Guide. This field can have one of the following values:    always – CloudFront signs all origin requests, overwriting the
        /// 						Authorization header from the viewer request if one
        /// 					exists.    never – CloudFront doesn't sign any origin requests. This value turns
        /// 					off origin access control for all origins in all distributions that use this
        /// 					origin access control.    no-override – If the viewer request doesn't contain the
        /// 						Authorization header, then CloudFront signs the origin request. If
        /// 					the viewer request contains the Authorization header, then CloudFront
        /// 					doesn't sign the origin request and instead passes along the
        /// 						Authorization header from the viewer request. WARNING: To pass along the Authorization header
        /// 						from the viewer request, you must add the
        /// 							Authorization header to a cache policy for all cache behaviors that
        /// 						use origins associated with this origin access control.
        public let signingBehavior: OriginAccessControlSigningBehaviors
        /// The signing protocol of the origin access control, which determines how CloudFront signs
        /// 			(authenticates) requests. The only valid value is sigv4.
        public let signingProtocol: OriginAccessControlSigningProtocols

        public init(description: String? = nil, name: String, originAccessControlOriginType: OriginAccessControlOriginTypes, signingBehavior: OriginAccessControlSigningBehaviors, signingProtocol: OriginAccessControlSigningProtocols) {
            self.description = description
            self.name = name
            self.originAccessControlOriginType = originAccessControlOriginType
            self.signingBehavior = signingBehavior
            self.signingProtocol = signingProtocol
        }

        private enum CodingKeys: String, CodingKey {
            case description = "Description"
            case name = "Name"
            case originAccessControlOriginType = "OriginAccessControlOriginType"
            case signingBehavior = "SigningBehavior"
            case signingProtocol = "SigningProtocol"
        }
    }

    public struct OriginAccessControlList: AWSDecodableShape {
        public struct _ItemsEncoding: ArrayCoderProperties { public static let member = "OriginAccessControlSummary" }

        /// If there are more items in the list than are in this response, this value is
        /// 				true.
        public let isTruncated: Bool
        /// Contains the origin access controls in the list.
        @OptionalCustomCoding<ArrayCoder<_ItemsEncoding, OriginAccessControlSummary>>
        public var items: [OriginAccessControlSummary]?
        /// The value of the Marker field that was provided in the request.
        public let marker: String
        /// The maximum number of origin access controls requested.
        public let maxItems: Int
        /// If there are more items in the list than are in this response, this element is
        /// 			present. It contains the value to use in the Marker field of another
        /// 			request to continue listing origin access controls.
        public let nextMarker: String?
        /// The number of origin access controls returned in the response.
        public let quantity: Int

        public init(isTruncated: Bool, items: [OriginAccessControlSummary]? = nil, marker: String, maxItems: Int, nextMarker: String? = nil, quantity: Int) {
            self.isTruncated = isTruncated
            self.items = items
            self.marker = marker
            self.maxItems = maxItems
            self.nextMarker = nextMarker
            self.quantity = quantity
        }

        private enum CodingKeys: String, CodingKey {
            case isTruncated = "IsTruncated"
            case items = "Items"
            case marker = "Marker"
            case maxItems = "MaxItems"
            case nextMarker = "NextMarker"
            case quantity = "Quantity"
        }
    }

    public struct OriginAccessControlSummary: AWSDecodableShape {
        /// A description of the origin access control.
        public let description: String
        /// The unique identifier of the origin access control.
        public let id: String
        /// A unique name that identifies the origin access control.
        public let name: String
        /// The type of origin that this origin access control is for.
        public let originAccessControlOriginType: OriginAccessControlOriginTypes
        /// A value that specifies which requests CloudFront signs (adds authentication information to).
        /// 			This field can have one of the following values:    never – CloudFront doesn't sign any origin requests.    always – CloudFront signs all origin requests, overwriting the
        /// 						Authorization header from the viewer request if
        /// 					necessary.    no-override – If the viewer request doesn't contain the
        /// 						Authorization header, CloudFront signs the origin request. If the
        /// 					viewer request contains the Authorization header, CloudFront doesn't sign
        /// 					the origin request, but instead passes along the Authorization
        /// 					header that it received in the viewer request.
        public let signingBehavior: OriginAccessControlSigningBehaviors
        /// The signing protocol of the origin access control. The signing protocol determines how
        /// 			CloudFront signs (authenticates) requests. The only valid value is sigv4.
        public let signingProtocol: OriginAccessControlSigningProtocols

        public init(description: String, id: String, name: String, originAccessControlOriginType: OriginAccessControlOriginTypes, signingBehavior: OriginAccessControlSigningBehaviors, signingProtocol: OriginAccessControlSigningProtocols) {
            self.description = description
            self.id = id
            self.name = name
            self.originAccessControlOriginType = originAccessControlOriginType
            self.signingBehavior = signingBehavior
            self.signingProtocol = signingProtocol
        }

        private enum CodingKeys: String, CodingKey {
            case description = "Description"
            case id = "Id"
            case name = "Name"
            case originAccessControlOriginType = "OriginAccessControlOriginType"
            case signingBehavior = "SigningBehavior"
            case signingProtocol = "SigningProtocol"
        }
    }

    public struct OriginCustomHeader: AWSEncodableShape & AWSDecodableShape {
        /// The name of a header that you want CloudFront to send to your origin. For more information,
        /// 			see Adding
        /// 				Custom Headers to Origin Requests in the
        /// 				Amazon CloudFront Developer Guide.
        public let headerName: String
        /// The value for the header that you specified in the HeaderName
        /// 			field.
        public let headerValue: String

        public init(headerName: String, headerValue: String) {
            self.headerName = headerName
            self.headerValue = headerValue
        }

        private enum CodingKeys: String, CodingKey {
            case headerName = "HeaderName"
            case headerValue = "HeaderValue"
        }
    }

    public struct OriginGroup: AWSEncodableShape & AWSDecodableShape {
        /// A complex type that contains information about the failover criteria for an origin
        /// 			group.
        public let failoverCriteria: OriginGroupFailoverCriteria
        /// The origin group's ID.
        public let id: String
        /// A complex type that contains information about the origins in an origin group.
        public let members: OriginGroupMembers

        public init(failoverCriteria: OriginGroupFailoverCriteria, id: String, members: OriginGroupMembers) {
            self.failoverCriteria = failoverCriteria
            self.id = id
            self.members = members
        }

        public func validate(name: String) throws {
            try self.failoverCriteria.validate(name: "\(name).failoverCriteria")
            try self.members.validate(name: "\(name).members")
        }

        private enum CodingKeys: String, CodingKey {
            case failoverCriteria = "FailoverCriteria"
            case id = "Id"
            case members = "Members"
        }
    }

    public struct OriginGroupFailoverCriteria: AWSEncodableShape & AWSDecodableShape {
        /// The status codes that, when returned from the primary origin, will trigger CloudFront
        /// 			to failover to the second origin.
        public let statusCodes: StatusCodes

        public init(statusCodes: StatusCodes) {
            self.statusCodes = statusCodes
        }

        public func validate(name: String) throws {
            try self.statusCodes.validate(name: "\(name).statusCodes")
        }

        private enum CodingKeys: String, CodingKey {
            case statusCodes = "StatusCodes"
        }
    }

    public struct OriginGroupMember: AWSEncodableShape & AWSDecodableShape {
        /// The ID for an origin in an origin group.
        public let originId: String

        public init(originId: String) {
            self.originId = originId
        }

        private enum CodingKeys: String, CodingKey {
            case originId = "OriginId"
        }
    }

    public struct OriginGroupMembers: AWSEncodableShape & AWSDecodableShape {
        public struct _ItemsEncoding: ArrayCoderProperties { public static let member = "OriginGroupMember" }

        /// Items (origins) in an origin group.
        @CustomCoding<ArrayCoder<_ItemsEncoding, OriginGroupMember>>
        public var items: [OriginGroupMember]
        /// The number of origins in an origin group.
        public let quantity: Int

        public init(items: [OriginGroupMember], quantity: Int) {
            self.items = items
            self.quantity = quantity
        }

        public func validate(name: String) throws {
            try self.validate(self.items, name: "items", parent: name, max: 2)
            try self.validate(self.items, name: "items", parent: name, min: 2)
        }

        private enum CodingKeys: String, CodingKey {
            case items = "Items"
            case quantity = "Quantity"
        }
    }

    public struct OriginGroups: AWSEncodableShape & AWSDecodableShape {
        public struct _ItemsEncoding: ArrayCoderProperties { public static let member = "OriginGroup" }

        /// The items (origin groups) in a distribution.
        @OptionalCustomCoding<ArrayCoder<_ItemsEncoding, OriginGroup>>
        public var items: [OriginGroup]?
        /// The number of origin groups.
        public let quantity: Int

        public init(items: [OriginGroup]? = nil, quantity: Int) {
            self.items = items
            self.quantity = quantity
        }

        public func validate(name: String) throws {
            try self.items?.forEach {
                try $0.validate(name: "\(name).items[]")
            }
        }

        private enum CodingKeys: String, CodingKey {
            case items = "Items"
            case quantity = "Quantity"
        }
    }

    public struct OriginRequestPolicy: AWSDecodableShape {
        /// The unique identifier for the origin request policy.
        public let id: String
        /// The date and time when the origin request policy was last modified.
        public let lastModifiedTime: Date
        /// The origin request policy configuration.
        public let originRequestPolicyConfig: OriginRequestPolicyConfig

        public init(id: String, lastModifiedTime: Date, originRequestPolicyConfig: OriginRequestPolicyConfig) {
            self.id = id
            self.lastModifiedTime = lastModifiedTime
            self.originRequestPolicyConfig = originRequestPolicyConfig
        }

        private enum CodingKeys: String, CodingKey {
            case id = "Id"
            case lastModifiedTime = "LastModifiedTime"
            case originRequestPolicyConfig = "OriginRequestPolicyConfig"
        }
    }

    public struct OriginRequestPolicyConfig: AWSEncodableShape & AWSDecodableShape {
        /// A comment to describe the origin request policy. The comment cannot be longer than 128
        /// 			characters.
        public let comment: String?
        /// The cookies from viewer requests to include in origin requests.
        public let cookiesConfig: OriginRequestPolicyCookiesConfig
        /// The HTTP headers to include in origin requests. These can include headers from viewer
        /// 			requests and additional headers added by CloudFront.
        public let headersConfig: OriginRequestPolicyHeadersConfig
        /// A unique name to identify the origin request policy.
        public let name: String
        /// The URL query strings from viewer requests to include in origin requests.
        public let queryStringsConfig: OriginRequestPolicyQueryStringsConfig

        public init(comment: String? = nil, cookiesConfig: OriginRequestPolicyCookiesConfig, headersConfig: OriginRequestPolicyHeadersConfig, name: String, queryStringsConfig: OriginRequestPolicyQueryStringsConfig) {
            self.comment = comment
            self.cookiesConfig = cookiesConfig
            self.headersConfig = headersConfig
            self.name = name
            self.queryStringsConfig = queryStringsConfig
        }

        private enum CodingKeys: String, CodingKey {
            case comment = "Comment"
            case cookiesConfig = "CookiesConfig"
            case headersConfig = "HeadersConfig"
            case name = "Name"
            case queryStringsConfig = "QueryStringsConfig"
        }
    }

    public struct OriginRequestPolicyCookiesConfig: AWSEncodableShape & AWSDecodableShape {
        /// Determines whether cookies in viewer requests are included in requests that CloudFront sends
        /// 			to the origin. Valid values are:    none – No cookies in viewer requests are included in requests that CloudFront sends
        /// 					to the origin. Even when this field is set to none, any cookies
        /// 					that are listed in a CachePolicy are included
        /// 					in origin requests.    whitelist – Only the cookies in viewer requests that are listed in the
        /// 					CookieNames type are included in requests that CloudFront sends to the
        /// 					origin.    all – All cookies in viewer requests are included in requests
        /// 					that CloudFront sends to the origin.    allExcept – All cookies in viewer requests are included in
        /// 					requests that CloudFront sends to the origin,  except for those listed in the CookieNames
        /// 					type, which are not included.
        public let cookieBehavior: OriginRequestPolicyCookieBehavior
        public let cookies: CookieNames?

        public init(cookieBehavior: OriginRequestPolicyCookieBehavior, cookies: CookieNames? = nil) {
            self.cookieBehavior = cookieBehavior
            self.cookies = cookies
        }

        private enum CodingKeys: String, CodingKey {
            case cookieBehavior = "CookieBehavior"
            case cookies = "Cookies"
        }
    }

    public struct OriginRequestPolicyHeadersConfig: AWSEncodableShape & AWSDecodableShape {
        /// Determines whether any HTTP headers are included in requests that CloudFront sends to the
        /// 			origin. Valid values are:    none – No HTTP headers in viewer requests are included in requests that CloudFront
        /// 					sends to the origin. Even when this field is set to none, any
        /// 					headers that are listed in a CachePolicy are
        /// 					included in origin requests.    whitelist – Only the HTTP headers that are listed in the Headers
        /// 					type are included in requests that CloudFront sends to the origin.    allViewer – All HTTP headers in viewer requests are included in
        /// 					requests that CloudFront sends to the origin.    allViewerAndWhitelistCloudFront – All HTTP headers in viewer
        /// 					requests and the additional CloudFront headers that are listed in the
        /// 						Headers type are included in requests that CloudFront sends to the
        /// 					origin. The additional headers are added by CloudFront.    allExcept – All HTTP headers in viewer requests are included in
        /// 					requests that CloudFront sends to the origin,  except for those listed in the Headers type,
        /// 					which are not included.
        public let headerBehavior: OriginRequestPolicyHeaderBehavior
        public let headers: Headers?

        public init(headerBehavior: OriginRequestPolicyHeaderBehavior, headers: Headers? = nil) {
            self.headerBehavior = headerBehavior
            self.headers = headers
        }

        private enum CodingKeys: String, CodingKey {
            case headerBehavior = "HeaderBehavior"
            case headers = "Headers"
        }
    }

    public struct OriginRequestPolicyList: AWSDecodableShape {
        public struct _ItemsEncoding: ArrayCoderProperties { public static let member = "OriginRequestPolicySummary" }

        /// Contains the origin request policies in the list.
        @OptionalCustomCoding<ArrayCoder<_ItemsEncoding, OriginRequestPolicySummary>>
        public var items: [OriginRequestPolicySummary]?
        /// The maximum number of origin request policies requested.
        public let maxItems: Int
        /// If there are more items in the list than are in this response, this element is
        /// 			present. It contains the value that you should use in the Marker field of a
        /// 			subsequent request to continue listing origin request policies where you left
        /// 			off.
        public let nextMarker: String?
        /// The total number of origin request policies returned in the response.
        public let quantity: Int

        public init(items: [OriginRequestPolicySummary]? = nil, maxItems: Int, nextMarker: String? = nil, quantity: Int) {
            self.items = items
            self.maxItems = maxItems
            self.nextMarker = nextMarker
            self.quantity = quantity
        }

        private enum CodingKeys: String, CodingKey {
            case items = "Items"
            case maxItems = "MaxItems"
            case nextMarker = "NextMarker"
            case quantity = "Quantity"
        }
    }

    public struct OriginRequestPolicyQueryStringsConfig: AWSEncodableShape & AWSDecodableShape {
        /// Determines whether any URL query strings in viewer requests are included in requests
        /// 			that CloudFront sends to the origin. Valid values are:    none – No query strings in viewer requests are included in requests that CloudFront
        /// 					sends to the origin. Even when this field is set to none, any query
        /// 					strings that are listed in a CachePolicy are
        /// 					included in origin requests.    whitelist – Only the query strings in viewer requests that are listed in the
        /// 					QueryStringNames type are included in requests that CloudFront sends to
        /// 					the origin.    all – All query strings in viewer requests are included in requests that CloudFront
        /// 					sends to the origin.    allExcept – All query strings in viewer requests are included in
        /// 					requests that CloudFront sends to the origin,  except for those listed in the
        /// 					QueryStringNames type, which are not included.
        public let queryStringBehavior: OriginRequestPolicyQueryStringBehavior
        /// Contains the specific query strings in viewer requests that either  are or  are
        /// 			not included in requests that CloudFront sends to the origin. The
        /// 			behavior depends on whether the QueryStringBehavior field in the
        /// 			OriginRequestPolicyQueryStringsConfig type is set to whitelist
        /// 			(the listed query strings  are
        /// 			included) or allExcept (the listed query strings  are not included, but all other query strings
        /// 			are).
        public let queryStrings: QueryStringNames?

        public init(queryStringBehavior: OriginRequestPolicyQueryStringBehavior, queryStrings: QueryStringNames? = nil) {
            self.queryStringBehavior = queryStringBehavior
            self.queryStrings = queryStrings
        }

        private enum CodingKeys: String, CodingKey {
            case queryStringBehavior = "QueryStringBehavior"
            case queryStrings = "QueryStrings"
        }
    }

    public struct OriginRequestPolicySummary: AWSDecodableShape {
        /// The origin request policy.
        public let originRequestPolicy: OriginRequestPolicy
        /// The type of origin request policy, either managed (created by Amazon Web Services) or
        /// 				custom (created in this Amazon Web Services account).
        public let type: OriginRequestPolicyType

        public init(originRequestPolicy: OriginRequestPolicy, type: OriginRequestPolicyType) {
            self.originRequestPolicy = originRequestPolicy
            self.type = type
        }

        private enum CodingKeys: String, CodingKey {
            case originRequestPolicy = "OriginRequestPolicy"
            case type = "Type"
        }
    }

    public struct OriginShield: AWSEncodableShape & AWSDecodableShape {
        /// A flag that specifies whether Origin Shield is enabled. When it's enabled, CloudFront routes all requests through Origin Shield, which can help
        /// 			protect your origin. When it's disabled, CloudFront might send requests directly to your
        /// 			origin from multiple edge locations or regional edge caches.
        public let enabled: Bool
        /// The Amazon Web Services Region for Origin Shield. Specify the Amazon Web Services Region that has the lowest latency to your origin. To specify a
        /// 			region, use the region code, not the region name. For example, specify the US East
        /// 			(Ohio) region as us-east-2. When you enable CloudFront Origin Shield, you must specify the Amazon Web Services Region for Origin
        /// 			Shield. For the list of Amazon Web Services Regions that you can specify, and for help choosing the
        /// 			best Region for your origin, see Choosing the Amazon Web Services Region for Origin Shield in the
        /// 				Amazon CloudFront Developer Guide.
        public let originShieldRegion: String?

        public init(enabled: Bool, originShieldRegion: String? = nil) {
            self.enabled = enabled
            self.originShieldRegion = originShieldRegion
        }

        public func validate(name: String) throws {
            try self.validate(self.originShieldRegion, name: "originShieldRegion", parent: name, max: 32)
            try self.validate(self.originShieldRegion, name: "originShieldRegion", parent: name, min: 1)
            try self.validate(self.originShieldRegion, name: "originShieldRegion", parent: name, pattern: "^[a-z]{2}-[a-z]+-\\d$")
        }

        private enum CodingKeys: String, CodingKey {
            case enabled = "Enabled"
            case originShieldRegion = "OriginShieldRegion"
        }
    }

    public struct OriginSslProtocols: AWSEncodableShape & AWSDecodableShape {
        public struct _ItemsEncoding: ArrayCoderProperties { public static let member = "SslProtocol" }

        /// A list that contains allowed SSL/TLS protocols for this distribution.
        @CustomCoding<ArrayCoder<_ItemsEncoding, SslProtocol>>
        public var items: [SslProtocol]
        /// The number of SSL/TLS protocols that you want to allow CloudFront to use when establishing
        /// 			an HTTPS connection with this origin.
        public let quantity: Int

        public init(items: [SslProtocol], quantity: Int) {
            self.items = items
            self.quantity = quantity
        }

        private enum CodingKeys: String, CodingKey {
            case items = "Items"
            case quantity = "Quantity"
        }
    }

    public struct Origins: AWSEncodableShape & AWSDecodableShape {
        public struct _ItemsEncoding: ArrayCoderProperties { public static let member = "Origin" }

        /// A list of origins.
        @CustomCoding<ArrayCoder<_ItemsEncoding, Origin>>
        public var items: [Origin]
        /// The number of origins for this distribution.
        public let quantity: Int

        public init(items: [Origin], quantity: Int) {
            self.items = items
            self.quantity = quantity
        }

        public func validate(name: String) throws {
            try self.items.forEach {
                try $0.validate(name: "\(name).items[]")
            }
            try self.validate(self.items, name: "items", parent: name, min: 1)
        }

        private enum CodingKeys: String, CodingKey {
            case items = "Items"
            case quantity = "Quantity"
        }
    }

    public struct ParametersInCacheKeyAndForwardedToOrigin: AWSEncodableShape & AWSDecodableShape {
        /// An object that determines whether any cookies in viewer requests (and if so, which cookies)
        /// 			are included in the cache key and in requests that CloudFront sends to the origin.
        public let cookiesConfig: CachePolicyCookiesConfig
        /// A flag that can affect whether the Accept-Encoding HTTP header is
        /// 			included in the cache key and included in requests that CloudFront sends to the origin. This field is related to the EnableAcceptEncodingGzip field. If one or
        /// 			both of these fields is true and the viewer request includes the Accept-Encoding
        /// 			header, then CloudFront does the following:   Normalizes the value of the viewer's Accept-Encoding
        /// 					header   Includes the normalized header in the cache key   Includes the normalized header in the request to the origin, if a request is
        /// 					necessary   For more information, see Compression support in the
        /// 				Amazon CloudFront Developer Guide. If you set this value to true, and this cache behavior also has an origin
        /// 			request policy attached, do not include the Accept-Encoding header in the
        /// 			origin request policy. CloudFront always includes the Accept-Encoding header in
        /// 			origin requests when the value of this field is true, so including this
        /// 			header in an origin request policy has no effect. If both of these fields are false, then CloudFront treats the
        /// 				Accept-Encoding header the same as any other HTTP header in the viewer
        /// 			request. By default, it's not included in the cache key and it's not included in origin
        /// 			requests. In this case, you can manually add Accept-Encoding to the headers
        /// 			whitelist like any other HTTP header.
        public let enableAcceptEncodingBrotli: Bool?
        /// A flag that can affect whether the Accept-Encoding HTTP header is
        /// 			included in the cache key and included in requests that CloudFront sends to the origin. This field is related to the EnableAcceptEncodingBrotli field. If one or
        /// 			both of these fields is true and the viewer request includes the Accept-Encoding
        /// 			header, then CloudFront does the following:   Normalizes the value of the viewer's Accept-Encoding
        /// 					header   Includes the normalized header in the cache key   Includes the normalized header in the request to the origin, if a request is
        /// 					necessary   For more information, see Compression support in the
        /// 				Amazon CloudFront Developer Guide. If you set this value to true, and this cache behavior also has an origin
        /// 			request policy attached, do not include the Accept-Encoding header in the
        /// 			origin request policy. CloudFront always includes the Accept-Encoding header in
        /// 			origin requests when the value of this field is true, so including this
        /// 			header in an origin request policy has no effect. If both of these fields are false, then CloudFront treats the
        /// 				Accept-Encoding header the same as any other HTTP header in the viewer
        /// 			request. By default, it's not included in the cache key and it's not included in origin
        /// 			requests. In this case, you can manually add Accept-Encoding to the headers
        /// 			whitelist like any other HTTP header.
        public let enableAcceptEncodingGzip: Bool
        /// An object that determines whether any HTTP headers (and if so, which headers) are included
        /// 			in the cache key and in requests that CloudFront sends to the origin.
        public let headersConfig: CachePolicyHeadersConfig
        /// An object that determines whether any URL query strings in viewer requests (and if so, which
        /// 			query strings) are included in the cache key and in requests that CloudFront sends to the
        /// 			origin.
        public let queryStringsConfig: CachePolicyQueryStringsConfig

        public init(cookiesConfig: CachePolicyCookiesConfig, enableAcceptEncodingBrotli: Bool? = nil, enableAcceptEncodingGzip: Bool, headersConfig: CachePolicyHeadersConfig, queryStringsConfig: CachePolicyQueryStringsConfig) {
            self.cookiesConfig = cookiesConfig
            self.enableAcceptEncodingBrotli = enableAcceptEncodingBrotli
            self.enableAcceptEncodingGzip = enableAcceptEncodingGzip
            self.headersConfig = headersConfig
            self.queryStringsConfig = queryStringsConfig
        }

        private enum CodingKeys: String, CodingKey {
            case cookiesConfig = "CookiesConfig"
            case enableAcceptEncodingBrotli = "EnableAcceptEncodingBrotli"
            case enableAcceptEncodingGzip = "EnableAcceptEncodingGzip"
            case headersConfig = "HeadersConfig"
            case queryStringsConfig = "QueryStringsConfig"
        }
    }

    public struct Paths: AWSEncodableShape & AWSDecodableShape {
        public struct _ItemsEncoding: ArrayCoderProperties { public static let member = "Path" }

        /// A complex type that contains a list of the paths that you want to invalidate.
        @OptionalCustomCoding<ArrayCoder<_ItemsEncoding, String>>
        public var items: [String]?
        /// The number of invalidation paths specified for the objects that you want to
        /// 			invalidate.
        public let quantity: Int

        public init(items: [String]? = nil, quantity: Int) {
            self.items = items
            self.quantity = quantity
        }

        private enum CodingKeys: String, CodingKey {
            case items = "Items"
            case quantity = "Quantity"
        }
    }

    public struct PublicKey: AWSDecodableShape {
        /// The date and time when the public key was uploaded.
        public let createdTime: Date
        /// The identifier of the public key.
        public let id: String
        /// Configuration information about a public key that you can use with signed URLs and signed cookies, or with field-level encryption.
        public let publicKeyConfig: PublicKeyConfig

        public init(createdTime: Date, id: String, publicKeyConfig: PublicKeyConfig) {
            self.createdTime = createdTime
            self.id = id
            self.publicKeyConfig = publicKeyConfig
        }

        private enum CodingKeys: String, CodingKey {
            case createdTime = "CreatedTime"
            case id = "Id"
            case publicKeyConfig = "PublicKeyConfig"
        }
    }

    public struct PublicKeyConfig: AWSEncodableShape & AWSDecodableShape {
        /// A string included in the request to help make sure that the request can't be
        /// 			replayed.
        public let callerReference: String
        /// A comment to describe the public key. The comment cannot be longer than 128
        /// 			characters.
        public let comment: String?
        /// The public key that you can use with signed URLs and signed cookies, or with field-level encryption.
        public let encodedKey: String
        /// A name to help identify the public key.
        public let name: String

        public init(callerReference: String, comment: String? = nil, encodedKey: String, name: String) {
            self.callerReference = callerReference
            self.comment = comment
            self.encodedKey = encodedKey
            self.name = name
        }

        private enum CodingKeys: String, CodingKey {
            case callerReference = "CallerReference"
            case comment = "Comment"
            case encodedKey = "EncodedKey"
            case name = "Name"
        }
    }

    public struct PublicKeyList: AWSDecodableShape {
        public struct _ItemsEncoding: ArrayCoderProperties { public static let member = "PublicKeySummary" }

        /// A list of public keys.
        @OptionalCustomCoding<ArrayCoder<_ItemsEncoding, PublicKeySummary>>
        public var items: [PublicKeySummary]?
        /// The maximum number of public keys you want in the response.
        public let maxItems: Int
        /// If there are more elements to be listed, this element is present and contains the
        /// 			value that you can use for the Marker request parameter to continue listing
        /// 			your public keys where you left off.
        public let nextMarker: String?
        /// The number of public keys in the list.
        public let quantity: Int

        public init(items: [PublicKeySummary]? = nil, maxItems: Int, nextMarker: String? = nil, quantity: Int) {
            self.items = items
            self.maxItems = maxItems
            self.nextMarker = nextMarker
            self.quantity = quantity
        }

        private enum CodingKeys: String, CodingKey {
            case items = "Items"
            case maxItems = "MaxItems"
            case nextMarker = "NextMarker"
            case quantity = "Quantity"
        }
    }

    public struct PublicKeySummary: AWSDecodableShape {
        /// A comment to describe the public key. The comment cannot be longer than 128
        /// 			characters.
        public let comment: String?
        /// The date and time when the public key was uploaded.
        public let createdTime: Date
        /// The public key.
        public let encodedKey: String
        /// The identifier of the public key.
        public let id: String
        /// A name to help identify the public key.
        public let name: String

        public init(comment: String? = nil, createdTime: Date, encodedKey: String, id: String, name: String) {
            self.comment = comment
            self.createdTime = createdTime
            self.encodedKey = encodedKey
            self.id = id
            self.name = name
        }

        private enum CodingKeys: String, CodingKey {
            case comment = "Comment"
            case createdTime = "CreatedTime"
            case encodedKey = "EncodedKey"
            case id = "Id"
            case name = "Name"
        }
    }

    public struct PublishFunctionRequest: AWSEncodableShape {
        /// The current version (ETag value) of the function that you are publishing,
        /// 			which you can get using DescribeFunction.
        public let ifMatch: String
        /// The name of the function that you are publishing.
        public let name: String

        public init(ifMatch: String, name: String) {
            self.ifMatch = ifMatch
            self.name = name
        }

        public func encode(to encoder: Encoder) throws {
            let request = encoder.userInfo[.awsRequest]! as! RequestEncodingContainer
            _ = encoder.container(keyedBy: CodingKeys.self)
            request.encodeHeader(self.ifMatch, key: "If-Match")
            request.encodePath(self.name, key: "Name")
        }

        private enum CodingKeys: CodingKey {}
    }

    public struct PublishFunctionResult: AWSDecodableShape {
        /// Contains configuration information and metadata about a CloudFront function.
        public let functionSummary: FunctionSummary

        public init(functionSummary: FunctionSummary) {
            self.functionSummary = functionSummary
        }

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            self.functionSummary = try container.decode(FunctionSummary.self)
        }

        private enum CodingKeys: CodingKey {}
    }

    public struct QueryArgProfile: AWSEncodableShape & AWSDecodableShape {
        /// ID of profile to use for field-level encryption query argument-profile mapping
        public let profileId: String
        /// Query argument for field-level encryption query argument-profile mapping.
        public let queryArg: String

        public init(profileId: String, queryArg: String) {
            self.profileId = profileId
            self.queryArg = queryArg
        }

        private enum CodingKeys: String, CodingKey {
            case profileId = "ProfileId"
            case queryArg = "QueryArg"
        }
    }

    public struct QueryArgProfileConfig: AWSEncodableShape & AWSDecodableShape {
        /// Flag to set if you want a request to be forwarded to the origin even if the profile
        /// 			specified by the field-level encryption query argument, fle-profile, is unknown.
        public let forwardWhenQueryArgProfileIsUnknown: Bool
        /// Profiles specified for query argument-profile mapping for field-level
        /// 			encryption.
        public let queryArgProfiles: QueryArgProfiles?

        public init(forwardWhenQueryArgProfileIsUnknown: Bool, queryArgProfiles: QueryArgProfiles? = nil) {
            self.forwardWhenQueryArgProfileIsUnknown = forwardWhenQueryArgProfileIsUnknown
            self.queryArgProfiles = queryArgProfiles
        }

        private enum CodingKeys: String, CodingKey {
            case forwardWhenQueryArgProfileIsUnknown = "ForwardWhenQueryArgProfileIsUnknown"
            case queryArgProfiles = "QueryArgProfiles"
        }
    }

    public struct QueryArgProfiles: AWSEncodableShape & AWSDecodableShape {
        public struct _ItemsEncoding: ArrayCoderProperties { public static let member = "QueryArgProfile" }

        /// Number of items for query argument-profile mapping for field-level encryption.
        @OptionalCustomCoding<ArrayCoder<_ItemsEncoding, QueryArgProfile>>
        public var items: [QueryArgProfile]?
        /// Number of profiles for query argument-profile mapping for field-level
        /// 			encryption.
        public let quantity: Int

        public init(items: [QueryArgProfile]? = nil, quantity: Int) {
            self.items = items
            self.quantity = quantity
        }

        private enum CodingKeys: String, CodingKey {
            case items = "Items"
            case quantity = "Quantity"
        }
    }

    public struct QueryStringCacheKeys: AWSEncodableShape & AWSDecodableShape {
        public struct _ItemsEncoding: ArrayCoderProperties { public static let member = "Name" }

        /// A list that contains the query string parameters that you want CloudFront to use as a basis
        /// 			for caching for a cache behavior. If Quantity is 0, you can omit
        /// 				Items.
        @OptionalCustomCoding<ArrayCoder<_ItemsEncoding, String>>
        public var items: [String]?
        /// The number of whitelisted query string parameters for a cache
        /// 			behavior.
        public let quantity: Int

        public init(items: [String]? = nil, quantity: Int) {
            self.items = items
            self.quantity = quantity
        }

        private enum CodingKeys: String, CodingKey {
            case items = "Items"
            case quantity = "Quantity"
        }
    }

    public struct QueryStringNames: AWSEncodableShape & AWSDecodableShape {
        public struct _ItemsEncoding: ArrayCoderProperties { public static let member = "Name" }

        /// A list of query string names.
        @OptionalCustomCoding<ArrayCoder<_ItemsEncoding, String>>
        public var items: [String]?
        /// The number of query string names in the Items list.
        public let quantity: Int

        public init(items: [String]? = nil, quantity: Int) {
            self.items = items
            self.quantity = quantity
        }

        private enum CodingKeys: String, CodingKey {
            case items = "Items"
            case quantity = "Quantity"
        }
    }

    public struct RealtimeLogConfig: AWSDecodableShape {
        public struct _FieldsEncoding: ArrayCoderProperties { public static let member = "Field" }

        /// The Amazon Resource Name (ARN) of this real-time log configuration.
        public let arn: String
        /// Contains information about the Amazon Kinesis data stream where you are sending real-time
        /// 			log data for this real-time log configuration.
        @CustomCoding<StandardArrayCoder<EndPoint>>
        public var endPoints: [EndPoint]
        /// A list of fields that are included in each real-time log record. In an API response,
        /// 			the fields are provided in the same order in which they are sent to the Amazon Kinesis data
        /// 			stream. For more information about fields, see Real-time log configuration fields in the
        /// 				Amazon CloudFront Developer Guide.
        @CustomCoding<ArrayCoder<_FieldsEncoding, String>>
        public var fields: [String]
        /// The unique name of this real-time log configuration.
        public let name: String
        /// The sampling rate for this real-time log configuration. The sampling rate determines
        /// 			the percentage of viewer requests that are represented in the real-time log data. The
        /// 			sampling rate is an integer between 1 and 100, inclusive.
        public let samplingRate: Int64

        public init(arn: String, endPoints: [EndPoint], fields: [String], name: String, samplingRate: Int64) {
            self.arn = arn
            self.endPoints = endPoints
            self.fields = fields
            self.name = name
            self.samplingRate = samplingRate
        }

        private enum CodingKeys: String, CodingKey {
            case arn = "ARN"
            case endPoints = "EndPoints"
            case fields = "Fields"
            case name = "Name"
            case samplingRate = "SamplingRate"
        }
    }

    public struct RealtimeLogConfigs: AWSDecodableShape {
        /// A flag that indicates whether there are more real-time log configurations than are
        /// 			contained in this list.
        public let isTruncated: Bool
        /// Contains the list of real-time log configurations.
        @OptionalCustomCoding<StandardArrayCoder<RealtimeLogConfig>>
        public var items: [RealtimeLogConfig]?
        /// This parameter indicates where this list of real-time log configurations begins. This
        /// 			list includes real-time log configurations that occur after the marker.
        public let marker: String
        /// The maximum number of real-time log configurations requested.
        public let maxItems: Int
        /// If there are more items in the list than are in this response, this element is
        /// 			present. It contains the value that you should use in the Marker field of a
        /// 			subsequent request to continue listing real-time log configurations where you left off.
        ///
        public let nextMarker: String?

        public init(isTruncated: Bool, items: [RealtimeLogConfig]? = nil, marker: String, maxItems: Int, nextMarker: String? = nil) {
            self.isTruncated = isTruncated
            self.items = items
            self.marker = marker
            self.maxItems = maxItems
            self.nextMarker = nextMarker
        }

        private enum CodingKeys: String, CodingKey {
            case isTruncated = "IsTruncated"
            case items = "Items"
            case marker = "Marker"
            case maxItems = "MaxItems"
            case nextMarker = "NextMarker"
        }
    }

    public struct RealtimeMetricsSubscriptionConfig: AWSEncodableShape & AWSDecodableShape {
        /// A flag that indicates whether additional CloudWatch metrics are enabled for a given
        /// 			CloudFront distribution.
        public let realtimeMetricsSubscriptionStatus: RealtimeMetricsSubscriptionStatus

        public init(realtimeMetricsSubscriptionStatus: RealtimeMetricsSubscriptionStatus) {
            self.realtimeMetricsSubscriptionStatus = realtimeMetricsSubscriptionStatus
        }

        private enum CodingKeys: String, CodingKey {
            case realtimeMetricsSubscriptionStatus = "RealtimeMetricsSubscriptionStatus"
        }
    }

    public struct ResponseHeadersPolicy: AWSDecodableShape {
        /// The identifier for the response headers policy.
        public let id: String
        /// The date and time when the response headers policy was last modified.
        public let lastModifiedTime: Date
        /// A response headers policy configuration.
        public let responseHeadersPolicyConfig: ResponseHeadersPolicyConfig

        public init(id: String, lastModifiedTime: Date, responseHeadersPolicyConfig: ResponseHeadersPolicyConfig) {
            self.id = id
            self.lastModifiedTime = lastModifiedTime
            self.responseHeadersPolicyConfig = responseHeadersPolicyConfig
        }

        private enum CodingKeys: String, CodingKey {
            case id = "Id"
            case lastModifiedTime = "LastModifiedTime"
            case responseHeadersPolicyConfig = "ResponseHeadersPolicyConfig"
        }
    }

    public struct ResponseHeadersPolicyAccessControlAllowHeaders: AWSEncodableShape & AWSDecodableShape {
        public struct _ItemsEncoding: ArrayCoderProperties { public static let member = "Header" }

        /// The list of HTTP header names. You can specify * to allow all
        /// 			headers.
        @CustomCoding<ArrayCoder<_ItemsEncoding, String>>
        public var items: [String]
        /// The number of HTTP header names in the list.
        public let quantity: Int

        public init(items: [String], quantity: Int) {
            self.items = items
            self.quantity = quantity
        }

        private enum CodingKeys: String, CodingKey {
            case items = "Items"
            case quantity = "Quantity"
        }
    }

    public struct ResponseHeadersPolicyAccessControlAllowMethods: AWSEncodableShape & AWSDecodableShape {
        public struct _ItemsEncoding: ArrayCoderProperties { public static let member = "Method" }

        /// The list of HTTP methods. Valid values are:    GET     DELETE     HEAD     OPTIONS     PATCH     POST     PUT     ALL     ALL is a special value that includes all of the listed HTTP
        /// 			methods.
        @CustomCoding<ArrayCoder<_ItemsEncoding, ResponseHeadersPolicyAccessControlAllowMethodsValues>>
        public var items: [ResponseHeadersPolicyAccessControlAllowMethodsValues]
        /// The number of HTTP methods in the list.
        public let quantity: Int

        public init(items: [ResponseHeadersPolicyAccessControlAllowMethodsValues], quantity: Int) {
            self.items = items
            self.quantity = quantity
        }

        private enum CodingKeys: String, CodingKey {
            case items = "Items"
            case quantity = "Quantity"
        }
    }

    public struct ResponseHeadersPolicyAccessControlAllowOrigins: AWSEncodableShape & AWSDecodableShape {
        public struct _ItemsEncoding: ArrayCoderProperties { public static let member = "Origin" }

        /// The list of origins (domain names). You can specify * to allow all
        /// 			origins.
        @CustomCoding<ArrayCoder<_ItemsEncoding, String>>
        public var items: [String]
        /// The number of origins in the list.
        public let quantity: Int

        public init(items: [String], quantity: Int) {
            self.items = items
            self.quantity = quantity
        }

        private enum CodingKeys: String, CodingKey {
            case items = "Items"
            case quantity = "Quantity"
        }
    }

    public struct ResponseHeadersPolicyAccessControlExposeHeaders: AWSEncodableShape & AWSDecodableShape {
        public struct _ItemsEncoding: ArrayCoderProperties { public static let member = "Header" }

        /// The list of HTTP headers. You can specify * to expose all headers.
        @OptionalCustomCoding<ArrayCoder<_ItemsEncoding, String>>
        public var items: [String]?
        /// The number of HTTP headers in the list.
        public let quantity: Int

        public init(items: [String]? = nil, quantity: Int) {
            self.items = items
            self.quantity = quantity
        }

        private enum CodingKeys: String, CodingKey {
            case items = "Items"
            case quantity = "Quantity"
        }
    }

    public struct ResponseHeadersPolicyConfig: AWSEncodableShape & AWSDecodableShape {
        /// A comment to describe the response headers policy. The comment cannot be longer than 128 characters.
        public let comment: String?
        /// A configuration for a set of HTTP response headers that are used for cross-origin
        /// 			resource sharing (CORS).
        public let corsConfig: ResponseHeadersPolicyCorsConfig?
        /// A configuration for a set of custom HTTP response headers.
        public let customHeadersConfig: ResponseHeadersPolicyCustomHeadersConfig?
        /// A name to identify the response headers policy. The name must be unique for response headers policies in this Amazon Web Services account.
        public let name: String
        /// A configuration for a set of HTTP headers to remove from the HTTP response.
        public let removeHeadersConfig: ResponseHeadersPolicyRemoveHeadersConfig?
        /// A configuration for a set of security-related HTTP response headers.
        public let securityHeadersConfig: ResponseHeadersPolicySecurityHeadersConfig?
        /// A configuration for enabling the Server-Timing header in HTTP responses
        /// 			sent from CloudFront.
        public let serverTimingHeadersConfig: ResponseHeadersPolicyServerTimingHeadersConfig?

        public init(comment: String? = nil, corsConfig: ResponseHeadersPolicyCorsConfig? = nil, customHeadersConfig: ResponseHeadersPolicyCustomHeadersConfig? = nil, name: String, removeHeadersConfig: ResponseHeadersPolicyRemoveHeadersConfig? = nil, securityHeadersConfig: ResponseHeadersPolicySecurityHeadersConfig? = nil, serverTimingHeadersConfig: ResponseHeadersPolicyServerTimingHeadersConfig? = nil) {
            self.comment = comment
            self.corsConfig = corsConfig
            self.customHeadersConfig = customHeadersConfig
            self.name = name
            self.removeHeadersConfig = removeHeadersConfig
            self.securityHeadersConfig = securityHeadersConfig
            self.serverTimingHeadersConfig = serverTimingHeadersConfig
        }

        public func validate(name: String) throws {
            try self.serverTimingHeadersConfig?.validate(name: "\(name).serverTimingHeadersConfig")
        }

        private enum CodingKeys: String, CodingKey {
            case comment = "Comment"
            case corsConfig = "CorsConfig"
            case customHeadersConfig = "CustomHeadersConfig"
            case name = "Name"
            case removeHeadersConfig = "RemoveHeadersConfig"
            case securityHeadersConfig = "SecurityHeadersConfig"
            case serverTimingHeadersConfig = "ServerTimingHeadersConfig"
        }
    }

    public struct ResponseHeadersPolicyContentSecurityPolicy: AWSEncodableShape & AWSDecodableShape {
        /// The policy directives and their values that CloudFront includes as values for the
        /// 				Content-Security-Policy HTTP response header.
        public let contentSecurityPolicy: String
        /// A Boolean that determines whether CloudFront overrides the
        /// 				Content-Security-Policy HTTP response header received from the origin
        /// 			with the one specified in this response headers policy.
        public let override: Bool

        public init(contentSecurityPolicy: String, override: Bool) {
            self.contentSecurityPolicy = contentSecurityPolicy
            self.override = override
        }

        private enum CodingKeys: String, CodingKey {
            case contentSecurityPolicy = "ContentSecurityPolicy"
            case override = "Override"
        }
    }

    public struct ResponseHeadersPolicyContentTypeOptions: AWSEncodableShape & AWSDecodableShape {
        /// A Boolean that determines whether CloudFront overrides the
        /// 				X-Content-Type-Options HTTP response header received from the origin
        /// 			with the one specified in this response headers policy.
        public let override: Bool

        public init(override: Bool) {
            self.override = override
        }

        private enum CodingKeys: String, CodingKey {
            case override = "Override"
        }
    }

    public struct ResponseHeadersPolicyCorsConfig: AWSEncodableShape & AWSDecodableShape {
        /// A Boolean that CloudFront uses as the value for the
        /// 				Access-Control-Allow-Credentials HTTP response header. For more information about the Access-Control-Allow-Credentials HTTP
        /// 			response header, see Access-Control-Allow-Credentials in the MDN Web Docs.
        public let accessControlAllowCredentials: Bool
        /// A list of HTTP header names that CloudFront includes as values for the
        /// 				Access-Control-Allow-Headers HTTP response header. For more information about the Access-Control-Allow-Headers HTTP response
        /// 			header, see Access-Control-Allow-Headers in the MDN Web Docs.
        public let accessControlAllowHeaders: ResponseHeadersPolicyAccessControlAllowHeaders
        /// A list of HTTP methods that CloudFront includes as values for the
        /// 				Access-Control-Allow-Methods HTTP response header. For more information about the Access-Control-Allow-Methods HTTP response
        /// 			header, see Access-Control-Allow-Methods in the MDN Web Docs.
        public let accessControlAllowMethods: ResponseHeadersPolicyAccessControlAllowMethods
        /// A list of origins (domain names) that CloudFront can use as the value for the
        /// 				Access-Control-Allow-Origin HTTP response header. For more information about the Access-Control-Allow-Origin HTTP response
        /// 			header, see Access-Control-Allow-Origin in the MDN Web Docs.
        public let accessControlAllowOrigins: ResponseHeadersPolicyAccessControlAllowOrigins
        /// A list of HTTP headers that CloudFront includes as values for the
        /// 				Access-Control-Expose-Headers HTTP response header. For more information about the Access-Control-Expose-Headers HTTP
        /// 			response header, see Access-Control-Expose-Headers in the MDN Web Docs.
        public let accessControlExposeHeaders: ResponseHeadersPolicyAccessControlExposeHeaders?
        /// A number that CloudFront uses as the value for the Access-Control-Max-Age HTTP
        /// 			response header. For more information about the Access-Control-Max-Age HTTP response
        /// 			header, see Access-Control-Max-Age in the MDN Web Docs.
        public let accessControlMaxAgeSec: Int?
        /// A Boolean that determines whether CloudFront overrides HTTP response headers received from
        /// 			the origin with the ones specified in this response headers policy.
        public let originOverride: Bool

        public init(accessControlAllowCredentials: Bool, accessControlAllowHeaders: ResponseHeadersPolicyAccessControlAllowHeaders, accessControlAllowMethods: ResponseHeadersPolicyAccessControlAllowMethods, accessControlAllowOrigins: ResponseHeadersPolicyAccessControlAllowOrigins, accessControlExposeHeaders: ResponseHeadersPolicyAccessControlExposeHeaders? = nil, accessControlMaxAgeSec: Int? = nil, originOverride: Bool) {
            self.accessControlAllowCredentials = accessControlAllowCredentials
            self.accessControlAllowHeaders = accessControlAllowHeaders
            self.accessControlAllowMethods = accessControlAllowMethods
            self.accessControlAllowOrigins = accessControlAllowOrigins
            self.accessControlExposeHeaders = accessControlExposeHeaders
            self.accessControlMaxAgeSec = accessControlMaxAgeSec
            self.originOverride = originOverride
        }

        private enum CodingKeys: String, CodingKey {
            case accessControlAllowCredentials = "AccessControlAllowCredentials"
            case accessControlAllowHeaders = "AccessControlAllowHeaders"
            case accessControlAllowMethods = "AccessControlAllowMethods"
            case accessControlAllowOrigins = "AccessControlAllowOrigins"
            case accessControlExposeHeaders = "AccessControlExposeHeaders"
            case accessControlMaxAgeSec = "AccessControlMaxAgeSec"
            case originOverride = "OriginOverride"
        }
    }

    public struct ResponseHeadersPolicyCustomHeader: AWSEncodableShape & AWSDecodableShape {
        /// The HTTP response header name.
        public let header: String
        /// A Boolean that determines whether CloudFront overrides a response header with the same name
        /// 			received from the origin with the header specified here.
        public let override: Bool
        /// The value for the HTTP response header.
        public let value: String

        public init(header: String, override: Bool, value: String) {
            self.header = header
            self.override = override
            self.value = value
        }

        private enum CodingKeys: String, CodingKey {
            case header = "Header"
            case override = "Override"
            case value = "Value"
        }
    }

    public struct ResponseHeadersPolicyCustomHeadersConfig: AWSEncodableShape & AWSDecodableShape {
        public struct _ItemsEncoding: ArrayCoderProperties { public static let member = "ResponseHeadersPolicyCustomHeader" }

        /// The list of HTTP response headers and their values.
        @OptionalCustomCoding<ArrayCoder<_ItemsEncoding, ResponseHeadersPolicyCustomHeader>>
        public var items: [ResponseHeadersPolicyCustomHeader]?
        /// The number of HTTP response headers in the list.
        public let quantity: Int

        public init(items: [ResponseHeadersPolicyCustomHeader]? = nil, quantity: Int) {
            self.items = items
            self.quantity = quantity
        }

        private enum CodingKeys: String, CodingKey {
            case items = "Items"
            case quantity = "Quantity"
        }
    }

    public struct ResponseHeadersPolicyFrameOptions: AWSEncodableShape & AWSDecodableShape {
        /// The value of the X-Frame-Options HTTP response header. Valid values are
        /// 				DENY and SAMEORIGIN. For more information about these values, see X-Frame-Options in the MDN Web Docs.
        public let frameOption: FrameOptionsList
        /// A Boolean that determines whether CloudFront overrides the X-Frame-Options HTTP
        /// 			response header received from the origin with the one specified in this response headers
        /// 			policy.
        public let override: Bool

        public init(frameOption: FrameOptionsList, override: Bool) {
            self.frameOption = frameOption
            self.override = override
        }

        private enum CodingKeys: String, CodingKey {
            case frameOption = "FrameOption"
            case override = "Override"
        }
    }

    public struct ResponseHeadersPolicyList: AWSDecodableShape {
        public struct _ItemsEncoding: ArrayCoderProperties { public static let member = "ResponseHeadersPolicySummary" }

        /// The response headers policies in the list.
        @OptionalCustomCoding<ArrayCoder<_ItemsEncoding, ResponseHeadersPolicySummary>>
        public var items: [ResponseHeadersPolicySummary]?
        /// The maximum number of response headers policies requested.
        public let maxItems: Int
        /// If there are more items in the list than are in this response, this element is
        /// 			present. It contains the value that you should use in the Marker field of a
        /// 			subsequent request to continue listing response headers policies where you left
        /// 			off.
        public let nextMarker: String?
        /// The number of response headers policies returned.
        public let quantity: Int

        public init(items: [ResponseHeadersPolicySummary]? = nil, maxItems: Int, nextMarker: String? = nil, quantity: Int) {
            self.items = items
            self.maxItems = maxItems
            self.nextMarker = nextMarker
            self.quantity = quantity
        }

        private enum CodingKeys: String, CodingKey {
            case items = "Items"
            case maxItems = "MaxItems"
            case nextMarker = "NextMarker"
            case quantity = "Quantity"
        }
    }

    public struct ResponseHeadersPolicyReferrerPolicy: AWSEncodableShape & AWSDecodableShape {
        /// A Boolean that determines whether CloudFront overrides the Referrer-Policy HTTP
        /// 			response header received from the origin with the one specified in this response headers
        /// 			policy.
        public let override: Bool
        /// The value of the Referrer-Policy HTTP response header. Valid values
        /// 			are:    no-referrer     no-referrer-when-downgrade     origin     origin-when-cross-origin     same-origin     strict-origin     strict-origin-when-cross-origin     unsafe-url    For more information about these values, see Referrer-Policy in the MDN Web Docs.
        public let referrerPolicy: ReferrerPolicyList

        public init(override: Bool, referrerPolicy: ReferrerPolicyList) {
            self.override = override
            self.referrerPolicy = referrerPolicy
        }

        private enum CodingKeys: String, CodingKey {
            case override = "Override"
            case referrerPolicy = "ReferrerPolicy"
        }
    }

    public struct ResponseHeadersPolicyRemoveHeader: AWSEncodableShape & AWSDecodableShape {
        /// The HTTP header name.
        public let header: String

        public init(header: String) {
            self.header = header
        }

        private enum CodingKeys: String, CodingKey {
            case header = "Header"
        }
    }

    public struct ResponseHeadersPolicyRemoveHeadersConfig: AWSEncodableShape & AWSDecodableShape {
        public struct _ItemsEncoding: ArrayCoderProperties { public static let member = "ResponseHeadersPolicyRemoveHeader" }

        /// The list of HTTP header names.
        @OptionalCustomCoding<ArrayCoder<_ItemsEncoding, ResponseHeadersPolicyRemoveHeader>>
        public var items: [ResponseHeadersPolicyRemoveHeader]?
        /// The number of HTTP header names in the list.
        public let quantity: Int

        public init(items: [ResponseHeadersPolicyRemoveHeader]? = nil, quantity: Int) {
            self.items = items
            self.quantity = quantity
        }

        private enum CodingKeys: String, CodingKey {
            case items = "Items"
            case quantity = "Quantity"
        }
    }

    public struct ResponseHeadersPolicySecurityHeadersConfig: AWSEncodableShape & AWSDecodableShape {
        /// The policy directives and their values that CloudFront includes as values for the
        /// 				Content-Security-Policy HTTP response header. For more information about the Content-Security-Policy HTTP response
        /// 			header, see Content-Security-Policy in the MDN Web Docs.
        public let contentSecurityPolicy: ResponseHeadersPolicyContentSecurityPolicy?
        /// Determines whether CloudFront includes the X-Content-Type-Options HTTP response
        /// 			header with its value set to nosniff. For more information about the X-Content-Type-Options HTTP response
        /// 			header, see X-Content-Type-Options in the MDN Web Docs.
        public let contentTypeOptions: ResponseHeadersPolicyContentTypeOptions?
        /// Determines whether CloudFront includes the X-Frame-Options HTTP response header
        /// 			and the header's value. For more information about the X-Frame-Options HTTP response header, see
        /// 				X-Frame-Options in the MDN Web Docs.
        public let frameOptions: ResponseHeadersPolicyFrameOptions?
        /// Determines whether CloudFront includes the Referrer-Policy HTTP response header
        /// 			and the header's value. For more information about the Referrer-Policy HTTP response header, see
        /// 				Referrer-Policy in the MDN Web Docs.
        public let referrerPolicy: ResponseHeadersPolicyReferrerPolicy?
        /// Determines whether CloudFront includes the Strict-Transport-Security HTTP
        /// 			response header and the header's value. For more information about the Strict-Transport-Security HTTP response
        /// 			header, see Strict-Transport-Security in the MDN Web Docs.
        public let strictTransportSecurity: ResponseHeadersPolicyStrictTransportSecurity?
        /// Determines whether CloudFront includes the X-XSS-Protection HTTP response
        /// 			header and the header's value. For more information about the X-XSS-Protection HTTP response header, see
        /// 				X-XSS-Protection in the MDN Web Docs.
        public let xssProtection: ResponseHeadersPolicyXSSProtection?

        public init(contentSecurityPolicy: ResponseHeadersPolicyContentSecurityPolicy? = nil, contentTypeOptions: ResponseHeadersPolicyContentTypeOptions? = nil, frameOptions: ResponseHeadersPolicyFrameOptions? = nil, referrerPolicy: ResponseHeadersPolicyReferrerPolicy? = nil, strictTransportSecurity: ResponseHeadersPolicyStrictTransportSecurity? = nil, xssProtection: ResponseHeadersPolicyXSSProtection? = nil) {
            self.contentSecurityPolicy = contentSecurityPolicy
            self.contentTypeOptions = contentTypeOptions
            self.frameOptions = frameOptions
            self.referrerPolicy = referrerPolicy
            self.strictTransportSecurity = strictTransportSecurity
            self.xssProtection = xssProtection
        }

        private enum CodingKeys: String, CodingKey {
            case contentSecurityPolicy = "ContentSecurityPolicy"
            case contentTypeOptions = "ContentTypeOptions"
            case frameOptions = "FrameOptions"
            case referrerPolicy = "ReferrerPolicy"
            case strictTransportSecurity = "StrictTransportSecurity"
            case xssProtection = "XSSProtection"
        }
    }

    public struct ResponseHeadersPolicyServerTimingHeadersConfig: AWSEncodableShape & AWSDecodableShape {
        /// A Boolean that determines whether CloudFront adds the Server-Timing header to
        /// 			HTTP responses that it sends in response to requests that match a cache behavior that's
        /// 			associated with this response headers policy.
        public let enabled: Bool
        /// A number 0–100 (inclusive) that specifies the percentage of responses that you want
        /// 			CloudFront to add the Server-Timing header to. When you set the sampling rate to
        /// 			100, CloudFront adds the Server-Timing header to the HTTP response for every
        /// 			request that matches the cache behavior that this response headers policy is attached
        /// 			to. When you set it to 50, CloudFront adds the header to 50% of the responses for requests
        /// 			that match the cache behavior. You can set the sampling rate to any number 0–100 with up
        /// 			to four decimal places.
        public let samplingRate: Double?

        public init(enabled: Bool, samplingRate: Double? = nil) {
            self.enabled = enabled
            self.samplingRate = samplingRate
        }

        public func validate(name: String) throws {
            try self.validate(self.samplingRate, name: "samplingRate", parent: name, max: 100.0)
            try self.validate(self.samplingRate, name: "samplingRate", parent: name, min: 0.0)
        }

        private enum CodingKeys: String, CodingKey {
            case enabled = "Enabled"
            case samplingRate = "SamplingRate"
        }
    }

    public struct ResponseHeadersPolicyStrictTransportSecurity: AWSEncodableShape & AWSDecodableShape {
        /// A number that CloudFront uses as the value for the max-age directive in the
        /// 				Strict-Transport-Security HTTP response header.
        public let accessControlMaxAgeSec: Int
        /// A Boolean that determines whether CloudFront includes the includeSubDomains
        /// 			directive in the Strict-Transport-Security HTTP response header.
        public let includeSubdomains: Bool?
        /// A Boolean that determines whether CloudFront overrides the
        /// 				Strict-Transport-Security HTTP response header received from the origin
        /// 			with the one specified in this response headers policy.
        public let override: Bool
        /// A Boolean that determines whether CloudFront includes the preload directive in
        /// 			the Strict-Transport-Security HTTP response header.
        public let preload: Bool?

        public init(accessControlMaxAgeSec: Int, includeSubdomains: Bool? = nil, override: Bool, preload: Bool? = nil) {
            self.accessControlMaxAgeSec = accessControlMaxAgeSec
            self.includeSubdomains = includeSubdomains
            self.override = override
            self.preload = preload
        }

        private enum CodingKeys: String, CodingKey {
            case accessControlMaxAgeSec = "AccessControlMaxAgeSec"
            case includeSubdomains = "IncludeSubdomains"
            case override = "Override"
            case preload = "Preload"
        }
    }

    public struct ResponseHeadersPolicySummary: AWSDecodableShape {
        /// The response headers policy.
        public let responseHeadersPolicy: ResponseHeadersPolicy
        /// The type of response headers policy, either managed (created by Amazon Web Services) or
        /// 				custom (created in this Amazon Web Services account).
        public let type: ResponseHeadersPolicyType

        public init(responseHeadersPolicy: ResponseHeadersPolicy, type: ResponseHeadersPolicyType) {
            self.responseHeadersPolicy = responseHeadersPolicy
            self.type = type
        }

        private enum CodingKeys: String, CodingKey {
            case responseHeadersPolicy = "ResponseHeadersPolicy"
            case type = "Type"
        }
    }

    public struct ResponseHeadersPolicyXSSProtection: AWSEncodableShape & AWSDecodableShape {
        /// A Boolean that determines whether CloudFront includes the mode=block directive
        /// 			in the X-XSS-Protection header. For more information about this directive, see X-XSS-Protection in the MDN Web Docs.
        public let modeBlock: Bool?
        /// A Boolean that determines whether CloudFront overrides the X-XSS-Protection
        /// 			HTTP response header received from the origin with the one specified in this response
        /// 			headers policy.
        public let override: Bool
        /// A Boolean that determines the value of the X-XSS-Protection HTTP response
        /// 			header. When this setting is true, the value of the
        /// 				X-XSS-Protection header is 1. When this setting is
        /// 				false, the value of the X-XSS-Protection header is
        /// 				0. For more information about these settings, see X-XSS-Protection in the MDN Web Docs.
        public let protection: Bool
        /// A reporting URI, which CloudFront uses as the value of the report directive in
        /// 			the X-XSS-Protection header. You cannot specify a ReportUri when ModeBlock is
        /// 				true. For more information about using a reporting URL, see X-XSS-Protection in the MDN Web Docs.
        public let reportUri: String?

        public init(modeBlock: Bool? = nil, override: Bool, protection: Bool, reportUri: String? = nil) {
            self.modeBlock = modeBlock
            self.override = override
            self.protection = protection
            self.reportUri = reportUri
        }

        private enum CodingKeys: String, CodingKey {
            case modeBlock = "ModeBlock"
            case override = "Override"
            case protection = "Protection"
            case reportUri = "ReportUri"
        }
    }

    public struct Restrictions: AWSEncodableShape & AWSDecodableShape {
        /// A complex type that controls the countries in which your content is distributed. CloudFront
        /// 			determines the location of your users using MaxMind GeoIP databases.
        public let geoRestriction: GeoRestriction

        public init(geoRestriction: GeoRestriction) {
            self.geoRestriction = geoRestriction
        }

        private enum CodingKeys: String, CodingKey {
            case geoRestriction = "GeoRestriction"
        }
    }

    public struct S3Origin: AWSEncodableShape & AWSDecodableShape {
        /// The DNS name of the Amazon S3 origin.
        public let domainName: String
        /// The CloudFront origin access identity to associate with the distribution. Use an origin
        /// 			access identity to configure the distribution so that end users can only access objects
        /// 			in an Amazon S3 bucket through CloudFront. If you want end users to be able to access objects using either the CloudFront URL or the
        /// 			Amazon S3 URL, specify an empty OriginAccessIdentity element. To delete the origin access identity from an existing distribution, update the
        /// 			distribution configuration and include an empty OriginAccessIdentity
        /// 			element. To replace the origin access identity, update the distribution configuration and
        /// 			specify the new origin access identity. For more information, see Using an Origin Access Identity to Restrict Access to Your Amazon S3 Content in
        /// 			the  Amazon CloudFront Developer Guide.
        public let originAccessIdentity: String

        public init(domainName: String, originAccessIdentity: String) {
            self.domainName = domainName
            self.originAccessIdentity = originAccessIdentity
        }

        private enum CodingKeys: String, CodingKey {
            case domainName = "DomainName"
            case originAccessIdentity = "OriginAccessIdentity"
        }
    }

    public struct S3OriginConfig: AWSEncodableShape & AWSDecodableShape {
        /// The CloudFront origin access identity to associate with the origin. Use an origin access
        /// 			identity to configure the origin so that viewers can only access
        /// 			objects in an Amazon S3 bucket through CloudFront. The format of the value is: origin-access-identity/cloudfront/ID-of-origin-access-identity  where  ID-of-origin-access-identity is the value that
        /// 			CloudFront returned in the ID element when you created the origin access
        /// 			identity. If you want viewers to be able to access objects using either the CloudFront URL or the Amazon S3
        /// 			URL, specify an empty OriginAccessIdentity element. To delete the origin access identity from an existing distribution, update the
        /// 			distribution configuration and include an empty OriginAccessIdentity
        /// 			element. To replace the origin access identity, update the distribution configuration and
        /// 			specify the new origin access identity. For more information about the origin access identity, see Serving Private
        /// 				Content through CloudFront in the Amazon CloudFront Developer Guide.
        public let originAccessIdentity: String

        public init(originAccessIdentity: String) {
            self.originAccessIdentity = originAccessIdentity
        }

        private enum CodingKeys: String, CodingKey {
            case originAccessIdentity = "OriginAccessIdentity"
        }
    }

    public struct SessionStickinessConfig: AWSEncodableShape & AWSDecodableShape {
        /// The amount of time after which you want sessions to cease if no requests are
        /// 			received. Allowed values are 300–3600 seconds (5–60 minutes). The value must be less than or equal to MaximumTTL.
        public let idleTTL: Int
        /// The maximum amount of time to consider requests from the viewer as being part of the
        /// 			same session. Allowed values are 300–3600 seconds (5–60 minutes). The value must be less than or equal to IdleTTL.
        public let maximumTTL: Int

        public init(idleTTL: Int, maximumTTL: Int) {
            self.idleTTL = idleTTL
            self.maximumTTL = maximumTTL
        }

        private enum CodingKeys: String, CodingKey {
            case idleTTL = "IdleTTL"
            case maximumTTL = "MaximumTTL"
        }
    }

    public struct Signer: AWSDecodableShape {
        /// An Amazon Web Services account number that contains active CloudFront key pairs that CloudFront can use to
        /// 			verify the signatures of signed URLs and signed cookies. If the Amazon Web Services account that owns
        /// 			the key pairs is the same account that owns the CloudFront distribution, the value of this
        /// 			field is self.
        public let awsAccountNumber: String?
        /// A list of CloudFront key pair identifiers.
        public let keyPairIds: KeyPairIds?

        public init(awsAccountNumber: String? = nil, keyPairIds: KeyPairIds? = nil) {
            self.awsAccountNumber = awsAccountNumber
            self.keyPairIds = keyPairIds
        }

        private enum CodingKeys: String, CodingKey {
            case awsAccountNumber = "AwsAccountNumber"
            case keyPairIds = "KeyPairIds"
        }
    }

    public struct StagingDistributionDnsNames: AWSEncodableShape & AWSDecodableShape {
        public struct _ItemsEncoding: ArrayCoderProperties { public static let member = "DnsName" }

        /// The CloudFront domain name of the staging distribution.
        @OptionalCustomCoding<ArrayCoder<_ItemsEncoding, String>>
        public var items: [String]?
        /// The number of CloudFront domain names in your staging distribution.
        public let quantity: Int

        public init(items: [String]? = nil, quantity: Int) {
            self.items = items
            self.quantity = quantity
        }

        private enum CodingKeys: String, CodingKey {
            case items = "Items"
            case quantity = "Quantity"
        }
    }

    public struct StatusCodes: AWSEncodableShape & AWSDecodableShape {
        public struct _ItemsEncoding: ArrayCoderProperties { public static let member = "StatusCode" }

        /// The items (status codes) for an origin group.
        @CustomCoding<ArrayCoder<_ItemsEncoding, Int>>
        public var items: [Int]
        /// The number of status codes.
        public let quantity: Int

        public init(items: [Int], quantity: Int) {
            self.items = items
            self.quantity = quantity
        }

        public func validate(name: String) throws {
            try self.validate(self.items, name: "items", parent: name, min: 1)
        }

        private enum CodingKeys: String, CodingKey {
            case items = "Items"
            case quantity = "Quantity"
        }
    }

    public struct StreamingDistribution: AWSDecodableShape {
        /// A complex type that lists the Amazon Web Services accounts, if any, that you included in the
        /// 				TrustedSigners complex type for this distribution. These are the
        /// 			accounts that you want to allow to create signed URLs for private content. The Signer complex type lists the Amazon Web Services account number of the trusted
        /// 			signer or self if the signer is the Amazon Web Services account that created the
        /// 			distribution. The Signer element also includes the IDs of any active CloudFront
        /// 			key pairs that are associated with the trusted signer's Amazon Web Services account. If no
        /// 				KeyPairId element appears for a Signer, that signer can't
        /// 			create signed URLs. For more information, see Serving Private
        /// 				Content through CloudFront in the Amazon CloudFront Developer Guide.
        public let activeTrustedSigners: ActiveTrustedSigners
        /// The ARN (Amazon Resource Name) for the distribution. For example:
        /// 				arn:aws:cloudfront::123456789012:distribution/EDFDVBD632BHDS5, where
        /// 				123456789012 is your Amazon Web Services account ID.
        public let arn: String
        /// The domain name that corresponds to the streaming distribution, for example,
        /// 				s5c39gqb8ow64r.cloudfront.net.
        public let domainName: String
        /// The identifier for the RTMP distribution. For example:
        /// 			EGTXBD79EXAMPLE.
        public let id: String
        /// The date and time that the distribution was last modified.
        public let lastModifiedTime: Date?
        /// The current status of the RTMP distribution. When the status is Deployed,
        /// 			the distribution's information is propagated to all CloudFront edge locations.
        public let status: String
        /// The current configuration information for the RTMP distribution.
        public let streamingDistributionConfig: StreamingDistributionConfig

        public init(activeTrustedSigners: ActiveTrustedSigners, arn: String, domainName: String, id: String, lastModifiedTime: Date? = nil, status: String, streamingDistributionConfig: StreamingDistributionConfig) {
            self.activeTrustedSigners = activeTrustedSigners
            self.arn = arn
            self.domainName = domainName
            self.id = id
            self.lastModifiedTime = lastModifiedTime
            self.status = status
            self.streamingDistributionConfig = streamingDistributionConfig
        }

        private enum CodingKeys: String, CodingKey {
            case activeTrustedSigners = "ActiveTrustedSigners"
            case arn = "ARN"
            case domainName = "DomainName"
            case id = "Id"
            case lastModifiedTime = "LastModifiedTime"
            case status = "Status"
            case streamingDistributionConfig = "StreamingDistributionConfig"
        }
    }

    public struct StreamingDistributionConfig: AWSEncodableShape & AWSDecodableShape {
        /// A complex type that contains information about CNAMEs (alternate domain names), if
        /// 			any, for this streaming distribution.
        public let aliases: Aliases?
        /// A unique value (for example, a date-time stamp) that ensures that the request can't be
        /// 			replayed. If the value of CallerReference is new (regardless of the content of the
        /// 				StreamingDistributionConfig object), CloudFront creates a new
        /// 			distribution. If CallerReference is a value that you already sent in a previous request
        /// 			to create a distribution, CloudFront returns a DistributionAlreadyExists
        /// 			error.
        public let callerReference: String
        /// Any comments you want to include about the streaming distribution.
        public let comment: String
        /// Whether the streaming distribution is enabled to accept user requests for
        /// 			content.
        public let enabled: Bool
        /// A complex type that controls whether access logs are written for the streaming
        /// 			distribution.
        public let logging: StreamingLoggingConfig?
        /// A complex type that contains information about price class for this streaming
        /// 			distribution.
        public let priceClass: PriceClass?
        /// A complex type that contains information about the Amazon S3 bucket from which you want
        /// 			CloudFront to get your media files for distribution.
        public let s3Origin: S3Origin
        /// A complex type that specifies any Amazon Web Services accounts that you want to permit to create
        /// 			signed URLs for private content. If you want the distribution to use signed URLs,
        /// 			include this element; if you want the distribution to use public URLs, remove this
        /// 			element. For more information, see Serving Private
        /// 				Content through CloudFront in the Amazon CloudFront Developer Guide.
        public let trustedSigners: TrustedSigners

        public init(aliases: Aliases? = nil, callerReference: String, comment: String, enabled: Bool, logging: StreamingLoggingConfig? = nil, priceClass: PriceClass? = nil, s3Origin: S3Origin, trustedSigners: TrustedSigners) {
            self.aliases = aliases
            self.callerReference = callerReference
            self.comment = comment
            self.enabled = enabled
            self.logging = logging
            self.priceClass = priceClass
            self.s3Origin = s3Origin
            self.trustedSigners = trustedSigners
        }

        private enum CodingKeys: String, CodingKey {
            case aliases = "Aliases"
            case callerReference = "CallerReference"
            case comment = "Comment"
            case enabled = "Enabled"
            case logging = "Logging"
            case priceClass = "PriceClass"
            case s3Origin = "S3Origin"
            case trustedSigners = "TrustedSigners"
        }
    }

    public struct StreamingDistributionConfigWithTags: AWSEncodableShape {
        /// A streaming distribution Configuration.
        public let streamingDistributionConfig: StreamingDistributionConfig
        /// A complex type that contains zero or more Tag elements.
        public let tags: Tags

        public init(streamingDistributionConfig: StreamingDistributionConfig, tags: Tags) {
            self.streamingDistributionConfig = streamingDistributionConfig
            self.tags = tags
        }

        public func validate(name: String) throws {
            try self.tags.validate(name: "\(name).tags")
        }

        private enum CodingKeys: String, CodingKey {
            case streamingDistributionConfig = "StreamingDistributionConfig"
            case tags = "Tags"
        }
    }

    public struct StreamingDistributionList: AWSDecodableShape {
        public struct _ItemsEncoding: ArrayCoderProperties { public static let member = "StreamingDistributionSummary" }

        /// A flag that indicates whether more streaming distributions remain to be listed. If
        /// 			your results were truncated, you can make a follow-up pagination request using the
        /// 				Marker request parameter to retrieve more distributions in the list.
        ///
        public let isTruncated: Bool
        /// A complex type that contains one StreamingDistributionSummary element for
        /// 			each distribution that was created by the current Amazon Web Services account.
        @OptionalCustomCoding<ArrayCoder<_ItemsEncoding, StreamingDistributionSummary>>
        public var items: [StreamingDistributionSummary]?
        /// The value you provided for the Marker request parameter.
        public let marker: String
        /// The value you provided for the MaxItems request parameter.
        public let maxItems: Int
        /// If IsTruncated is true, this element is present and contains
        /// 			the value you can use for the Marker request parameter to continue listing
        /// 			your RTMP distributions where they left off.
        public let nextMarker: String?
        /// The number of streaming distributions that were created by the current Amazon Web Services account.
        ///
        public let quantity: Int

        public init(isTruncated: Bool, items: [StreamingDistributionSummary]? = nil, marker: String, maxItems: Int, nextMarker: String? = nil, quantity: Int) {
            self.isTruncated = isTruncated
            self.items = items
            self.marker = marker
            self.maxItems = maxItems
            self.nextMarker = nextMarker
            self.quantity = quantity
        }

        private enum CodingKeys: String, CodingKey {
            case isTruncated = "IsTruncated"
            case items = "Items"
            case marker = "Marker"
            case maxItems = "MaxItems"
            case nextMarker = "NextMarker"
            case quantity = "Quantity"
        }
    }

    public struct StreamingDistributionSummary: AWSDecodableShape {
        /// A complex type that contains information about CNAMEs (alternate domain names), if
        /// 			any, for this streaming distribution.
        public let aliases: Aliases
        /// The ARN (Amazon Resource Name) for the streaming distribution. For example:
        /// 				arn:aws:cloudfront::123456789012:streaming-distribution/EDFDVBD632BHDS5,
        /// 			where 123456789012 is your Amazon Web Services account ID.
        public let arn: String
        /// The comment originally specified when this distribution was created.
        public let comment: String
        /// The domain name corresponding to the distribution, for example,
        /// 				d111111abcdef8.cloudfront.net.
        public let domainName: String
        /// Whether the distribution is enabled to accept end user requests for content.
        public let enabled: Bool
        /// The identifier for the distribution, for example, EDFDVBD632BHDS5.
        public let id: String
        /// The date and time the distribution was last modified.
        public let lastModifiedTime: Date
        /// A complex type that contains information about price class for this streaming
        /// 			distribution.
        public let priceClass: PriceClass
        /// A complex type that contains information about the Amazon S3 bucket from which you want
        /// 			CloudFront to get your media files for distribution.
        public let s3Origin: S3Origin
        /// Indicates the current status of the distribution. When the status is
        /// 				Deployed, the distribution's information is fully propagated throughout
        /// 			the Amazon CloudFront system.
        public let status: String
        /// A complex type that specifies the Amazon Web Services accounts, if any, that you want to allow to
        /// 			create signed URLs for private content. If you want to require signed URLs in requests
        /// 			for objects in the target origin that match the PathPattern for this cache
        /// 			behavior, specify true for Enabled, and specify the applicable
        /// 			values for Quantity and Items.If you don't want to require
        /// 			signed URLs in requests for objects that match PathPattern, specify
        /// 				false for Enabled and 0 for
        /// 				Quantity. Omit Items. To add, change, or remove one or
        /// 			more trusted signers, change Enabled to true (if it's
        /// 			currently false), change Quantity as applicable, and specify
        /// 			all of the trusted signers that you want to include in the updated distribution. For more information, see Serving Private
        /// 				Content through CloudFront in the Amazon CloudFront Developer Guide.
        public let trustedSigners: TrustedSigners

        public init(aliases: Aliases, arn: String, comment: String, domainName: String, enabled: Bool, id: String, lastModifiedTime: Date, priceClass: PriceClass, s3Origin: S3Origin, status: String, trustedSigners: TrustedSigners) {
            self.aliases = aliases
            self.arn = arn
            self.comment = comment
            self.domainName = domainName
            self.enabled = enabled
            self.id = id
            self.lastModifiedTime = lastModifiedTime
            self.priceClass = priceClass
            self.s3Origin = s3Origin
            self.status = status
            self.trustedSigners = trustedSigners
        }

        private enum CodingKeys: String, CodingKey {
            case aliases = "Aliases"
            case arn = "ARN"
            case comment = "Comment"
            case domainName = "DomainName"
            case enabled = "Enabled"
            case id = "Id"
            case lastModifiedTime = "LastModifiedTime"
            case priceClass = "PriceClass"
            case s3Origin = "S3Origin"
            case status = "Status"
            case trustedSigners = "TrustedSigners"
        }
    }

    public struct StreamingLoggingConfig: AWSEncodableShape & AWSDecodableShape {
        /// The Amazon S3 bucket to store the access logs in, for example,
        /// 				myawslogbucket.s3.amazonaws.com.
        public let bucket: String
        /// Specifies whether you want CloudFront to save access logs to an Amazon S3 bucket. If you don't
        /// 			want to enable logging when you create a streaming distribution or if you want to
        /// 			disable logging for an existing streaming distribution, specify false for
        /// 				Enabled, and specify empty Bucket and Prefix
        /// 			elements. If you specify false for Enabled but you specify
        /// 			values for Bucket and Prefix, the values are automatically
        /// 			deleted.
        public let enabled: Bool
        /// An optional string that you want CloudFront to prefix to the access log filenames for this
        /// 			streaming distribution, for example, myprefix/. If you want to enable
        /// 			logging, but you don't want to specify a prefix, you still must include an empty
        /// 				Prefix element in the Logging element.
        public let prefix: String

        public init(bucket: String, enabled: Bool, prefix: String) {
            self.bucket = bucket
            self.enabled = enabled
            self.prefix = prefix
        }

        private enum CodingKeys: String, CodingKey {
            case bucket = "Bucket"
            case enabled = "Enabled"
            case prefix = "Prefix"
        }
    }

    public struct Tag: AWSEncodableShape & AWSDecodableShape {
        /// A string that contains Tag key. The string length should be between 1 and 128 characters. Valid characters include
        /// 				a-z, A-Z, 0-9, space, and the special
        /// 			characters _ - . : / = + @.
        public let key: String
        /// A string that contains an optional Tag value. The string length should be between 0 and 256 characters. Valid characters include
        /// 				a-z, A-Z, 0-9, space, and the special
        /// 			characters _ - . : / = + @.
        public let value: String?

        public init(key: String, value: String? = nil) {
            self.key = key
            self.value = value
        }

        public func validate(name: String) throws {
            try self.validate(self.key, name: "key", parent: name, max: 128)
            try self.validate(self.key, name: "key", parent: name, min: 1)
            try self.validate(self.key, name: "key", parent: name, pattern: "^([\\p{L}\\p{Z}\\p{N}_.:/=+\\-@]*)$")
            try self.validate(self.value, name: "value", parent: name, max: 256)
            try self.validate(self.value, name: "value", parent: name, pattern: "^([\\p{L}\\p{Z}\\p{N}_.:/=+\\-@]*)$")
        }

        private enum CodingKeys: String, CodingKey {
            case key = "Key"
            case value = "Value"
        }
    }

    public struct TagKeys: AWSEncodableShape {
        public struct _ItemsEncoding: ArrayCoderProperties { public static let member = "Key" }

        /// A complex type that contains Tag key elements.
        @OptionalCustomCoding<ArrayCoder<_ItemsEncoding, String>>
        public var items: [String]?

        public init(items: [String]? = nil) {
            self.items = items
        }

        public func validate(name: String) throws {
            try self.items?.forEach {
                try validate($0, name: "items[]", parent: name, max: 128)
                try validate($0, name: "items[]", parent: name, min: 1)
                try validate($0, name: "items[]", parent: name, pattern: "^([\\p{L}\\p{Z}\\p{N}_.:/=+\\-@]*)$")
            }
        }

        private enum CodingKeys: String, CodingKey {
            case items = "Items"
        }
    }

    public struct TagResourceRequest: AWSEncodableShape {
        public static let _xmlRootNodeName: String? = "Tags"
        /// An ARN of a CloudFront resource.
        public let resource: String
        /// A complex type that contains zero or more Tag elements.
        public let tags: Tags

        public init(resource: String, tags: Tags) {
            self.resource = resource
            self.tags = tags
        }

        public func encode(to encoder: Encoder) throws {
            let request = encoder.userInfo[.awsRequest]! as! RequestEncodingContainer
            var container = encoder.singleValueContainer()
            request.encodeQuery(self.resource, key: "Resource")
            try container.encode(self.tags)
        }

        public func validate(name: String) throws {
            try self.validate(self.resource, name: "resource", parent: name, pattern: "^arn:aws(-cn)?:cloudfront::[0-9]+:")
            try self.tags.validate(name: "\(name).tags")
        }

        private enum CodingKeys: CodingKey {}
    }

    public struct Tags: AWSEncodableShape & AWSDecodableShape {
        public struct _ItemsEncoding: ArrayCoderProperties { public static let member = "Tag" }

        /// A complex type that contains Tag elements.
        @OptionalCustomCoding<ArrayCoder<_ItemsEncoding, Tag>>
        public var items: [Tag]?

        public init(items: [Tag]? = nil) {
            self.items = items
        }

        public func validate(name: String) throws {
            try self.items?.forEach {
                try $0.validate(name: "\(name).items[]")
            }
        }

        private enum CodingKeys: String, CodingKey {
            case items = "Items"
        }
    }

    public struct TestFunctionRequest: AWSEncodableShape {
        /// The event object to test the function with. For more information about the structure
        /// 			of the event object, see Testing functions in the Amazon CloudFront Developer Guide.
        public let eventObject: AWSBase64Data
        /// The current version (ETag value) of the function that you are testing,
        /// 			which you can get using DescribeFunction.
        public let ifMatch: String
        /// The name of the function that you are testing.
        public let name: String
        /// The stage of the function that you are testing, either DEVELOPMENT or
        /// 				LIVE.
        public let stage: FunctionStage?

        public init(eventObject: AWSBase64Data, ifMatch: String, name: String, stage: FunctionStage? = nil) {
            self.eventObject = eventObject
            self.ifMatch = ifMatch
            self.name = name
            self.stage = stage
        }

        public func encode(to encoder: Encoder) throws {
            let request = encoder.userInfo[.awsRequest]! as! RequestEncodingContainer
            var container = encoder.container(keyedBy: CodingKeys.self)
            try container.encode(self.eventObject, forKey: .eventObject)
            request.encodeHeader(self.ifMatch, key: "If-Match")
            request.encodePath(self.name, key: "Name")
            try container.encodeIfPresent(self.stage, forKey: .stage)
        }

        public func validate(name: String) throws {
            try self.validate(self.eventObject, name: "eventObject", parent: name, max: 40960)
        }

        private enum CodingKeys: String, CodingKey {
            case eventObject = "EventObject"
            case stage = "Stage"
        }
    }

    public struct TestFunctionResult: AWSDecodableShape {
        /// An object that represents the result of running the function with the provided event
        /// 			object.
        public let testResult: TestResult

        public init(testResult: TestResult) {
            self.testResult = testResult
        }

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            self.testResult = try container.decode(TestResult.self)
        }

        private enum CodingKeys: CodingKey {}
    }

    public struct TestResult: AWSDecodableShape {
        /// The amount of time that the function took to run as a percentage of the maximum
        /// 			allowed time. For example, a compute utilization of 35 means that the function completed
        /// 			in 35% of the maximum allowed time.
        public let computeUtilization: String?
        /// If the result of testing the function was an error, this field contains the error
        /// 			message.
        public let functionErrorMessage: String?
        /// Contains the log lines that the function wrote (if any) when running the test.
        @OptionalCustomCoding<StandardArrayCoder<String>>
        public var functionExecutionLogs: [String]?
        /// The event object returned by the function. For more information about the structure of
        /// 			the event object, see Event
        /// 				object structure in the Amazon CloudFront Developer Guide.
        public let functionOutput: String?
        /// Contains configuration information and metadata about the CloudFront function that was
        /// 			tested.
        public let functionSummary: FunctionSummary?

        public init(computeUtilization: String? = nil, functionErrorMessage: String? = nil, functionExecutionLogs: [String]? = nil, functionOutput: String? = nil, functionSummary: FunctionSummary? = nil) {
            self.computeUtilization = computeUtilization
            self.functionErrorMessage = functionErrorMessage
            self.functionExecutionLogs = functionExecutionLogs
            self.functionOutput = functionOutput
            self.functionSummary = functionSummary
        }

        private enum CodingKeys: String, CodingKey {
            case computeUtilization = "ComputeUtilization"
            case functionErrorMessage = "FunctionErrorMessage"
            case functionExecutionLogs = "FunctionExecutionLogs"
            case functionOutput = "FunctionOutput"
            case functionSummary = "FunctionSummary"
        }
    }

    public struct TrafficConfig: AWSEncodableShape & AWSDecodableShape {
        /// Determines which HTTP requests are sent to the staging distribution.
        public let singleHeaderConfig: ContinuousDeploymentSingleHeaderConfig?
        /// Contains the percentage of traffic to send to the staging distribution.
        public let singleWeightConfig: ContinuousDeploymentSingleWeightConfig?
        /// The type of traffic configuration.
        public let type: ContinuousDeploymentPolicyType

        public init(singleHeaderConfig: ContinuousDeploymentSingleHeaderConfig? = nil, singleWeightConfig: ContinuousDeploymentSingleWeightConfig? = nil, type: ContinuousDeploymentPolicyType) {
            self.singleHeaderConfig = singleHeaderConfig
            self.singleWeightConfig = singleWeightConfig
            self.type = type
        }

        private enum CodingKeys: String, CodingKey {
            case singleHeaderConfig = "SingleHeaderConfig"
            case singleWeightConfig = "SingleWeightConfig"
            case type = "Type"
        }
    }

    public struct TrustedKeyGroups: AWSEncodableShape & AWSDecodableShape {
        public struct _ItemsEncoding: ArrayCoderProperties { public static let member = "KeyGroup" }

        /// This field is true if any of the key groups in the list have public keys
        /// 			that CloudFront can use to verify the signatures of signed URLs and signed cookies. If not,
        /// 			this field is false.
        public let enabled: Bool
        /// A list of key groups identifiers.
        @OptionalCustomCoding<ArrayCoder<_ItemsEncoding, String>>
        public var items: [String]?
        /// The number of key groups in the list.
        public let quantity: Int

        public init(enabled: Bool, items: [String]? = nil, quantity: Int) {
            self.enabled = enabled
            self.items = items
            self.quantity = quantity
        }

        private enum CodingKeys: String, CodingKey {
            case enabled = "Enabled"
            case items = "Items"
            case quantity = "Quantity"
        }
    }

    public struct TrustedSigners: AWSEncodableShape & AWSDecodableShape {
        public struct _ItemsEncoding: ArrayCoderProperties { public static let member = "AwsAccountNumber" }

        /// This field is true if any of the Amazon Web Services accounts in the list are configured as
        /// 			trusted signers. If not, this field is false.
        public let enabled: Bool
        /// A list of Amazon Web Services account identifiers.
        @OptionalCustomCoding<ArrayCoder<_ItemsEncoding, String>>
        public var items: [String]?
        /// The number of Amazon Web Services accounts in the list.
        public let quantity: Int

        public init(enabled: Bool, items: [String]? = nil, quantity: Int) {
            self.enabled = enabled
            self.items = items
            self.quantity = quantity
        }

        private enum CodingKeys: String, CodingKey {
            case enabled = "Enabled"
            case items = "Items"
            case quantity = "Quantity"
        }
    }

    public struct UntagResourceRequest: AWSEncodableShape {
        public static let _xmlRootNodeName: String? = "TagKeys"
        /// An ARN of a CloudFront resource.
        public let resource: String
        /// A complex type that contains zero or more Tag key elements.
        public let tagKeys: TagKeys

        public init(resource: String, tagKeys: TagKeys) {
            self.resource = resource
            self.tagKeys = tagKeys
        }

        public func encode(to encoder: Encoder) throws {
            let request = encoder.userInfo[.awsRequest]! as! RequestEncodingContainer
            var container = encoder.singleValueContainer()
            request.encodeQuery(self.resource, key: "Resource")
            try container.encode(self.tagKeys)
        }

        public func validate(name: String) throws {
            try self.validate(self.resource, name: "resource", parent: name, pattern: "^arn:aws(-cn)?:cloudfront::[0-9]+:")
            try self.tagKeys.validate(name: "\(name).tagKeys")
        }

        private enum CodingKeys: CodingKey {}
    }

    public struct UpdateCachePolicyRequest: AWSEncodableShape {
        public static let _xmlRootNodeName: String? = "CachePolicyConfig"
        /// A cache policy configuration.
        public let cachePolicyConfig: CachePolicyConfig
        /// The unique identifier for the cache policy that you are updating. The identifier is
        /// 			returned in a cache behavior's CachePolicyId field in the response to
        /// 				GetDistributionConfig.
        public let id: String
        /// The version of the cache policy that you are updating. The version is returned in the
        /// 			cache policy's ETag field in the response to
        /// 				GetCachePolicyConfig.
        public let ifMatch: String?

        public init(cachePolicyConfig: CachePolicyConfig, id: String, ifMatch: String? = nil) {
            self.cachePolicyConfig = cachePolicyConfig
            self.id = id
            self.ifMatch = ifMatch
        }

        public func encode(to encoder: Encoder) throws {
            let request = encoder.userInfo[.awsRequest]! as! RequestEncodingContainer
            var container = encoder.singleValueContainer()
            try container.encode(self.cachePolicyConfig)
            request.encodePath(self.id, key: "Id")
            request.encodeHeader(self.ifMatch, key: "If-Match")
        }

        private enum CodingKeys: CodingKey {}
    }

    public struct UpdateCachePolicyResult: AWSDecodableShape {
        /// A cache policy.
        public let cachePolicy: CachePolicy
        /// The current version of the cache policy.
        public let eTag: String?

        public init(cachePolicy: CachePolicy, eTag: String? = nil) {
            self.cachePolicy = cachePolicy
            self.eTag = eTag
        }

        public init(from decoder: Decoder) throws {
            let response = decoder.userInfo[.awsResponse]! as! ResponseDecodingContainer
            let container = try decoder.singleValueContainer()
            self.cachePolicy = try container.decode(CachePolicy.self)
            self.eTag = try response.decodeHeaderIfPresent(String.self, key: "ETag")
        }

        private enum CodingKeys: CodingKey {}
    }

    public struct UpdateCloudFrontOriginAccessIdentityRequest: AWSEncodableShape {
        public static let _xmlRootNodeName: String? = "CloudFrontOriginAccessIdentityConfig"
        /// The identity's configuration information.
        public let cloudFrontOriginAccessIdentityConfig: CloudFrontOriginAccessIdentityConfig
        /// The identity's id.
        public let id: String
        /// The value of the ETag header that you received when retrieving the
        /// 			identity's configuration. For example: E2QWRUHAPOMQZL.
        public let ifMatch: String?

        public init(cloudFrontOriginAccessIdentityConfig: CloudFrontOriginAccessIdentityConfig, id: String, ifMatch: String? = nil) {
            self.cloudFrontOriginAccessIdentityConfig = cloudFrontOriginAccessIdentityConfig
            self.id = id
            self.ifMatch = ifMatch
        }

        public func encode(to encoder: Encoder) throws {
            let request = encoder.userInfo[.awsRequest]! as! RequestEncodingContainer
            var container = encoder.singleValueContainer()
            try container.encode(self.cloudFrontOriginAccessIdentityConfig)
            request.encodePath(self.id, key: "Id")
            request.encodeHeader(self.ifMatch, key: "If-Match")
        }

        private enum CodingKeys: CodingKey {}
    }

    public struct UpdateCloudFrontOriginAccessIdentityResult: AWSDecodableShape {
        /// The origin access identity's information.
        public let cloudFrontOriginAccessIdentity: CloudFrontOriginAccessIdentity
        /// The current version of the configuration. For example:
        /// 			E2QWRUHAPOMQZL.
        public let eTag: String?

        public init(cloudFrontOriginAccessIdentity: CloudFrontOriginAccessIdentity, eTag: String? = nil) {
            self.cloudFrontOriginAccessIdentity = cloudFrontOriginAccessIdentity
            self.eTag = eTag
        }

        public init(from decoder: Decoder) throws {
            let response = decoder.userInfo[.awsResponse]! as! ResponseDecodingContainer
            let container = try decoder.singleValueContainer()
            self.cloudFrontOriginAccessIdentity = try container.decode(CloudFrontOriginAccessIdentity.self)
            self.eTag = try response.decodeHeaderIfPresent(String.self, key: "ETag")
        }

        private enum CodingKeys: CodingKey {}
    }

    public struct UpdateContinuousDeploymentPolicyRequest: AWSEncodableShape {
        public static let _xmlRootNodeName: String? = "ContinuousDeploymentPolicyConfig"
        /// The continuous deployment policy configuration.
        public let continuousDeploymentPolicyConfig: ContinuousDeploymentPolicyConfig
        /// The identifier of the continuous deployment policy that you are updating.
        public let id: String
        /// The current version (ETag value) of the continuous deployment policy that
        /// 			you are updating.
        public let ifMatch: String?

        public init(continuousDeploymentPolicyConfig: ContinuousDeploymentPolicyConfig, id: String, ifMatch: String? = nil) {
            self.continuousDeploymentPolicyConfig = continuousDeploymentPolicyConfig
            self.id = id
            self.ifMatch = ifMatch
        }

        public func encode(to encoder: Encoder) throws {
            let request = encoder.userInfo[.awsRequest]! as! RequestEncodingContainer
            var container = encoder.singleValueContainer()
            try container.encode(self.continuousDeploymentPolicyConfig)
            request.encodePath(self.id, key: "Id")
            request.encodeHeader(self.ifMatch, key: "If-Match")
        }

        private enum CodingKeys: CodingKey {}
    }

    public struct UpdateContinuousDeploymentPolicyResult: AWSDecodableShape {
        /// A continuous deployment policy.
        public let continuousDeploymentPolicy: ContinuousDeploymentPolicy
        /// The version identifier for the current version of the continuous deployment
        /// 			policy.
        public let eTag: String?

        public init(continuousDeploymentPolicy: ContinuousDeploymentPolicy, eTag: String? = nil) {
            self.continuousDeploymentPolicy = continuousDeploymentPolicy
            self.eTag = eTag
        }

        public init(from decoder: Decoder) throws {
            let response = decoder.userInfo[.awsResponse]! as! ResponseDecodingContainer
            let container = try decoder.singleValueContainer()
            self.continuousDeploymentPolicy = try container.decode(ContinuousDeploymentPolicy.self)
            self.eTag = try response.decodeHeaderIfPresent(String.self, key: "ETag")
        }

        private enum CodingKeys: CodingKey {}
    }

    public struct UpdateDistributionRequest: AWSEncodableShape {
        public static let _xmlRootNodeName: String? = "DistributionConfig"
        /// The distribution's configuration information.
        public let distributionConfig: DistributionConfig
        /// The distribution's id.
        public let id: String
        /// The value of the ETag header that you received when retrieving the
        /// 			distribution's configuration. For example: E2QWRUHAPOMQZL.
        public let ifMatch: String?

        public init(distributionConfig: DistributionConfig, id: String, ifMatch: String? = nil) {
            self.distributionConfig = distributionConfig
            self.id = id
            self.ifMatch = ifMatch
        }

        public func encode(to encoder: Encoder) throws {
            let request = encoder.userInfo[.awsRequest]! as! RequestEncodingContainer
            var container = encoder.singleValueContainer()
            try container.encode(self.distributionConfig)
            request.encodePath(self.id, key: "Id")
            request.encodeHeader(self.ifMatch, key: "If-Match")
        }

        public func validate(name: String) throws {
            try self.distributionConfig.validate(name: "\(name).distributionConfig")
        }

        private enum CodingKeys: CodingKey {}
    }

    public struct UpdateDistributionResult: AWSDecodableShape {
        /// The distribution's information.
        public let distribution: Distribution
        /// The current version of the configuration. For example:
        /// 			E2QWRUHAPOMQZL.
        public let eTag: String?

        public init(distribution: Distribution, eTag: String? = nil) {
            self.distribution = distribution
            self.eTag = eTag
        }

        public init(from decoder: Decoder) throws {
            let response = decoder.userInfo[.awsResponse]! as! ResponseDecodingContainer
            let container = try decoder.singleValueContainer()
            self.distribution = try container.decode(Distribution.self)
            self.eTag = try response.decodeHeaderIfPresent(String.self, key: "ETag")
        }

        private enum CodingKeys: CodingKey {}
    }

    public struct UpdateDistributionWithStagingConfigRequest: AWSEncodableShape {
        /// The identifier of the primary distribution to which you are copying a staging distribution's
        /// 			configuration.
        public let id: String
        /// The current versions (ETag values) of both primary and staging distributions.
        /// 			Provide these in the following format:  ,
        public let ifMatch: String?
        /// The identifier of the staging distribution whose configuration you are copying to the primary distribution.
        public let stagingDistributionId: String?

        public init(id: String, ifMatch: String? = nil, stagingDistributionId: String? = nil) {
            self.id = id
            self.ifMatch = ifMatch
            self.stagingDistributionId = stagingDistributionId
        }

        public func encode(to encoder: Encoder) throws {
            let request = encoder.userInfo[.awsRequest]! as! RequestEncodingContainer
            _ = encoder.container(keyedBy: CodingKeys.self)
            request.encodePath(self.id, key: "Id")
            request.encodeHeader(self.ifMatch, key: "If-Match")
            request.encodeQuery(self.stagingDistributionId, key: "StagingDistributionId")
        }

        private enum CodingKeys: CodingKey {}
    }

    public struct UpdateDistributionWithStagingConfigResult: AWSDecodableShape {
        public let distribution: Distribution
        /// The current version of the primary distribution (after it's updated).
        public let eTag: String?

        public init(distribution: Distribution, eTag: String? = nil) {
            self.distribution = distribution
            self.eTag = eTag
        }

        public init(from decoder: Decoder) throws {
            let response = decoder.userInfo[.awsResponse]! as! ResponseDecodingContainer
            let container = try decoder.singleValueContainer()
            self.distribution = try container.decode(Distribution.self)
            self.eTag = try response.decodeHeaderIfPresent(String.self, key: "ETag")
        }

        private enum CodingKeys: CodingKey {}
    }

    public struct UpdateFieldLevelEncryptionConfigRequest: AWSEncodableShape {
        public static let _xmlRootNodeName: String? = "FieldLevelEncryptionConfig"
        /// Request to update a field-level encryption configuration.
        public let fieldLevelEncryptionConfig: FieldLevelEncryptionConfig
        /// The ID of the configuration you want to update.
        public let id: String
        /// The value of the ETag header that you received when retrieving the
        /// 			configuration identity to update. For example: E2QWRUHAPOMQZL.
        public let ifMatch: String?

        public init(fieldLevelEncryptionConfig: FieldLevelEncryptionConfig, id: String, ifMatch: String? = nil) {
            self.fieldLevelEncryptionConfig = fieldLevelEncryptionConfig
            self.id = id
            self.ifMatch = ifMatch
        }

        public func encode(to encoder: Encoder) throws {
            let request = encoder.userInfo[.awsRequest]! as! RequestEncodingContainer
            var container = encoder.singleValueContainer()
            try container.encode(self.fieldLevelEncryptionConfig)
            request.encodePath(self.id, key: "Id")
            request.encodeHeader(self.ifMatch, key: "If-Match")
        }

        private enum CodingKeys: CodingKey {}
    }

    public struct UpdateFieldLevelEncryptionConfigResult: AWSDecodableShape {
        /// The value of the ETag header that you received when updating the
        /// 			configuration. For example: E2QWRUHAPOMQZL.
        public let eTag: String?
        /// Return the results of updating the configuration.
        public let fieldLevelEncryption: FieldLevelEncryption

        public init(eTag: String? = nil, fieldLevelEncryption: FieldLevelEncryption) {
            self.eTag = eTag
            self.fieldLevelEncryption = fieldLevelEncryption
        }

        public init(from decoder: Decoder) throws {
            let response = decoder.userInfo[.awsResponse]! as! ResponseDecodingContainer
            let container = try decoder.singleValueContainer()
            self.eTag = try response.decodeHeaderIfPresent(String.self, key: "ETag")
            self.fieldLevelEncryption = try container.decode(FieldLevelEncryption.self)
        }

        private enum CodingKeys: CodingKey {}
    }

    public struct UpdateFieldLevelEncryptionProfileRequest: AWSEncodableShape {
        public static let _xmlRootNodeName: String? = "FieldLevelEncryptionProfileConfig"
        /// Request to update a field-level encryption profile.
        public let fieldLevelEncryptionProfileConfig: FieldLevelEncryptionProfileConfig
        /// The ID of the field-level encryption profile request.
        public let id: String
        /// The value of the ETag header that you received when retrieving the
        /// 			profile identity to update. For example: E2QWRUHAPOMQZL.
        public let ifMatch: String?

        public init(fieldLevelEncryptionProfileConfig: FieldLevelEncryptionProfileConfig, id: String, ifMatch: String? = nil) {
            self.fieldLevelEncryptionProfileConfig = fieldLevelEncryptionProfileConfig
            self.id = id
            self.ifMatch = ifMatch
        }

        public func encode(to encoder: Encoder) throws {
            let request = encoder.userInfo[.awsRequest]! as! RequestEncodingContainer
            var container = encoder.singleValueContainer()
            try container.encode(self.fieldLevelEncryptionProfileConfig)
            request.encodePath(self.id, key: "Id")
            request.encodeHeader(self.ifMatch, key: "If-Match")
        }

        private enum CodingKeys: CodingKey {}
    }

    public struct UpdateFieldLevelEncryptionProfileResult: AWSDecodableShape {
        /// The result of the field-level encryption profile request.
        public let eTag: String?
        /// Return the results of updating the profile.
        public let fieldLevelEncryptionProfile: FieldLevelEncryptionProfile

        public init(eTag: String? = nil, fieldLevelEncryptionProfile: FieldLevelEncryptionProfile) {
            self.eTag = eTag
            self.fieldLevelEncryptionProfile = fieldLevelEncryptionProfile
        }

        public init(from decoder: Decoder) throws {
            let response = decoder.userInfo[.awsResponse]! as! ResponseDecodingContainer
            let container = try decoder.singleValueContainer()
            self.eTag = try response.decodeHeaderIfPresent(String.self, key: "ETag")
            self.fieldLevelEncryptionProfile = try container.decode(FieldLevelEncryptionProfile.self)
        }

        private enum CodingKeys: CodingKey {}
    }

    public struct UpdateFunctionRequest: AWSEncodableShape {
        /// The function code. For more information about writing a CloudFront function, see Writing
        /// 				function code for CloudFront Functions in the
        /// 			Amazon CloudFront Developer Guide.
        public let functionCode: AWSBase64Data
        /// Configuration information about the function.
        public let functionConfig: FunctionConfig
        /// The current version (ETag value) of the function that you are updating,
        /// 			which you can get using DescribeFunction.
        public let ifMatch: String
        /// The name of the function that you are updating.
        public let name: String

        public init(functionCode: AWSBase64Data, functionConfig: FunctionConfig, ifMatch: String, name: String) {
            self.functionCode = functionCode
            self.functionConfig = functionConfig
            self.ifMatch = ifMatch
            self.name = name
        }

        public func encode(to encoder: Encoder) throws {
            let request = encoder.userInfo[.awsRequest]! as! RequestEncodingContainer
            var container = encoder.container(keyedBy: CodingKeys.self)
            try container.encode(self.functionCode, forKey: .functionCode)
            try container.encode(self.functionConfig, forKey: .functionConfig)
            request.encodeHeader(self.ifMatch, key: "If-Match")
            request.encodePath(self.name, key: "Name")
        }

        public func validate(name: String) throws {
            try self.validate(self.functionCode, name: "functionCode", parent: name, max: 40960)
            try self.validate(self.functionCode, name: "functionCode", parent: name, min: 1)
            try self.functionConfig.validate(name: "\(name).functionConfig")
        }

        private enum CodingKeys: String, CodingKey {
            case functionCode = "FunctionCode"
            case functionConfig = "FunctionConfig"
        }
    }

    public struct UpdateFunctionResult: AWSDecodableShape {
        /// The version identifier for the current version of the CloudFront function.
        public let eTag: String?
        /// Contains configuration information and metadata about a CloudFront function.
        public let functionSummary: FunctionSummary

        public init(eTag: String? = nil, functionSummary: FunctionSummary) {
            self.eTag = eTag
            self.functionSummary = functionSummary
        }

        public init(from decoder: Decoder) throws {
            let response = decoder.userInfo[.awsResponse]! as! ResponseDecodingContainer
            let container = try decoder.singleValueContainer()
            self.eTag = try response.decodeHeaderIfPresent(String.self, key: "ETtag")
            self.functionSummary = try container.decode(FunctionSummary.self)
        }

        private enum CodingKeys: CodingKey {}
    }

    public struct UpdateKeyGroupRequest: AWSEncodableShape {
        public static let _xmlRootNodeName: String? = "KeyGroupConfig"
        /// The identifier of the key group that you are updating.
        public let id: String
        /// The version of the key group that you are updating. The version is the key group's
        /// 				ETag value.
        public let ifMatch: String?
        /// The key group configuration.
        public let keyGroupConfig: KeyGroupConfig

        public init(id: String, ifMatch: String? = nil, keyGroupConfig: KeyGroupConfig) {
            self.id = id
            self.ifMatch = ifMatch
            self.keyGroupConfig = keyGroupConfig
        }

        public func encode(to encoder: Encoder) throws {
            let request = encoder.userInfo[.awsRequest]! as! RequestEncodingContainer
            var container = encoder.singleValueContainer()
            request.encodePath(self.id, key: "Id")
            request.encodeHeader(self.ifMatch, key: "If-Match")
            try container.encode(self.keyGroupConfig)
        }

        private enum CodingKeys: CodingKey {}
    }

    public struct UpdateKeyGroupResult: AWSDecodableShape {
        /// The identifier for this version of the key group.
        public let eTag: String?
        /// The key group that was just updated.
        public let keyGroup: KeyGroup

        public init(eTag: String? = nil, keyGroup: KeyGroup) {
            self.eTag = eTag
            self.keyGroup = keyGroup
        }

        public init(from decoder: Decoder) throws {
            let response = decoder.userInfo[.awsResponse]! as! ResponseDecodingContainer
            let container = try decoder.singleValueContainer()
            self.eTag = try response.decodeHeaderIfPresent(String.self, key: "ETag")
            self.keyGroup = try container.decode(KeyGroup.self)
        }

        private enum CodingKeys: CodingKey {}
    }

    public struct UpdateKeyValueStoreRequest: AWSEncodableShape {
        /// The comment of the Key Value Store to update.
        public let comment: String
        /// The Key Value Store to update, if a match occurs.
        public let ifMatch: String
        /// The name of the Key Value Store to update.
        public let name: String

        public init(comment: String, ifMatch: String, name: String) {
            self.comment = comment
            self.ifMatch = ifMatch
            self.name = name
        }

        public func encode(to encoder: Encoder) throws {
            let request = encoder.userInfo[.awsRequest]! as! RequestEncodingContainer
            var container = encoder.container(keyedBy: CodingKeys.self)
            try container.encode(self.comment, forKey: .comment)
            request.encodeHeader(self.ifMatch, key: "If-Match")
            request.encodePath(self.name, key: "Name")
        }

        public func validate(name: String) throws {
            try self.validate(self.comment, name: "comment", parent: name, max: 128)
            try self.validate(self.name, name: "name", parent: name, max: 64)
            try self.validate(self.name, name: "name", parent: name, min: 1)
            try self.validate(self.name, name: "name", parent: name, pattern: "^[a-zA-Z0-9-_]{1,64}$")
        }

        private enum CodingKeys: String, CodingKey {
            case comment = "Comment"
        }
    }

    public struct UpdateKeyValueStoreResult: AWSDecodableShape {
        /// The ETag of the resulting Key Value Store.
        public let eTag: String?
        /// The resulting Key Value Store to update.
        public let keyValueStore: KeyValueStore

        public init(eTag: String? = nil, keyValueStore: KeyValueStore) {
            self.eTag = eTag
            self.keyValueStore = keyValueStore
        }

        public init(from decoder: Decoder) throws {
            let response = decoder.userInfo[.awsResponse]! as! ResponseDecodingContainer
            let container = try decoder.singleValueContainer()
            self.eTag = try response.decodeHeaderIfPresent(String.self, key: "ETag")
            self.keyValueStore = try container.decode(KeyValueStore.self)
        }

        private enum CodingKeys: CodingKey {}
    }

    public struct UpdateOriginAccessControlRequest: AWSEncodableShape {
        public static let _xmlRootNodeName: String? = "OriginAccessControlConfig"
        /// The unique identifier of the origin access control that you are updating.
        public let id: String
        /// The current version (ETag value) of the origin access control that you
        /// 			are updating.
        public let ifMatch: String?
        /// An origin access control.
        public let originAccessControlConfig: OriginAccessControlConfig

        public init(id: String, ifMatch: String? = nil, originAccessControlConfig: OriginAccessControlConfig) {
            self.id = id
            self.ifMatch = ifMatch
            self.originAccessControlConfig = originAccessControlConfig
        }

        public func encode(to encoder: Encoder) throws {
            let request = encoder.userInfo[.awsRequest]! as! RequestEncodingContainer
            var container = encoder.singleValueContainer()
            request.encodePath(self.id, key: "Id")
            request.encodeHeader(self.ifMatch, key: "If-Match")
            try container.encode(self.originAccessControlConfig)
        }

        private enum CodingKeys: CodingKey {}
    }

    public struct UpdateOriginAccessControlResult: AWSDecodableShape {
        /// The new version of the origin access control after it has been updated.
        public let eTag: String?
        /// The origin access control after it has been updated.
        public let originAccessControl: OriginAccessControl

        public init(eTag: String? = nil, originAccessControl: OriginAccessControl) {
            self.eTag = eTag
            self.originAccessControl = originAccessControl
        }

        public init(from decoder: Decoder) throws {
            let response = decoder.userInfo[.awsResponse]! as! ResponseDecodingContainer
            let container = try decoder.singleValueContainer()
            self.eTag = try response.decodeHeaderIfPresent(String.self, key: "ETag")
            self.originAccessControl = try container.decode(OriginAccessControl.self)
        }

        private enum CodingKeys: CodingKey {}
    }

    public struct UpdateOriginRequestPolicyRequest: AWSEncodableShape {
        public static let _xmlRootNodeName: String? = "OriginRequestPolicyConfig"
        /// The unique identifier for the origin request policy that you are updating. The
        /// 			identifier is returned in a cache behavior's OriginRequestPolicyId field in
        /// 			the response to GetDistributionConfig.
        public let id: String
        /// The version of the origin request policy that you are updating. The version is
        /// 			returned in the origin request policy's ETag field in the response to
        /// 				GetOriginRequestPolicyConfig.
        public let ifMatch: String?
        /// An origin request policy configuration.
        public let originRequestPolicyConfig: OriginRequestPolicyConfig

        public init(id: String, ifMatch: String? = nil, originRequestPolicyConfig: OriginRequestPolicyConfig) {
            self.id = id
            self.ifMatch = ifMatch
            self.originRequestPolicyConfig = originRequestPolicyConfig
        }

        public func encode(to encoder: Encoder) throws {
            let request = encoder.userInfo[.awsRequest]! as! RequestEncodingContainer
            var container = encoder.singleValueContainer()
            request.encodePath(self.id, key: "Id")
            request.encodeHeader(self.ifMatch, key: "If-Match")
            try container.encode(self.originRequestPolicyConfig)
        }

        private enum CodingKeys: CodingKey {}
    }

    public struct UpdateOriginRequestPolicyResult: AWSDecodableShape {
        /// The current version of the origin request policy.
        public let eTag: String?
        /// An origin request policy.
        public let originRequestPolicy: OriginRequestPolicy

        public init(eTag: String? = nil, originRequestPolicy: OriginRequestPolicy) {
            self.eTag = eTag
            self.originRequestPolicy = originRequestPolicy
        }

        public init(from decoder: Decoder) throws {
            let response = decoder.userInfo[.awsResponse]! as! ResponseDecodingContainer
            let container = try decoder.singleValueContainer()
            self.eTag = try response.decodeHeaderIfPresent(String.self, key: "ETag")
            self.originRequestPolicy = try container.decode(OriginRequestPolicy.self)
        }

        private enum CodingKeys: CodingKey {}
    }

    public struct UpdatePublicKeyRequest: AWSEncodableShape {
        public static let _xmlRootNodeName: String? = "PublicKeyConfig"
        /// The identifier of the public key that you are updating.
        public let id: String
        /// The value of the ETag header that you received when retrieving the public
        /// 			key to update. For example: E2QWRUHAPOMQZL.
        public let ifMatch: String?
        /// A public key configuration.
        public let publicKeyConfig: PublicKeyConfig

        public init(id: String, ifMatch: String? = nil, publicKeyConfig: PublicKeyConfig) {
            self.id = id
            self.ifMatch = ifMatch
            self.publicKeyConfig = publicKeyConfig
        }

        public func encode(to encoder: Encoder) throws {
            let request = encoder.userInfo[.awsRequest]! as! RequestEncodingContainer
            var container = encoder.singleValueContainer()
            request.encodePath(self.id, key: "Id")
            request.encodeHeader(self.ifMatch, key: "If-Match")
            try container.encode(self.publicKeyConfig)
        }

        private enum CodingKeys: CodingKey {}
    }

    public struct UpdatePublicKeyResult: AWSDecodableShape {
        /// The identifier of the current version of the public key.
        public let eTag: String?
        /// The public key.
        public let publicKey: PublicKey

        public init(eTag: String? = nil, publicKey: PublicKey) {
            self.eTag = eTag
            self.publicKey = publicKey
        }

        public init(from decoder: Decoder) throws {
            let response = decoder.userInfo[.awsResponse]! as! ResponseDecodingContainer
            let container = try decoder.singleValueContainer()
            self.eTag = try response.decodeHeaderIfPresent(String.self, key: "ETag")
            self.publicKey = try container.decode(PublicKey.self)
        }

        private enum CodingKeys: CodingKey {}
    }

    public struct UpdateRealtimeLogConfigRequest: AWSEncodableShape {
        public struct _FieldsEncoding: ArrayCoderProperties { public static let member = "Field" }

        /// The Amazon Resource Name (ARN) for this real-time log configuration.
        public let arn: String?
        /// Contains information about the Amazon Kinesis data stream where you are sending real-time
        /// 			log data.
        @OptionalCustomCoding<StandardArrayCoder<EndPoint>>
        public var endPoints: [EndPoint]?
        /// A list of fields to include in each real-time log record. For more information about fields, see Real-time log configuration fields in the
        /// 				Amazon CloudFront Developer Guide.
        @OptionalCustomCoding<ArrayCoder<_FieldsEncoding, String>>
        public var fields: [String]?
        /// The name for this real-time log configuration.
        public let name: String?
        /// The sampling rate for this real-time log configuration. The sampling rate determines
        /// 			the percentage of viewer requests that are represented in the real-time log data. You
        /// 			must provide an integer between 1 and 100, inclusive.
        public let samplingRate: Int64?

        public init(arn: String? = nil, endPoints: [EndPoint]? = nil, fields: [String]? = nil, name: String? = nil, samplingRate: Int64? = nil) {
            self.arn = arn
            self.endPoints = endPoints
            self.fields = fields
            self.name = name
            self.samplingRate = samplingRate
        }

        private enum CodingKeys: String, CodingKey {
            case arn = "ARN"
            case endPoints = "EndPoints"
            case fields = "Fields"
            case name = "Name"
            case samplingRate = "SamplingRate"
        }
    }

    public struct UpdateRealtimeLogConfigResult: AWSDecodableShape {
        /// A real-time log configuration.
        public let realtimeLogConfig: RealtimeLogConfig?

        public init(realtimeLogConfig: RealtimeLogConfig? = nil) {
            self.realtimeLogConfig = realtimeLogConfig
        }

        private enum CodingKeys: String, CodingKey {
            case realtimeLogConfig = "RealtimeLogConfig"
        }
    }

    public struct UpdateResponseHeadersPolicyRequest: AWSEncodableShape {
        public static let _xmlRootNodeName: String? = "ResponseHeadersPolicyConfig"
        /// The identifier for the response headers policy that you are updating.
        public let id: String
        /// The version of the response headers policy that you are updating. The version is returned in the cache policy's ETag field in the response
        /// 			to GetResponseHeadersPolicyConfig.
        public let ifMatch: String?
        /// A response headers policy configuration.
        public let responseHeadersPolicyConfig: ResponseHeadersPolicyConfig

        public init(id: String, ifMatch: String? = nil, responseHeadersPolicyConfig: ResponseHeadersPolicyConfig) {
            self.id = id
            self.ifMatch = ifMatch
            self.responseHeadersPolicyConfig = responseHeadersPolicyConfig
        }

        public func encode(to encoder: Encoder) throws {
            let request = encoder.userInfo[.awsRequest]! as! RequestEncodingContainer
            var container = encoder.singleValueContainer()
            request.encodePath(self.id, key: "Id")
            request.encodeHeader(self.ifMatch, key: "If-Match")
            try container.encode(self.responseHeadersPolicyConfig)
        }

        public func validate(name: String) throws {
            try self.responseHeadersPolicyConfig.validate(name: "\(name).responseHeadersPolicyConfig")
        }

        private enum CodingKeys: CodingKey {}
    }

    public struct UpdateResponseHeadersPolicyResult: AWSDecodableShape {
        /// The current version of the response headers policy.
        public let eTag: String?
        /// A response headers policy.
        public let responseHeadersPolicy: ResponseHeadersPolicy

        public init(eTag: String? = nil, responseHeadersPolicy: ResponseHeadersPolicy) {
            self.eTag = eTag
            self.responseHeadersPolicy = responseHeadersPolicy
        }

        public init(from decoder: Decoder) throws {
            let response = decoder.userInfo[.awsResponse]! as! ResponseDecodingContainer
            let container = try decoder.singleValueContainer()
            self.eTag = try response.decodeHeaderIfPresent(String.self, key: "ETag")
            self.responseHeadersPolicy = try container.decode(ResponseHeadersPolicy.self)
        }

        private enum CodingKeys: CodingKey {}
    }

    public struct UpdateStreamingDistributionRequest: AWSEncodableShape {
        public static let _xmlRootNodeName: String? = "StreamingDistributionConfig"
        /// The streaming distribution's id.
        public let id: String
        /// The value of the ETag header that you received when retrieving the
        /// 			streaming distribution's configuration. For example: E2QWRUHAPOMQZL.
        public let ifMatch: String?
        /// The streaming distribution's configuration information.
        public let streamingDistributionConfig: StreamingDistributionConfig

        public init(id: String, ifMatch: String? = nil, streamingDistributionConfig: StreamingDistributionConfig) {
            self.id = id
            self.ifMatch = ifMatch
            self.streamingDistributionConfig = streamingDistributionConfig
        }

        public func encode(to encoder: Encoder) throws {
            let request = encoder.userInfo[.awsRequest]! as! RequestEncodingContainer
            var container = encoder.singleValueContainer()
            request.encodePath(self.id, key: "Id")
            request.encodeHeader(self.ifMatch, key: "If-Match")
            try container.encode(self.streamingDistributionConfig)
        }

        private enum CodingKeys: CodingKey {}
    }

    public struct UpdateStreamingDistributionResult: AWSDecodableShape {
        /// The current version of the configuration. For example:
        /// 			E2QWRUHAPOMQZL.
        public let eTag: String?
        /// The streaming distribution's information.
        public let streamingDistribution: StreamingDistribution

        public init(eTag: String? = nil, streamingDistribution: StreamingDistribution) {
            self.eTag = eTag
            self.streamingDistribution = streamingDistribution
        }

        public init(from decoder: Decoder) throws {
            let response = decoder.userInfo[.awsResponse]! as! ResponseDecodingContainer
            let container = try decoder.singleValueContainer()
            self.eTag = try response.decodeHeaderIfPresent(String.self, key: "ETag")
            self.streamingDistribution = try container.decode(StreamingDistribution.self)
        }

        private enum CodingKeys: CodingKey {}
    }

    public struct ViewerCertificate: AWSEncodableShape & AWSDecodableShape {
        /// If the distribution uses Aliases (alternate domain names or CNAMEs) and
        /// 			the SSL/TLS certificate is stored in Certificate Manager (ACM), provide the Amazon Resource Name
        /// 			(ARN) of the ACM certificate. CloudFront only supports ACM certificates in the US East
        /// 			(N. Virginia) Region (us-east-1). If you specify an ACM certificate ARN, you must also specify values for
        /// 				MinimumProtocolVersion and SSLSupportMethod.
        public let acmCertificateArn: String?
        /// This field is deprecated. Use one of the following fields instead:    ACMCertificateArn     IAMCertificateId     CloudFrontDefaultCertificate
        public let certificate: String?
        /// This field is deprecated. Use one of the following fields instead:    ACMCertificateArn     IAMCertificateId     CloudFrontDefaultCertificate
        public let certificateSource: CertificateSource?
        /// If the distribution uses the CloudFront domain name such as
        /// 				d111111abcdef8.cloudfront.net, set this field to
        /// 			true. If the distribution uses Aliases (alternate domain names or CNAMEs), set
        /// 			this field to false and specify values for the following fields:    ACMCertificateArn or IAMCertificateId (specify a
        /// 					value for one, not both)    MinimumProtocolVersion     SSLSupportMethod
        public let cloudFrontDefaultCertificate: Bool?
        /// If the distribution uses Aliases (alternate domain names or CNAMEs) and
        /// 			the SSL/TLS certificate is stored in Identity and Access Management (IAM), provide the ID of the IAM certificate. If you specify an IAM certificate ID, you must also specify values for
        /// 				MinimumProtocolVersion and SSLSupportMethod.
        public let iamCertificateId: String?
        /// If the distribution uses Aliases (alternate domain names or CNAMEs),
        /// 			specify the security policy that you want CloudFront to use for HTTPS connections with
        /// 			viewers. The security policy determines two settings:   The minimum SSL/TLS protocol that CloudFront can use to communicate with
        /// 					viewers.   The ciphers that CloudFront can use to encrypt the content that it returns to
        /// 					viewers.   For more information, see Security Policy and Supported Protocols and Ciphers Between Viewers and
        /// 				CloudFront in the Amazon CloudFront Developer Guide.  On the CloudFront console, this setting is called Security
        /// 					Policy.  When you're using SNI only (you set SSLSupportMethod to
        /// 				sni-only), you must specify TLSv1 or higher. If the distribution uses the CloudFront domain name such as
        /// 				d111111abcdef8.cloudfront.net (you set
        /// 				CloudFrontDefaultCertificate to true), CloudFront automatically
        /// 			sets the security policy to TLSv1 regardless of the value that you set
        /// 			here.
        public let minimumProtocolVersion: MinimumProtocolVersion?
        /// If the distribution uses Aliases (alternate domain names or CNAMEs),
        /// 			specify which viewers the distribution accepts HTTPS connections from.    sni-only – The distribution accepts HTTPS connections from only
        /// 					viewers that support server name
        /// 						indication (SNI). This is recommended. Most browsers and clients
        /// 					support SNI.    vip – The distribution accepts HTTPS connections from all viewers
        /// 					including those that don't support SNI. This is not recommended, and results in
        /// 					additional monthly charges from CloudFront.    static-ip - Do not specify this value unless your distribution
        /// 					has been enabled for this feature by the CloudFront team. If you have a use case
        /// 					that requires static IP addresses for a distribution, contact CloudFront through
        /// 					the Amazon Web Services Support Center.   If the distribution uses the CloudFront domain name such as
        /// 				d111111abcdef8.cloudfront.net, don't set a value for this field.
        public let sslSupportMethod: SSLSupportMethod?

        public init(acmCertificateArn: String? = nil, cloudFrontDefaultCertificate: Bool? = nil, iamCertificateId: String? = nil, minimumProtocolVersion: MinimumProtocolVersion? = nil, sslSupportMethod: SSLSupportMethod? = nil) {
            self.acmCertificateArn = acmCertificateArn
            self.certificate = nil
            self.certificateSource = nil
            self.cloudFrontDefaultCertificate = cloudFrontDefaultCertificate
            self.iamCertificateId = iamCertificateId
            self.minimumProtocolVersion = minimumProtocolVersion
            self.sslSupportMethod = sslSupportMethod
        }

        @available(*, deprecated, message: "Members certificate, certificateSource have been deprecated")
        public init(acmCertificateArn: String? = nil, certificate: String? = nil, certificateSource: CertificateSource? = nil, cloudFrontDefaultCertificate: Bool? = nil, iamCertificateId: String? = nil, minimumProtocolVersion: MinimumProtocolVersion? = nil, sslSupportMethod: SSLSupportMethod? = nil) {
            self.acmCertificateArn = acmCertificateArn
            self.certificate = certificate
            self.certificateSource = certificateSource
            self.cloudFrontDefaultCertificate = cloudFrontDefaultCertificate
            self.iamCertificateId = iamCertificateId
            self.minimumProtocolVersion = minimumProtocolVersion
            self.sslSupportMethod = sslSupportMethod
        }

        private enum CodingKeys: String, CodingKey {
            case acmCertificateArn = "ACMCertificateArn"
            case certificate = "Certificate"
            case certificateSource = "CertificateSource"
            case cloudFrontDefaultCertificate = "CloudFrontDefaultCertificate"
            case iamCertificateId = "IAMCertificateId"
            case minimumProtocolVersion = "MinimumProtocolVersion"
            case sslSupportMethod = "SSLSupportMethod"
        }
    }
}

// MARK: - Errors

/// Error enum for CloudFront
public struct CloudFrontErrorType: AWSErrorType {
    enum Code: String {
        case accessDenied = "AccessDenied"
        case batchTooLarge = "BatchTooLarge"
        case cachePolicyAlreadyExists = "CachePolicyAlreadyExists"
        case cachePolicyInUse = "CachePolicyInUse"
        case cannotChangeImmutablePublicKeyFields = "CannotChangeImmutablePublicKeyFields"
        case cannotDeleteEntityWhileInUse = "CannotDeleteEntityWhileInUse"
        case cloudFrontOriginAccessIdentityAlreadyExists = "CloudFrontOriginAccessIdentityAlreadyExists"
        case cloudFrontOriginAccessIdentityInUse = "CloudFrontOriginAccessIdentityInUse"
        case cnameAlreadyExists = "CNAMEAlreadyExists"
        case continuousDeploymentPolicyAlreadyExists = "ContinuousDeploymentPolicyAlreadyExists"
        case continuousDeploymentPolicyInUse = "ContinuousDeploymentPolicyInUse"
        case distributionAlreadyExists = "DistributionAlreadyExists"
        case distributionNotDisabled = "DistributionNotDisabled"
        case entityAlreadyExists = "EntityAlreadyExists"
        case entityLimitExceeded = "EntityLimitExceeded"
        case entityNotFound = "EntityNotFound"
        case entitySizeLimitExceeded = "EntitySizeLimitExceeded"
        case fieldLevelEncryptionConfigAlreadyExists = "FieldLevelEncryptionConfigAlreadyExists"
        case fieldLevelEncryptionConfigInUse = "FieldLevelEncryptionConfigInUse"
        case fieldLevelEncryptionProfileAlreadyExists = "FieldLevelEncryptionProfileAlreadyExists"
        case fieldLevelEncryptionProfileInUse = "FieldLevelEncryptionProfileInUse"
        case fieldLevelEncryptionProfileSizeExceeded = "FieldLevelEncryptionProfileSizeExceeded"
        case functionAlreadyExists = "FunctionAlreadyExists"
        case functionInUse = "FunctionInUse"
        case functionSizeLimitExceeded = "FunctionSizeLimitExceeded"
        case illegalDelete = "IllegalDelete"
        case illegalFieldLevelEncryptionConfigAssociationWithCacheBehavior = "IllegalFieldLevelEncryptionConfigAssociationWithCacheBehavior"
        case illegalOriginAccessConfiguration = "IllegalOriginAccessConfiguration"
        case illegalUpdate = "IllegalUpdate"
        case inconsistentQuantities = "InconsistentQuantities"
        case invalidArgument = "InvalidArgument"
        case invalidDefaultRootObject = "InvalidDefaultRootObject"
        case invalidDomainNameForOriginAccessControl = "InvalidDomainNameForOriginAccessControl"
        case invalidErrorCode = "InvalidErrorCode"
        case invalidForwardCookies = "InvalidForwardCookies"
        case invalidFunctionAssociation = "InvalidFunctionAssociation"
        case invalidGeoRestrictionParameter = "InvalidGeoRestrictionParameter"
        case invalidHeadersForS3Origin = "InvalidHeadersForS3Origin"
        case invalidIfMatchVersion = "InvalidIfMatchVersion"
        case invalidLambdaFunctionAssociation = "InvalidLambdaFunctionAssociation"
        case invalidLocationCode = "InvalidLocationCode"
        case invalidMinimumProtocolVersion = "InvalidMinimumProtocolVersion"
        case invalidOrigin = "InvalidOrigin"
        case invalidOriginAccessControl = "InvalidOriginAccessControl"
        case invalidOriginAccessIdentity = "InvalidOriginAccessIdentity"
        case invalidOriginKeepaliveTimeout = "InvalidOriginKeepaliveTimeout"
        case invalidOriginReadTimeout = "InvalidOriginReadTimeout"
        case invalidProtocolSettings = "InvalidProtocolSettings"
        case invalidQueryStringParameters = "InvalidQueryStringParameters"
        case invalidRelativePath = "InvalidRelativePath"
        case invalidRequiredProtocol = "InvalidRequiredProtocol"
        case invalidResponseCode = "InvalidResponseCode"
        case invalidTTLOrder = "InvalidTTLOrder"
        case invalidTagging = "InvalidTagging"
        case invalidViewerCertificate = "InvalidViewerCertificate"
        case invalidWebACLId = "InvalidWebACLId"
        case keyGroupAlreadyExists = "KeyGroupAlreadyExists"
        case missingBody = "MissingBody"
        case monitoringSubscriptionAlreadyExists = "MonitoringSubscriptionAlreadyExists"
        case noSuchCachePolicy = "NoSuchCachePolicy"
        case noSuchCloudFrontOriginAccessIdentity = "NoSuchCloudFrontOriginAccessIdentity"
        case noSuchContinuousDeploymentPolicy = "NoSuchContinuousDeploymentPolicy"
        case noSuchDistribution = "NoSuchDistribution"
        case noSuchFieldLevelEncryptionConfig = "NoSuchFieldLevelEncryptionConfig"
        case noSuchFieldLevelEncryptionProfile = "NoSuchFieldLevelEncryptionProfile"
        case noSuchFunctionExists = "NoSuchFunctionExists"
        case noSuchInvalidation = "NoSuchInvalidation"
        case noSuchMonitoringSubscription = "NoSuchMonitoringSubscription"
        case noSuchOrigin = "NoSuchOrigin"
        case noSuchOriginAccessControl = "NoSuchOriginAccessControl"
        case noSuchOriginRequestPolicy = "NoSuchOriginRequestPolicy"
        case noSuchPublicKey = "NoSuchPublicKey"
        case noSuchRealtimeLogConfig = "NoSuchRealtimeLogConfig"
        case noSuchResource = "NoSuchResource"
        case noSuchResponseHeadersPolicy = "NoSuchResponseHeadersPolicy"
        case noSuchStreamingDistribution = "NoSuchStreamingDistribution"
        case originAccessControlAlreadyExists = "OriginAccessControlAlreadyExists"
        case originAccessControlInUse = "OriginAccessControlInUse"
        case originRequestPolicyAlreadyExists = "OriginRequestPolicyAlreadyExists"
        case originRequestPolicyInUse = "OriginRequestPolicyInUse"
        case preconditionFailed = "PreconditionFailed"
        case publicKeyAlreadyExists = "PublicKeyAlreadyExists"
        case publicKeyInUse = "PublicKeyInUse"
        case queryArgProfileEmpty = "QueryArgProfileEmpty"
        case realtimeLogConfigAlreadyExists = "RealtimeLogConfigAlreadyExists"
        case realtimeLogConfigInUse = "RealtimeLogConfigInUse"
        case realtimeLogConfigOwnerMismatch = "RealtimeLogConfigOwnerMismatch"
        case resourceInUse = "ResourceInUse"
        case responseHeadersPolicyAlreadyExists = "ResponseHeadersPolicyAlreadyExists"
        case responseHeadersPolicyInUse = "ResponseHeadersPolicyInUse"
        case stagingDistributionInUse = "StagingDistributionInUse"
        case streamingDistributionAlreadyExists = "StreamingDistributionAlreadyExists"
        case streamingDistributionNotDisabled = "StreamingDistributionNotDisabled"
        case testFunctionFailed = "TestFunctionFailed"
        case tooLongCSPInResponseHeadersPolicy = "TooLongCSPInResponseHeadersPolicy"
        case tooManyCacheBehaviors = "TooManyCacheBehaviors"
        case tooManyCachePolicies = "TooManyCachePolicies"
        case tooManyCertificates = "TooManyCertificates"
        case tooManyCloudFrontOriginAccessIdentities = "TooManyCloudFrontOriginAccessIdentities"
        case tooManyContinuousDeploymentPolicies = "TooManyContinuousDeploymentPolicies"
        case tooManyCookieNamesInWhiteList = "TooManyCookieNamesInWhiteList"
        case tooManyCookiesInCachePolicy = "TooManyCookiesInCachePolicy"
        case tooManyCookiesInOriginRequestPolicy = "TooManyCookiesInOriginRequestPolicy"
        case tooManyCustomHeadersInResponseHeadersPolicy = "TooManyCustomHeadersInResponseHeadersPolicy"
        case tooManyDistributionCNAMEs = "TooManyDistributionCNAMEs"
        case tooManyDistributions = "TooManyDistributions"
        case tooManyDistributionsAssociatedToCachePolicy = "TooManyDistributionsAssociatedToCachePolicy"
        case tooManyDistributionsAssociatedToFieldLevelEncryptionConfig = "TooManyDistributionsAssociatedToFieldLevelEncryptionConfig"
        case tooManyDistributionsAssociatedToKeyGroup = "TooManyDistributionsAssociatedToKeyGroup"
        case tooManyDistributionsAssociatedToOriginAccessControl = "TooManyDistributionsAssociatedToOriginAccessControl"
        case tooManyDistributionsAssociatedToOriginRequestPolicy = "TooManyDistributionsAssociatedToOriginRequestPolicy"
        case tooManyDistributionsAssociatedToResponseHeadersPolicy = "TooManyDistributionsAssociatedToResponseHeadersPolicy"
        case tooManyDistributionsWithFunctionAssociations = "TooManyDistributionsWithFunctionAssociations"
        case tooManyDistributionsWithLambdaAssociations = "TooManyDistributionsWithLambdaAssociations"
        case tooManyDistributionsWithSingleFunctionARN = "TooManyDistributionsWithSingleFunctionARN"
        case tooManyFieldLevelEncryptionConfigs = "TooManyFieldLevelEncryptionConfigs"
        case tooManyFieldLevelEncryptionContentTypeProfiles = "TooManyFieldLevelEncryptionContentTypeProfiles"
        case tooManyFieldLevelEncryptionEncryptionEntities = "TooManyFieldLevelEncryptionEncryptionEntities"
        case tooManyFieldLevelEncryptionFieldPatterns = "TooManyFieldLevelEncryptionFieldPatterns"
        case tooManyFieldLevelEncryptionProfiles = "TooManyFieldLevelEncryptionProfiles"
        case tooManyFieldLevelEncryptionQueryArgProfiles = "TooManyFieldLevelEncryptionQueryArgProfiles"
        case tooManyFunctionAssociations = "TooManyFunctionAssociations"
        case tooManyFunctions = "TooManyFunctions"
        case tooManyHeadersInCachePolicy = "TooManyHeadersInCachePolicy"
        case tooManyHeadersInForwardedValues = "TooManyHeadersInForwardedValues"
        case tooManyHeadersInOriginRequestPolicy = "TooManyHeadersInOriginRequestPolicy"
        case tooManyInvalidationsInProgress = "TooManyInvalidationsInProgress"
        case tooManyKeyGroups = "TooManyKeyGroups"
        case tooManyKeyGroupsAssociatedToDistribution = "TooManyKeyGroupsAssociatedToDistribution"
        case tooManyLambdaFunctionAssociations = "TooManyLambdaFunctionAssociations"
        case tooManyOriginAccessControls = "TooManyOriginAccessControls"
        case tooManyOriginCustomHeaders = "TooManyOriginCustomHeaders"
        case tooManyOriginGroupsPerDistribution = "TooManyOriginGroupsPerDistribution"
        case tooManyOriginRequestPolicies = "TooManyOriginRequestPolicies"
        case tooManyOrigins = "TooManyOrigins"
        case tooManyPublicKeys = "TooManyPublicKeys"
        case tooManyPublicKeysInKeyGroup = "TooManyPublicKeysInKeyGroup"
        case tooManyQueryStringParameters = "TooManyQueryStringParameters"
        case tooManyQueryStringsInCachePolicy = "TooManyQueryStringsInCachePolicy"
        case tooManyQueryStringsInOriginRequestPolicy = "TooManyQueryStringsInOriginRequestPolicy"
        case tooManyRealtimeLogConfigs = "TooManyRealtimeLogConfigs"
        case tooManyRemoveHeadersInResponseHeadersPolicy = "TooManyRemoveHeadersInResponseHeadersPolicy"
        case tooManyResponseHeadersPolicies = "TooManyResponseHeadersPolicies"
        case tooManyStreamingDistributionCNAMEs = "TooManyStreamingDistributionCNAMEs"
        case tooManyStreamingDistributions = "TooManyStreamingDistributions"
        case tooManyTrustedSigners = "TooManyTrustedSigners"
        case trustedKeyGroupDoesNotExist = "TrustedKeyGroupDoesNotExist"
        case trustedSignerDoesNotExist = "TrustedSignerDoesNotExist"
        case unsupportedOperation = "UnsupportedOperation"
    }

    private let error: Code
    public let context: AWSErrorContext?

    /// initialize CloudFront
    public init?(errorCode: String, context: AWSErrorContext) {
        guard let error = Code(rawValue: errorCode) else { return nil }
        self.error = error
        self.context = context
    }

    internal init(_ error: Code) {
        self.error = error
        self.context = nil
    }

    /// return error code string
    public var errorCode: String { self.error.rawValue }

    /// Access denied.
    public static var accessDenied: Self { .init(.accessDenied) }
    /// Invalidation batch specified is too large.
    public static var batchTooLarge: Self { .init(.batchTooLarge) }
    /// A cache policy with this name already exists. You must provide a unique name. To
    /// 			modify an existing cache policy, use UpdateCachePolicy.
    public static var cachePolicyAlreadyExists: Self { .init(.cachePolicyAlreadyExists) }
    /// Cannot delete the cache policy because it is attached to one or more cache
    /// 			behaviors.
    public static var cachePolicyInUse: Self { .init(.cachePolicyInUse) }
    /// You can't change the value of a public key.
    public static var cannotChangeImmutablePublicKeyFields: Self { .init(.cannotChangeImmutablePublicKeyFields) }
    /// The Key Value Store entity cannot be deleted while it is in use.
    public static var cannotDeleteEntityWhileInUse: Self { .init(.cannotDeleteEntityWhileInUse) }
    /// If the CallerReference is a value you already sent in a previous request
    /// 			to create an identity but the content of the
    /// 				CloudFrontOriginAccessIdentityConfig is different from the original
    /// 			request, CloudFront returns a CloudFrontOriginAccessIdentityAlreadyExists error.
    ///
    public static var cloudFrontOriginAccessIdentityAlreadyExists: Self { .init(.cloudFrontOriginAccessIdentityAlreadyExists) }
    /// The Origin Access Identity specified is already in use.
    public static var cloudFrontOriginAccessIdentityInUse: Self { .init(.cloudFrontOriginAccessIdentityInUse) }
    /// The CNAME specified is already defined for CloudFront.
    public static var cnameAlreadyExists: Self { .init(.cnameAlreadyExists) }
    /// A continuous deployment policy with this configuration already exists.
    public static var continuousDeploymentPolicyAlreadyExists: Self { .init(.continuousDeploymentPolicyAlreadyExists) }
    /// You cannot delete a continuous deployment policy that is associated with a primary
    /// 			distribution.
    public static var continuousDeploymentPolicyInUse: Self { .init(.continuousDeploymentPolicyInUse) }
    /// The caller reference you attempted to create the distribution with is associated with
    /// 			another distribution.
    public static var distributionAlreadyExists: Self { .init(.distributionAlreadyExists) }
    /// The specified CloudFront distribution is not disabled. You must disable the distribution
    /// 			before you can delete it.
    public static var distributionNotDisabled: Self { .init(.distributionNotDisabled) }
    /// The Key Value Store entity already exists. You must provide a unique Key Value Store
    /// 			entity.
    public static var entityAlreadyExists: Self { .init(.entityAlreadyExists) }
    /// The Key Value Store entity limit has been exceeded.
    public static var entityLimitExceeded: Self { .init(.entityLimitExceeded) }
    /// The Key Value Store entity was not found.
    public static var entityNotFound: Self { .init(.entityNotFound) }
    /// The Key Value Store entity size limit was exceeded.
    public static var entitySizeLimitExceeded: Self { .init(.entitySizeLimitExceeded) }
    /// The specified configuration for field-level encryption already exists.
    public static var fieldLevelEncryptionConfigAlreadyExists: Self { .init(.fieldLevelEncryptionConfigAlreadyExists) }
    /// The specified configuration for field-level encryption is in use.
    public static var fieldLevelEncryptionConfigInUse: Self { .init(.fieldLevelEncryptionConfigInUse) }
    /// The specified profile for field-level encryption already exists.
    public static var fieldLevelEncryptionProfileAlreadyExists: Self { .init(.fieldLevelEncryptionProfileAlreadyExists) }
    /// The specified profile for field-level encryption is in use.
    public static var fieldLevelEncryptionProfileInUse: Self { .init(.fieldLevelEncryptionProfileInUse) }
    /// The maximum size of a profile for field-level encryption was exceeded.
    public static var fieldLevelEncryptionProfileSizeExceeded: Self { .init(.fieldLevelEncryptionProfileSizeExceeded) }
    /// A function with the same name already exists in this Amazon Web Services account. To create a
    /// 			function, you must provide a unique name. To update an existing function, use
    /// 				UpdateFunction.
    public static var functionAlreadyExists: Self { .init(.functionAlreadyExists) }
    /// Cannot delete the function because it's attached to one or more cache
    /// 			behaviors.
    public static var functionInUse: Self { .init(.functionInUse) }
    /// The function is too large. For more information, see Quotas (formerly known as limits) in the
    /// 				Amazon CloudFront Developer Guide.
    public static var functionSizeLimitExceeded: Self { .init(.functionSizeLimitExceeded) }
    /// You cannot delete a managed policy.
    public static var illegalDelete: Self { .init(.illegalDelete) }
    /// The specified configuration for field-level encryption can't be associated with the
    /// 			specified cache behavior.
    public static var illegalFieldLevelEncryptionConfigAssociationWithCacheBehavior: Self { .init(.illegalFieldLevelEncryptionConfigAssociationWithCacheBehavior) }
    /// An origin cannot contain both an origin access control (OAC) and an origin access
    /// 			identity (OAI).
    public static var illegalOriginAccessConfiguration: Self { .init(.illegalOriginAccessConfiguration) }
    /// The update contains modifications that are not allowed.
    public static var illegalUpdate: Self { .init(.illegalUpdate) }
    /// The value of Quantity and the size of Items don't
    /// 			match.
    public static var inconsistentQuantities: Self { .init(.inconsistentQuantities) }
    /// An argument is invalid.
    public static var invalidArgument: Self { .init(.invalidArgument) }
    /// The default root object file name is too big or contains an invalid character.
    public static var invalidDefaultRootObject: Self { .init(.invalidDefaultRootObject) }
    /// An origin access control is associated with an origin whose domain name is not
    /// 			supported.
    public static var invalidDomainNameForOriginAccessControl: Self { .init(.invalidDomainNameForOriginAccessControl) }
    /// An invalid error code was specified.
    public static var invalidErrorCode: Self { .init(.invalidErrorCode) }
    /// Your request contains forward cookies option which doesn't match with the expectation
    /// 			for the whitelisted list of cookie names. Either list of cookie names has
    /// 			been specified when not allowed or list of cookie names is missing when expected.
    public static var invalidForwardCookies: Self { .init(.invalidForwardCookies) }
    /// A CloudFront function association is invalid.
    public static var invalidFunctionAssociation: Self { .init(.invalidFunctionAssociation) }
    /// The specified geo restriction parameter is not valid.
    public static var invalidGeoRestrictionParameter: Self { .init(.invalidGeoRestrictionParameter) }
    /// The headers specified are not valid for an Amazon S3 origin.
    public static var invalidHeadersForS3Origin: Self { .init(.invalidHeadersForS3Origin) }
    /// The If-Match version is missing or not valid.
    public static var invalidIfMatchVersion: Self { .init(.invalidIfMatchVersion) }
    /// The specified Lambda@Edge function association is invalid.
    public static var invalidLambdaFunctionAssociation: Self { .init(.invalidLambdaFunctionAssociation) }
    /// The location code specified is not valid.
    public static var invalidLocationCode: Self { .init(.invalidLocationCode) }
    /// The minimum protocol version specified is not valid.
    public static var invalidMinimumProtocolVersion: Self { .init(.invalidMinimumProtocolVersion) }
    /// The Amazon S3 origin server specified does not refer to a valid Amazon S3 bucket.
    public static var invalidOrigin: Self { .init(.invalidOrigin) }
    /// The origin access control is not valid.
    public static var invalidOriginAccessControl: Self { .init(.invalidOriginAccessControl) }
    /// The origin access identity is not valid or doesn't exist.
    public static var invalidOriginAccessIdentity: Self { .init(.invalidOriginAccessIdentity) }
    /// The keep alive timeout specified for the origin is not valid.
    public static var invalidOriginKeepaliveTimeout: Self { .init(.invalidOriginKeepaliveTimeout) }
    /// The read timeout specified for the origin is not valid.
    public static var invalidOriginReadTimeout: Self { .init(.invalidOriginReadTimeout) }
    /// You cannot specify SSLv3 as the minimum protocol version if you only want to support
    /// 			only clients that support Server Name Indication (SNI).
    public static var invalidProtocolSettings: Self { .init(.invalidProtocolSettings) }
    /// The query string parameters specified are not valid.
    public static var invalidQueryStringParameters: Self { .init(.invalidQueryStringParameters) }
    /// The relative path is too big, is not URL-encoded, or does not begin with a slash
    /// 			(/).
    public static var invalidRelativePath: Self { .init(.invalidRelativePath) }
    /// This operation requires the HTTPS protocol. Ensure that you specify the HTTPS protocol
    /// 			in your request, or omit the RequiredProtocols element from your
    /// 			distribution configuration.
    public static var invalidRequiredProtocol: Self { .init(.invalidRequiredProtocol) }
    /// A response code is not valid.
    public static var invalidResponseCode: Self { .init(.invalidResponseCode) }
    /// The TTL order specified is not valid.
    public static var invalidTTLOrder: Self { .init(.invalidTTLOrder) }
    /// The tagging specified is not valid.
    public static var invalidTagging: Self { .init(.invalidTagging) }
    /// A viewer certificate specified is not valid.
    public static var invalidViewerCertificate: Self { .init(.invalidViewerCertificate) }
    /// A web ACL ID specified is not valid. To specify a web ACL created using the latest
    /// 			version of WAF, use the ACL ARN, for example
    /// 				arn:aws:wafv2:us-east-1:123456789012:global/webacl/ExampleWebACL/473e64fd-f30b-4765-81a0-62ad96dd167a.
    /// 			To specify a web ACL created using WAF Classic, use the ACL ID, for example
    /// 				473e64fd-f30b-4765-81a0-62ad96dd167a.
    public static var invalidWebACLId: Self { .init(.invalidWebACLId) }
    /// A key group with this name already exists. You must provide a unique name. To modify
    /// 			an existing key group, use UpdateKeyGroup.
    public static var keyGroupAlreadyExists: Self { .init(.keyGroupAlreadyExists) }
    /// This operation requires a body. Ensure that the body is present and the
    /// 				Content-Type header is set.
    public static var missingBody: Self { .init(.missingBody) }
    /// A monitoring subscription already exists for the specified distribution.
    public static var monitoringSubscriptionAlreadyExists: Self { .init(.monitoringSubscriptionAlreadyExists) }
    /// The cache policy does not exist.
    public static var noSuchCachePolicy: Self { .init(.noSuchCachePolicy) }
    /// The specified origin access identity does not exist.
    public static var noSuchCloudFrontOriginAccessIdentity: Self { .init(.noSuchCloudFrontOriginAccessIdentity) }
    /// The continuous deployment policy doesn't exist.
    public static var noSuchContinuousDeploymentPolicy: Self { .init(.noSuchContinuousDeploymentPolicy) }
    /// The specified distribution does not exist.
    public static var noSuchDistribution: Self { .init(.noSuchDistribution) }
    /// The specified configuration for field-level encryption doesn't exist.
    public static var noSuchFieldLevelEncryptionConfig: Self { .init(.noSuchFieldLevelEncryptionConfig) }
    /// The specified profile for field-level encryption doesn't exist.
    public static var noSuchFieldLevelEncryptionProfile: Self { .init(.noSuchFieldLevelEncryptionProfile) }
    /// The function does not exist.
    public static var noSuchFunctionExists: Self { .init(.noSuchFunctionExists) }
    /// The specified invalidation does not exist.
    public static var noSuchInvalidation: Self { .init(.noSuchInvalidation) }
    /// A monitoring subscription does not exist for the specified distribution.
    public static var noSuchMonitoringSubscription: Self { .init(.noSuchMonitoringSubscription) }
    /// No origin exists with the specified Origin Id.
    public static var noSuchOrigin: Self { .init(.noSuchOrigin) }
    /// The origin access control does not exist.
    public static var noSuchOriginAccessControl: Self { .init(.noSuchOriginAccessControl) }
    /// The origin request policy does not exist.
    public static var noSuchOriginRequestPolicy: Self { .init(.noSuchOriginRequestPolicy) }
    /// The specified public key doesn't exist.
    public static var noSuchPublicKey: Self { .init(.noSuchPublicKey) }
    /// The real-time log configuration does not exist.
    public static var noSuchRealtimeLogConfig: Self { .init(.noSuchRealtimeLogConfig) }
    /// A resource that was specified is not valid.
    public static var noSuchResource: Self { .init(.noSuchResource) }
    /// The response headers policy does not exist.
    public static var noSuchResponseHeadersPolicy: Self { .init(.noSuchResponseHeadersPolicy) }
    /// The specified streaming distribution does not exist.
    public static var noSuchStreamingDistribution: Self { .init(.noSuchStreamingDistribution) }
    /// An origin access control with the specified parameters already exists.
    public static var originAccessControlAlreadyExists: Self { .init(.originAccessControlAlreadyExists) }
    /// Cannot delete the origin access control because it's in use by one or more
    /// 			distributions.
    public static var originAccessControlInUse: Self { .init(.originAccessControlInUse) }
    /// An origin request policy with this name already exists. You must provide a unique
    /// 			name. To modify an existing origin request policy, use
    /// 				UpdateOriginRequestPolicy.
    public static var originRequestPolicyAlreadyExists: Self { .init(.originRequestPolicyAlreadyExists) }
    /// Cannot delete the origin request policy because it is attached to one or more cache
    /// 			behaviors.
    public static var originRequestPolicyInUse: Self { .init(.originRequestPolicyInUse) }
    /// The precondition in one or more of the request fields evaluated to
    /// 			false.
    public static var preconditionFailed: Self { .init(.preconditionFailed) }
    /// The specified public key already exists.
    public static var publicKeyAlreadyExists: Self { .init(.publicKeyAlreadyExists) }
    /// The specified public key is in use.
    public static var publicKeyInUse: Self { .init(.publicKeyInUse) }
    /// No profile specified for the field-level encryption query argument.
    public static var queryArgProfileEmpty: Self { .init(.queryArgProfileEmpty) }
    /// A real-time log configuration with this name already exists. You must provide a unique
    /// 			name. To modify an existing real-time log configuration, use
    /// 				UpdateRealtimeLogConfig.
    public static var realtimeLogConfigAlreadyExists: Self { .init(.realtimeLogConfigAlreadyExists) }
    /// Cannot delete the real-time log configuration because it is attached to one or more
    /// 			cache behaviors.
    public static var realtimeLogConfigInUse: Self { .init(.realtimeLogConfigInUse) }
    /// The specified real-time log configuration belongs to a different Amazon Web Services account.
    public static var realtimeLogConfigOwnerMismatch: Self { .init(.realtimeLogConfigOwnerMismatch) }
    /// Cannot delete this resource because it is in use.
    public static var resourceInUse: Self { .init(.resourceInUse) }
    /// A response headers policy with this name already exists. You must provide a unique
    /// 			name. To modify an existing response headers policy, use
    /// 				UpdateResponseHeadersPolicy.
    public static var responseHeadersPolicyAlreadyExists: Self { .init(.responseHeadersPolicyAlreadyExists) }
    /// Cannot delete the response headers policy because it is attached to one or more cache
    /// 			behaviors in a CloudFront distribution.
    public static var responseHeadersPolicyInUse: Self { .init(.responseHeadersPolicyInUse) }
    /// A continuous deployment policy for this staging distribution already exists.
    public static var stagingDistributionInUse: Self { .init(.stagingDistributionInUse) }
    /// The caller reference you attempted to create the streaming distribution with is
    /// 			associated with another distribution
    public static var streamingDistributionAlreadyExists: Self { .init(.streamingDistributionAlreadyExists) }
    /// The specified CloudFront distribution is not disabled. You must disable the distribution
    /// 			before you can delete it.
    public static var streamingDistributionNotDisabled: Self { .init(.streamingDistributionNotDisabled) }
    /// The CloudFront function failed.
    public static var testFunctionFailed: Self { .init(.testFunctionFailed) }
    /// The length of the Content-Security-Policy header value in the response
    /// 			headers policy exceeds the maximum. For more information, see Quotas (formerly known as limits) in the
    /// 				Amazon CloudFront Developer Guide.
    public static var tooLongCSPInResponseHeadersPolicy: Self { .init(.tooLongCSPInResponseHeadersPolicy) }
    /// You cannot create more cache behaviors for the distribution.
    public static var tooManyCacheBehaviors: Self { .init(.tooManyCacheBehaviors) }
    /// You have reached the maximum number of cache policies for this Amazon Web Services account. For more
    /// 			information, see Quotas (formerly known as limits) in the
    /// 				Amazon CloudFront Developer Guide.
    public static var tooManyCachePolicies: Self { .init(.tooManyCachePolicies) }
    /// You cannot create anymore custom SSL/TLS certificates.
    public static var tooManyCertificates: Self { .init(.tooManyCertificates) }
    /// Processing your request would cause you to exceed the maximum number of origin access
    /// 			identities allowed.
    public static var tooManyCloudFrontOriginAccessIdentities: Self { .init(.tooManyCloudFrontOriginAccessIdentities) }
    /// You have reached the maximum number of continuous deployment policies for this
    /// 			Amazon Web Services account.
    public static var tooManyContinuousDeploymentPolicies: Self { .init(.tooManyContinuousDeploymentPolicies) }
    /// Your request contains more cookie names in the whitelist than are allowed per cache
    /// 			behavior.
    public static var tooManyCookieNamesInWhiteList: Self { .init(.tooManyCookieNamesInWhiteList) }
    /// The number of cookies in the cache policy exceeds the maximum. For more information,
    /// 			see Quotas (formerly known as limits) in the
    /// 				Amazon CloudFront Developer Guide.
    public static var tooManyCookiesInCachePolicy: Self { .init(.tooManyCookiesInCachePolicy) }
    /// The number of cookies in the origin request policy exceeds the maximum. For more
    /// 			information, see Quotas (formerly known as limits) in the
    /// 				Amazon CloudFront Developer Guide.
    public static var tooManyCookiesInOriginRequestPolicy: Self { .init(.tooManyCookiesInOriginRequestPolicy) }
    /// The number of custom headers in the response headers policy exceeds the
    /// 			maximum. For more information, see Quotas (formerly known as limits) in the
    /// 				Amazon CloudFront Developer Guide.
    public static var tooManyCustomHeadersInResponseHeadersPolicy: Self { .init(.tooManyCustomHeadersInResponseHeadersPolicy) }
    /// Your request contains more CNAMEs than are allowed per distribution.
    public static var tooManyDistributionCNAMEs: Self { .init(.tooManyDistributionCNAMEs) }
    /// Processing your request would cause you to exceed the maximum number of distributions
    /// 			allowed.
    public static var tooManyDistributions: Self { .init(.tooManyDistributions) }
    /// The maximum number of distributions have been associated with the specified cache
    /// 			policy. For more information, see Quotas (formerly known as limits) in the
    /// 				Amazon CloudFront Developer Guide.
    public static var tooManyDistributionsAssociatedToCachePolicy: Self { .init(.tooManyDistributionsAssociatedToCachePolicy) }
    /// The maximum number of distributions have been associated with the specified
    /// 			configuration for field-level encryption.
    public static var tooManyDistributionsAssociatedToFieldLevelEncryptionConfig: Self { .init(.tooManyDistributionsAssociatedToFieldLevelEncryptionConfig) }
    /// The number of distributions that reference this key group is more than the maximum
    /// 			allowed. For more information, see Quotas (formerly known as limits) in the
    /// 				Amazon CloudFront Developer Guide.
    public static var tooManyDistributionsAssociatedToKeyGroup: Self { .init(.tooManyDistributionsAssociatedToKeyGroup) }
    /// The maximum number of distributions have been associated with the specified origin
    /// 			access control. For more information, see Quotas (formerly known as limits) in the
    /// 				Amazon CloudFront Developer Guide.
    public static var tooManyDistributionsAssociatedToOriginAccessControl: Self { .init(.tooManyDistributionsAssociatedToOriginAccessControl) }
    /// The maximum number of distributions have been associated with the specified origin
    /// 			request policy. For more information, see Quotas (formerly known as limits) in the
    /// 				Amazon CloudFront Developer Guide.
    public static var tooManyDistributionsAssociatedToOriginRequestPolicy: Self { .init(.tooManyDistributionsAssociatedToOriginRequestPolicy) }
    /// The maximum number of distributions have been associated with the specified response
    /// 			headers policy. For more information, see Quotas (formerly known as limits) in the
    /// 				Amazon CloudFront Developer Guide.
    public static var tooManyDistributionsAssociatedToResponseHeadersPolicy: Self { .init(.tooManyDistributionsAssociatedToResponseHeadersPolicy) }
    /// You have reached the maximum number of distributions that are associated with a CloudFront
    /// 			function. For more information, see Quotas (formerly known as limits) in the
    /// 				Amazon CloudFront Developer Guide.
    public static var tooManyDistributionsWithFunctionAssociations: Self { .init(.tooManyDistributionsWithFunctionAssociations) }
    /// Processing your request would cause the maximum number of distributions with
    /// 			Lambda@Edge function associations per owner to be exceeded.
    public static var tooManyDistributionsWithLambdaAssociations: Self { .init(.tooManyDistributionsWithLambdaAssociations) }
    /// The maximum number of distributions have been associated with the specified
    /// 			Lambda@Edge function.
    public static var tooManyDistributionsWithSingleFunctionARN: Self { .init(.tooManyDistributionsWithSingleFunctionARN) }
    /// The maximum number of configurations for field-level encryption have been
    /// 			created.
    public static var tooManyFieldLevelEncryptionConfigs: Self { .init(.tooManyFieldLevelEncryptionConfigs) }
    /// The maximum number of content type profiles for field-level encryption have been
    /// 			created.
    public static var tooManyFieldLevelEncryptionContentTypeProfiles: Self { .init(.tooManyFieldLevelEncryptionContentTypeProfiles) }
    /// The maximum number of encryption entities for field-level encryption have been
    /// 			created.
    public static var tooManyFieldLevelEncryptionEncryptionEntities: Self { .init(.tooManyFieldLevelEncryptionEncryptionEntities) }
    /// The maximum number of field patterns for field-level encryption have been
    /// 			created.
    public static var tooManyFieldLevelEncryptionFieldPatterns: Self { .init(.tooManyFieldLevelEncryptionFieldPatterns) }
    /// The maximum number of profiles for field-level encryption have been created.
    public static var tooManyFieldLevelEncryptionProfiles: Self { .init(.tooManyFieldLevelEncryptionProfiles) }
    /// The maximum number of query arg profiles for field-level encryption have been
    /// 			created.
    public static var tooManyFieldLevelEncryptionQueryArgProfiles: Self { .init(.tooManyFieldLevelEncryptionQueryArgProfiles) }
    /// You have reached the maximum number of CloudFront function associations for this
    /// 			distribution. For more information, see Quotas (formerly known as limits) in the
    /// 				Amazon CloudFront Developer Guide.
    public static var tooManyFunctionAssociations: Self { .init(.tooManyFunctionAssociations) }
    /// You have reached the maximum number of CloudFront functions for this Amazon Web Services account. For more
    /// 			information, see Quotas (formerly known as limits) in the
    /// 				Amazon CloudFront Developer Guide.
    public static var tooManyFunctions: Self { .init(.tooManyFunctions) }
    /// The number of headers in the cache policy exceeds the maximum. For more information,
    /// 			see Quotas (formerly known as limits) in the
    /// 				Amazon CloudFront Developer Guide.
    public static var tooManyHeadersInCachePolicy: Self { .init(.tooManyHeadersInCachePolicy) }
    /// Your request contains too many headers in forwarded values.
    public static var tooManyHeadersInForwardedValues: Self { .init(.tooManyHeadersInForwardedValues) }
    /// The number of headers in the origin request policy exceeds the maximum. For more
    /// 			information, see Quotas (formerly known as limits) in the
    /// 				Amazon CloudFront Developer Guide.
    public static var tooManyHeadersInOriginRequestPolicy: Self { .init(.tooManyHeadersInOriginRequestPolicy) }
    /// You have exceeded the maximum number of allowable InProgress invalidation batch
    /// 			requests, or invalidation objects.
    public static var tooManyInvalidationsInProgress: Self { .init(.tooManyInvalidationsInProgress) }
    /// You have reached the maximum number of key groups for this Amazon Web Services account. For more
    /// 			information, see Quotas (formerly known as limits) in the
    /// 				Amazon CloudFront Developer Guide.
    public static var tooManyKeyGroups: Self { .init(.tooManyKeyGroups) }
    /// The number of key groups referenced by this distribution is more than the maximum
    /// 			allowed. For more information, see Quotas (formerly known as limits) in the
    /// 				Amazon CloudFront Developer Guide.
    public static var tooManyKeyGroupsAssociatedToDistribution: Self { .init(.tooManyKeyGroupsAssociatedToDistribution) }
    /// Your request contains more Lambda@Edge function associations than are allowed per
    /// 			distribution.
    public static var tooManyLambdaFunctionAssociations: Self { .init(.tooManyLambdaFunctionAssociations) }
    /// The number of origin access controls in your Amazon Web Services account exceeds the maximum
    /// 			allowed. For more information, see Quotas (formerly known as limits) in the
    /// 				Amazon CloudFront Developer Guide.
    public static var tooManyOriginAccessControls: Self { .init(.tooManyOriginAccessControls) }
    /// Your request contains too many origin custom headers.
    public static var tooManyOriginCustomHeaders: Self { .init(.tooManyOriginCustomHeaders) }
    /// Processing your request would cause you to exceed the maximum number of origin groups
    /// 			allowed.
    public static var tooManyOriginGroupsPerDistribution: Self { .init(.tooManyOriginGroupsPerDistribution) }
    /// You have reached the maximum number of origin request policies for this Amazon Web Services account.
    /// 			For more information, see Quotas (formerly known as limits) in the
    /// 				Amazon CloudFront Developer Guide.
    public static var tooManyOriginRequestPolicies: Self { .init(.tooManyOriginRequestPolicies) }
    /// You cannot create more origins for the distribution.
    public static var tooManyOrigins: Self { .init(.tooManyOrigins) }
    /// The maximum number of public keys for field-level encryption have been created. To
    /// 			create a new public key, delete one of the existing keys.
    public static var tooManyPublicKeys: Self { .init(.tooManyPublicKeys) }
    /// The number of public keys in this key group is more than the maximum allowed. For more
    /// 			information, see Quotas (formerly known as limits) in the
    /// 				Amazon CloudFront Developer Guide.
    public static var tooManyPublicKeysInKeyGroup: Self { .init(.tooManyPublicKeysInKeyGroup) }
    /// Your request contains too many query string parameters.
    public static var tooManyQueryStringParameters: Self { .init(.tooManyQueryStringParameters) }
    /// The number of query strings in the cache policy exceeds the maximum. For more
    /// 			information, see Quotas (formerly known as limits) in the
    /// 				Amazon CloudFront Developer Guide.
    public static var tooManyQueryStringsInCachePolicy: Self { .init(.tooManyQueryStringsInCachePolicy) }
    /// The number of query strings in the origin request policy exceeds the maximum. For more
    /// 			information, see Quotas (formerly known as limits) in the
    /// 				Amazon CloudFront Developer Guide.
    public static var tooManyQueryStringsInOriginRequestPolicy: Self { .init(.tooManyQueryStringsInOriginRequestPolicy) }
    /// You have reached the maximum number of real-time log configurations for this
    /// 			Amazon Web Services account. For more information, see Quotas (formerly known as limits) in the
    /// 				Amazon CloudFront Developer Guide.
    public static var tooManyRealtimeLogConfigs: Self { .init(.tooManyRealtimeLogConfigs) }
    /// The number of headers in RemoveHeadersConfig in the response headers
    /// 			policy exceeds the maximum. For more information, see Quotas (formerly known as limits) in the
    /// 			Amazon CloudFront Developer Guide.
    public static var tooManyRemoveHeadersInResponseHeadersPolicy: Self { .init(.tooManyRemoveHeadersInResponseHeadersPolicy) }
    /// You have reached the maximum number of response headers policies for this
    /// 			Amazon Web Services account. For more information, see Quotas (formerly known as limits) in the
    /// 				Amazon CloudFront Developer Guide.
    public static var tooManyResponseHeadersPolicies: Self { .init(.tooManyResponseHeadersPolicies) }
    /// Your request contains more CNAMEs than are allowed per distribution.
    public static var tooManyStreamingDistributionCNAMEs: Self { .init(.tooManyStreamingDistributionCNAMEs) }
    /// Processing your request would cause you to exceed the maximum number of streaming
    /// 			distributions allowed.
    public static var tooManyStreamingDistributions: Self { .init(.tooManyStreamingDistributions) }
    /// Your request contains more trusted signers than are allowed per distribution.
    public static var tooManyTrustedSigners: Self { .init(.tooManyTrustedSigners) }
    /// The specified key group does not exist.
    public static var trustedKeyGroupDoesNotExist: Self { .init(.trustedKeyGroupDoesNotExist) }
    /// One or more of your trusted signers don't exist.
    public static var trustedSignerDoesNotExist: Self { .init(.trustedSignerDoesNotExist) }
    /// This operation is not supported in this region.
    public static var unsupportedOperation: Self { .init(.unsupportedOperation) }
}

extension CloudFrontErrorType: Equatable {
    public static func == (lhs: CloudFrontErrorType, rhs: CloudFrontErrorType) -> Bool {
        lhs.error == rhs.error
    }
}

extension CloudFrontErrorType: CustomStringConvertible {
    public var description: String {
        return "\(self.error.rawValue): \(self.message ?? "")"
    }
}
