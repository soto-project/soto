//===----------------------------------------------------------------------===//
//
// This source file is part of the Soto for AWS open source project
//
// Copyright (c) 2017-2024 the Soto project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
// See CONTRIBUTORS.txt for the list of Soto project authors
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by https://github.com/soto-project/soto-codegenerator.
// DO NOT EDIT.

#if canImport(FoundationEssentials)
import FoundationEssentials
#else
import Foundation
#endif
@_exported import SotoCore

/// Service object for interacting with AWS GameLiftStreams service.
///
/// Amazon GameLift Streams Amazon GameLift Streams provides a global cloud solution for content streaming experiences. Use Amazon GameLift Streams tools to upload and configure content for streaming, deploy and scale computing resources to host streams, and manage stream session placement to meet customer demand. This Reference Guide describes the Amazon GameLift Streams service API. You can use the API through the Amazon Web Services SDK, the Command Line Interface (AWS CLI), or by making direct REST calls through HTTPS. See the Amazon GameLift Streams Developer Guide for more information on how Amazon GameLift Streams works and how to work with it.
public struct GameLiftStreams: AWSService {
    // MARK: Member variables

    /// Client used for communication with AWS
    public let client: AWSClient
    /// Service configuration
    public let config: AWSServiceConfig

    // MARK: Initialization

    /// Initialize the GameLiftStreams client
    /// - parameters:
    ///     - client: AWSClient used to process requests
    ///     - region: Region of server you want to communicate with. This will override the partition parameter.
    ///     - partition: AWS partition where service resides, standard (.aws), china (.awscn), government (.awsusgov).
    ///     - endpoint: Custom endpoint URL to use instead of standard AWS servers
    ///     - middleware: Middleware chain used to edit requests before they are sent and responses before they are decoded 
    ///     - timeout: Timeout value for HTTP requests
    ///     - byteBufferAllocator: Allocator for ByteBuffers
    ///     - options: Service options
    public init(
        client: AWSClient,
        region: SotoCore.Region? = nil,
        partition: AWSPartition = .aws,
        endpoint: String? = nil,
        middleware: AWSMiddlewareProtocol? = nil,
        timeout: TimeAmount? = nil,
        byteBufferAllocator: ByteBufferAllocator = ByteBufferAllocator(),
        options: AWSServiceConfig.Options = []
    ) {
        self.client = client
        self.config = AWSServiceConfig(
            region: region,
            partition: region?.partition ?? partition,
            serviceName: "GameLiftStreams",
            serviceIdentifier: "gameliftstreams",
            serviceProtocol: .restjson,
            apiVersion: "2018-05-10",
            endpoint: endpoint,
            serviceEndpoints: Self.serviceEndpoints,
            variantEndpoints: Self.variantEndpoints,
            errorType: GameLiftStreamsErrorType.self,
            middleware: middleware,
            timeout: timeout,
            byteBufferAllocator: byteBufferAllocator,
            options: options
        )
    }


    /// custom endpoints for regions
    static var serviceEndpoints: [String: String] {[
        "af-south-1": "gameliftstreams.af-south-1.api.aws",
        "ap-east-1": "gameliftstreams.ap-east-1.api.aws",
        "ap-northeast-1": "gameliftstreams.ap-northeast-1.api.aws",
        "ap-northeast-2": "gameliftstreams.ap-northeast-2.api.aws",
        "ap-northeast-3": "gameliftstreams.ap-northeast-3.api.aws",
        "ap-south-1": "gameliftstreams.ap-south-1.api.aws",
        "ap-south-2": "gameliftstreams.ap-south-2.api.aws",
        "ap-southeast-1": "gameliftstreams.ap-southeast-1.api.aws",
        "ap-southeast-2": "gameliftstreams.ap-southeast-2.api.aws",
        "ap-southeast-3": "gameliftstreams.ap-southeast-3.api.aws",
        "ap-southeast-4": "gameliftstreams.ap-southeast-4.api.aws",
        "ap-southeast-5": "gameliftstreams.ap-southeast-5.api.aws",
        "ap-southeast-7": "gameliftstreams.ap-southeast-7.api.aws",
        "ca-central-1": "gameliftstreams.ca-central-1.api.aws",
        "ca-west-1": "gameliftstreams.ca-west-1.api.aws",
        "cn-north-1": "gameliftstreams.cn-north-1.api.amazonwebservices.com.cn",
        "cn-northwest-1": "gameliftstreams.cn-northwest-1.api.amazonwebservices.com.cn",
        "eu-central-1": "gameliftstreams.eu-central-1.api.aws",
        "eu-central-2": "gameliftstreams.eu-central-2.api.aws",
        "eu-north-1": "gameliftstreams.eu-north-1.api.aws",
        "eu-south-1": "gameliftstreams.eu-south-1.api.aws",
        "eu-south-2": "gameliftstreams.eu-south-2.api.aws",
        "eu-west-1": "gameliftstreams.eu-west-1.api.aws",
        "eu-west-2": "gameliftstreams.eu-west-2.api.aws",
        "eu-west-3": "gameliftstreams.eu-west-3.api.aws",
        "il-central-1": "gameliftstreams.il-central-1.api.aws",
        "me-central-1": "gameliftstreams.me-central-1.api.aws",
        "me-south-1": "gameliftstreams.me-south-1.api.aws",
        "mx-central-1": "gameliftstreams.mx-central-1.api.aws",
        "sa-east-1": "gameliftstreams.sa-east-1.api.aws",
        "us-east-1": "gameliftstreams.us-east-1.api.aws",
        "us-east-2": "gameliftstreams.us-east-2.api.aws",
        "us-gov-east-1": "gameliftstreams.us-gov-east-1.api.aws",
        "us-gov-west-1": "gameliftstreams.us-gov-west-1.api.aws",
        "us-west-1": "gameliftstreams.us-west-1.api.aws",
        "us-west-2": "gameliftstreams.us-west-2.api.aws"
    ]}


    /// FIPS and dualstack endpoints
    static var variantEndpoints: [EndpointVariantType: AWSServiceConfig.EndpointVariant] {[
        [.fips]: .init(endpoints: [
            "af-south-1": "gameliftstreams-fips.af-south-1.api.aws",
            "ap-east-1": "gameliftstreams-fips.ap-east-1.api.aws",
            "ap-northeast-1": "gameliftstreams-fips.ap-northeast-1.api.aws",
            "ap-northeast-2": "gameliftstreams-fips.ap-northeast-2.api.aws",
            "ap-northeast-3": "gameliftstreams-fips.ap-northeast-3.api.aws",
            "ap-south-1": "gameliftstreams-fips.ap-south-1.api.aws",
            "ap-south-2": "gameliftstreams-fips.ap-south-2.api.aws",
            "ap-southeast-1": "gameliftstreams-fips.ap-southeast-1.api.aws",
            "ap-southeast-2": "gameliftstreams-fips.ap-southeast-2.api.aws",
            "ap-southeast-3": "gameliftstreams-fips.ap-southeast-3.api.aws",
            "ap-southeast-4": "gameliftstreams-fips.ap-southeast-4.api.aws",
            "ap-southeast-5": "gameliftstreams-fips.ap-southeast-5.api.aws",
            "ap-southeast-7": "gameliftstreams-fips.ap-southeast-7.api.aws",
            "ca-central-1": "gameliftstreams-fips.ca-central-1.api.aws",
            "ca-west-1": "gameliftstreams-fips.ca-west-1.api.aws",
            "cn-north-1": "gameliftstreams-fips.cn-north-1.api.amazonwebservices.com.cn",
            "cn-northwest-1": "gameliftstreams-fips.cn-northwest-1.api.amazonwebservices.com.cn",
            "eu-central-1": "gameliftstreams-fips.eu-central-1.api.aws",
            "eu-central-2": "gameliftstreams-fips.eu-central-2.api.aws",
            "eu-north-1": "gameliftstreams-fips.eu-north-1.api.aws",
            "eu-south-1": "gameliftstreams-fips.eu-south-1.api.aws",
            "eu-south-2": "gameliftstreams-fips.eu-south-2.api.aws",
            "eu-west-1": "gameliftstreams-fips.eu-west-1.api.aws",
            "eu-west-2": "gameliftstreams-fips.eu-west-2.api.aws",
            "eu-west-3": "gameliftstreams-fips.eu-west-3.api.aws",
            "il-central-1": "gameliftstreams-fips.il-central-1.api.aws",
            "me-central-1": "gameliftstreams-fips.me-central-1.api.aws",
            "me-south-1": "gameliftstreams-fips.me-south-1.api.aws",
            "mx-central-1": "gameliftstreams-fips.mx-central-1.api.aws",
            "sa-east-1": "gameliftstreams-fips.sa-east-1.api.aws",
            "us-east-1": "gameliftstreams-fips.us-east-1.api.aws",
            "us-east-2": "gameliftstreams-fips.us-east-2.api.aws",
            "us-gov-east-1": "gameliftstreams-fips.us-gov-east-1.api.aws",
            "us-gov-west-1": "gameliftstreams-fips.us-gov-west-1.api.aws",
            "us-west-1": "gameliftstreams-fips.us-west-1.api.aws",
            "us-west-2": "gameliftstreams-fips.us-west-2.api.aws"
        ])
    ]}

    // MARK: API Calls

    ///
    /// 		    Add locations that can host stream sessions. You configure locations and their corresponding capacity for each stream group. Creating a stream group in a location that's nearest to your end users can help minimize latency and improve quality.
    /// 		  This operation provisions stream capacity at the specified locations. By default, all locations have 1 or 2 capacity, depending on the stream class option: 2 for 'High' and 1 for 'Ultra' and 'Win2022'. This operation also copies the content files of all associated applications to an internal S3 bucket at each location. This allows Amazon GameLift Streams to host performant stream sessions.
    @Sendable
    @inlinable
    public func addStreamGroupLocations(_ input: AddStreamGroupLocationsInput, logger: Logger = AWSClient.loggingDisabled) async throws -> AddStreamGroupLocationsOutput {
        try await self.client.execute(
            operation: "AddStreamGroupLocations", 
            path: "/streamgroups/{Identifier}/locations", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    ///
    /// 		    Add locations that can host stream sessions. You configure locations and their corresponding capacity for each stream group. Creating a stream group in a location that's nearest to your end users can help minimize latency and improve quality.
    /// 		  This operation provisions stream capacity at the specified locations. By default, all locations have 1 or 2 capacity, depending on the stream class option: 2 for 'High' and 1 for 'Ultra' and 'Win2022'. This operation also copies the content files of all associated applications to an internal S3 bucket at each location. This allows Amazon GameLift Streams to host performant stream sessions.
    ///
    /// Parameters:
    ///   - identifier:  A stream group to add the specified locations to.   This value is a
    ///   - locationConfigurations:  A set of one or more locations and the streaming capacity for each location.
    ///   - logger: Logger use during operation
    @inlinable
    public func addStreamGroupLocations(
        identifier: String,
        locationConfigurations: [LocationConfiguration],
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> AddStreamGroupLocationsOutput {
        let input = AddStreamGroupLocationsInput(
            identifier: identifier, 
            locationConfigurations: locationConfigurations
        )
        return try await self.addStreamGroupLocations(input, logger: logger)
    }

    /// When you associate, or link, an application with a stream group, then Amazon GameLift Streams can launch the application using the stream group's allocated compute resources. The stream group must be in ACTIVE status. You can reverse this action by using DisassociateApplications.
    @Sendable
    @inlinable
    public func associateApplications(_ input: AssociateApplicationsInput, logger: Logger = AWSClient.loggingDisabled) async throws -> AssociateApplicationsOutput {
        try await self.client.execute(
            operation: "AssociateApplications", 
            path: "/streamgroups/{Identifier}/associations", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// When you associate, or link, an application with a stream group, then Amazon GameLift Streams can launch the application using the stream group's allocated compute resources. The stream group must be in ACTIVE status. You can reverse this action by using DisassociateApplications.
    ///
    /// Parameters:
    ///   - applicationIdentifiers: A set of applications to associate with the stream group. This value is a  set of either Amazon Resource Names (ARN) or IDs that uniquely identify application resources. Format example: ARN-arn:aws:gameliftstreams:us-west-2:123456789012:application/9ZY8X7Wv6 or ID-9ZY8X7Wv6.
    ///   - identifier: A stream group to associate to the applications. This value is a  Amazon Resource Name (ARN) or ID that uniquely identifies the stream group resource. Format example: ARN-arn:aws:gameliftstreams:us-west-2:123456789012:streamgroup/1AB2C3De4 or ID-1AB2C3De4.
    ///   - logger: Logger use during operation
    @inlinable
    public func associateApplications(
        applicationIdentifiers: [String],
        identifier: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> AssociateApplicationsOutput {
        let input = AssociateApplicationsInput(
            applicationIdentifiers: applicationIdentifiers, 
            identifier: identifier
        )
        return try await self.associateApplications(input, logger: logger)
    }

    /// Creates an application resource in Amazon GameLift Streams, which specifies the application content you want to stream, such as a game build or other software, and configures the settings to run it.  Before you create an application, upload your application content files to an Amazon Simple Storage Service (Amazon S3) bucket. For more information, see Getting Started in the Amazon GameLift Streams Developer Guide.    Make sure that your files in the Amazon S3 bucket are the correct version you  want to use. As soon as you create a Amazon GameLift Streams application, you cannot change the files at a  later time.    If the request is successful, Amazon GameLift Streams begins to create an application and sets the status to INITIALIZED. When an application reaches READY status, you can use the application to set up stream groups and start streams. To track application status, call GetApplication.
    @Sendable
    @inlinable
    public func createApplication(_ input: CreateApplicationInput, logger: Logger = AWSClient.loggingDisabled) async throws -> CreateApplicationOutput {
        try await self.client.execute(
            operation: "CreateApplication", 
            path: "/applications", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Creates an application resource in Amazon GameLift Streams, which specifies the application content you want to stream, such as a game build or other software, and configures the settings to run it.  Before you create an application, upload your application content files to an Amazon Simple Storage Service (Amazon S3) bucket. For more information, see Getting Started in the Amazon GameLift Streams Developer Guide.    Make sure that your files in the Amazon S3 bucket are the correct version you  want to use. As soon as you create a Amazon GameLift Streams application, you cannot change the files at a  later time.    If the request is successful, Amazon GameLift Streams begins to create an application and sets the status to INITIALIZED. When an application reaches READY status, you can use the application to set up stream groups and start streams. To track application status, call GetApplication.
    ///
    /// Parameters:
    ///   - applicationLogOutputUri: An Amazon S3 URI to a bucket where you would like Amazon GameLift Streams to save application logs. Use the following format for the URI: s3://[bucket name]/[prefix].  Required if you specify one or more LogPaths.  The log bucket must have permissions that give Amazon GameLift Streams access to write the log files. For more information, see Getting Started in the Amazon GameLift Streams Developer Guide.
    ///   - applicationLogPaths: Locations of log files that your content generates during a stream session. Enter path values that are relative to the ApplicationSourceUri location. You can specify up to 10 log locations. Amazon GameLift Streams uploads designated log files to the Amazon S3 bucket that you specify in ApplicationLogOutputUri  at the end of a stream session. To retrieve stored log files, call GetStreamSession  and get the LogFileLocationUri.
    ///   - applicationSourceUri: The location of the content that you want to stream. Enter the URI of an Amazon S3 location (bucket name and prefixes) that contains your content. Use the following format for the URI: s3://[bucket name]/[prefix]. The location can have a multi-level prefix structure, but it must include all the files needed to run the content. Amazon GameLift Streams copies everything under the specified location. This value is immutable. To designate a different content location, create a new application.  The S3 bucket and the Amazon GameLift Streams application must be in the same Amazon Web Services Region.
    ///   - clientToken:  A unique identifier that represents a client request. The request is idempotent, which ensures that an API request completes only once. When users send a request, Amazon GameLift Streams automatically populates this field.
    ///   - description: A human-readable label for the application. You can update this value later.
    ///   - executablePath: The path and file name of the executable file that launches the content for streaming. Enter a path value that is relative to the location set in ApplicationSourceUri.
    ///   - runtimeEnvironment: A set of configuration settings to run the application on a stream group. This configures the operating system, and can include compatibility layers and other drivers. A runtime environment can be one of the following:    For Linux applications     Ubuntu 22.04 LTS(Type=UBUNTU, Version=22_04_LTS)       For Windows applications    Microsoft Windows Server 2022 Base (Type=WINDOWS, Version=2022)   Proton 8.0-5 (Type=PROTON, Version=20241007)   Proton 8.0-2c (Type=PROTON, Version=20230704)
    ///   - tags: A list of labels to assign to the new application resource. Tags are developer-defined key-value pairs. Tagging Amazon Web Services resources is useful for resource management, access management and cost allocation. See  Tagging Amazon Web Services Resources in the Amazon Web Services General Reference. You can use TagResource to add tags, UntagResource to remove tags, and ListTagsForResource to view tags on existing resources. The maximum tag limit might be lower than stated. See the Amazon Web Services General Reference for actual tagging limits.
    ///   - logger: Logger use during operation
    @inlinable
    public func createApplication(
        applicationLogOutputUri: String? = nil,
        applicationLogPaths: [String]? = nil,
        applicationSourceUri: String,
        clientToken: String? = CreateApplicationInput.idempotencyToken(),
        description: String,
        executablePath: String,
        runtimeEnvironment: RuntimeEnvironment,
        tags: [String: String]? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> CreateApplicationOutput {
        let input = CreateApplicationInput(
            applicationLogOutputUri: applicationLogOutputUri, 
            applicationLogPaths: applicationLogPaths, 
            applicationSourceUri: applicationSourceUri, 
            clientToken: clientToken, 
            description: description, 
            executablePath: executablePath, 
            runtimeEnvironment: runtimeEnvironment, 
            tags: tags
        )
        return try await self.createApplication(input, logger: logger)
    }

    ///  Manage how Amazon GameLift Streams streams your applications by using a stream group. A stream group is a collection of resources that Amazon GameLift Streams uses to stream your application to end-users. When you create a stream group, you specify an application to stream by default and the type of hardware to use, such as the graphical processing unit (GPU). You can also link additional applications, which allows you to stream those applications using this stream group. Depending on your expected users, you also scale the number of concurrent streams you want to support at one time, and in what locations.   Stream capacity represents the number of concurrent streams that can be active at a time. You set stream capacity per location, per stream group. There are two types of capacity: always-on and on-demand:
    ///     Always-on:  The streaming capacity that is allocated and ready to handle stream requests without delay. You pay for this capacity whether it's in use or not. Best for quickest time from streaming request to streaming session.
    ///      On-demand:  The streaming capacity that Amazon GameLift Streams can allocate in response to stream requests, and then de-allocate when the session has terminated. This offers a cost control measure at the expense of a greater startup time (typically under 5 minutes).
    ///      To adjust the capacity of any ACTIVE stream group, call UpdateStreamGroup.   If the request is successful, Amazon GameLift Streams begins creating the stream group. Amazon GameLift Streams assigns a unique ID to the stream group resource and sets the status to ACTIVATING. When the stream group reaches ACTIVE status, you can start stream sessions by using StartStreamSession. To check the stream group's status, call GetStreamGroup.
    @Sendable
    @inlinable
    public func createStreamGroup(_ input: CreateStreamGroupInput, logger: Logger = AWSClient.loggingDisabled) async throws -> CreateStreamGroupOutput {
        try await self.client.execute(
            operation: "CreateStreamGroup", 
            path: "/streamgroups", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    ///  Manage how Amazon GameLift Streams streams your applications by using a stream group. A stream group is a collection of resources that Amazon GameLift Streams uses to stream your application to end-users. When you create a stream group, you specify an application to stream by default and the type of hardware to use, such as the graphical processing unit (GPU). You can also link additional applications, which allows you to stream those applications using this stream group. Depending on your expected users, you also scale the number of concurrent streams you want to support at one time, and in what locations.   Stream capacity represents the number of concurrent streams that can be active at a time. You set stream capacity per location, per stream group. There are two types of capacity: always-on and on-demand:
    ///     Always-on:  The streaming capacity that is allocated and ready to handle stream requests without delay. You pay for this capacity whether it's in use or not. Best for quickest time from streaming request to streaming session.
    ///      On-demand:  The streaming capacity that Amazon GameLift Streams can allocate in response to stream requests, and then de-allocate when the session has terminated. This offers a cost control measure at the expense of a greater startup time (typically under 5 minutes).
    ///      To adjust the capacity of any ACTIVE stream group, call UpdateStreamGroup.   If the request is successful, Amazon GameLift Streams begins creating the stream group. Amazon GameLift Streams assigns a unique ID to the stream group resource and sets the status to ACTIVATING. When the stream group reaches ACTIVE status, you can start stream sessions by using StartStreamSession. To check the stream group's status, call GetStreamGroup.
    ///
    /// Parameters:
    ///   - clientToken:  A unique identifier that represents a client request. The request is idempotent, which ensures that an API request completes only once. When users send a request, Amazon GameLift Streams automatically populates this field.
    ///   - defaultApplicationIdentifier: The unique identifier of the Amazon GameLift Streams application that you want to associate to a stream group as the default application. The application must be in READY status. By setting the default application identifier, you will optimize startup performance of this application in your stream group. Once set, this application cannot be disassociated from the stream group, unlike applications that are associated using AssociateApplications. If not set when creating a stream group, you will need to call AssociateApplications later, before you can start streaming.
    ///   - description: A descriptive label for the stream group.
    ///   - locationConfigurations:  A set of one or more locations and the streaming capacity for each location.
    ///   - streamClass: The target stream quality for sessions that are hosted in this stream group. Set a stream class that is appropriate to the type of content that you're streaming. Stream class determines the type of computing resources Amazon GameLift Streams uses and impacts the cost of streaming. The following options are available:  A stream class can be one of the following:     gen5n_win2022 (NVIDIA, ultra) Supports applications with extremely high 3D scene complexity. Runs applications on Microsoft Windows Server 2022 Base and supports DirectX 12. Compatible with most Unreal Engine 5.x builds, 32-bit applications, and anti-cheat technology. Uses NVIDIA A10G Tensor GPU.   Reference resolution: 1080p   Reference frame rate: 60 fps   Workload specifications: 8 vCPUs, 32 GB RAM, 24 GB VRAM   Tenancy: Supports 1 concurrent stream session       gen5n_high (NVIDIA, high) Supports applications with moderate to high 3D scene complexity. Uses NVIDIA A10G Tensor GPU.   Reference resolution: 1080p   Reference frame rate: 60 fps   Workload specifications: 4 vCPUs, 16 GB RAM, 12 GB VRAM   Tenancy: Supports up to 2 concurrent stream sessions       gen5n_ultra (NVIDIA, ultra) Supports applications with extremely high 3D scene complexity. Uses dedicated NVIDIA A10G Tensor GPU.   Reference resolution: 1080p   Reference frame rate: 60 fps   Workload specifications: 8 vCPUs, 32 GB RAM, 24 GB VRAM   Tenancy: Supports 1 concurrent stream session       gen4n_win2022 (NVIDIA, ultra) Supports applications with extremely high 3D scene complexity. Runs applications on Microsoft Windows Server 2022 Base and supports DirectX 12. Compatible with most Unreal Engine 5.2 and 5.3 builds, 32-bit applications, and anti-cheat technology. Uses NVIDIA T4 Tensor GPU.   Reference resolution: 1080p   Reference frame rate: 60 fps   Workload specifications: 8 vCPUs, 32 GB RAM, 16 GB VRAM   Tenancy: Supports 1 concurrent stream session       gen4n_high (NVIDIA, high) Supports applications with moderate to high 3D scene complexity. Uses NVIDIA T4 Tensor GPU.   Reference resolution: 1080p   Reference frame rate: 60 fps   Workload specifications: 4 vCPUs, 16 GB RAM, 8 GB VRAM   Tenancy: Supports up to 2 concurrent stream sessions       gen4n_ultra (NVIDIA, ultra) Supports applications with high 3D scene complexity. Uses dedicated NVIDIA T4 Tensor GPU.   Reference resolution: 1080p   Reference frame rate: 60 fps   Workload specifications: 8 vCPUs, 32 GB RAM, 16 GB VRAM   Tenancy: Supports 1 concurrent stream session
    ///   - tags: A list of labels to assign to the new stream group resource. Tags are developer-defined key-value pairs. It is useful to tag Amazon Web Services resources for resource management, access management, and cost allocation. See  Tagging Amazon Web Services Resources in the Amazon Web Services General Reference. You can use TagResource, UntagResource, and ListTagsForResource to add, remove, and view tags on existing resources. The maximum tag limit might be lower than stated. See the Amazon Web Services  for actual tagging limits.
    ///   - logger: Logger use during operation
    @inlinable
    public func createStreamGroup(
        clientToken: String? = CreateStreamGroupInput.idempotencyToken(),
        defaultApplicationIdentifier: String? = nil,
        description: String,
        locationConfigurations: [LocationConfiguration]? = nil,
        streamClass: StreamClass,
        tags: [String: String]? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> CreateStreamGroupOutput {
        let input = CreateStreamGroupInput(
            clientToken: clientToken, 
            defaultApplicationIdentifier: defaultApplicationIdentifier, 
            description: description, 
            locationConfigurations: locationConfigurations, 
            streamClass: streamClass, 
            tags: tags
        )
        return try await self.createStreamGroup(input, logger: logger)
    }

    /// Allows clients to reconnect to a recently disconnected stream session without losing any data from the last session. A client can reconnect to a stream session that's in PENDING_CLIENT_RECONNECTION or ACTIVE status. In the stream session life cycle, when the client disconnects from the stream session, the stream session transitions from CONNECTED to PENDING_CLIENT_RECONNECTION status. When a client requests to reconnect by calling CreateStreamSessionConnection, the stream session transitions to RECONNECTING status. When the reconnection is successful, the stream session transitions to ACTIVE status. After a stream session is disconnected for longer than ConnectionTimeoutSeconds, the stream session transitions to the TERMINATED status. To connect to an existing stream session, specify the stream group ID and stream session ID that you want to reconnect to, as well as the signal request settings to use with the stream.  ConnectionTimeoutSeconds defines the amount of time after the stream session disconnects that a reconnection is allowed. If a client is disconnected from the stream for longer than ConnectionTimeoutSeconds, the stream session ends.
    @Sendable
    @inlinable
    public func createStreamSessionConnection(_ input: CreateStreamSessionConnectionInput, logger: Logger = AWSClient.loggingDisabled) async throws -> CreateStreamSessionConnectionOutput {
        try await self.client.execute(
            operation: "CreateStreamSessionConnection", 
            path: "/streamgroups/{Identifier}/streamsessions/{StreamSessionIdentifier}/connections", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Allows clients to reconnect to a recently disconnected stream session without losing any data from the last session. A client can reconnect to a stream session that's in PENDING_CLIENT_RECONNECTION or ACTIVE status. In the stream session life cycle, when the client disconnects from the stream session, the stream session transitions from CONNECTED to PENDING_CLIENT_RECONNECTION status. When a client requests to reconnect by calling CreateStreamSessionConnection, the stream session transitions to RECONNECTING status. When the reconnection is successful, the stream session transitions to ACTIVE status. After a stream session is disconnected for longer than ConnectionTimeoutSeconds, the stream session transitions to the TERMINATED status. To connect to an existing stream session, specify the stream group ID and stream session ID that you want to reconnect to, as well as the signal request settings to use with the stream.  ConnectionTimeoutSeconds defines the amount of time after the stream session disconnects that a reconnection is allowed. If a client is disconnected from the stream for longer than ConnectionTimeoutSeconds, the stream session ends.
    ///
    /// Parameters:
    ///   - clientToken:  A unique identifier that represents a client request. The request is idempotent, which ensures that an API request completes only once. When users send a request, Amazon GameLift Streams automatically populates this field.
    ///   - identifier:  Amazon Resource Name (ARN) or ID that uniquely identifies the stream group resource. Format example: ARN-arn:aws:gameliftstreams:us-west-2:123456789012:streamgroup/1AB2C3De4 or ID-1AB2C3De4.
    ///   - signalRequest: A WebRTC ICE offer string to use when initializing a WebRTC connection. The offer is a very long JSON string. Provide the string as a text value in quotes. The offer must be newly generated, not the same offer provided to StartStreamSession.
    ///   - streamSessionIdentifier:  Amazon Resource Name (ARN) that uniquely identifies the stream session resource. Format example: 1AB2C3De4. The stream session must be in PENDING_CLIENT_RECONNECTION or ACTIVE status.
    ///   - logger: Logger use during operation
    @inlinable
    public func createStreamSessionConnection(
        clientToken: String? = CreateStreamSessionConnectionInput.idempotencyToken(),
        identifier: String,
        signalRequest: String,
        streamSessionIdentifier: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> CreateStreamSessionConnectionOutput {
        let input = CreateStreamSessionConnectionInput(
            clientToken: clientToken, 
            identifier: identifier, 
            signalRequest: signalRequest, 
            streamSessionIdentifier: streamSessionIdentifier
        )
        return try await self.createStreamSessionConnection(input, logger: logger)
    }

    /// Permanently deletes an Amazon GameLift Streams application resource. This also deletes the application content files stored with Amazon GameLift Streams. However, this does not delete the original files that you uploaded to your Amazon S3 bucket; you can delete these any time after Amazon GameLift Streams creates an application, which is the only time Amazon GameLift Streams accesses your Amazon S3 bucket.  You can only delete an application that meets the following conditions:                The application is in READY or ERROR status. You cannot delete an application that's in PROCESSING or INITIALIZED status.   The application is not the default application of any stream groups. You must first delete the stream group by using DeleteStreamGroup.   The application is not linked to any stream groups. You must first unlink the stream group by using DisassociateApplications.    An application is not streaming in any ongoing stream session. You must wait until the client ends the stream session or call TerminateStreamSession to end the stream.    If any active stream groups exist for this application, this request returns a ValidationException.
    @Sendable
    @inlinable
    public func deleteApplication(_ input: DeleteApplicationInput, logger: Logger = AWSClient.loggingDisabled) async throws {
        try await self.client.execute(
            operation: "DeleteApplication", 
            path: "/applications/{Identifier}", 
            httpMethod: .DELETE, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Permanently deletes an Amazon GameLift Streams application resource. This also deletes the application content files stored with Amazon GameLift Streams. However, this does not delete the original files that you uploaded to your Amazon S3 bucket; you can delete these any time after Amazon GameLift Streams creates an application, which is the only time Amazon GameLift Streams accesses your Amazon S3 bucket.  You can only delete an application that meets the following conditions:                The application is in READY or ERROR status. You cannot delete an application that's in PROCESSING or INITIALIZED status.   The application is not the default application of any stream groups. You must first delete the stream group by using DeleteStreamGroup.   The application is not linked to any stream groups. You must first unlink the stream group by using DisassociateApplications.    An application is not streaming in any ongoing stream session. You must wait until the client ends the stream session or call TerminateStreamSession to end the stream.    If any active stream groups exist for this application, this request returns a ValidationException.
    ///
    /// Parameters:
    ///   - identifier: An  Amazon Resource Name (ARN) or ID that uniquely identifies the application resource. Format example: ARN-arn:aws:gameliftstreams:us-west-2:123456789012:application/9ZY8X7Wv6 or ID-9ZY8X7Wv6.
    ///   - logger: Logger use during operation
    @inlinable
    public func deleteApplication(
        identifier: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws {
        let input = DeleteApplicationInput(
            identifier: identifier
        )
        return try await self.deleteApplication(input, logger: logger)
    }

    /// Permanently deletes all compute resources and information related to a stream group. To delete a stream group, specify the unique stream group identifier. During the deletion process, the stream group's status is DELETING. This operation stops streams in progress and prevents new streams from starting. As a best practice, before deleting the stream group, call ListStreamSessions to check for streams in progress and take action to stop them. When you delete a stream group, any application associations referring to that stream group are automatically removed.
    @Sendable
    @inlinable
    public func deleteStreamGroup(_ input: DeleteStreamGroupInput, logger: Logger = AWSClient.loggingDisabled) async throws {
        try await self.client.execute(
            operation: "DeleteStreamGroup", 
            path: "/streamgroups/{Identifier}", 
            httpMethod: .DELETE, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Permanently deletes all compute resources and information related to a stream group. To delete a stream group, specify the unique stream group identifier. During the deletion process, the stream group's status is DELETING. This operation stops streams in progress and prevents new streams from starting. As a best practice, before deleting the stream group, call ListStreamSessions to check for streams in progress and take action to stop them. When you delete a stream group, any application associations referring to that stream group are automatically removed.
    ///
    /// Parameters:
    ///   - identifier: The unique ID value of the stream group resource to delete. Format example: 1AB2C3De4.
    ///   - logger: Logger use during operation
    @inlinable
    public func deleteStreamGroup(
        identifier: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws {
        let input = DeleteStreamGroupInput(
            identifier: identifier
        )
        return try await self.deleteStreamGroup(input, logger: logger)
    }

    ///   When you disassociate, or unlink, an application from a stream group, you can no longer stream this application by using that stream group's allocated compute resources. Any streams in process will continue until they terminate, which helps avoid interrupting an end-user's stream. Amazon GameLift Streams will not initiate new streams using this stream group. The disassociate action does not affect the stream capacity of a stream group.   You can only disassociate an application if it's not a default application of the stream group. Check DefaultApplicationIdentifier by calling GetStreamGroup.
    @Sendable
    @inlinable
    public func disassociateApplications(_ input: DisassociateApplicationsInput, logger: Logger = AWSClient.loggingDisabled) async throws -> DisassociateApplicationsOutput {
        try await self.client.execute(
            operation: "DisassociateApplications", 
            path: "/streamgroups/{Identifier}/disassociations", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    ///   When you disassociate, or unlink, an application from a stream group, you can no longer stream this application by using that stream group's allocated compute resources. Any streams in process will continue until they terminate, which helps avoid interrupting an end-user's stream. Amazon GameLift Streams will not initiate new streams using this stream group. The disassociate action does not affect the stream capacity of a stream group.   You can only disassociate an application if it's not a default application of the stream group. Check DefaultApplicationIdentifier by calling GetStreamGroup.
    ///
    /// Parameters:
    ///   - applicationIdentifiers: A set of applications that you want to disassociate from the stream group. This value is a  set of either Amazon Resource Names (ARN) or IDs that uniquely identify application resources. Format example: ARN-arn:aws:gameliftstreams:us-west-2:123456789012:application/9ZY8X7Wv6 or ID-9ZY8X7Wv6.
    ///   - identifier: A stream group to disassociate these applications from. This value is an  Amazon Resource Name (ARN) or ID that uniquely identifies the stream group resource. Format example: ARN-arn:aws:gameliftstreams:us-west-2:123456789012:streamgroup/1AB2C3De4 or ID-1AB2C3De4.
    ///   - logger: Logger use during operation
    @inlinable
    public func disassociateApplications(
        applicationIdentifiers: [String],
        identifier: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> DisassociateApplicationsOutput {
        let input = DisassociateApplicationsInput(
            applicationIdentifiers: applicationIdentifiers, 
            identifier: identifier
        )
        return try await self.disassociateApplications(input, logger: logger)
    }

    ///  Export the files that your application modifies or generates in a stream session, which can help you debug or verify your application. When your application runs, it generates output files such as logs, diagnostic information, crash dumps, save files, user data, screenshots, and so on. The files can be defined by the engine or frameworks that your application uses, or information that you've programmed your application to output.   You can only call this action on a stream session that is in progress, specifically in one of the following statuses ACTIVE, CONNECTED, PENDING_CLIENT_RECONNECTION, and RECONNECTING. You must provide an Amazon Simple Storage Service (Amazon S3) bucket to store the files in. When the session ends, Amazon GameLift Streams produces a compressed folder that contains all of the files and directories that were modified or created by the application during the stream session. AWS uses your security credentials to authenticate and authorize access to your Amazon S3 bucket.  Amazon GameLift Streams collects the following generated and modified files. Find them in the corresponding folders in the .zip archive.    application/: The folder where your application or game is stored.       profile/: The user profile folder.    temp/: The system temp folder.    To verify the status of the exported files, use GetStreamSession.  To delete the files, delete the object in the S3 bucket.
    @Sendable
    @inlinable
    public func exportStreamSessionFiles(_ input: ExportStreamSessionFilesInput, logger: Logger = AWSClient.loggingDisabled) async throws -> ExportStreamSessionFilesOutput {
        try await self.client.execute(
            operation: "ExportStreamSessionFiles", 
            path: "/streamgroups/{Identifier}/streamsessions/{StreamSessionIdentifier}/exportfiles", 
            httpMethod: .PUT, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    ///  Export the files that your application modifies or generates in a stream session, which can help you debug or verify your application. When your application runs, it generates output files such as logs, diagnostic information, crash dumps, save files, user data, screenshots, and so on. The files can be defined by the engine or frameworks that your application uses, or information that you've programmed your application to output.   You can only call this action on a stream session that is in progress, specifically in one of the following statuses ACTIVE, CONNECTED, PENDING_CLIENT_RECONNECTION, and RECONNECTING. You must provide an Amazon Simple Storage Service (Amazon S3) bucket to store the files in. When the session ends, Amazon GameLift Streams produces a compressed folder that contains all of the files and directories that were modified or created by the application during the stream session. AWS uses your security credentials to authenticate and authorize access to your Amazon S3 bucket.  Amazon GameLift Streams collects the following generated and modified files. Find them in the corresponding folders in the .zip archive.    application/: The folder where your application or game is stored.       profile/: The user profile folder.    temp/: The system temp folder.    To verify the status of the exported files, use GetStreamSession.  To delete the files, delete the object in the S3 bucket.
    ///
    /// Parameters:
    ///   - identifier: An  Amazon Resource Name (ARN) or ID that uniquely identifies the stream group resource. Format example: ARN-arn:aws:gameliftstreams:us-west-2:123456789012:streamgroup/1AB2C3De4 or ID-1AB2C3De4.
    ///   - outputUri:  The S3 bucket URI where Amazon GameLift Streams uploads the set of compressed exported files for this stream session. Amazon GameLift Streams generates a ZIP file name based on the stream session metadata. Alternatively, you can provide a custom file name with  a .zip file extension.  Example 1: If you provide an S3 URI called s3://MyBucket/MyGame_Session1.zip, then Amazon GameLift Streams will save the files at that location.  Example 2: If you provide an S3 URI called s3://MyBucket/MyGameSessions_ExportedFiles/, then Amazon GameLift Streams will save the files at s3://MyBucket/MyGameSessions_ExportedFiles/YYYYMMDD-HHMMSS-appId-sg-Id-sessionId.zip or another similar name.
    ///   - streamSessionIdentifier: An  Amazon Resource Name (ARN) or ID that uniquely identifies the stream session resource. Format example: 1AB2C3De4.
    ///   - logger: Logger use during operation
    @inlinable
    public func exportStreamSessionFiles(
        identifier: String,
        outputUri: String,
        streamSessionIdentifier: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> ExportStreamSessionFilesOutput {
        let input = ExportStreamSessionFilesInput(
            identifier: identifier, 
            outputUri: outputUri, 
            streamSessionIdentifier: streamSessionIdentifier
        )
        return try await self.exportStreamSessionFiles(input, logger: logger)
    }

    /// Retrieves properties for an Amazon GameLift Streams application resource. Specify the ID of the application that you want to retrieve. If the operation is successful, it returns properties for the requested application.
    @Sendable
    @inlinable
    public func getApplication(_ input: GetApplicationInput, logger: Logger = AWSClient.loggingDisabled) async throws -> GetApplicationOutput {
        try await self.client.execute(
            operation: "GetApplication", 
            path: "/applications/{Identifier}", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Retrieves properties for an Amazon GameLift Streams application resource. Specify the ID of the application that you want to retrieve. If the operation is successful, it returns properties for the requested application.
    ///
    /// Parameters:
    ///   - identifier: An  Amazon Resource Name (ARN) or ID that uniquely identifies the application resource. Format example: ARN-arn:aws:gameliftstreams:us-west-2:123456789012:application/9ZY8X7Wv6 or ID-9ZY8X7Wv6.
    ///   - logger: Logger use during operation
    @inlinable
    public func getApplication(
        identifier: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> GetApplicationOutput {
        let input = GetApplicationInput(
            identifier: identifier
        )
        return try await self.getApplication(input, logger: logger)
    }

    /// Retrieves properties for a Amazon GameLift Streams stream group resource. Specify the ID of the stream group that you want to retrieve. If the operation is successful, it returns properties for the requested stream group.
    @Sendable
    @inlinable
    public func getStreamGroup(_ input: GetStreamGroupInput, logger: Logger = AWSClient.loggingDisabled) async throws -> GetStreamGroupOutput {
        try await self.client.execute(
            operation: "GetStreamGroup", 
            path: "/streamgroups/{Identifier}", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Retrieves properties for a Amazon GameLift Streams stream group resource. Specify the ID of the stream group that you want to retrieve. If the operation is successful, it returns properties for the requested stream group.
    ///
    /// Parameters:
    ///   - identifier: The unique ID value of the stream group resource to retrieve. Format example: 1AB2C3De4.
    ///   - logger: Logger use during operation
    @inlinable
    public func getStreamGroup(
        identifier: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> GetStreamGroupOutput {
        let input = GetStreamGroupInput(
            identifier: identifier
        )
        return try await self.getStreamGroup(input, logger: logger)
    }

    /// Retrieves properties for a Amazon GameLift Streams stream session resource. Specify the Amazon Resource Name (ARN) of the stream session that you want to retrieve and its stream group ARN. If the operation is successful, it returns properties for the requested resource.
    @Sendable
    @inlinable
    public func getStreamSession(_ input: GetStreamSessionInput, logger: Logger = AWSClient.loggingDisabled) async throws -> GetStreamSessionOutput {
        try await self.client.execute(
            operation: "GetStreamSession", 
            path: "/streamgroups/{Identifier}/streamsessions/{StreamSessionIdentifier}", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Retrieves properties for a Amazon GameLift Streams stream session resource. Specify the Amazon Resource Name (ARN) of the stream session that you want to retrieve and its stream group ARN. If the operation is successful, it returns properties for the requested resource.
    ///
    /// Parameters:
    ///   - identifier: The stream group that runs this stream session. This value is an  Amazon Resource Name (ARN) or ID that uniquely identifies the stream group resource. Format example: ARN-arn:aws:gameliftstreams:us-west-2:123456789012:streamgroup/1AB2C3De4 or ID-1AB2C3De4.
    ///   - streamSessionIdentifier: An  Amazon Resource Name (ARN) that uniquely identifies the stream session resource. Format example: 1AB2C3De4.
    ///   - logger: Logger use during operation
    @inlinable
    public func getStreamSession(
        identifier: String,
        streamSessionIdentifier: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> GetStreamSessionOutput {
        let input = GetStreamSessionInput(
            identifier: identifier, 
            streamSessionIdentifier: streamSessionIdentifier
        )
        return try await self.getStreamSession(input, logger: logger)
    }

    /// Retrieves a list of all Amazon GameLift Streams applications that are associated with the Amazon Web Services account in use. This operation returns applications in all statuses, in no particular order. You can paginate the results as needed.
    @Sendable
    @inlinable
    public func listApplications(_ input: ListApplicationsInput, logger: Logger = AWSClient.loggingDisabled) async throws -> ListApplicationsOutput {
        try await self.client.execute(
            operation: "ListApplications", 
            path: "/applications", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Retrieves a list of all Amazon GameLift Streams applications that are associated with the Amazon Web Services account in use. This operation returns applications in all statuses, in no particular order. You can paginate the results as needed.
    ///
    /// Parameters:
    ///   - maxResults: The number of results to return. Use this parameter with NextToken to return results in sequential pages. Default value is 25.
    ///   - nextToken: The  token that marks the start of the next set of results. Use this token when you retrieve results as sequential pages. To get the first page of results, omit a token value. To get the remaining pages, provide the token returned with the previous result set.
    ///   - logger: Logger use during operation
    @inlinable
    public func listApplications(
        maxResults: Int? = nil,
        nextToken: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> ListApplicationsOutput {
        let input = ListApplicationsInput(
            maxResults: maxResults, 
            nextToken: nextToken
        )
        return try await self.listApplications(input, logger: logger)
    }

    /// Retrieves a list of all Amazon GameLift Streams stream groups that are associated with the Amazon Web Services account in use. This operation returns stream groups in all statuses, in no particular order. You can paginate the results as needed.
    @Sendable
    @inlinable
    public func listStreamGroups(_ input: ListStreamGroupsInput, logger: Logger = AWSClient.loggingDisabled) async throws -> ListStreamGroupsOutput {
        try await self.client.execute(
            operation: "ListStreamGroups", 
            path: "/streamgroups", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Retrieves a list of all Amazon GameLift Streams stream groups that are associated with the Amazon Web Services account in use. This operation returns stream groups in all statuses, in no particular order. You can paginate the results as needed.
    ///
    /// Parameters:
    ///   - maxResults: The number of results to return. Use this parameter with NextToken to return results in sequential pages. Default value is 25.
    ///   - nextToken: A  token that marks the start of the next set of results. Use this token when you retrieve results as sequential pages. To get the first page of results, omit a token value. To get the remaining pages, provide the token returned with the previous result set.
    ///   - logger: Logger use during operation
    @inlinable
    public func listStreamGroups(
        maxResults: Int? = nil,
        nextToken: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> ListStreamGroupsOutput {
        let input = ListStreamGroupsInput(
            maxResults: maxResults, 
            nextToken: nextToken
        )
        return try await self.listStreamGroups(input, logger: logger)
    }

    /// Retrieves a list of Amazon GameLift Streams stream sessions that a stream group is hosting. To retrieve stream sessions, specify the stream group, and optionally filter by stream session status. You can paginate the results as needed. This operation returns the requested stream sessions in no particular order.
    @Sendable
    @inlinable
    public func listStreamSessions(_ input: ListStreamSessionsInput, logger: Logger = AWSClient.loggingDisabled) async throws -> ListStreamSessionsOutput {
        try await self.client.execute(
            operation: "ListStreamSessions", 
            path: "/streamgroups/{Identifier}/streamsessions", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Retrieves a list of Amazon GameLift Streams stream sessions that a stream group is hosting. To retrieve stream sessions, specify the stream group, and optionally filter by stream session status. You can paginate the results as needed. This operation returns the requested stream sessions in no particular order.
    ///
    /// Parameters:
    ///   - exportFilesStatus: Filter by the exported files status. You can specify one status in each request to retrieve only sessions that currently have that exported files status.
    ///   - identifier: The unique identifier of a Amazon GameLift Streams stream group to retrieve the stream session for. You can use either the stream group ID or the Amazon Resource Name (ARN).
    ///   - maxResults: The  number of results to return. Use this parameter with NextToken to return results in sequential pages. Default value is 25.
    ///   - nextToken: The  token that marks the start of the next set of results. Use this token when you retrieve results as sequential pages. To get the first page of results, omit a token value. To get the remaining pages, provide the token returned with the previous result set.
    ///   - status: Filter by the stream session status. You can specify one status in each request to retrieve only sessions that are currently in that status.
    ///   - logger: Logger use during operation
    @inlinable
    public func listStreamSessions(
        exportFilesStatus: ExportFilesStatus? = nil,
        identifier: String,
        maxResults: Int? = nil,
        nextToken: String? = nil,
        status: StreamSessionStatus? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> ListStreamSessionsOutput {
        let input = ListStreamSessionsInput(
            exportFilesStatus: exportFilesStatus, 
            identifier: identifier, 
            maxResults: maxResults, 
            nextToken: nextToken, 
            status: status
        )
        return try await self.listStreamSessions(input, logger: logger)
    }

    /// Retrieves a list of Amazon GameLift Streams stream sessions that this user account has access to. In the returned list of stream sessions, the ExportFilesMetadata property only shows the Status value. To get the OutpurUri and StatusReason values, use GetStreamSession. We don't recommend using this operation to regularly check stream session statuses because it's costly. Instead, to check status updates for a specific stream session, use GetStreamSession.
    @Sendable
    @inlinable
    public func listStreamSessionsByAccount(_ input: ListStreamSessionsByAccountInput, logger: Logger = AWSClient.loggingDisabled) async throws -> ListStreamSessionsByAccountOutput {
        try await self.client.execute(
            operation: "ListStreamSessionsByAccount", 
            path: "/streamsessions", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Retrieves a list of Amazon GameLift Streams stream sessions that this user account has access to. In the returned list of stream sessions, the ExportFilesMetadata property only shows the Status value. To get the OutpurUri and StatusReason values, use GetStreamSession. We don't recommend using this operation to regularly check stream session statuses because it's costly. Instead, to check status updates for a specific stream session, use GetStreamSession.
    ///
    /// Parameters:
    ///   - exportFilesStatus: Filter by the exported files status. You can specify one status in each request to retrieve only sessions that currently have that exported files status.
    ///   - maxResults: The  number of results to return. Use this parameter with NextToken to return results in sequential pages. Default value is 25.
    ///   - nextToken: The  token that marks the start of the next set of results. Use this token when you retrieve results as sequential pages. To get the first page of results, omit a token value. To get the remaining pages, provide the token returned with the previous result set.
    ///   - status: Filter by the stream session status. You can specify one status in each request to retrieve only sessions that are currently in that status.
    ///   - logger: Logger use during operation
    @inlinable
    public func listStreamSessionsByAccount(
        exportFilesStatus: ExportFilesStatus? = nil,
        maxResults: Int? = nil,
        nextToken: String? = nil,
        status: StreamSessionStatus? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> ListStreamSessionsByAccountOutput {
        let input = ListStreamSessionsByAccountInput(
            exportFilesStatus: exportFilesStatus, 
            maxResults: maxResults, 
            nextToken: nextToken, 
            status: status
        )
        return try await self.listStreamSessionsByAccount(input, logger: logger)
    }

    /// Retrieves all tags assigned to a Amazon GameLift Streams resource. To list tags for a resource, specify the ARN value for the resource.  Learn more   Tagging Amazon Web Services Resources in the Amazon Web Services General Reference    Amazon Web Services Tagging Strategies
    @Sendable
    @inlinable
    public func listTagsForResource(_ input: ListTagsForResourceRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> ListTagsForResourceResponse {
        try await self.client.execute(
            operation: "ListTagsForResource", 
            path: "/tags/{ResourceArn}", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Retrieves all tags assigned to a Amazon GameLift Streams resource. To list tags for a resource, specify the ARN value for the resource.  Learn more   Tagging Amazon Web Services Resources in the Amazon Web Services General Reference    Amazon Web Services Tagging Strategies
    ///
    /// Parameters:
    ///   - resourceArn: The (Amazon Resource Name (ARN) that you want to retrieve tags for. To get a Amazon GameLift Streams resource ARN, call a List or Get operation for the resource.
    ///   - logger: Logger use during operation
    @inlinable
    public func listTagsForResource(
        resourceArn: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> ListTagsForResourceResponse {
        let input = ListTagsForResourceRequest(
            resourceArn: resourceArn
        )
        return try await self.listTagsForResource(input, logger: logger)
    }

    ///  Removes a set of remote locations from this stream group. Amazon GameLift Streams works to release allocated compute resources in these location. Thus, stream sessions can no longer start from these locations by using this stream group. Amazon GameLift Streams also deletes the content files of all associated applications that were in Amazon GameLift Streams's internal S3 bucket at this location.   You cannot remove the region where you initially created this stream group, known as the primary location. However, you can set the stream capacity to zero.
    @Sendable
    @inlinable
    public func removeStreamGroupLocations(_ input: RemoveStreamGroupLocationsInput, logger: Logger = AWSClient.loggingDisabled) async throws {
        try await self.client.execute(
            operation: "RemoveStreamGroupLocations", 
            path: "/streamgroups/{Identifier}/locations", 
            httpMethod: .DELETE, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    ///  Removes a set of remote locations from this stream group. Amazon GameLift Streams works to release allocated compute resources in these location. Thus, stream sessions can no longer start from these locations by using this stream group. Amazon GameLift Streams also deletes the content files of all associated applications that were in Amazon GameLift Streams's internal S3 bucket at this location.   You cannot remove the region where you initially created this stream group, known as the primary location. However, you can set the stream capacity to zero.
    ///
    /// Parameters:
    ///   - identifier:  A stream group to remove the specified locations from.    This value is a
    ///   - locations:  A set of locations to remove this stream group.    A set of location names. For example, us-east-1. For a complete list of locations that Amazon GameLift Streams supports, see
    ///   - logger: Logger use during operation
    @inlinable
    public func removeStreamGroupLocations(
        identifier: String,
        locations: [String],
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws {
        let input = RemoveStreamGroupLocationsInput(
            identifier: identifier, 
            locations: locations
        )
        return try await self.removeStreamGroupLocations(input, logger: logger)
    }

    ///  This action initiates a new stream session and outputs connection information that clients can use to access the stream. A stream session refers to an instance of a stream that Amazon GameLift Streams transmits from the server to the end-user. A stream session runs on a compute resource, or stream capacity, that a stream group has allocated.  To start a new stream session, specify a stream group and application ID, along with the transport protocol and signal request settings to use with the stream. You must have associated at least one application to the stream group before starting a stream session, either when creating the stream group, or by using AssociateApplications. For stream groups that have multiple locations, provide a set of locations ordered by priority by setting Locations. Amazon GameLift Streams will start a single stream session in the next available location. An application must be finished replicating in a remote location before the remote location can host a stream.  If the request is successful, Amazon GameLift Streams begins to prepare the stream. Amazon GameLift Streams assigns an Amazon Resource Name (ARN) value to the stream session resource and sets the status to ACTIVATING. During the stream preparation process, Amazon GameLift Streams queues the request and searches for available stream capacity to run the stream. This can result to one of the following:    Amazon GameLift Streams identifies an available compute resource to run the application content and start the stream. When the stream is ready, the stream session's status changes to ACTIVE and includes stream connection information. Provide the connection information to the requesting client to join the stream session.   Amazon GameLift Streams doesn't identify an available resource within a certain time, set by ClientToken. In this case, Amazon GameLift Streams stops processing the request, and the stream session object status changes to ERROR with status reason placementTimeout.
    @Sendable
    @inlinable
    public func startStreamSession(_ input: StartStreamSessionInput, logger: Logger = AWSClient.loggingDisabled) async throws -> StartStreamSessionOutput {
        try await self.client.execute(
            operation: "StartStreamSession", 
            path: "/streamgroups/{Identifier}/streamsessions", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    ///  This action initiates a new stream session and outputs connection information that clients can use to access the stream. A stream session refers to an instance of a stream that Amazon GameLift Streams transmits from the server to the end-user. A stream session runs on a compute resource, or stream capacity, that a stream group has allocated.  To start a new stream session, specify a stream group and application ID, along with the transport protocol and signal request settings to use with the stream. You must have associated at least one application to the stream group before starting a stream session, either when creating the stream group, or by using AssociateApplications. For stream groups that have multiple locations, provide a set of locations ordered by priority by setting Locations. Amazon GameLift Streams will start a single stream session in the next available location. An application must be finished replicating in a remote location before the remote location can host a stream.  If the request is successful, Amazon GameLift Streams begins to prepare the stream. Amazon GameLift Streams assigns an Amazon Resource Name (ARN) value to the stream session resource and sets the status to ACTIVATING. During the stream preparation process, Amazon GameLift Streams queues the request and searches for available stream capacity to run the stream. This can result to one of the following:    Amazon GameLift Streams identifies an available compute resource to run the application content and start the stream. When the stream is ready, the stream session's status changes to ACTIVE and includes stream connection information. Provide the connection information to the requesting client to join the stream session.   Amazon GameLift Streams doesn't identify an available resource within a certain time, set by ClientToken. In this case, Amazon GameLift Streams stops processing the request, and the stream session object status changes to ERROR with status reason placementTimeout.
    ///
    /// Parameters:
    ///   - additionalEnvironmentVariables: A set of options that you can use to control the stream session runtime environment, expressed as a set of key-value pairs.  You can use this to configure the application or stream session details. You can also provide custom environment variables that Amazon GameLift Streams passes to your game client.  If you want to debug your application with environment variables, we recommend that you do so in a local environment outside of Amazon GameLift Streams.  For more information, refer to the Compatibility Guidance in the troubleshooting section of the Developer Guide.   AdditionalEnvironmentVariables and AdditionalLaunchArgs have similar purposes.  AdditionalEnvironmentVariables passes data using environment variables; while  AdditionalLaunchArgs passes data using command-line arguments.
    ///   - additionalLaunchArgs: A list of CLI arguments that are sent to the streaming server when a stream session launches. You can use this to configure the application or stream session details. You can also provide custom arguments that Amazon GameLift Streams passes to your game client.  AdditionalEnvironmentVariables and AdditionalLaunchArgs have similar purposes.  AdditionalEnvironmentVariables passes data using environment variables; while  AdditionalLaunchArgs passes data using command-line arguments.
    ///   - applicationIdentifier: An  Amazon Resource Name (ARN) or ID that uniquely identifies the application resource. Format example: ARN-arn:aws:gameliftstreams:us-west-2:123456789012:application/9ZY8X7Wv6 or ID-9ZY8X7Wv6.
    ///   - clientToken:  A unique identifier that represents a client request. The request is idempotent, which ensures that an API request completes only once. When users send a request, Amazon GameLift Streams automatically populates this field.
    ///   - connectionTimeoutSeconds: Length of time (in seconds) that Amazon GameLift Streams should wait for a client to connect to the stream session. This time span starts when the stream session reaches ACTIVE status. If no client connects before the timeout, Amazon GameLift Streams stops the stream session with status of TERMINATED. Default value is 120.
    ///   - description: A human-readable label for the stream session. You can update this value later.
    ///   - identifier: The stream group to run this stream session with. This value is an  Amazon Resource Name (ARN) or ID that uniquely identifies the stream group resource. Format example: ARN-arn:aws:gameliftstreams:us-west-2:123456789012:streamgroup/1AB2C3De4 or ID-1AB2C3De4.
    ///   - locations:  A list of locations, in order of priority, where you want Amazon GameLift Streams to start a stream from. Amazon GameLift Streams selects the location with the next available capacity to start a single stream session in. If this value is empty, Amazon GameLift Streams attempts to start a stream session in the primary location.   This value is A set of location names. For example, us-east-1. For a complete list of locations that Amazon GameLift Streams supports, see
    ///   - protocol: The data transport protocol to use for the stream session.
    ///   - sessionLengthSeconds: The maximum length of time (in seconds) that Amazon GameLift Streams keeps the stream session open. At this point, Amazon GameLift Streams ends the stream session regardless of any existing client connections. Default value is 43200.
    ///   - signalRequest: A WebRTC ICE offer string to use when initializing a WebRTC connection. The offer is a very long JSON string. Provide the string as a text value in quotes.
    ///   - userId:  An opaque, unique identifier for an end-user, defined by the developer.
    ///   - logger: Logger use during operation
    @inlinable
    public func startStreamSession(
        additionalEnvironmentVariables: [String: String]? = nil,
        additionalLaunchArgs: [String]? = nil,
        applicationIdentifier: String,
        clientToken: String? = StartStreamSessionInput.idempotencyToken(),
        connectionTimeoutSeconds: Int? = nil,
        description: String? = nil,
        identifier: String,
        locations: [String]? = nil,
        protocol: `Protocol`,
        sessionLengthSeconds: Int? = nil,
        signalRequest: String,
        userId: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> StartStreamSessionOutput {
        let input = StartStreamSessionInput(
            additionalEnvironmentVariables: additionalEnvironmentVariables, 
            additionalLaunchArgs: additionalLaunchArgs, 
            applicationIdentifier: applicationIdentifier, 
            clientToken: clientToken, 
            connectionTimeoutSeconds: connectionTimeoutSeconds, 
            description: description, 
            identifier: identifier, 
            locations: locations, 
            protocol: `protocol`, 
            sessionLengthSeconds: sessionLengthSeconds, 
            signalRequest: signalRequest, 
            userId: userId
        )
        return try await self.startStreamSession(input, logger: logger)
    }

    /// Assigns one or more tags to a Amazon GameLift Streams resource. Use tags to organize Amazon Web Services resources for a range of purposes. You can assign tags to the following Amazon GameLift Streams resource types:   Application   StreamGroup    Learn more   Tagging Amazon Web Services Resources in the Amazon Web Services General Reference    Amazon Web Services Tagging Strategies
    @Sendable
    @inlinable
    public func tagResource(_ input: TagResourceRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> TagResourceResponse {
        try await self.client.execute(
            operation: "TagResource", 
            path: "/tags/{ResourceArn}", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Assigns one or more tags to a Amazon GameLift Streams resource. Use tags to organize Amazon Web Services resources for a range of purposes. You can assign tags to the following Amazon GameLift Streams resource types:   Application   StreamGroup    Learn more   Tagging Amazon Web Services Resources in the Amazon Web Services General Reference    Amazon Web Services Tagging Strategies
    ///
    /// Parameters:
    ///   - resourceArn: The Amazon Resource Name (ARN) of the Amazon GameLift Streams resource that you want to apply tags to.
    ///   - tags: A list of tags, in the form of key-value pairs, to assign to the specified Amazon GameLift Streams resource.
    ///   - logger: Logger use during operation
    @inlinable
    public func tagResource(
        resourceArn: String,
        tags: [String: String],
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> TagResourceResponse {
        let input = TagResourceRequest(
            resourceArn: resourceArn, 
            tags: tags
        )
        return try await self.tagResource(input, logger: logger)
    }

    /// Permanently terminates an active stream session. When called, the stream session status changes to TERMINATING. You can terminate a stream session in any status except ACTIVATING. If the stream session is in ACTIVATING status, an exception is thrown.
    @Sendable
    @inlinable
    public func terminateStreamSession(_ input: TerminateStreamSessionInput, logger: Logger = AWSClient.loggingDisabled) async throws {
        try await self.client.execute(
            operation: "TerminateStreamSession", 
            path: "/streamgroups/{Identifier}/streamsessions/{StreamSessionIdentifier}", 
            httpMethod: .DELETE, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Permanently terminates an active stream session. When called, the stream session status changes to TERMINATING. You can terminate a stream session in any status except ACTIVATING. If the stream session is in ACTIVATING status, an exception is thrown.
    ///
    /// Parameters:
    ///   - identifier:  Amazon Resource Name (ARN) or ID that uniquely identifies the stream group resource. Format example: ARN-arn:aws:gameliftstreams:us-west-2:123456789012:streamgroup/1AB2C3De4 or ID-1AB2C3De4.
    ///   - streamSessionIdentifier:  Amazon Resource Name (ARN) that uniquely identifies the stream session resource. Format example: 1AB2C3De4.
    ///   - logger: Logger use during operation
    @inlinable
    public func terminateStreamSession(
        identifier: String,
        streamSessionIdentifier: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws {
        let input = TerminateStreamSessionInput(
            identifier: identifier, 
            streamSessionIdentifier: streamSessionIdentifier
        )
        return try await self.terminateStreamSession(input, logger: logger)
    }

    /// Removes one or more tags from a Amazon GameLift Streams resource. To remove tags, specify the Amazon GameLift Streams resource and a list of  one or more tags to remove.
    @Sendable
    @inlinable
    public func untagResource(_ input: UntagResourceRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> UntagResourceResponse {
        try await self.client.execute(
            operation: "UntagResource", 
            path: "/tags/{ResourceArn}", 
            httpMethod: .DELETE, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Removes one or more tags from a Amazon GameLift Streams resource. To remove tags, specify the Amazon GameLift Streams resource and a list of  one or more tags to remove.
    ///
    /// Parameters:
    ///   - resourceArn: The Amazon Resource Name (ARN) of the Amazon GameLift Streams resource that you want to remove tags from.
    ///   - tagKeys: A list of tag keys to remove from the specified Amazon GameLift Streams resource.
    ///   - logger: Logger use during operation
    @inlinable
    public func untagResource(
        resourceArn: String,
        tagKeys: [String],
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> UntagResourceResponse {
        let input = UntagResourceRequest(
            resourceArn: resourceArn, 
            tagKeys: tagKeys
        )
        return try await self.untagResource(input, logger: logger)
    }

    ///  Updates the mutable configuration settings for a Amazon GameLift Streams application resource. You can change the Description, ApplicationLogOutputUri, and ApplicationLogPaths.  To update application settings, specify the application ID and provide the new values. If the operation is successful, it returns the complete updated set of settings for the application.
    @Sendable
    @inlinable
    public func updateApplication(_ input: UpdateApplicationInput, logger: Logger = AWSClient.loggingDisabled) async throws -> UpdateApplicationOutput {
        try await self.client.execute(
            operation: "UpdateApplication", 
            path: "/applications/{Identifier}", 
            httpMethod: .PATCH, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    ///  Updates the mutable configuration settings for a Amazon GameLift Streams application resource. You can change the Description, ApplicationLogOutputUri, and ApplicationLogPaths.  To update application settings, specify the application ID and provide the new values. If the operation is successful, it returns the complete updated set of settings for the application.
    ///
    /// Parameters:
    ///   - applicationLogOutputUri: An Amazon S3 URI to a bucket where you would like Amazon GameLift Streams to save application logs. Use the following format for the URI: s3://[bucket name]/[prefix].  Required if you specify one or more LogPaths.  The log bucket must have permissions that give Amazon GameLift Streams access to write the log files. For more information, see Getting Started in the Amazon GameLift Streams Developer Guide.
    ///   - applicationLogPaths: Locations of log files that your content generates during a stream session. Enter path values that are relative to the ApplicationSourceUri location. You can specify up to 10 log locations. Amazon GameLift Streams uploads designated log files to the Amazon S3 bucket that you specify in ApplicationLogOutputUri  at the end of a stream session. To retrieve stored log files, call GetStreamSession  and get the LogFileLocationUri.
    ///   - description: A human-readable label for the application.
    ///   - identifier: An  Amazon Resource Name (ARN) or ID that uniquely identifies the application resource. Format example: ARN-arn:aws:gameliftstreams:us-west-2:123456789012:application/9ZY8X7Wv6 or ID-9ZY8X7Wv6.
    ///   - logger: Logger use during operation
    @inlinable
    public func updateApplication(
        applicationLogOutputUri: String? = nil,
        applicationLogPaths: [String]? = nil,
        description: String? = nil,
        identifier: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> UpdateApplicationOutput {
        let input = UpdateApplicationInput(
            applicationLogOutputUri: applicationLogOutputUri, 
            applicationLogPaths: applicationLogPaths, 
            description: description, 
            identifier: identifier
        )
        return try await self.updateApplication(input, logger: logger)
    }

    ///  Updates the configuration settings for an Amazon GameLift Streams stream group resource. You can change the description, the set of locations, and the requested capacity of a stream group per location. If you want to change the stream class, create a new stream group.   Stream capacity represents the number of concurrent streams that can be active at a time. You set stream capacity per location, per stream group. There are two types of capacity: always-on and on-demand:
    ///     Always-on:  The streaming capacity that is allocated and ready to handle stream requests without delay. You pay for this capacity whether it's in use or not. Best for quickest time from streaming request to streaming session.
    ///      On-demand:  The streaming capacity that Amazon GameLift Streams can allocate in response to stream requests, and then de-allocate when the session has terminated. This offers a cost control measure at the expense of a greater startup time (typically under 5 minutes).
    ///     To update a stream group, specify the stream group's Amazon Resource Name (ARN) and provide the new values. If the request is successful, Amazon GameLift Streams returns the complete updated metadata for the stream group.
    @Sendable
    @inlinable
    public func updateStreamGroup(_ input: UpdateStreamGroupInput, logger: Logger = AWSClient.loggingDisabled) async throws -> UpdateStreamGroupOutput {
        try await self.client.execute(
            operation: "UpdateStreamGroup", 
            path: "/streamgroups/{Identifier}", 
            httpMethod: .PATCH, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    ///  Updates the configuration settings for an Amazon GameLift Streams stream group resource. You can change the description, the set of locations, and the requested capacity of a stream group per location. If you want to change the stream class, create a new stream group.   Stream capacity represents the number of concurrent streams that can be active at a time. You set stream capacity per location, per stream group. There are two types of capacity: always-on and on-demand:
    ///     Always-on:  The streaming capacity that is allocated and ready to handle stream requests without delay. You pay for this capacity whether it's in use or not. Best for quickest time from streaming request to streaming session.
    ///      On-demand:  The streaming capacity that Amazon GameLift Streams can allocate in response to stream requests, and then de-allocate when the session has terminated. This offers a cost control measure at the expense of a greater startup time (typically under 5 minutes).
    ///     To update a stream group, specify the stream group's Amazon Resource Name (ARN) and provide the new values. If the request is successful, Amazon GameLift Streams returns the complete updated metadata for the stream group.
    ///
    /// Parameters:
    ///   - description: A descriptive label for the stream group.
    ///   - identifier: An  Amazon Resource Name (ARN) or ID that uniquely identifies the stream group resource. Format example: ARN-arn:aws:gameliftstreams:us-west-2:123456789012:streamgroup/1AB2C3De4 or ID-1AB2C3De4.
    ///   - locationConfigurations:  A set of one or more locations and the streaming capacity for each location.
    ///   - logger: Logger use during operation
    @inlinable
    public func updateStreamGroup(
        description: String? = nil,
        identifier: String,
        locationConfigurations: [LocationConfiguration]? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> UpdateStreamGroupOutput {
        let input = UpdateStreamGroupInput(
            description: description, 
            identifier: identifier, 
            locationConfigurations: locationConfigurations
        )
        return try await self.updateStreamGroup(input, logger: logger)
    }
}

extension GameLiftStreams {
    /// Initializer required by `AWSService.with(middlewares:timeout:byteBufferAllocator:options)`. You are not able to use this initializer directly as there are not public
    /// initializers for `AWSServiceConfig.Patch`. Please use `AWSService.with(middlewares:timeout:byteBufferAllocator:options)` instead.
    public init(from: GameLiftStreams, patch: AWSServiceConfig.Patch) {
        self.client = from.client
        self.config = from.config.with(patch: patch)
    }
}

// MARK: Paginators

@available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
extension GameLiftStreams {
    /// Return PaginatorSequence for operation ``listApplications(_:logger:)``.
    ///
    /// - Parameters:
    ///   - input: Input for operation
    ///   - logger: Logger used for logging
    @inlinable
    public func listApplicationsPaginator(
        _ input: ListApplicationsInput,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<ListApplicationsInput, ListApplicationsOutput> {
        return .init(
            input: input,
            command: self.listApplications,
            inputKey: \ListApplicationsInput.nextToken,
            outputKey: \ListApplicationsOutput.nextToken,
            logger: logger
        )
    }
    /// Return PaginatorSequence for operation ``listApplications(_:logger:)``.
    ///
    /// - Parameters:
    ///   - maxResults: The number of results to return. Use this parameter with NextToken to return results in sequential pages. Default value is 25.
    ///   - logger: Logger used for logging
    @inlinable
    public func listApplicationsPaginator(
        maxResults: Int? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) -> AWSClient.PaginatorSequence<ListApplicationsInput, ListApplicationsOutput> {
        let input = ListApplicationsInput(
            maxResults: maxResults
        )
        return self.listApplicationsPaginator(input, logger: logger)
    }

    /// Return PaginatorSequence for operation ``listStreamGroups(_:logger:)``.
    ///
    /// - Parameters:
    ///   - input: Input for operation
    ///   - logger: Logger used for logging
    @inlinable
    public func listStreamGroupsPaginator(
        _ input: ListStreamGroupsInput,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<ListStreamGroupsInput, ListStreamGroupsOutput> {
        return .init(
            input: input,
            command: self.listStreamGroups,
            inputKey: \ListStreamGroupsInput.nextToken,
            outputKey: \ListStreamGroupsOutput.nextToken,
            logger: logger
        )
    }
    /// Return PaginatorSequence for operation ``listStreamGroups(_:logger:)``.
    ///
    /// - Parameters:
    ///   - maxResults: The number of results to return. Use this parameter with NextToken to return results in sequential pages. Default value is 25.
    ///   - logger: Logger used for logging
    @inlinable
    public func listStreamGroupsPaginator(
        maxResults: Int? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) -> AWSClient.PaginatorSequence<ListStreamGroupsInput, ListStreamGroupsOutput> {
        let input = ListStreamGroupsInput(
            maxResults: maxResults
        )
        return self.listStreamGroupsPaginator(input, logger: logger)
    }

    /// Return PaginatorSequence for operation ``listStreamSessions(_:logger:)``.
    ///
    /// - Parameters:
    ///   - input: Input for operation
    ///   - logger: Logger used for logging
    @inlinable
    public func listStreamSessionsPaginator(
        _ input: ListStreamSessionsInput,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<ListStreamSessionsInput, ListStreamSessionsOutput> {
        return .init(
            input: input,
            command: self.listStreamSessions,
            inputKey: \ListStreamSessionsInput.nextToken,
            outputKey: \ListStreamSessionsOutput.nextToken,
            logger: logger
        )
    }
    /// Return PaginatorSequence for operation ``listStreamSessions(_:logger:)``.
    ///
    /// - Parameters:
    ///   - exportFilesStatus: Filter by the exported files status. You can specify one status in each request to retrieve only sessions that currently have that exported files status.
    ///   - identifier: The unique identifier of a Amazon GameLift Streams stream group to retrieve the stream session for. You can use either the stream group ID or the Amazon Resource Name (ARN).
    ///   - maxResults: The  number of results to return. Use this parameter with NextToken to return results in sequential pages. Default value is 25.
    ///   - status: Filter by the stream session status. You can specify one status in each request to retrieve only sessions that are currently in that status.
    ///   - logger: Logger used for logging
    @inlinable
    public func listStreamSessionsPaginator(
        exportFilesStatus: ExportFilesStatus? = nil,
        identifier: String,
        maxResults: Int? = nil,
        status: StreamSessionStatus? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) -> AWSClient.PaginatorSequence<ListStreamSessionsInput, ListStreamSessionsOutput> {
        let input = ListStreamSessionsInput(
            exportFilesStatus: exportFilesStatus, 
            identifier: identifier, 
            maxResults: maxResults, 
            status: status
        )
        return self.listStreamSessionsPaginator(input, logger: logger)
    }

    /// Return PaginatorSequence for operation ``listStreamSessionsByAccount(_:logger:)``.
    ///
    /// - Parameters:
    ///   - input: Input for operation
    ///   - logger: Logger used for logging
    @inlinable
    public func listStreamSessionsByAccountPaginator(
        _ input: ListStreamSessionsByAccountInput,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<ListStreamSessionsByAccountInput, ListStreamSessionsByAccountOutput> {
        return .init(
            input: input,
            command: self.listStreamSessionsByAccount,
            inputKey: \ListStreamSessionsByAccountInput.nextToken,
            outputKey: \ListStreamSessionsByAccountOutput.nextToken,
            logger: logger
        )
    }
    /// Return PaginatorSequence for operation ``listStreamSessionsByAccount(_:logger:)``.
    ///
    /// - Parameters:
    ///   - exportFilesStatus: Filter by the exported files status. You can specify one status in each request to retrieve only sessions that currently have that exported files status.
    ///   - maxResults: The  number of results to return. Use this parameter with NextToken to return results in sequential pages. Default value is 25.
    ///   - status: Filter by the stream session status. You can specify one status in each request to retrieve only sessions that are currently in that status.
    ///   - logger: Logger used for logging
    @inlinable
    public func listStreamSessionsByAccountPaginator(
        exportFilesStatus: ExportFilesStatus? = nil,
        maxResults: Int? = nil,
        status: StreamSessionStatus? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) -> AWSClient.PaginatorSequence<ListStreamSessionsByAccountInput, ListStreamSessionsByAccountOutput> {
        let input = ListStreamSessionsByAccountInput(
            exportFilesStatus: exportFilesStatus, 
            maxResults: maxResults, 
            status: status
        )
        return self.listStreamSessionsByAccountPaginator(input, logger: logger)
    }
}

extension GameLiftStreams.ListApplicationsInput: AWSPaginateToken {
    @inlinable
    public func usingPaginationToken(_ token: String) -> GameLiftStreams.ListApplicationsInput {
        return .init(
            maxResults: self.maxResults,
            nextToken: token
        )
    }
}

extension GameLiftStreams.ListStreamGroupsInput: AWSPaginateToken {
    @inlinable
    public func usingPaginationToken(_ token: String) -> GameLiftStreams.ListStreamGroupsInput {
        return .init(
            maxResults: self.maxResults,
            nextToken: token
        )
    }
}

extension GameLiftStreams.ListStreamSessionsByAccountInput: AWSPaginateToken {
    @inlinable
    public func usingPaginationToken(_ token: String) -> GameLiftStreams.ListStreamSessionsByAccountInput {
        return .init(
            exportFilesStatus: self.exportFilesStatus,
            maxResults: self.maxResults,
            nextToken: token,
            status: self.status
        )
    }
}

extension GameLiftStreams.ListStreamSessionsInput: AWSPaginateToken {
    @inlinable
    public func usingPaginationToken(_ token: String) -> GameLiftStreams.ListStreamSessionsInput {
        return .init(
            exportFilesStatus: self.exportFilesStatus,
            identifier: self.identifier,
            maxResults: self.maxResults,
            nextToken: token,
            status: self.status
        )
    }
}

// MARK: Waiters

@available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
extension GameLiftStreams {
    /// Waiter for operation ``getApplication(_:logger:)``.
    ///
    /// - Parameters:
    ///   - input: Input for operation
    ///   - logger: Logger used for logging
    @inlinable
    public func waitUntilApplicationDeleted(
        _ input: GetApplicationInput,
        maxWaitTime: TimeAmount? = nil,
        logger: Logger = AWSClient.loggingDisabled
    ) async throws {
        let waiter = AWSClient.Waiter<GetApplicationInput, _>(
            acceptors: [
                .init(state: .success, matcher: AWSErrorCodeMatcher("ResourceNotFoundException")),
            ],
            command: self.getApplication
        )
        return try await self.client.waitUntil(input, waiter: waiter, maxWaitTime: maxWaitTime, logger: logger)
    }
    /// Waiter for operation ``getApplication(_:logger:)``.
    ///
    /// - Parameters:
    ///   - identifier: An  Amazon Resource Name (ARN) or ID that uniquely identifies the application resource. Format example: ARN-arn:aws:gameliftstreams:us-west-2:123456789012:application/9ZY8X7Wv6 or ID-9ZY8X7Wv6.
    ///   - logger: Logger used for logging
    @inlinable
    public func waitUntilApplicationDeleted(
        identifier: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws {
        let input = GetApplicationInput(
            identifier: identifier
        )
        try await self.waitUntilApplicationDeleted(input, logger: logger)
    }

    /// Waiter for operation ``getApplication(_:logger:)``.
    ///
    /// - Parameters:
    ///   - input: Input for operation
    ///   - logger: Logger used for logging
    @inlinable
    public func waitUntilApplicationReady(
        _ input: GetApplicationInput,
        maxWaitTime: TimeAmount? = nil,
        logger: Logger = AWSClient.loggingDisabled
    ) async throws {
        let waiter = AWSClient.Waiter<GetApplicationInput, _>(
            acceptors: [
                .init(state: .success, matcher: try! JMESPathMatcher("status", expected: "READY")),
                .init(state: .failure, matcher: try! JMESPathMatcher("status", expected: "ERROR")),
            ],
            command: self.getApplication
        )
        return try await self.client.waitUntil(input, waiter: waiter, maxWaitTime: maxWaitTime, logger: logger)
    }
    /// Waiter for operation ``getApplication(_:logger:)``.
    ///
    /// - Parameters:
    ///   - identifier: An  Amazon Resource Name (ARN) or ID that uniquely identifies the application resource. Format example: ARN-arn:aws:gameliftstreams:us-west-2:123456789012:application/9ZY8X7Wv6 or ID-9ZY8X7Wv6.
    ///   - logger: Logger used for logging
    @inlinable
    public func waitUntilApplicationReady(
        identifier: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws {
        let input = GetApplicationInput(
            identifier: identifier
        )
        try await self.waitUntilApplicationReady(input, logger: logger)
    }

    /// Waiter for operation ``getStreamGroup(_:logger:)``.
    ///
    /// - Parameters:
    ///   - input: Input for operation
    ///   - logger: Logger used for logging
    @inlinable
    public func waitUntilStreamGroupActive(
        _ input: GetStreamGroupInput,
        maxWaitTime: TimeAmount? = nil,
        logger: Logger = AWSClient.loggingDisabled
    ) async throws {
        let waiter = AWSClient.Waiter<GetStreamGroupInput, _>(
            acceptors: [
                .init(state: .success, matcher: try! JMESPathMatcher("status", expected: "ACTIVE")),
                .init(state: .failure, matcher: try! JMESPathMatcher("status", expected: "ERROR")),
                .init(state: .failure, matcher: try! JMESPathMatcher("status", expected: "ACTIVE_WITH_ERRORS")),
                .init(state: .failure, matcher: try! JMESPathMatcher("status", expected: "DELETING")),
            ],
            minDelayTime: .seconds(30),
            maxDelayTime: .seconds(3600),
            command: self.getStreamGroup
        )
        return try await self.client.waitUntil(input, waiter: waiter, maxWaitTime: maxWaitTime, logger: logger)
    }
    /// Waiter for operation ``getStreamGroup(_:logger:)``.
    ///
    /// - Parameters:
    ///   - identifier: The unique ID value of the stream group resource to retrieve. Format example: 1AB2C3De4.
    ///   - logger: Logger used for logging
    @inlinable
    public func waitUntilStreamGroupActive(
        identifier: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws {
        let input = GetStreamGroupInput(
            identifier: identifier
        )
        try await self.waitUntilStreamGroupActive(input, logger: logger)
    }

    /// Waiter for operation ``getStreamGroup(_:logger:)``.
    ///
    /// - Parameters:
    ///   - input: Input for operation
    ///   - logger: Logger used for logging
    @inlinable
    public func waitUntilStreamGroupDeleted(
        _ input: GetStreamGroupInput,
        maxWaitTime: TimeAmount? = nil,
        logger: Logger = AWSClient.loggingDisabled
    ) async throws {
        let waiter = AWSClient.Waiter<GetStreamGroupInput, _>(
            acceptors: [
                .init(state: .success, matcher: AWSErrorCodeMatcher("ResourceNotFoundException")),
            ],
            minDelayTime: .seconds(30),
            maxDelayTime: .seconds(1800),
            command: self.getStreamGroup
        )
        return try await self.client.waitUntil(input, waiter: waiter, maxWaitTime: maxWaitTime, logger: logger)
    }
    /// Waiter for operation ``getStreamGroup(_:logger:)``.
    ///
    /// - Parameters:
    ///   - identifier: The unique ID value of the stream group resource to retrieve. Format example: 1AB2C3De4.
    ///   - logger: Logger used for logging
    @inlinable
    public func waitUntilStreamGroupDeleted(
        identifier: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws {
        let input = GetStreamGroupInput(
            identifier: identifier
        )
        try await self.waitUntilStreamGroupDeleted(input, logger: logger)
    }

    /// Waiter for operation ``getStreamSession(_:logger:)``.
    ///
    /// - Parameters:
    ///   - input: Input for operation
    ///   - logger: Logger used for logging
    @inlinable
    public func waitUntilStreamSessionActive(
        _ input: GetStreamSessionInput,
        maxWaitTime: TimeAmount? = nil,
        logger: Logger = AWSClient.loggingDisabled
    ) async throws {
        let waiter = AWSClient.Waiter<GetStreamSessionInput, _>(
            acceptors: [
                .init(state: .success, matcher: try! JMESPathMatcher("status", expected: "ACTIVE")),
                .init(state: .failure, matcher: try! JMESPathMatcher("status", expected: "ERROR")),
            ],
            command: self.getStreamSession
        )
        return try await self.client.waitUntil(input, waiter: waiter, maxWaitTime: maxWaitTime, logger: logger)
    }
    /// Waiter for operation ``getStreamSession(_:logger:)``.
    ///
    /// - Parameters:
    ///   - identifier: The stream group that runs this stream session. This value is an  Amazon Resource Name (ARN) or ID that uniquely identifies the stream group resource. Format example: ARN-arn:aws:gameliftstreams:us-west-2:123456789012:streamgroup/1AB2C3De4 or ID-1AB2C3De4.
    ///   - streamSessionIdentifier: An  Amazon Resource Name (ARN) that uniquely identifies the stream session resource. Format example: 1AB2C3De4.
    ///   - logger: Logger used for logging
    @inlinable
    public func waitUntilStreamSessionActive(
        identifier: String,
        streamSessionIdentifier: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws {
        let input = GetStreamSessionInput(
            identifier: identifier, 
            streamSessionIdentifier: streamSessionIdentifier
        )
        try await self.waitUntilStreamSessionActive(input, logger: logger)
    }
}
