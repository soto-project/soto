//===----------------------------------------------------------------------===//
//
// This source file is part of the Soto for AWS open source project
//
// Copyright (c) 2017-2023 the Soto project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
// See CONTRIBUTORS.txt for the list of Soto project authors
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by https://github.com/soto-project/soto-codegenerator.
// DO NOT EDIT.

@_exported import SotoCore

/// Service object for interacting with AWS Outposts service.
///
/// Amazon Web Services Outposts is a fully managed service that extends Amazon Web Services infrastructure, APIs, and tools to customer premises. By providing local access to Amazon Web Services managed infrastructure, Amazon Web Services Outposts enables customers to build and run applications on premises using the same programming interfaces as in Amazon Web Services Regions, while using local compute and storage resources for lower latency and local data processing needs.
public struct Outposts: AWSService {
    // MARK: Member variables

    /// Client used for communication with AWS
    public let client: AWSClient
    /// Service configuration
    public let config: AWSServiceConfig

    // MARK: Initialization

    /// Initialize the Outposts client
    /// - parameters:
    ///     - client: AWSClient used to process requests
    ///     - region: Region of server you want to communicate with. This will override the partition parameter.
    ///     - partition: AWS partition where service resides, standard (.aws), china (.awscn), government (.awsusgov).
    ///     - endpoint: Custom endpoint URL to use instead of standard AWS servers
    ///     - middleware: Middleware chain used to edit requests before they are sent and responses before they are decoded 
    ///     - timeout: Timeout value for HTTP requests
    ///     - byteBufferAllocator: Allocator for ByteBuffers
    ///     - options: Service options
    public init(
        client: AWSClient,
        region: SotoCore.Region? = nil,
        partition: AWSPartition = .aws,
        endpoint: String? = nil,
        middleware: AWSMiddlewareProtocol? = nil,
        timeout: TimeAmount? = nil,
        byteBufferAllocator: ByteBufferAllocator = ByteBufferAllocator(),
        options: AWSServiceConfig.Options = []
    ) {
        self.client = client
        self.config = AWSServiceConfig(
            region: region,
            partition: region?.partition ?? partition,
            serviceName: "Outposts",
            serviceIdentifier: "outposts",
            serviceProtocol: .restjson,
            apiVersion: "2019-12-03",
            endpoint: endpoint,
            variantEndpoints: Self.variantEndpoints,
            errorType: OutpostsErrorType.self,
            middleware: middleware,
            timeout: timeout,
            byteBufferAllocator: byteBufferAllocator,
            options: options
        )
    }




    /// FIPS and dualstack endpoints
    static var variantEndpoints: [EndpointVariantType: AWSServiceConfig.EndpointVariant] {[
        [.fips]: .init(endpoints: [
            "ca-central-1": "outposts-fips.ca-central-1.amazonaws.com",
            "us-east-1": "outposts-fips.us-east-1.amazonaws.com",
            "us-east-2": "outposts-fips.us-east-2.amazonaws.com",
            "us-gov-east-1": "outposts.us-gov-east-1.amazonaws.com",
            "us-gov-west-1": "outposts.us-gov-west-1.amazonaws.com",
            "us-west-1": "outposts-fips.us-west-1.amazonaws.com",
            "us-west-2": "outposts-fips.us-west-2.amazonaws.com"
        ])
    ]}

    // MARK: API Calls

    /// Cancels the specified order for an Outpost.
    @Sendable
    public func cancelOrder(_ input: CancelOrderInput, logger: Logger = AWSClient.loggingDisabled) async throws -> CancelOrderOutput {
        return try await self.client.execute(
            operation: "CancelOrder", 
            path: "/orders/{OrderId}/cancel", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Creates an order for an Outpost.
    @Sendable
    public func createOrder(_ input: CreateOrderInput, logger: Logger = AWSClient.loggingDisabled) async throws -> CreateOrderOutput {
        return try await self.client.execute(
            operation: "CreateOrder", 
            path: "/orders", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Creates an Outpost. You can specify either an Availability one or an AZ ID.
    @Sendable
    public func createOutpost(_ input: CreateOutpostInput, logger: Logger = AWSClient.loggingDisabled) async throws -> CreateOutpostOutput {
        return try await self.client.execute(
            operation: "CreateOutpost", 
            path: "/outposts", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    ///  Creates a site for an Outpost.
    @Sendable
    public func createSite(_ input: CreateSiteInput, logger: Logger = AWSClient.loggingDisabled) async throws -> CreateSiteOutput {
        return try await self.client.execute(
            operation: "CreateSite", 
            path: "/sites", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Deletes the specified Outpost.
    @Sendable
    public func deleteOutpost(_ input: DeleteOutpostInput, logger: Logger = AWSClient.loggingDisabled) async throws -> DeleteOutpostOutput {
        return try await self.client.execute(
            operation: "DeleteOutpost", 
            path: "/outposts/{OutpostId}", 
            httpMethod: .DELETE, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Deletes the specified site.
    @Sendable
    public func deleteSite(_ input: DeleteSiteInput, logger: Logger = AWSClient.loggingDisabled) async throws -> DeleteSiteOutput {
        return try await self.client.execute(
            operation: "DeleteSite", 
            path: "/sites/{SiteId}", 
            httpMethod: .DELETE, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Gets information about the specified catalog item.
    @Sendable
    public func getCatalogItem(_ input: GetCatalogItemInput, logger: Logger = AWSClient.loggingDisabled) async throws -> GetCatalogItemOutput {
        return try await self.client.execute(
            operation: "GetCatalogItem", 
            path: "/catalog/item/{CatalogItemId}", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    ///   Amazon Web Services uses this action to install Outpost servers.  Gets information about the specified connection.   Use CloudTrail to monitor this action or Amazon Web Services managed policy for Amazon Web Services Outposts to secure it. For  more information, see  Amazon Web Services managed policies for Amazon Web Services Outposts and  Logging Amazon Web Services Outposts API calls with Amazon Web Services CloudTrail in the Amazon Web Services Outposts User Guide.
    @Sendable
    public func getConnection(_ input: GetConnectionRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> GetConnectionResponse {
        return try await self.client.execute(
            operation: "GetConnection", 
            path: "/connections/{ConnectionId}", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Gets information about the specified order.
    @Sendable
    public func getOrder(_ input: GetOrderInput, logger: Logger = AWSClient.loggingDisabled) async throws -> GetOrderOutput {
        return try await self.client.execute(
            operation: "GetOrder", 
            path: "/orders/{OrderId}", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Gets information about the specified Outpost.
    @Sendable
    public func getOutpost(_ input: GetOutpostInput, logger: Logger = AWSClient.loggingDisabled) async throws -> GetOutpostOutput {
        return try await self.client.execute(
            operation: "GetOutpost", 
            path: "/outposts/{OutpostId}", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Gets the instance types for the specified Outpost.
    @Sendable
    public func getOutpostInstanceTypes(_ input: GetOutpostInstanceTypesInput, logger: Logger = AWSClient.loggingDisabled) async throws -> GetOutpostInstanceTypesOutput {
        return try await self.client.execute(
            operation: "GetOutpostInstanceTypes", 
            path: "/outposts/{OutpostId}/instanceTypes", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Gets information about the specified Outpost site.
    @Sendable
    public func getSite(_ input: GetSiteInput, logger: Logger = AWSClient.loggingDisabled) async throws -> GetSiteOutput {
        return try await self.client.execute(
            operation: "GetSite", 
            path: "/sites/{SiteId}", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    ///  Gets the site address of the specified site.
    @Sendable
    public func getSiteAddress(_ input: GetSiteAddressInput, logger: Logger = AWSClient.loggingDisabled) async throws -> GetSiteAddressOutput {
        return try await self.client.execute(
            operation: "GetSiteAddress", 
            path: "/sites/{SiteId}/address", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Lists the hardware assets for the specified Outpost. Use filters to return specific results. If you specify multiple filters, the results include only the resources that match  all of the specified filters. For a filter where you can specify multiple values, the results include  items that match any of the values that you specify for the filter.
    @Sendable
    public func listAssets(_ input: ListAssetsInput, logger: Logger = AWSClient.loggingDisabled) async throws -> ListAssetsOutput {
        return try await self.client.execute(
            operation: "ListAssets", 
            path: "/outposts/{OutpostIdentifier}/assets", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Lists the items in the catalog. Use filters to return specific results. If you specify multiple filters, the results include only the resources that match  all of the specified filters. For a filter where you can specify multiple values, the results include  items that match any of the values that you specify for the filter.
    @Sendable
    public func listCatalogItems(_ input: ListCatalogItemsInput, logger: Logger = AWSClient.loggingDisabled) async throws -> ListCatalogItemsOutput {
        return try await self.client.execute(
            operation: "ListCatalogItems", 
            path: "/catalog/items", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Lists the Outpost orders for your Amazon Web Services account.
    @Sendable
    public func listOrders(_ input: ListOrdersInput, logger: Logger = AWSClient.loggingDisabled) async throws -> ListOrdersOutput {
        return try await self.client.execute(
            operation: "ListOrders", 
            path: "/list-orders", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Lists the Outposts for your Amazon Web Services account. Use filters to return specific results. If you specify multiple filters, the results include only the resources that match  all of the specified filters. For a filter where you can specify multiple values, the results include  items that match any of the values that you specify for the filter.
    @Sendable
    public func listOutposts(_ input: ListOutpostsInput, logger: Logger = AWSClient.loggingDisabled) async throws -> ListOutpostsOutput {
        return try await self.client.execute(
            operation: "ListOutposts", 
            path: "/outposts", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Lists the Outpost sites for your Amazon Web Services account. Use filters to return specific results. Use filters to return specific results. If you specify multiple filters, the results include only the resources that match  all of the specified filters. For a filter where you can specify multiple values, the results include  items that match any of the values that you specify for the filter.
    @Sendable
    public func listSites(_ input: ListSitesInput, logger: Logger = AWSClient.loggingDisabled) async throws -> ListSitesOutput {
        return try await self.client.execute(
            operation: "ListSites", 
            path: "/sites", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Lists the tags for the specified resource.
    @Sendable
    public func listTagsForResource(_ input: ListTagsForResourceRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> ListTagsForResourceResponse {
        return try await self.client.execute(
            operation: "ListTagsForResource", 
            path: "/tags/{ResourceArn}", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    ///   Amazon Web Services uses this action to install Outpost servers.  Starts the connection required for Outpost server installation.   Use CloudTrail to monitor this action or Amazon Web Services managed policy for Amazon Web Services Outposts to secure it. For  more information, see  Amazon Web Services managed policies for Amazon Web Services Outposts and  Logging Amazon Web Services Outposts API calls with Amazon Web Services CloudTrail in the Amazon Web Services Outposts User Guide.
    @Sendable
    public func startConnection(_ input: StartConnectionRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> StartConnectionResponse {
        return try await self.client.execute(
            operation: "StartConnection", 
            path: "/connections", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Adds tags to the specified resource.
    @Sendable
    public func tagResource(_ input: TagResourceRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> TagResourceResponse {
        return try await self.client.execute(
            operation: "TagResource", 
            path: "/tags/{ResourceArn}", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Removes tags from the specified resource.
    @Sendable
    public func untagResource(_ input: UntagResourceRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> UntagResourceResponse {
        return try await self.client.execute(
            operation: "UntagResource", 
            path: "/tags/{ResourceArn}", 
            httpMethod: .DELETE, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    ///  Updates an Outpost.
    @Sendable
    public func updateOutpost(_ input: UpdateOutpostInput, logger: Logger = AWSClient.loggingDisabled) async throws -> UpdateOutpostOutput {
        return try await self.client.execute(
            operation: "UpdateOutpost", 
            path: "/outposts/{OutpostId}", 
            httpMethod: .PATCH, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Updates the specified site.
    @Sendable
    public func updateSite(_ input: UpdateSiteInput, logger: Logger = AWSClient.loggingDisabled) async throws -> UpdateSiteOutput {
        return try await self.client.execute(
            operation: "UpdateSite", 
            path: "/sites/{SiteId}", 
            httpMethod: .PATCH, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Updates the address of the specified site. You can't update a site address if there is an order in progress. You must wait for the order to complete or cancel the order. You can update the operating address before you place an order at the site, or after all Outposts that belong to the site have been deactivated.
    @Sendable
    public func updateSiteAddress(_ input: UpdateSiteAddressInput, logger: Logger = AWSClient.loggingDisabled) async throws -> UpdateSiteAddressOutput {
        return try await self.client.execute(
            operation: "UpdateSiteAddress", 
            path: "/sites/{SiteId}/address", 
            httpMethod: .PUT, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Update the physical and logistical details for a rack at a site. For more information about hardware requirements for racks, see Network  readiness checklist in the Amazon Web Services Outposts User Guide.  To update a rack at a site with an order of IN_PROGRESS, you must wait for the order to complete or cancel the order.
    @Sendable
    public func updateSiteRackPhysicalProperties(_ input: UpdateSiteRackPhysicalPropertiesInput, logger: Logger = AWSClient.loggingDisabled) async throws -> UpdateSiteRackPhysicalPropertiesOutput {
        return try await self.client.execute(
            operation: "UpdateSiteRackPhysicalProperties", 
            path: "/sites/{SiteId}/rackPhysicalProperties", 
            httpMethod: .PATCH, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
}

extension Outposts {
    /// Initializer required by `AWSService.with(middlewares:timeout:byteBufferAllocator:options)`. You are not able to use this initializer directly as there are not public
    /// initializers for `AWSServiceConfig.Patch`. Please use `AWSService.with(middlewares:timeout:byteBufferAllocator:options)` instead.
    public init(from: Outposts, patch: AWSServiceConfig.Patch) {
        self.client = from.client
        self.config = from.config.with(patch: patch)
    }
}

// MARK: Paginators

@available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
extension Outposts {
    /// Gets the instance types for the specified Outpost.
    /// Return PaginatorSequence for operation.
    ///
    /// - Parameters:
    ///   - input: Input for request
    ///   - logger: Logger used flot logging
    public func getOutpostInstanceTypesPaginator(
        _ input: GetOutpostInstanceTypesInput,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<GetOutpostInstanceTypesInput, GetOutpostInstanceTypesOutput> {
        return .init(
            input: input,
            command: self.getOutpostInstanceTypes,
            inputKey: \GetOutpostInstanceTypesInput.nextToken,
            outputKey: \GetOutpostInstanceTypesOutput.nextToken,
            logger: logger
        )
    }

    /// Lists the hardware assets for the specified Outpost. Use filters to return specific results. If you specify multiple filters, the results include only the resources that match  all of the specified filters. For a filter where you can specify multiple values, the results include  items that match any of the values that you specify for the filter.
    /// Return PaginatorSequence for operation.
    ///
    /// - Parameters:
    ///   - input: Input for request
    ///   - logger: Logger used flot logging
    public func listAssetsPaginator(
        _ input: ListAssetsInput,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<ListAssetsInput, ListAssetsOutput> {
        return .init(
            input: input,
            command: self.listAssets,
            inputKey: \ListAssetsInput.nextToken,
            outputKey: \ListAssetsOutput.nextToken,
            logger: logger
        )
    }

    /// Lists the items in the catalog. Use filters to return specific results. If you specify multiple filters, the results include only the resources that match  all of the specified filters. For a filter where you can specify multiple values, the results include  items that match any of the values that you specify for the filter.
    /// Return PaginatorSequence for operation.
    ///
    /// - Parameters:
    ///   - input: Input for request
    ///   - logger: Logger used flot logging
    public func listCatalogItemsPaginator(
        _ input: ListCatalogItemsInput,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<ListCatalogItemsInput, ListCatalogItemsOutput> {
        return .init(
            input: input,
            command: self.listCatalogItems,
            inputKey: \ListCatalogItemsInput.nextToken,
            outputKey: \ListCatalogItemsOutput.nextToken,
            logger: logger
        )
    }

    /// Lists the Outpost orders for your Amazon Web Services account.
    /// Return PaginatorSequence for operation.
    ///
    /// - Parameters:
    ///   - input: Input for request
    ///   - logger: Logger used flot logging
    public func listOrdersPaginator(
        _ input: ListOrdersInput,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<ListOrdersInput, ListOrdersOutput> {
        return .init(
            input: input,
            command: self.listOrders,
            inputKey: \ListOrdersInput.nextToken,
            outputKey: \ListOrdersOutput.nextToken,
            logger: logger
        )
    }

    /// Lists the Outposts for your Amazon Web Services account. Use filters to return specific results. If you specify multiple filters, the results include only the resources that match  all of the specified filters. For a filter where you can specify multiple values, the results include  items that match any of the values that you specify for the filter.
    /// Return PaginatorSequence for operation.
    ///
    /// - Parameters:
    ///   - input: Input for request
    ///   - logger: Logger used flot logging
    public func listOutpostsPaginator(
        _ input: ListOutpostsInput,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<ListOutpostsInput, ListOutpostsOutput> {
        return .init(
            input: input,
            command: self.listOutposts,
            inputKey: \ListOutpostsInput.nextToken,
            outputKey: \ListOutpostsOutput.nextToken,
            logger: logger
        )
    }

    /// Lists the Outpost sites for your Amazon Web Services account. Use filters to return specific results. Use filters to return specific results. If you specify multiple filters, the results include only the resources that match  all of the specified filters. For a filter where you can specify multiple values, the results include  items that match any of the values that you specify for the filter.
    /// Return PaginatorSequence for operation.
    ///
    /// - Parameters:
    ///   - input: Input for request
    ///   - logger: Logger used flot logging
    public func listSitesPaginator(
        _ input: ListSitesInput,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<ListSitesInput, ListSitesOutput> {
        return .init(
            input: input,
            command: self.listSites,
            inputKey: \ListSitesInput.nextToken,
            outputKey: \ListSitesOutput.nextToken,
            logger: logger
        )
    }
}

extension Outposts.GetOutpostInstanceTypesInput: AWSPaginateToken {
    public func usingPaginationToken(_ token: String) -> Outposts.GetOutpostInstanceTypesInput {
        return .init(
            maxResults: self.maxResults,
            nextToken: token,
            outpostId: self.outpostId
        )
    }
}

extension Outposts.ListAssetsInput: AWSPaginateToken {
    public func usingPaginationToken(_ token: String) -> Outposts.ListAssetsInput {
        return .init(
            hostIdFilter: self.hostIdFilter,
            maxResults: self.maxResults,
            nextToken: token,
            outpostIdentifier: self.outpostIdentifier,
            statusFilter: self.statusFilter
        )
    }
}

extension Outposts.ListCatalogItemsInput: AWSPaginateToken {
    public func usingPaginationToken(_ token: String) -> Outposts.ListCatalogItemsInput {
        return .init(
            ec2FamilyFilter: self.ec2FamilyFilter,
            itemClassFilter: self.itemClassFilter,
            maxResults: self.maxResults,
            nextToken: token,
            supportedStorageFilter: self.supportedStorageFilter
        )
    }
}

extension Outposts.ListOrdersInput: AWSPaginateToken {
    public func usingPaginationToken(_ token: String) -> Outposts.ListOrdersInput {
        return .init(
            maxResults: self.maxResults,
            nextToken: token,
            outpostIdentifierFilter: self.outpostIdentifierFilter
        )
    }
}

extension Outposts.ListOutpostsInput: AWSPaginateToken {
    public func usingPaginationToken(_ token: String) -> Outposts.ListOutpostsInput {
        return .init(
            availabilityZoneFilter: self.availabilityZoneFilter,
            availabilityZoneIdFilter: self.availabilityZoneIdFilter,
            lifeCycleStatusFilter: self.lifeCycleStatusFilter,
            maxResults: self.maxResults,
            nextToken: token
        )
    }
}

extension Outposts.ListSitesInput: AWSPaginateToken {
    public func usingPaginationToken(_ token: String) -> Outposts.ListSitesInput {
        return .init(
            maxResults: self.maxResults,
            nextToken: token,
            operatingAddressCityFilter: self.operatingAddressCityFilter,
            operatingAddressCountryCodeFilter: self.operatingAddressCountryCodeFilter,
            operatingAddressStateOrRegionFilter: self.operatingAddressStateOrRegionFilter
        )
    }
}
