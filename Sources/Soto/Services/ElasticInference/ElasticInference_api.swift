//===----------------------------------------------------------------------===//
//
// This source file is part of the Soto for AWS open source project
//
// Copyright (c) 2017-2024 the Soto project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
// See CONTRIBUTORS.txt for the list of Soto project authors
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by https://github.com/soto-project/soto-codegenerator.
// DO NOT EDIT.

#if os(Linux) && compiler(<5.10)
// swift-corelibs-foundation hasn't been updated with Sendable conformances
@preconcurrency import Foundation
#else
import Foundation
#endif
@_exported import SotoCore

/// Service object for interacting with AWS ElasticInference service.
///
///  Amazon Elastic Inference is no longer available.   Elastic Inference public APIs.
public struct ElasticInference: AWSService {
    // MARK: Member variables

    /// Client used for communication with AWS
    public let client: AWSClient
    /// Service configuration
    public let config: AWSServiceConfig

    // MARK: Initialization

    /// Initialize the ElasticInference client
    /// - parameters:
    ///     - client: AWSClient used to process requests
    ///     - region: Region of server you want to communicate with. This will override the partition parameter.
    ///     - partition: AWS partition where service resides, standard (.aws), china (.awscn), government (.awsusgov).
    ///     - endpoint: Custom endpoint URL to use instead of standard AWS servers
    ///     - middleware: Middleware chain used to edit requests before they are sent and responses before they are decoded 
    ///     - timeout: Timeout value for HTTP requests
    ///     - byteBufferAllocator: Allocator for ByteBuffers
    ///     - options: Service options
    public init(
        client: AWSClient,
        region: SotoCore.Region? = nil,
        partition: AWSPartition = .aws,
        endpoint: String? = nil,
        middleware: AWSMiddlewareProtocol? = nil,
        timeout: TimeAmount? = nil,
        byteBufferAllocator: ByteBufferAllocator = ByteBufferAllocator(),
        options: AWSServiceConfig.Options = []
    ) {
        self.client = client
        self.config = AWSServiceConfig(
            region: region,
            partition: region?.partition ?? partition,
            serviceName: "ElasticInference",
            serviceIdentifier: "api.elastic-inference",
            signingName: "elastic-inference",
            serviceProtocol: .restjson,
            apiVersion: "2017-07-25",
            endpoint: endpoint,
            serviceEndpoints: Self.serviceEndpoints,
            errorType: ElasticInferenceErrorType.self,
            middleware: middleware,
            timeout: timeout,
            byteBufferAllocator: byteBufferAllocator,
            options: options
        )
    }


    /// custom endpoints for regions
    static var serviceEndpoints: [String: String] {[
        "ap-northeast-1": "api.elastic-inference.ap-northeast-1.amazonaws.com",
        "ap-northeast-2": "api.elastic-inference.ap-northeast-2.amazonaws.com",
        "eu-west-1": "api.elastic-inference.eu-west-1.amazonaws.com",
        "us-east-1": "api.elastic-inference.us-east-1.amazonaws.com",
        "us-east-2": "api.elastic-inference.us-east-2.amazonaws.com",
        "us-west-2": "api.elastic-inference.us-west-2.amazonaws.com"
    ]}



    // MARK: API Calls

    ///  Amazon Elastic Inference is no longer available.   Describes the locations in which a given accelerator type or set of types is present in a given region.
    @Sendable
    @inlinable
    public func describeAcceleratorOfferings(_ input: DescribeAcceleratorOfferingsRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DescribeAcceleratorOfferingsResponse {
        try await self.client.execute(
            operation: "DescribeAcceleratorOfferings", 
            path: "/describe-accelerator-offerings", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    ///  Amazon Elastic Inference is no longer available.   Describes the locations in which a given accelerator type or set of types is present in a given region.
    ///
    /// Parameters:
    ///   - acceleratorTypes:  The list of accelerator types to describe.
    ///   - locationType:  The location type that you want to describe accelerator type offerings for. It can assume the following values: region: will return the accelerator type offering at the regional level. availability-zone: will return the accelerator type offering at the availability zone level. availability-zone-id: will return the accelerator type offering at the availability zone level returning the availability zone id.
    ///   - logger: Logger use during operation
    @inlinable
    public func describeAcceleratorOfferings(
        acceleratorTypes: [String]? = nil,
        locationType: LocationType,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> DescribeAcceleratorOfferingsResponse {
        let input = DescribeAcceleratorOfferingsRequest(
            acceleratorTypes: acceleratorTypes, 
            locationType: locationType
        )
        return try await self.describeAcceleratorOfferings(input, logger: logger)
    }

    ///  Amazon Elastic Inference is no longer available.   Describes the accelerator types available in a given region, as well as their characteristics, such as memory and throughput.
    @Sendable
    @inlinable
    public func describeAcceleratorTypes(_ input: DescribeAcceleratorTypesRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DescribeAcceleratorTypesResponse {
        try await self.client.execute(
            operation: "DescribeAcceleratorTypes", 
            path: "/describe-accelerator-types", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    ///  Amazon Elastic Inference is no longer available.   Describes the accelerator types available in a given region, as well as their characteristics, such as memory and throughput.
    ///
    /// Parameters:
    ///   - logger: Logger use during operation
    @inlinable
    public func describeAcceleratorTypes(
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> DescribeAcceleratorTypesResponse {
        let input = DescribeAcceleratorTypesRequest(
        )
        return try await self.describeAcceleratorTypes(input, logger: logger)
    }

    ///  Amazon Elastic Inference is no longer available.   Describes information over a provided set of accelerators belonging to an account.
    @Sendable
    @inlinable
    public func describeAccelerators(_ input: DescribeAcceleratorsRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DescribeAcceleratorsResponse {
        try await self.client.execute(
            operation: "DescribeAccelerators", 
            path: "/describe-accelerators", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    ///  Amazon Elastic Inference is no longer available.   Describes information over a provided set of accelerators belonging to an account.
    ///
    /// Parameters:
    ///   - acceleratorIds:  The IDs of the accelerators to describe.
    ///   - filters:  One or more filters. Filter names and values are case-sensitive. Valid filter names are: accelerator-types: can provide a list of accelerator type names to filter for. instance-id: can provide a list of EC2 instance ids to filter for.
    ///   - maxResults:  The total number of items to return in the command's output. If the total number of items available is more than the value specified, a NextToken is provided in the command's output. To resume pagination, provide the NextToken value in the starting-token argument of a subsequent command. Do not use the NextToken response element directly outside of the AWS CLI.
    ///   - nextToken:  A token to specify where to start paginating. This is the NextToken from a previously truncated response.
    ///   - logger: Logger use during operation
    @inlinable
    public func describeAccelerators(
        acceleratorIds: [String]? = nil,
        filters: [Filter]? = nil,
        maxResults: Int? = nil,
        nextToken: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> DescribeAcceleratorsResponse {
        let input = DescribeAcceleratorsRequest(
            acceleratorIds: acceleratorIds, 
            filters: filters, 
            maxResults: maxResults, 
            nextToken: nextToken
        )
        return try await self.describeAccelerators(input, logger: logger)
    }

    ///  Amazon Elastic Inference is no longer available.   Returns all tags of an Elastic Inference Accelerator.
    @Sendable
    @inlinable
    public func listTagsForResource(_ input: ListTagsForResourceRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> ListTagsForResourceResult {
        try await self.client.execute(
            operation: "ListTagsForResource", 
            path: "/tags/{resourceArn}", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    ///  Amazon Elastic Inference is no longer available.   Returns all tags of an Elastic Inference Accelerator.
    ///
    /// Parameters:
    ///   - resourceArn:  The ARN of the Elastic Inference Accelerator to list the tags for.
    ///   - logger: Logger use during operation
    @inlinable
    public func listTagsForResource(
        resourceArn: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> ListTagsForResourceResult {
        let input = ListTagsForResourceRequest(
            resourceArn: resourceArn
        )
        return try await self.listTagsForResource(input, logger: logger)
    }

    ///  Amazon Elastic Inference is no longer available.   Adds the specified tags to an Elastic Inference Accelerator.
    @Sendable
    @inlinable
    public func tagResource(_ input: TagResourceRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> TagResourceResult {
        try await self.client.execute(
            operation: "TagResource", 
            path: "/tags/{resourceArn}", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    ///  Amazon Elastic Inference is no longer available.   Adds the specified tags to an Elastic Inference Accelerator.
    ///
    /// Parameters:
    ///   - resourceArn:  The ARN of the Elastic Inference Accelerator to tag.
    ///   - tags:  The tags to add to the Elastic Inference Accelerator.
    ///   - logger: Logger use during operation
    @inlinable
    public func tagResource(
        resourceArn: String,
        tags: [String: String],
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> TagResourceResult {
        let input = TagResourceRequest(
            resourceArn: resourceArn, 
            tags: tags
        )
        return try await self.tagResource(input, logger: logger)
    }

    ///  Amazon Elastic Inference is no longer available.   Removes the specified tags from an Elastic Inference Accelerator.
    @Sendable
    @inlinable
    public func untagResource(_ input: UntagResourceRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> UntagResourceResult {
        try await self.client.execute(
            operation: "UntagResource", 
            path: "/tags/{resourceArn}", 
            httpMethod: .DELETE, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    ///  Amazon Elastic Inference is no longer available.   Removes the specified tags from an Elastic Inference Accelerator.
    ///
    /// Parameters:
    ///   - resourceArn:  The ARN of the Elastic Inference Accelerator to untag.
    ///   - tagKeys:  The list of tags to remove from the Elastic Inference Accelerator.
    ///   - logger: Logger use during operation
    @inlinable
    public func untagResource(
        resourceArn: String,
        tagKeys: [String],
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> UntagResourceResult {
        let input = UntagResourceRequest(
            resourceArn: resourceArn, 
            tagKeys: tagKeys
        )
        return try await self.untagResource(input, logger: logger)
    }
}

extension ElasticInference {
    /// Initializer required by `AWSService.with(middlewares:timeout:byteBufferAllocator:options)`. You are not able to use this initializer directly as there are not public
    /// initializers for `AWSServiceConfig.Patch`. Please use `AWSService.with(middlewares:timeout:byteBufferAllocator:options)` instead.
    public init(from: ElasticInference, patch: AWSServiceConfig.Patch) {
        self.client = from.client
        self.config = from.config.with(patch: patch)
    }
}

// MARK: Paginators

@available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
extension ElasticInference {
    /// Return PaginatorSequence for operation ``describeAccelerators(_:logger:)``.
    ///
    /// - Parameters:
    ///   - input: Input for operation
    ///   - logger: Logger used for logging
    @inlinable
    public func describeAcceleratorsPaginator(
        _ input: DescribeAcceleratorsRequest,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<DescribeAcceleratorsRequest, DescribeAcceleratorsResponse> {
        return .init(
            input: input,
            command: self.describeAccelerators,
            inputKey: \DescribeAcceleratorsRequest.nextToken,
            outputKey: \DescribeAcceleratorsResponse.nextToken,
            logger: logger
        )
    }
    /// Return PaginatorSequence for operation ``describeAccelerators(_:logger:)``.
    ///
    /// - Parameters:
    ///   - acceleratorIds:  The IDs of the accelerators to describe.
    ///   - filters:  One or more filters. Filter names and values are case-sensitive. Valid filter names are: accelerator-types: can provide a list of accelerator type names to filter for. instance-id: can provide a list of EC2 instance ids to filter for.
    ///   - maxResults:  The total number of items to return in the command's output. If the total number of items available is more than the value specified, a NextToken is provided in the command's output. To resume pagination, provide the NextToken value in the starting-token argument of a subsequent command. Do not use the NextToken response element directly outside of the AWS CLI.
    ///   - logger: Logger used for logging
    @inlinable
    public func describeAcceleratorsPaginator(
        acceleratorIds: [String]? = nil,
        filters: [Filter]? = nil,
        maxResults: Int? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) -> AWSClient.PaginatorSequence<DescribeAcceleratorsRequest, DescribeAcceleratorsResponse> {
        let input = DescribeAcceleratorsRequest(
            acceleratorIds: acceleratorIds, 
            filters: filters, 
            maxResults: maxResults
        )
        return self.describeAcceleratorsPaginator(input, logger: logger)
    }
}

extension ElasticInference.DescribeAcceleratorsRequest: AWSPaginateToken {
    @inlinable
    public func usingPaginationToken(_ token: String) -> ElasticInference.DescribeAcceleratorsRequest {
        return .init(
            acceleratorIds: self.acceleratorIds,
            filters: self.filters,
            maxResults: self.maxResults,
            nextToken: token
        )
    }
}
