//===----------------------------------------------------------------------===//
//
// This source file is part of the Soto for AWS open source project
//
// Copyright (c) 2017-2023 the Soto project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
// See CONTRIBUTORS.txt for the list of Soto project authors
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by https://github.com/soto-project/soto-codegenerator.
// DO NOT EDIT.

#if os(Linux) && compiler(<5.10)
// swift-corelibs-foundation hasn't been updated with Sendable conformances
@preconcurrency import Foundation
#else
import Foundation
#endif
@_spi(SotoInternal) import SotoCore

extension KMS {
    // MARK: Enums

    public enum AlgorithmSpec: String, CustomStringConvertible, Codable, Sendable, CodingKeyRepresentable {
        case rsaAesKeyWrapSha1 = "RSA_AES_KEY_WRAP_SHA_1"
        case rsaAesKeyWrapSha256 = "RSA_AES_KEY_WRAP_SHA_256"
        case rsaesOaepSha1 = "RSAES_OAEP_SHA_1"
        case rsaesOaepSha256 = "RSAES_OAEP_SHA_256"
        case rsaesPkcs1V15 = "RSAES_PKCS1_V1_5"
        public var description: String { return self.rawValue }
    }

    public enum ConnectionErrorCodeType: String, CustomStringConvertible, Codable, Sendable, CodingKeyRepresentable {
        case clusterNotFound = "CLUSTER_NOT_FOUND"
        case insufficientCloudhsmHsms = "INSUFFICIENT_CLOUDHSM_HSMS"
        case insufficientFreeAddressesInSubnet = "INSUFFICIENT_FREE_ADDRESSES_IN_SUBNET"
        case internalError = "INTERNAL_ERROR"
        case invalidCredentials = "INVALID_CREDENTIALS"
        case networkErrors = "NETWORK_ERRORS"
        case subnetNotFound = "SUBNET_NOT_FOUND"
        case userLockedOut = "USER_LOCKED_OUT"
        case userLoggedIn = "USER_LOGGED_IN"
        case userNotFound = "USER_NOT_FOUND"
        case xksProxyAccessDenied = "XKS_PROXY_ACCESS_DENIED"
        case xksProxyInvalidConfiguration = "XKS_PROXY_INVALID_CONFIGURATION"
        case xksProxyInvalidResponse = "XKS_PROXY_INVALID_RESPONSE"
        case xksProxyInvalidTlsConfiguration = "XKS_PROXY_INVALID_TLS_CONFIGURATION"
        case xksProxyNotReachable = "XKS_PROXY_NOT_REACHABLE"
        case xksProxyTimedOut = "XKS_PROXY_TIMED_OUT"
        case xksVpcEndpointServiceInvalidConfiguration = "XKS_VPC_ENDPOINT_SERVICE_INVALID_CONFIGURATION"
        case xksVpcEndpointServiceNotFound = "XKS_VPC_ENDPOINT_SERVICE_NOT_FOUND"
        public var description: String { return self.rawValue }
    }

    public enum ConnectionStateType: String, CustomStringConvertible, Codable, Sendable, CodingKeyRepresentable {
        case connected = "CONNECTED"
        case connecting = "CONNECTING"
        case disconnected = "DISCONNECTED"
        case disconnecting = "DISCONNECTING"
        case failed = "FAILED"
        public var description: String { return self.rawValue }
    }

    public enum CustomKeyStoreType: String, CustomStringConvertible, Codable, Sendable, CodingKeyRepresentable {
        case awsCloudhsm = "AWS_CLOUDHSM"
        case externalKeyStore = "EXTERNAL_KEY_STORE"
        public var description: String { return self.rawValue }
    }

    public enum CustomerMasterKeySpec: String, CustomStringConvertible, Codable, Sendable, CodingKeyRepresentable {
        case eccNistP256 = "ECC_NIST_P256"
        case eccNistP384 = "ECC_NIST_P384"
        case eccNistP521 = "ECC_NIST_P521"
        case eccSecgP256K1 = "ECC_SECG_P256K1"
        case hmac224 = "HMAC_224"
        case hmac256 = "HMAC_256"
        case hmac384 = "HMAC_384"
        case hmac512 = "HMAC_512"
        case rsa2048 = "RSA_2048"
        case rsa3072 = "RSA_3072"
        case rsa4096 = "RSA_4096"
        case sm2 = "SM2"
        case symmetricDefault = "SYMMETRIC_DEFAULT"
        public var description: String { return self.rawValue }
    }

    public enum DataKeyPairSpec: String, CustomStringConvertible, Codable, Sendable, CodingKeyRepresentable {
        case eccNistP256 = "ECC_NIST_P256"
        case eccNistP384 = "ECC_NIST_P384"
        case eccNistP521 = "ECC_NIST_P521"
        case eccSecgP256K1 = "ECC_SECG_P256K1"
        case rsa2048 = "RSA_2048"
        case rsa3072 = "RSA_3072"
        case rsa4096 = "RSA_4096"
        case sm2 = "SM2"
        public var description: String { return self.rawValue }
    }

    public enum DataKeySpec: String, CustomStringConvertible, Codable, Sendable, CodingKeyRepresentable {
        case aes128 = "AES_128"
        case aes256 = "AES_256"
        public var description: String { return self.rawValue }
    }

    public enum EncryptionAlgorithmSpec: String, CustomStringConvertible, Codable, Sendable, CodingKeyRepresentable {
        case rsaesOaepSha1 = "RSAES_OAEP_SHA_1"
        case rsaesOaepSha256 = "RSAES_OAEP_SHA_256"
        case sm2pke = "SM2PKE"
        case symmetricDefault = "SYMMETRIC_DEFAULT"
        public var description: String { return self.rawValue }
    }

    public enum ExpirationModelType: String, CustomStringConvertible, Codable, Sendable, CodingKeyRepresentable {
        case keyMaterialDoesNotExpire = "KEY_MATERIAL_DOES_NOT_EXPIRE"
        case keyMaterialExpires = "KEY_MATERIAL_EXPIRES"
        public var description: String { return self.rawValue }
    }

    public enum GrantOperation: String, CustomStringConvertible, Codable, Sendable, CodingKeyRepresentable {
        case createGrant = "CreateGrant"
        case decrypt = "Decrypt"
        case describeKey = "DescribeKey"
        case encrypt = "Encrypt"
        case generateDataKey = "GenerateDataKey"
        case generateDataKeyPair = "GenerateDataKeyPair"
        case generateDataKeyPairWithoutPlaintext = "GenerateDataKeyPairWithoutPlaintext"
        case generateDataKeyWithoutPlaintext = "GenerateDataKeyWithoutPlaintext"
        case generateMac = "GenerateMac"
        case getPublicKey = "GetPublicKey"
        case reEncryptFrom = "ReEncryptFrom"
        case reEncryptTo = "ReEncryptTo"
        case retireGrant = "RetireGrant"
        case sign = "Sign"
        case verify = "Verify"
        case verifyMac = "VerifyMac"
        public var description: String { return self.rawValue }
    }

    public enum KeyEncryptionMechanism: String, CustomStringConvertible, Codable, Sendable, CodingKeyRepresentable {
        case rsaesOaepSha256 = "RSAES_OAEP_SHA_256"
        public var description: String { return self.rawValue }
    }

    public enum KeyManagerType: String, CustomStringConvertible, Codable, Sendable, CodingKeyRepresentable {
        case aws = "AWS"
        case customer = "CUSTOMER"
        public var description: String { return self.rawValue }
    }

    public enum KeySpec: String, CustomStringConvertible, Codable, Sendable, CodingKeyRepresentable {
        case eccNistP256 = "ECC_NIST_P256"
        case eccNistP384 = "ECC_NIST_P384"
        case eccNistP521 = "ECC_NIST_P521"
        case eccSecgP256K1 = "ECC_SECG_P256K1"
        case hmac224 = "HMAC_224"
        case hmac256 = "HMAC_256"
        case hmac384 = "HMAC_384"
        case hmac512 = "HMAC_512"
        case rsa2048 = "RSA_2048"
        case rsa3072 = "RSA_3072"
        case rsa4096 = "RSA_4096"
        case sm2 = "SM2"
        case symmetricDefault = "SYMMETRIC_DEFAULT"
        public var description: String { return self.rawValue }
    }

    public enum KeyState: String, CustomStringConvertible, Codable, Sendable, CodingKeyRepresentable {
        case creating = "Creating"
        case disabled = "Disabled"
        case enabled = "Enabled"
        case pendingDeletion = "PendingDeletion"
        case pendingImport = "PendingImport"
        case pendingReplicaDeletion = "PendingReplicaDeletion"
        case unavailable = "Unavailable"
        case updating = "Updating"
        public var description: String { return self.rawValue }
    }

    public enum KeyUsageType: String, CustomStringConvertible, Codable, Sendable, CodingKeyRepresentable {
        case encryptDecrypt = "ENCRYPT_DECRYPT"
        case generateVerifyMac = "GENERATE_VERIFY_MAC"
        case signVerify = "SIGN_VERIFY"
        public var description: String { return self.rawValue }
    }

    public enum MacAlgorithmSpec: String, CustomStringConvertible, Codable, Sendable, CodingKeyRepresentable {
        case hmacSha224 = "HMAC_SHA_224"
        case hmacSha256 = "HMAC_SHA_256"
        case hmacSha384 = "HMAC_SHA_384"
        case hmacSha512 = "HMAC_SHA_512"
        public var description: String { return self.rawValue }
    }

    public enum MessageType: String, CustomStringConvertible, Codable, Sendable, CodingKeyRepresentable {
        case digest = "DIGEST"
        case raw = "RAW"
        public var description: String { return self.rawValue }
    }

    public enum MultiRegionKeyType: String, CustomStringConvertible, Codable, Sendable, CodingKeyRepresentable {
        case primary = "PRIMARY"
        case replica = "REPLICA"
        public var description: String { return self.rawValue }
    }

    public enum OriginType: String, CustomStringConvertible, Codable, Sendable, CodingKeyRepresentable {
        case awsCloudhsm = "AWS_CLOUDHSM"
        case awsKms = "AWS_KMS"
        case external = "EXTERNAL"
        case externalKeyStore = "EXTERNAL_KEY_STORE"
        public var description: String { return self.rawValue }
    }

    public enum SigningAlgorithmSpec: String, CustomStringConvertible, Codable, Sendable, CodingKeyRepresentable {
        case ecdsaSha256 = "ECDSA_SHA_256"
        case ecdsaSha384 = "ECDSA_SHA_384"
        case ecdsaSha512 = "ECDSA_SHA_512"
        case rsassaPkcs1V15Sha256 = "RSASSA_PKCS1_V1_5_SHA_256"
        case rsassaPkcs1V15Sha384 = "RSASSA_PKCS1_V1_5_SHA_384"
        case rsassaPkcs1V15Sha512 = "RSASSA_PKCS1_V1_5_SHA_512"
        case rsassaPssSha256 = "RSASSA_PSS_SHA_256"
        case rsassaPssSha384 = "RSASSA_PSS_SHA_384"
        case rsassaPssSha512 = "RSASSA_PSS_SHA_512"
        case sm2dsa = "SM2DSA"
        public var description: String { return self.rawValue }
    }

    public enum WrappingKeySpec: String, CustomStringConvertible, Codable, Sendable, CodingKeyRepresentable {
        case rsa2048 = "RSA_2048"
        case rsa3072 = "RSA_3072"
        case rsa4096 = "RSA_4096"
        public var description: String { return self.rawValue }
    }

    public enum XksProxyConnectivityType: String, CustomStringConvertible, Codable, Sendable, CodingKeyRepresentable {
        case publicEndpoint = "PUBLIC_ENDPOINT"
        case vpcEndpointService = "VPC_ENDPOINT_SERVICE"
        public var description: String { return self.rawValue }
    }

    // MARK: Shapes

    public struct AliasListEntry: AWSDecodableShape {
        /// String that contains the key ARN.
        public let aliasArn: String?
        /// String that contains the alias. This value begins with alias/.
        public let aliasName: String?
        /// Date and time that the alias was most recently created in the account and Region. Formatted as Unix time.
        public let creationDate: Date?
        /// Date and time that the alias was most recently associated with a KMS key in the account and Region. Formatted as Unix time.
        public let lastUpdatedDate: Date?
        /// String that contains the key identifier of the KMS key associated with the alias.
        public let targetKeyId: String?

        public init(aliasArn: String? = nil, aliasName: String? = nil, creationDate: Date? = nil, lastUpdatedDate: Date? = nil, targetKeyId: String? = nil) {
            self.aliasArn = aliasArn
            self.aliasName = aliasName
            self.creationDate = creationDate
            self.lastUpdatedDate = lastUpdatedDate
            self.targetKeyId = targetKeyId
        }

        private enum CodingKeys: String, CodingKey {
            case aliasArn = "AliasArn"
            case aliasName = "AliasName"
            case creationDate = "CreationDate"
            case lastUpdatedDate = "LastUpdatedDate"
            case targetKeyId = "TargetKeyId"
        }
    }

    public struct CancelKeyDeletionRequest: AWSEncodableShape {
        /// Identifies the KMS key whose deletion is being canceled. Specify the key ID or key ARN of the KMS key. For example:   Key ID: 1234abcd-12ab-34cd-56ef-1234567890ab    Key ARN: arn:aws:kms:us-east-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab    To get the key ID and key ARN for a KMS key, use ListKeys or DescribeKey.
        public let keyId: String

        public init(keyId: String) {
            self.keyId = keyId
        }

        public func validate(name: String) throws {
            try self.validate(self.keyId, name: "keyId", parent: name, max: 2048)
            try self.validate(self.keyId, name: "keyId", parent: name, min: 1)
        }

        private enum CodingKeys: String, CodingKey {
            case keyId = "KeyId"
        }
    }

    public struct CancelKeyDeletionResponse: AWSDecodableShape {
        /// The Amazon Resource Name (key ARN) of the KMS key whose deletion is canceled.
        public let keyId: String?

        public init(keyId: String? = nil) {
            self.keyId = keyId
        }

        private enum CodingKeys: String, CodingKey {
            case keyId = "KeyId"
        }
    }

    public struct ConnectCustomKeyStoreRequest: AWSEncodableShape {
        /// Enter the key store ID of the custom key store that you want to connect. To find the ID of a custom key store, use the DescribeCustomKeyStores operation.
        public let customKeyStoreId: String

        public init(customKeyStoreId: String) {
            self.customKeyStoreId = customKeyStoreId
        }

        public func validate(name: String) throws {
            try self.validate(self.customKeyStoreId, name: "customKeyStoreId", parent: name, max: 64)
            try self.validate(self.customKeyStoreId, name: "customKeyStoreId", parent: name, min: 1)
        }

        private enum CodingKeys: String, CodingKey {
            case customKeyStoreId = "CustomKeyStoreId"
        }
    }

    public struct ConnectCustomKeyStoreResponse: AWSDecodableShape {
        public init() {}
    }

    public struct CreateAliasRequest: AWSEncodableShape {
        /// Specifies the alias name. This value must begin with alias/ followed by a name, such as alias/ExampleAlias.   Do not include confidential or sensitive information in this field. This field may be displayed in plaintext in CloudTrail logs and other output.  The AliasName value must be string of 1-256 characters. It can contain only alphanumeric characters, forward slashes (/), underscores (_), and dashes (-). The alias name cannot begin with alias/aws/. The alias/aws/ prefix is reserved for Amazon Web Services managed keys.
        public let aliasName: String
        /// Associates the alias with the specified customer managed key. The KMS key must be in the same Amazon Web Services Region.  A valid key ID is required. If you supply a null or empty string value, this operation returns an error. For help finding the key ID and ARN, see Finding the Key ID and ARN in the  Key Management Service Developer Guide . Specify the key ID or key ARN of the KMS key. For example:   Key ID: 1234abcd-12ab-34cd-56ef-1234567890ab    Key ARN: arn:aws:kms:us-east-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab    To get the key ID and key ARN for a KMS key, use ListKeys or DescribeKey.
        public let targetKeyId: String

        public init(aliasName: String, targetKeyId: String) {
            self.aliasName = aliasName
            self.targetKeyId = targetKeyId
        }

        public func validate(name: String) throws {
            try self.validate(self.aliasName, name: "aliasName", parent: name, max: 256)
            try self.validate(self.aliasName, name: "aliasName", parent: name, min: 1)
            try self.validate(self.aliasName, name: "aliasName", parent: name, pattern: "^[a-zA-Z0-9:/_-]+$")
            try self.validate(self.targetKeyId, name: "targetKeyId", parent: name, max: 2048)
            try self.validate(self.targetKeyId, name: "targetKeyId", parent: name, min: 1)
        }

        private enum CodingKeys: String, CodingKey {
            case aliasName = "AliasName"
            case targetKeyId = "TargetKeyId"
        }
    }

    public struct CreateCustomKeyStoreRequest: AWSEncodableShape {
        /// Identifies the CloudHSM cluster for an CloudHSM key store. This parameter is required for custom key stores with CustomKeyStoreType of AWS_CLOUDHSM. Enter the cluster ID of any active CloudHSM cluster that is not already associated with a custom key store. To find the cluster ID, use the DescribeClusters operation.
        public let cloudHsmClusterId: String?
        /// Specifies a friendly name for the custom key store. The name must be unique in your Amazon Web Services account and Region. This parameter is required for all custom key stores.  Do not include confidential or sensitive information in this field. This field may be displayed in plaintext in CloudTrail logs and other output.
        public let customKeyStoreName: String
        /// Specifies the type of custom key store. The default value is AWS_CLOUDHSM. For a custom key store backed by an CloudHSM cluster, omit the parameter or enter AWS_CLOUDHSM. For a custom key store backed by an external key manager outside of Amazon Web Services, enter EXTERNAL_KEY_STORE. You cannot change this property after the key store is created.
        public let customKeyStoreType: CustomKeyStoreType?
        /// Specifies the kmsuser password for an CloudHSM key store. This parameter is required for custom key stores with a CustomKeyStoreType of AWS_CLOUDHSM. Enter the password of the  kmsuser crypto user (CU) account in the specified CloudHSM cluster. KMS logs into the cluster as this user to manage key material on your behalf. The password must be a string of 7 to 32 characters. Its value is case sensitive. This parameter tells KMS the kmsuser account password; it does not change the password in the CloudHSM cluster.
        public let keyStorePassword: String?
        /// Specifies the certificate for an CloudHSM key store. This parameter is required for custom key stores with a CustomKeyStoreType of AWS_CLOUDHSM. Enter the content of the trust anchor certificate for the CloudHSM cluster. This is the content of the customerCA.crt file that you created when you initialized the cluster.
        public let trustAnchorCertificate: String?
        /// Specifies an authentication credential for the external key store proxy (XKS proxy). This parameter is required for all custom key stores with a CustomKeyStoreType of EXTERNAL_KEY_STORE. The XksProxyAuthenticationCredential has two required elements: RawSecretAccessKey, a secret key, and AccessKeyId, a unique identifier for the RawSecretAccessKey. For character requirements, see XksProxyAuthenticationCredentialType. KMS uses this authentication credential to sign requests to the external key store proxy on your behalf. This credential is unrelated to Identity and Access Management (IAM) and Amazon Web Services credentials. This parameter doesn't set or change the authentication credentials on the XKS proxy. It just tells KMS the credential that you established on your external key store proxy. If you rotate your proxy authentication credential, use the UpdateCustomKeyStore operation to provide the new credential to KMS.
        public let xksProxyAuthenticationCredential: XksProxyAuthenticationCredentialType?
        /// Indicates how KMS communicates with the external key store proxy. This parameter is required for custom key stores with a CustomKeyStoreType of EXTERNAL_KEY_STORE. If the external key store proxy uses a public endpoint, specify PUBLIC_ENDPOINT. If the external key store proxy uses a Amazon VPC endpoint service for communication with KMS, specify VPC_ENDPOINT_SERVICE. For help making this choice, see Choosing a connectivity option in the Key Management Service Developer Guide. An Amazon VPC endpoint service keeps your communication with KMS in a private address space entirely within Amazon Web Services, but it requires more configuration, including establishing a Amazon VPC with multiple subnets, a VPC endpoint service, a network load balancer, and a verified private DNS name. A public endpoint is simpler to set up, but it might be slower and might not fulfill your security requirements. You might consider testing with a public endpoint, and then establishing a VPC endpoint service for production tasks. Note that this choice does not determine the location of the external key store proxy. Even if you choose a VPC endpoint service, the proxy can be hosted within the VPC or outside of Amazon Web Services such as in your corporate data center.
        public let xksProxyConnectivity: XksProxyConnectivityType?
        /// Specifies the endpoint that KMS uses to send requests to the external key store proxy (XKS proxy). This parameter is required for custom key stores with a CustomKeyStoreType of EXTERNAL_KEY_STORE. The protocol must be HTTPS. KMS communicates on port 443. Do not specify the port in the XksProxyUriEndpoint value. For external key stores with XksProxyConnectivity value of VPC_ENDPOINT_SERVICE, specify https:// followed by the private DNS name of the VPC endpoint service. For external key stores with PUBLIC_ENDPOINT connectivity, this endpoint must be reachable before you create the custom key store. KMS connects to the external key store proxy while creating the custom key store. For external key stores with VPC_ENDPOINT_SERVICE connectivity, KMS connects when you call the ConnectCustomKeyStore operation. The value of this parameter must begin with https://. The remainder can contain upper and lower case letters (A-Z and a-z), numbers (0-9), dots (.), and hyphens (-). Additional slashes (/ and \) are not permitted.  Uniqueness requirements:     The combined XksProxyUriEndpoint and XksProxyUriPath values must be unique in the Amazon Web Services account and Region.   An external key store with PUBLIC_ENDPOINT connectivity cannot use the same XksProxyUriEndpoint value as an external key store with VPC_ENDPOINT_SERVICE connectivity in this Amazon Web Services Region.   Each external key store with VPC_ENDPOINT_SERVICE connectivity must have its own private DNS name. The XksProxyUriEndpoint value for external key stores with VPC_ENDPOINT_SERVICE connectivity (private DNS name) must be unique in the Amazon Web Services account and Region.
        public let xksProxyUriEndpoint: String?
        /// Specifies the base path to the proxy APIs for this external key store. To find this value, see the documentation for your external key store proxy. This parameter is required for all custom key stores with a CustomKeyStoreType of EXTERNAL_KEY_STORE. The value must start with / and must end with /kms/xks/v1 where v1 represents the version of the KMS external key store proxy API. This path can include an optional prefix between the required elements such as /prefix/kms/xks/v1.  Uniqueness requirements:     The combined XksProxyUriEndpoint and XksProxyUriPath values must be unique in the Amazon Web Services account and Region.
        public let xksProxyUriPath: String?
        /// Specifies the name of the Amazon VPC endpoint service for interface endpoints that is used to communicate with your external key store proxy (XKS proxy). This parameter is required when the value of CustomKeyStoreType is EXTERNAL_KEY_STORE and the value of XksProxyConnectivity is VPC_ENDPOINT_SERVICE. The Amazon VPC endpoint service must fulfill all requirements for use with an external key store.   Uniqueness requirements:    External key stores with VPC_ENDPOINT_SERVICE connectivity can share an Amazon VPC, but each external key store must have its own VPC endpoint service and private DNS name.
        public let xksProxyVpcEndpointServiceName: String?

        public init(cloudHsmClusterId: String? = nil, customKeyStoreName: String, customKeyStoreType: CustomKeyStoreType? = nil, keyStorePassword: String? = nil, trustAnchorCertificate: String? = nil, xksProxyAuthenticationCredential: XksProxyAuthenticationCredentialType? = nil, xksProxyConnectivity: XksProxyConnectivityType? = nil, xksProxyUriEndpoint: String? = nil, xksProxyUriPath: String? = nil, xksProxyVpcEndpointServiceName: String? = nil) {
            self.cloudHsmClusterId = cloudHsmClusterId
            self.customKeyStoreName = customKeyStoreName
            self.customKeyStoreType = customKeyStoreType
            self.keyStorePassword = keyStorePassword
            self.trustAnchorCertificate = trustAnchorCertificate
            self.xksProxyAuthenticationCredential = xksProxyAuthenticationCredential
            self.xksProxyConnectivity = xksProxyConnectivity
            self.xksProxyUriEndpoint = xksProxyUriEndpoint
            self.xksProxyUriPath = xksProxyUriPath
            self.xksProxyVpcEndpointServiceName = xksProxyVpcEndpointServiceName
        }

        public func validate(name: String) throws {
            try self.validate(self.cloudHsmClusterId, name: "cloudHsmClusterId", parent: name, max: 24)
            try self.validate(self.cloudHsmClusterId, name: "cloudHsmClusterId", parent: name, min: 19)
            try self.validate(self.cloudHsmClusterId, name: "cloudHsmClusterId", parent: name, pattern: "^cluster-[2-7a-zA-Z]{11,16}$")
            try self.validate(self.customKeyStoreName, name: "customKeyStoreName", parent: name, max: 256)
            try self.validate(self.customKeyStoreName, name: "customKeyStoreName", parent: name, min: 1)
            try self.validate(self.keyStorePassword, name: "keyStorePassword", parent: name, max: 32)
            try self.validate(self.keyStorePassword, name: "keyStorePassword", parent: name, min: 7)
            try self.validate(self.trustAnchorCertificate, name: "trustAnchorCertificate", parent: name, max: 5000)
            try self.validate(self.trustAnchorCertificate, name: "trustAnchorCertificate", parent: name, min: 1)
            try self.xksProxyAuthenticationCredential?.validate(name: "\(name).xksProxyAuthenticationCredential")
            try self.validate(self.xksProxyUriEndpoint, name: "xksProxyUriEndpoint", parent: name, max: 128)
            try self.validate(self.xksProxyUriEndpoint, name: "xksProxyUriEndpoint", parent: name, min: 10)
            try self.validate(self.xksProxyUriEndpoint, name: "xksProxyUriEndpoint", parent: name, pattern: "^https://[a-zA-Z0-9.-]+$")
            try self.validate(self.xksProxyUriPath, name: "xksProxyUriPath", parent: name, max: 128)
            try self.validate(self.xksProxyUriPath, name: "xksProxyUriPath", parent: name, min: 10)
            try self.validate(self.xksProxyUriPath, name: "xksProxyUriPath", parent: name, pattern: "^(/[a-zA-Z0-9\\/_-]+/kms/xks/v\\d{1,2})$|^(/kms/xks/v\\d{1,2})$")
            try self.validate(self.xksProxyVpcEndpointServiceName, name: "xksProxyVpcEndpointServiceName", parent: name, max: 64)
            try self.validate(self.xksProxyVpcEndpointServiceName, name: "xksProxyVpcEndpointServiceName", parent: name, min: 20)
            try self.validate(self.xksProxyVpcEndpointServiceName, name: "xksProxyVpcEndpointServiceName", parent: name, pattern: "^com\\.amazonaws\\.vpce\\.([a-z]+-){2,3}\\d+\\.vpce-svc-[0-9a-z]+$")
        }

        private enum CodingKeys: String, CodingKey {
            case cloudHsmClusterId = "CloudHsmClusterId"
            case customKeyStoreName = "CustomKeyStoreName"
            case customKeyStoreType = "CustomKeyStoreType"
            case keyStorePassword = "KeyStorePassword"
            case trustAnchorCertificate = "TrustAnchorCertificate"
            case xksProxyAuthenticationCredential = "XksProxyAuthenticationCredential"
            case xksProxyConnectivity = "XksProxyConnectivity"
            case xksProxyUriEndpoint = "XksProxyUriEndpoint"
            case xksProxyUriPath = "XksProxyUriPath"
            case xksProxyVpcEndpointServiceName = "XksProxyVpcEndpointServiceName"
        }
    }

    public struct CreateCustomKeyStoreResponse: AWSDecodableShape {
        /// A unique identifier for the new custom key store.
        public let customKeyStoreId: String?

        public init(customKeyStoreId: String? = nil) {
            self.customKeyStoreId = customKeyStoreId
        }

        private enum CodingKeys: String, CodingKey {
            case customKeyStoreId = "CustomKeyStoreId"
        }
    }

    public struct CreateGrantRequest: AWSEncodableShape {
        /// Specifies a grant constraint.  Do not include confidential or sensitive information in this field. This field may be displayed in plaintext in CloudTrail logs and other output.  KMS supports the EncryptionContextEquals and EncryptionContextSubset grant constraints, which allow the permissions in the grant only when the encryption context in the request matches (EncryptionContextEquals) or includes (EncryptionContextSubset) the encryption context specified in the constraint.  The encryption context grant constraints are supported only on grant operations that include an EncryptionContext parameter, such as cryptographic operations on symmetric encryption KMS keys. Grants with grant constraints can include the DescribeKey and RetireGrant operations, but the constraint doesn't apply to these operations. If a grant with a grant constraint includes the CreateGrant operation, the constraint requires that any grants created with the CreateGrant permission have an equally strict or stricter encryption context constraint. You cannot use an encryption context grant constraint for cryptographic operations with asymmetric KMS keys or HMAC KMS keys. Operations with these keys don't support an encryption context. Each constraint value can include up to 8 encryption context pairs. The encryption context value in each constraint cannot exceed 384 characters. For information about grant constraints, see Using grant constraints in the Key Management Service Developer Guide. For more information about encryption context, see Encryption context in the  Key Management Service Developer Guide .
        public let constraints: GrantConstraints?
        /// Checks if your request will succeed. DryRun is an optional parameter.  To learn more about how to use this parameter, see Testing your KMS API calls in the Key Management Service Developer Guide.
        public let dryRun: Bool?
        /// The identity that gets the permissions specified in the grant. To specify the grantee principal, use the Amazon Resource Name (ARN) of an Amazon Web Services principal. Valid principals include Amazon Web Services accounts, IAM users, IAM roles, federated users, and assumed role users. For help with the ARN syntax for a principal, see IAM ARNs in the  Identity and Access Management User Guide .
        public let granteePrincipal: String
        /// A list of grant tokens.  Use a grant token when your permission to call this operation comes from a new grant that has not yet achieved eventual consistency. For more information, see Grant token and Using a grant token in the Key Management Service Developer Guide.
        public let grantTokens: [String]?
        /// Identifies the KMS key for the grant. The grant gives principals permission to use this KMS key. Specify the key ID or key ARN of the KMS key. To specify a KMS key in a
        /// different Amazon Web Services account, you must use the key ARN. For example:   Key ID: 1234abcd-12ab-34cd-56ef-1234567890ab    Key ARN: arn:aws:kms:us-east-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab    To get the key ID and key ARN for a KMS key, use ListKeys or DescribeKey.
        public let keyId: String
        /// A friendly name for the grant. Use this value to prevent the unintended creation of duplicate grants when retrying this request.  Do not include confidential or sensitive information in this field. This field may be displayed in plaintext in CloudTrail logs and other output.  When this value is absent, all CreateGrant requests result in a new grant with a unique GrantId even if all the supplied parameters are identical. This can result in unintended duplicates when you retry the CreateGrant request. When this value is present, you can retry a CreateGrant request with identical parameters; if the grant already exists, the original GrantId is returned without creating a new grant. Note that the returned grant token is unique with every CreateGrant request, even when a duplicate GrantId is returned. All grant tokens for the same grant ID can be used interchangeably.
        public let name: String?
        /// A list of operations that the grant permits.  This list must include only operations that are permitted in a grant. Also, the operation must be supported on the KMS key. For example, you cannot create a grant for a symmetric encryption KMS key that allows the Sign operation, or a grant for an asymmetric KMS key that allows the GenerateDataKey operation. If you try, KMS returns a ValidationError exception. For details, see Grant operations in the Key Management Service Developer Guide.
        public let operations: [GrantOperation]
        /// The principal that has permission to use the RetireGrant operation to retire the grant.  To specify the principal, use the Amazon Resource Name (ARN) of an Amazon Web Services principal. Valid principals include Amazon Web Services accounts, IAM users, IAM roles, federated users, and assumed role users. For help with the ARN syntax for a principal, see IAM ARNs in the  Identity and Access Management User Guide . The grant determines the retiring principal. Other principals might have permission to retire the grant or revoke the grant. For details, see RevokeGrant and Retiring and revoking grants in the Key Management Service Developer Guide.
        public let retiringPrincipal: String?

        public init(constraints: GrantConstraints? = nil, dryRun: Bool? = nil, granteePrincipal: String, grantTokens: [String]? = nil, keyId: String, name: String? = nil, operations: [GrantOperation], retiringPrincipal: String? = nil) {
            self.constraints = constraints
            self.dryRun = dryRun
            self.granteePrincipal = granteePrincipal
            self.grantTokens = grantTokens
            self.keyId = keyId
            self.name = name
            self.operations = operations
            self.retiringPrincipal = retiringPrincipal
        }

        public func validate(name: String) throws {
            try self.validate(self.granteePrincipal, name: "granteePrincipal", parent: name, max: 256)
            try self.validate(self.granteePrincipal, name: "granteePrincipal", parent: name, min: 1)
            try self.validate(self.granteePrincipal, name: "granteePrincipal", parent: name, pattern: "^[\\w+=,.@:/-]+$")
            try self.grantTokens?.forEach {
                try validate($0, name: "grantTokens[]", parent: name, max: 8192)
                try validate($0, name: "grantTokens[]", parent: name, min: 1)
            }
            try self.validate(self.grantTokens, name: "grantTokens", parent: name, max: 10)
            try self.validate(self.keyId, name: "keyId", parent: name, max: 2048)
            try self.validate(self.keyId, name: "keyId", parent: name, min: 1)
            try self.validate(self.name, name: "name", parent: name, max: 256)
            try self.validate(self.name, name: "name", parent: name, min: 1)
            try self.validate(self.name, name: "name", parent: name, pattern: "^[a-zA-Z0-9:/_-]+$")
            try self.validate(self.retiringPrincipal, name: "retiringPrincipal", parent: name, max: 256)
            try self.validate(self.retiringPrincipal, name: "retiringPrincipal", parent: name, min: 1)
            try self.validate(self.retiringPrincipal, name: "retiringPrincipal", parent: name, pattern: "^[\\w+=,.@:/-]+$")
        }

        private enum CodingKeys: String, CodingKey {
            case constraints = "Constraints"
            case dryRun = "DryRun"
            case granteePrincipal = "GranteePrincipal"
            case grantTokens = "GrantTokens"
            case keyId = "KeyId"
            case name = "Name"
            case operations = "Operations"
            case retiringPrincipal = "RetiringPrincipal"
        }
    }

    public struct CreateGrantResponse: AWSDecodableShape {
        /// The unique identifier for the grant. You can use the GrantId in a ListGrants, RetireGrant, or RevokeGrant operation.
        public let grantId: String?
        /// The grant token. Use a grant token when your permission to call this operation comes from a new grant that has not yet achieved eventual consistency. For more information, see Grant token and Using a grant token in the Key Management Service Developer Guide.
        public let grantToken: String?

        public init(grantId: String? = nil, grantToken: String? = nil) {
            self.grantId = grantId
            self.grantToken = grantToken
        }

        private enum CodingKeys: String, CodingKey {
            case grantId = "GrantId"
            case grantToken = "GrantToken"
        }
    }

    public struct CreateKeyRequest: AWSEncodableShape {
        /// Skips ("bypasses") the key policy lockout safety check. The default value is false.  Setting this value to true increases the risk that the KMS key becomes unmanageable. Do not set this value to true indiscriminately. For more information, see Default key policy in the Key Management Service Developer Guide.  Use this parameter only when you intend to prevent the principal that is making the request from making a subsequent PutKeyPolicy request on the KMS key.
        public let bypassPolicyLockoutSafetyCheck: Bool?
        /// Instead, use the KeySpec parameter. The KeySpec and CustomerMasterKeySpec parameters work the same way. Only the names differ. We recommend that you use KeySpec parameter in your code. However, to avoid breaking changes, KMS supports both parameters.
        public let customerMasterKeySpec: CustomerMasterKeySpec?
        /// Creates the KMS key in the specified custom key store. The ConnectionState of the custom key store must be CONNECTED. To find the CustomKeyStoreID and ConnectionState use the DescribeCustomKeyStores operation. This parameter is valid only for symmetric encryption KMS keys in a single Region. You cannot create any other type of KMS key in a custom key store. When you create a KMS key in an CloudHSM key store, KMS generates a non-exportable 256-bit symmetric key in its associated CloudHSM cluster and associates it with the KMS key. When you create a KMS key in an external key store, you must use the XksKeyId parameter to specify an external key that serves as key material for the KMS key.
        public let customKeyStoreId: String?
        /// A description of the KMS key. Use a description that helps you decide whether the KMS key is appropriate for a task. The default value is an empty string (no description).  Do not include confidential or sensitive information in this field. This field may be displayed in plaintext in CloudTrail logs and other output.  To set or change the description after the key is created, use UpdateKeyDescription.
        public let description: String?
        /// Specifies the type of KMS key to create. The default value, SYMMETRIC_DEFAULT, creates a KMS key with a 256-bit AES-GCM key that is used for encryption and decryption, except in China Regions, where it creates a 128-bit symmetric key that uses SM4 encryption. For help choosing a key spec for your KMS key, see Choosing a KMS key type in the  Key Management Service Developer Guide . The KeySpec determines whether the KMS key contains a symmetric key or an asymmetric key pair. It also determines the algorithms that the KMS key supports. You can't change the KeySpec after the KMS key is created. To further restrict the algorithms that can be used with the KMS key, use a condition key in its key policy or IAM policy. For more information, see kms:EncryptionAlgorithm, kms:MacAlgorithm or kms:Signing Algorithm in the  Key Management Service Developer Guide .   Amazon Web Services services that are integrated with KMS use symmetric encryption KMS keys to protect your data. These services do not support asymmetric KMS keys or HMAC KMS keys.  KMS supports the following key specs for KMS keys:   Symmetric encryption key (default)    SYMMETRIC_DEFAULT      HMAC keys (symmetric)    HMAC_224     HMAC_256     HMAC_384     HMAC_512      Asymmetric RSA key pairs    RSA_2048     RSA_3072     RSA_4096      Asymmetric NIST-recommended elliptic curve key pairs    ECC_NIST_P256 (secp256r1)    ECC_NIST_P384 (secp384r1)    ECC_NIST_P521 (secp521r1)     Other asymmetric elliptic curve key pairs    ECC_SECG_P256K1 (secp256k1), commonly used for cryptocurrencies.     SM2 key pairs (China Regions only)    SM2
        public let keySpec: KeySpec?
        /// Determines the cryptographic operations for which you can use the KMS key. The default value is ENCRYPT_DECRYPT. This parameter is optional when you are creating a symmetric encryption KMS key; otherwise, it is required. You can't change the KeyUsage value after the KMS key is created. Select only one valid value.   For symmetric encryption KMS keys, omit the parameter or specify ENCRYPT_DECRYPT.   For HMAC KMS keys (symmetric), specify GENERATE_VERIFY_MAC.   For asymmetric KMS keys with RSA key material, specify ENCRYPT_DECRYPT or SIGN_VERIFY.   For asymmetric KMS keys with ECC key material, specify SIGN_VERIFY.   For asymmetric KMS keys with SM2 key material (China Regions only), specify ENCRYPT_DECRYPT or SIGN_VERIFY.
        public let keyUsage: KeyUsageType?
        /// Creates a multi-Region primary key that you can replicate into other Amazon Web Services Regions. You cannot change this value after you create the KMS key.  For a multi-Region key, set this parameter to True. For a single-Region KMS key, omit this parameter or set it to False. The default value is False. This operation supports multi-Region keys, an KMS feature that lets you create multiple interoperable KMS keys in different Amazon Web Services Regions. Because these KMS keys have the same key ID, key material, and other metadata, you can use them interchangeably to encrypt data in one Amazon Web Services Region and decrypt it in a different Amazon Web Services Region without re-encrypting the data or making a cross-Region call. For more information about multi-Region keys, see Multi-Region keys in KMS in the Key Management Service Developer Guide. This value creates a primary key, not a replica. To create a replica key, use the ReplicateKey operation.  You can create a symmetric or asymmetric multi-Region key, and you can create a multi-Region key with imported key material. However, you cannot create a multi-Region key in a custom key store.
        public let multiRegion: Bool?
        /// The source of the key material for the KMS key. You cannot change the origin after you create the KMS key. The default is AWS_KMS, which means that KMS creates the key material. To create a KMS key with no key material (for imported key material), set this value to EXTERNAL. For more information about importing key material into KMS, see Importing Key Material in the Key Management Service Developer Guide. The EXTERNAL origin value is valid only for symmetric KMS keys. To create a KMS key in an CloudHSM key store and create its key material in the associated CloudHSM cluster, set this value to AWS_CLOUDHSM. You must also use the CustomKeyStoreId parameter to identify the CloudHSM key store. The KeySpec value must be SYMMETRIC_DEFAULT. To create a KMS key in an external key store, set this value to EXTERNAL_KEY_STORE. You must also use the CustomKeyStoreId parameter to identify the external key store and the XksKeyId parameter to identify the associated external key. The KeySpec value must be SYMMETRIC_DEFAULT.
        public let origin: OriginType?
        /// The key policy to attach to the KMS key. If you provide a key policy, it must meet the following criteria:   The key policy must allow the calling principal to make a subsequent PutKeyPolicy request on the KMS key.  This reduces the risk that the KMS key becomes unmanageable. For more information, see Default key policy in the Key Management Service Developer Guide. (To omit this condition, set BypassPolicyLockoutSafetyCheck to true.)   Each statement in the key policy must contain one or more principals. The principals in the key policy must exist and be visible to KMS. When you create a new Amazon Web Services principal, you might need to enforce a delay before including the new principal in a key policy because the new principal might not be immediately visible to KMS. For more information, see Changes that I make are not always immediately visible in the Amazon Web Services Identity and Access Management User Guide.   If you do not provide a key policy, KMS attaches a default key policy to the KMS key. For more information, see Default key policy in the Key Management Service Developer Guide.  The key policy size quota is 32 kilobytes (32768 bytes). For help writing and formatting a JSON policy document, see the IAM JSON Policy Reference in the  Identity and Access Management User Guide .
        public let policy: String?
        /// Assigns one or more tags to the KMS key. Use this parameter to tag the KMS key when it is created. To tag an existing KMS key, use the TagResource operation.  Do not include confidential or sensitive information in this field. This field may be displayed in plaintext in CloudTrail logs and other output.   Tagging or untagging a KMS key can allow or deny permission to the KMS key. For details, see ABAC for KMS in the Key Management Service Developer Guide.  To use this parameter, you must have kms:TagResource permission in an IAM policy. Each tag consists of a tag key and a tag value. Both the tag key and the tag value are required, but the tag value can be an empty (null) string. You cannot have more than one tag on a KMS key with the same tag key. If you specify an existing tag key with a different tag value, KMS replaces the current tag value with the specified one. When you add tags to an Amazon Web Services resource, Amazon Web Services generates a cost allocation report with usage and costs aggregated by tags. Tags can also be used to control access to a KMS key. For details, see Tagging Keys.
        public let tags: [Tag]?
        /// Identifies the external key that serves as key material for the KMS key in an external key store. Specify the ID that the external key store proxy uses to refer to the external key. For help, see the documentation for your external key store proxy. This parameter is required for a KMS key with an Origin value of EXTERNAL_KEY_STORE. It is not valid for KMS keys with any other Origin value. The external key must be an existing 256-bit AES symmetric encryption key hosted outside of Amazon Web Services in an external key manager associated with the external key store specified by the CustomKeyStoreId parameter. This key must be enabled and configured to perform encryption and decryption. Each KMS key in an external key store must use a different external key. For details, see Requirements for a KMS key in an external key store in the Key Management Service Developer Guide. Each KMS key in an external key store is associated two backing keys. One is key material that KMS generates. The other is the external key specified by this parameter. When you use the KMS key in an external key store to encrypt data, the encryption operation is performed first by KMS using the KMS key material, and then by the external key manager using the specified external key, a process known as double encryption. For details, see Double encryption in the Key Management Service Developer Guide.
        public let xksKeyId: String?

        public init(bypassPolicyLockoutSafetyCheck: Bool? = nil, customKeyStoreId: String? = nil, description: String? = nil, keySpec: KeySpec? = nil, keyUsage: KeyUsageType? = nil, multiRegion: Bool? = nil, origin: OriginType? = nil, policy: String? = nil, tags: [Tag]? = nil, xksKeyId: String? = nil) {
            self.bypassPolicyLockoutSafetyCheck = bypassPolicyLockoutSafetyCheck
            self.customerMasterKeySpec = nil
            self.customKeyStoreId = customKeyStoreId
            self.description = description
            self.keySpec = keySpec
            self.keyUsage = keyUsage
            self.multiRegion = multiRegion
            self.origin = origin
            self.policy = policy
            self.tags = tags
            self.xksKeyId = xksKeyId
        }

        @available(*, deprecated, message: "Members customerMasterKeySpec have been deprecated")
        public init(bypassPolicyLockoutSafetyCheck: Bool? = nil, customerMasterKeySpec: CustomerMasterKeySpec? = nil, customKeyStoreId: String? = nil, description: String? = nil, keySpec: KeySpec? = nil, keyUsage: KeyUsageType? = nil, multiRegion: Bool? = nil, origin: OriginType? = nil, policy: String? = nil, tags: [Tag]? = nil, xksKeyId: String? = nil) {
            self.bypassPolicyLockoutSafetyCheck = bypassPolicyLockoutSafetyCheck
            self.customerMasterKeySpec = customerMasterKeySpec
            self.customKeyStoreId = customKeyStoreId
            self.description = description
            self.keySpec = keySpec
            self.keyUsage = keyUsage
            self.multiRegion = multiRegion
            self.origin = origin
            self.policy = policy
            self.tags = tags
            self.xksKeyId = xksKeyId
        }

        public func validate(name: String) throws {
            try self.validate(self.customKeyStoreId, name: "customKeyStoreId", parent: name, max: 64)
            try self.validate(self.customKeyStoreId, name: "customKeyStoreId", parent: name, min: 1)
            try self.validate(self.description, name: "description", parent: name, max: 8192)
            try self.validate(self.policy, name: "policy", parent: name, max: 131072)
            try self.validate(self.policy, name: "policy", parent: name, min: 1)
            try self.validate(self.policy, name: "policy", parent: name, pattern: "^[\\u0009\\u000A\\u000D\\u0020-\\u00FF]+$")
            try self.tags?.forEach {
                try $0.validate(name: "\(name).tags[]")
            }
            try self.validate(self.xksKeyId, name: "xksKeyId", parent: name, max: 128)
            try self.validate(self.xksKeyId, name: "xksKeyId", parent: name, min: 1)
            try self.validate(self.xksKeyId, name: "xksKeyId", parent: name, pattern: "^[a-zA-Z0-9-_.]+$")
        }

        private enum CodingKeys: String, CodingKey {
            case bypassPolicyLockoutSafetyCheck = "BypassPolicyLockoutSafetyCheck"
            case customerMasterKeySpec = "CustomerMasterKeySpec"
            case customKeyStoreId = "CustomKeyStoreId"
            case description = "Description"
            case keySpec = "KeySpec"
            case keyUsage = "KeyUsage"
            case multiRegion = "MultiRegion"
            case origin = "Origin"
            case policy = "Policy"
            case tags = "Tags"
            case xksKeyId = "XksKeyId"
        }
    }

    public struct CreateKeyResponse: AWSDecodableShape {
        /// Metadata associated with the KMS key.
        public let keyMetadata: KeyMetadata?

        public init(keyMetadata: KeyMetadata? = nil) {
            self.keyMetadata = keyMetadata
        }

        private enum CodingKeys: String, CodingKey {
            case keyMetadata = "KeyMetadata"
        }
    }

    public struct CustomKeyStoresListEntry: AWSDecodableShape {
        /// A unique identifier for the CloudHSM cluster that is associated with an CloudHSM key store. This field appears only when the CustomKeyStoreType is AWS_CLOUDHSM.
        public let cloudHsmClusterId: String?
        /// Describes the connection error. This field appears in the response only when the ConnectionState is FAILED. Many failures can be resolved by updating the properties of the custom key store. To update a custom key store, disconnect it (DisconnectCustomKeyStore), correct the errors (UpdateCustomKeyStore), and try to connect again (ConnectCustomKeyStore). For additional help resolving these errors, see How to Fix a Connection Failure in Key Management Service Developer Guide.  All custom key stores:     INTERNAL_ERROR — KMS could not complete the request due to an internal error. Retry the request. For ConnectCustomKeyStore requests, disconnect the custom key store before trying to connect again.    NETWORK_ERRORS — Network errors are preventing KMS from connecting the custom key store to its backing key store.    CloudHSM key stores:     CLUSTER_NOT_FOUND — KMS cannot find the CloudHSM cluster with the specified cluster ID.    INSUFFICIENT_CLOUDHSM_HSMS — The associated CloudHSM cluster does not contain any active HSMs. To connect a custom key store to its CloudHSM cluster, the cluster must contain at least one active HSM.    INSUFFICIENT_FREE_ADDRESSES_IN_SUBNET — At least one private subnet associated with the CloudHSM cluster doesn't have any available IP addresses. A CloudHSM key store connection requires one free IP address in each of the associated private subnets, although two are preferable. For details, see How to Fix a Connection Failure in the Key Management Service Developer Guide.    INVALID_CREDENTIALS — The KeyStorePassword for the custom key store doesn't match the current password of the kmsuser crypto user in the CloudHSM cluster. Before you can connect your custom key store to its CloudHSM cluster, you must change the kmsuser account password and update the KeyStorePassword value for the custom key store.    SUBNET_NOT_FOUND — A subnet in the CloudHSM cluster configuration was deleted. If KMS cannot find all of the subnets in the cluster configuration, attempts to connect the custom key store to the CloudHSM cluster fail. To fix this error, create a cluster from a recent backup and associate it with your custom key store. (This process creates a new cluster configuration with a VPC and private subnets.) For details, see How to Fix a Connection Failure in the Key Management Service Developer Guide.    USER_LOCKED_OUT — The kmsuser CU account is locked out of the associated CloudHSM cluster due to too many failed password attempts. Before you can connect your custom key store to its CloudHSM cluster, you must change the kmsuser account password and update the key store password value for the custom key store.    USER_LOGGED_IN — The kmsuser CU account is logged into the associated CloudHSM cluster. This prevents KMS from rotating the kmsuser account password and logging into the cluster. Before you can connect your custom key store to its CloudHSM cluster, you must log the kmsuser CU out of the cluster. If you changed the kmsuser password to log into the cluster, you must also and update the key store password value for the custom key store. For help, see How to Log Out and Reconnect in the Key Management Service Developer Guide.    USER_NOT_FOUND — KMS cannot find a kmsuser CU account in the associated CloudHSM cluster. Before you can connect your custom key store to its CloudHSM cluster, you must create a kmsuser CU account in the cluster, and then update the key store password value for the custom key store.    External key stores:     INVALID_CREDENTIALS — One or both of the XksProxyAuthenticationCredential values is not valid on the specified external key store proxy.    XKS_PROXY_ACCESS_DENIED — KMS requests are denied access to the external key store proxy. If the external key store proxy has authorization rules, verify that they permit KMS to communicate with the proxy on your behalf.    XKS_PROXY_INVALID_CONFIGURATION — A configuration error is preventing the external key store from connecting to its proxy. Verify the value of the XksProxyUriPath.    XKS_PROXY_INVALID_RESPONSE — KMS cannot interpret the response from the external key store proxy. If you see this connection error code repeatedly, notify your external key store proxy vendor.    XKS_PROXY_INVALID_TLS_CONFIGURATION — KMS cannot connect to the external key store proxy because the TLS configuration is invalid. Verify that the XKS proxy supports TLS 1.2 or 1.3. Also, verify that the TLS certificate is not expired, and that it matches the hostname in the XksProxyUriEndpoint value, and that it is signed by a certificate authority included in the Trusted Certificate Authorities list.    XKS_PROXY_NOT_REACHABLE — KMS can't communicate with your external key store proxy. Verify that the XksProxyUriEndpoint and XksProxyUriPath are correct. Use the tools for your external key store proxy to verify that the proxy is active and available on its network. Also, verify that your external key manager instances are operating properly. Connection attempts fail with this connection error code if the proxy reports that all external key manager instances are unavailable.    XKS_PROXY_TIMED_OUT — KMS can connect to the external key store proxy, but the proxy does not respond to KMS in the time allotted. If you see this connection error code repeatedly, notify your external key store proxy vendor.    XKS_VPC_ENDPOINT_SERVICE_INVALID_CONFIGURATION — The Amazon VPC endpoint service configuration doesn't conform to the requirements for an KMS external key store.   The VPC endpoint service must be an endpoint service for interface endpoints in the caller's Amazon Web Services account.   It must have a network load balancer (NLB) connected to at least two subnets, each in a different Availability Zone.   The Allow principals list must include
        /// 	         the KMS service principal for the Region, cks.kms..amazonaws.com,
        /// 	         such as cks.kms.us-east-1.amazonaws.com.   It must not require acceptance of connection requests.   It must have a private DNS name. The private DNS name for an external key store with VPC_ENDPOINT_SERVICE connectivity
        /// 	       must be unique in its Amazon Web Services Region.   The domain of the private DNS name must have a verification status of
        /// 	         verified.   The TLS certificate specifies the private DNS hostname at which the endpoint is reachable.      XKS_VPC_ENDPOINT_SERVICE_NOT_FOUND — KMS can't find the VPC endpoint service that it uses to communicate with the external key store proxy. Verify that the XksProxyVpcEndpointServiceName is correct and the KMS service principal has service consumer permissions on the Amazon VPC endpoint service.
        public let connectionErrorCode: ConnectionErrorCodeType?
        /// Indicates whether the custom key store is connected to its backing key store. For an CloudHSM key store, the ConnectionState indicates whether it is connected to its CloudHSM cluster. For an external key store, the ConnectionState indicates whether it is connected to the external key store proxy that communicates with your external key manager. You can create and use KMS keys in your custom key stores only when its ConnectionState is CONNECTED. The ConnectionState value is DISCONNECTED only if the key store has never been connected or you use the DisconnectCustomKeyStore operation to disconnect it. If the value is CONNECTED but you are having trouble using the custom key store, make sure that the backing key store is reachable and active. For an CloudHSM key store, verify that its associated CloudHSM cluster is active and contains at least one active HSM. For an external key store, verify that the external key store proxy and external key manager are connected and enabled. A value of FAILED indicates that an attempt to connect was unsuccessful. The ConnectionErrorCode field in the response indicates the cause of the failure. For help resolving a connection failure, see Troubleshooting a custom key store in the Key Management Service Developer Guide.
        public let connectionState: ConnectionStateType?
        /// The date and time when the custom key store was created.
        public let creationDate: Date?
        /// A unique identifier for the custom key store.
        public let customKeyStoreId: String?
        /// The user-specified friendly name for the custom key store.
        public let customKeyStoreName: String?
        /// Indicates the type of the custom key store. AWS_CLOUDHSM indicates a custom key store backed by an CloudHSM cluster. EXTERNAL_KEY_STORE indicates a custom key store backed by an external key store proxy and external key manager outside of Amazon Web Services.
        public let customKeyStoreType: CustomKeyStoreType?
        /// The trust anchor certificate of the CloudHSM cluster associated with an CloudHSM key store. When you initialize the cluster, you create this certificate and save it in the customerCA.crt file. This field appears only when the CustomKeyStoreType is AWS_CLOUDHSM.
        public let trustAnchorCertificate: String?
        /// Configuration settings for the external key store proxy (XKS proxy). The external key store proxy translates KMS requests into a format that your external key manager can understand. The proxy configuration includes connection information that KMS requires. This field appears only when the CustomKeyStoreType is EXTERNAL_KEY_STORE.
        public let xksProxyConfiguration: XksProxyConfigurationType?

        public init(cloudHsmClusterId: String? = nil, connectionErrorCode: ConnectionErrorCodeType? = nil, connectionState: ConnectionStateType? = nil, creationDate: Date? = nil, customKeyStoreId: String? = nil, customKeyStoreName: String? = nil, customKeyStoreType: CustomKeyStoreType? = nil, trustAnchorCertificate: String? = nil, xksProxyConfiguration: XksProxyConfigurationType? = nil) {
            self.cloudHsmClusterId = cloudHsmClusterId
            self.connectionErrorCode = connectionErrorCode
            self.connectionState = connectionState
            self.creationDate = creationDate
            self.customKeyStoreId = customKeyStoreId
            self.customKeyStoreName = customKeyStoreName
            self.customKeyStoreType = customKeyStoreType
            self.trustAnchorCertificate = trustAnchorCertificate
            self.xksProxyConfiguration = xksProxyConfiguration
        }

        private enum CodingKeys: String, CodingKey {
            case cloudHsmClusterId = "CloudHsmClusterId"
            case connectionErrorCode = "ConnectionErrorCode"
            case connectionState = "ConnectionState"
            case creationDate = "CreationDate"
            case customKeyStoreId = "CustomKeyStoreId"
            case customKeyStoreName = "CustomKeyStoreName"
            case customKeyStoreType = "CustomKeyStoreType"
            case trustAnchorCertificate = "TrustAnchorCertificate"
            case xksProxyConfiguration = "XksProxyConfiguration"
        }
    }

    public struct DecryptRequest: AWSEncodableShape {
        /// Ciphertext to be decrypted. The blob includes metadata.
        public let ciphertextBlob: AWSBase64Data
        /// Checks if your request will succeed. DryRun is an optional parameter.  To learn more about how to use this parameter, see Testing your KMS API calls in the Key Management Service Developer Guide.
        public let dryRun: Bool?
        /// Specifies the encryption algorithm that will be used to decrypt the ciphertext. Specify the same algorithm that was used to encrypt the data. If you specify a different algorithm, the Decrypt operation fails. This parameter is required only when the ciphertext was encrypted under an asymmetric KMS key. The default value, SYMMETRIC_DEFAULT, represents the only supported algorithm that is valid for symmetric encryption KMS keys.
        public let encryptionAlgorithm: EncryptionAlgorithmSpec?
        /// Specifies the encryption context to use when decrypting the data. An encryption context is valid only for cryptographic operations with a symmetric encryption KMS key. The standard asymmetric encryption algorithms and HMAC algorithms that KMS uses do not support an encryption context. An encryption context is a collection of non-secret key-value pairs that represent additional authenticated data.
        /// When you use an encryption context to encrypt data, you must specify the same (an exact case-sensitive match) encryption context to decrypt the data. An encryption context is supported
        /// only on operations with symmetric encryption KMS keys. On operations with symmetric encryption KMS keys, an encryption context is optional, but it is strongly recommended. For more information, see
        /// Encryption context in the Key Management Service Developer Guide.
        public let encryptionContext: [String: String]?
        /// A list of grant tokens.  Use a grant token when your permission to call this operation comes from a new grant that has not yet achieved eventual consistency. For more information, see Grant token and Using a grant token in the Key Management Service Developer Guide.
        public let grantTokens: [String]?
        /// Specifies the KMS key that KMS uses to decrypt the ciphertext. Enter a key ID of the KMS key that was used to encrypt the ciphertext. If you identify a different KMS key, the Decrypt operation throws an IncorrectKeyException. This parameter is required only when the ciphertext was encrypted under an asymmetric KMS key. If you used a symmetric encryption KMS key, KMS can get the KMS key from metadata that it adds to the symmetric ciphertext blob. However, it is always recommended as a best practice. This practice ensures that you use the KMS key that you intend. To specify a KMS key, use its key ID, key ARN, alias name, or alias ARN. When using an alias name, prefix it with "alias/". To specify a KMS key in a different Amazon Web Services account, you must use the key ARN or alias ARN. For example:   Key ID: 1234abcd-12ab-34cd-56ef-1234567890ab    Key ARN: arn:aws:kms:us-east-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab    Alias name: alias/ExampleAlias    Alias ARN: arn:aws:kms:us-east-2:111122223333:alias/ExampleAlias    To get the key ID and key ARN for a KMS key, use ListKeys or DescribeKey. To get the alias name and alias ARN, use ListAliases.
        public let keyId: String?
        /// A signed attestation document from an Amazon Web Services Nitro enclave and the encryption algorithm to use with the enclave's public key. The only valid encryption algorithm is RSAES_OAEP_SHA_256.  This parameter only supports attestation documents for Amazon Web Services Nitro Enclaves. To include this parameter, use the Amazon Web Services Nitro Enclaves SDK or any Amazon Web Services SDK. When you use this parameter, instead of returning the plaintext data, KMS encrypts the plaintext data with the public key in the attestation document, and returns the resulting ciphertext in the CiphertextForRecipient field in the response. This ciphertext can be decrypted only with the private key in the enclave. The Plaintext field in the response is null or empty. For information about the interaction between KMS and Amazon Web Services Nitro Enclaves, see How Amazon Web Services Nitro Enclaves uses KMS in the Key Management Service Developer Guide.
        public let recipient: RecipientInfo?

        public init(ciphertextBlob: AWSBase64Data, dryRun: Bool? = nil, encryptionAlgorithm: EncryptionAlgorithmSpec? = nil, encryptionContext: [String: String]? = nil, grantTokens: [String]? = nil, keyId: String? = nil, recipient: RecipientInfo? = nil) {
            self.ciphertextBlob = ciphertextBlob
            self.dryRun = dryRun
            self.encryptionAlgorithm = encryptionAlgorithm
            self.encryptionContext = encryptionContext
            self.grantTokens = grantTokens
            self.keyId = keyId
            self.recipient = recipient
        }

        public func validate(name: String) throws {
            try self.validate(self.ciphertextBlob, name: "ciphertextBlob", parent: name, max: 6144)
            try self.validate(self.ciphertextBlob, name: "ciphertextBlob", parent: name, min: 1)
            try self.grantTokens?.forEach {
                try validate($0, name: "grantTokens[]", parent: name, max: 8192)
                try validate($0, name: "grantTokens[]", parent: name, min: 1)
            }
            try self.validate(self.grantTokens, name: "grantTokens", parent: name, max: 10)
            try self.validate(self.keyId, name: "keyId", parent: name, max: 2048)
            try self.validate(self.keyId, name: "keyId", parent: name, min: 1)
            try self.recipient?.validate(name: "\(name).recipient")
        }

        private enum CodingKeys: String, CodingKey {
            case ciphertextBlob = "CiphertextBlob"
            case dryRun = "DryRun"
            case encryptionAlgorithm = "EncryptionAlgorithm"
            case encryptionContext = "EncryptionContext"
            case grantTokens = "GrantTokens"
            case keyId = "KeyId"
            case recipient = "Recipient"
        }
    }

    public struct DecryptResponse: AWSDecodableShape {
        /// The plaintext data encrypted with the public key in the attestation document.  This field is included in the response only when the Recipient parameter in the request includes a valid attestation document from an Amazon Web Services Nitro enclave. For information about the interaction between KMS and Amazon Web Services Nitro Enclaves, see How Amazon Web Services Nitro Enclaves uses KMS in the Key Management Service Developer Guide.
        public let ciphertextForRecipient: AWSBase64Data?
        /// The encryption algorithm that was used to decrypt the ciphertext.
        public let encryptionAlgorithm: EncryptionAlgorithmSpec?
        /// The Amazon Resource Name (key ARN) of the KMS key that was used to decrypt the ciphertext.
        public let keyId: String?
        /// Decrypted plaintext data. When you use the HTTP API or the Amazon Web Services CLI, the value is Base64-encoded. Otherwise, it is not Base64-encoded. If the response includes the CiphertextForRecipient field, the Plaintext field is null or empty.
        public let plaintext: AWSBase64Data?

        public init(ciphertextForRecipient: AWSBase64Data? = nil, encryptionAlgorithm: EncryptionAlgorithmSpec? = nil, keyId: String? = nil, plaintext: AWSBase64Data? = nil) {
            self.ciphertextForRecipient = ciphertextForRecipient
            self.encryptionAlgorithm = encryptionAlgorithm
            self.keyId = keyId
            self.plaintext = plaintext
        }

        private enum CodingKeys: String, CodingKey {
            case ciphertextForRecipient = "CiphertextForRecipient"
            case encryptionAlgorithm = "EncryptionAlgorithm"
            case keyId = "KeyId"
            case plaintext = "Plaintext"
        }
    }

    public struct DeleteAliasRequest: AWSEncodableShape {
        /// The alias to be deleted. The alias name must begin with alias/ followed by the alias name, such as alias/ExampleAlias.
        public let aliasName: String

        public init(aliasName: String) {
            self.aliasName = aliasName
        }

        public func validate(name: String) throws {
            try self.validate(self.aliasName, name: "aliasName", parent: name, max: 256)
            try self.validate(self.aliasName, name: "aliasName", parent: name, min: 1)
            try self.validate(self.aliasName, name: "aliasName", parent: name, pattern: "^[a-zA-Z0-9:/_-]+$")
        }

        private enum CodingKeys: String, CodingKey {
            case aliasName = "AliasName"
        }
    }

    public struct DeleteCustomKeyStoreRequest: AWSEncodableShape {
        /// Enter the ID of the custom key store you want to delete. To find the ID of a custom key store, use the DescribeCustomKeyStores operation.
        public let customKeyStoreId: String

        public init(customKeyStoreId: String) {
            self.customKeyStoreId = customKeyStoreId
        }

        public func validate(name: String) throws {
            try self.validate(self.customKeyStoreId, name: "customKeyStoreId", parent: name, max: 64)
            try self.validate(self.customKeyStoreId, name: "customKeyStoreId", parent: name, min: 1)
        }

        private enum CodingKeys: String, CodingKey {
            case customKeyStoreId = "CustomKeyStoreId"
        }
    }

    public struct DeleteCustomKeyStoreResponse: AWSDecodableShape {
        public init() {}
    }

    public struct DeleteImportedKeyMaterialRequest: AWSEncodableShape {
        /// Identifies the KMS key from which you are deleting imported key material. The Origin of the KMS key must be EXTERNAL. Specify the key ID or key ARN of the KMS key. For example:   Key ID: 1234abcd-12ab-34cd-56ef-1234567890ab    Key ARN: arn:aws:kms:us-east-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab    To get the key ID and key ARN for a KMS key, use ListKeys or DescribeKey.
        public let keyId: String

        public init(keyId: String) {
            self.keyId = keyId
        }

        public func validate(name: String) throws {
            try self.validate(self.keyId, name: "keyId", parent: name, max: 2048)
            try self.validate(self.keyId, name: "keyId", parent: name, min: 1)
        }

        private enum CodingKeys: String, CodingKey {
            case keyId = "KeyId"
        }
    }

    public struct DescribeCustomKeyStoresRequest: AWSEncodableShape {
        /// Gets only information about the specified custom key store. Enter the key store ID. By default, this operation gets information about all custom key stores in the account and Region. To limit the output to a particular custom key store, provide either the CustomKeyStoreId or CustomKeyStoreName parameter, but not both.
        public let customKeyStoreId: String?
        /// Gets only information about the specified custom key store. Enter the friendly name of the custom key store. By default, this operation gets information about all custom key stores in the account and Region. To limit the output to a particular custom key store, provide either the CustomKeyStoreId or CustomKeyStoreName parameter, but not both.
        public let customKeyStoreName: String?
        /// Use this parameter to specify the maximum number of items to return. When this value is present, KMS does not return more than the specified number of items, but it might return fewer.
        public let limit: Int?
        /// Use this parameter in a subsequent request after you receive a response with truncated results. Set it to the value of NextMarker from the truncated response you just received.
        public let marker: String?

        public init(customKeyStoreId: String? = nil, customKeyStoreName: String? = nil, limit: Int? = nil, marker: String? = nil) {
            self.customKeyStoreId = customKeyStoreId
            self.customKeyStoreName = customKeyStoreName
            self.limit = limit
            self.marker = marker
        }

        public func validate(name: String) throws {
            try self.validate(self.customKeyStoreId, name: "customKeyStoreId", parent: name, max: 64)
            try self.validate(self.customKeyStoreId, name: "customKeyStoreId", parent: name, min: 1)
            try self.validate(self.customKeyStoreName, name: "customKeyStoreName", parent: name, max: 256)
            try self.validate(self.customKeyStoreName, name: "customKeyStoreName", parent: name, min: 1)
            try self.validate(self.limit, name: "limit", parent: name, max: 1000)
            try self.validate(self.limit, name: "limit", parent: name, min: 1)
            try self.validate(self.marker, name: "marker", parent: name, max: 1024)
            try self.validate(self.marker, name: "marker", parent: name, min: 1)
            try self.validate(self.marker, name: "marker", parent: name, pattern: "^[\\u0020-\\u00FF]*$")
        }

        private enum CodingKeys: String, CodingKey {
            case customKeyStoreId = "CustomKeyStoreId"
            case customKeyStoreName = "CustomKeyStoreName"
            case limit = "Limit"
            case marker = "Marker"
        }
    }

    public struct DescribeCustomKeyStoresResponse: AWSDecodableShape {
        /// Contains metadata about each custom key store.
        public let customKeyStores: [CustomKeyStoresListEntry]?
        /// When Truncated is true, this element is present and contains the value to use for the Marker parameter in a subsequent request.
        public let nextMarker: String?
        /// A flag that indicates whether there are more items in the list. When this value is true, the list in this response is truncated. To get more items, pass the value of the NextMarker element in thisresponse to the Marker parameter in a subsequent request.
        public let truncated: Bool?

        public init(customKeyStores: [CustomKeyStoresListEntry]? = nil, nextMarker: String? = nil, truncated: Bool? = nil) {
            self.customKeyStores = customKeyStores
            self.nextMarker = nextMarker
            self.truncated = truncated
        }

        private enum CodingKeys: String, CodingKey {
            case customKeyStores = "CustomKeyStores"
            case nextMarker = "NextMarker"
            case truncated = "Truncated"
        }
    }

    public struct DescribeKeyRequest: AWSEncodableShape {
        /// A list of grant tokens. Use a grant token when your permission to call this operation comes from a new grant that has not yet achieved eventual consistency. For more information, see Grant token and Using a grant token in the Key Management Service Developer Guide.
        public let grantTokens: [String]?
        /// Describes the specified KMS key.  If you specify a predefined Amazon Web Services alias (an Amazon Web Services alias with no key ID), KMS associates the alias with an Amazon Web Services managed key and returns its KeyId and Arn in the response. To specify a KMS key, use its key ID, key ARN, alias name, or alias ARN. When using an alias name, prefix it with "alias/". To specify a KMS key in a different Amazon Web Services account, you must use the key ARN or alias ARN. For example:   Key ID: 1234abcd-12ab-34cd-56ef-1234567890ab    Key ARN: arn:aws:kms:us-east-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab    Alias name: alias/ExampleAlias    Alias ARN: arn:aws:kms:us-east-2:111122223333:alias/ExampleAlias    To get the key ID and key ARN for a KMS key, use ListKeys or DescribeKey. To get the alias name and alias ARN, use ListAliases.
        public let keyId: String

        public init(grantTokens: [String]? = nil, keyId: String) {
            self.grantTokens = grantTokens
            self.keyId = keyId
        }

        public func validate(name: String) throws {
            try self.grantTokens?.forEach {
                try validate($0, name: "grantTokens[]", parent: name, max: 8192)
                try validate($0, name: "grantTokens[]", parent: name, min: 1)
            }
            try self.validate(self.grantTokens, name: "grantTokens", parent: name, max: 10)
            try self.validate(self.keyId, name: "keyId", parent: name, max: 2048)
            try self.validate(self.keyId, name: "keyId", parent: name, min: 1)
        }

        private enum CodingKeys: String, CodingKey {
            case grantTokens = "GrantTokens"
            case keyId = "KeyId"
        }
    }

    public struct DescribeKeyResponse: AWSDecodableShape {
        /// Metadata associated with the key.
        public let keyMetadata: KeyMetadata?

        public init(keyMetadata: KeyMetadata? = nil) {
            self.keyMetadata = keyMetadata
        }

        private enum CodingKeys: String, CodingKey {
            case keyMetadata = "KeyMetadata"
        }
    }

    public struct DisableKeyRequest: AWSEncodableShape {
        /// Identifies the KMS key to disable. Specify the key ID or key ARN of the KMS key. For example:   Key ID: 1234abcd-12ab-34cd-56ef-1234567890ab    Key ARN: arn:aws:kms:us-east-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab    To get the key ID and key ARN for a KMS key, use ListKeys or DescribeKey.
        public let keyId: String

        public init(keyId: String) {
            self.keyId = keyId
        }

        public func validate(name: String) throws {
            try self.validate(self.keyId, name: "keyId", parent: name, max: 2048)
            try self.validate(self.keyId, name: "keyId", parent: name, min: 1)
        }

        private enum CodingKeys: String, CodingKey {
            case keyId = "KeyId"
        }
    }

    public struct DisableKeyRotationRequest: AWSEncodableShape {
        /// Identifies a symmetric encryption KMS key. You cannot enable or disable automatic rotation of asymmetric KMS keys, HMAC KMS keys, KMS keys with imported key material, or KMS keys in a custom key store. Specify the key ID or key ARN of the KMS key. For example:   Key ID: 1234abcd-12ab-34cd-56ef-1234567890ab    Key ARN: arn:aws:kms:us-east-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab    To get the key ID and key ARN for a KMS key, use ListKeys or DescribeKey.
        public let keyId: String

        public init(keyId: String) {
            self.keyId = keyId
        }

        public func validate(name: String) throws {
            try self.validate(self.keyId, name: "keyId", parent: name, max: 2048)
            try self.validate(self.keyId, name: "keyId", parent: name, min: 1)
        }

        private enum CodingKeys: String, CodingKey {
            case keyId = "KeyId"
        }
    }

    public struct DisconnectCustomKeyStoreRequest: AWSEncodableShape {
        /// Enter the ID of the custom key store you want to disconnect. To find the ID of a custom key store, use the DescribeCustomKeyStores operation.
        public let customKeyStoreId: String

        public init(customKeyStoreId: String) {
            self.customKeyStoreId = customKeyStoreId
        }

        public func validate(name: String) throws {
            try self.validate(self.customKeyStoreId, name: "customKeyStoreId", parent: name, max: 64)
            try self.validate(self.customKeyStoreId, name: "customKeyStoreId", parent: name, min: 1)
        }

        private enum CodingKeys: String, CodingKey {
            case customKeyStoreId = "CustomKeyStoreId"
        }
    }

    public struct DisconnectCustomKeyStoreResponse: AWSDecodableShape {
        public init() {}
    }

    public struct EnableKeyRequest: AWSEncodableShape {
        /// Identifies the KMS key to enable. Specify the key ID or key ARN of the KMS key. For example:   Key ID: 1234abcd-12ab-34cd-56ef-1234567890ab    Key ARN: arn:aws:kms:us-east-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab    To get the key ID and key ARN for a KMS key, use ListKeys or DescribeKey.
        public let keyId: String

        public init(keyId: String) {
            self.keyId = keyId
        }

        public func validate(name: String) throws {
            try self.validate(self.keyId, name: "keyId", parent: name, max: 2048)
            try self.validate(self.keyId, name: "keyId", parent: name, min: 1)
        }

        private enum CodingKeys: String, CodingKey {
            case keyId = "KeyId"
        }
    }

    public struct EnableKeyRotationRequest: AWSEncodableShape {
        /// Identifies a symmetric encryption KMS key. You cannot enable automatic rotation of asymmetric KMS keys, HMAC KMS keys, KMS keys with imported key material, or KMS keys in a custom key store. To enable or disable automatic rotation of a set of related multi-Region keys, set the property on the primary key. Specify the key ID or key ARN of the KMS key. For example:   Key ID: 1234abcd-12ab-34cd-56ef-1234567890ab    Key ARN: arn:aws:kms:us-east-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab    To get the key ID and key ARN for a KMS key, use ListKeys or DescribeKey.
        public let keyId: String

        public init(keyId: String) {
            self.keyId = keyId
        }

        public func validate(name: String) throws {
            try self.validate(self.keyId, name: "keyId", parent: name, max: 2048)
            try self.validate(self.keyId, name: "keyId", parent: name, min: 1)
        }

        private enum CodingKeys: String, CodingKey {
            case keyId = "KeyId"
        }
    }

    public struct EncryptRequest: AWSEncodableShape {
        /// Checks if your request will succeed. DryRun is an optional parameter.  To learn more about how to use this parameter, see Testing your KMS API calls in the Key Management Service Developer Guide.
        public let dryRun: Bool?
        /// Specifies the encryption algorithm that KMS will use to encrypt the plaintext message. The algorithm must be compatible with the KMS key that you specify. This parameter is required only for asymmetric KMS keys. The default value, SYMMETRIC_DEFAULT, is the algorithm used for symmetric encryption KMS keys. If you are using an asymmetric KMS key, we recommend RSAES_OAEP_SHA_256. The SM2PKE algorithm is only available in China Regions.
        public let encryptionAlgorithm: EncryptionAlgorithmSpec?
        /// Specifies the encryption context that will be used to encrypt the data. An encryption context is valid only for cryptographic operations with a symmetric encryption KMS key. The standard asymmetric encryption algorithms and HMAC algorithms that KMS uses do not support an encryption context.   Do not include confidential or sensitive information in this field. This field may be displayed in plaintext in CloudTrail logs and other output.  An encryption context is a collection of non-secret key-value pairs that represent additional authenticated data.
        /// When you use an encryption context to encrypt data, you must specify the same (an exact case-sensitive match) encryption context to decrypt the data. An encryption context is supported
        /// only on operations with symmetric encryption KMS keys. On operations with symmetric encryption KMS keys, an encryption context is optional, but it is strongly recommended. For more information, see
        /// Encryption context in the Key Management Service Developer Guide.
        public let encryptionContext: [String: String]?
        /// A list of grant tokens. Use a grant token when your permission to call this operation comes from a new grant that has not yet achieved eventual consistency. For more information, see Grant token and Using a grant token in the Key Management Service Developer Guide.
        public let grantTokens: [String]?
        /// Identifies the KMS key to use in the encryption operation. The KMS key must have a KeyUsage of ENCRYPT_DECRYPT. To find the KeyUsage of a KMS key, use the DescribeKey operation. To specify a KMS key, use its key ID, key ARN, alias name, or alias ARN. When using an alias name, prefix it with "alias/". To specify a KMS key in a different Amazon Web Services account, you must use the key ARN or alias ARN. For example:   Key ID: 1234abcd-12ab-34cd-56ef-1234567890ab    Key ARN: arn:aws:kms:us-east-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab    Alias name: alias/ExampleAlias    Alias ARN: arn:aws:kms:us-east-2:111122223333:alias/ExampleAlias    To get the key ID and key ARN for a KMS key, use ListKeys or DescribeKey. To get the alias name and alias ARN, use ListAliases.
        public let keyId: String
        /// Data to be encrypted.
        public let plaintext: AWSBase64Data

        public init(dryRun: Bool? = nil, encryptionAlgorithm: EncryptionAlgorithmSpec? = nil, encryptionContext: [String: String]? = nil, grantTokens: [String]? = nil, keyId: String, plaintext: AWSBase64Data) {
            self.dryRun = dryRun
            self.encryptionAlgorithm = encryptionAlgorithm
            self.encryptionContext = encryptionContext
            self.grantTokens = grantTokens
            self.keyId = keyId
            self.plaintext = plaintext
        }

        public func validate(name: String) throws {
            try self.grantTokens?.forEach {
                try validate($0, name: "grantTokens[]", parent: name, max: 8192)
                try validate($0, name: "grantTokens[]", parent: name, min: 1)
            }
            try self.validate(self.grantTokens, name: "grantTokens", parent: name, max: 10)
            try self.validate(self.keyId, name: "keyId", parent: name, max: 2048)
            try self.validate(self.keyId, name: "keyId", parent: name, min: 1)
            try self.validate(self.plaintext, name: "plaintext", parent: name, max: 4096)
            try self.validate(self.plaintext, name: "plaintext", parent: name, min: 1)
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "DryRun"
            case encryptionAlgorithm = "EncryptionAlgorithm"
            case encryptionContext = "EncryptionContext"
            case grantTokens = "GrantTokens"
            case keyId = "KeyId"
            case plaintext = "Plaintext"
        }
    }

    public struct EncryptResponse: AWSDecodableShape {
        /// The encrypted plaintext. When you use the HTTP API or the Amazon Web Services CLI, the value is Base64-encoded. Otherwise, it is not Base64-encoded.
        public let ciphertextBlob: AWSBase64Data?
        /// The encryption algorithm that was used to encrypt the plaintext.
        public let encryptionAlgorithm: EncryptionAlgorithmSpec?
        /// The Amazon Resource Name (key ARN) of the KMS key that was used to encrypt the plaintext.
        public let keyId: String?

        public init(ciphertextBlob: AWSBase64Data? = nil, encryptionAlgorithm: EncryptionAlgorithmSpec? = nil, keyId: String? = nil) {
            self.ciphertextBlob = ciphertextBlob
            self.encryptionAlgorithm = encryptionAlgorithm
            self.keyId = keyId
        }

        private enum CodingKeys: String, CodingKey {
            case ciphertextBlob = "CiphertextBlob"
            case encryptionAlgorithm = "EncryptionAlgorithm"
            case keyId = "KeyId"
        }
    }

    public struct GenerateDataKeyPairRequest: AWSEncodableShape {
        /// Checks if your request will succeed. DryRun is an optional parameter.  To learn more about how to use this parameter, see Testing your KMS API calls in the Key Management Service Developer Guide.
        public let dryRun: Bool?
        /// Specifies the encryption context that will be used when encrypting the private key in the data key pair.  Do not include confidential or sensitive information in this field. This field may be displayed in plaintext in CloudTrail logs and other output.  An encryption context is a collection of non-secret key-value pairs that represent additional authenticated data.
        /// When you use an encryption context to encrypt data, you must specify the same (an exact case-sensitive match) encryption context to decrypt the data. An encryption context is supported
        /// only on operations with symmetric encryption KMS keys. On operations with symmetric encryption KMS keys, an encryption context is optional, but it is strongly recommended. For more information, see
        /// Encryption context in the Key Management Service Developer Guide.
        public let encryptionContext: [String: String]?
        /// A list of grant tokens. Use a grant token when your permission to call this operation comes from a new grant that has not yet achieved eventual consistency. For more information, see Grant token and Using a grant token in the Key Management Service Developer Guide.
        public let grantTokens: [String]?
        /// Specifies the symmetric encryption KMS key that encrypts the private key in the data key pair. You cannot specify an asymmetric KMS key or a KMS key in a custom key store. To get the type and origin of your KMS key, use the DescribeKey operation. To specify a KMS key, use its key ID, key ARN, alias name, or alias ARN. When using an alias name, prefix it with "alias/". To specify a KMS key in a different Amazon Web Services account, you must use the key ARN or alias ARN. For example:   Key ID: 1234abcd-12ab-34cd-56ef-1234567890ab    Key ARN: arn:aws:kms:us-east-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab    Alias name: alias/ExampleAlias    Alias ARN: arn:aws:kms:us-east-2:111122223333:alias/ExampleAlias    To get the key ID and key ARN for a KMS key, use ListKeys or DescribeKey. To get the alias name and alias ARN, use ListAliases.
        public let keyId: String
        /// Determines the type of data key pair that is generated.  The KMS rule that restricts the use of asymmetric RSA and SM2 KMS keys to encrypt and decrypt or to sign and verify (but not both), and the rule that permits you to use ECC KMS keys only to sign and verify, are not effective on data key pairs, which are used outside of KMS. The SM2 key spec is only available in China Regions.
        public let keyPairSpec: DataKeyPairSpec
        /// A signed attestation document from an Amazon Web Services Nitro enclave and the encryption algorithm to use with the enclave's public key. The only valid encryption algorithm is RSAES_OAEP_SHA_256.  This parameter only supports attestation documents for Amazon Web Services Nitro Enclaves. To include this parameter, use the Amazon Web Services Nitro Enclaves SDK or any Amazon Web Services SDK. When you use this parameter, instead of returning a plaintext copy of the private data key, KMS encrypts the plaintext private data key under the public key in the attestation document, and returns the resulting ciphertext in the CiphertextForRecipient field in the response. This ciphertext can be decrypted only with the private key in the enclave. The CiphertextBlob field in the response contains a copy of the private data key encrypted under the KMS key specified by the KeyId parameter. The PrivateKeyPlaintext field in the response is null or empty. For information about the interaction between KMS and Amazon Web Services Nitro Enclaves, see How Amazon Web Services Nitro Enclaves uses KMS in the Key Management Service Developer Guide.
        public let recipient: RecipientInfo?

        public init(dryRun: Bool? = nil, encryptionContext: [String: String]? = nil, grantTokens: [String]? = nil, keyId: String, keyPairSpec: DataKeyPairSpec, recipient: RecipientInfo? = nil) {
            self.dryRun = dryRun
            self.encryptionContext = encryptionContext
            self.grantTokens = grantTokens
            self.keyId = keyId
            self.keyPairSpec = keyPairSpec
            self.recipient = recipient
        }

        public func validate(name: String) throws {
            try self.grantTokens?.forEach {
                try validate($0, name: "grantTokens[]", parent: name, max: 8192)
                try validate($0, name: "grantTokens[]", parent: name, min: 1)
            }
            try self.validate(self.grantTokens, name: "grantTokens", parent: name, max: 10)
            try self.validate(self.keyId, name: "keyId", parent: name, max: 2048)
            try self.validate(self.keyId, name: "keyId", parent: name, min: 1)
            try self.recipient?.validate(name: "\(name).recipient")
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "DryRun"
            case encryptionContext = "EncryptionContext"
            case grantTokens = "GrantTokens"
            case keyId = "KeyId"
            case keyPairSpec = "KeyPairSpec"
            case recipient = "Recipient"
        }
    }

    public struct GenerateDataKeyPairResponse: AWSDecodableShape {
        /// The plaintext private data key encrypted with the public key from the Nitro enclave. This ciphertext can be decrypted only by using a private key in the Nitro enclave.  This field is included in the response only when the Recipient parameter in the request includes a valid attestation document from an Amazon Web Services Nitro enclave. For information about the interaction between KMS and Amazon Web Services Nitro Enclaves, see How Amazon Web Services Nitro Enclaves uses KMS in the Key Management Service Developer Guide.
        public let ciphertextForRecipient: AWSBase64Data?
        /// The Amazon Resource Name (key ARN) of the KMS key that encrypted the private key.
        public let keyId: String?
        /// The type of data key pair that was generated.
        public let keyPairSpec: DataKeyPairSpec?
        /// The encrypted copy of the private key. When you use the HTTP API or the Amazon Web Services CLI, the value is Base64-encoded. Otherwise, it is not Base64-encoded.
        public let privateKeyCiphertextBlob: AWSBase64Data?
        /// The plaintext copy of the private key. When you use the HTTP API or the Amazon Web Services CLI, the value is Base64-encoded. Otherwise, it is not Base64-encoded. If the response includes the CiphertextForRecipient field, the PrivateKeyPlaintext field is null or empty.
        public let privateKeyPlaintext: AWSBase64Data?
        /// The public key (in plaintext). When you use the HTTP API or the Amazon Web Services CLI, the value is Base64-encoded. Otherwise, it is not Base64-encoded.
        public let publicKey: AWSBase64Data?

        public init(ciphertextForRecipient: AWSBase64Data? = nil, keyId: String? = nil, keyPairSpec: DataKeyPairSpec? = nil, privateKeyCiphertextBlob: AWSBase64Data? = nil, privateKeyPlaintext: AWSBase64Data? = nil, publicKey: AWSBase64Data? = nil) {
            self.ciphertextForRecipient = ciphertextForRecipient
            self.keyId = keyId
            self.keyPairSpec = keyPairSpec
            self.privateKeyCiphertextBlob = privateKeyCiphertextBlob
            self.privateKeyPlaintext = privateKeyPlaintext
            self.publicKey = publicKey
        }

        private enum CodingKeys: String, CodingKey {
            case ciphertextForRecipient = "CiphertextForRecipient"
            case keyId = "KeyId"
            case keyPairSpec = "KeyPairSpec"
            case privateKeyCiphertextBlob = "PrivateKeyCiphertextBlob"
            case privateKeyPlaintext = "PrivateKeyPlaintext"
            case publicKey = "PublicKey"
        }
    }

    public struct GenerateDataKeyPairWithoutPlaintextRequest: AWSEncodableShape {
        /// Checks if your request will succeed. DryRun is an optional parameter.  To learn more about how to use this parameter, see Testing your KMS API calls in the Key Management Service Developer Guide.
        public let dryRun: Bool?
        /// Specifies the encryption context that will be used when encrypting the private key in the data key pair.  Do not include confidential or sensitive information in this field. This field may be displayed in plaintext in CloudTrail logs and other output.  An encryption context is a collection of non-secret key-value pairs that represent additional authenticated data.
        /// When you use an encryption context to encrypt data, you must specify the same (an exact case-sensitive match) encryption context to decrypt the data. An encryption context is supported
        /// only on operations with symmetric encryption KMS keys. On operations with symmetric encryption KMS keys, an encryption context is optional, but it is strongly recommended. For more information, see
        /// Encryption context in the Key Management Service Developer Guide.
        public let encryptionContext: [String: String]?
        /// A list of grant tokens. Use a grant token when your permission to call this operation comes from a new grant that has not yet achieved eventual consistency. For more information, see Grant token and Using a grant token in the Key Management Service Developer Guide.
        public let grantTokens: [String]?
        /// Specifies the symmetric encryption KMS key that encrypts the private key in the data key pair. You cannot specify an asymmetric KMS key or a KMS key in a custom key store. To get the type and origin of your KMS key, use the DescribeKey operation.  To specify a KMS key, use its key ID, key ARN, alias name, or alias ARN. When using an alias name, prefix it with "alias/". To specify a KMS key in a different Amazon Web Services account, you must use the key ARN or alias ARN. For example:   Key ID: 1234abcd-12ab-34cd-56ef-1234567890ab    Key ARN: arn:aws:kms:us-east-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab    Alias name: alias/ExampleAlias    Alias ARN: arn:aws:kms:us-east-2:111122223333:alias/ExampleAlias    To get the key ID and key ARN for a KMS key, use ListKeys or DescribeKey. To get the alias name and alias ARN, use ListAliases.
        public let keyId: String
        /// Determines the type of data key pair that is generated. The KMS rule that restricts the use of asymmetric RSA and SM2 KMS keys to encrypt and decrypt or to sign and verify (but not both), and the rule that permits you to use ECC KMS keys only to sign and verify, are not effective on data key pairs, which are used outside of KMS. The SM2 key spec is only available in China Regions.
        public let keyPairSpec: DataKeyPairSpec

        public init(dryRun: Bool? = nil, encryptionContext: [String: String]? = nil, grantTokens: [String]? = nil, keyId: String, keyPairSpec: DataKeyPairSpec) {
            self.dryRun = dryRun
            self.encryptionContext = encryptionContext
            self.grantTokens = grantTokens
            self.keyId = keyId
            self.keyPairSpec = keyPairSpec
        }

        public func validate(name: String) throws {
            try self.grantTokens?.forEach {
                try validate($0, name: "grantTokens[]", parent: name, max: 8192)
                try validate($0, name: "grantTokens[]", parent: name, min: 1)
            }
            try self.validate(self.grantTokens, name: "grantTokens", parent: name, max: 10)
            try self.validate(self.keyId, name: "keyId", parent: name, max: 2048)
            try self.validate(self.keyId, name: "keyId", parent: name, min: 1)
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "DryRun"
            case encryptionContext = "EncryptionContext"
            case grantTokens = "GrantTokens"
            case keyId = "KeyId"
            case keyPairSpec = "KeyPairSpec"
        }
    }

    public struct GenerateDataKeyPairWithoutPlaintextResponse: AWSDecodableShape {
        /// The Amazon Resource Name (key ARN) of the KMS key that encrypted the private key.
        public let keyId: String?
        /// The type of data key pair that was generated.
        public let keyPairSpec: DataKeyPairSpec?
        /// The encrypted copy of the private key. When you use the HTTP API or the Amazon Web Services CLI, the value is Base64-encoded. Otherwise, it is not Base64-encoded.
        public let privateKeyCiphertextBlob: AWSBase64Data?
        /// The public key (in plaintext). When you use the HTTP API or the Amazon Web Services CLI, the value is Base64-encoded. Otherwise, it is not Base64-encoded.
        public let publicKey: AWSBase64Data?

        public init(keyId: String? = nil, keyPairSpec: DataKeyPairSpec? = nil, privateKeyCiphertextBlob: AWSBase64Data? = nil, publicKey: AWSBase64Data? = nil) {
            self.keyId = keyId
            self.keyPairSpec = keyPairSpec
            self.privateKeyCiphertextBlob = privateKeyCiphertextBlob
            self.publicKey = publicKey
        }

        private enum CodingKeys: String, CodingKey {
            case keyId = "KeyId"
            case keyPairSpec = "KeyPairSpec"
            case privateKeyCiphertextBlob = "PrivateKeyCiphertextBlob"
            case publicKey = "PublicKey"
        }
    }

    public struct GenerateDataKeyRequest: AWSEncodableShape {
        /// Checks if your request will succeed. DryRun is an optional parameter.  To learn more about how to use this parameter, see Testing your KMS API calls in the Key Management Service Developer Guide.
        public let dryRun: Bool?
        /// Specifies the encryption context that will be used when encrypting the data key.  Do not include confidential or sensitive information in this field. This field may be displayed in plaintext in CloudTrail logs and other output.  An encryption context is a collection of non-secret key-value pairs that represent additional authenticated data.
        /// When you use an encryption context to encrypt data, you must specify the same (an exact case-sensitive match) encryption context to decrypt the data. An encryption context is supported
        /// only on operations with symmetric encryption KMS keys. On operations with symmetric encryption KMS keys, an encryption context is optional, but it is strongly recommended. For more information, see
        /// Encryption context in the Key Management Service Developer Guide.
        public let encryptionContext: [String: String]?
        /// A list of grant tokens. Use a grant token when your permission to call this operation comes from a new grant that has not yet achieved eventual consistency. For more information, see Grant token and Using a grant token in the Key Management Service Developer Guide.
        public let grantTokens: [String]?
        /// Specifies the symmetric encryption KMS key that encrypts the data key. You cannot specify an asymmetric KMS key or a KMS key in a custom key store. To get the type and origin of your KMS key, use the DescribeKey operation. To specify a KMS key, use its key ID, key ARN, alias name, or alias ARN. When using an alias name, prefix it with "alias/". To specify a KMS key in a different Amazon Web Services account, you must use the key ARN or alias ARN. For example:   Key ID: 1234abcd-12ab-34cd-56ef-1234567890ab    Key ARN: arn:aws:kms:us-east-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab    Alias name: alias/ExampleAlias    Alias ARN: arn:aws:kms:us-east-2:111122223333:alias/ExampleAlias    To get the key ID and key ARN for a KMS key, use ListKeys or DescribeKey. To get the alias name and alias ARN, use ListAliases.
        public let keyId: String
        /// Specifies the length of the data key. Use AES_128 to generate a 128-bit symmetric key, or AES_256 to generate a 256-bit symmetric key. You must specify either the KeySpec or the NumberOfBytes parameter (but not both) in every GenerateDataKey request.
        public let keySpec: DataKeySpec?
        /// Specifies the length of the data key in bytes. For example, use the value 64 to generate a 512-bit data key (64 bytes is 512 bits). For 128-bit (16-byte) and 256-bit (32-byte) data keys, use the KeySpec parameter. You must specify either the KeySpec or the NumberOfBytes parameter (but not both) in every GenerateDataKey request.
        public let numberOfBytes: Int?
        /// A signed attestation document from an Amazon Web Services Nitro enclave and the encryption algorithm to use with the enclave's public key. The only valid encryption algorithm is RSAES_OAEP_SHA_256.  This parameter only supports attestation documents for Amazon Web Services Nitro Enclaves. To include this parameter, use the Amazon Web Services Nitro Enclaves SDK or any Amazon Web Services SDK. When you use this parameter, instead of returning the plaintext data key, KMS encrypts the plaintext data key under the public key in the attestation document, and returns the resulting ciphertext in the CiphertextForRecipient field in the response. This ciphertext can be decrypted only with the private key in the enclave. The CiphertextBlob field in the response contains a copy of the data key encrypted under the KMS key specified by the KeyId parameter. The Plaintext field in the response is null or empty. For information about the interaction between KMS and Amazon Web Services Nitro Enclaves, see How Amazon Web Services Nitro Enclaves uses KMS in the Key Management Service Developer Guide.
        public let recipient: RecipientInfo?

        public init(dryRun: Bool? = nil, encryptionContext: [String: String]? = nil, grantTokens: [String]? = nil, keyId: String, keySpec: DataKeySpec? = nil, numberOfBytes: Int? = nil, recipient: RecipientInfo? = nil) {
            self.dryRun = dryRun
            self.encryptionContext = encryptionContext
            self.grantTokens = grantTokens
            self.keyId = keyId
            self.keySpec = keySpec
            self.numberOfBytes = numberOfBytes
            self.recipient = recipient
        }

        public func validate(name: String) throws {
            try self.grantTokens?.forEach {
                try validate($0, name: "grantTokens[]", parent: name, max: 8192)
                try validate($0, name: "grantTokens[]", parent: name, min: 1)
            }
            try self.validate(self.grantTokens, name: "grantTokens", parent: name, max: 10)
            try self.validate(self.keyId, name: "keyId", parent: name, max: 2048)
            try self.validate(self.keyId, name: "keyId", parent: name, min: 1)
            try self.validate(self.numberOfBytes, name: "numberOfBytes", parent: name, max: 1024)
            try self.validate(self.numberOfBytes, name: "numberOfBytes", parent: name, min: 1)
            try self.recipient?.validate(name: "\(name).recipient")
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "DryRun"
            case encryptionContext = "EncryptionContext"
            case grantTokens = "GrantTokens"
            case keyId = "KeyId"
            case keySpec = "KeySpec"
            case numberOfBytes = "NumberOfBytes"
            case recipient = "Recipient"
        }
    }

    public struct GenerateDataKeyResponse: AWSDecodableShape {
        /// The encrypted copy of the data key. When you use the HTTP API or the Amazon Web Services CLI, the value is Base64-encoded. Otherwise, it is not Base64-encoded.
        public let ciphertextBlob: AWSBase64Data?
        /// The plaintext data key encrypted with the public key from the Nitro enclave. This ciphertext can be decrypted only by using a private key in the Nitro enclave.  This field is included in the response only when the Recipient parameter in the request includes a valid attestation document from an Amazon Web Services Nitro enclave. For information about the interaction between KMS and Amazon Web Services Nitro Enclaves, see How Amazon Web Services Nitro Enclaves uses KMS in the Key Management Service Developer Guide.
        public let ciphertextForRecipient: AWSBase64Data?
        /// The Amazon Resource Name (key ARN) of the KMS key that encrypted the data key.
        public let keyId: String?
        /// The plaintext data key. When you use the HTTP API or the Amazon Web Services CLI, the value is Base64-encoded. Otherwise, it is not Base64-encoded. Use this data key to encrypt your data outside of KMS. Then, remove it from memory as soon as possible. If the response includes the CiphertextForRecipient field, the Plaintext field is null or empty.
        public let plaintext: AWSBase64Data?

        public init(ciphertextBlob: AWSBase64Data? = nil, ciphertextForRecipient: AWSBase64Data? = nil, keyId: String? = nil, plaintext: AWSBase64Data? = nil) {
            self.ciphertextBlob = ciphertextBlob
            self.ciphertextForRecipient = ciphertextForRecipient
            self.keyId = keyId
            self.plaintext = plaintext
        }

        private enum CodingKeys: String, CodingKey {
            case ciphertextBlob = "CiphertextBlob"
            case ciphertextForRecipient = "CiphertextForRecipient"
            case keyId = "KeyId"
            case plaintext = "Plaintext"
        }
    }

    public struct GenerateDataKeyWithoutPlaintextRequest: AWSEncodableShape {
        /// Checks if your request will succeed. DryRun is an optional parameter.  To learn more about how to use this parameter, see Testing your KMS API calls in the Key Management Service Developer Guide.
        public let dryRun: Bool?
        /// Specifies the encryption context that will be used when encrypting the data key.  Do not include confidential or sensitive information in this field. This field may be displayed in plaintext in CloudTrail logs and other output.  An encryption context is a collection of non-secret key-value pairs that represent additional authenticated data.
        /// When you use an encryption context to encrypt data, you must specify the same (an exact case-sensitive match) encryption context to decrypt the data. An encryption context is supported
        /// only on operations with symmetric encryption KMS keys. On operations with symmetric encryption KMS keys, an encryption context is optional, but it is strongly recommended. For more information, see
        /// Encryption context in the Key Management Service Developer Guide.
        public let encryptionContext: [String: String]?
        /// A list of grant tokens. Use a grant token when your permission to call this operation comes from a new grant that has not yet achieved eventual consistency. For more information, see Grant token and Using a grant token in the Key Management Service Developer Guide.
        public let grantTokens: [String]?
        /// Specifies the symmetric encryption KMS key that encrypts the data key. You cannot specify an asymmetric KMS key or a KMS key in a custom key store. To get the type and origin of your KMS key, use the DescribeKey operation. To specify a KMS key, use its key ID, key ARN, alias name, or alias ARN. When using an alias name, prefix it with "alias/". To specify a KMS key in a different Amazon Web Services account, you must use the key ARN or alias ARN. For example:   Key ID: 1234abcd-12ab-34cd-56ef-1234567890ab    Key ARN: arn:aws:kms:us-east-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab    Alias name: alias/ExampleAlias    Alias ARN: arn:aws:kms:us-east-2:111122223333:alias/ExampleAlias    To get the key ID and key ARN for a KMS key, use ListKeys or DescribeKey. To get the alias name and alias ARN, use ListAliases.
        public let keyId: String
        /// The length of the data key. Use AES_128 to generate a 128-bit symmetric key, or AES_256 to generate a 256-bit symmetric key.
        public let keySpec: DataKeySpec?
        /// The length of the data key in bytes. For example, use the value 64 to generate a 512-bit data key (64 bytes is 512 bits). For common key lengths (128-bit and 256-bit symmetric keys), we recommend that you use the KeySpec field instead of this one.
        public let numberOfBytes: Int?

        public init(dryRun: Bool? = nil, encryptionContext: [String: String]? = nil, grantTokens: [String]? = nil, keyId: String, keySpec: DataKeySpec? = nil, numberOfBytes: Int? = nil) {
            self.dryRun = dryRun
            self.encryptionContext = encryptionContext
            self.grantTokens = grantTokens
            self.keyId = keyId
            self.keySpec = keySpec
            self.numberOfBytes = numberOfBytes
        }

        public func validate(name: String) throws {
            try self.grantTokens?.forEach {
                try validate($0, name: "grantTokens[]", parent: name, max: 8192)
                try validate($0, name: "grantTokens[]", parent: name, min: 1)
            }
            try self.validate(self.grantTokens, name: "grantTokens", parent: name, max: 10)
            try self.validate(self.keyId, name: "keyId", parent: name, max: 2048)
            try self.validate(self.keyId, name: "keyId", parent: name, min: 1)
            try self.validate(self.numberOfBytes, name: "numberOfBytes", parent: name, max: 1024)
            try self.validate(self.numberOfBytes, name: "numberOfBytes", parent: name, min: 1)
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "DryRun"
            case encryptionContext = "EncryptionContext"
            case grantTokens = "GrantTokens"
            case keyId = "KeyId"
            case keySpec = "KeySpec"
            case numberOfBytes = "NumberOfBytes"
        }
    }

    public struct GenerateDataKeyWithoutPlaintextResponse: AWSDecodableShape {
        /// The encrypted data key. When you use the HTTP API or the Amazon Web Services CLI, the value is Base64-encoded. Otherwise, it is not Base64-encoded.
        public let ciphertextBlob: AWSBase64Data?
        /// The Amazon Resource Name (key ARN) of the KMS key that encrypted the data key.
        public let keyId: String?

        public init(ciphertextBlob: AWSBase64Data? = nil, keyId: String? = nil) {
            self.ciphertextBlob = ciphertextBlob
            self.keyId = keyId
        }

        private enum CodingKeys: String, CodingKey {
            case ciphertextBlob = "CiphertextBlob"
            case keyId = "KeyId"
        }
    }

    public struct GenerateMacRequest: AWSEncodableShape {
        /// Checks if your request will succeed. DryRun is an optional parameter.  To learn more about how to use this parameter, see Testing your KMS API calls in the Key Management Service Developer Guide.
        public let dryRun: Bool?
        /// A list of grant tokens. Use a grant token when your permission to call this operation comes from a new grant that has not yet achieved eventual consistency. For more information, see Grant token and Using a grant token in the Key Management Service Developer Guide.
        public let grantTokens: [String]?
        /// The HMAC KMS key to use in the operation. The MAC algorithm computes the HMAC for the message and the key as described in RFC 2104. To identify an HMAC KMS key, use the DescribeKey operation and see the KeySpec field in the response.
        public let keyId: String
        /// The MAC algorithm used in the operation. The algorithm must be compatible with the HMAC KMS key that you specify. To find the MAC algorithms that your HMAC KMS key supports, use the DescribeKey operation and see the MacAlgorithms field in the DescribeKey response.
        public let macAlgorithm: MacAlgorithmSpec
        /// The message to be hashed. Specify a message of up to 4,096 bytes.   GenerateMac and VerifyMac do not provide special handling for message digests. If you generate an HMAC for a hash digest of a message, you must verify the HMAC of the same hash digest.
        public let message: AWSBase64Data

        public init(dryRun: Bool? = nil, grantTokens: [String]? = nil, keyId: String, macAlgorithm: MacAlgorithmSpec, message: AWSBase64Data) {
            self.dryRun = dryRun
            self.grantTokens = grantTokens
            self.keyId = keyId
            self.macAlgorithm = macAlgorithm
            self.message = message
        }

        public func validate(name: String) throws {
            try self.grantTokens?.forEach {
                try validate($0, name: "grantTokens[]", parent: name, max: 8192)
                try validate($0, name: "grantTokens[]", parent: name, min: 1)
            }
            try self.validate(self.grantTokens, name: "grantTokens", parent: name, max: 10)
            try self.validate(self.keyId, name: "keyId", parent: name, max: 2048)
            try self.validate(self.keyId, name: "keyId", parent: name, min: 1)
            try self.validate(self.message, name: "message", parent: name, max: 4096)
            try self.validate(self.message, name: "message", parent: name, min: 1)
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "DryRun"
            case grantTokens = "GrantTokens"
            case keyId = "KeyId"
            case macAlgorithm = "MacAlgorithm"
            case message = "Message"
        }
    }

    public struct GenerateMacResponse: AWSDecodableShape {
        /// The HMAC KMS key used in the operation.
        public let keyId: String?
        /// The hash-based message authentication code (HMAC) that was generated for the specified message, HMAC KMS key, and MAC algorithm. This is the standard, raw HMAC defined in RFC 2104.
        public let mac: AWSBase64Data?
        /// The MAC algorithm that was used to generate the HMAC.
        public let macAlgorithm: MacAlgorithmSpec?

        public init(keyId: String? = nil, mac: AWSBase64Data? = nil, macAlgorithm: MacAlgorithmSpec? = nil) {
            self.keyId = keyId
            self.mac = mac
            self.macAlgorithm = macAlgorithm
        }

        private enum CodingKeys: String, CodingKey {
            case keyId = "KeyId"
            case mac = "Mac"
            case macAlgorithm = "MacAlgorithm"
        }
    }

    public struct GenerateRandomRequest: AWSEncodableShape {
        /// Generates the random byte string in the CloudHSM cluster that is associated with the specified CloudHSM key store. To find the ID of a custom key store, use the DescribeCustomKeyStores operation. External key store IDs are not valid for this parameter. If you specify the ID of an external key store, GenerateRandom throws an UnsupportedOperationException.
        public let customKeyStoreId: String?
        /// The length of the random byte string. This parameter is required.
        public let numberOfBytes: Int?
        /// A signed attestation document from an Amazon Web Services Nitro enclave and the encryption algorithm to use with the enclave's public key. The only valid encryption algorithm is RSAES_OAEP_SHA_256.  This parameter only supports attestation documents for Amazon Web Services Nitro Enclaves. To include this parameter, use the Amazon Web Services Nitro Enclaves SDK or any Amazon Web Services SDK. When you use this parameter, instead of returning plaintext bytes, KMS encrypts the plaintext bytes under the public key in the attestation document, and returns the resulting ciphertext in the CiphertextForRecipient field in the response. This ciphertext can be decrypted only with the private key in the enclave. The Plaintext field in the response is null or empty. For information about the interaction between KMS and Amazon Web Services Nitro Enclaves, see How Amazon Web Services Nitro Enclaves uses KMS in the Key Management Service Developer Guide.
        public let recipient: RecipientInfo?

        public init(customKeyStoreId: String? = nil, numberOfBytes: Int? = nil, recipient: RecipientInfo? = nil) {
            self.customKeyStoreId = customKeyStoreId
            self.numberOfBytes = numberOfBytes
            self.recipient = recipient
        }

        public func validate(name: String) throws {
            try self.validate(self.customKeyStoreId, name: "customKeyStoreId", parent: name, max: 64)
            try self.validate(self.customKeyStoreId, name: "customKeyStoreId", parent: name, min: 1)
            try self.validate(self.numberOfBytes, name: "numberOfBytes", parent: name, max: 1024)
            try self.validate(self.numberOfBytes, name: "numberOfBytes", parent: name, min: 1)
            try self.recipient?.validate(name: "\(name).recipient")
        }

        private enum CodingKeys: String, CodingKey {
            case customKeyStoreId = "CustomKeyStoreId"
            case numberOfBytes = "NumberOfBytes"
            case recipient = "Recipient"
        }
    }

    public struct GenerateRandomResponse: AWSDecodableShape {
        /// The plaintext random bytes encrypted with the public key from the Nitro enclave. This ciphertext can be decrypted only by using a private key in the Nitro enclave.  This field is included in the response only when the Recipient parameter in the request includes a valid attestation document from an Amazon Web Services Nitro enclave. For information about the interaction between KMS and Amazon Web Services Nitro Enclaves, see How Amazon Web Services Nitro Enclaves uses KMS in the Key Management Service Developer Guide.
        public let ciphertextForRecipient: AWSBase64Data?
        /// The random byte string. When you use the HTTP API or the Amazon Web Services CLI, the value is Base64-encoded. Otherwise, it is not Base64-encoded. If the response includes the CiphertextForRecipient field, the Plaintext field is null or empty.
        public let plaintext: AWSBase64Data?

        public init(ciphertextForRecipient: AWSBase64Data? = nil, plaintext: AWSBase64Data? = nil) {
            self.ciphertextForRecipient = ciphertextForRecipient
            self.plaintext = plaintext
        }

        private enum CodingKeys: String, CodingKey {
            case ciphertextForRecipient = "CiphertextForRecipient"
            case plaintext = "Plaintext"
        }
    }

    public struct GetKeyPolicyRequest: AWSEncodableShape {
        /// Gets the key policy for the specified KMS key. Specify the key ID or key ARN of the KMS key. For example:   Key ID: 1234abcd-12ab-34cd-56ef-1234567890ab    Key ARN: arn:aws:kms:us-east-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab    To get the key ID and key ARN for a KMS key, use ListKeys or DescribeKey.
        public let keyId: String
        /// Specifies the name of the key policy. If no policy name is specified, the default value is default. The only valid name is default. To get the names of key policies, use ListKeyPolicies.
        public let policyName: String?

        public init(keyId: String, policyName: String? = nil) {
            self.keyId = keyId
            self.policyName = policyName
        }

        public func validate(name: String) throws {
            try self.validate(self.keyId, name: "keyId", parent: name, max: 2048)
            try self.validate(self.keyId, name: "keyId", parent: name, min: 1)
            try self.validate(self.policyName, name: "policyName", parent: name, max: 128)
            try self.validate(self.policyName, name: "policyName", parent: name, min: 1)
            try self.validate(self.policyName, name: "policyName", parent: name, pattern: "^[\\w]+$")
        }

        private enum CodingKeys: String, CodingKey {
            case keyId = "KeyId"
            case policyName = "PolicyName"
        }
    }

    public struct GetKeyPolicyResponse: AWSDecodableShape {
        /// A key policy document in JSON format.
        public let policy: String?
        /// The name of the key policy. The only valid value is default.
        public let policyName: String?

        public init(policy: String? = nil, policyName: String? = nil) {
            self.policy = policy
            self.policyName = policyName
        }

        private enum CodingKeys: String, CodingKey {
            case policy = "Policy"
            case policyName = "PolicyName"
        }
    }

    public struct GetKeyRotationStatusRequest: AWSEncodableShape {
        /// Gets the rotation status for the specified KMS key. Specify the key ID or key ARN of the KMS key. To specify a KMS key in a
        /// different Amazon Web Services account, you must use the key ARN. For example:   Key ID: 1234abcd-12ab-34cd-56ef-1234567890ab    Key ARN: arn:aws:kms:us-east-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab    To get the key ID and key ARN for a KMS key, use ListKeys or DescribeKey.
        public let keyId: String

        public init(keyId: String) {
            self.keyId = keyId
        }

        public func validate(name: String) throws {
            try self.validate(self.keyId, name: "keyId", parent: name, max: 2048)
            try self.validate(self.keyId, name: "keyId", parent: name, min: 1)
        }

        private enum CodingKeys: String, CodingKey {
            case keyId = "KeyId"
        }
    }

    public struct GetKeyRotationStatusResponse: AWSDecodableShape {
        /// A Boolean value that specifies whether key rotation is enabled.
        public let keyRotationEnabled: Bool?

        public init(keyRotationEnabled: Bool? = nil) {
            self.keyRotationEnabled = keyRotationEnabled
        }

        private enum CodingKeys: String, CodingKey {
            case keyRotationEnabled = "KeyRotationEnabled"
        }
    }

    public struct GetParametersForImportRequest: AWSEncodableShape {
        /// The identifier of the KMS key that will be associated with the imported key material. The Origin of the KMS key must be EXTERNAL. All KMS key types are supported, including multi-Region keys. However, you cannot import key material into a KMS key in a custom key store. Specify the key ID or key ARN of the KMS key. For example:   Key ID: 1234abcd-12ab-34cd-56ef-1234567890ab    Key ARN: arn:aws:kms:us-east-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab    To get the key ID and key ARN for a KMS key, use ListKeys or DescribeKey.
        public let keyId: String
        /// The algorithm you will use with the RSA public key (PublicKey) in the response to protect your key material during import. For more information, see Select a wrapping algorithm in the Key Management Service Developer Guide. For RSA_AES wrapping algorithms, you encrypt your key material with an AES key that you generate, then encrypt your AES key with the RSA public key from KMS. For RSAES wrapping algorithms, you encrypt your key material directly with the RSA public key from KMS. The wrapping algorithms that you can use depend on the type of key material that you are importing. To import an RSA private key, you must use an RSA_AES wrapping algorithm.    RSA_AES_KEY_WRAP_SHA_256 — Supported for wrapping RSA and ECC key material.    RSA_AES_KEY_WRAP_SHA_1 — Supported for wrapping RSA and ECC key material.    RSAES_OAEP_SHA_256 — Supported for all types of key material, except RSA key material (private key). You cannot use the RSAES_OAEP_SHA_256 wrapping algorithm with the RSA_2048 wrapping key spec to wrap ECC_NIST_P521 key material.    RSAES_OAEP_SHA_1 — Supported for all types of key material, except RSA key material (private key). You cannot use the RSAES_OAEP_SHA_1 wrapping algorithm with the RSA_2048 wrapping key spec to wrap ECC_NIST_P521 key material.    RSAES_PKCS1_V1_5 (Deprecated) — As of October 10, 2023, KMS does not support the RSAES_PKCS1_V1_5 wrapping algorithm.
        public let wrappingAlgorithm: AlgorithmSpec
        /// The type of RSA public key to return in the response. You will use this wrapping key with the specified wrapping algorithm to protect your key material during import.  Use the longest RSA wrapping key that is practical.  You cannot use an RSA_2048 public key to directly wrap an ECC_NIST_P521 private key. Instead, use an RSA_AES wrapping algorithm or choose a longer RSA public key.
        public let wrappingKeySpec: WrappingKeySpec

        public init(keyId: String, wrappingAlgorithm: AlgorithmSpec, wrappingKeySpec: WrappingKeySpec) {
            self.keyId = keyId
            self.wrappingAlgorithm = wrappingAlgorithm
            self.wrappingKeySpec = wrappingKeySpec
        }

        public func validate(name: String) throws {
            try self.validate(self.keyId, name: "keyId", parent: name, max: 2048)
            try self.validate(self.keyId, name: "keyId", parent: name, min: 1)
        }

        private enum CodingKeys: String, CodingKey {
            case keyId = "KeyId"
            case wrappingAlgorithm = "WrappingAlgorithm"
            case wrappingKeySpec = "WrappingKeySpec"
        }
    }

    public struct GetParametersForImportResponse: AWSDecodableShape {
        /// The import token to send in a subsequent ImportKeyMaterial request.
        public let importToken: AWSBase64Data?
        /// The Amazon Resource Name (key ARN) of the KMS key to use in a subsequent ImportKeyMaterial request. This is the same KMS key specified in the GetParametersForImport request.
        public let keyId: String?
        /// The time at which the import token and public key are no longer valid. After this time, you cannot use them to make an ImportKeyMaterial request and you must send another GetParametersForImport request to get new ones.
        public let parametersValidTo: Date?
        /// The public key to use to encrypt the key material before importing it with ImportKeyMaterial.
        public let publicKey: AWSBase64Data?

        public init(importToken: AWSBase64Data? = nil, keyId: String? = nil, parametersValidTo: Date? = nil, publicKey: AWSBase64Data? = nil) {
            self.importToken = importToken
            self.keyId = keyId
            self.parametersValidTo = parametersValidTo
            self.publicKey = publicKey
        }

        private enum CodingKeys: String, CodingKey {
            case importToken = "ImportToken"
            case keyId = "KeyId"
            case parametersValidTo = "ParametersValidTo"
            case publicKey = "PublicKey"
        }
    }

    public struct GetPublicKeyRequest: AWSEncodableShape {
        /// A list of grant tokens. Use a grant token when your permission to call this operation comes from a new grant that has not yet achieved eventual consistency. For more information, see Grant token and Using a grant token in the Key Management Service Developer Guide.
        public let grantTokens: [String]?
        /// Identifies the asymmetric KMS key that includes the public key. To specify a KMS key, use its key ID, key ARN, alias name, or alias ARN. When using an alias name, prefix it with "alias/". To specify a KMS key in a different Amazon Web Services account, you must use the key ARN or alias ARN. For example:   Key ID: 1234abcd-12ab-34cd-56ef-1234567890ab    Key ARN: arn:aws:kms:us-east-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab    Alias name: alias/ExampleAlias    Alias ARN: arn:aws:kms:us-east-2:111122223333:alias/ExampleAlias    To get the key ID and key ARN for a KMS key, use ListKeys or DescribeKey. To get the alias name and alias ARN, use ListAliases.
        public let keyId: String

        public init(grantTokens: [String]? = nil, keyId: String) {
            self.grantTokens = grantTokens
            self.keyId = keyId
        }

        public func validate(name: String) throws {
            try self.grantTokens?.forEach {
                try validate($0, name: "grantTokens[]", parent: name, max: 8192)
                try validate($0, name: "grantTokens[]", parent: name, min: 1)
            }
            try self.validate(self.grantTokens, name: "grantTokens", parent: name, max: 10)
            try self.validate(self.keyId, name: "keyId", parent: name, max: 2048)
            try self.validate(self.keyId, name: "keyId", parent: name, min: 1)
        }

        private enum CodingKeys: String, CodingKey {
            case grantTokens = "GrantTokens"
            case keyId = "KeyId"
        }
    }

    public struct GetPublicKeyResponse: AWSDecodableShape {
        /// Instead, use the KeySpec field in the GetPublicKey response. The KeySpec and CustomerMasterKeySpec fields have the same value. We recommend that you use the KeySpec field in your code. However, to avoid breaking changes, KMS supports both fields.
        public let customerMasterKeySpec: CustomerMasterKeySpec?
        /// The encryption algorithms that KMS supports for this key.  This information is critical. If a public key encrypts data outside of KMS by using an unsupported encryption algorithm, the ciphertext cannot be decrypted.  This field appears in the response only when the KeyUsage of the public key is ENCRYPT_DECRYPT.
        public let encryptionAlgorithms: [EncryptionAlgorithmSpec]?
        /// The Amazon Resource Name (key ARN) of the asymmetric KMS key from which the public key was downloaded.
        public let keyId: String?
        /// The type of the of the public key that was downloaded.
        public let keySpec: KeySpec?
        /// The permitted use of the public key. Valid values are ENCRYPT_DECRYPT or SIGN_VERIFY.  This information is critical. If a public key with SIGN_VERIFY key usage encrypts data outside of KMS, the ciphertext cannot be decrypted.
        public let keyUsage: KeyUsageType?
        /// The exported public key.  The value is a DER-encoded X.509 public key, also known as SubjectPublicKeyInfo (SPKI), as defined in RFC 5280. When you use the HTTP API or the Amazon Web Services CLI, the value is Base64-encoded. Otherwise, it is not Base64-encoded.
        public let publicKey: AWSBase64Data?
        /// The signing algorithms that KMS supports for this key. This field appears in the response only when the KeyUsage of the public key is SIGN_VERIFY.
        public let signingAlgorithms: [SigningAlgorithmSpec]?

        public init(encryptionAlgorithms: [EncryptionAlgorithmSpec]? = nil, keyId: String? = nil, keySpec: KeySpec? = nil, keyUsage: KeyUsageType? = nil, publicKey: AWSBase64Data? = nil, signingAlgorithms: [SigningAlgorithmSpec]? = nil) {
            self.customerMasterKeySpec = nil
            self.encryptionAlgorithms = encryptionAlgorithms
            self.keyId = keyId
            self.keySpec = keySpec
            self.keyUsage = keyUsage
            self.publicKey = publicKey
            self.signingAlgorithms = signingAlgorithms
        }

        @available(*, deprecated, message: "Members customerMasterKeySpec have been deprecated")
        public init(customerMasterKeySpec: CustomerMasterKeySpec? = nil, encryptionAlgorithms: [EncryptionAlgorithmSpec]? = nil, keyId: String? = nil, keySpec: KeySpec? = nil, keyUsage: KeyUsageType? = nil, publicKey: AWSBase64Data? = nil, signingAlgorithms: [SigningAlgorithmSpec]? = nil) {
            self.customerMasterKeySpec = customerMasterKeySpec
            self.encryptionAlgorithms = encryptionAlgorithms
            self.keyId = keyId
            self.keySpec = keySpec
            self.keyUsage = keyUsage
            self.publicKey = publicKey
            self.signingAlgorithms = signingAlgorithms
        }

        private enum CodingKeys: String, CodingKey {
            case customerMasterKeySpec = "CustomerMasterKeySpec"
            case encryptionAlgorithms = "EncryptionAlgorithms"
            case keyId = "KeyId"
            case keySpec = "KeySpec"
            case keyUsage = "KeyUsage"
            case publicKey = "PublicKey"
            case signingAlgorithms = "SigningAlgorithms"
        }
    }

    public struct GrantConstraints: AWSEncodableShape & AWSDecodableShape {
        /// A list of key-value pairs that must match the encryption context in the cryptographic operation request. The grant allows the operation only when the encryption context in the request is the same as the encryption context specified in this constraint.
        public let encryptionContextEquals: [String: String]?
        /// A list of key-value pairs that must be included in the encryption context of the cryptographic operation request. The grant allows the cryptographic operation only when the encryption context in the request includes the key-value pairs specified in this constraint, although it can include additional key-value pairs.
        public let encryptionContextSubset: [String: String]?

        public init(encryptionContextEquals: [String: String]? = nil, encryptionContextSubset: [String: String]? = nil) {
            self.encryptionContextEquals = encryptionContextEquals
            self.encryptionContextSubset = encryptionContextSubset
        }

        private enum CodingKeys: String, CodingKey {
            case encryptionContextEquals = "EncryptionContextEquals"
            case encryptionContextSubset = "EncryptionContextSubset"
        }
    }

    public struct GrantListEntry: AWSDecodableShape {
        /// A list of key-value pairs that must be present in the encryption context of certain subsequent operations that the grant allows.
        public let constraints: GrantConstraints?
        /// The date and time when the grant was created.
        public let creationDate: Date?
        /// The identity that gets the permissions in the grant. The GranteePrincipal field in the ListGrants response usually contains the user or role designated as the grantee principal in the grant. However, when the grantee principal in the grant is an Amazon Web Services service, the GranteePrincipal field contains the service principal, which might represent several different grantee principals.
        public let granteePrincipal: String?
        /// The unique identifier for the grant.
        public let grantId: String?
        /// The Amazon Web Services account under which the grant was issued.
        public let issuingAccount: String?
        /// The unique identifier for the KMS key to which the grant applies.
        public let keyId: String?
        /// The friendly name that identifies the grant. If a name was provided in the CreateGrant request, that name is returned. Otherwise this value is null.
        public let name: String?
        /// The list of operations permitted by the grant.
        public let operations: [GrantOperation]?
        /// The principal that can retire the grant.
        public let retiringPrincipal: String?

        public init(constraints: GrantConstraints? = nil, creationDate: Date? = nil, granteePrincipal: String? = nil, grantId: String? = nil, issuingAccount: String? = nil, keyId: String? = nil, name: String? = nil, operations: [GrantOperation]? = nil, retiringPrincipal: String? = nil) {
            self.constraints = constraints
            self.creationDate = creationDate
            self.granteePrincipal = granteePrincipal
            self.grantId = grantId
            self.issuingAccount = issuingAccount
            self.keyId = keyId
            self.name = name
            self.operations = operations
            self.retiringPrincipal = retiringPrincipal
        }

        private enum CodingKeys: String, CodingKey {
            case constraints = "Constraints"
            case creationDate = "CreationDate"
            case granteePrincipal = "GranteePrincipal"
            case grantId = "GrantId"
            case issuingAccount = "IssuingAccount"
            case keyId = "KeyId"
            case name = "Name"
            case operations = "Operations"
            case retiringPrincipal = "RetiringPrincipal"
        }
    }

    public struct ImportKeyMaterialRequest: AWSEncodableShape {
        /// The encrypted key material to import. The key material must be encrypted under the public wrapping key that GetParametersForImport returned, using the wrapping algorithm that you specified in the same GetParametersForImport request.
        public let encryptedKeyMaterial: AWSBase64Data
        /// Specifies whether the key material expires. The default is KEY_MATERIAL_EXPIRES. For help with this choice, see Setting an expiration time in the Key Management Service Developer Guide. When the value of ExpirationModel is KEY_MATERIAL_EXPIRES, you must specify a value for the ValidTo parameter. When value is KEY_MATERIAL_DOES_NOT_EXPIRE, you must omit the ValidTo parameter. You cannot change the ExpirationModel or ValidTo values for the current import after the request completes. To change either value, you must reimport the key material.
        public let expirationModel: ExpirationModelType?
        /// The import token that you received in the response to a previous GetParametersForImport request. It must be from the same response that contained the public key that you used to encrypt the key material.
        public let importToken: AWSBase64Data
        /// The identifier of the KMS key that will be associated with the imported key material. This must be the same KMS key specified in the KeyID parameter of the corresponding GetParametersForImport request. The Origin of the KMS key must be EXTERNAL and its KeyState must be PendingImport.  The KMS key can be a symmetric encryption KMS key, HMAC KMS key, asymmetric encryption KMS key, or asymmetric signing KMS key, including a multi-Region key of any supported type. You cannot perform this operation on a KMS key in a custom key store, or on a KMS key in a different Amazon Web Services account. Specify the key ID or key ARN of the KMS key. For example:   Key ID: 1234abcd-12ab-34cd-56ef-1234567890ab    Key ARN: arn:aws:kms:us-east-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab    To get the key ID and key ARN for a KMS key, use ListKeys or DescribeKey.
        public let keyId: String
        /// The date and time when the imported key material expires. This parameter is required when the value of the ExpirationModel parameter is KEY_MATERIAL_EXPIRES. Otherwise it is not valid. The value of this parameter must be a future date and time. The maximum value is 365 days from the request date. When the key material expires, KMS deletes the key material from the KMS key. Without its key material, the KMS key is unusable. To use the KMS key in cryptographic operations, you must reimport the same key material. You cannot change the ExpirationModel or ValidTo values for the current import after the request completes. To change either value, you must delete (DeleteImportedKeyMaterial) and reimport the key material.
        public let validTo: Date?

        public init(encryptedKeyMaterial: AWSBase64Data, expirationModel: ExpirationModelType? = nil, importToken: AWSBase64Data, keyId: String, validTo: Date? = nil) {
            self.encryptedKeyMaterial = encryptedKeyMaterial
            self.expirationModel = expirationModel
            self.importToken = importToken
            self.keyId = keyId
            self.validTo = validTo
        }

        public func validate(name: String) throws {
            try self.validate(self.encryptedKeyMaterial, name: "encryptedKeyMaterial", parent: name, max: 6144)
            try self.validate(self.encryptedKeyMaterial, name: "encryptedKeyMaterial", parent: name, min: 1)
            try self.validate(self.importToken, name: "importToken", parent: name, max: 6144)
            try self.validate(self.importToken, name: "importToken", parent: name, min: 1)
            try self.validate(self.keyId, name: "keyId", parent: name, max: 2048)
            try self.validate(self.keyId, name: "keyId", parent: name, min: 1)
        }

        private enum CodingKeys: String, CodingKey {
            case encryptedKeyMaterial = "EncryptedKeyMaterial"
            case expirationModel = "ExpirationModel"
            case importToken = "ImportToken"
            case keyId = "KeyId"
            case validTo = "ValidTo"
        }
    }

    public struct ImportKeyMaterialResponse: AWSDecodableShape {
        public init() {}
    }

    public struct KeyListEntry: AWSDecodableShape {
        /// ARN of the key.
        public let keyArn: String?
        /// Unique identifier of the key.
        public let keyId: String?

        public init(keyArn: String? = nil, keyId: String? = nil) {
            self.keyArn = keyArn
            self.keyId = keyId
        }

        private enum CodingKeys: String, CodingKey {
            case keyArn = "KeyArn"
            case keyId = "KeyId"
        }
    }

    public struct KeyMetadata: AWSDecodableShape {
        /// The Amazon Resource Name (ARN) of the KMS key. For examples, see Key Management Service (KMS) in the Example ARNs section of the Amazon Web Services General Reference.
        public let arn: String?
        /// The twelve-digit account ID of the Amazon Web Services account that owns the KMS key.
        public let awsAccountId: String?
        /// The cluster ID of the CloudHSM cluster that contains the key material for the KMS key. When you create a KMS key in an CloudHSM custom key store, KMS creates the key material for the KMS key in the associated CloudHSM cluster. This field is present only when the KMS key is created in an CloudHSM key store.
        public let cloudHsmClusterId: String?
        /// The date and time when the KMS key was created.
        public let creationDate: Date?
        /// Instead, use the KeySpec field. The KeySpec and CustomerMasterKeySpec fields have the same value. We recommend that you use the KeySpec field in your code. However, to avoid breaking changes, KMS supports both fields.
        public let customerMasterKeySpec: CustomerMasterKeySpec?
        /// A unique identifier for the custom key store that contains the KMS key. This field is present only when the KMS key is created in a custom key store.
        public let customKeyStoreId: String?
        /// The date and time after which KMS deletes this KMS key. This value is present only when the KMS key is scheduled for deletion, that is, when its KeyState is PendingDeletion. When the primary key in a multi-Region key is scheduled for deletion but still has replica keys, its key state is PendingReplicaDeletion and the length of its waiting period is displayed in the PendingDeletionWindowInDays field.
        public let deletionDate: Date?
        /// The description of the KMS key.
        public let description: String?
        /// Specifies whether the KMS key is enabled. When KeyState is Enabled this value is true, otherwise it is false.
        public let enabled: Bool?
        /// The encryption algorithms that the KMS key supports. You cannot use the KMS key with other encryption algorithms within KMS. This value is present only when the KeyUsage of the KMS key is ENCRYPT_DECRYPT.
        public let encryptionAlgorithms: [EncryptionAlgorithmSpec]?
        /// Specifies whether the KMS key's key material expires. This value is present only when Origin is EXTERNAL, otherwise this value is omitted.
        public let expirationModel: ExpirationModelType?
        /// The globally unique identifier for the KMS key.
        public let keyId: String
        /// The manager of the KMS key. KMS keys in your Amazon Web Services account are either customer managed or Amazon Web Services managed. For more information about the difference, see KMS keys in the Key Management Service Developer Guide.
        public let keyManager: KeyManagerType?
        /// Describes the type of key material in the KMS key.
        public let keySpec: KeySpec?
        /// The current status of the KMS key. For more information about how key state affects the use of a KMS key, see Key states of KMS keys in the Key Management Service Developer Guide.
        public let keyState: KeyState?
        /// The cryptographic operations for which you can use the KMS key.
        public let keyUsage: KeyUsageType?
        /// The message authentication code (MAC) algorithm that the HMAC KMS key supports. This value is present only when the KeyUsage of the KMS key is GENERATE_VERIFY_MAC.
        public let macAlgorithms: [MacAlgorithmSpec]?
        /// Indicates whether the KMS key is a multi-Region (True) or regional (False) key. This value is True for multi-Region primary and replica keys and False for regional KMS keys. For more information about multi-Region keys, see Multi-Region keys in KMS in the Key Management Service Developer Guide.
        public let multiRegion: Bool?
        /// Lists the primary and replica keys in same multi-Region key. This field is present only when the value of the MultiRegion field is True. For more information about any listed KMS key, use the DescribeKey operation.    MultiRegionKeyType indicates whether the KMS key is a PRIMARY or REPLICA key.    PrimaryKey displays the key ARN and Region of the primary key. This field displays the current KMS key if it is the primary key.    ReplicaKeys displays the key ARNs and Regions of all replica keys. This field includes the current KMS key if it is a replica key.
        public let multiRegionConfiguration: MultiRegionConfiguration?
        /// The source of the key material for the KMS key. When this value is AWS_KMS, KMS created the key material. When this value is EXTERNAL, the key material was imported or the KMS key doesn't have any key material. When this value is AWS_CLOUDHSM, the key material was created in the CloudHSM cluster associated with a custom key store.
        public let origin: OriginType?
        /// The waiting period before the primary key in a multi-Region key is deleted. This waiting period begins when the last of its replica keys is deleted. This value is present only when the KeyState of the KMS key is PendingReplicaDeletion. That indicates that the KMS key is the primary key in a multi-Region key, it is scheduled for deletion, and it still has existing replica keys. When a single-Region KMS key or a multi-Region replica key is scheduled for deletion, its deletion date is displayed in the DeletionDate field. However, when the primary key in a multi-Region key is scheduled for deletion, its waiting period doesn't begin until all of its replica keys are deleted. This value displays that waiting period. When the last replica key in the multi-Region key is deleted, the KeyState of the scheduled primary key changes from PendingReplicaDeletion to PendingDeletion and the deletion date appears in the DeletionDate field.
        public let pendingDeletionWindowInDays: Int?
        /// The signing algorithms that the KMS key supports. You cannot use the KMS key with other signing algorithms within KMS. This field appears only when the KeyUsage of the KMS key is SIGN_VERIFY.
        public let signingAlgorithms: [SigningAlgorithmSpec]?
        /// The time at which the imported key material expires. When the key material expires, KMS deletes the key material and the KMS key becomes unusable. This value is present only for KMS keys whose Origin is EXTERNAL and whose ExpirationModel is KEY_MATERIAL_EXPIRES, otherwise this value is omitted.
        public let validTo: Date?
        /// Information about the external key that is associated with a KMS key in an external key store. For more information, see External key in the Key Management Service Developer Guide.
        public let xksKeyConfiguration: XksKeyConfigurationType?

        public init(arn: String? = nil, awsAccountId: String? = nil, cloudHsmClusterId: String? = nil, creationDate: Date? = nil, customKeyStoreId: String? = nil, deletionDate: Date? = nil, description: String? = nil, enabled: Bool? = nil, encryptionAlgorithms: [EncryptionAlgorithmSpec]? = nil, expirationModel: ExpirationModelType? = nil, keyId: String, keyManager: KeyManagerType? = nil, keySpec: KeySpec? = nil, keyState: KeyState? = nil, keyUsage: KeyUsageType? = nil, macAlgorithms: [MacAlgorithmSpec]? = nil, multiRegion: Bool? = nil, multiRegionConfiguration: MultiRegionConfiguration? = nil, origin: OriginType? = nil, pendingDeletionWindowInDays: Int? = nil, signingAlgorithms: [SigningAlgorithmSpec]? = nil, validTo: Date? = nil, xksKeyConfiguration: XksKeyConfigurationType? = nil) {
            self.arn = arn
            self.awsAccountId = awsAccountId
            self.cloudHsmClusterId = cloudHsmClusterId
            self.creationDate = creationDate
            self.customerMasterKeySpec = nil
            self.customKeyStoreId = customKeyStoreId
            self.deletionDate = deletionDate
            self.description = description
            self.enabled = enabled
            self.encryptionAlgorithms = encryptionAlgorithms
            self.expirationModel = expirationModel
            self.keyId = keyId
            self.keyManager = keyManager
            self.keySpec = keySpec
            self.keyState = keyState
            self.keyUsage = keyUsage
            self.macAlgorithms = macAlgorithms
            self.multiRegion = multiRegion
            self.multiRegionConfiguration = multiRegionConfiguration
            self.origin = origin
            self.pendingDeletionWindowInDays = pendingDeletionWindowInDays
            self.signingAlgorithms = signingAlgorithms
            self.validTo = validTo
            self.xksKeyConfiguration = xksKeyConfiguration
        }

        @available(*, deprecated, message: "Members customerMasterKeySpec have been deprecated")
        public init(arn: String? = nil, awsAccountId: String? = nil, cloudHsmClusterId: String? = nil, creationDate: Date? = nil, customerMasterKeySpec: CustomerMasterKeySpec? = nil, customKeyStoreId: String? = nil, deletionDate: Date? = nil, description: String? = nil, enabled: Bool? = nil, encryptionAlgorithms: [EncryptionAlgorithmSpec]? = nil, expirationModel: ExpirationModelType? = nil, keyId: String, keyManager: KeyManagerType? = nil, keySpec: KeySpec? = nil, keyState: KeyState? = nil, keyUsage: KeyUsageType? = nil, macAlgorithms: [MacAlgorithmSpec]? = nil, multiRegion: Bool? = nil, multiRegionConfiguration: MultiRegionConfiguration? = nil, origin: OriginType? = nil, pendingDeletionWindowInDays: Int? = nil, signingAlgorithms: [SigningAlgorithmSpec]? = nil, validTo: Date? = nil, xksKeyConfiguration: XksKeyConfigurationType? = nil) {
            self.arn = arn
            self.awsAccountId = awsAccountId
            self.cloudHsmClusterId = cloudHsmClusterId
            self.creationDate = creationDate
            self.customerMasterKeySpec = customerMasterKeySpec
            self.customKeyStoreId = customKeyStoreId
            self.deletionDate = deletionDate
            self.description = description
            self.enabled = enabled
            self.encryptionAlgorithms = encryptionAlgorithms
            self.expirationModel = expirationModel
            self.keyId = keyId
            self.keyManager = keyManager
            self.keySpec = keySpec
            self.keyState = keyState
            self.keyUsage = keyUsage
            self.macAlgorithms = macAlgorithms
            self.multiRegion = multiRegion
            self.multiRegionConfiguration = multiRegionConfiguration
            self.origin = origin
            self.pendingDeletionWindowInDays = pendingDeletionWindowInDays
            self.signingAlgorithms = signingAlgorithms
            self.validTo = validTo
            self.xksKeyConfiguration = xksKeyConfiguration
        }

        private enum CodingKeys: String, CodingKey {
            case arn = "Arn"
            case awsAccountId = "AWSAccountId"
            case cloudHsmClusterId = "CloudHsmClusterId"
            case creationDate = "CreationDate"
            case customerMasterKeySpec = "CustomerMasterKeySpec"
            case customKeyStoreId = "CustomKeyStoreId"
            case deletionDate = "DeletionDate"
            case description = "Description"
            case enabled = "Enabled"
            case encryptionAlgorithms = "EncryptionAlgorithms"
            case expirationModel = "ExpirationModel"
            case keyId = "KeyId"
            case keyManager = "KeyManager"
            case keySpec = "KeySpec"
            case keyState = "KeyState"
            case keyUsage = "KeyUsage"
            case macAlgorithms = "MacAlgorithms"
            case multiRegion = "MultiRegion"
            case multiRegionConfiguration = "MultiRegionConfiguration"
            case origin = "Origin"
            case pendingDeletionWindowInDays = "PendingDeletionWindowInDays"
            case signingAlgorithms = "SigningAlgorithms"
            case validTo = "ValidTo"
            case xksKeyConfiguration = "XksKeyConfiguration"
        }
    }

    public struct ListAliasesRequest: AWSEncodableShape {
        /// Lists only aliases that are associated with the specified KMS key. Enter a KMS key in your Amazon Web Services account.  This parameter is optional. If you omit it, ListAliases returns all aliases in the account and Region. Specify the key ID or key ARN of the KMS key. For example:   Key ID: 1234abcd-12ab-34cd-56ef-1234567890ab    Key ARN: arn:aws:kms:us-east-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab    To get the key ID and key ARN for a KMS key, use ListKeys or DescribeKey.
        public let keyId: String?
        /// Use this parameter to specify the maximum number of items to return. When this value is present, KMS does not return more than the specified number of items, but it might return fewer. This value is optional. If you include a value, it must be between 1 and 100, inclusive. If you do not include a value, it defaults to 50.
        public let limit: Int?
        /// Use this parameter in a subsequent request after you receive a response with truncated results. Set it to the value of NextMarker from the truncated response you just received.
        public let marker: String?

        public init(keyId: String? = nil, limit: Int? = nil, marker: String? = nil) {
            self.keyId = keyId
            self.limit = limit
            self.marker = marker
        }

        public func validate(name: String) throws {
            try self.validate(self.keyId, name: "keyId", parent: name, max: 2048)
            try self.validate(self.keyId, name: "keyId", parent: name, min: 1)
            try self.validate(self.limit, name: "limit", parent: name, max: 1000)
            try self.validate(self.limit, name: "limit", parent: name, min: 1)
            try self.validate(self.marker, name: "marker", parent: name, max: 1024)
            try self.validate(self.marker, name: "marker", parent: name, min: 1)
            try self.validate(self.marker, name: "marker", parent: name, pattern: "^[\\u0020-\\u00FF]*$")
        }

        private enum CodingKeys: String, CodingKey {
            case keyId = "KeyId"
            case limit = "Limit"
            case marker = "Marker"
        }
    }

    public struct ListAliasesResponse: AWSDecodableShape {
        /// A list of aliases.
        public let aliases: [AliasListEntry]?
        /// When Truncated is true, this element is present and contains the value to use for the Marker parameter in a subsequent request.
        public let nextMarker: String?
        /// A flag that indicates whether there are more items in the list. When this value is true, the list in this response is truncated. To get more items, pass the value of the NextMarker element in thisresponse to the Marker parameter in a subsequent request.
        public let truncated: Bool?

        public init(aliases: [AliasListEntry]? = nil, nextMarker: String? = nil, truncated: Bool? = nil) {
            self.aliases = aliases
            self.nextMarker = nextMarker
            self.truncated = truncated
        }

        private enum CodingKeys: String, CodingKey {
            case aliases = "Aliases"
            case nextMarker = "NextMarker"
            case truncated = "Truncated"
        }
    }

    public struct ListGrantsRequest: AWSEncodableShape {
        /// Returns only grants where the specified principal is the grantee principal for the grant.
        public let granteePrincipal: String?
        /// Returns only the grant with the specified grant ID. The grant ID uniquely identifies the grant.
        public let grantId: String?
        /// Returns only grants for the specified KMS key. This parameter is required. Specify the key ID or key ARN of the KMS key. To specify a KMS key in a
        /// different Amazon Web Services account, you must use the key ARN. For example:   Key ID: 1234abcd-12ab-34cd-56ef-1234567890ab    Key ARN: arn:aws:kms:us-east-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab    To get the key ID and key ARN for a KMS key, use ListKeys or DescribeKey.
        public let keyId: String
        /// Use this parameter to specify the maximum number of items to return. When this value is present, KMS does not return more than the specified number of items, but it might return fewer. This value is optional. If you include a value, it must be between 1 and 100, inclusive. If you do not include a value, it defaults to 50.
        public let limit: Int?
        /// Use this parameter in a subsequent request after you receive a response with truncated results. Set it to the value of NextMarker from the truncated response you just received.
        public let marker: String?

        public init(granteePrincipal: String? = nil, grantId: String? = nil, keyId: String, limit: Int? = nil, marker: String? = nil) {
            self.granteePrincipal = granteePrincipal
            self.grantId = grantId
            self.keyId = keyId
            self.limit = limit
            self.marker = marker
        }

        public func validate(name: String) throws {
            try self.validate(self.granteePrincipal, name: "granteePrincipal", parent: name, max: 256)
            try self.validate(self.granteePrincipal, name: "granteePrincipal", parent: name, min: 1)
            try self.validate(self.granteePrincipal, name: "granteePrincipal", parent: name, pattern: "^[\\w+=,.@:/-]+$")
            try self.validate(self.grantId, name: "grantId", parent: name, max: 128)
            try self.validate(self.grantId, name: "grantId", parent: name, min: 1)
            try self.validate(self.keyId, name: "keyId", parent: name, max: 2048)
            try self.validate(self.keyId, name: "keyId", parent: name, min: 1)
            try self.validate(self.limit, name: "limit", parent: name, max: 1000)
            try self.validate(self.limit, name: "limit", parent: name, min: 1)
            try self.validate(self.marker, name: "marker", parent: name, max: 1024)
            try self.validate(self.marker, name: "marker", parent: name, min: 1)
            try self.validate(self.marker, name: "marker", parent: name, pattern: "^[\\u0020-\\u00FF]*$")
        }

        private enum CodingKeys: String, CodingKey {
            case granteePrincipal = "GranteePrincipal"
            case grantId = "GrantId"
            case keyId = "KeyId"
            case limit = "Limit"
            case marker = "Marker"
        }
    }

    public struct ListGrantsResponse: AWSDecodableShape {
        /// A list of grants.
        public let grants: [GrantListEntry]?
        /// When Truncated is true, this element is present and contains the value to use for the Marker parameter in a subsequent request.
        public let nextMarker: String?
        /// A flag that indicates whether there are more items in the list. When this value is true, the list in this response is truncated. To get more items, pass the value of the NextMarker element in thisresponse to the Marker parameter in a subsequent request.
        public let truncated: Bool?

        public init(grants: [GrantListEntry]? = nil, nextMarker: String? = nil, truncated: Bool? = nil) {
            self.grants = grants
            self.nextMarker = nextMarker
            self.truncated = truncated
        }

        private enum CodingKeys: String, CodingKey {
            case grants = "Grants"
            case nextMarker = "NextMarker"
            case truncated = "Truncated"
        }
    }

    public struct ListKeyPoliciesRequest: AWSEncodableShape {
        /// Gets the names of key policies for the specified KMS key. Specify the key ID or key ARN of the KMS key. For example:   Key ID: 1234abcd-12ab-34cd-56ef-1234567890ab    Key ARN: arn:aws:kms:us-east-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab    To get the key ID and key ARN for a KMS key, use ListKeys or DescribeKey.
        public let keyId: String
        /// Use this parameter to specify the maximum number of items to return. When this value is present, KMS does not return more than the specified number of items, but it might return fewer. This value is optional. If you include a value, it must be between 1 and 1000, inclusive. If you do not include a value, it defaults to 100. Only one policy can be attached to a key.
        public let limit: Int?
        /// Use this parameter in a subsequent request after you receive a response with truncated results. Set it to the value of NextMarker from the truncated response you just received.
        public let marker: String?

        public init(keyId: String, limit: Int? = nil, marker: String? = nil) {
            self.keyId = keyId
            self.limit = limit
            self.marker = marker
        }

        public func validate(name: String) throws {
            try self.validate(self.keyId, name: "keyId", parent: name, max: 2048)
            try self.validate(self.keyId, name: "keyId", parent: name, min: 1)
            try self.validate(self.limit, name: "limit", parent: name, max: 1000)
            try self.validate(self.limit, name: "limit", parent: name, min: 1)
            try self.validate(self.marker, name: "marker", parent: name, max: 1024)
            try self.validate(self.marker, name: "marker", parent: name, min: 1)
            try self.validate(self.marker, name: "marker", parent: name, pattern: "^[\\u0020-\\u00FF]*$")
        }

        private enum CodingKeys: String, CodingKey {
            case keyId = "KeyId"
            case limit = "Limit"
            case marker = "Marker"
        }
    }

    public struct ListKeyPoliciesResponse: AWSDecodableShape {
        /// When Truncated is true, this element is present and contains the value to use for the Marker parameter in a subsequent request.
        public let nextMarker: String?
        /// A list of key policy names. The only valid value is default.
        public let policyNames: [String]?
        /// A flag that indicates whether there are more items in the list. When this value is true, the list in this response is truncated. To get more items, pass the value of the NextMarker element in thisresponse to the Marker parameter in a subsequent request.
        public let truncated: Bool?

        public init(nextMarker: String? = nil, policyNames: [String]? = nil, truncated: Bool? = nil) {
            self.nextMarker = nextMarker
            self.policyNames = policyNames
            self.truncated = truncated
        }

        private enum CodingKeys: String, CodingKey {
            case nextMarker = "NextMarker"
            case policyNames = "PolicyNames"
            case truncated = "Truncated"
        }
    }

    public struct ListKeysRequest: AWSEncodableShape {
        /// Use this parameter to specify the maximum number of items to return. When this value is present, KMS does not return more than the specified number of items, but it might return fewer. This value is optional. If you include a value, it must be between 1 and 1000, inclusive. If you do not include a value, it defaults to 100.
        public let limit: Int?
        /// Use this parameter in a subsequent request after you receive a response with truncated results. Set it to the value of NextMarker from the truncated response you just received.
        public let marker: String?

        public init(limit: Int? = nil, marker: String? = nil) {
            self.limit = limit
            self.marker = marker
        }

        public func validate(name: String) throws {
            try self.validate(self.limit, name: "limit", parent: name, max: 1000)
            try self.validate(self.limit, name: "limit", parent: name, min: 1)
            try self.validate(self.marker, name: "marker", parent: name, max: 1024)
            try self.validate(self.marker, name: "marker", parent: name, min: 1)
            try self.validate(self.marker, name: "marker", parent: name, pattern: "^[\\u0020-\\u00FF]*$")
        }

        private enum CodingKeys: String, CodingKey {
            case limit = "Limit"
            case marker = "Marker"
        }
    }

    public struct ListKeysResponse: AWSDecodableShape {
        /// A list of KMS keys.
        public let keys: [KeyListEntry]?
        /// When Truncated is true, this element is present and contains the value to use for the Marker parameter in a subsequent request.
        public let nextMarker: String?
        /// A flag that indicates whether there are more items in the list. When this value is true, the list in this response is truncated. To get more items, pass the value of the NextMarker element in thisresponse to the Marker parameter in a subsequent request.
        public let truncated: Bool?

        public init(keys: [KeyListEntry]? = nil, nextMarker: String? = nil, truncated: Bool? = nil) {
            self.keys = keys
            self.nextMarker = nextMarker
            self.truncated = truncated
        }

        private enum CodingKeys: String, CodingKey {
            case keys = "Keys"
            case nextMarker = "NextMarker"
            case truncated = "Truncated"
        }
    }

    public struct ListResourceTagsRequest: AWSEncodableShape {
        /// Gets tags on the specified KMS key. Specify the key ID or key ARN of the KMS key. For example:   Key ID: 1234abcd-12ab-34cd-56ef-1234567890ab    Key ARN: arn:aws:kms:us-east-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab    To get the key ID and key ARN for a KMS key, use ListKeys or DescribeKey.
        public let keyId: String
        /// Use this parameter to specify the maximum number of items to return. When this value is present, KMS does not return more than the specified number of items, but it might return fewer. This value is optional. If you include a value, it must be between 1 and 50, inclusive. If you do not include a value, it defaults to 50.
        public let limit: Int?
        /// Use this parameter in a subsequent request after you receive a response with truncated results. Set it to the value of NextMarker from the truncated response you just received. Do not attempt to construct this value. Use only the value of NextMarker from the truncated response you just received.
        public let marker: String?

        public init(keyId: String, limit: Int? = nil, marker: String? = nil) {
            self.keyId = keyId
            self.limit = limit
            self.marker = marker
        }

        public func validate(name: String) throws {
            try self.validate(self.keyId, name: "keyId", parent: name, max: 2048)
            try self.validate(self.keyId, name: "keyId", parent: name, min: 1)
            try self.validate(self.limit, name: "limit", parent: name, max: 1000)
            try self.validate(self.limit, name: "limit", parent: name, min: 1)
            try self.validate(self.marker, name: "marker", parent: name, max: 1024)
            try self.validate(self.marker, name: "marker", parent: name, min: 1)
            try self.validate(self.marker, name: "marker", parent: name, pattern: "^[\\u0020-\\u00FF]*$")
        }

        private enum CodingKeys: String, CodingKey {
            case keyId = "KeyId"
            case limit = "Limit"
            case marker = "Marker"
        }
    }

    public struct ListResourceTagsResponse: AWSDecodableShape {
        /// When Truncated is true, this element is present and contains the value to use for the Marker parameter in a subsequent request. Do not assume or infer any information from this value.
        public let nextMarker: String?
        /// A list of tags. Each tag consists of a tag key and a tag value.  Tagging or untagging a KMS key can allow or deny permission to the KMS key. For details, see ABAC for KMS in the Key Management Service Developer Guide.
        public let tags: [Tag]?
        /// A flag that indicates whether there are more items in the list. When this value is true, the list in this response is truncated. To get more items, pass the value of the NextMarker element in thisresponse to the Marker parameter in a subsequent request.
        public let truncated: Bool?

        public init(nextMarker: String? = nil, tags: [Tag]? = nil, truncated: Bool? = nil) {
            self.nextMarker = nextMarker
            self.tags = tags
            self.truncated = truncated
        }

        private enum CodingKeys: String, CodingKey {
            case nextMarker = "NextMarker"
            case tags = "Tags"
            case truncated = "Truncated"
        }
    }

    public struct ListRetirableGrantsRequest: AWSEncodableShape {
        /// Use this parameter to specify the maximum number of items to return. When this value is present, KMS does not return more than the specified number of items, but it might return fewer. This value is optional. If you include a value, it must be between 1 and 100, inclusive. If you do not include a value, it defaults to 50.
        public let limit: Int?
        /// Use this parameter in a subsequent request after you receive a response with truncated results. Set it to the value of NextMarker from the truncated response you just received.
        public let marker: String?
        /// The retiring principal for which to list grants. Enter a principal in your Amazon Web Services account. To specify the retiring principal, use the Amazon Resource Name (ARN) of an Amazon Web Services principal. Valid principals include Amazon Web Services accounts, IAM users, IAM roles, federated users, and assumed role users. For help with the ARN syntax for a principal, see IAM ARNs in the  Identity and Access Management User Guide .
        public let retiringPrincipal: String

        public init(limit: Int? = nil, marker: String? = nil, retiringPrincipal: String) {
            self.limit = limit
            self.marker = marker
            self.retiringPrincipal = retiringPrincipal
        }

        public func validate(name: String) throws {
            try self.validate(self.limit, name: "limit", parent: name, max: 1000)
            try self.validate(self.limit, name: "limit", parent: name, min: 1)
            try self.validate(self.marker, name: "marker", parent: name, max: 1024)
            try self.validate(self.marker, name: "marker", parent: name, min: 1)
            try self.validate(self.marker, name: "marker", parent: name, pattern: "^[\\u0020-\\u00FF]*$")
            try self.validate(self.retiringPrincipal, name: "retiringPrincipal", parent: name, max: 256)
            try self.validate(self.retiringPrincipal, name: "retiringPrincipal", parent: name, min: 1)
            try self.validate(self.retiringPrincipal, name: "retiringPrincipal", parent: name, pattern: "^[\\w+=,.@:/-]+$")
        }

        private enum CodingKeys: String, CodingKey {
            case limit = "Limit"
            case marker = "Marker"
            case retiringPrincipal = "RetiringPrincipal"
        }
    }

    public struct MultiRegionConfiguration: AWSDecodableShape {
        /// Indicates whether the KMS key is a PRIMARY or REPLICA key.
        public let multiRegionKeyType: MultiRegionKeyType?
        /// Displays the key ARN and Region of the primary key. This field includes the current KMS key if it is the primary key.
        public let primaryKey: MultiRegionKey?
        /// displays the key ARNs and Regions of all replica keys. This field includes the current KMS key if it is a replica key.
        public let replicaKeys: [MultiRegionKey]?

        public init(multiRegionKeyType: MultiRegionKeyType? = nil, primaryKey: MultiRegionKey? = nil, replicaKeys: [MultiRegionKey]? = nil) {
            self.multiRegionKeyType = multiRegionKeyType
            self.primaryKey = primaryKey
            self.replicaKeys = replicaKeys
        }

        private enum CodingKeys: String, CodingKey {
            case multiRegionKeyType = "MultiRegionKeyType"
            case primaryKey = "PrimaryKey"
            case replicaKeys = "ReplicaKeys"
        }
    }

    public struct MultiRegionKey: AWSDecodableShape {
        /// Displays the key ARN of a primary or replica key of a multi-Region key.
        public let arn: String?
        /// Displays the Amazon Web Services Region of a primary or replica key in a multi-Region key.
        public let region: String?

        public init(arn: String? = nil, region: String? = nil) {
            self.arn = arn
            self.region = region
        }

        private enum CodingKeys: String, CodingKey {
            case arn = "Arn"
            case region = "Region"
        }
    }

    public struct PutKeyPolicyRequest: AWSEncodableShape {
        /// Skips ("bypasses") the key policy lockout safety check. The default value is false.  Setting this value to true increases the risk that the KMS key becomes unmanageable. Do not set this value to true indiscriminately. For more information, see Default key policy in the Key Management Service Developer Guide.  Use this parameter only when you intend to prevent the principal that is making the request from making a subsequent PutKeyPolicy request on the KMS key.
        public let bypassPolicyLockoutSafetyCheck: Bool?
        /// Sets the key policy on the specified KMS key. Specify the key ID or key ARN of the KMS key. For example:   Key ID: 1234abcd-12ab-34cd-56ef-1234567890ab    Key ARN: arn:aws:kms:us-east-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab    To get the key ID and key ARN for a KMS key, use ListKeys or DescribeKey.
        public let keyId: String
        /// The key policy to attach to the KMS key. The key policy must meet the following criteria:   The key policy must allow the calling principal to make a subsequent PutKeyPolicy request on the KMS key.  This reduces the risk that the KMS key becomes unmanageable. For more information, see Default key policy in the Key Management Service Developer Guide. (To omit this condition, set BypassPolicyLockoutSafetyCheck to true.)   Each statement in the key policy must contain one or more principals. The principals in the key policy must exist and be visible to KMS. When you create a new Amazon Web Services principal, you might need to enforce a delay before including the new principal in a key policy because the new principal might not be immediately visible to KMS. For more information, see Changes that I make are not always immediately visible in the Amazon Web Services Identity and Access Management User Guide.   A key policy document can include only the following characters:   Printable ASCII characters from the space character (\u0020) through the end of the ASCII character range.   Printable characters in the Basic Latin and Latin-1 Supplement character set (through \u00FF).   The tab (\u0009), line feed (\u000A), and carriage return (\u000D) special characters   For information about key policies, see Key policies in KMS in the Key Management Service Developer Guide.For help writing and formatting a JSON policy document, see the IAM JSON Policy Reference in the  Identity and Access Management User Guide .
        public let policy: String
        /// The name of the key policy. If no policy name is specified, the default value is default. The only valid value is default.
        public let policyName: String?

        public init(bypassPolicyLockoutSafetyCheck: Bool? = nil, keyId: String, policy: String, policyName: String? = nil) {
            self.bypassPolicyLockoutSafetyCheck = bypassPolicyLockoutSafetyCheck
            self.keyId = keyId
            self.policy = policy
            self.policyName = policyName
        }

        public func validate(name: String) throws {
            try self.validate(self.keyId, name: "keyId", parent: name, max: 2048)
            try self.validate(self.keyId, name: "keyId", parent: name, min: 1)
            try self.validate(self.policy, name: "policy", parent: name, max: 131072)
            try self.validate(self.policy, name: "policy", parent: name, min: 1)
            try self.validate(self.policy, name: "policy", parent: name, pattern: "^[\\u0009\\u000A\\u000D\\u0020-\\u00FF]+$")
            try self.validate(self.policyName, name: "policyName", parent: name, max: 128)
            try self.validate(self.policyName, name: "policyName", parent: name, min: 1)
            try self.validate(self.policyName, name: "policyName", parent: name, pattern: "^[\\w]+$")
        }

        private enum CodingKeys: String, CodingKey {
            case bypassPolicyLockoutSafetyCheck = "BypassPolicyLockoutSafetyCheck"
            case keyId = "KeyId"
            case policy = "Policy"
            case policyName = "PolicyName"
        }
    }

    public struct ReEncryptRequest: AWSEncodableShape {
        /// Ciphertext of the data to reencrypt.
        public let ciphertextBlob: AWSBase64Data
        /// Specifies the encryption algorithm that KMS will use to reecrypt the data after it has decrypted it. The default value, SYMMETRIC_DEFAULT, represents the encryption algorithm used for symmetric encryption KMS keys. This parameter is required only when the destination KMS key is an asymmetric KMS key.
        public let destinationEncryptionAlgorithm: EncryptionAlgorithmSpec?
        /// Specifies that encryption context to use when the reencrypting the data.  Do not include confidential or sensitive information in this field. This field may be displayed in plaintext in CloudTrail logs and other output.  A destination encryption context is valid only when the destination KMS key is a symmetric encryption KMS key. The standard ciphertext format for asymmetric KMS keys does not include fields for metadata. An encryption context is a collection of non-secret key-value pairs that represent additional authenticated data.
        /// When you use an encryption context to encrypt data, you must specify the same (an exact case-sensitive match) encryption context to decrypt the data. An encryption context is supported
        /// only on operations with symmetric encryption KMS keys. On operations with symmetric encryption KMS keys, an encryption context is optional, but it is strongly recommended. For more information, see
        /// Encryption context in the Key Management Service Developer Guide.
        public let destinationEncryptionContext: [String: String]?
        /// A unique identifier for the KMS key that is used to reencrypt the data. Specify a symmetric encryption KMS key or an asymmetric KMS key with a KeyUsage value of ENCRYPT_DECRYPT. To find the KeyUsage value of a KMS key, use the DescribeKey operation. To specify a KMS key, use its key ID, key ARN, alias name, or alias ARN. When using an alias name, prefix it with "alias/". To specify a KMS key in a different Amazon Web Services account, you must use the key ARN or alias ARN. For example:   Key ID: 1234abcd-12ab-34cd-56ef-1234567890ab    Key ARN: arn:aws:kms:us-east-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab    Alias name: alias/ExampleAlias    Alias ARN: arn:aws:kms:us-east-2:111122223333:alias/ExampleAlias    To get the key ID and key ARN for a KMS key, use ListKeys or DescribeKey. To get the alias name and alias ARN, use ListAliases.
        public let destinationKeyId: String
        /// Checks if your request will succeed. DryRun is an optional parameter.  To learn more about how to use this parameter, see Testing your KMS API calls in the Key Management Service Developer Guide.
        public let dryRun: Bool?
        /// A list of grant tokens. Use a grant token when your permission to call this operation comes from a new grant that has not yet achieved eventual consistency. For more information, see Grant token and Using a grant token in the Key Management Service Developer Guide.
        public let grantTokens: [String]?
        /// Specifies the encryption algorithm that KMS will use to decrypt the ciphertext before it is reencrypted. The default value, SYMMETRIC_DEFAULT, represents the algorithm used for symmetric encryption KMS keys. Specify the same algorithm that was used to encrypt the ciphertext. If you specify a different algorithm, the decrypt attempt fails. This parameter is required only when the ciphertext was encrypted under an asymmetric KMS key.
        public let sourceEncryptionAlgorithm: EncryptionAlgorithmSpec?
        /// Specifies the encryption context to use to decrypt the ciphertext. Enter the same encryption context that was used to encrypt the ciphertext. An encryption context is a collection of non-secret key-value pairs that represent additional authenticated data.
        /// When you use an encryption context to encrypt data, you must specify the same (an exact case-sensitive match) encryption context to decrypt the data. An encryption context is supported
        /// only on operations with symmetric encryption KMS keys. On operations with symmetric encryption KMS keys, an encryption context is optional, but it is strongly recommended. For more information, see
        /// Encryption context in the Key Management Service Developer Guide.
        public let sourceEncryptionContext: [String: String]?
        /// Specifies the KMS key that KMS will use to decrypt the ciphertext before it is re-encrypted. Enter a key ID of the KMS key that was used to encrypt the ciphertext. If you identify a different KMS key, the ReEncrypt operation throws an IncorrectKeyException. This parameter is required only when the ciphertext was encrypted under an asymmetric KMS key. If you used a symmetric encryption KMS key, KMS can get the KMS key from metadata that it adds to the symmetric ciphertext blob. However, it is always recommended as a best practice. This practice ensures that you use the KMS key that you intend. To specify a KMS key, use its key ID, key ARN, alias name, or alias ARN. When using an alias name, prefix it with "alias/". To specify a KMS key in a different Amazon Web Services account, you must use the key ARN or alias ARN. For example:   Key ID: 1234abcd-12ab-34cd-56ef-1234567890ab    Key ARN: arn:aws:kms:us-east-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab    Alias name: alias/ExampleAlias    Alias ARN: arn:aws:kms:us-east-2:111122223333:alias/ExampleAlias    To get the key ID and key ARN for a KMS key, use ListKeys or DescribeKey. To get the alias name and alias ARN, use ListAliases.
        public let sourceKeyId: String?

        public init(ciphertextBlob: AWSBase64Data, destinationEncryptionAlgorithm: EncryptionAlgorithmSpec? = nil, destinationEncryptionContext: [String: String]? = nil, destinationKeyId: String, dryRun: Bool? = nil, grantTokens: [String]? = nil, sourceEncryptionAlgorithm: EncryptionAlgorithmSpec? = nil, sourceEncryptionContext: [String: String]? = nil, sourceKeyId: String? = nil) {
            self.ciphertextBlob = ciphertextBlob
            self.destinationEncryptionAlgorithm = destinationEncryptionAlgorithm
            self.destinationEncryptionContext = destinationEncryptionContext
            self.destinationKeyId = destinationKeyId
            self.dryRun = dryRun
            self.grantTokens = grantTokens
            self.sourceEncryptionAlgorithm = sourceEncryptionAlgorithm
            self.sourceEncryptionContext = sourceEncryptionContext
            self.sourceKeyId = sourceKeyId
        }

        public func validate(name: String) throws {
            try self.validate(self.ciphertextBlob, name: "ciphertextBlob", parent: name, max: 6144)
            try self.validate(self.ciphertextBlob, name: "ciphertextBlob", parent: name, min: 1)
            try self.validate(self.destinationKeyId, name: "destinationKeyId", parent: name, max: 2048)
            try self.validate(self.destinationKeyId, name: "destinationKeyId", parent: name, min: 1)
            try self.grantTokens?.forEach {
                try validate($0, name: "grantTokens[]", parent: name, max: 8192)
                try validate($0, name: "grantTokens[]", parent: name, min: 1)
            }
            try self.validate(self.grantTokens, name: "grantTokens", parent: name, max: 10)
            try self.validate(self.sourceKeyId, name: "sourceKeyId", parent: name, max: 2048)
            try self.validate(self.sourceKeyId, name: "sourceKeyId", parent: name, min: 1)
        }

        private enum CodingKeys: String, CodingKey {
            case ciphertextBlob = "CiphertextBlob"
            case destinationEncryptionAlgorithm = "DestinationEncryptionAlgorithm"
            case destinationEncryptionContext = "DestinationEncryptionContext"
            case destinationKeyId = "DestinationKeyId"
            case dryRun = "DryRun"
            case grantTokens = "GrantTokens"
            case sourceEncryptionAlgorithm = "SourceEncryptionAlgorithm"
            case sourceEncryptionContext = "SourceEncryptionContext"
            case sourceKeyId = "SourceKeyId"
        }
    }

    public struct ReEncryptResponse: AWSDecodableShape {
        /// The reencrypted data. When you use the HTTP API or the Amazon Web Services CLI, the value is Base64-encoded. Otherwise, it is not Base64-encoded.
        public let ciphertextBlob: AWSBase64Data?
        /// The encryption algorithm that was used to reencrypt the data.
        public let destinationEncryptionAlgorithm: EncryptionAlgorithmSpec?
        /// The Amazon Resource Name (key ARN) of the KMS key that was used to reencrypt the data.
        public let keyId: String?
        /// The encryption algorithm that was used to decrypt the ciphertext before it was reencrypted.
        public let sourceEncryptionAlgorithm: EncryptionAlgorithmSpec?
        /// Unique identifier of the KMS key used to originally encrypt the data.
        public let sourceKeyId: String?

        public init(ciphertextBlob: AWSBase64Data? = nil, destinationEncryptionAlgorithm: EncryptionAlgorithmSpec? = nil, keyId: String? = nil, sourceEncryptionAlgorithm: EncryptionAlgorithmSpec? = nil, sourceKeyId: String? = nil) {
            self.ciphertextBlob = ciphertextBlob
            self.destinationEncryptionAlgorithm = destinationEncryptionAlgorithm
            self.keyId = keyId
            self.sourceEncryptionAlgorithm = sourceEncryptionAlgorithm
            self.sourceKeyId = sourceKeyId
        }

        private enum CodingKeys: String, CodingKey {
            case ciphertextBlob = "CiphertextBlob"
            case destinationEncryptionAlgorithm = "DestinationEncryptionAlgorithm"
            case keyId = "KeyId"
            case sourceEncryptionAlgorithm = "SourceEncryptionAlgorithm"
            case sourceKeyId = "SourceKeyId"
        }
    }

    public struct RecipientInfo: AWSEncodableShape {
        /// The attestation document for an Amazon Web Services Nitro Enclave. This document includes the enclave's public key.
        public let attestationDocument: AWSBase64Data?
        /// The encryption algorithm that KMS should use with the public key for an Amazon Web Services Nitro Enclave to encrypt plaintext values for the response. The only valid value is RSAES_OAEP_SHA_256.
        public let keyEncryptionAlgorithm: KeyEncryptionMechanism?

        public init(attestationDocument: AWSBase64Data? = nil, keyEncryptionAlgorithm: KeyEncryptionMechanism? = nil) {
            self.attestationDocument = attestationDocument
            self.keyEncryptionAlgorithm = keyEncryptionAlgorithm
        }

        public func validate(name: String) throws {
            try self.validate(self.attestationDocument, name: "attestationDocument", parent: name, max: 262144)
            try self.validate(self.attestationDocument, name: "attestationDocument", parent: name, min: 1)
        }

        private enum CodingKeys: String, CodingKey {
            case attestationDocument = "AttestationDocument"
            case keyEncryptionAlgorithm = "KeyEncryptionAlgorithm"
        }
    }

    public struct ReplicateKeyRequest: AWSEncodableShape {
        /// Skips ("bypasses") the key policy lockout safety check. The default value is false.  Setting this value to true increases the risk that the KMS key becomes unmanageable. Do not set this value to true indiscriminately. For more information, see Default key policy in the Key Management Service Developer Guide.  Use this parameter only when you intend to prevent the principal that is making the request from making a subsequent PutKeyPolicy request on the KMS key.
        public let bypassPolicyLockoutSafetyCheck: Bool?
        /// A description of the KMS key. The default value is an empty string (no description).  Do not include confidential or sensitive information in this field. This field may be displayed in plaintext in CloudTrail logs and other output.  The description is not a shared property of multi-Region keys. You can specify the same description or a different description for each key in a set of related multi-Region keys. KMS does not synchronize this property.
        public let description: String?
        /// Identifies the multi-Region primary key that is being replicated. To determine whether a KMS key is a multi-Region primary key, use the DescribeKey operation to check the value of the MultiRegionKeyType property. Specify the key ID or key ARN of a multi-Region primary key. For example:   Key ID: mrk-1234abcd12ab34cd56ef1234567890ab    Key ARN: arn:aws:kms:us-east-2:111122223333:key/mrk-1234abcd12ab34cd56ef1234567890ab    To get the key ID and key ARN for a KMS key, use ListKeys or DescribeKey.
        public let keyId: String
        /// The key policy to attach to the KMS key. This parameter is optional. If you do not provide a key policy, KMS attaches the default key policy to the KMS key. The key policy is not a shared property of multi-Region keys. You can specify the same key policy or a different key policy for each key in a set of related multi-Region keys. KMS does not synchronize this property. If you provide a key policy, it must meet the following criteria:   The key policy must allow the calling principal to make a subsequent PutKeyPolicy request on the KMS key.  This reduces the risk that the KMS key becomes unmanageable. For more information, see Default key policy in the Key Management Service Developer Guide. (To omit this condition, set BypassPolicyLockoutSafetyCheck to true.)   Each statement in the key policy must contain one or more principals. The principals in the key policy must exist and be visible to KMS. When you create a new Amazon Web Services principal, you might need to enforce a delay before including the new principal in a key policy because the new principal might not be immediately visible to KMS. For more information, see Changes that I make are not always immediately visible in the Amazon Web Services Identity and Access Management User Guide.   A key policy document can include only the following characters:   Printable ASCII characters from the space character (\u0020) through the end of the ASCII character range.   Printable characters in the Basic Latin and Latin-1 Supplement character set (through \u00FF).   The tab (\u0009), line feed (\u000A), and carriage return (\u000D) special characters   For information about key policies, see Key policies in KMS in the Key Management Service Developer Guide. For help writing and formatting a JSON policy document, see the IAM JSON Policy Reference in the  Identity and Access Management User Guide .
        public let policy: String?
        /// The Region ID of the Amazon Web Services Region for this replica key.  Enter the Region ID, such as us-east-1 or ap-southeast-2. For a list of Amazon Web Services Regions in which KMS is supported, see KMS service endpoints in the Amazon Web Services General Reference.  HMAC KMS keys are not supported in all Amazon Web Services Regions. If you try to replicate an HMAC KMS key in an Amazon Web Services Region in which HMAC keys are not supported, the ReplicateKey operation returns an UnsupportedOperationException. For a list of Regions in which HMAC KMS keys are supported, see HMAC keys in KMS in the Key Management Service Developer Guide.  The replica must be in a different Amazon Web Services Region than its primary key and other replicas of that primary key, but in the same Amazon Web Services partition. KMS must be available in the replica Region. If the Region is not enabled by default, the Amazon Web Services account must be enabled in the Region. For information about Amazon Web Services partitions, see Amazon Resource Names (ARNs) in the Amazon Web Services General Reference. For information about enabling and disabling Regions, see Enabling a Region and Disabling a Region in the Amazon Web Services General Reference.
        public let replicaRegion: String
        /// Assigns one or more tags to the replica key. Use this parameter to tag the KMS key when it is created. To tag an existing KMS key, use the TagResource operation.  Do not include confidential or sensitive information in this field. This field may be displayed in plaintext in CloudTrail logs and other output.   Tagging or untagging a KMS key can allow or deny permission to the KMS key. For details, see ABAC for KMS in the Key Management Service Developer Guide.  To use this parameter, you must have kms:TagResource permission in an IAM policy. Tags are not a shared property of multi-Region keys. You can specify the same tags or different tags for each key in a set of related multi-Region keys. KMS does not synchronize this property. Each tag consists of a tag key and a tag value. Both the tag key and the tag value are required, but the tag value can be an empty (null) string. You cannot have more than one tag on a KMS key with the same tag key. If you specify an existing tag key with a different tag value, KMS replaces the current tag value with the specified one. When you add tags to an Amazon Web Services resource, Amazon Web Services generates a cost allocation report with usage and costs aggregated by tags. Tags can also be used to control access to a KMS key. For details, see Tagging Keys.
        public let tags: [Tag]?

        public init(bypassPolicyLockoutSafetyCheck: Bool? = nil, description: String? = nil, keyId: String, policy: String? = nil, replicaRegion: String, tags: [Tag]? = nil) {
            self.bypassPolicyLockoutSafetyCheck = bypassPolicyLockoutSafetyCheck
            self.description = description
            self.keyId = keyId
            self.policy = policy
            self.replicaRegion = replicaRegion
            self.tags = tags
        }

        public func validate(name: String) throws {
            try self.validate(self.description, name: "description", parent: name, max: 8192)
            try self.validate(self.keyId, name: "keyId", parent: name, max: 2048)
            try self.validate(self.keyId, name: "keyId", parent: name, min: 1)
            try self.validate(self.policy, name: "policy", parent: name, max: 131072)
            try self.validate(self.policy, name: "policy", parent: name, min: 1)
            try self.validate(self.policy, name: "policy", parent: name, pattern: "^[\\u0009\\u000A\\u000D\\u0020-\\u00FF]+$")
            try self.validate(self.replicaRegion, name: "replicaRegion", parent: name, max: 32)
            try self.validate(self.replicaRegion, name: "replicaRegion", parent: name, min: 1)
            try self.validate(self.replicaRegion, name: "replicaRegion", parent: name, pattern: "^([a-z]+-){2,3}\\d+$")
            try self.tags?.forEach {
                try $0.validate(name: "\(name).tags[]")
            }
        }

        private enum CodingKeys: String, CodingKey {
            case bypassPolicyLockoutSafetyCheck = "BypassPolicyLockoutSafetyCheck"
            case description = "Description"
            case keyId = "KeyId"
            case policy = "Policy"
            case replicaRegion = "ReplicaRegion"
            case tags = "Tags"
        }
    }

    public struct ReplicateKeyResponse: AWSDecodableShape {
        /// Displays details about the new replica key, including its Amazon Resource Name (key ARN) and Key states of KMS keys. It also includes the ARN and Amazon Web Services Region of its primary key and other replica keys.
        public let replicaKeyMetadata: KeyMetadata?
        /// The key policy of the new replica key. The value is a key policy document in JSON format.
        public let replicaPolicy: String?
        /// The tags on the new replica key. The value is a list of tag key and tag value pairs.
        public let replicaTags: [Tag]?

        public init(replicaKeyMetadata: KeyMetadata? = nil, replicaPolicy: String? = nil, replicaTags: [Tag]? = nil) {
            self.replicaKeyMetadata = replicaKeyMetadata
            self.replicaPolicy = replicaPolicy
            self.replicaTags = replicaTags
        }

        private enum CodingKeys: String, CodingKey {
            case replicaKeyMetadata = "ReplicaKeyMetadata"
            case replicaPolicy = "ReplicaPolicy"
            case replicaTags = "ReplicaTags"
        }
    }

    public struct RetireGrantRequest: AWSEncodableShape {
        /// Checks if your request will succeed. DryRun is an optional parameter.  To learn more about how to use this parameter, see Testing your KMS API calls in the Key Management Service Developer Guide.
        public let dryRun: Bool?
        /// Identifies the grant to retire. To get the grant ID, use CreateGrant, ListGrants, or ListRetirableGrants.   Grant ID Example - 0123456789012345678901234567890123456789012345678901234567890123
        public let grantId: String?
        /// Identifies the grant to be retired. You can use a grant token to identify a new grant even before it has achieved eventual consistency. Only the CreateGrant operation returns a grant token. For details, see Grant token and Eventual consistency in the Key Management Service Developer Guide.
        public let grantToken: String?
        /// The key ARN KMS key associated with the grant. To find the key ARN, use the ListKeys operation. For example: arn:aws:kms:us-east-2:444455556666:key/1234abcd-12ab-34cd-56ef-1234567890ab
        public let keyId: String?

        public init(dryRun: Bool? = nil, grantId: String? = nil, grantToken: String? = nil, keyId: String? = nil) {
            self.dryRun = dryRun
            self.grantId = grantId
            self.grantToken = grantToken
            self.keyId = keyId
        }

        public func validate(name: String) throws {
            try self.validate(self.grantId, name: "grantId", parent: name, max: 128)
            try self.validate(self.grantId, name: "grantId", parent: name, min: 1)
            try self.validate(self.grantToken, name: "grantToken", parent: name, max: 8192)
            try self.validate(self.grantToken, name: "grantToken", parent: name, min: 1)
            try self.validate(self.keyId, name: "keyId", parent: name, max: 2048)
            try self.validate(self.keyId, name: "keyId", parent: name, min: 1)
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "DryRun"
            case grantId = "GrantId"
            case grantToken = "GrantToken"
            case keyId = "KeyId"
        }
    }

    public struct RevokeGrantRequest: AWSEncodableShape {
        /// Checks if your request will succeed. DryRun is an optional parameter.  To learn more about how to use this parameter, see Testing your KMS API calls in the Key Management Service Developer Guide.
        public let dryRun: Bool?
        /// Identifies the grant to revoke. To get the grant ID, use CreateGrant, ListGrants, or ListRetirableGrants.
        public let grantId: String
        /// A unique identifier for the KMS key associated with the grant. To get the key ID and key ARN for a KMS key, use ListKeys or DescribeKey. Specify the key ID or key ARN of the KMS key. To specify a KMS key in a
        /// different Amazon Web Services account, you must use the key ARN. For example:   Key ID: 1234abcd-12ab-34cd-56ef-1234567890ab    Key ARN: arn:aws:kms:us-east-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab    To get the key ID and key ARN for a KMS key, use ListKeys or DescribeKey.
        public let keyId: String

        public init(dryRun: Bool? = nil, grantId: String, keyId: String) {
            self.dryRun = dryRun
            self.grantId = grantId
            self.keyId = keyId
        }

        public func validate(name: String) throws {
            try self.validate(self.grantId, name: "grantId", parent: name, max: 128)
            try self.validate(self.grantId, name: "grantId", parent: name, min: 1)
            try self.validate(self.keyId, name: "keyId", parent: name, max: 2048)
            try self.validate(self.keyId, name: "keyId", parent: name, min: 1)
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "DryRun"
            case grantId = "GrantId"
            case keyId = "KeyId"
        }
    }

    public struct ScheduleKeyDeletionRequest: AWSEncodableShape {
        /// The unique identifier of the KMS key to delete. Specify the key ID or key ARN of the KMS key. For example:   Key ID: 1234abcd-12ab-34cd-56ef-1234567890ab    Key ARN: arn:aws:kms:us-east-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab    To get the key ID and key ARN for a KMS key, use ListKeys or DescribeKey.
        public let keyId: String
        /// The waiting period, specified in number of days. After the waiting period ends, KMS deletes the KMS key. If the KMS key is a multi-Region primary key with replica keys, the waiting period begins when the last of its replica keys is deleted. Otherwise, the waiting period begins immediately. This value is optional. If you include a value, it must be between 7 and 30, inclusive. If you do not include a value, it defaults to 30. You can use the  kms:ScheduleKeyDeletionPendingWindowInDays condition key to further constrain the values that principals can specify in the PendingWindowInDays parameter.
        public let pendingWindowInDays: Int?

        public init(keyId: String, pendingWindowInDays: Int? = nil) {
            self.keyId = keyId
            self.pendingWindowInDays = pendingWindowInDays
        }

        public func validate(name: String) throws {
            try self.validate(self.keyId, name: "keyId", parent: name, max: 2048)
            try self.validate(self.keyId, name: "keyId", parent: name, min: 1)
            try self.validate(self.pendingWindowInDays, name: "pendingWindowInDays", parent: name, max: 365)
            try self.validate(self.pendingWindowInDays, name: "pendingWindowInDays", parent: name, min: 1)
        }

        private enum CodingKeys: String, CodingKey {
            case keyId = "KeyId"
            case pendingWindowInDays = "PendingWindowInDays"
        }
    }

    public struct ScheduleKeyDeletionResponse: AWSDecodableShape {
        /// The date and time after which KMS deletes the KMS key. If the KMS key is a multi-Region primary key with replica keys, this field does not appear. The deletion date for the primary key isn't known until its last replica key is deleted.
        public let deletionDate: Date?
        /// The Amazon Resource Name (key ARN) of the KMS key whose deletion is scheduled.
        public let keyId: String?
        /// The current status of the KMS key. For more information about how key state affects the use of a KMS key, see Key states of KMS keys in the Key Management Service Developer Guide.
        public let keyState: KeyState?
        /// The waiting period before the KMS key is deleted.  If the KMS key is a multi-Region primary key with replicas, the waiting period begins when the last of its replica keys is deleted. Otherwise, the waiting period begins immediately.
        public let pendingWindowInDays: Int?

        public init(deletionDate: Date? = nil, keyId: String? = nil, keyState: KeyState? = nil, pendingWindowInDays: Int? = nil) {
            self.deletionDate = deletionDate
            self.keyId = keyId
            self.keyState = keyState
            self.pendingWindowInDays = pendingWindowInDays
        }

        private enum CodingKeys: String, CodingKey {
            case deletionDate = "DeletionDate"
            case keyId = "KeyId"
            case keyState = "KeyState"
            case pendingWindowInDays = "PendingWindowInDays"
        }
    }

    public struct SignRequest: AWSEncodableShape {
        /// Checks if your request will succeed. DryRun is an optional parameter.  To learn more about how to use this parameter, see Testing your KMS API calls in the Key Management Service Developer Guide.
        public let dryRun: Bool?
        /// A list of grant tokens. Use a grant token when your permission to call this operation comes from a new grant that has not yet achieved eventual consistency. For more information, see Grant token and Using a grant token in the Key Management Service Developer Guide.
        public let grantTokens: [String]?
        /// Identifies an asymmetric KMS key. KMS uses the private key in the asymmetric KMS key to sign the message. The KeyUsage type of the KMS key must be SIGN_VERIFY. To find the KeyUsage of a KMS key, use the DescribeKey operation. To specify a KMS key, use its key ID, key ARN, alias name, or alias ARN. When using an alias name, prefix it with "alias/". To specify a KMS key in a different Amazon Web Services account, you must use the key ARN or alias ARN. For example:   Key ID: 1234abcd-12ab-34cd-56ef-1234567890ab    Key ARN: arn:aws:kms:us-east-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab    Alias name: alias/ExampleAlias    Alias ARN: arn:aws:kms:us-east-2:111122223333:alias/ExampleAlias    To get the key ID and key ARN for a KMS key, use ListKeys or DescribeKey. To get the alias name and alias ARN, use ListAliases.
        public let keyId: String
        /// Specifies the message or message digest to sign. Messages can be 0-4096 bytes. To sign a larger message, provide a message digest. If you provide a message digest, use the DIGEST value of MessageType to prevent the digest from being hashed again while signing.
        public let message: AWSBase64Data
        /// Tells KMS whether the value of the Message parameter should be hashed as part of the signing algorithm. Use RAW for unhashed messages; use DIGEST for message digests, which are already hashed. When the value of MessageType is RAW, KMS uses the standard signing algorithm, which begins with a hash function. When the value is DIGEST, KMS skips the hashing step in the signing algorithm.  Use the DIGEST value only when the value of the Message parameter is a message digest. If you use the DIGEST value with an unhashed message, the security of the signing operation can be compromised.  When the value of MessageTypeis DIGEST, the length of the Message value must match the length of hashed messages for the specified signing algorithm. You can submit a message digest and omit the MessageType or specify RAW so the digest is hashed again while signing. However, this can cause verification failures when verifying with a system that assumes a single hash. The hashing algorithm in that Sign uses is based on the SigningAlgorithm value.   Signing algorithms that end in SHA_256 use the SHA_256 hashing algorithm.   Signing algorithms that end in SHA_384 use the SHA_384 hashing algorithm.   Signing algorithms that end in SHA_512 use the SHA_512 hashing algorithm.   SM2DSA uses the SM3 hashing algorithm. For details, see Offline verification with SM2 key pairs.
        public let messageType: MessageType?
        /// Specifies the signing algorithm to use when signing the message.  Choose an algorithm that is compatible with the type and size of the specified asymmetric KMS key. When signing with RSA key pairs, RSASSA-PSS algorithms are preferred. We include RSASSA-PKCS1-v1_5 algorithms for compatibility with existing applications.
        public let signingAlgorithm: SigningAlgorithmSpec

        public init(dryRun: Bool? = nil, grantTokens: [String]? = nil, keyId: String, message: AWSBase64Data, messageType: MessageType? = nil, signingAlgorithm: SigningAlgorithmSpec) {
            self.dryRun = dryRun
            self.grantTokens = grantTokens
            self.keyId = keyId
            self.message = message
            self.messageType = messageType
            self.signingAlgorithm = signingAlgorithm
        }

        public func validate(name: String) throws {
            try self.grantTokens?.forEach {
                try validate($0, name: "grantTokens[]", parent: name, max: 8192)
                try validate($0, name: "grantTokens[]", parent: name, min: 1)
            }
            try self.validate(self.grantTokens, name: "grantTokens", parent: name, max: 10)
            try self.validate(self.keyId, name: "keyId", parent: name, max: 2048)
            try self.validate(self.keyId, name: "keyId", parent: name, min: 1)
            try self.validate(self.message, name: "message", parent: name, max: 4096)
            try self.validate(self.message, name: "message", parent: name, min: 1)
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "DryRun"
            case grantTokens = "GrantTokens"
            case keyId = "KeyId"
            case message = "Message"
            case messageType = "MessageType"
            case signingAlgorithm = "SigningAlgorithm"
        }
    }

    public struct SignResponse: AWSDecodableShape {
        /// The Amazon Resource Name (key ARN) of the asymmetric KMS key that was used to sign the message.
        public let keyId: String?
        /// The cryptographic signature that was generated for the message.    When used with the supported RSA signing algorithms, the encoding of this value is defined by PKCS #1 in RFC 8017.   When used with the ECDSA_SHA_256, ECDSA_SHA_384, or ECDSA_SHA_512 signing algorithms, this value is a DER-encoded object as defined by ANSI X9.62–2005 and RFC 3279 Section 2.2.3. This is the most commonly used signature format and is appropriate for most uses.    When you use the HTTP API or the Amazon Web Services CLI, the value is Base64-encoded. Otherwise, it is not Base64-encoded.
        public let signature: AWSBase64Data?
        /// The signing algorithm that was used to sign the message.
        public let signingAlgorithm: SigningAlgorithmSpec?

        public init(keyId: String? = nil, signature: AWSBase64Data? = nil, signingAlgorithm: SigningAlgorithmSpec? = nil) {
            self.keyId = keyId
            self.signature = signature
            self.signingAlgorithm = signingAlgorithm
        }

        private enum CodingKeys: String, CodingKey {
            case keyId = "KeyId"
            case signature = "Signature"
            case signingAlgorithm = "SigningAlgorithm"
        }
    }

    public struct Tag: AWSEncodableShape & AWSDecodableShape {
        /// The key of the tag.
        public let tagKey: String
        /// The value of the tag.
        public let tagValue: String

        public init(tagKey: String, tagValue: String) {
            self.tagKey = tagKey
            self.tagValue = tagValue
        }

        public func validate(name: String) throws {
            try self.validate(self.tagKey, name: "tagKey", parent: name, max: 128)
            try self.validate(self.tagKey, name: "tagKey", parent: name, min: 1)
            try self.validate(self.tagValue, name: "tagValue", parent: name, max: 256)
        }

        private enum CodingKeys: String, CodingKey {
            case tagKey = "TagKey"
            case tagValue = "TagValue"
        }
    }

    public struct TagResourceRequest: AWSEncodableShape {
        /// Identifies a customer managed key in the account and Region. Specify the key ID or key ARN of the KMS key. For example:   Key ID: 1234abcd-12ab-34cd-56ef-1234567890ab    Key ARN: arn:aws:kms:us-east-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab    To get the key ID and key ARN for a KMS key, use ListKeys or DescribeKey.
        public let keyId: String
        /// One or more tags. Each tag consists of a tag key and a tag value. The tag value can be an empty (null) string.   Do not include confidential or sensitive information in this field. This field may be displayed in plaintext in CloudTrail logs and other output.  You cannot have more than one tag on a KMS key with the same tag key. If you specify an existing tag key with a different tag value, KMS replaces the current tag value with the specified one.
        public let tags: [Tag]

        public init(keyId: String, tags: [Tag]) {
            self.keyId = keyId
            self.tags = tags
        }

        public func validate(name: String) throws {
            try self.validate(self.keyId, name: "keyId", parent: name, max: 2048)
            try self.validate(self.keyId, name: "keyId", parent: name, min: 1)
            try self.tags.forEach {
                try $0.validate(name: "\(name).tags[]")
            }
        }

        private enum CodingKeys: String, CodingKey {
            case keyId = "KeyId"
            case tags = "Tags"
        }
    }

    public struct UntagResourceRequest: AWSEncodableShape {
        /// Identifies the KMS key from which you are removing tags. Specify the key ID or key ARN of the KMS key. For example:   Key ID: 1234abcd-12ab-34cd-56ef-1234567890ab    Key ARN: arn:aws:kms:us-east-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab    To get the key ID and key ARN for a KMS key, use ListKeys or DescribeKey.
        public let keyId: String
        /// One or more tag keys. Specify only the tag keys, not the tag values.
        public let tagKeys: [String]

        public init(keyId: String, tagKeys: [String]) {
            self.keyId = keyId
            self.tagKeys = tagKeys
        }

        public func validate(name: String) throws {
            try self.validate(self.keyId, name: "keyId", parent: name, max: 2048)
            try self.validate(self.keyId, name: "keyId", parent: name, min: 1)
            try self.tagKeys.forEach {
                try validate($0, name: "tagKeys[]", parent: name, max: 128)
                try validate($0, name: "tagKeys[]", parent: name, min: 1)
            }
        }

        private enum CodingKeys: String, CodingKey {
            case keyId = "KeyId"
            case tagKeys = "TagKeys"
        }
    }

    public struct UpdateAliasRequest: AWSEncodableShape {
        /// Identifies the alias that is changing its KMS key. This value must begin with alias/ followed by the alias name, such as alias/ExampleAlias. You cannot use UpdateAlias to change the alias name.  Do not include confidential or sensitive information in this field. This field may be displayed in plaintext in CloudTrail logs and other output.
        public let aliasName: String
        /// Identifies the customer managed key to associate with the alias. You don't have permission to associate an alias with an Amazon Web Services managed key. The KMS key must be in the same Amazon Web Services account and Region as the alias. Also, the new target KMS key must be the same type as the current target KMS key (both symmetric or both asymmetric or both HMAC) and they must have the same key usage.  Specify the key ID or key ARN of the KMS key. For example:   Key ID: 1234abcd-12ab-34cd-56ef-1234567890ab    Key ARN: arn:aws:kms:us-east-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab    To get the key ID and key ARN for a KMS key, use ListKeys or DescribeKey. To verify that the alias is mapped to the correct KMS key, use ListAliases.
        public let targetKeyId: String

        public init(aliasName: String, targetKeyId: String) {
            self.aliasName = aliasName
            self.targetKeyId = targetKeyId
        }

        public func validate(name: String) throws {
            try self.validate(self.aliasName, name: "aliasName", parent: name, max: 256)
            try self.validate(self.aliasName, name: "aliasName", parent: name, min: 1)
            try self.validate(self.aliasName, name: "aliasName", parent: name, pattern: "^[a-zA-Z0-9:/_-]+$")
            try self.validate(self.targetKeyId, name: "targetKeyId", parent: name, max: 2048)
            try self.validate(self.targetKeyId, name: "targetKeyId", parent: name, min: 1)
        }

        private enum CodingKeys: String, CodingKey {
            case aliasName = "AliasName"
            case targetKeyId = "TargetKeyId"
        }
    }

    public struct UpdateCustomKeyStoreRequest: AWSEncodableShape {
        /// Associates the custom key store with a related CloudHSM cluster. This parameter is valid only for custom key stores with a CustomKeyStoreType of AWS_CLOUDHSM. Enter the cluster ID of the cluster that you used to create the custom key store or a cluster that shares a backup history and has the same cluster certificate as the original cluster. You cannot use this parameter to associate a custom key store with an unrelated cluster. In addition, the replacement cluster must fulfill the requirements for a cluster associated with a custom key store. To view the cluster certificate of a cluster, use the DescribeClusters operation. To change this value, the CloudHSM key store must be disconnected.
        public let cloudHsmClusterId: String?
        /// Identifies the custom key store that you want to update. Enter the ID of the custom key store. To find the ID of a custom key store, use the DescribeCustomKeyStores operation.
        public let customKeyStoreId: String
        /// Enter the current password of the kmsuser crypto user (CU) in the CloudHSM cluster that is associated with the custom key store. This parameter is valid only for custom key stores with a CustomKeyStoreType of AWS_CLOUDHSM. This parameter tells KMS the current password of the kmsuser crypto user (CU). It does not set or change the password of any users in the CloudHSM cluster. To change this value, the CloudHSM key store must be disconnected.
        public let keyStorePassword: String?
        /// Changes the friendly name of the custom key store to the value that you specify. The custom key store name must be unique in the Amazon Web Services account.  Do not include confidential or sensitive information in this field. This field may be displayed in plaintext in CloudTrail logs and other output.  To change this value, an CloudHSM key store must be disconnected. An external key store can be connected or disconnected.
        public let newCustomKeyStoreName: String?
        /// Changes the credentials that KMS uses to sign requests to the external key store proxy (XKS proxy). This parameter is valid only for custom key stores with a CustomKeyStoreType of EXTERNAL_KEY_STORE. You must specify both the AccessKeyId and SecretAccessKey value in the authentication credential, even if you are only updating one value. This parameter doesn't establish or change your authentication credentials on the proxy. It just tells KMS the credential that you established with your external key store proxy. For example, if you rotate the credential on your external key store proxy, you can use this parameter to update the credential in KMS. You can change this value when the external key store is connected or disconnected.
        public let xksProxyAuthenticationCredential: XksProxyAuthenticationCredentialType?
        /// Changes the connectivity setting for the external key store. To indicate that the external key store proxy uses a Amazon VPC endpoint service to communicate with KMS, specify VPC_ENDPOINT_SERVICE. Otherwise, specify PUBLIC_ENDPOINT. If you change the XksProxyConnectivity to VPC_ENDPOINT_SERVICE, you must also change the XksProxyUriEndpoint and add an XksProxyVpcEndpointServiceName value.  If you change the XksProxyConnectivity to PUBLIC_ENDPOINT, you must also change the XksProxyUriEndpoint and specify a null or empty string for the XksProxyVpcEndpointServiceName value. To change this value, the external key store must be disconnected.
        public let xksProxyConnectivity: XksProxyConnectivityType?
        /// Changes the URI endpoint that KMS uses to connect to your external key store proxy (XKS proxy). This parameter is valid only for custom key stores with a CustomKeyStoreType of EXTERNAL_KEY_STORE. For external key stores with an XksProxyConnectivity value of PUBLIC_ENDPOINT, the protocol must be HTTPS. For external key stores with an XksProxyConnectivity value of VPC_ENDPOINT_SERVICE, specify https:// followed by the private DNS name associated with the VPC endpoint service. Each external key store must use a different private DNS name. The combined XksProxyUriEndpoint and XksProxyUriPath values must be unique in the Amazon Web Services account and Region. To change this value, the external key store must be disconnected.
        public let xksProxyUriEndpoint: String?
        /// Changes the base path to the proxy APIs for this external key store. To find this value, see the documentation for your external key manager and external key store proxy (XKS proxy). This parameter is valid only for custom key stores with a CustomKeyStoreType of EXTERNAL_KEY_STORE. The value must start with / and must end with /kms/xks/v1, where v1 represents the version of the KMS external key store proxy API. You can include an optional prefix between the required elements such as /example/kms/xks/v1. The combined XksProxyUriEndpoint and XksProxyUriPath values must be unique in the Amazon Web Services account and Region. You can change this value when the external key store is connected or disconnected.
        public let xksProxyUriPath: String?
        /// Changes the name that KMS uses to identify the Amazon VPC endpoint service for your external key store proxy (XKS proxy). This parameter is valid when the CustomKeyStoreType is EXTERNAL_KEY_STORE and the XksProxyConnectivity is VPC_ENDPOINT_SERVICE. To change this value, the external key store must be disconnected.
        public let xksProxyVpcEndpointServiceName: String?

        public init(cloudHsmClusterId: String? = nil, customKeyStoreId: String, keyStorePassword: String? = nil, newCustomKeyStoreName: String? = nil, xksProxyAuthenticationCredential: XksProxyAuthenticationCredentialType? = nil, xksProxyConnectivity: XksProxyConnectivityType? = nil, xksProxyUriEndpoint: String? = nil, xksProxyUriPath: String? = nil, xksProxyVpcEndpointServiceName: String? = nil) {
            self.cloudHsmClusterId = cloudHsmClusterId
            self.customKeyStoreId = customKeyStoreId
            self.keyStorePassword = keyStorePassword
            self.newCustomKeyStoreName = newCustomKeyStoreName
            self.xksProxyAuthenticationCredential = xksProxyAuthenticationCredential
            self.xksProxyConnectivity = xksProxyConnectivity
            self.xksProxyUriEndpoint = xksProxyUriEndpoint
            self.xksProxyUriPath = xksProxyUriPath
            self.xksProxyVpcEndpointServiceName = xksProxyVpcEndpointServiceName
        }

        public func validate(name: String) throws {
            try self.validate(self.cloudHsmClusterId, name: "cloudHsmClusterId", parent: name, max: 24)
            try self.validate(self.cloudHsmClusterId, name: "cloudHsmClusterId", parent: name, min: 19)
            try self.validate(self.cloudHsmClusterId, name: "cloudHsmClusterId", parent: name, pattern: "^cluster-[2-7a-zA-Z]{11,16}$")
            try self.validate(self.customKeyStoreId, name: "customKeyStoreId", parent: name, max: 64)
            try self.validate(self.customKeyStoreId, name: "customKeyStoreId", parent: name, min: 1)
            try self.validate(self.keyStorePassword, name: "keyStorePassword", parent: name, max: 32)
            try self.validate(self.keyStorePassword, name: "keyStorePassword", parent: name, min: 7)
            try self.validate(self.newCustomKeyStoreName, name: "newCustomKeyStoreName", parent: name, max: 256)
            try self.validate(self.newCustomKeyStoreName, name: "newCustomKeyStoreName", parent: name, min: 1)
            try self.xksProxyAuthenticationCredential?.validate(name: "\(name).xksProxyAuthenticationCredential")
            try self.validate(self.xksProxyUriEndpoint, name: "xksProxyUriEndpoint", parent: name, max: 128)
            try self.validate(self.xksProxyUriEndpoint, name: "xksProxyUriEndpoint", parent: name, min: 10)
            try self.validate(self.xksProxyUriEndpoint, name: "xksProxyUriEndpoint", parent: name, pattern: "^https://[a-zA-Z0-9.-]+$")
            try self.validate(self.xksProxyUriPath, name: "xksProxyUriPath", parent: name, max: 128)
            try self.validate(self.xksProxyUriPath, name: "xksProxyUriPath", parent: name, min: 10)
            try self.validate(self.xksProxyUriPath, name: "xksProxyUriPath", parent: name, pattern: "^(/[a-zA-Z0-9\\/_-]+/kms/xks/v\\d{1,2})$|^(/kms/xks/v\\d{1,2})$")
            try self.validate(self.xksProxyVpcEndpointServiceName, name: "xksProxyVpcEndpointServiceName", parent: name, max: 64)
            try self.validate(self.xksProxyVpcEndpointServiceName, name: "xksProxyVpcEndpointServiceName", parent: name, min: 20)
            try self.validate(self.xksProxyVpcEndpointServiceName, name: "xksProxyVpcEndpointServiceName", parent: name, pattern: "^com\\.amazonaws\\.vpce\\.([a-z]+-){2,3}\\d+\\.vpce-svc-[0-9a-z]+$")
        }

        private enum CodingKeys: String, CodingKey {
            case cloudHsmClusterId = "CloudHsmClusterId"
            case customKeyStoreId = "CustomKeyStoreId"
            case keyStorePassword = "KeyStorePassword"
            case newCustomKeyStoreName = "NewCustomKeyStoreName"
            case xksProxyAuthenticationCredential = "XksProxyAuthenticationCredential"
            case xksProxyConnectivity = "XksProxyConnectivity"
            case xksProxyUriEndpoint = "XksProxyUriEndpoint"
            case xksProxyUriPath = "XksProxyUriPath"
            case xksProxyVpcEndpointServiceName = "XksProxyVpcEndpointServiceName"
        }
    }

    public struct UpdateCustomKeyStoreResponse: AWSDecodableShape {
        public init() {}
    }

    public struct UpdateKeyDescriptionRequest: AWSEncodableShape {
        /// New description for the KMS key.  Do not include confidential or sensitive information in this field. This field may be displayed in plaintext in CloudTrail logs and other output.
        public let description: String
        /// Updates the description of the specified KMS key. Specify the key ID or key ARN of the KMS key. For example:   Key ID: 1234abcd-12ab-34cd-56ef-1234567890ab    Key ARN: arn:aws:kms:us-east-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab    To get the key ID and key ARN for a KMS key, use ListKeys or DescribeKey.
        public let keyId: String

        public init(description: String, keyId: String) {
            self.description = description
            self.keyId = keyId
        }

        public func validate(name: String) throws {
            try self.validate(self.description, name: "description", parent: name, max: 8192)
            try self.validate(self.keyId, name: "keyId", parent: name, max: 2048)
            try self.validate(self.keyId, name: "keyId", parent: name, min: 1)
        }

        private enum CodingKeys: String, CodingKey {
            case description = "Description"
            case keyId = "KeyId"
        }
    }

    public struct UpdatePrimaryRegionRequest: AWSEncodableShape {
        /// Identifies the current primary key. When the operation completes, this KMS key will be a replica key. Specify the key ID or key ARN of a multi-Region primary key. For example:   Key ID: mrk-1234abcd12ab34cd56ef1234567890ab    Key ARN: arn:aws:kms:us-east-2:111122223333:key/mrk-1234abcd12ab34cd56ef1234567890ab    To get the key ID and key ARN for a KMS key, use ListKeys or DescribeKey.
        public let keyId: String
        /// The Amazon Web Services Region of the new primary key. Enter the Region ID, such as us-east-1 or ap-southeast-2. There must be an existing replica key in this Region.  When the operation completes, the multi-Region key in this Region will be the primary key.
        public let primaryRegion: String

        public init(keyId: String, primaryRegion: String) {
            self.keyId = keyId
            self.primaryRegion = primaryRegion
        }

        public func validate(name: String) throws {
            try self.validate(self.keyId, name: "keyId", parent: name, max: 2048)
            try self.validate(self.keyId, name: "keyId", parent: name, min: 1)
            try self.validate(self.primaryRegion, name: "primaryRegion", parent: name, max: 32)
            try self.validate(self.primaryRegion, name: "primaryRegion", parent: name, min: 1)
            try self.validate(self.primaryRegion, name: "primaryRegion", parent: name, pattern: "^([a-z]+-){2,3}\\d+$")
        }

        private enum CodingKeys: String, CodingKey {
            case keyId = "KeyId"
            case primaryRegion = "PrimaryRegion"
        }
    }

    public struct VerifyMacRequest: AWSEncodableShape {
        /// Checks if your request will succeed. DryRun is an optional parameter.  To learn more about how to use this parameter, see Testing your KMS API calls in the Key Management Service Developer Guide.
        public let dryRun: Bool?
        /// A list of grant tokens. Use a grant token when your permission to call this operation comes from a new grant that has not yet achieved eventual consistency. For more information, see Grant token and Using a grant token in the Key Management Service Developer Guide.
        public let grantTokens: [String]?
        /// The KMS key that will be used in the verification. Enter a key ID of the KMS key that was used to generate the HMAC. If you identify a different KMS key, the VerifyMac operation fails.
        public let keyId: String
        /// The HMAC to verify. Enter the HMAC that was generated by the GenerateMac operation when you specified the same message, HMAC KMS key, and MAC algorithm as the values specified in this request.
        public let mac: AWSBase64Data
        /// The MAC algorithm that will be used in the verification. Enter the same MAC algorithm that was used to compute the HMAC. This algorithm must be supported by the HMAC KMS key identified by the KeyId parameter.
        public let macAlgorithm: MacAlgorithmSpec
        /// The message that will be used in the verification. Enter the same message that was used to generate the HMAC.  GenerateMac and VerifyMac do not provide special handling for message digests. If you generated an HMAC for a hash digest of a message, you must verify the HMAC for the same hash digest.
        public let message: AWSBase64Data

        public init(dryRun: Bool? = nil, grantTokens: [String]? = nil, keyId: String, mac: AWSBase64Data, macAlgorithm: MacAlgorithmSpec, message: AWSBase64Data) {
            self.dryRun = dryRun
            self.grantTokens = grantTokens
            self.keyId = keyId
            self.mac = mac
            self.macAlgorithm = macAlgorithm
            self.message = message
        }

        public func validate(name: String) throws {
            try self.grantTokens?.forEach {
                try validate($0, name: "grantTokens[]", parent: name, max: 8192)
                try validate($0, name: "grantTokens[]", parent: name, min: 1)
            }
            try self.validate(self.grantTokens, name: "grantTokens", parent: name, max: 10)
            try self.validate(self.keyId, name: "keyId", parent: name, max: 2048)
            try self.validate(self.keyId, name: "keyId", parent: name, min: 1)
            try self.validate(self.mac, name: "mac", parent: name, max: 6144)
            try self.validate(self.mac, name: "mac", parent: name, min: 1)
            try self.validate(self.message, name: "message", parent: name, max: 4096)
            try self.validate(self.message, name: "message", parent: name, min: 1)
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "DryRun"
            case grantTokens = "GrantTokens"
            case keyId = "KeyId"
            case mac = "Mac"
            case macAlgorithm = "MacAlgorithm"
            case message = "Message"
        }
    }

    public struct VerifyMacResponse: AWSDecodableShape {
        /// The HMAC KMS key used in the verification.
        public let keyId: String?
        /// The MAC algorithm used in the verification.
        public let macAlgorithm: MacAlgorithmSpec?
        /// A Boolean value that indicates whether the HMAC was verified. A value of True indicates that the HMAC (Mac) was generated with the specified Message, HMAC KMS key (KeyID) and MacAlgorithm.. If the HMAC is not verified, the VerifyMac operation fails with a KMSInvalidMacException exception. This exception indicates that one or more of the inputs changed since the HMAC was computed.
        public let macValid: Bool?

        public init(keyId: String? = nil, macAlgorithm: MacAlgorithmSpec? = nil, macValid: Bool? = nil) {
            self.keyId = keyId
            self.macAlgorithm = macAlgorithm
            self.macValid = macValid
        }

        private enum CodingKeys: String, CodingKey {
            case keyId = "KeyId"
            case macAlgorithm = "MacAlgorithm"
            case macValid = "MacValid"
        }
    }

    public struct VerifyRequest: AWSEncodableShape {
        /// Checks if your request will succeed. DryRun is an optional parameter.  To learn more about how to use this parameter, see Testing your KMS API calls in the Key Management Service Developer Guide.
        public let dryRun: Bool?
        /// A list of grant tokens. Use a grant token when your permission to call this operation comes from a new grant that has not yet achieved eventual consistency. For more information, see Grant token and Using a grant token in the Key Management Service Developer Guide.
        public let grantTokens: [String]?
        /// Identifies the asymmetric KMS key that will be used to verify the signature. This must be the same KMS key that was used to generate the signature. If you specify a different KMS key, the signature verification fails. To specify a KMS key, use its key ID, key ARN, alias name, or alias ARN. When using an alias name, prefix it with "alias/". To specify a KMS key in a different Amazon Web Services account, you must use the key ARN or alias ARN. For example:   Key ID: 1234abcd-12ab-34cd-56ef-1234567890ab    Key ARN: arn:aws:kms:us-east-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab    Alias name: alias/ExampleAlias    Alias ARN: arn:aws:kms:us-east-2:111122223333:alias/ExampleAlias    To get the key ID and key ARN for a KMS key, use ListKeys or DescribeKey. To get the alias name and alias ARN, use ListAliases.
        public let keyId: String
        /// Specifies the message that was signed. You can submit a raw message of up to 4096 bytes, or a hash digest of the message. If you submit a digest, use the MessageType parameter with a value of DIGEST. If the message specified here is different from the message that was signed, the signature verification fails. A message and its hash digest are considered to be the same message.
        public let message: AWSBase64Data
        /// Tells KMS whether the value of the Message parameter should be hashed as part of the signing algorithm. Use RAW for unhashed messages; use DIGEST for message digests, which are already hashed. When the value of MessageType is RAW, KMS uses the standard signing algorithm, which begins with a hash function. When the value is DIGEST, KMS skips the hashing step in the signing algorithm.  Use the DIGEST value only when the value of the Message parameter is a message digest. If you use the DIGEST value with an unhashed message, the security of the verification operation can be compromised.  When the value of MessageTypeis DIGEST, the length of the Message value must match the length of hashed messages for the specified signing algorithm. You can submit a message digest and omit the MessageType or specify RAW so the digest is hashed again while signing. However, if the signed message is hashed once while signing, but twice while verifying, verification fails, even when the message hasn't changed. The hashing algorithm in that Verify uses is based on the SigningAlgorithm value.   Signing algorithms that end in SHA_256 use the SHA_256 hashing algorithm.   Signing algorithms that end in SHA_384 use the SHA_384 hashing algorithm.   Signing algorithms that end in SHA_512 use the SHA_512 hashing algorithm.   SM2DSA uses the SM3 hashing algorithm. For details, see Offline verification with SM2 key pairs.
        public let messageType: MessageType?
        /// The signature that the Sign operation generated.
        public let signature: AWSBase64Data
        /// The signing algorithm that was used to sign the message. If you submit a different algorithm, the signature verification fails.
        public let signingAlgorithm: SigningAlgorithmSpec

        public init(dryRun: Bool? = nil, grantTokens: [String]? = nil, keyId: String, message: AWSBase64Data, messageType: MessageType? = nil, signature: AWSBase64Data, signingAlgorithm: SigningAlgorithmSpec) {
            self.dryRun = dryRun
            self.grantTokens = grantTokens
            self.keyId = keyId
            self.message = message
            self.messageType = messageType
            self.signature = signature
            self.signingAlgorithm = signingAlgorithm
        }

        public func validate(name: String) throws {
            try self.grantTokens?.forEach {
                try validate($0, name: "grantTokens[]", parent: name, max: 8192)
                try validate($0, name: "grantTokens[]", parent: name, min: 1)
            }
            try self.validate(self.grantTokens, name: "grantTokens", parent: name, max: 10)
            try self.validate(self.keyId, name: "keyId", parent: name, max: 2048)
            try self.validate(self.keyId, name: "keyId", parent: name, min: 1)
            try self.validate(self.message, name: "message", parent: name, max: 4096)
            try self.validate(self.message, name: "message", parent: name, min: 1)
            try self.validate(self.signature, name: "signature", parent: name, max: 6144)
            try self.validate(self.signature, name: "signature", parent: name, min: 1)
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "DryRun"
            case grantTokens = "GrantTokens"
            case keyId = "KeyId"
            case message = "Message"
            case messageType = "MessageType"
            case signature = "Signature"
            case signingAlgorithm = "SigningAlgorithm"
        }
    }

    public struct VerifyResponse: AWSDecodableShape {
        /// The Amazon Resource Name (key ARN) of the asymmetric KMS key that was used to verify the signature.
        public let keyId: String?
        /// A Boolean value that indicates whether the signature was verified. A value of True indicates that the Signature was produced by signing the Message with the specified KeyID and SigningAlgorithm. If the signature is not verified, the Verify operation fails with a KMSInvalidSignatureException exception.
        public let signatureValid: Bool?
        /// The signing algorithm that was used to verify the signature.
        public let signingAlgorithm: SigningAlgorithmSpec?

        public init(keyId: String? = nil, signatureValid: Bool? = nil, signingAlgorithm: SigningAlgorithmSpec? = nil) {
            self.keyId = keyId
            self.signatureValid = signatureValid
            self.signingAlgorithm = signingAlgorithm
        }

        private enum CodingKeys: String, CodingKey {
            case keyId = "KeyId"
            case signatureValid = "SignatureValid"
            case signingAlgorithm = "SigningAlgorithm"
        }
    }

    public struct XksKeyConfigurationType: AWSDecodableShape {
        /// The ID of the external key in its external key manager. This is the ID that the external key store proxy uses to identify the external key.
        public let id: String?

        public init(id: String? = nil) {
            self.id = id
        }

        private enum CodingKeys: String, CodingKey {
            case id = "Id"
        }
    }

    public struct XksProxyAuthenticationCredentialType: AWSEncodableShape {
        /// A unique identifier for the raw secret access key.
        public let accessKeyId: String
        /// A secret string of 43-64 characters. Valid characters are a-z, A-Z, 0-9, /, +, and =.
        public let rawSecretAccessKey: String

        public init(accessKeyId: String, rawSecretAccessKey: String) {
            self.accessKeyId = accessKeyId
            self.rawSecretAccessKey = rawSecretAccessKey
        }

        public func validate(name: String) throws {
            try self.validate(self.accessKeyId, name: "accessKeyId", parent: name, max: 30)
            try self.validate(self.accessKeyId, name: "accessKeyId", parent: name, min: 20)
            try self.validate(self.accessKeyId, name: "accessKeyId", parent: name, pattern: "^[A-Z2-7]+$")
            try self.validate(self.rawSecretAccessKey, name: "rawSecretAccessKey", parent: name, max: 64)
            try self.validate(self.rawSecretAccessKey, name: "rawSecretAccessKey", parent: name, min: 43)
            try self.validate(self.rawSecretAccessKey, name: "rawSecretAccessKey", parent: name, pattern: "^[a-zA-Z0-9\\/+=]+$")
        }

        private enum CodingKeys: String, CodingKey {
            case accessKeyId = "AccessKeyId"
            case rawSecretAccessKey = "RawSecretAccessKey"
        }
    }

    public struct XksProxyConfigurationType: AWSDecodableShape {
        /// The part of the external key store proxy authentication credential that uniquely identifies the secret access key.
        public let accessKeyId: String?
        /// Indicates whether the external key store proxy uses a public endpoint or an Amazon VPC endpoint service to communicate with KMS.
        public let connectivity: XksProxyConnectivityType?
        /// The URI endpoint for the external key store proxy. If the external key store proxy has a public endpoint, it is displayed here. If the external key store proxy uses an Amazon VPC endpoint service name, this field displays the private DNS name associated with the VPC endpoint service.
        public let uriEndpoint: String?
        /// The path to the external key store proxy APIs.
        public let uriPath: String?
        /// The Amazon VPC endpoint service used to communicate with the external key store proxy. This field appears only when the external key store proxy uses an Amazon VPC endpoint service to communicate with KMS.
        public let vpcEndpointServiceName: String?

        public init(accessKeyId: String? = nil, connectivity: XksProxyConnectivityType? = nil, uriEndpoint: String? = nil, uriPath: String? = nil, vpcEndpointServiceName: String? = nil) {
            self.accessKeyId = accessKeyId
            self.connectivity = connectivity
            self.uriEndpoint = uriEndpoint
            self.uriPath = uriPath
            self.vpcEndpointServiceName = vpcEndpointServiceName
        }

        private enum CodingKeys: String, CodingKey {
            case accessKeyId = "AccessKeyId"
            case connectivity = "Connectivity"
            case uriEndpoint = "UriEndpoint"
            case uriPath = "UriPath"
            case vpcEndpointServiceName = "VpcEndpointServiceName"
        }
    }
}

// MARK: - Errors

/// Error enum for KMS
public struct KMSErrorType: AWSErrorType {
    enum Code: String {
        case alreadyExistsException = "AlreadyExistsException"
        case cloudHsmClusterInUseException = "CloudHsmClusterInUseException"
        case cloudHsmClusterInvalidConfigurationException = "CloudHsmClusterInvalidConfigurationException"
        case cloudHsmClusterNotActiveException = "CloudHsmClusterNotActiveException"
        case cloudHsmClusterNotFoundException = "CloudHsmClusterNotFoundException"
        case cloudHsmClusterNotRelatedException = "CloudHsmClusterNotRelatedException"
        case customKeyStoreHasCMKsException = "CustomKeyStoreHasCMKsException"
        case customKeyStoreInvalidStateException = "CustomKeyStoreInvalidStateException"
        case customKeyStoreNameInUseException = "CustomKeyStoreNameInUseException"
        case customKeyStoreNotFoundException = "CustomKeyStoreNotFoundException"
        case dependencyTimeoutException = "DependencyTimeoutException"
        case disabledException = "DisabledException"
        case dryRunOperationException = "DryRunOperationException"
        case expiredImportTokenException = "ExpiredImportTokenException"
        case incorrectKeyException = "IncorrectKeyException"
        case incorrectKeyMaterialException = "IncorrectKeyMaterialException"
        case incorrectTrustAnchorException = "IncorrectTrustAnchorException"
        case invalidAliasNameException = "InvalidAliasNameException"
        case invalidArnException = "InvalidArnException"
        case invalidCiphertextException = "InvalidCiphertextException"
        case invalidGrantIdException = "InvalidGrantIdException"
        case invalidGrantTokenException = "InvalidGrantTokenException"
        case invalidImportTokenException = "InvalidImportTokenException"
        case invalidKeyUsageException = "InvalidKeyUsageException"
        case invalidMarkerException = "InvalidMarkerException"
        case keyUnavailableException = "KeyUnavailableException"
        case kmsInternalException = "KMSInternalException"
        case kmsInvalidMacException = "KMSInvalidMacException"
        case kmsInvalidSignatureException = "KMSInvalidSignatureException"
        case kmsInvalidStateException = "KMSInvalidStateException"
        case limitExceededException = "LimitExceededException"
        case malformedPolicyDocumentException = "MalformedPolicyDocumentException"
        case notFoundException = "NotFoundException"
        case tagException = "TagException"
        case unsupportedOperationException = "UnsupportedOperationException"
        case xksKeyAlreadyInUseException = "XksKeyAlreadyInUseException"
        case xksKeyInvalidConfigurationException = "XksKeyInvalidConfigurationException"
        case xksKeyNotFoundException = "XksKeyNotFoundException"
        case xksProxyIncorrectAuthenticationCredentialException = "XksProxyIncorrectAuthenticationCredentialException"
        case xksProxyInvalidConfigurationException = "XksProxyInvalidConfigurationException"
        case xksProxyInvalidResponseException = "XksProxyInvalidResponseException"
        case xksProxyUriEndpointInUseException = "XksProxyUriEndpointInUseException"
        case xksProxyUriInUseException = "XksProxyUriInUseException"
        case xksProxyUriUnreachableException = "XksProxyUriUnreachableException"
        case xksProxyVpcEndpointServiceInUseException = "XksProxyVpcEndpointServiceInUseException"
        case xksProxyVpcEndpointServiceInvalidConfigurationException = "XksProxyVpcEndpointServiceInvalidConfigurationException"
        case xksProxyVpcEndpointServiceNotFoundException = "XksProxyVpcEndpointServiceNotFoundException"
    }

    private let error: Code
    public let context: AWSErrorContext?

    /// initialize KMS
    public init?(errorCode: String, context: AWSErrorContext) {
        guard let error = Code(rawValue: errorCode) else { return nil }
        self.error = error
        self.context = context
    }

    internal init(_ error: Code) {
        self.error = error
        self.context = nil
    }

    /// return error code string
    public var errorCode: String { self.error.rawValue }

    /// The request was rejected because it attempted to create a resource that already exists.
    public static var alreadyExistsException: Self { .init(.alreadyExistsException) }
    /// The request was rejected because the specified CloudHSM cluster is already associated with an CloudHSM key store in the account, or it shares a backup history with an CloudHSM key store in the account. Each CloudHSM key store in the account must be associated with a different CloudHSM cluster. CloudHSM clusters that share a backup history have the same cluster certificate. To view the cluster certificate of an CloudHSM cluster, use the DescribeClusters operation.
    public static var cloudHsmClusterInUseException: Self { .init(.cloudHsmClusterInUseException) }
    /// The request was rejected because the associated CloudHSM cluster did not meet the configuration requirements for an CloudHSM key store.   The CloudHSM cluster must be configured with private subnets in at least two different Availability Zones in the Region.   The security group for the cluster (cloudhsm-cluster--sg) must include inbound rules and outbound rules that allow TCP traffic on ports 2223-2225. The Source in the inbound rules and the Destination in the outbound rules must match the security group ID. These rules are set by default when you create the CloudHSM cluster. Do not delete or change them. To get information about a particular security group, use the DescribeSecurityGroups operation.   The CloudHSM cluster must contain at least as many HSMs as the operation requires. To add HSMs, use the CloudHSM CreateHsm operation. For the CreateCustomKeyStore, UpdateCustomKeyStore, and CreateKey operations, the CloudHSM cluster must have at least two active HSMs, each in a different Availability Zone. For the ConnectCustomKeyStore operation, the CloudHSM must contain at least one active HSM.   For information about the requirements for an CloudHSM cluster that is associated with an CloudHSM key store, see Assemble the Prerequisites in the Key Management Service Developer Guide. For information about creating a private subnet for an CloudHSM cluster, see Create a Private Subnet in the CloudHSM User Guide. For information about cluster security groups, see Configure a Default Security Group in the  CloudHSM User Guide .
    public static var cloudHsmClusterInvalidConfigurationException: Self { .init(.cloudHsmClusterInvalidConfigurationException) }
    /// The request was rejected because the CloudHSM cluster associated with the CloudHSM key store is not active. Initialize and activate the cluster and try the command again. For detailed instructions, see Getting Started in the CloudHSM User Guide.
    public static var cloudHsmClusterNotActiveException: Self { .init(.cloudHsmClusterNotActiveException) }
    /// The request was rejected because KMS cannot find the CloudHSM cluster with the specified cluster ID. Retry the request with a different cluster ID.
    public static var cloudHsmClusterNotFoundException: Self { .init(.cloudHsmClusterNotFoundException) }
    /// The request was rejected because the specified CloudHSM cluster has a different cluster certificate than the original cluster. You cannot use the operation to specify an unrelated cluster for an CloudHSM key store. Specify an CloudHSM cluster that shares a backup history with the original cluster. This includes clusters that were created from a backup of the current cluster, and clusters that were created from the same backup that produced the current cluster. CloudHSM clusters that share a backup history have the same cluster certificate. To view the cluster certificate of an CloudHSM cluster, use the DescribeClusters operation.
    public static var cloudHsmClusterNotRelatedException: Self { .init(.cloudHsmClusterNotRelatedException) }
    /// The request was rejected because the custom key store contains KMS keys. After verifying that you do not need to use the KMS keys, use the ScheduleKeyDeletion operation to delete the KMS keys. After they are deleted, you can delete the custom key store.
    public static var customKeyStoreHasCMKsException: Self { .init(.customKeyStoreHasCMKsException) }
    /// The request was rejected because of the ConnectionState of the custom key store. To get the ConnectionState of a custom key store, use the DescribeCustomKeyStores operation. This exception is thrown under the following conditions:   You requested the ConnectCustomKeyStore operation on a custom key store with a ConnectionState of DISCONNECTING or FAILED. This operation is valid for all other ConnectionState values. To reconnect a custom key store in a FAILED state, disconnect it (DisconnectCustomKeyStore), then connect it (ConnectCustomKeyStore).   You requested the CreateKey operation in a custom key store that is not connected. This operations is valid only when the custom key store ConnectionState is CONNECTED.   You requested the DisconnectCustomKeyStore operation on a custom key store with a ConnectionState of DISCONNECTING or DISCONNECTED. This operation is valid for all other ConnectionState values.   You requested the UpdateCustomKeyStore or DeleteCustomKeyStore operation on a custom key store that is not disconnected. This operation is valid only when the custom key store ConnectionState is DISCONNECTED.   You requested the GenerateRandom operation in an CloudHSM key store that is not connected. This operation is valid only when the CloudHSM key store ConnectionState is CONNECTED.
    public static var customKeyStoreInvalidStateException: Self { .init(.customKeyStoreInvalidStateException) }
    /// The request was rejected because the specified custom key store name is already assigned to another custom key store in the account. Try again with a custom key store name that is unique in the account.
    public static var customKeyStoreNameInUseException: Self { .init(.customKeyStoreNameInUseException) }
    /// The request was rejected because KMS cannot find a custom key store with the specified key store name or ID.
    public static var customKeyStoreNotFoundException: Self { .init(.customKeyStoreNotFoundException) }
    /// The system timed out while trying to fulfill the request. You can retry the request.
    public static var dependencyTimeoutException: Self { .init(.dependencyTimeoutException) }
    /// The request was rejected because the specified KMS key is not enabled.
    public static var disabledException: Self { .init(.disabledException) }
    ///  The request was rejected because the DryRun parameter was specified.
    public static var dryRunOperationException: Self { .init(.dryRunOperationException) }
    /// The request was rejected because the specified import token is expired. Use GetParametersForImport to get a new import token and public key, use the new public key to encrypt the key material, and then try the request again.
    public static var expiredImportTokenException: Self { .init(.expiredImportTokenException) }
    /// The request was rejected because the specified KMS key cannot decrypt the data. The KeyId in a Decrypt request and the SourceKeyId in a ReEncrypt request must identify the same KMS key that was used to encrypt the ciphertext.
    public static var incorrectKeyException: Self { .init(.incorrectKeyException) }
    /// The request was rejected because the key material in the request is, expired, invalid, or is not the same key material that was previously imported into this KMS key.
    public static var incorrectKeyMaterialException: Self { .init(.incorrectKeyMaterialException) }
    /// The request was rejected because the trust anchor certificate in the request to create an CloudHSM key store is not the trust anchor certificate for the specified CloudHSM cluster. When you initialize the CloudHSM cluster, you create the trust anchor certificate and save it in the customerCA.crt file.
    public static var incorrectTrustAnchorException: Self { .init(.incorrectTrustAnchorException) }
    /// The request was rejected because the specified alias name is not valid.
    public static var invalidAliasNameException: Self { .init(.invalidAliasNameException) }
    /// The request was rejected because a specified ARN, or an ARN in a key policy, is not valid.
    public static var invalidArnException: Self { .init(.invalidArnException) }
    /// From the Decrypt or ReEncrypt operation, the request was rejected because the specified ciphertext, or additional authenticated data incorporated into the ciphertext, such as the encryption context, is corrupted, missing, or otherwise invalid. From the ImportKeyMaterial operation, the request was rejected because KMS could not decrypt the encrypted (wrapped) key material.
    public static var invalidCiphertextException: Self { .init(.invalidCiphertextException) }
    /// The request was rejected because the specified GrantId is not valid.
    public static var invalidGrantIdException: Self { .init(.invalidGrantIdException) }
    /// The request was rejected because the specified grant token is not valid.
    public static var invalidGrantTokenException: Self { .init(.invalidGrantTokenException) }
    /// The request was rejected because the provided import token is invalid or is associated with a different KMS key.
    public static var invalidImportTokenException: Self { .init(.invalidImportTokenException) }
    /// The request was rejected for one of the following reasons:    The KeyUsage value of the KMS key is incompatible with the API operation.   The encryption algorithm or signing algorithm specified for the operation is incompatible with the type of key material in the KMS key (KeySpec).   For encrypting, decrypting, re-encrypting, and generating data keys, the KeyUsage must be ENCRYPT_DECRYPT. For signing and verifying messages, the KeyUsage must be SIGN_VERIFY. For generating and verifying message authentication codes (MACs), the KeyUsage must be GENERATE_VERIFY_MAC. To find the KeyUsage of a KMS key, use the DescribeKey operation. To find the encryption or signing algorithms supported for a particular KMS key, use the DescribeKey operation.
    public static var invalidKeyUsageException: Self { .init(.invalidKeyUsageException) }
    /// The request was rejected because the marker that specifies where pagination should next begin is not valid.
    public static var invalidMarkerException: Self { .init(.invalidMarkerException) }
    /// The request was rejected because the specified KMS key was not available. You can retry the request.
    public static var keyUnavailableException: Self { .init(.keyUnavailableException) }
    /// The request was rejected because an internal exception occurred. The request can be retried.
    public static var kmsInternalException: Self { .init(.kmsInternalException) }
    /// The request was rejected because the HMAC verification failed. HMAC verification fails when the HMAC computed by using the specified message, HMAC KMS key, and MAC algorithm does not match the HMAC specified in the request.
    public static var kmsInvalidMacException: Self { .init(.kmsInvalidMacException) }
    /// The request was rejected because the signature verification failed. Signature verification fails when it cannot confirm that signature was produced by signing the specified message with the specified KMS key and signing algorithm.
    public static var kmsInvalidSignatureException: Self { .init(.kmsInvalidSignatureException) }
    /// The request was rejected because the state of the specified resource is not valid for this request. This exceptions means one of the following:   The key state of the KMS key is not compatible with the operation.  To find the key state, use the DescribeKey operation. For more information about which key states are compatible with each KMS operation, see Key states of KMS keys in the  Key Management Service Developer Guide .   For cryptographic operations on KMS keys in custom key stores, this exception represents a general failure with many possible causes. To identify the cause, see the error message that accompanies the exception.
    public static var kmsInvalidStateException: Self { .init(.kmsInvalidStateException) }
    /// The request was rejected because a quota was exceeded. For more information, see Quotas in the Key Management Service Developer Guide.
    public static var limitExceededException: Self { .init(.limitExceededException) }
    /// The request was rejected because the specified policy is not syntactically or semantically correct.
    public static var malformedPolicyDocumentException: Self { .init(.malformedPolicyDocumentException) }
    /// The request was rejected because the specified entity or resource could not be found.
    public static var notFoundException: Self { .init(.notFoundException) }
    /// The request was rejected because one or more tags are not valid.
    public static var tagException: Self { .init(.tagException) }
    /// The request was rejected because a specified parameter is not supported or a specified resource is not valid for this operation.
    public static var unsupportedOperationException: Self { .init(.unsupportedOperationException) }
    /// The request was rejected because the (XksKeyId) is already associated with another KMS key in this external key store. Each KMS key in an external key store must be associated with a different external key.
    public static var xksKeyAlreadyInUseException: Self { .init(.xksKeyAlreadyInUseException) }
    /// The request was rejected because the external key specified by the XksKeyId parameter did not meet the configuration requirements for an external key store. The external key must be an AES-256 symmetric key that is enabled and performs encryption and decryption.
    public static var xksKeyInvalidConfigurationException: Self { .init(.xksKeyInvalidConfigurationException) }
    /// The request was rejected because the external key store proxy could not find the external key. This exception is thrown when the value of the XksKeyId parameter doesn't identify a key in the external key manager associated with the external key proxy. Verify that the XksKeyId represents an existing key in the external key manager. Use the key identifier that the external key store proxy uses to identify the key. For details, see the documentation provided with your external key store proxy or key manager.
    public static var xksKeyNotFoundException: Self { .init(.xksKeyNotFoundException) }
    /// The request was rejected because the proxy credentials failed to authenticate to the specified external key store proxy. The specified external key store proxy rejected a status request from KMS due to invalid credentials. This can indicate an error in the credentials or in the identification of the external key store proxy.
    public static var xksProxyIncorrectAuthenticationCredentialException: Self { .init(.xksProxyIncorrectAuthenticationCredentialException) }
    /// The request was rejected because the external key store proxy is not configured correctly. To identify the cause, see the error message that accompanies the exception.
    public static var xksProxyInvalidConfigurationException: Self { .init(.xksProxyInvalidConfigurationException) }
    ///  KMS cannot interpret the response it received from the external key store proxy. The problem might be a poorly constructed response, but it could also be a transient network issue. If you see this error repeatedly, report it to the proxy vendor.
    public static var xksProxyInvalidResponseException: Self { .init(.xksProxyInvalidResponseException) }
    /// The request was rejected because the XksProxyUriEndpoint is already associated with another external key store in this Amazon Web Services Region. To identify the cause, see the error message that accompanies the exception.
    public static var xksProxyUriEndpointInUseException: Self { .init(.xksProxyUriEndpointInUseException) }
    /// The request was rejected because the concatenation of the XksProxyUriEndpoint and XksProxyUriPath is already associated with another external key store in this Amazon Web Services Region. Each external key store in a Region must use a unique external key store proxy API address.
    public static var xksProxyUriInUseException: Self { .init(.xksProxyUriInUseException) }
    /// KMS was unable to reach the specified XksProxyUriPath. The path must be reachable before you create the external key store or update its settings. This exception is also thrown when the external key store proxy response to a GetHealthStatus request indicates that all external key manager instances are unavailable.
    public static var xksProxyUriUnreachableException: Self { .init(.xksProxyUriUnreachableException) }
    /// The request was rejected because the specified Amazon VPC endpoint service is already associated with another external key store in this Amazon Web Services Region. Each external key store in a Region must use a different Amazon VPC endpoint service.
    public static var xksProxyVpcEndpointServiceInUseException: Self { .init(.xksProxyVpcEndpointServiceInUseException) }
    /// The request was rejected because the Amazon VPC endpoint service configuration does not fulfill the requirements for an external key store. To identify the cause, see the error message that accompanies the exception and review the requirements for Amazon VPC endpoint service connectivity for an external key store.
    public static var xksProxyVpcEndpointServiceInvalidConfigurationException: Self { .init(.xksProxyVpcEndpointServiceInvalidConfigurationException) }
    /// The request was rejected because KMS could not find the specified VPC endpoint service. Use DescribeCustomKeyStores to verify the VPC endpoint service name for the external key store. Also, confirm that the Allow principals list for the VPC endpoint service includes the KMS service principal for the Region, such as cks.kms.us-east-1.amazonaws.com.
    public static var xksProxyVpcEndpointServiceNotFoundException: Self { .init(.xksProxyVpcEndpointServiceNotFoundException) }
}

extension KMSErrorType: Equatable {
    public static func == (lhs: KMSErrorType, rhs: KMSErrorType) -> Bool {
        lhs.error == rhs.error
    }
}

extension KMSErrorType: CustomStringConvertible {
    public var description: String {
        return "\(self.error.rawValue): \(self.message ?? "")"
    }
}
