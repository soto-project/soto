//===----------------------------------------------------------------------===//
//
// This source file is part of the Soto for AWS open source project
//
// Copyright (c) 2017-2024 the Soto project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
// See CONTRIBUTORS.txt for the list of Soto project authors
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by https://github.com/soto-project/soto-codegenerator.
// DO NOT EDIT.

#if os(Linux) && compiler(<5.10)
// swift-corelibs-foundation hasn't been updated with Sendable conformances
@preconcurrency import Foundation
#else
import Foundation
#endif
@_exported import SotoCore

/// Service object for interacting with AWS Athena service.
///
/// Amazon Athena is an interactive query service that lets you use standard SQL to analyze data directly in Amazon S3. You can point Athena at your data in Amazon S3 and run ad-hoc queries and get results in seconds. Athena is serverless, so there is no infrastructure to set up or manage. You pay only for the queries you run. Athena scales automatically—executing queries in parallel—so results are fast, even with large datasets and complex queries. For more information, see What is Amazon Athena in the Amazon Athena User Guide. If you connect to Athena using the JDBC driver, use version 1.1.0 of the driver or later with the Amazon Athena API. Earlier version drivers do not support the API. For more information and to download the driver, see Accessing Amazon Athena with JDBC.
public struct Athena: AWSService {
    // MARK: Member variables

    /// Client used for communication with AWS
    public let client: AWSClient
    /// Service configuration
    public let config: AWSServiceConfig

    // MARK: Initialization

    /// Initialize the Athena client
    /// - parameters:
    ///     - client: AWSClient used to process requests
    ///     - region: Region of server you want to communicate with. This will override the partition parameter.
    ///     - partition: AWS partition where service resides, standard (.aws), china (.awscn), government (.awsusgov).
    ///     - endpoint: Custom endpoint URL to use instead of standard AWS servers
    ///     - middleware: Middleware chain used to edit requests before they are sent and responses before they are decoded 
    ///     - timeout: Timeout value for HTTP requests
    ///     - byteBufferAllocator: Allocator for ByteBuffers
    ///     - options: Service options
    public init(
        client: AWSClient,
        region: SotoCore.Region? = nil,
        partition: AWSPartition = .aws,
        endpoint: String? = nil,
        middleware: AWSMiddlewareProtocol? = nil,
        timeout: TimeAmount? = nil,
        byteBufferAllocator: ByteBufferAllocator = ByteBufferAllocator(),
        options: AWSServiceConfig.Options = []
    ) {
        self.client = client
        self.config = AWSServiceConfig(
            region: region,
            partition: region?.partition ?? partition,
            amzTarget: "AmazonAthena",
            serviceName: "Athena",
            serviceIdentifier: "athena",
            serviceProtocol: .json(version: "1.1"),
            apiVersion: "2017-05-18",
            endpoint: endpoint,
            variantEndpoints: Self.variantEndpoints,
            errorType: AthenaErrorType.self,
            middleware: middleware,
            timeout: timeout,
            byteBufferAllocator: byteBufferAllocator,
            options: options
        )
    }




    /// FIPS and dualstack endpoints
    static var variantEndpoints: [EndpointVariantType: AWSServiceConfig.EndpointVariant] {[
        [.dualstack]: .init(endpoints: [
            "af-south-1": "athena.af-south-1.api.aws",
            "ap-east-1": "athena.ap-east-1.api.aws",
            "ap-northeast-1": "athena.ap-northeast-1.api.aws",
            "ap-northeast-2": "athena.ap-northeast-2.api.aws",
            "ap-northeast-3": "athena.ap-northeast-3.api.aws",
            "ap-south-1": "athena.ap-south-1.api.aws",
            "ap-south-2": "athena.ap-south-2.api.aws",
            "ap-southeast-1": "athena.ap-southeast-1.api.aws",
            "ap-southeast-2": "athena.ap-southeast-2.api.aws",
            "ap-southeast-3": "athena.ap-southeast-3.api.aws",
            "ap-southeast-4": "athena.ap-southeast-4.api.aws",
            "ca-central-1": "athena.ca-central-1.api.aws",
            "ca-west-1": "athena.ca-west-1.api.aws",
            "cn-north-1": "athena.cn-north-1.api.amazonwebservices.com.cn",
            "cn-northwest-1": "athena.cn-northwest-1.api.amazonwebservices.com.cn",
            "eu-central-1": "athena.eu-central-1.api.aws",
            "eu-central-2": "athena.eu-central-2.api.aws",
            "eu-north-1": "athena.eu-north-1.api.aws",
            "eu-south-1": "athena.eu-south-1.api.aws",
            "eu-south-2": "athena.eu-south-2.api.aws",
            "eu-west-1": "athena.eu-west-1.api.aws",
            "eu-west-2": "athena.eu-west-2.api.aws",
            "eu-west-3": "athena.eu-west-3.api.aws",
            "il-central-1": "athena.il-central-1.api.aws",
            "me-central-1": "athena.me-central-1.api.aws",
            "me-south-1": "athena.me-south-1.api.aws",
            "sa-east-1": "athena.sa-east-1.api.aws",
            "us-east-1": "athena.us-east-1.api.aws",
            "us-east-2": "athena.us-east-2.api.aws",
            "us-gov-east-1": "athena.us-gov-east-1.api.aws",
            "us-gov-west-1": "athena.us-gov-west-1.api.aws",
            "us-west-1": "athena.us-west-1.api.aws",
            "us-west-2": "athena.us-west-2.api.aws"
        ]),
        [.dualstack, .fips]: .init(endpoints: [
            "ca-central-1": "athena-fips.ca-central-1.api.aws",
            "ca-west-1": "athena-fips.ca-west-1.api.aws",
            "us-east-1": "athena-fips.us-east-1.api.aws",
            "us-east-2": "athena-fips.us-east-2.api.aws",
            "us-gov-east-1": "athena-fips.us-gov-east-1.api.aws",
            "us-gov-west-1": "athena-fips.us-gov-west-1.api.aws",
            "us-west-1": "athena-fips.us-west-1.api.aws",
            "us-west-2": "athena-fips.us-west-2.api.aws"
        ]),
        [.fips]: .init(endpoints: [
            "ca-central-1": "athena-fips.ca-central-1.amazonaws.com",
            "ca-west-1": "athena-fips.ca-west-1.amazonaws.com",
            "us-east-1": "athena-fips.us-east-1.amazonaws.com",
            "us-east-2": "athena-fips.us-east-2.amazonaws.com",
            "us-gov-east-1": "athena-fips.us-gov-east-1.amazonaws.com",
            "us-gov-west-1": "athena-fips.us-gov-west-1.amazonaws.com",
            "us-west-1": "athena-fips.us-west-1.amazonaws.com",
            "us-west-2": "athena-fips.us-west-2.amazonaws.com"
        ])
    ]}

    // MARK: API Calls

    /// Returns the details of a single named query or a list of up to 50 queries, which you provide as an array of query ID strings. Requires you to have access to the workgroup in which the queries were saved. Use ListNamedQueriesInput to get the list of named query IDs in the specified workgroup. If information could not be retrieved for a submitted query ID, information about the query ID submitted is listed under UnprocessedNamedQueryId. Named queries differ from executed queries. Use BatchGetQueryExecutionInput to get details about each unique query execution, and ListQueryExecutionsInput to get a list of query execution IDs.
    @Sendable
    @inlinable
    public func batchGetNamedQuery(_ input: BatchGetNamedQueryInput, logger: Logger = AWSClient.loggingDisabled) async throws -> BatchGetNamedQueryOutput {
        try await self.client.execute(
            operation: "BatchGetNamedQuery", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Returns the details of a single named query or a list of up to 50 queries, which you provide as an array of query ID strings. Requires you to have access to the workgroup in which the queries were saved. Use ListNamedQueriesInput to get the list of named query IDs in the specified workgroup. If information could not be retrieved for a submitted query ID, information about the query ID submitted is listed under UnprocessedNamedQueryId. Named queries differ from executed queries. Use BatchGetQueryExecutionInput to get details about each unique query execution, and ListQueryExecutionsInput to get a list of query execution IDs.
    ///
    /// Parameters:
    ///   - namedQueryIds: An array of query IDs.
    ///   - logger: Logger use during operation
    @inlinable
    public func batchGetNamedQuery(
        namedQueryIds: [String],
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> BatchGetNamedQueryOutput {
        let input = BatchGetNamedQueryInput(
            namedQueryIds: namedQueryIds
        )
        return try await self.batchGetNamedQuery(input, logger: logger)
    }

    /// Returns the details of a single prepared statement or a list of up to 256 prepared statements for the array of prepared statement names that you provide. Requires you to have access to the workgroup to which the prepared statements belong. If a prepared statement cannot be retrieved for the name specified, the statement is listed in UnprocessedPreparedStatementNames.
    @Sendable
    @inlinable
    public func batchGetPreparedStatement(_ input: BatchGetPreparedStatementInput, logger: Logger = AWSClient.loggingDisabled) async throws -> BatchGetPreparedStatementOutput {
        try await self.client.execute(
            operation: "BatchGetPreparedStatement", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Returns the details of a single prepared statement or a list of up to 256 prepared statements for the array of prepared statement names that you provide. Requires you to have access to the workgroup to which the prepared statements belong. If a prepared statement cannot be retrieved for the name specified, the statement is listed in UnprocessedPreparedStatementNames.
    ///
    /// Parameters:
    ///   - preparedStatementNames: A list of prepared statement names to return.
    ///   - workGroup: The name of the workgroup to which the prepared statements belong.
    ///   - logger: Logger use during operation
    @inlinable
    public func batchGetPreparedStatement(
        preparedStatementNames: [String],
        workGroup: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> BatchGetPreparedStatementOutput {
        let input = BatchGetPreparedStatementInput(
            preparedStatementNames: preparedStatementNames, 
            workGroup: workGroup
        )
        return try await self.batchGetPreparedStatement(input, logger: logger)
    }

    /// Returns the details of a single query execution or a list of up to 50 query executions, which you provide as an array of query execution ID strings. Requires you to have access to the workgroup in which the queries ran. To get a list of query execution IDs, use ListQueryExecutionsInput$WorkGroup. Query executions differ from named (saved) queries. Use BatchGetNamedQueryInput to get details about named queries.
    @Sendable
    @inlinable
    public func batchGetQueryExecution(_ input: BatchGetQueryExecutionInput, logger: Logger = AWSClient.loggingDisabled) async throws -> BatchGetQueryExecutionOutput {
        try await self.client.execute(
            operation: "BatchGetQueryExecution", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Returns the details of a single query execution or a list of up to 50 query executions, which you provide as an array of query execution ID strings. Requires you to have access to the workgroup in which the queries ran. To get a list of query execution IDs, use ListQueryExecutionsInput$WorkGroup. Query executions differ from named (saved) queries. Use BatchGetNamedQueryInput to get details about named queries.
    ///
    /// Parameters:
    ///   - queryExecutionIds: An array of query execution IDs.
    ///   - logger: Logger use during operation
    @inlinable
    public func batchGetQueryExecution(
        queryExecutionIds: [String],
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> BatchGetQueryExecutionOutput {
        let input = BatchGetQueryExecutionInput(
            queryExecutionIds: queryExecutionIds
        )
        return try await self.batchGetQueryExecution(input, logger: logger)
    }

    /// Cancels the capacity reservation with the specified name. Cancelled reservations remain in your account and will be deleted 45 days after cancellation. During the 45 days, you cannot re-purpose or reuse a reservation that has been cancelled, but you can refer to its tags and view it for historical reference.
    @Sendable
    @inlinable
    public func cancelCapacityReservation(_ input: CancelCapacityReservationInput, logger: Logger = AWSClient.loggingDisabled) async throws -> CancelCapacityReservationOutput {
        try await self.client.execute(
            operation: "CancelCapacityReservation", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Cancels the capacity reservation with the specified name. Cancelled reservations remain in your account and will be deleted 45 days after cancellation. During the 45 days, you cannot re-purpose or reuse a reservation that has been cancelled, but you can refer to its tags and view it for historical reference.
    ///
    /// Parameters:
    ///   - name: The name of the capacity reservation to cancel.
    ///   - logger: Logger use during operation
    @inlinable
    public func cancelCapacityReservation(
        name: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> CancelCapacityReservationOutput {
        let input = CancelCapacityReservationInput(
            name: name
        )
        return try await self.cancelCapacityReservation(input, logger: logger)
    }

    /// Creates a capacity reservation with the specified name and number of requested data processing units.
    @Sendable
    @inlinable
    public func createCapacityReservation(_ input: CreateCapacityReservationInput, logger: Logger = AWSClient.loggingDisabled) async throws -> CreateCapacityReservationOutput {
        try await self.client.execute(
            operation: "CreateCapacityReservation", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Creates a capacity reservation with the specified name and number of requested data processing units.
    ///
    /// Parameters:
    ///   - name: The name of the capacity reservation to create.
    ///   - tags: The tags for the capacity reservation.
    ///   - targetDpus: The number of requested data processing units.
    ///   - logger: Logger use during operation
    @inlinable
    public func createCapacityReservation(
        name: String,
        tags: [Tag]? = nil,
        targetDpus: Int,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> CreateCapacityReservationOutput {
        let input = CreateCapacityReservationInput(
            name: name, 
            tags: tags, 
            targetDpus: targetDpus
        )
        return try await self.createCapacityReservation(input, logger: logger)
    }

    /// Creates (registers) a data catalog with the specified name and properties. Catalogs created are visible to all users of the same Amazon Web Services account.
    @Sendable
    @inlinable
    public func createDataCatalog(_ input: CreateDataCatalogInput, logger: Logger = AWSClient.loggingDisabled) async throws -> CreateDataCatalogOutput {
        try await self.client.execute(
            operation: "CreateDataCatalog", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Creates (registers) a data catalog with the specified name and properties. Catalogs created are visible to all users of the same Amazon Web Services account.
    ///
    /// Parameters:
    ///   - description: A description of the data catalog to be created.
    ///   - name: The name of the data catalog to create. The catalog name must be unique for the Amazon Web Services account and can use a maximum of 127 alphanumeric, underscore, at sign, or hyphen characters. The remainder of the length constraint of 256 is reserved for use by Athena.
    ///   - parameters: Specifies the Lambda function or functions to use for creating the data catalog. This is a mapping whose values depend on the catalog type.    For the HIVE data catalog type, use the following syntax. The metadata-function parameter is required. The sdk-version parameter is optional and defaults to the currently supported version.  metadata-function=lambda_arn, sdk-version=version_number     For the LAMBDA data catalog type, use one of the following sets of required parameters, but not both.   If you have one Lambda function that processes metadata and another for reading the actual data, use the following syntax. Both parameters are required.  metadata-function=lambda_arn, record-function=lambda_arn     If you have a composite Lambda function that processes both metadata and data, use the following syntax to specify your Lambda function.  function=lambda_arn       The GLUE type takes a catalog ID parameter and is required. The  catalog_id is the account ID of the Amazon Web Services account to which the Glue Data Catalog belongs.  catalog-id=catalog_id     The GLUE data catalog type also applies to the default AwsDataCatalog that already exists in your account, of which you can have only one and cannot modify.
    ///   - tags: A list of comma separated tags to add to the data catalog that is created.
    ///   - type: The type of data catalog to create: LAMBDA for a federated catalog, HIVE for an external hive metastore, or GLUE for an Glue Data Catalog.
    ///   - logger: Logger use during operation
    @inlinable
    public func createDataCatalog(
        description: String? = nil,
        name: String,
        parameters: [String: String]? = nil,
        tags: [Tag]? = nil,
        type: DataCatalogType,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> CreateDataCatalogOutput {
        let input = CreateDataCatalogInput(
            description: description, 
            name: name, 
            parameters: parameters, 
            tags: tags, 
            type: type
        )
        return try await self.createDataCatalog(input, logger: logger)
    }

    /// Creates a named query in the specified workgroup. Requires that you have access to the workgroup.
    @Sendable
    @inlinable
    public func createNamedQuery(_ input: CreateNamedQueryInput, logger: Logger = AWSClient.loggingDisabled) async throws -> CreateNamedQueryOutput {
        try await self.client.execute(
            operation: "CreateNamedQuery", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Creates a named query in the specified workgroup. Requires that you have access to the workgroup.
    ///
    /// Parameters:
    ///   - clientRequestToken: A unique case-sensitive string used to ensure the request to create the query is idempotent (executes only once). If another CreateNamedQuery request is received, the same response is returned and another query is not created. If a parameter has changed, for example, the QueryString, an error is returned.  This token is listed as not required because Amazon Web Services SDKs (for example the Amazon Web Services SDK for Java) auto-generate the token for users. If you are not using the Amazon Web Services SDK or the Amazon Web Services CLI, you must provide this token or the action will fail.
    ///   - database: The database to which the query belongs.
    ///   - description: The query description.
    ///   - name: The query name.
    ///   - queryString: The contents of the query with all query statements.
    ///   - workGroup: The name of the workgroup in which the named query is being created.
    ///   - logger: Logger use during operation
    @inlinable
    public func createNamedQuery(
        clientRequestToken: String? = CreateNamedQueryInput.idempotencyToken(),
        database: String,
        description: String? = nil,
        name: String,
        queryString: String,
        workGroup: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> CreateNamedQueryOutput {
        let input = CreateNamedQueryInput(
            clientRequestToken: clientRequestToken, 
            database: database, 
            description: description, 
            name: name, 
            queryString: queryString, 
            workGroup: workGroup
        )
        return try await self.createNamedQuery(input, logger: logger)
    }

    /// Creates an empty ipynb file in the specified Apache Spark enabled workgroup. Throws an error if a file in the workgroup with the same name already exists.
    @Sendable
    @inlinable
    public func createNotebook(_ input: CreateNotebookInput, logger: Logger = AWSClient.loggingDisabled) async throws -> CreateNotebookOutput {
        try await self.client.execute(
            operation: "CreateNotebook", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Creates an empty ipynb file in the specified Apache Spark enabled workgroup. Throws an error if a file in the workgroup with the same name already exists.
    ///
    /// Parameters:
    ///   - clientRequestToken: A unique case-sensitive string used to ensure the request to create the notebook is idempotent (executes only once).  This token is listed as not required because Amazon Web Services SDKs (for example the Amazon Web Services SDK for Java) auto-generate the token for you. If you are not using the Amazon Web Services SDK or the Amazon Web Services CLI, you must provide this token or the action will fail.
    ///   - name: The name of the ipynb file to be created in the Spark workgroup, without the .ipynb extension.
    ///   - workGroup: The name of the Spark enabled workgroup in which the notebook will be created.
    ///   - logger: Logger use during operation
    @inlinable
    public func createNotebook(
        clientRequestToken: String? = nil,
        name: String,
        workGroup: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> CreateNotebookOutput {
        let input = CreateNotebookInput(
            clientRequestToken: clientRequestToken, 
            name: name, 
            workGroup: workGroup
        )
        return try await self.createNotebook(input, logger: logger)
    }

    /// Creates a prepared statement for use with SQL queries in Athena.
    @Sendable
    @inlinable
    public func createPreparedStatement(_ input: CreatePreparedStatementInput, logger: Logger = AWSClient.loggingDisabled) async throws -> CreatePreparedStatementOutput {
        try await self.client.execute(
            operation: "CreatePreparedStatement", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Creates a prepared statement for use with SQL queries in Athena.
    ///
    /// Parameters:
    ///   - description: The description of the prepared statement.
    ///   - queryStatement: The query string for the prepared statement.
    ///   - statementName: The name of the prepared statement.
    ///   - workGroup: The name of the workgroup to which the prepared statement belongs.
    ///   - logger: Logger use during operation
    @inlinable
    public func createPreparedStatement(
        description: String? = nil,
        queryStatement: String,
        statementName: String,
        workGroup: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> CreatePreparedStatementOutput {
        let input = CreatePreparedStatementInput(
            description: description, 
            queryStatement: queryStatement, 
            statementName: statementName, 
            workGroup: workGroup
        )
        return try await self.createPreparedStatement(input, logger: logger)
    }

    /// Gets an authentication token and the URL at which the notebook can be accessed. During programmatic access, CreatePresignedNotebookUrl must be called every 10 minutes to refresh the authentication token. For information about granting programmatic access, see Grant programmatic access.
    @Sendable
    @inlinable
    public func createPresignedNotebookUrl(_ input: CreatePresignedNotebookUrlRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> CreatePresignedNotebookUrlResponse {
        try await self.client.execute(
            operation: "CreatePresignedNotebookUrl", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Gets an authentication token and the URL at which the notebook can be accessed. During programmatic access, CreatePresignedNotebookUrl must be called every 10 minutes to refresh the authentication token. For information about granting programmatic access, see Grant programmatic access.
    ///
    /// Parameters:
    ///   - sessionId: The session ID.
    ///   - logger: Logger use during operation
    @inlinable
    public func createPresignedNotebookUrl(
        sessionId: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> CreatePresignedNotebookUrlResponse {
        let input = CreatePresignedNotebookUrlRequest(
            sessionId: sessionId
        )
        return try await self.createPresignedNotebookUrl(input, logger: logger)
    }

    /// Creates a workgroup with the specified name. A workgroup can be an Apache Spark enabled workgroup or an Athena SQL workgroup.
    @Sendable
    @inlinable
    public func createWorkGroup(_ input: CreateWorkGroupInput, logger: Logger = AWSClient.loggingDisabled) async throws -> CreateWorkGroupOutput {
        try await self.client.execute(
            operation: "CreateWorkGroup", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Creates a workgroup with the specified name. A workgroup can be an Apache Spark enabled workgroup or an Athena SQL workgroup.
    ///
    /// Parameters:
    ///   - configuration: Contains configuration information for creating an Athena SQL workgroup or Spark enabled Athena workgroup. Athena SQL workgroup configuration includes the location in Amazon S3 where query and calculation results are stored, the encryption configuration, if any, used for encrypting query results, whether the Amazon CloudWatch Metrics are enabled for the workgroup, the limit for the amount of bytes scanned (cutoff) per query, if it is specified, and whether workgroup's settings (specified with EnforceWorkGroupConfiguration) in the WorkGroupConfiguration override client-side settings. See WorkGroupConfiguration$EnforceWorkGroupConfiguration.
    ///   - description: The workgroup description.
    ///   - name: The workgroup name.
    ///   - tags: A list of comma separated tags to add to the workgroup that is created.
    ///   - logger: Logger use during operation
    @inlinable
    public func createWorkGroup(
        configuration: WorkGroupConfiguration? = nil,
        description: String? = nil,
        name: String,
        tags: [Tag]? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> CreateWorkGroupOutput {
        let input = CreateWorkGroupInput(
            configuration: configuration, 
            description: description, 
            name: name, 
            tags: tags
        )
        return try await self.createWorkGroup(input, logger: logger)
    }

    /// Deletes a cancelled capacity reservation. A reservation must be cancelled before it can be deleted. A deleted reservation is immediately removed from your account and can no longer be referenced, including by its ARN. A deleted reservation cannot be called by GetCapacityReservation, and deleted reservations do not appear in the output of ListCapacityReservations.
    @Sendable
    @inlinable
    public func deleteCapacityReservation(_ input: DeleteCapacityReservationInput, logger: Logger = AWSClient.loggingDisabled) async throws -> DeleteCapacityReservationOutput {
        try await self.client.execute(
            operation: "DeleteCapacityReservation", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Deletes a cancelled capacity reservation. A reservation must be cancelled before it can be deleted. A deleted reservation is immediately removed from your account and can no longer be referenced, including by its ARN. A deleted reservation cannot be called by GetCapacityReservation, and deleted reservations do not appear in the output of ListCapacityReservations.
    ///
    /// Parameters:
    ///   - name: The name of the capacity reservation to delete.
    ///   - logger: Logger use during operation
    @inlinable
    public func deleteCapacityReservation(
        name: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> DeleteCapacityReservationOutput {
        let input = DeleteCapacityReservationInput(
            name: name
        )
        return try await self.deleteCapacityReservation(input, logger: logger)
    }

    /// Deletes a data catalog.
    @Sendable
    @inlinable
    public func deleteDataCatalog(_ input: DeleteDataCatalogInput, logger: Logger = AWSClient.loggingDisabled) async throws -> DeleteDataCatalogOutput {
        try await self.client.execute(
            operation: "DeleteDataCatalog", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Deletes a data catalog.
    ///
    /// Parameters:
    ///   - name: The name of the data catalog to delete.
    ///   - logger: Logger use during operation
    @inlinable
    public func deleteDataCatalog(
        name: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> DeleteDataCatalogOutput {
        let input = DeleteDataCatalogInput(
            name: name
        )
        return try await self.deleteDataCatalog(input, logger: logger)
    }

    /// Deletes the named query if you have access to the workgroup in which the query was saved.
    @Sendable
    @inlinable
    public func deleteNamedQuery(_ input: DeleteNamedQueryInput, logger: Logger = AWSClient.loggingDisabled) async throws -> DeleteNamedQueryOutput {
        try await self.client.execute(
            operation: "DeleteNamedQuery", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Deletes the named query if you have access to the workgroup in which the query was saved.
    ///
    /// Parameters:
    ///   - namedQueryId: The unique ID of the query to delete.
    ///   - logger: Logger use during operation
    @inlinable
    public func deleteNamedQuery(
        namedQueryId: String = DeleteNamedQueryInput.idempotencyToken(),
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> DeleteNamedQueryOutput {
        let input = DeleteNamedQueryInput(
            namedQueryId: namedQueryId
        )
        return try await self.deleteNamedQuery(input, logger: logger)
    }

    /// Deletes the specified notebook.
    @Sendable
    @inlinable
    public func deleteNotebook(_ input: DeleteNotebookInput, logger: Logger = AWSClient.loggingDisabled) async throws -> DeleteNotebookOutput {
        try await self.client.execute(
            operation: "DeleteNotebook", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Deletes the specified notebook.
    ///
    /// Parameters:
    ///   - notebookId: The ID of the notebook to delete.
    ///   - logger: Logger use during operation
    @inlinable
    public func deleteNotebook(
        notebookId: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> DeleteNotebookOutput {
        let input = DeleteNotebookInput(
            notebookId: notebookId
        )
        return try await self.deleteNotebook(input, logger: logger)
    }

    /// Deletes the prepared statement with the specified name from the specified workgroup.
    @Sendable
    @inlinable
    public func deletePreparedStatement(_ input: DeletePreparedStatementInput, logger: Logger = AWSClient.loggingDisabled) async throws -> DeletePreparedStatementOutput {
        try await self.client.execute(
            operation: "DeletePreparedStatement", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Deletes the prepared statement with the specified name from the specified workgroup.
    ///
    /// Parameters:
    ///   - statementName: The name of the prepared statement to delete.
    ///   - workGroup: The workgroup to which the statement to be deleted belongs.
    ///   - logger: Logger use during operation
    @inlinable
    public func deletePreparedStatement(
        statementName: String,
        workGroup: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> DeletePreparedStatementOutput {
        let input = DeletePreparedStatementInput(
            statementName: statementName, 
            workGroup: workGroup
        )
        return try await self.deletePreparedStatement(input, logger: logger)
    }

    /// Deletes the workgroup with the specified name. The primary workgroup cannot be deleted.
    @Sendable
    @inlinable
    public func deleteWorkGroup(_ input: DeleteWorkGroupInput, logger: Logger = AWSClient.loggingDisabled) async throws -> DeleteWorkGroupOutput {
        try await self.client.execute(
            operation: "DeleteWorkGroup", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Deletes the workgroup with the specified name. The primary workgroup cannot be deleted.
    ///
    /// Parameters:
    ///   - recursiveDeleteOption: The option to delete the workgroup and its contents even if the workgroup contains any named queries, query executions, or notebooks.
    ///   - workGroup: The unique name of the workgroup to delete.
    ///   - logger: Logger use during operation
    @inlinable
    public func deleteWorkGroup(
        recursiveDeleteOption: Bool? = nil,
        workGroup: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> DeleteWorkGroupOutput {
        let input = DeleteWorkGroupInput(
            recursiveDeleteOption: recursiveDeleteOption, 
            workGroup: workGroup
        )
        return try await self.deleteWorkGroup(input, logger: logger)
    }

    /// Exports the specified notebook and its metadata.
    @Sendable
    @inlinable
    public func exportNotebook(_ input: ExportNotebookInput, logger: Logger = AWSClient.loggingDisabled) async throws -> ExportNotebookOutput {
        try await self.client.execute(
            operation: "ExportNotebook", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Exports the specified notebook and its metadata.
    ///
    /// Parameters:
    ///   - notebookId: The ID of the notebook to export.
    ///   - logger: Logger use during operation
    @inlinable
    public func exportNotebook(
        notebookId: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> ExportNotebookOutput {
        let input = ExportNotebookInput(
            notebookId: notebookId
        )
        return try await self.exportNotebook(input, logger: logger)
    }

    /// Describes a previously submitted calculation execution.
    @Sendable
    @inlinable
    public func getCalculationExecution(_ input: GetCalculationExecutionRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> GetCalculationExecutionResponse {
        try await self.client.execute(
            operation: "GetCalculationExecution", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Describes a previously submitted calculation execution.
    ///
    /// Parameters:
    ///   - calculationExecutionId: The calculation execution UUID.
    ///   - logger: Logger use during operation
    @inlinable
    public func getCalculationExecution(
        calculationExecutionId: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> GetCalculationExecutionResponse {
        let input = GetCalculationExecutionRequest(
            calculationExecutionId: calculationExecutionId
        )
        return try await self.getCalculationExecution(input, logger: logger)
    }

    /// Retrieves the unencrypted code that was executed for the calculation.
    @Sendable
    @inlinable
    public func getCalculationExecutionCode(_ input: GetCalculationExecutionCodeRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> GetCalculationExecutionCodeResponse {
        try await self.client.execute(
            operation: "GetCalculationExecutionCode", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Retrieves the unencrypted code that was executed for the calculation.
    ///
    /// Parameters:
    ///   - calculationExecutionId: The calculation execution UUID.
    ///   - logger: Logger use during operation
    @inlinable
    public func getCalculationExecutionCode(
        calculationExecutionId: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> GetCalculationExecutionCodeResponse {
        let input = GetCalculationExecutionCodeRequest(
            calculationExecutionId: calculationExecutionId
        )
        return try await self.getCalculationExecutionCode(input, logger: logger)
    }

    /// Gets the status of a current calculation.
    @Sendable
    @inlinable
    public func getCalculationExecutionStatus(_ input: GetCalculationExecutionStatusRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> GetCalculationExecutionStatusResponse {
        try await self.client.execute(
            operation: "GetCalculationExecutionStatus", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Gets the status of a current calculation.
    ///
    /// Parameters:
    ///   - calculationExecutionId: The calculation execution UUID.
    ///   - logger: Logger use during operation
    @inlinable
    public func getCalculationExecutionStatus(
        calculationExecutionId: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> GetCalculationExecutionStatusResponse {
        let input = GetCalculationExecutionStatusRequest(
            calculationExecutionId: calculationExecutionId
        )
        return try await self.getCalculationExecutionStatus(input, logger: logger)
    }

    /// Gets the capacity assignment configuration for a capacity reservation, if one exists.
    @Sendable
    @inlinable
    public func getCapacityAssignmentConfiguration(_ input: GetCapacityAssignmentConfigurationInput, logger: Logger = AWSClient.loggingDisabled) async throws -> GetCapacityAssignmentConfigurationOutput {
        try await self.client.execute(
            operation: "GetCapacityAssignmentConfiguration", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Gets the capacity assignment configuration for a capacity reservation, if one exists.
    ///
    /// Parameters:
    ///   - capacityReservationName: The name of the capacity reservation to retrieve the capacity assignment configuration for.
    ///   - logger: Logger use during operation
    @inlinable
    public func getCapacityAssignmentConfiguration(
        capacityReservationName: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> GetCapacityAssignmentConfigurationOutput {
        let input = GetCapacityAssignmentConfigurationInput(
            capacityReservationName: capacityReservationName
        )
        return try await self.getCapacityAssignmentConfiguration(input, logger: logger)
    }

    /// Returns information about the capacity reservation with the specified name.
    @Sendable
    @inlinable
    public func getCapacityReservation(_ input: GetCapacityReservationInput, logger: Logger = AWSClient.loggingDisabled) async throws -> GetCapacityReservationOutput {
        try await self.client.execute(
            operation: "GetCapacityReservation", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Returns information about the capacity reservation with the specified name.
    ///
    /// Parameters:
    ///   - name: The name of the capacity reservation.
    ///   - logger: Logger use during operation
    @inlinable
    public func getCapacityReservation(
        name: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> GetCapacityReservationOutput {
        let input = GetCapacityReservationInput(
            name: name
        )
        return try await self.getCapacityReservation(input, logger: logger)
    }

    /// Returns the specified data catalog.
    @Sendable
    @inlinable
    public func getDataCatalog(_ input: GetDataCatalogInput, logger: Logger = AWSClient.loggingDisabled) async throws -> GetDataCatalogOutput {
        try await self.client.execute(
            operation: "GetDataCatalog", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Returns the specified data catalog.
    ///
    /// Parameters:
    ///   - name: The name of the data catalog to return.
    ///   - workGroup: The name of the workgroup. Required if making an IAM Identity Center request.
    ///   - logger: Logger use during operation
    @inlinable
    public func getDataCatalog(
        name: String,
        workGroup: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> GetDataCatalogOutput {
        let input = GetDataCatalogInput(
            name: name, 
            workGroup: workGroup
        )
        return try await self.getDataCatalog(input, logger: logger)
    }

    /// Returns a database object for the specified database and data catalog.
    @Sendable
    @inlinable
    public func getDatabase(_ input: GetDatabaseInput, logger: Logger = AWSClient.loggingDisabled) async throws -> GetDatabaseOutput {
        try await self.client.execute(
            operation: "GetDatabase", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Returns a database object for the specified database and data catalog.
    ///
    /// Parameters:
    ///   - catalogName: The name of the data catalog that contains the database to return.
    ///   - databaseName: The name of the database to return.
    ///   - workGroup: The name of the workgroup for which the metadata is being fetched. Required if requesting an IAM Identity Center enabled Glue Data Catalog.
    ///   - logger: Logger use during operation
    @inlinable
    public func getDatabase(
        catalogName: String,
        databaseName: String,
        workGroup: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> GetDatabaseOutput {
        let input = GetDatabaseInput(
            catalogName: catalogName, 
            databaseName: databaseName, 
            workGroup: workGroup
        )
        return try await self.getDatabase(input, logger: logger)
    }

    /// Returns information about a single query. Requires that you have access to the workgroup in which the query was saved.
    @Sendable
    @inlinable
    public func getNamedQuery(_ input: GetNamedQueryInput, logger: Logger = AWSClient.loggingDisabled) async throws -> GetNamedQueryOutput {
        try await self.client.execute(
            operation: "GetNamedQuery", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Returns information about a single query. Requires that you have access to the workgroup in which the query was saved.
    ///
    /// Parameters:
    ///   - namedQueryId: The unique ID of the query. Use ListNamedQueries to get query IDs.
    ///   - logger: Logger use during operation
    @inlinable
    public func getNamedQuery(
        namedQueryId: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> GetNamedQueryOutput {
        let input = GetNamedQueryInput(
            namedQueryId: namedQueryId
        )
        return try await self.getNamedQuery(input, logger: logger)
    }

    /// Retrieves notebook metadata for the specified notebook ID.
    @Sendable
    @inlinable
    public func getNotebookMetadata(_ input: GetNotebookMetadataInput, logger: Logger = AWSClient.loggingDisabled) async throws -> GetNotebookMetadataOutput {
        try await self.client.execute(
            operation: "GetNotebookMetadata", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Retrieves notebook metadata for the specified notebook ID.
    ///
    /// Parameters:
    ///   - notebookId: The ID of the notebook whose metadata is to be retrieved.
    ///   - logger: Logger use during operation
    @inlinable
    public func getNotebookMetadata(
        notebookId: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> GetNotebookMetadataOutput {
        let input = GetNotebookMetadataInput(
            notebookId: notebookId
        )
        return try await self.getNotebookMetadata(input, logger: logger)
    }

    /// Retrieves the prepared statement with the specified name from the specified workgroup.
    @Sendable
    @inlinable
    public func getPreparedStatement(_ input: GetPreparedStatementInput, logger: Logger = AWSClient.loggingDisabled) async throws -> GetPreparedStatementOutput {
        try await self.client.execute(
            operation: "GetPreparedStatement", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Retrieves the prepared statement with the specified name from the specified workgroup.
    ///
    /// Parameters:
    ///   - statementName: The name of the prepared statement to retrieve.
    ///   - workGroup: The workgroup to which the statement to be retrieved belongs.
    ///   - logger: Logger use during operation
    @inlinable
    public func getPreparedStatement(
        statementName: String,
        workGroup: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> GetPreparedStatementOutput {
        let input = GetPreparedStatementInput(
            statementName: statementName, 
            workGroup: workGroup
        )
        return try await self.getPreparedStatement(input, logger: logger)
    }

    /// Returns information about a single execution of a query if you have access to the workgroup in which the query ran. Each time a query executes, information about the query execution is saved with a unique ID.
    @Sendable
    @inlinable
    public func getQueryExecution(_ input: GetQueryExecutionInput, logger: Logger = AWSClient.loggingDisabled) async throws -> GetQueryExecutionOutput {
        try await self.client.execute(
            operation: "GetQueryExecution", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Returns information about a single execution of a query if you have access to the workgroup in which the query ran. Each time a query executes, information about the query execution is saved with a unique ID.
    ///
    /// Parameters:
    ///   - queryExecutionId: The unique ID of the query execution.
    ///   - logger: Logger use during operation
    @inlinable
    public func getQueryExecution(
        queryExecutionId: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> GetQueryExecutionOutput {
        let input = GetQueryExecutionInput(
            queryExecutionId: queryExecutionId
        )
        return try await self.getQueryExecution(input, logger: logger)
    }

    /// Streams the results of a single query execution specified by QueryExecutionId from the Athena query results location in Amazon S3. For more information, see Working with query results, recent queries, and output files in the Amazon Athena User Guide. This request does not execute the query but returns results. Use StartQueryExecution to run a query. To stream query results successfully, the IAM principal with permission to call GetQueryResults also must have permissions to the Amazon S3 GetObject action for the Athena query results location.  IAM principals with permission to the Amazon S3 GetObject action for the query results location are able to retrieve query results from Amazon S3 even if permission to the GetQueryResults action is denied. To restrict user or role access, ensure that Amazon S3 permissions to the Athena query location are denied.
    @Sendable
    @inlinable
    public func getQueryResults(_ input: GetQueryResultsInput, logger: Logger = AWSClient.loggingDisabled) async throws -> GetQueryResultsOutput {
        try await self.client.execute(
            operation: "GetQueryResults", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Streams the results of a single query execution specified by QueryExecutionId from the Athena query results location in Amazon S3. For more information, see Working with query results, recent queries, and output files in the Amazon Athena User Guide. This request does not execute the query but returns results. Use StartQueryExecution to run a query. To stream query results successfully, the IAM principal with permission to call GetQueryResults also must have permissions to the Amazon S3 GetObject action for the Athena query results location.  IAM principals with permission to the Amazon S3 GetObject action for the query results location are able to retrieve query results from Amazon S3 even if permission to the GetQueryResults action is denied. To restrict user or role access, ensure that Amazon S3 permissions to the Athena query location are denied.
    ///
    /// Parameters:
    ///   - maxResults: The maximum number of results (rows) to return in this request.
    ///   - nextToken: A token generated by the Athena service that specifies where to continue pagination if a previous request was truncated. To obtain the next set of pages, pass in the NextToken from the response object of the previous page call.
    ///   - queryExecutionId: The unique ID of the query execution.
    ///   - logger: Logger use during operation
    @inlinable
    public func getQueryResults(
        maxResults: Int? = nil,
        nextToken: String? = nil,
        queryExecutionId: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> GetQueryResultsOutput {
        let input = GetQueryResultsInput(
            maxResults: maxResults, 
            nextToken: nextToken, 
            queryExecutionId: queryExecutionId
        )
        return try await self.getQueryResults(input, logger: logger)
    }

    /// Returns query execution runtime statistics related to a single execution of a query if you have access to the workgroup in which the query ran. Statistics from the Timeline section of the response object are available as soon as QueryExecutionStatus$State is in a SUCCEEDED or FAILED state. The remaining non-timeline statistics in the response (like stage-level input and output row count and data size) are updated asynchronously and may not be available immediately after a query completes. The non-timeline statistics are also not included when a query has row-level filters defined in Lake Formation.
    @Sendable
    @inlinable
    public func getQueryRuntimeStatistics(_ input: GetQueryRuntimeStatisticsInput, logger: Logger = AWSClient.loggingDisabled) async throws -> GetQueryRuntimeStatisticsOutput {
        try await self.client.execute(
            operation: "GetQueryRuntimeStatistics", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Returns query execution runtime statistics related to a single execution of a query if you have access to the workgroup in which the query ran. Statistics from the Timeline section of the response object are available as soon as QueryExecutionStatus$State is in a SUCCEEDED or FAILED state. The remaining non-timeline statistics in the response (like stage-level input and output row count and data size) are updated asynchronously and may not be available immediately after a query completes. The non-timeline statistics are also not included when a query has row-level filters defined in Lake Formation.
    ///
    /// Parameters:
    ///   - queryExecutionId: The unique ID of the query execution.
    ///   - logger: Logger use during operation
    @inlinable
    public func getQueryRuntimeStatistics(
        queryExecutionId: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> GetQueryRuntimeStatisticsOutput {
        let input = GetQueryRuntimeStatisticsInput(
            queryExecutionId: queryExecutionId
        )
        return try await self.getQueryRuntimeStatistics(input, logger: logger)
    }

    /// Gets the full details of a previously created session, including the session status and configuration.
    @Sendable
    @inlinable
    public func getSession(_ input: GetSessionRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> GetSessionResponse {
        try await self.client.execute(
            operation: "GetSession", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Gets the full details of a previously created session, including the session status and configuration.
    ///
    /// Parameters:
    ///   - sessionId: The session ID.
    ///   - logger: Logger use during operation
    @inlinable
    public func getSession(
        sessionId: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> GetSessionResponse {
        let input = GetSessionRequest(
            sessionId: sessionId
        )
        return try await self.getSession(input, logger: logger)
    }

    /// Gets the current status of a session.
    @Sendable
    @inlinable
    public func getSessionStatus(_ input: GetSessionStatusRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> GetSessionStatusResponse {
        try await self.client.execute(
            operation: "GetSessionStatus", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Gets the current status of a session.
    ///
    /// Parameters:
    ///   - sessionId: The session ID.
    ///   - logger: Logger use during operation
    @inlinable
    public func getSessionStatus(
        sessionId: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> GetSessionStatusResponse {
        let input = GetSessionStatusRequest(
            sessionId: sessionId
        )
        return try await self.getSessionStatus(input, logger: logger)
    }

    /// Returns table metadata for the specified catalog, database, and table.
    @Sendable
    @inlinable
    public func getTableMetadata(_ input: GetTableMetadataInput, logger: Logger = AWSClient.loggingDisabled) async throws -> GetTableMetadataOutput {
        try await self.client.execute(
            operation: "GetTableMetadata", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Returns table metadata for the specified catalog, database, and table.
    ///
    /// Parameters:
    ///   - catalogName: The name of the data catalog that contains the database and table metadata to return.
    ///   - databaseName: The name of the database that contains the table metadata to return.
    ///   - tableName: The name of the table for which metadata is returned.
    ///   - workGroup: The name of the workgroup for which the metadata is being fetched. Required if requesting an IAM Identity Center enabled Glue Data Catalog.
    ///   - logger: Logger use during operation
    @inlinable
    public func getTableMetadata(
        catalogName: String,
        databaseName: String,
        tableName: String,
        workGroup: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> GetTableMetadataOutput {
        let input = GetTableMetadataInput(
            catalogName: catalogName, 
            databaseName: databaseName, 
            tableName: tableName, 
            workGroup: workGroup
        )
        return try await self.getTableMetadata(input, logger: logger)
    }

    /// Returns information about the workgroup with the specified name.
    @Sendable
    @inlinable
    public func getWorkGroup(_ input: GetWorkGroupInput, logger: Logger = AWSClient.loggingDisabled) async throws -> GetWorkGroupOutput {
        try await self.client.execute(
            operation: "GetWorkGroup", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Returns information about the workgroup with the specified name.
    ///
    /// Parameters:
    ///   - workGroup: The name of the workgroup.
    ///   - logger: Logger use during operation
    @inlinable
    public func getWorkGroup(
        workGroup: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> GetWorkGroupOutput {
        let input = GetWorkGroupInput(
            workGroup: workGroup
        )
        return try await self.getWorkGroup(input, logger: logger)
    }

    /// Imports a single ipynb file to a Spark enabled workgroup. To import the notebook, the request must specify a value for either Payload or NoteBookS3LocationUri. If neither is specified or both are specified, an InvalidRequestException occurs. The maximum file size that can be imported is 10 megabytes. If an ipynb file with the same name already exists in the workgroup, throws an error.
    @Sendable
    @inlinable
    public func importNotebook(_ input: ImportNotebookInput, logger: Logger = AWSClient.loggingDisabled) async throws -> ImportNotebookOutput {
        try await self.client.execute(
            operation: "ImportNotebook", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Imports a single ipynb file to a Spark enabled workgroup. To import the notebook, the request must specify a value for either Payload or NoteBookS3LocationUri. If neither is specified or both are specified, an InvalidRequestException occurs. The maximum file size that can be imported is 10 megabytes. If an ipynb file with the same name already exists in the workgroup, throws an error.
    ///
    /// Parameters:
    ///   - clientRequestToken: A unique case-sensitive string used to ensure the request to import the notebook is idempotent (executes only once).  This token is listed as not required because Amazon Web Services SDKs (for example the Amazon Web Services SDK for Java) auto-generate the token for you. If you are not using the Amazon Web Services SDK or the Amazon Web Services CLI, you must provide this token or the action will fail.
    ///   - name: The name of the notebook to import.
    ///   - notebookS3LocationUri: A URI that specifies the Amazon S3 location of a notebook file in ipynb format.
    ///   - payload: The notebook content to be imported. The payload must be in ipynb format.
    ///   - type: The notebook content type. Currently, the only valid type is IPYNB.
    ///   - workGroup: The name of the Spark enabled workgroup to import the notebook to.
    ///   - logger: Logger use during operation
    @inlinable
    public func importNotebook(
        clientRequestToken: String? = nil,
        name: String,
        notebookS3LocationUri: String? = nil,
        payload: String? = nil,
        type: NotebookType,
        workGroup: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> ImportNotebookOutput {
        let input = ImportNotebookInput(
            clientRequestToken: clientRequestToken, 
            name: name, 
            notebookS3LocationUri: notebookS3LocationUri, 
            payload: payload, 
            type: type, 
            workGroup: workGroup
        )
        return try await self.importNotebook(input, logger: logger)
    }

    /// Returns the supported DPU sizes for the supported application runtimes (for example, Athena notebook version 1).
    @Sendable
    @inlinable
    public func listApplicationDPUSizes(_ input: ListApplicationDPUSizesInput, logger: Logger = AWSClient.loggingDisabled) async throws -> ListApplicationDPUSizesOutput {
        try await self.client.execute(
            operation: "ListApplicationDPUSizes", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Returns the supported DPU sizes for the supported application runtimes (for example, Athena notebook version 1).
    ///
    /// Parameters:
    ///   - maxResults: Specifies the maximum number of results to return.
    ///   - nextToken: A token generated by the Athena service that specifies where to continue pagination if a previous request was truncated.
    ///   - logger: Logger use during operation
    @inlinable
    public func listApplicationDPUSizes(
        maxResults: Int? = nil,
        nextToken: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> ListApplicationDPUSizesOutput {
        let input = ListApplicationDPUSizesInput(
            maxResults: maxResults, 
            nextToken: nextToken
        )
        return try await self.listApplicationDPUSizes(input, logger: logger)
    }

    /// Lists the calculations that have been submitted to a session in descending order. Newer calculations are listed first; older calculations are listed later.
    @Sendable
    @inlinable
    public func listCalculationExecutions(_ input: ListCalculationExecutionsRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> ListCalculationExecutionsResponse {
        try await self.client.execute(
            operation: "ListCalculationExecutions", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Lists the calculations that have been submitted to a session in descending order. Newer calculations are listed first; older calculations are listed later.
    ///
    /// Parameters:
    ///   - maxResults: The maximum number of calculation executions to return.
    ///   - nextToken: A token generated by the Athena service that specifies where to continue pagination if a previous request was truncated. To obtain the next set of pages, pass in the NextToken from the response object of the previous page call.
    ///   - sessionId: The session ID.
    ///   - stateFilter: A filter for a specific calculation execution state. A description of each state follows.  CREATING - The calculation is in the process of being created.  CREATED - The calculation has been created and is ready to run.  QUEUED - The calculation has been queued for processing.  RUNNING - The calculation is running.  CANCELING - A request to cancel the calculation has been received and the system is working to stop it.  CANCELED - The calculation is no longer running as the result of a cancel request.  COMPLETED - The calculation has completed without error.  FAILED - The calculation failed and is no longer running.
    ///   - logger: Logger use during operation
    @inlinable
    public func listCalculationExecutions(
        maxResults: Int? = nil,
        nextToken: String? = nil,
        sessionId: String,
        stateFilter: CalculationExecutionState? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> ListCalculationExecutionsResponse {
        let input = ListCalculationExecutionsRequest(
            maxResults: maxResults, 
            nextToken: nextToken, 
            sessionId: sessionId, 
            stateFilter: stateFilter
        )
        return try await self.listCalculationExecutions(input, logger: logger)
    }

    /// Lists the capacity reservations for the current account.
    @Sendable
    @inlinable
    public func listCapacityReservations(_ input: ListCapacityReservationsInput, logger: Logger = AWSClient.loggingDisabled) async throws -> ListCapacityReservationsOutput {
        try await self.client.execute(
            operation: "ListCapacityReservations", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Lists the capacity reservations for the current account.
    ///
    /// Parameters:
    ///   - maxResults: Specifies the maximum number of results to return.
    ///   - nextToken: A token generated by the Athena service that specifies where to continue pagination if a previous request was truncated.
    ///   - logger: Logger use during operation
    @inlinable
    public func listCapacityReservations(
        maxResults: Int? = nil,
        nextToken: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> ListCapacityReservationsOutput {
        let input = ListCapacityReservationsInput(
            maxResults: maxResults, 
            nextToken: nextToken
        )
        return try await self.listCapacityReservations(input, logger: logger)
    }

    /// Lists the data catalogs in the current Amazon Web Services account.  In the Athena console, data catalogs are listed as "data sources" on the Data sources page under the Data source name column.
    @Sendable
    @inlinable
    public func listDataCatalogs(_ input: ListDataCatalogsInput, logger: Logger = AWSClient.loggingDisabled) async throws -> ListDataCatalogsOutput {
        try await self.client.execute(
            operation: "ListDataCatalogs", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Lists the data catalogs in the current Amazon Web Services account.  In the Athena console, data catalogs are listed as "data sources" on the Data sources page under the Data source name column.
    ///
    /// Parameters:
    ///   - maxResults: Specifies the maximum number of data catalogs to return.
    ///   - nextToken: A token generated by the Athena service that specifies where to continue pagination if a previous request was truncated. To obtain the next set of pages, pass in the NextToken from the response object of the previous page call.
    ///   - workGroup: The name of the workgroup. Required if making an IAM Identity Center request.
    ///   - logger: Logger use during operation
    @inlinable
    public func listDataCatalogs(
        maxResults: Int? = nil,
        nextToken: String? = nil,
        workGroup: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> ListDataCatalogsOutput {
        let input = ListDataCatalogsInput(
            maxResults: maxResults, 
            nextToken: nextToken, 
            workGroup: workGroup
        )
        return try await self.listDataCatalogs(input, logger: logger)
    }

    /// Lists the databases in the specified data catalog.
    @Sendable
    @inlinable
    public func listDatabases(_ input: ListDatabasesInput, logger: Logger = AWSClient.loggingDisabled) async throws -> ListDatabasesOutput {
        try await self.client.execute(
            operation: "ListDatabases", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Lists the databases in the specified data catalog.
    ///
    /// Parameters:
    ///   - catalogName: The name of the data catalog that contains the databases to return.
    ///   - maxResults: Specifies the maximum number of results to return.
    ///   - nextToken: A token generated by the Athena service that specifies where to continue pagination if a previous request was truncated. To obtain the next set of pages, pass in the NextToken from the response object of the previous page call.
    ///   - workGroup: The name of the workgroup for which the metadata is being fetched. Required if requesting an IAM Identity Center enabled Glue Data Catalog.
    ///   - logger: Logger use during operation
    @inlinable
    public func listDatabases(
        catalogName: String,
        maxResults: Int? = nil,
        nextToken: String? = nil,
        workGroup: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> ListDatabasesOutput {
        let input = ListDatabasesInput(
            catalogName: catalogName, 
            maxResults: maxResults, 
            nextToken: nextToken, 
            workGroup: workGroup
        )
        return try await self.listDatabases(input, logger: logger)
    }

    /// Returns a list of engine versions that are available to choose from, including the Auto option.
    @Sendable
    @inlinable
    public func listEngineVersions(_ input: ListEngineVersionsInput, logger: Logger = AWSClient.loggingDisabled) async throws -> ListEngineVersionsOutput {
        try await self.client.execute(
            operation: "ListEngineVersions", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Returns a list of engine versions that are available to choose from, including the Auto option.
    ///
    /// Parameters:
    ///   - maxResults: The maximum number of engine versions to return in this request.
    ///   - nextToken: A token generated by the Athena service that specifies where to continue pagination if a previous request was truncated. To obtain the next set of pages, pass in the NextToken from the response object of the previous page call.
    ///   - logger: Logger use during operation
    @inlinable
    public func listEngineVersions(
        maxResults: Int? = nil,
        nextToken: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> ListEngineVersionsOutput {
        let input = ListEngineVersionsInput(
            maxResults: maxResults, 
            nextToken: nextToken
        )
        return try await self.listEngineVersions(input, logger: logger)
    }

    /// Lists, in descending order, the executors that joined a session. Newer executors are listed first; older executors are listed later. The result can be optionally filtered by state.
    @Sendable
    @inlinable
    public func listExecutors(_ input: ListExecutorsRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> ListExecutorsResponse {
        try await self.client.execute(
            operation: "ListExecutors", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Lists, in descending order, the executors that joined a session. Newer executors are listed first; older executors are listed later. The result can be optionally filtered by state.
    ///
    /// Parameters:
    ///   - executorStateFilter: A filter for a specific executor state. A description of each state follows.  CREATING - The executor is being started, including acquiring resources.  CREATED - The executor has been started.  REGISTERED - The executor has been registered.  TERMINATING - The executor is in the process of shutting down.  TERMINATED - The executor is no longer running.  FAILED - Due to a failure, the executor is no longer running.
    ///   - maxResults: The maximum number of executors to return.
    ///   - nextToken: A token generated by the Athena service that specifies where to continue pagination if a previous request was truncated. To obtain the next set of pages, pass in the NextToken from the response object of the previous page call.
    ///   - sessionId: The session ID.
    ///   - logger: Logger use during operation
    @inlinable
    public func listExecutors(
        executorStateFilter: ExecutorState? = nil,
        maxResults: Int? = nil,
        nextToken: String? = nil,
        sessionId: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> ListExecutorsResponse {
        let input = ListExecutorsRequest(
            executorStateFilter: executorStateFilter, 
            maxResults: maxResults, 
            nextToken: nextToken, 
            sessionId: sessionId
        )
        return try await self.listExecutors(input, logger: logger)
    }

    /// Provides a list of available query IDs only for queries saved in the specified workgroup. Requires that you have access to the specified workgroup. If a workgroup is not specified, lists the saved queries for the primary workgroup.
    @Sendable
    @inlinable
    public func listNamedQueries(_ input: ListNamedQueriesInput, logger: Logger = AWSClient.loggingDisabled) async throws -> ListNamedQueriesOutput {
        try await self.client.execute(
            operation: "ListNamedQueries", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Provides a list of available query IDs only for queries saved in the specified workgroup. Requires that you have access to the specified workgroup. If a workgroup is not specified, lists the saved queries for the primary workgroup.
    ///
    /// Parameters:
    ///   - maxResults: The maximum number of queries to return in this request.
    ///   - nextToken: A token generated by the Athena service that specifies where to continue pagination if a previous request was truncated. To obtain the next set of pages, pass in the NextToken from the response object of the previous page call.
    ///   - workGroup: The name of the workgroup from which the named queries are being returned. If a workgroup is not specified, the saved queries for the primary workgroup are returned.
    ///   - logger: Logger use during operation
    @inlinable
    public func listNamedQueries(
        maxResults: Int? = nil,
        nextToken: String? = nil,
        workGroup: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> ListNamedQueriesOutput {
        let input = ListNamedQueriesInput(
            maxResults: maxResults, 
            nextToken: nextToken, 
            workGroup: workGroup
        )
        return try await self.listNamedQueries(input, logger: logger)
    }

    /// Displays the notebook files for the specified workgroup in paginated format.
    @Sendable
    @inlinable
    public func listNotebookMetadata(_ input: ListNotebookMetadataInput, logger: Logger = AWSClient.loggingDisabled) async throws -> ListNotebookMetadataOutput {
        try await self.client.execute(
            operation: "ListNotebookMetadata", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Displays the notebook files for the specified workgroup in paginated format.
    ///
    /// Parameters:
    ///   - filters: Search filter string.
    ///   - maxResults: Specifies the maximum number of results to return.
    ///   - nextToken: A token generated by the Athena service that specifies where to continue pagination if a previous request was truncated.
    ///   - workGroup: The name of the Spark enabled workgroup to retrieve notebook metadata for.
    ///   - logger: Logger use during operation
    @inlinable
    public func listNotebookMetadata(
        filters: FilterDefinition? = nil,
        maxResults: Int? = nil,
        nextToken: String? = nil,
        workGroup: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> ListNotebookMetadataOutput {
        let input = ListNotebookMetadataInput(
            filters: filters, 
            maxResults: maxResults, 
            nextToken: nextToken, 
            workGroup: workGroup
        )
        return try await self.listNotebookMetadata(input, logger: logger)
    }

    /// Lists, in descending order, the sessions that have been created in a notebook that are in an active state like CREATING, CREATED, IDLE or BUSY. Newer sessions are listed first; older sessions are listed later.
    @Sendable
    @inlinable
    public func listNotebookSessions(_ input: ListNotebookSessionsRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> ListNotebookSessionsResponse {
        try await self.client.execute(
            operation: "ListNotebookSessions", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Lists, in descending order, the sessions that have been created in a notebook that are in an active state like CREATING, CREATED, IDLE or BUSY. Newer sessions are listed first; older sessions are listed later.
    ///
    /// Parameters:
    ///   - maxResults: The maximum number of notebook sessions to return.
    ///   - nextToken: A token generated by the Athena service that specifies where to continue pagination if a previous request was truncated. To obtain the next set of pages, pass in the NextToken from the response object of the previous page call.
    ///   - notebookId: The ID of the notebook to list sessions for.
    ///   - logger: Logger use during operation
    @inlinable
    public func listNotebookSessions(
        maxResults: Int? = nil,
        nextToken: String? = nil,
        notebookId: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> ListNotebookSessionsResponse {
        let input = ListNotebookSessionsRequest(
            maxResults: maxResults, 
            nextToken: nextToken, 
            notebookId: notebookId
        )
        return try await self.listNotebookSessions(input, logger: logger)
    }

    /// Lists the prepared statements in the specified workgroup.
    @Sendable
    @inlinable
    public func listPreparedStatements(_ input: ListPreparedStatementsInput, logger: Logger = AWSClient.loggingDisabled) async throws -> ListPreparedStatementsOutput {
        try await self.client.execute(
            operation: "ListPreparedStatements", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Lists the prepared statements in the specified workgroup.
    ///
    /// Parameters:
    ///   - maxResults: The maximum number of results to return in this request.
    ///   - nextToken: A token generated by the Athena service that specifies where to continue pagination if a previous request was truncated. To obtain the next set of pages, pass in the NextToken from the response object of the previous page call.
    ///   - workGroup: The workgroup to list the prepared statements for.
    ///   - logger: Logger use during operation
    @inlinable
    public func listPreparedStatements(
        maxResults: Int? = nil,
        nextToken: String? = nil,
        workGroup: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> ListPreparedStatementsOutput {
        let input = ListPreparedStatementsInput(
            maxResults: maxResults, 
            nextToken: nextToken, 
            workGroup: workGroup
        )
        return try await self.listPreparedStatements(input, logger: logger)
    }

    /// Provides a list of available query execution IDs for the queries in the specified workgroup. Athena keeps a query history for 45 days. If a workgroup is not specified, returns a list of query execution IDs for the primary workgroup. Requires you to have access to the workgroup in which the queries ran.
    @Sendable
    @inlinable
    public func listQueryExecutions(_ input: ListQueryExecutionsInput, logger: Logger = AWSClient.loggingDisabled) async throws -> ListQueryExecutionsOutput {
        try await self.client.execute(
            operation: "ListQueryExecutions", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Provides a list of available query execution IDs for the queries in the specified workgroup. Athena keeps a query history for 45 days. If a workgroup is not specified, returns a list of query execution IDs for the primary workgroup. Requires you to have access to the workgroup in which the queries ran.
    ///
    /// Parameters:
    ///   - maxResults: The maximum number of query executions to return in this request.
    ///   - nextToken: A token generated by the Athena service that specifies where to continue pagination if a previous request was truncated. To obtain the next set of pages, pass in the NextToken from the response object of the previous page call.
    ///   - workGroup: The name of the workgroup from which queries are being returned. If a workgroup is not specified, a list of available query execution IDs for the queries in the primary workgroup is returned.
    ///   - logger: Logger use during operation
    @inlinable
    public func listQueryExecutions(
        maxResults: Int? = nil,
        nextToken: String? = nil,
        workGroup: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> ListQueryExecutionsOutput {
        let input = ListQueryExecutionsInput(
            maxResults: maxResults, 
            nextToken: nextToken, 
            workGroup: workGroup
        )
        return try await self.listQueryExecutions(input, logger: logger)
    }

    /// Lists the sessions in a workgroup that are in an active state like CREATING, CREATED, IDLE, or BUSY. Newer sessions are listed first; older sessions are listed later.
    @Sendable
    @inlinable
    public func listSessions(_ input: ListSessionsRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> ListSessionsResponse {
        try await self.client.execute(
            operation: "ListSessions", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Lists the sessions in a workgroup that are in an active state like CREATING, CREATED, IDLE, or BUSY. Newer sessions are listed first; older sessions are listed later.
    ///
    /// Parameters:
    ///   - maxResults: The maximum number of sessions to return.
    ///   - nextToken: A token generated by the Athena service that specifies where to continue pagination if a previous request was truncated. To obtain the next set of pages, pass in the NextToken from the response object of the previous page call.
    ///   - stateFilter: A filter for a specific session state. A description of each state follows.  CREATING - The session is being started, including acquiring resources.  CREATED - The session has been started.  IDLE - The session is able to accept a calculation.  BUSY - The session is processing another task and is unable to accept a calculation.  TERMINATING - The session is in the process of shutting down.  TERMINATED - The session and its resources are no longer running.  DEGRADED - The session has no healthy coordinators.  FAILED - Due to a failure, the session and its resources are no longer running.
    ///   - workGroup: The workgroup to which the session belongs.
    ///   - logger: Logger use during operation
    @inlinable
    public func listSessions(
        maxResults: Int? = nil,
        nextToken: String? = nil,
        stateFilter: SessionState? = nil,
        workGroup: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> ListSessionsResponse {
        let input = ListSessionsRequest(
            maxResults: maxResults, 
            nextToken: nextToken, 
            stateFilter: stateFilter, 
            workGroup: workGroup
        )
        return try await self.listSessions(input, logger: logger)
    }

    /// Lists the metadata for the tables in the specified data catalog database.
    @Sendable
    @inlinable
    public func listTableMetadata(_ input: ListTableMetadataInput, logger: Logger = AWSClient.loggingDisabled) async throws -> ListTableMetadataOutput {
        try await self.client.execute(
            operation: "ListTableMetadata", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Lists the metadata for the tables in the specified data catalog database.
    ///
    /// Parameters:
    ///   - catalogName: The name of the data catalog for which table metadata should be returned.
    ///   - databaseName: The name of the database for which table metadata should be returned.
    ///   - expression: A regex filter that pattern-matches table names. If no expression is supplied, metadata for all tables are listed.
    ///   - maxResults: Specifies the maximum number of results to return.
    ///   - nextToken: A token generated by the Athena service that specifies where to continue pagination if a previous request was truncated. To obtain the next set of pages, pass in the NextToken from the response object of the previous page call.
    ///   - workGroup: The name of the workgroup for which the metadata is being fetched. Required if requesting an IAM Identity Center enabled Glue Data Catalog.
    ///   - logger: Logger use during operation
    @inlinable
    public func listTableMetadata(
        catalogName: String,
        databaseName: String,
        expression: String? = nil,
        maxResults: Int? = nil,
        nextToken: String? = nil,
        workGroup: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> ListTableMetadataOutput {
        let input = ListTableMetadataInput(
            catalogName: catalogName, 
            databaseName: databaseName, 
            expression: expression, 
            maxResults: maxResults, 
            nextToken: nextToken, 
            workGroup: workGroup
        )
        return try await self.listTableMetadata(input, logger: logger)
    }

    /// Lists the tags associated with an Athena resource.
    @Sendable
    @inlinable
    public func listTagsForResource(_ input: ListTagsForResourceInput, logger: Logger = AWSClient.loggingDisabled) async throws -> ListTagsForResourceOutput {
        try await self.client.execute(
            operation: "ListTagsForResource", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Lists the tags associated with an Athena resource.
    ///
    /// Parameters:
    ///   - maxResults: The maximum number of results to be returned per request that lists the tags for the resource.
    ///   - nextToken: The token for the next set of results, or null if there are no additional results for this request, where the request lists the tags for the resource with the specified ARN.
    ///   - resourceARN: Lists the tags for the resource with the specified ARN.
    ///   - logger: Logger use during operation
    @inlinable
    public func listTagsForResource(
        maxResults: Int? = nil,
        nextToken: String? = nil,
        resourceARN: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> ListTagsForResourceOutput {
        let input = ListTagsForResourceInput(
            maxResults: maxResults, 
            nextToken: nextToken, 
            resourceARN: resourceARN
        )
        return try await self.listTagsForResource(input, logger: logger)
    }

    /// Lists available workgroups for the account.
    @Sendable
    @inlinable
    public func listWorkGroups(_ input: ListWorkGroupsInput, logger: Logger = AWSClient.loggingDisabled) async throws -> ListWorkGroupsOutput {
        try await self.client.execute(
            operation: "ListWorkGroups", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Lists available workgroups for the account.
    ///
    /// Parameters:
    ///   - maxResults: The maximum number of workgroups to return in this request.
    ///   - nextToken: A token generated by the Athena service that specifies where to continue pagination if a previous request was truncated. To obtain the next set of pages, pass in the NextToken from the response object of the previous page call.
    ///   - logger: Logger use during operation
    @inlinable
    public func listWorkGroups(
        maxResults: Int? = nil,
        nextToken: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> ListWorkGroupsOutput {
        let input = ListWorkGroupsInput(
            maxResults: maxResults, 
            nextToken: nextToken
        )
        return try await self.listWorkGroups(input, logger: logger)
    }

    /// Puts a new capacity assignment configuration for a specified capacity reservation. If a capacity assignment configuration already exists for the capacity reservation, replaces the existing capacity assignment configuration.
    @Sendable
    @inlinable
    public func putCapacityAssignmentConfiguration(_ input: PutCapacityAssignmentConfigurationInput, logger: Logger = AWSClient.loggingDisabled) async throws -> PutCapacityAssignmentConfigurationOutput {
        try await self.client.execute(
            operation: "PutCapacityAssignmentConfiguration", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Puts a new capacity assignment configuration for a specified capacity reservation. If a capacity assignment configuration already exists for the capacity reservation, replaces the existing capacity assignment configuration.
    ///
    /// Parameters:
    ///   - capacityAssignments: The list of assignments for the capacity assignment configuration.
    ///   - capacityReservationName: The name of the capacity reservation to put a capacity assignment configuration for.
    ///   - logger: Logger use during operation
    @inlinable
    public func putCapacityAssignmentConfiguration(
        capacityAssignments: [CapacityAssignment],
        capacityReservationName: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> PutCapacityAssignmentConfigurationOutput {
        let input = PutCapacityAssignmentConfigurationInput(
            capacityAssignments: capacityAssignments, 
            capacityReservationName: capacityReservationName
        )
        return try await self.putCapacityAssignmentConfiguration(input, logger: logger)
    }

    /// Submits calculations for execution within a session. You can supply the code to run as an inline code block within the request.  The request syntax requires the StartCalculationExecutionRequest$CodeBlock parameter or the CalculationConfiguration$CodeBlock parameter, but not both. Because CalculationConfiguration$CodeBlock is deprecated, use the StartCalculationExecutionRequest$CodeBlock parameter instead.
    @Sendable
    @inlinable
    public func startCalculationExecution(_ input: StartCalculationExecutionRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> StartCalculationExecutionResponse {
        try await self.client.execute(
            operation: "StartCalculationExecution", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Submits calculations for execution within a session. You can supply the code to run as an inline code block within the request.  The request syntax requires the StartCalculationExecutionRequest$CodeBlock parameter or the CalculationConfiguration$CodeBlock parameter, but not both. Because CalculationConfiguration$CodeBlock is deprecated, use the StartCalculationExecutionRequest$CodeBlock parameter instead.
    ///
    /// Parameters:
    ///   - clientRequestToken: A unique case-sensitive string used to ensure the request to create the calculation is idempotent (executes only once). If another StartCalculationExecutionRequest is received, the same response is returned and another calculation is not created. If a parameter has changed, an error is returned.  This token is listed as not required because Amazon Web Services SDKs (for example the Amazon Web Services SDK for Java) auto-generate the token for users. If you are not using the Amazon Web Services SDK or the Amazon Web Services CLI, you must provide this token or the action will fail.
    ///   - codeBlock: A string that contains the code of the calculation. Use this parameter instead of CalculationConfiguration$CodeBlock, which is deprecated.
    ///   - description: A description of the calculation.
    ///   - sessionId: The session ID.
    ///   - logger: Logger use during operation
    @inlinable
    public func startCalculationExecution(
        clientRequestToken: String? = nil,
        codeBlock: String? = nil,
        description: String? = nil,
        sessionId: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> StartCalculationExecutionResponse {
        let input = StartCalculationExecutionRequest(
            clientRequestToken: clientRequestToken, 
            codeBlock: codeBlock, 
            description: description, 
            sessionId: sessionId
        )
        return try await self.startCalculationExecution(input, logger: logger)
    }

    /// Runs the SQL query statements contained in the Query. Requires you to have access to the workgroup in which the query ran. Running queries against an external catalog requires GetDataCatalog permission to the catalog. For code samples using the Amazon Web Services SDK for Java, see Examples and Code Samples in the Amazon Athena User Guide.
    @Sendable
    @inlinable
    public func startQueryExecution(_ input: StartQueryExecutionInput, logger: Logger = AWSClient.loggingDisabled) async throws -> StartQueryExecutionOutput {
        try await self.client.execute(
            operation: "StartQueryExecution", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Runs the SQL query statements contained in the Query. Requires you to have access to the workgroup in which the query ran. Running queries against an external catalog requires GetDataCatalog permission to the catalog. For code samples using the Amazon Web Services SDK for Java, see Examples and Code Samples in the Amazon Athena User Guide.
    ///
    /// Parameters:
    ///   - clientRequestToken: A unique case-sensitive string used to ensure the request to create the query is idempotent (executes only once). If another StartQueryExecution request is received, the same response is returned and another query is not created. An error is returned if a parameter, such as QueryString, has changed. A call to StartQueryExecution that uses a previous client request token returns the same QueryExecutionId even if the requester doesn't have permission on the tables specified in QueryString.  This token is listed as not required because Amazon Web Services SDKs (for example the Amazon Web Services SDK for Java) auto-generate the token for users. If you are not using the Amazon Web Services SDK or the Amazon Web Services CLI, you must provide this token or the action will fail.
    ///   - executionParameters: A list of values for the parameters in a query. The values are applied sequentially to the parameters in the query in the order in which the parameters occur.
    ///   - queryExecutionContext: The database within which the query executes.
    ///   - queryString: The SQL query statements to be executed.
    ///   - resultConfiguration: Specifies information about where and how to save the results of the query execution. If the query runs in a workgroup, then workgroup's settings may override query settings. This affects the query results location. The workgroup settings override is specified in EnforceWorkGroupConfiguration (true/false) in the WorkGroupConfiguration. See WorkGroupConfiguration$EnforceWorkGroupConfiguration.
    ///   - resultReuseConfiguration: Specifies the query result reuse behavior for the query.
    ///   - workGroup: The name of the workgroup in which the query is being started.
    ///   - logger: Logger use during operation
    @inlinable
    public func startQueryExecution(
        clientRequestToken: String? = StartQueryExecutionInput.idempotencyToken(),
        executionParameters: [String]? = nil,
        queryExecutionContext: QueryExecutionContext? = nil,
        queryString: String,
        resultConfiguration: ResultConfiguration? = nil,
        resultReuseConfiguration: ResultReuseConfiguration? = nil,
        workGroup: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> StartQueryExecutionOutput {
        let input = StartQueryExecutionInput(
            clientRequestToken: clientRequestToken, 
            executionParameters: executionParameters, 
            queryExecutionContext: queryExecutionContext, 
            queryString: queryString, 
            resultConfiguration: resultConfiguration, 
            resultReuseConfiguration: resultReuseConfiguration, 
            workGroup: workGroup
        )
        return try await self.startQueryExecution(input, logger: logger)
    }

    /// Creates a session for running calculations within a workgroup. The session is ready when it reaches an IDLE state.
    @Sendable
    @inlinable
    public func startSession(_ input: StartSessionRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> StartSessionResponse {
        try await self.client.execute(
            operation: "StartSession", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Creates a session for running calculations within a workgroup. The session is ready when it reaches an IDLE state.
    ///
    /// Parameters:
    ///   - clientRequestToken: A unique case-sensitive string used to ensure the request to create the session is idempotent (executes only once). If another StartSessionRequest is received, the same response is returned and another session is not created. If a parameter has changed, an error is returned.  This token is listed as not required because Amazon Web Services SDKs (for example the Amazon Web Services SDK for Java) auto-generate the token for users. If you are not using the Amazon Web Services SDK or the Amazon Web Services CLI, you must provide this token or the action will fail.
    ///   - description: The session description.
    ///   - engineConfiguration: Contains engine data processing unit (DPU) configuration settings and parameter mappings.
    ///   - notebookVersion: The notebook version. This value is supplied automatically for notebook sessions in the Athena console and is not required for programmatic session access. The only valid notebook version is Athena notebook version 1. If you specify a value for NotebookVersion, you must also specify a value for NotebookId. See EngineConfiguration$AdditionalConfigs.
    ///   - sessionIdleTimeoutInMinutes: The idle timeout in minutes for the session.
    ///   - workGroup: The workgroup to which the session belongs.
    ///   - logger: Logger use during operation
    @inlinable
    public func startSession(
        clientRequestToken: String? = nil,
        description: String? = nil,
        engineConfiguration: EngineConfiguration,
        notebookVersion: String? = nil,
        sessionIdleTimeoutInMinutes: Int? = nil,
        workGroup: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> StartSessionResponse {
        let input = StartSessionRequest(
            clientRequestToken: clientRequestToken, 
            description: description, 
            engineConfiguration: engineConfiguration, 
            notebookVersion: notebookVersion, 
            sessionIdleTimeoutInMinutes: sessionIdleTimeoutInMinutes, 
            workGroup: workGroup
        )
        return try await self.startSession(input, logger: logger)
    }

    /// Requests the cancellation of a calculation. A StopCalculationExecution call on a calculation that is already in a terminal state (for example, STOPPED, FAILED, or COMPLETED) succeeds but has no effect.  Cancelling a calculation is done on a best effort basis. If a calculation cannot be cancelled, you can be charged for its completion. If you are concerned about being charged for a calculation that cannot be cancelled, consider terminating the session in which the calculation is running.
    @Sendable
    @inlinable
    public func stopCalculationExecution(_ input: StopCalculationExecutionRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> StopCalculationExecutionResponse {
        try await self.client.execute(
            operation: "StopCalculationExecution", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Requests the cancellation of a calculation. A StopCalculationExecution call on a calculation that is already in a terminal state (for example, STOPPED, FAILED, or COMPLETED) succeeds but has no effect.  Cancelling a calculation is done on a best effort basis. If a calculation cannot be cancelled, you can be charged for its completion. If you are concerned about being charged for a calculation that cannot be cancelled, consider terminating the session in which the calculation is running.
    ///
    /// Parameters:
    ///   - calculationExecutionId: The calculation execution UUID.
    ///   - logger: Logger use during operation
    @inlinable
    public func stopCalculationExecution(
        calculationExecutionId: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> StopCalculationExecutionResponse {
        let input = StopCalculationExecutionRequest(
            calculationExecutionId: calculationExecutionId
        )
        return try await self.stopCalculationExecution(input, logger: logger)
    }

    /// Stops a query execution. Requires you to have access to the workgroup in which the query ran.
    @Sendable
    @inlinable
    public func stopQueryExecution(_ input: StopQueryExecutionInput, logger: Logger = AWSClient.loggingDisabled) async throws -> StopQueryExecutionOutput {
        try await self.client.execute(
            operation: "StopQueryExecution", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Stops a query execution. Requires you to have access to the workgroup in which the query ran.
    ///
    /// Parameters:
    ///   - queryExecutionId: The unique ID of the query execution to stop.
    ///   - logger: Logger use during operation
    @inlinable
    public func stopQueryExecution(
        queryExecutionId: String = StopQueryExecutionInput.idempotencyToken(),
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> StopQueryExecutionOutput {
        let input = StopQueryExecutionInput(
            queryExecutionId: queryExecutionId
        )
        return try await self.stopQueryExecution(input, logger: logger)
    }

    /// Adds one or more tags to an Athena resource. A tag is a label that you assign to a resource. Each tag consists of a key and an optional value, both of which you define. For example, you can use tags to categorize Athena workgroups, data catalogs, or capacity reservations by purpose, owner, or environment. Use a consistent set of tag keys to make it easier to search and filter the resources in your account. For best practices, see Tagging Best Practices. Tag keys can be from 1 to 128 UTF-8 Unicode characters, and tag values can be from 0 to 256 UTF-8 Unicode characters. Tags can use letters and numbers representable in UTF-8, and the following characters: + - = . _ : / @. Tag keys and values are case-sensitive. Tag keys must be unique per resource. If you specify more than one tag, separate them by commas.
    @Sendable
    @inlinable
    public func tagResource(_ input: TagResourceInput, logger: Logger = AWSClient.loggingDisabled) async throws -> TagResourceOutput {
        try await self.client.execute(
            operation: "TagResource", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Adds one or more tags to an Athena resource. A tag is a label that you assign to a resource. Each tag consists of a key and an optional value, both of which you define. For example, you can use tags to categorize Athena workgroups, data catalogs, or capacity reservations by purpose, owner, or environment. Use a consistent set of tag keys to make it easier to search and filter the resources in your account. For best practices, see Tagging Best Practices. Tag keys can be from 1 to 128 UTF-8 Unicode characters, and tag values can be from 0 to 256 UTF-8 Unicode characters. Tags can use letters and numbers representable in UTF-8, and the following characters: + - = . _ : / @. Tag keys and values are case-sensitive. Tag keys must be unique per resource. If you specify more than one tag, separate them by commas.
    ///
    /// Parameters:
    ///   - resourceARN: Specifies the ARN of the Athena resource to which tags are to be added.
    ///   - tags: A collection of one or more tags, separated by commas, to be added to an Athena resource.
    ///   - logger: Logger use during operation
    @inlinable
    public func tagResource(
        resourceARN: String,
        tags: [Tag],
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> TagResourceOutput {
        let input = TagResourceInput(
            resourceARN: resourceARN, 
            tags: tags
        )
        return try await self.tagResource(input, logger: logger)
    }

    /// Terminates an active session. A TerminateSession call on a session that is already inactive (for example, in a FAILED, TERMINATED or TERMINATING state) succeeds but has no effect. Calculations running in the session when TerminateSession is called are forcefully stopped, but may display as FAILED instead of STOPPED.
    @Sendable
    @inlinable
    public func terminateSession(_ input: TerminateSessionRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> TerminateSessionResponse {
        try await self.client.execute(
            operation: "TerminateSession", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Terminates an active session. A TerminateSession call on a session that is already inactive (for example, in a FAILED, TERMINATED or TERMINATING state) succeeds but has no effect. Calculations running in the session when TerminateSession is called are forcefully stopped, but may display as FAILED instead of STOPPED.
    ///
    /// Parameters:
    ///   - sessionId: The session ID.
    ///   - logger: Logger use during operation
    @inlinable
    public func terminateSession(
        sessionId: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> TerminateSessionResponse {
        let input = TerminateSessionRequest(
            sessionId: sessionId
        )
        return try await self.terminateSession(input, logger: logger)
    }

    /// Removes one or more tags from an Athena resource.
    @Sendable
    @inlinable
    public func untagResource(_ input: UntagResourceInput, logger: Logger = AWSClient.loggingDisabled) async throws -> UntagResourceOutput {
        try await self.client.execute(
            operation: "UntagResource", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Removes one or more tags from an Athena resource.
    ///
    /// Parameters:
    ///   - resourceARN: Specifies the ARN of the resource from which tags are to be removed.
    ///   - tagKeys: A comma-separated list of one or more tag keys whose tags are to be removed from the specified resource.
    ///   - logger: Logger use during operation
    @inlinable
    public func untagResource(
        resourceARN: String,
        tagKeys: [String],
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> UntagResourceOutput {
        let input = UntagResourceInput(
            resourceARN: resourceARN, 
            tagKeys: tagKeys
        )
        return try await self.untagResource(input, logger: logger)
    }

    /// Updates the number of requested data processing units for the capacity reservation with the specified name.
    @Sendable
    @inlinable
    public func updateCapacityReservation(_ input: UpdateCapacityReservationInput, logger: Logger = AWSClient.loggingDisabled) async throws -> UpdateCapacityReservationOutput {
        try await self.client.execute(
            operation: "UpdateCapacityReservation", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Updates the number of requested data processing units for the capacity reservation with the specified name.
    ///
    /// Parameters:
    ///   - name: The name of the capacity reservation.
    ///   - targetDpus: The new number of requested data processing units.
    ///   - logger: Logger use during operation
    @inlinable
    public func updateCapacityReservation(
        name: String,
        targetDpus: Int,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> UpdateCapacityReservationOutput {
        let input = UpdateCapacityReservationInput(
            name: name, 
            targetDpus: targetDpus
        )
        return try await self.updateCapacityReservation(input, logger: logger)
    }

    /// Updates the data catalog that has the specified name.
    @Sendable
    @inlinable
    public func updateDataCatalog(_ input: UpdateDataCatalogInput, logger: Logger = AWSClient.loggingDisabled) async throws -> UpdateDataCatalogOutput {
        try await self.client.execute(
            operation: "UpdateDataCatalog", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Updates the data catalog that has the specified name.
    ///
    /// Parameters:
    ///   - description: New or modified text that describes the data catalog.
    ///   - name: The name of the data catalog to update. The catalog name must be unique for the Amazon Web Services account and can use a maximum of 127 alphanumeric, underscore, at sign, or hyphen characters. The remainder of the length constraint of 256 is reserved for use by Athena.
    ///   - parameters: Specifies the Lambda function or functions to use for updating the data catalog. This is a mapping whose values depend on the catalog type.    For the HIVE data catalog type, use the following syntax. The metadata-function parameter is required. The sdk-version parameter is optional and defaults to the currently supported version.  metadata-function=lambda_arn, sdk-version=version_number     For the LAMBDA data catalog type, use one of the following sets of required parameters, but not both.   If you have one Lambda function that processes metadata and another for reading the actual data, use the following syntax. Both parameters are required.  metadata-function=lambda_arn, record-function=lambda_arn     If you have a composite Lambda function that processes both metadata and data, use the following syntax to specify your Lambda function.  function=lambda_arn
    ///   - type: Specifies the type of data catalog to update. Specify LAMBDA for a federated catalog, HIVE for an external hive metastore, or GLUE for an Glue Data Catalog.
    ///   - logger: Logger use during operation
    @inlinable
    public func updateDataCatalog(
        description: String? = nil,
        name: String,
        parameters: [String: String]? = nil,
        type: DataCatalogType,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> UpdateDataCatalogOutput {
        let input = UpdateDataCatalogInput(
            description: description, 
            name: name, 
            parameters: parameters, 
            type: type
        )
        return try await self.updateDataCatalog(input, logger: logger)
    }

    /// Updates a NamedQuery object. The database or workgroup cannot be updated.
    @Sendable
    @inlinable
    public func updateNamedQuery(_ input: UpdateNamedQueryInput, logger: Logger = AWSClient.loggingDisabled) async throws -> UpdateNamedQueryOutput {
        try await self.client.execute(
            operation: "UpdateNamedQuery", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Updates a NamedQuery object. The database or workgroup cannot be updated.
    ///
    /// Parameters:
    ///   - description: The query description.
    ///   - name: The name of the query.
    ///   - namedQueryId: The unique identifier (UUID) of the query.
    ///   - queryString: The contents of the query with all query statements.
    ///   - logger: Logger use during operation
    @inlinable
    public func updateNamedQuery(
        description: String? = nil,
        name: String,
        namedQueryId: String,
        queryString: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> UpdateNamedQueryOutput {
        let input = UpdateNamedQueryInput(
            description: description, 
            name: name, 
            namedQueryId: namedQueryId, 
            queryString: queryString
        )
        return try await self.updateNamedQuery(input, logger: logger)
    }

    /// Updates the contents of a Spark notebook.
    @Sendable
    @inlinable
    public func updateNotebook(_ input: UpdateNotebookInput, logger: Logger = AWSClient.loggingDisabled) async throws -> UpdateNotebookOutput {
        try await self.client.execute(
            operation: "UpdateNotebook", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Updates the contents of a Spark notebook.
    ///
    /// Parameters:
    ///   - clientRequestToken: A unique case-sensitive string used to ensure the request to create the notebook is idempotent (executes only once).  This token is listed as not required because Amazon Web Services SDKs (for example the Amazon Web Services SDK for Java) auto-generate the token for you. If you are not using the Amazon Web Services SDK or the Amazon Web Services CLI, you must provide this token or the action will fail.
    ///   - notebookId: The ID of the notebook to update.
    ///   - payload: The updated content for the notebook.
    ///   - sessionId: The active notebook session ID. Required if the notebook has an active session.
    ///   - type: The notebook content type. Currently, the only valid type is IPYNB.
    ///   - logger: Logger use during operation
    @inlinable
    public func updateNotebook(
        clientRequestToken: String? = nil,
        notebookId: String,
        payload: String,
        sessionId: String? = nil,
        type: NotebookType,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> UpdateNotebookOutput {
        let input = UpdateNotebookInput(
            clientRequestToken: clientRequestToken, 
            notebookId: notebookId, 
            payload: payload, 
            sessionId: sessionId, 
            type: type
        )
        return try await self.updateNotebook(input, logger: logger)
    }

    /// Updates the metadata for a notebook.
    @Sendable
    @inlinable
    public func updateNotebookMetadata(_ input: UpdateNotebookMetadataInput, logger: Logger = AWSClient.loggingDisabled) async throws -> UpdateNotebookMetadataOutput {
        try await self.client.execute(
            operation: "UpdateNotebookMetadata", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Updates the metadata for a notebook.
    ///
    /// Parameters:
    ///   - clientRequestToken: A unique case-sensitive string used to ensure the request to create the notebook is idempotent (executes only once).  This token is listed as not required because Amazon Web Services SDKs (for example the Amazon Web Services SDK for Java) auto-generate the token for you. If you are not using the Amazon Web Services SDK or the Amazon Web Services CLI, you must provide this token or the action will fail.
    ///   - name: The name to update the notebook to.
    ///   - notebookId: The ID of the notebook to update the metadata for.
    ///   - logger: Logger use during operation
    @inlinable
    public func updateNotebookMetadata(
        clientRequestToken: String? = nil,
        name: String,
        notebookId: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> UpdateNotebookMetadataOutput {
        let input = UpdateNotebookMetadataInput(
            clientRequestToken: clientRequestToken, 
            name: name, 
            notebookId: notebookId
        )
        return try await self.updateNotebookMetadata(input, logger: logger)
    }

    /// Updates a prepared statement.
    @Sendable
    @inlinable
    public func updatePreparedStatement(_ input: UpdatePreparedStatementInput, logger: Logger = AWSClient.loggingDisabled) async throws -> UpdatePreparedStatementOutput {
        try await self.client.execute(
            operation: "UpdatePreparedStatement", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Updates a prepared statement.
    ///
    /// Parameters:
    ///   - description: The description of the prepared statement.
    ///   - queryStatement: The query string for the prepared statement.
    ///   - statementName: The name of the prepared statement.
    ///   - workGroup: The workgroup for the prepared statement.
    ///   - logger: Logger use during operation
    @inlinable
    public func updatePreparedStatement(
        description: String? = nil,
        queryStatement: String,
        statementName: String,
        workGroup: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> UpdatePreparedStatementOutput {
        let input = UpdatePreparedStatementInput(
            description: description, 
            queryStatement: queryStatement, 
            statementName: statementName, 
            workGroup: workGroup
        )
        return try await self.updatePreparedStatement(input, logger: logger)
    }

    /// Updates the workgroup with the specified name. The workgroup's name cannot be changed. Only ConfigurationUpdates can be specified.
    @Sendable
    @inlinable
    public func updateWorkGroup(_ input: UpdateWorkGroupInput, logger: Logger = AWSClient.loggingDisabled) async throws -> UpdateWorkGroupOutput {
        try await self.client.execute(
            operation: "UpdateWorkGroup", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Updates the workgroup with the specified name. The workgroup's name cannot be changed. Only ConfigurationUpdates can be specified.
    ///
    /// Parameters:
    ///   - configurationUpdates: Contains configuration updates for an Athena SQL workgroup.
    ///   - description: The workgroup description.
    ///   - state: The workgroup state that will be updated for the given workgroup.
    ///   - workGroup: The specified workgroup that will be updated.
    ///   - logger: Logger use during operation
    @inlinable
    public func updateWorkGroup(
        configurationUpdates: WorkGroupConfigurationUpdates? = nil,
        description: String? = nil,
        state: WorkGroupState? = nil,
        workGroup: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> UpdateWorkGroupOutput {
        let input = UpdateWorkGroupInput(
            configurationUpdates: configurationUpdates, 
            description: description, 
            state: state, 
            workGroup: workGroup
        )
        return try await self.updateWorkGroup(input, logger: logger)
    }
}

extension Athena {
    /// Initializer required by `AWSService.with(middlewares:timeout:byteBufferAllocator:options)`. You are not able to use this initializer directly as there are not public
    /// initializers for `AWSServiceConfig.Patch`. Please use `AWSService.with(middlewares:timeout:byteBufferAllocator:options)` instead.
    public init(from: Athena, patch: AWSServiceConfig.Patch) {
        self.client = from.client
        self.config = from.config.with(patch: patch)
    }
}

// MARK: Paginators

@available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
extension Athena {
    /// Return PaginatorSequence for operation ``getQueryResults(_:logger:)``.
    ///
    /// - Parameters:
    ///   - input: Input for operation
    ///   - logger: Logger used for logging
    @inlinable
    public func getQueryResultsPaginator(
        _ input: GetQueryResultsInput,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<GetQueryResultsInput, GetQueryResultsOutput> {
        return .init(
            input: input,
            command: self.getQueryResults,
            inputKey: \GetQueryResultsInput.nextToken,
            outputKey: \GetQueryResultsOutput.nextToken,
            logger: logger
        )
    }
    /// Return PaginatorSequence for operation ``getQueryResults(_:logger:)``.
    ///
    /// - Parameters:
    ///   - maxResults: The maximum number of results (rows) to return in this request.
    ///   - queryExecutionId: The unique ID of the query execution.
    ///   - logger: Logger used for logging
    @inlinable
    public func getQueryResultsPaginator(
        maxResults: Int? = nil,
        queryExecutionId: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) -> AWSClient.PaginatorSequence<GetQueryResultsInput, GetQueryResultsOutput> {
        let input = GetQueryResultsInput(
            maxResults: maxResults, 
            queryExecutionId: queryExecutionId
        )
        return self.getQueryResultsPaginator(input, logger: logger)
    }

    /// Return PaginatorSequence for operation ``listApplicationDPUSizes(_:logger:)``.
    ///
    /// - Parameters:
    ///   - input: Input for operation
    ///   - logger: Logger used for logging
    @inlinable
    public func listApplicationDPUSizesPaginator(
        _ input: ListApplicationDPUSizesInput,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<ListApplicationDPUSizesInput, ListApplicationDPUSizesOutput> {
        return .init(
            input: input,
            command: self.listApplicationDPUSizes,
            inputKey: \ListApplicationDPUSizesInput.nextToken,
            outputKey: \ListApplicationDPUSizesOutput.nextToken,
            logger: logger
        )
    }
    /// Return PaginatorSequence for operation ``listApplicationDPUSizes(_:logger:)``.
    ///
    /// - Parameters:
    ///   - maxResults: Specifies the maximum number of results to return.
    ///   - logger: Logger used for logging
    @inlinable
    public func listApplicationDPUSizesPaginator(
        maxResults: Int? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) -> AWSClient.PaginatorSequence<ListApplicationDPUSizesInput, ListApplicationDPUSizesOutput> {
        let input = ListApplicationDPUSizesInput(
            maxResults: maxResults
        )
        return self.listApplicationDPUSizesPaginator(input, logger: logger)
    }

    /// Return PaginatorSequence for operation ``listCalculationExecutions(_:logger:)``.
    ///
    /// - Parameters:
    ///   - input: Input for operation
    ///   - logger: Logger used for logging
    @inlinable
    public func listCalculationExecutionsPaginator(
        _ input: ListCalculationExecutionsRequest,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<ListCalculationExecutionsRequest, ListCalculationExecutionsResponse> {
        return .init(
            input: input,
            command: self.listCalculationExecutions,
            inputKey: \ListCalculationExecutionsRequest.nextToken,
            outputKey: \ListCalculationExecutionsResponse.nextToken,
            logger: logger
        )
    }
    /// Return PaginatorSequence for operation ``listCalculationExecutions(_:logger:)``.
    ///
    /// - Parameters:
    ///   - maxResults: The maximum number of calculation executions to return.
    ///   - sessionId: The session ID.
    ///   - stateFilter: A filter for a specific calculation execution state. A description of each state follows.  CREATING - The calculation is in the process of being created.  CREATED - The calculation has been created and is ready to run.  QUEUED - The calculation has been queued for processing.  RUNNING - The calculation is running.  CANCELING - A request to cancel the calculation has been received and the system is working to stop it.  CANCELED - The calculation is no longer running as the result of a cancel request.  COMPLETED - The calculation has completed without error.  FAILED - The calculation failed and is no longer running.
    ///   - logger: Logger used for logging
    @inlinable
    public func listCalculationExecutionsPaginator(
        maxResults: Int? = nil,
        sessionId: String,
        stateFilter: CalculationExecutionState? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) -> AWSClient.PaginatorSequence<ListCalculationExecutionsRequest, ListCalculationExecutionsResponse> {
        let input = ListCalculationExecutionsRequest(
            maxResults: maxResults, 
            sessionId: sessionId, 
            stateFilter: stateFilter
        )
        return self.listCalculationExecutionsPaginator(input, logger: logger)
    }

    /// Return PaginatorSequence for operation ``listCapacityReservations(_:logger:)``.
    ///
    /// - Parameters:
    ///   - input: Input for operation
    ///   - logger: Logger used for logging
    @inlinable
    public func listCapacityReservationsPaginator(
        _ input: ListCapacityReservationsInput,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<ListCapacityReservationsInput, ListCapacityReservationsOutput> {
        return .init(
            input: input,
            command: self.listCapacityReservations,
            inputKey: \ListCapacityReservationsInput.nextToken,
            outputKey: \ListCapacityReservationsOutput.nextToken,
            logger: logger
        )
    }
    /// Return PaginatorSequence for operation ``listCapacityReservations(_:logger:)``.
    ///
    /// - Parameters:
    ///   - maxResults: Specifies the maximum number of results to return.
    ///   - logger: Logger used for logging
    @inlinable
    public func listCapacityReservationsPaginator(
        maxResults: Int? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) -> AWSClient.PaginatorSequence<ListCapacityReservationsInput, ListCapacityReservationsOutput> {
        let input = ListCapacityReservationsInput(
            maxResults: maxResults
        )
        return self.listCapacityReservationsPaginator(input, logger: logger)
    }

    /// Return PaginatorSequence for operation ``listDataCatalogs(_:logger:)``.
    ///
    /// - Parameters:
    ///   - input: Input for operation
    ///   - logger: Logger used for logging
    @inlinable
    public func listDataCatalogsPaginator(
        _ input: ListDataCatalogsInput,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<ListDataCatalogsInput, ListDataCatalogsOutput> {
        return .init(
            input: input,
            command: self.listDataCatalogs,
            inputKey: \ListDataCatalogsInput.nextToken,
            outputKey: \ListDataCatalogsOutput.nextToken,
            logger: logger
        )
    }
    /// Return PaginatorSequence for operation ``listDataCatalogs(_:logger:)``.
    ///
    /// - Parameters:
    ///   - maxResults: Specifies the maximum number of data catalogs to return.
    ///   - workGroup: The name of the workgroup. Required if making an IAM Identity Center request.
    ///   - logger: Logger used for logging
    @inlinable
    public func listDataCatalogsPaginator(
        maxResults: Int? = nil,
        workGroup: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) -> AWSClient.PaginatorSequence<ListDataCatalogsInput, ListDataCatalogsOutput> {
        let input = ListDataCatalogsInput(
            maxResults: maxResults, 
            workGroup: workGroup
        )
        return self.listDataCatalogsPaginator(input, logger: logger)
    }

    /// Return PaginatorSequence for operation ``listDatabases(_:logger:)``.
    ///
    /// - Parameters:
    ///   - input: Input for operation
    ///   - logger: Logger used for logging
    @inlinable
    public func listDatabasesPaginator(
        _ input: ListDatabasesInput,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<ListDatabasesInput, ListDatabasesOutput> {
        return .init(
            input: input,
            command: self.listDatabases,
            inputKey: \ListDatabasesInput.nextToken,
            outputKey: \ListDatabasesOutput.nextToken,
            logger: logger
        )
    }
    /// Return PaginatorSequence for operation ``listDatabases(_:logger:)``.
    ///
    /// - Parameters:
    ///   - catalogName: The name of the data catalog that contains the databases to return.
    ///   - maxResults: Specifies the maximum number of results to return.
    ///   - workGroup: The name of the workgroup for which the metadata is being fetched. Required if requesting an IAM Identity Center enabled Glue Data Catalog.
    ///   - logger: Logger used for logging
    @inlinable
    public func listDatabasesPaginator(
        catalogName: String,
        maxResults: Int? = nil,
        workGroup: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) -> AWSClient.PaginatorSequence<ListDatabasesInput, ListDatabasesOutput> {
        let input = ListDatabasesInput(
            catalogName: catalogName, 
            maxResults: maxResults, 
            workGroup: workGroup
        )
        return self.listDatabasesPaginator(input, logger: logger)
    }

    /// Return PaginatorSequence for operation ``listEngineVersions(_:logger:)``.
    ///
    /// - Parameters:
    ///   - input: Input for operation
    ///   - logger: Logger used for logging
    @inlinable
    public func listEngineVersionsPaginator(
        _ input: ListEngineVersionsInput,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<ListEngineVersionsInput, ListEngineVersionsOutput> {
        return .init(
            input: input,
            command: self.listEngineVersions,
            inputKey: \ListEngineVersionsInput.nextToken,
            outputKey: \ListEngineVersionsOutput.nextToken,
            logger: logger
        )
    }
    /// Return PaginatorSequence for operation ``listEngineVersions(_:logger:)``.
    ///
    /// - Parameters:
    ///   - maxResults: The maximum number of engine versions to return in this request.
    ///   - logger: Logger used for logging
    @inlinable
    public func listEngineVersionsPaginator(
        maxResults: Int? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) -> AWSClient.PaginatorSequence<ListEngineVersionsInput, ListEngineVersionsOutput> {
        let input = ListEngineVersionsInput(
            maxResults: maxResults
        )
        return self.listEngineVersionsPaginator(input, logger: logger)
    }

    /// Return PaginatorSequence for operation ``listExecutors(_:logger:)``.
    ///
    /// - Parameters:
    ///   - input: Input for operation
    ///   - logger: Logger used for logging
    @inlinable
    public func listExecutorsPaginator(
        _ input: ListExecutorsRequest,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<ListExecutorsRequest, ListExecutorsResponse> {
        return .init(
            input: input,
            command: self.listExecutors,
            inputKey: \ListExecutorsRequest.nextToken,
            outputKey: \ListExecutorsResponse.nextToken,
            logger: logger
        )
    }
    /// Return PaginatorSequence for operation ``listExecutors(_:logger:)``.
    ///
    /// - Parameters:
    ///   - executorStateFilter: A filter for a specific executor state. A description of each state follows.  CREATING - The executor is being started, including acquiring resources.  CREATED - The executor has been started.  REGISTERED - The executor has been registered.  TERMINATING - The executor is in the process of shutting down.  TERMINATED - The executor is no longer running.  FAILED - Due to a failure, the executor is no longer running.
    ///   - maxResults: The maximum number of executors to return.
    ///   - sessionId: The session ID.
    ///   - logger: Logger used for logging
    @inlinable
    public func listExecutorsPaginator(
        executorStateFilter: ExecutorState? = nil,
        maxResults: Int? = nil,
        sessionId: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) -> AWSClient.PaginatorSequence<ListExecutorsRequest, ListExecutorsResponse> {
        let input = ListExecutorsRequest(
            executorStateFilter: executorStateFilter, 
            maxResults: maxResults, 
            sessionId: sessionId
        )
        return self.listExecutorsPaginator(input, logger: logger)
    }

    /// Return PaginatorSequence for operation ``listNamedQueries(_:logger:)``.
    ///
    /// - Parameters:
    ///   - input: Input for operation
    ///   - logger: Logger used for logging
    @inlinable
    public func listNamedQueriesPaginator(
        _ input: ListNamedQueriesInput,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<ListNamedQueriesInput, ListNamedQueriesOutput> {
        return .init(
            input: input,
            command: self.listNamedQueries,
            inputKey: \ListNamedQueriesInput.nextToken,
            outputKey: \ListNamedQueriesOutput.nextToken,
            logger: logger
        )
    }
    /// Return PaginatorSequence for operation ``listNamedQueries(_:logger:)``.
    ///
    /// - Parameters:
    ///   - maxResults: The maximum number of queries to return in this request.
    ///   - workGroup: The name of the workgroup from which the named queries are being returned. If a workgroup is not specified, the saved queries for the primary workgroup are returned.
    ///   - logger: Logger used for logging
    @inlinable
    public func listNamedQueriesPaginator(
        maxResults: Int? = nil,
        workGroup: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) -> AWSClient.PaginatorSequence<ListNamedQueriesInput, ListNamedQueriesOutput> {
        let input = ListNamedQueriesInput(
            maxResults: maxResults, 
            workGroup: workGroup
        )
        return self.listNamedQueriesPaginator(input, logger: logger)
    }

    /// Return PaginatorSequence for operation ``listPreparedStatements(_:logger:)``.
    ///
    /// - Parameters:
    ///   - input: Input for operation
    ///   - logger: Logger used for logging
    @inlinable
    public func listPreparedStatementsPaginator(
        _ input: ListPreparedStatementsInput,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<ListPreparedStatementsInput, ListPreparedStatementsOutput> {
        return .init(
            input: input,
            command: self.listPreparedStatements,
            inputKey: \ListPreparedStatementsInput.nextToken,
            outputKey: \ListPreparedStatementsOutput.nextToken,
            logger: logger
        )
    }
    /// Return PaginatorSequence for operation ``listPreparedStatements(_:logger:)``.
    ///
    /// - Parameters:
    ///   - maxResults: The maximum number of results to return in this request.
    ///   - workGroup: The workgroup to list the prepared statements for.
    ///   - logger: Logger used for logging
    @inlinable
    public func listPreparedStatementsPaginator(
        maxResults: Int? = nil,
        workGroup: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) -> AWSClient.PaginatorSequence<ListPreparedStatementsInput, ListPreparedStatementsOutput> {
        let input = ListPreparedStatementsInput(
            maxResults: maxResults, 
            workGroup: workGroup
        )
        return self.listPreparedStatementsPaginator(input, logger: logger)
    }

    /// Return PaginatorSequence for operation ``listQueryExecutions(_:logger:)``.
    ///
    /// - Parameters:
    ///   - input: Input for operation
    ///   - logger: Logger used for logging
    @inlinable
    public func listQueryExecutionsPaginator(
        _ input: ListQueryExecutionsInput,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<ListQueryExecutionsInput, ListQueryExecutionsOutput> {
        return .init(
            input: input,
            command: self.listQueryExecutions,
            inputKey: \ListQueryExecutionsInput.nextToken,
            outputKey: \ListQueryExecutionsOutput.nextToken,
            logger: logger
        )
    }
    /// Return PaginatorSequence for operation ``listQueryExecutions(_:logger:)``.
    ///
    /// - Parameters:
    ///   - maxResults: The maximum number of query executions to return in this request.
    ///   - workGroup: The name of the workgroup from which queries are being returned. If a workgroup is not specified, a list of available query execution IDs for the queries in the primary workgroup is returned.
    ///   - logger: Logger used for logging
    @inlinable
    public func listQueryExecutionsPaginator(
        maxResults: Int? = nil,
        workGroup: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) -> AWSClient.PaginatorSequence<ListQueryExecutionsInput, ListQueryExecutionsOutput> {
        let input = ListQueryExecutionsInput(
            maxResults: maxResults, 
            workGroup: workGroup
        )
        return self.listQueryExecutionsPaginator(input, logger: logger)
    }

    /// Return PaginatorSequence for operation ``listSessions(_:logger:)``.
    ///
    /// - Parameters:
    ///   - input: Input for operation
    ///   - logger: Logger used for logging
    @inlinable
    public func listSessionsPaginator(
        _ input: ListSessionsRequest,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<ListSessionsRequest, ListSessionsResponse> {
        return .init(
            input: input,
            command: self.listSessions,
            inputKey: \ListSessionsRequest.nextToken,
            outputKey: \ListSessionsResponse.nextToken,
            logger: logger
        )
    }
    /// Return PaginatorSequence for operation ``listSessions(_:logger:)``.
    ///
    /// - Parameters:
    ///   - maxResults: The maximum number of sessions to return.
    ///   - stateFilter: A filter for a specific session state. A description of each state follows.  CREATING - The session is being started, including acquiring resources.  CREATED - The session has been started.  IDLE - The session is able to accept a calculation.  BUSY - The session is processing another task and is unable to accept a calculation.  TERMINATING - The session is in the process of shutting down.  TERMINATED - The session and its resources are no longer running.  DEGRADED - The session has no healthy coordinators.  FAILED - Due to a failure, the session and its resources are no longer running.
    ///   - workGroup: The workgroup to which the session belongs.
    ///   - logger: Logger used for logging
    @inlinable
    public func listSessionsPaginator(
        maxResults: Int? = nil,
        stateFilter: SessionState? = nil,
        workGroup: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) -> AWSClient.PaginatorSequence<ListSessionsRequest, ListSessionsResponse> {
        let input = ListSessionsRequest(
            maxResults: maxResults, 
            stateFilter: stateFilter, 
            workGroup: workGroup
        )
        return self.listSessionsPaginator(input, logger: logger)
    }

    /// Return PaginatorSequence for operation ``listTableMetadata(_:logger:)``.
    ///
    /// - Parameters:
    ///   - input: Input for operation
    ///   - logger: Logger used for logging
    @inlinable
    public func listTableMetadataPaginator(
        _ input: ListTableMetadataInput,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<ListTableMetadataInput, ListTableMetadataOutput> {
        return .init(
            input: input,
            command: self.listTableMetadata,
            inputKey: \ListTableMetadataInput.nextToken,
            outputKey: \ListTableMetadataOutput.nextToken,
            logger: logger
        )
    }
    /// Return PaginatorSequence for operation ``listTableMetadata(_:logger:)``.
    ///
    /// - Parameters:
    ///   - catalogName: The name of the data catalog for which table metadata should be returned.
    ///   - databaseName: The name of the database for which table metadata should be returned.
    ///   - expression: A regex filter that pattern-matches table names. If no expression is supplied, metadata for all tables are listed.
    ///   - maxResults: Specifies the maximum number of results to return.
    ///   - workGroup: The name of the workgroup for which the metadata is being fetched. Required if requesting an IAM Identity Center enabled Glue Data Catalog.
    ///   - logger: Logger used for logging
    @inlinable
    public func listTableMetadataPaginator(
        catalogName: String,
        databaseName: String,
        expression: String? = nil,
        maxResults: Int? = nil,
        workGroup: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) -> AWSClient.PaginatorSequence<ListTableMetadataInput, ListTableMetadataOutput> {
        let input = ListTableMetadataInput(
            catalogName: catalogName, 
            databaseName: databaseName, 
            expression: expression, 
            maxResults: maxResults, 
            workGroup: workGroup
        )
        return self.listTableMetadataPaginator(input, logger: logger)
    }

    /// Return PaginatorSequence for operation ``listTagsForResource(_:logger:)``.
    ///
    /// - Parameters:
    ///   - input: Input for operation
    ///   - logger: Logger used for logging
    @inlinable
    public func listTagsForResourcePaginator(
        _ input: ListTagsForResourceInput,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<ListTagsForResourceInput, ListTagsForResourceOutput> {
        return .init(
            input: input,
            command: self.listTagsForResource,
            inputKey: \ListTagsForResourceInput.nextToken,
            outputKey: \ListTagsForResourceOutput.nextToken,
            logger: logger
        )
    }
    /// Return PaginatorSequence for operation ``listTagsForResource(_:logger:)``.
    ///
    /// - Parameters:
    ///   - maxResults: The maximum number of results to be returned per request that lists the tags for the resource.
    ///   - resourceARN: Lists the tags for the resource with the specified ARN.
    ///   - logger: Logger used for logging
    @inlinable
    public func listTagsForResourcePaginator(
        maxResults: Int? = nil,
        resourceARN: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) -> AWSClient.PaginatorSequence<ListTagsForResourceInput, ListTagsForResourceOutput> {
        let input = ListTagsForResourceInput(
            maxResults: maxResults, 
            resourceARN: resourceARN
        )
        return self.listTagsForResourcePaginator(input, logger: logger)
    }

    /// Return PaginatorSequence for operation ``listWorkGroups(_:logger:)``.
    ///
    /// - Parameters:
    ///   - input: Input for operation
    ///   - logger: Logger used for logging
    @inlinable
    public func listWorkGroupsPaginator(
        _ input: ListWorkGroupsInput,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<ListWorkGroupsInput, ListWorkGroupsOutput> {
        return .init(
            input: input,
            command: self.listWorkGroups,
            inputKey: \ListWorkGroupsInput.nextToken,
            outputKey: \ListWorkGroupsOutput.nextToken,
            logger: logger
        )
    }
    /// Return PaginatorSequence for operation ``listWorkGroups(_:logger:)``.
    ///
    /// - Parameters:
    ///   - maxResults: The maximum number of workgroups to return in this request.
    ///   - logger: Logger used for logging
    @inlinable
    public func listWorkGroupsPaginator(
        maxResults: Int? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) -> AWSClient.PaginatorSequence<ListWorkGroupsInput, ListWorkGroupsOutput> {
        let input = ListWorkGroupsInput(
            maxResults: maxResults
        )
        return self.listWorkGroupsPaginator(input, logger: logger)
    }
}

extension Athena.GetQueryResultsInput: AWSPaginateToken {
    @inlinable
    public func usingPaginationToken(_ token: String) -> Athena.GetQueryResultsInput {
        return .init(
            maxResults: self.maxResults,
            nextToken: token,
            queryExecutionId: self.queryExecutionId
        )
    }
}

extension Athena.ListApplicationDPUSizesInput: AWSPaginateToken {
    @inlinable
    public func usingPaginationToken(_ token: String) -> Athena.ListApplicationDPUSizesInput {
        return .init(
            maxResults: self.maxResults,
            nextToken: token
        )
    }
}

extension Athena.ListCalculationExecutionsRequest: AWSPaginateToken {
    @inlinable
    public func usingPaginationToken(_ token: String) -> Athena.ListCalculationExecutionsRequest {
        return .init(
            maxResults: self.maxResults,
            nextToken: token,
            sessionId: self.sessionId,
            stateFilter: self.stateFilter
        )
    }
}

extension Athena.ListCapacityReservationsInput: AWSPaginateToken {
    @inlinable
    public func usingPaginationToken(_ token: String) -> Athena.ListCapacityReservationsInput {
        return .init(
            maxResults: self.maxResults,
            nextToken: token
        )
    }
}

extension Athena.ListDataCatalogsInput: AWSPaginateToken {
    @inlinable
    public func usingPaginationToken(_ token: String) -> Athena.ListDataCatalogsInput {
        return .init(
            maxResults: self.maxResults,
            nextToken: token,
            workGroup: self.workGroup
        )
    }
}

extension Athena.ListDatabasesInput: AWSPaginateToken {
    @inlinable
    public func usingPaginationToken(_ token: String) -> Athena.ListDatabasesInput {
        return .init(
            catalogName: self.catalogName,
            maxResults: self.maxResults,
            nextToken: token,
            workGroup: self.workGroup
        )
    }
}

extension Athena.ListEngineVersionsInput: AWSPaginateToken {
    @inlinable
    public func usingPaginationToken(_ token: String) -> Athena.ListEngineVersionsInput {
        return .init(
            maxResults: self.maxResults,
            nextToken: token
        )
    }
}

extension Athena.ListExecutorsRequest: AWSPaginateToken {
    @inlinable
    public func usingPaginationToken(_ token: String) -> Athena.ListExecutorsRequest {
        return .init(
            executorStateFilter: self.executorStateFilter,
            maxResults: self.maxResults,
            nextToken: token,
            sessionId: self.sessionId
        )
    }
}

extension Athena.ListNamedQueriesInput: AWSPaginateToken {
    @inlinable
    public func usingPaginationToken(_ token: String) -> Athena.ListNamedQueriesInput {
        return .init(
            maxResults: self.maxResults,
            nextToken: token,
            workGroup: self.workGroup
        )
    }
}

extension Athena.ListPreparedStatementsInput: AWSPaginateToken {
    @inlinable
    public func usingPaginationToken(_ token: String) -> Athena.ListPreparedStatementsInput {
        return .init(
            maxResults: self.maxResults,
            nextToken: token,
            workGroup: self.workGroup
        )
    }
}

extension Athena.ListQueryExecutionsInput: AWSPaginateToken {
    @inlinable
    public func usingPaginationToken(_ token: String) -> Athena.ListQueryExecutionsInput {
        return .init(
            maxResults: self.maxResults,
            nextToken: token,
            workGroup: self.workGroup
        )
    }
}

extension Athena.ListSessionsRequest: AWSPaginateToken {
    @inlinable
    public func usingPaginationToken(_ token: String) -> Athena.ListSessionsRequest {
        return .init(
            maxResults: self.maxResults,
            nextToken: token,
            stateFilter: self.stateFilter,
            workGroup: self.workGroup
        )
    }
}

extension Athena.ListTableMetadataInput: AWSPaginateToken {
    @inlinable
    public func usingPaginationToken(_ token: String) -> Athena.ListTableMetadataInput {
        return .init(
            catalogName: self.catalogName,
            databaseName: self.databaseName,
            expression: self.expression,
            maxResults: self.maxResults,
            nextToken: token,
            workGroup: self.workGroup
        )
    }
}

extension Athena.ListTagsForResourceInput: AWSPaginateToken {
    @inlinable
    public func usingPaginationToken(_ token: String) -> Athena.ListTagsForResourceInput {
        return .init(
            maxResults: self.maxResults,
            nextToken: token,
            resourceARN: self.resourceARN
        )
    }
}

extension Athena.ListWorkGroupsInput: AWSPaginateToken {
    @inlinable
    public func usingPaginationToken(_ token: String) -> Athena.ListWorkGroupsInput {
        return .init(
            maxResults: self.maxResults,
            nextToken: token
        )
    }
}
