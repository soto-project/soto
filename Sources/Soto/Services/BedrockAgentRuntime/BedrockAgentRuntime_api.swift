//===----------------------------------------------------------------------===//
//
// This source file is part of the Soto for AWS open source project
//
// Copyright (c) 2017-2024 the Soto project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
// See CONTRIBUTORS.txt for the list of Soto project authors
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by https://github.com/soto-project/soto-codegenerator.
// DO NOT EDIT.

#if os(Linux) && compiler(<5.10)
// swift-corelibs-foundation hasn't been updated with Sendable conformances
@preconcurrency import Foundation
#else
import Foundation
#endif
@_exported import SotoCore

/// Service object for interacting with AWS BedrockAgentRuntime service.
///
/// Contains APIs related to model invocation and querying of knowledge bases.
public struct BedrockAgentRuntime: AWSService {
    // MARK: Member variables

    /// Client used for communication with AWS
    public let client: AWSClient
    /// Service configuration
    public let config: AWSServiceConfig

    // MARK: Initialization

    /// Initialize the BedrockAgentRuntime client
    /// - parameters:
    ///     - client: AWSClient used to process requests
    ///     - region: Region of server you want to communicate with. This will override the partition parameter.
    ///     - partition: AWS partition where service resides, standard (.aws), china (.awscn), government (.awsusgov).
    ///     - endpoint: Custom endpoint URL to use instead of standard AWS servers
    ///     - middleware: Middleware chain used to edit requests before they are sent and responses before they are decoded 
    ///     - timeout: Timeout value for HTTP requests
    ///     - byteBufferAllocator: Allocator for ByteBuffers
    ///     - options: Service options
    public init(
        client: AWSClient,
        region: SotoCore.Region? = nil,
        partition: AWSPartition = .aws,
        endpoint: String? = nil,
        middleware: AWSMiddlewareProtocol? = nil,
        timeout: TimeAmount? = nil,
        byteBufferAllocator: ByteBufferAllocator = ByteBufferAllocator(),
        options: AWSServiceConfig.Options = []
    ) {
        self.client = client
        self.config = AWSServiceConfig(
            region: region,
            partition: region?.partition ?? partition,
            serviceName: "BedrockAgentRuntime",
            serviceIdentifier: "bedrock-agent-runtime",
            signingName: "bedrock",
            serviceProtocol: .restjson,
            apiVersion: "2023-07-26",
            endpoint: endpoint,
            errorType: BedrockAgentRuntimeErrorType.self,
            middleware: middleware,
            timeout: timeout,
            byteBufferAllocator: byteBufferAllocator,
            options: options
        )
    }





    // MARK: API Calls

    /// Deletes memory from the specified memory identifier.
    @Sendable
    @inlinable
    public func deleteAgentMemory(_ input: DeleteAgentMemoryRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DeleteAgentMemoryResponse {
        try await self.client.execute(
            operation: "DeleteAgentMemory", 
            path: "/agents/{agentId}/agentAliases/{agentAliasId}/memories", 
            httpMethod: .DELETE, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Deletes memory from the specified memory identifier.
    ///
    /// Parameters:
    ///   - agentAliasId: The unique identifier of an alias of an agent.
    ///   - agentId: The unique identifier of the agent to which the alias belongs.
    ///   - memoryId: The unique identifier of the memory.
    ///   - logger: Logger use during operation
    @inlinable
    public func deleteAgentMemory(
        agentAliasId: String,
        agentId: String,
        memoryId: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> DeleteAgentMemoryResponse {
        let input = DeleteAgentMemoryRequest(
            agentAliasId: agentAliasId, 
            agentId: agentId, 
            memoryId: memoryId
        )
        return try await self.deleteAgentMemory(input, logger: logger)
    }

    /// Gets the sessions stored in the memory of the agent.
    @Sendable
    @inlinable
    public func getAgentMemory(_ input: GetAgentMemoryRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> GetAgentMemoryResponse {
        try await self.client.execute(
            operation: "GetAgentMemory", 
            path: "/agents/{agentId}/agentAliases/{agentAliasId}/memories", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Gets the sessions stored in the memory of the agent.
    ///
    /// Parameters:
    ///   - agentAliasId: The unique identifier of an alias of an agent.
    ///   - agentId: The unique identifier of the agent to which the alias belongs.
    ///   - maxItems: The maximum number of items to return in the response. If the total number of results is greater  than this value, use the token returned in the response in the nextToken field when making another  request to return the next batch of results.
    ///   - memoryId: The unique identifier of the memory.
    ///   - memoryType: The type of memory.
    ///   - nextToken: If the total number of results is greater than the maxItems value provided in the request, enter the token returned  in the nextToken field in the response in this field to return the next batch of results.
    ///   - logger: Logger use during operation
    @inlinable
    public func getAgentMemory(
        agentAliasId: String,
        agentId: String,
        maxItems: Int? = nil,
        memoryId: String,
        memoryType: MemoryType,
        nextToken: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> GetAgentMemoryResponse {
        let input = GetAgentMemoryRequest(
            agentAliasId: agentAliasId, 
            agentId: agentId, 
            maxItems: maxItems, 
            memoryId: memoryId, 
            memoryType: memoryType, 
            nextToken: nextToken
        )
        return try await self.getAgentMemory(input, logger: logger)
    }

    ///  The CLI doesn't support streaming operations in Amazon Bedrock, including InvokeAgent.  Sends a prompt for the agent to process and respond to. Note the following fields for the request:   To continue the same conversation with an agent, use the same sessionId value in the request.   To activate trace enablement, turn enableTrace to true. Trace enablement helps you follow the agent's reasoning process that led it to the information it processed, the actions it took, and the final result it yielded. For more information, see Trace enablement.   End a conversation by setting endSession to true.   In the sessionState object, you can include attributes for the session or prompt or, if you configured an action group to return control, results from invocation of the action group.   The response is returned in the bytes field of the chunk object.   The attribution object contains citations for parts of the response.   If you set enableTrace to true in the request, you can trace the agent's steps and reasoning process that led it to the response.   If the action predicted was configured to return control, the response returns parameters for the action, elicited from the user, in the returnControl field.   Errors are also surfaced in the response.
    @Sendable
    @inlinable
    public func invokeAgent(_ input: InvokeAgentRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> InvokeAgentResponse {
        try await self.client.execute(
            operation: "InvokeAgent", 
            path: "/agents/{agentId}/agentAliases/{agentAliasId}/sessions/{sessionId}/text", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    ///  The CLI doesn't support streaming operations in Amazon Bedrock, including InvokeAgent.  Sends a prompt for the agent to process and respond to. Note the following fields for the request:   To continue the same conversation with an agent, use the same sessionId value in the request.   To activate trace enablement, turn enableTrace to true. Trace enablement helps you follow the agent's reasoning process that led it to the information it processed, the actions it took, and the final result it yielded. For more information, see Trace enablement.   End a conversation by setting endSession to true.   In the sessionState object, you can include attributes for the session or prompt or, if you configured an action group to return control, results from invocation of the action group.   The response is returned in the bytes field of the chunk object.   The attribution object contains citations for parts of the response.   If you set enableTrace to true in the request, you can trace the agent's steps and reasoning process that led it to the response.   If the action predicted was configured to return control, the response returns parameters for the action, elicited from the user, in the returnControl field.   Errors are also surfaced in the response.
    ///
    /// Parameters:
    ///   - agentAliasId: The alias of the agent to use.
    ///   - agentId: The unique identifier of the agent to use.
    ///   - enableTrace: Specifies whether to turn on the trace or not to track the agent's reasoning process. For more information, see Trace enablement.
    ///   - endSession: Specifies whether to end the session with the agent or not.
    ///   - inputText: The prompt text to send the agent.  If you include returnControlInvocationResults in the sessionState field, the inputText field will be ignored.
    ///   - memoryId: The unique identifier of the agent memory.
    ///   - sessionId: The unique identifier of the session. Use the same value across requests to continue the same conversation.
    ///   - sessionState: Contains parameters that specify various attributes of the session. For more information, see Control session context.  If you include returnControlInvocationResults in the sessionState field, the inputText field will be ignored.
    ///   - logger: Logger use during operation
    @inlinable
    public func invokeAgent(
        agentAliasId: String,
        agentId: String,
        enableTrace: Bool? = nil,
        endSession: Bool? = nil,
        inputText: String? = nil,
        memoryId: String? = nil,
        sessionId: String,
        sessionState: SessionState? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> InvokeAgentResponse {
        let input = InvokeAgentRequest(
            agentAliasId: agentAliasId, 
            agentId: agentId, 
            enableTrace: enableTrace, 
            endSession: endSession, 
            inputText: inputText, 
            memoryId: memoryId, 
            sessionId: sessionId, 
            sessionState: sessionState
        )
        return try await self.invokeAgent(input, logger: logger)
    }

    /// Invokes an alias of a flow to run the inputs that you specify and return the output of each node as a stream. If there's an error, the error is returned. For more information, see Test a flow in Amazon Bedrock in the Amazon Bedrock User Guide.  The CLI doesn't support streaming operations in Amazon Bedrock, including InvokeFlow.
    @Sendable
    @inlinable
    public func invokeFlow(_ input: InvokeFlowRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> InvokeFlowResponse {
        try await self.client.execute(
            operation: "InvokeFlow", 
            path: "/flows/{flowIdentifier}/aliases/{flowAliasIdentifier}", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Invokes an alias of a flow to run the inputs that you specify and return the output of each node as a stream. If there's an error, the error is returned. For more information, see Test a flow in Amazon Bedrock in the Amazon Bedrock User Guide.  The CLI doesn't support streaming operations in Amazon Bedrock, including InvokeFlow.
    ///
    /// Parameters:
    ///   - enableTrace: Specifies whether to return the trace for the flow or not. Traces track inputs and outputs for nodes in the flow. For more information, see Track each step in your prompt flow by viewing its trace in Amazon Bedrock.
    ///   - flowAliasIdentifier: The unique identifier of the flow alias.
    ///   - flowIdentifier: The unique identifier of the flow.
    ///   - inputs: A list of objects, each containing information about an input into the flow.
    ///   - logger: Logger use during operation
    @inlinable
    public func invokeFlow(
        enableTrace: Bool? = nil,
        flowAliasIdentifier: String,
        flowIdentifier: String,
        inputs: [FlowInput],
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> InvokeFlowResponse {
        let input = InvokeFlowRequest(
            enableTrace: enableTrace, 
            flowAliasIdentifier: flowAliasIdentifier, 
            flowIdentifier: flowIdentifier, 
            inputs: inputs
        )
        return try await self.invokeFlow(input, logger: logger)
    }

    /// Queries a knowledge base and retrieves information from it.
    @Sendable
    @inlinable
    public func retrieve(_ input: RetrieveRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> RetrieveResponse {
        try await self.client.execute(
            operation: "Retrieve", 
            path: "/knowledgebases/{knowledgeBaseId}/retrieve", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Queries a knowledge base and retrieves information from it.
    ///
    /// Parameters:
    ///   - knowledgeBaseId: The unique identifier of the knowledge base to query.
    ///   - nextToken: If there are more results than can fit in the response, the response returns a nextToken. Use this token in the nextToken field of another request to retrieve the next batch of results.
    ///   - retrievalConfiguration: Contains configurations for the knowledge base query and retrieval process. For more information, see Query configurations.
    ///   - retrievalQuery: Contains the query to send the knowledge base.
    ///   - logger: Logger use during operation
    @inlinable
    public func retrieve(
        knowledgeBaseId: String,
        nextToken: String? = nil,
        retrievalConfiguration: KnowledgeBaseRetrievalConfiguration? = nil,
        retrievalQuery: KnowledgeBaseQuery,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> RetrieveResponse {
        let input = RetrieveRequest(
            knowledgeBaseId: knowledgeBaseId, 
            nextToken: nextToken, 
            retrievalConfiguration: retrievalConfiguration, 
            retrievalQuery: retrievalQuery
        )
        return try await self.retrieve(input, logger: logger)
    }

    /// Queries a knowledge base and generates responses based on the retrieved results and using the specified foundation model or inference profile. The response only cites sources that are relevant to the query.
    @Sendable
    @inlinable
    public func retrieveAndGenerate(_ input: RetrieveAndGenerateRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> RetrieveAndGenerateResponse {
        try await self.client.execute(
            operation: "RetrieveAndGenerate", 
            path: "/retrieveAndGenerate", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Queries a knowledge base and generates responses based on the retrieved results and using the specified foundation model or inference profile. The response only cites sources that are relevant to the query.
    ///
    /// Parameters:
    ///   - input: Contains the query to be made to the knowledge base.
    ///   - retrieveAndGenerateConfiguration: Contains configurations for the knowledge base query and retrieval process. For more information, see Query configurations.
    ///   - sessionConfiguration: Contains details about the session with the knowledge base.
    ///   - sessionId: The unique identifier of the session. When you first make a RetrieveAndGenerate request, Amazon Bedrock automatically generates this value. You must reuse this value for all subsequent requests in the same conversational session. This value allows Amazon Bedrock to maintain context and knowledge from previous interactions. You can't explicitly set the sessionId yourself.
    ///   - logger: Logger use during operation
    @inlinable
    public func retrieveAndGenerate(
        input: RetrieveAndGenerateInput,
        retrieveAndGenerateConfiguration: RetrieveAndGenerateConfiguration? = nil,
        sessionConfiguration: RetrieveAndGenerateSessionConfiguration? = nil,
        sessionId: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> RetrieveAndGenerateResponse {
        let input = RetrieveAndGenerateRequest(
            input: input, 
            retrieveAndGenerateConfiguration: retrieveAndGenerateConfiguration, 
            sessionConfiguration: sessionConfiguration, 
            sessionId: sessionId
        )
        return try await self.retrieveAndGenerate(input, logger: logger)
    }
}

extension BedrockAgentRuntime {
    /// Initializer required by `AWSService.with(middlewares:timeout:byteBufferAllocator:options)`. You are not able to use this initializer directly as there are not public
    /// initializers for `AWSServiceConfig.Patch`. Please use `AWSService.with(middlewares:timeout:byteBufferAllocator:options)` instead.
    public init(from: BedrockAgentRuntime, patch: AWSServiceConfig.Patch) {
        self.client = from.client
        self.config = from.config.with(patch: patch)
    }
}

// MARK: Paginators

@available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
extension BedrockAgentRuntime {
    /// Return PaginatorSequence for operation ``getAgentMemory(_:logger:)``.
    ///
    /// - Parameters:
    ///   - input: Input for operation
    ///   - logger: Logger used for logging
    @inlinable
    public func getAgentMemoryPaginator(
        _ input: GetAgentMemoryRequest,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<GetAgentMemoryRequest, GetAgentMemoryResponse> {
        return .init(
            input: input,
            command: self.getAgentMemory,
            inputKey: \GetAgentMemoryRequest.nextToken,
            outputKey: \GetAgentMemoryResponse.nextToken,
            logger: logger
        )
    }
    /// Return PaginatorSequence for operation ``getAgentMemory(_:logger:)``.
    ///
    /// - Parameters:
    ///   - agentAliasId: The unique identifier of an alias of an agent.
    ///   - agentId: The unique identifier of the agent to which the alias belongs.
    ///   - maxItems: The maximum number of items to return in the response. If the total number of results is greater  than this value, use the token returned in the response in the nextToken field when making another  request to return the next batch of results.
    ///   - memoryId: The unique identifier of the memory.
    ///   - memoryType: The type of memory.
    ///   - logger: Logger used for logging
    @inlinable
    public func getAgentMemoryPaginator(
        agentAliasId: String,
        agentId: String,
        maxItems: Int? = nil,
        memoryId: String,
        memoryType: MemoryType,
        logger: Logger = AWSClient.loggingDisabled        
    ) -> AWSClient.PaginatorSequence<GetAgentMemoryRequest, GetAgentMemoryResponse> {
        let input = GetAgentMemoryRequest(
            agentAliasId: agentAliasId, 
            agentId: agentId, 
            maxItems: maxItems, 
            memoryId: memoryId, 
            memoryType: memoryType
        )
        return self.getAgentMemoryPaginator(input, logger: logger)
    }

    /// Return PaginatorSequence for operation ``retrieve(_:logger:)``.
    ///
    /// - Parameters:
    ///   - input: Input for operation
    ///   - logger: Logger used for logging
    @inlinable
    public func retrievePaginator(
        _ input: RetrieveRequest,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<RetrieveRequest, RetrieveResponse> {
        return .init(
            input: input,
            command: self.retrieve,
            inputKey: \RetrieveRequest.nextToken,
            outputKey: \RetrieveResponse.nextToken,
            logger: logger
        )
    }
    /// Return PaginatorSequence for operation ``retrieve(_:logger:)``.
    ///
    /// - Parameters:
    ///   - knowledgeBaseId: The unique identifier of the knowledge base to query.
    ///   - retrievalConfiguration: Contains configurations for the knowledge base query and retrieval process. For more information, see Query configurations.
    ///   - retrievalQuery: Contains the query to send the knowledge base.
    ///   - logger: Logger used for logging
    @inlinable
    public func retrievePaginator(
        knowledgeBaseId: String,
        retrievalConfiguration: KnowledgeBaseRetrievalConfiguration? = nil,
        retrievalQuery: KnowledgeBaseQuery,
        logger: Logger = AWSClient.loggingDisabled        
    ) -> AWSClient.PaginatorSequence<RetrieveRequest, RetrieveResponse> {
        let input = RetrieveRequest(
            knowledgeBaseId: knowledgeBaseId, 
            retrievalConfiguration: retrievalConfiguration, 
            retrievalQuery: retrievalQuery
        )
        return self.retrievePaginator(input, logger: logger)
    }
}

extension BedrockAgentRuntime.GetAgentMemoryRequest: AWSPaginateToken {
    @inlinable
    public func usingPaginationToken(_ token: String) -> BedrockAgentRuntime.GetAgentMemoryRequest {
        return .init(
            agentAliasId: self.agentAliasId,
            agentId: self.agentId,
            maxItems: self.maxItems,
            memoryId: self.memoryId,
            memoryType: self.memoryType,
            nextToken: token
        )
    }
}

extension BedrockAgentRuntime.RetrieveRequest: AWSPaginateToken {
    @inlinable
    public func usingPaginationToken(_ token: String) -> BedrockAgentRuntime.RetrieveRequest {
        return .init(
            knowledgeBaseId: self.knowledgeBaseId,
            nextToken: token,
            retrievalConfiguration: self.retrievalConfiguration,
            retrievalQuery: self.retrievalQuery
        )
    }
}
