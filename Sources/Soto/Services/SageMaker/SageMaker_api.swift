//===----------------------------------------------------------------------===//
//
// This source file is part of the Soto for AWS open source project
//
// Copyright (c) 2017-2023 the Soto project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
// See CONTRIBUTORS.txt for the list of Soto project authors
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by https://github.com/soto-project/soto-codegenerator.
// DO NOT EDIT.

@_exported import SotoCore

/// Service object for interacting with AWS SageMaker service.
///
/// Provides APIs for creating and managing SageMaker resources.  Other Resources:    SageMaker Developer Guide     Amazon Augmented AI Runtime API Reference
public struct SageMaker: AWSService {
    // MARK: Member variables

    /// Client used for communication with AWS
    public let client: AWSClient
    /// Service configuration
    public let config: AWSServiceConfig

    // MARK: Initialization

    /// Initialize the SageMaker client
    /// - parameters:
    ///     - client: AWSClient used to process requests
    ///     - region: Region of server you want to communicate with. This will override the partition parameter.
    ///     - partition: AWS partition where service resides, standard (.aws), china (.awscn), government (.awsusgov).
    ///     - endpoint: Custom endpoint URL to use instead of standard AWS servers
    ///     - middleware: Middleware chain used to edit requests before they are sent and responses before they are decoded 
    ///     - timeout: Timeout value for HTTP requests
    ///     - byteBufferAllocator: Allocator for ByteBuffers
    ///     - options: Service options
    public init(
        client: AWSClient,
        region: SotoCore.Region? = nil,
        partition: AWSPartition = .aws,
        endpoint: String? = nil,
        middleware: AWSMiddlewareProtocol? = nil,
        timeout: TimeAmount? = nil,
        byteBufferAllocator: ByteBufferAllocator = ByteBufferAllocator(),
        options: AWSServiceConfig.Options = []
    ) {
        self.client = client
        self.config = AWSServiceConfig(
            region: region,
            partition: region?.partition ?? partition,
            amzTarget: "SageMaker",
            serviceName: "SageMaker",
            serviceIdentifier: "api.sagemaker",
            signingName: "sagemaker",
            serviceProtocol: .json(version: "1.1"),
            apiVersion: "2017-07-24",
            endpoint: endpoint,
            variantEndpoints: Self.variantEndpoints,
            errorType: SageMakerErrorType.self,
            xmlNamespace: "http://sagemaker.amazonaws.com/doc/2017-05-13/",
            middleware: middleware,
            timeout: timeout,
            byteBufferAllocator: byteBufferAllocator,
            options: options
        )
    }




    /// FIPS and dualstack endpoints
    static var variantEndpoints: [EndpointVariantType: AWSServiceConfig.EndpointVariant] {[
        [.fips]: .init(endpoints: [
            "af-south-1": "api-fips.sagemaker.af-south-1.amazonaws.com",
            "ap-east-1": "api-fips.sagemaker.ap-east-1.amazonaws.com",
            "ap-northeast-1": "api-fips.sagemaker.ap-northeast-1.amazonaws.com",
            "ap-northeast-2": "api-fips.sagemaker.ap-northeast-2.amazonaws.com",
            "ap-northeast-3": "api-fips.sagemaker.ap-northeast-3.amazonaws.com",
            "ap-south-1": "api-fips.sagemaker.ap-south-1.amazonaws.com",
            "ap-south-2": "api-fips.sagemaker.ap-south-2.amazonaws.com",
            "ap-southeast-1": "api-fips.sagemaker.ap-southeast-1.amazonaws.com",
            "ap-southeast-2": "api-fips.sagemaker.ap-southeast-2.amazonaws.com",
            "ap-southeast-3": "api-fips.sagemaker.ap-southeast-3.amazonaws.com",
            "ap-southeast-4": "api-fips.sagemaker.ap-southeast-4.amazonaws.com",
            "ca-central-1": "api-fips.sagemaker.ca-central-1.amazonaws.com",
            "ca-west-1": "api-fips.sagemaker.ca-west-1.amazonaws.com",
            "eu-central-1": "api-fips.sagemaker.eu-central-1.amazonaws.com",
            "eu-central-2": "api-fips.sagemaker.eu-central-2.amazonaws.com",
            "eu-north-1": "api-fips.sagemaker.eu-north-1.amazonaws.com",
            "eu-south-1": "api-fips.sagemaker.eu-south-1.amazonaws.com",
            "eu-south-2": "api-fips.sagemaker.eu-south-2.amazonaws.com",
            "eu-west-1": "api-fips.sagemaker.eu-west-1.amazonaws.com",
            "eu-west-2": "api-fips.sagemaker.eu-west-2.amazonaws.com",
            "eu-west-3": "api-fips.sagemaker.eu-west-3.amazonaws.com",
            "il-central-1": "api-fips.sagemaker.il-central-1.amazonaws.com",
            "me-central-1": "api-fips.sagemaker.me-central-1.amazonaws.com",
            "me-south-1": "api-fips.sagemaker.me-south-1.amazonaws.com",
            "sa-east-1": "api-fips.sagemaker.sa-east-1.amazonaws.com",
            "us-east-1": "api-fips.sagemaker.us-east-1.amazonaws.com",
            "us-east-2": "api-fips.sagemaker.us-east-2.amazonaws.com",
            "us-gov-east-1": "api-fips.sagemaker.us-gov-east-1.amazonaws.com",
            "us-gov-west-1": "api-fips.sagemaker.us-gov-west-1.amazonaws.com",
            "us-west-1": "api-fips.sagemaker.us-west-1.amazonaws.com",
            "us-west-2": "api-fips.sagemaker.us-west-2.amazonaws.com"
        ])
    ]}

    // MARK: API Calls

    /// Creates an association between the source and the destination. A source can be associated with multiple destinations, and a destination can be associated with multiple sources. An association is a lineage tracking entity. For more information, see Amazon SageMaker ML Lineage Tracking.
    @Sendable
    public func addAssociation(_ input: AddAssociationRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> AddAssociationResponse {
        return try await self.client.execute(
            operation: "AddAssociation", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Adds or overwrites one or more tags for the specified SageMaker resource. You can add tags to notebook instances, training jobs, hyperparameter tuning jobs, batch transform jobs, models, labeling jobs, work teams, endpoint configurations, and endpoints. Each tag consists of a key and an optional value. Tag keys must be unique per resource. For more information about tags, see For more information, see Amazon Web Services Tagging Strategies.  Tags that you add to a hyperparameter tuning job by calling this API are also added to any training jobs that the hyperparameter tuning job launches after you call this API, but not to training jobs that the hyperparameter tuning job launched before you called this API. To make sure that the tags associated with a hyperparameter tuning job are also added to all training jobs that the hyperparameter tuning job launches, add the tags when you first create the tuning job by specifying them in the Tags parameter of CreateHyperParameterTuningJob    Tags that you add to a SageMaker Domain or User Profile by calling this API are also added to any Apps that the Domain or User Profile launches after you call this API, but not to Apps that the Domain or User Profile launched before you called this API. To make sure that the tags associated with a Domain or User Profile are also added to all Apps that the Domain or User Profile launches, add the tags when you first create the Domain or User Profile by specifying them in the Tags parameter of CreateDomain or CreateUserProfile.
    @Sendable
    public func addTags(_ input: AddTagsInput, logger: Logger = AWSClient.loggingDisabled) async throws -> AddTagsOutput {
        return try await self.client.execute(
            operation: "AddTags", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Associates a trial component with a trial. A trial component can be associated with multiple trials. To disassociate a trial component from a trial, call the DisassociateTrialComponent API.
    @Sendable
    public func associateTrialComponent(_ input: AssociateTrialComponentRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> AssociateTrialComponentResponse {
        return try await self.client.execute(
            operation: "AssociateTrialComponent", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// This action batch describes a list of versioned model packages
    @Sendable
    public func batchDescribeModelPackage(_ input: BatchDescribeModelPackageInput, logger: Logger = AWSClient.loggingDisabled) async throws -> BatchDescribeModelPackageOutput {
        return try await self.client.execute(
            operation: "BatchDescribeModelPackage", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Creates an action. An action is a lineage tracking entity that represents an action or activity. For example, a model deployment or an HPO job. Generally, an action involves at least one input or output artifact. For more information, see Amazon SageMaker ML Lineage Tracking.
    @Sendable
    public func createAction(_ input: CreateActionRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> CreateActionResponse {
        return try await self.client.execute(
            operation: "CreateAction", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Create a machine learning algorithm that you can use in SageMaker and list in the Amazon Web Services Marketplace.
    @Sendable
    public func createAlgorithm(_ input: CreateAlgorithmInput, logger: Logger = AWSClient.loggingDisabled) async throws -> CreateAlgorithmOutput {
        return try await self.client.execute(
            operation: "CreateAlgorithm", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Creates a running app for the specified UserProfile. This operation is automatically invoked by Amazon SageMaker upon access to the associated Domain, and when new kernel configurations are selected by the user. A user may have multiple Apps active simultaneously.
    @Sendable
    public func createApp(_ input: CreateAppRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> CreateAppResponse {
        return try await self.client.execute(
            operation: "CreateApp", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Creates a configuration for running a SageMaker image as a KernelGateway app. The configuration specifies the Amazon Elastic File System storage volume on the image, and a list of the kernels in the image.
    @Sendable
    public func createAppImageConfig(_ input: CreateAppImageConfigRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> CreateAppImageConfigResponse {
        return try await self.client.execute(
            operation: "CreateAppImageConfig", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Creates an artifact. An artifact is a lineage tracking entity that represents a URI addressable object or data. Some examples are the S3 URI of a dataset and the ECR registry path of an image. For more information, see Amazon SageMaker ML Lineage Tracking.
    @Sendable
    public func createArtifact(_ input: CreateArtifactRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> CreateArtifactResponse {
        return try await self.client.execute(
            operation: "CreateArtifact", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Creates an Autopilot job also referred to as Autopilot experiment or AutoML job.  We recommend using the new versions CreateAutoMLJobV2 and DescribeAutoMLJobV2, which offer backward compatibility.  CreateAutoMLJobV2 can manage tabular problem types identical to those of its previous version CreateAutoMLJob, as well as time-series forecasting, non-tabular problem types such as image or text classification, and text generation (LLMs fine-tuning). Find guidelines about how to migrate a CreateAutoMLJob to CreateAutoMLJobV2 in Migrate a CreateAutoMLJob to CreateAutoMLJobV2.  You can find the best-performing model after you run an AutoML job by calling DescribeAutoMLJobV2 (recommended) or DescribeAutoMLJob.
    @Sendable
    public func createAutoMLJob(_ input: CreateAutoMLJobRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> CreateAutoMLJobResponse {
        return try await self.client.execute(
            operation: "CreateAutoMLJob", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Creates an Autopilot job also referred to as Autopilot experiment or AutoML job V2.   CreateAutoMLJobV2 and DescribeAutoMLJobV2 are new versions of CreateAutoMLJob and DescribeAutoMLJob which offer backward compatibility.  CreateAutoMLJobV2 can manage tabular problem types identical to those of its previous version CreateAutoMLJob, as well as time-series forecasting, non-tabular problem types such as image or text classification, and text generation (LLMs fine-tuning). Find guidelines about how to migrate a CreateAutoMLJob to CreateAutoMLJobV2 in Migrate a CreateAutoMLJob to CreateAutoMLJobV2.  For the list of available problem types supported by CreateAutoMLJobV2, see AutoMLProblemTypeConfig. You can find the best-performing model after you run an AutoML job V2 by calling DescribeAutoMLJobV2.
    @Sendable
    public func createAutoMLJobV2(_ input: CreateAutoMLJobV2Request, logger: Logger = AWSClient.loggingDisabled) async throws -> CreateAutoMLJobV2Response {
        return try await self.client.execute(
            operation: "CreateAutoMLJobV2", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Creates a SageMaker HyperPod cluster. SageMaker HyperPod is a capability of SageMaker for creating and managing persistent clusters for developing large machine learning models, such as large language models (LLMs) and diffusion models. To learn more, see Amazon SageMaker HyperPod in the Amazon SageMaker Developer Guide.
    @Sendable
    public func createCluster(_ input: CreateClusterRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> CreateClusterResponse {
        return try await self.client.execute(
            operation: "CreateCluster", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Creates a Git repository as a resource in your SageMaker account. You can associate the repository with notebook instances so that you can use Git source control for the notebooks you create. The Git repository is a resource in your SageMaker account, so it can be associated with more than one notebook instance, and it persists independently from the lifecycle of any notebook instances it is associated with. The repository can be hosted either in Amazon Web Services CodeCommit or in any other Git repository.
    @Sendable
    public func createCodeRepository(_ input: CreateCodeRepositoryInput, logger: Logger = AWSClient.loggingDisabled) async throws -> CreateCodeRepositoryOutput {
        return try await self.client.execute(
            operation: "CreateCodeRepository", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Starts a model compilation job. After the model has been compiled, Amazon SageMaker saves the resulting model artifacts to an Amazon Simple Storage Service (Amazon S3) bucket that you specify.  If you choose to host your model using Amazon SageMaker hosting services, you can use the resulting model artifacts as part of the model. You can also use the artifacts with Amazon Web Services IoT Greengrass. In that case, deploy them as an ML resource. In the request body, you provide the following:   A name for the compilation job   Information about the input model artifacts    The output location for the compiled model and the device (target) that the model runs on    The Amazon Resource Name (ARN) of the IAM role that Amazon SageMaker assumes to perform the model compilation job.    You can also provide a Tag to track the model compilation job's resource use and costs. The response body contains the CompilationJobArn for the compiled job. To stop a model compilation job, use StopCompilationJob. To get information about a particular model compilation job, use DescribeCompilationJob. To get information about multiple model compilation jobs, use ListCompilationJobs.
    @Sendable
    public func createCompilationJob(_ input: CreateCompilationJobRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> CreateCompilationJobResponse {
        return try await self.client.execute(
            operation: "CreateCompilationJob", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Creates a context. A context is a lineage tracking entity that represents a logical grouping of other tracking or experiment entities. Some examples are an endpoint and a model package. For more information, see Amazon SageMaker ML Lineage Tracking.
    @Sendable
    public func createContext(_ input: CreateContextRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> CreateContextResponse {
        return try await self.client.execute(
            operation: "CreateContext", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Creates a definition for a job that monitors data quality and drift. For information about model monitor, see Amazon SageMaker Model Monitor.
    @Sendable
    public func createDataQualityJobDefinition(_ input: CreateDataQualityJobDefinitionRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> CreateDataQualityJobDefinitionResponse {
        return try await self.client.execute(
            operation: "CreateDataQualityJobDefinition", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Creates a device fleet.
    @Sendable
    public func createDeviceFleet(_ input: CreateDeviceFleetRequest, logger: Logger = AWSClient.loggingDisabled) async throws {
        return try await self.client.execute(
            operation: "CreateDeviceFleet", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Creates a Domain. A domain consists of an associated Amazon Elastic File System volume, a list of authorized users, and a variety of security, application, policy, and Amazon Virtual Private Cloud (VPC) configurations. Users within a domain can share notebook files and other artifacts with each other.  EFS storage  When a domain is created, an EFS volume is created for use by all of the users within the domain. Each user receives a private home directory within the EFS volume for notebooks, Git repositories, and data files. SageMaker uses the Amazon Web Services Key Management Service (Amazon Web Services KMS) to encrypt the EFS volume attached to the domain with an Amazon Web Services managed key by default. For more control, you can specify a customer managed key. For more information, see Protect Data at Rest Using Encryption.  VPC configuration  All traffic between the domain and the Amazon EFS volume is through the specified VPC and subnets. For other traffic, you can specify the AppNetworkAccessType parameter. AppNetworkAccessType corresponds to the network access type that you choose when you onboard to the domain. The following options are available:    PublicInternetOnly - Non-EFS traffic goes through a VPC managed by Amazon SageMaker, which allows internet access. This is the default value.    VpcOnly - All traffic is through the specified VPC and subnets. Internet access is disabled by default. To allow internet access, you must specify a NAT gateway. When internet access is disabled, you won't be able to run a Amazon SageMaker Studio notebook or to train or host models unless your VPC has an interface endpoint to the SageMaker API and runtime or a NAT gateway and your security groups allow outbound connections.    NFS traffic over TCP on port 2049 needs to be allowed in both inbound and outbound rules in order to launch a Amazon SageMaker Studio app successfully.  For more information, see Connect Amazon SageMaker Studio Notebooks to Resources in a VPC.
    @Sendable
    public func createDomain(_ input: CreateDomainRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> CreateDomainResponse {
        return try await self.client.execute(
            operation: "CreateDomain", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Creates an edge deployment plan, consisting of multiple stages. Each stage may have a different deployment configuration and devices.
    @Sendable
    public func createEdgeDeploymentPlan(_ input: CreateEdgeDeploymentPlanRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> CreateEdgeDeploymentPlanResponse {
        return try await self.client.execute(
            operation: "CreateEdgeDeploymentPlan", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Creates a new stage in an existing edge deployment plan.
    @Sendable
    public func createEdgeDeploymentStage(_ input: CreateEdgeDeploymentStageRequest, logger: Logger = AWSClient.loggingDisabled) async throws {
        return try await self.client.execute(
            operation: "CreateEdgeDeploymentStage", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Starts a SageMaker Edge Manager model packaging job. Edge Manager will use the model artifacts from the Amazon Simple Storage Service bucket that you specify. After the model has been packaged, Amazon SageMaker saves the resulting artifacts to an S3 bucket that you specify.
    @Sendable
    public func createEdgePackagingJob(_ input: CreateEdgePackagingJobRequest, logger: Logger = AWSClient.loggingDisabled) async throws {
        return try await self.client.execute(
            operation: "CreateEdgePackagingJob", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Creates an endpoint using the endpoint configuration specified in the request. SageMaker uses the endpoint to provision resources and deploy models. You create the endpoint configuration with the CreateEndpointConfig API.  Use this API to deploy models using SageMaker hosting services.   You must not delete an EndpointConfig that is in use by an endpoint that is live or while the UpdateEndpoint or CreateEndpoint operations are being performed on the endpoint. To update an endpoint, you must create a new EndpointConfig.  The endpoint name must be unique within an Amazon Web Services Region in your Amazon Web Services account.  When it receives the request, SageMaker creates the endpoint, launches the resources (ML compute instances), and deploys the model(s) on them.   When you call CreateEndpoint, a load call is made to DynamoDB to verify that your endpoint configuration exists. When you read data from a DynamoDB table supporting  Eventually Consistent Reads , the response might not reflect the results of a recently completed write operation. The response might include some stale data. If the dependent entities are not yet in DynamoDB, this causes a validation error. If you repeat your read request after a short time, the response should return the latest data. So retry logic is recommended to handle these possible issues. We also recommend that customers call DescribeEndpointConfig before calling CreateEndpoint to minimize the potential impact of a DynamoDB eventually consistent read.  When SageMaker receives the request, it sets the endpoint status to Creating. After it creates the endpoint, it sets the status to InService. SageMaker can then process incoming requests for inferences. To check the status of an endpoint, use the DescribeEndpoint API. If any of the models hosted at this endpoint get model data from an Amazon S3 location, SageMaker uses Amazon Web Services Security Token Service to download model artifacts from the S3 path you provided. Amazon Web Services STS is activated in your Amazon Web Services account by default. If you previously deactivated Amazon Web Services STS for a region, you need to reactivate Amazon Web Services STS for that region. For more information, see Activating and Deactivating Amazon Web Services STS in an Amazon Web Services Region in the Amazon Web Services Identity and Access Management User Guide.  To add the IAM role policies for using this API operation, go to the IAM console, and choose Roles in the left navigation pane. Search the IAM role that you want to grant access to use the CreateEndpoint and CreateEndpointConfig API operations, add the following policies to the role.    Option 1: For a full SageMaker access, search and attach the AmazonSageMakerFullAccess policy.   Option 2: For granting a limited access to an IAM role, paste the following Action elements manually into the JSON file of the IAM role:   "Action": ["sagemaker:CreateEndpoint", "sagemaker:CreateEndpointConfig"]   "Resource": [   "arn:aws:sagemaker:region:account-id:endpoint/endpointName"   "arn:aws:sagemaker:region:account-id:endpoint-config/endpointConfigName"   ]  For more information, see SageMaker API Permissions: Actions, Permissions, and Resources Reference.
    @Sendable
    public func createEndpoint(_ input: CreateEndpointInput, logger: Logger = AWSClient.loggingDisabled) async throws -> CreateEndpointOutput {
        return try await self.client.execute(
            operation: "CreateEndpoint", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Creates an endpoint configuration that SageMaker hosting services uses to deploy models. In the configuration, you identify one or more models, created using the CreateModel API, to deploy and the resources that you want SageMaker to provision. Then you call the CreateEndpoint API.  Use this API if you want to use SageMaker hosting services to deploy models into production.   In the request, you define a ProductionVariant, for each model that you want to deploy. Each ProductionVariant parameter also describes the resources that you want SageMaker to provision. This includes the number and type of ML compute instances to deploy.  If you are hosting multiple models, you also assign a VariantWeight to specify how much traffic you want to allocate to each model. For example, suppose that you want to host two models, A and B, and you assign traffic weight 2 for model A and 1 for model B. SageMaker distributes two-thirds of the traffic to Model A, and one-third to model B.   When you call CreateEndpoint, a load call is made to DynamoDB to verify that your endpoint configuration exists. When you read data from a DynamoDB table supporting  Eventually Consistent Reads , the response might not reflect the results of a recently completed write operation. The response might include some stale data. If the dependent entities are not yet in DynamoDB, this causes a validation error. If you repeat your read request after a short time, the response should return the latest data. So retry logic is recommended to handle these possible issues. We also recommend that customers call DescribeEndpointConfig before calling CreateEndpoint to minimize the potential impact of a DynamoDB eventually consistent read.
    @Sendable
    public func createEndpointConfig(_ input: CreateEndpointConfigInput, logger: Logger = AWSClient.loggingDisabled) async throws -> CreateEndpointConfigOutput {
        return try await self.client.execute(
            operation: "CreateEndpointConfig", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Creates a SageMaker experiment. An experiment is a collection of trials that are observed, compared and evaluated as a group. A trial is a set of steps, called trial components, that produce a machine learning model.  In the Studio UI, trials are referred to as run groups and trial components are referred to as runs.  The goal of an experiment is to determine the components that produce the best model. Multiple trials are performed, each one isolating and measuring the impact of a change to one or more inputs, while keeping the remaining inputs constant. When you use SageMaker Studio or the SageMaker Python SDK, all experiments, trials, and trial components are automatically tracked, logged, and indexed. When you use the Amazon Web Services SDK for Python (Boto), you must use the logging APIs provided by the SDK. You can add tags to experiments, trials, trial components and then use the Search API to search for the tags. To add a description to an experiment, specify the optional Description parameter. To add a description later, or to change the description, call the UpdateExperiment API. To get a list of all your experiments, call the ListExperiments API. To view an experiment's properties, call the DescribeExperiment API. To get a list of all the trials associated with an experiment, call the ListTrials API. To create a trial call the CreateTrial API.
    @Sendable
    public func createExperiment(_ input: CreateExperimentRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> CreateExperimentResponse {
        return try await self.client.execute(
            operation: "CreateExperiment", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Create a new FeatureGroup. A FeatureGroup is a group of Features defined in the FeatureStore to describe a Record.  The FeatureGroup defines the schema and features contained in the FeatureGroup. A FeatureGroup definition is composed of a list of Features, a RecordIdentifierFeatureName, an EventTimeFeatureName and configurations for its OnlineStore and OfflineStore. Check Amazon Web Services service quotas to see the FeatureGroups quota for your Amazon Web Services account. Note that it can take approximately 10-15 minutes to provision an OnlineStore FeatureGroup with the InMemory StorageType.  You must include at least one of OnlineStoreConfig and OfflineStoreConfig to create a FeatureGroup.
    @Sendable
    public func createFeatureGroup(_ input: CreateFeatureGroupRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> CreateFeatureGroupResponse {
        return try await self.client.execute(
            operation: "CreateFeatureGroup", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Creates a flow definition.
    @Sendable
    public func createFlowDefinition(_ input: CreateFlowDefinitionRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> CreateFlowDefinitionResponse {
        return try await self.client.execute(
            operation: "CreateFlowDefinition", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Create a hub.  Hub APIs are only callable through SageMaker Studio.
    @Sendable
    public func createHub(_ input: CreateHubRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> CreateHubResponse {
        return try await self.client.execute(
            operation: "CreateHub", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Defines the settings you will use for the human review workflow user interface. Reviewers will see a three-panel interface with an instruction area, the item to review, and an input area.
    @Sendable
    public func createHumanTaskUi(_ input: CreateHumanTaskUiRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> CreateHumanTaskUiResponse {
        return try await self.client.execute(
            operation: "CreateHumanTaskUi", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Starts a hyperparameter tuning job. A hyperparameter tuning job finds the best version of a model by running many training jobs on your dataset using the algorithm you choose and values for hyperparameters within ranges that you specify. It then chooses the hyperparameter values that result in a model that performs the best, as measured by an objective metric that you choose. A hyperparameter tuning job automatically creates Amazon SageMaker experiments, trials, and trial components for each training job that it runs. You can view these entities in Amazon SageMaker Studio. For more information, see View Experiments, Trials, and Trial Components.  Do not include any security-sensitive information including account access IDs, secrets or tokens in any hyperparameter field. If the use of security-sensitive credentials are detected, SageMaker will reject your training job request and return an exception error.
    @Sendable
    public func createHyperParameterTuningJob(_ input: CreateHyperParameterTuningJobRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> CreateHyperParameterTuningJobResponse {
        return try await self.client.execute(
            operation: "CreateHyperParameterTuningJob", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Creates a custom SageMaker image. A SageMaker image is a set of image versions. Each image version represents a container image stored in Amazon ECR. For more information, see Bring your own SageMaker image.
    @Sendable
    public func createImage(_ input: CreateImageRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> CreateImageResponse {
        return try await self.client.execute(
            operation: "CreateImage", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Creates a version of the SageMaker image specified by ImageName. The version represents the Amazon ECR container image specified by BaseImage.
    @Sendable
    public func createImageVersion(_ input: CreateImageVersionRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> CreateImageVersionResponse {
        return try await self.client.execute(
            operation: "CreateImageVersion", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Creates an inference component, which is a SageMaker hosting object that you can use to deploy a model to an endpoint. In the inference component settings, you specify the model, the endpoint, and how the model utilizes the resources that the endpoint hosts. You can optimize resource utilization by tailoring how the required CPU cores, accelerators, and memory are allocated. You can deploy multiple inference components to an endpoint, where each inference component contains one model and the resource utilization needs for that individual model. After you deploy an inference component, you can directly invoke the associated model when you use the InvokeEndpoint API action.
    @Sendable
    public func createInferenceComponent(_ input: CreateInferenceComponentInput, logger: Logger = AWSClient.loggingDisabled) async throws -> CreateInferenceComponentOutput {
        return try await self.client.execute(
            operation: "CreateInferenceComponent", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    ///  Creates an inference experiment using the configurations specified in the request.   Use this API to setup and schedule an experiment to compare model variants on a Amazon SageMaker inference endpoint. For more information about inference experiments, see Shadow tests.   Amazon SageMaker begins your experiment at the scheduled time and routes traffic to your endpoint's model variants based on your specified configuration.   While the experiment is in progress or after it has concluded, you can view metrics that compare your model variants. For more information, see View, monitor, and edit shadow tests.
    @Sendable
    public func createInferenceExperiment(_ input: CreateInferenceExperimentRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> CreateInferenceExperimentResponse {
        return try await self.client.execute(
            operation: "CreateInferenceExperiment", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Starts a recommendation job. You can create either an instance  recommendation or load test job.
    @Sendable
    public func createInferenceRecommendationsJob(_ input: CreateInferenceRecommendationsJobRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> CreateInferenceRecommendationsJobResponse {
        return try await self.client.execute(
            operation: "CreateInferenceRecommendationsJob", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Creates a job that uses workers to label the data objects in your input dataset. You can use the labeled data to train machine learning models.  You can select your workforce from one of three providers:   A private workforce that you create. It can include employees, contractors, and outside experts. Use a private workforce when want the data to stay within your organization or when a specific set of skills is required.   One or more vendors that you select from the Amazon Web Services Marketplace. Vendors provide expertise in specific areas.    The Amazon Mechanical Turk workforce. This is the largest workforce, but it should only be used for public data or data that has been stripped of any personally identifiable information.   You can also use automated data labeling to reduce the number of data objects that need to be labeled by a human. Automated data labeling uses active learning to determine if a data object can be labeled by machine or if it needs to be sent to a human worker. For more information, see Using Automated Data Labeling. The data objects to be labeled are contained in an Amazon S3 bucket. You create a manifest file that describes the location of each object. For more information, see Using Input and Output Data. The output can be used as the manifest file for another labeling job or as training data for your machine learning models. You can use this operation to create a static labeling job or a streaming labeling job. A static labeling job stops if all data objects in the input manifest file identified in ManifestS3Uri have been labeled. A streaming labeling job runs perpetually until it is manually stopped, or remains idle for 10 days. You can send new data objects to an active (InProgress) streaming labeling job in real time. To learn how to create a static labeling job, see Create a Labeling Job (API)  in the Amazon SageMaker Developer Guide. To learn how to create a streaming labeling job, see Create a Streaming Labeling Job.
    @Sendable
    public func createLabelingJob(_ input: CreateLabelingJobRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> CreateLabelingJobResponse {
        return try await self.client.execute(
            operation: "CreateLabelingJob", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Creates a model in SageMaker. In the request, you name the model and describe a primary container. For the primary container, you specify the Docker image that contains inference code, artifacts (from prior training), and a custom environment map that the inference code uses when you deploy the model for predictions. Use this API to create a model if you want to use SageMaker hosting services or run a batch transform job. To host your model, you create an endpoint configuration with the CreateEndpointConfig API, and then create an endpoint with the CreateEndpoint API. SageMaker then deploys all of the containers that you defined for the model in the hosting environment.  To run a batch transform using your model, you start a job with the CreateTransformJob API. SageMaker uses your model and your dataset to get inferences which are then saved to a specified S3 location. In the request, you also provide an IAM role that SageMaker can assume to access model artifacts and docker image for deployment on ML compute hosting instances or for batch transform jobs. In addition, you also use the IAM role to manage permissions the inference code needs. For example, if the inference code access any other Amazon Web Services resources, you grant necessary permissions via this role.
    @Sendable
    public func createModel(_ input: CreateModelInput, logger: Logger = AWSClient.loggingDisabled) async throws -> CreateModelOutput {
        return try await self.client.execute(
            operation: "CreateModel", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Creates the definition for a model bias job.
    @Sendable
    public func createModelBiasJobDefinition(_ input: CreateModelBiasJobDefinitionRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> CreateModelBiasJobDefinitionResponse {
        return try await self.client.execute(
            operation: "CreateModelBiasJobDefinition", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Creates an Amazon SageMaker Model Card. For information about how to use model cards, see Amazon SageMaker Model Card.
    @Sendable
    public func createModelCard(_ input: CreateModelCardRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> CreateModelCardResponse {
        return try await self.client.execute(
            operation: "CreateModelCard", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Creates an Amazon SageMaker Model Card export job.
    @Sendable
    public func createModelCardExportJob(_ input: CreateModelCardExportJobRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> CreateModelCardExportJobResponse {
        return try await self.client.execute(
            operation: "CreateModelCardExportJob", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Creates the definition for a model explainability job.
    @Sendable
    public func createModelExplainabilityJobDefinition(_ input: CreateModelExplainabilityJobDefinitionRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> CreateModelExplainabilityJobDefinitionResponse {
        return try await self.client.execute(
            operation: "CreateModelExplainabilityJobDefinition", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Creates a model package that you can use to create SageMaker models or list on Amazon Web Services Marketplace, or a versioned model that is part of a model group. Buyers can subscribe to model packages listed on Amazon Web Services Marketplace to create models in SageMaker. To create a model package by specifying a Docker container that contains your inference code and the Amazon S3 location of your model artifacts, provide values for InferenceSpecification. To create a model from an algorithm resource that you created or subscribed to in Amazon Web Services Marketplace, provide a value for SourceAlgorithmSpecification.  There are two types of model packages:   Versioned - a model that is part of a model group in the model registry.   Unversioned - a model package that is not part of a model group.
    @Sendable
    public func createModelPackage(_ input: CreateModelPackageInput, logger: Logger = AWSClient.loggingDisabled) async throws -> CreateModelPackageOutput {
        return try await self.client.execute(
            operation: "CreateModelPackage", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Creates a model group. A model group contains a group of model versions.
    @Sendable
    public func createModelPackageGroup(_ input: CreateModelPackageGroupInput, logger: Logger = AWSClient.loggingDisabled) async throws -> CreateModelPackageGroupOutput {
        return try await self.client.execute(
            operation: "CreateModelPackageGroup", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Creates a definition for a job that monitors model quality and drift. For information about model monitor, see Amazon SageMaker Model Monitor.
    @Sendable
    public func createModelQualityJobDefinition(_ input: CreateModelQualityJobDefinitionRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> CreateModelQualityJobDefinitionResponse {
        return try await self.client.execute(
            operation: "CreateModelQualityJobDefinition", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Creates a schedule that regularly starts Amazon SageMaker Processing Jobs to monitor the data captured for an Amazon SageMaker Endpoint.
    @Sendable
    public func createMonitoringSchedule(_ input: CreateMonitoringScheduleRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> CreateMonitoringScheduleResponse {
        return try await self.client.execute(
            operation: "CreateMonitoringSchedule", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Creates an SageMaker notebook instance. A notebook instance is a machine learning (ML) compute instance running on a Jupyter notebook.  In a CreateNotebookInstance request, specify the type of ML compute instance that you want to run. SageMaker launches the instance, installs common libraries that you can use to explore datasets for model training, and attaches an ML storage volume to the notebook instance.  SageMaker also provides a set of example notebooks. Each notebook demonstrates how to use SageMaker with a specific algorithm or with a machine learning framework.  After receiving the request, SageMaker does the following:   Creates a network interface in the SageMaker VPC.   (Option) If you specified SubnetId, SageMaker creates a network interface in your own VPC, which is inferred from the subnet ID that you provide in the input. When creating this network interface, SageMaker attaches the security group that you specified in the request to the network interface that it creates in your VPC.   Launches an EC2 instance of the type specified in the request in the SageMaker VPC. If you specified SubnetId of your VPC, SageMaker specifies both network interfaces when launching this instance. This enables inbound traffic from your own VPC to the notebook instance, assuming that the security groups allow it.   After creating the notebook instance, SageMaker returns its Amazon Resource Name (ARN). You can't change the name of a notebook instance after you create it. After SageMaker creates the notebook instance, you can connect to the Jupyter server and work in Jupyter notebooks. For example, you can write code to explore a dataset that you can use for model training, train a model, host models by creating SageMaker endpoints, and validate hosted models.  For more information, see How It Works.
    @Sendable
    public func createNotebookInstance(_ input: CreateNotebookInstanceInput, logger: Logger = AWSClient.loggingDisabled) async throws -> CreateNotebookInstanceOutput {
        return try await self.client.execute(
            operation: "CreateNotebookInstance", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Creates a lifecycle configuration that you can associate with a notebook instance. A lifecycle configuration is a collection of shell scripts that run when you create or start a notebook instance. Each lifecycle configuration script has a limit of 16384 characters. The value of the $PATH environment variable that is available to both scripts is /sbin:bin:/usr/sbin:/usr/bin. View Amazon CloudWatch Logs for notebook instance lifecycle configurations in log group /aws/sagemaker/NotebookInstances in log stream [notebook-instance-name]/[LifecycleConfigHook]. Lifecycle configuration scripts cannot run for longer than 5 minutes. If a script runs for longer than 5 minutes, it fails and the notebook instance is not created or started. For information about notebook instance lifestyle configurations, see Step 2.1: (Optional) Customize a Notebook Instance.
    @Sendable
    public func createNotebookInstanceLifecycleConfig(_ input: CreateNotebookInstanceLifecycleConfigInput, logger: Logger = AWSClient.loggingDisabled) async throws -> CreateNotebookInstanceLifecycleConfigOutput {
        return try await self.client.execute(
            operation: "CreateNotebookInstanceLifecycleConfig", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Creates a pipeline using a JSON pipeline definition.
    @Sendable
    public func createPipeline(_ input: CreatePipelineRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> CreatePipelineResponse {
        return try await self.client.execute(
            operation: "CreatePipeline", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Creates a URL for a specified UserProfile in a Domain.  When accessed in a web browser, the user will be automatically signed in to the domain, and granted access to all of the Apps and files associated with the Domain's Amazon Elastic File System volume. This operation can only be called when the authentication mode equals IAM.  The IAM role or user passed to this API defines the permissions to access the app. Once the presigned URL is created, no additional permission is required to access this URL. IAM authorization policies for this API are also enforced for every HTTP request and WebSocket frame that attempts to connect to the app. You can restrict access to this API and to the URL that it returns to a list of IP addresses, Amazon VPCs or Amazon VPC Endpoints that you specify. For more information, see Connect to Amazon SageMaker Studio Through an Interface VPC Endpoint .  The URL that you get from a call to CreatePresignedDomainUrl has a default timeout of 5 minutes. You can configure this value using ExpiresInSeconds. If you try to use the URL after the timeout limit expires, you are directed to the Amazon Web Services console sign-in page.
    @Sendable
    public func createPresignedDomainUrl(_ input: CreatePresignedDomainUrlRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> CreatePresignedDomainUrlResponse {
        return try await self.client.execute(
            operation: "CreatePresignedDomainUrl", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Returns a URL that you can use to connect to the Jupyter server from a notebook instance. In the SageMaker console, when you choose Open next to a notebook instance, SageMaker opens a new tab showing the Jupyter server home page from the notebook instance. The console uses this API to get the URL and show the page. The IAM role or user used to call this API defines the permissions to access the notebook instance. Once the presigned URL is created, no additional permission is required to access this URL. IAM authorization policies for this API are also enforced for every HTTP request and WebSocket frame that attempts to connect to the notebook instance. You can restrict access to this API and to the URL that it returns to a list of IP addresses that you specify. Use the NotIpAddress condition operator and the aws:SourceIP condition context key to specify the list of IP addresses that you want to have access to the notebook instance. For more information, see Limit Access to a Notebook Instance by IP Address.  The URL that you get from a call to CreatePresignedNotebookInstanceUrl is valid only for 5 minutes. If you try to use the URL after the 5-minute limit expires, you are directed to the Amazon Web Services console sign-in page.
    @Sendable
    public func createPresignedNotebookInstanceUrl(_ input: CreatePresignedNotebookInstanceUrlInput, logger: Logger = AWSClient.loggingDisabled) async throws -> CreatePresignedNotebookInstanceUrlOutput {
        return try await self.client.execute(
            operation: "CreatePresignedNotebookInstanceUrl", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Creates a processing job.
    @Sendable
    public func createProcessingJob(_ input: CreateProcessingJobRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> CreateProcessingJobResponse {
        return try await self.client.execute(
            operation: "CreateProcessingJob", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Creates a machine learning (ML) project that can contain one or more templates that set up an ML pipeline from training to deploying an approved model.
    @Sendable
    public func createProject(_ input: CreateProjectInput, logger: Logger = AWSClient.loggingDisabled) async throws -> CreateProjectOutput {
        return try await self.client.execute(
            operation: "CreateProject", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Creates a space used for real time collaboration in a domain.
    @Sendable
    public func createSpace(_ input: CreateSpaceRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> CreateSpaceResponse {
        return try await self.client.execute(
            operation: "CreateSpace", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Creates a new Amazon SageMaker Studio Lifecycle Configuration.
    @Sendable
    public func createStudioLifecycleConfig(_ input: CreateStudioLifecycleConfigRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> CreateStudioLifecycleConfigResponse {
        return try await self.client.execute(
            operation: "CreateStudioLifecycleConfig", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Starts a model training job. After training completes, SageMaker saves the resulting model artifacts to an Amazon S3 location that you specify.  If you choose to host your model using SageMaker hosting services, you can use the resulting model artifacts as part of the model. You can also use the artifacts in a machine learning service other than SageMaker, provided that you know how to use them for inference.   In the request body, you provide the following:     AlgorithmSpecification - Identifies the training algorithm to use.     HyperParameters - Specify these algorithm-specific parameters to enable the estimation of model parameters during training. Hyperparameters can be tuned to optimize this learning process. For a list of hyperparameters for each training algorithm provided by SageMaker, see Algorithms.   Do not include any security-sensitive information including account access IDs, secrets or tokens in any hyperparameter field. If the use of security-sensitive credentials are detected, SageMaker will reject your training job request and return an exception error.     InputDataConfig - Describes the input required by the training job and the Amazon S3, EFS, or FSx location where it is stored.    OutputDataConfig - Identifies the Amazon S3 bucket where you want SageMaker to save the results of model training.     ResourceConfig - Identifies the resources, ML compute instances, and ML storage volumes to deploy for model training. In distributed training, you specify more than one instance.     EnableManagedSpotTraining - Optimize the cost of training machine learning models by up to 80% by using Amazon EC2 Spot instances. For more information, see Managed Spot Training.     RoleArn - The Amazon Resource Name (ARN) that SageMaker assumes to perform tasks on your behalf during model training.  You must grant this role the necessary permissions so that SageMaker can successfully complete model training.     StoppingCondition - To help cap training costs, use MaxRuntimeInSeconds to set a time limit for training. Use MaxWaitTimeInSeconds to specify how long a managed spot training job has to complete.     Environment - The environment variables to set in the Docker container.    RetryStrategy - The number of times to retry the job when the job fails due to an InternalServerError.   For more information about SageMaker, see How It Works.
    @Sendable
    public func createTrainingJob(_ input: CreateTrainingJobRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> CreateTrainingJobResponse {
        return try await self.client.execute(
            operation: "CreateTrainingJob", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Starts a transform job. A transform job uses a trained model to get inferences on a dataset and saves these results to an Amazon S3 location that you specify. To perform batch transformations, you create a transform job and use the data that you have readily available. In the request body, you provide the following:    TransformJobName - Identifies the transform job. The name must be unique within an Amazon Web Services Region in an Amazon Web Services account.    ModelName - Identifies the model to use. ModelName must be the name of an existing Amazon SageMaker model in the same Amazon Web Services Region and Amazon Web Services
    /// 		    account. For information on creating a model, see CreateModel.    TransformInput - Describes the dataset to be transformed and the Amazon S3 location where it is stored.    TransformOutput - Identifies the Amazon S3 location where you want Amazon SageMaker to save the results from the transform job.    TransformResources - Identifies the ML compute instances for the transform job.   For more information about how batch transformation works, see Batch Transform.
    @Sendable
    public func createTransformJob(_ input: CreateTransformJobRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> CreateTransformJobResponse {
        return try await self.client.execute(
            operation: "CreateTransformJob", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Creates an SageMaker trial. A trial is a set of steps called trial components that produce a machine learning model. A trial is part of a single SageMaker experiment. When you use SageMaker Studio or the SageMaker Python SDK, all experiments, trials, and trial components are automatically tracked, logged, and indexed. When you use the Amazon Web Services SDK for Python (Boto), you must use the logging APIs provided by the SDK. You can add tags to a trial and then use the Search API to search for the tags. To get a list of all your trials, call the ListTrials API. To view a trial's properties, call the DescribeTrial API. To create a trial component, call the CreateTrialComponent API.
    @Sendable
    public func createTrial(_ input: CreateTrialRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> CreateTrialResponse {
        return try await self.client.execute(
            operation: "CreateTrial", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Creates a trial component, which is a stage of a machine learning trial. A trial is composed of one or more trial components. A trial component can be used in multiple trials. Trial components include pre-processing jobs, training jobs, and batch transform jobs. When you use SageMaker Studio or the SageMaker Python SDK, all experiments, trials, and trial components are automatically tracked, logged, and indexed. When you use the Amazon Web Services SDK for Python (Boto), you must use the logging APIs provided by the SDK. You can add tags to a trial component and then use the Search API to search for the tags.
    @Sendable
    public func createTrialComponent(_ input: CreateTrialComponentRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> CreateTrialComponentResponse {
        return try await self.client.execute(
            operation: "CreateTrialComponent", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Creates a user profile. A user profile represents a single user within a domain, and is the main way to reference a "person" for the purposes of sharing, reporting, and other user-oriented features. This entity is created when a user onboards to a domain. If an administrator invites a person by email or imports them from IAM Identity Center, a user profile is automatically created. A user profile is the primary holder of settings for an individual user and has a reference to the user's private Amazon Elastic File System home directory.
    @Sendable
    public func createUserProfile(_ input: CreateUserProfileRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> CreateUserProfileResponse {
        return try await self.client.execute(
            operation: "CreateUserProfile", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Use this operation to create a workforce. This operation will return an error if a workforce already exists in the Amazon Web Services Region that you specify. You can only create one workforce in each Amazon Web Services Region per Amazon Web Services account. If you want to create a new workforce in an Amazon Web Services Region where  a workforce already exists, use the DeleteWorkforce API operation to delete the existing workforce and then use CreateWorkforce  to create a new workforce. To create a private workforce using Amazon Cognito, you must specify a Cognito user pool in CognitoConfig. You can also create an Amazon Cognito workforce using the Amazon SageMaker console.  For more information, see   Create a Private Workforce (Amazon Cognito). To create a private workforce using your own OIDC Identity Provider (IdP), specify your IdP configuration in OidcConfig. Your OIDC IdP must support groups because groups are used by Ground Truth and Amazon A2I to create work teams.  For more information, see  Create a Private Workforce (OIDC IdP).
    @Sendable
    public func createWorkforce(_ input: CreateWorkforceRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> CreateWorkforceResponse {
        return try await self.client.execute(
            operation: "CreateWorkforce", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Creates a new work team for labeling your data. A work team is defined by one or more Amazon Cognito user pools. You must first create the user pools before you can create a work team. You cannot create more than 25 work teams in an account and region.
    @Sendable
    public func createWorkteam(_ input: CreateWorkteamRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> CreateWorkteamResponse {
        return try await self.client.execute(
            operation: "CreateWorkteam", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Deletes an action.
    @Sendable
    public func deleteAction(_ input: DeleteActionRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DeleteActionResponse {
        return try await self.client.execute(
            operation: "DeleteAction", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Removes the specified algorithm from your account.
    @Sendable
    public func deleteAlgorithm(_ input: DeleteAlgorithmInput, logger: Logger = AWSClient.loggingDisabled) async throws {
        return try await self.client.execute(
            operation: "DeleteAlgorithm", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Used to stop and delete an app.
    @Sendable
    public func deleteApp(_ input: DeleteAppRequest, logger: Logger = AWSClient.loggingDisabled) async throws {
        return try await self.client.execute(
            operation: "DeleteApp", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Deletes an AppImageConfig.
    @Sendable
    public func deleteAppImageConfig(_ input: DeleteAppImageConfigRequest, logger: Logger = AWSClient.loggingDisabled) async throws {
        return try await self.client.execute(
            operation: "DeleteAppImageConfig", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Deletes an artifact. Either ArtifactArn or Source must be specified.
    @Sendable
    public func deleteArtifact(_ input: DeleteArtifactRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DeleteArtifactResponse {
        return try await self.client.execute(
            operation: "DeleteArtifact", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Deletes an association.
    @Sendable
    public func deleteAssociation(_ input: DeleteAssociationRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DeleteAssociationResponse {
        return try await self.client.execute(
            operation: "DeleteAssociation", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Delete a SageMaker HyperPod cluster.
    @Sendable
    public func deleteCluster(_ input: DeleteClusterRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DeleteClusterResponse {
        return try await self.client.execute(
            operation: "DeleteCluster", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Deletes the specified Git repository from your account.
    @Sendable
    public func deleteCodeRepository(_ input: DeleteCodeRepositoryInput, logger: Logger = AWSClient.loggingDisabled) async throws {
        return try await self.client.execute(
            operation: "DeleteCodeRepository", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Deletes the specified compilation job. This action deletes only the compilation job resource in Amazon SageMaker. It doesn't delete other resources that are related to that job, such as the model artifacts that the job creates, the compilation logs in CloudWatch, the compiled model, or the IAM role. You can delete a compilation job only if its current status is COMPLETED, FAILED, or STOPPED. If the job status is STARTING or INPROGRESS, stop the job, and then delete it after its status becomes STOPPED.
    @Sendable
    public func deleteCompilationJob(_ input: DeleteCompilationJobRequest, logger: Logger = AWSClient.loggingDisabled) async throws {
        return try await self.client.execute(
            operation: "DeleteCompilationJob", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Deletes an context.
    @Sendable
    public func deleteContext(_ input: DeleteContextRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DeleteContextResponse {
        return try await self.client.execute(
            operation: "DeleteContext", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Deletes a data quality monitoring job definition.
    @Sendable
    public func deleteDataQualityJobDefinition(_ input: DeleteDataQualityJobDefinitionRequest, logger: Logger = AWSClient.loggingDisabled) async throws {
        return try await self.client.execute(
            operation: "DeleteDataQualityJobDefinition", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Deletes a fleet.
    @Sendable
    public func deleteDeviceFleet(_ input: DeleteDeviceFleetRequest, logger: Logger = AWSClient.loggingDisabled) async throws {
        return try await self.client.execute(
            operation: "DeleteDeviceFleet", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Used to delete a domain. If you onboarded with IAM mode, you will need to delete your domain to onboard again using IAM Identity Center. Use with caution. All of the members of the domain will lose access to their EFS volume, including data, notebooks, and other artifacts.
    @Sendable
    public func deleteDomain(_ input: DeleteDomainRequest, logger: Logger = AWSClient.loggingDisabled) async throws {
        return try await self.client.execute(
            operation: "DeleteDomain", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Deletes an edge deployment plan if (and only if) all the stages in the plan are inactive or there are no stages in the plan.
    @Sendable
    public func deleteEdgeDeploymentPlan(_ input: DeleteEdgeDeploymentPlanRequest, logger: Logger = AWSClient.loggingDisabled) async throws {
        return try await self.client.execute(
            operation: "DeleteEdgeDeploymentPlan", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Delete a stage in an edge deployment plan if (and only if) the stage is inactive.
    @Sendable
    public func deleteEdgeDeploymentStage(_ input: DeleteEdgeDeploymentStageRequest, logger: Logger = AWSClient.loggingDisabled) async throws {
        return try await self.client.execute(
            operation: "DeleteEdgeDeploymentStage", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Deletes an endpoint. SageMaker frees up all of the resources that were deployed when the endpoint was created.  SageMaker retires any custom KMS key grants associated with the endpoint, meaning you don't need to use the RevokeGrant API call. When you delete your endpoint, SageMaker asynchronously deletes associated endpoint resources such as KMS key grants. You might still see these resources in your account for a few minutes after deleting your endpoint. Do not delete or revoke the permissions for your  ExecutionRoleArn , otherwise SageMaker cannot delete these resources.
    @Sendable
    public func deleteEndpoint(_ input: DeleteEndpointInput, logger: Logger = AWSClient.loggingDisabled) async throws {
        return try await self.client.execute(
            operation: "DeleteEndpoint", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Deletes an endpoint configuration. The DeleteEndpointConfig API deletes only the specified configuration. It does not delete endpoints created using the configuration.  You must not delete an EndpointConfig in use by an endpoint that is live or while the UpdateEndpoint or CreateEndpoint operations are being performed on the endpoint. If you delete the EndpointConfig of an endpoint that is active or being created or updated you may lose visibility into the instance type the endpoint is using. The endpoint must be deleted in order to stop incurring charges.
    @Sendable
    public func deleteEndpointConfig(_ input: DeleteEndpointConfigInput, logger: Logger = AWSClient.loggingDisabled) async throws {
        return try await self.client.execute(
            operation: "DeleteEndpointConfig", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Deletes an SageMaker experiment. All trials associated with the experiment must be deleted first. Use the ListTrials API to get a list of the trials associated with the experiment.
    @Sendable
    public func deleteExperiment(_ input: DeleteExperimentRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DeleteExperimentResponse {
        return try await self.client.execute(
            operation: "DeleteExperiment", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Delete the FeatureGroup and any data that was written to the OnlineStore of the FeatureGroup. Data cannot be accessed from the OnlineStore immediately after DeleteFeatureGroup is called.  Data written into the OfflineStore will not be deleted. The Amazon Web Services Glue database and tables that are automatically created for your OfflineStore are not deleted.  Note that it can take approximately 10-15 minutes to delete an OnlineStore FeatureGroup with the InMemory StorageType.
    @Sendable
    public func deleteFeatureGroup(_ input: DeleteFeatureGroupRequest, logger: Logger = AWSClient.loggingDisabled) async throws {
        return try await self.client.execute(
            operation: "DeleteFeatureGroup", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Deletes the specified flow definition.
    @Sendable
    public func deleteFlowDefinition(_ input: DeleteFlowDefinitionRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DeleteFlowDefinitionResponse {
        return try await self.client.execute(
            operation: "DeleteFlowDefinition", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Delete a hub.  Hub APIs are only callable through SageMaker Studio.
    @Sendable
    public func deleteHub(_ input: DeleteHubRequest, logger: Logger = AWSClient.loggingDisabled) async throws {
        return try await self.client.execute(
            operation: "DeleteHub", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Delete the contents of a hub.  Hub APIs are only callable through SageMaker Studio.
    @Sendable
    public func deleteHubContent(_ input: DeleteHubContentRequest, logger: Logger = AWSClient.loggingDisabled) async throws {
        return try await self.client.execute(
            operation: "DeleteHubContent", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Use this operation to delete a human task user interface (worker task template).  To see a list of human task user interfaces (work task templates) in your account, use ListHumanTaskUis. When you delete a worker task template, it no longer appears when you call ListHumanTaskUis.
    @Sendable
    public func deleteHumanTaskUi(_ input: DeleteHumanTaskUiRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DeleteHumanTaskUiResponse {
        return try await self.client.execute(
            operation: "DeleteHumanTaskUi", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Deletes a hyperparameter tuning job. The DeleteHyperParameterTuningJob API deletes only the tuning job entry that was created in SageMaker when you called the CreateHyperParameterTuningJob API. It does not delete training jobs, artifacts, or the IAM role that you specified when creating the model.
    @Sendable
    public func deleteHyperParameterTuningJob(_ input: DeleteHyperParameterTuningJobRequest, logger: Logger = AWSClient.loggingDisabled) async throws {
        return try await self.client.execute(
            operation: "DeleteHyperParameterTuningJob", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Deletes a SageMaker image and all versions of the image. The container images aren't deleted.
    @Sendable
    public func deleteImage(_ input: DeleteImageRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DeleteImageResponse {
        return try await self.client.execute(
            operation: "DeleteImage", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Deletes a version of a SageMaker image. The container image the version represents isn't deleted.
    @Sendable
    public func deleteImageVersion(_ input: DeleteImageVersionRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DeleteImageVersionResponse {
        return try await self.client.execute(
            operation: "DeleteImageVersion", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Deletes an inference component.
    @Sendable
    public func deleteInferenceComponent(_ input: DeleteInferenceComponentInput, logger: Logger = AWSClient.loggingDisabled) async throws {
        return try await self.client.execute(
            operation: "DeleteInferenceComponent", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Deletes an inference experiment.   This operation does not delete your endpoint, variants, or any underlying resources. This operation only deletes the metadata of your experiment.
    @Sendable
    public func deleteInferenceExperiment(_ input: DeleteInferenceExperimentRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DeleteInferenceExperimentResponse {
        return try await self.client.execute(
            operation: "DeleteInferenceExperiment", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Deletes a model. The DeleteModel API deletes only the model entry that was created in SageMaker when you called the CreateModel API. It does not delete model artifacts, inference code, or the IAM role that you specified when creating the model.
    @Sendable
    public func deleteModel(_ input: DeleteModelInput, logger: Logger = AWSClient.loggingDisabled) async throws {
        return try await self.client.execute(
            operation: "DeleteModel", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Deletes an Amazon SageMaker model bias job definition.
    @Sendable
    public func deleteModelBiasJobDefinition(_ input: DeleteModelBiasJobDefinitionRequest, logger: Logger = AWSClient.loggingDisabled) async throws {
        return try await self.client.execute(
            operation: "DeleteModelBiasJobDefinition", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Deletes an Amazon SageMaker Model Card.
    @Sendable
    public func deleteModelCard(_ input: DeleteModelCardRequest, logger: Logger = AWSClient.loggingDisabled) async throws {
        return try await self.client.execute(
            operation: "DeleteModelCard", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Deletes an Amazon SageMaker model explainability job definition.
    @Sendable
    public func deleteModelExplainabilityJobDefinition(_ input: DeleteModelExplainabilityJobDefinitionRequest, logger: Logger = AWSClient.loggingDisabled) async throws {
        return try await self.client.execute(
            operation: "DeleteModelExplainabilityJobDefinition", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Deletes a model package. A model package is used to create SageMaker models or list on Amazon Web Services Marketplace. Buyers can subscribe to model packages listed on Amazon Web Services Marketplace to create models in SageMaker.
    @Sendable
    public func deleteModelPackage(_ input: DeleteModelPackageInput, logger: Logger = AWSClient.loggingDisabled) async throws {
        return try await self.client.execute(
            operation: "DeleteModelPackage", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Deletes the specified model group.
    @Sendable
    public func deleteModelPackageGroup(_ input: DeleteModelPackageGroupInput, logger: Logger = AWSClient.loggingDisabled) async throws {
        return try await self.client.execute(
            operation: "DeleteModelPackageGroup", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Deletes a model group resource policy.
    @Sendable
    public func deleteModelPackageGroupPolicy(_ input: DeleteModelPackageGroupPolicyInput, logger: Logger = AWSClient.loggingDisabled) async throws {
        return try await self.client.execute(
            operation: "DeleteModelPackageGroupPolicy", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Deletes the secified model quality monitoring job definition.
    @Sendable
    public func deleteModelQualityJobDefinition(_ input: DeleteModelQualityJobDefinitionRequest, logger: Logger = AWSClient.loggingDisabled) async throws {
        return try await self.client.execute(
            operation: "DeleteModelQualityJobDefinition", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Deletes a monitoring schedule. Also stops the schedule had not already been stopped. This does not delete the job execution history of the monitoring schedule.
    @Sendable
    public func deleteMonitoringSchedule(_ input: DeleteMonitoringScheduleRequest, logger: Logger = AWSClient.loggingDisabled) async throws {
        return try await self.client.execute(
            operation: "DeleteMonitoringSchedule", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    ///  Deletes an SageMaker notebook instance. Before you can delete a notebook instance, you must call the StopNotebookInstance API.   When you delete a notebook instance, you lose all of your data. SageMaker removes the ML compute instance, and deletes the ML storage volume and the network interface associated with the notebook instance.
    @Sendable
    public func deleteNotebookInstance(_ input: DeleteNotebookInstanceInput, logger: Logger = AWSClient.loggingDisabled) async throws {
        return try await self.client.execute(
            operation: "DeleteNotebookInstance", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Deletes a notebook instance lifecycle configuration.
    @Sendable
    public func deleteNotebookInstanceLifecycleConfig(_ input: DeleteNotebookInstanceLifecycleConfigInput, logger: Logger = AWSClient.loggingDisabled) async throws {
        return try await self.client.execute(
            operation: "DeleteNotebookInstanceLifecycleConfig", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Deletes a pipeline if there are no running instances of the pipeline. To delete a pipeline, you must stop all running instances of the pipeline using the StopPipelineExecution API. When you delete a pipeline, all instances of the pipeline are deleted.
    @Sendable
    public func deletePipeline(_ input: DeletePipelineRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DeletePipelineResponse {
        return try await self.client.execute(
            operation: "DeletePipeline", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Delete the specified project.
    @Sendable
    public func deleteProject(_ input: DeleteProjectInput, logger: Logger = AWSClient.loggingDisabled) async throws {
        return try await self.client.execute(
            operation: "DeleteProject", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Used to delete a space.
    @Sendable
    public func deleteSpace(_ input: DeleteSpaceRequest, logger: Logger = AWSClient.loggingDisabled) async throws {
        return try await self.client.execute(
            operation: "DeleteSpace", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Deletes the Amazon SageMaker Studio Lifecycle Configuration. In order to delete the Lifecycle Configuration, there must be no running apps using the Lifecycle Configuration. You must also remove the Lifecycle Configuration from UserSettings in all Domains and UserProfiles.
    @Sendable
    public func deleteStudioLifecycleConfig(_ input: DeleteStudioLifecycleConfigRequest, logger: Logger = AWSClient.loggingDisabled) async throws {
        return try await self.client.execute(
            operation: "DeleteStudioLifecycleConfig", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Deletes the specified tags from an SageMaker resource. To list a resource's tags, use the ListTags API.   When you call this API to delete tags from a hyperparameter tuning job, the deleted tags are not removed from training jobs that the hyperparameter tuning job launched before you called this API.   When you call this API to delete tags from a SageMaker Domain or User Profile, the deleted tags are not removed from Apps that the SageMaker Domain or User Profile launched before you called this API.
    @Sendable
    public func deleteTags(_ input: DeleteTagsInput, logger: Logger = AWSClient.loggingDisabled) async throws -> DeleteTagsOutput {
        return try await self.client.execute(
            operation: "DeleteTags", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Deletes the specified trial. All trial components that make up the trial must be deleted first. Use the DescribeTrialComponent API to get the list of trial components.
    @Sendable
    public func deleteTrial(_ input: DeleteTrialRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DeleteTrialResponse {
        return try await self.client.execute(
            operation: "DeleteTrial", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Deletes the specified trial component. A trial component must be disassociated from all trials before the trial component can be deleted. To disassociate a trial component from a trial, call the DisassociateTrialComponent API.
    @Sendable
    public func deleteTrialComponent(_ input: DeleteTrialComponentRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DeleteTrialComponentResponse {
        return try await self.client.execute(
            operation: "DeleteTrialComponent", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Deletes a user profile. When a user profile is deleted, the user loses access to their EFS volume, including data, notebooks, and other artifacts.
    @Sendable
    public func deleteUserProfile(_ input: DeleteUserProfileRequest, logger: Logger = AWSClient.loggingDisabled) async throws {
        return try await self.client.execute(
            operation: "DeleteUserProfile", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Use this operation to delete a workforce. If you want to create a new workforce in an Amazon Web Services Region where a workforce already exists, use this operation to delete the  existing workforce and then use CreateWorkforce to create a new workforce.  If a private workforce contains one or more work teams, you must use  the DeleteWorkteam operation to delete all work teams before you delete the workforce. If you try to delete a workforce that contains one or more work teams, you will recieve a ResourceInUse error.
    @Sendable
    public func deleteWorkforce(_ input: DeleteWorkforceRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DeleteWorkforceResponse {
        return try await self.client.execute(
            operation: "DeleteWorkforce", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Deletes an existing work team. This operation can't be undone.
    @Sendable
    public func deleteWorkteam(_ input: DeleteWorkteamRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DeleteWorkteamResponse {
        return try await self.client.execute(
            operation: "DeleteWorkteam", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Deregisters the specified devices. After you deregister a device, you will need to re-register the devices.
    @Sendable
    public func deregisterDevices(_ input: DeregisterDevicesRequest, logger: Logger = AWSClient.loggingDisabled) async throws {
        return try await self.client.execute(
            operation: "DeregisterDevices", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Describes an action.
    @Sendable
    public func describeAction(_ input: DescribeActionRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DescribeActionResponse {
        return try await self.client.execute(
            operation: "DescribeAction", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Returns a description of the specified algorithm that is in your account.
    @Sendable
    public func describeAlgorithm(_ input: DescribeAlgorithmInput, logger: Logger = AWSClient.loggingDisabled) async throws -> DescribeAlgorithmOutput {
        return try await self.client.execute(
            operation: "DescribeAlgorithm", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Describes the app.
    @Sendable
    public func describeApp(_ input: DescribeAppRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DescribeAppResponse {
        return try await self.client.execute(
            operation: "DescribeApp", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Describes an AppImageConfig.
    @Sendable
    public func describeAppImageConfig(_ input: DescribeAppImageConfigRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DescribeAppImageConfigResponse {
        return try await self.client.execute(
            operation: "DescribeAppImageConfig", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Describes an artifact.
    @Sendable
    public func describeArtifact(_ input: DescribeArtifactRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DescribeArtifactResponse {
        return try await self.client.execute(
            operation: "DescribeArtifact", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Returns information about an AutoML job created by calling CreateAutoMLJob.  AutoML jobs created by calling CreateAutoMLJobV2 cannot be described by DescribeAutoMLJob.
    @Sendable
    public func describeAutoMLJob(_ input: DescribeAutoMLJobRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DescribeAutoMLJobResponse {
        return try await self.client.execute(
            operation: "DescribeAutoMLJob", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Returns information about an AutoML job created by calling CreateAutoMLJobV2 or CreateAutoMLJob.
    @Sendable
    public func describeAutoMLJobV2(_ input: DescribeAutoMLJobV2Request, logger: Logger = AWSClient.loggingDisabled) async throws -> DescribeAutoMLJobV2Response {
        return try await self.client.execute(
            operation: "DescribeAutoMLJobV2", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Retrieves information of a SageMaker HyperPod cluster.
    @Sendable
    public func describeCluster(_ input: DescribeClusterRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DescribeClusterResponse {
        return try await self.client.execute(
            operation: "DescribeCluster", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Retrieves information of an instance (also called a node interchangeably) of a SageMaker HyperPod cluster.
    @Sendable
    public func describeClusterNode(_ input: DescribeClusterNodeRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DescribeClusterNodeResponse {
        return try await self.client.execute(
            operation: "DescribeClusterNode", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Gets details about the specified Git repository.
    @Sendable
    public func describeCodeRepository(_ input: DescribeCodeRepositoryInput, logger: Logger = AWSClient.loggingDisabled) async throws -> DescribeCodeRepositoryOutput {
        return try await self.client.execute(
            operation: "DescribeCodeRepository", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Returns information about a model compilation job. To create a model compilation job, use CreateCompilationJob. To get information about multiple model compilation jobs, use ListCompilationJobs.
    @Sendable
    public func describeCompilationJob(_ input: DescribeCompilationJobRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DescribeCompilationJobResponse {
        return try await self.client.execute(
            operation: "DescribeCompilationJob", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Describes a context.
    @Sendable
    public func describeContext(_ input: DescribeContextRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DescribeContextResponse {
        return try await self.client.execute(
            operation: "DescribeContext", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Gets the details of a data quality monitoring job definition.
    @Sendable
    public func describeDataQualityJobDefinition(_ input: DescribeDataQualityJobDefinitionRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DescribeDataQualityJobDefinitionResponse {
        return try await self.client.execute(
            operation: "DescribeDataQualityJobDefinition", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Describes the device.
    @Sendable
    public func describeDevice(_ input: DescribeDeviceRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DescribeDeviceResponse {
        return try await self.client.execute(
            operation: "DescribeDevice", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// A description of the fleet the device belongs to.
    @Sendable
    public func describeDeviceFleet(_ input: DescribeDeviceFleetRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DescribeDeviceFleetResponse {
        return try await self.client.execute(
            operation: "DescribeDeviceFleet", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// The description of the domain.
    @Sendable
    public func describeDomain(_ input: DescribeDomainRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DescribeDomainResponse {
        return try await self.client.execute(
            operation: "DescribeDomain", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Describes an edge deployment plan with deployment status per stage.
    @Sendable
    public func describeEdgeDeploymentPlan(_ input: DescribeEdgeDeploymentPlanRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DescribeEdgeDeploymentPlanResponse {
        return try await self.client.execute(
            operation: "DescribeEdgeDeploymentPlan", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// A description of edge packaging jobs.
    @Sendable
    public func describeEdgePackagingJob(_ input: DescribeEdgePackagingJobRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DescribeEdgePackagingJobResponse {
        return try await self.client.execute(
            operation: "DescribeEdgePackagingJob", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Returns the description of an endpoint.
    @Sendable
    public func describeEndpoint(_ input: DescribeEndpointInput, logger: Logger = AWSClient.loggingDisabled) async throws -> DescribeEndpointOutput {
        return try await self.client.execute(
            operation: "DescribeEndpoint", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Returns the description of an endpoint configuration created using the CreateEndpointConfig API.
    @Sendable
    public func describeEndpointConfig(_ input: DescribeEndpointConfigInput, logger: Logger = AWSClient.loggingDisabled) async throws -> DescribeEndpointConfigOutput {
        return try await self.client.execute(
            operation: "DescribeEndpointConfig", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Provides a list of an experiment's properties.
    @Sendable
    public func describeExperiment(_ input: DescribeExperimentRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DescribeExperimentResponse {
        return try await self.client.execute(
            operation: "DescribeExperiment", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Use this operation to describe a FeatureGroup. The response includes information on the creation time, FeatureGroup name, the unique identifier for each FeatureGroup, and more.
    @Sendable
    public func describeFeatureGroup(_ input: DescribeFeatureGroupRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DescribeFeatureGroupResponse {
        return try await self.client.execute(
            operation: "DescribeFeatureGroup", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Shows the metadata for a feature within a feature group.
    @Sendable
    public func describeFeatureMetadata(_ input: DescribeFeatureMetadataRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DescribeFeatureMetadataResponse {
        return try await self.client.execute(
            operation: "DescribeFeatureMetadata", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Returns information about the specified flow definition.
    @Sendable
    public func describeFlowDefinition(_ input: DescribeFlowDefinitionRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DescribeFlowDefinitionResponse {
        return try await self.client.execute(
            operation: "DescribeFlowDefinition", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Describe a hub.  Hub APIs are only callable through SageMaker Studio.
    @Sendable
    public func describeHub(_ input: DescribeHubRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DescribeHubResponse {
        return try await self.client.execute(
            operation: "DescribeHub", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Describe the content of a hub.  Hub APIs are only callable through SageMaker Studio.
    @Sendable
    public func describeHubContent(_ input: DescribeHubContentRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DescribeHubContentResponse {
        return try await self.client.execute(
            operation: "DescribeHubContent", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Returns information about the requested human task user interface (worker task template).
    @Sendable
    public func describeHumanTaskUi(_ input: DescribeHumanTaskUiRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DescribeHumanTaskUiResponse {
        return try await self.client.execute(
            operation: "DescribeHumanTaskUi", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Returns a description of a hyperparameter tuning job, depending on the fields selected. These fields can include the name, Amazon Resource Name (ARN), job status of your tuning job and more.
    @Sendable
    public func describeHyperParameterTuningJob(_ input: DescribeHyperParameterTuningJobRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DescribeHyperParameterTuningJobResponse {
        return try await self.client.execute(
            operation: "DescribeHyperParameterTuningJob", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Describes a SageMaker image.
    @Sendable
    public func describeImage(_ input: DescribeImageRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DescribeImageResponse {
        return try await self.client.execute(
            operation: "DescribeImage", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Describes a version of a SageMaker image.
    @Sendable
    public func describeImageVersion(_ input: DescribeImageVersionRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DescribeImageVersionResponse {
        return try await self.client.execute(
            operation: "DescribeImageVersion", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Returns information about an inference component.
    @Sendable
    public func describeInferenceComponent(_ input: DescribeInferenceComponentInput, logger: Logger = AWSClient.loggingDisabled) async throws -> DescribeInferenceComponentOutput {
        return try await self.client.execute(
            operation: "DescribeInferenceComponent", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Returns details about an inference experiment.
    @Sendable
    public func describeInferenceExperiment(_ input: DescribeInferenceExperimentRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DescribeInferenceExperimentResponse {
        return try await self.client.execute(
            operation: "DescribeInferenceExperiment", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Provides the results of the Inference Recommender job.  One or more recommendation jobs are returned.
    @Sendable
    public func describeInferenceRecommendationsJob(_ input: DescribeInferenceRecommendationsJobRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DescribeInferenceRecommendationsJobResponse {
        return try await self.client.execute(
            operation: "DescribeInferenceRecommendationsJob", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Gets information about a labeling job.
    @Sendable
    public func describeLabelingJob(_ input: DescribeLabelingJobRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DescribeLabelingJobResponse {
        return try await self.client.execute(
            operation: "DescribeLabelingJob", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Provides a list of properties for the requested lineage group.  For more information, see  Cross-Account Lineage Tracking  in the Amazon SageMaker Developer Guide.
    @Sendable
    public func describeLineageGroup(_ input: DescribeLineageGroupRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DescribeLineageGroupResponse {
        return try await self.client.execute(
            operation: "DescribeLineageGroup", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Describes a model that you created using the CreateModel API.
    @Sendable
    public func describeModel(_ input: DescribeModelInput, logger: Logger = AWSClient.loggingDisabled) async throws -> DescribeModelOutput {
        return try await self.client.execute(
            operation: "DescribeModel", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Returns a description of a model bias job definition.
    @Sendable
    public func describeModelBiasJobDefinition(_ input: DescribeModelBiasJobDefinitionRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DescribeModelBiasJobDefinitionResponse {
        return try await self.client.execute(
            operation: "DescribeModelBiasJobDefinition", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Describes the content, creation time, and security configuration of an Amazon SageMaker Model Card.
    @Sendable
    public func describeModelCard(_ input: DescribeModelCardRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DescribeModelCardResponse {
        return try await self.client.execute(
            operation: "DescribeModelCard", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Describes an Amazon SageMaker Model Card export job.
    @Sendable
    public func describeModelCardExportJob(_ input: DescribeModelCardExportJobRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DescribeModelCardExportJobResponse {
        return try await self.client.execute(
            operation: "DescribeModelCardExportJob", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Returns a description of a model explainability job definition.
    @Sendable
    public func describeModelExplainabilityJobDefinition(_ input: DescribeModelExplainabilityJobDefinitionRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DescribeModelExplainabilityJobDefinitionResponse {
        return try await self.client.execute(
            operation: "DescribeModelExplainabilityJobDefinition", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Returns a description of the specified model package, which is used to create SageMaker models or list them on Amazon Web Services Marketplace. To create models in SageMaker, buyers can subscribe to model packages listed on Amazon Web Services Marketplace.
    @Sendable
    public func describeModelPackage(_ input: DescribeModelPackageInput, logger: Logger = AWSClient.loggingDisabled) async throws -> DescribeModelPackageOutput {
        return try await self.client.execute(
            operation: "DescribeModelPackage", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Gets a description for the specified model group.
    @Sendable
    public func describeModelPackageGroup(_ input: DescribeModelPackageGroupInput, logger: Logger = AWSClient.loggingDisabled) async throws -> DescribeModelPackageGroupOutput {
        return try await self.client.execute(
            operation: "DescribeModelPackageGroup", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Returns a description of a model quality job definition.
    @Sendable
    public func describeModelQualityJobDefinition(_ input: DescribeModelQualityJobDefinitionRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DescribeModelQualityJobDefinitionResponse {
        return try await self.client.execute(
            operation: "DescribeModelQualityJobDefinition", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Describes the schedule for a monitoring job.
    @Sendable
    public func describeMonitoringSchedule(_ input: DescribeMonitoringScheduleRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DescribeMonitoringScheduleResponse {
        return try await self.client.execute(
            operation: "DescribeMonitoringSchedule", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Returns information about a notebook instance.
    @Sendable
    public func describeNotebookInstance(_ input: DescribeNotebookInstanceInput, logger: Logger = AWSClient.loggingDisabled) async throws -> DescribeNotebookInstanceOutput {
        return try await self.client.execute(
            operation: "DescribeNotebookInstance", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Returns a description of a notebook instance lifecycle configuration. For information about notebook instance lifestyle configurations, see Step 2.1: (Optional) Customize a Notebook Instance.
    @Sendable
    public func describeNotebookInstanceLifecycleConfig(_ input: DescribeNotebookInstanceLifecycleConfigInput, logger: Logger = AWSClient.loggingDisabled) async throws -> DescribeNotebookInstanceLifecycleConfigOutput {
        return try await self.client.execute(
            operation: "DescribeNotebookInstanceLifecycleConfig", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Describes the details of a pipeline.
    @Sendable
    public func describePipeline(_ input: DescribePipelineRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DescribePipelineResponse {
        return try await self.client.execute(
            operation: "DescribePipeline", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Describes the details of an execution's pipeline definition.
    @Sendable
    public func describePipelineDefinitionForExecution(_ input: DescribePipelineDefinitionForExecutionRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DescribePipelineDefinitionForExecutionResponse {
        return try await self.client.execute(
            operation: "DescribePipelineDefinitionForExecution", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Describes the details of a pipeline execution.
    @Sendable
    public func describePipelineExecution(_ input: DescribePipelineExecutionRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DescribePipelineExecutionResponse {
        return try await self.client.execute(
            operation: "DescribePipelineExecution", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Returns a description of a processing job.
    @Sendable
    public func describeProcessingJob(_ input: DescribeProcessingJobRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DescribeProcessingJobResponse {
        return try await self.client.execute(
            operation: "DescribeProcessingJob", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Describes the details of a project.
    @Sendable
    public func describeProject(_ input: DescribeProjectInput, logger: Logger = AWSClient.loggingDisabled) async throws -> DescribeProjectOutput {
        return try await self.client.execute(
            operation: "DescribeProject", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Describes the space.
    @Sendable
    public func describeSpace(_ input: DescribeSpaceRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DescribeSpaceResponse {
        return try await self.client.execute(
            operation: "DescribeSpace", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Describes the Amazon SageMaker Studio Lifecycle Configuration.
    @Sendable
    public func describeStudioLifecycleConfig(_ input: DescribeStudioLifecycleConfigRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DescribeStudioLifecycleConfigResponse {
        return try await self.client.execute(
            operation: "DescribeStudioLifecycleConfig", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Gets information about a work team provided by a vendor. It returns details about the subscription with a vendor in the Amazon Web Services Marketplace.
    @Sendable
    public func describeSubscribedWorkteam(_ input: DescribeSubscribedWorkteamRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DescribeSubscribedWorkteamResponse {
        return try await self.client.execute(
            operation: "DescribeSubscribedWorkteam", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Returns information about a training job.  Some of the attributes below only appear if the training job successfully starts. If the training job fails, TrainingJobStatus is Failed and, depending on the FailureReason, attributes like TrainingStartTime, TrainingTimeInSeconds, TrainingEndTime, and BillableTimeInSeconds may not be present in the response.
    @Sendable
    public func describeTrainingJob(_ input: DescribeTrainingJobRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DescribeTrainingJobResponse {
        return try await self.client.execute(
            operation: "DescribeTrainingJob", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Returns information about a transform job.
    @Sendable
    public func describeTransformJob(_ input: DescribeTransformJobRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DescribeTransformJobResponse {
        return try await self.client.execute(
            operation: "DescribeTransformJob", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Provides a list of a trial's properties.
    @Sendable
    public func describeTrial(_ input: DescribeTrialRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DescribeTrialResponse {
        return try await self.client.execute(
            operation: "DescribeTrial", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Provides a list of a trials component's properties.
    @Sendable
    public func describeTrialComponent(_ input: DescribeTrialComponentRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DescribeTrialComponentResponse {
        return try await self.client.execute(
            operation: "DescribeTrialComponent", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Describes a user profile. For more information, see CreateUserProfile.
    @Sendable
    public func describeUserProfile(_ input: DescribeUserProfileRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DescribeUserProfileResponse {
        return try await self.client.execute(
            operation: "DescribeUserProfile", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Lists private workforce information, including workforce name, Amazon Resource Name (ARN), and, if applicable, allowed IP address ranges (CIDRs). Allowable IP address ranges are the IP addresses that workers can use to access tasks.   This operation applies only to private workforces.
    @Sendable
    public func describeWorkforce(_ input: DescribeWorkforceRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DescribeWorkforceResponse {
        return try await self.client.execute(
            operation: "DescribeWorkforce", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Gets information about a specific work team. You can see information such as the create date, the last updated date, membership information, and the work team's Amazon Resource Name (ARN).
    @Sendable
    public func describeWorkteam(_ input: DescribeWorkteamRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DescribeWorkteamResponse {
        return try await self.client.execute(
            operation: "DescribeWorkteam", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Disables using Service Catalog in SageMaker. Service Catalog is used to create SageMaker projects.
    @Sendable
    public func disableSagemakerServicecatalogPortfolio(_ input: DisableSagemakerServicecatalogPortfolioInput, logger: Logger = AWSClient.loggingDisabled) async throws -> DisableSagemakerServicecatalogPortfolioOutput {
        return try await self.client.execute(
            operation: "DisableSagemakerServicecatalogPortfolio", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Disassociates a trial component from a trial. This doesn't effect other trials the component is associated with. Before you can delete a component, you must disassociate the component from all trials it is associated with. To associate a trial component with a trial, call the AssociateTrialComponent API. To get a list of the trials a component is associated with, use the Search API. Specify ExperimentTrialComponent for the Resource parameter. The list appears in the response under Results.TrialComponent.Parents.
    @Sendable
    public func disassociateTrialComponent(_ input: DisassociateTrialComponentRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DisassociateTrialComponentResponse {
        return try await self.client.execute(
            operation: "DisassociateTrialComponent", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Enables using Service Catalog in SageMaker. Service Catalog is used to create SageMaker projects.
    @Sendable
    public func enableSagemakerServicecatalogPortfolio(_ input: EnableSagemakerServicecatalogPortfolioInput, logger: Logger = AWSClient.loggingDisabled) async throws -> EnableSagemakerServicecatalogPortfolioOutput {
        return try await self.client.execute(
            operation: "EnableSagemakerServicecatalogPortfolio", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Describes a fleet.
    @Sendable
    public func getDeviceFleetReport(_ input: GetDeviceFleetReportRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> GetDeviceFleetReportResponse {
        return try await self.client.execute(
            operation: "GetDeviceFleetReport", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// The resource policy for the lineage group.
    @Sendable
    public func getLineageGroupPolicy(_ input: GetLineageGroupPolicyRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> GetLineageGroupPolicyResponse {
        return try await self.client.execute(
            operation: "GetLineageGroupPolicy", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Gets a resource policy that manages access for a model group. For information about resource policies, see Identity-based policies and resource-based policies in the Amazon Web Services Identity and Access Management User Guide..
    @Sendable
    public func getModelPackageGroupPolicy(_ input: GetModelPackageGroupPolicyInput, logger: Logger = AWSClient.loggingDisabled) async throws -> GetModelPackageGroupPolicyOutput {
        return try await self.client.execute(
            operation: "GetModelPackageGroupPolicy", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Gets the status of Service Catalog in SageMaker. Service Catalog is used to create SageMaker projects.
    @Sendable
    public func getSagemakerServicecatalogPortfolioStatus(_ input: GetSagemakerServicecatalogPortfolioStatusInput, logger: Logger = AWSClient.loggingDisabled) async throws -> GetSagemakerServicecatalogPortfolioStatusOutput {
        return try await self.client.execute(
            operation: "GetSagemakerServicecatalogPortfolioStatus", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Starts an Amazon SageMaker Inference Recommender autoscaling recommendation job. Returns recommendations for autoscaling policies that you can apply to your SageMaker endpoint.
    @Sendable
    public func getScalingConfigurationRecommendation(_ input: GetScalingConfigurationRecommendationRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> GetScalingConfigurationRecommendationResponse {
        return try await self.client.execute(
            operation: "GetScalingConfigurationRecommendation", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// An auto-complete API for the search functionality in the SageMaker console. It returns suggestions of possible matches for the property name to use in Search queries. Provides suggestions for HyperParameters, Tags, and Metrics.
    @Sendable
    public func getSearchSuggestions(_ input: GetSearchSuggestionsRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> GetSearchSuggestionsResponse {
        return try await self.client.execute(
            operation: "GetSearchSuggestions", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Import hub content.  Hub APIs are only callable through SageMaker Studio.
    @Sendable
    public func importHubContent(_ input: ImportHubContentRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> ImportHubContentResponse {
        return try await self.client.execute(
            operation: "ImportHubContent", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Lists the actions in your account and their properties.
    @Sendable
    public func listActions(_ input: ListActionsRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> ListActionsResponse {
        return try await self.client.execute(
            operation: "ListActions", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Lists the machine learning algorithms that have been created.
    @Sendable
    public func listAlgorithms(_ input: ListAlgorithmsInput, logger: Logger = AWSClient.loggingDisabled) async throws -> ListAlgorithmsOutput {
        return try await self.client.execute(
            operation: "ListAlgorithms", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Lists the aliases of a specified image or image version.
    @Sendable
    public func listAliases(_ input: ListAliasesRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> ListAliasesResponse {
        return try await self.client.execute(
            operation: "ListAliases", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Lists the AppImageConfigs in your account and their properties. The list can be filtered by creation time or modified time, and whether the AppImageConfig name contains a specified string.
    @Sendable
    public func listAppImageConfigs(_ input: ListAppImageConfigsRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> ListAppImageConfigsResponse {
        return try await self.client.execute(
            operation: "ListAppImageConfigs", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Lists apps.
    @Sendable
    public func listApps(_ input: ListAppsRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> ListAppsResponse {
        return try await self.client.execute(
            operation: "ListApps", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Lists the artifacts in your account and their properties.
    @Sendable
    public func listArtifacts(_ input: ListArtifactsRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> ListArtifactsResponse {
        return try await self.client.execute(
            operation: "ListArtifacts", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Lists the associations in your account and their properties.
    @Sendable
    public func listAssociations(_ input: ListAssociationsRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> ListAssociationsResponse {
        return try await self.client.execute(
            operation: "ListAssociations", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Request a list of jobs.
    @Sendable
    public func listAutoMLJobs(_ input: ListAutoMLJobsRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> ListAutoMLJobsResponse {
        return try await self.client.execute(
            operation: "ListAutoMLJobs", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// List the candidates created for the job.
    @Sendable
    public func listCandidatesForAutoMLJob(_ input: ListCandidatesForAutoMLJobRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> ListCandidatesForAutoMLJobResponse {
        return try await self.client.execute(
            operation: "ListCandidatesForAutoMLJob", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Retrieves the list of instances (also called nodes interchangeably) in a SageMaker HyperPod cluster.
    @Sendable
    public func listClusterNodes(_ input: ListClusterNodesRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> ListClusterNodesResponse {
        return try await self.client.execute(
            operation: "ListClusterNodes", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Retrieves the list of SageMaker HyperPod clusters.
    @Sendable
    public func listClusters(_ input: ListClustersRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> ListClustersResponse {
        return try await self.client.execute(
            operation: "ListClusters", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Gets a list of the Git repositories in your account.
    @Sendable
    public func listCodeRepositories(_ input: ListCodeRepositoriesInput, logger: Logger = AWSClient.loggingDisabled) async throws -> ListCodeRepositoriesOutput {
        return try await self.client.execute(
            operation: "ListCodeRepositories", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Lists model compilation jobs that satisfy various filters. To create a model compilation job, use CreateCompilationJob. To get information about a particular model compilation job you have created, use DescribeCompilationJob.
    @Sendable
    public func listCompilationJobs(_ input: ListCompilationJobsRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> ListCompilationJobsResponse {
        return try await self.client.execute(
            operation: "ListCompilationJobs", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Lists the contexts in your account and their properties.
    @Sendable
    public func listContexts(_ input: ListContextsRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> ListContextsResponse {
        return try await self.client.execute(
            operation: "ListContexts", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Lists the data quality job definitions in your account.
    @Sendable
    public func listDataQualityJobDefinitions(_ input: ListDataQualityJobDefinitionsRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> ListDataQualityJobDefinitionsResponse {
        return try await self.client.execute(
            operation: "ListDataQualityJobDefinitions", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Returns a list of devices in the fleet.
    @Sendable
    public func listDeviceFleets(_ input: ListDeviceFleetsRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> ListDeviceFleetsResponse {
        return try await self.client.execute(
            operation: "ListDeviceFleets", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// A list of devices.
    @Sendable
    public func listDevices(_ input: ListDevicesRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> ListDevicesResponse {
        return try await self.client.execute(
            operation: "ListDevices", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Lists the domains.
    @Sendable
    public func listDomains(_ input: ListDomainsRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> ListDomainsResponse {
        return try await self.client.execute(
            operation: "ListDomains", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Lists all edge deployment plans.
    @Sendable
    public func listEdgeDeploymentPlans(_ input: ListEdgeDeploymentPlansRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> ListEdgeDeploymentPlansResponse {
        return try await self.client.execute(
            operation: "ListEdgeDeploymentPlans", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Returns a list of edge packaging jobs.
    @Sendable
    public func listEdgePackagingJobs(_ input: ListEdgePackagingJobsRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> ListEdgePackagingJobsResponse {
        return try await self.client.execute(
            operation: "ListEdgePackagingJobs", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Lists endpoint configurations.
    @Sendable
    public func listEndpointConfigs(_ input: ListEndpointConfigsInput, logger: Logger = AWSClient.loggingDisabled) async throws -> ListEndpointConfigsOutput {
        return try await self.client.execute(
            operation: "ListEndpointConfigs", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Lists endpoints.
    @Sendable
    public func listEndpoints(_ input: ListEndpointsInput, logger: Logger = AWSClient.loggingDisabled) async throws -> ListEndpointsOutput {
        return try await self.client.execute(
            operation: "ListEndpoints", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Lists all the experiments in your account. The list can be filtered to show only experiments that were created in a specific time range. The list can be sorted by experiment name or creation time.
    @Sendable
    public func listExperiments(_ input: ListExperimentsRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> ListExperimentsResponse {
        return try await self.client.execute(
            operation: "ListExperiments", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// List FeatureGroups based on given filter and order.
    @Sendable
    public func listFeatureGroups(_ input: ListFeatureGroupsRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> ListFeatureGroupsResponse {
        return try await self.client.execute(
            operation: "ListFeatureGroups", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Returns information about the flow definitions in your account.
    @Sendable
    public func listFlowDefinitions(_ input: ListFlowDefinitionsRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> ListFlowDefinitionsResponse {
        return try await self.client.execute(
            operation: "ListFlowDefinitions", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// List hub content versions.  Hub APIs are only callable through SageMaker Studio.
    @Sendable
    public func listHubContentVersions(_ input: ListHubContentVersionsRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> ListHubContentVersionsResponse {
        return try await self.client.execute(
            operation: "ListHubContentVersions", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// List the contents of a hub.  Hub APIs are only callable through SageMaker Studio.
    @Sendable
    public func listHubContents(_ input: ListHubContentsRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> ListHubContentsResponse {
        return try await self.client.execute(
            operation: "ListHubContents", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// List all existing hubs.  Hub APIs are only callable through SageMaker Studio.
    @Sendable
    public func listHubs(_ input: ListHubsRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> ListHubsResponse {
        return try await self.client.execute(
            operation: "ListHubs", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Returns information about the human task user interfaces in your account.
    @Sendable
    public func listHumanTaskUis(_ input: ListHumanTaskUisRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> ListHumanTaskUisResponse {
        return try await self.client.execute(
            operation: "ListHumanTaskUis", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Gets a list of HyperParameterTuningJobSummary objects that describe the hyperparameter tuning jobs launched in your account.
    @Sendable
    public func listHyperParameterTuningJobs(_ input: ListHyperParameterTuningJobsRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> ListHyperParameterTuningJobsResponse {
        return try await self.client.execute(
            operation: "ListHyperParameterTuningJobs", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Lists the versions of a specified image and their properties. The list can be filtered by creation time or modified time.
    @Sendable
    public func listImageVersions(_ input: ListImageVersionsRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> ListImageVersionsResponse {
        return try await self.client.execute(
            operation: "ListImageVersions", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Lists the images in your account and their properties. The list can be filtered by creation time or modified time, and whether the image name contains a specified string.
    @Sendable
    public func listImages(_ input: ListImagesRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> ListImagesResponse {
        return try await self.client.execute(
            operation: "ListImages", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Lists the inference components in your account and their properties.
    @Sendable
    public func listInferenceComponents(_ input: ListInferenceComponentsInput, logger: Logger = AWSClient.loggingDisabled) async throws -> ListInferenceComponentsOutput {
        return try await self.client.execute(
            operation: "ListInferenceComponents", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Returns the list of all inference experiments.
    @Sendable
    public func listInferenceExperiments(_ input: ListInferenceExperimentsRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> ListInferenceExperimentsResponse {
        return try await self.client.execute(
            operation: "ListInferenceExperiments", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Returns a list of the subtasks for an Inference Recommender job. The supported subtasks are benchmarks, which evaluate the performance of your model on different instance types.
    @Sendable
    public func listInferenceRecommendationsJobSteps(_ input: ListInferenceRecommendationsJobStepsRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> ListInferenceRecommendationsJobStepsResponse {
        return try await self.client.execute(
            operation: "ListInferenceRecommendationsJobSteps", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Lists recommendation jobs that satisfy various filters.
    @Sendable
    public func listInferenceRecommendationsJobs(_ input: ListInferenceRecommendationsJobsRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> ListInferenceRecommendationsJobsResponse {
        return try await self.client.execute(
            operation: "ListInferenceRecommendationsJobs", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Gets a list of labeling jobs.
    @Sendable
    public func listLabelingJobs(_ input: ListLabelingJobsRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> ListLabelingJobsResponse {
        return try await self.client.execute(
            operation: "ListLabelingJobs", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Gets a list of labeling jobs assigned to a specified work team.
    @Sendable
    public func listLabelingJobsForWorkteam(_ input: ListLabelingJobsForWorkteamRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> ListLabelingJobsForWorkteamResponse {
        return try await self.client.execute(
            operation: "ListLabelingJobsForWorkteam", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// A list of lineage groups shared with your Amazon Web Services account.  For more information, see  Cross-Account Lineage Tracking  in the Amazon SageMaker Developer Guide.
    @Sendable
    public func listLineageGroups(_ input: ListLineageGroupsRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> ListLineageGroupsResponse {
        return try await self.client.execute(
            operation: "ListLineageGroups", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Lists model bias jobs definitions that satisfy various filters.
    @Sendable
    public func listModelBiasJobDefinitions(_ input: ListModelBiasJobDefinitionsRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> ListModelBiasJobDefinitionsResponse {
        return try await self.client.execute(
            operation: "ListModelBiasJobDefinitions", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// List the export jobs for the Amazon SageMaker Model Card.
    @Sendable
    public func listModelCardExportJobs(_ input: ListModelCardExportJobsRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> ListModelCardExportJobsResponse {
        return try await self.client.execute(
            operation: "ListModelCardExportJobs", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// List existing versions of an Amazon SageMaker Model Card.
    @Sendable
    public func listModelCardVersions(_ input: ListModelCardVersionsRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> ListModelCardVersionsResponse {
        return try await self.client.execute(
            operation: "ListModelCardVersions", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// List existing model cards.
    @Sendable
    public func listModelCards(_ input: ListModelCardsRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> ListModelCardsResponse {
        return try await self.client.execute(
            operation: "ListModelCards", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Lists model explainability job definitions that satisfy various filters.
    @Sendable
    public func listModelExplainabilityJobDefinitions(_ input: ListModelExplainabilityJobDefinitionsRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> ListModelExplainabilityJobDefinitionsResponse {
        return try await self.client.execute(
            operation: "ListModelExplainabilityJobDefinitions", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Lists the domain, framework, task, and model name of standard  machine learning models found in common model zoos.
    @Sendable
    public func listModelMetadata(_ input: ListModelMetadataRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> ListModelMetadataResponse {
        return try await self.client.execute(
            operation: "ListModelMetadata", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Gets a list of the model groups in your Amazon Web Services account.
    @Sendable
    public func listModelPackageGroups(_ input: ListModelPackageGroupsInput, logger: Logger = AWSClient.loggingDisabled) async throws -> ListModelPackageGroupsOutput {
        return try await self.client.execute(
            operation: "ListModelPackageGroups", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Lists the model packages that have been created.
    @Sendable
    public func listModelPackages(_ input: ListModelPackagesInput, logger: Logger = AWSClient.loggingDisabled) async throws -> ListModelPackagesOutput {
        return try await self.client.execute(
            operation: "ListModelPackages", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Gets a list of model quality monitoring job definitions in your account.
    @Sendable
    public func listModelQualityJobDefinitions(_ input: ListModelQualityJobDefinitionsRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> ListModelQualityJobDefinitionsResponse {
        return try await self.client.execute(
            operation: "ListModelQualityJobDefinitions", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Lists models created with the CreateModel API.
    @Sendable
    public func listModels(_ input: ListModelsInput, logger: Logger = AWSClient.loggingDisabled) async throws -> ListModelsOutput {
        return try await self.client.execute(
            operation: "ListModels", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Gets a list of past alerts in a model monitoring schedule.
    @Sendable
    public func listMonitoringAlertHistory(_ input: ListMonitoringAlertHistoryRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> ListMonitoringAlertHistoryResponse {
        return try await self.client.execute(
            operation: "ListMonitoringAlertHistory", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Gets the alerts for a single monitoring schedule.
    @Sendable
    public func listMonitoringAlerts(_ input: ListMonitoringAlertsRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> ListMonitoringAlertsResponse {
        return try await self.client.execute(
            operation: "ListMonitoringAlerts", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Returns list of all monitoring job executions.
    @Sendable
    public func listMonitoringExecutions(_ input: ListMonitoringExecutionsRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> ListMonitoringExecutionsResponse {
        return try await self.client.execute(
            operation: "ListMonitoringExecutions", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Returns list of all monitoring schedules.
    @Sendable
    public func listMonitoringSchedules(_ input: ListMonitoringSchedulesRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> ListMonitoringSchedulesResponse {
        return try await self.client.execute(
            operation: "ListMonitoringSchedules", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Lists notebook instance lifestyle configurations created with the CreateNotebookInstanceLifecycleConfig API.
    @Sendable
    public func listNotebookInstanceLifecycleConfigs(_ input: ListNotebookInstanceLifecycleConfigsInput, logger: Logger = AWSClient.loggingDisabled) async throws -> ListNotebookInstanceLifecycleConfigsOutput {
        return try await self.client.execute(
            operation: "ListNotebookInstanceLifecycleConfigs", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Returns a list of the SageMaker notebook instances in the requester's account in an Amazon Web Services Region.
    @Sendable
    public func listNotebookInstances(_ input: ListNotebookInstancesInput, logger: Logger = AWSClient.loggingDisabled) async throws -> ListNotebookInstancesOutput {
        return try await self.client.execute(
            operation: "ListNotebookInstances", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Gets a list of PipeLineExecutionStep objects.
    @Sendable
    public func listPipelineExecutionSteps(_ input: ListPipelineExecutionStepsRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> ListPipelineExecutionStepsResponse {
        return try await self.client.execute(
            operation: "ListPipelineExecutionSteps", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Gets a list of the pipeline executions.
    @Sendable
    public func listPipelineExecutions(_ input: ListPipelineExecutionsRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> ListPipelineExecutionsResponse {
        return try await self.client.execute(
            operation: "ListPipelineExecutions", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Gets a list of parameters for a pipeline execution.
    @Sendable
    public func listPipelineParametersForExecution(_ input: ListPipelineParametersForExecutionRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> ListPipelineParametersForExecutionResponse {
        return try await self.client.execute(
            operation: "ListPipelineParametersForExecution", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Gets a list of pipelines.
    @Sendable
    public func listPipelines(_ input: ListPipelinesRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> ListPipelinesResponse {
        return try await self.client.execute(
            operation: "ListPipelines", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Lists processing jobs that satisfy various filters.
    @Sendable
    public func listProcessingJobs(_ input: ListProcessingJobsRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> ListProcessingJobsResponse {
        return try await self.client.execute(
            operation: "ListProcessingJobs", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Gets a list of the projects in an Amazon Web Services account.
    @Sendable
    public func listProjects(_ input: ListProjectsInput, logger: Logger = AWSClient.loggingDisabled) async throws -> ListProjectsOutput {
        return try await self.client.execute(
            operation: "ListProjects", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    ///  Lists Amazon SageMaker Catalogs based on given filters and orders. The maximum number of ResourceCatalogs viewable is 1000.
    @Sendable
    public func listResourceCatalogs(_ input: ListResourceCatalogsRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> ListResourceCatalogsResponse {
        return try await self.client.execute(
            operation: "ListResourceCatalogs", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Lists spaces.
    @Sendable
    public func listSpaces(_ input: ListSpacesRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> ListSpacesResponse {
        return try await self.client.execute(
            operation: "ListSpaces", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Lists devices allocated to the stage, containing detailed device information and deployment status.
    @Sendable
    public func listStageDevices(_ input: ListStageDevicesRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> ListStageDevicesResponse {
        return try await self.client.execute(
            operation: "ListStageDevices", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Lists the Amazon SageMaker Studio Lifecycle Configurations in your Amazon Web Services Account.
    @Sendable
    public func listStudioLifecycleConfigs(_ input: ListStudioLifecycleConfigsRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> ListStudioLifecycleConfigsResponse {
        return try await self.client.execute(
            operation: "ListStudioLifecycleConfigs", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Gets a list of the work teams that you are subscribed to in the Amazon Web Services Marketplace. The list may be empty if no work team satisfies the filter specified in the NameContains parameter.
    @Sendable
    public func listSubscribedWorkteams(_ input: ListSubscribedWorkteamsRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> ListSubscribedWorkteamsResponse {
        return try await self.client.execute(
            operation: "ListSubscribedWorkteams", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Returns the tags for the specified SageMaker resource.
    @Sendable
    public func listTags(_ input: ListTagsInput, logger: Logger = AWSClient.loggingDisabled) async throws -> ListTagsOutput {
        return try await self.client.execute(
            operation: "ListTags", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Lists training jobs.  When StatusEquals and MaxResults are set at the same time, the MaxResults number of training jobs are first retrieved ignoring the StatusEquals parameter and then they are filtered by the StatusEquals parameter, which is returned as a response. For example, if ListTrainingJobs is invoked with the following parameters:  { ... MaxResults: 100, StatusEquals: InProgress ... }  First, 100 trainings jobs with any status, including those other than InProgress, are selected (sorted according to the creation time, from the most current to the oldest). Next, those with a status of InProgress are returned. You can quickly test the API using the following Amazon Web Services CLI code.  aws sagemaker list-training-jobs --max-results 100 --status-equals InProgress
    @Sendable
    public func listTrainingJobs(_ input: ListTrainingJobsRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> ListTrainingJobsResponse {
        return try await self.client.execute(
            operation: "ListTrainingJobs", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Gets a list of TrainingJobSummary objects that describe the training jobs that a hyperparameter tuning job launched.
    @Sendable
    public func listTrainingJobsForHyperParameterTuningJob(_ input: ListTrainingJobsForHyperParameterTuningJobRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> ListTrainingJobsForHyperParameterTuningJobResponse {
        return try await self.client.execute(
            operation: "ListTrainingJobsForHyperParameterTuningJob", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Lists transform jobs.
    @Sendable
    public func listTransformJobs(_ input: ListTransformJobsRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> ListTransformJobsResponse {
        return try await self.client.execute(
            operation: "ListTransformJobs", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Lists the trial components in your account. You can sort the list by trial component name or creation time. You can filter the list to show only components that were created in a specific time range. You can also filter on one of the following:    ExperimentName     SourceArn     TrialName
    @Sendable
    public func listTrialComponents(_ input: ListTrialComponentsRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> ListTrialComponentsResponse {
        return try await self.client.execute(
            operation: "ListTrialComponents", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Lists the trials in your account. Specify an experiment name to limit the list to the trials that are part of that experiment. Specify a trial component name to limit the list to the trials that associated with that trial component. The list can be filtered to show only trials that were created in a specific time range. The list can be sorted by trial name or creation time.
    @Sendable
    public func listTrials(_ input: ListTrialsRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> ListTrialsResponse {
        return try await self.client.execute(
            operation: "ListTrials", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Lists user profiles.
    @Sendable
    public func listUserProfiles(_ input: ListUserProfilesRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> ListUserProfilesResponse {
        return try await self.client.execute(
            operation: "ListUserProfiles", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Use this operation to list all private and vendor workforces in an Amazon Web Services Region. Note that you can only  have one private workforce per Amazon Web Services Region.
    @Sendable
    public func listWorkforces(_ input: ListWorkforcesRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> ListWorkforcesResponse {
        return try await self.client.execute(
            operation: "ListWorkforces", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Gets a list of private work teams that you have defined in a region. The list may be empty if no work team satisfies the filter specified in the NameContains parameter.
    @Sendable
    public func listWorkteams(_ input: ListWorkteamsRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> ListWorkteamsResponse {
        return try await self.client.execute(
            operation: "ListWorkteams", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Adds a resouce policy to control access to a model group. For information about resoure policies, see Identity-based policies and resource-based policies in the Amazon Web Services Identity and Access Management User Guide..
    @Sendable
    public func putModelPackageGroupPolicy(_ input: PutModelPackageGroupPolicyInput, logger: Logger = AWSClient.loggingDisabled) async throws -> PutModelPackageGroupPolicyOutput {
        return try await self.client.execute(
            operation: "PutModelPackageGroupPolicy", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Use this action to inspect your lineage and discover relationships between entities.  For more information, see  Querying Lineage Entities in the Amazon SageMaker Developer Guide.
    @Sendable
    public func queryLineage(_ input: QueryLineageRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> QueryLineageResponse {
        return try await self.client.execute(
            operation: "QueryLineage", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Register devices.
    @Sendable
    public func registerDevices(_ input: RegisterDevicesRequest, logger: Logger = AWSClient.loggingDisabled) async throws {
        return try await self.client.execute(
            operation: "RegisterDevices", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Renders the UI template so that you can preview the worker's experience.
    @Sendable
    public func renderUiTemplate(_ input: RenderUiTemplateRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> RenderUiTemplateResponse {
        return try await self.client.execute(
            operation: "RenderUiTemplate", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Retry the execution of the pipeline.
    @Sendable
    public func retryPipelineExecution(_ input: RetryPipelineExecutionRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> RetryPipelineExecutionResponse {
        return try await self.client.execute(
            operation: "RetryPipelineExecution", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Finds SageMaker resources that match a search query. Matching resources are returned as a list of SearchRecord objects in the response. You can sort the search results by any resource property in a ascending or descending order. You can query against the following value types: numeric, text, Boolean, and timestamp.  The Search API may provide access to otherwise restricted data. See Amazon SageMaker  API Permissions: Actions, Permissions, and Resources Reference for more information.
    @Sendable
    public func search(_ input: SearchRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> SearchResponse {
        return try await self.client.execute(
            operation: "Search", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Notifies the pipeline that the execution of a callback step failed, along with a message describing why. When a callback step is run, the pipeline generates a callback token and includes the token in a message sent to Amazon Simple Queue Service (Amazon SQS).
    @Sendable
    public func sendPipelineExecutionStepFailure(_ input: SendPipelineExecutionStepFailureRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> SendPipelineExecutionStepFailureResponse {
        return try await self.client.execute(
            operation: "SendPipelineExecutionStepFailure", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Notifies the pipeline that the execution of a callback step succeeded and provides a list of the step's output parameters. When a callback step is run, the pipeline generates a callback token and includes the token in a message sent to Amazon Simple Queue Service (Amazon SQS).
    @Sendable
    public func sendPipelineExecutionStepSuccess(_ input: SendPipelineExecutionStepSuccessRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> SendPipelineExecutionStepSuccessResponse {
        return try await self.client.execute(
            operation: "SendPipelineExecutionStepSuccess", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Starts a stage in an edge deployment plan.
    @Sendable
    public func startEdgeDeploymentStage(_ input: StartEdgeDeploymentStageRequest, logger: Logger = AWSClient.loggingDisabled) async throws {
        return try await self.client.execute(
            operation: "StartEdgeDeploymentStage", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Starts an inference experiment.
    @Sendable
    public func startInferenceExperiment(_ input: StartInferenceExperimentRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> StartInferenceExperimentResponse {
        return try await self.client.execute(
            operation: "StartInferenceExperiment", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Starts a previously stopped monitoring schedule.  By default, when you successfully create a new schedule, the status of a monitoring schedule is scheduled.
    @Sendable
    public func startMonitoringSchedule(_ input: StartMonitoringScheduleRequest, logger: Logger = AWSClient.loggingDisabled) async throws {
        return try await self.client.execute(
            operation: "StartMonitoringSchedule", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Launches an ML compute instance with the latest version of the libraries and attaches your ML storage volume. After configuring the notebook instance, SageMaker sets the notebook instance status to InService. A notebook instance's status must be InService before you can connect to your Jupyter notebook.
    @Sendable
    public func startNotebookInstance(_ input: StartNotebookInstanceInput, logger: Logger = AWSClient.loggingDisabled) async throws {
        return try await self.client.execute(
            operation: "StartNotebookInstance", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Starts a pipeline execution.
    @Sendable
    public func startPipelineExecution(_ input: StartPipelineExecutionRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> StartPipelineExecutionResponse {
        return try await self.client.execute(
            operation: "StartPipelineExecution", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// A method for forcing a running job to shut down.
    @Sendable
    public func stopAutoMLJob(_ input: StopAutoMLJobRequest, logger: Logger = AWSClient.loggingDisabled) async throws {
        return try await self.client.execute(
            operation: "StopAutoMLJob", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Stops a model compilation job. To stop a job, Amazon SageMaker sends the algorithm the SIGTERM signal. This gracefully shuts the job down. If the job hasn't stopped, it sends the SIGKILL signal. When it receives a StopCompilationJob request, Amazon SageMaker changes the CompilationJobStatus of the job to Stopping. After Amazon SageMaker stops the job, it sets the CompilationJobStatus to Stopped.
    @Sendable
    public func stopCompilationJob(_ input: StopCompilationJobRequest, logger: Logger = AWSClient.loggingDisabled) async throws {
        return try await self.client.execute(
            operation: "StopCompilationJob", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Stops a stage in an edge deployment plan.
    @Sendable
    public func stopEdgeDeploymentStage(_ input: StopEdgeDeploymentStageRequest, logger: Logger = AWSClient.loggingDisabled) async throws {
        return try await self.client.execute(
            operation: "StopEdgeDeploymentStage", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Request to stop an edge packaging job.
    @Sendable
    public func stopEdgePackagingJob(_ input: StopEdgePackagingJobRequest, logger: Logger = AWSClient.loggingDisabled) async throws {
        return try await self.client.execute(
            operation: "StopEdgePackagingJob", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Stops a running hyperparameter tuning job and all running training jobs that the tuning job launched. All model artifacts output from the training jobs are stored in Amazon Simple Storage Service (Amazon S3). All data that the training jobs write to Amazon CloudWatch Logs are still available in CloudWatch. After the tuning job moves to the Stopped state, it releases all reserved resources for the tuning job.
    @Sendable
    public func stopHyperParameterTuningJob(_ input: StopHyperParameterTuningJobRequest, logger: Logger = AWSClient.loggingDisabled) async throws {
        return try await self.client.execute(
            operation: "StopHyperParameterTuningJob", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Stops an inference experiment.
    @Sendable
    public func stopInferenceExperiment(_ input: StopInferenceExperimentRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> StopInferenceExperimentResponse {
        return try await self.client.execute(
            operation: "StopInferenceExperiment", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Stops an Inference Recommender job.
    @Sendable
    public func stopInferenceRecommendationsJob(_ input: StopInferenceRecommendationsJobRequest, logger: Logger = AWSClient.loggingDisabled) async throws {
        return try await self.client.execute(
            operation: "StopInferenceRecommendationsJob", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Stops a running labeling job. A job that is stopped cannot be restarted. Any results obtained before the job is stopped are placed in the Amazon S3 output bucket.
    @Sendable
    public func stopLabelingJob(_ input: StopLabelingJobRequest, logger: Logger = AWSClient.loggingDisabled) async throws {
        return try await self.client.execute(
            operation: "StopLabelingJob", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Stops a previously started monitoring schedule.
    @Sendable
    public func stopMonitoringSchedule(_ input: StopMonitoringScheduleRequest, logger: Logger = AWSClient.loggingDisabled) async throws {
        return try await self.client.execute(
            operation: "StopMonitoringSchedule", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Terminates the ML compute instance. Before terminating the instance, SageMaker disconnects the ML storage volume from it. SageMaker preserves the ML storage volume. SageMaker stops charging you for the ML compute instance when you call StopNotebookInstance. To access data on the ML storage volume for a notebook instance that has been terminated, call the StartNotebookInstance API. StartNotebookInstance launches another ML compute instance, configures it, and attaches the preserved ML storage volume so you can continue your work.
    @Sendable
    public func stopNotebookInstance(_ input: StopNotebookInstanceInput, logger: Logger = AWSClient.loggingDisabled) async throws {
        return try await self.client.execute(
            operation: "StopNotebookInstance", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Stops a pipeline execution.  Callback Step  A pipeline execution won't stop while a callback step is running. When you call StopPipelineExecution on a pipeline execution with a running callback step, SageMaker Pipelines sends an additional Amazon SQS message to the specified SQS queue. The body of the SQS message contains a "Status" field which is set to "Stopping". You should add logic to your Amazon SQS message consumer to take any needed action (for example, resource cleanup) upon receipt of the message followed by a call to SendPipelineExecutionStepSuccess or SendPipelineExecutionStepFailure. Only when SageMaker Pipelines receives one of these calls will it stop the pipeline execution.  Lambda Step  A pipeline execution can't be stopped while a lambda step is running because the Lambda function invoked by the lambda step can't be stopped. If you attempt to stop the execution while the Lambda function is running, the pipeline waits for the Lambda function to finish or until the timeout is hit, whichever occurs first, and then stops. If the Lambda function finishes, the pipeline execution status is Stopped. If the timeout is hit the pipeline execution status is Failed.
    @Sendable
    public func stopPipelineExecution(_ input: StopPipelineExecutionRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> StopPipelineExecutionResponse {
        return try await self.client.execute(
            operation: "StopPipelineExecution", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Stops a processing job.
    @Sendable
    public func stopProcessingJob(_ input: StopProcessingJobRequest, logger: Logger = AWSClient.loggingDisabled) async throws {
        return try await self.client.execute(
            operation: "StopProcessingJob", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Stops a training job. To stop a job, SageMaker sends the algorithm the SIGTERM signal, which delays job termination for 120 seconds. Algorithms might use this 120-second window to save the model artifacts, so the results of the training is not lost.  When it receives a StopTrainingJob request, SageMaker changes the status of the job to Stopping. After SageMaker stops the job, it sets the status to Stopped.
    @Sendable
    public func stopTrainingJob(_ input: StopTrainingJobRequest, logger: Logger = AWSClient.loggingDisabled) async throws {
        return try await self.client.execute(
            operation: "StopTrainingJob", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Stops a batch transform job. When Amazon SageMaker receives a StopTransformJob request, the status of the job changes to Stopping. After Amazon SageMaker stops the job, the status is set to Stopped. When you stop a batch transform job before it is completed, Amazon SageMaker doesn't store the job's output in Amazon S3.
    @Sendable
    public func stopTransformJob(_ input: StopTransformJobRequest, logger: Logger = AWSClient.loggingDisabled) async throws {
        return try await self.client.execute(
            operation: "StopTransformJob", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Updates an action.
    @Sendable
    public func updateAction(_ input: UpdateActionRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> UpdateActionResponse {
        return try await self.client.execute(
            operation: "UpdateAction", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Updates the properties of an AppImageConfig.
    @Sendable
    public func updateAppImageConfig(_ input: UpdateAppImageConfigRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> UpdateAppImageConfigResponse {
        return try await self.client.execute(
            operation: "UpdateAppImageConfig", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Updates an artifact.
    @Sendable
    public func updateArtifact(_ input: UpdateArtifactRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> UpdateArtifactResponse {
        return try await self.client.execute(
            operation: "UpdateArtifact", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Updates a SageMaker HyperPod cluster.
    @Sendable
    public func updateCluster(_ input: UpdateClusterRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> UpdateClusterResponse {
        return try await self.client.execute(
            operation: "UpdateCluster", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Updates the platform software of a SageMaker HyperPod cluster for security patching. To learn how to use this API, see Update the SageMaker HyperPod platform software of a cluster.
    @Sendable
    public func updateClusterSoftware(_ input: UpdateClusterSoftwareRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> UpdateClusterSoftwareResponse {
        return try await self.client.execute(
            operation: "UpdateClusterSoftware", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Updates the specified Git repository with the specified values.
    @Sendable
    public func updateCodeRepository(_ input: UpdateCodeRepositoryInput, logger: Logger = AWSClient.loggingDisabled) async throws -> UpdateCodeRepositoryOutput {
        return try await self.client.execute(
            operation: "UpdateCodeRepository", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Updates a context.
    @Sendable
    public func updateContext(_ input: UpdateContextRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> UpdateContextResponse {
        return try await self.client.execute(
            operation: "UpdateContext", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Updates a fleet of devices.
    @Sendable
    public func updateDeviceFleet(_ input: UpdateDeviceFleetRequest, logger: Logger = AWSClient.loggingDisabled) async throws {
        return try await self.client.execute(
            operation: "UpdateDeviceFleet", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Updates one or more devices in a fleet.
    @Sendable
    public func updateDevices(_ input: UpdateDevicesRequest, logger: Logger = AWSClient.loggingDisabled) async throws {
        return try await self.client.execute(
            operation: "UpdateDevices", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Updates the default settings for new user profiles in the domain.
    @Sendable
    public func updateDomain(_ input: UpdateDomainRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> UpdateDomainResponse {
        return try await self.client.execute(
            operation: "UpdateDomain", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Deploys the EndpointConfig specified in the request to a new fleet of instances. SageMaker shifts endpoint traffic to the new instances with the updated endpoint configuration and then deletes the old instances using the previous EndpointConfig (there is no availability loss). For more information about how to control the update and traffic shifting process, see  Update models in production. When SageMaker receives the request, it sets the endpoint status to Updating. After updating the endpoint, it sets the status to InService. To check the status of an endpoint, use the DescribeEndpoint API.    You must not delete an EndpointConfig in use by an endpoint that is live or while the UpdateEndpoint or CreateEndpoint operations are being performed on the endpoint. To update an endpoint, you must create a new EndpointConfig. If you delete the EndpointConfig of an endpoint that is active or being created or updated you may lose visibility into the instance type the endpoint is using. The endpoint must be deleted in order to stop incurring charges.
    @Sendable
    public func updateEndpoint(_ input: UpdateEndpointInput, logger: Logger = AWSClient.loggingDisabled) async throws -> UpdateEndpointOutput {
        return try await self.client.execute(
            operation: "UpdateEndpoint", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Updates variant weight of one or more variants associated with an existing endpoint, or capacity of one variant associated with an existing endpoint. When it receives the request, SageMaker sets the endpoint status to Updating. After updating the endpoint, it sets the status to InService. To check the status of an endpoint, use the DescribeEndpoint API.
    @Sendable
    public func updateEndpointWeightsAndCapacities(_ input: UpdateEndpointWeightsAndCapacitiesInput, logger: Logger = AWSClient.loggingDisabled) async throws -> UpdateEndpointWeightsAndCapacitiesOutput {
        return try await self.client.execute(
            operation: "UpdateEndpointWeightsAndCapacities", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Adds, updates, or removes the description of an experiment. Updates the display name of an experiment.
    @Sendable
    public func updateExperiment(_ input: UpdateExperimentRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> UpdateExperimentResponse {
        return try await self.client.execute(
            operation: "UpdateExperiment", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Updates the feature group by either adding features or updating the online store configuration. Use one of the following request parameters at a time while using the UpdateFeatureGroup API. You can add features for your feature group using the FeatureAdditions request parameter. Features cannot be removed from a feature group. You can update the online store configuration by using the OnlineStoreConfig request parameter. If a TtlDuration is specified, the default TtlDuration applies for all records added to the feature group after the feature group is updated. If a record level TtlDuration exists from using the PutRecord API, the record level TtlDuration applies to that record instead of the default TtlDuration. To remove the default TtlDuration from an existing feature group, use the UpdateFeatureGroup API and set the TtlDuration Unit and Value to null.
    @Sendable
    public func updateFeatureGroup(_ input: UpdateFeatureGroupRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> UpdateFeatureGroupResponse {
        return try await self.client.execute(
            operation: "UpdateFeatureGroup", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Updates the description and parameters of the feature group.
    @Sendable
    public func updateFeatureMetadata(_ input: UpdateFeatureMetadataRequest, logger: Logger = AWSClient.loggingDisabled) async throws {
        return try await self.client.execute(
            operation: "UpdateFeatureMetadata", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Update a hub.  Hub APIs are only callable through SageMaker Studio.
    @Sendable
    public func updateHub(_ input: UpdateHubRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> UpdateHubResponse {
        return try await self.client.execute(
            operation: "UpdateHub", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Updates the properties of a SageMaker image. To change the image's tags, use the AddTags and DeleteTags APIs.
    @Sendable
    public func updateImage(_ input: UpdateImageRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> UpdateImageResponse {
        return try await self.client.execute(
            operation: "UpdateImage", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Updates the properties of a SageMaker image version.
    @Sendable
    public func updateImageVersion(_ input: UpdateImageVersionRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> UpdateImageVersionResponse {
        return try await self.client.execute(
            operation: "UpdateImageVersion", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Updates an inference component.
    @Sendable
    public func updateInferenceComponent(_ input: UpdateInferenceComponentInput, logger: Logger = AWSClient.loggingDisabled) async throws -> UpdateInferenceComponentOutput {
        return try await self.client.execute(
            operation: "UpdateInferenceComponent", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Runtime settings for a model that is deployed with an inference component.
    @Sendable
    public func updateInferenceComponentRuntimeConfig(_ input: UpdateInferenceComponentRuntimeConfigInput, logger: Logger = AWSClient.loggingDisabled) async throws -> UpdateInferenceComponentRuntimeConfigOutput {
        return try await self.client.execute(
            operation: "UpdateInferenceComponentRuntimeConfig", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    ///  Updates an inference experiment that you created. The status of the inference experiment has to be either Created, Running. For more information on the status of an inference experiment, see DescribeInferenceExperiment.
    @Sendable
    public func updateInferenceExperiment(_ input: UpdateInferenceExperimentRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> UpdateInferenceExperimentResponse {
        return try await self.client.execute(
            operation: "UpdateInferenceExperiment", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Update an Amazon SageMaker Model Card.  You cannot update both model card content and model card status in a single call.
    @Sendable
    public func updateModelCard(_ input: UpdateModelCardRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> UpdateModelCardResponse {
        return try await self.client.execute(
            operation: "UpdateModelCard", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Updates a versioned model.
    @Sendable
    public func updateModelPackage(_ input: UpdateModelPackageInput, logger: Logger = AWSClient.loggingDisabled) async throws -> UpdateModelPackageOutput {
        return try await self.client.execute(
            operation: "UpdateModelPackage", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Update the parameters of a model monitor alert.
    @Sendable
    public func updateMonitoringAlert(_ input: UpdateMonitoringAlertRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> UpdateMonitoringAlertResponse {
        return try await self.client.execute(
            operation: "UpdateMonitoringAlert", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Updates a previously created schedule.
    @Sendable
    public func updateMonitoringSchedule(_ input: UpdateMonitoringScheduleRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> UpdateMonitoringScheduleResponse {
        return try await self.client.execute(
            operation: "UpdateMonitoringSchedule", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Updates a notebook instance. NotebookInstance updates include upgrading or downgrading the ML compute instance used for your notebook instance to accommodate changes in your workload requirements.
    @Sendable
    public func updateNotebookInstance(_ input: UpdateNotebookInstanceInput, logger: Logger = AWSClient.loggingDisabled) async throws -> UpdateNotebookInstanceOutput {
        return try await self.client.execute(
            operation: "UpdateNotebookInstance", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Updates a notebook instance lifecycle configuration created with the CreateNotebookInstanceLifecycleConfig API.
    @Sendable
    public func updateNotebookInstanceLifecycleConfig(_ input: UpdateNotebookInstanceLifecycleConfigInput, logger: Logger = AWSClient.loggingDisabled) async throws -> UpdateNotebookInstanceLifecycleConfigOutput {
        return try await self.client.execute(
            operation: "UpdateNotebookInstanceLifecycleConfig", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Updates a pipeline.
    @Sendable
    public func updatePipeline(_ input: UpdatePipelineRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> UpdatePipelineResponse {
        return try await self.client.execute(
            operation: "UpdatePipeline", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Updates a pipeline execution.
    @Sendable
    public func updatePipelineExecution(_ input: UpdatePipelineExecutionRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> UpdatePipelineExecutionResponse {
        return try await self.client.execute(
            operation: "UpdatePipelineExecution", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Updates a machine learning (ML) project that is created from a template that  sets up an ML pipeline from training to deploying an approved model.  You must not update a project that is in use. If you update the ServiceCatalogProvisioningUpdateDetails of a project that is active or being created, or updated, you may lose resources already created by the project.
    @Sendable
    public func updateProject(_ input: UpdateProjectInput, logger: Logger = AWSClient.loggingDisabled) async throws -> UpdateProjectOutput {
        return try await self.client.execute(
            operation: "UpdateProject", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Updates the settings of a space.
    @Sendable
    public func updateSpace(_ input: UpdateSpaceRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> UpdateSpaceResponse {
        return try await self.client.execute(
            operation: "UpdateSpace", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Update a model training job to request a new Debugger profiling configuration or to change warm pool retention length.
    @Sendable
    public func updateTrainingJob(_ input: UpdateTrainingJobRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> UpdateTrainingJobResponse {
        return try await self.client.execute(
            operation: "UpdateTrainingJob", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Updates the display name of a trial.
    @Sendable
    public func updateTrial(_ input: UpdateTrialRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> UpdateTrialResponse {
        return try await self.client.execute(
            operation: "UpdateTrial", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Updates one or more properties of a trial component.
    @Sendable
    public func updateTrialComponent(_ input: UpdateTrialComponentRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> UpdateTrialComponentResponse {
        return try await self.client.execute(
            operation: "UpdateTrialComponent", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Updates a user profile.
    @Sendable
    public func updateUserProfile(_ input: UpdateUserProfileRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> UpdateUserProfileResponse {
        return try await self.client.execute(
            operation: "UpdateUserProfile", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Use this operation to update your workforce. You can use this operation to  require that workers use specific IP addresses to work on tasks and to update your OpenID Connect (OIDC) Identity Provider (IdP) workforce configuration. The worker portal is now supported in VPC and public internet. Use SourceIpConfig to restrict worker access to tasks to a specific range of IP addresses.  You specify allowed IP addresses by creating a list of up to ten CIDRs. By default, a workforce isn't restricted to specific IP addresses. If you specify a range of IP addresses, workers who attempt to access tasks using any IP address outside the specified range are denied and get a Not Found error message on the worker portal. To restrict access to all the workers in public internet, add the SourceIpConfig CIDR value as "10.0.0.0/16".  Amazon SageMaker does not support Source Ip restriction for worker portals in VPC.  Use OidcConfig to update the configuration of a workforce created using your own OIDC IdP.   You can only update your OIDC IdP configuration when there are no work teams associated with your workforce. You can delete work teams using the DeleteWorkteam operation.  After restricting access to a range of IP addresses or updating your OIDC IdP configuration with this operation, you can view details about your update workforce using the DescribeWorkforce operation.  This operation only applies to private workforces.
    @Sendable
    public func updateWorkforce(_ input: UpdateWorkforceRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> UpdateWorkforceResponse {
        return try await self.client.execute(
            operation: "UpdateWorkforce", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Updates an existing work team with new member definitions or description.
    @Sendable
    public func updateWorkteam(_ input: UpdateWorkteamRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> UpdateWorkteamResponse {
        return try await self.client.execute(
            operation: "UpdateWorkteam", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
}

extension SageMaker {
    /// Initializer required by `AWSService.with(middlewares:timeout:byteBufferAllocator:options)`. You are not able to use this initializer directly as there are not public
    /// initializers for `AWSServiceConfig.Patch`. Please use `AWSService.with(middlewares:timeout:byteBufferAllocator:options)` instead.
    public init(from: SageMaker, patch: AWSServiceConfig.Patch) {
        self.client = from.client
        self.config = from.config.with(patch: patch)
    }
}

// MARK: Paginators

@available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
extension SageMaker {
    /// Lists the actions in your account and their properties.
    /// Return PaginatorSequence for operation.
    ///
    /// - Parameters:
    ///   - input: Input for request
    ///   - logger: Logger used flot logging
    public func listActionsPaginator(
        _ input: ListActionsRequest,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<ListActionsRequest, ListActionsResponse> {
        return .init(
            input: input,
            command: self.listActions,
            inputKey: \ListActionsRequest.nextToken,
            outputKey: \ListActionsResponse.nextToken,
            logger: logger
        )
    }

    /// Lists the machine learning algorithms that have been created.
    /// Return PaginatorSequence for operation.
    ///
    /// - Parameters:
    ///   - input: Input for request
    ///   - logger: Logger used flot logging
    public func listAlgorithmsPaginator(
        _ input: ListAlgorithmsInput,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<ListAlgorithmsInput, ListAlgorithmsOutput> {
        return .init(
            input: input,
            command: self.listAlgorithms,
            inputKey: \ListAlgorithmsInput.nextToken,
            outputKey: \ListAlgorithmsOutput.nextToken,
            logger: logger
        )
    }

    /// Lists the aliases of a specified image or image version.
    /// Return PaginatorSequence for operation.
    ///
    /// - Parameters:
    ///   - input: Input for request
    ///   - logger: Logger used flot logging
    public func listAliasesPaginator(
        _ input: ListAliasesRequest,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<ListAliasesRequest, ListAliasesResponse> {
        return .init(
            input: input,
            command: self.listAliases,
            inputKey: \ListAliasesRequest.nextToken,
            outputKey: \ListAliasesResponse.nextToken,
            logger: logger
        )
    }

    /// Lists the AppImageConfigs in your account and their properties. The list can be filtered by creation time or modified time, and whether the AppImageConfig name contains a specified string.
    /// Return PaginatorSequence for operation.
    ///
    /// - Parameters:
    ///   - input: Input for request
    ///   - logger: Logger used flot logging
    public func listAppImageConfigsPaginator(
        _ input: ListAppImageConfigsRequest,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<ListAppImageConfigsRequest, ListAppImageConfigsResponse> {
        return .init(
            input: input,
            command: self.listAppImageConfigs,
            inputKey: \ListAppImageConfigsRequest.nextToken,
            outputKey: \ListAppImageConfigsResponse.nextToken,
            logger: logger
        )
    }

    /// Lists apps.
    /// Return PaginatorSequence for operation.
    ///
    /// - Parameters:
    ///   - input: Input for request
    ///   - logger: Logger used flot logging
    public func listAppsPaginator(
        _ input: ListAppsRequest,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<ListAppsRequest, ListAppsResponse> {
        return .init(
            input: input,
            command: self.listApps,
            inputKey: \ListAppsRequest.nextToken,
            outputKey: \ListAppsResponse.nextToken,
            logger: logger
        )
    }

    /// Lists the artifacts in your account and their properties.
    /// Return PaginatorSequence for operation.
    ///
    /// - Parameters:
    ///   - input: Input for request
    ///   - logger: Logger used flot logging
    public func listArtifactsPaginator(
        _ input: ListArtifactsRequest,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<ListArtifactsRequest, ListArtifactsResponse> {
        return .init(
            input: input,
            command: self.listArtifacts,
            inputKey: \ListArtifactsRequest.nextToken,
            outputKey: \ListArtifactsResponse.nextToken,
            logger: logger
        )
    }

    /// Lists the associations in your account and their properties.
    /// Return PaginatorSequence for operation.
    ///
    /// - Parameters:
    ///   - input: Input for request
    ///   - logger: Logger used flot logging
    public func listAssociationsPaginator(
        _ input: ListAssociationsRequest,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<ListAssociationsRequest, ListAssociationsResponse> {
        return .init(
            input: input,
            command: self.listAssociations,
            inputKey: \ListAssociationsRequest.nextToken,
            outputKey: \ListAssociationsResponse.nextToken,
            logger: logger
        )
    }

    /// Request a list of jobs.
    /// Return PaginatorSequence for operation.
    ///
    /// - Parameters:
    ///   - input: Input for request
    ///   - logger: Logger used flot logging
    public func listAutoMLJobsPaginator(
        _ input: ListAutoMLJobsRequest,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<ListAutoMLJobsRequest, ListAutoMLJobsResponse> {
        return .init(
            input: input,
            command: self.listAutoMLJobs,
            inputKey: \ListAutoMLJobsRequest.nextToken,
            outputKey: \ListAutoMLJobsResponse.nextToken,
            logger: logger
        )
    }

    /// List the candidates created for the job.
    /// Return PaginatorSequence for operation.
    ///
    /// - Parameters:
    ///   - input: Input for request
    ///   - logger: Logger used flot logging
    public func listCandidatesForAutoMLJobPaginator(
        _ input: ListCandidatesForAutoMLJobRequest,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<ListCandidatesForAutoMLJobRequest, ListCandidatesForAutoMLJobResponse> {
        return .init(
            input: input,
            command: self.listCandidatesForAutoMLJob,
            inputKey: \ListCandidatesForAutoMLJobRequest.nextToken,
            outputKey: \ListCandidatesForAutoMLJobResponse.nextToken,
            logger: logger
        )
    }

    /// Gets a list of the Git repositories in your account.
    /// Return PaginatorSequence for operation.
    ///
    /// - Parameters:
    ///   - input: Input for request
    ///   - logger: Logger used flot logging
    public func listCodeRepositoriesPaginator(
        _ input: ListCodeRepositoriesInput,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<ListCodeRepositoriesInput, ListCodeRepositoriesOutput> {
        return .init(
            input: input,
            command: self.listCodeRepositories,
            inputKey: \ListCodeRepositoriesInput.nextToken,
            outputKey: \ListCodeRepositoriesOutput.nextToken,
            logger: logger
        )
    }

    /// Lists model compilation jobs that satisfy various filters. To create a model compilation job, use CreateCompilationJob. To get information about a particular model compilation job you have created, use DescribeCompilationJob.
    /// Return PaginatorSequence for operation.
    ///
    /// - Parameters:
    ///   - input: Input for request
    ///   - logger: Logger used flot logging
    public func listCompilationJobsPaginator(
        _ input: ListCompilationJobsRequest,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<ListCompilationJobsRequest, ListCompilationJobsResponse> {
        return .init(
            input: input,
            command: self.listCompilationJobs,
            inputKey: \ListCompilationJobsRequest.nextToken,
            outputKey: \ListCompilationJobsResponse.nextToken,
            logger: logger
        )
    }

    /// Lists the contexts in your account and their properties.
    /// Return PaginatorSequence for operation.
    ///
    /// - Parameters:
    ///   - input: Input for request
    ///   - logger: Logger used flot logging
    public func listContextsPaginator(
        _ input: ListContextsRequest,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<ListContextsRequest, ListContextsResponse> {
        return .init(
            input: input,
            command: self.listContexts,
            inputKey: \ListContextsRequest.nextToken,
            outputKey: \ListContextsResponse.nextToken,
            logger: logger
        )
    }

    /// Lists the data quality job definitions in your account.
    /// Return PaginatorSequence for operation.
    ///
    /// - Parameters:
    ///   - input: Input for request
    ///   - logger: Logger used flot logging
    public func listDataQualityJobDefinitionsPaginator(
        _ input: ListDataQualityJobDefinitionsRequest,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<ListDataQualityJobDefinitionsRequest, ListDataQualityJobDefinitionsResponse> {
        return .init(
            input: input,
            command: self.listDataQualityJobDefinitions,
            inputKey: \ListDataQualityJobDefinitionsRequest.nextToken,
            outputKey: \ListDataQualityJobDefinitionsResponse.nextToken,
            logger: logger
        )
    }

    /// Returns a list of devices in the fleet.
    /// Return PaginatorSequence for operation.
    ///
    /// - Parameters:
    ///   - input: Input for request
    ///   - logger: Logger used flot logging
    public func listDeviceFleetsPaginator(
        _ input: ListDeviceFleetsRequest,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<ListDeviceFleetsRequest, ListDeviceFleetsResponse> {
        return .init(
            input: input,
            command: self.listDeviceFleets,
            inputKey: \ListDeviceFleetsRequest.nextToken,
            outputKey: \ListDeviceFleetsResponse.nextToken,
            logger: logger
        )
    }

    /// A list of devices.
    /// Return PaginatorSequence for operation.
    ///
    /// - Parameters:
    ///   - input: Input for request
    ///   - logger: Logger used flot logging
    public func listDevicesPaginator(
        _ input: ListDevicesRequest,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<ListDevicesRequest, ListDevicesResponse> {
        return .init(
            input: input,
            command: self.listDevices,
            inputKey: \ListDevicesRequest.nextToken,
            outputKey: \ListDevicesResponse.nextToken,
            logger: logger
        )
    }

    /// Lists the domains.
    /// Return PaginatorSequence for operation.
    ///
    /// - Parameters:
    ///   - input: Input for request
    ///   - logger: Logger used flot logging
    public func listDomainsPaginator(
        _ input: ListDomainsRequest,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<ListDomainsRequest, ListDomainsResponse> {
        return .init(
            input: input,
            command: self.listDomains,
            inputKey: \ListDomainsRequest.nextToken,
            outputKey: \ListDomainsResponse.nextToken,
            logger: logger
        )
    }

    /// Lists all edge deployment plans.
    /// Return PaginatorSequence for operation.
    ///
    /// - Parameters:
    ///   - input: Input for request
    ///   - logger: Logger used flot logging
    public func listEdgeDeploymentPlansPaginator(
        _ input: ListEdgeDeploymentPlansRequest,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<ListEdgeDeploymentPlansRequest, ListEdgeDeploymentPlansResponse> {
        return .init(
            input: input,
            command: self.listEdgeDeploymentPlans,
            inputKey: \ListEdgeDeploymentPlansRequest.nextToken,
            outputKey: \ListEdgeDeploymentPlansResponse.nextToken,
            logger: logger
        )
    }

    /// Returns a list of edge packaging jobs.
    /// Return PaginatorSequence for operation.
    ///
    /// - Parameters:
    ///   - input: Input for request
    ///   - logger: Logger used flot logging
    public func listEdgePackagingJobsPaginator(
        _ input: ListEdgePackagingJobsRequest,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<ListEdgePackagingJobsRequest, ListEdgePackagingJobsResponse> {
        return .init(
            input: input,
            command: self.listEdgePackagingJobs,
            inputKey: \ListEdgePackagingJobsRequest.nextToken,
            outputKey: \ListEdgePackagingJobsResponse.nextToken,
            logger: logger
        )
    }

    /// Lists endpoint configurations.
    /// Return PaginatorSequence for operation.
    ///
    /// - Parameters:
    ///   - input: Input for request
    ///   - logger: Logger used flot logging
    public func listEndpointConfigsPaginator(
        _ input: ListEndpointConfigsInput,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<ListEndpointConfigsInput, ListEndpointConfigsOutput> {
        return .init(
            input: input,
            command: self.listEndpointConfigs,
            inputKey: \ListEndpointConfigsInput.nextToken,
            outputKey: \ListEndpointConfigsOutput.nextToken,
            logger: logger
        )
    }

    /// Lists endpoints.
    /// Return PaginatorSequence for operation.
    ///
    /// - Parameters:
    ///   - input: Input for request
    ///   - logger: Logger used flot logging
    public func listEndpointsPaginator(
        _ input: ListEndpointsInput,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<ListEndpointsInput, ListEndpointsOutput> {
        return .init(
            input: input,
            command: self.listEndpoints,
            inputKey: \ListEndpointsInput.nextToken,
            outputKey: \ListEndpointsOutput.nextToken,
            logger: logger
        )
    }

    /// Lists all the experiments in your account. The list can be filtered to show only experiments that were created in a specific time range. The list can be sorted by experiment name or creation time.
    /// Return PaginatorSequence for operation.
    ///
    /// - Parameters:
    ///   - input: Input for request
    ///   - logger: Logger used flot logging
    public func listExperimentsPaginator(
        _ input: ListExperimentsRequest,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<ListExperimentsRequest, ListExperimentsResponse> {
        return .init(
            input: input,
            command: self.listExperiments,
            inputKey: \ListExperimentsRequest.nextToken,
            outputKey: \ListExperimentsResponse.nextToken,
            logger: logger
        )
    }

    /// List FeatureGroups based on given filter and order.
    /// Return PaginatorSequence for operation.
    ///
    /// - Parameters:
    ///   - input: Input for request
    ///   - logger: Logger used flot logging
    public func listFeatureGroupsPaginator(
        _ input: ListFeatureGroupsRequest,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<ListFeatureGroupsRequest, ListFeatureGroupsResponse> {
        return .init(
            input: input,
            command: self.listFeatureGroups,
            inputKey: \ListFeatureGroupsRequest.nextToken,
            outputKey: \ListFeatureGroupsResponse.nextToken,
            logger: logger
        )
    }

    /// Returns information about the flow definitions in your account.
    /// Return PaginatorSequence for operation.
    ///
    /// - Parameters:
    ///   - input: Input for request
    ///   - logger: Logger used flot logging
    public func listFlowDefinitionsPaginator(
        _ input: ListFlowDefinitionsRequest,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<ListFlowDefinitionsRequest, ListFlowDefinitionsResponse> {
        return .init(
            input: input,
            command: self.listFlowDefinitions,
            inputKey: \ListFlowDefinitionsRequest.nextToken,
            outputKey: \ListFlowDefinitionsResponse.nextToken,
            logger: logger
        )
    }

    /// Returns information about the human task user interfaces in your account.
    /// Return PaginatorSequence for operation.
    ///
    /// - Parameters:
    ///   - input: Input for request
    ///   - logger: Logger used flot logging
    public func listHumanTaskUisPaginator(
        _ input: ListHumanTaskUisRequest,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<ListHumanTaskUisRequest, ListHumanTaskUisResponse> {
        return .init(
            input: input,
            command: self.listHumanTaskUis,
            inputKey: \ListHumanTaskUisRequest.nextToken,
            outputKey: \ListHumanTaskUisResponse.nextToken,
            logger: logger
        )
    }

    /// Gets a list of HyperParameterTuningJobSummary objects that describe the hyperparameter tuning jobs launched in your account.
    /// Return PaginatorSequence for operation.
    ///
    /// - Parameters:
    ///   - input: Input for request
    ///   - logger: Logger used flot logging
    public func listHyperParameterTuningJobsPaginator(
        _ input: ListHyperParameterTuningJobsRequest,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<ListHyperParameterTuningJobsRequest, ListHyperParameterTuningJobsResponse> {
        return .init(
            input: input,
            command: self.listHyperParameterTuningJobs,
            inputKey: \ListHyperParameterTuningJobsRequest.nextToken,
            outputKey: \ListHyperParameterTuningJobsResponse.nextToken,
            logger: logger
        )
    }

    /// Lists the versions of a specified image and their properties. The list can be filtered by creation time or modified time.
    /// Return PaginatorSequence for operation.
    ///
    /// - Parameters:
    ///   - input: Input for request
    ///   - logger: Logger used flot logging
    public func listImageVersionsPaginator(
        _ input: ListImageVersionsRequest,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<ListImageVersionsRequest, ListImageVersionsResponse> {
        return .init(
            input: input,
            command: self.listImageVersions,
            inputKey: \ListImageVersionsRequest.nextToken,
            outputKey: \ListImageVersionsResponse.nextToken,
            logger: logger
        )
    }

    /// Lists the images in your account and their properties. The list can be filtered by creation time or modified time, and whether the image name contains a specified string.
    /// Return PaginatorSequence for operation.
    ///
    /// - Parameters:
    ///   - input: Input for request
    ///   - logger: Logger used flot logging
    public func listImagesPaginator(
        _ input: ListImagesRequest,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<ListImagesRequest, ListImagesResponse> {
        return .init(
            input: input,
            command: self.listImages,
            inputKey: \ListImagesRequest.nextToken,
            outputKey: \ListImagesResponse.nextToken,
            logger: logger
        )
    }

    /// Lists the inference components in your account and their properties.
    /// Return PaginatorSequence for operation.
    ///
    /// - Parameters:
    ///   - input: Input for request
    ///   - logger: Logger used flot logging
    public func listInferenceComponentsPaginator(
        _ input: ListInferenceComponentsInput,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<ListInferenceComponentsInput, ListInferenceComponentsOutput> {
        return .init(
            input: input,
            command: self.listInferenceComponents,
            inputKey: \ListInferenceComponentsInput.nextToken,
            outputKey: \ListInferenceComponentsOutput.nextToken,
            logger: logger
        )
    }

    /// Returns the list of all inference experiments.
    /// Return PaginatorSequence for operation.
    ///
    /// - Parameters:
    ///   - input: Input for request
    ///   - logger: Logger used flot logging
    public func listInferenceExperimentsPaginator(
        _ input: ListInferenceExperimentsRequest,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<ListInferenceExperimentsRequest, ListInferenceExperimentsResponse> {
        return .init(
            input: input,
            command: self.listInferenceExperiments,
            inputKey: \ListInferenceExperimentsRequest.nextToken,
            outputKey: \ListInferenceExperimentsResponse.nextToken,
            logger: logger
        )
    }

    /// Returns a list of the subtasks for an Inference Recommender job. The supported subtasks are benchmarks, which evaluate the performance of your model on different instance types.
    /// Return PaginatorSequence for operation.
    ///
    /// - Parameters:
    ///   - input: Input for request
    ///   - logger: Logger used flot logging
    public func listInferenceRecommendationsJobStepsPaginator(
        _ input: ListInferenceRecommendationsJobStepsRequest,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<ListInferenceRecommendationsJobStepsRequest, ListInferenceRecommendationsJobStepsResponse> {
        return .init(
            input: input,
            command: self.listInferenceRecommendationsJobSteps,
            inputKey: \ListInferenceRecommendationsJobStepsRequest.nextToken,
            outputKey: \ListInferenceRecommendationsJobStepsResponse.nextToken,
            logger: logger
        )
    }

    /// Lists recommendation jobs that satisfy various filters.
    /// Return PaginatorSequence for operation.
    ///
    /// - Parameters:
    ///   - input: Input for request
    ///   - logger: Logger used flot logging
    public func listInferenceRecommendationsJobsPaginator(
        _ input: ListInferenceRecommendationsJobsRequest,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<ListInferenceRecommendationsJobsRequest, ListInferenceRecommendationsJobsResponse> {
        return .init(
            input: input,
            command: self.listInferenceRecommendationsJobs,
            inputKey: \ListInferenceRecommendationsJobsRequest.nextToken,
            outputKey: \ListInferenceRecommendationsJobsResponse.nextToken,
            logger: logger
        )
    }

    /// Gets a list of labeling jobs.
    /// Return PaginatorSequence for operation.
    ///
    /// - Parameters:
    ///   - input: Input for request
    ///   - logger: Logger used flot logging
    public func listLabelingJobsPaginator(
        _ input: ListLabelingJobsRequest,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<ListLabelingJobsRequest, ListLabelingJobsResponse> {
        return .init(
            input: input,
            command: self.listLabelingJobs,
            inputKey: \ListLabelingJobsRequest.nextToken,
            outputKey: \ListLabelingJobsResponse.nextToken,
            logger: logger
        )
    }

    /// Gets a list of labeling jobs assigned to a specified work team.
    /// Return PaginatorSequence for operation.
    ///
    /// - Parameters:
    ///   - input: Input for request
    ///   - logger: Logger used flot logging
    public func listLabelingJobsForWorkteamPaginator(
        _ input: ListLabelingJobsForWorkteamRequest,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<ListLabelingJobsForWorkteamRequest, ListLabelingJobsForWorkteamResponse> {
        return .init(
            input: input,
            command: self.listLabelingJobsForWorkteam,
            inputKey: \ListLabelingJobsForWorkteamRequest.nextToken,
            outputKey: \ListLabelingJobsForWorkteamResponse.nextToken,
            logger: logger
        )
    }

    /// A list of lineage groups shared with your Amazon Web Services account.  For more information, see  Cross-Account Lineage Tracking  in the Amazon SageMaker Developer Guide.
    /// Return PaginatorSequence for operation.
    ///
    /// - Parameters:
    ///   - input: Input for request
    ///   - logger: Logger used flot logging
    public func listLineageGroupsPaginator(
        _ input: ListLineageGroupsRequest,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<ListLineageGroupsRequest, ListLineageGroupsResponse> {
        return .init(
            input: input,
            command: self.listLineageGroups,
            inputKey: \ListLineageGroupsRequest.nextToken,
            outputKey: \ListLineageGroupsResponse.nextToken,
            logger: logger
        )
    }

    /// Lists model bias jobs definitions that satisfy various filters.
    /// Return PaginatorSequence for operation.
    ///
    /// - Parameters:
    ///   - input: Input for request
    ///   - logger: Logger used flot logging
    public func listModelBiasJobDefinitionsPaginator(
        _ input: ListModelBiasJobDefinitionsRequest,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<ListModelBiasJobDefinitionsRequest, ListModelBiasJobDefinitionsResponse> {
        return .init(
            input: input,
            command: self.listModelBiasJobDefinitions,
            inputKey: \ListModelBiasJobDefinitionsRequest.nextToken,
            outputKey: \ListModelBiasJobDefinitionsResponse.nextToken,
            logger: logger
        )
    }

    /// List the export jobs for the Amazon SageMaker Model Card.
    /// Return PaginatorSequence for operation.
    ///
    /// - Parameters:
    ///   - input: Input for request
    ///   - logger: Logger used flot logging
    public func listModelCardExportJobsPaginator(
        _ input: ListModelCardExportJobsRequest,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<ListModelCardExportJobsRequest, ListModelCardExportJobsResponse> {
        return .init(
            input: input,
            command: self.listModelCardExportJobs,
            inputKey: \ListModelCardExportJobsRequest.nextToken,
            outputKey: \ListModelCardExportJobsResponse.nextToken,
            logger: logger
        )
    }

    /// List existing versions of an Amazon SageMaker Model Card.
    /// Return PaginatorSequence for operation.
    ///
    /// - Parameters:
    ///   - input: Input for request
    ///   - logger: Logger used flot logging
    public func listModelCardVersionsPaginator(
        _ input: ListModelCardVersionsRequest,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<ListModelCardVersionsRequest, ListModelCardVersionsResponse> {
        return .init(
            input: input,
            command: self.listModelCardVersions,
            inputKey: \ListModelCardVersionsRequest.nextToken,
            outputKey: \ListModelCardVersionsResponse.nextToken,
            logger: logger
        )
    }

    /// List existing model cards.
    /// Return PaginatorSequence for operation.
    ///
    /// - Parameters:
    ///   - input: Input for request
    ///   - logger: Logger used flot logging
    public func listModelCardsPaginator(
        _ input: ListModelCardsRequest,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<ListModelCardsRequest, ListModelCardsResponse> {
        return .init(
            input: input,
            command: self.listModelCards,
            inputKey: \ListModelCardsRequest.nextToken,
            outputKey: \ListModelCardsResponse.nextToken,
            logger: logger
        )
    }

    /// Lists model explainability job definitions that satisfy various filters.
    /// Return PaginatorSequence for operation.
    ///
    /// - Parameters:
    ///   - input: Input for request
    ///   - logger: Logger used flot logging
    public func listModelExplainabilityJobDefinitionsPaginator(
        _ input: ListModelExplainabilityJobDefinitionsRequest,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<ListModelExplainabilityJobDefinitionsRequest, ListModelExplainabilityJobDefinitionsResponse> {
        return .init(
            input: input,
            command: self.listModelExplainabilityJobDefinitions,
            inputKey: \ListModelExplainabilityJobDefinitionsRequest.nextToken,
            outputKey: \ListModelExplainabilityJobDefinitionsResponse.nextToken,
            logger: logger
        )
    }

    /// Lists the domain, framework, task, and model name of standard  machine learning models found in common model zoos.
    /// Return PaginatorSequence for operation.
    ///
    /// - Parameters:
    ///   - input: Input for request
    ///   - logger: Logger used flot logging
    public func listModelMetadataPaginator(
        _ input: ListModelMetadataRequest,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<ListModelMetadataRequest, ListModelMetadataResponse> {
        return .init(
            input: input,
            command: self.listModelMetadata,
            inputKey: \ListModelMetadataRequest.nextToken,
            outputKey: \ListModelMetadataResponse.nextToken,
            logger: logger
        )
    }

    /// Gets a list of the model groups in your Amazon Web Services account.
    /// Return PaginatorSequence for operation.
    ///
    /// - Parameters:
    ///   - input: Input for request
    ///   - logger: Logger used flot logging
    public func listModelPackageGroupsPaginator(
        _ input: ListModelPackageGroupsInput,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<ListModelPackageGroupsInput, ListModelPackageGroupsOutput> {
        return .init(
            input: input,
            command: self.listModelPackageGroups,
            inputKey: \ListModelPackageGroupsInput.nextToken,
            outputKey: \ListModelPackageGroupsOutput.nextToken,
            logger: logger
        )
    }

    /// Lists the model packages that have been created.
    /// Return PaginatorSequence for operation.
    ///
    /// - Parameters:
    ///   - input: Input for request
    ///   - logger: Logger used flot logging
    public func listModelPackagesPaginator(
        _ input: ListModelPackagesInput,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<ListModelPackagesInput, ListModelPackagesOutput> {
        return .init(
            input: input,
            command: self.listModelPackages,
            inputKey: \ListModelPackagesInput.nextToken,
            outputKey: \ListModelPackagesOutput.nextToken,
            logger: logger
        )
    }

    /// Gets a list of model quality monitoring job definitions in your account.
    /// Return PaginatorSequence for operation.
    ///
    /// - Parameters:
    ///   - input: Input for request
    ///   - logger: Logger used flot logging
    public func listModelQualityJobDefinitionsPaginator(
        _ input: ListModelQualityJobDefinitionsRequest,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<ListModelQualityJobDefinitionsRequest, ListModelQualityJobDefinitionsResponse> {
        return .init(
            input: input,
            command: self.listModelQualityJobDefinitions,
            inputKey: \ListModelQualityJobDefinitionsRequest.nextToken,
            outputKey: \ListModelQualityJobDefinitionsResponse.nextToken,
            logger: logger
        )
    }

    /// Lists models created with the CreateModel API.
    /// Return PaginatorSequence for operation.
    ///
    /// - Parameters:
    ///   - input: Input for request
    ///   - logger: Logger used flot logging
    public func listModelsPaginator(
        _ input: ListModelsInput,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<ListModelsInput, ListModelsOutput> {
        return .init(
            input: input,
            command: self.listModels,
            inputKey: \ListModelsInput.nextToken,
            outputKey: \ListModelsOutput.nextToken,
            logger: logger
        )
    }

    /// Gets a list of past alerts in a model monitoring schedule.
    /// Return PaginatorSequence for operation.
    ///
    /// - Parameters:
    ///   - input: Input for request
    ///   - logger: Logger used flot logging
    public func listMonitoringAlertHistoryPaginator(
        _ input: ListMonitoringAlertHistoryRequest,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<ListMonitoringAlertHistoryRequest, ListMonitoringAlertHistoryResponse> {
        return .init(
            input: input,
            command: self.listMonitoringAlertHistory,
            inputKey: \ListMonitoringAlertHistoryRequest.nextToken,
            outputKey: \ListMonitoringAlertHistoryResponse.nextToken,
            logger: logger
        )
    }

    /// Gets the alerts for a single monitoring schedule.
    /// Return PaginatorSequence for operation.
    ///
    /// - Parameters:
    ///   - input: Input for request
    ///   - logger: Logger used flot logging
    public func listMonitoringAlertsPaginator(
        _ input: ListMonitoringAlertsRequest,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<ListMonitoringAlertsRequest, ListMonitoringAlertsResponse> {
        return .init(
            input: input,
            command: self.listMonitoringAlerts,
            inputKey: \ListMonitoringAlertsRequest.nextToken,
            outputKey: \ListMonitoringAlertsResponse.nextToken,
            logger: logger
        )
    }

    /// Returns list of all monitoring job executions.
    /// Return PaginatorSequence for operation.
    ///
    /// - Parameters:
    ///   - input: Input for request
    ///   - logger: Logger used flot logging
    public func listMonitoringExecutionsPaginator(
        _ input: ListMonitoringExecutionsRequest,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<ListMonitoringExecutionsRequest, ListMonitoringExecutionsResponse> {
        return .init(
            input: input,
            command: self.listMonitoringExecutions,
            inputKey: \ListMonitoringExecutionsRequest.nextToken,
            outputKey: \ListMonitoringExecutionsResponse.nextToken,
            logger: logger
        )
    }

    /// Returns list of all monitoring schedules.
    /// Return PaginatorSequence for operation.
    ///
    /// - Parameters:
    ///   - input: Input for request
    ///   - logger: Logger used flot logging
    public func listMonitoringSchedulesPaginator(
        _ input: ListMonitoringSchedulesRequest,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<ListMonitoringSchedulesRequest, ListMonitoringSchedulesResponse> {
        return .init(
            input: input,
            command: self.listMonitoringSchedules,
            inputKey: \ListMonitoringSchedulesRequest.nextToken,
            outputKey: \ListMonitoringSchedulesResponse.nextToken,
            logger: logger
        )
    }

    /// Lists notebook instance lifestyle configurations created with the CreateNotebookInstanceLifecycleConfig API.
    /// Return PaginatorSequence for operation.
    ///
    /// - Parameters:
    ///   - input: Input for request
    ///   - logger: Logger used flot logging
    public func listNotebookInstanceLifecycleConfigsPaginator(
        _ input: ListNotebookInstanceLifecycleConfigsInput,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<ListNotebookInstanceLifecycleConfigsInput, ListNotebookInstanceLifecycleConfigsOutput> {
        return .init(
            input: input,
            command: self.listNotebookInstanceLifecycleConfigs,
            inputKey: \ListNotebookInstanceLifecycleConfigsInput.nextToken,
            outputKey: \ListNotebookInstanceLifecycleConfigsOutput.nextToken,
            logger: logger
        )
    }

    /// Returns a list of the SageMaker notebook instances in the requester's account in an Amazon Web Services Region.
    /// Return PaginatorSequence for operation.
    ///
    /// - Parameters:
    ///   - input: Input for request
    ///   - logger: Logger used flot logging
    public func listNotebookInstancesPaginator(
        _ input: ListNotebookInstancesInput,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<ListNotebookInstancesInput, ListNotebookInstancesOutput> {
        return .init(
            input: input,
            command: self.listNotebookInstances,
            inputKey: \ListNotebookInstancesInput.nextToken,
            outputKey: \ListNotebookInstancesOutput.nextToken,
            logger: logger
        )
    }

    /// Gets a list of PipeLineExecutionStep objects.
    /// Return PaginatorSequence for operation.
    ///
    /// - Parameters:
    ///   - input: Input for request
    ///   - logger: Logger used flot logging
    public func listPipelineExecutionStepsPaginator(
        _ input: ListPipelineExecutionStepsRequest,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<ListPipelineExecutionStepsRequest, ListPipelineExecutionStepsResponse> {
        return .init(
            input: input,
            command: self.listPipelineExecutionSteps,
            inputKey: \ListPipelineExecutionStepsRequest.nextToken,
            outputKey: \ListPipelineExecutionStepsResponse.nextToken,
            logger: logger
        )
    }

    /// Gets a list of the pipeline executions.
    /// Return PaginatorSequence for operation.
    ///
    /// - Parameters:
    ///   - input: Input for request
    ///   - logger: Logger used flot logging
    public func listPipelineExecutionsPaginator(
        _ input: ListPipelineExecutionsRequest,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<ListPipelineExecutionsRequest, ListPipelineExecutionsResponse> {
        return .init(
            input: input,
            command: self.listPipelineExecutions,
            inputKey: \ListPipelineExecutionsRequest.nextToken,
            outputKey: \ListPipelineExecutionsResponse.nextToken,
            logger: logger
        )
    }

    /// Gets a list of parameters for a pipeline execution.
    /// Return PaginatorSequence for operation.
    ///
    /// - Parameters:
    ///   - input: Input for request
    ///   - logger: Logger used flot logging
    public func listPipelineParametersForExecutionPaginator(
        _ input: ListPipelineParametersForExecutionRequest,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<ListPipelineParametersForExecutionRequest, ListPipelineParametersForExecutionResponse> {
        return .init(
            input: input,
            command: self.listPipelineParametersForExecution,
            inputKey: \ListPipelineParametersForExecutionRequest.nextToken,
            outputKey: \ListPipelineParametersForExecutionResponse.nextToken,
            logger: logger
        )
    }

    /// Gets a list of pipelines.
    /// Return PaginatorSequence for operation.
    ///
    /// - Parameters:
    ///   - input: Input for request
    ///   - logger: Logger used flot logging
    public func listPipelinesPaginator(
        _ input: ListPipelinesRequest,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<ListPipelinesRequest, ListPipelinesResponse> {
        return .init(
            input: input,
            command: self.listPipelines,
            inputKey: \ListPipelinesRequest.nextToken,
            outputKey: \ListPipelinesResponse.nextToken,
            logger: logger
        )
    }

    /// Lists processing jobs that satisfy various filters.
    /// Return PaginatorSequence for operation.
    ///
    /// - Parameters:
    ///   - input: Input for request
    ///   - logger: Logger used flot logging
    public func listProcessingJobsPaginator(
        _ input: ListProcessingJobsRequest,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<ListProcessingJobsRequest, ListProcessingJobsResponse> {
        return .init(
            input: input,
            command: self.listProcessingJobs,
            inputKey: \ListProcessingJobsRequest.nextToken,
            outputKey: \ListProcessingJobsResponse.nextToken,
            logger: logger
        )
    }

    /// Gets a list of the projects in an Amazon Web Services account.
    /// Return PaginatorSequence for operation.
    ///
    /// - Parameters:
    ///   - input: Input for request
    ///   - logger: Logger used flot logging
    public func listProjectsPaginator(
        _ input: ListProjectsInput,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<ListProjectsInput, ListProjectsOutput> {
        return .init(
            input: input,
            command: self.listProjects,
            inputKey: \ListProjectsInput.nextToken,
            outputKey: \ListProjectsOutput.nextToken,
            logger: logger
        )
    }

    ///  Lists Amazon SageMaker Catalogs based on given filters and orders. The maximum number of ResourceCatalogs viewable is 1000.
    /// Return PaginatorSequence for operation.
    ///
    /// - Parameters:
    ///   - input: Input for request
    ///   - logger: Logger used flot logging
    public func listResourceCatalogsPaginator(
        _ input: ListResourceCatalogsRequest,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<ListResourceCatalogsRequest, ListResourceCatalogsResponse> {
        return .init(
            input: input,
            command: self.listResourceCatalogs,
            inputKey: \ListResourceCatalogsRequest.nextToken,
            outputKey: \ListResourceCatalogsResponse.nextToken,
            logger: logger
        )
    }

    /// Lists spaces.
    /// Return PaginatorSequence for operation.
    ///
    /// - Parameters:
    ///   - input: Input for request
    ///   - logger: Logger used flot logging
    public func listSpacesPaginator(
        _ input: ListSpacesRequest,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<ListSpacesRequest, ListSpacesResponse> {
        return .init(
            input: input,
            command: self.listSpaces,
            inputKey: \ListSpacesRequest.nextToken,
            outputKey: \ListSpacesResponse.nextToken,
            logger: logger
        )
    }

    /// Lists devices allocated to the stage, containing detailed device information and deployment status.
    /// Return PaginatorSequence for operation.
    ///
    /// - Parameters:
    ///   - input: Input for request
    ///   - logger: Logger used flot logging
    public func listStageDevicesPaginator(
        _ input: ListStageDevicesRequest,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<ListStageDevicesRequest, ListStageDevicesResponse> {
        return .init(
            input: input,
            command: self.listStageDevices,
            inputKey: \ListStageDevicesRequest.nextToken,
            outputKey: \ListStageDevicesResponse.nextToken,
            logger: logger
        )
    }

    /// Lists the Amazon SageMaker Studio Lifecycle Configurations in your Amazon Web Services Account.
    /// Return PaginatorSequence for operation.
    ///
    /// - Parameters:
    ///   - input: Input for request
    ///   - logger: Logger used flot logging
    public func listStudioLifecycleConfigsPaginator(
        _ input: ListStudioLifecycleConfigsRequest,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<ListStudioLifecycleConfigsRequest, ListStudioLifecycleConfigsResponse> {
        return .init(
            input: input,
            command: self.listStudioLifecycleConfigs,
            inputKey: \ListStudioLifecycleConfigsRequest.nextToken,
            outputKey: \ListStudioLifecycleConfigsResponse.nextToken,
            logger: logger
        )
    }

    /// Gets a list of the work teams that you are subscribed to in the Amazon Web Services Marketplace. The list may be empty if no work team satisfies the filter specified in the NameContains parameter.
    /// Return PaginatorSequence for operation.
    ///
    /// - Parameters:
    ///   - input: Input for request
    ///   - logger: Logger used flot logging
    public func listSubscribedWorkteamsPaginator(
        _ input: ListSubscribedWorkteamsRequest,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<ListSubscribedWorkteamsRequest, ListSubscribedWorkteamsResponse> {
        return .init(
            input: input,
            command: self.listSubscribedWorkteams,
            inputKey: \ListSubscribedWorkteamsRequest.nextToken,
            outputKey: \ListSubscribedWorkteamsResponse.nextToken,
            logger: logger
        )
    }

    /// Returns the tags for the specified SageMaker resource.
    /// Return PaginatorSequence for operation.
    ///
    /// - Parameters:
    ///   - input: Input for request
    ///   - logger: Logger used flot logging
    public func listTagsPaginator(
        _ input: ListTagsInput,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<ListTagsInput, ListTagsOutput> {
        return .init(
            input: input,
            command: self.listTags,
            inputKey: \ListTagsInput.nextToken,
            outputKey: \ListTagsOutput.nextToken,
            logger: logger
        )
    }

    /// Lists training jobs.  When StatusEquals and MaxResults are set at the same time, the MaxResults number of training jobs are first retrieved ignoring the StatusEquals parameter and then they are filtered by the StatusEquals parameter, which is returned as a response. For example, if ListTrainingJobs is invoked with the following parameters:  { ... MaxResults: 100, StatusEquals: InProgress ... }  First, 100 trainings jobs with any status, including those other than InProgress, are selected (sorted according to the creation time, from the most current to the oldest). Next, those with a status of InProgress are returned. You can quickly test the API using the following Amazon Web Services CLI code.  aws sagemaker list-training-jobs --max-results 100 --status-equals InProgress
    /// Return PaginatorSequence for operation.
    ///
    /// - Parameters:
    ///   - input: Input for request
    ///   - logger: Logger used flot logging
    public func listTrainingJobsPaginator(
        _ input: ListTrainingJobsRequest,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<ListTrainingJobsRequest, ListTrainingJobsResponse> {
        return .init(
            input: input,
            command: self.listTrainingJobs,
            inputKey: \ListTrainingJobsRequest.nextToken,
            outputKey: \ListTrainingJobsResponse.nextToken,
            logger: logger
        )
    }

    /// Gets a list of TrainingJobSummary objects that describe the training jobs that a hyperparameter tuning job launched.
    /// Return PaginatorSequence for operation.
    ///
    /// - Parameters:
    ///   - input: Input for request
    ///   - logger: Logger used flot logging
    public func listTrainingJobsForHyperParameterTuningJobPaginator(
        _ input: ListTrainingJobsForHyperParameterTuningJobRequest,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<ListTrainingJobsForHyperParameterTuningJobRequest, ListTrainingJobsForHyperParameterTuningJobResponse> {
        return .init(
            input: input,
            command: self.listTrainingJobsForHyperParameterTuningJob,
            inputKey: \ListTrainingJobsForHyperParameterTuningJobRequest.nextToken,
            outputKey: \ListTrainingJobsForHyperParameterTuningJobResponse.nextToken,
            logger: logger
        )
    }

    /// Lists transform jobs.
    /// Return PaginatorSequence for operation.
    ///
    /// - Parameters:
    ///   - input: Input for request
    ///   - logger: Logger used flot logging
    public func listTransformJobsPaginator(
        _ input: ListTransformJobsRequest,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<ListTransformJobsRequest, ListTransformJobsResponse> {
        return .init(
            input: input,
            command: self.listTransformJobs,
            inputKey: \ListTransformJobsRequest.nextToken,
            outputKey: \ListTransformJobsResponse.nextToken,
            logger: logger
        )
    }

    /// Lists the trial components in your account. You can sort the list by trial component name or creation time. You can filter the list to show only components that were created in a specific time range. You can also filter on one of the following:    ExperimentName     SourceArn     TrialName
    /// Return PaginatorSequence for operation.
    ///
    /// - Parameters:
    ///   - input: Input for request
    ///   - logger: Logger used flot logging
    public func listTrialComponentsPaginator(
        _ input: ListTrialComponentsRequest,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<ListTrialComponentsRequest, ListTrialComponentsResponse> {
        return .init(
            input: input,
            command: self.listTrialComponents,
            inputKey: \ListTrialComponentsRequest.nextToken,
            outputKey: \ListTrialComponentsResponse.nextToken,
            logger: logger
        )
    }

    /// Lists the trials in your account. Specify an experiment name to limit the list to the trials that are part of that experiment. Specify a trial component name to limit the list to the trials that associated with that trial component. The list can be filtered to show only trials that were created in a specific time range. The list can be sorted by trial name or creation time.
    /// Return PaginatorSequence for operation.
    ///
    /// - Parameters:
    ///   - input: Input for request
    ///   - logger: Logger used flot logging
    public func listTrialsPaginator(
        _ input: ListTrialsRequest,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<ListTrialsRequest, ListTrialsResponse> {
        return .init(
            input: input,
            command: self.listTrials,
            inputKey: \ListTrialsRequest.nextToken,
            outputKey: \ListTrialsResponse.nextToken,
            logger: logger
        )
    }

    /// Lists user profiles.
    /// Return PaginatorSequence for operation.
    ///
    /// - Parameters:
    ///   - input: Input for request
    ///   - logger: Logger used flot logging
    public func listUserProfilesPaginator(
        _ input: ListUserProfilesRequest,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<ListUserProfilesRequest, ListUserProfilesResponse> {
        return .init(
            input: input,
            command: self.listUserProfiles,
            inputKey: \ListUserProfilesRequest.nextToken,
            outputKey: \ListUserProfilesResponse.nextToken,
            logger: logger
        )
    }

    /// Use this operation to list all private and vendor workforces in an Amazon Web Services Region. Note that you can only  have one private workforce per Amazon Web Services Region.
    /// Return PaginatorSequence for operation.
    ///
    /// - Parameters:
    ///   - input: Input for request
    ///   - logger: Logger used flot logging
    public func listWorkforcesPaginator(
        _ input: ListWorkforcesRequest,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<ListWorkforcesRequest, ListWorkforcesResponse> {
        return .init(
            input: input,
            command: self.listWorkforces,
            inputKey: \ListWorkforcesRequest.nextToken,
            outputKey: \ListWorkforcesResponse.nextToken,
            logger: logger
        )
    }

    /// Gets a list of private work teams that you have defined in a region. The list may be empty if no work team satisfies the filter specified in the NameContains parameter.
    /// Return PaginatorSequence for operation.
    ///
    /// - Parameters:
    ///   - input: Input for request
    ///   - logger: Logger used flot logging
    public func listWorkteamsPaginator(
        _ input: ListWorkteamsRequest,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<ListWorkteamsRequest, ListWorkteamsResponse> {
        return .init(
            input: input,
            command: self.listWorkteams,
            inputKey: \ListWorkteamsRequest.nextToken,
            outputKey: \ListWorkteamsResponse.nextToken,
            logger: logger
        )
    }

    /// Use this action to inspect your lineage and discover relationships between entities.  For more information, see  Querying Lineage Entities in the Amazon SageMaker Developer Guide.
    /// Return PaginatorSequence for operation.
    ///
    /// - Parameters:
    ///   - input: Input for request
    ///   - logger: Logger used flot logging
    public func queryLineagePaginator(
        _ input: QueryLineageRequest,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<QueryLineageRequest, QueryLineageResponse> {
        return .init(
            input: input,
            command: self.queryLineage,
            inputKey: \QueryLineageRequest.nextToken,
            outputKey: \QueryLineageResponse.nextToken,
            logger: logger
        )
    }

    /// Finds SageMaker resources that match a search query. Matching resources are returned as a list of SearchRecord objects in the response. You can sort the search results by any resource property in a ascending or descending order. You can query against the following value types: numeric, text, Boolean, and timestamp.  The Search API may provide access to otherwise restricted data. See Amazon SageMaker  API Permissions: Actions, Permissions, and Resources Reference for more information.
    /// Return PaginatorSequence for operation.
    ///
    /// - Parameters:
    ///   - input: Input for request
    ///   - logger: Logger used flot logging
    public func searchPaginator(
        _ input: SearchRequest,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<SearchRequest, SearchResponse> {
        return .init(
            input: input,
            command: self.search,
            inputKey: \SearchRequest.nextToken,
            outputKey: \SearchResponse.nextToken,
            logger: logger
        )
    }
}

extension SageMaker.ListActionsRequest: AWSPaginateToken {
    public func usingPaginationToken(_ token: String) -> SageMaker.ListActionsRequest {
        return .init(
            actionType: self.actionType,
            createdAfter: self.createdAfter,
            createdBefore: self.createdBefore,
            maxResults: self.maxResults,
            nextToken: token,
            sortBy: self.sortBy,
            sortOrder: self.sortOrder,
            sourceUri: self.sourceUri
        )
    }
}

extension SageMaker.ListAlgorithmsInput: AWSPaginateToken {
    public func usingPaginationToken(_ token: String) -> SageMaker.ListAlgorithmsInput {
        return .init(
            creationTimeAfter: self.creationTimeAfter,
            creationTimeBefore: self.creationTimeBefore,
            maxResults: self.maxResults,
            nameContains: self.nameContains,
            nextToken: token,
            sortBy: self.sortBy,
            sortOrder: self.sortOrder
        )
    }
}

extension SageMaker.ListAliasesRequest: AWSPaginateToken {
    public func usingPaginationToken(_ token: String) -> SageMaker.ListAliasesRequest {
        return .init(
            alias: self.alias,
            imageName: self.imageName,
            maxResults: self.maxResults,
            nextToken: token,
            version: self.version
        )
    }
}

extension SageMaker.ListAppImageConfigsRequest: AWSPaginateToken {
    public func usingPaginationToken(_ token: String) -> SageMaker.ListAppImageConfigsRequest {
        return .init(
            creationTimeAfter: self.creationTimeAfter,
            creationTimeBefore: self.creationTimeBefore,
            maxResults: self.maxResults,
            modifiedTimeAfter: self.modifiedTimeAfter,
            modifiedTimeBefore: self.modifiedTimeBefore,
            nameContains: self.nameContains,
            nextToken: token,
            sortBy: self.sortBy,
            sortOrder: self.sortOrder
        )
    }
}

extension SageMaker.ListAppsRequest: AWSPaginateToken {
    public func usingPaginationToken(_ token: String) -> SageMaker.ListAppsRequest {
        return .init(
            domainIdEquals: self.domainIdEquals,
            maxResults: self.maxResults,
            nextToken: token,
            sortBy: self.sortBy,
            sortOrder: self.sortOrder,
            spaceNameEquals: self.spaceNameEquals,
            userProfileNameEquals: self.userProfileNameEquals
        )
    }
}

extension SageMaker.ListArtifactsRequest: AWSPaginateToken {
    public func usingPaginationToken(_ token: String) -> SageMaker.ListArtifactsRequest {
        return .init(
            artifactType: self.artifactType,
            createdAfter: self.createdAfter,
            createdBefore: self.createdBefore,
            maxResults: self.maxResults,
            nextToken: token,
            sortBy: self.sortBy,
            sortOrder: self.sortOrder,
            sourceUri: self.sourceUri
        )
    }
}

extension SageMaker.ListAssociationsRequest: AWSPaginateToken {
    public func usingPaginationToken(_ token: String) -> SageMaker.ListAssociationsRequest {
        return .init(
            associationType: self.associationType,
            createdAfter: self.createdAfter,
            createdBefore: self.createdBefore,
            destinationArn: self.destinationArn,
            destinationType: self.destinationType,
            maxResults: self.maxResults,
            nextToken: token,
            sortBy: self.sortBy,
            sortOrder: self.sortOrder,
            sourceArn: self.sourceArn,
            sourceType: self.sourceType
        )
    }
}

extension SageMaker.ListAutoMLJobsRequest: AWSPaginateToken {
    public func usingPaginationToken(_ token: String) -> SageMaker.ListAutoMLJobsRequest {
        return .init(
            creationTimeAfter: self.creationTimeAfter,
            creationTimeBefore: self.creationTimeBefore,
            lastModifiedTimeAfter: self.lastModifiedTimeAfter,
            lastModifiedTimeBefore: self.lastModifiedTimeBefore,
            maxResults: self.maxResults,
            nameContains: self.nameContains,
            nextToken: token,
            sortBy: self.sortBy,
            sortOrder: self.sortOrder,
            statusEquals: self.statusEquals
        )
    }
}

extension SageMaker.ListCandidatesForAutoMLJobRequest: AWSPaginateToken {
    public func usingPaginationToken(_ token: String) -> SageMaker.ListCandidatesForAutoMLJobRequest {
        return .init(
            autoMLJobName: self.autoMLJobName,
            candidateNameEquals: self.candidateNameEquals,
            maxResults: self.maxResults,
            nextToken: token,
            sortBy: self.sortBy,
            sortOrder: self.sortOrder,
            statusEquals: self.statusEquals
        )
    }
}

extension SageMaker.ListCodeRepositoriesInput: AWSPaginateToken {
    public func usingPaginationToken(_ token: String) -> SageMaker.ListCodeRepositoriesInput {
        return .init(
            creationTimeAfter: self.creationTimeAfter,
            creationTimeBefore: self.creationTimeBefore,
            lastModifiedTimeAfter: self.lastModifiedTimeAfter,
            lastModifiedTimeBefore: self.lastModifiedTimeBefore,
            maxResults: self.maxResults,
            nameContains: self.nameContains,
            nextToken: token,
            sortBy: self.sortBy,
            sortOrder: self.sortOrder
        )
    }
}

extension SageMaker.ListCompilationJobsRequest: AWSPaginateToken {
    public func usingPaginationToken(_ token: String) -> SageMaker.ListCompilationJobsRequest {
        return .init(
            creationTimeAfter: self.creationTimeAfter,
            creationTimeBefore: self.creationTimeBefore,
            lastModifiedTimeAfter: self.lastModifiedTimeAfter,
            lastModifiedTimeBefore: self.lastModifiedTimeBefore,
            maxResults: self.maxResults,
            nameContains: self.nameContains,
            nextToken: token,
            sortBy: self.sortBy,
            sortOrder: self.sortOrder,
            statusEquals: self.statusEquals
        )
    }
}

extension SageMaker.ListContextsRequest: AWSPaginateToken {
    public func usingPaginationToken(_ token: String) -> SageMaker.ListContextsRequest {
        return .init(
            contextType: self.contextType,
            createdAfter: self.createdAfter,
            createdBefore: self.createdBefore,
            maxResults: self.maxResults,
            nextToken: token,
            sortBy: self.sortBy,
            sortOrder: self.sortOrder,
            sourceUri: self.sourceUri
        )
    }
}

extension SageMaker.ListDataQualityJobDefinitionsRequest: AWSPaginateToken {
    public func usingPaginationToken(_ token: String) -> SageMaker.ListDataQualityJobDefinitionsRequest {
        return .init(
            creationTimeAfter: self.creationTimeAfter,
            creationTimeBefore: self.creationTimeBefore,
            endpointName: self.endpointName,
            maxResults: self.maxResults,
            nameContains: self.nameContains,
            nextToken: token,
            sortBy: self.sortBy,
            sortOrder: self.sortOrder
        )
    }
}

extension SageMaker.ListDeviceFleetsRequest: AWSPaginateToken {
    public func usingPaginationToken(_ token: String) -> SageMaker.ListDeviceFleetsRequest {
        return .init(
            creationTimeAfter: self.creationTimeAfter,
            creationTimeBefore: self.creationTimeBefore,
            lastModifiedTimeAfter: self.lastModifiedTimeAfter,
            lastModifiedTimeBefore: self.lastModifiedTimeBefore,
            maxResults: self.maxResults,
            nameContains: self.nameContains,
            nextToken: token,
            sortBy: self.sortBy,
            sortOrder: self.sortOrder
        )
    }
}

extension SageMaker.ListDevicesRequest: AWSPaginateToken {
    public func usingPaginationToken(_ token: String) -> SageMaker.ListDevicesRequest {
        return .init(
            deviceFleetName: self.deviceFleetName,
            latestHeartbeatAfter: self.latestHeartbeatAfter,
            maxResults: self.maxResults,
            modelName: self.modelName,
            nextToken: token
        )
    }
}

extension SageMaker.ListDomainsRequest: AWSPaginateToken {
    public func usingPaginationToken(_ token: String) -> SageMaker.ListDomainsRequest {
        return .init(
            maxResults: self.maxResults,
            nextToken: token
        )
    }
}

extension SageMaker.ListEdgeDeploymentPlansRequest: AWSPaginateToken {
    public func usingPaginationToken(_ token: String) -> SageMaker.ListEdgeDeploymentPlansRequest {
        return .init(
            creationTimeAfter: self.creationTimeAfter,
            creationTimeBefore: self.creationTimeBefore,
            deviceFleetNameContains: self.deviceFleetNameContains,
            lastModifiedTimeAfter: self.lastModifiedTimeAfter,
            lastModifiedTimeBefore: self.lastModifiedTimeBefore,
            maxResults: self.maxResults,
            nameContains: self.nameContains,
            nextToken: token,
            sortBy: self.sortBy,
            sortOrder: self.sortOrder
        )
    }
}

extension SageMaker.ListEdgePackagingJobsRequest: AWSPaginateToken {
    public func usingPaginationToken(_ token: String) -> SageMaker.ListEdgePackagingJobsRequest {
        return .init(
            creationTimeAfter: self.creationTimeAfter,
            creationTimeBefore: self.creationTimeBefore,
            lastModifiedTimeAfter: self.lastModifiedTimeAfter,
            lastModifiedTimeBefore: self.lastModifiedTimeBefore,
            maxResults: self.maxResults,
            modelNameContains: self.modelNameContains,
            nameContains: self.nameContains,
            nextToken: token,
            sortBy: self.sortBy,
            sortOrder: self.sortOrder,
            statusEquals: self.statusEquals
        )
    }
}

extension SageMaker.ListEndpointConfigsInput: AWSPaginateToken {
    public func usingPaginationToken(_ token: String) -> SageMaker.ListEndpointConfigsInput {
        return .init(
            creationTimeAfter: self.creationTimeAfter,
            creationTimeBefore: self.creationTimeBefore,
            maxResults: self.maxResults,
            nameContains: self.nameContains,
            nextToken: token,
            sortBy: self.sortBy,
            sortOrder: self.sortOrder
        )
    }
}

extension SageMaker.ListEndpointsInput: AWSPaginateToken {
    public func usingPaginationToken(_ token: String) -> SageMaker.ListEndpointsInput {
        return .init(
            creationTimeAfter: self.creationTimeAfter,
            creationTimeBefore: self.creationTimeBefore,
            lastModifiedTimeAfter: self.lastModifiedTimeAfter,
            lastModifiedTimeBefore: self.lastModifiedTimeBefore,
            maxResults: self.maxResults,
            nameContains: self.nameContains,
            nextToken: token,
            sortBy: self.sortBy,
            sortOrder: self.sortOrder,
            statusEquals: self.statusEquals
        )
    }
}

extension SageMaker.ListExperimentsRequest: AWSPaginateToken {
    public func usingPaginationToken(_ token: String) -> SageMaker.ListExperimentsRequest {
        return .init(
            createdAfter: self.createdAfter,
            createdBefore: self.createdBefore,
            maxResults: self.maxResults,
            nextToken: token,
            sortBy: self.sortBy,
            sortOrder: self.sortOrder
        )
    }
}

extension SageMaker.ListFeatureGroupsRequest: AWSPaginateToken {
    public func usingPaginationToken(_ token: String) -> SageMaker.ListFeatureGroupsRequest {
        return .init(
            creationTimeAfter: self.creationTimeAfter,
            creationTimeBefore: self.creationTimeBefore,
            featureGroupStatusEquals: self.featureGroupStatusEquals,
            maxResults: self.maxResults,
            nameContains: self.nameContains,
            nextToken: token,
            offlineStoreStatusEquals: self.offlineStoreStatusEquals,
            sortBy: self.sortBy,
            sortOrder: self.sortOrder
        )
    }
}

extension SageMaker.ListFlowDefinitionsRequest: AWSPaginateToken {
    public func usingPaginationToken(_ token: String) -> SageMaker.ListFlowDefinitionsRequest {
        return .init(
            creationTimeAfter: self.creationTimeAfter,
            creationTimeBefore: self.creationTimeBefore,
            maxResults: self.maxResults,
            nextToken: token,
            sortOrder: self.sortOrder
        )
    }
}

extension SageMaker.ListHumanTaskUisRequest: AWSPaginateToken {
    public func usingPaginationToken(_ token: String) -> SageMaker.ListHumanTaskUisRequest {
        return .init(
            creationTimeAfter: self.creationTimeAfter,
            creationTimeBefore: self.creationTimeBefore,
            maxResults: self.maxResults,
            nextToken: token,
            sortOrder: self.sortOrder
        )
    }
}

extension SageMaker.ListHyperParameterTuningJobsRequest: AWSPaginateToken {
    public func usingPaginationToken(_ token: String) -> SageMaker.ListHyperParameterTuningJobsRequest {
        return .init(
            creationTimeAfter: self.creationTimeAfter,
            creationTimeBefore: self.creationTimeBefore,
            lastModifiedTimeAfter: self.lastModifiedTimeAfter,
            lastModifiedTimeBefore: self.lastModifiedTimeBefore,
            maxResults: self.maxResults,
            nameContains: self.nameContains,
            nextToken: token,
            sortBy: self.sortBy,
            sortOrder: self.sortOrder,
            statusEquals: self.statusEquals
        )
    }
}

extension SageMaker.ListImageVersionsRequest: AWSPaginateToken {
    public func usingPaginationToken(_ token: String) -> SageMaker.ListImageVersionsRequest {
        return .init(
            creationTimeAfter: self.creationTimeAfter,
            creationTimeBefore: self.creationTimeBefore,
            imageName: self.imageName,
            lastModifiedTimeAfter: self.lastModifiedTimeAfter,
            lastModifiedTimeBefore: self.lastModifiedTimeBefore,
            maxResults: self.maxResults,
            nextToken: token,
            sortBy: self.sortBy,
            sortOrder: self.sortOrder
        )
    }
}

extension SageMaker.ListImagesRequest: AWSPaginateToken {
    public func usingPaginationToken(_ token: String) -> SageMaker.ListImagesRequest {
        return .init(
            creationTimeAfter: self.creationTimeAfter,
            creationTimeBefore: self.creationTimeBefore,
            lastModifiedTimeAfter: self.lastModifiedTimeAfter,
            lastModifiedTimeBefore: self.lastModifiedTimeBefore,
            maxResults: self.maxResults,
            nameContains: self.nameContains,
            nextToken: token,
            sortBy: self.sortBy,
            sortOrder: self.sortOrder
        )
    }
}

extension SageMaker.ListInferenceComponentsInput: AWSPaginateToken {
    public func usingPaginationToken(_ token: String) -> SageMaker.ListInferenceComponentsInput {
        return .init(
            creationTimeAfter: self.creationTimeAfter,
            creationTimeBefore: self.creationTimeBefore,
            endpointNameEquals: self.endpointNameEquals,
            lastModifiedTimeAfter: self.lastModifiedTimeAfter,
            lastModifiedTimeBefore: self.lastModifiedTimeBefore,
            maxResults: self.maxResults,
            nameContains: self.nameContains,
            nextToken: token,
            sortBy: self.sortBy,
            sortOrder: self.sortOrder,
            statusEquals: self.statusEquals,
            variantNameEquals: self.variantNameEquals
        )
    }
}

extension SageMaker.ListInferenceExperimentsRequest: AWSPaginateToken {
    public func usingPaginationToken(_ token: String) -> SageMaker.ListInferenceExperimentsRequest {
        return .init(
            creationTimeAfter: self.creationTimeAfter,
            creationTimeBefore: self.creationTimeBefore,
            lastModifiedTimeAfter: self.lastModifiedTimeAfter,
            lastModifiedTimeBefore: self.lastModifiedTimeBefore,
            maxResults: self.maxResults,
            nameContains: self.nameContains,
            nextToken: token,
            sortBy: self.sortBy,
            sortOrder: self.sortOrder,
            statusEquals: self.statusEquals,
            type: self.type
        )
    }
}

extension SageMaker.ListInferenceRecommendationsJobStepsRequest: AWSPaginateToken {
    public func usingPaginationToken(_ token: String) -> SageMaker.ListInferenceRecommendationsJobStepsRequest {
        return .init(
            jobName: self.jobName,
            maxResults: self.maxResults,
            nextToken: token,
            status: self.status,
            stepType: self.stepType
        )
    }
}

extension SageMaker.ListInferenceRecommendationsJobsRequest: AWSPaginateToken {
    public func usingPaginationToken(_ token: String) -> SageMaker.ListInferenceRecommendationsJobsRequest {
        return .init(
            creationTimeAfter: self.creationTimeAfter,
            creationTimeBefore: self.creationTimeBefore,
            lastModifiedTimeAfter: self.lastModifiedTimeAfter,
            lastModifiedTimeBefore: self.lastModifiedTimeBefore,
            maxResults: self.maxResults,
            modelNameEquals: self.modelNameEquals,
            modelPackageVersionArnEquals: self.modelPackageVersionArnEquals,
            nameContains: self.nameContains,
            nextToken: token,
            sortBy: self.sortBy,
            sortOrder: self.sortOrder,
            statusEquals: self.statusEquals
        )
    }
}

extension SageMaker.ListLabelingJobsForWorkteamRequest: AWSPaginateToken {
    public func usingPaginationToken(_ token: String) -> SageMaker.ListLabelingJobsForWorkteamRequest {
        return .init(
            creationTimeAfter: self.creationTimeAfter,
            creationTimeBefore: self.creationTimeBefore,
            jobReferenceCodeContains: self.jobReferenceCodeContains,
            maxResults: self.maxResults,
            nextToken: token,
            sortBy: self.sortBy,
            sortOrder: self.sortOrder,
            workteamArn: self.workteamArn
        )
    }
}

extension SageMaker.ListLabelingJobsRequest: AWSPaginateToken {
    public func usingPaginationToken(_ token: String) -> SageMaker.ListLabelingJobsRequest {
        return .init(
            creationTimeAfter: self.creationTimeAfter,
            creationTimeBefore: self.creationTimeBefore,
            lastModifiedTimeAfter: self.lastModifiedTimeAfter,
            lastModifiedTimeBefore: self.lastModifiedTimeBefore,
            maxResults: self.maxResults,
            nameContains: self.nameContains,
            nextToken: token,
            sortBy: self.sortBy,
            sortOrder: self.sortOrder,
            statusEquals: self.statusEquals
        )
    }
}

extension SageMaker.ListLineageGroupsRequest: AWSPaginateToken {
    public func usingPaginationToken(_ token: String) -> SageMaker.ListLineageGroupsRequest {
        return .init(
            createdAfter: self.createdAfter,
            createdBefore: self.createdBefore,
            maxResults: self.maxResults,
            nextToken: token,
            sortBy: self.sortBy,
            sortOrder: self.sortOrder
        )
    }
}

extension SageMaker.ListModelBiasJobDefinitionsRequest: AWSPaginateToken {
    public func usingPaginationToken(_ token: String) -> SageMaker.ListModelBiasJobDefinitionsRequest {
        return .init(
            creationTimeAfter: self.creationTimeAfter,
            creationTimeBefore: self.creationTimeBefore,
            endpointName: self.endpointName,
            maxResults: self.maxResults,
            nameContains: self.nameContains,
            nextToken: token,
            sortBy: self.sortBy,
            sortOrder: self.sortOrder
        )
    }
}

extension SageMaker.ListModelCardExportJobsRequest: AWSPaginateToken {
    public func usingPaginationToken(_ token: String) -> SageMaker.ListModelCardExportJobsRequest {
        return .init(
            creationTimeAfter: self.creationTimeAfter,
            creationTimeBefore: self.creationTimeBefore,
            maxResults: self.maxResults,
            modelCardExportJobNameContains: self.modelCardExportJobNameContains,
            modelCardName: self.modelCardName,
            modelCardVersion: self.modelCardVersion,
            nextToken: token,
            sortBy: self.sortBy,
            sortOrder: self.sortOrder,
            statusEquals: self.statusEquals
        )
    }
}

extension SageMaker.ListModelCardVersionsRequest: AWSPaginateToken {
    public func usingPaginationToken(_ token: String) -> SageMaker.ListModelCardVersionsRequest {
        return .init(
            creationTimeAfter: self.creationTimeAfter,
            creationTimeBefore: self.creationTimeBefore,
            maxResults: self.maxResults,
            modelCardName: self.modelCardName,
            modelCardStatus: self.modelCardStatus,
            nextToken: token,
            sortBy: self.sortBy,
            sortOrder: self.sortOrder
        )
    }
}

extension SageMaker.ListModelCardsRequest: AWSPaginateToken {
    public func usingPaginationToken(_ token: String) -> SageMaker.ListModelCardsRequest {
        return .init(
            creationTimeAfter: self.creationTimeAfter,
            creationTimeBefore: self.creationTimeBefore,
            maxResults: self.maxResults,
            modelCardStatus: self.modelCardStatus,
            nameContains: self.nameContains,
            nextToken: token,
            sortBy: self.sortBy,
            sortOrder: self.sortOrder
        )
    }
}

extension SageMaker.ListModelExplainabilityJobDefinitionsRequest: AWSPaginateToken {
    public func usingPaginationToken(_ token: String) -> SageMaker.ListModelExplainabilityJobDefinitionsRequest {
        return .init(
            creationTimeAfter: self.creationTimeAfter,
            creationTimeBefore: self.creationTimeBefore,
            endpointName: self.endpointName,
            maxResults: self.maxResults,
            nameContains: self.nameContains,
            nextToken: token,
            sortBy: self.sortBy,
            sortOrder: self.sortOrder
        )
    }
}

extension SageMaker.ListModelMetadataRequest: AWSPaginateToken {
    public func usingPaginationToken(_ token: String) -> SageMaker.ListModelMetadataRequest {
        return .init(
            maxResults: self.maxResults,
            nextToken: token,
            searchExpression: self.searchExpression
        )
    }
}

extension SageMaker.ListModelPackageGroupsInput: AWSPaginateToken {
    public func usingPaginationToken(_ token: String) -> SageMaker.ListModelPackageGroupsInput {
        return .init(
            creationTimeAfter: self.creationTimeAfter,
            creationTimeBefore: self.creationTimeBefore,
            maxResults: self.maxResults,
            nameContains: self.nameContains,
            nextToken: token,
            sortBy: self.sortBy,
            sortOrder: self.sortOrder
        )
    }
}

extension SageMaker.ListModelPackagesInput: AWSPaginateToken {
    public func usingPaginationToken(_ token: String) -> SageMaker.ListModelPackagesInput {
        return .init(
            creationTimeAfter: self.creationTimeAfter,
            creationTimeBefore: self.creationTimeBefore,
            maxResults: self.maxResults,
            modelApprovalStatus: self.modelApprovalStatus,
            modelPackageGroupName: self.modelPackageGroupName,
            modelPackageType: self.modelPackageType,
            nameContains: self.nameContains,
            nextToken: token,
            sortBy: self.sortBy,
            sortOrder: self.sortOrder
        )
    }
}

extension SageMaker.ListModelQualityJobDefinitionsRequest: AWSPaginateToken {
    public func usingPaginationToken(_ token: String) -> SageMaker.ListModelQualityJobDefinitionsRequest {
        return .init(
            creationTimeAfter: self.creationTimeAfter,
            creationTimeBefore: self.creationTimeBefore,
            endpointName: self.endpointName,
            maxResults: self.maxResults,
            nameContains: self.nameContains,
            nextToken: token,
            sortBy: self.sortBy,
            sortOrder: self.sortOrder
        )
    }
}

extension SageMaker.ListModelsInput: AWSPaginateToken {
    public func usingPaginationToken(_ token: String) -> SageMaker.ListModelsInput {
        return .init(
            creationTimeAfter: self.creationTimeAfter,
            creationTimeBefore: self.creationTimeBefore,
            maxResults: self.maxResults,
            nameContains: self.nameContains,
            nextToken: token,
            sortBy: self.sortBy,
            sortOrder: self.sortOrder
        )
    }
}

extension SageMaker.ListMonitoringAlertHistoryRequest: AWSPaginateToken {
    public func usingPaginationToken(_ token: String) -> SageMaker.ListMonitoringAlertHistoryRequest {
        return .init(
            creationTimeAfter: self.creationTimeAfter,
            creationTimeBefore: self.creationTimeBefore,
            maxResults: self.maxResults,
            monitoringAlertName: self.monitoringAlertName,
            monitoringScheduleName: self.monitoringScheduleName,
            nextToken: token,
            sortBy: self.sortBy,
            sortOrder: self.sortOrder,
            statusEquals: self.statusEquals
        )
    }
}

extension SageMaker.ListMonitoringAlertsRequest: AWSPaginateToken {
    public func usingPaginationToken(_ token: String) -> SageMaker.ListMonitoringAlertsRequest {
        return .init(
            maxResults: self.maxResults,
            monitoringScheduleName: self.monitoringScheduleName,
            nextToken: token
        )
    }
}

extension SageMaker.ListMonitoringExecutionsRequest: AWSPaginateToken {
    public func usingPaginationToken(_ token: String) -> SageMaker.ListMonitoringExecutionsRequest {
        return .init(
            creationTimeAfter: self.creationTimeAfter,
            creationTimeBefore: self.creationTimeBefore,
            endpointName: self.endpointName,
            lastModifiedTimeAfter: self.lastModifiedTimeAfter,
            lastModifiedTimeBefore: self.lastModifiedTimeBefore,
            maxResults: self.maxResults,
            monitoringJobDefinitionName: self.monitoringJobDefinitionName,
            monitoringScheduleName: self.monitoringScheduleName,
            monitoringTypeEquals: self.monitoringTypeEquals,
            nextToken: token,
            scheduledTimeAfter: self.scheduledTimeAfter,
            scheduledTimeBefore: self.scheduledTimeBefore,
            sortBy: self.sortBy,
            sortOrder: self.sortOrder,
            statusEquals: self.statusEquals
        )
    }
}

extension SageMaker.ListMonitoringSchedulesRequest: AWSPaginateToken {
    public func usingPaginationToken(_ token: String) -> SageMaker.ListMonitoringSchedulesRequest {
        return .init(
            creationTimeAfter: self.creationTimeAfter,
            creationTimeBefore: self.creationTimeBefore,
            endpointName: self.endpointName,
            lastModifiedTimeAfter: self.lastModifiedTimeAfter,
            lastModifiedTimeBefore: self.lastModifiedTimeBefore,
            maxResults: self.maxResults,
            monitoringJobDefinitionName: self.monitoringJobDefinitionName,
            monitoringTypeEquals: self.monitoringTypeEquals,
            nameContains: self.nameContains,
            nextToken: token,
            sortBy: self.sortBy,
            sortOrder: self.sortOrder,
            statusEquals: self.statusEquals
        )
    }
}

extension SageMaker.ListNotebookInstanceLifecycleConfigsInput: AWSPaginateToken {
    public func usingPaginationToken(_ token: String) -> SageMaker.ListNotebookInstanceLifecycleConfigsInput {
        return .init(
            creationTimeAfter: self.creationTimeAfter,
            creationTimeBefore: self.creationTimeBefore,
            lastModifiedTimeAfter: self.lastModifiedTimeAfter,
            lastModifiedTimeBefore: self.lastModifiedTimeBefore,
            maxResults: self.maxResults,
            nameContains: self.nameContains,
            nextToken: token,
            sortBy: self.sortBy,
            sortOrder: self.sortOrder
        )
    }
}

extension SageMaker.ListNotebookInstancesInput: AWSPaginateToken {
    public func usingPaginationToken(_ token: String) -> SageMaker.ListNotebookInstancesInput {
        return .init(
            additionalCodeRepositoryEquals: self.additionalCodeRepositoryEquals,
            creationTimeAfter: self.creationTimeAfter,
            creationTimeBefore: self.creationTimeBefore,
            defaultCodeRepositoryContains: self.defaultCodeRepositoryContains,
            lastModifiedTimeAfter: self.lastModifiedTimeAfter,
            lastModifiedTimeBefore: self.lastModifiedTimeBefore,
            maxResults: self.maxResults,
            nameContains: self.nameContains,
            nextToken: token,
            notebookInstanceLifecycleConfigNameContains: self.notebookInstanceLifecycleConfigNameContains,
            sortBy: self.sortBy,
            sortOrder: self.sortOrder,
            statusEquals: self.statusEquals
        )
    }
}

extension SageMaker.ListPipelineExecutionStepsRequest: AWSPaginateToken {
    public func usingPaginationToken(_ token: String) -> SageMaker.ListPipelineExecutionStepsRequest {
        return .init(
            maxResults: self.maxResults,
            nextToken: token,
            pipelineExecutionArn: self.pipelineExecutionArn,
            sortOrder: self.sortOrder
        )
    }
}

extension SageMaker.ListPipelineExecutionsRequest: AWSPaginateToken {
    public func usingPaginationToken(_ token: String) -> SageMaker.ListPipelineExecutionsRequest {
        return .init(
            createdAfter: self.createdAfter,
            createdBefore: self.createdBefore,
            maxResults: self.maxResults,
            nextToken: token,
            pipelineName: self.pipelineName,
            sortBy: self.sortBy,
            sortOrder: self.sortOrder
        )
    }
}

extension SageMaker.ListPipelineParametersForExecutionRequest: AWSPaginateToken {
    public func usingPaginationToken(_ token: String) -> SageMaker.ListPipelineParametersForExecutionRequest {
        return .init(
            maxResults: self.maxResults,
            nextToken: token,
            pipelineExecutionArn: self.pipelineExecutionArn
        )
    }
}

extension SageMaker.ListPipelinesRequest: AWSPaginateToken {
    public func usingPaginationToken(_ token: String) -> SageMaker.ListPipelinesRequest {
        return .init(
            createdAfter: self.createdAfter,
            createdBefore: self.createdBefore,
            maxResults: self.maxResults,
            nextToken: token,
            pipelineNamePrefix: self.pipelineNamePrefix,
            sortBy: self.sortBy,
            sortOrder: self.sortOrder
        )
    }
}

extension SageMaker.ListProcessingJobsRequest: AWSPaginateToken {
    public func usingPaginationToken(_ token: String) -> SageMaker.ListProcessingJobsRequest {
        return .init(
            creationTimeAfter: self.creationTimeAfter,
            creationTimeBefore: self.creationTimeBefore,
            lastModifiedTimeAfter: self.lastModifiedTimeAfter,
            lastModifiedTimeBefore: self.lastModifiedTimeBefore,
            maxResults: self.maxResults,
            nameContains: self.nameContains,
            nextToken: token,
            sortBy: self.sortBy,
            sortOrder: self.sortOrder,
            statusEquals: self.statusEquals
        )
    }
}

extension SageMaker.ListProjectsInput: AWSPaginateToken {
    public func usingPaginationToken(_ token: String) -> SageMaker.ListProjectsInput {
        return .init(
            creationTimeAfter: self.creationTimeAfter,
            creationTimeBefore: self.creationTimeBefore,
            maxResults: self.maxResults,
            nameContains: self.nameContains,
            nextToken: token,
            sortBy: self.sortBy,
            sortOrder: self.sortOrder
        )
    }
}

extension SageMaker.ListResourceCatalogsRequest: AWSPaginateToken {
    public func usingPaginationToken(_ token: String) -> SageMaker.ListResourceCatalogsRequest {
        return .init(
            creationTimeAfter: self.creationTimeAfter,
            creationTimeBefore: self.creationTimeBefore,
            maxResults: self.maxResults,
            nameContains: self.nameContains,
            nextToken: token,
            sortBy: self.sortBy,
            sortOrder: self.sortOrder
        )
    }
}

extension SageMaker.ListSpacesRequest: AWSPaginateToken {
    public func usingPaginationToken(_ token: String) -> SageMaker.ListSpacesRequest {
        return .init(
            domainIdEquals: self.domainIdEquals,
            maxResults: self.maxResults,
            nextToken: token,
            sortBy: self.sortBy,
            sortOrder: self.sortOrder,
            spaceNameContains: self.spaceNameContains
        )
    }
}

extension SageMaker.ListStageDevicesRequest: AWSPaginateToken {
    public func usingPaginationToken(_ token: String) -> SageMaker.ListStageDevicesRequest {
        return .init(
            edgeDeploymentPlanName: self.edgeDeploymentPlanName,
            excludeDevicesDeployedInOtherStage: self.excludeDevicesDeployedInOtherStage,
            maxResults: self.maxResults,
            nextToken: token,
            stageName: self.stageName
        )
    }
}

extension SageMaker.ListStudioLifecycleConfigsRequest: AWSPaginateToken {
    public func usingPaginationToken(_ token: String) -> SageMaker.ListStudioLifecycleConfigsRequest {
        return .init(
            appTypeEquals: self.appTypeEquals,
            creationTimeAfter: self.creationTimeAfter,
            creationTimeBefore: self.creationTimeBefore,
            maxResults: self.maxResults,
            modifiedTimeAfter: self.modifiedTimeAfter,
            modifiedTimeBefore: self.modifiedTimeBefore,
            nameContains: self.nameContains,
            nextToken: token,
            sortBy: self.sortBy,
            sortOrder: self.sortOrder
        )
    }
}

extension SageMaker.ListSubscribedWorkteamsRequest: AWSPaginateToken {
    public func usingPaginationToken(_ token: String) -> SageMaker.ListSubscribedWorkteamsRequest {
        return .init(
            maxResults: self.maxResults,
            nameContains: self.nameContains,
            nextToken: token
        )
    }
}

extension SageMaker.ListTagsInput: AWSPaginateToken {
    public func usingPaginationToken(_ token: String) -> SageMaker.ListTagsInput {
        return .init(
            maxResults: self.maxResults,
            nextToken: token,
            resourceArn: self.resourceArn
        )
    }
}

extension SageMaker.ListTrainingJobsForHyperParameterTuningJobRequest: AWSPaginateToken {
    public func usingPaginationToken(_ token: String) -> SageMaker.ListTrainingJobsForHyperParameterTuningJobRequest {
        return .init(
            hyperParameterTuningJobName: self.hyperParameterTuningJobName,
            maxResults: self.maxResults,
            nextToken: token,
            sortBy: self.sortBy,
            sortOrder: self.sortOrder,
            statusEquals: self.statusEquals
        )
    }
}

extension SageMaker.ListTrainingJobsRequest: AWSPaginateToken {
    public func usingPaginationToken(_ token: String) -> SageMaker.ListTrainingJobsRequest {
        return .init(
            creationTimeAfter: self.creationTimeAfter,
            creationTimeBefore: self.creationTimeBefore,
            lastModifiedTimeAfter: self.lastModifiedTimeAfter,
            lastModifiedTimeBefore: self.lastModifiedTimeBefore,
            maxResults: self.maxResults,
            nameContains: self.nameContains,
            nextToken: token,
            sortBy: self.sortBy,
            sortOrder: self.sortOrder,
            statusEquals: self.statusEquals,
            warmPoolStatusEquals: self.warmPoolStatusEquals
        )
    }
}

extension SageMaker.ListTransformJobsRequest: AWSPaginateToken {
    public func usingPaginationToken(_ token: String) -> SageMaker.ListTransformJobsRequest {
        return .init(
            creationTimeAfter: self.creationTimeAfter,
            creationTimeBefore: self.creationTimeBefore,
            lastModifiedTimeAfter: self.lastModifiedTimeAfter,
            lastModifiedTimeBefore: self.lastModifiedTimeBefore,
            maxResults: self.maxResults,
            nameContains: self.nameContains,
            nextToken: token,
            sortBy: self.sortBy,
            sortOrder: self.sortOrder,
            statusEquals: self.statusEquals
        )
    }
}

extension SageMaker.ListTrialComponentsRequest: AWSPaginateToken {
    public func usingPaginationToken(_ token: String) -> SageMaker.ListTrialComponentsRequest {
        return .init(
            createdAfter: self.createdAfter,
            createdBefore: self.createdBefore,
            experimentName: self.experimentName,
            maxResults: self.maxResults,
            nextToken: token,
            sortBy: self.sortBy,
            sortOrder: self.sortOrder,
            sourceArn: self.sourceArn,
            trialName: self.trialName
        )
    }
}

extension SageMaker.ListTrialsRequest: AWSPaginateToken {
    public func usingPaginationToken(_ token: String) -> SageMaker.ListTrialsRequest {
        return .init(
            createdAfter: self.createdAfter,
            createdBefore: self.createdBefore,
            experimentName: self.experimentName,
            maxResults: self.maxResults,
            nextToken: token,
            sortBy: self.sortBy,
            sortOrder: self.sortOrder,
            trialComponentName: self.trialComponentName
        )
    }
}

extension SageMaker.ListUserProfilesRequest: AWSPaginateToken {
    public func usingPaginationToken(_ token: String) -> SageMaker.ListUserProfilesRequest {
        return .init(
            domainIdEquals: self.domainIdEquals,
            maxResults: self.maxResults,
            nextToken: token,
            sortBy: self.sortBy,
            sortOrder: self.sortOrder,
            userProfileNameContains: self.userProfileNameContains
        )
    }
}

extension SageMaker.ListWorkforcesRequest: AWSPaginateToken {
    public func usingPaginationToken(_ token: String) -> SageMaker.ListWorkforcesRequest {
        return .init(
            maxResults: self.maxResults,
            nameContains: self.nameContains,
            nextToken: token,
            sortBy: self.sortBy,
            sortOrder: self.sortOrder
        )
    }
}

extension SageMaker.ListWorkteamsRequest: AWSPaginateToken {
    public func usingPaginationToken(_ token: String) -> SageMaker.ListWorkteamsRequest {
        return .init(
            maxResults: self.maxResults,
            nameContains: self.nameContains,
            nextToken: token,
            sortBy: self.sortBy,
            sortOrder: self.sortOrder
        )
    }
}

extension SageMaker.QueryLineageRequest: AWSPaginateToken {
    public func usingPaginationToken(_ token: String) -> SageMaker.QueryLineageRequest {
        return .init(
            direction: self.direction,
            filters: self.filters,
            includeEdges: self.includeEdges,
            maxDepth: self.maxDepth,
            maxResults: self.maxResults,
            nextToken: token,
            startArns: self.startArns
        )
    }
}

extension SageMaker.SearchRequest: AWSPaginateToken {
    public func usingPaginationToken(_ token: String) -> SageMaker.SearchRequest {
        return .init(
            crossAccountFilterOption: self.crossAccountFilterOption,
            maxResults: self.maxResults,
            nextToken: token,
            resource: self.resource,
            searchExpression: self.searchExpression,
            sortBy: self.sortBy,
            sortOrder: self.sortOrder,
            visibilityConditions: self.visibilityConditions
        )
    }
}

// MARK: Waiters

@available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
extension SageMaker {
    public func waitUntilEndpointDeleted(
        _ input: DescribeEndpointInput,
        maxWaitTime: TimeAmount? = nil,
        logger: Logger = AWSClient.loggingDisabled
    ) async throws {
        let waiter = AWSClient.Waiter(
            acceptors: [
                .init(state: .success, matcher: AWSErrorCodeMatcher("ValidationException")),
                .init(state: .failure, matcher: try! JMESPathMatcher("endpointStatus", expected: "Failed")),
            ],
            minDelayTime: .seconds(30),
            command: self.describeEndpoint
        )
        return try await self.client.waitUntil(input, waiter: waiter, maxWaitTime: maxWaitTime, logger: logger)
    }

    public func waitUntilEndpointInService(
        _ input: DescribeEndpointInput,
        maxWaitTime: TimeAmount? = nil,
        logger: Logger = AWSClient.loggingDisabled
    ) async throws {
        let waiter = AWSClient.Waiter(
            acceptors: [
                .init(state: .success, matcher: try! JMESPathMatcher("endpointStatus", expected: "InService")),
                .init(state: .failure, matcher: try! JMESPathMatcher("endpointStatus", expected: "Failed")),
                .init(state: .failure, matcher: AWSErrorCodeMatcher("ValidationException")),
            ],
            minDelayTime: .seconds(30),
            command: self.describeEndpoint
        )
        return try await self.client.waitUntil(input, waiter: waiter, maxWaitTime: maxWaitTime, logger: logger)
    }

    public func waitUntilImageCreated(
        _ input: DescribeImageRequest,
        maxWaitTime: TimeAmount? = nil,
        logger: Logger = AWSClient.loggingDisabled
    ) async throws {
        let waiter = AWSClient.Waiter(
            acceptors: [
                .init(state: .success, matcher: try! JMESPathMatcher("imageStatus", expected: "CREATED")),
                .init(state: .failure, matcher: try! JMESPathMatcher("imageStatus", expected: "CREATE_FAILED")),
                .init(state: .failure, matcher: AWSErrorCodeMatcher("ValidationException")),
            ],
            minDelayTime: .seconds(60),
            command: self.describeImage
        )
        return try await self.client.waitUntil(input, waiter: waiter, maxWaitTime: maxWaitTime, logger: logger)
    }

    public func waitUntilImageDeleted(
        _ input: DescribeImageRequest,
        maxWaitTime: TimeAmount? = nil,
        logger: Logger = AWSClient.loggingDisabled
    ) async throws {
        let waiter = AWSClient.Waiter(
            acceptors: [
                .init(state: .success, matcher: AWSErrorCodeMatcher("ResourceNotFoundException")),
                .init(state: .failure, matcher: try! JMESPathMatcher("imageStatus", expected: "DELETE_FAILED")),
                .init(state: .failure, matcher: AWSErrorCodeMatcher("ValidationException")),
            ],
            minDelayTime: .seconds(60),
            command: self.describeImage
        )
        return try await self.client.waitUntil(input, waiter: waiter, maxWaitTime: maxWaitTime, logger: logger)
    }

    public func waitUntilImageUpdated(
        _ input: DescribeImageRequest,
        maxWaitTime: TimeAmount? = nil,
        logger: Logger = AWSClient.loggingDisabled
    ) async throws {
        let waiter = AWSClient.Waiter(
            acceptors: [
                .init(state: .success, matcher: try! JMESPathMatcher("imageStatus", expected: "CREATED")),
                .init(state: .failure, matcher: try! JMESPathMatcher("imageStatus", expected: "UPDATE_FAILED")),
                .init(state: .failure, matcher: AWSErrorCodeMatcher("ValidationException")),
            ],
            minDelayTime: .seconds(60),
            command: self.describeImage
        )
        return try await self.client.waitUntil(input, waiter: waiter, maxWaitTime: maxWaitTime, logger: logger)
    }

    public func waitUntilImageVersionCreated(
        _ input: DescribeImageVersionRequest,
        maxWaitTime: TimeAmount? = nil,
        logger: Logger = AWSClient.loggingDisabled
    ) async throws {
        let waiter = AWSClient.Waiter(
            acceptors: [
                .init(state: .success, matcher: try! JMESPathMatcher("imageVersionStatus", expected: "CREATED")),
                .init(state: .failure, matcher: try! JMESPathMatcher("imageVersionStatus", expected: "CREATE_FAILED")),
                .init(state: .failure, matcher: AWSErrorCodeMatcher("ValidationException")),
            ],
            minDelayTime: .seconds(60),
            command: self.describeImageVersion
        )
        return try await self.client.waitUntil(input, waiter: waiter, maxWaitTime: maxWaitTime, logger: logger)
    }

    public func waitUntilImageVersionDeleted(
        _ input: DescribeImageVersionRequest,
        maxWaitTime: TimeAmount? = nil,
        logger: Logger = AWSClient.loggingDisabled
    ) async throws {
        let waiter = AWSClient.Waiter(
            acceptors: [
                .init(state: .success, matcher: AWSErrorCodeMatcher("ResourceNotFoundException")),
                .init(state: .failure, matcher: try! JMESPathMatcher("imageVersionStatus", expected: "DELETE_FAILED")),
                .init(state: .failure, matcher: AWSErrorCodeMatcher("ValidationException")),
            ],
            minDelayTime: .seconds(60),
            command: self.describeImageVersion
        )
        return try await self.client.waitUntil(input, waiter: waiter, maxWaitTime: maxWaitTime, logger: logger)
    }

    public func waitUntilNotebookInstanceDeleted(
        _ input: DescribeNotebookInstanceInput,
        maxWaitTime: TimeAmount? = nil,
        logger: Logger = AWSClient.loggingDisabled
    ) async throws {
        let waiter = AWSClient.Waiter(
            acceptors: [
                .init(state: .success, matcher: AWSErrorCodeMatcher("ValidationException")),
                .init(state: .failure, matcher: try! JMESPathMatcher("notebookInstanceStatus", expected: "Failed")),
            ],
            minDelayTime: .seconds(30),
            command: self.describeNotebookInstance
        )
        return try await self.client.waitUntil(input, waiter: waiter, maxWaitTime: maxWaitTime, logger: logger)
    }

    public func waitUntilNotebookInstanceInService(
        _ input: DescribeNotebookInstanceInput,
        maxWaitTime: TimeAmount? = nil,
        logger: Logger = AWSClient.loggingDisabled
    ) async throws {
        let waiter = AWSClient.Waiter(
            acceptors: [
                .init(state: .success, matcher: try! JMESPathMatcher("notebookInstanceStatus", expected: "InService")),
                .init(state: .failure, matcher: try! JMESPathMatcher("notebookInstanceStatus", expected: "Failed")),
            ],
            minDelayTime: .seconds(30),
            command: self.describeNotebookInstance
        )
        return try await self.client.waitUntil(input, waiter: waiter, maxWaitTime: maxWaitTime, logger: logger)
    }

    public func waitUntilNotebookInstanceStopped(
        _ input: DescribeNotebookInstanceInput,
        maxWaitTime: TimeAmount? = nil,
        logger: Logger = AWSClient.loggingDisabled
    ) async throws {
        let waiter = AWSClient.Waiter(
            acceptors: [
                .init(state: .success, matcher: try! JMESPathMatcher("notebookInstanceStatus", expected: "Stopped")),
                .init(state: .failure, matcher: try! JMESPathMatcher("notebookInstanceStatus", expected: "Failed")),
            ],
            minDelayTime: .seconds(30),
            command: self.describeNotebookInstance
        )
        return try await self.client.waitUntil(input, waiter: waiter, maxWaitTime: maxWaitTime, logger: logger)
    }

    public func waitUntilProcessingJobCompletedOrStopped(
        _ input: DescribeProcessingJobRequest,
        maxWaitTime: TimeAmount? = nil,
        logger: Logger = AWSClient.loggingDisabled
    ) async throws {
        let waiter = AWSClient.Waiter(
            acceptors: [
                .init(state: .success, matcher: try! JMESPathMatcher("processingJobStatus", expected: "Completed")),
                .init(state: .success, matcher: try! JMESPathMatcher("processingJobStatus", expected: "Stopped")),
                .init(state: .failure, matcher: try! JMESPathMatcher("processingJobStatus", expected: "Failed")),
                .init(state: .failure, matcher: AWSErrorCodeMatcher("ValidationException")),
            ],
            minDelayTime: .seconds(60),
            command: self.describeProcessingJob
        )
        return try await self.client.waitUntil(input, waiter: waiter, maxWaitTime: maxWaitTime, logger: logger)
    }

    public func waitUntilTrainingJobCompletedOrStopped(
        _ input: DescribeTrainingJobRequest,
        maxWaitTime: TimeAmount? = nil,
        logger: Logger = AWSClient.loggingDisabled
    ) async throws {
        let waiter = AWSClient.Waiter(
            acceptors: [
                .init(state: .success, matcher: try! JMESPathMatcher("trainingJobStatus", expected: "Completed")),
                .init(state: .success, matcher: try! JMESPathMatcher("trainingJobStatus", expected: "Stopped")),
                .init(state: .failure, matcher: try! JMESPathMatcher("trainingJobStatus", expected: "Failed")),
                .init(state: .failure, matcher: AWSErrorCodeMatcher("ValidationException")),
            ],
            minDelayTime: .seconds(120),
            command: self.describeTrainingJob
        )
        return try await self.client.waitUntil(input, waiter: waiter, maxWaitTime: maxWaitTime, logger: logger)
    }

    public func waitUntilTransformJobCompletedOrStopped(
        _ input: DescribeTransformJobRequest,
        maxWaitTime: TimeAmount? = nil,
        logger: Logger = AWSClient.loggingDisabled
    ) async throws {
        let waiter = AWSClient.Waiter(
            acceptors: [
                .init(state: .success, matcher: try! JMESPathMatcher("transformJobStatus", expected: "Completed")),
                .init(state: .success, matcher: try! JMESPathMatcher("transformJobStatus", expected: "Stopped")),
                .init(state: .failure, matcher: try! JMESPathMatcher("transformJobStatus", expected: "Failed")),
                .init(state: .failure, matcher: AWSErrorCodeMatcher("ValidationException")),
            ],
            minDelayTime: .seconds(60),
            command: self.describeTransformJob
        )
        return try await self.client.waitUntil(input, waiter: waiter, maxWaitTime: maxWaitTime, logger: logger)
    }
}
