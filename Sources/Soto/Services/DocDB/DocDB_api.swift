//===----------------------------------------------------------------------===//
//
// This source file is part of the Soto for AWS open source project
//
// Copyright (c) 2017-2024 the Soto project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
// See CONTRIBUTORS.txt for the list of Soto project authors
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by https://github.com/soto-project/soto-codegenerator.
// DO NOT EDIT.

#if os(Linux) && compiler(<5.10)
// swift-corelibs-foundation hasn't been updated with Sendable conformances
@preconcurrency import Foundation
#else
import Foundation
#endif
@_exported import SotoCore

/// Service object for interacting with AWS DocDB service.
///
/// Amazon DocumentDB is a fast, reliable, and fully managed database service.  Amazon DocumentDB makes it easy to set up, operate, and scale MongoDB-compatible databases in the cloud.  With Amazon DocumentDB, you can run the same application code and use the same drivers and tools that you use with MongoDB.
public struct DocDB: AWSService {
    // MARK: Member variables

    /// Client used for communication with AWS
    public let client: AWSClient
    /// Service configuration
    public let config: AWSServiceConfig

    // MARK: Initialization

    /// Initialize the DocDB client
    /// - parameters:
    ///     - client: AWSClient used to process requests
    ///     - region: Region of server you want to communicate with. This will override the partition parameter.
    ///     - partition: AWS partition where service resides, standard (.aws), china (.awscn), government (.awsusgov).
    ///     - endpoint: Custom endpoint URL to use instead of standard AWS servers
    ///     - middleware: Middleware chain used to edit requests before they are sent and responses before they are decoded 
    ///     - timeout: Timeout value for HTTP requests
    ///     - byteBufferAllocator: Allocator for ByteBuffers
    ///     - options: Service options
    public init(
        client: AWSClient,
        region: SotoCore.Region? = nil,
        partition: AWSPartition = .aws,
        endpoint: String? = nil,
        middleware: AWSMiddlewareProtocol? = nil,
        timeout: TimeAmount? = nil,
        byteBufferAllocator: ByteBufferAllocator = ByteBufferAllocator(),
        options: AWSServiceConfig.Options = []
    ) {
        self.client = client
        self.config = AWSServiceConfig(
            region: region,
            partition: region?.partition ?? partition,
            serviceName: "DocDB",
            serviceIdentifier: "rds",
            serviceProtocol: .query,
            apiVersion: "2014-10-31",
            endpoint: endpoint,
            variantEndpoints: Self.variantEndpoints,
            errorType: DocDBErrorType.self,
            xmlNamespace: "http://rds.amazonaws.com/doc/2014-10-31/",
            middleware: middleware,
            timeout: timeout,
            byteBufferAllocator: byteBufferAllocator,
            options: options
        )
    }




    /// FIPS and dualstack endpoints
    static var variantEndpoints: [EndpointVariantType: AWSServiceConfig.EndpointVariant] {[
        [.fips]: .init(endpoints: [
            "ca-central-1": "rds-fips.ca-central-1.amazonaws.com",
            "ca-west-1": "rds-fips.ca-west-1.amazonaws.com",
            "us-east-1": "rds-fips.us-east-1.amazonaws.com",
            "us-east-2": "rds-fips.us-east-2.amazonaws.com",
            "us-gov-east-1": "rds.us-gov-east-1.amazonaws.com",
            "us-gov-west-1": "rds.us-gov-west-1.amazonaws.com",
            "us-iso-east-1": "rds.us-iso-east-1.c2s.ic.gov",
            "us-iso-west-1": "rds.us-iso-west-1.c2s.ic.gov",
            "us-isob-east-1": "rds.us-isob-east-1.sc2s.sgov.gov",
            "us-west-1": "rds-fips.us-west-1.amazonaws.com",
            "us-west-2": "rds-fips.us-west-2.amazonaws.com"
        ])
    ]}

    // MARK: API Calls

    /// Adds a source identifier to an existing event notification subscription.
    @Sendable
    @inlinable
    public func addSourceIdentifierToSubscription(_ input: AddSourceIdentifierToSubscriptionMessage, logger: Logger = AWSClient.loggingDisabled) async throws -> AddSourceIdentifierToSubscriptionResult {
        try await self.client.execute(
            operation: "AddSourceIdentifierToSubscription", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Adds a source identifier to an existing event notification subscription.
    ///
    /// Parameters:
    ///   - sourceIdentifier: The identifier of the event source to be added:   If the source type is an instance, a DBInstanceIdentifier must be provided.   If the source type is a security group, a DBSecurityGroupName must be provided.   If the source type is a parameter group, a DBParameterGroupName must be provided.   If the source type is a snapshot, a DBSnapshotIdentifier must be provided.
    ///   - subscriptionName: The name of the Amazon DocumentDB event notification subscription that you want to add a source identifier to.
    ///   - logger: Logger use during operation
    @inlinable
    public func addSourceIdentifierToSubscription(
        sourceIdentifier: String? = nil,
        subscriptionName: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> AddSourceIdentifierToSubscriptionResult {
        let input = AddSourceIdentifierToSubscriptionMessage(
            sourceIdentifier: sourceIdentifier, 
            subscriptionName: subscriptionName
        )
        return try await self.addSourceIdentifierToSubscription(input, logger: logger)
    }

    /// Adds metadata tags to an Amazon DocumentDB resource. You can use these tags with cost allocation reporting to track costs that are associated with Amazon DocumentDB resources or in a Condition statement in an Identity and Access Management (IAM) policy for Amazon DocumentDB.
    @Sendable
    @inlinable
    public func addTagsToResource(_ input: AddTagsToResourceMessage, logger: Logger = AWSClient.loggingDisabled) async throws {
        try await self.client.execute(
            operation: "AddTagsToResource", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Adds metadata tags to an Amazon DocumentDB resource. You can use these tags with cost allocation reporting to track costs that are associated with Amazon DocumentDB resources or in a Condition statement in an Identity and Access Management (IAM) policy for Amazon DocumentDB.
    ///
    /// Parameters:
    ///   - resourceName: The Amazon DocumentDB resource that the tags are added to. This value is an Amazon Resource Name .
    ///   - tags: The tags to be assigned to the Amazon DocumentDB resource.
    ///   - logger: Logger use during operation
    @inlinable
    public func addTagsToResource(
        resourceName: String? = nil,
        tags: [Tag]? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws {
        let input = AddTagsToResourceMessage(
            resourceName: resourceName, 
            tags: tags
        )
        return try await self.addTagsToResource(input, logger: logger)
    }

    /// Applies a pending maintenance action to a resource (for example, to an Amazon DocumentDB instance).
    @Sendable
    @inlinable
    public func applyPendingMaintenanceAction(_ input: ApplyPendingMaintenanceActionMessage, logger: Logger = AWSClient.loggingDisabled) async throws -> ApplyPendingMaintenanceActionResult {
        try await self.client.execute(
            operation: "ApplyPendingMaintenanceAction", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Applies a pending maintenance action to a resource (for example, to an Amazon DocumentDB instance).
    ///
    /// Parameters:
    ///   - applyAction: The pending maintenance action to apply to this resource. Valid values: system-update, db-upgrade
    ///   - optInType: A value that specifies the type of opt-in request or undoes an opt-in request. An opt-in request of type immediate can't be undone. Valid values:    immediate - Apply the maintenance action immediately.    next-maintenance - Apply the maintenance action during the next maintenance window for the resource.     undo-opt-in - Cancel any existing next-maintenance opt-in requests.
    ///   - resourceIdentifier: The Amazon Resource Name (ARN) of the resource that the pending maintenance action applies to.
    ///   - logger: Logger use during operation
    @inlinable
    public func applyPendingMaintenanceAction(
        applyAction: String? = nil,
        optInType: String? = nil,
        resourceIdentifier: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> ApplyPendingMaintenanceActionResult {
        let input = ApplyPendingMaintenanceActionMessage(
            applyAction: applyAction, 
            optInType: optInType, 
            resourceIdentifier: resourceIdentifier
        )
        return try await self.applyPendingMaintenanceAction(input, logger: logger)
    }

    /// Copies the specified cluster parameter group.
    @Sendable
    @inlinable
    public func copyDBClusterParameterGroup(_ input: CopyDBClusterParameterGroupMessage, logger: Logger = AWSClient.loggingDisabled) async throws -> CopyDBClusterParameterGroupResult {
        try await self.client.execute(
            operation: "CopyDBClusterParameterGroup", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Copies the specified cluster parameter group.
    ///
    /// Parameters:
    ///   - sourceDBClusterParameterGroupIdentifier: The identifier or Amazon Resource Name (ARN) for the source cluster parameter group. Constraints:   Must specify a valid cluster parameter group.   If the source cluster parameter group is in the same Amazon Web Services Region as the copy, specify a valid parameter group identifier; for example, my-db-cluster-param-group, or a valid ARN.   If the source parameter group is in a different Amazon Web Services Region than the copy, specify a valid cluster parameter group ARN; for example, arn:aws:rds:us-east-1:123456789012:sample-cluster:sample-parameter-group.
    ///   - tags: The tags that are to be assigned to the parameter group.
    ///   - targetDBClusterParameterGroupDescription: A description for the copied cluster parameter group.
    ///   - targetDBClusterParameterGroupIdentifier: The identifier for the copied cluster parameter group. Constraints:   Cannot be null, empty, or blank.   Must contain from 1 to 255 letters, numbers, or hyphens.    The first character must be a letter.   Cannot end with a hyphen or contain two consecutive hyphens.    Example: my-cluster-param-group1
    ///   - logger: Logger use during operation
    @inlinable
    public func copyDBClusterParameterGroup(
        sourceDBClusterParameterGroupIdentifier: String? = nil,
        tags: [Tag]? = nil,
        targetDBClusterParameterGroupDescription: String? = nil,
        targetDBClusterParameterGroupIdentifier: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> CopyDBClusterParameterGroupResult {
        let input = CopyDBClusterParameterGroupMessage(
            sourceDBClusterParameterGroupIdentifier: sourceDBClusterParameterGroupIdentifier, 
            tags: tags, 
            targetDBClusterParameterGroupDescription: targetDBClusterParameterGroupDescription, 
            targetDBClusterParameterGroupIdentifier: targetDBClusterParameterGroupIdentifier
        )
        return try await self.copyDBClusterParameterGroup(input, logger: logger)
    }

    /// Copies a snapshot of a cluster. To copy a cluster snapshot from a shared manual cluster snapshot, SourceDBClusterSnapshotIdentifier must be the Amazon Resource Name (ARN) of the shared cluster snapshot. You can only copy a shared DB cluster snapshot, whether encrypted or not, in the same Amazon Web Services Region. To cancel the copy operation after it is in progress, delete the target cluster snapshot identified by TargetDBClusterSnapshotIdentifier while that cluster snapshot is in the copying status.
    @Sendable
    @inlinable
    public func copyDBClusterSnapshot(_ input: CopyDBClusterSnapshotMessage, logger: Logger = AWSClient.loggingDisabled) async throws -> CopyDBClusterSnapshotResult {
        try await self.client.execute(
            operation: "CopyDBClusterSnapshot", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Copies a snapshot of a cluster. To copy a cluster snapshot from a shared manual cluster snapshot, SourceDBClusterSnapshotIdentifier must be the Amazon Resource Name (ARN) of the shared cluster snapshot. You can only copy a shared DB cluster snapshot, whether encrypted or not, in the same Amazon Web Services Region. To cancel the copy operation after it is in progress, delete the target cluster snapshot identified by TargetDBClusterSnapshotIdentifier while that cluster snapshot is in the copying status.
    ///
    /// Parameters:
    ///   - copyTags: Set to true to copy all tags from the source cluster snapshot to the target cluster snapshot, and otherwise false. The default is false.
    ///   - kmsKeyId: The KMS key ID for an encrypted cluster snapshot. The KMS key ID is the Amazon Resource Name (ARN), KMS key identifier, or the KMS key alias for the KMS encryption key.  If you copy an encrypted cluster snapshot from your Amazon Web Services account, you can specify a value for KmsKeyId to encrypt the copy with a new KMS encryption key. If you don't specify a value for KmsKeyId, then the copy of the cluster snapshot is encrypted with the same KMS key as the source cluster snapshot. If you copy an encrypted cluster snapshot that is shared from another Amazon Web Services account, then you must specify a value for KmsKeyId. To copy an encrypted cluster snapshot to another Amazon Web Services Region, set KmsKeyId to the KMS key ID that you want to use to encrypt the copy of the cluster snapshot in the destination Region. KMS encryption keys are specific to the Amazon Web Services Region that they are created in, and you can't use encryption keys from one Amazon Web Services Region in another Amazon Web Services Region. If you copy an unencrypted cluster snapshot and specify a value for the KmsKeyId parameter, an error is returned.
    ///   - preSignedUrl: The URL that contains a Signature Version 4 signed request for theCopyDBClusterSnapshot API action in the Amazon Web Services Region that contains the source cluster snapshot to copy. You must use the PreSignedUrl parameter when copying a cluster snapshot from another Amazon Web Services Region. If you are using an Amazon Web Services SDK tool or the CLI, you can specify SourceRegion (or --source-region for the CLI) instead of specifying PreSignedUrl manually. Specifying SourceRegion autogenerates a pre-signed URL that is a valid request for the operation that can be executed in the source Amazon Web Services Region. The presigned URL must be a valid request for the CopyDBClusterSnapshot API action that can be executed in the source Amazon Web Services Region that contains the cluster snapshot to be copied. The presigned URL request must contain the following parameter values:    SourceRegion - The ID of the region that contains the snapshot to be copied.    SourceDBClusterSnapshotIdentifier - The identifier for the the encrypted cluster snapshot to be copied. This identifier must be in the Amazon Resource Name (ARN) format for the source Amazon Web Services Region. For example, if you are copying an encrypted cluster snapshot from the us-east-1 Amazon Web Services Region, then your SourceDBClusterSnapshotIdentifier looks something like the following: arn:aws:rds:us-east-1:12345678012:sample-cluster:sample-cluster-snapshot.    TargetDBClusterSnapshotIdentifier - The identifier for the new cluster snapshot to be created. This parameter isn't case sensitive.
    ///   - sourceDBClusterSnapshotIdentifier: The identifier of the cluster snapshot to copy. This parameter is not case sensitive. Constraints:   Must specify a valid system snapshot in the available state.   If the source snapshot is in the same Amazon Web Services Region as the copy, specify a valid snapshot identifier.   If the source snapshot is in a different Amazon Web Services Region than the copy, specify a valid cluster snapshot ARN.   Example: my-cluster-snapshot1
    ///   - tags: The tags to be assigned to the cluster snapshot.
    ///   - targetDBClusterSnapshotIdentifier: The identifier of the new cluster snapshot to create from the source cluster snapshot. This parameter is not case sensitive. Constraints:   Must contain from 1 to 63 letters, numbers, or hyphens.    The first character must be a letter.   Cannot end with a hyphen or contain two consecutive hyphens.    Example: my-cluster-snapshot2
    ///   - logger: Logger use during operation
    @inlinable
    public func copyDBClusterSnapshot(
        copyTags: Bool? = nil,
        kmsKeyId: String? = nil,
        preSignedUrl: String? = nil,
        sourceDBClusterSnapshotIdentifier: String? = nil,
        tags: [Tag]? = nil,
        targetDBClusterSnapshotIdentifier: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> CopyDBClusterSnapshotResult {
        let input = CopyDBClusterSnapshotMessage(
            copyTags: copyTags, 
            kmsKeyId: kmsKeyId, 
            preSignedUrl: preSignedUrl, 
            sourceDBClusterSnapshotIdentifier: sourceDBClusterSnapshotIdentifier, 
            tags: tags, 
            targetDBClusterSnapshotIdentifier: targetDBClusterSnapshotIdentifier
        )
        return try await self.copyDBClusterSnapshot(input, logger: logger)
    }

    /// Creates a new Amazon DocumentDB cluster.
    @Sendable
    @inlinable
    public func createDBCluster(_ input: CreateDBClusterMessage, logger: Logger = AWSClient.loggingDisabled) async throws -> CreateDBClusterResult {
        try await self.client.execute(
            operation: "CreateDBCluster", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Creates a new Amazon DocumentDB cluster.
    ///
    /// Parameters:
    ///   - availabilityZones: A list of Amazon EC2 Availability Zones that instances in the cluster can be created in.
    ///   - backupRetentionPeriod: The number of days for which automated backups are retained. You must specify a minimum value of 1. Default: 1 Constraints:   Must be a value from 1 to 35.
    ///   - dbClusterIdentifier: The cluster identifier. This parameter is stored as a lowercase string. Constraints:   Must contain from 1 to 63 letters, numbers, or hyphens.    The first character must be a letter.   Cannot end with a hyphen or contain two consecutive hyphens.    Example: my-cluster
    ///   - dbClusterParameterGroupName: The name of the cluster parameter group to associate with this cluster.
    ///   - dbSubnetGroupName: A subnet group to associate with this cluster. Constraints: Must match the name of an existing DBSubnetGroup. Must not be default. Example: mySubnetgroup
    ///   - deletionProtection: Specifies whether this cluster can be deleted. If DeletionProtection is enabled, the cluster cannot be deleted unless it is modified and DeletionProtection is disabled. DeletionProtection protects clusters from being accidentally deleted.
    ///   - enableCloudwatchLogsExports: A list of log types that need to be enabled for exporting to Amazon CloudWatch Logs. You can enable audit logs or profiler logs. For more information, see  Auditing Amazon DocumentDB Events and  Profiling Amazon DocumentDB Operations.
    ///   - engine: The name of the database engine to be used for this cluster. Valid values: docdb
    ///   - engineVersion: The version number of the database engine to use. The --engine-version will default to the latest major engine version. For production workloads, we recommend explicitly declaring this parameter with the intended major engine version.
    ///   - globalClusterIdentifier: The cluster identifier of the new global cluster.
    ///   - kmsKeyId: The KMS key identifier for an encrypted cluster. The KMS key identifier is the Amazon Resource Name (ARN) for the KMS encryption key. If you are creating a cluster using the same Amazon Web Services account that owns the KMS encryption key that is used to encrypt the new cluster, you can use the KMS key alias instead of the ARN for the KMS encryption key. If an encryption key is not specified in KmsKeyId:    If the StorageEncrypted parameter is true, Amazon DocumentDB uses your default encryption key.    KMS creates the default encryption key for your Amazon Web Services account. Your Amazon Web Services account has a different default encryption key for each Amazon Web Services Regions.
    ///   - masterUsername: The name of the master user for the cluster. Constraints:   Must be from 1 to 63 letters or numbers.   The first character must be a letter.   Cannot be a reserved word for the chosen database engine.
    ///   - masterUserPassword: The password for the master database user. This password can contain any printable ASCII character except forward slash (/), double quote ("), or the "at" symbol (@). Constraints: Must contain from 8 to 100 characters.
    ///   - port: The port number on which the instances in the cluster accept connections.
    ///   - preferredBackupWindow: The daily time range during which automated backups are created if automated backups are enabled using the BackupRetentionPeriod parameter.  The default is a 30-minute window selected at random from an 8-hour block of time for each Amazon Web Services Region.  Constraints:   Must be in the format hh24:mi-hh24:mi.   Must be in Universal Coordinated Time (UTC).   Must not conflict with the preferred maintenance window.    Must be at least 30 minutes.
    ///   - preferredMaintenanceWindow: The weekly time range during which system maintenance can occur, in Universal Coordinated Time (UTC). Format: ddd:hh24:mi-ddd:hh24:mi  The default is a 30-minute window selected at random from an 8-hour block of time for each Amazon Web Services Region, occurring on a random day of the week. Valid days: Mon, Tue, Wed, Thu, Fri, Sat, Sun Constraints: Minimum 30-minute window.
    ///   - preSignedUrl: Not currently supported.
    ///   - storageEncrypted: Specifies whether the cluster is encrypted.
    ///   - storageType: The storage type to associate with the DB cluster. For information on storage types for Amazon DocumentDB clusters, see  Cluster storage configurations in the Amazon DocumentDB Developer Guide. Valid values for storage type - standard | iopt1  Default value is standard    When you create a DocumentDB DB cluster with the storage type set to iopt1, the storage type is returned in the response. The storage type isn't returned when you set it to standard.
    ///   - tags: The tags to be assigned to the cluster.
    ///   - vpcSecurityGroupIds: A list of EC2 VPC security groups to associate with this cluster.
    ///   - logger: Logger use during operation
    @inlinable
    public func createDBCluster(
        availabilityZones: [String]? = nil,
        backupRetentionPeriod: Int? = nil,
        dbClusterIdentifier: String? = nil,
        dbClusterParameterGroupName: String? = nil,
        dbSubnetGroupName: String? = nil,
        deletionProtection: Bool? = nil,
        enableCloudwatchLogsExports: [String]? = nil,
        engine: String? = nil,
        engineVersion: String? = nil,
        globalClusterIdentifier: String? = nil,
        kmsKeyId: String? = nil,
        masterUsername: String? = nil,
        masterUserPassword: String? = nil,
        port: Int? = nil,
        preferredBackupWindow: String? = nil,
        preferredMaintenanceWindow: String? = nil,
        preSignedUrl: String? = nil,
        storageEncrypted: Bool? = nil,
        storageType: String? = nil,
        tags: [Tag]? = nil,
        vpcSecurityGroupIds: [String]? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> CreateDBClusterResult {
        let input = CreateDBClusterMessage(
            availabilityZones: availabilityZones, 
            backupRetentionPeriod: backupRetentionPeriod, 
            dbClusterIdentifier: dbClusterIdentifier, 
            dbClusterParameterGroupName: dbClusterParameterGroupName, 
            dbSubnetGroupName: dbSubnetGroupName, 
            deletionProtection: deletionProtection, 
            enableCloudwatchLogsExports: enableCloudwatchLogsExports, 
            engine: engine, 
            engineVersion: engineVersion, 
            globalClusterIdentifier: globalClusterIdentifier, 
            kmsKeyId: kmsKeyId, 
            masterUsername: masterUsername, 
            masterUserPassword: masterUserPassword, 
            port: port, 
            preferredBackupWindow: preferredBackupWindow, 
            preferredMaintenanceWindow: preferredMaintenanceWindow, 
            preSignedUrl: preSignedUrl, 
            storageEncrypted: storageEncrypted, 
            storageType: storageType, 
            tags: tags, 
            vpcSecurityGroupIds: vpcSecurityGroupIds
        )
        return try await self.createDBCluster(input, logger: logger)
    }

    /// Creates a new cluster parameter group. Parameters in a cluster parameter group apply to all of the instances in a cluster. A cluster parameter group is initially created with the default parameters for the database engine used by instances in the cluster. In Amazon DocumentDB, you cannot make modifications directly to the default.docdb3.6 cluster parameter group. If your Amazon DocumentDB cluster is using the default cluster parameter group and you want to modify a value in it, you must first  create a new parameter group or  copy an existing parameter group, modify it, and then apply the modified parameter group to your cluster. For the new cluster parameter group and associated settings to take effect, you must then reboot the instances in the cluster without failover. For more information, see  Modifying Amazon DocumentDB Cluster Parameter Groups.
    @Sendable
    @inlinable
    public func createDBClusterParameterGroup(_ input: CreateDBClusterParameterGroupMessage, logger: Logger = AWSClient.loggingDisabled) async throws -> CreateDBClusterParameterGroupResult {
        try await self.client.execute(
            operation: "CreateDBClusterParameterGroup", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Creates a new cluster parameter group. Parameters in a cluster parameter group apply to all of the instances in a cluster. A cluster parameter group is initially created with the default parameters for the database engine used by instances in the cluster. In Amazon DocumentDB, you cannot make modifications directly to the default.docdb3.6 cluster parameter group. If your Amazon DocumentDB cluster is using the default cluster parameter group and you want to modify a value in it, you must first  create a new parameter group or  copy an existing parameter group, modify it, and then apply the modified parameter group to your cluster. For the new cluster parameter group and associated settings to take effect, you must then reboot the instances in the cluster without failover. For more information, see  Modifying Amazon DocumentDB Cluster Parameter Groups.
    ///
    /// Parameters:
    ///   - dbClusterParameterGroupName: The name of the cluster parameter group. Constraints:   Must not match the name of an existing DBClusterParameterGroup.    This value is stored as a lowercase string.
    ///   - dbParameterGroupFamily: The cluster parameter group family name.
    ///   - description: The description for the cluster parameter group.
    ///   - tags: The tags to be assigned to the cluster parameter group.
    ///   - logger: Logger use during operation
    @inlinable
    public func createDBClusterParameterGroup(
        dbClusterParameterGroupName: String? = nil,
        dbParameterGroupFamily: String? = nil,
        description: String? = nil,
        tags: [Tag]? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> CreateDBClusterParameterGroupResult {
        let input = CreateDBClusterParameterGroupMessage(
            dbClusterParameterGroupName: dbClusterParameterGroupName, 
            dbParameterGroupFamily: dbParameterGroupFamily, 
            description: description, 
            tags: tags
        )
        return try await self.createDBClusterParameterGroup(input, logger: logger)
    }

    /// Creates a snapshot of a cluster.
    @Sendable
    @inlinable
    public func createDBClusterSnapshot(_ input: CreateDBClusterSnapshotMessage, logger: Logger = AWSClient.loggingDisabled) async throws -> CreateDBClusterSnapshotResult {
        try await self.client.execute(
            operation: "CreateDBClusterSnapshot", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Creates a snapshot of a cluster.
    ///
    /// Parameters:
    ///   - dbClusterIdentifier: The identifier of the cluster to create a snapshot for. This parameter is not case sensitive. Constraints:   Must match the identifier of an existing DBCluster.   Example: my-cluster
    ///   - dbClusterSnapshotIdentifier: The identifier of the cluster snapshot. This parameter is stored as a lowercase string. Constraints:   Must contain from 1 to 63 letters, numbers, or hyphens.   The first character must be a letter.   Cannot end with a hyphen or contain two consecutive hyphens.    Example: my-cluster-snapshot1
    ///   - tags: The tags to be assigned to the cluster snapshot.
    ///   - logger: Logger use during operation
    @inlinable
    public func createDBClusterSnapshot(
        dbClusterIdentifier: String? = nil,
        dbClusterSnapshotIdentifier: String? = nil,
        tags: [Tag]? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> CreateDBClusterSnapshotResult {
        let input = CreateDBClusterSnapshotMessage(
            dbClusterIdentifier: dbClusterIdentifier, 
            dbClusterSnapshotIdentifier: dbClusterSnapshotIdentifier, 
            tags: tags
        )
        return try await self.createDBClusterSnapshot(input, logger: logger)
    }

    /// Creates a new instance.
    @Sendable
    @inlinable
    public func createDBInstance(_ input: CreateDBInstanceMessage, logger: Logger = AWSClient.loggingDisabled) async throws -> CreateDBInstanceResult {
        try await self.client.execute(
            operation: "CreateDBInstance", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Creates a new instance.
    ///
    /// Parameters:
    ///   - autoMinorVersionUpgrade: This parameter does not apply to Amazon DocumentDB. Amazon DocumentDB does not perform minor version upgrades regardless of the value set. Default: false
    ///   - availabilityZone: The Amazon EC2 Availability Zone that the instance is created in.  Default: A random, system-chosen Availability Zone in the endpoint's Amazon Web Services Region. Example: us-east-1d
    ///   - caCertificateIdentifier: The CA certificate identifier to use for the DB instance's server certificate. For more information, see Updating Your Amazon DocumentDB TLS  Certificates and   Encrypting Data in Transit in the Amazon DocumentDB Developer  Guide.
    ///   - copyTagsToSnapshot: A value that indicates whether to copy tags from the DB instance to snapshots of the DB instance. By default, tags are not copied.
    ///   - dbClusterIdentifier: The identifier of the cluster that the instance will belong to.
    ///   - dbInstanceClass: The compute and memory capacity of the instance; for example, db.r5.large.
    ///   - dbInstanceIdentifier: The instance identifier. This parameter is stored as a lowercase string. Constraints:   Must contain from 1 to 63 letters, numbers, or hyphens.   The first character must be a letter.   Cannot end with a hyphen or contain two consecutive hyphens.   Example: mydbinstance
    ///   - enablePerformanceInsights: A value that indicates whether to enable Performance Insights for the DB Instance. For more information, see Using Amazon Performance Insights.
    ///   - engine: The name of the database engine to be used for this instance. Valid value: docdb
    ///   - performanceInsightsKMSKeyId: The KMS key identifier for encryption of Performance Insights data. The KMS key identifier is the key ARN, key ID, alias ARN, or alias name for the KMS key. If you do not specify a value for PerformanceInsightsKMSKeyId, then Amazon DocumentDB uses your default KMS key. There is a default KMS key for your Amazon Web Services account. Your Amazon Web Services account has a different default KMS key for each Amazon Web Services region.
    ///   - preferredMaintenanceWindow: The time range each week during which system maintenance can occur, in Universal Coordinated Time (UTC). Format: ddd:hh24:mi-ddd:hh24:mi  The default is a 30-minute window selected at random from an 8-hour block of time for each Amazon Web Services Region, occurring on a random day of the week.  Valid days: Mon, Tue, Wed, Thu, Fri, Sat, Sun Constraints: Minimum 30-minute window.
    ///   - promotionTier: A value that specifies the order in which an Amazon DocumentDB replica is promoted to the primary instance after a failure of the existing primary instance. Default: 1 Valid values: 0-15
    ///   - tags: The tags to be assigned to the instance. You can assign up to 10 tags to an instance.
    ///   - logger: Logger use during operation
    @inlinable
    public func createDBInstance(
        autoMinorVersionUpgrade: Bool? = nil,
        availabilityZone: String? = nil,
        caCertificateIdentifier: String? = nil,
        copyTagsToSnapshot: Bool? = nil,
        dbClusterIdentifier: String? = nil,
        dbInstanceClass: String? = nil,
        dbInstanceIdentifier: String? = nil,
        enablePerformanceInsights: Bool? = nil,
        engine: String? = nil,
        performanceInsightsKMSKeyId: String? = nil,
        preferredMaintenanceWindow: String? = nil,
        promotionTier: Int? = nil,
        tags: [Tag]? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> CreateDBInstanceResult {
        let input = CreateDBInstanceMessage(
            autoMinorVersionUpgrade: autoMinorVersionUpgrade, 
            availabilityZone: availabilityZone, 
            caCertificateIdentifier: caCertificateIdentifier, 
            copyTagsToSnapshot: copyTagsToSnapshot, 
            dbClusterIdentifier: dbClusterIdentifier, 
            dbInstanceClass: dbInstanceClass, 
            dbInstanceIdentifier: dbInstanceIdentifier, 
            enablePerformanceInsights: enablePerformanceInsights, 
            engine: engine, 
            performanceInsightsKMSKeyId: performanceInsightsKMSKeyId, 
            preferredMaintenanceWindow: preferredMaintenanceWindow, 
            promotionTier: promotionTier, 
            tags: tags
        )
        return try await self.createDBInstance(input, logger: logger)
    }

    /// Creates a new subnet group. subnet groups must contain at least one subnet in at least two Availability Zones in the Amazon Web Services Region.
    @Sendable
    @inlinable
    public func createDBSubnetGroup(_ input: CreateDBSubnetGroupMessage, logger: Logger = AWSClient.loggingDisabled) async throws -> CreateDBSubnetGroupResult {
        try await self.client.execute(
            operation: "CreateDBSubnetGroup", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Creates a new subnet group. subnet groups must contain at least one subnet in at least two Availability Zones in the Amazon Web Services Region.
    ///
    /// Parameters:
    ///   - dbSubnetGroupDescription: The description for the subnet group.
    ///   - dbSubnetGroupName: The name for the subnet group. This value is stored as a lowercase string. Constraints: Must contain no more than 255 letters, numbers, periods, underscores, spaces, or hyphens. Must not be default. Example: mySubnetgroup
    ///   - subnetIds: The Amazon EC2 subnet IDs for the subnet group.
    ///   - tags: The tags to be assigned to the subnet group.
    ///   - logger: Logger use during operation
    @inlinable
    public func createDBSubnetGroup(
        dbSubnetGroupDescription: String? = nil,
        dbSubnetGroupName: String? = nil,
        subnetIds: [String]? = nil,
        tags: [Tag]? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> CreateDBSubnetGroupResult {
        let input = CreateDBSubnetGroupMessage(
            dbSubnetGroupDescription: dbSubnetGroupDescription, 
            dbSubnetGroupName: dbSubnetGroupName, 
            subnetIds: subnetIds, 
            tags: tags
        )
        return try await self.createDBSubnetGroup(input, logger: logger)
    }

    /// Creates an Amazon DocumentDB event notification subscription. This action requires a topic Amazon Resource Name (ARN) created by using the Amazon DocumentDB console, the Amazon SNS console, or the Amazon SNS API. To obtain an ARN with Amazon SNS, you must create a topic in Amazon SNS and subscribe to the topic. The ARN is displayed in the Amazon SNS console. You can specify the type of source (SourceType) that you want to be notified of. You can also provide a list of Amazon DocumentDB sources (SourceIds) that trigger the events, and you can provide a list of event categories (EventCategories) for events that you want to be notified of. For example, you can specify SourceType = db-instance, SourceIds = mydbinstance1, mydbinstance2 and EventCategories = Availability, Backup. If you specify both the SourceType and SourceIds (such as SourceType = db-instance and SourceIdentifier = myDBInstance1), you are notified of all the db-instance events for the specified source. If you specify a SourceType but do not specify a SourceIdentifier, you receive notice of the events for that source type for all your Amazon DocumentDB sources. If you do not specify either the SourceType or the SourceIdentifier, you are notified of events generated from all Amazon DocumentDB sources belonging to your customer account.
    @Sendable
    @inlinable
    public func createEventSubscription(_ input: CreateEventSubscriptionMessage, logger: Logger = AWSClient.loggingDisabled) async throws -> CreateEventSubscriptionResult {
        try await self.client.execute(
            operation: "CreateEventSubscription", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Creates an Amazon DocumentDB event notification subscription. This action requires a topic Amazon Resource Name (ARN) created by using the Amazon DocumentDB console, the Amazon SNS console, or the Amazon SNS API. To obtain an ARN with Amazon SNS, you must create a topic in Amazon SNS and subscribe to the topic. The ARN is displayed in the Amazon SNS console. You can specify the type of source (SourceType) that you want to be notified of. You can also provide a list of Amazon DocumentDB sources (SourceIds) that trigger the events, and you can provide a list of event categories (EventCategories) for events that you want to be notified of. For example, you can specify SourceType = db-instance, SourceIds = mydbinstance1, mydbinstance2 and EventCategories = Availability, Backup. If you specify both the SourceType and SourceIds (such as SourceType = db-instance and SourceIdentifier = myDBInstance1), you are notified of all the db-instance events for the specified source. If you specify a SourceType but do not specify a SourceIdentifier, you receive notice of the events for that source type for all your Amazon DocumentDB sources. If you do not specify either the SourceType or the SourceIdentifier, you are notified of events generated from all Amazon DocumentDB sources belonging to your customer account.
    ///
    /// Parameters:
    ///   - enabled:  A Boolean value; set to true to activate the subscription, set to false to create the subscription but not active it.
    ///   - eventCategories:  A list of event categories for a SourceType that you want to subscribe to.
    ///   - snsTopicArn: The Amazon Resource Name (ARN) of the SNS topic created for event notification. Amazon SNS creates the ARN when you create a topic and subscribe to it.
    ///   - sourceIds: The list of identifiers of the event sources for which events are returned. If not specified, then all sources are included in the response. An identifier must begin with a letter and must contain only ASCII letters, digits, and hyphens; it can't end with a hyphen or contain two consecutive hyphens. Constraints:   If SourceIds are provided, SourceType must also be provided.   If the source type is an instance, a DBInstanceIdentifier must be provided.   If the source type is a security group, a DBSecurityGroupName must be provided.   If the source type is a parameter group, a DBParameterGroupName must be provided.   If the source type is a snapshot, a DBSnapshotIdentifier must be provided.
    ///   - sourceType: The type of source that is generating the events. For example, if you want to be notified of events generated by an instance, you would set this parameter to db-instance. If this value is not specified, all events are returned. Valid values: db-instance, db-cluster, db-parameter-group, db-security-group, db-cluster-snapshot
    ///   - subscriptionName: The name of the subscription. Constraints: The name must be fewer than 255 characters.
    ///   - tags: The tags to be assigned to the event subscription.
    ///   - logger: Logger use during operation
    @inlinable
    public func createEventSubscription(
        enabled: Bool? = nil,
        eventCategories: [String]? = nil,
        snsTopicArn: String? = nil,
        sourceIds: [String]? = nil,
        sourceType: String? = nil,
        subscriptionName: String? = nil,
        tags: [Tag]? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> CreateEventSubscriptionResult {
        let input = CreateEventSubscriptionMessage(
            enabled: enabled, 
            eventCategories: eventCategories, 
            snsTopicArn: snsTopicArn, 
            sourceIds: sourceIds, 
            sourceType: sourceType, 
            subscriptionName: subscriptionName, 
            tags: tags
        )
        return try await self.createEventSubscription(input, logger: logger)
    }

    /// Creates an Amazon DocumentDB global cluster that can span multiple multiple Amazon Web Services Regions. The global cluster contains one primary cluster with read-write capability, and up-to give read-only secondary clusters. Global clusters uses storage-based fast replication across regions with latencies less than one second, using dedicated infrastructure with no impact to your workload’s performance.  You can create a global cluster that is initially empty, and then add a primary and a secondary to it. Or you can specify an existing cluster during the create operation, and this cluster becomes the primary of the global cluster.   This action only applies to Amazon DocumentDB clusters.
    @Sendable
    @inlinable
    public func createGlobalCluster(_ input: CreateGlobalClusterMessage, logger: Logger = AWSClient.loggingDisabled) async throws -> CreateGlobalClusterResult {
        try await self.client.execute(
            operation: "CreateGlobalCluster", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Creates an Amazon DocumentDB global cluster that can span multiple multiple Amazon Web Services Regions. The global cluster contains one primary cluster with read-write capability, and up-to give read-only secondary clusters. Global clusters uses storage-based fast replication across regions with latencies less than one second, using dedicated infrastructure with no impact to your workload’s performance.  You can create a global cluster that is initially empty, and then add a primary and a secondary to it. Or you can specify an existing cluster during the create operation, and this cluster becomes the primary of the global cluster.   This action only applies to Amazon DocumentDB clusters.
    ///
    /// Parameters:
    ///   - databaseName: The name for your database of up to 64 alpha-numeric characters. If you do not provide a name, Amazon DocumentDB will not create a database in the global cluster you are creating.
    ///   - deletionProtection: The deletion protection setting for the new global cluster. The global cluster can't be deleted when deletion protection is enabled.
    ///   - engine: The name of the database engine to be used for this cluster.
    ///   - engineVersion: The engine version of the global cluster.
    ///   - globalClusterIdentifier: The cluster identifier of the new global cluster.
    ///   - sourceDBClusterIdentifier: The Amazon Resource Name (ARN) to use as the primary cluster of the global cluster. This parameter is optional.
    ///   - storageEncrypted: The storage encryption setting for the new global cluster.
    ///   - logger: Logger use during operation
    @inlinable
    public func createGlobalCluster(
        databaseName: String? = nil,
        deletionProtection: Bool? = nil,
        engine: String? = nil,
        engineVersion: String? = nil,
        globalClusterIdentifier: String? = nil,
        sourceDBClusterIdentifier: String? = nil,
        storageEncrypted: Bool? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> CreateGlobalClusterResult {
        let input = CreateGlobalClusterMessage(
            databaseName: databaseName, 
            deletionProtection: deletionProtection, 
            engine: engine, 
            engineVersion: engineVersion, 
            globalClusterIdentifier: globalClusterIdentifier, 
            sourceDBClusterIdentifier: sourceDBClusterIdentifier, 
            storageEncrypted: storageEncrypted
        )
        return try await self.createGlobalCluster(input, logger: logger)
    }

    /// Deletes a previously provisioned cluster. When you delete a cluster, all automated backups for that cluster are deleted and can't be recovered. Manual DB cluster snapshots of the specified cluster are not deleted.
    @Sendable
    @inlinable
    public func deleteDBCluster(_ input: DeleteDBClusterMessage, logger: Logger = AWSClient.loggingDisabled) async throws -> DeleteDBClusterResult {
        try await self.client.execute(
            operation: "DeleteDBCluster", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Deletes a previously provisioned cluster. When you delete a cluster, all automated backups for that cluster are deleted and can't be recovered. Manual DB cluster snapshots of the specified cluster are not deleted.
    ///
    /// Parameters:
    ///   - dbClusterIdentifier: The cluster identifier for the cluster to be deleted. This parameter isn't case sensitive. Constraints:   Must match an existing DBClusterIdentifier.
    ///   - finalDBSnapshotIdentifier:  The cluster snapshot identifier of the new cluster snapshot created when SkipFinalSnapshot is set to false.   Specifying this parameter and also setting the SkipFinalShapshot parameter to true results in an error.   Constraints:   Must be from 1 to 255 letters, numbers, or hyphens.   The first character must be a letter.   Cannot end with a hyphen or contain two consecutive hyphens.
    ///   - skipFinalSnapshot:  Determines whether a final cluster snapshot is created before the cluster is deleted. If true is specified, no cluster snapshot is created. If false is specified, a cluster snapshot is created before the DB cluster is deleted.   If SkipFinalSnapshot is false, you must specify a FinalDBSnapshotIdentifier parameter.  Default: false
    ///   - logger: Logger use during operation
    @inlinable
    public func deleteDBCluster(
        dbClusterIdentifier: String? = nil,
        finalDBSnapshotIdentifier: String? = nil,
        skipFinalSnapshot: Bool? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> DeleteDBClusterResult {
        let input = DeleteDBClusterMessage(
            dbClusterIdentifier: dbClusterIdentifier, 
            finalDBSnapshotIdentifier: finalDBSnapshotIdentifier, 
            skipFinalSnapshot: skipFinalSnapshot
        )
        return try await self.deleteDBCluster(input, logger: logger)
    }

    /// Deletes a specified cluster parameter group. The cluster parameter group to be deleted can't be associated with any clusters.
    @Sendable
    @inlinable
    public func deleteDBClusterParameterGroup(_ input: DeleteDBClusterParameterGroupMessage, logger: Logger = AWSClient.loggingDisabled) async throws {
        try await self.client.execute(
            operation: "DeleteDBClusterParameterGroup", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Deletes a specified cluster parameter group. The cluster parameter group to be deleted can't be associated with any clusters.
    ///
    /// Parameters:
    ///   - dbClusterParameterGroupName: The name of the cluster parameter group. Constraints:   Must be the name of an existing cluster parameter group.   You can't delete a default cluster parameter group.   Cannot be associated with any clusters.
    ///   - logger: Logger use during operation
    @inlinable
    public func deleteDBClusterParameterGroup(
        dbClusterParameterGroupName: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws {
        let input = DeleteDBClusterParameterGroupMessage(
            dbClusterParameterGroupName: dbClusterParameterGroupName
        )
        return try await self.deleteDBClusterParameterGroup(input, logger: logger)
    }

    /// Deletes a cluster snapshot. If the snapshot is being copied, the copy operation is terminated.  The cluster snapshot must be in the available state to be deleted.
    @Sendable
    @inlinable
    public func deleteDBClusterSnapshot(_ input: DeleteDBClusterSnapshotMessage, logger: Logger = AWSClient.loggingDisabled) async throws -> DeleteDBClusterSnapshotResult {
        try await self.client.execute(
            operation: "DeleteDBClusterSnapshot", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Deletes a cluster snapshot. If the snapshot is being copied, the copy operation is terminated.  The cluster snapshot must be in the available state to be deleted.
    ///
    /// Parameters:
    ///   - dbClusterSnapshotIdentifier: The identifier of the cluster snapshot to delete. Constraints: Must be the name of an existing cluster snapshot in the available state.
    ///   - logger: Logger use during operation
    @inlinable
    public func deleteDBClusterSnapshot(
        dbClusterSnapshotIdentifier: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> DeleteDBClusterSnapshotResult {
        let input = DeleteDBClusterSnapshotMessage(
            dbClusterSnapshotIdentifier: dbClusterSnapshotIdentifier
        )
        return try await self.deleteDBClusterSnapshot(input, logger: logger)
    }

    /// Deletes a previously provisioned instance.
    @Sendable
    @inlinable
    public func deleteDBInstance(_ input: DeleteDBInstanceMessage, logger: Logger = AWSClient.loggingDisabled) async throws -> DeleteDBInstanceResult {
        try await self.client.execute(
            operation: "DeleteDBInstance", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Deletes a previously provisioned instance.
    ///
    /// Parameters:
    ///   - dbInstanceIdentifier: The instance identifier for the instance to be deleted. This parameter isn't case sensitive. Constraints:   Must match the name of an existing instance.
    ///   - logger: Logger use during operation
    @inlinable
    public func deleteDBInstance(
        dbInstanceIdentifier: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> DeleteDBInstanceResult {
        let input = DeleteDBInstanceMessage(
            dbInstanceIdentifier: dbInstanceIdentifier
        )
        return try await self.deleteDBInstance(input, logger: logger)
    }

    /// Deletes a subnet group.  The specified database subnet group must not be associated with any DB instances.
    @Sendable
    @inlinable
    public func deleteDBSubnetGroup(_ input: DeleteDBSubnetGroupMessage, logger: Logger = AWSClient.loggingDisabled) async throws {
        try await self.client.execute(
            operation: "DeleteDBSubnetGroup", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Deletes a subnet group.  The specified database subnet group must not be associated with any DB instances.
    ///
    /// Parameters:
    ///   - dbSubnetGroupName: The name of the database subnet group to delete.  You can't delete the default subnet group.  Constraints: Must match the name of an existing DBSubnetGroup. Must not be default. Example: mySubnetgroup
    ///   - logger: Logger use during operation
    @inlinable
    public func deleteDBSubnetGroup(
        dbSubnetGroupName: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws {
        let input = DeleteDBSubnetGroupMessage(
            dbSubnetGroupName: dbSubnetGroupName
        )
        return try await self.deleteDBSubnetGroup(input, logger: logger)
    }

    /// Deletes an Amazon DocumentDB event notification subscription.
    @Sendable
    @inlinable
    public func deleteEventSubscription(_ input: DeleteEventSubscriptionMessage, logger: Logger = AWSClient.loggingDisabled) async throws -> DeleteEventSubscriptionResult {
        try await self.client.execute(
            operation: "DeleteEventSubscription", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Deletes an Amazon DocumentDB event notification subscription.
    ///
    /// Parameters:
    ///   - subscriptionName: The name of the Amazon DocumentDB event notification subscription that you want to delete.
    ///   - logger: Logger use during operation
    @inlinable
    public func deleteEventSubscription(
        subscriptionName: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> DeleteEventSubscriptionResult {
        let input = DeleteEventSubscriptionMessage(
            subscriptionName: subscriptionName
        )
        return try await self.deleteEventSubscription(input, logger: logger)
    }

    /// Deletes a global cluster. The primary and secondary clusters must already be detached or deleted before attempting to delete a global cluster.  This action only applies to Amazon DocumentDB clusters.
    @Sendable
    @inlinable
    public func deleteGlobalCluster(_ input: DeleteGlobalClusterMessage, logger: Logger = AWSClient.loggingDisabled) async throws -> DeleteGlobalClusterResult {
        try await self.client.execute(
            operation: "DeleteGlobalCluster", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Deletes a global cluster. The primary and secondary clusters must already be detached or deleted before attempting to delete a global cluster.  This action only applies to Amazon DocumentDB clusters.
    ///
    /// Parameters:
    ///   - globalClusterIdentifier: The cluster identifier of the global cluster being deleted.
    ///   - logger: Logger use during operation
    @inlinable
    public func deleteGlobalCluster(
        globalClusterIdentifier: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> DeleteGlobalClusterResult {
        let input = DeleteGlobalClusterMessage(
            globalClusterIdentifier: globalClusterIdentifier
        )
        return try await self.deleteGlobalCluster(input, logger: logger)
    }

    /// Returns a list of certificate authority (CA) certificates provided by Amazon DocumentDB for this Amazon Web Services account.
    @Sendable
    @inlinable
    public func describeCertificates(_ input: DescribeCertificatesMessage, logger: Logger = AWSClient.loggingDisabled) async throws -> CertificateMessage {
        try await self.client.execute(
            operation: "DescribeCertificates", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Returns a list of certificate authority (CA) certificates provided by Amazon DocumentDB for this Amazon Web Services account.
    ///
    /// Parameters:
    ///   - certificateIdentifier: The user-supplied certificate identifier. If this parameter is specified, information for only the specified certificate is returned. If this parameter is omitted, a list of up to MaxRecords certificates is returned. This parameter is not case sensitive. Constraints   Must match an existing CertificateIdentifier.
    ///   - filters: This parameter is not currently supported.
    ///   - marker: An optional pagination token provided by a previous DescribeCertificates request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by MaxRecords.
    ///   - maxRecords: The maximum number of records to include in the response. If more records exist than the specified MaxRecords value, a pagination token called a marker is included in the response so that the remaining results can be retrieved. Default: 100 Constraints:   Minimum: 20   Maximum: 100
    ///   - logger: Logger use during operation
    @inlinable
    public func describeCertificates(
        certificateIdentifier: String? = nil,
        filters: [Filter]? = nil,
        marker: String? = nil,
        maxRecords: Int? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> CertificateMessage {
        let input = DescribeCertificatesMessage(
            certificateIdentifier: certificateIdentifier, 
            filters: filters, 
            marker: marker, 
            maxRecords: maxRecords
        )
        return try await self.describeCertificates(input, logger: logger)
    }

    /// Returns a list of DBClusterParameterGroup descriptions. If a DBClusterParameterGroupName parameter is specified, the list contains only the description of the specified cluster parameter group.
    @Sendable
    @inlinable
    public func describeDBClusterParameterGroups(_ input: DescribeDBClusterParameterGroupsMessage, logger: Logger = AWSClient.loggingDisabled) async throws -> DBClusterParameterGroupsMessage {
        try await self.client.execute(
            operation: "DescribeDBClusterParameterGroups", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Returns a list of DBClusterParameterGroup descriptions. If a DBClusterParameterGroupName parameter is specified, the list contains only the description of the specified cluster parameter group.
    ///
    /// Parameters:
    ///   - dbClusterParameterGroupName: The name of a specific cluster parameter group to return details for. Constraints:   If provided, must match the name of an existing DBClusterParameterGroup.
    ///   - filters: This parameter is not currently supported.
    ///   - marker: An optional pagination token provided by a previous request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by MaxRecords.
    ///   - maxRecords:  The maximum number of records to include in the response. If more records exist than the specified MaxRecords value, a pagination token (marker) is included in the response so that the remaining results can be retrieved. Default: 100 Constraints: Minimum 20, maximum 100.
    ///   - logger: Logger use during operation
    @inlinable
    public func describeDBClusterParameterGroups(
        dbClusterParameterGroupName: String? = nil,
        filters: [Filter]? = nil,
        marker: String? = nil,
        maxRecords: Int? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> DBClusterParameterGroupsMessage {
        let input = DescribeDBClusterParameterGroupsMessage(
            dbClusterParameterGroupName: dbClusterParameterGroupName, 
            filters: filters, 
            marker: marker, 
            maxRecords: maxRecords
        )
        return try await self.describeDBClusterParameterGroups(input, logger: logger)
    }

    /// Returns the detailed parameter list for a particular cluster parameter group.
    @Sendable
    @inlinable
    public func describeDBClusterParameters(_ input: DescribeDBClusterParametersMessage, logger: Logger = AWSClient.loggingDisabled) async throws -> DBClusterParameterGroupDetails {
        try await self.client.execute(
            operation: "DescribeDBClusterParameters", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Returns the detailed parameter list for a particular cluster parameter group.
    ///
    /// Parameters:
    ///   - dbClusterParameterGroupName: The name of a specific cluster parameter group to return parameter details for. Constraints:   If provided, must match the name of an existing DBClusterParameterGroup.
    ///   - filters: This parameter is not currently supported.
    ///   - marker: An optional pagination token provided by a previous request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by MaxRecords.
    ///   - maxRecords:  The maximum number of records to include in the response. If more records exist than the specified MaxRecords value, a pagination token (marker) is included in the response so that the remaining results can be retrieved. Default: 100 Constraints: Minimum 20, maximum 100.
    ///   - source:  A value that indicates to return only parameters for a specific source. Parameter sources can be engine, service, or customer.
    ///   - logger: Logger use during operation
    @inlinable
    public func describeDBClusterParameters(
        dbClusterParameterGroupName: String? = nil,
        filters: [Filter]? = nil,
        marker: String? = nil,
        maxRecords: Int? = nil,
        source: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> DBClusterParameterGroupDetails {
        let input = DescribeDBClusterParametersMessage(
            dbClusterParameterGroupName: dbClusterParameterGroupName, 
            filters: filters, 
            marker: marker, 
            maxRecords: maxRecords, 
            source: source
        )
        return try await self.describeDBClusterParameters(input, logger: logger)
    }

    /// Returns a list of cluster snapshot attribute names and values for a manual DB cluster snapshot. When you share snapshots with other Amazon Web Services accounts, DescribeDBClusterSnapshotAttributes returns the restore attribute and a list of IDs for the Amazon Web Services accounts that are authorized to copy or restore the manual cluster snapshot. If all is included in the list of values for the restore attribute, then the manual cluster snapshot is public and can be copied or restored by all Amazon Web Services accounts.
    @Sendable
    @inlinable
    public func describeDBClusterSnapshotAttributes(_ input: DescribeDBClusterSnapshotAttributesMessage, logger: Logger = AWSClient.loggingDisabled) async throws -> DescribeDBClusterSnapshotAttributesResult {
        try await self.client.execute(
            operation: "DescribeDBClusterSnapshotAttributes", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Returns a list of cluster snapshot attribute names and values for a manual DB cluster snapshot. When you share snapshots with other Amazon Web Services accounts, DescribeDBClusterSnapshotAttributes returns the restore attribute and a list of IDs for the Amazon Web Services accounts that are authorized to copy or restore the manual cluster snapshot. If all is included in the list of values for the restore attribute, then the manual cluster snapshot is public and can be copied or restored by all Amazon Web Services accounts.
    ///
    /// Parameters:
    ///   - dbClusterSnapshotIdentifier: The identifier for the cluster snapshot to describe the attributes for.
    ///   - logger: Logger use during operation
    @inlinable
    public func describeDBClusterSnapshotAttributes(
        dbClusterSnapshotIdentifier: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> DescribeDBClusterSnapshotAttributesResult {
        let input = DescribeDBClusterSnapshotAttributesMessage(
            dbClusterSnapshotIdentifier: dbClusterSnapshotIdentifier
        )
        return try await self.describeDBClusterSnapshotAttributes(input, logger: logger)
    }

    /// Returns information about cluster snapshots. This API operation supports pagination.
    @Sendable
    @inlinable
    public func describeDBClusterSnapshots(_ input: DescribeDBClusterSnapshotsMessage, logger: Logger = AWSClient.loggingDisabled) async throws -> DBClusterSnapshotMessage {
        try await self.client.execute(
            operation: "DescribeDBClusterSnapshots", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Returns information about cluster snapshots. This API operation supports pagination.
    ///
    /// Parameters:
    ///   - dbClusterIdentifier: The ID of the cluster to retrieve the list of cluster snapshots for. This parameter can't be used with the DBClusterSnapshotIdentifier parameter. This parameter is not case sensitive.  Constraints:   If provided, must match the identifier of an existing DBCluster.
    ///   - dbClusterSnapshotIdentifier: A specific cluster snapshot identifier to describe. This parameter can't be used with the DBClusterIdentifier parameter. This value is stored as a lowercase string.  Constraints:   If provided, must match the identifier of an existing DBClusterSnapshot.   If this identifier is for an automated snapshot, the SnapshotType parameter must also be specified.
    ///   - filters: This parameter is not currently supported.
    ///   - includePublic: Set to true to include manual cluster snapshots that are public and can be copied or restored by any Amazon Web Services account, and otherwise false. The default is false.
    ///   - includeShared: Set to true to include shared manual cluster snapshots from other Amazon Web Services accounts that this Amazon Web Services account has been given permission to copy or restore, and otherwise false. The default is false.
    ///   - marker: An optional pagination token provided by a previous request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by MaxRecords.
    ///   - maxRecords:  The maximum number of records to include in the response. If more records exist than the specified MaxRecords value, a pagination token (marker) is included in the response so that the remaining results can be retrieved. Default: 100 Constraints: Minimum 20, maximum 100.
    ///   - snapshotType: The type of cluster snapshots to be returned. You can specify one of the following values:    automated - Return all cluster snapshots that Amazon DocumentDB has automatically created for your Amazon Web Services account.    manual - Return all cluster snapshots that you have manually created for your Amazon Web Services account.    shared - Return all manual cluster snapshots that have been shared to your Amazon Web Services account.    public - Return all cluster snapshots that have been marked as public.   If you don't specify a SnapshotType value, then both automated and manual cluster snapshots are returned. You can include shared cluster snapshots with these results by setting the IncludeShared parameter to true. You can include public cluster snapshots with these results by setting theIncludePublic parameter to true. The IncludeShared and IncludePublic parameters don't apply for SnapshotType values of manual or automated. The IncludePublic parameter doesn't apply when SnapshotType is set to shared. The IncludeShared parameter doesn't apply when SnapshotType is set to public.
    ///   - logger: Logger use during operation
    @inlinable
    public func describeDBClusterSnapshots(
        dbClusterIdentifier: String? = nil,
        dbClusterSnapshotIdentifier: String? = nil,
        filters: [Filter]? = nil,
        includePublic: Bool? = nil,
        includeShared: Bool? = nil,
        marker: String? = nil,
        maxRecords: Int? = nil,
        snapshotType: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> DBClusterSnapshotMessage {
        let input = DescribeDBClusterSnapshotsMessage(
            dbClusterIdentifier: dbClusterIdentifier, 
            dbClusterSnapshotIdentifier: dbClusterSnapshotIdentifier, 
            filters: filters, 
            includePublic: includePublic, 
            includeShared: includeShared, 
            marker: marker, 
            maxRecords: maxRecords, 
            snapshotType: snapshotType
        )
        return try await self.describeDBClusterSnapshots(input, logger: logger)
    }

    /// Returns information about provisioned Amazon DocumentDB clusters. This API operation supports pagination. For certain management features such as cluster and instance lifecycle management, Amazon DocumentDB leverages operational technology that is shared with Amazon RDS and Amazon Neptune. Use the filterName=engine,Values=docdb filter parameter to return only Amazon DocumentDB clusters.
    @Sendable
    @inlinable
    public func describeDBClusters(_ input: DescribeDBClustersMessage, logger: Logger = AWSClient.loggingDisabled) async throws -> DBClusterMessage {
        try await self.client.execute(
            operation: "DescribeDBClusters", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Returns information about provisioned Amazon DocumentDB clusters. This API operation supports pagination. For certain management features such as cluster and instance lifecycle management, Amazon DocumentDB leverages operational technology that is shared with Amazon RDS and Amazon Neptune. Use the filterName=engine,Values=docdb filter parameter to return only Amazon DocumentDB clusters.
    ///
    /// Parameters:
    ///   - dbClusterIdentifier: The user-provided cluster identifier. If this parameter is specified, information from only the specific cluster is returned. This parameter isn't case sensitive. Constraints:   If provided, must match an existing DBClusterIdentifier.
    ///   - filters: A filter that specifies one or more clusters to describe. Supported filters:    db-cluster-id - Accepts cluster identifiers and cluster Amazon Resource Names (ARNs). The results list only includes information about the clusters identified by these ARNs.
    ///   - marker: An optional pagination token provided by a previous request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by MaxRecords.
    ///   - maxRecords:  The maximum number of records to include in the response. If more records exist than the specified MaxRecords value, a pagination token (marker) is included in the response so that the remaining results can be retrieved. Default: 100 Constraints: Minimum 20, maximum 100.
    ///   - logger: Logger use during operation
    @inlinable
    public func describeDBClusters(
        dbClusterIdentifier: String? = nil,
        filters: [Filter]? = nil,
        marker: String? = nil,
        maxRecords: Int? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> DBClusterMessage {
        let input = DescribeDBClustersMessage(
            dbClusterIdentifier: dbClusterIdentifier, 
            filters: filters, 
            marker: marker, 
            maxRecords: maxRecords
        )
        return try await self.describeDBClusters(input, logger: logger)
    }

    /// Returns a list of the available engines.
    @Sendable
    @inlinable
    public func describeDBEngineVersions(_ input: DescribeDBEngineVersionsMessage, logger: Logger = AWSClient.loggingDisabled) async throws -> DBEngineVersionMessage {
        try await self.client.execute(
            operation: "DescribeDBEngineVersions", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Returns a list of the available engines.
    ///
    /// Parameters:
    ///   - dbParameterGroupFamily: The name of a specific parameter group family to return details for. Constraints:   If provided, must match an existing DBParameterGroupFamily.
    ///   - defaultOnly: Indicates that only the default version of the specified engine or engine and major version combination is returned.
    ///   - engine: The database engine to return.
    ///   - engineVersion: The database engine version to return. Example: 3.6.0
    ///   - filters: This parameter is not currently supported.
    ///   - listSupportedCharacterSets: If this parameter is specified and the requested engine supports the CharacterSetName parameter for CreateDBInstance, the response includes a list of supported character sets for each engine version.
    ///   - listSupportedTimezones: If this parameter is specified and the requested engine supports the TimeZone parameter for CreateDBInstance, the response includes a list of supported time zones for each engine version.
    ///   - marker: An optional pagination token provided by a previous request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by MaxRecords.
    ///   - maxRecords:  The maximum number of records to include in the response. If more records exist than the specified MaxRecords value, a pagination token (marker) is included in the response so that the remaining results can be retrieved. Default: 100 Constraints: Minimum 20, maximum 100.
    ///   - logger: Logger use during operation
    @inlinable
    public func describeDBEngineVersions(
        dbParameterGroupFamily: String? = nil,
        defaultOnly: Bool? = nil,
        engine: String? = nil,
        engineVersion: String? = nil,
        filters: [Filter]? = nil,
        listSupportedCharacterSets: Bool? = nil,
        listSupportedTimezones: Bool? = nil,
        marker: String? = nil,
        maxRecords: Int? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> DBEngineVersionMessage {
        let input = DescribeDBEngineVersionsMessage(
            dbParameterGroupFamily: dbParameterGroupFamily, 
            defaultOnly: defaultOnly, 
            engine: engine, 
            engineVersion: engineVersion, 
            filters: filters, 
            listSupportedCharacterSets: listSupportedCharacterSets, 
            listSupportedTimezones: listSupportedTimezones, 
            marker: marker, 
            maxRecords: maxRecords
        )
        return try await self.describeDBEngineVersions(input, logger: logger)
    }

    /// Returns information about provisioned Amazon DocumentDB instances. This API supports pagination.
    @Sendable
    @inlinable
    public func describeDBInstances(_ input: DescribeDBInstancesMessage, logger: Logger = AWSClient.loggingDisabled) async throws -> DBInstanceMessage {
        try await self.client.execute(
            operation: "DescribeDBInstances", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Returns information about provisioned Amazon DocumentDB instances. This API supports pagination.
    ///
    /// Parameters:
    ///   - dbInstanceIdentifier: The user-provided instance identifier. If this parameter is specified, information from only the specific instance is returned. This parameter isn't case sensitive. Constraints:   If provided, must match the identifier of an existing DBInstance.
    ///   - filters: A filter that specifies one or more instances to describe. Supported filters:    db-cluster-id - Accepts cluster identifiers and cluster Amazon Resource Names (ARNs). The results list includes only the information about the instances that are associated with the clusters that are identified by these ARNs.    db-instance-id - Accepts instance identifiers and instance ARNs. The results list includes only the information about the instances that are identified by these ARNs.
    ///   - marker: An optional pagination token provided by a previous request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by MaxRecords.
    ///   - maxRecords:  The maximum number of records to include in the response. If more records exist than the specified MaxRecords value, a pagination token (marker) is included in the response so that the remaining results can be retrieved. Default: 100 Constraints: Minimum 20, maximum 100.
    ///   - logger: Logger use during operation
    @inlinable
    public func describeDBInstances(
        dbInstanceIdentifier: String? = nil,
        filters: [Filter]? = nil,
        marker: String? = nil,
        maxRecords: Int? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> DBInstanceMessage {
        let input = DescribeDBInstancesMessage(
            dbInstanceIdentifier: dbInstanceIdentifier, 
            filters: filters, 
            marker: marker, 
            maxRecords: maxRecords
        )
        return try await self.describeDBInstances(input, logger: logger)
    }

    /// Returns a list of DBSubnetGroup descriptions. If a DBSubnetGroupName is specified, the list will contain only the descriptions of the specified DBSubnetGroup.
    @Sendable
    @inlinable
    public func describeDBSubnetGroups(_ input: DescribeDBSubnetGroupsMessage, logger: Logger = AWSClient.loggingDisabled) async throws -> DBSubnetGroupMessage {
        try await self.client.execute(
            operation: "DescribeDBSubnetGroups", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Returns a list of DBSubnetGroup descriptions. If a DBSubnetGroupName is specified, the list will contain only the descriptions of the specified DBSubnetGroup.
    ///
    /// Parameters:
    ///   - dbSubnetGroupName: The name of the subnet group to return details for.
    ///   - filters: This parameter is not currently supported.
    ///   - marker: An optional pagination token provided by a previous request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by MaxRecords.
    ///   - maxRecords:  The maximum number of records to include in the response. If more records exist than the specified MaxRecords value, a pagination token (marker) is included in the response so that the remaining results can be retrieved. Default: 100 Constraints: Minimum 20, maximum 100.
    ///   - logger: Logger use during operation
    @inlinable
    public func describeDBSubnetGroups(
        dbSubnetGroupName: String? = nil,
        filters: [Filter]? = nil,
        marker: String? = nil,
        maxRecords: Int? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> DBSubnetGroupMessage {
        let input = DescribeDBSubnetGroupsMessage(
            dbSubnetGroupName: dbSubnetGroupName, 
            filters: filters, 
            marker: marker, 
            maxRecords: maxRecords
        )
        return try await self.describeDBSubnetGroups(input, logger: logger)
    }

    /// Returns the default engine and system parameter information for the cluster database engine.
    @Sendable
    @inlinable
    public func describeEngineDefaultClusterParameters(_ input: DescribeEngineDefaultClusterParametersMessage, logger: Logger = AWSClient.loggingDisabled) async throws -> DescribeEngineDefaultClusterParametersResult {
        try await self.client.execute(
            operation: "DescribeEngineDefaultClusterParameters", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Returns the default engine and system parameter information for the cluster database engine.
    ///
    /// Parameters:
    ///   - dbParameterGroupFamily: The name of the cluster parameter group family to return the engine parameter information for.
    ///   - filters: This parameter is not currently supported.
    ///   - marker: An optional pagination token provided by a previous request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by MaxRecords.
    ///   - maxRecords:  The maximum number of records to include in the response. If more records exist than the specified MaxRecords value, a pagination token (marker) is included in the response so that the remaining results can be retrieved. Default: 100 Constraints: Minimum 20, maximum 100.
    ///   - logger: Logger use during operation
    @inlinable
    public func describeEngineDefaultClusterParameters(
        dbParameterGroupFamily: String? = nil,
        filters: [Filter]? = nil,
        marker: String? = nil,
        maxRecords: Int? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> DescribeEngineDefaultClusterParametersResult {
        let input = DescribeEngineDefaultClusterParametersMessage(
            dbParameterGroupFamily: dbParameterGroupFamily, 
            filters: filters, 
            marker: marker, 
            maxRecords: maxRecords
        )
        return try await self.describeEngineDefaultClusterParameters(input, logger: logger)
    }

    /// Displays a list of categories for all event source types, or, if specified, for a specified source type.
    @Sendable
    @inlinable
    public func describeEventCategories(_ input: DescribeEventCategoriesMessage, logger: Logger = AWSClient.loggingDisabled) async throws -> EventCategoriesMessage {
        try await self.client.execute(
            operation: "DescribeEventCategories", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Displays a list of categories for all event source types, or, if specified, for a specified source type.
    ///
    /// Parameters:
    ///   - filters: This parameter is not currently supported.
    ///   - sourceType: The type of source that is generating the events. Valid values: db-instance, db-parameter-group, db-security-group
    ///   - logger: Logger use during operation
    @inlinable
    public func describeEventCategories(
        filters: [Filter]? = nil,
        sourceType: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> EventCategoriesMessage {
        let input = DescribeEventCategoriesMessage(
            filters: filters, 
            sourceType: sourceType
        )
        return try await self.describeEventCategories(input, logger: logger)
    }

    /// Lists all the subscription descriptions for a customer account. The description for a subscription includes SubscriptionName, SNSTopicARN, CustomerID, SourceType, SourceID, CreationTime, and Status. If you specify a SubscriptionName, lists the description for that subscription.
    @Sendable
    @inlinable
    public func describeEventSubscriptions(_ input: DescribeEventSubscriptionsMessage, logger: Logger = AWSClient.loggingDisabled) async throws -> EventSubscriptionsMessage {
        try await self.client.execute(
            operation: "DescribeEventSubscriptions", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Lists all the subscription descriptions for a customer account. The description for a subscription includes SubscriptionName, SNSTopicARN, CustomerID, SourceType, SourceID, CreationTime, and Status. If you specify a SubscriptionName, lists the description for that subscription.
    ///
    /// Parameters:
    ///   - filters: This parameter is not currently supported.
    ///   - marker: An optional pagination token provided by a previous request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by MaxRecords.
    ///   - maxRecords:  The maximum number of records to include in the response. If more records exist than the specified MaxRecords value, a pagination token (marker) is included in the response so that the remaining results can be retrieved. Default: 100 Constraints: Minimum 20, maximum 100.
    ///   - subscriptionName: The name of the Amazon DocumentDB event notification subscription that you want to describe.
    ///   - logger: Logger use during operation
    @inlinable
    public func describeEventSubscriptions(
        filters: [Filter]? = nil,
        marker: String? = nil,
        maxRecords: Int? = nil,
        subscriptionName: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> EventSubscriptionsMessage {
        let input = DescribeEventSubscriptionsMessage(
            filters: filters, 
            marker: marker, 
            maxRecords: maxRecords, 
            subscriptionName: subscriptionName
        )
        return try await self.describeEventSubscriptions(input, logger: logger)
    }

    /// Returns events related to instances, security groups, snapshots, and DB parameter groups for the past 14 days. You can obtain events specific to a particular DB instance, security group, snapshot, or parameter group by providing the name as a parameter. By default, the events of the past hour are returned.
    @Sendable
    @inlinable
    public func describeEvents(_ input: DescribeEventsMessage, logger: Logger = AWSClient.loggingDisabled) async throws -> EventsMessage {
        try await self.client.execute(
            operation: "DescribeEvents", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Returns events related to instances, security groups, snapshots, and DB parameter groups for the past 14 days. You can obtain events specific to a particular DB instance, security group, snapshot, or parameter group by providing the name as a parameter. By default, the events of the past hour are returned.
    ///
    /// Parameters:
    ///   - duration: The number of minutes to retrieve events for. Default: 60
    ///   - endTime:  The end of the time interval for which to retrieve events, specified in ISO 8601 format.  Example: 2009-07-08T18:00Z
    ///   - eventCategories: A list of event categories that trigger notifications for an event notification subscription.
    ///   - filters: This parameter is not currently supported.
    ///   - marker: An optional pagination token provided by a previous request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by MaxRecords.
    ///   - maxRecords:  The maximum number of records to include in the response. If more records exist than the specified MaxRecords value, a pagination token (marker) is included in the response so that the remaining results can be retrieved. Default: 100 Constraints: Minimum 20, maximum 100.
    ///   - sourceIdentifier: The identifier of the event source for which events are returned. If not specified, then all sources are included in the response. Constraints:   If SourceIdentifier is provided, SourceType must also be provided.   If the source type is DBInstance, a DBInstanceIdentifier must be provided.   If the source type is DBSecurityGroup, a DBSecurityGroupName must be provided.   If the source type is DBParameterGroup, a DBParameterGroupName must be provided.   If the source type is DBSnapshot, a DBSnapshotIdentifier must be provided.   Cannot end with a hyphen or contain two consecutive hyphens.
    ///   - sourceType: The event source to retrieve events for. If no value is specified, all events are returned.
    ///   - startTime:  The beginning of the time interval to retrieve events for, specified in ISO 8601 format.  Example: 2009-07-08T18:00Z
    ///   - logger: Logger use during operation
    @inlinable
    public func describeEvents(
        duration: Int? = nil,
        endTime: Date? = nil,
        eventCategories: [String]? = nil,
        filters: [Filter]? = nil,
        marker: String? = nil,
        maxRecords: Int? = nil,
        sourceIdentifier: String? = nil,
        sourceType: SourceType? = nil,
        startTime: Date? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> EventsMessage {
        let input = DescribeEventsMessage(
            duration: duration, 
            endTime: endTime, 
            eventCategories: eventCategories, 
            filters: filters, 
            marker: marker, 
            maxRecords: maxRecords, 
            sourceIdentifier: sourceIdentifier, 
            sourceType: sourceType, 
            startTime: startTime
        )
        return try await self.describeEvents(input, logger: logger)
    }

    /// Returns information about Amazon DocumentDB global  clusters. This API supports pagination.  This action only applies to Amazon DocumentDB clusters.
    @Sendable
    @inlinable
    public func describeGlobalClusters(_ input: DescribeGlobalClustersMessage, logger: Logger = AWSClient.loggingDisabled) async throws -> GlobalClustersMessage {
        try await self.client.execute(
            operation: "DescribeGlobalClusters", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Returns information about Amazon DocumentDB global  clusters. This API supports pagination.  This action only applies to Amazon DocumentDB clusters.
    ///
    /// Parameters:
    ///   - filters: A filter that specifies one or more global DB clusters to describe. Supported filters: db-cluster-id accepts  cluster identifiers and  cluster Amazon Resource Names (ARNs). The results list will only include information about the clusters identified by these ARNs.
    ///   - globalClusterIdentifier: The user-supplied  cluster identifier. If this parameter is specified, information from only the specific cluster is returned. This parameter isn't case-sensitive.
    ///   - marker: An optional pagination token provided by a previous DescribeGlobalClusters request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by MaxRecords.
    ///   - maxRecords: The maximum number of records to include in the response. If more records exist than the specified MaxRecords value, a pagination token called a marker is included in the response so that you can retrieve the remaining results.
    ///   - logger: Logger use during operation
    @inlinable
    public func describeGlobalClusters(
        filters: [Filter]? = nil,
        globalClusterIdentifier: String? = nil,
        marker: String? = nil,
        maxRecords: Int? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> GlobalClustersMessage {
        let input = DescribeGlobalClustersMessage(
            filters: filters, 
            globalClusterIdentifier: globalClusterIdentifier, 
            marker: marker, 
            maxRecords: maxRecords
        )
        return try await self.describeGlobalClusters(input, logger: logger)
    }

    /// Returns a list of orderable instance options for the specified engine.
    @Sendable
    @inlinable
    public func describeOrderableDBInstanceOptions(_ input: DescribeOrderableDBInstanceOptionsMessage, logger: Logger = AWSClient.loggingDisabled) async throws -> OrderableDBInstanceOptionsMessage {
        try await self.client.execute(
            operation: "DescribeOrderableDBInstanceOptions", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Returns a list of orderable instance options for the specified engine.
    ///
    /// Parameters:
    ///   - dbInstanceClass: The instance class filter value. Specify this parameter to show only the available offerings that match the specified instance class.
    ///   - engine: The name of the engine to retrieve instance options for.
    ///   - engineVersion: The engine version filter value. Specify this parameter to show only the available offerings that match the specified engine version.
    ///   - filters: This parameter is not currently supported.
    ///   - licenseModel: The license model filter value. Specify this parameter to show only the available offerings that match the specified license model.
    ///   - marker: An optional pagination token provided by a previous request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by MaxRecords.
    ///   - maxRecords:  The maximum number of records to include in the response. If more records exist than the specified MaxRecords value, a pagination token (marker) is included in the response so that the remaining results can be retrieved. Default: 100 Constraints: Minimum 20, maximum 100.
    ///   - vpc: The virtual private cloud (VPC) filter value. Specify this parameter to show only the available VPC or non-VPC offerings.
    ///   - logger: Logger use during operation
    @inlinable
    public func describeOrderableDBInstanceOptions(
        dbInstanceClass: String? = nil,
        engine: String? = nil,
        engineVersion: String? = nil,
        filters: [Filter]? = nil,
        licenseModel: String? = nil,
        marker: String? = nil,
        maxRecords: Int? = nil,
        vpc: Bool? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> OrderableDBInstanceOptionsMessage {
        let input = DescribeOrderableDBInstanceOptionsMessage(
            dbInstanceClass: dbInstanceClass, 
            engine: engine, 
            engineVersion: engineVersion, 
            filters: filters, 
            licenseModel: licenseModel, 
            marker: marker, 
            maxRecords: maxRecords, 
            vpc: vpc
        )
        return try await self.describeOrderableDBInstanceOptions(input, logger: logger)
    }

    /// Returns a list of resources (for example, instances) that have at least one pending maintenance action.
    @Sendable
    @inlinable
    public func describePendingMaintenanceActions(_ input: DescribePendingMaintenanceActionsMessage, logger: Logger = AWSClient.loggingDisabled) async throws -> PendingMaintenanceActionsMessage {
        try await self.client.execute(
            operation: "DescribePendingMaintenanceActions", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Returns a list of resources (for example, instances) that have at least one pending maintenance action.
    ///
    /// Parameters:
    ///   - filters: A filter that specifies one or more resources to return pending maintenance actions for. Supported filters:    db-cluster-id - Accepts cluster identifiers and cluster Amazon Resource Names (ARNs). The results list includes only pending maintenance actions for the clusters identified by these ARNs.    db-instance-id - Accepts instance identifiers and instance ARNs. The results list includes only pending maintenance actions for the DB instances identified by these ARNs.
    ///   - marker: An optional pagination token provided by a previous request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by MaxRecords.
    ///   - maxRecords:  The maximum number of records to include in the response. If more records exist than the specified MaxRecords value, a pagination token (marker) is included in the response so that the remaining results can be retrieved. Default: 100 Constraints: Minimum 20, maximum 100.
    ///   - resourceIdentifier: The ARN of a resource to return pending maintenance actions for.
    ///   - logger: Logger use during operation
    @inlinable
    public func describePendingMaintenanceActions(
        filters: [Filter]? = nil,
        marker: String? = nil,
        maxRecords: Int? = nil,
        resourceIdentifier: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> PendingMaintenanceActionsMessage {
        let input = DescribePendingMaintenanceActionsMessage(
            filters: filters, 
            marker: marker, 
            maxRecords: maxRecords, 
            resourceIdentifier: resourceIdentifier
        )
        return try await self.describePendingMaintenanceActions(input, logger: logger)
    }

    /// Forces a failover for a cluster. A failover for a cluster promotes one of the Amazon DocumentDB replicas (read-only instances) in the cluster to be the primary instance (the cluster writer). If the primary instance fails, Amazon DocumentDB automatically fails over to an Amazon DocumentDB replica, if one exists. You can force a failover when you want to simulate a failure of a primary instance for testing.
    @Sendable
    @inlinable
    public func failoverDBCluster(_ input: FailoverDBClusterMessage, logger: Logger = AWSClient.loggingDisabled) async throws -> FailoverDBClusterResult {
        try await self.client.execute(
            operation: "FailoverDBCluster", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Forces a failover for a cluster. A failover for a cluster promotes one of the Amazon DocumentDB replicas (read-only instances) in the cluster to be the primary instance (the cluster writer). If the primary instance fails, Amazon DocumentDB automatically fails over to an Amazon DocumentDB replica, if one exists. You can force a failover when you want to simulate a failure of a primary instance for testing.
    ///
    /// Parameters:
    ///   - dbClusterIdentifier: A cluster identifier to force a failover for. This parameter is not case sensitive. Constraints:   Must match the identifier of an existing DBCluster.
    ///   - targetDBInstanceIdentifier: The name of the instance to promote to the primary instance. You must specify the instance identifier for an Amazon DocumentDB replica in the cluster. For example, mydbcluster-replica1.
    ///   - logger: Logger use during operation
    @inlinable
    public func failoverDBCluster(
        dbClusterIdentifier: String? = nil,
        targetDBInstanceIdentifier: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> FailoverDBClusterResult {
        let input = FailoverDBClusterMessage(
            dbClusterIdentifier: dbClusterIdentifier, 
            targetDBInstanceIdentifier: targetDBInstanceIdentifier
        )
        return try await self.failoverDBCluster(input, logger: logger)
    }

    /// Promotes the specified secondary DB cluster to be the primary DB cluster in the global cluster when failing over a global cluster occurs. Use this operation to respond to an unplanned event, such as a regional disaster in the primary region.  Failing over can result in a loss of write transaction data that wasn't replicated to the chosen secondary before the failover event occurred.  However, the recovery process that promotes a DB instance on the chosen seconday DB cluster to be the primary writer DB instance guarantees that the data is in a transactionally consistent state.
    @Sendable
    @inlinable
    public func failoverGlobalCluster(_ input: FailoverGlobalClusterMessage, logger: Logger = AWSClient.loggingDisabled) async throws -> FailoverGlobalClusterResult {
        try await self.client.execute(
            operation: "FailoverGlobalCluster", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Promotes the specified secondary DB cluster to be the primary DB cluster in the global cluster when failing over a global cluster occurs. Use this operation to respond to an unplanned event, such as a regional disaster in the primary region.  Failing over can result in a loss of write transaction data that wasn't replicated to the chosen secondary before the failover event occurred.  However, the recovery process that promotes a DB instance on the chosen seconday DB cluster to be the primary writer DB instance guarantees that the data is in a transactionally consistent state.
    ///
    /// Parameters:
    ///   - allowDataLoss: Specifies whether to allow data loss for this global cluster operation. Allowing data loss triggers a global failover operation. If you don't specify AllowDataLoss, the global cluster operation defaults to a switchover. Constraints:   Can't be specified together with the Switchover parameter.
    ///   - globalClusterIdentifier: The identifier of the Amazon DocumentDB global cluster to apply this operation.  The identifier is the unique key assigned by the user when the cluster is created.  In other words, it's the name of the global cluster. Constraints:   Must match the identifier of an existing global cluster.   Minimum length of 1. Maximum length of 255.   Pattern: [A-Za-z][0-9A-Za-z-:._]*
    ///   - switchover: Specifies whether to switch over this global database cluster. Constraints:   Can't be specified together with the AllowDataLoss parameter.
    ///   - targetDbClusterIdentifier: The identifier of the secondary Amazon DocumentDB cluster that you want to promote to the primary for the global cluster.  Use the Amazon Resource Name (ARN) for the identifier so that Amazon DocumentDB can locate the cluster in its Amazon Web Services region. Constraints:   Must match the identifier of an existing secondary cluster.   Minimum length of 1. Maximum length of 255.   Pattern: [A-Za-z][0-9A-Za-z-:._]*
    ///   - logger: Logger use during operation
    @inlinable
    public func failoverGlobalCluster(
        allowDataLoss: Bool? = nil,
        globalClusterIdentifier: String? = nil,
        switchover: Bool? = nil,
        targetDbClusterIdentifier: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> FailoverGlobalClusterResult {
        let input = FailoverGlobalClusterMessage(
            allowDataLoss: allowDataLoss, 
            globalClusterIdentifier: globalClusterIdentifier, 
            switchover: switchover, 
            targetDbClusterIdentifier: targetDbClusterIdentifier
        )
        return try await self.failoverGlobalCluster(input, logger: logger)
    }

    /// Lists all tags on an Amazon DocumentDB resource.
    @Sendable
    @inlinable
    public func listTagsForResource(_ input: ListTagsForResourceMessage, logger: Logger = AWSClient.loggingDisabled) async throws -> TagListMessage {
        try await self.client.execute(
            operation: "ListTagsForResource", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Lists all tags on an Amazon DocumentDB resource.
    ///
    /// Parameters:
    ///   - filters: This parameter is not currently supported.
    ///   - resourceName: The Amazon DocumentDB resource with tags to be listed. This value is an Amazon Resource Name (ARN).
    ///   - logger: Logger use during operation
    @inlinable
    public func listTagsForResource(
        filters: [Filter]? = nil,
        resourceName: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> TagListMessage {
        let input = ListTagsForResourceMessage(
            filters: filters, 
            resourceName: resourceName
        )
        return try await self.listTagsForResource(input, logger: logger)
    }

    /// Modifies a setting for an Amazon DocumentDB cluster. You can change one or more database configuration parameters by specifying these parameters and the new values in the request.
    @Sendable
    @inlinable
    public func modifyDBCluster(_ input: ModifyDBClusterMessage, logger: Logger = AWSClient.loggingDisabled) async throws -> ModifyDBClusterResult {
        try await self.client.execute(
            operation: "ModifyDBCluster", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Modifies a setting for an Amazon DocumentDB cluster. You can change one or more database configuration parameters by specifying these parameters and the new values in the request.
    ///
    /// Parameters:
    ///   - allowMajorVersionUpgrade: A value that indicates whether major version upgrades are allowed. Constraints: You must allow major version upgrades when specifying a value for the EngineVersion parameter that is a different major version than the DB cluster's current version.
    ///   - applyImmediately: A value that specifies whether the changes in this request and any pending changes are asynchronously applied as soon as possible, regardless of the PreferredMaintenanceWindow setting for the cluster. If this parameter is set to false, changes to the cluster are applied during the next maintenance window. The ApplyImmediately parameter affects only the NewDBClusterIdentifier and MasterUserPassword values. If you set this parameter value to false, the changes to the NewDBClusterIdentifier and MasterUserPassword values are applied during the next maintenance window. All other changes are applied immediately, regardless of the value of the ApplyImmediately parameter. Default: false
    ///   - backupRetentionPeriod: The number of days for which automated backups are retained. You must specify a minimum value of 1. Default: 1 Constraints:   Must be a value from 1 to 35.
    ///   - cloudwatchLogsExportConfiguration: The configuration setting for the log types to be enabled for export to Amazon CloudWatch Logs for a specific instance or cluster. The EnableLogTypes and DisableLogTypes arrays determine which logs are exported (or not exported) to CloudWatch Logs.
    ///   - dbClusterIdentifier: The cluster identifier for the cluster that is being modified. This parameter is not case sensitive. Constraints:   Must match the identifier of an existing DBCluster.
    ///   - dbClusterParameterGroupName: The name of the cluster parameter group to use for the cluster.
    ///   - deletionProtection: Specifies whether this cluster can be deleted. If DeletionProtection is enabled, the cluster cannot be deleted unless it is modified and DeletionProtection is disabled. DeletionProtection protects clusters from being accidentally deleted.
    ///   - engineVersion: The version number of the database engine to which you want to upgrade. Changing this parameter results in an outage. The change is applied during the next maintenance window unless ApplyImmediately is enabled. To list all of the available engine versions for Amazon DocumentDB use the following command:  aws docdb describe-db-engine-versions --engine docdb --query "DBEngineVersions[].EngineVersion"
    ///   - masterUserPassword: The password for the master database user. This password can contain any printable ASCII character except forward slash (/), double quote ("), or the "at" symbol (@). Constraints: Must contain from 8 to 100 characters.
    ///   - newDBClusterIdentifier: The new cluster identifier for the cluster when renaming a cluster. This value is stored as a lowercase string. Constraints:   Must contain from 1 to 63 letters, numbers, or hyphens.   The first character must be a letter.   Cannot end with a hyphen or contain two consecutive hyphens.   Example: my-cluster2
    ///   - port: The port number on which the cluster accepts connections. Constraints: Must be a value from 1150 to 65535.  Default: The same port as the original cluster.
    ///   - preferredBackupWindow: The daily time range during which automated backups are created if automated backups are enabled, using the BackupRetentionPeriod parameter.  The default is a 30-minute window selected at random from an 8-hour block of time for each Amazon Web Services Region.  Constraints:   Must be in the format hh24:mi-hh24:mi.   Must be in Universal Coordinated Time (UTC).   Must not conflict with the preferred maintenance window.   Must be at least 30 minutes.
    ///   - preferredMaintenanceWindow: The weekly time range during which system maintenance can occur, in Universal Coordinated Time (UTC). Format: ddd:hh24:mi-ddd:hh24:mi  The default is a 30-minute window selected at random from an 8-hour block of time for each Amazon Web Services Region, occurring on a random day of the week.  Valid days: Mon, Tue, Wed, Thu, Fri, Sat, Sun Constraints: Minimum 30-minute window.
    ///   - storageType: The storage type to associate with the DB cluster. For information on storage types for Amazon DocumentDB clusters, see  Cluster storage configurations in the Amazon DocumentDB Developer Guide. Valid values for storage type - standard | iopt1  Default value is standard
    ///   - vpcSecurityGroupIds: A list of virtual private cloud (VPC) security groups that the cluster will belong to.
    ///   - logger: Logger use during operation
    @inlinable
    public func modifyDBCluster(
        allowMajorVersionUpgrade: Bool? = nil,
        applyImmediately: Bool? = nil,
        backupRetentionPeriod: Int? = nil,
        cloudwatchLogsExportConfiguration: CloudwatchLogsExportConfiguration? = nil,
        dbClusterIdentifier: String? = nil,
        dbClusterParameterGroupName: String? = nil,
        deletionProtection: Bool? = nil,
        engineVersion: String? = nil,
        masterUserPassword: String? = nil,
        newDBClusterIdentifier: String? = nil,
        port: Int? = nil,
        preferredBackupWindow: String? = nil,
        preferredMaintenanceWindow: String? = nil,
        storageType: String? = nil,
        vpcSecurityGroupIds: [String]? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> ModifyDBClusterResult {
        let input = ModifyDBClusterMessage(
            allowMajorVersionUpgrade: allowMajorVersionUpgrade, 
            applyImmediately: applyImmediately, 
            backupRetentionPeriod: backupRetentionPeriod, 
            cloudwatchLogsExportConfiguration: cloudwatchLogsExportConfiguration, 
            dbClusterIdentifier: dbClusterIdentifier, 
            dbClusterParameterGroupName: dbClusterParameterGroupName, 
            deletionProtection: deletionProtection, 
            engineVersion: engineVersion, 
            masterUserPassword: masterUserPassword, 
            newDBClusterIdentifier: newDBClusterIdentifier, 
            port: port, 
            preferredBackupWindow: preferredBackupWindow, 
            preferredMaintenanceWindow: preferredMaintenanceWindow, 
            storageType: storageType, 
            vpcSecurityGroupIds: vpcSecurityGroupIds
        )
        return try await self.modifyDBCluster(input, logger: logger)
    }

    ///  Modifies the parameters of a cluster parameter group. To modify more than one parameter, submit a list of the following: ParameterName, ParameterValue, and ApplyMethod. A maximum of 20 parameters can be modified in a single request.   Changes to dynamic parameters are applied immediately. Changes to static parameters require a reboot or maintenance window  before the change can take effect.   After you create a cluster parameter group, you should wait at least 5 minutes before creating your first cluster that uses that cluster parameter group as the default parameter group. This allows Amazon DocumentDB to fully complete the create action before the parameter group is used as the default for a new cluster. This step is especially important for parameters that are critical when creating the default database for a cluster, such as the character set for the default database defined by the character_set_database parameter.
    @Sendable
    @inlinable
    public func modifyDBClusterParameterGroup(_ input: ModifyDBClusterParameterGroupMessage, logger: Logger = AWSClient.loggingDisabled) async throws -> DBClusterParameterGroupNameMessage {
        try await self.client.execute(
            operation: "ModifyDBClusterParameterGroup", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    ///  Modifies the parameters of a cluster parameter group. To modify more than one parameter, submit a list of the following: ParameterName, ParameterValue, and ApplyMethod. A maximum of 20 parameters can be modified in a single request.   Changes to dynamic parameters are applied immediately. Changes to static parameters require a reboot or maintenance window  before the change can take effect.   After you create a cluster parameter group, you should wait at least 5 minutes before creating your first cluster that uses that cluster parameter group as the default parameter group. This allows Amazon DocumentDB to fully complete the create action before the parameter group is used as the default for a new cluster. This step is especially important for parameters that are critical when creating the default database for a cluster, such as the character set for the default database defined by the character_set_database parameter.
    ///
    /// Parameters:
    ///   - dbClusterParameterGroupName: The name of the cluster parameter group to modify.
    ///   - parameters: A list of parameters in the cluster parameter group to modify.
    ///   - logger: Logger use during operation
    @inlinable
    public func modifyDBClusterParameterGroup(
        dbClusterParameterGroupName: String? = nil,
        parameters: [Parameter]? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> DBClusterParameterGroupNameMessage {
        let input = ModifyDBClusterParameterGroupMessage(
            dbClusterParameterGroupName: dbClusterParameterGroupName, 
            parameters: parameters
        )
        return try await self.modifyDBClusterParameterGroup(input, logger: logger)
    }

    /// Adds an attribute and values to, or removes an attribute and values from, a manual cluster snapshot. To share a manual cluster snapshot with other Amazon Web Services accounts, specify restore as the AttributeName, and use the ValuesToAdd parameter to add a list of IDs of the Amazon Web Services accounts that are authorized to restore the manual cluster snapshot. Use the value all to make the manual cluster snapshot public, which means that it can be copied or restored by all Amazon Web Services accounts. Do not add the all value for any manual cluster snapshots that contain private information that you don't want available to all Amazon Web Services accounts. If a manual cluster snapshot is encrypted, it can be shared, but only by specifying a list of authorized Amazon Web Services account IDs for the ValuesToAdd parameter. You can't use all as a value for that parameter in this case.
    @Sendable
    @inlinable
    public func modifyDBClusterSnapshotAttribute(_ input: ModifyDBClusterSnapshotAttributeMessage, logger: Logger = AWSClient.loggingDisabled) async throws -> ModifyDBClusterSnapshotAttributeResult {
        try await self.client.execute(
            operation: "ModifyDBClusterSnapshotAttribute", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Adds an attribute and values to, or removes an attribute and values from, a manual cluster snapshot. To share a manual cluster snapshot with other Amazon Web Services accounts, specify restore as the AttributeName, and use the ValuesToAdd parameter to add a list of IDs of the Amazon Web Services accounts that are authorized to restore the manual cluster snapshot. Use the value all to make the manual cluster snapshot public, which means that it can be copied or restored by all Amazon Web Services accounts. Do not add the all value for any manual cluster snapshots that contain private information that you don't want available to all Amazon Web Services accounts. If a manual cluster snapshot is encrypted, it can be shared, but only by specifying a list of authorized Amazon Web Services account IDs for the ValuesToAdd parameter. You can't use all as a value for that parameter in this case.
    ///
    /// Parameters:
    ///   - attributeName: The name of the cluster snapshot attribute to modify. To manage authorization for other Amazon Web Services accounts to copy or restore a manual cluster snapshot, set this value to restore.
    ///   - dbClusterSnapshotIdentifier: The identifier for the cluster snapshot to modify the attributes for.
    ///   - valuesToAdd: A list of cluster snapshot attributes to add to the attribute specified by AttributeName. To authorize other Amazon Web Services accounts to copy or restore a manual cluster snapshot, set this list to include one or more Amazon Web Services account IDs. To make the manual cluster snapshot restorable by any Amazon Web Services account, set it to all. Do not add the all value for any manual cluster snapshots that contain private information that you don't want to be available to all Amazon Web Services accounts.
    ///   - valuesToRemove: A list of cluster snapshot attributes to remove from the attribute specified by AttributeName. To remove authorization for other Amazon Web Services accounts to copy or restore a manual cluster snapshot, set this list to include one or more Amazon Web Services account identifiers. To remove authorization for any Amazon Web Services account to copy or restore the cluster snapshot, set it to all . If you specify all, an Amazon Web Services account whose account ID is explicitly added to the restore attribute can still copy or restore a manual cluster snapshot.
    ///   - logger: Logger use during operation
    @inlinable
    public func modifyDBClusterSnapshotAttribute(
        attributeName: String? = nil,
        dbClusterSnapshotIdentifier: String? = nil,
        valuesToAdd: [String]? = nil,
        valuesToRemove: [String]? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> ModifyDBClusterSnapshotAttributeResult {
        let input = ModifyDBClusterSnapshotAttributeMessage(
            attributeName: attributeName, 
            dbClusterSnapshotIdentifier: dbClusterSnapshotIdentifier, 
            valuesToAdd: valuesToAdd, 
            valuesToRemove: valuesToRemove
        )
        return try await self.modifyDBClusterSnapshotAttribute(input, logger: logger)
    }

    /// Modifies settings for an instance. You can change one or more database configuration parameters by specifying these parameters and the new values in the request.
    @Sendable
    @inlinable
    public func modifyDBInstance(_ input: ModifyDBInstanceMessage, logger: Logger = AWSClient.loggingDisabled) async throws -> ModifyDBInstanceResult {
        try await self.client.execute(
            operation: "ModifyDBInstance", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Modifies settings for an instance. You can change one or more database configuration parameters by specifying these parameters and the new values in the request.
    ///
    /// Parameters:
    ///   - applyImmediately: Specifies whether the modifications in this request and any pending modifications are asynchronously applied as soon as possible, regardless of the PreferredMaintenanceWindow setting for the instance.  If this parameter is set to false, changes to the instance are applied during the next maintenance window. Some parameter changes can cause an outage and are applied on the next reboot. Default: false
    ///   - autoMinorVersionUpgrade: This parameter does not apply to Amazon DocumentDB. Amazon DocumentDB does not perform minor version upgrades regardless of the value set.
    ///   - caCertificateIdentifier: Indicates the certificate that needs to be associated with the instance.
    ///   - certificateRotationRestart: Specifies whether the DB instance is restarted when you rotate your  SSL/TLS certificate. By default, the DB instance is restarted when you rotate your SSL/TLS certificate. The certificate  is not updated until the DB instance is restarted.  Set this parameter only if you are not using SSL/TLS to connect to the DB instance.  If you are using SSL/TLS to connect to the DB instance, see Updating Your Amazon DocumentDB TLS  Certificates and   Encrypting Data in Transit in the Amazon DocumentDB Developer  Guide.
    ///   - copyTagsToSnapshot: A value that indicates whether to copy all tags from the DB instance to snapshots of the DB instance. By default, tags are not copied.
    ///   - dbInstanceClass: The new compute and memory capacity of the instance; for example, db.r5.large. Not all instance classes are available in all Amazon Web Services Regions.  If you modify the instance class, an outage occurs during the change. The change is applied during the next maintenance window, unless ApplyImmediately is specified as true for this request.  Default: Uses existing setting.
    ///   - dbInstanceIdentifier: The instance identifier. This value is stored as a lowercase string. Constraints:   Must match the identifier of an existing DBInstance.
    ///   - enablePerformanceInsights: A value that indicates whether to enable Performance Insights for the DB Instance. For more information, see Using Amazon Performance Insights.
    ///   - newDBInstanceIdentifier:  The new instance identifier for the instance when renaming an instance. When you change the instance identifier, an instance reboot occurs immediately if you set Apply Immediately to true. It occurs during the next maintenance window if you set Apply Immediately to false. This value is stored as a lowercase string.  Constraints:   Must contain from 1 to 63 letters, numbers, or hyphens.   The first character must be a letter.   Cannot end with a hyphen or contain two consecutive hyphens.   Example: mydbinstance
    ///   - performanceInsightsKMSKeyId: The KMS key identifier for encryption of Performance Insights data. The KMS key identifier is the key ARN, key ID, alias ARN, or alias name for the KMS key. If you do not specify a value for PerformanceInsightsKMSKeyId, then Amazon DocumentDB uses your default KMS key. There is a default KMS key for your Amazon Web Services account. Your Amazon Web Services account has a different default KMS key for each Amazon Web Services region.
    ///   - preferredMaintenanceWindow: The weekly time range (in UTC) during which system maintenance can occur, which might result in an outage. Changing this parameter doesn't result in an outage except in the following situation, and the change is asynchronously applied as soon as possible. If there are pending actions that cause a reboot, and the maintenance window is changed to include the current time, changing this parameter causes a reboot of the instance. If you are moving this window to the current time, there must be at least 30 minutes between the current time and end of the window to ensure that pending changes are applied. Default: Uses existing setting. Format: ddd:hh24:mi-ddd:hh24:mi  Valid days: Mon, Tue, Wed, Thu, Fri, Sat, Sun Constraints: Must be at least 30 minutes.
    ///   - promotionTier: A value that specifies the order in which an Amazon DocumentDB replica is promoted to the primary instance after a failure of the existing primary instance. Default: 1 Valid values: 0-15
    ///   - logger: Logger use during operation
    @inlinable
    public func modifyDBInstance(
        applyImmediately: Bool? = nil,
        autoMinorVersionUpgrade: Bool? = nil,
        caCertificateIdentifier: String? = nil,
        certificateRotationRestart: Bool? = nil,
        copyTagsToSnapshot: Bool? = nil,
        dbInstanceClass: String? = nil,
        dbInstanceIdentifier: String? = nil,
        enablePerformanceInsights: Bool? = nil,
        newDBInstanceIdentifier: String? = nil,
        performanceInsightsKMSKeyId: String? = nil,
        preferredMaintenanceWindow: String? = nil,
        promotionTier: Int? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> ModifyDBInstanceResult {
        let input = ModifyDBInstanceMessage(
            applyImmediately: applyImmediately, 
            autoMinorVersionUpgrade: autoMinorVersionUpgrade, 
            caCertificateIdentifier: caCertificateIdentifier, 
            certificateRotationRestart: certificateRotationRestart, 
            copyTagsToSnapshot: copyTagsToSnapshot, 
            dbInstanceClass: dbInstanceClass, 
            dbInstanceIdentifier: dbInstanceIdentifier, 
            enablePerformanceInsights: enablePerformanceInsights, 
            newDBInstanceIdentifier: newDBInstanceIdentifier, 
            performanceInsightsKMSKeyId: performanceInsightsKMSKeyId, 
            preferredMaintenanceWindow: preferredMaintenanceWindow, 
            promotionTier: promotionTier
        )
        return try await self.modifyDBInstance(input, logger: logger)
    }

    /// Modifies an existing subnet group. subnet groups must contain at least one subnet in at least two Availability Zones in the Amazon Web Services Region.
    @Sendable
    @inlinable
    public func modifyDBSubnetGroup(_ input: ModifyDBSubnetGroupMessage, logger: Logger = AWSClient.loggingDisabled) async throws -> ModifyDBSubnetGroupResult {
        try await self.client.execute(
            operation: "ModifyDBSubnetGroup", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Modifies an existing subnet group. subnet groups must contain at least one subnet in at least two Availability Zones in the Amazon Web Services Region.
    ///
    /// Parameters:
    ///   - dbSubnetGroupDescription: The description for the subnet group.
    ///   - dbSubnetGroupName: The name for the subnet group. This value is stored as a lowercase string. You can't modify the default subnet group.  Constraints: Must match the name of an existing DBSubnetGroup. Must not be default. Example: mySubnetgroup
    ///   - subnetIds: The Amazon EC2 subnet IDs for the subnet group.
    ///   - logger: Logger use during operation
    @inlinable
    public func modifyDBSubnetGroup(
        dbSubnetGroupDescription: String? = nil,
        dbSubnetGroupName: String? = nil,
        subnetIds: [String]? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> ModifyDBSubnetGroupResult {
        let input = ModifyDBSubnetGroupMessage(
            dbSubnetGroupDescription: dbSubnetGroupDescription, 
            dbSubnetGroupName: dbSubnetGroupName, 
            subnetIds: subnetIds
        )
        return try await self.modifyDBSubnetGroup(input, logger: logger)
    }

    /// Modifies an existing Amazon DocumentDB event notification subscription.
    @Sendable
    @inlinable
    public func modifyEventSubscription(_ input: ModifyEventSubscriptionMessage, logger: Logger = AWSClient.loggingDisabled) async throws -> ModifyEventSubscriptionResult {
        try await self.client.execute(
            operation: "ModifyEventSubscription", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Modifies an existing Amazon DocumentDB event notification subscription.
    ///
    /// Parameters:
    ///   - enabled:  A Boolean value; set to true to activate the subscription.
    ///   - eventCategories:  A list of event categories for a SourceType that you want to subscribe to.
    ///   - snsTopicArn: The Amazon Resource Name (ARN) of the SNS topic created for event notification. The ARN is created by Amazon SNS when you create a topic and subscribe to it.
    ///   - sourceType: The type of source that is generating the events. For example, if you want to be notified of events generated by an instance, set this parameter to db-instance. If this value is not specified, all events are returned. Valid values: db-instance, db-parameter-group, db-security-group
    ///   - subscriptionName: The name of the Amazon DocumentDB event notification subscription.
    ///   - logger: Logger use during operation
    @inlinable
    public func modifyEventSubscription(
        enabled: Bool? = nil,
        eventCategories: [String]? = nil,
        snsTopicArn: String? = nil,
        sourceType: String? = nil,
        subscriptionName: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> ModifyEventSubscriptionResult {
        let input = ModifyEventSubscriptionMessage(
            enabled: enabled, 
            eventCategories: eventCategories, 
            snsTopicArn: snsTopicArn, 
            sourceType: sourceType, 
            subscriptionName: subscriptionName
        )
        return try await self.modifyEventSubscription(input, logger: logger)
    }

    /// Modify a setting for an Amazon DocumentDB global cluster. You can change one or more configuration parameters (for example: deletion protection), or the global cluster identifier by specifying these parameters and the new values in the request.  This action only applies to Amazon DocumentDB clusters.
    @Sendable
    @inlinable
    public func modifyGlobalCluster(_ input: ModifyGlobalClusterMessage, logger: Logger = AWSClient.loggingDisabled) async throws -> ModifyGlobalClusterResult {
        try await self.client.execute(
            operation: "ModifyGlobalCluster", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Modify a setting for an Amazon DocumentDB global cluster. You can change one or more configuration parameters (for example: deletion protection), or the global cluster identifier by specifying these parameters and the new values in the request.  This action only applies to Amazon DocumentDB clusters.
    ///
    /// Parameters:
    ///   - deletionProtection: Indicates if the global cluster has deletion protection enabled. The global cluster can't be deleted when deletion protection is enabled.
    ///   - globalClusterIdentifier: The identifier for the global cluster being modified. This parameter isn't case-sensitive. Constraints:   Must match the identifier of an existing global cluster.
    ///   - newGlobalClusterIdentifier: The new identifier for a global cluster when you modify a global cluster. This value is stored as a lowercase string.   Must contain from 1 to 63 letters, numbers, or hyphens The first character must be a letter Can't end with a hyphen or contain two consecutive hyphens   Example: my-cluster2
    ///   - logger: Logger use during operation
    @inlinable
    public func modifyGlobalCluster(
        deletionProtection: Bool? = nil,
        globalClusterIdentifier: String? = nil,
        newGlobalClusterIdentifier: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> ModifyGlobalClusterResult {
        let input = ModifyGlobalClusterMessage(
            deletionProtection: deletionProtection, 
            globalClusterIdentifier: globalClusterIdentifier, 
            newGlobalClusterIdentifier: newGlobalClusterIdentifier
        )
        return try await self.modifyGlobalCluster(input, logger: logger)
    }

    /// You might need to reboot your instance, usually for maintenance reasons. For example, if you make certain changes, or if you change the cluster parameter group that is associated with the instance, you must reboot the instance for the changes to take effect.  Rebooting an instance restarts the database engine service. Rebooting an instance results in a momentary outage, during which the instance status is set to rebooting.
    @Sendable
    @inlinable
    public func rebootDBInstance(_ input: RebootDBInstanceMessage, logger: Logger = AWSClient.loggingDisabled) async throws -> RebootDBInstanceResult {
        try await self.client.execute(
            operation: "RebootDBInstance", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// You might need to reboot your instance, usually for maintenance reasons. For example, if you make certain changes, or if you change the cluster parameter group that is associated with the instance, you must reboot the instance for the changes to take effect.  Rebooting an instance restarts the database engine service. Rebooting an instance results in a momentary outage, during which the instance status is set to rebooting.
    ///
    /// Parameters:
    ///   - dbInstanceIdentifier: The instance identifier. This parameter is stored as a lowercase string. Constraints:   Must match the identifier of an existing DBInstance.
    ///   - forceFailover:  When true, the reboot is conducted through a Multi-AZ failover.  Constraint: You can't specify true if the instance is not configured for Multi-AZ.
    ///   - logger: Logger use during operation
    @inlinable
    public func rebootDBInstance(
        dbInstanceIdentifier: String? = nil,
        forceFailover: Bool? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> RebootDBInstanceResult {
        let input = RebootDBInstanceMessage(
            dbInstanceIdentifier: dbInstanceIdentifier, 
            forceFailover: forceFailover
        )
        return try await self.rebootDBInstance(input, logger: logger)
    }

    /// Detaches an Amazon DocumentDB secondary cluster from a global cluster. The cluster becomes a standalone cluster with read-write capability instead of being read-only and receiving data from a primary in a different region.   This action only applies to Amazon DocumentDB clusters.
    @Sendable
    @inlinable
    public func removeFromGlobalCluster(_ input: RemoveFromGlobalClusterMessage, logger: Logger = AWSClient.loggingDisabled) async throws -> RemoveFromGlobalClusterResult {
        try await self.client.execute(
            operation: "RemoveFromGlobalCluster", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Detaches an Amazon DocumentDB secondary cluster from a global cluster. The cluster becomes a standalone cluster with read-write capability instead of being read-only and receiving data from a primary in a different region.   This action only applies to Amazon DocumentDB clusters.
    ///
    /// Parameters:
    ///   - dbClusterIdentifier: The Amazon Resource Name (ARN) identifying the cluster that was detached from the Amazon DocumentDB global cluster.
    ///   - globalClusterIdentifier: The cluster identifier to detach from the Amazon DocumentDB global cluster.
    ///   - logger: Logger use during operation
    @inlinable
    public func removeFromGlobalCluster(
        dbClusterIdentifier: String? = nil,
        globalClusterIdentifier: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> RemoveFromGlobalClusterResult {
        let input = RemoveFromGlobalClusterMessage(
            dbClusterIdentifier: dbClusterIdentifier, 
            globalClusterIdentifier: globalClusterIdentifier
        )
        return try await self.removeFromGlobalCluster(input, logger: logger)
    }

    /// Removes a source identifier from an existing Amazon DocumentDB event notification subscription.
    @Sendable
    @inlinable
    public func removeSourceIdentifierFromSubscription(_ input: RemoveSourceIdentifierFromSubscriptionMessage, logger: Logger = AWSClient.loggingDisabled) async throws -> RemoveSourceIdentifierFromSubscriptionResult {
        try await self.client.execute(
            operation: "RemoveSourceIdentifierFromSubscription", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Removes a source identifier from an existing Amazon DocumentDB event notification subscription.
    ///
    /// Parameters:
    ///   - sourceIdentifier:  The source identifier to be removed from the subscription, such as the instance identifier for an instance, or the name of a security group.
    ///   - subscriptionName: The name of the Amazon DocumentDB event notification subscription that you want to remove a source identifier from.
    ///   - logger: Logger use during operation
    @inlinable
    public func removeSourceIdentifierFromSubscription(
        sourceIdentifier: String? = nil,
        subscriptionName: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> RemoveSourceIdentifierFromSubscriptionResult {
        let input = RemoveSourceIdentifierFromSubscriptionMessage(
            sourceIdentifier: sourceIdentifier, 
            subscriptionName: subscriptionName
        )
        return try await self.removeSourceIdentifierFromSubscription(input, logger: logger)
    }

    /// Removes metadata tags from an Amazon DocumentDB resource.
    @Sendable
    @inlinable
    public func removeTagsFromResource(_ input: RemoveTagsFromResourceMessage, logger: Logger = AWSClient.loggingDisabled) async throws {
        try await self.client.execute(
            operation: "RemoveTagsFromResource", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Removes metadata tags from an Amazon DocumentDB resource.
    ///
    /// Parameters:
    ///   - resourceName: The Amazon DocumentDB resource that the tags are removed from. This value is an Amazon Resource Name (ARN).
    ///   - tagKeys: The tag key (name) of the tag to be removed.
    ///   - logger: Logger use during operation
    @inlinable
    public func removeTagsFromResource(
        resourceName: String? = nil,
        tagKeys: [String]? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws {
        let input = RemoveTagsFromResourceMessage(
            resourceName: resourceName, 
            tagKeys: tagKeys
        )
        return try await self.removeTagsFromResource(input, logger: logger)
    }

    ///  Modifies the parameters of a cluster parameter group to the default value. To reset specific parameters, submit a list of the following: ParameterName and ApplyMethod. To reset the entire cluster parameter group, specify the DBClusterParameterGroupName and ResetAllParameters parameters.  When you reset the entire group, dynamic parameters are updated immediately and static parameters are set to pending-reboot to take effect on the next DB instance reboot.
    @Sendable
    @inlinable
    public func resetDBClusterParameterGroup(_ input: ResetDBClusterParameterGroupMessage, logger: Logger = AWSClient.loggingDisabled) async throws -> DBClusterParameterGroupNameMessage {
        try await self.client.execute(
            operation: "ResetDBClusterParameterGroup", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    ///  Modifies the parameters of a cluster parameter group to the default value. To reset specific parameters, submit a list of the following: ParameterName and ApplyMethod. To reset the entire cluster parameter group, specify the DBClusterParameterGroupName and ResetAllParameters parameters.  When you reset the entire group, dynamic parameters are updated immediately and static parameters are set to pending-reboot to take effect on the next DB instance reboot.
    ///
    /// Parameters:
    ///   - dbClusterParameterGroupName: The name of the cluster parameter group to reset.
    ///   - parameters: A list of parameter names in the cluster parameter group to reset to the default values. You can't use this parameter if the ResetAllParameters parameter is set to true.
    ///   - resetAllParameters: A value that is set to true to reset all parameters in the cluster parameter group to their default values, and false otherwise. You can't use this parameter if there is a list of parameter names specified for the Parameters parameter.
    ///   - logger: Logger use during operation
    @inlinable
    public func resetDBClusterParameterGroup(
        dbClusterParameterGroupName: String? = nil,
        parameters: [Parameter]? = nil,
        resetAllParameters: Bool? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> DBClusterParameterGroupNameMessage {
        let input = ResetDBClusterParameterGroupMessage(
            dbClusterParameterGroupName: dbClusterParameterGroupName, 
            parameters: parameters, 
            resetAllParameters: resetAllParameters
        )
        return try await self.resetDBClusterParameterGroup(input, logger: logger)
    }

    /// Creates a new cluster from a snapshot or cluster snapshot. If a snapshot is specified, the target cluster is created from the source DB snapshot with a default configuration and default security group. If a cluster snapshot is specified, the target cluster is created from the source cluster restore point with the same configuration as the original source DB cluster, except that the new cluster is created with the default security group.
    @Sendable
    @inlinable
    public func restoreDBClusterFromSnapshot(_ input: RestoreDBClusterFromSnapshotMessage, logger: Logger = AWSClient.loggingDisabled) async throws -> RestoreDBClusterFromSnapshotResult {
        try await self.client.execute(
            operation: "RestoreDBClusterFromSnapshot", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Creates a new cluster from a snapshot or cluster snapshot. If a snapshot is specified, the target cluster is created from the source DB snapshot with a default configuration and default security group. If a cluster snapshot is specified, the target cluster is created from the source cluster restore point with the same configuration as the original source DB cluster, except that the new cluster is created with the default security group.
    ///
    /// Parameters:
    ///   - availabilityZones: Provides the list of Amazon EC2 Availability Zones that instances in the restored DB cluster can be created in.
    ///   - dbClusterIdentifier: The name of the cluster to create from the snapshot or cluster snapshot. This parameter isn't case sensitive. Constraints:   Must contain from 1 to 63 letters, numbers, or hyphens.   The first character must be a letter.   Cannot end with a hyphen or contain two consecutive hyphens.   Example: my-snapshot-id
    ///   - dbClusterParameterGroupName: The name of the DB cluster parameter group to associate with this DB cluster.  Type: String.         Required: No. If this argument is omitted, the default DB cluster parameter group is used. If supplied, must match the name of an existing default DB cluster parameter group. The string must consist of from 1 to 255 letters, numbers or hyphens. Its first character must be a letter, and it cannot end with a hyphen or contain two consecutive hyphens.
    ///   - dbSubnetGroupName: The name of the subnet group to use for the new cluster. Constraints: If provided, must match the name of an existing DBSubnetGroup. Example: mySubnetgroup
    ///   - deletionProtection: Specifies whether this cluster can be deleted. If DeletionProtection is enabled, the cluster cannot be deleted unless it is modified and DeletionProtection is disabled. DeletionProtection protects clusters from being accidentally deleted.
    ///   - enableCloudwatchLogsExports: A list of log types that must be enabled for exporting to Amazon CloudWatch Logs.
    ///   - engine: The database engine to use for the new cluster. Default: The same as source. Constraint: Must be compatible with the engine of the source.
    ///   - engineVersion: The version of the database engine to use for the new cluster.
    ///   - kmsKeyId: The KMS key identifier to use when restoring an encrypted cluster from a DB snapshot or cluster snapshot. The KMS key identifier is the Amazon Resource Name (ARN) for the KMS encryption key. If you are restoring a cluster with the same Amazon Web Services account that owns the KMS encryption key used to encrypt the new cluster, then you can use the KMS key alias instead of the ARN for the KMS encryption key. If you do not specify a value for the KmsKeyId parameter, then the following occurs:   If the snapshot or cluster snapshot in SnapshotIdentifier is encrypted, then the restored cluster is encrypted using the KMS key that was used to encrypt the snapshot or the cluster snapshot.   If the snapshot or the cluster snapshot in SnapshotIdentifier is not encrypted, then the restored DB cluster is not encrypted.
    ///   - port: The port number on which the new cluster accepts connections. Constraints: Must be a value from 1150 to 65535. Default: The same port as the original cluster.
    ///   - snapshotIdentifier: The identifier for the snapshot or cluster snapshot to restore from. You can use either the name or the Amazon Resource Name (ARN) to specify a cluster snapshot. However, you can use only the ARN to specify a snapshot. Constraints:   Must match the identifier of an existing snapshot.
    ///   - storageType: The storage type to associate with the DB cluster. For information on storage types for Amazon DocumentDB clusters, see  Cluster storage configurations in the Amazon DocumentDB Developer Guide. Valid values for storage type - standard | iopt1  Default value is standard
    ///   - tags: The tags to be assigned to the restored cluster.
    ///   - vpcSecurityGroupIds: A list of virtual private cloud (VPC) security groups that the new cluster will belong to.
    ///   - logger: Logger use during operation
    @inlinable
    public func restoreDBClusterFromSnapshot(
        availabilityZones: [String]? = nil,
        dbClusterIdentifier: String? = nil,
        dbClusterParameterGroupName: String? = nil,
        dbSubnetGroupName: String? = nil,
        deletionProtection: Bool? = nil,
        enableCloudwatchLogsExports: [String]? = nil,
        engine: String? = nil,
        engineVersion: String? = nil,
        kmsKeyId: String? = nil,
        port: Int? = nil,
        snapshotIdentifier: String? = nil,
        storageType: String? = nil,
        tags: [Tag]? = nil,
        vpcSecurityGroupIds: [String]? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> RestoreDBClusterFromSnapshotResult {
        let input = RestoreDBClusterFromSnapshotMessage(
            availabilityZones: availabilityZones, 
            dbClusterIdentifier: dbClusterIdentifier, 
            dbClusterParameterGroupName: dbClusterParameterGroupName, 
            dbSubnetGroupName: dbSubnetGroupName, 
            deletionProtection: deletionProtection, 
            enableCloudwatchLogsExports: enableCloudwatchLogsExports, 
            engine: engine, 
            engineVersion: engineVersion, 
            kmsKeyId: kmsKeyId, 
            port: port, 
            snapshotIdentifier: snapshotIdentifier, 
            storageType: storageType, 
            tags: tags, 
            vpcSecurityGroupIds: vpcSecurityGroupIds
        )
        return try await self.restoreDBClusterFromSnapshot(input, logger: logger)
    }

    /// Restores a cluster to an arbitrary point in time. Users can restore to any point in time before LatestRestorableTime for up to BackupRetentionPeriod days. The target cluster is created from the source cluster with the same configuration as the original cluster, except that the new cluster is created with the default security group.
    @Sendable
    @inlinable
    public func restoreDBClusterToPointInTime(_ input: RestoreDBClusterToPointInTimeMessage, logger: Logger = AWSClient.loggingDisabled) async throws -> RestoreDBClusterToPointInTimeResult {
        try await self.client.execute(
            operation: "RestoreDBClusterToPointInTime", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Restores a cluster to an arbitrary point in time. Users can restore to any point in time before LatestRestorableTime for up to BackupRetentionPeriod days. The target cluster is created from the source cluster with the same configuration as the original cluster, except that the new cluster is created with the default security group.
    ///
    /// Parameters:
    ///   - dbClusterIdentifier: The name of the new cluster to be created. Constraints:   Must contain from 1 to 63 letters, numbers, or hyphens.   The first character must be a letter.   Cannot end with a hyphen or contain two consecutive hyphens.
    ///   - dbSubnetGroupName: The subnet group name to use for the new cluster. Constraints: If provided, must match the name of an existing DBSubnetGroup. Example: mySubnetgroup
    ///   - deletionProtection: Specifies whether this cluster can be deleted. If DeletionProtection is enabled, the cluster cannot be deleted unless it is modified and DeletionProtection is disabled. DeletionProtection protects clusters from being accidentally deleted.
    ///   - enableCloudwatchLogsExports: A list of log types that must be enabled for exporting to Amazon CloudWatch Logs.
    ///   - kmsKeyId: The KMS key identifier to use when restoring an encrypted cluster from an encrypted cluster. The KMS key identifier is the Amazon Resource Name (ARN) for the KMS encryption key. If you are restoring a cluster with the same Amazon Web Services account that owns the KMS encryption key used to encrypt the new cluster, then you can use the KMS key alias instead of the ARN for the KMS encryption key. You can restore to a new cluster and encrypt the new cluster with an KMS key that is different from the KMS key used to encrypt the source cluster. The new DB cluster is encrypted with the KMS key identified by the KmsKeyId parameter. If you do not specify a value for the KmsKeyId parameter, then the following occurs:   If the cluster is encrypted, then the restored cluster is encrypted using the KMS key that was used to encrypt the source cluster.   If the cluster is not encrypted, then the restored cluster is not encrypted.   If DBClusterIdentifier refers to a cluster that is not encrypted, then the restore request is rejected.
    ///   - port: The port number on which the new cluster accepts connections. Constraints: Must be a value from 1150 to 65535.  Default: The default port for the engine.
    ///   - restoreToTime: The date and time to restore the cluster to. Valid values: A time in Universal Coordinated Time (UTC) format. Constraints:   Must be before the latest restorable time for the instance.   Must be specified if the UseLatestRestorableTime parameter is not provided.   Cannot be specified if the UseLatestRestorableTime parameter is true.   Cannot be specified if the RestoreType parameter is copy-on-write.   Example: 2015-03-07T23:45:00Z
    ///   - restoreType: The type of restore to be performed. You can specify one of the following values:    full-copy - The new DB cluster is restored as a full copy of the source DB cluster.    copy-on-write - The new DB cluster is restored as a clone of the source DB cluster.   Constraints: You can't specify copy-on-write if the engine version of the source DB cluster is earlier than 1.11. If you don't specify a RestoreType value, then the new DB cluster is restored as a full copy of the source DB cluster.
    ///   - sourceDBClusterIdentifier: The identifier of the source cluster from which to restore. Constraints:   Must match the identifier of an existing DBCluster.
    ///   - storageType: The storage type to associate with the DB cluster. For information on storage types for Amazon DocumentDB clusters, see  Cluster storage configurations in the Amazon DocumentDB Developer Guide. Valid values for storage type - standard | iopt1  Default value is standard
    ///   - tags: The tags to be assigned to the restored cluster.
    ///   - useLatestRestorableTime: A value that is set to true to restore the cluster to the latest restorable backup time, and false otherwise.  Default: false  Constraints: Cannot be specified if the RestoreToTime parameter is provided.
    ///   - vpcSecurityGroupIds: A list of VPC security groups that the new cluster belongs to.
    ///   - logger: Logger use during operation
    @inlinable
    public func restoreDBClusterToPointInTime(
        dbClusterIdentifier: String? = nil,
        dbSubnetGroupName: String? = nil,
        deletionProtection: Bool? = nil,
        enableCloudwatchLogsExports: [String]? = nil,
        kmsKeyId: String? = nil,
        port: Int? = nil,
        restoreToTime: Date? = nil,
        restoreType: String? = nil,
        sourceDBClusterIdentifier: String? = nil,
        storageType: String? = nil,
        tags: [Tag]? = nil,
        useLatestRestorableTime: Bool? = nil,
        vpcSecurityGroupIds: [String]? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> RestoreDBClusterToPointInTimeResult {
        let input = RestoreDBClusterToPointInTimeMessage(
            dbClusterIdentifier: dbClusterIdentifier, 
            dbSubnetGroupName: dbSubnetGroupName, 
            deletionProtection: deletionProtection, 
            enableCloudwatchLogsExports: enableCloudwatchLogsExports, 
            kmsKeyId: kmsKeyId, 
            port: port, 
            restoreToTime: restoreToTime, 
            restoreType: restoreType, 
            sourceDBClusterIdentifier: sourceDBClusterIdentifier, 
            storageType: storageType, 
            tags: tags, 
            useLatestRestorableTime: useLatestRestorableTime, 
            vpcSecurityGroupIds: vpcSecurityGroupIds
        )
        return try await self.restoreDBClusterToPointInTime(input, logger: logger)
    }

    /// Restarts the stopped cluster that is specified by DBClusterIdentifier. For more information, see Stopping and Starting an Amazon DocumentDB Cluster.
    @Sendable
    @inlinable
    public func startDBCluster(_ input: StartDBClusterMessage, logger: Logger = AWSClient.loggingDisabled) async throws -> StartDBClusterResult {
        try await self.client.execute(
            operation: "StartDBCluster", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Restarts the stopped cluster that is specified by DBClusterIdentifier. For more information, see Stopping and Starting an Amazon DocumentDB Cluster.
    ///
    /// Parameters:
    ///   - dbClusterIdentifier: The identifier of the cluster to restart. Example: docdb-2019-05-28-15-24-52
    ///   - logger: Logger use during operation
    @inlinable
    public func startDBCluster(
        dbClusterIdentifier: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> StartDBClusterResult {
        let input = StartDBClusterMessage(
            dbClusterIdentifier: dbClusterIdentifier
        )
        return try await self.startDBCluster(input, logger: logger)
    }

    /// Stops the running cluster that is specified by DBClusterIdentifier. The cluster must be in the available state. For more information, see Stopping and Starting an Amazon DocumentDB Cluster.
    @Sendable
    @inlinable
    public func stopDBCluster(_ input: StopDBClusterMessage, logger: Logger = AWSClient.loggingDisabled) async throws -> StopDBClusterResult {
        try await self.client.execute(
            operation: "StopDBCluster", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Stops the running cluster that is specified by DBClusterIdentifier. The cluster must be in the available state. For more information, see Stopping and Starting an Amazon DocumentDB Cluster.
    ///
    /// Parameters:
    ///   - dbClusterIdentifier: The identifier of the cluster to stop. Example: docdb-2019-05-28-15-24-52
    ///   - logger: Logger use during operation
    @inlinable
    public func stopDBCluster(
        dbClusterIdentifier: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> StopDBClusterResult {
        let input = StopDBClusterMessage(
            dbClusterIdentifier: dbClusterIdentifier
        )
        return try await self.stopDBCluster(input, logger: logger)
    }

    /// Switches over the specified secondary Amazon DocumentDB cluster to be the new primary Amazon DocumentDB cluster in the global database cluster.
    @Sendable
    @inlinable
    public func switchoverGlobalCluster(_ input: SwitchoverGlobalClusterMessage, logger: Logger = AWSClient.loggingDisabled) async throws -> SwitchoverGlobalClusterResult {
        try await self.client.execute(
            operation: "SwitchoverGlobalCluster", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Switches over the specified secondary Amazon DocumentDB cluster to be the new primary Amazon DocumentDB cluster in the global database cluster.
    ///
    /// Parameters:
    ///   - globalClusterIdentifier: The identifier of the Amazon DocumentDB global database cluster to switch over.  The identifier is the unique key assigned by the user when the cluster is created.  In other words, it's the name of the global cluster. This parameter isn’t case-sensitive. Constraints:   Must match the identifier of an existing global cluster (Amazon DocumentDB global database).   Minimum length of 1. Maximum length of 255.   Pattern: [A-Za-z][0-9A-Za-z-:._]*
    ///   - targetDbClusterIdentifier: The identifier of the secondary Amazon DocumentDB cluster to promote to the new primary for the global database cluster.  Use the Amazon Resource Name (ARN) for the identifier so that Amazon DocumentDB can locate the cluster in its Amazon Web Services region. Constraints:   Must match the identifier of an existing secondary cluster.   Minimum length of 1. Maximum length of 255.   Pattern: [A-Za-z][0-9A-Za-z-:._]*
    ///   - logger: Logger use during operation
    @inlinable
    public func switchoverGlobalCluster(
        globalClusterIdentifier: String? = nil,
        targetDbClusterIdentifier: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> SwitchoverGlobalClusterResult {
        let input = SwitchoverGlobalClusterMessage(
            globalClusterIdentifier: globalClusterIdentifier, 
            targetDbClusterIdentifier: targetDbClusterIdentifier
        )
        return try await self.switchoverGlobalCluster(input, logger: logger)
    }
}

extension DocDB {
    /// Initializer required by `AWSService.with(middlewares:timeout:byteBufferAllocator:options)`. You are not able to use this initializer directly as there are not public
    /// initializers for `AWSServiceConfig.Patch`. Please use `AWSService.with(middlewares:timeout:byteBufferAllocator:options)` instead.
    public init(from: DocDB, patch: AWSServiceConfig.Patch) {
        self.client = from.client
        self.config = from.config.with(patch: patch)
    }
}

// MARK: Paginators

@available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
extension DocDB {
    /// Return PaginatorSequence for operation ``describeCertificates(_:logger:)``.
    ///
    /// - Parameters:
    ///   - input: Input for operation
    ///   - logger: Logger used for logging
    @inlinable
    public func describeCertificatesPaginator(
        _ input: DescribeCertificatesMessage,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<DescribeCertificatesMessage, CertificateMessage> {
        return .init(
            input: input,
            command: self.describeCertificates,
            inputKey: \DescribeCertificatesMessage.marker,
            outputKey: \CertificateMessage.marker,
            logger: logger
        )
    }
    /// Return PaginatorSequence for operation ``describeCertificates(_:logger:)``.
    ///
    /// - Parameters:
    ///   - certificateIdentifier: The user-supplied certificate identifier. If this parameter is specified, information for only the specified certificate is returned. If this parameter is omitted, a list of up to MaxRecords certificates is returned. This parameter is not case sensitive. Constraints   Must match an existing CertificateIdentifier.
    ///   - filters: This parameter is not currently supported.
    ///   - maxRecords: The maximum number of records to include in the response. If more records exist than the specified MaxRecords value, a pagination token called a marker is included in the response so that the remaining results can be retrieved. Default: 100 Constraints:   Minimum: 20   Maximum: 100
    ///   - logger: Logger used for logging
    @inlinable
    public func describeCertificatesPaginator(
        certificateIdentifier: String? = nil,
        filters: [Filter]? = nil,
        maxRecords: Int? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) -> AWSClient.PaginatorSequence<DescribeCertificatesMessage, CertificateMessage> {
        let input = DescribeCertificatesMessage(
            certificateIdentifier: certificateIdentifier, 
            filters: filters, 
            maxRecords: maxRecords
        )
        return self.describeCertificatesPaginator(input, logger: logger)
    }

    /// Return PaginatorSequence for operation ``describeDBClusterParameterGroups(_:logger:)``.
    ///
    /// - Parameters:
    ///   - input: Input for operation
    ///   - logger: Logger used for logging
    @inlinable
    public func describeDBClusterParameterGroupsPaginator(
        _ input: DescribeDBClusterParameterGroupsMessage,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<DescribeDBClusterParameterGroupsMessage, DBClusterParameterGroupsMessage> {
        return .init(
            input: input,
            command: self.describeDBClusterParameterGroups,
            inputKey: \DescribeDBClusterParameterGroupsMessage.marker,
            outputKey: \DBClusterParameterGroupsMessage.marker,
            logger: logger
        )
    }
    /// Return PaginatorSequence for operation ``describeDBClusterParameterGroups(_:logger:)``.
    ///
    /// - Parameters:
    ///   - dbClusterParameterGroupName: The name of a specific cluster parameter group to return details for. Constraints:   If provided, must match the name of an existing DBClusterParameterGroup.
    ///   - filters: This parameter is not currently supported.
    ///   - maxRecords:  The maximum number of records to include in the response. If more records exist than the specified MaxRecords value, a pagination token (marker) is included in the response so that the remaining results can be retrieved. Default: 100 Constraints: Minimum 20, maximum 100.
    ///   - logger: Logger used for logging
    @inlinable
    public func describeDBClusterParameterGroupsPaginator(
        dbClusterParameterGroupName: String? = nil,
        filters: [Filter]? = nil,
        maxRecords: Int? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) -> AWSClient.PaginatorSequence<DescribeDBClusterParameterGroupsMessage, DBClusterParameterGroupsMessage> {
        let input = DescribeDBClusterParameterGroupsMessage(
            dbClusterParameterGroupName: dbClusterParameterGroupName, 
            filters: filters, 
            maxRecords: maxRecords
        )
        return self.describeDBClusterParameterGroupsPaginator(input, logger: logger)
    }

    /// Return PaginatorSequence for operation ``describeDBClusterParameters(_:logger:)``.
    ///
    /// - Parameters:
    ///   - input: Input for operation
    ///   - logger: Logger used for logging
    @inlinable
    public func describeDBClusterParametersPaginator(
        _ input: DescribeDBClusterParametersMessage,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<DescribeDBClusterParametersMessage, DBClusterParameterGroupDetails> {
        return .init(
            input: input,
            command: self.describeDBClusterParameters,
            inputKey: \DescribeDBClusterParametersMessage.marker,
            outputKey: \DBClusterParameterGroupDetails.marker,
            logger: logger
        )
    }
    /// Return PaginatorSequence for operation ``describeDBClusterParameters(_:logger:)``.
    ///
    /// - Parameters:
    ///   - dbClusterParameterGroupName: The name of a specific cluster parameter group to return parameter details for. Constraints:   If provided, must match the name of an existing DBClusterParameterGroup.
    ///   - filters: This parameter is not currently supported.
    ///   - maxRecords:  The maximum number of records to include in the response. If more records exist than the specified MaxRecords value, a pagination token (marker) is included in the response so that the remaining results can be retrieved. Default: 100 Constraints: Minimum 20, maximum 100.
    ///   - source:  A value that indicates to return only parameters for a specific source. Parameter sources can be engine, service, or customer.
    ///   - logger: Logger used for logging
    @inlinable
    public func describeDBClusterParametersPaginator(
        dbClusterParameterGroupName: String? = nil,
        filters: [Filter]? = nil,
        maxRecords: Int? = nil,
        source: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) -> AWSClient.PaginatorSequence<DescribeDBClusterParametersMessage, DBClusterParameterGroupDetails> {
        let input = DescribeDBClusterParametersMessage(
            dbClusterParameterGroupName: dbClusterParameterGroupName, 
            filters: filters, 
            maxRecords: maxRecords, 
            source: source
        )
        return self.describeDBClusterParametersPaginator(input, logger: logger)
    }

    /// Return PaginatorSequence for operation ``describeDBClusterSnapshots(_:logger:)``.
    ///
    /// - Parameters:
    ///   - input: Input for operation
    ///   - logger: Logger used for logging
    @inlinable
    public func describeDBClusterSnapshotsPaginator(
        _ input: DescribeDBClusterSnapshotsMessage,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<DescribeDBClusterSnapshotsMessage, DBClusterSnapshotMessage> {
        return .init(
            input: input,
            command: self.describeDBClusterSnapshots,
            inputKey: \DescribeDBClusterSnapshotsMessage.marker,
            outputKey: \DBClusterSnapshotMessage.marker,
            logger: logger
        )
    }
    /// Return PaginatorSequence for operation ``describeDBClusterSnapshots(_:logger:)``.
    ///
    /// - Parameters:
    ///   - dbClusterIdentifier: The ID of the cluster to retrieve the list of cluster snapshots for. This parameter can't be used with the DBClusterSnapshotIdentifier parameter. This parameter is not case sensitive.  Constraints:   If provided, must match the identifier of an existing DBCluster.
    ///   - dbClusterSnapshotIdentifier: A specific cluster snapshot identifier to describe. This parameter can't be used with the DBClusterIdentifier parameter. This value is stored as a lowercase string.  Constraints:   If provided, must match the identifier of an existing DBClusterSnapshot.   If this identifier is for an automated snapshot, the SnapshotType parameter must also be specified.
    ///   - filters: This parameter is not currently supported.
    ///   - includePublic: Set to true to include manual cluster snapshots that are public and can be copied or restored by any Amazon Web Services account, and otherwise false. The default is false.
    ///   - includeShared: Set to true to include shared manual cluster snapshots from other Amazon Web Services accounts that this Amazon Web Services account has been given permission to copy or restore, and otherwise false. The default is false.
    ///   - maxRecords:  The maximum number of records to include in the response. If more records exist than the specified MaxRecords value, a pagination token (marker) is included in the response so that the remaining results can be retrieved. Default: 100 Constraints: Minimum 20, maximum 100.
    ///   - snapshotType: The type of cluster snapshots to be returned. You can specify one of the following values:    automated - Return all cluster snapshots that Amazon DocumentDB has automatically created for your Amazon Web Services account.    manual - Return all cluster snapshots that you have manually created for your Amazon Web Services account.    shared - Return all manual cluster snapshots that have been shared to your Amazon Web Services account.    public - Return all cluster snapshots that have been marked as public.   If you don't specify a SnapshotType value, then both automated and manual cluster snapshots are returned. You can include shared cluster snapshots with these results by setting the IncludeShared parameter to true. You can include public cluster snapshots with these results by setting theIncludePublic parameter to true. The IncludeShared and IncludePublic parameters don't apply for SnapshotType values of manual or automated. The IncludePublic parameter doesn't apply when SnapshotType is set to shared. The IncludeShared parameter doesn't apply when SnapshotType is set to public.
    ///   - logger: Logger used for logging
    @inlinable
    public func describeDBClusterSnapshotsPaginator(
        dbClusterIdentifier: String? = nil,
        dbClusterSnapshotIdentifier: String? = nil,
        filters: [Filter]? = nil,
        includePublic: Bool? = nil,
        includeShared: Bool? = nil,
        maxRecords: Int? = nil,
        snapshotType: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) -> AWSClient.PaginatorSequence<DescribeDBClusterSnapshotsMessage, DBClusterSnapshotMessage> {
        let input = DescribeDBClusterSnapshotsMessage(
            dbClusterIdentifier: dbClusterIdentifier, 
            dbClusterSnapshotIdentifier: dbClusterSnapshotIdentifier, 
            filters: filters, 
            includePublic: includePublic, 
            includeShared: includeShared, 
            maxRecords: maxRecords, 
            snapshotType: snapshotType
        )
        return self.describeDBClusterSnapshotsPaginator(input, logger: logger)
    }

    /// Return PaginatorSequence for operation ``describeDBClusters(_:logger:)``.
    ///
    /// - Parameters:
    ///   - input: Input for operation
    ///   - logger: Logger used for logging
    @inlinable
    public func describeDBClustersPaginator(
        _ input: DescribeDBClustersMessage,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<DescribeDBClustersMessage, DBClusterMessage> {
        return .init(
            input: input,
            command: self.describeDBClusters,
            inputKey: \DescribeDBClustersMessage.marker,
            outputKey: \DBClusterMessage.marker,
            logger: logger
        )
    }
    /// Return PaginatorSequence for operation ``describeDBClusters(_:logger:)``.
    ///
    /// - Parameters:
    ///   - dbClusterIdentifier: The user-provided cluster identifier. If this parameter is specified, information from only the specific cluster is returned. This parameter isn't case sensitive. Constraints:   If provided, must match an existing DBClusterIdentifier.
    ///   - filters: A filter that specifies one or more clusters to describe. Supported filters:    db-cluster-id - Accepts cluster identifiers and cluster Amazon Resource Names (ARNs). The results list only includes information about the clusters identified by these ARNs.
    ///   - maxRecords:  The maximum number of records to include in the response. If more records exist than the specified MaxRecords value, a pagination token (marker) is included in the response so that the remaining results can be retrieved. Default: 100 Constraints: Minimum 20, maximum 100.
    ///   - logger: Logger used for logging
    @inlinable
    public func describeDBClustersPaginator(
        dbClusterIdentifier: String? = nil,
        filters: [Filter]? = nil,
        maxRecords: Int? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) -> AWSClient.PaginatorSequence<DescribeDBClustersMessage, DBClusterMessage> {
        let input = DescribeDBClustersMessage(
            dbClusterIdentifier: dbClusterIdentifier, 
            filters: filters, 
            maxRecords: maxRecords
        )
        return self.describeDBClustersPaginator(input, logger: logger)
    }

    /// Return PaginatorSequence for operation ``describeDBEngineVersions(_:logger:)``.
    ///
    /// - Parameters:
    ///   - input: Input for operation
    ///   - logger: Logger used for logging
    @inlinable
    public func describeDBEngineVersionsPaginator(
        _ input: DescribeDBEngineVersionsMessage,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<DescribeDBEngineVersionsMessage, DBEngineVersionMessage> {
        return .init(
            input: input,
            command: self.describeDBEngineVersions,
            inputKey: \DescribeDBEngineVersionsMessage.marker,
            outputKey: \DBEngineVersionMessage.marker,
            logger: logger
        )
    }
    /// Return PaginatorSequence for operation ``describeDBEngineVersions(_:logger:)``.
    ///
    /// - Parameters:
    ///   - dbParameterGroupFamily: The name of a specific parameter group family to return details for. Constraints:   If provided, must match an existing DBParameterGroupFamily.
    ///   - defaultOnly: Indicates that only the default version of the specified engine or engine and major version combination is returned.
    ///   - engine: The database engine to return.
    ///   - engineVersion: The database engine version to return. Example: 3.6.0
    ///   - filters: This parameter is not currently supported.
    ///   - listSupportedCharacterSets: If this parameter is specified and the requested engine supports the CharacterSetName parameter for CreateDBInstance, the response includes a list of supported character sets for each engine version.
    ///   - listSupportedTimezones: If this parameter is specified and the requested engine supports the TimeZone parameter for CreateDBInstance, the response includes a list of supported time zones for each engine version.
    ///   - maxRecords:  The maximum number of records to include in the response. If more records exist than the specified MaxRecords value, a pagination token (marker) is included in the response so that the remaining results can be retrieved. Default: 100 Constraints: Minimum 20, maximum 100.
    ///   - logger: Logger used for logging
    @inlinable
    public func describeDBEngineVersionsPaginator(
        dbParameterGroupFamily: String? = nil,
        defaultOnly: Bool? = nil,
        engine: String? = nil,
        engineVersion: String? = nil,
        filters: [Filter]? = nil,
        listSupportedCharacterSets: Bool? = nil,
        listSupportedTimezones: Bool? = nil,
        maxRecords: Int? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) -> AWSClient.PaginatorSequence<DescribeDBEngineVersionsMessage, DBEngineVersionMessage> {
        let input = DescribeDBEngineVersionsMessage(
            dbParameterGroupFamily: dbParameterGroupFamily, 
            defaultOnly: defaultOnly, 
            engine: engine, 
            engineVersion: engineVersion, 
            filters: filters, 
            listSupportedCharacterSets: listSupportedCharacterSets, 
            listSupportedTimezones: listSupportedTimezones, 
            maxRecords: maxRecords
        )
        return self.describeDBEngineVersionsPaginator(input, logger: logger)
    }

    /// Return PaginatorSequence for operation ``describeDBInstances(_:logger:)``.
    ///
    /// - Parameters:
    ///   - input: Input for operation
    ///   - logger: Logger used for logging
    @inlinable
    public func describeDBInstancesPaginator(
        _ input: DescribeDBInstancesMessage,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<DescribeDBInstancesMessage, DBInstanceMessage> {
        return .init(
            input: input,
            command: self.describeDBInstances,
            inputKey: \DescribeDBInstancesMessage.marker,
            outputKey: \DBInstanceMessage.marker,
            logger: logger
        )
    }
    /// Return PaginatorSequence for operation ``describeDBInstances(_:logger:)``.
    ///
    /// - Parameters:
    ///   - dbInstanceIdentifier: The user-provided instance identifier. If this parameter is specified, information from only the specific instance is returned. This parameter isn't case sensitive. Constraints:   If provided, must match the identifier of an existing DBInstance.
    ///   - filters: A filter that specifies one or more instances to describe. Supported filters:    db-cluster-id - Accepts cluster identifiers and cluster Amazon Resource Names (ARNs). The results list includes only the information about the instances that are associated with the clusters that are identified by these ARNs.    db-instance-id - Accepts instance identifiers and instance ARNs. The results list includes only the information about the instances that are identified by these ARNs.
    ///   - maxRecords:  The maximum number of records to include in the response. If more records exist than the specified MaxRecords value, a pagination token (marker) is included in the response so that the remaining results can be retrieved. Default: 100 Constraints: Minimum 20, maximum 100.
    ///   - logger: Logger used for logging
    @inlinable
    public func describeDBInstancesPaginator(
        dbInstanceIdentifier: String? = nil,
        filters: [Filter]? = nil,
        maxRecords: Int? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) -> AWSClient.PaginatorSequence<DescribeDBInstancesMessage, DBInstanceMessage> {
        let input = DescribeDBInstancesMessage(
            dbInstanceIdentifier: dbInstanceIdentifier, 
            filters: filters, 
            maxRecords: maxRecords
        )
        return self.describeDBInstancesPaginator(input, logger: logger)
    }

    /// Return PaginatorSequence for operation ``describeDBSubnetGroups(_:logger:)``.
    ///
    /// - Parameters:
    ///   - input: Input for operation
    ///   - logger: Logger used for logging
    @inlinable
    public func describeDBSubnetGroupsPaginator(
        _ input: DescribeDBSubnetGroupsMessage,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<DescribeDBSubnetGroupsMessage, DBSubnetGroupMessage> {
        return .init(
            input: input,
            command: self.describeDBSubnetGroups,
            inputKey: \DescribeDBSubnetGroupsMessage.marker,
            outputKey: \DBSubnetGroupMessage.marker,
            logger: logger
        )
    }
    /// Return PaginatorSequence for operation ``describeDBSubnetGroups(_:logger:)``.
    ///
    /// - Parameters:
    ///   - dbSubnetGroupName: The name of the subnet group to return details for.
    ///   - filters: This parameter is not currently supported.
    ///   - maxRecords:  The maximum number of records to include in the response. If more records exist than the specified MaxRecords value, a pagination token (marker) is included in the response so that the remaining results can be retrieved. Default: 100 Constraints: Minimum 20, maximum 100.
    ///   - logger: Logger used for logging
    @inlinable
    public func describeDBSubnetGroupsPaginator(
        dbSubnetGroupName: String? = nil,
        filters: [Filter]? = nil,
        maxRecords: Int? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) -> AWSClient.PaginatorSequence<DescribeDBSubnetGroupsMessage, DBSubnetGroupMessage> {
        let input = DescribeDBSubnetGroupsMessage(
            dbSubnetGroupName: dbSubnetGroupName, 
            filters: filters, 
            maxRecords: maxRecords
        )
        return self.describeDBSubnetGroupsPaginator(input, logger: logger)
    }

    /// Return PaginatorSequence for operation ``describeEventSubscriptions(_:logger:)``.
    ///
    /// - Parameters:
    ///   - input: Input for operation
    ///   - logger: Logger used for logging
    @inlinable
    public func describeEventSubscriptionsPaginator(
        _ input: DescribeEventSubscriptionsMessage,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<DescribeEventSubscriptionsMessage, EventSubscriptionsMessage> {
        return .init(
            input: input,
            command: self.describeEventSubscriptions,
            inputKey: \DescribeEventSubscriptionsMessage.marker,
            outputKey: \EventSubscriptionsMessage.marker,
            logger: logger
        )
    }
    /// Return PaginatorSequence for operation ``describeEventSubscriptions(_:logger:)``.
    ///
    /// - Parameters:
    ///   - filters: This parameter is not currently supported.
    ///   - maxRecords:  The maximum number of records to include in the response. If more records exist than the specified MaxRecords value, a pagination token (marker) is included in the response so that the remaining results can be retrieved. Default: 100 Constraints: Minimum 20, maximum 100.
    ///   - subscriptionName: The name of the Amazon DocumentDB event notification subscription that you want to describe.
    ///   - logger: Logger used for logging
    @inlinable
    public func describeEventSubscriptionsPaginator(
        filters: [Filter]? = nil,
        maxRecords: Int? = nil,
        subscriptionName: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) -> AWSClient.PaginatorSequence<DescribeEventSubscriptionsMessage, EventSubscriptionsMessage> {
        let input = DescribeEventSubscriptionsMessage(
            filters: filters, 
            maxRecords: maxRecords, 
            subscriptionName: subscriptionName
        )
        return self.describeEventSubscriptionsPaginator(input, logger: logger)
    }

    /// Return PaginatorSequence for operation ``describeEvents(_:logger:)``.
    ///
    /// - Parameters:
    ///   - input: Input for operation
    ///   - logger: Logger used for logging
    @inlinable
    public func describeEventsPaginator(
        _ input: DescribeEventsMessage,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<DescribeEventsMessage, EventsMessage> {
        return .init(
            input: input,
            command: self.describeEvents,
            inputKey: \DescribeEventsMessage.marker,
            outputKey: \EventsMessage.marker,
            logger: logger
        )
    }
    /// Return PaginatorSequence for operation ``describeEvents(_:logger:)``.
    ///
    /// - Parameters:
    ///   - duration: The number of minutes to retrieve events for. Default: 60
    ///   - endTime:  The end of the time interval for which to retrieve events, specified in ISO 8601 format.  Example: 2009-07-08T18:00Z
    ///   - eventCategories: A list of event categories that trigger notifications for an event notification subscription.
    ///   - filters: This parameter is not currently supported.
    ///   - maxRecords:  The maximum number of records to include in the response. If more records exist than the specified MaxRecords value, a pagination token (marker) is included in the response so that the remaining results can be retrieved. Default: 100 Constraints: Minimum 20, maximum 100.
    ///   - sourceIdentifier: The identifier of the event source for which events are returned. If not specified, then all sources are included in the response. Constraints:   If SourceIdentifier is provided, SourceType must also be provided.   If the source type is DBInstance, a DBInstanceIdentifier must be provided.   If the source type is DBSecurityGroup, a DBSecurityGroupName must be provided.   If the source type is DBParameterGroup, a DBParameterGroupName must be provided.   If the source type is DBSnapshot, a DBSnapshotIdentifier must be provided.   Cannot end with a hyphen or contain two consecutive hyphens.
    ///   - sourceType: The event source to retrieve events for. If no value is specified, all events are returned.
    ///   - startTime:  The beginning of the time interval to retrieve events for, specified in ISO 8601 format.  Example: 2009-07-08T18:00Z
    ///   - logger: Logger used for logging
    @inlinable
    public func describeEventsPaginator(
        duration: Int? = nil,
        endTime: Date? = nil,
        eventCategories: [String]? = nil,
        filters: [Filter]? = nil,
        maxRecords: Int? = nil,
        sourceIdentifier: String? = nil,
        sourceType: SourceType? = nil,
        startTime: Date? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) -> AWSClient.PaginatorSequence<DescribeEventsMessage, EventsMessage> {
        let input = DescribeEventsMessage(
            duration: duration, 
            endTime: endTime, 
            eventCategories: eventCategories, 
            filters: filters, 
            maxRecords: maxRecords, 
            sourceIdentifier: sourceIdentifier, 
            sourceType: sourceType, 
            startTime: startTime
        )
        return self.describeEventsPaginator(input, logger: logger)
    }

    /// Return PaginatorSequence for operation ``describeGlobalClusters(_:logger:)``.
    ///
    /// - Parameters:
    ///   - input: Input for operation
    ///   - logger: Logger used for logging
    @inlinable
    public func describeGlobalClustersPaginator(
        _ input: DescribeGlobalClustersMessage,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<DescribeGlobalClustersMessage, GlobalClustersMessage> {
        return .init(
            input: input,
            command: self.describeGlobalClusters,
            inputKey: \DescribeGlobalClustersMessage.marker,
            outputKey: \GlobalClustersMessage.marker,
            logger: logger
        )
    }
    /// Return PaginatorSequence for operation ``describeGlobalClusters(_:logger:)``.
    ///
    /// - Parameters:
    ///   - filters: A filter that specifies one or more global DB clusters to describe. Supported filters: db-cluster-id accepts  cluster identifiers and  cluster Amazon Resource Names (ARNs). The results list will only include information about the clusters identified by these ARNs.
    ///   - globalClusterIdentifier: The user-supplied  cluster identifier. If this parameter is specified, information from only the specific cluster is returned. This parameter isn't case-sensitive.
    ///   - maxRecords: The maximum number of records to include in the response. If more records exist than the specified MaxRecords value, a pagination token called a marker is included in the response so that you can retrieve the remaining results.
    ///   - logger: Logger used for logging
    @inlinable
    public func describeGlobalClustersPaginator(
        filters: [Filter]? = nil,
        globalClusterIdentifier: String? = nil,
        maxRecords: Int? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) -> AWSClient.PaginatorSequence<DescribeGlobalClustersMessage, GlobalClustersMessage> {
        let input = DescribeGlobalClustersMessage(
            filters: filters, 
            globalClusterIdentifier: globalClusterIdentifier, 
            maxRecords: maxRecords
        )
        return self.describeGlobalClustersPaginator(input, logger: logger)
    }

    /// Return PaginatorSequence for operation ``describeOrderableDBInstanceOptions(_:logger:)``.
    ///
    /// - Parameters:
    ///   - input: Input for operation
    ///   - logger: Logger used for logging
    @inlinable
    public func describeOrderableDBInstanceOptionsPaginator(
        _ input: DescribeOrderableDBInstanceOptionsMessage,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<DescribeOrderableDBInstanceOptionsMessage, OrderableDBInstanceOptionsMessage> {
        return .init(
            input: input,
            command: self.describeOrderableDBInstanceOptions,
            inputKey: \DescribeOrderableDBInstanceOptionsMessage.marker,
            outputKey: \OrderableDBInstanceOptionsMessage.marker,
            logger: logger
        )
    }
    /// Return PaginatorSequence for operation ``describeOrderableDBInstanceOptions(_:logger:)``.
    ///
    /// - Parameters:
    ///   - dbInstanceClass: The instance class filter value. Specify this parameter to show only the available offerings that match the specified instance class.
    ///   - engine: The name of the engine to retrieve instance options for.
    ///   - engineVersion: The engine version filter value. Specify this parameter to show only the available offerings that match the specified engine version.
    ///   - filters: This parameter is not currently supported.
    ///   - licenseModel: The license model filter value. Specify this parameter to show only the available offerings that match the specified license model.
    ///   - maxRecords:  The maximum number of records to include in the response. If more records exist than the specified MaxRecords value, a pagination token (marker) is included in the response so that the remaining results can be retrieved. Default: 100 Constraints: Minimum 20, maximum 100.
    ///   - vpc: The virtual private cloud (VPC) filter value. Specify this parameter to show only the available VPC or non-VPC offerings.
    ///   - logger: Logger used for logging
    @inlinable
    public func describeOrderableDBInstanceOptionsPaginator(
        dbInstanceClass: String? = nil,
        engine: String? = nil,
        engineVersion: String? = nil,
        filters: [Filter]? = nil,
        licenseModel: String? = nil,
        maxRecords: Int? = nil,
        vpc: Bool? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) -> AWSClient.PaginatorSequence<DescribeOrderableDBInstanceOptionsMessage, OrderableDBInstanceOptionsMessage> {
        let input = DescribeOrderableDBInstanceOptionsMessage(
            dbInstanceClass: dbInstanceClass, 
            engine: engine, 
            engineVersion: engineVersion, 
            filters: filters, 
            licenseModel: licenseModel, 
            maxRecords: maxRecords, 
            vpc: vpc
        )
        return self.describeOrderableDBInstanceOptionsPaginator(input, logger: logger)
    }

    /// Return PaginatorSequence for operation ``describePendingMaintenanceActions(_:logger:)``.
    ///
    /// - Parameters:
    ///   - input: Input for operation
    ///   - logger: Logger used for logging
    @inlinable
    public func describePendingMaintenanceActionsPaginator(
        _ input: DescribePendingMaintenanceActionsMessage,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<DescribePendingMaintenanceActionsMessage, PendingMaintenanceActionsMessage> {
        return .init(
            input: input,
            command: self.describePendingMaintenanceActions,
            inputKey: \DescribePendingMaintenanceActionsMessage.marker,
            outputKey: \PendingMaintenanceActionsMessage.marker,
            logger: logger
        )
    }
    /// Return PaginatorSequence for operation ``describePendingMaintenanceActions(_:logger:)``.
    ///
    /// - Parameters:
    ///   - filters: A filter that specifies one or more resources to return pending maintenance actions for. Supported filters:    db-cluster-id - Accepts cluster identifiers and cluster Amazon Resource Names (ARNs). The results list includes only pending maintenance actions for the clusters identified by these ARNs.    db-instance-id - Accepts instance identifiers and instance ARNs. The results list includes only pending maintenance actions for the DB instances identified by these ARNs.
    ///   - maxRecords:  The maximum number of records to include in the response. If more records exist than the specified MaxRecords value, a pagination token (marker) is included in the response so that the remaining results can be retrieved. Default: 100 Constraints: Minimum 20, maximum 100.
    ///   - resourceIdentifier: The ARN of a resource to return pending maintenance actions for.
    ///   - logger: Logger used for logging
    @inlinable
    public func describePendingMaintenanceActionsPaginator(
        filters: [Filter]? = nil,
        maxRecords: Int? = nil,
        resourceIdentifier: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) -> AWSClient.PaginatorSequence<DescribePendingMaintenanceActionsMessage, PendingMaintenanceActionsMessage> {
        let input = DescribePendingMaintenanceActionsMessage(
            filters: filters, 
            maxRecords: maxRecords, 
            resourceIdentifier: resourceIdentifier
        )
        return self.describePendingMaintenanceActionsPaginator(input, logger: logger)
    }
}

extension DocDB.DescribeCertificatesMessage: AWSPaginateToken {
    @inlinable
    public func usingPaginationToken(_ token: String) -> DocDB.DescribeCertificatesMessage {
        return .init(
            certificateIdentifier: self.certificateIdentifier,
            filters: self.filters,
            marker: token,
            maxRecords: self.maxRecords
        )
    }
}

extension DocDB.DescribeDBClusterParameterGroupsMessage: AWSPaginateToken {
    @inlinable
    public func usingPaginationToken(_ token: String) -> DocDB.DescribeDBClusterParameterGroupsMessage {
        return .init(
            dbClusterParameterGroupName: self.dbClusterParameterGroupName,
            filters: self.filters,
            marker: token,
            maxRecords: self.maxRecords
        )
    }
}

extension DocDB.DescribeDBClusterParametersMessage: AWSPaginateToken {
    @inlinable
    public func usingPaginationToken(_ token: String) -> DocDB.DescribeDBClusterParametersMessage {
        return .init(
            dbClusterParameterGroupName: self.dbClusterParameterGroupName,
            filters: self.filters,
            marker: token,
            maxRecords: self.maxRecords,
            source: self.source
        )
    }
}

extension DocDB.DescribeDBClusterSnapshotsMessage: AWSPaginateToken {
    @inlinable
    public func usingPaginationToken(_ token: String) -> DocDB.DescribeDBClusterSnapshotsMessage {
        return .init(
            dbClusterIdentifier: self.dbClusterIdentifier,
            dbClusterSnapshotIdentifier: self.dbClusterSnapshotIdentifier,
            filters: self.filters,
            includePublic: self.includePublic,
            includeShared: self.includeShared,
            marker: token,
            maxRecords: self.maxRecords,
            snapshotType: self.snapshotType
        )
    }
}

extension DocDB.DescribeDBClustersMessage: AWSPaginateToken {
    @inlinable
    public func usingPaginationToken(_ token: String) -> DocDB.DescribeDBClustersMessage {
        return .init(
            dbClusterIdentifier: self.dbClusterIdentifier,
            filters: self.filters,
            marker: token,
            maxRecords: self.maxRecords
        )
    }
}

extension DocDB.DescribeDBEngineVersionsMessage: AWSPaginateToken {
    @inlinable
    public func usingPaginationToken(_ token: String) -> DocDB.DescribeDBEngineVersionsMessage {
        return .init(
            dbParameterGroupFamily: self.dbParameterGroupFamily,
            defaultOnly: self.defaultOnly,
            engine: self.engine,
            engineVersion: self.engineVersion,
            filters: self.filters,
            listSupportedCharacterSets: self.listSupportedCharacterSets,
            listSupportedTimezones: self.listSupportedTimezones,
            marker: token,
            maxRecords: self.maxRecords
        )
    }
}

extension DocDB.DescribeDBInstancesMessage: AWSPaginateToken {
    @inlinable
    public func usingPaginationToken(_ token: String) -> DocDB.DescribeDBInstancesMessage {
        return .init(
            dbInstanceIdentifier: self.dbInstanceIdentifier,
            filters: self.filters,
            marker: token,
            maxRecords: self.maxRecords
        )
    }
}

extension DocDB.DescribeDBSubnetGroupsMessage: AWSPaginateToken {
    @inlinable
    public func usingPaginationToken(_ token: String) -> DocDB.DescribeDBSubnetGroupsMessage {
        return .init(
            dbSubnetGroupName: self.dbSubnetGroupName,
            filters: self.filters,
            marker: token,
            maxRecords: self.maxRecords
        )
    }
}

extension DocDB.DescribeEventSubscriptionsMessage: AWSPaginateToken {
    @inlinable
    public func usingPaginationToken(_ token: String) -> DocDB.DescribeEventSubscriptionsMessage {
        return .init(
            filters: self.filters,
            marker: token,
            maxRecords: self.maxRecords,
            subscriptionName: self.subscriptionName
        )
    }
}

extension DocDB.DescribeEventsMessage: AWSPaginateToken {
    @inlinable
    public func usingPaginationToken(_ token: String) -> DocDB.DescribeEventsMessage {
        return .init(
            duration: self.duration,
            endTime: self.endTime,
            eventCategories: self.eventCategories,
            filters: self.filters,
            marker: token,
            maxRecords: self.maxRecords,
            sourceIdentifier: self.sourceIdentifier,
            sourceType: self.sourceType,
            startTime: self.startTime
        )
    }
}

extension DocDB.DescribeGlobalClustersMessage: AWSPaginateToken {
    @inlinable
    public func usingPaginationToken(_ token: String) -> DocDB.DescribeGlobalClustersMessage {
        return .init(
            filters: self.filters,
            globalClusterIdentifier: self.globalClusterIdentifier,
            marker: token,
            maxRecords: self.maxRecords
        )
    }
}

extension DocDB.DescribeOrderableDBInstanceOptionsMessage: AWSPaginateToken {
    @inlinable
    public func usingPaginationToken(_ token: String) -> DocDB.DescribeOrderableDBInstanceOptionsMessage {
        return .init(
            dbInstanceClass: self.dbInstanceClass,
            engine: self.engine,
            engineVersion: self.engineVersion,
            filters: self.filters,
            licenseModel: self.licenseModel,
            marker: token,
            maxRecords: self.maxRecords,
            vpc: self.vpc
        )
    }
}

extension DocDB.DescribePendingMaintenanceActionsMessage: AWSPaginateToken {
    @inlinable
    public func usingPaginationToken(_ token: String) -> DocDB.DescribePendingMaintenanceActionsMessage {
        return .init(
            filters: self.filters,
            marker: token,
            maxRecords: self.maxRecords,
            resourceIdentifier: self.resourceIdentifier
        )
    }
}

// MARK: Waiters

@available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
extension DocDB {
    /// Waiter for operation ``describeDBInstances(_:logger:)``.
    ///
    /// - Parameters:
    ///   - input: Input for operation
    ///   - logger: Logger used for logging
    @inlinable
    public func waitUntilDBInstanceAvailable(
        _ input: DescribeDBInstancesMessage,
        maxWaitTime: TimeAmount? = nil,
        logger: Logger = AWSClient.loggingDisabled
    ) async throws {
        let waiter = AWSClient.Waiter<DescribeDBInstancesMessage, _>(
            acceptors: [
                .init(state: .success, matcher: try! JMESAllPathMatcher("dbInstances[].dBInstanceStatus", expected: "available")),
                .init(state: .failure, matcher: try! JMESAnyPathMatcher("dbInstances[].dBInstanceStatus", expected: "deleted")),
                .init(state: .failure, matcher: try! JMESAnyPathMatcher("dbInstances[].dBInstanceStatus", expected: "deleting")),
                .init(state: .failure, matcher: try! JMESAnyPathMatcher("dbInstances[].dBInstanceStatus", expected: "failed")),
                .init(state: .failure, matcher: try! JMESAnyPathMatcher("dbInstances[].dBInstanceStatus", expected: "incompatible-restore")),
                .init(state: .failure, matcher: try! JMESAnyPathMatcher("dbInstances[].dBInstanceStatus", expected: "incompatible-parameters")),
            ],
            minDelayTime: .seconds(30),
            command: self.describeDBInstances
        )
        return try await self.client.waitUntil(input, waiter: waiter, maxWaitTime: maxWaitTime, logger: logger)
    }
    /// Waiter for operation ``describeDBInstances(_:logger:)``.
    ///
    /// - Parameters:
    ///   - dbInstanceIdentifier: The user-provided instance identifier. If this parameter is specified, information from only the specific instance is returned. This parameter isn't case sensitive. Constraints:   If provided, must match the identifier of an existing DBInstance.
    ///   - filters: A filter that specifies one or more instances to describe. Supported filters:    db-cluster-id - Accepts cluster identifiers and cluster Amazon Resource Names (ARNs). The results list includes only the information about the instances that are associated with the clusters that are identified by these ARNs.    db-instance-id - Accepts instance identifiers and instance ARNs. The results list includes only the information about the instances that are identified by these ARNs.
    ///   - marker: An optional pagination token provided by a previous request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by MaxRecords.
    ///   - maxRecords:  The maximum number of records to include in the response. If more records exist than the specified MaxRecords value, a pagination token (marker) is included in the response so that the remaining results can be retrieved. Default: 100 Constraints: Minimum 20, maximum 100.
    ///   - logger: Logger used for logging
    @inlinable
    public func waitUntilDBInstanceAvailable(
        dbInstanceIdentifier: String? = nil,
        filters: [Filter]? = nil,
        marker: String? = nil,
        maxRecords: Int? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws {
        let input = DescribeDBInstancesMessage(
            dbInstanceIdentifier: dbInstanceIdentifier, 
            filters: filters, 
            marker: marker, 
            maxRecords: maxRecords
        )
        try await self.waitUntilDBInstanceAvailable(input, logger: logger)
    }

    /// Waiter for operation ``describeDBInstances(_:logger:)``.
    ///
    /// - Parameters:
    ///   - input: Input for operation
    ///   - logger: Logger used for logging
    @inlinable
    public func waitUntilDBInstanceDeleted(
        _ input: DescribeDBInstancesMessage,
        maxWaitTime: TimeAmount? = nil,
        logger: Logger = AWSClient.loggingDisabled
    ) async throws {
        let waiter = AWSClient.Waiter<DescribeDBInstancesMessage, _>(
            acceptors: [
                .init(state: .success, matcher: try! JMESAllPathMatcher("dbInstances[].dBInstanceStatus", expected: "deleted")),
                .init(state: .success, matcher: AWSErrorCodeMatcher("DBInstanceNotFound")),
                .init(state: .failure, matcher: try! JMESAnyPathMatcher("dbInstances[].dBInstanceStatus", expected: "creating")),
                .init(state: .failure, matcher: try! JMESAnyPathMatcher("dbInstances[].dBInstanceStatus", expected: "modifying")),
                .init(state: .failure, matcher: try! JMESAnyPathMatcher("dbInstances[].dBInstanceStatus", expected: "rebooting")),
                .init(state: .failure, matcher: try! JMESAnyPathMatcher("dbInstances[].dBInstanceStatus", expected: "resetting-master-credentials")),
            ],
            minDelayTime: .seconds(30),
            command: self.describeDBInstances
        )
        return try await self.client.waitUntil(input, waiter: waiter, maxWaitTime: maxWaitTime, logger: logger)
    }
    /// Waiter for operation ``describeDBInstances(_:logger:)``.
    ///
    /// - Parameters:
    ///   - dbInstanceIdentifier: The user-provided instance identifier. If this parameter is specified, information from only the specific instance is returned. This parameter isn't case sensitive. Constraints:   If provided, must match the identifier of an existing DBInstance.
    ///   - filters: A filter that specifies one or more instances to describe. Supported filters:    db-cluster-id - Accepts cluster identifiers and cluster Amazon Resource Names (ARNs). The results list includes only the information about the instances that are associated with the clusters that are identified by these ARNs.    db-instance-id - Accepts instance identifiers and instance ARNs. The results list includes only the information about the instances that are identified by these ARNs.
    ///   - marker: An optional pagination token provided by a previous request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by MaxRecords.
    ///   - maxRecords:  The maximum number of records to include in the response. If more records exist than the specified MaxRecords value, a pagination token (marker) is included in the response so that the remaining results can be retrieved. Default: 100 Constraints: Minimum 20, maximum 100.
    ///   - logger: Logger used for logging
    @inlinable
    public func waitUntilDBInstanceDeleted(
        dbInstanceIdentifier: String? = nil,
        filters: [Filter]? = nil,
        marker: String? = nil,
        maxRecords: Int? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws {
        let input = DescribeDBInstancesMessage(
            dbInstanceIdentifier: dbInstanceIdentifier, 
            filters: filters, 
            marker: marker, 
            maxRecords: maxRecords
        )
        try await self.waitUntilDBInstanceDeleted(input, logger: logger)
    }
}
