//===----------------------------------------------------------------------===//
//
// This source file is part of the Soto for AWS open source project
//
// Copyright (c) 2017-2024 the Soto project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
// See CONTRIBUTORS.txt for the list of Soto project authors
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by https://github.com/soto-project/soto-codegenerator.
// DO NOT EDIT.

#if os(Linux) && compiler(<5.10)
// swift-corelibs-foundation hasn't been updated with Sendable conformances
@preconcurrency import Foundation
#else
import Foundation
#endif
@_exported import SotoCore

/// Service object for interacting with AWS PartnerCentralSelling service.
///
/// AWS Partner Central API for Selling  AWS Partner Central API for Selling Reference Guide  This Amazon Web Services (AWS) Partner Central API reference is designed to help AWS Partners integrate Customer Relationship Management (CRM) systems with AWS Partner Central. Partners can automate interactions with AWS Partner Central, which helps to ensure effective engagements in joint business activities. The API provides standard AWS API functionality. Access it by either using API Actions or by using an AWS SDK that's tailored to your programming language or platform. For more information, see Getting Started with AWS and Tools to Build on AWS.  Features offered by AWS Partner Central API     Opportunity management: Manages coselling opportunities through API actions such as CreateOpportunity, UpdateOpportunity, ListOpportunities, GetOpportunity, and AssignOpportunity.    AWS referral management: Manages referrals shared by AWS using actions such as ListEngagementInvitations, GetEngagementInvitation, StartEngagementByAcceptingInvitation, and RejectEngagementInvitation.    Entity association: Associates related entities such as AWS Products, Partner Solutions, and AWS Marketplace Private Offers with opportunities using the actions AssociateOpportunity, and DisassociateOpportunity.    View AWS opportunity details: Retrieves real-time summaries of AWS opportunities using the GetAWSOpportunitySummary action.    List solutions: Provides list APIs for listing partner offers using ListSolutions.    Event subscription: Subscribe to real-time opportunity updates through AWS EventBridge by using actions such as Opportunity Created, Opportunity Updated, Engagement Invitation Accepted, Engagement Invitation Rejected, and Engagement Invitation Created.
public struct PartnerCentralSelling: AWSService {
    // MARK: Member variables

    /// Client used for communication with AWS
    public let client: AWSClient
    /// Service configuration
    public let config: AWSServiceConfig

    // MARK: Initialization

    /// Initialize the PartnerCentralSelling client
    /// - parameters:
    ///     - client: AWSClient used to process requests
    ///     - region: Region of server you want to communicate with. This will override the partition parameter.
    ///     - partition: AWS partition where service resides, standard (.aws), china (.awscn), government (.awsusgov).
    ///     - endpoint: Custom endpoint URL to use instead of standard AWS servers
    ///     - middleware: Middleware chain used to edit requests before they are sent and responses before they are decoded 
    ///     - timeout: Timeout value for HTTP requests
    ///     - byteBufferAllocator: Allocator for ByteBuffers
    ///     - options: Service options
    public init(
        client: AWSClient,
        region: SotoCore.Region? = nil,
        partition: AWSPartition = .aws,
        endpoint: String? = nil,
        middleware: AWSMiddlewareProtocol? = nil,
        timeout: TimeAmount? = nil,
        byteBufferAllocator: ByteBufferAllocator = ByteBufferAllocator(),
        options: AWSServiceConfig.Options = []
    ) {
        self.client = client
        self.config = AWSServiceConfig(
            region: region,
            partition: region?.partition ?? partition,
            amzTarget: "AWSPartnerCentralSelling",
            serviceName: "PartnerCentralSelling",
            serviceIdentifier: "partnercentral-selling",
            serviceProtocol: .json(version: "1.0"),
            apiVersion: "2022-07-26",
            endpoint: endpoint,
            errorType: PartnerCentralSellingErrorType.self,
            middleware: middleware,
            timeout: timeout,
            byteBufferAllocator: byteBufferAllocator,
            options: options
        )
    }





    // MARK: API Calls

    ///  Enables you to reassign an existing Opportunity to another user within your Partner Central account. The specified user receives the opportunity, and it appears on their Partner Central dashboard, allowing them to take necessary actions or proceed with the opportunity.   This is useful for distributing opportunities to the appropriate team members or departments within your organization, ensuring that each opportunity is handled by the right person. By default, the opportunity owner is the one who creates it. Currently, there's no API to enumerate the list of available users.
    @Sendable
    @inlinable
    public func assignOpportunity(_ input: AssignOpportunityRequest, logger: Logger = AWSClient.loggingDisabled) async throws {
        try await self.client.execute(
            operation: "AssignOpportunity", 
            path: "/AssignOpportunity", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    ///  Enables you to reassign an existing Opportunity to another user within your Partner Central account. The specified user receives the opportunity, and it appears on their Partner Central dashboard, allowing them to take necessary actions or proceed with the opportunity.   This is useful for distributing opportunities to the appropriate team members or departments within your organization, ensuring that each opportunity is handled by the right person. By default, the opportunity owner is the one who creates it. Currently, there's no API to enumerate the list of available users.
    ///
    /// Parameters:
    ///   - assignee: Specifies the user or team member responsible for managing the assigned opportunity. This field identifies the Assignee based on the partner's internal team structure. Ensure that the email address is associated with a registered user in your Partner Central account.
    ///   - catalog:  Specifies the catalog associated with the request. This field takes a string value from a predefined list: AWS or Sandbox. The catalog determines which environment the opportunity is assigned in. Use AWS to assign real opportunities in the Amazon Web Services catalog, and Sandbox for testing in secure, isolated environments.
    ///   - identifier:  Requires the Opportunity's unique identifier when you want to assign it to another user. Provide the correct identifier so the intended opportunity is reassigned.
    ///   - logger: Logger use during operation
    @inlinable
    public func assignOpportunity(
        assignee: AssigneeContact,
        catalog: String,
        identifier: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws {
        let input = AssignOpportunityRequest(
            assignee: assignee, 
            catalog: catalog, 
            identifier: identifier
        )
        return try await self.assignOpportunity(input, logger: logger)
    }

    ///  Enables you to create a formal association between an Opportunity and various related entities, enriching the context and details of the opportunity for better collaboration and decision making. You can associate an opportunity with the following entity types:     Partner Solution: A software product or consulting practice created and delivered by Partners. Partner Solutions help customers address business challenges using Amazon Web Services services.     Amazon Web Services Products: Amazon Web Services offers many products and services that provide scalable, reliable, and cost-effective infrastructure solutions. For the latest list of Amazon Web Services products, see Amazon Web Services products.     Amazon Web Services Marketplace private offer: Allows Amazon Web Services Marketplace sellers to extend custom pricing and terms to individual Amazon Web Services customers. Sellers can negotiate custom prices, payment schedules, and end user license terms through private offers, enabling Amazon Web Services customers to acquire software solutions tailored to their specific needs. For more information, see Private offers in Amazon Web Services Marketplace.    To obtain identifiers for these entities, use the following methods:   Solution: Use the ListSolutions operation.    AWS Products: For the latest list of Amazon Web Services products, see Amazon Web Services products.     Amazon Web Services Marketplace private offer: Use the Using the Amazon Web Services Marketplace Catalog API to list entities. Specifically, use the ListEntities operation to retrieve a list of private offers. The request returns the details of available private offers. For more information, see ListEntities.
    @Sendable
    @inlinable
    public func associateOpportunity(_ input: AssociateOpportunityRequest, logger: Logger = AWSClient.loggingDisabled) async throws {
        try await self.client.execute(
            operation: "AssociateOpportunity", 
            path: "/AssociateOpportunity", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    ///  Enables you to create a formal association between an Opportunity and various related entities, enriching the context and details of the opportunity for better collaboration and decision making. You can associate an opportunity with the following entity types:     Partner Solution: A software product or consulting practice created and delivered by Partners. Partner Solutions help customers address business challenges using Amazon Web Services services.     Amazon Web Services Products: Amazon Web Services offers many products and services that provide scalable, reliable, and cost-effective infrastructure solutions. For the latest list of Amazon Web Services products, see Amazon Web Services products.     Amazon Web Services Marketplace private offer: Allows Amazon Web Services Marketplace sellers to extend custom pricing and terms to individual Amazon Web Services customers. Sellers can negotiate custom prices, payment schedules, and end user license terms through private offers, enabling Amazon Web Services customers to acquire software solutions tailored to their specific needs. For more information, see Private offers in Amazon Web Services Marketplace.    To obtain identifiers for these entities, use the following methods:   Solution: Use the ListSolutions operation.    AWS Products: For the latest list of Amazon Web Services products, see Amazon Web Services products.     Amazon Web Services Marketplace private offer: Use the Using the Amazon Web Services Marketplace Catalog API to list entities. Specifically, use the ListEntities operation to retrieve a list of private offers. The request returns the details of available private offers. For more information, see ListEntities.
    ///
    /// Parameters:
    ///   - catalog:  Specifies the catalog associated with the request. This field takes a string value from a predefined list: AWS or Sandbox. The catalog determines which environment the opportunity association is made in. Use AWS to associate opportunities in the Amazon Web Services catalog, and Sandbox for testing in secure, isolated environments.
    ///   - opportunityIdentifier: Requires the Opportunity's unique identifier when you want to associate it with a related entity. Provide the correct identifier so the intended opportunity is updated with the association.
    ///   - relatedEntityIdentifier: Requires the related entity's unique identifier when you want to associate it with the  Opportunity. For Amazon Web Services Marketplace entities, provide the Amazon Resource Name (ARN). Use the  Amazon Web Services Marketplace API to obtain the ARN.
    ///   - relatedEntityType: Specifies the entity type that you're associating with the  Opportunity. This helps to categorize and properly process the association.
    ///   - logger: Logger use during operation
    @inlinable
    public func associateOpportunity(
        catalog: String,
        opportunityIdentifier: String,
        relatedEntityIdentifier: String,
        relatedEntityType: RelatedEntityType,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws {
        let input = AssociateOpportunityRequest(
            catalog: catalog, 
            opportunityIdentifier: opportunityIdentifier, 
            relatedEntityIdentifier: relatedEntityIdentifier, 
            relatedEntityType: relatedEntityType
        )
        return try await self.associateOpportunity(input, logger: logger)
    }

    ///  Creates an Opportunity record in Partner Central. Use this operation to create a potential business opportunity for submission to Amazon Web Services. Creating an opportunity sets Lifecycle.ReviewStatus to Pending Submission.   To submit an opportunity, follow these steps:    To create the opportunity, use CreateOpportunity.   To associate a solution with the opportunity, use AssociateOpportunity.   To submit the opportunity, use StartEngagementFromOpportunityTask.    After submission, you can't edit the opportunity until the review is complete. But opportunities in the Pending Submission state must have complete details. You can update the opportunity while it's in the Pending Submission state.   There's a set of mandatory fields to create opportunities, but consider providing optional fields to enrich the opportunity record.
    @Sendable
    @inlinable
    public func createOpportunity(_ input: CreateOpportunityRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> CreateOpportunityResponse {
        try await self.client.execute(
            operation: "CreateOpportunity", 
            path: "/CreateOpportunity", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    ///  Creates an Opportunity record in Partner Central. Use this operation to create a potential business opportunity for submission to Amazon Web Services. Creating an opportunity sets Lifecycle.ReviewStatus to Pending Submission.   To submit an opportunity, follow these steps:    To create the opportunity, use CreateOpportunity.   To associate a solution with the opportunity, use AssociateOpportunity.   To submit the opportunity, use StartEngagementFromOpportunityTask.    After submission, you can't edit the opportunity until the review is complete. But opportunities in the Pending Submission state must have complete details. You can update the opportunity while it's in the Pending Submission state.   There's a set of mandatory fields to create opportunities, but consider providing optional fields to enrich the opportunity record.
    ///
    /// Parameters:
    ///   - catalog:  Specifies the catalog associated with the request. This field takes a string value from a predefined list: AWS or Sandbox. The catalog determines which environment the opportunity is created in. Use AWS to create opportunities in the Amazon Web Services catalog, and Sandbox for testing in secure, isolated environments.
    ///   - clientToken:  Required to be unique, and should be unchanging, it can be randomly generated or a meaningful string.   Default: None   Best practice: To help ensure uniqueness and avoid conflicts, use a Universally Unique Identifier (UUID) as the ClientToken. You can use standard libraries from most programming languages to generate this. If you use the same client token, the API returns the following error: "Conflicting client token submitted for a new request body."
    ///   - customer: Specifies customer details associated with the Opportunity.
    ///   - lifeCycle: An object that contains lifecycle details for the Opportunity.
    ///   - marketing: This object contains marketing details and is optional for an opportunity.
    ///   - nationalSecurity: Indicates whether the Opportunity pertains to a national security project. This field must be set to true only when the customer's industry is Government. Additional privacy and security measures apply during the review and management process for opportunities marked as NationalSecurity.
    ///   - opportunityTeam: Represents the internal team handling the opportunity. Specify collaborating members of this opportunity who are within the partner's organization.
    ///   - opportunityType:  Specifies the opportunity type as a renewal, new, or expansion.   Opportunity types:     New opportunity: Represents a new business opportunity with a potential customer that's not previously engaged with your solutions or services.     Renewal opportunity: Represents an opportunity to renew an existing contract or subscription with a current customer, ensuring continuity of service.     Expansion opportunity: Represents an opportunity to expand the scope of an existing contract or subscription, either by adding new services or increasing the volume of existing services for a current customer.
    ///   - origin:  Specifies the origin of the opportunity, indicating if it was sourced from Amazon Web Services or the partner. For all opportunities created with Catalog: AWS, this field must only be Partner Referral. However, when using Catalog: Sandbox, you can set this field to AWS Referral to simulate Amazon Web Services referral creation. This allows Amazon Web Services-originated flows testing in the sandbox catalog.
    ///   - partnerOpportunityIdentifier:  Specifies the opportunity's unique identifier in the partner's CRM system. This value is essential to track and reconcile because it's included in the outbound payload to the partner.   This field allows partners to link an opportunity to their CRM, which helps to ensure seamless integration and accurate synchronization between the Partner Central API and the partner's internal systems.
    ///   - primaryNeedsFromAws:  Identifies the type of support the partner needs from Amazon Web Services.   Valid values:     Cosell—Architectural Validation: Confirmation from Amazon Web Services that the partner's proposed solution architecture is aligned with Amazon Web Services best practices and poses minimal architectural risks.     Cosell—Business Presentation: Request Amazon Web Services seller's participation in a joint customer presentation.     Cosell—Competitive Information: Access to Amazon Web Services competitive resources and support for the partner's proposed solution.     Cosell—Pricing Assistance: Connect with an Amazon Web Services seller for support situations where a partner may be receiving an upfront discount on a service (for example: EDP deals).     Cosell—Technical Consultation: Connect with an Amazon Web Services Solutions Architect to address the partner's questions about the proposed solution.     Cosell—Total Cost of Ownership Evaluation: Assistance with quoting different cost savings of proposed solutions on Amazon Web Services versus on-premises or a traditional hosting environment.     Cosell—Deal Support: Request Amazon Web Services seller's support to progress the opportunity (for example: joint customer call, strategic positioning).     Cosell—Support for Public Tender/RFx: Opportunity related to the public sector where the partner needs Amazon Web Services RFx support.     Do Not Need Support from AWS Sales Rep: Indicates that a partner doesn't need support from an Amazon Web Services sales representative, and the partner solely manages the opportunity. It's possible to request coselling support on these opportunities at any stage during their lifecycles. This is also known as a for-visibility-only (FVO) opportunity.
    ///   - project: An object that contains project details for the Opportunity.
    ///   - softwareRevenue: Specifies details of a customer's procurement terms. This is required only for partners in eligible programs.
    ///   - logger: Logger use during operation
    @inlinable
    public func createOpportunity(
        catalog: String,
        clientToken: String = CreateOpportunityRequest.idempotencyToken(),
        customer: Customer? = nil,
        lifeCycle: LifeCycle? = nil,
        marketing: Marketing? = nil,
        nationalSecurity: NationalSecurity? = nil,
        opportunityTeam: [Contact]? = nil,
        opportunityType: OpportunityType? = nil,
        origin: OpportunityOrigin? = nil,
        partnerOpportunityIdentifier: String? = nil,
        primaryNeedsFromAws: [PrimaryNeedFromAws]? = nil,
        project: Project? = nil,
        softwareRevenue: SoftwareRevenue? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> CreateOpportunityResponse {
        let input = CreateOpportunityRequest(
            catalog: catalog, 
            clientToken: clientToken, 
            customer: customer, 
            lifeCycle: lifeCycle, 
            marketing: marketing, 
            nationalSecurity: nationalSecurity, 
            opportunityTeam: opportunityTeam, 
            opportunityType: opportunityType, 
            origin: origin, 
            partnerOpportunityIdentifier: partnerOpportunityIdentifier, 
            primaryNeedsFromAws: primaryNeedsFromAws, 
            project: project, 
            softwareRevenue: softwareRevenue
        )
        return try await self.createOpportunity(input, logger: logger)
    }

    ///  Allows you to remove an existing association between an Opportunity and related entities, such as a Partner Solution, Amazon Web Services product, or an Amazon Web Services Marketplace offer. This operation is the counterpart to AssociateOpportunity, and it provides flexibility to manage associations as business needs change.   Use this operation to update the associations of an Opportunity due to changes in the related entities, or if an association was made in error. Ensuring accurate associations helps maintain clarity and accuracy to track and manage business opportunities. When you replace an entity, first attach the new entity and then disassociate the one to be removed, especially if it's the last remaining entity that's required.
    @Sendable
    @inlinable
    public func disassociateOpportunity(_ input: DisassociateOpportunityRequest, logger: Logger = AWSClient.loggingDisabled) async throws {
        try await self.client.execute(
            operation: "DisassociateOpportunity", 
            path: "/DisassociateOpportunity", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    ///  Allows you to remove an existing association between an Opportunity and related entities, such as a Partner Solution, Amazon Web Services product, or an Amazon Web Services Marketplace offer. This operation is the counterpart to AssociateOpportunity, and it provides flexibility to manage associations as business needs change.   Use this operation to update the associations of an Opportunity due to changes in the related entities, or if an association was made in error. Ensuring accurate associations helps maintain clarity and accuracy to track and manage business opportunities. When you replace an entity, first attach the new entity and then disassociate the one to be removed, especially if it's the last remaining entity that's required.
    ///
    /// Parameters:
    ///   - catalog:  Specifies the catalog associated with the request. This field takes a string value from a predefined list: AWS or Sandbox. The catalog determines which environment the opportunity disassociation is made in. Use AWS to disassociate opportunities in the Amazon Web Services catalog, and Sandbox for testing in secure, isolated environments.
    ///   - opportunityIdentifier: The opportunity's unique identifier for when you want to disassociate it from related entities. This identifier helps to ensure that the correct opportunity is updated.  Validation: Ensure that the provided identifier corresponds to an existing opportunity in the Amazon Web Services system because incorrect identifiers result in an error and no changes are made.
    ///   - relatedEntityIdentifier: The related entity's identifier that you want to disassociate from the opportunity. Depending on the type of entity, this could be a simple identifier or an Amazon Resource Name (ARN) for entities managed through Amazon Web Services Marketplace.  For Amazon Web Services Marketplace entities, use the Amazon Web Services Marketplace API to obtain the necessary ARNs. For guidance on retrieving these ARNs, see  Amazon Web Services MarketplaceUsing the Amazon Web Services Marketplace Catalog API.  Validation: Ensure the identifier or ARN is valid and corresponds to an existing entity. An incorrect or invalid identifier results in an error.
    ///   - relatedEntityType: The type of the entity that you're disassociating from the opportunity. When you specify the entity type, it helps the system correctly process the disassociation request to ensure that the right connections are removed.  Examples of entity types include Partner Solution, Amazon Web Services product, and Amazon Web Services Marketplaceoffer. Ensure that the value matches one of the expected entity types.  Validation: Provide a valid entity type to help ensure successful disassociation. An invalid or incorrect entity type results in an error.
    ///   - logger: Logger use during operation
    @inlinable
    public func disassociateOpportunity(
        catalog: String,
        opportunityIdentifier: String,
        relatedEntityIdentifier: String,
        relatedEntityType: RelatedEntityType,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws {
        let input = DisassociateOpportunityRequest(
            catalog: catalog, 
            opportunityIdentifier: opportunityIdentifier, 
            relatedEntityIdentifier: relatedEntityIdentifier, 
            relatedEntityType: relatedEntityType
        )
        return try await self.disassociateOpportunity(input, logger: logger)
    }

    ///  Retrieves a summary of an AWS Opportunity. This summary includes high-level details about the opportunity sourced from AWS, such as lifecycle information, customer details, and involvement type. It is useful for tracking updates on the AWS opportunity corresponding to an opportunity in the partner's account.
    @Sendable
    @inlinable
    public func getAwsOpportunitySummary(_ input: GetAwsOpportunitySummaryRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> GetAwsOpportunitySummaryResponse {
        try await self.client.execute(
            operation: "GetAwsOpportunitySummary", 
            path: "/GetAwsOpportunitySummary", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    ///  Retrieves a summary of an AWS Opportunity. This summary includes high-level details about the opportunity sourced from AWS, such as lifecycle information, customer details, and involvement type. It is useful for tracking updates on the AWS opportunity corresponding to an opportunity in the partner's account.
    ///
    /// Parameters:
    ///   - catalog:  Specifies the catalog in which the AWS Opportunity is located. Accepted values include AWS for production opportunities or Sandbox for testing purposes. The catalog determines which environment the opportunity data is pulled from.
    ///   - relatedOpportunityIdentifier:  The unique identifier for the related partner opportunity. Use this field to correlate an AWS opportunity with its corresponding partner opportunity.
    ///   - logger: Logger use during operation
    @inlinable
    public func getAwsOpportunitySummary(
        catalog: String,
        relatedOpportunityIdentifier: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> GetAwsOpportunitySummaryResponse {
        let input = GetAwsOpportunitySummaryRequest(
            catalog: catalog, 
            relatedOpportunityIdentifier: relatedOpportunityIdentifier
        )
        return try await self.getAwsOpportunitySummary(input, logger: logger)
    }

    /// Retrieves the details of an engagement invitation shared by AWS with a partner. The information includes aspects such as customer, project details, and lifecycle information. To connect an engagement invitation with an opportunity, match the invitation’s Payload.Project.Title with opportunity Project.Title.
    @Sendable
    @inlinable
    public func getEngagementInvitation(_ input: GetEngagementInvitationRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> GetEngagementInvitationResponse {
        try await self.client.execute(
            operation: "GetEngagementInvitation", 
            path: "/GetEngagementInvitation", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Retrieves the details of an engagement invitation shared by AWS with a partner. The information includes aspects such as customer, project details, and lifecycle information. To connect an engagement invitation with an opportunity, match the invitation’s Payload.Project.Title with opportunity Project.Title.
    ///
    /// Parameters:
    ///   - catalog: Specifies the catalog associated with the request. The field accepts values from the predefined set: AWS for live operations or Sandbox for testing environments.
    ///   - identifier: Specifies the unique identifier for the retrieved engagement invitation.
    ///   - logger: Logger use during operation
    @inlinable
    public func getEngagementInvitation(
        catalog: String,
        identifier: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> GetEngagementInvitationResponse {
        let input = GetEngagementInvitationRequest(
            catalog: catalog, 
            identifier: identifier
        )
        return try await self.getEngagementInvitation(input, logger: logger)
    }

    ///  Fetches the Opportunity record from Partner Central by a given Identifier.   Use the ListOpportunities action or the event notification (from Amazon EventBridge) to obtain this identifier.
    @Sendable
    @inlinable
    public func getOpportunity(_ input: GetOpportunityRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> GetOpportunityResponse {
        try await self.client.execute(
            operation: "GetOpportunity", 
            path: "/GetOpportunity", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    ///  Fetches the Opportunity record from Partner Central by a given Identifier.   Use the ListOpportunities action or the event notification (from Amazon EventBridge) to obtain this identifier.
    ///
    /// Parameters:
    ///   - catalog:  Specifies the catalog associated with the request. This field takes a string value from a predefined list: AWS or Sandbox. The catalog determines which environment the opportunity is fetched from. Use AWS to retrieve opportunities in the Amazon Web Services catalog, and Sandbox to retrieve opportunities in a secure, isolated testing environment.
    ///   - identifier: Read-only, system generated Opportunity unique identifier.
    ///   - logger: Logger use during operation
    @inlinable
    public func getOpportunity(
        catalog: String,
        identifier: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> GetOpportunityResponse {
        let input = GetOpportunityRequest(
            catalog: catalog, 
            identifier: identifier
        )
        return try await self.getOpportunity(input, logger: logger)
    }

    /// Retrieves a list of engagement invitations sent to the partner. This allows partners to view all pending or past engagement invitations, helping them track opportunities shared by AWS.
    @Sendable
    @inlinable
    public func listEngagementInvitations(_ input: ListEngagementInvitationsRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> ListEngagementInvitationsResponse {
        try await self.client.execute(
            operation: "ListEngagementInvitations", 
            path: "/ListEngagementInvitations", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Retrieves a list of engagement invitations sent to the partner. This allows partners to view all pending or past engagement invitations, helping them track opportunities shared by AWS.
    ///
    /// Parameters:
    ///   - catalog: Specifies the catalog from which to list the engagement invitations. Use AWS for production invitations or Sandbox for testing environments.
    ///   - maxResults: Specifies the maximum number of engagement invitations to return in the response. If more results are available, a pagination token will be provided.
    ///   - nextToken: A pagination token used to retrieve additional pages of results when the response to a previous request was truncated. Pass this token to continue listing invitations from where the previous call left off.
    ///   - participantType: Specifies the type of participant for which to list engagement invitations. Identifies the role of the participant.
    ///   - payloadType: Defines the type of payload associated with the engagement invitations to be listed. The attributes in this payload help decide on acceptance or rejection of the invitation.
    ///   - sort: Specifies the sorting options for listing engagement invitations. Invitations can be sorted by fields such as InvitationDate or Status to help partners view results in their preferred order.
    ///   - logger: Logger use during operation
    @inlinable
    public func listEngagementInvitations(
        catalog: String,
        maxResults: Int? = nil,
        nextToken: String? = nil,
        participantType: ParticipantType,
        payloadType: [EngagementInvitationPayloadType]? = nil,
        sort: OpportunityEngagementInvitationSort? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> ListEngagementInvitationsResponse {
        let input = ListEngagementInvitationsRequest(
            catalog: catalog, 
            maxResults: maxResults, 
            nextToken: nextToken, 
            participantType: participantType, 
            payloadType: payloadType, 
            sort: sort
        )
        return try await self.listEngagementInvitations(input, logger: logger)
    }

    /// This request accepts a list of filters that retrieve opportunity subsets as well as sort options. This feature is available to partners from Partner Central using the ListOpportunities API action.  To synchronize your system with Amazon Web Services, only list the opportunities that were newly created or updated. We recommend you rely on events emitted by the service into your Amazon Web Services account’s Amazon EventBridge default event bus, you can also use the ListOpportunities action.  We recommend the following approach:   Find the latest LastModifiedDate that you stored, and only use the values that came from Amazon Web Services. Don’t use values generated by your system.    When you send a ListOpportunities request, submit the date in ISO 8601 format in the AfterLastModifiedDate filter.    Amazon Web Services only returns opportunities created or updated on or after that date and time. Use NextToken to iterate over all pages.
    @Sendable
    @inlinable
    public func listOpportunities(_ input: ListOpportunitiesRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> ListOpportunitiesResponse {
        try await self.client.execute(
            operation: "ListOpportunities", 
            path: "/ListOpportunities", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// This request accepts a list of filters that retrieve opportunity subsets as well as sort options. This feature is available to partners from Partner Central using the ListOpportunities API action.  To synchronize your system with Amazon Web Services, only list the opportunities that were newly created or updated. We recommend you rely on events emitted by the service into your Amazon Web Services account’s Amazon EventBridge default event bus, you can also use the ListOpportunities action.  We recommend the following approach:   Find the latest LastModifiedDate that you stored, and only use the values that came from Amazon Web Services. Don’t use values generated by your system.    When you send a ListOpportunities request, submit the date in ISO 8601 format in the AfterLastModifiedDate filter.    Amazon Web Services only returns opportunities created or updated on or after that date and time. Use NextToken to iterate over all pages.
    ///
    /// Parameters:
    ///   - catalog:  Specifies the catalog associated with the request. This field takes a string value from a predefined list: AWS or Sandbox. The catalog determines which environment the opportunities are listed in. Use AWS for listing real opportunities in the Amazon Web Services catalog, and Sandbox for testing in secure, isolated environments.
    ///   - customerCompanyName: Filters the opportunities based on the customer's company name. This allows partners to search for opportunities associated with a specific customer by matching the provided company name string.
    ///   - identifier: Filters the opportunities based on the opportunity identifier. This allows partners to retrieve specific opportunities by providing their unique identifiers, ensuring precise results.
    ///   - lastModifiedDate: Filters the opportunities based on their last modified date. This filter helps retrieve opportunities that were updated after the specified date, allowing partners to track recent changes or updates.
    ///   - lifeCycleReviewStatus: Filters the opportunities based on their current lifecycle approval status. Use this filter to retrieve opportunities with statuses such as Pending Submission, In Review, Action Required, or Approved.
    ///   - lifeCycleStage: Filters the opportunities based on their lifecycle stage. This filter allows partners to retrieve opportunities at various stages in the sales cycle, such as Qualified, Technical Validation, Business Validation, or Closed Won.
    ///   - maxResults:  Specifies the maximum number of results to return in a single call. This limits the number of opportunities returned in the response to avoid providing too many results at once.   Default: 20
    ///   - nextToken:  A pagination token used to retrieve the next set of results in subsequent calls. This token is included in the response only if there are additional result pages available.
    ///   - sort:  An object that specifies how the response is sorted. The default Sort.SortBy value is LastModifiedDate.
    ///   - logger: Logger use during operation
    @inlinable
    public func listOpportunities(
        catalog: String,
        customerCompanyName: [String]? = nil,
        identifier: [String]? = nil,
        lastModifiedDate: LastModifiedDate? = nil,
        lifeCycleReviewStatus: [ReviewStatus]? = nil,
        lifeCycleStage: [Stage]? = nil,
        maxResults: Int? = nil,
        nextToken: String? = nil,
        sort: OpportunitySort? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> ListOpportunitiesResponse {
        let input = ListOpportunitiesRequest(
            catalog: catalog, 
            customerCompanyName: customerCompanyName, 
            identifier: identifier, 
            lastModifiedDate: lastModifiedDate, 
            lifeCycleReviewStatus: lifeCycleReviewStatus, 
            lifeCycleStage: lifeCycleStage, 
            maxResults: maxResults, 
            nextToken: nextToken, 
            sort: sort
        )
        return try await self.listOpportunities(input, logger: logger)
    }

    ///  Retrieves a list of Partner Solutions that the partner registered on Partner Central. This API is used to generate a list of solutions that an end user selects from for association with an opportunity.
    @Sendable
    @inlinable
    public func listSolutions(_ input: ListSolutionsRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> ListSolutionsResponse {
        try await self.client.execute(
            operation: "ListSolutions", 
            path: "/ListSolutions", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    ///  Retrieves a list of Partner Solutions that the partner registered on Partner Central. This API is used to generate a list of solutions that an end user selects from for association with an opportunity.
    ///
    /// Parameters:
    ///   - catalog:  Specifies the catalog associated with the request. This field takes a string value from a predefined list: AWS or Sandbox. The catalog determines which environment the solutions are listed in. Use AWS to list solutions in the Amazon Web Services catalog, and Sandbox to list solutions in a secure and isolated testing environment.
    ///   - category: Filters the solutions based on the category to which they belong. This allows partners to search for solutions within specific categories, such as Software, Consulting, or Managed Services.
    ///   - identifier: Filters the solutions based on their unique identifier. Use this filter to retrieve specific solutions by providing the solution's identifier for accurate results.
    ///   - maxResults: The maximum number of results returned by a single call. This value must be provided in the next call to retrieve the next set of results.  Default: 20
    ///   - nextToken:  A pagination token used to retrieve the next set of results in subsequent calls. This token is included in the response only if there are additional result pages available.
    ///   - sort: Object that configures sorting done on the response. Default Sort.SortBy is Identifier.
    ///   - status: Filters solutions based on their status. This filter helps partners manage their solution portfolios effectively.
    ///   - logger: Logger use during operation
    @inlinable
    public func listSolutions(
        catalog: String,
        category: [String]? = nil,
        identifier: [String]? = nil,
        maxResults: Int? = nil,
        nextToken: String? = nil,
        sort: SolutionSort? = nil,
        status: [SolutionStatus]? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> ListSolutionsResponse {
        let input = ListSolutionsRequest(
            catalog: catalog, 
            category: category, 
            identifier: identifier, 
            maxResults: maxResults, 
            nextToken: nextToken, 
            sort: sort, 
            status: status
        )
        return try await self.listSolutions(input, logger: logger)
    }

    /// This action rejects an EngagementInvitation that AWS shared. Rejecting an invitation indicates that the partner doesn't want to pursue the opportunity, and all related data will become inaccessible thereafter.
    @Sendable
    @inlinable
    public func rejectEngagementInvitation(_ input: RejectEngagementInvitationRequest, logger: Logger = AWSClient.loggingDisabled) async throws {
        try await self.client.execute(
            operation: "RejectEngagementInvitation", 
            path: "/RejectEngagementInvitation", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// This action rejects an EngagementInvitation that AWS shared. Rejecting an invitation indicates that the partner doesn't want to pursue the opportunity, and all related data will become inaccessible thereafter.
    ///
    /// Parameters:
    ///   - catalog: This is the catalog that's associated with the engagement invitation. Acceptable values are AWS or Sandbox, and these values determine the environment in which the opportunity is managed.
    ///   - identifier: This is the unique identifier of the rejected EngagementInvitation. Providing the correct identifier helps to ensure that the intended invitation is rejected.
    ///   - rejectionReason: This describes the reason for rejecting the engagement invitation, which helps AWS track usage patterns. Acceptable values include the following:    Customer problem unclear: The customer's problem isn't understood.    Next steps unclear: The next steps required to proceed aren't understood.    Unable to support: The partner is unable to provide support due to resource or capability constraints.    Duplicate of partner referral: The opportunity is a duplicate of an existing referral.    Other: Any reason not covered by other values.
    ///   - logger: Logger use during operation
    @inlinable
    public func rejectEngagementInvitation(
        catalog: String,
        identifier: String,
        rejectionReason: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws {
        let input = RejectEngagementInvitationRequest(
            catalog: catalog, 
            identifier: identifier, 
            rejectionReason: rejectionReason
        )
        return try await self.rejectEngagementInvitation(input, logger: logger)
    }

    /// This action starts the engagement by accepting an EngagementInvitation. The task is asynchronous and involves the following steps: accepting the invitation, creating an opportunity in the partner’s account from the AWS opportunity, and copying details for tracking. When completed, an Opportunity Created event is generated, indicating that the opportunity has been successfully created in the partner's account.
    @Sendable
    @inlinable
    public func startEngagementByAcceptingInvitationTask(_ input: StartEngagementByAcceptingInvitationTaskRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> StartEngagementByAcceptingInvitationTaskResponse {
        try await self.client.execute(
            operation: "StartEngagementByAcceptingInvitationTask", 
            path: "/StartEngagementByAcceptingInvitationTask", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// This action starts the engagement by accepting an EngagementInvitation. The task is asynchronous and involves the following steps: accepting the invitation, creating an opportunity in the partner’s account from the AWS opportunity, and copying details for tracking. When completed, an Opportunity Created event is generated, indicating that the opportunity has been successfully created in the partner's account.
    ///
    /// Parameters:
    ///   - catalog: Specifies the catalog related to the task. Use AWS for production engagements and Sandbox for testing scenarios.
    ///   - clientToken: A unique, case-sensitive identifier provided by the client that helps to ensure the idempotency of the request. This can be a random or meaningful string but must be unique for each request.
    ///   - identifier: Specifies the unique identifier of the EngagementInvitation to be accepted. Providing the correct identifier helps ensure that the correct engagement is processed.
    ///   - logger: Logger use during operation
    @inlinable
    public func startEngagementByAcceptingInvitationTask(
        catalog: String,
        clientToken: String = StartEngagementByAcceptingInvitationTaskRequest.idempotencyToken(),
        identifier: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> StartEngagementByAcceptingInvitationTaskResponse {
        let input = StartEngagementByAcceptingInvitationTaskRequest(
            catalog: catalog, 
            clientToken: clientToken, 
            identifier: identifier
        )
        return try await self.startEngagementByAcceptingInvitationTask(input, logger: logger)
    }

    /// This action initiates the engagement process from an existing opportunity by accepting the engagement invitation and creating a corresponding opportunity in the partner’s system. Similar to StartEngagementByAcceptingInvitationTask, this action is asynchronous and performs multiple steps before completion.
    @Sendable
    @inlinable
    public func startEngagementFromOpportunityTask(_ input: StartEngagementFromOpportunityTaskRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> StartEngagementFromOpportunityTaskResponse {
        try await self.client.execute(
            operation: "StartEngagementFromOpportunityTask", 
            path: "/StartEngagementFromOpportunityTask", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// This action initiates the engagement process from an existing opportunity by accepting the engagement invitation and creating a corresponding opportunity in the partner’s system. Similar to StartEngagementByAcceptingInvitationTask, this action is asynchronous and performs multiple steps before completion.
    ///
    /// Parameters:
    ///   - awsSubmission: 
    ///   - catalog: Specifies the catalog in which the engagement is tracked. Acceptable values include AWS for production and Sandbox for testing environments.
    ///   - clientToken: A unique token provided by the client to help ensure the idempotency of the request. It helps prevent the same task from being performed multiple times.
    ///   - identifier: The unique identifier of the opportunity from which the engagement task is to be initiated. This helps ensure that the task is applied to the correct opportunity.
    ///   - logger: Logger use during operation
    @inlinable
    public func startEngagementFromOpportunityTask(
        awsSubmission: AwsSubmission,
        catalog: String,
        clientToken: String = StartEngagementFromOpportunityTaskRequest.idempotencyToken(),
        identifier: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> StartEngagementFromOpportunityTaskResponse {
        let input = StartEngagementFromOpportunityTaskRequest(
            awsSubmission: awsSubmission, 
            catalog: catalog, 
            clientToken: clientToken, 
            identifier: identifier
        )
        return try await self.startEngagementFromOpportunityTask(input, logger: logger)
    }

    ///  Updates the Opportunity record identified by a given Identifier. This operation allows you to modify the details of an existing opportunity to reflect the latest information and progress. Use this action to keep the opportunity record up-to-date and accurate.   When you perform updates, include the entire payload with each request. If any field is omitted, the API assumes that the field is set to null. The best practice is to always perform a GetOpportunity to retrieve the latest values, then send the complete payload with the updated values to be changed.
    @Sendable
    @inlinable
    public func updateOpportunity(_ input: UpdateOpportunityRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> UpdateOpportunityResponse {
        try await self.client.execute(
            operation: "UpdateOpportunity", 
            path: "/UpdateOpportunity", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    ///  Updates the Opportunity record identified by a given Identifier. This operation allows you to modify the details of an existing opportunity to reflect the latest information and progress. Use this action to keep the opportunity record up-to-date and accurate.   When you perform updates, include the entire payload with each request. If any field is omitted, the API assumes that the field is set to null. The best practice is to always perform a GetOpportunity to retrieve the latest values, then send the complete payload with the updated values to be changed.
    ///
    /// Parameters:
    ///   - catalog:  Specifies the catalog associated with the request. This field takes a string value from a predefined list: AWS or Sandbox. The catalog determines which environment the opportunity is updated in. Use AWS to update real opportunities in the production environment, and Sandbox for testing in secure, isolated environments. When you use the Sandbox catalog, it allows you to simulate and validate your interactions with Amazon Web Services services without affecting live data or operations.
    ///   - customer: Specifies details of the customer associated with the Opportunity.
    ///   - identifier: Read-only, system generated Opportunity unique identifier.
    ///   - lastModifiedDate:  DateTime when the opportunity was last modified.
    ///   - lifeCycle: An object that contains lifecycle details for the Opportunity.
    ///   - marketing: An object that contains marketing details for the Opportunity.
    ///   - nationalSecurity: Specifies if the opportunity is associated with national security concerns. This flag is only applicable when the industry is Government. For national-security-related opportunities, validation and compliance rules may apply, impacting the opportunity's visibility and processing.
    ///   - opportunityType:  Specifies the opportunity type as a renewal, new, or expansion.   Opportunity types:     New opportunity: Represents a new business opportunity with a potential customer that's not previously engaged with your solutions or services.     Renewal opportunity: Represents an opportunity to renew an existing contract or subscription with a current customer, ensuring continuity of service.     Expansion opportunity: Represents an opportunity to expand the scope of an existing contract or subscription, either by adding new services or increasing the volume of existing services for a current customer.
    ///   - partnerOpportunityIdentifier: Specifies the opportunity's unique identifier in the partner's CRM system. This value is essential to track and reconcile because it's included in the outbound payload sent back to the partner.
    ///   - primaryNeedsFromAws:  Identifies the type of support the partner needs from Amazon Web Services.   Valid values:     Cosell—Architectural Validation: Confirmation from Amazon Web Services that the partner's proposed solution architecture is aligned with Amazon Web Services best practices and poses minimal architectural risks.     Cosell—Business Presentation: Request Amazon Web Services seller's participation in a joint customer presentation.     Cosell—Competitive Information: Access to Amazon Web Services competitive resources and support for the partner's proposed solution.     Cosell—Pricing Assistance: Connect with an AWS seller for support situations where a partner may be receiving an upfront discount on a service (for example: EDP deals).     Cosell—Technical Consultation: Connection with an Amazon Web Services Solutions Architect to address the partner's questions about the proposed solution.     Cosell—Total Cost of Ownership Evaluation: Assistance with quoting different cost savings of proposed solutions on Amazon Web Services versus on-premises or a traditional hosting environment.     Cosell—Deal Support: Request Amazon Web Services seller's support to progress the opportunity (for example: joint customer call, strategic positioning).     Cosell—Support for Public Tender/RFx: Opportunity related to the public sector where the partner needs RFx support from Amazon Web Services.     Do Not Need Support from AWS Sales Rep: Indicates that a partner doesn't need support from an Amazon Web Services Sales representative. The opportunity is managed solely by the partner. It's possible to request coselling support on these opportunities at any stage during their lifecycle. Also known as, for-visibility-only (FVO) opportunity.
    ///   - project: An object that contains project details summary for the Opportunity.
    ///   - softwareRevenue: Specifies details of a customer's procurement terms. Required only for partners in eligible programs.
    ///   - logger: Logger use during operation
    @inlinable
    public func updateOpportunity(
        catalog: String,
        customer: Customer? = nil,
        identifier: String,
        lastModifiedDate: Date,
        lifeCycle: LifeCycle? = nil,
        marketing: Marketing? = nil,
        nationalSecurity: NationalSecurity? = nil,
        opportunityType: OpportunityType? = nil,
        partnerOpportunityIdentifier: String? = nil,
        primaryNeedsFromAws: [PrimaryNeedFromAws]? = nil,
        project: Project? = nil,
        softwareRevenue: SoftwareRevenue? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> UpdateOpportunityResponse {
        let input = UpdateOpportunityRequest(
            catalog: catalog, 
            customer: customer, 
            identifier: identifier, 
            lastModifiedDate: lastModifiedDate, 
            lifeCycle: lifeCycle, 
            marketing: marketing, 
            nationalSecurity: nationalSecurity, 
            opportunityType: opportunityType, 
            partnerOpportunityIdentifier: partnerOpportunityIdentifier, 
            primaryNeedsFromAws: primaryNeedsFromAws, 
            project: project, 
            softwareRevenue: softwareRevenue
        )
        return try await self.updateOpportunity(input, logger: logger)
    }
}

extension PartnerCentralSelling {
    /// Initializer required by `AWSService.with(middlewares:timeout:byteBufferAllocator:options)`. You are not able to use this initializer directly as there are not public
    /// initializers for `AWSServiceConfig.Patch`. Please use `AWSService.with(middlewares:timeout:byteBufferAllocator:options)` instead.
    public init(from: PartnerCentralSelling, patch: AWSServiceConfig.Patch) {
        self.client = from.client
        self.config = from.config.with(patch: patch)
    }
}

// MARK: Paginators

@available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
extension PartnerCentralSelling {
    /// Return PaginatorSequence for operation ``listEngagementInvitations(_:logger:)``.
    ///
    /// - Parameters:
    ///   - input: Input for operation
    ///   - logger: Logger used for logging
    @inlinable
    public func listEngagementInvitationsPaginator(
        _ input: ListEngagementInvitationsRequest,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<ListEngagementInvitationsRequest, ListEngagementInvitationsResponse> {
        return .init(
            input: input,
            command: self.listEngagementInvitations,
            inputKey: \ListEngagementInvitationsRequest.nextToken,
            outputKey: \ListEngagementInvitationsResponse.nextToken,
            logger: logger
        )
    }
    /// Return PaginatorSequence for operation ``listEngagementInvitations(_:logger:)``.
    ///
    /// - Parameters:
    ///   - catalog: Specifies the catalog from which to list the engagement invitations. Use AWS for production invitations or Sandbox for testing environments.
    ///   - maxResults: Specifies the maximum number of engagement invitations to return in the response. If more results are available, a pagination token will be provided.
    ///   - participantType: Specifies the type of participant for which to list engagement invitations. Identifies the role of the participant.
    ///   - payloadType: Defines the type of payload associated with the engagement invitations to be listed. The attributes in this payload help decide on acceptance or rejection of the invitation.
    ///   - sort: Specifies the sorting options for listing engagement invitations. Invitations can be sorted by fields such as InvitationDate or Status to help partners view results in their preferred order.
    ///   - logger: Logger used for logging
    @inlinable
    public func listEngagementInvitationsPaginator(
        catalog: String,
        maxResults: Int? = nil,
        participantType: ParticipantType,
        payloadType: [EngagementInvitationPayloadType]? = nil,
        sort: OpportunityEngagementInvitationSort? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) -> AWSClient.PaginatorSequence<ListEngagementInvitationsRequest, ListEngagementInvitationsResponse> {
        let input = ListEngagementInvitationsRequest(
            catalog: catalog, 
            maxResults: maxResults, 
            participantType: participantType, 
            payloadType: payloadType, 
            sort: sort
        )
        return self.listEngagementInvitationsPaginator(input, logger: logger)
    }

    /// Return PaginatorSequence for operation ``listOpportunities(_:logger:)``.
    ///
    /// - Parameters:
    ///   - input: Input for operation
    ///   - logger: Logger used for logging
    @inlinable
    public func listOpportunitiesPaginator(
        _ input: ListOpportunitiesRequest,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<ListOpportunitiesRequest, ListOpportunitiesResponse> {
        return .init(
            input: input,
            command: self.listOpportunities,
            inputKey: \ListOpportunitiesRequest.nextToken,
            outputKey: \ListOpportunitiesResponse.nextToken,
            logger: logger
        )
    }
    /// Return PaginatorSequence for operation ``listOpportunities(_:logger:)``.
    ///
    /// - Parameters:
    ///   - catalog:  Specifies the catalog associated with the request. This field takes a string value from a predefined list: AWS or Sandbox. The catalog determines which environment the opportunities are listed in. Use AWS for listing real opportunities in the Amazon Web Services catalog, and Sandbox for testing in secure, isolated environments.
    ///   - customerCompanyName: Filters the opportunities based on the customer's company name. This allows partners to search for opportunities associated with a specific customer by matching the provided company name string.
    ///   - identifier: Filters the opportunities based on the opportunity identifier. This allows partners to retrieve specific opportunities by providing their unique identifiers, ensuring precise results.
    ///   - lastModifiedDate: Filters the opportunities based on their last modified date. This filter helps retrieve opportunities that were updated after the specified date, allowing partners to track recent changes or updates.
    ///   - lifeCycleReviewStatus: Filters the opportunities based on their current lifecycle approval status. Use this filter to retrieve opportunities with statuses such as Pending Submission, In Review, Action Required, or Approved.
    ///   - lifeCycleStage: Filters the opportunities based on their lifecycle stage. This filter allows partners to retrieve opportunities at various stages in the sales cycle, such as Qualified, Technical Validation, Business Validation, or Closed Won.
    ///   - maxResults:  Specifies the maximum number of results to return in a single call. This limits the number of opportunities returned in the response to avoid providing too many results at once.   Default: 20
    ///   - sort:  An object that specifies how the response is sorted. The default Sort.SortBy value is LastModifiedDate.
    ///   - logger: Logger used for logging
    @inlinable
    public func listOpportunitiesPaginator(
        catalog: String,
        customerCompanyName: [String]? = nil,
        identifier: [String]? = nil,
        lastModifiedDate: LastModifiedDate? = nil,
        lifeCycleReviewStatus: [ReviewStatus]? = nil,
        lifeCycleStage: [Stage]? = nil,
        maxResults: Int? = nil,
        sort: OpportunitySort? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) -> AWSClient.PaginatorSequence<ListOpportunitiesRequest, ListOpportunitiesResponse> {
        let input = ListOpportunitiesRequest(
            catalog: catalog, 
            customerCompanyName: customerCompanyName, 
            identifier: identifier, 
            lastModifiedDate: lastModifiedDate, 
            lifeCycleReviewStatus: lifeCycleReviewStatus, 
            lifeCycleStage: lifeCycleStage, 
            maxResults: maxResults, 
            sort: sort
        )
        return self.listOpportunitiesPaginator(input, logger: logger)
    }

    /// Return PaginatorSequence for operation ``listSolutions(_:logger:)``.
    ///
    /// - Parameters:
    ///   - input: Input for operation
    ///   - logger: Logger used for logging
    @inlinable
    public func listSolutionsPaginator(
        _ input: ListSolutionsRequest,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<ListSolutionsRequest, ListSolutionsResponse> {
        return .init(
            input: input,
            command: self.listSolutions,
            inputKey: \ListSolutionsRequest.nextToken,
            outputKey: \ListSolutionsResponse.nextToken,
            logger: logger
        )
    }
    /// Return PaginatorSequence for operation ``listSolutions(_:logger:)``.
    ///
    /// - Parameters:
    ///   - catalog:  Specifies the catalog associated with the request. This field takes a string value from a predefined list: AWS or Sandbox. The catalog determines which environment the solutions are listed in. Use AWS to list solutions in the Amazon Web Services catalog, and Sandbox to list solutions in a secure and isolated testing environment.
    ///   - category: Filters the solutions based on the category to which they belong. This allows partners to search for solutions within specific categories, such as Software, Consulting, or Managed Services.
    ///   - identifier: Filters the solutions based on their unique identifier. Use this filter to retrieve specific solutions by providing the solution's identifier for accurate results.
    ///   - maxResults: The maximum number of results returned by a single call. This value must be provided in the next call to retrieve the next set of results.  Default: 20
    ///   - sort: Object that configures sorting done on the response. Default Sort.SortBy is Identifier.
    ///   - status: Filters solutions based on their status. This filter helps partners manage their solution portfolios effectively.
    ///   - logger: Logger used for logging
    @inlinable
    public func listSolutionsPaginator(
        catalog: String,
        category: [String]? = nil,
        identifier: [String]? = nil,
        maxResults: Int? = nil,
        sort: SolutionSort? = nil,
        status: [SolutionStatus]? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) -> AWSClient.PaginatorSequence<ListSolutionsRequest, ListSolutionsResponse> {
        let input = ListSolutionsRequest(
            catalog: catalog, 
            category: category, 
            identifier: identifier, 
            maxResults: maxResults, 
            sort: sort, 
            status: status
        )
        return self.listSolutionsPaginator(input, logger: logger)
    }
}

extension PartnerCentralSelling.ListEngagementInvitationsRequest: AWSPaginateToken {
    @inlinable
    public func usingPaginationToken(_ token: String) -> PartnerCentralSelling.ListEngagementInvitationsRequest {
        return .init(
            catalog: self.catalog,
            maxResults: self.maxResults,
            nextToken: token,
            participantType: self.participantType,
            payloadType: self.payloadType,
            sort: self.sort
        )
    }
}

extension PartnerCentralSelling.ListOpportunitiesRequest: AWSPaginateToken {
    @inlinable
    public func usingPaginationToken(_ token: String) -> PartnerCentralSelling.ListOpportunitiesRequest {
        return .init(
            catalog: self.catalog,
            customerCompanyName: self.customerCompanyName,
            identifier: self.identifier,
            lastModifiedDate: self.lastModifiedDate,
            lifeCycleReviewStatus: self.lifeCycleReviewStatus,
            lifeCycleStage: self.lifeCycleStage,
            maxResults: self.maxResults,
            nextToken: token,
            sort: self.sort
        )
    }
}

extension PartnerCentralSelling.ListSolutionsRequest: AWSPaginateToken {
    @inlinable
    public func usingPaginationToken(_ token: String) -> PartnerCentralSelling.ListSolutionsRequest {
        return .init(
            catalog: self.catalog,
            category: self.category,
            identifier: self.identifier,
            maxResults: self.maxResults,
            nextToken: token,
            sort: self.sort,
            status: self.status
        )
    }
}
