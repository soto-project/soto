//===----------------------------------------------------------------------===//
//
// This source file is part of the Soto for AWS open source project
//
// Copyright (c) 2017-2023 the Soto project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
// See CONTRIBUTORS.txt for the list of Soto project authors
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by https://github.com/soto-project/soto-codegenerator.
// DO NOT EDIT.

import SotoCore

@available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
extension MedicalImaging {
    // MARK: Async API Calls

    /// Copy an image set.
    public func copyImageSet(_ input: CopyImageSetRequest, logger: Logger = AWSClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> CopyImageSetResponse {
        return try await self.client.execute(operation: "CopyImageSet", path: "/datastore/{datastoreId}/imageSet/{sourceImageSetId}/copyImageSet", httpMethod: .POST, serviceConfig: self.config, input: input, hostPrefix: "runtime-", logger: logger, on: eventLoop)
    }

    /// Create a data store.
    public func createDatastore(_ input: CreateDatastoreRequest, logger: Logger = AWSClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> CreateDatastoreResponse {
        return try await self.client.execute(operation: "CreateDatastore", path: "/datastore", httpMethod: .POST, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// Delete a data store.  Before a data store can be deleted, you must first delete all image sets within it.
    public func deleteDatastore(_ input: DeleteDatastoreRequest, logger: Logger = AWSClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DeleteDatastoreResponse {
        return try await self.client.execute(operation: "DeleteDatastore", path: "/datastore/{datastoreId}", httpMethod: .DELETE, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// Delete an image set.
    public func deleteImageSet(_ input: DeleteImageSetRequest, logger: Logger = AWSClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DeleteImageSetResponse {
        return try await self.client.execute(operation: "DeleteImageSet", path: "/datastore/{datastoreId}/imageSet/{imageSetId}/deleteImageSet", httpMethod: .POST, serviceConfig: self.config, input: input, hostPrefix: "runtime-", logger: logger, on: eventLoop)
    }

    /// Get the import job properties to learn more about the job or job progress.
    public func getDICOMImportJob(_ input: GetDICOMImportJobRequest, logger: Logger = AWSClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> GetDICOMImportJobResponse {
        return try await self.client.execute(operation: "GetDICOMImportJob", path: "/getDICOMImportJob/datastore/{datastoreId}/job/{jobId}", httpMethod: .GET, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// Get data store properties.
    public func getDatastore(_ input: GetDatastoreRequest, logger: Logger = AWSClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> GetDatastoreResponse {
        return try await self.client.execute(operation: "GetDatastore", path: "/datastore/{datastoreId}", httpMethod: .GET, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// Get an image frame (pixel data) for an image set.
    public func getImageFrame(_ input: GetImageFrameRequest, logger: Logger = AWSClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> GetImageFrameResponse {
        return try await self.client.execute(operation: "GetImageFrame", path: "/datastore/{datastoreId}/imageSet/{imageSetId}/getImageFrame", httpMethod: .POST, serviceConfig: self.config, input: input, hostPrefix: "runtime-", logger: logger, on: eventLoop)
    }

    /// Get image set properties.
    public func getImageSet(_ input: GetImageSetRequest, logger: Logger = AWSClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> GetImageSetResponse {
        return try await self.client.execute(operation: "GetImageSet", path: "/datastore/{datastoreId}/imageSet/{imageSetId}/getImageSet", httpMethod: .POST, serviceConfig: self.config, input: input, hostPrefix: "runtime-", logger: logger, on: eventLoop)
    }

    /// Get metadata attributes for an image set.
    public func getImageSetMetadata(_ input: GetImageSetMetadataRequest, logger: Logger = AWSClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> GetImageSetMetadataResponse {
        return try await self.client.execute(operation: "GetImageSetMetadata", path: "/datastore/{datastoreId}/imageSet/{imageSetId}/getImageSetMetadata", httpMethod: .POST, serviceConfig: self.config, input: input, hostPrefix: "runtime-", logger: logger, on: eventLoop)
    }

    /// List import jobs created by this AWS account for a specific data store.
    public func listDICOMImportJobs(_ input: ListDICOMImportJobsRequest, logger: Logger = AWSClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> ListDICOMImportJobsResponse {
        return try await self.client.execute(operation: "ListDICOMImportJobs", path: "/listDICOMImportJobs/datastore/{datastoreId}", httpMethod: .GET, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// List data stores created by this AWS account.
    public func listDatastores(_ input: ListDatastoresRequest, logger: Logger = AWSClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> ListDatastoresResponse {
        return try await self.client.execute(operation: "ListDatastores", path: "/datastore", httpMethod: .GET, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// List image set versions.
    public func listImageSetVersions(_ input: ListImageSetVersionsRequest, logger: Logger = AWSClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> ListImageSetVersionsResponse {
        return try await self.client.execute(operation: "ListImageSetVersions", path: "/datastore/{datastoreId}/imageSet/{imageSetId}/listImageSetVersions", httpMethod: .POST, serviceConfig: self.config, input: input, hostPrefix: "runtime-", logger: logger, on: eventLoop)
    }

    /// Lists all tags associated with a medical imaging resource.
    public func listTagsForResource(_ input: ListTagsForResourceRequest, logger: Logger = AWSClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> ListTagsForResourceResponse {
        return try await self.client.execute(operation: "ListTagsForResource", path: "/tags/{resourceArn}", httpMethod: .GET, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// Search image sets based on defined input attributes.
    public func searchImageSets(_ input: SearchImageSetsRequest, logger: Logger = AWSClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> SearchImageSetsResponse {
        return try await self.client.execute(operation: "SearchImageSets", path: "/datastore/{datastoreId}/searchImageSets", httpMethod: .POST, serviceConfig: self.config, input: input, hostPrefix: "runtime-", logger: logger, on: eventLoop)
    }

    /// Start importing bulk data into an ACTIVE data store. The import job imports DICOM P10 files found in the S3 prefix specified by the inputS3Uri parameter. The import job stores processing results in the file specified by the outputS3Uri parameter.
    public func startDICOMImportJob(_ input: StartDICOMImportJobRequest, logger: Logger = AWSClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> StartDICOMImportJobResponse {
        return try await self.client.execute(operation: "StartDICOMImportJob", path: "/startDICOMImportJob/datastore/{datastoreId}", httpMethod: .POST, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// Adds a user-specifed key and value tag to a medical imaging resource.
    public func tagResource(_ input: TagResourceRequest, logger: Logger = AWSClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> TagResourceResponse {
        return try await self.client.execute(operation: "TagResource", path: "/tags/{resourceArn}", httpMethod: .POST, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// Removes tags from a medical imaging resource.
    public func untagResource(_ input: UntagResourceRequest, logger: Logger = AWSClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> UntagResourceResponse {
        return try await self.client.execute(operation: "UntagResource", path: "/tags/{resourceArn}", httpMethod: .DELETE, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// Update image set metadata attributes.
    public func updateImageSetMetadata(_ input: UpdateImageSetMetadataRequest, logger: Logger = AWSClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> UpdateImageSetMetadataResponse {
        return try await self.client.execute(operation: "UpdateImageSetMetadata", path: "/datastore/{datastoreId}/imageSet/{imageSetId}/updateImageSetMetadata", httpMethod: .POST, serviceConfig: self.config, input: input, hostPrefix: "runtime-", logger: logger, on: eventLoop)
    }

    // MARK: Streaming Async API Calls

    /// Get an image frame (pixel data) for an image set.
    public func getImageFrameStreaming(_ input: GetImageFrameRequest, logger: Logger = AWSClient.loggingDisabled, on eventLoop: EventLoop? = nil, _ stream: @escaping (ByteBuffer, EventLoop) -> EventLoopFuture<Void>) async throws -> GetImageFrameResponse {
        return try await self.client.execute(operation: "GetImageFrame", path: "/datastore/{datastoreId}/imageSet/{imageSetId}/getImageFrame", httpMethod: .POST, serviceConfig: self.config, input: input, hostPrefix: "runtime-", logger: logger, on: eventLoop, stream: stream)
    }

    /// Get metadata attributes for an image set.
    public func getImageSetMetadataStreaming(_ input: GetImageSetMetadataRequest, logger: Logger = AWSClient.loggingDisabled, on eventLoop: EventLoop? = nil, _ stream: @escaping (ByteBuffer, EventLoop) -> EventLoopFuture<Void>) async throws -> GetImageSetMetadataResponse {
        return try await self.client.execute(operation: "GetImageSetMetadata", path: "/datastore/{datastoreId}/imageSet/{imageSetId}/getImageSetMetadata", httpMethod: .POST, serviceConfig: self.config, input: input, hostPrefix: "runtime-", logger: logger, on: eventLoop, stream: stream)
    }
}

// MARK: Paginators

@available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
extension MedicalImaging {
    /// List import jobs created by this AWS account for a specific data store.
    /// Return PaginatorSequence for operation.
    ///
    /// - Parameters:
    ///   - input: Input for request
    ///   - logger: Logger used flot logging
    ///   - eventLoop: EventLoop to run this process on
    public func listDICOMImportJobsPaginator(
        _ input: ListDICOMImportJobsRequest,
        logger: Logger = AWSClient.loggingDisabled,
        on eventLoop: EventLoop? = nil
    ) -> AWSClient.PaginatorSequence<ListDICOMImportJobsRequest, ListDICOMImportJobsResponse> {
        return .init(
            input: input,
            command: self.listDICOMImportJobs,
            inputKey: \ListDICOMImportJobsRequest.nextToken,
            outputKey: \ListDICOMImportJobsResponse.nextToken,
            logger: logger,
            on: eventLoop
        )
    }

    /// List data stores created by this AWS account.
    /// Return PaginatorSequence for operation.
    ///
    /// - Parameters:
    ///   - input: Input for request
    ///   - logger: Logger used flot logging
    ///   - eventLoop: EventLoop to run this process on
    public func listDatastoresPaginator(
        _ input: ListDatastoresRequest,
        logger: Logger = AWSClient.loggingDisabled,
        on eventLoop: EventLoop? = nil
    ) -> AWSClient.PaginatorSequence<ListDatastoresRequest, ListDatastoresResponse> {
        return .init(
            input: input,
            command: self.listDatastores,
            inputKey: \ListDatastoresRequest.nextToken,
            outputKey: \ListDatastoresResponse.nextToken,
            logger: logger,
            on: eventLoop
        )
    }

    /// List image set versions.
    /// Return PaginatorSequence for operation.
    ///
    /// - Parameters:
    ///   - input: Input for request
    ///   - logger: Logger used flot logging
    ///   - eventLoop: EventLoop to run this process on
    public func listImageSetVersionsPaginator(
        _ input: ListImageSetVersionsRequest,
        logger: Logger = AWSClient.loggingDisabled,
        on eventLoop: EventLoop? = nil
    ) -> AWSClient.PaginatorSequence<ListImageSetVersionsRequest, ListImageSetVersionsResponse> {
        return .init(
            input: input,
            command: self.listImageSetVersions,
            inputKey: \ListImageSetVersionsRequest.nextToken,
            outputKey: \ListImageSetVersionsResponse.nextToken,
            logger: logger,
            on: eventLoop
        )
    }

    /// Search image sets based on defined input attributes.
    /// Return PaginatorSequence for operation.
    ///
    /// - Parameters:
    ///   - input: Input for request
    ///   - logger: Logger used flot logging
    ///   - eventLoop: EventLoop to run this process on
    public func searchImageSetsPaginator(
        _ input: SearchImageSetsRequest,
        logger: Logger = AWSClient.loggingDisabled,
        on eventLoop: EventLoop? = nil
    ) -> AWSClient.PaginatorSequence<SearchImageSetsRequest, SearchImageSetsResponse> {
        return .init(
            input: input,
            command: self.searchImageSets,
            inputKey: \SearchImageSetsRequest.nextToken,
            outputKey: \SearchImageSetsResponse.nextToken,
            logger: logger,
            on: eventLoop
        )
    }
}
