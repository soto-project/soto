//===----------------------------------------------------------------------===//
//
// This source file is part of the Soto for AWS open source project
//
// Copyright (c) 2017-2023 the Soto project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
// See CONTRIBUTORS.txt for the list of Soto project authors
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by https://github.com/soto-project/soto-codegenerator.
// DO NOT EDIT.

@_exported import SotoCore

/// Service object for interacting with AWS IoTDeviceAdvisor service.
///
/// Amazon Web Services IoT Core Device Advisor is a cloud-based, fully managed test capability for validating IoT devices during device software development. Device Advisor provides pre-built tests that you can use to validate IoT devices for reliable and secure connectivity with Amazon Web Services IoT Core before deploying devices to production. By using Device Advisor, you can confirm that your devices can connect to Amazon Web Services IoT Core, follow security best practices and, if applicable, receive software updates from IoT Device Management. You can also download signed qualification reports to submit to the Amazon Web Services Partner Network to get your device qualified for the Amazon Web Services Partner Device Catalog without the need to send your device in and wait for it to be tested.
public struct IoTDeviceAdvisor: AWSService {
    // MARK: Member variables

    /// Client used for communication with AWS
    public let client: AWSClient
    /// Service configuration
    public let config: AWSServiceConfig

    // MARK: Initialization

    /// Initialize the IoTDeviceAdvisor client
    /// - parameters:
    ///     - client: AWSClient used to process requests
    ///     - region: Region of server you want to communicate with. This will override the partition parameter.
    ///     - partition: AWS partition where service resides, standard (.aws), china (.awscn), government (.awsusgov).
    ///     - endpoint: Custom endpoint URL to use instead of standard AWS servers
    ///     - middleware: Middleware chain used to edit requests before they are sent and responses before they are decoded 
    ///     - timeout: Timeout value for HTTP requests
    ///     - byteBufferAllocator: Allocator for ByteBuffers
    ///     - options: Service options
    public init(
        client: AWSClient,
        region: SotoCore.Region? = nil,
        partition: AWSPartition = .aws,
        endpoint: String? = nil,
        middleware: AWSMiddlewareProtocol? = nil,
        timeout: TimeAmount? = nil,
        byteBufferAllocator: ByteBufferAllocator = ByteBufferAllocator(),
        options: AWSServiceConfig.Options = []
    ) {
        self.client = client
        self.config = AWSServiceConfig(
            region: region,
            partition: region?.partition ?? partition,
            serviceName: "IoTDeviceAdvisor",
            serviceIdentifier: "api.iotdeviceadvisor",
            signingName: "iotdeviceadvisor",
            serviceProtocol: .restjson,
            apiVersion: "2020-09-18",
            endpoint: endpoint,
            serviceEndpoints: Self.serviceEndpoints,
            errorType: IoTDeviceAdvisorErrorType.self,
            middleware: middleware,
            timeout: timeout,
            byteBufferAllocator: byteBufferAllocator,
            options: options
        )
    }


    /// custom endpoints for regions
    static var serviceEndpoints: [String: String] {[
        "ap-northeast-1": "api.iotdeviceadvisor.ap-northeast-1.amazonaws.com",
        "eu-west-1": "api.iotdeviceadvisor.eu-west-1.amazonaws.com",
        "us-east-1": "api.iotdeviceadvisor.us-east-1.amazonaws.com",
        "us-west-2": "api.iotdeviceadvisor.us-west-2.amazonaws.com"
    ]}



    // MARK: API Calls

    /// Creates a Device Advisor test suite. Requires permission to access the CreateSuiteDefinition action.
    @Sendable
    public func createSuiteDefinition(_ input: CreateSuiteDefinitionRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> CreateSuiteDefinitionResponse {
        return try await self.client.execute(
            operation: "CreateSuiteDefinition", 
            path: "/suiteDefinitions", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Deletes a Device Advisor test suite. Requires permission to access the DeleteSuiteDefinition action.
    @Sendable
    public func deleteSuiteDefinition(_ input: DeleteSuiteDefinitionRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DeleteSuiteDefinitionResponse {
        return try await self.client.execute(
            operation: "DeleteSuiteDefinition", 
            path: "/suiteDefinitions/{suiteDefinitionId}", 
            httpMethod: .DELETE, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Gets information about an Device Advisor endpoint.
    @Sendable
    public func getEndpoint(_ input: GetEndpointRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> GetEndpointResponse {
        return try await self.client.execute(
            operation: "GetEndpoint", 
            path: "/endpoint", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Gets information about a Device Advisor test suite. Requires permission to access the GetSuiteDefinition action.
    @Sendable
    public func getSuiteDefinition(_ input: GetSuiteDefinitionRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> GetSuiteDefinitionResponse {
        return try await self.client.execute(
            operation: "GetSuiteDefinition", 
            path: "/suiteDefinitions/{suiteDefinitionId}", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Gets information about a Device Advisor test suite run. Requires permission to access the GetSuiteRun action.
    @Sendable
    public func getSuiteRun(_ input: GetSuiteRunRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> GetSuiteRunResponse {
        return try await self.client.execute(
            operation: "GetSuiteRun", 
            path: "/suiteDefinitions/{suiteDefinitionId}/suiteRuns/{suiteRunId}", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Gets a report download link for a successful Device Advisor qualifying test suite run. Requires permission to access the GetSuiteRunReport action.
    @Sendable
    public func getSuiteRunReport(_ input: GetSuiteRunReportRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> GetSuiteRunReportResponse {
        return try await self.client.execute(
            operation: "GetSuiteRunReport", 
            path: "/suiteDefinitions/{suiteDefinitionId}/suiteRuns/{suiteRunId}/report", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Lists the Device Advisor test suites you have created. Requires permission to access the ListSuiteDefinitions action.
    @Sendable
    public func listSuiteDefinitions(_ input: ListSuiteDefinitionsRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> ListSuiteDefinitionsResponse {
        return try await self.client.execute(
            operation: "ListSuiteDefinitions", 
            path: "/suiteDefinitions", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Lists runs of the specified Device Advisor test suite. You can list all runs of the test suite, or the runs of a specific version of the test suite. Requires permission to access the ListSuiteRuns action.
    @Sendable
    public func listSuiteRuns(_ input: ListSuiteRunsRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> ListSuiteRunsResponse {
        return try await self.client.execute(
            operation: "ListSuiteRuns", 
            path: "/suiteRuns", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Lists the tags attached to an IoT Device Advisor resource. Requires permission to access the ListTagsForResource action.
    @Sendable
    public func listTagsForResource(_ input: ListTagsForResourceRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> ListTagsForResourceResponse {
        return try await self.client.execute(
            operation: "ListTagsForResource", 
            path: "/tags/{resourceArn}", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Starts a Device Advisor test suite run. Requires permission to access the StartSuiteRun action.
    @Sendable
    public func startSuiteRun(_ input: StartSuiteRunRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> StartSuiteRunResponse {
        return try await self.client.execute(
            operation: "StartSuiteRun", 
            path: "/suiteDefinitions/{suiteDefinitionId}/suiteRuns", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Stops a Device Advisor test suite run that is currently running. Requires permission to access the StopSuiteRun action.
    @Sendable
    public func stopSuiteRun(_ input: StopSuiteRunRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> StopSuiteRunResponse {
        return try await self.client.execute(
            operation: "StopSuiteRun", 
            path: "/suiteDefinitions/{suiteDefinitionId}/suiteRuns/{suiteRunId}/stop", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Adds to and modifies existing tags of an IoT Device Advisor resource. Requires permission to access the TagResource action.
    @Sendable
    public func tagResource(_ input: TagResourceRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> TagResourceResponse {
        return try await self.client.execute(
            operation: "TagResource", 
            path: "/tags/{resourceArn}", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Removes tags from an IoT Device Advisor resource. Requires permission to access the UntagResource action.
    @Sendable
    public func untagResource(_ input: UntagResourceRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> UntagResourceResponse {
        return try await self.client.execute(
            operation: "UntagResource", 
            path: "/tags/{resourceArn}", 
            httpMethod: .DELETE, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Updates a Device Advisor test suite. Requires permission to access the UpdateSuiteDefinition action.
    @Sendable
    public func updateSuiteDefinition(_ input: UpdateSuiteDefinitionRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> UpdateSuiteDefinitionResponse {
        return try await self.client.execute(
            operation: "UpdateSuiteDefinition", 
            path: "/suiteDefinitions/{suiteDefinitionId}", 
            httpMethod: .PATCH, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
}

extension IoTDeviceAdvisor {
    /// Initializer required by `AWSService.with(middlewares:timeout:byteBufferAllocator:options)`. You are not able to use this initializer directly as there are not public
    /// initializers for `AWSServiceConfig.Patch`. Please use `AWSService.with(middlewares:timeout:byteBufferAllocator:options)` instead.
    public init(from: IoTDeviceAdvisor, patch: AWSServiceConfig.Patch) {
        self.client = from.client
        self.config = from.config.with(patch: patch)
    }
}

// MARK: Paginators

@available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
extension IoTDeviceAdvisor {
    /// Lists the Device Advisor test suites you have created. Requires permission to access the ListSuiteDefinitions action.
    /// Return PaginatorSequence for operation.
    ///
    /// - Parameters:
    ///   - input: Input for request
    ///   - logger: Logger used flot logging
    public func listSuiteDefinitionsPaginator(
        _ input: ListSuiteDefinitionsRequest,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<ListSuiteDefinitionsRequest, ListSuiteDefinitionsResponse> {
        return .init(
            input: input,
            command: self.listSuiteDefinitions,
            inputKey: \ListSuiteDefinitionsRequest.nextToken,
            outputKey: \ListSuiteDefinitionsResponse.nextToken,
            logger: logger
        )
    }

    /// Lists runs of the specified Device Advisor test suite. You can list all runs of the test suite, or the runs of a specific version of the test suite. Requires permission to access the ListSuiteRuns action.
    /// Return PaginatorSequence for operation.
    ///
    /// - Parameters:
    ///   - input: Input for request
    ///   - logger: Logger used flot logging
    public func listSuiteRunsPaginator(
        _ input: ListSuiteRunsRequest,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<ListSuiteRunsRequest, ListSuiteRunsResponse> {
        return .init(
            input: input,
            command: self.listSuiteRuns,
            inputKey: \ListSuiteRunsRequest.nextToken,
            outputKey: \ListSuiteRunsResponse.nextToken,
            logger: logger
        )
    }
}

extension IoTDeviceAdvisor.ListSuiteDefinitionsRequest: AWSPaginateToken {
    public func usingPaginationToken(_ token: String) -> IoTDeviceAdvisor.ListSuiteDefinitionsRequest {
        return .init(
            maxResults: self.maxResults,
            nextToken: token
        )
    }
}

extension IoTDeviceAdvisor.ListSuiteRunsRequest: AWSPaginateToken {
    public func usingPaginationToken(_ token: String) -> IoTDeviceAdvisor.ListSuiteRunsRequest {
        return .init(
            maxResults: self.maxResults,
            nextToken: token,
            suiteDefinitionId: self.suiteDefinitionId,
            suiteDefinitionVersion: self.suiteDefinitionVersion
        )
    }
}
