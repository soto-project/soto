//===----------------------------------------------------------------------===//
//
// This source file is part of the Soto for AWS open source project
//
// Copyright (c) 2017-2023 the Soto project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
// See CONTRIBUTORS.txt for the list of Soto project authors
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by https://github.com/soto-project/soto-codegenerator.
// DO NOT EDIT.

@_exported import SotoCore

/// Service object for interacting with AWS OpenSearch service.
///
/// Use the Amazon OpenSearch Service configuration API to create, configure, and manage OpenSearch Service domains. The endpoint for configuration service requests is Region specific: es.region.amazonaws.com. For example, es.us-east-1.amazonaws.com. For a current list of supported Regions and endpoints, see Amazon Web Services service endpoints.
public struct OpenSearch: AWSService {
    // MARK: Member variables

    /// Client used for communication with AWS
    public let client: AWSClient
    /// Service configuration
    public let config: AWSServiceConfig

    // MARK: Initialization

    /// Initialize the OpenSearch client
    /// - parameters:
    ///     - client: AWSClient used to process requests
    ///     - region: Region of server you want to communicate with. This will override the partition parameter.
    ///     - partition: AWS partition where service resides, standard (.aws), china (.awscn), government (.awsusgov).
    ///     - endpoint: Custom endpoint URL to use instead of standard AWS servers
    ///     - middleware: Middleware chain used to edit requests before they are sent and responses before they are decoded 
    ///     - timeout: Timeout value for HTTP requests
    ///     - byteBufferAllocator: Allocator for ByteBuffers
    ///     - options: Service options
    public init(
        client: AWSClient,
        region: SotoCore.Region? = nil,
        partition: AWSPartition = .aws,
        endpoint: String? = nil,
        middleware: AWSMiddlewareProtocol? = nil,
        timeout: TimeAmount? = nil,
        byteBufferAllocator: ByteBufferAllocator = ByteBufferAllocator(),
        options: AWSServiceConfig.Options = []
    ) {
        self.client = client
        self.config = AWSServiceConfig(
            region: region,
            partition: region?.partition ?? partition,
            serviceName: "OpenSearch",
            serviceIdentifier: "es",
            serviceProtocol: .restjson,
            apiVersion: "2021-01-01",
            endpoint: endpoint,
            variantEndpoints: Self.variantEndpoints,
            errorType: OpenSearchErrorType.self,
            xmlNamespace: "http://es.amazonaws.com/doc/2021-01-01/",
            middleware: middleware,
            timeout: timeout,
            byteBufferAllocator: byteBufferAllocator,
            options: options
        )
    }




    /// FIPS and dualstack endpoints
    static var variantEndpoints: [EndpointVariantType: AWSServiceConfig.EndpointVariant] {[
        [.dualstack]: .init(endpoints: [
            "af-south-1": "aos.af-south-1.api.aws",
            "ap-east-1": "aos.ap-east-1.api.aws",
            "ap-northeast-1": "aos.ap-northeast-1.api.aws",
            "ap-northeast-2": "aos.ap-northeast-2.api.aws",
            "ap-northeast-3": "aos.ap-northeast-3.api.aws",
            "ap-south-1": "aos.ap-south-1.api.aws",
            "ap-south-2": "aos.ap-south-2.api.aws",
            "ap-southeast-1": "aos.ap-southeast-1.api.aws",
            "ap-southeast-2": "aos.ap-southeast-2.api.aws",
            "ap-southeast-3": "aos.ap-southeast-3.api.aws",
            "ap-southeast-4": "aos.ap-southeast-4.api.aws",
            "ca-central-1": "aos.ca-central-1.api.aws",
            "ca-west-1": "aos.ca-west-1.api.aws",
            "cn-north-1": "aos.cn-north-1.api.amazonwebservices.com.cn",
            "cn-northwest-1": "aos.cn-northwest-1.api.amazonwebservices.com.cn",
            "eu-central-1": "aos.eu-central-1.api.aws",
            "eu-central-2": "aos.eu-central-2.api.aws",
            "eu-north-1": "aos.eu-north-1.api.aws",
            "eu-south-1": "aos.eu-south-1.api.aws",
            "eu-south-2": "aos.eu-south-2.api.aws",
            "eu-west-1": "aos.eu-west-1.api.aws",
            "eu-west-2": "aos.eu-west-2.api.aws",
            "eu-west-3": "aos.eu-west-3.api.aws",
            "il-central-1": "aos.il-central-1.api.aws",
            "me-central-1": "aos.me-central-1.api.aws",
            "me-south-1": "aos.me-south-1.api.aws",
            "sa-east-1": "aos.sa-east-1.api.aws",
            "us-east-1": "aos.us-east-1.api.aws",
            "us-east-2": "aos.us-east-2.api.aws",
            "us-gov-east-1": "aos.us-gov-east-1.api.aws",
            "us-gov-west-1": "aos.us-gov-west-1.api.aws",
            "us-west-1": "aos.us-west-1.api.aws",
            "us-west-2": "aos.us-west-2.api.aws"
        ]),
        [.fips]: .init(endpoints: [
            "us-east-1": "es-fips.us-east-1.amazonaws.com",
            "us-east-2": "es-fips.us-east-2.amazonaws.com",
            "us-gov-east-1": "es-fips.us-gov-east-1.amazonaws.com",
            "us-gov-west-1": "es-fips.us-gov-west-1.amazonaws.com",
            "us-west-1": "es-fips.us-west-1.amazonaws.com",
            "us-west-2": "es-fips.us-west-2.amazonaws.com"
        ])
    ]}

    // MARK: API Calls

    /// Allows the destination Amazon OpenSearch Service domain owner to accept an inbound cross-cluster search connection request. For more information, see Cross-cluster search for Amazon OpenSearch Service.
    @Sendable
    public func acceptInboundConnection(_ input: AcceptInboundConnectionRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> AcceptInboundConnectionResponse {
        return try await self.client.execute(
            operation: "AcceptInboundConnection", 
            path: "/2021-01-01/opensearch/cc/inboundConnection/{ConnectionId}/accept", 
            httpMethod: .PUT, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Creates a new direct-query data source to the specified domain. For more information, see Creating Amazon OpenSearch Service data source integrations with Amazon S3.
    @Sendable
    public func addDataSource(_ input: AddDataSourceRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> AddDataSourceResponse {
        return try await self.client.execute(
            operation: "AddDataSource", 
            path: "/2021-01-01/opensearch/domain/{DomainName}/dataSource", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Attaches tags to an existing Amazon OpenSearch Service domain. Tags are a set of case-sensitive key-value pairs. A domain can have up to 10 tags. For more information, see Tagging Amazon OpenSearch Service domains.
    @Sendable
    public func addTags(_ input: AddTagsRequest, logger: Logger = AWSClient.loggingDisabled) async throws {
        return try await self.client.execute(
            operation: "AddTags", 
            path: "/2021-01-01/tags", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Associates a package with an Amazon OpenSearch Service domain. For more information, see Custom packages for Amazon OpenSearch Service.
    @Sendable
    public func associatePackage(_ input: AssociatePackageRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> AssociatePackageResponse {
        return try await self.client.execute(
            operation: "AssociatePackage", 
            path: "/2021-01-01/packages/associate/{PackageID}/{DomainName}", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Provides access to an Amazon OpenSearch Service domain through the use of an interface VPC endpoint.
    @Sendable
    public func authorizeVpcEndpointAccess(_ input: AuthorizeVpcEndpointAccessRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> AuthorizeVpcEndpointAccessResponse {
        return try await self.client.execute(
            operation: "AuthorizeVpcEndpointAccess", 
            path: "/2021-01-01/opensearch/domain/{DomainName}/authorizeVpcEndpointAccess", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Cancels a pending configuration change on an Amazon OpenSearch Service domain.
    @Sendable
    public func cancelDomainConfigChange(_ input: CancelDomainConfigChangeRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> CancelDomainConfigChangeResponse {
        return try await self.client.execute(
            operation: "CancelDomainConfigChange", 
            path: "/2021-01-01/opensearch/domain/{DomainName}/config/cancel", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Cancels a scheduled service software update for an Amazon OpenSearch Service domain. You can only perform this operation before the AutomatedUpdateDate and when the domain's UpdateStatus is PENDING_UPDATE. For more information, see Service software updates in Amazon OpenSearch Service.
    @Sendable
    public func cancelServiceSoftwareUpdate(_ input: CancelServiceSoftwareUpdateRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> CancelServiceSoftwareUpdateResponse {
        return try await self.client.execute(
            operation: "CancelServiceSoftwareUpdate", 
            path: "/2021-01-01/opensearch/serviceSoftwareUpdate/cancel", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Creates an Amazon OpenSearch Service domain. For more information, see Creating and managing Amazon OpenSearch Service domains.
    @Sendable
    public func createDomain(_ input: CreateDomainRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> CreateDomainResponse {
        return try await self.client.execute(
            operation: "CreateDomain", 
            path: "/2021-01-01/opensearch/domain", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Creates a new cross-cluster search connection from a source Amazon OpenSearch Service domain to a destination domain. For more information, see Cross-cluster search for Amazon OpenSearch Service.
    @Sendable
    public func createOutboundConnection(_ input: CreateOutboundConnectionRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> CreateOutboundConnectionResponse {
        return try await self.client.execute(
            operation: "CreateOutboundConnection", 
            path: "/2021-01-01/opensearch/cc/outboundConnection", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Creates a package for use with Amazon OpenSearch Service domains. For more information, see Custom packages for Amazon OpenSearch Service.
    @Sendable
    public func createPackage(_ input: CreatePackageRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> CreatePackageResponse {
        return try await self.client.execute(
            operation: "CreatePackage", 
            path: "/2021-01-01/packages", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Creates an Amazon OpenSearch Service-managed VPC endpoint.
    @Sendable
    public func createVpcEndpoint(_ input: CreateVpcEndpointRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> CreateVpcEndpointResponse {
        return try await self.client.execute(
            operation: "CreateVpcEndpoint", 
            path: "/2021-01-01/opensearch/vpcEndpoints", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Deletes a direct-query data source. For more information, see Deleting an Amazon OpenSearch Service data source with Amazon S3.
    @Sendable
    public func deleteDataSource(_ input: DeleteDataSourceRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DeleteDataSourceResponse {
        return try await self.client.execute(
            operation: "DeleteDataSource", 
            path: "/2021-01-01/opensearch/domain/{DomainName}/dataSource/{Name}", 
            httpMethod: .DELETE, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Deletes an Amazon OpenSearch Service domain and all of its data. You can't recover a domain after you delete it.
    @Sendable
    public func deleteDomain(_ input: DeleteDomainRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DeleteDomainResponse {
        return try await self.client.execute(
            operation: "DeleteDomain", 
            path: "/2021-01-01/opensearch/domain/{DomainName}", 
            httpMethod: .DELETE, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Allows the destination Amazon OpenSearch Service domain owner to delete an existing inbound cross-cluster search connection. For more information, see Cross-cluster search for Amazon OpenSearch Service.
    @Sendable
    public func deleteInboundConnection(_ input: DeleteInboundConnectionRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DeleteInboundConnectionResponse {
        return try await self.client.execute(
            operation: "DeleteInboundConnection", 
            path: "/2021-01-01/opensearch/cc/inboundConnection/{ConnectionId}", 
            httpMethod: .DELETE, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Allows the source Amazon OpenSearch Service domain owner to delete an existing outbound cross-cluster search connection. For more information, see Cross-cluster search for Amazon OpenSearch Service.
    @Sendable
    public func deleteOutboundConnection(_ input: DeleteOutboundConnectionRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DeleteOutboundConnectionResponse {
        return try await self.client.execute(
            operation: "DeleteOutboundConnection", 
            path: "/2021-01-01/opensearch/cc/outboundConnection/{ConnectionId}", 
            httpMethod: .DELETE, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Deletes an Amazon OpenSearch Service package. For more information, see Custom packages for Amazon OpenSearch Service.
    @Sendable
    public func deletePackage(_ input: DeletePackageRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DeletePackageResponse {
        return try await self.client.execute(
            operation: "DeletePackage", 
            path: "/2021-01-01/packages/{PackageID}", 
            httpMethod: .DELETE, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Deletes an Amazon OpenSearch Service-managed interface VPC endpoint.
    @Sendable
    public func deleteVpcEndpoint(_ input: DeleteVpcEndpointRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DeleteVpcEndpointResponse {
        return try await self.client.execute(
            operation: "DeleteVpcEndpoint", 
            path: "/2021-01-01/opensearch/vpcEndpoints/{VpcEndpointId}", 
            httpMethod: .DELETE, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Describes the domain configuration for the specified Amazon OpenSearch Service domain, including the domain ID, domain service endpoint, and domain ARN.
    @Sendable
    public func describeDomain(_ input: DescribeDomainRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DescribeDomainResponse {
        return try await self.client.execute(
            operation: "DescribeDomain", 
            path: "/2021-01-01/opensearch/domain/{DomainName}", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Returns the list of optimizations that Auto-Tune has made to an Amazon OpenSearch Service domain. For more information, see Auto-Tune for Amazon OpenSearch Service.
    @Sendable
    public func describeDomainAutoTunes(_ input: DescribeDomainAutoTunesRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DescribeDomainAutoTunesResponse {
        return try await self.client.execute(
            operation: "DescribeDomainAutoTunes", 
            path: "/2021-01-01/opensearch/domain/{DomainName}/autoTunes", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Returns information about the current blue/green deployment happening on an Amazon OpenSearch Service domain. For more information, see Making configuration changes in Amazon OpenSearch Service.
    @Sendable
    public func describeDomainChangeProgress(_ input: DescribeDomainChangeProgressRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DescribeDomainChangeProgressResponse {
        return try await self.client.execute(
            operation: "DescribeDomainChangeProgress", 
            path: "/2021-01-01/opensearch/domain/{DomainName}/progress", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Returns the configuration of an Amazon OpenSearch Service domain.
    @Sendable
    public func describeDomainConfig(_ input: DescribeDomainConfigRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DescribeDomainConfigResponse {
        return try await self.client.execute(
            operation: "DescribeDomainConfig", 
            path: "/2021-01-01/opensearch/domain/{DomainName}/config", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Returns information about domain and node health, the standby Availability Zone, number of nodes per Availability Zone, and shard count per node.
    @Sendable
    public func describeDomainHealth(_ input: DescribeDomainHealthRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DescribeDomainHealthResponse {
        return try await self.client.execute(
            operation: "DescribeDomainHealth", 
            path: "/2021-01-01/opensearch/domain/{DomainName}/health", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Returns information about domain and nodes, including data nodes, master nodes, ultrawarm nodes, Availability Zone(s), standby nodes, node configurations, and node states.
    @Sendable
    public func describeDomainNodes(_ input: DescribeDomainNodesRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DescribeDomainNodesResponse {
        return try await self.client.execute(
            operation: "DescribeDomainNodes", 
            path: "/2021-01-01/opensearch/domain/{DomainName}/nodes", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Returns domain configuration information about the specified Amazon OpenSearch Service domains.
    @Sendable
    public func describeDomains(_ input: DescribeDomainsRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DescribeDomainsResponse {
        return try await self.client.execute(
            operation: "DescribeDomains", 
            path: "/2021-01-01/opensearch/domain-info", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Describes the progress of a pre-update dry run analysis on an Amazon OpenSearch Service domain. For more information, see Determining whether a change will cause a blue/green deployment.
    @Sendable
    public func describeDryRunProgress(_ input: DescribeDryRunProgressRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DescribeDryRunProgressResponse {
        return try await self.client.execute(
            operation: "DescribeDryRunProgress", 
            path: "/2021-01-01/opensearch/domain/{DomainName}/dryRun", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Lists all the inbound cross-cluster search connections for a destination (remote) Amazon OpenSearch Service domain. For more information, see Cross-cluster search for Amazon OpenSearch Service.
    @Sendable
    public func describeInboundConnections(_ input: DescribeInboundConnectionsRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DescribeInboundConnectionsResponse {
        return try await self.client.execute(
            operation: "DescribeInboundConnections", 
            path: "/2021-01-01/opensearch/cc/inboundConnection/search", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Describes the instance count, storage, and master node limits for a given OpenSearch or Elasticsearch version and instance type.
    @Sendable
    public func describeInstanceTypeLimits(_ input: DescribeInstanceTypeLimitsRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DescribeInstanceTypeLimitsResponse {
        return try await self.client.execute(
            operation: "DescribeInstanceTypeLimits", 
            path: "/2021-01-01/opensearch/instanceTypeLimits/{EngineVersion}/{InstanceType}", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Lists all the outbound cross-cluster connections for a local (source) Amazon OpenSearch Service domain. For more information, see Cross-cluster search for Amazon OpenSearch Service.
    @Sendable
    public func describeOutboundConnections(_ input: DescribeOutboundConnectionsRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DescribeOutboundConnectionsResponse {
        return try await self.client.execute(
            operation: "DescribeOutboundConnections", 
            path: "/2021-01-01/opensearch/cc/outboundConnection/search", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Describes all packages available to OpenSearch Service. For more information, see Custom packages for Amazon OpenSearch Service.
    @Sendable
    public func describePackages(_ input: DescribePackagesRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DescribePackagesResponse {
        return try await self.client.execute(
            operation: "DescribePackages", 
            path: "/2021-01-01/packages/describe", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Describes the available Amazon OpenSearch Service Reserved Instance offerings for a given Region. For more information, see Reserved Instances in Amazon OpenSearch Service.
    @Sendable
    public func describeReservedInstanceOfferings(_ input: DescribeReservedInstanceOfferingsRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DescribeReservedInstanceOfferingsResponse {
        return try await self.client.execute(
            operation: "DescribeReservedInstanceOfferings", 
            path: "/2021-01-01/opensearch/reservedInstanceOfferings", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Describes the Amazon OpenSearch Service instances that you have reserved in a given Region. For more information, see Reserved Instances in Amazon OpenSearch Service.
    @Sendable
    public func describeReservedInstances(_ input: DescribeReservedInstancesRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DescribeReservedInstancesResponse {
        return try await self.client.execute(
            operation: "DescribeReservedInstances", 
            path: "/2021-01-01/opensearch/reservedInstances", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Describes one or more Amazon OpenSearch Service-managed VPC endpoints.
    @Sendable
    public func describeVpcEndpoints(_ input: DescribeVpcEndpointsRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DescribeVpcEndpointsResponse {
        return try await self.client.execute(
            operation: "DescribeVpcEndpoints", 
            path: "/2021-01-01/opensearch/vpcEndpoints/describe", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Removes a package from the specified Amazon OpenSearch Service domain. The package can't be in use with any OpenSearch index for the dissociation to succeed. The package is still available in OpenSearch Service for association later. For more information, see Custom packages for Amazon OpenSearch Service.
    @Sendable
    public func dissociatePackage(_ input: DissociatePackageRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DissociatePackageResponse {
        return try await self.client.execute(
            operation: "DissociatePackage", 
            path: "/2021-01-01/packages/dissociate/{PackageID}/{DomainName}", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Returns a map of OpenSearch or Elasticsearch versions and the versions you can upgrade them to.
    @Sendable
    public func getCompatibleVersions(_ input: GetCompatibleVersionsRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> GetCompatibleVersionsResponse {
        return try await self.client.execute(
            operation: "GetCompatibleVersions", 
            path: "/2021-01-01/opensearch/compatibleVersions", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Retrieves information about a direct query data source.
    @Sendable
    public func getDataSource(_ input: GetDataSourceRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> GetDataSourceResponse {
        return try await self.client.execute(
            operation: "GetDataSource", 
            path: "/2021-01-01/opensearch/domain/{DomainName}/dataSource/{Name}", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// The status of the maintenance action.
    @Sendable
    public func getDomainMaintenanceStatus(_ input: GetDomainMaintenanceStatusRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> GetDomainMaintenanceStatusResponse {
        return try await self.client.execute(
            operation: "GetDomainMaintenanceStatus", 
            path: "/2021-01-01/opensearch/domain/{DomainName}/domainMaintenance", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Returns a list of Amazon OpenSearch Service package versions, along with their creation time, commit message, and plugin properties (if the  package is a zip plugin package). For more information, see Custom packages for Amazon OpenSearch Service.
    @Sendable
    public func getPackageVersionHistory(_ input: GetPackageVersionHistoryRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> GetPackageVersionHistoryResponse {
        return try await self.client.execute(
            operation: "GetPackageVersionHistory", 
            path: "/2021-01-01/packages/{PackageID}/history", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Retrieves the complete history of the last 10 upgrades performed on an Amazon OpenSearch Service domain.
    @Sendable
    public func getUpgradeHistory(_ input: GetUpgradeHistoryRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> GetUpgradeHistoryResponse {
        return try await self.client.execute(
            operation: "GetUpgradeHistory", 
            path: "/2021-01-01/opensearch/upgradeDomain/{DomainName}/history", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Returns the most recent status of the last upgrade or upgrade eligibility check performed on an Amazon OpenSearch Service domain.
    @Sendable
    public func getUpgradeStatus(_ input: GetUpgradeStatusRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> GetUpgradeStatusResponse {
        return try await self.client.execute(
            operation: "GetUpgradeStatus", 
            path: "/2021-01-01/opensearch/upgradeDomain/{DomainName}/status", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Lists direct-query data sources for a specific domain. For more information, see  For more information, see Working with Amazon OpenSearch Service direct queries with Amazon S3.
    @Sendable
    public func listDataSources(_ input: ListDataSourcesRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> ListDataSourcesResponse {
        return try await self.client.execute(
            operation: "ListDataSources", 
            path: "/2021-01-01/opensearch/domain/{DomainName}/dataSource", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// A list of maintenance actions for the domain.
    @Sendable
    public func listDomainMaintenances(_ input: ListDomainMaintenancesRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> ListDomainMaintenancesResponse {
        return try await self.client.execute(
            operation: "ListDomainMaintenances", 
            path: "/2021-01-01/opensearch/domain/{DomainName}/domainMaintenances", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Returns the names of all Amazon OpenSearch Service domains owned by the current user in the active Region.
    @Sendable
    public func listDomainNames(_ input: ListDomainNamesRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> ListDomainNamesResponse {
        return try await self.client.execute(
            operation: "ListDomainNames", 
            path: "/2021-01-01/domain", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Lists all Amazon OpenSearch Service domains associated with a given package. For more information, see Custom packages for Amazon OpenSearch Service.
    @Sendable
    public func listDomainsForPackage(_ input: ListDomainsForPackageRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> ListDomainsForPackageResponse {
        return try await self.client.execute(
            operation: "ListDomainsForPackage", 
            path: "/2021-01-01/packages/{PackageID}/domains", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Lists all instance types and available features for a given OpenSearch or Elasticsearch version.
    @Sendable
    public func listInstanceTypeDetails(_ input: ListInstanceTypeDetailsRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> ListInstanceTypeDetailsResponse {
        return try await self.client.execute(
            operation: "ListInstanceTypeDetails", 
            path: "/2021-01-01/opensearch/instanceTypeDetails/{EngineVersion}", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Lists all packages associated with an Amazon OpenSearch Service domain. For more information, see Custom packages for Amazon OpenSearch Service.
    @Sendable
    public func listPackagesForDomain(_ input: ListPackagesForDomainRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> ListPackagesForDomainResponse {
        return try await self.client.execute(
            operation: "ListPackagesForDomain", 
            path: "/2021-01-01/domain/{DomainName}/packages", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Retrieves a list of configuration changes that are scheduled for a domain. These changes can be service software updates or blue/green Auto-Tune enhancements.
    @Sendable
    public func listScheduledActions(_ input: ListScheduledActionsRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> ListScheduledActionsResponse {
        return try await self.client.execute(
            operation: "ListScheduledActions", 
            path: "/2021-01-01/opensearch/domain/{DomainName}/scheduledActions", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Returns all resource tags for an Amazon OpenSearch Service domain. For more information, see Tagging Amazon OpenSearch Service domains.
    @Sendable
    public func listTags(_ input: ListTagsRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> ListTagsResponse {
        return try await self.client.execute(
            operation: "ListTags", 
            path: "/2021-01-01/tags", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Lists all versions of OpenSearch and Elasticsearch that Amazon OpenSearch Service supports.
    @Sendable
    public func listVersions(_ input: ListVersionsRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> ListVersionsResponse {
        return try await self.client.execute(
            operation: "ListVersions", 
            path: "/2021-01-01/opensearch/versions", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Retrieves information about each Amazon Web Services principal that is allowed to access a given Amazon OpenSearch Service domain through the use of an interface VPC endpoint.
    @Sendable
    public func listVpcEndpointAccess(_ input: ListVpcEndpointAccessRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> ListVpcEndpointAccessResponse {
        return try await self.client.execute(
            operation: "ListVpcEndpointAccess", 
            path: "/2021-01-01/opensearch/domain/{DomainName}/listVpcEndpointAccess", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Retrieves all Amazon OpenSearch Service-managed VPC endpoints in the current Amazon Web Services account and Region.
    @Sendable
    public func listVpcEndpoints(_ input: ListVpcEndpointsRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> ListVpcEndpointsResponse {
        return try await self.client.execute(
            operation: "ListVpcEndpoints", 
            path: "/2021-01-01/opensearch/vpcEndpoints", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Retrieves all Amazon OpenSearch Service-managed VPC endpoints associated with a particular domain.
    @Sendable
    public func listVpcEndpointsForDomain(_ input: ListVpcEndpointsForDomainRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> ListVpcEndpointsForDomainResponse {
        return try await self.client.execute(
            operation: "ListVpcEndpointsForDomain", 
            path: "/2021-01-01/opensearch/domain/{DomainName}/vpcEndpoints", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Allows you to purchase Amazon OpenSearch Service Reserved Instances.
    @Sendable
    public func purchaseReservedInstanceOffering(_ input: PurchaseReservedInstanceOfferingRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> PurchaseReservedInstanceOfferingResponse {
        return try await self.client.execute(
            operation: "PurchaseReservedInstanceOffering", 
            path: "/2021-01-01/opensearch/purchaseReservedInstanceOffering", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Allows the remote Amazon OpenSearch Service domain owner to reject an inbound cross-cluster connection request.
    @Sendable
    public func rejectInboundConnection(_ input: RejectInboundConnectionRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> RejectInboundConnectionResponse {
        return try await self.client.execute(
            operation: "RejectInboundConnection", 
            path: "/2021-01-01/opensearch/cc/inboundConnection/{ConnectionId}/reject", 
            httpMethod: .PUT, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Removes the specified set of tags from an Amazon OpenSearch Service domain. For more information, see  Tagging Amazon OpenSearch Service domains.
    @Sendable
    public func removeTags(_ input: RemoveTagsRequest, logger: Logger = AWSClient.loggingDisabled) async throws {
        return try await self.client.execute(
            operation: "RemoveTags", 
            path: "/2021-01-01/tags-removal", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Revokes access to an Amazon OpenSearch Service domain that was provided through an interface VPC endpoint.
    @Sendable
    public func revokeVpcEndpointAccess(_ input: RevokeVpcEndpointAccessRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> RevokeVpcEndpointAccessResponse {
        return try await self.client.execute(
            operation: "RevokeVpcEndpointAccess", 
            path: "/2021-01-01/opensearch/domain/{DomainName}/revokeVpcEndpointAccess", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Starts the node maintenance process on the data node. These processes can include a node reboot, an Opensearch or Elasticsearch process restart, or a Dashboard or Kibana restart.
    @Sendable
    public func startDomainMaintenance(_ input: StartDomainMaintenanceRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> StartDomainMaintenanceResponse {
        return try await self.client.execute(
            operation: "StartDomainMaintenance", 
            path: "/2021-01-01/opensearch/domain/{DomainName}/domainMaintenance", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Schedules a service software update for an Amazon OpenSearch Service domain. For more information, see Service software updates in Amazon OpenSearch Service.
    @Sendable
    public func startServiceSoftwareUpdate(_ input: StartServiceSoftwareUpdateRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> StartServiceSoftwareUpdateResponse {
        return try await self.client.execute(
            operation: "StartServiceSoftwareUpdate", 
            path: "/2021-01-01/opensearch/serviceSoftwareUpdate/start", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Updates a direct-query data source. For more information, see Working with Amazon OpenSearch Service data source integrations with Amazon S3.
    @Sendable
    public func updateDataSource(_ input: UpdateDataSourceRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> UpdateDataSourceResponse {
        return try await self.client.execute(
            operation: "UpdateDataSource", 
            path: "/2021-01-01/opensearch/domain/{DomainName}/dataSource/{Name}", 
            httpMethod: .PUT, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Modifies the cluster configuration of the specified Amazon OpenSearch Service domain.
    @Sendable
    public func updateDomainConfig(_ input: UpdateDomainConfigRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> UpdateDomainConfigResponse {
        return try await self.client.execute(
            operation: "UpdateDomainConfig", 
            path: "/2021-01-01/opensearch/domain/{DomainName}/config", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Updates a package for use with Amazon OpenSearch Service domains. For more information, see Custom packages for Amazon OpenSearch Service.
    @Sendable
    public func updatePackage(_ input: UpdatePackageRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> UpdatePackageResponse {
        return try await self.client.execute(
            operation: "UpdatePackage", 
            path: "/2021-01-01/packages/update", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Reschedules a planned domain configuration change for a later time. This change can be a scheduled service software update or a blue/green Auto-Tune enhancement.
    @Sendable
    public func updateScheduledAction(_ input: UpdateScheduledActionRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> UpdateScheduledActionResponse {
        return try await self.client.execute(
            operation: "UpdateScheduledAction", 
            path: "/2021-01-01/opensearch/domain/{DomainName}/scheduledAction/update", 
            httpMethod: .PUT, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Modifies an Amazon OpenSearch Service-managed interface VPC endpoint.
    @Sendable
    public func updateVpcEndpoint(_ input: UpdateVpcEndpointRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> UpdateVpcEndpointResponse {
        return try await self.client.execute(
            operation: "UpdateVpcEndpoint", 
            path: "/2021-01-01/opensearch/vpcEndpoints/update", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Allows you to either upgrade your Amazon OpenSearch Service domain or perform an upgrade eligibility check to a compatible version of OpenSearch or Elasticsearch.
    @Sendable
    public func upgradeDomain(_ input: UpgradeDomainRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> UpgradeDomainResponse {
        return try await self.client.execute(
            operation: "UpgradeDomain", 
            path: "/2021-01-01/opensearch/upgradeDomain", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
}

extension OpenSearch {
    /// Initializer required by `AWSService.with(middlewares:timeout:byteBufferAllocator:options)`. You are not able to use this initializer directly as there are not public
    /// initializers for `AWSServiceConfig.Patch`. Please use `AWSService.with(middlewares:timeout:byteBufferAllocator:options)` instead.
    public init(from: OpenSearch, patch: AWSServiceConfig.Patch) {
        self.client = from.client
        self.config = from.config.with(patch: patch)
    }
}

// MARK: Paginators

@available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
extension OpenSearch {
    /// Returns the list of optimizations that Auto-Tune has made to an Amazon OpenSearch Service domain. For more information, see Auto-Tune for Amazon OpenSearch Service.
    /// Return PaginatorSequence for operation.
    ///
    /// - Parameters:
    ///   - input: Input for request
    ///   - logger: Logger used flot logging
    public func describeDomainAutoTunesPaginator(
        _ input: DescribeDomainAutoTunesRequest,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<DescribeDomainAutoTunesRequest, DescribeDomainAutoTunesResponse> {
        return .init(
            input: input,
            command: self.describeDomainAutoTunes,
            inputKey: \DescribeDomainAutoTunesRequest.nextToken,
            outputKey: \DescribeDomainAutoTunesResponse.nextToken,
            logger: logger
        )
    }

    /// Lists all the inbound cross-cluster search connections for a destination (remote) Amazon OpenSearch Service domain. For more information, see Cross-cluster search for Amazon OpenSearch Service.
    /// Return PaginatorSequence for operation.
    ///
    /// - Parameters:
    ///   - input: Input for request
    ///   - logger: Logger used flot logging
    public func describeInboundConnectionsPaginator(
        _ input: DescribeInboundConnectionsRequest,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<DescribeInboundConnectionsRequest, DescribeInboundConnectionsResponse> {
        return .init(
            input: input,
            command: self.describeInboundConnections,
            inputKey: \DescribeInboundConnectionsRequest.nextToken,
            outputKey: \DescribeInboundConnectionsResponse.nextToken,
            logger: logger
        )
    }

    /// Lists all the outbound cross-cluster connections for a local (source) Amazon OpenSearch Service domain. For more information, see Cross-cluster search for Amazon OpenSearch Service.
    /// Return PaginatorSequence for operation.
    ///
    /// - Parameters:
    ///   - input: Input for request
    ///   - logger: Logger used flot logging
    public func describeOutboundConnectionsPaginator(
        _ input: DescribeOutboundConnectionsRequest,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<DescribeOutboundConnectionsRequest, DescribeOutboundConnectionsResponse> {
        return .init(
            input: input,
            command: self.describeOutboundConnections,
            inputKey: \DescribeOutboundConnectionsRequest.nextToken,
            outputKey: \DescribeOutboundConnectionsResponse.nextToken,
            logger: logger
        )
    }

    /// Describes all packages available to OpenSearch Service. For more information, see Custom packages for Amazon OpenSearch Service.
    /// Return PaginatorSequence for operation.
    ///
    /// - Parameters:
    ///   - input: Input for request
    ///   - logger: Logger used flot logging
    public func describePackagesPaginator(
        _ input: DescribePackagesRequest,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<DescribePackagesRequest, DescribePackagesResponse> {
        return .init(
            input: input,
            command: self.describePackages,
            inputKey: \DescribePackagesRequest.nextToken,
            outputKey: \DescribePackagesResponse.nextToken,
            logger: logger
        )
    }

    /// Describes the available Amazon OpenSearch Service Reserved Instance offerings for a given Region. For more information, see Reserved Instances in Amazon OpenSearch Service.
    /// Return PaginatorSequence for operation.
    ///
    /// - Parameters:
    ///   - input: Input for request
    ///   - logger: Logger used flot logging
    public func describeReservedInstanceOfferingsPaginator(
        _ input: DescribeReservedInstanceOfferingsRequest,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<DescribeReservedInstanceOfferingsRequest, DescribeReservedInstanceOfferingsResponse> {
        return .init(
            input: input,
            command: self.describeReservedInstanceOfferings,
            inputKey: \DescribeReservedInstanceOfferingsRequest.nextToken,
            outputKey: \DescribeReservedInstanceOfferingsResponse.nextToken,
            logger: logger
        )
    }

    /// Describes the Amazon OpenSearch Service instances that you have reserved in a given Region. For more information, see Reserved Instances in Amazon OpenSearch Service.
    /// Return PaginatorSequence for operation.
    ///
    /// - Parameters:
    ///   - input: Input for request
    ///   - logger: Logger used flot logging
    public func describeReservedInstancesPaginator(
        _ input: DescribeReservedInstancesRequest,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<DescribeReservedInstancesRequest, DescribeReservedInstancesResponse> {
        return .init(
            input: input,
            command: self.describeReservedInstances,
            inputKey: \DescribeReservedInstancesRequest.nextToken,
            outputKey: \DescribeReservedInstancesResponse.nextToken,
            logger: logger
        )
    }

    /// Returns a list of Amazon OpenSearch Service package versions, along with their creation time, commit message, and plugin properties (if the  package is a zip plugin package). For more information, see Custom packages for Amazon OpenSearch Service.
    /// Return PaginatorSequence for operation.
    ///
    /// - Parameters:
    ///   - input: Input for request
    ///   - logger: Logger used flot logging
    public func getPackageVersionHistoryPaginator(
        _ input: GetPackageVersionHistoryRequest,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<GetPackageVersionHistoryRequest, GetPackageVersionHistoryResponse> {
        return .init(
            input: input,
            command: self.getPackageVersionHistory,
            inputKey: \GetPackageVersionHistoryRequest.nextToken,
            outputKey: \GetPackageVersionHistoryResponse.nextToken,
            logger: logger
        )
    }

    /// Retrieves the complete history of the last 10 upgrades performed on an Amazon OpenSearch Service domain.
    /// Return PaginatorSequence for operation.
    ///
    /// - Parameters:
    ///   - input: Input for request
    ///   - logger: Logger used flot logging
    public func getUpgradeHistoryPaginator(
        _ input: GetUpgradeHistoryRequest,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<GetUpgradeHistoryRequest, GetUpgradeHistoryResponse> {
        return .init(
            input: input,
            command: self.getUpgradeHistory,
            inputKey: \GetUpgradeHistoryRequest.nextToken,
            outputKey: \GetUpgradeHistoryResponse.nextToken,
            logger: logger
        )
    }

    /// A list of maintenance actions for the domain.
    /// Return PaginatorSequence for operation.
    ///
    /// - Parameters:
    ///   - input: Input for request
    ///   - logger: Logger used flot logging
    public func listDomainMaintenancesPaginator(
        _ input: ListDomainMaintenancesRequest,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<ListDomainMaintenancesRequest, ListDomainMaintenancesResponse> {
        return .init(
            input: input,
            command: self.listDomainMaintenances,
            inputKey: \ListDomainMaintenancesRequest.nextToken,
            outputKey: \ListDomainMaintenancesResponse.nextToken,
            logger: logger
        )
    }

    /// Lists all Amazon OpenSearch Service domains associated with a given package. For more information, see Custom packages for Amazon OpenSearch Service.
    /// Return PaginatorSequence for operation.
    ///
    /// - Parameters:
    ///   - input: Input for request
    ///   - logger: Logger used flot logging
    public func listDomainsForPackagePaginator(
        _ input: ListDomainsForPackageRequest,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<ListDomainsForPackageRequest, ListDomainsForPackageResponse> {
        return .init(
            input: input,
            command: self.listDomainsForPackage,
            inputKey: \ListDomainsForPackageRequest.nextToken,
            outputKey: \ListDomainsForPackageResponse.nextToken,
            logger: logger
        )
    }

    /// Lists all instance types and available features for a given OpenSearch or Elasticsearch version.
    /// Return PaginatorSequence for operation.
    ///
    /// - Parameters:
    ///   - input: Input for request
    ///   - logger: Logger used flot logging
    public func listInstanceTypeDetailsPaginator(
        _ input: ListInstanceTypeDetailsRequest,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<ListInstanceTypeDetailsRequest, ListInstanceTypeDetailsResponse> {
        return .init(
            input: input,
            command: self.listInstanceTypeDetails,
            inputKey: \ListInstanceTypeDetailsRequest.nextToken,
            outputKey: \ListInstanceTypeDetailsResponse.nextToken,
            logger: logger
        )
    }

    /// Lists all packages associated with an Amazon OpenSearch Service domain. For more information, see Custom packages for Amazon OpenSearch Service.
    /// Return PaginatorSequence for operation.
    ///
    /// - Parameters:
    ///   - input: Input for request
    ///   - logger: Logger used flot logging
    public func listPackagesForDomainPaginator(
        _ input: ListPackagesForDomainRequest,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<ListPackagesForDomainRequest, ListPackagesForDomainResponse> {
        return .init(
            input: input,
            command: self.listPackagesForDomain,
            inputKey: \ListPackagesForDomainRequest.nextToken,
            outputKey: \ListPackagesForDomainResponse.nextToken,
            logger: logger
        )
    }

    /// Retrieves a list of configuration changes that are scheduled for a domain. These changes can be service software updates or blue/green Auto-Tune enhancements.
    /// Return PaginatorSequence for operation.
    ///
    /// - Parameters:
    ///   - input: Input for request
    ///   - logger: Logger used flot logging
    public func listScheduledActionsPaginator(
        _ input: ListScheduledActionsRequest,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<ListScheduledActionsRequest, ListScheduledActionsResponse> {
        return .init(
            input: input,
            command: self.listScheduledActions,
            inputKey: \ListScheduledActionsRequest.nextToken,
            outputKey: \ListScheduledActionsResponse.nextToken,
            logger: logger
        )
    }

    /// Lists all versions of OpenSearch and Elasticsearch that Amazon OpenSearch Service supports.
    /// Return PaginatorSequence for operation.
    ///
    /// - Parameters:
    ///   - input: Input for request
    ///   - logger: Logger used flot logging
    public func listVersionsPaginator(
        _ input: ListVersionsRequest,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<ListVersionsRequest, ListVersionsResponse> {
        return .init(
            input: input,
            command: self.listVersions,
            inputKey: \ListVersionsRequest.nextToken,
            outputKey: \ListVersionsResponse.nextToken,
            logger: logger
        )
    }
}

extension OpenSearch.DescribeDomainAutoTunesRequest: AWSPaginateToken {
    public func usingPaginationToken(_ token: String) -> OpenSearch.DescribeDomainAutoTunesRequest {
        return .init(
            domainName: self.domainName,
            maxResults: self.maxResults,
            nextToken: token
        )
    }
}

extension OpenSearch.DescribeInboundConnectionsRequest: AWSPaginateToken {
    public func usingPaginationToken(_ token: String) -> OpenSearch.DescribeInboundConnectionsRequest {
        return .init(
            filters: self.filters,
            maxResults: self.maxResults,
            nextToken: token
        )
    }
}

extension OpenSearch.DescribeOutboundConnectionsRequest: AWSPaginateToken {
    public func usingPaginationToken(_ token: String) -> OpenSearch.DescribeOutboundConnectionsRequest {
        return .init(
            filters: self.filters,
            maxResults: self.maxResults,
            nextToken: token
        )
    }
}

extension OpenSearch.DescribePackagesRequest: AWSPaginateToken {
    public func usingPaginationToken(_ token: String) -> OpenSearch.DescribePackagesRequest {
        return .init(
            filters: self.filters,
            maxResults: self.maxResults,
            nextToken: token
        )
    }
}

extension OpenSearch.DescribeReservedInstanceOfferingsRequest: AWSPaginateToken {
    public func usingPaginationToken(_ token: String) -> OpenSearch.DescribeReservedInstanceOfferingsRequest {
        return .init(
            maxResults: self.maxResults,
            nextToken: token,
            reservedInstanceOfferingId: self.reservedInstanceOfferingId
        )
    }
}

extension OpenSearch.DescribeReservedInstancesRequest: AWSPaginateToken {
    public func usingPaginationToken(_ token: String) -> OpenSearch.DescribeReservedInstancesRequest {
        return .init(
            maxResults: self.maxResults,
            nextToken: token,
            reservedInstanceId: self.reservedInstanceId
        )
    }
}

extension OpenSearch.GetPackageVersionHistoryRequest: AWSPaginateToken {
    public func usingPaginationToken(_ token: String) -> OpenSearch.GetPackageVersionHistoryRequest {
        return .init(
            maxResults: self.maxResults,
            nextToken: token,
            packageID: self.packageID
        )
    }
}

extension OpenSearch.GetUpgradeHistoryRequest: AWSPaginateToken {
    public func usingPaginationToken(_ token: String) -> OpenSearch.GetUpgradeHistoryRequest {
        return .init(
            domainName: self.domainName,
            maxResults: self.maxResults,
            nextToken: token
        )
    }
}

extension OpenSearch.ListDomainMaintenancesRequest: AWSPaginateToken {
    public func usingPaginationToken(_ token: String) -> OpenSearch.ListDomainMaintenancesRequest {
        return .init(
            action: self.action,
            domainName: self.domainName,
            maxResults: self.maxResults,
            nextToken: token,
            status: self.status
        )
    }
}

extension OpenSearch.ListDomainsForPackageRequest: AWSPaginateToken {
    public func usingPaginationToken(_ token: String) -> OpenSearch.ListDomainsForPackageRequest {
        return .init(
            maxResults: self.maxResults,
            nextToken: token,
            packageID: self.packageID
        )
    }
}

extension OpenSearch.ListInstanceTypeDetailsRequest: AWSPaginateToken {
    public func usingPaginationToken(_ token: String) -> OpenSearch.ListInstanceTypeDetailsRequest {
        return .init(
            domainName: self.domainName,
            engineVersion: self.engineVersion,
            instanceType: self.instanceType,
            maxResults: self.maxResults,
            nextToken: token,
            retrieveAZs: self.retrieveAZs
        )
    }
}

extension OpenSearch.ListPackagesForDomainRequest: AWSPaginateToken {
    public func usingPaginationToken(_ token: String) -> OpenSearch.ListPackagesForDomainRequest {
        return .init(
            domainName: self.domainName,
            maxResults: self.maxResults,
            nextToken: token
        )
    }
}

extension OpenSearch.ListScheduledActionsRequest: AWSPaginateToken {
    public func usingPaginationToken(_ token: String) -> OpenSearch.ListScheduledActionsRequest {
        return .init(
            domainName: self.domainName,
            maxResults: self.maxResults,
            nextToken: token
        )
    }
}

extension OpenSearch.ListVersionsRequest: AWSPaginateToken {
    public func usingPaginationToken(_ token: String) -> OpenSearch.ListVersionsRequest {
        return .init(
            maxResults: self.maxResults,
            nextToken: token
        )
    }
}
