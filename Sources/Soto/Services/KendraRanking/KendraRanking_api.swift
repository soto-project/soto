//===----------------------------------------------------------------------===//
//
// This source file is part of the Soto for AWS open source project
//
// Copyright (c) 2017-2023 the Soto project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
// See CONTRIBUTORS.txt for the list of Soto project authors
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by https://github.com/soto-project/soto-codegenerator.
// DO NOT EDIT.

@_exported import SotoCore

/// Service object for interacting with AWS KendraRanking service.
///
/// Amazon Kendra Intelligent Ranking uses Amazon Kendra  semantic search capabilities to intelligently re-rank a search  service's results.
public struct KendraRanking: AWSService {
    // MARK: Member variables

    /// Client used for communication with AWS
    public let client: AWSClient
    /// Service configuration
    public let config: AWSServiceConfig

    // MARK: Initialization

    /// Initialize the KendraRanking client
    /// - parameters:
    ///     - client: AWSClient used to process requests
    ///     - region: Region of server you want to communicate with. This will override the partition parameter.
    ///     - partition: AWS partition where service resides, standard (.aws), china (.awscn), government (.awsusgov).
    ///     - endpoint: Custom endpoint URL to use instead of standard AWS servers
    ///     - timeout: Timeout value for HTTP requests
    public init(
        client: AWSClient,
        region: SotoCore.Region? = nil,
        partition: AWSPartition = .aws,
        endpoint: String? = nil,
        timeout: TimeAmount? = nil,
        byteBufferAllocator: ByteBufferAllocator = ByteBufferAllocator(),
        options: AWSServiceConfig.Options = []
    ) {
        self.client = client
        self.config = AWSServiceConfig(
            region: region,
            partition: region?.partition ?? partition,
            amzTarget: "AWSKendraRerankingFrontendService",
            service: "kendra-ranking",
            serviceProtocol: .json(version: "1.0"),
            apiVersion: "2022-10-19",
            endpoint: endpoint,
            serviceEndpoints: [
                "af-south-1": "kendra-ranking.af-south-1.api.aws",
                "ap-east-1": "kendra-ranking.ap-east-1.api.aws",
                "ap-northeast-2": "kendra-ranking.ap-northeast-2.api.aws",
                "ap-northeast-3": "kendra-ranking.ap-northeast-3.api.aws",
                "ap-south-2": "kendra-ranking.ap-south-2.api.aws",
                "ap-southeast-1": "kendra-ranking.ap-southeast-1.api.aws",
                "ap-southeast-2": "kendra-ranking.ap-southeast-2.api.aws",
                "ap-southeast-3": "kendra-ranking.ap-southeast-3.api.aws",
                "ca-central-1": "kendra-ranking.ca-central-1.api.aws",
                "cn-north-1": "kendra-ranking.cn-north-1.api.amazonwebservices.com.cn",
                "cn-northwest-1": "kendra-ranking.cn-northwest-1.api.amazonwebservices.com.cn",
                "eu-central-1": "kendra-ranking.eu-central-1.api.aws",
                "eu-central-2": "kendra-ranking.eu-central-2.api.aws",
                "eu-north-1": "kendra-ranking.eu-north-1.api.aws",
                "eu-south-1": "kendra-ranking.eu-south-1.api.aws",
                "eu-south-2": "kendra-ranking.eu-south-2.api.aws",
                "eu-west-1": "kendra-ranking.eu-west-1.api.aws",
                "eu-west-2": "kendra-ranking.eu-west-2.api.aws",
                "eu-west-3": "kendra-ranking.eu-west-3.api.aws",
                "me-central-1": "kendra-ranking.me-central-1.api.aws",
                "me-south-1": "kendra-ranking.me-south-1.api.aws",
                "sa-east-1": "kendra-ranking.sa-east-1.api.aws",
                "us-east-1": "kendra-ranking.us-east-1.api.aws",
                "us-east-2": "kendra-ranking.us-east-2.api.aws",
                "us-gov-east-1": "kendra-ranking.us-gov-east-1.api.aws",
                "us-gov-west-1": "kendra-ranking.us-gov-west-1.api.aws",
                "us-west-1": "kendra-ranking.us-west-1.api.aws",
                "us-west-2": "kendra-ranking.us-west-2.api.aws"
            ],
            variantEndpoints: [
                [.fips]: .init(endpoints: [
                    "af-south-1": "kendra-ranking-fips.af-south-1.api.aws",
                    "ap-east-1": "kendra-ranking-fips.ap-east-1.api.aws",
                    "ap-northeast-2": "kendra-ranking-fips.ap-northeast-2.api.aws",
                    "ap-northeast-3": "kendra-ranking-fips.ap-northeast-3.api.aws",
                    "ap-south-2": "kendra-ranking-fips.ap-south-2.api.aws",
                    "ap-southeast-1": "kendra-ranking-fips.ap-southeast-1.api.aws",
                    "ap-southeast-2": "kendra-ranking-fips.ap-southeast-2.api.aws",
                    "ap-southeast-3": "kendra-ranking-fips.ap-southeast-3.api.aws",
                    "ca-central-1": "kendra-ranking-fips.ca-central-1.api.aws",
                    "cn-north-1": "kendra-ranking-fips.cn-north-1.api.amazonwebservices.com.cn",
                    "cn-northwest-1": "kendra-ranking-fips.cn-northwest-1.api.amazonwebservices.com.cn",
                    "eu-central-1": "kendra-ranking-fips.eu-central-1.api.aws",
                    "eu-central-2": "kendra-ranking-fips.eu-central-2.api.aws",
                    "eu-north-1": "kendra-ranking-fips.eu-north-1.api.aws",
                    "eu-south-1": "kendra-ranking-fips.eu-south-1.api.aws",
                    "eu-south-2": "kendra-ranking-fips.eu-south-2.api.aws",
                    "eu-west-1": "kendra-ranking-fips.eu-west-1.api.aws",
                    "eu-west-2": "kendra-ranking-fips.eu-west-2.api.aws",
                    "eu-west-3": "kendra-ranking-fips.eu-west-3.api.aws",
                    "me-central-1": "kendra-ranking-fips.me-central-1.api.aws",
                    "me-south-1": "kendra-ranking-fips.me-south-1.api.aws",
                    "sa-east-1": "kendra-ranking-fips.sa-east-1.api.aws",
                    "us-east-1": "kendra-ranking-fips.us-east-1.api.aws",
                    "us-east-2": "kendra-ranking-fips.us-east-2.api.aws",
                    "us-gov-east-1": "kendra-ranking-fips.us-gov-east-1.api.aws",
                    "us-gov-west-1": "kendra-ranking-fips.us-gov-west-1.api.aws",
                    "us-west-1": "kendra-ranking-fips.us-west-1.api.aws",
                    "us-west-2": "kendra-ranking-fips.us-west-2.api.aws"
                ])
            ],
            errorType: KendraRankingErrorType.self,
            timeout: timeout,
            byteBufferAllocator: byteBufferAllocator,
            options: options
        )
    }

    // MARK: API Calls

    /// Creates a rescore execution plan. A rescore execution  plan is an Amazon Kendra Intelligent Ranking resource  used for provisioning the Rescore API. You set  the number of capacity units that you require for  Amazon Kendra Intelligent Ranking to rescore or re-rank  a search service's results. For an example of using the  CreateRescoreExecutionPlan API, including using  the Python and Java SDKs, see Semantically  ranking a search service's results.
    public func createRescoreExecutionPlan(_ input: CreateRescoreExecutionPlanRequest, logger: Logger = AWSClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<CreateRescoreExecutionPlanResponse> {
        return self.client.execute(operation: "CreateRescoreExecutionPlan", path: "/rescore-execution-plans", httpMethod: .POST, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// Deletes a rescore execution plan. A rescore execution  plan is an Amazon Kendra Intelligent Ranking resource  used for provisioning the Rescore API.
    @discardableResult public func deleteRescoreExecutionPlan(_ input: DeleteRescoreExecutionPlanRequest, logger: Logger = AWSClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<Void> {
        return self.client.execute(operation: "DeleteRescoreExecutionPlan", path: "/rescore-execution-plans/{Id}", httpMethod: .DELETE, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// Gets information about a rescore execution plan. A rescore  execution plan is an Amazon Kendra Intelligent Ranking  resource used for provisioning the Rescore API.
    public func describeRescoreExecutionPlan(_ input: DescribeRescoreExecutionPlanRequest, logger: Logger = AWSClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DescribeRescoreExecutionPlanResponse> {
        return self.client.execute(operation: "DescribeRescoreExecutionPlan", path: "/rescore-execution-plans/{Id}", httpMethod: .GET, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// Lists your rescore execution plans. A rescore execution plan  is an Amazon Kendra Intelligent Ranking resource used for  provisioning the Rescore API.
    public func listRescoreExecutionPlans(_ input: ListRescoreExecutionPlansRequest, logger: Logger = AWSClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<ListRescoreExecutionPlansResponse> {
        return self.client.execute(operation: "ListRescoreExecutionPlans", path: "/rescore-execution-plans", httpMethod: .GET, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// Gets a list of tags associated with a specified resource.  A rescore execution plan is an example of a resource that  can have tags associated with it.
    public func listTagsForResource(_ input: ListTagsForResourceRequest, logger: Logger = AWSClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<ListTagsForResourceResponse> {
        return self.client.execute(operation: "ListTagsForResource", path: "/", httpMethod: .POST, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// Rescores or re-ranks search results from a search service  such as OpenSearch (self managed). You use the semantic search  capabilities of Amazon Kendra Intelligent Ranking to  improve the search service's results.
    public func rescore(_ input: RescoreRequest, logger: Logger = AWSClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<RescoreResult> {
        return self.client.execute(operation: "Rescore", path: "/rescore-execution-plans/{RescoreExecutionPlanId}/rescore", httpMethod: .POST, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// Adds a specified tag to a specified rescore execution  plan. A rescore execution plan is an Amazon Kendra  Intelligent Ranking resource used for provisioning the  Rescore API. If the tag already exists,  the existing value is replaced with the new value.
    public func tagResource(_ input: TagResourceRequest, logger: Logger = AWSClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<TagResourceResponse> {
        return self.client.execute(operation: "TagResource", path: "/", httpMethod: .POST, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// Removes a tag from a rescore execution plan. A rescore  execution plan is an Amazon Kendra Intelligent  Ranking resource used for provisioning the  Rescore operation.
    public func untagResource(_ input: UntagResourceRequest, logger: Logger = AWSClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<UntagResourceResponse> {
        return self.client.execute(operation: "UntagResource", path: "/", httpMethod: .POST, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// Updates a rescore execution plan. A rescore execution plan  is an Amazon Kendra Intelligent Ranking resource used for  provisioning the Rescore API. You can update the  number of capacity units you require for Amazon Kendra  Intelligent Ranking to rescore or re-rank a search service's  results.
    @discardableResult public func updateRescoreExecutionPlan(_ input: UpdateRescoreExecutionPlanRequest, logger: Logger = AWSClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<Void> {
        return self.client.execute(operation: "UpdateRescoreExecutionPlan", path: "/rescore-execution-plans/{Id}", httpMethod: .PUT, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }
}

extension KendraRanking {
    /// Initializer required by `AWSService.with(middlewares:timeout:byteBufferAllocator:options)`. You are not able to use this initializer directly as there are no public
    /// initializers for `AWSServiceConfig.Patch`. Please use `AWSService.with(middlewares:timeout:byteBufferAllocator:options)` instead.
    public init(from: KendraRanking, patch: AWSServiceConfig.Patch) {
        self.client = from.client
        self.config = from.config.with(patch: patch)
    }
}

// MARK: Paginators

extension KendraRanking {
    /// Lists your rescore execution plans. A rescore execution plan  is an Amazon Kendra Intelligent Ranking resource used for  provisioning the Rescore API.
    ///
    /// Provide paginated results to closure `onPage` for it to combine them into one result.
    /// This works in a similar manner to `Array.reduce<Result>(_:_:) -> Result`.
    ///
    /// Parameters:
    ///   - input: Input for request
    ///   - initialValue: The value to use as the initial accumulating value. `initialValue` is passed to `onPage` the first time it is called.
    ///   - logger: Logger used flot logging
    ///   - eventLoop: EventLoop to run this process on
    ///   - onPage: closure called with each paginated response. It combines an accumulating result with the contents of response. This combined result is then returned
    ///         along with a boolean indicating if the paginate operation should continue.
    public func listRescoreExecutionPlansPaginator<Result>(
        _ input: ListRescoreExecutionPlansRequest,
        _ initialValue: Result,
        logger: Logger = AWSClient.loggingDisabled,
        on eventLoop: EventLoop? = nil,
        onPage: @escaping (Result, ListRescoreExecutionPlansResponse, EventLoop) -> EventLoopFuture<(Bool, Result)>
    ) -> EventLoopFuture<Result> {
        return self.client.paginate(
            input: input,
            initialValue: initialValue,
            command: self.listRescoreExecutionPlans,
            inputKey: \ListRescoreExecutionPlansRequest.nextToken,
            outputKey: \ListRescoreExecutionPlansResponse.nextToken,
            on: eventLoop,
            onPage: onPage
        )
    }

    /// Provide paginated results to closure `onPage`.
    ///
    /// - Parameters:
    ///   - input: Input for request
    ///   - logger: Logger used flot logging
    ///   - eventLoop: EventLoop to run this process on
    ///   - onPage: closure called with each block of entries. Returns boolean indicating whether we should continue.
    public func listRescoreExecutionPlansPaginator(
        _ input: ListRescoreExecutionPlansRequest,
        logger: Logger = AWSClient.loggingDisabled,
        on eventLoop: EventLoop? = nil,
        onPage: @escaping (ListRescoreExecutionPlansResponse, EventLoop) -> EventLoopFuture<Bool>
    ) -> EventLoopFuture<Void> {
        return self.client.paginate(
            input: input,
            command: self.listRescoreExecutionPlans,
            inputKey: \ListRescoreExecutionPlansRequest.nextToken,
            outputKey: \ListRescoreExecutionPlansResponse.nextToken,
            on: eventLoop,
            onPage: onPage
        )
    }
}

extension KendraRanking.ListRescoreExecutionPlansRequest: AWSPaginateToken {
    public func usingPaginationToken(_ token: String) -> KendraRanking.ListRescoreExecutionPlansRequest {
        return .init(
            maxResults: self.maxResults,
            nextToken: token
        )
    }
}
