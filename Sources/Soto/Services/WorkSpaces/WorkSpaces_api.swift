//===----------------------------------------------------------------------===//
//
// This source file is part of the Soto for AWS open source project
//
// Copyright (c) 2017-2024 the Soto project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
// See CONTRIBUTORS.txt for the list of Soto project authors
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by https://github.com/soto-project/soto-codegenerator.
// DO NOT EDIT.

#if os(Linux) && compiler(<5.10)
// swift-corelibs-foundation hasn't been updated with Sendable conformances
@preconcurrency import Foundation
#else
import Foundation
#endif
@_exported import SotoCore

/// Service object for interacting with AWS WorkSpaces service.
///
/// Amazon WorkSpaces Service Amazon WorkSpaces enables you to provision virtual, cloud-based Microsoft Windows or Amazon Linux desktops for your users, known as WorkSpaces. WorkSpaces eliminates the need to procure and deploy hardware or install complex software. You can quickly add or remove users as your needs change. Users can access their virtual desktops from multiple devices or web browsers. This API Reference provides detailed information about the actions, data types, parameters, and errors of the WorkSpaces service. For more information about the supported Amazon Web Services Regions, endpoints, and service quotas of the Amazon WorkSpaces service, see WorkSpaces endpoints and quotas in the Amazon Web Services General Reference. You can also manage your WorkSpaces resources using the WorkSpaces console, Command Line Interface (CLI), and SDKs. For more information about administering WorkSpaces, see the Amazon WorkSpaces Administration Guide. For more information about using the Amazon WorkSpaces client application or web browser to access provisioned WorkSpaces, see the Amazon WorkSpaces User Guide. For more information about using the CLI to manage your WorkSpaces resources, see the WorkSpaces section of the CLI Reference.
public struct WorkSpaces: AWSService {
    // MARK: Member variables

    /// Client used for communication with AWS
    public let client: AWSClient
    /// Service configuration
    public let config: AWSServiceConfig

    // MARK: Initialization

    /// Initialize the WorkSpaces client
    /// - parameters:
    ///     - client: AWSClient used to process requests
    ///     - region: Region of server you want to communicate with. This will override the partition parameter.
    ///     - partition: AWS partition where service resides, standard (.aws), china (.awscn), government (.awsusgov).
    ///     - endpoint: Custom endpoint URL to use instead of standard AWS servers
    ///     - middleware: Middleware chain used to edit requests before they are sent and responses before they are decoded 
    ///     - timeout: Timeout value for HTTP requests
    ///     - byteBufferAllocator: Allocator for ByteBuffers
    ///     - options: Service options
    public init(
        client: AWSClient,
        region: SotoCore.Region? = nil,
        partition: AWSPartition = .aws,
        endpoint: String? = nil,
        middleware: AWSMiddlewareProtocol? = nil,
        timeout: TimeAmount? = nil,
        byteBufferAllocator: ByteBufferAllocator = ByteBufferAllocator(),
        options: AWSServiceConfig.Options = []
    ) {
        self.client = client
        self.config = AWSServiceConfig(
            region: region,
            partition: region?.partition ?? partition,
            amzTarget: "WorkspacesService",
            serviceName: "WorkSpaces",
            serviceIdentifier: "workspaces",
            serviceProtocol: .json(version: "1.1"),
            apiVersion: "2015-04-08",
            endpoint: endpoint,
            variantEndpoints: Self.variantEndpoints,
            errorType: WorkSpacesErrorType.self,
            xmlNamespace: "http://workspaces.amazonaws.com/api/v1",
            middleware: middleware,
            timeout: timeout,
            byteBufferAllocator: byteBufferAllocator,
            options: options
        )
    }




    /// FIPS and dualstack endpoints
    static var variantEndpoints: [EndpointVariantType: AWSServiceConfig.EndpointVariant] {[
        [.fips]: .init(endpoints: [
            "us-east-1": "workspaces-fips.us-east-1.amazonaws.com",
            "us-gov-east-1": "workspaces-fips.us-gov-east-1.amazonaws.com",
            "us-gov-west-1": "workspaces-fips.us-gov-west-1.amazonaws.com",
            "us-west-2": "workspaces-fips.us-west-2.amazonaws.com"
        ])
    ]}

    // MARK: API Calls

    /// Accepts the account link invitation.  There's currently no unlinking capability after you accept the account linking invitation.
    @Sendable
    @inlinable
    public func acceptAccountLinkInvitation(_ input: AcceptAccountLinkInvitationRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> AcceptAccountLinkInvitationResult {
        try await self.client.execute(
            operation: "AcceptAccountLinkInvitation", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Accepts the account link invitation.  There's currently no unlinking capability after you accept the account linking invitation.
    ///
    /// Parameters:
    ///   - clientToken: A string of up to 64 ASCII characters that Amazon WorkSpaces uses to ensure idempotent creation.
    ///   - linkId: The identifier of the account link.
    ///   - logger: Logger use during operation
    @inlinable
    public func acceptAccountLinkInvitation(
        clientToken: String? = nil,
        linkId: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> AcceptAccountLinkInvitationResult {
        let input = AcceptAccountLinkInvitationRequest(
            clientToken: clientToken, 
            linkId: linkId
        )
        return try await self.acceptAccountLinkInvitation(input, logger: logger)
    }

    /// Associates the specified connection alias with the specified directory to enable cross-Region redirection. For more information, see  Cross-Region Redirection for Amazon WorkSpaces.  Before performing this operation, call  DescribeConnectionAliases to make sure that the current state of the connection alias is CREATED.
    @Sendable
    @inlinable
    public func associateConnectionAlias(_ input: AssociateConnectionAliasRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> AssociateConnectionAliasResult {
        try await self.client.execute(
            operation: "AssociateConnectionAlias", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Associates the specified connection alias with the specified directory to enable cross-Region redirection. For more information, see  Cross-Region Redirection for Amazon WorkSpaces.  Before performing this operation, call  DescribeConnectionAliases to make sure that the current state of the connection alias is CREATED.
    ///
    /// Parameters:
    ///   - aliasId: The identifier of the connection alias.
    ///   - resourceId: The identifier of the directory to associate the connection alias with.
    ///   - logger: Logger use during operation
    @inlinable
    public func associateConnectionAlias(
        aliasId: String,
        resourceId: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> AssociateConnectionAliasResult {
        let input = AssociateConnectionAliasRequest(
            aliasId: aliasId, 
            resourceId: resourceId
        )
        return try await self.associateConnectionAlias(input, logger: logger)
    }

    /// Associates the specified IP access control group with the specified directory.
    @Sendable
    @inlinable
    public func associateIpGroups(_ input: AssociateIpGroupsRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> AssociateIpGroupsResult {
        try await self.client.execute(
            operation: "AssociateIpGroups", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Associates the specified IP access control group with the specified directory.
    ///
    /// Parameters:
    ///   - directoryId: The identifier of the directory.
    ///   - groupIds: The identifiers of one or more IP access control groups.
    ///   - logger: Logger use during operation
    @inlinable
    public func associateIpGroups(
        directoryId: String,
        groupIds: [String],
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> AssociateIpGroupsResult {
        let input = AssociateIpGroupsRequest(
            directoryId: directoryId, 
            groupIds: groupIds
        )
        return try await self.associateIpGroups(input, logger: logger)
    }

    /// Associates the specified application to the specified WorkSpace.
    @Sendable
    @inlinable
    public func associateWorkspaceApplication(_ input: AssociateWorkspaceApplicationRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> AssociateWorkspaceApplicationResult {
        try await self.client.execute(
            operation: "AssociateWorkspaceApplication", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Associates the specified application to the specified WorkSpace.
    ///
    /// Parameters:
    ///   - applicationId: The identifier of the application.
    ///   - workspaceId: The identifier of the WorkSpace.
    ///   - logger: Logger use during operation
    @inlinable
    public func associateWorkspaceApplication(
        applicationId: String,
        workspaceId: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> AssociateWorkspaceApplicationResult {
        let input = AssociateWorkspaceApplicationRequest(
            applicationId: applicationId, 
            workspaceId: workspaceId
        )
        return try await self.associateWorkspaceApplication(input, logger: logger)
    }

    /// Adds one or more rules to the specified IP access control group. This action gives users permission to access their WorkSpaces from the CIDR address ranges specified in the rules.
    @Sendable
    @inlinable
    public func authorizeIpRules(_ input: AuthorizeIpRulesRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> AuthorizeIpRulesResult {
        try await self.client.execute(
            operation: "AuthorizeIpRules", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Adds one or more rules to the specified IP access control group. This action gives users permission to access their WorkSpaces from the CIDR address ranges specified in the rules.
    ///
    /// Parameters:
    ///   - groupId: The identifier of the group.
    ///   - userRules: The rules to add to the group.
    ///   - logger: Logger use during operation
    @inlinable
    public func authorizeIpRules(
        groupId: String,
        userRules: [IpRuleItem],
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> AuthorizeIpRulesResult {
        let input = AuthorizeIpRulesRequest(
            groupId: groupId, 
            userRules: userRules
        )
        return try await self.authorizeIpRules(input, logger: logger)
    }

    /// Copies the specified image from the specified Region to the current Region. For more information about copying images, see  Copy a Custom WorkSpaces Image. In the China (Ningxia) Region, you can copy images only within the same Region. In Amazon Web Services GovCloud (US), to copy images to and from other Regions, contact Amazon Web Services Support.  Before copying a shared image, be sure to verify that it has been shared from the correct Amazon Web Services account. To determine if an image has been shared and to see the ID of the Amazon Web Services account that owns an image, use the DescribeWorkSpaceImages and DescribeWorkspaceImagePermissions API operations.
    @Sendable
    @inlinable
    public func copyWorkspaceImage(_ input: CopyWorkspaceImageRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> CopyWorkspaceImageResult {
        try await self.client.execute(
            operation: "CopyWorkspaceImage", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Copies the specified image from the specified Region to the current Region. For more information about copying images, see  Copy a Custom WorkSpaces Image. In the China (Ningxia) Region, you can copy images only within the same Region. In Amazon Web Services GovCloud (US), to copy images to and from other Regions, contact Amazon Web Services Support.  Before copying a shared image, be sure to verify that it has been shared from the correct Amazon Web Services account. To determine if an image has been shared and to see the ID of the Amazon Web Services account that owns an image, use the DescribeWorkSpaceImages and DescribeWorkspaceImagePermissions API operations.
    ///
    /// Parameters:
    ///   - description: A description of the image.
    ///   - name: The name of the image.
    ///   - sourceImageId: The identifier of the source image.
    ///   - sourceRegion: The identifier of the source Region.
    ///   - tags: The tags for the image.
    ///   - logger: Logger use during operation
    @inlinable
    public func copyWorkspaceImage(
        description: String? = nil,
        name: String,
        sourceImageId: String,
        sourceRegion: String,
        tags: [Tag]? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> CopyWorkspaceImageResult {
        let input = CopyWorkspaceImageRequest(
            description: description, 
            name: name, 
            sourceImageId: sourceImageId, 
            sourceRegion: sourceRegion, 
            tags: tags
        )
        return try await self.copyWorkspaceImage(input, logger: logger)
    }

    /// Creates the account link invitation.
    @Sendable
    @inlinable
    public func createAccountLinkInvitation(_ input: CreateAccountLinkInvitationRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> CreateAccountLinkInvitationResult {
        try await self.client.execute(
            operation: "CreateAccountLinkInvitation", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Creates the account link invitation.
    ///
    /// Parameters:
    ///   - clientToken: A string of up to 64 ASCII characters that Amazon WorkSpaces uses to ensure idempotent creation.
    ///   - targetAccountId: The identifier of the target account.
    ///   - logger: Logger use during operation
    @inlinable
    public func createAccountLinkInvitation(
        clientToken: String? = nil,
        targetAccountId: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> CreateAccountLinkInvitationResult {
        let input = CreateAccountLinkInvitationRequest(
            clientToken: clientToken, 
            targetAccountId: targetAccountId
        )
        return try await self.createAccountLinkInvitation(input, logger: logger)
    }

    /// Creates a client-add-in for Amazon Connect within a directory. You can create only one Amazon Connect client add-in within a directory. This client add-in allows WorkSpaces users to seamlessly connect to Amazon Connect.
    @Sendable
    @inlinable
    public func createConnectClientAddIn(_ input: CreateConnectClientAddInRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> CreateConnectClientAddInResult {
        try await self.client.execute(
            operation: "CreateConnectClientAddIn", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Creates a client-add-in for Amazon Connect within a directory. You can create only one Amazon Connect client add-in within a directory. This client add-in allows WorkSpaces users to seamlessly connect to Amazon Connect.
    ///
    /// Parameters:
    ///   - name: The name of the client add-in.
    ///   - resourceId: The directory identifier for which to configure the client add-in.
    ///   - url: The endpoint URL of the Amazon Connect client add-in.
    ///   - logger: Logger use during operation
    @inlinable
    public func createConnectClientAddIn(
        name: String,
        resourceId: String,
        url: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> CreateConnectClientAddInResult {
        let input = CreateConnectClientAddInRequest(
            name: name, 
            resourceId: resourceId, 
            url: url
        )
        return try await self.createConnectClientAddIn(input, logger: logger)
    }

    /// Creates the specified connection alias for use with cross-Region redirection. For more information, see  Cross-Region Redirection for Amazon WorkSpaces.
    @Sendable
    @inlinable
    public func createConnectionAlias(_ input: CreateConnectionAliasRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> CreateConnectionAliasResult {
        try await self.client.execute(
            operation: "CreateConnectionAlias", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Creates the specified connection alias for use with cross-Region redirection. For more information, see  Cross-Region Redirection for Amazon WorkSpaces.
    ///
    /// Parameters:
    ///   - connectionString: A connection string in the form of a fully qualified domain name (FQDN), such as www.example.com.  After you create a connection string, it is always associated to your Amazon Web Services account. You cannot recreate the same connection string with a different account, even if you delete all instances of it from the original account. The connection string is globally reserved for your account.
    ///   - tags: The tags to associate with the connection alias.
    ///   - logger: Logger use during operation
    @inlinable
    public func createConnectionAlias(
        connectionString: String,
        tags: [Tag]? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> CreateConnectionAliasResult {
        let input = CreateConnectionAliasRequest(
            connectionString: connectionString, 
            tags: tags
        )
        return try await self.createConnectionAlias(input, logger: logger)
    }

    /// Creates an IP access control group. An IP access control group provides you with the ability to control the IP addresses from which users are allowed to access their WorkSpaces. To specify the CIDR address ranges, add rules to your IP access control group and then associate the group with your directory. You can add rules when you create the group or at any time using AuthorizeIpRules. There is a default IP access control group associated with your directory. If you don't associate an IP access control group with your directory, the default group is used. The default group includes a default rule that allows users to access their WorkSpaces from anywhere. You cannot modify the default IP access control group for your directory.
    @Sendable
    @inlinable
    public func createIpGroup(_ input: CreateIpGroupRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> CreateIpGroupResult {
        try await self.client.execute(
            operation: "CreateIpGroup", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Creates an IP access control group. An IP access control group provides you with the ability to control the IP addresses from which users are allowed to access their WorkSpaces. To specify the CIDR address ranges, add rules to your IP access control group and then associate the group with your directory. You can add rules when you create the group or at any time using AuthorizeIpRules. There is a default IP access control group associated with your directory. If you don't associate an IP access control group with your directory, the default group is used. The default group includes a default rule that allows users to access their WorkSpaces from anywhere. You cannot modify the default IP access control group for your directory.
    ///
    /// Parameters:
    ///   - groupDesc: The description of the group.
    ///   - groupName: The name of the group.
    ///   - tags: The tags. Each WorkSpaces resource can have a maximum of 50 tags.
    ///   - userRules: The rules to add to the group.
    ///   - logger: Logger use during operation
    @inlinable
    public func createIpGroup(
        groupDesc: String? = nil,
        groupName: String,
        tags: [Tag]? = nil,
        userRules: [IpRuleItem]? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> CreateIpGroupResult {
        let input = CreateIpGroupRequest(
            groupDesc: groupDesc, 
            groupName: groupName, 
            tags: tags, 
            userRules: userRules
        )
        return try await self.createIpGroup(input, logger: logger)
    }

    /// Creates a standby WorkSpace in a secondary Region.
    @Sendable
    @inlinable
    public func createStandbyWorkspaces(_ input: CreateStandbyWorkspacesRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> CreateStandbyWorkspacesResult {
        try await self.client.execute(
            operation: "CreateStandbyWorkspaces", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Creates a standby WorkSpace in a secondary Region.
    ///
    /// Parameters:
    ///   - primaryRegion: The Region of the primary WorkSpace.
    ///   - standbyWorkspaces: Information about the standby WorkSpace to be created.
    ///   - logger: Logger use during operation
    @inlinable
    public func createStandbyWorkspaces(
        primaryRegion: String,
        standbyWorkspaces: [StandbyWorkspace],
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> CreateStandbyWorkspacesResult {
        let input = CreateStandbyWorkspacesRequest(
            primaryRegion: primaryRegion, 
            standbyWorkspaces: standbyWorkspaces
        )
        return try await self.createStandbyWorkspaces(input, logger: logger)
    }

    /// Creates the specified tags for the specified WorkSpaces resource.
    @Sendable
    @inlinable
    public func createTags(_ input: CreateTagsRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> CreateTagsResult {
        try await self.client.execute(
            operation: "CreateTags", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Creates the specified tags for the specified WorkSpaces resource.
    ///
    /// Parameters:
    ///   - resourceId: The identifier of the WorkSpaces resource. The supported resource types are WorkSpaces, registered directories, images, custom bundles, IP access control groups, and connection aliases.
    ///   - tags: The tags. Each WorkSpaces resource can have a maximum of 50 tags.
    ///   - logger: Logger use during operation
    @inlinable
    public func createTags(
        resourceId: String,
        tags: [Tag],
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> CreateTagsResult {
        let input = CreateTagsRequest(
            resourceId: resourceId, 
            tags: tags
        )
        return try await self.createTags(input, logger: logger)
    }

    /// Creates a new updated WorkSpace image based on the specified source image. The new updated WorkSpace image has the latest drivers and other updates required by the  Amazon WorkSpaces components. To determine which WorkSpace images need to be updated with the latest Amazon WorkSpaces requirements, use  DescribeWorkspaceImages.    Only Windows 10, Windows Server 2016, and Windows Server 2019 WorkSpace images can be programmatically updated at this time.   Microsoft Windows updates and other application updates are not included in the update process.   The source WorkSpace image is not deleted. You can delete the source image after you've verified your new updated image and created a new bundle.
    @Sendable
    @inlinable
    public func createUpdatedWorkspaceImage(_ input: CreateUpdatedWorkspaceImageRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> CreateUpdatedWorkspaceImageResult {
        try await self.client.execute(
            operation: "CreateUpdatedWorkspaceImage", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Creates a new updated WorkSpace image based on the specified source image. The new updated WorkSpace image has the latest drivers and other updates required by the  Amazon WorkSpaces components. To determine which WorkSpace images need to be updated with the latest Amazon WorkSpaces requirements, use  DescribeWorkspaceImages.    Only Windows 10, Windows Server 2016, and Windows Server 2019 WorkSpace images can be programmatically updated at this time.   Microsoft Windows updates and other application updates are not included in the update process.   The source WorkSpace image is not deleted. You can delete the source image after you've verified your new updated image and created a new bundle.
    ///
    /// Parameters:
    ///   - description: A description of whether updates for the WorkSpace image are available.
    ///   - name: The name of the new updated WorkSpace image.
    ///   - sourceImageId: The identifier of the source WorkSpace image.
    ///   - tags: The tags that you want to add to the new updated WorkSpace image.  To add tags at the same time when you're creating the updated image, you must create an IAM policy that grants your IAM user permissions to use workspaces:CreateTags.
    ///   - logger: Logger use during operation
    @inlinable
    public func createUpdatedWorkspaceImage(
        description: String,
        name: String,
        sourceImageId: String,
        tags: [Tag]? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> CreateUpdatedWorkspaceImageResult {
        let input = CreateUpdatedWorkspaceImageRequest(
            description: description, 
            name: name, 
            sourceImageId: sourceImageId, 
            tags: tags
        )
        return try await self.createUpdatedWorkspaceImage(input, logger: logger)
    }

    /// Creates the specified WorkSpace bundle. For more information about creating WorkSpace bundles, see   Create a Custom WorkSpaces Image and Bundle.
    @Sendable
    @inlinable
    public func createWorkspaceBundle(_ input: CreateWorkspaceBundleRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> CreateWorkspaceBundleResult {
        try await self.client.execute(
            operation: "CreateWorkspaceBundle", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Creates the specified WorkSpace bundle. For more information about creating WorkSpace bundles, see   Create a Custom WorkSpaces Image and Bundle.
    ///
    /// Parameters:
    ///   - bundleDescription: The description of the bundle.
    ///   - bundleName: The name of the bundle.
    ///   - computeType: 
    ///   - imageId: The identifier of the image that is used to create the bundle.
    ///   - rootStorage: 
    ///   - tags: The tags associated with the bundle.  To add tags at the same time when you're creating the bundle, you must create an IAM policy that  grants your IAM user permissions to use workspaces:CreateTags.
    ///   - userStorage: 
    ///   - logger: Logger use during operation
    @inlinable
    public func createWorkspaceBundle(
        bundleDescription: String,
        bundleName: String,
        computeType: ComputeType,
        imageId: String,
        rootStorage: RootStorage? = nil,
        tags: [Tag]? = nil,
        userStorage: UserStorage,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> CreateWorkspaceBundleResult {
        let input = CreateWorkspaceBundleRequest(
            bundleDescription: bundleDescription, 
            bundleName: bundleName, 
            computeType: computeType, 
            imageId: imageId, 
            rootStorage: rootStorage, 
            tags: tags, 
            userStorage: userStorage
        )
        return try await self.createWorkspaceBundle(input, logger: logger)
    }

    /// Creates a new WorkSpace image from an existing WorkSpace.
    @Sendable
    @inlinable
    public func createWorkspaceImage(_ input: CreateWorkspaceImageRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> CreateWorkspaceImageResult {
        try await self.client.execute(
            operation: "CreateWorkspaceImage", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Creates a new WorkSpace image from an existing WorkSpace.
    ///
    /// Parameters:
    ///   - description: The description of the new WorkSpace image.
    ///   - name: The name of the new WorkSpace image.
    ///   - tags: The tags that you want to add to the new WorkSpace image.  To add tags when you're creating the image, you must create an IAM policy that grants  your IAM user permission to use workspaces:CreateTags.
    ///   - workspaceId: The identifier of the source WorkSpace
    ///   - logger: Logger use during operation
    @inlinable
    public func createWorkspaceImage(
        description: String,
        name: String,
        tags: [Tag]? = nil,
        workspaceId: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> CreateWorkspaceImageResult {
        let input = CreateWorkspaceImageRequest(
            description: description, 
            name: name, 
            tags: tags, 
            workspaceId: workspaceId
        )
        return try await self.createWorkspaceImage(input, logger: logger)
    }

    /// Creates one or more WorkSpaces. This operation is asynchronous and returns before the WorkSpaces are created.    The MANUAL running mode value is only supported by Amazon WorkSpaces Core. Contact your account team to be allow-listed to use this value. For more information, see Amazon WorkSpaces Core.   You don't need to specify the PCOIP protocol for Linux bundles because DCV (formerly WSP) is the default protocol for those bundles.   User-decoupled WorkSpaces are only supported by Amazon WorkSpaces Core.   Review your running mode to ensure you are using one that is optimal for your needs and budget. For more information on switching running modes, see   Can I switch between hourly and monthly billing?
    @Sendable
    @inlinable
    public func createWorkspaces(_ input: CreateWorkspacesRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> CreateWorkspacesResult {
        try await self.client.execute(
            operation: "CreateWorkspaces", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Creates one or more WorkSpaces. This operation is asynchronous and returns before the WorkSpaces are created.    The MANUAL running mode value is only supported by Amazon WorkSpaces Core. Contact your account team to be allow-listed to use this value. For more information, see Amazon WorkSpaces Core.   You don't need to specify the PCOIP protocol for Linux bundles because DCV (formerly WSP) is the default protocol for those bundles.   User-decoupled WorkSpaces are only supported by Amazon WorkSpaces Core.   Review your running mode to ensure you are using one that is optimal for your needs and budget. For more information on switching running modes, see   Can I switch between hourly and monthly billing?
    ///
    /// Parameters:
    ///   - workspaces: The WorkSpaces to create. You can specify up to 25 WorkSpaces.
    ///   - logger: Logger use during operation
    @inlinable
    public func createWorkspaces(
        workspaces: [WorkspaceRequest],
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> CreateWorkspacesResult {
        let input = CreateWorkspacesRequest(
            workspaces: workspaces
        )
        return try await self.createWorkspaces(input, logger: logger)
    }

    /// Creates a pool of WorkSpaces.
    @Sendable
    @inlinable
    public func createWorkspacesPool(_ input: CreateWorkspacesPoolRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> CreateWorkspacesPoolResult {
        try await self.client.execute(
            operation: "CreateWorkspacesPool", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Creates a pool of WorkSpaces.
    ///
    /// Parameters:
    ///   - applicationSettings: Indicates the application settings of the pool.
    ///   - bundleId: The identifier of the bundle for the pool.
    ///   - capacity: The user capacity of the pool.
    ///   - description: The pool description.
    ///   - directoryId: The identifier of the directory for the pool.
    ///   - poolName: The name of the pool.
    ///   - tags: The tags for the pool.
    ///   - timeoutSettings: Indicates the timeout settings of the pool.
    ///   - logger: Logger use during operation
    @inlinable
    public func createWorkspacesPool(
        applicationSettings: ApplicationSettingsRequest? = nil,
        bundleId: String,
        capacity: Capacity,
        description: String,
        directoryId: String,
        poolName: String,
        tags: [Tag]? = nil,
        timeoutSettings: TimeoutSettings? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> CreateWorkspacesPoolResult {
        let input = CreateWorkspacesPoolRequest(
            applicationSettings: applicationSettings, 
            bundleId: bundleId, 
            capacity: capacity, 
            description: description, 
            directoryId: directoryId, 
            poolName: poolName, 
            tags: tags, 
            timeoutSettings: timeoutSettings
        )
        return try await self.createWorkspacesPool(input, logger: logger)
    }

    /// Deletes the account link invitation.
    @Sendable
    @inlinable
    public func deleteAccountLinkInvitation(_ input: DeleteAccountLinkInvitationRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DeleteAccountLinkInvitationResult {
        try await self.client.execute(
            operation: "DeleteAccountLinkInvitation", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Deletes the account link invitation.
    ///
    /// Parameters:
    ///   - clientToken: A string of up to 64 ASCII characters that Amazon WorkSpaces uses to ensure idempotent creation.
    ///   - linkId: The identifier of the account link.
    ///   - logger: Logger use during operation
    @inlinable
    public func deleteAccountLinkInvitation(
        clientToken: String? = nil,
        linkId: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> DeleteAccountLinkInvitationResult {
        let input = DeleteAccountLinkInvitationRequest(
            clientToken: clientToken, 
            linkId: linkId
        )
        return try await self.deleteAccountLinkInvitation(input, logger: logger)
    }

    /// Deletes customized client branding. Client branding allows you to customize your WorkSpace's client login portal. You can tailor your login portal company logo, the support email address, support link, link to reset password, and a custom message for users trying to sign in. After you delete your customized client branding, your login portal reverts to the default client branding.
    @Sendable
    @inlinable
    public func deleteClientBranding(_ input: DeleteClientBrandingRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DeleteClientBrandingResult {
        try await self.client.execute(
            operation: "DeleteClientBranding", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Deletes customized client branding. Client branding allows you to customize your WorkSpace's client login portal. You can tailor your login portal company logo, the support email address, support link, link to reset password, and a custom message for users trying to sign in. After you delete your customized client branding, your login portal reverts to the default client branding.
    ///
    /// Parameters:
    ///   - platforms: The device type for which you want to delete client branding.
    ///   - resourceId: The directory identifier of the WorkSpace for which you want to delete client branding.
    ///   - logger: Logger use during operation
    @inlinable
    public func deleteClientBranding(
        platforms: [ClientDeviceType],
        resourceId: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> DeleteClientBrandingResult {
        let input = DeleteClientBrandingRequest(
            platforms: platforms, 
            resourceId: resourceId
        )
        return try await self.deleteClientBranding(input, logger: logger)
    }

    /// Deletes a client-add-in for Amazon Connect that is configured within a directory.
    @Sendable
    @inlinable
    public func deleteConnectClientAddIn(_ input: DeleteConnectClientAddInRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DeleteConnectClientAddInResult {
        try await self.client.execute(
            operation: "DeleteConnectClientAddIn", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Deletes a client-add-in for Amazon Connect that is configured within a directory.
    ///
    /// Parameters:
    ///   - addInId: The identifier of the client add-in to delete.
    ///   - resourceId: The directory identifier for which the client add-in is configured.
    ///   - logger: Logger use during operation
    @inlinable
    public func deleteConnectClientAddIn(
        addInId: String,
        resourceId: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> DeleteConnectClientAddInResult {
        let input = DeleteConnectClientAddInRequest(
            addInId: addInId, 
            resourceId: resourceId
        )
        return try await self.deleteConnectClientAddIn(input, logger: logger)
    }

    /// Deletes the specified connection alias. For more information, see  Cross-Region Redirection for Amazon WorkSpaces.   If you will no longer be using a fully qualified domain name (FQDN) as the registration code for your WorkSpaces users, you must take certain precautions to prevent potential security issues. For more information, see  Security Considerations if You Stop Using Cross-Region Redirection.   To delete a connection alias that has been shared, the shared account must first disassociate the connection alias from any directories it has been associated with. Then you must unshare the connection alias from the account it has been shared with. You can delete a connection alias only after it is no longer shared with any accounts or associated with any directories.
    @Sendable
    @inlinable
    public func deleteConnectionAlias(_ input: DeleteConnectionAliasRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DeleteConnectionAliasResult {
        try await self.client.execute(
            operation: "DeleteConnectionAlias", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Deletes the specified connection alias. For more information, see  Cross-Region Redirection for Amazon WorkSpaces.   If you will no longer be using a fully qualified domain name (FQDN) as the registration code for your WorkSpaces users, you must take certain precautions to prevent potential security issues. For more information, see  Security Considerations if You Stop Using Cross-Region Redirection.   To delete a connection alias that has been shared, the shared account must first disassociate the connection alias from any directories it has been associated with. Then you must unshare the connection alias from the account it has been shared with. You can delete a connection alias only after it is no longer shared with any accounts or associated with any directories.
    ///
    /// Parameters:
    ///   - aliasId: The identifier of the connection alias to delete.
    ///   - logger: Logger use during operation
    @inlinable
    public func deleteConnectionAlias(
        aliasId: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> DeleteConnectionAliasResult {
        let input = DeleteConnectionAliasRequest(
            aliasId: aliasId
        )
        return try await self.deleteConnectionAlias(input, logger: logger)
    }

    /// Deletes the specified IP access control group. You cannot delete an IP access control group that is associated with a directory.
    @Sendable
    @inlinable
    public func deleteIpGroup(_ input: DeleteIpGroupRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DeleteIpGroupResult {
        try await self.client.execute(
            operation: "DeleteIpGroup", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Deletes the specified IP access control group. You cannot delete an IP access control group that is associated with a directory.
    ///
    /// Parameters:
    ///   - groupId: The identifier of the IP access control group.
    ///   - logger: Logger use during operation
    @inlinable
    public func deleteIpGroup(
        groupId: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> DeleteIpGroupResult {
        let input = DeleteIpGroupRequest(
            groupId: groupId
        )
        return try await self.deleteIpGroup(input, logger: logger)
    }

    /// Deletes the specified tags from the specified WorkSpaces resource.
    @Sendable
    @inlinable
    public func deleteTags(_ input: DeleteTagsRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DeleteTagsResult {
        try await self.client.execute(
            operation: "DeleteTags", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Deletes the specified tags from the specified WorkSpaces resource.
    ///
    /// Parameters:
    ///   - resourceId: The identifier of the WorkSpaces resource. The supported resource types are WorkSpaces, registered directories, images, custom bundles, IP access control groups, and connection aliases.
    ///   - tagKeys: The tag keys.
    ///   - logger: Logger use during operation
    @inlinable
    public func deleteTags(
        resourceId: String,
        tagKeys: [String],
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> DeleteTagsResult {
        let input = DeleteTagsRequest(
            resourceId: resourceId, 
            tagKeys: tagKeys
        )
        return try await self.deleteTags(input, logger: logger)
    }

    /// Deletes the specified WorkSpace bundle. For more information about deleting WorkSpace bundles, see   Delete a Custom WorkSpaces Bundle or Image.
    @Sendable
    @inlinable
    public func deleteWorkspaceBundle(_ input: DeleteWorkspaceBundleRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DeleteWorkspaceBundleResult {
        try await self.client.execute(
            operation: "DeleteWorkspaceBundle", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Deletes the specified WorkSpace bundle. For more information about deleting WorkSpace bundles, see   Delete a Custom WorkSpaces Bundle or Image.
    ///
    /// Parameters:
    ///   - bundleId: The identifier of the bundle.
    ///   - logger: Logger use during operation
    @inlinable
    public func deleteWorkspaceBundle(
        bundleId: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> DeleteWorkspaceBundleResult {
        let input = DeleteWorkspaceBundleRequest(
            bundleId: bundleId
        )
        return try await self.deleteWorkspaceBundle(input, logger: logger)
    }

    /// Deletes the specified image from your account. To delete an image, you must first delete any bundles that are associated with the image and unshare the image if it is shared with other accounts.
    @Sendable
    @inlinable
    public func deleteWorkspaceImage(_ input: DeleteWorkspaceImageRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DeleteWorkspaceImageResult {
        try await self.client.execute(
            operation: "DeleteWorkspaceImage", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Deletes the specified image from your account. To delete an image, you must first delete any bundles that are associated with the image and unshare the image if it is shared with other accounts.
    ///
    /// Parameters:
    ///   - imageId: The identifier of the image.
    ///   - logger: Logger use during operation
    @inlinable
    public func deleteWorkspaceImage(
        imageId: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> DeleteWorkspaceImageResult {
        let input = DeleteWorkspaceImageRequest(
            imageId: imageId
        )
        return try await self.deleteWorkspaceImage(input, logger: logger)
    }

    /// Deploys associated applications to the specified WorkSpace
    @Sendable
    @inlinable
    public func deployWorkspaceApplications(_ input: DeployWorkspaceApplicationsRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DeployWorkspaceApplicationsResult {
        try await self.client.execute(
            operation: "DeployWorkspaceApplications", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Deploys associated applications to the specified WorkSpace
    ///
    /// Parameters:
    ///   - force: Indicates whether the force flag is applied for the specified WorkSpace. When the force flag is enabled,  it allows previously failed deployments to be retried.
    ///   - workspaceId: The identifier of the WorkSpace.
    ///   - logger: Logger use during operation
    @inlinable
    public func deployWorkspaceApplications(
        force: Bool? = nil,
        workspaceId: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> DeployWorkspaceApplicationsResult {
        let input = DeployWorkspaceApplicationsRequest(
            force: force, 
            workspaceId: workspaceId
        )
        return try await self.deployWorkspaceApplications(input, logger: logger)
    }

    /// Deregisters the specified directory. This operation is asynchronous and returns before the WorkSpace directory is deregistered. If any WorkSpaces are registered to this directory, you must remove them before you can deregister the directory.  Simple AD and AD Connector are made available to you free of charge to use with WorkSpaces. If there are no WorkSpaces being used with your Simple AD or AD Connector directory for 30 consecutive days, this directory will be automatically deregistered for use with Amazon WorkSpaces, and you will be charged for this directory as per the Directory Service pricing terms. To delete empty directories, see  Delete the Directory for Your WorkSpaces. If you delete your Simple AD or AD Connector directory, you can always create a new one when you want to start using WorkSpaces again.
    @Sendable
    @inlinable
    public func deregisterWorkspaceDirectory(_ input: DeregisterWorkspaceDirectoryRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DeregisterWorkspaceDirectoryResult {
        try await self.client.execute(
            operation: "DeregisterWorkspaceDirectory", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Deregisters the specified directory. This operation is asynchronous and returns before the WorkSpace directory is deregistered. If any WorkSpaces are registered to this directory, you must remove them before you can deregister the directory.  Simple AD and AD Connector are made available to you free of charge to use with WorkSpaces. If there are no WorkSpaces being used with your Simple AD or AD Connector directory for 30 consecutive days, this directory will be automatically deregistered for use with Amazon WorkSpaces, and you will be charged for this directory as per the Directory Service pricing terms. To delete empty directories, see  Delete the Directory for Your WorkSpaces. If you delete your Simple AD or AD Connector directory, you can always create a new one when you want to start using WorkSpaces again.
    ///
    /// Parameters:
    ///   - directoryId: The identifier of the directory. If any WorkSpaces are registered to this directory, you must remove them before you deregister the directory, or you will receive an OperationNotSupportedException error.
    ///   - logger: Logger use during operation
    @inlinable
    public func deregisterWorkspaceDirectory(
        directoryId: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> DeregisterWorkspaceDirectoryResult {
        let input = DeregisterWorkspaceDirectoryRequest(
            directoryId: directoryId
        )
        return try await self.deregisterWorkspaceDirectory(input, logger: logger)
    }

    /// Retrieves a list that describes the configuration of Bring Your Own License (BYOL) for the specified account.
    @Sendable
    @inlinable
    public func describeAccount(_ input: DescribeAccountRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DescribeAccountResult {
        try await self.client.execute(
            operation: "DescribeAccount", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Retrieves a list that describes the configuration of Bring Your Own License (BYOL) for the specified account.
    ///
    /// Parameters:
    ///   - logger: Logger use during operation
    @inlinable
    public func describeAccount(
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> DescribeAccountResult {
        let input = DescribeAccountRequest(
        )
        return try await self.describeAccount(input, logger: logger)
    }

    /// Retrieves a list that describes modifications to the configuration of Bring Your Own License (BYOL) for the specified account.
    @Sendable
    @inlinable
    public func describeAccountModifications(_ input: DescribeAccountModificationsRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DescribeAccountModificationsResult {
        try await self.client.execute(
            operation: "DescribeAccountModifications", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Retrieves a list that describes modifications to the configuration of Bring Your Own License (BYOL) for the specified account.
    ///
    /// Parameters:
    ///   - nextToken: If you received a NextToken from a previous call that was paginated, provide this token to receive the next set of results.
    ///   - logger: Logger use during operation
    @inlinable
    public func describeAccountModifications(
        nextToken: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> DescribeAccountModificationsResult {
        let input = DescribeAccountModificationsRequest(
            nextToken: nextToken
        )
        return try await self.describeAccountModifications(input, logger: logger)
    }

    /// Describes the associations between the application and the specified associated resources.
    @Sendable
    @inlinable
    public func describeApplicationAssociations(_ input: DescribeApplicationAssociationsRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DescribeApplicationAssociationsResult {
        try await self.client.execute(
            operation: "DescribeApplicationAssociations", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Describes the associations between the application and the specified associated resources.
    ///
    /// Parameters:
    ///   - applicationId: The identifier of the specified application.
    ///   - associatedResourceTypes: The resource type of the associated resources.
    ///   - maxResults: The maximum number of associations to return.
    ///   - nextToken: If you received a NextToken from a previous call that was paginated, provide this token to receive the next set of results.
    ///   - logger: Logger use during operation
    @inlinable
    public func describeApplicationAssociations(
        applicationId: String,
        associatedResourceTypes: [ApplicationAssociatedResourceType],
        maxResults: Int? = nil,
        nextToken: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> DescribeApplicationAssociationsResult {
        let input = DescribeApplicationAssociationsRequest(
            applicationId: applicationId, 
            associatedResourceTypes: associatedResourceTypes, 
            maxResults: maxResults, 
            nextToken: nextToken
        )
        return try await self.describeApplicationAssociations(input, logger: logger)
    }

    /// Describes the specified applications by filtering based on their compute types, license availability, operating systems, and owners.
    @Sendable
    @inlinable
    public func describeApplications(_ input: DescribeApplicationsRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DescribeApplicationsResult {
        try await self.client.execute(
            operation: "DescribeApplications", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Describes the specified applications by filtering based on their compute types, license availability, operating systems, and owners.
    ///
    /// Parameters:
    ///   - applicationIds: The identifiers of one or more applications.
    ///   - computeTypeNames: The compute types supported by the applications.
    ///   - licenseType: The license availability for the applications.
    ///   - maxResults: The maximum number of applications to return.
    ///   - nextToken: If you received a NextToken from a previous call that was paginated, provide this token to receive the next set of results.
    ///   - operatingSystemNames: The operating systems supported by the applications.
    ///   - owner: The owner of the applications.
    ///   - logger: Logger use during operation
    @inlinable
    public func describeApplications(
        applicationIds: [String]? = nil,
        computeTypeNames: [Compute]? = nil,
        licenseType: WorkSpaceApplicationLicenseType? = nil,
        maxResults: Int? = nil,
        nextToken: String? = nil,
        operatingSystemNames: [OperatingSystemName]? = nil,
        owner: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> DescribeApplicationsResult {
        let input = DescribeApplicationsRequest(
            applicationIds: applicationIds, 
            computeTypeNames: computeTypeNames, 
            licenseType: licenseType, 
            maxResults: maxResults, 
            nextToken: nextToken, 
            operatingSystemNames: operatingSystemNames, 
            owner: owner
        )
        return try await self.describeApplications(input, logger: logger)
    }

    /// Describes the associations between the applications and the specified bundle.
    @Sendable
    @inlinable
    public func describeBundleAssociations(_ input: DescribeBundleAssociationsRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DescribeBundleAssociationsResult {
        try await self.client.execute(
            operation: "DescribeBundleAssociations", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Describes the associations between the applications and the specified bundle.
    ///
    /// Parameters:
    ///   - associatedResourceTypes: The resource types of the associated resource.
    ///   - bundleId: The identifier of the bundle.
    ///   - logger: Logger use during operation
    @inlinable
    public func describeBundleAssociations(
        associatedResourceTypes: [BundleAssociatedResourceType],
        bundleId: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> DescribeBundleAssociationsResult {
        let input = DescribeBundleAssociationsRequest(
            associatedResourceTypes: associatedResourceTypes, 
            bundleId: bundleId
        )
        return try await self.describeBundleAssociations(input, logger: logger)
    }

    /// Describes the specified client branding. Client branding allows you to customize the log in page of various device types for your users. You can add your company logo, the support email address, support link, link to reset password, and a custom message for users trying to sign in.  Only device types that have branding information configured will be shown in the response.
    @Sendable
    @inlinable
    public func describeClientBranding(_ input: DescribeClientBrandingRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DescribeClientBrandingResult {
        try await self.client.execute(
            operation: "DescribeClientBranding", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Describes the specified client branding. Client branding allows you to customize the log in page of various device types for your users. You can add your company logo, the support email address, support link, link to reset password, and a custom message for users trying to sign in.  Only device types that have branding information configured will be shown in the response.
    ///
    /// Parameters:
    ///   - resourceId: The directory identifier of the WorkSpace for which you want to view client branding information.
    ///   - logger: Logger use during operation
    @inlinable
    public func describeClientBranding(
        resourceId: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> DescribeClientBrandingResult {
        let input = DescribeClientBrandingRequest(
            resourceId: resourceId
        )
        return try await self.describeClientBranding(input, logger: logger)
    }

    /// Retrieves a list that describes one or more specified Amazon WorkSpaces clients.
    @Sendable
    @inlinable
    public func describeClientProperties(_ input: DescribeClientPropertiesRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DescribeClientPropertiesResult {
        try await self.client.execute(
            operation: "DescribeClientProperties", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Retrieves a list that describes one or more specified Amazon WorkSpaces clients.
    ///
    /// Parameters:
    ///   - resourceIds: The resource identifier, in the form of directory IDs.
    ///   - logger: Logger use during operation
    @inlinable
    public func describeClientProperties(
        resourceIds: [String],
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> DescribeClientPropertiesResult {
        let input = DescribeClientPropertiesRequest(
            resourceIds: resourceIds
        )
        return try await self.describeClientProperties(input, logger: logger)
    }

    /// Retrieves a list of Amazon Connect client add-ins that have been created.
    @Sendable
    @inlinable
    public func describeConnectClientAddIns(_ input: DescribeConnectClientAddInsRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DescribeConnectClientAddInsResult {
        try await self.client.execute(
            operation: "DescribeConnectClientAddIns", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Retrieves a list of Amazon Connect client add-ins that have been created.
    ///
    /// Parameters:
    ///   - maxResults: The maximum number of items to return.
    ///   - nextToken: If you received a NextToken from a previous call that was paginated, provide this token to receive the next set of results.
    ///   - resourceId: The directory identifier for which the client add-in is configured.
    ///   - logger: Logger use during operation
    @inlinable
    public func describeConnectClientAddIns(
        maxResults: Int? = nil,
        nextToken: String? = nil,
        resourceId: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> DescribeConnectClientAddInsResult {
        let input = DescribeConnectClientAddInsRequest(
            maxResults: maxResults, 
            nextToken: nextToken, 
            resourceId: resourceId
        )
        return try await self.describeConnectClientAddIns(input, logger: logger)
    }

    /// Describes the permissions that the owner of a connection alias has granted to another Amazon Web Services account for the specified connection alias. For more information, see Cross-Region Redirection for Amazon WorkSpaces.
    @Sendable
    @inlinable
    public func describeConnectionAliasPermissions(_ input: DescribeConnectionAliasPermissionsRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DescribeConnectionAliasPermissionsResult {
        try await self.client.execute(
            operation: "DescribeConnectionAliasPermissions", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Describes the permissions that the owner of a connection alias has granted to another Amazon Web Services account for the specified connection alias. For more information, see Cross-Region Redirection for Amazon WorkSpaces.
    ///
    /// Parameters:
    ///   - aliasId: The identifier of the connection alias.
    ///   - maxResults: The maximum number of results to return.
    ///   - nextToken: If you received a NextToken from a previous call that was paginated, provide this token to receive the next set of results.
    ///   - logger: Logger use during operation
    @inlinable
    public func describeConnectionAliasPermissions(
        aliasId: String,
        maxResults: Int? = nil,
        nextToken: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> DescribeConnectionAliasPermissionsResult {
        let input = DescribeConnectionAliasPermissionsRequest(
            aliasId: aliasId, 
            maxResults: maxResults, 
            nextToken: nextToken
        )
        return try await self.describeConnectionAliasPermissions(input, logger: logger)
    }

    /// Retrieves a list that describes the connection aliases used for cross-Region redirection. For more information, see  Cross-Region Redirection for Amazon WorkSpaces.
    @Sendable
    @inlinable
    public func describeConnectionAliases(_ input: DescribeConnectionAliasesRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DescribeConnectionAliasesResult {
        try await self.client.execute(
            operation: "DescribeConnectionAliases", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Retrieves a list that describes the connection aliases used for cross-Region redirection. For more information, see  Cross-Region Redirection for Amazon WorkSpaces.
    ///
    /// Parameters:
    ///   - aliasIds: The identifiers of the connection aliases to describe.
    ///   - limit: The maximum number of connection aliases to return.
    ///   - nextToken: If you received a NextToken from a previous call that was paginated, provide this token to receive the next set of results.
    ///   - resourceId: The identifier of the directory associated with the connection alias.
    ///   - logger: Logger use during operation
    @inlinable
    public func describeConnectionAliases(
        aliasIds: [String]? = nil,
        limit: Int? = nil,
        nextToken: String? = nil,
        resourceId: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> DescribeConnectionAliasesResult {
        let input = DescribeConnectionAliasesRequest(
            aliasIds: aliasIds, 
            limit: limit, 
            nextToken: nextToken, 
            resourceId: resourceId
        )
        return try await self.describeConnectionAliases(input, logger: logger)
    }

    /// Describes the associations between the applications and the specified image.
    @Sendable
    @inlinable
    public func describeImageAssociations(_ input: DescribeImageAssociationsRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DescribeImageAssociationsResult {
        try await self.client.execute(
            operation: "DescribeImageAssociations", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Describes the associations between the applications and the specified image.
    ///
    /// Parameters:
    ///   - associatedResourceTypes: The resource types of the associated resource.
    ///   - imageId: The identifier of the image.
    ///   - logger: Logger use during operation
    @inlinable
    public func describeImageAssociations(
        associatedResourceTypes: [ImageAssociatedResourceType],
        imageId: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> DescribeImageAssociationsResult {
        let input = DescribeImageAssociationsRequest(
            associatedResourceTypes: associatedResourceTypes, 
            imageId: imageId
        )
        return try await self.describeImageAssociations(input, logger: logger)
    }

    /// Describes one or more of your IP access control groups.
    @Sendable
    @inlinable
    public func describeIpGroups(_ input: DescribeIpGroupsRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DescribeIpGroupsResult {
        try await self.client.execute(
            operation: "DescribeIpGroups", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Describes one or more of your IP access control groups.
    ///
    /// Parameters:
    ///   - groupIds: The identifiers of one or more IP access control groups.
    ///   - maxResults: The maximum number of items to return.
    ///   - nextToken: If you received a NextToken from a previous call that was paginated, provide this token to receive the next set of results.
    ///   - logger: Logger use during operation
    @inlinable
    public func describeIpGroups(
        groupIds: [String]? = nil,
        maxResults: Int? = nil,
        nextToken: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> DescribeIpGroupsResult {
        let input = DescribeIpGroupsRequest(
            groupIds: groupIds, 
            maxResults: maxResults, 
            nextToken: nextToken
        )
        return try await self.describeIpGroups(input, logger: logger)
    }

    /// Describes the specified tags for the specified WorkSpaces resource.
    @Sendable
    @inlinable
    public func describeTags(_ input: DescribeTagsRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DescribeTagsResult {
        try await self.client.execute(
            operation: "DescribeTags", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Describes the specified tags for the specified WorkSpaces resource.
    ///
    /// Parameters:
    ///   - resourceId: The identifier of the WorkSpaces resource. The supported resource types are WorkSpaces, registered directories, images, custom bundles, IP access control groups, and connection aliases.
    ///   - logger: Logger use during operation
    @inlinable
    public func describeTags(
        resourceId: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> DescribeTagsResult {
        let input = DescribeTagsRequest(
            resourceId: resourceId
        )
        return try await self.describeTags(input, logger: logger)
    }

    /// Describes the associations betweens applications and the specified WorkSpace.
    @Sendable
    @inlinable
    public func describeWorkspaceAssociations(_ input: DescribeWorkspaceAssociationsRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DescribeWorkspaceAssociationsResult {
        try await self.client.execute(
            operation: "DescribeWorkspaceAssociations", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Describes the associations betweens applications and the specified WorkSpace.
    ///
    /// Parameters:
    ///   - associatedResourceTypes: The resource types of the associated resources.
    ///   - workspaceId: The identifier of the WorkSpace.
    ///   - logger: Logger use during operation
    @inlinable
    public func describeWorkspaceAssociations(
        associatedResourceTypes: [WorkSpaceAssociatedResourceType],
        workspaceId: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> DescribeWorkspaceAssociationsResult {
        let input = DescribeWorkspaceAssociationsRequest(
            associatedResourceTypes: associatedResourceTypes, 
            workspaceId: workspaceId
        )
        return try await self.describeWorkspaceAssociations(input, logger: logger)
    }

    /// Retrieves a list that describes the available WorkSpace bundles. You can filter the results using either bundle ID or owner, but not both.
    @Sendable
    @inlinable
    public func describeWorkspaceBundles(_ input: DescribeWorkspaceBundlesRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DescribeWorkspaceBundlesResult {
        try await self.client.execute(
            operation: "DescribeWorkspaceBundles", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Retrieves a list that describes the available WorkSpace bundles. You can filter the results using either bundle ID or owner, but not both.
    ///
    /// Parameters:
    ///   - bundleIds: The identifiers of the bundles. You cannot combine this parameter with any other filter.
    ///   - nextToken: The token for the next set of results. (You received this token from a previous call.)
    ///   - owner: The owner of the bundles. You cannot combine this parameter with any other filter. To describe the bundles provided by Amazon Web Services, specify AMAZON.  To describe the bundles that belong to your account, don't specify a value.
    ///   - logger: Logger use during operation
    @inlinable
    public func describeWorkspaceBundles(
        bundleIds: [String]? = nil,
        nextToken: String? = nil,
        owner: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> DescribeWorkspaceBundlesResult {
        let input = DescribeWorkspaceBundlesRequest(
            bundleIds: bundleIds, 
            nextToken: nextToken, 
            owner: owner
        )
        return try await self.describeWorkspaceBundles(input, logger: logger)
    }

    /// Describes the available directories that are registered with Amazon WorkSpaces.
    @Sendable
    @inlinable
    public func describeWorkspaceDirectories(_ input: DescribeWorkspaceDirectoriesRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DescribeWorkspaceDirectoriesResult {
        try await self.client.execute(
            operation: "DescribeWorkspaceDirectories", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Describes the available directories that are registered with Amazon WorkSpaces.
    ///
    /// Parameters:
    ///   - directoryIds: The identifiers of the directories. If the value is null, all directories are retrieved.
    ///   - filters: The filter condition for the WorkSpaces.
    ///   - limit: The maximum number of directories to return.
    ///   - nextToken: If you received a NextToken from a previous call that was paginated, provide this token to receive the next set of results.
    ///   - workspaceDirectoryNames: The names of the WorkSpace directories.
    ///   - logger: Logger use during operation
    @inlinable
    public func describeWorkspaceDirectories(
        directoryIds: [String]? = nil,
        filters: [DescribeWorkspaceDirectoriesFilter]? = nil,
        limit: Int? = nil,
        nextToken: String? = nil,
        workspaceDirectoryNames: [String]? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> DescribeWorkspaceDirectoriesResult {
        let input = DescribeWorkspaceDirectoriesRequest(
            directoryIds: directoryIds, 
            filters: filters, 
            limit: limit, 
            nextToken: nextToken, 
            workspaceDirectoryNames: workspaceDirectoryNames
        )
        return try await self.describeWorkspaceDirectories(input, logger: logger)
    }

    /// Describes the permissions that the owner of an image has granted to other Amazon Web Services accounts for an image.
    @Sendable
    @inlinable
    public func describeWorkspaceImagePermissions(_ input: DescribeWorkspaceImagePermissionsRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DescribeWorkspaceImagePermissionsResult {
        try await self.client.execute(
            operation: "DescribeWorkspaceImagePermissions", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Describes the permissions that the owner of an image has granted to other Amazon Web Services accounts for an image.
    ///
    /// Parameters:
    ///   - imageId: The identifier of the image.
    ///   - maxResults: The maximum number of items to return.
    ///   - nextToken: If you received a NextToken from a previous call that was paginated, provide this token to receive the next set of results.
    ///   - logger: Logger use during operation
    @inlinable
    public func describeWorkspaceImagePermissions(
        imageId: String,
        maxResults: Int? = nil,
        nextToken: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> DescribeWorkspaceImagePermissionsResult {
        let input = DescribeWorkspaceImagePermissionsRequest(
            imageId: imageId, 
            maxResults: maxResults, 
            nextToken: nextToken
        )
        return try await self.describeWorkspaceImagePermissions(input, logger: logger)
    }

    /// Retrieves a list that describes one or more specified images, if the image identifiers are provided. Otherwise, all images in the account are described.
    @Sendable
    @inlinable
    public func describeWorkspaceImages(_ input: DescribeWorkspaceImagesRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DescribeWorkspaceImagesResult {
        try await self.client.execute(
            operation: "DescribeWorkspaceImages", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Retrieves a list that describes one or more specified images, if the image identifiers are provided. Otherwise, all images in the account are described.
    ///
    /// Parameters:
    ///   - imageIds: The identifier of the image.
    ///   - imageType: The type (owned or shared) of the image.
    ///   - maxResults: The maximum number of items to return.
    ///   - nextToken: If you received a NextToken from a previous call that was paginated, provide this token to receive the next set of results.
    ///   - logger: Logger use during operation
    @inlinable
    public func describeWorkspaceImages(
        imageIds: [String]? = nil,
        imageType: ImageType? = nil,
        maxResults: Int? = nil,
        nextToken: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> DescribeWorkspaceImagesResult {
        let input = DescribeWorkspaceImagesRequest(
            imageIds: imageIds, 
            imageType: imageType, 
            maxResults: maxResults, 
            nextToken: nextToken
        )
        return try await self.describeWorkspaceImages(input, logger: logger)
    }

    /// Describes the snapshots for the specified WorkSpace.
    @Sendable
    @inlinable
    public func describeWorkspaceSnapshots(_ input: DescribeWorkspaceSnapshotsRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DescribeWorkspaceSnapshotsResult {
        try await self.client.execute(
            operation: "DescribeWorkspaceSnapshots", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Describes the snapshots for the specified WorkSpace.
    ///
    /// Parameters:
    ///   - workspaceId: The identifier of the WorkSpace.
    ///   - logger: Logger use during operation
    @inlinable
    public func describeWorkspaceSnapshots(
        workspaceId: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> DescribeWorkspaceSnapshotsResult {
        let input = DescribeWorkspaceSnapshotsRequest(
            workspaceId: workspaceId
        )
        return try await self.describeWorkspaceSnapshots(input, logger: logger)
    }

    /// Describes the specified WorkSpaces. You can filter the results by using the bundle identifier, directory identifier, or owner, but you can specify only one filter at a time.
    @Sendable
    @inlinable
    public func describeWorkspaces(_ input: DescribeWorkspacesRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DescribeWorkspacesResult {
        try await self.client.execute(
            operation: "DescribeWorkspaces", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Describes the specified WorkSpaces. You can filter the results by using the bundle identifier, directory identifier, or owner, but you can specify only one filter at a time.
    ///
    /// Parameters:
    ///   - bundleId: The identifier of the bundle. All WorkSpaces that are created from this bundle are retrieved. You cannot combine this parameter with any other filter.
    ///   - directoryId: The identifier of the directory. In addition, you can optionally specify a specific directory user (see UserName). You cannot combine this parameter with any other filter.
    ///   - limit: The maximum number of items to return.
    ///   - nextToken: If you received a NextToken from a previous call that was paginated, provide this token to receive the next set of results.
    ///   - userName: The name of the directory user. You must specify this parameter with DirectoryId.
    ///   - workspaceIds: The identifiers of the WorkSpaces. You cannot combine this parameter with any other filter. Because the CreateWorkspaces operation is asynchronous, the identifier it returns is not immediately available. If you immediately call DescribeWorkspaces with this identifier, no information is returned.
    ///   - workspaceName: The name of the user-decoupled WorkSpace.
    ///   - logger: Logger use during operation
    @inlinable
    public func describeWorkspaces(
        bundleId: String? = nil,
        directoryId: String? = nil,
        limit: Int? = nil,
        nextToken: String? = nil,
        userName: String? = nil,
        workspaceIds: [String]? = nil,
        workspaceName: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> DescribeWorkspacesResult {
        let input = DescribeWorkspacesRequest(
            bundleId: bundleId, 
            directoryId: directoryId, 
            limit: limit, 
            nextToken: nextToken, 
            userName: userName, 
            workspaceIds: workspaceIds, 
            workspaceName: workspaceName
        )
        return try await self.describeWorkspaces(input, logger: logger)
    }

    /// Describes the connection status of the specified WorkSpaces.
    @Sendable
    @inlinable
    public func describeWorkspacesConnectionStatus(_ input: DescribeWorkspacesConnectionStatusRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DescribeWorkspacesConnectionStatusResult {
        try await self.client.execute(
            operation: "DescribeWorkspacesConnectionStatus", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Describes the connection status of the specified WorkSpaces.
    ///
    /// Parameters:
    ///   - nextToken: If you received a NextToken from a previous call that was paginated, provide this token to receive the next set of results.
    ///   - workspaceIds: The identifiers of the WorkSpaces. You can specify up to 25 WorkSpaces.
    ///   - logger: Logger use during operation
    @inlinable
    public func describeWorkspacesConnectionStatus(
        nextToken: String? = nil,
        workspaceIds: [String]? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> DescribeWorkspacesConnectionStatusResult {
        let input = DescribeWorkspacesConnectionStatusRequest(
            nextToken: nextToken, 
            workspaceIds: workspaceIds
        )
        return try await self.describeWorkspacesConnectionStatus(input, logger: logger)
    }

    /// Retrieves a list that describes the streaming sessions for a specified pool.
    @Sendable
    @inlinable
    public func describeWorkspacesPoolSessions(_ input: DescribeWorkspacesPoolSessionsRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DescribeWorkspacesPoolSessionsResult {
        try await self.client.execute(
            operation: "DescribeWorkspacesPoolSessions", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Retrieves a list that describes the streaming sessions for a specified pool.
    ///
    /// Parameters:
    ///   - limit: The maximum number of items to return.
    ///   - nextToken: If you received a NextToken from a previous call that was paginated,  provide this token to receive the next set of results.
    ///   - poolId: The identifier of the pool.
    ///   - userId: The identifier of the user.
    ///   - logger: Logger use during operation
    @inlinable
    public func describeWorkspacesPoolSessions(
        limit: Int? = nil,
        nextToken: String? = nil,
        poolId: String,
        userId: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> DescribeWorkspacesPoolSessionsResult {
        let input = DescribeWorkspacesPoolSessionsRequest(
            limit: limit, 
            nextToken: nextToken, 
            poolId: poolId, 
            userId: userId
        )
        return try await self.describeWorkspacesPoolSessions(input, logger: logger)
    }

    /// Describes the specified WorkSpaces Pools.
    @Sendable
    @inlinable
    public func describeWorkspacesPools(_ input: DescribeWorkspacesPoolsRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DescribeWorkspacesPoolsResult {
        try await self.client.execute(
            operation: "DescribeWorkspacesPools", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Describes the specified WorkSpaces Pools.
    ///
    /// Parameters:
    ///   - filters: The filter conditions for the WorkSpaces Pool to return.
    ///   - limit: The maximum number of items to return.
    ///   - nextToken: If you received a NextToken from a previous call that was paginated,  provide this token to receive the next set of results.
    ///   - poolIds: The identifier of the WorkSpaces Pools.
    ///   - logger: Logger use during operation
    @inlinable
    public func describeWorkspacesPools(
        filters: [DescribeWorkspacesPoolsFilter]? = nil,
        limit: Int? = nil,
        nextToken: String? = nil,
        poolIds: [String]? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> DescribeWorkspacesPoolsResult {
        let input = DescribeWorkspacesPoolsRequest(
            filters: filters, 
            limit: limit, 
            nextToken: nextToken, 
            poolIds: poolIds
        )
        return try await self.describeWorkspacesPools(input, logger: logger)
    }

    /// Disassociates a connection alias from a directory. Disassociating a connection alias disables cross-Region redirection between two directories in different Regions. For more information, see  Cross-Region Redirection for Amazon WorkSpaces.  Before performing this operation, call  DescribeConnectionAliases to make sure that the current state of the connection alias is CREATED.
    @Sendable
    @inlinable
    public func disassociateConnectionAlias(_ input: DisassociateConnectionAliasRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DisassociateConnectionAliasResult {
        try await self.client.execute(
            operation: "DisassociateConnectionAlias", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Disassociates a connection alias from a directory. Disassociating a connection alias disables cross-Region redirection between two directories in different Regions. For more information, see  Cross-Region Redirection for Amazon WorkSpaces.  Before performing this operation, call  DescribeConnectionAliases to make sure that the current state of the connection alias is CREATED.
    ///
    /// Parameters:
    ///   - aliasId: The identifier of the connection alias to disassociate.
    ///   - logger: Logger use during operation
    @inlinable
    public func disassociateConnectionAlias(
        aliasId: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> DisassociateConnectionAliasResult {
        let input = DisassociateConnectionAliasRequest(
            aliasId: aliasId
        )
        return try await self.disassociateConnectionAlias(input, logger: logger)
    }

    /// Disassociates the specified IP access control group from the specified directory.
    @Sendable
    @inlinable
    public func disassociateIpGroups(_ input: DisassociateIpGroupsRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DisassociateIpGroupsResult {
        try await self.client.execute(
            operation: "DisassociateIpGroups", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Disassociates the specified IP access control group from the specified directory.
    ///
    /// Parameters:
    ///   - directoryId: The identifier of the directory.
    ///   - groupIds: The identifiers of one or more IP access control groups.
    ///   - logger: Logger use during operation
    @inlinable
    public func disassociateIpGroups(
        directoryId: String,
        groupIds: [String],
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> DisassociateIpGroupsResult {
        let input = DisassociateIpGroupsRequest(
            directoryId: directoryId, 
            groupIds: groupIds
        )
        return try await self.disassociateIpGroups(input, logger: logger)
    }

    /// Disassociates the specified application from a WorkSpace.
    @Sendable
    @inlinable
    public func disassociateWorkspaceApplication(_ input: DisassociateWorkspaceApplicationRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DisassociateWorkspaceApplicationResult {
        try await self.client.execute(
            operation: "DisassociateWorkspaceApplication", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Disassociates the specified application from a WorkSpace.
    ///
    /// Parameters:
    ///   - applicationId: The identifier of the application.
    ///   - workspaceId: The identifier of the WorkSpace.
    ///   - logger: Logger use during operation
    @inlinable
    public func disassociateWorkspaceApplication(
        applicationId: String,
        workspaceId: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> DisassociateWorkspaceApplicationResult {
        let input = DisassociateWorkspaceApplicationRequest(
            applicationId: applicationId, 
            workspaceId: workspaceId
        )
        return try await self.disassociateWorkspaceApplication(input, logger: logger)
    }

    /// Retrieves account link information.
    @Sendable
    @inlinable
    public func getAccountLink(_ input: GetAccountLinkRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> GetAccountLinkResult {
        try await self.client.execute(
            operation: "GetAccountLink", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Retrieves account link information.
    ///
    /// Parameters:
    ///   - linkedAccountId: The identifier of the account link
    ///   - linkId: The identifier of the account to link.
    ///   - logger: Logger use during operation
    @inlinable
    public func getAccountLink(
        linkedAccountId: String? = nil,
        linkId: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> GetAccountLinkResult {
        let input = GetAccountLinkRequest(
            linkedAccountId: linkedAccountId, 
            linkId: linkId
        )
        return try await self.getAccountLink(input, logger: logger)
    }

    /// Imports client branding. Client branding allows you to customize your WorkSpace's client login portal. You can tailor your login portal company logo, the support email address, support link, link to reset password, and a custom message for users trying to sign in. After you import client branding, the default branding experience for the specified platform type is replaced with the imported experience    You must specify at least one platform type when importing client branding.   You can import up to 6 MB of data with each request. If your request exceeds this limit, you can import client branding for different platform types using separate requests.   In each platform type, the SupportEmail and SupportLink parameters are mutually exclusive. You can specify only one parameter for each platform type, but not both.   Imported data can take up to a minute to appear in the WorkSpaces client.
    @Sendable
    @inlinable
    public func importClientBranding(_ input: ImportClientBrandingRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> ImportClientBrandingResult {
        try await self.client.execute(
            operation: "ImportClientBranding", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Imports client branding. Client branding allows you to customize your WorkSpace's client login portal. You can tailor your login portal company logo, the support email address, support link, link to reset password, and a custom message for users trying to sign in. After you import client branding, the default branding experience for the specified platform type is replaced with the imported experience    You must specify at least one platform type when importing client branding.   You can import up to 6 MB of data with each request. If your request exceeds this limit, you can import client branding for different platform types using separate requests.   In each platform type, the SupportEmail and SupportLink parameters are mutually exclusive. You can specify only one parameter for each platform type, but not both.   Imported data can take up to a minute to appear in the WorkSpaces client.
    ///
    /// Parameters:
    ///   - deviceTypeAndroid: The branding information to import for Android devices.
    ///   - deviceTypeIos: The branding information to import for iOS devices.
    ///   - deviceTypeLinux: The branding information to import for Linux devices.
    ///   - deviceTypeOsx: The branding information to import for macOS devices.
    ///   - deviceTypeWeb: The branding information to import for web access.
    ///   - deviceTypeWindows: The branding information to import for Windows devices.
    ///   - resourceId: The directory identifier of the WorkSpace for which you want to import client branding.
    ///   - logger: Logger use during operation
    @inlinable
    public func importClientBranding(
        deviceTypeAndroid: DefaultImportClientBrandingAttributes? = nil,
        deviceTypeIos: IosImportClientBrandingAttributes? = nil,
        deviceTypeLinux: DefaultImportClientBrandingAttributes? = nil,
        deviceTypeOsx: DefaultImportClientBrandingAttributes? = nil,
        deviceTypeWeb: DefaultImportClientBrandingAttributes? = nil,
        deviceTypeWindows: DefaultImportClientBrandingAttributes? = nil,
        resourceId: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> ImportClientBrandingResult {
        let input = ImportClientBrandingRequest(
            deviceTypeAndroid: deviceTypeAndroid, 
            deviceTypeIos: deviceTypeIos, 
            deviceTypeLinux: deviceTypeLinux, 
            deviceTypeOsx: deviceTypeOsx, 
            deviceTypeWeb: deviceTypeWeb, 
            deviceTypeWindows: deviceTypeWindows, 
            resourceId: resourceId
        )
        return try await self.importClientBranding(input, logger: logger)
    }

    /// Imports the specified Windows 10 or 11 Bring Your Own License (BYOL)  image into Amazon WorkSpaces. The image must be an already licensed Amazon EC2 image that is  in your Amazon Web Services account, and you must own the image. For more information about  creating BYOL images, see  Bring Your Own Windows Desktop Licenses.
    @Sendable
    @inlinable
    public func importWorkspaceImage(_ input: ImportWorkspaceImageRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> ImportWorkspaceImageResult {
        try await self.client.execute(
            operation: "ImportWorkspaceImage", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Imports the specified Windows 10 or 11 Bring Your Own License (BYOL)  image into Amazon WorkSpaces. The image must be an already licensed Amazon EC2 image that is  in your Amazon Web Services account, and you must own the image. For more information about  creating BYOL images, see  Bring Your Own Windows Desktop Licenses.
    ///
    /// Parameters:
    ///   - applications: If specified, the version of Microsoft Office to subscribe to. Valid only for Windows 10 and 11 BYOL images. For more information about subscribing to Office for BYOL images, see  Bring Your Own Windows Desktop Licenses.    Although this parameter is an array, only one item is allowed at this time.   During the image import process, non-GPU DCV (formerly WSP) WorkSpaces with Windows 11 support only Microsoft_Office_2019. GPU DCV (formerly WSP) WorkSpaces with Windows 11 do not support Office installation.
    ///   - ec2ImageId: The identifier of the EC2 image.
    ///   - imageDescription: The description of the WorkSpace image.
    ///   - imageName: The name of the WorkSpace image.
    ///   - ingestionProcess: The ingestion process to be used when importing the image, depending on which protocol you want to use for your BYOL Workspace image, either PCoIP, WSP, or  bring your own protocol (BYOP). To use DCV, specify a value that ends in  _WSP. To use PCoIP, specify a value that does not end in _WSP.  To use BYOP, specify a value that ends in _BYOP. For non-GPU-enabled bundles (bundles other than Graphics or GraphicsPro), specify  BYOL_REGULAR, BYOL_REGULAR_WSP, or BYOL_REGULAR_BYOP,  depending on the protocol.  The BYOL_REGULAR_BYOP and BYOL_GRAPHICS_G4DN_BYOP values are only supported by Amazon WorkSpaces Core. Contact your account team to be allow-listed to use these values. For more information, see Amazon WorkSpaces Core.
    ///   - tags: The tags. Each WorkSpaces resource can have a maximum of 50 tags.
    ///   - logger: Logger use during operation
    @inlinable
    public func importWorkspaceImage(
        applications: [Application]? = nil,
        ec2ImageId: String,
        imageDescription: String,
        imageName: String,
        ingestionProcess: WorkspaceImageIngestionProcess,
        tags: [Tag]? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> ImportWorkspaceImageResult {
        let input = ImportWorkspaceImageRequest(
            applications: applications, 
            ec2ImageId: ec2ImageId, 
            imageDescription: imageDescription, 
            imageName: imageName, 
            ingestionProcess: ingestionProcess, 
            tags: tags
        )
        return try await self.importWorkspaceImage(input, logger: logger)
    }

    /// Lists all account links.
    @Sendable
    @inlinable
    public func listAccountLinks(_ input: ListAccountLinksRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> ListAccountLinksResult {
        try await self.client.execute(
            operation: "ListAccountLinks", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Lists all account links.
    ///
    /// Parameters:
    ///   - linkStatusFilter: Filters the account based on their link status.
    ///   - maxResults: The maximum number of accounts to return.
    ///   - nextToken: The token to use to retrieve the next page of results. This value is null when there are no more results to return.
    ///   - logger: Logger use during operation
    @inlinable
    public func listAccountLinks(
        linkStatusFilter: [AccountLinkStatusEnum]? = nil,
        maxResults: Int? = nil,
        nextToken: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> ListAccountLinksResult {
        let input = ListAccountLinksRequest(
            linkStatusFilter: linkStatusFilter, 
            maxResults: maxResults, 
            nextToken: nextToken
        )
        return try await self.listAccountLinks(input, logger: logger)
    }

    /// Retrieves a list of IP address ranges, specified as IPv4 CIDR blocks, that you can use for the network management interface when you enable Bring Your Own License (BYOL).  This operation can be run only by Amazon Web Services accounts that are enabled for BYOL. If your account isn't enabled for BYOL, you'll receive an AccessDeniedException error. The management network interface is connected to a secure Amazon WorkSpaces management network. It is used for interactive streaming of the WorkSpace desktop to Amazon WorkSpaces clients, and to allow Amazon WorkSpaces to manage the WorkSpace.
    @Sendable
    @inlinable
    public func listAvailableManagementCidrRanges(_ input: ListAvailableManagementCidrRangesRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> ListAvailableManagementCidrRangesResult {
        try await self.client.execute(
            operation: "ListAvailableManagementCidrRanges", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Retrieves a list of IP address ranges, specified as IPv4 CIDR blocks, that you can use for the network management interface when you enable Bring Your Own License (BYOL).  This operation can be run only by Amazon Web Services accounts that are enabled for BYOL. If your account isn't enabled for BYOL, you'll receive an AccessDeniedException error. The management network interface is connected to a secure Amazon WorkSpaces management network. It is used for interactive streaming of the WorkSpace desktop to Amazon WorkSpaces clients, and to allow Amazon WorkSpaces to manage the WorkSpace.
    ///
    /// Parameters:
    ///   - managementCidrRangeConstraint: The IP address range to search. Specify an IP address range that is compatible with your network and in CIDR notation (that is, specify the range as an IPv4 CIDR block).
    ///   - maxResults: The maximum number of items to return.
    ///   - nextToken: If you received a NextToken from a previous call that was paginated, provide this token to receive the next set of results.
    ///   - logger: Logger use during operation
    @inlinable
    public func listAvailableManagementCidrRanges(
        managementCidrRangeConstraint: String,
        maxResults: Int? = nil,
        nextToken: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> ListAvailableManagementCidrRangesResult {
        let input = ListAvailableManagementCidrRangesRequest(
            managementCidrRangeConstraint: managementCidrRangeConstraint, 
            maxResults: maxResults, 
            nextToken: nextToken
        )
        return try await self.listAvailableManagementCidrRanges(input, logger: logger)
    }

    /// Migrates a WorkSpace from one operating system or bundle type to another, while retaining the data on the user volume. The migration process recreates the WorkSpace by using a new root volume from the target bundle image and the user volume from the last available snapshot of the original WorkSpace. During migration, the original D:\Users\%USERNAME% user profile folder is renamed to D:\Users\%USERNAME%MMddyyTHHmmss%.NotMigrated. A new D:\Users\%USERNAME%\ folder is generated by the new OS. Certain files in the old user profile are moved to the new user profile. For available migration scenarios, details about what happens during migration, and best practices, see Migrate a WorkSpace.
    @Sendable
    @inlinable
    public func migrateWorkspace(_ input: MigrateWorkspaceRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> MigrateWorkspaceResult {
        try await self.client.execute(
            operation: "MigrateWorkspace", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Migrates a WorkSpace from one operating system or bundle type to another, while retaining the data on the user volume. The migration process recreates the WorkSpace by using a new root volume from the target bundle image and the user volume from the last available snapshot of the original WorkSpace. During migration, the original D:\Users\%USERNAME% user profile folder is renamed to D:\Users\%USERNAME%MMddyyTHHmmss%.NotMigrated. A new D:\Users\%USERNAME%\ folder is generated by the new OS. Certain files in the old user profile are moved to the new user profile. For available migration scenarios, details about what happens during migration, and best practices, see Migrate a WorkSpace.
    ///
    /// Parameters:
    ///   - bundleId: The identifier of the target bundle type to migrate the WorkSpace to.
    ///   - sourceWorkspaceId: The identifier of the WorkSpace to migrate from.
    ///   - logger: Logger use during operation
    @inlinable
    public func migrateWorkspace(
        bundleId: String,
        sourceWorkspaceId: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> MigrateWorkspaceResult {
        let input = MigrateWorkspaceRequest(
            bundleId: bundleId, 
            sourceWorkspaceId: sourceWorkspaceId
        )
        return try await self.migrateWorkspace(input, logger: logger)
    }

    /// Modifies the configuration of Bring Your Own License (BYOL) for the specified account.
    @Sendable
    @inlinable
    public func modifyAccount(_ input: ModifyAccountRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> ModifyAccountResult {
        try await self.client.execute(
            operation: "ModifyAccount", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Modifies the configuration of Bring Your Own License (BYOL) for the specified account.
    ///
    /// Parameters:
    ///   - dedicatedTenancyManagementCidrRange: The IP address range, specified as an IPv4 CIDR block, for the management network interface. Specify an IP address range that is compatible with your network and in CIDR notation (that is, specify the range as an IPv4 CIDR block). The CIDR block size must be /16 (for example, 203.0.113.25/16). It must also be specified as available by the ListAvailableManagementCidrRanges operation.
    ///   - dedicatedTenancySupport: The status of BYOL.
    ///   - logger: Logger use during operation
    @inlinable
    public func modifyAccount(
        dedicatedTenancyManagementCidrRange: String? = nil,
        dedicatedTenancySupport: DedicatedTenancySupportEnum? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> ModifyAccountResult {
        let input = ModifyAccountRequest(
            dedicatedTenancyManagementCidrRange: dedicatedTenancyManagementCidrRange, 
            dedicatedTenancySupport: dedicatedTenancySupport
        )
        return try await self.modifyAccount(input, logger: logger)
    }

    /// Modifies the properties of the certificate-based authentication you want to use with your WorkSpaces.
    @Sendable
    @inlinable
    public func modifyCertificateBasedAuthProperties(_ input: ModifyCertificateBasedAuthPropertiesRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> ModifyCertificateBasedAuthPropertiesResult {
        try await self.client.execute(
            operation: "ModifyCertificateBasedAuthProperties", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Modifies the properties of the certificate-based authentication you want to use with your WorkSpaces.
    ///
    /// Parameters:
    ///   - certificateBasedAuthProperties: The properties of the certificate-based authentication.
    ///   - propertiesToDelete: The properties of the certificate-based authentication you want to delete.
    ///   - resourceId: The resource identifiers, in the form of directory IDs.
    ///   - logger: Logger use during operation
    @inlinable
    public func modifyCertificateBasedAuthProperties(
        certificateBasedAuthProperties: CertificateBasedAuthProperties? = nil,
        propertiesToDelete: [DeletableCertificateBasedAuthProperty]? = nil,
        resourceId: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> ModifyCertificateBasedAuthPropertiesResult {
        let input = ModifyCertificateBasedAuthPropertiesRequest(
            certificateBasedAuthProperties: certificateBasedAuthProperties, 
            propertiesToDelete: propertiesToDelete, 
            resourceId: resourceId
        )
        return try await self.modifyCertificateBasedAuthProperties(input, logger: logger)
    }

    /// Modifies the properties of the specified Amazon WorkSpaces clients.
    @Sendable
    @inlinable
    public func modifyClientProperties(_ input: ModifyClientPropertiesRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> ModifyClientPropertiesResult {
        try await self.client.execute(
            operation: "ModifyClientProperties", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Modifies the properties of the specified Amazon WorkSpaces clients.
    ///
    /// Parameters:
    ///   - clientProperties: Information about the Amazon WorkSpaces client.
    ///   - resourceId: The resource identifiers, in the form of directory IDs.
    ///   - logger: Logger use during operation
    @inlinable
    public func modifyClientProperties(
        clientProperties: ClientProperties,
        resourceId: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> ModifyClientPropertiesResult {
        let input = ModifyClientPropertiesRequest(
            clientProperties: clientProperties, 
            resourceId: resourceId
        )
        return try await self.modifyClientProperties(input, logger: logger)
    }

    /// Modifies multiple properties related to SAML 2.0 authentication, including the enablement status,  user access URL, and relay state parameter name that are used for configuring federation with an  SAML 2.0 identity provider.
    @Sendable
    @inlinable
    public func modifySamlProperties(_ input: ModifySamlPropertiesRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> ModifySamlPropertiesResult {
        try await self.client.execute(
            operation: "ModifySamlProperties", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Modifies multiple properties related to SAML 2.0 authentication, including the enablement status,  user access URL, and relay state parameter name that are used for configuring federation with an  SAML 2.0 identity provider.
    ///
    /// Parameters:
    ///   - propertiesToDelete: The SAML properties to delete as part of your request. Specify one of the following options:    SAML_PROPERTIES_USER_ACCESS_URL to delete the user access URL.    SAML_PROPERTIES_RELAY_STATE_PARAMETER_NAME to delete the relay state parameter name.
    ///   - resourceId: The directory identifier for which you want to configure SAML properties.
    ///   - samlProperties: The properties for configuring SAML 2.0 authentication.
    ///   - logger: Logger use during operation
    @inlinable
    public func modifySamlProperties(
        propertiesToDelete: [DeletableSamlProperty]? = nil,
        resourceId: String,
        samlProperties: SamlProperties? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> ModifySamlPropertiesResult {
        let input = ModifySamlPropertiesRequest(
            propertiesToDelete: propertiesToDelete, 
            resourceId: resourceId, 
            samlProperties: samlProperties
        )
        return try await self.modifySamlProperties(input, logger: logger)
    }

    /// Modifies the self-service WorkSpace management capabilities for your users. For more information, see Enable Self-Service WorkSpace Management Capabilities for Your Users.
    @Sendable
    @inlinable
    public func modifySelfservicePermissions(_ input: ModifySelfservicePermissionsRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> ModifySelfservicePermissionsResult {
        try await self.client.execute(
            operation: "ModifySelfservicePermissions", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Modifies the self-service WorkSpace management capabilities for your users. For more information, see Enable Self-Service WorkSpace Management Capabilities for Your Users.
    ///
    /// Parameters:
    ///   - resourceId: The identifier of the directory.
    ///   - selfservicePermissions: The permissions to enable or disable self-service capabilities.
    ///   - logger: Logger use during operation
    @inlinable
    public func modifySelfservicePermissions(
        resourceId: String,
        selfservicePermissions: SelfservicePermissions,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> ModifySelfservicePermissionsResult {
        let input = ModifySelfservicePermissionsRequest(
            resourceId: resourceId, 
            selfservicePermissions: selfservicePermissions
        )
        return try await self.modifySelfservicePermissions(input, logger: logger)
    }

    /// Modifies the specified streaming properties.
    @Sendable
    @inlinable
    public func modifyStreamingProperties(_ input: ModifyStreamingPropertiesRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> ModifyStreamingPropertiesResult {
        try await self.client.execute(
            operation: "ModifyStreamingProperties", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Modifies the specified streaming properties.
    ///
    /// Parameters:
    ///   - resourceId: The identifier of the resource.
    ///   - streamingProperties: The streaming properties to configure.
    ///   - logger: Logger use during operation
    @inlinable
    public func modifyStreamingProperties(
        resourceId: String,
        streamingProperties: StreamingProperties? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> ModifyStreamingPropertiesResult {
        let input = ModifyStreamingPropertiesRequest(
            resourceId: resourceId, 
            streamingProperties: streamingProperties
        )
        return try await self.modifyStreamingProperties(input, logger: logger)
    }

    /// Specifies which devices and operating systems users can use to access their WorkSpaces. For more information, see  Control Device Access.
    @Sendable
    @inlinable
    public func modifyWorkspaceAccessProperties(_ input: ModifyWorkspaceAccessPropertiesRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> ModifyWorkspaceAccessPropertiesResult {
        try await self.client.execute(
            operation: "ModifyWorkspaceAccessProperties", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Specifies which devices and operating systems users can use to access their WorkSpaces. For more information, see  Control Device Access.
    ///
    /// Parameters:
    ///   - resourceId: The identifier of the directory.
    ///   - workspaceAccessProperties: The device types and operating systems to enable or disable for access.
    ///   - logger: Logger use during operation
    @inlinable
    public func modifyWorkspaceAccessProperties(
        resourceId: String,
        workspaceAccessProperties: WorkspaceAccessProperties,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> ModifyWorkspaceAccessPropertiesResult {
        let input = ModifyWorkspaceAccessPropertiesRequest(
            resourceId: resourceId, 
            workspaceAccessProperties: workspaceAccessProperties
        )
        return try await self.modifyWorkspaceAccessProperties(input, logger: logger)
    }

    /// Modify the default properties used to create WorkSpaces.
    @Sendable
    @inlinable
    public func modifyWorkspaceCreationProperties(_ input: ModifyWorkspaceCreationPropertiesRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> ModifyWorkspaceCreationPropertiesResult {
        try await self.client.execute(
            operation: "ModifyWorkspaceCreationProperties", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Modify the default properties used to create WorkSpaces.
    ///
    /// Parameters:
    ///   - resourceId: The identifier of the directory.
    ///   - workspaceCreationProperties: The default properties for creating WorkSpaces.
    ///   - logger: Logger use during operation
    @inlinable
    public func modifyWorkspaceCreationProperties(
        resourceId: String,
        workspaceCreationProperties: WorkspaceCreationProperties,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> ModifyWorkspaceCreationPropertiesResult {
        let input = ModifyWorkspaceCreationPropertiesRequest(
            resourceId: resourceId, 
            workspaceCreationProperties: workspaceCreationProperties
        )
        return try await self.modifyWorkspaceCreationProperties(input, logger: logger)
    }

    /// Modifies the specified WorkSpace properties. For important information about how to modify the size of the root and user volumes, see  Modify a WorkSpace.   The MANUAL running mode value is only supported by Amazon WorkSpaces Core. Contact your account team to be allow-listed to use this value. For more information, see Amazon WorkSpaces Core.
    @Sendable
    @inlinable
    public func modifyWorkspaceProperties(_ input: ModifyWorkspacePropertiesRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> ModifyWorkspacePropertiesResult {
        try await self.client.execute(
            operation: "ModifyWorkspaceProperties", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Modifies the specified WorkSpace properties. For important information about how to modify the size of the root and user volumes, see  Modify a WorkSpace.   The MANUAL running mode value is only supported by Amazon WorkSpaces Core. Contact your account team to be allow-listed to use this value. For more information, see Amazon WorkSpaces Core.
    ///
    /// Parameters:
    ///   - dataReplication: Indicates the data replication status.
    ///   - workspaceId: The identifier of the WorkSpace.
    ///   - workspaceProperties: The properties of the WorkSpace.
    ///   - logger: Logger use during operation
    @inlinable
    public func modifyWorkspaceProperties(
        dataReplication: DataReplication? = nil,
        workspaceId: String,
        workspaceProperties: WorkspaceProperties? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> ModifyWorkspacePropertiesResult {
        let input = ModifyWorkspacePropertiesRequest(
            dataReplication: dataReplication, 
            workspaceId: workspaceId, 
            workspaceProperties: workspaceProperties
        )
        return try await self.modifyWorkspaceProperties(input, logger: logger)
    }

    /// Sets the state of the specified WorkSpace. To maintain a WorkSpace without being interrupted, set the WorkSpace state to ADMIN_MAINTENANCE. WorkSpaces in this state do not respond to requests to reboot, stop, start, rebuild, or restore. An AutoStop WorkSpace in this state is not stopped. Users cannot log into a WorkSpace in the ADMIN_MAINTENANCE state.
    @Sendable
    @inlinable
    public func modifyWorkspaceState(_ input: ModifyWorkspaceStateRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> ModifyWorkspaceStateResult {
        try await self.client.execute(
            operation: "ModifyWorkspaceState", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Sets the state of the specified WorkSpace. To maintain a WorkSpace without being interrupted, set the WorkSpace state to ADMIN_MAINTENANCE. WorkSpaces in this state do not respond to requests to reboot, stop, start, rebuild, or restore. An AutoStop WorkSpace in this state is not stopped. Users cannot log into a WorkSpace in the ADMIN_MAINTENANCE state.
    ///
    /// Parameters:
    ///   - workspaceId: The identifier of the WorkSpace.
    ///   - workspaceState: The WorkSpace state.
    ///   - logger: Logger use during operation
    @inlinable
    public func modifyWorkspaceState(
        workspaceId: String,
        workspaceState: TargetWorkspaceState,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> ModifyWorkspaceStateResult {
        let input = ModifyWorkspaceStateRequest(
            workspaceId: workspaceId, 
            workspaceState: workspaceState
        )
        return try await self.modifyWorkspaceState(input, logger: logger)
    }

    /// Reboots the specified WorkSpaces. You cannot reboot a WorkSpace unless its state is AVAILABLE, UNHEALTHY, or REBOOTING. Reboot a WorkSpace in the REBOOTING  state only if your WorkSpace has been stuck in the REBOOTING state for over 20 minutes. This operation is asynchronous and returns before the WorkSpaces have rebooted.
    @Sendable
    @inlinable
    public func rebootWorkspaces(_ input: RebootWorkspacesRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> RebootWorkspacesResult {
        try await self.client.execute(
            operation: "RebootWorkspaces", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Reboots the specified WorkSpaces. You cannot reboot a WorkSpace unless its state is AVAILABLE, UNHEALTHY, or REBOOTING. Reboot a WorkSpace in the REBOOTING  state only if your WorkSpace has been stuck in the REBOOTING state for over 20 minutes. This operation is asynchronous and returns before the WorkSpaces have rebooted.
    ///
    /// Parameters:
    ///   - rebootWorkspaceRequests: The WorkSpaces to reboot. You can specify up to 25 WorkSpaces.
    ///   - logger: Logger use during operation
    @inlinable
    public func rebootWorkspaces(
        rebootWorkspaceRequests: [RebootRequest],
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> RebootWorkspacesResult {
        let input = RebootWorkspacesRequest(
            rebootWorkspaceRequests: rebootWorkspaceRequests
        )
        return try await self.rebootWorkspaces(input, logger: logger)
    }

    /// Rebuilds the specified WorkSpace. You cannot rebuild a WorkSpace unless its state is AVAILABLE, ERROR, UNHEALTHY, STOPPED, or REBOOTING. Rebuilding a WorkSpace is a potentially destructive action that can result in the loss of data. For more information, see Rebuild a WorkSpace. This operation is asynchronous and returns before the WorkSpaces have been completely rebuilt.
    @Sendable
    @inlinable
    public func rebuildWorkspaces(_ input: RebuildWorkspacesRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> RebuildWorkspacesResult {
        try await self.client.execute(
            operation: "RebuildWorkspaces", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Rebuilds the specified WorkSpace. You cannot rebuild a WorkSpace unless its state is AVAILABLE, ERROR, UNHEALTHY, STOPPED, or REBOOTING. Rebuilding a WorkSpace is a potentially destructive action that can result in the loss of data. For more information, see Rebuild a WorkSpace. This operation is asynchronous and returns before the WorkSpaces have been completely rebuilt.
    ///
    /// Parameters:
    ///   - rebuildWorkspaceRequests: The WorkSpace to rebuild. You can specify a single WorkSpace.
    ///   - logger: Logger use during operation
    @inlinable
    public func rebuildWorkspaces(
        rebuildWorkspaceRequests: [RebuildRequest],
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> RebuildWorkspacesResult {
        let input = RebuildWorkspacesRequest(
            rebuildWorkspaceRequests: rebuildWorkspaceRequests
        )
        return try await self.rebuildWorkspaces(input, logger: logger)
    }

    /// Registers the specified directory. This operation is asynchronous and returns before the WorkSpace directory is registered. If this is the first time you are registering a directory, you will need to create the workspaces_DefaultRole role before you can register a directory. For more information, see  Creating the workspaces_DefaultRole Role.
    @Sendable
    @inlinable
    public func registerWorkspaceDirectory(_ input: RegisterWorkspaceDirectoryRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> RegisterWorkspaceDirectoryResult {
        try await self.client.execute(
            operation: "RegisterWorkspaceDirectory", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Registers the specified directory. This operation is asynchronous and returns before the WorkSpace directory is registered. If this is the first time you are registering a directory, you will need to create the workspaces_DefaultRole role before you can register a directory. For more information, see  Creating the workspaces_DefaultRole Role.
    ///
    /// Parameters:
    ///   - activeDirectoryConfig: The active directory config of the directory.
    ///   - directoryId: The identifier of the directory. You cannot register a directory if it does not have a status of Active. If the directory does not have a status of Active, you will receive an InvalidResourceStateException error. If you have already registered the maximum number of directories that you can register with Amazon WorkSpaces, you will receive a ResourceLimitExceededException error. Deregister directories that you are not using for WorkSpaces, and try again.
    ///   - enableSelfService: Indicates whether self-service capabilities are enabled or disabled.
    ///   - enableWorkDocs: Indicates whether Amazon WorkDocs is enabled or disabled. If you have enabled this parameter and WorkDocs is not available in the Region, you will receive an OperationNotSupportedException error. Set EnableWorkDocs to disabled, and try again.
    ///   - idcInstanceArn: The Amazon Resource Name (ARN) of the identity center instance.
    ///   - microsoftEntraConfig: The details about Microsoft Entra config.
    ///   - subnetIds: The identifiers of the subnets for your virtual private cloud (VPC). Make sure that the subnets are in supported Availability Zones. The subnets must also be in separate Availability Zones. If these conditions are not met, you will receive an OperationNotSupportedException error.
    ///   - tags: The tags associated with the directory.
    ///   - tenancy: Indicates whether your WorkSpace directory is dedicated or shared. To use Bring Your Own License (BYOL) images, this value must be set to DEDICATED and your Amazon Web Services account must be enabled for BYOL. If your account has not been enabled for BYOL, you will receive an InvalidParameterValuesException error. For more information about BYOL images, see Bring Your Own Windows Desktop Images.
    ///   - userIdentityType: The type of identity management the user is using.
    ///   - workspaceDirectoryDescription: Description of the directory to register.
    ///   - workspaceDirectoryName: The name of the directory to register.
    ///   - workspaceType: Indicates whether the directory's WorkSpace type is personal or pools.
    ///   - logger: Logger use during operation
    @inlinable
    public func registerWorkspaceDirectory(
        activeDirectoryConfig: ActiveDirectoryConfig? = nil,
        directoryId: String? = nil,
        enableSelfService: Bool? = nil,
        enableWorkDocs: Bool? = nil,
        idcInstanceArn: String? = nil,
        microsoftEntraConfig: MicrosoftEntraConfig? = nil,
        subnetIds: [String]? = nil,
        tags: [Tag]? = nil,
        tenancy: Tenancy? = nil,
        userIdentityType: UserIdentityType? = nil,
        workspaceDirectoryDescription: String? = nil,
        workspaceDirectoryName: String? = nil,
        workspaceType: WorkspaceType? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> RegisterWorkspaceDirectoryResult {
        let input = RegisterWorkspaceDirectoryRequest(
            activeDirectoryConfig: activeDirectoryConfig, 
            directoryId: directoryId, 
            enableSelfService: enableSelfService, 
            enableWorkDocs: enableWorkDocs, 
            idcInstanceArn: idcInstanceArn, 
            microsoftEntraConfig: microsoftEntraConfig, 
            subnetIds: subnetIds, 
            tags: tags, 
            tenancy: tenancy, 
            userIdentityType: userIdentityType, 
            workspaceDirectoryDescription: workspaceDirectoryDescription, 
            workspaceDirectoryName: workspaceDirectoryName, 
            workspaceType: workspaceType
        )
        return try await self.registerWorkspaceDirectory(input, logger: logger)
    }

    /// Rejects the account link invitation.
    @Sendable
    @inlinable
    public func rejectAccountLinkInvitation(_ input: RejectAccountLinkInvitationRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> RejectAccountLinkInvitationResult {
        try await self.client.execute(
            operation: "RejectAccountLinkInvitation", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Rejects the account link invitation.
    ///
    /// Parameters:
    ///   - clientToken: The client token of the account link invitation to reject.
    ///   - linkId: The identifier of the account link
    ///   - logger: Logger use during operation
    @inlinable
    public func rejectAccountLinkInvitation(
        clientToken: String? = nil,
        linkId: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> RejectAccountLinkInvitationResult {
        let input = RejectAccountLinkInvitationRequest(
            clientToken: clientToken, 
            linkId: linkId
        )
        return try await self.rejectAccountLinkInvitation(input, logger: logger)
    }

    /// Restores the specified WorkSpace to its last known healthy state. You cannot restore a WorkSpace unless its state is  AVAILABLE, ERROR, UNHEALTHY, or STOPPED. Restoring a WorkSpace is a potentially destructive action that can result in the loss of data. For more information, see Restore a WorkSpace. This operation is asynchronous and returns before the WorkSpace is completely restored.
    @Sendable
    @inlinable
    public func restoreWorkspace(_ input: RestoreWorkspaceRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> RestoreWorkspaceResult {
        try await self.client.execute(
            operation: "RestoreWorkspace", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Restores the specified WorkSpace to its last known healthy state. You cannot restore a WorkSpace unless its state is  AVAILABLE, ERROR, UNHEALTHY, or STOPPED. Restoring a WorkSpace is a potentially destructive action that can result in the loss of data. For more information, see Restore a WorkSpace. This operation is asynchronous and returns before the WorkSpace is completely restored.
    ///
    /// Parameters:
    ///   - workspaceId: The identifier of the WorkSpace.
    ///   - logger: Logger use during operation
    @inlinable
    public func restoreWorkspace(
        workspaceId: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> RestoreWorkspaceResult {
        let input = RestoreWorkspaceRequest(
            workspaceId: workspaceId
        )
        return try await self.restoreWorkspace(input, logger: logger)
    }

    /// Removes one or more rules from the specified IP access control group.
    @Sendable
    @inlinable
    public func revokeIpRules(_ input: RevokeIpRulesRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> RevokeIpRulesResult {
        try await self.client.execute(
            operation: "RevokeIpRules", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Removes one or more rules from the specified IP access control group.
    ///
    /// Parameters:
    ///   - groupId: The identifier of the group.
    ///   - userRules: The rules to remove from the group.
    ///   - logger: Logger use during operation
    @inlinable
    public func revokeIpRules(
        groupId: String,
        userRules: [String],
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> RevokeIpRulesResult {
        let input = RevokeIpRulesRequest(
            groupId: groupId, 
            userRules: userRules
        )
        return try await self.revokeIpRules(input, logger: logger)
    }

    /// Starts the specified WorkSpaces. You cannot start a WorkSpace unless it has a running mode of AutoStop or Manual and a state of STOPPED.
    @Sendable
    @inlinable
    public func startWorkspaces(_ input: StartWorkspacesRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> StartWorkspacesResult {
        try await self.client.execute(
            operation: "StartWorkspaces", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Starts the specified WorkSpaces. You cannot start a WorkSpace unless it has a running mode of AutoStop or Manual and a state of STOPPED.
    ///
    /// Parameters:
    ///   - startWorkspaceRequests: The WorkSpaces to start. You can specify up to 25 WorkSpaces.
    ///   - logger: Logger use during operation
    @inlinable
    public func startWorkspaces(
        startWorkspaceRequests: [StartRequest],
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> StartWorkspacesResult {
        let input = StartWorkspacesRequest(
            startWorkspaceRequests: startWorkspaceRequests
        )
        return try await self.startWorkspaces(input, logger: logger)
    }

    /// Starts the specified pool. You cannot start a pool unless it has a running mode of  AutoStop and a state of STOPPED.
    @Sendable
    @inlinable
    public func startWorkspacesPool(_ input: StartWorkspacesPoolRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> StartWorkspacesPoolResult {
        try await self.client.execute(
            operation: "StartWorkspacesPool", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Starts the specified pool. You cannot start a pool unless it has a running mode of  AutoStop and a state of STOPPED.
    ///
    /// Parameters:
    ///   - poolId: The identifier of the pool.
    ///   - logger: Logger use during operation
    @inlinable
    public func startWorkspacesPool(
        poolId: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> StartWorkspacesPoolResult {
        let input = StartWorkspacesPoolRequest(
            poolId: poolId
        )
        return try await self.startWorkspacesPool(input, logger: logger)
    }

    /// Stops the specified WorkSpaces. You cannot stop a WorkSpace unless it has a running mode of AutoStop or Manual and a state of AVAILABLE, IMPAIRED, UNHEALTHY, or ERROR.
    @Sendable
    @inlinable
    public func stopWorkspaces(_ input: StopWorkspacesRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> StopWorkspacesResult {
        try await self.client.execute(
            operation: "StopWorkspaces", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Stops the specified WorkSpaces. You cannot stop a WorkSpace unless it has a running mode of AutoStop or Manual and a state of AVAILABLE, IMPAIRED, UNHEALTHY, or ERROR.
    ///
    /// Parameters:
    ///   - stopWorkspaceRequests: The WorkSpaces to stop. You can specify up to 25 WorkSpaces.
    ///   - logger: Logger use during operation
    @inlinable
    public func stopWorkspaces(
        stopWorkspaceRequests: [StopRequest],
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> StopWorkspacesResult {
        let input = StopWorkspacesRequest(
            stopWorkspaceRequests: stopWorkspaceRequests
        )
        return try await self.stopWorkspaces(input, logger: logger)
    }

    /// Stops the specified pool. You cannot stop a WorkSpace pool unless it has a running mode of AutoStop  and a state of AVAILABLE, IMPAIRED, UNHEALTHY, or ERROR.
    @Sendable
    @inlinable
    public func stopWorkspacesPool(_ input: StopWorkspacesPoolRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> StopWorkspacesPoolResult {
        try await self.client.execute(
            operation: "StopWorkspacesPool", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Stops the specified pool. You cannot stop a WorkSpace pool unless it has a running mode of AutoStop  and a state of AVAILABLE, IMPAIRED, UNHEALTHY, or ERROR.
    ///
    /// Parameters:
    ///   - poolId: The identifier of the pool.
    ///   - logger: Logger use during operation
    @inlinable
    public func stopWorkspacesPool(
        poolId: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> StopWorkspacesPoolResult {
        let input = StopWorkspacesPoolRequest(
            poolId: poolId
        )
        return try await self.stopWorkspacesPool(input, logger: logger)
    }

    /// Terminates the specified WorkSpaces.  Terminating a WorkSpace is a permanent action and cannot be undone. The user's data is destroyed. If you need to archive any user data, contact Amazon Web Services Support before terminating the WorkSpace.  You can terminate a WorkSpace that is in any state except SUSPENDED. This operation is asynchronous and returns before the WorkSpaces have been completely terminated. After a WorkSpace is terminated, the TERMINATED state is returned only briefly before the WorkSpace directory metadata is cleaned up, so this state is rarely returned. To confirm that a WorkSpace is terminated, check for the WorkSpace ID by using  DescribeWorkSpaces. If the WorkSpace ID isn't returned, then the WorkSpace has been successfully terminated.  Simple AD and AD Connector are made available to you free of charge to use with WorkSpaces. If there are no WorkSpaces being used with your Simple AD or AD Connector directory for 30 consecutive days, this directory will be automatically deregistered for use with Amazon WorkSpaces, and you will be charged for this directory as per the Directory Service pricing terms. To delete empty directories, see  Delete the Directory for Your WorkSpaces. If you delete your Simple AD or AD Connector directory, you can always create a new one when you want to start using WorkSpaces again.
    @Sendable
    @inlinable
    public func terminateWorkspaces(_ input: TerminateWorkspacesRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> TerminateWorkspacesResult {
        try await self.client.execute(
            operation: "TerminateWorkspaces", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Terminates the specified WorkSpaces.  Terminating a WorkSpace is a permanent action and cannot be undone. The user's data is destroyed. If you need to archive any user data, contact Amazon Web Services Support before terminating the WorkSpace.  You can terminate a WorkSpace that is in any state except SUSPENDED. This operation is asynchronous and returns before the WorkSpaces have been completely terminated. After a WorkSpace is terminated, the TERMINATED state is returned only briefly before the WorkSpace directory metadata is cleaned up, so this state is rarely returned. To confirm that a WorkSpace is terminated, check for the WorkSpace ID by using  DescribeWorkSpaces. If the WorkSpace ID isn't returned, then the WorkSpace has been successfully terminated.  Simple AD and AD Connector are made available to you free of charge to use with WorkSpaces. If there are no WorkSpaces being used with your Simple AD or AD Connector directory for 30 consecutive days, this directory will be automatically deregistered for use with Amazon WorkSpaces, and you will be charged for this directory as per the Directory Service pricing terms. To delete empty directories, see  Delete the Directory for Your WorkSpaces. If you delete your Simple AD or AD Connector directory, you can always create a new one when you want to start using WorkSpaces again.
    ///
    /// Parameters:
    ///   - terminateWorkspaceRequests: The WorkSpaces to terminate. You can specify up to 25 WorkSpaces.
    ///   - logger: Logger use during operation
    @inlinable
    public func terminateWorkspaces(
        terminateWorkspaceRequests: [TerminateRequest],
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> TerminateWorkspacesResult {
        let input = TerminateWorkspacesRequest(
            terminateWorkspaceRequests: terminateWorkspaceRequests
        )
        return try await self.terminateWorkspaces(input, logger: logger)
    }

    /// Terminates the specified pool.
    @Sendable
    @inlinable
    public func terminateWorkspacesPool(_ input: TerminateWorkspacesPoolRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> TerminateWorkspacesPoolResult {
        try await self.client.execute(
            operation: "TerminateWorkspacesPool", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Terminates the specified pool.
    ///
    /// Parameters:
    ///   - poolId: The identifier of the pool.
    ///   - logger: Logger use during operation
    @inlinable
    public func terminateWorkspacesPool(
        poolId: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> TerminateWorkspacesPoolResult {
        let input = TerminateWorkspacesPoolRequest(
            poolId: poolId
        )
        return try await self.terminateWorkspacesPool(input, logger: logger)
    }

    /// Terminates the pool session.
    @Sendable
    @inlinable
    public func terminateWorkspacesPoolSession(_ input: TerminateWorkspacesPoolSessionRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> TerminateWorkspacesPoolSessionResult {
        try await self.client.execute(
            operation: "TerminateWorkspacesPoolSession", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Terminates the pool session.
    ///
    /// Parameters:
    ///   - sessionId: The identifier of the pool session.
    ///   - logger: Logger use during operation
    @inlinable
    public func terminateWorkspacesPoolSession(
        sessionId: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> TerminateWorkspacesPoolSessionResult {
        let input = TerminateWorkspacesPoolSessionRequest(
            sessionId: sessionId
        )
        return try await self.terminateWorkspacesPoolSession(input, logger: logger)
    }

    /// Updates a Amazon Connect client add-in. Use this action to update the name and endpoint URL of a Amazon Connect client add-in.
    @Sendable
    @inlinable
    public func updateConnectClientAddIn(_ input: UpdateConnectClientAddInRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> UpdateConnectClientAddInResult {
        try await self.client.execute(
            operation: "UpdateConnectClientAddIn", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Updates a Amazon Connect client add-in. Use this action to update the name and endpoint URL of a Amazon Connect client add-in.
    ///
    /// Parameters:
    ///   - addInId: The identifier of the client add-in to update.
    ///   - name: The name of the client add-in.
    ///   - resourceId: The directory identifier for which the client add-in is configured.
    ///   - url: The endpoint URL of the Amazon Connect client add-in.
    ///   - logger: Logger use during operation
    @inlinable
    public func updateConnectClientAddIn(
        addInId: String,
        name: String? = nil,
        resourceId: String,
        url: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> UpdateConnectClientAddInResult {
        let input = UpdateConnectClientAddInRequest(
            addInId: addInId, 
            name: name, 
            resourceId: resourceId, 
            url: url
        )
        return try await self.updateConnectClientAddIn(input, logger: logger)
    }

    /// Shares or unshares a connection alias with one account by specifying whether that account has permission to associate the connection alias with a directory. If the association permission is granted, the connection alias is shared with that account. If the association permission is revoked, the connection alias is unshared with the account. For more information, see  Cross-Region Redirection for Amazon WorkSpaces.    Before performing this operation, call  DescribeConnectionAliases to make sure that the current state of the connection alias is CREATED.   To delete a connection alias that has been shared, the shared account must first disassociate the connection alias from any directories it has been associated with. Then you must unshare the connection alias from the account it has been shared with. You can delete a connection alias only after it is no longer shared with any accounts or associated with any directories.
    @Sendable
    @inlinable
    public func updateConnectionAliasPermission(_ input: UpdateConnectionAliasPermissionRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> UpdateConnectionAliasPermissionResult {
        try await self.client.execute(
            operation: "UpdateConnectionAliasPermission", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Shares or unshares a connection alias with one account by specifying whether that account has permission to associate the connection alias with a directory. If the association permission is granted, the connection alias is shared with that account. If the association permission is revoked, the connection alias is unshared with the account. For more information, see  Cross-Region Redirection for Amazon WorkSpaces.    Before performing this operation, call  DescribeConnectionAliases to make sure that the current state of the connection alias is CREATED.   To delete a connection alias that has been shared, the shared account must first disassociate the connection alias from any directories it has been associated with. Then you must unshare the connection alias from the account it has been shared with. You can delete a connection alias only after it is no longer shared with any accounts or associated with any directories.
    ///
    /// Parameters:
    ///   - aliasId: The identifier of the connection alias that you want to update permissions for.
    ///   - connectionAliasPermission: Indicates whether to share or unshare the connection alias with the specified Amazon Web Services account.
    ///   - logger: Logger use during operation
    @inlinable
    public func updateConnectionAliasPermission(
        aliasId: String,
        connectionAliasPermission: ConnectionAliasPermission,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> UpdateConnectionAliasPermissionResult {
        let input = UpdateConnectionAliasPermissionRequest(
            aliasId: aliasId, 
            connectionAliasPermission: connectionAliasPermission
        )
        return try await self.updateConnectionAliasPermission(input, logger: logger)
    }

    /// Replaces the current rules of the specified IP access control group with the specified rules.
    @Sendable
    @inlinable
    public func updateRulesOfIpGroup(_ input: UpdateRulesOfIpGroupRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> UpdateRulesOfIpGroupResult {
        try await self.client.execute(
            operation: "UpdateRulesOfIpGroup", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Replaces the current rules of the specified IP access control group with the specified rules.
    ///
    /// Parameters:
    ///   - groupId: The identifier of the group.
    ///   - userRules: One or more rules.
    ///   - logger: Logger use during operation
    @inlinable
    public func updateRulesOfIpGroup(
        groupId: String,
        userRules: [IpRuleItem],
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> UpdateRulesOfIpGroupResult {
        let input = UpdateRulesOfIpGroupRequest(
            groupId: groupId, 
            userRules: userRules
        )
        return try await self.updateRulesOfIpGroup(input, logger: logger)
    }

    /// Updates a WorkSpace bundle with a new image. For more information about updating WorkSpace bundles, see   Update a Custom WorkSpaces Bundle.  Existing WorkSpaces aren't automatically updated when you update the bundle that they're  based on. To update existing WorkSpaces that are based on a bundle that you've updated, you  must either rebuild the WorkSpaces or delete and recreate them.
    @Sendable
    @inlinable
    public func updateWorkspaceBundle(_ input: UpdateWorkspaceBundleRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> UpdateWorkspaceBundleResult {
        try await self.client.execute(
            operation: "UpdateWorkspaceBundle", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Updates a WorkSpace bundle with a new image. For more information about updating WorkSpace bundles, see   Update a Custom WorkSpaces Bundle.  Existing WorkSpaces aren't automatically updated when you update the bundle that they're  based on. To update existing WorkSpaces that are based on a bundle that you've updated, you  must either rebuild the WorkSpaces or delete and recreate them.
    ///
    /// Parameters:
    ///   - bundleId: The identifier of the bundle.
    ///   - imageId: The identifier of the image.
    ///   - logger: Logger use during operation
    @inlinable
    public func updateWorkspaceBundle(
        bundleId: String? = nil,
        imageId: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> UpdateWorkspaceBundleResult {
        let input = UpdateWorkspaceBundleRequest(
            bundleId: bundleId, 
            imageId: imageId
        )
        return try await self.updateWorkspaceBundle(input, logger: logger)
    }

    /// Shares or unshares an image with one account in the same Amazon Web Services Region by specifying whether that account has permission to copy the image. If the copy image permission is granted, the image is shared with that account. If the copy image permission is revoked, the image is unshared with the account. After an image has been shared, the recipient account can copy the image to other Regions as needed. In the China (Ningxia) Region, you can copy images only within the same Region. In Amazon Web Services GovCloud (US), to copy images to and from other Regions, contact Amazon Web Services Support. For more information about sharing images, see  Share or Unshare a Custom WorkSpaces Image.    To delete an image that has been shared, you must unshare the image before you delete it.   Sharing Bring Your Own License (BYOL) images across Amazon Web Services accounts isn't supported at this time in Amazon Web Services GovCloud (US). To share BYOL images across accounts in Amazon Web Services GovCloud (US), contact Amazon Web Services Support.
    @Sendable
    @inlinable
    public func updateWorkspaceImagePermission(_ input: UpdateWorkspaceImagePermissionRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> UpdateWorkspaceImagePermissionResult {
        try await self.client.execute(
            operation: "UpdateWorkspaceImagePermission", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Shares or unshares an image with one account in the same Amazon Web Services Region by specifying whether that account has permission to copy the image. If the copy image permission is granted, the image is shared with that account. If the copy image permission is revoked, the image is unshared with the account. After an image has been shared, the recipient account can copy the image to other Regions as needed. In the China (Ningxia) Region, you can copy images only within the same Region. In Amazon Web Services GovCloud (US), to copy images to and from other Regions, contact Amazon Web Services Support. For more information about sharing images, see  Share or Unshare a Custom WorkSpaces Image.    To delete an image that has been shared, you must unshare the image before you delete it.   Sharing Bring Your Own License (BYOL) images across Amazon Web Services accounts isn't supported at this time in Amazon Web Services GovCloud (US). To share BYOL images across accounts in Amazon Web Services GovCloud (US), contact Amazon Web Services Support.
    ///
    /// Parameters:
    ///   - allowCopyImage: The permission to copy the image. This permission can be revoked only after an image has been shared.
    ///   - imageId: The identifier of the image.
    ///   - sharedAccountId: The identifier of the Amazon Web Services account to share or unshare the image with.  Before sharing the image, confirm that you are sharing to the correct Amazon Web Services account ID.
    ///   - logger: Logger use during operation
    @inlinable
    public func updateWorkspaceImagePermission(
        allowCopyImage: Bool,
        imageId: String,
        sharedAccountId: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> UpdateWorkspaceImagePermissionResult {
        let input = UpdateWorkspaceImagePermissionRequest(
            allowCopyImage: allowCopyImage, 
            imageId: imageId, 
            sharedAccountId: sharedAccountId
        )
        return try await self.updateWorkspaceImagePermission(input, logger: logger)
    }

    /// Updates the specified pool.
    @Sendable
    @inlinable
    public func updateWorkspacesPool(_ input: UpdateWorkspacesPoolRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> UpdateWorkspacesPoolResult {
        try await self.client.execute(
            operation: "UpdateWorkspacesPool", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Updates the specified pool.
    ///
    /// Parameters:
    ///   - applicationSettings: The persistent application settings for users in the pool.
    ///   - bundleId: The identifier of the bundle.
    ///   - capacity: The desired capacity for the pool.
    ///   - description: Describes the specified pool to update.
    ///   - directoryId: The identifier of the directory.
    ///   - poolId: The identifier of the specified pool to update.
    ///   - timeoutSettings: Indicates the timeout settings of the specified pool.
    ///   - logger: Logger use during operation
    @inlinable
    public func updateWorkspacesPool(
        applicationSettings: ApplicationSettingsRequest? = nil,
        bundleId: String? = nil,
        capacity: Capacity? = nil,
        description: String? = nil,
        directoryId: String? = nil,
        poolId: String,
        timeoutSettings: TimeoutSettings? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> UpdateWorkspacesPoolResult {
        let input = UpdateWorkspacesPoolRequest(
            applicationSettings: applicationSettings, 
            bundleId: bundleId, 
            capacity: capacity, 
            description: description, 
            directoryId: directoryId, 
            poolId: poolId, 
            timeoutSettings: timeoutSettings
        )
        return try await self.updateWorkspacesPool(input, logger: logger)
    }
}

extension WorkSpaces {
    /// Initializer required by `AWSService.with(middlewares:timeout:byteBufferAllocator:options)`. You are not able to use this initializer directly as there are not public
    /// initializers for `AWSServiceConfig.Patch`. Please use `AWSService.with(middlewares:timeout:byteBufferAllocator:options)` instead.
    public init(from: WorkSpaces, patch: AWSServiceConfig.Patch) {
        self.client = from.client
        self.config = from.config.with(patch: patch)
    }
}

// MARK: Paginators

@available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
extension WorkSpaces {
    /// Return PaginatorSequence for operation ``describeApplicationAssociations(_:logger:)``.
    ///
    /// - Parameters:
    ///   - input: Input for operation
    ///   - logger: Logger used for logging
    @inlinable
    public func describeApplicationAssociationsPaginator(
        _ input: DescribeApplicationAssociationsRequest,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<DescribeApplicationAssociationsRequest, DescribeApplicationAssociationsResult> {
        return .init(
            input: input,
            command: self.describeApplicationAssociations,
            inputKey: \DescribeApplicationAssociationsRequest.nextToken,
            outputKey: \DescribeApplicationAssociationsResult.nextToken,
            logger: logger
        )
    }
    /// Return PaginatorSequence for operation ``describeApplicationAssociations(_:logger:)``.
    ///
    /// - Parameters:
    ///   - applicationId: The identifier of the specified application.
    ///   - associatedResourceTypes: The resource type of the associated resources.
    ///   - maxResults: The maximum number of associations to return.
    ///   - logger: Logger used for logging
    @inlinable
    public func describeApplicationAssociationsPaginator(
        applicationId: String,
        associatedResourceTypes: [ApplicationAssociatedResourceType],
        maxResults: Int? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) -> AWSClient.PaginatorSequence<DescribeApplicationAssociationsRequest, DescribeApplicationAssociationsResult> {
        let input = DescribeApplicationAssociationsRequest(
            applicationId: applicationId, 
            associatedResourceTypes: associatedResourceTypes, 
            maxResults: maxResults
        )
        return self.describeApplicationAssociationsPaginator(input, logger: logger)
    }

    /// Return PaginatorSequence for operation ``describeApplications(_:logger:)``.
    ///
    /// - Parameters:
    ///   - input: Input for operation
    ///   - logger: Logger used for logging
    @inlinable
    public func describeApplicationsPaginator(
        _ input: DescribeApplicationsRequest,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<DescribeApplicationsRequest, DescribeApplicationsResult> {
        return .init(
            input: input,
            command: self.describeApplications,
            inputKey: \DescribeApplicationsRequest.nextToken,
            outputKey: \DescribeApplicationsResult.nextToken,
            logger: logger
        )
    }
    /// Return PaginatorSequence for operation ``describeApplications(_:logger:)``.
    ///
    /// - Parameters:
    ///   - applicationIds: The identifiers of one or more applications.
    ///   - computeTypeNames: The compute types supported by the applications.
    ///   - licenseType: The license availability for the applications.
    ///   - maxResults: The maximum number of applications to return.
    ///   - operatingSystemNames: The operating systems supported by the applications.
    ///   - owner: The owner of the applications.
    ///   - logger: Logger used for logging
    @inlinable
    public func describeApplicationsPaginator(
        applicationIds: [String]? = nil,
        computeTypeNames: [Compute]? = nil,
        licenseType: WorkSpaceApplicationLicenseType? = nil,
        maxResults: Int? = nil,
        operatingSystemNames: [OperatingSystemName]? = nil,
        owner: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) -> AWSClient.PaginatorSequence<DescribeApplicationsRequest, DescribeApplicationsResult> {
        let input = DescribeApplicationsRequest(
            applicationIds: applicationIds, 
            computeTypeNames: computeTypeNames, 
            licenseType: licenseType, 
            maxResults: maxResults, 
            operatingSystemNames: operatingSystemNames, 
            owner: owner
        )
        return self.describeApplicationsPaginator(input, logger: logger)
    }

    /// Return PaginatorSequence for operation ``describeWorkspaceBundles(_:logger:)``.
    ///
    /// - Parameters:
    ///   - input: Input for operation
    ///   - logger: Logger used for logging
    @inlinable
    public func describeWorkspaceBundlesPaginator(
        _ input: DescribeWorkspaceBundlesRequest,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<DescribeWorkspaceBundlesRequest, DescribeWorkspaceBundlesResult> {
        return .init(
            input: input,
            command: self.describeWorkspaceBundles,
            inputKey: \DescribeWorkspaceBundlesRequest.nextToken,
            outputKey: \DescribeWorkspaceBundlesResult.nextToken,
            logger: logger
        )
    }
    /// Return PaginatorSequence for operation ``describeWorkspaceBundles(_:logger:)``.
    ///
    /// - Parameters:
    ///   - bundleIds: The identifiers of the bundles. You cannot combine this parameter with any other filter.
    ///   - owner: The owner of the bundles. You cannot combine this parameter with any other filter. To describe the bundles provided by Amazon Web Services, specify AMAZON.  To describe the bundles that belong to your account, don't specify a value.
    ///   - logger: Logger used for logging
    @inlinable
    public func describeWorkspaceBundlesPaginator(
        bundleIds: [String]? = nil,
        owner: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) -> AWSClient.PaginatorSequence<DescribeWorkspaceBundlesRequest, DescribeWorkspaceBundlesResult> {
        let input = DescribeWorkspaceBundlesRequest(
            bundleIds: bundleIds, 
            owner: owner
        )
        return self.describeWorkspaceBundlesPaginator(input, logger: logger)
    }

    /// Return PaginatorSequence for operation ``describeWorkspaceDirectories(_:logger:)``.
    ///
    /// - Parameters:
    ///   - input: Input for operation
    ///   - logger: Logger used for logging
    @inlinable
    public func describeWorkspaceDirectoriesPaginator(
        _ input: DescribeWorkspaceDirectoriesRequest,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<DescribeWorkspaceDirectoriesRequest, DescribeWorkspaceDirectoriesResult> {
        return .init(
            input: input,
            command: self.describeWorkspaceDirectories,
            inputKey: \DescribeWorkspaceDirectoriesRequest.nextToken,
            outputKey: \DescribeWorkspaceDirectoriesResult.nextToken,
            logger: logger
        )
    }
    /// Return PaginatorSequence for operation ``describeWorkspaceDirectories(_:logger:)``.
    ///
    /// - Parameters:
    ///   - directoryIds: The identifiers of the directories. If the value is null, all directories are retrieved.
    ///   - filters: The filter condition for the WorkSpaces.
    ///   - limit: The maximum number of directories to return.
    ///   - workspaceDirectoryNames: The names of the WorkSpace directories.
    ///   - logger: Logger used for logging
    @inlinable
    public func describeWorkspaceDirectoriesPaginator(
        directoryIds: [String]? = nil,
        filters: [DescribeWorkspaceDirectoriesFilter]? = nil,
        limit: Int? = nil,
        workspaceDirectoryNames: [String]? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) -> AWSClient.PaginatorSequence<DescribeWorkspaceDirectoriesRequest, DescribeWorkspaceDirectoriesResult> {
        let input = DescribeWorkspaceDirectoriesRequest(
            directoryIds: directoryIds, 
            filters: filters, 
            limit: limit, 
            workspaceDirectoryNames: workspaceDirectoryNames
        )
        return self.describeWorkspaceDirectoriesPaginator(input, logger: logger)
    }

    /// Return PaginatorSequence for operation ``describeWorkspaces(_:logger:)``.
    ///
    /// - Parameters:
    ///   - input: Input for operation
    ///   - logger: Logger used for logging
    @inlinable
    public func describeWorkspacesPaginator(
        _ input: DescribeWorkspacesRequest,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<DescribeWorkspacesRequest, DescribeWorkspacesResult> {
        return .init(
            input: input,
            command: self.describeWorkspaces,
            inputKey: \DescribeWorkspacesRequest.nextToken,
            outputKey: \DescribeWorkspacesResult.nextToken,
            logger: logger
        )
    }
    /// Return PaginatorSequence for operation ``describeWorkspaces(_:logger:)``.
    ///
    /// - Parameters:
    ///   - bundleId: The identifier of the bundle. All WorkSpaces that are created from this bundle are retrieved. You cannot combine this parameter with any other filter.
    ///   - directoryId: The identifier of the directory. In addition, you can optionally specify a specific directory user (see UserName). You cannot combine this parameter with any other filter.
    ///   - limit: The maximum number of items to return.
    ///   - userName: The name of the directory user. You must specify this parameter with DirectoryId.
    ///   - workspaceIds: The identifiers of the WorkSpaces. You cannot combine this parameter with any other filter. Because the CreateWorkspaces operation is asynchronous, the identifier it returns is not immediately available. If you immediately call DescribeWorkspaces with this identifier, no information is returned.
    ///   - workspaceName: The name of the user-decoupled WorkSpace.
    ///   - logger: Logger used for logging
    @inlinable
    public func describeWorkspacesPaginator(
        bundleId: String? = nil,
        directoryId: String? = nil,
        limit: Int? = nil,
        userName: String? = nil,
        workspaceIds: [String]? = nil,
        workspaceName: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) -> AWSClient.PaginatorSequence<DescribeWorkspacesRequest, DescribeWorkspacesResult> {
        let input = DescribeWorkspacesRequest(
            bundleId: bundleId, 
            directoryId: directoryId, 
            limit: limit, 
            userName: userName, 
            workspaceIds: workspaceIds, 
            workspaceName: workspaceName
        )
        return self.describeWorkspacesPaginator(input, logger: logger)
    }

    /// Return PaginatorSequence for operation ``listAccountLinks(_:logger:)``.
    ///
    /// - Parameters:
    ///   - input: Input for operation
    ///   - logger: Logger used for logging
    @inlinable
    public func listAccountLinksPaginator(
        _ input: ListAccountLinksRequest,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<ListAccountLinksRequest, ListAccountLinksResult> {
        return .init(
            input: input,
            command: self.listAccountLinks,
            inputKey: \ListAccountLinksRequest.nextToken,
            outputKey: \ListAccountLinksResult.nextToken,
            logger: logger
        )
    }
    /// Return PaginatorSequence for operation ``listAccountLinks(_:logger:)``.
    ///
    /// - Parameters:
    ///   - linkStatusFilter: Filters the account based on their link status.
    ///   - maxResults: The maximum number of accounts to return.
    ///   - logger: Logger used for logging
    @inlinable
    public func listAccountLinksPaginator(
        linkStatusFilter: [AccountLinkStatusEnum]? = nil,
        maxResults: Int? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) -> AWSClient.PaginatorSequence<ListAccountLinksRequest, ListAccountLinksResult> {
        let input = ListAccountLinksRequest(
            linkStatusFilter: linkStatusFilter, 
            maxResults: maxResults
        )
        return self.listAccountLinksPaginator(input, logger: logger)
    }
}

extension WorkSpaces.DescribeApplicationAssociationsRequest: AWSPaginateToken {
    @inlinable
    public func usingPaginationToken(_ token: String) -> WorkSpaces.DescribeApplicationAssociationsRequest {
        return .init(
            applicationId: self.applicationId,
            associatedResourceTypes: self.associatedResourceTypes,
            maxResults: self.maxResults,
            nextToken: token
        )
    }
}

extension WorkSpaces.DescribeApplicationsRequest: AWSPaginateToken {
    @inlinable
    public func usingPaginationToken(_ token: String) -> WorkSpaces.DescribeApplicationsRequest {
        return .init(
            applicationIds: self.applicationIds,
            computeTypeNames: self.computeTypeNames,
            licenseType: self.licenseType,
            maxResults: self.maxResults,
            nextToken: token,
            operatingSystemNames: self.operatingSystemNames,
            owner: self.owner
        )
    }
}

extension WorkSpaces.DescribeWorkspaceBundlesRequest: AWSPaginateToken {
    @inlinable
    public func usingPaginationToken(_ token: String) -> WorkSpaces.DescribeWorkspaceBundlesRequest {
        return .init(
            bundleIds: self.bundleIds,
            nextToken: token,
            owner: self.owner
        )
    }
}

extension WorkSpaces.DescribeWorkspaceDirectoriesRequest: AWSPaginateToken {
    @inlinable
    public func usingPaginationToken(_ token: String) -> WorkSpaces.DescribeWorkspaceDirectoriesRequest {
        return .init(
            directoryIds: self.directoryIds,
            filters: self.filters,
            limit: self.limit,
            nextToken: token,
            workspaceDirectoryNames: self.workspaceDirectoryNames
        )
    }
}

extension WorkSpaces.DescribeWorkspacesRequest: AWSPaginateToken {
    @inlinable
    public func usingPaginationToken(_ token: String) -> WorkSpaces.DescribeWorkspacesRequest {
        return .init(
            bundleId: self.bundleId,
            directoryId: self.directoryId,
            limit: self.limit,
            nextToken: token,
            userName: self.userName,
            workspaceIds: self.workspaceIds,
            workspaceName: self.workspaceName
        )
    }
}

extension WorkSpaces.ListAccountLinksRequest: AWSPaginateToken {
    @inlinable
    public func usingPaginationToken(_ token: String) -> WorkSpaces.ListAccountLinksRequest {
        return .init(
            linkStatusFilter: self.linkStatusFilter,
            maxResults: self.maxResults,
            nextToken: token
        )
    }
}
