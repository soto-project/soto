//===----------------------------------------------------------------------===//
//
// This source file is part of the Soto for AWS open source project
//
// Copyright (c) 2017-2024 the Soto project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
// See CONTRIBUTORS.txt for the list of Soto project authors
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by https://github.com/soto-project/soto-codegenerator.
// DO NOT EDIT.

@_exported import SotoCore

/// Service object for interacting with AWS SSOAdmin service.
///
/// IAM Identity Center (successor to Single Sign-On) helps you securely create, or connect, your workforce identities and manage their access centrally across Amazon Web Services accounts and applications. IAM Identity Center is the recommended approach for workforce authentication and authorization in Amazon Web Services, for organizations of any size and type.  IAM Identity Center uses the sso and identitystore API namespaces.  This reference guide provides information on single sign-on operations which could be used for access management of Amazon Web Services accounts. For information about IAM Identity Center features, see the IAM Identity Center User Guide. Many operations in the IAM Identity Center APIs rely on identifiers for users and groups, known as principals. For more information about how to work with principals and principal IDs in IAM Identity Center, see the Identity Store API Reference.  Amazon Web Services provides SDKs that consist of libraries and sample code for various programming languages and platforms (Java, Ruby, .Net, iOS, Android, and more). The SDKs provide a convenient way to create programmatic access to IAM Identity Center and other Amazon Web Services services. For more information about the Amazon Web Services SDKs, including how to download and install them, see Tools for Amazon Web Services.
public struct SSOAdmin: AWSService {
    // MARK: Member variables

    /// Client used for communication with AWS
    public let client: AWSClient
    /// Service configuration
    public let config: AWSServiceConfig

    // MARK: Initialization

    /// Initialize the SSOAdmin client
    /// - parameters:
    ///     - client: AWSClient used to process requests
    ///     - region: Region of server you want to communicate with. This will override the partition parameter.
    ///     - partition: AWS partition where service resides, standard (.aws), china (.awscn), government (.awsusgov).
    ///     - endpoint: Custom endpoint URL to use instead of standard AWS servers
    ///     - middleware: Middleware chain used to edit requests before they are sent and responses before they are decoded 
    ///     - timeout: Timeout value for HTTP requests
    ///     - byteBufferAllocator: Allocator for ByteBuffers
    ///     - options: Service options
    public init(
        client: AWSClient,
        region: SotoCore.Region? = nil,
        partition: AWSPartition = .aws,
        endpoint: String? = nil,
        middleware: AWSMiddlewareProtocol? = nil,
        timeout: TimeAmount? = nil,
        byteBufferAllocator: ByteBufferAllocator = ByteBufferAllocator(),
        options: AWSServiceConfig.Options = []
    ) {
        self.client = client
        self.config = AWSServiceConfig(
            region: region,
            partition: region?.partition ?? partition,
            amzTarget: "SWBExternalService",
            serviceName: "SSOAdmin",
            serviceIdentifier: "sso",
            serviceProtocol: .json(version: "1.1"),
            apiVersion: "2020-07-20",
            endpoint: endpoint,
            serviceEndpoints: Self.serviceEndpoints,
            variantEndpoints: Self.variantEndpoints,
            errorType: SSOAdminErrorType.self,
            middleware: middleware,
            timeout: timeout,
            byteBufferAllocator: byteBufferAllocator,
            options: options
        )
    }


    /// custom endpoints for regions
    static var serviceEndpoints: [String: String] {[
        "us-gov-east-1": "sso.us-gov-east-1.amazonaws.com",
        "us-gov-west-1": "sso.us-gov-west-1.amazonaws.com"
    ]}


    /// FIPS and dualstack endpoints
    static var variantEndpoints: [EndpointVariantType: AWSServiceConfig.EndpointVariant] {[
        [.fips]: .init(endpoints: [
            "us-gov-east-1": "sso.us-gov-east-1.amazonaws.com",
            "us-gov-west-1": "sso.us-gov-west-1.amazonaws.com"
        ])
    ]}

    // MARK: API Calls

    /// Attaches the specified customer managed policy to the specified PermissionSet.
    @Sendable
    public func attachCustomerManagedPolicyReferenceToPermissionSet(_ input: AttachCustomerManagedPolicyReferenceToPermissionSetRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> AttachCustomerManagedPolicyReferenceToPermissionSetResponse {
        return try await self.client.execute(
            operation: "AttachCustomerManagedPolicyReferenceToPermissionSet", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Attaches an Amazon Web Services managed policy ARN to a permission set.  If the permission set is already referenced by one or more account assignments, you will need to call  ProvisionPermissionSet after this operation. Calling ProvisionPermissionSet applies the corresponding IAM policy updates to all assigned accounts.
    @Sendable
    public func attachManagedPolicyToPermissionSet(_ input: AttachManagedPolicyToPermissionSetRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> AttachManagedPolicyToPermissionSetResponse {
        return try await self.client.execute(
            operation: "AttachManagedPolicyToPermissionSet", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Assigns access to a principal for a specified Amazon Web Services account using a specified permission set.  The term principal here refers to a user or group that is defined in IAM Identity Center.   As part of a successful CreateAccountAssignment call, the specified permission set will automatically be provisioned to the account in the form of an IAM policy. That policy is attached to the IAM role created in IAM Identity Center. If the permission set is subsequently updated, the corresponding IAM policies attached to roles in your accounts will not be updated automatically. In this case, you must call  ProvisionPermissionSet to make these updates.   After a successful response, call DescribeAccountAssignmentCreationStatus to describe the status of an assignment creation request.
    @Sendable
    public func createAccountAssignment(_ input: CreateAccountAssignmentRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> CreateAccountAssignmentResponse {
        return try await self.client.execute(
            operation: "CreateAccountAssignment", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Creates an application in IAM Identity Center for the given application provider.
    @Sendable
    public func createApplication(_ input: CreateApplicationRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> CreateApplicationResponse {
        return try await self.client.execute(
            operation: "CreateApplication", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Grant application access to a user or group.
    @Sendable
    public func createApplicationAssignment(_ input: CreateApplicationAssignmentRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> CreateApplicationAssignmentResponse {
        return try await self.client.execute(
            operation: "CreateApplicationAssignment", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Creates an instance of IAM Identity Center for a standalone Amazon Web Services account that is not managed by Organizations or a member Amazon Web Services account in an organization. You can create only one instance per account and across all Amazon Web Services Regions. The CreateInstance request is rejected if the following apply:    The instance is created within the organization management account.   An instance already exists in the same account.
    @Sendable
    public func createInstance(_ input: CreateInstanceRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> CreateInstanceResponse {
        return try await self.client.execute(
            operation: "CreateInstance", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Enables the attributes-based access control (ABAC) feature for the specified IAM Identity Center instance. You can also specify new attributes to add to your ABAC configuration during the enabling process. For more information about ABAC, see Attribute-Based Access Control in the IAM Identity Center User Guide.  After a successful response, call DescribeInstanceAccessControlAttributeConfiguration to validate that InstanceAccessControlAttributeConfiguration was created.
    @Sendable
    public func createInstanceAccessControlAttributeConfiguration(_ input: CreateInstanceAccessControlAttributeConfigurationRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> CreateInstanceAccessControlAttributeConfigurationResponse {
        return try await self.client.execute(
            operation: "CreateInstanceAccessControlAttributeConfiguration", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Creates a permission set within a specified IAM Identity Center instance.  To grant users and groups access to Amazon Web Services account resources, use  CreateAccountAssignment .
    @Sendable
    public func createPermissionSet(_ input: CreatePermissionSetRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> CreatePermissionSetResponse {
        return try await self.client.execute(
            operation: "CreatePermissionSet", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Creates a connection to a trusted token issuer in an instance of IAM Identity Center. A trusted token issuer enables trusted identity propagation to be used with applications that authenticate outside of Amazon Web Services. This trusted token issuer describes an external identity provider (IdP) that can generate claims or assertions in the form of access tokens for a user. Applications enabled for IAM Identity Center can use these tokens for authentication.
    @Sendable
    public func createTrustedTokenIssuer(_ input: CreateTrustedTokenIssuerRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> CreateTrustedTokenIssuerResponse {
        return try await self.client.execute(
            operation: "CreateTrustedTokenIssuer", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Deletes a principal's access from a specified Amazon Web Services account using a specified permission set.  After a successful response, call DescribeAccountAssignmentDeletionStatus to describe the status of an assignment deletion request.
    @Sendable
    public func deleteAccountAssignment(_ input: DeleteAccountAssignmentRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DeleteAccountAssignmentResponse {
        return try await self.client.execute(
            operation: "DeleteAccountAssignment", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Deletes the association with the application. The connected service resource still exists.
    @Sendable
    public func deleteApplication(_ input: DeleteApplicationRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DeleteApplicationResponse {
        return try await self.client.execute(
            operation: "DeleteApplication", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Deletes an IAM Identity Center access scope from an application.
    @Sendable
    public func deleteApplicationAccessScope(_ input: DeleteApplicationAccessScopeRequest, logger: Logger = AWSClient.loggingDisabled) async throws {
        return try await self.client.execute(
            operation: "DeleteApplicationAccessScope", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Revoke application access to an application by deleting application assignments for a user or group.
    @Sendable
    public func deleteApplicationAssignment(_ input: DeleteApplicationAssignmentRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DeleteApplicationAssignmentResponse {
        return try await self.client.execute(
            operation: "DeleteApplicationAssignment", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Deletes an authentication method from an application.
    @Sendable
    public func deleteApplicationAuthenticationMethod(_ input: DeleteApplicationAuthenticationMethodRequest, logger: Logger = AWSClient.loggingDisabled) async throws {
        return try await self.client.execute(
            operation: "DeleteApplicationAuthenticationMethod", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Deletes a grant from an application.
    @Sendable
    public func deleteApplicationGrant(_ input: DeleteApplicationGrantRequest, logger: Logger = AWSClient.loggingDisabled) async throws {
        return try await self.client.execute(
            operation: "DeleteApplicationGrant", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Deletes the inline policy from a specified permission set.
    @Sendable
    public func deleteInlinePolicyFromPermissionSet(_ input: DeleteInlinePolicyFromPermissionSetRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DeleteInlinePolicyFromPermissionSetResponse {
        return try await self.client.execute(
            operation: "DeleteInlinePolicyFromPermissionSet", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Deletes the instance of IAM Identity Center. Only the account that owns the instance can call this API. Neither the delegated administrator nor member account can delete the organization instance, but those roles can delete their own instance.
    @Sendable
    public func deleteInstance(_ input: DeleteInstanceRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DeleteInstanceResponse {
        return try await self.client.execute(
            operation: "DeleteInstance", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Disables the attributes-based access control (ABAC) feature for the specified IAM Identity Center instance and deletes all of the attribute mappings that have been configured. Once deleted, any attributes that are received from an identity source and any custom attributes you have previously configured will not be passed. For more information about ABAC, see Attribute-Based Access Control in the IAM Identity Center User Guide.
    @Sendable
    public func deleteInstanceAccessControlAttributeConfiguration(_ input: DeleteInstanceAccessControlAttributeConfigurationRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DeleteInstanceAccessControlAttributeConfigurationResponse {
        return try await self.client.execute(
            operation: "DeleteInstanceAccessControlAttributeConfiguration", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Deletes the specified permission set.
    @Sendable
    public func deletePermissionSet(_ input: DeletePermissionSetRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DeletePermissionSetResponse {
        return try await self.client.execute(
            operation: "DeletePermissionSet", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Deletes the permissions boundary from a specified PermissionSet.
    @Sendable
    public func deletePermissionsBoundaryFromPermissionSet(_ input: DeletePermissionsBoundaryFromPermissionSetRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DeletePermissionsBoundaryFromPermissionSetResponse {
        return try await self.client.execute(
            operation: "DeletePermissionsBoundaryFromPermissionSet", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Deletes a trusted token issuer configuration from an instance of IAM Identity Center.  Deleting this trusted token issuer configuration will cause users to lose access to any applications that are configured to use the trusted token issuer.
    @Sendable
    public func deleteTrustedTokenIssuer(_ input: DeleteTrustedTokenIssuerRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DeleteTrustedTokenIssuerResponse {
        return try await self.client.execute(
            operation: "DeleteTrustedTokenIssuer", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Describes the status of the assignment creation request.
    @Sendable
    public func describeAccountAssignmentCreationStatus(_ input: DescribeAccountAssignmentCreationStatusRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DescribeAccountAssignmentCreationStatusResponse {
        return try await self.client.execute(
            operation: "DescribeAccountAssignmentCreationStatus", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Describes the status of the assignment deletion request.
    @Sendable
    public func describeAccountAssignmentDeletionStatus(_ input: DescribeAccountAssignmentDeletionStatusRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DescribeAccountAssignmentDeletionStatusResponse {
        return try await self.client.execute(
            operation: "DescribeAccountAssignmentDeletionStatus", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Retrieves the details of an application associated with an instance of IAM Identity Center.
    @Sendable
    public func describeApplication(_ input: DescribeApplicationRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DescribeApplicationResponse {
        return try await self.client.execute(
            operation: "DescribeApplication", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Retrieves a direct assignment of a user or group to an application. If the user doesn’t have a direct assignment to the application,  the user may still have access to the application through a group. Therefore, don’t use this API to test access to an application for a user.  Instead use ListApplicationAssignmentsForPrincipal.
    @Sendable
    public func describeApplicationAssignment(_ input: DescribeApplicationAssignmentRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DescribeApplicationAssignmentResponse {
        return try await self.client.execute(
            operation: "DescribeApplicationAssignment", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Retrieves details about a provider that can be used to connect an Amazon Web Services managed application or customer managed application to IAM Identity Center.
    @Sendable
    public func describeApplicationProvider(_ input: DescribeApplicationProviderRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DescribeApplicationProviderResponse {
        return try await self.client.execute(
            operation: "DescribeApplicationProvider", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Returns the details of an instance of IAM Identity Center. The status can be one of the following:    CREATE_IN_PROGRESS - The instance is in the process of being created. When the instance is ready for use, DescribeInstance returns the status of ACTIVE. While the instance is in the CREATE_IN_PROGRESS state, you can call only DescribeInstance and DeleteInstance operations.    DELETE_IN_PROGRESS - The instance is being deleted. Returns AccessDeniedException after the delete operation completes.     ACTIVE - The instance is active.
    @Sendable
    public func describeInstance(_ input: DescribeInstanceRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DescribeInstanceResponse {
        return try await self.client.execute(
            operation: "DescribeInstance", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Returns the list of IAM Identity Center identity store attributes that have been configured to work with attributes-based access control (ABAC) for the specified IAM Identity Center instance. This will not return attributes configured and sent by an external identity provider. For more information about ABAC, see Attribute-Based Access Control in the IAM Identity Center User Guide.
    @Sendable
    public func describeInstanceAccessControlAttributeConfiguration(_ input: DescribeInstanceAccessControlAttributeConfigurationRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DescribeInstanceAccessControlAttributeConfigurationResponse {
        return try await self.client.execute(
            operation: "DescribeInstanceAccessControlAttributeConfiguration", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Gets the details of the permission set.
    @Sendable
    public func describePermissionSet(_ input: DescribePermissionSetRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DescribePermissionSetResponse {
        return try await self.client.execute(
            operation: "DescribePermissionSet", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Describes the status for the given permission set provisioning request.
    @Sendable
    public func describePermissionSetProvisioningStatus(_ input: DescribePermissionSetProvisioningStatusRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DescribePermissionSetProvisioningStatusResponse {
        return try await self.client.execute(
            operation: "DescribePermissionSetProvisioningStatus", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Retrieves details about a trusted token issuer configuration stored in an instance of IAM Identity Center. Details include the  name of the trusted token issuer, the issuer URL, and the path of the source attribute and the destination attribute for a trusted token issuer configuration.
    @Sendable
    public func describeTrustedTokenIssuer(_ input: DescribeTrustedTokenIssuerRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DescribeTrustedTokenIssuerResponse {
        return try await self.client.execute(
            operation: "DescribeTrustedTokenIssuer", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Detaches the specified customer managed policy from the specified PermissionSet.
    @Sendable
    public func detachCustomerManagedPolicyReferenceFromPermissionSet(_ input: DetachCustomerManagedPolicyReferenceFromPermissionSetRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DetachCustomerManagedPolicyReferenceFromPermissionSetResponse {
        return try await self.client.execute(
            operation: "DetachCustomerManagedPolicyReferenceFromPermissionSet", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Detaches the attached Amazon Web Services managed policy ARN from the specified permission set.
    @Sendable
    public func detachManagedPolicyFromPermissionSet(_ input: DetachManagedPolicyFromPermissionSetRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DetachManagedPolicyFromPermissionSetResponse {
        return try await self.client.execute(
            operation: "DetachManagedPolicyFromPermissionSet", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Retrieves the authorized targets for an IAM Identity Center access scope for an application.
    @Sendable
    public func getApplicationAccessScope(_ input: GetApplicationAccessScopeRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> GetApplicationAccessScopeResponse {
        return try await self.client.execute(
            operation: "GetApplicationAccessScope", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Retrieves the configuration of PutApplicationAssignmentConfiguration.
    @Sendable
    public func getApplicationAssignmentConfiguration(_ input: GetApplicationAssignmentConfigurationRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> GetApplicationAssignmentConfigurationResponse {
        return try await self.client.execute(
            operation: "GetApplicationAssignmentConfiguration", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Retrieves details about an authentication method used by an application.
    @Sendable
    public func getApplicationAuthenticationMethod(_ input: GetApplicationAuthenticationMethodRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> GetApplicationAuthenticationMethodResponse {
        return try await self.client.execute(
            operation: "GetApplicationAuthenticationMethod", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Retrieves details about an application grant.
    @Sendable
    public func getApplicationGrant(_ input: GetApplicationGrantRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> GetApplicationGrantResponse {
        return try await self.client.execute(
            operation: "GetApplicationGrant", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Obtains the inline policy assigned to the permission set.
    @Sendable
    public func getInlinePolicyForPermissionSet(_ input: GetInlinePolicyForPermissionSetRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> GetInlinePolicyForPermissionSetResponse {
        return try await self.client.execute(
            operation: "GetInlinePolicyForPermissionSet", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Obtains the permissions boundary for a specified PermissionSet.
    @Sendable
    public func getPermissionsBoundaryForPermissionSet(_ input: GetPermissionsBoundaryForPermissionSetRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> GetPermissionsBoundaryForPermissionSetResponse {
        return try await self.client.execute(
            operation: "GetPermissionsBoundaryForPermissionSet", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Lists the status of the Amazon Web Services account assignment creation requests for a specified IAM Identity Center instance.
    @Sendable
    public func listAccountAssignmentCreationStatus(_ input: ListAccountAssignmentCreationStatusRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> ListAccountAssignmentCreationStatusResponse {
        return try await self.client.execute(
            operation: "ListAccountAssignmentCreationStatus", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Lists the status of the Amazon Web Services account assignment deletion requests for a specified IAM Identity Center instance.
    @Sendable
    public func listAccountAssignmentDeletionStatus(_ input: ListAccountAssignmentDeletionStatusRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> ListAccountAssignmentDeletionStatusResponse {
        return try await self.client.execute(
            operation: "ListAccountAssignmentDeletionStatus", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Lists the assignee of the specified Amazon Web Services account with the specified permission set.
    @Sendable
    public func listAccountAssignments(_ input: ListAccountAssignmentsRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> ListAccountAssignmentsResponse {
        return try await self.client.execute(
            operation: "ListAccountAssignments", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Retrieves a list of the IAM Identity Center associated Amazon Web Services accounts that the principal has access to.
    @Sendable
    public func listAccountAssignmentsForPrincipal(_ input: ListAccountAssignmentsForPrincipalRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> ListAccountAssignmentsForPrincipalResponse {
        return try await self.client.execute(
            operation: "ListAccountAssignmentsForPrincipal", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Lists all the Amazon Web Services accounts where the specified permission set is provisioned.
    @Sendable
    public func listAccountsForProvisionedPermissionSet(_ input: ListAccountsForProvisionedPermissionSetRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> ListAccountsForProvisionedPermissionSetResponse {
        return try await self.client.execute(
            operation: "ListAccountsForProvisionedPermissionSet", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Lists the access scopes and authorized targets associated with an application.
    @Sendable
    public func listApplicationAccessScopes(_ input: ListApplicationAccessScopesRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> ListApplicationAccessScopesResponse {
        return try await self.client.execute(
            operation: "ListApplicationAccessScopes", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Lists Amazon Web Services account users that are assigned to an application.
    @Sendable
    public func listApplicationAssignments(_ input: ListApplicationAssignmentsRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> ListApplicationAssignmentsResponse {
        return try await self.client.execute(
            operation: "ListApplicationAssignments", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Lists the applications to which a specified principal is assigned.
    @Sendable
    public func listApplicationAssignmentsForPrincipal(_ input: ListApplicationAssignmentsForPrincipalRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> ListApplicationAssignmentsForPrincipalResponse {
        return try await self.client.execute(
            operation: "ListApplicationAssignmentsForPrincipal", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Lists all of the authentication methods supported by the specified application.
    @Sendable
    public func listApplicationAuthenticationMethods(_ input: ListApplicationAuthenticationMethodsRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> ListApplicationAuthenticationMethodsResponse {
        return try await self.client.execute(
            operation: "ListApplicationAuthenticationMethods", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// List the grants associated with an application.
    @Sendable
    public func listApplicationGrants(_ input: ListApplicationGrantsRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> ListApplicationGrantsResponse {
        return try await self.client.execute(
            operation: "ListApplicationGrants", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Lists the application providers configured in the IAM Identity Center identity store.
    @Sendable
    public func listApplicationProviders(_ input: ListApplicationProvidersRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> ListApplicationProvidersResponse {
        return try await self.client.execute(
            operation: "ListApplicationProviders", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Lists all applications associated with the instance of IAM Identity Center. When listing applications for an instance in the management account, member accounts must use the applicationAccount parameter to filter the list to only applications created from that account.
    @Sendable
    public func listApplications(_ input: ListApplicationsRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> ListApplicationsResponse {
        return try await self.client.execute(
            operation: "ListApplications", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Lists all customer managed policies attached to a specified PermissionSet.
    @Sendable
    public func listCustomerManagedPolicyReferencesInPermissionSet(_ input: ListCustomerManagedPolicyReferencesInPermissionSetRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> ListCustomerManagedPolicyReferencesInPermissionSetResponse {
        return try await self.client.execute(
            operation: "ListCustomerManagedPolicyReferencesInPermissionSet", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Lists the details of the organization and account instances of IAM Identity Center that were created in or visible to the account calling this API.
    @Sendable
    public func listInstances(_ input: ListInstancesRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> ListInstancesResponse {
        return try await self.client.execute(
            operation: "ListInstances", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Lists the Amazon Web Services managed policy that is attached to a specified permission set.
    @Sendable
    public func listManagedPoliciesInPermissionSet(_ input: ListManagedPoliciesInPermissionSetRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> ListManagedPoliciesInPermissionSetResponse {
        return try await self.client.execute(
            operation: "ListManagedPoliciesInPermissionSet", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Lists the status of the permission set provisioning requests for a specified IAM Identity Center instance.
    @Sendable
    public func listPermissionSetProvisioningStatus(_ input: ListPermissionSetProvisioningStatusRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> ListPermissionSetProvisioningStatusResponse {
        return try await self.client.execute(
            operation: "ListPermissionSetProvisioningStatus", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Lists the PermissionSets in an IAM Identity Center instance.
    @Sendable
    public func listPermissionSets(_ input: ListPermissionSetsRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> ListPermissionSetsResponse {
        return try await self.client.execute(
            operation: "ListPermissionSets", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Lists all the permission sets that are provisioned to a specified Amazon Web Services account.
    @Sendable
    public func listPermissionSetsProvisionedToAccount(_ input: ListPermissionSetsProvisionedToAccountRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> ListPermissionSetsProvisionedToAccountResponse {
        return try await self.client.execute(
            operation: "ListPermissionSetsProvisionedToAccount", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Lists the tags that are attached to a specified resource.
    @Sendable
    public func listTagsForResource(_ input: ListTagsForResourceRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> ListTagsForResourceResponse {
        return try await self.client.execute(
            operation: "ListTagsForResource", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Lists all the trusted token issuers configured in an instance of IAM Identity Center.
    @Sendable
    public func listTrustedTokenIssuers(_ input: ListTrustedTokenIssuersRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> ListTrustedTokenIssuersResponse {
        return try await self.client.execute(
            operation: "ListTrustedTokenIssuers", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// The process by which a specified permission set is provisioned to the specified target.
    @Sendable
    public func provisionPermissionSet(_ input: ProvisionPermissionSetRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> ProvisionPermissionSetResponse {
        return try await self.client.execute(
            operation: "ProvisionPermissionSet", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Adds or updates the list of authorized targets for an IAM Identity Center access scope for an application.
    @Sendable
    public func putApplicationAccessScope(_ input: PutApplicationAccessScopeRequest, logger: Logger = AWSClient.loggingDisabled) async throws {
        return try await self.client.execute(
            operation: "PutApplicationAccessScope", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Configure how users gain access to an application. If AssignmentsRequired is true (default value), users don’t have access to the application unless an assignment is created using the  CreateApplicationAssignment API. If false, all users have access to the application.  If an assignment is created using CreateApplicationAssignment., the user retains access if AssignmentsRequired is set to true.
    @Sendable
    public func putApplicationAssignmentConfiguration(_ input: PutApplicationAssignmentConfigurationRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> PutApplicationAssignmentConfigurationResponse {
        return try await self.client.execute(
            operation: "PutApplicationAssignmentConfiguration", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Adds or updates an authentication method for an application.
    @Sendable
    public func putApplicationAuthenticationMethod(_ input: PutApplicationAuthenticationMethodRequest, logger: Logger = AWSClient.loggingDisabled) async throws {
        return try await self.client.execute(
            operation: "PutApplicationAuthenticationMethod", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Adds a grant to an application.
    @Sendable
    public func putApplicationGrant(_ input: PutApplicationGrantRequest, logger: Logger = AWSClient.loggingDisabled) async throws {
        return try await self.client.execute(
            operation: "PutApplicationGrant", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Attaches an inline policy to a permission set.  If the permission set is already referenced by one or more account assignments, you will need to call  ProvisionPermissionSet after this action to apply the corresponding IAM policy updates to all assigned accounts.
    @Sendable
    public func putInlinePolicyToPermissionSet(_ input: PutInlinePolicyToPermissionSetRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> PutInlinePolicyToPermissionSetResponse {
        return try await self.client.execute(
            operation: "PutInlinePolicyToPermissionSet", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Attaches an Amazon Web Services managed or customer managed policy to the specified PermissionSet as a permissions boundary.
    @Sendable
    public func putPermissionsBoundaryToPermissionSet(_ input: PutPermissionsBoundaryToPermissionSetRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> PutPermissionsBoundaryToPermissionSetResponse {
        return try await self.client.execute(
            operation: "PutPermissionsBoundaryToPermissionSet", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Associates a set of tags with a specified resource.
    @Sendable
    public func tagResource(_ input: TagResourceRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> TagResourceResponse {
        return try await self.client.execute(
            operation: "TagResource", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Disassociates a set of tags from a specified resource.
    @Sendable
    public func untagResource(_ input: UntagResourceRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> UntagResourceResponse {
        return try await self.client.execute(
            operation: "UntagResource", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Updates application properties.
    @Sendable
    public func updateApplication(_ input: UpdateApplicationRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> UpdateApplicationResponse {
        return try await self.client.execute(
            operation: "UpdateApplication", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Update the details for the instance of IAM Identity Center that is owned by the Amazon Web Services account.
    @Sendable
    public func updateInstance(_ input: UpdateInstanceRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> UpdateInstanceResponse {
        return try await self.client.execute(
            operation: "UpdateInstance", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Updates the IAM Identity Center identity store attributes that you can use with the IAM Identity Center instance for attributes-based access control (ABAC). When using an external identity provider as an identity source, you can pass attributes through the SAML assertion as an alternative to configuring attributes from the IAM Identity Center identity store. If a SAML assertion passes any of these attributes, IAM Identity Center replaces the attribute value with the value from the IAM Identity Center identity store. For more information about ABAC, see Attribute-Based Access Control in the IAM Identity Center User Guide.
    @Sendable
    public func updateInstanceAccessControlAttributeConfiguration(_ input: UpdateInstanceAccessControlAttributeConfigurationRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> UpdateInstanceAccessControlAttributeConfigurationResponse {
        return try await self.client.execute(
            operation: "UpdateInstanceAccessControlAttributeConfiguration", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Updates an existing permission set.
    @Sendable
    public func updatePermissionSet(_ input: UpdatePermissionSetRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> UpdatePermissionSetResponse {
        return try await self.client.execute(
            operation: "UpdatePermissionSet", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Updates the name of the trusted token issuer, or the path of a source attribute or destination attribute for a trusted token issuer configuration.  Updating this trusted token issuer configuration might cause users to lose access to any applications that are configured to use the trusted token issuer.
    @Sendable
    public func updateTrustedTokenIssuer(_ input: UpdateTrustedTokenIssuerRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> UpdateTrustedTokenIssuerResponse {
        return try await self.client.execute(
            operation: "UpdateTrustedTokenIssuer", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
}

extension SSOAdmin {
    /// Initializer required by `AWSService.with(middlewares:timeout:byteBufferAllocator:options)`. You are not able to use this initializer directly as there are not public
    /// initializers for `AWSServiceConfig.Patch`. Please use `AWSService.with(middlewares:timeout:byteBufferAllocator:options)` instead.
    public init(from: SSOAdmin, patch: AWSServiceConfig.Patch) {
        self.client = from.client
        self.config = from.config.with(patch: patch)
    }
}

// MARK: Paginators

@available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
extension SSOAdmin {
    /// Lists the status of the Amazon Web Services account assignment creation requests for a specified IAM Identity Center instance.
    /// Return PaginatorSequence for operation.
    ///
    /// - Parameters:
    ///   - input: Input for request
    ///   - logger: Logger used flot logging
    public func listAccountAssignmentCreationStatusPaginator(
        _ input: ListAccountAssignmentCreationStatusRequest,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<ListAccountAssignmentCreationStatusRequest, ListAccountAssignmentCreationStatusResponse> {
        return .init(
            input: input,
            command: self.listAccountAssignmentCreationStatus,
            inputKey: \ListAccountAssignmentCreationStatusRequest.nextToken,
            outputKey: \ListAccountAssignmentCreationStatusResponse.nextToken,
            logger: logger
        )
    }

    /// Lists the status of the Amazon Web Services account assignment deletion requests for a specified IAM Identity Center instance.
    /// Return PaginatorSequence for operation.
    ///
    /// - Parameters:
    ///   - input: Input for request
    ///   - logger: Logger used flot logging
    public func listAccountAssignmentDeletionStatusPaginator(
        _ input: ListAccountAssignmentDeletionStatusRequest,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<ListAccountAssignmentDeletionStatusRequest, ListAccountAssignmentDeletionStatusResponse> {
        return .init(
            input: input,
            command: self.listAccountAssignmentDeletionStatus,
            inputKey: \ListAccountAssignmentDeletionStatusRequest.nextToken,
            outputKey: \ListAccountAssignmentDeletionStatusResponse.nextToken,
            logger: logger
        )
    }

    /// Lists the assignee of the specified Amazon Web Services account with the specified permission set.
    /// Return PaginatorSequence for operation.
    ///
    /// - Parameters:
    ///   - input: Input for request
    ///   - logger: Logger used flot logging
    public func listAccountAssignmentsPaginator(
        _ input: ListAccountAssignmentsRequest,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<ListAccountAssignmentsRequest, ListAccountAssignmentsResponse> {
        return .init(
            input: input,
            command: self.listAccountAssignments,
            inputKey: \ListAccountAssignmentsRequest.nextToken,
            outputKey: \ListAccountAssignmentsResponse.nextToken,
            logger: logger
        )
    }

    /// Retrieves a list of the IAM Identity Center associated Amazon Web Services accounts that the principal has access to.
    /// Return PaginatorSequence for operation.
    ///
    /// - Parameters:
    ///   - input: Input for request
    ///   - logger: Logger used flot logging
    public func listAccountAssignmentsForPrincipalPaginator(
        _ input: ListAccountAssignmentsForPrincipalRequest,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<ListAccountAssignmentsForPrincipalRequest, ListAccountAssignmentsForPrincipalResponse> {
        return .init(
            input: input,
            command: self.listAccountAssignmentsForPrincipal,
            inputKey: \ListAccountAssignmentsForPrincipalRequest.nextToken,
            outputKey: \ListAccountAssignmentsForPrincipalResponse.nextToken,
            logger: logger
        )
    }

    /// Lists all the Amazon Web Services accounts where the specified permission set is provisioned.
    /// Return PaginatorSequence for operation.
    ///
    /// - Parameters:
    ///   - input: Input for request
    ///   - logger: Logger used flot logging
    public func listAccountsForProvisionedPermissionSetPaginator(
        _ input: ListAccountsForProvisionedPermissionSetRequest,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<ListAccountsForProvisionedPermissionSetRequest, ListAccountsForProvisionedPermissionSetResponse> {
        return .init(
            input: input,
            command: self.listAccountsForProvisionedPermissionSet,
            inputKey: \ListAccountsForProvisionedPermissionSetRequest.nextToken,
            outputKey: \ListAccountsForProvisionedPermissionSetResponse.nextToken,
            logger: logger
        )
    }

    /// Lists the access scopes and authorized targets associated with an application.
    /// Return PaginatorSequence for operation.
    ///
    /// - Parameters:
    ///   - input: Input for request
    ///   - logger: Logger used flot logging
    public func listApplicationAccessScopesPaginator(
        _ input: ListApplicationAccessScopesRequest,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<ListApplicationAccessScopesRequest, ListApplicationAccessScopesResponse> {
        return .init(
            input: input,
            command: self.listApplicationAccessScopes,
            inputKey: \ListApplicationAccessScopesRequest.nextToken,
            outputKey: \ListApplicationAccessScopesResponse.nextToken,
            logger: logger
        )
    }

    /// Lists Amazon Web Services account users that are assigned to an application.
    /// Return PaginatorSequence for operation.
    ///
    /// - Parameters:
    ///   - input: Input for request
    ///   - logger: Logger used flot logging
    public func listApplicationAssignmentsPaginator(
        _ input: ListApplicationAssignmentsRequest,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<ListApplicationAssignmentsRequest, ListApplicationAssignmentsResponse> {
        return .init(
            input: input,
            command: self.listApplicationAssignments,
            inputKey: \ListApplicationAssignmentsRequest.nextToken,
            outputKey: \ListApplicationAssignmentsResponse.nextToken,
            logger: logger
        )
    }

    /// Lists the applications to which a specified principal is assigned.
    /// Return PaginatorSequence for operation.
    ///
    /// - Parameters:
    ///   - input: Input for request
    ///   - logger: Logger used flot logging
    public func listApplicationAssignmentsForPrincipalPaginator(
        _ input: ListApplicationAssignmentsForPrincipalRequest,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<ListApplicationAssignmentsForPrincipalRequest, ListApplicationAssignmentsForPrincipalResponse> {
        return .init(
            input: input,
            command: self.listApplicationAssignmentsForPrincipal,
            inputKey: \ListApplicationAssignmentsForPrincipalRequest.nextToken,
            outputKey: \ListApplicationAssignmentsForPrincipalResponse.nextToken,
            logger: logger
        )
    }

    /// Lists all of the authentication methods supported by the specified application.
    /// Return PaginatorSequence for operation.
    ///
    /// - Parameters:
    ///   - input: Input for request
    ///   - logger: Logger used flot logging
    public func listApplicationAuthenticationMethodsPaginator(
        _ input: ListApplicationAuthenticationMethodsRequest,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<ListApplicationAuthenticationMethodsRequest, ListApplicationAuthenticationMethodsResponse> {
        return .init(
            input: input,
            command: self.listApplicationAuthenticationMethods,
            inputKey: \ListApplicationAuthenticationMethodsRequest.nextToken,
            outputKey: \ListApplicationAuthenticationMethodsResponse.nextToken,
            logger: logger
        )
    }

    /// List the grants associated with an application.
    /// Return PaginatorSequence for operation.
    ///
    /// - Parameters:
    ///   - input: Input for request
    ///   - logger: Logger used flot logging
    public func listApplicationGrantsPaginator(
        _ input: ListApplicationGrantsRequest,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<ListApplicationGrantsRequest, ListApplicationGrantsResponse> {
        return .init(
            input: input,
            command: self.listApplicationGrants,
            inputKey: \ListApplicationGrantsRequest.nextToken,
            outputKey: \ListApplicationGrantsResponse.nextToken,
            logger: logger
        )
    }

    /// Lists the application providers configured in the IAM Identity Center identity store.
    /// Return PaginatorSequence for operation.
    ///
    /// - Parameters:
    ///   - input: Input for request
    ///   - logger: Logger used flot logging
    public func listApplicationProvidersPaginator(
        _ input: ListApplicationProvidersRequest,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<ListApplicationProvidersRequest, ListApplicationProvidersResponse> {
        return .init(
            input: input,
            command: self.listApplicationProviders,
            inputKey: \ListApplicationProvidersRequest.nextToken,
            outputKey: \ListApplicationProvidersResponse.nextToken,
            logger: logger
        )
    }

    /// Lists all applications associated with the instance of IAM Identity Center. When listing applications for an instance in the management account, member accounts must use the applicationAccount parameter to filter the list to only applications created from that account.
    /// Return PaginatorSequence for operation.
    ///
    /// - Parameters:
    ///   - input: Input for request
    ///   - logger: Logger used flot logging
    public func listApplicationsPaginator(
        _ input: ListApplicationsRequest,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<ListApplicationsRequest, ListApplicationsResponse> {
        return .init(
            input: input,
            command: self.listApplications,
            inputKey: \ListApplicationsRequest.nextToken,
            outputKey: \ListApplicationsResponse.nextToken,
            logger: logger
        )
    }

    /// Lists all customer managed policies attached to a specified PermissionSet.
    /// Return PaginatorSequence for operation.
    ///
    /// - Parameters:
    ///   - input: Input for request
    ///   - logger: Logger used flot logging
    public func listCustomerManagedPolicyReferencesInPermissionSetPaginator(
        _ input: ListCustomerManagedPolicyReferencesInPermissionSetRequest,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<ListCustomerManagedPolicyReferencesInPermissionSetRequest, ListCustomerManagedPolicyReferencesInPermissionSetResponse> {
        return .init(
            input: input,
            command: self.listCustomerManagedPolicyReferencesInPermissionSet,
            inputKey: \ListCustomerManagedPolicyReferencesInPermissionSetRequest.nextToken,
            outputKey: \ListCustomerManagedPolicyReferencesInPermissionSetResponse.nextToken,
            logger: logger
        )
    }

    /// Lists the details of the organization and account instances of IAM Identity Center that were created in or visible to the account calling this API.
    /// Return PaginatorSequence for operation.
    ///
    /// - Parameters:
    ///   - input: Input for request
    ///   - logger: Logger used flot logging
    public func listInstancesPaginator(
        _ input: ListInstancesRequest,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<ListInstancesRequest, ListInstancesResponse> {
        return .init(
            input: input,
            command: self.listInstances,
            inputKey: \ListInstancesRequest.nextToken,
            outputKey: \ListInstancesResponse.nextToken,
            logger: logger
        )
    }

    /// Lists the Amazon Web Services managed policy that is attached to a specified permission set.
    /// Return PaginatorSequence for operation.
    ///
    /// - Parameters:
    ///   - input: Input for request
    ///   - logger: Logger used flot logging
    public func listManagedPoliciesInPermissionSetPaginator(
        _ input: ListManagedPoliciesInPermissionSetRequest,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<ListManagedPoliciesInPermissionSetRequest, ListManagedPoliciesInPermissionSetResponse> {
        return .init(
            input: input,
            command: self.listManagedPoliciesInPermissionSet,
            inputKey: \ListManagedPoliciesInPermissionSetRequest.nextToken,
            outputKey: \ListManagedPoliciesInPermissionSetResponse.nextToken,
            logger: logger
        )
    }

    /// Lists the status of the permission set provisioning requests for a specified IAM Identity Center instance.
    /// Return PaginatorSequence for operation.
    ///
    /// - Parameters:
    ///   - input: Input for request
    ///   - logger: Logger used flot logging
    public func listPermissionSetProvisioningStatusPaginator(
        _ input: ListPermissionSetProvisioningStatusRequest,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<ListPermissionSetProvisioningStatusRequest, ListPermissionSetProvisioningStatusResponse> {
        return .init(
            input: input,
            command: self.listPermissionSetProvisioningStatus,
            inputKey: \ListPermissionSetProvisioningStatusRequest.nextToken,
            outputKey: \ListPermissionSetProvisioningStatusResponse.nextToken,
            logger: logger
        )
    }

    /// Lists the PermissionSets in an IAM Identity Center instance.
    /// Return PaginatorSequence for operation.
    ///
    /// - Parameters:
    ///   - input: Input for request
    ///   - logger: Logger used flot logging
    public func listPermissionSetsPaginator(
        _ input: ListPermissionSetsRequest,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<ListPermissionSetsRequest, ListPermissionSetsResponse> {
        return .init(
            input: input,
            command: self.listPermissionSets,
            inputKey: \ListPermissionSetsRequest.nextToken,
            outputKey: \ListPermissionSetsResponse.nextToken,
            logger: logger
        )
    }

    /// Lists all the permission sets that are provisioned to a specified Amazon Web Services account.
    /// Return PaginatorSequence for operation.
    ///
    /// - Parameters:
    ///   - input: Input for request
    ///   - logger: Logger used flot logging
    public func listPermissionSetsProvisionedToAccountPaginator(
        _ input: ListPermissionSetsProvisionedToAccountRequest,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<ListPermissionSetsProvisionedToAccountRequest, ListPermissionSetsProvisionedToAccountResponse> {
        return .init(
            input: input,
            command: self.listPermissionSetsProvisionedToAccount,
            inputKey: \ListPermissionSetsProvisionedToAccountRequest.nextToken,
            outputKey: \ListPermissionSetsProvisionedToAccountResponse.nextToken,
            logger: logger
        )
    }

    /// Lists the tags that are attached to a specified resource.
    /// Return PaginatorSequence for operation.
    ///
    /// - Parameters:
    ///   - input: Input for request
    ///   - logger: Logger used flot logging
    public func listTagsForResourcePaginator(
        _ input: ListTagsForResourceRequest,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<ListTagsForResourceRequest, ListTagsForResourceResponse> {
        return .init(
            input: input,
            command: self.listTagsForResource,
            inputKey: \ListTagsForResourceRequest.nextToken,
            outputKey: \ListTagsForResourceResponse.nextToken,
            logger: logger
        )
    }

    /// Lists all the trusted token issuers configured in an instance of IAM Identity Center.
    /// Return PaginatorSequence for operation.
    ///
    /// - Parameters:
    ///   - input: Input for request
    ///   - logger: Logger used flot logging
    public func listTrustedTokenIssuersPaginator(
        _ input: ListTrustedTokenIssuersRequest,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<ListTrustedTokenIssuersRequest, ListTrustedTokenIssuersResponse> {
        return .init(
            input: input,
            command: self.listTrustedTokenIssuers,
            inputKey: \ListTrustedTokenIssuersRequest.nextToken,
            outputKey: \ListTrustedTokenIssuersResponse.nextToken,
            logger: logger
        )
    }
}

extension SSOAdmin.ListAccountAssignmentCreationStatusRequest: AWSPaginateToken {
    public func usingPaginationToken(_ token: String) -> SSOAdmin.ListAccountAssignmentCreationStatusRequest {
        return .init(
            filter: self.filter,
            instanceArn: self.instanceArn,
            maxResults: self.maxResults,
            nextToken: token
        )
    }
}

extension SSOAdmin.ListAccountAssignmentDeletionStatusRequest: AWSPaginateToken {
    public func usingPaginationToken(_ token: String) -> SSOAdmin.ListAccountAssignmentDeletionStatusRequest {
        return .init(
            filter: self.filter,
            instanceArn: self.instanceArn,
            maxResults: self.maxResults,
            nextToken: token
        )
    }
}

extension SSOAdmin.ListAccountAssignmentsForPrincipalRequest: AWSPaginateToken {
    public func usingPaginationToken(_ token: String) -> SSOAdmin.ListAccountAssignmentsForPrincipalRequest {
        return .init(
            filter: self.filter,
            instanceArn: self.instanceArn,
            maxResults: self.maxResults,
            nextToken: token,
            principalId: self.principalId,
            principalType: self.principalType
        )
    }
}

extension SSOAdmin.ListAccountAssignmentsRequest: AWSPaginateToken {
    public func usingPaginationToken(_ token: String) -> SSOAdmin.ListAccountAssignmentsRequest {
        return .init(
            accountId: self.accountId,
            instanceArn: self.instanceArn,
            maxResults: self.maxResults,
            nextToken: token,
            permissionSetArn: self.permissionSetArn
        )
    }
}

extension SSOAdmin.ListAccountsForProvisionedPermissionSetRequest: AWSPaginateToken {
    public func usingPaginationToken(_ token: String) -> SSOAdmin.ListAccountsForProvisionedPermissionSetRequest {
        return .init(
            instanceArn: self.instanceArn,
            maxResults: self.maxResults,
            nextToken: token,
            permissionSetArn: self.permissionSetArn,
            provisioningStatus: self.provisioningStatus
        )
    }
}

extension SSOAdmin.ListApplicationAccessScopesRequest: AWSPaginateToken {
    public func usingPaginationToken(_ token: String) -> SSOAdmin.ListApplicationAccessScopesRequest {
        return .init(
            applicationArn: self.applicationArn,
            maxResults: self.maxResults,
            nextToken: token
        )
    }
}

extension SSOAdmin.ListApplicationAssignmentsForPrincipalRequest: AWSPaginateToken {
    public func usingPaginationToken(_ token: String) -> SSOAdmin.ListApplicationAssignmentsForPrincipalRequest {
        return .init(
            filter: self.filter,
            instanceArn: self.instanceArn,
            maxResults: self.maxResults,
            nextToken: token,
            principalId: self.principalId,
            principalType: self.principalType
        )
    }
}

extension SSOAdmin.ListApplicationAssignmentsRequest: AWSPaginateToken {
    public func usingPaginationToken(_ token: String) -> SSOAdmin.ListApplicationAssignmentsRequest {
        return .init(
            applicationArn: self.applicationArn,
            maxResults: self.maxResults,
            nextToken: token
        )
    }
}

extension SSOAdmin.ListApplicationAuthenticationMethodsRequest: AWSPaginateToken {
    public func usingPaginationToken(_ token: String) -> SSOAdmin.ListApplicationAuthenticationMethodsRequest {
        return .init(
            applicationArn: self.applicationArn,
            nextToken: token
        )
    }
}

extension SSOAdmin.ListApplicationGrantsRequest: AWSPaginateToken {
    public func usingPaginationToken(_ token: String) -> SSOAdmin.ListApplicationGrantsRequest {
        return .init(
            applicationArn: self.applicationArn,
            nextToken: token
        )
    }
}

extension SSOAdmin.ListApplicationProvidersRequest: AWSPaginateToken {
    public func usingPaginationToken(_ token: String) -> SSOAdmin.ListApplicationProvidersRequest {
        return .init(
            maxResults: self.maxResults,
            nextToken: token
        )
    }
}

extension SSOAdmin.ListApplicationsRequest: AWSPaginateToken {
    public func usingPaginationToken(_ token: String) -> SSOAdmin.ListApplicationsRequest {
        return .init(
            filter: self.filter,
            instanceArn: self.instanceArn,
            maxResults: self.maxResults,
            nextToken: token
        )
    }
}

extension SSOAdmin.ListCustomerManagedPolicyReferencesInPermissionSetRequest: AWSPaginateToken {
    public func usingPaginationToken(_ token: String) -> SSOAdmin.ListCustomerManagedPolicyReferencesInPermissionSetRequest {
        return .init(
            instanceArn: self.instanceArn,
            maxResults: self.maxResults,
            nextToken: token,
            permissionSetArn: self.permissionSetArn
        )
    }
}

extension SSOAdmin.ListInstancesRequest: AWSPaginateToken {
    public func usingPaginationToken(_ token: String) -> SSOAdmin.ListInstancesRequest {
        return .init(
            maxResults: self.maxResults,
            nextToken: token
        )
    }
}

extension SSOAdmin.ListManagedPoliciesInPermissionSetRequest: AWSPaginateToken {
    public func usingPaginationToken(_ token: String) -> SSOAdmin.ListManagedPoliciesInPermissionSetRequest {
        return .init(
            instanceArn: self.instanceArn,
            maxResults: self.maxResults,
            nextToken: token,
            permissionSetArn: self.permissionSetArn
        )
    }
}

extension SSOAdmin.ListPermissionSetProvisioningStatusRequest: AWSPaginateToken {
    public func usingPaginationToken(_ token: String) -> SSOAdmin.ListPermissionSetProvisioningStatusRequest {
        return .init(
            filter: self.filter,
            instanceArn: self.instanceArn,
            maxResults: self.maxResults,
            nextToken: token
        )
    }
}

extension SSOAdmin.ListPermissionSetsProvisionedToAccountRequest: AWSPaginateToken {
    public func usingPaginationToken(_ token: String) -> SSOAdmin.ListPermissionSetsProvisionedToAccountRequest {
        return .init(
            accountId: self.accountId,
            instanceArn: self.instanceArn,
            maxResults: self.maxResults,
            nextToken: token,
            provisioningStatus: self.provisioningStatus
        )
    }
}

extension SSOAdmin.ListPermissionSetsRequest: AWSPaginateToken {
    public func usingPaginationToken(_ token: String) -> SSOAdmin.ListPermissionSetsRequest {
        return .init(
            instanceArn: self.instanceArn,
            maxResults: self.maxResults,
            nextToken: token
        )
    }
}

extension SSOAdmin.ListTagsForResourceRequest: AWSPaginateToken {
    public func usingPaginationToken(_ token: String) -> SSOAdmin.ListTagsForResourceRequest {
        return .init(
            instanceArn: self.instanceArn,
            nextToken: token,
            resourceArn: self.resourceArn
        )
    }
}

extension SSOAdmin.ListTrustedTokenIssuersRequest: AWSPaginateToken {
    public func usingPaginationToken(_ token: String) -> SSOAdmin.ListTrustedTokenIssuersRequest {
        return .init(
            instanceArn: self.instanceArn,
            maxResults: self.maxResults,
            nextToken: token
        )
    }
}
