//===----------------------------------------------------------------------===//
//
// This source file is part of the Soto for AWS open source project
//
// Copyright (c) 2017-2021 the Soto project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
// See CONTRIBUTORS.txt for the list of Soto project authors
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by https://github.com/soto-project/soto/tree/main/CodeGenerator. DO NOT EDIT.

import Foundation
import SotoCore

extension RDS {
    // MARK: Enums

    public enum ActivityStreamMode: String, CustomStringConvertible, Codable {
        case async
        case sync
        public var description: String { return self.rawValue }
    }

    public enum ActivityStreamStatus: String, CustomStringConvertible, Codable {
        case started
        case starting
        case stopped
        case stopping
        public var description: String { return self.rawValue }
    }

    public enum ApplyMethod: String, CustomStringConvertible, Codable {
        case immediate
        case pendingReboot = "pending-reboot"
        public var description: String { return self.rawValue }
    }

    public enum AuthScheme: String, CustomStringConvertible, Codable {
        case secrets = "SECRETS"
        public var description: String { return self.rawValue }
    }

    public enum DBProxyEndpointStatus: String, CustomStringConvertible, Codable {
        case available
        case creating
        case deleting
        case incompatibleNetwork = "incompatible-network"
        case insufficientResourceLimits = "insufficient-resource-limits"
        case modifying
        public var description: String { return self.rawValue }
    }

    public enum DBProxyEndpointTargetRole: String, CustomStringConvertible, Codable {
        case readOnly = "READ_ONLY"
        case readWrite = "READ_WRITE"
        public var description: String { return self.rawValue }
    }

    public enum DBProxyStatus: String, CustomStringConvertible, Codable {
        case available
        case creating
        case deleting
        case incompatibleNetwork = "incompatible-network"
        case insufficientResourceLimits = "insufficient-resource-limits"
        case modifying
        case reactivating
        case suspended
        case suspending
        public var description: String { return self.rawValue }
    }

    public enum EngineFamily: String, CustomStringConvertible, Codable {
        case mysql = "MYSQL"
        case postgresql = "POSTGRESQL"
        public var description: String { return self.rawValue }
    }

    public enum FailoverStatus: String, CustomStringConvertible, Codable {
        case cancelling
        case failingOver = "failing-over"
        case pending
        public var description: String { return self.rawValue }
    }

    public enum IAMAuthMode: String, CustomStringConvertible, Codable {
        case disabled = "DISABLED"
        case required = "REQUIRED"
        public var description: String { return self.rawValue }
    }

    public enum ReplicaMode: String, CustomStringConvertible, Codable {
        case mounted
        case openReadOnly = "open-read-only"
        public var description: String { return self.rawValue }
    }

    public enum SourceType: String, CustomStringConvertible, Codable {
        case dbCluster = "db-cluster"
        case dbClusterSnapshot = "db-cluster-snapshot"
        case dbInstance = "db-instance"
        case dbParameterGroup = "db-parameter-group"
        case dbSecurityGroup = "db-security-group"
        case dbSnapshot = "db-snapshot"
        public var description: String { return self.rawValue }
    }

    public enum TargetHealthReason: String, CustomStringConvertible, Codable {
        case authFailure = "AUTH_FAILURE"
        case connectionFailed = "CONNECTION_FAILED"
        case invalidReplicationState = "INVALID_REPLICATION_STATE"
        case pendingProxyCapacity = "PENDING_PROXY_CAPACITY"
        case unreachable = "UNREACHABLE"
        public var description: String { return self.rawValue }
    }

    public enum TargetRole: String, CustomStringConvertible, Codable {
        case readOnly = "READ_ONLY"
        case readWrite = "READ_WRITE"
        case unknown = "UNKNOWN"
        public var description: String { return self.rawValue }
    }

    public enum TargetState: String, CustomStringConvertible, Codable {
        case available = "AVAILABLE"
        case registering = "REGISTERING"
        case unavailable = "UNAVAILABLE"
        public var description: String { return self.rawValue }
    }

    public enum TargetType: String, CustomStringConvertible, Codable {
        case rdsInstance = "RDS_INSTANCE"
        case rdsServerlessEndpoint = "RDS_SERVERLESS_ENDPOINT"
        case trackedCluster = "TRACKED_CLUSTER"
        public var description: String { return self.rawValue }
    }

    public enum WriteForwardingStatus: String, CustomStringConvertible, Codable {
        case disabled
        case disabling
        case enabled
        case enabling
        case unknown
        public var description: String { return self.rawValue }
    }

    // MARK: Shapes

    public struct AccountAttributesMessage: AWSDecodableShape {
        public struct _AccountQuotasEncoding: ArrayCoderProperties { public static let member = "AccountQuota" }

        /// A list of AccountQuota objects. Within this list, each quota has a name, a count of usage toward the quota maximum, and a maximum value for the quota.
        @OptionalCustomCoding<ArrayCoder<_AccountQuotasEncoding, AccountQuota>>
        public var accountQuotas: [AccountQuota]?

        public init(accountQuotas: [AccountQuota]? = nil) {
            self.accountQuotas = accountQuotas
        }

        private enum CodingKeys: String, CodingKey {
            case accountQuotas = "AccountQuotas"
        }
    }

    public struct AccountQuota: AWSDecodableShape {
        /// The name of the Amazon RDS quota for this Amazon Web Services account.
        public let accountQuotaName: String?
        /// The maximum allowed value for the quota.
        public let max: Int64?
        /// The amount currently used toward the quota maximum.
        public let used: Int64?

        public init(accountQuotaName: String? = nil, max: Int64? = nil, used: Int64? = nil) {
            self.accountQuotaName = accountQuotaName
            self.max = max
            self.used = used
        }

        private enum CodingKeys: String, CodingKey {
            case accountQuotaName = "AccountQuotaName"
            case max = "Max"
            case used = "Used"
        }
    }

    public struct AddRoleToDBClusterMessage: AWSEncodableShape {
        /// The name of the DB cluster to associate the IAM role with.
        public let dBClusterIdentifier: String
        /// The name of the feature for the DB cluster that the IAM role is to be associated with. For the list of supported feature names, see DBEngineVersion.
        public let featureName: String?
        /// The Amazon Resource Name (ARN) of the IAM role to associate with the Aurora DB cluster, for example, arn:aws:iam::123456789012:role/AuroraAccessRole.
        public let roleArn: String

        public init(dBClusterIdentifier: String, featureName: String? = nil, roleArn: String) {
            self.dBClusterIdentifier = dBClusterIdentifier
            self.featureName = featureName
            self.roleArn = roleArn
        }

        private enum CodingKeys: String, CodingKey {
            case dBClusterIdentifier = "DBClusterIdentifier"
            case featureName = "FeatureName"
            case roleArn = "RoleArn"
        }
    }

    public struct AddRoleToDBInstanceMessage: AWSEncodableShape {
        /// The name of the DB instance to associate the IAM role with.
        public let dBInstanceIdentifier: String
        /// The name of the feature for the DB instance that the IAM role is to be associated with. For the list of supported feature names, see DBEngineVersion.
        public let featureName: String
        /// The Amazon Resource Name (ARN) of the IAM role to associate with the DB instance, for example arn:aws:iam::123456789012:role/AccessRole.
        public let roleArn: String

        public init(dBInstanceIdentifier: String, featureName: String, roleArn: String) {
            self.dBInstanceIdentifier = dBInstanceIdentifier
            self.featureName = featureName
            self.roleArn = roleArn
        }

        private enum CodingKeys: String, CodingKey {
            case dBInstanceIdentifier = "DBInstanceIdentifier"
            case featureName = "FeatureName"
            case roleArn = "RoleArn"
        }
    }

    public struct AddSourceIdentifierToSubscriptionMessage: AWSEncodableShape {
        /// The identifier of the event source to be added. Constraints:   If the source type is a DB instance, a DBInstanceIdentifier value must be supplied.   If the source type is a DB cluster, a DBClusterIdentifier value must be supplied.   If the source type is a DB parameter group, a DBParameterGroupName value must be supplied.   If the source type is a DB security group, a DBSecurityGroupName value must be supplied.   If the source type is a DB snapshot, a DBSnapshotIdentifier value must be supplied.   If the source type is a DB cluster snapshot, a DBClusterSnapshotIdentifier value must be supplied.
        public let sourceIdentifier: String
        /// The name of the RDS event notification subscription you want to add a source identifier to.
        public let subscriptionName: String

        public init(sourceIdentifier: String, subscriptionName: String) {
            self.sourceIdentifier = sourceIdentifier
            self.subscriptionName = subscriptionName
        }

        private enum CodingKeys: String, CodingKey {
            case sourceIdentifier = "SourceIdentifier"
            case subscriptionName = "SubscriptionName"
        }
    }

    public struct AddSourceIdentifierToSubscriptionResult: AWSDecodableShape {
        public let eventSubscription: EventSubscription?

        public init(eventSubscription: EventSubscription? = nil) {
            self.eventSubscription = eventSubscription
        }

        private enum CodingKeys: String, CodingKey {
            case eventSubscription = "EventSubscription"
        }
    }

    public struct AddTagsToResourceMessage: AWSEncodableShape {
        public struct _TagsEncoding: ArrayCoderProperties { public static let member = "Tag" }

        /// The Amazon RDS resource that the tags are added to. This value is an Amazon Resource Name (ARN). For information about creating an ARN, see  Constructing an RDS Amazon Resource Name (ARN).
        public let resourceName: String
        /// The tags to be assigned to the Amazon RDS resource.
        @CustomCoding<ArrayCoder<_TagsEncoding, Tag>>
        public var tags: [Tag]

        public init(resourceName: String, tags: [Tag]) {
            self.resourceName = resourceName
            self.tags = tags
        }

        private enum CodingKeys: String, CodingKey {
            case resourceName = "ResourceName"
            case tags = "Tags"
        }
    }

    public struct ApplyPendingMaintenanceActionMessage: AWSEncodableShape {
        /// The pending maintenance action to apply to this resource. Valid values: system-update, db-upgrade, hardware-maintenance, ca-certificate-rotation
        public let applyAction: String
        /// A value that specifies the type of opt-in request, or undoes an opt-in request. An opt-in request of type immediate can't be undone. Valid values:    immediate - Apply the maintenance action immediately.    next-maintenance - Apply the maintenance action during the next maintenance window for the resource.    undo-opt-in - Cancel any existing next-maintenance opt-in requests.
        public let optInType: String
        /// The RDS Amazon Resource Name (ARN) of the resource that the pending maintenance action applies to. For information about creating an ARN, see  Constructing an RDS Amazon Resource Name (ARN).
        public let resourceIdentifier: String

        public init(applyAction: String, optInType: String, resourceIdentifier: String) {
            self.applyAction = applyAction
            self.optInType = optInType
            self.resourceIdentifier = resourceIdentifier
        }

        private enum CodingKeys: String, CodingKey {
            case applyAction = "ApplyAction"
            case optInType = "OptInType"
            case resourceIdentifier = "ResourceIdentifier"
        }
    }

    public struct ApplyPendingMaintenanceActionResult: AWSDecodableShape {
        public let resourcePendingMaintenanceActions: ResourcePendingMaintenanceActions?

        public init(resourcePendingMaintenanceActions: ResourcePendingMaintenanceActions? = nil) {
            self.resourcePendingMaintenanceActions = resourcePendingMaintenanceActions
        }

        private enum CodingKeys: String, CodingKey {
            case resourcePendingMaintenanceActions = "ResourcePendingMaintenanceActions"
        }
    }

    public struct AuthorizeDBSecurityGroupIngressMessage: AWSEncodableShape {
        /// The IP range to authorize.
        public let cidrip: String?
        /// The name of the DB security group to add authorization to.
        public let dBSecurityGroupName: String
        ///  Id of the EC2 security group to authorize. For VPC DB security groups, EC2SecurityGroupId must be provided. Otherwise, EC2SecurityGroupOwnerId and either EC2SecurityGroupName or EC2SecurityGroupId must be provided.
        public let eC2SecurityGroupId: String?
        ///  Name of the EC2 security group to authorize. For VPC DB security groups, EC2SecurityGroupId must be provided. Otherwise, EC2SecurityGroupOwnerId and either EC2SecurityGroupName or EC2SecurityGroupId must be provided.
        public let eC2SecurityGroupName: String?
        ///  Amazon Web Services account number of the owner of the EC2 security group specified in the EC2SecurityGroupName parameter. The Amazon Web Services access key ID isn't an acceptable value. For VPC DB security groups, EC2SecurityGroupId must be provided. Otherwise, EC2SecurityGroupOwnerId and either EC2SecurityGroupName or EC2SecurityGroupId must be provided.
        public let eC2SecurityGroupOwnerId: String?

        public init(cidrip: String? = nil, dBSecurityGroupName: String, eC2SecurityGroupId: String? = nil, eC2SecurityGroupName: String? = nil, eC2SecurityGroupOwnerId: String? = nil) {
            self.cidrip = cidrip
            self.dBSecurityGroupName = dBSecurityGroupName
            self.eC2SecurityGroupId = eC2SecurityGroupId
            self.eC2SecurityGroupName = eC2SecurityGroupName
            self.eC2SecurityGroupOwnerId = eC2SecurityGroupOwnerId
        }

        private enum CodingKeys: String, CodingKey {
            case cidrip = "CIDRIP"
            case dBSecurityGroupName = "DBSecurityGroupName"
            case eC2SecurityGroupId = "EC2SecurityGroupId"
            case eC2SecurityGroupName = "EC2SecurityGroupName"
            case eC2SecurityGroupOwnerId = "EC2SecurityGroupOwnerId"
        }
    }

    public struct AuthorizeDBSecurityGroupIngressResult: AWSDecodableShape {
        public let dBSecurityGroup: DBSecurityGroup?

        public init(dBSecurityGroup: DBSecurityGroup? = nil) {
            self.dBSecurityGroup = dBSecurityGroup
        }

        private enum CodingKeys: String, CodingKey {
            case dBSecurityGroup = "DBSecurityGroup"
        }
    }

    public struct AvailabilityZone: AWSDecodableShape {
        /// The name of the Availability Zone.
        public let name: String?

        public init(name: String? = nil) {
            self.name = name
        }

        private enum CodingKeys: String, CodingKey {
            case name = "Name"
        }
    }

    public struct AvailableProcessorFeature: AWSDecodableShape {
        /// The allowed values for the processor feature of the DB instance class.
        public let allowedValues: String?
        /// The default value for the processor feature of the DB instance class.
        public let defaultValue: String?
        /// The name of the processor feature. Valid names are coreCount and threadsPerCore.
        public let name: String?

        public init(allowedValues: String? = nil, defaultValue: String? = nil, name: String? = nil) {
            self.allowedValues = allowedValues
            self.defaultValue = defaultValue
            self.name = name
        }

        private enum CodingKeys: String, CodingKey {
            case allowedValues = "AllowedValues"
            case defaultValue = "DefaultValue"
            case name = "Name"
        }
    }

    public struct BacktrackDBClusterMessage: AWSEncodableShape {
        /// The timestamp of the time to backtrack the DB cluster to, specified in ISO 8601 format. For more information about ISO 8601, see the ISO8601 Wikipedia page.   If the specified time isn't a consistent time for the DB cluster, Aurora automatically chooses the nearest possible consistent time for the DB cluster.  Constraints:   Must contain a valid ISO 8601 timestamp.   Can't contain a timestamp set in the future.   Example: 2017-07-08T18:00Z
        public let backtrackTo: Date
        /// The DB cluster identifier of the DB cluster to be backtracked. This parameter is stored as a lowercase string. Constraints:   Must contain from 1 to 63 alphanumeric characters or hyphens.   First character must be a letter.   Can't end with a hyphen or contain two consecutive hyphens.   Example: my-cluster1
        public let dBClusterIdentifier: String
        /// A value that indicates whether to force the DB cluster to backtrack when binary logging is enabled. Otherwise, an error occurs when binary logging is enabled.
        public let force: Bool?
        /// A value that indicates whether to backtrack the DB cluster to the earliest possible backtrack time when BacktrackTo is set to a timestamp earlier than the earliest backtrack time. When this parameter is disabled and BacktrackTo is set to a timestamp earlier than the earliest backtrack time, an error occurs.
        public let useEarliestTimeOnPointInTimeUnavailable: Bool?

        public init(backtrackTo: Date, dBClusterIdentifier: String, force: Bool? = nil, useEarliestTimeOnPointInTimeUnavailable: Bool? = nil) {
            self.backtrackTo = backtrackTo
            self.dBClusterIdentifier = dBClusterIdentifier
            self.force = force
            self.useEarliestTimeOnPointInTimeUnavailable = useEarliestTimeOnPointInTimeUnavailable
        }

        private enum CodingKeys: String, CodingKey {
            case backtrackTo = "BacktrackTo"
            case dBClusterIdentifier = "DBClusterIdentifier"
            case force = "Force"
            case useEarliestTimeOnPointInTimeUnavailable = "UseEarliestTimeOnPointInTimeUnavailable"
        }
    }

    public struct CancelExportTaskMessage: AWSEncodableShape {
        /// The identifier of the snapshot export task to cancel.
        public let exportTaskIdentifier: String

        public init(exportTaskIdentifier: String) {
            self.exportTaskIdentifier = exportTaskIdentifier
        }

        private enum CodingKeys: String, CodingKey {
            case exportTaskIdentifier = "ExportTaskIdentifier"
        }
    }

    public struct Certificate: AWSDecodableShape {
        /// The Amazon Resource Name (ARN) for the certificate.
        public let certificateArn: String?
        /// The unique key that identifies a certificate.
        public let certificateIdentifier: String?
        /// The type of the certificate.
        public let certificateType: String?
        /// Whether there is an override for the default certificate identifier.
        public let customerOverride: Bool?
        /// If there is an override for the default certificate identifier, when the override expires.
        public let customerOverrideValidTill: Date?
        /// The thumbprint of the certificate.
        public let thumbprint: String?
        /// The starting date from which the certificate is valid.
        public let validFrom: Date?
        /// The final date that the certificate continues to be valid.
        public let validTill: Date?

        public init(certificateArn: String? = nil, certificateIdentifier: String? = nil, certificateType: String? = nil, customerOverride: Bool? = nil, customerOverrideValidTill: Date? = nil, thumbprint: String? = nil, validFrom: Date? = nil, validTill: Date? = nil) {
            self.certificateArn = certificateArn
            self.certificateIdentifier = certificateIdentifier
            self.certificateType = certificateType
            self.customerOverride = customerOverride
            self.customerOverrideValidTill = customerOverrideValidTill
            self.thumbprint = thumbprint
            self.validFrom = validFrom
            self.validTill = validTill
        }

        private enum CodingKeys: String, CodingKey {
            case certificateArn = "CertificateArn"
            case certificateIdentifier = "CertificateIdentifier"
            case certificateType = "CertificateType"
            case customerOverride = "CustomerOverride"
            case customerOverrideValidTill = "CustomerOverrideValidTill"
            case thumbprint = "Thumbprint"
            case validFrom = "ValidFrom"
            case validTill = "ValidTill"
        }
    }

    public struct CertificateMessage: AWSDecodableShape {
        public struct _CertificatesEncoding: ArrayCoderProperties { public static let member = "Certificate" }

        /// The list of Certificate objects for the Amazon Web Services account.
        @OptionalCustomCoding<ArrayCoder<_CertificatesEncoding, Certificate>>
        public var certificates: [Certificate]?
        ///  An optional pagination token provided by a previous DescribeCertificates request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by MaxRecords .
        public let marker: String?

        public init(certificates: [Certificate]? = nil, marker: String? = nil) {
            self.certificates = certificates
            self.marker = marker
        }

        private enum CodingKeys: String, CodingKey {
            case certificates = "Certificates"
            case marker = "Marker"
        }
    }

    public struct CharacterSet: AWSDecodableShape {
        /// The description of the character set.
        public let characterSetDescription: String?
        /// The name of the character set.
        public let characterSetName: String?

        public init(characterSetDescription: String? = nil, characterSetName: String? = nil) {
            self.characterSetDescription = characterSetDescription
            self.characterSetName = characterSetName
        }

        private enum CodingKeys: String, CodingKey {
            case characterSetDescription = "CharacterSetDescription"
            case characterSetName = "CharacterSetName"
        }
    }

    public struct CloudwatchLogsExportConfiguration: AWSEncodableShape {
        /// The list of log types to disable.
        @OptionalCustomCoding<StandardArrayCoder>
        public var disableLogTypes: [String]?
        /// The list of log types to enable.
        @OptionalCustomCoding<StandardArrayCoder>
        public var enableLogTypes: [String]?

        public init(disableLogTypes: [String]? = nil, enableLogTypes: [String]? = nil) {
            self.disableLogTypes = disableLogTypes
            self.enableLogTypes = enableLogTypes
        }

        private enum CodingKeys: String, CodingKey {
            case disableLogTypes = "DisableLogTypes"
            case enableLogTypes = "EnableLogTypes"
        }
    }

    public struct ClusterPendingModifiedValues: AWSDecodableShape {
        /// The DBClusterIdentifier value for the DB cluster.
        public let dBClusterIdentifier: String?
        /// The database engine version.
        public let engineVersion: String?
        /// A value that indicates whether mapping of Amazon Web Services Identity and Access Management (IAM) accounts to database accounts is enabled.
        public let iAMDatabaseAuthenticationEnabled: Bool?
        /// The master credentials for the DB cluster.
        public let masterUserPassword: String?
        public let pendingCloudwatchLogsExports: PendingCloudwatchLogsExports?

        public init(dBClusterIdentifier: String? = nil, engineVersion: String? = nil, iAMDatabaseAuthenticationEnabled: Bool? = nil, masterUserPassword: String? = nil, pendingCloudwatchLogsExports: PendingCloudwatchLogsExports? = nil) {
            self.dBClusterIdentifier = dBClusterIdentifier
            self.engineVersion = engineVersion
            self.iAMDatabaseAuthenticationEnabled = iAMDatabaseAuthenticationEnabled
            self.masterUserPassword = masterUserPassword
            self.pendingCloudwatchLogsExports = pendingCloudwatchLogsExports
        }

        private enum CodingKeys: String, CodingKey {
            case dBClusterIdentifier = "DBClusterIdentifier"
            case engineVersion = "EngineVersion"
            case iAMDatabaseAuthenticationEnabled = "IAMDatabaseAuthenticationEnabled"
            case masterUserPassword = "MasterUserPassword"
            case pendingCloudwatchLogsExports = "PendingCloudwatchLogsExports"
        }
    }

    public struct ConnectionPoolConfiguration: AWSEncodableShape {
        /// The number of seconds for a proxy to wait for a connection to become available in the connection pool. Only applies when the proxy has opened its maximum number of connections and all connections are busy with client sessions. Default: 120 Constraints: between 1 and 3600, or 0 representing unlimited
        public let connectionBorrowTimeout: Int?
        ///  One or more SQL statements for the proxy to run when opening each new database connection. Typically used with SET statements to make sure that each connection has identical settings such as time zone and character set. For multiple statements, use semicolons as the separator. You can also include multiple variables in a single SET statement, such as SET x=1, y=2.  Default: no initialization query
        public let initQuery: String?
        /// The maximum size of the connection pool for each target in a target group. For Aurora MySQL, it is expressed as a percentage of the max_connections setting for the RDS DB instance or Aurora DB cluster used by the target group. Default: 100 Constraints: between 1 and 100
        public let maxConnectionsPercent: Int?
        ///  Controls how actively the proxy closes idle database connections in the connection pool. A high value enables the proxy to leave a high percentage of idle connections open. A low value causes the proxy to close idle client connections and return the underlying database connections to the connection pool. For Aurora MySQL, it is expressed as a percentage of the max_connections setting for the RDS DB instance or Aurora DB cluster used by the target group.  Default: 50 Constraints: between 0 and MaxConnectionsPercent
        public let maxIdleConnectionsPercent: Int?
        /// Each item in the list represents a class of SQL operations that normally cause all later statements in a session using a proxy to be pinned to the same underlying database connection. Including an item in the list exempts that class of SQL operations from the pinning behavior. Default: no session pinning filters
        @OptionalCustomCoding<StandardArrayCoder>
        public var sessionPinningFilters: [String]?

        public init(connectionBorrowTimeout: Int? = nil, initQuery: String? = nil, maxConnectionsPercent: Int? = nil, maxIdleConnectionsPercent: Int? = nil, sessionPinningFilters: [String]? = nil) {
            self.connectionBorrowTimeout = connectionBorrowTimeout
            self.initQuery = initQuery
            self.maxConnectionsPercent = maxConnectionsPercent
            self.maxIdleConnectionsPercent = maxIdleConnectionsPercent
            self.sessionPinningFilters = sessionPinningFilters
        }

        private enum CodingKeys: String, CodingKey {
            case connectionBorrowTimeout = "ConnectionBorrowTimeout"
            case initQuery = "InitQuery"
            case maxConnectionsPercent = "MaxConnectionsPercent"
            case maxIdleConnectionsPercent = "MaxIdleConnectionsPercent"
            case sessionPinningFilters = "SessionPinningFilters"
        }
    }

    public struct ConnectionPoolConfigurationInfo: AWSDecodableShape {
        /// The number of seconds for a proxy to wait for a connection to become available in the connection pool. Only applies when the proxy has opened its maximum number of connections and all connections are busy with client sessions.
        public let connectionBorrowTimeout: Int?
        ///  One or more SQL statements for the proxy to run when opening each new database connection. Typically used with SET statements to make sure that each connection has identical settings such as time zone and character set. This setting is empty by default. For multiple statements, use semicolons as the separator. You can also include multiple variables in a single SET statement, such as SET x=1, y=2.
        public let initQuery: String?
        /// The maximum size of the connection pool for each target in a target group. For Aurora MySQL, it is expressed as a percentage of the max_connections setting for the RDS DB instance or Aurora DB cluster used by the target group.
        public let maxConnectionsPercent: Int?
        ///  Controls how actively the proxy closes idle database connections in the connection pool. A high value enables the proxy to leave a high percentage of idle connections open. A low value causes the proxy to close idle client connections and return the underlying database connections to the connection pool. For Aurora MySQL, it is expressed as a percentage of the max_connections setting for the RDS DB instance or Aurora DB cluster used by the target group.
        public let maxIdleConnectionsPercent: Int?
        /// Each item in the list represents a class of SQL operations that normally cause all later statements in a session using a proxy to be pinned to the same underlying database connection. Including an item in the list exempts that class of SQL operations from the pinning behavior. Currently, the only allowed value is EXCLUDE_VARIABLE_SETS.
        @OptionalCustomCoding<StandardArrayCoder>
        public var sessionPinningFilters: [String]?

        public init(connectionBorrowTimeout: Int? = nil, initQuery: String? = nil, maxConnectionsPercent: Int? = nil, maxIdleConnectionsPercent: Int? = nil, sessionPinningFilters: [String]? = nil) {
            self.connectionBorrowTimeout = connectionBorrowTimeout
            self.initQuery = initQuery
            self.maxConnectionsPercent = maxConnectionsPercent
            self.maxIdleConnectionsPercent = maxIdleConnectionsPercent
            self.sessionPinningFilters = sessionPinningFilters
        }

        private enum CodingKeys: String, CodingKey {
            case connectionBorrowTimeout = "ConnectionBorrowTimeout"
            case initQuery = "InitQuery"
            case maxConnectionsPercent = "MaxConnectionsPercent"
            case maxIdleConnectionsPercent = "MaxIdleConnectionsPercent"
            case sessionPinningFilters = "SessionPinningFilters"
        }
    }

    public struct CopyDBClusterParameterGroupMessage: AWSEncodableShape {
        public struct _TagsEncoding: ArrayCoderProperties { public static let member = "Tag" }

        /// The identifier or Amazon Resource Name (ARN) for the source DB cluster parameter group. For information about creating an ARN, see  Constructing an ARN for Amazon RDS in the Amazon Aurora User Guide.  Constraints:   Must specify a valid DB cluster parameter group.
        public let sourceDBClusterParameterGroupIdentifier: String
        @OptionalCustomCoding<ArrayCoder<_TagsEncoding, Tag>>
        public var tags: [Tag]?
        /// A description for the copied DB cluster parameter group.
        public let targetDBClusterParameterGroupDescription: String
        /// The identifier for the copied DB cluster parameter group. Constraints:   Can't be null, empty, or blank   Must contain from 1 to 255 letters, numbers, or hyphens   First character must be a letter   Can't end with a hyphen or contain two consecutive hyphens   Example: my-cluster-param-group1
        public let targetDBClusterParameterGroupIdentifier: String

        public init(sourceDBClusterParameterGroupIdentifier: String, tags: [Tag]? = nil, targetDBClusterParameterGroupDescription: String, targetDBClusterParameterGroupIdentifier: String) {
            self.sourceDBClusterParameterGroupIdentifier = sourceDBClusterParameterGroupIdentifier
            self.tags = tags
            self.targetDBClusterParameterGroupDescription = targetDBClusterParameterGroupDescription
            self.targetDBClusterParameterGroupIdentifier = targetDBClusterParameterGroupIdentifier
        }

        private enum CodingKeys: String, CodingKey {
            case sourceDBClusterParameterGroupIdentifier = "SourceDBClusterParameterGroupIdentifier"
            case tags = "Tags"
            case targetDBClusterParameterGroupDescription = "TargetDBClusterParameterGroupDescription"
            case targetDBClusterParameterGroupIdentifier = "TargetDBClusterParameterGroupIdentifier"
        }
    }

    public struct CopyDBClusterParameterGroupResult: AWSDecodableShape {
        public let dBClusterParameterGroup: DBClusterParameterGroup?

        public init(dBClusterParameterGroup: DBClusterParameterGroup? = nil) {
            self.dBClusterParameterGroup = dBClusterParameterGroup
        }

        private enum CodingKeys: String, CodingKey {
            case dBClusterParameterGroup = "DBClusterParameterGroup"
        }
    }

    public struct CopyDBClusterSnapshotMessage: AWSEncodableShape {
        public struct _TagsEncoding: ArrayCoderProperties { public static let member = "Tag" }

        /// A value that indicates whether to copy all tags from the source DB cluster snapshot to the target DB cluster snapshot. By default, tags are not copied.
        public let copyTags: Bool?
        /// The Amazon Web Services KMS key identifier for an encrypted DB cluster snapshot. The Amazon Web Services KMS key identifier is the key ARN, key ID, alias ARN, or alias name for the Amazon Web Services KMS customer master key (CMK). If you copy an encrypted DB cluster snapshot from your Amazon Web Services account, you can specify a value for KmsKeyId to encrypt the copy with a new Amazon Web Services KMS CMK. If you don't specify a value for KmsKeyId, then the copy of the DB cluster snapshot is encrypted with the same Amazon Web Services KMS key as the source DB cluster snapshot.  If you copy an encrypted DB cluster snapshot that is shared from another Amazon Web Services account, then you must specify a value for KmsKeyId.  To copy an encrypted DB cluster snapshot to another Amazon Web Services Region, you must set KmsKeyId to the Amazon Web Services KMS key identifier you want to use to encrypt the copy of the DB cluster snapshot in the destination Amazon Web Services Region. Amazon Web Services KMS CMKs are specific to the Amazon Web Services Region that they are created in, and you can't use CMKs from one Amazon Web Services Region in another Amazon Web Services Region. If you copy an unencrypted DB cluster snapshot and specify a value for the KmsKeyId parameter, an error is returned.
        public let kmsKeyId: String?
        /// The URL that contains a Signature Version 4 signed request for the CopyDBClusterSnapshot API action in the Amazon Web Services Region that contains the source DB cluster snapshot to copy. The PreSignedUrl parameter must be used when copying an encrypted DB cluster snapshot from another Amazon Web Services Region. Don't specify PreSignedUrl when you are copying an encrypted DB cluster snapshot in the same Amazon Web Services Region. The pre-signed URL must be a valid request for the CopyDBClusterSnapshot API action that can be executed in the source Amazon Web Services Region that contains the encrypted DB cluster snapshot to be copied. The pre-signed URL request must contain the following parameter values:    KmsKeyId - The Amazon Web Services KMS key identifier for the customer master key (CMK) to use to encrypt the copy of the DB cluster snapshot in the destination Amazon Web Services Region. This is the same identifier for both the CopyDBClusterSnapshot action that is called in the destination Amazon Web Services Region, and the action contained in the pre-signed URL.    DestinationRegion - The name of the Amazon Web Services Region that the DB cluster snapshot is to be created in.    SourceDBClusterSnapshotIdentifier - The DB cluster snapshot identifier for the encrypted DB cluster snapshot to be copied. This identifier must be in the Amazon Resource Name (ARN) format for the source Amazon Web Services Region. For example, if you are copying an encrypted DB cluster snapshot from the us-west-2 Amazon Web Services Region, then your SourceDBClusterSnapshotIdentifier looks like the following example: arn:aws:rds:us-west-2:123456789012:cluster-snapshot:aurora-cluster1-snapshot-20161115.   To learn how to generate a Signature Version 4 signed request, see  Authenticating Requests: Using Query Parameters (Amazon Web Services Signature Version 4) and  Signature Version 4 Signing Process.  If you are using an Amazon Web Services SDK tool or the CLI, you can specify SourceRegion (or --source-region for the CLI) instead of specifying PreSignedUrl manually. Specifying SourceRegion autogenerates a pre-signed URL that is a valid request for the operation that can be executed in the source Amazon Web Services Region.
        public let preSignedUrl: String?
        /// The identifier of the DB cluster snapshot to copy. This parameter isn't case-sensitive. You can't copy an encrypted, shared DB cluster snapshot from one Amazon Web Services Region to another. Constraints:   Must specify a valid system snapshot in the "available" state.   If the source snapshot is in the same Amazon Web Services Region as the copy, specify a valid DB snapshot identifier.   If the source snapshot is in a different Amazon Web Services Region than the copy, specify a valid DB cluster snapshot ARN. For more information, go to  Copying Snapshots Across Amazon Web Services Regions in the Amazon Aurora User Guide.    Example: my-cluster-snapshot1
        public let sourceDBClusterSnapshotIdentifier: String
        @OptionalCustomCoding<ArrayCoder<_TagsEncoding, Tag>>
        public var tags: [Tag]?
        /// The identifier of the new DB cluster snapshot to create from the source DB cluster snapshot. This parameter isn't case-sensitive. Constraints:   Must contain from 1 to 63 letters, numbers, or hyphens.   First character must be a letter.   Can't end with a hyphen or contain two consecutive hyphens.   Example: my-cluster-snapshot2
        public let targetDBClusterSnapshotIdentifier: String

        public init(copyTags: Bool? = nil, kmsKeyId: String? = nil, preSignedUrl: String? = nil, sourceDBClusterSnapshotIdentifier: String, tags: [Tag]? = nil, targetDBClusterSnapshotIdentifier: String) {
            self.copyTags = copyTags
            self.kmsKeyId = kmsKeyId
            self.preSignedUrl = preSignedUrl
            self.sourceDBClusterSnapshotIdentifier = sourceDBClusterSnapshotIdentifier
            self.tags = tags
            self.targetDBClusterSnapshotIdentifier = targetDBClusterSnapshotIdentifier
        }

        private enum CodingKeys: String, CodingKey {
            case copyTags = "CopyTags"
            case kmsKeyId = "KmsKeyId"
            case preSignedUrl = "PreSignedUrl"
            case sourceDBClusterSnapshotIdentifier = "SourceDBClusterSnapshotIdentifier"
            case tags = "Tags"
            case targetDBClusterSnapshotIdentifier = "TargetDBClusterSnapshotIdentifier"
        }
    }

    public struct CopyDBClusterSnapshotResult: AWSDecodableShape {
        public let dBClusterSnapshot: DBClusterSnapshot?

        public init(dBClusterSnapshot: DBClusterSnapshot? = nil) {
            self.dBClusterSnapshot = dBClusterSnapshot
        }

        private enum CodingKeys: String, CodingKey {
            case dBClusterSnapshot = "DBClusterSnapshot"
        }
    }

    public struct CopyDBParameterGroupMessage: AWSEncodableShape {
        public struct _TagsEncoding: ArrayCoderProperties { public static let member = "Tag" }

        ///  The identifier or ARN for the source DB parameter group. For information about creating an ARN, see  Constructing an ARN for Amazon RDS in the Amazon RDS User Guide.  Constraints:   Must specify a valid DB parameter group.
        public let sourceDBParameterGroupIdentifier: String
        @OptionalCustomCoding<ArrayCoder<_TagsEncoding, Tag>>
        public var tags: [Tag]?
        /// A description for the copied DB parameter group.
        public let targetDBParameterGroupDescription: String
        /// The identifier for the copied DB parameter group. Constraints:   Can't be null, empty, or blank   Must contain from 1 to 255 letters, numbers, or hyphens   First character must be a letter   Can't end with a hyphen or contain two consecutive hyphens   Example: my-db-parameter-group
        public let targetDBParameterGroupIdentifier: String

        public init(sourceDBParameterGroupIdentifier: String, tags: [Tag]? = nil, targetDBParameterGroupDescription: String, targetDBParameterGroupIdentifier: String) {
            self.sourceDBParameterGroupIdentifier = sourceDBParameterGroupIdentifier
            self.tags = tags
            self.targetDBParameterGroupDescription = targetDBParameterGroupDescription
            self.targetDBParameterGroupIdentifier = targetDBParameterGroupIdentifier
        }

        private enum CodingKeys: String, CodingKey {
            case sourceDBParameterGroupIdentifier = "SourceDBParameterGroupIdentifier"
            case tags = "Tags"
            case targetDBParameterGroupDescription = "TargetDBParameterGroupDescription"
            case targetDBParameterGroupIdentifier = "TargetDBParameterGroupIdentifier"
        }
    }

    public struct CopyDBParameterGroupResult: AWSDecodableShape {
        public let dBParameterGroup: DBParameterGroup?

        public init(dBParameterGroup: DBParameterGroup? = nil) {
            self.dBParameterGroup = dBParameterGroup
        }

        private enum CodingKeys: String, CodingKey {
            case dBParameterGroup = "DBParameterGroup"
        }
    }

    public struct CopyDBSnapshotMessage: AWSEncodableShape {
        public struct _TagsEncoding: ArrayCoderProperties { public static let member = "Tag" }

        /// A value that indicates whether to copy all tags from the source DB snapshot to the target DB snapshot. By default, tags are not copied.
        public let copyTags: Bool?
        /// The Amazon Web Services KMS key identifier for an encrypted DB snapshot. The Amazon Web Services KMS key identifier is the key ARN, key ID, alias ARN, or alias name for the Amazon Web Services KMS customer master key (CMK).  If you copy an encrypted DB snapshot from your Amazon Web Services account, you can specify a value for this parameter to encrypt the copy with a new Amazon Web Services KMS CMK. If you don't specify a value for this parameter, then the copy of the DB snapshot is encrypted with the same Amazon Web Services KMS key as the source DB snapshot.  If you copy an encrypted DB snapshot that is shared from another Amazon Web Services account, then you must specify a value for this parameter.  If you specify this parameter when you copy an unencrypted snapshot, the copy is encrypted.  If you copy an encrypted snapshot to a different Amazon Web Services Region, then you must specify a Amazon Web Services KMS key identifier for the destination Amazon Web Services Region. Amazon Web Services KMS CMKs are specific to the Amazon Web Services Region that they are created in, and you can't use CMKs from one Amazon Web Services Region in another Amazon Web Services Region.
        public let kmsKeyId: String?
        /// The name of an option group to associate with the copy of the snapshot. Specify this option if you are copying a snapshot from one Amazon Web Services Region to another, and your DB instance uses a nondefault option group. If your source DB instance uses Transparent Data Encryption for Oracle or Microsoft SQL Server, you must specify this option when copying across Amazon Web Services Regions. For more information, see Option group considerations in the Amazon RDS User Guide.
        public let optionGroupName: String?
        /// The URL that contains a Signature Version 4 signed request for the CopyDBSnapshot API action in the source Amazon Web Services Region that contains the source DB snapshot to copy.  You must specify this parameter when you copy an encrypted DB snapshot from another Amazon Web Services Region by using the Amazon RDS API. Don't specify PreSignedUrl when you are copying an encrypted DB snapshot in the same Amazon Web Services Region. The presigned URL must be a valid request for the CopyDBSnapshot API action that can be executed in the source Amazon Web Services Region that contains the encrypted DB snapshot to be copied. The presigned URL request must contain the following parameter values:     DestinationRegion - The Amazon Web Services Region that the encrypted DB snapshot is copied to. This Amazon Web Services Region is the same one where the CopyDBSnapshot action is called that contains this presigned URL.  For example, if you copy an encrypted DB snapshot from the us-west-2 Amazon Web Services Region to the us-east-1 Amazon Web Services Region, then you call the CopyDBSnapshot action in the us-east-1 Amazon Web Services Region and provide a presigned URL that contains a call to the CopyDBSnapshot action in the us-west-2 Amazon Web Services Region. For this example, the DestinationRegion in the presigned URL must be set to the us-east-1 Amazon Web Services Region.     KmsKeyId - The Amazon Web Services KMS key identifier for the customer master key (CMK) to use to encrypt the copy of the DB snapshot in the destination Amazon Web Services Region. This is the same identifier for both the CopyDBSnapshot action that is called in the destination Amazon Web Services Region, and the action contained in the presigned URL.     SourceDBSnapshotIdentifier - The DB snapshot identifier for the encrypted snapshot to be copied. This identifier must be in the Amazon Resource Name (ARN) format for the source Amazon Web Services Region. For example, if you are copying an encrypted DB snapshot from the us-west-2 Amazon Web Services Region, then your SourceDBSnapshotIdentifier looks like the following example: arn:aws:rds:us-west-2:123456789012:snapshot:mysql-instance1-snapshot-20161115.    To learn how to generate a Signature Version 4 signed request, see Authenticating Requests: Using Query Parameters (Amazon Web Services Signature Version 4) and Signature Version 4 Signing Process.   If you are using an Amazon Web Services SDK tool or the CLI, you can specify SourceRegion (or --source-region for the CLI) instead of specifying PreSignedUrl manually. Specifying SourceRegion autogenerates a pre-signed URL that is a valid request for the operation that can be executed in the source Amazon Web Services Region.
        public let preSignedUrl: String?
        /// The identifier for the source DB snapshot. If the source snapshot is in the same Amazon Web Services Region as the copy, specify a valid DB snapshot identifier. For example, you might specify rds:mysql-instance1-snapshot-20130805.  If the source snapshot is in a different Amazon Web Services Region than the copy, specify a valid DB snapshot ARN. For example, you might specify arn:aws:rds:us-west-2:123456789012:snapshot:mysql-instance1-snapshot-20130805.  If you are copying from a shared manual DB snapshot, this parameter must be the Amazon Resource Name (ARN) of the shared DB snapshot.  If you are copying an encrypted snapshot this parameter must be in the ARN format for the source Amazon Web Services Region, and must match the SourceDBSnapshotIdentifier in the PreSignedUrl parameter.  Constraints:   Must specify a valid system snapshot in the "available" state.   Example: rds:mydb-2012-04-02-00-01  Example: arn:aws:rds:us-west-2:123456789012:snapshot:mysql-instance1-snapshot-20130805
        public let sourceDBSnapshotIdentifier: String
        @OptionalCustomCoding<ArrayCoder<_TagsEncoding, Tag>>
        public var tags: [Tag]?
        /// The external custom Availability Zone (CAZ) identifier for the target CAZ. Example: rds-caz-aiqhTgQv.
        public let targetCustomAvailabilityZone: String?
        /// The identifier for the copy of the snapshot.  Constraints:   Can't be null, empty, or blank   Must contain from 1 to 255 letters, numbers, or hyphens   First character must be a letter   Can't end with a hyphen or contain two consecutive hyphens   Example: my-db-snapshot
        public let targetDBSnapshotIdentifier: String

        public init(copyTags: Bool? = nil, kmsKeyId: String? = nil, optionGroupName: String? = nil, preSignedUrl: String? = nil, sourceDBSnapshotIdentifier: String, tags: [Tag]? = nil, targetCustomAvailabilityZone: String? = nil, targetDBSnapshotIdentifier: String) {
            self.copyTags = copyTags
            self.kmsKeyId = kmsKeyId
            self.optionGroupName = optionGroupName
            self.preSignedUrl = preSignedUrl
            self.sourceDBSnapshotIdentifier = sourceDBSnapshotIdentifier
            self.tags = tags
            self.targetCustomAvailabilityZone = targetCustomAvailabilityZone
            self.targetDBSnapshotIdentifier = targetDBSnapshotIdentifier
        }

        private enum CodingKeys: String, CodingKey {
            case copyTags = "CopyTags"
            case kmsKeyId = "KmsKeyId"
            case optionGroupName = "OptionGroupName"
            case preSignedUrl = "PreSignedUrl"
            case sourceDBSnapshotIdentifier = "SourceDBSnapshotIdentifier"
            case tags = "Tags"
            case targetCustomAvailabilityZone = "TargetCustomAvailabilityZone"
            case targetDBSnapshotIdentifier = "TargetDBSnapshotIdentifier"
        }
    }

    public struct CopyDBSnapshotResult: AWSDecodableShape {
        public let dBSnapshot: DBSnapshot?

        public init(dBSnapshot: DBSnapshot? = nil) {
            self.dBSnapshot = dBSnapshot
        }

        private enum CodingKeys: String, CodingKey {
            case dBSnapshot = "DBSnapshot"
        }
    }

    public struct CopyOptionGroupMessage: AWSEncodableShape {
        public struct _TagsEncoding: ArrayCoderProperties { public static let member = "Tag" }

        /// The identifier for the source option group.  Constraints:   Must specify a valid option group.
        public let sourceOptionGroupIdentifier: String
        @OptionalCustomCoding<ArrayCoder<_TagsEncoding, Tag>>
        public var tags: [Tag]?
        /// The description for the copied option group.
        public let targetOptionGroupDescription: String
        /// The identifier for the copied option group. Constraints:   Can't be null, empty, or blank   Must contain from 1 to 255 letters, numbers, or hyphens   First character must be a letter   Can't end with a hyphen or contain two consecutive hyphens   Example: my-option-group
        public let targetOptionGroupIdentifier: String

        public init(sourceOptionGroupIdentifier: String, tags: [Tag]? = nil, targetOptionGroupDescription: String, targetOptionGroupIdentifier: String) {
            self.sourceOptionGroupIdentifier = sourceOptionGroupIdentifier
            self.tags = tags
            self.targetOptionGroupDescription = targetOptionGroupDescription
            self.targetOptionGroupIdentifier = targetOptionGroupIdentifier
        }

        private enum CodingKeys: String, CodingKey {
            case sourceOptionGroupIdentifier = "SourceOptionGroupIdentifier"
            case tags = "Tags"
            case targetOptionGroupDescription = "TargetOptionGroupDescription"
            case targetOptionGroupIdentifier = "TargetOptionGroupIdentifier"
        }
    }

    public struct CopyOptionGroupResult: AWSDecodableShape {
        public let optionGroup: OptionGroup?

        public init(optionGroup: OptionGroup? = nil) {
            self.optionGroup = optionGroup
        }

        private enum CodingKeys: String, CodingKey {
            case optionGroup = "OptionGroup"
        }
    }

    public struct CreateCustomAvailabilityZoneMessage: AWSEncodableShape {
        /// The name of the custom Availability Zone (AZ).
        public let customAvailabilityZoneName: String
        /// The ID of an existing virtual private network (VPN) between the Amazon RDS website and the VMware vSphere cluster.
        public let existingVpnId: String?
        /// The name of a new VPN tunnel between the Amazon RDS website and the VMware vSphere cluster. Specify this parameter only if ExistingVpnId isn't specified.
        public let newVpnTunnelName: String?
        /// The IP address of network traffic from your on-premises data center. A custom AZ receives the network traffic. Specify this parameter only if ExistingVpnId isn't specified.
        public let vpnTunnelOriginatorIP: String?

        public init(customAvailabilityZoneName: String, existingVpnId: String? = nil, newVpnTunnelName: String? = nil, vpnTunnelOriginatorIP: String? = nil) {
            self.customAvailabilityZoneName = customAvailabilityZoneName
            self.existingVpnId = existingVpnId
            self.newVpnTunnelName = newVpnTunnelName
            self.vpnTunnelOriginatorIP = vpnTunnelOriginatorIP
        }

        private enum CodingKeys: String, CodingKey {
            case customAvailabilityZoneName = "CustomAvailabilityZoneName"
            case existingVpnId = "ExistingVpnId"
            case newVpnTunnelName = "NewVpnTunnelName"
            case vpnTunnelOriginatorIP = "VpnTunnelOriginatorIP"
        }
    }

    public struct CreateCustomAvailabilityZoneResult: AWSDecodableShape {
        public let customAvailabilityZone: CustomAvailabilityZone?

        public init(customAvailabilityZone: CustomAvailabilityZone? = nil) {
            self.customAvailabilityZone = customAvailabilityZone
        }

        private enum CodingKeys: String, CodingKey {
            case customAvailabilityZone = "CustomAvailabilityZone"
        }
    }

    public struct CreateDBClusterEndpointMessage: AWSEncodableShape {
        public struct _TagsEncoding: ArrayCoderProperties { public static let member = "Tag" }

        /// The identifier to use for the new endpoint. This parameter is stored as a lowercase string.
        public let dBClusterEndpointIdentifier: String
        /// The DB cluster identifier of the DB cluster associated with the endpoint. This parameter is stored as a lowercase string.
        public let dBClusterIdentifier: String
        /// The type of the endpoint. One of: READER, WRITER, ANY.
        public let endpointType: String
        /// List of DB instance identifiers that aren't part of the custom endpoint group. All other eligible instances are reachable through the custom endpoint. Only relevant if the list of static members is empty.
        @OptionalCustomCoding<StandardArrayCoder>
        public var excludedMembers: [String]?
        /// List of DB instance identifiers that are part of the custom endpoint group.
        @OptionalCustomCoding<StandardArrayCoder>
        public var staticMembers: [String]?
        /// The tags to be assigned to the Amazon RDS resource.
        @OptionalCustomCoding<ArrayCoder<_TagsEncoding, Tag>>
        public var tags: [Tag]?

        public init(dBClusterEndpointIdentifier: String, dBClusterIdentifier: String, endpointType: String, excludedMembers: [String]? = nil, staticMembers: [String]? = nil, tags: [Tag]? = nil) {
            self.dBClusterEndpointIdentifier = dBClusterEndpointIdentifier
            self.dBClusterIdentifier = dBClusterIdentifier
            self.endpointType = endpointType
            self.excludedMembers = excludedMembers
            self.staticMembers = staticMembers
            self.tags = tags
        }

        private enum CodingKeys: String, CodingKey {
            case dBClusterEndpointIdentifier = "DBClusterEndpointIdentifier"
            case dBClusterIdentifier = "DBClusterIdentifier"
            case endpointType = "EndpointType"
            case excludedMembers = "ExcludedMembers"
            case staticMembers = "StaticMembers"
            case tags = "Tags"
        }
    }

    public struct CreateDBClusterMessage: AWSEncodableShape {
        public struct _AvailabilityZonesEncoding: ArrayCoderProperties { public static let member = "AvailabilityZone" }
        public struct _TagsEncoding: ArrayCoderProperties { public static let member = "Tag" }
        public struct _VpcSecurityGroupIdsEncoding: ArrayCoderProperties { public static let member = "VpcSecurityGroupId" }

        /// A list of Availability Zones (AZs) where instances in the DB cluster can be created. For information on Amazon Web Services Regions and Availability Zones, see Choosing the Regions and Availability Zones in the Amazon Aurora User Guide.
        @OptionalCustomCoding<ArrayCoder<_AvailabilityZonesEncoding, String>>
        public var availabilityZones: [String]?
        /// The target backtrack window, in seconds. To disable backtracking, set this value to 0.   Currently, Backtrack is only supported for Aurora MySQL DB clusters.  Default: 0 Constraints:   If specified, this value must be set to a number from 0 to 259,200 (72 hours).
        public let backtrackWindow: Int64?
        /// The number of days for which automated backups are retained. Default: 1 Constraints:   Must be a value from 1 to 35
        public let backupRetentionPeriod: Int?
        /// A value that indicates that the DB cluster should be associated with the specified CharacterSet.
        public let characterSetName: String?
        /// A value that indicates whether to copy all tags from the DB cluster to snapshots of the DB cluster. The default is not to copy them.
        public let copyTagsToSnapshot: Bool?
        /// The name for your database of up to 64 alphanumeric characters. If you do not provide a name, Amazon RDS doesn't create a database in the DB cluster you are creating.
        public let databaseName: String?
        /// The DB cluster identifier. This parameter is stored as a lowercase string. Constraints:   Must contain from 1 to 63 letters, numbers, or hyphens.   First character must be a letter.   Can't end with a hyphen or contain two consecutive hyphens.   Example: my-cluster1
        public let dBClusterIdentifier: String
        ///  The name of the DB cluster parameter group to associate with this DB cluster. If you do not specify a value, then the default DB cluster parameter group for the specified DB engine and version is used.  Constraints:   If supplied, must match the name of an existing DB cluster parameter group.
        public let dBClusterParameterGroupName: String?
        /// A DB subnet group to associate with this DB cluster. Constraints: Must match the name of an existing DBSubnetGroup. Must not be default. Example: mySubnetgroup
        public let dBSubnetGroupName: String?
        /// A value that indicates whether the DB cluster has deletion protection enabled. The database can't be deleted when deletion protection is enabled. By default, deletion protection is disabled.
        public let deletionProtection: Bool?
        /// The Active Directory directory ID to create the DB cluster in.  For Amazon Aurora DB clusters, Amazon RDS can use Kerberos Authentication to authenticate users that connect to the DB cluster. For more information, see Kerberos Authentication in the Amazon Aurora User Guide.
        public let domain: String?
        /// Specify the name of the IAM role to be used when making API calls to the Directory Service.
        public let domainIAMRoleName: String?
        /// The list of log types that need to be enabled for exporting to CloudWatch Logs. The values in the list depend on the DB engine being used. For more information, see Publishing Database Logs to Amazon CloudWatch Logs in the Amazon Aurora User Guide.  Aurora MySQL  Possible values are audit, error, general, and slowquery.   Aurora PostgreSQL  Possible value is postgresql.
        @OptionalCustomCoding<StandardArrayCoder>
        public var enableCloudwatchLogsExports: [String]?
        /// A value that indicates whether to enable this DB cluster to forward write operations to the primary cluster of an Aurora global database (GlobalCluster). By default, write operations are not allowed on Aurora DB clusters that are secondary clusters in an Aurora global database. You can set this value only on Aurora DB clusters that are members of an Aurora global database. With this parameter enabled, a secondary cluster can forward writes to the current primary cluster and the resulting changes are replicated back to this cluster. For the primary DB cluster of an Aurora global database, this value is used immediately if the primary is demoted by the FailoverGlobalCluster API operation, but it does nothing until then.
        public let enableGlobalWriteForwarding: Bool?
        /// A value that indicates whether to enable the HTTP endpoint for an Aurora Serverless DB cluster. By default, the HTTP endpoint is disabled. When enabled, the HTTP endpoint provides a connectionless web service API for running SQL queries on the Aurora Serverless DB cluster. You can also query your database from inside the RDS console with the query editor. For more information, see Using the Data API for Aurora Serverless in the Amazon Aurora User Guide.
        public let enableHttpEndpoint: Bool?
        /// A value that indicates whether to enable mapping of Amazon Web Services Identity and Access Management (IAM) accounts to database accounts. By default, mapping is disabled. For more information, see  IAM Database Authentication in the Amazon Aurora User Guide.
        public let enableIAMDatabaseAuthentication: Bool?
        /// The name of the database engine to be used for this DB cluster. Valid Values: aurora (for MySQL 5.6-compatible Aurora), aurora-mysql (for MySQL 5.7-compatible Aurora), and aurora-postgresql
        public let engine: String
        /// The DB engine mode of the DB cluster, either provisioned, serverless, parallelquery, global, or multimaster. The parallelquery engine mode isn't required for Aurora MySQL version 1.23 and higher 1.x versions, and version 2.09 and higher 2.x versions. The global engine mode isn't required for Aurora MySQL version 1.22 and higher 1.x versions, and global engine mode isn't required for any 2.x versions. The multimaster engine mode only applies for DB clusters created with Aurora MySQL version 5.6.10a. For Aurora PostgreSQL, the global engine mode isn't required, and both the parallelquery and the multimaster engine modes currently aren't supported. Limitations and requirements apply to some DB engine modes. For more information, see the following sections in the Amazon Aurora User Guide:     Limitations of Aurora Serverless      Limitations of Parallel Query      Limitations of Aurora Global Databases      Limitations of Multi-Master Clusters
        public let engineMode: String?
        /// The version number of the database engine to use. To list all of the available engine versions for aurora (for MySQL 5.6-compatible Aurora), use the following command:  aws rds describe-db-engine-versions --engine aurora --query "DBEngineVersions[].EngineVersion"  To list all of the available engine versions for aurora-mysql (for MySQL 5.7-compatible Aurora), use the following command:  aws rds describe-db-engine-versions --engine aurora-mysql --query "DBEngineVersions[].EngineVersion"  To list all of the available engine versions for aurora-postgresql, use the following command:  aws rds describe-db-engine-versions --engine aurora-postgresql --query "DBEngineVersions[].EngineVersion"   Aurora MySQL  Example: 5.6.10a, 5.6.mysql_aurora.1.19.2, 5.7.12, 5.7.mysql_aurora.2.04.5   Aurora PostgreSQL  Example: 9.6.3, 10.7
        public let engineVersion: String?
        ///  The global cluster ID of an Aurora cluster that becomes the primary cluster in the new global database cluster.
        public let globalClusterIdentifier: String?
        /// The Amazon Web Services KMS key identifier for an encrypted DB cluster. The Amazon Web Services KMS key identifier is the key ARN, key ID, alias ARN, or alias name for the Amazon Web Services KMS customer master key (CMK). To use a CMK in a different Amazon Web Services account, specify the key ARN or alias ARN. When a CMK isn't specified in KmsKeyId:   If ReplicationSourceIdentifier identifies an encrypted source, then Amazon RDS will use the CMK used to encrypt the source. Otherwise, Amazon RDS will use your default CMK.    If the StorageEncrypted parameter is enabled and ReplicationSourceIdentifier isn't specified, then Amazon RDS will use your default CMK.   There is a default CMK for your Amazon Web Services account. Your Amazon Web Services account has a different default CMK for each Amazon Web Services Region. If you create a read replica of an encrypted DB cluster in another Amazon Web Services Region, you must set KmsKeyId to a Amazon Web Services KMS key identifier that is valid in the destination Amazon Web Services Region. This CMK is used to encrypt the read replica in that Amazon Web Services Region.
        public let kmsKeyId: String?
        /// The name of the master user for the DB cluster. Constraints:   Must be 1 to 16 letters or numbers.   First character must be a letter.   Can't be a reserved word for the chosen database engine.
        public let masterUsername: String?
        /// The password for the master database user. This password can contain any printable ASCII character except "/", """, or "@". Constraints: Must contain from 8 to 41 characters.
        public let masterUserPassword: String?
        /// A value that indicates that the DB cluster should be associated with the specified option group. Permanent options can't be removed from an option group. The option group can't be removed from a DB cluster once it is associated with a DB cluster.
        public let optionGroupName: String?
        /// The port number on which the instances in the DB cluster accept connections.  Default: 3306 if engine is set as aurora or 5432 if set to aurora-postgresql.
        public let port: Int?
        /// The daily time range during which automated backups are created if automated backups are enabled using the BackupRetentionPeriod parameter.  The default is a 30-minute window selected at random from an 8-hour block of time for each Amazon Web Services Region. To view the time blocks available, see  Backup window in the Amazon Aurora User Guide.  Constraints:   Must be in the format hh24:mi-hh24:mi.   Must be in Universal Coordinated Time (UTC).   Must not conflict with the preferred maintenance window.   Must be at least 30 minutes.
        public let preferredBackupWindow: String?
        /// The weekly time range during which system maintenance can occur, in Universal Coordinated Time (UTC). Format: ddd:hh24:mi-ddd:hh24:mi  The default is a 30-minute window selected at random from an 8-hour block of time for each Amazon Web Services Region, occurring on a random day of the week. To see the time blocks available, see  Adjusting the Preferred DB Cluster Maintenance Window in the Amazon Aurora User Guide.  Valid Days: Mon, Tue, Wed, Thu, Fri, Sat, Sun. Constraints: Minimum 30-minute window.
        public let preferredMaintenanceWindow: String?
        /// A URL that contains a Signature Version 4 signed request for the CreateDBCluster action to be called in the source Amazon Web Services Region where the DB cluster is replicated from. You only need to specify PreSignedUrl when you are performing cross-region replication from an encrypted DB cluster. The pre-signed URL must be a valid request for the CreateDBCluster API action that can be executed in the source Amazon Web Services Region that contains the encrypted DB cluster to be copied. The pre-signed URL request must contain the following parameter values:    KmsKeyId - The Amazon Web Services KMS key identifier for the key to use to encrypt the copy of the DB cluster in the destination Amazon Web Services Region. This should refer to the same Amazon Web Services KMS CMK for both the CreateDBCluster action that is called in the destination Amazon Web Services Region, and the action contained in the pre-signed URL.    DestinationRegion - The name of the Amazon Web Services Region that Aurora read replica will be created in.    ReplicationSourceIdentifier - The DB cluster identifier for the encrypted DB cluster to be copied. This identifier must be in the Amazon Resource Name (ARN) format for the source Amazon Web Services Region. For example, if you are copying an encrypted DB cluster from the us-west-2 Amazon Web Services Region, then your ReplicationSourceIdentifier would look like Example: arn:aws:rds:us-west-2:123456789012:cluster:aurora-cluster1.   To learn how to generate a Signature Version 4 signed request, see  Authenticating Requests: Using Query Parameters (Amazon Web Services Signature Version 4) and  Signature Version 4 Signing Process.  If you are using an Amazon Web Services SDK tool or the CLI, you can specify SourceRegion (or --source-region for the CLI) instead of specifying PreSignedUrl manually. Specifying SourceRegion autogenerates a pre-signed URL that is a valid request for the operation that can be executed in the source Amazon Web Services Region.
        public let preSignedUrl: String?
        /// The Amazon Resource Name (ARN) of the source DB instance or DB cluster if this DB cluster is created as a read replica.
        public let replicationSourceIdentifier: String?
        /// For DB clusters in serverless DB engine mode, the scaling properties of the DB cluster.
        public let scalingConfiguration: ScalingConfiguration?
        /// A value that indicates whether the DB cluster is encrypted.
        public let storageEncrypted: Bool?
        /// Tags to assign to the DB cluster.
        @OptionalCustomCoding<ArrayCoder<_TagsEncoding, Tag>>
        public var tags: [Tag]?
        /// A list of EC2 VPC security groups to associate with this DB cluster.
        @OptionalCustomCoding<ArrayCoder<_VpcSecurityGroupIdsEncoding, String>>
        public var vpcSecurityGroupIds: [String]?

        public init(availabilityZones: [String]? = nil, backtrackWindow: Int64? = nil, backupRetentionPeriod: Int? = nil, characterSetName: String? = nil, copyTagsToSnapshot: Bool? = nil, databaseName: String? = nil, dBClusterIdentifier: String, dBClusterParameterGroupName: String? = nil, dBSubnetGroupName: String? = nil, deletionProtection: Bool? = nil, domain: String? = nil, domainIAMRoleName: String? = nil, enableCloudwatchLogsExports: [String]? = nil, enableGlobalWriteForwarding: Bool? = nil, enableHttpEndpoint: Bool? = nil, enableIAMDatabaseAuthentication: Bool? = nil, engine: String, engineMode: String? = nil, engineVersion: String? = nil, globalClusterIdentifier: String? = nil, kmsKeyId: String? = nil, masterUsername: String? = nil, masterUserPassword: String? = nil, optionGroupName: String? = nil, port: Int? = nil, preferredBackupWindow: String? = nil, preferredMaintenanceWindow: String? = nil, preSignedUrl: String? = nil, replicationSourceIdentifier: String? = nil, scalingConfiguration: ScalingConfiguration? = nil, storageEncrypted: Bool? = nil, tags: [Tag]? = nil, vpcSecurityGroupIds: [String]? = nil) {
            self.availabilityZones = availabilityZones
            self.backtrackWindow = backtrackWindow
            self.backupRetentionPeriod = backupRetentionPeriod
            self.characterSetName = characterSetName
            self.copyTagsToSnapshot = copyTagsToSnapshot
            self.databaseName = databaseName
            self.dBClusterIdentifier = dBClusterIdentifier
            self.dBClusterParameterGroupName = dBClusterParameterGroupName
            self.dBSubnetGroupName = dBSubnetGroupName
            self.deletionProtection = deletionProtection
            self.domain = domain
            self.domainIAMRoleName = domainIAMRoleName
            self.enableCloudwatchLogsExports = enableCloudwatchLogsExports
            self.enableGlobalWriteForwarding = enableGlobalWriteForwarding
            self.enableHttpEndpoint = enableHttpEndpoint
            self.enableIAMDatabaseAuthentication = enableIAMDatabaseAuthentication
            self.engine = engine
            self.engineMode = engineMode
            self.engineVersion = engineVersion
            self.globalClusterIdentifier = globalClusterIdentifier
            self.kmsKeyId = kmsKeyId
            self.masterUsername = masterUsername
            self.masterUserPassword = masterUserPassword
            self.optionGroupName = optionGroupName
            self.port = port
            self.preferredBackupWindow = preferredBackupWindow
            self.preferredMaintenanceWindow = preferredMaintenanceWindow
            self.preSignedUrl = preSignedUrl
            self.replicationSourceIdentifier = replicationSourceIdentifier
            self.scalingConfiguration = scalingConfiguration
            self.storageEncrypted = storageEncrypted
            self.tags = tags
            self.vpcSecurityGroupIds = vpcSecurityGroupIds
        }

        private enum CodingKeys: String, CodingKey {
            case availabilityZones = "AvailabilityZones"
            case backtrackWindow = "BacktrackWindow"
            case backupRetentionPeriod = "BackupRetentionPeriod"
            case characterSetName = "CharacterSetName"
            case copyTagsToSnapshot = "CopyTagsToSnapshot"
            case databaseName = "DatabaseName"
            case dBClusterIdentifier = "DBClusterIdentifier"
            case dBClusterParameterGroupName = "DBClusterParameterGroupName"
            case dBSubnetGroupName = "DBSubnetGroupName"
            case deletionProtection = "DeletionProtection"
            case domain = "Domain"
            case domainIAMRoleName = "DomainIAMRoleName"
            case enableCloudwatchLogsExports = "EnableCloudwatchLogsExports"
            case enableGlobalWriteForwarding = "EnableGlobalWriteForwarding"
            case enableHttpEndpoint = "EnableHttpEndpoint"
            case enableIAMDatabaseAuthentication = "EnableIAMDatabaseAuthentication"
            case engine = "Engine"
            case engineMode = "EngineMode"
            case engineVersion = "EngineVersion"
            case globalClusterIdentifier = "GlobalClusterIdentifier"
            case kmsKeyId = "KmsKeyId"
            case masterUsername = "MasterUsername"
            case masterUserPassword = "MasterUserPassword"
            case optionGroupName = "OptionGroupName"
            case port = "Port"
            case preferredBackupWindow = "PreferredBackupWindow"
            case preferredMaintenanceWindow = "PreferredMaintenanceWindow"
            case preSignedUrl = "PreSignedUrl"
            case replicationSourceIdentifier = "ReplicationSourceIdentifier"
            case scalingConfiguration = "ScalingConfiguration"
            case storageEncrypted = "StorageEncrypted"
            case tags = "Tags"
            case vpcSecurityGroupIds = "VpcSecurityGroupIds"
        }
    }

    public struct CreateDBClusterParameterGroupMessage: AWSEncodableShape {
        public struct _TagsEncoding: ArrayCoderProperties { public static let member = "Tag" }

        /// The name of the DB cluster parameter group. Constraints:   Must match the name of an existing DB cluster parameter group.    This value is stored as a lowercase string.
        public let dBClusterParameterGroupName: String
        /// The DB cluster parameter group family name. A DB cluster parameter group can be associated with one and only one DB cluster parameter group family, and can be applied only to a DB cluster running a database engine and engine version compatible with that DB cluster parameter group family.  Aurora MySQL  Example: aurora5.6, aurora-mysql5.7   Aurora PostgreSQL  Example: aurora-postgresql9.6  To list all of the available parameter group families for a DB engine, use the following command:  aws rds describe-db-engine-versions --query "DBEngineVersions[].DBParameterGroupFamily" --engine &lt;engine&gt;  For example, to list all of the available parameter group families for the Aurora PostgreSQL DB engine, use the following command:  aws rds describe-db-engine-versions --query "DBEngineVersions[].DBParameterGroupFamily" --engine aurora-postgresql   The output contains duplicates.  The following are the valid DB engine values:    aurora (for MySQL 5.6-compatible Aurora)    aurora-mysql (for MySQL 5.7-compatible Aurora)    aurora-postgresql
        public let dBParameterGroupFamily: String
        /// The description for the DB cluster parameter group.
        public let description: String
        /// Tags to assign to the DB cluster parameter group.
        @OptionalCustomCoding<ArrayCoder<_TagsEncoding, Tag>>
        public var tags: [Tag]?

        public init(dBClusterParameterGroupName: String, dBParameterGroupFamily: String, description: String, tags: [Tag]? = nil) {
            self.dBClusterParameterGroupName = dBClusterParameterGroupName
            self.dBParameterGroupFamily = dBParameterGroupFamily
            self.description = description
            self.tags = tags
        }

        private enum CodingKeys: String, CodingKey {
            case dBClusterParameterGroupName = "DBClusterParameterGroupName"
            case dBParameterGroupFamily = "DBParameterGroupFamily"
            case description = "Description"
            case tags = "Tags"
        }
    }

    public struct CreateDBClusterParameterGroupResult: AWSDecodableShape {
        public let dBClusterParameterGroup: DBClusterParameterGroup?

        public init(dBClusterParameterGroup: DBClusterParameterGroup? = nil) {
            self.dBClusterParameterGroup = dBClusterParameterGroup
        }

        private enum CodingKeys: String, CodingKey {
            case dBClusterParameterGroup = "DBClusterParameterGroup"
        }
    }

    public struct CreateDBClusterResult: AWSDecodableShape {
        public let dBCluster: DBCluster?

        public init(dBCluster: DBCluster? = nil) {
            self.dBCluster = dBCluster
        }

        private enum CodingKeys: String, CodingKey {
            case dBCluster = "DBCluster"
        }
    }

    public struct CreateDBClusterSnapshotMessage: AWSEncodableShape {
        public struct _TagsEncoding: ArrayCoderProperties { public static let member = "Tag" }

        /// The identifier of the DB cluster to create a snapshot for. This parameter isn't case-sensitive. Constraints:   Must match the identifier of an existing DBCluster.   Example: my-cluster1
        public let dBClusterIdentifier: String
        /// The identifier of the DB cluster snapshot. This parameter is stored as a lowercase string. Constraints:   Must contain from 1 to 63 letters, numbers, or hyphens.   First character must be a letter.   Can't end with a hyphen or contain two consecutive hyphens.   Example: my-cluster1-snapshot1
        public let dBClusterSnapshotIdentifier: String
        /// The tags to be assigned to the DB cluster snapshot.
        @OptionalCustomCoding<ArrayCoder<_TagsEncoding, Tag>>
        public var tags: [Tag]?

        public init(dBClusterIdentifier: String, dBClusterSnapshotIdentifier: String, tags: [Tag]? = nil) {
            self.dBClusterIdentifier = dBClusterIdentifier
            self.dBClusterSnapshotIdentifier = dBClusterSnapshotIdentifier
            self.tags = tags
        }

        private enum CodingKeys: String, CodingKey {
            case dBClusterIdentifier = "DBClusterIdentifier"
            case dBClusterSnapshotIdentifier = "DBClusterSnapshotIdentifier"
            case tags = "Tags"
        }
    }

    public struct CreateDBClusterSnapshotResult: AWSDecodableShape {
        public let dBClusterSnapshot: DBClusterSnapshot?

        public init(dBClusterSnapshot: DBClusterSnapshot? = nil) {
            self.dBClusterSnapshot = dBClusterSnapshot
        }

        private enum CodingKeys: String, CodingKey {
            case dBClusterSnapshot = "DBClusterSnapshot"
        }
    }

    public struct CreateDBInstanceMessage: AWSEncodableShape {
        public struct _DBSecurityGroupsEncoding: ArrayCoderProperties { public static let member = "DBSecurityGroupName" }
        public struct _ProcessorFeaturesEncoding: ArrayCoderProperties { public static let member = "ProcessorFeature" }
        public struct _TagsEncoding: ArrayCoderProperties { public static let member = "Tag" }
        public struct _VpcSecurityGroupIdsEncoding: ArrayCoderProperties { public static let member = "VpcSecurityGroupId" }

        /// The amount of storage (in gibibytes) to allocate for the DB instance. Type: Integer  Amazon Aurora  Not applicable. Aurora cluster volumes automatically grow as the amount of data in your database increases, though you are only charged for the space that you use in an Aurora cluster volume.  MySQL  Constraints to the amount of storage for each storage type are the following:    General Purpose (SSD) storage (gp2): Must be an integer from 20 to 65536.   Provisioned IOPS storage (io1): Must be an integer from 100 to 65536.   Magnetic storage (standard): Must be an integer from 5 to 3072.    MariaDB  Constraints to the amount of storage for each storage type are the following:    General Purpose (SSD) storage (gp2): Must be an integer from 20 to 65536.   Provisioned IOPS storage (io1): Must be an integer from 100 to 65536.   Magnetic storage (standard): Must be an integer from 5 to 3072.    PostgreSQL  Constraints to the amount of storage for each storage type are the following:    General Purpose (SSD) storage (gp2): Must be an integer from 20 to 65536.   Provisioned IOPS storage (io1): Must be an integer from 100 to 65536.   Magnetic storage (standard): Must be an integer from 5 to 3072.    Oracle  Constraints to the amount of storage for each storage type are the following:    General Purpose (SSD) storage (gp2): Must be an integer from 20 to 65536.   Provisioned IOPS storage (io1): Must be an integer from 100 to 65536.   Magnetic storage (standard): Must be an integer from 10 to 3072.    SQL Server  Constraints to the amount of storage for each storage type are the following:    General Purpose (SSD) storage (gp2):   Enterprise and Standard editions: Must be an integer from 200 to 16384.   Web and Express editions: Must be an integer from 20 to 16384.     Provisioned IOPS storage (io1):   Enterprise and Standard editions: Must be an integer from 200 to 16384.   Web and Express editions: Must be an integer from 100 to 16384.     Magnetic storage (standard):   Enterprise and Standard editions: Must be an integer from 200 to 1024.   Web and Express editions: Must be an integer from 20 to 1024.
        public let allocatedStorage: Int?
        /// A value that indicates whether minor engine upgrades are applied automatically to the DB instance during the maintenance window. By default, minor engine upgrades are applied automatically.
        public let autoMinorVersionUpgrade: Bool?
        ///  The Availability Zone (AZ) where the database will be created. For information on Amazon Web Services Regions and Availability Zones, see Regions and Availability Zones.  Default: A random, system-chosen Availability Zone in the endpoint's Amazon Web Services Region.  Example: us-east-1d   Constraint: The AvailabilityZone parameter can't be specified if the DB instance is a Multi-AZ deployment. The specified Availability Zone must be in the same Amazon Web Services Region as the current endpoint.   If you're creating a DB instance in an RDS on VMware environment, specify the identifier of the custom Availability Zone to create the DB instance in. For more information about RDS on VMware, see the  RDS on VMware User Guide.
        public let availabilityZone: String?
        /// The number of days for which automated backups are retained. Setting this parameter to a positive number enables backups. Setting this parameter to 0 disables automated backups.  Amazon Aurora  Not applicable. The retention period for automated backups is managed by the DB cluster. Default: 1 Constraints:   Must be a value from 0 to 35   Can't be set to 0 if the DB instance is a source to read replicas
        public let backupRetentionPeriod: Int?
        /// For supported engines, indicates that the DB instance should be associated with the specified CharacterSet.  Amazon Aurora  Not applicable. The character set is managed by the DB cluster. For more information, see CreateDBCluster.
        public let characterSetName: String?
        /// A value that indicates whether to copy tags from the DB instance to snapshots of the DB instance. By default, tags are not copied.  Amazon Aurora  Not applicable. Copying tags to snapshots is managed by the DB cluster. Setting this value for an Aurora DB instance has no effect on the DB cluster setting.
        public let copyTagsToSnapshot: Bool?
        /// The identifier of the DB cluster that the instance will belong to.
        public let dBClusterIdentifier: String?
        /// The compute and memory capacity of the DB instance, for example, db.m4.large. Not all DB instance classes are available in all Amazon Web Services Regions, or for all database engines. For the full list of DB instance classes, and availability for your engine, see DB Instance Class in the Amazon RDS User Guide.
        public let dBInstanceClass: String
        /// The DB instance identifier. This parameter is stored as a lowercase string. Constraints:   Must contain from 1 to 63 letters, numbers, or hyphens.   First character must be a letter.   Can't end with a hyphen or contain two consecutive hyphens.   Example: mydbinstance
        public let dBInstanceIdentifier: String
        /// The meaning of this parameter differs according to the database engine you use.  MySQL  The name of the database to create when the DB instance is created. If this parameter isn't specified, no database is created in the DB instance. Constraints:   Must contain 1 to 64 letters or numbers.   Must begin with a letter. Subsequent characters can be letters, underscores, or digits (0-9).   Can't be a word reserved by the specified database engine    MariaDB  The name of the database to create when the DB instance is created. If this parameter isn't specified, no database is created in the DB instance. Constraints:   Must contain 1 to 64 letters or numbers.   Must begin with a letter. Subsequent characters can be letters, underscores, or digits (0-9).   Can't be a word reserved by the specified database engine    PostgreSQL  The name of the database to create when the DB instance is created. If this parameter isn't specified, a database named postgres is created in the DB instance. Constraints:   Must contain 1 to 63 letters, numbers, or underscores.   Must begin with a letter. Subsequent characters can be letters, underscores, or digits (0-9).   Can't be a word reserved by the specified database engine    Oracle  The Oracle System ID (SID) of the created DB instance. If you specify null, the default value ORCL is used. You can't specify the string NULL, or any other reserved word, for DBName.  Default: ORCL  Constraints:   Can't be longer than 8 characters    SQL Server  Not applicable. Must be null.  Amazon Aurora MySQL  The name of the database to create when the primary DB instance of the Aurora MySQL DB cluster is created. If this parameter isn't specified for an Aurora MySQL DB cluster, no database is created in the DB cluster. Constraints:   It must contain 1 to 64 alphanumeric characters.   It can't be a word reserved by the database engine.    Amazon Aurora PostgreSQL  The name of the database to create when the primary DB instance of the Aurora PostgreSQL DB cluster is created. If this parameter isn't specified for an Aurora PostgreSQL DB cluster, a database named postgres is created in the DB cluster. Constraints:   It must contain 1 to 63 alphanumeric characters.   It must begin with a letter or an underscore. Subsequent characters can be letters, underscores, or digits (0 to 9).   It can't be a word reserved by the database engine.
        public let dBName: String?
        /// The name of the DB parameter group to associate with this DB instance. If you do not specify a value, then the default DB parameter group for the specified DB engine and version is used. Constraints:   Must be 1 to 255 letters, numbers, or hyphens.   First character must be a letter   Can't end with a hyphen or contain two consecutive hyphens
        public let dBParameterGroupName: String?
        /// A list of DB security groups to associate with this DB instance. Default: The default DB security group for the database engine.
        @OptionalCustomCoding<ArrayCoder<_DBSecurityGroupsEncoding, String>>
        public var dBSecurityGroups: [String]?
        /// A DB subnet group to associate with this DB instance. If there is no DB subnet group, then it is a non-VPC DB instance.
        public let dBSubnetGroupName: String?
        /// A value that indicates whether the DB instance has deletion protection enabled. The database can't be deleted when deletion protection is enabled. By default, deletion protection is disabled. For more information, see  Deleting a DB Instance.   Amazon Aurora  Not applicable. You can enable or disable deletion protection for the DB cluster. For more information, see CreateDBCluster. DB instances in a DB cluster can be deleted even when deletion protection is enabled for the DB cluster.
        public let deletionProtection: Bool?
        /// The Active Directory directory ID to create the DB instance in. Currently, only MySQL, Microsoft SQL Server, Oracle, and PostgreSQL DB instances can be created in an Active Directory Domain. For more information, see  Kerberos Authentication in the Amazon RDS User Guide.
        public let domain: String?
        /// Specify the name of the IAM role to be used when making API calls to the Directory Service.
        public let domainIAMRoleName: String?
        /// The list of log types that need to be enabled for exporting to CloudWatch Logs. The values in the list depend on the DB engine being used. For more information, see Publishing Database Logs to Amazon CloudWatch Logs  in the Amazon Relational Database Service User Guide.  Amazon Aurora  Not applicable. CloudWatch Logs exports are managed by the DB cluster.   MariaDB  Possible values are audit, error, general, and slowquery.   Microsoft SQL Server  Possible values are agent and error.   MySQL  Possible values are audit, error, general, and slowquery.   Oracle  Possible values are alert, audit, listener, trace, and oemagent.   PostgreSQL  Possible values are postgresql and upgrade.
        @OptionalCustomCoding<StandardArrayCoder>
        public var enableCloudwatchLogsExports: [String]?
        /// A value that indicates whether to enable a customer-owned IP address (CoIP) for an RDS on Outposts DB instance. A CoIP provides local or external connectivity to resources in your Outpost subnets through your on-premises network. For some use cases, a CoIP can provide lower latency for connections to the DB instance from outside of its virtual private cloud (VPC) on your local network. For more information about RDS on Outposts, see Working with Amazon RDS on Amazon Web Services Outposts in the Amazon RDS User Guide. For more information about CoIPs, see Customer-owned IP addresses in the Amazon Web Services Outposts User Guide.
        public let enableCustomerOwnedIp: Bool?
        /// A value that indicates whether to enable mapping of Amazon Web Services Identity and Access Management (IAM) accounts to database accounts. By default, mapping is disabled. This setting doesn't apply to Amazon Aurora. Mapping Amazon Web Services IAM accounts to database accounts is managed by the DB cluster. For more information, see  IAM Database Authentication for MySQL and PostgreSQL in the Amazon RDS User Guide.
        public let enableIAMDatabaseAuthentication: Bool?
        /// A value that indicates whether to enable Performance Insights for the DB instance.  For more information, see Using Amazon Performance Insights in the Amazon Relational Database Service User Guide.
        public let enablePerformanceInsights: Bool?
        /// The name of the database engine to be used for this instance.  Not every database engine is available for every Amazon Web Services Region.  Valid Values:     aurora (for MySQL 5.6-compatible Aurora)    aurora-mysql (for MySQL 5.7-compatible Aurora)    aurora-postgresql     mariadb     mysql     oracle-ee     oracle-ee-cdb     oracle-se2     oracle-se2-cdb     postgres     sqlserver-ee     sqlserver-se     sqlserver-ex     sqlserver-web
        public let engine: String
        /// The version number of the database engine to use. For a list of valid engine versions, use the DescribeDBEngineVersions action. The following are the database engines and links to information about the major and minor versions that are available with Amazon RDS. Not every database engine is available for every Amazon Web Services Region.  Amazon Aurora  Not applicable. The version number of the database engine to be used by the DB instance is managed by the DB cluster.  MariaDB  See MariaDB on Amazon RDS Versions in the Amazon RDS User Guide.   Microsoft SQL Server  See Microsoft SQL Server Versions on Amazon RDS in the Amazon RDS User Guide.   MySQL  See MySQL on Amazon RDS Versions in the Amazon RDS User Guide.   Oracle  See Oracle Database Engine Release Notes in the Amazon RDS User Guide.   PostgreSQL  See Amazon RDS for PostgreSQL versions and extensions in the Amazon RDS User Guide.
        public let engineVersion: String?
        /// The amount of Provisioned IOPS (input/output operations per second) to be initially allocated for the DB instance. For information about valid Iops values, see Amazon RDS Provisioned IOPS Storage to Improve Performance in the Amazon RDS User Guide.  Constraints: For MariaDB, MySQL, Oracle, and PostgreSQL DB instances, must be a multiple between .5 and 50 of the storage amount for the DB instance. For SQL Server DB instances, must be a multiple between 1 and 50 of the storage amount for the DB instance.
        public let iops: Int?
        /// The Amazon Web Services KMS key identifier for an encrypted DB instance. The Amazon Web Services KMS key identifier is the key ARN, key ID, alias ARN, or alias name for the Amazon Web Services KMS customer master key (CMK). To use a CMK in a different Amazon Web Services account, specify the key ARN or alias ARN.  Amazon Aurora  Not applicable. The Amazon Web Services KMS key identifier is managed by the DB cluster. For more information, see CreateDBCluster. If StorageEncrypted is enabled, and you do not specify a value for the KmsKeyId parameter, then Amazon RDS uses your default CMK. There is a default CMK for your Amazon Web Services account. Your Amazon Web Services account has a different default CMK for each Amazon Web Services Region.
        public let kmsKeyId: String?
        /// License model information for this DB instance.  Valid values: license-included | bring-your-own-license | general-public-license
        public let licenseModel: String?
        /// The name for the master user.  Amazon Aurora  Not applicable. The name for the master user is managed by the DB cluster.   MariaDB  Constraints:   Required for MariaDB.   Must be 1 to 16 letters or numbers.   Can't be a reserved word for the chosen database engine.    Microsoft SQL Server  Constraints:   Required for SQL Server.   Must be 1 to 128 letters or numbers.   The first character must be a letter.   Can't be a reserved word for the chosen database engine.    MySQL  Constraints:   Required for MySQL.   Must be 1 to 16 letters or numbers.   First character must be a letter.   Can't be a reserved word for the chosen database engine.    Oracle  Constraints:   Required for Oracle.   Must be 1 to 30 letters or numbers.   First character must be a letter.   Can't be a reserved word for the chosen database engine.    PostgreSQL  Constraints:   Required for PostgreSQL.   Must be 1 to 63 letters or numbers.   First character must be a letter.   Can't be a reserved word for the chosen database engine.
        public let masterUsername: String?
        /// The password for the master user. The password can include any printable ASCII character except "/", """, or "@".  Amazon Aurora  Not applicable. The password for the master user is managed by the DB cluster.  MariaDB  Constraints: Must contain from 8 to 41 characters.  Microsoft SQL Server  Constraints: Must contain from 8 to 128 characters.  MySQL  Constraints: Must contain from 8 to 41 characters.  Oracle  Constraints: Must contain from 8 to 30 characters.  PostgreSQL  Constraints: Must contain from 8 to 128 characters.
        public let masterUserPassword: String?
        /// The upper limit to which Amazon RDS can automatically scale the storage of the DB instance. For more information about this setting, including limitations that apply to it, see  Managing capacity automatically with Amazon RDS storage autoscaling in the Amazon RDS User Guide.
        public let maxAllocatedStorage: Int?
        /// The interval, in seconds, between points when Enhanced Monitoring metrics are collected for the DB instance. To disable collecting Enhanced Monitoring metrics, specify 0. The default is 0. If MonitoringRoleArn is specified, then you must also set MonitoringInterval to a value other than 0. Valid Values: 0, 1, 5, 10, 15, 30, 60
        public let monitoringInterval: Int?
        /// The ARN for the IAM role that permits RDS to send enhanced monitoring metrics to Amazon CloudWatch Logs. For example, arn:aws:iam:123456789012:role/emaccess. For information on creating a monitoring role, go to Setting Up and Enabling Enhanced Monitoring in the Amazon RDS User Guide. If MonitoringInterval is set to a value other than 0, then you must supply a MonitoringRoleArn value.
        public let monitoringRoleArn: String?
        /// A value that indicates whether the DB instance is a Multi-AZ deployment. You can't set the AvailabilityZone parameter if the DB instance is a Multi-AZ deployment.
        public let multiAZ: Bool?
        /// The name of the NCHAR character set for the Oracle DB instance.
        public let ncharCharacterSetName: String?
        /// A value that indicates that the DB instance should be associated with the specified option group. Permanent options, such as the TDE option for Oracle Advanced Security TDE, can't be removed from an option group. Also, that option group can't be removed from a DB instance once it is associated with a DB instance
        public let optionGroupName: String?
        /// The Amazon Web Services KMS key identifier for encryption of Performance Insights data. The Amazon Web Services KMS key identifier is the key ARN, key ID, alias ARN, or alias name for the Amazon Web Services KMS customer master key (CMK). If you do not specify a value for PerformanceInsightsKMSKeyId, then Amazon RDS uses your default CMK. There is a default CMK for your Amazon Web Services account. Your Amazon Web Services account has a different default CMK for each Amazon Web Services Region.
        public let performanceInsightsKMSKeyId: String?
        /// The amount of time, in days, to retain Performance Insights data. Valid values are 7 or 731 (2 years).
        public let performanceInsightsRetentionPeriod: Int?
        /// The port number on which the database accepts connections.  MySQL   Default: 3306   Valid values: 1150-65535  Type: Integer  MariaDB   Default: 3306   Valid values: 1150-65535  Type: Integer  PostgreSQL   Default: 5432   Valid values: 1150-65535  Type: Integer  Oracle   Default: 1521   Valid values: 1150-65535   SQL Server   Default: 1433   Valid values: 1150-65535 except 1234, 1434, 3260, 3343, 3389, 47001, and 49152-49156.  Amazon Aurora   Default: 3306   Valid values: 1150-65535  Type: Integer
        public let port: Int?
        ///  The daily time range during which automated backups are created if automated backups are enabled, using the BackupRetentionPeriod parameter. The default is a 30-minute window selected at random from an 8-hour block of time for each Amazon Web Services Region. For more information, see Backup window in the Amazon RDS User Guide.   Amazon Aurora  Not applicable. The daily time range for creating automated backups is managed by the DB cluster. Constraints:   Must be in the format hh24:mi-hh24:mi.   Must be in Universal Coordinated Time (UTC).   Must not conflict with the preferred maintenance window.   Must be at least 30 minutes.
        public let preferredBackupWindow: String?
        /// The time range each week during which system maintenance can occur, in Universal Coordinated Time (UTC). For more information, see Amazon RDS Maintenance Window.   Format: ddd:hh24:mi-ddd:hh24:mi  The default is a 30-minute window selected at random from an 8-hour block of time for each Amazon Web Services Region, occurring on a random day of the week.  Valid Days: Mon, Tue, Wed, Thu, Fri, Sat, Sun. Constraints: Minimum 30-minute window.
        public let preferredMaintenanceWindow: String?
        /// The number of CPU cores and the number of threads per core for the DB instance class of the DB instance.
        @OptionalCustomCoding<ArrayCoder<_ProcessorFeaturesEncoding, ProcessorFeature>>
        public var processorFeatures: [ProcessorFeature]?
        /// A value that specifies the order in which an Aurora Replica is promoted to the primary instance after a failure of the existing primary instance. For more information, see  Fault Tolerance for an Aurora DB Cluster in the Amazon Aurora User Guide.  Default: 1 Valid Values: 0 - 15
        public let promotionTier: Int?
        /// A value that indicates whether the DB instance is publicly accessible. When the DB instance is publicly accessible, its DNS endpoint resolves to the private IP address from within the DB instance's VPC, and to the public IP address from outside of the DB instance's VPC. Access to the DB instance is ultimately controlled by the security group it uses, and that public access is not permitted if the security group assigned to the DB instance doesn't permit it. When the DB instance isn't publicly accessible, it is an internal DB instance with a DNS name that resolves to a private IP address. Default: The default behavior varies depending on whether DBSubnetGroupName is specified. If DBSubnetGroupName isn't specified, and PubliclyAccessible isn't specified, the following applies:   If the default VPC in the target region doesn’t have an Internet gateway attached to it, the DB instance is private.   If the default VPC in the target region has an Internet gateway attached to it, the DB instance is public.   If DBSubnetGroupName is specified, and PubliclyAccessible isn't specified, the following applies:   If the subnets are part of a VPC that doesn’t have an Internet gateway attached to it, the DB instance is private.   If the subnets are part of a VPC that has an Internet gateway attached to it, the DB instance is public.
        public let publiclyAccessible: Bool?
        /// A value that indicates whether the DB instance is encrypted. By default, it isn't encrypted.  Amazon Aurora  Not applicable. The encryption for DB instances is managed by the DB cluster.
        public let storageEncrypted: Bool?
        /// Specifies the storage type to be associated with the DB instance.  Valid values: standard | gp2 | io1   If you specify io1, you must also include a value for the Iops parameter.   Default: io1 if the Iops parameter is specified, otherwise gp2
        public let storageType: String?
        /// Tags to assign to the DB instance.
        @OptionalCustomCoding<ArrayCoder<_TagsEncoding, Tag>>
        public var tags: [Tag]?
        /// The ARN from the key store with which to associate the instance for TDE encryption.
        public let tdeCredentialArn: String?
        /// The password for the given ARN from the key store in order to access the device.
        public let tdeCredentialPassword: String?
        /// The time zone of the DB instance. The time zone parameter is currently supported only by Microsoft SQL Server.
        public let timezone: String?
        /// A list of Amazon EC2 VPC security groups to associate with this DB instance.  Amazon Aurora  Not applicable. The associated list of EC2 VPC security groups is managed by the DB cluster. Default: The default EC2 VPC security group for the DB subnet group's VPC.
        @OptionalCustomCoding<ArrayCoder<_VpcSecurityGroupIdsEncoding, String>>
        public var vpcSecurityGroupIds: [String]?

        public init(allocatedStorage: Int? = nil, autoMinorVersionUpgrade: Bool? = nil, availabilityZone: String? = nil, backupRetentionPeriod: Int? = nil, characterSetName: String? = nil, copyTagsToSnapshot: Bool? = nil, dBClusterIdentifier: String? = nil, dBInstanceClass: String, dBInstanceIdentifier: String, dBName: String? = nil, dBParameterGroupName: String? = nil, dBSecurityGroups: [String]? = nil, dBSubnetGroupName: String? = nil, deletionProtection: Bool? = nil, domain: String? = nil, domainIAMRoleName: String? = nil, enableCloudwatchLogsExports: [String]? = nil, enableCustomerOwnedIp: Bool? = nil, enableIAMDatabaseAuthentication: Bool? = nil, enablePerformanceInsights: Bool? = nil, engine: String, engineVersion: String? = nil, iops: Int? = nil, kmsKeyId: String? = nil, licenseModel: String? = nil, masterUsername: String? = nil, masterUserPassword: String? = nil, maxAllocatedStorage: Int? = nil, monitoringInterval: Int? = nil, monitoringRoleArn: String? = nil, multiAZ: Bool? = nil, ncharCharacterSetName: String? = nil, optionGroupName: String? = nil, performanceInsightsKMSKeyId: String? = nil, performanceInsightsRetentionPeriod: Int? = nil, port: Int? = nil, preferredBackupWindow: String? = nil, preferredMaintenanceWindow: String? = nil, processorFeatures: [ProcessorFeature]? = nil, promotionTier: Int? = nil, publiclyAccessible: Bool? = nil, storageEncrypted: Bool? = nil, storageType: String? = nil, tags: [Tag]? = nil, tdeCredentialArn: String? = nil, tdeCredentialPassword: String? = nil, timezone: String? = nil, vpcSecurityGroupIds: [String]? = nil) {
            self.allocatedStorage = allocatedStorage
            self.autoMinorVersionUpgrade = autoMinorVersionUpgrade
            self.availabilityZone = availabilityZone
            self.backupRetentionPeriod = backupRetentionPeriod
            self.characterSetName = characterSetName
            self.copyTagsToSnapshot = copyTagsToSnapshot
            self.dBClusterIdentifier = dBClusterIdentifier
            self.dBInstanceClass = dBInstanceClass
            self.dBInstanceIdentifier = dBInstanceIdentifier
            self.dBName = dBName
            self.dBParameterGroupName = dBParameterGroupName
            self.dBSecurityGroups = dBSecurityGroups
            self.dBSubnetGroupName = dBSubnetGroupName
            self.deletionProtection = deletionProtection
            self.domain = domain
            self.domainIAMRoleName = domainIAMRoleName
            self.enableCloudwatchLogsExports = enableCloudwatchLogsExports
            self.enableCustomerOwnedIp = enableCustomerOwnedIp
            self.enableIAMDatabaseAuthentication = enableIAMDatabaseAuthentication
            self.enablePerformanceInsights = enablePerformanceInsights
            self.engine = engine
            self.engineVersion = engineVersion
            self.iops = iops
            self.kmsKeyId = kmsKeyId
            self.licenseModel = licenseModel
            self.masterUsername = masterUsername
            self.masterUserPassword = masterUserPassword
            self.maxAllocatedStorage = maxAllocatedStorage
            self.monitoringInterval = monitoringInterval
            self.monitoringRoleArn = monitoringRoleArn
            self.multiAZ = multiAZ
            self.ncharCharacterSetName = ncharCharacterSetName
            self.optionGroupName = optionGroupName
            self.performanceInsightsKMSKeyId = performanceInsightsKMSKeyId
            self.performanceInsightsRetentionPeriod = performanceInsightsRetentionPeriod
            self.port = port
            self.preferredBackupWindow = preferredBackupWindow
            self.preferredMaintenanceWindow = preferredMaintenanceWindow
            self.processorFeatures = processorFeatures
            self.promotionTier = promotionTier
            self.publiclyAccessible = publiclyAccessible
            self.storageEncrypted = storageEncrypted
            self.storageType = storageType
            self.tags = tags
            self.tdeCredentialArn = tdeCredentialArn
            self.tdeCredentialPassword = tdeCredentialPassword
            self.timezone = timezone
            self.vpcSecurityGroupIds = vpcSecurityGroupIds
        }

        private enum CodingKeys: String, CodingKey {
            case allocatedStorage = "AllocatedStorage"
            case autoMinorVersionUpgrade = "AutoMinorVersionUpgrade"
            case availabilityZone = "AvailabilityZone"
            case backupRetentionPeriod = "BackupRetentionPeriod"
            case characterSetName = "CharacterSetName"
            case copyTagsToSnapshot = "CopyTagsToSnapshot"
            case dBClusterIdentifier = "DBClusterIdentifier"
            case dBInstanceClass = "DBInstanceClass"
            case dBInstanceIdentifier = "DBInstanceIdentifier"
            case dBName = "DBName"
            case dBParameterGroupName = "DBParameterGroupName"
            case dBSecurityGroups = "DBSecurityGroups"
            case dBSubnetGroupName = "DBSubnetGroupName"
            case deletionProtection = "DeletionProtection"
            case domain = "Domain"
            case domainIAMRoleName = "DomainIAMRoleName"
            case enableCloudwatchLogsExports = "EnableCloudwatchLogsExports"
            case enableCustomerOwnedIp = "EnableCustomerOwnedIp"
            case enableIAMDatabaseAuthentication = "EnableIAMDatabaseAuthentication"
            case enablePerformanceInsights = "EnablePerformanceInsights"
            case engine = "Engine"
            case engineVersion = "EngineVersion"
            case iops = "Iops"
            case kmsKeyId = "KmsKeyId"
            case licenseModel = "LicenseModel"
            case masterUsername = "MasterUsername"
            case masterUserPassword = "MasterUserPassword"
            case maxAllocatedStorage = "MaxAllocatedStorage"
            case monitoringInterval = "MonitoringInterval"
            case monitoringRoleArn = "MonitoringRoleArn"
            case multiAZ = "MultiAZ"
            case ncharCharacterSetName = "NcharCharacterSetName"
            case optionGroupName = "OptionGroupName"
            case performanceInsightsKMSKeyId = "PerformanceInsightsKMSKeyId"
            case performanceInsightsRetentionPeriod = "PerformanceInsightsRetentionPeriod"
            case port = "Port"
            case preferredBackupWindow = "PreferredBackupWindow"
            case preferredMaintenanceWindow = "PreferredMaintenanceWindow"
            case processorFeatures = "ProcessorFeatures"
            case promotionTier = "PromotionTier"
            case publiclyAccessible = "PubliclyAccessible"
            case storageEncrypted = "StorageEncrypted"
            case storageType = "StorageType"
            case tags = "Tags"
            case tdeCredentialArn = "TdeCredentialArn"
            case tdeCredentialPassword = "TdeCredentialPassword"
            case timezone = "Timezone"
            case vpcSecurityGroupIds = "VpcSecurityGroupIds"
        }
    }

    public struct CreateDBInstanceReadReplicaMessage: AWSEncodableShape {
        public struct _ProcessorFeaturesEncoding: ArrayCoderProperties { public static let member = "ProcessorFeature" }
        public struct _TagsEncoding: ArrayCoderProperties { public static let member = "Tag" }
        public struct _VpcSecurityGroupIdsEncoding: ArrayCoderProperties { public static let member = "VpcSecurityGroupId" }

        /// A value that indicates whether minor engine upgrades are applied automatically to the read replica during the maintenance window. Default: Inherits from the source DB instance
        public let autoMinorVersionUpgrade: Bool?
        /// The Availability Zone (AZ) where the read replica will be created. Default: A random, system-chosen Availability Zone in the endpoint's Amazon Web Services Region.  Example: us-east-1d
        public let availabilityZone: String?
        /// A value that indicates whether to copy all tags from the read replica to snapshots of the read replica. By default, tags are not copied.
        public let copyTagsToSnapshot: Bool?
        /// The compute and memory capacity of the read replica, for example, db.m4.large. Not all DB instance classes are available in all Amazon Web Services Regions, or for all database engines. For the full list of DB instance classes, and availability for your engine, see DB Instance Class in the Amazon RDS User Guide.  Default: Inherits from the source DB instance.
        public let dBInstanceClass: String?
        /// The DB instance identifier of the read replica. This identifier is the unique key that identifies a DB instance. This parameter is stored as a lowercase string.
        public let dBInstanceIdentifier: String
        /// The name of the DB parameter group to associate with this DB instance. If you do not specify a value for DBParameterGroupName, then Amazon RDS uses the DBParameterGroup of source DB instance for a same region read replica, or the default DBParameterGroup for the specified DB engine for a cross region read replica.  Currently, specifying a parameter group for this operation is only supported for Oracle DB instances.  Constraints:   Must be 1 to 255 letters, numbers, or hyphens.   First character must be a letter   Can't end with a hyphen or contain two consecutive hyphens
        public let dBParameterGroupName: String?
        /// Specifies a DB subnet group for the DB instance. The new DB instance is created in the VPC associated with the DB subnet group. If no DB subnet group is specified, then the new DB instance isn't created in a VPC. Constraints:   Can only be specified if the source DB instance identifier specifies a DB instance in another Amazon Web Services Region.   If supplied, must match the name of an existing DBSubnetGroup.   The specified DB subnet group must be in the same Amazon Web Services Region in which the operation is running.   All read replicas in one Amazon Web Services Region that are created from the same source DB instance must either:&gt;   Specify DB subnet groups from the same VPC. All these read replicas are created in the same VPC.   Not specify a DB subnet group. All these read replicas are created outside of any VPC.     Example: mySubnetgroup
        public let dBSubnetGroupName: String?
        /// A value that indicates whether the DB instance has deletion protection enabled. The database can't be deleted when deletion protection is enabled. By default, deletion protection is disabled. For more information, see  Deleting a DB Instance.
        public let deletionProtection: Bool?
        /// The Active Directory directory ID to create the DB instance in. Currently, only MySQL, Microsoft SQL Server, Oracle, and PostgreSQL DB instances can be created in an Active Directory Domain. For more information, see  Kerberos Authentication in the Amazon RDS User Guide.
        public let domain: String?
        /// Specify the name of the IAM role to be used when making API calls to the Directory Service.
        public let domainIAMRoleName: String?
        /// The list of logs that the new DB instance is to export to CloudWatch Logs. The values in the list depend on the DB engine being used. For more information, see Publishing Database Logs to Amazon CloudWatch Logs  in the Amazon RDS User Guide.
        @OptionalCustomCoding<StandardArrayCoder>
        public var enableCloudwatchLogsExports: [String]?
        /// A value that indicates whether to enable mapping of Amazon Web Services Identity and Access Management (IAM) accounts to database accounts. By default, mapping is disabled. For more information about IAM database authentication, see  IAM Database Authentication for MySQL and PostgreSQL in the Amazon RDS User Guide.
        public let enableIAMDatabaseAuthentication: Bool?
        /// A value that indicates whether to enable Performance Insights for the read replica.  For more information, see Using Amazon Performance Insights in the Amazon RDS User Guide.
        public let enablePerformanceInsights: Bool?
        /// The amount of Provisioned IOPS (input/output operations per second) to be initially allocated for the DB instance.
        public let iops: Int?
        /// The Amazon Web Services KMS key identifier for an encrypted read replica. The Amazon Web Services KMS key identifier is the key ARN, key ID, alias ARN, or alias name for the Amazon Web Services KMS CMK. If you create an encrypted read replica in the same Amazon Web Services Region as the source DB instance, then do not specify a value for this parameter. A read replica in the same Region is always encrypted with the same Amazon Web Services KMS CMK as the source DB instance. If you create an encrypted read replica in a different Amazon Web Services Region, then you must specify a Amazon Web Services KMS key identifier for the destination Amazon Web Services Region. Amazon Web Services KMS CMKs are specific to the Amazon Web Services Region that they are created in, and you can't use CMKs from one Amazon Web Services Region in another Amazon Web Services Region. You can't create an encrypted read replica from an unencrypted DB instance.
        public let kmsKeyId: String?
        /// The upper limit to which Amazon RDS can automatically scale the storage of the DB instance. For more information about this setting, including limitations that apply to it, see  Managing capacity automatically with Amazon RDS storage autoscaling in the Amazon RDS User Guide.
        public let maxAllocatedStorage: Int?
        /// The interval, in seconds, between points when Enhanced Monitoring metrics are collected for the read replica. To disable collecting Enhanced Monitoring metrics, specify 0. The default is 0. If MonitoringRoleArn is specified, then you must also set MonitoringInterval to a value other than 0. Valid Values: 0, 1, 5, 10, 15, 30, 60
        public let monitoringInterval: Int?
        /// The ARN for the IAM role that permits RDS to send enhanced monitoring metrics to Amazon CloudWatch Logs. For example, arn:aws:iam:123456789012:role/emaccess. For information on creating a monitoring role, go to To create an IAM role for Amazon RDS Enhanced Monitoring in the Amazon RDS User Guide. If MonitoringInterval is set to a value other than 0, then you must supply a MonitoringRoleArn value.
        public let monitoringRoleArn: String?
        /// A value that indicates whether the read replica is in a Multi-AZ deployment.  You can create a read replica as a Multi-AZ DB instance. RDS creates a standby of your replica in another Availability Zone for failover support for the replica. Creating your read replica as a Multi-AZ DB instance is independent of whether the source database is a Multi-AZ DB instance.
        public let multiAZ: Bool?
        /// The option group the DB instance is associated with. If omitted, the option group associated with the source instance is used.  For SQL Server, you must use the option group associated with the source instance.
        public let optionGroupName: String?
        /// The Amazon Web Services KMS key identifier for encryption of Performance Insights data. The Amazon Web Services KMS key identifier is the key ARN, key ID, alias ARN, or alias name for the Amazon Web Services KMS customer master key (CMK). If you do not specify a value for PerformanceInsightsKMSKeyId, then Amazon RDS uses your default CMK. There is a default CMK for your Amazon Web Services account. Your Amazon Web Services account has a different default CMK for each Amazon Web Services Region.
        public let performanceInsightsKMSKeyId: String?
        /// The amount of time, in days, to retain Performance Insights data. Valid values are 7 or 731 (2 years).
        public let performanceInsightsRetentionPeriod: Int?
        /// The port number that the DB instance uses for connections. Default: Inherits from the source DB instance Valid Values: 1150-65535
        public let port: Int?
        /// The URL that contains a Signature Version 4 signed request for the CreateDBInstanceReadReplica API action in the source Amazon Web Services Region that contains the source DB instance.  You must specify this parameter when you create an encrypted read replica from another Amazon Web Services Region by using the Amazon RDS API. Don't specify PreSignedUrl when you are creating an encrypted read replica in the same Amazon Web Services Region. The presigned URL must be a valid request for the CreateDBInstanceReadReplica API action that can be executed in the source Amazon Web Services Region that contains the encrypted source DB instance. The presigned URL request must contain the following parameter values:     DestinationRegion - The Amazon Web Services Region that the encrypted read replica is created in. This Amazon Web Services Region is the same one where the CreateDBInstanceReadReplica action is called that contains this presigned URL. For example, if you create an encrypted DB instance in the us-west-1 Amazon Web Services Region, from a source DB instance in the us-east-2 Amazon Web Services Region, then you call the CreateDBInstanceReadReplica action in the us-east-1 Amazon Web Services Region and provide a presigned URL that contains a call to the CreateDBInstanceReadReplica action in the us-west-2 Amazon Web Services Region. For this example, the DestinationRegion in the presigned URL must be set to the us-east-1 Amazon Web Services Region.     KmsKeyId - The Amazon Web Services KMS key identifier for the key to use to encrypt the read replica in the destination Amazon Web Services Region. This is the same identifier for both the CreateDBInstanceReadReplica action that is called in the destination Amazon Web Services Region, and the action contained in the presigned URL.     SourceDBInstanceIdentifier - The DB instance identifier for the encrypted DB instance to be replicated. This identifier must be in the Amazon Resource Name (ARN) format for the source Amazon Web Services Region. For example, if you are creating an encrypted read replica from a DB instance in the us-west-2 Amazon Web Services Region, then your SourceDBInstanceIdentifier looks like the following example: arn:aws:rds:us-west-2:123456789012:instance:mysql-instance1-20161115.    To learn how to generate a Signature Version 4 signed request, see Authenticating Requests: Using Query Parameters (Amazon Web Services Signature Version 4) and Signature Version 4 Signing Process.   If you are using an Amazon Web Services SDK tool or the CLI, you can specify SourceRegion (or --source-region for the CLI) instead of specifying PreSignedUrl manually. Specifying SourceRegion autogenerates a presigned URL that is a valid request for the operation that can be executed in the source Amazon Web Services Region.  SourceRegion isn't supported for SQL Server, because SQL Server on Amazon RDS doesn't support cross-region read replicas.
        public let preSignedUrl: String?
        /// The number of CPU cores and the number of threads per core for the DB instance class of the DB instance.
        @OptionalCustomCoding<ArrayCoder<_ProcessorFeaturesEncoding, ProcessorFeature>>
        public var processorFeatures: [ProcessorFeature]?
        /// A value that indicates whether the DB instance is publicly accessible. When the DB instance is publicly accessible, its DNS endpoint resolves to the private IP address from within the DB instance's VPC, and to the public IP address from outside of the DB instance's VPC. Access to the DB instance is ultimately controlled by the security group it uses, and that public access is not permitted if the security group assigned to the DB instance doesn't permit it. When the DB instance isn't publicly accessible, it is an internal DB instance with a DNS name that resolves to a private IP address. For more information, see CreateDBInstance.
        public let publiclyAccessible: Bool?
        /// The open mode of the replica database: mounted or read-only.  This parameter is only supported for Oracle DB instances.  Mounted DB replicas are included in Oracle Enterprise Edition. The main use case for mounted replicas is cross-Region disaster recovery. The primary database doesn't use Active Data Guard to transmit information to the mounted replica. Because it doesn't accept user connections, a mounted replica can't serve a read-only workload. You can create a combination of mounted and read-only DB replicas for the same primary DB instance. For more information, see Working with Oracle Read Replicas for Amazon RDS in the Amazon RDS User Guide.
        public let replicaMode: ReplicaMode?
        /// The identifier of the DB instance that will act as the source for the read replica. Each DB instance can have up to five read replicas. Constraints:   Must be the identifier of an existing MySQL, MariaDB, Oracle, PostgreSQL, or SQL Server DB instance.   Can specify a DB instance that is a MySQL read replica only if the source is running MySQL 5.6 or later.   For the limitations of Oracle read replicas, see Read Replica Limitations with Oracle in the Amazon RDS User Guide.   For the limitations of SQL Server read replicas, see Read Replica Limitations with Microsoft SQL Server in the Amazon RDS User Guide.   Can specify a PostgreSQL DB instance only if the source is running PostgreSQL 9.3.5 or later (9.4.7 and higher for cross-region replication).   The specified DB instance must have automatic backups enabled, that is, its backup retention period must be greater than 0.   If the source DB instance is in the same Amazon Web Services Region as the read replica, specify a valid DB instance identifier.   If the source DB instance is in a different Amazon Web Services Region from the read replica, specify a valid DB instance ARN. For more information, see Constructing an ARN for Amazon RDS in the Amazon RDS User Guide. This doesn't apply to SQL Server, which doesn't support cross-region replicas.
        public let sourceDBInstanceIdentifier: String
        /// Specifies the storage type to be associated with the read replica.  Valid values: standard | gp2 | io1   If you specify io1, you must also include a value for the Iops parameter.   Default: io1 if the Iops parameter is specified, otherwise gp2
        public let storageType: String?
        @OptionalCustomCoding<ArrayCoder<_TagsEncoding, Tag>>
        public var tags: [Tag]?
        /// A value that indicates whether the DB instance class of the DB instance uses its default processor features.
        public let useDefaultProcessorFeatures: Bool?
        ///  A list of EC2 VPC security groups to associate with the read replica.   Default: The default EC2 VPC security group for the DB subnet group's VPC.
        @OptionalCustomCoding<ArrayCoder<_VpcSecurityGroupIdsEncoding, String>>
        public var vpcSecurityGroupIds: [String]?

        public init(autoMinorVersionUpgrade: Bool? = nil, availabilityZone: String? = nil, copyTagsToSnapshot: Bool? = nil, dBInstanceClass: String? = nil, dBInstanceIdentifier: String, dBParameterGroupName: String? = nil, dBSubnetGroupName: String? = nil, deletionProtection: Bool? = nil, domain: String? = nil, domainIAMRoleName: String? = nil, enableCloudwatchLogsExports: [String]? = nil, enableIAMDatabaseAuthentication: Bool? = nil, enablePerformanceInsights: Bool? = nil, iops: Int? = nil, kmsKeyId: String? = nil, maxAllocatedStorage: Int? = nil, monitoringInterval: Int? = nil, monitoringRoleArn: String? = nil, multiAZ: Bool? = nil, optionGroupName: String? = nil, performanceInsightsKMSKeyId: String? = nil, performanceInsightsRetentionPeriod: Int? = nil, port: Int? = nil, preSignedUrl: String? = nil, processorFeatures: [ProcessorFeature]? = nil, publiclyAccessible: Bool? = nil, replicaMode: ReplicaMode? = nil, sourceDBInstanceIdentifier: String, storageType: String? = nil, tags: [Tag]? = nil, useDefaultProcessorFeatures: Bool? = nil, vpcSecurityGroupIds: [String]? = nil) {
            self.autoMinorVersionUpgrade = autoMinorVersionUpgrade
            self.availabilityZone = availabilityZone
            self.copyTagsToSnapshot = copyTagsToSnapshot
            self.dBInstanceClass = dBInstanceClass
            self.dBInstanceIdentifier = dBInstanceIdentifier
            self.dBParameterGroupName = dBParameterGroupName
            self.dBSubnetGroupName = dBSubnetGroupName
            self.deletionProtection = deletionProtection
            self.domain = domain
            self.domainIAMRoleName = domainIAMRoleName
            self.enableCloudwatchLogsExports = enableCloudwatchLogsExports
            self.enableIAMDatabaseAuthentication = enableIAMDatabaseAuthentication
            self.enablePerformanceInsights = enablePerformanceInsights
            self.iops = iops
            self.kmsKeyId = kmsKeyId
            self.maxAllocatedStorage = maxAllocatedStorage
            self.monitoringInterval = monitoringInterval
            self.monitoringRoleArn = monitoringRoleArn
            self.multiAZ = multiAZ
            self.optionGroupName = optionGroupName
            self.performanceInsightsKMSKeyId = performanceInsightsKMSKeyId
            self.performanceInsightsRetentionPeriod = performanceInsightsRetentionPeriod
            self.port = port
            self.preSignedUrl = preSignedUrl
            self.processorFeatures = processorFeatures
            self.publiclyAccessible = publiclyAccessible
            self.replicaMode = replicaMode
            self.sourceDBInstanceIdentifier = sourceDBInstanceIdentifier
            self.storageType = storageType
            self.tags = tags
            self.useDefaultProcessorFeatures = useDefaultProcessorFeatures
            self.vpcSecurityGroupIds = vpcSecurityGroupIds
        }

        private enum CodingKeys: String, CodingKey {
            case autoMinorVersionUpgrade = "AutoMinorVersionUpgrade"
            case availabilityZone = "AvailabilityZone"
            case copyTagsToSnapshot = "CopyTagsToSnapshot"
            case dBInstanceClass = "DBInstanceClass"
            case dBInstanceIdentifier = "DBInstanceIdentifier"
            case dBParameterGroupName = "DBParameterGroupName"
            case dBSubnetGroupName = "DBSubnetGroupName"
            case deletionProtection = "DeletionProtection"
            case domain = "Domain"
            case domainIAMRoleName = "DomainIAMRoleName"
            case enableCloudwatchLogsExports = "EnableCloudwatchLogsExports"
            case enableIAMDatabaseAuthentication = "EnableIAMDatabaseAuthentication"
            case enablePerformanceInsights = "EnablePerformanceInsights"
            case iops = "Iops"
            case kmsKeyId = "KmsKeyId"
            case maxAllocatedStorage = "MaxAllocatedStorage"
            case monitoringInterval = "MonitoringInterval"
            case monitoringRoleArn = "MonitoringRoleArn"
            case multiAZ = "MultiAZ"
            case optionGroupName = "OptionGroupName"
            case performanceInsightsKMSKeyId = "PerformanceInsightsKMSKeyId"
            case performanceInsightsRetentionPeriod = "PerformanceInsightsRetentionPeriod"
            case port = "Port"
            case preSignedUrl = "PreSignedUrl"
            case processorFeatures = "ProcessorFeatures"
            case publiclyAccessible = "PubliclyAccessible"
            case replicaMode = "ReplicaMode"
            case sourceDBInstanceIdentifier = "SourceDBInstanceIdentifier"
            case storageType = "StorageType"
            case tags = "Tags"
            case useDefaultProcessorFeatures = "UseDefaultProcessorFeatures"
            case vpcSecurityGroupIds = "VpcSecurityGroupIds"
        }
    }

    public struct CreateDBInstanceReadReplicaResult: AWSDecodableShape {
        public let dBInstance: DBInstance?

        public init(dBInstance: DBInstance? = nil) {
            self.dBInstance = dBInstance
        }

        private enum CodingKeys: String, CodingKey {
            case dBInstance = "DBInstance"
        }
    }

    public struct CreateDBInstanceResult: AWSDecodableShape {
        public let dBInstance: DBInstance?

        public init(dBInstance: DBInstance? = nil) {
            self.dBInstance = dBInstance
        }

        private enum CodingKeys: String, CodingKey {
            case dBInstance = "DBInstance"
        }
    }

    public struct CreateDBParameterGroupMessage: AWSEncodableShape {
        public struct _TagsEncoding: ArrayCoderProperties { public static let member = "Tag" }

        /// The DB parameter group family name. A DB parameter group can be associated with one and only one DB parameter group family, and can be applied only to a DB instance running a database engine and engine version compatible with that DB parameter group family. To list all of the available parameter group families for a DB engine, use the following command:  aws rds describe-db-engine-versions --query "DBEngineVersions[].DBParameterGroupFamily" --engine &lt;engine&gt;  For example, to list all of the available parameter group families for the MySQL DB engine, use the following command:  aws rds describe-db-engine-versions --query "DBEngineVersions[].DBParameterGroupFamily" --engine mysql   The output contains duplicates.  The following are the valid DB engine values:    aurora (for MySQL 5.6-compatible Aurora)    aurora-mysql (for MySQL 5.7-compatible Aurora)    aurora-postgresql     mariadb     mysql     oracle-ee     oracle-ee-cdb     oracle-se2     oracle-se2-cdb     postgres     sqlserver-ee     sqlserver-se     sqlserver-ex     sqlserver-web
        public let dBParameterGroupFamily: String
        /// The name of the DB parameter group. Constraints:   Must be 1 to 255 letters, numbers, or hyphens.   First character must be a letter   Can't end with a hyphen or contain two consecutive hyphens    This value is stored as a lowercase string.
        public let dBParameterGroupName: String
        /// The description for the DB parameter group.
        public let description: String
        /// Tags to assign to the DB parameter group.
        @OptionalCustomCoding<ArrayCoder<_TagsEncoding, Tag>>
        public var tags: [Tag]?

        public init(dBParameterGroupFamily: String, dBParameterGroupName: String, description: String, tags: [Tag]? = nil) {
            self.dBParameterGroupFamily = dBParameterGroupFamily
            self.dBParameterGroupName = dBParameterGroupName
            self.description = description
            self.tags = tags
        }

        private enum CodingKeys: String, CodingKey {
            case dBParameterGroupFamily = "DBParameterGroupFamily"
            case dBParameterGroupName = "DBParameterGroupName"
            case description = "Description"
            case tags = "Tags"
        }
    }

    public struct CreateDBParameterGroupResult: AWSDecodableShape {
        public let dBParameterGroup: DBParameterGroup?

        public init(dBParameterGroup: DBParameterGroup? = nil) {
            self.dBParameterGroup = dBParameterGroup
        }

        private enum CodingKeys: String, CodingKey {
            case dBParameterGroup = "DBParameterGroup"
        }
    }

    public struct CreateDBProxyEndpointRequest: AWSEncodableShape {
        public struct _TagsEncoding: ArrayCoderProperties { public static let member = "Tag" }

        /// The name of the DB proxy endpoint to create.
        public let dBProxyEndpointName: String
        /// The name of the DB proxy associated with the DB proxy endpoint that you create.
        public let dBProxyName: String
        @OptionalCustomCoding<ArrayCoder<_TagsEncoding, Tag>>
        public var tags: [Tag]?
        /// A value that indicates whether the DB proxy endpoint can be used for read/write or read-only operations. The default is READ_WRITE.
        public let targetRole: DBProxyEndpointTargetRole?
        /// The VPC security group IDs for the DB proxy endpoint that you create. You can specify a different set of security group IDs than for the original DB proxy. The default is the default security group for the VPC.
        @OptionalCustomCoding<StandardArrayCoder>
        public var vpcSecurityGroupIds: [String]?
        /// The VPC subnet IDs for the DB proxy endpoint that you create. You can specify a different set of subnet IDs than for the original DB proxy.
        @CustomCoding<StandardArrayCoder>
        public var vpcSubnetIds: [String]

        public init(dBProxyEndpointName: String, dBProxyName: String, tags: [Tag]? = nil, targetRole: DBProxyEndpointTargetRole? = nil, vpcSecurityGroupIds: [String]? = nil, vpcSubnetIds: [String]) {
            self.dBProxyEndpointName = dBProxyEndpointName
            self.dBProxyName = dBProxyName
            self.tags = tags
            self.targetRole = targetRole
            self.vpcSecurityGroupIds = vpcSecurityGroupIds
            self.vpcSubnetIds = vpcSubnetIds
        }

        public func validate(name: String) throws {
            try self.validate(self.dBProxyEndpointName, name: "dBProxyEndpointName", parent: name, max: 63)
            try self.validate(self.dBProxyEndpointName, name: "dBProxyEndpointName", parent: name, min: 1)
            try self.validate(self.dBProxyEndpointName, name: "dBProxyEndpointName", parent: name, pattern: "[a-zA-Z][a-zA-Z0-9]*(-[a-zA-Z0-9]+)*")
            try self.validate(self.dBProxyName, name: "dBProxyName", parent: name, max: 63)
            try self.validate(self.dBProxyName, name: "dBProxyName", parent: name, min: 1)
            try self.validate(self.dBProxyName, name: "dBProxyName", parent: name, pattern: "[a-zA-Z][a-zA-Z0-9]*(-[a-zA-Z0-9]+)*")
        }

        private enum CodingKeys: String, CodingKey {
            case dBProxyEndpointName = "DBProxyEndpointName"
            case dBProxyName = "DBProxyName"
            case tags = "Tags"
            case targetRole = "TargetRole"
            case vpcSecurityGroupIds = "VpcSecurityGroupIds"
            case vpcSubnetIds = "VpcSubnetIds"
        }
    }

    public struct CreateDBProxyEndpointResponse: AWSDecodableShape {
        /// The DBProxyEndpoint object that is created by the API operation. The DB proxy endpoint that you create might provide capabilities such as read/write or read-only operations, or using a different VPC than the proxy's default VPC.
        public let dBProxyEndpoint: DBProxyEndpoint?

        public init(dBProxyEndpoint: DBProxyEndpoint? = nil) {
            self.dBProxyEndpoint = dBProxyEndpoint
        }

        private enum CodingKeys: String, CodingKey {
            case dBProxyEndpoint = "DBProxyEndpoint"
        }
    }

    public struct CreateDBProxyRequest: AWSEncodableShape {
        public struct _TagsEncoding: ArrayCoderProperties { public static let member = "Tag" }

        /// The authorization mechanism that the proxy uses.
        @CustomCoding<StandardArrayCoder>
        public var auth: [UserAuthConfig]
        /// The identifier for the proxy. This name must be unique for all proxies owned by your Amazon Web Services account in the specified Amazon Web Services Region. An identifier must begin with a letter and must contain only ASCII letters, digits, and hyphens; it can't end with a hyphen or contain two consecutive hyphens.
        public let dBProxyName: String
        /// Whether the proxy includes detailed information about SQL statements in its logs. This information helps you to debug issues involving SQL behavior or the performance and scalability of the proxy connections. The debug information includes the text of SQL statements that you submit through the proxy. Thus, only enable this setting when needed for debugging, and only when you have security measures in place to safeguard any sensitive information that appears in the logs.
        public let debugLogging: Bool?
        /// The kinds of databases that the proxy can connect to. This value determines which database network protocol the proxy recognizes when it interprets network traffic to and from the database. The engine family applies to MySQL and PostgreSQL for both RDS and Aurora.
        public let engineFamily: EngineFamily
        /// The number of seconds that a connection to the proxy can be inactive before the proxy disconnects it. You can set this value higher or lower than the connection timeout limit for the associated database.
        public let idleClientTimeout: Int?
        /// A Boolean parameter that specifies whether Transport Layer Security (TLS) encryption is required for connections to the proxy. By enabling this setting, you can enforce encrypted TLS connections to the proxy.
        public let requireTLS: Bool?
        /// The Amazon Resource Name (ARN) of the IAM role that the proxy uses to access secrets in Amazon Web Services Secrets Manager.
        public let roleArn: String
        /// An optional set of key-value pairs to associate arbitrary data of your choosing with the proxy.
        @OptionalCustomCoding<ArrayCoder<_TagsEncoding, Tag>>
        public var tags: [Tag]?
        /// One or more VPC security group IDs to associate with the new proxy.
        @OptionalCustomCoding<StandardArrayCoder>
        public var vpcSecurityGroupIds: [String]?
        /// One or more VPC subnet IDs to associate with the new proxy.
        @CustomCoding<StandardArrayCoder>
        public var vpcSubnetIds: [String]

        public init(auth: [UserAuthConfig], dBProxyName: String, debugLogging: Bool? = nil, engineFamily: EngineFamily, idleClientTimeout: Int? = nil, requireTLS: Bool? = nil, roleArn: String, tags: [Tag]? = nil, vpcSecurityGroupIds: [String]? = nil, vpcSubnetIds: [String]) {
            self.auth = auth
            self.dBProxyName = dBProxyName
            self.debugLogging = debugLogging
            self.engineFamily = engineFamily
            self.idleClientTimeout = idleClientTimeout
            self.requireTLS = requireTLS
            self.roleArn = roleArn
            self.tags = tags
            self.vpcSecurityGroupIds = vpcSecurityGroupIds
            self.vpcSubnetIds = vpcSubnetIds
        }

        private enum CodingKeys: String, CodingKey {
            case auth = "Auth"
            case dBProxyName = "DBProxyName"
            case debugLogging = "DebugLogging"
            case engineFamily = "EngineFamily"
            case idleClientTimeout = "IdleClientTimeout"
            case requireTLS = "RequireTLS"
            case roleArn = "RoleArn"
            case tags = "Tags"
            case vpcSecurityGroupIds = "VpcSecurityGroupIds"
            case vpcSubnetIds = "VpcSubnetIds"
        }
    }

    public struct CreateDBProxyResponse: AWSDecodableShape {
        /// The DBProxy structure corresponding to the new proxy.
        public let dBProxy: DBProxy?

        public init(dBProxy: DBProxy? = nil) {
            self.dBProxy = dBProxy
        }

        private enum CodingKeys: String, CodingKey {
            case dBProxy = "DBProxy"
        }
    }

    public struct CreateDBSecurityGroupMessage: AWSEncodableShape {
        public struct _TagsEncoding: ArrayCoderProperties { public static let member = "Tag" }

        /// The description for the DB security group.
        public let dBSecurityGroupDescription: String
        /// The name for the DB security group. This value is stored as a lowercase string. Constraints:   Must be 1 to 255 letters, numbers, or hyphens.   First character must be a letter   Can't end with a hyphen or contain two consecutive hyphens   Must not be "Default"   Example: mysecuritygroup
        public let dBSecurityGroupName: String
        /// Tags to assign to the DB security group.
        @OptionalCustomCoding<ArrayCoder<_TagsEncoding, Tag>>
        public var tags: [Tag]?

        public init(dBSecurityGroupDescription: String, dBSecurityGroupName: String, tags: [Tag]? = nil) {
            self.dBSecurityGroupDescription = dBSecurityGroupDescription
            self.dBSecurityGroupName = dBSecurityGroupName
            self.tags = tags
        }

        private enum CodingKeys: String, CodingKey {
            case dBSecurityGroupDescription = "DBSecurityGroupDescription"
            case dBSecurityGroupName = "DBSecurityGroupName"
            case tags = "Tags"
        }
    }

    public struct CreateDBSecurityGroupResult: AWSDecodableShape {
        public let dBSecurityGroup: DBSecurityGroup?

        public init(dBSecurityGroup: DBSecurityGroup? = nil) {
            self.dBSecurityGroup = dBSecurityGroup
        }

        private enum CodingKeys: String, CodingKey {
            case dBSecurityGroup = "DBSecurityGroup"
        }
    }

    public struct CreateDBSnapshotMessage: AWSEncodableShape {
        public struct _TagsEncoding: ArrayCoderProperties { public static let member = "Tag" }

        /// The identifier of the DB instance that you want to create the snapshot of. Constraints:   Must match the identifier of an existing DBInstance.
        public let dBInstanceIdentifier: String
        /// The identifier for the DB snapshot. Constraints:   Can't be null, empty, or blank   Must contain from 1 to 255 letters, numbers, or hyphens   First character must be a letter   Can't end with a hyphen or contain two consecutive hyphens   Example: my-snapshot-id
        public let dBSnapshotIdentifier: String
        @OptionalCustomCoding<ArrayCoder<_TagsEncoding, Tag>>
        public var tags: [Tag]?

        public init(dBInstanceIdentifier: String, dBSnapshotIdentifier: String, tags: [Tag]? = nil) {
            self.dBInstanceIdentifier = dBInstanceIdentifier
            self.dBSnapshotIdentifier = dBSnapshotIdentifier
            self.tags = tags
        }

        private enum CodingKeys: String, CodingKey {
            case dBInstanceIdentifier = "DBInstanceIdentifier"
            case dBSnapshotIdentifier = "DBSnapshotIdentifier"
            case tags = "Tags"
        }
    }

    public struct CreateDBSnapshotResult: AWSDecodableShape {
        public let dBSnapshot: DBSnapshot?

        public init(dBSnapshot: DBSnapshot? = nil) {
            self.dBSnapshot = dBSnapshot
        }

        private enum CodingKeys: String, CodingKey {
            case dBSnapshot = "DBSnapshot"
        }
    }

    public struct CreateDBSubnetGroupMessage: AWSEncodableShape {
        public struct _SubnetIdsEncoding: ArrayCoderProperties { public static let member = "SubnetIdentifier" }
        public struct _TagsEncoding: ArrayCoderProperties { public static let member = "Tag" }

        /// The description for the DB subnet group.
        public let dBSubnetGroupDescription: String
        /// The name for the DB subnet group. This value is stored as a lowercase string. Constraints: Must contain no more than 255 letters, numbers, periods, underscores, spaces, or hyphens. Must not be default. Example: mySubnetgroup
        public let dBSubnetGroupName: String
        /// The EC2 Subnet IDs for the DB subnet group.
        @CustomCoding<ArrayCoder<_SubnetIdsEncoding, String>>
        public var subnetIds: [String]
        /// Tags to assign to the DB subnet group.
        @OptionalCustomCoding<ArrayCoder<_TagsEncoding, Tag>>
        public var tags: [Tag]?

        public init(dBSubnetGroupDescription: String, dBSubnetGroupName: String, subnetIds: [String], tags: [Tag]? = nil) {
            self.dBSubnetGroupDescription = dBSubnetGroupDescription
            self.dBSubnetGroupName = dBSubnetGroupName
            self.subnetIds = subnetIds
            self.tags = tags
        }

        private enum CodingKeys: String, CodingKey {
            case dBSubnetGroupDescription = "DBSubnetGroupDescription"
            case dBSubnetGroupName = "DBSubnetGroupName"
            case subnetIds = "SubnetIds"
            case tags = "Tags"
        }
    }

    public struct CreateDBSubnetGroupResult: AWSDecodableShape {
        public let dBSubnetGroup: DBSubnetGroup?

        public init(dBSubnetGroup: DBSubnetGroup? = nil) {
            self.dBSubnetGroup = dBSubnetGroup
        }

        private enum CodingKeys: String, CodingKey {
            case dBSubnetGroup = "DBSubnetGroup"
        }
    }

    public struct CreateEventSubscriptionMessage: AWSEncodableShape {
        public struct _EventCategoriesEncoding: ArrayCoderProperties { public static let member = "EventCategory" }
        public struct _SourceIdsEncoding: ArrayCoderProperties { public static let member = "SourceId" }
        public struct _TagsEncoding: ArrayCoderProperties { public static let member = "Tag" }

        ///  A value that indicates whether to activate the subscription. If the event notification subscription isn't activated, the subscription is created but not active.
        public let enabled: Bool?
        ///  A list of event categories for a particular source type (SourceType) that you want to subscribe to. You can see a list of the categories for a given source type in Events in the Amazon RDS User Guide or by using the DescribeEventCategories operation.
        @OptionalCustomCoding<ArrayCoder<_EventCategoriesEncoding, String>>
        public var eventCategories: [String]?
        /// The Amazon Resource Name (ARN) of the SNS topic created for event notification. The ARN is created by Amazon SNS when you create a topic and subscribe to it.
        public let snsTopicArn: String
        /// The list of identifiers of the event sources for which events are returned. If not specified, then all sources are included in the response. An identifier must begin with a letter and must contain only ASCII letters, digits, and hyphens. It can't end with a hyphen or contain two consecutive hyphens. Constraints:   If SourceIds are supplied, SourceType must also be provided.   If the source type is a DB instance, a DBInstanceIdentifier value must be supplied.   If the source type is a DB cluster, a DBClusterIdentifier value must be supplied.   If the source type is a DB parameter group, a DBParameterGroupName value must be supplied.   If the source type is a DB security group, a DBSecurityGroupName value must be supplied.   If the source type is a DB snapshot, a DBSnapshotIdentifier value must be supplied.   If the source type is a DB cluster snapshot, a DBClusterSnapshotIdentifier value must be supplied.
        @OptionalCustomCoding<ArrayCoder<_SourceIdsEncoding, String>>
        public var sourceIds: [String]?
        /// The type of source that is generating the events. For example, if you want to be notified of events generated by a DB instance, you set this parameter to db-instance. If this value isn't specified, all events are returned. Valid values: db-instance | db-cluster | db-parameter-group | db-security-group | db-snapshot | db-cluster-snapshot
        public let sourceType: String?
        /// The name of the subscription. Constraints: The name must be less than 255 characters.
        public let subscriptionName: String
        @OptionalCustomCoding<ArrayCoder<_TagsEncoding, Tag>>
        public var tags: [Tag]?

        public init(enabled: Bool? = nil, eventCategories: [String]? = nil, snsTopicArn: String, sourceIds: [String]? = nil, sourceType: String? = nil, subscriptionName: String, tags: [Tag]? = nil) {
            self.enabled = enabled
            self.eventCategories = eventCategories
            self.snsTopicArn = snsTopicArn
            self.sourceIds = sourceIds
            self.sourceType = sourceType
            self.subscriptionName = subscriptionName
            self.tags = tags
        }

        private enum CodingKeys: String, CodingKey {
            case enabled = "Enabled"
            case eventCategories = "EventCategories"
            case snsTopicArn = "SnsTopicArn"
            case sourceIds = "SourceIds"
            case sourceType = "SourceType"
            case subscriptionName = "SubscriptionName"
            case tags = "Tags"
        }
    }

    public struct CreateEventSubscriptionResult: AWSDecodableShape {
        public let eventSubscription: EventSubscription?

        public init(eventSubscription: EventSubscription? = nil) {
            self.eventSubscription = eventSubscription
        }

        private enum CodingKeys: String, CodingKey {
            case eventSubscription = "EventSubscription"
        }
    }

    public struct CreateGlobalClusterMessage: AWSEncodableShape {
        ///  The name for your database of up to 64 alpha-numeric characters. If you do not provide a name, Amazon Aurora will not create a database in the global database cluster you are creating.
        public let databaseName: String?
        ///  The deletion protection setting for the new global database. The global database can't be deleted when deletion protection is enabled.
        public let deletionProtection: Bool?
        /// The name of the database engine to be used for this DB cluster.
        public let engine: String?
        /// The engine version of the Aurora global database.
        public let engineVersion: String?
        /// The cluster identifier of the new global database cluster.
        public let globalClusterIdentifier: String?
        ///  The Amazon Resource Name (ARN) to use as the primary cluster of the global database. This parameter is optional.
        public let sourceDBClusterIdentifier: String?
        ///  The storage encryption setting for the new global database cluster.
        public let storageEncrypted: Bool?

        public init(databaseName: String? = nil, deletionProtection: Bool? = nil, engine: String? = nil, engineVersion: String? = nil, globalClusterIdentifier: String? = nil, sourceDBClusterIdentifier: String? = nil, storageEncrypted: Bool? = nil) {
            self.databaseName = databaseName
            self.deletionProtection = deletionProtection
            self.engine = engine
            self.engineVersion = engineVersion
            self.globalClusterIdentifier = globalClusterIdentifier
            self.sourceDBClusterIdentifier = sourceDBClusterIdentifier
            self.storageEncrypted = storageEncrypted
        }

        private enum CodingKeys: String, CodingKey {
            case databaseName = "DatabaseName"
            case deletionProtection = "DeletionProtection"
            case engine = "Engine"
            case engineVersion = "EngineVersion"
            case globalClusterIdentifier = "GlobalClusterIdentifier"
            case sourceDBClusterIdentifier = "SourceDBClusterIdentifier"
            case storageEncrypted = "StorageEncrypted"
        }
    }

    public struct CreateGlobalClusterResult: AWSDecodableShape {
        public let globalCluster: GlobalCluster?

        public init(globalCluster: GlobalCluster? = nil) {
            self.globalCluster = globalCluster
        }

        private enum CodingKeys: String, CodingKey {
            case globalCluster = "GlobalCluster"
        }
    }

    public struct CreateOptionGroupMessage: AWSEncodableShape {
        public struct _TagsEncoding: ArrayCoderProperties { public static let member = "Tag" }

        /// Specifies the name of the engine that this option group should be associated with. Valid Values:     mariadb     mysql     oracle-ee     oracle-ee-cdb     oracle-se2     oracle-se2-cdb     postgres     sqlserver-ee     sqlserver-se     sqlserver-ex     sqlserver-web
        public let engineName: String
        /// Specifies the major version of the engine that this option group should be associated with.
        public let majorEngineVersion: String
        /// The description of the option group.
        public let optionGroupDescription: String
        /// Specifies the name of the option group to be created. Constraints:   Must be 1 to 255 letters, numbers, or hyphens   First character must be a letter   Can't end with a hyphen or contain two consecutive hyphens   Example: myoptiongroup
        public let optionGroupName: String
        /// Tags to assign to the option group.
        @OptionalCustomCoding<ArrayCoder<_TagsEncoding, Tag>>
        public var tags: [Tag]?

        public init(engineName: String, majorEngineVersion: String, optionGroupDescription: String, optionGroupName: String, tags: [Tag]? = nil) {
            self.engineName = engineName
            self.majorEngineVersion = majorEngineVersion
            self.optionGroupDescription = optionGroupDescription
            self.optionGroupName = optionGroupName
            self.tags = tags
        }

        private enum CodingKeys: String, CodingKey {
            case engineName = "EngineName"
            case majorEngineVersion = "MajorEngineVersion"
            case optionGroupDescription = "OptionGroupDescription"
            case optionGroupName = "OptionGroupName"
            case tags = "Tags"
        }
    }

    public struct CreateOptionGroupResult: AWSDecodableShape {
        public let optionGroup: OptionGroup?

        public init(optionGroup: OptionGroup? = nil) {
            self.optionGroup = optionGroup
        }

        private enum CodingKeys: String, CodingKey {
            case optionGroup = "OptionGroup"
        }
    }

    public struct CustomAvailabilityZone: AWSDecodableShape {
        /// The identifier of the custom AZ. Amazon RDS generates a unique identifier when a custom AZ is created.
        public let customAvailabilityZoneId: String?
        /// The name of the custom AZ.
        public let customAvailabilityZoneName: String?
        /// The status of the custom AZ.
        public let customAvailabilityZoneStatus: String?
        /// Information about the virtual private network (VPN) between the VMware vSphere cluster and the Amazon Web Services website.
        public let vpnDetails: VpnDetails?

        public init(customAvailabilityZoneId: String? = nil, customAvailabilityZoneName: String? = nil, customAvailabilityZoneStatus: String? = nil, vpnDetails: VpnDetails? = nil) {
            self.customAvailabilityZoneId = customAvailabilityZoneId
            self.customAvailabilityZoneName = customAvailabilityZoneName
            self.customAvailabilityZoneStatus = customAvailabilityZoneStatus
            self.vpnDetails = vpnDetails
        }

        private enum CodingKeys: String, CodingKey {
            case customAvailabilityZoneId = "CustomAvailabilityZoneId"
            case customAvailabilityZoneName = "CustomAvailabilityZoneName"
            case customAvailabilityZoneStatus = "CustomAvailabilityZoneStatus"
            case vpnDetails = "VpnDetails"
        }
    }

    public struct CustomAvailabilityZoneMessage: AWSDecodableShape {
        public struct _CustomAvailabilityZonesEncoding: ArrayCoderProperties { public static let member = "CustomAvailabilityZone" }

        /// The list of CustomAvailabilityZone objects for the Amazon Web Services account.
        @OptionalCustomCoding<ArrayCoder<_CustomAvailabilityZonesEncoding, CustomAvailabilityZone>>
        public var customAvailabilityZones: [CustomAvailabilityZone]?
        /// An optional pagination token provided by a previous DescribeCustomAvailabilityZones request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by MaxRecords.
        public let marker: String?

        public init(customAvailabilityZones: [CustomAvailabilityZone]? = nil, marker: String? = nil) {
            self.customAvailabilityZones = customAvailabilityZones
            self.marker = marker
        }

        private enum CodingKeys: String, CodingKey {
            case customAvailabilityZones = "CustomAvailabilityZones"
            case marker = "Marker"
        }
    }

    public struct DBCluster: AWSDecodableShape {
        public struct _AssociatedRolesEncoding: ArrayCoderProperties { public static let member = "DBClusterRole" }
        public struct _AvailabilityZonesEncoding: ArrayCoderProperties { public static let member = "AvailabilityZone" }
        public struct _DBClusterMembersEncoding: ArrayCoderProperties { public static let member = "DBClusterMember" }
        public struct _DBClusterOptionGroupMembershipsEncoding: ArrayCoderProperties { public static let member = "DBClusterOptionGroup" }
        public struct _DomainMembershipsEncoding: ArrayCoderProperties { public static let member = "DomainMembership" }
        public struct _ReadReplicaIdentifiersEncoding: ArrayCoderProperties { public static let member = "ReadReplicaIdentifier" }
        public struct _TagListEncoding: ArrayCoderProperties { public static let member = "Tag" }
        public struct _VpcSecurityGroupsEncoding: ArrayCoderProperties { public static let member = "VpcSecurityGroupMembership" }

        /// The name of the Amazon Kinesis data stream used for the database activity stream.
        public let activityStreamKinesisStreamName: String?
        /// The Amazon Web Services KMS key identifier used for encrypting messages in the database activity stream. The Amazon Web Services KMS key identifier is the key ARN, key ID, alias ARN, or alias name for the Amazon Web Services KMS customer master key (CMK).
        public let activityStreamKmsKeyId: String?
        /// The mode of the database activity stream. Database events such as a change or access generate an activity stream event. The database session can handle these events either synchronously or asynchronously.
        public let activityStreamMode: ActivityStreamMode?
        /// The status of the database activity stream.
        public let activityStreamStatus: ActivityStreamStatus?
        /// For all database engines except Amazon Aurora, AllocatedStorage specifies the allocated storage size in gibibytes (GiB). For Aurora, AllocatedStorage always returns 1, because Aurora DB cluster storage size isn't fixed, but instead automatically adjusts as needed.
        public let allocatedStorage: Int?
        /// Provides a list of the Amazon Web Services Identity and Access Management (IAM) roles that are associated with the DB cluster. IAM roles that are associated with a DB cluster grant permission for the DB cluster to access other Amazon Web Services on your behalf.
        @OptionalCustomCoding<ArrayCoder<_AssociatedRolesEncoding, DBClusterRole>>
        public var associatedRoles: [DBClusterRole]?
        /// Provides the list of Availability Zones (AZs) where instances in the DB cluster can be created.
        @OptionalCustomCoding<ArrayCoder<_AvailabilityZonesEncoding, String>>
        public var availabilityZones: [String]?
        /// The number of change records stored for Backtrack.
        public let backtrackConsumedChangeRecords: Int64?
        /// The target backtrack window, in seconds. If this value is set to 0, backtracking is disabled for the DB cluster. Otherwise, backtracking is enabled.
        public let backtrackWindow: Int64?
        /// Specifies the number of days for which automatic DB snapshots are retained.
        public let backupRetentionPeriod: Int?
        /// The current capacity of an Aurora Serverless DB cluster. The capacity is 0 (zero) when the cluster is paused. For more information about Aurora Serverless, see Using Amazon Aurora Serverless in the Amazon Aurora User Guide.
        public let capacity: Int?
        /// If present, specifies the name of the character set that this cluster is associated with.
        public let characterSetName: String?
        /// Identifies the clone group to which the DB cluster is associated.
        public let cloneGroupId: String?
        /// Specifies the time when the DB cluster was created, in Universal Coordinated Time (UTC).
        public let clusterCreateTime: Date?
        /// Specifies whether tags are copied from the DB cluster to snapshots of the DB cluster.
        public let copyTagsToSnapshot: Bool?
        /// Specifies whether the DB cluster is a clone of a DB cluster owned by a different Amazon Web Services account.
        public let crossAccountClone: Bool?
        /// Identifies all custom endpoints associated with the cluster.
        @OptionalCustomCoding<StandardArrayCoder>
        public var customEndpoints: [String]?
        /// Contains the name of the initial database of this DB cluster that was provided at create time, if one was specified when the DB cluster was created. This same name is returned for the life of the DB cluster.
        public let databaseName: String?
        /// The Amazon Resource Name (ARN) for the DB cluster.
        public let dBClusterArn: String?
        /// Contains a user-supplied DB cluster identifier. This identifier is the unique key that identifies a DB cluster.
        public let dBClusterIdentifier: String?
        /// Provides the list of instances that make up the DB cluster.
        @OptionalCustomCoding<ArrayCoder<_DBClusterMembersEncoding, DBClusterMember>>
        public var dBClusterMembers: [DBClusterMember]?
        /// Provides the list of option group memberships for this DB cluster.
        @OptionalCustomCoding<ArrayCoder<_DBClusterOptionGroupMembershipsEncoding, DBClusterOptionGroupStatus>>
        public var dBClusterOptionGroupMemberships: [DBClusterOptionGroupStatus]?
        /// Specifies the name of the DB cluster parameter group for the DB cluster.
        public let dBClusterParameterGroup: String?
        /// The Amazon Web Services Region-unique, immutable identifier for the DB cluster. This identifier is found in Amazon Web Services CloudTrail log entries whenever the Amazon Web Services KMS CMK for the DB cluster is accessed.
        public let dbClusterResourceId: String?
        /// Specifies information on the subnet group associated with the DB cluster, including the name, description, and subnets in the subnet group.
        public let dBSubnetGroup: String?
        /// Indicates if the DB cluster has deletion protection enabled. The database can't be deleted when deletion protection is enabled.
        public let deletionProtection: Bool?
        /// The Active Directory Domain membership records associated with the DB cluster.
        @OptionalCustomCoding<ArrayCoder<_DomainMembershipsEncoding, DomainMembership>>
        public var domainMemberships: [DomainMembership]?
        /// The earliest time to which a DB cluster can be backtracked.
        public let earliestBacktrackTime: Date?
        /// The earliest time to which a database can be restored with point-in-time restore.
        public let earliestRestorableTime: Date?
        /// A list of log types that this DB cluster is configured to export to CloudWatch Logs. Log types vary by DB engine. For information about the log types for each DB engine, see Amazon RDS Database Log Files in the Amazon Aurora User Guide.
        @OptionalCustomCoding<StandardArrayCoder>
        public var enabledCloudwatchLogsExports: [String]?
        /// Specifies the connection endpoint for the primary instance of the DB cluster.
        public let endpoint: String?
        /// The name of the database engine to be used for this DB cluster.
        public let engine: String?
        /// The DB engine mode of the DB cluster, either provisioned, serverless, parallelquery, global, or multimaster. For more information, see  CreateDBCluster.
        public let engineMode: String?
        /// Indicates the database engine version.
        public let engineVersion: String?
        /// Specifies whether you have requested to enable write forwarding for a secondary cluster in an Aurora global database. Because write forwarding takes time to enable, check the value of GlobalWriteForwardingStatus to confirm that the request has completed before using the write forwarding feature for this cluster.
        public let globalWriteForwardingRequested: Bool?
        /// Specifies whether a secondary cluster in an Aurora global database has write forwarding enabled, not enabled, or is in the process of enabling it.
        public let globalWriteForwardingStatus: WriteForwardingStatus?
        /// Specifies the ID that Amazon Route 53 assigns when you create a hosted zone.
        public let hostedZoneId: String?
        /// A value that indicates whether the HTTP endpoint for an Aurora Serverless DB cluster is enabled. When enabled, the HTTP endpoint provides a connectionless web service API for running SQL queries on the Aurora Serverless DB cluster. You can also query your database from inside the RDS console with the query editor. For more information, see Using the Data API for Aurora Serverless in the Amazon Aurora User Guide.
        public let httpEndpointEnabled: Bool?
        /// A value that indicates whether the mapping of Amazon Web Services Identity and Access Management (IAM) accounts to database accounts is enabled.
        public let iAMDatabaseAuthenticationEnabled: Bool?
        /// If StorageEncrypted is enabled, the Amazon Web Services KMS key identifier for the encrypted DB cluster. The Amazon Web Services KMS key identifier is the key ARN, key ID, alias ARN, or alias name for the Amazon Web Services KMS customer master key (CMK).
        public let kmsKeyId: String?
        /// Specifies the latest time to which a database can be restored with point-in-time restore.
        public let latestRestorableTime: Date?
        /// Contains the master username for the DB cluster.
        public let masterUsername: String?
        /// Specifies whether the DB cluster has instances in multiple Availability Zones.
        public let multiAZ: Bool?
        /// A value that specifies that changes to the DB cluster are pending. This element is only included when changes are pending. Specific changes are identified by subelements.
        public let pendingModifiedValues: ClusterPendingModifiedValues?
        /// Specifies the progress of the operation as a percentage.
        public let percentProgress: String?
        /// Specifies the port that the database engine is listening on.
        public let port: Int?
        /// Specifies the daily time range during which automated backups are created if automated backups are enabled, as determined by the BackupRetentionPeriod.
        public let preferredBackupWindow: String?
        /// Specifies the weekly time range during which system maintenance can occur, in Universal Coordinated Time (UTC).
        public let preferredMaintenanceWindow: String?
        /// The reader endpoint for the DB cluster. The reader endpoint for a DB cluster load-balances connections across the Aurora Replicas that are available in a DB cluster. As clients request new connections to the reader endpoint, Aurora distributes the connection requests among the Aurora Replicas in the DB cluster. This functionality can help balance your read workload across multiple Aurora Replicas in your DB cluster.  If a failover occurs, and the Aurora Replica that you are connected to is promoted to be the primary instance, your connection is dropped. To continue sending your read workload to other Aurora Replicas in the cluster, you can then reconnect to the reader endpoint.
        public let readerEndpoint: String?
        /// Contains one or more identifiers of the read replicas associated with this DB cluster.
        @OptionalCustomCoding<ArrayCoder<_ReadReplicaIdentifiersEncoding, String>>
        public var readReplicaIdentifiers: [String]?
        /// Contains the identifier of the source DB cluster if this DB cluster is a read replica.
        public let replicationSourceIdentifier: String?
        public let scalingConfigurationInfo: ScalingConfigurationInfo?
        /// Specifies the current state of this DB cluster.
        public let status: String?
        /// Specifies whether the DB cluster is encrypted.
        public let storageEncrypted: Bool?
        @OptionalCustomCoding<ArrayCoder<_TagListEncoding, Tag>>
        public var tagList: [Tag]?
        /// Provides a list of VPC security groups that the DB cluster belongs to.
        @OptionalCustomCoding<ArrayCoder<_VpcSecurityGroupsEncoding, VpcSecurityGroupMembership>>
        public var vpcSecurityGroups: [VpcSecurityGroupMembership]?

        public init(activityStreamKinesisStreamName: String? = nil, activityStreamKmsKeyId: String? = nil, activityStreamMode: ActivityStreamMode? = nil, activityStreamStatus: ActivityStreamStatus? = nil, allocatedStorage: Int? = nil, associatedRoles: [DBClusterRole]? = nil, availabilityZones: [String]? = nil, backtrackConsumedChangeRecords: Int64? = nil, backtrackWindow: Int64? = nil, backupRetentionPeriod: Int? = nil, capacity: Int? = nil, characterSetName: String? = nil, cloneGroupId: String? = nil, clusterCreateTime: Date? = nil, copyTagsToSnapshot: Bool? = nil, crossAccountClone: Bool? = nil, customEndpoints: [String]? = nil, databaseName: String? = nil, dBClusterArn: String? = nil, dBClusterIdentifier: String? = nil, dBClusterMembers: [DBClusterMember]? = nil, dBClusterOptionGroupMemberships: [DBClusterOptionGroupStatus]? = nil, dBClusterParameterGroup: String? = nil, dbClusterResourceId: String? = nil, dBSubnetGroup: String? = nil, deletionProtection: Bool? = nil, domainMemberships: [DomainMembership]? = nil, earliestBacktrackTime: Date? = nil, earliestRestorableTime: Date? = nil, enabledCloudwatchLogsExports: [String]? = nil, endpoint: String? = nil, engine: String? = nil, engineMode: String? = nil, engineVersion: String? = nil, globalWriteForwardingRequested: Bool? = nil, globalWriteForwardingStatus: WriteForwardingStatus? = nil, hostedZoneId: String? = nil, httpEndpointEnabled: Bool? = nil, iAMDatabaseAuthenticationEnabled: Bool? = nil, kmsKeyId: String? = nil, latestRestorableTime: Date? = nil, masterUsername: String? = nil, multiAZ: Bool? = nil, pendingModifiedValues: ClusterPendingModifiedValues? = nil, percentProgress: String? = nil, port: Int? = nil, preferredBackupWindow: String? = nil, preferredMaintenanceWindow: String? = nil, readerEndpoint: String? = nil, readReplicaIdentifiers: [String]? = nil, replicationSourceIdentifier: String? = nil, scalingConfigurationInfo: ScalingConfigurationInfo? = nil, status: String? = nil, storageEncrypted: Bool? = nil, tagList: [Tag]? = nil, vpcSecurityGroups: [VpcSecurityGroupMembership]? = nil) {
            self.activityStreamKinesisStreamName = activityStreamKinesisStreamName
            self.activityStreamKmsKeyId = activityStreamKmsKeyId
            self.activityStreamMode = activityStreamMode
            self.activityStreamStatus = activityStreamStatus
            self.allocatedStorage = allocatedStorage
            self.associatedRoles = associatedRoles
            self.availabilityZones = availabilityZones
            self.backtrackConsumedChangeRecords = backtrackConsumedChangeRecords
            self.backtrackWindow = backtrackWindow
            self.backupRetentionPeriod = backupRetentionPeriod
            self.capacity = capacity
            self.characterSetName = characterSetName
            self.cloneGroupId = cloneGroupId
            self.clusterCreateTime = clusterCreateTime
            self.copyTagsToSnapshot = copyTagsToSnapshot
            self.crossAccountClone = crossAccountClone
            self.customEndpoints = customEndpoints
            self.databaseName = databaseName
            self.dBClusterArn = dBClusterArn
            self.dBClusterIdentifier = dBClusterIdentifier
            self.dBClusterMembers = dBClusterMembers
            self.dBClusterOptionGroupMemberships = dBClusterOptionGroupMemberships
            self.dBClusterParameterGroup = dBClusterParameterGroup
            self.dbClusterResourceId = dbClusterResourceId
            self.dBSubnetGroup = dBSubnetGroup
            self.deletionProtection = deletionProtection
            self.domainMemberships = domainMemberships
            self.earliestBacktrackTime = earliestBacktrackTime
            self.earliestRestorableTime = earliestRestorableTime
            self.enabledCloudwatchLogsExports = enabledCloudwatchLogsExports
            self.endpoint = endpoint
            self.engine = engine
            self.engineMode = engineMode
            self.engineVersion = engineVersion
            self.globalWriteForwardingRequested = globalWriteForwardingRequested
            self.globalWriteForwardingStatus = globalWriteForwardingStatus
            self.hostedZoneId = hostedZoneId
            self.httpEndpointEnabled = httpEndpointEnabled
            self.iAMDatabaseAuthenticationEnabled = iAMDatabaseAuthenticationEnabled
            self.kmsKeyId = kmsKeyId
            self.latestRestorableTime = latestRestorableTime
            self.masterUsername = masterUsername
            self.multiAZ = multiAZ
            self.pendingModifiedValues = pendingModifiedValues
            self.percentProgress = percentProgress
            self.port = port
            self.preferredBackupWindow = preferredBackupWindow
            self.preferredMaintenanceWindow = preferredMaintenanceWindow
            self.readerEndpoint = readerEndpoint
            self.readReplicaIdentifiers = readReplicaIdentifiers
            self.replicationSourceIdentifier = replicationSourceIdentifier
            self.scalingConfigurationInfo = scalingConfigurationInfo
            self.status = status
            self.storageEncrypted = storageEncrypted
            self.tagList = tagList
            self.vpcSecurityGroups = vpcSecurityGroups
        }

        private enum CodingKeys: String, CodingKey {
            case activityStreamKinesisStreamName = "ActivityStreamKinesisStreamName"
            case activityStreamKmsKeyId = "ActivityStreamKmsKeyId"
            case activityStreamMode = "ActivityStreamMode"
            case activityStreamStatus = "ActivityStreamStatus"
            case allocatedStorage = "AllocatedStorage"
            case associatedRoles = "AssociatedRoles"
            case availabilityZones = "AvailabilityZones"
            case backtrackConsumedChangeRecords = "BacktrackConsumedChangeRecords"
            case backtrackWindow = "BacktrackWindow"
            case backupRetentionPeriod = "BackupRetentionPeriod"
            case capacity = "Capacity"
            case characterSetName = "CharacterSetName"
            case cloneGroupId = "CloneGroupId"
            case clusterCreateTime = "ClusterCreateTime"
            case copyTagsToSnapshot = "CopyTagsToSnapshot"
            case crossAccountClone = "CrossAccountClone"
            case customEndpoints = "CustomEndpoints"
            case databaseName = "DatabaseName"
            case dBClusterArn = "DBClusterArn"
            case dBClusterIdentifier = "DBClusterIdentifier"
            case dBClusterMembers = "DBClusterMembers"
            case dBClusterOptionGroupMemberships = "DBClusterOptionGroupMemberships"
            case dBClusterParameterGroup = "DBClusterParameterGroup"
            case dbClusterResourceId = "DbClusterResourceId"
            case dBSubnetGroup = "DBSubnetGroup"
            case deletionProtection = "DeletionProtection"
            case domainMemberships = "DomainMemberships"
            case earliestBacktrackTime = "EarliestBacktrackTime"
            case earliestRestorableTime = "EarliestRestorableTime"
            case enabledCloudwatchLogsExports = "EnabledCloudwatchLogsExports"
            case endpoint = "Endpoint"
            case engine = "Engine"
            case engineMode = "EngineMode"
            case engineVersion = "EngineVersion"
            case globalWriteForwardingRequested = "GlobalWriteForwardingRequested"
            case globalWriteForwardingStatus = "GlobalWriteForwardingStatus"
            case hostedZoneId = "HostedZoneId"
            case httpEndpointEnabled = "HttpEndpointEnabled"
            case iAMDatabaseAuthenticationEnabled = "IAMDatabaseAuthenticationEnabled"
            case kmsKeyId = "KmsKeyId"
            case latestRestorableTime = "LatestRestorableTime"
            case masterUsername = "MasterUsername"
            case multiAZ = "MultiAZ"
            case pendingModifiedValues = "PendingModifiedValues"
            case percentProgress = "PercentProgress"
            case port = "Port"
            case preferredBackupWindow = "PreferredBackupWindow"
            case preferredMaintenanceWindow = "PreferredMaintenanceWindow"
            case readerEndpoint = "ReaderEndpoint"
            case readReplicaIdentifiers = "ReadReplicaIdentifiers"
            case replicationSourceIdentifier = "ReplicationSourceIdentifier"
            case scalingConfigurationInfo = "ScalingConfigurationInfo"
            case status = "Status"
            case storageEncrypted = "StorageEncrypted"
            case tagList = "TagList"
            case vpcSecurityGroups = "VpcSecurityGroups"
        }
    }

    public struct DBClusterBacktrack: AWSDecodableShape {
        /// The timestamp of the time from which the DB cluster was backtracked.
        public let backtrackedFrom: Date?
        /// Contains the backtrack identifier.
        public let backtrackIdentifier: String?
        /// The timestamp of the time at which the backtrack was requested.
        public let backtrackRequestCreationTime: Date?
        /// The timestamp of the time to which the DB cluster was backtracked.
        public let backtrackTo: Date?
        /// Contains a user-supplied DB cluster identifier. This identifier is the unique key that identifies a DB cluster.
        public let dBClusterIdentifier: String?
        /// The status of the backtrack. This property returns one of the following values:    applying - The backtrack is currently being applied to or rolled back from the DB cluster.    completed - The backtrack has successfully been applied to or rolled back from the DB cluster.    failed - An error occurred while the backtrack was applied to or rolled back from the DB cluster.    pending - The backtrack is currently pending application to or rollback from the DB cluster.
        public let status: String?

        public init(backtrackedFrom: Date? = nil, backtrackIdentifier: String? = nil, backtrackRequestCreationTime: Date? = nil, backtrackTo: Date? = nil, dBClusterIdentifier: String? = nil, status: String? = nil) {
            self.backtrackedFrom = backtrackedFrom
            self.backtrackIdentifier = backtrackIdentifier
            self.backtrackRequestCreationTime = backtrackRequestCreationTime
            self.backtrackTo = backtrackTo
            self.dBClusterIdentifier = dBClusterIdentifier
            self.status = status
        }

        private enum CodingKeys: String, CodingKey {
            case backtrackedFrom = "BacktrackedFrom"
            case backtrackIdentifier = "BacktrackIdentifier"
            case backtrackRequestCreationTime = "BacktrackRequestCreationTime"
            case backtrackTo = "BacktrackTo"
            case dBClusterIdentifier = "DBClusterIdentifier"
            case status = "Status"
        }
    }

    public struct DBClusterBacktrackMessage: AWSDecodableShape {
        public struct _DBClusterBacktracksEncoding: ArrayCoderProperties { public static let member = "DBClusterBacktrack" }

        /// Contains a list of backtracks for the user.
        @OptionalCustomCoding<ArrayCoder<_DBClusterBacktracksEncoding, DBClusterBacktrack>>
        public var dBClusterBacktracks: [DBClusterBacktrack]?
        /// A pagination token that can be used in a later DescribeDBClusterBacktracks request.
        public let marker: String?

        public init(dBClusterBacktracks: [DBClusterBacktrack]? = nil, marker: String? = nil) {
            self.dBClusterBacktracks = dBClusterBacktracks
            self.marker = marker
        }

        private enum CodingKeys: String, CodingKey {
            case dBClusterBacktracks = "DBClusterBacktracks"
            case marker = "Marker"
        }
    }

    public struct DBClusterCapacityInfo: AWSDecodableShape {
        /// The current capacity of the DB cluster.
        public let currentCapacity: Int?
        /// A user-supplied DB cluster identifier. This identifier is the unique key that identifies a DB cluster.
        public let dBClusterIdentifier: String?
        /// A value that specifies the capacity that the DB cluster scales to next.
        public let pendingCapacity: Int?
        /// The number of seconds before a call to ModifyCurrentDBClusterCapacity times out.
        public let secondsBeforeTimeout: Int?
        /// The timeout action of a call to ModifyCurrentDBClusterCapacity, either ForceApplyCapacityChange or RollbackCapacityChange.
        public let timeoutAction: String?

        public init(currentCapacity: Int? = nil, dBClusterIdentifier: String? = nil, pendingCapacity: Int? = nil, secondsBeforeTimeout: Int? = nil, timeoutAction: String? = nil) {
            self.currentCapacity = currentCapacity
            self.dBClusterIdentifier = dBClusterIdentifier
            self.pendingCapacity = pendingCapacity
            self.secondsBeforeTimeout = secondsBeforeTimeout
            self.timeoutAction = timeoutAction
        }

        private enum CodingKeys: String, CodingKey {
            case currentCapacity = "CurrentCapacity"
            case dBClusterIdentifier = "DBClusterIdentifier"
            case pendingCapacity = "PendingCapacity"
            case secondsBeforeTimeout = "SecondsBeforeTimeout"
            case timeoutAction = "TimeoutAction"
        }
    }

    public struct DBClusterEndpoint: AWSDecodableShape {
        /// The type associated with a custom endpoint. One of: READER, WRITER, ANY.
        public let customEndpointType: String?
        /// The Amazon Resource Name (ARN) for the endpoint.
        public let dBClusterEndpointArn: String?
        /// The identifier associated with the endpoint. This parameter is stored as a lowercase string.
        public let dBClusterEndpointIdentifier: String?
        /// A unique system-generated identifier for an endpoint. It remains the same for the whole life of the endpoint.
        public let dBClusterEndpointResourceIdentifier: String?
        /// The DB cluster identifier of the DB cluster associated with the endpoint. This parameter is stored as a lowercase string.
        public let dBClusterIdentifier: String?
        /// The DNS address of the endpoint.
        public let endpoint: String?
        /// The type of the endpoint. One of: READER, WRITER, CUSTOM.
        public let endpointType: String?
        /// List of DB instance identifiers that aren't part of the custom endpoint group. All other eligible instances are reachable through the custom endpoint. Only relevant if the list of static members is empty.
        @OptionalCustomCoding<StandardArrayCoder>
        public var excludedMembers: [String]?
        /// List of DB instance identifiers that are part of the custom endpoint group.
        @OptionalCustomCoding<StandardArrayCoder>
        public var staticMembers: [String]?
        /// The current status of the endpoint. One of: creating, available, deleting, inactive, modifying. The inactive state applies to an endpoint that can't be used for a certain kind of cluster, such as a writer endpoint for a read-only secondary cluster in a global database.
        public let status: String?

        public init(customEndpointType: String? = nil, dBClusterEndpointArn: String? = nil, dBClusterEndpointIdentifier: String? = nil, dBClusterEndpointResourceIdentifier: String? = nil, dBClusterIdentifier: String? = nil, endpoint: String? = nil, endpointType: String? = nil, excludedMembers: [String]? = nil, staticMembers: [String]? = nil, status: String? = nil) {
            self.customEndpointType = customEndpointType
            self.dBClusterEndpointArn = dBClusterEndpointArn
            self.dBClusterEndpointIdentifier = dBClusterEndpointIdentifier
            self.dBClusterEndpointResourceIdentifier = dBClusterEndpointResourceIdentifier
            self.dBClusterIdentifier = dBClusterIdentifier
            self.endpoint = endpoint
            self.endpointType = endpointType
            self.excludedMembers = excludedMembers
            self.staticMembers = staticMembers
            self.status = status
        }

        private enum CodingKeys: String, CodingKey {
            case customEndpointType = "CustomEndpointType"
            case dBClusterEndpointArn = "DBClusterEndpointArn"
            case dBClusterEndpointIdentifier = "DBClusterEndpointIdentifier"
            case dBClusterEndpointResourceIdentifier = "DBClusterEndpointResourceIdentifier"
            case dBClusterIdentifier = "DBClusterIdentifier"
            case endpoint = "Endpoint"
            case endpointType = "EndpointType"
            case excludedMembers = "ExcludedMembers"
            case staticMembers = "StaticMembers"
            case status = "Status"
        }
    }

    public struct DBClusterEndpointMessage: AWSDecodableShape {
        public struct _DBClusterEndpointsEncoding: ArrayCoderProperties { public static let member = "DBClusterEndpointList" }

        /// Contains the details of the endpoints associated with the cluster and matching any filter conditions.
        @OptionalCustomCoding<ArrayCoder<_DBClusterEndpointsEncoding, DBClusterEndpoint>>
        public var dBClusterEndpoints: [DBClusterEndpoint]?
        ///  An optional pagination token provided by a previous DescribeDBClusterEndpoints request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by MaxRecords.
        public let marker: String?

        public init(dBClusterEndpoints: [DBClusterEndpoint]? = nil, marker: String? = nil) {
            self.dBClusterEndpoints = dBClusterEndpoints
            self.marker = marker
        }

        private enum CodingKeys: String, CodingKey {
            case dBClusterEndpoints = "DBClusterEndpoints"
            case marker = "Marker"
        }
    }

    public struct DBClusterMember: AWSDecodableShape {
        /// Specifies the status of the DB cluster parameter group for this member of the DB cluster.
        public let dBClusterParameterGroupStatus: String?
        /// Specifies the instance identifier for this member of the DB cluster.
        public let dBInstanceIdentifier: String?
        /// Value that is true if the cluster member is the primary instance for the DB cluster and false otherwise.
        public let isClusterWriter: Bool?
        /// A value that specifies the order in which an Aurora Replica is promoted to the primary instance after a failure of the existing primary instance. For more information, see  Fault Tolerance for an Aurora DB Cluster in the Amazon Aurora User Guide.
        public let promotionTier: Int?

        public init(dBClusterParameterGroupStatus: String? = nil, dBInstanceIdentifier: String? = nil, isClusterWriter: Bool? = nil, promotionTier: Int? = nil) {
            self.dBClusterParameterGroupStatus = dBClusterParameterGroupStatus
            self.dBInstanceIdentifier = dBInstanceIdentifier
            self.isClusterWriter = isClusterWriter
            self.promotionTier = promotionTier
        }

        private enum CodingKeys: String, CodingKey {
            case dBClusterParameterGroupStatus = "DBClusterParameterGroupStatus"
            case dBInstanceIdentifier = "DBInstanceIdentifier"
            case isClusterWriter = "IsClusterWriter"
            case promotionTier = "PromotionTier"
        }
    }

    public struct DBClusterMessage: AWSDecodableShape {
        public struct _DBClustersEncoding: ArrayCoderProperties { public static let member = "DBCluster" }

        /// Contains a list of DB clusters for the user.
        @OptionalCustomCoding<ArrayCoder<_DBClustersEncoding, DBCluster>>
        public var dBClusters: [DBCluster]?
        /// A pagination token that can be used in a later DescribeDBClusters request.
        public let marker: String?

        public init(dBClusters: [DBCluster]? = nil, marker: String? = nil) {
            self.dBClusters = dBClusters
            self.marker = marker
        }

        private enum CodingKeys: String, CodingKey {
            case dBClusters = "DBClusters"
            case marker = "Marker"
        }
    }

    public struct DBClusterOptionGroupStatus: AWSDecodableShape {
        /// Specifies the name of the DB cluster option group.
        public let dBClusterOptionGroupName: String?
        /// Specifies the status of the DB cluster option group.
        public let status: String?

        public init(dBClusterOptionGroupName: String? = nil, status: String? = nil) {
            self.dBClusterOptionGroupName = dBClusterOptionGroupName
            self.status = status
        }

        private enum CodingKeys: String, CodingKey {
            case dBClusterOptionGroupName = "DBClusterOptionGroupName"
            case status = "Status"
        }
    }

    public struct DBClusterParameterGroup: AWSDecodableShape {
        /// The Amazon Resource Name (ARN) for the DB cluster parameter group.
        public let dBClusterParameterGroupArn: String?
        /// The name of the DB cluster parameter group.
        public let dBClusterParameterGroupName: String?
        /// The name of the DB parameter group family that this DB cluster parameter group is compatible with.
        public let dBParameterGroupFamily: String?
        /// Provides the customer-specified description for this DB cluster parameter group.
        public let description: String?

        public init(dBClusterParameterGroupArn: String? = nil, dBClusterParameterGroupName: String? = nil, dBParameterGroupFamily: String? = nil, description: String? = nil) {
            self.dBClusterParameterGroupArn = dBClusterParameterGroupArn
            self.dBClusterParameterGroupName = dBClusterParameterGroupName
            self.dBParameterGroupFamily = dBParameterGroupFamily
            self.description = description
        }

        private enum CodingKeys: String, CodingKey {
            case dBClusterParameterGroupArn = "DBClusterParameterGroupArn"
            case dBClusterParameterGroupName = "DBClusterParameterGroupName"
            case dBParameterGroupFamily = "DBParameterGroupFamily"
            case description = "Description"
        }
    }

    public struct DBClusterParameterGroupDetails: AWSDecodableShape {
        public struct _ParametersEncoding: ArrayCoderProperties { public static let member = "Parameter" }

        ///  An optional pagination token provided by a previous DescribeDBClusterParameters request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by MaxRecords .
        public let marker: String?
        /// Provides a list of parameters for the DB cluster parameter group.
        @OptionalCustomCoding<ArrayCoder<_ParametersEncoding, Parameter>>
        public var parameters: [Parameter]?

        public init(marker: String? = nil, parameters: [Parameter]? = nil) {
            self.marker = marker
            self.parameters = parameters
        }

        private enum CodingKeys: String, CodingKey {
            case marker = "Marker"
            case parameters = "Parameters"
        }
    }

    public struct DBClusterParameterGroupNameMessage: AWSDecodableShape {
        /// The name of the DB cluster parameter group. Constraints:   Must be 1 to 255 letters or numbers.   First character must be a letter   Can't end with a hyphen or contain two consecutive hyphens    This value is stored as a lowercase string.
        public let dBClusterParameterGroupName: String?

        public init(dBClusterParameterGroupName: String? = nil) {
            self.dBClusterParameterGroupName = dBClusterParameterGroupName
        }

        private enum CodingKeys: String, CodingKey {
            case dBClusterParameterGroupName = "DBClusterParameterGroupName"
        }
    }

    public struct DBClusterParameterGroupsMessage: AWSDecodableShape {
        public struct _DBClusterParameterGroupsEncoding: ArrayCoderProperties { public static let member = "DBClusterParameterGroup" }

        /// A list of DB cluster parameter groups.
        @OptionalCustomCoding<ArrayCoder<_DBClusterParameterGroupsEncoding, DBClusterParameterGroup>>
        public var dBClusterParameterGroups: [DBClusterParameterGroup]?
        ///  An optional pagination token provided by a previous DescribeDBClusterParameterGroups request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by MaxRecords.
        public let marker: String?

        public init(dBClusterParameterGroups: [DBClusterParameterGroup]? = nil, marker: String? = nil) {
            self.dBClusterParameterGroups = dBClusterParameterGroups
            self.marker = marker
        }

        private enum CodingKeys: String, CodingKey {
            case dBClusterParameterGroups = "DBClusterParameterGroups"
            case marker = "Marker"
        }
    }

    public struct DBClusterRole: AWSDecodableShape {
        /// The name of the feature associated with the Amazon Web Services Identity and Access Management (IAM) role. For the list of supported feature names, see DBEngineVersion.
        public let featureName: String?
        /// The Amazon Resource Name (ARN) of the IAM role that is associated with the DB cluster.
        public let roleArn: String?
        /// Describes the state of association between the IAM role and the DB cluster. The Status property returns one of the following values:    ACTIVE - the IAM role ARN is associated with the DB cluster and can be used to access other Amazon Web Services on your behalf.    PENDING - the IAM role ARN is being associated with the DB cluster.    INVALID - the IAM role ARN is associated with the DB cluster, but the DB cluster is unable to assume the IAM role in order to access other Amazon Web Services on your behalf.
        public let status: String?

        public init(featureName: String? = nil, roleArn: String? = nil, status: String? = nil) {
            self.featureName = featureName
            self.roleArn = roleArn
            self.status = status
        }

        private enum CodingKeys: String, CodingKey {
            case featureName = "FeatureName"
            case roleArn = "RoleArn"
            case status = "Status"
        }
    }

    public struct DBClusterSnapshot: AWSDecodableShape {
        public struct _AvailabilityZonesEncoding: ArrayCoderProperties { public static let member = "AvailabilityZone" }
        public struct _TagListEncoding: ArrayCoderProperties { public static let member = "Tag" }

        /// Specifies the allocated storage size in gibibytes (GiB).
        public let allocatedStorage: Int?
        /// Provides the list of Availability Zones (AZs) where instances in the DB cluster snapshot can be restored.
        @OptionalCustomCoding<ArrayCoder<_AvailabilityZonesEncoding, String>>
        public var availabilityZones: [String]?
        /// Specifies the time when the DB cluster was created, in Universal Coordinated Time (UTC).
        public let clusterCreateTime: Date?
        /// Specifies the DB cluster identifier of the DB cluster that this DB cluster snapshot was created from.
        public let dBClusterIdentifier: String?
        /// The Amazon Resource Name (ARN) for the DB cluster snapshot.
        public let dBClusterSnapshotArn: String?
        /// Specifies the identifier for the DB cluster snapshot.
        public let dBClusterSnapshotIdentifier: String?
        /// Specifies the name of the database engine for this DB cluster snapshot.
        public let engine: String?
        /// Provides the engine mode of the database engine for this DB cluster snapshot.
        public let engineMode: String?
        /// Provides the version of the database engine for this DB cluster snapshot.
        public let engineVersion: String?
        /// True if mapping of Amazon Web Services Identity and Access Management (IAM) accounts to database accounts is enabled, and otherwise false.
        public let iAMDatabaseAuthenticationEnabled: Bool?
        /// If StorageEncrypted is true, the Amazon Web Services KMS key identifier for the encrypted DB cluster snapshot. The Amazon Web Services KMS key identifier is the key ARN, key ID, alias ARN, or alias name for the Amazon Web Services KMS customer master key (CMK).
        public let kmsKeyId: String?
        /// Provides the license model information for this DB cluster snapshot.
        public let licenseModel: String?
        /// Provides the master username for this DB cluster snapshot.
        public let masterUsername: String?
        /// Specifies the percentage of the estimated data that has been transferred.
        public let percentProgress: Int?
        /// Specifies the port that the DB cluster was listening on at the time of the snapshot.
        public let port: Int?
        /// Provides the time when the snapshot was taken, in Universal Coordinated Time (UTC).
        public let snapshotCreateTime: Date?
        /// Provides the type of the DB cluster snapshot.
        public let snapshotType: String?
        /// If the DB cluster snapshot was copied from a source DB cluster snapshot, the Amazon Resource Name (ARN) for the source DB cluster snapshot, otherwise, a null value.
        public let sourceDBClusterSnapshotArn: String?
        /// Specifies the status of this DB cluster snapshot.
        public let status: String?
        /// Specifies whether the DB cluster snapshot is encrypted.
        public let storageEncrypted: Bool?
        @OptionalCustomCoding<ArrayCoder<_TagListEncoding, Tag>>
        public var tagList: [Tag]?
        /// Provides the VPC ID associated with the DB cluster snapshot.
        public let vpcId: String?

        public init(allocatedStorage: Int? = nil, availabilityZones: [String]? = nil, clusterCreateTime: Date? = nil, dBClusterIdentifier: String? = nil, dBClusterSnapshotArn: String? = nil, dBClusterSnapshotIdentifier: String? = nil, engine: String? = nil, engineMode: String? = nil, engineVersion: String? = nil, iAMDatabaseAuthenticationEnabled: Bool? = nil, kmsKeyId: String? = nil, licenseModel: String? = nil, masterUsername: String? = nil, percentProgress: Int? = nil, port: Int? = nil, snapshotCreateTime: Date? = nil, snapshotType: String? = nil, sourceDBClusterSnapshotArn: String? = nil, status: String? = nil, storageEncrypted: Bool? = nil, tagList: [Tag]? = nil, vpcId: String? = nil) {
            self.allocatedStorage = allocatedStorage
            self.availabilityZones = availabilityZones
            self.clusterCreateTime = clusterCreateTime
            self.dBClusterIdentifier = dBClusterIdentifier
            self.dBClusterSnapshotArn = dBClusterSnapshotArn
            self.dBClusterSnapshotIdentifier = dBClusterSnapshotIdentifier
            self.engine = engine
            self.engineMode = engineMode
            self.engineVersion = engineVersion
            self.iAMDatabaseAuthenticationEnabled = iAMDatabaseAuthenticationEnabled
            self.kmsKeyId = kmsKeyId
            self.licenseModel = licenseModel
            self.masterUsername = masterUsername
            self.percentProgress = percentProgress
            self.port = port
            self.snapshotCreateTime = snapshotCreateTime
            self.snapshotType = snapshotType
            self.sourceDBClusterSnapshotArn = sourceDBClusterSnapshotArn
            self.status = status
            self.storageEncrypted = storageEncrypted
            self.tagList = tagList
            self.vpcId = vpcId
        }

        private enum CodingKeys: String, CodingKey {
            case allocatedStorage = "AllocatedStorage"
            case availabilityZones = "AvailabilityZones"
            case clusterCreateTime = "ClusterCreateTime"
            case dBClusterIdentifier = "DBClusterIdentifier"
            case dBClusterSnapshotArn = "DBClusterSnapshotArn"
            case dBClusterSnapshotIdentifier = "DBClusterSnapshotIdentifier"
            case engine = "Engine"
            case engineMode = "EngineMode"
            case engineVersion = "EngineVersion"
            case iAMDatabaseAuthenticationEnabled = "IAMDatabaseAuthenticationEnabled"
            case kmsKeyId = "KmsKeyId"
            case licenseModel = "LicenseModel"
            case masterUsername = "MasterUsername"
            case percentProgress = "PercentProgress"
            case port = "Port"
            case snapshotCreateTime = "SnapshotCreateTime"
            case snapshotType = "SnapshotType"
            case sourceDBClusterSnapshotArn = "SourceDBClusterSnapshotArn"
            case status = "Status"
            case storageEncrypted = "StorageEncrypted"
            case tagList = "TagList"
            case vpcId = "VpcId"
        }
    }

    public struct DBClusterSnapshotAttribute: AWSDecodableShape {
        public struct _AttributeValuesEncoding: ArrayCoderProperties { public static let member = "AttributeValue" }

        /// The name of the manual DB cluster snapshot attribute. The attribute named restore refers to the list of Amazon Web Services accounts that have permission to copy or restore the manual DB cluster snapshot. For more information, see the ModifyDBClusterSnapshotAttribute API action.
        public let attributeName: String?
        /// The value(s) for the manual DB cluster snapshot attribute. If the AttributeName field is set to restore, then this element returns a list of IDs of the Amazon Web Services accounts that are authorized to copy or restore the manual DB cluster snapshot. If a value of all is in the list, then the manual DB cluster snapshot is public and available for any Amazon Web Services account to copy or restore.
        @OptionalCustomCoding<ArrayCoder<_AttributeValuesEncoding, String>>
        public var attributeValues: [String]?

        public init(attributeName: String? = nil, attributeValues: [String]? = nil) {
            self.attributeName = attributeName
            self.attributeValues = attributeValues
        }

        private enum CodingKeys: String, CodingKey {
            case attributeName = "AttributeName"
            case attributeValues = "AttributeValues"
        }
    }

    public struct DBClusterSnapshotAttributesResult: AWSDecodableShape {
        public struct _DBClusterSnapshotAttributesEncoding: ArrayCoderProperties { public static let member = "DBClusterSnapshotAttribute" }

        /// The list of attributes and values for the manual DB cluster snapshot.
        @OptionalCustomCoding<ArrayCoder<_DBClusterSnapshotAttributesEncoding, DBClusterSnapshotAttribute>>
        public var dBClusterSnapshotAttributes: [DBClusterSnapshotAttribute]?
        /// The identifier of the manual DB cluster snapshot that the attributes apply to.
        public let dBClusterSnapshotIdentifier: String?

        public init(dBClusterSnapshotAttributes: [DBClusterSnapshotAttribute]? = nil, dBClusterSnapshotIdentifier: String? = nil) {
            self.dBClusterSnapshotAttributes = dBClusterSnapshotAttributes
            self.dBClusterSnapshotIdentifier = dBClusterSnapshotIdentifier
        }

        private enum CodingKeys: String, CodingKey {
            case dBClusterSnapshotAttributes = "DBClusterSnapshotAttributes"
            case dBClusterSnapshotIdentifier = "DBClusterSnapshotIdentifier"
        }
    }

    public struct DBClusterSnapshotMessage: AWSDecodableShape {
        public struct _DBClusterSnapshotsEncoding: ArrayCoderProperties { public static let member = "DBClusterSnapshot" }

        /// Provides a list of DB cluster snapshots for the user.
        @OptionalCustomCoding<ArrayCoder<_DBClusterSnapshotsEncoding, DBClusterSnapshot>>
        public var dBClusterSnapshots: [DBClusterSnapshot]?
        ///  An optional pagination token provided by a previous DescribeDBClusterSnapshots request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by MaxRecords.
        public let marker: String?

        public init(dBClusterSnapshots: [DBClusterSnapshot]? = nil, marker: String? = nil) {
            self.dBClusterSnapshots = dBClusterSnapshots
            self.marker = marker
        }

        private enum CodingKeys: String, CodingKey {
            case dBClusterSnapshots = "DBClusterSnapshots"
            case marker = "Marker"
        }
    }

    public struct DBEngineVersion: AWSDecodableShape {
        public struct _SupportedCharacterSetsEncoding: ArrayCoderProperties { public static let member = "CharacterSet" }
        public struct _SupportedNcharCharacterSetsEncoding: ArrayCoderProperties { public static let member = "CharacterSet" }
        public struct _SupportedTimezonesEncoding: ArrayCoderProperties { public static let member = "Timezone" }
        public struct _ValidUpgradeTargetEncoding: ArrayCoderProperties { public static let member = "UpgradeTarget" }

        /// The description of the database engine.
        public let dBEngineDescription: String?
        /// The description of the database engine version.
        public let dBEngineVersionDescription: String?
        /// The name of the DB parameter group family for the database engine.
        public let dBParameterGroupFamily: String?
        ///  The default character set for new instances of this engine version, if the CharacterSetName parameter of the CreateDBInstance API isn't specified.
        public let defaultCharacterSet: CharacterSet?
        /// The name of the database engine.
        public let engine: String?
        /// The version number of the database engine.
        public let engineVersion: String?
        /// The types of logs that the database engine has available for export to CloudWatch Logs.
        @OptionalCustomCoding<StandardArrayCoder>
        public var exportableLogTypes: [String]?
        /// The status of the DB engine version, either available or deprecated.
        public let status: String?
        /// A list of the character sets supported by this engine for the CharacterSetName parameter of the CreateDBInstance operation.
        @OptionalCustomCoding<ArrayCoder<_SupportedCharacterSetsEncoding, CharacterSet>>
        public var supportedCharacterSets: [CharacterSet]?
        /// A list of the supported DB engine modes.
        @OptionalCustomCoding<StandardArrayCoder>
        public var supportedEngineModes: [String]?
        ///  A list of features supported by the DB engine. Supported feature names include the following.    s3Import
        @OptionalCustomCoding<StandardArrayCoder>
        public var supportedFeatureNames: [String]?
        /// A list of the character sets supported by the Oracle DB engine for the NcharCharacterSetName parameter of the CreateDBInstance operation.
        @OptionalCustomCoding<ArrayCoder<_SupportedNcharCharacterSetsEncoding, CharacterSet>>
        public var supportedNcharCharacterSets: [CharacterSet]?
        /// A list of the time zones supported by this engine for the Timezone parameter of the CreateDBInstance action.
        @OptionalCustomCoding<ArrayCoder<_SupportedTimezonesEncoding, Timezone>>
        public var supportedTimezones: [Timezone]?
        /// A value that indicates whether you can use Aurora global databases with a specific DB engine version.
        public let supportsGlobalDatabases: Bool?
        /// A value that indicates whether the engine version supports exporting the log types specified by ExportableLogTypes to CloudWatch Logs.
        public let supportsLogExportsToCloudwatchLogs: Bool?
        /// A value that indicates whether you can use Aurora parallel query with a specific DB engine version.
        public let supportsParallelQuery: Bool?
        /// Indicates whether the database engine version supports read replicas.
        public let supportsReadReplica: Bool?
        /// A list of engine versions that this database engine version can be upgraded to.
        @OptionalCustomCoding<ArrayCoder<_ValidUpgradeTargetEncoding, UpgradeTarget>>
        public var validUpgradeTarget: [UpgradeTarget]?

        public init(dBEngineDescription: String? = nil, dBEngineVersionDescription: String? = nil, dBParameterGroupFamily: String? = nil, defaultCharacterSet: CharacterSet? = nil, engine: String? = nil, engineVersion: String? = nil, exportableLogTypes: [String]? = nil, status: String? = nil, supportedCharacterSets: [CharacterSet]? = nil, supportedEngineModes: [String]? = nil, supportedFeatureNames: [String]? = nil, supportedNcharCharacterSets: [CharacterSet]? = nil, supportedTimezones: [Timezone]? = nil, supportsGlobalDatabases: Bool? = nil, supportsLogExportsToCloudwatchLogs: Bool? = nil, supportsParallelQuery: Bool? = nil, supportsReadReplica: Bool? = nil, validUpgradeTarget: [UpgradeTarget]? = nil) {
            self.dBEngineDescription = dBEngineDescription
            self.dBEngineVersionDescription = dBEngineVersionDescription
            self.dBParameterGroupFamily = dBParameterGroupFamily
            self.defaultCharacterSet = defaultCharacterSet
            self.engine = engine
            self.engineVersion = engineVersion
            self.exportableLogTypes = exportableLogTypes
            self.status = status
            self.supportedCharacterSets = supportedCharacterSets
            self.supportedEngineModes = supportedEngineModes
            self.supportedFeatureNames = supportedFeatureNames
            self.supportedNcharCharacterSets = supportedNcharCharacterSets
            self.supportedTimezones = supportedTimezones
            self.supportsGlobalDatabases = supportsGlobalDatabases
            self.supportsLogExportsToCloudwatchLogs = supportsLogExportsToCloudwatchLogs
            self.supportsParallelQuery = supportsParallelQuery
            self.supportsReadReplica = supportsReadReplica
            self.validUpgradeTarget = validUpgradeTarget
        }

        private enum CodingKeys: String, CodingKey {
            case dBEngineDescription = "DBEngineDescription"
            case dBEngineVersionDescription = "DBEngineVersionDescription"
            case dBParameterGroupFamily = "DBParameterGroupFamily"
            case defaultCharacterSet = "DefaultCharacterSet"
            case engine = "Engine"
            case engineVersion = "EngineVersion"
            case exportableLogTypes = "ExportableLogTypes"
            case status = "Status"
            case supportedCharacterSets = "SupportedCharacterSets"
            case supportedEngineModes = "SupportedEngineModes"
            case supportedFeatureNames = "SupportedFeatureNames"
            case supportedNcharCharacterSets = "SupportedNcharCharacterSets"
            case supportedTimezones = "SupportedTimezones"
            case supportsGlobalDatabases = "SupportsGlobalDatabases"
            case supportsLogExportsToCloudwatchLogs = "SupportsLogExportsToCloudwatchLogs"
            case supportsParallelQuery = "SupportsParallelQuery"
            case supportsReadReplica = "SupportsReadReplica"
            case validUpgradeTarget = "ValidUpgradeTarget"
        }
    }

    public struct DBEngineVersionMessage: AWSDecodableShape {
        public struct _DBEngineVersionsEncoding: ArrayCoderProperties { public static let member = "DBEngineVersion" }

        ///  A list of DBEngineVersion elements.
        @OptionalCustomCoding<ArrayCoder<_DBEngineVersionsEncoding, DBEngineVersion>>
        public var dBEngineVersions: [DBEngineVersion]?
        ///  An optional pagination token provided by a previous request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by MaxRecords.
        public let marker: String?

        public init(dBEngineVersions: [DBEngineVersion]? = nil, marker: String? = nil) {
            self.dBEngineVersions = dBEngineVersions
            self.marker = marker
        }

        private enum CodingKeys: String, CodingKey {
            case dBEngineVersions = "DBEngineVersions"
            case marker = "Marker"
        }
    }

    public struct DBInstance: AWSDecodableShape {
        public struct _AssociatedRolesEncoding: ArrayCoderProperties { public static let member = "DBInstanceRole" }
        public struct _DBInstanceAutomatedBackupsReplicationsEncoding: ArrayCoderProperties { public static let member = "DBInstanceAutomatedBackupsReplication" }
        public struct _DBParameterGroupsEncoding: ArrayCoderProperties { public static let member = "DBParameterGroup" }
        public struct _DBSecurityGroupsEncoding: ArrayCoderProperties { public static let member = "DBSecurityGroup" }
        public struct _DomainMembershipsEncoding: ArrayCoderProperties { public static let member = "DomainMembership" }
        public struct _OptionGroupMembershipsEncoding: ArrayCoderProperties { public static let member = "OptionGroupMembership" }
        public struct _ProcessorFeaturesEncoding: ArrayCoderProperties { public static let member = "ProcessorFeature" }
        public struct _ReadReplicaDBClusterIdentifiersEncoding: ArrayCoderProperties { public static let member = "ReadReplicaDBClusterIdentifier" }
        public struct _ReadReplicaDBInstanceIdentifiersEncoding: ArrayCoderProperties { public static let member = "ReadReplicaDBInstanceIdentifier" }
        public struct _StatusInfosEncoding: ArrayCoderProperties { public static let member = "DBInstanceStatusInfo" }
        public struct _TagListEncoding: ArrayCoderProperties { public static let member = "Tag" }
        public struct _VpcSecurityGroupsEncoding: ArrayCoderProperties { public static let member = "VpcSecurityGroupMembership" }

        /// Indicates whether engine-native audit fields are included in the database activity stream.
        public let activityStreamEngineNativeAuditFieldsIncluded: Bool?
        /// The name of the Amazon Kinesis data stream used for the database activity stream.
        public let activityStreamKinesisStreamName: String?
        /// The Amazon Web Services KMS key identifier used for encrypting messages in the database activity stream. The Amazon Web Services KMS key identifier is the key ARN, key ID, alias ARN, or alias name for the Amazon Web Services KMS customer master key (CMK).
        public let activityStreamKmsKeyId: String?
        /// The mode of the database activity stream. Database events such as a change or access generate an activity stream event. RDS for Oracle always handles these events asynchronously.
        public let activityStreamMode: ActivityStreamMode?
        /// The status of the database activity stream.
        public let activityStreamStatus: ActivityStreamStatus?
        /// Specifies the allocated storage size specified in gibibytes.
        public let allocatedStorage: Int?
        ///  The Amazon Web Services Identity and Access Management (IAM) roles associated with the DB instance.
        @OptionalCustomCoding<ArrayCoder<_AssociatedRolesEncoding, DBInstanceRole>>
        public var associatedRoles: [DBInstanceRole]?
        /// A value that indicates that minor version patches are applied automatically.
        public let autoMinorVersionUpgrade: Bool?
        /// Specifies the name of the Availability Zone the DB instance is located in.
        public let availabilityZone: String?
        /// The Amazon Resource Name (ARN) of the recovery point in Amazon Web Services Backup.
        public let awsBackupRecoveryPointArn: String?
        /// Specifies the number of days for which automatic DB snapshots are retained.
        public let backupRetentionPeriod: Int?
        /// The identifier of the CA certificate for this DB instance.
        public let cACertificateIdentifier: String?
        /// If present, specifies the name of the character set that this instance is associated with.
        public let characterSetName: String?
        /// Specifies whether tags are copied from the DB instance to snapshots of the DB instance.  Amazon Aurora  Not applicable. Copying tags to snapshots is managed by the DB cluster. Setting this value for an Aurora DB instance has no effect on the DB cluster setting. For more information, see DBCluster.
        public let copyTagsToSnapshot: Bool?
        /// Specifies whether a customer-owned IP address (CoIP) is enabled for an RDS on Outposts DB instance. A CoIP provides local or external connectivity to resources in your Outpost subnets through your on-premises network. For some use cases, a CoIP can provide lower latency for connections to the DB instance from outside of its virtual private cloud (VPC) on your local network. For more information about RDS on Outposts, see Working with Amazon RDS on Amazon Web Services Outposts in the Amazon RDS User Guide. For more information about CoIPs, see Customer-owned IP addresses in the Amazon Web Services Outposts User Guide.
        public let customerOwnedIpEnabled: Bool?
        /// If the DB instance is a member of a DB cluster, contains the name of the DB cluster that the DB instance is a member of.
        public let dBClusterIdentifier: String?
        /// The Amazon Resource Name (ARN) for the DB instance.
        public let dBInstanceArn: String?
        /// The list of replicated automated backups associated with the DB instance.
        @OptionalCustomCoding<ArrayCoder<_DBInstanceAutomatedBackupsReplicationsEncoding, DBInstanceAutomatedBackupsReplication>>
        public var dBInstanceAutomatedBackupsReplications: [DBInstanceAutomatedBackupsReplication]?
        /// Contains the name of the compute and memory capacity class of the DB instance.
        public let dBInstanceClass: String?
        /// Contains a user-supplied database identifier. This identifier is the unique key that identifies a DB instance.
        public let dBInstanceIdentifier: String?
        /// Specifies the port that the DB instance listens on. If the DB instance is part of a DB cluster, this can be a different port than the DB cluster port.
        public let dbInstancePort: Int?
        /// Specifies the current state of this database. For information about DB instance statuses, see Viewing DB instance status in the Amazon RDS User Guide.
        public let dBInstanceStatus: String?
        /// The Amazon Web Services Region-unique, immutable identifier for the DB instance. This identifier is found in Amazon Web Services CloudTrail log entries whenever the Amazon Web Services KMS customer master key (CMK) for the DB instance is accessed.
        public let dbiResourceId: String?
        /// The meaning of this parameter differs according to the database engine you use.  MySQL, MariaDB, SQL Server, PostgreSQL  Contains the name of the initial database of this instance that was provided at create time, if one was specified when the DB instance was created. This same name is returned for the life of the DB instance. Type: String  Oracle  Contains the Oracle System ID (SID) of the created DB instance. Not shown when the returned parameters do not apply to an Oracle DB instance.
        public let dBName: String?
        /// Provides the list of DB parameter groups applied to this DB instance.
        @OptionalCustomCoding<ArrayCoder<_DBParameterGroupsEncoding, DBParameterGroupStatus>>
        public var dBParameterGroups: [DBParameterGroupStatus]?
        ///  A list of DB security group elements containing DBSecurityGroup.Name and DBSecurityGroup.Status subelements.
        @OptionalCustomCoding<ArrayCoder<_DBSecurityGroupsEncoding, DBSecurityGroupMembership>>
        public var dBSecurityGroups: [DBSecurityGroupMembership]?
        /// Specifies information on the subnet group associated with the DB instance, including the name, description, and subnets in the subnet group.
        public let dBSubnetGroup: DBSubnetGroup?
        /// Indicates if the DB instance has deletion protection enabled. The database can't be deleted when deletion protection is enabled. For more information, see  Deleting a DB Instance.
        public let deletionProtection: Bool?
        /// The Active Directory Domain membership records associated with the DB instance.
        @OptionalCustomCoding<ArrayCoder<_DomainMembershipsEncoding, DomainMembership>>
        public var domainMemberships: [DomainMembership]?
        /// A list of log types that this DB instance is configured to export to CloudWatch Logs. Log types vary by DB engine. For information about the log types for each DB engine, see Amazon RDS Database Log Files in the Amazon RDS User Guide.
        @OptionalCustomCoding<StandardArrayCoder>
        public var enabledCloudwatchLogsExports: [String]?
        /// Specifies the connection endpoint.
        public let endpoint: Endpoint?
        /// The name of the database engine to be used for this DB instance.
        public let engine: String?
        /// Indicates the database engine version.
        public let engineVersion: String?
        /// The Amazon Resource Name (ARN) of the Amazon CloudWatch Logs log stream that receives the Enhanced Monitoring metrics data for the DB instance.
        public let enhancedMonitoringResourceArn: String?
        /// True if mapping of Amazon Web Services Identity and Access Management (IAM) accounts to database accounts is enabled, and otherwise false. IAM database authentication can be enabled for the following database engines   For MySQL 5.6, minor version 5.6.34 or higher   For MySQL 5.7, minor version 5.7.16 or higher   Aurora 5.6 or higher. To enable IAM database authentication for Aurora, see DBCluster Type.
        public let iAMDatabaseAuthenticationEnabled: Bool?
        /// Provides the date and time the DB instance was created.
        public let instanceCreateTime: Date?
        /// Specifies the Provisioned IOPS (I/O operations per second) value.
        public let iops: Int?
        ///  If StorageEncrypted is true, the Amazon Web Services KMS key identifier for the encrypted DB instance.  The Amazon Web Services KMS key identifier is the key ARN, key ID, alias ARN, or alias name for the Amazon Web Services KMS customer master key (CMK).
        public let kmsKeyId: String?
        /// Specifies the latest time to which a database can be restored with point-in-time restore.
        public let latestRestorableTime: Date?
        /// License model information for this DB instance.
        public let licenseModel: String?
        /// Specifies the listener connection endpoint for SQL Server Always On.
        public let listenerEndpoint: Endpoint?
        /// Contains the master username for the DB instance.
        public let masterUsername: String?
        /// The upper limit to which Amazon RDS can automatically scale the storage of the DB instance.
        public let maxAllocatedStorage: Int?
        /// The interval, in seconds, between points when Enhanced Monitoring metrics are collected for the DB instance.
        public let monitoringInterval: Int?
        /// The ARN for the IAM role that permits RDS to send Enhanced Monitoring metrics to Amazon CloudWatch Logs.
        public let monitoringRoleArn: String?
        /// Specifies if the DB instance is a Multi-AZ deployment.
        public let multiAZ: Bool?
        /// The name of the NCHAR character set for the Oracle DB instance. This character set specifies the Unicode encoding for data stored in table columns of type NCHAR, NCLOB, or NVARCHAR2.
        public let ncharCharacterSetName: String?
        /// Provides the list of option group memberships for this DB instance.
        @OptionalCustomCoding<ArrayCoder<_OptionGroupMembershipsEncoding, OptionGroupMembership>>
        public var optionGroupMemberships: [OptionGroupMembership]?
        /// A value that specifies that changes to the DB instance are pending. This element is only included when changes are pending. Specific changes are identified by subelements.
        public let pendingModifiedValues: PendingModifiedValues?
        /// True if Performance Insights is enabled for the DB instance, and otherwise false.
        public let performanceInsightsEnabled: Bool?
        /// The Amazon Web Services KMS key identifier for encryption of Performance Insights data. The Amazon Web Services KMS key identifier is the key ARN, key ID, alias ARN, or alias name for the Amazon Web Services KMS customer master key (CMK).
        public let performanceInsightsKMSKeyId: String?
        /// The amount of time, in days, to retain Performance Insights data. Valid values are 7 or 731 (2 years).
        public let performanceInsightsRetentionPeriod: Int?
        ///  Specifies the daily time range during which automated backups are created if automated backups are enabled, as determined by the BackupRetentionPeriod.
        public let preferredBackupWindow: String?
        /// Specifies the weekly time range during which system maintenance can occur, in Universal Coordinated Time (UTC).
        public let preferredMaintenanceWindow: String?
        /// The number of CPU cores and the number of threads per core for the DB instance class of the DB instance.
        @OptionalCustomCoding<ArrayCoder<_ProcessorFeaturesEncoding, ProcessorFeature>>
        public var processorFeatures: [ProcessorFeature]?
        /// A value that specifies the order in which an Aurora Replica is promoted to the primary instance after a failure of the existing primary instance. For more information, see  Fault Tolerance for an Aurora DB Cluster in the Amazon Aurora User Guide.
        public let promotionTier: Int?
        /// Specifies the accessibility options for the DB instance. When the DB instance is publicly accessible, its DNS endpoint resolves to the private IP address from within the DB instance's VPC, and to the public IP address from outside of the DB instance's VPC. Access to the DB instance is ultimately controlled by the security group it uses, and that public access is not permitted if the security group assigned to the DB instance doesn't permit it. When the DB instance isn't publicly accessible, it is an internal DB instance with a DNS name that resolves to a private IP address. For more information, see CreateDBInstance.
        public let publiclyAccessible: Bool?
        /// Contains one or more identifiers of Aurora DB clusters to which the RDS DB instance is replicated as a read replica. For example, when you create an Aurora read replica of an RDS MySQL DB instance, the Aurora MySQL DB cluster for the Aurora read replica is shown. This output does not contain information about cross region Aurora read replicas.  Currently, each RDS DB instance can have only one Aurora read replica.
        @OptionalCustomCoding<ArrayCoder<_ReadReplicaDBClusterIdentifiersEncoding, String>>
        public var readReplicaDBClusterIdentifiers: [String]?
        /// Contains one or more identifiers of the read replicas associated with this DB instance.
        @OptionalCustomCoding<ArrayCoder<_ReadReplicaDBInstanceIdentifiersEncoding, String>>
        public var readReplicaDBInstanceIdentifiers: [String]?
        /// Contains the identifier of the source DB instance if this DB instance is a read replica.
        public let readReplicaSourceDBInstanceIdentifier: String?
        /// The open mode of an Oracle read replica. The default is open-read-only. For more information, see Working with Oracle Read Replicas for Amazon RDS in the Amazon RDS User Guide.  This attribute is only supported in RDS for Oracle.
        public let replicaMode: ReplicaMode?
        /// If present, specifies the name of the secondary Availability Zone for a DB instance with multi-AZ support.
        public let secondaryAvailabilityZone: String?
        /// The status of a read replica. If the instance isn't a read replica, this is blank.
        @OptionalCustomCoding<ArrayCoder<_StatusInfosEncoding, DBInstanceStatusInfo>>
        public var statusInfos: [DBInstanceStatusInfo]?
        /// Specifies whether the DB instance is encrypted.
        public let storageEncrypted: Bool?
        /// Specifies the storage type associated with DB instance.
        public let storageType: String?
        @OptionalCustomCoding<ArrayCoder<_TagListEncoding, Tag>>
        public var tagList: [Tag]?
        /// The ARN from the key store with which the instance is associated for TDE encryption.
        public let tdeCredentialArn: String?
        /// The time zone of the DB instance. In most cases, the Timezone element is empty. Timezone content appears only for Microsoft SQL Server DB instances that were created with a time zone specified.
        public let timezone: String?
        /// Provides a list of VPC security group elements that the DB instance belongs to.
        @OptionalCustomCoding<ArrayCoder<_VpcSecurityGroupsEncoding, VpcSecurityGroupMembership>>
        public var vpcSecurityGroups: [VpcSecurityGroupMembership]?

        public init(activityStreamEngineNativeAuditFieldsIncluded: Bool? = nil, activityStreamKinesisStreamName: String? = nil, activityStreamKmsKeyId: String? = nil, activityStreamMode: ActivityStreamMode? = nil, activityStreamStatus: ActivityStreamStatus? = nil, allocatedStorage: Int? = nil, associatedRoles: [DBInstanceRole]? = nil, autoMinorVersionUpgrade: Bool? = nil, availabilityZone: String? = nil, awsBackupRecoveryPointArn: String? = nil, backupRetentionPeriod: Int? = nil, cACertificateIdentifier: String? = nil, characterSetName: String? = nil, copyTagsToSnapshot: Bool? = nil, customerOwnedIpEnabled: Bool? = nil, dBClusterIdentifier: String? = nil, dBInstanceArn: String? = nil, dBInstanceAutomatedBackupsReplications: [DBInstanceAutomatedBackupsReplication]? = nil, dBInstanceClass: String? = nil, dBInstanceIdentifier: String? = nil, dbInstancePort: Int? = nil, dBInstanceStatus: String? = nil, dbiResourceId: String? = nil, dBName: String? = nil, dBParameterGroups: [DBParameterGroupStatus]? = nil, dBSecurityGroups: [DBSecurityGroupMembership]? = nil, dBSubnetGroup: DBSubnetGroup? = nil, deletionProtection: Bool? = nil, domainMemberships: [DomainMembership]? = nil, enabledCloudwatchLogsExports: [String]? = nil, endpoint: Endpoint? = nil, engine: String? = nil, engineVersion: String? = nil, enhancedMonitoringResourceArn: String? = nil, iAMDatabaseAuthenticationEnabled: Bool? = nil, instanceCreateTime: Date? = nil, iops: Int? = nil, kmsKeyId: String? = nil, latestRestorableTime: Date? = nil, licenseModel: String? = nil, listenerEndpoint: Endpoint? = nil, masterUsername: String? = nil, maxAllocatedStorage: Int? = nil, monitoringInterval: Int? = nil, monitoringRoleArn: String? = nil, multiAZ: Bool? = nil, ncharCharacterSetName: String? = nil, optionGroupMemberships: [OptionGroupMembership]? = nil, pendingModifiedValues: PendingModifiedValues? = nil, performanceInsightsEnabled: Bool? = nil, performanceInsightsKMSKeyId: String? = nil, performanceInsightsRetentionPeriod: Int? = nil, preferredBackupWindow: String? = nil, preferredMaintenanceWindow: String? = nil, processorFeatures: [ProcessorFeature]? = nil, promotionTier: Int? = nil, publiclyAccessible: Bool? = nil, readReplicaDBClusterIdentifiers: [String]? = nil, readReplicaDBInstanceIdentifiers: [String]? = nil, readReplicaSourceDBInstanceIdentifier: String? = nil, replicaMode: ReplicaMode? = nil, secondaryAvailabilityZone: String? = nil, statusInfos: [DBInstanceStatusInfo]? = nil, storageEncrypted: Bool? = nil, storageType: String? = nil, tagList: [Tag]? = nil, tdeCredentialArn: String? = nil, timezone: String? = nil, vpcSecurityGroups: [VpcSecurityGroupMembership]? = nil) {
            self.activityStreamEngineNativeAuditFieldsIncluded = activityStreamEngineNativeAuditFieldsIncluded
            self.activityStreamKinesisStreamName = activityStreamKinesisStreamName
            self.activityStreamKmsKeyId = activityStreamKmsKeyId
            self.activityStreamMode = activityStreamMode
            self.activityStreamStatus = activityStreamStatus
            self.allocatedStorage = allocatedStorage
            self.associatedRoles = associatedRoles
            self.autoMinorVersionUpgrade = autoMinorVersionUpgrade
            self.availabilityZone = availabilityZone
            self.awsBackupRecoveryPointArn = awsBackupRecoveryPointArn
            self.backupRetentionPeriod = backupRetentionPeriod
            self.cACertificateIdentifier = cACertificateIdentifier
            self.characterSetName = characterSetName
            self.copyTagsToSnapshot = copyTagsToSnapshot
            self.customerOwnedIpEnabled = customerOwnedIpEnabled
            self.dBClusterIdentifier = dBClusterIdentifier
            self.dBInstanceArn = dBInstanceArn
            self.dBInstanceAutomatedBackupsReplications = dBInstanceAutomatedBackupsReplications
            self.dBInstanceClass = dBInstanceClass
            self.dBInstanceIdentifier = dBInstanceIdentifier
            self.dbInstancePort = dbInstancePort
            self.dBInstanceStatus = dBInstanceStatus
            self.dbiResourceId = dbiResourceId
            self.dBName = dBName
            self.dBParameterGroups = dBParameterGroups
            self.dBSecurityGroups = dBSecurityGroups
            self.dBSubnetGroup = dBSubnetGroup
            self.deletionProtection = deletionProtection
            self.domainMemberships = domainMemberships
            self.enabledCloudwatchLogsExports = enabledCloudwatchLogsExports
            self.endpoint = endpoint
            self.engine = engine
            self.engineVersion = engineVersion
            self.enhancedMonitoringResourceArn = enhancedMonitoringResourceArn
            self.iAMDatabaseAuthenticationEnabled = iAMDatabaseAuthenticationEnabled
            self.instanceCreateTime = instanceCreateTime
            self.iops = iops
            self.kmsKeyId = kmsKeyId
            self.latestRestorableTime = latestRestorableTime
            self.licenseModel = licenseModel
            self.listenerEndpoint = listenerEndpoint
            self.masterUsername = masterUsername
            self.maxAllocatedStorage = maxAllocatedStorage
            self.monitoringInterval = monitoringInterval
            self.monitoringRoleArn = monitoringRoleArn
            self.multiAZ = multiAZ
            self.ncharCharacterSetName = ncharCharacterSetName
            self.optionGroupMemberships = optionGroupMemberships
            self.pendingModifiedValues = pendingModifiedValues
            self.performanceInsightsEnabled = performanceInsightsEnabled
            self.performanceInsightsKMSKeyId = performanceInsightsKMSKeyId
            self.performanceInsightsRetentionPeriod = performanceInsightsRetentionPeriod
            self.preferredBackupWindow = preferredBackupWindow
            self.preferredMaintenanceWindow = preferredMaintenanceWindow
            self.processorFeatures = processorFeatures
            self.promotionTier = promotionTier
            self.publiclyAccessible = publiclyAccessible
            self.readReplicaDBClusterIdentifiers = readReplicaDBClusterIdentifiers
            self.readReplicaDBInstanceIdentifiers = readReplicaDBInstanceIdentifiers
            self.readReplicaSourceDBInstanceIdentifier = readReplicaSourceDBInstanceIdentifier
            self.replicaMode = replicaMode
            self.secondaryAvailabilityZone = secondaryAvailabilityZone
            self.statusInfos = statusInfos
            self.storageEncrypted = storageEncrypted
            self.storageType = storageType
            self.tagList = tagList
            self.tdeCredentialArn = tdeCredentialArn
            self.timezone = timezone
            self.vpcSecurityGroups = vpcSecurityGroups
        }

        private enum CodingKeys: String, CodingKey {
            case activityStreamEngineNativeAuditFieldsIncluded = "ActivityStreamEngineNativeAuditFieldsIncluded"
            case activityStreamKinesisStreamName = "ActivityStreamKinesisStreamName"
            case activityStreamKmsKeyId = "ActivityStreamKmsKeyId"
            case activityStreamMode = "ActivityStreamMode"
            case activityStreamStatus = "ActivityStreamStatus"
            case allocatedStorage = "AllocatedStorage"
            case associatedRoles = "AssociatedRoles"
            case autoMinorVersionUpgrade = "AutoMinorVersionUpgrade"
            case availabilityZone = "AvailabilityZone"
            case awsBackupRecoveryPointArn = "AwsBackupRecoveryPointArn"
            case backupRetentionPeriod = "BackupRetentionPeriod"
            case cACertificateIdentifier = "CACertificateIdentifier"
            case characterSetName = "CharacterSetName"
            case copyTagsToSnapshot = "CopyTagsToSnapshot"
            case customerOwnedIpEnabled = "CustomerOwnedIpEnabled"
            case dBClusterIdentifier = "DBClusterIdentifier"
            case dBInstanceArn = "DBInstanceArn"
            case dBInstanceAutomatedBackupsReplications = "DBInstanceAutomatedBackupsReplications"
            case dBInstanceClass = "DBInstanceClass"
            case dBInstanceIdentifier = "DBInstanceIdentifier"
            case dbInstancePort = "DbInstancePort"
            case dBInstanceStatus = "DBInstanceStatus"
            case dbiResourceId = "DbiResourceId"
            case dBName = "DBName"
            case dBParameterGroups = "DBParameterGroups"
            case dBSecurityGroups = "DBSecurityGroups"
            case dBSubnetGroup = "DBSubnetGroup"
            case deletionProtection = "DeletionProtection"
            case domainMemberships = "DomainMemberships"
            case enabledCloudwatchLogsExports = "EnabledCloudwatchLogsExports"
            case endpoint = "Endpoint"
            case engine = "Engine"
            case engineVersion = "EngineVersion"
            case enhancedMonitoringResourceArn = "EnhancedMonitoringResourceArn"
            case iAMDatabaseAuthenticationEnabled = "IAMDatabaseAuthenticationEnabled"
            case instanceCreateTime = "InstanceCreateTime"
            case iops = "Iops"
            case kmsKeyId = "KmsKeyId"
            case latestRestorableTime = "LatestRestorableTime"
            case licenseModel = "LicenseModel"
            case listenerEndpoint = "ListenerEndpoint"
            case masterUsername = "MasterUsername"
            case maxAllocatedStorage = "MaxAllocatedStorage"
            case monitoringInterval = "MonitoringInterval"
            case monitoringRoleArn = "MonitoringRoleArn"
            case multiAZ = "MultiAZ"
            case ncharCharacterSetName = "NcharCharacterSetName"
            case optionGroupMemberships = "OptionGroupMemberships"
            case pendingModifiedValues = "PendingModifiedValues"
            case performanceInsightsEnabled = "PerformanceInsightsEnabled"
            case performanceInsightsKMSKeyId = "PerformanceInsightsKMSKeyId"
            case performanceInsightsRetentionPeriod = "PerformanceInsightsRetentionPeriod"
            case preferredBackupWindow = "PreferredBackupWindow"
            case preferredMaintenanceWindow = "PreferredMaintenanceWindow"
            case processorFeatures = "ProcessorFeatures"
            case promotionTier = "PromotionTier"
            case publiclyAccessible = "PubliclyAccessible"
            case readReplicaDBClusterIdentifiers = "ReadReplicaDBClusterIdentifiers"
            case readReplicaDBInstanceIdentifiers = "ReadReplicaDBInstanceIdentifiers"
            case readReplicaSourceDBInstanceIdentifier = "ReadReplicaSourceDBInstanceIdentifier"
            case replicaMode = "ReplicaMode"
            case secondaryAvailabilityZone = "SecondaryAvailabilityZone"
            case statusInfos = "StatusInfos"
            case storageEncrypted = "StorageEncrypted"
            case storageType = "StorageType"
            case tagList = "TagList"
            case tdeCredentialArn = "TdeCredentialArn"
            case timezone = "Timezone"
            case vpcSecurityGroups = "VpcSecurityGroups"
        }
    }

    public struct DBInstanceAutomatedBackup: AWSDecodableShape {
        public struct _DBInstanceAutomatedBackupsReplicationsEncoding: ArrayCoderProperties { public static let member = "DBInstanceAutomatedBackupsReplication" }

        /// Specifies the allocated storage size in gibibytes (GiB).
        public let allocatedStorage: Int?
        /// The Availability Zone that the automated backup was created in. For information on Amazon Web Services Regions and Availability Zones, see Regions and Availability Zones.
        public let availabilityZone: String?
        /// The retention period for the automated backups.
        public let backupRetentionPeriod: Int?
        /// The Amazon Resource Name (ARN) for the automated backups.
        public let dBInstanceArn: String?
        /// The Amazon Resource Name (ARN) for the replicated automated backups.
        public let dBInstanceAutomatedBackupsArn: String?
        /// The list of replications to different Amazon Web Services Regions associated with the automated backup.
        @OptionalCustomCoding<ArrayCoder<_DBInstanceAutomatedBackupsReplicationsEncoding, DBInstanceAutomatedBackupsReplication>>
        public var dBInstanceAutomatedBackupsReplications: [DBInstanceAutomatedBackupsReplication]?
        /// The customer id of the instance that is/was associated with the automated backup.
        public let dBInstanceIdentifier: String?
        /// The identifier for the source DB instance, which can't be changed and which is unique to an Amazon Web Services Region.
        public let dbiResourceId: String?
        /// Specifies whether the automated backup is encrypted.
        public let encrypted: Bool?
        /// The name of the database engine for this automated backup.
        public let engine: String?
        /// The version of the database engine for the automated backup.
        public let engineVersion: String?
        /// True if mapping of Amazon Web Services Identity and Access Management (IAM) accounts to database accounts is enabled, and otherwise false.
        public let iAMDatabaseAuthenticationEnabled: Bool?
        /// Provides the date and time that the DB instance was created.
        public let instanceCreateTime: Date?
        /// The IOPS (I/O operations per second) value for the automated backup.
        public let iops: Int?
        /// The Amazon Web Services KMS key ID for an automated backup. The Amazon Web Services KMS key identifier is the key ARN, key ID, alias ARN, or alias name for the Amazon Web Services KMS customer master key (CMK).
        public let kmsKeyId: String?
        /// License model information for the automated backup.
        public let licenseModel: String?
        /// The license model of an automated backup.
        public let masterUsername: String?
        /// The option group the automated backup is associated with. If omitted, the default option group for the engine specified is used.
        public let optionGroupName: String?
        /// The port number that the automated backup used for connections. Default: Inherits from the source DB instance Valid Values: 1150-65535
        public let port: Int?
        /// The Amazon Web Services Region associated with the automated backup.
        public let region: String?
        /// Earliest and latest time an instance can be restored to.
        public let restoreWindow: RestoreWindow?
        /// Provides a list of status information for an automated backup:    active - automated backups for current instances    retained - automated backups for deleted instances    creating - automated backups that are waiting for the first automated snapshot to be available.
        public let status: String?
        /// Specifies the storage type associated with the automated backup.
        public let storageType: String?
        /// The ARN from the key store with which the automated backup is associated for TDE encryption.
        public let tdeCredentialArn: String?
        /// The time zone of the automated backup. In most cases, the Timezone element is empty. Timezone content appears only for Microsoft SQL Server DB instances that were created with a time zone specified.
        public let timezone: String?
        /// Provides the VPC ID associated with the DB instance
        public let vpcId: String?

        public init(allocatedStorage: Int? = nil, availabilityZone: String? = nil, backupRetentionPeriod: Int? = nil, dBInstanceArn: String? = nil, dBInstanceAutomatedBackupsArn: String? = nil, dBInstanceAutomatedBackupsReplications: [DBInstanceAutomatedBackupsReplication]? = nil, dBInstanceIdentifier: String? = nil, dbiResourceId: String? = nil, encrypted: Bool? = nil, engine: String? = nil, engineVersion: String? = nil, iAMDatabaseAuthenticationEnabled: Bool? = nil, instanceCreateTime: Date? = nil, iops: Int? = nil, kmsKeyId: String? = nil, licenseModel: String? = nil, masterUsername: String? = nil, optionGroupName: String? = nil, port: Int? = nil, region: String? = nil, restoreWindow: RestoreWindow? = nil, status: String? = nil, storageType: String? = nil, tdeCredentialArn: String? = nil, timezone: String? = nil, vpcId: String? = nil) {
            self.allocatedStorage = allocatedStorage
            self.availabilityZone = availabilityZone
            self.backupRetentionPeriod = backupRetentionPeriod
            self.dBInstanceArn = dBInstanceArn
            self.dBInstanceAutomatedBackupsArn = dBInstanceAutomatedBackupsArn
            self.dBInstanceAutomatedBackupsReplications = dBInstanceAutomatedBackupsReplications
            self.dBInstanceIdentifier = dBInstanceIdentifier
            self.dbiResourceId = dbiResourceId
            self.encrypted = encrypted
            self.engine = engine
            self.engineVersion = engineVersion
            self.iAMDatabaseAuthenticationEnabled = iAMDatabaseAuthenticationEnabled
            self.instanceCreateTime = instanceCreateTime
            self.iops = iops
            self.kmsKeyId = kmsKeyId
            self.licenseModel = licenseModel
            self.masterUsername = masterUsername
            self.optionGroupName = optionGroupName
            self.port = port
            self.region = region
            self.restoreWindow = restoreWindow
            self.status = status
            self.storageType = storageType
            self.tdeCredentialArn = tdeCredentialArn
            self.timezone = timezone
            self.vpcId = vpcId
        }

        private enum CodingKeys: String, CodingKey {
            case allocatedStorage = "AllocatedStorage"
            case availabilityZone = "AvailabilityZone"
            case backupRetentionPeriod = "BackupRetentionPeriod"
            case dBInstanceArn = "DBInstanceArn"
            case dBInstanceAutomatedBackupsArn = "DBInstanceAutomatedBackupsArn"
            case dBInstanceAutomatedBackupsReplications = "DBInstanceAutomatedBackupsReplications"
            case dBInstanceIdentifier = "DBInstanceIdentifier"
            case dbiResourceId = "DbiResourceId"
            case encrypted = "Encrypted"
            case engine = "Engine"
            case engineVersion = "EngineVersion"
            case iAMDatabaseAuthenticationEnabled = "IAMDatabaseAuthenticationEnabled"
            case instanceCreateTime = "InstanceCreateTime"
            case iops = "Iops"
            case kmsKeyId = "KmsKeyId"
            case licenseModel = "LicenseModel"
            case masterUsername = "MasterUsername"
            case optionGroupName = "OptionGroupName"
            case port = "Port"
            case region = "Region"
            case restoreWindow = "RestoreWindow"
            case status = "Status"
            case storageType = "StorageType"
            case tdeCredentialArn = "TdeCredentialArn"
            case timezone = "Timezone"
            case vpcId = "VpcId"
        }
    }

    public struct DBInstanceAutomatedBackupMessage: AWSDecodableShape {
        public struct _DBInstanceAutomatedBackupsEncoding: ArrayCoderProperties { public static let member = "DBInstanceAutomatedBackup" }

        ///  A list of DBInstanceAutomatedBackup instances.
        @OptionalCustomCoding<ArrayCoder<_DBInstanceAutomatedBackupsEncoding, DBInstanceAutomatedBackup>>
        public var dBInstanceAutomatedBackups: [DBInstanceAutomatedBackup]?
        ///  An optional pagination token provided by a previous request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by MaxRecords .
        public let marker: String?

        public init(dBInstanceAutomatedBackups: [DBInstanceAutomatedBackup]? = nil, marker: String? = nil) {
            self.dBInstanceAutomatedBackups = dBInstanceAutomatedBackups
            self.marker = marker
        }

        private enum CodingKeys: String, CodingKey {
            case dBInstanceAutomatedBackups = "DBInstanceAutomatedBackups"
            case marker = "Marker"
        }
    }

    public struct DBInstanceAutomatedBackupsReplication: AWSDecodableShape {
        /// The Amazon Resource Name (ARN) of the replicated automated backups.
        public let dBInstanceAutomatedBackupsArn: String?

        public init(dBInstanceAutomatedBackupsArn: String? = nil) {
            self.dBInstanceAutomatedBackupsArn = dBInstanceAutomatedBackupsArn
        }

        private enum CodingKeys: String, CodingKey {
            case dBInstanceAutomatedBackupsArn = "DBInstanceAutomatedBackupsArn"
        }
    }

    public struct DBInstanceMessage: AWSDecodableShape {
        public struct _DBInstancesEncoding: ArrayCoderProperties { public static let member = "DBInstance" }

        ///  A list of DBInstance instances.
        @OptionalCustomCoding<ArrayCoder<_DBInstancesEncoding, DBInstance>>
        public var dBInstances: [DBInstance]?
        ///  An optional pagination token provided by a previous request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by MaxRecords .
        public let marker: String?

        public init(dBInstances: [DBInstance]? = nil, marker: String? = nil) {
            self.dBInstances = dBInstances
            self.marker = marker
        }

        private enum CodingKeys: String, CodingKey {
            case dBInstances = "DBInstances"
            case marker = "Marker"
        }
    }

    public struct DBInstanceRole: AWSDecodableShape {
        /// The name of the feature associated with the Amazon Web Services Identity and Access Management (IAM) role. For the list of supported feature names, see DBEngineVersion.
        public let featureName: String?
        /// The Amazon Resource Name (ARN) of the IAM role that is associated with the DB instance.
        public let roleArn: String?
        /// Describes the state of association between the IAM role and the DB instance. The Status property returns one of the following values:    ACTIVE - the IAM role ARN is associated with the DB instance and can be used to access other Amazon Web Services services on your behalf.    PENDING - the IAM role ARN is being associated with the DB instance.    INVALID - the IAM role ARN is associated with the DB instance, but the DB instance is unable to assume the IAM role in order to access other Amazon Web Services services on your behalf.
        public let status: String?

        public init(featureName: String? = nil, roleArn: String? = nil, status: String? = nil) {
            self.featureName = featureName
            self.roleArn = roleArn
            self.status = status
        }

        private enum CodingKeys: String, CodingKey {
            case featureName = "FeatureName"
            case roleArn = "RoleArn"
            case status = "Status"
        }
    }

    public struct DBInstanceStatusInfo: AWSDecodableShape {
        /// Details of the error if there is an error for the instance. If the instance isn't in an error state, this value is blank.
        public let message: String?
        /// Boolean value that is true if the instance is operating normally, or false if the instance is in an error state.
        public let normal: Bool?
        /// Status of the DB instance. For a StatusType of read replica, the values can be replicating, replication stop point set, replication stop point reached, error, stopped, or terminated.
        public let status: String?
        /// This value is currently "read replication."
        public let statusType: String?

        public init(message: String? = nil, normal: Bool? = nil, status: String? = nil, statusType: String? = nil) {
            self.message = message
            self.normal = normal
            self.status = status
            self.statusType = statusType
        }

        private enum CodingKeys: String, CodingKey {
            case message = "Message"
            case normal = "Normal"
            case status = "Status"
            case statusType = "StatusType"
        }
    }

    public struct DBParameterGroup: AWSDecodableShape {
        /// The Amazon Resource Name (ARN) for the DB parameter group.
        public let dBParameterGroupArn: String?
        /// The name of the DB parameter group family that this DB parameter group is compatible with.
        public let dBParameterGroupFamily: String?
        /// The name of the DB parameter group.
        public let dBParameterGroupName: String?
        /// Provides the customer-specified description for this DB parameter group.
        public let description: String?

        public init(dBParameterGroupArn: String? = nil, dBParameterGroupFamily: String? = nil, dBParameterGroupName: String? = nil, description: String? = nil) {
            self.dBParameterGroupArn = dBParameterGroupArn
            self.dBParameterGroupFamily = dBParameterGroupFamily
            self.dBParameterGroupName = dBParameterGroupName
            self.description = description
        }

        private enum CodingKeys: String, CodingKey {
            case dBParameterGroupArn = "DBParameterGroupArn"
            case dBParameterGroupFamily = "DBParameterGroupFamily"
            case dBParameterGroupName = "DBParameterGroupName"
            case description = "Description"
        }
    }

    public struct DBParameterGroupDetails: AWSDecodableShape {
        public struct _ParametersEncoding: ArrayCoderProperties { public static let member = "Parameter" }

        ///  An optional pagination token provided by a previous request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by MaxRecords.
        public let marker: String?
        ///  A list of Parameter values.
        @OptionalCustomCoding<ArrayCoder<_ParametersEncoding, Parameter>>
        public var parameters: [Parameter]?

        public init(marker: String? = nil, parameters: [Parameter]? = nil) {
            self.marker = marker
            self.parameters = parameters
        }

        private enum CodingKeys: String, CodingKey {
            case marker = "Marker"
            case parameters = "Parameters"
        }
    }

    public struct DBParameterGroupNameMessage: AWSDecodableShape {
        /// The name of the DB parameter group.
        public let dBParameterGroupName: String?

        public init(dBParameterGroupName: String? = nil) {
            self.dBParameterGroupName = dBParameterGroupName
        }

        private enum CodingKeys: String, CodingKey {
            case dBParameterGroupName = "DBParameterGroupName"
        }
    }

    public struct DBParameterGroupStatus: AWSDecodableShape {
        /// The name of the DB parameter group.
        public let dBParameterGroupName: String?
        /// The status of parameter updates.
        public let parameterApplyStatus: String?

        public init(dBParameterGroupName: String? = nil, parameterApplyStatus: String? = nil) {
            self.dBParameterGroupName = dBParameterGroupName
            self.parameterApplyStatus = parameterApplyStatus
        }

        private enum CodingKeys: String, CodingKey {
            case dBParameterGroupName = "DBParameterGroupName"
            case parameterApplyStatus = "ParameterApplyStatus"
        }
    }

    public struct DBParameterGroupsMessage: AWSDecodableShape {
        public struct _DBParameterGroupsEncoding: ArrayCoderProperties { public static let member = "DBParameterGroup" }

        ///  A list of DBParameterGroup instances.
        @OptionalCustomCoding<ArrayCoder<_DBParameterGroupsEncoding, DBParameterGroup>>
        public var dBParameterGroups: [DBParameterGroup]?
        ///  An optional pagination token provided by a previous request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by MaxRecords.
        public let marker: String?

        public init(dBParameterGroups: [DBParameterGroup]? = nil, marker: String? = nil) {
            self.dBParameterGroups = dBParameterGroups
            self.marker = marker
        }

        private enum CodingKeys: String, CodingKey {
            case dBParameterGroups = "DBParameterGroups"
            case marker = "Marker"
        }
    }

    public struct DBProxy: AWSDecodableShape {
        /// One or more data structures specifying the authorization mechanism to connect to the associated RDS DB instance or Aurora DB cluster.
        @OptionalCustomCoding<StandardArrayCoder>
        public var auth: [UserAuthConfigInfo]?
        /// The date and time when the proxy was first created.
        public let createdDate: Date?
        /// The Amazon Resource Name (ARN) for the proxy.
        public let dBProxyArn: String?
        /// The identifier for the proxy. This name must be unique for all proxies owned by your Amazon Web Services account in the specified Amazon Web Services Region.
        public let dBProxyName: String?
        /// Whether the proxy includes detailed information about SQL statements in its logs. This information helps you to debug issues involving SQL behavior or the performance and scalability of the proxy connections. The debug information includes the text of SQL statements that you submit through the proxy. Thus, only enable this setting when needed for debugging, and only when you have security measures in place to safeguard any sensitive information that appears in the logs.
        public let debugLogging: Bool?
        /// The endpoint that you can use to connect to the DB proxy. You include the endpoint value in the connection string for a database client application.
        public let endpoint: String?
        /// The engine family applies to MySQL and PostgreSQL for both RDS and Aurora.
        public let engineFamily: String?
        /// The number of seconds a connection to the proxy can have no activity before the proxy drops the client connection. The proxy keeps the underlying database connection open and puts it back into the connection pool for reuse by later connection requests. Default: 1800 (30 minutes) Constraints: 1 to 28,800
        public let idleClientTimeout: Int?
        /// Indicates whether Transport Layer Security (TLS) encryption is required for connections to the proxy.
        public let requireTLS: Bool?
        /// The Amazon Resource Name (ARN) for the IAM role that the proxy uses to access Amazon Secrets Manager.
        public let roleArn: String?
        /// The current status of this proxy. A status of available means the proxy is ready to handle requests. Other values indicate that you must wait for the proxy to be ready, or take some action to resolve an issue.
        public let status: DBProxyStatus?
        /// The date and time when the proxy was last updated.
        public let updatedDate: Date?
        /// Provides the VPC ID of the DB proxy.
        public let vpcId: String?
        /// Provides a list of VPC security groups that the proxy belongs to.
        @OptionalCustomCoding<StandardArrayCoder>
        public var vpcSecurityGroupIds: [String]?
        /// The EC2 subnet IDs for the proxy.
        @OptionalCustomCoding<StandardArrayCoder>
        public var vpcSubnetIds: [String]?

        public init(auth: [UserAuthConfigInfo]? = nil, createdDate: Date? = nil, dBProxyArn: String? = nil, dBProxyName: String? = nil, debugLogging: Bool? = nil, endpoint: String? = nil, engineFamily: String? = nil, idleClientTimeout: Int? = nil, requireTLS: Bool? = nil, roleArn: String? = nil, status: DBProxyStatus? = nil, updatedDate: Date? = nil, vpcId: String? = nil, vpcSecurityGroupIds: [String]? = nil, vpcSubnetIds: [String]? = nil) {
            self.auth = auth
            self.createdDate = createdDate
            self.dBProxyArn = dBProxyArn
            self.dBProxyName = dBProxyName
            self.debugLogging = debugLogging
            self.endpoint = endpoint
            self.engineFamily = engineFamily
            self.idleClientTimeout = idleClientTimeout
            self.requireTLS = requireTLS
            self.roleArn = roleArn
            self.status = status
            self.updatedDate = updatedDate
            self.vpcId = vpcId
            self.vpcSecurityGroupIds = vpcSecurityGroupIds
            self.vpcSubnetIds = vpcSubnetIds
        }

        private enum CodingKeys: String, CodingKey {
            case auth = "Auth"
            case createdDate = "CreatedDate"
            case dBProxyArn = "DBProxyArn"
            case dBProxyName = "DBProxyName"
            case debugLogging = "DebugLogging"
            case endpoint = "Endpoint"
            case engineFamily = "EngineFamily"
            case idleClientTimeout = "IdleClientTimeout"
            case requireTLS = "RequireTLS"
            case roleArn = "RoleArn"
            case status = "Status"
            case updatedDate = "UpdatedDate"
            case vpcId = "VpcId"
            case vpcSecurityGroupIds = "VpcSecurityGroupIds"
            case vpcSubnetIds = "VpcSubnetIds"
        }
    }

    public struct DBProxyEndpoint: AWSDecodableShape {
        /// The date and time when the DB proxy endpoint was first created.
        public let createdDate: Date?
        /// The Amazon Resource Name (ARN) for the DB proxy endpoint.
        public let dBProxyEndpointArn: String?
        /// The name for the DB proxy endpoint. An identifier must begin with a letter and must contain only ASCII letters, digits, and hyphens; it can't end with a hyphen or contain two consecutive hyphens.
        public let dBProxyEndpointName: String?
        /// The identifier for the DB proxy that is associated with this DB proxy endpoint.
        public let dBProxyName: String?
        /// The endpoint that you can use to connect to the DB proxy. You include the endpoint value in the connection string for a database client application.
        public let endpoint: String?
        /// A value that indicates whether this endpoint is the default endpoint for the associated DB proxy. Default DB proxy endpoints always have read/write capability. Other endpoints that you associate with the DB proxy can be either read/write or read-only.
        public let isDefault: Bool?
        /// The current status of this DB proxy endpoint. A status of available means the endpoint is ready to handle requests. Other values indicate that you must wait for the endpoint to be ready, or take some action to resolve an issue.
        public let status: DBProxyEndpointStatus?
        /// A value that indicates whether the DB proxy endpoint can be used for read/write or read-only operations.
        public let targetRole: DBProxyEndpointTargetRole?
        /// Provides the VPC ID of the DB proxy endpoint.
        public let vpcId: String?
        /// Provides a list of VPC security groups that the DB proxy endpoint belongs to.
        @OptionalCustomCoding<StandardArrayCoder>
        public var vpcSecurityGroupIds: [String]?
        /// The EC2 subnet IDs for the DB proxy endpoint.
        @OptionalCustomCoding<StandardArrayCoder>
        public var vpcSubnetIds: [String]?

        public init(createdDate: Date? = nil, dBProxyEndpointArn: String? = nil, dBProxyEndpointName: String? = nil, dBProxyName: String? = nil, endpoint: String? = nil, isDefault: Bool? = nil, status: DBProxyEndpointStatus? = nil, targetRole: DBProxyEndpointTargetRole? = nil, vpcId: String? = nil, vpcSecurityGroupIds: [String]? = nil, vpcSubnetIds: [String]? = nil) {
            self.createdDate = createdDate
            self.dBProxyEndpointArn = dBProxyEndpointArn
            self.dBProxyEndpointName = dBProxyEndpointName
            self.dBProxyName = dBProxyName
            self.endpoint = endpoint
            self.isDefault = isDefault
            self.status = status
            self.targetRole = targetRole
            self.vpcId = vpcId
            self.vpcSecurityGroupIds = vpcSecurityGroupIds
            self.vpcSubnetIds = vpcSubnetIds
        }

        private enum CodingKeys: String, CodingKey {
            case createdDate = "CreatedDate"
            case dBProxyEndpointArn = "DBProxyEndpointArn"
            case dBProxyEndpointName = "DBProxyEndpointName"
            case dBProxyName = "DBProxyName"
            case endpoint = "Endpoint"
            case isDefault = "IsDefault"
            case status = "Status"
            case targetRole = "TargetRole"
            case vpcId = "VpcId"
            case vpcSecurityGroupIds = "VpcSecurityGroupIds"
            case vpcSubnetIds = "VpcSubnetIds"
        }
    }

    public struct DBProxyTarget: AWSDecodableShape {
        /// The writer endpoint for the RDS DB instance or Aurora DB cluster.
        public let endpoint: String?
        /// The port that the RDS Proxy uses to connect to the target RDS DB instance or Aurora DB cluster.
        public let port: Int?
        /// The identifier representing the target. It can be the instance identifier for an RDS DB instance, or the cluster identifier for an Aurora DB cluster.
        public let rdsResourceId: String?
        /// A value that indicates whether the target of the proxy can be used for read/write or read-only operations.
        public let role: TargetRole?
        /// The Amazon Resource Name (ARN) for the RDS DB instance or Aurora DB cluster.
        public let targetArn: String?
        /// Information about the connection health of the RDS Proxy target.
        public let targetHealth: TargetHealth?
        /// The DB cluster identifier when the target represents an Aurora DB cluster. This field is blank when the target represents an RDS DB instance.
        public let trackedClusterId: String?
        /// Specifies the kind of database, such as an RDS DB instance or an Aurora DB cluster, that the target represents.
        public let type: TargetType?

        public init(endpoint: String? = nil, port: Int? = nil, rdsResourceId: String? = nil, role: TargetRole? = nil, targetArn: String? = nil, targetHealth: TargetHealth? = nil, trackedClusterId: String? = nil, type: TargetType? = nil) {
            self.endpoint = endpoint
            self.port = port
            self.rdsResourceId = rdsResourceId
            self.role = role
            self.targetArn = targetArn
            self.targetHealth = targetHealth
            self.trackedClusterId = trackedClusterId
            self.type = type
        }

        private enum CodingKeys: String, CodingKey {
            case endpoint = "Endpoint"
            case port = "Port"
            case rdsResourceId = "RdsResourceId"
            case role = "Role"
            case targetArn = "TargetArn"
            case targetHealth = "TargetHealth"
            case trackedClusterId = "TrackedClusterId"
            case type = "Type"
        }
    }

    public struct DBProxyTargetGroup: AWSDecodableShape {
        /// The settings that determine the size and behavior of the connection pool for the target group.
        public let connectionPoolConfig: ConnectionPoolConfigurationInfo?
        /// The date and time when the target group was first created.
        public let createdDate: Date?
        /// The identifier for the RDS proxy associated with this target group.
        public let dBProxyName: String?
        /// Whether this target group is the first one used for connection requests by the associated proxy. Because each proxy is currently associated with a single target group, currently this setting is always true.
        public let isDefault: Bool?
        /// The current status of this target group. A status of available means the target group is correctly associated with a database. Other values indicate that you must wait for the target group to be ready, or take some action to resolve an issue.
        public let status: String?
        /// The Amazon Resource Name (ARN) representing the target group.
        public let targetGroupArn: String?
        /// The identifier for the target group. This name must be unique for all target groups owned by your Amazon Web Services account in the specified Amazon Web Services Region.
        public let targetGroupName: String?
        /// The date and time when the target group was last updated.
        public let updatedDate: Date?

        public init(connectionPoolConfig: ConnectionPoolConfigurationInfo? = nil, createdDate: Date? = nil, dBProxyName: String? = nil, isDefault: Bool? = nil, status: String? = nil, targetGroupArn: String? = nil, targetGroupName: String? = nil, updatedDate: Date? = nil) {
            self.connectionPoolConfig = connectionPoolConfig
            self.createdDate = createdDate
            self.dBProxyName = dBProxyName
            self.isDefault = isDefault
            self.status = status
            self.targetGroupArn = targetGroupArn
            self.targetGroupName = targetGroupName
            self.updatedDate = updatedDate
        }

        private enum CodingKeys: String, CodingKey {
            case connectionPoolConfig = "ConnectionPoolConfig"
            case createdDate = "CreatedDate"
            case dBProxyName = "DBProxyName"
            case isDefault = "IsDefault"
            case status = "Status"
            case targetGroupArn = "TargetGroupArn"
            case targetGroupName = "TargetGroupName"
            case updatedDate = "UpdatedDate"
        }
    }

    public struct DBSecurityGroup: AWSDecodableShape {
        public struct _EC2SecurityGroupsEncoding: ArrayCoderProperties { public static let member = "EC2SecurityGroup" }
        public struct _IPRangesEncoding: ArrayCoderProperties { public static let member = "IPRange" }

        /// The Amazon Resource Name (ARN) for the DB security group.
        public let dBSecurityGroupArn: String?
        /// Provides the description of the DB security group.
        public let dBSecurityGroupDescription: String?
        /// Specifies the name of the DB security group.
        public let dBSecurityGroupName: String?
        ///  Contains a list of EC2SecurityGroup elements.
        @OptionalCustomCoding<ArrayCoder<_EC2SecurityGroupsEncoding, EC2SecurityGroup>>
        public var eC2SecurityGroups: [EC2SecurityGroup]?
        ///  Contains a list of IPRange elements.
        @OptionalCustomCoding<ArrayCoder<_IPRangesEncoding, IPRange>>
        public var iPRanges: [IPRange]?
        /// Provides the Amazon Web Services ID of the owner of a specific DB security group.
        public let ownerId: String?
        /// Provides the VpcId of the DB security group.
        public let vpcId: String?

        public init(dBSecurityGroupArn: String? = nil, dBSecurityGroupDescription: String? = nil, dBSecurityGroupName: String? = nil, eC2SecurityGroups: [EC2SecurityGroup]? = nil, iPRanges: [IPRange]? = nil, ownerId: String? = nil, vpcId: String? = nil) {
            self.dBSecurityGroupArn = dBSecurityGroupArn
            self.dBSecurityGroupDescription = dBSecurityGroupDescription
            self.dBSecurityGroupName = dBSecurityGroupName
            self.eC2SecurityGroups = eC2SecurityGroups
            self.iPRanges = iPRanges
            self.ownerId = ownerId
            self.vpcId = vpcId
        }

        private enum CodingKeys: String, CodingKey {
            case dBSecurityGroupArn = "DBSecurityGroupArn"
            case dBSecurityGroupDescription = "DBSecurityGroupDescription"
            case dBSecurityGroupName = "DBSecurityGroupName"
            case eC2SecurityGroups = "EC2SecurityGroups"
            case iPRanges = "IPRanges"
            case ownerId = "OwnerId"
            case vpcId = "VpcId"
        }
    }

    public struct DBSecurityGroupMembership: AWSDecodableShape {
        /// The name of the DB security group.
        public let dBSecurityGroupName: String?
        /// The status of the DB security group.
        public let status: String?

        public init(dBSecurityGroupName: String? = nil, status: String? = nil) {
            self.dBSecurityGroupName = dBSecurityGroupName
            self.status = status
        }

        private enum CodingKeys: String, CodingKey {
            case dBSecurityGroupName = "DBSecurityGroupName"
            case status = "Status"
        }
    }

    public struct DBSecurityGroupMessage: AWSDecodableShape {
        public struct _DBSecurityGroupsEncoding: ArrayCoderProperties { public static let member = "DBSecurityGroup" }

        ///  A list of DBSecurityGroup instances.
        @OptionalCustomCoding<ArrayCoder<_DBSecurityGroupsEncoding, DBSecurityGroup>>
        public var dBSecurityGroups: [DBSecurityGroup]?
        ///  An optional pagination token provided by a previous request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by MaxRecords.
        public let marker: String?

        public init(dBSecurityGroups: [DBSecurityGroup]? = nil, marker: String? = nil) {
            self.dBSecurityGroups = dBSecurityGroups
            self.marker = marker
        }

        private enum CodingKeys: String, CodingKey {
            case dBSecurityGroups = "DBSecurityGroups"
            case marker = "Marker"
        }
    }

    public struct DBSnapshot: AWSDecodableShape {
        public struct _ProcessorFeaturesEncoding: ArrayCoderProperties { public static let member = "ProcessorFeature" }
        public struct _TagListEncoding: ArrayCoderProperties { public static let member = "Tag" }

        /// Specifies the allocated storage size in gibibytes (GiB).
        public let allocatedStorage: Int?
        /// Specifies the name of the Availability Zone the DB instance was located in at the time of the DB snapshot.
        public let availabilityZone: String?
        /// Specifies the DB instance identifier of the DB instance this DB snapshot was created from.
        public let dBInstanceIdentifier: String?
        /// The identifier for the source DB instance, which can't be changed and which is unique to an Amazon Web Services Region.
        public let dbiResourceId: String?
        /// The Amazon Resource Name (ARN) for the DB snapshot.
        public let dBSnapshotArn: String?
        /// Specifies the identifier for the DB snapshot.
        public let dBSnapshotIdentifier: String?
        /// Specifies whether the DB snapshot is encrypted.
        public let encrypted: Bool?
        /// Specifies the name of the database engine.
        public let engine: String?
        /// Specifies the version of the database engine.
        public let engineVersion: String?
        /// True if mapping of Amazon Web Services Identity and Access Management (IAM) accounts to database accounts is enabled, and otherwise false.
        public let iAMDatabaseAuthenticationEnabled: Bool?
        /// Specifies the time in Coordinated Universal Time (UTC) when the DB instance, from which the snapshot was taken, was created.
        public let instanceCreateTime: Date?
        /// Specifies the Provisioned IOPS (I/O operations per second) value of the DB instance at the time of the snapshot.
        public let iops: Int?
        ///  If Encrypted is true, the Amazon Web Services KMS key identifier for the encrypted DB snapshot.  The Amazon Web Services KMS key identifier is the key ARN, key ID, alias ARN, or alias name for the Amazon Web Services KMS customer master key (CMK).
        public let kmsKeyId: String?
        /// License model information for the restored DB instance.
        public let licenseModel: String?
        /// Provides the master username for the DB snapshot.
        public let masterUsername: String?
        /// Provides the option group name for the DB snapshot.
        public let optionGroupName: String?
        /// The percentage of the estimated data that has been transferred.
        public let percentProgress: Int?
        /// Specifies the port that the database engine was listening on at the time of the snapshot.
        public let port: Int?
        /// The number of CPU cores and the number of threads per core for the DB instance class of the DB instance when the DB snapshot was created.
        @OptionalCustomCoding<ArrayCoder<_ProcessorFeaturesEncoding, ProcessorFeature>>
        public var processorFeatures: [ProcessorFeature]?
        /// Specifies when the snapshot was taken in Coordinated Universal Time (UTC).
        public let snapshotCreateTime: Date?
        /// Provides the type of the DB snapshot.
        public let snapshotType: String?
        /// The DB snapshot Amazon Resource Name (ARN) that the DB snapshot was copied from. It only has value in case of cross-customer or cross-region copy.
        public let sourceDBSnapshotIdentifier: String?
        /// The Amazon Web Services Region that the DB snapshot was created in or copied from.
        public let sourceRegion: String?
        /// Specifies the status of this DB snapshot.
        public let status: String?
        /// Specifies the storage type associated with DB snapshot.
        public let storageType: String?
        @OptionalCustomCoding<ArrayCoder<_TagListEncoding, Tag>>
        public var tagList: [Tag]?
        /// The ARN from the key store with which to associate the instance for TDE encryption.
        public let tdeCredentialArn: String?
        /// The time zone of the DB snapshot. In most cases, the Timezone element is empty. Timezone content appears only for snapshots taken from Microsoft SQL Server DB instances that were created with a time zone specified.
        public let timezone: String?
        /// Provides the VPC ID associated with the DB snapshot.
        public let vpcId: String?

        public init(allocatedStorage: Int? = nil, availabilityZone: String? = nil, dBInstanceIdentifier: String? = nil, dbiResourceId: String? = nil, dBSnapshotArn: String? = nil, dBSnapshotIdentifier: String? = nil, encrypted: Bool? = nil, engine: String? = nil, engineVersion: String? = nil, iAMDatabaseAuthenticationEnabled: Bool? = nil, instanceCreateTime: Date? = nil, iops: Int? = nil, kmsKeyId: String? = nil, licenseModel: String? = nil, masterUsername: String? = nil, optionGroupName: String? = nil, percentProgress: Int? = nil, port: Int? = nil, processorFeatures: [ProcessorFeature]? = nil, snapshotCreateTime: Date? = nil, snapshotType: String? = nil, sourceDBSnapshotIdentifier: String? = nil, sourceRegion: String? = nil, status: String? = nil, storageType: String? = nil, tagList: [Tag]? = nil, tdeCredentialArn: String? = nil, timezone: String? = nil, vpcId: String? = nil) {
            self.allocatedStorage = allocatedStorage
            self.availabilityZone = availabilityZone
            self.dBInstanceIdentifier = dBInstanceIdentifier
            self.dbiResourceId = dbiResourceId
            self.dBSnapshotArn = dBSnapshotArn
            self.dBSnapshotIdentifier = dBSnapshotIdentifier
            self.encrypted = encrypted
            self.engine = engine
            self.engineVersion = engineVersion
            self.iAMDatabaseAuthenticationEnabled = iAMDatabaseAuthenticationEnabled
            self.instanceCreateTime = instanceCreateTime
            self.iops = iops
            self.kmsKeyId = kmsKeyId
            self.licenseModel = licenseModel
            self.masterUsername = masterUsername
            self.optionGroupName = optionGroupName
            self.percentProgress = percentProgress
            self.port = port
            self.processorFeatures = processorFeatures
            self.snapshotCreateTime = snapshotCreateTime
            self.snapshotType = snapshotType
            self.sourceDBSnapshotIdentifier = sourceDBSnapshotIdentifier
            self.sourceRegion = sourceRegion
            self.status = status
            self.storageType = storageType
            self.tagList = tagList
            self.tdeCredentialArn = tdeCredentialArn
            self.timezone = timezone
            self.vpcId = vpcId
        }

        private enum CodingKeys: String, CodingKey {
            case allocatedStorage = "AllocatedStorage"
            case availabilityZone = "AvailabilityZone"
            case dBInstanceIdentifier = "DBInstanceIdentifier"
            case dbiResourceId = "DbiResourceId"
            case dBSnapshotArn = "DBSnapshotArn"
            case dBSnapshotIdentifier = "DBSnapshotIdentifier"
            case encrypted = "Encrypted"
            case engine = "Engine"
            case engineVersion = "EngineVersion"
            case iAMDatabaseAuthenticationEnabled = "IAMDatabaseAuthenticationEnabled"
            case instanceCreateTime = "InstanceCreateTime"
            case iops = "Iops"
            case kmsKeyId = "KmsKeyId"
            case licenseModel = "LicenseModel"
            case masterUsername = "MasterUsername"
            case optionGroupName = "OptionGroupName"
            case percentProgress = "PercentProgress"
            case port = "Port"
            case processorFeatures = "ProcessorFeatures"
            case snapshotCreateTime = "SnapshotCreateTime"
            case snapshotType = "SnapshotType"
            case sourceDBSnapshotIdentifier = "SourceDBSnapshotIdentifier"
            case sourceRegion = "SourceRegion"
            case status = "Status"
            case storageType = "StorageType"
            case tagList = "TagList"
            case tdeCredentialArn = "TdeCredentialArn"
            case timezone = "Timezone"
            case vpcId = "VpcId"
        }
    }

    public struct DBSnapshotAttribute: AWSDecodableShape {
        public struct _AttributeValuesEncoding: ArrayCoderProperties { public static let member = "AttributeValue" }

        /// The name of the manual DB snapshot attribute. The attribute named restore refers to the list of Amazon Web Services accounts that have permission to copy or restore the manual DB cluster snapshot. For more information, see the ModifyDBSnapshotAttribute API action.
        public let attributeName: String?
        /// The value or values for the manual DB snapshot attribute. If the AttributeName field is set to restore, then this element returns a list of IDs of the Amazon Web Services accounts that are authorized to copy or restore the manual DB snapshot. If a value of all is in the list, then the manual DB snapshot is public and available for any Amazon Web Services account to copy or restore.
        @OptionalCustomCoding<ArrayCoder<_AttributeValuesEncoding, String>>
        public var attributeValues: [String]?

        public init(attributeName: String? = nil, attributeValues: [String]? = nil) {
            self.attributeName = attributeName
            self.attributeValues = attributeValues
        }

        private enum CodingKeys: String, CodingKey {
            case attributeName = "AttributeName"
            case attributeValues = "AttributeValues"
        }
    }

    public struct DBSnapshotAttributesResult: AWSDecodableShape {
        public struct _DBSnapshotAttributesEncoding: ArrayCoderProperties { public static let member = "DBSnapshotAttribute" }

        /// The list of attributes and values for the manual DB snapshot.
        @OptionalCustomCoding<ArrayCoder<_DBSnapshotAttributesEncoding, DBSnapshotAttribute>>
        public var dBSnapshotAttributes: [DBSnapshotAttribute]?
        /// The identifier of the manual DB snapshot that the attributes apply to.
        public let dBSnapshotIdentifier: String?

        public init(dBSnapshotAttributes: [DBSnapshotAttribute]? = nil, dBSnapshotIdentifier: String? = nil) {
            self.dBSnapshotAttributes = dBSnapshotAttributes
            self.dBSnapshotIdentifier = dBSnapshotIdentifier
        }

        private enum CodingKeys: String, CodingKey {
            case dBSnapshotAttributes = "DBSnapshotAttributes"
            case dBSnapshotIdentifier = "DBSnapshotIdentifier"
        }
    }

    public struct DBSnapshotMessage: AWSDecodableShape {
        public struct _DBSnapshotsEncoding: ArrayCoderProperties { public static let member = "DBSnapshot" }

        ///  A list of DBSnapshot instances.
        @OptionalCustomCoding<ArrayCoder<_DBSnapshotsEncoding, DBSnapshot>>
        public var dBSnapshots: [DBSnapshot]?
        ///  An optional pagination token provided by a previous request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by MaxRecords.
        public let marker: String?

        public init(dBSnapshots: [DBSnapshot]? = nil, marker: String? = nil) {
            self.dBSnapshots = dBSnapshots
            self.marker = marker
        }

        private enum CodingKeys: String, CodingKey {
            case dBSnapshots = "DBSnapshots"
            case marker = "Marker"
        }
    }

    public struct DBSubnetGroup: AWSDecodableShape {
        public struct _SubnetsEncoding: ArrayCoderProperties { public static let member = "Subnet" }

        /// The Amazon Resource Name (ARN) for the DB subnet group.
        public let dBSubnetGroupArn: String?
        /// Provides the description of the DB subnet group.
        public let dBSubnetGroupDescription: String?
        /// The name of the DB subnet group.
        public let dBSubnetGroupName: String?
        /// Provides the status of the DB subnet group.
        public let subnetGroupStatus: String?
        ///  Contains a list of Subnet elements.
        @OptionalCustomCoding<ArrayCoder<_SubnetsEncoding, Subnet>>
        public var subnets: [Subnet]?
        /// Provides the VpcId of the DB subnet group.
        public let vpcId: String?

        public init(dBSubnetGroupArn: String? = nil, dBSubnetGroupDescription: String? = nil, dBSubnetGroupName: String? = nil, subnetGroupStatus: String? = nil, subnets: [Subnet]? = nil, vpcId: String? = nil) {
            self.dBSubnetGroupArn = dBSubnetGroupArn
            self.dBSubnetGroupDescription = dBSubnetGroupDescription
            self.dBSubnetGroupName = dBSubnetGroupName
            self.subnetGroupStatus = subnetGroupStatus
            self.subnets = subnets
            self.vpcId = vpcId
        }

        private enum CodingKeys: String, CodingKey {
            case dBSubnetGroupArn = "DBSubnetGroupArn"
            case dBSubnetGroupDescription = "DBSubnetGroupDescription"
            case dBSubnetGroupName = "DBSubnetGroupName"
            case subnetGroupStatus = "SubnetGroupStatus"
            case subnets = "Subnets"
            case vpcId = "VpcId"
        }
    }

    public struct DBSubnetGroupMessage: AWSDecodableShape {
        public struct _DBSubnetGroupsEncoding: ArrayCoderProperties { public static let member = "DBSubnetGroup" }

        ///  A list of DBSubnetGroup instances.
        @OptionalCustomCoding<ArrayCoder<_DBSubnetGroupsEncoding, DBSubnetGroup>>
        public var dBSubnetGroups: [DBSubnetGroup]?
        ///  An optional pagination token provided by a previous request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by MaxRecords.
        public let marker: String?

        public init(dBSubnetGroups: [DBSubnetGroup]? = nil, marker: String? = nil) {
            self.dBSubnetGroups = dBSubnetGroups
            self.marker = marker
        }

        private enum CodingKeys: String, CodingKey {
            case dBSubnetGroups = "DBSubnetGroups"
            case marker = "Marker"
        }
    }

    public struct DeleteCustomAvailabilityZoneMessage: AWSEncodableShape {
        /// The custom AZ identifier.
        public let customAvailabilityZoneId: String

        public init(customAvailabilityZoneId: String) {
            self.customAvailabilityZoneId = customAvailabilityZoneId
        }

        private enum CodingKeys: String, CodingKey {
            case customAvailabilityZoneId = "CustomAvailabilityZoneId"
        }
    }

    public struct DeleteCustomAvailabilityZoneResult: AWSDecodableShape {
        public let customAvailabilityZone: CustomAvailabilityZone?

        public init(customAvailabilityZone: CustomAvailabilityZone? = nil) {
            self.customAvailabilityZone = customAvailabilityZone
        }

        private enum CodingKeys: String, CodingKey {
            case customAvailabilityZone = "CustomAvailabilityZone"
        }
    }

    public struct DeleteDBClusterEndpointMessage: AWSEncodableShape {
        /// The identifier associated with the custom endpoint. This parameter is stored as a lowercase string.
        public let dBClusterEndpointIdentifier: String

        public init(dBClusterEndpointIdentifier: String) {
            self.dBClusterEndpointIdentifier = dBClusterEndpointIdentifier
        }

        private enum CodingKeys: String, CodingKey {
            case dBClusterEndpointIdentifier = "DBClusterEndpointIdentifier"
        }
    }

    public struct DeleteDBClusterMessage: AWSEncodableShape {
        /// The DB cluster identifier for the DB cluster to be deleted. This parameter isn't case-sensitive. Constraints:   Must match an existing DBClusterIdentifier.
        public let dBClusterIdentifier: String
        ///  The DB cluster snapshot identifier of the new DB cluster snapshot created when SkipFinalSnapshot is disabled.    Specifying this parameter and also skipping the creation of a final DB cluster snapshot with the SkipFinalShapshot parameter results in an error.  Constraints:   Must be 1 to 255 letters, numbers, or hyphens.   First character must be a letter   Can't end with a hyphen or contain two consecutive hyphens
        public let finalDBSnapshotIdentifier: String?
        /// A value that indicates whether to skip the creation of a final DB cluster snapshot before the DB cluster is deleted. If skip is specified, no DB cluster snapshot is created. If skip isn't specified, a DB cluster snapshot is created before the DB cluster is deleted. By default, skip isn't specified, and the DB cluster snapshot is created. By default, this parameter is disabled.  You must specify a FinalDBSnapshotIdentifier parameter if SkipFinalSnapshot is disabled.
        public let skipFinalSnapshot: Bool?

        public init(dBClusterIdentifier: String, finalDBSnapshotIdentifier: String? = nil, skipFinalSnapshot: Bool? = nil) {
            self.dBClusterIdentifier = dBClusterIdentifier
            self.finalDBSnapshotIdentifier = finalDBSnapshotIdentifier
            self.skipFinalSnapshot = skipFinalSnapshot
        }

        private enum CodingKeys: String, CodingKey {
            case dBClusterIdentifier = "DBClusterIdentifier"
            case finalDBSnapshotIdentifier = "FinalDBSnapshotIdentifier"
            case skipFinalSnapshot = "SkipFinalSnapshot"
        }
    }

    public struct DeleteDBClusterParameterGroupMessage: AWSEncodableShape {
        /// The name of the DB cluster parameter group. Constraints:   Must be the name of an existing DB cluster parameter group.   You can't delete a default DB cluster parameter group.   Can't be associated with any DB clusters.
        public let dBClusterParameterGroupName: String

        public init(dBClusterParameterGroupName: String) {
            self.dBClusterParameterGroupName = dBClusterParameterGroupName
        }

        private enum CodingKeys: String, CodingKey {
            case dBClusterParameterGroupName = "DBClusterParameterGroupName"
        }
    }

    public struct DeleteDBClusterResult: AWSDecodableShape {
        public let dBCluster: DBCluster?

        public init(dBCluster: DBCluster? = nil) {
            self.dBCluster = dBCluster
        }

        private enum CodingKeys: String, CodingKey {
            case dBCluster = "DBCluster"
        }
    }

    public struct DeleteDBClusterSnapshotMessage: AWSEncodableShape {
        /// The identifier of the DB cluster snapshot to delete. Constraints: Must be the name of an existing DB cluster snapshot in the available state.
        public let dBClusterSnapshotIdentifier: String

        public init(dBClusterSnapshotIdentifier: String) {
            self.dBClusterSnapshotIdentifier = dBClusterSnapshotIdentifier
        }

        private enum CodingKeys: String, CodingKey {
            case dBClusterSnapshotIdentifier = "DBClusterSnapshotIdentifier"
        }
    }

    public struct DeleteDBClusterSnapshotResult: AWSDecodableShape {
        public let dBClusterSnapshot: DBClusterSnapshot?

        public init(dBClusterSnapshot: DBClusterSnapshot? = nil) {
            self.dBClusterSnapshot = dBClusterSnapshot
        }

        private enum CodingKeys: String, CodingKey {
            case dBClusterSnapshot = "DBClusterSnapshot"
        }
    }

    public struct DeleteDBInstanceAutomatedBackupMessage: AWSEncodableShape {
        /// The Amazon Resource Name (ARN) of the automated backups to delete, for example, arn:aws:rds:us-east-1:123456789012:auto-backup:ab-L2IJCEXJP7XQ7HOJ4SIEXAMPLE.
        public let dBInstanceAutomatedBackupsArn: String?
        /// The identifier for the source DB instance, which can't be changed and which is unique to an Amazon Web Services Region.
        public let dbiResourceId: String?

        public init(dBInstanceAutomatedBackupsArn: String? = nil, dbiResourceId: String? = nil) {
            self.dBInstanceAutomatedBackupsArn = dBInstanceAutomatedBackupsArn
            self.dbiResourceId = dbiResourceId
        }

        private enum CodingKeys: String, CodingKey {
            case dBInstanceAutomatedBackupsArn = "DBInstanceAutomatedBackupsArn"
            case dbiResourceId = "DbiResourceId"
        }
    }

    public struct DeleteDBInstanceAutomatedBackupResult: AWSDecodableShape {
        public let dBInstanceAutomatedBackup: DBInstanceAutomatedBackup?

        public init(dBInstanceAutomatedBackup: DBInstanceAutomatedBackup? = nil) {
            self.dBInstanceAutomatedBackup = dBInstanceAutomatedBackup
        }

        private enum CodingKeys: String, CodingKey {
            case dBInstanceAutomatedBackup = "DBInstanceAutomatedBackup"
        }
    }

    public struct DeleteDBInstanceMessage: AWSEncodableShape {
        /// The DB instance identifier for the DB instance to be deleted. This parameter isn't case-sensitive. Constraints:   Must match the name of an existing DB instance.
        public let dBInstanceIdentifier: String
        /// A value that indicates whether to remove automated backups immediately after the DB instance is deleted. This parameter isn't case-sensitive. The default is to remove automated backups immediately after the DB instance is deleted.
        public let deleteAutomatedBackups: Bool?
        ///  The DBSnapshotIdentifier of the new DBSnapshot created when the SkipFinalSnapshot parameter is disabled.   Specifying this parameter and also specifying to skip final DB snapshot creation in SkipFinalShapshot results in an error.  Constraints:   Must be 1 to 255 letters or numbers.   First character must be a letter.   Can't end with a hyphen or contain two consecutive hyphens.   Can't be specified when deleting a read replica.
        public let finalDBSnapshotIdentifier: String?
        /// A value that indicates whether to skip the creation of a final DB snapshot before the DB instance is deleted. If skip is specified, no DB snapshot is created. If skip isn't specified, a DB snapshot is created before the DB instance is deleted. By default, skip isn't specified, and the DB snapshot is created. When a DB instance is in a failure state and has a status of 'failed', 'incompatible-restore', or 'incompatible-network', it can only be deleted when skip is specified. Specify skip when deleting a read replica.  The FinalDBSnapshotIdentifier parameter must be specified if skip isn't specified.
        public let skipFinalSnapshot: Bool?

        public init(dBInstanceIdentifier: String, deleteAutomatedBackups: Bool? = nil, finalDBSnapshotIdentifier: String? = nil, skipFinalSnapshot: Bool? = nil) {
            self.dBInstanceIdentifier = dBInstanceIdentifier
            self.deleteAutomatedBackups = deleteAutomatedBackups
            self.finalDBSnapshotIdentifier = finalDBSnapshotIdentifier
            self.skipFinalSnapshot = skipFinalSnapshot
        }

        private enum CodingKeys: String, CodingKey {
            case dBInstanceIdentifier = "DBInstanceIdentifier"
            case deleteAutomatedBackups = "DeleteAutomatedBackups"
            case finalDBSnapshotIdentifier = "FinalDBSnapshotIdentifier"
            case skipFinalSnapshot = "SkipFinalSnapshot"
        }
    }

    public struct DeleteDBInstanceResult: AWSDecodableShape {
        public let dBInstance: DBInstance?

        public init(dBInstance: DBInstance? = nil) {
            self.dBInstance = dBInstance
        }

        private enum CodingKeys: String, CodingKey {
            case dBInstance = "DBInstance"
        }
    }

    public struct DeleteDBParameterGroupMessage: AWSEncodableShape {
        /// The name of the DB parameter group. Constraints:   Must be the name of an existing DB parameter group   You can't delete a default DB parameter group   Can't be associated with any DB instances
        public let dBParameterGroupName: String

        public init(dBParameterGroupName: String) {
            self.dBParameterGroupName = dBParameterGroupName
        }

        private enum CodingKeys: String, CodingKey {
            case dBParameterGroupName = "DBParameterGroupName"
        }
    }

    public struct DeleteDBProxyEndpointRequest: AWSEncodableShape {
        /// The name of the DB proxy endpoint to delete.
        public let dBProxyEndpointName: String

        public init(dBProxyEndpointName: String) {
            self.dBProxyEndpointName = dBProxyEndpointName
        }

        public func validate(name: String) throws {
            try self.validate(self.dBProxyEndpointName, name: "dBProxyEndpointName", parent: name, max: 63)
            try self.validate(self.dBProxyEndpointName, name: "dBProxyEndpointName", parent: name, min: 1)
            try self.validate(self.dBProxyEndpointName, name: "dBProxyEndpointName", parent: name, pattern: "[a-zA-Z][a-zA-Z0-9]*(-[a-zA-Z0-9]+)*")
        }

        private enum CodingKeys: String, CodingKey {
            case dBProxyEndpointName = "DBProxyEndpointName"
        }
    }

    public struct DeleteDBProxyEndpointResponse: AWSDecodableShape {
        /// The data structure representing the details of the DB proxy endpoint that you delete.
        public let dBProxyEndpoint: DBProxyEndpoint?

        public init(dBProxyEndpoint: DBProxyEndpoint? = nil) {
            self.dBProxyEndpoint = dBProxyEndpoint
        }

        private enum CodingKeys: String, CodingKey {
            case dBProxyEndpoint = "DBProxyEndpoint"
        }
    }

    public struct DeleteDBProxyRequest: AWSEncodableShape {
        /// The name of the DB proxy to delete.
        public let dBProxyName: String

        public init(dBProxyName: String) {
            self.dBProxyName = dBProxyName
        }

        private enum CodingKeys: String, CodingKey {
            case dBProxyName = "DBProxyName"
        }
    }

    public struct DeleteDBProxyResponse: AWSDecodableShape {
        /// The data structure representing the details of the DB proxy that you delete.
        public let dBProxy: DBProxy?

        public init(dBProxy: DBProxy? = nil) {
            self.dBProxy = dBProxy
        }

        private enum CodingKeys: String, CodingKey {
            case dBProxy = "DBProxy"
        }
    }

    public struct DeleteDBSecurityGroupMessage: AWSEncodableShape {
        /// The name of the DB security group to delete.  You can't delete the default DB security group.  Constraints:   Must be 1 to 255 letters, numbers, or hyphens.   First character must be a letter   Can't end with a hyphen or contain two consecutive hyphens   Must not be "Default"
        public let dBSecurityGroupName: String

        public init(dBSecurityGroupName: String) {
            self.dBSecurityGroupName = dBSecurityGroupName
        }

        private enum CodingKeys: String, CodingKey {
            case dBSecurityGroupName = "DBSecurityGroupName"
        }
    }

    public struct DeleteDBSnapshotMessage: AWSEncodableShape {
        /// The DB snapshot identifier. Constraints: Must be the name of an existing DB snapshot in the available state.
        public let dBSnapshotIdentifier: String

        public init(dBSnapshotIdentifier: String) {
            self.dBSnapshotIdentifier = dBSnapshotIdentifier
        }

        private enum CodingKeys: String, CodingKey {
            case dBSnapshotIdentifier = "DBSnapshotIdentifier"
        }
    }

    public struct DeleteDBSnapshotResult: AWSDecodableShape {
        public let dBSnapshot: DBSnapshot?

        public init(dBSnapshot: DBSnapshot? = nil) {
            self.dBSnapshot = dBSnapshot
        }

        private enum CodingKeys: String, CodingKey {
            case dBSnapshot = "DBSnapshot"
        }
    }

    public struct DeleteDBSubnetGroupMessage: AWSEncodableShape {
        /// The name of the database subnet group to delete.  You can't delete the default subnet group.  Constraints: Constraints: Must match the name of an existing DBSubnetGroup. Must not be default. Example: mySubnetgroup
        public let dBSubnetGroupName: String

        public init(dBSubnetGroupName: String) {
            self.dBSubnetGroupName = dBSubnetGroupName
        }

        private enum CodingKeys: String, CodingKey {
            case dBSubnetGroupName = "DBSubnetGroupName"
        }
    }

    public struct DeleteEventSubscriptionMessage: AWSEncodableShape {
        /// The name of the RDS event notification subscription you want to delete.
        public let subscriptionName: String

        public init(subscriptionName: String) {
            self.subscriptionName = subscriptionName
        }

        private enum CodingKeys: String, CodingKey {
            case subscriptionName = "SubscriptionName"
        }
    }

    public struct DeleteEventSubscriptionResult: AWSDecodableShape {
        public let eventSubscription: EventSubscription?

        public init(eventSubscription: EventSubscription? = nil) {
            self.eventSubscription = eventSubscription
        }

        private enum CodingKeys: String, CodingKey {
            case eventSubscription = "EventSubscription"
        }
    }

    public struct DeleteGlobalClusterMessage: AWSEncodableShape {
        ///  The cluster identifier of the global database cluster being deleted.
        public let globalClusterIdentifier: String

        public init(globalClusterIdentifier: String) {
            self.globalClusterIdentifier = globalClusterIdentifier
        }

        private enum CodingKeys: String, CodingKey {
            case globalClusterIdentifier = "GlobalClusterIdentifier"
        }
    }

    public struct DeleteGlobalClusterResult: AWSDecodableShape {
        public let globalCluster: GlobalCluster?

        public init(globalCluster: GlobalCluster? = nil) {
            self.globalCluster = globalCluster
        }

        private enum CodingKeys: String, CodingKey {
            case globalCluster = "GlobalCluster"
        }
    }

    public struct DeleteInstallationMediaMessage: AWSEncodableShape {
        /// The installation medium ID.
        public let installationMediaId: String

        public init(installationMediaId: String) {
            self.installationMediaId = installationMediaId
        }

        private enum CodingKeys: String, CodingKey {
            case installationMediaId = "InstallationMediaId"
        }
    }

    public struct DeleteOptionGroupMessage: AWSEncodableShape {
        /// The name of the option group to be deleted.  You can't delete default option groups.
        public let optionGroupName: String

        public init(optionGroupName: String) {
            self.optionGroupName = optionGroupName
        }

        private enum CodingKeys: String, CodingKey {
            case optionGroupName = "OptionGroupName"
        }
    }

    public struct DeregisterDBProxyTargetsRequest: AWSEncodableShape {
        /// One or more DB cluster identifiers.
        @OptionalCustomCoding<StandardArrayCoder>
        public var dBClusterIdentifiers: [String]?
        /// One or more DB instance identifiers.
        @OptionalCustomCoding<StandardArrayCoder>
        public var dBInstanceIdentifiers: [String]?
        /// The identifier of the DBProxy that is associated with the DBProxyTargetGroup.
        public let dBProxyName: String
        /// The identifier of the DBProxyTargetGroup.
        public let targetGroupName: String?

        public init(dBClusterIdentifiers: [String]? = nil, dBInstanceIdentifiers: [String]? = nil, dBProxyName: String, targetGroupName: String? = nil) {
            self.dBClusterIdentifiers = dBClusterIdentifiers
            self.dBInstanceIdentifiers = dBInstanceIdentifiers
            self.dBProxyName = dBProxyName
            self.targetGroupName = targetGroupName
        }

        private enum CodingKeys: String, CodingKey {
            case dBClusterIdentifiers = "DBClusterIdentifiers"
            case dBInstanceIdentifiers = "DBInstanceIdentifiers"
            case dBProxyName = "DBProxyName"
            case targetGroupName = "TargetGroupName"
        }
    }

    public struct DeregisterDBProxyTargetsResponse: AWSDecodableShape {
        public init() {}
    }

    public struct DescribeAccountAttributesMessage: AWSEncodableShape {
        public init() {}
    }

    public struct DescribeCertificatesMessage: AWSEncodableShape {
        public struct _FiltersEncoding: ArrayCoderProperties { public static let member = "Filter" }

        /// The user-supplied certificate identifier. If this parameter is specified, information for only the identified certificate is returned. This parameter isn't case-sensitive. Constraints:   Must match an existing CertificateIdentifier.
        public let certificateIdentifier: String?
        /// This parameter isn't currently supported.
        @OptionalCustomCoding<ArrayCoder<_FiltersEncoding, Filter>>
        public var filters: [Filter]?
        ///  An optional pagination token provided by a previous DescribeCertificates request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by MaxRecords.
        public let marker: String?
        ///  The maximum number of records to include in the response. If more records exist than the specified MaxRecords value, a pagination token called a marker is included in the response so you can retrieve the remaining results.  Default: 100 Constraints: Minimum 20, maximum 100.
        public let maxRecords: Int?

        public init(certificateIdentifier: String? = nil, filters: [Filter]? = nil, marker: String? = nil, maxRecords: Int? = nil) {
            self.certificateIdentifier = certificateIdentifier
            self.filters = filters
            self.marker = marker
            self.maxRecords = maxRecords
        }

        private enum CodingKeys: String, CodingKey {
            case certificateIdentifier = "CertificateIdentifier"
            case filters = "Filters"
            case marker = "Marker"
            case maxRecords = "MaxRecords"
        }
    }

    public struct DescribeCustomAvailabilityZonesMessage: AWSEncodableShape {
        public struct _FiltersEncoding: ArrayCoderProperties { public static let member = "Filter" }

        /// The custom AZ identifier. If this parameter is specified, information from only the specific custom AZ is returned.
        public let customAvailabilityZoneId: String?
        /// A filter that specifies one or more custom AZs to describe.
        @OptionalCustomCoding<ArrayCoder<_FiltersEncoding, Filter>>
        public var filters: [Filter]?
        /// An optional pagination token provided by a previous DescribeCustomAvailabilityZones request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by MaxRecords.
        public let marker: String?
        /// The maximum number of records to include in the response. If more records exist than the specified MaxRecords value, a pagination token called a marker is included in the response so you can retrieve the remaining results. Default: 100 Constraints: Minimum 20, maximum 100.
        public let maxRecords: Int?

        public init(customAvailabilityZoneId: String? = nil, filters: [Filter]? = nil, marker: String? = nil, maxRecords: Int? = nil) {
            self.customAvailabilityZoneId = customAvailabilityZoneId
            self.filters = filters
            self.marker = marker
            self.maxRecords = maxRecords
        }

        private enum CodingKeys: String, CodingKey {
            case customAvailabilityZoneId = "CustomAvailabilityZoneId"
            case filters = "Filters"
            case marker = "Marker"
            case maxRecords = "MaxRecords"
        }
    }

    public struct DescribeDBClusterBacktracksMessage: AWSEncodableShape {
        public struct _FiltersEncoding: ArrayCoderProperties { public static let member = "Filter" }

        /// If specified, this value is the backtrack identifier of the backtrack to be described. Constraints:   Must contain a valid universally unique identifier (UUID). For more information about UUIDs, see A Universally Unique Identifier (UUID) URN Namespace.   Example: 123e4567-e89b-12d3-a456-426655440000
        public let backtrackIdentifier: String?
        /// The DB cluster identifier of the DB cluster to be described. This parameter is stored as a lowercase string. Constraints:   Must contain from 1 to 63 alphanumeric characters or hyphens.   First character must be a letter.   Can't end with a hyphen or contain two consecutive hyphens.   Example: my-cluster1
        public let dBClusterIdentifier: String
        /// A filter that specifies one or more DB clusters to describe. Supported filters include the following:    db-cluster-backtrack-id - Accepts backtrack identifiers. The results list includes information about only the backtracks identified by these identifiers.    db-cluster-backtrack-status - Accepts any of the following backtrack status values:    applying     completed     failed     pending    The results list includes information about only the backtracks identified by these values.
        @OptionalCustomCoding<ArrayCoder<_FiltersEncoding, Filter>>
        public var filters: [Filter]?
        ///  An optional pagination token provided by a previous DescribeDBClusterBacktracks request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by MaxRecords.
        public let marker: String?
        /// The maximum number of records to include in the response. If more records exist than the specified MaxRecords value, a pagination token called a marker is included in the response so you can retrieve the remaining results.  Default: 100 Constraints: Minimum 20, maximum 100.
        public let maxRecords: Int?

        public init(backtrackIdentifier: String? = nil, dBClusterIdentifier: String, filters: [Filter]? = nil, marker: String? = nil, maxRecords: Int? = nil) {
            self.backtrackIdentifier = backtrackIdentifier
            self.dBClusterIdentifier = dBClusterIdentifier
            self.filters = filters
            self.marker = marker
            self.maxRecords = maxRecords
        }

        private enum CodingKeys: String, CodingKey {
            case backtrackIdentifier = "BacktrackIdentifier"
            case dBClusterIdentifier = "DBClusterIdentifier"
            case filters = "Filters"
            case marker = "Marker"
            case maxRecords = "MaxRecords"
        }
    }

    public struct DescribeDBClusterEndpointsMessage: AWSEncodableShape {
        public struct _FiltersEncoding: ArrayCoderProperties { public static let member = "Filter" }

        /// The identifier of the endpoint to describe. This parameter is stored as a lowercase string.
        public let dBClusterEndpointIdentifier: String?
        /// The DB cluster identifier of the DB cluster associated with the endpoint. This parameter is stored as a lowercase string.
        public let dBClusterIdentifier: String?
        /// A set of name-value pairs that define which endpoints to include in the output. The filters are specified as name-value pairs, in the format Name=endpoint_type,Values=endpoint_type1,endpoint_type2,.... Name can be one of: db-cluster-endpoint-type, db-cluster-endpoint-custom-type, db-cluster-endpoint-id, db-cluster-endpoint-status. Values for the  db-cluster-endpoint-type filter can be one or more of: reader, writer, custom. Values for the db-cluster-endpoint-custom-type filter can be one or more of: reader, any. Values for the db-cluster-endpoint-status filter can be one or more of: available, creating, deleting, inactive, modifying.
        @OptionalCustomCoding<ArrayCoder<_FiltersEncoding, Filter>>
        public var filters: [Filter]?
        ///  An optional pagination token provided by a previous DescribeDBClusterEndpoints request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by MaxRecords.
        public let marker: String?
        /// The maximum number of records to include in the response. If more records exist than the specified MaxRecords value, a pagination token called a marker is included in the response so you can retrieve the remaining results.  Default: 100 Constraints: Minimum 20, maximum 100.
        public let maxRecords: Int?

        public init(dBClusterEndpointIdentifier: String? = nil, dBClusterIdentifier: String? = nil, filters: [Filter]? = nil, marker: String? = nil, maxRecords: Int? = nil) {
            self.dBClusterEndpointIdentifier = dBClusterEndpointIdentifier
            self.dBClusterIdentifier = dBClusterIdentifier
            self.filters = filters
            self.marker = marker
            self.maxRecords = maxRecords
        }

        private enum CodingKeys: String, CodingKey {
            case dBClusterEndpointIdentifier = "DBClusterEndpointIdentifier"
            case dBClusterIdentifier = "DBClusterIdentifier"
            case filters = "Filters"
            case marker = "Marker"
            case maxRecords = "MaxRecords"
        }
    }

    public struct DescribeDBClusterParameterGroupsMessage: AWSEncodableShape {
        public struct _FiltersEncoding: ArrayCoderProperties { public static let member = "Filter" }

        /// The name of a specific DB cluster parameter group to return details for. Constraints:   If supplied, must match the name of an existing DBClusterParameterGroup.
        public let dBClusterParameterGroupName: String?
        /// This parameter isn't currently supported.
        @OptionalCustomCoding<ArrayCoder<_FiltersEncoding, Filter>>
        public var filters: [Filter]?
        ///  An optional pagination token provided by a previous DescribeDBClusterParameterGroups request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by MaxRecords.
        public let marker: String?
        ///  The maximum number of records to include in the response. If more records exist than the specified MaxRecords value, a pagination token called a marker is included in the response so you can retrieve the remaining results.  Default: 100 Constraints: Minimum 20, maximum 100.
        public let maxRecords: Int?

        public init(dBClusterParameterGroupName: String? = nil, filters: [Filter]? = nil, marker: String? = nil, maxRecords: Int? = nil) {
            self.dBClusterParameterGroupName = dBClusterParameterGroupName
            self.filters = filters
            self.marker = marker
            self.maxRecords = maxRecords
        }

        private enum CodingKeys: String, CodingKey {
            case dBClusterParameterGroupName = "DBClusterParameterGroupName"
            case filters = "Filters"
            case marker = "Marker"
            case maxRecords = "MaxRecords"
        }
    }

    public struct DescribeDBClusterParametersMessage: AWSEncodableShape {
        public struct _FiltersEncoding: ArrayCoderProperties { public static let member = "Filter" }

        /// The name of a specific DB cluster parameter group to return parameter details for. Constraints:   If supplied, must match the name of an existing DBClusterParameterGroup.
        public let dBClusterParameterGroupName: String
        /// This parameter isn't currently supported.
        @OptionalCustomCoding<ArrayCoder<_FiltersEncoding, Filter>>
        public var filters: [Filter]?
        ///  An optional pagination token provided by a previous DescribeDBClusterParameters request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by MaxRecords.
        public let marker: String?
        ///  The maximum number of records to include in the response. If more records exist than the specified MaxRecords value, a pagination token called a marker is included in the response so you can retrieve the remaining results.  Default: 100 Constraints: Minimum 20, maximum 100.
        public let maxRecords: Int?
        ///  A value that indicates to return only parameters for a specific source. Parameter sources can be engine, service, or customer.
        public let source: String?

        public init(dBClusterParameterGroupName: String, filters: [Filter]? = nil, marker: String? = nil, maxRecords: Int? = nil, source: String? = nil) {
            self.dBClusterParameterGroupName = dBClusterParameterGroupName
            self.filters = filters
            self.marker = marker
            self.maxRecords = maxRecords
            self.source = source
        }

        private enum CodingKeys: String, CodingKey {
            case dBClusterParameterGroupName = "DBClusterParameterGroupName"
            case filters = "Filters"
            case marker = "Marker"
            case maxRecords = "MaxRecords"
            case source = "Source"
        }
    }

    public struct DescribeDBClusterSnapshotAttributesMessage: AWSEncodableShape {
        /// The identifier for the DB cluster snapshot to describe the attributes for.
        public let dBClusterSnapshotIdentifier: String

        public init(dBClusterSnapshotIdentifier: String) {
            self.dBClusterSnapshotIdentifier = dBClusterSnapshotIdentifier
        }

        private enum CodingKeys: String, CodingKey {
            case dBClusterSnapshotIdentifier = "DBClusterSnapshotIdentifier"
        }
    }

    public struct DescribeDBClusterSnapshotAttributesResult: AWSDecodableShape {
        public let dBClusterSnapshotAttributesResult: DBClusterSnapshotAttributesResult?

        public init(dBClusterSnapshotAttributesResult: DBClusterSnapshotAttributesResult? = nil) {
            self.dBClusterSnapshotAttributesResult = dBClusterSnapshotAttributesResult
        }

        private enum CodingKeys: String, CodingKey {
            case dBClusterSnapshotAttributesResult = "DBClusterSnapshotAttributesResult"
        }
    }

    public struct DescribeDBClusterSnapshotsMessage: AWSEncodableShape {
        public struct _FiltersEncoding: ArrayCoderProperties { public static let member = "Filter" }

        /// The ID of the DB cluster to retrieve the list of DB cluster snapshots for. This parameter can't be used in conjunction with the DBClusterSnapshotIdentifier parameter. This parameter isn't case-sensitive.  Constraints:   If supplied, must match the identifier of an existing DBCluster.
        public let dBClusterIdentifier: String?
        /// A specific DB cluster snapshot identifier to describe. This parameter can't be used in conjunction with the DBClusterIdentifier parameter. This value is stored as a lowercase string.  Constraints:   If supplied, must match the identifier of an existing DBClusterSnapshot.   If this identifier is for an automated snapshot, the SnapshotType parameter must also be specified.
        public let dBClusterSnapshotIdentifier: String?
        /// A filter that specifies one or more DB cluster snapshots to describe. Supported filters:    db-cluster-id - Accepts DB cluster identifiers and DB cluster Amazon Resource Names (ARNs).    db-cluster-snapshot-id - Accepts DB cluster snapshot identifiers.    snapshot-type - Accepts types of DB cluster snapshots.    engine - Accepts names of database engines.
        @OptionalCustomCoding<ArrayCoder<_FiltersEncoding, Filter>>
        public var filters: [Filter]?
        /// A value that indicates whether to include manual DB cluster snapshots that are public and can be copied or restored by any Amazon Web Services account. By default, the public snapshots are not included. You can share a manual DB cluster snapshot as public by using the ModifyDBClusterSnapshotAttribute API action.
        public let includePublic: Bool?
        /// A value that indicates whether to include shared manual DB cluster snapshots from other Amazon Web Services accounts that this Amazon Web Services account has been given permission to copy or restore. By default, these snapshots are not included. You can give an Amazon Web Services account permission to restore a manual DB cluster snapshot from another Amazon Web Services account by the ModifyDBClusterSnapshotAttribute API action.
        public let includeShared: Bool?
        /// An optional pagination token provided by a previous DescribeDBClusterSnapshots request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by MaxRecords.
        public let marker: String?
        /// The maximum number of records to include in the response. If more records exist than the specified MaxRecords value, a pagination token called a marker is included in the response so you can retrieve the remaining results.  Default: 100 Constraints: Minimum 20, maximum 100.
        public let maxRecords: Int?
        /// The type of DB cluster snapshots to be returned. You can specify one of the following values:    automated - Return all DB cluster snapshots that have been automatically taken by Amazon RDS for my Amazon Web Services account.    manual - Return all DB cluster snapshots that have been taken by my Amazon Web Services account.    shared - Return all manual DB cluster snapshots that have been shared to my Amazon Web Services account.    public - Return all DB cluster snapshots that have been marked as public.   If you don't specify a SnapshotType value, then both automated and manual DB cluster snapshots are returned. You can include shared DB cluster snapshots with these results by enabling the IncludeShared parameter. You can include public DB cluster snapshots with these results by enabling the IncludePublic parameter. The IncludeShared and IncludePublic parameters don't apply for SnapshotType values of manual or automated. The IncludePublic parameter doesn't apply when SnapshotType is set to shared. The IncludeShared parameter doesn't apply when SnapshotType is set to public.
        public let snapshotType: String?

        public init(dBClusterIdentifier: String? = nil, dBClusterSnapshotIdentifier: String? = nil, filters: [Filter]? = nil, includePublic: Bool? = nil, includeShared: Bool? = nil, marker: String? = nil, maxRecords: Int? = nil, snapshotType: String? = nil) {
            self.dBClusterIdentifier = dBClusterIdentifier
            self.dBClusterSnapshotIdentifier = dBClusterSnapshotIdentifier
            self.filters = filters
            self.includePublic = includePublic
            self.includeShared = includeShared
            self.marker = marker
            self.maxRecords = maxRecords
            self.snapshotType = snapshotType
        }

        private enum CodingKeys: String, CodingKey {
            case dBClusterIdentifier = "DBClusterIdentifier"
            case dBClusterSnapshotIdentifier = "DBClusterSnapshotIdentifier"
            case filters = "Filters"
            case includePublic = "IncludePublic"
            case includeShared = "IncludeShared"
            case marker = "Marker"
            case maxRecords = "MaxRecords"
            case snapshotType = "SnapshotType"
        }
    }

    public struct DescribeDBClustersMessage: AWSEncodableShape {
        public struct _FiltersEncoding: ArrayCoderProperties { public static let member = "Filter" }

        /// The user-supplied DB cluster identifier. If this parameter is specified, information from only the specific DB cluster is returned. This parameter isn't case-sensitive. Constraints:   If supplied, must match an existing DBClusterIdentifier.
        public let dBClusterIdentifier: String?
        /// A filter that specifies one or more DB clusters to describe. Supported filters:    db-cluster-id - Accepts DB cluster identifiers and DB cluster Amazon Resource Names (ARNs). The results list will only include information about the DB clusters identified by these ARNs.
        @OptionalCustomCoding<ArrayCoder<_FiltersEncoding, Filter>>
        public var filters: [Filter]?
        /// Optional Boolean parameter that specifies whether the output includes information about clusters shared from other Amazon Web Services accounts.
        public let includeShared: Bool?
        /// An optional pagination token provided by a previous DescribeDBClusters request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by MaxRecords.
        public let marker: String?
        /// The maximum number of records to include in the response. If more records exist than the specified MaxRecords value, a pagination token called a marker is included in the response so you can retrieve the remaining results.  Default: 100 Constraints: Minimum 20, maximum 100.
        public let maxRecords: Int?

        public init(dBClusterIdentifier: String? = nil, filters: [Filter]? = nil, includeShared: Bool? = nil, marker: String? = nil, maxRecords: Int? = nil) {
            self.dBClusterIdentifier = dBClusterIdentifier
            self.filters = filters
            self.includeShared = includeShared
            self.marker = marker
            self.maxRecords = maxRecords
        }

        private enum CodingKeys: String, CodingKey {
            case dBClusterIdentifier = "DBClusterIdentifier"
            case filters = "Filters"
            case includeShared = "IncludeShared"
            case marker = "Marker"
            case maxRecords = "MaxRecords"
        }
    }

    public struct DescribeDBEngineVersionsMessage: AWSEncodableShape {
        public struct _FiltersEncoding: ArrayCoderProperties { public static let member = "Filter" }

        /// The name of a specific DB parameter group family to return details for. Constraints:   If supplied, must match an existing DBParameterGroupFamily.
        public let dBParameterGroupFamily: String?
        /// A value that indicates whether only the default version of the specified engine or engine and major version combination is returned.
        public let defaultOnly: Bool?
        /// The database engine to return. Valid Values:     aurora (for MySQL 5.6-compatible Aurora)    aurora-mysql (for MySQL 5.7-compatible Aurora)    aurora-postgresql     mariadb     mysql     oracle-ee     oracle-ee-cdb     oracle-se2     oracle-se2-cdb     postgres     sqlserver-ee     sqlserver-se     sqlserver-ex     sqlserver-web
        public let engine: String?
        /// The database engine version to return. Example: 5.1.49
        public let engineVersion: String?
        /// This parameter isn't currently supported.
        @OptionalCustomCoding<ArrayCoder<_FiltersEncoding, Filter>>
        public var filters: [Filter]?
        /// A value that indicates whether to include engine versions that aren't available in the list. The default is to list only available engine versions.
        public let includeAll: Bool?
        /// A value that indicates whether to list the supported character sets for each engine version. If this parameter is enabled and the requested engine supports the CharacterSetName parameter for CreateDBInstance, the response includes a list of supported character sets for each engine version.
        public let listSupportedCharacterSets: Bool?
        /// A value that indicates whether to list the supported time zones for each engine version. If this parameter is enabled and the requested engine supports the TimeZone parameter for CreateDBInstance, the response includes a list of supported time zones for each engine version.
        public let listSupportedTimezones: Bool?
        ///  An optional pagination token provided by a previous request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by MaxRecords.
        public let marker: String?
        ///  The maximum number of records to include in the response. If more than the MaxRecords value is available, a pagination token called a marker is included in the response so you can retrieve the remaining results.  Default: 100 Constraints: Minimum 20, maximum 100.
        public let maxRecords: Int?

        public init(dBParameterGroupFamily: String? = nil, defaultOnly: Bool? = nil, engine: String? = nil, engineVersion: String? = nil, filters: [Filter]? = nil, includeAll: Bool? = nil, listSupportedCharacterSets: Bool? = nil, listSupportedTimezones: Bool? = nil, marker: String? = nil, maxRecords: Int? = nil) {
            self.dBParameterGroupFamily = dBParameterGroupFamily
            self.defaultOnly = defaultOnly
            self.engine = engine
            self.engineVersion = engineVersion
            self.filters = filters
            self.includeAll = includeAll
            self.listSupportedCharacterSets = listSupportedCharacterSets
            self.listSupportedTimezones = listSupportedTimezones
            self.marker = marker
            self.maxRecords = maxRecords
        }

        private enum CodingKeys: String, CodingKey {
            case dBParameterGroupFamily = "DBParameterGroupFamily"
            case defaultOnly = "DefaultOnly"
            case engine = "Engine"
            case engineVersion = "EngineVersion"
            case filters = "Filters"
            case includeAll = "IncludeAll"
            case listSupportedCharacterSets = "ListSupportedCharacterSets"
            case listSupportedTimezones = "ListSupportedTimezones"
            case marker = "Marker"
            case maxRecords = "MaxRecords"
        }
    }

    public struct DescribeDBInstanceAutomatedBackupsMessage: AWSEncodableShape {
        public struct _FiltersEncoding: ArrayCoderProperties { public static let member = "Filter" }

        /// The Amazon Resource Name (ARN) of the replicated automated backups, for example, arn:aws:rds:us-east-1:123456789012:auto-backup:ab-L2IJCEXJP7XQ7HOJ4SIEXAMPLE.
        public let dBInstanceAutomatedBackupsArn: String?
        /// (Optional) The user-supplied instance identifier. If this parameter is specified, it must match the identifier of an existing DB instance. It returns information from the specific DB instance' automated backup. This parameter isn't case-sensitive.
        public let dBInstanceIdentifier: String?
        /// The resource ID of the DB instance that is the source of the automated backup. This parameter isn't case-sensitive.
        public let dbiResourceId: String?
        /// A filter that specifies which resources to return based on status. Supported filters are the following:    status     active - automated backups for current instances    retained - automated backups for deleted instances and after backup replication is stopped    creating - automated backups that are waiting for the first automated snapshot to be available      db-instance-id - Accepts DB instance identifiers and Amazon Resource Names (ARNs). The results list includes only information about the DB instance automated backups identified by these ARNs.    dbi-resource-id - Accepts DB resource identifiers and Amazon Resource Names (ARNs). The results list includes only information about the DB instance resources identified by these ARNs.   Returns all resources by default. The status for each resource is specified in the response.
        @OptionalCustomCoding<ArrayCoder<_FiltersEncoding, Filter>>
        public var filters: [Filter]?
        /// The pagination token provided in the previous request. If this parameter is specified the response includes only records beyond the marker, up to MaxRecords.
        public let marker: String?
        /// The maximum number of records to include in the response. If more records exist than the specified MaxRecords value, a pagination token called a marker is included in the response so that you can retrieve the remaining results.
        public let maxRecords: Int?

        public init(dBInstanceAutomatedBackupsArn: String? = nil, dBInstanceIdentifier: String? = nil, dbiResourceId: String? = nil, filters: [Filter]? = nil, marker: String? = nil, maxRecords: Int? = nil) {
            self.dBInstanceAutomatedBackupsArn = dBInstanceAutomatedBackupsArn
            self.dBInstanceIdentifier = dBInstanceIdentifier
            self.dbiResourceId = dbiResourceId
            self.filters = filters
            self.marker = marker
            self.maxRecords = maxRecords
        }

        private enum CodingKeys: String, CodingKey {
            case dBInstanceAutomatedBackupsArn = "DBInstanceAutomatedBackupsArn"
            case dBInstanceIdentifier = "DBInstanceIdentifier"
            case dbiResourceId = "DbiResourceId"
            case filters = "Filters"
            case marker = "Marker"
            case maxRecords = "MaxRecords"
        }
    }

    public struct DescribeDBInstancesMessage: AWSEncodableShape {
        public struct _FiltersEncoding: ArrayCoderProperties { public static let member = "Filter" }

        /// The user-supplied instance identifier. If this parameter is specified, information from only the specific DB instance is returned. This parameter isn't case-sensitive. Constraints:   If supplied, must match the identifier of an existing DBInstance.
        public let dBInstanceIdentifier: String?
        /// A filter that specifies one or more DB instances to describe. Supported filters:    db-cluster-id - Accepts DB cluster identifiers and DB cluster Amazon Resource Names (ARNs). The results list will only include information about the DB instances associated with the DB clusters identified by these ARNs.    db-instance-id - Accepts DB instance identifiers and DB instance Amazon Resource Names (ARNs). The results list will only include information about the DB instances identified by these ARNs.    dbi-resource-id - Accepts DB instance resource identifiers. The results list will only include information about the DB instances identified by these DB instance resource identifiers.    domain - Accepts Active Directory directory IDs. The results list will only include information about the DB instances associated with these domains.    engine - Accepts engine names. The results list will only include information about the DB instances for these engines.
        @OptionalCustomCoding<ArrayCoder<_FiltersEncoding, Filter>>
        public var filters: [Filter]?
        ///  An optional pagination token provided by a previous DescribeDBInstances request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by MaxRecords.
        public let marker: String?
        ///  The maximum number of records to include in the response. If more records exist than the specified MaxRecords value, a pagination token called a marker is included in the response so that you can retrieve the remaining results.  Default: 100 Constraints: Minimum 20, maximum 100.
        public let maxRecords: Int?

        public init(dBInstanceIdentifier: String? = nil, filters: [Filter]? = nil, marker: String? = nil, maxRecords: Int? = nil) {
            self.dBInstanceIdentifier = dBInstanceIdentifier
            self.filters = filters
            self.marker = marker
            self.maxRecords = maxRecords
        }

        private enum CodingKeys: String, CodingKey {
            case dBInstanceIdentifier = "DBInstanceIdentifier"
            case filters = "Filters"
            case marker = "Marker"
            case maxRecords = "MaxRecords"
        }
    }

    public struct DescribeDBLogFilesDetails: AWSDecodableShape {
        /// A POSIX timestamp when the last log entry was written.
        public let lastWritten: Int64?
        /// The name of the log file for the specified DB instance.
        public let logFileName: String?
        /// The size, in bytes, of the log file for the specified DB instance.
        public let size: Int64?

        public init(lastWritten: Int64? = nil, logFileName: String? = nil, size: Int64? = nil) {
            self.lastWritten = lastWritten
            self.logFileName = logFileName
            self.size = size
        }

        private enum CodingKeys: String, CodingKey {
            case lastWritten = "LastWritten"
            case logFileName = "LogFileName"
            case size = "Size"
        }
    }

    public struct DescribeDBLogFilesMessage: AWSEncodableShape {
        public struct _FiltersEncoding: ArrayCoderProperties { public static let member = "Filter" }

        /// The customer-assigned name of the DB instance that contains the log files you want to list. Constraints:   Must match the identifier of an existing DBInstance.
        public let dBInstanceIdentifier: String
        /// Filters the available log files for files written since the specified date, in POSIX timestamp format with milliseconds.
        public let fileLastWritten: Int64?
        /// Filters the available log files for log file names that contain the specified string.
        public let filenameContains: String?
        /// Filters the available log files for files larger than the specified size.
        public let fileSize: Int64?
        /// This parameter isn't currently supported.
        @OptionalCustomCoding<ArrayCoder<_FiltersEncoding, Filter>>
        public var filters: [Filter]?
        /// The pagination token provided in the previous request. If this parameter is specified the response includes only records beyond the marker, up to MaxRecords.
        public let marker: String?
        /// The maximum number of records to include in the response. If more records exist than the specified MaxRecords value, a pagination token called a marker is included in the response so you can retrieve the remaining results.
        public let maxRecords: Int?

        public init(dBInstanceIdentifier: String, fileLastWritten: Int64? = nil, filenameContains: String? = nil, fileSize: Int64? = nil, filters: [Filter]? = nil, marker: String? = nil, maxRecords: Int? = nil) {
            self.dBInstanceIdentifier = dBInstanceIdentifier
            self.fileLastWritten = fileLastWritten
            self.filenameContains = filenameContains
            self.fileSize = fileSize
            self.filters = filters
            self.marker = marker
            self.maxRecords = maxRecords
        }

        private enum CodingKeys: String, CodingKey {
            case dBInstanceIdentifier = "DBInstanceIdentifier"
            case fileLastWritten = "FileLastWritten"
            case filenameContains = "FilenameContains"
            case fileSize = "FileSize"
            case filters = "Filters"
            case marker = "Marker"
            case maxRecords = "MaxRecords"
        }
    }

    public struct DescribeDBLogFilesResponse: AWSDecodableShape {
        public struct _DescribeDBLogFilesEncoding: ArrayCoderProperties { public static let member = "DescribeDBLogFilesDetails" }

        /// The DB log files returned.
        @OptionalCustomCoding<ArrayCoder<_DescribeDBLogFilesEncoding, DescribeDBLogFilesDetails>>
        public var describeDBLogFiles: [DescribeDBLogFilesDetails]?
        /// A pagination token that can be used in a later DescribeDBLogFiles request.
        public let marker: String?

        public init(describeDBLogFiles: [DescribeDBLogFilesDetails]? = nil, marker: String? = nil) {
            self.describeDBLogFiles = describeDBLogFiles
            self.marker = marker
        }

        private enum CodingKeys: String, CodingKey {
            case describeDBLogFiles = "DescribeDBLogFiles"
            case marker = "Marker"
        }
    }

    public struct DescribeDBParameterGroupsMessage: AWSEncodableShape {
        public struct _FiltersEncoding: ArrayCoderProperties { public static let member = "Filter" }

        /// The name of a specific DB parameter group to return details for. Constraints:   If supplied, must match the name of an existing DBClusterParameterGroup.
        public let dBParameterGroupName: String?
        /// This parameter isn't currently supported.
        @OptionalCustomCoding<ArrayCoder<_FiltersEncoding, Filter>>
        public var filters: [Filter]?
        ///  An optional pagination token provided by a previous DescribeDBParameterGroups request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by MaxRecords.
        public let marker: String?
        ///  The maximum number of records to include in the response. If more records exist than the specified MaxRecords value, a pagination token called a marker is included in the response so that you can retrieve the remaining results.  Default: 100 Constraints: Minimum 20, maximum 100.
        public let maxRecords: Int?

        public init(dBParameterGroupName: String? = nil, filters: [Filter]? = nil, marker: String? = nil, maxRecords: Int? = nil) {
            self.dBParameterGroupName = dBParameterGroupName
            self.filters = filters
            self.marker = marker
            self.maxRecords = maxRecords
        }

        private enum CodingKeys: String, CodingKey {
            case dBParameterGroupName = "DBParameterGroupName"
            case filters = "Filters"
            case marker = "Marker"
            case maxRecords = "MaxRecords"
        }
    }

    public struct DescribeDBParametersMessage: AWSEncodableShape {
        public struct _FiltersEncoding: ArrayCoderProperties { public static let member = "Filter" }

        /// The name of a specific DB parameter group to return details for. Constraints:   If supplied, must match the name of an existing DBParameterGroup.
        public let dBParameterGroupName: String
        /// This parameter isn't currently supported.
        @OptionalCustomCoding<ArrayCoder<_FiltersEncoding, Filter>>
        public var filters: [Filter]?
        ///  An optional pagination token provided by a previous DescribeDBParameters request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by MaxRecords.
        public let marker: String?
        ///  The maximum number of records to include in the response. If more records exist than the specified MaxRecords value, a pagination token called a marker is included in the response so that you can retrieve the remaining results.  Default: 100 Constraints: Minimum 20, maximum 100.
        public let maxRecords: Int?
        /// The parameter types to return. Default: All parameter types returned Valid Values: user | system | engine-default
        public let source: String?

        public init(dBParameterGroupName: String, filters: [Filter]? = nil, marker: String? = nil, maxRecords: Int? = nil, source: String? = nil) {
            self.dBParameterGroupName = dBParameterGroupName
            self.filters = filters
            self.marker = marker
            self.maxRecords = maxRecords
            self.source = source
        }

        private enum CodingKeys: String, CodingKey {
            case dBParameterGroupName = "DBParameterGroupName"
            case filters = "Filters"
            case marker = "Marker"
            case maxRecords = "MaxRecords"
            case source = "Source"
        }
    }

    public struct DescribeDBProxiesRequest: AWSEncodableShape {
        public struct _FiltersEncoding: ArrayCoderProperties { public static let member = "Filter" }

        /// The name of the DB proxy. If you omit this parameter, the output includes information about all DB proxies owned by your Amazon Web Services account ID.
        public let dBProxyName: String?
        /// This parameter is not currently supported.
        @OptionalCustomCoding<ArrayCoder<_FiltersEncoding, Filter>>
        public var filters: [Filter]?
        ///  An optional pagination token provided by a previous request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by MaxRecords.
        public let marker: String?
        /// The maximum number of records to include in the response. If more records exist than the specified MaxRecords value, a pagination token called a marker is included in the response so that the remaining results can be retrieved.  Default: 100 Constraints: Minimum 20, maximum 100.
        public let maxRecords: Int?

        public init(dBProxyName: String? = nil, filters: [Filter]? = nil, marker: String? = nil, maxRecords: Int? = nil) {
            self.dBProxyName = dBProxyName
            self.filters = filters
            self.marker = marker
            self.maxRecords = maxRecords
        }

        public func validate(name: String) throws {
            try self.validate(self.maxRecords, name: "maxRecords", parent: name, max: 100)
            try self.validate(self.maxRecords, name: "maxRecords", parent: name, min: 20)
        }

        private enum CodingKeys: String, CodingKey {
            case dBProxyName = "DBProxyName"
            case filters = "Filters"
            case marker = "Marker"
            case maxRecords = "MaxRecords"
        }
    }

    public struct DescribeDBProxiesResponse: AWSDecodableShape {
        /// A return value representing an arbitrary number of DBProxy data structures.
        @OptionalCustomCoding<StandardArrayCoder>
        public var dBProxies: [DBProxy]?
        ///  An optional pagination token provided by a previous request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by MaxRecords.
        public let marker: String?

        public init(dBProxies: [DBProxy]? = nil, marker: String? = nil) {
            self.dBProxies = dBProxies
            self.marker = marker
        }

        private enum CodingKeys: String, CodingKey {
            case dBProxies = "DBProxies"
            case marker = "Marker"
        }
    }

    public struct DescribeDBProxyEndpointsRequest: AWSEncodableShape {
        public struct _FiltersEncoding: ArrayCoderProperties { public static let member = "Filter" }

        /// The name of a DB proxy endpoint to describe. If you omit this parameter, the output includes information about all DB proxy endpoints associated with the specified proxy.
        public let dBProxyEndpointName: String?
        /// The name of the DB proxy whose endpoints you want to describe. If you omit this parameter, the output includes information about all DB proxy endpoints associated with all your DB proxies.
        public let dBProxyName: String?
        /// This parameter is not currently supported.
        @OptionalCustomCoding<ArrayCoder<_FiltersEncoding, Filter>>
        public var filters: [Filter]?
        ///  An optional pagination token provided by a previous request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by MaxRecords.
        public let marker: String?
        /// The maximum number of records to include in the response. If more records exist than the specified MaxRecords value, a pagination token called a marker is included in the response so that the remaining results can be retrieved.  Default: 100 Constraints: Minimum 20, maximum 100.
        public let maxRecords: Int?

        public init(dBProxyEndpointName: String? = nil, dBProxyName: String? = nil, filters: [Filter]? = nil, marker: String? = nil, maxRecords: Int? = nil) {
            self.dBProxyEndpointName = dBProxyEndpointName
            self.dBProxyName = dBProxyName
            self.filters = filters
            self.marker = marker
            self.maxRecords = maxRecords
        }

        public func validate(name: String) throws {
            try self.validate(self.dBProxyEndpointName, name: "dBProxyEndpointName", parent: name, max: 63)
            try self.validate(self.dBProxyEndpointName, name: "dBProxyEndpointName", parent: name, min: 1)
            try self.validate(self.dBProxyEndpointName, name: "dBProxyEndpointName", parent: name, pattern: "[a-zA-Z][a-zA-Z0-9]*(-[a-zA-Z0-9]+)*")
            try self.validate(self.dBProxyName, name: "dBProxyName", parent: name, max: 63)
            try self.validate(self.dBProxyName, name: "dBProxyName", parent: name, min: 1)
            try self.validate(self.dBProxyName, name: "dBProxyName", parent: name, pattern: "[a-zA-Z][a-zA-Z0-9]*(-[a-zA-Z0-9]+)*")
            try self.validate(self.maxRecords, name: "maxRecords", parent: name, max: 100)
            try self.validate(self.maxRecords, name: "maxRecords", parent: name, min: 20)
        }

        private enum CodingKeys: String, CodingKey {
            case dBProxyEndpointName = "DBProxyEndpointName"
            case dBProxyName = "DBProxyName"
            case filters = "Filters"
            case marker = "Marker"
            case maxRecords = "MaxRecords"
        }
    }

    public struct DescribeDBProxyEndpointsResponse: AWSDecodableShape {
        /// The list of ProxyEndpoint objects returned by the API operation.
        @OptionalCustomCoding<StandardArrayCoder>
        public var dBProxyEndpoints: [DBProxyEndpoint]?
        ///  An optional pagination token provided by a previous request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by MaxRecords.
        public let marker: String?

        public init(dBProxyEndpoints: [DBProxyEndpoint]? = nil, marker: String? = nil) {
            self.dBProxyEndpoints = dBProxyEndpoints
            self.marker = marker
        }

        private enum CodingKeys: String, CodingKey {
            case dBProxyEndpoints = "DBProxyEndpoints"
            case marker = "Marker"
        }
    }

    public struct DescribeDBProxyTargetGroupsRequest: AWSEncodableShape {
        public struct _FiltersEncoding: ArrayCoderProperties { public static let member = "Filter" }

        /// The identifier of the DBProxy associated with the target group.
        public let dBProxyName: String
        /// This parameter is not currently supported.
        @OptionalCustomCoding<ArrayCoder<_FiltersEncoding, Filter>>
        public var filters: [Filter]?
        ///  An optional pagination token provided by a previous request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by MaxRecords.
        public let marker: String?
        ///  The maximum number of records to include in the response. If more records exist than the specified MaxRecords value, a pagination token called a marker is included in the response so that the remaining results can be retrieved.  Default: 100 Constraints: Minimum 20, maximum 100.
        public let maxRecords: Int?
        /// The identifier of the DBProxyTargetGroup to describe.
        public let targetGroupName: String?

        public init(dBProxyName: String, filters: [Filter]? = nil, marker: String? = nil, maxRecords: Int? = nil, targetGroupName: String? = nil) {
            self.dBProxyName = dBProxyName
            self.filters = filters
            self.marker = marker
            self.maxRecords = maxRecords
            self.targetGroupName = targetGroupName
        }

        public func validate(name: String) throws {
            try self.validate(self.maxRecords, name: "maxRecords", parent: name, max: 100)
            try self.validate(self.maxRecords, name: "maxRecords", parent: name, min: 20)
        }

        private enum CodingKeys: String, CodingKey {
            case dBProxyName = "DBProxyName"
            case filters = "Filters"
            case marker = "Marker"
            case maxRecords = "MaxRecords"
            case targetGroupName = "TargetGroupName"
        }
    }

    public struct DescribeDBProxyTargetGroupsResponse: AWSDecodableShape {
        ///  An optional pagination token provided by a previous request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by MaxRecords.
        public let marker: String?
        /// An arbitrary number of DBProxyTargetGroup objects, containing details of the corresponding target groups.
        @OptionalCustomCoding<StandardArrayCoder>
        public var targetGroups: [DBProxyTargetGroup]?

        public init(marker: String? = nil, targetGroups: [DBProxyTargetGroup]? = nil) {
            self.marker = marker
            self.targetGroups = targetGroups
        }

        private enum CodingKeys: String, CodingKey {
            case marker = "Marker"
            case targetGroups = "TargetGroups"
        }
    }

    public struct DescribeDBProxyTargetsRequest: AWSEncodableShape {
        public struct _FiltersEncoding: ArrayCoderProperties { public static let member = "Filter" }

        /// The identifier of the DBProxyTarget to describe.
        public let dBProxyName: String
        /// This parameter is not currently supported.
        @OptionalCustomCoding<ArrayCoder<_FiltersEncoding, Filter>>
        public var filters: [Filter]?
        ///  An optional pagination token provided by a previous request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by MaxRecords.
        public let marker: String?
        ///  The maximum number of records to include in the response. If more records exist than the specified MaxRecords value, a pagination token called a marker is included in the response so that the remaining results can be retrieved.  Default: 100 Constraints: Minimum 20, maximum 100.
        public let maxRecords: Int?
        /// The identifier of the DBProxyTargetGroup to describe.
        public let targetGroupName: String?

        public init(dBProxyName: String, filters: [Filter]? = nil, marker: String? = nil, maxRecords: Int? = nil, targetGroupName: String? = nil) {
            self.dBProxyName = dBProxyName
            self.filters = filters
            self.marker = marker
            self.maxRecords = maxRecords
            self.targetGroupName = targetGroupName
        }

        public func validate(name: String) throws {
            try self.validate(self.maxRecords, name: "maxRecords", parent: name, max: 100)
            try self.validate(self.maxRecords, name: "maxRecords", parent: name, min: 20)
        }

        private enum CodingKeys: String, CodingKey {
            case dBProxyName = "DBProxyName"
            case filters = "Filters"
            case marker = "Marker"
            case maxRecords = "MaxRecords"
            case targetGroupName = "TargetGroupName"
        }
    }

    public struct DescribeDBProxyTargetsResponse: AWSDecodableShape {
        ///  An optional pagination token provided by a previous request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by MaxRecords.
        public let marker: String?
        /// An arbitrary number of DBProxyTarget objects, containing details of the corresponding targets.
        @OptionalCustomCoding<StandardArrayCoder>
        public var targets: [DBProxyTarget]?

        public init(marker: String? = nil, targets: [DBProxyTarget]? = nil) {
            self.marker = marker
            self.targets = targets
        }

        private enum CodingKeys: String, CodingKey {
            case marker = "Marker"
            case targets = "Targets"
        }
    }

    public struct DescribeDBSecurityGroupsMessage: AWSEncodableShape {
        public struct _FiltersEncoding: ArrayCoderProperties { public static let member = "Filter" }

        /// The name of the DB security group to return details for.
        public let dBSecurityGroupName: String?
        /// This parameter isn't currently supported.
        @OptionalCustomCoding<ArrayCoder<_FiltersEncoding, Filter>>
        public var filters: [Filter]?
        ///  An optional pagination token provided by a previous DescribeDBSecurityGroups request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by MaxRecords.
        public let marker: String?
        ///  The maximum number of records to include in the response. If more records exist than the specified MaxRecords value, a pagination token called a marker is included in the response so that you can retrieve the remaining results.  Default: 100 Constraints: Minimum 20, maximum 100.
        public let maxRecords: Int?

        public init(dBSecurityGroupName: String? = nil, filters: [Filter]? = nil, marker: String? = nil, maxRecords: Int? = nil) {
            self.dBSecurityGroupName = dBSecurityGroupName
            self.filters = filters
            self.marker = marker
            self.maxRecords = maxRecords
        }

        private enum CodingKeys: String, CodingKey {
            case dBSecurityGroupName = "DBSecurityGroupName"
            case filters = "Filters"
            case marker = "Marker"
            case maxRecords = "MaxRecords"
        }
    }

    public struct DescribeDBSnapshotAttributesMessage: AWSEncodableShape {
        /// The identifier for the DB snapshot to describe the attributes for.
        public let dBSnapshotIdentifier: String

        public init(dBSnapshotIdentifier: String) {
            self.dBSnapshotIdentifier = dBSnapshotIdentifier
        }

        private enum CodingKeys: String, CodingKey {
            case dBSnapshotIdentifier = "DBSnapshotIdentifier"
        }
    }

    public struct DescribeDBSnapshotAttributesResult: AWSDecodableShape {
        public let dBSnapshotAttributesResult: DBSnapshotAttributesResult?

        public init(dBSnapshotAttributesResult: DBSnapshotAttributesResult? = nil) {
            self.dBSnapshotAttributesResult = dBSnapshotAttributesResult
        }

        private enum CodingKeys: String, CodingKey {
            case dBSnapshotAttributesResult = "DBSnapshotAttributesResult"
        }
    }

    public struct DescribeDBSnapshotsMessage: AWSEncodableShape {
        public struct _FiltersEncoding: ArrayCoderProperties { public static let member = "Filter" }

        /// The ID of the DB instance to retrieve the list of DB snapshots for. This parameter can't be used in conjunction with DBSnapshotIdentifier. This parameter isn't case-sensitive.  Constraints:   If supplied, must match the identifier of an existing DBInstance.
        public let dBInstanceIdentifier: String?
        /// A specific DB resource ID to describe.
        public let dbiResourceId: String?
        ///  A specific DB snapshot identifier to describe. This parameter can't be used in conjunction with DBInstanceIdentifier. This value is stored as a lowercase string.  Constraints:   If supplied, must match the identifier of an existing DBSnapshot.   If this identifier is for an automated snapshot, the SnapshotType parameter must also be specified.
        public let dBSnapshotIdentifier: String?
        /// A filter that specifies one or more DB snapshots to describe. Supported filters:    db-instance-id - Accepts DB instance identifiers and DB instance Amazon Resource Names (ARNs).    db-snapshot-id - Accepts DB snapshot identifiers.    dbi-resource-id - Accepts identifiers of source DB instances.    snapshot-type - Accepts types of DB snapshots.    engine - Accepts names of database engines.
        @OptionalCustomCoding<ArrayCoder<_FiltersEncoding, Filter>>
        public var filters: [Filter]?
        /// A value that indicates whether to include manual DB cluster snapshots that are public and can be copied or restored by any Amazon Web Services account. By default, the public snapshots are not included. You can share a manual DB snapshot as public by using the ModifyDBSnapshotAttribute API.
        public let includePublic: Bool?
        /// A value that indicates whether to include shared manual DB cluster snapshots from other Amazon Web Services accounts that this Amazon Web Services account has been given permission to copy or restore. By default, these snapshots are not included. You can give an Amazon Web Services account permission to restore a manual DB snapshot from another Amazon Web Services account by using the ModifyDBSnapshotAttribute API action.
        public let includeShared: Bool?
        ///  An optional pagination token provided by a previous DescribeDBSnapshots request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by MaxRecords.
        public let marker: String?
        ///  The maximum number of records to include in the response. If more records exist than the specified MaxRecords value, a pagination token called a marker is included in the response so that you can retrieve the remaining results.  Default: 100 Constraints: Minimum 20, maximum 100.
        public let maxRecords: Int?
        /// The type of snapshots to be returned. You can specify one of the following values:    automated - Return all DB snapshots that have been automatically taken by Amazon RDS for my Amazon Web Services account.    manual - Return all DB snapshots that have been taken by my Amazon Web Services account.    shared - Return all manual DB snapshots that have been shared to my Amazon Web Services account.    public - Return all DB snapshots that have been marked as public.    awsbackup - Return the DB snapshots managed by the Amazon Web Services Backup service. For information about Amazon Web Services Backup, see the  Amazon Web Services Backup Developer Guide.   The awsbackup type does not apply to Aurora.   If you don't specify a SnapshotType value, then both automated and manual snapshots are returned. Shared and public DB snapshots are not included in the returned results by default. You can include shared snapshots with these results by enabling the IncludeShared parameter. You can include public snapshots with these results by enabling the IncludePublic parameter. The IncludeShared and IncludePublic parameters don't apply for SnapshotType values of manual or automated. The IncludePublic parameter doesn't apply when SnapshotType is set to shared. The IncludeShared parameter doesn't apply when SnapshotType is set to public.
        public let snapshotType: String?

        public init(dBInstanceIdentifier: String? = nil, dbiResourceId: String? = nil, dBSnapshotIdentifier: String? = nil, filters: [Filter]? = nil, includePublic: Bool? = nil, includeShared: Bool? = nil, marker: String? = nil, maxRecords: Int? = nil, snapshotType: String? = nil) {
            self.dBInstanceIdentifier = dBInstanceIdentifier
            self.dbiResourceId = dbiResourceId
            self.dBSnapshotIdentifier = dBSnapshotIdentifier
            self.filters = filters
            self.includePublic = includePublic
            self.includeShared = includeShared
            self.marker = marker
            self.maxRecords = maxRecords
            self.snapshotType = snapshotType
        }

        private enum CodingKeys: String, CodingKey {
            case dBInstanceIdentifier = "DBInstanceIdentifier"
            case dbiResourceId = "DbiResourceId"
            case dBSnapshotIdentifier = "DBSnapshotIdentifier"
            case filters = "Filters"
            case includePublic = "IncludePublic"
            case includeShared = "IncludeShared"
            case marker = "Marker"
            case maxRecords = "MaxRecords"
            case snapshotType = "SnapshotType"
        }
    }

    public struct DescribeDBSubnetGroupsMessage: AWSEncodableShape {
        public struct _FiltersEncoding: ArrayCoderProperties { public static let member = "Filter" }

        /// The name of the DB subnet group to return details for.
        public let dBSubnetGroupName: String?
        /// This parameter isn't currently supported.
        @OptionalCustomCoding<ArrayCoder<_FiltersEncoding, Filter>>
        public var filters: [Filter]?
        ///  An optional pagination token provided by a previous DescribeDBSubnetGroups request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by MaxRecords.
        public let marker: String?
        ///  The maximum number of records to include in the response. If more records exist than the specified MaxRecords value, a pagination token called a marker is included in the response so that you can retrieve the remaining results.  Default: 100 Constraints: Minimum 20, maximum 100.
        public let maxRecords: Int?

        public init(dBSubnetGroupName: String? = nil, filters: [Filter]? = nil, marker: String? = nil, maxRecords: Int? = nil) {
            self.dBSubnetGroupName = dBSubnetGroupName
            self.filters = filters
            self.marker = marker
            self.maxRecords = maxRecords
        }

        private enum CodingKeys: String, CodingKey {
            case dBSubnetGroupName = "DBSubnetGroupName"
            case filters = "Filters"
            case marker = "Marker"
            case maxRecords = "MaxRecords"
        }
    }

    public struct DescribeEngineDefaultClusterParametersMessage: AWSEncodableShape {
        public struct _FiltersEncoding: ArrayCoderProperties { public static let member = "Filter" }

        /// The name of the DB cluster parameter group family to return engine parameter information for.
        public let dBParameterGroupFamily: String
        /// This parameter isn't currently supported.
        @OptionalCustomCoding<ArrayCoder<_FiltersEncoding, Filter>>
        public var filters: [Filter]?
        ///  An optional pagination token provided by a previous DescribeEngineDefaultClusterParameters request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by MaxRecords.
        public let marker: String?
        ///  The maximum number of records to include in the response. If more records exist than the specified MaxRecords value, a pagination token called a marker is included in the response so you can retrieve the remaining results.  Default: 100 Constraints: Minimum 20, maximum 100.
        public let maxRecords: Int?

        public init(dBParameterGroupFamily: String, filters: [Filter]? = nil, marker: String? = nil, maxRecords: Int? = nil) {
            self.dBParameterGroupFamily = dBParameterGroupFamily
            self.filters = filters
            self.marker = marker
            self.maxRecords = maxRecords
        }

        private enum CodingKeys: String, CodingKey {
            case dBParameterGroupFamily = "DBParameterGroupFamily"
            case filters = "Filters"
            case marker = "Marker"
            case maxRecords = "MaxRecords"
        }
    }

    public struct DescribeEngineDefaultClusterParametersResult: AWSDecodableShape {
        public let engineDefaults: EngineDefaults?

        public init(engineDefaults: EngineDefaults? = nil) {
            self.engineDefaults = engineDefaults
        }

        private enum CodingKeys: String, CodingKey {
            case engineDefaults = "EngineDefaults"
        }
    }

    public struct DescribeEngineDefaultParametersMessage: AWSEncodableShape {
        public struct _FiltersEncoding: ArrayCoderProperties { public static let member = "Filter" }

        /// The name of the DB parameter group family.
        public let dBParameterGroupFamily: String
        /// This parameter isn't currently supported.
        @OptionalCustomCoding<ArrayCoder<_FiltersEncoding, Filter>>
        public var filters: [Filter]?
        ///  An optional pagination token provided by a previous DescribeEngineDefaultParameters request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by MaxRecords.
        public let marker: String?
        ///  The maximum number of records to include in the response. If more records exist than the specified MaxRecords value, a pagination token called a marker is included in the response so you can retrieve the remaining results.  Default: 100 Constraints: Minimum 20, maximum 100.
        public let maxRecords: Int?

        public init(dBParameterGroupFamily: String, filters: [Filter]? = nil, marker: String? = nil, maxRecords: Int? = nil) {
            self.dBParameterGroupFamily = dBParameterGroupFamily
            self.filters = filters
            self.marker = marker
            self.maxRecords = maxRecords
        }

        private enum CodingKeys: String, CodingKey {
            case dBParameterGroupFamily = "DBParameterGroupFamily"
            case filters = "Filters"
            case marker = "Marker"
            case maxRecords = "MaxRecords"
        }
    }

    public struct DescribeEngineDefaultParametersResult: AWSDecodableShape {
        public let engineDefaults: EngineDefaults?

        public init(engineDefaults: EngineDefaults? = nil) {
            self.engineDefaults = engineDefaults
        }

        private enum CodingKeys: String, CodingKey {
            case engineDefaults = "EngineDefaults"
        }
    }

    public struct DescribeEventCategoriesMessage: AWSEncodableShape {
        public struct _FiltersEncoding: ArrayCoderProperties { public static let member = "Filter" }

        /// This parameter isn't currently supported.
        @OptionalCustomCoding<ArrayCoder<_FiltersEncoding, Filter>>
        public var filters: [Filter]?
        /// The type of source that is generating the events. Valid values: db-instance | db-cluster | db-parameter-group | db-security-group | db-snapshot | db-cluster-snapshot
        public let sourceType: String?

        public init(filters: [Filter]? = nil, sourceType: String? = nil) {
            self.filters = filters
            self.sourceType = sourceType
        }

        private enum CodingKeys: String, CodingKey {
            case filters = "Filters"
            case sourceType = "SourceType"
        }
    }

    public struct DescribeEventSubscriptionsMessage: AWSEncodableShape {
        public struct _FiltersEncoding: ArrayCoderProperties { public static let member = "Filter" }

        /// This parameter isn't currently supported.
        @OptionalCustomCoding<ArrayCoder<_FiltersEncoding, Filter>>
        public var filters: [Filter]?
        ///  An optional pagination token provided by a previous DescribeOrderableDBInstanceOptions request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by MaxRecords .
        public let marker: String?
        ///  The maximum number of records to include in the response. If more records exist than the specified MaxRecords value, a pagination token called a marker is included in the response so that you can retrieve the remaining results.  Default: 100 Constraints: Minimum 20, maximum 100.
        public let maxRecords: Int?
        /// The name of the RDS event notification subscription you want to describe.
        public let subscriptionName: String?

        public init(filters: [Filter]? = nil, marker: String? = nil, maxRecords: Int? = nil, subscriptionName: String? = nil) {
            self.filters = filters
            self.marker = marker
            self.maxRecords = maxRecords
            self.subscriptionName = subscriptionName
        }

        private enum CodingKeys: String, CodingKey {
            case filters = "Filters"
            case marker = "Marker"
            case maxRecords = "MaxRecords"
            case subscriptionName = "SubscriptionName"
        }
    }

    public struct DescribeEventsMessage: AWSEncodableShape {
        public struct _EventCategoriesEncoding: ArrayCoderProperties { public static let member = "EventCategory" }
        public struct _FiltersEncoding: ArrayCoderProperties { public static let member = "Filter" }

        /// The number of minutes to retrieve events for. Default: 60
        public let duration: Int?
        ///  The end of the time interval for which to retrieve events, specified in ISO 8601 format. For more information about ISO 8601, go to the ISO8601 Wikipedia page.  Example: 2009-07-08T18:00Z
        public let endTime: Date?
        /// A list of event categories that trigger notifications for a event notification subscription.
        @OptionalCustomCoding<ArrayCoder<_EventCategoriesEncoding, String>>
        public var eventCategories: [String]?
        /// This parameter isn't currently supported.
        @OptionalCustomCoding<ArrayCoder<_FiltersEncoding, Filter>>
        public var filters: [Filter]?
        ///  An optional pagination token provided by a previous DescribeEvents request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by MaxRecords.
        public let marker: String?
        ///  The maximum number of records to include in the response. If more records exist than the specified MaxRecords value, a pagination token called a marker is included in the response so that you can retrieve the remaining results.  Default: 100 Constraints: Minimum 20, maximum 100.
        public let maxRecords: Int?
        /// The identifier of the event source for which events are returned. If not specified, then all sources are included in the response. Constraints:   If SourceIdentifier is supplied, SourceType must also be provided.   If the source type is a DB instance, a DBInstanceIdentifier value must be supplied.   If the source type is a DB cluster, a DBClusterIdentifier value must be supplied.   If the source type is a DB parameter group, a DBParameterGroupName value must be supplied.   If the source type is a DB security group, a DBSecurityGroupName value must be supplied.   If the source type is a DB snapshot, a DBSnapshotIdentifier value must be supplied.   If the source type is a DB cluster snapshot, a DBClusterSnapshotIdentifier value must be supplied.   Can't end with a hyphen or contain two consecutive hyphens.
        public let sourceIdentifier: String?
        /// The event source to retrieve events for. If no value is specified, all events are returned.
        public let sourceType: SourceType?
        ///  The beginning of the time interval to retrieve events for, specified in ISO 8601 format. For more information about ISO 8601, go to the ISO8601 Wikipedia page.  Example: 2009-07-08T18:00Z
        public let startTime: Date?

        public init(duration: Int? = nil, endTime: Date? = nil, eventCategories: [String]? = nil, filters: [Filter]? = nil, marker: String? = nil, maxRecords: Int? = nil, sourceIdentifier: String? = nil, sourceType: SourceType? = nil, startTime: Date? = nil) {
            self.duration = duration
            self.endTime = endTime
            self.eventCategories = eventCategories
            self.filters = filters
            self.marker = marker
            self.maxRecords = maxRecords
            self.sourceIdentifier = sourceIdentifier
            self.sourceType = sourceType
            self.startTime = startTime
        }

        private enum CodingKeys: String, CodingKey {
            case duration = "Duration"
            case endTime = "EndTime"
            case eventCategories = "EventCategories"
            case filters = "Filters"
            case marker = "Marker"
            case maxRecords = "MaxRecords"
            case sourceIdentifier = "SourceIdentifier"
            case sourceType = "SourceType"
            case startTime = "StartTime"
        }
    }

    public struct DescribeExportTasksMessage: AWSEncodableShape {
        public struct _FiltersEncoding: ArrayCoderProperties { public static let member = "Filter" }

        /// The identifier of the snapshot export task to be described.
        public let exportTaskIdentifier: String?
        /// Filters specify one or more snapshot exports to describe. The filters are specified as name-value pairs that define what to include in the output. Filter names and values are case-sensitive. Supported filters include the following:     export-task-identifier - An identifier for the snapshot export task.    s3-bucket - The Amazon S3 bucket the snapshot is exported to.    source-arn - The Amazon Resource Name (ARN) of the snapshot exported to Amazon S3    status - The status of the export task. Must be lowercase, for example, complete.
        @OptionalCustomCoding<ArrayCoder<_FiltersEncoding, Filter>>
        public var filters: [Filter]?
        ///  An optional pagination token provided by a previous DescribeExportTasks request. If you specify this parameter, the response includes only records beyond the marker, up to the value specified by the MaxRecords parameter.
        public let marker: String?
        ///  The maximum number of records to include in the response. If more records exist than the specified value, a pagination token called a marker is included in the response. You can use the marker in a later DescribeExportTasks request to retrieve the remaining results.  Default: 100 Constraints: Minimum 20, maximum 100.
        public let maxRecords: Int?
        /// The Amazon Resource Name (ARN) of the snapshot exported to Amazon S3.
        public let sourceArn: String?

        public init(exportTaskIdentifier: String? = nil, filters: [Filter]? = nil, marker: String? = nil, maxRecords: Int? = nil, sourceArn: String? = nil) {
            self.exportTaskIdentifier = exportTaskIdentifier
            self.filters = filters
            self.marker = marker
            self.maxRecords = maxRecords
            self.sourceArn = sourceArn
        }

        public func validate(name: String) throws {
            try self.validate(self.maxRecords, name: "maxRecords", parent: name, max: 100)
            try self.validate(self.maxRecords, name: "maxRecords", parent: name, min: 20)
        }

        private enum CodingKeys: String, CodingKey {
            case exportTaskIdentifier = "ExportTaskIdentifier"
            case filters = "Filters"
            case marker = "Marker"
            case maxRecords = "MaxRecords"
            case sourceArn = "SourceArn"
        }
    }

    public struct DescribeGlobalClustersMessage: AWSEncodableShape {
        public struct _FiltersEncoding: ArrayCoderProperties { public static let member = "Filter" }

        /// A filter that specifies one or more global DB clusters to describe. Supported filters:    db-cluster-id - Accepts DB cluster identifiers and DB cluster Amazon Resource Names (ARNs). The results list will only include information about the DB clusters identified by these ARNs.
        @OptionalCustomCoding<ArrayCoder<_FiltersEncoding, Filter>>
        public var filters: [Filter]?
        ///  The user-supplied DB cluster identifier. If this parameter is specified, information from only the specific DB cluster is returned. This parameter isn't case-sensitive.  Constraints:   If supplied, must match an existing DBClusterIdentifier.
        public let globalClusterIdentifier: String?
        ///  An optional pagination token provided by a previous DescribeGlobalClusters request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by MaxRecords.
        public let marker: String?
        ///  The maximum number of records to include in the response. If more records exist than the specified MaxRecords value, a pagination token called a marker is included in the response so that you can retrieve the remaining results.  Default: 100 Constraints: Minimum 20, maximum 100.
        public let maxRecords: Int?

        public init(filters: [Filter]? = nil, globalClusterIdentifier: String? = nil, marker: String? = nil, maxRecords: Int? = nil) {
            self.filters = filters
            self.globalClusterIdentifier = globalClusterIdentifier
            self.marker = marker
            self.maxRecords = maxRecords
        }

        private enum CodingKeys: String, CodingKey {
            case filters = "Filters"
            case globalClusterIdentifier = "GlobalClusterIdentifier"
            case marker = "Marker"
            case maxRecords = "MaxRecords"
        }
    }

    public struct DescribeInstallationMediaMessage: AWSEncodableShape {
        public struct _FiltersEncoding: ArrayCoderProperties { public static let member = "Filter" }

        /// A filter that specifies one or more installation media to describe. Supported filters include the following:    custom-availability-zone-id - Accepts custom Availability Zone (AZ) identifiers. The results list includes information about only the custom AZs identified by these identifiers.    engine - Accepts database engines. The results list includes information about only the database engines identified by these identifiers. For more information about the valid engines for installation media, see ImportInstallationMedia.
        @OptionalCustomCoding<ArrayCoder<_FiltersEncoding, Filter>>
        public var filters: [Filter]?
        /// The installation medium ID.
        public let installationMediaId: String?
        /// An optional pagination token provided by a previous request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by MaxRecords.
        public let marker: String?
        /// An optional pagination token provided by a previous DescribeInstallationMedia request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by MaxRecords.
        public let maxRecords: Int?

        public init(filters: [Filter]? = nil, installationMediaId: String? = nil, marker: String? = nil, maxRecords: Int? = nil) {
            self.filters = filters
            self.installationMediaId = installationMediaId
            self.marker = marker
            self.maxRecords = maxRecords
        }

        private enum CodingKeys: String, CodingKey {
            case filters = "Filters"
            case installationMediaId = "InstallationMediaId"
            case marker = "Marker"
            case maxRecords = "MaxRecords"
        }
    }

    public struct DescribeOptionGroupOptionsMessage: AWSEncodableShape {
        public struct _FiltersEncoding: ArrayCoderProperties { public static let member = "Filter" }

        /// A required parameter. Options available for the given engine name are described. Valid Values:     mariadb     mysql     oracle-ee     oracle-ee-cdb     oracle-se2     oracle-se2-cdb     postgres     sqlserver-ee     sqlserver-se     sqlserver-ex     sqlserver-web
        public let engineName: String
        /// This parameter isn't currently supported.
        @OptionalCustomCoding<ArrayCoder<_FiltersEncoding, Filter>>
        public var filters: [Filter]?
        /// If specified, filters the results to include only options for the specified major engine version.
        public let majorEngineVersion: String?
        /// An optional pagination token provided by a previous request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by MaxRecords.
        public let marker: String?
        ///  The maximum number of records to include in the response. If more records exist than the specified MaxRecords value, a pagination token called a marker is included in the response so that you can retrieve the remaining results.  Default: 100 Constraints: Minimum 20, maximum 100.
        public let maxRecords: Int?

        public init(engineName: String, filters: [Filter]? = nil, majorEngineVersion: String? = nil, marker: String? = nil, maxRecords: Int? = nil) {
            self.engineName = engineName
            self.filters = filters
            self.majorEngineVersion = majorEngineVersion
            self.marker = marker
            self.maxRecords = maxRecords
        }

        private enum CodingKeys: String, CodingKey {
            case engineName = "EngineName"
            case filters = "Filters"
            case majorEngineVersion = "MajorEngineVersion"
            case marker = "Marker"
            case maxRecords = "MaxRecords"
        }
    }

    public struct DescribeOptionGroupsMessage: AWSEncodableShape {
        public struct _FiltersEncoding: ArrayCoderProperties { public static let member = "Filter" }

        /// Filters the list of option groups to only include groups associated with a specific database engine. Valid Values:     mariadb     mysql     oracle-ee     oracle-ee-cdb     oracle-se2     oracle-se2-cdb     postgres     sqlserver-ee     sqlserver-se     sqlserver-ex     sqlserver-web
        public let engineName: String?
        /// This parameter isn't currently supported.
        @OptionalCustomCoding<ArrayCoder<_FiltersEncoding, Filter>>
        public var filters: [Filter]?
        /// Filters the list of option groups to only include groups associated with a specific database engine version. If specified, then EngineName must also be specified.
        public let majorEngineVersion: String?
        ///  An optional pagination token provided by a previous DescribeOptionGroups request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by MaxRecords.
        public let marker: String?
        ///  The maximum number of records to include in the response. If more records exist than the specified MaxRecords value, a pagination token called a marker is included in the response so that you can retrieve the remaining results.  Default: 100 Constraints: Minimum 20, maximum 100.
        public let maxRecords: Int?
        /// The name of the option group to describe. Can't be supplied together with EngineName or MajorEngineVersion.
        public let optionGroupName: String?

        public init(engineName: String? = nil, filters: [Filter]? = nil, majorEngineVersion: String? = nil, marker: String? = nil, maxRecords: Int? = nil, optionGroupName: String? = nil) {
            self.engineName = engineName
            self.filters = filters
            self.majorEngineVersion = majorEngineVersion
            self.marker = marker
            self.maxRecords = maxRecords
            self.optionGroupName = optionGroupName
        }

        private enum CodingKeys: String, CodingKey {
            case engineName = "EngineName"
            case filters = "Filters"
            case majorEngineVersion = "MajorEngineVersion"
            case marker = "Marker"
            case maxRecords = "MaxRecords"
            case optionGroupName = "OptionGroupName"
        }
    }

    public struct DescribeOrderableDBInstanceOptionsMessage: AWSEncodableShape {
        public struct _FiltersEncoding: ArrayCoderProperties { public static let member = "Filter" }

        /// The Availability Zone group associated with a Local Zone. Specify this parameter to retrieve available offerings for the Local Zones in the group. Omit this parameter to show the available offerings in the specified Amazon Web Services Region.
        public let availabilityZoneGroup: String?
        /// The DB instance class filter value. Specify this parameter to show only the available offerings matching the specified DB instance class.
        public let dBInstanceClass: String?
        /// The name of the engine to retrieve DB instance options for. Valid Values:     aurora (for MySQL 5.6-compatible Aurora)    aurora-mysql (for MySQL 5.7-compatible Aurora)    aurora-postgresql     mariadb     mysql     oracle-ee     oracle-ee-cdb     oracle-se2     oracle-se2-cdb     postgres     sqlserver-ee     sqlserver-se     sqlserver-ex     sqlserver-web
        public let engine: String
        /// The engine version filter value. Specify this parameter to show only the available offerings matching the specified engine version.
        public let engineVersion: String?
        /// This parameter isn't currently supported.
        @OptionalCustomCoding<ArrayCoder<_FiltersEncoding, Filter>>
        public var filters: [Filter]?
        /// The license model filter value. Specify this parameter to show only the available offerings matching the specified license model.
        public let licenseModel: String?
        ///  An optional pagination token provided by a previous DescribeOrderableDBInstanceOptions request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by MaxRecords .
        public let marker: String?
        ///  The maximum number of records to include in the response. If more records exist than the specified MaxRecords value, a pagination token called a marker is included in the response so that you can retrieve the remaining results.  Default: 100 Constraints: Minimum 20, maximum 100.
        public let maxRecords: Int?
        /// A value that indicates whether to show only VPC or non-VPC offerings.
        public let vpc: Bool?

        public init(availabilityZoneGroup: String? = nil, dBInstanceClass: String? = nil, engine: String, engineVersion: String? = nil, filters: [Filter]? = nil, licenseModel: String? = nil, marker: String? = nil, maxRecords: Int? = nil, vpc: Bool? = nil) {
            self.availabilityZoneGroup = availabilityZoneGroup
            self.dBInstanceClass = dBInstanceClass
            self.engine = engine
            self.engineVersion = engineVersion
            self.filters = filters
            self.licenseModel = licenseModel
            self.marker = marker
            self.maxRecords = maxRecords
            self.vpc = vpc
        }

        private enum CodingKeys: String, CodingKey {
            case availabilityZoneGroup = "AvailabilityZoneGroup"
            case dBInstanceClass = "DBInstanceClass"
            case engine = "Engine"
            case engineVersion = "EngineVersion"
            case filters = "Filters"
            case licenseModel = "LicenseModel"
            case marker = "Marker"
            case maxRecords = "MaxRecords"
            case vpc = "Vpc"
        }
    }

    public struct DescribePendingMaintenanceActionsMessage: AWSEncodableShape {
        public struct _FiltersEncoding: ArrayCoderProperties { public static let member = "Filter" }

        /// A filter that specifies one or more resources to return pending maintenance actions for. Supported filters:    db-cluster-id - Accepts DB cluster identifiers and DB cluster Amazon Resource Names (ARNs). The results list will only include pending maintenance actions for the DB clusters identified by these ARNs.    db-instance-id - Accepts DB instance identifiers and DB instance ARNs. The results list will only include pending maintenance actions for the DB instances identified by these ARNs.
        @OptionalCustomCoding<ArrayCoder<_FiltersEncoding, Filter>>
        public var filters: [Filter]?
        ///  An optional pagination token provided by a previous DescribePendingMaintenanceActions request. If this parameter is specified, the response includes only records beyond the marker, up to a number of records specified by MaxRecords.
        public let marker: String?
        ///  The maximum number of records to include in the response. If more records exist than the specified MaxRecords value, a pagination token called a marker is included in the response so that you can retrieve the remaining results.  Default: 100 Constraints: Minimum 20, maximum 100.
        public let maxRecords: Int?
        /// The ARN of a resource to return pending maintenance actions for.
        public let resourceIdentifier: String?

        public init(filters: [Filter]? = nil, marker: String? = nil, maxRecords: Int? = nil, resourceIdentifier: String? = nil) {
            self.filters = filters
            self.marker = marker
            self.maxRecords = maxRecords
            self.resourceIdentifier = resourceIdentifier
        }

        private enum CodingKeys: String, CodingKey {
            case filters = "Filters"
            case marker = "Marker"
            case maxRecords = "MaxRecords"
            case resourceIdentifier = "ResourceIdentifier"
        }
    }

    public struct DescribeReservedDBInstancesMessage: AWSEncodableShape {
        public struct _FiltersEncoding: ArrayCoderProperties { public static let member = "Filter" }

        /// The DB instance class filter value. Specify this parameter to show only those reservations matching the specified DB instances class.
        public let dBInstanceClass: String?
        /// The duration filter value, specified in years or seconds. Specify this parameter to show only reservations for this duration. Valid Values: 1 | 3 | 31536000 | 94608000
        public let duration: String?
        /// This parameter isn't currently supported.
        @OptionalCustomCoding<ArrayCoder<_FiltersEncoding, Filter>>
        public var filters: [Filter]?
        /// The lease identifier filter value. Specify this parameter to show only the reservation that matches the specified lease ID.  Amazon Web Services Support might request the lease ID for an issue related to a reserved DB instance.
        public let leaseId: String?
        ///  An optional pagination token provided by a previous request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by MaxRecords.
        public let marker: String?
        ///  The maximum number of records to include in the response. If more than the MaxRecords value is available, a pagination token called a marker is included in the response so you can retrieve the remaining results.  Default: 100 Constraints: Minimum 20, maximum 100.
        public let maxRecords: Int?
        /// A value that indicates whether to show only those reservations that support Multi-AZ.
        public let multiAZ: Bool?
        /// The offering type filter value. Specify this parameter to show only the available offerings matching the specified offering type. Valid Values: "Partial Upfront" | "All Upfront" | "No Upfront"
        public let offeringType: String?
        /// The product description filter value. Specify this parameter to show only those reservations matching the specified product description.
        public let productDescription: String?
        /// The reserved DB instance identifier filter value. Specify this parameter to show only the reservation that matches the specified reservation ID.
        public let reservedDBInstanceId: String?
        /// The offering identifier filter value. Specify this parameter to show only purchased reservations matching the specified offering identifier.
        public let reservedDBInstancesOfferingId: String?

        public init(dBInstanceClass: String? = nil, duration: String? = nil, filters: [Filter]? = nil, leaseId: String? = nil, marker: String? = nil, maxRecords: Int? = nil, multiAZ: Bool? = nil, offeringType: String? = nil, productDescription: String? = nil, reservedDBInstanceId: String? = nil, reservedDBInstancesOfferingId: String? = nil) {
            self.dBInstanceClass = dBInstanceClass
            self.duration = duration
            self.filters = filters
            self.leaseId = leaseId
            self.marker = marker
            self.maxRecords = maxRecords
            self.multiAZ = multiAZ
            self.offeringType = offeringType
            self.productDescription = productDescription
            self.reservedDBInstanceId = reservedDBInstanceId
            self.reservedDBInstancesOfferingId = reservedDBInstancesOfferingId
        }

        private enum CodingKeys: String, CodingKey {
            case dBInstanceClass = "DBInstanceClass"
            case duration = "Duration"
            case filters = "Filters"
            case leaseId = "LeaseId"
            case marker = "Marker"
            case maxRecords = "MaxRecords"
            case multiAZ = "MultiAZ"
            case offeringType = "OfferingType"
            case productDescription = "ProductDescription"
            case reservedDBInstanceId = "ReservedDBInstanceId"
            case reservedDBInstancesOfferingId = "ReservedDBInstancesOfferingId"
        }
    }

    public struct DescribeReservedDBInstancesOfferingsMessage: AWSEncodableShape {
        public struct _FiltersEncoding: ArrayCoderProperties { public static let member = "Filter" }

        /// The DB instance class filter value. Specify this parameter to show only the available offerings matching the specified DB instance class.
        public let dBInstanceClass: String?
        /// Duration filter value, specified in years or seconds. Specify this parameter to show only reservations for this duration. Valid Values: 1 | 3 | 31536000 | 94608000
        public let duration: String?
        /// This parameter isn't currently supported.
        @OptionalCustomCoding<ArrayCoder<_FiltersEncoding, Filter>>
        public var filters: [Filter]?
        ///  An optional pagination token provided by a previous request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by MaxRecords.
        public let marker: String?
        ///  The maximum number of records to include in the response. If more than the MaxRecords value is available, a pagination token called a marker is included in the response so you can retrieve the remaining results.  Default: 100 Constraints: Minimum 20, maximum 100.
        public let maxRecords: Int?
        /// A value that indicates whether to show only those reservations that support Multi-AZ.
        public let multiAZ: Bool?
        /// The offering type filter value. Specify this parameter to show only the available offerings matching the specified offering type. Valid Values: "Partial Upfront" | "All Upfront" | "No Upfront"
        public let offeringType: String?
        /// Product description filter value. Specify this parameter to show only the available offerings that contain the specified product description.  The results show offerings that partially match the filter value.
        public let productDescription: String?
        /// The offering identifier filter value. Specify this parameter to show only the available offering that matches the specified reservation identifier. Example: 438012d3-4052-4cc7-b2e3-8d3372e0e706
        public let reservedDBInstancesOfferingId: String?

        public init(dBInstanceClass: String? = nil, duration: String? = nil, filters: [Filter]? = nil, marker: String? = nil, maxRecords: Int? = nil, multiAZ: Bool? = nil, offeringType: String? = nil, productDescription: String? = nil, reservedDBInstancesOfferingId: String? = nil) {
            self.dBInstanceClass = dBInstanceClass
            self.duration = duration
            self.filters = filters
            self.marker = marker
            self.maxRecords = maxRecords
            self.multiAZ = multiAZ
            self.offeringType = offeringType
            self.productDescription = productDescription
            self.reservedDBInstancesOfferingId = reservedDBInstancesOfferingId
        }

        private enum CodingKeys: String, CodingKey {
            case dBInstanceClass = "DBInstanceClass"
            case duration = "Duration"
            case filters = "Filters"
            case marker = "Marker"
            case maxRecords = "MaxRecords"
            case multiAZ = "MultiAZ"
            case offeringType = "OfferingType"
            case productDescription = "ProductDescription"
            case reservedDBInstancesOfferingId = "ReservedDBInstancesOfferingId"
        }
    }

    public struct DescribeSourceRegionsMessage: AWSEncodableShape {
        public struct _FiltersEncoding: ArrayCoderProperties { public static let member = "Filter" }

        /// This parameter isn't currently supported.
        @OptionalCustomCoding<ArrayCoder<_FiltersEncoding, Filter>>
        public var filters: [Filter]?
        /// An optional pagination token provided by a previous DescribeSourceRegions request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by MaxRecords.
        public let marker: String?
        /// The maximum number of records to include in the response. If more records exist than the specified MaxRecords value, a pagination token called a marker is included in the response so you can retrieve the remaining results.  Default: 100 Constraints: Minimum 20, maximum 100.
        public let maxRecords: Int?
        /// The source Amazon Web Services Region name. For example, us-east-1. Constraints:   Must specify a valid Amazon Web Services Region name.
        public let regionName: String?

        public init(filters: [Filter]? = nil, marker: String? = nil, maxRecords: Int? = nil, regionName: String? = nil) {
            self.filters = filters
            self.marker = marker
            self.maxRecords = maxRecords
            self.regionName = regionName
        }

        private enum CodingKeys: String, CodingKey {
            case filters = "Filters"
            case marker = "Marker"
            case maxRecords = "MaxRecords"
            case regionName = "RegionName"
        }
    }

    public struct DescribeValidDBInstanceModificationsMessage: AWSEncodableShape {
        /// The customer identifier or the ARN of your DB instance.
        public let dBInstanceIdentifier: String

        public init(dBInstanceIdentifier: String) {
            self.dBInstanceIdentifier = dBInstanceIdentifier
        }

        private enum CodingKeys: String, CodingKey {
            case dBInstanceIdentifier = "DBInstanceIdentifier"
        }
    }

    public struct DescribeValidDBInstanceModificationsResult: AWSDecodableShape {
        public let validDBInstanceModificationsMessage: ValidDBInstanceModificationsMessage?

        public init(validDBInstanceModificationsMessage: ValidDBInstanceModificationsMessage? = nil) {
            self.validDBInstanceModificationsMessage = validDBInstanceModificationsMessage
        }

        private enum CodingKeys: String, CodingKey {
            case validDBInstanceModificationsMessage = "ValidDBInstanceModificationsMessage"
        }
    }

    public struct DomainMembership: AWSDecodableShape {
        /// The identifier of the Active Directory Domain.
        public let domain: String?
        /// The fully qualified domain name of the Active Directory Domain.
        public let fqdn: String?
        /// The name of the IAM role to be used when making API calls to the Directory Service.
        public let iAMRoleName: String?
        /// The status of the Active Directory Domain membership for the DB instance or cluster. Values include joined, pending-join, failed, and so on.
        public let status: String?

        public init(domain: String? = nil, fqdn: String? = nil, iAMRoleName: String? = nil, status: String? = nil) {
            self.domain = domain
            self.fqdn = fqdn
            self.iAMRoleName = iAMRoleName
            self.status = status
        }

        private enum CodingKeys: String, CodingKey {
            case domain = "Domain"
            case fqdn = "FQDN"
            case iAMRoleName = "IAMRoleName"
            case status = "Status"
        }
    }

    public struct DoubleRange: AWSDecodableShape {
        /// The minimum value in the range.
        public let from: Double?
        /// The maximum value in the range.
        public let to: Double?

        public init(from: Double? = nil, to: Double? = nil) {
            self.from = from
            self.to = to
        }

        private enum CodingKeys: String, CodingKey {
            case from = "From"
            case to = "To"
        }
    }

    public struct DownloadDBLogFilePortionDetails: AWSDecodableShape {
        /// Boolean value that if true, indicates there is more data to be downloaded.
        public let additionalDataPending: Bool?
        /// Entries from the specified log file.
        public let logFileData: String?
        /// A pagination token that can be used in a later DownloadDBLogFilePortion request.
        public let marker: String?

        public init(additionalDataPending: Bool? = nil, logFileData: String? = nil, marker: String? = nil) {
            self.additionalDataPending = additionalDataPending
            self.logFileData = logFileData
            self.marker = marker
        }

        private enum CodingKeys: String, CodingKey {
            case additionalDataPending = "AdditionalDataPending"
            case logFileData = "LogFileData"
            case marker = "Marker"
        }
    }

    public struct DownloadDBLogFilePortionMessage: AWSEncodableShape {
        /// The customer-assigned name of the DB instance that contains the log files you want to list. Constraints:   Must match the identifier of an existing DBInstance.
        public let dBInstanceIdentifier: String
        /// The name of the log file to be downloaded.
        public let logFileName: String
        /// The pagination token provided in the previous request or "0". If the Marker parameter is specified the response includes only records beyond the marker until the end of the file or up to NumberOfLines.
        public let marker: String?
        /// The number of lines to download. If the number of lines specified results in a file over 1 MB in size, the file is truncated at 1 MB in size. If the NumberOfLines parameter is specified, then the block of lines returned can be from the beginning or the end of the log file, depending on the value of the Marker parameter.   If neither Marker or NumberOfLines are specified, the entire log file is returned up to a maximum of 10000 lines, starting with the most recent log entries first.   If NumberOfLines is specified and Marker isn't specified, then the most recent lines from the end of the log file are returned.   If Marker is specified as "0", then the specified number of lines from the beginning of the log file are returned.   You can download the log file in blocks of lines by specifying the size of the block using the NumberOfLines parameter, and by specifying a value of "0" for the Marker parameter in your first request. Include the Marker value returned in the response as the Marker value for the next request, continuing until the AdditionalDataPending response element returns false.
        public let numberOfLines: Int?

        public init(dBInstanceIdentifier: String, logFileName: String, marker: String? = nil, numberOfLines: Int? = nil) {
            self.dBInstanceIdentifier = dBInstanceIdentifier
            self.logFileName = logFileName
            self.marker = marker
            self.numberOfLines = numberOfLines
        }

        private enum CodingKeys: String, CodingKey {
            case dBInstanceIdentifier = "DBInstanceIdentifier"
            case logFileName = "LogFileName"
            case marker = "Marker"
            case numberOfLines = "NumberOfLines"
        }
    }

    public struct EC2SecurityGroup: AWSDecodableShape {
        /// Specifies the id of the EC2 security group.
        public let eC2SecurityGroupId: String?
        /// Specifies the name of the EC2 security group.
        public let eC2SecurityGroupName: String?
        ///  Specifies the Amazon Web Services ID of the owner of the EC2 security group specified in the EC2SecurityGroupName field.
        public let eC2SecurityGroupOwnerId: String?
        /// Provides the status of the EC2 security group. Status can be "authorizing", "authorized", "revoking", and "revoked".
        public let status: String?

        public init(eC2SecurityGroupId: String? = nil, eC2SecurityGroupName: String? = nil, eC2SecurityGroupOwnerId: String? = nil, status: String? = nil) {
            self.eC2SecurityGroupId = eC2SecurityGroupId
            self.eC2SecurityGroupName = eC2SecurityGroupName
            self.eC2SecurityGroupOwnerId = eC2SecurityGroupOwnerId
            self.status = status
        }

        private enum CodingKeys: String, CodingKey {
            case eC2SecurityGroupId = "EC2SecurityGroupId"
            case eC2SecurityGroupName = "EC2SecurityGroupName"
            case eC2SecurityGroupOwnerId = "EC2SecurityGroupOwnerId"
            case status = "Status"
        }
    }

    public struct Endpoint: AWSDecodableShape {
        /// Specifies the DNS address of the DB instance.
        public let address: String?
        /// Specifies the ID that Amazon Route 53 assigns when you create a hosted zone.
        public let hostedZoneId: String?
        /// Specifies the port that the database engine is listening on.
        public let port: Int?

        public init(address: String? = nil, hostedZoneId: String? = nil, port: Int? = nil) {
            self.address = address
            self.hostedZoneId = hostedZoneId
            self.port = port
        }

        private enum CodingKeys: String, CodingKey {
            case address = "Address"
            case hostedZoneId = "HostedZoneId"
            case port = "Port"
        }
    }

    public struct EngineDefaults: AWSDecodableShape {
        public struct _ParametersEncoding: ArrayCoderProperties { public static let member = "Parameter" }

        /// Specifies the name of the DB parameter group family that the engine default parameters apply to.
        public let dBParameterGroupFamily: String?
        ///  An optional pagination token provided by a previous EngineDefaults request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by MaxRecords .
        public let marker: String?
        /// Contains a list of engine default parameters.
        @OptionalCustomCoding<ArrayCoder<_ParametersEncoding, Parameter>>
        public var parameters: [Parameter]?

        public init(dBParameterGroupFamily: String? = nil, marker: String? = nil, parameters: [Parameter]? = nil) {
            self.dBParameterGroupFamily = dBParameterGroupFamily
            self.marker = marker
            self.parameters = parameters
        }

        private enum CodingKeys: String, CodingKey {
            case dBParameterGroupFamily = "DBParameterGroupFamily"
            case marker = "Marker"
            case parameters = "Parameters"
        }
    }

    public struct Event: AWSDecodableShape {
        public struct _EventCategoriesEncoding: ArrayCoderProperties { public static let member = "EventCategory" }

        /// Specifies the date and time of the event.
        public let date: Date?
        /// Specifies the category for the event.
        @OptionalCustomCoding<ArrayCoder<_EventCategoriesEncoding, String>>
        public var eventCategories: [String]?
        /// Provides the text of this event.
        public let message: String?
        /// The Amazon Resource Name (ARN) for the event.
        public let sourceArn: String?
        /// Provides the identifier for the source of the event.
        public let sourceIdentifier: String?
        /// Specifies the source type for this event.
        public let sourceType: SourceType?

        public init(date: Date? = nil, eventCategories: [String]? = nil, message: String? = nil, sourceArn: String? = nil, sourceIdentifier: String? = nil, sourceType: SourceType? = nil) {
            self.date = date
            self.eventCategories = eventCategories
            self.message = message
            self.sourceArn = sourceArn
            self.sourceIdentifier = sourceIdentifier
            self.sourceType = sourceType
        }

        private enum CodingKeys: String, CodingKey {
            case date = "Date"
            case eventCategories = "EventCategories"
            case message = "Message"
            case sourceArn = "SourceArn"
            case sourceIdentifier = "SourceIdentifier"
            case sourceType = "SourceType"
        }
    }

    public struct EventCategoriesMap: AWSDecodableShape {
        public struct _EventCategoriesEncoding: ArrayCoderProperties { public static let member = "EventCategory" }

        /// The event categories for the specified source type
        @OptionalCustomCoding<ArrayCoder<_EventCategoriesEncoding, String>>
        public var eventCategories: [String]?
        /// The source type that the returned categories belong to
        public let sourceType: String?

        public init(eventCategories: [String]? = nil, sourceType: String? = nil) {
            self.eventCategories = eventCategories
            self.sourceType = sourceType
        }

        private enum CodingKeys: String, CodingKey {
            case eventCategories = "EventCategories"
            case sourceType = "SourceType"
        }
    }

    public struct EventCategoriesMessage: AWSDecodableShape {
        public struct _EventCategoriesMapListEncoding: ArrayCoderProperties { public static let member = "EventCategoriesMap" }

        /// A list of EventCategoriesMap data types.
        @OptionalCustomCoding<ArrayCoder<_EventCategoriesMapListEncoding, EventCategoriesMap>>
        public var eventCategoriesMapList: [EventCategoriesMap]?

        public init(eventCategoriesMapList: [EventCategoriesMap]? = nil) {
            self.eventCategoriesMapList = eventCategoriesMapList
        }

        private enum CodingKeys: String, CodingKey {
            case eventCategoriesMapList = "EventCategoriesMapList"
        }
    }

    public struct EventSubscription: AWSDecodableShape {
        public struct _EventCategoriesListEncoding: ArrayCoderProperties { public static let member = "EventCategory" }
        public struct _SourceIdsListEncoding: ArrayCoderProperties { public static let member = "SourceId" }

        /// The Amazon Web Services customer account associated with the RDS event notification subscription.
        public let customerAwsId: String?
        /// The RDS event notification subscription Id.
        public let custSubscriptionId: String?
        /// A Boolean value indicating if the subscription is enabled. True indicates the subscription is enabled.
        public let enabled: Bool?
        /// A list of event categories for the RDS event notification subscription.
        @OptionalCustomCoding<ArrayCoder<_EventCategoriesListEncoding, String>>
        public var eventCategoriesList: [String]?
        /// The Amazon Resource Name (ARN) for the event subscription.
        public let eventSubscriptionArn: String?
        /// The topic ARN of the RDS event notification subscription.
        public let snsTopicArn: String?
        /// A list of source IDs for the RDS event notification subscription.
        @OptionalCustomCoding<ArrayCoder<_SourceIdsListEncoding, String>>
        public var sourceIdsList: [String]?
        /// The source type for the RDS event notification subscription.
        public let sourceType: String?
        /// The status of the RDS event notification subscription. Constraints: Can be one of the following: creating | modifying | deleting | active | no-permission | topic-not-exist The status "no-permission" indicates that RDS no longer has permission to post to the SNS topic. The status "topic-not-exist" indicates that the topic was deleted after the subscription was created.
        public let status: String?
        /// The time the RDS event notification subscription was created.
        public let subscriptionCreationTime: String?

        public init(customerAwsId: String? = nil, custSubscriptionId: String? = nil, enabled: Bool? = nil, eventCategoriesList: [String]? = nil, eventSubscriptionArn: String? = nil, snsTopicArn: String? = nil, sourceIdsList: [String]? = nil, sourceType: String? = nil, status: String? = nil, subscriptionCreationTime: String? = nil) {
            self.customerAwsId = customerAwsId
            self.custSubscriptionId = custSubscriptionId
            self.enabled = enabled
            self.eventCategoriesList = eventCategoriesList
            self.eventSubscriptionArn = eventSubscriptionArn
            self.snsTopicArn = snsTopicArn
            self.sourceIdsList = sourceIdsList
            self.sourceType = sourceType
            self.status = status
            self.subscriptionCreationTime = subscriptionCreationTime
        }

        private enum CodingKeys: String, CodingKey {
            case customerAwsId = "CustomerAwsId"
            case custSubscriptionId = "CustSubscriptionId"
            case enabled = "Enabled"
            case eventCategoriesList = "EventCategoriesList"
            case eventSubscriptionArn = "EventSubscriptionArn"
            case snsTopicArn = "SnsTopicArn"
            case sourceIdsList = "SourceIdsList"
            case sourceType = "SourceType"
            case status = "Status"
            case subscriptionCreationTime = "SubscriptionCreationTime"
        }
    }

    public struct EventSubscriptionsMessage: AWSDecodableShape {
        public struct _EventSubscriptionsListEncoding: ArrayCoderProperties { public static let member = "EventSubscription" }

        /// A list of EventSubscriptions data types.
        @OptionalCustomCoding<ArrayCoder<_EventSubscriptionsListEncoding, EventSubscription>>
        public var eventSubscriptionsList: [EventSubscription]?
        ///  An optional pagination token provided by a previous DescribeOrderableDBInstanceOptions request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by MaxRecords.
        public let marker: String?

        public init(eventSubscriptionsList: [EventSubscription]? = nil, marker: String? = nil) {
            self.eventSubscriptionsList = eventSubscriptionsList
            self.marker = marker
        }

        private enum CodingKeys: String, CodingKey {
            case eventSubscriptionsList = "EventSubscriptionsList"
            case marker = "Marker"
        }
    }

    public struct EventsMessage: AWSDecodableShape {
        public struct _EventsEncoding: ArrayCoderProperties { public static let member = "Event" }

        ///  A list of Event instances.
        @OptionalCustomCoding<ArrayCoder<_EventsEncoding, Event>>
        public var events: [Event]?
        ///  An optional pagination token provided by a previous Events request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by MaxRecords .
        public let marker: String?

        public init(events: [Event]? = nil, marker: String? = nil) {
            self.events = events
            self.marker = marker
        }

        private enum CodingKeys: String, CodingKey {
            case events = "Events"
            case marker = "Marker"
        }
    }

    public struct ExportTask: AWSDecodableShape {
        /// The data exported from the snapshot. Valid values are the following:    database - Export all the data from a specified database.    database.table table-name - Export a table of the snapshot. This format is valid only for RDS for MySQL, RDS for MariaDB, and Aurora MySQL.    database.schema schema-name - Export a database schema of the snapshot. This format is valid only for RDS for PostgreSQL and Aurora PostgreSQL.    database.schema.table table-name - Export a table of the database schema. This format is valid only for RDS for PostgreSQL and Aurora PostgreSQL.
        @OptionalCustomCoding<StandardArrayCoder>
        public var exportOnly: [String]?
        /// A unique identifier for the snapshot export task. This ID isn't an identifier for the Amazon S3 bucket where the snapshot is exported to.
        public let exportTaskIdentifier: String?
        /// The reason the export failed, if it failed.
        public let failureCause: String?
        /// The name of the IAM role that is used to write to Amazon S3 when exporting a snapshot.
        public let iamRoleArn: String?
        /// The key identifier of the Amazon Web Services KMS customer master key (CMK) that is used to encrypt the snapshot when it's exported to Amazon S3. The Amazon Web Services KMS CMK identifier is its key ARN, key ID, alias ARN, or alias name. The IAM role used for the snapshot export must have encryption and decryption permissions to use this Amazon Web Services KMS CMK.
        public let kmsKeyId: String?
        /// The progress of the snapshot export task as a percentage.
        public let percentProgress: Int?
        /// The Amazon S3 bucket that the snapshot is exported to.
        public let s3Bucket: String?
        /// The Amazon S3 bucket prefix that is the file name and path of the exported snapshot.
        public let s3Prefix: String?
        /// The time that the snapshot was created.
        public let snapshotTime: Date?
        /// The Amazon Resource Name (ARN) of the snapshot exported to Amazon S3.
        public let sourceArn: String?
        /// The progress status of the export task.
        public let status: String?
        /// The time that the snapshot export task completed.
        public let taskEndTime: Date?
        /// The time that the snapshot export task started.
        public let taskStartTime: Date?
        /// The total amount of data exported, in gigabytes.
        public let totalExtractedDataInGB: Int?
        /// A warning about the snapshot export task.
        public let warningMessage: String?

        public init(exportOnly: [String]? = nil, exportTaskIdentifier: String? = nil, failureCause: String? = nil, iamRoleArn: String? = nil, kmsKeyId: String? = nil, percentProgress: Int? = nil, s3Bucket: String? = nil, s3Prefix: String? = nil, snapshotTime: Date? = nil, sourceArn: String? = nil, status: String? = nil, taskEndTime: Date? = nil, taskStartTime: Date? = nil, totalExtractedDataInGB: Int? = nil, warningMessage: String? = nil) {
            self.exportOnly = exportOnly
            self.exportTaskIdentifier = exportTaskIdentifier
            self.failureCause = failureCause
            self.iamRoleArn = iamRoleArn
            self.kmsKeyId = kmsKeyId
            self.percentProgress = percentProgress
            self.s3Bucket = s3Bucket
            self.s3Prefix = s3Prefix
            self.snapshotTime = snapshotTime
            self.sourceArn = sourceArn
            self.status = status
            self.taskEndTime = taskEndTime
            self.taskStartTime = taskStartTime
            self.totalExtractedDataInGB = totalExtractedDataInGB
            self.warningMessage = warningMessage
        }

        private enum CodingKeys: String, CodingKey {
            case exportOnly = "ExportOnly"
            case exportTaskIdentifier = "ExportTaskIdentifier"
            case failureCause = "FailureCause"
            case iamRoleArn = "IamRoleArn"
            case kmsKeyId = "KmsKeyId"
            case percentProgress = "PercentProgress"
            case s3Bucket = "S3Bucket"
            case s3Prefix = "S3Prefix"
            case snapshotTime = "SnapshotTime"
            case sourceArn = "SourceArn"
            case status = "Status"
            case taskEndTime = "TaskEndTime"
            case taskStartTime = "TaskStartTime"
            case totalExtractedDataInGB = "TotalExtractedDataInGB"
            case warningMessage = "WarningMessage"
        }
    }

    public struct ExportTasksMessage: AWSDecodableShape {
        public struct _ExportTasksEncoding: ArrayCoderProperties { public static let member = "ExportTask" }

        /// Information about an export of a snapshot to Amazon S3.
        @OptionalCustomCoding<ArrayCoder<_ExportTasksEncoding, ExportTask>>
        public var exportTasks: [ExportTask]?
        /// A pagination token that can be used in a later DescribeExportTasks request. A marker is used for pagination to identify the location to begin output for the next response of DescribeExportTasks.
        public let marker: String?

        public init(exportTasks: [ExportTask]? = nil, marker: String? = nil) {
            self.exportTasks = exportTasks
            self.marker = marker
        }

        private enum CodingKeys: String, CodingKey {
            case exportTasks = "ExportTasks"
            case marker = "Marker"
        }
    }

    public struct FailoverDBClusterMessage: AWSEncodableShape {
        /// A DB cluster identifier to force a failover for. This parameter isn't case-sensitive. Constraints:   Must match the identifier of an existing DBCluster.
        public let dBClusterIdentifier: String
        /// The name of the instance to promote to the primary instance. You must specify the instance identifier for an Aurora Replica in the DB cluster. For example, mydbcluster-replica1.
        public let targetDBInstanceIdentifier: String?

        public init(dBClusterIdentifier: String, targetDBInstanceIdentifier: String? = nil) {
            self.dBClusterIdentifier = dBClusterIdentifier
            self.targetDBInstanceIdentifier = targetDBInstanceIdentifier
        }

        private enum CodingKeys: String, CodingKey {
            case dBClusterIdentifier = "DBClusterIdentifier"
            case targetDBInstanceIdentifier = "TargetDBInstanceIdentifier"
        }
    }

    public struct FailoverDBClusterResult: AWSDecodableShape {
        public let dBCluster: DBCluster?

        public init(dBCluster: DBCluster? = nil) {
            self.dBCluster = dBCluster
        }

        private enum CodingKeys: String, CodingKey {
            case dBCluster = "DBCluster"
        }
    }

    public struct FailoverGlobalClusterMessage: AWSEncodableShape {
        /// Identifier of the Aurora global database (GlobalCluster) that should be failed over. The identifier is the unique key assigned by the user when the Aurora global database was created. In other words, it's the name of the Aurora global database that you want to fail over.  Constraints:   Must match the identifier of an existing GlobalCluster (Aurora global database).
        public let globalClusterIdentifier: String
        /// Identifier of the secondary Aurora DB cluster that you want to promote to primary for the Aurora global database (GlobalCluster.) Use the Amazon Resource Name (ARN) for the identifier so that Aurora can locate the cluster in its Amazon Web Services Region.
        public let targetDbClusterIdentifier: String

        public init(globalClusterIdentifier: String, targetDbClusterIdentifier: String) {
            self.globalClusterIdentifier = globalClusterIdentifier
            self.targetDbClusterIdentifier = targetDbClusterIdentifier
        }

        public func validate(name: String) throws {
            try self.validate(self.globalClusterIdentifier, name: "globalClusterIdentifier", parent: name, max: 255)
            try self.validate(self.globalClusterIdentifier, name: "globalClusterIdentifier", parent: name, min: 1)
            try self.validate(self.globalClusterIdentifier, name: "globalClusterIdentifier", parent: name, pattern: "[A-Za-z][0-9A-Za-z-:._]*")
            try self.validate(self.targetDbClusterIdentifier, name: "targetDbClusterIdentifier", parent: name, max: 255)
            try self.validate(self.targetDbClusterIdentifier, name: "targetDbClusterIdentifier", parent: name, min: 1)
            try self.validate(self.targetDbClusterIdentifier, name: "targetDbClusterIdentifier", parent: name, pattern: "[A-Za-z][0-9A-Za-z-:._]*")
        }

        private enum CodingKeys: String, CodingKey {
            case globalClusterIdentifier = "GlobalClusterIdentifier"
            case targetDbClusterIdentifier = "TargetDbClusterIdentifier"
        }
    }

    public struct FailoverGlobalClusterResult: AWSDecodableShape {
        public let globalCluster: GlobalCluster?

        public init(globalCluster: GlobalCluster? = nil) {
            self.globalCluster = globalCluster
        }

        private enum CodingKeys: String, CodingKey {
            case globalCluster = "GlobalCluster"
        }
    }

    public struct FailoverState: AWSDecodableShape {
        /// The Amazon Resource Name (ARN) of the Aurora DB cluster that is currently being demoted, and which is associated with this state.
        public let fromDbClusterArn: String?
        /// The current status of the Aurora global database (GlobalCluster). Possible values are as follows:    pending &#x96; A request to fail over the Aurora global database (GlobalCluster) has been received by the service. The GlobalCluster's primary DB cluster and the specified secondary DB cluster are being verified before the failover process can start.   failing-over &#x96; This status covers the range of Aurora internal operations that take place during the failover process, such as demoting the primary Aurora DB cluster, promoting the secondary Aurora DB, and synchronizing replicas.    cancelling &#x96; The request to fail over the Aurora global database (GlobalCluster) was cancelled and the primary Aurora DB cluster and the selected secondary Aurora DB cluster are returning to their previous states.
        public let status: FailoverStatus?
        /// The Amazon Resource Name (ARN) of the Aurora DB cluster that is currently being promoted, and which is associated with this state.
        public let toDbClusterArn: String?

        public init(fromDbClusterArn: String? = nil, status: FailoverStatus? = nil, toDbClusterArn: String? = nil) {
            self.fromDbClusterArn = fromDbClusterArn
            self.status = status
            self.toDbClusterArn = toDbClusterArn
        }

        private enum CodingKeys: String, CodingKey {
            case fromDbClusterArn = "FromDbClusterArn"
            case status = "Status"
            case toDbClusterArn = "ToDbClusterArn"
        }
    }

    public struct Filter: AWSEncodableShape {
        public struct _ValuesEncoding: ArrayCoderProperties { public static let member = "Value" }

        /// The name of the filter. Filter names are case-sensitive.
        public let name: String
        /// One or more filter values. Filter values are case-sensitive.
        @CustomCoding<ArrayCoder<_ValuesEncoding, String>>
        public var values: [String]

        public init(name: String, values: [String]) {
            self.name = name
            self.values = values
        }

        private enum CodingKeys: String, CodingKey {
            case name = "Name"
            case values = "Values"
        }
    }

    public struct GlobalCluster: AWSDecodableShape {
        public struct _GlobalClusterMembersEncoding: ArrayCoderProperties { public static let member = "GlobalClusterMember" }

        ///  The default database name within the new global database cluster.
        public let databaseName: String?
        ///  The deletion protection setting for the new global database cluster.
        public let deletionProtection: Bool?
        ///  The Aurora database engine used by the global database cluster.
        public let engine: String?
        /// Indicates the database engine version.
        public let engineVersion: String?
        /// A data object containing all properties for the current state of an in-process or pending failover process for this Aurora global database. This object is empty unless the FailoverGlobalCluster API operation has been called on this Aurora global database (GlobalCluster).
        public let failoverState: FailoverState?
        /// The Amazon Resource Name (ARN) for the global database cluster.
        public let globalClusterArn: String?
        ///  Contains a user-supplied global database cluster identifier. This identifier is the unique key that identifies a global database cluster.
        public let globalClusterIdentifier: String?
        ///  The list of cluster IDs for secondary clusters within the global database cluster. Currently limited to 1 item.
        @OptionalCustomCoding<ArrayCoder<_GlobalClusterMembersEncoding, GlobalClusterMember>>
        public var globalClusterMembers: [GlobalClusterMember]?
        ///  The Amazon Web Services Region-unique, immutable identifier for the global database cluster. This identifier is found in Amazon Web Services CloudTrail log entries whenever the Amazon Web Services KMS customer master key (CMK) for the DB cluster is accessed.
        public let globalClusterResourceId: String?
        /// Specifies the current state of this global database cluster.
        public let status: String?
        ///  The storage encryption setting for the global database cluster.
        public let storageEncrypted: Bool?

        public init(databaseName: String? = nil, deletionProtection: Bool? = nil, engine: String? = nil, engineVersion: String? = nil, failoverState: FailoverState? = nil, globalClusterArn: String? = nil, globalClusterIdentifier: String? = nil, globalClusterMembers: [GlobalClusterMember]? = nil, globalClusterResourceId: String? = nil, status: String? = nil, storageEncrypted: Bool? = nil) {
            self.databaseName = databaseName
            self.deletionProtection = deletionProtection
            self.engine = engine
            self.engineVersion = engineVersion
            self.failoverState = failoverState
            self.globalClusterArn = globalClusterArn
            self.globalClusterIdentifier = globalClusterIdentifier
            self.globalClusterMembers = globalClusterMembers
            self.globalClusterResourceId = globalClusterResourceId
            self.status = status
            self.storageEncrypted = storageEncrypted
        }

        private enum CodingKeys: String, CodingKey {
            case databaseName = "DatabaseName"
            case deletionProtection = "DeletionProtection"
            case engine = "Engine"
            case engineVersion = "EngineVersion"
            case failoverState = "FailoverState"
            case globalClusterArn = "GlobalClusterArn"
            case globalClusterIdentifier = "GlobalClusterIdentifier"
            case globalClusterMembers = "GlobalClusterMembers"
            case globalClusterResourceId = "GlobalClusterResourceId"
            case status = "Status"
            case storageEncrypted = "StorageEncrypted"
        }
    }

    public struct GlobalClusterMember: AWSDecodableShape {
        ///  The Amazon Resource Name (ARN) for each Aurora cluster.
        public let dBClusterArn: String?
        /// Specifies whether a secondary cluster in an Aurora global database has write forwarding enabled, not enabled, or is in the process of enabling it.
        public let globalWriteForwardingStatus: WriteForwardingStatus?
        ///  Specifies whether the Aurora cluster is the primary cluster (that is, has read-write capability) for the Aurora global database with which it is associated.
        public let isWriter: Bool?
        ///  The Amazon Resource Name (ARN) for each read-only secondary cluster associated with the Aurora global database.
        @OptionalCustomCoding<StandardArrayCoder>
        public var readers: [String]?

        public init(dBClusterArn: String? = nil, globalWriteForwardingStatus: WriteForwardingStatus? = nil, isWriter: Bool? = nil, readers: [String]? = nil) {
            self.dBClusterArn = dBClusterArn
            self.globalWriteForwardingStatus = globalWriteForwardingStatus
            self.isWriter = isWriter
            self.readers = readers
        }

        private enum CodingKeys: String, CodingKey {
            case dBClusterArn = "DBClusterArn"
            case globalWriteForwardingStatus = "GlobalWriteForwardingStatus"
            case isWriter = "IsWriter"
            case readers = "Readers"
        }
    }

    public struct GlobalClustersMessage: AWSDecodableShape {
        public struct _GlobalClustersEncoding: ArrayCoderProperties { public static let member = "GlobalClusterMember" }

        ///  The list of global clusters returned by this request.
        @OptionalCustomCoding<ArrayCoder<_GlobalClustersEncoding, GlobalCluster>>
        public var globalClusters: [GlobalCluster]?
        ///  An optional pagination token provided by a previous DescribeGlobalClusters request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by MaxRecords.
        public let marker: String?

        public init(globalClusters: [GlobalCluster]? = nil, marker: String? = nil) {
            self.globalClusters = globalClusters
            self.marker = marker
        }

        private enum CodingKeys: String, CodingKey {
            case globalClusters = "GlobalClusters"
            case marker = "Marker"
        }
    }

    public struct IPRange: AWSDecodableShape {
        /// Specifies the IP range.
        public let cidrip: String?
        /// Specifies the status of the IP range. Status can be "authorizing", "authorized", "revoking", and "revoked".
        public let status: String?

        public init(cidrip: String? = nil, status: String? = nil) {
            self.cidrip = cidrip
            self.status = status
        }

        private enum CodingKeys: String, CodingKey {
            case cidrip = "CIDRIP"
            case status = "Status"
        }
    }

    public struct ImportInstallationMediaMessage: AWSEncodableShape {
        /// The identifier of the custom Availability Zone (AZ) to import the installation media to.
        public let customAvailabilityZoneId: String
        /// The name of the database engine to be used for this instance.  The list only includes supported DB engines that require an on-premises customer provided license.  Valid Values:     sqlserver-ee     sqlserver-se     sqlserver-ex     sqlserver-web
        public let engine: String
        /// The path to the installation medium for the specified DB engine. Example: SQLServerISO/en_sql_server_2016_enterprise_x64_dvd_8701793.iso
        public let engineInstallationMediaPath: String
        /// The version number of the database engine to use. For a list of valid engine versions, call DescribeDBEngineVersions. The following are the database engines and links to information about the major and minor versions. The list only includes DB engines that require an on-premises customer provided license.  Microsoft SQL Server  See  Microsoft SQL Server Versions on Amazon RDS in the Amazon RDS User Guide.
        public let engineVersion: String
        /// The path to the installation medium for the operating system associated with the specified DB engine. Example: WindowsISO/en_windows_server_2016_x64_dvd_9327751.iso
        public let oSInstallationMediaPath: String

        public init(customAvailabilityZoneId: String, engine: String, engineInstallationMediaPath: String, engineVersion: String, oSInstallationMediaPath: String) {
            self.customAvailabilityZoneId = customAvailabilityZoneId
            self.engine = engine
            self.engineInstallationMediaPath = engineInstallationMediaPath
            self.engineVersion = engineVersion
            self.oSInstallationMediaPath = oSInstallationMediaPath
        }

        private enum CodingKeys: String, CodingKey {
            case customAvailabilityZoneId = "CustomAvailabilityZoneId"
            case engine = "Engine"
            case engineInstallationMediaPath = "EngineInstallationMediaPath"
            case engineVersion = "EngineVersion"
            case oSInstallationMediaPath = "OSInstallationMediaPath"
        }
    }

    public struct InstallationMedia: AWSDecodableShape {
        /// The custom Availability Zone (AZ) that contains the installation media.
        public let customAvailabilityZoneId: String?
        /// The DB engine.
        public let engine: String?
        /// The path to the installation medium for the DB engine.
        public let engineInstallationMediaPath: String?
        /// The engine version of the DB engine.
        public let engineVersion: String?
        /// If an installation media failure occurred, the cause of the failure.
        public let failureCause: InstallationMediaFailureCause?
        /// The installation medium ID.
        public let installationMediaId: String?
        /// The path to the installation medium for the operating system associated with the DB engine.
        public let oSInstallationMediaPath: String?
        /// The status of the installation medium.
        public let status: String?

        public init(customAvailabilityZoneId: String? = nil, engine: String? = nil, engineInstallationMediaPath: String? = nil, engineVersion: String? = nil, failureCause: InstallationMediaFailureCause? = nil, installationMediaId: String? = nil, oSInstallationMediaPath: String? = nil, status: String? = nil) {
            self.customAvailabilityZoneId = customAvailabilityZoneId
            self.engine = engine
            self.engineInstallationMediaPath = engineInstallationMediaPath
            self.engineVersion = engineVersion
            self.failureCause = failureCause
            self.installationMediaId = installationMediaId
            self.oSInstallationMediaPath = oSInstallationMediaPath
            self.status = status
        }

        private enum CodingKeys: String, CodingKey {
            case customAvailabilityZoneId = "CustomAvailabilityZoneId"
            case engine = "Engine"
            case engineInstallationMediaPath = "EngineInstallationMediaPath"
            case engineVersion = "EngineVersion"
            case failureCause = "FailureCause"
            case installationMediaId = "InstallationMediaId"
            case oSInstallationMediaPath = "OSInstallationMediaPath"
            case status = "Status"
        }
    }

    public struct InstallationMediaFailureCause: AWSDecodableShape {
        /// The reason that an installation media import failed.
        public let message: String?

        public init(message: String? = nil) {
            self.message = message
        }

        private enum CodingKeys: String, CodingKey {
            case message = "Message"
        }
    }

    public struct InstallationMediaMessage: AWSDecodableShape {
        public struct _InstallationMediaEncoding: ArrayCoderProperties { public static let member = "InstallationMedia" }

        /// The list of InstallationMedia objects for the Amazon Web Services account.
        @OptionalCustomCoding<ArrayCoder<_InstallationMediaEncoding, InstallationMedia>>
        public var installationMedia: [InstallationMedia]?
        /// An optional pagination token provided by a previous DescribeInstallationMedia request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by MaxRecords.
        public let marker: String?

        public init(installationMedia: [InstallationMedia]? = nil, marker: String? = nil) {
            self.installationMedia = installationMedia
            self.marker = marker
        }

        private enum CodingKeys: String, CodingKey {
            case installationMedia = "InstallationMedia"
            case marker = "Marker"
        }
    }

    public struct ListTagsForResourceMessage: AWSEncodableShape {
        public struct _FiltersEncoding: ArrayCoderProperties { public static let member = "Filter" }

        /// This parameter isn't currently supported.
        @OptionalCustomCoding<ArrayCoder<_FiltersEncoding, Filter>>
        public var filters: [Filter]?
        /// The Amazon RDS resource with tags to be listed. This value is an Amazon Resource Name (ARN). For information about creating an ARN, see  Constructing an ARN for Amazon RDS in the Amazon RDS User Guide.
        public let resourceName: String

        public init(filters: [Filter]? = nil, resourceName: String) {
            self.filters = filters
            self.resourceName = resourceName
        }

        private enum CodingKeys: String, CodingKey {
            case filters = "Filters"
            case resourceName = "ResourceName"
        }
    }

    public struct MinimumEngineVersionPerAllowedValue: AWSDecodableShape {
        /// The allowed value for an option setting.
        public let allowedValue: String?
        /// The minimum DB engine version required for the allowed value.
        public let minimumEngineVersion: String?

        public init(allowedValue: String? = nil, minimumEngineVersion: String? = nil) {
            self.allowedValue = allowedValue
            self.minimumEngineVersion = minimumEngineVersion
        }

        private enum CodingKeys: String, CodingKey {
            case allowedValue = "AllowedValue"
            case minimumEngineVersion = "MinimumEngineVersion"
        }
    }

    public struct ModifyCertificatesMessage: AWSEncodableShape {
        /// The new default certificate identifier to override the current one with. To determine the valid values, use the describe-certificates CLI command or the DescribeCertificates API operation.
        public let certificateIdentifier: String?
        /// A value that indicates whether to remove the override for the default certificate. If the override is removed, the default certificate is the system default.
        public let removeCustomerOverride: Bool?

        public init(certificateIdentifier: String? = nil, removeCustomerOverride: Bool? = nil) {
            self.certificateIdentifier = certificateIdentifier
            self.removeCustomerOverride = removeCustomerOverride
        }

        private enum CodingKeys: String, CodingKey {
            case certificateIdentifier = "CertificateIdentifier"
            case removeCustomerOverride = "RemoveCustomerOverride"
        }
    }

    public struct ModifyCertificatesResult: AWSDecodableShape {
        public let certificate: Certificate?

        public init(certificate: Certificate? = nil) {
            self.certificate = certificate
        }

        private enum CodingKeys: String, CodingKey {
            case certificate = "Certificate"
        }
    }

    public struct ModifyCurrentDBClusterCapacityMessage: AWSEncodableShape {
        /// The DB cluster capacity. When you change the capacity of a paused Aurora Serverless DB cluster, it automatically resumes. Constraints:   For Aurora MySQL, valid capacity values are 1, 2, 4, 8, 16, 32, 64, 128, and 256.   For Aurora PostgreSQL, valid capacity values are 2, 4, 8, 16, 32, 64, 192, and 384.
        public let capacity: Int?
        /// The DB cluster identifier for the cluster being modified. This parameter isn't case-sensitive. Constraints:   Must match the identifier of an existing DB cluster.
        public let dBClusterIdentifier: String
        /// The amount of time, in seconds, that Aurora Serverless tries to find a scaling point to perform seamless scaling before enforcing the timeout action. The default is 300.   Value must be from 10 through 600.
        public let secondsBeforeTimeout: Int?
        /// The action to take when the timeout is reached, either ForceApplyCapacityChange or RollbackCapacityChange.  ForceApplyCapacityChange, the default, sets the capacity to the specified value as soon as possible.  RollbackCapacityChange ignores the capacity change if a scaling point isn't found in the timeout period.
        public let timeoutAction: String?

        public init(capacity: Int? = nil, dBClusterIdentifier: String, secondsBeforeTimeout: Int? = nil, timeoutAction: String? = nil) {
            self.capacity = capacity
            self.dBClusterIdentifier = dBClusterIdentifier
            self.secondsBeforeTimeout = secondsBeforeTimeout
            self.timeoutAction = timeoutAction
        }

        private enum CodingKeys: String, CodingKey {
            case capacity = "Capacity"
            case dBClusterIdentifier = "DBClusterIdentifier"
            case secondsBeforeTimeout = "SecondsBeforeTimeout"
            case timeoutAction = "TimeoutAction"
        }
    }

    public struct ModifyDBClusterEndpointMessage: AWSEncodableShape {
        /// The identifier of the endpoint to modify. This parameter is stored as a lowercase string.
        public let dBClusterEndpointIdentifier: String
        /// The type of the endpoint. One of: READER, WRITER, ANY.
        public let endpointType: String?
        /// List of DB instance identifiers that aren't part of the custom endpoint group. All other eligible instances are reachable through the custom endpoint. Only relevant if the list of static members is empty.
        @OptionalCustomCoding<StandardArrayCoder>
        public var excludedMembers: [String]?
        /// List of DB instance identifiers that are part of the custom endpoint group.
        @OptionalCustomCoding<StandardArrayCoder>
        public var staticMembers: [String]?

        public init(dBClusterEndpointIdentifier: String, endpointType: String? = nil, excludedMembers: [String]? = nil, staticMembers: [String]? = nil) {
            self.dBClusterEndpointIdentifier = dBClusterEndpointIdentifier
            self.endpointType = endpointType
            self.excludedMembers = excludedMembers
            self.staticMembers = staticMembers
        }

        private enum CodingKeys: String, CodingKey {
            case dBClusterEndpointIdentifier = "DBClusterEndpointIdentifier"
            case endpointType = "EndpointType"
            case excludedMembers = "ExcludedMembers"
            case staticMembers = "StaticMembers"
        }
    }

    public struct ModifyDBClusterMessage: AWSEncodableShape {
        public struct _VpcSecurityGroupIdsEncoding: ArrayCoderProperties { public static let member = "VpcSecurityGroupId" }

        /// A value that indicates whether major version upgrades are allowed. Constraints: You must allow major version upgrades when specifying a value for the EngineVersion parameter that is a different major version than the DB cluster's current version.
        public let allowMajorVersionUpgrade: Bool?
        /// A value that indicates whether the modifications in this request and any pending modifications are asynchronously applied as soon as possible, regardless of the PreferredMaintenanceWindow setting for the DB cluster. If this parameter is disabled, changes to the DB cluster are applied during the next maintenance window. The ApplyImmediately parameter only affects the EnableIAMDatabaseAuthentication, MasterUserPassword, and NewDBClusterIdentifier values. If the ApplyImmediately parameter is disabled, then changes to the EnableIAMDatabaseAuthentication, MasterUserPassword, and NewDBClusterIdentifier values are applied during the next maintenance window. All other changes are applied immediately, regardless of the value of the ApplyImmediately parameter. By default, this parameter is disabled.
        public let applyImmediately: Bool?
        /// The target backtrack window, in seconds. To disable backtracking, set this value to 0.  Currently, Backtrack is only supported for Aurora MySQL DB clusters.  Default: 0 Constraints:   If specified, this value must be set to a number from 0 to 259,200 (72 hours).
        public let backtrackWindow: Int64?
        /// The number of days for which automated backups are retained. You must specify a minimum value of 1. Default: 1 Constraints:   Must be a value from 1 to 35
        public let backupRetentionPeriod: Int?
        /// The configuration setting for the log types to be enabled for export to CloudWatch Logs for a specific DB cluster.
        public let cloudwatchLogsExportConfiguration: CloudwatchLogsExportConfiguration?
        /// A value that indicates whether to copy all tags from the DB cluster to snapshots of the DB cluster. The default is not to copy them.
        public let copyTagsToSnapshot: Bool?
        /// The DB cluster identifier for the cluster being modified. This parameter isn't case-sensitive. Constraints: This identifier must match the identifier of an existing DB cluster.
        public let dBClusterIdentifier: String
        /// The name of the DB cluster parameter group to use for the DB cluster.
        public let dBClusterParameterGroupName: String?
        /// The name of the DB parameter group to apply to all instances of the DB cluster.   When you apply a parameter group using the DBInstanceParameterGroupName parameter, the DB cluster isn't rebooted automatically. Also, parameter changes aren't applied during the next maintenance window but instead are applied immediately.  Default: The existing name setting Constraints:   The DB parameter group must be in the same DB parameter group family as this DB cluster.   The DBInstanceParameterGroupName parameter is only valid in combination with the AllowMajorVersionUpgrade parameter.
        public let dBInstanceParameterGroupName: String?
        /// A value that indicates whether the DB cluster has deletion protection enabled. The database can't be deleted when deletion protection is enabled. By default, deletion protection is disabled.
        public let deletionProtection: Bool?
        /// The Active Directory directory ID to move the DB cluster to. Specify none to remove the cluster from its current domain. The domain must be created prior to this operation.  For more information, see Kerberos Authentication in the Amazon Aurora User Guide.
        public let domain: String?
        /// Specify the name of the IAM role to be used when making API calls to the Directory Service.
        public let domainIAMRoleName: String?
        /// A value that indicates whether to enable this DB cluster to forward write operations to the primary cluster of an Aurora global database (GlobalCluster). By default, write operations are not allowed on Aurora DB clusters that are secondary clusters in an Aurora global database. You can set this value only on Aurora DB clusters that are members of an Aurora global database. With this parameter enabled, a secondary cluster can forward writes to the current primary cluster and the resulting changes are replicated back to this cluster. For the primary DB cluster of an Aurora global database, this value is used immediately if the primary is demoted by the FailoverGlobalCluster API operation, but it does nothing until then.
        public let enableGlobalWriteForwarding: Bool?
        /// A value that indicates whether to enable the HTTP endpoint for an Aurora Serverless DB cluster. By default, the HTTP endpoint is disabled. When enabled, the HTTP endpoint provides a connectionless web service API for running SQL queries on the Aurora Serverless DB cluster. You can also query your database from inside the RDS console with the query editor. For more information, see Using the Data API for Aurora Serverless in the Amazon Aurora User Guide.
        public let enableHttpEndpoint: Bool?
        /// A value that indicates whether to enable mapping of Amazon Web Services Identity and Access Management (IAM) accounts to database accounts. By default, mapping is disabled. For more information, see  IAM Database Authentication in the Amazon Aurora User Guide.
        public let enableIAMDatabaseAuthentication: Bool?
        /// The version number of the database engine to which you want to upgrade. Changing this parameter results in an outage. The change is applied during the next maintenance window unless ApplyImmediately is enabled. To list all of the available engine versions for aurora (for MySQL 5.6-compatible Aurora), use the following command:  aws rds describe-db-engine-versions --engine aurora --query "DBEngineVersions[].EngineVersion"  To list all of the available engine versions for aurora-mysql (for MySQL 5.7-compatible Aurora), use the following command:  aws rds describe-db-engine-versions --engine aurora-mysql --query "DBEngineVersions[].EngineVersion"  To list all of the available engine versions for aurora-postgresql, use the following command:  aws rds describe-db-engine-versions --engine aurora-postgresql --query "DBEngineVersions[].EngineVersion"
        public let engineVersion: String?
        /// The new password for the master database user. This password can contain any printable ASCII character except "/", """, or "@". Constraints: Must contain from 8 to 41 characters.
        public let masterUserPassword: String?
        /// The new DB cluster identifier for the DB cluster when renaming a DB cluster. This value is stored as a lowercase string. Constraints:   Must contain from 1 to 63 letters, numbers, or hyphens   The first character must be a letter   Can't end with a hyphen or contain two consecutive hyphens   Example: my-cluster2
        public let newDBClusterIdentifier: String?
        /// A value that indicates that the DB cluster should be associated with the specified option group. Changing this parameter doesn't result in an outage except in the following case, and the change is applied during the next maintenance window unless the ApplyImmediately is enabled for this request. If the parameter change results in an option group that enables OEM, this change can cause a brief (sub-second) period during which new connections are rejected but existing connections are not interrupted.  Permanent options can't be removed from an option group. The option group can't be removed from a DB cluster once it is associated with a DB cluster.
        public let optionGroupName: String?
        /// The port number on which the DB cluster accepts connections. Constraints: Value must be 1150-65535  Default: The same port as the original DB cluster.
        public let port: Int?
        /// The daily time range during which automated backups are created if automated backups are enabled, using the BackupRetentionPeriod parameter.  The default is a 30-minute window selected at random from an 8-hour block of time for each Amazon Web Services Region. To view the time blocks available, see  Backup window in the Amazon Aurora User Guide.  Constraints:   Must be in the format hh24:mi-hh24:mi.   Must be in Universal Coordinated Time (UTC).   Must not conflict with the preferred maintenance window.   Must be at least 30 minutes.
        public let preferredBackupWindow: String?
        /// The weekly time range during which system maintenance can occur, in Universal Coordinated Time (UTC). Format: ddd:hh24:mi-ddd:hh24:mi  The default is a 30-minute window selected at random from an 8-hour block of time for each Amazon Web Services Region, occurring on a random day of the week. To see the time blocks available, see  Adjusting the Preferred DB Cluster Maintenance Window in the Amazon Aurora User Guide.  Valid Days: Mon, Tue, Wed, Thu, Fri, Sat, Sun. Constraints: Minimum 30-minute window.
        public let preferredMaintenanceWindow: String?
        /// The scaling properties of the DB cluster. You can only modify scaling properties for DB clusters in serverless DB engine mode.
        public let scalingConfiguration: ScalingConfiguration?
        /// A list of VPC security groups that the DB cluster will belong to.
        @OptionalCustomCoding<ArrayCoder<_VpcSecurityGroupIdsEncoding, String>>
        public var vpcSecurityGroupIds: [String]?

        public init(allowMajorVersionUpgrade: Bool? = nil, applyImmediately: Bool? = nil, backtrackWindow: Int64? = nil, backupRetentionPeriod: Int? = nil, cloudwatchLogsExportConfiguration: CloudwatchLogsExportConfiguration? = nil, copyTagsToSnapshot: Bool? = nil, dBClusterIdentifier: String, dBClusterParameterGroupName: String? = nil, dBInstanceParameterGroupName: String? = nil, deletionProtection: Bool? = nil, domain: String? = nil, domainIAMRoleName: String? = nil, enableGlobalWriteForwarding: Bool? = nil, enableHttpEndpoint: Bool? = nil, enableIAMDatabaseAuthentication: Bool? = nil, engineVersion: String? = nil, masterUserPassword: String? = nil, newDBClusterIdentifier: String? = nil, optionGroupName: String? = nil, port: Int? = nil, preferredBackupWindow: String? = nil, preferredMaintenanceWindow: String? = nil, scalingConfiguration: ScalingConfiguration? = nil, vpcSecurityGroupIds: [String]? = nil) {
            self.allowMajorVersionUpgrade = allowMajorVersionUpgrade
            self.applyImmediately = applyImmediately
            self.backtrackWindow = backtrackWindow
            self.backupRetentionPeriod = backupRetentionPeriod
            self.cloudwatchLogsExportConfiguration = cloudwatchLogsExportConfiguration
            self.copyTagsToSnapshot = copyTagsToSnapshot
            self.dBClusterIdentifier = dBClusterIdentifier
            self.dBClusterParameterGroupName = dBClusterParameterGroupName
            self.dBInstanceParameterGroupName = dBInstanceParameterGroupName
            self.deletionProtection = deletionProtection
            self.domain = domain
            self.domainIAMRoleName = domainIAMRoleName
            self.enableGlobalWriteForwarding = enableGlobalWriteForwarding
            self.enableHttpEndpoint = enableHttpEndpoint
            self.enableIAMDatabaseAuthentication = enableIAMDatabaseAuthentication
            self.engineVersion = engineVersion
            self.masterUserPassword = masterUserPassword
            self.newDBClusterIdentifier = newDBClusterIdentifier
            self.optionGroupName = optionGroupName
            self.port = port
            self.preferredBackupWindow = preferredBackupWindow
            self.preferredMaintenanceWindow = preferredMaintenanceWindow
            self.scalingConfiguration = scalingConfiguration
            self.vpcSecurityGroupIds = vpcSecurityGroupIds
        }

        private enum CodingKeys: String, CodingKey {
            case allowMajorVersionUpgrade = "AllowMajorVersionUpgrade"
            case applyImmediately = "ApplyImmediately"
            case backtrackWindow = "BacktrackWindow"
            case backupRetentionPeriod = "BackupRetentionPeriod"
            case cloudwatchLogsExportConfiguration = "CloudwatchLogsExportConfiguration"
            case copyTagsToSnapshot = "CopyTagsToSnapshot"
            case dBClusterIdentifier = "DBClusterIdentifier"
            case dBClusterParameterGroupName = "DBClusterParameterGroupName"
            case dBInstanceParameterGroupName = "DBInstanceParameterGroupName"
            case deletionProtection = "DeletionProtection"
            case domain = "Domain"
            case domainIAMRoleName = "DomainIAMRoleName"
            case enableGlobalWriteForwarding = "EnableGlobalWriteForwarding"
            case enableHttpEndpoint = "EnableHttpEndpoint"
            case enableIAMDatabaseAuthentication = "EnableIAMDatabaseAuthentication"
            case engineVersion = "EngineVersion"
            case masterUserPassword = "MasterUserPassword"
            case newDBClusterIdentifier = "NewDBClusterIdentifier"
            case optionGroupName = "OptionGroupName"
            case port = "Port"
            case preferredBackupWindow = "PreferredBackupWindow"
            case preferredMaintenanceWindow = "PreferredMaintenanceWindow"
            case scalingConfiguration = "ScalingConfiguration"
            case vpcSecurityGroupIds = "VpcSecurityGroupIds"
        }
    }

    public struct ModifyDBClusterParameterGroupMessage: AWSEncodableShape {
        public struct _ParametersEncoding: ArrayCoderProperties { public static let member = "Parameter" }

        /// The name of the DB cluster parameter group to modify.
        public let dBClusterParameterGroupName: String
        /// A list of parameters in the DB cluster parameter group to modify. Valid Values (for the application method): immediate | pending-reboot   You can use the immediate value with dynamic parameters only. You can use the pending-reboot value for both dynamic and static parameters. When the application method is immediate, changes to dynamic parameters are applied immediately to the DB clusters associated with the parameter group. When the application method is pending-reboot, changes to dynamic and static parameters are applied after a reboot without failover to the DB clusters associated with the parameter group.
        @CustomCoding<ArrayCoder<_ParametersEncoding, Parameter>>
        public var parameters: [Parameter]

        public init(dBClusterParameterGroupName: String, parameters: [Parameter]) {
            self.dBClusterParameterGroupName = dBClusterParameterGroupName
            self.parameters = parameters
        }

        private enum CodingKeys: String, CodingKey {
            case dBClusterParameterGroupName = "DBClusterParameterGroupName"
            case parameters = "Parameters"
        }
    }

    public struct ModifyDBClusterResult: AWSDecodableShape {
        public let dBCluster: DBCluster?

        public init(dBCluster: DBCluster? = nil) {
            self.dBCluster = dBCluster
        }

        private enum CodingKeys: String, CodingKey {
            case dBCluster = "DBCluster"
        }
    }

    public struct ModifyDBClusterSnapshotAttributeMessage: AWSEncodableShape {
        public struct _ValuesToAddEncoding: ArrayCoderProperties { public static let member = "AttributeValue" }
        public struct _ValuesToRemoveEncoding: ArrayCoderProperties { public static let member = "AttributeValue" }

        /// The name of the DB cluster snapshot attribute to modify. To manage authorization for other Amazon Web Services accounts to copy or restore a manual DB cluster snapshot, set this value to restore.  To view the list of attributes available to modify, use the DescribeDBClusterSnapshotAttributes API action.
        public let attributeName: String
        /// The identifier for the DB cluster snapshot to modify the attributes for.
        public let dBClusterSnapshotIdentifier: String
        /// A list of DB cluster snapshot attributes to add to the attribute specified by AttributeName. To authorize other Amazon Web Services accounts to copy or restore a manual DB cluster snapshot, set this list to include one or more Amazon Web Services account IDs, or all to make the manual DB cluster snapshot restorable by any Amazon Web Services account. Do not add the all value for any manual DB cluster snapshots that contain private information that you don't want available to all Amazon Web Services accounts.
        @OptionalCustomCoding<ArrayCoder<_ValuesToAddEncoding, String>>
        public var valuesToAdd: [String]?
        /// A list of DB cluster snapshot attributes to remove from the attribute specified by AttributeName. To remove authorization for other Amazon Web Services accounts to copy or restore a manual DB cluster snapshot, set this list to include one or more Amazon Web Services account identifiers, or all to remove authorization for any Amazon Web Services account to copy or restore the DB cluster snapshot. If you specify all, an Amazon Web Services account whose account ID is explicitly added to the restore attribute can still copy or restore a manual DB cluster snapshot.
        @OptionalCustomCoding<ArrayCoder<_ValuesToRemoveEncoding, String>>
        public var valuesToRemove: [String]?

        public init(attributeName: String, dBClusterSnapshotIdentifier: String, valuesToAdd: [String]? = nil, valuesToRemove: [String]? = nil) {
            self.attributeName = attributeName
            self.dBClusterSnapshotIdentifier = dBClusterSnapshotIdentifier
            self.valuesToAdd = valuesToAdd
            self.valuesToRemove = valuesToRemove
        }

        private enum CodingKeys: String, CodingKey {
            case attributeName = "AttributeName"
            case dBClusterSnapshotIdentifier = "DBClusterSnapshotIdentifier"
            case valuesToAdd = "ValuesToAdd"
            case valuesToRemove = "ValuesToRemove"
        }
    }

    public struct ModifyDBClusterSnapshotAttributeResult: AWSDecodableShape {
        public let dBClusterSnapshotAttributesResult: DBClusterSnapshotAttributesResult?

        public init(dBClusterSnapshotAttributesResult: DBClusterSnapshotAttributesResult? = nil) {
            self.dBClusterSnapshotAttributesResult = dBClusterSnapshotAttributesResult
        }

        private enum CodingKeys: String, CodingKey {
            case dBClusterSnapshotAttributesResult = "DBClusterSnapshotAttributesResult"
        }
    }

    public struct ModifyDBInstanceMessage: AWSEncodableShape {
        public struct _DBSecurityGroupsEncoding: ArrayCoderProperties { public static let member = "DBSecurityGroupName" }
        public struct _ProcessorFeaturesEncoding: ArrayCoderProperties { public static let member = "ProcessorFeature" }
        public struct _VpcSecurityGroupIdsEncoding: ArrayCoderProperties { public static let member = "VpcSecurityGroupId" }

        /// The new amount of storage (in gibibytes) to allocate for the DB instance.  For MariaDB, MySQL, Oracle, and PostgreSQL, the value supplied must be at least 10% greater than the current value. Values that are not at least 10% greater than the existing value are rounded up so that they are 10% greater than the current value.  For the valid values for allocated storage for each engine, see CreateDBInstance.
        public let allocatedStorage: Int?
        /// A value that indicates whether major version upgrades are allowed. Changing this parameter doesn't result in an outage and the change is asynchronously applied as soon as possible. Constraints: Major version upgrades must be allowed when specifying a value for the EngineVersion parameter that is a different major version than the DB instance's current version.
        public let allowMajorVersionUpgrade: Bool?
        /// A value that indicates whether the modifications in this request and any pending modifications are asynchronously applied as soon as possible, regardless of the PreferredMaintenanceWindow setting for the DB instance. By default, this parameter is disabled.   If this parameter is disabled, changes to the DB instance are applied during the next maintenance window. Some parameter changes can cause an outage and are applied on the next call to RebootDBInstance, or the next failure reboot. Review the table of parameters in Modifying a DB Instance in the Amazon RDS User Guide. to see the impact of enabling or disabling ApplyImmediately for each modified parameter and to determine when the changes are applied.
        public let applyImmediately: Bool?
        ///  A value that indicates whether minor version upgrades are applied automatically to the DB instance during the maintenance window. Changing this parameter doesn't result in an outage except in the following case and the change is asynchronously applied as soon as possible. An outage results if this parameter is enabled during the maintenance window, and a newer minor version is available, and RDS has enabled auto patching for that engine version.
        public let autoMinorVersionUpgrade: Bool?
        /// The Amazon Resource Name (ARN) of the recovery point in Amazon Web Services Backup.
        public let awsBackupRecoveryPointArn: String?
        /// The number of days to retain automated backups. Setting this parameter to a positive number enables backups. Setting this parameter to 0 disables automated backups.  Enabling and disabling backups can result in a brief I/O suspension that lasts from a few seconds to a few minutes, depending on the size and class of your DB instance.  These changes are applied during the next maintenance window unless the ApplyImmediately parameter is enabled for this request. If you change the parameter from one non-zero value to another non-zero value, the change is asynchronously applied as soon as possible.  Amazon Aurora  Not applicable. The retention period for automated backups is managed by the DB cluster. For more information, see ModifyDBCluster. Default: Uses existing setting Constraints:   Must be a value from 0 to 35   Can be specified for a MySQL read replica only if the source is running MySQL 5.6 or later   Can be specified for a PostgreSQL read replica only if the source is running PostgreSQL 9.3.5   Can't be set to 0 if the DB instance is a source to read replicas
        public let backupRetentionPeriod: Int?
        /// Indicates the certificate that needs to be associated with the instance.
        public let cACertificateIdentifier: String?
        /// A value that indicates whether the DB instance is restarted when you rotate your SSL/TLS certificate. By default, the DB instance is restarted when you rotate your SSL/TLS certificate. The certificate is not updated until the DB instance is restarted.  Set this parameter only if you are not using SSL/TLS to connect to the DB instance.  If you are using SSL/TLS to connect to the DB instance, follow the appropriate instructions for your DB engine to rotate your SSL/TLS certificate:   For more information about rotating your SSL/TLS certificate for RDS DB engines, see  Rotating Your SSL/TLS Certificate. in the Amazon RDS User Guide.    For more information about rotating your SSL/TLS certificate for Aurora DB engines, see  Rotating Your SSL/TLS Certificate in the Amazon Aurora User Guide.
        public let certificateRotationRestart: Bool?
        /// The configuration setting for the log types to be enabled for export to CloudWatch Logs for a specific DB instance. A change to the CloudwatchLogsExportConfiguration parameter is always applied to the DB instance immediately. Therefore, the ApplyImmediately parameter has no effect.
        public let cloudwatchLogsExportConfiguration: CloudwatchLogsExportConfiguration?
        /// A value that indicates whether to copy all tags from the DB instance to snapshots of the DB instance. By default, tags are not copied.  Amazon Aurora  Not applicable. Copying tags to snapshots is managed by the DB cluster. Setting this value for an Aurora DB instance has no effect on the DB cluster setting. For more information, see ModifyDBCluster.
        public let copyTagsToSnapshot: Bool?
        /// The new compute and memory capacity of the DB instance, for example, db.m4.large. Not all DB instance classes are available in all Amazon Web Services Regions, or for all database engines. For the full list of DB instance classes, and availability for your engine, see DB Instance Class in the Amazon RDS User Guide.  If you modify the DB instance class, an outage occurs during the change. The change is applied during the next maintenance window, unless ApplyImmediately is enabled for this request.  Default: Uses existing setting
        public let dBInstanceClass: String?
        /// The DB instance identifier. This value is stored as a lowercase string. Constraints:   Must match the identifier of an existing DBInstance.
        public let dBInstanceIdentifier: String
        /// The name of the DB parameter group to apply to the DB instance. Changing this setting doesn't result in an outage. The parameter group name itself is changed immediately, but the actual parameter changes are not applied until you reboot the instance without failover. In this case, the DB instance isn't rebooted automatically and the parameter changes isn't applied during the next maintenance window. Default: Uses existing setting Constraints: The DB parameter group must be in the same DB parameter group family as this DB instance.
        public let dBParameterGroupName: String?
        /// The port number on which the database accepts connections. The value of the DBPortNumber parameter must not match any of the port values specified for options in the option group for the DB instance. Your database will restart when you change the DBPortNumber value regardless of the value of the ApplyImmediately parameter.  MySQL   Default: 3306   Valid values: 1150-65535   MariaDB   Default: 3306   Valid values: 1150-65535   PostgreSQL   Default: 5432   Valid values: 1150-65535  Type: Integer  Oracle   Default: 1521   Valid values: 1150-65535   SQL Server   Default: 1433   Valid values: 1150-65535 except 1234, 1434, 3260, 3343, 3389, 47001, and 49152-49156.  Amazon Aurora   Default: 3306   Valid values: 1150-65535
        public let dBPortNumber: Int?
        /// A list of DB security groups to authorize on this DB instance. Changing this setting doesn't result in an outage and the change is asynchronously applied as soon as possible. Constraints:   If supplied, must match existing DBSecurityGroups.
        @OptionalCustomCoding<ArrayCoder<_DBSecurityGroupsEncoding, String>>
        public var dBSecurityGroups: [String]?
        /// The new DB subnet group for the DB instance. You can use this parameter to move your DB instance to a different VPC. If your DB instance isn't in a VPC, you can also use this parameter to move your DB instance into a VPC. For more information, see Working with a DB instance in a VPC in the Amazon RDS User Guide.  Changing the subnet group causes an outage during the change. The change is applied during the next maintenance window, unless you enable ApplyImmediately.  Constraints: If supplied, must match the name of an existing DBSubnetGroup. Example: mySubnetGroup
        public let dBSubnetGroupName: String?
        /// A value that indicates whether the DB instance has deletion protection enabled. The database can't be deleted when deletion protection is enabled. By default, deletion protection is disabled. For more information, see  Deleting a DB Instance.
        public let deletionProtection: Bool?
        /// The Active Directory directory ID to move the DB instance to. Specify none to remove the instance from its current domain. The domain must be created prior to this operation. Currently, only MySQL, Microsoft SQL Server, Oracle, and PostgreSQL DB instances can be created in an Active Directory Domain. For more information, see  Kerberos Authentication in the Amazon RDS User Guide.
        public let domain: String?
        /// The name of the IAM role to use when making API calls to the Directory Service.
        public let domainIAMRoleName: String?
        /// A value that indicates whether to enable a customer-owned IP address (CoIP) for an RDS on Outposts DB instance. A CoIP provides local or external connectivity to resources in your Outpost subnets through your on-premises network. For some use cases, a CoIP can provide lower latency for connections to the DB instance from outside of its virtual private cloud (VPC) on your local network. For more information about RDS on Outposts, see Working with Amazon RDS on Amazon Web Services Outposts in the Amazon RDS User Guide. For more information about CoIPs, see Customer-owned IP addresses in the Amazon Web Services Outposts User Guide.
        public let enableCustomerOwnedIp: Bool?
        /// A value that indicates whether to enable mapping of Amazon Web Services Identity and Access Management (IAM) accounts to database accounts. By default, mapping is disabled. This setting doesn't apply to Amazon Aurora. Mapping Amazon Web Services IAM accounts to database accounts is managed by the DB cluster. For more information about IAM database authentication, see  IAM Database Authentication for MySQL and PostgreSQL in the Amazon RDS User Guide.
        public let enableIAMDatabaseAuthentication: Bool?
        /// A value that indicates whether to enable Performance Insights for the DB instance. For more information, see Using Amazon Performance Insights in the Amazon Relational Database Service User Guide.
        public let enablePerformanceInsights: Bool?
        ///  The version number of the database engine to upgrade to. Changing this parameter results in an outage and the change is applied during the next maintenance window unless the ApplyImmediately parameter is enabled for this request.  For major version upgrades, if a nondefault DB parameter group is currently in use, a new DB parameter group in the DB parameter group family for the new engine version must be specified. The new DB parameter group can be the default for that DB parameter group family. If you specify only a major version, Amazon RDS will update the DB instance to the default minor version if the current minor version is lower. For information about valid engine versions, see CreateDBInstance, or call DescribeDBEngineVersions.
        public let engineVersion: String?
        /// The new Provisioned IOPS (I/O operations per second) value for the RDS instance.  Changing this setting doesn't result in an outage and the change is applied during the next maintenance window unless the ApplyImmediately parameter is enabled for this request. If you are migrating from Provisioned IOPS to standard storage, set this value to 0. The DB instance will require a reboot for the change in storage type to take effect.  If you choose to migrate your DB instance from using standard storage to using Provisioned IOPS, or from using Provisioned IOPS to using standard storage, the process can take time. The duration of the migration depends on several factors such as database load, storage size, storage type (standard or Provisioned IOPS), amount of IOPS provisioned (if any), and the number of prior scale storage operations. Typical migration times are under 24 hours, but the process can take up to several days in some cases. During the migration, the DB instance is available for use, but might experience performance degradation. While the migration takes place, nightly backups for the instance are suspended. No other Amazon RDS operations can take place for the instance, including modifying the instance, rebooting the instance, deleting the instance, creating a read replica for the instance, and creating a DB snapshot of the instance.  Constraints: For MariaDB, MySQL, Oracle, and PostgreSQL, the value supplied must be at least 10% greater than the current value. Values that are not at least 10% greater than the existing value are rounded up so that they are 10% greater than the current value.  Default: Uses existing setting
        public let iops: Int?
        /// The license model for the DB instance. Valid values: license-included | bring-your-own-license | general-public-license
        public let licenseModel: String?
        /// The new password for the master user. The password can include any printable ASCII character except "/", """, or "@".  Changing this parameter doesn't result in an outage and the change is asynchronously applied as soon as possible. Between the time of the request and the completion of the request, the MasterUserPassword element exists in the PendingModifiedValues element of the operation response.   Amazon Aurora  Not applicable. The password for the master user is managed by the DB cluster. For more information, see ModifyDBCluster.  Default: Uses existing setting  MariaDB  Constraints: Must contain from 8 to 41 characters.  Microsoft SQL Server  Constraints: Must contain from 8 to 128 characters.  MySQL  Constraints: Must contain from 8 to 41 characters.  Oracle  Constraints: Must contain from 8 to 30 characters.  PostgreSQL  Constraints: Must contain from 8 to 128 characters.  Amazon RDS API actions never return the password, so this action provides a way to regain access to a primary instance user if the password is lost. This includes restoring privileges that might have been accidentally revoked.
        public let masterUserPassword: String?
        /// The upper limit to which Amazon RDS can automatically scale the storage of the DB instance. For more information about this setting, including limitations that apply to it, see  Managing capacity automatically with Amazon RDS storage autoscaling in the Amazon RDS User Guide.
        public let maxAllocatedStorage: Int?
        /// The interval, in seconds, between points when Enhanced Monitoring metrics are collected for the DB instance. To disable collecting Enhanced Monitoring metrics, specify 0. The default is 0. If MonitoringRoleArn is specified, then you must also set MonitoringInterval to a value other than 0. Valid Values: 0, 1, 5, 10, 15, 30, 60
        public let monitoringInterval: Int?
        /// The ARN for the IAM role that permits RDS to send enhanced monitoring metrics to Amazon CloudWatch Logs. For example, arn:aws:iam:123456789012:role/emaccess. For information on creating a monitoring role, go to To create an IAM role for Amazon RDS Enhanced Monitoring in the Amazon RDS User Guide.  If MonitoringInterval is set to a value other than 0, then you must supply a MonitoringRoleArn value.
        public let monitoringRoleArn: String?
        /// A value that indicates whether the DB instance is a Multi-AZ deployment. Changing this parameter doesn't result in an outage and the change is applied during the next maintenance window unless the ApplyImmediately parameter is enabled for this request.
        public let multiAZ: Bool?
        ///  The new DB instance identifier for the DB instance when renaming a DB instance. When you change the DB instance identifier, an instance reboot occurs immediately if you enable ApplyImmediately, or will occur during the next maintenance window if you disable Apply Immediately. This value is stored as a lowercase string.  Constraints:   Must contain from 1 to 63 letters, numbers, or hyphens.   The first character must be a letter.   Can't end with a hyphen or contain two consecutive hyphens.   Example: mydbinstance
        public let newDBInstanceIdentifier: String?
        ///  A value that indicates the DB instance should be associated with the specified option group. Changing this parameter doesn't result in an outage except in the following case and the change is applied during the next maintenance window unless the ApplyImmediately parameter is enabled for this request. If the parameter change results in an option group that enables OEM, this change can cause a brief (sub-second) period during which new connections are rejected but existing connections are not interrupted.  Permanent options, such as the TDE option for Oracle Advanced Security TDE, can't be removed from an option group, and that option group can't be removed from a DB instance once it is associated with a DB instance
        public let optionGroupName: String?
        /// The Amazon Web Services KMS key identifier for encryption of Performance Insights data. The Amazon Web Services KMS key identifier is the key ARN, key ID, alias ARN, or alias name for the Amazon Web Services KMS customer master key (CMK). If you do not specify a value for PerformanceInsightsKMSKeyId, then Amazon RDS uses your default CMK. There is a default CMK for your Amazon Web Services account. Your Amazon Web Services account has a different default CMK for each Amazon Web Services Region.
        public let performanceInsightsKMSKeyId: String?
        /// The amount of time, in days, to retain Performance Insights data. Valid values are 7 or 731 (2 years).
        public let performanceInsightsRetentionPeriod: Int?
        ///  The daily time range during which automated backups are created if automated backups are enabled, as determined by the BackupRetentionPeriod parameter. Changing this parameter doesn't result in an outage and the change is asynchronously applied as soon as possible. The default is a 30-minute window selected at random from an 8-hour block of time for each Amazon Web Services Region. For more information, see Backup window in the Amazon RDS User Guide.   Amazon Aurora  Not applicable. The daily time range for creating automated backups is managed by the DB cluster. For more information, see ModifyDBCluster. Constraints:   Must be in the format hh24:mi-hh24:mi   Must be in Universal Time Coordinated (UTC)   Must not conflict with the preferred maintenance window   Must be at least 30 minutes
        public let preferredBackupWindow: String?
        /// The weekly time range (in UTC) during which system maintenance can occur, which might result in an outage. Changing this parameter doesn't result in an outage, except in the following situation, and the change is asynchronously applied as soon as possible. If there are pending actions that cause a reboot, and the maintenance window is changed to include the current time, then changing this parameter will cause a reboot of the DB instance. If moving this window to the current time, there must be at least 30 minutes between the current time and end of the window to ensure pending changes are applied. For more information, see Amazon RDS Maintenance Window in the Amazon RDS User Guide.  Default: Uses existing setting Format: ddd:hh24:mi-ddd:hh24:mi Valid Days: Mon | Tue | Wed | Thu | Fri | Sat | Sun Constraints: Must be at least 30 minutes
        public let preferredMaintenanceWindow: String?
        /// The number of CPU cores and the number of threads per core for the DB instance class of the DB instance.
        @OptionalCustomCoding<ArrayCoder<_ProcessorFeaturesEncoding, ProcessorFeature>>
        public var processorFeatures: [ProcessorFeature]?
        /// A value that specifies the order in which an Aurora Replica is promoted to the primary instance after a failure of the existing primary instance. For more information, see  Fault Tolerance for an Aurora DB Cluster in the Amazon Aurora User Guide.  Default: 1 Valid Values: 0 - 15
        public let promotionTier: Int?
        /// A value that indicates whether the DB instance is publicly accessible.  When the DB instance is publicly accessible, its DNS endpoint resolves to the private IP address from within the DB instance's VPC, and to the public IP address from outside of the DB instance's VPC. Access to the DB instance is ultimately controlled by the security group it uses, and that public access is not permitted if the security group assigned to the DB instance doesn't permit it. When the DB instance isn't publicly accessible, it is an internal DB instance with a DNS name that resolves to a private IP address.  PubliclyAccessible only applies to DB instances in a VPC. The DB instance must be part of a public subnet and PubliclyAccessible must be enabled for it to be publicly accessible.  Changes to the PubliclyAccessible parameter are applied immediately regardless of the value of the ApplyImmediately parameter.
        public let publiclyAccessible: Bool?
        /// A value that sets the open mode of a replica database to either mounted or read-only.  Currently, this parameter is only supported for Oracle DB instances.  Mounted DB replicas are included in Oracle Enterprise Edition. The main use case for mounted replicas is cross-Region disaster recovery. The primary database doesn't use Active Data Guard to transmit information to the mounted replica. Because it doesn't accept user connections, a mounted replica can't serve a read-only workload. For more information, see Working with Oracle Read Replicas for Amazon RDS in the Amazon RDS User Guide.
        public let replicaMode: ReplicaMode?
        /// Specifies the storage type to be associated with the DB instance.  If you specify Provisioned IOPS (io1), you must also include a value for the Iops parameter.  If you choose to migrate your DB instance from using standard storage to using Provisioned IOPS, or from using Provisioned IOPS to using standard storage, the process can take time. The duration of the migration depends on several factors such as database load, storage size, storage type (standard or Provisioned IOPS), amount of IOPS provisioned (if any), and the number of prior scale storage operations. Typical migration times are under 24 hours, but the process can take up to several days in some cases. During the migration, the DB instance is available for use, but might experience performance degradation. While the migration takes place, nightly backups for the instance are suspended. No other Amazon RDS operations can take place for the instance, including modifying the instance, rebooting the instance, deleting the instance, creating a read replica for the instance, and creating a DB snapshot of the instance.   Valid values: standard | gp2 | io1  Default: io1 if the Iops parameter is specified, otherwise gp2
        public let storageType: String?
        /// The ARN from the key store with which to associate the instance for TDE encryption.
        public let tdeCredentialArn: String?
        /// The password for the given ARN from the key store in order to access the device.
        public let tdeCredentialPassword: String?
        /// A value that indicates whether the DB instance class of the DB instance uses its default processor features.
        public let useDefaultProcessorFeatures: Bool?
        /// A list of EC2 VPC security groups to authorize on this DB instance. This change is asynchronously applied as soon as possible.  Amazon Aurora  Not applicable. The associated list of EC2 VPC security groups is managed by the DB cluster. For more information, see ModifyDBCluster. Constraints:   If supplied, must match existing VpcSecurityGroupIds.
        @OptionalCustomCoding<ArrayCoder<_VpcSecurityGroupIdsEncoding, String>>
        public var vpcSecurityGroupIds: [String]?

        public init(allocatedStorage: Int? = nil, allowMajorVersionUpgrade: Bool? = nil, applyImmediately: Bool? = nil, autoMinorVersionUpgrade: Bool? = nil, awsBackupRecoveryPointArn: String? = nil, backupRetentionPeriod: Int? = nil, cACertificateIdentifier: String? = nil, certificateRotationRestart: Bool? = nil, cloudwatchLogsExportConfiguration: CloudwatchLogsExportConfiguration? = nil, copyTagsToSnapshot: Bool? = nil, dBInstanceClass: String? = nil, dBInstanceIdentifier: String, dBParameterGroupName: String? = nil, dBPortNumber: Int? = nil, dBSecurityGroups: [String]? = nil, dBSubnetGroupName: String? = nil, deletionProtection: Bool? = nil, domain: String? = nil, domainIAMRoleName: String? = nil, enableCustomerOwnedIp: Bool? = nil, enableIAMDatabaseAuthentication: Bool? = nil, enablePerformanceInsights: Bool? = nil, engineVersion: String? = nil, iops: Int? = nil, licenseModel: String? = nil, masterUserPassword: String? = nil, maxAllocatedStorage: Int? = nil, monitoringInterval: Int? = nil, monitoringRoleArn: String? = nil, multiAZ: Bool? = nil, newDBInstanceIdentifier: String? = nil, optionGroupName: String? = nil, performanceInsightsKMSKeyId: String? = nil, performanceInsightsRetentionPeriod: Int? = nil, preferredBackupWindow: String? = nil, preferredMaintenanceWindow: String? = nil, processorFeatures: [ProcessorFeature]? = nil, promotionTier: Int? = nil, publiclyAccessible: Bool? = nil, replicaMode: ReplicaMode? = nil, storageType: String? = nil, tdeCredentialArn: String? = nil, tdeCredentialPassword: String? = nil, useDefaultProcessorFeatures: Bool? = nil, vpcSecurityGroupIds: [String]? = nil) {
            self.allocatedStorage = allocatedStorage
            self.allowMajorVersionUpgrade = allowMajorVersionUpgrade
            self.applyImmediately = applyImmediately
            self.autoMinorVersionUpgrade = autoMinorVersionUpgrade
            self.awsBackupRecoveryPointArn = awsBackupRecoveryPointArn
            self.backupRetentionPeriod = backupRetentionPeriod
            self.cACertificateIdentifier = cACertificateIdentifier
            self.certificateRotationRestart = certificateRotationRestart
            self.cloudwatchLogsExportConfiguration = cloudwatchLogsExportConfiguration
            self.copyTagsToSnapshot = copyTagsToSnapshot
            self.dBInstanceClass = dBInstanceClass
            self.dBInstanceIdentifier = dBInstanceIdentifier
            self.dBParameterGroupName = dBParameterGroupName
            self.dBPortNumber = dBPortNumber
            self.dBSecurityGroups = dBSecurityGroups
            self.dBSubnetGroupName = dBSubnetGroupName
            self.deletionProtection = deletionProtection
            self.domain = domain
            self.domainIAMRoleName = domainIAMRoleName
            self.enableCustomerOwnedIp = enableCustomerOwnedIp
            self.enableIAMDatabaseAuthentication = enableIAMDatabaseAuthentication
            self.enablePerformanceInsights = enablePerformanceInsights
            self.engineVersion = engineVersion
            self.iops = iops
            self.licenseModel = licenseModel
            self.masterUserPassword = masterUserPassword
            self.maxAllocatedStorage = maxAllocatedStorage
            self.monitoringInterval = monitoringInterval
            self.monitoringRoleArn = monitoringRoleArn
            self.multiAZ = multiAZ
            self.newDBInstanceIdentifier = newDBInstanceIdentifier
            self.optionGroupName = optionGroupName
            self.performanceInsightsKMSKeyId = performanceInsightsKMSKeyId
            self.performanceInsightsRetentionPeriod = performanceInsightsRetentionPeriod
            self.preferredBackupWindow = preferredBackupWindow
            self.preferredMaintenanceWindow = preferredMaintenanceWindow
            self.processorFeatures = processorFeatures
            self.promotionTier = promotionTier
            self.publiclyAccessible = publiclyAccessible
            self.replicaMode = replicaMode
            self.storageType = storageType
            self.tdeCredentialArn = tdeCredentialArn
            self.tdeCredentialPassword = tdeCredentialPassword
            self.useDefaultProcessorFeatures = useDefaultProcessorFeatures
            self.vpcSecurityGroupIds = vpcSecurityGroupIds
        }

        public func validate(name: String) throws {
            try self.validate(self.awsBackupRecoveryPointArn, name: "awsBackupRecoveryPointArn", parent: name, max: 350)
            try self.validate(self.awsBackupRecoveryPointArn, name: "awsBackupRecoveryPointArn", parent: name, min: 43)
            try self.validate(self.awsBackupRecoveryPointArn, name: "awsBackupRecoveryPointArn", parent: name, pattern: "^arn:aws[a-z-]*:backup:[-a-z0-9]+:[0-9]{12}:[-a-z]+:([a-z0-9\\-]+:)?[a-z][a-z0-9\\-]{0,255}$")
        }

        private enum CodingKeys: String, CodingKey {
            case allocatedStorage = "AllocatedStorage"
            case allowMajorVersionUpgrade = "AllowMajorVersionUpgrade"
            case applyImmediately = "ApplyImmediately"
            case autoMinorVersionUpgrade = "AutoMinorVersionUpgrade"
            case awsBackupRecoveryPointArn = "AwsBackupRecoveryPointArn"
            case backupRetentionPeriod = "BackupRetentionPeriod"
            case cACertificateIdentifier = "CACertificateIdentifier"
            case certificateRotationRestart = "CertificateRotationRestart"
            case cloudwatchLogsExportConfiguration = "CloudwatchLogsExportConfiguration"
            case copyTagsToSnapshot = "CopyTagsToSnapshot"
            case dBInstanceClass = "DBInstanceClass"
            case dBInstanceIdentifier = "DBInstanceIdentifier"
            case dBParameterGroupName = "DBParameterGroupName"
            case dBPortNumber = "DBPortNumber"
            case dBSecurityGroups = "DBSecurityGroups"
            case dBSubnetGroupName = "DBSubnetGroupName"
            case deletionProtection = "DeletionProtection"
            case domain = "Domain"
            case domainIAMRoleName = "DomainIAMRoleName"
            case enableCustomerOwnedIp = "EnableCustomerOwnedIp"
            case enableIAMDatabaseAuthentication = "EnableIAMDatabaseAuthentication"
            case enablePerformanceInsights = "EnablePerformanceInsights"
            case engineVersion = "EngineVersion"
            case iops = "Iops"
            case licenseModel = "LicenseModel"
            case masterUserPassword = "MasterUserPassword"
            case maxAllocatedStorage = "MaxAllocatedStorage"
            case monitoringInterval = "MonitoringInterval"
            case monitoringRoleArn = "MonitoringRoleArn"
            case multiAZ = "MultiAZ"
            case newDBInstanceIdentifier = "NewDBInstanceIdentifier"
            case optionGroupName = "OptionGroupName"
            case performanceInsightsKMSKeyId = "PerformanceInsightsKMSKeyId"
            case performanceInsightsRetentionPeriod = "PerformanceInsightsRetentionPeriod"
            case preferredBackupWindow = "PreferredBackupWindow"
            case preferredMaintenanceWindow = "PreferredMaintenanceWindow"
            case processorFeatures = "ProcessorFeatures"
            case promotionTier = "PromotionTier"
            case publiclyAccessible = "PubliclyAccessible"
            case replicaMode = "ReplicaMode"
            case storageType = "StorageType"
            case tdeCredentialArn = "TdeCredentialArn"
            case tdeCredentialPassword = "TdeCredentialPassword"
            case useDefaultProcessorFeatures = "UseDefaultProcessorFeatures"
            case vpcSecurityGroupIds = "VpcSecurityGroupIds"
        }
    }

    public struct ModifyDBInstanceResult: AWSDecodableShape {
        public let dBInstance: DBInstance?

        public init(dBInstance: DBInstance? = nil) {
            self.dBInstance = dBInstance
        }

        private enum CodingKeys: String, CodingKey {
            case dBInstance = "DBInstance"
        }
    }

    public struct ModifyDBParameterGroupMessage: AWSEncodableShape {
        public struct _ParametersEncoding: ArrayCoderProperties { public static let member = "Parameter" }

        /// The name of the DB parameter group. Constraints:   If supplied, must match the name of an existing DBParameterGroup.
        public let dBParameterGroupName: String
        /// An array of parameter names, values, and the application methods for the parameter update. At least one parameter name, value, and application method method must be supplied; later arguments are optional. A maximum of 20 parameters can be modified in a single request. Valid Values (for the application method): immediate | pending-reboot   You can use the immediate value with dynamic parameters only. You can use the pending-reboot value for both dynamic and static parameters. When the application method is immediate, changes to dynamic parameters are applied immediately to the DB instances associated with the parameter group. When the application method is pending-reboot, changes to dynamic and static parameters are applied after a reboot without failover to the DB instances associated with the parameter group.
        @CustomCoding<ArrayCoder<_ParametersEncoding, Parameter>>
        public var parameters: [Parameter]

        public init(dBParameterGroupName: String, parameters: [Parameter]) {
            self.dBParameterGroupName = dBParameterGroupName
            self.parameters = parameters
        }

        private enum CodingKeys: String, CodingKey {
            case dBParameterGroupName = "DBParameterGroupName"
            case parameters = "Parameters"
        }
    }

    public struct ModifyDBProxyEndpointRequest: AWSEncodableShape {
        /// The name of the DB proxy sociated with the DB proxy endpoint that you want to modify.
        public let dBProxyEndpointName: String
        /// The new identifier for the DBProxyEndpoint. An identifier must begin with a letter and must contain only ASCII letters, digits, and hyphens; it can't end with a hyphen or contain two consecutive hyphens.
        public let newDBProxyEndpointName: String?
        /// The VPC security group IDs for the DB proxy endpoint. When the DB proxy endpoint uses a different VPC than the original proxy, you also specify a different set of security group IDs than for the original proxy.
        @OptionalCustomCoding<StandardArrayCoder>
        public var vpcSecurityGroupIds: [String]?

        public init(dBProxyEndpointName: String, newDBProxyEndpointName: String? = nil, vpcSecurityGroupIds: [String]? = nil) {
            self.dBProxyEndpointName = dBProxyEndpointName
            self.newDBProxyEndpointName = newDBProxyEndpointName
            self.vpcSecurityGroupIds = vpcSecurityGroupIds
        }

        public func validate(name: String) throws {
            try self.validate(self.dBProxyEndpointName, name: "dBProxyEndpointName", parent: name, max: 63)
            try self.validate(self.dBProxyEndpointName, name: "dBProxyEndpointName", parent: name, min: 1)
            try self.validate(self.dBProxyEndpointName, name: "dBProxyEndpointName", parent: name, pattern: "[a-zA-Z][a-zA-Z0-9]*(-[a-zA-Z0-9]+)*")
            try self.validate(self.newDBProxyEndpointName, name: "newDBProxyEndpointName", parent: name, max: 63)
            try self.validate(self.newDBProxyEndpointName, name: "newDBProxyEndpointName", parent: name, min: 1)
            try self.validate(self.newDBProxyEndpointName, name: "newDBProxyEndpointName", parent: name, pattern: "[a-zA-Z][a-zA-Z0-9]*(-[a-zA-Z0-9]+)*")
        }

        private enum CodingKeys: String, CodingKey {
            case dBProxyEndpointName = "DBProxyEndpointName"
            case newDBProxyEndpointName = "NewDBProxyEndpointName"
            case vpcSecurityGroupIds = "VpcSecurityGroupIds"
        }
    }

    public struct ModifyDBProxyEndpointResponse: AWSDecodableShape {
        /// The DBProxyEndpoint object representing the new settings for the DB proxy endpoint.
        public let dBProxyEndpoint: DBProxyEndpoint?

        public init(dBProxyEndpoint: DBProxyEndpoint? = nil) {
            self.dBProxyEndpoint = dBProxyEndpoint
        }

        private enum CodingKeys: String, CodingKey {
            case dBProxyEndpoint = "DBProxyEndpoint"
        }
    }

    public struct ModifyDBProxyRequest: AWSEncodableShape {
        /// The new authentication settings for the DBProxy.
        @OptionalCustomCoding<StandardArrayCoder>
        public var auth: [UserAuthConfig]?
        /// The identifier for the DBProxy to modify.
        public let dBProxyName: String
        /// Whether the proxy includes detailed information about SQL statements in its logs. This information helps you to debug issues involving SQL behavior or the performance and scalability of the proxy connections. The debug information includes the text of SQL statements that you submit through the proxy. Thus, only enable this setting when needed for debugging, and only when you have security measures in place to safeguard any sensitive information that appears in the logs.
        public let debugLogging: Bool?
        /// The number of seconds that a connection to the proxy can be inactive before the proxy disconnects it. You can set this value higher or lower than the connection timeout limit for the associated database.
        public let idleClientTimeout: Int?
        /// The new identifier for the DBProxy. An identifier must begin with a letter and must contain only ASCII letters, digits, and hyphens; it can't end with a hyphen or contain two consecutive hyphens.
        public let newDBProxyName: String?
        /// Whether Transport Layer Security (TLS) encryption is required for connections to the proxy. By enabling this setting, you can enforce encrypted TLS connections to the proxy, even if the associated database doesn't use TLS.
        public let requireTLS: Bool?
        /// The Amazon Resource Name (ARN) of the IAM role that the proxy uses to access secrets in Amazon Web Services Secrets Manager.
        public let roleArn: String?
        /// The new list of security groups for the DBProxy.
        @OptionalCustomCoding<StandardArrayCoder>
        public var securityGroups: [String]?

        public init(auth: [UserAuthConfig]? = nil, dBProxyName: String, debugLogging: Bool? = nil, idleClientTimeout: Int? = nil, newDBProxyName: String? = nil, requireTLS: Bool? = nil, roleArn: String? = nil, securityGroups: [String]? = nil) {
            self.auth = auth
            self.dBProxyName = dBProxyName
            self.debugLogging = debugLogging
            self.idleClientTimeout = idleClientTimeout
            self.newDBProxyName = newDBProxyName
            self.requireTLS = requireTLS
            self.roleArn = roleArn
            self.securityGroups = securityGroups
        }

        private enum CodingKeys: String, CodingKey {
            case auth = "Auth"
            case dBProxyName = "DBProxyName"
            case debugLogging = "DebugLogging"
            case idleClientTimeout = "IdleClientTimeout"
            case newDBProxyName = "NewDBProxyName"
            case requireTLS = "RequireTLS"
            case roleArn = "RoleArn"
            case securityGroups = "SecurityGroups"
        }
    }

    public struct ModifyDBProxyResponse: AWSDecodableShape {
        /// The DBProxy object representing the new settings for the proxy.
        public let dBProxy: DBProxy?

        public init(dBProxy: DBProxy? = nil) {
            self.dBProxy = dBProxy
        }

        private enum CodingKeys: String, CodingKey {
            case dBProxy = "DBProxy"
        }
    }

    public struct ModifyDBProxyTargetGroupRequest: AWSEncodableShape {
        /// The settings that determine the size and behavior of the connection pool for the target group.
        public let connectionPoolConfig: ConnectionPoolConfiguration?
        /// The name of the new proxy to which to assign the target group.
        public let dBProxyName: String
        /// The new name for the modified DBProxyTarget. An identifier must begin with a letter and must contain only ASCII letters, digits, and hyphens; it can't end with a hyphen or contain two consecutive hyphens.
        public let newName: String?
        /// The name of the new target group to assign to the proxy.
        public let targetGroupName: String

        public init(connectionPoolConfig: ConnectionPoolConfiguration? = nil, dBProxyName: String, newName: String? = nil, targetGroupName: String) {
            self.connectionPoolConfig = connectionPoolConfig
            self.dBProxyName = dBProxyName
            self.newName = newName
            self.targetGroupName = targetGroupName
        }

        private enum CodingKeys: String, CodingKey {
            case connectionPoolConfig = "ConnectionPoolConfig"
            case dBProxyName = "DBProxyName"
            case newName = "NewName"
            case targetGroupName = "TargetGroupName"
        }
    }

    public struct ModifyDBProxyTargetGroupResponse: AWSDecodableShape {
        /// The settings of the modified DBProxyTarget.
        public let dBProxyTargetGroup: DBProxyTargetGroup?

        public init(dBProxyTargetGroup: DBProxyTargetGroup? = nil) {
            self.dBProxyTargetGroup = dBProxyTargetGroup
        }

        private enum CodingKeys: String, CodingKey {
            case dBProxyTargetGroup = "DBProxyTargetGroup"
        }
    }

    public struct ModifyDBSnapshotAttributeMessage: AWSEncodableShape {
        public struct _ValuesToAddEncoding: ArrayCoderProperties { public static let member = "AttributeValue" }
        public struct _ValuesToRemoveEncoding: ArrayCoderProperties { public static let member = "AttributeValue" }

        /// The name of the DB snapshot attribute to modify. To manage authorization for other Amazon Web Services accounts to copy or restore a manual DB snapshot, set this value to restore.  To view the list of attributes available to modify, use the DescribeDBSnapshotAttributes API action.
        public let attributeName: String
        /// The identifier for the DB snapshot to modify the attributes for.
        public let dBSnapshotIdentifier: String
        /// A list of DB snapshot attributes to add to the attribute specified by AttributeName. To authorize other Amazon Web Services accounts to copy or restore a manual snapshot, set this list to include one or more Amazon Web Services account IDs, or all to make the manual DB snapshot restorable by any Amazon Web Services account. Do not add the all value for any manual DB snapshots that contain private information that you don't want available to all Amazon Web Services accounts.
        @OptionalCustomCoding<ArrayCoder<_ValuesToAddEncoding, String>>
        public var valuesToAdd: [String]?
        /// A list of DB snapshot attributes to remove from the attribute specified by AttributeName. To remove authorization for other Amazon Web Services accounts to copy or restore a manual snapshot, set this list to include one or more Amazon Web Services account identifiers, or all to remove authorization for any Amazon Web Services account to copy or restore the DB snapshot. If you specify all, an Amazon Web Services account whose account ID is explicitly added to the restore attribute can still copy or restore the manual DB snapshot.
        @OptionalCustomCoding<ArrayCoder<_ValuesToRemoveEncoding, String>>
        public var valuesToRemove: [String]?

        public init(attributeName: String, dBSnapshotIdentifier: String, valuesToAdd: [String]? = nil, valuesToRemove: [String]? = nil) {
            self.attributeName = attributeName
            self.dBSnapshotIdentifier = dBSnapshotIdentifier
            self.valuesToAdd = valuesToAdd
            self.valuesToRemove = valuesToRemove
        }

        private enum CodingKeys: String, CodingKey {
            case attributeName = "AttributeName"
            case dBSnapshotIdentifier = "DBSnapshotIdentifier"
            case valuesToAdd = "ValuesToAdd"
            case valuesToRemove = "ValuesToRemove"
        }
    }

    public struct ModifyDBSnapshotAttributeResult: AWSDecodableShape {
        public let dBSnapshotAttributesResult: DBSnapshotAttributesResult?

        public init(dBSnapshotAttributesResult: DBSnapshotAttributesResult? = nil) {
            self.dBSnapshotAttributesResult = dBSnapshotAttributesResult
        }

        private enum CodingKeys: String, CodingKey {
            case dBSnapshotAttributesResult = "DBSnapshotAttributesResult"
        }
    }

    public struct ModifyDBSnapshotMessage: AWSEncodableShape {
        /// The identifier of the DB snapshot to modify.
        public let dBSnapshotIdentifier: String
        /// The engine version to upgrade the DB snapshot to.  The following are the database engines and engine versions that are available when you upgrade a DB snapshot.   MySQL     5.5.46 (supported for 5.1 DB snapshots)    Oracle     12.1.0.2.v8 (supported for 12.1.0.1 DB snapshots)    11.2.0.4.v12 (supported for 11.2.0.2 DB snapshots)    11.2.0.4.v11 (supported for 11.2.0.3 DB snapshots)    PostgreSQL  For the list of engine versions that are available for upgrading a DB snapshot, see  Upgrading the PostgreSQL DB Engine for Amazon RDS.
        public let engineVersion: String?
        /// The option group to identify with the upgraded DB snapshot.  You can specify this parameter when you upgrade an Oracle DB snapshot. The same option group considerations apply when upgrading a DB snapshot as when upgrading a DB instance. For more information, see Option group considerations in the Amazon RDS User Guide.
        public let optionGroupName: String?

        public init(dBSnapshotIdentifier: String, engineVersion: String? = nil, optionGroupName: String? = nil) {
            self.dBSnapshotIdentifier = dBSnapshotIdentifier
            self.engineVersion = engineVersion
            self.optionGroupName = optionGroupName
        }

        private enum CodingKeys: String, CodingKey {
            case dBSnapshotIdentifier = "DBSnapshotIdentifier"
            case engineVersion = "EngineVersion"
            case optionGroupName = "OptionGroupName"
        }
    }

    public struct ModifyDBSnapshotResult: AWSDecodableShape {
        public let dBSnapshot: DBSnapshot?

        public init(dBSnapshot: DBSnapshot? = nil) {
            self.dBSnapshot = dBSnapshot
        }

        private enum CodingKeys: String, CodingKey {
            case dBSnapshot = "DBSnapshot"
        }
    }

    public struct ModifyDBSubnetGroupMessage: AWSEncodableShape {
        public struct _SubnetIdsEncoding: ArrayCoderProperties { public static let member = "SubnetIdentifier" }

        /// The description for the DB subnet group.
        public let dBSubnetGroupDescription: String?
        /// The name for the DB subnet group. This value is stored as a lowercase string. You can't modify the default subnet group.  Constraints: Must match the name of an existing DBSubnetGroup. Must not be default. Example: mySubnetgroup
        public let dBSubnetGroupName: String
        /// The EC2 subnet IDs for the DB subnet group.
        @CustomCoding<ArrayCoder<_SubnetIdsEncoding, String>>
        public var subnetIds: [String]

        public init(dBSubnetGroupDescription: String? = nil, dBSubnetGroupName: String, subnetIds: [String]) {
            self.dBSubnetGroupDescription = dBSubnetGroupDescription
            self.dBSubnetGroupName = dBSubnetGroupName
            self.subnetIds = subnetIds
        }

        private enum CodingKeys: String, CodingKey {
            case dBSubnetGroupDescription = "DBSubnetGroupDescription"
            case dBSubnetGroupName = "DBSubnetGroupName"
            case subnetIds = "SubnetIds"
        }
    }

    public struct ModifyDBSubnetGroupResult: AWSDecodableShape {
        public let dBSubnetGroup: DBSubnetGroup?

        public init(dBSubnetGroup: DBSubnetGroup? = nil) {
            self.dBSubnetGroup = dBSubnetGroup
        }

        private enum CodingKeys: String, CodingKey {
            case dBSubnetGroup = "DBSubnetGroup"
        }
    }

    public struct ModifyEventSubscriptionMessage: AWSEncodableShape {
        public struct _EventCategoriesEncoding: ArrayCoderProperties { public static let member = "EventCategory" }

        ///  A value that indicates whether to activate the subscription.
        public let enabled: Bool?
        ///  A list of event categories for a source type (SourceType) that you want to subscribe to. You can see a list of the categories for a given source type in Events in the Amazon RDS User Guide or by using the DescribeEventCategories operation.
        @OptionalCustomCoding<ArrayCoder<_EventCategoriesEncoding, String>>
        public var eventCategories: [String]?
        /// The Amazon Resource Name (ARN) of the SNS topic created for event notification. The ARN is created by Amazon SNS when you create a topic and subscribe to it.
        public let snsTopicArn: String?
        /// The type of source that is generating the events. For example, if you want to be notified of events generated by a DB instance, you would set this parameter to db-instance. If this value isn't specified, all events are returned. Valid values: db-instance | db-cluster | db-parameter-group | db-security-group | db-snapshot | db-cluster-snapshot
        public let sourceType: String?
        /// The name of the RDS event notification subscription.
        public let subscriptionName: String

        public init(enabled: Bool? = nil, eventCategories: [String]? = nil, snsTopicArn: String? = nil, sourceType: String? = nil, subscriptionName: String) {
            self.enabled = enabled
            self.eventCategories = eventCategories
            self.snsTopicArn = snsTopicArn
            self.sourceType = sourceType
            self.subscriptionName = subscriptionName
        }

        private enum CodingKeys: String, CodingKey {
            case enabled = "Enabled"
            case eventCategories = "EventCategories"
            case snsTopicArn = "SnsTopicArn"
            case sourceType = "SourceType"
            case subscriptionName = "SubscriptionName"
        }
    }

    public struct ModifyEventSubscriptionResult: AWSDecodableShape {
        public let eventSubscription: EventSubscription?

        public init(eventSubscription: EventSubscription? = nil) {
            self.eventSubscription = eventSubscription
        }

        private enum CodingKeys: String, CodingKey {
            case eventSubscription = "EventSubscription"
        }
    }

    public struct ModifyGlobalClusterMessage: AWSEncodableShape {
        /// A value that indicates whether major version upgrades are allowed. Constraints: You must allow major version upgrades when specifying a value for the EngineVersion parameter that is a different major version than the DB cluster's current version. If you upgrade the major version of a global database, the cluster and DB instance parameter groups are set to the default parameter groups for the new version. Apply any custom parameter groups after completing the upgrade.
        public let allowMajorVersionUpgrade: Bool?
        ///  Indicates if the global database cluster has deletion protection enabled. The global database cluster can't be deleted when deletion protection is enabled.
        public let deletionProtection: Bool?
        /// The version number of the database engine to which you want to upgrade. Changing this parameter results in an outage. The change is applied during the next maintenance window unless ApplyImmediately is enabled. To list all of the available engine versions for aurora (for MySQL 5.6-compatible Aurora), use the following command:  aws rds describe-db-engine-versions --engine aurora --query '*[]|[?SupportsGlobalDatabases == `true`].[EngineVersion]'  To list all of the available engine versions for aurora-mysql (for MySQL 5.7-compatible Aurora), use the following command:  aws rds describe-db-engine-versions --engine aurora-mysql --query '*[]|[?SupportsGlobalDatabases == `true`].[EngineVersion]'  To list all of the available engine versions for aurora-postgresql, use the following command:  aws rds describe-db-engine-versions --engine aurora-postgresql --query '*[]|[?SupportsGlobalDatabases == `true`].[EngineVersion]'
        public let engineVersion: String?
        ///  The DB cluster identifier for the global cluster being modified. This parameter isn't case-sensitive.  Constraints:   Must match the identifier of an existing global database cluster.
        public let globalClusterIdentifier: String?
        ///  The new cluster identifier for the global database cluster when modifying a global database cluster. This value is stored as a lowercase string.  Constraints:   Must contain from 1 to 63 letters, numbers, or hyphens   The first character must be a letter   Can't end with a hyphen or contain two consecutive hyphens   Example: my-cluster2
        public let newGlobalClusterIdentifier: String?

        public init(allowMajorVersionUpgrade: Bool? = nil, deletionProtection: Bool? = nil, engineVersion: String? = nil, globalClusterIdentifier: String? = nil, newGlobalClusterIdentifier: String? = nil) {
            self.allowMajorVersionUpgrade = allowMajorVersionUpgrade
            self.deletionProtection = deletionProtection
            self.engineVersion = engineVersion
            self.globalClusterIdentifier = globalClusterIdentifier
            self.newGlobalClusterIdentifier = newGlobalClusterIdentifier
        }

        private enum CodingKeys: String, CodingKey {
            case allowMajorVersionUpgrade = "AllowMajorVersionUpgrade"
            case deletionProtection = "DeletionProtection"
            case engineVersion = "EngineVersion"
            case globalClusterIdentifier = "GlobalClusterIdentifier"
            case newGlobalClusterIdentifier = "NewGlobalClusterIdentifier"
        }
    }

    public struct ModifyGlobalClusterResult: AWSDecodableShape {
        public let globalCluster: GlobalCluster?

        public init(globalCluster: GlobalCluster? = nil) {
            self.globalCluster = globalCluster
        }

        private enum CodingKeys: String, CodingKey {
            case globalCluster = "GlobalCluster"
        }
    }

    public struct ModifyOptionGroupMessage: AWSEncodableShape {
        public struct _OptionsToIncludeEncoding: ArrayCoderProperties { public static let member = "OptionConfiguration" }

        /// A value that indicates whether to apply the change immediately or during the next maintenance window for each instance associated with the option group.
        public let applyImmediately: Bool?
        /// The name of the option group to be modified. Permanent options, such as the TDE option for Oracle Advanced Security TDE, can't be removed from an option group, and that option group can't be removed from a DB instance once it is associated with a DB instance
        public let optionGroupName: String
        /// Options in this list are added to the option group or, if already present, the specified configuration is used to update the existing configuration.
        @OptionalCustomCoding<ArrayCoder<_OptionsToIncludeEncoding, OptionConfiguration>>
        public var optionsToInclude: [OptionConfiguration]?
        /// Options in this list are removed from the option group.
        @OptionalCustomCoding<StandardArrayCoder>
        public var optionsToRemove: [String]?

        public init(applyImmediately: Bool? = nil, optionGroupName: String, optionsToInclude: [OptionConfiguration]? = nil, optionsToRemove: [String]? = nil) {
            self.applyImmediately = applyImmediately
            self.optionGroupName = optionGroupName
            self.optionsToInclude = optionsToInclude
            self.optionsToRemove = optionsToRemove
        }

        private enum CodingKeys: String, CodingKey {
            case applyImmediately = "ApplyImmediately"
            case optionGroupName = "OptionGroupName"
            case optionsToInclude = "OptionsToInclude"
            case optionsToRemove = "OptionsToRemove"
        }
    }

    public struct ModifyOptionGroupResult: AWSDecodableShape {
        public let optionGroup: OptionGroup?

        public init(optionGroup: OptionGroup? = nil) {
            self.optionGroup = optionGroup
        }

        private enum CodingKeys: String, CodingKey {
            case optionGroup = "OptionGroup"
        }
    }

    public struct Option: AWSDecodableShape {
        public struct _DBSecurityGroupMembershipsEncoding: ArrayCoderProperties { public static let member = "DBSecurityGroup" }
        public struct _OptionSettingsEncoding: ArrayCoderProperties { public static let member = "OptionSetting" }
        public struct _VpcSecurityGroupMembershipsEncoding: ArrayCoderProperties { public static let member = "VpcSecurityGroupMembership" }

        /// If the option requires access to a port, then this DB security group allows access to the port.
        @OptionalCustomCoding<ArrayCoder<_DBSecurityGroupMembershipsEncoding, DBSecurityGroupMembership>>
        public var dBSecurityGroupMemberships: [DBSecurityGroupMembership]?
        /// The description of the option.
        public let optionDescription: String?
        /// The name of the option.
        public let optionName: String?
        /// The option settings for this option.
        @OptionalCustomCoding<ArrayCoder<_OptionSettingsEncoding, OptionSetting>>
        public var optionSettings: [OptionSetting]?
        /// The version of the option.
        public let optionVersion: String?
        /// Indicate if this option is permanent.
        public let permanent: Bool?
        /// Indicate if this option is persistent.
        public let persistent: Bool?
        /// If required, the port configured for this option to use.
        public let port: Int?
        /// If the option requires access to a port, then this VPC security group allows access to the port.
        @OptionalCustomCoding<ArrayCoder<_VpcSecurityGroupMembershipsEncoding, VpcSecurityGroupMembership>>
        public var vpcSecurityGroupMemberships: [VpcSecurityGroupMembership]?

        public init(dBSecurityGroupMemberships: [DBSecurityGroupMembership]? = nil, optionDescription: String? = nil, optionName: String? = nil, optionSettings: [OptionSetting]? = nil, optionVersion: String? = nil, permanent: Bool? = nil, persistent: Bool? = nil, port: Int? = nil, vpcSecurityGroupMemberships: [VpcSecurityGroupMembership]? = nil) {
            self.dBSecurityGroupMemberships = dBSecurityGroupMemberships
            self.optionDescription = optionDescription
            self.optionName = optionName
            self.optionSettings = optionSettings
            self.optionVersion = optionVersion
            self.permanent = permanent
            self.persistent = persistent
            self.port = port
            self.vpcSecurityGroupMemberships = vpcSecurityGroupMemberships
        }

        private enum CodingKeys: String, CodingKey {
            case dBSecurityGroupMemberships = "DBSecurityGroupMemberships"
            case optionDescription = "OptionDescription"
            case optionName = "OptionName"
            case optionSettings = "OptionSettings"
            case optionVersion = "OptionVersion"
            case permanent = "Permanent"
            case persistent = "Persistent"
            case port = "Port"
            case vpcSecurityGroupMemberships = "VpcSecurityGroupMemberships"
        }
    }

    public struct OptionConfiguration: AWSEncodableShape {
        public struct _DBSecurityGroupMembershipsEncoding: ArrayCoderProperties { public static let member = "DBSecurityGroupName" }
        public struct _OptionSettingsEncoding: ArrayCoderProperties { public static let member = "OptionSetting" }
        public struct _VpcSecurityGroupMembershipsEncoding: ArrayCoderProperties { public static let member = "VpcSecurityGroupId" }

        /// A list of DBSecurityGroupMembership name strings used for this option.
        @OptionalCustomCoding<ArrayCoder<_DBSecurityGroupMembershipsEncoding, String>>
        public var dBSecurityGroupMemberships: [String]?
        /// The configuration of options to include in a group.
        public let optionName: String
        /// The option settings to include in an option group.
        @OptionalCustomCoding<ArrayCoder<_OptionSettingsEncoding, OptionSetting>>
        public var optionSettings: [OptionSetting]?
        /// The version for the option.
        public let optionVersion: String?
        /// The optional port for the option.
        public let port: Int?
        /// A list of VpcSecurityGroupMembership name strings used for this option.
        @OptionalCustomCoding<ArrayCoder<_VpcSecurityGroupMembershipsEncoding, String>>
        public var vpcSecurityGroupMemberships: [String]?

        public init(dBSecurityGroupMemberships: [String]? = nil, optionName: String, optionSettings: [OptionSetting]? = nil, optionVersion: String? = nil, port: Int? = nil, vpcSecurityGroupMemberships: [String]? = nil) {
            self.dBSecurityGroupMemberships = dBSecurityGroupMemberships
            self.optionName = optionName
            self.optionSettings = optionSettings
            self.optionVersion = optionVersion
            self.port = port
            self.vpcSecurityGroupMemberships = vpcSecurityGroupMemberships
        }

        private enum CodingKeys: String, CodingKey {
            case dBSecurityGroupMemberships = "DBSecurityGroupMemberships"
            case optionName = "OptionName"
            case optionSettings = "OptionSettings"
            case optionVersion = "OptionVersion"
            case port = "Port"
            case vpcSecurityGroupMemberships = "VpcSecurityGroupMemberships"
        }
    }

    public struct OptionGroup: AWSDecodableShape {
        public struct _OptionsEncoding: ArrayCoderProperties { public static let member = "Option" }

        /// Indicates whether this option group can be applied to both VPC and non-VPC instances. The value true indicates the option group can be applied to both VPC and non-VPC instances.
        public let allowsVpcAndNonVpcInstanceMemberships: Bool?
        /// Indicates the name of the engine that this option group can be applied to.
        public let engineName: String?
        /// Indicates the major engine version associated with this option group.
        public let majorEngineVersion: String?
        /// The Amazon Resource Name (ARN) for the option group.
        public let optionGroupArn: String?
        /// Provides a description of the option group.
        public let optionGroupDescription: String?
        /// Specifies the name of the option group.
        public let optionGroupName: String?
        /// Indicates what options are available in the option group.
        @OptionalCustomCoding<ArrayCoder<_OptionsEncoding, Option>>
        public var options: [Option]?
        /// If AllowsVpcAndNonVpcInstanceMemberships is false, this field is blank. If AllowsVpcAndNonVpcInstanceMemberships is true and this field is blank, then this option group can be applied to both VPC and non-VPC instances. If this field contains a value, then this option group can only be applied to instances that are in the VPC indicated by this field.
        public let vpcId: String?

        public init(allowsVpcAndNonVpcInstanceMemberships: Bool? = nil, engineName: String? = nil, majorEngineVersion: String? = nil, optionGroupArn: String? = nil, optionGroupDescription: String? = nil, optionGroupName: String? = nil, options: [Option]? = nil, vpcId: String? = nil) {
            self.allowsVpcAndNonVpcInstanceMemberships = allowsVpcAndNonVpcInstanceMemberships
            self.engineName = engineName
            self.majorEngineVersion = majorEngineVersion
            self.optionGroupArn = optionGroupArn
            self.optionGroupDescription = optionGroupDescription
            self.optionGroupName = optionGroupName
            self.options = options
            self.vpcId = vpcId
        }

        private enum CodingKeys: String, CodingKey {
            case allowsVpcAndNonVpcInstanceMemberships = "AllowsVpcAndNonVpcInstanceMemberships"
            case engineName = "EngineName"
            case majorEngineVersion = "MajorEngineVersion"
            case optionGroupArn = "OptionGroupArn"
            case optionGroupDescription = "OptionGroupDescription"
            case optionGroupName = "OptionGroupName"
            case options = "Options"
            case vpcId = "VpcId"
        }
    }

    public struct OptionGroupMembership: AWSDecodableShape {
        /// The name of the option group that the instance belongs to.
        public let optionGroupName: String?
        /// The status of the DB instance's option group membership. Valid values are: in-sync, pending-apply, pending-removal, pending-maintenance-apply, pending-maintenance-removal, applying, removing, and failed.
        public let status: String?

        public init(optionGroupName: String? = nil, status: String? = nil) {
            self.optionGroupName = optionGroupName
            self.status = status
        }

        private enum CodingKeys: String, CodingKey {
            case optionGroupName = "OptionGroupName"
            case status = "Status"
        }
    }

    public struct OptionGroupOption: AWSDecodableShape {
        public struct _OptionGroupOptionSettingsEncoding: ArrayCoderProperties { public static let member = "OptionGroupOptionSetting" }
        public struct _OptionGroupOptionVersionsEncoding: ArrayCoderProperties { public static let member = "OptionVersion" }
        public struct _OptionsConflictsWithEncoding: ArrayCoderProperties { public static let member = "OptionConflictName" }
        public struct _OptionsDependedOnEncoding: ArrayCoderProperties { public static let member = "OptionName" }

        /// If the option requires a port, specifies the default port for the option.
        public let defaultPort: Int?
        /// The description of the option.
        public let description: String?
        /// The name of the engine that this option can be applied to.
        public let engineName: String?
        /// Indicates the major engine version that the option is available for.
        public let majorEngineVersion: String?
        /// The minimum required engine version for the option to be applied.
        public let minimumRequiredMinorEngineVersion: String?
        /// The name of the option.
        public let name: String?
        /// The option settings that are available (and the default value) for each option in an option group.
        @OptionalCustomCoding<ArrayCoder<_OptionGroupOptionSettingsEncoding, OptionGroupOptionSetting>>
        public var optionGroupOptionSettings: [OptionGroupOptionSetting]?
        /// The versions that are available for the option.
        @OptionalCustomCoding<ArrayCoder<_OptionGroupOptionVersionsEncoding, OptionVersion>>
        public var optionGroupOptionVersions: [OptionVersion]?
        /// The options that conflict with this option.
        @OptionalCustomCoding<ArrayCoder<_OptionsConflictsWithEncoding, String>>
        public var optionsConflictsWith: [String]?
        /// The options that are prerequisites for this option.
        @OptionalCustomCoding<ArrayCoder<_OptionsDependedOnEncoding, String>>
        public var optionsDependedOn: [String]?
        /// Permanent options can never be removed from an option group. An option group containing a permanent option can't be removed from a DB instance.
        public let permanent: Bool?
        /// Persistent options can't be removed from an option group while DB instances are associated with the option group. If you disassociate all DB instances from the option group, your can remove the persistent option from the option group.
        public let persistent: Bool?
        /// Specifies whether the option requires a port.
        public let portRequired: Bool?
        /// If true, you must enable the Auto Minor Version Upgrade setting for your DB instance before you can use this option. You can enable Auto Minor Version Upgrade when you first create your DB instance, or by modifying your DB instance later.
        public let requiresAutoMinorEngineVersionUpgrade: Bool?
        /// If true, you can change the option to an earlier version of the option. This only applies to options that have different versions available.
        public let supportsOptionVersionDowngrade: Bool?
        /// If true, you can only use this option with a DB instance that is in a VPC.
        public let vpcOnly: Bool?

        public init(defaultPort: Int? = nil, description: String? = nil, engineName: String? = nil, majorEngineVersion: String? = nil, minimumRequiredMinorEngineVersion: String? = nil, name: String? = nil, optionGroupOptionSettings: [OptionGroupOptionSetting]? = nil, optionGroupOptionVersions: [OptionVersion]? = nil, optionsConflictsWith: [String]? = nil, optionsDependedOn: [String]? = nil, permanent: Bool? = nil, persistent: Bool? = nil, portRequired: Bool? = nil, requiresAutoMinorEngineVersionUpgrade: Bool? = nil, supportsOptionVersionDowngrade: Bool? = nil, vpcOnly: Bool? = nil) {
            self.defaultPort = defaultPort
            self.description = description
            self.engineName = engineName
            self.majorEngineVersion = majorEngineVersion
            self.minimumRequiredMinorEngineVersion = minimumRequiredMinorEngineVersion
            self.name = name
            self.optionGroupOptionSettings = optionGroupOptionSettings
            self.optionGroupOptionVersions = optionGroupOptionVersions
            self.optionsConflictsWith = optionsConflictsWith
            self.optionsDependedOn = optionsDependedOn
            self.permanent = permanent
            self.persistent = persistent
            self.portRequired = portRequired
            self.requiresAutoMinorEngineVersionUpgrade = requiresAutoMinorEngineVersionUpgrade
            self.supportsOptionVersionDowngrade = supportsOptionVersionDowngrade
            self.vpcOnly = vpcOnly
        }

        private enum CodingKeys: String, CodingKey {
            case defaultPort = "DefaultPort"
            case description = "Description"
            case engineName = "EngineName"
            case majorEngineVersion = "MajorEngineVersion"
            case minimumRequiredMinorEngineVersion = "MinimumRequiredMinorEngineVersion"
            case name = "Name"
            case optionGroupOptionSettings = "OptionGroupOptionSettings"
            case optionGroupOptionVersions = "OptionGroupOptionVersions"
            case optionsConflictsWith = "OptionsConflictsWith"
            case optionsDependedOn = "OptionsDependedOn"
            case permanent = "Permanent"
            case persistent = "Persistent"
            case portRequired = "PortRequired"
            case requiresAutoMinorEngineVersionUpgrade = "RequiresAutoMinorEngineVersionUpgrade"
            case supportsOptionVersionDowngrade = "SupportsOptionVersionDowngrade"
            case vpcOnly = "VpcOnly"
        }
    }

    public struct OptionGroupOptionSetting: AWSDecodableShape {
        public struct _MinimumEngineVersionPerAllowedValueEncoding: ArrayCoderProperties { public static let member = "MinimumEngineVersionPerAllowedValue" }

        /// Indicates the acceptable values for the option group option.
        public let allowedValues: String?
        /// The DB engine specific parameter type for the option group option.
        public let applyType: String?
        /// The default value for the option group option.
        public let defaultValue: String?
        /// Boolean value where true indicates that this option group option can be changed from the default value.
        public let isModifiable: Bool?
        /// Boolean value where true indicates that a value must be specified for this option setting of the option group option.
        public let isRequired: Bool?
        /// The minimum DB engine version required for the corresponding allowed value for this option setting.
        @OptionalCustomCoding<ArrayCoder<_MinimumEngineVersionPerAllowedValueEncoding, MinimumEngineVersionPerAllowedValue>>
        public var minimumEngineVersionPerAllowedValue: [MinimumEngineVersionPerAllowedValue]?
        /// The description of the option group option.
        public let settingDescription: String?
        /// The name of the option group option.
        public let settingName: String?

        public init(allowedValues: String? = nil, applyType: String? = nil, defaultValue: String? = nil, isModifiable: Bool? = nil, isRequired: Bool? = nil, minimumEngineVersionPerAllowedValue: [MinimumEngineVersionPerAllowedValue]? = nil, settingDescription: String? = nil, settingName: String? = nil) {
            self.allowedValues = allowedValues
            self.applyType = applyType
            self.defaultValue = defaultValue
            self.isModifiable = isModifiable
            self.isRequired = isRequired
            self.minimumEngineVersionPerAllowedValue = minimumEngineVersionPerAllowedValue
            self.settingDescription = settingDescription
            self.settingName = settingName
        }

        private enum CodingKeys: String, CodingKey {
            case allowedValues = "AllowedValues"
            case applyType = "ApplyType"
            case defaultValue = "DefaultValue"
            case isModifiable = "IsModifiable"
            case isRequired = "IsRequired"
            case minimumEngineVersionPerAllowedValue = "MinimumEngineVersionPerAllowedValue"
            case settingDescription = "SettingDescription"
            case settingName = "SettingName"
        }
    }

    public struct OptionGroupOptionsMessage: AWSDecodableShape {
        public struct _OptionGroupOptionsEncoding: ArrayCoderProperties { public static let member = "OptionGroupOption" }

        /// An optional pagination token provided by a previous request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by MaxRecords.
        public let marker: String?
        @OptionalCustomCoding<ArrayCoder<_OptionGroupOptionsEncoding, OptionGroupOption>>
        public var optionGroupOptions: [OptionGroupOption]?

        public init(marker: String? = nil, optionGroupOptions: [OptionGroupOption]? = nil) {
            self.marker = marker
            self.optionGroupOptions = optionGroupOptions
        }

        private enum CodingKeys: String, CodingKey {
            case marker = "Marker"
            case optionGroupOptions = "OptionGroupOptions"
        }
    }

    public struct OptionGroups: AWSDecodableShape {
        public struct _OptionGroupsListEncoding: ArrayCoderProperties { public static let member = "OptionGroup" }

        /// An optional pagination token provided by a previous request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by MaxRecords.
        public let marker: String?
        /// List of option groups.
        @OptionalCustomCoding<ArrayCoder<_OptionGroupsListEncoding, OptionGroup>>
        public var optionGroupsList: [OptionGroup]?

        public init(marker: String? = nil, optionGroupsList: [OptionGroup]? = nil) {
            self.marker = marker
            self.optionGroupsList = optionGroupsList
        }

        private enum CodingKeys: String, CodingKey {
            case marker = "Marker"
            case optionGroupsList = "OptionGroupsList"
        }
    }

    public struct OptionSetting: AWSEncodableShape & AWSDecodableShape {
        /// The allowed values of the option setting.
        public let allowedValues: String?
        /// The DB engine specific parameter type.
        public let applyType: String?
        /// The data type of the option setting.
        public let dataType: String?
        /// The default value of the option setting.
        public let defaultValue: String?
        /// The description of the option setting.
        public let description: String?
        /// Indicates if the option setting is part of a collection.
        public let isCollection: Bool?
        /// A Boolean value that, when true, indicates the option setting can be modified from the default.
        public let isModifiable: Bool?
        /// The name of the option that has settings that you can set.
        public let name: String?
        /// The current value of the option setting.
        public let value: String?

        public init(allowedValues: String? = nil, applyType: String? = nil, dataType: String? = nil, defaultValue: String? = nil, description: String? = nil, isCollection: Bool? = nil, isModifiable: Bool? = nil, name: String? = nil, value: String? = nil) {
            self.allowedValues = allowedValues
            self.applyType = applyType
            self.dataType = dataType
            self.defaultValue = defaultValue
            self.description = description
            self.isCollection = isCollection
            self.isModifiable = isModifiable
            self.name = name
            self.value = value
        }

        private enum CodingKeys: String, CodingKey {
            case allowedValues = "AllowedValues"
            case applyType = "ApplyType"
            case dataType = "DataType"
            case defaultValue = "DefaultValue"
            case description = "Description"
            case isCollection = "IsCollection"
            case isModifiable = "IsModifiable"
            case name = "Name"
            case value = "Value"
        }
    }

    public struct OptionVersion: AWSDecodableShape {
        /// True if the version is the default version of the option, and otherwise false.
        public let isDefault: Bool?
        /// The version of the option.
        public let version: String?

        public init(isDefault: Bool? = nil, version: String? = nil) {
            self.isDefault = isDefault
            self.version = version
        }

        private enum CodingKeys: String, CodingKey {
            case isDefault = "IsDefault"
            case version = "Version"
        }
    }

    public struct OrderableDBInstanceOption: AWSDecodableShape {
        public struct _AvailabilityZonesEncoding: ArrayCoderProperties { public static let member = "AvailabilityZone" }
        public struct _AvailableProcessorFeaturesEncoding: ArrayCoderProperties { public static let member = "AvailableProcessorFeature" }

        /// The Availability Zone group for a DB instance.
        public let availabilityZoneGroup: String?
        /// A list of Availability Zones for a DB instance.
        @OptionalCustomCoding<ArrayCoder<_AvailabilityZonesEncoding, AvailabilityZone>>
        public var availabilityZones: [AvailabilityZone]?
        /// A list of the available processor features for the DB instance class of a DB instance.
        @OptionalCustomCoding<ArrayCoder<_AvailableProcessorFeaturesEncoding, AvailableProcessorFeature>>
        public var availableProcessorFeatures: [AvailableProcessorFeature]?
        /// The DB instance class for a DB instance.
        public let dBInstanceClass: String?
        /// The engine type of a DB instance.
        public let engine: String?
        /// The engine version of a DB instance.
        public let engineVersion: String?
        /// The license model for a DB instance.
        public let licenseModel: String?
        /// Maximum total provisioned IOPS for a DB instance.
        public let maxIopsPerDbInstance: Int?
        /// Maximum provisioned IOPS per GiB for a DB instance.
        public let maxIopsPerGib: Double?
        /// Maximum storage size for a DB instance.
        public let maxStorageSize: Int?
        /// Minimum total provisioned IOPS for a DB instance.
        public let minIopsPerDbInstance: Int?
        /// Minimum provisioned IOPS per GiB for a DB instance.
        public let minIopsPerGib: Double?
        /// Minimum storage size for a DB instance.
        public let minStorageSize: Int?
        /// Indicates whether a DB instance is Multi-AZ capable.
        public let multiAZCapable: Bool?
        /// Whether a DB instance supports RDS on Outposts. For more information about RDS on Outposts, see Amazon RDS on Amazon Web Services Outposts in the Amazon RDS User Guide.
        public let outpostCapable: Bool?
        /// Indicates whether a DB instance can have a read replica.
        public let readReplicaCapable: Bool?
        /// Indicates the storage type for a DB instance.
        public let storageType: String?
        /// The list of supported modes for Database Activity Streams. Aurora PostgreSQL returns the value [sync, async]. Aurora MySQL and RDS for Oracle return [async] only. If Database Activity Streams isn't supported, the return value is an empty list.
        @OptionalCustomCoding<StandardArrayCoder>
        public var supportedActivityStreamModes: [String]?
        /// A list of the supported DB engine modes.
        @OptionalCustomCoding<StandardArrayCoder>
        public var supportedEngineModes: [String]?
        /// Indicates whether a DB instance supports Enhanced Monitoring at intervals from 1 to 60 seconds.
        public let supportsEnhancedMonitoring: Bool?
        /// A value that indicates whether you can use Aurora global databases with a specific combination of other DB engine attributes.
        public let supportsGlobalDatabases: Bool?
        /// Indicates whether a DB instance supports IAM database authentication.
        public let supportsIAMDatabaseAuthentication: Bool?
        /// Indicates whether a DB instance supports provisioned IOPS.
        public let supportsIops: Bool?
        /// Whether a DB instance supports Kerberos Authentication.
        public let supportsKerberosAuthentication: Bool?
        /// True if a DB instance supports Performance Insights, otherwise false.
        public let supportsPerformanceInsights: Bool?
        /// Whether Amazon RDS can automatically scale storage for DB instances that use the specified DB instance class.
        public let supportsStorageAutoscaling: Bool?
        /// Indicates whether a DB instance supports encrypted storage.
        public let supportsStorageEncryption: Bool?
        /// Indicates whether a DB instance is in a VPC.
        public let vpc: Bool?

        public init(availabilityZoneGroup: String? = nil, availabilityZones: [AvailabilityZone]? = nil, availableProcessorFeatures: [AvailableProcessorFeature]? = nil, dBInstanceClass: String? = nil, engine: String? = nil, engineVersion: String? = nil, licenseModel: String? = nil, maxIopsPerDbInstance: Int? = nil, maxIopsPerGib: Double? = nil, maxStorageSize: Int? = nil, minIopsPerDbInstance: Int? = nil, minIopsPerGib: Double? = nil, minStorageSize: Int? = nil, multiAZCapable: Bool? = nil, outpostCapable: Bool? = nil, readReplicaCapable: Bool? = nil, storageType: String? = nil, supportedActivityStreamModes: [String]? = nil, supportedEngineModes: [String]? = nil, supportsEnhancedMonitoring: Bool? = nil, supportsGlobalDatabases: Bool? = nil, supportsIAMDatabaseAuthentication: Bool? = nil, supportsIops: Bool? = nil, supportsKerberosAuthentication: Bool? = nil, supportsPerformanceInsights: Bool? = nil, supportsStorageAutoscaling: Bool? = nil, supportsStorageEncryption: Bool? = nil, vpc: Bool? = nil) {
            self.availabilityZoneGroup = availabilityZoneGroup
            self.availabilityZones = availabilityZones
            self.availableProcessorFeatures = availableProcessorFeatures
            self.dBInstanceClass = dBInstanceClass
            self.engine = engine
            self.engineVersion = engineVersion
            self.licenseModel = licenseModel
            self.maxIopsPerDbInstance = maxIopsPerDbInstance
            self.maxIopsPerGib = maxIopsPerGib
            self.maxStorageSize = maxStorageSize
            self.minIopsPerDbInstance = minIopsPerDbInstance
            self.minIopsPerGib = minIopsPerGib
            self.minStorageSize = minStorageSize
            self.multiAZCapable = multiAZCapable
            self.outpostCapable = outpostCapable
            self.readReplicaCapable = readReplicaCapable
            self.storageType = storageType
            self.supportedActivityStreamModes = supportedActivityStreamModes
            self.supportedEngineModes = supportedEngineModes
            self.supportsEnhancedMonitoring = supportsEnhancedMonitoring
            self.supportsGlobalDatabases = supportsGlobalDatabases
            self.supportsIAMDatabaseAuthentication = supportsIAMDatabaseAuthentication
            self.supportsIops = supportsIops
            self.supportsKerberosAuthentication = supportsKerberosAuthentication
            self.supportsPerformanceInsights = supportsPerformanceInsights
            self.supportsStorageAutoscaling = supportsStorageAutoscaling
            self.supportsStorageEncryption = supportsStorageEncryption
            self.vpc = vpc
        }

        private enum CodingKeys: String, CodingKey {
            case availabilityZoneGroup = "AvailabilityZoneGroup"
            case availabilityZones = "AvailabilityZones"
            case availableProcessorFeatures = "AvailableProcessorFeatures"
            case dBInstanceClass = "DBInstanceClass"
            case engine = "Engine"
            case engineVersion = "EngineVersion"
            case licenseModel = "LicenseModel"
            case maxIopsPerDbInstance = "MaxIopsPerDbInstance"
            case maxIopsPerGib = "MaxIopsPerGib"
            case maxStorageSize = "MaxStorageSize"
            case minIopsPerDbInstance = "MinIopsPerDbInstance"
            case minIopsPerGib = "MinIopsPerGib"
            case minStorageSize = "MinStorageSize"
            case multiAZCapable = "MultiAZCapable"
            case outpostCapable = "OutpostCapable"
            case readReplicaCapable = "ReadReplicaCapable"
            case storageType = "StorageType"
            case supportedActivityStreamModes = "SupportedActivityStreamModes"
            case supportedEngineModes = "SupportedEngineModes"
            case supportsEnhancedMonitoring = "SupportsEnhancedMonitoring"
            case supportsGlobalDatabases = "SupportsGlobalDatabases"
            case supportsIAMDatabaseAuthentication = "SupportsIAMDatabaseAuthentication"
            case supportsIops = "SupportsIops"
            case supportsKerberosAuthentication = "SupportsKerberosAuthentication"
            case supportsPerformanceInsights = "SupportsPerformanceInsights"
            case supportsStorageAutoscaling = "SupportsStorageAutoscaling"
            case supportsStorageEncryption = "SupportsStorageEncryption"
            case vpc = "Vpc"
        }
    }

    public struct OrderableDBInstanceOptionsMessage: AWSDecodableShape {
        public struct _OrderableDBInstanceOptionsEncoding: ArrayCoderProperties { public static let member = "OrderableDBInstanceOption" }

        ///  An optional pagination token provided by a previous OrderableDBInstanceOptions request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by MaxRecords .
        public let marker: String?
        /// An OrderableDBInstanceOption structure containing information about orderable options for the DB instance.
        @OptionalCustomCoding<ArrayCoder<_OrderableDBInstanceOptionsEncoding, OrderableDBInstanceOption>>
        public var orderableDBInstanceOptions: [OrderableDBInstanceOption]?

        public init(marker: String? = nil, orderableDBInstanceOptions: [OrderableDBInstanceOption]? = nil) {
            self.marker = marker
            self.orderableDBInstanceOptions = orderableDBInstanceOptions
        }

        private enum CodingKeys: String, CodingKey {
            case marker = "Marker"
            case orderableDBInstanceOptions = "OrderableDBInstanceOptions"
        }
    }

    public struct Outpost: AWSDecodableShape {
        /// The Amazon Resource Name (ARN) of the Outpost.
        public let arn: String?

        public init(arn: String? = nil) {
            self.arn = arn
        }

        private enum CodingKeys: String, CodingKey {
            case arn = "Arn"
        }
    }

    public struct Parameter: AWSEncodableShape & AWSDecodableShape {
        /// Specifies the valid range of values for the parameter.
        public let allowedValues: String?
        /// Indicates when to apply parameter updates.
        public let applyMethod: ApplyMethod?
        /// Specifies the engine specific parameters type.
        public let applyType: String?
        /// Specifies the valid data type for the parameter.
        public let dataType: String?
        /// Provides a description of the parameter.
        public let description: String?
        ///  Indicates whether (true) or not (false) the parameter can be modified. Some parameters have security or operational implications that prevent them from being changed.
        public let isModifiable: Bool?
        /// The earliest engine version to which the parameter can apply.
        public let minimumEngineVersion: String?
        /// Specifies the name of the parameter.
        public let parameterName: String?
        /// Specifies the value of the parameter.
        public let parameterValue: String?
        /// Indicates the source of the parameter value.
        public let source: String?
        /// The valid DB engine modes.
        @OptionalCustomCoding<StandardArrayCoder>
        public var supportedEngineModes: [String]?

        public init(allowedValues: String? = nil, applyMethod: ApplyMethod? = nil, applyType: String? = nil, dataType: String? = nil, description: String? = nil, isModifiable: Bool? = nil, minimumEngineVersion: String? = nil, parameterName: String? = nil, parameterValue: String? = nil, source: String? = nil, supportedEngineModes: [String]? = nil) {
            self.allowedValues = allowedValues
            self.applyMethod = applyMethod
            self.applyType = applyType
            self.dataType = dataType
            self.description = description
            self.isModifiable = isModifiable
            self.minimumEngineVersion = minimumEngineVersion
            self.parameterName = parameterName
            self.parameterValue = parameterValue
            self.source = source
            self.supportedEngineModes = supportedEngineModes
        }

        private enum CodingKeys: String, CodingKey {
            case allowedValues = "AllowedValues"
            case applyMethod = "ApplyMethod"
            case applyType = "ApplyType"
            case dataType = "DataType"
            case description = "Description"
            case isModifiable = "IsModifiable"
            case minimumEngineVersion = "MinimumEngineVersion"
            case parameterName = "ParameterName"
            case parameterValue = "ParameterValue"
            case source = "Source"
            case supportedEngineModes = "SupportedEngineModes"
        }
    }

    public struct PendingCloudwatchLogsExports: AWSDecodableShape {
        /// Log types that are in the process of being enabled. After they are enabled, these log types are exported to CloudWatch Logs.
        @OptionalCustomCoding<StandardArrayCoder>
        public var logTypesToDisable: [String]?
        /// Log types that are in the process of being deactivated. After they are deactivated, these log types aren't exported to CloudWatch Logs.
        @OptionalCustomCoding<StandardArrayCoder>
        public var logTypesToEnable: [String]?

        public init(logTypesToDisable: [String]? = nil, logTypesToEnable: [String]? = nil) {
            self.logTypesToDisable = logTypesToDisable
            self.logTypesToEnable = logTypesToEnable
        }

        private enum CodingKeys: String, CodingKey {
            case logTypesToDisable = "LogTypesToDisable"
            case logTypesToEnable = "LogTypesToEnable"
        }
    }

    public struct PendingMaintenanceAction: AWSDecodableShape {
        /// The type of pending maintenance action that is available for the resource. Valid actions are system-update, db-upgrade, hardware-maintenance, and ca-certificate-rotation.
        public let action: String?
        /// The date of the maintenance window when the action is applied. The maintenance action is applied to the resource during its first maintenance window after this date.
        public let autoAppliedAfterDate: Date?
        /// The effective date when the pending maintenance action is applied to the resource. This date takes into account opt-in requests received from the ApplyPendingMaintenanceAction API, the AutoAppliedAfterDate, and the ForcedApplyDate. This value is blank if an opt-in request has not been received and nothing has been specified as AutoAppliedAfterDate or ForcedApplyDate.
        public let currentApplyDate: Date?
        /// A description providing more detail about the maintenance action.
        public let description: String?
        /// The date when the maintenance action is automatically applied. On this date, the maintenance action is applied to the resource as soon as possible, regardless of the maintenance window for the resource. There might be a delay of one or more days from this date before the maintenance action is applied.
        public let forcedApplyDate: Date?
        /// Indicates the type of opt-in request that has been received for the resource.
        public let optInStatus: String?

        public init(action: String? = nil, autoAppliedAfterDate: Date? = nil, currentApplyDate: Date? = nil, description: String? = nil, forcedApplyDate: Date? = nil, optInStatus: String? = nil) {
            self.action = action
            self.autoAppliedAfterDate = autoAppliedAfterDate
            self.currentApplyDate = currentApplyDate
            self.description = description
            self.forcedApplyDate = forcedApplyDate
            self.optInStatus = optInStatus
        }

        private enum CodingKeys: String, CodingKey {
            case action = "Action"
            case autoAppliedAfterDate = "AutoAppliedAfterDate"
            case currentApplyDate = "CurrentApplyDate"
            case description = "Description"
            case forcedApplyDate = "ForcedApplyDate"
            case optInStatus = "OptInStatus"
        }
    }

    public struct PendingMaintenanceActionsMessage: AWSDecodableShape {
        public struct _PendingMaintenanceActionsEncoding: ArrayCoderProperties { public static let member = "ResourcePendingMaintenanceActions" }

        ///  An optional pagination token provided by a previous DescribePendingMaintenanceActions request. If this parameter is specified, the response includes only records beyond the marker, up to a number of records specified by MaxRecords.
        public let marker: String?
        /// A list of the pending maintenance actions for the resource.
        @OptionalCustomCoding<ArrayCoder<_PendingMaintenanceActionsEncoding, ResourcePendingMaintenanceActions>>
        public var pendingMaintenanceActions: [ResourcePendingMaintenanceActions]?

        public init(marker: String? = nil, pendingMaintenanceActions: [ResourcePendingMaintenanceActions]? = nil) {
            self.marker = marker
            self.pendingMaintenanceActions = pendingMaintenanceActions
        }

        private enum CodingKeys: String, CodingKey {
            case marker = "Marker"
            case pendingMaintenanceActions = "PendingMaintenanceActions"
        }
    }

    public struct PendingModifiedValues: AWSDecodableShape {
        public struct _ProcessorFeaturesEncoding: ArrayCoderProperties { public static let member = "ProcessorFeature" }

        /// The allocated storage size for the DB instance specified in gibibytes .
        public let allocatedStorage: Int?
        /// The number of days for which automated backups are retained.
        public let backupRetentionPeriod: Int?
        /// The identifier of the CA certificate for the DB instance.
        public let cACertificateIdentifier: String?
        /// The name of the compute and memory capacity class for the DB instance.
        public let dBInstanceClass: String?
        /// The database identifier for the DB instance.
        public let dBInstanceIdentifier: String?
        /// The DB subnet group for the DB instance.
        public let dBSubnetGroupName: String?
        /// The database engine version.
        public let engineVersion: String?
        /// Whether mapping of Amazon Web Services Identity and Access Management (IAM) accounts to database accounts is enabled.
        public let iAMDatabaseAuthenticationEnabled: Bool?
        /// The Provisioned IOPS value for the DB instance.
        public let iops: Int?
        /// The license model for the DB instance. Valid values: license-included | bring-your-own-license | general-public-license
        public let licenseModel: String?
        /// The master credentials for the DB instance.
        public let masterUserPassword: String?
        /// A value that indicates that the Single-AZ DB instance will change to a Multi-AZ deployment.
        public let multiAZ: Bool?
        public let pendingCloudwatchLogsExports: PendingCloudwatchLogsExports?
        /// The port for the DB instance.
        public let port: Int?
        /// The number of CPU cores and the number of threads per core for the DB instance class of the DB instance.
        @OptionalCustomCoding<ArrayCoder<_ProcessorFeaturesEncoding, ProcessorFeature>>
        public var processorFeatures: [ProcessorFeature]?
        /// The storage type of the DB instance.
        public let storageType: String?

        public init(allocatedStorage: Int? = nil, backupRetentionPeriod: Int? = nil, cACertificateIdentifier: String? = nil, dBInstanceClass: String? = nil, dBInstanceIdentifier: String? = nil, dBSubnetGroupName: String? = nil, engineVersion: String? = nil, iAMDatabaseAuthenticationEnabled: Bool? = nil, iops: Int? = nil, licenseModel: String? = nil, masterUserPassword: String? = nil, multiAZ: Bool? = nil, pendingCloudwatchLogsExports: PendingCloudwatchLogsExports? = nil, port: Int? = nil, processorFeatures: [ProcessorFeature]? = nil, storageType: String? = nil) {
            self.allocatedStorage = allocatedStorage
            self.backupRetentionPeriod = backupRetentionPeriod
            self.cACertificateIdentifier = cACertificateIdentifier
            self.dBInstanceClass = dBInstanceClass
            self.dBInstanceIdentifier = dBInstanceIdentifier
            self.dBSubnetGroupName = dBSubnetGroupName
            self.engineVersion = engineVersion
            self.iAMDatabaseAuthenticationEnabled = iAMDatabaseAuthenticationEnabled
            self.iops = iops
            self.licenseModel = licenseModel
            self.masterUserPassword = masterUserPassword
            self.multiAZ = multiAZ
            self.pendingCloudwatchLogsExports = pendingCloudwatchLogsExports
            self.port = port
            self.processorFeatures = processorFeatures
            self.storageType = storageType
        }

        private enum CodingKeys: String, CodingKey {
            case allocatedStorage = "AllocatedStorage"
            case backupRetentionPeriod = "BackupRetentionPeriod"
            case cACertificateIdentifier = "CACertificateIdentifier"
            case dBInstanceClass = "DBInstanceClass"
            case dBInstanceIdentifier = "DBInstanceIdentifier"
            case dBSubnetGroupName = "DBSubnetGroupName"
            case engineVersion = "EngineVersion"
            case iAMDatabaseAuthenticationEnabled = "IAMDatabaseAuthenticationEnabled"
            case iops = "Iops"
            case licenseModel = "LicenseModel"
            case masterUserPassword = "MasterUserPassword"
            case multiAZ = "MultiAZ"
            case pendingCloudwatchLogsExports = "PendingCloudwatchLogsExports"
            case port = "Port"
            case processorFeatures = "ProcessorFeatures"
            case storageType = "StorageType"
        }
    }

    public struct ProcessorFeature: AWSEncodableShape & AWSDecodableShape {
        /// The name of the processor feature. Valid names are coreCount and threadsPerCore.
        public let name: String?
        /// The value of a processor feature name.
        public let value: String?

        public init(name: String? = nil, value: String? = nil) {
            self.name = name
            self.value = value
        }

        private enum CodingKeys: String, CodingKey {
            case name = "Name"
            case value = "Value"
        }
    }

    public struct PromoteReadReplicaDBClusterMessage: AWSEncodableShape {
        /// The identifier of the DB cluster read replica to promote. This parameter isn't case-sensitive.  Constraints:   Must match the identifier of an existing DB cluster read replica.   Example: my-cluster-replica1
        public let dBClusterIdentifier: String

        public init(dBClusterIdentifier: String) {
            self.dBClusterIdentifier = dBClusterIdentifier
        }

        private enum CodingKeys: String, CodingKey {
            case dBClusterIdentifier = "DBClusterIdentifier"
        }
    }

    public struct PromoteReadReplicaDBClusterResult: AWSDecodableShape {
        public let dBCluster: DBCluster?

        public init(dBCluster: DBCluster? = nil) {
            self.dBCluster = dBCluster
        }

        private enum CodingKeys: String, CodingKey {
            case dBCluster = "DBCluster"
        }
    }

    public struct PromoteReadReplicaMessage: AWSEncodableShape {
        /// The number of days for which automated backups are retained. Setting this parameter to a positive number enables backups. Setting this parameter to 0 disables automated backups. Default: 1 Constraints:   Must be a value from 0 to 35.   Can't be set to 0 if the DB instance is a source to read replicas.
        public let backupRetentionPeriod: Int?
        /// The DB instance identifier. This value is stored as a lowercase string. Constraints:   Must match the identifier of an existing read replica DB instance.   Example: mydbinstance
        public let dBInstanceIdentifier: String
        ///  The daily time range during which automated backups are created if automated backups are enabled, using the BackupRetentionPeriod parameter.   The default is a 30-minute window selected at random from an 8-hour block of time for each Amazon Web Services Region. To see the time blocks available, see  Adjusting the Preferred Maintenance Window in the Amazon RDS User Guide.  Constraints:   Must be in the format hh24:mi-hh24:mi.   Must be in Universal Coordinated Time (UTC).   Must not conflict with the preferred maintenance window.   Must be at least 30 minutes.
        public let preferredBackupWindow: String?

        public init(backupRetentionPeriod: Int? = nil, dBInstanceIdentifier: String, preferredBackupWindow: String? = nil) {
            self.backupRetentionPeriod = backupRetentionPeriod
            self.dBInstanceIdentifier = dBInstanceIdentifier
            self.preferredBackupWindow = preferredBackupWindow
        }

        private enum CodingKeys: String, CodingKey {
            case backupRetentionPeriod = "BackupRetentionPeriod"
            case dBInstanceIdentifier = "DBInstanceIdentifier"
            case preferredBackupWindow = "PreferredBackupWindow"
        }
    }

    public struct PromoteReadReplicaResult: AWSDecodableShape {
        public let dBInstance: DBInstance?

        public init(dBInstance: DBInstance? = nil) {
            self.dBInstance = dBInstance
        }

        private enum CodingKeys: String, CodingKey {
            case dBInstance = "DBInstance"
        }
    }

    public struct PurchaseReservedDBInstancesOfferingMessage: AWSEncodableShape {
        public struct _TagsEncoding: ArrayCoderProperties { public static let member = "Tag" }

        /// The number of instances to reserve. Default: 1
        public let dBInstanceCount: Int?
        /// Customer-specified identifier to track this reservation. Example: myreservationID
        public let reservedDBInstanceId: String?
        /// The ID of the Reserved DB instance offering to purchase. Example: 438012d3-4052-4cc7-b2e3-8d3372e0e706
        public let reservedDBInstancesOfferingId: String
        @OptionalCustomCoding<ArrayCoder<_TagsEncoding, Tag>>
        public var tags: [Tag]?

        public init(dBInstanceCount: Int? = nil, reservedDBInstanceId: String? = nil, reservedDBInstancesOfferingId: String, tags: [Tag]? = nil) {
            self.dBInstanceCount = dBInstanceCount
            self.reservedDBInstanceId = reservedDBInstanceId
            self.reservedDBInstancesOfferingId = reservedDBInstancesOfferingId
            self.tags = tags
        }

        private enum CodingKeys: String, CodingKey {
            case dBInstanceCount = "DBInstanceCount"
            case reservedDBInstanceId = "ReservedDBInstanceId"
            case reservedDBInstancesOfferingId = "ReservedDBInstancesOfferingId"
            case tags = "Tags"
        }
    }

    public struct PurchaseReservedDBInstancesOfferingResult: AWSDecodableShape {
        public let reservedDBInstance: ReservedDBInstance?

        public init(reservedDBInstance: ReservedDBInstance? = nil) {
            self.reservedDBInstance = reservedDBInstance
        }

        private enum CodingKeys: String, CodingKey {
            case reservedDBInstance = "ReservedDBInstance"
        }
    }

    public struct Range: AWSDecodableShape {
        /// The minimum value in the range.
        public let from: Int?
        /// The step value for the range. For example, if you have a range of 5,000 to 10,000, with a step value of 1,000, the valid values start at 5,000 and step up by 1,000. Even though 7,500 is within the range, it isn't a valid value for the range. The valid values are 5,000, 6,000, 7,000, 8,000...
        public let step: Int?
        /// The maximum value in the range.
        public let to: Int?

        public init(from: Int? = nil, step: Int? = nil, to: Int? = nil) {
            self.from = from
            self.step = step
            self.to = to
        }

        private enum CodingKeys: String, CodingKey {
            case from = "From"
            case step = "Step"
            case to = "To"
        }
    }

    public struct RebootDBInstanceMessage: AWSEncodableShape {
        /// The DB instance identifier. This parameter is stored as a lowercase string. Constraints:   Must match the identifier of an existing DBInstance.
        public let dBInstanceIdentifier: String
        ///  A value that indicates whether the reboot is conducted through a Multi-AZ failover.  Constraint: You can't enable force failover if the instance isn't configured for Multi-AZ.
        public let forceFailover: Bool?

        public init(dBInstanceIdentifier: String, forceFailover: Bool? = nil) {
            self.dBInstanceIdentifier = dBInstanceIdentifier
            self.forceFailover = forceFailover
        }

        private enum CodingKeys: String, CodingKey {
            case dBInstanceIdentifier = "DBInstanceIdentifier"
            case forceFailover = "ForceFailover"
        }
    }

    public struct RebootDBInstanceResult: AWSDecodableShape {
        public let dBInstance: DBInstance?

        public init(dBInstance: DBInstance? = nil) {
            self.dBInstance = dBInstance
        }

        private enum CodingKeys: String, CodingKey {
            case dBInstance = "DBInstance"
        }
    }

    public struct RecurringCharge: AWSDecodableShape {
        /// The amount of the recurring charge.
        public let recurringChargeAmount: Double?
        /// The frequency of the recurring charge.
        public let recurringChargeFrequency: String?

        public init(recurringChargeAmount: Double? = nil, recurringChargeFrequency: String? = nil) {
            self.recurringChargeAmount = recurringChargeAmount
            self.recurringChargeFrequency = recurringChargeFrequency
        }

        private enum CodingKeys: String, CodingKey {
            case recurringChargeAmount = "RecurringChargeAmount"
            case recurringChargeFrequency = "RecurringChargeFrequency"
        }
    }

    public struct RegisterDBProxyTargetsRequest: AWSEncodableShape {
        /// One or more DB cluster identifiers.
        @OptionalCustomCoding<StandardArrayCoder>
        public var dBClusterIdentifiers: [String]?
        /// One or more DB instance identifiers.
        @OptionalCustomCoding<StandardArrayCoder>
        public var dBInstanceIdentifiers: [String]?
        /// The identifier of the DBProxy that is associated with the DBProxyTargetGroup.
        public let dBProxyName: String
        /// The identifier of the DBProxyTargetGroup.
        public let targetGroupName: String?

        public init(dBClusterIdentifiers: [String]? = nil, dBInstanceIdentifiers: [String]? = nil, dBProxyName: String, targetGroupName: String? = nil) {
            self.dBClusterIdentifiers = dBClusterIdentifiers
            self.dBInstanceIdentifiers = dBInstanceIdentifiers
            self.dBProxyName = dBProxyName
            self.targetGroupName = targetGroupName
        }

        private enum CodingKeys: String, CodingKey {
            case dBClusterIdentifiers = "DBClusterIdentifiers"
            case dBInstanceIdentifiers = "DBInstanceIdentifiers"
            case dBProxyName = "DBProxyName"
            case targetGroupName = "TargetGroupName"
        }
    }

    public struct RegisterDBProxyTargetsResponse: AWSDecodableShape {
        /// One or more DBProxyTarget objects that are created when you register targets with a target group.
        @OptionalCustomCoding<StandardArrayCoder>
        public var dBProxyTargets: [DBProxyTarget]?

        public init(dBProxyTargets: [DBProxyTarget]? = nil) {
            self.dBProxyTargets = dBProxyTargets
        }

        private enum CodingKeys: String, CodingKey {
            case dBProxyTargets = "DBProxyTargets"
        }
    }

    public struct RemoveFromGlobalClusterMessage: AWSEncodableShape {
        ///  The Amazon Resource Name (ARN) identifying the cluster that was detached from the Aurora global database cluster.
        public let dbClusterIdentifier: String?
        ///  The cluster identifier to detach from the Aurora global database cluster.
        public let globalClusterIdentifier: String?

        public init(dbClusterIdentifier: String? = nil, globalClusterIdentifier: String? = nil) {
            self.dbClusterIdentifier = dbClusterIdentifier
            self.globalClusterIdentifier = globalClusterIdentifier
        }

        private enum CodingKeys: String, CodingKey {
            case dbClusterIdentifier = "DbClusterIdentifier"
            case globalClusterIdentifier = "GlobalClusterIdentifier"
        }
    }

    public struct RemoveFromGlobalClusterResult: AWSDecodableShape {
        public let globalCluster: GlobalCluster?

        public init(globalCluster: GlobalCluster? = nil) {
            self.globalCluster = globalCluster
        }

        private enum CodingKeys: String, CodingKey {
            case globalCluster = "GlobalCluster"
        }
    }

    public struct RemoveRoleFromDBClusterMessage: AWSEncodableShape {
        /// The name of the DB cluster to disassociate the IAM role from.
        public let dBClusterIdentifier: String
        /// The name of the feature for the DB cluster that the IAM role is to be disassociated from. For the list of supported feature names, see DBEngineVersion.
        public let featureName: String?
        /// The Amazon Resource Name (ARN) of the IAM role to disassociate from the Aurora DB cluster, for example arn:aws:iam::123456789012:role/AuroraAccessRole.
        public let roleArn: String

        public init(dBClusterIdentifier: String, featureName: String? = nil, roleArn: String) {
            self.dBClusterIdentifier = dBClusterIdentifier
            self.featureName = featureName
            self.roleArn = roleArn
        }

        private enum CodingKeys: String, CodingKey {
            case dBClusterIdentifier = "DBClusterIdentifier"
            case featureName = "FeatureName"
            case roleArn = "RoleArn"
        }
    }

    public struct RemoveRoleFromDBInstanceMessage: AWSEncodableShape {
        /// The name of the DB instance to disassociate the IAM role from.
        public let dBInstanceIdentifier: String
        /// The name of the feature for the DB instance that the IAM role is to be disassociated from. For the list of supported feature names, see DBEngineVersion.
        public let featureName: String
        /// The Amazon Resource Name (ARN) of the IAM role to disassociate from the DB instance, for example, arn:aws:iam::123456789012:role/AccessRole.
        public let roleArn: String

        public init(dBInstanceIdentifier: String, featureName: String, roleArn: String) {
            self.dBInstanceIdentifier = dBInstanceIdentifier
            self.featureName = featureName
            self.roleArn = roleArn
        }

        private enum CodingKeys: String, CodingKey {
            case dBInstanceIdentifier = "DBInstanceIdentifier"
            case featureName = "FeatureName"
            case roleArn = "RoleArn"
        }
    }

    public struct RemoveSourceIdentifierFromSubscriptionMessage: AWSEncodableShape {
        ///  The source identifier to be removed from the subscription, such as the DB instance identifier for a DB instance or the name of a security group.
        public let sourceIdentifier: String
        /// The name of the RDS event notification subscription you want to remove a source identifier from.
        public let subscriptionName: String

        public init(sourceIdentifier: String, subscriptionName: String) {
            self.sourceIdentifier = sourceIdentifier
            self.subscriptionName = subscriptionName
        }

        private enum CodingKeys: String, CodingKey {
            case sourceIdentifier = "SourceIdentifier"
            case subscriptionName = "SubscriptionName"
        }
    }

    public struct RemoveSourceIdentifierFromSubscriptionResult: AWSDecodableShape {
        public let eventSubscription: EventSubscription?

        public init(eventSubscription: EventSubscription? = nil) {
            self.eventSubscription = eventSubscription
        }

        private enum CodingKeys: String, CodingKey {
            case eventSubscription = "EventSubscription"
        }
    }

    public struct RemoveTagsFromResourceMessage: AWSEncodableShape {
        /// The Amazon RDS resource that the tags are removed from. This value is an Amazon Resource Name (ARN). For information about creating an ARN, see  Constructing an ARN for Amazon RDS in the Amazon RDS User Guide.
        public let resourceName: String
        /// The tag key (name) of the tag to be removed.
        @CustomCoding<StandardArrayCoder>
        public var tagKeys: [String]

        public init(resourceName: String, tagKeys: [String]) {
            self.resourceName = resourceName
            self.tagKeys = tagKeys
        }

        private enum CodingKeys: String, CodingKey {
            case resourceName = "ResourceName"
            case tagKeys = "TagKeys"
        }
    }

    public struct ReservedDBInstance: AWSDecodableShape {
        public struct _RecurringChargesEncoding: ArrayCoderProperties { public static let member = "RecurringCharge" }

        /// The currency code for the reserved DB instance.
        public let currencyCode: String?
        /// The DB instance class for the reserved DB instance.
        public let dBInstanceClass: String?
        /// The number of reserved DB instances.
        public let dBInstanceCount: Int?
        /// The duration of the reservation in seconds.
        public let duration: Int?
        /// The fixed price charged for this reserved DB instance.
        public let fixedPrice: Double?
        /// The unique identifier for the lease associated with the reserved DB instance.  Amazon Web Services Support might request the lease ID for an issue related to a reserved DB instance.
        public let leaseId: String?
        /// Indicates if the reservation applies to Multi-AZ deployments.
        public let multiAZ: Bool?
        /// The offering type of this reserved DB instance.
        public let offeringType: String?
        /// The description of the reserved DB instance.
        public let productDescription: String?
        /// The recurring price charged to run this reserved DB instance.
        @OptionalCustomCoding<ArrayCoder<_RecurringChargesEncoding, RecurringCharge>>
        public var recurringCharges: [RecurringCharge]?
        /// The Amazon Resource Name (ARN) for the reserved DB instance.
        public let reservedDBInstanceArn: String?
        /// The unique identifier for the reservation.
        public let reservedDBInstanceId: String?
        /// The offering identifier.
        public let reservedDBInstancesOfferingId: String?
        /// The time the reservation started.
        public let startTime: Date?
        /// The state of the reserved DB instance.
        public let state: String?
        /// The hourly price charged for this reserved DB instance.
        public let usagePrice: Double?

        public init(currencyCode: String? = nil, dBInstanceClass: String? = nil, dBInstanceCount: Int? = nil, duration: Int? = nil, fixedPrice: Double? = nil, leaseId: String? = nil, multiAZ: Bool? = nil, offeringType: String? = nil, productDescription: String? = nil, recurringCharges: [RecurringCharge]? = nil, reservedDBInstanceArn: String? = nil, reservedDBInstanceId: String? = nil, reservedDBInstancesOfferingId: String? = nil, startTime: Date? = nil, state: String? = nil, usagePrice: Double? = nil) {
            self.currencyCode = currencyCode
            self.dBInstanceClass = dBInstanceClass
            self.dBInstanceCount = dBInstanceCount
            self.duration = duration
            self.fixedPrice = fixedPrice
            self.leaseId = leaseId
            self.multiAZ = multiAZ
            self.offeringType = offeringType
            self.productDescription = productDescription
            self.recurringCharges = recurringCharges
            self.reservedDBInstanceArn = reservedDBInstanceArn
            self.reservedDBInstanceId = reservedDBInstanceId
            self.reservedDBInstancesOfferingId = reservedDBInstancesOfferingId
            self.startTime = startTime
            self.state = state
            self.usagePrice = usagePrice
        }

        private enum CodingKeys: String, CodingKey {
            case currencyCode = "CurrencyCode"
            case dBInstanceClass = "DBInstanceClass"
            case dBInstanceCount = "DBInstanceCount"
            case duration = "Duration"
            case fixedPrice = "FixedPrice"
            case leaseId = "LeaseId"
            case multiAZ = "MultiAZ"
            case offeringType = "OfferingType"
            case productDescription = "ProductDescription"
            case recurringCharges = "RecurringCharges"
            case reservedDBInstanceArn = "ReservedDBInstanceArn"
            case reservedDBInstanceId = "ReservedDBInstanceId"
            case reservedDBInstancesOfferingId = "ReservedDBInstancesOfferingId"
            case startTime = "StartTime"
            case state = "State"
            case usagePrice = "UsagePrice"
        }
    }

    public struct ReservedDBInstanceMessage: AWSDecodableShape {
        public struct _ReservedDBInstancesEncoding: ArrayCoderProperties { public static let member = "ReservedDBInstance" }

        ///  An optional pagination token provided by a previous request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by MaxRecords.
        public let marker: String?
        /// A list of reserved DB instances.
        @OptionalCustomCoding<ArrayCoder<_ReservedDBInstancesEncoding, ReservedDBInstance>>
        public var reservedDBInstances: [ReservedDBInstance]?

        public init(marker: String? = nil, reservedDBInstances: [ReservedDBInstance]? = nil) {
            self.marker = marker
            self.reservedDBInstances = reservedDBInstances
        }

        private enum CodingKeys: String, CodingKey {
            case marker = "Marker"
            case reservedDBInstances = "ReservedDBInstances"
        }
    }

    public struct ReservedDBInstancesOffering: AWSDecodableShape {
        public struct _RecurringChargesEncoding: ArrayCoderProperties { public static let member = "RecurringCharge" }

        /// The currency code for the reserved DB instance offering.
        public let currencyCode: String?
        /// The DB instance class for the reserved DB instance.
        public let dBInstanceClass: String?
        /// The duration of the offering in seconds.
        public let duration: Int?
        /// The fixed price charged for this offering.
        public let fixedPrice: Double?
        /// Indicates if the offering applies to Multi-AZ deployments.
        public let multiAZ: Bool?
        /// The offering type.
        public let offeringType: String?
        /// The database engine used by the offering.
        public let productDescription: String?
        /// The recurring price charged to run this reserved DB instance.
        @OptionalCustomCoding<ArrayCoder<_RecurringChargesEncoding, RecurringCharge>>
        public var recurringCharges: [RecurringCharge]?
        /// The offering identifier.
        public let reservedDBInstancesOfferingId: String?
        /// The hourly price charged for this offering.
        public let usagePrice: Double?

        public init(currencyCode: String? = nil, dBInstanceClass: String? = nil, duration: Int? = nil, fixedPrice: Double? = nil, multiAZ: Bool? = nil, offeringType: String? = nil, productDescription: String? = nil, recurringCharges: [RecurringCharge]? = nil, reservedDBInstancesOfferingId: String? = nil, usagePrice: Double? = nil) {
            self.currencyCode = currencyCode
            self.dBInstanceClass = dBInstanceClass
            self.duration = duration
            self.fixedPrice = fixedPrice
            self.multiAZ = multiAZ
            self.offeringType = offeringType
            self.productDescription = productDescription
            self.recurringCharges = recurringCharges
            self.reservedDBInstancesOfferingId = reservedDBInstancesOfferingId
            self.usagePrice = usagePrice
        }

        private enum CodingKeys: String, CodingKey {
            case currencyCode = "CurrencyCode"
            case dBInstanceClass = "DBInstanceClass"
            case duration = "Duration"
            case fixedPrice = "FixedPrice"
            case multiAZ = "MultiAZ"
            case offeringType = "OfferingType"
            case productDescription = "ProductDescription"
            case recurringCharges = "RecurringCharges"
            case reservedDBInstancesOfferingId = "ReservedDBInstancesOfferingId"
            case usagePrice = "UsagePrice"
        }
    }

    public struct ReservedDBInstancesOfferingMessage: AWSDecodableShape {
        public struct _ReservedDBInstancesOfferingsEncoding: ArrayCoderProperties { public static let member = "ReservedDBInstancesOffering" }

        ///  An optional pagination token provided by a previous request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by MaxRecords.
        public let marker: String?
        /// A list of reserved DB instance offerings.
        @OptionalCustomCoding<ArrayCoder<_ReservedDBInstancesOfferingsEncoding, ReservedDBInstancesOffering>>
        public var reservedDBInstancesOfferings: [ReservedDBInstancesOffering]?

        public init(marker: String? = nil, reservedDBInstancesOfferings: [ReservedDBInstancesOffering]? = nil) {
            self.marker = marker
            self.reservedDBInstancesOfferings = reservedDBInstancesOfferings
        }

        private enum CodingKeys: String, CodingKey {
            case marker = "Marker"
            case reservedDBInstancesOfferings = "ReservedDBInstancesOfferings"
        }
    }

    public struct ResetDBClusterParameterGroupMessage: AWSEncodableShape {
        public struct _ParametersEncoding: ArrayCoderProperties { public static let member = "Parameter" }

        /// The name of the DB cluster parameter group to reset.
        public let dBClusterParameterGroupName: String
        /// A list of parameter names in the DB cluster parameter group to reset to the default values. You can't use this parameter if the ResetAllParameters parameter is enabled.
        @OptionalCustomCoding<ArrayCoder<_ParametersEncoding, Parameter>>
        public var parameters: [Parameter]?
        /// A value that indicates whether to reset all parameters in the DB cluster parameter group to their default values. You can't use this parameter if there is a list of parameter names specified for the Parameters parameter.
        public let resetAllParameters: Bool?

        public init(dBClusterParameterGroupName: String, parameters: [Parameter]? = nil, resetAllParameters: Bool? = nil) {
            self.dBClusterParameterGroupName = dBClusterParameterGroupName
            self.parameters = parameters
            self.resetAllParameters = resetAllParameters
        }

        private enum CodingKeys: String, CodingKey {
            case dBClusterParameterGroupName = "DBClusterParameterGroupName"
            case parameters = "Parameters"
            case resetAllParameters = "ResetAllParameters"
        }
    }

    public struct ResetDBParameterGroupMessage: AWSEncodableShape {
        public struct _ParametersEncoding: ArrayCoderProperties { public static let member = "Parameter" }

        /// The name of the DB parameter group. Constraints:   Must match the name of an existing DBParameterGroup.
        public let dBParameterGroupName: String
        /// To reset the entire DB parameter group, specify the DBParameterGroup name and ResetAllParameters parameters. To reset specific parameters, provide a list of the following: ParameterName and ApplyMethod. A maximum of 20 parameters can be modified in a single request.  MySQL  Valid Values (for Apply method): immediate | pending-reboot  You can use the immediate value with dynamic parameters only. You can use the pending-reboot value for both dynamic and static parameters, and changes are applied when DB instance reboots.  MariaDB  Valid Values (for Apply method): immediate | pending-reboot  You can use the immediate value with dynamic parameters only. You can use the pending-reboot value for both dynamic and static parameters, and changes are applied when DB instance reboots.  Oracle  Valid Values (for Apply method): pending-reboot
        @OptionalCustomCoding<ArrayCoder<_ParametersEncoding, Parameter>>
        public var parameters: [Parameter]?
        ///  A value that indicates whether to reset all parameters in the DB parameter group to default values. By default, all parameters in the DB parameter group are reset to default values.
        public let resetAllParameters: Bool?

        public init(dBParameterGroupName: String, parameters: [Parameter]? = nil, resetAllParameters: Bool? = nil) {
            self.dBParameterGroupName = dBParameterGroupName
            self.parameters = parameters
            self.resetAllParameters = resetAllParameters
        }

        private enum CodingKeys: String, CodingKey {
            case dBParameterGroupName = "DBParameterGroupName"
            case parameters = "Parameters"
            case resetAllParameters = "ResetAllParameters"
        }
    }

    public struct ResourcePendingMaintenanceActions: AWSDecodableShape {
        public struct _PendingMaintenanceActionDetailsEncoding: ArrayCoderProperties { public static let member = "PendingMaintenanceAction" }

        /// A list that provides details about the pending maintenance actions for the resource.
        @OptionalCustomCoding<ArrayCoder<_PendingMaintenanceActionDetailsEncoding, PendingMaintenanceAction>>
        public var pendingMaintenanceActionDetails: [PendingMaintenanceAction]?
        /// The ARN of the resource that has pending maintenance actions.
        public let resourceIdentifier: String?

        public init(pendingMaintenanceActionDetails: [PendingMaintenanceAction]? = nil, resourceIdentifier: String? = nil) {
            self.pendingMaintenanceActionDetails = pendingMaintenanceActionDetails
            self.resourceIdentifier = resourceIdentifier
        }

        private enum CodingKeys: String, CodingKey {
            case pendingMaintenanceActionDetails = "PendingMaintenanceActionDetails"
            case resourceIdentifier = "ResourceIdentifier"
        }
    }

    public struct RestoreDBClusterFromS3Message: AWSEncodableShape {
        public struct _AvailabilityZonesEncoding: ArrayCoderProperties { public static let member = "AvailabilityZone" }
        public struct _TagsEncoding: ArrayCoderProperties { public static let member = "Tag" }
        public struct _VpcSecurityGroupIdsEncoding: ArrayCoderProperties { public static let member = "VpcSecurityGroupId" }

        /// A list of Availability Zones (AZs) where instances in the restored DB cluster can be created.
        @OptionalCustomCoding<ArrayCoder<_AvailabilityZonesEncoding, String>>
        public var availabilityZones: [String]?
        /// The target backtrack window, in seconds. To disable backtracking, set this value to 0.  Currently, Backtrack is only supported for Aurora MySQL DB clusters.  Default: 0 Constraints:   If specified, this value must be set to a number from 0 to 259,200 (72 hours).
        public let backtrackWindow: Int64?
        /// The number of days for which automated backups of the restored DB cluster are retained. You must specify a minimum value of 1. Default: 1 Constraints:   Must be a value from 1 to 35
        public let backupRetentionPeriod: Int?
        /// A value that indicates that the restored DB cluster should be associated with the specified CharacterSet.
        public let characterSetName: String?
        /// A value that indicates whether to copy all tags from the restored DB cluster to snapshots of the restored DB cluster. The default is not to copy them.
        public let copyTagsToSnapshot: Bool?
        /// The database name for the restored DB cluster.
        public let databaseName: String?
        /// The name of the DB cluster to create from the source data in the Amazon S3 bucket. This parameter isn't case-sensitive. Constraints:   Must contain from 1 to 63 letters, numbers, or hyphens.   First character must be a letter.   Can't end with a hyphen or contain two consecutive hyphens.   Example: my-cluster1
        public let dBClusterIdentifier: String
        /// The name of the DB cluster parameter group to associate with the restored DB cluster. If this argument is omitted, default.aurora5.6 is used.  Constraints:   If supplied, must match the name of an existing DBClusterParameterGroup.
        public let dBClusterParameterGroupName: String?
        /// A DB subnet group to associate with the restored DB cluster. Constraints: If supplied, must match the name of an existing DBSubnetGroup.  Example: mySubnetgroup
        public let dBSubnetGroupName: String?
        /// A value that indicates whether the DB cluster has deletion protection enabled. The database can't be deleted when deletion protection is enabled. By default, deletion protection is disabled.
        public let deletionProtection: Bool?
        /// Specify the Active Directory directory ID to restore the DB cluster in. The domain must be created prior to this operation.   For Amazon Aurora DB clusters, Amazon RDS can use Kerberos Authentication to authenticate users that connect to the DB cluster. For more information, see Kerberos Authentication in the Amazon Aurora User Guide.
        public let domain: String?
        /// Specify the name of the IAM role to be used when making API calls to the Directory Service.
        public let domainIAMRoleName: String?
        /// The list of logs that the restored DB cluster is to export to CloudWatch Logs. The values in the list depend on the DB engine being used. For more information, see Publishing Database Logs to Amazon CloudWatch Logs in the Amazon Aurora User Guide.
        @OptionalCustomCoding<StandardArrayCoder>
        public var enableCloudwatchLogsExports: [String]?
        /// A value that indicates whether to enable mapping of Amazon Web Services Identity and Access Management (IAM) accounts to database accounts. By default, mapping is disabled. For more information, see  IAM Database Authentication in the Amazon Aurora User Guide.
        public let enableIAMDatabaseAuthentication: Bool?
        /// The name of the database engine to be used for this DB cluster. Valid Values: aurora (for MySQL 5.6-compatible Aurora), aurora-mysql (for MySQL 5.7-compatible Aurora), and aurora-postgresql
        public let engine: String
        /// The version number of the database engine to use. To list all of the available engine versions for aurora (for MySQL 5.6-compatible Aurora), use the following command:  aws rds describe-db-engine-versions --engine aurora --query "DBEngineVersions[].EngineVersion"  To list all of the available engine versions for aurora-mysql (for MySQL 5.7-compatible Aurora), use the following command:  aws rds describe-db-engine-versions --engine aurora-mysql --query "DBEngineVersions[].EngineVersion"  To list all of the available engine versions for aurora-postgresql, use the following command:  aws rds describe-db-engine-versions --engine aurora-postgresql --query "DBEngineVersions[].EngineVersion"   Aurora MySQL  Example: 5.6.10a, 5.6.mysql_aurora.1.19.2, 5.7.12, 5.7.mysql_aurora.2.04.5   Aurora PostgreSQL  Example: 9.6.3, 10.7
        public let engineVersion: String?
        /// The Amazon Web Services KMS key identifier for an encrypted DB cluster. The Amazon Web Services KMS key identifier is the key ARN, key ID, alias ARN, or alias name for the Amazon Web Services KMS customer master key (CMK). To use a CMK in a different Amazon Web Services account, specify the key ARN or alias ARN. If the StorageEncrypted parameter is enabled, and you do not specify a value for the KmsKeyId parameter, then Amazon RDS will use your default CMK. There is a default CMK for your Amazon Web Services account. Your Amazon Web Services account has a different default CMK for each Amazon Web Services Region.
        public let kmsKeyId: String?
        /// The name of the master user for the restored DB cluster. Constraints:   Must be 1 to 16 letters or numbers.   First character must be a letter.   Can't be a reserved word for the chosen database engine.
        public let masterUsername: String
        /// The password for the master database user. This password can contain any printable ASCII character except "/", """, or "@". Constraints: Must contain from 8 to 41 characters.
        public let masterUserPassword: String
        /// A value that indicates that the restored DB cluster should be associated with the specified option group. Permanent options can't be removed from an option group. An option group can't be removed from a DB cluster once it is associated with a DB cluster.
        public let optionGroupName: String?
        /// The port number on which the instances in the restored DB cluster accept connections.  Default: 3306
        public let port: Int?
        /// The daily time range during which automated backups are created if automated backups are enabled using the BackupRetentionPeriod parameter.  The default is a 30-minute window selected at random from an 8-hour block of time for each Amazon Web Services Region. To view the time blocks available, see  Backup window in the Amazon Aurora User Guide.  Constraints:   Must be in the format hh24:mi-hh24:mi.   Must be in Universal Coordinated Time (UTC).   Must not conflict with the preferred maintenance window.   Must be at least 30 minutes.
        public let preferredBackupWindow: String?
        /// The weekly time range during which system maintenance can occur, in Universal Coordinated Time (UTC). Format: ddd:hh24:mi-ddd:hh24:mi  The default is a 30-minute window selected at random from an 8-hour block of time for each Amazon Web Services Region, occurring on a random day of the week. To see the time blocks available, see  Adjusting the Preferred Maintenance Window in the Amazon Aurora User Guide.  Valid Days: Mon, Tue, Wed, Thu, Fri, Sat, Sun. Constraints: Minimum 30-minute window.
        public let preferredMaintenanceWindow: String?
        /// The name of the Amazon S3 bucket that contains the data used to create the Amazon Aurora DB cluster.
        public let s3BucketName: String
        /// The Amazon Resource Name (ARN) of the Amazon Web Services Identity and Access Management (IAM) role that authorizes Amazon RDS to access the Amazon S3 bucket on your behalf.
        public let s3IngestionRoleArn: String
        /// The prefix for all of the file names that contain the data used to create the Amazon Aurora DB cluster. If you do not specify a SourceS3Prefix value, then the Amazon Aurora DB cluster is created by using all of the files in the Amazon S3 bucket.
        public let s3Prefix: String?
        /// The identifier for the database engine that was backed up to create the files stored in the Amazon S3 bucket.  Valid values: mysql
        public let sourceEngine: String
        /// The version of the database that the backup files were created from. MySQL versions 5.5, 5.6, and 5.7 are supported.  Example: 5.6.40, 5.7.28
        public let sourceEngineVersion: String
        /// A value that indicates whether the restored DB cluster is encrypted.
        public let storageEncrypted: Bool?
        @OptionalCustomCoding<ArrayCoder<_TagsEncoding, Tag>>
        public var tags: [Tag]?
        /// A list of EC2 VPC security groups to associate with the restored DB cluster.
        @OptionalCustomCoding<ArrayCoder<_VpcSecurityGroupIdsEncoding, String>>
        public var vpcSecurityGroupIds: [String]?

        public init(availabilityZones: [String]? = nil, backtrackWindow: Int64? = nil, backupRetentionPeriod: Int? = nil, characterSetName: String? = nil, copyTagsToSnapshot: Bool? = nil, databaseName: String? = nil, dBClusterIdentifier: String, dBClusterParameterGroupName: String? = nil, dBSubnetGroupName: String? = nil, deletionProtection: Bool? = nil, domain: String? = nil, domainIAMRoleName: String? = nil, enableCloudwatchLogsExports: [String]? = nil, enableIAMDatabaseAuthentication: Bool? = nil, engine: String, engineVersion: String? = nil, kmsKeyId: String? = nil, masterUsername: String, masterUserPassword: String, optionGroupName: String? = nil, port: Int? = nil, preferredBackupWindow: String? = nil, preferredMaintenanceWindow: String? = nil, s3BucketName: String, s3IngestionRoleArn: String, s3Prefix: String? = nil, sourceEngine: String, sourceEngineVersion: String, storageEncrypted: Bool? = nil, tags: [Tag]? = nil, vpcSecurityGroupIds: [String]? = nil) {
            self.availabilityZones = availabilityZones
            self.backtrackWindow = backtrackWindow
            self.backupRetentionPeriod = backupRetentionPeriod
            self.characterSetName = characterSetName
            self.copyTagsToSnapshot = copyTagsToSnapshot
            self.databaseName = databaseName
            self.dBClusterIdentifier = dBClusterIdentifier
            self.dBClusterParameterGroupName = dBClusterParameterGroupName
            self.dBSubnetGroupName = dBSubnetGroupName
            self.deletionProtection = deletionProtection
            self.domain = domain
            self.domainIAMRoleName = domainIAMRoleName
            self.enableCloudwatchLogsExports = enableCloudwatchLogsExports
            self.enableIAMDatabaseAuthentication = enableIAMDatabaseAuthentication
            self.engine = engine
            self.engineVersion = engineVersion
            self.kmsKeyId = kmsKeyId
            self.masterUsername = masterUsername
            self.masterUserPassword = masterUserPassword
            self.optionGroupName = optionGroupName
            self.port = port
            self.preferredBackupWindow = preferredBackupWindow
            self.preferredMaintenanceWindow = preferredMaintenanceWindow
            self.s3BucketName = s3BucketName
            self.s3IngestionRoleArn = s3IngestionRoleArn
            self.s3Prefix = s3Prefix
            self.sourceEngine = sourceEngine
            self.sourceEngineVersion = sourceEngineVersion
            self.storageEncrypted = storageEncrypted
            self.tags = tags
            self.vpcSecurityGroupIds = vpcSecurityGroupIds
        }

        private enum CodingKeys: String, CodingKey {
            case availabilityZones = "AvailabilityZones"
            case backtrackWindow = "BacktrackWindow"
            case backupRetentionPeriod = "BackupRetentionPeriod"
            case characterSetName = "CharacterSetName"
            case copyTagsToSnapshot = "CopyTagsToSnapshot"
            case databaseName = "DatabaseName"
            case dBClusterIdentifier = "DBClusterIdentifier"
            case dBClusterParameterGroupName = "DBClusterParameterGroupName"
            case dBSubnetGroupName = "DBSubnetGroupName"
            case deletionProtection = "DeletionProtection"
            case domain = "Domain"
            case domainIAMRoleName = "DomainIAMRoleName"
            case enableCloudwatchLogsExports = "EnableCloudwatchLogsExports"
            case enableIAMDatabaseAuthentication = "EnableIAMDatabaseAuthentication"
            case engine = "Engine"
            case engineVersion = "EngineVersion"
            case kmsKeyId = "KmsKeyId"
            case masterUsername = "MasterUsername"
            case masterUserPassword = "MasterUserPassword"
            case optionGroupName = "OptionGroupName"
            case port = "Port"
            case preferredBackupWindow = "PreferredBackupWindow"
            case preferredMaintenanceWindow = "PreferredMaintenanceWindow"
            case s3BucketName = "S3BucketName"
            case s3IngestionRoleArn = "S3IngestionRoleArn"
            case s3Prefix = "S3Prefix"
            case sourceEngine = "SourceEngine"
            case sourceEngineVersion = "SourceEngineVersion"
            case storageEncrypted = "StorageEncrypted"
            case tags = "Tags"
            case vpcSecurityGroupIds = "VpcSecurityGroupIds"
        }
    }

    public struct RestoreDBClusterFromS3Result: AWSDecodableShape {
        public let dBCluster: DBCluster?

        public init(dBCluster: DBCluster? = nil) {
            self.dBCluster = dBCluster
        }

        private enum CodingKeys: String, CodingKey {
            case dBCluster = "DBCluster"
        }
    }

    public struct RestoreDBClusterFromSnapshotMessage: AWSEncodableShape {
        public struct _AvailabilityZonesEncoding: ArrayCoderProperties { public static let member = "AvailabilityZone" }
        public struct _TagsEncoding: ArrayCoderProperties { public static let member = "Tag" }
        public struct _VpcSecurityGroupIdsEncoding: ArrayCoderProperties { public static let member = "VpcSecurityGroupId" }

        /// Provides the list of Availability Zones (AZs) where instances in the restored DB cluster can be created.
        @OptionalCustomCoding<ArrayCoder<_AvailabilityZonesEncoding, String>>
        public var availabilityZones: [String]?
        /// The target backtrack window, in seconds. To disable backtracking, set this value to 0.  Currently, Backtrack is only supported for Aurora MySQL DB clusters.  Default: 0 Constraints:   If specified, this value must be set to a number from 0 to 259,200 (72 hours).
        public let backtrackWindow: Int64?
        /// A value that indicates whether to copy all tags from the restored DB cluster to snapshots of the restored DB cluster. The default is not to copy them.
        public let copyTagsToSnapshot: Bool?
        /// The database name for the restored DB cluster.
        public let databaseName: String?
        /// The name of the DB cluster to create from the DB snapshot or DB cluster snapshot. This parameter isn't case-sensitive. Constraints:   Must contain from 1 to 63 letters, numbers, or hyphens   First character must be a letter   Can't end with a hyphen or contain two consecutive hyphens   Example: my-snapshot-id
        public let dBClusterIdentifier: String
        /// The name of the DB cluster parameter group to associate with this DB cluster. If this argument is omitted, the default DB cluster parameter group for the specified engine is used. Constraints:   If supplied, must match the name of an existing default DB cluster parameter group.   Must be 1 to 255 letters, numbers, or hyphens.   First character must be a letter.   Can't end with a hyphen or contain two consecutive hyphens.
        public let dBClusterParameterGroupName: String?
        /// The name of the DB subnet group to use for the new DB cluster. Constraints: If supplied, must match the name of an existing DB subnet group. Example: mySubnetgroup
        public let dBSubnetGroupName: String?
        /// A value that indicates whether the DB cluster has deletion protection enabled. The database can't be deleted when deletion protection is enabled. By default, deletion protection is disabled.
        public let deletionProtection: Bool?
        /// Specify the Active Directory directory ID to restore the DB cluster in. The domain must be created prior to this operation. Currently, only MySQL, Microsoft SQL Server, Oracle, and PostgreSQL DB instances can be created in an Active Directory Domain. For more information, see  Kerberos Authentication in the Amazon RDS User Guide.
        public let domain: String?
        /// Specify the name of the IAM role to be used when making API calls to the Directory Service.
        public let domainIAMRoleName: String?
        /// The list of logs that the restored DB cluster is to export to Amazon CloudWatch Logs. The values in the list depend on the DB engine being used. For more information, see Publishing Database Logs to Amazon CloudWatch Logs  in the Amazon Aurora User Guide.
        @OptionalCustomCoding<StandardArrayCoder>
        public var enableCloudwatchLogsExports: [String]?
        /// A value that indicates whether to enable mapping of Amazon Web Services Identity and Access Management (IAM) accounts to database accounts. By default, mapping is disabled. For more information, see  IAM Database Authentication in the Amazon Aurora User Guide.
        public let enableIAMDatabaseAuthentication: Bool?
        /// The database engine to use for the new DB cluster. Default: The same as source Constraint: Must be compatible with the engine of the source
        public let engine: String
        /// The DB engine mode of the DB cluster, either provisioned, serverless, parallelquery, global, or multimaster. For more information, see  CreateDBCluster.
        public let engineMode: String?
        /// The version of the database engine to use for the new DB cluster. To list all of the available engine versions for aurora (for MySQL 5.6-compatible Aurora), use the following command:  aws rds describe-db-engine-versions --engine aurora --query "DBEngineVersions[].EngineVersion"  To list all of the available engine versions for aurora-mysql (for MySQL 5.7-compatible Aurora), use the following command:  aws rds describe-db-engine-versions --engine aurora-mysql --query "DBEngineVersions[].EngineVersion"  To list all of the available engine versions for aurora-postgresql, use the following command:  aws rds describe-db-engine-versions --engine aurora-postgresql --query "DBEngineVersions[].EngineVersion"   If you aren't using the default engine version, then you must specify the engine version.   Aurora MySQL  Example: 5.6.10a, 5.6.mysql_aurora.1.19.2, 5.7.12, 5.7.mysql_aurora.2.04.5   Aurora PostgreSQL  Example: 9.6.3, 10.7
        public let engineVersion: String?
        /// The Amazon Web Services KMS key identifier to use when restoring an encrypted DB cluster from a DB snapshot or DB cluster snapshot. The Amazon Web Services KMS key identifier is the key ARN, key ID, alias ARN, or alias name for the Amazon Web Services KMS customer master key (CMK). To use a CMK in a different Amazon Web Services account, specify the key ARN or alias ARN. When you don't specify a value for the KmsKeyId parameter, then the following occurs:   If the DB snapshot or DB cluster snapshot in SnapshotIdentifier is encrypted, then the restored DB cluster is encrypted using the Amazon Web Services KMS CMK that was used to encrypt the DB snapshot or DB cluster snapshot.   If the DB snapshot or DB cluster snapshot in SnapshotIdentifier isn't encrypted, then the restored DB cluster isn't encrypted.
        public let kmsKeyId: String?
        /// The name of the option group to use for the restored DB cluster.
        public let optionGroupName: String?
        /// The port number on which the new DB cluster accepts connections. Constraints: This value must be 1150-65535  Default: The same port as the original DB cluster.
        public let port: Int?
        /// For DB clusters in serverless DB engine mode, the scaling properties of the DB cluster.
        public let scalingConfiguration: ScalingConfiguration?
        /// The identifier for the DB snapshot or DB cluster snapshot to restore from. You can use either the name or the Amazon Resource Name (ARN) to specify a DB cluster snapshot. However, you can use only the ARN to specify a DB snapshot. Constraints:   Must match the identifier of an existing Snapshot.
        public let snapshotIdentifier: String
        /// The tags to be assigned to the restored DB cluster.
        @OptionalCustomCoding<ArrayCoder<_TagsEncoding, Tag>>
        public var tags: [Tag]?
        /// A list of VPC security groups that the new DB cluster will belong to.
        @OptionalCustomCoding<ArrayCoder<_VpcSecurityGroupIdsEncoding, String>>
        public var vpcSecurityGroupIds: [String]?

        public init(availabilityZones: [String]? = nil, backtrackWindow: Int64? = nil, copyTagsToSnapshot: Bool? = nil, databaseName: String? = nil, dBClusterIdentifier: String, dBClusterParameterGroupName: String? = nil, dBSubnetGroupName: String? = nil, deletionProtection: Bool? = nil, domain: String? = nil, domainIAMRoleName: String? = nil, enableCloudwatchLogsExports: [String]? = nil, enableIAMDatabaseAuthentication: Bool? = nil, engine: String, engineMode: String? = nil, engineVersion: String? = nil, kmsKeyId: String? = nil, optionGroupName: String? = nil, port: Int? = nil, scalingConfiguration: ScalingConfiguration? = nil, snapshotIdentifier: String, tags: [Tag]? = nil, vpcSecurityGroupIds: [String]? = nil) {
            self.availabilityZones = availabilityZones
            self.backtrackWindow = backtrackWindow
            self.copyTagsToSnapshot = copyTagsToSnapshot
            self.databaseName = databaseName
            self.dBClusterIdentifier = dBClusterIdentifier
            self.dBClusterParameterGroupName = dBClusterParameterGroupName
            self.dBSubnetGroupName = dBSubnetGroupName
            self.deletionProtection = deletionProtection
            self.domain = domain
            self.domainIAMRoleName = domainIAMRoleName
            self.enableCloudwatchLogsExports = enableCloudwatchLogsExports
            self.enableIAMDatabaseAuthentication = enableIAMDatabaseAuthentication
            self.engine = engine
            self.engineMode = engineMode
            self.engineVersion = engineVersion
            self.kmsKeyId = kmsKeyId
            self.optionGroupName = optionGroupName
            self.port = port
            self.scalingConfiguration = scalingConfiguration
            self.snapshotIdentifier = snapshotIdentifier
            self.tags = tags
            self.vpcSecurityGroupIds = vpcSecurityGroupIds
        }

        private enum CodingKeys: String, CodingKey {
            case availabilityZones = "AvailabilityZones"
            case backtrackWindow = "BacktrackWindow"
            case copyTagsToSnapshot = "CopyTagsToSnapshot"
            case databaseName = "DatabaseName"
            case dBClusterIdentifier = "DBClusterIdentifier"
            case dBClusterParameterGroupName = "DBClusterParameterGroupName"
            case dBSubnetGroupName = "DBSubnetGroupName"
            case deletionProtection = "DeletionProtection"
            case domain = "Domain"
            case domainIAMRoleName = "DomainIAMRoleName"
            case enableCloudwatchLogsExports = "EnableCloudwatchLogsExports"
            case enableIAMDatabaseAuthentication = "EnableIAMDatabaseAuthentication"
            case engine = "Engine"
            case engineMode = "EngineMode"
            case engineVersion = "EngineVersion"
            case kmsKeyId = "KmsKeyId"
            case optionGroupName = "OptionGroupName"
            case port = "Port"
            case scalingConfiguration = "ScalingConfiguration"
            case snapshotIdentifier = "SnapshotIdentifier"
            case tags = "Tags"
            case vpcSecurityGroupIds = "VpcSecurityGroupIds"
        }
    }

    public struct RestoreDBClusterFromSnapshotResult: AWSDecodableShape {
        public let dBCluster: DBCluster?

        public init(dBCluster: DBCluster? = nil) {
            self.dBCluster = dBCluster
        }

        private enum CodingKeys: String, CodingKey {
            case dBCluster = "DBCluster"
        }
    }

    public struct RestoreDBClusterToPointInTimeMessage: AWSEncodableShape {
        public struct _TagsEncoding: ArrayCoderProperties { public static let member = "Tag" }
        public struct _VpcSecurityGroupIdsEncoding: ArrayCoderProperties { public static let member = "VpcSecurityGroupId" }

        /// The target backtrack window, in seconds. To disable backtracking, set this value to 0.  Currently, Backtrack is only supported for Aurora MySQL DB clusters.  Default: 0 Constraints:   If specified, this value must be set to a number from 0 to 259,200 (72 hours).
        public let backtrackWindow: Int64?
        /// A value that indicates whether to copy all tags from the restored DB cluster to snapshots of the restored DB cluster. The default is not to copy them.
        public let copyTagsToSnapshot: Bool?
        /// The name of the new DB cluster to be created. Constraints:   Must contain from 1 to 63 letters, numbers, or hyphens   First character must be a letter   Can't end with a hyphen or contain two consecutive hyphens
        public let dBClusterIdentifier: String
        /// The name of the DB cluster parameter group to associate with this DB cluster. If this argument is omitted, the default DB cluster parameter group for the specified engine is used. Constraints:   If supplied, must match the name of an existing DB cluster parameter group.   Must be 1 to 255 letters, numbers, or hyphens.   First character must be a letter.   Can't end with a hyphen or contain two consecutive hyphens.
        public let dBClusterParameterGroupName: String?
        /// The DB subnet group name to use for the new DB cluster. Constraints: If supplied, must match the name of an existing DBSubnetGroup. Example: mySubnetgroup
        public let dBSubnetGroupName: String?
        /// A value that indicates whether the DB cluster has deletion protection enabled. The database can't be deleted when deletion protection is enabled. By default, deletion protection is disabled.
        public let deletionProtection: Bool?
        /// Specify the Active Directory directory ID to restore the DB cluster in. The domain must be created prior to this operation.   For Amazon Aurora DB clusters, Amazon RDS can use Kerberos Authentication to authenticate users that connect to the DB cluster. For more information, see Kerberos Authentication in the Amazon Aurora User Guide.
        public let domain: String?
        /// Specify the name of the IAM role to be used when making API calls to the Directory Service.
        public let domainIAMRoleName: String?
        /// The list of logs that the restored DB cluster is to export to CloudWatch Logs. The values in the list depend on the DB engine being used. For more information, see Publishing Database Logs to Amazon CloudWatch Logs in the Amazon Aurora User Guide.
        @OptionalCustomCoding<StandardArrayCoder>
        public var enableCloudwatchLogsExports: [String]?
        /// A value that indicates whether to enable mapping of Amazon Web Services Identity and Access Management (IAM) accounts to database accounts. By default, mapping is disabled. For more information, see  IAM Database Authentication in the Amazon Aurora User Guide.
        public let enableIAMDatabaseAuthentication: Bool?
        /// The engine mode of the new cluster. Specify provisioned or serverless, depending on the type of the cluster you are creating. You can create an Aurora Serverless clone from a provisioned cluster, or a provisioned clone from an Aurora Serverless cluster. To create a clone that is an Aurora Serverless cluster, the original cluster must be an Aurora Serverless cluster or an encrypted provisioned cluster.
        public let engineMode: String?
        /// The Amazon Web Services KMS key identifier to use when restoring an encrypted DB cluster from an encrypted DB cluster. The Amazon Web Services KMS key identifier is the key ARN, key ID, alias ARN, or alias name for the Amazon Web Services KMS customer master key (CMK). To use a CMK in a different Amazon Web Services account, specify the key ARN or alias ARN. You can restore to a new DB cluster and encrypt the new DB cluster with a Amazon Web Services KMS CMK that is different than the Amazon Web Services KMS key used to encrypt the source DB cluster. The new DB cluster is encrypted with the Amazon Web Services KMS CMK identified by the KmsKeyId parameter. If you don't specify a value for the KmsKeyId parameter, then the following occurs:   If the DB cluster is encrypted, then the restored DB cluster is encrypted using the Amazon Web Services KMS CMK that was used to encrypt the source DB cluster.   If the DB cluster isn't encrypted, then the restored DB cluster isn't encrypted.   If DBClusterIdentifier refers to a DB cluster that isn't encrypted, then the restore request is rejected.
        public let kmsKeyId: String?
        /// The name of the option group for the new DB cluster.
        public let optionGroupName: String?
        /// The port number on which the new DB cluster accepts connections. Constraints: A value from 1150-65535.  Default: The default port for the engine.
        public let port: Int?
        /// The date and time to restore the DB cluster to. Valid Values: Value must be a time in Universal Coordinated Time (UTC) format Constraints:   Must be before the latest restorable time for the DB instance   Must be specified if UseLatestRestorableTime parameter isn't provided   Can't be specified if the UseLatestRestorableTime parameter is enabled   Can't be specified if the RestoreType parameter is copy-on-write    Example: 2015-03-07T23:45:00Z
        public let restoreToTime: Date?
        /// The type of restore to be performed. You can specify one of the following values:    full-copy - The new DB cluster is restored as a full copy of the source DB cluster.    copy-on-write - The new DB cluster is restored as a clone of the source DB cluster.   Constraints: You can't specify copy-on-write if the engine version of the source DB cluster is earlier than 1.11. If you don't specify a RestoreType value, then the new DB cluster is restored as a full copy of the source DB cluster.
        public let restoreType: String?
        /// For DB clusters in serverless DB engine mode, the scaling properties of the DB cluster.
        public let scalingConfiguration: ScalingConfiguration?
        /// The identifier of the source DB cluster from which to restore. Constraints:   Must match the identifier of an existing DBCluster.
        public let sourceDBClusterIdentifier: String
        @OptionalCustomCoding<ArrayCoder<_TagsEncoding, Tag>>
        public var tags: [Tag]?
        /// A value that indicates whether to restore the DB cluster to the latest restorable backup time. By default, the DB cluster isn't restored to the latest restorable backup time.  Constraints: Can't be specified if RestoreToTime parameter is provided.
        public let useLatestRestorableTime: Bool?
        /// A list of VPC security groups that the new DB cluster belongs to.
        @OptionalCustomCoding<ArrayCoder<_VpcSecurityGroupIdsEncoding, String>>
        public var vpcSecurityGroupIds: [String]?

        public init(backtrackWindow: Int64? = nil, copyTagsToSnapshot: Bool? = nil, dBClusterIdentifier: String, dBClusterParameterGroupName: String? = nil, dBSubnetGroupName: String? = nil, deletionProtection: Bool? = nil, domain: String? = nil, domainIAMRoleName: String? = nil, enableCloudwatchLogsExports: [String]? = nil, enableIAMDatabaseAuthentication: Bool? = nil, engineMode: String? = nil, kmsKeyId: String? = nil, optionGroupName: String? = nil, port: Int? = nil, restoreToTime: Date? = nil, restoreType: String? = nil, scalingConfiguration: ScalingConfiguration? = nil, sourceDBClusterIdentifier: String, tags: [Tag]? = nil, useLatestRestorableTime: Bool? = nil, vpcSecurityGroupIds: [String]? = nil) {
            self.backtrackWindow = backtrackWindow
            self.copyTagsToSnapshot = copyTagsToSnapshot
            self.dBClusterIdentifier = dBClusterIdentifier
            self.dBClusterParameterGroupName = dBClusterParameterGroupName
            self.dBSubnetGroupName = dBSubnetGroupName
            self.deletionProtection = deletionProtection
            self.domain = domain
            self.domainIAMRoleName = domainIAMRoleName
            self.enableCloudwatchLogsExports = enableCloudwatchLogsExports
            self.enableIAMDatabaseAuthentication = enableIAMDatabaseAuthentication
            self.engineMode = engineMode
            self.kmsKeyId = kmsKeyId
            self.optionGroupName = optionGroupName
            self.port = port
            self.restoreToTime = restoreToTime
            self.restoreType = restoreType
            self.scalingConfiguration = scalingConfiguration
            self.sourceDBClusterIdentifier = sourceDBClusterIdentifier
            self.tags = tags
            self.useLatestRestorableTime = useLatestRestorableTime
            self.vpcSecurityGroupIds = vpcSecurityGroupIds
        }

        private enum CodingKeys: String, CodingKey {
            case backtrackWindow = "BacktrackWindow"
            case copyTagsToSnapshot = "CopyTagsToSnapshot"
            case dBClusterIdentifier = "DBClusterIdentifier"
            case dBClusterParameterGroupName = "DBClusterParameterGroupName"
            case dBSubnetGroupName = "DBSubnetGroupName"
            case deletionProtection = "DeletionProtection"
            case domain = "Domain"
            case domainIAMRoleName = "DomainIAMRoleName"
            case enableCloudwatchLogsExports = "EnableCloudwatchLogsExports"
            case enableIAMDatabaseAuthentication = "EnableIAMDatabaseAuthentication"
            case engineMode = "EngineMode"
            case kmsKeyId = "KmsKeyId"
            case optionGroupName = "OptionGroupName"
            case port = "Port"
            case restoreToTime = "RestoreToTime"
            case restoreType = "RestoreType"
            case scalingConfiguration = "ScalingConfiguration"
            case sourceDBClusterIdentifier = "SourceDBClusterIdentifier"
            case tags = "Tags"
            case useLatestRestorableTime = "UseLatestRestorableTime"
            case vpcSecurityGroupIds = "VpcSecurityGroupIds"
        }
    }

    public struct RestoreDBClusterToPointInTimeResult: AWSDecodableShape {
        public let dBCluster: DBCluster?

        public init(dBCluster: DBCluster? = nil) {
            self.dBCluster = dBCluster
        }

        private enum CodingKeys: String, CodingKey {
            case dBCluster = "DBCluster"
        }
    }

    public struct RestoreDBInstanceFromDBSnapshotMessage: AWSEncodableShape {
        public struct _ProcessorFeaturesEncoding: ArrayCoderProperties { public static let member = "ProcessorFeature" }
        public struct _TagsEncoding: ArrayCoderProperties { public static let member = "Tag" }
        public struct _VpcSecurityGroupIdsEncoding: ArrayCoderProperties { public static let member = "VpcSecurityGroupId" }

        /// A value that indicates whether minor version upgrades are applied automatically to the DB instance during the maintenance window.
        public let autoMinorVersionUpgrade: Bool?
        /// The Availability Zone (AZ) where the DB instance will be created. Default: A random, system-chosen Availability Zone. Constraint: You can't specify the AvailabilityZone parameter if the DB instance is a Multi-AZ deployment. Example: us-east-1a
        public let availabilityZone: String?
        /// A value that indicates whether to copy all tags from the restored DB instance to snapshots of the DB instance. By default, tags are not copied.
        public let copyTagsToSnapshot: Bool?
        /// The compute and memory capacity of the Amazon RDS DB instance, for example, db.m4.large. Not all DB instance classes are available in all Amazon Web Services Regions, or for all database engines. For the full list of DB instance classes, and availability for your engine, see DB Instance Class in the Amazon RDS User Guide.  Default: The same DBInstanceClass as the original DB instance.
        public let dBInstanceClass: String?
        /// Name of the DB instance to create from the DB snapshot. This parameter isn't case-sensitive. Constraints:   Must contain from 1 to 63 numbers, letters, or hyphens   First character must be a letter   Can't end with a hyphen or contain two consecutive hyphens   Example: my-snapshot-id
        public let dBInstanceIdentifier: String
        /// The database name for the restored DB instance.  This parameter doesn't apply to the MySQL, PostgreSQL, or MariaDB engines.
        public let dBName: String?
        /// The name of the DB parameter group to associate with this DB instance. If you do not specify a value for DBParameterGroupName, then the default DBParameterGroup for the specified DB engine is used. Constraints:   If supplied, must match the name of an existing DBParameterGroup.   Must be 1 to 255 letters, numbers, or hyphens.   First character must be a letter.   Can't end with a hyphen or contain two consecutive hyphens.
        public let dBParameterGroupName: String?
        /// The identifier for the DB snapshot to restore from. Constraints:   Must match the identifier of an existing DBSnapshot.   If you are restoring from a shared manual DB snapshot, the DBSnapshotIdentifier must be the ARN of the shared DB snapshot.
        public let dBSnapshotIdentifier: String
        /// The DB subnet group name to use for the new instance. Constraints: If supplied, must match the name of an existing DBSubnetGroup. Example: mySubnetgroup
        public let dBSubnetGroupName: String?
        /// A value that indicates whether the DB instance has deletion protection enabled. The database can't be deleted when deletion protection is enabled. By default, deletion protection is disabled. For more information, see  Deleting a DB Instance.
        public let deletionProtection: Bool?
        /// Specify the Active Directory directory ID to restore the DB instance in. The domain must be created prior to this operation. Currently, only MySQL, Microsoft SQL Server, Oracle, and PostgreSQL DB instances can be created in an Active Directory Domain. For more information, see  Kerberos Authentication in the Amazon RDS User Guide.
        public let domain: String?
        /// Specify the name of the IAM role to be used when making API calls to the Directory Service.
        public let domainIAMRoleName: String?
        /// The list of logs that the restored DB instance is to export to CloudWatch Logs. The values in the list depend on the DB engine being used. For more information, see Publishing Database Logs to Amazon CloudWatch Logs in the Amazon RDS User Guide.
        @OptionalCustomCoding<StandardArrayCoder>
        public var enableCloudwatchLogsExports: [String]?
        /// A value that indicates whether to enable a customer-owned IP address (CoIP) for an RDS on Outposts DB instance. A CoIP provides local or external connectivity to resources in your Outpost subnets through your on-premises network. For some use cases, a CoIP can provide lower latency for connections to the DB instance from outside of its virtual private cloud (VPC) on your local network. For more information about RDS on Outposts, see Working with Amazon RDS on Amazon Web Services Outposts in the Amazon RDS User Guide. For more information about CoIPs, see Customer-owned IP addresses in the Amazon Web Services Outposts User Guide.
        public let enableCustomerOwnedIp: Bool?
        /// A value that indicates whether to enable mapping of Amazon Web Services Identity and Access Management (IAM) accounts to database accounts. By default, mapping is disabled. For more information about IAM database authentication, see  IAM Database Authentication for MySQL and PostgreSQL in the Amazon RDS User Guide.
        public let enableIAMDatabaseAuthentication: Bool?
        /// The database engine to use for the new instance. Default: The same as source Constraint: Must be compatible with the engine of the source. For example, you can restore a MariaDB 10.1 DB instance from a MySQL 5.6 snapshot. Valid Values:    mariadb     mysql     oracle-ee     oracle-ee-cdb     oracle-se2     oracle-se2-cdb     postgres     sqlserver-ee     sqlserver-se     sqlserver-ex     sqlserver-web
        public let engine: String?
        /// Specifies the amount of provisioned IOPS for the DB instance, expressed in I/O operations per second. If this parameter isn't specified, the IOPS value is taken from the backup. If this parameter is set to 0, the new instance is converted to a non-PIOPS instance. The conversion takes additional time, though your DB instance is available for connections before the conversion starts.  The provisioned IOPS value must follow the requirements for your database engine. For more information, see Amazon RDS Provisioned IOPS Storage to Improve Performance in the Amazon RDS User Guide.  Constraints: Must be an integer greater than 1000.
        public let iops: Int?
        /// License model information for the restored DB instance. Default: Same as source.  Valid values: license-included | bring-your-own-license | general-public-license
        public let licenseModel: String?
        /// A value that indicates whether the DB instance is a Multi-AZ deployment. Constraint: You can't specify the AvailabilityZone parameter if the DB instance is a Multi-AZ deployment.
        public let multiAZ: Bool?
        /// The name of the option group to be used for the restored DB instance. Permanent options, such as the TDE option for Oracle Advanced Security TDE, can't be removed from an option group, and that option group can't be removed from a DB instance once it is associated with a DB instance
        public let optionGroupName: String?
        /// The port number on which the database accepts connections. Default: The same port as the original DB instance Constraints: Value must be 1150-65535
        public let port: Int?
        /// The number of CPU cores and the number of threads per core for the DB instance class of the DB instance.
        @OptionalCustomCoding<ArrayCoder<_ProcessorFeaturesEncoding, ProcessorFeature>>
        public var processorFeatures: [ProcessorFeature]?
        /// A value that indicates whether the DB instance is publicly accessible. When the DB instance is publicly accessible, its DNS endpoint resolves to the private IP address from within the DB instance's VPC, and to the public IP address from outside of the DB instance's VPC. Access to the DB instance is ultimately controlled by the security group it uses, and that public access is not permitted if the security group assigned to the DB instance doesn't permit it. When the DB instance isn't publicly accessible, it is an internal DB instance with a DNS name that resolves to a private IP address. For more information, see CreateDBInstance.
        public let publiclyAccessible: Bool?
        /// Specifies the storage type to be associated with the DB instance.  Valid values: standard | gp2 | io1   If you specify io1, you must also include a value for the Iops parameter.   Default: io1 if the Iops parameter is specified, otherwise gp2
        public let storageType: String?
        @OptionalCustomCoding<ArrayCoder<_TagsEncoding, Tag>>
        public var tags: [Tag]?
        /// The ARN from the key store with which to associate the instance for TDE encryption.
        public let tdeCredentialArn: String?
        /// The password for the given ARN from the key store in order to access the device.
        public let tdeCredentialPassword: String?
        /// A value that indicates whether the DB instance class of the DB instance uses its default processor features.
        public let useDefaultProcessorFeatures: Bool?
        ///  A list of EC2 VPC security groups to associate with this DB instance.   Default: The default EC2 VPC security group for the DB subnet group's VPC.
        @OptionalCustomCoding<ArrayCoder<_VpcSecurityGroupIdsEncoding, String>>
        public var vpcSecurityGroupIds: [String]?

        public init(autoMinorVersionUpgrade: Bool? = nil, availabilityZone: String? = nil, copyTagsToSnapshot: Bool? = nil, dBInstanceClass: String? = nil, dBInstanceIdentifier: String, dBName: String? = nil, dBParameterGroupName: String? = nil, dBSnapshotIdentifier: String, dBSubnetGroupName: String? = nil, deletionProtection: Bool? = nil, domain: String? = nil, domainIAMRoleName: String? = nil, enableCloudwatchLogsExports: [String]? = nil, enableCustomerOwnedIp: Bool? = nil, enableIAMDatabaseAuthentication: Bool? = nil, engine: String? = nil, iops: Int? = nil, licenseModel: String? = nil, multiAZ: Bool? = nil, optionGroupName: String? = nil, port: Int? = nil, processorFeatures: [ProcessorFeature]? = nil, publiclyAccessible: Bool? = nil, storageType: String? = nil, tags: [Tag]? = nil, tdeCredentialArn: String? = nil, tdeCredentialPassword: String? = nil, useDefaultProcessorFeatures: Bool? = nil, vpcSecurityGroupIds: [String]? = nil) {
            self.autoMinorVersionUpgrade = autoMinorVersionUpgrade
            self.availabilityZone = availabilityZone
            self.copyTagsToSnapshot = copyTagsToSnapshot
            self.dBInstanceClass = dBInstanceClass
            self.dBInstanceIdentifier = dBInstanceIdentifier
            self.dBName = dBName
            self.dBParameterGroupName = dBParameterGroupName
            self.dBSnapshotIdentifier = dBSnapshotIdentifier
            self.dBSubnetGroupName = dBSubnetGroupName
            self.deletionProtection = deletionProtection
            self.domain = domain
            self.domainIAMRoleName = domainIAMRoleName
            self.enableCloudwatchLogsExports = enableCloudwatchLogsExports
            self.enableCustomerOwnedIp = enableCustomerOwnedIp
            self.enableIAMDatabaseAuthentication = enableIAMDatabaseAuthentication
            self.engine = engine
            self.iops = iops
            self.licenseModel = licenseModel
            self.multiAZ = multiAZ
            self.optionGroupName = optionGroupName
            self.port = port
            self.processorFeatures = processorFeatures
            self.publiclyAccessible = publiclyAccessible
            self.storageType = storageType
            self.tags = tags
            self.tdeCredentialArn = tdeCredentialArn
            self.tdeCredentialPassword = tdeCredentialPassword
            self.useDefaultProcessorFeatures = useDefaultProcessorFeatures
            self.vpcSecurityGroupIds = vpcSecurityGroupIds
        }

        private enum CodingKeys: String, CodingKey {
            case autoMinorVersionUpgrade = "AutoMinorVersionUpgrade"
            case availabilityZone = "AvailabilityZone"
            case copyTagsToSnapshot = "CopyTagsToSnapshot"
            case dBInstanceClass = "DBInstanceClass"
            case dBInstanceIdentifier = "DBInstanceIdentifier"
            case dBName = "DBName"
            case dBParameterGroupName = "DBParameterGroupName"
            case dBSnapshotIdentifier = "DBSnapshotIdentifier"
            case dBSubnetGroupName = "DBSubnetGroupName"
            case deletionProtection = "DeletionProtection"
            case domain = "Domain"
            case domainIAMRoleName = "DomainIAMRoleName"
            case enableCloudwatchLogsExports = "EnableCloudwatchLogsExports"
            case enableCustomerOwnedIp = "EnableCustomerOwnedIp"
            case enableIAMDatabaseAuthentication = "EnableIAMDatabaseAuthentication"
            case engine = "Engine"
            case iops = "Iops"
            case licenseModel = "LicenseModel"
            case multiAZ = "MultiAZ"
            case optionGroupName = "OptionGroupName"
            case port = "Port"
            case processorFeatures = "ProcessorFeatures"
            case publiclyAccessible = "PubliclyAccessible"
            case storageType = "StorageType"
            case tags = "Tags"
            case tdeCredentialArn = "TdeCredentialArn"
            case tdeCredentialPassword = "TdeCredentialPassword"
            case useDefaultProcessorFeatures = "UseDefaultProcessorFeatures"
            case vpcSecurityGroupIds = "VpcSecurityGroupIds"
        }
    }

    public struct RestoreDBInstanceFromDBSnapshotResult: AWSDecodableShape {
        public let dBInstance: DBInstance?

        public init(dBInstance: DBInstance? = nil) {
            self.dBInstance = dBInstance
        }

        private enum CodingKeys: String, CodingKey {
            case dBInstance = "DBInstance"
        }
    }

    public struct RestoreDBInstanceFromS3Message: AWSEncodableShape {
        public struct _DBSecurityGroupsEncoding: ArrayCoderProperties { public static let member = "DBSecurityGroupName" }
        public struct _ProcessorFeaturesEncoding: ArrayCoderProperties { public static let member = "ProcessorFeature" }
        public struct _TagsEncoding: ArrayCoderProperties { public static let member = "Tag" }
        public struct _VpcSecurityGroupIdsEncoding: ArrayCoderProperties { public static let member = "VpcSecurityGroupId" }

        /// The amount of storage (in gigabytes) to allocate initially for the DB instance. Follow the allocation rules specified in CreateDBInstance.   Be sure to allocate enough memory for your new DB instance so that the restore operation can succeed. You can also allocate additional memory for future growth.
        public let allocatedStorage: Int?
        /// A value that indicates whether minor engine upgrades are applied automatically to the DB instance during the maintenance window. By default, minor engine upgrades are not applied automatically.
        public let autoMinorVersionUpgrade: Bool?
        /// The Availability Zone that the DB instance is created in. For information about Amazon Web Services Regions and Availability Zones, see Regions and Availability Zones in the Amazon RDS User Guide.  Default: A random, system-chosen Availability Zone in the endpoint's Amazon Web Services Region.   Example: us-east-1d  Constraint: The AvailabilityZone parameter can't be specified if the DB instance is a Multi-AZ deployment. The specified Availability Zone must be in the same Amazon Web Services Region as the current endpoint.
        public let availabilityZone: String?
        /// The number of days for which automated backups are retained. Setting this parameter to a positive number enables backups. For more information, see CreateDBInstance.
        public let backupRetentionPeriod: Int?
        /// A value that indicates whether to copy all tags from the DB instance to snapshots of the DB instance. By default, tags are not copied.
        public let copyTagsToSnapshot: Bool?
        /// The compute and memory capacity of the DB instance, for example, db.m4.large. Not all DB instance classes are available in all Amazon Web Services Regions, or for all database engines. For the full list of DB instance classes, and availability for your engine, see DB Instance Class in the Amazon RDS User Guide.  Importing from Amazon S3 isn't supported on the db.t2.micro DB instance class.
        public let dBInstanceClass: String
        /// The DB instance identifier. This parameter is stored as a lowercase string.  Constraints:   Must contain from 1 to 63 letters, numbers, or hyphens.   First character must be a letter.   Can't end with a hyphen or contain two consecutive hyphens.   Example: mydbinstance
        public let dBInstanceIdentifier: String
        /// The name of the database to create when the DB instance is created. Follow the naming rules specified in CreateDBInstance.
        public let dBName: String?
        /// The name of the DB parameter group to associate with this DB instance. If you do not specify a value for DBParameterGroupName, then the default DBParameterGroup for the specified DB engine is used.
        public let dBParameterGroupName: String?
        /// A list of DB security groups to associate with this DB instance. Default: The default DB security group for the database engine.
        @OptionalCustomCoding<ArrayCoder<_DBSecurityGroupsEncoding, String>>
        public var dBSecurityGroups: [String]?
        /// A DB subnet group to associate with this DB instance.
        public let dBSubnetGroupName: String?
        /// A value that indicates whether the DB instance has deletion protection enabled. The database can't be deleted when deletion protection is enabled. By default, deletion protection is disabled. For more information, see  Deleting a DB Instance.
        public let deletionProtection: Bool?
        /// The list of logs that the restored DB instance is to export to CloudWatch Logs. The values in the list depend on the DB engine being used. For more information, see Publishing Database Logs to Amazon CloudWatch Logs in the Amazon RDS User Guide.
        @OptionalCustomCoding<StandardArrayCoder>
        public var enableCloudwatchLogsExports: [String]?
        /// A value that indicates whether to enable mapping of Amazon Web Services Identity and Access Management (IAM) accounts to database accounts. By default, mapping is disabled. For more information about IAM database authentication, see  IAM Database Authentication for MySQL and PostgreSQL in the Amazon RDS User Guide.
        public let enableIAMDatabaseAuthentication: Bool?
        /// A value that indicates whether to enable Performance Insights for the DB instance.  For more information, see Using Amazon Performance Insights in the Amazon Relational Database Service User Guide.
        public let enablePerformanceInsights: Bool?
        /// The name of the database engine to be used for this instance.  Valid Values: mysql
        public let engine: String
        /// The version number of the database engine to use. Choose the latest minor version of your database engine. For information about engine versions, see CreateDBInstance, or call DescribeDBEngineVersions.
        public let engineVersion: String?
        /// The amount of Provisioned IOPS (input/output operations per second) to allocate initially for the DB instance. For information about valid Iops values, see Amazon RDS Provisioned IOPS Storage to Improve Performance in the Amazon RDS User Guide.
        public let iops: Int?
        /// The Amazon Web Services KMS key identifier for an encrypted DB instance.  The Amazon Web Services KMS key identifier is the key ARN, key ID, alias ARN, or alias name for the Amazon Web Services KMS customer master key (CMK). To use a CMK in a different Amazon Web Services account, specify the key ARN or alias ARN. If the StorageEncrypted parameter is enabled, and you do not specify a value for the KmsKeyId parameter, then Amazon RDS will use your default CMK. There is a default CMK for your Amazon Web Services account. Your Amazon Web Services account has a different default CMK for each Amazon Web Services Region.
        public let kmsKeyId: String?
        /// The license model for this DB instance. Use general-public-license.
        public let licenseModel: String?
        /// The name for the master user.  Constraints:    Must be 1 to 16 letters or numbers.   First character must be a letter.   Can't be a reserved word for the chosen database engine.
        public let masterUsername: String?
        /// The password for the master user. The password can include any printable ASCII character except "/", """, or "@".  Constraints: Must contain from 8 to 41 characters.
        public let masterUserPassword: String?
        /// The upper limit to which Amazon RDS can automatically scale the storage of the DB instance. For more information about this setting, including limitations that apply to it, see  Managing capacity automatically with Amazon RDS storage autoscaling in the Amazon RDS User Guide.
        public let maxAllocatedStorage: Int?
        /// The interval, in seconds, between points when Enhanced Monitoring metrics are collected for the DB instance. To disable collecting Enhanced Monitoring metrics, specify 0.  If MonitoringRoleArn is specified, then you must also set MonitoringInterval to a value other than 0.  Valid Values: 0, 1, 5, 10, 15, 30, 60  Default: 0
        public let monitoringInterval: Int?
        /// The ARN for the IAM role that permits RDS to send enhanced monitoring metrics to Amazon CloudWatch Logs. For example, arn:aws:iam:123456789012:role/emaccess. For information on creating a monitoring role, see Setting Up and Enabling Enhanced Monitoring in the Amazon RDS User Guide.  If MonitoringInterval is set to a value other than 0, then you must supply a MonitoringRoleArn value.
        public let monitoringRoleArn: String?
        /// A value that indicates whether the DB instance is a Multi-AZ deployment. If the DB instance is a Multi-AZ deployment, you can't set the AvailabilityZone parameter.
        public let multiAZ: Bool?
        /// The name of the option group to associate with this DB instance. If this argument is omitted, the default option group for the specified engine is used.
        public let optionGroupName: String?
        /// The Amazon Web Services KMS key identifier for encryption of Performance Insights data. The Amazon Web Services KMS key identifier is the key ARN, key ID, alias ARN, or alias name for the Amazon Web Services KMS customer master key (CMK). If you do not specify a value for PerformanceInsightsKMSKeyId, then Amazon RDS uses your default CMK. There is a default CMK for your Amazon Web Services account. Your Amazon Web Services account has a different default CMK for each Amazon Web Services Region.
        public let performanceInsightsKMSKeyId: String?
        /// The amount of time, in days, to retain Performance Insights data. Valid values are 7 or 731 (2 years).
        public let performanceInsightsRetentionPeriod: Int?
        /// The port number on which the database accepts connections.  Type: Integer  Valid Values: 1150-65535  Default: 3306
        public let port: Int?
        /// The time range each day during which automated backups are created if automated backups are enabled. For more information, see Backup window in the Amazon RDS User Guide.  Constraints:   Must be in the format hh24:mi-hh24:mi.   Must be in Universal Coordinated Time (UTC).   Must not conflict with the preferred maintenance window.   Must be at least 30 minutes.
        public let preferredBackupWindow: String?
        /// The time range each week during which system maintenance can occur, in Universal Coordinated Time (UTC). For more information, see Amazon RDS Maintenance Window in the Amazon RDS User Guide.  Constraints:   Must be in the format ddd:hh24:mi-ddd:hh24:mi.   Valid Days: Mon, Tue, Wed, Thu, Fri, Sat, Sun.   Must be in Universal Coordinated Time (UTC).   Must not conflict with the preferred backup window.   Must be at least 30 minutes.
        public let preferredMaintenanceWindow: String?
        /// The number of CPU cores and the number of threads per core for the DB instance class of the DB instance.
        @OptionalCustomCoding<ArrayCoder<_ProcessorFeaturesEncoding, ProcessorFeature>>
        public var processorFeatures: [ProcessorFeature]?
        /// A value that indicates whether the DB instance is publicly accessible. When the DB instance is publicly accessible, its DNS endpoint resolves to the private IP address from within the DB instance's VPC, and to the public IP address from outside of the DB instance's VPC. Access to the DB instance is ultimately controlled by the security group it uses, and that public access is not permitted if the security group assigned to the DB instance doesn't permit it. When the DB instance isn't publicly accessible, it is an internal DB instance with a DNS name that resolves to a private IP address. For more information, see CreateDBInstance.
        public let publiclyAccessible: Bool?
        /// The name of your Amazon S3 bucket that contains your database backup file.
        public let s3BucketName: String
        /// An Amazon Web Services Identity and Access Management (IAM) role to allow Amazon RDS to access your Amazon S3 bucket.
        public let s3IngestionRoleArn: String
        /// The prefix of your Amazon S3 bucket.
        public let s3Prefix: String?
        /// The name of the engine of your source database.  Valid Values: mysql
        public let sourceEngine: String
        /// The version of the database that the backup files were created from. MySQL versions 5.6 and 5.7 are supported.  Example: 5.6.40
        public let sourceEngineVersion: String
        /// A value that indicates whether the new DB instance is encrypted or not.
        public let storageEncrypted: Bool?
        /// Specifies the storage type to be associated with the DB instance.  Valid values: standard | gp2 | io1  If you specify io1, you must also include a value for the Iops parameter.  Default: io1 if the Iops parameter is specified; otherwise gp2
        public let storageType: String?
        /// A list of tags to associate with this DB instance. For more information, see Tagging Amazon RDS Resources in the Amazon RDS User Guide.
        @OptionalCustomCoding<ArrayCoder<_TagsEncoding, Tag>>
        public var tags: [Tag]?
        /// A value that indicates whether the DB instance class of the DB instance uses its default processor features.
        public let useDefaultProcessorFeatures: Bool?
        /// A list of VPC security groups to associate with this DB instance.
        @OptionalCustomCoding<ArrayCoder<_VpcSecurityGroupIdsEncoding, String>>
        public var vpcSecurityGroupIds: [String]?

        public init(allocatedStorage: Int? = nil, autoMinorVersionUpgrade: Bool? = nil, availabilityZone: String? = nil, backupRetentionPeriod: Int? = nil, copyTagsToSnapshot: Bool? = nil, dBInstanceClass: String, dBInstanceIdentifier: String, dBName: String? = nil, dBParameterGroupName: String? = nil, dBSecurityGroups: [String]? = nil, dBSubnetGroupName: String? = nil, deletionProtection: Bool? = nil, enableCloudwatchLogsExports: [String]? = nil, enableIAMDatabaseAuthentication: Bool? = nil, enablePerformanceInsights: Bool? = nil, engine: String, engineVersion: String? = nil, iops: Int? = nil, kmsKeyId: String? = nil, licenseModel: String? = nil, masterUsername: String? = nil, masterUserPassword: String? = nil, maxAllocatedStorage: Int? = nil, monitoringInterval: Int? = nil, monitoringRoleArn: String? = nil, multiAZ: Bool? = nil, optionGroupName: String? = nil, performanceInsightsKMSKeyId: String? = nil, performanceInsightsRetentionPeriod: Int? = nil, port: Int? = nil, preferredBackupWindow: String? = nil, preferredMaintenanceWindow: String? = nil, processorFeatures: [ProcessorFeature]? = nil, publiclyAccessible: Bool? = nil, s3BucketName: String, s3IngestionRoleArn: String, s3Prefix: String? = nil, sourceEngine: String, sourceEngineVersion: String, storageEncrypted: Bool? = nil, storageType: String? = nil, tags: [Tag]? = nil, useDefaultProcessorFeatures: Bool? = nil, vpcSecurityGroupIds: [String]? = nil) {
            self.allocatedStorage = allocatedStorage
            self.autoMinorVersionUpgrade = autoMinorVersionUpgrade
            self.availabilityZone = availabilityZone
            self.backupRetentionPeriod = backupRetentionPeriod
            self.copyTagsToSnapshot = copyTagsToSnapshot
            self.dBInstanceClass = dBInstanceClass
            self.dBInstanceIdentifier = dBInstanceIdentifier
            self.dBName = dBName
            self.dBParameterGroupName = dBParameterGroupName
            self.dBSecurityGroups = dBSecurityGroups
            self.dBSubnetGroupName = dBSubnetGroupName
            self.deletionProtection = deletionProtection
            self.enableCloudwatchLogsExports = enableCloudwatchLogsExports
            self.enableIAMDatabaseAuthentication = enableIAMDatabaseAuthentication
            self.enablePerformanceInsights = enablePerformanceInsights
            self.engine = engine
            self.engineVersion = engineVersion
            self.iops = iops
            self.kmsKeyId = kmsKeyId
            self.licenseModel = licenseModel
            self.masterUsername = masterUsername
            self.masterUserPassword = masterUserPassword
            self.maxAllocatedStorage = maxAllocatedStorage
            self.monitoringInterval = monitoringInterval
            self.monitoringRoleArn = monitoringRoleArn
            self.multiAZ = multiAZ
            self.optionGroupName = optionGroupName
            self.performanceInsightsKMSKeyId = performanceInsightsKMSKeyId
            self.performanceInsightsRetentionPeriod = performanceInsightsRetentionPeriod
            self.port = port
            self.preferredBackupWindow = preferredBackupWindow
            self.preferredMaintenanceWindow = preferredMaintenanceWindow
            self.processorFeatures = processorFeatures
            self.publiclyAccessible = publiclyAccessible
            self.s3BucketName = s3BucketName
            self.s3IngestionRoleArn = s3IngestionRoleArn
            self.s3Prefix = s3Prefix
            self.sourceEngine = sourceEngine
            self.sourceEngineVersion = sourceEngineVersion
            self.storageEncrypted = storageEncrypted
            self.storageType = storageType
            self.tags = tags
            self.useDefaultProcessorFeatures = useDefaultProcessorFeatures
            self.vpcSecurityGroupIds = vpcSecurityGroupIds
        }

        private enum CodingKeys: String, CodingKey {
            case allocatedStorage = "AllocatedStorage"
            case autoMinorVersionUpgrade = "AutoMinorVersionUpgrade"
            case availabilityZone = "AvailabilityZone"
            case backupRetentionPeriod = "BackupRetentionPeriod"
            case copyTagsToSnapshot = "CopyTagsToSnapshot"
            case dBInstanceClass = "DBInstanceClass"
            case dBInstanceIdentifier = "DBInstanceIdentifier"
            case dBName = "DBName"
            case dBParameterGroupName = "DBParameterGroupName"
            case dBSecurityGroups = "DBSecurityGroups"
            case dBSubnetGroupName = "DBSubnetGroupName"
            case deletionProtection = "DeletionProtection"
            case enableCloudwatchLogsExports = "EnableCloudwatchLogsExports"
            case enableIAMDatabaseAuthentication = "EnableIAMDatabaseAuthentication"
            case enablePerformanceInsights = "EnablePerformanceInsights"
            case engine = "Engine"
            case engineVersion = "EngineVersion"
            case iops = "Iops"
            case kmsKeyId = "KmsKeyId"
            case licenseModel = "LicenseModel"
            case masterUsername = "MasterUsername"
            case masterUserPassword = "MasterUserPassword"
            case maxAllocatedStorage = "MaxAllocatedStorage"
            case monitoringInterval = "MonitoringInterval"
            case monitoringRoleArn = "MonitoringRoleArn"
            case multiAZ = "MultiAZ"
            case optionGroupName = "OptionGroupName"
            case performanceInsightsKMSKeyId = "PerformanceInsightsKMSKeyId"
            case performanceInsightsRetentionPeriod = "PerformanceInsightsRetentionPeriod"
            case port = "Port"
            case preferredBackupWindow = "PreferredBackupWindow"
            case preferredMaintenanceWindow = "PreferredMaintenanceWindow"
            case processorFeatures = "ProcessorFeatures"
            case publiclyAccessible = "PubliclyAccessible"
            case s3BucketName = "S3BucketName"
            case s3IngestionRoleArn = "S3IngestionRoleArn"
            case s3Prefix = "S3Prefix"
            case sourceEngine = "SourceEngine"
            case sourceEngineVersion = "SourceEngineVersion"
            case storageEncrypted = "StorageEncrypted"
            case storageType = "StorageType"
            case tags = "Tags"
            case useDefaultProcessorFeatures = "UseDefaultProcessorFeatures"
            case vpcSecurityGroupIds = "VpcSecurityGroupIds"
        }
    }

    public struct RestoreDBInstanceFromS3Result: AWSDecodableShape {
        public let dBInstance: DBInstance?

        public init(dBInstance: DBInstance? = nil) {
            self.dBInstance = dBInstance
        }

        private enum CodingKeys: String, CodingKey {
            case dBInstance = "DBInstance"
        }
    }

    public struct RestoreDBInstanceToPointInTimeMessage: AWSEncodableShape {
        public struct _ProcessorFeaturesEncoding: ArrayCoderProperties { public static let member = "ProcessorFeature" }
        public struct _TagsEncoding: ArrayCoderProperties { public static let member = "Tag" }
        public struct _VpcSecurityGroupIdsEncoding: ArrayCoderProperties { public static let member = "VpcSecurityGroupId" }

        /// A value that indicates whether minor version upgrades are applied automatically to the DB instance during the maintenance window.
        public let autoMinorVersionUpgrade: Bool?
        /// The Availability Zone (AZ) where the DB instance will be created. Default: A random, system-chosen Availability Zone. Constraint: You can't specify the AvailabilityZone parameter if the DB instance is a Multi-AZ deployment. Example: us-east-1a
        public let availabilityZone: String?
        /// A value that indicates whether to copy all tags from the restored DB instance to snapshots of the DB instance. By default, tags are not copied.
        public let copyTagsToSnapshot: Bool?
        /// The compute and memory capacity of the Amazon RDS DB instance, for example, db.m4.large. Not all DB instance classes are available in all Amazon Web Services Regions, or for all database engines. For the full list of DB instance classes, and availability for your engine, see DB Instance Class in the Amazon RDS User Guide.  Default: The same DBInstanceClass as the original DB instance.
        public let dBInstanceClass: String?
        /// The database name for the restored DB instance.  This parameter isn't used for the MySQL or MariaDB engines.
        public let dBName: String?
        /// The name of the DB parameter group to associate with this DB instance. If you do not specify a value for DBParameterGroupName, then the default DBParameterGroup for the specified DB engine is used. Constraints:   If supplied, must match the name of an existing DBParameterGroup.   Must be 1 to 255 letters, numbers, or hyphens.   First character must be a letter.   Can't end with a hyphen or contain two consecutive hyphens.
        public let dBParameterGroupName: String?
        /// The DB subnet group name to use for the new instance. Constraints: If supplied, must match the name of an existing DBSubnetGroup. Example: mySubnetgroup
        public let dBSubnetGroupName: String?
        /// A value that indicates whether the DB instance has deletion protection enabled. The database can't be deleted when deletion protection is enabled. By default, deletion protection is disabled. For more information, see  Deleting a DB Instance.
        public let deletionProtection: Bool?
        /// Specify the Active Directory directory ID to restore the DB instance in. The domain must be created prior to this operation. Currently, only MySQL, Microsoft SQL Server, Oracle, and PostgreSQL DB instances can be created in an Active Directory Domain. For more information, see  Kerberos Authentication in the Amazon RDS User Guide.
        public let domain: String?
        /// Specify the name of the IAM role to be used when making API calls to the Directory Service.
        public let domainIAMRoleName: String?
        /// The list of logs that the restored DB instance is to export to CloudWatch Logs. The values in the list depend on the DB engine being used. For more information, see Publishing Database Logs to Amazon CloudWatch Logs in the Amazon RDS User Guide.
        @OptionalCustomCoding<StandardArrayCoder>
        public var enableCloudwatchLogsExports: [String]?
        /// A value that indicates whether to enable a customer-owned IP address (CoIP) for an RDS on Outposts DB instance. A CoIP provides local or external connectivity to resources in your Outpost subnets through your on-premises network. For some use cases, a CoIP can provide lower latency for connections to the DB instance from outside of its virtual private cloud (VPC) on your local network. For more information about RDS on Outposts, see Working with Amazon RDS on Amazon Web Services Outposts in the Amazon RDS User Guide. For more information about CoIPs, see Customer-owned IP addresses in the Amazon Web Services Outposts User Guide.
        public let enableCustomerOwnedIp: Bool?
        /// A value that indicates whether to enable mapping of Amazon Web Services Identity and Access Management (IAM) accounts to database accounts. By default, mapping is disabled. For more information about IAM database authentication, see  IAM Database Authentication for MySQL and PostgreSQL in the Amazon RDS User Guide.
        public let enableIAMDatabaseAuthentication: Bool?
        /// The database engine to use for the new instance. Default: The same as source Constraint: Must be compatible with the engine of the source Valid Values:    mariadb     mysql     oracle-ee     oracle-ee-cdb     oracle-se2     oracle-se2-cdb     postgres     sqlserver-ee     sqlserver-se     sqlserver-ex     sqlserver-web
        public let engine: String?
        /// The amount of Provisioned IOPS (input/output operations per second) to be initially allocated for the DB instance. Constraints: Must be an integer greater than 1000.  SQL Server  Setting the IOPS value for the SQL Server database engine isn't supported.
        public let iops: Int?
        /// License model information for the restored DB instance. Default: Same as source.  Valid values: license-included | bring-your-own-license | general-public-license
        public let licenseModel: String?
        /// The upper limit to which Amazon RDS can automatically scale the storage of the DB instance. For more information about this setting, including limitations that apply to it, see  Managing capacity automatically with Amazon RDS storage autoscaling in the Amazon RDS User Guide.
        public let maxAllocatedStorage: Int?
        /// A value that indicates whether the DB instance is a Multi-AZ deployment. Constraint: You can't specify the AvailabilityZone parameter if the DB instance is a Multi-AZ deployment.
        public let multiAZ: Bool?
        /// The name of the option group to be used for the restored DB instance. Permanent options, such as the TDE option for Oracle Advanced Security TDE, can't be removed from an option group, and that option group can't be removed from a DB instance once it is associated with a DB instance
        public let optionGroupName: String?
        /// The port number on which the database accepts connections. Constraints: Value must be 1150-65535  Default: The same port as the original DB instance.
        public let port: Int?
        /// The number of CPU cores and the number of threads per core for the DB instance class of the DB instance.
        @OptionalCustomCoding<ArrayCoder<_ProcessorFeaturesEncoding, ProcessorFeature>>
        public var processorFeatures: [ProcessorFeature]?
        /// A value that indicates whether the DB instance is publicly accessible. When the DB instance is publicly accessible, its DNS endpoint resolves to the private IP address from within the DB instance's VPC, and to the public IP address from outside of the DB instance's VPC. Access to the DB instance is ultimately controlled by the security group it uses, and that public access is not permitted if the security group assigned to the DB instance doesn't permit it. When the DB instance isn't publicly accessible, it is an internal DB instance with a DNS name that resolves to a private IP address. For more information, see CreateDBInstance.
        public let publiclyAccessible: Bool?
        /// The date and time to restore from. Valid Values: Value must be a time in Universal Coordinated Time (UTC) format Constraints:   Must be before the latest restorable time for the DB instance   Can't be specified if the UseLatestRestorableTime parameter is enabled   Example: 2009-09-07T23:45:00Z
        public let restoreTime: Date?
        /// The Amazon Resource Name (ARN) of the replicated automated backups from which to restore, for example, arn:aws:rds:useast-1:123456789012:auto-backup:ab-L2IJCEXJP7XQ7HOJ4SIEXAMPLE.
        public let sourceDBInstanceAutomatedBackupsArn: String?
        /// The identifier of the source DB instance from which to restore. Constraints:   Must match the identifier of an existing DB instance.
        public let sourceDBInstanceIdentifier: String?
        /// The resource ID of the source DB instance from which to restore.
        public let sourceDbiResourceId: String?
        /// Specifies the storage type to be associated with the DB instance.  Valid values: standard | gp2 | io1   If you specify io1, you must also include a value for the Iops parameter.   Default: io1 if the Iops parameter is specified, otherwise gp2
        public let storageType: String?
        @OptionalCustomCoding<ArrayCoder<_TagsEncoding, Tag>>
        public var tags: [Tag]?
        /// The name of the new DB instance to be created. Constraints:   Must contain from 1 to 63 letters, numbers, or hyphens   First character must be a letter   Can't end with a hyphen or contain two consecutive hyphens
        public let targetDBInstanceIdentifier: String
        /// The ARN from the key store with which to associate the instance for TDE encryption.
        public let tdeCredentialArn: String?
        /// The password for the given ARN from the key store in order to access the device.
        public let tdeCredentialPassword: String?
        /// A value that indicates whether the DB instance class of the DB instance uses its default processor features.
        public let useDefaultProcessorFeatures: Bool?
        ///  A value that indicates whether the DB instance is restored from the latest backup time. By default, the DB instance isn't restored from the latest backup time.  Constraints: Can't be specified if the RestoreTime parameter is provided.
        public let useLatestRestorableTime: Bool?
        ///  A list of EC2 VPC security groups to associate with this DB instance.   Default: The default EC2 VPC security group for the DB subnet group's VPC.
        @OptionalCustomCoding<ArrayCoder<_VpcSecurityGroupIdsEncoding, String>>
        public var vpcSecurityGroupIds: [String]?

        public init(autoMinorVersionUpgrade: Bool? = nil, availabilityZone: String? = nil, copyTagsToSnapshot: Bool? = nil, dBInstanceClass: String? = nil, dBName: String? = nil, dBParameterGroupName: String? = nil, dBSubnetGroupName: String? = nil, deletionProtection: Bool? = nil, domain: String? = nil, domainIAMRoleName: String? = nil, enableCloudwatchLogsExports: [String]? = nil, enableCustomerOwnedIp: Bool? = nil, enableIAMDatabaseAuthentication: Bool? = nil, engine: String? = nil, iops: Int? = nil, licenseModel: String? = nil, maxAllocatedStorage: Int? = nil, multiAZ: Bool? = nil, optionGroupName: String? = nil, port: Int? = nil, processorFeatures: [ProcessorFeature]? = nil, publiclyAccessible: Bool? = nil, restoreTime: Date? = nil, sourceDBInstanceAutomatedBackupsArn: String? = nil, sourceDBInstanceIdentifier: String? = nil, sourceDbiResourceId: String? = nil, storageType: String? = nil, tags: [Tag]? = nil, targetDBInstanceIdentifier: String, tdeCredentialArn: String? = nil, tdeCredentialPassword: String? = nil, useDefaultProcessorFeatures: Bool? = nil, useLatestRestorableTime: Bool? = nil, vpcSecurityGroupIds: [String]? = nil) {
            self.autoMinorVersionUpgrade = autoMinorVersionUpgrade
            self.availabilityZone = availabilityZone
            self.copyTagsToSnapshot = copyTagsToSnapshot
            self.dBInstanceClass = dBInstanceClass
            self.dBName = dBName
            self.dBParameterGroupName = dBParameterGroupName
            self.dBSubnetGroupName = dBSubnetGroupName
            self.deletionProtection = deletionProtection
            self.domain = domain
            self.domainIAMRoleName = domainIAMRoleName
            self.enableCloudwatchLogsExports = enableCloudwatchLogsExports
            self.enableCustomerOwnedIp = enableCustomerOwnedIp
            self.enableIAMDatabaseAuthentication = enableIAMDatabaseAuthentication
            self.engine = engine
            self.iops = iops
            self.licenseModel = licenseModel
            self.maxAllocatedStorage = maxAllocatedStorage
            self.multiAZ = multiAZ
            self.optionGroupName = optionGroupName
            self.port = port
            self.processorFeatures = processorFeatures
            self.publiclyAccessible = publiclyAccessible
            self.restoreTime = restoreTime
            self.sourceDBInstanceAutomatedBackupsArn = sourceDBInstanceAutomatedBackupsArn
            self.sourceDBInstanceIdentifier = sourceDBInstanceIdentifier
            self.sourceDbiResourceId = sourceDbiResourceId
            self.storageType = storageType
            self.tags = tags
            self.targetDBInstanceIdentifier = targetDBInstanceIdentifier
            self.tdeCredentialArn = tdeCredentialArn
            self.tdeCredentialPassword = tdeCredentialPassword
            self.useDefaultProcessorFeatures = useDefaultProcessorFeatures
            self.useLatestRestorableTime = useLatestRestorableTime
            self.vpcSecurityGroupIds = vpcSecurityGroupIds
        }

        private enum CodingKeys: String, CodingKey {
            case autoMinorVersionUpgrade = "AutoMinorVersionUpgrade"
            case availabilityZone = "AvailabilityZone"
            case copyTagsToSnapshot = "CopyTagsToSnapshot"
            case dBInstanceClass = "DBInstanceClass"
            case dBName = "DBName"
            case dBParameterGroupName = "DBParameterGroupName"
            case dBSubnetGroupName = "DBSubnetGroupName"
            case deletionProtection = "DeletionProtection"
            case domain = "Domain"
            case domainIAMRoleName = "DomainIAMRoleName"
            case enableCloudwatchLogsExports = "EnableCloudwatchLogsExports"
            case enableCustomerOwnedIp = "EnableCustomerOwnedIp"
            case enableIAMDatabaseAuthentication = "EnableIAMDatabaseAuthentication"
            case engine = "Engine"
            case iops = "Iops"
            case licenseModel = "LicenseModel"
            case maxAllocatedStorage = "MaxAllocatedStorage"
            case multiAZ = "MultiAZ"
            case optionGroupName = "OptionGroupName"
            case port = "Port"
            case processorFeatures = "ProcessorFeatures"
            case publiclyAccessible = "PubliclyAccessible"
            case restoreTime = "RestoreTime"
            case sourceDBInstanceAutomatedBackupsArn = "SourceDBInstanceAutomatedBackupsArn"
            case sourceDBInstanceIdentifier = "SourceDBInstanceIdentifier"
            case sourceDbiResourceId = "SourceDbiResourceId"
            case storageType = "StorageType"
            case tags = "Tags"
            case targetDBInstanceIdentifier = "TargetDBInstanceIdentifier"
            case tdeCredentialArn = "TdeCredentialArn"
            case tdeCredentialPassword = "TdeCredentialPassword"
            case useDefaultProcessorFeatures = "UseDefaultProcessorFeatures"
            case useLatestRestorableTime = "UseLatestRestorableTime"
            case vpcSecurityGroupIds = "VpcSecurityGroupIds"
        }
    }

    public struct RestoreDBInstanceToPointInTimeResult: AWSDecodableShape {
        public let dBInstance: DBInstance?

        public init(dBInstance: DBInstance? = nil) {
            self.dBInstance = dBInstance
        }

        private enum CodingKeys: String, CodingKey {
            case dBInstance = "DBInstance"
        }
    }

    public struct RestoreWindow: AWSDecodableShape {
        /// The earliest time you can restore an instance to.
        public let earliestTime: Date?
        /// The latest time you can restore an instance to.
        public let latestTime: Date?

        public init(earliestTime: Date? = nil, latestTime: Date? = nil) {
            self.earliestTime = earliestTime
            self.latestTime = latestTime
        }

        private enum CodingKeys: String, CodingKey {
            case earliestTime = "EarliestTime"
            case latestTime = "LatestTime"
        }
    }

    public struct RevokeDBSecurityGroupIngressMessage: AWSEncodableShape {
        ///  The IP range to revoke access from. Must be a valid CIDR range. If CIDRIP is specified, EC2SecurityGroupName, EC2SecurityGroupId and EC2SecurityGroupOwnerId can't be provided.
        public let cidrip: String?
        /// The name of the DB security group to revoke ingress from.
        public let dBSecurityGroupName: String
        ///  The id of the EC2 security group to revoke access from. For VPC DB security groups, EC2SecurityGroupId must be provided. Otherwise, EC2SecurityGroupOwnerId and either EC2SecurityGroupName or EC2SecurityGroupId must be provided.
        public let eC2SecurityGroupId: String?
        ///  The name of the EC2 security group to revoke access from. For VPC DB security groups, EC2SecurityGroupId must be provided. Otherwise, EC2SecurityGroupOwnerId and either EC2SecurityGroupName or EC2SecurityGroupId must be provided.
        public let eC2SecurityGroupName: String?
        ///  The Amazon Web Services account number of the owner of the EC2 security group specified in the EC2SecurityGroupName parameter. The Amazon Web Services access key ID isn't an acceptable value. For VPC DB security groups, EC2SecurityGroupId must be provided. Otherwise, EC2SecurityGroupOwnerId and either EC2SecurityGroupName or EC2SecurityGroupId must be provided.
        public let eC2SecurityGroupOwnerId: String?

        public init(cidrip: String? = nil, dBSecurityGroupName: String, eC2SecurityGroupId: String? = nil, eC2SecurityGroupName: String? = nil, eC2SecurityGroupOwnerId: String? = nil) {
            self.cidrip = cidrip
            self.dBSecurityGroupName = dBSecurityGroupName
            self.eC2SecurityGroupId = eC2SecurityGroupId
            self.eC2SecurityGroupName = eC2SecurityGroupName
            self.eC2SecurityGroupOwnerId = eC2SecurityGroupOwnerId
        }

        private enum CodingKeys: String, CodingKey {
            case cidrip = "CIDRIP"
            case dBSecurityGroupName = "DBSecurityGroupName"
            case eC2SecurityGroupId = "EC2SecurityGroupId"
            case eC2SecurityGroupName = "EC2SecurityGroupName"
            case eC2SecurityGroupOwnerId = "EC2SecurityGroupOwnerId"
        }
    }

    public struct RevokeDBSecurityGroupIngressResult: AWSDecodableShape {
        public let dBSecurityGroup: DBSecurityGroup?

        public init(dBSecurityGroup: DBSecurityGroup? = nil) {
            self.dBSecurityGroup = dBSecurityGroup
        }

        private enum CodingKeys: String, CodingKey {
            case dBSecurityGroup = "DBSecurityGroup"
        }
    }

    public struct ScalingConfiguration: AWSEncodableShape {
        /// A value that indicates whether to allow or disallow automatic pause for an Aurora DB cluster in serverless DB engine mode. A DB cluster can be paused only when it's idle (it has no connections).  If a DB cluster is paused for more than seven days, the DB cluster might be backed up with a snapshot. In this case, the DB cluster is restored when there is a request to connect to it.
        public let autoPause: Bool?
        /// The maximum capacity for an Aurora DB cluster in serverless DB engine mode. For Aurora MySQL, valid capacity values are 1, 2, 4, 8, 16, 32, 64, 128, and 256. For Aurora PostgreSQL, valid capacity values are 2, 4, 8, 16, 32, 64, 192, and 384. The maximum capacity must be greater than or equal to the minimum capacity.
        public let maxCapacity: Int?
        /// The minimum capacity for an Aurora DB cluster in serverless DB engine mode. For Aurora MySQL, valid capacity values are 1, 2, 4, 8, 16, 32, 64, 128, and 256. For Aurora PostgreSQL, valid capacity values are 2, 4, 8, 16, 32, 64, 192, and 384. The minimum capacity must be less than or equal to the maximum capacity.
        public let minCapacity: Int?
        /// The time, in seconds, before an Aurora DB cluster in serverless mode is paused. Specify a value between 300 and 86,400 seconds.
        public let secondsUntilAutoPause: Int?
        /// The action to take when the timeout is reached, either ForceApplyCapacityChange or RollbackCapacityChange.  ForceApplyCapacityChange sets the capacity to the specified value as soon as possible.  RollbackCapacityChange, the default, ignores the capacity change if a scaling point isn't found in the timeout period.  If you specify ForceApplyCapacityChange, connections that prevent Aurora Serverless from finding a scaling point might be dropped.  For more information, see  Autoscaling for Aurora Serverless in the Amazon Aurora User Guide.
        public let timeoutAction: String?

        public init(autoPause: Bool? = nil, maxCapacity: Int? = nil, minCapacity: Int? = nil, secondsUntilAutoPause: Int? = nil, timeoutAction: String? = nil) {
            self.autoPause = autoPause
            self.maxCapacity = maxCapacity
            self.minCapacity = minCapacity
            self.secondsUntilAutoPause = secondsUntilAutoPause
            self.timeoutAction = timeoutAction
        }

        private enum CodingKeys: String, CodingKey {
            case autoPause = "AutoPause"
            case maxCapacity = "MaxCapacity"
            case minCapacity = "MinCapacity"
            case secondsUntilAutoPause = "SecondsUntilAutoPause"
            case timeoutAction = "TimeoutAction"
        }
    }

    public struct ScalingConfigurationInfo: AWSDecodableShape {
        /// A value that indicates whether automatic pause is allowed for the Aurora DB cluster in serverless DB engine mode. When the value is set to false for an Aurora Serverless DB cluster, the DB cluster automatically resumes.
        public let autoPause: Bool?
        /// The maximum capacity for an Aurora DB cluster in serverless DB engine mode.
        public let maxCapacity: Int?
        /// The maximum capacity for the Aurora DB cluster in serverless DB engine mode.
        public let minCapacity: Int?
        /// The remaining amount of time, in seconds, before the Aurora DB cluster in serverless mode is paused. A DB cluster can be paused only when it's idle (it has no connections).
        public let secondsUntilAutoPause: Int?
        /// The timeout action of a call to ModifyCurrentDBClusterCapacity, either ForceApplyCapacityChange or RollbackCapacityChange.
        public let timeoutAction: String?

        public init(autoPause: Bool? = nil, maxCapacity: Int? = nil, minCapacity: Int? = nil, secondsUntilAutoPause: Int? = nil, timeoutAction: String? = nil) {
            self.autoPause = autoPause
            self.maxCapacity = maxCapacity
            self.minCapacity = minCapacity
            self.secondsUntilAutoPause = secondsUntilAutoPause
            self.timeoutAction = timeoutAction
        }

        private enum CodingKeys: String, CodingKey {
            case autoPause = "AutoPause"
            case maxCapacity = "MaxCapacity"
            case minCapacity = "MinCapacity"
            case secondsUntilAutoPause = "SecondsUntilAutoPause"
            case timeoutAction = "TimeoutAction"
        }
    }

    public struct SourceRegion: AWSDecodableShape {
        /// The endpoint for the source Amazon Web Services Region endpoint.
        public let endpoint: String?
        /// The name of the source Amazon Web Services Region.
        public let regionName: String?
        /// The status of the source Amazon Web Services Region.
        public let status: String?
        /// Whether the source Amazon Web Services Region supports replicating automated backups to the current Amazon Web Services Region.
        public let supportsDBInstanceAutomatedBackupsReplication: Bool?

        public init(endpoint: String? = nil, regionName: String? = nil, status: String? = nil, supportsDBInstanceAutomatedBackupsReplication: Bool? = nil) {
            self.endpoint = endpoint
            self.regionName = regionName
            self.status = status
            self.supportsDBInstanceAutomatedBackupsReplication = supportsDBInstanceAutomatedBackupsReplication
        }

        private enum CodingKeys: String, CodingKey {
            case endpoint = "Endpoint"
            case regionName = "RegionName"
            case status = "Status"
            case supportsDBInstanceAutomatedBackupsReplication = "SupportsDBInstanceAutomatedBackupsReplication"
        }
    }

    public struct SourceRegionMessage: AWSDecodableShape {
        public struct _SourceRegionsEncoding: ArrayCoderProperties { public static let member = "SourceRegion" }

        ///  An optional pagination token provided by a previous request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by MaxRecords.
        public let marker: String?
        /// A list of SourceRegion instances that contains each source Amazon Web Services Region that the current Amazon Web Services Region can get a read replica or a DB snapshot from.
        @OptionalCustomCoding<ArrayCoder<_SourceRegionsEncoding, SourceRegion>>
        public var sourceRegions: [SourceRegion]?

        public init(marker: String? = nil, sourceRegions: [SourceRegion]? = nil) {
            self.marker = marker
            self.sourceRegions = sourceRegions
        }

        private enum CodingKeys: String, CodingKey {
            case marker = "Marker"
            case sourceRegions = "SourceRegions"
        }
    }

    public struct StartActivityStreamRequest: AWSEncodableShape {
        /// Specifies whether or not the database activity stream is to start as soon as possible, regardless of the maintenance window for the database.
        public let applyImmediately: Bool?
        /// Specifies whether the database activity stream includes engine-native audit fields. This option only applies to an Oracle DB instance. By default, no engine-native audit fields are included.
        public let engineNativeAuditFieldsIncluded: Bool?
        /// The Amazon Web Services KMS key identifier for encrypting messages in the database activity stream. The Amazon Web Services KMS key identifier is the key ARN, key ID, alias ARN, or alias name for the Amazon Web Services KMS customer master key (CMK).
        public let kmsKeyId: String
        /// Specifies the mode of the database activity stream. Database events such as a change or access generate an activity stream event. The database session can handle these events either synchronously or asynchronously.
        public let mode: ActivityStreamMode
        /// The Amazon Resource Name (ARN) of the DB cluster, for example, arn:aws:rds:us-east-1:12345667890:cluster:das-cluster.
        public let resourceArn: String

        public init(applyImmediately: Bool? = nil, engineNativeAuditFieldsIncluded: Bool? = nil, kmsKeyId: String, mode: ActivityStreamMode, resourceArn: String) {
            self.applyImmediately = applyImmediately
            self.engineNativeAuditFieldsIncluded = engineNativeAuditFieldsIncluded
            self.kmsKeyId = kmsKeyId
            self.mode = mode
            self.resourceArn = resourceArn
        }

        private enum CodingKeys: String, CodingKey {
            case applyImmediately = "ApplyImmediately"
            case engineNativeAuditFieldsIncluded = "EngineNativeAuditFieldsIncluded"
            case kmsKeyId = "KmsKeyId"
            case mode = "Mode"
            case resourceArn = "ResourceArn"
        }
    }

    public struct StartActivityStreamResponse: AWSDecodableShape {
        /// Indicates whether or not the database activity stream will start as soon as possible, regardless of the maintenance window for the database.
        public let applyImmediately: Bool?
        /// Indicates whether engine-native audit fields are included in the database activity stream.
        public let engineNativeAuditFieldsIncluded: Bool?
        /// The name of the Amazon Kinesis data stream to be used for the database activity stream.
        public let kinesisStreamName: String?
        /// The Amazon Web Services KMS key identifier for encryption of messages in the database activity stream.
        public let kmsKeyId: String?
        /// The mode of the database activity stream.
        public let mode: ActivityStreamMode?
        /// The status of the database activity stream.
        public let status: ActivityStreamStatus?

        public init(applyImmediately: Bool? = nil, engineNativeAuditFieldsIncluded: Bool? = nil, kinesisStreamName: String? = nil, kmsKeyId: String? = nil, mode: ActivityStreamMode? = nil, status: ActivityStreamStatus? = nil) {
            self.applyImmediately = applyImmediately
            self.engineNativeAuditFieldsIncluded = engineNativeAuditFieldsIncluded
            self.kinesisStreamName = kinesisStreamName
            self.kmsKeyId = kmsKeyId
            self.mode = mode
            self.status = status
        }

        private enum CodingKeys: String, CodingKey {
            case applyImmediately = "ApplyImmediately"
            case engineNativeAuditFieldsIncluded = "EngineNativeAuditFieldsIncluded"
            case kinesisStreamName = "KinesisStreamName"
            case kmsKeyId = "KmsKeyId"
            case mode = "Mode"
            case status = "Status"
        }
    }

    public struct StartDBClusterMessage: AWSEncodableShape {
        /// The DB cluster identifier of the Amazon Aurora DB cluster to be started. This parameter is stored as a lowercase string.
        public let dBClusterIdentifier: String

        public init(dBClusterIdentifier: String) {
            self.dBClusterIdentifier = dBClusterIdentifier
        }

        private enum CodingKeys: String, CodingKey {
            case dBClusterIdentifier = "DBClusterIdentifier"
        }
    }

    public struct StartDBClusterResult: AWSDecodableShape {
        public let dBCluster: DBCluster?

        public init(dBCluster: DBCluster? = nil) {
            self.dBCluster = dBCluster
        }

        private enum CodingKeys: String, CodingKey {
            case dBCluster = "DBCluster"
        }
    }

    public struct StartDBInstanceAutomatedBackupsReplicationMessage: AWSEncodableShape {
        /// The retention period for the replicated automated backups.
        public let backupRetentionPeriod: Int?
        /// The Amazon Web Services KMS key identifier for encryption of the replicated automated backups. The KMS key ID is the Amazon Resource Name (ARN) for the KMS encryption key in the destination Amazon Web Services Region, for example, arn:aws:kms:us-east-1:123456789012:key/AKIAIOSFODNN7EXAMPLE.
        public let kmsKeyId: String?
        /// A URL that contains a Signature Version 4 signed request for the StartDBInstanceAutomatedBackupsReplication action to be called in the Amazon Web Services Region of the source DB instance. The presigned URL must be a valid request for the StartDBInstanceAutomatedBackupsReplication API action that can be executed in the Amazon Web Services Region that contains the source DB instance.
        public let preSignedUrl: String?
        /// The Amazon Resource Name (ARN) of the source DB instance for the replicated automated backups, for example, arn:aws:rds:us-west-2:123456789012:db:mydatabase.
        public let sourceDBInstanceArn: String

        public init(backupRetentionPeriod: Int? = nil, kmsKeyId: String? = nil, preSignedUrl: String? = nil, sourceDBInstanceArn: String) {
            self.backupRetentionPeriod = backupRetentionPeriod
            self.kmsKeyId = kmsKeyId
            self.preSignedUrl = preSignedUrl
            self.sourceDBInstanceArn = sourceDBInstanceArn
        }

        private enum CodingKeys: String, CodingKey {
            case backupRetentionPeriod = "BackupRetentionPeriod"
            case kmsKeyId = "KmsKeyId"
            case preSignedUrl = "PreSignedUrl"
            case sourceDBInstanceArn = "SourceDBInstanceArn"
        }
    }

    public struct StartDBInstanceAutomatedBackupsReplicationResult: AWSDecodableShape {
        public let dBInstanceAutomatedBackup: DBInstanceAutomatedBackup?

        public init(dBInstanceAutomatedBackup: DBInstanceAutomatedBackup? = nil) {
            self.dBInstanceAutomatedBackup = dBInstanceAutomatedBackup
        }

        private enum CodingKeys: String, CodingKey {
            case dBInstanceAutomatedBackup = "DBInstanceAutomatedBackup"
        }
    }

    public struct StartDBInstanceMessage: AWSEncodableShape {
        ///  The user-supplied instance identifier.
        public let dBInstanceIdentifier: String

        public init(dBInstanceIdentifier: String) {
            self.dBInstanceIdentifier = dBInstanceIdentifier
        }

        private enum CodingKeys: String, CodingKey {
            case dBInstanceIdentifier = "DBInstanceIdentifier"
        }
    }

    public struct StartDBInstanceResult: AWSDecodableShape {
        public let dBInstance: DBInstance?

        public init(dBInstance: DBInstance? = nil) {
            self.dBInstance = dBInstance
        }

        private enum CodingKeys: String, CodingKey {
            case dBInstance = "DBInstance"
        }
    }

    public struct StartExportTaskMessage: AWSEncodableShape {
        /// The data to be exported from the snapshot. If this parameter is not provided, all the snapshot data is exported. Valid values are the following:    database - Export all the data from a specified database.    database.table table-name - Export a table of the snapshot. This format is valid only for RDS for MySQL, RDS for MariaDB, and Aurora MySQL.    database.schema schema-name - Export a database schema of the snapshot. This format is valid only for RDS for PostgreSQL and Aurora PostgreSQL.    database.schema.table table-name - Export a table of the database schema. This format is valid only for RDS for PostgreSQL and Aurora PostgreSQL.
        @OptionalCustomCoding<StandardArrayCoder>
        public var exportOnly: [String]?
        /// A unique identifier for the snapshot export task. This ID isn't an identifier for the Amazon S3 bucket where the snapshot is to be exported to.
        public let exportTaskIdentifier: String
        /// The name of the IAM role to use for writing to the Amazon S3 bucket when exporting a snapshot.
        public let iamRoleArn: String
        /// The ID of the Amazon Web Services KMS customer master key (CMK) to use to encrypt the snapshot exported to Amazon S3. The Amazon Web Services KMS key identifier is the key ARN, key ID, alias ARN, or alias name for the Amazon Web Services KMS customer master key (CMK). The caller of this operation must be authorized to execute the following operations. These can be set in the Amazon Web Services KMS key policy:    GrantOperation.Encrypt   GrantOperation.Decrypt   GrantOperation.GenerateDataKey   GrantOperation.GenerateDataKeyWithoutPlaintext   GrantOperation.ReEncryptFrom   GrantOperation.ReEncryptTo   GrantOperation.CreateGrant   GrantOperation.DescribeKey   GrantOperation.RetireGrant
        public let kmsKeyId: String
        /// The name of the Amazon S3 bucket to export the snapshot to.
        public let s3BucketName: String
        /// The Amazon S3 bucket prefix to use as the file name and path of the exported snapshot.
        public let s3Prefix: String?
        /// The Amazon Resource Name (ARN) of the snapshot to export to Amazon S3.
        public let sourceArn: String

        public init(exportOnly: [String]? = nil, exportTaskIdentifier: String, iamRoleArn: String, kmsKeyId: String, s3BucketName: String, s3Prefix: String? = nil, sourceArn: String) {
            self.exportOnly = exportOnly
            self.exportTaskIdentifier = exportTaskIdentifier
            self.iamRoleArn = iamRoleArn
            self.kmsKeyId = kmsKeyId
            self.s3BucketName = s3BucketName
            self.s3Prefix = s3Prefix
            self.sourceArn = sourceArn
        }

        private enum CodingKeys: String, CodingKey {
            case exportOnly = "ExportOnly"
            case exportTaskIdentifier = "ExportTaskIdentifier"
            case iamRoleArn = "IamRoleArn"
            case kmsKeyId = "KmsKeyId"
            case s3BucketName = "S3BucketName"
            case s3Prefix = "S3Prefix"
            case sourceArn = "SourceArn"
        }
    }

    public struct StopActivityStreamRequest: AWSEncodableShape {
        /// Specifies whether or not the database activity stream is to stop as soon as possible, regardless of the maintenance window for the database.
        public let applyImmediately: Bool?
        /// The Amazon Resource Name (ARN) of the DB cluster for the database activity stream. For example, arn:aws:rds:us-east-1:12345667890:cluster:das-cluster.
        public let resourceArn: String

        public init(applyImmediately: Bool? = nil, resourceArn: String) {
            self.applyImmediately = applyImmediately
            self.resourceArn = resourceArn
        }

        private enum CodingKeys: String, CodingKey {
            case applyImmediately = "ApplyImmediately"
            case resourceArn = "ResourceArn"
        }
    }

    public struct StopActivityStreamResponse: AWSDecodableShape {
        /// The name of the Amazon Kinesis data stream used for the database activity stream.
        public let kinesisStreamName: String?
        /// The Amazon Web Services KMS key identifier used for encrypting messages in the database activity stream. The Amazon Web Services KMS key identifier is the key ARN, key ID, alias ARN, or alias name for the Amazon Web Services KMS customer master key (CMK).
        public let kmsKeyId: String?
        /// The status of the database activity stream.
        public let status: ActivityStreamStatus?

        public init(kinesisStreamName: String? = nil, kmsKeyId: String? = nil, status: ActivityStreamStatus? = nil) {
            self.kinesisStreamName = kinesisStreamName
            self.kmsKeyId = kmsKeyId
            self.status = status
        }

        private enum CodingKeys: String, CodingKey {
            case kinesisStreamName = "KinesisStreamName"
            case kmsKeyId = "KmsKeyId"
            case status = "Status"
        }
    }

    public struct StopDBClusterMessage: AWSEncodableShape {
        /// The DB cluster identifier of the Amazon Aurora DB cluster to be stopped. This parameter is stored as a lowercase string.
        public let dBClusterIdentifier: String

        public init(dBClusterIdentifier: String) {
            self.dBClusterIdentifier = dBClusterIdentifier
        }

        private enum CodingKeys: String, CodingKey {
            case dBClusterIdentifier = "DBClusterIdentifier"
        }
    }

    public struct StopDBClusterResult: AWSDecodableShape {
        public let dBCluster: DBCluster?

        public init(dBCluster: DBCluster? = nil) {
            self.dBCluster = dBCluster
        }

        private enum CodingKeys: String, CodingKey {
            case dBCluster = "DBCluster"
        }
    }

    public struct StopDBInstanceAutomatedBackupsReplicationMessage: AWSEncodableShape {
        /// The Amazon Resource Name (ARN) of the source DB instance for which to stop replicating automated backups, for example, arn:aws:rds:us-west-2:123456789012:db:mydatabase.
        public let sourceDBInstanceArn: String

        public init(sourceDBInstanceArn: String) {
            self.sourceDBInstanceArn = sourceDBInstanceArn
        }

        private enum CodingKeys: String, CodingKey {
            case sourceDBInstanceArn = "SourceDBInstanceArn"
        }
    }

    public struct StopDBInstanceAutomatedBackupsReplicationResult: AWSDecodableShape {
        public let dBInstanceAutomatedBackup: DBInstanceAutomatedBackup?

        public init(dBInstanceAutomatedBackup: DBInstanceAutomatedBackup? = nil) {
            self.dBInstanceAutomatedBackup = dBInstanceAutomatedBackup
        }

        private enum CodingKeys: String, CodingKey {
            case dBInstanceAutomatedBackup = "DBInstanceAutomatedBackup"
        }
    }

    public struct StopDBInstanceMessage: AWSEncodableShape {
        ///  The user-supplied instance identifier.
        public let dBInstanceIdentifier: String
        ///  The user-supplied instance identifier of the DB Snapshot created immediately before the DB instance is stopped.
        public let dBSnapshotIdentifier: String?

        public init(dBInstanceIdentifier: String, dBSnapshotIdentifier: String? = nil) {
            self.dBInstanceIdentifier = dBInstanceIdentifier
            self.dBSnapshotIdentifier = dBSnapshotIdentifier
        }

        private enum CodingKeys: String, CodingKey {
            case dBInstanceIdentifier = "DBInstanceIdentifier"
            case dBSnapshotIdentifier = "DBSnapshotIdentifier"
        }
    }

    public struct StopDBInstanceResult: AWSDecodableShape {
        public let dBInstance: DBInstance?

        public init(dBInstance: DBInstance? = nil) {
            self.dBInstance = dBInstance
        }

        private enum CodingKeys: String, CodingKey {
            case dBInstance = "DBInstance"
        }
    }

    public struct Subnet: AWSDecodableShape {
        public let subnetAvailabilityZone: AvailabilityZone?
        /// The identifier of the subnet.
        public let subnetIdentifier: String?
        /// If the subnet is associated with an Outpost, this value specifies the Outpost. For more information about RDS on Outposts, see Amazon RDS on Amazon Web Services Outposts in the Amazon RDS User Guide.
        public let subnetOutpost: Outpost?
        /// The status of the subnet.
        public let subnetStatus: String?

        public init(subnetAvailabilityZone: AvailabilityZone? = nil, subnetIdentifier: String? = nil, subnetOutpost: Outpost? = nil, subnetStatus: String? = nil) {
            self.subnetAvailabilityZone = subnetAvailabilityZone
            self.subnetIdentifier = subnetIdentifier
            self.subnetOutpost = subnetOutpost
            self.subnetStatus = subnetStatus
        }

        private enum CodingKeys: String, CodingKey {
            case subnetAvailabilityZone = "SubnetAvailabilityZone"
            case subnetIdentifier = "SubnetIdentifier"
            case subnetOutpost = "SubnetOutpost"
            case subnetStatus = "SubnetStatus"
        }
    }

    public struct Tag: AWSEncodableShape & AWSDecodableShape {
        /// A key is the required name of the tag. The string value can be from 1 to 128 Unicode characters in length and can't be prefixed with aws: or rds:. The string can only contain only the set of Unicode letters, digits, white-space, '_', '.', ':', '/', '=', '+', '-', '@' (Java regex: "^([\\p{L}\\p{Z}\\p{N}_.:/=+\\-@]*)$").
        public let key: String?
        /// A value is the optional value of the tag. The string value can be from 1 to 256 Unicode characters in length and can't be prefixed with aws: or rds:. The string can only contain only the set of Unicode letters, digits, white-space, '_', '.', ':', '/', '=', '+', '-', '@' (Java regex: "^([\\p{L}\\p{Z}\\p{N}_.:/=+\\-@]*)$").
        public let value: String?

        public init(key: String? = nil, value: String? = nil) {
            self.key = key
            self.value = value
        }

        private enum CodingKeys: String, CodingKey {
            case key = "Key"
            case value = "Value"
        }
    }

    public struct TagListMessage: AWSDecodableShape {
        public struct _TagListEncoding: ArrayCoderProperties { public static let member = "Tag" }

        /// List of tags returned by the ListTagsForResource operation.
        @OptionalCustomCoding<ArrayCoder<_TagListEncoding, Tag>>
        public var tagList: [Tag]?

        public init(tagList: [Tag]? = nil) {
            self.tagList = tagList
        }

        private enum CodingKeys: String, CodingKey {
            case tagList = "TagList"
        }
    }

    public struct TargetHealth: AWSDecodableShape {
        /// A description of the health of the RDS Proxy target. If the State is AVAILABLE, a description is not included.
        public let description: String?
        /// The reason for the current health State of the RDS Proxy target.
        public let reason: TargetHealthReason?
        /// The current state of the connection health lifecycle for the RDS Proxy target. The following is a typical lifecycle example for the states of an RDS Proxy target:   registering &gt; unavailable &gt; available &gt; unavailable &gt; available
        public let state: TargetState?

        public init(description: String? = nil, reason: TargetHealthReason? = nil, state: TargetState? = nil) {
            self.description = description
            self.reason = reason
            self.state = state
        }

        private enum CodingKeys: String, CodingKey {
            case description = "Description"
            case reason = "Reason"
            case state = "State"
        }
    }

    public struct Timezone: AWSDecodableShape {
        /// The name of the time zone.
        public let timezoneName: String?

        public init(timezoneName: String? = nil) {
            self.timezoneName = timezoneName
        }

        private enum CodingKeys: String, CodingKey {
            case timezoneName = "TimezoneName"
        }
    }

    public struct UpgradeTarget: AWSDecodableShape {
        /// A value that indicates whether the target version is applied to any source DB instances that have AutoMinorVersionUpgrade set to true.
        public let autoUpgrade: Bool?
        /// The version of the database engine that a DB instance can be upgraded to.
        public let description: String?
        /// The name of the upgrade target database engine.
        public let engine: String?
        /// The version number of the upgrade target database engine.
        public let engineVersion: String?
        /// A value that indicates whether upgrading to the target version requires upgrading the major version of the database engine.
        public let isMajorVersionUpgrade: Bool?
        /// A list of the supported DB engine modes for the target engine version.
        @OptionalCustomCoding<StandardArrayCoder>
        public var supportedEngineModes: [String]?
        /// A value that indicates whether you can use Aurora global databases with the target engine version.
        public let supportsGlobalDatabases: Bool?
        /// A value that indicates whether you can use Aurora parallel query with the target engine version.
        public let supportsParallelQuery: Bool?

        public init(autoUpgrade: Bool? = nil, description: String? = nil, engine: String? = nil, engineVersion: String? = nil, isMajorVersionUpgrade: Bool? = nil, supportedEngineModes: [String]? = nil, supportsGlobalDatabases: Bool? = nil, supportsParallelQuery: Bool? = nil) {
            self.autoUpgrade = autoUpgrade
            self.description = description
            self.engine = engine
            self.engineVersion = engineVersion
            self.isMajorVersionUpgrade = isMajorVersionUpgrade
            self.supportedEngineModes = supportedEngineModes
            self.supportsGlobalDatabases = supportsGlobalDatabases
            self.supportsParallelQuery = supportsParallelQuery
        }

        private enum CodingKeys: String, CodingKey {
            case autoUpgrade = "AutoUpgrade"
            case description = "Description"
            case engine = "Engine"
            case engineVersion = "EngineVersion"
            case isMajorVersionUpgrade = "IsMajorVersionUpgrade"
            case supportedEngineModes = "SupportedEngineModes"
            case supportsGlobalDatabases = "SupportsGlobalDatabases"
            case supportsParallelQuery = "SupportsParallelQuery"
        }
    }

    public struct UserAuthConfig: AWSEncodableShape {
        /// The type of authentication that the proxy uses for connections from the proxy to the underlying database.
        public let authScheme: AuthScheme?
        /// A user-specified description about the authentication used by a proxy to log in as a specific database user.
        public let description: String?
        /// Whether to require or disallow Amazon Web Services Identity and Access Management (IAM) authentication for connections to the proxy.
        public let iAMAuth: IAMAuthMode?
        /// The Amazon Resource Name (ARN) representing the secret that the proxy uses to authenticate to the RDS DB instance or Aurora DB cluster. These secrets are stored within Amazon Secrets Manager.
        public let secretArn: String?
        /// The name of the database user to which the proxy connects.
        public let userName: String?

        public init(authScheme: AuthScheme? = nil, description: String? = nil, iAMAuth: IAMAuthMode? = nil, secretArn: String? = nil, userName: String? = nil) {
            self.authScheme = authScheme
            self.description = description
            self.iAMAuth = iAMAuth
            self.secretArn = secretArn
            self.userName = userName
        }

        private enum CodingKeys: String, CodingKey {
            case authScheme = "AuthScheme"
            case description = "Description"
            case iAMAuth = "IAMAuth"
            case secretArn = "SecretArn"
            case userName = "UserName"
        }
    }

    public struct UserAuthConfigInfo: AWSDecodableShape {
        /// The type of authentication that the proxy uses for connections from the proxy to the underlying database.
        public let authScheme: AuthScheme?
        /// A user-specified description about the authentication used by a proxy to log in as a specific database user.
        public let description: String?
        /// Whether to require or disallow Amazon Web Services Identity and Access Management (IAM) authentication for connections to the proxy.
        public let iAMAuth: IAMAuthMode?
        /// The Amazon Resource Name (ARN) representing the secret that the proxy uses to authenticate to the RDS DB instance or Aurora DB cluster. These secrets are stored within Amazon Secrets Manager.
        public let secretArn: String?
        /// The name of the database user to which the proxy connects.
        public let userName: String?

        public init(authScheme: AuthScheme? = nil, description: String? = nil, iAMAuth: IAMAuthMode? = nil, secretArn: String? = nil, userName: String? = nil) {
            self.authScheme = authScheme
            self.description = description
            self.iAMAuth = iAMAuth
            self.secretArn = secretArn
            self.userName = userName
        }

        private enum CodingKeys: String, CodingKey {
            case authScheme = "AuthScheme"
            case description = "Description"
            case iAMAuth = "IAMAuth"
            case secretArn = "SecretArn"
            case userName = "UserName"
        }
    }

    public struct ValidDBInstanceModificationsMessage: AWSDecodableShape {
        public struct _StorageEncoding: ArrayCoderProperties { public static let member = "ValidStorageOptions" }
        public struct _ValidProcessorFeaturesEncoding: ArrayCoderProperties { public static let member = "AvailableProcessorFeature" }

        /// Valid storage options for your DB instance.
        @OptionalCustomCoding<ArrayCoder<_StorageEncoding, ValidStorageOptions>>
        public var storage: [ValidStorageOptions]?
        /// Valid processor features for your DB instance.
        @OptionalCustomCoding<ArrayCoder<_ValidProcessorFeaturesEncoding, AvailableProcessorFeature>>
        public var validProcessorFeatures: [AvailableProcessorFeature]?

        public init(storage: [ValidStorageOptions]? = nil, validProcessorFeatures: [AvailableProcessorFeature]? = nil) {
            self.storage = storage
            self.validProcessorFeatures = validProcessorFeatures
        }

        private enum CodingKeys: String, CodingKey {
            case storage = "Storage"
            case validProcessorFeatures = "ValidProcessorFeatures"
        }
    }

    public struct ValidStorageOptions: AWSDecodableShape {
        public struct _IopsToStorageRatioEncoding: ArrayCoderProperties { public static let member = "DoubleRange" }
        public struct _ProvisionedIopsEncoding: ArrayCoderProperties { public static let member = "Range" }
        public struct _StorageSizeEncoding: ArrayCoderProperties { public static let member = "Range" }

        /// The valid range of Provisioned IOPS to gibibytes of storage multiplier. For example, 3-10, which means that provisioned IOPS can be between 3 and 10 times storage.
        @OptionalCustomCoding<ArrayCoder<_IopsToStorageRatioEncoding, DoubleRange>>
        public var iopsToStorageRatio: [DoubleRange]?
        /// The valid range of provisioned IOPS. For example, 1000-20000.
        @OptionalCustomCoding<ArrayCoder<_ProvisionedIopsEncoding, Range>>
        public var provisionedIops: [Range]?
        /// The valid range of storage in gibibytes. For example, 100 to 16384.
        @OptionalCustomCoding<ArrayCoder<_StorageSizeEncoding, Range>>
        public var storageSize: [Range]?
        /// The valid storage types for your DB instance. For example, gp2, io1.
        public let storageType: String?
        /// Whether or not Amazon RDS can automatically scale storage for DB instances that use the new instance class.
        public let supportsStorageAutoscaling: Bool?

        public init(iopsToStorageRatio: [DoubleRange]? = nil, provisionedIops: [Range]? = nil, storageSize: [Range]? = nil, storageType: String? = nil, supportsStorageAutoscaling: Bool? = nil) {
            self.iopsToStorageRatio = iopsToStorageRatio
            self.provisionedIops = provisionedIops
            self.storageSize = storageSize
            self.storageType = storageType
            self.supportsStorageAutoscaling = supportsStorageAutoscaling
        }

        private enum CodingKeys: String, CodingKey {
            case iopsToStorageRatio = "IopsToStorageRatio"
            case provisionedIops = "ProvisionedIops"
            case storageSize = "StorageSize"
            case storageType = "StorageType"
            case supportsStorageAutoscaling = "SupportsStorageAutoscaling"
        }
    }

    public struct VpcSecurityGroupMembership: AWSDecodableShape {
        /// The status of the VPC security group.
        public let status: String?
        /// The name of the VPC security group.
        public let vpcSecurityGroupId: String?

        public init(status: String? = nil, vpcSecurityGroupId: String? = nil) {
            self.status = status
            self.vpcSecurityGroupId = vpcSecurityGroupId
        }

        private enum CodingKeys: String, CodingKey {
            case status = "Status"
            case vpcSecurityGroupId = "VpcSecurityGroupId"
        }
    }

    public struct VpnDetails: AWSDecodableShape {
        /// The IP address of network traffic from Amazon Web Services to your on-premises data center.
        public let vpnGatewayIp: String?
        /// The ID of the VPN.
        public let vpnId: String?
        /// The name of the VPN.
        public let vpnName: String?
        /// The preshared key (PSK) for the VPN.
        public let vpnPSK: String?
        /// The state of the VPN.
        public let vpnState: String?
        /// The IP address of network traffic from your on-premises data center. A custom AZ receives the network traffic.
        public let vpnTunnelOriginatorIP: String?

        public init(vpnGatewayIp: String? = nil, vpnId: String? = nil, vpnName: String? = nil, vpnPSK: String? = nil, vpnState: String? = nil, vpnTunnelOriginatorIP: String? = nil) {
            self.vpnGatewayIp = vpnGatewayIp
            self.vpnId = vpnId
            self.vpnName = vpnName
            self.vpnPSK = vpnPSK
            self.vpnState = vpnState
            self.vpnTunnelOriginatorIP = vpnTunnelOriginatorIP
        }

        private enum CodingKeys: String, CodingKey {
            case vpnGatewayIp = "VpnGatewayIp"
            case vpnId = "VpnId"
            case vpnName = "VpnName"
            case vpnPSK = "VpnPSK"
            case vpnState = "VpnState"
            case vpnTunnelOriginatorIP = "VpnTunnelOriginatorIP"
        }
    }
}
