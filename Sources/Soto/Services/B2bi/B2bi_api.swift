//===----------------------------------------------------------------------===//
//
// This source file is part of the Soto for AWS open source project
//
// Copyright (c) 2017-2023 the Soto project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
// See CONTRIBUTORS.txt for the list of Soto project authors
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by https://github.com/soto-project/soto-codegenerator.
// DO NOT EDIT.

@_exported import SotoCore

/// Service object for interacting with AWS B2bi service.
///
/// This is the Amazon Web Services B2B Data Interchange API Reference. It provides descriptions, API request parameters, and the XML response for each of the B2BI API actions. B2BI enables automated exchange of EDI (electronic data interchange) based business-critical transactions at cloud scale, with elasticity and pay-as-you-go pricing. Businesses use EDI documents to exchange transactional data with trading partners, such as suppliers and end customers, using standardized formats such as X12.  Rather than actually running a command, you can use the --generate-cli-skeleton parameter with any API call to generate and display a parameter template. You can then use the generated template to customize and use as input on a later command. For details, see Generate and use a parameter skeleton file.
public struct B2bi: AWSService {
    // MARK: Member variables

    /// Client used for communication with AWS
    public let client: AWSClient
    /// Service configuration
    public let config: AWSServiceConfig

    // MARK: Initialization

    /// Initialize the B2bi client
    /// - parameters:
    ///     - client: AWSClient used to process requests
    ///     - region: Region of server you want to communicate with. This will override the partition parameter.
    ///     - partition: AWS partition where service resides, standard (.aws), china (.awscn), government (.awsusgov).
    ///     - endpoint: Custom endpoint URL to use instead of standard AWS servers
    ///     - middleware: Middleware chain used to edit requests before they are sent and responses before they are decoded 
    ///     - timeout: Timeout value for HTTP requests
    ///     - byteBufferAllocator: Allocator for ByteBuffers
    ///     - options: Service options
    public init(
        client: AWSClient,
        region: SotoCore.Region? = nil,
        partition: AWSPartition = .aws,
        endpoint: String? = nil,
        middleware: AWSMiddlewareProtocol? = nil,
        timeout: TimeAmount? = nil,
        byteBufferAllocator: ByteBufferAllocator = ByteBufferAllocator(),
        options: AWSServiceConfig.Options = []
    ) {
        self.client = client
        self.config = AWSServiceConfig(
            region: region,
            partition: region?.partition ?? partition,
            amzTarget: "B2BI",
            serviceName: "B2bi",
            serviceIdentifier: "b2bi",
            serviceProtocol: .json(version: "1.0"),
            apiVersion: "2022-06-23",
            endpoint: endpoint,
            errorType: B2biErrorType.self,
            middleware: middleware,
            timeout: timeout,
            byteBufferAllocator: byteBufferAllocator,
            options: options
        )
    }





    // MARK: API Calls

    /// Instantiates a capability based on the specified parameters. A trading capability contains the information required to transform incoming EDI documents into JSON or XML outputs.
    @Sendable
    public func createCapability(_ input: CreateCapabilityRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> CreateCapabilityResponse {
        return try await self.client.execute(
            operation: "CreateCapability", 
            path: "/capabilities", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Creates a partnership between a customer and a trading partner, based on the supplied parameters. A partnership represents the connection between you and your trading partner. It ties together a profile and one or more trading capabilities.
    @Sendable
    public func createPartnership(_ input: CreatePartnershipRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> CreatePartnershipResponse {
        return try await self.client.execute(
            operation: "CreatePartnership", 
            path: "/partnerships", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Creates a customer profile. You can have up to five customer profiles, each representing a distinct private network. A profile is the mechanism used to create the concept of a private network.
    @Sendable
    public func createProfile(_ input: CreateProfileRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> CreateProfileResponse {
        return try await self.client.execute(
            operation: "CreateProfile", 
            path: "/profiles", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Creates a transformer. A transformer describes how to process the incoming EDI documents and extract the necessary information to the output file.
    @Sendable
    public func createTransformer(_ input: CreateTransformerRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> CreateTransformerResponse {
        return try await self.client.execute(
            operation: "CreateTransformer", 
            path: "/transformers", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Deletes the specified capability. A trading capability contains the information required to transform incoming EDI documents into JSON or XML outputs.
    @Sendable
    public func deleteCapability(_ input: DeleteCapabilityRequest, logger: Logger = AWSClient.loggingDisabled) async throws {
        return try await self.client.execute(
            operation: "DeleteCapability", 
            path: "/capabilities/{capabilityId}", 
            httpMethod: .DELETE, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Deletes the specified partnership. A partnership represents the connection between you and your trading partner. It ties together a profile and one or more trading capabilities.
    @Sendable
    public func deletePartnership(_ input: DeletePartnershipRequest, logger: Logger = AWSClient.loggingDisabled) async throws {
        return try await self.client.execute(
            operation: "DeletePartnership", 
            path: "/partnerships/{partnershipId}", 
            httpMethod: .DELETE, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Deletes the specified profile. A profile is the mechanism used to create the concept of a private network.
    @Sendable
    public func deleteProfile(_ input: DeleteProfileRequest, logger: Logger = AWSClient.loggingDisabled) async throws {
        return try await self.client.execute(
            operation: "DeleteProfile", 
            path: "/profiles/{profileId}", 
            httpMethod: .DELETE, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Deletes the specified transformer. A transformer describes how to process the incoming EDI documents and extract the necessary information to the output file.
    @Sendable
    public func deleteTransformer(_ input: DeleteTransformerRequest, logger: Logger = AWSClient.loggingDisabled) async throws {
        return try await self.client.execute(
            operation: "DeleteTransformer", 
            path: "/transformers/{transformerId}", 
            httpMethod: .DELETE, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Retrieves the details for the specified capability. A trading capability contains the information required to transform incoming EDI documents into JSON or XML outputs.
    @Sendable
    public func getCapability(_ input: GetCapabilityRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> GetCapabilityResponse {
        return try await self.client.execute(
            operation: "GetCapability", 
            path: "/capabilities/{capabilityId}", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Retrieves the details for a partnership, based on the partner and profile IDs specified. A partnership represents the connection between you and your trading partner. It ties together a profile and one or more trading capabilities.
    @Sendable
    public func getPartnership(_ input: GetPartnershipRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> GetPartnershipResponse {
        return try await self.client.execute(
            operation: "GetPartnership", 
            path: "/partnerships/{partnershipId}", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Retrieves the details for the profile specified by the profile ID. A profile is the mechanism used to create the concept of a private network.
    @Sendable
    public func getProfile(_ input: GetProfileRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> GetProfileResponse {
        return try await self.client.execute(
            operation: "GetProfile", 
            path: "/profiles/{profileId}", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Retrieves the details for the transformer specified by the transformer ID. A transformer describes how to process the incoming EDI documents and extract the necessary information to the output file.
    @Sendable
    public func getTransformer(_ input: GetTransformerRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> GetTransformerResponse {
        return try await self.client.execute(
            operation: "GetTransformer", 
            path: "/transformers/{transformerId}", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Returns the details of the transformer run, based on the Transformer job ID.
    @Sendable
    public func getTransformerJob(_ input: GetTransformerJobRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> GetTransformerJobResponse {
        return try await self.client.execute(
            operation: "GetTransformerJob", 
            path: "/transformer-jobs/{transformerJobId}", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Lists the capabilities associated with your Amazon Web Services account for your current or specified region. A trading capability contains the information required to transform incoming EDI documents into JSON or XML outputs.
    @Sendable
    public func listCapabilities(_ input: ListCapabilitiesRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> ListCapabilitiesResponse {
        return try await self.client.execute(
            operation: "ListCapabilities", 
            path: "/capabilities", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Lists the partnerships associated with your Amazon Web Services account for your current or specified region. A partnership represents the connection between you and your trading partner. It ties together a profile and one or more trading capabilities.
    @Sendable
    public func listPartnerships(_ input: ListPartnershipsRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> ListPartnershipsResponse {
        return try await self.client.execute(
            operation: "ListPartnerships", 
            path: "/partnerships", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Lists the profiles associated with your Amazon Web Services account for your current or specified region. A profile is the mechanism used to create the concept of a private network.
    @Sendable
    public func listProfiles(_ input: ListProfilesRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> ListProfilesResponse {
        return try await self.client.execute(
            operation: "ListProfiles", 
            path: "/profiles", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Lists all of the tags associated with the Amazon Resource Name (ARN) that you specify. The resource can be a capability, partnership, profile, or transformer.
    @Sendable
    public func listTagsForResource(_ input: ListTagsForResourceRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> ListTagsForResourceResponse {
        return try await self.client.execute(
            operation: "ListTagsForResource", 
            path: "/tags/{ResourceARN}", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Lists the available transformers. A transformer describes how to process the incoming EDI documents and extract the necessary information to the output file.
    @Sendable
    public func listTransformers(_ input: ListTransformersRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> ListTransformersResponse {
        return try await self.client.execute(
            operation: "ListTransformers", 
            path: "/transformers", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Runs a job, using a transformer, to parse input EDI (electronic data interchange) file into the output structures used by Amazon Web Services B2BI Data Interchange. If you only want to transform EDI (electronic data interchange) documents, you don't need to create profiles, partnerships or capabilities. Just create and configure a transformer, and then run the StartTransformerJob API to process your files.
    @Sendable
    public func startTransformerJob(_ input: StartTransformerJobRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> StartTransformerJobResponse {
        return try await self.client.execute(
            operation: "StartTransformerJob", 
            path: "/transformer-jobs", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Attaches a key-value pair to a resource, as identified by its Amazon Resource Name (ARN). Resources are capability, partnership, profile, transformers and other entities. There is no response returned from this call.
    @Sendable
    public func tagResource(_ input: TagResourceRequest, logger: Logger = AWSClient.loggingDisabled) async throws {
        return try await self.client.execute(
            operation: "TagResource", 
            path: "/tags/{ResourceARN}", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Maps the input file according to the provided template file. The API call downloads the file contents from the Amazon S3 location, and passes the contents in as a string, to the inputFileContent parameter.
    @Sendable
    public func testMapping(_ input: TestMappingRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> TestMappingResponse {
        return try await self.client.execute(
            operation: "TestMapping", 
            path: "/testmapping", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Parses the input EDI (electronic data interchange) file. The input file has a file size limit of 250 KB.
    @Sendable
    public func testParsing(_ input: TestParsingRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> TestParsingResponse {
        return try await self.client.execute(
            operation: "TestParsing", 
            path: "/testparsing", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Detaches a key-value pair from the specified resource, as identified by its Amazon Resource Name (ARN). Resources are capability, partnership, profile, transformers and other entities.
    @Sendable
    public func untagResource(_ input: UntagResourceRequest, logger: Logger = AWSClient.loggingDisabled) async throws {
        return try await self.client.execute(
            operation: "UntagResource", 
            path: "/tags/{ResourceARN}", 
            httpMethod: .DELETE, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Updates some of the parameters for a capability, based on the specified parameters. A trading capability contains the information required to transform incoming EDI documents into JSON or XML outputs.
    @Sendable
    public func updateCapability(_ input: UpdateCapabilityRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> UpdateCapabilityResponse {
        return try await self.client.execute(
            operation: "UpdateCapability", 
            path: "/capabilities/{capabilityId}", 
            httpMethod: .PATCH, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Updates some of the parameters for a partnership between a customer and trading partner. A partnership represents the connection between you and your trading partner. It ties together a profile and one or more trading capabilities.
    @Sendable
    public func updatePartnership(_ input: UpdatePartnershipRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> UpdatePartnershipResponse {
        return try await self.client.execute(
            operation: "UpdatePartnership", 
            path: "/partnerships/{partnershipId}", 
            httpMethod: .PATCH, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Updates the specified parameters for a profile. A profile is the mechanism used to create the concept of a private network.
    @Sendable
    public func updateProfile(_ input: UpdateProfileRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> UpdateProfileResponse {
        return try await self.client.execute(
            operation: "UpdateProfile", 
            path: "/profiles/{profileId}", 
            httpMethod: .PATCH, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Updates the specified parameters for a transformer. A transformer describes how to process the incoming EDI documents and extract the necessary information to the output file.
    @Sendable
    public func updateTransformer(_ input: UpdateTransformerRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> UpdateTransformerResponse {
        return try await self.client.execute(
            operation: "UpdateTransformer", 
            path: "/transformers/{transformerId}", 
            httpMethod: .PATCH, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
}

extension B2bi {
    /// Initializer required by `AWSService.with(middlewares:timeout:byteBufferAllocator:options)`. You are not able to use this initializer directly as there are not public
    /// initializers for `AWSServiceConfig.Patch`. Please use `AWSService.with(middlewares:timeout:byteBufferAllocator:options)` instead.
    public init(from: B2bi, patch: AWSServiceConfig.Patch) {
        self.client = from.client
        self.config = from.config.with(patch: patch)
    }
}

// MARK: Paginators

@available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
extension B2bi {
    /// Lists the capabilities associated with your Amazon Web Services account for your current or specified region. A trading capability contains the information required to transform incoming EDI documents into JSON or XML outputs.
    /// Return PaginatorSequence for operation.
    ///
    /// - Parameters:
    ///   - input: Input for request
    ///   - logger: Logger used flot logging
    public func listCapabilitiesPaginator(
        _ input: ListCapabilitiesRequest,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<ListCapabilitiesRequest, ListCapabilitiesResponse> {
        return .init(
            input: input,
            command: self.listCapabilities,
            inputKey: \ListCapabilitiesRequest.nextToken,
            outputKey: \ListCapabilitiesResponse.nextToken,
            logger: logger
        )
    }

    /// Lists the partnerships associated with your Amazon Web Services account for your current or specified region. A partnership represents the connection between you and your trading partner. It ties together a profile and one or more trading capabilities.
    /// Return PaginatorSequence for operation.
    ///
    /// - Parameters:
    ///   - input: Input for request
    ///   - logger: Logger used flot logging
    public func listPartnershipsPaginator(
        _ input: ListPartnershipsRequest,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<ListPartnershipsRequest, ListPartnershipsResponse> {
        return .init(
            input: input,
            command: self.listPartnerships,
            inputKey: \ListPartnershipsRequest.nextToken,
            outputKey: \ListPartnershipsResponse.nextToken,
            logger: logger
        )
    }

    /// Lists the profiles associated with your Amazon Web Services account for your current or specified region. A profile is the mechanism used to create the concept of a private network.
    /// Return PaginatorSequence for operation.
    ///
    /// - Parameters:
    ///   - input: Input for request
    ///   - logger: Logger used flot logging
    public func listProfilesPaginator(
        _ input: ListProfilesRequest,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<ListProfilesRequest, ListProfilesResponse> {
        return .init(
            input: input,
            command: self.listProfiles,
            inputKey: \ListProfilesRequest.nextToken,
            outputKey: \ListProfilesResponse.nextToken,
            logger: logger
        )
    }

    /// Lists the available transformers. A transformer describes how to process the incoming EDI documents and extract the necessary information to the output file.
    /// Return PaginatorSequence for operation.
    ///
    /// - Parameters:
    ///   - input: Input for request
    ///   - logger: Logger used flot logging
    public func listTransformersPaginator(
        _ input: ListTransformersRequest,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<ListTransformersRequest, ListTransformersResponse> {
        return .init(
            input: input,
            command: self.listTransformers,
            inputKey: \ListTransformersRequest.nextToken,
            outputKey: \ListTransformersResponse.nextToken,
            logger: logger
        )
    }
}

extension B2bi.ListCapabilitiesRequest: AWSPaginateToken {
    public func usingPaginationToken(_ token: String) -> B2bi.ListCapabilitiesRequest {
        return .init(
            maxResults: self.maxResults,
            nextToken: token
        )
    }
}

extension B2bi.ListPartnershipsRequest: AWSPaginateToken {
    public func usingPaginationToken(_ token: String) -> B2bi.ListPartnershipsRequest {
        return .init(
            maxResults: self.maxResults,
            nextToken: token,
            profileId: self.profileId
        )
    }
}

extension B2bi.ListProfilesRequest: AWSPaginateToken {
    public func usingPaginationToken(_ token: String) -> B2bi.ListProfilesRequest {
        return .init(
            maxResults: self.maxResults,
            nextToken: token
        )
    }
}

extension B2bi.ListTransformersRequest: AWSPaginateToken {
    public func usingPaginationToken(_ token: String) -> B2bi.ListTransformersRequest {
        return .init(
            maxResults: self.maxResults,
            nextToken: token
        )
    }
}
