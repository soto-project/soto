//===----------------------------------------------------------------------===//
//
// This source file is part of the Soto for AWS open source project
//
// Copyright (c) 2017-2022 the Soto project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
// See CONTRIBUTORS.txt for the list of Soto project authors
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by https://github.com/soto-project/soto-codegenerator.
// DO NOT EDIT.

import Foundation
import SotoCore

extension SimSpaceWeaver {
    // MARK: Enums

    public enum ClockStatus: String, CustomStringConvertible, Codable, _SotoSendable {
        case started = "STARTED"
        case starting = "STARTING"
        case stopped = "STOPPED"
        case stopping = "STOPPING"
        case unknown = "UNKNOWN"
        public var description: String { return self.rawValue }
    }

    public enum ClockTargetStatus: String, CustomStringConvertible, Codable, _SotoSendable {
        case started = "STARTED"
        case stopped = "STOPPED"
        case unknown = "UNKNOWN"
        public var description: String { return self.rawValue }
    }

    public enum LifecycleManagementStrategy: String, CustomStringConvertible, Codable, _SotoSendable {
        case byRequest = "ByRequest"
        case bySpatialSubdivision = "BySpatialSubdivision"
        case perWorker = "PerWorker"
        case unknown = "Unknown"
        public var description: String { return self.rawValue }
    }

    public enum SimulationAppStatus: String, CustomStringConvertible, Codable, _SotoSendable {
        case error = "ERROR"
        case started = "STARTED"
        case starting = "STARTING"
        case stopped = "STOPPED"
        case stopping = "STOPPING"
        case unknown = "UNKNOWN"
        public var description: String { return self.rawValue }
    }

    public enum SimulationAppTargetStatus: String, CustomStringConvertible, Codable, _SotoSendable {
        case started = "STARTED"
        case stopped = "STOPPED"
        case unknown = "UNKNOWN"
        public var description: String { return self.rawValue }
    }

    public enum SimulationStatus: String, CustomStringConvertible, Codable, _SotoSendable {
        case deleted = "DELETED"
        case deleting = "DELETING"
        case failed = "FAILED"
        case started = "STARTED"
        case starting = "STARTING"
        case stopped = "STOPPED"
        case stopping = "STOPPING"
        case unknown = "UNKNOWN"
        public var description: String { return self.rawValue }
    }

    public enum SimulationTargetStatus: String, CustomStringConvertible, Codable, _SotoSendable {
        case deleted = "DELETED"
        case started = "STARTED"
        case stopped = "STOPPED"
        case unknown = "UNKNOWN"
        public var description: String { return self.rawValue }
    }

    // MARK: Shapes

    public struct CloudWatchLogsLogGroup: AWSDecodableShape {
        /// The Amazon Resource Name (ARN) of the Amazon CloudWatch Logs log group for the simulation. For more information about ARNs, see Amazon Resource Names (ARNs) in the Amazon Web Services General Reference. For more information about log groups, see Working with log groups and log streams in the Amazon CloudWatch Logs User Guide.
        public let logGroupArn: String?

        public init(logGroupArn: String? = nil) {
            self.logGroupArn = logGroupArn
        }

        private enum CodingKeys: String, CodingKey {
            case logGroupArn = "LogGroupArn"
        }
    }

    public struct DeleteAppInput: AWSEncodableShape {
        public static var _encoding = [
            AWSMemberEncoding(label: "app", location: .querystring("app")),
            AWSMemberEncoding(label: "domain", location: .querystring("domain")),
            AWSMemberEncoding(label: "simulation", location: .querystring("simulation"))
        ]

        /// The name of the app.
        public let app: String
        /// The name of the domain of the app.
        public let domain: String
        /// The name of the simulation of the app.
        public let simulation: String

        public init(app: String, domain: String, simulation: String) {
            self.app = app
            self.domain = domain
            self.simulation = simulation
        }

        public func validate(name: String) throws {
            try self.validate(self.app, name: "app", parent: name, max: 64)
            try self.validate(self.app, name: "app", parent: name, min: 1)
            try self.validate(self.app, name: "app", parent: name, pattern: "^[a-zA-Z0-9_.-]+$")
            try self.validate(self.domain, name: "domain", parent: name, max: 64)
            try self.validate(self.domain, name: "domain", parent: name, min: 1)
            try self.validate(self.domain, name: "domain", parent: name, pattern: "^[a-zA-Z0-9_.-]+$")
            try self.validate(self.simulation, name: "simulation", parent: name, max: 64)
            try self.validate(self.simulation, name: "simulation", parent: name, min: 1)
            try self.validate(self.simulation, name: "simulation", parent: name, pattern: "^[a-zA-Z0-9_.-]+$")
        }

        private enum CodingKeys: CodingKey {}
    }

    public struct DeleteAppOutput: AWSDecodableShape {
        public init() {}
    }

    public struct DeleteSimulationInput: AWSEncodableShape {
        public static var _encoding = [
            AWSMemberEncoding(label: "simulation", location: .querystring("simulation"))
        ]

        /// The name of the simulation.
        public let simulation: String

        public init(simulation: String) {
            self.simulation = simulation
        }

        public func validate(name: String) throws {
            try self.validate(self.simulation, name: "simulation", parent: name, max: 64)
            try self.validate(self.simulation, name: "simulation", parent: name, min: 1)
            try self.validate(self.simulation, name: "simulation", parent: name, pattern: "^[a-zA-Z0-9_.-]+$")
        }

        private enum CodingKeys: CodingKey {}
    }

    public struct DeleteSimulationOutput: AWSDecodableShape {
        public init() {}
    }

    public struct DescribeAppInput: AWSEncodableShape {
        public static var _encoding = [
            AWSMemberEncoding(label: "app", location: .querystring("app")),
            AWSMemberEncoding(label: "domain", location: .querystring("domain")),
            AWSMemberEncoding(label: "simulation", location: .querystring("simulation"))
        ]

        /// The name of the app.
        public let app: String
        /// The name of the domain of the app.
        public let domain: String
        /// The name of the simulation of the app.
        public let simulation: String

        public init(app: String, domain: String, simulation: String) {
            self.app = app
            self.domain = domain
            self.simulation = simulation
        }

        public func validate(name: String) throws {
            try self.validate(self.app, name: "app", parent: name, max: 64)
            try self.validate(self.app, name: "app", parent: name, min: 1)
            try self.validate(self.app, name: "app", parent: name, pattern: "^[a-zA-Z0-9_.-]+$")
            try self.validate(self.domain, name: "domain", parent: name, max: 64)
            try self.validate(self.domain, name: "domain", parent: name, min: 1)
            try self.validate(self.domain, name: "domain", parent: name, pattern: "^[a-zA-Z0-9_.-]+$")
            try self.validate(self.simulation, name: "simulation", parent: name, max: 64)
            try self.validate(self.simulation, name: "simulation", parent: name, min: 1)
            try self.validate(self.simulation, name: "simulation", parent: name, pattern: "^[a-zA-Z0-9_.-]+$")
        }

        private enum CodingKeys: CodingKey {}
    }

    public struct DescribeAppOutput: AWSDecodableShape {
        /// The description of the app.
        public let description: String?
        /// The name of the domain of the app.
        public let domain: String?
        /// Information about the network endpoint for the custom app. You can use the endpoint to connect to the custom app.
        public let endpointInfo: SimulationAppEndpointInfo?
        public let launchOverrides: LaunchOverrides?
        /// The name of the app.
        public let name: String?
        /// The name of the simulation of the app.
        public let simulation: String?
        /// The current lifecycle state of the custom app.
        public let status: SimulationAppStatus?
        /// The desired lifecycle state of the custom app.
        public let targetStatus: SimulationAppTargetStatus?

        public init(description: String? = nil, domain: String? = nil, endpointInfo: SimulationAppEndpointInfo? = nil, launchOverrides: LaunchOverrides? = nil, name: String? = nil, simulation: String? = nil, status: SimulationAppStatus? = nil, targetStatus: SimulationAppTargetStatus? = nil) {
            self.description = description
            self.domain = domain
            self.endpointInfo = endpointInfo
            self.launchOverrides = launchOverrides
            self.name = name
            self.simulation = simulation
            self.status = status
            self.targetStatus = targetStatus
        }

        private enum CodingKeys: String, CodingKey {
            case description = "Description"
            case domain = "Domain"
            case endpointInfo = "EndpointInfo"
            case launchOverrides = "LaunchOverrides"
            case name = "Name"
            case simulation = "Simulation"
            case status = "Status"
            case targetStatus = "TargetStatus"
        }
    }

    public struct DescribeSimulationInput: AWSEncodableShape {
        public static var _encoding = [
            AWSMemberEncoding(label: "simulation", location: .querystring("simulation"))
        ]

        /// The name of the simulation.
        public let simulation: String

        public init(simulation: String) {
            self.simulation = simulation
        }

        public func validate(name: String) throws {
            try self.validate(self.simulation, name: "simulation", parent: name, max: 64)
            try self.validate(self.simulation, name: "simulation", parent: name, min: 1)
            try self.validate(self.simulation, name: "simulation", parent: name, pattern: "^[a-zA-Z0-9_.-]+$")
        }

        private enum CodingKeys: CodingKey {}
    }

    public struct DescribeSimulationOutput: AWSDecodableShape {
        /// The Amazon Resource Name (ARN) of the simulation. For more information about ARNs, see Amazon Resource Names (ARNs) in the Amazon Web Services General Reference.
        public let arn: String?
        /// The time when the simulation was created, expressed as the  number of seconds and milliseconds in UTC since the Unix epoch (0:0:0.000, January 1, 1970).
        public let creationTime: Date?
        /// The description of the simulation.
        public let description: String?
        /// A universally unique identifier (UUID) for this simulation.
        public let executionId: String?
        /// A collection of additional state information, such as
        /// domain and clock configuration.
        public let liveSimulationState: LiveSimulationState?
        /// Settings that control how SimSpace Weaver handles your simulation log data.
        public let loggingConfiguration: LoggingConfiguration?
        /// The maximum running time of the simulation, specified as a number of months (m or M), hours (h or H), or days (d or D). The simulation  stops when it reaches this limit.
        public let maximumDuration: String?
        /// The name of the simulation.
        public let name: String?
        /// The Amazon Resource Name (ARN) of the Identity and Access Management (IAM) role that the simulation assumes to perform actions. For more information about ARNs, see Amazon Resource Names (ARNs) in the Amazon Web Services General Reference. For more information about IAM roles, see IAM roles in the  Identity and Access Management User Guide.
        public let roleArn: String?
        /// An error message that SimSpace Weaver returns only if there is a problem with the simulation schema.
        public let schemaError: String?
        /// The location of the simulation schema in Amazon Simple Storage Service (Amazon S3). For more information about Amazon S3, see the  Amazon Simple Storage Service User Guide .
        public let schemaS3Location: S3Location?
        /// The current lifecycle state of the simulation.
        public let status: SimulationStatus?
        /// The desired lifecycle state of the simulation.
        public let targetStatus: SimulationTargetStatus?

        public init(arn: String? = nil, creationTime: Date? = nil, description: String? = nil, executionId: String? = nil, liveSimulationState: LiveSimulationState? = nil, loggingConfiguration: LoggingConfiguration? = nil, maximumDuration: String? = nil, name: String? = nil, roleArn: String? = nil, schemaError: String? = nil, schemaS3Location: S3Location? = nil, status: SimulationStatus? = nil, targetStatus: SimulationTargetStatus? = nil) {
            self.arn = arn
            self.creationTime = creationTime
            self.description = description
            self.executionId = executionId
            self.liveSimulationState = liveSimulationState
            self.loggingConfiguration = loggingConfiguration
            self.maximumDuration = maximumDuration
            self.name = name
            self.roleArn = roleArn
            self.schemaError = schemaError
            self.schemaS3Location = schemaS3Location
            self.status = status
            self.targetStatus = targetStatus
        }

        private enum CodingKeys: String, CodingKey {
            case arn = "Arn"
            case creationTime = "CreationTime"
            case description = "Description"
            case executionId = "ExecutionId"
            case liveSimulationState = "LiveSimulationState"
            case loggingConfiguration = "LoggingConfiguration"
            case maximumDuration = "MaximumDuration"
            case name = "Name"
            case roleArn = "RoleArn"
            case schemaError = "SchemaError"
            case schemaS3Location = "SchemaS3Location"
            case status = "Status"
            case targetStatus = "TargetStatus"
        }
    }

    public struct Domain: AWSDecodableShape {
        /// The type of lifecycle management for apps in the domain. This value indicates whether apps in this domain are managed (SimSpace Weaver starts and stops the apps) or unmanaged (you must start and stop the apps).  Lifecycle types     PerWorker – Managed: SimSpace Weaver starts 1 app on each worker    BySpatialSubdivision – Managed: SimSpace Weaver starts 1 app for each spatial partition    ByRequest – Unmanaged: You use the StartApp API to start the apps and use the StopApp API to stop the apps.    The lifecycle types will change when the service is released for general availability (GA).
        public let lifecycle: LifecycleManagementStrategy?
        /// The name of the domain.
        public let name: String?

        public init(lifecycle: LifecycleManagementStrategy? = nil, name: String? = nil) {
            self.lifecycle = lifecycle
            self.name = name
        }

        private enum CodingKeys: String, CodingKey {
            case lifecycle = "Lifecycle"
            case name = "Name"
        }
    }

    public struct LaunchOverrides: AWSEncodableShape & AWSDecodableShape {
        /// App launch commands and command line parameters that override the launch command configured in the simulation schema.
        public let launchCommands: [String]?

        public init(launchCommands: [String]? = nil) {
            self.launchCommands = launchCommands
        }

        public func validate(name: String) throws {
            try self.launchCommands?.forEach {
                try validate($0, name: "launchCommands[]", parent: name, max: 1600)
                try validate($0, name: "launchCommands[]", parent: name, min: 1)
            }
        }

        private enum CodingKeys: String, CodingKey {
            case launchCommands = "LaunchCommands"
        }
    }

    public struct ListAppsInput: AWSEncodableShape {
        public static var _encoding = [
            AWSMemberEncoding(label: "domain", location: .querystring("domain")),
            AWSMemberEncoding(label: "maxResults", location: .querystring("maxResults")),
            AWSMemberEncoding(label: "nextToken", location: .querystring("nextToken")),
            AWSMemberEncoding(label: "simulation", location: .querystring("simulation"))
        ]

        /// The name of the domain that you want to list apps for.
        public let domain: String?
        /// The maximum number of apps to list.
        public let maxResults: Int?
        /// If SimSpace Weaver returns nextToken, there are more results available.  The value of nextToken is a unique pagination token for each page. To retrieve the next page,  call the operation again using the returned token. Keep all other arguments unchanged. If no results remain,  nextToken is set to null. Each pagination token expires after 24 hours.  If you provide a token that isn't valid, you receive an HTTP 400 ValidationException error.
        public let nextToken: String?
        /// The name of the simulation that you want to list apps for.
        public let simulation: String

        public init(domain: String? = nil, maxResults: Int? = nil, nextToken: String? = nil, simulation: String) {
            self.domain = domain
            self.maxResults = maxResults
            self.nextToken = nextToken
            self.simulation = simulation
        }

        public func validate(name: String) throws {
            try self.validate(self.domain, name: "domain", parent: name, max: 64)
            try self.validate(self.domain, name: "domain", parent: name, min: 1)
            try self.validate(self.domain, name: "domain", parent: name, pattern: "^[a-zA-Z0-9_.-]+$")
            try self.validate(self.maxResults, name: "maxResults", parent: name, min: 1)
            try self.validate(self.simulation, name: "simulation", parent: name, max: 64)
            try self.validate(self.simulation, name: "simulation", parent: name, min: 1)
            try self.validate(self.simulation, name: "simulation", parent: name, pattern: "^[a-zA-Z0-9_.-]+$")
        }

        private enum CodingKeys: CodingKey {}
    }

    public struct ListAppsOutput: AWSDecodableShape {
        /// The list of apps for the given simulation and domain.
        public let apps: [SimulationAppMetadata]?
        /// If SimSpace Weaver returns nextToken, there are more results available.  The value of nextToken is a unique pagination token for each page. To retrieve the next page,  call the operation again using the returned token. Keep all other arguments unchanged. If no results remain,  nextToken is set to null. Each pagination token expires after 24 hours.  If you provide a token that isn't valid, you receive an HTTP 400 ValidationException error.
        public let nextToken: String?

        public init(apps: [SimulationAppMetadata]? = nil, nextToken: String? = nil) {
            self.apps = apps
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case apps = "Apps"
            case nextToken = "NextToken"
        }
    }

    public struct ListSimulationsInput: AWSEncodableShape {
        public static var _encoding = [
            AWSMemberEncoding(label: "maxResults", location: .querystring("maxResults")),
            AWSMemberEncoding(label: "nextToken", location: .querystring("nextToken"))
        ]

        /// The maximum number of simulations to list.
        public let maxResults: Int?
        /// If SimSpace Weaver returns nextToken, there are more results available.  The value of nextToken is a unique pagination token for each page. To retrieve the next page,  call the operation again using the returned token. Keep all other arguments unchanged. If no results remain,  nextToken is set to null. Each pagination token expires after 24 hours.  If you provide a token that isn't valid, you receive an HTTP 400 ValidationException error.
        public let nextToken: String?

        public init(maxResults: Int? = nil, nextToken: String? = nil) {
            self.maxResults = maxResults
            self.nextToken = nextToken
        }

        public func validate(name: String) throws {
            try self.validate(self.maxResults, name: "maxResults", parent: name, min: 1)
        }

        private enum CodingKeys: CodingKey {}
    }

    public struct ListSimulationsOutput: AWSDecodableShape {
        /// If SimSpace Weaver returns nextToken, there are more results available.  The value of nextToken is a unique pagination token for each page. To retrieve the next page,  call the operation again using the returned token. Keep all other arguments unchanged. If no results remain,  nextToken is set to null. Each pagination token expires after 24 hours.  If you provide a token that isn't valid, you receive an HTTP 400 ValidationException error.
        public let nextToken: String?
        /// The list of simulations.
        public let simulations: [SimulationMetadata]?

        public init(nextToken: String? = nil, simulations: [SimulationMetadata]? = nil) {
            self.nextToken = nextToken
            self.simulations = simulations
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "NextToken"
            case simulations = "Simulations"
        }
    }

    public struct ListTagsForResourceInput: AWSEncodableShape {
        public static var _encoding = [
            AWSMemberEncoding(label: "resourceArn", location: .uri("ResourceArn"))
        ]

        /// The Amazon Resource Name (ARN) of the resource. For more information about ARNs, see Amazon Resource Names (ARNs) in the Amazon Web Services General Reference.
        public let resourceArn: String

        public init(resourceArn: String) {
            self.resourceArn = resourceArn
        }

        public func validate(name: String) throws {
            try self.validate(self.resourceArn, name: "resourceArn", parent: name, max: 1600)
            try self.validate(self.resourceArn, name: "resourceArn", parent: name, pattern: "^arn:(?:aws|aws-cn):simspaceweaver:([a-z]{2}-[a-z]+-\\d{1}):(\\d{12})?:([a-z]+)\\/(.+)$")
        }

        private enum CodingKeys: CodingKey {}
    }

    public struct ListTagsForResourceOutput: AWSDecodableShape {
        /// The list of tags for the resource.
        public let tags: [String: String]?

        public init(tags: [String: String]? = nil) {
            self.tags = tags
        }

        private enum CodingKeys: String, CodingKey {
            case tags = "Tags"
        }
    }

    public struct LiveSimulationState: AWSDecodableShape {
        /// A list of simulation clocks.  At this time, a simulation has only one clock.
        public let clocks: [SimulationClock]?
        /// A list of domains for the simulation. For more information about domains, see Key concepts in the Amazon Web Services SimSpace Weaver User Guide.
        public let domains: [Domain]?

        public init(clocks: [SimulationClock]? = nil, domains: [Domain]? = nil) {
            self.clocks = clocks
            self.domains = domains
        }

        private enum CodingKeys: String, CodingKey {
            case clocks = "Clocks"
            case domains = "Domains"
        }
    }

    public struct LogDestination: AWSDecodableShape {
        /// An Amazon CloudWatch Logs log group that stores simulation log data. For more information about log groups, see Working with log groups and log streams in the Amazon CloudWatch Logs User Guide.
        public let cloudWatchLogsLogGroup: CloudWatchLogsLogGroup?

        public init(cloudWatchLogsLogGroup: CloudWatchLogsLogGroup? = nil) {
            self.cloudWatchLogsLogGroup = cloudWatchLogsLogGroup
        }

        private enum CodingKeys: String, CodingKey {
            case cloudWatchLogsLogGroup = "CloudWatchLogsLogGroup"
        }
    }

    public struct LoggingConfiguration: AWSDecodableShape {
        /// A list of the locations where SimSpace Weaver sends simulation log data.
        public let destinations: [LogDestination]?

        public init(destinations: [LogDestination]? = nil) {
            self.destinations = destinations
        }

        private enum CodingKeys: String, CodingKey {
            case destinations = "Destinations"
        }
    }

    public struct S3Location: AWSEncodableShape & AWSDecodableShape {
        /// The name of an Amazon S3 bucket. For more information about buckets, see Creating, configuring, and working with Amazon S3 buckets in the Amazon Simple Storage Service User Guide.
        public let bucketName: String?
        /// The key name of an object in Amazon S3. For more information about Amazon S3 objects and object keys, see Uploading, downloading, and working with objects in Amazon S3 in the Amazon Simple Storage Service User Guide.
        public let objectKey: String?

        public init(bucketName: String? = nil, objectKey: String? = nil) {
            self.bucketName = bucketName
            self.objectKey = objectKey
        }

        public func validate(name: String) throws {
            try self.validate(self.bucketName, name: "bucketName", parent: name, max: 63)
            try self.validate(self.bucketName, name: "bucketName", parent: name, min: 3)
            try self.validate(self.objectKey, name: "objectKey", parent: name, max: 1024)
            try self.validate(self.objectKey, name: "objectKey", parent: name, min: 1)
        }

        private enum CodingKeys: String, CodingKey {
            case bucketName = "BucketName"
            case objectKey = "ObjectKey"
        }
    }

    public struct SimulationAppEndpointInfo: AWSDecodableShape {
        /// The IP address of the app. SimSpace Weaver dynamically assigns this IP address when the app starts.
        public let address: String?
        /// The inbound TCP/UDP port numbers of the app. The combination of an IP address and a port number form a network endpoint.
        public let ingressPortMappings: [SimulationAppPortMapping]?

        public init(address: String? = nil, ingressPortMappings: [SimulationAppPortMapping]? = nil) {
            self.address = address
            self.ingressPortMappings = ingressPortMappings
        }

        private enum CodingKeys: String, CodingKey {
            case address = "Address"
            case ingressPortMappings = "IngressPortMappings"
        }
    }

    public struct SimulationAppMetadata: AWSDecodableShape {
        /// The domain of the app. For more information about domains, see Key concepts in the Amazon Web Services SimSpace Weaver User Guide.
        public let domain: String?
        /// The name of the app.
        public let name: String?
        /// The name of the simulation of the app.
        public let simulation: String?
        /// The current status of the app.
        public let status: SimulationAppStatus?
        /// The desired status of the app.
        public let targetStatus: SimulationAppTargetStatus?

        public init(domain: String? = nil, name: String? = nil, simulation: String? = nil, status: SimulationAppStatus? = nil, targetStatus: SimulationAppTargetStatus? = nil) {
            self.domain = domain
            self.name = name
            self.simulation = simulation
            self.status = status
            self.targetStatus = targetStatus
        }

        private enum CodingKeys: String, CodingKey {
            case domain = "Domain"
            case name = "Name"
            case simulation = "Simulation"
            case status = "Status"
            case targetStatus = "TargetStatus"
        }
    }

    public struct SimulationAppPortMapping: AWSDecodableShape {
        /// The TCP/UDP port number of the running app. SimSpace Weaver dynamically assigns this port number when the app starts. SimSpace Weaver maps the Declared port to the Actual port. Clients connect to the app using the app's IP address and the Actual port number.
        public let actual: Int?
        /// The TCP/UDP port number of the app, declared in the simulation schema. SimSpace Weaver maps the Declared port to the Actual port. The source code for the app should bind to the Declared port.
        public let declared: Int?

        public init(actual: Int? = nil, declared: Int? = nil) {
            self.actual = actual
            self.declared = declared
        }

        private enum CodingKeys: String, CodingKey {
            case actual = "Actual"
            case declared = "Declared"
        }
    }

    public struct SimulationClock: AWSDecodableShape {
        /// The current status of the simulation clock.
        public let status: ClockStatus?
        /// The desired status of the simulation clock.
        public let targetStatus: ClockTargetStatus?

        public init(status: ClockStatus? = nil, targetStatus: ClockTargetStatus? = nil) {
            self.status = status
            self.targetStatus = targetStatus
        }

        private enum CodingKeys: String, CodingKey {
            case status = "Status"
            case targetStatus = "TargetStatus"
        }
    }

    public struct SimulationMetadata: AWSDecodableShape {
        /// The Amazon Resource Name (ARN) of the simulation. For more information about ARNs, see Amazon Resource Names (ARNs) in the Amazon Web Services General Reference.
        public let arn: String?
        /// The time when the simulation was created, expressed as the  number of seconds and milliseconds in UTC since the Unix epoch (0:0:0.000, January 1, 1970).
        public let creationTime: Date?
        /// The name of the simulation.
        public let name: String?
        /// The current status of the simulation.
        public let status: SimulationStatus?
        /// The desired status of the simulation.
        public let targetStatus: SimulationTargetStatus?

        public init(arn: String? = nil, creationTime: Date? = nil, name: String? = nil, status: SimulationStatus? = nil, targetStatus: SimulationTargetStatus? = nil) {
            self.arn = arn
            self.creationTime = creationTime
            self.name = name
            self.status = status
            self.targetStatus = targetStatus
        }

        private enum CodingKeys: String, CodingKey {
            case arn = "Arn"
            case creationTime = "CreationTime"
            case name = "Name"
            case status = "Status"
            case targetStatus = "TargetStatus"
        }
    }

    public struct StartAppInput: AWSEncodableShape {
        /// A value that you provide to ensure that repeated calls to this API operation using the same parameters complete only once. A ClientToken is also known as an idempotency token. A ClientToken expires after 24 hours.
        public let clientToken: String?
        /// The description of the app.
        public let description: String?
        /// The name of the domain of the app.
        public let domain: String
        public let launchOverrides: LaunchOverrides?
        /// The name of the app.
        public let name: String
        /// The name of the simulation of the app.
        public let simulation: String

        public init(clientToken: String? = StartAppInput.idempotencyToken(), description: String? = nil, domain: String, launchOverrides: LaunchOverrides? = nil, name: String, simulation: String) {
            self.clientToken = clientToken
            self.description = description
            self.domain = domain
            self.launchOverrides = launchOverrides
            self.name = name
            self.simulation = simulation
        }

        public func validate(name: String) throws {
            try self.validate(self.clientToken, name: "clientToken", parent: name, max: 128)
            try self.validate(self.clientToken, name: "clientToken", parent: name, min: 32)
            try self.validate(self.clientToken, name: "clientToken", parent: name, pattern: "^[a-zA-Z0-9-]+$")
            try self.validate(self.description, name: "description", parent: name, max: 500)
            try self.validate(self.domain, name: "domain", parent: name, max: 64)
            try self.validate(self.domain, name: "domain", parent: name, min: 1)
            try self.validate(self.domain, name: "domain", parent: name, pattern: "^[a-zA-Z0-9_.-]+$")
            try self.launchOverrides?.validate(name: "\(name).launchOverrides")
            try self.validate(self.name, name: "name", parent: name, max: 64)
            try self.validate(self.name, name: "name", parent: name, min: 1)
            try self.validate(self.name, name: "name", parent: name, pattern: "^[a-zA-Z0-9_.-]+$")
            try self.validate(self.simulation, name: "simulation", parent: name, max: 64)
            try self.validate(self.simulation, name: "simulation", parent: name, min: 1)
            try self.validate(self.simulation, name: "simulation", parent: name, pattern: "^[a-zA-Z0-9_.-]+$")
        }

        private enum CodingKeys: String, CodingKey {
            case clientToken = "ClientToken"
            case description = "Description"
            case domain = "Domain"
            case launchOverrides = "LaunchOverrides"
            case name = "Name"
            case simulation = "Simulation"
        }
    }

    public struct StartAppOutput: AWSDecodableShape {
        /// The name of the domain of the app.
        public let domain: String?
        /// The name of the app.
        public let name: String?
        /// The name of the simulation of the app.
        public let simulation: String?

        public init(domain: String? = nil, name: String? = nil, simulation: String? = nil) {
            self.domain = domain
            self.name = name
            self.simulation = simulation
        }

        private enum CodingKeys: String, CodingKey {
            case domain = "Domain"
            case name = "Name"
            case simulation = "Simulation"
        }
    }

    public struct StartClockInput: AWSEncodableShape {
        /// The name of the simulation.
        public let simulation: String

        public init(simulation: String) {
            self.simulation = simulation
        }

        public func validate(name: String) throws {
            try self.validate(self.simulation, name: "simulation", parent: name, max: 64)
            try self.validate(self.simulation, name: "simulation", parent: name, min: 1)
            try self.validate(self.simulation, name: "simulation", parent: name, pattern: "^[a-zA-Z0-9_.-]+$")
        }

        private enum CodingKeys: String, CodingKey {
            case simulation = "Simulation"
        }
    }

    public struct StartClockOutput: AWSDecodableShape {
        public init() {}
    }

    public struct StartSimulationInput: AWSEncodableShape {
        /// A value that you provide to ensure that repeated calls to this API operation using the same parameters complete only once. A ClientToken is also known as an idempotency token. A ClientToken expires after 24 hours.
        public let clientToken: String?
        /// The description of the simulation.
        public let description: String?
        /// The maximum running time of the simulation, specified as a number of months (m or M), hours (h or H), or days (d or D). The simulation  stops when it reaches this limit.
        public let maximumDuration: String?
        /// The name of the simulation.
        public let name: String
        /// The Amazon Resource Name (ARN) of the Identity and Access Management (IAM) role that the simulation assumes to perform actions. For more information about ARNs, see Amazon Resource Names (ARNs) in the Amazon Web Services General Reference. For more information about IAM roles, see IAM roles in the  Identity and Access Management User Guide.
        public let roleArn: String
        /// The location of the simulation schema in Amazon Simple Storage Service (Amazon S3). For more information about Amazon S3, see the  Amazon Simple Storage Service User Guide .
        public let schemaS3Location: S3Location
        /// A list of tags for the simulation. For more information about tags, see Tagging Amazon Web Services resources in the Amazon Web Services General Reference.
        public let tags: [String: String]?

        public init(clientToken: String? = StartSimulationInput.idempotencyToken(), description: String? = nil, maximumDuration: String? = nil, name: String, roleArn: String, schemaS3Location: S3Location, tags: [String: String]? = nil) {
            self.clientToken = clientToken
            self.description = description
            self.maximumDuration = maximumDuration
            self.name = name
            self.roleArn = roleArn
            self.schemaS3Location = schemaS3Location
            self.tags = tags
        }

        public func validate(name: String) throws {
            try self.validate(self.clientToken, name: "clientToken", parent: name, max: 128)
            try self.validate(self.clientToken, name: "clientToken", parent: name, min: 32)
            try self.validate(self.clientToken, name: "clientToken", parent: name, pattern: "^[a-zA-Z0-9-]+$")
            try self.validate(self.description, name: "description", parent: name, max: 500)
            try self.validate(self.maximumDuration, name: "maximumDuration", parent: name, max: 6)
            try self.validate(self.maximumDuration, name: "maximumDuration", parent: name, min: 2)
            try self.validate(self.maximumDuration, name: "maximumDuration", parent: name, pattern: "^\\d{1,5}[mhdMHD]$")
            try self.validate(self.name, name: "name", parent: name, max: 64)
            try self.validate(self.name, name: "name", parent: name, min: 1)
            try self.validate(self.name, name: "name", parent: name, pattern: "^[a-zA-Z0-9_.-]+$")
            try self.validate(self.roleArn, name: "roleArn", parent: name, max: 1600)
            try self.validate(self.roleArn, name: "roleArn", parent: name, pattern: "^arn:(?:aws|aws-cn):iam::(\\d{12})?:role\\/(.+)$")
            try self.schemaS3Location.validate(name: "\(name).schemaS3Location")
            try self.tags?.forEach {
                try validate($0.key, name: "tags.key", parent: name, max: 128)
                try validate($0.key, name: "tags.key", parent: name, min: 1)
                try validate($0.value, name: "tags[\"\($0.key)\"]", parent: name, max: 256)
            }
            try self.validate(self.tags, name: "tags", parent: name, max: 50)
            try self.validate(self.tags, name: "tags", parent: name, min: 1)
        }

        private enum CodingKeys: String, CodingKey {
            case clientToken = "ClientToken"
            case description = "Description"
            case maximumDuration = "MaximumDuration"
            case name = "Name"
            case roleArn = "RoleArn"
            case schemaS3Location = "SchemaS3Location"
            case tags = "Tags"
        }
    }

    public struct StartSimulationOutput: AWSDecodableShape {
        /// The Amazon Resource Name (ARN) of the simulation. For more information about ARNs, see Amazon Resource Names (ARNs) in the Amazon Web Services General Reference.
        public let arn: String?
        /// The time when the simulation was created, expressed as the  number of seconds and milliseconds in UTC since the Unix epoch (0:0:0.000, January 1, 1970).
        public let creationTime: Date?
        /// A universally unique identifier (UUID) for this simulation.
        public let executionId: String?

        public init(arn: String? = nil, creationTime: Date? = nil, executionId: String? = nil) {
            self.arn = arn
            self.creationTime = creationTime
            self.executionId = executionId
        }

        private enum CodingKeys: String, CodingKey {
            case arn = "Arn"
            case creationTime = "CreationTime"
            case executionId = "ExecutionId"
        }
    }

    public struct StopAppInput: AWSEncodableShape {
        /// The name of the app.
        public let app: String
        /// The name of the domain of the app.
        public let domain: String
        /// The name of the simulation of the app.
        public let simulation: String

        public init(app: String, domain: String, simulation: String) {
            self.app = app
            self.domain = domain
            self.simulation = simulation
        }

        public func validate(name: String) throws {
            try self.validate(self.app, name: "app", parent: name, max: 64)
            try self.validate(self.app, name: "app", parent: name, min: 1)
            try self.validate(self.app, name: "app", parent: name, pattern: "^[a-zA-Z0-9_.-]+$")
            try self.validate(self.domain, name: "domain", parent: name, max: 64)
            try self.validate(self.domain, name: "domain", parent: name, min: 1)
            try self.validate(self.domain, name: "domain", parent: name, pattern: "^[a-zA-Z0-9_.-]+$")
            try self.validate(self.simulation, name: "simulation", parent: name, max: 64)
            try self.validate(self.simulation, name: "simulation", parent: name, min: 1)
            try self.validate(self.simulation, name: "simulation", parent: name, pattern: "^[a-zA-Z0-9_.-]+$")
        }

        private enum CodingKeys: String, CodingKey {
            case app = "App"
            case domain = "Domain"
            case simulation = "Simulation"
        }
    }

    public struct StopAppOutput: AWSDecodableShape {
        public init() {}
    }

    public struct StopClockInput: AWSEncodableShape {
        /// The name of the simulation.
        public let simulation: String

        public init(simulation: String) {
            self.simulation = simulation
        }

        public func validate(name: String) throws {
            try self.validate(self.simulation, name: "simulation", parent: name, max: 64)
            try self.validate(self.simulation, name: "simulation", parent: name, min: 1)
            try self.validate(self.simulation, name: "simulation", parent: name, pattern: "^[a-zA-Z0-9_.-]+$")
        }

        private enum CodingKeys: String, CodingKey {
            case simulation = "Simulation"
        }
    }

    public struct StopClockOutput: AWSDecodableShape {
        public init() {}
    }

    public struct StopSimulationInput: AWSEncodableShape {
        /// The name of the simulation.
        public let simulation: String

        public init(simulation: String) {
            self.simulation = simulation
        }

        public func validate(name: String) throws {
            try self.validate(self.simulation, name: "simulation", parent: name, max: 64)
            try self.validate(self.simulation, name: "simulation", parent: name, min: 1)
            try self.validate(self.simulation, name: "simulation", parent: name, pattern: "^[a-zA-Z0-9_.-]+$")
        }

        private enum CodingKeys: String, CodingKey {
            case simulation = "Simulation"
        }
    }

    public struct StopSimulationOutput: AWSDecodableShape {
        public init() {}
    }

    public struct TagResourceInput: AWSEncodableShape {
        public static var _encoding = [
            AWSMemberEncoding(label: "resourceArn", location: .uri("ResourceArn"))
        ]

        /// The Amazon Resource Name (ARN) of the resource that you want to add tags to. For more information about ARNs, see Amazon Resource Names (ARNs) in the Amazon Web Services General Reference.
        public let resourceArn: String
        /// A list of tags to apply to the resource.
        public let tags: [String: String]

        public init(resourceArn: String, tags: [String: String]) {
            self.resourceArn = resourceArn
            self.tags = tags
        }

        public func validate(name: String) throws {
            try self.validate(self.resourceArn, name: "resourceArn", parent: name, max: 1600)
            try self.validate(self.resourceArn, name: "resourceArn", parent: name, pattern: "^arn:(?:aws|aws-cn):simspaceweaver:([a-z]{2}-[a-z]+-\\d{1}):(\\d{12})?:([a-z]+)\\/(.+)$")
            try self.tags.forEach {
                try validate($0.key, name: "tags.key", parent: name, max: 128)
                try validate($0.key, name: "tags.key", parent: name, min: 1)
                try validate($0.value, name: "tags[\"\($0.key)\"]", parent: name, max: 256)
            }
            try self.validate(self.tags, name: "tags", parent: name, max: 50)
            try self.validate(self.tags, name: "tags", parent: name, min: 1)
        }

        private enum CodingKeys: String, CodingKey {
            case tags = "Tags"
        }
    }

    public struct TagResourceOutput: AWSDecodableShape {
        public init() {}
    }

    public struct UntagResourceInput: AWSEncodableShape {
        public static var _encoding = [
            AWSMemberEncoding(label: "resourceArn", location: .uri("ResourceArn")),
            AWSMemberEncoding(label: "tagKeys", location: .querystring("tagKeys"))
        ]

        /// The Amazon Resource Name (ARN) of the resource that you want to remove tags from. For more information about ARNs, see Amazon Resource Names (ARNs) in the Amazon Web Services General Reference.
        public let resourceArn: String
        /// A list of tag keys to remove from the resource.
        public let tagKeys: [String]

        public init(resourceArn: String, tagKeys: [String]) {
            self.resourceArn = resourceArn
            self.tagKeys = tagKeys
        }

        public func validate(name: String) throws {
            try self.validate(self.resourceArn, name: "resourceArn", parent: name, max: 1600)
            try self.validate(self.resourceArn, name: "resourceArn", parent: name, pattern: "^arn:(?:aws|aws-cn):simspaceweaver:([a-z]{2}-[a-z]+-\\d{1}):(\\d{12})?:([a-z]+)\\/(.+)$")
            try self.tagKeys.forEach {
                try validate($0, name: "tagKeys[]", parent: name, max: 128)
                try validate($0, name: "tagKeys[]", parent: name, min: 1)
            }
            try self.validate(self.tagKeys, name: "tagKeys", parent: name, max: 50)
            try self.validate(self.tagKeys, name: "tagKeys", parent: name, min: 1)
        }

        private enum CodingKeys: CodingKey {}
    }

    public struct UntagResourceOutput: AWSDecodableShape {
        public init() {}
    }
}

// MARK: - Errors

/// Error enum for SimSpaceWeaver
public struct SimSpaceWeaverErrorType: AWSErrorType {
    enum Code: String {
        case accessDeniedException = "AccessDeniedException"
        case conflictException = "ConflictException"
        case internalServerException = "InternalServerException"
        case resourceNotFoundException = "ResourceNotFoundException"
        case serviceQuotaExceededException = "ServiceQuotaExceededException"
        case tooManyTagsException = "TooManyTagsException"
        case validationException = "ValidationException"
    }

    private let error: Code
    public let context: AWSErrorContext?

    /// initialize SimSpaceWeaver
    public init?(errorCode: String, context: AWSErrorContext) {
        guard let error = Code(rawValue: errorCode) else { return nil }
        self.error = error
        self.context = context
    }

    internal init(_ error: Code) {
        self.error = error
        self.context = nil
    }

    /// return error code string
    public var errorCode: String { self.error.rawValue }

    public static var accessDeniedException: Self { .init(.accessDeniedException) }
    public static var conflictException: Self { .init(.conflictException) }
    public static var internalServerException: Self { .init(.internalServerException) }
    public static var resourceNotFoundException: Self { .init(.resourceNotFoundException) }
    public static var serviceQuotaExceededException: Self { .init(.serviceQuotaExceededException) }
    public static var tooManyTagsException: Self { .init(.tooManyTagsException) }
    public static var validationException: Self { .init(.validationException) }
}

extension SimSpaceWeaverErrorType: Equatable {
    public static func == (lhs: SimSpaceWeaverErrorType, rhs: SimSpaceWeaverErrorType) -> Bool {
        lhs.error == rhs.error
    }
}

extension SimSpaceWeaverErrorType: CustomStringConvertible {
    public var description: String {
        return "\(self.error.rawValue): \(self.message ?? "")"
    }
}
