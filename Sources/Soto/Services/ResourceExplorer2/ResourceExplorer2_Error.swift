//===----------------------------------------------------------------------===//
//
// This source file is part of the Soto for AWS open source project
//
// Copyright (c) 2017-2022 the Soto project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
// See CONTRIBUTORS.txt for the list of Soto project authors
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by https://github.com/soto-project/soto-codegenerator.
// DO NOT EDIT.

import SotoCore

/// Error enum for ResourceExplorer2
public struct ResourceExplorer2ErrorType: AWSErrorType {
    enum Code: String {
        case accessDeniedException = "AccessDeniedException"
        case conflictException = "ConflictException"
        case internalServerException = "InternalServerException"
        case resourceNotFoundException = "ResourceNotFoundException"
        case serviceQuotaExceededException = "ServiceQuotaExceededException"
        case throttlingException = "ThrottlingException"
        case unauthorizedException = "UnauthorizedException"
        case validationException = "ValidationException"
    }

    private let error: Code
    public let context: AWSErrorContext?

    /// initialize ResourceExplorer2
    public init?(errorCode: String, context: AWSErrorContext) {
        guard let error = Code(rawValue: errorCode) else { return nil }
        self.error = error
        self.context = context
    }

    internal init(_ error: Code) {
        self.error = error
        self.context = nil
    }

    /// return error code string
    public var errorCode: String { self.error.rawValue }

    /// The credentials that you used to call this operation don't have the minimum required permissions.
    public static var accessDeniedException: Self { .init(.accessDeniedException) }
    /// You tried to create a new view or index when one already exists, and you either didn't specify or specified a different idempotency token as the original request.
    public static var conflictException: Self { .init(.conflictException) }
    /// The request failed because of internal service error. Try your request again later.
    public static var internalServerException: Self { .init(.internalServerException) }
    /// You specified a resource that doesn't exist. Check the ID or ARN that you used to identity the resource, and try again.
    public static var resourceNotFoundException: Self { .init(.resourceNotFoundException) }
    /// The request failed because it exceeds a service quota.
    public static var serviceQuotaExceededException: Self { .init(.serviceQuotaExceededException) }
    /// The request failed because you exceeded a rate limit for this operation. For more information, see Quotas for Resource Explorer.
    public static var throttlingException: Self { .init(.throttlingException) }
    /// The principal making the request isn't permitted to perform the operation.
    public static var unauthorizedException: Self { .init(.unauthorizedException) }
    /// You provided an invalid value for one of the operation's parameters. Check the syntax for the operation, and try again.
    public static var validationException: Self { .init(.validationException) }
}

extension ResourceExplorer2ErrorType: Equatable {
    public static func == (lhs: ResourceExplorer2ErrorType, rhs: ResourceExplorer2ErrorType) -> Bool {
        lhs.error == rhs.error
    }
}

extension ResourceExplorer2ErrorType: CustomStringConvertible {
    public var description: String {
        return "\(self.error.rawValue): \(self.message ?? "")"
    }
}
