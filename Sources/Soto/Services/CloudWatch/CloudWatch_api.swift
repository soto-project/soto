//===----------------------------------------------------------------------===//
//
// This source file is part of the Soto for AWS open source project
//
// Copyright (c) 2017-2024 the Soto project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
// See CONTRIBUTORS.txt for the list of Soto project authors
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by https://github.com/soto-project/soto-codegenerator.
// DO NOT EDIT.

#if os(Linux) && compiler(<5.10)
// swift-corelibs-foundation hasn't been updated with Sendable conformances
@preconcurrency import Foundation
#else
import Foundation
#endif
@_exported import SotoCore

/// Service object for interacting with AWS CloudWatch service.
///
/// Amazon CloudWatch monitors your Amazon Web Services (Amazon Web Services) resources and the
/// 			applications you run on Amazon Web Services in real time. You can use CloudWatch to collect and track
/// 			metrics, which are the variables you want to measure for your resources and
/// 			applications. CloudWatch alarms send notifications or automatically change the resources you are monitoring based on rules
/// 			that you define. For example, you can monitor the CPU usage and disk reads and writes of your Amazon EC2
/// 			instances. Then, use this data to determine whether you should launch
/// 			additional instances to handle increased load. You can also use this data to stop
/// 			under-used instances to save
/// 			money. In addition to monitoring the built-in metrics that come with Amazon Web Services, you can monitor
/// 			your own custom metrics. With CloudWatch, you gain system-wide visibility into resource
/// 			utilization, application performance, and operational health.
public struct CloudWatch: AWSService {
    // MARK: Member variables

    /// Client used for communication with AWS
    public let client: AWSClient
    /// Service configuration
    public let config: AWSServiceConfig

    // MARK: Initialization

    /// Initialize the CloudWatch client
    /// - parameters:
    ///     - client: AWSClient used to process requests
    ///     - region: Region of server you want to communicate with. This will override the partition parameter.
    ///     - partition: AWS partition where service resides, standard (.aws), china (.awscn), government (.awsusgov).
    ///     - endpoint: Custom endpoint URL to use instead of standard AWS servers
    ///     - middleware: Middleware chain used to edit requests before they are sent and responses before they are decoded 
    ///     - timeout: Timeout value for HTTP requests
    ///     - byteBufferAllocator: Allocator for ByteBuffers
    ///     - options: Service options
    public init(
        client: AWSClient,
        region: SotoCore.Region? = nil,
        partition: AWSPartition = .aws,
        endpoint: String? = nil,
        middleware: AWSMiddlewareProtocol? = nil,
        timeout: TimeAmount? = nil,
        byteBufferAllocator: ByteBufferAllocator = ByteBufferAllocator(),
        options: AWSServiceConfig.Options = []
    ) {
        self.client = client
        self.config = AWSServiceConfig(
            region: region,
            partition: region?.partition ?? partition,
            serviceName: "CloudWatch",
            serviceIdentifier: "monitoring",
            serviceProtocol: .query,
            apiVersion: "2010-08-01",
            endpoint: endpoint,
            variantEndpoints: Self.variantEndpoints,
            errorType: CloudWatchErrorType.self,
            xmlNamespace: "http://monitoring.amazonaws.com/doc/2010-08-01/",
            middleware: middleware,
            timeout: timeout,
            byteBufferAllocator: byteBufferAllocator,
            options: options
        )
    }




    /// FIPS and dualstack endpoints
    static var variantEndpoints: [EndpointVariantType: AWSServiceConfig.EndpointVariant] {[
        [.fips]: .init(endpoints: [
            "us-east-1": "monitoring-fips.us-east-1.amazonaws.com",
            "us-east-2": "monitoring-fips.us-east-2.amazonaws.com",
            "us-gov-east-1": "monitoring.us-gov-east-1.amazonaws.com",
            "us-gov-west-1": "monitoring.us-gov-west-1.amazonaws.com",
            "us-west-1": "monitoring-fips.us-west-1.amazonaws.com",
            "us-west-2": "monitoring-fips.us-west-2.amazonaws.com"
        ])
    ]}

    // MARK: API Calls

    /// Deletes the specified alarms. You can delete up to 100 alarms in one operation. However, this total can include no more
    /// 			than one composite alarm. For example, you could delete 99 metric alarms and one composite alarms with one operation, but you can't
    /// 			delete two composite alarms with one operation.
    /// 			If you specify an incorrect alarm name or make any other error in the operation, no alarms are
    /// 			deleted. To confirm that alarms were deleted successfully, you can use
    /// 			the DescribeAlarms operation after using
    /// 		DeleteAlarms.  It is possible to create a loop or cycle of composite alarms, where composite alarm A depends on composite alarm B, and
    /// 			composite alarm B also depends on composite alarm A. In this scenario, you can't delete any composite alarm that is part of the cycle
    /// 			because there is always still a composite alarm that depends on that alarm that you want to delete. To get out of such a situation, you must
    /// 				break the cycle by changing the rule of one of the composite alarms in the cycle to remove a dependency that creates the cycle. The simplest
    /// 				change to make to break a cycle is to change the AlarmRule of one of the alarms to false.  Additionally, the evaluation of composite alarms stops if CloudWatch detects a cycle in the evaluation path.
    ///
    @Sendable
    @inlinable
    public func deleteAlarms(_ input: DeleteAlarmsInput, logger: Logger = AWSClient.loggingDisabled) async throws {
        try await self.client.execute(
            operation: "DeleteAlarms", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Deletes the specified alarms. You can delete up to 100 alarms in one operation. However, this total can include no more
    /// 			than one composite alarm. For example, you could delete 99 metric alarms and one composite alarms with one operation, but you can't
    /// 			delete two composite alarms with one operation.
    /// 			If you specify an incorrect alarm name or make any other error in the operation, no alarms are
    /// 			deleted. To confirm that alarms were deleted successfully, you can use
    /// 			the DescribeAlarms operation after using
    /// 		DeleteAlarms.  It is possible to create a loop or cycle of composite alarms, where composite alarm A depends on composite alarm B, and
    /// 			composite alarm B also depends on composite alarm A. In this scenario, you can't delete any composite alarm that is part of the cycle
    /// 			because there is always still a composite alarm that depends on that alarm that you want to delete. To get out of such a situation, you must
    /// 				break the cycle by changing the rule of one of the composite alarms in the cycle to remove a dependency that creates the cycle. The simplest
    /// 				change to make to break a cycle is to change the AlarmRule of one of the alarms to false.  Additionally, the evaluation of composite alarms stops if CloudWatch detects a cycle in the evaluation path.
    ///
    ///
    /// Parameters:
    ///   - alarmNames: The alarms to be deleted. Do not enclose the alarm names in quote marks.
    ///   - logger: Logger use during operation
    @inlinable
    public func deleteAlarms(
        alarmNames: [String]? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws {
        let input = DeleteAlarmsInput(
            alarmNames: alarmNames
        )
        return try await self.deleteAlarms(input, logger: logger)
    }

    /// 			Deletes the specified anomaly detection model
    /// 			from your account.
    /// 			For more information
    /// 			about
    /// 			how to delete an anomaly detection model,
    /// 			see Deleting an anomaly detection model
    /// 			in the CloudWatch User Guide.
    ///
    @Sendable
    @inlinable
    public func deleteAnomalyDetector(_ input: DeleteAnomalyDetectorInput, logger: Logger = AWSClient.loggingDisabled) async throws -> DeleteAnomalyDetectorOutput {
        try await self.client.execute(
            operation: "DeleteAnomalyDetector", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// 			Deletes the specified anomaly detection model
    /// 			from your account.
    /// 			For more information
    /// 			about
    /// 			how to delete an anomaly detection model,
    /// 			see Deleting an anomaly detection model
    /// 			in the CloudWatch User Guide.
    ///
    ///
    /// Parameters:
    ///   - metricMathAnomalyDetector: The metric math anomaly detector to be deleted. When using MetricMathAnomalyDetector, you cannot include following parameters in the same operation:    Dimensions,    MetricName     Namespace     Stat    the SingleMetricAnomalyDetector parameters of DeleteAnomalyDetectorInput    Instead, specify the metric math anomaly detector attributes as part of the
    ///   - singleMetricAnomalyDetector: A single metric anomaly detector to be deleted. When using SingleMetricAnomalyDetector,
    ///   - logger: Logger use during operation
    @inlinable
    public func deleteAnomalyDetector(
        metricMathAnomalyDetector: MetricMathAnomalyDetector? = nil,
        singleMetricAnomalyDetector: SingleMetricAnomalyDetector? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> DeleteAnomalyDetectorOutput {
        let input = DeleteAnomalyDetectorInput(
            metricMathAnomalyDetector: metricMathAnomalyDetector, 
            singleMetricAnomalyDetector: singleMetricAnomalyDetector
        )
        return try await self.deleteAnomalyDetector(input, logger: logger)
    }

    /// Deletes all dashboards that you specify. You
    /// 			can specify up to 100 dashboards to delete. If there is an error during this call, no dashboards are
    /// 			deleted.
    @Sendable
    @inlinable
    public func deleteDashboards(_ input: DeleteDashboardsInput, logger: Logger = AWSClient.loggingDisabled) async throws -> DeleteDashboardsOutput {
        try await self.client.execute(
            operation: "DeleteDashboards", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Deletes all dashboards that you specify. You
    /// 			can specify up to 100 dashboards to delete. If there is an error during this call, no dashboards are
    /// 			deleted.
    ///
    /// Parameters:
    ///   - dashboardNames: The dashboards to be deleted. This parameter is required.
    ///   - logger: Logger use during operation
    @inlinable
    public func deleteDashboards(
        dashboardNames: [String]? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> DeleteDashboardsOutput {
        let input = DeleteDashboardsInput(
            dashboardNames: dashboardNames
        )
        return try await self.deleteDashboards(input, logger: logger)
    }

    /// Permanently deletes the specified Contributor Insights rules. If you create a rule, delete it, and then re-create it with the same name, historical data from the first time
    /// 			the rule was created might
    /// 			not be available.
    @Sendable
    @inlinable
    public func deleteInsightRules(_ input: DeleteInsightRulesInput, logger: Logger = AWSClient.loggingDisabled) async throws -> DeleteInsightRulesOutput {
        try await self.client.execute(
            operation: "DeleteInsightRules", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Permanently deletes the specified Contributor Insights rules. If you create a rule, delete it, and then re-create it with the same name, historical data from the first time
    /// 			the rule was created might
    /// 			not be available.
    ///
    /// Parameters:
    ///   - ruleNames: An array of the rule names to delete. If you need to find out the names of your rules, use DescribeInsightRules.
    ///   - logger: Logger use during operation
    @inlinable
    public func deleteInsightRules(
        ruleNames: [String]? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> DeleteInsightRulesOutput {
        let input = DeleteInsightRulesInput(
            ruleNames: ruleNames
        )
        return try await self.deleteInsightRules(input, logger: logger)
    }

    /// Permanently deletes the metric stream that you specify.
    @Sendable
    @inlinable
    public func deleteMetricStream(_ input: DeleteMetricStreamInput, logger: Logger = AWSClient.loggingDisabled) async throws -> DeleteMetricStreamOutput {
        try await self.client.execute(
            operation: "DeleteMetricStream", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Permanently deletes the metric stream that you specify.
    ///
    /// Parameters:
    ///   - name: The name of the metric stream to delete.
    ///   - logger: Logger use during operation
    @inlinable
    public func deleteMetricStream(
        name: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> DeleteMetricStreamOutput {
        let input = DeleteMetricStreamInput(
            name: name
        )
        return try await self.deleteMetricStream(input, logger: logger)
    }

    /// Retrieves the history for the specified alarm. You can filter the results by date range or item type.
    /// 			If an alarm name is not specified, the histories for either all metric alarms or all composite alarms are returned. CloudWatch retains the history of an alarm even if you delete the alarm. To use this operation and return information about a composite alarm, you must be signed on with
    /// 			the cloudwatch:DescribeAlarmHistory permission that is scoped to *. You can't return information
    /// 			about composite alarms if your cloudwatch:DescribeAlarmHistory permission has a narrower scope.
    @Sendable
    @inlinable
    public func describeAlarmHistory(_ input: DescribeAlarmHistoryInput, logger: Logger = AWSClient.loggingDisabled) async throws -> DescribeAlarmHistoryOutput {
        try await self.client.execute(
            operation: "DescribeAlarmHistory", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Retrieves the history for the specified alarm. You can filter the results by date range or item type.
    /// 			If an alarm name is not specified, the histories for either all metric alarms or all composite alarms are returned. CloudWatch retains the history of an alarm even if you delete the alarm. To use this operation and return information about a composite alarm, you must be signed on with
    /// 			the cloudwatch:DescribeAlarmHistory permission that is scoped to *. You can't return information
    /// 			about composite alarms if your cloudwatch:DescribeAlarmHistory permission has a narrower scope.
    ///
    /// Parameters:
    ///   - alarmName: The name of the alarm.
    ///   - alarmTypes: Use this parameter to specify whether you want the operation to return metric alarms or composite alarms. If you omit this parameter,
    ///   - endDate: The ending date to retrieve alarm history.
    ///   - historyItemType: The type of alarm histories to retrieve.
    ///   - maxRecords: The maximum number of alarm history records to retrieve.
    ///   - nextToken: The token returned by a previous call to indicate that there is more data
    ///   - scanBy: Specified whether to return the newest or oldest alarm history first. Specify TimestampDescending to have the newest
    ///   - startDate: The starting date to retrieve alarm history.
    ///   - logger: Logger use during operation
    @inlinable
    public func describeAlarmHistory(
        alarmName: String? = nil,
        alarmTypes: [AlarmType]? = nil,
        endDate: Date? = nil,
        historyItemType: HistoryItemType? = nil,
        maxRecords: Int? = nil,
        nextToken: String? = nil,
        scanBy: ScanBy? = nil,
        startDate: Date? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> DescribeAlarmHistoryOutput {
        let input = DescribeAlarmHistoryInput(
            alarmName: alarmName, 
            alarmTypes: alarmTypes, 
            endDate: endDate, 
            historyItemType: historyItemType, 
            maxRecords: maxRecords, 
            nextToken: nextToken, 
            scanBy: scanBy, 
            startDate: startDate
        )
        return try await self.describeAlarmHistory(input, logger: logger)
    }

    /// Retrieves the specified alarms. You can filter the results by specifying a prefix for the alarm
    /// 			name, the alarm state, or a prefix for any action. To use this operation and return information about composite alarms, you must be signed on with
    /// 		the cloudwatch:DescribeAlarms permission that is scoped to *. You can't return information
    /// 			about composite alarms if your cloudwatch:DescribeAlarms permission has a narrower scope.
    @Sendable
    @inlinable
    public func describeAlarms(_ input: DescribeAlarmsInput, logger: Logger = AWSClient.loggingDisabled) async throws -> DescribeAlarmsOutput {
        try await self.client.execute(
            operation: "DescribeAlarms", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Retrieves the specified alarms. You can filter the results by specifying a prefix for the alarm
    /// 			name, the alarm state, or a prefix for any action. To use this operation and return information about composite alarms, you must be signed on with
    /// 		the cloudwatch:DescribeAlarms permission that is scoped to *. You can't return information
    /// 			about composite alarms if your cloudwatch:DescribeAlarms permission has a narrower scope.
    ///
    /// Parameters:
    ///   - actionPrefix: Use this parameter to filter the results of the operation to only those alarms that
    ///   - alarmNamePrefix: An alarm name prefix. If you specify this parameter, you receive information about all alarms that have names
    ///   - alarmNames: The names of the alarms to retrieve information about.
    ///   - alarmTypes: Use this parameter to specify whether you want the operation to return metric alarms or composite alarms. If you
    ///   - childrenOfAlarmName: If you use this parameter and specify the name of a composite alarm, the operation returns
    ///   - maxRecords: The maximum number of alarm descriptions to retrieve.
    ///   - nextToken: The token returned by a previous call to indicate that there is more data
    ///   - parentsOfAlarmName: If you use this parameter and specify the name of a metric or composite alarm, the operation returns
    ///   - stateValue: Specify this parameter to receive information only about alarms that are currently in the state that you specify.
    ///   - logger: Logger use during operation
    @inlinable
    public func describeAlarms(
        actionPrefix: String? = nil,
        alarmNamePrefix: String? = nil,
        alarmNames: [String]? = nil,
        alarmTypes: [AlarmType]? = nil,
        childrenOfAlarmName: String? = nil,
        maxRecords: Int? = nil,
        nextToken: String? = nil,
        parentsOfAlarmName: String? = nil,
        stateValue: StateValue? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> DescribeAlarmsOutput {
        let input = DescribeAlarmsInput(
            actionPrefix: actionPrefix, 
            alarmNamePrefix: alarmNamePrefix, 
            alarmNames: alarmNames, 
            alarmTypes: alarmTypes, 
            childrenOfAlarmName: childrenOfAlarmName, 
            maxRecords: maxRecords, 
            nextToken: nextToken, 
            parentsOfAlarmName: parentsOfAlarmName, 
            stateValue: stateValue
        )
        return try await self.describeAlarms(input, logger: logger)
    }

    /// Retrieves the alarms for the specified metric. To
    /// 			filter the results, specify a statistic, period, or unit. This operation retrieves only standard alarms that are based on
    /// 		the specified metric. It does not return alarms based on math expressions that
    /// 		use the specified metric, or composite alarms that use the specified metric.
    @Sendable
    @inlinable
    public func describeAlarmsForMetric(_ input: DescribeAlarmsForMetricInput, logger: Logger = AWSClient.loggingDisabled) async throws -> DescribeAlarmsForMetricOutput {
        try await self.client.execute(
            operation: "DescribeAlarmsForMetric", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Retrieves the alarms for the specified metric. To
    /// 			filter the results, specify a statistic, period, or unit. This operation retrieves only standard alarms that are based on
    /// 		the specified metric. It does not return alarms based on math expressions that
    /// 		use the specified metric, or composite alarms that use the specified metric.
    ///
    /// Parameters:
    ///   - dimensions: The dimensions associated with the metric. If the metric has any associated
    ///   - extendedStatistic: The percentile statistic for the metric. Specify a value between
    ///   - metricName: The name of the metric.
    ///   - namespace: The namespace of the metric.
    ///   - period: The period, in seconds, over which the statistic is applied.
    ///   - statistic: The statistic for the metric, other than percentiles.
    ///   - unit: The unit for the metric.
    ///   - logger: Logger use during operation
    @inlinable
    public func describeAlarmsForMetric(
        dimensions: [Dimension]? = nil,
        extendedStatistic: String? = nil,
        metricName: String? = nil,
        namespace: String? = nil,
        period: Int? = nil,
        statistic: Statistic? = nil,
        unit: StandardUnit? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> DescribeAlarmsForMetricOutput {
        let input = DescribeAlarmsForMetricInput(
            dimensions: dimensions, 
            extendedStatistic: extendedStatistic, 
            metricName: metricName, 
            namespace: namespace, 
            period: period, 
            statistic: statistic, 
            unit: unit
        )
        return try await self.describeAlarmsForMetric(input, logger: logger)
    }

    /// Lists the anomaly detection models that you have created in your account.
    /// 			For single metric anomaly detectors,
    /// 			you can list all of the models in your account or filter the results
    /// 			to only the models that are related to a certain namespace, metric name, or metric dimension.
    /// 			For metric math anomaly detectors,
    /// 			you can list them by adding METRIC_MATH to the AnomalyDetectorTypes array.
    /// 			This will return all metric math anomaly detectors in your account.
    @Sendable
    @inlinable
    public func describeAnomalyDetectors(_ input: DescribeAnomalyDetectorsInput, logger: Logger = AWSClient.loggingDisabled) async throws -> DescribeAnomalyDetectorsOutput {
        try await self.client.execute(
            operation: "DescribeAnomalyDetectors", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Lists the anomaly detection models that you have created in your account.
    /// 			For single metric anomaly detectors,
    /// 			you can list all of the models in your account or filter the results
    /// 			to only the models that are related to a certain namespace, metric name, or metric dimension.
    /// 			For metric math anomaly detectors,
    /// 			you can list them by adding METRIC_MATH to the AnomalyDetectorTypes array.
    /// 			This will return all metric math anomaly detectors in your account.
    ///
    /// Parameters:
    ///   - anomalyDetectorTypes: The anomaly detector types to request when using DescribeAnomalyDetectorsInput.
    ///   - dimensions: Limits the results to only the anomaly detection models that are associated with the
    ///   - maxResults: The maximum number of results to return in one operation. The maximum
    ///   - metricName: Limits the results to only the anomaly detection models that are associated with the
    ///   - namespace: Limits the results to only the anomaly detection models that
    ///   - nextToken: Use the token returned by the previous operation to request the next page of results.
    ///   - logger: Logger use during operation
    @inlinable
    public func describeAnomalyDetectors(
        anomalyDetectorTypes: [AnomalyDetectorType]? = nil,
        dimensions: [Dimension]? = nil,
        maxResults: Int? = nil,
        metricName: String? = nil,
        namespace: String? = nil,
        nextToken: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> DescribeAnomalyDetectorsOutput {
        let input = DescribeAnomalyDetectorsInput(
            anomalyDetectorTypes: anomalyDetectorTypes, 
            dimensions: dimensions, 
            maxResults: maxResults, 
            metricName: metricName, 
            namespace: namespace, 
            nextToken: nextToken
        )
        return try await self.describeAnomalyDetectors(input, logger: logger)
    }

    /// Returns a list of all the Contributor Insights rules in your account. For more information about Contributor Insights, see
    /// 		Using Contributor Insights to Analyze High-Cardinality Data.
    @Sendable
    @inlinable
    public func describeInsightRules(_ input: DescribeInsightRulesInput, logger: Logger = AWSClient.loggingDisabled) async throws -> DescribeInsightRulesOutput {
        try await self.client.execute(
            operation: "DescribeInsightRules", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Returns a list of all the Contributor Insights rules in your account. For more information about Contributor Insights, see
    /// 		Using Contributor Insights to Analyze High-Cardinality Data.
    ///
    /// Parameters:
    ///   - maxResults: The maximum number of results to return in one operation. If you omit this
    ///   - nextToken: Include this value, if it was returned by the previous operation, to get the next set of rules.
    ///   - logger: Logger use during operation
    @inlinable
    public func describeInsightRules(
        maxResults: Int? = nil,
        nextToken: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> DescribeInsightRulesOutput {
        let input = DescribeInsightRulesInput(
            maxResults: maxResults, 
            nextToken: nextToken
        )
        return try await self.describeInsightRules(input, logger: logger)
    }

    /// Disables the actions for the specified alarms. When an alarm's actions are disabled, the
    /// 			alarm actions do not execute when the alarm state changes.
    @Sendable
    @inlinable
    public func disableAlarmActions(_ input: DisableAlarmActionsInput, logger: Logger = AWSClient.loggingDisabled) async throws {
        try await self.client.execute(
            operation: "DisableAlarmActions", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Disables the actions for the specified alarms. When an alarm's actions are disabled, the
    /// 			alarm actions do not execute when the alarm state changes.
    ///
    /// Parameters:
    ///   - alarmNames: The names of the alarms.
    ///   - logger: Logger use during operation
    @inlinable
    public func disableAlarmActions(
        alarmNames: [String]? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws {
        let input = DisableAlarmActionsInput(
            alarmNames: alarmNames
        )
        return try await self.disableAlarmActions(input, logger: logger)
    }

    /// Disables the specified Contributor Insights rules. When rules are disabled, they do not analyze log groups and do
    /// 		not incur costs.
    @Sendable
    @inlinable
    public func disableInsightRules(_ input: DisableInsightRulesInput, logger: Logger = AWSClient.loggingDisabled) async throws -> DisableInsightRulesOutput {
        try await self.client.execute(
            operation: "DisableInsightRules", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Disables the specified Contributor Insights rules. When rules are disabled, they do not analyze log groups and do
    /// 		not incur costs.
    ///
    /// Parameters:
    ///   - ruleNames: An array of the rule names to disable. If you need to find out the names of your rules, use DescribeInsightRules.
    ///   - logger: Logger use during operation
    @inlinable
    public func disableInsightRules(
        ruleNames: [String]? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> DisableInsightRulesOutput {
        let input = DisableInsightRulesInput(
            ruleNames: ruleNames
        )
        return try await self.disableInsightRules(input, logger: logger)
    }

    /// Enables the actions for the specified alarms.
    @Sendable
    @inlinable
    public func enableAlarmActions(_ input: EnableAlarmActionsInput, logger: Logger = AWSClient.loggingDisabled) async throws {
        try await self.client.execute(
            operation: "EnableAlarmActions", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Enables the actions for the specified alarms.
    ///
    /// Parameters:
    ///   - alarmNames: The names of the alarms.
    ///   - logger: Logger use during operation
    @inlinable
    public func enableAlarmActions(
        alarmNames: [String]? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws {
        let input = EnableAlarmActionsInput(
            alarmNames: alarmNames
        )
        return try await self.enableAlarmActions(input, logger: logger)
    }

    /// Enables the specified Contributor Insights rules. When rules are enabled, they immediately begin analyzing log data.
    @Sendable
    @inlinable
    public func enableInsightRules(_ input: EnableInsightRulesInput, logger: Logger = AWSClient.loggingDisabled) async throws -> EnableInsightRulesOutput {
        try await self.client.execute(
            operation: "EnableInsightRules", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Enables the specified Contributor Insights rules. When rules are enabled, they immediately begin analyzing log data.
    ///
    /// Parameters:
    ///   - ruleNames: An array of the rule names to enable. If you need to find out the names of your rules, use DescribeInsightRules.
    ///   - logger: Logger use during operation
    @inlinable
    public func enableInsightRules(
        ruleNames: [String]? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> EnableInsightRulesOutput {
        let input = EnableInsightRulesInput(
            ruleNames: ruleNames
        )
        return try await self.enableInsightRules(input, logger: logger)
    }

    /// Displays the details of the dashboard that you specify. To copy an existing dashboard, use GetDashboard, and then use the data returned
    /// 			within DashboardBody as the template for the new dashboard when you call PutDashboard to create
    /// 			the copy.
    @Sendable
    @inlinable
    public func getDashboard(_ input: GetDashboardInput, logger: Logger = AWSClient.loggingDisabled) async throws -> GetDashboardOutput {
        try await self.client.execute(
            operation: "GetDashboard", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Displays the details of the dashboard that you specify. To copy an existing dashboard, use GetDashboard, and then use the data returned
    /// 			within DashboardBody as the template for the new dashboard when you call PutDashboard to create
    /// 			the copy.
    ///
    /// Parameters:
    ///   - dashboardName: The name of the dashboard to be described.
    ///   - logger: Logger use during operation
    @inlinable
    public func getDashboard(
        dashboardName: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> GetDashboardOutput {
        let input = GetDashboardInput(
            dashboardName: dashboardName
        )
        return try await self.getDashboard(input, logger: logger)
    }

    /// This operation returns the time series data collected by a Contributor Insights rule. The data includes the identity and number of
    /// 		contributors to the log group. You can also optionally return one or more statistics about each data point in the time series. These statistics can include the following:    UniqueContributors -- the number of unique contributors for each data point.    MaxContributorValue -- the value of the top contributor for each data point. The identity of the
    /// 					contributor might change for each data point in the graph. If this rule aggregates by COUNT, the top contributor for each data point is the contributor with the
    /// 					most occurrences in that period. If the rule aggregates by SUM, the top contributor is the contributor with the highest sum in the log field specified
    /// 					by the rule's Value, during that period.    SampleCount -- the number of data points matched by the rule.    Sum -- the sum of the values from all contributors during the time period represented by that data point.    Minimum -- the minimum value from a single observation during the time period represented by that data point.    Maximum -- the maximum value from a single observation during the time period represented by that data point.    Average -- the average value from all contributors during the time period represented by that data point.
    @Sendable
    @inlinable
    public func getInsightRuleReport(_ input: GetInsightRuleReportInput, logger: Logger = AWSClient.loggingDisabled) async throws -> GetInsightRuleReportOutput {
        try await self.client.execute(
            operation: "GetInsightRuleReport", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// This operation returns the time series data collected by a Contributor Insights rule. The data includes the identity and number of
    /// 		contributors to the log group. You can also optionally return one or more statistics about each data point in the time series. These statistics can include the following:    UniqueContributors -- the number of unique contributors for each data point.    MaxContributorValue -- the value of the top contributor for each data point. The identity of the
    /// 					contributor might change for each data point in the graph. If this rule aggregates by COUNT, the top contributor for each data point is the contributor with the
    /// 					most occurrences in that period. If the rule aggregates by SUM, the top contributor is the contributor with the highest sum in the log field specified
    /// 					by the rule's Value, during that period.    SampleCount -- the number of data points matched by the rule.    Sum -- the sum of the values from all contributors during the time period represented by that data point.    Minimum -- the minimum value from a single observation during the time period represented by that data point.    Maximum -- the maximum value from a single observation during the time period represented by that data point.    Average -- the average value from all contributors during the time period represented by that data point.
    ///
    /// Parameters:
    ///   - endTime: The end time of the data to use in the report. When used in a raw HTTP Query API, it is formatted as
    ///   - maxContributorCount: The maximum number of contributors to include in the report. The range is 1 to 100. If you omit this, the default of 10 is used.
    ///   - metrics: Specifies which metrics to use for aggregation of contributor values for the report. You can specify one or more
    ///   - orderBy: Determines what statistic to use to rank the contributors. Valid values are Sum and Maximum.
    ///   - period: The period, in seconds, to use for the statistics in the InsightRuleMetricDatapoint results.
    ///   - ruleName: The name of the rule that you want to see data from.
    ///   - startTime: The start time of the data to use in the report. When used in a raw HTTP Query API, it is formatted as
    ///   - logger: Logger use during operation
    @inlinable
    public func getInsightRuleReport(
        endTime: Date? = nil,
        maxContributorCount: Int? = nil,
        metrics: [String]? = nil,
        orderBy: String? = nil,
        period: Int? = nil,
        ruleName: String? = nil,
        startTime: Date? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> GetInsightRuleReportOutput {
        let input = GetInsightRuleReportInput(
            endTime: endTime, 
            maxContributorCount: maxContributorCount, 
            metrics: metrics, 
            orderBy: orderBy, 
            period: period, 
            ruleName: ruleName, 
            startTime: startTime
        )
        return try await self.getInsightRuleReport(input, logger: logger)
    }

    /// You can use the GetMetricData API to retrieve CloudWatch metric values. The operation
    /// 			can also include a CloudWatch Metrics Insights query, and one or more metric math functions. A GetMetricData operation that does not include a query can retrieve as many as 500 different
    /// 			metrics in a single request, with a total of as many as 100,800 data points. You can also
    /// 			optionally perform metric math expressions on the values of the returned statistics, to create
    /// 			new time series that represent new insights into your data. For example, using Lambda
    /// 			metrics, you could divide the Errors metric by the Invocations metric to get an error
    /// 			rate time series. For more information about metric math expressions, see Metric Math Syntax and Functions in the Amazon CloudWatch User
    /// 					Guide. If you include a Metrics Insights query, each GetMetricData operation can include only one
    /// 			query. But the same GetMetricData operation can also retrieve other metrics. Metrics Insights queries
    /// 		can query only the most recent three hours of metric data. For more information about Metrics Insights,
    /// 		see Query your metrics with CloudWatch Metrics Insights. Calls to the GetMetricData API have a different pricing structure than
    /// 			calls to GetMetricStatistics. For more information about pricing, see
    /// 			Amazon CloudWatch Pricing. Amazon CloudWatch retains metric data as follows:   Data points with a period of less than 60 seconds are available for 3 hours. These data points are high-resolution
    /// 				metrics and are available only for custom metrics that have been defined with a StorageResolution of 1.   Data points with a period of 60 seconds (1-minute) are available for 15 days.   Data points with a period of 300 seconds (5-minute) are available for 63 days.   Data points with a period of 3600 seconds (1 hour) are available for 455 days (15 months).   Data points that are initially published with a shorter period are aggregated together for long-term storage. For example, if you collect
    /// 			data using a period of 1 minute, the data remains available for 15 days with 1-minute resolution. After 15 days, this data is still available,
    /// 			but is aggregated and retrievable only with a resolution of 5 minutes. After 63 days, the data is further aggregated and is available with
    /// 			a resolution of 1 hour. If you omit Unit in your request, all data that was collected with any unit is returned, along with the corresponding units that were specified
    /// 			when the data was reported to CloudWatch. If you specify a unit, the operation returns only data that was collected with that unit specified.
    /// 			If you specify a unit that does not match the data collected, the results of the operation are null. CloudWatch does not perform unit conversions.  Using Metrics Insights queries with metric math  You can't mix a Metric Insights query and metric math syntax in the same expression, but
    /// 			you can reference results from a Metrics Insights query within other Metric math expressions. A Metrics Insights
    /// 			query without a GROUP BY clause returns a single time-series (TS),
    /// 			and can be used as input for a metric math expression that expects a single time series. A Metrics Insights
    /// 			query with a GROUP BY clause returns an array of time-series (TS[]),
    /// 			and can be used as input for a metric math expression that expects an array of time series.
    @Sendable
    @inlinable
    public func getMetricData(_ input: GetMetricDataInput, logger: Logger = AWSClient.loggingDisabled) async throws -> GetMetricDataOutput {
        try await self.client.execute(
            operation: "GetMetricData", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// You can use the GetMetricData API to retrieve CloudWatch metric values. The operation
    /// 			can also include a CloudWatch Metrics Insights query, and one or more metric math functions. A GetMetricData operation that does not include a query can retrieve as many as 500 different
    /// 			metrics in a single request, with a total of as many as 100,800 data points. You can also
    /// 			optionally perform metric math expressions on the values of the returned statistics, to create
    /// 			new time series that represent new insights into your data. For example, using Lambda
    /// 			metrics, you could divide the Errors metric by the Invocations metric to get an error
    /// 			rate time series. For more information about metric math expressions, see Metric Math Syntax and Functions in the Amazon CloudWatch User
    /// 					Guide. If you include a Metrics Insights query, each GetMetricData operation can include only one
    /// 			query. But the same GetMetricData operation can also retrieve other metrics. Metrics Insights queries
    /// 		can query only the most recent three hours of metric data. For more information about Metrics Insights,
    /// 		see Query your metrics with CloudWatch Metrics Insights. Calls to the GetMetricData API have a different pricing structure than
    /// 			calls to GetMetricStatistics. For more information about pricing, see
    /// 			Amazon CloudWatch Pricing. Amazon CloudWatch retains metric data as follows:   Data points with a period of less than 60 seconds are available for 3 hours. These data points are high-resolution
    /// 				metrics and are available only for custom metrics that have been defined with a StorageResolution of 1.   Data points with a period of 60 seconds (1-minute) are available for 15 days.   Data points with a period of 300 seconds (5-minute) are available for 63 days.   Data points with a period of 3600 seconds (1 hour) are available for 455 days (15 months).   Data points that are initially published with a shorter period are aggregated together for long-term storage. For example, if you collect
    /// 			data using a period of 1 minute, the data remains available for 15 days with 1-minute resolution. After 15 days, this data is still available,
    /// 			but is aggregated and retrievable only with a resolution of 5 minutes. After 63 days, the data is further aggregated and is available with
    /// 			a resolution of 1 hour. If you omit Unit in your request, all data that was collected with any unit is returned, along with the corresponding units that were specified
    /// 			when the data was reported to CloudWatch. If you specify a unit, the operation returns only data that was collected with that unit specified.
    /// 			If you specify a unit that does not match the data collected, the results of the operation are null. CloudWatch does not perform unit conversions.  Using Metrics Insights queries with metric math  You can't mix a Metric Insights query and metric math syntax in the same expression, but
    /// 			you can reference results from a Metrics Insights query within other Metric math expressions. A Metrics Insights
    /// 			query without a GROUP BY clause returns a single time-series (TS),
    /// 			and can be used as input for a metric math expression that expects a single time series. A Metrics Insights
    /// 			query with a GROUP BY clause returns an array of time-series (TS[]),
    /// 			and can be used as input for a metric math expression that expects an array of time series.
    ///
    /// Parameters:
    ///   - endTime: The time stamp indicating the latest data to be returned. The value specified is exclusive; results include data points up to the specified time stamp. For better performance, specify StartTime and EndTime
    ///   - labelOptions: This structure includes the Timezone parameter, which you can use
    ///   - maxDatapoints: The maximum number of data points the request should return before paginating. If you omit
    ///   - metricDataQueries: The metric queries to be returned. A single GetMetricData call can
    ///   - nextToken: Include this value, if it was returned by the previous GetMetricData operation,
    ///   - scanBy: The order in which data points should be returned. TimestampDescending returns the newest data first and paginates
    ///   - startTime: The time stamp indicating the earliest data to be returned. The value specified is inclusive; results include data points with the specified time stamp.  CloudWatch rounds the specified time stamp as follows:   Start time less than 15 days ago - Round down to the nearest whole minute.
    ///   - logger: Logger use during operation
    @inlinable
    public func getMetricData(
        endTime: Date? = nil,
        labelOptions: LabelOptions? = nil,
        maxDatapoints: Int? = nil,
        metricDataQueries: [MetricDataQuery]? = nil,
        nextToken: String? = nil,
        scanBy: ScanBy? = nil,
        startTime: Date? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> GetMetricDataOutput {
        let input = GetMetricDataInput(
            endTime: endTime, 
            labelOptions: labelOptions, 
            maxDatapoints: maxDatapoints, 
            metricDataQueries: metricDataQueries, 
            nextToken: nextToken, 
            scanBy: scanBy, 
            startTime: startTime
        )
        return try await self.getMetricData(input, logger: logger)
    }

    /// Gets statistics for the specified metric. The maximum number of data points returned from a single call is 1,440. If
    /// 			you request more than 1,440 data points, CloudWatch returns an error.
    /// 			To reduce the number of data points, you can narrow the specified time range and make
    /// 			multiple requests across adjacent time ranges, or you can increase the specified period.
    /// 			Data points are not returned in chronological order. CloudWatch aggregates data points based on the length of the period
    /// 			that you specify. For example, if you request statistics with a one-hour period,
    /// 			CloudWatch aggregates all data points with time stamps that fall within each
    /// 			one-hour period. Therefore, the number of values aggregated by CloudWatch is larger than
    /// 			the number of data points returned. CloudWatch needs raw data points to calculate percentile statistics. If you publish
    /// 			data using a statistic set instead, you can only retrieve
    /// 			percentile statistics for this data if one of the following conditions is true:   The SampleCount value of the statistic set is 1.   The Min and the Max values of the statistic set are equal.   Percentile statistics are not available for metrics when any of the metric values are negative numbers. Amazon CloudWatch retains metric data as follows:   Data points with a period of less than 60 seconds are available for 3 hours. These data points are high-resolution
    /// 				metrics and are available only for custom metrics that have been defined with a StorageResolution of 1.   Data points with a period of 60 seconds (1-minute) are available for 15 days.   Data points with a period of 300 seconds (5-minute) are available for 63 days.   Data points with a period of 3600 seconds (1 hour) are available for 455 days (15 months).   Data points that are initially published with a shorter period are aggregated together for long-term storage. For example, if you collect
    /// 			data using a period of 1 minute, the data remains available for 15 days with 1-minute resolution. After 15 days, this data is still available,
    /// 			but is aggregated and retrievable only with a resolution of 5 minutes. After 63 days, the data is further aggregated and is available with
    /// 		a resolution of 1 hour. CloudWatch started retaining 5-minute and 1-hour metric data as of July 9, 2016. For information about metrics and dimensions supported by Amazon Web Services services, see the
    /// 			Amazon CloudWatch Metrics and Dimensions Reference in the
    /// 			Amazon CloudWatch User Guide.
    @Sendable
    @inlinable
    public func getMetricStatistics(_ input: GetMetricStatisticsInput, logger: Logger = AWSClient.loggingDisabled) async throws -> GetMetricStatisticsOutput {
        try await self.client.execute(
            operation: "GetMetricStatistics", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Gets statistics for the specified metric. The maximum number of data points returned from a single call is 1,440. If
    /// 			you request more than 1,440 data points, CloudWatch returns an error.
    /// 			To reduce the number of data points, you can narrow the specified time range and make
    /// 			multiple requests across adjacent time ranges, or you can increase the specified period.
    /// 			Data points are not returned in chronological order. CloudWatch aggregates data points based on the length of the period
    /// 			that you specify. For example, if you request statistics with a one-hour period,
    /// 			CloudWatch aggregates all data points with time stamps that fall within each
    /// 			one-hour period. Therefore, the number of values aggregated by CloudWatch is larger than
    /// 			the number of data points returned. CloudWatch needs raw data points to calculate percentile statistics. If you publish
    /// 			data using a statistic set instead, you can only retrieve
    /// 			percentile statistics for this data if one of the following conditions is true:   The SampleCount value of the statistic set is 1.   The Min and the Max values of the statistic set are equal.   Percentile statistics are not available for metrics when any of the metric values are negative numbers. Amazon CloudWatch retains metric data as follows:   Data points with a period of less than 60 seconds are available for 3 hours. These data points are high-resolution
    /// 				metrics and are available only for custom metrics that have been defined with a StorageResolution of 1.   Data points with a period of 60 seconds (1-minute) are available for 15 days.   Data points with a period of 300 seconds (5-minute) are available for 63 days.   Data points with a period of 3600 seconds (1 hour) are available for 455 days (15 months).   Data points that are initially published with a shorter period are aggregated together for long-term storage. For example, if you collect
    /// 			data using a period of 1 minute, the data remains available for 15 days with 1-minute resolution. After 15 days, this data is still available,
    /// 			but is aggregated and retrievable only with a resolution of 5 minutes. After 63 days, the data is further aggregated and is available with
    /// 		a resolution of 1 hour. CloudWatch started retaining 5-minute and 1-hour metric data as of July 9, 2016. For information about metrics and dimensions supported by Amazon Web Services services, see the
    /// 			Amazon CloudWatch Metrics and Dimensions Reference in the
    /// 			Amazon CloudWatch User Guide.
    ///
    /// Parameters:
    ///   - dimensions: The dimensions. If the metric contains multiple dimensions, you must include a value for each dimension.
    ///   - endTime: The time stamp that determines the last data point to return. The value specified is exclusive; results include data points up to the specified time stamp.
    ///   - extendedStatistics: The percentile statistics. Specify values between p0.0 and p100. When calling GetMetricStatistics, you must
    ///   - metricName: The name of the metric, with or without spaces.
    ///   - namespace: The namespace of the metric, with or without spaces.
    ///   - period: The granularity, in seconds, of the returned data points. For metrics with regular resolution, a period can
    ///   - startTime: The time stamp that determines the first data point to return. Start times are
    ///   - statistics: The metric statistics, other than percentile. For percentile statistics,
    ///   - unit: The unit for a given metric.
    ///   - logger: Logger use during operation
    @inlinable
    public func getMetricStatistics(
        dimensions: [Dimension]? = nil,
        endTime: Date? = nil,
        extendedStatistics: [String]? = nil,
        metricName: String? = nil,
        namespace: String? = nil,
        period: Int? = nil,
        startTime: Date? = nil,
        statistics: [Statistic]? = nil,
        unit: StandardUnit? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> GetMetricStatisticsOutput {
        let input = GetMetricStatisticsInput(
            dimensions: dimensions, 
            endTime: endTime, 
            extendedStatistics: extendedStatistics, 
            metricName: metricName, 
            namespace: namespace, 
            period: period, 
            startTime: startTime, 
            statistics: statistics, 
            unit: unit
        )
        return try await self.getMetricStatistics(input, logger: logger)
    }

    /// Returns information about the metric stream that you specify.
    @Sendable
    @inlinable
    public func getMetricStream(_ input: GetMetricStreamInput, logger: Logger = AWSClient.loggingDisabled) async throws -> GetMetricStreamOutput {
        try await self.client.execute(
            operation: "GetMetricStream", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Returns information about the metric stream that you specify.
    ///
    /// Parameters:
    ///   - name: The name of the metric stream to retrieve information about.
    ///   - logger: Logger use during operation
    @inlinable
    public func getMetricStream(
        name: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> GetMetricStreamOutput {
        let input = GetMetricStreamInput(
            name: name
        )
        return try await self.getMetricStream(input, logger: logger)
    }

    /// You can use the GetMetricWidgetImage API to retrieve a snapshot graph of
    /// 			one or more Amazon CloudWatch metrics as a bitmap image. You can then embed this
    /// 			image into your services and products, such as wiki pages, reports, and documents.
    /// 			You could also retrieve images regularly, such as every minute, and create your own
    /// 			custom live dashboard. The graph you retrieve can include all CloudWatch metric graph features, including metric math
    /// 		and horizontal and vertical annotations. There is a limit of 20 transactions per second for this API. Each GetMetricWidgetImage action has the following limits:   As many as 100 metrics in the graph.   Up to 100 KB uncompressed payload.
    @Sendable
    @inlinable
    public func getMetricWidgetImage(_ input: GetMetricWidgetImageInput, logger: Logger = AWSClient.loggingDisabled) async throws -> GetMetricWidgetImageOutput {
        try await self.client.execute(
            operation: "GetMetricWidgetImage", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// You can use the GetMetricWidgetImage API to retrieve a snapshot graph of
    /// 			one or more Amazon CloudWatch metrics as a bitmap image. You can then embed this
    /// 			image into your services and products, such as wiki pages, reports, and documents.
    /// 			You could also retrieve images regularly, such as every minute, and create your own
    /// 			custom live dashboard. The graph you retrieve can include all CloudWatch metric graph features, including metric math
    /// 		and horizontal and vertical annotations. There is a limit of 20 transactions per second for this API. Each GetMetricWidgetImage action has the following limits:   As many as 100 metrics in the graph.   Up to 100 KB uncompressed payload.
    ///
    /// Parameters:
    ///   - metricWidget: A JSON string that defines the bitmap graph to be retrieved. The string includes the
    ///   - outputFormat: The format of the resulting image. Only PNG images are supported. The default is png. If you specify png, the API returns an HTTP response with the
    ///   - logger: Logger use during operation
    @inlinable
    public func getMetricWidgetImage(
        metricWidget: String? = nil,
        outputFormat: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> GetMetricWidgetImageOutput {
        let input = GetMetricWidgetImageInput(
            metricWidget: metricWidget, 
            outputFormat: outputFormat
        )
        return try await self.getMetricWidgetImage(input, logger: logger)
    }

    /// Returns a list of the dashboards for your account. If you include DashboardNamePrefix, only
    /// 			those dashboards with names starting with the prefix are listed. Otherwise, all dashboards in your account are
    /// 			listed.
    /// 	      ListDashboards returns up to 1000 results on one page. If there
    /// 			are more than 1000 dashboards, you can call ListDashboards again and
    /// 		include the value you received for NextToken in the first call, to receive
    /// 		the next 1000 results.
    @Sendable
    @inlinable
    public func listDashboards(_ input: ListDashboardsInput, logger: Logger = AWSClient.loggingDisabled) async throws -> ListDashboardsOutput {
        try await self.client.execute(
            operation: "ListDashboards", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Returns a list of the dashboards for your account. If you include DashboardNamePrefix, only
    /// 			those dashboards with names starting with the prefix are listed. Otherwise, all dashboards in your account are
    /// 			listed.
    /// 	      ListDashboards returns up to 1000 results on one page. If there
    /// 			are more than 1000 dashboards, you can call ListDashboards again and
    /// 		include the value you received for NextToken in the first call, to receive
    /// 		the next 1000 results.
    ///
    /// Parameters:
    ///   - dashboardNamePrefix: If you specify this parameter, only
    ///   - nextToken: The token returned by a previous call to indicate that there is more data available.
    ///   - logger: Logger use during operation
    @inlinable
    public func listDashboards(
        dashboardNamePrefix: String? = nil,
        nextToken: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> ListDashboardsOutput {
        let input = ListDashboardsInput(
            dashboardNamePrefix: dashboardNamePrefix, 
            nextToken: nextToken
        )
        return try await self.listDashboards(input, logger: logger)
    }

    /// 			Returns a list
    /// 			that contains the number
    /// 			of managed Contributor Insights rules
    /// 			in your account.
    ///
    ///
    @Sendable
    @inlinable
    public func listManagedInsightRules(_ input: ListManagedInsightRulesInput, logger: Logger = AWSClient.loggingDisabled) async throws -> ListManagedInsightRulesOutput {
        try await self.client.execute(
            operation: "ListManagedInsightRules", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// 			Returns a list
    /// 			that contains the number
    /// 			of managed Contributor Insights rules
    /// 			in your account.
    ///
    ///
    ///
    /// Parameters:
    ///   - maxResults: 			The maximum number
    ///   - nextToken: 			Include this value
    ///   - resourceARN: 			The ARN
    ///   - logger: Logger use during operation
    @inlinable
    public func listManagedInsightRules(
        maxResults: Int? = nil,
        nextToken: String? = nil,
        resourceARN: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> ListManagedInsightRulesOutput {
        let input = ListManagedInsightRulesInput(
            maxResults: maxResults, 
            nextToken: nextToken, 
            resourceARN: resourceARN
        )
        return try await self.listManagedInsightRules(input, logger: logger)
    }

    /// Returns a list of metric streams in this account.
    @Sendable
    @inlinable
    public func listMetricStreams(_ input: ListMetricStreamsInput, logger: Logger = AWSClient.loggingDisabled) async throws -> ListMetricStreamsOutput {
        try await self.client.execute(
            operation: "ListMetricStreams", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Returns a list of metric streams in this account.
    ///
    /// Parameters:
    ///   - maxResults: The maximum number of results to return in one operation.
    ///   - nextToken: Include this value, if it was returned by the previous call, to get the next set of metric streams.
    ///   - logger: Logger use during operation
    @inlinable
    public func listMetricStreams(
        maxResults: Int? = nil,
        nextToken: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> ListMetricStreamsOutput {
        let input = ListMetricStreamsInput(
            maxResults: maxResults, 
            nextToken: nextToken
        )
        return try await self.listMetricStreams(input, logger: logger)
    }

    /// List the specified metrics. You can use the returned metrics with GetMetricData or GetMetricStatistics to get statistical data. Up to 500 results are returned for any one call. To retrieve additional results,
    /// 			use the returned token with subsequent calls. After you create a metric, allow up to 15 minutes for the metric to appear. To see metric
    /// 			statistics sooner, use GetMetricData or GetMetricStatistics. If you are using CloudWatch cross-account observability, you can use this operation in a monitoring account and
    /// 			view metrics from the linked source accounts. For more information, see
    /// 			CloudWatch cross-account observability.  ListMetrics doesn't return information about metrics if those metrics haven't
    /// 	reported data in the past two weeks. To retrieve those metrics, use
    /// 		GetMetricData or
    /// 		GetMetricStatistics.
    @Sendable
    @inlinable
    public func listMetrics(_ input: ListMetricsInput, logger: Logger = AWSClient.loggingDisabled) async throws -> ListMetricsOutput {
        try await self.client.execute(
            operation: "ListMetrics", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// List the specified metrics. You can use the returned metrics with GetMetricData or GetMetricStatistics to get statistical data. Up to 500 results are returned for any one call. To retrieve additional results,
    /// 			use the returned token with subsequent calls. After you create a metric, allow up to 15 minutes for the metric to appear. To see metric
    /// 			statistics sooner, use GetMetricData or GetMetricStatistics. If you are using CloudWatch cross-account observability, you can use this operation in a monitoring account and
    /// 			view metrics from the linked source accounts. For more information, see
    /// 			CloudWatch cross-account observability.  ListMetrics doesn't return information about metrics if those metrics haven't
    /// 	reported data in the past two weeks. To retrieve those metrics, use
    /// 		GetMetricData or
    /// 		GetMetricStatistics.
    ///
    /// Parameters:
    ///   - dimensions: The dimensions to filter against.  Only the dimensions that match exactly
    ///   - includeLinkedAccounts: If you are using this operation in a monitoring account,
    ///   - metricName: The name of the metric to filter against. Only the metrics with names that match exactly
    ///   - namespace: The metric namespace to filter against. Only the namespace that matches exactly
    ///   - nextToken: The token returned by a previous call to indicate that there is more data
    ///   - owningAccount: When you use this operation in a monitoring account, use this field to return metrics only from one source account.
    ///   - recentlyActive: To filter the results to show only metrics that have had data points published
    ///   - logger: Logger use during operation
    @inlinable
    public func listMetrics(
        dimensions: [DimensionFilter]? = nil,
        includeLinkedAccounts: Bool? = nil,
        metricName: String? = nil,
        namespace: String? = nil,
        nextToken: String? = nil,
        owningAccount: String? = nil,
        recentlyActive: RecentlyActive? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> ListMetricsOutput {
        let input = ListMetricsInput(
            dimensions: dimensions, 
            includeLinkedAccounts: includeLinkedAccounts, 
            metricName: metricName, 
            namespace: namespace, 
            nextToken: nextToken, 
            owningAccount: owningAccount, 
            recentlyActive: recentlyActive
        )
        return try await self.listMetrics(input, logger: logger)
    }

    /// Displays the tags associated with a CloudWatch resource. Currently, alarms
    /// 			and Contributor Insights rules support tagging.
    @Sendable
    @inlinable
    public func listTagsForResource(_ input: ListTagsForResourceInput, logger: Logger = AWSClient.loggingDisabled) async throws -> ListTagsForResourceOutput {
        try await self.client.execute(
            operation: "ListTagsForResource", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Displays the tags associated with a CloudWatch resource. Currently, alarms
    /// 			and Contributor Insights rules support tagging.
    ///
    /// Parameters:
    ///   - resourceARN: The ARN of the CloudWatch resource that you want to view tags for. The ARN format of an alarm is
    ///   - logger: Logger use during operation
    @inlinable
    public func listTagsForResource(
        resourceARN: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> ListTagsForResourceOutput {
        let input = ListTagsForResourceInput(
            resourceARN: resourceARN
        )
        return try await self.listTagsForResource(input, logger: logger)
    }

    /// Creates an anomaly detection model for a CloudWatch metric. You can use the model
    /// 			to display a band of expected normal values when the metric is graphed. If you have enabled unified cross-account observability, and this account is a monitoring
    /// 			account, the metric can be in the same account or a source account. You can specify the account ID
    /// 			in the object you specify in the SingleMetricAnomalyDetector parameter. For more information, see CloudWatch Anomaly Detection.
    @Sendable
    @inlinable
    public func putAnomalyDetector(_ input: PutAnomalyDetectorInput, logger: Logger = AWSClient.loggingDisabled) async throws -> PutAnomalyDetectorOutput {
        try await self.client.execute(
            operation: "PutAnomalyDetector", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Creates an anomaly detection model for a CloudWatch metric. You can use the model
    /// 			to display a band of expected normal values when the metric is graphed. If you have enabled unified cross-account observability, and this account is a monitoring
    /// 			account, the metric can be in the same account or a source account. You can specify the account ID
    /// 			in the object you specify in the SingleMetricAnomalyDetector parameter. For more information, see CloudWatch Anomaly Detection.
    ///
    /// Parameters:
    ///   - configuration: The configuration specifies details about how the
    ///   - metricCharacteristics: Use this object to include parameters to provide information about your metric to
    ///   - metricMathAnomalyDetector: The metric math anomaly detector to be created. When using MetricMathAnomalyDetector, you cannot include the following parameters in the same operation:    Dimensions     MetricName     Namespace     Stat    the SingleMetricAnomalyDetector parameters of PutAnomalyDetectorInput    Instead, specify the metric math anomaly detector attributes
    ///   - singleMetricAnomalyDetector: A single metric anomaly detector to be created. When using SingleMetricAnomalyDetector,
    ///   - logger: Logger use during operation
    @inlinable
    public func putAnomalyDetector(
        configuration: AnomalyDetectorConfiguration? = nil,
        metricCharacteristics: MetricCharacteristics? = nil,
        metricMathAnomalyDetector: MetricMathAnomalyDetector? = nil,
        singleMetricAnomalyDetector: SingleMetricAnomalyDetector? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> PutAnomalyDetectorOutput {
        let input = PutAnomalyDetectorInput(
            configuration: configuration, 
            metricCharacteristics: metricCharacteristics, 
            metricMathAnomalyDetector: metricMathAnomalyDetector, 
            singleMetricAnomalyDetector: singleMetricAnomalyDetector
        )
        return try await self.putAnomalyDetector(input, logger: logger)
    }

    /// Creates or updates a composite alarm. When you create a composite
    /// 			alarm, you specify a rule expression for the alarm that takes into account the alarm
    /// 			states of other alarms that you have created. The composite alarm goes into ALARM state
    /// 			only if all conditions of the rule are met. The alarms specified in a composite alarm's rule expression can include metric alarms
    /// 			and other composite alarms. The rule expression of a composite alarm can include as many as 100 underlying alarms.
    /// 			Any single alarm can be included in the rule expressions of as many as 150 composite alarms. Using composite alarms can reduce
    /// 			alarm noise. You can create multiple metric alarms,
    /// 			and also create a composite alarm and
    /// 			set up alerts only
    /// 			for the composite alarm. For example, you could create a composite
    /// 			alarm that goes into ALARM state only when more than one of the underlying metric alarms
    /// 			are in ALARM state. Composite alarms can take the following actions:   Notify Amazon SNS topics.   Invoke Lambda functions.   Create OpsItems in Systems Manager Ops Center.   Create incidents in Systems Manager Incident Manager.    It is possible to create a loop or cycle of composite alarms, where composite alarm A depends on composite alarm B, and
    /// 			composite alarm B also depends on composite alarm A. In this scenario, you can't delete any composite alarm that is part of the cycle
    /// 			because there is always still a composite alarm that depends on that alarm that you want to delete. To get out of such a situation, you must
    /// 			break the cycle by changing the rule of one of the composite alarms in the cycle to remove a dependency that creates the cycle. The simplest
    /// 			change to make to break a cycle is to change the AlarmRule of one of the alarms to false.  Additionally, the evaluation of composite alarms stops if CloudWatch detects a cycle in the evaluation path.
    /// 		  When this operation creates an alarm, the alarm state is immediately set to
    /// 				INSUFFICIENT_DATA. The alarm is then evaluated and its state is set
    /// 			appropriately. Any actions associated with the new state are then executed. For a
    /// 			composite alarm, this initial time after creation is the only time that
    /// 			the
    /// 			alarm can be in INSUFFICIENT_DATA state. When you update an existing alarm, its state is left unchanged, but the update
    /// 			completely overwrites the previous configuration of the alarm. To use this operation, you must be signed on with
    /// 			the cloudwatch:PutCompositeAlarm permission that is scoped to *. You can't create a
    /// 			composite alarms if your cloudwatch:PutCompositeAlarm permission has a narrower scope. If you are an IAM user, you must have iam:CreateServiceLinkedRole to create
    /// 			a composite alarm that has Systems Manager OpsItem actions.
    @Sendable
    @inlinable
    public func putCompositeAlarm(_ input: PutCompositeAlarmInput, logger: Logger = AWSClient.loggingDisabled) async throws {
        try await self.client.execute(
            operation: "PutCompositeAlarm", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Creates or updates a composite alarm. When you create a composite
    /// 			alarm, you specify a rule expression for the alarm that takes into account the alarm
    /// 			states of other alarms that you have created. The composite alarm goes into ALARM state
    /// 			only if all conditions of the rule are met. The alarms specified in a composite alarm's rule expression can include metric alarms
    /// 			and other composite alarms. The rule expression of a composite alarm can include as many as 100 underlying alarms.
    /// 			Any single alarm can be included in the rule expressions of as many as 150 composite alarms. Using composite alarms can reduce
    /// 			alarm noise. You can create multiple metric alarms,
    /// 			and also create a composite alarm and
    /// 			set up alerts only
    /// 			for the composite alarm. For example, you could create a composite
    /// 			alarm that goes into ALARM state only when more than one of the underlying metric alarms
    /// 			are in ALARM state. Composite alarms can take the following actions:   Notify Amazon SNS topics.   Invoke Lambda functions.   Create OpsItems in Systems Manager Ops Center.   Create incidents in Systems Manager Incident Manager.    It is possible to create a loop or cycle of composite alarms, where composite alarm A depends on composite alarm B, and
    /// 			composite alarm B also depends on composite alarm A. In this scenario, you can't delete any composite alarm that is part of the cycle
    /// 			because there is always still a composite alarm that depends on that alarm that you want to delete. To get out of such a situation, you must
    /// 			break the cycle by changing the rule of one of the composite alarms in the cycle to remove a dependency that creates the cycle. The simplest
    /// 			change to make to break a cycle is to change the AlarmRule of one of the alarms to false.  Additionally, the evaluation of composite alarms stops if CloudWatch detects a cycle in the evaluation path.
    /// 		  When this operation creates an alarm, the alarm state is immediately set to
    /// 				INSUFFICIENT_DATA. The alarm is then evaluated and its state is set
    /// 			appropriately. Any actions associated with the new state are then executed. For a
    /// 			composite alarm, this initial time after creation is the only time that
    /// 			the
    /// 			alarm can be in INSUFFICIENT_DATA state. When you update an existing alarm, its state is left unchanged, but the update
    /// 			completely overwrites the previous configuration of the alarm. To use this operation, you must be signed on with
    /// 			the cloudwatch:PutCompositeAlarm permission that is scoped to *. You can't create a
    /// 			composite alarms if your cloudwatch:PutCompositeAlarm permission has a narrower scope. If you are an IAM user, you must have iam:CreateServiceLinkedRole to create
    /// 			a composite alarm that has Systems Manager OpsItem actions.
    ///
    /// Parameters:
    ///   - actionsEnabled: Indicates whether actions should be executed during any changes to the alarm state of the composite alarm. The default is
    ///   - actionsSuppressor: 			Actions will be suppressed
    ///   - actionsSuppressorExtensionPeriod: 			The maximum time
    ///   - actionsSuppressorWaitPeriod: 			The maximum time
    ///   - alarmActions: The actions to execute when this alarm transitions to the ALARM state from any other state.
    ///   - alarmDescription: The description for the composite alarm.
    ///   - alarmName: The name for the composite alarm. This name must be unique within the Region.
    ///   - alarmRule: An expression that specifies which other alarms are to be evaluated to determine this
    ///   - insufficientDataActions: The actions to execute when this alarm transitions to the INSUFFICIENT_DATA state from any other state.
    ///   - okActions: The actions to execute when this alarm transitions to an OK state
    ///   - tags: A list of key-value pairs to associate with the alarm. You can associate as many as 50 tags with an alarm.
    ///   - logger: Logger use during operation
    @inlinable
    public func putCompositeAlarm(
        actionsEnabled: Bool? = nil,
        actionsSuppressor: String? = nil,
        actionsSuppressorExtensionPeriod: Int? = nil,
        actionsSuppressorWaitPeriod: Int? = nil,
        alarmActions: [String]? = nil,
        alarmDescription: String? = nil,
        alarmName: String? = nil,
        alarmRule: String? = nil,
        insufficientDataActions: [String]? = nil,
        okActions: [String]? = nil,
        tags: [Tag]? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws {
        let input = PutCompositeAlarmInput(
            actionsEnabled: actionsEnabled, 
            actionsSuppressor: actionsSuppressor, 
            actionsSuppressorExtensionPeriod: actionsSuppressorExtensionPeriod, 
            actionsSuppressorWaitPeriod: actionsSuppressorWaitPeriod, 
            alarmActions: alarmActions, 
            alarmDescription: alarmDescription, 
            alarmName: alarmName, 
            alarmRule: alarmRule, 
            insufficientDataActions: insufficientDataActions, 
            okActions: okActions, 
            tags: tags
        )
        return try await self.putCompositeAlarm(input, logger: logger)
    }

    /// Creates a dashboard if it does not already exist, or updates an existing dashboard. If you update a dashboard,
    /// 		the entire contents are replaced with what you specify here. All dashboards in your account are global, not region-specific. A simple way to create a dashboard using PutDashboard is to copy an
    /// 			existing dashboard. To copy an existing dashboard using the console, you can load the dashboard
    /// 			and then use the View/edit source command in the Actions menu to display the JSON  block
    /// 			for that dashboard. Another way to copy a dashboard is to
    /// 			use GetDashboard, and then use the data returned
    /// 			within DashboardBody as the template for the new dashboard when you call PutDashboard. When you create a dashboard with PutDashboard, a good practice is to
    /// 			add a text widget at the top of the dashboard with a message that the dashboard was created by script and should
    /// 		not be changed in the console. This message could also point console users to the location
    /// 		of the DashboardBody script or the CloudFormation template used to create the
    /// 		dashboard.
    @Sendable
    @inlinable
    public func putDashboard(_ input: PutDashboardInput, logger: Logger = AWSClient.loggingDisabled) async throws -> PutDashboardOutput {
        try await self.client.execute(
            operation: "PutDashboard", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Creates a dashboard if it does not already exist, or updates an existing dashboard. If you update a dashboard,
    /// 		the entire contents are replaced with what you specify here. All dashboards in your account are global, not region-specific. A simple way to create a dashboard using PutDashboard is to copy an
    /// 			existing dashboard. To copy an existing dashboard using the console, you can load the dashboard
    /// 			and then use the View/edit source command in the Actions menu to display the JSON  block
    /// 			for that dashboard. Another way to copy a dashboard is to
    /// 			use GetDashboard, and then use the data returned
    /// 			within DashboardBody as the template for the new dashboard when you call PutDashboard. When you create a dashboard with PutDashboard, a good practice is to
    /// 			add a text widget at the top of the dashboard with a message that the dashboard was created by script and should
    /// 		not be changed in the console. This message could also point console users to the location
    /// 		of the DashboardBody script or the CloudFormation template used to create the
    /// 		dashboard.
    ///
    /// Parameters:
    ///   - dashboardBody: The detailed information about the dashboard in JSON format, including the widgets to include and their location
    ///   - dashboardName: The name of the dashboard. If a dashboard with this name already exists, this call modifies that dashboard, replacing
    ///   - logger: Logger use during operation
    @inlinable
    public func putDashboard(
        dashboardBody: String? = nil,
        dashboardName: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> PutDashboardOutput {
        let input = PutDashboardInput(
            dashboardBody: dashboardBody, 
            dashboardName: dashboardName
        )
        return try await self.putDashboard(input, logger: logger)
    }

    /// Creates a Contributor Insights rule. Rules evaluate log events in a
    /// 		CloudWatch Logs log group, enabling you to find contributor data for the log events in that log group. For more information,
    /// 		see Using Contributor Insights to Analyze High-Cardinality Data. If you create a rule, delete it, and then re-create it with the same name, historical data from the first time
    /// 			the rule was created might not be available.
    @Sendable
    @inlinable
    public func putInsightRule(_ input: PutInsightRuleInput, logger: Logger = AWSClient.loggingDisabled) async throws -> PutInsightRuleOutput {
        try await self.client.execute(
            operation: "PutInsightRule", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Creates a Contributor Insights rule. Rules evaluate log events in a
    /// 		CloudWatch Logs log group, enabling you to find contributor data for the log events in that log group. For more information,
    /// 		see Using Contributor Insights to Analyze High-Cardinality Data. If you create a rule, delete it, and then re-create it with the same name, historical data from the first time
    /// 			the rule was created might not be available.
    ///
    /// Parameters:
    ///   - ruleDefinition: The definition of the rule, as a JSON object. For details on the valid syntax, see
    ///   - ruleName: A unique name for the rule.
    ///   - ruleState: The state of the rule. Valid values are ENABLED and DISABLED.
    ///   - tags: A list of key-value pairs to associate with the Contributor Insights rule.
    ///   - logger: Logger use during operation
    @inlinable
    public func putInsightRule(
        ruleDefinition: String? = nil,
        ruleName: String? = nil,
        ruleState: String? = nil,
        tags: [Tag]? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> PutInsightRuleOutput {
        let input = PutInsightRuleInput(
            ruleDefinition: ruleDefinition, 
            ruleName: ruleName, 
            ruleState: ruleState, 
            tags: tags
        )
        return try await self.putInsightRule(input, logger: logger)
    }

    /// 			Creates a managed Contributor Insights rule
    /// 			for a specified Amazon Web Services resource.
    /// 			When you enable a managed rule,
    /// 			you create a Contributor Insights rule
    /// 			that collects data
    /// 			from Amazon Web Services services.
    /// 			You cannot edit these rules
    /// 			with PutInsightRule.
    /// 			The rules can be enabled, disabled, and deleted using EnableInsightRules, DisableInsightRules, and DeleteInsightRules.
    /// 			If a previously created managed rule is currently disabled,
    /// 			a subsequent call
    /// 			to this API will re-enable it.
    /// 			Use ListManagedInsightRules
    /// 			to describe all available rules.
    ///
    ///
    @Sendable
    @inlinable
    public func putManagedInsightRules(_ input: PutManagedInsightRulesInput, logger: Logger = AWSClient.loggingDisabled) async throws -> PutManagedInsightRulesOutput {
        try await self.client.execute(
            operation: "PutManagedInsightRules", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// 			Creates a managed Contributor Insights rule
    /// 			for a specified Amazon Web Services resource.
    /// 			When you enable a managed rule,
    /// 			you create a Contributor Insights rule
    /// 			that collects data
    /// 			from Amazon Web Services services.
    /// 			You cannot edit these rules
    /// 			with PutInsightRule.
    /// 			The rules can be enabled, disabled, and deleted using EnableInsightRules, DisableInsightRules, and DeleteInsightRules.
    /// 			If a previously created managed rule is currently disabled,
    /// 			a subsequent call
    /// 			to this API will re-enable it.
    /// 			Use ListManagedInsightRules
    /// 			to describe all available rules.
    ///
    ///
    ///
    /// Parameters:
    ///   - managedRules: 			A list
    ///   - logger: Logger use during operation
    @inlinable
    public func putManagedInsightRules(
        managedRules: [ManagedRule]? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> PutManagedInsightRulesOutput {
        let input = PutManagedInsightRulesInput(
            managedRules: managedRules
        )
        return try await self.putManagedInsightRules(input, logger: logger)
    }

    /// Creates or updates an alarm and associates it with the specified metric, metric math expression,
    /// 			anomaly detection model, or Metrics Insights query. For more information about using
    /// 			a Metrics Insights query for an alarm, see Create alarms on Metrics Insights queries. Alarms based on anomaly detection models cannot have Auto Scaling actions. When this operation creates an alarm, the alarm state is immediately set to
    /// 			INSUFFICIENT_DATA. The alarm is then evaluated and its state is set
    /// 			appropriately. Any actions associated with the new state are then executed. When you update an existing alarm, its state is left unchanged, but the
    /// 			update completely overwrites the previous configuration of the alarm. If you are an IAM user, you must have
    /// 			Amazon EC2 permissions for some alarm operations:   The iam:CreateServiceLinkedRole permission for all alarms with EC2 actions   The iam:CreateServiceLinkedRole permissions to create an alarm
    /// 					with Systems Manager OpsItem or response plan actions.   The first time you create an alarm in the
    /// 			Amazon Web Services Management Console, the CLI, or by using the PutMetricAlarm API, CloudWatch
    /// 			creates the necessary service-linked role for you. The service-linked roles
    /// 			are called AWSServiceRoleForCloudWatchEvents and
    /// 			AWSServiceRoleForCloudWatchAlarms_ActionSSM.
    /// 			For more information, see Amazon Web Services service-linked role. Each PutMetricAlarm action has a maximum uncompressed payload of 120 KB.  Cross-account alarms  You can set an alarm on metrics in the current account, or in another
    /// 			account. To create a cross-account alarm that watches a metric in a different account, you must have completed the following
    /// 			pre-requisites:   The account where the metrics are located (the sharing account) must
    /// 				already have a sharing role named CloudWatch-CrossAccountSharingRole. If it does not already
    /// 				have this role, you must create it using the instructions in Set up a
    /// 					sharing account in
    /// 					Cross-account cross-Region CloudWatch console. The policy for that
    /// 				role must grant access
    /// 				to the ID of the account where you are creating the alarm.
    /// 			   The account where you are creating the alarm (the monitoring account) must
    /// 				already have a service-linked role named
    /// 				AWSServiceRoleForCloudWatchCrossAccount to allow
    /// 				CloudWatch to assume the sharing role in the sharing account. If it does not, you must create it following the directions in Set up a
    /// 					monitoring account in
    /// 						Cross-account cross-Region CloudWatch console.
    @Sendable
    @inlinable
    public func putMetricAlarm(_ input: PutMetricAlarmInput, logger: Logger = AWSClient.loggingDisabled) async throws {
        try await self.client.execute(
            operation: "PutMetricAlarm", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Creates or updates an alarm and associates it with the specified metric, metric math expression,
    /// 			anomaly detection model, or Metrics Insights query. For more information about using
    /// 			a Metrics Insights query for an alarm, see Create alarms on Metrics Insights queries. Alarms based on anomaly detection models cannot have Auto Scaling actions. When this operation creates an alarm, the alarm state is immediately set to
    /// 			INSUFFICIENT_DATA. The alarm is then evaluated and its state is set
    /// 			appropriately. Any actions associated with the new state are then executed. When you update an existing alarm, its state is left unchanged, but the
    /// 			update completely overwrites the previous configuration of the alarm. If you are an IAM user, you must have
    /// 			Amazon EC2 permissions for some alarm operations:   The iam:CreateServiceLinkedRole permission for all alarms with EC2 actions   The iam:CreateServiceLinkedRole permissions to create an alarm
    /// 					with Systems Manager OpsItem or response plan actions.   The first time you create an alarm in the
    /// 			Amazon Web Services Management Console, the CLI, or by using the PutMetricAlarm API, CloudWatch
    /// 			creates the necessary service-linked role for you. The service-linked roles
    /// 			are called AWSServiceRoleForCloudWatchEvents and
    /// 			AWSServiceRoleForCloudWatchAlarms_ActionSSM.
    /// 			For more information, see Amazon Web Services service-linked role. Each PutMetricAlarm action has a maximum uncompressed payload of 120 KB.  Cross-account alarms  You can set an alarm on metrics in the current account, or in another
    /// 			account. To create a cross-account alarm that watches a metric in a different account, you must have completed the following
    /// 			pre-requisites:   The account where the metrics are located (the sharing account) must
    /// 				already have a sharing role named CloudWatch-CrossAccountSharingRole. If it does not already
    /// 				have this role, you must create it using the instructions in Set up a
    /// 					sharing account in
    /// 					Cross-account cross-Region CloudWatch console. The policy for that
    /// 				role must grant access
    /// 				to the ID of the account where you are creating the alarm.
    /// 			   The account where you are creating the alarm (the monitoring account) must
    /// 				already have a service-linked role named
    /// 				AWSServiceRoleForCloudWatchCrossAccount to allow
    /// 				CloudWatch to assume the sharing role in the sharing account. If it does not, you must create it following the directions in Set up a
    /// 					monitoring account in
    /// 						Cross-account cross-Region CloudWatch console.
    ///
    /// Parameters:
    ///   - actionsEnabled: Indicates whether actions should be executed during any changes to the alarm state. The default is
    ///   - alarmActions: The actions to execute when this alarm transitions to the ALARM state from any other state.
    ///   - alarmDescription: The description for the alarm.
    ///   - alarmName: The name for the alarm. This name must be unique within the Region. The name must contain only UTF-8
    ///   - comparisonOperator:  The arithmetic operation to use when comparing the specified statistic and
    ///   - datapointsToAlarm: The number of data points that must be breaching to trigger the alarm. This is used only if you are setting
    ///   - dimensions: The dimensions for the metric specified in MetricName.
    ///   - evaluateLowSampleCountPercentile:  Used only for alarms based on percentiles. If you specify ignore, the alarm state does not change during periods with too few data points to be
    ///   - evaluationPeriods: The number of periods over which data is compared to the specified threshold. If you are
    ///   - extendedStatistic: The extended statistic for the metric specified in MetricName. When you
    ///   - insufficientDataActions: The actions to execute when this alarm transitions to the INSUFFICIENT_DATA state from any other state.
    ///   - metricName: The name for the metric associated with the alarm. For each PutMetricAlarm
    ///   - metrics: An array of MetricDataQuery structures that enable you to create an alarm based on the result of a
    ///   - namespace: The namespace for the metric associated specified in MetricName.
    ///   - okActions: The actions to execute when this alarm transitions to an OK state
    ///   - period: The length, in seconds, used each time the metric specified in MetricName is
    ///   - statistic: The statistic for the metric specified in MetricName, other than percentile.
    ///   - tags: A list of key-value pairs to associate with the alarm. You can associate as many as 50 tags with an alarm.
    ///   - threshold: The value against which the specified statistic is compared. This parameter is required for alarms based on static thresholds, but should
    ///   - thresholdMetricId: If this is an alarm based on an anomaly detection model, make this value match
    ///   - treatMissingData:  Sets how this alarm is to handle missing data points. If TreatMissingData is omitted, the default behavior of missing is used.
    ///   - unit: The unit of measure for the statistic. For example, the units for the Amazon EC2
    ///   - logger: Logger use during operation
    @inlinable
    public func putMetricAlarm(
        actionsEnabled: Bool? = nil,
        alarmActions: [String]? = nil,
        alarmDescription: String? = nil,
        alarmName: String? = nil,
        comparisonOperator: ComparisonOperator? = nil,
        datapointsToAlarm: Int? = nil,
        dimensions: [Dimension]? = nil,
        evaluateLowSampleCountPercentile: String? = nil,
        evaluationPeriods: Int? = nil,
        extendedStatistic: String? = nil,
        insufficientDataActions: [String]? = nil,
        metricName: String? = nil,
        metrics: [MetricDataQuery]? = nil,
        namespace: String? = nil,
        okActions: [String]? = nil,
        period: Int? = nil,
        statistic: Statistic? = nil,
        tags: [Tag]? = nil,
        threshold: Double? = nil,
        thresholdMetricId: String? = nil,
        treatMissingData: String? = nil,
        unit: StandardUnit? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws {
        let input = PutMetricAlarmInput(
            actionsEnabled: actionsEnabled, 
            alarmActions: alarmActions, 
            alarmDescription: alarmDescription, 
            alarmName: alarmName, 
            comparisonOperator: comparisonOperator, 
            datapointsToAlarm: datapointsToAlarm, 
            dimensions: dimensions, 
            evaluateLowSampleCountPercentile: evaluateLowSampleCountPercentile, 
            evaluationPeriods: evaluationPeriods, 
            extendedStatistic: extendedStatistic, 
            insufficientDataActions: insufficientDataActions, 
            metricName: metricName, 
            metrics: metrics, 
            namespace: namespace, 
            okActions: okActions, 
            period: period, 
            statistic: statistic, 
            tags: tags, 
            threshold: threshold, 
            thresholdMetricId: thresholdMetricId, 
            treatMissingData: treatMissingData, 
            unit: unit
        )
        return try await self.putMetricAlarm(input, logger: logger)
    }

    /// Publishes metric data points to Amazon CloudWatch. CloudWatch associates
    /// 			the data points with the specified metric. If the specified metric does not exist,
    /// 			CloudWatch creates the metric. When CloudWatch creates a metric, it can
    /// 			take up to fifteen minutes for the metric to appear in calls to ListMetrics. You can publish either individual data points in the Value field, or
    /// 		arrays of values and the number of times each value occurred during the period by using the
    /// 		Values and Counts fields in the MetricData structure. Using
    /// 		the Values and Counts method enables you to publish up to 150 values per metric
    /// 			with one PutMetricData request, and
    /// 		supports retrieving percentile statistics on this data. Each PutMetricData request is limited to 1 MB in size for HTTP POST requests. You can
    /// 			send a payload compressed by gzip. Each request
    /// 		is also limited to no more than 1000 different metrics. Although the Value parameter accepts numbers of type
    /// 			Double, CloudWatch rejects values that are either too small
    /// 			or too large. Values must be in the range of -2^360 to 2^360. In addition, special values (for example, NaN, +Infinity,
    /// 			-Infinity) are not supported. You can use up to 30 dimensions per metric to further clarify what data the metric collects. Each dimension
    /// 			consists of a Name and Value pair. For more information about specifying dimensions, see Publishing Metrics in the
    /// 			Amazon CloudWatch User Guide. You specify the time stamp to be associated with each data point. You can specify
    /// 		time stamps that are as much as two weeks before the current date, and as much as 2 hours after
    /// 		the current day and time. Data points with time stamps from 24 hours ago or longer can take at least 48
    /// 			hours to become available for GetMetricData or
    /// 			GetMetricStatistics from the time they
    /// 			are submitted. Data points with time stamps between 3 and 24 hours ago can take as much as 2 hours to become available
    /// 			for for GetMetricData or
    /// 			GetMetricStatistics. CloudWatch needs raw data points to calculate percentile statistics. If you publish
    /// 			data using a statistic set instead, you can only retrieve
    /// 			percentile statistics for this data if one of the following conditions is true:   The SampleCount value of the statistic set is 1 and Min,
    /// 					Max, and Sum are all equal.   The Min and
    /// 					Max are equal, and Sum is equal to Min
    /// 					multiplied by SampleCount.
    @Sendable
    @inlinable
    public func putMetricData(_ input: PutMetricDataInput, logger: Logger = AWSClient.loggingDisabled) async throws {
        try await self.client.execute(
            operation: "PutMetricData", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Publishes metric data points to Amazon CloudWatch. CloudWatch associates
    /// 			the data points with the specified metric. If the specified metric does not exist,
    /// 			CloudWatch creates the metric. When CloudWatch creates a metric, it can
    /// 			take up to fifteen minutes for the metric to appear in calls to ListMetrics. You can publish either individual data points in the Value field, or
    /// 		arrays of values and the number of times each value occurred during the period by using the
    /// 		Values and Counts fields in the MetricData structure. Using
    /// 		the Values and Counts method enables you to publish up to 150 values per metric
    /// 			with one PutMetricData request, and
    /// 		supports retrieving percentile statistics on this data. Each PutMetricData request is limited to 1 MB in size for HTTP POST requests. You can
    /// 			send a payload compressed by gzip. Each request
    /// 		is also limited to no more than 1000 different metrics. Although the Value parameter accepts numbers of type
    /// 			Double, CloudWatch rejects values that are either too small
    /// 			or too large. Values must be in the range of -2^360 to 2^360. In addition, special values (for example, NaN, +Infinity,
    /// 			-Infinity) are not supported. You can use up to 30 dimensions per metric to further clarify what data the metric collects. Each dimension
    /// 			consists of a Name and Value pair. For more information about specifying dimensions, see Publishing Metrics in the
    /// 			Amazon CloudWatch User Guide. You specify the time stamp to be associated with each data point. You can specify
    /// 		time stamps that are as much as two weeks before the current date, and as much as 2 hours after
    /// 		the current day and time. Data points with time stamps from 24 hours ago or longer can take at least 48
    /// 			hours to become available for GetMetricData or
    /// 			GetMetricStatistics from the time they
    /// 			are submitted. Data points with time stamps between 3 and 24 hours ago can take as much as 2 hours to become available
    /// 			for for GetMetricData or
    /// 			GetMetricStatistics. CloudWatch needs raw data points to calculate percentile statistics. If you publish
    /// 			data using a statistic set instead, you can only retrieve
    /// 			percentile statistics for this data if one of the following conditions is true:   The SampleCount value of the statistic set is 1 and Min,
    /// 					Max, and Sum are all equal.   The Min and
    /// 					Max are equal, and Sum is equal to Min
    /// 					multiplied by SampleCount.
    ///
    /// Parameters:
    ///   - metricData: The data for the metric. The array can include no more than 1000 metrics per call.
    ///   - namespace: The namespace for the metric data. You can use ASCII characters for the namespace, except for
    ///   - logger: Logger use during operation
    @inlinable
    public func putMetricData(
        metricData: [MetricDatum]? = nil,
        namespace: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws {
        let input = PutMetricDataInput(
            metricData: metricData, 
            namespace: namespace
        )
        return try await self.putMetricData(input, logger: logger)
    }

    /// Creates or updates a metric stream. Metric streams can automatically stream CloudWatch
    /// 			metrics to Amazon Web Services destinations, including Amazon S3, and to many third-party
    /// 			solutions. For more information, see
    /// 		Using Metric Streams. To create a metric stream, you must be signed in to an account that has the
    /// 				iam:PassRole permission and either the
    /// 				CloudWatchFullAccess policy or the
    /// 				cloudwatch:PutMetricStream permission. When you create or update a metric stream, you choose one of the following:   Stream metrics from all metric namespaces in the account.   Stream metrics from all metric namespaces in the account, except
    /// 				for the namespaces that you list in ExcludeFilters.   Stream metrics from only the metric namespaces that you list in
    /// 				IncludeFilters.   By default, a metric stream always sends the MAX, MIN,
    /// 				SUM, and SAMPLECOUNT statistics for each metric that is
    /// 			streamed. You can use the StatisticsConfigurations parameter to have the
    /// 			metric stream send additional statistics in the stream. Streaming additional statistics
    /// 			incurs additional costs. For more information, see Amazon CloudWatch Pricing.  When you use PutMetricStream to create a new metric stream, the stream
    /// 		is created in the running state. If you use it to update an existing stream,
    /// 		the state of the stream is not changed. If you are using CloudWatch cross-account observability and you create a metric stream in a monitoring account,
    /// 			you can choose whether to include metrics from source accounts in the stream. For more information, see
    /// 			CloudWatch cross-account observability.
    @Sendable
    @inlinable
    public func putMetricStream(_ input: PutMetricStreamInput, logger: Logger = AWSClient.loggingDisabled) async throws -> PutMetricStreamOutput {
        try await self.client.execute(
            operation: "PutMetricStream", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Creates or updates a metric stream. Metric streams can automatically stream CloudWatch
    /// 			metrics to Amazon Web Services destinations, including Amazon S3, and to many third-party
    /// 			solutions. For more information, see
    /// 		Using Metric Streams. To create a metric stream, you must be signed in to an account that has the
    /// 				iam:PassRole permission and either the
    /// 				CloudWatchFullAccess policy or the
    /// 				cloudwatch:PutMetricStream permission. When you create or update a metric stream, you choose one of the following:   Stream metrics from all metric namespaces in the account.   Stream metrics from all metric namespaces in the account, except
    /// 				for the namespaces that you list in ExcludeFilters.   Stream metrics from only the metric namespaces that you list in
    /// 				IncludeFilters.   By default, a metric stream always sends the MAX, MIN,
    /// 				SUM, and SAMPLECOUNT statistics for each metric that is
    /// 			streamed. You can use the StatisticsConfigurations parameter to have the
    /// 			metric stream send additional statistics in the stream. Streaming additional statistics
    /// 			incurs additional costs. For more information, see Amazon CloudWatch Pricing.  When you use PutMetricStream to create a new metric stream, the stream
    /// 		is created in the running state. If you use it to update an existing stream,
    /// 		the state of the stream is not changed. If you are using CloudWatch cross-account observability and you create a metric stream in a monitoring account,
    /// 			you can choose whether to include metrics from source accounts in the stream. For more information, see
    /// 			CloudWatch cross-account observability.
    ///
    /// Parameters:
    ///   - excludeFilters: If you specify this parameter, the stream sends metrics from all
    ///   - firehoseArn: The ARN of the Amazon Kinesis Data Firehose delivery stream to use for this metric stream.
    ///   - includeFilters: If you specify this parameter, the stream sends only the
    ///   - includeLinkedAccountsMetrics: If you are creating a metric stream in a monitoring account,
    ///   - name: If you are creating a new metric stream, this is the name for the new stream. The name
    ///   - outputFormat: The output format for the stream. Valid values are json, opentelemetry1.0,
    ///   - roleArn: The ARN of an IAM role that this metric stream will use to access Amazon Kinesis Data
    ///   - statisticsConfigurations: By default, a metric stream always sends the MAX, MIN, SUM,
    ///   - tags: A list of key-value pairs to associate with the metric stream. You can associate as
    ///   - logger: Logger use during operation
    @inlinable
    public func putMetricStream(
        excludeFilters: [MetricStreamFilter]? = nil,
        firehoseArn: String? = nil,
        includeFilters: [MetricStreamFilter]? = nil,
        includeLinkedAccountsMetrics: Bool? = nil,
        name: String? = nil,
        outputFormat: MetricStreamOutputFormat? = nil,
        roleArn: String? = nil,
        statisticsConfigurations: [MetricStreamStatisticsConfiguration]? = nil,
        tags: [Tag]? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> PutMetricStreamOutput {
        let input = PutMetricStreamInput(
            excludeFilters: excludeFilters, 
            firehoseArn: firehoseArn, 
            includeFilters: includeFilters, 
            includeLinkedAccountsMetrics: includeLinkedAccountsMetrics, 
            name: name, 
            outputFormat: outputFormat, 
            roleArn: roleArn, 
            statisticsConfigurations: statisticsConfigurations, 
            tags: tags
        )
        return try await self.putMetricStream(input, logger: logger)
    }

    /// Temporarily sets the state of an alarm for testing purposes. When the updated
    /// 			state differs from the previous value, the action configured for
    /// 			the appropriate state is invoked. For example, if your alarm is configured to send an
    /// 			Amazon SNS message when an alarm is triggered, temporarily changing the alarm state to
    /// 			ALARM sends an SNS message. Metric alarms
    /// 			returns to their actual state quickly, often within seconds. Because the metric alarm state change
    /// 			happens quickly, it is typically only visible in the alarm's History tab in the Amazon CloudWatch console or through
    /// 			DescribeAlarmHistory. If you use SetAlarmState on a composite alarm, the composite alarm is not guaranteed to return
    /// 			to its actual state. It
    /// 			returns to its actual state only once any of its children alarms change state. It is also
    /// 			reevaluated if you update its
    /// 			configuration. If an alarm triggers EC2 Auto Scaling policies or application Auto Scaling policies, you must include
    /// 		information in the StateReasonData parameter to enable the policy to take the correct action.
    @Sendable
    @inlinable
    public func setAlarmState(_ input: SetAlarmStateInput, logger: Logger = AWSClient.loggingDisabled) async throws {
        try await self.client.execute(
            operation: "SetAlarmState", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Temporarily sets the state of an alarm for testing purposes. When the updated
    /// 			state differs from the previous value, the action configured for
    /// 			the appropriate state is invoked. For example, if your alarm is configured to send an
    /// 			Amazon SNS message when an alarm is triggered, temporarily changing the alarm state to
    /// 			ALARM sends an SNS message. Metric alarms
    /// 			returns to their actual state quickly, often within seconds. Because the metric alarm state change
    /// 			happens quickly, it is typically only visible in the alarm's History tab in the Amazon CloudWatch console or through
    /// 			DescribeAlarmHistory. If you use SetAlarmState on a composite alarm, the composite alarm is not guaranteed to return
    /// 			to its actual state. It
    /// 			returns to its actual state only once any of its children alarms change state. It is also
    /// 			reevaluated if you update its
    /// 			configuration. If an alarm triggers EC2 Auto Scaling policies or application Auto Scaling policies, you must include
    /// 		information in the StateReasonData parameter to enable the policy to take the correct action.
    ///
    /// Parameters:
    ///   - alarmName: The name of the alarm.
    ///   - stateReason: The reason that this alarm is set to this specific state, in text format.
    ///   - stateReasonData: The reason that this alarm is set to this specific state, in JSON format. For SNS or EC2 alarm actions, this is just informational. But for EC2 Auto Scaling or application Auto Scaling
    ///   - stateValue: The value of the state.
    ///   - logger: Logger use during operation
    @inlinable
    public func setAlarmState(
        alarmName: String? = nil,
        stateReason: String? = nil,
        stateReasonData: String? = nil,
        stateValue: StateValue? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws {
        let input = SetAlarmStateInput(
            alarmName: alarmName, 
            stateReason: stateReason, 
            stateReasonData: stateReasonData, 
            stateValue: stateValue
        )
        return try await self.setAlarmState(input, logger: logger)
    }

    /// Starts the streaming of metrics for one or more of your metric streams.
    @Sendable
    @inlinable
    public func startMetricStreams(_ input: StartMetricStreamsInput, logger: Logger = AWSClient.loggingDisabled) async throws -> StartMetricStreamsOutput {
        try await self.client.execute(
            operation: "StartMetricStreams", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Starts the streaming of metrics for one or more of your metric streams.
    ///
    /// Parameters:
    ///   - names: The array of the names of metric streams to start streaming. This is an "all or nothing" operation. If you do not have
    ///   - logger: Logger use during operation
    @inlinable
    public func startMetricStreams(
        names: [String]? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> StartMetricStreamsOutput {
        let input = StartMetricStreamsInput(
            names: names
        )
        return try await self.startMetricStreams(input, logger: logger)
    }

    /// Stops the streaming of metrics for one or more of your metric streams.
    @Sendable
    @inlinable
    public func stopMetricStreams(_ input: StopMetricStreamsInput, logger: Logger = AWSClient.loggingDisabled) async throws -> StopMetricStreamsOutput {
        try await self.client.execute(
            operation: "StopMetricStreams", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Stops the streaming of metrics for one or more of your metric streams.
    ///
    /// Parameters:
    ///   - names: The array of the names of metric streams to stop streaming. This is an "all or nothing" operation. If you do not have
    ///   - logger: Logger use during operation
    @inlinable
    public func stopMetricStreams(
        names: [String]? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> StopMetricStreamsOutput {
        let input = StopMetricStreamsInput(
            names: names
        )
        return try await self.stopMetricStreams(input, logger: logger)
    }

    /// Assigns one or more tags (key-value pairs) to the specified CloudWatch resource. Currently, the only CloudWatch resources that
    /// 			can be tagged are alarms and Contributor Insights rules. Tags can help you organize and categorize your resources. You can also use them to scope user
    /// 			permissions by granting a user
    /// 			permission to access or change only resources with certain tag values. Tags don't have any semantic meaning to Amazon Web Services and are interpreted strictly as strings of characters. You can use the TagResource action with an alarm that already has tags. If you specify a new tag key for the alarm,
    /// 			this tag is appended to the list of tags associated
    /// 			with the alarm. If you specify a tag key that is already associated with the alarm, the new tag value that you specify replaces
    /// 			the previous value for that tag. You can associate as many as 50 tags with a CloudWatch resource.
    @Sendable
    @inlinable
    public func tagResource(_ input: TagResourceInput, logger: Logger = AWSClient.loggingDisabled) async throws -> TagResourceOutput {
        try await self.client.execute(
            operation: "TagResource", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Assigns one or more tags (key-value pairs) to the specified CloudWatch resource. Currently, the only CloudWatch resources that
    /// 			can be tagged are alarms and Contributor Insights rules. Tags can help you organize and categorize your resources. You can also use them to scope user
    /// 			permissions by granting a user
    /// 			permission to access or change only resources with certain tag values. Tags don't have any semantic meaning to Amazon Web Services and are interpreted strictly as strings of characters. You can use the TagResource action with an alarm that already has tags. If you specify a new tag key for the alarm,
    /// 			this tag is appended to the list of tags associated
    /// 			with the alarm. If you specify a tag key that is already associated with the alarm, the new tag value that you specify replaces
    /// 			the previous value for that tag. You can associate as many as 50 tags with a CloudWatch resource.
    ///
    /// Parameters:
    ///   - resourceARN: The ARN of the CloudWatch resource that you're adding tags to. The ARN format of an alarm is
    ///   - tags: The list of key-value pairs to associate with the alarm.
    ///   - logger: Logger use during operation
    @inlinable
    public func tagResource(
        resourceARN: String? = nil,
        tags: [Tag]? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> TagResourceOutput {
        let input = TagResourceInput(
            resourceARN: resourceARN, 
            tags: tags
        )
        return try await self.tagResource(input, logger: logger)
    }

    /// Removes one or more tags from the specified resource.
    @Sendable
    @inlinable
    public func untagResource(_ input: UntagResourceInput, logger: Logger = AWSClient.loggingDisabled) async throws -> UntagResourceOutput {
        try await self.client.execute(
            operation: "UntagResource", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Removes one or more tags from the specified resource.
    ///
    /// Parameters:
    ///   - resourceARN: The ARN of the CloudWatch resource that you're removing tags from. The ARN format of an alarm is
    ///   - tagKeys: The list of tag keys to remove from the resource.
    ///   - logger: Logger use during operation
    @inlinable
    public func untagResource(
        resourceARN: String? = nil,
        tagKeys: [String]? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> UntagResourceOutput {
        let input = UntagResourceInput(
            resourceARN: resourceARN, 
            tagKeys: tagKeys
        )
        return try await self.untagResource(input, logger: logger)
    }
}

extension CloudWatch {
    /// Initializer required by `AWSService.with(middlewares:timeout:byteBufferAllocator:options)`. You are not able to use this initializer directly as there are not public
    /// initializers for `AWSServiceConfig.Patch`. Please use `AWSService.with(middlewares:timeout:byteBufferAllocator:options)` instead.
    public init(from: CloudWatch, patch: AWSServiceConfig.Patch) {
        self.client = from.client
        self.config = from.config.with(patch: patch)
    }
}

// MARK: Paginators

@available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
extension CloudWatch {
    /// Return PaginatorSequence for operation ``describeAlarmHistory(_:logger:)``.
    ///
    /// - Parameters:
    ///   - input: Input for operation
    ///   - logger: Logger used for logging
    @inlinable
    public func describeAlarmHistoryPaginator(
        _ input: DescribeAlarmHistoryInput,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<DescribeAlarmHistoryInput, DescribeAlarmHistoryOutput> {
        return .init(
            input: input,
            command: self.describeAlarmHistory,
            inputKey: \DescribeAlarmHistoryInput.nextToken,
            outputKey: \DescribeAlarmHistoryOutput.nextToken,
            logger: logger
        )
    }
    /// Return PaginatorSequence for operation ``describeAlarmHistory(_:logger:)``.
    ///
    /// - Parameters:
    ///   - alarmName: The name of the alarm.
    ///   - alarmTypes: Use this parameter to specify whether you want the operation to return metric alarms or composite alarms. If you omit this parameter,
    ///   - endDate: The ending date to retrieve alarm history.
    ///   - historyItemType: The type of alarm histories to retrieve.
    ///   - maxRecords: The maximum number of alarm history records to retrieve.
    ///   - scanBy: Specified whether to return the newest or oldest alarm history first. Specify TimestampDescending to have the newest
    ///   - startDate: The starting date to retrieve alarm history.
    ///   - logger: Logger used for logging
    @inlinable
    public func describeAlarmHistoryPaginator(
        alarmName: String? = nil,
        alarmTypes: [AlarmType]? = nil,
        endDate: Date? = nil,
        historyItemType: HistoryItemType? = nil,
        maxRecords: Int? = nil,
        scanBy: ScanBy? = nil,
        startDate: Date? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) -> AWSClient.PaginatorSequence<DescribeAlarmHistoryInput, DescribeAlarmHistoryOutput> {
        let input = DescribeAlarmHistoryInput(
            alarmName: alarmName, 
            alarmTypes: alarmTypes, 
            endDate: endDate, 
            historyItemType: historyItemType, 
            maxRecords: maxRecords, 
            scanBy: scanBy, 
            startDate: startDate
        )
        return self.describeAlarmHistoryPaginator(input, logger: logger)
    }

    /// Return PaginatorSequence for operation ``describeAlarms(_:logger:)``.
    ///
    /// - Parameters:
    ///   - input: Input for operation
    ///   - logger: Logger used for logging
    @inlinable
    public func describeAlarmsPaginator(
        _ input: DescribeAlarmsInput,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<DescribeAlarmsInput, DescribeAlarmsOutput> {
        return .init(
            input: input,
            command: self.describeAlarms,
            inputKey: \DescribeAlarmsInput.nextToken,
            outputKey: \DescribeAlarmsOutput.nextToken,
            logger: logger
        )
    }
    /// Return PaginatorSequence for operation ``describeAlarms(_:logger:)``.
    ///
    /// - Parameters:
    ///   - actionPrefix: Use this parameter to filter the results of the operation to only those alarms that
    ///   - alarmNamePrefix: An alarm name prefix. If you specify this parameter, you receive information about all alarms that have names
    ///   - alarmNames: The names of the alarms to retrieve information about.
    ///   - alarmTypes: Use this parameter to specify whether you want the operation to return metric alarms or composite alarms. If you
    ///   - childrenOfAlarmName: If you use this parameter and specify the name of a composite alarm, the operation returns
    ///   - maxRecords: The maximum number of alarm descriptions to retrieve.
    ///   - parentsOfAlarmName: If you use this parameter and specify the name of a metric or composite alarm, the operation returns
    ///   - stateValue: Specify this parameter to receive information only about alarms that are currently in the state that you specify.
    ///   - logger: Logger used for logging
    @inlinable
    public func describeAlarmsPaginator(
        actionPrefix: String? = nil,
        alarmNamePrefix: String? = nil,
        alarmNames: [String]? = nil,
        alarmTypes: [AlarmType]? = nil,
        childrenOfAlarmName: String? = nil,
        maxRecords: Int? = nil,
        parentsOfAlarmName: String? = nil,
        stateValue: StateValue? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) -> AWSClient.PaginatorSequence<DescribeAlarmsInput, DescribeAlarmsOutput> {
        let input = DescribeAlarmsInput(
            actionPrefix: actionPrefix, 
            alarmNamePrefix: alarmNamePrefix, 
            alarmNames: alarmNames, 
            alarmTypes: alarmTypes, 
            childrenOfAlarmName: childrenOfAlarmName, 
            maxRecords: maxRecords, 
            parentsOfAlarmName: parentsOfAlarmName, 
            stateValue: stateValue
        )
        return self.describeAlarmsPaginator(input, logger: logger)
    }

    /// Return PaginatorSequence for operation ``describeAnomalyDetectors(_:logger:)``.
    ///
    /// - Parameters:
    ///   - input: Input for operation
    ///   - logger: Logger used for logging
    @inlinable
    public func describeAnomalyDetectorsPaginator(
        _ input: DescribeAnomalyDetectorsInput,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<DescribeAnomalyDetectorsInput, DescribeAnomalyDetectorsOutput> {
        return .init(
            input: input,
            command: self.describeAnomalyDetectors,
            inputKey: \DescribeAnomalyDetectorsInput.nextToken,
            outputKey: \DescribeAnomalyDetectorsOutput.nextToken,
            logger: logger
        )
    }
    /// Return PaginatorSequence for operation ``describeAnomalyDetectors(_:logger:)``.
    ///
    /// - Parameters:
    ///   - anomalyDetectorTypes: The anomaly detector types to request when using DescribeAnomalyDetectorsInput.
    ///   - dimensions: Limits the results to only the anomaly detection models that are associated with the
    ///   - maxResults: The maximum number of results to return in one operation. The maximum
    ///   - metricName: Limits the results to only the anomaly detection models that are associated with the
    ///   - namespace: Limits the results to only the anomaly detection models that
    ///   - logger: Logger used for logging
    @inlinable
    public func describeAnomalyDetectorsPaginator(
        anomalyDetectorTypes: [AnomalyDetectorType]? = nil,
        dimensions: [Dimension]? = nil,
        maxResults: Int? = nil,
        metricName: String? = nil,
        namespace: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) -> AWSClient.PaginatorSequence<DescribeAnomalyDetectorsInput, DescribeAnomalyDetectorsOutput> {
        let input = DescribeAnomalyDetectorsInput(
            anomalyDetectorTypes: anomalyDetectorTypes, 
            dimensions: dimensions, 
            maxResults: maxResults, 
            metricName: metricName, 
            namespace: namespace
        )
        return self.describeAnomalyDetectorsPaginator(input, logger: logger)
    }

    /// Return PaginatorSequence for operation ``describeInsightRules(_:logger:)``.
    ///
    /// - Parameters:
    ///   - input: Input for operation
    ///   - logger: Logger used for logging
    @inlinable
    public func describeInsightRulesPaginator(
        _ input: DescribeInsightRulesInput,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<DescribeInsightRulesInput, DescribeInsightRulesOutput> {
        return .init(
            input: input,
            command: self.describeInsightRules,
            inputKey: \DescribeInsightRulesInput.nextToken,
            outputKey: \DescribeInsightRulesOutput.nextToken,
            logger: logger
        )
    }
    /// Return PaginatorSequence for operation ``describeInsightRules(_:logger:)``.
    ///
    /// - Parameters:
    ///   - maxResults: The maximum number of results to return in one operation. If you omit this
    ///   - logger: Logger used for logging
    @inlinable
    public func describeInsightRulesPaginator(
        maxResults: Int? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) -> AWSClient.PaginatorSequence<DescribeInsightRulesInput, DescribeInsightRulesOutput> {
        let input = DescribeInsightRulesInput(
            maxResults: maxResults
        )
        return self.describeInsightRulesPaginator(input, logger: logger)
    }

    /// Return PaginatorSequence for operation ``getMetricData(_:logger:)``.
    ///
    /// - Parameters:
    ///   - input: Input for operation
    ///   - logger: Logger used for logging
    @inlinable
    public func getMetricDataPaginator(
        _ input: GetMetricDataInput,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<GetMetricDataInput, GetMetricDataOutput> {
        return .init(
            input: input,
            command: self.getMetricData,
            inputKey: \GetMetricDataInput.nextToken,
            outputKey: \GetMetricDataOutput.nextToken,
            logger: logger
        )
    }
    /// Return PaginatorSequence for operation ``getMetricData(_:logger:)``.
    ///
    /// - Parameters:
    ///   - endTime: The time stamp indicating the latest data to be returned. The value specified is exclusive; results include data points up to the specified time stamp. For better performance, specify StartTime and EndTime
    ///   - labelOptions: This structure includes the Timezone parameter, which you can use
    ///   - maxDatapoints: The maximum number of data points the request should return before paginating. If you omit
    ///   - metricDataQueries: The metric queries to be returned. A single GetMetricData call can
    ///   - scanBy: The order in which data points should be returned. TimestampDescending returns the newest data first and paginates
    ///   - startTime: The time stamp indicating the earliest data to be returned. The value specified is inclusive; results include data points with the specified time stamp.  CloudWatch rounds the specified time stamp as follows:   Start time less than 15 days ago - Round down to the nearest whole minute.
    ///   - logger: Logger used for logging
    @inlinable
    public func getMetricDataPaginator(
        endTime: Date? = nil,
        labelOptions: LabelOptions? = nil,
        maxDatapoints: Int? = nil,
        metricDataQueries: [MetricDataQuery]? = nil,
        scanBy: ScanBy? = nil,
        startTime: Date? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) -> AWSClient.PaginatorSequence<GetMetricDataInput, GetMetricDataOutput> {
        let input = GetMetricDataInput(
            endTime: endTime, 
            labelOptions: labelOptions, 
            maxDatapoints: maxDatapoints, 
            metricDataQueries: metricDataQueries, 
            scanBy: scanBy, 
            startTime: startTime
        )
        return self.getMetricDataPaginator(input, logger: logger)
    }

    /// Return PaginatorSequence for operation ``listDashboards(_:logger:)``.
    ///
    /// - Parameters:
    ///   - input: Input for operation
    ///   - logger: Logger used for logging
    @inlinable
    public func listDashboardsPaginator(
        _ input: ListDashboardsInput,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<ListDashboardsInput, ListDashboardsOutput> {
        return .init(
            input: input,
            command: self.listDashboards,
            inputKey: \ListDashboardsInput.nextToken,
            outputKey: \ListDashboardsOutput.nextToken,
            logger: logger
        )
    }
    /// Return PaginatorSequence for operation ``listDashboards(_:logger:)``.
    ///
    /// - Parameters:
    ///   - dashboardNamePrefix: If you specify this parameter, only
    ///   - logger: Logger used for logging
    @inlinable
    public func listDashboardsPaginator(
        dashboardNamePrefix: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) -> AWSClient.PaginatorSequence<ListDashboardsInput, ListDashboardsOutput> {
        let input = ListDashboardsInput(
            dashboardNamePrefix: dashboardNamePrefix
        )
        return self.listDashboardsPaginator(input, logger: logger)
    }

    /// Return PaginatorSequence for operation ``listManagedInsightRules(_:logger:)``.
    ///
    /// - Parameters:
    ///   - input: Input for operation
    ///   - logger: Logger used for logging
    @inlinable
    public func listManagedInsightRulesPaginator(
        _ input: ListManagedInsightRulesInput,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<ListManagedInsightRulesInput, ListManagedInsightRulesOutput> {
        return .init(
            input: input,
            command: self.listManagedInsightRules,
            inputKey: \ListManagedInsightRulesInput.nextToken,
            outputKey: \ListManagedInsightRulesOutput.nextToken,
            logger: logger
        )
    }
    /// Return PaginatorSequence for operation ``listManagedInsightRules(_:logger:)``.
    ///
    /// - Parameters:
    ///   - maxResults: 			The maximum number
    ///   - resourceARN: 			The ARN
    ///   - logger: Logger used for logging
    @inlinable
    public func listManagedInsightRulesPaginator(
        maxResults: Int? = nil,
        resourceARN: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) -> AWSClient.PaginatorSequence<ListManagedInsightRulesInput, ListManagedInsightRulesOutput> {
        let input = ListManagedInsightRulesInput(
            maxResults: maxResults, 
            resourceARN: resourceARN
        )
        return self.listManagedInsightRulesPaginator(input, logger: logger)
    }

    /// Return PaginatorSequence for operation ``listMetricStreams(_:logger:)``.
    ///
    /// - Parameters:
    ///   - input: Input for operation
    ///   - logger: Logger used for logging
    @inlinable
    public func listMetricStreamsPaginator(
        _ input: ListMetricStreamsInput,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<ListMetricStreamsInput, ListMetricStreamsOutput> {
        return .init(
            input: input,
            command: self.listMetricStreams,
            inputKey: \ListMetricStreamsInput.nextToken,
            outputKey: \ListMetricStreamsOutput.nextToken,
            logger: logger
        )
    }
    /// Return PaginatorSequence for operation ``listMetricStreams(_:logger:)``.
    ///
    /// - Parameters:
    ///   - maxResults: The maximum number of results to return in one operation.
    ///   - logger: Logger used for logging
    @inlinable
    public func listMetricStreamsPaginator(
        maxResults: Int? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) -> AWSClient.PaginatorSequence<ListMetricStreamsInput, ListMetricStreamsOutput> {
        let input = ListMetricStreamsInput(
            maxResults: maxResults
        )
        return self.listMetricStreamsPaginator(input, logger: logger)
    }

    /// Return PaginatorSequence for operation ``listMetrics(_:logger:)``.
    ///
    /// - Parameters:
    ///   - input: Input for operation
    ///   - logger: Logger used for logging
    @inlinable
    public func listMetricsPaginator(
        _ input: ListMetricsInput,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<ListMetricsInput, ListMetricsOutput> {
        return .init(
            input: input,
            command: self.listMetrics,
            inputKey: \ListMetricsInput.nextToken,
            outputKey: \ListMetricsOutput.nextToken,
            logger: logger
        )
    }
    /// Return PaginatorSequence for operation ``listMetrics(_:logger:)``.
    ///
    /// - Parameters:
    ///   - dimensions: The dimensions to filter against.  Only the dimensions that match exactly
    ///   - includeLinkedAccounts: If you are using this operation in a monitoring account,
    ///   - metricName: The name of the metric to filter against. Only the metrics with names that match exactly
    ///   - namespace: The metric namespace to filter against. Only the namespace that matches exactly
    ///   - owningAccount: When you use this operation in a monitoring account, use this field to return metrics only from one source account.
    ///   - recentlyActive: To filter the results to show only metrics that have had data points published
    ///   - logger: Logger used for logging
    @inlinable
    public func listMetricsPaginator(
        dimensions: [DimensionFilter]? = nil,
        includeLinkedAccounts: Bool? = nil,
        metricName: String? = nil,
        namespace: String? = nil,
        owningAccount: String? = nil,
        recentlyActive: RecentlyActive? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) -> AWSClient.PaginatorSequence<ListMetricsInput, ListMetricsOutput> {
        let input = ListMetricsInput(
            dimensions: dimensions, 
            includeLinkedAccounts: includeLinkedAccounts, 
            metricName: metricName, 
            namespace: namespace, 
            owningAccount: owningAccount, 
            recentlyActive: recentlyActive
        )
        return self.listMetricsPaginator(input, logger: logger)
    }
}

extension CloudWatch.DescribeAlarmHistoryInput: AWSPaginateToken {
    @inlinable
    public func usingPaginationToken(_ token: String) -> CloudWatch.DescribeAlarmHistoryInput {
        return .init(
            alarmName: self.alarmName,
            alarmTypes: self.alarmTypes,
            endDate: self.endDate,
            historyItemType: self.historyItemType,
            maxRecords: self.maxRecords,
            nextToken: token,
            scanBy: self.scanBy,
            startDate: self.startDate
        )
    }
}

extension CloudWatch.DescribeAlarmsInput: AWSPaginateToken {
    @inlinable
    public func usingPaginationToken(_ token: String) -> CloudWatch.DescribeAlarmsInput {
        return .init(
            actionPrefix: self.actionPrefix,
            alarmNamePrefix: self.alarmNamePrefix,
            alarmNames: self.alarmNames,
            alarmTypes: self.alarmTypes,
            childrenOfAlarmName: self.childrenOfAlarmName,
            maxRecords: self.maxRecords,
            nextToken: token,
            parentsOfAlarmName: self.parentsOfAlarmName,
            stateValue: self.stateValue
        )
    }
}

extension CloudWatch.DescribeAnomalyDetectorsInput: AWSPaginateToken {
    @inlinable
    public func usingPaginationToken(_ token: String) -> CloudWatch.DescribeAnomalyDetectorsInput {
        return .init(
            anomalyDetectorTypes: self.anomalyDetectorTypes,
            dimensions: self.dimensions,
            maxResults: self.maxResults,
            metricName: self.metricName,
            namespace: self.namespace,
            nextToken: token
        )
    }
}

extension CloudWatch.DescribeInsightRulesInput: AWSPaginateToken {
    @inlinable
    public func usingPaginationToken(_ token: String) -> CloudWatch.DescribeInsightRulesInput {
        return .init(
            maxResults: self.maxResults,
            nextToken: token
        )
    }
}

extension CloudWatch.GetMetricDataInput: AWSPaginateToken {
    @inlinable
    public func usingPaginationToken(_ token: String) -> CloudWatch.GetMetricDataInput {
        return .init(
            endTime: self.endTime,
            labelOptions: self.labelOptions,
            maxDatapoints: self.maxDatapoints,
            metricDataQueries: self.metricDataQueries,
            nextToken: token,
            scanBy: self.scanBy,
            startTime: self.startTime
        )
    }
}

extension CloudWatch.ListDashboardsInput: AWSPaginateToken {
    @inlinable
    public func usingPaginationToken(_ token: String) -> CloudWatch.ListDashboardsInput {
        return .init(
            dashboardNamePrefix: self.dashboardNamePrefix,
            nextToken: token
        )
    }
}

extension CloudWatch.ListManagedInsightRulesInput: AWSPaginateToken {
    @inlinable
    public func usingPaginationToken(_ token: String) -> CloudWatch.ListManagedInsightRulesInput {
        return .init(
            maxResults: self.maxResults,
            nextToken: token,
            resourceARN: self.resourceARN
        )
    }
}

extension CloudWatch.ListMetricStreamsInput: AWSPaginateToken {
    @inlinable
    public func usingPaginationToken(_ token: String) -> CloudWatch.ListMetricStreamsInput {
        return .init(
            maxResults: self.maxResults,
            nextToken: token
        )
    }
}

extension CloudWatch.ListMetricsInput: AWSPaginateToken {
    @inlinable
    public func usingPaginationToken(_ token: String) -> CloudWatch.ListMetricsInput {
        return .init(
            dimensions: self.dimensions,
            includeLinkedAccounts: self.includeLinkedAccounts,
            metricName: self.metricName,
            namespace: self.namespace,
            nextToken: token,
            owningAccount: self.owningAccount,
            recentlyActive: self.recentlyActive
        )
    }
}

// MARK: Waiters

@available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
extension CloudWatch {
    /// Waiter for operation ``describeAlarms(_:logger:)``.
    ///
    /// - Parameters:
    ///   - input: Input for operation
    ///   - logger: Logger used for logging
    @inlinable
    public func waitUntilAlarmExists(
        _ input: DescribeAlarmsInput,
        maxWaitTime: TimeAmount? = nil,
        logger: Logger = AWSClient.loggingDisabled
    ) async throws {
        let waiter = AWSClient.Waiter<DescribeAlarmsInput, _>(
            acceptors: [
                .init(state: .success, matcher: try! JMESPathMatcher("length(metricAlarms[]) > `0`", expected: "true")),
            ],
            minDelayTime: .seconds(5),
            command: self.describeAlarms
        )
        return try await self.client.waitUntil(input, waiter: waiter, maxWaitTime: maxWaitTime, logger: logger)
    }
    /// Waiter for operation ``describeAlarms(_:logger:)``.
    ///
    /// - Parameters:
    ///   - actionPrefix: Use this parameter to filter the results of the operation to only those alarms that
    ///   - alarmNamePrefix: An alarm name prefix. If you specify this parameter, you receive information about all alarms that have names
    ///   - alarmNames: The names of the alarms to retrieve information about.
    ///   - alarmTypes: Use this parameter to specify whether you want the operation to return metric alarms or composite alarms. If you
    ///   - childrenOfAlarmName: If you use this parameter and specify the name of a composite alarm, the operation returns
    ///   - maxRecords: The maximum number of alarm descriptions to retrieve.
    ///   - nextToken: The token returned by a previous call to indicate that there is more data
    ///   - parentsOfAlarmName: If you use this parameter and specify the name of a metric or composite alarm, the operation returns
    ///   - stateValue: Specify this parameter to receive information only about alarms that are currently in the state that you specify.
    ///   - logger: Logger used for logging
    @inlinable
    public func waitUntilAlarmExists(
        actionPrefix: String? = nil,
        alarmNamePrefix: String? = nil,
        alarmNames: [String]? = nil,
        alarmTypes: [AlarmType]? = nil,
        childrenOfAlarmName: String? = nil,
        maxRecords: Int? = nil,
        nextToken: String? = nil,
        parentsOfAlarmName: String? = nil,
        stateValue: StateValue? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws {
        let input = DescribeAlarmsInput(
            actionPrefix: actionPrefix, 
            alarmNamePrefix: alarmNamePrefix, 
            alarmNames: alarmNames, 
            alarmTypes: alarmTypes, 
            childrenOfAlarmName: childrenOfAlarmName, 
            maxRecords: maxRecords, 
            nextToken: nextToken, 
            parentsOfAlarmName: parentsOfAlarmName, 
            stateValue: stateValue
        )
        try await self.waitUntilAlarmExists(input, logger: logger)
    }

    /// Waiter for operation ``describeAlarms(_:logger:)``.
    ///
    /// - Parameters:
    ///   - input: Input for operation
    ///   - logger: Logger used for logging
    @inlinable
    public func waitUntilCompositeAlarmExists(
        _ input: DescribeAlarmsInput,
        maxWaitTime: TimeAmount? = nil,
        logger: Logger = AWSClient.loggingDisabled
    ) async throws {
        let waiter = AWSClient.Waiter<DescribeAlarmsInput, _>(
            acceptors: [
                .init(state: .success, matcher: try! JMESPathMatcher("length(compositeAlarms[]) > `0`", expected: "true")),
            ],
            minDelayTime: .seconds(5),
            command: self.describeAlarms
        )
        return try await self.client.waitUntil(input, waiter: waiter, maxWaitTime: maxWaitTime, logger: logger)
    }
    /// Waiter for operation ``describeAlarms(_:logger:)``.
    ///
    /// - Parameters:
    ///   - actionPrefix: Use this parameter to filter the results of the operation to only those alarms that
    ///   - alarmNamePrefix: An alarm name prefix. If you specify this parameter, you receive information about all alarms that have names
    ///   - alarmNames: The names of the alarms to retrieve information about.
    ///   - alarmTypes: Use this parameter to specify whether you want the operation to return metric alarms or composite alarms. If you
    ///   - childrenOfAlarmName: If you use this parameter and specify the name of a composite alarm, the operation returns
    ///   - maxRecords: The maximum number of alarm descriptions to retrieve.
    ///   - nextToken: The token returned by a previous call to indicate that there is more data
    ///   - parentsOfAlarmName: If you use this parameter and specify the name of a metric or composite alarm, the operation returns
    ///   - stateValue: Specify this parameter to receive information only about alarms that are currently in the state that you specify.
    ///   - logger: Logger used for logging
    @inlinable
    public func waitUntilCompositeAlarmExists(
        actionPrefix: String? = nil,
        alarmNamePrefix: String? = nil,
        alarmNames: [String]? = nil,
        alarmTypes: [AlarmType]? = nil,
        childrenOfAlarmName: String? = nil,
        maxRecords: Int? = nil,
        nextToken: String? = nil,
        parentsOfAlarmName: String? = nil,
        stateValue: StateValue? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws {
        let input = DescribeAlarmsInput(
            actionPrefix: actionPrefix, 
            alarmNamePrefix: alarmNamePrefix, 
            alarmNames: alarmNames, 
            alarmTypes: alarmTypes, 
            childrenOfAlarmName: childrenOfAlarmName, 
            maxRecords: maxRecords, 
            nextToken: nextToken, 
            parentsOfAlarmName: parentsOfAlarmName, 
            stateValue: stateValue
        )
        try await self.waitUntilCompositeAlarmExists(input, logger: logger)
    }
}
