//===----------------------------------------------------------------------===//
//
// This source file is part of the Soto for AWS open source project
//
// Copyright (c) 2017-2023 the Soto project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
// See CONTRIBUTORS.txt for the list of Soto project authors
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by https://github.com/soto-project/soto-codegenerator.
// DO NOT EDIT.

@_exported import SotoCore

/// Service object for interacting with AWS DirectoryService service.
///
/// Directory Service Directory Service is a web service that makes it easy for you to setup and run directories in the Amazon Web Services cloud, or connect your Amazon Web Services resources with an existing self-managed Microsoft Active Directory. This guide provides detailed information about Directory Service operations, data types, parameters, and errors. For information about Directory Services features, see Directory Service and the Directory Service Administration Guide.  Amazon Web Services provides SDKs that consist of libraries and sample code for various programming languages and platforms (Java, Ruby, .Net, iOS, Android, etc.). The SDKs provide a convenient way to create programmatic access to Directory Service and other Amazon Web Services services. For more information about the Amazon Web Services SDKs, including how to download and install them, see Tools for Amazon Web Services.
public struct DirectoryService: AWSService {
    // MARK: Member variables

    /// Client used for communication with AWS
    public let client: AWSClient
    /// Service configuration
    public let config: AWSServiceConfig

    // MARK: Initialization

    /// Initialize the DirectoryService client
    /// - parameters:
    ///     - client: AWSClient used to process requests
    ///     - region: Region of server you want to communicate with. This will override the partition parameter.
    ///     - partition: AWS partition where service resides, standard (.aws), china (.awscn), government (.awsusgov).
    ///     - endpoint: Custom endpoint URL to use instead of standard AWS servers
    ///     - middleware: Middleware chain used to edit requests before they are sent and responses before they are decoded 
    ///     - timeout: Timeout value for HTTP requests
    ///     - byteBufferAllocator: Allocator for ByteBuffers
    ///     - options: Service options
    public init(
        client: AWSClient,
        region: SotoCore.Region? = nil,
        partition: AWSPartition = .aws,
        endpoint: String? = nil,
        middleware: AWSMiddlewareProtocol? = nil,
        timeout: TimeAmount? = nil,
        byteBufferAllocator: ByteBufferAllocator = ByteBufferAllocator(),
        options: AWSServiceConfig.Options = []
    ) {
        self.client = client
        self.config = AWSServiceConfig(
            region: region,
            partition: region?.partition ?? partition,
            amzTarget: "DirectoryService_20150416",
            serviceName: "DirectoryService",
            serviceIdentifier: "ds",
            serviceProtocol: .json(version: "1.1"),
            apiVersion: "2015-04-16",
            endpoint: endpoint,
            variantEndpoints: Self.variantEndpoints,
            errorType: DirectoryServiceErrorType.self,
            xmlNamespace: "http://directoryservice.amazonaws.com/doc/2015-04-16/",
            middleware: middleware,
            timeout: timeout,
            byteBufferAllocator: byteBufferAllocator,
            options: options
        )
    }




    /// FIPS and dualstack endpoints
    static var variantEndpoints: [EndpointVariantType: AWSServiceConfig.EndpointVariant] {[
        [.fips]: .init(endpoints: [
            "ca-central-1": "ds-fips.ca-central-1.amazonaws.com",
            "ca-west-1": "ds-fips.ca-west-1.amazonaws.com",
            "us-east-1": "ds-fips.us-east-1.amazonaws.com",
            "us-east-2": "ds-fips.us-east-2.amazonaws.com",
            "us-gov-east-1": "ds-fips.us-gov-east-1.amazonaws.com",
            "us-gov-west-1": "ds-fips.us-gov-west-1.amazonaws.com",
            "us-west-1": "ds-fips.us-west-1.amazonaws.com",
            "us-west-2": "ds-fips.us-west-2.amazonaws.com"
        ])
    ]}

    // MARK: API Calls

    /// Accepts a directory sharing request that was sent from the directory owner account.
    @Sendable
    public func acceptSharedDirectory(_ input: AcceptSharedDirectoryRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> AcceptSharedDirectoryResult {
        return try await self.client.execute(
            operation: "AcceptSharedDirectory", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// If the DNS server for your self-managed domain uses a publicly addressable IP address, you must add a CIDR address block to correctly route traffic to and from your Microsoft AD on Amazon Web Services. AddIpRoutes adds this address block. You can also use AddIpRoutes to facilitate routing traffic that uses public IP ranges from your Microsoft AD on Amazon Web Services to a peer VPC.  Before you call AddIpRoutes, ensure that all of the required permissions have been explicitly granted through a policy. For details about what permissions are required to run the AddIpRoutes operation, see Directory Service API Permissions: Actions, Resources, and Conditions Reference.
    @Sendable
    public func addIpRoutes(_ input: AddIpRoutesRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> AddIpRoutesResult {
        return try await self.client.execute(
            operation: "AddIpRoutes", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Adds two domain controllers in the specified Region for the specified directory.
    @Sendable
    public func addRegion(_ input: AddRegionRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> AddRegionResult {
        return try await self.client.execute(
            operation: "AddRegion", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Adds or overwrites one or more tags for the specified directory. Each directory can have a maximum of 50 tags. Each tag consists of a key and optional value. Tag keys must be unique to each resource.
    @Sendable
    public func addTagsToResource(_ input: AddTagsToResourceRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> AddTagsToResourceResult {
        return try await self.client.execute(
            operation: "AddTagsToResource", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Cancels an in-progress schema extension to a Microsoft AD directory. Once a schema extension has started replicating to all domain controllers, the task can no longer be canceled. A schema extension can be canceled during any of the following states; Initializing, CreatingSnapshot, and UpdatingSchema.
    @Sendable
    public func cancelSchemaExtension(_ input: CancelSchemaExtensionRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> CancelSchemaExtensionResult {
        return try await self.client.execute(
            operation: "CancelSchemaExtension", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Creates an AD Connector to connect to a self-managed directory. Before you call ConnectDirectory, ensure that all of the required permissions have been explicitly granted through a policy. For details about what permissions are required to run the ConnectDirectory operation, see Directory Service API Permissions: Actions, Resources, and Conditions Reference.
    @Sendable
    public func connectDirectory(_ input: ConnectDirectoryRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> ConnectDirectoryResult {
        return try await self.client.execute(
            operation: "ConnectDirectory", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Creates an alias for a directory and assigns the alias to the directory. The alias is used to construct the access URL for the directory, such as http://.awsapps.com.  After an alias has been created, it cannot be deleted or reused, so this operation should only be used when absolutely necessary.
    @Sendable
    public func createAlias(_ input: CreateAliasRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> CreateAliasResult {
        return try await self.client.execute(
            operation: "CreateAlias", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Creates an Active Directory computer object in the specified directory.
    @Sendable
    public func createComputer(_ input: CreateComputerRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> CreateComputerResult {
        return try await self.client.execute(
            operation: "CreateComputer", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Creates a conditional forwarder associated with your Amazon Web Services directory. Conditional forwarders are required in order to set up a trust relationship with another domain. The conditional forwarder points to the trusted domain.
    @Sendable
    public func createConditionalForwarder(_ input: CreateConditionalForwarderRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> CreateConditionalForwarderResult {
        return try await self.client.execute(
            operation: "CreateConditionalForwarder", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Creates a Simple AD directory. For more information, see Simple Active Directory in the Directory Service Admin Guide. Before you call CreateDirectory, ensure that all of the required permissions have been explicitly granted through a policy. For details about what permissions are required to run the CreateDirectory operation, see Directory Service API Permissions: Actions, Resources, and Conditions Reference.
    @Sendable
    public func createDirectory(_ input: CreateDirectoryRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> CreateDirectoryResult {
        return try await self.client.execute(
            operation: "CreateDirectory", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Creates a subscription to forward real-time Directory Service domain controller security logs to the specified Amazon CloudWatch log group in your Amazon Web Services account.
    @Sendable
    public func createLogSubscription(_ input: CreateLogSubscriptionRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> CreateLogSubscriptionResult {
        return try await self.client.execute(
            operation: "CreateLogSubscription", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Creates a Microsoft AD directory in the Amazon Web Services Cloud. For more information, see Managed Microsoft AD in the Directory Service Admin Guide. Before you call CreateMicrosoftAD, ensure that all of the required permissions have been explicitly granted through a policy. For details about what permissions are required to run the CreateMicrosoftAD operation, see Directory Service API Permissions: Actions, Resources, and Conditions Reference.
    @Sendable
    public func createMicrosoftAD(_ input: CreateMicrosoftADRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> CreateMicrosoftADResult {
        return try await self.client.execute(
            operation: "CreateMicrosoftAD", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Creates a snapshot of a Simple AD or Microsoft AD directory in the Amazon Web Services cloud.  You cannot take snapshots of AD Connector directories.
    @Sendable
    public func createSnapshot(_ input: CreateSnapshotRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> CreateSnapshotResult {
        return try await self.client.execute(
            operation: "CreateSnapshot", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Directory Service for Microsoft Active Directory allows you to configure trust relationships. For example, you can establish a trust between your Managed Microsoft AD directory, and your existing self-managed Microsoft Active Directory. This would allow you to provide users and groups access to resources in either domain, with a single set of credentials. This action initiates the creation of the Amazon Web Services side of a trust relationship between an Managed Microsoft AD directory and an external domain. You can create either a forest trust or an external trust.
    @Sendable
    public func createTrust(_ input: CreateTrustRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> CreateTrustResult {
        return try await self.client.execute(
            operation: "CreateTrust", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Deletes a conditional forwarder that has been set up for your Amazon Web Services directory.
    @Sendable
    public func deleteConditionalForwarder(_ input: DeleteConditionalForwarderRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DeleteConditionalForwarderResult {
        return try await self.client.execute(
            operation: "DeleteConditionalForwarder", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Deletes an Directory Service directory. Before you call DeleteDirectory, ensure that all of the required permissions have been explicitly granted through a policy. For details about what permissions are required to run the DeleteDirectory operation, see Directory Service API Permissions: Actions, Resources, and Conditions Reference.
    @Sendable
    public func deleteDirectory(_ input: DeleteDirectoryRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DeleteDirectoryResult {
        return try await self.client.execute(
            operation: "DeleteDirectory", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Deletes the specified log subscription.
    @Sendable
    public func deleteLogSubscription(_ input: DeleteLogSubscriptionRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DeleteLogSubscriptionResult {
        return try await self.client.execute(
            operation: "DeleteLogSubscription", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Deletes a directory snapshot.
    @Sendable
    public func deleteSnapshot(_ input: DeleteSnapshotRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DeleteSnapshotResult {
        return try await self.client.execute(
            operation: "DeleteSnapshot", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Deletes an existing trust relationship between your Managed Microsoft AD directory and an external domain.
    @Sendable
    public func deleteTrust(_ input: DeleteTrustRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DeleteTrustResult {
        return try await self.client.execute(
            operation: "DeleteTrust", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Deletes from the system the certificate that was registered for secure LDAP or client certificate authentication.
    @Sendable
    public func deregisterCertificate(_ input: DeregisterCertificateRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DeregisterCertificateResult {
        return try await self.client.execute(
            operation: "DeregisterCertificate", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Removes the specified directory as a publisher to the specified Amazon SNS topic.
    @Sendable
    public func deregisterEventTopic(_ input: DeregisterEventTopicRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DeregisterEventTopicResult {
        return try await self.client.execute(
            operation: "DeregisterEventTopic", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Displays information about the certificate registered for secure LDAP or client certificate authentication.
    @Sendable
    public func describeCertificate(_ input: DescribeCertificateRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DescribeCertificateResult {
        return try await self.client.execute(
            operation: "DescribeCertificate", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Retrieves information about the type of client authentication for the specified directory, if the type is specified. If no type is specified, information about all client authentication types that are supported for the specified directory is retrieved. Currently, only SmartCard is supported.
    @Sendable
    public func describeClientAuthenticationSettings(_ input: DescribeClientAuthenticationSettingsRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DescribeClientAuthenticationSettingsResult {
        return try await self.client.execute(
            operation: "DescribeClientAuthenticationSettings", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Obtains information about the conditional forwarders for this account. If no input parameters are provided for RemoteDomainNames, this request describes all conditional forwarders for the specified directory ID.
    @Sendable
    public func describeConditionalForwarders(_ input: DescribeConditionalForwardersRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DescribeConditionalForwardersResult {
        return try await self.client.execute(
            operation: "DescribeConditionalForwarders", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Obtains information about the directories that belong to this account. You can retrieve information about specific directories by passing the directory identifiers in the DirectoryIds parameter. Otherwise, all directories that belong to the current account are returned. This operation supports pagination with the use of the NextToken request and response parameters. If more results are available, the DescribeDirectoriesResult.NextToken member contains a token that you pass in the next call to DescribeDirectories to retrieve the next set of items. You can also specify a maximum number of return results with the Limit parameter.
    @Sendable
    public func describeDirectories(_ input: DescribeDirectoriesRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DescribeDirectoriesResult {
        return try await self.client.execute(
            operation: "DescribeDirectories", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Provides information about any domain controllers in your directory.
    @Sendable
    public func describeDomainControllers(_ input: DescribeDomainControllersRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DescribeDomainControllersResult {
        return try await self.client.execute(
            operation: "DescribeDomainControllers", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Obtains information about which Amazon SNS topics receive status messages from the specified directory. If no input parameters are provided, such as DirectoryId or TopicName, this request describes all of the associations in the account.
    @Sendable
    public func describeEventTopics(_ input: DescribeEventTopicsRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DescribeEventTopicsResult {
        return try await self.client.execute(
            operation: "DescribeEventTopics", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Describes the status of LDAP security for the specified directory.
    @Sendable
    public func describeLDAPSSettings(_ input: DescribeLDAPSSettingsRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DescribeLDAPSSettingsResult {
        return try await self.client.execute(
            operation: "DescribeLDAPSSettings", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Provides information about the Regions that are configured for multi-Region replication.
    @Sendable
    public func describeRegions(_ input: DescribeRegionsRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DescribeRegionsResult {
        return try await self.client.execute(
            operation: "DescribeRegions", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Retrieves information about the configurable settings for the specified directory.
    @Sendable
    public func describeSettings(_ input: DescribeSettingsRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DescribeSettingsResult {
        return try await self.client.execute(
            operation: "DescribeSettings", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Returns the shared directories in your account.
    @Sendable
    public func describeSharedDirectories(_ input: DescribeSharedDirectoriesRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DescribeSharedDirectoriesResult {
        return try await self.client.execute(
            operation: "DescribeSharedDirectories", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Obtains information about the directory snapshots that belong to this account. This operation supports pagination with the use of the NextToken request and response parameters. If more results are available, the DescribeSnapshots.NextToken member contains a token that you pass in the next call to DescribeSnapshots to retrieve the next set of items. You can also specify a maximum number of return results with the Limit parameter.
    @Sendable
    public func describeSnapshots(_ input: DescribeSnapshotsRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DescribeSnapshotsResult {
        return try await self.client.execute(
            operation: "DescribeSnapshots", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Obtains information about the trust relationships for this account. If no input parameters are provided, such as DirectoryId or TrustIds, this request describes all the trust relationships belonging to the account.
    @Sendable
    public func describeTrusts(_ input: DescribeTrustsRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DescribeTrustsResult {
        return try await self.client.execute(
            operation: "DescribeTrusts", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    ///  Describes the updates of a directory for a particular update type.
    @Sendable
    public func describeUpdateDirectory(_ input: DescribeUpdateDirectoryRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DescribeUpdateDirectoryResult {
        return try await self.client.execute(
            operation: "DescribeUpdateDirectory", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Disables alternative client authentication methods for the specified directory.
    @Sendable
    public func disableClientAuthentication(_ input: DisableClientAuthenticationRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DisableClientAuthenticationResult {
        return try await self.client.execute(
            operation: "DisableClientAuthentication", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Deactivates LDAP secure calls for the specified directory.
    @Sendable
    public func disableLDAPS(_ input: DisableLDAPSRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DisableLDAPSResult {
        return try await self.client.execute(
            operation: "DisableLDAPS", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Disables multi-factor authentication (MFA) with the Remote Authentication Dial In User Service (RADIUS) server for an AD Connector or Microsoft AD directory.
    @Sendable
    public func disableRadius(_ input: DisableRadiusRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DisableRadiusResult {
        return try await self.client.execute(
            operation: "DisableRadius", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Disables single-sign on for a directory.
    @Sendable
    public func disableSso(_ input: DisableSsoRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DisableSsoResult {
        return try await self.client.execute(
            operation: "DisableSso", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Enables alternative client authentication methods for the specified directory.
    @Sendable
    public func enableClientAuthentication(_ input: EnableClientAuthenticationRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> EnableClientAuthenticationResult {
        return try await self.client.execute(
            operation: "EnableClientAuthentication", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Activates the switch for the specific directory to always use LDAP secure calls.
    @Sendable
    public func enableLDAPS(_ input: EnableLDAPSRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> EnableLDAPSResult {
        return try await self.client.execute(
            operation: "EnableLDAPS", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Enables multi-factor authentication (MFA) with the Remote Authentication Dial In User Service (RADIUS) server for an AD Connector or Microsoft AD directory.
    @Sendable
    public func enableRadius(_ input: EnableRadiusRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> EnableRadiusResult {
        return try await self.client.execute(
            operation: "EnableRadius", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Enables single sign-on for a directory. Single sign-on allows users in your directory to access certain Amazon Web Services services from a computer joined to the directory without having to enter their credentials separately.
    @Sendable
    public func enableSso(_ input: EnableSsoRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> EnableSsoResult {
        return try await self.client.execute(
            operation: "EnableSso", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Obtains directory limit information for the current Region.
    @Sendable
    public func getDirectoryLimits(_ input: GetDirectoryLimitsRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> GetDirectoryLimitsResult {
        return try await self.client.execute(
            operation: "GetDirectoryLimits", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Obtains the manual snapshot limits for a directory.
    @Sendable
    public func getSnapshotLimits(_ input: GetSnapshotLimitsRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> GetSnapshotLimitsResult {
        return try await self.client.execute(
            operation: "GetSnapshotLimits", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// For the specified directory, lists all the certificates registered for a secure LDAP or client certificate authentication.
    @Sendable
    public func listCertificates(_ input: ListCertificatesRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> ListCertificatesResult {
        return try await self.client.execute(
            operation: "ListCertificates", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Lists the address blocks that you have added to a directory.
    @Sendable
    public func listIpRoutes(_ input: ListIpRoutesRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> ListIpRoutesResult {
        return try await self.client.execute(
            operation: "ListIpRoutes", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Lists the active log subscriptions for the Amazon Web Services account.
    @Sendable
    public func listLogSubscriptions(_ input: ListLogSubscriptionsRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> ListLogSubscriptionsResult {
        return try await self.client.execute(
            operation: "ListLogSubscriptions", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Lists all schema extensions applied to a Microsoft AD Directory.
    @Sendable
    public func listSchemaExtensions(_ input: ListSchemaExtensionsRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> ListSchemaExtensionsResult {
        return try await self.client.execute(
            operation: "ListSchemaExtensions", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Lists all tags on a directory.
    @Sendable
    public func listTagsForResource(_ input: ListTagsForResourceRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> ListTagsForResourceResult {
        return try await self.client.execute(
            operation: "ListTagsForResource", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Registers a certificate for a secure LDAP or client certificate authentication.
    @Sendable
    public func registerCertificate(_ input: RegisterCertificateRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> RegisterCertificateResult {
        return try await self.client.execute(
            operation: "RegisterCertificate", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Associates a directory with an Amazon SNS topic. This establishes the directory as a publisher to the specified Amazon SNS topic. You can then receive email or text (SMS) messages when the status of your directory changes. You get notified if your directory goes from an Active status to an Impaired or Inoperable status. You also receive a notification when the directory returns to an Active status.
    @Sendable
    public func registerEventTopic(_ input: RegisterEventTopicRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> RegisterEventTopicResult {
        return try await self.client.execute(
            operation: "RegisterEventTopic", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Rejects a directory sharing request that was sent from the directory owner account.
    @Sendable
    public func rejectSharedDirectory(_ input: RejectSharedDirectoryRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> RejectSharedDirectoryResult {
        return try await self.client.execute(
            operation: "RejectSharedDirectory", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Removes IP address blocks from a directory.
    @Sendable
    public func removeIpRoutes(_ input: RemoveIpRoutesRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> RemoveIpRoutesResult {
        return try await self.client.execute(
            operation: "RemoveIpRoutes", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Stops all replication and removes the domain controllers from the specified Region. You cannot remove the primary Region with this operation. Instead, use the DeleteDirectory API.
    @Sendable
    public func removeRegion(_ input: RemoveRegionRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> RemoveRegionResult {
        return try await self.client.execute(
            operation: "RemoveRegion", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Removes tags from a directory.
    @Sendable
    public func removeTagsFromResource(_ input: RemoveTagsFromResourceRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> RemoveTagsFromResourceResult {
        return try await self.client.execute(
            operation: "RemoveTagsFromResource", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Resets the password for any user in your Managed Microsoft AD or Simple AD directory. You can reset the password for any user in your directory with the following exceptions:   For Simple AD, you cannot reset the password for any user that is a member of either the Domain Admins or Enterprise Admins group except for the administrator user.   For Managed Microsoft AD, you can only reset the password for a user that is in an OU based off of the NetBIOS name that you typed when you created your directory. For example, you cannot reset the password for a user in the Amazon Web Services Reserved OU. For more information about the OU structure for an Managed Microsoft AD directory, see What Gets Created in the Directory Service Administration Guide.
    @Sendable
    public func resetUserPassword(_ input: ResetUserPasswordRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> ResetUserPasswordResult {
        return try await self.client.execute(
            operation: "ResetUserPassword", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Restores a directory using an existing directory snapshot. When you restore a directory from a snapshot, any changes made to the directory after the snapshot date are overwritten. This action returns as soon as the restore operation is initiated. You can monitor the progress of the restore operation by calling the DescribeDirectories operation with the directory identifier. When the DirectoryDescription.Stage value changes to Active, the restore operation is complete.
    @Sendable
    public func restoreFromSnapshot(_ input: RestoreFromSnapshotRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> RestoreFromSnapshotResult {
        return try await self.client.execute(
            operation: "RestoreFromSnapshot", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Shares a specified directory (DirectoryId) in your Amazon Web Services account (directory owner) with another Amazon Web Services account (directory consumer). With this operation you can use your directory from any Amazon Web Services account and from any Amazon VPC within an Amazon Web Services Region. When you share your Managed Microsoft AD directory, Directory Service creates a shared directory in the directory consumer account. This shared directory contains the metadata to provide access to the directory within the directory owner account. The shared directory is visible in all VPCs in the directory consumer account. The ShareMethod parameter determines whether the specified directory can be shared between Amazon Web Services accounts inside the same Amazon Web Services organization (ORGANIZATIONS). It also determines whether you can share the directory with any other Amazon Web Services account either inside or outside of the organization (HANDSHAKE). The ShareNotes parameter is only used when HANDSHAKE is called, which sends a directory sharing request to the directory consumer.
    @Sendable
    public func shareDirectory(_ input: ShareDirectoryRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> ShareDirectoryResult {
        return try await self.client.execute(
            operation: "ShareDirectory", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Applies a schema extension to a Microsoft AD directory.
    @Sendable
    public func startSchemaExtension(_ input: StartSchemaExtensionRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> StartSchemaExtensionResult {
        return try await self.client.execute(
            operation: "StartSchemaExtension", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Stops the directory sharing between the directory owner and consumer accounts.
    @Sendable
    public func unshareDirectory(_ input: UnshareDirectoryRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> UnshareDirectoryResult {
        return try await self.client.execute(
            operation: "UnshareDirectory", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Updates a conditional forwarder that has been set up for your Amazon Web Services directory.
    @Sendable
    public func updateConditionalForwarder(_ input: UpdateConditionalForwarderRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> UpdateConditionalForwarderResult {
        return try await self.client.execute(
            operation: "UpdateConditionalForwarder", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    ///  Updates the directory for a particular update type.
    @Sendable
    public func updateDirectorySetup(_ input: UpdateDirectorySetupRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> UpdateDirectorySetupResult {
        return try await self.client.execute(
            operation: "UpdateDirectorySetup", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Adds or removes domain controllers to or from the directory. Based on the difference between current value and new value (provided through this API call), domain controllers will be added or removed. It may take up to 45 minutes for any new domain controllers to become fully active once the requested number of domain controllers is updated. During this time, you cannot make another update request.
    @Sendable
    public func updateNumberOfDomainControllers(_ input: UpdateNumberOfDomainControllersRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> UpdateNumberOfDomainControllersResult {
        return try await self.client.execute(
            operation: "UpdateNumberOfDomainControllers", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Updates the Remote Authentication Dial In User Service (RADIUS) server information for an AD Connector or Microsoft AD directory.
    @Sendable
    public func updateRadius(_ input: UpdateRadiusRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> UpdateRadiusResult {
        return try await self.client.execute(
            operation: "UpdateRadius", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Updates the configurable settings for the specified directory.
    @Sendable
    public func updateSettings(_ input: UpdateSettingsRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> UpdateSettingsResult {
        return try await self.client.execute(
            operation: "UpdateSettings", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Updates the trust that has been set up between your Managed Microsoft AD directory and an self-managed Active Directory.
    @Sendable
    public func updateTrust(_ input: UpdateTrustRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> UpdateTrustResult {
        return try await self.client.execute(
            operation: "UpdateTrust", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Directory Service for Microsoft Active Directory allows you to configure and verify trust relationships. This action verifies a trust relationship between your Managed Microsoft AD directory and an external domain.
    @Sendable
    public func verifyTrust(_ input: VerifyTrustRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> VerifyTrustResult {
        return try await self.client.execute(
            operation: "VerifyTrust", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
}

extension DirectoryService {
    /// Initializer required by `AWSService.with(middlewares:timeout:byteBufferAllocator:options)`. You are not able to use this initializer directly as there are not public
    /// initializers for `AWSServiceConfig.Patch`. Please use `AWSService.with(middlewares:timeout:byteBufferAllocator:options)` instead.
    public init(from: DirectoryService, patch: AWSServiceConfig.Patch) {
        self.client = from.client
        self.config = from.config.with(patch: patch)
    }
}

// MARK: Paginators

@available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
extension DirectoryService {
    /// Retrieves information about the type of client authentication for the specified directory, if the type is specified. If no type is specified, information about all client authentication types that are supported for the specified directory is retrieved. Currently, only SmartCard is supported.
    /// Return PaginatorSequence for operation.
    ///
    /// - Parameters:
    ///   - input: Input for request
    ///   - logger: Logger used flot logging
    public func describeClientAuthenticationSettingsPaginator(
        _ input: DescribeClientAuthenticationSettingsRequest,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<DescribeClientAuthenticationSettingsRequest, DescribeClientAuthenticationSettingsResult> {
        return .init(
            input: input,
            command: self.describeClientAuthenticationSettings,
            inputKey: \DescribeClientAuthenticationSettingsRequest.nextToken,
            outputKey: \DescribeClientAuthenticationSettingsResult.nextToken,
            logger: logger
        )
    }

    /// Obtains information about the directories that belong to this account. You can retrieve information about specific directories by passing the directory identifiers in the DirectoryIds parameter. Otherwise, all directories that belong to the current account are returned. This operation supports pagination with the use of the NextToken request and response parameters. If more results are available, the DescribeDirectoriesResult.NextToken member contains a token that you pass in the next call to DescribeDirectories to retrieve the next set of items. You can also specify a maximum number of return results with the Limit parameter.
    /// Return PaginatorSequence for operation.
    ///
    /// - Parameters:
    ///   - input: Input for request
    ///   - logger: Logger used flot logging
    public func describeDirectoriesPaginator(
        _ input: DescribeDirectoriesRequest,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<DescribeDirectoriesRequest, DescribeDirectoriesResult> {
        return .init(
            input: input,
            command: self.describeDirectories,
            inputKey: \DescribeDirectoriesRequest.nextToken,
            outputKey: \DescribeDirectoriesResult.nextToken,
            logger: logger
        )
    }

    /// Provides information about any domain controllers in your directory.
    /// Return PaginatorSequence for operation.
    ///
    /// - Parameters:
    ///   - input: Input for request
    ///   - logger: Logger used flot logging
    public func describeDomainControllersPaginator(
        _ input: DescribeDomainControllersRequest,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<DescribeDomainControllersRequest, DescribeDomainControllersResult> {
        return .init(
            input: input,
            command: self.describeDomainControllers,
            inputKey: \DescribeDomainControllersRequest.nextToken,
            outputKey: \DescribeDomainControllersResult.nextToken,
            logger: logger
        )
    }

    /// Describes the status of LDAP security for the specified directory.
    /// Return PaginatorSequence for operation.
    ///
    /// - Parameters:
    ///   - input: Input for request
    ///   - logger: Logger used flot logging
    public func describeLDAPSSettingsPaginator(
        _ input: DescribeLDAPSSettingsRequest,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<DescribeLDAPSSettingsRequest, DescribeLDAPSSettingsResult> {
        return .init(
            input: input,
            command: self.describeLDAPSSettings,
            inputKey: \DescribeLDAPSSettingsRequest.nextToken,
            outputKey: \DescribeLDAPSSettingsResult.nextToken,
            logger: logger
        )
    }

    /// Provides information about the Regions that are configured for multi-Region replication.
    /// Return PaginatorSequence for operation.
    ///
    /// - Parameters:
    ///   - input: Input for request
    ///   - logger: Logger used flot logging
    public func describeRegionsPaginator(
        _ input: DescribeRegionsRequest,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<DescribeRegionsRequest, DescribeRegionsResult> {
        return .init(
            input: input,
            command: self.describeRegions,
            inputKey: \DescribeRegionsRequest.nextToken,
            outputKey: \DescribeRegionsResult.nextToken,
            logger: logger
        )
    }

    /// Returns the shared directories in your account.
    /// Return PaginatorSequence for operation.
    ///
    /// - Parameters:
    ///   - input: Input for request
    ///   - logger: Logger used flot logging
    public func describeSharedDirectoriesPaginator(
        _ input: DescribeSharedDirectoriesRequest,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<DescribeSharedDirectoriesRequest, DescribeSharedDirectoriesResult> {
        return .init(
            input: input,
            command: self.describeSharedDirectories,
            inputKey: \DescribeSharedDirectoriesRequest.nextToken,
            outputKey: \DescribeSharedDirectoriesResult.nextToken,
            logger: logger
        )
    }

    /// Obtains information about the directory snapshots that belong to this account. This operation supports pagination with the use of the NextToken request and response parameters. If more results are available, the DescribeSnapshots.NextToken member contains a token that you pass in the next call to DescribeSnapshots to retrieve the next set of items. You can also specify a maximum number of return results with the Limit parameter.
    /// Return PaginatorSequence for operation.
    ///
    /// - Parameters:
    ///   - input: Input for request
    ///   - logger: Logger used flot logging
    public func describeSnapshotsPaginator(
        _ input: DescribeSnapshotsRequest,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<DescribeSnapshotsRequest, DescribeSnapshotsResult> {
        return .init(
            input: input,
            command: self.describeSnapshots,
            inputKey: \DescribeSnapshotsRequest.nextToken,
            outputKey: \DescribeSnapshotsResult.nextToken,
            logger: logger
        )
    }

    /// Obtains information about the trust relationships for this account. If no input parameters are provided, such as DirectoryId or TrustIds, this request describes all the trust relationships belonging to the account.
    /// Return PaginatorSequence for operation.
    ///
    /// - Parameters:
    ///   - input: Input for request
    ///   - logger: Logger used flot logging
    public func describeTrustsPaginator(
        _ input: DescribeTrustsRequest,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<DescribeTrustsRequest, DescribeTrustsResult> {
        return .init(
            input: input,
            command: self.describeTrusts,
            inputKey: \DescribeTrustsRequest.nextToken,
            outputKey: \DescribeTrustsResult.nextToken,
            logger: logger
        )
    }

    ///  Describes the updates of a directory for a particular update type.
    /// Return PaginatorSequence for operation.
    ///
    /// - Parameters:
    ///   - input: Input for request
    ///   - logger: Logger used flot logging
    public func describeUpdateDirectoryPaginator(
        _ input: DescribeUpdateDirectoryRequest,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<DescribeUpdateDirectoryRequest, DescribeUpdateDirectoryResult> {
        return .init(
            input: input,
            command: self.describeUpdateDirectory,
            inputKey: \DescribeUpdateDirectoryRequest.nextToken,
            outputKey: \DescribeUpdateDirectoryResult.nextToken,
            logger: logger
        )
    }

    /// For the specified directory, lists all the certificates registered for a secure LDAP or client certificate authentication.
    /// Return PaginatorSequence for operation.
    ///
    /// - Parameters:
    ///   - input: Input for request
    ///   - logger: Logger used flot logging
    public func listCertificatesPaginator(
        _ input: ListCertificatesRequest,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<ListCertificatesRequest, ListCertificatesResult> {
        return .init(
            input: input,
            command: self.listCertificates,
            inputKey: \ListCertificatesRequest.nextToken,
            outputKey: \ListCertificatesResult.nextToken,
            logger: logger
        )
    }

    /// Lists the address blocks that you have added to a directory.
    /// Return PaginatorSequence for operation.
    ///
    /// - Parameters:
    ///   - input: Input for request
    ///   - logger: Logger used flot logging
    public func listIpRoutesPaginator(
        _ input: ListIpRoutesRequest,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<ListIpRoutesRequest, ListIpRoutesResult> {
        return .init(
            input: input,
            command: self.listIpRoutes,
            inputKey: \ListIpRoutesRequest.nextToken,
            outputKey: \ListIpRoutesResult.nextToken,
            logger: logger
        )
    }

    /// Lists the active log subscriptions for the Amazon Web Services account.
    /// Return PaginatorSequence for operation.
    ///
    /// - Parameters:
    ///   - input: Input for request
    ///   - logger: Logger used flot logging
    public func listLogSubscriptionsPaginator(
        _ input: ListLogSubscriptionsRequest,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<ListLogSubscriptionsRequest, ListLogSubscriptionsResult> {
        return .init(
            input: input,
            command: self.listLogSubscriptions,
            inputKey: \ListLogSubscriptionsRequest.nextToken,
            outputKey: \ListLogSubscriptionsResult.nextToken,
            logger: logger
        )
    }

    /// Lists all schema extensions applied to a Microsoft AD Directory.
    /// Return PaginatorSequence for operation.
    ///
    /// - Parameters:
    ///   - input: Input for request
    ///   - logger: Logger used flot logging
    public func listSchemaExtensionsPaginator(
        _ input: ListSchemaExtensionsRequest,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<ListSchemaExtensionsRequest, ListSchemaExtensionsResult> {
        return .init(
            input: input,
            command: self.listSchemaExtensions,
            inputKey: \ListSchemaExtensionsRequest.nextToken,
            outputKey: \ListSchemaExtensionsResult.nextToken,
            logger: logger
        )
    }

    /// Lists all tags on a directory.
    /// Return PaginatorSequence for operation.
    ///
    /// - Parameters:
    ///   - input: Input for request
    ///   - logger: Logger used flot logging
    public func listTagsForResourcePaginator(
        _ input: ListTagsForResourceRequest,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<ListTagsForResourceRequest, ListTagsForResourceResult> {
        return .init(
            input: input,
            command: self.listTagsForResource,
            inputKey: \ListTagsForResourceRequest.nextToken,
            outputKey: \ListTagsForResourceResult.nextToken,
            logger: logger
        )
    }
}

extension DirectoryService.DescribeClientAuthenticationSettingsRequest: AWSPaginateToken {
    public func usingPaginationToken(_ token: String) -> DirectoryService.DescribeClientAuthenticationSettingsRequest {
        return .init(
            directoryId: self.directoryId,
            limit: self.limit,
            nextToken: token,
            type: self.type
        )
    }
}

extension DirectoryService.DescribeDirectoriesRequest: AWSPaginateToken {
    public func usingPaginationToken(_ token: String) -> DirectoryService.DescribeDirectoriesRequest {
        return .init(
            directoryIds: self.directoryIds,
            limit: self.limit,
            nextToken: token
        )
    }
}

extension DirectoryService.DescribeDomainControllersRequest: AWSPaginateToken {
    public func usingPaginationToken(_ token: String) -> DirectoryService.DescribeDomainControllersRequest {
        return .init(
            directoryId: self.directoryId,
            domainControllerIds: self.domainControllerIds,
            limit: self.limit,
            nextToken: token
        )
    }
}

extension DirectoryService.DescribeLDAPSSettingsRequest: AWSPaginateToken {
    public func usingPaginationToken(_ token: String) -> DirectoryService.DescribeLDAPSSettingsRequest {
        return .init(
            directoryId: self.directoryId,
            limit: self.limit,
            nextToken: token,
            type: self.type
        )
    }
}

extension DirectoryService.DescribeRegionsRequest: AWSPaginateToken {
    public func usingPaginationToken(_ token: String) -> DirectoryService.DescribeRegionsRequest {
        return .init(
            directoryId: self.directoryId,
            nextToken: token,
            regionName: self.regionName
        )
    }
}

extension DirectoryService.DescribeSharedDirectoriesRequest: AWSPaginateToken {
    public func usingPaginationToken(_ token: String) -> DirectoryService.DescribeSharedDirectoriesRequest {
        return .init(
            limit: self.limit,
            nextToken: token,
            ownerDirectoryId: self.ownerDirectoryId,
            sharedDirectoryIds: self.sharedDirectoryIds
        )
    }
}

extension DirectoryService.DescribeSnapshotsRequest: AWSPaginateToken {
    public func usingPaginationToken(_ token: String) -> DirectoryService.DescribeSnapshotsRequest {
        return .init(
            directoryId: self.directoryId,
            limit: self.limit,
            nextToken: token,
            snapshotIds: self.snapshotIds
        )
    }
}

extension DirectoryService.DescribeTrustsRequest: AWSPaginateToken {
    public func usingPaginationToken(_ token: String) -> DirectoryService.DescribeTrustsRequest {
        return .init(
            directoryId: self.directoryId,
            limit: self.limit,
            nextToken: token,
            trustIds: self.trustIds
        )
    }
}

extension DirectoryService.DescribeUpdateDirectoryRequest: AWSPaginateToken {
    public func usingPaginationToken(_ token: String) -> DirectoryService.DescribeUpdateDirectoryRequest {
        return .init(
            directoryId: self.directoryId,
            nextToken: token,
            regionName: self.regionName,
            updateType: self.updateType
        )
    }
}

extension DirectoryService.ListCertificatesRequest: AWSPaginateToken {
    public func usingPaginationToken(_ token: String) -> DirectoryService.ListCertificatesRequest {
        return .init(
            directoryId: self.directoryId,
            limit: self.limit,
            nextToken: token
        )
    }
}

extension DirectoryService.ListIpRoutesRequest: AWSPaginateToken {
    public func usingPaginationToken(_ token: String) -> DirectoryService.ListIpRoutesRequest {
        return .init(
            directoryId: self.directoryId,
            limit: self.limit,
            nextToken: token
        )
    }
}

extension DirectoryService.ListLogSubscriptionsRequest: AWSPaginateToken {
    public func usingPaginationToken(_ token: String) -> DirectoryService.ListLogSubscriptionsRequest {
        return .init(
            directoryId: self.directoryId,
            limit: self.limit,
            nextToken: token
        )
    }
}

extension DirectoryService.ListSchemaExtensionsRequest: AWSPaginateToken {
    public func usingPaginationToken(_ token: String) -> DirectoryService.ListSchemaExtensionsRequest {
        return .init(
            directoryId: self.directoryId,
            limit: self.limit,
            nextToken: token
        )
    }
}

extension DirectoryService.ListTagsForResourceRequest: AWSPaginateToken {
    public func usingPaginationToken(_ token: String) -> DirectoryService.ListTagsForResourceRequest {
        return .init(
            limit: self.limit,
            nextToken: token,
            resourceId: self.resourceId
        )
    }
}
