//===----------------------------------------------------------------------===//
//
// This source file is part of the Soto for AWS open source project
//
// Copyright (c) 2017-2022 the Soto project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
// See CONTRIBUTORS.txt for the list of Soto project authors
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by https://github.com/soto-project/soto-codegenerator.
// DO NOT EDIT.

#if compiler(>=5.5.2) && canImport(_Concurrency)

import SotoCore

// MARK: Paginators

@available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
extension DirectoryService {
    ///  Retrieves information about the type of client authentication for the specified directory, if the type is specified. If no type is specified, information about all client authentication types that are supported for the specified directory is retrieved. Currently, only SmartCard is supported.
    /// Return PaginatorSequence for operation.
    ///
    /// - Parameters:
    ///   - input: Input for request
    ///   - logger: Logger used flot logging
    ///   - eventLoop: EventLoop to run this process on
    public func describeClientAuthenticationSettingsPaginator(
        _ input: DescribeClientAuthenticationSettingsRequest,
        logger: Logger = AWSClient.loggingDisabled,
        on eventLoop: EventLoop? = nil
    ) -> AWSClient.PaginatorSequence<DescribeClientAuthenticationSettingsRequest, DescribeClientAuthenticationSettingsResult> {
        return .init(
            input: input,
            command: describeClientAuthenticationSettings,
            inputKey: \DescribeClientAuthenticationSettingsRequest.nextToken,
            outputKey: \DescribeClientAuthenticationSettingsResult.nextToken,
            logger: logger,
            on: eventLoop
        )
    }

    ///  Obtains information about the directories that belong to this account. You can retrieve information about specific directories by passing the directory identifiers in the DirectoryIds parameter. Otherwise, all directories that belong to the current account are returned. This operation supports pagination with the use of the NextToken request and response parameters. If more results are available, the DescribeDirectoriesResult.NextToken member contains a token that you pass in the next call to DescribeDirectories to retrieve the next set of items. You can also specify a maximum number of return results with the Limit parameter.
    /// Return PaginatorSequence for operation.
    ///
    /// - Parameters:
    ///   - input: Input for request
    ///   - logger: Logger used flot logging
    ///   - eventLoop: EventLoop to run this process on
    public func describeDirectoriesPaginator(
        _ input: DescribeDirectoriesRequest,
        logger: Logger = AWSClient.loggingDisabled,
        on eventLoop: EventLoop? = nil
    ) -> AWSClient.PaginatorSequence<DescribeDirectoriesRequest, DescribeDirectoriesResult> {
        return .init(
            input: input,
            command: describeDirectories,
            inputKey: \DescribeDirectoriesRequest.nextToken,
            outputKey: \DescribeDirectoriesResult.nextToken,
            logger: logger,
            on: eventLoop
        )
    }

    ///  Provides information about any domain controllers in your directory.
    /// Return PaginatorSequence for operation.
    ///
    /// - Parameters:
    ///   - input: Input for request
    ///   - logger: Logger used flot logging
    ///   - eventLoop: EventLoop to run this process on
    public func describeDomainControllersPaginator(
        _ input: DescribeDomainControllersRequest,
        logger: Logger = AWSClient.loggingDisabled,
        on eventLoop: EventLoop? = nil
    ) -> AWSClient.PaginatorSequence<DescribeDomainControllersRequest, DescribeDomainControllersResult> {
        return .init(
            input: input,
            command: describeDomainControllers,
            inputKey: \DescribeDomainControllersRequest.nextToken,
            outputKey: \DescribeDomainControllersResult.nextToken,
            logger: logger,
            on: eventLoop
        )
    }

    ///  Describes the status of LDAP security for the specified directory.
    /// Return PaginatorSequence for operation.
    ///
    /// - Parameters:
    ///   - input: Input for request
    ///   - logger: Logger used flot logging
    ///   - eventLoop: EventLoop to run this process on
    public func describeLDAPSSettingsPaginator(
        _ input: DescribeLDAPSSettingsRequest,
        logger: Logger = AWSClient.loggingDisabled,
        on eventLoop: EventLoop? = nil
    ) -> AWSClient.PaginatorSequence<DescribeLDAPSSettingsRequest, DescribeLDAPSSettingsResult> {
        return .init(
            input: input,
            command: describeLDAPSSettings,
            inputKey: \DescribeLDAPSSettingsRequest.nextToken,
            outputKey: \DescribeLDAPSSettingsResult.nextToken,
            logger: logger,
            on: eventLoop
        )
    }

    ///  Provides information about the Regions that are configured for multi-Region replication.
    /// Return PaginatorSequence for operation.
    ///
    /// - Parameters:
    ///   - input: Input for request
    ///   - logger: Logger used flot logging
    ///   - eventLoop: EventLoop to run this process on
    public func describeRegionsPaginator(
        _ input: DescribeRegionsRequest,
        logger: Logger = AWSClient.loggingDisabled,
        on eventLoop: EventLoop? = nil
    ) -> AWSClient.PaginatorSequence<DescribeRegionsRequest, DescribeRegionsResult> {
        return .init(
            input: input,
            command: describeRegions,
            inputKey: \DescribeRegionsRequest.nextToken,
            outputKey: \DescribeRegionsResult.nextToken,
            logger: logger,
            on: eventLoop
        )
    }

    ///  Returns the shared directories in your account.
    /// Return PaginatorSequence for operation.
    ///
    /// - Parameters:
    ///   - input: Input for request
    ///   - logger: Logger used flot logging
    ///   - eventLoop: EventLoop to run this process on
    public func describeSharedDirectoriesPaginator(
        _ input: DescribeSharedDirectoriesRequest,
        logger: Logger = AWSClient.loggingDisabled,
        on eventLoop: EventLoop? = nil
    ) -> AWSClient.PaginatorSequence<DescribeSharedDirectoriesRequest, DescribeSharedDirectoriesResult> {
        return .init(
            input: input,
            command: describeSharedDirectories,
            inputKey: \DescribeSharedDirectoriesRequest.nextToken,
            outputKey: \DescribeSharedDirectoriesResult.nextToken,
            logger: logger,
            on: eventLoop
        )
    }

    ///  Obtains information about the directory snapshots that belong to this account. This operation supports pagination with the use of the NextToken request and response parameters. If more results are available, the DescribeSnapshots.NextToken member contains a token that you pass in the next call to DescribeSnapshots to retrieve the next set of items. You can also specify a maximum number of return results with the Limit parameter.
    /// Return PaginatorSequence for operation.
    ///
    /// - Parameters:
    ///   - input: Input for request
    ///   - logger: Logger used flot logging
    ///   - eventLoop: EventLoop to run this process on
    public func describeSnapshotsPaginator(
        _ input: DescribeSnapshotsRequest,
        logger: Logger = AWSClient.loggingDisabled,
        on eventLoop: EventLoop? = nil
    ) -> AWSClient.PaginatorSequence<DescribeSnapshotsRequest, DescribeSnapshotsResult> {
        return .init(
            input: input,
            command: describeSnapshots,
            inputKey: \DescribeSnapshotsRequest.nextToken,
            outputKey: \DescribeSnapshotsResult.nextToken,
            logger: logger,
            on: eventLoop
        )
    }

    ///  Obtains information about the trust relationships for this account. If no input parameters are provided, such as DirectoryId or TrustIds, this request describes all the trust relationships belonging to the account.
    /// Return PaginatorSequence for operation.
    ///
    /// - Parameters:
    ///   - input: Input for request
    ///   - logger: Logger used flot logging
    ///   - eventLoop: EventLoop to run this process on
    public func describeTrustsPaginator(
        _ input: DescribeTrustsRequest,
        logger: Logger = AWSClient.loggingDisabled,
        on eventLoop: EventLoop? = nil
    ) -> AWSClient.PaginatorSequence<DescribeTrustsRequest, DescribeTrustsResult> {
        return .init(
            input: input,
            command: describeTrusts,
            inputKey: \DescribeTrustsRequest.nextToken,
            outputKey: \DescribeTrustsResult.nextToken,
            logger: logger,
            on: eventLoop
        )
    }

    ///   Describes the updates of a directory for a particular update type.
    /// Return PaginatorSequence for operation.
    ///
    /// - Parameters:
    ///   - input: Input for request
    ///   - logger: Logger used flot logging
    ///   - eventLoop: EventLoop to run this process on
    public func describeUpdateDirectoryPaginator(
        _ input: DescribeUpdateDirectoryRequest,
        logger: Logger = AWSClient.loggingDisabled,
        on eventLoop: EventLoop? = nil
    ) -> AWSClient.PaginatorSequence<DescribeUpdateDirectoryRequest, DescribeUpdateDirectoryResult> {
        return .init(
            input: input,
            command: describeUpdateDirectory,
            inputKey: \DescribeUpdateDirectoryRequest.nextToken,
            outputKey: \DescribeUpdateDirectoryResult.nextToken,
            logger: logger,
            on: eventLoop
        )
    }

    ///  For the specified directory, lists all the certificates registered for a secure LDAP or client certificate authentication.
    /// Return PaginatorSequence for operation.
    ///
    /// - Parameters:
    ///   - input: Input for request
    ///   - logger: Logger used flot logging
    ///   - eventLoop: EventLoop to run this process on
    public func listCertificatesPaginator(
        _ input: ListCertificatesRequest,
        logger: Logger = AWSClient.loggingDisabled,
        on eventLoop: EventLoop? = nil
    ) -> AWSClient.PaginatorSequence<ListCertificatesRequest, ListCertificatesResult> {
        return .init(
            input: input,
            command: listCertificates,
            inputKey: \ListCertificatesRequest.nextToken,
            outputKey: \ListCertificatesResult.nextToken,
            logger: logger,
            on: eventLoop
        )
    }

    ///  Lists the address blocks that you have added to a directory.
    /// Return PaginatorSequence for operation.
    ///
    /// - Parameters:
    ///   - input: Input for request
    ///   - logger: Logger used flot logging
    ///   - eventLoop: EventLoop to run this process on
    public func listIpRoutesPaginator(
        _ input: ListIpRoutesRequest,
        logger: Logger = AWSClient.loggingDisabled,
        on eventLoop: EventLoop? = nil
    ) -> AWSClient.PaginatorSequence<ListIpRoutesRequest, ListIpRoutesResult> {
        return .init(
            input: input,
            command: listIpRoutes,
            inputKey: \ListIpRoutesRequest.nextToken,
            outputKey: \ListIpRoutesResult.nextToken,
            logger: logger,
            on: eventLoop
        )
    }

    ///  Lists the active log subscriptions for the Amazon Web Services account.
    /// Return PaginatorSequence for operation.
    ///
    /// - Parameters:
    ///   - input: Input for request
    ///   - logger: Logger used flot logging
    ///   - eventLoop: EventLoop to run this process on
    public func listLogSubscriptionsPaginator(
        _ input: ListLogSubscriptionsRequest,
        logger: Logger = AWSClient.loggingDisabled,
        on eventLoop: EventLoop? = nil
    ) -> AWSClient.PaginatorSequence<ListLogSubscriptionsRequest, ListLogSubscriptionsResult> {
        return .init(
            input: input,
            command: listLogSubscriptions,
            inputKey: \ListLogSubscriptionsRequest.nextToken,
            outputKey: \ListLogSubscriptionsResult.nextToken,
            logger: logger,
            on: eventLoop
        )
    }

    ///  Lists all schema extensions applied to a Microsoft AD Directory.
    /// Return PaginatorSequence for operation.
    ///
    /// - Parameters:
    ///   - input: Input for request
    ///   - logger: Logger used flot logging
    ///   - eventLoop: EventLoop to run this process on
    public func listSchemaExtensionsPaginator(
        _ input: ListSchemaExtensionsRequest,
        logger: Logger = AWSClient.loggingDisabled,
        on eventLoop: EventLoop? = nil
    ) -> AWSClient.PaginatorSequence<ListSchemaExtensionsRequest, ListSchemaExtensionsResult> {
        return .init(
            input: input,
            command: listSchemaExtensions,
            inputKey: \ListSchemaExtensionsRequest.nextToken,
            outputKey: \ListSchemaExtensionsResult.nextToken,
            logger: logger,
            on: eventLoop
        )
    }

    ///  Lists all tags on a directory.
    /// Return PaginatorSequence for operation.
    ///
    /// - Parameters:
    ///   - input: Input for request
    ///   - logger: Logger used flot logging
    ///   - eventLoop: EventLoop to run this process on
    public func listTagsForResourcePaginator(
        _ input: ListTagsForResourceRequest,
        logger: Logger = AWSClient.loggingDisabled,
        on eventLoop: EventLoop? = nil
    ) -> AWSClient.PaginatorSequence<ListTagsForResourceRequest, ListTagsForResourceResult> {
        return .init(
            input: input,
            command: listTagsForResource,
            inputKey: \ListTagsForResourceRequest.nextToken,
            outputKey: \ListTagsForResourceResult.nextToken,
            logger: logger,
            on: eventLoop
        )
    }
}

#endif // compiler(>=5.5.2) && canImport(_Concurrency)
